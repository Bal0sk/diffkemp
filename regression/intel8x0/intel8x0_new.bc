; ModuleID = 'sound/pci/intel8x0.bc'
source_filename = "sound/pci/intel8x0.c"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%struct.kernel_param_ops = type { i32, i32 (i8*, %struct.kernel_param*)*, i32 (i8*, %struct.kernel_param*)*, void (i8*)* }
%struct.kernel_param = type { i8*, %struct.module*, %struct.kernel_param_ops*, i16, i8, i8, %union.anon.49 }
%struct.module = type { i32, %struct.list_head, [56 x i8], %struct.module_kobject, %struct.module_attribute*, i8*, i8*, %struct.kobject*, %struct.kernel_symbol*, i32*, i32, %struct.mutex, %struct.kernel_param*, i32, i32, %struct.kernel_symbol*, i32*, i8, %struct.kernel_symbol*, i32*, i32, i32, %struct.exception_table_entry*, i32 ()*, [40 x i8], %struct.module_layout, %struct.module_layout, %struct.mod_arch_specific, i64, i32, %struct.list_head, %struct.bug_entry*, %struct.mod_kallsyms*, %struct.mod_kallsyms, %struct.module_sect_attrs*, %struct.module_notes_attrs*, i8*, i8*, i32, i32, %struct.tracepoint**, i32, i8**, %struct.trace_event_call**, i32, %struct.trace_enum_map**, i32, %struct.list_head, %struct.list_head, void ()*, %struct.atomic_t, [12 x i8] }
%struct.module_kobject = type { %struct.kobject, %struct.module*, %struct.kobject*, %struct.module_param_attrs*, %struct.completion* }
%struct.kobject = type { i8*, %struct.list_head, %struct.kobject*, %struct.kset*, %struct.kobj_type*, %struct.kernfs_node*, %struct.kref, i8 }
%struct.kset = type { %struct.list_head, %struct.spinlock, %struct.kobject, %struct.kset_uevent_ops* }
%struct.spinlock = type { %union.anon.1 }
%union.anon.1 = type { %struct.raw_spinlock }
%struct.raw_spinlock = type { %struct.qspinlock }
%struct.qspinlock = type { %struct.atomic_t }
%struct.kset_uevent_ops = type { i32 (%struct.kset*, %struct.kobject*)*, i8* (%struct.kset*, %struct.kobject*)*, i32 (%struct.kset*, %struct.kobject*, %struct.kobj_uevent_env*)* }
%struct.kobj_uevent_env = type { [3 x i8*], [32 x i8*], i32, [2048 x i8], i32 }
%struct.kobj_type = type { void (%struct.kobject*)*, %struct.sysfs_ops*, %struct.attribute**, %struct.kobj_ns_type_operations* (%struct.kobject*)*, i8* (%struct.kobject*)* }
%struct.sysfs_ops = type { i64 (%struct.kobject*, %struct.attribute*, i8*)*, i64 (%struct.kobject*, %struct.attribute*, i8*, i64)* }
%struct.attribute = type { i8*, i16 }
%struct.kobj_ns_type_operations = type { i32, i1 ()*, i8* ()*, i8* (%struct.sock*)*, i8* ()*, void (i8*)* }
%struct.sock = type opaque
%struct.kernfs_node = type { %struct.atomic_t, %struct.atomic_t, %struct.kernfs_node*, i8*, %struct.rb_node, i8*, i32, %union.anon, i8*, i16, i16, i32, %struct.kernfs_iattrs* }
%struct.rb_node = type { i64, %struct.rb_node*, %struct.rb_node* }
%union.anon = type { %struct.kernfs_elem_attr }
%struct.kernfs_elem_attr = type { %struct.kernfs_ops*, %struct.kernfs_open_node*, i64, %struct.kernfs_node* }
%struct.kernfs_ops = type { i32 (%struct.kernfs_open_file*)*, void (%struct.kernfs_open_file*)*, i32 (%struct.seq_file*, i8*)*, i8* (%struct.seq_file*, i64*)*, i8* (%struct.seq_file*, i8*, i64*)*, void (%struct.seq_file*, i8*)*, i64 (%struct.kernfs_open_file*, i8*, i64, i64)*, i64, i8, i64 (%struct.kernfs_open_file*, i8*, i64, i64)*, i32 (%struct.kernfs_open_file*, %struct.vm_area_struct*)* }
%struct.kernfs_open_file = type { %struct.kernfs_node*, %struct.file*, %struct.seq_file*, i8*, %struct.mutex, %struct.mutex, i32, %struct.list_head, i8*, i64, i8, %struct.vm_operations_struct* }
%struct.file = type { %union.anon.2, %struct.path, %struct.inode*, %struct.file_operations*, %struct.spinlock, %struct.atomic64_t, i32, i32, %struct.mutex, i64, %struct.fown_struct, %struct.cred*, %struct.file_ra_state, i64, i8*, i8*, %struct.list_head, %struct.list_head, %struct.address_space* }
%union.anon.2 = type { %struct.callback_head }
%struct.callback_head = type { %struct.callback_head*, void (%struct.callback_head*)* }
%struct.path = type { %struct.vfsmount*, %struct.dentry* }
%struct.vfsmount = type opaque
%struct.dentry = type { i32, %struct.seqcount, %struct.hlist_bl_node, %struct.dentry*, %struct.qstr, %struct.inode*, [32 x i8], %struct.lockref, %struct.dentry_operations*, %struct.super_block*, i64, i8*, %union.anon.47, %struct.list_head, %struct.list_head, %union.anon.48 }
%struct.seqcount = type { i32 }
%struct.hlist_bl_node = type { %struct.hlist_bl_node*, %struct.hlist_bl_node** }
%struct.qstr = type { %union.anon.3, i8* }
%union.anon.3 = type { i64 }
%struct.lockref = type { %union.anon.45 }
%union.anon.45 = type { i64 }
%struct.dentry_operations = type { i32 (%struct.dentry*, i32)*, i32 (%struct.dentry*, i32)*, i32 (%struct.dentry*, %struct.qstr*)*, i32 (%struct.dentry*, i32, i8*, %struct.qstr*)*, i32 (%struct.dentry*)*, i32 (%struct.dentry*)*, void (%struct.dentry*)*, void (%struct.dentry*)*, void (%struct.dentry*, %struct.inode*)*, i8* (%struct.dentry*, i8*, i32)*, %struct.vfsmount* (%struct.path*)*, i32 (%struct.path*, i1)*, %struct.dentry* (%struct.dentry*, %struct.inode*, i32)*, [24 x i8] }
%struct.super_block = type { %struct.list_head, i32, i8, i64, i64, %struct.file_system_type*, %struct.super_operations*, %struct.dquot_operations*, %struct.quotactl_ops*, %struct.export_operations*, i64, i64, i64, %struct.dentry*, %struct.rw_semaphore, i32, %struct.atomic_t, i8*, %struct.xattr_handler**, %struct.fscrypt_operations*, %struct.hlist_bl_head, %struct.list_head, %struct.block_device*, %struct.backing_dev_info*, %struct.mtd_info*, %struct.hlist_node, i32, %struct.quota_info, %struct.sb_writers, [32 x i8], [16 x i8], i8*, i32, i32, i32, %struct.mutex, i8*, i8*, %struct.dentry_operations*, i32, %struct.shrinker, %struct.atomic64_t, i32, %struct.workqueue_struct*, %struct.hlist_head, %struct.user_namespace*, %struct.list_lru, [56 x i8], %struct.list_lru, %struct.callback_head, %struct.work_struct, %struct.mutex, i32, [36 x i8], %struct.spinlock, %struct.list_head, %struct.spinlock, %struct.list_head, [16 x i8] }
%struct.file_system_type = type { i8*, i32, %struct.dentry* (%struct.file_system_type*, i32, i8*, i8*)*, void (%struct.super_block*)*, %struct.module*, %struct.file_system_type*, %struct.hlist_head, %struct.lock_class_key, %struct.lock_class_key, %struct.lock_class_key, [3 x %struct.lock_class_key], %struct.lock_class_key, %struct.lock_class_key, %struct.lock_class_key }
%struct.lock_class_key = type {}
%struct.super_operations = type { %struct.inode* (%struct.super_block*)*, void (%struct.inode*)*, void (%struct.inode*, i32)*, i32 (%struct.inode*, %struct.writeback_control*)*, i32 (%struct.inode*)*, void (%struct.inode*)*, void (%struct.super_block*)*, i32 (%struct.super_block*, i32)*, i32 (%struct.super_block*)*, i32 (%struct.super_block*)*, i32 (%struct.super_block*)*, i32 (%struct.super_block*)*, i32 (%struct.dentry*, %struct.kstatfs*)*, i32 (%struct.super_block*, i32*, i8*)*, void (%struct.super_block*)*, i32 (%struct.seq_file*, %struct.dentry*)*, i32 (%struct.seq_file*, %struct.dentry*)*, i32 (%struct.seq_file*, %struct.dentry*)*, i32 (%struct.seq_file*, %struct.dentry*)*, i64 (%struct.super_block*, i32, i8*, i64, i64)*, i64 (%struct.super_block*, i32, i8*, i64, i64)*, %struct.dquot** (%struct.inode*)*, i32 (%struct.super_block*, %struct.page*, i32)*, i64 (%struct.super_block*, %struct.shrink_control*)*, i64 (%struct.super_block*, %struct.shrink_control*)* }
%struct.writeback_control = type opaque
%struct.kstatfs = type opaque
%struct.dquot = type { %struct.hlist_node, %struct.list_head, %struct.list_head, %struct.list_head, %struct.mutex, %struct.atomic_t, %struct.__wait_queue_head, %struct.super_block*, %struct.kqid, i64, i64, %struct.mem_dqblk }
%struct.__wait_queue_head = type { %struct.spinlock, %struct.list_head }
%struct.kqid = type { %union.anon.4, i32 }
%union.anon.4 = type { %struct.kuid_t }
%struct.kuid_t = type { i32 }
%struct.mem_dqblk = type { i64, i64, i64, i64, i64, i64, i64, i64, i64 }
%struct.page = type { i64, %union.anon.5, %union.anon.31, %union.anon.32, %union.anon.36, %union.anon.39, [8 x i8] }
%union.anon.5 = type { %struct.address_space* }
%union.anon.31 = type { i64 }
%union.anon.32 = type { i64 }
%union.anon.36 = type { %struct.list_head }
%union.anon.39 = type { i64 }
%struct.shrink_control = type { i32, i64, i32, %struct.mem_cgroup* }
%struct.mem_cgroup = type opaque
%struct.dquot_operations = type { i32 (%struct.dquot*)*, %struct.dquot* (%struct.super_block*, i32)*, void (%struct.dquot*)*, i32 (%struct.dquot*)*, i32 (%struct.dquot*)*, i32 (%struct.dquot*)*, i32 (%struct.super_block*, i32)*, i64* (%struct.inode*)*, i32 (%struct.inode*, %struct.kprojid_t*)*, i32 (%struct.super_block*, %struct.kqid*)* }
%struct.kprojid_t = type { i32 }
%struct.quotactl_ops = type { i32 (%struct.super_block*, i32, i32, %struct.path*)*, i32 (%struct.super_block*, i32)*, i32 (%struct.super_block*, i32)*, i32 (%struct.super_block*, i32)*, i32 (%struct.super_block*, i32)*, i32 (%struct.super_block*, i32, %struct.qc_info*)*, i32 (%struct.super_block*, i64, %struct.qc_dqblk*)*, i32 (%struct.super_block*, %struct.kqid*, %struct.qc_dqblk*)*, i32 (%struct.super_block*, i64, %struct.qc_dqblk*)*, i32 (%struct.super_block*, %struct.qc_state*)*, i32 (%struct.super_block*, i32)* }
%struct.qc_info = type { i32, i32, i32, i32, i32, i32, i32, i32 }
%struct.qc_dqblk = type { i32, i64, i64, i64, i64, i64, i64, i64, i64, i32, i32, i64, i64, i64, i64, i32 }
%struct.qc_state = type { i32, [3 x %struct.qc_type_state] }
%struct.qc_type_state = type { i32, i32, i32, i32, i32, i32, i32, i64, i64, i64 }
%struct.export_operations = type opaque
%struct.rw_semaphore = type { %struct.atomic64_t, %struct.list_head, %struct.raw_spinlock, %struct.optimistic_spin_queue, %struct.task_struct* }
%struct.optimistic_spin_queue = type { %struct.atomic_t }
%struct.task_struct = type { %struct.thread_info, i64, i8*, %struct.atomic_t, i32, i32, %struct.llist_node, i32, i32, i32, i64, %struct.task_struct*, i32, i32, i32, i32, i32, i32, %struct.sched_class*, [16 x i8], %struct.sched_entity, %struct.sched_rt_entity, %struct.task_group*, %struct.sched_dl_entity, i32, i32, i32, %struct.cpumask, %struct.sched_info, %struct.list_head, %struct.plist_node, %struct.rb_node, %struct.mm_struct*, %struct.mm_struct*, %struct.vmacache, %struct.task_rss_stat, i32, i32, i32, i32, i64, i32, i8, [3 x i8], i8, i64, %struct.restart_block, i32, i32, %struct.task_struct*, %struct.task_struct*, %struct.list_head, %struct.list_head, %struct.task_struct*, %struct.list_head, %struct.list_head, [3 x %struct.pid_link], %struct.list_head, %struct.list_head, %struct.completion*, i32*, i32*, i64, i64, i64, %struct.prev_cputime, i64, i64, i64, i64, i64, i64, %struct.task_cputime, [3 x %struct.list_head], %struct.cred*, %struct.cred*, %struct.cred*, [16 x i8], %struct.nameidata*, %struct.sysv_sem, %struct.sysv_shm, %struct.fs_struct*, %struct.files_struct*, %struct.nsproxy*, %struct.signal_struct*, %struct.sighand_struct*, %struct.sigset_t, %struct.sigset_t, %struct.sigset_t, %struct.sigpending, i64, i64, i32, %struct.callback_head*, %struct.audit_context*, %struct.kuid_t, i32, %struct.seccomp, i32, i32, %struct.spinlock, %struct.raw_spinlock, %struct.wake_q_node, %struct.rb_root, %struct.rb_node*, %struct.task_struct*, %struct.rt_mutex_waiter*, i8*, %struct.bio_list*, %struct.blk_plug*, %struct.reclaim_state*, %struct.backing_dev_info*, %struct.io_context*, i64, %struct.siginfo*, %struct.task_io_accounting, i64, i64, i64, %struct.nodemask_t, %struct.seqcount, i32, i32, %struct.css_set*, %struct.list_head, %struct.robust_list_head*, %struct.compat_robust_list_head*, %struct.list_head, %struct.futex_pi_state*, [2 x %struct.perf_event_context*], %struct.mutex, %struct.list_head, %struct.mempolicy*, i16, i16, %struct.tlbflush_unmap_batch, %struct.callback_head, %struct.pipe_inode_info*, %struct.page_frag, %struct.task_delay_info*, i32, i32, i64, i64, i64, i64, i64, %struct.uprobe_task*, i32, %struct.task_struct*, %struct.vm_struct*, %struct.atomic_t, i8*, %struct.thread_struct }
%struct.thread_info = type { i64 }
%struct.llist_node = type { %struct.llist_node* }
%struct.sched_class = type opaque
%struct.sched_entity = type { %struct.load_weight, %struct.rb_node, %struct.list_head, i32, i64, i64, i64, i64, i64, %struct.sched_statistics, i32, %struct.sched_entity*, %struct.cfs_rq*, %struct.cfs_rq*, [32 x i8], %struct.sched_avg, [24 x i8] }
%struct.load_weight = type { i64, i32 }
%struct.sched_statistics = type { i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64 }
%struct.cfs_rq = type opaque
%struct.sched_avg = type { i64, i64, i32, i32, i64, i64 }
%struct.sched_rt_entity = type { %struct.list_head, i64, i64, i32, i16, i16, %struct.sched_rt_entity* }
%struct.task_group = type opaque
%struct.sched_dl_entity = type { %struct.rb_node, i64, i64, i64, i64, i64, i64, i32, i32, i32, i32, %struct.hrtimer }
%struct.hrtimer = type { %struct.timerqueue_node, i64, i32 (%struct.hrtimer*)*, %struct.hrtimer_clock_base*, i8, i8 }
%struct.timerqueue_node = type { %struct.rb_node, i64 }
%struct.hrtimer_clock_base = type { %struct.hrtimer_cpu_base*, i32, i32, %struct.timerqueue_head, i64 ()*, i64, [16 x i8] }
%struct.hrtimer_cpu_base = type { %struct.raw_spinlock, %struct.seqcount, %struct.hrtimer*, i32, i32, i32, i8, i8, i8, i64, %struct.hrtimer*, i32, i32, i32, i32, [4 x %struct.hrtimer_clock_base] }
%struct.timerqueue_head = type { %struct.rb_root, %struct.timerqueue_node* }
%struct.cpumask = type { [1 x i64] }
%struct.sched_info = type { i64, i64, i64, i64 }
%struct.plist_node = type { i32, %struct.list_head, %struct.list_head }
%struct.mm_struct = type { %struct.vm_area_struct*, %struct.rb_root, i32, i64 (%struct.file*, i64, i64, i64, i64)*, i64, i64, i64, i64, i64, i64, %struct.pgd_t*, %struct.atomic_t, %struct.atomic_t, %struct.atomic64_t, %struct.atomic64_t, i32, %struct.spinlock, %struct.rw_semaphore, %struct.list_head, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, [46 x i64], %struct.mm_rss_stat, %struct.linux_binfmt*, [1 x %struct.cpumask], %struct.mm_context_t, i64, %struct.core_state*, %struct.spinlock, %struct.kioctx_table*, %struct.user_namespace*, %struct.file*, %struct.mmu_notifier_mm*, i8, %struct.uprobes_state, %struct.atomic64_t, %struct.work_struct }
%struct.vm_area_struct = type { i64, i64, %struct.vm_area_struct*, %struct.vm_area_struct*, %struct.rb_node, i64, %struct.mm_struct*, %struct.pgprot, i64, %struct.anon.6, %struct.list_head, %struct.anon_vma*, %struct.vm_operations_struct*, i64, %struct.file*, i8*, %struct.mempolicy*, %struct.vm_userfaultfd_ctx }
%struct.pgprot = type { i64 }
%struct.anon.6 = type { %struct.rb_node, i64 }
%struct.anon_vma = type opaque
%struct.vm_userfaultfd_ctx = type {}
%struct.pgd_t = type { i64 }
%struct.mm_rss_stat = type { [4 x %struct.atomic64_t] }
%struct.linux_binfmt = type opaque
%struct.mm_context_t = type { %struct.ldt_struct*, i16, %struct.mutex, i8*, %struct.vdso_image*, %struct.atomic_t, i16, i16 }
%struct.ldt_struct = type opaque
%struct.vdso_image = type { i8*, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64 }
%struct.core_state = type { %struct.atomic_t, %struct.core_thread, %struct.completion }
%struct.core_thread = type { %struct.task_struct*, %struct.core_thread* }
%struct.completion = type { i32, %struct.__wait_queue_head }
%struct.kioctx_table = type opaque
%struct.mmu_notifier_mm = type opaque
%struct.uprobes_state = type { %struct.xol_area* }
%struct.xol_area = type opaque
%struct.vmacache = type { i32, [4 x %struct.vm_area_struct*] }
%struct.task_rss_stat = type { i32, [4 x i32] }
%struct.restart_block = type { i64 (%struct.restart_block*)*, %union.anon.7 }
%union.anon.7 = type { %struct.anon.8 }
%struct.anon.8 = type { i32*, i32, i32, i32, i64, i32* }
%struct.pid_link = type { %struct.hlist_node, %struct.pid* }
%struct.pid = type { %struct.atomic_t, i32, [3 x %struct.hlist_head], %struct.callback_head, [1 x %struct.upid] }
%struct.upid = type { i32, %struct.pid_namespace*, %struct.hlist_node }
%struct.pid_namespace = type opaque
%struct.prev_cputime = type { i64, i64, %struct.raw_spinlock }
%struct.task_cputime = type { i64, i64, i64 }
%struct.nameidata = type opaque
%struct.sysv_sem = type { %struct.sem_undo_list* }
%struct.sem_undo_list = type opaque
%struct.sysv_shm = type { %struct.list_head }
%struct.fs_struct = type opaque
%struct.files_struct = type opaque
%struct.nsproxy = type opaque
%struct.signal_struct = type opaque
%struct.sighand_struct = type opaque
%struct.sigset_t = type { [1 x i64] }
%struct.sigpending = type { %struct.list_head, %struct.sigset_t }
%struct.audit_context = type opaque
%struct.seccomp = type { i32, %struct.seccomp_filter* }
%struct.seccomp_filter = type opaque
%struct.wake_q_node = type { %struct.wake_q_node* }
%struct.rb_root = type { %struct.rb_node* }
%struct.rt_mutex_waiter = type opaque
%struct.bio_list = type opaque
%struct.blk_plug = type opaque
%struct.reclaim_state = type opaque
%struct.io_context = type opaque
%struct.siginfo = type { i32, i32, i32, %union.anon.11 }
%union.anon.11 = type { %struct.anon.15, [80 x i8] }
%struct.anon.15 = type { i32, i32, i32, i64, i64 }
%struct.task_io_accounting = type { i64, i64, i64, i64, i64, i64, i64 }
%struct.nodemask_t = type { [1 x i64] }
%struct.css_set = type opaque
%struct.robust_list_head = type opaque
%struct.compat_robust_list_head = type opaque
%struct.futex_pi_state = type opaque
%struct.perf_event_context = type opaque
%struct.mempolicy = type opaque
%struct.tlbflush_unmap_batch = type { %struct.cpumask, i8, i8 }
%struct.pipe_inode_info = type opaque
%struct.page_frag = type { %struct.page*, i32, i32 }
%struct.task_delay_info = type opaque
%struct.uprobe_task = type { i32, %union.anon.21, %struct.uprobe*, i64, %struct.return_instance*, i32 }
%union.anon.21 = type { %struct.anon.22 }
%struct.anon.22 = type { %struct.arch_uprobe_task, i64 }
%struct.arch_uprobe_task = type { i64, i32, i32 }
%struct.uprobe = type opaque
%struct.return_instance = type { %struct.uprobe*, i64, i64, i64, i8, %struct.return_instance* }
%struct.vm_struct = type opaque
%struct.thread_struct = type { [3 x %struct.desc_struct], i64, i64, i16, i16, i16, i16, i32, i64, i64, [4 x %struct.perf_event*], i64, i64, i64, i64, i64, i64*, i64, i32, %struct.mm_segment_t, i8, [15 x i8], %struct.fpu }
%struct.desc_struct = type { %union.anon.24 }
%union.anon.24 = type { %struct.anon.25 }
%struct.anon.25 = type { i32, i32 }
%struct.perf_event = type opaque
%struct.mm_segment_t = type { i64 }
%struct.fpu = type { i32, i8, i8, [58 x i8], %union.fpregs_state }
%union.fpregs_state = type { %struct.xregs_state, [3520 x i8] }
%struct.xregs_state = type { %struct.fxregs_state, %struct.xstate_header, [0 x i8] }
%struct.fxregs_state = type { i16, i16, i16, i16, %union.anon.27, i32, i32, [32 x i32], [64 x i32], [12 x i32], %union.anon.30 }
%union.anon.27 = type { %struct.anon.28 }
%struct.anon.28 = type { i64, i64 }
%union.anon.30 = type { [12 x i32] }
%struct.xstate_header = type { i64, i64, [6 x i64] }
%struct.xattr_handler = type opaque
%struct.fscrypt_operations = type opaque
%struct.hlist_bl_head = type { %struct.hlist_bl_node* }
%struct.block_device = type { i32, i32, %struct.inode*, %struct.super_block*, %struct.mutex, i8*, i8*, i32, i8, %struct.list_head, %struct.block_device*, i32, %struct.hd_struct*, i32, i32, %struct.gendisk*, %struct.request_queue*, %struct.backing_dev_info*, %struct.list_head, i64, i32, %struct.mutex }
%struct.hd_struct = type opaque
%struct.gendisk = type opaque
%struct.request_queue = type opaque
%struct.backing_dev_info = type opaque
%struct.mtd_info = type opaque
%struct.hlist_node = type { %struct.hlist_node*, %struct.hlist_node** }
%struct.quota_info = type { i32, %struct.mutex, [3 x %struct.inode*], [3 x %struct.mem_dqinfo], [3 x %struct.quota_format_ops*] }
%struct.mem_dqinfo = type { %struct.quota_format_type*, i32, %struct.list_head, i64, i32, i32, i64, i64, i8* }
%struct.quota_format_type = type { i32, %struct.quota_format_ops*, %struct.module*, %struct.quota_format_type* }
%struct.quota_format_ops = type { i32 (%struct.super_block*, i32)*, i32 (%struct.super_block*, i32)*, i32 (%struct.super_block*, i32)*, i32 (%struct.super_block*, i32)*, i32 (%struct.dquot*)*, i32 (%struct.dquot*)*, i32 (%struct.dquot*)*, i32 (%struct.super_block*, %struct.kqid*)* }
%struct.sb_writers = type { i32, %struct.__wait_queue_head, [3 x %struct.percpu_rw_semaphore] }
%struct.percpu_rw_semaphore = type { %struct.rcu_sync, i32*, %struct.rw_semaphore, %struct.rcuwait, i32 }
%struct.rcu_sync = type { i32, i32, %struct.__wait_queue_head, i32, %struct.callback_head, i32 }
%struct.rcuwait = type { %struct.task_struct* }
%struct.shrinker = type { i64 (%struct.shrinker*, %struct.shrink_control*)*, i64 (%struct.shrinker*, %struct.shrink_control*)*, i32, i64, i64, %struct.list_head, %struct.atomic64_t* }
%struct.workqueue_struct = type opaque
%struct.hlist_head = type { %struct.hlist_node* }
%struct.user_namespace = type opaque
%struct.list_lru = type { %struct.list_lru_node* }
%struct.list_lru_node = type { %struct.spinlock, %struct.list_lru_one, i64, [24 x i8] }
%struct.list_lru_one = type { %struct.list_head, i64 }
%struct.work_struct = type { %struct.atomic64_t, %struct.list_head, void (%struct.work_struct*)* }
%union.anon.47 = type { %struct.list_head }
%union.anon.48 = type { %struct.hlist_node }
%struct.inode = type { i16, i16, %struct.kuid_t, %struct.kgid_t, i32, %struct.posix_acl*, %struct.posix_acl*, %struct.inode_operations*, %struct.super_block*, %struct.address_space*, i8*, i64, %union.anon.40, i32, i64, %struct.timespec, %struct.timespec, %struct.timespec, %struct.spinlock, i16, i32, i64, i64, %struct.rw_semaphore, i64, i64, %struct.hlist_node, %struct.list_head, %struct.list_head, %struct.list_head, %struct.list_head, %union.anon.41, i64, %struct.atomic_t, %struct.atomic_t, %struct.atomic_t, %struct.file_operations*, %struct.file_lock_context*, %struct.address_space, %struct.list_head, %union.anon.44, i32, i32, %struct.fsnotify_mark_connector*, i8* }
%struct.kgid_t = type { i32 }
%struct.posix_acl = type opaque
%struct.inode_operations = type { %struct.dentry* (%struct.inode*, %struct.dentry*, i32)*, i8* (%struct.dentry*, %struct.inode*, %struct.delayed_call*)*, i32 (%struct.inode*, i32)*, %struct.posix_acl* (%struct.inode*, i32)*, i32 (%struct.dentry*, i8*, i32)*, i32 (%struct.inode*, %struct.dentry*, i16, i1)*, i32 (%struct.dentry*, %struct.inode*, %struct.dentry*)*, i32 (%struct.inode*, %struct.dentry*)*, i32 (%struct.inode*, %struct.dentry*, i8*)*, i32 (%struct.inode*, %struct.dentry*, i16)*, i32 (%struct.inode*, %struct.dentry*)*, i32 (%struct.inode*, %struct.dentry*, i16, i32)*, i32 (%struct.inode*, %struct.dentry*, %struct.inode*, %struct.dentry*, i32)*, i32 (%struct.dentry*, %struct.iattr*)*, i32 (%struct.path*, %struct.kstat*, i32, i32)*, i64 (%struct.dentry*, i8*, i64)*, i32 (%struct.inode*, %struct.fiemap_extent_info*, i64, i64)*, i32 (%struct.inode*, %struct.timespec*, i32)*, i32 (%struct.inode*, %struct.dentry*, %struct.file*, i32, i16, i32*)*, i32 (%struct.inode*, %struct.dentry*, i16)*, i32 (%struct.inode*, %struct.posix_acl*, i32)*, [24 x i8] }
%struct.delayed_call = type { void (i8*)*, i8* }
%struct.iattr = type { i32, i16, %struct.kuid_t, %struct.kgid_t, i64, %struct.timespec, %struct.timespec, %struct.timespec, %struct.file* }
%struct.kstat = type { i32, i16, i32, i32, i64, i64, i64, i32, i32, %struct.kuid_t, %struct.kgid_t, i64, %struct.timespec, %struct.timespec, %struct.timespec, %struct.timespec, i64 }
%struct.fiemap_extent_info = type { i32, i32, i32, %struct.fiemap_extent* }
%struct.fiemap_extent = type { i64, i64, i64, [2 x i64], i32, [3 x i32] }
%union.anon.40 = type { i32 }
%struct.timespec = type { i64, i64 }
%union.anon.41 = type { %struct.callback_head }
%struct.file_lock_context = type { %struct.spinlock, %struct.list_head, %struct.list_head, %struct.list_head }
%struct.address_space = type { %struct.inode*, %struct.radix_tree_root, %struct.spinlock, %struct.atomic_t, %struct.rb_root, %struct.rw_semaphore, i64, i64, i64, %struct.address_space_operations*, i64, %struct.spinlock, i32, %struct.list_head, i8* }
%struct.radix_tree_root = type { i32, %struct.radix_tree_node* }
%struct.radix_tree_node = type { i8, i8, i8, i8, %struct.radix_tree_node*, %struct.radix_tree_root*, %union.anon.0, [64 x i8*], [3 x [1 x i64]] }
%union.anon.0 = type { %struct.list_head }
%struct.address_space_operations = type { i32 (%struct.page*, %struct.writeback_control*)*, i32 (%struct.file*, %struct.page*)*, i32 (%struct.address_space*, %struct.writeback_control*)*, i32 (%struct.page*)*, i32 (%struct.file*, %struct.address_space*, %struct.list_head*, i32)*, i32 (%struct.file*, %struct.address_space*, i64, i32, i32, %struct.page**, i8**)*, i32 (%struct.file*, %struct.address_space*, i64, i32, i32, %struct.page*, i8*)*, i64 (%struct.address_space*, i64)*, void (%struct.page*, i32, i32)*, i32 (%struct.page*, i32)*, void (%struct.page*)*, i64 (%struct.kiocb*, %struct.iov_iter*)*, i32 (%struct.address_space*, %struct.page*, %struct.page*, i32)*, i1 (%struct.page*, i32)*, void (%struct.page*)*, i32 (%struct.page*)*, i32 (%struct.page*, i64, i64)*, void (%struct.page*, i8*, i8*)*, i32 (%struct.address_space*, %struct.page*)*, i32 (%struct.swap_info_struct*, %struct.file*, i64*)*, void (%struct.file*)* }
%struct.kiocb = type { %struct.file*, i64, void (%struct.kiocb*, i64, i64)*, i8*, i32 }
%struct.iov_iter = type opaque
%struct.swap_info_struct = type opaque
%union.anon.44 = type { %struct.pipe_inode_info* }
%struct.fsnotify_mark_connector = type opaque
%struct.file_operations = type { %struct.module*, i64 (%struct.file*, i64, i32)*, i64 (%struct.file*, i8*, i64, i64*)*, i64 (%struct.file*, i8*, i64, i64*)*, i64 (%struct.kiocb*, %struct.iov_iter*)*, i64 (%struct.kiocb*, %struct.iov_iter*)*, i32 (%struct.file*, %struct.dir_context*)*, i32 (%struct.file*, %struct.dir_context*)*, i32 (%struct.file*, %struct.poll_table_struct*)*, i64 (%struct.file*, i32, i64)*, i64 (%struct.file*, i32, i64)*, i32 (%struct.file*, %struct.vm_area_struct*)*, i32 (%struct.inode*, %struct.file*)*, i32 (%struct.file*, i8*)*, i32 (%struct.inode*, %struct.file*)*, i32 (%struct.file*, i64, i64, i32)*, i32 (i32, %struct.file*, i32)*, i32 (%struct.file*, i32, %struct.file_lock*)*, i64 (%struct.file*, %struct.page*, i32, i64, i64*, i32)*, i64 (%struct.file*, i64, i64, i64, i64)*, i32 (i32)*, i32 (%struct.file*, i32, %struct.file_lock*)*, i64 (%struct.pipe_inode_info*, %struct.file*, i64*, i64, i32)*, i64 (%struct.file*, i64*, %struct.pipe_inode_info*, i64, i32)*, i32 (%struct.file*, i64, %struct.file_lock**, i8**)*, i64 (%struct.file*, i32, i64, i64)*, void (%struct.seq_file*, %struct.file*)*, i64 (%struct.file*, i64, %struct.file*, i64, i64, i32)*, i32 (%struct.file*, i64, %struct.file*, i64, i64)*, i64 (%struct.file*, i64, i64, %struct.file*, i64)* }
%struct.dir_context = type { i32 (%struct.dir_context*, i8*, i32, i64, i64, i32)*, i64 }
%struct.poll_table_struct = type { void (%struct.file*, %struct.__wait_queue_head*, %struct.poll_table_struct*)*, i64 }
%struct.file_lock = type { %struct.file_lock*, %struct.list_head, %struct.hlist_node, %struct.list_head, i8*, i32, i8, i32, i32, %struct.pid*, %struct.__wait_queue_head, %struct.file*, i64, i64, %struct.fasync_struct*, i64, i64, %struct.file_lock_operations*, %struct.lock_manager_operations*, %union.anon.42 }
%struct.fasync_struct = type { %struct.spinlock, i32, i32, %struct.fasync_struct*, %struct.file*, %struct.callback_head }
%struct.file_lock_operations = type { void (%struct.file_lock*, %struct.file_lock*)*, void (%struct.file_lock*)* }
%struct.lock_manager_operations = type { i32 (%struct.file_lock*, %struct.file_lock*)*, i64 (%struct.file_lock*)*, i8* (i8*)*, void (i8*)*, void (%struct.file_lock*)*, i32 (%struct.file_lock*, i32)*, i1 (%struct.file_lock*)*, i32 (%struct.file_lock*, i32, %struct.list_head*)*, void (%struct.file_lock*, i8**)* }
%union.anon.42 = type { %struct.nfs_lock_info }
%struct.nfs_lock_info = type { i32, %struct.nlm_lockowner*, %struct.list_head }
%struct.nlm_lockowner = type opaque
%struct.atomic64_t = type { i64 }
%struct.fown_struct = type { %struct.rwlock_t, %struct.pid*, i32, %struct.kuid_t, %struct.kuid_t, i32 }
%struct.rwlock_t = type { %struct.qrwlock }
%struct.qrwlock = type { %struct.atomic_t, %struct.qspinlock }
%struct.cred = type { %struct.atomic_t, %struct.kuid_t, %struct.kgid_t, %struct.kuid_t, %struct.kgid_t, %struct.kuid_t, %struct.kgid_t, %struct.kuid_t, %struct.kgid_t, i32, %struct.kernel_cap_struct, %struct.kernel_cap_struct, %struct.kernel_cap_struct, %struct.kernel_cap_struct, %struct.kernel_cap_struct, i8, %struct.key*, %struct.key*, %struct.key*, %struct.key*, i8*, %struct.user_struct*, %struct.user_namespace*, %struct.group_info*, %struct.callback_head }
%struct.kernel_cap_struct = type { [2 x i32] }
%struct.key = type { %struct.refcount_struct, i32, %union.anon.50, %struct.rw_semaphore, %struct.key_user*, i8*, %union.anon.51, i64, %struct.kuid_t, %struct.kgid_t, i32, i16, i16, i64, %union.anon.52, %union.anon.54, %struct.key_restriction* }
%struct.refcount_struct = type { %struct.atomic_t }
%union.anon.50 = type { %struct.rb_node }
%struct.key_user = type opaque
%union.anon.51 = type { i64 }
%union.anon.52 = type { %struct.keyring_index_key }
%struct.keyring_index_key = type { %struct.key_type*, i8*, i64 }
%struct.key_type = type opaque
%union.anon.54 = type { %union.key_payload }
%union.key_payload = type { [4 x i8*] }
%struct.key_restriction = type { i32 (%struct.key*, %struct.key_type*, %union.key_payload*, %struct.key*)*, %struct.key*, %struct.key_type* }
%struct.user_struct = type { %struct.atomic_t, %struct.atomic_t, %struct.atomic_t, %struct.atomic64_t, i64, i64, i64, %struct.atomic64_t, %struct.key*, %struct.key*, %struct.hlist_node, %struct.kuid_t, %struct.atomic64_t }
%struct.group_info = type { %struct.atomic_t, i32, [0 x %struct.kgid_t] }
%struct.file_ra_state = type { i64, i32, i32, i32, i32, i64 }
%struct.seq_file = type { i8*, i64, i64, i64, i64, i64, i64, i64, %struct.mutex, %struct.seq_operations*, i32, %struct.file*, i8* }
%struct.seq_operations = type { i8* (%struct.seq_file*, i64*)*, void (%struct.seq_file*, i8*)*, i8* (%struct.seq_file*, i8*, i64*)*, i32 (%struct.seq_file*, i8*)* }
%struct.vm_operations_struct = type { void (%struct.vm_area_struct*)*, void (%struct.vm_area_struct*)*, i32 (%struct.vm_area_struct*)*, i32 (%struct.vm_fault*)*, i32 (%struct.vm_fault*, i32)*, void (%struct.vm_fault*, i64, i64)*, i32 (%struct.vm_fault*)*, i32 (%struct.vm_fault*)*, i32 (%struct.vm_area_struct*, i64, i8*, i32, i32)*, i8* (%struct.vm_area_struct*)*, i32 (%struct.vm_area_struct*, %struct.mempolicy*)*, %struct.mempolicy* (%struct.vm_area_struct*, i64)*, %struct.page* (%struct.vm_area_struct*, i64)* }
%struct.vm_fault = type { %struct.vm_area_struct*, i32, i32, i64, i64, %struct.pmd_t*, %struct.pud_t*, %struct.pte_t, %struct.page*, %struct.mem_cgroup*, %struct.page*, %struct.pte_t*, %struct.spinlock*, %struct.page* }
%struct.pmd_t = type { i64 }
%struct.pud_t = type { i64 }
%struct.pte_t = type { i64 }
%struct.kernfs_open_node = type opaque
%struct.kernfs_iattrs = type opaque
%struct.kref = type { %struct.refcount_struct }
%struct.module_param_attrs = type opaque
%struct.module_attribute = type { %struct.attribute, i64 (%struct.module_attribute*, %struct.module_kobject*, i8*)*, i64 (%struct.module_attribute*, %struct.module_kobject*, i8*, i64)*, void (%struct.module*, i8*)*, i32 (%struct.module*)*, void (%struct.module*)* }
%struct.mutex = type { %struct.atomic64_t, %struct.spinlock, %struct.optimistic_spin_queue, %struct.list_head }
%struct.kernel_symbol = type { i64, i8* }
%struct.exception_table_entry = type { i32, i32, i32 }
%struct.module_layout = type { i8*, i32, i32, i32, i32, %struct.mod_tree_node }
%struct.mod_tree_node = type { %struct.module*, %struct.latch_tree_node }
%struct.latch_tree_node = type { [2 x %struct.rb_node] }
%struct.mod_arch_specific = type {}
%struct.bug_entry = type { i32, i32, i16, i16 }
%struct.mod_kallsyms = type { %struct.elf64_sym*, i32, i8* }
%struct.elf64_sym = type { i32, i8, i8, i16, i64, i64 }
%struct.module_sect_attrs = type opaque
%struct.module_notes_attrs = type opaque
%struct.tracepoint = type { i8*, %struct.static_key, i32 ()*, void ()*, %struct.tracepoint_func* }
%struct.static_key = type { %struct.atomic_t }
%struct.tracepoint_func = type { i8*, i8*, i32 }
%struct.trace_event_call = type opaque
%struct.trace_enum_map = type opaque
%struct.list_head = type { %struct.list_head*, %struct.list_head* }
%struct.atomic_t = type { i32 }
%union.anon.49 = type { i8* }
%struct.pci_driver = type { %struct.list_head, i8*, %struct.pci_device_id*, i32 (%struct.pci_dev*, %struct.pci_device_id*)*, void (%struct.pci_dev*)*, i32 (%struct.pci_dev*, i32)*, i32 (%struct.pci_dev*, i32)*, i32 (%struct.pci_dev*)*, i32 (%struct.pci_dev*)*, void (%struct.pci_dev*)*, i32 (%struct.pci_dev*, i32)*, %struct.pci_error_handlers*, %struct.device_driver, %struct.pci_dynids }
%struct.pci_device_id = type { i32, i32, i32, i32, i32, i32, i64 }
%struct.pci_dev = type <{ %struct.list_head, %struct.pci_bus*, %struct.pci_bus*, i8*, %struct.proc_dir_entry*, %struct.pci_slot*, i32, i16, i16, i16, i16, i32, i8, i8, i16, i8, i8, i8, i8, i8, i8, i16, [4 x i8], i64*, %struct.pci_driver*, i64, %struct.device_dma_parameters, i32, i8, [3 x i8], i32, i32, %struct.pcie_link_state*, i32, [4 x i8], %struct.device, i32, i32, [11 x %struct.resource], i8, i32, i8, i16, %struct.atomic_t, [16 x i32], [4 x i8], %struct.hlist_head, %struct.bin_attribute*, i32, [4 x i8], [11 x %struct.bin_attribute*], [11 x %struct.bin_attribute*], %struct.attribute_group**, %struct.pci_vpd*, %union.anon.57, i16, i8, i8, %struct.atomic_t, i64, i64, i8*, i64 }>
%struct.pci_bus = type { %struct.list_head, %struct.pci_bus*, %struct.list_head, %struct.list_head, %struct.pci_dev*, %struct.list_head, [4 x %struct.resource*], %struct.list_head, %struct.resource, %struct.pci_ops*, %struct.msi_controller*, i8*, %struct.proc_dir_entry*, i8, i8, i8, i8, [48 x i8], i16, i16, %struct.device*, %struct.device, %struct.bin_attribute*, %struct.bin_attribute*, i8 }
%struct.resource = type { i64, i64, i8*, i64, i64, %struct.resource*, %struct.resource*, %struct.resource* }
%struct.pci_ops = type { i32 (%struct.pci_bus*)*, void (%struct.pci_bus*)*, i8* (%struct.pci_bus*, i32, i32)*, i32 (%struct.pci_bus*, i32, i32, i32, i32*)*, i32 (%struct.pci_bus*, i32, i32, i32, i32)* }
%struct.msi_controller = type opaque
%struct.proc_dir_entry = type opaque
%struct.pci_slot = type { %struct.pci_bus*, %struct.list_head, %struct.hotplug_slot*, i8, %struct.kobject }
%struct.hotplug_slot = type opaque
%struct.device_dma_parameters = type { i32, i64 }
%struct.pcie_link_state = type opaque
%struct.device = type { %struct.device*, %struct.device_private*, %struct.kobject, i8*, %struct.device_type*, %struct.mutex, %struct.bus_type*, %struct.device_driver*, i8*, i8*, %struct.dev_links_info, %struct.dev_pm_info, %struct.dev_pm_domain*, %struct.irq_domain*, %struct.list_head, i32, %struct.dma_map_ops*, i64*, i64, i64, %struct.device_dma_parameters*, %struct.list_head, %struct.dma_coherent_mem*, %struct.dev_archdata, %struct.device_node*, %struct.fwnode_handle*, i32, i32, %struct.spinlock, %struct.list_head, %struct.klist_node, %struct.class*, %struct.attribute_group**, void (%struct.device*)*, %struct.iommu_group*, %struct.iommu_fwspec*, i8 }
%struct.device_private = type opaque
%struct.device_type = type { i8*, %struct.attribute_group**, i32 (%struct.device*, %struct.kobj_uevent_env*)*, i8* (%struct.device*, i16*, %struct.kuid_t*, %struct.kgid_t*)*, void (%struct.device*)*, %struct.dev_pm_ops* }
%struct.dev_pm_ops = type { i32 (%struct.device*)*, void (%struct.device*)*, i32 (%struct.device*)*, i32 (%struct.device*)*, i32 (%struct.device*)*, i32 (%struct.device*)*, i32 (%struct.device*)*, i32 (%struct.device*)*, i32 (%struct.device*)*, i32 (%struct.device*)*, i32 (%struct.device*)*, i32 (%struct.device*)*, i32 (%struct.device*)*, i32 (%struct.device*)*, i32 (%struct.device*)*, i32 (%struct.device*)*, i32 (%struct.device*)*, i32 (%struct.device*)*, i32 (%struct.device*)*, i32 (%struct.device*)*, i32 (%struct.device*)*, i32 (%struct.device*)*, i32 (%struct.device*)* }
%struct.bus_type = type { i8*, i8*, %struct.device*, %struct.device_attribute*, %struct.attribute_group**, %struct.attribute_group**, %struct.attribute_group**, i32 (%struct.device*, %struct.device_driver*)*, i32 (%struct.device*, %struct.kobj_uevent_env*)*, i32 (%struct.device*)*, i32 (%struct.device*)*, void (%struct.device*)*, i32 (%struct.device*)*, i32 (%struct.device*)*, i32 (%struct.device*, i32)*, i32 (%struct.device*)*, i32 (%struct.device*)*, %struct.dev_pm_ops*, %struct.iommu_ops*, %struct.subsys_private*, %struct.lock_class_key }
%struct.device_attribute = type { %struct.attribute, i64 (%struct.device*, %struct.device_attribute*, i8*)*, i64 (%struct.device*, %struct.device_attribute*, i8*, i64)* }
%struct.iommu_ops = type opaque
%struct.subsys_private = type opaque
%struct.dev_links_info = type { %struct.list_head, %struct.list_head, i32 }
%struct.dev_pm_info = type { %struct.pm_message, i16, %struct.spinlock, %struct.list_head, %struct.completion, %struct.wakeup_source*, i8, %struct.timer_list, i64, %struct.work_struct, %struct.__wait_queue_head, %struct.wake_irq*, %struct.atomic_t, %struct.atomic_t, i16, i32, i32, i32, i32, i32, i64, i64, i64, i64, %struct.pm_subsys_data*, void (%struct.device*, i32)*, %struct.dev_pm_qos* }
%struct.pm_message = type { i32 }
%struct.wakeup_source = type { i8*, %struct.list_head, %struct.spinlock, %struct.wake_irq*, %struct.timer_list, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i8 }
%struct.timer_list = type { %struct.hlist_node, i64, void (i64)*, i64, i32 }
%struct.wake_irq = type opaque
%struct.pm_subsys_data = type { %struct.spinlock, i32, %struct.list_head }
%struct.dev_pm_qos = type { %struct.pm_qos_constraints, %struct.pm_qos_constraints, %struct.pm_qos_flags, %struct.dev_pm_qos_request*, %struct.dev_pm_qos_request*, %struct.dev_pm_qos_request* }
%struct.pm_qos_constraints = type { %struct.plist_head, i32, i32, i32, i32, %struct.blocking_notifier_head* }
%struct.plist_head = type { %struct.list_head }
%struct.blocking_notifier_head = type { %struct.rw_semaphore, %struct.notifier_block* }
%struct.notifier_block = type { i32 (%struct.notifier_block*, i64, i8*)*, %struct.notifier_block*, i32 }
%struct.pm_qos_flags = type { %struct.list_head, i32 }
%struct.dev_pm_qos_request = type { i32, %union.anon.56, %struct.device* }
%union.anon.56 = type { %struct.plist_node }
%struct.dev_pm_domain = type { %struct.dev_pm_ops, void (%struct.device*, i1)*, i32 (%struct.device*)*, void (%struct.device*)*, void (%struct.device*)* }
%struct.irq_domain = type opaque
%struct.dma_map_ops = type { i8* (%struct.device*, i64, i64*, i32, i64)*, void (%struct.device*, i64, i8*, i64, i64)*, i32 (%struct.device*, %struct.vm_area_struct*, i8*, i64, i64, i64)*, i32 (%struct.device*, %struct.sg_table*, i8*, i64, i64, i64)*, i64 (%struct.device*, %struct.page*, i64, i64, i32, i64)*, void (%struct.device*, i64, i64, i32, i64)*, i32 (%struct.device*, %struct.scatterlist*, i32, i32, i64)*, void (%struct.device*, %struct.scatterlist*, i32, i32, i64)*, i64 (%struct.device*, i64, i64, i32, i64)*, void (%struct.device*, i64, i64, i32, i64)*, void (%struct.device*, i64, i64, i32)*, void (%struct.device*, i64, i64, i32)*, void (%struct.device*, %struct.scatterlist*, i32, i32)*, void (%struct.device*, %struct.scatterlist*, i32, i32)*, i32 (%struct.device*, i64)*, i32 (%struct.device*, i64)*, i32 (%struct.device*, i64)*, i32 }
%struct.sg_table = type { %struct.scatterlist*, i32, i32 }
%struct.scatterlist = type { i64, i32, i32, i64, i32 }
%struct.dma_coherent_mem = type opaque
%struct.dev_archdata = type { i8* }
%struct.device_node = type opaque
%struct.fwnode_handle = type opaque
%struct.klist_node = type { i8*, %struct.list_head, %struct.kref }
%struct.class = type { i8*, %struct.module*, %struct.class_attribute*, %struct.attribute_group**, %struct.attribute_group**, %struct.kobject*, i32 (%struct.device*, %struct.kobj_uevent_env*)*, i8* (%struct.device*, i16*)*, void (%struct.class*)*, void (%struct.device*)*, i32 (%struct.device*, i32)*, i32 (%struct.device*)*, i32 (%struct.device*)*, %struct.kobj_ns_type_operations*, i8* (%struct.device*)*, %struct.dev_pm_ops*, %struct.subsys_private* }
%struct.class_attribute = type { %struct.attribute, i64 (%struct.class*, %struct.class_attribute*, i8*)*, i64 (%struct.class*, %struct.class_attribute*, i8*, i64)* }
%struct.iommu_group = type opaque
%struct.iommu_fwspec = type opaque
%struct.bin_attribute = type { %struct.attribute, i64, i8*, i64 (%struct.file*, %struct.kobject*, %struct.bin_attribute*, i8*, i64, i64)*, i64 (%struct.file*, %struct.kobject*, %struct.bin_attribute*, i8*, i64, i64)*, i32 (%struct.file*, %struct.kobject*, %struct.bin_attribute*, %struct.vm_area_struct*)* }
%struct.attribute_group = type { i8*, i16 (%struct.kobject*, %struct.attribute*, i32)*, i16 (%struct.kobject*, %struct.bin_attribute*, i32)*, %struct.attribute**, %struct.bin_attribute** }
%struct.pci_vpd = type opaque
%union.anon.57 = type { %struct.pci_sriov* }
%struct.pci_sriov = type opaque
%struct.pci_error_handlers = type { i32 (%struct.pci_dev*, i32)*, i32 (%struct.pci_dev*)*, i32 (%struct.pci_dev*)*, void (%struct.pci_dev*, i1)*, void (%struct.pci_dev*)* }
%struct.device_driver = type { i8*, %struct.bus_type*, %struct.module*, i8*, i8, i32, %struct.of_device_id*, %struct.acpi_device_id*, i32 (%struct.device*)*, i32 (%struct.device*)*, void (%struct.device*)*, i32 (%struct.device*, i32)*, i32 (%struct.device*)*, %struct.attribute_group**, %struct.dev_pm_ops*, %struct.driver_private* }
%struct.of_device_id = type { [32 x i8], [32 x i8], [128 x i8], i8* }
%struct.acpi_device_id = type { [9 x i8], i64, i32, i32 }
%struct.driver_private = type opaque
%struct.pci_dynids = type { %struct.spinlock, %struct.list_head }
%struct.shortname_table = type { i32, i8* }
%struct.snd_pci_quirk = type { i16, i16, i16, i32 }
%struct.snd_device_ops = type { i32 (%struct.snd_device*)*, i32 (%struct.snd_device*)*, i32 (%struct.snd_device*)* }
%struct.snd_device = type { %struct.list_head, %struct.snd_card*, i32, i32, i8*, %struct.snd_device_ops* }
%struct.snd_card = type { i32, [16 x i8], [16 x i8], [32 x i8], [80 x i8], [32 x i8], [80 x i8], [128 x i8], %struct.module*, i8*, void (%struct.snd_card*)*, %struct.list_head, %struct.device, i32, %struct.rw_semaphore, %struct.rwlock_t, i32, i32, %struct.list_head, %struct.list_head, %struct.mutex, %struct.snd_info_entry*, %struct.snd_info_entry*, %struct.proc_dir_entry*, %struct.list_head, %struct.snd_shutdown_f_ops*, %struct.spinlock, i32, %struct.completion*, %struct.device*, %struct.device, [4 x %struct.attribute_group*], i8, i32, %struct.mutex, %struct.__wait_queue_head, %struct.snd_mixer_oss*, i32 }
%struct.snd_info_entry = type { i8*, i16, i64, i16, %union.anon.58, %struct.snd_info_entry*, %struct.snd_card*, %struct.module*, i8*, void (%struct.snd_info_entry*)*, %struct.proc_dir_entry*, %struct.mutex, %struct.list_head, %struct.list_head }
%union.anon.58 = type { %struct.snd_info_entry_text }
%struct.snd_info_entry_text = type { void (%struct.snd_info_entry*, %struct.snd_info_buffer*)*, void (%struct.snd_info_entry*, %struct.snd_info_buffer*)* }
%struct.snd_info_buffer = type { i8*, i32, i32, i32, i32, i32 }
%struct.snd_shutdown_f_ops = type opaque
%struct.snd_mixer_oss = type opaque
%struct.ich_reg_info = type { i32, i32 }
%struct.snd_ac97_bus_ops = type { void (%struct.snd_ac97*)*, void (%struct.snd_ac97*)*, void (%struct.snd_ac97*, i16, i16)*, i16 (%struct.snd_ac97*, i16)*, void (%struct.snd_ac97*)*, void (%struct.snd_ac97*)* }
%struct.snd_ac97 = type { %struct.snd_ac97_build_ops*, i8*, {}*, %struct.snd_ac97_bus*, %struct.pci_dev*, %struct.snd_info_entry*, %struct.snd_info_entry*, i16, i16, %struct.mutex, %struct.mutex, i16, i16, i32, i16, i16, i16, %struct.snd_ac97_res_table*, i32, i32, [6 x i32], i32, [128 x i16], [2 x i64], %union.anon.70, i8, i8, %struct.device, %struct.snd_ac97_gpio_priv*, [2 x %struct.snd_pcm_chmap*] }
%struct.snd_ac97_build_ops = type { i32 (%struct.snd_ac97*)*, i32 (%struct.snd_ac97*)*, i32 (%struct.snd_ac97*)*, i32 (%struct.snd_ac97*)*, {}*, {}*, {}* }
%struct.snd_ac97_bus = type { %struct.snd_ac97_bus_ops*, i8*, void (%struct.snd_ac97_bus*)*, %struct.snd_card*, i16, i8, i32, %struct.spinlock, [2 x [4 x i16]], i16, %struct.ac97_pcm*, [4 x %struct.snd_ac97*], %struct.snd_info_entry* }
%struct.ac97_pcm = type { %struct.snd_ac97_bus*, i8, i16, i16, i32, [2 x %struct.anon.72], i64 }
%struct.anon.72 = type { i16, [4 x i16], [4 x i8], [4 x %struct.snd_ac97*] }
%struct.snd_ac97_res_table = type { i16, i16 }
%union.anon.70 = type { i32, [28 x i8] }
%struct.snd_ac97_gpio_priv = type opaque
%struct.snd_pcm_chmap = type { %struct.snd_pcm*, i32, %struct.snd_kcontrol*, %struct.snd_pcm_chmap_elem*, i32, i32, i8* }
%struct.snd_pcm = type { %struct.snd_card*, %struct.list_head, i32, i32, i16, i16, [64 x i8], [80 x i8], [2 x %struct.snd_pcm_str], %struct.mutex, %struct.__wait_queue_head, i8*, void (%struct.snd_pcm*)*, i8, i8, %struct.snd_pcm_oss }
%struct.snd_pcm_str = type { i32, %struct.snd_pcm*, i32, i32, %struct.snd_pcm_substream*, %struct.snd_pcm_oss_stream, %struct.snd_info_entry*, %struct.snd_info_entry*, %struct.snd_kcontrol*, %struct.device }
%struct.snd_pcm_substream = type { %struct.snd_pcm*, %struct.snd_pcm_str*, i8*, i32, [32 x i8], i32, %struct.pm_qos_request, i64, %struct.snd_dma_buffer, i64, %struct.snd_pcm_ops*, %struct.snd_pcm_runtime*, %struct.snd_timer*, i8, %struct.snd_pcm_substream*, %struct.list_head, %struct.snd_pcm_group, %struct.snd_pcm_group*, i8*, i32, %struct.atomic_t, i32, void (%struct.snd_pcm_substream*)*, %struct.pid*, %struct.snd_pcm_oss_substream, %struct.snd_info_entry*, %struct.snd_info_entry*, %struct.snd_info_entry*, %struct.snd_info_entry*, %struct.snd_info_entry*, %struct.snd_info_entry*, %struct.snd_info_entry*, i8 }
%struct.pm_qos_request = type { %struct.plist_node, i32, %struct.delayed_work }
%struct.delayed_work = type { %struct.work_struct, %struct.timer_list, %struct.workqueue_struct*, i32 }
%struct.snd_dma_buffer = type { %struct.snd_dma_device, i8*, i64, i64, i8* }
%struct.snd_dma_device = type { i32, %struct.device* }
%struct.snd_pcm_ops = type { i32 (%struct.snd_pcm_substream*)*, i32 (%struct.snd_pcm_substream*)*, i32 (%struct.snd_pcm_substream*, i32, i8*)*, i32 (%struct.snd_pcm_substream*, %struct.snd_pcm_hw_params*)*, i32 (%struct.snd_pcm_substream*)*, i32 (%struct.snd_pcm_substream*)*, i32 (%struct.snd_pcm_substream*, i32)*, i64 (%struct.snd_pcm_substream*)*, i32 (%struct.snd_pcm_substream*, %struct.timespec*, %struct.timespec*, %struct.snd_pcm_audio_tstamp_config*, %struct.snd_pcm_audio_tstamp_report*)*, i32 (%struct.snd_pcm_substream*, i32, i64, i8*, i64)*, i32 (%struct.snd_pcm_substream*, i32, i64, i64)*, %struct.page* (%struct.snd_pcm_substream*, i64)*, i32 (%struct.snd_pcm_substream*, %struct.vm_area_struct*)*, i32 (%struct.snd_pcm_substream*)* }
%struct.snd_pcm_hw_params = type { i32, [3 x %struct.snd_mask], [5 x %struct.snd_mask], [12 x %struct.snd_interval], [9 x %struct.snd_interval], i32, i32, i32, i32, i32, i32, i64, [64 x i8] }
%struct.snd_mask = type { [8 x i32] }
%struct.snd_interval = type { i32, i32, i8 }
%struct.snd_pcm_audio_tstamp_config = type { i8, [3 x i8] }
%struct.snd_pcm_audio_tstamp_report = type { i8, i32 }
%struct.snd_pcm_runtime = type { %struct.snd_pcm_substream*, %struct.timespec, i8, i32, i64, i64, i64, i64, i64, i64, i64, i32, i32, i32, i32, i32, i64, i32, i64, i64, i64, i32, i32, i32, i32, i32, i8, i32, i32, i64, i64, i64, i64, i64, i64, i64, %union.snd_pcm_sync_id, %struct.snd_pcm_mmap_status*, %struct.snd_pcm_mmap_control*, i64, %struct.__wait_queue_head, %struct.__wait_queue_head, %struct.fasync_struct*, i8*, void (%struct.snd_pcm_runtime*)*, %struct.snd_pcm_hardware, %struct.snd_pcm_hw_constraints, i32, i32, i8*, i64, i64, %struct.snd_dma_buffer*, %struct.snd_pcm_audio_tstamp_config, %struct.snd_pcm_audio_tstamp_report, %struct.timespec, %struct.snd_pcm_oss_runtime }
%union.snd_pcm_sync_id = type { [4 x i32] }
%struct.snd_pcm_mmap_status = type { i32, i32, i64, %struct.timespec, i32, %struct.timespec }
%struct.snd_pcm_mmap_control = type { i64, i64 }
%struct.snd_pcm_hardware = type { i32, i64, i32, i32, i32, i32, i32, i64, i64, i64, i32, i32, i64 }
%struct.snd_pcm_hw_constraints = type { [3 x %struct.snd_mask], [12 x %struct.snd_interval], i32, i32, %struct.snd_pcm_hw_rule* }
%struct.snd_pcm_hw_rule = type { i32, i32, [4 x i32], i32 (%struct.snd_pcm_hw_params*, %struct.snd_pcm_hw_rule*)*, i8* }
%struct.snd_pcm_oss_runtime = type { i8, i32, i32, i32, i32, i32, i32, i64, i64, i64, i32, i64, i64, i64, i8*, i64, %struct.mutex, %struct.snd_pcm_plugin*, %struct.snd_pcm_plugin*, i32 }
%struct.snd_pcm_plugin = type opaque
%struct.snd_timer = type opaque
%struct.snd_pcm_group = type { %struct.spinlock, %struct.mutex, %struct.list_head, i32 }
%struct.snd_pcm_oss_substream = type { i8, %struct.snd_pcm_oss_setup }
%struct.snd_pcm_oss_setup = type { i8*, i8, i32, i32, %struct.snd_pcm_oss_setup* }
%struct.snd_pcm_oss_stream = type { %struct.snd_pcm_oss_setup*, %struct.mutex, %struct.snd_info_entry* }
%struct.snd_pcm_oss = type { i32, i32 }
%struct.snd_kcontrol = type { %struct.list_head, %struct.snd_ctl_elem_id, i32, i32 (%struct.snd_kcontrol*, %struct.snd_ctl_elem_info*)*, i32 (%struct.snd_kcontrol*, %struct.snd_ctl_elem_value*)*, i32 (%struct.snd_kcontrol*, %struct.snd_ctl_elem_value*)*, %union.anon.69, i64, i8*, void (%struct.snd_kcontrol*)*, [0 x %struct.snd_kcontrol_volatile] }
%struct.snd_ctl_elem_id = type { i32, i32, i32, i32, [44 x i8], i32 }
%struct.snd_ctl_elem_info = type { %struct.snd_ctl_elem_id, i32, i32, i32, i32, %union.anon.59, %union.anon.63, [56 x i8] }
%union.anon.59 = type { %struct.anon.62, [40 x i8] }
%struct.anon.62 = type { i32, i32, [64 x i8], i64, i32 }
%union.anon.63 = type { i16* }
%struct.snd_ctl_elem_value = type { %struct.snd_ctl_elem_id, i8, %union.anon.64, %struct.timespec, [112 x i8] }
%union.anon.64 = type { %union.anon.65 }
%union.anon.65 = type { [128 x i64] }
%union.anon.69 = type { i32 (%struct.snd_kcontrol*, i32, i32, i32*)* }
%struct.snd_kcontrol_volatile = type { %struct.snd_ctl_file*, i32 }
%struct.snd_ctl_file = type { %struct.list_head, %struct.snd_card*, %struct.pid*, [2 x i32], %struct.__wait_queue_head, %struct.spinlock, %struct.fasync_struct*, i32, %struct.list_head }
%struct.snd_pcm_chmap_elem = type { i8, [15 x i8] }
%struct.ac97_quirk = type { i16, i16, i16, i32, i8*, i32 }
%struct.ich_pcm_table = type { i8*, %struct.snd_pcm_ops*, %struct.snd_pcm_ops*, i64, i64, i32 }
%struct.snd_pcm_hw_constraint_list = type { i32*, i32, i32 }
%struct.intel8x0 = type { i32, i32, i8*, i8*, %struct.pci_dev*, %struct.snd_card*, i32, [6 x %struct.snd_pcm*], [6 x %struct.ichdev], i16, i32, i32, %struct.snd_ac97_bus*, [3 x %struct.snd_ac97*], [3 x i32], i32, i32, i32*, i32, i32, %struct.spinlock, i32, %struct.snd_dma_buffer, i32, i32 }
%struct.ichdev = type { i32, i64, i32*, i32, %struct.snd_pcm_substream*, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, %struct.ac97_pcm*, i32, i8 }
%struct.snd_ac97_template = type { i8*, void (%struct.snd_ac97*)*, %struct.pci_dev*, i16, i16, i32, %struct.snd_ac97_res_table* }
%union.anon.73 = type { i8 }

@__param_str_index = internal constant [15 x i8] c"intel8x0.index\00", align 1
@param_ops_int = external constant %struct.kernel_param_ops, align 8
@index = internal global i32 -1, align 4
@__param_index = internal constant %struct.kernel_param { i8* getelementptr inbounds ([15 x i8], [15 x i8]* @__param_str_index, i32 0, i32 0), %struct.module* null, %struct.kernel_param_ops* @param_ops_int, i16 292, i8 -1, i8 0, %union.anon.49 { i8* bitcast (i32* @index to i8*) } }, section "__param", align 8
@__param_str_id = internal constant [12 x i8] c"intel8x0.id\00", align 1
@param_ops_charp = external constant %struct.kernel_param_ops, align 8
@id = internal global i8* null, align 8
@__param_id = internal constant %struct.kernel_param { i8* getelementptr inbounds ([12 x i8], [12 x i8]* @__param_str_id, i32 0, i32 0), %struct.module* null, %struct.kernel_param_ops* @param_ops_charp, i16 292, i8 -1, i8 0, %union.anon.49 { i8* bitcast (i8** @id to i8*) } }, section "__param", align 8
@__param_str_ac97_clock = internal constant [20 x i8] c"intel8x0.ac97_clock\00", align 16
@ac97_clock = internal global i32 0, align 4
@__param_ac97_clock = internal constant %struct.kernel_param { i8* getelementptr inbounds ([20 x i8], [20 x i8]* @__param_str_ac97_clock, i32 0, i32 0), %struct.module* null, %struct.kernel_param_ops* @param_ops_int, i16 292, i8 -1, i8 0, %union.anon.49 { i8* bitcast (i32* @ac97_clock to i8*) } }, section "__param", align 8
@__param_str_ac97_quirk = internal constant [20 x i8] c"intel8x0.ac97_quirk\00", align 16
@ac97_quirk = internal global i8* null, align 8
@__param_ac97_quirk = internal constant %struct.kernel_param { i8* getelementptr inbounds ([20 x i8], [20 x i8]* @__param_str_ac97_quirk, i32 0, i32 0), %struct.module* null, %struct.kernel_param_ops* @param_ops_charp, i16 292, i8 -1, i8 0, %union.anon.49 { i8* bitcast (i8** @ac97_quirk to i8*) } }, section "__param", align 8
@__param_str_buggy_semaphore = internal constant [25 x i8] c"intel8x0.buggy_semaphore\00", align 16
@param_ops_bool = external constant %struct.kernel_param_ops, align 8
@buggy_semaphore = internal global i8 0, align 1
@__param_buggy_semaphore = internal constant %struct.kernel_param { i8* getelementptr inbounds ([25 x i8], [25 x i8]* @__param_str_buggy_semaphore, i32 0, i32 0), %struct.module* null, %struct.kernel_param_ops* @param_ops_bool, i16 292, i8 -1, i8 0, %union.anon.49 { i8* @buggy_semaphore } }, section "__param", align 8
@__param_str_buggy_irq = internal constant [19 x i8] c"intel8x0.buggy_irq\00", align 16
@param_ops_bint = external constant %struct.kernel_param_ops, align 8
@buggy_irq = internal global i32 -1, align 4
@__param_buggy_irq = internal constant %struct.kernel_param { i8* getelementptr inbounds ([19 x i8], [19 x i8]* @__param_str_buggy_irq, i32 0, i32 0), %struct.module* null, %struct.kernel_param_ops* @param_ops_bint, i16 292, i8 -1, i8 0, %union.anon.49 { i8* bitcast (i32* @buggy_irq to i8*) } }, section "__param", align 8
@__param_str_xbox = internal constant [14 x i8] c"intel8x0.xbox\00", align 1
@xbox = internal global i8 0, align 1
@__param_xbox = internal constant %struct.kernel_param { i8* getelementptr inbounds ([14 x i8], [14 x i8]* @__param_str_xbox, i32 0, i32 0), %struct.module* null, %struct.kernel_param_ops* @param_ops_bool, i16 292, i8 -1, i8 0, %union.anon.49 { i8* @xbox } }, section "__param", align 8
@__param_str_spdif_aclink = internal constant [22 x i8] c"intel8x0.spdif_aclink\00", align 16
@spdif_aclink = internal global i32 -1, align 4
@__param_spdif_aclink = internal constant %struct.kernel_param { i8* getelementptr inbounds ([22 x i8], [22 x i8]* @__param_str_spdif_aclink, i32 0, i32 0), %struct.module* null, %struct.kernel_param_ops* @param_ops_int, i16 292, i8 -1, i8 0, %union.anon.49 { i8* bitcast (i32* @spdif_aclink to i8*) } }, section "__param", align 8
@__param_str_inside_vm = internal constant [19 x i8] c"intel8x0.inside_vm\00", align 16
@inside_vm = internal global i32 -1, align 4
@__param_inside_vm = internal constant %struct.kernel_param { i8* getelementptr inbounds ([19 x i8], [19 x i8]* @__param_str_inside_vm, i32 0, i32 0), %struct.module* null, %struct.kernel_param_ops* @param_ops_bint, i16 292, i8 -1, i8 0, %union.anon.49 { i8* bitcast (i32* @inside_vm to i8*) } }, section "__param", align 8
@__param_str_enable = internal constant [16 x i8] c"intel8x0.enable\00", align 16
@enable = internal global i8 0, align 1
@__param_enable = internal constant %struct.kernel_param { i8* getelementptr inbounds ([16 x i8], [16 x i8]* @__param_str_enable, i32 0, i32 0), %struct.module* null, %struct.kernel_param_ops* @param_ops_bool, i16 292, i8 -1, i8 0, %union.anon.49 { i8* @enable } }, section "__param", align 8
@__param_str_joystick = internal constant [18 x i8] c"intel8x0.joystick\00", align 16
@joystick = internal global i32 0, align 4
@__param_joystick = internal constant %struct.kernel_param { i8* getelementptr inbounds ([18 x i8], [18 x i8]* @__param_str_joystick, i32 0, i32 0), %struct.module* null, %struct.kernel_param_ops* @param_ops_int, i16 292, i8 -1, i8 0, %union.anon.49 { i8* bitcast (i32* @joystick to i8*) } }, section "__param", align 8
@__initcall_intel8x0_driver_init6 = internal global i32 ()* @intel8x0_driver_init, section ".initcall6.init", align 8
@intel8x0_driver = internal global %struct.pci_driver { %struct.list_head zeroinitializer, i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str, i32 0, i32 0), %struct.pci_device_id* getelementptr inbounds ([24 x %struct.pci_device_id], [24 x %struct.pci_device_id]* @snd_intel8x0_ids, i32 0, i32 0), i32 (%struct.pci_dev*, %struct.pci_device_id*)* @snd_intel8x0_probe, void (%struct.pci_dev*)* @snd_intel8x0_remove, i32 (%struct.pci_dev*, i32)* null, i32 (%struct.pci_dev*, i32)* null, i32 (%struct.pci_dev*)* null, i32 (%struct.pci_dev*)* null, void (%struct.pci_dev*)* null, i32 (%struct.pci_dev*, i32)* null, %struct.pci_error_handlers* null, %struct.device_driver { i8* null, %struct.bus_type* null, %struct.module* null, i8* null, i8 0, i32 0, %struct.of_device_id* null, %struct.acpi_device_id* null, i32 (%struct.device*)* null, i32 (%struct.device*)* null, void (%struct.device*)* null, i32 (%struct.device*, i32)* null, i32 (%struct.device*)* null, %struct.attribute_group** null, %struct.dev_pm_ops* @intel8x0_pm, %struct.driver_private* null }, %struct.pci_dynids zeroinitializer }, align 8
@__exitcall_intel8x0_driver_exit = internal global void ()* @intel8x0_driver_exit, section ".exitcall.exit", align 8
@.str = private unnamed_addr constant [9 x i8] c"intel8x0\00", align 1
@snd_intel8x0_ids = internal constant [24 x %struct.pci_device_id] [%struct.pci_device_id { i32 32902, i32 9237, i32 -1, i32 -1, i32 0, i32 0, i64 0 }, %struct.pci_device_id { i32 32902, i32 9253, i32 -1, i32 -1, i32 0, i32 0, i64 0 }, %struct.pci_device_id { i32 32902, i32 9285, i32 -1, i32 -1, i32 0, i32 0, i64 0 }, %struct.pci_device_id { i32 32902, i32 9349, i32 -1, i32 -1, i32 0, i32 0, i64 0 }, %struct.pci_device_id { i32 32902, i32 9413, i32 -1, i32 -1, i32 0, i32 0, i64 1 }, %struct.pci_device_id { i32 32902, i32 9429, i32 -1, i32 -1, i32 0, i32 0, i64 1 }, %struct.pci_device_id { i32 32902, i32 9638, i32 -1, i32 -1, i32 0, i32 0, i64 1 }, %struct.pci_device_id { i32 32902, i32 9838, i32 -1, i32 -1, i32 0, i32 0, i64 1 }, %struct.pci_device_id { i32 32902, i32 10206, i32 -1, i32 -1, i32 0, i32 0, i64 1 }, %struct.pci_device_id { i32 32902, i32 9880, i32 -1, i32 -1, i32 0, i32 0, i64 1 }, %struct.pci_device_id { i32 32902, i32 29077, i32 -1, i32 -1, i32 0, i32 0, i64 0 }, %struct.pci_device_id { i32 4153, i32 28690, i32 -1, i32 -1, i32 0, i32 0, i64 2 }, %struct.pci_device_id { i32 4318, i32 433, i32 -1, i32 -1, i32 0, i32 0, i64 4 }, %struct.pci_device_id { i32 4318, i32 58, i32 -1, i32 -1, i32 0, i32 0, i64 4 }, %struct.pci_device_id { i32 4318, i32 106, i32 -1, i32 -1, i32 0, i32 0, i64 4 }, %struct.pci_device_id { i32 4318, i32 89, i32 -1, i32 -1, i32 0, i32 0, i64 4 }, %struct.pci_device_id { i32 4318, i32 138, i32 -1, i32 -1, i32 0, i32 0, i64 4 }, %struct.pci_device_id { i32 4318, i32 218, i32 -1, i32 -1, i32 0, i32 0, i64 4 }, %struct.pci_device_id { i32 4318, i32 234, i32 -1, i32 -1, i32 0, i32 0, i64 4 }, %struct.pci_device_id { i32 4318, i32 619, i32 -1, i32 -1, i32 0, i32 0, i64 4 }, %struct.pci_device_id { i32 4130, i32 29805, i32 -1, i32 -1, i32 0, i32 0, i64 0 }, %struct.pci_device_id { i32 4130, i32 29765, i32 -1, i32 -1, i32 0, i32 0, i64 0 }, %struct.pci_device_id { i32 4281, i32 21589, i32 -1, i32 -1, i32 0, i32 0, i64 3 }, %struct.pci_device_id zeroinitializer], align 16
@intel8x0_pm = internal constant %struct.dev_pm_ops { i32 (%struct.device*)* null, void (%struct.device*)* null, i32 (%struct.device*)* @intel8x0_suspend, i32 (%struct.device*)* @intel8x0_resume, i32 (%struct.device*)* @intel8x0_suspend, i32 (%struct.device*)* @intel8x0_resume, i32 (%struct.device*)* @intel8x0_suspend, i32 (%struct.device*)* @intel8x0_resume, i32 (%struct.device*)* null, i32 (%struct.device*)* null, i32 (%struct.device*)* null, i32 (%struct.device*)* null, i32 (%struct.device*)* null, i32 (%struct.device*)* null, i32 (%struct.device*)* null, i32 (%struct.device*)* null, i32 (%struct.device*)* null, i32 (%struct.device*)* null, i32 (%struct.device*)* null, i32 (%struct.device*)* null, i32 (%struct.device*)* null, i32 (%struct.device*)* null, i32 (%struct.device*)* null }, align 8
@.str.1 = private unnamed_addr constant [4 x i8] c"ICH\00", align 1
@.str.2 = private unnamed_addr constant [7 x i8] c"NFORCE\00", align 1
@.str.3 = private unnamed_addr constant [5 x i8] c"ICH4\00", align 1
@.str.4 = private unnamed_addr constant [10 x i8] c"Intel ICH\00", align 1
@shortnames = internal global [23 x %struct.shortname_table] [%struct.shortname_table { i32 9237, i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.6, i32 0, i32 0) }, %struct.shortname_table { i32 9253, i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.7, i32 0, i32 0) }, %struct.shortname_table { i32 9285, i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.8, i32 0, i32 0) }, %struct.shortname_table { i32 29077, i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.9, i32 0, i32 0) }, %struct.shortname_table { i32 9349, i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.10, i32 0, i32 0) }, %struct.shortname_table { i32 9413, i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.11, i32 0, i32 0) }, %struct.shortname_table { i32 9429, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.12, i32 0, i32 0) }, %struct.shortname_table { i32 9638, i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.13, i32 0, i32 0) }, %struct.shortname_table { i32 9838, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.14, i32 0, i32 0) }, %struct.shortname_table { i32 10206, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.15, i32 0, i32 0) }, %struct.shortname_table { i32 9880, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.16, i32 0, i32 0) }, %struct.shortname_table { i32 28690, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.17, i32 0, i32 0) }, %struct.shortname_table { i32 433, i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.18, i32 0, i32 0) }, %struct.shortname_table { i32 106, i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.19, i32 0, i32 0) }, %struct.shortname_table { i32 218, i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.20, i32 0, i32 0) }, %struct.shortname_table { i32 234, i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.21, i32 0, i32 0) }, %struct.shortname_table { i32 89, i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.22, i32 0, i32 0) }, %struct.shortname_table { i32 138, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.23, i32 0, i32 0) }, %struct.shortname_table { i32 58, i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.24, i32 0, i32 0) }, %struct.shortname_table { i32 29805, i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.25, i32 0, i32 0) }, %struct.shortname_table { i32 29765, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.26, i32 0, i32 0) }, %struct.shortname_table { i32 21589, i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.27, i32 0, i32 0) }, %struct.shortname_table zeroinitializer], align 16
@.str.5 = private unnamed_addr constant [21 x i8] c"%s with %s at irq %i\00", align 1
@spdif_aclink_defaults = internal global [2 x %struct.snd_pci_quirk] [%struct.snd_pci_quirk { i16 5243, i16 7194, i16 -1, i32 1 }, %struct.snd_pci_quirk zeroinitializer], align 16
@.str.6 = private unnamed_addr constant [18 x i8] c"Intel 82801AA-ICH\00", align 1
@.str.7 = private unnamed_addr constant [19 x i8] c"Intel 82901AB-ICH0\00", align 1
@.str.8 = private unnamed_addr constant [19 x i8] c"Intel 82801BA-ICH2\00", align 1
@.str.9 = private unnamed_addr constant [12 x i8] c"Intel 440MX\00", align 1
@.str.10 = private unnamed_addr constant [19 x i8] c"Intel 82801CA-ICH3\00", align 1
@.str.11 = private unnamed_addr constant [19 x i8] c"Intel 82801DB-ICH4\00", align 1
@.str.12 = private unnamed_addr constant [11 x i8] c"Intel ICH5\00", align 1
@.str.13 = private unnamed_addr constant [14 x i8] c"Intel 6300ESB\00", align 1
@.str.14 = private unnamed_addr constant [11 x i8] c"Intel ICH6\00", align 1
@.str.15 = private unnamed_addr constant [11 x i8] c"Intel ICH7\00", align 1
@.str.16 = private unnamed_addr constant [11 x i8] c"Intel ESB2\00", align 1
@.str.17 = private unnamed_addr constant [11 x i8] c"SiS SI7012\00", align 1
@.str.18 = private unnamed_addr constant [14 x i8] c"NVidia nForce\00", align 1
@.str.19 = private unnamed_addr constant [15 x i8] c"NVidia nForce2\00", align 1
@.str.20 = private unnamed_addr constant [15 x i8] c"NVidia nForce3\00", align 1
@.str.21 = private unnamed_addr constant [12 x i8] c"NVidia CK8S\00", align 1
@.str.22 = private unnamed_addr constant [13 x i8] c"NVidia CK804\00", align 1
@.str.23 = private unnamed_addr constant [11 x i8] c"NVidia CK8\00", align 1
@.str.24 = private unnamed_addr constant [13 x i8] c"NVidia MCP04\00", align 1
@.str.25 = private unnamed_addr constant [12 x i8] c"AMD AMD8111\00", align 1
@.str.26 = private unnamed_addr constant [11 x i8] c"AMD AMD768\00", align 1
@.str.27 = private unnamed_addr constant [10 x i8] c"ALi M5455\00", align 1
@snd_intel8x0_create.ops = internal global %struct.snd_device_ops { i32 (%struct.snd_device*)* @snd_intel8x0_dev_free, i32 (%struct.snd_device*)* null, i32 (%struct.snd_device*)* null }, align 8
@snd_intel8x0_create.bdbars = internal global [5 x i32] [i32 3, i32 6, i32 3, i32 6, i32 4], align 16
@snd_intel8x0_create.intel_regs = internal global [6 x %struct.ich_reg_info] [%struct.ich_reg_info { i32 32, i32 0 }, %struct.ich_reg_info { i32 64, i32 16 }, %struct.ich_reg_info { i32 128, i32 32 }, %struct.ich_reg_info { i32 16777216, i32 64 }, %struct.ich_reg_info { i32 33554432, i32 80 }, %struct.ich_reg_info { i32 67108864, i32 96 }], align 16
@snd_intel8x0_create.nforce_regs = internal global [4 x %struct.ich_reg_info] [%struct.ich_reg_info { i32 32, i32 0 }, %struct.ich_reg_info { i32 64, i32 16 }, %struct.ich_reg_info { i32 128, i32 32 }, %struct.ich_reg_info { i32 16, i32 112 }], align 16
@snd_intel8x0_create.ali_regs = internal global [6 x %struct.ich_reg_info] [%struct.ich_reg_info { i32 65536, i32 64 }, %struct.ich_reg_info { i32 131072, i32 80 }, %struct.ich_reg_info { i32 262144, i32 96 }, %struct.ich_reg_info { i32 524288, i32 112 }, %struct.ich_reg_info { i32 4194304, i32 160 }, %struct.ich_reg_info { i32 8388608, i32 176 }], align 16
@.str.28 = private unnamed_addr constant [29 x i8] c"AC'97 space ioremap problem\0A\00", align 1
@.str.29 = private unnamed_addr constant [34 x i8] c"Controller space ioremap problem\0A\00", align 1
@.str.30 = private unnamed_addr constant [36 x i8] c"cannot allocate buffer descriptors\0A\00", align 1
@ich_codec_bits = internal global [3 x i32] [i32 256, i32 512, i32 268435456], align 4
@sis_codec_bits = internal global [3 x i32] [i32 256, i32 512, i32 262144], align 4
@.str.31 = private unnamed_addr constant [23 x i8] c"unable to grab IRQ %d\0A\00", align 1
@.str.32 = private unnamed_addr constant [19 x i8] c"enable (forced) VM\00", align 1
@.str.33 = private unnamed_addr constant [20 x i8] c"disable (forced) VM\00", align 1
@.str.34 = private unnamed_addr constant [11 x i8] c"enable KVM\00", align 1
@.str.35 = private unnamed_addr constant [20 x i8] c"enable Parallels VM\00", align 1
@.str.36 = private unnamed_addr constant [17 x i8] c"%s optimization\0A\00", align 1
@.str.37 = private unnamed_addr constant [28 x i8] c"reset of registers failed?\0A\00", align 1
@jiffies = external global i64, align 64
@.str.38 = private unnamed_addr constant [40 x i8] c"codec_ready: codec is not ready [0x%x]\0A\00", align 1
@.str.39 = private unnamed_addr constant [44 x i8] c"AC'97 warm reset still in progress? [0x%x]\0A\00", align 1
@.str.40 = private unnamed_addr constant [21 x i8] c"AC'97 reset failed.\0A\00", align 1
@snd_intel8x0_mixer.standard_bus_ops = internal global %struct.snd_ac97_bus_ops { void (%struct.snd_ac97*)* null, void (%struct.snd_ac97*)* null, void (%struct.snd_ac97*, i16, i16)* @snd_intel8x0_codec_write, i16 (%struct.snd_ac97*, i16)* @snd_intel8x0_codec_read, void (%struct.snd_ac97*)* null, void (%struct.snd_ac97*)* null }, align 8
@snd_intel8x0_mixer.ali_bus_ops = internal global %struct.snd_ac97_bus_ops { void (%struct.snd_ac97*)* null, void (%struct.snd_ac97*)* null, void (%struct.snd_ac97*, i16, i16)* @snd_intel8x0_ali_codec_write, i16 (%struct.snd_ac97*, i16)* @snd_intel8x0_ali_codec_read, void (%struct.snd_ac97*)* null, void (%struct.snd_ac97*)* null }, align 8
@.str.41 = private unnamed_addr constant [32 x i8] c"Unable to initialize codec #%d\0A\00", align 1
@ac97_quirks = internal constant [66 x %struct.ac97_quirk] [%struct.ac97_quirk { i16 3601, i16 14, i16 0, i32 0, i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.48, i32 0, i32 0), i32 1 }, %struct.ac97_quirk { i16 3601, i16 138, i16 0, i32 0, i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.49, i32 0, i32 0), i32 1 }, %struct.ac97_quirk { i16 3601, i16 184, i16 0, i32 0, i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.50, i32 0, i32 0), i32 1 }, %struct.ac97_quirk { i16 3601, i16 2144, i16 0, i32 0, i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.51, i32 0, i32 0), i32 7 }, %struct.ac97_quirk { i16 4116, i16 1332, i16 0, i32 0, i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.52, i32 0, i32 0), i32 6 }, %struct.ac97_quirk { i16 4116, i16 7936, i16 0, i32 0, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.53, i32 0, i32 0), i32 5 }, %struct.ac97_quirk { i16 4116, i16 615, i16 0, i32 0, i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.54, i32 0, i32 0), i32 1 }, %struct.ac97_quirk { i16 4133, i16 130, i16 0, i32 0, i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.55, i32 0, i32 0), i32 1 }, %struct.ac97_quirk { i16 4133, i16 131, i16 0, i32 0, i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.56, i32 0, i32 0), i32 1 }, %struct.ac97_quirk { i16 4136, i16 216, i16 0, i32 0, i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.57, i32 0, i32 0), i32 1 }, %struct.ac97_quirk { i16 4136, i16 269, i16 0, i32 0, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.58, i32 0, i32 0), i32 1 }, %struct.ac97_quirk { i16 4136, i16 294, i16 0, i32 0, i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.59, i32 0, i32 0), i32 1 }, %struct.ac97_quirk { i16 4136, i16 300, i16 0, i32 0, i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.60, i32 0, i32 0), i32 1 }, %struct.ac97_quirk { i16 4136, i16 301, i16 0, i32 0, i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.61, i32 0, i32 0), i32 1 }, %struct.ac97_quirk { i16 4136, i16 327, i16 0, i32 0, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.58, i32 0, i32 0), i32 1 }, %struct.ac97_quirk { i16 4136, i16 337, i16 0, i32 0, i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.62, i32 0, i32 0), i32 1 }, %struct.ac97_quirk { i16 4136, i16 334, i16 0, i32 0, i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.63, i32 0, i32 0), i32 1 }, %struct.ac97_quirk { i16 4136, i16 355, i16 0, i32 0, i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.64, i32 0, i32 0), i32 1 }, %struct.ac97_quirk { i16 4136, i16 362, i16 0, i32 0, i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.65, i32 0, i32 0), i32 1 }, %struct.ac97_quirk { i16 4136, i16 386, i16 0, i32 0, i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.66, i32 0, i32 0), i32 1 }, %struct.ac97_quirk { i16 4136, i16 390, i16 0, i32 0, i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.67, i32 0, i32 0), i32 8 }, %struct.ac97_quirk { i16 4136, i16 392, i16 0, i32 0, i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.68, i32 0, i32 0), i32 8 }, %struct.ac97_quirk { i16 4136, i16 393, i16 0, i32 0, i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.69, i32 0, i32 0), i32 8 }, %struct.ac97_quirk { i16 4136, i16 401, i16 0, i32 0, i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.65, i32 0, i32 0), i32 1 }, %struct.ac97_quirk { i16 4156, i16 109, i16 0, i32 0, i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.70, i32 0, i32 0), i32 7 }, %struct.ac97_quirk { i16 4156, i16 195, i16 0, i32 0, i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.71, i32 0, i32 0), i32 1 }, %struct.ac97_quirk { i16 4156, i16 2188, i16 0, i32 0, i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.72, i32 0, i32 0), i32 8 }, %struct.ac97_quirk { i16 4156, i16 2192, i16 0, i32 0, i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.73, i32 0, i32 0), i32 7 }, %struct.ac97_quirk { i16 4156, i16 4765, i16 0, i32 0, i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.74, i32 0, i32 0), i32 1 }, %struct.ac97_quirk { i16 4156, i16 2360, i16 0, i32 0, i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.75, i32 0, i32 0), i32 8 }, %struct.ac97_quirk { i16 4156, i16 2460, i16 0, i32 0, i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.76, i32 0, i32 0), i32 8 }, %struct.ac97_quirk { i16 4156, i16 2372, i16 0, i32 0, i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.77, i32 0, i32 0), i32 8 }, %struct.ac97_quirk { i16 4156, i16 2356, i16 0, i32 0, i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.78, i32 0, i32 0), i32 8 }, %struct.ac97_quirk { i16 4156, i16 4849, i16 0, i32 0, i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.79, i32 0, i32 0), i32 1 }, %struct.ac97_quirk { i16 4156, i16 4850, i16 0, i32 0, i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.80, i32 0, i32 0), i32 1 }, %struct.ac97_quirk { i16 4156, i16 12296, i16 0, i32 0, i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.81, i32 0, i32 0), i32 1 }, %struct.ac97_quirk { i16 4173, i16 -32444, i16 0, i32 0, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.82, i32 0, i32 0), i32 6 }, %struct.ac97_quirk { i16 4173, i16 -32361, i16 0, i32 0, i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.83, i32 0, i32 0), i32 6 }, %struct.ac97_quirk { i16 4173, i16 -32320, i16 0, i32 0, i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.84, i32 0, i32 0), i32 6 }, %struct.ac97_quirk { i16 4173, i16 -32315, i16 0, i32 0, i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.85, i32 0, i32 0), i32 6 }, %struct.ac97_quirk { i16 4163, i16 -32525, i16 0, i32 0, i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.86, i32 0, i32 0), i32 4 }, %struct.ac97_quirk { i16 4303, i16 4547, i16 0, i32 0, i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.87, i32 0, i32 0), i32 1 }, %struct.ac97_quirk { i16 4303, i16 4645, i16 0, i32 0, i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.88, i32 0, i32 0), i32 1 }, %struct.ac97_quirk { i16 4303, i16 4691, i16 0, i32 0, i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.89, i32 0, i32 0), i32 1 }, %struct.ac97_quirk { i16 4303, i16 4733, i16 0, i32 0, i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.90, i32 0, i32 0), i32 1 }, %struct.ac97_quirk { i16 4303, i16 4734, i16 0, i32 0, i8* getelementptr inbounds ([24 x i8], [24 x i8]* @.str.91, i32 0, i32 0), i32 1 }, %struct.ac97_quirk { i16 4303, i16 4844, i16 0, i32 0, i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.92, i32 0, i32 0), i32 1 }, %struct.ac97_quirk { i16 4303, i16 4850, i16 0, i32 0, i8* getelementptr inbounds ([29 x i8], [29 x i8]* @.str.93, i32 0, i32 0), i32 2 }, %struct.ac97_quirk { i16 4337, i16 9829, i16 0, i32 0, i8* getelementptr inbounds ([24 x i8], [24 x i8]* @.str.94, i32 0, i32 0), i32 1 }, %struct.ac97_quirk { i16 4337, i16 10373, i16 0, i32 0, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.95, i32 0, i32 0), i32 1 }, %struct.ac97_quirk { i16 4337, i16 10389, i16 0, i32 0, i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.96, i32 0, i32 0), i32 1 }, %struct.ac97_quirk { i16 4343, i16 -31924, i16 0, i32 0, i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.97, i32 0, i32 0), i32 1 }, %struct.ac97_quirk { i16 4362, i16 86, i16 0, i32 0, i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.98, i32 0, i32 0), i32 1 }, %struct.ac97_quirk { i16 4564, i16 21365, i16 0, i32 0, i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.99, i32 0, i32 0), i32 1 }, %struct.ac97_quirk { i16 5218, i16 21616, i16 0, i32 0, i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.100, i32 0, i32 0), i32 1 }, %struct.ac97_quirk { i16 5663, i16 8239, i16 0, i32 0, i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.101, i32 0, i32 0), i32 6 }, %struct.ac97_quirk { i16 5663, i16 8250, i16 0, i32 0, i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.102, i32 0, i32 0), i32 6 }, %struct.ac97_quirk { i16 5940, i16 136, i16 0, i32 0, i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.103, i32 0, i32 0), i32 1 }, %struct.ac97_quirk { i16 -32634, i16 8192, i16 -16, i32 0, i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.104, i32 0, i32 0), i32 4 }, %struct.ac97_quirk { i16 -32634, i16 16384, i16 -16, i32 0, i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.104, i32 0, i32 0), i32 4 }, %struct.ac97_quirk { i16 -32634, i16 18518, i16 0, i32 0, i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.105, i32 0, i32 0), i32 2 }, %struct.ac97_quirk { i16 -32634, i16 19780, i16 0, i32 0, i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.106, i32 0, i32 0), i32 1 }, %struct.ac97_quirk { i16 -32634, i16 19798, i16 0, i32 0, i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.107, i32 0, i32 0), i32 1 }, %struct.ac97_quirk { i16 -32634, i16 24576, i16 -16, i32 0, i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.104, i32 0, i32 0), i32 4 }, %struct.ac97_quirk { i16 -32634, i16 -8192, i16 -16, i32 0, i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.104, i32 0, i32 0), i32 4 }, %struct.ac97_quirk zeroinitializer], align 16
@ac97_pcm_defs = internal global [6 x %struct.ac97_pcm] [%struct.ac97_pcm { %struct.snd_ac97_bus* null, i8 2, i16 0, i16 0, i32 0, [2 x %struct.anon.72] [%struct.anon.72 { i16 984, [4 x i16] zeroinitializer, [4 x i8] zeroinitializer, [4 x %struct.snd_ac97*] zeroinitializer }, %struct.anon.72 { i16 408, [4 x i16] zeroinitializer, [4 x i8] zeroinitializer, [4 x %struct.snd_ac97*] zeroinitializer }], i64 0 }, %struct.ac97_pcm { %struct.snd_ac97_bus* null, i8 3, i16 0, i16 0, i32 0, [2 x %struct.anon.72] [%struct.anon.72 { i16 24, [4 x i16] zeroinitializer, [4 x i8] zeroinitializer, [4 x %struct.snd_ac97*] zeroinitializer }, %struct.anon.72 zeroinitializer], i64 0 }, %struct.ac97_pcm { %struct.snd_ac97_bus* null, i8 3, i16 0, i16 0, i32 0, [2 x %struct.anon.72] [%struct.anon.72 { i16 64, [4 x i16] zeroinitializer, [4 x i8] zeroinitializer, [4 x %struct.snd_ac97*] zeroinitializer }, %struct.anon.72 zeroinitializer], i64 0 }, %struct.ac97_pcm { %struct.snd_ac97_bus* null, i8 10, i16 0, i16 0, i32 0, [2 x %struct.anon.72] [%struct.anon.72 { i16 3072, [4 x i16] zeroinitializer, [4 x i8] zeroinitializer, [4 x %struct.snd_ac97*] zeroinitializer }, %struct.anon.72 zeroinitializer], i64 0 }, %struct.ac97_pcm { %struct.snd_ac97_bus* null, i8 3, i16 0, i16 0, i32 0, [2 x %struct.anon.72] [%struct.anon.72 { i16 24, [4 x i16] zeroinitializer, [4 x i8] zeroinitializer, [4 x %struct.snd_ac97*] zeroinitializer }, %struct.anon.72 zeroinitializer], i64 0 }, %struct.ac97_pcm { %struct.snd_ac97_bus* null, i8 3, i16 0, i16 0, i32 0, [2 x %struct.anon.72] [%struct.anon.72 { i16 64, [4 x i16] zeroinitializer, [4 x i8] zeroinitializer, [4 x %struct.snd_ac97*] zeroinitializer }, %struct.anon.72 zeroinitializer], i64 0 }], align 16
@.str.42 = private unnamed_addr constant [58 x i8] c"codec_write %d: semaphore is not ready for register 0x%x\0A\00", align 1
@.str.43 = private unnamed_addr constant [54 x i8] c"codec_semaphore: semaphore is not ready [0x%x][0x%x]\0A\00", align 1
@.str.44 = private unnamed_addr constant [57 x i8] c"codec_read %d: semaphore is not ready for register 0x%x\0A\00", align 1
@.str.45 = private unnamed_addr constant [47 x i8] c"codec_read %d: read timeout for register 0x%x\0A\00", align 1
@.str.46 = private unnamed_addr constant [29 x i8] c"ali_codec_semaphore timeout\0A\00", align 1
@.str.47 = private unnamed_addr constant [27 x i8] c"AC97 codec ready timeout.\0A\00", align 1
@.str.48 = private unnamed_addr constant [18 x i8] c"Compaq Deskpro EN\00", align 1
@.str.49 = private unnamed_addr constant [17 x i8] c"Compaq Evo W4000\00", align 1
@.str.50 = private unnamed_addr constant [17 x i8] c"Compaq Evo D510C\00", align 1
@.str.51 = private unnamed_addr constant [17 x i8] c"HP/Compaq nx7010\00", align 1
@.str.52 = private unnamed_addr constant [13 x i8] c"ThinkPad X31\00", align 1
@.str.53 = private unnamed_addr constant [8 x i8] c"MS-9128\00", align 1
@.str.54 = private unnamed_addr constant [18 x i8] c"IBM NetVista A30p\00", align 1
@.str.55 = private unnamed_addr constant [21 x i8] c"Acer Travelmate 2310\00", align 1
@.str.56 = private unnamed_addr constant [20 x i8] c"Acer Aspire 3003LCi\00", align 1
@.str.57 = private unnamed_addr constant [19 x i8] c"Dell Precision 530\00", align 1
@.str.58 = private unnamed_addr constant [5 x i8] c"Dell\00", align 1
@.str.59 = private unnamed_addr constant [20 x i8] c"Dell Optiplex GX260\00", align 1
@.str.60 = private unnamed_addr constant [19 x i8] c"Dell Precision 650\00", align 1
@.str.61 = private unnamed_addr constant [19 x i8] c"Dell Precision 450\00", align 1
@.str.62 = private unnamed_addr constant [20 x i8] c"Dell Optiplex GX270\00", align 1
@.str.63 = private unnamed_addr constant [10 x i8] c"Dell D800\00", align 1
@.str.64 = private unnamed_addr constant [13 x i8] c"Dell Unknown\00", align 1
@.str.65 = private unnamed_addr constant [19 x i8] c"Dell Inspiron 8600\00", align 1
@.str.66 = private unnamed_addr constant [19 x i8] c"Dell Latitude D610\00", align 1
@.str.67 = private unnamed_addr constant [19 x i8] c"Dell Latitude D810\00", align 1
@.str.68 = private unnamed_addr constant [19 x i8] c"Dell Inspiron 6000\00", align 1
@.str.69 = private unnamed_addr constant [19 x i8] c"Dell Inspiron 9300\00", align 1
@.str.70 = private unnamed_addr constant [10 x i8] c"HP zv5000\00", align 1
@.str.71 = private unnamed_addr constant [10 x i8] c"HP xw6000\00", align 1
@.str.72 = private unnamed_addr constant [10 x i8] c"HP nc8000\00", align 1
@.str.73 = private unnamed_addr constant [10 x i8] c"HP nc6000\00", align 1
@.str.74 = private unnamed_addr constant [10 x i8] c"HP xw8000\00", align 1
@.str.75 = private unnamed_addr constant [10 x i8] c"HP nc4200\00", align 1
@.str.76 = private unnamed_addr constant [17 x i8] c"HP nx6110/nc6120\00", align 1
@.str.77 = private unnamed_addr constant [10 x i8] c"HP nc6220\00", align 1
@.str.78 = private unnamed_addr constant [10 x i8] c"HP nc8220\00", align 1
@.str.79 = private unnamed_addr constant [10 x i8] c"HP xw8200\00", align 1
@.str.80 = private unnamed_addr constant [10 x i8] c"HP xw6200\00", align 1
@.str.81 = private unnamed_addr constant [10 x i8] c"HP xw4200\00", align 1
@.str.82 = private unnamed_addr constant [5 x i8] c"Sony\00", align 1
@.str.83 = private unnamed_addr constant [10 x i8] c"Sony S1XP\00", align 1
@.str.84 = private unnamed_addr constant [20 x i8] c"Sony VAIO VGN-T350P\00", align 1
@.str.85 = private unnamed_addr constant [19 x i8] c"Sony VAIO VGN-B1VP\00", align 1
@.str.86 = private unnamed_addr constant [17 x i8] c"ASUS ICH5/AD1985\00", align 1
@.str.87 = private unnamed_addr constant [22 x i8] c"Fujitsu-Siemens E4010\00", align 1
@.str.88 = private unnamed_addr constant [22 x i8] c"Fujitsu-Siemens T3010\00", align 1
@.str.89 = private unnamed_addr constant [14 x i8] c"Fujitsu S6210\00", align 1
@.str.90 = private unnamed_addr constant [23 x i8] c"Fujitsu Lifebook P7010\00", align 1
@.str.91 = private unnamed_addr constant [24 x i8] c"Fujitsu Lifebook C1211D\00", align 1
@.str.92 = private unnamed_addr constant [21 x i8] c"Fujitsu-Siemens 4010\00", align 1
@.str.93 = private unnamed_addr constant [29 x i8] c"Fujitsu-Siemens Celsius H320\00", align 1
@.str.94 = private unnamed_addr constant [24 x i8] c"Fujitsu-Siemens Celsius\00", align 1
@.str.95 = private unnamed_addr constant [11 x i8] c"AMD64 Mobo\00", align 1
@.str.96 = private unnamed_addr constant [18 x i8] c"Tyan Thunder K8WE\00", align 1
@.str.97 = private unnamed_addr constant [16 x i8] c"Panasonic CF-R4\00", align 1
@.str.98 = private unnamed_addr constant [23 x i8] c"Fujitsu-Siemens Scenic\00", align 1
@.str.99 = private unnamed_addr constant [22 x i8] c"ADI AD1985 (discrete)\00", align 1
@.str.100 = private unnamed_addr constant [21 x i8] c"MSI P4 ATX 645 Ultra\00", align 1
@.str.101 = private unnamed_addr constant [13 x i8] c"Gateway M520\00", align 1
@.str.102 = private unnamed_addr constant [15 x i8] c"Gateway 4525GZ\00", align 1
@.str.103 = private unnamed_addr constant [22 x i8] c"Fujitsu-Siemens D1522\00", align 1
@.str.104 = private unnamed_addr constant [18 x i8] c"Intel ICH5/AD1985\00", align 1
@.str.105 = private unnamed_addr constant [23 x i8] c"Intel D845WN (82801BA)\00", align 1
@.str.106 = private unnamed_addr constant [15 x i8] c"Intel D850EMV2\00", align 1
@.str.107 = private unnamed_addr constant [17 x i8] c"Intel ICH/AD1885\00", align 1
@intel_pcms = internal global [5 x %struct.ich_pcm_table] [%struct.ich_pcm_table { i8* null, %struct.snd_pcm_ops* @snd_intel8x0_playback_ops, %struct.snd_pcm_ops* @snd_intel8x0_capture_ops, i64 65536, i64 131072, i32 0 }, %struct.ich_pcm_table { i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.108, i32 0, i32 0), %struct.snd_pcm_ops* null, %struct.snd_pcm_ops* @snd_intel8x0_capture_mic_ops, i64 0, i64 131072, i32 2 }, %struct.ich_pcm_table { i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.109, i32 0, i32 0), %struct.snd_pcm_ops* null, %struct.snd_pcm_ops* @snd_intel8x0_capture_mic2_ops, i64 0, i64 131072, i32 3 }, %struct.ich_pcm_table { i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.110, i32 0, i32 0), %struct.snd_pcm_ops* null, %struct.snd_pcm_ops* @snd_intel8x0_capture2_ops, i64 0, i64 131072, i32 4 }, %struct.ich_pcm_table { i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.111, i32 0, i32 0), %struct.snd_pcm_ops* @snd_intel8x0_spdif_ops, %struct.snd_pcm_ops* null, i64 65536, i64 131072, i32 5 }], align 16
@nforce_pcms = internal global [3 x %struct.ich_pcm_table] [%struct.ich_pcm_table { i8* null, %struct.snd_pcm_ops* @snd_intel8x0_playback_ops, %struct.snd_pcm_ops* @snd_intel8x0_capture_ops, i64 65536, i64 131072, i32 0 }, %struct.ich_pcm_table { i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.108, i32 0, i32 0), %struct.snd_pcm_ops* null, %struct.snd_pcm_ops* @snd_intel8x0_capture_mic_ops, i64 0, i64 131072, i32 2 }, %struct.ich_pcm_table { i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.111, i32 0, i32 0), %struct.snd_pcm_ops* @snd_intel8x0_spdif_ops, %struct.snd_pcm_ops* null, i64 65536, i64 131072, i32 3 }], align 16
@ali_pcms = internal global [3 x %struct.ich_pcm_table] [%struct.ich_pcm_table { i8* null, %struct.snd_pcm_ops* @snd_intel8x0_ali_playback_ops, %struct.snd_pcm_ops* @snd_intel8x0_ali_capture_ops, i64 65536, i64 131072, i32 0 }, %struct.ich_pcm_table { i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.108, i32 0, i32 0), %struct.snd_pcm_ops* null, %struct.snd_pcm_ops* @snd_intel8x0_ali_capture_mic_ops, i64 0, i64 131072, i32 2 }, %struct.ich_pcm_table { i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.111, i32 0, i32 0), %struct.snd_pcm_ops* @snd_intel8x0_ali_ac97spdifout_ops, %struct.snd_pcm_ops* null, i64 65536, i64 131072, i32 3 }], align 16
@snd_intel8x0_playback_ops = internal global %struct.snd_pcm_ops { i32 (%struct.snd_pcm_substream*)* @snd_intel8x0_playback_open, i32 (%struct.snd_pcm_substream*)* @snd_intel8x0_playback_close, i32 (%struct.snd_pcm_substream*, i32, i8*)* @snd_pcm_lib_ioctl, i32 (%struct.snd_pcm_substream*, %struct.snd_pcm_hw_params*)* @snd_intel8x0_hw_params, i32 (%struct.snd_pcm_substream*)* @snd_intel8x0_hw_free, i32 (%struct.snd_pcm_substream*)* @snd_intel8x0_pcm_prepare, i32 (%struct.snd_pcm_substream*, i32)* @snd_intel8x0_pcm_trigger, i64 (%struct.snd_pcm_substream*)* @snd_intel8x0_pcm_pointer, i32 (%struct.snd_pcm_substream*, %struct.timespec*, %struct.timespec*, %struct.snd_pcm_audio_tstamp_config*, %struct.snd_pcm_audio_tstamp_report*)* null, i32 (%struct.snd_pcm_substream*, i32, i64, i8*, i64)* null, i32 (%struct.snd_pcm_substream*, i32, i64, i64)* null, %struct.page* (%struct.snd_pcm_substream*, i64)* null, i32 (%struct.snd_pcm_substream*, %struct.vm_area_struct*)* null, i32 (%struct.snd_pcm_substream*)* null }, align 8
@snd_intel8x0_capture_ops = internal global %struct.snd_pcm_ops { i32 (%struct.snd_pcm_substream*)* @snd_intel8x0_capture_open, i32 (%struct.snd_pcm_substream*)* @snd_intel8x0_capture_close, i32 (%struct.snd_pcm_substream*, i32, i8*)* @snd_pcm_lib_ioctl, i32 (%struct.snd_pcm_substream*, %struct.snd_pcm_hw_params*)* @snd_intel8x0_hw_params, i32 (%struct.snd_pcm_substream*)* @snd_intel8x0_hw_free, i32 (%struct.snd_pcm_substream*)* @snd_intel8x0_pcm_prepare, i32 (%struct.snd_pcm_substream*, i32)* @snd_intel8x0_pcm_trigger, i64 (%struct.snd_pcm_substream*)* @snd_intel8x0_pcm_pointer, i32 (%struct.snd_pcm_substream*, %struct.timespec*, %struct.timespec*, %struct.snd_pcm_audio_tstamp_config*, %struct.snd_pcm_audio_tstamp_report*)* null, i32 (%struct.snd_pcm_substream*, i32, i64, i8*, i64)* null, i32 (%struct.snd_pcm_substream*, i32, i64, i64)* null, %struct.page* (%struct.snd_pcm_substream*, i64)* null, i32 (%struct.snd_pcm_substream*, %struct.vm_area_struct*)* null, i32 (%struct.snd_pcm_substream*)* null }, align 8
@.str.108 = private unnamed_addr constant [8 x i8] c"MIC ADC\00", align 1
@snd_intel8x0_capture_mic_ops = internal global %struct.snd_pcm_ops { i32 (%struct.snd_pcm_substream*)* @snd_intel8x0_mic_open, i32 (%struct.snd_pcm_substream*)* @snd_intel8x0_mic_close, i32 (%struct.snd_pcm_substream*, i32, i8*)* @snd_pcm_lib_ioctl, i32 (%struct.snd_pcm_substream*, %struct.snd_pcm_hw_params*)* @snd_intel8x0_hw_params, i32 (%struct.snd_pcm_substream*)* @snd_intel8x0_hw_free, i32 (%struct.snd_pcm_substream*)* @snd_intel8x0_pcm_prepare, i32 (%struct.snd_pcm_substream*, i32)* @snd_intel8x0_pcm_trigger, i64 (%struct.snd_pcm_substream*)* @snd_intel8x0_pcm_pointer, i32 (%struct.snd_pcm_substream*, %struct.timespec*, %struct.timespec*, %struct.snd_pcm_audio_tstamp_config*, %struct.snd_pcm_audio_tstamp_report*)* null, i32 (%struct.snd_pcm_substream*, i32, i64, i8*, i64)* null, i32 (%struct.snd_pcm_substream*, i32, i64, i64)* null, %struct.page* (%struct.snd_pcm_substream*, i64)* null, i32 (%struct.snd_pcm_substream*, %struct.vm_area_struct*)* null, i32 (%struct.snd_pcm_substream*)* null }, align 8
@.str.109 = private unnamed_addr constant [9 x i8] c"MIC2 ADC\00", align 1
@snd_intel8x0_capture_mic2_ops = internal global %struct.snd_pcm_ops { i32 (%struct.snd_pcm_substream*)* @snd_intel8x0_mic2_open, i32 (%struct.snd_pcm_substream*)* @snd_intel8x0_mic2_close, i32 (%struct.snd_pcm_substream*, i32, i8*)* @snd_pcm_lib_ioctl, i32 (%struct.snd_pcm_substream*, %struct.snd_pcm_hw_params*)* @snd_intel8x0_hw_params, i32 (%struct.snd_pcm_substream*)* @snd_intel8x0_hw_free, i32 (%struct.snd_pcm_substream*)* @snd_intel8x0_pcm_prepare, i32 (%struct.snd_pcm_substream*, i32)* @snd_intel8x0_pcm_trigger, i64 (%struct.snd_pcm_substream*)* @snd_intel8x0_pcm_pointer, i32 (%struct.snd_pcm_substream*, %struct.timespec*, %struct.timespec*, %struct.snd_pcm_audio_tstamp_config*, %struct.snd_pcm_audio_tstamp_report*)* null, i32 (%struct.snd_pcm_substream*, i32, i64, i8*, i64)* null, i32 (%struct.snd_pcm_substream*, i32, i64, i64)* null, %struct.page* (%struct.snd_pcm_substream*, i64)* null, i32 (%struct.snd_pcm_substream*, %struct.vm_area_struct*)* null, i32 (%struct.snd_pcm_substream*)* null }, align 8
@.str.110 = private unnamed_addr constant [5 x i8] c"ADC2\00", align 1
@snd_intel8x0_capture2_ops = internal global %struct.snd_pcm_ops { i32 (%struct.snd_pcm_substream*)* @snd_intel8x0_capture2_open, i32 (%struct.snd_pcm_substream*)* @snd_intel8x0_capture2_close, i32 (%struct.snd_pcm_substream*, i32, i8*)* @snd_pcm_lib_ioctl, i32 (%struct.snd_pcm_substream*, %struct.snd_pcm_hw_params*)* @snd_intel8x0_hw_params, i32 (%struct.snd_pcm_substream*)* @snd_intel8x0_hw_free, i32 (%struct.snd_pcm_substream*)* @snd_intel8x0_pcm_prepare, i32 (%struct.snd_pcm_substream*, i32)* @snd_intel8x0_pcm_trigger, i64 (%struct.snd_pcm_substream*)* @snd_intel8x0_pcm_pointer, i32 (%struct.snd_pcm_substream*, %struct.timespec*, %struct.timespec*, %struct.snd_pcm_audio_tstamp_config*, %struct.snd_pcm_audio_tstamp_report*)* null, i32 (%struct.snd_pcm_substream*, i32, i64, i8*, i64)* null, i32 (%struct.snd_pcm_substream*, i32, i64, i64)* null, %struct.page* (%struct.snd_pcm_substream*, i64)* null, i32 (%struct.snd_pcm_substream*, %struct.vm_area_struct*)* null, i32 (%struct.snd_pcm_substream*)* null }, align 8
@.str.111 = private unnamed_addr constant [7 x i8] c"IEC958\00", align 1
@snd_intel8x0_spdif_ops = internal global %struct.snd_pcm_ops { i32 (%struct.snd_pcm_substream*)* @snd_intel8x0_spdif_open, i32 (%struct.snd_pcm_substream*)* @snd_intel8x0_spdif_close, i32 (%struct.snd_pcm_substream*, i32, i8*)* @snd_pcm_lib_ioctl, i32 (%struct.snd_pcm_substream*, %struct.snd_pcm_hw_params*)* @snd_intel8x0_hw_params, i32 (%struct.snd_pcm_substream*)* @snd_intel8x0_hw_free, i32 (%struct.snd_pcm_substream*)* @snd_intel8x0_pcm_prepare, i32 (%struct.snd_pcm_substream*, i32)* @snd_intel8x0_pcm_trigger, i64 (%struct.snd_pcm_substream*)* @snd_intel8x0_pcm_pointer, i32 (%struct.snd_pcm_substream*, %struct.timespec*, %struct.timespec*, %struct.snd_pcm_audio_tstamp_config*, %struct.snd_pcm_audio_tstamp_report*)* null, i32 (%struct.snd_pcm_substream*, i32, i64, i8*, i64)* null, i32 (%struct.snd_pcm_substream*, i32, i64, i64)* null, %struct.page* (%struct.snd_pcm_substream*, i64)* null, i32 (%struct.snd_pcm_substream*, %struct.vm_area_struct*)* null, i32 (%struct.snd_pcm_substream*)* null }, align 8
@hw_constraints_channels8 = internal global %struct.snd_pcm_hw_constraint_list { i32* getelementptr inbounds ([4 x i32], [4 x i32]* @channels8, i32 0, i32 0), i32 4, i32 0 }, align 8
@hw_constraints_channels6 = internal global %struct.snd_pcm_hw_constraint_list { i32* getelementptr inbounds ([3 x i32], [3 x i32]* @channels6, i32 0, i32 0), i32 3, i32 0 }, align 8
@hw_constraints_channels4 = internal global %struct.snd_pcm_hw_constraint_list { i32* getelementptr inbounds ([2 x i32], [2 x i32]* @channels4, i32 0, i32 0), i32 2, i32 0 }, align 8
@snd_intel8x0_stream = internal global %struct.snd_pcm_hardware { i32 852227, i64 4, i32 128, i32 48000, i32 48000, i32 2, i32 2, i64 131072, i64 32, i64 131072, i32 1, i32 1024, i64 0 }, align 8
@channels8 = internal global [4 x i32] [i32 2, i32 4, i32 6, i32 8], align 16
@channels6 = internal global [3 x i32] [i32 2, i32 4, i32 6], align 4
@channels4 = internal global [2 x i32] [i32 2, i32 4], align 4
@snd_intel8x0_ali_playback_ops = internal global %struct.snd_pcm_ops { i32 (%struct.snd_pcm_substream*)* @snd_intel8x0_playback_open, i32 (%struct.snd_pcm_substream*)* @snd_intel8x0_playback_close, i32 (%struct.snd_pcm_substream*, i32, i8*)* @snd_pcm_lib_ioctl, i32 (%struct.snd_pcm_substream*, %struct.snd_pcm_hw_params*)* @snd_intel8x0_hw_params, i32 (%struct.snd_pcm_substream*)* @snd_intel8x0_hw_free, i32 (%struct.snd_pcm_substream*)* @snd_intel8x0_pcm_prepare, i32 (%struct.snd_pcm_substream*, i32)* @snd_intel8x0_ali_trigger, i64 (%struct.snd_pcm_substream*)* @snd_intel8x0_pcm_pointer, i32 (%struct.snd_pcm_substream*, %struct.timespec*, %struct.timespec*, %struct.snd_pcm_audio_tstamp_config*, %struct.snd_pcm_audio_tstamp_report*)* null, i32 (%struct.snd_pcm_substream*, i32, i64, i8*, i64)* null, i32 (%struct.snd_pcm_substream*, i32, i64, i64)* null, %struct.page* (%struct.snd_pcm_substream*, i64)* null, i32 (%struct.snd_pcm_substream*, %struct.vm_area_struct*)* null, i32 (%struct.snd_pcm_substream*)* null }, align 8
@snd_intel8x0_ali_capture_ops = internal global %struct.snd_pcm_ops { i32 (%struct.snd_pcm_substream*)* @snd_intel8x0_capture_open, i32 (%struct.snd_pcm_substream*)* @snd_intel8x0_capture_close, i32 (%struct.snd_pcm_substream*, i32, i8*)* @snd_pcm_lib_ioctl, i32 (%struct.snd_pcm_substream*, %struct.snd_pcm_hw_params*)* @snd_intel8x0_hw_params, i32 (%struct.snd_pcm_substream*)* @snd_intel8x0_hw_free, i32 (%struct.snd_pcm_substream*)* @snd_intel8x0_pcm_prepare, i32 (%struct.snd_pcm_substream*, i32)* @snd_intel8x0_ali_trigger, i64 (%struct.snd_pcm_substream*)* @snd_intel8x0_pcm_pointer, i32 (%struct.snd_pcm_substream*, %struct.timespec*, %struct.timespec*, %struct.snd_pcm_audio_tstamp_config*, %struct.snd_pcm_audio_tstamp_report*)* null, i32 (%struct.snd_pcm_substream*, i32, i64, i8*, i64)* null, i32 (%struct.snd_pcm_substream*, i32, i64, i64)* null, %struct.page* (%struct.snd_pcm_substream*, i64)* null, i32 (%struct.snd_pcm_substream*, %struct.vm_area_struct*)* null, i32 (%struct.snd_pcm_substream*)* null }, align 8
@snd_intel8x0_ali_capture_mic_ops = internal global %struct.snd_pcm_ops { i32 (%struct.snd_pcm_substream*)* @snd_intel8x0_mic_open, i32 (%struct.snd_pcm_substream*)* @snd_intel8x0_mic_close, i32 (%struct.snd_pcm_substream*, i32, i8*)* @snd_pcm_lib_ioctl, i32 (%struct.snd_pcm_substream*, %struct.snd_pcm_hw_params*)* @snd_intel8x0_hw_params, i32 (%struct.snd_pcm_substream*)* @snd_intel8x0_hw_free, i32 (%struct.snd_pcm_substream*)* @snd_intel8x0_pcm_prepare, i32 (%struct.snd_pcm_substream*, i32)* @snd_intel8x0_ali_trigger, i64 (%struct.snd_pcm_substream*)* @snd_intel8x0_pcm_pointer, i32 (%struct.snd_pcm_substream*, %struct.timespec*, %struct.timespec*, %struct.snd_pcm_audio_tstamp_config*, %struct.snd_pcm_audio_tstamp_report*)* null, i32 (%struct.snd_pcm_substream*, i32, i64, i8*, i64)* null, i32 (%struct.snd_pcm_substream*, i32, i64, i64)* null, %struct.page* (%struct.snd_pcm_substream*, i64)* null, i32 (%struct.snd_pcm_substream*, %struct.vm_area_struct*)* null, i32 (%struct.snd_pcm_substream*)* null }, align 8
@snd_intel8x0_ali_ac97spdifout_ops = internal global %struct.snd_pcm_ops { i32 (%struct.snd_pcm_substream*)* @snd_intel8x0_ali_ac97spdifout_open, i32 (%struct.snd_pcm_substream*)* @snd_intel8x0_ali_ac97spdifout_close, i32 (%struct.snd_pcm_substream*, i32, i8*)* @snd_pcm_lib_ioctl, i32 (%struct.snd_pcm_substream*, %struct.snd_pcm_hw_params*)* @snd_intel8x0_hw_params, i32 (%struct.snd_pcm_substream*)* @snd_intel8x0_hw_free, i32 (%struct.snd_pcm_substream*)* @snd_intel8x0_pcm_prepare, i32 (%struct.snd_pcm_substream*, i32)* @snd_intel8x0_ali_trigger, i64 (%struct.snd_pcm_substream*)* @snd_intel8x0_pcm_pointer, i32 (%struct.snd_pcm_substream*, %struct.timespec*, %struct.timespec*, %struct.snd_pcm_audio_tstamp_config*, %struct.snd_pcm_audio_tstamp_report*)* null, i32 (%struct.snd_pcm_substream*, i32, i64, i8*, i64)* null, i32 (%struct.snd_pcm_substream*, i32, i64, i64)* null, %struct.page* (%struct.snd_pcm_substream*, i64)* null, i32 (%struct.snd_pcm_substream*, %struct.vm_area_struct*)* null, i32 (%struct.snd_pcm_substream*)* null }, align 8
@snd_intel8x0_ali_trigger.fiforeg = internal global [3 x i32] [i32 12, i32 28, i32 44], align 4
@.str.112 = private unnamed_addr constant [15 x i8] c"Intel ICH - %s\00", align 1
@.str.113 = private unnamed_addr constant [8 x i8] c"%s - %s\00", align 1
@snd_pcm_alt_chmaps = external constant [0 x %struct.snd_pcm_chmap_elem], align 1
@.str.114 = private unnamed_addr constant [11 x i8] c"Intel8x0\0A\0A\00", align 1
@.str.115 = private unnamed_addr constant [32 x i8] c"Global control        : 0x%08x\0A\00", align 1
@.str.116 = private unnamed_addr constant [32 x i8] c"Global status         : 0x%08x\0A\00", align 1
@.str.117 = private unnamed_addr constant [32 x i8] c"SDM                   : 0x%08x\0A\00", align 1
@.str.118 = private unnamed_addr constant [24 x i8] c"AC'97 codecs ready    :\00", align 1
@snd_intel8x0_proc_read.codecs = internal global [3 x i8*] [i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.119, i32 0, i32 0), i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.120, i32 0, i32 0), i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.121, i32 0, i32 0)], align 16
@.str.119 = private unnamed_addr constant [8 x i8] c"primary\00", align 1
@.str.120 = private unnamed_addr constant [10 x i8] c"secondary\00", align 1
@.str.121 = private unnamed_addr constant [9 x i8] c"tertiary\00", align 1
@.str.122 = private unnamed_addr constant [4 x i8] c" %s\00", align 1
@.str.123 = private unnamed_addr constant [6 x i8] c" none\00", align 1
@.str.124 = private unnamed_addr constant [2 x i8] c"\0A\00", align 1
@.str.125 = private unnamed_addr constant [34 x i8] c"AC'97 codecs SDIN     : %i %i %i\0A\00", align 1
@intel8x0_clock_list = internal global [7 x %struct.snd_pci_quirk] [%struct.snd_pci_quirk { i16 3601, i16 138, i16 -1, i32 41000 }, %struct.snd_pci_quirk { i16 4116, i16 1409, i16 -1, i32 48000 }, %struct.snd_pci_quirk { i16 4136, i16 190, i16 -1, i32 44100 }, %struct.snd_pci_quirk { i16 4136, i16 375, i16 -1, i32 48000 }, %struct.snd_pci_quirk { i16 4136, i16 429, i16 -1, i32 48000 }, %struct.snd_pci_quirk { i16 4163, i16 -32525, i16 -1, i32 48000 }, %struct.snd_pci_quirk zeroinitializer], align 16
@.str.126 = private unnamed_addr constant [37 x i8] c"white list rate for %04x:%04x is %i\0A\00", align 1
@.str.127 = private unnamed_addr constant [60 x i8] c"no playback buffer allocated - aborting measure ac97 clock\0A\00", align 1
@.str.128 = private unnamed_addr constant [34 x i8] c"cannot set ac97 rate: clock = %d\0A\00", align 1
@.str.129 = private unnamed_addr constant [37 x i8] c"measure - unreliable DMA position..\0A\00", align 1
@.str.130 = private unnamed_addr constant [38 x i8] c"%s: measured %lu usecs (%lu samples)\0A\00", align 1
@__func__.intel8x0_measure_ac97_clock = private unnamed_addr constant [28 x i8] c"intel8x0_measure_ac97_clock\00", align 1
@.str.131 = private unnamed_addr constant [24 x i8] c"?? calculation error..\0A\00", align 1
@.str.132 = private unnamed_addr constant [29 x i8] c"measured clock %ld rejected\0A\00", align 1
@.str.133 = private unnamed_addr constant [16 x i8] c"clocking to %d\0A\00", align 1
@.str.134 = private unnamed_addr constant [24 x i8] c"./include/linux/ktime.h\00", align 1
@.str.135 = private unnamed_addr constant [41 x i8] c"unable to grab IRQ %d, disabling device\0A\00", align 1
@llvm.used = appending global [14 x i8*] [i8* bitcast (%struct.kernel_param* @__param_index to i8*), i8* bitcast (%struct.kernel_param* @__param_id to i8*), i8* bitcast (%struct.kernel_param* @__param_ac97_clock to i8*), i8* bitcast (%struct.kernel_param* @__param_ac97_quirk to i8*), i8* bitcast (%struct.kernel_param* @__param_buggy_semaphore to i8*), i8* bitcast (%struct.kernel_param* @__param_buggy_irq to i8*), i8* bitcast (%struct.kernel_param* @__param_xbox to i8*), i8* bitcast (%struct.kernel_param* @__param_spdif_aclink to i8*), i8* bitcast (%struct.kernel_param* @__param_inside_vm to i8*), i8* bitcast (%struct.kernel_param* @__param_enable to i8*), i8* bitcast (%struct.kernel_param* @__param_joystick to i8*), i8* bitcast (i32 ()** @__initcall_intel8x0_driver_init6 to i8*), i8* bitcast (void ()* @intel8x0_driver_exit to i8*), i8* bitcast (void ()** @__exitcall_intel8x0_driver_exit to i8*)], section "llvm.metadata"

; Function Attrs: noinline nounwind uwtable
define internal i32 @intel8x0_driver_init() #0 section ".init.text" {
  %1 = call i32 @__pci_register_driver(%struct.pci_driver* @intel8x0_driver, %struct.module* null, i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str, i32 0, i32 0))
  ret i32 %1
}

; Function Attrs: noinline nounwind uwtable
define internal void @intel8x0_driver_exit() #0 section ".exit.text" {
  call void @pci_unregister_driver(%struct.pci_driver* @intel8x0_driver)
  ret void
}

declare void @pci_unregister_driver(%struct.pci_driver*) #1

declare i32 @__pci_register_driver(%struct.pci_driver*, %struct.module*, i8*) #1

; Function Attrs: noinline nounwind uwtable
define internal i32 @snd_intel8x0_probe(%struct.pci_dev*, %struct.pci_device_id*) #0 {
  %3 = alloca %struct.snd_card*, align 8
  %4 = alloca %struct.intel8x0*, align 8
  %5 = getelementptr inbounds %struct.pci_dev, %struct.pci_dev* %0, i32 0, i32 35
  %6 = load i32, i32* @index, align 4
  %7 = load i8*, i8** @id, align 8
  %8 = call i32 @snd_card_new(%struct.device* %5, i32 %6, i8* %7, %struct.module* null, i32 0, %struct.snd_card** %3)
  %9 = icmp slt i32 %8, 0
  br i1 %9, label %135, label %10

; <label>:10:                                     ; preds = %2
  %11 = load i32, i32* @spdif_aclink, align 4
  %12 = icmp slt i32 %11, 0
  br i1 %12, label %13, label %15

; <label>:13:                                     ; preds = %10
  %14 = call i32 @check_default_spdif_aclink(%struct.pci_dev* %0)
  store i32 %14, i32* @spdif_aclink, align 4
  br label %15

; <label>:15:                                     ; preds = %13, %10
  %16 = load %struct.snd_card*, %struct.snd_card** %3, align 8
  %17 = getelementptr inbounds %struct.snd_card, %struct.snd_card* %16, i32 0, i32 2
  %18 = getelementptr inbounds [16 x i8], [16 x i8]* %17, i32 0, i32 0
  %19 = call i8* @strcpy(i8* %18, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.1, i32 0, i32 0))
  %20 = load i32, i32* @spdif_aclink, align 4
  %21 = icmp ne i32 %20, 0
  br i1 %21, label %35, label %22

; <label>:22:                                     ; preds = %15
  %23 = getelementptr inbounds %struct.pci_device_id, %struct.pci_device_id* %1, i32 0, i32 6
  %24 = load i64, i64* %23, align 8
  switch i64 %24, label %35 [
    i64 4, label %25
    i64 1, label %30
  ]

; <label>:25:                                     ; preds = %22
  %26 = load %struct.snd_card*, %struct.snd_card** %3, align 8
  %27 = getelementptr inbounds %struct.snd_card, %struct.snd_card* %26, i32 0, i32 2
  %28 = getelementptr inbounds [16 x i8], [16 x i8]* %27, i32 0, i32 0
  %29 = call i8* @strcpy(i8* %28, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.2, i32 0, i32 0))
  br label %35

; <label>:30:                                     ; preds = %22
  %31 = load %struct.snd_card*, %struct.snd_card** %3, align 8
  %32 = getelementptr inbounds %struct.snd_card, %struct.snd_card* %31, i32 0, i32 2
  %33 = getelementptr inbounds [16 x i8], [16 x i8]* %32, i32 0, i32 0
  %34 = call i8* @strcpy(i8* %33, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.3, i32 0, i32 0))
  br label %35

; <label>:35:                                     ; preds = %22, %25, %30, %15
  %36 = load %struct.snd_card*, %struct.snd_card** %3, align 8
  %37 = getelementptr inbounds %struct.snd_card, %struct.snd_card* %36, i32 0, i32 3
  %38 = getelementptr inbounds [32 x i8], [32 x i8]* %37, i32 0, i32 0
  %39 = call i8* @strcpy(i8* %38, i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.4, i32 0, i32 0))
  br label %40

; <label>:40:                                     ; preds = %58, %35
  %.01 = phi %struct.shortname_table* [ getelementptr inbounds ([23 x %struct.shortname_table], [23 x %struct.shortname_table]* @shortnames, i32 0, i32 0), %35 ], [ %59, %58 ]
  %41 = getelementptr inbounds %struct.shortname_table, %struct.shortname_table* %.01, i32 0, i32 0
  %42 = load i32, i32* %41, align 8
  %43 = icmp ne i32 %42, 0
  br i1 %43, label %44, label %.loopexit

; <label>:44:                                     ; preds = %40
  %45 = getelementptr inbounds %struct.pci_dev, %struct.pci_dev* %0, i32 0, i32 8
  %46 = load i16, i16* %45, align 2
  %47 = zext i16 %46 to i32
  %48 = getelementptr inbounds %struct.shortname_table, %struct.shortname_table* %.01, i32 0, i32 0
  %49 = load i32, i32* %48, align 8
  %50 = icmp eq i32 %47, %49
  br i1 %50, label %51, label %58

; <label>:51:                                     ; preds = %44
  %52 = load %struct.snd_card*, %struct.snd_card** %3, align 8
  %53 = getelementptr inbounds %struct.snd_card, %struct.snd_card* %52, i32 0, i32 3
  %54 = getelementptr inbounds [32 x i8], [32 x i8]* %53, i32 0, i32 0
  %55 = getelementptr inbounds %struct.shortname_table, %struct.shortname_table* %.01, i32 0, i32 1
  %56 = load i8*, i8** %55, align 8
  %57 = call i8* @strcpy(i8* %54, i8* %56)
  br label %.loopexit

; <label>:58:                                     ; preds = %44
  %59 = getelementptr inbounds %struct.shortname_table, %struct.shortname_table* %.01, i32 1
  br label %40

.loopexit:                                        ; preds = %40, %51
  %60 = load i32, i32* @buggy_irq, align 4
  %61 = icmp slt i32 %60, 0
  br i1 %61, label %62, label %66

; <label>:62:                                     ; preds = %.loopexit
  %63 = getelementptr inbounds %struct.pci_device_id, %struct.pci_device_id* %1, i32 0, i32 6
  %64 = load i64, i64* %63, align 8
  %65 = icmp eq i64 %64, 4
  %.sink = select i1 %65, i32 1, i32 0
  store i32 %.sink, i32* @buggy_irq, align 4
  br label %66

; <label>:66:                                     ; preds = %62, %.loopexit
  %67 = load %struct.snd_card*, %struct.snd_card** %3, align 8
  %68 = getelementptr inbounds %struct.pci_device_id, %struct.pci_device_id* %1, i32 0, i32 6
  %69 = load i64, i64* %68, align 8
  %70 = call i32 @snd_intel8x0_create(%struct.snd_card* %67, %struct.pci_dev* %0, i64 %69, %struct.intel8x0** %4)
  %71 = icmp slt i32 %70, 0
  br i1 %71, label %72, label %75

; <label>:72:                                     ; preds = %66
  %73 = load %struct.snd_card*, %struct.snd_card** %3, align 8
  %74 = call i32 @snd_card_free(%struct.snd_card* %73)
  br label %135

; <label>:75:                                     ; preds = %66
  %76 = load %struct.intel8x0*, %struct.intel8x0** %4, align 8
  %77 = bitcast %struct.intel8x0* %76 to i8*
  %78 = load %struct.snd_card*, %struct.snd_card** %3, align 8
  %79 = getelementptr inbounds %struct.snd_card, %struct.snd_card* %78, i32 0, i32 9
  store i8* %77, i8** %79, align 8
  %80 = load %struct.intel8x0*, %struct.intel8x0** %4, align 8
  %81 = load i32, i32* @ac97_clock, align 4
  %82 = load i8*, i8** @ac97_quirk, align 8
  %83 = call i32 @snd_intel8x0_mixer(%struct.intel8x0* %80, i32 %81, i8* %82)
  %84 = icmp slt i32 %83, 0
  br i1 %84, label %85, label %88

; <label>:85:                                     ; preds = %75
  %86 = load %struct.snd_card*, %struct.snd_card** %3, align 8
  %87 = call i32 @snd_card_free(%struct.snd_card* %86)
  br label %135

; <label>:88:                                     ; preds = %75
  %89 = load %struct.intel8x0*, %struct.intel8x0** %4, align 8
  %90 = call i32 @snd_intel8x0_pcm(%struct.intel8x0* %89)
  %91 = icmp slt i32 %90, 0
  br i1 %91, label %92, label %95

; <label>:92:                                     ; preds = %88
  %93 = load %struct.snd_card*, %struct.snd_card** %3, align 8
  %94 = call i32 @snd_card_free(%struct.snd_card* %93)
  br label %135

; <label>:95:                                     ; preds = %88
  %96 = load %struct.intel8x0*, %struct.intel8x0** %4, align 8
  call void @snd_intel8x0_proc_init(%struct.intel8x0* %96)
  %97 = load %struct.snd_card*, %struct.snd_card** %3, align 8
  %98 = getelementptr inbounds %struct.snd_card, %struct.snd_card* %97, i32 0, i32 4
  %99 = getelementptr inbounds [80 x i8], [80 x i8]* %98, i32 0, i32 0
  %100 = load %struct.snd_card*, %struct.snd_card** %3, align 8
  %101 = getelementptr inbounds %struct.snd_card, %struct.snd_card* %100, i32 0, i32 3
  %102 = getelementptr inbounds [32 x i8], [32 x i8]* %101, i32 0, i32 0
  %103 = load %struct.intel8x0*, %struct.intel8x0** %4, align 8
  %104 = getelementptr inbounds %struct.intel8x0, %struct.intel8x0* %103, i32 0, i32 13
  %105 = getelementptr inbounds [3 x %struct.snd_ac97*], [3 x %struct.snd_ac97*]* %104, i64 0, i64 0
  %106 = load %struct.snd_ac97*, %struct.snd_ac97** %105, align 8
  %107 = call i8* @snd_ac97_get_short_name(%struct.snd_ac97* %106)
  %108 = load %struct.intel8x0*, %struct.intel8x0** %4, align 8
  %109 = getelementptr inbounds %struct.intel8x0, %struct.intel8x0* %108, i32 0, i32 1
  %110 = load i32, i32* %109, align 4
  %111 = call i32 (i8*, i64, i8*, ...) @snprintf(i8* %99, i64 80, i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.5, i32 0, i32 0), i8* %102, i8* %107, i32 %110)
  %112 = load i32, i32* @ac97_clock, align 4
  %113 = icmp eq i32 %112, 0
  %114 = load i32, i32* @ac97_clock, align 4
  %115 = icmp eq i32 %114, 1
  %or.cond = or i1 %113, %115
  br i1 %or.cond, label %116, label %126

; <label>:116:                                    ; preds = %95
  %117 = load i32, i32* @ac97_clock, align 4
  %118 = icmp eq i32 %117, 0
  %119 = load %struct.intel8x0*, %struct.intel8x0** %4, align 8
  br i1 %118, label %120, label %125

; <label>:120:                                    ; preds = %116
  %121 = call i32 @intel8x0_in_clock_list(%struct.intel8x0* %119)
  %122 = icmp eq i32 %121, 0
  br i1 %122, label %123, label %126

; <label>:123:                                    ; preds = %120
  %124 = load %struct.intel8x0*, %struct.intel8x0** %4, align 8
  call void @intel8x0_measure_ac97_clock(%struct.intel8x0* %124)
  br label %126

; <label>:125:                                    ; preds = %116
  call void @intel8x0_measure_ac97_clock(%struct.intel8x0* %119)
  br label %126

; <label>:126:                                    ; preds = %125, %123, %120, %95
  %127 = load %struct.snd_card*, %struct.snd_card** %3, align 8
  %128 = call i32 @snd_card_register(%struct.snd_card* %127)
  %129 = icmp slt i32 %128, 0
  %130 = load %struct.snd_card*, %struct.snd_card** %3, align 8
  br i1 %129, label %131, label %133

; <label>:131:                                    ; preds = %126
  %132 = call i32 @snd_card_free(%struct.snd_card* %130)
  br label %135

; <label>:133:                                    ; preds = %126
  %134 = bitcast %struct.snd_card* %130 to i8*
  call void @pci_set_drvdata(%struct.pci_dev* %0, i8* %134)
  br label %135

; <label>:135:                                    ; preds = %2, %133, %131, %92, %85, %72
  %.0 = phi i32 [ %70, %72 ], [ %83, %85 ], [ %90, %92 ], [ %128, %131 ], [ 0, %133 ], [ %8, %2 ]
  ret i32 %.0
}

; Function Attrs: noinline nounwind uwtable
define internal void @snd_intel8x0_remove(%struct.pci_dev*) #0 {
  %2 = call i8* @pci_get_drvdata(%struct.pci_dev* %0)
  %3 = bitcast i8* %2 to %struct.snd_card*
  %4 = call i32 @snd_card_free(%struct.snd_card* %3)
  ret void
}

declare i32 @snd_card_new(%struct.device*, i32, i8*, %struct.module*, i32, %struct.snd_card**) #1

; Function Attrs: noinline nounwind uwtable
define internal i32 @check_default_spdif_aclink(%struct.pci_dev*) #0 {
  %2 = call %struct.snd_pci_quirk* @snd_pci_quirk_lookup(%struct.pci_dev* %0, %struct.snd_pci_quirk* getelementptr inbounds ([2 x %struct.snd_pci_quirk], [2 x %struct.snd_pci_quirk]* @spdif_aclink_defaults, i32 0, i32 0))
  %3 = icmp ne %struct.snd_pci_quirk* %2, null
  br i1 %3, label %4, label %7

; <label>:4:                                      ; preds = %1
  %5 = getelementptr inbounds %struct.snd_pci_quirk, %struct.snd_pci_quirk* %2, i32 0, i32 3
  %6 = load i32, i32* %5, align 4
  br label %7

; <label>:7:                                      ; preds = %1, %4
  %.0 = phi i32 [ %6, %4 ], [ 0, %1 ]
  ret i32 %.0
}

declare i8* @strcpy(i8*, i8*) #1

; Function Attrs: noinline nounwind uwtable
define internal i32 @snd_intel8x0_create(%struct.snd_card*, %struct.pci_dev*, i64, %struct.intel8x0**) #0 {
  %5 = alloca %struct.raw_spinlock, align 4
  store %struct.intel8x0* null, %struct.intel8x0** %3, align 8
  %6 = call i32 @pci_enable_device(%struct.pci_dev* %1)
  %7 = icmp slt i32 %6, 0
  br i1 %7, label %270, label %8

; <label>:8:                                      ; preds = %4
  %9 = call i8* @kzalloc(i64 1016, i32 20971712)
  %10 = bitcast i8* %9 to %struct.intel8x0*
  %11 = icmp eq %struct.intel8x0* %10, null
  br i1 %11, label %12, label %13

; <label>:12:                                     ; preds = %8
  call void @pci_disable_device(%struct.pci_dev* %1)
  br label %270

; <label>:13:                                     ; preds = %8
  %14 = getelementptr inbounds %struct.intel8x0, %struct.intel8x0* %10, i32 0, i32 20
  %15 = getelementptr inbounds %struct.spinlock, %struct.spinlock* %14, i32 0, i32 0
  %16 = bitcast %union.anon.1* %15 to %struct.raw_spinlock*
  %17 = getelementptr inbounds %struct.intel8x0, %struct.intel8x0* %10, i32 0, i32 20
  %18 = getelementptr inbounds %struct.spinlock, %struct.spinlock* %17, i32 0, i32 0
  %19 = bitcast %union.anon.1* %18 to %struct.raw_spinlock*
  %20 = getelementptr inbounds %struct.raw_spinlock, %struct.raw_spinlock* %5, i32 0, i32 0
  %21 = getelementptr inbounds %struct.qspinlock, %struct.qspinlock* %20, i32 0, i32 0
  %22 = getelementptr inbounds %struct.atomic_t, %struct.atomic_t* %21, i32 0, i32 0
  store i32 0, i32* %22, align 4
  %23 = bitcast %struct.raw_spinlock* %19 to i8*
  %24 = bitcast %struct.raw_spinlock* %5 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %23, i8* %24, i64 4, i32 4, i1 false)
  %25 = trunc i64 %2 to i32
  %26 = getelementptr inbounds %struct.intel8x0, %struct.intel8x0* %10, i32 0, i32 0
  store i32 %25, i32* %26, align 8
  %27 = getelementptr inbounds %struct.intel8x0, %struct.intel8x0* %10, i32 0, i32 5
  store %struct.snd_card* %0, %struct.snd_card** %27, align 8
  %28 = getelementptr inbounds %struct.intel8x0, %struct.intel8x0* %10, i32 0, i32 4
  store %struct.pci_dev* %1, %struct.pci_dev** %28, align 8
  %29 = getelementptr inbounds %struct.intel8x0, %struct.intel8x0* %10, i32 0, i32 1
  store i32 -1, i32* %29, align 4
  %30 = load i32, i32* @buggy_irq, align 4
  %31 = getelementptr inbounds %struct.intel8x0, %struct.intel8x0* %10, i32 0, i32 9
  %32 = trunc i32 %30 to i16
  %33 = load i16, i16* %31, align 8
  %34 = and i16 %32, 1
  %35 = shl i16 %34, 9
  %36 = and i16 %33, -513
  %37 = or i16 %36, %35
  store i16 %37, i16* %31, align 8
  %38 = zext i16 %34 to i32
  %39 = load i8, i8* @buggy_semaphore, align 1
  %40 = trunc i8 %39 to i1
  %41 = zext i1 %40 to i32
  %42 = getelementptr inbounds %struct.intel8x0, %struct.intel8x0* %10, i32 0, i32 9
  %43 = trunc i32 %41 to i16
  %44 = load i16, i16* %42, align 8
  %45 = and i16 %43, 1
  %46 = shl i16 %45, 11
  %47 = and i16 %44, -2049
  %48 = or i16 %47, %46
  store i16 %48, i16* %42, align 8
  %49 = zext i16 %45 to i32
  %50 = load i8, i8* @xbox, align 1
  %51 = trunc i8 %50 to i1
  br i1 %51, label %52, label %57

; <label>:52:                                     ; preds = %13
  %53 = getelementptr inbounds %struct.intel8x0, %struct.intel8x0* %10, i32 0, i32 9
  %54 = load i16, i16* %53, align 8
  %55 = and i16 %54, -1025
  %56 = or i16 %55, 1024
  store i16 %56, i16* %53, align 8
  br label %57

; <label>:57:                                     ; preds = %52, %13
  %58 = call i32 @snd_intel8x0_inside_vm(%struct.pci_dev* %1)
  %59 = getelementptr inbounds %struct.intel8x0, %struct.intel8x0* %10, i32 0, i32 9
  %60 = trunc i32 %58 to i16
  %61 = load i16, i16* %59, align 8
  %62 = and i16 %60, 1
  %63 = shl i16 %62, 12
  %64 = and i16 %61, -4097
  %65 = or i16 %64, %63
  store i16 %65, i16* %59, align 8
  %66 = zext i16 %62 to i32
  %67 = getelementptr inbounds %struct.pci_dev, %struct.pci_dev* %1, i32 0, i32 7
  %68 = load i16, i16* %67, align 4
  %69 = zext i16 %68 to i32
  %70 = icmp eq i32 %69, 32902
  br i1 %70, label %71, label %81

; <label>:71:                                     ; preds = %57
  %72 = getelementptr inbounds %struct.pci_dev, %struct.pci_dev* %1, i32 0, i32 8
  %73 = load i16, i16* %72, align 2
  %74 = zext i16 %73 to i32
  %75 = icmp eq i32 %74, 29077
  br i1 %75, label %76, label %81

; <label>:76:                                     ; preds = %71
  %77 = getelementptr inbounds %struct.intel8x0, %struct.intel8x0* %10, i32 0, i32 9
  %78 = load i16, i16* %77, align 8
  %79 = and i16 %78, -257
  %80 = or i16 %79, 256
  store i16 %80, i16* %77, align 8
  br label %81

; <label>:81:                                     ; preds = %76, %71, %57
  %82 = getelementptr inbounds %struct.snd_card, %struct.snd_card* %0, i32 0, i32 3
  %83 = getelementptr inbounds [32 x i8], [32 x i8]* %82, i32 0, i32 0
  %84 = call i32 @pci_request_regions(%struct.pci_dev* %1, i8* %83)
  %85 = icmp slt i32 %84, 0
  br i1 %85, label %86, label %88

; <label>:86:                                     ; preds = %81
  %87 = bitcast %struct.intel8x0* %10 to i8*
  call void @kfree(i8* %87)
  call void @pci_disable_device(%struct.pci_dev* %1)
  br label %270

; <label>:88:                                     ; preds = %81
  %89 = icmp eq i64 %2, 3
  br i1 %89, label %113, label %90

; <label>:90:                                     ; preds = %88
  %91 = getelementptr inbounds %struct.pci_dev, %struct.pci_dev* %1, i32 0, i32 38
  %92 = getelementptr inbounds [11 x %struct.resource], [11 x %struct.resource]* %91, i64 0, i64 2
  %93 = getelementptr inbounds %struct.resource, %struct.resource* %92, i32 0, i32 3
  %94 = load i64, i64* %93, align 8
  %95 = and i64 %94, 512
  %96 = icmp ne i64 %95, 0
  %.sink5 = select i1 %96, i32 2, i32 0
  %97 = call i8* @pci_iomap(%struct.pci_dev* %1, i32 %.sink5, i64 0)
  %98 = getelementptr inbounds %struct.intel8x0, %struct.intel8x0* %10, i32 0, i32 2
  store i8* %97, i8** %98, align 8
  %99 = getelementptr inbounds %struct.intel8x0, %struct.intel8x0* %10, i32 0, i32 2
  %100 = load i8*, i8** %99, align 8
  %101 = icmp ne i8* %100, null
  br i1 %101, label %106, label %102

; <label>:102:                                    ; preds = %90
  %103 = getelementptr inbounds %struct.snd_card, %struct.snd_card* %0, i32 0, i32 29
  %104 = load %struct.device*, %struct.device** %103, align 8
  call void (%struct.device*, i8*, ...) @dev_err(%struct.device* %104, i8* getelementptr inbounds ([29 x i8], [29 x i8]* @.str.28, i32 0, i32 0))
  %105 = call i32 @snd_intel8x0_free(%struct.intel8x0* %10)
  br label %270

; <label>:106:                                    ; preds = %90
  %107 = getelementptr inbounds %struct.pci_dev, %struct.pci_dev* %1, i32 0, i32 38
  %108 = getelementptr inbounds [11 x %struct.resource], [11 x %struct.resource]* %107, i64 0, i64 3
  %109 = getelementptr inbounds %struct.resource, %struct.resource* %108, i32 0, i32 3
  %110 = load i64, i64* %109, align 8
  %111 = and i64 %110, 512
  %112 = icmp ne i64 %111, 0
  %.sink7 = select i1 %112, i32 3, i32 1
  br label %113

; <label>:113:                                    ; preds = %88, %106
  %.sink7.sink = phi i32 [ %.sink7, %106 ], [ 0, %88 ]
  %114 = call i8* @pci_iomap(%struct.pci_dev* %1, i32 %.sink7.sink, i64 0)
  %115 = getelementptr inbounds %struct.intel8x0, %struct.intel8x0* %10, i32 0, i32 3
  store i8* %114, i8** %115, align 8
  %116 = getelementptr inbounds %struct.intel8x0, %struct.intel8x0* %10, i32 0, i32 3
  %117 = load i8*, i8** %116, align 8
  %118 = icmp ne i8* %117, null
  br i1 %118, label %123, label %119

; <label>:119:                                    ; preds = %113
  %120 = getelementptr inbounds %struct.snd_card, %struct.snd_card* %0, i32 0, i32 29
  %121 = load %struct.device*, %struct.device** %120, align 8
  call void (%struct.device*, i8*, ...) @dev_err(%struct.device* %121, i8* getelementptr inbounds ([34 x i8], [34 x i8]* @.str.29, i32 0, i32 0))
  %122 = call i32 @snd_intel8x0_free(%struct.intel8x0* %10)
  br label %270

; <label>:123:                                    ; preds = %113
  %124 = getelementptr inbounds [5 x i32], [5 x i32]* @snd_intel8x0_create.bdbars, i64 0, i64 %2
  %125 = load i32, i32* %124, align 4
  %126 = getelementptr inbounds %struct.intel8x0, %struct.intel8x0* %10, i32 0, i32 21
  store i32 %125, i32* %126, align 4
  %switch.selectcmp = icmp eq i64 %2, 3
  %switch.select = select i1 %switch.selectcmp, %struct.ich_reg_info* getelementptr inbounds ([6 x %struct.ich_reg_info], [6 x %struct.ich_reg_info]* @snd_intel8x0_create.ali_regs, i32 0, i32 0), %struct.ich_reg_info* getelementptr inbounds ([6 x %struct.ich_reg_info], [6 x %struct.ich_reg_info]* @snd_intel8x0_create.intel_regs, i32 0, i32 0)
  %switch.selectcmp9 = icmp eq i64 %2, 4
  %switch.select10 = select i1 %switch.selectcmp9, %struct.ich_reg_info* getelementptr inbounds ([4 x %struct.ich_reg_info], [4 x %struct.ich_reg_info]* @snd_intel8x0_create.nforce_regs, i32 0, i32 0), %struct.ich_reg_info* %switch.select
  br label %127

; <label>:127:                                    ; preds = %158, %123
  %.03 = phi i32 [ 0, %123 ], [ %162, %158 ]
  %128 = getelementptr inbounds %struct.intel8x0, %struct.intel8x0* %10, i32 0, i32 21
  %129 = load i32, i32* %128, align 4
  %130 = icmp ult i32 %.03, %129
  br i1 %130, label %131, label %163

; <label>:131:                                    ; preds = %127
  %132 = getelementptr inbounds %struct.intel8x0, %struct.intel8x0* %10, i32 0, i32 8
  %133 = zext i32 %.03 to i64
  %134 = getelementptr inbounds [6 x %struct.ichdev], [6 x %struct.ichdev]* %132, i64 0, i64 %133
  %135 = getelementptr inbounds %struct.ichdev, %struct.ichdev* %134, i32 0, i32 0
  store i32 %.03, i32* %135, align 8
  %136 = zext i32 %.03 to i64
  %137 = getelementptr inbounds %struct.ich_reg_info, %struct.ich_reg_info* %switch.select10, i64 %136
  %138 = getelementptr inbounds %struct.ich_reg_info, %struct.ich_reg_info* %137, i32 0, i32 1
  %139 = load i32, i32* %138, align 4
  %140 = zext i32 %139 to i64
  %141 = getelementptr inbounds %struct.ichdev, %struct.ichdev* %134, i32 0, i32 1
  store i64 %140, i64* %141, align 8
  %142 = zext i32 %.03 to i64
  %143 = getelementptr inbounds %struct.ich_reg_info, %struct.ich_reg_info* %switch.select10, i64 %142
  %144 = getelementptr inbounds %struct.ich_reg_info, %struct.ich_reg_info* %143, i32 0, i32 0
  %145 = load i32, i32* %144, align 4
  %146 = getelementptr inbounds %struct.ichdev, %struct.ichdev* %134, i32 0, i32 21
  store i32 %145, i32* %146, align 8
  %147 = icmp eq i64 %2, 2
  %148 = getelementptr inbounds %struct.ichdev, %struct.ichdev* %134, i32 0, i32 19
  %.sink12 = select i1 %147, i32 8, i32 6
  %.sink = select i1 %147, i32 6, i32 8
  store i32 %.sink12, i32* %148, align 8
  %149 = getelementptr inbounds %struct.ichdev, %struct.ichdev* %134, i32 0, i32 20
  store i32 %.sink, i32* %149, align 4
  %150 = icmp eq i64 %2, 3
  br i1 %150, label %151, label %158

; <label>:151:                                    ; preds = %131
  %152 = getelementptr inbounds %struct.ichdev, %struct.ichdev* %134, i32 0, i32 1
  %153 = load i64, i64* %152, align 8
  %154 = sub i64 %153, 64
  %155 = udiv i64 %154, 16
  %156 = trunc i64 %155 to i32
  %157 = getelementptr inbounds %struct.ichdev, %struct.ichdev* %134, i32 0, i32 22
  store i32 %156, i32* %157, align 4
  br label %158

; <label>:158:                                    ; preds = %151, %131
  %159 = icmp eq i64 %2, 2
  %160 = select i1 %159, i32 0, i32 1
  %161 = getelementptr inbounds %struct.ichdev, %struct.ichdev* %134, i32 0, i32 10
  store i32 %160, i32* %161, align 4
  %162 = add i32 %.03, 1
  br label %127

; <label>:163:                                    ; preds = %127
  %164 = getelementptr inbounds %struct.pci_dev, %struct.pci_dev* %1, i32 0, i32 35
  %165 = getelementptr inbounds %struct.intel8x0, %struct.intel8x0* %10, i32 0, i32 21
  %166 = load i32, i32* %165, align 4
  %167 = zext i32 %166 to i64
  %168 = mul i64 %167, 4
  %169 = mul i64 %168, 32
  %170 = mul i64 %169, 2
  %171 = getelementptr inbounds %struct.intel8x0, %struct.intel8x0* %10, i32 0, i32 22
  %172 = call i32 @snd_dma_alloc_pages(i32 2, %struct.device* %164, i64 %170, %struct.snd_dma_buffer* %171)
  %173 = icmp slt i32 %172, 0
  br i1 %173, label %174, label %178

; <label>:174:                                    ; preds = %163
  %175 = call i32 @snd_intel8x0_free(%struct.intel8x0* %10)
  %176 = getelementptr inbounds %struct.snd_card, %struct.snd_card* %0, i32 0, i32 29
  %177 = load %struct.device*, %struct.device** %176, align 8
  call void (%struct.device*, i8*, ...) @dev_err(%struct.device* %177, i8* getelementptr inbounds ([36 x i8], [36 x i8]* @.str.30, i32 0, i32 0))
  br label %270

; <label>:178:                                    ; preds = %163
  %179 = getelementptr inbounds %struct.intel8x0, %struct.intel8x0* %10, i32 0, i32 9
  %180 = load i16, i16* %179, align 8
  %181 = lshr i16 %180, 8
  %182 = and i16 %181, 1
  %183 = zext i16 %182 to i32
  %184 = icmp ne i32 %183, 0
  br label %185

; <label>:185:                                    ; preds = %189, %178
  %.1 = phi i32 [ 0, %178 ], [ %215, %189 ]
  %.02 = phi i32 [ 0, %178 ], [ %214, %189 ]
  %186 = getelementptr inbounds %struct.intel8x0, %struct.intel8x0* %10, i32 0, i32 21
  %187 = load i32, i32* %186, align 4
  %188 = icmp ult i32 %.1, %187
  br i1 %188, label %189, label %216

; <label>:189:                                    ; preds = %185
  %190 = getelementptr inbounds %struct.intel8x0, %struct.intel8x0* %10, i32 0, i32 8
  %191 = zext i32 %.1 to i64
  %192 = getelementptr inbounds [6 x %struct.ichdev], [6 x %struct.ichdev]* %190, i64 0, i64 %191
  %193 = getelementptr inbounds %struct.intel8x0, %struct.intel8x0* %10, i32 0, i32 22
  %194 = getelementptr inbounds %struct.snd_dma_buffer, %struct.snd_dma_buffer* %193, i32 0, i32 1
  %195 = load i8*, i8** %194, align 8
  %196 = bitcast i8* %195 to i32*
  %197 = mul i32 %.1, 32
  %198 = mul i32 %197, 2
  %199 = zext i32 %198 to i64
  %200 = getelementptr inbounds i32, i32* %196, i64 %199
  %201 = getelementptr inbounds %struct.ichdev, %struct.ichdev* %192, i32 0, i32 2
  store i32* %200, i32** %201, align 8
  %202 = getelementptr inbounds %struct.intel8x0, %struct.intel8x0* %10, i32 0, i32 22
  %203 = getelementptr inbounds %struct.snd_dma_buffer, %struct.snd_dma_buffer* %202, i32 0, i32 2
  %204 = load i64, i64* %203, align 8
  %205 = zext i32 %.1 to i64
  %206 = mul i64 %205, 4
  %207 = mul i64 %206, 32
  %208 = mul i64 %207, 2
  %209 = add i64 %204, %208
  %210 = trunc i64 %209 to i32
  %211 = getelementptr inbounds %struct.ichdev, %struct.ichdev* %192, i32 0, i32 3
  store i32 %210, i32* %211, align 8
  %212 = getelementptr inbounds %struct.ichdev, %struct.ichdev* %192, i32 0, i32 21
  %213 = load i32, i32* %212, align 8
  %214 = or i32 %.02, %213
  %215 = add i32 %.1, 1
  br label %185

; <label>:216:                                    ; preds = %185
  %217 = icmp eq i64 %2, 3
  %218 = select i1 %217, i32 24, i32 48
  %219 = getelementptr inbounds %struct.intel8x0, %struct.intel8x0* %10, i32 0, i32 23
  store i32 %218, i32* %219, align 8
  %220 = getelementptr inbounds %struct.intel8x0, %struct.intel8x0* %10, i32 0, i32 24
  store i32 %.02, i32* %220, align 4
  call void @pci_set_master(%struct.pci_dev* %1)
  %221 = getelementptr inbounds %struct.intel8x0, %struct.intel8x0* %10, i32 0, i32 0
  %222 = load i32, i32* %221, align 8
  switch i32 %222, label %224 [
    i32 1, label %223
    i32 2, label %225
  ]

; <label>:223:                                    ; preds = %216
  br label %225

; <label>:224:                                    ; preds = %216
  br label %225

; <label>:225:                                    ; preds = %216, %224, %223
  %.sink17 = phi i32 [ 2, %224 ], [ 3, %223 ], [ 3, %216 ]
  %.sink15 = phi i32* [ getelementptr inbounds ([3 x i32], [3 x i32]* @ich_codec_bits, i32 0, i32 0), %224 ], [ getelementptr inbounds ([3 x i32], [3 x i32]* @ich_codec_bits, i32 0, i32 0), %223 ], [ getelementptr inbounds ([3 x i32], [3 x i32]* @sis_codec_bits, i32 0, i32 0), %216 ]
  %.sink13 = phi i32 [ 3072, %224 ], [ 536873984, %223 ], [ 527360, %216 ]
  %226 = getelementptr inbounds %struct.intel8x0, %struct.intel8x0* %10, i32 0, i32 15
  store i32 %.sink17, i32* %226, align 4
  %227 = getelementptr inbounds %struct.intel8x0, %struct.intel8x0* %10, i32 0, i32 17
  store i32* %.sink15, i32** %227, align 8
  %228 = getelementptr inbounds %struct.intel8x0, %struct.intel8x0* %10, i32 0, i32 19
  store i32 %.sink13, i32* %228, align 4
  br label %229

; <label>:229:                                    ; preds = %233, %225
  %.2 = phi i32 [ 0, %225 ], [ %242, %233 ]
  %230 = getelementptr inbounds %struct.intel8x0, %struct.intel8x0* %10, i32 0, i32 15
  %231 = load i32, i32* %230, align 4
  %232 = icmp ult i32 %.2, %231
  br i1 %232, label %233, label %243

; <label>:233:                                    ; preds = %229
  %234 = getelementptr inbounds %struct.intel8x0, %struct.intel8x0* %10, i32 0, i32 17
  %235 = load i32*, i32** %234, align 8
  %236 = zext i32 %.2 to i64
  %237 = getelementptr inbounds i32, i32* %235, i64 %236
  %238 = load i32, i32* %237, align 4
  %239 = getelementptr inbounds %struct.intel8x0, %struct.intel8x0* %10, i32 0, i32 18
  %240 = load i32, i32* %239, align 8
  %241 = or i32 %240, %238
  store i32 %241, i32* %239, align 8
  %242 = add i32 %.2, 1
  br label %229

; <label>:243:                                    ; preds = %229
  %244 = call i32 @snd_intel8x0_chip_init(%struct.intel8x0* %10, i32 1)
  %245 = icmp slt i32 %244, 0
  br i1 %245, label %246, label %248

; <label>:246:                                    ; preds = %243
  %247 = call i32 @snd_intel8x0_free(%struct.intel8x0* %10)
  br label %270

; <label>:248:                                    ; preds = %243
  %249 = getelementptr inbounds %struct.pci_dev, %struct.pci_dev* %1, i32 0, i32 37
  %250 = load i32, i32* %249, align 4
  %251 = bitcast %struct.intel8x0* %10 to i8*
  %252 = call i32 @request_irq(i32 %250, i32 (i32, i8*)* @snd_intel8x0_interrupt, i64 128, i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str, i32 0, i32 0), i8* %251)
  %253 = icmp ne i32 %252, 0
  br i1 %253, label %254, label %260

; <label>:254:                                    ; preds = %248
  %255 = getelementptr inbounds %struct.snd_card, %struct.snd_card* %0, i32 0, i32 29
  %256 = load %struct.device*, %struct.device** %255, align 8
  %257 = getelementptr inbounds %struct.pci_dev, %struct.pci_dev* %1, i32 0, i32 37
  %258 = load i32, i32* %257, align 4
  call void (%struct.device*, i8*, ...) @dev_err(%struct.device* %256, i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.31, i32 0, i32 0), i32 %258)
  %259 = call i32 @snd_intel8x0_free(%struct.intel8x0* %10)
  br label %270

; <label>:260:                                    ; preds = %248
  %261 = getelementptr inbounds %struct.pci_dev, %struct.pci_dev* %1, i32 0, i32 37
  %262 = load i32, i32* %261, align 4
  %263 = getelementptr inbounds %struct.intel8x0, %struct.intel8x0* %10, i32 0, i32 1
  store i32 %262, i32* %263, align 4
  %264 = bitcast %struct.intel8x0* %10 to i8*
  %265 = call i32 @snd_device_new(%struct.snd_card* %0, i32 0, i8* %264, %struct.snd_device_ops* @snd_intel8x0_create.ops)
  %266 = icmp slt i32 %265, 0
  br i1 %266, label %267, label %269

; <label>:267:                                    ; preds = %260
  %268 = call i32 @snd_intel8x0_free(%struct.intel8x0* %10)
  br label %270

; <label>:269:                                    ; preds = %260
  store %struct.intel8x0* %10, %struct.intel8x0** %3, align 8
  br label %270

; <label>:270:                                    ; preds = %4, %269, %267, %254, %246, %174, %119, %102, %86, %12
  %.01 = phi i32 [ -12, %12 ], [ %84, %86 ], [ -12, %174 ], [ %244, %246 ], [ -16, %254 ], [ %265, %267 ], [ 0, %269 ], [ -5, %119 ], [ -5, %102 ], [ %6, %4 ]
  ret i32 %.01
}

declare i32 @snd_card_free(%struct.snd_card*) #1

; Function Attrs: noinline nounwind uwtable
define internal i32 @snd_intel8x0_mixer(%struct.intel8x0*, i32, i8*) #0 {
  %4 = alloca %struct.snd_ac97_bus*, align 8
  %5 = alloca %struct.snd_ac97_template, align 8
  %6 = getelementptr inbounds %struct.intel8x0, %struct.intel8x0* %0, i32 0, i32 10
  store i32 -1, i32* %6, align 4
  %7 = load i32, i32* @spdif_aclink, align 4
  %8 = icmp ne i32 %7, 0
  br i1 %8, label %14, label %9

; <label>:9:                                      ; preds = %3
  %10 = getelementptr inbounds %struct.intel8x0, %struct.intel8x0* %0, i32 0, i32 0
  %11 = load i32, i32* %10, align 8
  switch i32 %11, label %14 [
    i32 4, label %.sink.split
    i32 3, label %.sink.split
    i32 1, label %12
  ]

; <label>:12:                                     ; preds = %9
  br label %.sink.split

.sink.split:                                      ; preds = %9, %9, %12
  %.sink = phi i32 [ 5, %12 ], [ 3, %9 ], [ 3, %9 ]
  %13 = getelementptr inbounds %struct.intel8x0, %struct.intel8x0* %0, i32 0, i32 10
  store i32 %.sink, i32* %13, align 4
  br label %14

; <label>:14:                                     ; preds = %9, %.sink.split, %3
  %15 = getelementptr inbounds %struct.intel8x0, %struct.intel8x0* %0, i32 0, i32 9
  %16 = load i16, i16* %15, align 8
  %17 = and i16 %16, -33
  %18 = or i16 %17, 32
  store i16 %18, i16* %15, align 8
  %19 = bitcast %struct.snd_ac97_template* %5 to i8*
  call void @llvm.memset.p0i8.i64(i8* %19, i8 0, i64 40, i32 8, i1 false)
  %20 = bitcast %struct.intel8x0* %0 to i8*
  %21 = getelementptr inbounds %struct.snd_ac97_template, %struct.snd_ac97_template* %5, i32 0, i32 0
  store i8* %20, i8** %21, align 8
  %22 = getelementptr inbounds %struct.snd_ac97_template, %struct.snd_ac97_template* %5, i32 0, i32 1
  store void (%struct.snd_ac97*)* @snd_intel8x0_mixer_free_ac97, void (%struct.snd_ac97*)** %22, align 8
  %23 = getelementptr inbounds %struct.snd_ac97_template, %struct.snd_ac97_template* %5, i32 0, i32 5
  store i32 2080, i32* %23, align 4
  %24 = getelementptr inbounds %struct.intel8x0, %struct.intel8x0* %0, i32 0, i32 9
  %25 = load i16, i16* %24, align 8
  %26 = lshr i16 %25, 10
  %27 = and i16 %26, 1
  %28 = zext i16 %27 to i32
  %29 = icmp ne i32 %28, 0
  br i1 %29, label %30, label %34

; <label>:30:                                     ; preds = %14
  %31 = getelementptr inbounds %struct.snd_ac97_template, %struct.snd_ac97_template* %5, i32 0, i32 5
  %32 = load i32, i32* %31, align 4
  %33 = or i32 %32, 256
  store i32 %33, i32* %31, align 4
  br label %34

; <label>:34:                                     ; preds = %30, %14
  %35 = getelementptr inbounds %struct.intel8x0, %struct.intel8x0* %0, i32 0, i32 0
  %36 = load i32, i32* %35, align 8
  %37 = icmp ne i32 %36, 3
  br i1 %37, label %38, label %93

; <label>:38:                                     ; preds = %34
  %39 = call i32 @igetdword(%struct.intel8x0* %0, i32 48)
  %40 = getelementptr inbounds %struct.intel8x0, %struct.intel8x0* %0, i32 0, i32 9
  %41 = load i16, i16* %40, align 8
  %42 = and i16 %41, -65
  %43 = or i16 %42, 64
  store i16 %43, i16* %40, align 8
  br label %44

; <label>:44:                                     ; preds = %86, %38
  %.06 = phi i32 [ 0, %38 ], [ %.17, %86 ]
  %.04 = phi i32 [ 0, %38 ], [ %87, %86 ]
  %45 = getelementptr inbounds %struct.intel8x0, %struct.intel8x0* %0, i32 0, i32 15
  %46 = load i32, i32* %45, align 4
  %47 = icmp ult i32 %.04, %46
  br i1 %47, label %48, label %88

; <label>:48:                                     ; preds = %44
  %49 = getelementptr inbounds %struct.intel8x0, %struct.intel8x0* %0, i32 0, i32 17
  %50 = load i32*, i32** %49, align 8
  %51 = zext i32 %.04 to i64
  %52 = getelementptr inbounds i32, i32* %50, i64 %51
  %53 = load i32, i32* %52, align 4
  %54 = and i32 %39, %53
  %55 = icmp ne i32 %54, 0
  br i1 %55, label %56, label %86

; <label>:56:                                     ; preds = %48
  %57 = getelementptr inbounds %struct.intel8x0, %struct.intel8x0* %0, i32 0, i32 0
  %58 = load i32, i32* %57, align 8
  %59 = icmp eq i32 %58, 1
  br i1 %59, label %60, label %.sink.split13

; <label>:60:                                     ; preds = %56
  call void @snd_intel8x0_codec_read_test(%struct.intel8x0* %0, i32 %.06)
  %61 = call zeroext i8 @igetbyte(%struct.intel8x0* %0, i32 128)
  %62 = zext i8 %61 to i32
  %63 = and i32 %62, 3
  %64 = getelementptr inbounds %struct.intel8x0, %struct.intel8x0* %0, i32 0, i32 14
  %65 = zext i32 %.06 to i64
  %66 = getelementptr inbounds [3 x i32], [3 x i32]* %64, i64 0, i64 %65
  store i32 %63, i32* %66, align 4
  %67 = getelementptr inbounds %struct.intel8x0, %struct.intel8x0* %0, i32 0, i32 14
  %68 = zext i32 %.06 to i64
  %69 = getelementptr inbounds [3 x i32], [3 x i32]* %67, i64 0, i64 %68
  %70 = load i32, i32* %69, align 4
  %71 = icmp uge i32 %70, 3
  %72 = xor i1 %71, true
  %73 = xor i1 %72, true
  %74 = zext i1 %73 to i32
  %75 = icmp ne i32 %74, 0
  %76 = xor i1 %75, true
  %77 = xor i1 %76, true
  %78 = zext i1 %77 to i32
  %79 = sext i32 %78 to i64
  %80 = icmp ne i64 %79, 0
  br i1 %80, label %.sink.split13, label %84

.sink.split13:                                    ; preds = %56, %60
  %.sink14 = phi i32 [ 0, %60 ], [ %.04, %56 ]
  %81 = getelementptr inbounds %struct.intel8x0, %struct.intel8x0* %0, i32 0, i32 14
  %82 = zext i32 %.06 to i64
  %83 = getelementptr inbounds [3 x i32], [3 x i32]* %81, i64 0, i64 %82
  store i32 %.sink14, i32* %83, align 4
  br label %84

; <label>:84:                                     ; preds = %.sink.split13, %60
  %85 = add i32 %.06, 1
  br label %86

; <label>:86:                                     ; preds = %48, %84
  %.17 = phi i32 [ %85, %84 ], [ %.06, %48 ]
  %87 = add i32 %.04, 1
  br label %44

; <label>:88:                                     ; preds = %44
  %89 = getelementptr inbounds %struct.intel8x0, %struct.intel8x0* %0, i32 0, i32 9
  %90 = load i16, i16* %89, align 8
  %91 = and i16 %90, -65
  store i16 %91, i16* %89, align 8
  %92 = icmp ne i32 %.06, 0
  %.06. = select i1 %92, i32 %.06, i32 1
  br label %.loopexit11

; <label>:93:                                     ; preds = %34, %99
  %.15 = phi i32 [ %101, %99 ], [ 0, %34 ]
  %94 = icmp ult i32 %.15, 100
  br i1 %94, label %95, label %.loopexit11

; <label>:95:                                     ; preds = %93
  %96 = call i32 @igetdword(%struct.intel8x0* %0, i32 52)
  %97 = and i32 %96, 64
  %98 = icmp ne i32 %97, 0
  br i1 %98, label %.loopexit11, label %99

; <label>:99:                                     ; preds = %95
  %100 = or i32 %96, 64
  call void @iputdword(%struct.intel8x0* %0, i32 52, i32 %100)
  call void @__const_udelay(i64 4295)
  %101 = add i32 %.15, 1
  br label %93

.loopexit11:                                      ; preds = %95, %93, %88
  %.410 = phi i32 [ %.06., %88 ], [ 2, %95 ], [ 1, %93 ]
  %.02 = phi %struct.snd_ac97_bus_ops* [ @snd_intel8x0_mixer.standard_bus_ops, %88 ], [ @snd_intel8x0_mixer.ali_bus_ops, %93 ], [ @snd_intel8x0_mixer.ali_bus_ops, %95 ]
  %102 = getelementptr inbounds %struct.intel8x0, %struct.intel8x0* %0, i32 0, i32 5
  %103 = load %struct.snd_card*, %struct.snd_card** %102, align 8
  %104 = bitcast %struct.intel8x0* %0 to i8*
  %105 = call i32 @snd_ac97_bus(%struct.snd_card* %103, i32 0, %struct.snd_ac97_bus_ops* %.02, i8* %104, %struct.snd_ac97_bus** %4)
  %106 = icmp slt i32 %105, 0
  br i1 %106, label %397, label %107

; <label>:107:                                    ; preds = %.loopexit11
  %108 = load %struct.snd_ac97_bus*, %struct.snd_ac97_bus** %4, align 8
  %109 = getelementptr inbounds %struct.snd_ac97_bus, %struct.snd_ac97_bus* %108, i32 0, i32 2
  store void (%struct.snd_ac97_bus*)* @snd_intel8x0_mixer_free_ac97_bus, void (%struct.snd_ac97_bus*)** %109, align 8
  %110 = icmp sge i32 %1, 8000
  %111 = icmp sle i32 %1, 48000
  %or.cond = and i1 %110, %111
  br i1 %or.cond, label %112, label %115

; <label>:112:                                    ; preds = %107
  %113 = load %struct.snd_ac97_bus*, %struct.snd_ac97_bus** %4, align 8
  %114 = getelementptr inbounds %struct.snd_ac97_bus, %struct.snd_ac97_bus* %113, i32 0, i32 6
  store i32 %1, i32* %114, align 4
  br label %115

; <label>:115:                                    ; preds = %112, %107
  %116 = getelementptr inbounds %struct.intel8x0, %struct.intel8x0* %0, i32 0, i32 0
  %117 = load i32, i32* %116, align 8
  %118 = icmp eq i32 %117, 3
  %119 = load %struct.snd_ac97_bus*, %struct.snd_ac97_bus** %4, align 8
  %120 = getelementptr inbounds %struct.snd_ac97_bus, %struct.snd_ac97_bus* %119, i32 0, i32 5
  %121 = load i8, i8* %120, align 2
  %.sink21 = select i1 %118, i8 -2, i8 -3
  %.sink20 = select i1 %118, i8 1, i8 2
  %122 = and i8 %121, %.sink21
  %123 = or i8 %122, %.sink20
  store i8 %123, i8* %120, align 2
  %124 = load %struct.snd_ac97_bus*, %struct.snd_ac97_bus** %4, align 8
  %125 = getelementptr inbounds %struct.intel8x0, %struct.intel8x0* %0, i32 0, i32 12
  store %struct.snd_ac97_bus* %124, %struct.snd_ac97_bus** %125, align 8
  %126 = getelementptr inbounds %struct.intel8x0, %struct.intel8x0* %0, i32 0, i32 16
  store i32 %.410, i32* %126, align 8
  %127 = getelementptr inbounds %struct.intel8x0, %struct.intel8x0* %0, i32 0, i32 4
  %128 = load %struct.pci_dev*, %struct.pci_dev** %127, align 8
  %129 = getelementptr inbounds %struct.snd_ac97_template, %struct.snd_ac97_template* %5, i32 0, i32 2
  store %struct.pci_dev* %128, %struct.pci_dev** %129, align 8
  br label %130

; <label>:130:                                    ; preds = %150, %115
  %.2 = phi i32 [ 0, %115 ], [ %151, %150 ]
  %131 = icmp ult i32 %.2, %.410
  br i1 %131, label %132, label %152

; <label>:132:                                    ; preds = %130
  %133 = trunc i32 %.2 to i16
  %134 = getelementptr inbounds %struct.snd_ac97_template, %struct.snd_ac97_template* %5, i32 0, i32 3
  store i16 %133, i16* %134, align 8
  %135 = load %struct.snd_ac97_bus*, %struct.snd_ac97_bus** %4, align 8
  %136 = getelementptr inbounds %struct.intel8x0, %struct.intel8x0* %0, i32 0, i32 13
  %137 = zext i32 %.2 to i64
  %138 = getelementptr inbounds [3 x %struct.snd_ac97*], [3 x %struct.snd_ac97*]* %136, i64 0, i64 %137
  %139 = call i32 @snd_ac97_mixer(%struct.snd_ac97_bus* %135, %struct.snd_ac97_template* %5, %struct.snd_ac97** %138)
  %140 = icmp slt i32 %139, 0
  br i1 %140, label %141, label %150

; <label>:141:                                    ; preds = %132
  %142 = icmp ne i32 %139, -13
  br i1 %142, label %143, label %148

; <label>:143:                                    ; preds = %141
  %144 = getelementptr inbounds %struct.intel8x0, %struct.intel8x0* %0, i32 0, i32 5
  %145 = load %struct.snd_card*, %struct.snd_card** %144, align 8
  %146 = getelementptr inbounds %struct.snd_card, %struct.snd_card* %145, i32 0, i32 29
  %147 = load %struct.device*, %struct.device** %146, align 8
  call void (%struct.device*, i8*, ...) @dev_err(%struct.device* %147, i8* getelementptr inbounds ([32 x i8], [32 x i8]* @.str.41, i32 0, i32 0), i32 %.2)
  br label %148

; <label>:148:                                    ; preds = %143, %141
  %149 = icmp eq i32 %.2, 0
  br i1 %149, label %397, label %150

; <label>:150:                                    ; preds = %132, %148
  %151 = add i32 %.2, 1
  br label %130

; <label>:152:                                    ; preds = %130
  %153 = getelementptr inbounds %struct.intel8x0, %struct.intel8x0* %0, i32 0, i32 13
  %154 = getelementptr inbounds [3 x %struct.snd_ac97*], [3 x %struct.snd_ac97*]* %153, i64 0, i64 0
  %155 = load %struct.snd_ac97*, %struct.snd_ac97** %154, align 8
  %156 = call i32 @snd_ac97_tune_hardware(%struct.snd_ac97* %155, %struct.ac97_quirk* getelementptr inbounds ([66 x %struct.ac97_quirk], [66 x %struct.ac97_quirk]* @ac97_quirks, i32 0, i32 0), i8* %2)
  %157 = getelementptr inbounds %struct.intel8x0, %struct.intel8x0* %0, i32 0, i32 0
  %158 = load i32, i32* %157, align 8
  %159 = icmp eq i32 %158, 1
  br i1 %159, label %160, label %166

; <label>:160:                                    ; preds = %152
  %161 = load %struct.snd_ac97_bus*, %struct.snd_ac97_bus** %4, align 8
  %162 = getelementptr inbounds %struct.snd_ac97_bus, %struct.snd_ac97_bus* %161, i32 0, i32 5
  %163 = load i8, i8* %162, align 2
  %164 = and i8 %163, -5
  %165 = or i8 %164, 4
  store i8 %165, i8* %162, align 2
  br label %166

; <label>:166:                                    ; preds = %160, %152
  %167 = getelementptr inbounds %struct.intel8x0, %struct.intel8x0* %0, i32 0, i32 0
  %168 = load i32, i32* %167, align 8
  %169 = icmp ne i32 %168, 1
  %170 = sub i32 6, 2
  %. = select i1 %169, i32 %170, i32 6
  %171 = getelementptr inbounds %struct.intel8x0, %struct.intel8x0* %0, i32 0, i32 10
  %172 = load i32, i32* %171, align 4
  %173 = icmp slt i32 %172, 0
  %174 = add i32 %., -1
  %.4 = select i1 %173, i32 %174, i32 %.
  %175 = load %struct.snd_ac97_bus*, %struct.snd_ac97_bus** %4, align 8
  %176 = trunc i32 %.4 to i16
  %177 = call i32 @snd_ac97_pcm_assign(%struct.snd_ac97_bus* %175, i16 zeroext %176, %struct.ac97_pcm* getelementptr inbounds ([6 x %struct.ac97_pcm], [6 x %struct.ac97_pcm]* @ac97_pcm_defs, i32 0, i32 0))
  %178 = icmp slt i32 %177, 0
  br i1 %178, label %397, label %179

; <label>:179:                                    ; preds = %166
  %180 = load %struct.snd_ac97_bus*, %struct.snd_ac97_bus** %4, align 8
  %181 = getelementptr inbounds %struct.snd_ac97_bus, %struct.snd_ac97_bus* %180, i32 0, i32 10
  %182 = load %struct.ac97_pcm*, %struct.ac97_pcm** %181, align 8
  %183 = getelementptr inbounds %struct.ac97_pcm, %struct.ac97_pcm* %182, i64 0
  %184 = getelementptr inbounds %struct.intel8x0, %struct.intel8x0* %0, i32 0, i32 8
  %185 = getelementptr inbounds [6 x %struct.ichdev], [6 x %struct.ichdev]* %184, i64 0, i64 1
  %186 = getelementptr inbounds %struct.ichdev, %struct.ichdev* %185, i32 0, i32 23
  store %struct.ac97_pcm* %183, %struct.ac97_pcm** %186, align 8
  %187 = load %struct.snd_ac97_bus*, %struct.snd_ac97_bus** %4, align 8
  %188 = getelementptr inbounds %struct.snd_ac97_bus, %struct.snd_ac97_bus* %187, i32 0, i32 10
  %189 = load %struct.ac97_pcm*, %struct.ac97_pcm** %188, align 8
  %190 = getelementptr inbounds %struct.ac97_pcm, %struct.ac97_pcm* %189, i64 1
  %191 = getelementptr inbounds %struct.intel8x0, %struct.intel8x0* %0, i32 0, i32 8
  %192 = getelementptr inbounds [6 x %struct.ichdev], [6 x %struct.ichdev]* %191, i64 0, i64 0
  %193 = getelementptr inbounds %struct.ichdev, %struct.ichdev* %192, i32 0, i32 23
  store %struct.ac97_pcm* %190, %struct.ac97_pcm** %193, align 8
  %194 = load %struct.snd_ac97_bus*, %struct.snd_ac97_bus** %4, align 8
  %195 = getelementptr inbounds %struct.snd_ac97_bus, %struct.snd_ac97_bus* %194, i32 0, i32 10
  %196 = load %struct.ac97_pcm*, %struct.ac97_pcm** %195, align 8
  %197 = getelementptr inbounds %struct.ac97_pcm, %struct.ac97_pcm* %196, i64 2
  %198 = getelementptr inbounds %struct.intel8x0, %struct.intel8x0* %0, i32 0, i32 8
  %199 = getelementptr inbounds [6 x %struct.ichdev], [6 x %struct.ichdev]* %198, i64 0, i64 2
  %200 = getelementptr inbounds %struct.ichdev, %struct.ichdev* %199, i32 0, i32 23
  store %struct.ac97_pcm* %197, %struct.ac97_pcm** %200, align 8
  %201 = getelementptr inbounds %struct.intel8x0, %struct.intel8x0* %0, i32 0, i32 10
  %202 = load i32, i32* %201, align 4
  %203 = icmp sge i32 %202, 0
  br i1 %203, label %204, label %215

; <label>:204:                                    ; preds = %179
  %205 = load %struct.snd_ac97_bus*, %struct.snd_ac97_bus** %4, align 8
  %206 = getelementptr inbounds %struct.snd_ac97_bus, %struct.snd_ac97_bus* %205, i32 0, i32 10
  %207 = load %struct.ac97_pcm*, %struct.ac97_pcm** %206, align 8
  %208 = getelementptr inbounds %struct.ac97_pcm, %struct.ac97_pcm* %207, i64 3
  %209 = getelementptr inbounds %struct.intel8x0, %struct.intel8x0* %0, i32 0, i32 8
  %210 = getelementptr inbounds %struct.intel8x0, %struct.intel8x0* %0, i32 0, i32 10
  %211 = load i32, i32* %210, align 4
  %212 = sext i32 %211 to i64
  %213 = getelementptr inbounds [6 x %struct.ichdev], [6 x %struct.ichdev]* %209, i64 0, i64 %212
  %214 = getelementptr inbounds %struct.ichdev, %struct.ichdev* %213, i32 0, i32 23
  store %struct.ac97_pcm* %208, %struct.ac97_pcm** %214, align 8
  br label %215

; <label>:215:                                    ; preds = %204, %179
  %216 = getelementptr inbounds %struct.intel8x0, %struct.intel8x0* %0, i32 0, i32 0
  %217 = load i32, i32* %216, align 8
  %218 = icmp eq i32 %217, 1
  br i1 %218, label %219, label %234

; <label>:219:                                    ; preds = %215
  %220 = load %struct.snd_ac97_bus*, %struct.snd_ac97_bus** %4, align 8
  %221 = getelementptr inbounds %struct.snd_ac97_bus, %struct.snd_ac97_bus* %220, i32 0, i32 10
  %222 = load %struct.ac97_pcm*, %struct.ac97_pcm** %221, align 8
  %223 = getelementptr inbounds %struct.ac97_pcm, %struct.ac97_pcm* %222, i64 4
  %224 = getelementptr inbounds %struct.intel8x0, %struct.intel8x0* %0, i32 0, i32 8
  %225 = getelementptr inbounds [6 x %struct.ichdev], [6 x %struct.ichdev]* %224, i64 0, i64 4
  %226 = getelementptr inbounds %struct.ichdev, %struct.ichdev* %225, i32 0, i32 23
  store %struct.ac97_pcm* %223, %struct.ac97_pcm** %226, align 8
  %227 = load %struct.snd_ac97_bus*, %struct.snd_ac97_bus** %4, align 8
  %228 = getelementptr inbounds %struct.snd_ac97_bus, %struct.snd_ac97_bus* %227, i32 0, i32 10
  %229 = load %struct.ac97_pcm*, %struct.ac97_pcm** %228, align 8
  %230 = getelementptr inbounds %struct.ac97_pcm, %struct.ac97_pcm* %229, i64 5
  %231 = getelementptr inbounds %struct.intel8x0, %struct.intel8x0* %0, i32 0, i32 8
  %232 = getelementptr inbounds [6 x %struct.ichdev], [6 x %struct.ichdev]* %231, i64 0, i64 3
  %233 = getelementptr inbounds %struct.ichdev, %struct.ichdev* %232, i32 0, i32 23
  store %struct.ac97_pcm* %230, %struct.ac97_pcm** %233, align 8
  br label %234

; <label>:234:                                    ; preds = %219, %215
  %235 = getelementptr inbounds %struct.intel8x0, %struct.intel8x0* %0, i32 0, i32 0
  %236 = load i32, i32* %235, align 8
  %237 = icmp eq i32 %236, 1
  br i1 %237, label %238, label %290

; <label>:238:                                    ; preds = %234
  %239 = getelementptr inbounds %struct.intel8x0, %struct.intel8x0* %0, i32 0, i32 8
  %240 = getelementptr inbounds [6 x %struct.ichdev], [6 x %struct.ichdev]* %239, i64 0, i64 4
  %241 = getelementptr inbounds %struct.ichdev, %struct.ichdev* %240, i32 0, i32 23
  %242 = load %struct.ac97_pcm*, %struct.ac97_pcm** %241, align 8
  %243 = call zeroext i8 @igetbyte(%struct.intel8x0* %0, i32 128)
  %244 = zext i8 %243 to i32
  %245 = and i32 %244, -241
  %246 = trunc i32 %245 to i8
  %247 = icmp ne %struct.ac97_pcm* %242, null
  %248 = zext i8 %246 to i32
  br i1 %247, label %249, label %287

; <label>:249:                                    ; preds = %238
  %250 = or i32 %248, 8
  %251 = trunc i32 %250 to i8
  %252 = getelementptr inbounds %struct.intel8x0, %struct.intel8x0* %0, i32 0, i32 14
  %253 = getelementptr inbounds [3 x i32], [3 x i32]* %252, i64 0, i64 0
  %254 = load i32, i32* %253, align 8
  %255 = shl i32 %254, 4
  %256 = zext i8 %251 to i32
  %257 = or i32 %256, %255
  %258 = trunc i32 %257 to i8
  br label %259

; <label>:259:                                    ; preds = %285, %249
  %.5 = phi i32 [ 1, %249 ], [ %286, %285 ]
  %260 = icmp ult i32 %.5, 4
  br i1 %260, label %261, label %.loopexit

; <label>:261:                                    ; preds = %259
  %262 = getelementptr inbounds %struct.ac97_pcm, %struct.ac97_pcm* %242, i32 0, i32 5
  %263 = getelementptr inbounds [2 x %struct.anon.72], [2 x %struct.anon.72]* %262, i64 0, i64 0
  %264 = getelementptr inbounds %struct.anon.72, %struct.anon.72* %263, i32 0, i32 3
  %265 = zext i32 %.5 to i64
  %266 = getelementptr inbounds [4 x %struct.snd_ac97*], [4 x %struct.snd_ac97*]* %264, i64 0, i64 %265
  %267 = load %struct.snd_ac97*, %struct.snd_ac97** %266, align 8
  %268 = icmp ne %struct.snd_ac97* %267, null
  br i1 %268, label %269, label %285

; <label>:269:                                    ; preds = %261
  %270 = getelementptr inbounds %struct.intel8x0, %struct.intel8x0* %0, i32 0, i32 14
  %271 = getelementptr inbounds %struct.ac97_pcm, %struct.ac97_pcm* %242, i32 0, i32 5
  %272 = getelementptr inbounds [2 x %struct.anon.72], [2 x %struct.anon.72]* %271, i64 0, i64 0
  %273 = getelementptr inbounds %struct.anon.72, %struct.anon.72* %272, i32 0, i32 3
  %274 = getelementptr inbounds [4 x %struct.snd_ac97*], [4 x %struct.snd_ac97*]* %273, i64 0, i64 1
  %275 = load %struct.snd_ac97*, %struct.snd_ac97** %274, align 8
  %276 = getelementptr inbounds %struct.snd_ac97, %struct.snd_ac97* %275, i32 0, i32 11
  %277 = load i16, i16* %276, align 8
  %278 = zext i16 %277 to i64
  %279 = getelementptr inbounds [3 x i32], [3 x i32]* %270, i64 0, i64 %278
  %280 = load i32, i32* %279, align 4
  %281 = shl i32 %280, 6
  %282 = zext i8 %258 to i32
  %283 = or i32 %282, %281
  %284 = trunc i32 %283 to i8
  br label %.loopexit

; <label>:285:                                    ; preds = %261
  %286 = add i32 %.5, 1
  br label %259

; <label>:287:                                    ; preds = %238
  %288 = and i32 %248, -9
  %289 = trunc i32 %288 to i8
  br label %.loopexit

.loopexit:                                        ; preds = %269, %259, %287
  %.1 = phi i8 [ %289, %287 ], [ %284, %269 ], [ %258, %259 ]
  call void @iputbyte(%struct.intel8x0* %0, i32 128, i8 zeroext %.1)
  br label %290

; <label>:290:                                    ; preds = %.loopexit, %234
  %291 = load %struct.snd_ac97_bus*, %struct.snd_ac97_bus** %4, align 8
  %292 = getelementptr inbounds %struct.snd_ac97_bus, %struct.snd_ac97_bus* %291, i32 0, i32 10
  %293 = load %struct.ac97_pcm*, %struct.ac97_pcm** %292, align 8
  %294 = getelementptr inbounds %struct.ac97_pcm, %struct.ac97_pcm* %293, i64 0
  %295 = getelementptr inbounds %struct.ac97_pcm, %struct.ac97_pcm* %294, i32 0, i32 5
  %296 = getelementptr inbounds [2 x %struct.anon.72], [2 x %struct.anon.72]* %295, i64 0, i64 0
  %297 = getelementptr inbounds %struct.anon.72, %struct.anon.72* %296, i32 0, i32 0
  %298 = load i16, i16* %297, align 8
  %299 = zext i16 %298 to i32
  %300 = and i32 %299, 128
  %301 = icmp ne i32 %300, 0
  br i1 %301, label %302, label %335

; <label>:302:                                    ; preds = %290
  %303 = getelementptr inbounds %struct.intel8x0, %struct.intel8x0* %0, i32 0, i32 9
  %304 = load i16, i16* %303, align 8
  %305 = and i16 %304, -2
  %306 = or i16 %305, 1
  store i16 %306, i16* %303, align 8
  %307 = load %struct.snd_ac97_bus*, %struct.snd_ac97_bus** %4, align 8
  %308 = getelementptr inbounds %struct.snd_ac97_bus, %struct.snd_ac97_bus* %307, i32 0, i32 10
  %309 = load %struct.ac97_pcm*, %struct.ac97_pcm** %308, align 8
  %310 = getelementptr inbounds %struct.ac97_pcm, %struct.ac97_pcm* %309, i64 0
  %311 = getelementptr inbounds %struct.ac97_pcm, %struct.ac97_pcm* %310, i32 0, i32 5
  %312 = getelementptr inbounds [2 x %struct.anon.72], [2 x %struct.anon.72]* %311, i64 0, i64 0
  %313 = getelementptr inbounds %struct.anon.72, %struct.anon.72* %312, i32 0, i32 0
  %314 = load i16, i16* %313, align 8
  %315 = zext i16 %314 to i32
  %316 = and i32 %315, 512
  %317 = icmp ne i32 %316, 0
  br i1 %317, label %318, label %335

; <label>:318:                                    ; preds = %302
  %319 = getelementptr inbounds %struct.intel8x0, %struct.intel8x0* %0, i32 0, i32 9
  %320 = load i16, i16* %319, align 8
  %321 = and i16 %320, -3
  %322 = or i16 %321, 2
  store i16 %322, i16* %319, align 8
  %323 = getelementptr inbounds %struct.intel8x0, %struct.intel8x0* %0, i32 0, i32 13
  %324 = getelementptr inbounds [3 x %struct.snd_ac97*], [3 x %struct.snd_ac97*]* %323, i64 0, i64 0
  %325 = load %struct.snd_ac97*, %struct.snd_ac97** %324, align 8
  %326 = getelementptr inbounds %struct.snd_ac97, %struct.snd_ac97* %325, i32 0, i32 19
  %327 = load i32, i32* %326, align 4
  %328 = and i32 %327, 524288
  %329 = icmp ne i32 %328, 0
  br i1 %329, label %330, label %335

; <label>:330:                                    ; preds = %318
  %331 = getelementptr inbounds %struct.intel8x0, %struct.intel8x0* %0, i32 0, i32 9
  %332 = load i16, i16* %331, align 8
  %333 = and i16 %332, -5
  %334 = or i16 %333, 4
  store i16 %334, i16* %331, align 8
  br label %335

; <label>:335:                                    ; preds = %302, %330, %318, %290
  %336 = load %struct.snd_ac97_bus*, %struct.snd_ac97_bus** %4, align 8
  %337 = getelementptr inbounds %struct.snd_ac97_bus, %struct.snd_ac97_bus* %336, i32 0, i32 10
  %338 = load %struct.ac97_pcm*, %struct.ac97_pcm** %337, align 8
  %339 = getelementptr inbounds %struct.ac97_pcm, %struct.ac97_pcm* %338, i64 0
  %340 = getelementptr inbounds %struct.ac97_pcm, %struct.ac97_pcm* %339, i32 0, i32 5
  %341 = getelementptr inbounds [2 x %struct.anon.72], [2 x %struct.anon.72]* %340, i64 0, i64 1
  %342 = getelementptr inbounds %struct.anon.72, %struct.anon.72* %341, i32 0, i32 1
  %343 = getelementptr inbounds [4 x i16], [4 x i16]* %342, i64 0, i64 0
  %344 = load i16, i16* %343, align 2
  %345 = icmp ne i16 %344, 0
  br i1 %345, label %346, label %351

; <label>:346:                                    ; preds = %335
  %347 = getelementptr inbounds %struct.intel8x0, %struct.intel8x0* %0, i32 0, i32 9
  %348 = load i16, i16* %347, align 8
  %349 = and i16 %348, -9
  %350 = or i16 %349, 8
  store i16 %350, i16* %347, align 8
  br label %351

; <label>:351:                                    ; preds = %346, %335
  %352 = getelementptr inbounds %struct.intel8x0, %struct.intel8x0* %0, i32 0, i32 0
  %353 = load i32, i32* %352, align 8
  %354 = icmp eq i32 %353, 1
  br i1 %354, label %355, label %364

; <label>:355:                                    ; preds = %351
  %356 = call i32 @igetdword(%struct.intel8x0* %0, i32 48)
  %357 = and i32 %356, 12582912
  %358 = icmp eq i32 %357, 4194304
  br i1 %358, label %359, label %364

; <label>:359:                                    ; preds = %355
  %360 = getelementptr inbounds %struct.intel8x0, %struct.intel8x0* %0, i32 0, i32 9
  %361 = load i16, i16* %360, align 8
  %362 = and i16 %361, -17
  %363 = or i16 %362, 16
  store i16 %363, i16* %360, align 8
  br label %364

; <label>:364:                                    ; preds = %355, %359, %351
  %365 = getelementptr inbounds %struct.intel8x0, %struct.intel8x0* %0, i32 0, i32 0
  %366 = load i32, i32* %365, align 8
  %367 = icmp ne i32 %366, 4
  %368 = load i32, i32* @spdif_aclink, align 4
  %369 = icmp ne i32 %368, 0
  %or.cond23 = or i1 %367, %369
  br i1 %or.cond23, label %379, label %370

; <label>:370:                                    ; preds = %364
  %371 = getelementptr inbounds %struct.intel8x0, %struct.intel8x0* %0, i32 0, i32 8
  %372 = getelementptr inbounds %struct.intel8x0, %struct.intel8x0* %0, i32 0, i32 10
  %373 = load i32, i32* %372, align 4
  %374 = sext i32 %373 to i64
  %375 = getelementptr inbounds [6 x %struct.ichdev], [6 x %struct.ichdev]* %371, i64 0, i64 %374
  %376 = getelementptr inbounds %struct.ichdev, %struct.ichdev* %375, i32 0, i32 23
  %377 = load %struct.ac97_pcm*, %struct.ac97_pcm** %376, align 8
  %378 = getelementptr inbounds %struct.ac97_pcm, %struct.ac97_pcm* %377, i32 0, i32 4
  store i32 128, i32* %378, align 8
  br label %379

; <label>:379:                                    ; preds = %364, %370
  %380 = getelementptr inbounds %struct.intel8x0, %struct.intel8x0* %0, i32 0, i32 0
  %381 = load i32, i32* %380, align 8
  %382 = icmp ne i32 %381, 1
  %383 = load i32, i32* @spdif_aclink, align 4
  %384 = icmp ne i32 %383, 0
  %or.cond25 = or i1 %382, %384
  br i1 %or.cond25, label %393, label %385

; <label>:385:                                    ; preds = %379
  %386 = call i32 @igetdword(%struct.intel8x0* %0, i32 44)
  %387 = and i32 %386, 1073741823
  %388 = or i32 %387, -1073741824
  call void @iputdword(%struct.intel8x0* %0, i32 44, i32 %388)
  %389 = getelementptr inbounds %struct.intel8x0, %struct.intel8x0* %0, i32 0, i32 13
  %390 = getelementptr inbounds [3 x %struct.snd_ac97*], [3 x %struct.snd_ac97*]* %389, i64 0, i64 0
  %391 = load %struct.snd_ac97*, %struct.snd_ac97** %390, align 8
  %392 = call i32 @snd_ac97_update_bits(%struct.snd_ac97* %391, i16 zeroext 42, i16 zeroext 48, i16 zeroext 48)
  br label %393

; <label>:393:                                    ; preds = %379, %385
  %394 = getelementptr inbounds %struct.intel8x0, %struct.intel8x0* %0, i32 0, i32 9
  %395 = load i16, i16* %394, align 8
  %396 = and i16 %395, -33
  store i16 %396, i16* %394, align 8
  br label %404

; <label>:397:                                    ; preds = %166, %148, %.loopexit11
  %.03 = phi i32 [ %105, %.loopexit11 ], [ %139, %148 ], [ %177, %166 ]
  %398 = getelementptr inbounds %struct.intel8x0, %struct.intel8x0* %0, i32 0, i32 0
  %399 = load i32, i32* %398, align 8
  %400 = icmp ne i32 %399, 3
  br i1 %400, label %401, label %404

; <label>:401:                                    ; preds = %397
  %402 = call i32 @igetdword(%struct.intel8x0* %0, i32 44)
  %403 = and i32 %402, -3
  call void @iputdword(%struct.intel8x0* %0, i32 44, i32 %403)
  br label %404

; <label>:404:                                    ; preds = %397, %401, %393
  %.0 = phi i32 [ 0, %393 ], [ %.03, %401 ], [ %.03, %397 ]
  ret i32 %.0
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @snd_intel8x0_pcm(%struct.intel8x0*) #0 {
  %2 = getelementptr inbounds %struct.intel8x0, %struct.intel8x0* %0, i32 0, i32 0
  %3 = load i32, i32* %2, align 8
  switch i32 %3, label %12 [
    i32 1, label %4
    i32 4, label %8
    i32 3, label %13
  ]

; <label>:4:                                      ; preds = %1
  %5 = load i32, i32* @spdif_aclink, align 4
  %6 = icmp ne i32 %5, 0
  %7 = add nsw i32 5, -1
  %. = select i1 %6, i32 %7, i32 5
  br label %13

; <label>:8:                                      ; preds = %1
  %9 = load i32, i32* @spdif_aclink, align 4
  %10 = icmp ne i32 %9, 0
  %11 = add nsw i32 3, -1
  %.6 = select i1 %10, i32 %11, i32 3
  br label %13

; <label>:12:                                     ; preds = %1
  br label %13

; <label>:13:                                     ; preds = %1, %12, %8, %4
  %.2 = phi i32 [ 2, %12 ], [ %.6, %8 ], [ %., %4 ], [ 3, %1 ]
  %.01 = phi %struct.ich_pcm_table* [ getelementptr inbounds ([5 x %struct.ich_pcm_table], [5 x %struct.ich_pcm_table]* @intel_pcms, i32 0, i32 0), %12 ], [ getelementptr inbounds ([3 x %struct.ich_pcm_table], [3 x %struct.ich_pcm_table]* @nforce_pcms, i32 0, i32 0), %8 ], [ getelementptr inbounds ([5 x %struct.ich_pcm_table], [5 x %struct.ich_pcm_table]* @intel_pcms, i32 0, i32 0), %4 ], [ getelementptr inbounds ([3 x %struct.ich_pcm_table], [3 x %struct.ich_pcm_table]* @ali_pcms, i32 0, i32 0), %1 ]
  br label %14

; <label>:14:                                     ; preds = %38, %13
  %.04 = phi i32 [ 0, %13 ], [ %.15, %38 ]
  %.02 = phi i32 [ 0, %13 ], [ %39, %38 ]
  %15 = icmp slt i32 %.02, %.2
  br i1 %15, label %16, label %40

; <label>:16:                                     ; preds = %14
  %17 = sext i32 %.02 to i64
  %18 = getelementptr inbounds %struct.ich_pcm_table, %struct.ich_pcm_table* %.01, i64 %17
  %19 = icmp sgt i32 %.02, 0
  br i1 %19, label %20, label %33

; <label>:20:                                     ; preds = %16
  %21 = getelementptr inbounds %struct.ich_pcm_table, %struct.ich_pcm_table* %18, i32 0, i32 5
  %22 = load i32, i32* %21, align 8
  %23 = icmp ne i32 %22, 0
  br i1 %23, label %24, label %33

; <label>:24:                                     ; preds = %20
  %25 = getelementptr inbounds %struct.intel8x0, %struct.intel8x0* %0, i32 0, i32 8
  %26 = getelementptr inbounds %struct.ich_pcm_table, %struct.ich_pcm_table* %18, i32 0, i32 5
  %27 = load i32, i32* %26, align 8
  %28 = sext i32 %27 to i64
  %29 = getelementptr inbounds [6 x %struct.ichdev], [6 x %struct.ichdev]* %25, i64 0, i64 %28
  %30 = getelementptr inbounds %struct.ichdev, %struct.ichdev* %29, i32 0, i32 23
  %31 = load %struct.ac97_pcm*, %struct.ac97_pcm** %30, align 8
  %32 = icmp ne %struct.ac97_pcm* %31, null
  br i1 %32, label %33, label %38

; <label>:33:                                     ; preds = %24, %20, %16
  %34 = call i32 @snd_intel8x0_pcm1(%struct.intel8x0* %0, i32 %.04, %struct.ich_pcm_table* %18)
  %35 = icmp slt i32 %34, 0
  br i1 %35, label %42, label %36

; <label>:36:                                     ; preds = %33
  %37 = add nsw i32 %.04, 1
  br label %38

; <label>:38:                                     ; preds = %24, %36
  %.15 = phi i32 [ %37, %36 ], [ %.04, %24 ]
  %39 = add nsw i32 %.02, 1
  br label %14

; <label>:40:                                     ; preds = %14
  %41 = getelementptr inbounds %struct.intel8x0, %struct.intel8x0* %0, i32 0, i32 6
  store i32 %.04, i32* %41, align 8
  br label %42

; <label>:42:                                     ; preds = %33, %40
  %.0 = phi i32 [ 0, %40 ], [ %34, %33 ]
  ret i32 %.0
}

; Function Attrs: noinline nounwind uwtable
define internal void @snd_intel8x0_proc_init(%struct.intel8x0*) #0 {
  %2 = alloca %struct.snd_info_entry*, align 8
  %3 = getelementptr inbounds %struct.intel8x0, %struct.intel8x0* %0, i32 0, i32 5
  %4 = load %struct.snd_card*, %struct.snd_card** %3, align 8
  %5 = call i32 @snd_card_proc_new(%struct.snd_card* %4, i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str, i32 0, i32 0), %struct.snd_info_entry** %2)
  %6 = icmp ne i32 %5, 0
  br i1 %6, label %10, label %7

; <label>:7:                                      ; preds = %1
  %8 = load %struct.snd_info_entry*, %struct.snd_info_entry** %2, align 8
  %9 = bitcast %struct.intel8x0* %0 to i8*
  call void @snd_info_set_text_ops(%struct.snd_info_entry* %8, i8* %9, void (%struct.snd_info_entry*, %struct.snd_info_buffer*)* @snd_intel8x0_proc_read)
  br label %10

; <label>:10:                                     ; preds = %7, %1
  ret void
}

declare i32 @snprintf(i8*, i64, i8*, ...) #1

declare i8* @snd_ac97_get_short_name(%struct.snd_ac97*) #1

; Function Attrs: noinline nounwind uwtable
define internal i32 @intel8x0_in_clock_list(%struct.intel8x0*) #0 {
  %2 = getelementptr inbounds %struct.intel8x0, %struct.intel8x0* %0, i32 0, i32 4
  %3 = load %struct.pci_dev*, %struct.pci_dev** %2, align 8
  %4 = call %struct.snd_pci_quirk* @snd_pci_quirk_lookup(%struct.pci_dev* %3, %struct.snd_pci_quirk* getelementptr inbounds ([7 x %struct.snd_pci_quirk], [7 x %struct.snd_pci_quirk]* @intel8x0_clock_list, i32 0, i32 0))
  %5 = icmp ne %struct.snd_pci_quirk* %4, null
  br i1 %5, label %6, label %24

; <label>:6:                                      ; preds = %1
  %7 = getelementptr inbounds %struct.intel8x0, %struct.intel8x0* %0, i32 0, i32 5
  %8 = load %struct.snd_card*, %struct.snd_card** %7, align 8
  %9 = getelementptr inbounds %struct.snd_card, %struct.snd_card* %8, i32 0, i32 29
  %10 = load %struct.device*, %struct.device** %9, align 8
  %11 = getelementptr inbounds %struct.pci_dev, %struct.pci_dev* %3, i32 0, i32 9
  %12 = load i16, i16* %11, align 8
  %13 = zext i16 %12 to i32
  %14 = getelementptr inbounds %struct.pci_dev, %struct.pci_dev* %3, i32 0, i32 10
  %15 = load i16, i16* %14, align 2
  %16 = zext i16 %15 to i32
  %17 = getelementptr inbounds %struct.snd_pci_quirk, %struct.snd_pci_quirk* %4, i32 0, i32 3
  %18 = load i32, i32* %17, align 4
  call void (%struct.device*, i8*, ...) @_dev_info(%struct.device* %10, i8* getelementptr inbounds ([37 x i8], [37 x i8]* @.str.126, i32 0, i32 0), i32 %13, i32 %16, i32 %18)
  %19 = getelementptr inbounds %struct.snd_pci_quirk, %struct.snd_pci_quirk* %4, i32 0, i32 3
  %20 = load i32, i32* %19, align 4
  %21 = getelementptr inbounds %struct.intel8x0, %struct.intel8x0* %0, i32 0, i32 12
  %22 = load %struct.snd_ac97_bus*, %struct.snd_ac97_bus** %21, align 8
  %23 = getelementptr inbounds %struct.snd_ac97_bus, %struct.snd_ac97_bus* %22, i32 0, i32 6
  store i32 %20, i32* %23, align 4
  br label %24

; <label>:24:                                     ; preds = %1, %6
  %.0 = phi i32 [ 1, %6 ], [ 0, %1 ]
  ret i32 %.0
}

; Function Attrs: noinline nounwind uwtable
define internal void @intel8x0_measure_ac97_clock(%struct.intel8x0*) #0 {
  %2 = getelementptr inbounds %struct.intel8x0, %struct.intel8x0* %0, i32 0, i32 12
  %3 = load %struct.snd_ac97_bus*, %struct.snd_ac97_bus** %2, align 8
  %4 = getelementptr inbounds %struct.snd_ac97_bus, %struct.snd_ac97_bus* %3, i32 0, i32 6
  %5 = load i32, i32* %4, align 4
  %6 = icmp ne i32 %5, 48000
  br i1 %6, label %253, label %7

; <label>:7:                                      ; preds = %1, %181
  %.01 = phi i32 [ %.2, %181 ], [ 1000, %1 ]
  %.0 = phi i32 [ %182, %181 ], [ 1, %1 ]
  %8 = getelementptr inbounds %struct.intel8x0, %struct.intel8x0* %0, i32 0, i32 7
  %9 = getelementptr inbounds [6 x %struct.snd_pcm*], [6 x %struct.snd_pcm*]* %8, i64 0, i64 0
  %10 = load %struct.snd_pcm*, %struct.snd_pcm** %9, align 8
  %11 = getelementptr inbounds %struct.snd_pcm, %struct.snd_pcm* %10, i32 0, i32 8
  %12 = getelementptr inbounds [2 x %struct.snd_pcm_str], [2 x %struct.snd_pcm_str]* %11, i64 0, i64 0
  %13 = getelementptr inbounds %struct.snd_pcm_str, %struct.snd_pcm_str* %12, i32 0, i32 4
  %14 = load %struct.snd_pcm_substream*, %struct.snd_pcm_substream** %13, align 8
  %15 = icmp ne %struct.snd_pcm_substream* %14, null
  br i1 %15, label %16, label %21

; <label>:16:                                     ; preds = %7
  %17 = getelementptr inbounds %struct.snd_pcm_substream, %struct.snd_pcm_substream* %14, i32 0, i32 8
  %18 = getelementptr inbounds %struct.snd_dma_buffer, %struct.snd_dma_buffer* %17, i32 0, i32 3
  %19 = load i64, i64* %18, align 8
  %20 = icmp ult i64 %19, 32768
  br i1 %20, label %21, label %26

; <label>:21:                                     ; preds = %16, %7
  %22 = getelementptr inbounds %struct.intel8x0, %struct.intel8x0* %0, i32 0, i32 5
  %23 = load %struct.snd_card*, %struct.snd_card** %22, align 8
  %24 = getelementptr inbounds %struct.snd_card, %struct.snd_card* %23, i32 0, i32 29
  %25 = load %struct.device*, %struct.device** %24, align 8
  call void (%struct.device*, i8*, ...) @dev_warn(%struct.device* %25, i8* getelementptr inbounds ([60 x i8], [60 x i8]* @.str.127, i32 0, i32 0))
  br label %253

; <label>:26:                                     ; preds = %16
  %27 = getelementptr inbounds %struct.intel8x0, %struct.intel8x0* %0, i32 0, i32 8
  %28 = getelementptr inbounds [6 x %struct.ichdev], [6 x %struct.ichdev]* %27, i64 0, i64 1
  %29 = getelementptr inbounds %struct.snd_pcm_substream, %struct.snd_pcm_substream* %14, i32 0, i32 8
  %30 = getelementptr inbounds %struct.snd_dma_buffer, %struct.snd_dma_buffer* %29, i32 0, i32 2
  %31 = load i64, i64* %30, align 8
  %32 = trunc i64 %31 to i32
  %33 = getelementptr inbounds %struct.ichdev, %struct.ichdev* %28, i32 0, i32 5
  store i32 %32, i32* %33, align 8
  %34 = getelementptr inbounds %struct.ichdev, %struct.ichdev* %28, i32 0, i32 7
  store i32 32768, i32* %34, align 8
  %35 = getelementptr inbounds %struct.ichdev, %struct.ichdev* %28, i32 0, i32 6
  store i32 32768, i32* %35, align 4
  %36 = getelementptr inbounds %struct.ichdev, %struct.ichdev* %28, i32 0, i32 4
  store %struct.snd_pcm_substream* null, %struct.snd_pcm_substream** %36, align 8
  %37 = getelementptr inbounds %struct.intel8x0, %struct.intel8x0* %0, i32 0, i32 13
  %38 = getelementptr inbounds [3 x %struct.snd_ac97*], [3 x %struct.snd_ac97*]* %37, i64 0, i64 0
  %39 = load %struct.snd_ac97*, %struct.snd_ac97** %38, align 8
  %40 = call i32 @snd_ac97_set_rate(%struct.snd_ac97* %39, i32 44, i32 48000)
  %41 = icmp slt i32 %40, 0
  br i1 %41, label %42, label %51

; <label>:42:                                     ; preds = %26
  %43 = getelementptr inbounds %struct.intel8x0, %struct.intel8x0* %0, i32 0, i32 5
  %44 = load %struct.snd_card*, %struct.snd_card** %43, align 8
  %45 = getelementptr inbounds %struct.snd_card, %struct.snd_card* %44, i32 0, i32 29
  %46 = load %struct.device*, %struct.device** %45, align 8
  %47 = getelementptr inbounds %struct.intel8x0, %struct.intel8x0* %0, i32 0, i32 12
  %48 = load %struct.snd_ac97_bus*, %struct.snd_ac97_bus** %47, align 8
  %49 = getelementptr inbounds %struct.snd_ac97_bus, %struct.snd_ac97_bus* %48, i32 0, i32 6
  %50 = load i32, i32* %49, align 4
  call void (%struct.device*, i8*, ...) @dev_err(%struct.device* %46, i8* getelementptr inbounds ([34 x i8], [34 x i8]* @.str.128, i32 0, i32 0), i32 %50)
  br label %253

; <label>:51:                                     ; preds = %26
  call void @snd_intel8x0_setup_periods(%struct.intel8x0* %0, %struct.ichdev* %28)
  %52 = getelementptr inbounds %struct.ichdev, %struct.ichdev* %28, i32 0, i32 1
  %53 = load i64, i64* %52, align 8
  %54 = getelementptr inbounds %struct.intel8x0, %struct.intel8x0* %0, i32 0, i32 20
  %55 = getelementptr inbounds %struct.spinlock, %struct.spinlock* %54, i32 0, i32 0
  %56 = bitcast %union.anon.1* %55 to %struct.raw_spinlock*
  call void @_raw_spin_lock_irq(%struct.raw_spinlock* %56) #3
  %57 = getelementptr inbounds %struct.intel8x0, %struct.intel8x0* %0, i32 0, i32 9
  %58 = load i16, i16* %57, align 8
  %59 = and i16 %58, -129
  %60 = or i16 %59, 128
  store i16 %60, i16* %57, align 8
  %61 = getelementptr inbounds %struct.intel8x0, %struct.intel8x0* %0, i32 0, i32 0
  %62 = load i32, i32* %61, align 8
  %63 = icmp ne i32 %62, 3
  %64 = add i64 %53, 11
  %65 = trunc i64 %64 to i32
  br i1 %63, label %66, label %67

; <label>:66:                                     ; preds = %51
  call void @iputbyte(%struct.intel8x0* %0, i32 %65, i8 zeroext 17)
  br label %71

; <label>:67:                                     ; preds = %51
  call void @iputbyte(%struct.intel8x0* %0, i32 %65, i8 zeroext 16)
  %68 = getelementptr inbounds %struct.ichdev, %struct.ichdev* %28, i32 0, i32 22
  %69 = load i32, i32* %68, align 4
  %70 = shl i32 1, %69
  call void @iputdword(%struct.intel8x0* %0, i32 8, i32 %70)
  br label %71

; <label>:71:                                     ; preds = %67, %66
  %72 = call i64 @ktime_get()
  %73 = getelementptr inbounds %struct.intel8x0, %struct.intel8x0* %0, i32 0, i32 20
  %74 = getelementptr inbounds %struct.spinlock, %struct.spinlock* %73, i32 0, i32 0
  %75 = bitcast %union.anon.1* %74 to %struct.raw_spinlock*
  call void @__raw_spin_unlock_irq(%struct.raw_spinlock* %75) #3
  call void @msleep(i32 50)
  %76 = getelementptr inbounds %struct.intel8x0, %struct.intel8x0* %0, i32 0, i32 20
  %77 = getelementptr inbounds %struct.spinlock, %struct.spinlock* %76, i32 0, i32 0
  %78 = bitcast %union.anon.1* %77 to %struct.raw_spinlock*
  call void @_raw_spin_lock_irq(%struct.raw_spinlock* %78) #3
  br label %79

; <label>:79:                                     ; preds = %116, %71
  %.1 = phi i32 [ %.01, %71 ], [ %117, %116 ]
  %80 = getelementptr inbounds %struct.ichdev, %struct.ichdev* %28, i32 0, i32 1
  %81 = load i64, i64* %80, align 8
  %82 = add i64 %81, 4
  %83 = trunc i64 %82 to i32
  %84 = call zeroext i8 @igetbyte(%struct.intel8x0* %0, i32 %83)
  %85 = zext i8 %84 to i32
  %86 = getelementptr inbounds %struct.ichdev, %struct.ichdev* %28, i32 0, i32 1
  %87 = load i64, i64* %86, align 8
  %88 = getelementptr inbounds %struct.ichdev, %struct.ichdev* %28, i32 0, i32 20
  %89 = load i32, i32* %88, align 4
  %90 = zext i32 %89 to i64
  %91 = add i64 %87, %90
  %92 = trunc i64 %91 to i32
  %93 = call zeroext i16 @igetword(%struct.intel8x0* %0, i32 %92)
  %94 = zext i16 %93 to i64
  %95 = icmp eq i64 %94, 0
  br i1 %95, label %96, label %97

; <label>:96:                                     ; preds = %79
  call void @__const_udelay(i64 42950)
  br label %116

; <label>:97:                                     ; preds = %79
  %98 = getelementptr inbounds %struct.ichdev, %struct.ichdev* %28, i32 0, i32 1
  %99 = load i64, i64* %98, align 8
  %100 = add i64 %99, 4
  %101 = trunc i64 %100 to i32
  %102 = call zeroext i8 @igetbyte(%struct.intel8x0* %0, i32 %101)
  %103 = zext i8 %102 to i32
  %104 = icmp eq i32 %85, %103
  br i1 %104, label %105, label %116

; <label>:105:                                    ; preds = %97
  %106 = getelementptr inbounds %struct.ichdev, %struct.ichdev* %28, i32 0, i32 1
  %107 = load i64, i64* %106, align 8
  %108 = getelementptr inbounds %struct.ichdev, %struct.ichdev* %28, i32 0, i32 20
  %109 = load i32, i32* %108, align 4
  %110 = zext i32 %109 to i64
  %111 = add i64 %107, %110
  %112 = trunc i64 %111 to i32
  %113 = call zeroext i16 @igetword(%struct.intel8x0* %0, i32 %112)
  %114 = zext i16 %113 to i64
  %115 = icmp eq i64 %94, %114
  br i1 %115, label %.loopexit, label %116

; <label>:116:                                    ; preds = %97, %105, %96
  %117 = add nsw i32 %.1, -1
  %118 = icmp ne i32 %.1, 0
  br i1 %118, label %79, label %.loopexit

.loopexit:                                        ; preds = %116, %105
  %.2 = phi i32 [ %.1, %105 ], [ %117, %116 ]
  %119 = icmp eq i64 %94, 0
  br i1 %119, label %133, label %120

; <label>:120:                                    ; preds = %.loopexit
  %121 = getelementptr inbounds %struct.ichdev, %struct.ichdev* %28, i32 0, i32 8
  %122 = load i32, i32* %121, align 4
  %123 = zext i32 %122 to i64
  %124 = getelementptr inbounds %struct.ichdev, %struct.ichdev* %28, i32 0, i32 10
  %125 = load i32, i32* %124, align 4
  %126 = zext i32 %125 to i64
  %127 = shl i64 %94, %126
  %128 = sub i64 %123, %127
  %129 = getelementptr inbounds %struct.ichdev, %struct.ichdev* %28, i32 0, i32 9
  %130 = load i32, i32* %129, align 8
  %131 = zext i32 %130 to i64
  %132 = add i64 %128, %131
  br label %133

; <label>:133:                                    ; preds = %.loopexit, %120
  %.02 = phi i64 [ %132, %120 ], [ 0, %.loopexit ]
  %134 = getelementptr inbounds %struct.intel8x0, %struct.intel8x0* %0, i32 0, i32 9
  %135 = load i16, i16* %134, align 8
  %136 = and i16 %135, -129
  store i16 %136, i16* %134, align 8
  %137 = call i64 @ktime_get()
  %138 = getelementptr inbounds %struct.intel8x0, %struct.intel8x0* %0, i32 0, i32 0
  %139 = load i32, i32* %138, align 8
  %140 = icmp eq i32 %139, 3
  br i1 %140, label %141, label %153

; <label>:141:                                    ; preds = %133
  %142 = getelementptr inbounds %struct.ichdev, %struct.ichdev* %28, i32 0, i32 22
  %143 = load i32, i32* %142, align 4
  %144 = add i32 %143, 16
  %145 = shl i32 1, %144
  call void @iputdword(%struct.intel8x0* %0, i32 8, i32 %145)
  %146 = add i64 %53, 11
  %147 = trunc i64 %146 to i32
  call void @iputbyte(%struct.intel8x0* %0, i32 %147, i8 zeroext 0)
  br label %148

; <label>:148:                                    ; preds = %148, %141
  %149 = add i64 %53, 11
  %150 = trunc i64 %149 to i32
  %151 = call zeroext i8 @igetbyte(%struct.intel8x0* %0, i32 %150)
  %152 = icmp ne i8 %151, 0
  br i1 %152, label %148, label %167

; <label>:153:                                    ; preds = %133
  %154 = add i64 %53, 11
  %155 = trunc i64 %154 to i32
  call void @iputbyte(%struct.intel8x0* %0, i32 %155, i8 zeroext 0)
  br label %156

; <label>:156:                                    ; preds = %156, %153
  %157 = getelementptr inbounds %struct.ichdev, %struct.ichdev* %28, i32 0, i32 19
  %158 = load i32, i32* %157, align 8
  %159 = zext i32 %158 to i64
  %160 = add i64 %53, %159
  %161 = trunc i64 %160 to i32
  %162 = call zeroext i8 @igetbyte(%struct.intel8x0* %0, i32 %161)
  %163 = zext i8 %162 to i32
  %164 = and i32 %163, 1
  %165 = icmp ne i32 %164, 0
  %166 = xor i1 %165, true
  br i1 %166, label %156, label %167

; <label>:167:                                    ; preds = %156, %148
  %168 = add i64 %53, 11
  %169 = trunc i64 %168 to i32
  call void @iputbyte(%struct.intel8x0* %0, i32 %169, i8 zeroext 2)
  %170 = getelementptr inbounds %struct.intel8x0, %struct.intel8x0* %0, i32 0, i32 20
  %171 = getelementptr inbounds %struct.spinlock, %struct.spinlock* %170, i32 0, i32 0
  %172 = bitcast %union.anon.1* %171 to %struct.raw_spinlock*
  call void @__raw_spin_unlock_irq(%struct.raw_spinlock* %172) #3
  %173 = icmp eq i64 %.02, 0
  br i1 %173, label %174, label %183

; <label>:174:                                    ; preds = %167
  %175 = getelementptr inbounds %struct.intel8x0, %struct.intel8x0* %0, i32 0, i32 5
  %176 = load %struct.snd_card*, %struct.snd_card** %175, align 8
  %177 = getelementptr inbounds %struct.snd_card, %struct.snd_card* %176, i32 0, i32 29
  %178 = load %struct.device*, %struct.device** %177, align 8
  call void (%struct.device*, i8*, ...) @dev_err(%struct.device* %178, i8* getelementptr inbounds ([37 x i8], [37 x i8]* @.str.129, i32 0, i32 0))
  br label %179

; <label>:179:                                    ; preds = %206, %191, %174
  %180 = icmp slt i32 %.0, 3
  br i1 %180, label %181, label %240

; <label>:181:                                    ; preds = %179
  call void @msleep(i32 300)
  %182 = add nsw i32 %.0, 1
  br label %7

; <label>:183:                                    ; preds = %167
  %184 = udiv i64 %.02, 4
  %185 = call i64 @ktime_us_delta(i64 %137, i64 %72)
  %186 = getelementptr inbounds %struct.intel8x0, %struct.intel8x0* %0, i32 0, i32 5
  %187 = load %struct.snd_card*, %struct.snd_card** %186, align 8
  %188 = getelementptr inbounds %struct.snd_card, %struct.snd_card* %187, i32 0, i32 29
  %189 = load %struct.device*, %struct.device** %188, align 8
  call void (%struct.device*, i8*, ...) @_dev_info(%struct.device* %189, i8* getelementptr inbounds ([38 x i8], [38 x i8]* @.str.130, i32 0, i32 0), i8* getelementptr inbounds ([28 x i8], [28 x i8]* @__func__.intel8x0_measure_ac97_clock, i32 0, i32 0), i64 %185, i64 %184)
  %190 = icmp eq i64 %185, 0
  br i1 %190, label %191, label %196

; <label>:191:                                    ; preds = %183
  %192 = getelementptr inbounds %struct.intel8x0, %struct.intel8x0* %0, i32 0, i32 5
  %193 = load %struct.snd_card*, %struct.snd_card** %192, align 8
  %194 = getelementptr inbounds %struct.snd_card, %struct.snd_card* %193, i32 0, i32 29
  %195 = load %struct.device*, %struct.device** %194, align 8
  call void (%struct.device*, i8*, ...) @dev_err(%struct.device* %195, i8* getelementptr inbounds ([24 x i8], [24 x i8]* @.str.131, i32 0, i32 0))
  br label %179

; <label>:196:                                    ; preds = %183
  %197 = mul i64 %184, 1000
  %198 = udiv i64 %197, %185
  %199 = mul i64 %198, 1000
  %200 = urem i64 %197, %185
  %201 = mul i64 %200, 1000
  %202 = udiv i64 %201, %185
  %203 = add i64 %199, %202
  %204 = icmp ult i64 %203, 40000
  %205 = icmp uge i64 %203, 60000
  %or.cond = or i1 %204, %205
  br i1 %or.cond, label %206, label %211

; <label>:206:                                    ; preds = %196
  %207 = getelementptr inbounds %struct.intel8x0, %struct.intel8x0* %0, i32 0, i32 5
  %208 = load %struct.snd_card*, %struct.snd_card** %207, align 8
  %209 = getelementptr inbounds %struct.snd_card, %struct.snd_card* %208, i32 0, i32 29
  %210 = load %struct.device*, %struct.device** %209, align 8
  call void (%struct.device*, i8*, ...) @_dev_info(%struct.device* %210, i8* getelementptr inbounds ([29 x i8], [29 x i8]* @.str.132, i32 0, i32 0), i64 %203)
  br label %179

; <label>:211:                                    ; preds = %196
  %212 = icmp ugt i64 %203, 40500
  %213 = icmp ult i64 %203, 41500
  %or.cond3 = and i1 %212, %213
  br i1 %or.cond3, label %214, label %218

; <label>:214:                                    ; preds = %211
  %215 = getelementptr inbounds %struct.intel8x0, %struct.intel8x0* %0, i32 0, i32 12
  %216 = load %struct.snd_ac97_bus*, %struct.snd_ac97_bus** %215, align 8
  %217 = getelementptr inbounds %struct.snd_ac97_bus, %struct.snd_ac97_bus* %216, i32 0, i32 6
  store i32 41000, i32* %217, align 4
  br label %240

; <label>:218:                                    ; preds = %211
  %219 = icmp ugt i64 %203, 43600
  %220 = icmp ult i64 %203, 44600
  %or.cond4 = and i1 %219, %220
  br i1 %or.cond4, label %221, label %225

; <label>:221:                                    ; preds = %218
  %222 = getelementptr inbounds %struct.intel8x0, %struct.intel8x0* %0, i32 0, i32 12
  %223 = load %struct.snd_ac97_bus*, %struct.snd_ac97_bus** %222, align 8
  %224 = getelementptr inbounds %struct.snd_ac97_bus, %struct.snd_ac97_bus* %223, i32 0, i32 6
  store i32 44100, i32* %224, align 4
  br label %240

; <label>:225:                                    ; preds = %218
  %226 = icmp ult i64 %203, 47500
  %227 = icmp ugt i64 %203, 48500
  %or.cond5 = or i1 %226, %227
  br i1 %or.cond5, label %228, label %240

; <label>:228:                                    ; preds = %225
  %229 = getelementptr inbounds %struct.intel8x0, %struct.intel8x0* %0, i32 0, i32 12
  %230 = load %struct.snd_ac97_bus*, %struct.snd_ac97_bus** %229, align 8
  %231 = getelementptr inbounds %struct.snd_ac97_bus, %struct.snd_ac97_bus* %230, i32 0, i32 6
  %232 = load i32, i32* %231, align 4
  %233 = mul i32 %232, 48000
  %234 = zext i32 %233 to i64
  %235 = udiv i64 %234, %203
  %236 = trunc i64 %235 to i32
  %237 = getelementptr inbounds %struct.intel8x0, %struct.intel8x0* %0, i32 0, i32 12
  %238 = load %struct.snd_ac97_bus*, %struct.snd_ac97_bus** %237, align 8
  %239 = getelementptr inbounds %struct.snd_ac97_bus, %struct.snd_ac97_bus* %238, i32 0, i32 6
  store i32 %236, i32* %239, align 4
  br label %240

; <label>:240:                                    ; preds = %221, %225, %228, %214, %179
  %241 = getelementptr inbounds %struct.intel8x0, %struct.intel8x0* %0, i32 0, i32 5
  %242 = load %struct.snd_card*, %struct.snd_card** %241, align 8
  %243 = getelementptr inbounds %struct.snd_card, %struct.snd_card* %242, i32 0, i32 29
  %244 = load %struct.device*, %struct.device** %243, align 8
  %245 = getelementptr inbounds %struct.intel8x0, %struct.intel8x0* %0, i32 0, i32 12
  %246 = load %struct.snd_ac97_bus*, %struct.snd_ac97_bus** %245, align 8
  %247 = getelementptr inbounds %struct.snd_ac97_bus, %struct.snd_ac97_bus* %246, i32 0, i32 6
  %248 = load i32, i32* %247, align 4
  call void (%struct.device*, i8*, ...) @_dev_info(%struct.device* %244, i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.133, i32 0, i32 0), i32 %248)
  %249 = getelementptr inbounds %struct.intel8x0, %struct.intel8x0* %0, i32 0, i32 13
  %250 = getelementptr inbounds [3 x %struct.snd_ac97*], [3 x %struct.snd_ac97*]* %249, i64 0, i64 0
  %251 = load %struct.snd_ac97*, %struct.snd_ac97** %250, align 8
  %252 = call i32 @snd_ac97_update_power(%struct.snd_ac97* %251, i32 44, i32 0)
  br label %253

; <label>:253:                                    ; preds = %1, %240, %42, %21
  ret void
}

declare i32 @snd_card_register(%struct.snd_card*) #1

; Function Attrs: noinline nounwind uwtable
define internal void @pci_set_drvdata(%struct.pci_dev*, i8*) #0 {
  %3 = getelementptr inbounds %struct.pci_dev, %struct.pci_dev* %0, i32 0, i32 35
  call void @dev_set_drvdata(%struct.device* %3, i8* %1)
  ret void
}

declare %struct.snd_pci_quirk* @snd_pci_quirk_lookup(%struct.pci_dev*, %struct.snd_pci_quirk*) #1

; Function Attrs: noinline nounwind uwtable
define internal i32 @snd_intel8x0_dev_free(%struct.snd_device*) #0 {
  %2 = getelementptr inbounds %struct.snd_device, %struct.snd_device* %0, i32 0, i32 4
  %3 = load i8*, i8** %2, align 8
  %4 = bitcast i8* %3 to %struct.intel8x0*
  %5 = call i32 @snd_intel8x0_free(%struct.intel8x0* %4)
  ret i32 %5
}

declare i32 @pci_enable_device(%struct.pci_dev*) #1

; Function Attrs: noinline nounwind uwtable
define internal i8* @kzalloc(i64, i32) #0 {
  %3 = or i32 %1, 32768
  %4 = call noalias i8* @__kmalloc(i64 %0, i32 %3) #3
  ret i8* %4
}

declare void @pci_disable_device(%struct.pci_dev*) #1

; Function Attrs: argmemonly nounwind
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* nocapture writeonly, i8* nocapture readonly, i64, i32, i1) #2

; Function Attrs: noinline nounwind uwtable
define internal i32 @snd_intel8x0_inside_vm(%struct.pci_dev*) #0 {
  %2 = load i32, i32* @inside_vm, align 4
  %3 = icmp sge i32 %2, 0
  br i1 %3, label %4, label %7

; <label>:4:                                      ; preds = %1
  %5 = icmp ne i32 %2, 0
  %6 = select i1 %5, i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.32, i32 0, i32 0), i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.33, i32 0, i32 0)
  br label %22

; <label>:7:                                      ; preds = %1
  %8 = getelementptr inbounds %struct.pci_dev, %struct.pci_dev* %0, i32 0, i32 9
  %9 = load i16, i16* %8, align 8
  %10 = zext i16 %9 to i32
  %11 = icmp eq i32 %10, 6900
  br i1 %11, label %12, label %17

; <label>:12:                                     ; preds = %7
  %13 = getelementptr inbounds %struct.pci_dev, %struct.pci_dev* %0, i32 0, i32 10
  %14 = load i16, i16* %13, align 2
  %15 = zext i16 %14 to i32
  %16 = icmp eq i32 %15, 4352
  br i1 %16, label %22, label %17

; <label>:17:                                     ; preds = %12, %7
  %18 = getelementptr inbounds %struct.pci_dev, %struct.pci_dev* %0, i32 0, i32 9
  %19 = load i16, i16* %18, align 8
  %20 = zext i16 %19 to i32
  %21 = icmp eq i32 %20, 6840
  %. = select i1 %21, i32 1, i32 0
  %.4 = select i1 %21, i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.35, i32 0, i32 0), i8* null
  br label %22

; <label>:22:                                     ; preds = %17, %12, %4
  %.23 = phi i32 [ %2, %4 ], [ %., %17 ], [ 1, %12 ]
  %.2 = phi i8* [ %6, %4 ], [ %.4, %17 ], [ getelementptr inbounds ([11 x i8], [11 x i8]* @.str.34, i32 0, i32 0), %12 ]
  %23 = icmp ne i8* %.2, null
  br i1 %23, label %24, label %26

; <label>:24:                                     ; preds = %22
  %25 = getelementptr inbounds %struct.pci_dev, %struct.pci_dev* %0, i32 0, i32 35
  call void (%struct.device*, i8*, ...) @_dev_info(%struct.device* %25, i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.36, i32 0, i32 0), i8* %.2)
  br label %26

; <label>:26:                                     ; preds = %24, %22
  ret i32 %.23
}

declare i32 @pci_request_regions(%struct.pci_dev*, i8*) #1

declare void @kfree(i8*) #1

declare i8* @pci_iomap(%struct.pci_dev*, i32, i64) #1

declare void @dev_err(%struct.device*, i8*, ...) #1

; Function Attrs: noinline nounwind uwtable
define internal i32 @snd_intel8x0_free(%struct.intel8x0*) #0 {
  %2 = alloca i32, align 4
  %3 = getelementptr inbounds %struct.intel8x0, %struct.intel8x0* %0, i32 0, i32 1
  %4 = load i32, i32* %3, align 4
  %5 = icmp slt i32 %4, 0
  br i1 %5, label %48, label %6

; <label>:6:                                      ; preds = %1, %10
  %.0 = phi i32 [ %18, %10 ], [ 0, %1 ]
  %7 = getelementptr inbounds %struct.intel8x0, %struct.intel8x0* %0, i32 0, i32 21
  %8 = load i32, i32* %7, align 4
  %9 = icmp ult i32 %.0, %8
  br i1 %9, label %10, label %19

; <label>:10:                                     ; preds = %6
  %11 = getelementptr inbounds %struct.intel8x0, %struct.intel8x0* %0, i32 0, i32 8
  %12 = zext i32 %.0 to i64
  %13 = getelementptr inbounds [6 x %struct.ichdev], [6 x %struct.ichdev]* %11, i64 0, i64 %12
  %14 = getelementptr inbounds %struct.ichdev, %struct.ichdev* %13, i32 0, i32 1
  %15 = load i64, i64* %14, align 8
  %16 = add i64 11, %15
  %17 = trunc i64 %16 to i32
  call void @iputbyte(%struct.intel8x0* %0, i32 %17, i8 zeroext 0)
  %18 = add i32 %.0, 1
  br label %6

; <label>:19:                                     ; preds = %6, %23
  %.1 = phi i32 [ %31, %23 ], [ 0, %6 ]
  %20 = getelementptr inbounds %struct.intel8x0, %struct.intel8x0* %0, i32 0, i32 21
  %21 = load i32, i32* %20, align 4
  %22 = icmp ult i32 %.1, %21
  br i1 %22, label %23, label %32

; <label>:23:                                     ; preds = %19
  %24 = getelementptr inbounds %struct.intel8x0, %struct.intel8x0* %0, i32 0, i32 8
  %25 = zext i32 %.1 to i64
  %26 = getelementptr inbounds [6 x %struct.ichdev], [6 x %struct.ichdev]* %24, i64 0, i64 %25
  %27 = getelementptr inbounds %struct.ichdev, %struct.ichdev* %26, i32 0, i32 1
  %28 = load i64, i64* %27, align 8
  %29 = add i64 11, %28
  %30 = trunc i64 %29 to i32
  call void @iputbyte(%struct.intel8x0* %0, i32 %30, i8 zeroext 2)
  %31 = add i32 %.1, 1
  br label %19

; <label>:32:                                     ; preds = %19
  %33 = getelementptr inbounds %struct.intel8x0, %struct.intel8x0* %0, i32 0, i32 0
  %34 = load i32, i32* %33, align 8
  %35 = icmp ne i32 %34, 4
  %36 = load i32, i32* @spdif_aclink, align 4
  %37 = icmp ne i32 %36, 0
  %or.cond = or i1 %35, %37
  br i1 %or.cond, label %48, label %38

; <label>:38:                                     ; preds = %32
  %39 = getelementptr inbounds %struct.intel8x0, %struct.intel8x0* %0, i32 0, i32 4
  %40 = load %struct.pci_dev*, %struct.pci_dev** %39, align 8
  %41 = call i32 @pci_read_config_dword(%struct.pci_dev* %40, i32 76, i32* %2)
  %42 = load i32, i32* %2, align 4
  %43 = and i32 %42, -16777217
  store i32 %43, i32* %2, align 4
  %44 = getelementptr inbounds %struct.intel8x0, %struct.intel8x0* %0, i32 0, i32 4
  %45 = load %struct.pci_dev*, %struct.pci_dev** %44, align 8
  %46 = load i32, i32* %2, align 4
  %47 = call i32 @pci_write_config_dword(%struct.pci_dev* %45, i32 76, i32 %46)
  br label %48

; <label>:48:                                     ; preds = %38, %32, %1
  %49 = getelementptr inbounds %struct.intel8x0, %struct.intel8x0* %0, i32 0, i32 1
  %50 = load i32, i32* %49, align 4
  %51 = icmp sge i32 %50, 0
  br i1 %51, label %52, label %57

; <label>:52:                                     ; preds = %48
  %53 = getelementptr inbounds %struct.intel8x0, %struct.intel8x0* %0, i32 0, i32 1
  %54 = load i32, i32* %53, align 4
  %55 = bitcast %struct.intel8x0* %0 to i8*
  %56 = call i8* @free_irq(i32 %54, i8* %55)
  br label %57

; <label>:57:                                     ; preds = %52, %48
  %58 = getelementptr inbounds %struct.intel8x0, %struct.intel8x0* %0, i32 0, i32 22
  %59 = getelementptr inbounds %struct.snd_dma_buffer, %struct.snd_dma_buffer* %58, i32 0, i32 1
  %60 = load i8*, i8** %59, align 8
  %61 = icmp ne i8* %60, null
  br i1 %61, label %62, label %70

; <label>:62:                                     ; preds = %57
  %63 = getelementptr inbounds %struct.intel8x0, %struct.intel8x0* %0, i32 0, i32 9
  %64 = load i16, i16* %63, align 8
  %65 = lshr i16 %64, 8
  %66 = and i16 %65, 1
  %67 = zext i16 %66 to i32
  %68 = icmp ne i32 %67, 0
  %69 = getelementptr inbounds %struct.intel8x0, %struct.intel8x0* %0, i32 0, i32 22
  call void @snd_dma_free_pages(%struct.snd_dma_buffer* %69)
  br label %70

; <label>:70:                                     ; preds = %62, %57
  %71 = getelementptr inbounds %struct.intel8x0, %struct.intel8x0* %0, i32 0, i32 2
  %72 = load i8*, i8** %71, align 8
  %73 = icmp ne i8* %72, null
  br i1 %73, label %74, label %79

; <label>:74:                                     ; preds = %70
  %75 = getelementptr inbounds %struct.intel8x0, %struct.intel8x0* %0, i32 0, i32 4
  %76 = load %struct.pci_dev*, %struct.pci_dev** %75, align 8
  %77 = getelementptr inbounds %struct.intel8x0, %struct.intel8x0* %0, i32 0, i32 2
  %78 = load i8*, i8** %77, align 8
  call void @pci_iounmap(%struct.pci_dev* %76, i8* %78)
  br label %79

; <label>:79:                                     ; preds = %74, %70
  %80 = getelementptr inbounds %struct.intel8x0, %struct.intel8x0* %0, i32 0, i32 3
  %81 = load i8*, i8** %80, align 8
  %82 = icmp ne i8* %81, null
  br i1 %82, label %83, label %88

; <label>:83:                                     ; preds = %79
  %84 = getelementptr inbounds %struct.intel8x0, %struct.intel8x0* %0, i32 0, i32 4
  %85 = load %struct.pci_dev*, %struct.pci_dev** %84, align 8
  %86 = getelementptr inbounds %struct.intel8x0, %struct.intel8x0* %0, i32 0, i32 3
  %87 = load i8*, i8** %86, align 8
  call void @pci_iounmap(%struct.pci_dev* %85, i8* %87)
  br label %88

; <label>:88:                                     ; preds = %83, %79
  %89 = getelementptr inbounds %struct.intel8x0, %struct.intel8x0* %0, i32 0, i32 4
  %90 = load %struct.pci_dev*, %struct.pci_dev** %89, align 8
  call void @pci_release_regions(%struct.pci_dev* %90)
  %91 = getelementptr inbounds %struct.intel8x0, %struct.intel8x0* %0, i32 0, i32 4
  %92 = load %struct.pci_dev*, %struct.pci_dev** %91, align 8
  call void @pci_disable_device(%struct.pci_dev* %92)
  %93 = bitcast %struct.intel8x0* %0 to i8*
  call void @kfree(i8* %93)
  ret i32 0
}

declare i32 @snd_dma_alloc_pages(i32, %struct.device*, i64, %struct.snd_dma_buffer*) #1

declare void @pci_set_master(%struct.pci_dev*) #1

; Function Attrs: noinline nounwind uwtable
define internal i32 @snd_intel8x0_chip_init(%struct.intel8x0*, i32) #0 {
  %3 = getelementptr inbounds %struct.intel8x0, %struct.intel8x0* %0, i32 0, i32 0
  %4 = load i32, i32* %3, align 8
  %5 = icmp ne i32 %4, 3
  br i1 %5, label %6, label %11

; <label>:6:                                      ; preds = %2
  %7 = call i32 @snd_intel8x0_ich_chip_init(%struct.intel8x0* %0, i32 %1)
  %8 = icmp slt i32 %7, 0
  br i1 %8, label %84, label %9

; <label>:9:                                      ; preds = %6
  %10 = call zeroext i16 @iagetword(%struct.intel8x0* %0, i32 0)
  br label %14

; <label>:11:                                     ; preds = %2
  %12 = call i32 @snd_intel8x0_ali_chip_init(%struct.intel8x0* %0, i32 %1)
  %13 = icmp slt i32 %12, 0
  br i1 %13, label %84, label %14

; <label>:14:                                     ; preds = %9, %11, %18
  %.02 = phi i32 [ %26, %18 ], [ 0, %11 ], [ 0, %9 ]
  %15 = getelementptr inbounds %struct.intel8x0, %struct.intel8x0* %0, i32 0, i32 21
  %16 = load i32, i32* %15, align 4
  %17 = icmp ult i32 %.02, %16
  br i1 %17, label %18, label %27

; <label>:18:                                     ; preds = %14
  %19 = getelementptr inbounds %struct.intel8x0, %struct.intel8x0* %0, i32 0, i32 8
  %20 = zext i32 %.02 to i64
  %21 = getelementptr inbounds [6 x %struct.ichdev], [6 x %struct.ichdev]* %19, i64 0, i64 %20
  %22 = getelementptr inbounds %struct.ichdev, %struct.ichdev* %21, i32 0, i32 1
  %23 = load i64, i64* %22, align 8
  %24 = add i64 11, %23
  %25 = trunc i64 %24 to i32
  call void @iputbyte(%struct.intel8x0* %0, i32 %25, i8 zeroext 0)
  %26 = add i32 %.02, 1
  br label %14

; <label>:27:                                     ; preds = %14, %31
  %.1 = phi i32 [ %39, %31 ], [ 0, %14 ]
  %28 = getelementptr inbounds %struct.intel8x0, %struct.intel8x0* %0, i32 0, i32 21
  %29 = load i32, i32* %28, align 4
  %30 = icmp ult i32 %.1, %29
  br i1 %30, label %31, label %40

; <label>:31:                                     ; preds = %27
  %32 = getelementptr inbounds %struct.intel8x0, %struct.intel8x0* %0, i32 0, i32 8
  %33 = zext i32 %.1 to i64
  %34 = getelementptr inbounds [6 x %struct.ichdev], [6 x %struct.ichdev]* %32, i64 0, i64 %33
  %35 = getelementptr inbounds %struct.ichdev, %struct.ichdev* %34, i32 0, i32 1
  %36 = load i64, i64* %35, align 8
  %37 = add i64 11, %36
  %38 = trunc i64 %37 to i32
  call void @iputbyte(%struct.intel8x0* %0, i32 %38, i8 zeroext 2)
  %39 = add i32 %.1, 1
  br label %27

; <label>:40:                                     ; preds = %27, %64
  %.2 = phi i32 [ %65, %64 ], [ 0, %27 ]
  %41 = getelementptr inbounds %struct.intel8x0, %struct.intel8x0* %0, i32 0, i32 21
  %42 = load i32, i32* %41, align 4
  %43 = icmp ult i32 %.2, %42
  br i1 %43, label %44, label %66

; <label>:44:                                     ; preds = %46, %40
  %.01 = phi i32 [ 100000, %40 ], [ %45, %46 ]
  %45 = add i32 %.01, -1
  %cond = icmp eq i32 %45, 0
  br i1 %cond, label %59, label %46

; <label>:46:                                     ; preds = %44
  %47 = getelementptr inbounds %struct.intel8x0, %struct.intel8x0* %0, i32 0, i32 8
  %48 = zext i32 %.2 to i64
  %49 = getelementptr inbounds [6 x %struct.ichdev], [6 x %struct.ichdev]* %47, i64 0, i64 %48
  %50 = getelementptr inbounds %struct.ichdev, %struct.ichdev* %49, i32 0, i32 1
  %51 = load i64, i64* %50, align 8
  %52 = add i64 11, %51
  %53 = trunc i64 %52 to i32
  %54 = call zeroext i8 @igetbyte(%struct.intel8x0* %0, i32 %53)
  %55 = zext i8 %54 to i32
  %56 = and i32 %55, 2
  %57 = icmp eq i32 %56, 0
  br i1 %57, label %.loopexit, label %44

.loopexit:                                        ; preds = %46
  %58 = icmp eq i32 %45, 0
  br i1 %58, label %59, label %64

; <label>:59:                                     ; preds = %44, %.loopexit
  %60 = getelementptr inbounds %struct.intel8x0, %struct.intel8x0* %0, i32 0, i32 5
  %61 = load %struct.snd_card*, %struct.snd_card** %60, align 8
  %62 = getelementptr inbounds %struct.snd_card, %struct.snd_card* %61, i32 0, i32 29
  %63 = load %struct.device*, %struct.device** %62, align 8
  call void (%struct.device*, i8*, ...) @dev_err(%struct.device* %63, i8* getelementptr inbounds ([28 x i8], [28 x i8]* @.str.37, i32 0, i32 0))
  br label %64

; <label>:64:                                     ; preds = %.loopexit, %59
  %65 = add i32 %.2, 1
  br label %40

; <label>:66:                                     ; preds = %40, %70
  %.3 = phi i32 [ %83, %70 ], [ 0, %40 ]
  %67 = getelementptr inbounds %struct.intel8x0, %struct.intel8x0* %0, i32 0, i32 21
  %68 = load i32, i32* %67, align 4
  %69 = icmp ult i32 %.3, %68
  br i1 %69, label %70, label %84

; <label>:70:                                     ; preds = %66
  %71 = getelementptr inbounds %struct.intel8x0, %struct.intel8x0* %0, i32 0, i32 8
  %72 = zext i32 %.3 to i64
  %73 = getelementptr inbounds [6 x %struct.ichdev], [6 x %struct.ichdev]* %71, i64 0, i64 %72
  %74 = getelementptr inbounds %struct.ichdev, %struct.ichdev* %73, i32 0, i32 1
  %75 = load i64, i64* %74, align 8
  %76 = add i64 0, %75
  %77 = trunc i64 %76 to i32
  %78 = getelementptr inbounds %struct.intel8x0, %struct.intel8x0* %0, i32 0, i32 8
  %79 = zext i32 %.3 to i64
  %80 = getelementptr inbounds [6 x %struct.ichdev], [6 x %struct.ichdev]* %78, i64 0, i64 %79
  %81 = getelementptr inbounds %struct.ichdev, %struct.ichdev* %80, i32 0, i32 3
  %82 = load i32, i32* %81, align 8
  call void @iputdword(%struct.intel8x0* %0, i32 %77, i32 %82)
  %83 = add i32 %.3, 1
  br label %66

; <label>:84:                                     ; preds = %66, %11, %6
  %.0 = phi i32 [ %7, %6 ], [ %12, %11 ], [ 0, %66 ]
  ret i32 %.0
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @request_irq(i32, i32 (i32, i8*)*, i64, i8*, i8*) #0 {
  %6 = call i32 @request_threaded_irq(i32 %0, i32 (i32, i8*)* %1, i32 (i32, i8*)* null, i64 %2, i8* %3, i8* %4)
  ret i32 %6
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @snd_intel8x0_interrupt(i32, i8*) #0 {
  %3 = bitcast i8* %1 to %struct.intel8x0*
  %4 = getelementptr inbounds %struct.intel8x0, %struct.intel8x0* %3, i32 0, i32 23
  %5 = load i32, i32* %4, align 8
  %6 = call i32 @igetdword(%struct.intel8x0* %3, i32 %5)
  %7 = icmp eq i32 %6, -1
  br i1 %7, label %48, label %8

; <label>:8:                                      ; preds = %2
  %9 = getelementptr inbounds %struct.intel8x0, %struct.intel8x0* %3, i32 0, i32 24
  %10 = load i32, i32* %9, align 4
  %11 = and i32 %6, %10
  %12 = icmp eq i32 %11, 0
  br i1 %12, label %13, label %27

; <label>:13:                                     ; preds = %8
  %14 = icmp ne i32 %6, 0
  br i1 %14, label %15, label %24

; <label>:15:                                     ; preds = %13
  %16 = getelementptr inbounds %struct.intel8x0, %struct.intel8x0* %3, i32 0, i32 23
  %17 = load i32, i32* %16, align 8
  call void @iputdword(%struct.intel8x0* %3, i32 %17, i32 %6)
  %18 = getelementptr inbounds %struct.intel8x0, %struct.intel8x0* %3, i32 0, i32 9
  %19 = load i16, i16* %18, align 8
  %20 = lshr i16 %19, 9
  %21 = and i16 %20, 1
  %22 = zext i16 %21 to i32
  %23 = icmp ne i32 %22, 0
  %. = select i1 %23, i32 %6, i32 0
  br label %24

; <label>:24:                                     ; preds = %15, %13
  %.1 = phi i32 [ %., %15 ], [ %6, %13 ]
  %25 = icmp ne i32 %.1, 0
  %26 = select i1 %25, i32 1, i32 0
  br label %48

; <label>:27:                                     ; preds = %8, %40
  %.01 = phi i32 [ %41, %40 ], [ 0, %8 ]
  %28 = getelementptr inbounds %struct.intel8x0, %struct.intel8x0* %3, i32 0, i32 21
  %29 = load i32, i32* %28, align 4
  %30 = icmp ult i32 %.01, %29
  br i1 %30, label %31, label %42

; <label>:31:                                     ; preds = %27
  %32 = getelementptr inbounds %struct.intel8x0, %struct.intel8x0* %3, i32 0, i32 8
  %33 = zext i32 %.01 to i64
  %34 = getelementptr inbounds [6 x %struct.ichdev], [6 x %struct.ichdev]* %32, i64 0, i64 %33
  %35 = getelementptr inbounds %struct.ichdev, %struct.ichdev* %34, i32 0, i32 21
  %36 = load i32, i32* %35, align 8
  %37 = and i32 %6, %36
  %38 = icmp ne i32 %37, 0
  br i1 %38, label %39, label %40

; <label>:39:                                     ; preds = %31
  call void @snd_intel8x0_update(%struct.intel8x0* %3, %struct.ichdev* %34)
  br label %40

; <label>:40:                                     ; preds = %31, %39
  %41 = add i32 %.01, 1
  br label %27

; <label>:42:                                     ; preds = %27
  %43 = getelementptr inbounds %struct.intel8x0, %struct.intel8x0* %3, i32 0, i32 23
  %44 = load i32, i32* %43, align 8
  %45 = getelementptr inbounds %struct.intel8x0, %struct.intel8x0* %3, i32 0, i32 24
  %46 = load i32, i32* %45, align 4
  %47 = and i32 %6, %46
  call void @iputdword(%struct.intel8x0* %3, i32 %44, i32 %47)
  br label %48

; <label>:48:                                     ; preds = %2, %42, %24
  %.0 = phi i32 [ %26, %24 ], [ 1, %42 ], [ 0, %2 ]
  ret i32 %.0
}

declare i32 @snd_device_new(%struct.snd_card*, i32, i8*, %struct.snd_device_ops*) #1

declare noalias i8* @__kmalloc(i64, i32) #1

declare void @_dev_info(%struct.device*, i8*, ...) #1

; Function Attrs: noinline nounwind uwtable
define internal void @iputbyte(%struct.intel8x0*, i32, i8 zeroext) #0 {
  %4 = getelementptr inbounds %struct.intel8x0, %struct.intel8x0* %0, i32 0, i32 3
  %5 = load i8*, i8** %4, align 8
  %6 = zext i32 %1 to i64
  %7 = getelementptr i8, i8* %5, i64 %6
  call void @iowrite8(i8 zeroext %2, i8* %7)
  ret void
}

declare i32 @pci_read_config_dword(%struct.pci_dev*, i32, i32*) #1

declare i32 @pci_write_config_dword(%struct.pci_dev*, i32, i32) #1

declare i8* @free_irq(i32, i8*) #1

declare void @snd_dma_free_pages(%struct.snd_dma_buffer*) #1

declare void @pci_iounmap(%struct.pci_dev*, i8*) #1

declare void @pci_release_regions(%struct.pci_dev*) #1

declare void @iowrite8(i8 zeroext, i8*) #1

; Function Attrs: noinline nounwind uwtable
define internal i32 @snd_intel8x0_ich_chip_init(%struct.intel8x0*, i32) #0 {
  %3 = alloca i64, align 8
  %4 = alloca i64, align 8
  %5 = alloca i64, align 8
  %6 = alloca i64, align 8
  %7 = alloca i64, align 8
  %8 = alloca i64, align 8
  %9 = alloca i64, align 8
  %10 = alloca i64, align 8
  %11 = alloca i64, align 8
  %12 = alloca i64, align 8
  %13 = alloca i64, align 8
  %14 = alloca i64, align 8
  %15 = alloca i32, align 4
  %16 = getelementptr inbounds %struct.intel8x0, %struct.intel8x0* %0, i32 0, i32 0
  %17 = load i32, i32* %16, align 8
  %18 = icmp eq i32 %17, 4
  %19 = or i32 32992, 16
  %. = select i1 %18, i32 %19, i32 32992
  %20 = call i32 @igetdword(%struct.intel8x0* %0, i32 48)
  %21 = and i32 %20, %.
  call void @iputdword(%struct.intel8x0* %0, i32 48, i32 %21)
  %22 = call i32 @snd_intel8x0_ich_chip_reset(%struct.intel8x0* %0)
  %23 = icmp slt i32 %22, 0
  br i1 %23, label %143, label %24

; <label>:24:                                     ; preds = %2
  %25 = icmp ne i32 %1, 0
  br i1 %25, label %26, label %76

; <label>:26:                                     ; preds = %24
  %27 = load volatile i64, i64* @jiffies, align 64
  %28 = add i64 %27, 1000
  br label %29

; <label>:29:                                     ; preds = %39, %26
  %30 = call i32 @igetdword(%struct.intel8x0* %0, i32 48)
  %31 = getelementptr inbounds %struct.intel8x0, %struct.intel8x0* %0, i32 0, i32 18
  %32 = load i32, i32* %31, align 8
  %33 = and i32 %30, %32
  %cond = icmp eq i32 %33, 0
  br i1 %cond, label %34, label %52

; <label>:34:                                     ; preds = %29
  %35 = call i64 @schedule_timeout_uninterruptible(i64 1)
  %36 = icmp eq i64* %3, %4
  %37 = zext i1 %36 to i32
  %38 = icmp ne i32 1, 0
  br i1 %38, label %39, label %.loopexit

; <label>:39:                                     ; preds = %34
  %40 = icmp eq i64* %5, %6
  %41 = zext i1 %40 to i32
  %42 = load volatile i64, i64* @jiffies, align 64
  %43 = sub i64 %28, %42
  %44 = icmp sge i64 %43, 0
  br i1 %44, label %29, label %.loopexit

.loopexit:                                        ; preds = %34, %39
  %45 = icmp ne i32 %33, 0
  br i1 %45, label %52, label %46

; <label>:46:                                     ; preds = %.loopexit
  %47 = getelementptr inbounds %struct.intel8x0, %struct.intel8x0* %0, i32 0, i32 5
  %48 = load %struct.snd_card*, %struct.snd_card** %47, align 8
  %49 = getelementptr inbounds %struct.snd_card, %struct.snd_card* %48, i32 0, i32 29
  %50 = load %struct.device*, %struct.device** %49, align 8
  %51 = call i32 @igetdword(%struct.intel8x0* %0, i32 48)
  call void (%struct.device*, i8*, ...) @dev_err(%struct.device* %50, i8* getelementptr inbounds ([40 x i8], [40 x i8]* @.str.38, i32 0, i32 0), i32 %51)
  br label %143

; <label>:52:                                     ; preds = %29, %.loopexit
  %53 = load volatile i64, i64* @jiffies, align 64
  %54 = add i64 %53, 250
  br label %55

; <label>:55:                                     ; preds = %69, %52
  %.1 = phi i32 [ %33, %52 ], [ %75, %69 ]
  %56 = getelementptr inbounds %struct.intel8x0, %struct.intel8x0* %0, i32 0, i32 18
  %57 = load i32, i32* %56, align 8
  %58 = icmp ne i32 %.1, %57
  br i1 %58, label %59, label %.critedge

; <label>:59:                                     ; preds = %55
  %60 = icmp eq i64* %7, %8
  %61 = zext i1 %60 to i32
  %62 = icmp ne i32 1, 0
  br i1 %62, label %63, label %.critedge

; <label>:63:                                     ; preds = %59
  %64 = icmp eq i64* %9, %10
  %65 = zext i1 %64 to i32
  %66 = load volatile i64, i64* @jiffies, align 64
  %67 = sub i64 %54, %66
  %68 = icmp sge i64 %67, 0
  br i1 %68, label %69, label %.critedge

; <label>:69:                                     ; preds = %63
  %70 = call i64 @schedule_timeout_uninterruptible(i64 1)
  %71 = call i32 @igetdword(%struct.intel8x0* %0, i32 48)
  %72 = getelementptr inbounds %struct.intel8x0, %struct.intel8x0* %0, i32 0, i32 18
  %73 = load i32, i32* %72, align 8
  %74 = and i32 %71, %73
  %75 = or i32 %.1, %74
  br label %55

; <label>:76:                                     ; preds = %24, %97
  %.2 = phi i32 [ %.3, %97 ], [ 0, %24 ]
  %.01 = phi i32 [ %98, %97 ], [ 0, %24 ]
  %77 = getelementptr inbounds %struct.intel8x0, %struct.intel8x0* %0, i32 0, i32 16
  %78 = load i32, i32* %77, align 8
  %79 = icmp ult i32 %.01, %78
  br i1 %79, label %80, label %99

; <label>:80:                                     ; preds = %76
  %81 = getelementptr inbounds %struct.intel8x0, %struct.intel8x0* %0, i32 0, i32 13
  %82 = sext i32 %.01 to i64
  %83 = getelementptr inbounds [3 x %struct.snd_ac97*], [3 x %struct.snd_ac97*]* %81, i64 0, i64 %82
  %84 = load %struct.snd_ac97*, %struct.snd_ac97** %83, align 8
  %85 = icmp ne %struct.snd_ac97* %84, null
  br i1 %85, label %86, label %97

; <label>:86:                                     ; preds = %80
  %87 = getelementptr inbounds %struct.intel8x0, %struct.intel8x0* %0, i32 0, i32 17
  %88 = load i32*, i32** %87, align 8
  %89 = getelementptr inbounds %struct.intel8x0, %struct.intel8x0* %0, i32 0, i32 14
  %90 = sext i32 %.01 to i64
  %91 = getelementptr inbounds [3 x i32], [3 x i32]* %89, i64 0, i64 %90
  %92 = load i32, i32* %91, align 4
  %93 = zext i32 %92 to i64
  %94 = getelementptr inbounds i32, i32* %88, i64 %93
  %95 = load i32, i32* %94, align 4
  %96 = or i32 %.2, %95
  br label %97

; <label>:97:                                     ; preds = %80, %86
  %.3 = phi i32 [ %96, %86 ], [ %.2, %80 ]
  %98 = add nsw i32 %.01, 1
  br label %76

; <label>:99:                                     ; preds = %76
  %100 = load volatile i64, i64* @jiffies, align 64
  %101 = add i64 %100, 1000
  br label %102

; <label>:102:                                    ; preds = %113, %99
  %103 = call i32 @igetdword(%struct.intel8x0* %0, i32 48)
  %104 = getelementptr inbounds %struct.intel8x0, %struct.intel8x0* %0, i32 0, i32 18
  %105 = load i32, i32* %104, align 8
  %106 = and i32 %103, %105
  %107 = icmp eq i32 %.2, %106
  br i1 %107, label %.critedge, label %108

; <label>:108:                                    ; preds = %102
  %109 = call i64 @schedule_timeout_uninterruptible(i64 1)
  %110 = icmp eq i64* %11, %12
  %111 = zext i1 %110 to i32
  %112 = icmp ne i32 1, 0
  br i1 %112, label %113, label %.critedge

; <label>:113:                                    ; preds = %108
  %114 = icmp eq i64* %13, %14
  %115 = zext i1 %114 to i32
  %116 = load volatile i64, i64* @jiffies, align 64
  %117 = sub i64 %101, %116
  %118 = icmp sge i64 %117, 0
  br i1 %118, label %102, label %.critedge

.critedge:                                        ; preds = %108, %102, %113, %63, %55, %59
  %119 = getelementptr inbounds %struct.intel8x0, %struct.intel8x0* %0, i32 0, i32 0
  %120 = load i32, i32* %119, align 8
  %121 = icmp eq i32 %120, 2
  br i1 %121, label %122, label %127

; <label>:122:                                    ; preds = %.critedge
  %123 = call zeroext i16 @igetword(%struct.intel8x0* %0, i32 76)
  %124 = zext i16 %123 to i32
  %125 = or i32 %124, 1
  %126 = trunc i32 %125 to i16
  call void @iputword(%struct.intel8x0* %0, i32 76, i16 zeroext %126)
  br label %127

; <label>:127:                                    ; preds = %122, %.critedge
  %128 = getelementptr inbounds %struct.intel8x0, %struct.intel8x0* %0, i32 0, i32 0
  %129 = load i32, i32* %128, align 8
  %130 = icmp ne i32 %129, 4
  %131 = load i32, i32* @spdif_aclink, align 4
  %132 = icmp ne i32 %131, 0
  %or.cond = or i1 %130, %132
  br i1 %or.cond, label %143, label %133

; <label>:133:                                    ; preds = %127
  %134 = getelementptr inbounds %struct.intel8x0, %struct.intel8x0* %0, i32 0, i32 4
  %135 = load %struct.pci_dev*, %struct.pci_dev** %134, align 8
  %136 = call i32 @pci_read_config_dword(%struct.pci_dev* %135, i32 76, i32* %15)
  %137 = load i32, i32* %15, align 4
  %138 = or i32 %137, 16777216
  store i32 %138, i32* %15, align 4
  %139 = getelementptr inbounds %struct.intel8x0, %struct.intel8x0* %0, i32 0, i32 4
  %140 = load %struct.pci_dev*, %struct.pci_dev** %139, align 8
  %141 = load i32, i32* %15, align 4
  %142 = call i32 @pci_write_config_dword(%struct.pci_dev* %140, i32 76, i32 %141)
  br label %143

; <label>:143:                                    ; preds = %133, %127, %2, %46
  %.0 = phi i32 [ -5, %46 ], [ %22, %2 ], [ 0, %127 ], [ 0, %133 ]
  ret i32 %.0
}

; Function Attrs: noinline nounwind uwtable
define internal zeroext i16 @iagetword(%struct.intel8x0*, i32) #0 {
  %3 = getelementptr inbounds %struct.intel8x0, %struct.intel8x0* %0, i32 0, i32 2
  %4 = load i8*, i8** %3, align 8
  %5 = zext i32 %1 to i64
  %6 = getelementptr i8, i8* %4, i64 %5
  %7 = call i32 @ioread16(i8* %6)
  %8 = trunc i32 %7 to i16
  ret i16 %8
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @snd_intel8x0_ali_chip_init(%struct.intel8x0*, i32) #0 {
  %3 = call i32 @igetdword(%struct.intel8x0* %0, i32 0)
  %4 = and i32 %3, 2
  %5 = icmp eq i32 %4, 0
  %.sink = select i1 %5, i32 2, i32 1
  %6 = or i32 %3, %.sink
  %7 = and i32 %6, 2147483647
  call void @iputdword(%struct.intel8x0* %0, i32 0, i32 %7)
  br label %8

; <label>:8:                                      ; preds = %14, %2
  %.01 = phi i32 [ 0, %2 ], [ %16, %14 ]
  %9 = icmp slt i32 %.01, 500
  br i1 %9, label %10, label %17

; <label>:10:                                     ; preds = %8
  %11 = call i32 @igetdword(%struct.intel8x0* %0, i32 24)
  %12 = and i32 %11, 2
  %13 = icmp ne i32 %12, 0
  br i1 %13, label %14, label %23

; <label>:14:                                     ; preds = %10
  %15 = call i64 @schedule_timeout_uninterruptible(i64 1)
  %16 = add nsw i32 %.01, 1
  br label %8

; <label>:17:                                     ; preds = %8
  %18 = getelementptr inbounds %struct.intel8x0, %struct.intel8x0* %0, i32 0, i32 5
  %19 = load %struct.snd_card*, %struct.snd_card** %18, align 8
  %20 = getelementptr inbounds %struct.snd_card, %struct.snd_card* %19, i32 0, i32 29
  %21 = load %struct.device*, %struct.device** %20, align 8
  call void (%struct.device*, i8*, ...) @dev_err(%struct.device* %21, i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.40, i32 0, i32 0))
  %22 = icmp ne i32 %1, 0
  br i1 %22, label %33, label %23

; <label>:23:                                     ; preds = %10, %17, %29
  %.1 = phi i32 [ %32, %29 ], [ 0, %17 ], [ 0, %10 ]
  %24 = icmp slt i32 %.1, 500
  br i1 %24, label %25, label %.loopexit

; <label>:25:                                     ; preds = %23
  %26 = call i32 @igetdword(%struct.intel8x0* %0, i32 52)
  %27 = and i32 %26, 128
  %28 = icmp ne i32 %27, 0
  br i1 %28, label %.loopexit, label %29

; <label>:29:                                     ; preds = %25
  %30 = or i32 %26, 128
  call void @iputdword(%struct.intel8x0* %0, i32 52, i32 %30)
  %31 = call i64 @schedule_timeout_uninterruptible(i64 1)
  %32 = add nsw i32 %.1, 1
  br label %23

.loopexit:                                        ; preds = %23, %25
  call void @do_ali_reset(%struct.intel8x0* %0)
  br label %33

; <label>:33:                                     ; preds = %17, %.loopexit
  %.0 = phi i32 [ 0, %.loopexit ], [ -5, %17 ]
  ret i32 %.0
}

; Function Attrs: noinline nounwind uwtable
define internal zeroext i8 @igetbyte(%struct.intel8x0*, i32) #0 {
  %3 = getelementptr inbounds %struct.intel8x0, %struct.intel8x0* %0, i32 0, i32 3
  %4 = load i8*, i8** %3, align 8
  %5 = zext i32 %1 to i64
  %6 = getelementptr i8, i8* %4, i64 %5
  %7 = call i32 @ioread8(i8* %6)
  %8 = trunc i32 %7 to i8
  ret i8 %8
}

; Function Attrs: noinline nounwind uwtable
define internal void @iputdword(%struct.intel8x0*, i32, i32) #0 {
  %4 = getelementptr inbounds %struct.intel8x0, %struct.intel8x0* %0, i32 0, i32 3
  %5 = load i8*, i8** %4, align 8
  %6 = zext i32 %1 to i64
  %7 = getelementptr i8, i8* %5, i64 %6
  call void @iowrite32(i32 %2, i8* %7)
  ret void
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @igetdword(%struct.intel8x0*, i32) #0 {
  %3 = getelementptr inbounds %struct.intel8x0, %struct.intel8x0* %0, i32 0, i32 3
  %4 = load i8*, i8** %3, align 8
  %5 = zext i32 %1 to i64
  %6 = getelementptr i8, i8* %4, i64 %5
  %7 = call i32 @ioread32(i8* %6)
  ret i32 %7
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @snd_intel8x0_ich_chip_reset(%struct.intel8x0*) #0 {
  %2 = alloca i64, align 8
  %3 = alloca i64, align 8
  %4 = alloca i64, align 8
  %5 = alloca i64, align 8
  %6 = call i32 @igetdword(%struct.intel8x0* %0, i32 44)
  %7 = and i32 %6, -3145737
  %8 = and i32 %7, 2
  %9 = icmp eq i32 %8, 0
  %10 = select i1 %9, i32 2, i32 4
  %11 = or i32 %7, %10
  call void @iputdword(%struct.intel8x0* %0, i32 44, i32 %11)
  %12 = load volatile i64, i64* @jiffies, align 64
  %13 = add i64 %12, 250
  %14 = add i64 %13, 1
  br label %15

; <label>:15:                                     ; preds = %24, %1
  %16 = call i32 @igetdword(%struct.intel8x0* %0, i32 44)
  %17 = and i32 %16, 4
  %18 = icmp eq i32 %17, 0
  br i1 %18, label %35, label %19

; <label>:19:                                     ; preds = %15
  %20 = call i64 @schedule_timeout_uninterruptible(i64 1)
  %21 = icmp eq i64* %2, %3
  %22 = zext i1 %21 to i32
  %23 = icmp ne i32 1, 0
  br i1 %23, label %24, label %.critedge

; <label>:24:                                     ; preds = %19
  %25 = icmp eq i64* %4, %5
  %26 = zext i1 %25 to i32
  %27 = load volatile i64, i64* @jiffies, align 64
  %28 = sub i64 %14, %27
  %29 = icmp sge i64 %28, 0
  br i1 %29, label %15, label %.critedge

.critedge:                                        ; preds = %19, %24
  %30 = getelementptr inbounds %struct.intel8x0, %struct.intel8x0* %0, i32 0, i32 5
  %31 = load %struct.snd_card*, %struct.snd_card** %30, align 8
  %32 = getelementptr inbounds %struct.snd_card, %struct.snd_card* %31, i32 0, i32 29
  %33 = load %struct.device*, %struct.device** %32, align 8
  %34 = call i32 @igetdword(%struct.intel8x0* %0, i32 44)
  call void (%struct.device*, i8*, ...) @dev_err(%struct.device* %33, i8* getelementptr inbounds ([44 x i8], [44 x i8]* @.str.39, i32 0, i32 0), i32 %34)
  br label %35

; <label>:35:                                     ; preds = %15, %.critedge
  %.0 = phi i32 [ -5, %.critedge ], [ 0, %15 ]
  ret i32 %.0
}

declare i64 @schedule_timeout_uninterruptible(i64) #1

; Function Attrs: noinline nounwind uwtable
define internal void @iputword(%struct.intel8x0*, i32, i16 zeroext) #0 {
  %4 = getelementptr inbounds %struct.intel8x0, %struct.intel8x0* %0, i32 0, i32 3
  %5 = load i8*, i8** %4, align 8
  %6 = zext i32 %1 to i64
  %7 = getelementptr i8, i8* %5, i64 %6
  call void @iowrite16(i16 zeroext %2, i8* %7)
  ret void
}

; Function Attrs: noinline nounwind uwtable
define internal zeroext i16 @igetword(%struct.intel8x0*, i32) #0 {
  %3 = getelementptr inbounds %struct.intel8x0, %struct.intel8x0* %0, i32 0, i32 3
  %4 = load i8*, i8** %3, align 8
  %5 = zext i32 %1 to i64
  %6 = getelementptr i8, i8* %4, i64 %5
  %7 = call i32 @ioread16(i8* %6)
  %8 = trunc i32 %7 to i16
  ret i16 %8
}

declare i32 @ioread32(i8*) #1

declare void @iowrite16(i16 zeroext, i8*) #1

declare i32 @ioread16(i8*) #1

; Function Attrs: noinline nounwind uwtable
define internal void @do_ali_reset(%struct.intel8x0*) #0 {
  call void @iputdword(%struct.intel8x0* %0, i32 0, i32 -2147483648)
  call void @iputdword(%struct.intel8x0* %0, i32 12, i32 -2088533117)
  call void @iputdword(%struct.intel8x0* %0, i32 28, i32 -2088533117)
  call void @iputdword(%struct.intel8x0* %0, i32 44, i32 -2088533117)
  call void @iputdword(%struct.intel8x0* %0, i32 16, i32 524290)
  call void @iputdword(%struct.intel8x0* %0, i32 20, i32 0)
  call void @iputdword(%struct.intel8x0* %0, i32 24, i32 0)
  ret void
}

declare i32 @ioread8(i8*) #1

declare void @iowrite32(i32, i8*) #1

declare i32 @request_threaded_irq(i32, i32 (i32, i8*)*, i32 (i32, i8*)*, i64, i8*, i8*) #1

; Function Attrs: noinline nounwind uwtable
define internal void @snd_intel8x0_update(%struct.intel8x0*, %struct.ichdev*) #0 {
  %3 = alloca i64, align 8
  %4 = alloca i64, align 8
  %5 = getelementptr inbounds %struct.ichdev, %struct.ichdev* %1, i32 0, i32 1
  %6 = load i64, i64* %5, align 8
  %7 = icmp eq i64* %3, %4
  %8 = zext i1 %7 to i32
  %9 = getelementptr inbounds %struct.intel8x0, %struct.intel8x0* %0, i32 0, i32 20
  %10 = getelementptr inbounds %struct.spinlock, %struct.spinlock* %9, i32 0, i32 0
  %11 = bitcast %union.anon.1* %10 to %struct.raw_spinlock*
  %12 = call i64 @_raw_spin_lock_irqsave(%struct.raw_spinlock* %11)
  %13 = getelementptr inbounds %struct.ichdev, %struct.ichdev* %1, i32 0, i32 19
  %14 = load i32, i32* %13, align 8
  %15 = zext i32 %14 to i64
  %16 = add i64 %6, %15
  %17 = trunc i64 %16 to i32
  %18 = call zeroext i8 @igetbyte(%struct.intel8x0* %0, i32 %17)
  %19 = zext i8 %18 to i32
  %20 = add i64 %6, 4
  %21 = trunc i64 %20 to i32
  %22 = call zeroext i8 @igetbyte(%struct.intel8x0* %0, i32 %21)
  %23 = zext i8 %22 to i32
  %24 = and i32 %19, 8
  %25 = icmp ne i32 %24, 0
  br i1 %25, label %26, label %42

; <label>:26:                                     ; preds = %2
  %27 = getelementptr inbounds %struct.ichdev, %struct.ichdev* %1, i32 0, i32 15
  %28 = load i32, i32* %27, align 8
  %29 = icmp eq i32 %23, %28
  %30 = getelementptr inbounds %struct.ichdev, %struct.ichdev* %1, i32 0, i32 15
  %31 = load i32, i32* %30, align 8
  br i1 %29, label %32, label %37

; <label>:32:                                     ; preds = %26
  %33 = add nsw i32 %31, 1
  store i32 %33, i32* %30, align 8
  %34 = getelementptr inbounds %struct.ichdev, %struct.ichdev* %1, i32 0, i32 15
  %35 = load i32, i32* %34, align 8
  %36 = and i32 %35, 31
  store i32 %36, i32* %34, align 8
  br label %42

; <label>:37:                                     ; preds = %26
  %38 = sub nsw i32 %23, %31
  %39 = icmp slt i32 %38, 0
  %40 = add nsw i32 %38, 32
  %. = select i1 %39, i32 %40, i32 %38
  %41 = getelementptr inbounds %struct.ichdev, %struct.ichdev* %1, i32 0, i32 15
  store i32 %23, i32* %41, align 8
  br label %42

; <label>:42:                                     ; preds = %32, %37, %2
  %.2 = phi i32 [ 0, %2 ], [ 1, %32 ], [ %., %37 ]
  %43 = getelementptr inbounds %struct.ichdev, %struct.ichdev* %1, i32 0, i32 8
  %44 = load i32, i32* %43, align 4
  %45 = mul i32 %.2, %44
  %46 = getelementptr inbounds %struct.ichdev, %struct.ichdev* %1, i32 0, i32 9
  %47 = load i32, i32* %46, align 8
  %48 = add i32 %47, %45
  store i32 %48, i32* %46, align 8
  %49 = getelementptr inbounds %struct.intel8x0, %struct.intel8x0* %0, i32 0, i32 9
  %50 = load i16, i16* %49, align 8
  %51 = lshr i16 %50, 7
  %52 = and i16 %51, 1
  %53 = zext i16 %52 to i32
  %54 = icmp ne i32 %53, 0
  br i1 %54, label %61, label %55

; <label>:55:                                     ; preds = %42
  %56 = getelementptr inbounds %struct.ichdev, %struct.ichdev* %1, i32 0, i32 6
  %57 = load i32, i32* %56, align 4
  %58 = getelementptr inbounds %struct.ichdev, %struct.ichdev* %1, i32 0, i32 9
  %59 = load i32, i32* %58, align 8
  %60 = urem i32 %59, %57
  store i32 %60, i32* %58, align 8
  br label %61

; <label>:61:                                     ; preds = %55, %42
  %62 = getelementptr inbounds %struct.ichdev, %struct.ichdev* %1, i32 0, i32 13
  %63 = load i32, i32* %62, align 8
  %64 = add nsw i32 %63, %.2
  store i32 %64, i32* %62, align 8
  %65 = getelementptr inbounds %struct.ichdev, %struct.ichdev* %1, i32 0, i32 13
  %66 = load i32, i32* %65, align 8
  %67 = and i32 %66, 31
  store i32 %67, i32* %65, align 8
  %68 = add i64 %6, 5
  %69 = trunc i64 %68 to i32
  %70 = getelementptr inbounds %struct.ichdev, %struct.ichdev* %1, i32 0, i32 13
  %71 = load i32, i32* %70, align 8
  %72 = trunc i32 %71 to i8
  call void @iputbyte(%struct.intel8x0* %0, i32 %69, i8 zeroext %72)
  br label %73

; <label>:73:                                     ; preds = %107, %61
  %.03 = phi i32 [ 0, %61 ], [ %108, %107 ]
  %.0 = phi i32 [ 0, %61 ], [ %.1, %107 ]
  %74 = icmp slt i32 %.03, %.2
  br i1 %74, label %75, label %109

; <label>:75:                                     ; preds = %73
  %76 = getelementptr inbounds %struct.ichdev, %struct.ichdev* %1, i32 0, i32 14
  %77 = load i32, i32* %76, align 4
  %78 = add nsw i32 %77, 1
  store i32 %78, i32* %76, align 4
  %79 = getelementptr inbounds %struct.ichdev, %struct.ichdev* %1, i32 0, i32 12
  %80 = load i32, i32* %79, align 4
  %81 = getelementptr inbounds %struct.ichdev, %struct.ichdev* %1, i32 0, i32 14
  %82 = load i32, i32* %81, align 4
  %83 = srem i32 %82, %80
  store i32 %83, i32* %81, align 4
  %84 = getelementptr inbounds %struct.ichdev, %struct.ichdev* %1, i32 0, i32 5
  %85 = load i32, i32* %84, align 8
  %86 = getelementptr inbounds %struct.ichdev, %struct.ichdev* %1, i32 0, i32 14
  %87 = load i32, i32* %86, align 4
  %88 = getelementptr inbounds %struct.ichdev, %struct.ichdev* %1, i32 0, i32 8
  %89 = load i32, i32* %88, align 4
  %90 = mul i32 %87, %89
  %91 = add i32 %85, %90
  %92 = getelementptr inbounds %struct.ichdev, %struct.ichdev* %1, i32 0, i32 2
  %93 = load i32*, i32** %92, align 8
  %94 = getelementptr inbounds %struct.ichdev, %struct.ichdev* %1, i32 0, i32 13
  %95 = load i32, i32* %94, align 8
  %96 = mul nsw i32 %95, 2
  %97 = sext i32 %96 to i64
  %98 = getelementptr inbounds i32, i32* %93, i64 %97
  store i32 %91, i32* %98, align 4
  %99 = getelementptr inbounds %struct.ichdev, %struct.ichdev* %1, i32 0, i32 16
  %100 = load i32, i32* %99, align 4
  %101 = add nsw i32 %100, -1
  store i32 %101, i32* %99, align 4
  %102 = icmp eq i32 %101, 0
  br i1 %102, label %103, label %107

; <label>:103:                                    ; preds = %75
  %104 = getelementptr inbounds %struct.ichdev, %struct.ichdev* %1, i32 0, i32 17
  %105 = load i32, i32* %104, align 8
  %106 = getelementptr inbounds %struct.ichdev, %struct.ichdev* %1, i32 0, i32 16
  store i32 %105, i32* %106, align 4
  br label %107

; <label>:107:                                    ; preds = %75, %103
  %.1 = phi i32 [ 1, %103 ], [ %.0, %75 ]
  %108 = add nsw i32 %.03, 1
  br label %73

; <label>:109:                                    ; preds = %73
  %110 = getelementptr inbounds %struct.intel8x0, %struct.intel8x0* %0, i32 0, i32 20
  %111 = getelementptr inbounds %struct.spinlock, %struct.spinlock* %110, i32 0, i32 0
  %112 = bitcast %union.anon.1* %111 to %struct.raw_spinlock*
  call void @_raw_spin_unlock_irqrestore(%struct.raw_spinlock* %112, i64 %12) #3
  %113 = icmp ne i32 %.0, 0
  br i1 %113, label %114, label %121

; <label>:114:                                    ; preds = %109
  %115 = getelementptr inbounds %struct.ichdev, %struct.ichdev* %1, i32 0, i32 4
  %116 = load %struct.snd_pcm_substream*, %struct.snd_pcm_substream** %115, align 8
  %117 = icmp ne %struct.snd_pcm_substream* %116, null
  br i1 %117, label %118, label %121

; <label>:118:                                    ; preds = %114
  %119 = getelementptr inbounds %struct.ichdev, %struct.ichdev* %1, i32 0, i32 4
  %120 = load %struct.snd_pcm_substream*, %struct.snd_pcm_substream** %119, align 8
  call void @snd_pcm_period_elapsed(%struct.snd_pcm_substream* %120)
  br label %121

; <label>:121:                                    ; preds = %118, %114, %109
  %122 = getelementptr inbounds %struct.ichdev, %struct.ichdev* %1, i32 0, i32 19
  %123 = load i32, i32* %122, align 8
  %124 = zext i32 %123 to i64
  %125 = add i64 %6, %124
  %126 = trunc i64 %125 to i32
  %127 = and i32 %19, 28
  %128 = trunc i32 %127 to i8
  call void @iputbyte(%struct.intel8x0* %0, i32 %126, i8 zeroext %128)
  ret void
}

declare i64 @_raw_spin_lock_irqsave(%struct.raw_spinlock*) #1 section ".spinlock.text"

declare void @snd_pcm_period_elapsed(%struct.snd_pcm_substream*) #1

declare void @_raw_spin_unlock_irqrestore(%struct.raw_spinlock*, i64) #1 section ".spinlock.text"

; Function Attrs: noinline nounwind uwtable
define internal void @snd_intel8x0_codec_write(%struct.snd_ac97*, i16 zeroext, i16 zeroext) #0 {
  %4 = getelementptr inbounds %struct.snd_ac97, %struct.snd_ac97* %0, i32 0, i32 1
  %5 = load i8*, i8** %4, align 8
  %6 = bitcast i8* %5 to %struct.intel8x0*
  %7 = getelementptr inbounds %struct.snd_ac97, %struct.snd_ac97* %0, i32 0, i32 11
  %8 = load i16, i16* %7, align 8
  %9 = zext i16 %8 to i32
  %10 = call i32 @snd_intel8x0_codec_semaphore(%struct.intel8x0* %6, i32 %9)
  %11 = icmp slt i32 %10, 0
  br i1 %11, label %12, label %28

; <label>:12:                                     ; preds = %3
  %13 = getelementptr inbounds %struct.intel8x0, %struct.intel8x0* %6, i32 0, i32 9
  %14 = load i16, i16* %13, align 8
  %15 = lshr i16 %14, 5
  %16 = and i16 %15, 1
  %17 = zext i16 %16 to i32
  %18 = icmp ne i32 %17, 0
  br i1 %18, label %28, label %19

; <label>:19:                                     ; preds = %12
  %20 = getelementptr inbounds %struct.intel8x0, %struct.intel8x0* %6, i32 0, i32 5
  %21 = load %struct.snd_card*, %struct.snd_card** %20, align 8
  %22 = getelementptr inbounds %struct.snd_card, %struct.snd_card* %21, i32 0, i32 29
  %23 = load %struct.device*, %struct.device** %22, align 8
  %24 = getelementptr inbounds %struct.snd_ac97, %struct.snd_ac97* %0, i32 0, i32 11
  %25 = load i16, i16* %24, align 8
  %26 = zext i16 %25 to i32
  %27 = zext i16 %1 to i32
  call void (%struct.device*, i8*, ...) @dev_err(%struct.device* %23, i8* getelementptr inbounds ([58 x i8], [58 x i8]* @.str.42, i32 0, i32 0), i32 %26, i32 %27)
  br label %28

; <label>:28:                                     ; preds = %12, %19, %3
  %29 = zext i16 %1 to i32
  %30 = getelementptr inbounds %struct.snd_ac97, %struct.snd_ac97* %0, i32 0, i32 11
  %31 = load i16, i16* %30, align 8
  %32 = zext i16 %31 to i32
  %33 = mul nsw i32 %32, 128
  %34 = add nsw i32 %29, %33
  call void @iaputword(%struct.intel8x0* %6, i32 %34, i16 zeroext %2)
  ret void
}

; Function Attrs: noinline nounwind uwtable
define internal zeroext i16 @snd_intel8x0_codec_read(%struct.snd_ac97*, i16 zeroext) #0 {
  %3 = getelementptr inbounds %struct.snd_ac97, %struct.snd_ac97* %0, i32 0, i32 1
  %4 = load i8*, i8** %3, align 8
  %5 = bitcast i8* %4 to %struct.intel8x0*
  %6 = getelementptr inbounds %struct.snd_ac97, %struct.snd_ac97* %0, i32 0, i32 11
  %7 = load i16, i16* %6, align 8
  %8 = zext i16 %7 to i32
  %9 = call i32 @snd_intel8x0_codec_semaphore(%struct.intel8x0* %5, i32 %8)
  %10 = icmp slt i32 %9, 0
  br i1 %10, label %11, label %27

; <label>:11:                                     ; preds = %2
  %12 = getelementptr inbounds %struct.intel8x0, %struct.intel8x0* %5, i32 0, i32 9
  %13 = load i16, i16* %12, align 8
  %14 = lshr i16 %13, 5
  %15 = and i16 %14, 1
  %16 = zext i16 %15 to i32
  %17 = icmp ne i32 %16, 0
  br i1 %17, label %59, label %18

; <label>:18:                                     ; preds = %11
  %19 = getelementptr inbounds %struct.intel8x0, %struct.intel8x0* %5, i32 0, i32 5
  %20 = load %struct.snd_card*, %struct.snd_card** %19, align 8
  %21 = getelementptr inbounds %struct.snd_card, %struct.snd_card* %20, i32 0, i32 29
  %22 = load %struct.device*, %struct.device** %21, align 8
  %23 = getelementptr inbounds %struct.snd_ac97, %struct.snd_ac97* %0, i32 0, i32 11
  %24 = load i16, i16* %23, align 8
  %25 = zext i16 %24 to i32
  %26 = zext i16 %1 to i32
  call void (%struct.device*, i8*, ...) @dev_err(%struct.device* %22, i8* getelementptr inbounds ([57 x i8], [57 x i8]* @.str.44, i32 0, i32 0), i32 %25, i32 %26)
  br label %59

; <label>:27:                                     ; preds = %2
  %28 = zext i16 %1 to i32
  %29 = getelementptr inbounds %struct.snd_ac97, %struct.snd_ac97* %0, i32 0, i32 11
  %30 = load i16, i16* %29, align 8
  %31 = zext i16 %30 to i32
  %32 = mul nsw i32 %31, 128
  %33 = add nsw i32 %28, %32
  %34 = call zeroext i16 @iagetword(%struct.intel8x0* %5, i32 %33)
  %35 = call i32 @igetdword(%struct.intel8x0* %5, i32 48)
  %36 = and i32 %35, 32768
  %37 = icmp ne i32 %36, 0
  br i1 %37, label %38, label %59

; <label>:38:                                     ; preds = %27
  %39 = getelementptr inbounds %struct.intel8x0, %struct.intel8x0* %5, i32 0, i32 19
  %40 = load i32, i32* %39, align 4
  %41 = or i32 %40, 1
  %42 = xor i32 %41, -1
  %43 = and i32 %35, %42
  call void @iputdword(%struct.intel8x0* %5, i32 48, i32 %43)
  %44 = getelementptr inbounds %struct.intel8x0, %struct.intel8x0* %5, i32 0, i32 9
  %45 = load i16, i16* %44, align 8
  %46 = lshr i16 %45, 5
  %47 = and i16 %46, 1
  %48 = zext i16 %47 to i32
  %49 = icmp ne i32 %48, 0
  br i1 %49, label %59, label %50

; <label>:50:                                     ; preds = %38
  %51 = getelementptr inbounds %struct.intel8x0, %struct.intel8x0* %5, i32 0, i32 5
  %52 = load %struct.snd_card*, %struct.snd_card** %51, align 8
  %53 = getelementptr inbounds %struct.snd_card, %struct.snd_card* %52, i32 0, i32 29
  %54 = load %struct.device*, %struct.device** %53, align 8
  %55 = getelementptr inbounds %struct.snd_ac97, %struct.snd_ac97* %0, i32 0, i32 11
  %56 = load i16, i16* %55, align 8
  %57 = zext i16 %56 to i32
  %58 = zext i16 %1 to i32
  call void (%struct.device*, i8*, ...) @dev_err(%struct.device* %54, i8* getelementptr inbounds ([47 x i8], [47 x i8]* @.str.45, i32 0, i32 0), i32 %57, i32 %58)
  br label %59

; <label>:59:                                     ; preds = %27, %50, %38, %11, %18
  %.1 = phi i16 [ -1, %18 ], [ -1, %11 ], [ %34, %27 ], [ -1, %50 ], [ -1, %38 ]
  ret i16 %.1
}

; Function Attrs: noinline nounwind uwtable
define internal void @snd_intel8x0_ali_codec_write(%struct.snd_ac97*, i16 zeroext, i16 zeroext) #0 {
  %4 = getelementptr inbounds %struct.snd_ac97, %struct.snd_ac97* %0, i32 0, i32 1
  %5 = load i8*, i8** %4, align 8
  %6 = bitcast i8* %5 to %struct.intel8x0*
  %7 = call i32 @snd_intel8x0_ali_codec_semaphore(%struct.intel8x0* %6)
  %8 = icmp ne i32 %7, 0
  br i1 %8, label %17, label %9

; <label>:9:                                      ; preds = %3
  call void @iputword(%struct.intel8x0* %6, i32 32, i16 zeroext %2)
  %10 = getelementptr inbounds %struct.snd_ac97, %struct.snd_ac97* %0, i32 0, i32 11
  %11 = load i16, i16* %10, align 8
  %12 = icmp ne i16 %11, 0
  %13 = zext i16 %1 to i32
  %14 = or i32 %13, 256
  %15 = trunc i32 %14 to i16
  %.0 = select i1 %12, i16 %15, i16 %1
  call void @iputword(%struct.intel8x0* %6, i32 34, i16 zeroext %.0)
  %16 = call i32 @snd_intel8x0_ali_codec_ready(%struct.intel8x0* %6, i32 1)
  br label %17

; <label>:17:                                     ; preds = %3, %9
  ret void
}

; Function Attrs: noinline nounwind uwtable
define internal zeroext i16 @snd_intel8x0_ali_codec_read(%struct.snd_ac97*, i16 zeroext) #0 {
  %3 = getelementptr inbounds %struct.snd_ac97, %struct.snd_ac97* %0, i32 0, i32 1
  %4 = load i8*, i8** %3, align 8
  %5 = bitcast i8* %4 to %struct.intel8x0*
  %6 = call i32 @snd_intel8x0_ali_codec_semaphore(%struct.intel8x0* %5)
  %7 = icmp ne i32 %6, 0
  br i1 %7, label %22, label %8

; <label>:8:                                      ; preds = %2
  %9 = zext i16 %1 to i32
  %10 = or i32 %9, 128
  %11 = trunc i32 %10 to i16
  %12 = getelementptr inbounds %struct.snd_ac97, %struct.snd_ac97* %0, i32 0, i32 11
  %13 = load i16, i16* %12, align 8
  %14 = icmp ne i16 %13, 0
  %15 = zext i16 %11 to i32
  %16 = or i32 %15, 256
  %17 = trunc i32 %16 to i16
  %.01 = select i1 %14, i16 %17, i16 %11
  call void @iputword(%struct.intel8x0* %5, i32 34, i16 zeroext %.01)
  %18 = call i32 @snd_intel8x0_ali_codec_ready(%struct.intel8x0* %5, i32 2)
  %19 = icmp ne i32 %18, 0
  br i1 %19, label %22, label %20

; <label>:20:                                     ; preds = %8
  %21 = call zeroext i16 @igetword(%struct.intel8x0* %5, i32 36)
  br label %22

; <label>:22:                                     ; preds = %8, %2, %20
  %.0 = phi i16 [ %21, %20 ], [ -1, %2 ], [ -1, %8 ]
  ret i16 %.0
}

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i32, i1) #2

; Function Attrs: noinline nounwind uwtable
define internal void @snd_intel8x0_mixer_free_ac97(%struct.snd_ac97*) #0 {
  %2 = getelementptr inbounds %struct.snd_ac97, %struct.snd_ac97* %0, i32 0, i32 1
  %3 = load i8*, i8** %2, align 8
  %4 = bitcast i8* %3 to %struct.intel8x0*
  %5 = getelementptr inbounds %struct.intel8x0, %struct.intel8x0* %4, i32 0, i32 13
  %6 = getelementptr inbounds %struct.snd_ac97, %struct.snd_ac97* %0, i32 0, i32 11
  %7 = load i16, i16* %6, align 8
  %8 = zext i16 %7 to i64
  %9 = getelementptr inbounds [3 x %struct.snd_ac97*], [3 x %struct.snd_ac97*]* %5, i64 0, i64 %8
  store %struct.snd_ac97* null, %struct.snd_ac97** %9, align 8
  ret void
}

; Function Attrs: noinline nounwind uwtable
define internal void @snd_intel8x0_codec_read_test(%struct.intel8x0*, i32) #0 {
  %3 = call i32 @snd_intel8x0_codec_semaphore(%struct.intel8x0* %0, i32 %1)
  %4 = icmp sge i32 %3, 0
  br i1 %4, label %5, label %17

; <label>:5:                                      ; preds = %2
  %6 = mul i32 %1, 128
  %7 = call zeroext i16 @iagetword(%struct.intel8x0* %0, i32 %6)
  %8 = call i32 @igetdword(%struct.intel8x0* %0, i32 48)
  %9 = and i32 %8, 32768
  %10 = icmp ne i32 %9, 0
  br i1 %10, label %11, label %17

; <label>:11:                                     ; preds = %5
  %12 = getelementptr inbounds %struct.intel8x0, %struct.intel8x0* %0, i32 0, i32 19
  %13 = load i32, i32* %12, align 4
  %14 = or i32 %13, 1
  %15 = xor i32 %14, -1
  %16 = and i32 %8, %15
  call void @iputdword(%struct.intel8x0* %0, i32 48, i32 %16)
  br label %17

; <label>:17:                                     ; preds = %5, %11, %2
  ret void
}

declare void @__const_udelay(i64) #1

declare i32 @snd_ac97_bus(%struct.snd_card*, i32, %struct.snd_ac97_bus_ops*, i8*, %struct.snd_ac97_bus**) #1

; Function Attrs: noinline nounwind uwtable
define internal void @snd_intel8x0_mixer_free_ac97_bus(%struct.snd_ac97_bus*) #0 {
  %2 = getelementptr inbounds %struct.snd_ac97_bus, %struct.snd_ac97_bus* %0, i32 0, i32 1
  %3 = load i8*, i8** %2, align 8
  %4 = bitcast i8* %3 to %struct.intel8x0*
  %5 = getelementptr inbounds %struct.intel8x0, %struct.intel8x0* %4, i32 0, i32 12
  store %struct.snd_ac97_bus* null, %struct.snd_ac97_bus** %5, align 8
  ret void
}

declare i32 @snd_ac97_mixer(%struct.snd_ac97_bus*, %struct.snd_ac97_template*, %struct.snd_ac97**) #1

declare i32 @snd_ac97_tune_hardware(%struct.snd_ac97*, %struct.ac97_quirk*, i8*) #1

declare i32 @snd_ac97_pcm_assign(%struct.snd_ac97_bus*, i16 zeroext, %struct.ac97_pcm*) #1

declare i32 @snd_ac97_update_bits(%struct.snd_ac97*, i16 zeroext, i16 zeroext, i16 zeroext) #1

; Function Attrs: noinline nounwind uwtable
define internal i32 @snd_intel8x0_codec_semaphore(%struct.intel8x0*, i32) #0 {
  %3 = icmp ugt i32 %1, 2
  br i1 %3, label %52, label %4

; <label>:4:                                      ; preds = %2
  %5 = getelementptr inbounds %struct.intel8x0, %struct.intel8x0* %0, i32 0, i32 9
  %6 = load i16, i16* %5, align 8
  %7 = lshr i16 %6, 6
  %8 = and i16 %7, 1
  %9 = zext i16 %8 to i32
  %10 = icmp ne i32 %9, 0
  br i1 %10, label %11, label %14

; <label>:11:                                     ; preds = %4
  %12 = getelementptr inbounds %struct.intel8x0, %struct.intel8x0* %0, i32 0, i32 18
  %13 = load i32, i32* %12, align 8
  br label %24

; <label>:14:                                     ; preds = %4
  %15 = getelementptr inbounds %struct.intel8x0, %struct.intel8x0* %0, i32 0, i32 17
  %16 = load i32*, i32** %15, align 8
  %17 = getelementptr inbounds %struct.intel8x0, %struct.intel8x0* %0, i32 0, i32 14
  %18 = zext i32 %1 to i64
  %19 = getelementptr inbounds [3 x i32], [3 x i32]* %17, i64 0, i64 %18
  %20 = load i32, i32* %19, align 4
  %21 = zext i32 %20 to i64
  %22 = getelementptr inbounds i32, i32* %16, i64 %21
  %23 = load i32, i32* %22, align 4
  br label %24

; <label>:24:                                     ; preds = %14, %11
  %.02 = phi i32 [ %13, %11 ], [ %23, %14 ]
  %25 = call i32 @igetdword(%struct.intel8x0* %0, i32 48)
  %26 = and i32 %25, %.02
  %27 = icmp eq i32 %26, 0
  br i1 %27, label %52, label %28

; <label>:28:                                     ; preds = %24
  %29 = getelementptr inbounds %struct.intel8x0, %struct.intel8x0* %0, i32 0, i32 9
  %30 = load i16, i16* %29, align 8
  %31 = lshr i16 %30, 11
  %32 = and i16 %31, 1
  %33 = zext i16 %32 to i32
  %34 = icmp ne i32 %33, 0
  br i1 %34, label %52, label %35

; <label>:35:                                     ; preds = %28, %40
  %.01 = phi i32 [ %41, %40 ], [ 100, %28 ]
  %36 = call zeroext i8 @igetbyte(%struct.intel8x0* %0, i32 52)
  %37 = zext i8 %36 to i32
  %38 = and i32 %37, 1
  %39 = icmp ne i32 %38, 0
  br i1 %39, label %40, label %52

; <label>:40:                                     ; preds = %35
  call void @__const_udelay(i64 42950)
  %41 = add nsw i32 %.01, -1
  %42 = icmp ne i32 %.01, 0
  br i1 %42, label %35, label %43

; <label>:43:                                     ; preds = %40
  %44 = getelementptr inbounds %struct.intel8x0, %struct.intel8x0* %0, i32 0, i32 5
  %45 = load %struct.snd_card*, %struct.snd_card** %44, align 8
  %46 = getelementptr inbounds %struct.snd_card, %struct.snd_card* %45, i32 0, i32 29
  %47 = load %struct.device*, %struct.device** %46, align 8
  %48 = call zeroext i8 @igetbyte(%struct.intel8x0* %0, i32 52)
  %49 = zext i8 %48 to i32
  %50 = call i32 @igetdword(%struct.intel8x0* %0, i32 48)
  call void (%struct.device*, i8*, ...) @dev_err(%struct.device* %47, i8* getelementptr inbounds ([54 x i8], [54 x i8]* @.str.43, i32 0, i32 0), i32 %49, i32 %50)
  %51 = call zeroext i16 @iagetword(%struct.intel8x0* %0, i32 0)
  br label %52

; <label>:52:                                     ; preds = %35, %28, %24, %2, %43
  %.0 = phi i32 [ -16, %43 ], [ -5, %2 ], [ -5, %24 ], [ 0, %28 ], [ 0, %35 ]
  ret i32 %.0
}

; Function Attrs: noinline nounwind uwtable
define internal void @iaputword(%struct.intel8x0*, i32, i16 zeroext) #0 {
  %4 = getelementptr inbounds %struct.intel8x0, %struct.intel8x0* %0, i32 0, i32 2
  %5 = load i8*, i8** %4, align 8
  %6 = zext i32 %1 to i64
  %7 = getelementptr i8, i8* %5, i64 %6
  call void @iowrite16(i16 zeroext %2, i8* %7)
  ret void
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @snd_intel8x0_ali_codec_semaphore(%struct.intel8x0*) #0 {
  %2 = getelementptr inbounds %struct.intel8x0, %struct.intel8x0* %0, i32 0, i32 9
  %3 = load i16, i16* %2, align 8
  %4 = lshr i16 %3, 11
  %5 = and i16 %4, 1
  %6 = zext i16 %5 to i32
  %7 = icmp ne i32 %6, 0
  br i1 %7, label %30, label %8

; <label>:8:                                      ; preds = %1, %14
  %.01 = phi i32 [ %9, %14 ], [ 100, %1 ]
  %9 = add nsw i32 %.01, -1
  %cond = icmp eq i32 %9, 0
  br i1 %cond, label %16, label %10

; <label>:10:                                     ; preds = %8
  %11 = call i32 @igetdword(%struct.intel8x0* %0, i32 60)
  %12 = and i32 %11, -2147483648
  %13 = icmp ne i32 %12, 0
  br i1 %13, label %14, label %.critedge

; <label>:14:                                     ; preds = %10
  call void @__const_udelay(i64 4295)
  br label %8

.critedge:                                        ; preds = %10
  %15 = icmp ne i32 %9, 0
  br i1 %15, label %28, label %16

; <label>:16:                                     ; preds = %8, %.critedge
  %17 = getelementptr inbounds %struct.intel8x0, %struct.intel8x0* %0, i32 0, i32 9
  %18 = load i16, i16* %17, align 8
  %19 = lshr i16 %18, 5
  %20 = and i16 %19, 1
  %21 = zext i16 %20 to i32
  %22 = icmp ne i32 %21, 0
  br i1 %22, label %28, label %23

; <label>:23:                                     ; preds = %16
  %24 = getelementptr inbounds %struct.intel8x0, %struct.intel8x0* %0, i32 0, i32 5
  %25 = load %struct.snd_card*, %struct.snd_card** %24, align 8
  %26 = getelementptr inbounds %struct.snd_card, %struct.snd_card* %25, i32 0, i32 29
  %27 = load %struct.device*, %struct.device** %26, align 8
  call void (%struct.device*, i8*, ...) @dev_warn(%struct.device* %27, i8* getelementptr inbounds ([29 x i8], [29 x i8]* @.str.46, i32 0, i32 0))
  br label %28

; <label>:28:                                     ; preds = %23, %16, %.critedge
  %29 = call i32 @snd_intel8x0_ali_codec_ready(%struct.intel8x0* %0, i32 8)
  br label %30

; <label>:30:                                     ; preds = %1, %28
  %.0 = phi i32 [ %29, %28 ], [ 0, %1 ]
  ret i32 %.0
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @snd_intel8x0_ali_codec_ready(%struct.intel8x0*, i32) #0 {
  br label %3

; <label>:3:                                      ; preds = %10, %2
  %.01 = phi i32 [ 0, %2 ], [ %11, %10 ]
  %4 = icmp slt i32 %.01, 127
  br i1 %4, label %5, label %12

; <label>:5:                                      ; preds = %3
  %6 = call zeroext i8 @igetbyte(%struct.intel8x0* %0, i32 56)
  %7 = zext i8 %6 to i32
  %8 = and i32 %7, %1
  %9 = icmp ne i32 %8, 0
  br i1 %9, label %24, label %10

; <label>:10:                                     ; preds = %5
  %11 = add nsw i32 %.01, 1
  br label %3

; <label>:12:                                     ; preds = %3
  %13 = getelementptr inbounds %struct.intel8x0, %struct.intel8x0* %0, i32 0, i32 9
  %14 = load i16, i16* %13, align 8
  %15 = lshr i16 %14, 5
  %16 = and i16 %15, 1
  %17 = zext i16 %16 to i32
  %18 = icmp ne i32 %17, 0
  br i1 %18, label %24, label %19

; <label>:19:                                     ; preds = %12
  %20 = getelementptr inbounds %struct.intel8x0, %struct.intel8x0* %0, i32 0, i32 5
  %21 = load %struct.snd_card*, %struct.snd_card** %20, align 8
  %22 = getelementptr inbounds %struct.snd_card, %struct.snd_card* %21, i32 0, i32 29
  %23 = load %struct.device*, %struct.device** %22, align 8
  call void (%struct.device*, i8*, ...) @dev_warn(%struct.device* %23, i8* getelementptr inbounds ([27 x i8], [27 x i8]* @.str.47, i32 0, i32 0))
  br label %24

; <label>:24:                                     ; preds = %12, %19, %5
  %.0 = phi i32 [ 0, %5 ], [ -16, %19 ], [ -16, %12 ]
  ret i32 %.0
}

declare void @dev_warn(%struct.device*, i8*, ...) #1

; Function Attrs: noinline nounwind uwtable
define internal i32 @snd_intel8x0_pcm1(%struct.intel8x0*, i32, %struct.ich_pcm_table*) #0 {
  %4 = alloca %struct.snd_pcm*, align 8
  %5 = alloca [32 x i8], align 16
  %6 = alloca %struct.snd_pcm_chmap*, align 8
  %7 = getelementptr inbounds %struct.ich_pcm_table, %struct.ich_pcm_table* %2, i32 0, i32 0
  %8 = load i8*, i8** %7, align 8
  %9 = icmp ne i8* %8, null
  %10 = getelementptr inbounds [32 x i8], [32 x i8]* %5, i32 0, i32 0
  br i1 %9, label %11, label %15

; <label>:11:                                     ; preds = %3
  %12 = getelementptr inbounds %struct.ich_pcm_table, %struct.ich_pcm_table* %2, i32 0, i32 0
  %13 = load i8*, i8** %12, align 8
  %14 = call i32 (i8*, i8*, ...) @sprintf(i8* %10, i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.112, i32 0, i32 0), i8* %13)
  br label %17

; <label>:15:                                     ; preds = %3
  %16 = call i8* @strcpy(i8* %10, i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.4, i32 0, i32 0))
  br label %17

; <label>:17:                                     ; preds = %15, %11
  %18 = getelementptr inbounds %struct.intel8x0, %struct.intel8x0* %0, i32 0, i32 5
  %19 = load %struct.snd_card*, %struct.snd_card** %18, align 8
  %20 = getelementptr inbounds [32 x i8], [32 x i8]* %5, i32 0, i32 0
  %21 = getelementptr inbounds %struct.ich_pcm_table, %struct.ich_pcm_table* %2, i32 0, i32 1
  %22 = load %struct.snd_pcm_ops*, %struct.snd_pcm_ops** %21, align 8
  %23 = icmp ne %struct.snd_pcm_ops* %22, null
  %24 = select i1 %23, i32 1, i32 0
  %25 = getelementptr inbounds %struct.ich_pcm_table, %struct.ich_pcm_table* %2, i32 0, i32 2
  %26 = load %struct.snd_pcm_ops*, %struct.snd_pcm_ops** %25, align 8
  %27 = icmp ne %struct.snd_pcm_ops* %26, null
  %28 = select i1 %27, i32 1, i32 0
  %29 = call i32 @snd_pcm_new(%struct.snd_card* %19, i8* %20, i32 %1, i32 %24, i32 %28, %struct.snd_pcm** %4)
  %30 = icmp slt i32 %29, 0
  br i1 %30, label %126, label %31

; <label>:31:                                     ; preds = %17
  %32 = getelementptr inbounds %struct.ich_pcm_table, %struct.ich_pcm_table* %2, i32 0, i32 1
  %33 = load %struct.snd_pcm_ops*, %struct.snd_pcm_ops** %32, align 8
  %34 = icmp ne %struct.snd_pcm_ops* %33, null
  br i1 %34, label %35, label %39

; <label>:35:                                     ; preds = %31
  %36 = load %struct.snd_pcm*, %struct.snd_pcm** %4, align 8
  %37 = getelementptr inbounds %struct.ich_pcm_table, %struct.ich_pcm_table* %2, i32 0, i32 1
  %38 = load %struct.snd_pcm_ops*, %struct.snd_pcm_ops** %37, align 8
  call void @snd_pcm_set_ops(%struct.snd_pcm* %36, i32 0, %struct.snd_pcm_ops* %38)
  br label %39

; <label>:39:                                     ; preds = %35, %31
  %40 = getelementptr inbounds %struct.ich_pcm_table, %struct.ich_pcm_table* %2, i32 0, i32 2
  %41 = load %struct.snd_pcm_ops*, %struct.snd_pcm_ops** %40, align 8
  %42 = icmp ne %struct.snd_pcm_ops* %41, null
  br i1 %42, label %43, label %47

; <label>:43:                                     ; preds = %39
  %44 = load %struct.snd_pcm*, %struct.snd_pcm** %4, align 8
  %45 = getelementptr inbounds %struct.ich_pcm_table, %struct.ich_pcm_table* %2, i32 0, i32 2
  %46 = load %struct.snd_pcm_ops*, %struct.snd_pcm_ops** %45, align 8
  call void @snd_pcm_set_ops(%struct.snd_pcm* %44, i32 1, %struct.snd_pcm_ops* %46)
  br label %47

; <label>:47:                                     ; preds = %43, %39
  %48 = bitcast %struct.intel8x0* %0 to i8*
  %49 = load %struct.snd_pcm*, %struct.snd_pcm** %4, align 8
  %50 = getelementptr inbounds %struct.snd_pcm, %struct.snd_pcm* %49, i32 0, i32 11
  store i8* %48, i8** %50, align 8
  %51 = load %struct.snd_pcm*, %struct.snd_pcm** %4, align 8
  %52 = getelementptr inbounds %struct.snd_pcm, %struct.snd_pcm* %51, i32 0, i32 3
  store i32 0, i32* %52, align 4
  %53 = getelementptr inbounds %struct.ich_pcm_table, %struct.ich_pcm_table* %2, i32 0, i32 0
  %54 = load i8*, i8** %53, align 8
  %55 = icmp ne i8* %54, null
  %56 = load %struct.snd_pcm*, %struct.snd_pcm** %4, align 8
  %57 = getelementptr inbounds %struct.snd_pcm, %struct.snd_pcm* %56, i32 0, i32 7
  %58 = getelementptr inbounds [80 x i8], [80 x i8]* %57, i32 0, i32 0
  %59 = getelementptr inbounds %struct.intel8x0, %struct.intel8x0* %0, i32 0, i32 5
  %60 = load %struct.snd_card*, %struct.snd_card** %59, align 8
  %61 = getelementptr inbounds %struct.snd_card, %struct.snd_card* %60, i32 0, i32 3
  %62 = getelementptr inbounds [32 x i8], [32 x i8]* %61, i32 0, i32 0
  br i1 %55, label %63, label %67

; <label>:63:                                     ; preds = %47
  %64 = getelementptr inbounds %struct.ich_pcm_table, %struct.ich_pcm_table* %2, i32 0, i32 0
  %65 = load i8*, i8** %64, align 8
  %66 = call i32 (i8*, i8*, ...) @sprintf(i8* %58, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.113, i32 0, i32 0), i8* %62, i8* %65)
  br label %69

; <label>:67:                                     ; preds = %47
  %68 = call i8* @strcpy(i8* %58, i8* %62)
  br label %69

; <label>:69:                                     ; preds = %67, %63
  %70 = load %struct.snd_pcm*, %struct.snd_pcm** %4, align 8
  %71 = getelementptr inbounds %struct.intel8x0, %struct.intel8x0* %0, i32 0, i32 7
  %72 = sext i32 %1 to i64
  %73 = getelementptr inbounds [6 x %struct.snd_pcm*], [6 x %struct.snd_pcm*]* %71, i64 0, i64 %72
  store %struct.snd_pcm* %70, %struct.snd_pcm** %73, align 8
  %74 = load %struct.snd_pcm*, %struct.snd_pcm** %4, align 8
  %75 = getelementptr inbounds %struct.intel8x0, %struct.intel8x0* %0, i32 0, i32 4
  %76 = load %struct.pci_dev*, %struct.pci_dev** %75, align 8
  %77 = getelementptr inbounds %struct.pci_dev, %struct.pci_dev* %76, i32 0, i32 35
  %78 = bitcast %struct.device* %77 to i8*
  %79 = getelementptr inbounds %struct.ich_pcm_table, %struct.ich_pcm_table* %2, i32 0, i32 3
  %80 = load i64, i64* %79, align 8
  %81 = getelementptr inbounds %struct.ich_pcm_table, %struct.ich_pcm_table* %2, i32 0, i32 4
  %82 = load i64, i64* %81, align 8
  %83 = call i32 @snd_pcm_lib_preallocate_pages_for_all(%struct.snd_pcm* %74, i32 2, i8* %78, i64 %80, i64 %82)
  %84 = getelementptr inbounds %struct.ich_pcm_table, %struct.ich_pcm_table* %2, i32 0, i32 1
  %85 = load %struct.snd_pcm_ops*, %struct.snd_pcm_ops** %84, align 8
  %86 = icmp ne %struct.snd_pcm_ops* %85, null
  br i1 %86, label %87, label %126

; <label>:87:                                     ; preds = %69
  %88 = getelementptr inbounds %struct.ich_pcm_table, %struct.ich_pcm_table* %2, i32 0, i32 1
  %89 = load %struct.snd_pcm_ops*, %struct.snd_pcm_ops** %88, align 8
  %90 = getelementptr inbounds %struct.snd_pcm_ops, %struct.snd_pcm_ops* %89, i32 0, i32 0
  %91 = load i32 (%struct.snd_pcm_substream*)*, i32 (%struct.snd_pcm_substream*)** %90, align 8
  %92 = icmp eq i32 (%struct.snd_pcm_substream*)* %91, @snd_intel8x0_playback_open
  br i1 %92, label %93, label %126

; <label>:93:                                     ; preds = %87
  %94 = getelementptr inbounds %struct.intel8x0, %struct.intel8x0* %0, i32 0, i32 9
  %95 = load i16, i16* %94, align 8
  %96 = lshr i16 %95, 2
  %97 = and i16 %96, 1
  %98 = zext i16 %97 to i32
  %99 = icmp ne i32 %98, 0
  br i1 %99, label %113, label %100

; <label>:100:                                    ; preds = %93
  %101 = getelementptr inbounds %struct.intel8x0, %struct.intel8x0* %0, i32 0, i32 9
  %102 = load i16, i16* %101, align 8
  %103 = lshr i16 %102, 1
  %104 = and i16 %103, 1
  %105 = zext i16 %104 to i32
  %106 = icmp ne i32 %105, 0
  br i1 %106, label %113, label %107

; <label>:107:                                    ; preds = %100
  %108 = getelementptr inbounds %struct.intel8x0, %struct.intel8x0* %0, i32 0, i32 9
  %109 = load i16, i16* %108, align 8
  %110 = and i16 %109, 1
  %111 = zext i16 %110 to i32
  %112 = icmp ne i32 %111, 0
  %. = select i1 %112, i32 4, i32 2
  br label %113

; <label>:113:                                    ; preds = %107, %100, %93
  %.2 = phi i32 [ 8, %93 ], [ %., %107 ], [ 6, %100 ]
  %114 = load %struct.snd_pcm*, %struct.snd_pcm** %4, align 8
  %115 = call i32 @snd_pcm_add_chmap_ctls(%struct.snd_pcm* %114, i32 0, %struct.snd_pcm_chmap_elem* getelementptr inbounds ([0 x %struct.snd_pcm_chmap_elem], [0 x %struct.snd_pcm_chmap_elem]* @snd_pcm_alt_chmaps, i32 0, i32 0), i32 %.2, i64 0, %struct.snd_pcm_chmap** %6)
  %116 = icmp slt i32 %115, 0
  br i1 %116, label %126, label %117

; <label>:117:                                    ; preds = %113
  %118 = load %struct.snd_pcm_chmap*, %struct.snd_pcm_chmap** %6, align 8
  %119 = getelementptr inbounds %struct.snd_pcm_chmap, %struct.snd_pcm_chmap* %118, i32 0, i32 5
  store i32 340, i32* %119, align 4
  %120 = load %struct.snd_pcm_chmap*, %struct.snd_pcm_chmap** %6, align 8
  %121 = getelementptr inbounds %struct.intel8x0, %struct.intel8x0* %0, i32 0, i32 13
  %122 = getelementptr inbounds [3 x %struct.snd_ac97*], [3 x %struct.snd_ac97*]* %121, i64 0, i64 0
  %123 = load %struct.snd_ac97*, %struct.snd_ac97** %122, align 8
  %124 = getelementptr inbounds %struct.snd_ac97, %struct.snd_ac97* %123, i32 0, i32 29
  %125 = getelementptr inbounds [2 x %struct.snd_pcm_chmap*], [2 x %struct.snd_pcm_chmap*]* %124, i64 0, i64 0
  store %struct.snd_pcm_chmap* %120, %struct.snd_pcm_chmap** %125, align 8
  br label %126

; <label>:126:                                    ; preds = %69, %87, %117, %113, %17
  %.0 = phi i32 [ %29, %17 ], [ %115, %113 ], [ 0, %117 ], [ 0, %87 ], [ 0, %69 ]
  ret i32 %.0
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @snd_intel8x0_playback_open(%struct.snd_pcm_substream*) #0 {
  %2 = getelementptr inbounds %struct.snd_pcm_substream, %struct.snd_pcm_substream* %0, i32 0, i32 2
  %3 = load i8*, i8** %2, align 8
  %4 = bitcast i8* %3 to %struct.intel8x0*
  %5 = getelementptr inbounds %struct.snd_pcm_substream, %struct.snd_pcm_substream* %0, i32 0, i32 11
  %6 = load %struct.snd_pcm_runtime*, %struct.snd_pcm_runtime** %5, align 8
  %7 = getelementptr inbounds %struct.intel8x0, %struct.intel8x0* %4, i32 0, i32 8
  %8 = getelementptr inbounds [6 x %struct.ichdev], [6 x %struct.ichdev]* %7, i64 0, i64 1
  %9 = call i32 @snd_intel8x0_pcm_open(%struct.snd_pcm_substream* %0, %struct.ichdev* %8)
  %10 = icmp slt i32 %9, 0
  br i1 %10, label %65, label %11

; <label>:11:                                     ; preds = %1
  %12 = getelementptr inbounds %struct.intel8x0, %struct.intel8x0* %4, i32 0, i32 9
  %13 = load i16, i16* %12, align 8
  %14 = lshr i16 %13, 2
  %15 = and i16 %14, 1
  %16 = zext i16 %15 to i32
  %17 = icmp ne i32 %16, 0
  br i1 %17, label %18, label %22

; <label>:18:                                     ; preds = %11
  %19 = getelementptr inbounds %struct.snd_pcm_runtime, %struct.snd_pcm_runtime* %6, i32 0, i32 45
  %20 = getelementptr inbounds %struct.snd_pcm_hardware, %struct.snd_pcm_hardware* %19, i32 0, i32 6
  store i32 8, i32* %20, align 8
  %21 = call i32 @snd_pcm_hw_constraint_list(%struct.snd_pcm_runtime* %6, i32 0, i32 10, %struct.snd_pcm_hw_constraint_list* @hw_constraints_channels8)
  br label %43

; <label>:22:                                     ; preds = %11
  %23 = getelementptr inbounds %struct.intel8x0, %struct.intel8x0* %4, i32 0, i32 9
  %24 = load i16, i16* %23, align 8
  %25 = lshr i16 %24, 1
  %26 = and i16 %25, 1
  %27 = zext i16 %26 to i32
  %28 = icmp ne i32 %27, 0
  br i1 %28, label %29, label %33

; <label>:29:                                     ; preds = %22
  %30 = getelementptr inbounds %struct.snd_pcm_runtime, %struct.snd_pcm_runtime* %6, i32 0, i32 45
  %31 = getelementptr inbounds %struct.snd_pcm_hardware, %struct.snd_pcm_hardware* %30, i32 0, i32 6
  store i32 6, i32* %31, align 8
  %32 = call i32 @snd_pcm_hw_constraint_list(%struct.snd_pcm_runtime* %6, i32 0, i32 10, %struct.snd_pcm_hw_constraint_list* @hw_constraints_channels6)
  br label %43

; <label>:33:                                     ; preds = %22
  %34 = getelementptr inbounds %struct.intel8x0, %struct.intel8x0* %4, i32 0, i32 9
  %35 = load i16, i16* %34, align 8
  %36 = and i16 %35, 1
  %37 = zext i16 %36 to i32
  %38 = icmp ne i32 %37, 0
  br i1 %38, label %39, label %43

; <label>:39:                                     ; preds = %33
  %40 = getelementptr inbounds %struct.snd_pcm_runtime, %struct.snd_pcm_runtime* %6, i32 0, i32 45
  %41 = getelementptr inbounds %struct.snd_pcm_hardware, %struct.snd_pcm_hardware* %40, i32 0, i32 6
  store i32 4, i32* %41, align 8
  %42 = call i32 @snd_pcm_hw_constraint_list(%struct.snd_pcm_runtime* %6, i32 0, i32 10, %struct.snd_pcm_hw_constraint_list* @hw_constraints_channels4)
  br label %43

; <label>:43:                                     ; preds = %29, %39, %33, %18
  %44 = getelementptr inbounds %struct.intel8x0, %struct.intel8x0* %4, i32 0, i32 9
  %45 = load i16, i16* %44, align 8
  %46 = lshr i16 %45, 3
  %47 = and i16 %46, 1
  %48 = zext i16 %47 to i32
  %49 = icmp ne i32 %48, 0
  br i1 %49, label %50, label %52

; <label>:50:                                     ; preds = %43
  %51 = call i32 @snd_ac97_pcm_double_rate_rules(%struct.snd_pcm_runtime* %6)
  br label %52

; <label>:52:                                     ; preds = %50, %43
  %53 = getelementptr inbounds %struct.intel8x0, %struct.intel8x0* %4, i32 0, i32 9
  %54 = load i16, i16* %53, align 8
  %55 = lshr i16 %54, 4
  %56 = and i16 %55, 1
  %57 = zext i16 %56 to i32
  %58 = icmp ne i32 %57, 0
  br i1 %58, label %59, label %65

; <label>:59:                                     ; preds = %52
  %60 = getelementptr inbounds %struct.snd_pcm_runtime, %struct.snd_pcm_runtime* %6, i32 0, i32 45
  %61 = getelementptr inbounds %struct.snd_pcm_hardware, %struct.snd_pcm_hardware* %60, i32 0, i32 1
  %62 = load i64, i64* %61, align 8
  %63 = or i64 %62, 1024
  store i64 %63, i64* %61, align 8
  %64 = call i32 @snd_pcm_hw_constraint_msbits(%struct.snd_pcm_runtime* %6, i32 0, i32 32, i32 20)
  br label %65

; <label>:65:                                     ; preds = %52, %59, %1
  %.0 = phi i32 [ %9, %1 ], [ 0, %59 ], [ 0, %52 ]
  ret i32 %.0
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @snd_intel8x0_playback_close(%struct.snd_pcm_substream*) #0 {
  %2 = getelementptr inbounds %struct.snd_pcm_substream, %struct.snd_pcm_substream* %0, i32 0, i32 2
  %3 = load i8*, i8** %2, align 8
  %4 = bitcast i8* %3 to %struct.intel8x0*
  %5 = getelementptr inbounds %struct.intel8x0, %struct.intel8x0* %4, i32 0, i32 8
  %6 = getelementptr inbounds [6 x %struct.ichdev], [6 x %struct.ichdev]* %5, i64 0, i64 1
  %7 = getelementptr inbounds %struct.ichdev, %struct.ichdev* %6, i32 0, i32 4
  store %struct.snd_pcm_substream* null, %struct.snd_pcm_substream** %7, align 8
  ret i32 0
}

declare i32 @snd_pcm_lib_ioctl(%struct.snd_pcm_substream*, i32, i8*) #1

; Function Attrs: noinline nounwind uwtable
define internal i32 @snd_intel8x0_hw_params(%struct.snd_pcm_substream*, %struct.snd_pcm_hw_params*) #0 {
  %3 = getelementptr inbounds %struct.snd_pcm_substream, %struct.snd_pcm_substream* %0, i32 0, i32 2
  %4 = load i8*, i8** %3, align 8
  %5 = bitcast i8* %4 to %struct.intel8x0*
  %6 = getelementptr inbounds %struct.snd_pcm_substream, %struct.snd_pcm_substream* %0, i32 0, i32 11
  %7 = load %struct.snd_pcm_runtime*, %struct.snd_pcm_runtime** %6, align 8
  %8 = getelementptr inbounds %struct.snd_pcm_runtime, %struct.snd_pcm_runtime* %7, i32 0, i32 43
  %9 = load i8*, i8** %8, align 8
  %10 = bitcast i8* %9 to %struct.ichdev*
  %11 = getelementptr inbounds %struct.snd_pcm_substream, %struct.snd_pcm_substream* %0, i32 0, i32 11
  %12 = load %struct.snd_pcm_runtime*, %struct.snd_pcm_runtime** %11, align 8
  %13 = call i32 @params_rate(%struct.snd_pcm_hw_params* %1)
  %14 = icmp ugt i32 %13, 48000
  %15 = zext i1 %14 to i32
  %16 = getelementptr inbounds %struct.intel8x0, %struct.intel8x0* %5, i32 0, i32 9
  %17 = load i16, i16* %16, align 8
  %18 = lshr i16 %17, 8
  %19 = and i16 %18, 1
  %20 = zext i16 %19 to i32
  %21 = icmp ne i32 %20, 0
  br i1 %21, label %22, label %32

; <label>:22:                                     ; preds = %2
  %23 = getelementptr inbounds %struct.ichdev, %struct.ichdev* %10, i32 0, i32 25
  %24 = load i8, i8* %23, align 4
  %25 = and i8 %24, 1
  %26 = zext i8 %25 to i32
  %27 = icmp ne i32 %26, 0
  br i1 %27, label %28, label %32

; <label>:28:                                     ; preds = %22
  %29 = getelementptr inbounds %struct.ichdev, %struct.ichdev* %10, i32 0, i32 25
  %30 = load i8, i8* %29, align 4
  %31 = and i8 %30, -2
  store i8 %31, i8* %29, align 4
  br label %32

; <label>:32:                                     ; preds = %28, %22, %2
  %33 = call i32 @params_buffer_bytes(%struct.snd_pcm_hw_params* %1)
  %34 = zext i32 %33 to i64
  %35 = call i32 @snd_pcm_lib_malloc_pages(%struct.snd_pcm_substream* %0, i64 %34)
  %36 = icmp slt i32 %35, 0
  br i1 %36, label %101, label %37

; <label>:37:                                     ; preds = %32
  %38 = getelementptr inbounds %struct.intel8x0, %struct.intel8x0* %5, i32 0, i32 9
  %39 = load i16, i16* %38, align 8
  %40 = lshr i16 %39, 8
  %41 = and i16 %40, 1
  %42 = zext i16 %41 to i32
  %43 = icmp ne i32 %42, 0
  br i1 %43, label %44, label %59

; <label>:44:                                     ; preds = %37
  %45 = getelementptr inbounds %struct.snd_pcm_runtime, %struct.snd_pcm_runtime* %12, i32 0, i32 49
  %46 = load i8*, i8** %45, align 8
  %47 = icmp ne i8* %46, null
  br i1 %47, label %48, label %59

; <label>:48:                                     ; preds = %44
  %49 = getelementptr inbounds %struct.ichdev, %struct.ichdev* %10, i32 0, i32 25
  %50 = load i8, i8* %49, align 4
  %51 = and i8 %50, 1
  %52 = zext i8 %51 to i32
  %53 = icmp ne i32 %52, 0
  br i1 %53, label %59, label %54

; <label>:54:                                     ; preds = %48
  %55 = getelementptr inbounds %struct.ichdev, %struct.ichdev* %10, i32 0, i32 25
  %56 = load i8, i8* %55, align 4
  %57 = and i8 %56, -2
  %58 = or i8 %57, 1
  store i8 %58, i8* %55, align 4
  br label %59

; <label>:59:                                     ; preds = %44, %48, %54, %37
  %60 = getelementptr inbounds %struct.ichdev, %struct.ichdev* %10, i32 0, i32 24
  %61 = load i32, i32* %60, align 8
  %62 = icmp ne i32 %61, 0
  br i1 %62, label %63, label %68

; <label>:63:                                     ; preds = %59
  %64 = getelementptr inbounds %struct.ichdev, %struct.ichdev* %10, i32 0, i32 23
  %65 = load %struct.ac97_pcm*, %struct.ac97_pcm** %64, align 8
  %66 = call i32 @snd_ac97_pcm_close(%struct.ac97_pcm* %65)
  %67 = getelementptr inbounds %struct.ichdev, %struct.ichdev* %10, i32 0, i32 24
  store i32 0, i32* %67, align 8
  br label %68

; <label>:68:                                     ; preds = %63, %59
  %69 = getelementptr inbounds %struct.ichdev, %struct.ichdev* %10, i32 0, i32 23
  %70 = load %struct.ac97_pcm*, %struct.ac97_pcm** %69, align 8
  %71 = call i32 @params_rate(%struct.snd_pcm_hw_params* %1)
  %72 = call i32 @params_channels(%struct.snd_pcm_hw_params* %1)
  %73 = getelementptr inbounds %struct.ichdev, %struct.ichdev* %10, i32 0, i32 23
  %74 = load %struct.ac97_pcm*, %struct.ac97_pcm** %73, align 8
  %75 = getelementptr inbounds %struct.ac97_pcm, %struct.ac97_pcm* %74, i32 0, i32 5
  %76 = sext i32 %15 to i64
  %77 = getelementptr inbounds [2 x %struct.anon.72], [2 x %struct.anon.72]* %75, i64 0, i64 %76
  %78 = getelementptr inbounds %struct.anon.72, %struct.anon.72* %77, i32 0, i32 0
  %79 = load i16, i16* %78, align 8
  %80 = call i32 @snd_ac97_pcm_open(%struct.ac97_pcm* %70, i32 %71, i32 %72, i16 zeroext %79)
  %81 = icmp sge i32 %80, 0
  br i1 %81, label %82, label %101

; <label>:82:                                     ; preds = %68
  %83 = getelementptr inbounds %struct.ichdev, %struct.ichdev* %10, i32 0, i32 24
  store i32 1, i32* %83, align 8
  %84 = getelementptr inbounds %struct.ichdev, %struct.ichdev* %10, i32 0, i32 0
  %85 = load i32, i32* %84, align 8
  %86 = icmp eq i32 %85, 1
  br i1 %86, label %87, label %101

; <label>:87:                                     ; preds = %82
  %88 = getelementptr inbounds %struct.intel8x0, %struct.intel8x0* %5, i32 0, i32 10
  %89 = load i32, i32* %88, align 4
  %90 = icmp slt i32 %89, 0
  br i1 %90, label %91, label %101

; <label>:91:                                     ; preds = %87
  %92 = getelementptr inbounds %struct.ichdev, %struct.ichdev* %10, i32 0, i32 23
  %93 = load %struct.ac97_pcm*, %struct.ac97_pcm** %92, align 8
  %94 = getelementptr inbounds %struct.ac97_pcm, %struct.ac97_pcm* %93, i32 0, i32 5
  %95 = getelementptr inbounds [2 x %struct.anon.72], [2 x %struct.anon.72]* %94, i64 0, i64 0
  %96 = getelementptr inbounds %struct.anon.72, %struct.anon.72* %95, i32 0, i32 3
  %97 = getelementptr inbounds [4 x %struct.snd_ac97*], [4 x %struct.snd_ac97*]* %96, i64 0, i64 0
  %98 = load %struct.snd_ac97*, %struct.snd_ac97** %97, align 8
  %99 = call i32 @params_rate(%struct.snd_pcm_hw_params* %1)
  %100 = call i32 @snd_ac97_set_rate(%struct.snd_ac97* %98, i32 58, i32 %99)
  br label %101

; <label>:101:                                    ; preds = %68, %91, %87, %82, %32
  %.0 = phi i32 [ %35, %32 ], [ %80, %82 ], [ %80, %87 ], [ %80, %91 ], [ %80, %68 ]
  ret i32 %.0
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @snd_intel8x0_hw_free(%struct.snd_pcm_substream*) #0 {
  %2 = getelementptr inbounds %struct.snd_pcm_substream, %struct.snd_pcm_substream* %0, i32 0, i32 2
  %3 = load i8*, i8** %2, align 8
  %4 = bitcast i8* %3 to %struct.intel8x0*
  %5 = getelementptr inbounds %struct.snd_pcm_substream, %struct.snd_pcm_substream* %0, i32 0, i32 11
  %6 = load %struct.snd_pcm_runtime*, %struct.snd_pcm_runtime** %5, align 8
  %7 = getelementptr inbounds %struct.snd_pcm_runtime, %struct.snd_pcm_runtime* %6, i32 0, i32 43
  %8 = load i8*, i8** %7, align 8
  %9 = bitcast i8* %8 to %struct.ichdev*
  %10 = getelementptr inbounds %struct.ichdev, %struct.ichdev* %9, i32 0, i32 24
  %11 = load i32, i32* %10, align 8
  %12 = icmp ne i32 %11, 0
  br i1 %12, label %13, label %18

; <label>:13:                                     ; preds = %1
  %14 = getelementptr inbounds %struct.ichdev, %struct.ichdev* %9, i32 0, i32 23
  %15 = load %struct.ac97_pcm*, %struct.ac97_pcm** %14, align 8
  %16 = call i32 @snd_ac97_pcm_close(%struct.ac97_pcm* %15)
  %17 = getelementptr inbounds %struct.ichdev, %struct.ichdev* %9, i32 0, i32 24
  store i32 0, i32* %17, align 8
  br label %18

; <label>:18:                                     ; preds = %13, %1
  %19 = getelementptr inbounds %struct.intel8x0, %struct.intel8x0* %4, i32 0, i32 9
  %20 = load i16, i16* %19, align 8
  %21 = lshr i16 %20, 8
  %22 = and i16 %21, 1
  %23 = zext i16 %22 to i32
  %24 = icmp ne i32 %23, 0
  br i1 %24, label %25, label %35

; <label>:25:                                     ; preds = %18
  %26 = getelementptr inbounds %struct.ichdev, %struct.ichdev* %9, i32 0, i32 25
  %27 = load i8, i8* %26, align 4
  %28 = and i8 %27, 1
  %29 = zext i8 %28 to i32
  %30 = icmp ne i32 %29, 0
  br i1 %30, label %31, label %35

; <label>:31:                                     ; preds = %25
  %32 = getelementptr inbounds %struct.ichdev, %struct.ichdev* %9, i32 0, i32 25
  %33 = load i8, i8* %32, align 4
  %34 = and i8 %33, -2
  store i8 %34, i8* %32, align 4
  br label %35

; <label>:35:                                     ; preds = %31, %25, %18
  %36 = call i32 @snd_pcm_lib_free_pages(%struct.snd_pcm_substream* %0)
  ret i32 %36
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @snd_intel8x0_pcm_prepare(%struct.snd_pcm_substream*) #0 {
  %2 = getelementptr inbounds %struct.snd_pcm_substream, %struct.snd_pcm_substream* %0, i32 0, i32 2
  %3 = load i8*, i8** %2, align 8
  %4 = bitcast i8* %3 to %struct.intel8x0*
  %5 = getelementptr inbounds %struct.snd_pcm_substream, %struct.snd_pcm_substream* %0, i32 0, i32 11
  %6 = load %struct.snd_pcm_runtime*, %struct.snd_pcm_runtime** %5, align 8
  %7 = getelementptr inbounds %struct.snd_pcm_substream, %struct.snd_pcm_substream* %0, i32 0, i32 11
  %8 = load %struct.snd_pcm_runtime*, %struct.snd_pcm_runtime** %7, align 8
  %9 = getelementptr inbounds %struct.snd_pcm_runtime, %struct.snd_pcm_runtime* %8, i32 0, i32 43
  %10 = load i8*, i8** %9, align 8
  %11 = bitcast i8* %10 to %struct.ichdev*
  %12 = getelementptr inbounds %struct.snd_pcm_runtime, %struct.snd_pcm_runtime* %6, i32 0, i32 50
  %13 = load i64, i64* %12, align 8
  %14 = trunc i64 %13 to i32
  %15 = getelementptr inbounds %struct.ichdev, %struct.ichdev* %11, i32 0, i32 5
  store i32 %14, i32* %15, align 8
  %16 = call i64 @snd_pcm_lib_buffer_bytes(%struct.snd_pcm_substream* %0)
  %17 = trunc i64 %16 to i32
  %18 = getelementptr inbounds %struct.ichdev, %struct.ichdev* %11, i32 0, i32 6
  store i32 %17, i32* %18, align 4
  %19 = call i64 @snd_pcm_lib_period_bytes(%struct.snd_pcm_substream* %0)
  %20 = trunc i64 %19 to i32
  %21 = getelementptr inbounds %struct.ichdev, %struct.ichdev* %11, i32 0, i32 7
  store i32 %20, i32* %21, align 8
  %22 = getelementptr inbounds %struct.ichdev, %struct.ichdev* %11, i32 0, i32 0
  %23 = load i32, i32* %22, align 8
  %24 = icmp eq i32 %23, 1
  br i1 %24, label %25, label %35

; <label>:25:                                     ; preds = %1
  call void @snd_intel8x0_setup_pcm_out(%struct.intel8x0* %4, %struct.snd_pcm_runtime* %6)
  %26 = getelementptr inbounds %struct.intel8x0, %struct.intel8x0* %4, i32 0, i32 0
  %27 = load i32, i32* %26, align 8
  %28 = icmp eq i32 %27, 1
  br i1 %28, label %29, label %35

; <label>:29:                                     ; preds = %25
  %30 = getelementptr inbounds %struct.snd_pcm_runtime, %struct.snd_pcm_runtime* %6, i32 0, i32 22
  %31 = load i32, i32* %30, align 4
  %32 = icmp ugt i32 %31, 16
  %33 = select i1 %32, i32 2, i32 1
  %34 = getelementptr inbounds %struct.ichdev, %struct.ichdev* %11, i32 0, i32 10
  store i32 %33, i32* %34, align 4
  br label %35

; <label>:35:                                     ; preds = %25, %29, %1
  call void @snd_intel8x0_setup_periods(%struct.intel8x0* %4, %struct.ichdev* %11)
  ret i32 0
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @snd_intel8x0_pcm_trigger(%struct.snd_pcm_substream*, i32) #0 {
  %3 = getelementptr inbounds %struct.snd_pcm_substream, %struct.snd_pcm_substream* %0, i32 0, i32 2
  %4 = load i8*, i8** %3, align 8
  %5 = bitcast i8* %4 to %struct.intel8x0*
  %6 = getelementptr inbounds %struct.snd_pcm_substream, %struct.snd_pcm_substream* %0, i32 0, i32 11
  %7 = load %struct.snd_pcm_runtime*, %struct.snd_pcm_runtime** %6, align 8
  %8 = getelementptr inbounds %struct.snd_pcm_runtime, %struct.snd_pcm_runtime* %7, i32 0, i32 43
  %9 = load i8*, i8** %8, align 8
  %10 = bitcast i8* %9 to %struct.ichdev*
  %11 = getelementptr inbounds %struct.ichdev, %struct.ichdev* %10, i32 0, i32 1
  %12 = load i64, i64* %11, align 8
  switch i32 %1, label %45 [
    i32 6, label %13
    i32 1, label %17
    i32 4, label %17
    i32 5, label %21
    i32 0, label %27
    i32 3, label %26
  ]

; <label>:13:                                     ; preds = %2
  %14 = getelementptr inbounds %struct.ichdev, %struct.ichdev* %10, i32 0, i32 25
  %15 = load i8, i8* %14, align 4
  %16 = and i8 %15, -3
  store i8 %16, i8* %14, align 4
  br label %17

; <label>:17:                                     ; preds = %13, %2, %2
  %18 = getelementptr inbounds %struct.ichdev, %struct.ichdev* %10, i32 0, i32 9
  %19 = load i32, i32* %18, align 8
  %20 = getelementptr inbounds %struct.ichdev, %struct.ichdev* %10, i32 0, i32 11
  store i32 %19, i32* %20, align 8
  br label %27

; <label>:21:                                     ; preds = %2
  %22 = getelementptr inbounds %struct.ichdev, %struct.ichdev* %10, i32 0, i32 25
  %23 = load i8, i8* %22, align 4
  %24 = and i8 %23, -3
  %25 = or i8 %24, 2
  store i8 %25, i8* %22, align 4
  br label %27

; <label>:26:                                     ; preds = %2
  br label %27

; <label>:27:                                     ; preds = %2, %21, %26, %17
  %.01 = phi i8 [ 16, %26 ], [ 17, %17 ], [ 0, %21 ], [ 0, %2 ]
  %28 = add i64 %12, 11
  %29 = trunc i64 %28 to i32
  call void @iputbyte(%struct.intel8x0* %5, i32 %29, i8 zeroext %.01)
  %30 = icmp eq i32 %1, 0
  br i1 %30, label %31, label %45

; <label>:31:                                     ; preds = %31, %27
  %32 = getelementptr inbounds %struct.ichdev, %struct.ichdev* %10, i32 0, i32 19
  %33 = load i32, i32* %32, align 8
  %34 = zext i32 %33 to i64
  %35 = add i64 %12, %34
  %36 = trunc i64 %35 to i32
  %37 = call zeroext i8 @igetbyte(%struct.intel8x0* %5, i32 %36)
  %38 = zext i8 %37 to i32
  %39 = and i32 %38, 1
  %40 = icmp ne i32 %39, 0
  %41 = xor i1 %40, true
  br i1 %41, label %31, label %42

; <label>:42:                                     ; preds = %31
  %43 = add i64 %12, 11
  %44 = trunc i64 %43 to i32
  call void @iputbyte(%struct.intel8x0* %5, i32 %44, i8 zeroext 2)
  br label %45

; <label>:45:                                     ; preds = %27, %42, %2
  %.0 = phi i32 [ -22, %2 ], [ 0, %42 ], [ 0, %27 ]
  ret i32 %.0
}

; Function Attrs: noinline nounwind uwtable
define internal i64 @snd_intel8x0_pcm_pointer(%struct.snd_pcm_substream*) #0 {
  %2 = getelementptr inbounds %struct.snd_pcm_substream, %struct.snd_pcm_substream* %0, i32 0, i32 2
  %3 = load i8*, i8** %2, align 8
  %4 = bitcast i8* %3 to %struct.intel8x0*
  %5 = getelementptr inbounds %struct.snd_pcm_substream, %struct.snd_pcm_substream* %0, i32 0, i32 11
  %6 = load %struct.snd_pcm_runtime*, %struct.snd_pcm_runtime** %5, align 8
  %7 = getelementptr inbounds %struct.snd_pcm_runtime, %struct.snd_pcm_runtime* %6, i32 0, i32 43
  %8 = load i8*, i8** %7, align 8
  %9 = bitcast i8* %8 to %struct.ichdev*
  %10 = getelementptr inbounds %struct.intel8x0, %struct.intel8x0* %4, i32 0, i32 20
  %11 = getelementptr inbounds %struct.spinlock, %struct.spinlock* %10, i32 0, i32 0
  %12 = bitcast %union.anon.1* %11 to %struct.raw_spinlock*
  call void @_raw_spin_lock(%struct.raw_spinlock* %12) #3
  br label %13

; <label>:13:                                     ; preds = %59, %1
  %.0 = phi i32 [ 10, %1 ], [ %60, %59 ]
  %14 = getelementptr inbounds %struct.ichdev, %struct.ichdev* %9, i32 0, i32 1
  %15 = load i64, i64* %14, align 8
  %16 = add i64 %15, 4
  %17 = trunc i64 %16 to i32
  %18 = call zeroext i8 @igetbyte(%struct.intel8x0* %4, i32 %17)
  %19 = zext i8 %18 to i32
  %20 = getelementptr inbounds %struct.ichdev, %struct.ichdev* %9, i32 0, i32 1
  %21 = load i64, i64* %20, align 8
  %22 = getelementptr inbounds %struct.ichdev, %struct.ichdev* %9, i32 0, i32 20
  %23 = load i32, i32* %22, align 4
  %24 = zext i32 %23 to i64
  %25 = add i64 %21, %24
  %26 = trunc i64 %25 to i32
  %27 = call zeroext i16 @igetword(%struct.intel8x0* %4, i32 %26)
  %28 = zext i16 %27 to i64
  %29 = getelementptr inbounds %struct.ichdev, %struct.ichdev* %9, i32 0, i32 9
  %30 = load i32, i32* %29, align 8
  %31 = icmp eq i64 %28, 0
  br i1 %31, label %32, label %33

; <label>:32:                                     ; preds = %13
  call void @__const_udelay(i64 42950)
  br label %59

; <label>:33:                                     ; preds = %13
  %34 = getelementptr inbounds %struct.ichdev, %struct.ichdev* %9, i32 0, i32 1
  %35 = load i64, i64* %34, align 8
  %36 = add i64 %35, 4
  %37 = trunc i64 %36 to i32
  %38 = call zeroext i8 @igetbyte(%struct.intel8x0* %4, i32 %37)
  %39 = zext i8 %38 to i32
  %40 = icmp ne i32 %19, %39
  br i1 %40, label %59, label %41

; <label>:41:                                     ; preds = %33
  %42 = getelementptr inbounds %struct.intel8x0, %struct.intel8x0* %4, i32 0, i32 9
  %43 = load i16, i16* %42, align 8
  %44 = lshr i16 %43, 12
  %45 = and i16 %44, 1
  %46 = zext i16 %45 to i32
  %47 = icmp ne i32 %46, 0
  br i1 %47, label %.loopexit, label %48

; <label>:48:                                     ; preds = %41
  %49 = getelementptr inbounds %struct.ichdev, %struct.ichdev* %9, i32 0, i32 1
  %50 = load i64, i64* %49, align 8
  %51 = getelementptr inbounds %struct.ichdev, %struct.ichdev* %9, i32 0, i32 20
  %52 = load i32, i32* %51, align 4
  %53 = zext i32 %52 to i64
  %54 = add i64 %50, %53
  %55 = trunc i64 %54 to i32
  %56 = call zeroext i16 @igetword(%struct.intel8x0* %4, i32 %55)
  %57 = zext i16 %56 to i64
  %58 = icmp eq i64 %28, %57
  br i1 %58, label %.loopexit, label %59

; <label>:59:                                     ; preds = %48, %33, %32
  %60 = add nsw i32 %.0, -1
  %61 = icmp ne i32 %.0, 0
  br i1 %61, label %13, label %.loopexit

.loopexit:                                        ; preds = %59, %48, %41
  %62 = getelementptr inbounds %struct.ichdev, %struct.ichdev* %9, i32 0, i32 11
  %63 = load i32, i32* %62, align 8
  %64 = zext i32 %63 to i64
  %65 = icmp ne i64 %28, 0
  br i1 %65, label %66, label %95

; <label>:66:                                     ; preds = %.loopexit
  %67 = getelementptr inbounds %struct.ichdev, %struct.ichdev* %9, i32 0, i32 10
  %68 = load i32, i32* %67, align 4
  %69 = zext i32 %68 to i64
  %70 = shl i64 %28, %69
  %71 = getelementptr inbounds %struct.ichdev, %struct.ichdev* %9, i32 0, i32 8
  %72 = load i32, i32* %71, align 4
  %73 = zext i32 %72 to i64
  %74 = sub i64 %73, %70
  %75 = zext i32 %30 to i64
  %76 = add i64 %74, %75
  %77 = getelementptr inbounds %struct.ichdev, %struct.ichdev* %9, i32 0, i32 11
  %78 = load i32, i32* %77, align 8
  %79 = zext i32 %78 to i64
  %80 = icmp ult i64 %76, %79
  br i1 %80, label %81, label %95

; <label>:81:                                     ; preds = %66
  %82 = getelementptr inbounds %struct.ichdev, %struct.ichdev* %9, i32 0, i32 8
  %83 = load i32, i32* %82, align 4
  %84 = udiv i32 %30, %83
  %85 = getelementptr inbounds %struct.ichdev, %struct.ichdev* %9, i32 0, i32 11
  %86 = load i32, i32* %85, align 8
  %87 = getelementptr inbounds %struct.ichdev, %struct.ichdev* %9, i32 0, i32 8
  %88 = load i32, i32* %87, align 4
  %89 = udiv i32 %86, %88
  %90 = icmp eq i32 %84, %89
  br i1 %90, label %91, label %95

; <label>:91:                                     ; preds = %81
  %92 = getelementptr inbounds %struct.ichdev, %struct.ichdev* %9, i32 0, i32 11
  %93 = load i32, i32* %92, align 8
  %94 = zext i32 %93 to i64
  br label %95

; <label>:95:                                     ; preds = %66, %91, %81, %.loopexit
  %.2 = phi i64 [ %64, %.loopexit ], [ %76, %66 ], [ %94, %91 ], [ %76, %81 ]
  %96 = trunc i64 %.2 to i32
  %97 = getelementptr inbounds %struct.ichdev, %struct.ichdev* %9, i32 0, i32 11
  store i32 %96, i32* %97, align 8
  %98 = getelementptr inbounds %struct.intel8x0, %struct.intel8x0* %4, i32 0, i32 20
  %99 = getelementptr inbounds %struct.spinlock, %struct.spinlock* %98, i32 0, i32 0
  %100 = bitcast %union.anon.1* %99 to %struct.raw_spinlock*
  call void @__raw_spin_unlock(%struct.raw_spinlock* %100) #3
  %101 = getelementptr inbounds %struct.ichdev, %struct.ichdev* %9, i32 0, i32 6
  %102 = load i32, i32* %101, align 4
  %103 = zext i32 %102 to i64
  %104 = icmp uge i64 %.2, %103
  br i1 %104, label %109, label %105

; <label>:105:                                    ; preds = %95
  %106 = getelementptr inbounds %struct.snd_pcm_substream, %struct.snd_pcm_substream* %0, i32 0, i32 11
  %107 = load %struct.snd_pcm_runtime*, %struct.snd_pcm_runtime** %106, align 8
  %108 = call i64 @bytes_to_frames(%struct.snd_pcm_runtime* %107, i64 %.2)
  br label %109

; <label>:109:                                    ; preds = %95, %105
  %.02 = phi i64 [ %108, %105 ], [ 0, %95 ]
  ret i64 %.02
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @snd_intel8x0_pcm_open(%struct.snd_pcm_substream*, %struct.ichdev*) #0 {
  %3 = getelementptr inbounds %struct.snd_pcm_substream, %struct.snd_pcm_substream* %0, i32 0, i32 2
  %4 = load i8*, i8** %3, align 8
  %5 = bitcast i8* %4 to %struct.intel8x0*
  %6 = getelementptr inbounds %struct.snd_pcm_substream, %struct.snd_pcm_substream* %0, i32 0, i32 11
  %7 = load %struct.snd_pcm_runtime*, %struct.snd_pcm_runtime** %6, align 8
  %8 = getelementptr inbounds %struct.ichdev, %struct.ichdev* %1, i32 0, i32 4
  store %struct.snd_pcm_substream* %0, %struct.snd_pcm_substream** %8, align 8
  %9 = getelementptr inbounds %struct.snd_pcm_runtime, %struct.snd_pcm_runtime* %7, i32 0, i32 45
  %10 = bitcast %struct.snd_pcm_hardware* %9 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %10, i8* bitcast (%struct.snd_pcm_hardware* @snd_intel8x0_stream to i8*), i64 80, i32 8, i1 false)
  %11 = getelementptr inbounds %struct.ichdev, %struct.ichdev* %1, i32 0, i32 23
  %12 = load %struct.ac97_pcm*, %struct.ac97_pcm** %11, align 8
  %13 = getelementptr inbounds %struct.ac97_pcm, %struct.ac97_pcm* %12, i32 0, i32 4
  %14 = load i32, i32* %13, align 8
  %15 = getelementptr inbounds %struct.snd_pcm_runtime, %struct.snd_pcm_runtime* %7, i32 0, i32 45
  %16 = getelementptr inbounds %struct.snd_pcm_hardware, %struct.snd_pcm_hardware* %15, i32 0, i32 2
  store i32 %14, i32* %16, align 8
  %17 = call i32 @snd_pcm_limit_hw_rates(%struct.snd_pcm_runtime* %7)
  %18 = getelementptr inbounds %struct.intel8x0, %struct.intel8x0* %5, i32 0, i32 0
  %19 = load i32, i32* %18, align 8
  %20 = icmp eq i32 %19, 2
  br i1 %20, label %21, label %26

; <label>:21:                                     ; preds = %2
  %22 = getelementptr inbounds %struct.snd_pcm_runtime, %struct.snd_pcm_runtime* %7, i32 0, i32 45
  %23 = getelementptr inbounds %struct.snd_pcm_hardware, %struct.snd_pcm_hardware* %22, i32 0, i32 7
  store i64 65536, i64* %23, align 8
  %24 = getelementptr inbounds %struct.snd_pcm_runtime, %struct.snd_pcm_runtime* %7, i32 0, i32 45
  %25 = getelementptr inbounds %struct.snd_pcm_hardware, %struct.snd_pcm_hardware* %24, i32 0, i32 9
  store i64 65536, i64* %25, align 8
  br label %26

; <label>:26:                                     ; preds = %21, %2
  %27 = call i32 @snd_pcm_hw_constraint_integer(%struct.snd_pcm_runtime* %7, i32 15)
  %28 = icmp slt i32 %27, 0
  br i1 %28, label %32, label %29

; <label>:29:                                     ; preds = %26
  %30 = bitcast %struct.ichdev* %1 to i8*
  %31 = getelementptr inbounds %struct.snd_pcm_runtime, %struct.snd_pcm_runtime* %7, i32 0, i32 43
  store i8* %30, i8** %31, align 8
  br label %32

; <label>:32:                                     ; preds = %26, %29
  %.0 = phi i32 [ 0, %29 ], [ %27, %26 ]
  ret i32 %.0
}

declare i32 @snd_pcm_hw_constraint_list(%struct.snd_pcm_runtime*, i32, i32, %struct.snd_pcm_hw_constraint_list*) #1

declare i32 @snd_ac97_pcm_double_rate_rules(%struct.snd_pcm_runtime*) #1

declare i32 @snd_pcm_hw_constraint_msbits(%struct.snd_pcm_runtime*, i32, i32, i32) #1

declare i32 @snd_pcm_limit_hw_rates(%struct.snd_pcm_runtime*) #1

declare i32 @snd_pcm_hw_constraint_integer(%struct.snd_pcm_runtime*, i32) #1

; Function Attrs: noinline nounwind uwtable
define internal i32 @params_rate(%struct.snd_pcm_hw_params*) #0 {
  %2 = call %struct.snd_interval* @hw_param_interval_c(%struct.snd_pcm_hw_params* %0, i32 11)
  %3 = getelementptr inbounds %struct.snd_interval, %struct.snd_interval* %2, i32 0, i32 0
  %4 = load i32, i32* %3, align 4
  ret i32 %4
}

declare i32 @snd_pcm_lib_malloc_pages(%struct.snd_pcm_substream*, i64) #1

; Function Attrs: noinline nounwind uwtable
define internal i32 @params_buffer_bytes(%struct.snd_pcm_hw_params*) #0 {
  %2 = call %struct.snd_interval* @hw_param_interval_c(%struct.snd_pcm_hw_params* %0, i32 18)
  %3 = getelementptr inbounds %struct.snd_interval, %struct.snd_interval* %2, i32 0, i32 0
  %4 = load i32, i32* %3, align 4
  ret i32 %4
}

declare i32 @snd_ac97_pcm_close(%struct.ac97_pcm*) #1

declare i32 @snd_ac97_pcm_open(%struct.ac97_pcm*, i32, i32, i16 zeroext) #1

; Function Attrs: noinline nounwind uwtable
define internal i32 @params_channels(%struct.snd_pcm_hw_params*) #0 {
  %2 = call %struct.snd_interval* @hw_param_interval_c(%struct.snd_pcm_hw_params* %0, i32 10)
  %3 = getelementptr inbounds %struct.snd_interval, %struct.snd_interval* %2, i32 0, i32 0
  %4 = load i32, i32* %3, align 4
  ret i32 %4
}

declare i32 @snd_ac97_set_rate(%struct.snd_ac97*, i32, i32) #1

; Function Attrs: noinline nounwind uwtable
define internal %struct.snd_interval* @hw_param_interval_c(%struct.snd_pcm_hw_params*, i32) #0 {
  %3 = getelementptr inbounds %struct.snd_pcm_hw_params, %struct.snd_pcm_hw_params* %0, i32 0, i32 3
  %4 = sub nsw i32 %1, 8
  %5 = sext i32 %4 to i64
  %6 = getelementptr inbounds [12 x %struct.snd_interval], [12 x %struct.snd_interval]* %3, i64 0, i64 %5
  ret %struct.snd_interval* %6
}

declare i32 @snd_pcm_lib_free_pages(%struct.snd_pcm_substream*) #1

; Function Attrs: noinline nounwind uwtable
define internal i64 @snd_pcm_lib_buffer_bytes(%struct.snd_pcm_substream*) #0 {
  %2 = getelementptr inbounds %struct.snd_pcm_substream, %struct.snd_pcm_substream* %0, i32 0, i32 11
  %3 = load %struct.snd_pcm_runtime*, %struct.snd_pcm_runtime** %2, align 8
  %4 = getelementptr inbounds %struct.snd_pcm_runtime, %struct.snd_pcm_runtime* %3, i32 0, i32 18
  %5 = load i64, i64* %4, align 8
  %6 = call i64 @frames_to_bytes(%struct.snd_pcm_runtime* %3, i64 %5)
  ret i64 %6
}

; Function Attrs: noinline nounwind uwtable
define internal i64 @snd_pcm_lib_period_bytes(%struct.snd_pcm_substream*) #0 {
  %2 = getelementptr inbounds %struct.snd_pcm_substream, %struct.snd_pcm_substream* %0, i32 0, i32 11
  %3 = load %struct.snd_pcm_runtime*, %struct.snd_pcm_runtime** %2, align 8
  %4 = getelementptr inbounds %struct.snd_pcm_runtime, %struct.snd_pcm_runtime* %3, i32 0, i32 16
  %5 = load i64, i64* %4, align 8
  %6 = call i64 @frames_to_bytes(%struct.snd_pcm_runtime* %3, i64 %5)
  ret i64 %6
}

; Function Attrs: noinline nounwind uwtable
define internal void @snd_intel8x0_setup_pcm_out(%struct.intel8x0*, %struct.snd_pcm_runtime*) #0 {
  %3 = getelementptr inbounds %struct.snd_pcm_runtime, %struct.snd_pcm_runtime* %1, i32 0, i32 14
  %4 = load i32, i32* %3, align 4
  %5 = icmp ugt i32 %4, 48000
  %6 = zext i1 %5 to i32
  %7 = getelementptr inbounds %struct.intel8x0, %struct.intel8x0* %0, i32 0, i32 20
  %8 = getelementptr inbounds %struct.spinlock, %struct.spinlock* %7, i32 0, i32 0
  %9 = bitcast %union.anon.1* %8 to %struct.raw_spinlock*
  call void @_raw_spin_lock_irq(%struct.raw_spinlock* %9) #3
  %10 = getelementptr inbounds %struct.intel8x0, %struct.intel8x0* %0, i32 0, i32 0
  %11 = load i32, i32* %10, align 8
  switch i32 %11, label %42 [
    i32 3, label %12
    i32 2, label %27
  ]

; <label>:12:                                     ; preds = %2
  %13 = call i32 @igetdword(%struct.intel8x0* %0, i32 0)
  %14 = and i32 %13, -769
  %15 = getelementptr inbounds %struct.snd_pcm_runtime, %struct.snd_pcm_runtime* %1, i32 0, i32 15
  %16 = load i32, i32* %15, align 8
  %17 = icmp eq i32 %16, 4
  %18 = icmp ne i32 %6, 0
  %or.cond = or i1 %17, %18
  br i1 %or.cond, label %19, label %21

; <label>:19:                                     ; preds = %12
  %20 = or i32 %14, 256
  br label %26

; <label>:21:                                     ; preds = %12
  %22 = getelementptr inbounds %struct.snd_pcm_runtime, %struct.snd_pcm_runtime* %1, i32 0, i32 15
  %23 = load i32, i32* %22, align 8
  %24 = icmp eq i32 %23, 6
  %25 = or i32 %14, 512
  %. = select i1 %24, i32 %25, i32 %14
  br label %26

; <label>:26:                                     ; preds = %21, %19
  %.1 = phi i32 [ %20, %19 ], [ %., %21 ]
  call void @iputdword(%struct.intel8x0* %0, i32 0, i32 %.1)
  br label %87

; <label>:27:                                     ; preds = %2
  %28 = call i32 @igetdword(%struct.intel8x0* %0, i32 44)
  %29 = and i32 %28, -193
  %30 = getelementptr inbounds %struct.snd_pcm_runtime, %struct.snd_pcm_runtime* %1, i32 0, i32 15
  %31 = load i32, i32* %30, align 8
  %32 = icmp eq i32 %31, 4
  %33 = icmp ne i32 %6, 0
  %or.cond1 = or i1 %32, %33
  br i1 %or.cond1, label %34, label %36

; <label>:34:                                     ; preds = %27
  %35 = or i32 %29, 64
  br label %41

; <label>:36:                                     ; preds = %27
  %37 = getelementptr inbounds %struct.snd_pcm_runtime, %struct.snd_pcm_runtime* %1, i32 0, i32 15
  %38 = load i32, i32* %37, align 8
  %39 = icmp eq i32 %38, 6
  %40 = or i32 %29, 128
  %.10 = select i1 %39, i32 %40, i32 %29
  br label %41

; <label>:41:                                     ; preds = %36, %34
  %.3 = phi i32 [ %35, %34 ], [ %.10, %36 ]
  call void @iputdword(%struct.intel8x0* %0, i32 44, i32 %.3)
  br label %87

; <label>:42:                                     ; preds = %2
  %43 = call i32 @igetdword(%struct.intel8x0* %0, i32 44)
  %44 = and i32 %43, -7340033
  %45 = getelementptr inbounds %struct.snd_pcm_runtime, %struct.snd_pcm_runtime* %1, i32 0, i32 15
  %46 = load i32, i32* %45, align 8
  %47 = icmp eq i32 %46, 4
  %48 = icmp ne i32 %6, 0
  %or.cond11 = or i1 %47, %48
  br i1 %or.cond11, label %49, label %51

; <label>:49:                                     ; preds = %42
  %50 = or i32 %44, 1048576
  br label %62

; <label>:51:                                     ; preds = %42
  %52 = getelementptr inbounds %struct.snd_pcm_runtime, %struct.snd_pcm_runtime* %1, i32 0, i32 15
  %53 = load i32, i32* %52, align 8
  %54 = icmp eq i32 %53, 6
  br i1 %54, label %55, label %57

; <label>:55:                                     ; preds = %51
  %56 = or i32 %44, 2097152
  br label %62

; <label>:57:                                     ; preds = %51
  %58 = getelementptr inbounds %struct.snd_pcm_runtime, %struct.snd_pcm_runtime* %1, i32 0, i32 15
  %59 = load i32, i32* %58, align 8
  %60 = icmp eq i32 %59, 8
  %61 = or i32 %44, 3145728
  %.12 = select i1 %60, i32 %61, i32 %44
  br label %62

; <label>:62:                                     ; preds = %55, %57, %49
  %.6 = phi i32 [ %50, %49 ], [ %56, %55 ], [ %.12, %57 ]
  %63 = getelementptr inbounds %struct.intel8x0, %struct.intel8x0* %0, i32 0, i32 0
  %64 = load i32, i32* %63, align 8
  %65 = icmp eq i32 %64, 4
  br i1 %65, label %66, label %77

; <label>:66:                                     ; preds = %62
  %67 = and i32 %.6, 3145728
  %68 = icmp ne i32 %67, 0
  br i1 %68, label %69, label %86

; <label>:69:                                     ; preds = %66
  %70 = and i32 %.6, -3145729
  call void @iputdword(%struct.intel8x0* %0, i32 44, i32 %70)
  %71 = getelementptr inbounds %struct.intel8x0, %struct.intel8x0* %0, i32 0, i32 20
  %72 = getelementptr inbounds %struct.spinlock, %struct.spinlock* %71, i32 0, i32 0
  %73 = bitcast %union.anon.1* %72 to %struct.raw_spinlock*
  call void @__raw_spin_unlock_irq(%struct.raw_spinlock* %73) #3
  call void @msleep(i32 50)
  %74 = getelementptr inbounds %struct.intel8x0, %struct.intel8x0* %0, i32 0, i32 20
  %75 = getelementptr inbounds %struct.spinlock, %struct.spinlock* %74, i32 0, i32 0
  %76 = bitcast %union.anon.1* %75 to %struct.raw_spinlock*
  call void @_raw_spin_lock_irq(%struct.raw_spinlock* %76) #3
  br label %86

; <label>:77:                                     ; preds = %62
  %78 = getelementptr inbounds %struct.intel8x0, %struct.intel8x0* %0, i32 0, i32 0
  %79 = load i32, i32* %78, align 8
  %80 = icmp eq i32 %79, 1
  br i1 %80, label %81, label %86

; <label>:81:                                     ; preds = %77
  %82 = getelementptr inbounds %struct.snd_pcm_runtime, %struct.snd_pcm_runtime* %1, i32 0, i32 22
  %83 = load i32, i32* %82, align 4
  %84 = icmp ugt i32 %83, 16
  %85 = or i32 %.6, 4194304
  %..6 = select i1 %84, i32 %85, i32 %.6
  br label %86

; <label>:86:                                     ; preds = %77, %81, %66, %69
  %.9 = phi i32 [ %.6, %69 ], [ %.6, %66 ], [ %..6, %81 ], [ %.6, %77 ]
  call void @iputdword(%struct.intel8x0* %0, i32 44, i32 %.9)
  br label %87

; <label>:87:                                     ; preds = %86, %41, %26
  %88 = getelementptr inbounds %struct.intel8x0, %struct.intel8x0* %0, i32 0, i32 20
  %89 = getelementptr inbounds %struct.spinlock, %struct.spinlock* %88, i32 0, i32 0
  %90 = bitcast %union.anon.1* %89 to %struct.raw_spinlock*
  call void @__raw_spin_unlock_irq(%struct.raw_spinlock* %90) #3
  ret void
}

; Function Attrs: noinline nounwind uwtable
define internal void @snd_intel8x0_setup_periods(%struct.intel8x0*, %struct.ichdev*) #0 {
  %3 = getelementptr inbounds %struct.ichdev, %struct.ichdev* %1, i32 0, i32 2
  %4 = load i32*, i32** %3, align 8
  %5 = getelementptr inbounds %struct.ichdev, %struct.ichdev* %1, i32 0, i32 1
  %6 = load i64, i64* %5, align 8
  %7 = add i64 %6, 0
  %8 = trunc i64 %7 to i32
  %9 = getelementptr inbounds %struct.ichdev, %struct.ichdev* %1, i32 0, i32 3
  %10 = load i32, i32* %9, align 8
  call void @iputdword(%struct.intel8x0* %0, i32 %8, i32 %10)
  %11 = getelementptr inbounds %struct.ichdev, %struct.ichdev* %1, i32 0, i32 6
  %12 = load i32, i32* %11, align 4
  %13 = getelementptr inbounds %struct.ichdev, %struct.ichdev* %1, i32 0, i32 7
  %14 = load i32, i32* %13, align 8
  %15 = icmp eq i32 %12, %14
  %16 = getelementptr inbounds %struct.ichdev, %struct.ichdev* %1, i32 0, i32 16
  br i1 %15, label %17, label %59

; <label>:17:                                     ; preds = %2
  store i32 2, i32* %16, align 4
  %18 = getelementptr inbounds %struct.ichdev, %struct.ichdev* %1, i32 0, i32 17
  store i32 2, i32* %18, align 8
  %19 = getelementptr inbounds %struct.ichdev, %struct.ichdev* %1, i32 0, i32 7
  %20 = load i32, i32* %19, align 8
  %21 = lshr i32 %20, 1
  %22 = getelementptr inbounds %struct.ichdev, %struct.ichdev* %1, i32 0, i32 8
  store i32 %21, i32* %22, align 4
  br label %23

; <label>:23:                                     ; preds = %25, %17
  %.0 = phi i32 [ 0, %17 ], [ %58, %25 ]
  %24 = icmp slt i32 %.0, 64
  br i1 %24, label %25, label %96

; <label>:25:                                     ; preds = %23
  %26 = getelementptr inbounds %struct.ichdev, %struct.ichdev* %1, i32 0, i32 5
  %27 = load i32, i32* %26, align 8
  %28 = add nsw i32 %.0, 0
  %29 = sext i32 %28 to i64
  %30 = getelementptr inbounds i32, i32* %4, i64 %29
  store i32 %27, i32* %30, align 4
  %31 = getelementptr inbounds %struct.ichdev, %struct.ichdev* %1, i32 0, i32 8
  %32 = load i32, i32* %31, align 4
  %33 = getelementptr inbounds %struct.ichdev, %struct.ichdev* %1, i32 0, i32 10
  %34 = load i32, i32* %33, align 4
  %35 = lshr i32 %32, %34
  %36 = or i32 -2147483648, %35
  %37 = add nsw i32 %.0, 1
  %38 = sext i32 %37 to i64
  %39 = getelementptr inbounds i32, i32* %4, i64 %38
  store i32 %36, i32* %39, align 4
  %40 = getelementptr inbounds %struct.ichdev, %struct.ichdev* %1, i32 0, i32 5
  %41 = load i32, i32* %40, align 8
  %42 = getelementptr inbounds %struct.ichdev, %struct.ichdev* %1, i32 0, i32 6
  %43 = load i32, i32* %42, align 4
  %44 = lshr i32 %43, 1
  %45 = add i32 %41, %44
  %46 = add nsw i32 %.0, 2
  %47 = sext i32 %46 to i64
  %48 = getelementptr inbounds i32, i32* %4, i64 %47
  store i32 %45, i32* %48, align 4
  %49 = getelementptr inbounds %struct.ichdev, %struct.ichdev* %1, i32 0, i32 8
  %50 = load i32, i32* %49, align 4
  %51 = getelementptr inbounds %struct.ichdev, %struct.ichdev* %1, i32 0, i32 10
  %52 = load i32, i32* %51, align 4
  %53 = lshr i32 %50, %52
  %54 = or i32 -2147483648, %53
  %55 = add nsw i32 %.0, 3
  %56 = sext i32 %55 to i64
  %57 = getelementptr inbounds i32, i32* %4, i64 %56
  store i32 %54, i32* %57, align 4
  %58 = add nsw i32 %.0, 4
  br label %23

; <label>:59:                                     ; preds = %2
  store i32 1, i32* %16, align 4
  %60 = getelementptr inbounds %struct.ichdev, %struct.ichdev* %1, i32 0, i32 17
  store i32 1, i32* %60, align 8
  %61 = getelementptr inbounds %struct.ichdev, %struct.ichdev* %1, i32 0, i32 7
  %62 = load i32, i32* %61, align 8
  %63 = getelementptr inbounds %struct.ichdev, %struct.ichdev* %1, i32 0, i32 8
  store i32 %62, i32* %63, align 4
  br label %64

; <label>:64:                                     ; preds = %66, %59
  %.1 = phi i32 [ 0, %59 ], [ %89, %66 ]
  %65 = icmp slt i32 %.1, 64
  br i1 %65, label %66, label %90

; <label>:66:                                     ; preds = %64
  %67 = getelementptr inbounds %struct.ichdev, %struct.ichdev* %1, i32 0, i32 5
  %68 = load i32, i32* %67, align 8
  %69 = ashr i32 %.1, 1
  %70 = getelementptr inbounds %struct.ichdev, %struct.ichdev* %1, i32 0, i32 7
  %71 = load i32, i32* %70, align 8
  %72 = mul i32 %69, %71
  %73 = getelementptr inbounds %struct.ichdev, %struct.ichdev* %1, i32 0, i32 6
  %74 = load i32, i32* %73, align 4
  %75 = urem i32 %72, %74
  %76 = add i32 %68, %75
  %77 = add nsw i32 %.1, 0
  %78 = sext i32 %77 to i64
  %79 = getelementptr inbounds i32, i32* %4, i64 %78
  store i32 %76, i32* %79, align 4
  %80 = getelementptr inbounds %struct.ichdev, %struct.ichdev* %1, i32 0, i32 7
  %81 = load i32, i32* %80, align 8
  %82 = getelementptr inbounds %struct.ichdev, %struct.ichdev* %1, i32 0, i32 10
  %83 = load i32, i32* %82, align 4
  %84 = lshr i32 %81, %83
  %85 = or i32 -2147483648, %84
  %86 = add nsw i32 %.1, 1
  %87 = sext i32 %86 to i64
  %88 = getelementptr inbounds i32, i32* %4, i64 %87
  store i32 %85, i32* %88, align 4
  %89 = add nsw i32 %.1, 2
  br label %64

; <label>:90:                                     ; preds = %64
  %91 = getelementptr inbounds %struct.ichdev, %struct.ichdev* %1, i32 0, i32 6
  %92 = load i32, i32* %91, align 4
  %93 = getelementptr inbounds %struct.ichdev, %struct.ichdev* %1, i32 0, i32 7
  %94 = load i32, i32* %93, align 8
  %95 = udiv i32 %92, %94
  br label %96

; <label>:96:                                     ; preds = %23, %90
  %.sink = phi i32 [ %95, %90 ], [ 2, %23 ]
  %97 = getelementptr inbounds %struct.ichdev, %struct.ichdev* %1, i32 0, i32 12
  store i32 %.sink, i32* %97, align 4
  %98 = add i64 %6, 5
  %99 = trunc i64 %98 to i32
  %100 = getelementptr inbounds %struct.ichdev, %struct.ichdev* %1, i32 0, i32 13
  store i32 31, i32* %100, align 8
  call void @iputbyte(%struct.intel8x0* %0, i32 %99, i8 zeroext 31)
  %101 = getelementptr inbounds %struct.ichdev, %struct.ichdev* %1, i32 0, i32 15
  store i32 0, i32* %101, align 8
  %102 = add i64 %6, 4
  %103 = trunc i64 %102 to i32
  call void @iputbyte(%struct.intel8x0* %0, i32 %103, i8 zeroext 0)
  %104 = getelementptr inbounds %struct.ichdev, %struct.ichdev* %1, i32 0, i32 12
  %105 = load i32, i32* %104, align 4
  %106 = srem i32 31, %105
  %107 = getelementptr inbounds %struct.ichdev, %struct.ichdev* %1, i32 0, i32 14
  store i32 %106, i32* %107, align 4
  %108 = getelementptr inbounds %struct.ichdev, %struct.ichdev* %1, i32 0, i32 9
  store i32 0, i32* %108, align 8
  %109 = getelementptr inbounds %struct.ichdev, %struct.ichdev* %1, i32 0, i32 19
  %110 = load i32, i32* %109, align 8
  %111 = zext i32 %110 to i64
  %112 = add i64 %6, %111
  %113 = trunc i64 %112 to i32
  call void @iputbyte(%struct.intel8x0* %0, i32 %113, i8 zeroext 28)
  ret void
}

; Function Attrs: noinline nounwind uwtable
define internal i64 @frames_to_bytes(%struct.snd_pcm_runtime*, i64) #0 {
  %3 = getelementptr inbounds %struct.snd_pcm_runtime, %struct.snd_pcm_runtime* %0, i32 0, i32 21
  %4 = load i32, i32* %3, align 8
  %5 = zext i32 %4 to i64
  %6 = mul nsw i64 %1, %5
  %7 = sdiv i64 %6, 8
  ret i64 %7
}

declare void @msleep(i32) #1

declare void @_raw_spin_lock_irq(%struct.raw_spinlock*) #1 section ".spinlock.text"

; Function Attrs: noinline nounwind uwtable
define internal void @__raw_spin_unlock_irq(%struct.raw_spinlock*) #0 {
  call void @do_raw_spin_unlock(%struct.raw_spinlock* %0)
  call void @arch_local_irq_enable()
  call void asm sideeffect "", "~{memory},~{dirflag},~{fpsr},~{flags}"() #3, !srcloc !1
  ret void
}

; Function Attrs: noinline nounwind uwtable
define internal void @do_raw_spin_unlock(%struct.raw_spinlock*) #0 {
  %2 = getelementptr inbounds %struct.raw_spinlock, %struct.raw_spinlock* %0, i32 0, i32 0
  call void @queued_spin_unlock(%struct.qspinlock* %2)
  ret void
}

; Function Attrs: noinline nounwind uwtable
define internal void @arch_local_irq_enable() #0 {
  call void @native_irq_enable()
  ret void
}

; Function Attrs: noinline nounwind uwtable
define internal void @queued_spin_unlock(%struct.qspinlock*) #0 {
  call void @native_queued_spin_unlock(%struct.qspinlock* %0)
  ret void
}

; Function Attrs: noinline nounwind uwtable
define internal void @native_queued_spin_unlock(%struct.qspinlock*) #0 {
  %2 = alloca %union.anon.73, align 1
  %3 = trunc i8 0 to i1
  br i1 %3, label %4, label %5

; <label>:4:                                      ; preds = %1
  call void @__compiletime_assert_17()
  br label %5

; <label>:5:                                      ; preds = %1, %4
  %6 = trunc i8 0 to i1
  %7 = zext i1 %6 to i32
  %8 = mul nsw i32 2, %7
  %9 = sub nsw i32 1, %8
  %10 = zext i32 %9 to i64
  call void asm sideeffect "", "~{memory},~{dirflag},~{fpsr},~{flags}"() #3, !srcloc !2
  %11 = bitcast %union.anon.73* %2 to i8*
  call void @llvm.memset.p0i8.i64(i8* %11, i8 0, i64 1, i32 1, i1 false)
  %12 = bitcast %struct.qspinlock* %0 to i8*
  %13 = bitcast %union.anon.73* %2 to [1 x i8]*
  %14 = getelementptr inbounds [1 x i8], [1 x i8]* %13, i32 0, i32 0
  %15 = load i8, i8* %14, align 1
  store volatile i8 %15, i8* %12, align 1
  %16 = bitcast %union.anon.73* %2 to i8*
  %17 = load i8, i8* %16, align 1
  ret void
}

declare void @__compiletime_assert_17() #1

; Function Attrs: noinline nounwind uwtable
define internal void @native_irq_enable() #0 {
  call void asm sideeffect "sti", "~{memory},~{dirflag},~{fpsr},~{flags}"() #3, !srcloc !3
  ret void
}

; Function Attrs: noinline nounwind uwtable
define internal i64 @bytes_to_frames(%struct.snd_pcm_runtime*, i64) #0 {
  %3 = mul nsw i64 %1, 8
  %4 = getelementptr inbounds %struct.snd_pcm_runtime, %struct.snd_pcm_runtime* %0, i32 0, i32 21
  %5 = load i32, i32* %4, align 8
  %6 = zext i32 %5 to i64
  %7 = sdiv i64 %3, %6
  ret i64 %7
}

declare void @_raw_spin_lock(%struct.raw_spinlock*) #1 section ".spinlock.text"

; Function Attrs: noinline nounwind uwtable
define internal void @__raw_spin_unlock(%struct.raw_spinlock*) #0 {
  call void @do_raw_spin_unlock(%struct.raw_spinlock* %0)
  call void asm sideeffect "", "~{memory},~{dirflag},~{fpsr},~{flags}"() #3, !srcloc !4
  ret void
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @snd_intel8x0_capture_open(%struct.snd_pcm_substream*) #0 {
  %2 = getelementptr inbounds %struct.snd_pcm_substream, %struct.snd_pcm_substream* %0, i32 0, i32 2
  %3 = load i8*, i8** %2, align 8
  %4 = bitcast i8* %3 to %struct.intel8x0*
  %5 = getelementptr inbounds %struct.intel8x0, %struct.intel8x0* %4, i32 0, i32 8
  %6 = getelementptr inbounds [6 x %struct.ichdev], [6 x %struct.ichdev]* %5, i64 0, i64 0
  %7 = call i32 @snd_intel8x0_pcm_open(%struct.snd_pcm_substream* %0, %struct.ichdev* %6)
  ret i32 %7
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @snd_intel8x0_capture_close(%struct.snd_pcm_substream*) #0 {
  %2 = getelementptr inbounds %struct.snd_pcm_substream, %struct.snd_pcm_substream* %0, i32 0, i32 2
  %3 = load i8*, i8** %2, align 8
  %4 = bitcast i8* %3 to %struct.intel8x0*
  %5 = getelementptr inbounds %struct.intel8x0, %struct.intel8x0* %4, i32 0, i32 8
  %6 = getelementptr inbounds [6 x %struct.ichdev], [6 x %struct.ichdev]* %5, i64 0, i64 0
  %7 = getelementptr inbounds %struct.ichdev, %struct.ichdev* %6, i32 0, i32 4
  store %struct.snd_pcm_substream* null, %struct.snd_pcm_substream** %7, align 8
  ret i32 0
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @snd_intel8x0_mic_open(%struct.snd_pcm_substream*) #0 {
  %2 = getelementptr inbounds %struct.snd_pcm_substream, %struct.snd_pcm_substream* %0, i32 0, i32 2
  %3 = load i8*, i8** %2, align 8
  %4 = bitcast i8* %3 to %struct.intel8x0*
  %5 = getelementptr inbounds %struct.intel8x0, %struct.intel8x0* %4, i32 0, i32 8
  %6 = getelementptr inbounds [6 x %struct.ichdev], [6 x %struct.ichdev]* %5, i64 0, i64 2
  %7 = call i32 @snd_intel8x0_pcm_open(%struct.snd_pcm_substream* %0, %struct.ichdev* %6)
  ret i32 %7
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @snd_intel8x0_mic_close(%struct.snd_pcm_substream*) #0 {
  %2 = getelementptr inbounds %struct.snd_pcm_substream, %struct.snd_pcm_substream* %0, i32 0, i32 2
  %3 = load i8*, i8** %2, align 8
  %4 = bitcast i8* %3 to %struct.intel8x0*
  %5 = getelementptr inbounds %struct.intel8x0, %struct.intel8x0* %4, i32 0, i32 8
  %6 = getelementptr inbounds [6 x %struct.ichdev], [6 x %struct.ichdev]* %5, i64 0, i64 2
  %7 = getelementptr inbounds %struct.ichdev, %struct.ichdev* %6, i32 0, i32 4
  store %struct.snd_pcm_substream* null, %struct.snd_pcm_substream** %7, align 8
  ret i32 0
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @snd_intel8x0_mic2_open(%struct.snd_pcm_substream*) #0 {
  %2 = getelementptr inbounds %struct.snd_pcm_substream, %struct.snd_pcm_substream* %0, i32 0, i32 2
  %3 = load i8*, i8** %2, align 8
  %4 = bitcast i8* %3 to %struct.intel8x0*
  %5 = getelementptr inbounds %struct.intel8x0, %struct.intel8x0* %4, i32 0, i32 8
  %6 = getelementptr inbounds [6 x %struct.ichdev], [6 x %struct.ichdev]* %5, i64 0, i64 3
  %7 = call i32 @snd_intel8x0_pcm_open(%struct.snd_pcm_substream* %0, %struct.ichdev* %6)
  ret i32 %7
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @snd_intel8x0_mic2_close(%struct.snd_pcm_substream*) #0 {
  %2 = getelementptr inbounds %struct.snd_pcm_substream, %struct.snd_pcm_substream* %0, i32 0, i32 2
  %3 = load i8*, i8** %2, align 8
  %4 = bitcast i8* %3 to %struct.intel8x0*
  %5 = getelementptr inbounds %struct.intel8x0, %struct.intel8x0* %4, i32 0, i32 8
  %6 = getelementptr inbounds [6 x %struct.ichdev], [6 x %struct.ichdev]* %5, i64 0, i64 3
  %7 = getelementptr inbounds %struct.ichdev, %struct.ichdev* %6, i32 0, i32 4
  store %struct.snd_pcm_substream* null, %struct.snd_pcm_substream** %7, align 8
  ret i32 0
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @snd_intel8x0_capture2_open(%struct.snd_pcm_substream*) #0 {
  %2 = getelementptr inbounds %struct.snd_pcm_substream, %struct.snd_pcm_substream* %0, i32 0, i32 2
  %3 = load i8*, i8** %2, align 8
  %4 = bitcast i8* %3 to %struct.intel8x0*
  %5 = getelementptr inbounds %struct.intel8x0, %struct.intel8x0* %4, i32 0, i32 8
  %6 = getelementptr inbounds [6 x %struct.ichdev], [6 x %struct.ichdev]* %5, i64 0, i64 4
  %7 = call i32 @snd_intel8x0_pcm_open(%struct.snd_pcm_substream* %0, %struct.ichdev* %6)
  ret i32 %7
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @snd_intel8x0_capture2_close(%struct.snd_pcm_substream*) #0 {
  %2 = getelementptr inbounds %struct.snd_pcm_substream, %struct.snd_pcm_substream* %0, i32 0, i32 2
  %3 = load i8*, i8** %2, align 8
  %4 = bitcast i8* %3 to %struct.intel8x0*
  %5 = getelementptr inbounds %struct.intel8x0, %struct.intel8x0* %4, i32 0, i32 8
  %6 = getelementptr inbounds [6 x %struct.ichdev], [6 x %struct.ichdev]* %5, i64 0, i64 4
  %7 = getelementptr inbounds %struct.ichdev, %struct.ichdev* %6, i32 0, i32 4
  store %struct.snd_pcm_substream* null, %struct.snd_pcm_substream** %7, align 8
  ret i32 0
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @snd_intel8x0_spdif_open(%struct.snd_pcm_substream*) #0 {
  %2 = getelementptr inbounds %struct.snd_pcm_substream, %struct.snd_pcm_substream* %0, i32 0, i32 2
  %3 = load i8*, i8** %2, align 8
  %4 = bitcast i8* %3 to %struct.intel8x0*
  %5 = getelementptr inbounds %struct.intel8x0, %struct.intel8x0* %4, i32 0, i32 0
  %6 = load i32, i32* %5, align 8
  %7 = icmp eq i32 %6, 4
  %8 = select i1 %7, i32 3, i32 5
  %9 = getelementptr inbounds %struct.intel8x0, %struct.intel8x0* %4, i32 0, i32 8
  %10 = sext i32 %8 to i64
  %11 = getelementptr inbounds [6 x %struct.ichdev], [6 x %struct.ichdev]* %9, i64 0, i64 %10
  %12 = call i32 @snd_intel8x0_pcm_open(%struct.snd_pcm_substream* %0, %struct.ichdev* %11)
  ret i32 %12
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @snd_intel8x0_spdif_close(%struct.snd_pcm_substream*) #0 {
  %2 = getelementptr inbounds %struct.snd_pcm_substream, %struct.snd_pcm_substream* %0, i32 0, i32 2
  %3 = load i8*, i8** %2, align 8
  %4 = bitcast i8* %3 to %struct.intel8x0*
  %5 = getelementptr inbounds %struct.intel8x0, %struct.intel8x0* %4, i32 0, i32 0
  %6 = load i32, i32* %5, align 8
  %7 = icmp eq i32 %6, 4
  %8 = select i1 %7, i32 3, i32 5
  %9 = getelementptr inbounds %struct.intel8x0, %struct.intel8x0* %4, i32 0, i32 8
  %10 = sext i32 %8 to i64
  %11 = getelementptr inbounds [6 x %struct.ichdev], [6 x %struct.ichdev]* %9, i64 0, i64 %10
  %12 = getelementptr inbounds %struct.ichdev, %struct.ichdev* %11, i32 0, i32 4
  store %struct.snd_pcm_substream* null, %struct.snd_pcm_substream** %12, align 8
  ret i32 0
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @snd_intel8x0_ali_trigger(%struct.snd_pcm_substream*, i32) #0 {
  %3 = getelementptr inbounds %struct.snd_pcm_substream, %struct.snd_pcm_substream* %0, i32 0, i32 2
  %4 = load i8*, i8** %3, align 8
  %5 = bitcast i8* %4 to %struct.intel8x0*
  %6 = getelementptr inbounds %struct.snd_pcm_substream, %struct.snd_pcm_substream* %0, i32 0, i32 11
  %7 = load %struct.snd_pcm_runtime*, %struct.snd_pcm_runtime** %6, align 8
  %8 = getelementptr inbounds %struct.snd_pcm_runtime, %struct.snd_pcm_runtime* %7, i32 0, i32 43
  %9 = load i8*, i8** %8, align 8
  %10 = bitcast i8* %9 to %struct.ichdev*
  %11 = getelementptr inbounds %struct.ichdev, %struct.ichdev* %10, i32 0, i32 1
  %12 = load i64, i64* %11, align 8
  %13 = call i32 @igetdword(%struct.intel8x0* %5, i32 8)
  switch i32 %1, label %95 [
    i32 6, label %14
    i32 1, label %18
    i32 4, label %18
    i32 5, label %60
    i32 0, label %65
    i32 3, label %65
  ]

; <label>:14:                                     ; preds = %2
  %15 = getelementptr inbounds %struct.ichdev, %struct.ichdev* %10, i32 0, i32 25
  %16 = load i8, i8* %15, align 4
  %17 = and i8 %16, -3
  store i8 %17, i8* %15, align 4
  br label %18

; <label>:18:                                     ; preds = %14, %2, %2
  %19 = getelementptr inbounds %struct.snd_pcm_substream, %struct.snd_pcm_substream* %0, i32 0, i32 5
  %20 = load i32, i32* %19, align 4
  %21 = icmp eq i32 %20, 0
  br i1 %21, label %22, label %47

; <label>:22:                                     ; preds = %18
  %23 = getelementptr inbounds %struct.ichdev, %struct.ichdev* %10, i32 0, i32 22
  %24 = load i32, i32* %23, align 4
  %25 = udiv i32 %24, 4
  %26 = zext i32 %25 to i64
  %27 = getelementptr inbounds [3 x i32], [3 x i32]* @snd_intel8x0_ali_trigger.fiforeg, i64 0, i64 %26
  %28 = load i32, i32* %27, align 4
  %29 = call i32 @igetdword(%struct.intel8x0* %5, i32 %28)
  %30 = getelementptr inbounds %struct.ichdev, %struct.ichdev* %10, i32 0, i32 22
  %31 = load i32, i32* %30, align 4
  %32 = urem i32 %31, 4
  %33 = shl i32 255, %32
  %34 = xor i32 %33, -1
  %35 = and i32 %29, %34
  %36 = getelementptr inbounds %struct.ichdev, %struct.ichdev* %10, i32 0, i32 22
  %37 = load i32, i32* %36, align 4
  %38 = urem i32 %37, 4
  %39 = shl i32 131, %38
  %40 = or i32 %35, %39
  %41 = getelementptr inbounds %struct.ichdev, %struct.ichdev* %10, i32 0, i32 22
  %42 = load i32, i32* %41, align 4
  %43 = udiv i32 %42, 4
  %44 = zext i32 %43 to i64
  %45 = getelementptr inbounds [3 x i32], [3 x i32]* @snd_intel8x0_ali_trigger.fiforeg, i64 0, i64 %44
  %46 = load i32, i32* %45, align 4
  call void @iputdword(%struct.intel8x0* %5, i32 %46, i32 %40)
  br label %47

; <label>:47:                                     ; preds = %22, %18
  %48 = add i64 %12, 11
  %49 = trunc i64 %48 to i32
  call void @iputbyte(%struct.intel8x0* %5, i32 %49, i8 zeroext 16)
  %50 = getelementptr inbounds %struct.ichdev, %struct.ichdev* %10, i32 0, i32 22
  %51 = load i32, i32* %50, align 4
  %52 = add i32 %51, 16
  %53 = shl i32 1, %52
  %54 = xor i32 %53, -1
  %55 = and i32 %13, %54
  %56 = getelementptr inbounds %struct.ichdev, %struct.ichdev* %10, i32 0, i32 22
  %57 = load i32, i32* %56, align 4
  %58 = shl i32 1, %57
  %59 = or i32 %55, %58
  call void @iputdword(%struct.intel8x0* %5, i32 8, i32 %59)
  br label %95

; <label>:60:                                     ; preds = %2
  %61 = getelementptr inbounds %struct.ichdev, %struct.ichdev* %10, i32 0, i32 25
  %62 = load i8, i8* %61, align 4
  %63 = and i8 %62, -3
  %64 = or i8 %63, 2
  store i8 %64, i8* %61, align 4
  br label %65

; <label>:65:                                     ; preds = %60, %2, %2
  %66 = getelementptr inbounds %struct.ichdev, %struct.ichdev* %10, i32 0, i32 22
  %67 = load i32, i32* %66, align 4
  %68 = add i32 %67, 16
  %69 = shl i32 1, %68
  %70 = or i32 %13, %69
  call void @iputdword(%struct.intel8x0* %5, i32 8, i32 %70)
  %71 = add i64 %12, 11
  %72 = trunc i64 %71 to i32
  call void @iputbyte(%struct.intel8x0* %5, i32 %72, i8 zeroext 0)
  br label %73

; <label>:73:                                     ; preds = %73, %65
  %74 = add i64 %12, 11
  %75 = trunc i64 %74 to i32
  %76 = call zeroext i8 @igetbyte(%struct.intel8x0* %5, i32 %75)
  %77 = icmp ne i8 %76, 0
  br i1 %77, label %73, label %78

; <label>:78:                                     ; preds = %73
  %79 = icmp eq i32 %1, 3
  br i1 %79, label %95, label %80

; <label>:80:                                     ; preds = %78
  %81 = add i64 %12, 11
  %82 = trunc i64 %81 to i32
  call void @iputbyte(%struct.intel8x0* %5, i32 %82, i8 zeroext 2)
  %83 = add i64 %12, 6
  %84 = trunc i64 %83 to i32
  %85 = add i64 %12, 6
  %86 = trunc i64 %85 to i32
  %87 = call zeroext i8 @igetbyte(%struct.intel8x0* %5, i32 %86)
  %88 = zext i8 %87 to i32
  %89 = or i32 %88, 30
  %90 = trunc i32 %89 to i8
  call void @iputbyte(%struct.intel8x0* %5, i32 %84, i8 zeroext %90)
  %91 = call i32 @igetdword(%struct.intel8x0* %5, i32 24)
  %92 = getelementptr inbounds %struct.ichdev, %struct.ichdev* %10, i32 0, i32 21
  %93 = load i32, i32* %92, align 8
  %94 = and i32 %91, %93
  call void @iputdword(%struct.intel8x0* %5, i32 24, i32 %94)
  br label %95

; <label>:95:                                     ; preds = %47, %80, %78, %2
  %.0 = phi i32 [ -22, %2 ], [ 0, %78 ], [ 0, %80 ], [ 0, %47 ]
  ret i32 %.0
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @snd_intel8x0_ali_ac97spdifout_open(%struct.snd_pcm_substream*) #0 {
  %2 = getelementptr inbounds %struct.snd_pcm_substream, %struct.snd_pcm_substream* %0, i32 0, i32 2
  %3 = load i8*, i8** %2, align 8
  %4 = bitcast i8* %3 to %struct.intel8x0*
  %5 = getelementptr inbounds %struct.intel8x0, %struct.intel8x0* %4, i32 0, i32 20
  %6 = getelementptr inbounds %struct.spinlock, %struct.spinlock* %5, i32 0, i32 0
  %7 = bitcast %union.anon.1* %6 to %struct.raw_spinlock*
  call void @_raw_spin_lock_irq(%struct.raw_spinlock* %7) #3
  %8 = call i32 @igetdword(%struct.intel8x0* %4, i32 16)
  %9 = or i32 %8, 2097152
  call void @iputdword(%struct.intel8x0* %4, i32 16, i32 %9)
  %10 = getelementptr inbounds %struct.intel8x0, %struct.intel8x0* %4, i32 0, i32 20
  %11 = getelementptr inbounds %struct.spinlock, %struct.spinlock* %10, i32 0, i32 0
  %12 = bitcast %union.anon.1* %11 to %struct.raw_spinlock*
  call void @__raw_spin_unlock_irq(%struct.raw_spinlock* %12) #3
  %13 = getelementptr inbounds %struct.intel8x0, %struct.intel8x0* %4, i32 0, i32 8
  %14 = getelementptr inbounds [6 x %struct.ichdev], [6 x %struct.ichdev]* %13, i64 0, i64 3
  %15 = call i32 @snd_intel8x0_pcm_open(%struct.snd_pcm_substream* %0, %struct.ichdev* %14)
  ret i32 %15
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @snd_intel8x0_ali_ac97spdifout_close(%struct.snd_pcm_substream*) #0 {
  %2 = getelementptr inbounds %struct.snd_pcm_substream, %struct.snd_pcm_substream* %0, i32 0, i32 2
  %3 = load i8*, i8** %2, align 8
  %4 = bitcast i8* %3 to %struct.intel8x0*
  %5 = getelementptr inbounds %struct.intel8x0, %struct.intel8x0* %4, i32 0, i32 8
  %6 = getelementptr inbounds [6 x %struct.ichdev], [6 x %struct.ichdev]* %5, i64 0, i64 3
  %7 = getelementptr inbounds %struct.ichdev, %struct.ichdev* %6, i32 0, i32 4
  store %struct.snd_pcm_substream* null, %struct.snd_pcm_substream** %7, align 8
  %8 = getelementptr inbounds %struct.intel8x0, %struct.intel8x0* %4, i32 0, i32 20
  %9 = getelementptr inbounds %struct.spinlock, %struct.spinlock* %8, i32 0, i32 0
  %10 = bitcast %union.anon.1* %9 to %struct.raw_spinlock*
  call void @_raw_spin_lock_irq(%struct.raw_spinlock* %10) #3
  %11 = call i32 @igetdword(%struct.intel8x0* %4, i32 16)
  %12 = and i32 %11, -2097153
  call void @iputdword(%struct.intel8x0* %4, i32 16, i32 %12)
  %13 = getelementptr inbounds %struct.intel8x0, %struct.intel8x0* %4, i32 0, i32 20
  %14 = getelementptr inbounds %struct.spinlock, %struct.spinlock* %13, i32 0, i32 0
  %15 = bitcast %union.anon.1* %14 to %struct.raw_spinlock*
  call void @__raw_spin_unlock_irq(%struct.raw_spinlock* %15) #3
  ret i32 0
}

declare i32 @sprintf(i8*, i8*, ...) #1

declare i32 @snd_pcm_new(%struct.snd_card*, i8*, i32, i32, i32, %struct.snd_pcm**) #1

declare void @snd_pcm_set_ops(%struct.snd_pcm*, i32, %struct.snd_pcm_ops*) #1

declare i32 @snd_pcm_lib_preallocate_pages_for_all(%struct.snd_pcm*, i32, i8*, i64, i64) #1

declare i32 @snd_pcm_add_chmap_ctls(%struct.snd_pcm*, i32, %struct.snd_pcm_chmap_elem*, i32, i64, %struct.snd_pcm_chmap**) #1

; Function Attrs: noinline nounwind uwtable
define internal i32 @snd_card_proc_new(%struct.snd_card*, i8*, %struct.snd_info_entry**) #0 {
  %4 = getelementptr inbounds %struct.snd_card, %struct.snd_card* %0, i32 0, i32 21
  %5 = load %struct.snd_info_entry*, %struct.snd_info_entry** %4, align 8
  %6 = call %struct.snd_info_entry* @snd_info_create_card_entry(%struct.snd_card* %0, i8* %1, %struct.snd_info_entry* %5)
  store %struct.snd_info_entry* %6, %struct.snd_info_entry** %2, align 8
  %7 = load %struct.snd_info_entry*, %struct.snd_info_entry** %2, align 8
  %8 = icmp ne %struct.snd_info_entry* %7, null
  %9 = select i1 %8, i32 0, i32 -12
  ret i32 %9
}

; Function Attrs: noinline nounwind uwtable
define internal void @snd_info_set_text_ops(%struct.snd_info_entry*, i8*, void (%struct.snd_info_entry*, %struct.snd_info_buffer*)*) #0 {
  %4 = getelementptr inbounds %struct.snd_info_entry, %struct.snd_info_entry* %0, i32 0, i32 8
  store i8* %1, i8** %4, align 8
  %5 = getelementptr inbounds %struct.snd_info_entry, %struct.snd_info_entry* %0, i32 0, i32 4
  %6 = bitcast %union.anon.58* %5 to %struct.snd_info_entry_text*
  %7 = getelementptr inbounds %struct.snd_info_entry_text, %struct.snd_info_entry_text* %6, i32 0, i32 0
  store void (%struct.snd_info_entry*, %struct.snd_info_buffer*)* %2, void (%struct.snd_info_entry*, %struct.snd_info_buffer*)** %7, align 8
  ret void
}

; Function Attrs: noinline nounwind uwtable
define internal void @snd_intel8x0_proc_read(%struct.snd_info_entry*, %struct.snd_info_buffer*) #0 {
  %3 = getelementptr inbounds %struct.snd_info_entry, %struct.snd_info_entry* %0, i32 0, i32 8
  %4 = load i8*, i8** %3, align 8
  %5 = bitcast i8* %4 to %struct.intel8x0*
  %6 = getelementptr inbounds %struct.snd_info_buffer, %struct.snd_info_buffer* %1, i32 0, i32 0
  %7 = load i8*, i8** %6, align 8
  %8 = bitcast i8* %7 to %struct.seq_file*
  call void (%struct.seq_file*, i8*, ...) @seq_printf(%struct.seq_file* %8, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.114, i32 0, i32 0))
  %9 = getelementptr inbounds %struct.intel8x0, %struct.intel8x0* %5, i32 0, i32 0
  %10 = load i32, i32* %9, align 8
  %11 = icmp eq i32 %10, 3
  br i1 %11, label %86, label %12

; <label>:12:                                     ; preds = %2
  %13 = call i32 @igetdword(%struct.intel8x0* %5, i32 48)
  %14 = getelementptr inbounds %struct.snd_info_buffer, %struct.snd_info_buffer* %1, i32 0, i32 0
  %15 = load i8*, i8** %14, align 8
  %16 = bitcast i8* %15 to %struct.seq_file*
  %17 = call i32 @igetdword(%struct.intel8x0* %5, i32 44)
  call void (%struct.seq_file*, i8*, ...) @seq_printf(%struct.seq_file* %16, i8* getelementptr inbounds ([32 x i8], [32 x i8]* @.str.115, i32 0, i32 0), i32 %17)
  %18 = getelementptr inbounds %struct.snd_info_buffer, %struct.snd_info_buffer* %1, i32 0, i32 0
  %19 = load i8*, i8** %18, align 8
  %20 = bitcast i8* %19 to %struct.seq_file*
  call void (%struct.seq_file*, i8*, ...) @seq_printf(%struct.seq_file* %20, i8* getelementptr inbounds ([32 x i8], [32 x i8]* @.str.116, i32 0, i32 0), i32 %13)
  %21 = getelementptr inbounds %struct.intel8x0, %struct.intel8x0* %5, i32 0, i32 0
  %22 = load i32, i32* %21, align 8
  %23 = icmp eq i32 %22, 1
  br i1 %23, label %24, label %29

; <label>:24:                                     ; preds = %12
  %25 = getelementptr inbounds %struct.snd_info_buffer, %struct.snd_info_buffer* %1, i32 0, i32 0
  %26 = load i8*, i8** %25, align 8
  %27 = bitcast i8* %26 to %struct.seq_file*
  %28 = call i32 @igetdword(%struct.intel8x0* %5, i32 128)
  call void (%struct.seq_file*, i8*, ...) @seq_printf(%struct.seq_file* %27, i8* getelementptr inbounds ([32 x i8], [32 x i8]* @.str.117, i32 0, i32 0), i32 %28)
  br label %29

; <label>:29:                                     ; preds = %24, %12
  %30 = getelementptr inbounds %struct.snd_info_buffer, %struct.snd_info_buffer* %1, i32 0, i32 0
  %31 = load i8*, i8** %30, align 8
  %32 = bitcast i8* %31 to %struct.seq_file*
  call void (%struct.seq_file*, i8*, ...) @seq_printf(%struct.seq_file* %32, i8* getelementptr inbounds ([24 x i8], [24 x i8]* @.str.118, i32 0, i32 0))
  %33 = getelementptr inbounds %struct.intel8x0, %struct.intel8x0* %5, i32 0, i32 18
  %34 = load i32, i32* %33, align 8
  %35 = and i32 %13, %34
  %36 = icmp ne i32 %35, 0
  br i1 %36, label %37, label %58

; <label>:37:                                     ; preds = %29, %56
  %.0 = phi i32 [ %57, %56 ], [ 0, %29 ]
  %38 = getelementptr inbounds %struct.intel8x0, %struct.intel8x0* %5, i32 0, i32 15
  %39 = load i32, i32* %38, align 4
  %40 = icmp ult i32 %.0, %39
  br i1 %40, label %41, label %62

; <label>:41:                                     ; preds = %37
  %42 = getelementptr inbounds %struct.intel8x0, %struct.intel8x0* %5, i32 0, i32 17
  %43 = load i32*, i32** %42, align 8
  %44 = sext i32 %.0 to i64
  %45 = getelementptr inbounds i32, i32* %43, i64 %44
  %46 = load i32, i32* %45, align 4
  %47 = and i32 %13, %46
  %48 = icmp ne i32 %47, 0
  br i1 %48, label %49, label %56

; <label>:49:                                     ; preds = %41
  %50 = getelementptr inbounds %struct.snd_info_buffer, %struct.snd_info_buffer* %1, i32 0, i32 0
  %51 = load i8*, i8** %50, align 8
  %52 = bitcast i8* %51 to %struct.seq_file*
  %53 = sext i32 %.0 to i64
  %54 = getelementptr inbounds [3 x i8*], [3 x i8*]* @snd_intel8x0_proc_read.codecs, i64 0, i64 %53
  %55 = load i8*, i8** %54, align 8
  call void (%struct.seq_file*, i8*, ...) @seq_printf(%struct.seq_file* %52, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.122, i32 0, i32 0), i8* %55)
  br label %56

; <label>:56:                                     ; preds = %41, %49
  %57 = add nsw i32 %.0, 1
  br label %37

; <label>:58:                                     ; preds = %29
  %59 = getelementptr inbounds %struct.snd_info_buffer, %struct.snd_info_buffer* %1, i32 0, i32 0
  %60 = load i8*, i8** %59, align 8
  %61 = bitcast i8* %60 to %struct.seq_file*
  call void (%struct.seq_file*, i8*, ...) @seq_printf(%struct.seq_file* %61, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.123, i32 0, i32 0))
  br label %62

; <label>:62:                                     ; preds = %37, %58
  %63 = getelementptr inbounds %struct.snd_info_buffer, %struct.snd_info_buffer* %1, i32 0, i32 0
  %64 = load i8*, i8** %63, align 8
  %65 = bitcast i8* %64 to %struct.seq_file*
  call void (%struct.seq_file*, i8*, ...) @seq_printf(%struct.seq_file* %65, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.124, i32 0, i32 0))
  %66 = getelementptr inbounds %struct.intel8x0, %struct.intel8x0* %5, i32 0, i32 0
  %67 = load i32, i32* %66, align 8
  %68 = icmp eq i32 %67, 1
  br i1 %68, label %73, label %69

; <label>:69:                                     ; preds = %62
  %70 = getelementptr inbounds %struct.intel8x0, %struct.intel8x0* %5, i32 0, i32 0
  %71 = load i32, i32* %70, align 8
  %72 = icmp eq i32 %71, 2
  br i1 %72, label %73, label %86

; <label>:73:                                     ; preds = %69, %62
  %74 = getelementptr inbounds %struct.snd_info_buffer, %struct.snd_info_buffer* %1, i32 0, i32 0
  %75 = load i8*, i8** %74, align 8
  %76 = bitcast i8* %75 to %struct.seq_file*
  %77 = getelementptr inbounds %struct.intel8x0, %struct.intel8x0* %5, i32 0, i32 14
  %78 = getelementptr inbounds [3 x i32], [3 x i32]* %77, i64 0, i64 0
  %79 = load i32, i32* %78, align 8
  %80 = getelementptr inbounds %struct.intel8x0, %struct.intel8x0* %5, i32 0, i32 14
  %81 = getelementptr inbounds [3 x i32], [3 x i32]* %80, i64 0, i64 1
  %82 = load i32, i32* %81, align 4
  %83 = getelementptr inbounds %struct.intel8x0, %struct.intel8x0* %5, i32 0, i32 14
  %84 = getelementptr inbounds [3 x i32], [3 x i32]* %83, i64 0, i64 2
  %85 = load i32, i32* %84, align 8
  call void (%struct.seq_file*, i8*, ...) @seq_printf(%struct.seq_file* %76, i8* getelementptr inbounds ([34 x i8], [34 x i8]* @.str.125, i32 0, i32 0), i32 %79, i32 %82, i32 %85)
  br label %86

; <label>:86:                                     ; preds = %2, %73, %69
  ret void
}

declare %struct.snd_info_entry* @snd_info_create_card_entry(%struct.snd_card*, i8*, %struct.snd_info_entry*) #1

declare void @seq_printf(%struct.seq_file*, i8*, ...) #1

declare i64 @ktime_get() #1

; Function Attrs: noinline nounwind uwtable
define internal i64 @ktime_us_delta(i64, i64) #0 {
  %3 = sub nsw i64 %0, %1
  %4 = call i64 @ktime_to_us(i64 %3)
  ret i64 %4
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @snd_ac97_update_power(%struct.snd_ac97*, i32, i32) #0 {
  ret i32 0
}

; Function Attrs: noinline nounwind uwtable
define internal i64 @ktime_to_us(i64) #0 {
  %2 = call i64 @ktime_divns(i64 %0, i64 1000)
  ret i64 %2
}

; Function Attrs: noinline nounwind uwtable
define internal i64 @ktime_divns(i64, i64) #0 {
  %3 = icmp slt i64 %1, 0
  %4 = xor i1 %3, true
  %5 = xor i1 %4, true
  %6 = zext i1 %5 to i32
  %7 = icmp ne i32 %6, 0
  %8 = xor i1 %7, true
  %9 = xor i1 %8, true
  %10 = zext i1 %9 to i32
  %11 = sext i32 %10 to i64
  %12 = icmp ne i64 %11, 0
  br i1 %12, label %13, label %14

; <label>:13:                                     ; preds = %2
  call void asm sideeffect "1:\09.byte 0x0f, 0xff\0A.pushsection __bug_table,\22a\22\0A2:\09.long 1b - 2b\09# bug_entry::bug_addr\0A\09.long ${0:c} - 2b\09# bug_entry::file\0A\09.word ${1:c}\09# bug_entry::line\0A\09.word ${2:c}\09# bug_entry::flags\0A\09.org 2b+${3:c}\0A.popsection", "i,i,i,i,~{dirflag},~{fpsr},~{flags}"(i8* getelementptr inbounds ([24 x i8], [24 x i8]* @.str.134, i32 0, i32 0), i32 168, i32 2305, i64 12) #3, !srcloc !5
  br label %14

; <label>:14:                                     ; preds = %13, %2
  %15 = icmp ne i32 %6, 0
  %16 = xor i1 %15, true
  %17 = xor i1 %16, true
  %18 = zext i1 %17 to i32
  %19 = sext i32 %18 to i64
  %20 = sdiv i64 %0, %1
  ret i64 %20
}

; Function Attrs: noinline nounwind uwtable
define internal void @dev_set_drvdata(%struct.device*, i8*) #0 {
  %3 = getelementptr inbounds %struct.device, %struct.device* %0, i32 0, i32 9
  store i8* %1, i8** %3, align 8
  ret void
}

; Function Attrs: noinline nounwind uwtable
define internal i8* @pci_get_drvdata(%struct.pci_dev*) #0 {
  %2 = getelementptr inbounds %struct.pci_dev, %struct.pci_dev* %0, i32 0, i32 35
  %3 = call i8* @dev_get_drvdata(%struct.device* %2)
  ret i8* %3
}

; Function Attrs: noinline nounwind uwtable
define internal i8* @dev_get_drvdata(%struct.device*) #0 {
  %2 = getelementptr inbounds %struct.device, %struct.device* %0, i32 0, i32 9
  %3 = load i8*, i8** %2, align 8
  ret i8* %3
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @intel8x0_suspend(%struct.device*) #0 {
  %2 = call i8* @dev_get_drvdata(%struct.device* %0)
  %3 = bitcast i8* %2 to %struct.snd_card*
  %4 = getelementptr inbounds %struct.snd_card, %struct.snd_card* %3, i32 0, i32 9
  %5 = load i8*, i8** %4, align 8
  %6 = bitcast i8* %5 to %struct.intel8x0*
  call void @snd_power_change_state(%struct.snd_card* %3, i32 768)
  br label %7

; <label>:7:                                      ; preds = %11, %1
  %.0 = phi i32 [ 0, %1 ], [ %17, %11 ]
  %8 = getelementptr inbounds %struct.intel8x0, %struct.intel8x0* %6, i32 0, i32 6
  %9 = load i32, i32* %8, align 8
  %10 = icmp slt i32 %.0, %9
  br i1 %10, label %11, label %18

; <label>:11:                                     ; preds = %7
  %12 = getelementptr inbounds %struct.intel8x0, %struct.intel8x0* %6, i32 0, i32 7
  %13 = sext i32 %.0 to i64
  %14 = getelementptr inbounds [6 x %struct.snd_pcm*], [6 x %struct.snd_pcm*]* %12, i64 0, i64 %13
  %15 = load %struct.snd_pcm*, %struct.snd_pcm** %14, align 8
  %16 = call i32 @snd_pcm_suspend_all(%struct.snd_pcm* %15)
  %17 = add nsw i32 %.0, 1
  br label %7

; <label>:18:                                     ; preds = %7
  %19 = getelementptr inbounds %struct.intel8x0, %struct.intel8x0* %6, i32 0, i32 9
  %20 = load i16, i16* %19, align 8
  %21 = lshr i16 %20, 8
  %22 = and i16 %21, 1
  %23 = zext i16 %22 to i32
  %24 = icmp ne i32 %23, 0
  br i1 %24, label %25, label %52

; <label>:25:                                     ; preds = %18, %50
  %.1 = phi i32 [ %51, %50 ], [ 0, %18 ]
  %26 = getelementptr inbounds %struct.intel8x0, %struct.intel8x0* %6, i32 0, i32 21
  %27 = load i32, i32* %26, align 4
  %28 = icmp ult i32 %.1, %27
  br i1 %28, label %29, label %52

; <label>:29:                                     ; preds = %25
  %30 = getelementptr inbounds %struct.intel8x0, %struct.intel8x0* %6, i32 0, i32 8
  %31 = sext i32 %.1 to i64
  %32 = getelementptr inbounds [6 x %struct.ichdev], [6 x %struct.ichdev]* %30, i64 0, i64 %31
  %33 = getelementptr inbounds %struct.ichdev, %struct.ichdev* %32, i32 0, i32 4
  %34 = load %struct.snd_pcm_substream*, %struct.snd_pcm_substream** %33, align 8
  %35 = icmp ne %struct.snd_pcm_substream* %34, null
  br i1 %35, label %36, label %50

; <label>:36:                                     ; preds = %29
  %37 = getelementptr inbounds %struct.ichdev, %struct.ichdev* %32, i32 0, i32 25
  %38 = load i8, i8* %37, align 4
  %39 = and i8 %38, 1
  %40 = zext i8 %39 to i32
  %41 = icmp ne i32 %40, 0
  br i1 %41, label %42, label %50

; <label>:42:                                     ; preds = %36
  %43 = getelementptr inbounds %struct.ichdev, %struct.ichdev* %32, i32 0, i32 4
  %44 = load %struct.snd_pcm_substream*, %struct.snd_pcm_substream** %43, align 8
  %45 = getelementptr inbounds %struct.snd_pcm_substream, %struct.snd_pcm_substream* %44, i32 0, i32 11
  %46 = load %struct.snd_pcm_runtime*, %struct.snd_pcm_runtime** %45, align 8
  %47 = getelementptr inbounds %struct.snd_pcm_runtime, %struct.snd_pcm_runtime* %46, i32 0, i32 49
  %48 = load i8*, i8** %47, align 8
  %49 = icmp ne i8* %48, null
  br label %50

; <label>:50:                                     ; preds = %29, %36, %42
  %51 = add nsw i32 %.1, 1
  br label %25

; <label>:52:                                     ; preds = %18, %25, %56
  %.2 = phi i32 [ %61, %56 ], [ 0, %25 ], [ 0, %18 ]
  %53 = getelementptr inbounds %struct.intel8x0, %struct.intel8x0* %6, i32 0, i32 16
  %54 = load i32, i32* %53, align 8
  %55 = icmp ult i32 %.2, %54
  br i1 %55, label %56, label %62

; <label>:56:                                     ; preds = %52
  %57 = getelementptr inbounds %struct.intel8x0, %struct.intel8x0* %6, i32 0, i32 13
  %58 = sext i32 %.2 to i64
  %59 = getelementptr inbounds [3 x %struct.snd_ac97*], [3 x %struct.snd_ac97*]* %57, i64 0, i64 %58
  %60 = load %struct.snd_ac97*, %struct.snd_ac97** %59, align 8
  call void @snd_ac97_suspend(%struct.snd_ac97* %60)
  %61 = add nsw i32 %.2, 1
  br label %52

; <label>:62:                                     ; preds = %52
  %63 = getelementptr inbounds %struct.intel8x0, %struct.intel8x0* %6, i32 0, i32 0
  %64 = load i32, i32* %63, align 8
  %65 = icmp eq i32 %64, 1
  br i1 %65, label %66, label %70

; <label>:66:                                     ; preds = %62
  %67 = call zeroext i8 @igetbyte(%struct.intel8x0* %6, i32 128)
  %68 = zext i8 %67 to i32
  %69 = getelementptr inbounds %struct.intel8x0, %struct.intel8x0* %6, i32 0, i32 11
  store i32 %68, i32* %69, align 8
  br label %70

; <label>:70:                                     ; preds = %66, %62
  %71 = getelementptr inbounds %struct.intel8x0, %struct.intel8x0* %6, i32 0, i32 1
  %72 = load i32, i32* %71, align 4
  %73 = icmp sge i32 %72, 0
  br i1 %73, label %74, label %80

; <label>:74:                                     ; preds = %70
  %75 = getelementptr inbounds %struct.intel8x0, %struct.intel8x0* %6, i32 0, i32 1
  %76 = load i32, i32* %75, align 4
  %77 = bitcast %struct.intel8x0* %6 to i8*
  %78 = call i8* @free_irq(i32 %76, i8* %77)
  %79 = getelementptr inbounds %struct.intel8x0, %struct.intel8x0* %6, i32 0, i32 1
  store i32 -1, i32* %79, align 4
  br label %80

; <label>:80:                                     ; preds = %74, %70
  ret i32 0
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @intel8x0_resume(%struct.device*) #0 {
  %2 = bitcast %struct.device* %0 to i8*
  %3 = getelementptr inbounds i8, i8* %2, i64 -160
  %4 = bitcast i8* %3 to %struct.pci_dev*
  %5 = call i8* @dev_get_drvdata(%struct.device* %0)
  %6 = bitcast i8* %5 to %struct.snd_card*
  %7 = getelementptr inbounds %struct.snd_card, %struct.snd_card* %6, i32 0, i32 9
  %8 = load i8*, i8** %7, align 8
  %9 = bitcast i8* %8 to %struct.intel8x0*
  %10 = call i32 @snd_intel8x0_chip_init(%struct.intel8x0* %9, i32 0)
  %11 = getelementptr inbounds %struct.pci_dev, %struct.pci_dev* %4, i32 0, i32 37
  %12 = load i32, i32* %11, align 4
  %13 = bitcast %struct.intel8x0* %9 to i8*
  %14 = call i32 @request_irq(i32 %12, i32 (i32, i8*)* @snd_intel8x0_interrupt, i64 128, i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str, i32 0, i32 0), i8* %13)
  %15 = icmp ne i32 %14, 0
  %16 = getelementptr inbounds %struct.pci_dev, %struct.pci_dev* %4, i32 0, i32 37
  %17 = load i32, i32* %16, align 4
  br i1 %15, label %18, label %20

; <label>:18:                                     ; preds = %1
  call void (%struct.device*, i8*, ...) @dev_err(%struct.device* %0, i8* getelementptr inbounds ([41 x i8], [41 x i8]* @.str.135, i32 0, i32 0), i32 %17)
  %19 = call i32 @snd_card_disconnect(%struct.snd_card* %6)
  br label %139

; <label>:20:                                     ; preds = %1
  %21 = getelementptr inbounds %struct.intel8x0, %struct.intel8x0* %9, i32 0, i32 1
  store i32 %17, i32* %21, align 4
  %22 = getelementptr inbounds %struct.intel8x0, %struct.intel8x0* %9, i32 0, i32 1
  %23 = load i32, i32* %22, align 4
  call void @synchronize_irq(i32 %23)
  %24 = getelementptr inbounds %struct.intel8x0, %struct.intel8x0* %9, i32 0, i32 0
  %25 = load i32, i32* %24, align 8
  %26 = icmp ne i32 %25, 1
  %27 = load i32, i32* @spdif_aclink, align 4
  %28 = icmp ne i32 %27, 0
  %or.cond = or i1 %26, %28
  br i1 %or.cond, label %36, label %29

; <label>:29:                                     ; preds = %20
  %30 = getelementptr inbounds %struct.intel8x0, %struct.intel8x0* %9, i32 0, i32 11
  %31 = load i32, i32* %30, align 8
  %32 = trunc i32 %31 to i8
  call void @iputbyte(%struct.intel8x0* %9, i32 128, i8 zeroext %32)
  %33 = call i32 @igetdword(%struct.intel8x0* %9, i32 44)
  %34 = and i32 %33, 1073741823
  %35 = or i32 %34, -1073741824
  call void @iputdword(%struct.intel8x0* %9, i32 44, i32 %35)
  br label %36

; <label>:36:                                     ; preds = %20, %29
  %37 = getelementptr inbounds %struct.intel8x0, %struct.intel8x0* %9, i32 0, i32 9
  %38 = load i16, i16* %37, align 8
  %39 = lshr i16 %38, 8
  %40 = and i16 %39, 1
  %41 = zext i16 %40 to i32
  %42 = icmp ne i32 %41, 0
  br label %43

; <label>:43:                                     ; preds = %47, %36
  %.01 = phi i32 [ 0, %36 ], [ %52, %47 ]
  %44 = getelementptr inbounds %struct.intel8x0, %struct.intel8x0* %9, i32 0, i32 16
  %45 = load i32, i32* %44, align 8
  %46 = icmp ult i32 %.01, %45
  br i1 %46, label %47, label %53

; <label>:47:                                     ; preds = %43
  %48 = getelementptr inbounds %struct.intel8x0, %struct.intel8x0* %9, i32 0, i32 13
  %49 = sext i32 %.01 to i64
  %50 = getelementptr inbounds [3 x %struct.snd_ac97*], [3 x %struct.snd_ac97*]* %48, i64 0, i64 %49
  %51 = load %struct.snd_ac97*, %struct.snd_ac97** %50, align 8
  call void @snd_ac97_resume(%struct.snd_ac97* %51)
  %52 = add nsw i32 %.01, 1
  br label %43

; <label>:53:                                     ; preds = %43
  %54 = getelementptr inbounds %struct.intel8x0, %struct.intel8x0* %9, i32 0, i32 9
  %55 = load i16, i16* %54, align 8
  %56 = lshr i16 %55, 8
  %57 = and i16 %56, 1
  %58 = zext i16 %57 to i32
  %59 = icmp ne i32 %58, 0
  br i1 %59, label %60, label %87

; <label>:60:                                     ; preds = %53, %85
  %.1 = phi i32 [ %86, %85 ], [ 0, %53 ]
  %61 = getelementptr inbounds %struct.intel8x0, %struct.intel8x0* %9, i32 0, i32 21
  %62 = load i32, i32* %61, align 4
  %63 = icmp ult i32 %.1, %62
  br i1 %63, label %64, label %87

; <label>:64:                                     ; preds = %60
  %65 = getelementptr inbounds %struct.intel8x0, %struct.intel8x0* %9, i32 0, i32 8
  %66 = sext i32 %.1 to i64
  %67 = getelementptr inbounds [6 x %struct.ichdev], [6 x %struct.ichdev]* %65, i64 0, i64 %66
  %68 = getelementptr inbounds %struct.ichdev, %struct.ichdev* %67, i32 0, i32 4
  %69 = load %struct.snd_pcm_substream*, %struct.snd_pcm_substream** %68, align 8
  %70 = icmp ne %struct.snd_pcm_substream* %69, null
  br i1 %70, label %71, label %85

; <label>:71:                                     ; preds = %64
  %72 = getelementptr inbounds %struct.ichdev, %struct.ichdev* %67, i32 0, i32 25
  %73 = load i8, i8* %72, align 4
  %74 = and i8 %73, 1
  %75 = zext i8 %74 to i32
  %76 = icmp ne i32 %75, 0
  br i1 %76, label %77, label %85

; <label>:77:                                     ; preds = %71
  %78 = getelementptr inbounds %struct.ichdev, %struct.ichdev* %67, i32 0, i32 4
  %79 = load %struct.snd_pcm_substream*, %struct.snd_pcm_substream** %78, align 8
  %80 = getelementptr inbounds %struct.snd_pcm_substream, %struct.snd_pcm_substream* %79, i32 0, i32 11
  %81 = load %struct.snd_pcm_runtime*, %struct.snd_pcm_runtime** %80, align 8
  %82 = getelementptr inbounds %struct.snd_pcm_runtime, %struct.snd_pcm_runtime* %81, i32 0, i32 49
  %83 = load i8*, i8** %82, align 8
  %84 = icmp ne i8* %83, null
  br label %85

; <label>:85:                                     ; preds = %64, %71, %77
  %86 = add nsw i32 %.1, 1
  br label %60

; <label>:87:                                     ; preds = %53, %60, %136
  %.2 = phi i32 [ %137, %136 ], [ 0, %60 ], [ 0, %53 ]
  %88 = getelementptr inbounds %struct.intel8x0, %struct.intel8x0* %9, i32 0, i32 21
  %89 = load i32, i32* %88, align 4
  %90 = icmp ult i32 %.2, %89
  br i1 %90, label %91, label %138

; <label>:91:                                     ; preds = %87
  %92 = getelementptr inbounds %struct.intel8x0, %struct.intel8x0* %9, i32 0, i32 8
  %93 = sext i32 %.2 to i64
  %94 = getelementptr inbounds [6 x %struct.ichdev], [6 x %struct.ichdev]* %92, i64 0, i64 %93
  %95 = getelementptr inbounds %struct.ichdev, %struct.ichdev* %94, i32 0, i32 1
  %96 = load i64, i64* %95, align 8
  %97 = getelementptr inbounds %struct.ichdev, %struct.ichdev* %94, i32 0, i32 4
  %98 = load %struct.snd_pcm_substream*, %struct.snd_pcm_substream** %97, align 8
  %99 = icmp ne %struct.snd_pcm_substream* %98, null
  br i1 %99, label %100, label %136

; <label>:100:                                    ; preds = %91
  %101 = getelementptr inbounds %struct.ichdev, %struct.ichdev* %94, i32 0, i32 25
  %102 = load i8, i8* %101, align 4
  %103 = lshr i8 %102, 1
  %104 = and i8 %103, 1
  %105 = zext i8 %104 to i32
  %106 = icmp ne i32 %105, 0
  br i1 %106, label %107, label %136

; <label>:107:                                    ; preds = %100
  %108 = getelementptr inbounds %struct.ichdev, %struct.ichdev* %94, i32 0, i32 0
  %109 = load i32, i32* %108, align 8
  %110 = icmp eq i32 %109, 1
  br i1 %110, label %111, label %116

; <label>:111:                                    ; preds = %107
  %112 = getelementptr inbounds %struct.ichdev, %struct.ichdev* %94, i32 0, i32 4
  %113 = load %struct.snd_pcm_substream*, %struct.snd_pcm_substream** %112, align 8
  %114 = getelementptr inbounds %struct.snd_pcm_substream, %struct.snd_pcm_substream* %113, i32 0, i32 11
  %115 = load %struct.snd_pcm_runtime*, %struct.snd_pcm_runtime** %114, align 8
  call void @snd_intel8x0_setup_pcm_out(%struct.intel8x0* %9, %struct.snd_pcm_runtime* %115)
  br label %116

; <label>:116:                                    ; preds = %111, %107
  %117 = add i64 %96, 0
  %118 = trunc i64 %117 to i32
  %119 = getelementptr inbounds %struct.ichdev, %struct.ichdev* %94, i32 0, i32 3
  %120 = load i32, i32* %119, align 8
  call void @iputdword(%struct.intel8x0* %9, i32 %118, i32 %120)
  %121 = add i64 %96, 5
  %122 = trunc i64 %121 to i32
  %123 = getelementptr inbounds %struct.ichdev, %struct.ichdev* %94, i32 0, i32 13
  %124 = load i32, i32* %123, align 8
  %125 = trunc i32 %124 to i8
  call void @iputbyte(%struct.intel8x0* %9, i32 %122, i8 zeroext %125)
  %126 = add i64 %96, 4
  %127 = trunc i64 %126 to i32
  %128 = getelementptr inbounds %struct.ichdev, %struct.ichdev* %94, i32 0, i32 15
  %129 = load i32, i32* %128, align 8
  %130 = trunc i32 %129 to i8
  call void @iputbyte(%struct.intel8x0* %9, i32 %127, i8 zeroext %130)
  %131 = getelementptr inbounds %struct.ichdev, %struct.ichdev* %94, i32 0, i32 19
  %132 = load i32, i32* %131, align 8
  %133 = zext i32 %132 to i64
  %134 = add i64 %96, %133
  %135 = trunc i64 %134 to i32
  call void @iputbyte(%struct.intel8x0* %9, i32 %135, i8 zeroext 28)
  br label %136

; <label>:136:                                    ; preds = %91, %100, %116
  %137 = add nsw i32 %.2, 1
  br label %87

; <label>:138:                                    ; preds = %87
  call void @snd_power_change_state(%struct.snd_card* %6, i32 0)
  br label %139

; <label>:139:                                    ; preds = %138, %18
  %.0 = phi i32 [ -5, %18 ], [ 0, %138 ]
  ret i32 %.0
}

; Function Attrs: noinline nounwind uwtable
define internal void @snd_power_change_state(%struct.snd_card*, i32) #0 {
  %3 = getelementptr inbounds %struct.snd_card, %struct.snd_card* %0, i32 0, i32 33
  store i32 %1, i32* %3, align 4
  %4 = getelementptr inbounds %struct.snd_card, %struct.snd_card* %0, i32 0, i32 35
  call void @__wake_up(%struct.__wait_queue_head* %4, i32 3, i32 1, i8* null)
  ret void
}

declare i32 @snd_pcm_suspend_all(%struct.snd_pcm*) #1

declare void @snd_ac97_suspend(%struct.snd_ac97*) #1

declare void @__wake_up(%struct.__wait_queue_head*, i32, i32, i8*) #1

declare i32 @snd_card_disconnect(%struct.snd_card*) #1

declare void @synchronize_irq(i32) #1

declare void @snd_ac97_resume(%struct.snd_ac97*) #1

attributes #0 = { noinline nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { argmemonly nounwind }
attributes #3 = { nounwind }

!llvm.ident = !{!0}

!0 = !{!"clang version 4.0.1 (tags/RELEASE_401/final)"}
!1 = !{i32 -2146129252}
!2 = !{i32 -2146158726}
!3 = !{i32 1062684}
!4 = !{i32 -2146130127}
!5 = !{i32 -2145663200, i32 -2145663170, i32 -2145663124, i32 -2145663066, i32 -2145663012, i32 -2145662958, i32 -2145662903, i32 -2145662872}
