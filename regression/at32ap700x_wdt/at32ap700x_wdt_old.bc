; ModuleID = 'at32ap700x_wdt_old.bc'
source_filename = "drivers/watchdog/at32ap700x_wdt.c"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%struct.kernel_param_ops = type { i32 (i8*, %struct.kernel_param*)*, i32 (i8*, %struct.kernel_param*)*, void (i8*)* }
%struct.kernel_param = type { i8*, %struct.kernel_param_ops*, i16, i16, %union.anon }
%union.anon = type { i8* }
%struct.wdt_at32ap700x = type { i8*, %struct.spinlock, i32, i32, i64, %struct.miscdevice }
%struct.spinlock = type { %union.anon.0 }
%union.anon.0 = type { %struct.raw_spinlock }
%struct.raw_spinlock = type { %struct.arch_spinlock }
%struct.arch_spinlock = type { i32 }
%struct.miscdevice = type { i32, i8*, %struct.file_operations*, %struct.list_head, %struct.device*, %struct.device*, i8*, i32 }
%struct.file_operations = type { %struct.module*, i64 (%struct.file*, i64, i32)*, i64 (%struct.file*, i8*, i64, i64*)*, i64 (%struct.file*, i8*, i64, i64*)*, i64 (%struct.kiocb*, %struct.iovec*, i64, i64)*, i64 (%struct.kiocb*, %struct.iovec*, i64, i64)*, i32 (%struct.file*, i8*, i32 (i8*, i8*, i32, i64, i64, i32)*)*, i32 (%struct.file*, %struct.poll_table_struct*)*, i64 (%struct.file*, i32, i64)*, i64 (%struct.file*, i32, i64)*, i32 (%struct.file*, %struct.vm_area_struct*)*, i32 (%struct.inode*, %struct.file*)*, i32 (%struct.file*, %struct.files_struct*)*, i32 (%struct.inode*, %struct.file*)*, i32 (%struct.file*, i32)*, i32 (%struct.kiocb*, i32)*, i32 (i32, %struct.file*, i32)*, i32 (%struct.file*, i32, %struct.file_lock*)*, i64 (%struct.file*, %struct.page*, i32, i64, i64*, i32)*, i64 (%struct.file*, i64, i64, i64, i64)*, i32 (i32)*, i32 (%struct.file*, i32, %struct.file_lock*)*, i64 (%struct.pipe_inode_info*, %struct.file*, i64*, i64, i32)*, i64 (%struct.file*, i64*, %struct.pipe_inode_info*, i64, i32)*, i32 (%struct.file*, i64, %struct.file_lock**)*, i64 (%struct.file*, i32, i64, i64)* }
%struct.module = type { i32, %struct.list_head, [56 x i8], %struct.module_kobject, %struct.module_attribute*, i8*, i8*, %struct.kobject*, %struct.kernel_symbol*, i64*, i32, %struct.kernel_param*, i32, i32, %struct.kernel_symbol*, i64*, %struct.kernel_symbol*, i64*, i32, i32, %struct.exception_table_entry*, i32 ()*, i8*, i8*, i32, i32, i32, i32, i32, i32, %struct.mod_arch_specific, i32, i32, %struct.list_head, %struct.bug_entry*, %struct.elf64_sym*, %struct.elf64_sym*, i32, i32, i8*, i8*, %struct.module_sect_attrs*, %struct.module_notes_attrs*, i8*, i8*, i32, i32, %struct.tracepoint**, i32, i8**, %struct.ftrace_event_call**, i32, %struct.list_head, %struct.list_head, %struct.task_struct*, void ()*, %struct.module_ref* }
%struct.module_kobject = type { %struct.kobject, %struct.module*, %struct.kobject*, %struct.module_param_attrs* }
%struct.kobject = type { i8*, %struct.list_head, %struct.kobject*, %struct.kset*, %struct.kobj_type*, %struct.sysfs_dirent*, %struct.kref, i8 }
%struct.kset = type { %struct.list_head, %struct.spinlock, %struct.kobject, %struct.kset_uevent_ops* }
%struct.kset_uevent_ops = type { i32 (%struct.kset*, %struct.kobject*)*, i8* (%struct.kset*, %struct.kobject*)*, i32 (%struct.kset*, %struct.kobject*, %struct.kobj_uevent_env*)* }
%struct.kobj_uevent_env = type { [32 x i8*], i32, [2048 x i8], i32 }
%struct.kobj_type = type { void (%struct.kobject*)*, %struct.sysfs_ops*, %struct.attribute**, %struct.kobj_ns_type_operations* (%struct.kobject*)*, i8* (%struct.kobject*)* }
%struct.sysfs_ops = type { i64 (%struct.kobject*, %struct.attribute*, i8*)*, i64 (%struct.kobject*, %struct.attribute*, i8*, i64)* }
%struct.attribute = type { i8*, i32 }
%struct.kobj_ns_type_operations = type { i32, i8* ()*, i8* (%struct.sock*)*, i8* ()*, void (i8*)* }
%struct.sock = type opaque
%struct.sysfs_dirent = type opaque
%struct.kref = type { %struct.atomic_t }
%struct.atomic_t = type { i32 }
%struct.module_param_attrs = type opaque
%struct.module_attribute = type { %struct.attribute, i64 (%struct.module_attribute*, %struct.module*, i8*)*, i64 (%struct.module_attribute*, %struct.module*, i8*, i64)*, void (%struct.module*, i8*)*, i32 (%struct.module*)*, void (%struct.module*)* }
%struct.kernel_symbol = type { i64, i8* }
%struct.exception_table_entry = type { i64, i64 }
%struct.mod_arch_specific = type {}
%struct.bug_entry = type { i32, i32, i16, i16 }
%struct.elf64_sym = type { i32, i8, i8, i16, i64, i64 }
%struct.module_sect_attrs = type opaque
%struct.module_notes_attrs = type opaque
%struct.tracepoint = type { i8*, %struct.jump_label_key, void ()*, void ()*, %struct.tracepoint_func* }
%struct.jump_label_key = type { %struct.atomic_t }
%struct.tracepoint_func = type { i8*, i8* }
%struct.ftrace_event_call = type opaque
%struct.task_struct = type opaque
%struct.module_ref = type { i32, i32 }
%struct.file = type { %union.anon.1, %struct.path, %struct.file_operations*, %struct.spinlock, i32, %struct.atomic64_t, i32, i32, i64, %struct.fown_struct, %struct.cred*, %struct.file_ra_state, i64, i8*, i8*, %struct.list_head, %struct.address_space* }
%union.anon.1 = type { %struct.list_head }
%struct.path = type { %struct.vfsmount*, %struct.dentry* }
%struct.vfsmount = type opaque
%struct.dentry = type { i32, %struct.seqcount, %struct.hlist_bl_node, %struct.dentry*, %struct.qstr, %struct.inode*, [32 x i8], i32, %struct.spinlock, %struct.dentry_operations*, %struct.super_block*, i64, i8*, %struct.list_head, %union.anon.6, %struct.list_head, %struct.list_head }
%struct.seqcount = type { i32 }
%struct.hlist_bl_node = type { %struct.hlist_bl_node*, %struct.hlist_bl_node** }
%struct.qstr = type { i32, i32, i8* }
%struct.inode = type { i16, i32, i32, %struct.inode_operations*, %struct.super_block*, %struct.spinlock, i32, i64, i8*, %struct.mutex, i64, %struct.hlist_node, %struct.list_head, %struct.list_head, %struct.list_head, %union.anon.2, i64, %struct.atomic_t, i32, i32, i32, i64, i64, %struct.timespec, %struct.timespec, %struct.timespec, i64, i16, %struct.rw_semaphore, %struct.file_operations*, %struct.file_lock*, %struct.address_space*, %struct.address_space, [2 x %struct.dquot*], %struct.list_head, %union.anon.5, i32, i32, %struct.hlist_head, %struct.atomic_t, %struct.posix_acl*, %struct.posix_acl*, i8* }
%struct.inode_operations = type { %struct.dentry* (%struct.inode*, %struct.dentry*, %struct.nameidata*)*, i8* (%struct.dentry*, %struct.nameidata*)*, i32 (%struct.inode*, i32, i32)*, i32 (%struct.inode*, i32, i32)*, i32 (%struct.dentry*, i8*, i32)*, void (%struct.dentry*, %struct.nameidata*, i8*)*, i32 (%struct.inode*, %struct.dentry*, i32, %struct.nameidata*)*, i32 (%struct.dentry*, %struct.inode*, %struct.dentry*)*, i32 (%struct.inode*, %struct.dentry*)*, i32 (%struct.inode*, %struct.dentry*, i8*)*, i32 (%struct.inode*, %struct.dentry*, i32)*, i32 (%struct.inode*, %struct.dentry*)*, i32 (%struct.inode*, %struct.dentry*, i32, i32)*, i32 (%struct.inode*, %struct.dentry*, %struct.inode*, %struct.dentry*)*, void (%struct.inode*)*, i32 (%struct.dentry*, %struct.iattr*)*, i32 (%struct.vfsmount*, %struct.dentry*, %struct.kstat*)*, i32 (%struct.dentry*, i8*, i8*, i64, i32)*, i64 (%struct.dentry*, i8*, i8*, i64)*, i64 (%struct.dentry*, i8*, i64)*, i32 (%struct.dentry*, i8*)*, void (%struct.inode*, i64, i64)*, i32 (%struct.inode*, %struct.fiemap_extent_info*, i64, i64)*, [8 x i8] }
%struct.nameidata = type opaque
%struct.iattr = type { i32, i16, i32, i32, i64, %struct.timespec, %struct.timespec, %struct.timespec, %struct.file* }
%struct.kstat = type { i64, i32, i16, i32, i32, i32, i32, i64, %struct.timespec, %struct.timespec, %struct.timespec, i64, i64 }
%struct.fiemap_extent_info = type { i32, i32, i32, %struct.fiemap_extent* }
%struct.fiemap_extent = type { i64, i64, i64, [2 x i64], i32, [3 x i32] }
%struct.mutex = type { %struct.atomic_t, %struct.spinlock, %struct.list_head, %struct.task_struct* }
%struct.hlist_node = type { %struct.hlist_node*, %struct.hlist_node** }
%union.anon.2 = type { %struct.list_head }
%struct.timespec = type { i64, i64 }
%struct.rw_semaphore = type { i64, %struct.spinlock, %struct.list_head }
%struct.file_lock = type { %struct.file_lock*, %struct.list_head, %struct.list_head, %struct.files_struct*, i8, i8, i32, %struct.pid*, %struct.__wait_queue_head, %struct.file*, i64, i64, %struct.fasync_struct*, i64, %struct.file_lock_operations*, %struct.lock_manager_operations*, %union.anon.3 }
%struct.files_struct = type opaque
%struct.pid = type { %struct.atomic_t, i32, [3 x %struct.hlist_head], %struct.rcu_head, [1 x %struct.upid] }
%struct.rcu_head = type { %struct.rcu_head*, void (%struct.rcu_head*)* }
%struct.upid = type { i32, %struct.pid_namespace*, %struct.hlist_node }
%struct.pid_namespace = type opaque
%struct.__wait_queue_head = type { %struct.spinlock, %struct.list_head }
%struct.fasync_struct = type { %struct.spinlock, i32, i32, %struct.fasync_struct*, %struct.file*, %struct.rcu_head }
%struct.file_lock_operations = type { void (%struct.file_lock*, %struct.file_lock*)*, void (%struct.file_lock*)* }
%struct.lock_manager_operations = type { i32 (%struct.file_lock*, %struct.file_lock*)*, void (%struct.file_lock*)*, i32 (%struct.file_lock*, %struct.file_lock*, i32)*, void (%struct.file_lock*)*, void (%struct.file_lock*)*, i32 (%struct.file_lock**, i32)* }
%union.anon.3 = type { %struct.nfs_lock_info }
%struct.nfs_lock_info = type { i32, %struct.nlm_lockowner*, %struct.list_head }
%struct.nlm_lockowner = type opaque
%struct.address_space = type { %struct.inode*, %struct.radix_tree_root, %struct.spinlock, i32, %struct.prio_tree_root, %struct.list_head, %struct.mutex, i64, i64, %struct.address_space_operations*, i64, %struct.backing_dev_info*, %struct.spinlock, %struct.list_head, %struct.address_space* }
%struct.radix_tree_root = type { i32, i32, %struct.radix_tree_node* }
%struct.radix_tree_node = type opaque
%struct.prio_tree_root = type { %struct.prio_tree_node*, i16, i16 }
%struct.prio_tree_node = type { %struct.prio_tree_node*, %struct.prio_tree_node*, %struct.prio_tree_node*, i64, i64 }
%struct.address_space_operations = type { i32 (%struct.page*, %struct.writeback_control*)*, i32 (%struct.file*, %struct.page*)*, i32 (%struct.address_space*, %struct.writeback_control*)*, i32 (%struct.page*)*, i32 (%struct.file*, %struct.address_space*, %struct.list_head*, i32)*, i32 (%struct.file*, %struct.address_space*, i64, i32, i32, %struct.page**, i8**)*, i32 (%struct.file*, %struct.address_space*, i64, i32, i32, %struct.page*, i8*)*, i64 (%struct.address_space*, i64)*, void (%struct.page*, i64)*, i32 (%struct.page*, i32)*, void (%struct.page*)*, i64 (i32, %struct.kiocb*, %struct.iovec*, i64, i64)*, i32 (%struct.address_space*, i64, i32, i8**, i64*)*, i32 (%struct.address_space*, %struct.page*, %struct.page*)*, i32 (%struct.page*)*, i32 (%struct.page*, %struct.read_descriptor_t*, i64)*, i32 (%struct.address_space*, %struct.page*)* }
%struct.page = type opaque
%struct.writeback_control = type opaque
%struct.kiocb = type opaque
%struct.iovec = type opaque
%struct.read_descriptor_t = type { i64, i64, %union.anon.4, i32 }
%union.anon.4 = type { i8* }
%struct.backing_dev_info = type opaque
%struct.dquot = type { %struct.hlist_node, %struct.list_head, %struct.list_head, %struct.list_head, %struct.mutex, %struct.atomic_t, %struct.__wait_queue_head, %struct.super_block*, i32, i64, i64, i16, %struct.mem_dqblk }
%struct.mem_dqblk = type { i64, i64, i64, i64, i64, i64, i64, i64, i64 }
%union.anon.5 = type { %struct.pipe_inode_info* }
%struct.pipe_inode_info = type opaque
%struct.hlist_head = type { %struct.hlist_node* }
%struct.posix_acl = type opaque
%struct.dentry_operations = type { i32 (%struct.dentry*, %struct.nameidata*)*, i32 (%struct.dentry*, %struct.inode*, %struct.qstr*)*, i32 (%struct.dentry*, %struct.inode*, %struct.dentry*, %struct.inode*, i32, i8*, %struct.qstr*)*, i32 (%struct.dentry*)*, void (%struct.dentry*)*, void (%struct.dentry*, %struct.inode*)*, i8* (%struct.dentry*, i8*, i32)*, %struct.vfsmount* (%struct.path*)*, i32 (%struct.dentry*, i1)*, [56 x i8] }
%struct.super_block = type { %struct.list_head, i32, i8, i8, i64, i64, %struct.file_system_type*, %struct.super_operations*, %struct.dquot_operations*, %struct.quotactl_ops*, %struct.export_operations*, i64, i64, %struct.dentry*, %struct.rw_semaphore, %struct.mutex, i32, %struct.atomic_t, i8*, %struct.xattr_handler**, %struct.list_head, %struct.hlist_bl_head, %struct.list_head*, %struct.list_head, i32, %struct.block_device*, %struct.backing_dev_info*, %struct.mtd_info*, %struct.list_head, %struct.quota_info, i32, %struct.__wait_queue_head, [32 x i8], [16 x i8], i8*, i32, i32, %struct.mutex, i8*, i8*, %struct.dentry_operations*, i32 }
%struct.file_system_type = type { i8*, i32, %struct.dentry* (%struct.file_system_type*, i32, i8*, i8*)*, void (%struct.super_block*)*, %struct.module*, %struct.file_system_type*, %struct.list_head, %struct.lock_class_key, %struct.lock_class_key, %struct.lock_class_key, %struct.lock_class_key, %struct.lock_class_key, %struct.lock_class_key, %struct.lock_class_key }
%struct.lock_class_key = type {}
%struct.super_operations = type { %struct.inode* (%struct.super_block*)*, void (%struct.inode*)*, void (%struct.inode*, i32)*, i32 (%struct.inode*, %struct.writeback_control*)*, i32 (%struct.inode*)*, void (%struct.inode*)*, void (%struct.super_block*)*, void (%struct.super_block*)*, i32 (%struct.super_block*, i32)*, i32 (%struct.super_block*)*, i32 (%struct.super_block*)*, i32 (%struct.dentry*, %struct.kstatfs*)*, i32 (%struct.super_block*, i32*, i8*)*, void (%struct.super_block*)*, i32 (%struct.seq_file*, %struct.vfsmount*)*, i32 (%struct.seq_file*, %struct.vfsmount*)*, i32 (%struct.seq_file*, %struct.vfsmount*)*, i32 (%struct.seq_file*, %struct.vfsmount*)*, i64 (%struct.super_block*, i32, i8*, i64, i64)*, i64 (%struct.super_block*, i32, i8*, i64, i64)*, i32 (%struct.super_block*, %struct.page*, i32)* }
%struct.kstatfs = type opaque
%struct.seq_file = type opaque
%struct.dquot_operations = type { i32 (%struct.dquot*)*, %struct.dquot* (%struct.super_block*, i32)*, void (%struct.dquot*)*, i32 (%struct.dquot*)*, i32 (%struct.dquot*)*, i32 (%struct.dquot*)*, i32 (%struct.super_block*, i32)*, i64* (%struct.inode*)* }
%struct.quotactl_ops = type { i32 (%struct.super_block*, i32, i32, %struct.path*)*, i32 (%struct.super_block*, i32, i32)*, i32 (%struct.super_block*, i32)*, i32 (%struct.super_block*, i32, i32)*, i32 (%struct.super_block*, i32, %struct.if_dqinfo*)*, i32 (%struct.super_block*, i32, %struct.if_dqinfo*)*, i32 (%struct.super_block*, i32, i32, %struct.fs_disk_quota*)*, i32 (%struct.super_block*, i32, i32, %struct.fs_disk_quota*)*, i32 (%struct.super_block*, %struct.fs_quota_stat*)*, i32 (%struct.super_block*, i32, i32)* }
%struct.if_dqinfo = type { i64, i64, i32, i32 }
%struct.fs_disk_quota = type { i8, i8, i16, i32, i64, i64, i64, i64, i64, i64, i32, i32, i16, i16, i32, i64, i64, i64, i32, i16, i16, [8 x i8] }
%struct.fs_quota_stat = type { i8, i16, i8, %struct.fs_qfilestat, %struct.fs_qfilestat, i32, i32, i32, i32, i16, i16 }
%struct.fs_qfilestat = type { i64, i64, i32 }
%struct.export_operations = type opaque
%struct.xattr_handler = type opaque
%struct.hlist_bl_head = type { %struct.hlist_bl_node* }
%struct.block_device = type { i32, i32, %struct.inode*, %struct.super_block*, %struct.mutex, %struct.list_head, i8*, i8*, i32, i8, %struct.list_head, %struct.block_device*, i32, %struct.hd_struct*, i32, i32, %struct.gendisk*, %struct.list_head, i64, i32, %struct.mutex }
%struct.hd_struct = type opaque
%struct.gendisk = type opaque
%struct.mtd_info = type opaque
%struct.quota_info = type { i32, %struct.mutex, %struct.mutex, %struct.rw_semaphore, [2 x %struct.inode*], [2 x %struct.mem_dqinfo], [2 x %struct.quota_format_ops*] }
%struct.mem_dqinfo = type { %struct.quota_format_type*, i32, %struct.list_head, i64, i32, i32, i64, i64, i8* }
%struct.quota_format_type = type { i32, %struct.quota_format_ops*, %struct.module*, %struct.quota_format_type* }
%struct.quota_format_ops = type { i32 (%struct.super_block*, i32)*, i32 (%struct.super_block*, i32)*, i32 (%struct.super_block*, i32)*, i32 (%struct.super_block*, i32)*, i32 (%struct.dquot*)*, i32 (%struct.dquot*)*, i32 (%struct.dquot*)* }
%union.anon.6 = type { %struct.list_head }
%struct.atomic64_t = type { i64 }
%struct.fown_struct = type { %struct.rwlock_t, %struct.pid*, i32, i32, i32, i32 }
%struct.rwlock_t = type { %struct.arch_rwlock_t }
%struct.arch_rwlock_t = type { i32 }
%struct.cred = type opaque
%struct.file_ra_state = type { i64, i32, i32, i32, i32, i64 }
%struct.poll_table_struct = type opaque
%struct.vm_area_struct = type opaque
%struct.list_head = type { %struct.list_head*, %struct.list_head* }
%struct.device = type { %struct.device*, %struct.device_private*, %struct.kobject, i8*, %struct.device_type*, %struct.mutex, %struct.bus_type*, %struct.device_driver*, i8*, %struct.dev_pm_info, %struct.dev_power_domain*, i32, i64*, i64, %struct.device_dma_parameters*, %struct.list_head, %struct.dma_coherent_mem*, %struct.dev_archdata, %struct.device_node*, i32, %struct.spinlock, %struct.list_head, %struct.klist_node, %struct.class*, %struct.attribute_group**, void (%struct.device*)* }
%struct.device_private = type opaque
%struct.device_type = type { i8*, %struct.attribute_group**, i32 (%struct.device*, %struct.kobj_uevent_env*)*, i8* (%struct.device*, i32*)*, void (%struct.device*)*, %struct.dev_pm_ops* }
%struct.dev_pm_ops = type { i32 (%struct.device*)*, void (%struct.device*)*, i32 (%struct.device*)*, i32 (%struct.device*)*, i32 (%struct.device*)*, i32 (%struct.device*)*, i32 (%struct.device*)*, i32 (%struct.device*)*, i32 (%struct.device*)*, i32 (%struct.device*)*, i32 (%struct.device*)*, i32 (%struct.device*)*, i32 (%struct.device*)*, i32 (%struct.device*)*, i32 (%struct.device*)*, i32 (%struct.device*)*, i32 (%struct.device*)* }
%struct.bus_type = type { i8*, %struct.bus_attribute*, %struct.device_attribute*, %struct.driver_attribute*, i32 (%struct.device*, %struct.device_driver*)*, i32 (%struct.device*, %struct.kobj_uevent_env*)*, i32 (%struct.device*)*, i32 (%struct.device*)*, void (%struct.device*)*, i32 (%struct.device*, i32)*, i32 (%struct.device*)*, %struct.dev_pm_ops*, %struct.subsys_private* }
%struct.bus_attribute = type { %struct.attribute, i64 (%struct.bus_type*, i8*)*, i64 (%struct.bus_type*, i8*, i64)* }
%struct.device_attribute = type { %struct.attribute, i64 (%struct.device*, %struct.device_attribute*, i8*)*, i64 (%struct.device*, %struct.device_attribute*, i8*, i64)* }
%struct.driver_attribute = type { %struct.attribute, i64 (%struct.device_driver*, i8*)*, i64 (%struct.device_driver*, i8*, i64)* }
%struct.subsys_private = type opaque
%struct.device_driver = type { i8*, %struct.bus_type*, %struct.module*, i8*, i8, %struct.of_device_id*, i32 (%struct.device*)*, i32 (%struct.device*)*, void (%struct.device*)*, i32 (%struct.device*, i32)*, i32 (%struct.device*)*, %struct.attribute_group**, %struct.dev_pm_ops*, %struct.driver_private* }
%struct.of_device_id = type { [32 x i8], [32 x i8], [128 x i8], i8* }
%struct.driver_private = type opaque
%struct.dev_pm_info = type { %struct.pm_message, i8, %struct.spinlock, %struct.list_head, %struct.completion, %struct.wakeup_source* }
%struct.pm_message = type { i32 }
%struct.completion = type { i32, %struct.__wait_queue_head }
%struct.wakeup_source = type { i8*, %struct.list_head, %struct.spinlock, %struct.timer_list, i64, %union.ktime, %union.ktime, %union.ktime, i64, i64, i64, i64, i8 }
%struct.timer_list = type { %struct.list_head, i64, %struct.tvec_base*, void (i64)*, i64, i32, i32, i8*, [16 x i8] }
%struct.tvec_base = type opaque
%union.ktime = type { i64 }
%struct.dev_power_domain = type { %struct.dev_pm_ops }
%struct.device_dma_parameters = type { i32, i64 }
%struct.dma_coherent_mem = type opaque
%struct.dev_archdata = type { i8*, %struct.dma_map_ops*, i8* }
%struct.dma_map_ops = type opaque
%struct.device_node = type opaque
%struct.klist_node = type { i8*, %struct.list_head, %struct.kref }
%struct.class = type { i8*, %struct.module*, %struct.class_attribute*, %struct.device_attribute*, %struct.bin_attribute*, %struct.kobject*, i32 (%struct.device*, %struct.kobj_uevent_env*)*, i8* (%struct.device*, i32*)*, void (%struct.class*)*, void (%struct.device*)*, i32 (%struct.device*, i32)*, i32 (%struct.device*)*, %struct.kobj_ns_type_operations*, i8* (%struct.device*)*, %struct.dev_pm_ops*, %struct.subsys_private* }
%struct.class_attribute = type { %struct.attribute, i64 (%struct.class*, %struct.class_attribute*, i8*)*, i64 (%struct.class*, %struct.class_attribute*, i8*, i64)* }
%struct.bin_attribute = type { %struct.attribute, i64, i8*, i64 (%struct.file*, %struct.kobject*, %struct.bin_attribute*, i8*, i64, i64)*, i64 (%struct.file*, %struct.kobject*, %struct.bin_attribute*, i8*, i64, i64)*, i32 (%struct.file*, %struct.kobject*, %struct.bin_attribute*, %struct.vm_area_struct*)* }
%struct.attribute_group = type { i8*, i32 (%struct.kobject*, %struct.attribute*, i32)*, %struct.attribute** }
%struct.platform_driver = type { i32 (%struct.platform_device*)*, i32 (%struct.platform_device*)*, void (%struct.platform_device*)*, i32 (%struct.platform_device*, i32)*, i32 (%struct.platform_device*)*, %struct.device_driver, %struct.platform_device_id* }
%struct.platform_device = type { i8*, i32, %struct.device, i32, %struct.resource*, %struct.platform_device_id*, %struct.mfd_cell*, %struct.pdev_archdata }
%struct.resource = type { i64, i64, i8*, i64, %struct.resource*, %struct.resource*, %struct.resource* }
%struct.mfd_cell = type opaque
%struct.pdev_archdata = type {}
%struct.platform_device_id = type { [20 x i8], i64 }
%struct.smp_ops = type { void ()*, void (i32)*, void (i32)*, void (i32)*, void (i32)*, i32 (i32)*, i32 ()*, void (i32)*, void ()*, void (%struct.cpumask*)*, void (i32)* }
%struct.cpumask = type { [1 x i64] }
%struct.watchdog_info = type { i32, i32, [32 x i8] }

@__param_str_timeout = internal constant [23 x i8] c"at32ap700x_wdt.timeout\00", align 16
@param_ops_int = external global %struct.kernel_param_ops, align 8
@timeout = internal global i32 2, align 4
@__param_timeout = internal constant %struct.kernel_param { i8* getelementptr inbounds ([23 x i8], [23 x i8]* @__param_str_timeout, i32 0, i32 0), %struct.kernel_param_ops* @param_ops_int, i16 0, i16 0, %union.anon { i8* bitcast (i32* @timeout to i8*) } }, section "__param", align 8
@__param_str_nowayout = internal constant [24 x i8] c"at32ap700x_wdt.nowayout\00", align 16
@nowayout = internal global i32 0, align 4
@__param_nowayout = internal constant %struct.kernel_param { i8* getelementptr inbounds ([24 x i8], [24 x i8]* @__param_str_nowayout, i32 0, i32 0), %struct.kernel_param_ops* @param_ops_int, i16 0, i16 0, %union.anon { i8* bitcast (i32* @nowayout to i8*) } }, section "__param", align 8
@wdt = internal global %struct.wdt_at32ap700x* null, align 8
@__initcall_at32_wdt_init6 = internal global i32 ()* @at32_wdt_init, section ".initcall6.init", align 8
@at32_wdt_driver = internal global %struct.platform_driver { i32 (%struct.platform_device*)* null, i32 (%struct.platform_device*)* null, void (%struct.platform_device*)* @at32_wdt_shutdown, i32 (%struct.platform_device*, i32)* @at32_wdt_suspend, i32 (%struct.platform_device*)* @at32_wdt_resume, %struct.device_driver { i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.3, i32 0, i32 0), %struct.bus_type* null, %struct.module* null, i8* null, i8 0, %struct.of_device_id* null, i32 (%struct.device*)* null, i32 (%struct.device*)* null, void (%struct.device*)* null, i32 (%struct.device*, i32)* null, i32 (%struct.device*)* null, %struct.attribute_group** null, %struct.dev_pm_ops* null, %struct.driver_private* null }, %struct.platform_device_id* null }, align 8
@__exitcall_at32_wdt_exit = internal global void ()* @at32_wdt_exit, section ".exitcall.exit", align 8
@smp_ops = external global %struct.smp_ops, align 8
@.str = private unnamed_addr constant [69 x i8] c"CPU must be reset with external reset or POR due to silicon errata.\0A\00", align 1
@.str.1 = private unnamed_addr constant [9 x i8] c"watchdog\00", align 1
@at32_wdt_fops = internal constant %struct.file_operations { %struct.module* null, i64 (%struct.file*, i64, i32)* @no_llseek, i64 (%struct.file*, i8*, i64, i64*)* null, i64 (%struct.file*, i8*, i64, i64*)* @at32_wdt_write, i64 (%struct.kiocb*, %struct.iovec*, i64, i64)* null, i64 (%struct.kiocb*, %struct.iovec*, i64, i64)* null, i32 (%struct.file*, i8*, i32 (i8*, i8*, i32, i64, i64, i32)*)* null, i32 (%struct.file*, %struct.poll_table_struct*)* null, i64 (%struct.file*, i32, i64)* @at32_wdt_ioctl, i64 (%struct.file*, i32, i64)* null, i32 (%struct.file*, %struct.vm_area_struct*)* null, i32 (%struct.inode*, %struct.file*)* @at32_wdt_open, i32 (%struct.file*, %struct.files_struct*)* null, i32 (%struct.inode*, %struct.file*)* @at32_wdt_close, i32 (%struct.file*, i32)* null, i32 (%struct.kiocb*, i32)* null, i32 (i32, %struct.file*, i32)* null, i32 (%struct.file*, i32, %struct.file_lock*)* null, i64 (%struct.file*, %struct.page*, i32, i64, i64*, i32)* null, i64 (%struct.file*, i64, i64, i64, i64)* null, i32 (i32)* null, i32 (%struct.file*, i32, %struct.file_lock*)* null, i64 (%struct.pipe_inode_info*, %struct.file*, i64*, i64, i32)* null, i64 (%struct.file*, i64*, %struct.pipe_inode_info*, i64, i32)* null, i32 (%struct.file*, i64, %struct.file_lock**)* null, i64 (%struct.file*, i32, i64, i64)* null }, align 8
@.str.2 = private unnamed_addr constant [54 x i8] c"AT32AP700X WDT at 0x%p, timeout %d sec (nowayout=%d)\0A\00", align 1
@expect_release = internal global i8 0, align 1
@at32_wdt_info = internal constant %struct.watchdog_info { i32 33152, i32 0, [32 x i8] c"at32ap700x watchdog\00\00\00\00\00\00\00\00\00\00\00\00\00" }, align 4
@.str.3 = private unnamed_addr constant [9 x i8] c"at32_wdt\00", align 1
@llvm.used = appending global [6 x i8*] [i8* bitcast (%struct.kernel_param* @__param_timeout to i8*), i8* bitcast (%struct.kernel_param* @__param_nowayout to i8*), i8* bitcast (i32 (%struct.platform_device*)* @at32_wdt_remove to i8*), i8* bitcast (i32 ()** @__initcall_at32_wdt_init6 to i8*), i8* bitcast (void ()* @at32_wdt_exit to i8*), i8* bitcast (void ()** @__exitcall_at32_wdt_exit to i8*)], section "llvm.metadata"

; Function Attrs: noinline nounwind uwtable
define internal void @smp_send_stop() #0 {
  %1 = load void (i32)*, void (i32)** getelementptr inbounds (%struct.smp_ops, %struct.smp_ops* @smp_ops, i32 0, i32 3), align 8
  call void %1(i32 0)
  ret void
}

; Function Attrs: noinline nounwind uwtable
define internal void @smp_send_reschedule(i32) #0 {
  %2 = load void (i32)*, void (i32)** getelementptr inbounds (%struct.smp_ops, %struct.smp_ops* @smp_ops, i32 0, i32 4), align 8
  call void %2(i32 %0)
  ret void
}

; Function Attrs: noinline nounwind uwtable
define internal void @smp_prepare_cpus(i32) #0 {
  %2 = load void (i32)*, void (i32)** getelementptr inbounds (%struct.smp_ops, %struct.smp_ops* @smp_ops, i32 0, i32 1), align 8
  call void %2(i32 %0)
  ret void
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @__cpu_up(i32) #0 {
  %2 = load i32 (i32)*, i32 (i32)** getelementptr inbounds (%struct.smp_ops, %struct.smp_ops* @smp_ops, i32 0, i32 5), align 8
  %3 = call i32 %2(i32 %0)
  ret i32 %3
}

; Function Attrs: noinline nounwind uwtable
define internal void @smp_cpus_done(i32) #0 {
  %2 = load void (i32)*, void (i32)** getelementptr inbounds (%struct.smp_ops, %struct.smp_ops* @smp_ops, i32 0, i32 2), align 8
  call void %2(i32 %0)
  ret void
}

; Function Attrs: noinline nounwind uwtable
define internal void @smp_prepare_boot_cpu() #0 {
  %1 = load void ()*, void ()** getelementptr inbounds (%struct.smp_ops, %struct.smp_ops* @smp_ops, i32 0, i32 0), align 8
  call void %1()
  ret void
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @at32_wdt_remove(%struct.platform_device*) #0 section ".exit.text" {
  %2 = load %struct.wdt_at32ap700x*, %struct.wdt_at32ap700x** @wdt, align 8
  %3 = icmp ne %struct.wdt_at32ap700x* %2, null
  br i1 %3, label %4, label %22

; <label>:4:                                      ; preds = %1
  %5 = call i8* @platform_get_drvdata(%struct.platform_device* %0)
  %6 = load %struct.wdt_at32ap700x*, %struct.wdt_at32ap700x** @wdt, align 8
  %7 = bitcast %struct.wdt_at32ap700x* %6 to i8*
  %8 = icmp eq i8* %5, %7
  br i1 %8, label %9, label %22

; <label>:9:                                      ; preds = %4
  %10 = load i32, i32* @nowayout, align 4
  %11 = icmp ne i32 %10, 0
  br i1 %11, label %13, label %12

; <label>:12:                                     ; preds = %9
  call void @at32_wdt_stop()
  br label %13

; <label>:13:                                     ; preds = %12, %9
  %14 = load %struct.wdt_at32ap700x*, %struct.wdt_at32ap700x** @wdt, align 8
  %15 = getelementptr inbounds %struct.wdt_at32ap700x, %struct.wdt_at32ap700x* %14, i32 0, i32 5
  %16 = call i32 @misc_deregister(%struct.miscdevice* %15)
  %17 = load %struct.wdt_at32ap700x*, %struct.wdt_at32ap700x** @wdt, align 8
  %18 = getelementptr inbounds %struct.wdt_at32ap700x, %struct.wdt_at32ap700x* %17, i32 0, i32 0
  %19 = load i8*, i8** %18, align 8
  call void @iounmap(i8* %19)
  %20 = load %struct.wdt_at32ap700x*, %struct.wdt_at32ap700x** @wdt, align 8
  %21 = bitcast %struct.wdt_at32ap700x* %20 to i8*
  call void @kfree(i8* %21)
  store %struct.wdt_at32ap700x* null, %struct.wdt_at32ap700x** @wdt, align 8
  call void @platform_set_drvdata(%struct.platform_device* %0, i8* null)
  br label %22

; <label>:22:                                     ; preds = %13, %4, %1
  ret i32 0
}

; Function Attrs: noinline nounwind uwtable
define internal i8* @platform_get_drvdata(%struct.platform_device*) #0 {
  %2 = getelementptr inbounds %struct.platform_device, %struct.platform_device* %0, i32 0, i32 2
  %3 = call i8* @dev_get_drvdata(%struct.device* %2)
  ret i8* %3
}

; Function Attrs: noinline nounwind uwtable
define internal void @at32_wdt_stop() #0 {
  %1 = load %struct.wdt_at32ap700x*, %struct.wdt_at32ap700x** @wdt, align 8
  %2 = getelementptr inbounds %struct.wdt_at32ap700x, %struct.wdt_at32ap700x* %1, i32 0, i32 1
  call void @spin_lock(%struct.spinlock* %2)
  %3 = load %struct.wdt_at32ap700x*, %struct.wdt_at32ap700x** @wdt, align 8
  %4 = getelementptr inbounds %struct.wdt_at32ap700x, %struct.wdt_at32ap700x* %3, i32 0, i32 0
  %5 = load i8*, i8** %4, align 8
  %6 = getelementptr i8, i8* %5, i64 0
  %7 = call i32 @__readl(i8* %6)
  %8 = and i32 %7, 3840
  %9 = zext i32 %8 to i64
  %10 = or i64 %9, 1426063360
  %11 = trunc i64 %10 to i32
  %12 = load %struct.wdt_at32ap700x*, %struct.wdt_at32ap700x** @wdt, align 8
  %13 = getelementptr inbounds %struct.wdt_at32ap700x, %struct.wdt_at32ap700x* %12, i32 0, i32 0
  %14 = load i8*, i8** %13, align 8
  %15 = getelementptr i8, i8* %14, i64 0
  call void @__writel(i32 %11, i8* %15)
  %16 = or i64 %9, -1442840576
  %17 = trunc i64 %16 to i32
  %18 = load %struct.wdt_at32ap700x*, %struct.wdt_at32ap700x** @wdt, align 8
  %19 = getelementptr inbounds %struct.wdt_at32ap700x, %struct.wdt_at32ap700x* %18, i32 0, i32 0
  %20 = load i8*, i8** %19, align 8
  %21 = getelementptr i8, i8* %20, i64 0
  call void @__writel(i32 %17, i8* %21)
  %22 = load %struct.wdt_at32ap700x*, %struct.wdt_at32ap700x** @wdt, align 8
  %23 = getelementptr inbounds %struct.wdt_at32ap700x, %struct.wdt_at32ap700x* %22, i32 0, i32 1
  call void @spin_unlock(%struct.spinlock* %23)
  ret void
}

declare i32 @misc_deregister(%struct.miscdevice*) #1

declare void @iounmap(i8*) #1

declare void @kfree(i8*) #1

; Function Attrs: noinline nounwind uwtable
define internal void @platform_set_drvdata(%struct.platform_device*, i8*) #0 {
  %3 = getelementptr inbounds %struct.platform_device, %struct.platform_device* %0, i32 0, i32 2
  %4 = call i32 @dev_set_drvdata(%struct.device* %3, i8* %1)
  ret void
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @at32_wdt_init() #0 section ".init.text" {
  %1 = call i32 @platform_driver_probe(%struct.platform_driver* @at32_wdt_driver, i32 (%struct.platform_device*)* @at32_wdt_probe)
  ret i32 %1
}

; Function Attrs: noinline nounwind uwtable
define internal void @at32_wdt_exit() #0 section ".exit.text" {
  call void @platform_driver_unregister(%struct.platform_driver* @at32_wdt_driver)
  ret void
}

declare void @platform_driver_unregister(%struct.platform_driver*) #1

declare i8* @dev_get_drvdata(%struct.device*) #1

; Function Attrs: noinline nounwind uwtable
define internal void @spin_lock(%struct.spinlock*) #0 {
  %2 = getelementptr inbounds %struct.spinlock, %struct.spinlock* %0, i32 0, i32 0
  %3 = bitcast %union.anon.0* %2 to %struct.raw_spinlock*
  call void @_raw_spin_lock(%struct.raw_spinlock* %3)
  ret void
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @__readl(i8*) #0 {
  %2 = bitcast i8* %0 to i32*
  %3 = call i32 asm sideeffect "movl $1,$0", "=r,*m,~{dirflag},~{fpsr},~{flags}"(i32* %2) #3, !srcloc !1
  ret i32 %3
}

; Function Attrs: noinline nounwind uwtable
define internal void @__writel(i32, i8*) #0 {
  %3 = bitcast i8* %1 to i32*
  call void asm sideeffect "movl $0,$1", "r,*m,~{dirflag},~{fpsr},~{flags}"(i32 %0, i32* %3) #3, !srcloc !2
  ret void
}

; Function Attrs: noinline nounwind uwtable
define internal void @spin_unlock(%struct.spinlock*) #0 {
  %2 = getelementptr inbounds %struct.spinlock, %struct.spinlock* %0, i32 0, i32 0
  %3 = bitcast %union.anon.0* %2 to %struct.raw_spinlock*
  call void @__raw_spin_unlock(%struct.raw_spinlock* %3)
  ret void
}

declare void @_raw_spin_lock(%struct.raw_spinlock*) #1 section ".spinlock.text"

; Function Attrs: noinline nounwind uwtable
define internal void @__raw_spin_unlock(%struct.raw_spinlock*) #0 {
  call void @do_raw_spin_unlock(%struct.raw_spinlock* %0)
  ret void
}

; Function Attrs: noinline nounwind uwtable
define internal void @do_raw_spin_unlock(%struct.raw_spinlock*) #0 {
  %2 = getelementptr inbounds %struct.raw_spinlock, %struct.raw_spinlock* %0, i32 0, i32 0
  %3 = getelementptr inbounds %struct.arch_spinlock, %struct.arch_spinlock* %2, i32 0, i32 0
  call void asm sideeffect "incb $0", "=*m,*m,~{memory},~{cc},~{dirflag},~{fpsr},~{flags}"(i32* %3, i32* %3) #3, !srcloc !3
  ret void
}

declare i32 @dev_set_drvdata(%struct.device*, i8*) #1

declare i32 @platform_driver_probe(%struct.platform_driver*, i32 (%struct.platform_device*)*) #1

; Function Attrs: noinline nounwind uwtable
define internal i32 @at32_wdt_probe(%struct.platform_device*) #0 section ".init.text" {
  %2 = alloca %struct.raw_spinlock, align 4
  %3 = load %struct.wdt_at32ap700x*, %struct.wdt_at32ap700x** @wdt, align 8
  %4 = icmp ne %struct.wdt_at32ap700x* %3, null
  br i1 %4, label %93, label %5

; <label>:5:                                      ; preds = %1
  %6 = call %struct.resource* @platform_get_resource(%struct.platform_device* %0, i32 512, i32 0)
  %7 = icmp ne %struct.resource* %6, null
  br i1 %7, label %8, label %93

; <label>:8:                                      ; preds = %5
  %9 = call i8* @kzalloc(i64 104, i32 208)
  %10 = bitcast i8* %9 to %struct.wdt_at32ap700x*
  store %struct.wdt_at32ap700x* %10, %struct.wdt_at32ap700x** @wdt, align 8
  %11 = load %struct.wdt_at32ap700x*, %struct.wdt_at32ap700x** @wdt, align 8
  %12 = icmp ne %struct.wdt_at32ap700x* %11, null
  br i1 %12, label %13, label %93

; <label>:13:                                     ; preds = %8
  %14 = getelementptr inbounds %struct.resource, %struct.resource* %6, i32 0, i32 0
  %15 = load i64, i64* %14, align 8
  %16 = call i64 @resource_size(%struct.resource* %6)
  %17 = call i8* @ioremap(i64 %15, i64 %16)
  %18 = load %struct.wdt_at32ap700x*, %struct.wdt_at32ap700x** @wdt, align 8
  %19 = getelementptr inbounds %struct.wdt_at32ap700x, %struct.wdt_at32ap700x* %18, i32 0, i32 0
  store i8* %17, i8** %19, align 8
  %20 = load %struct.wdt_at32ap700x*, %struct.wdt_at32ap700x** @wdt, align 8
  %21 = getelementptr inbounds %struct.wdt_at32ap700x, %struct.wdt_at32ap700x* %20, i32 0, i32 0
  %22 = load i8*, i8** %21, align 8
  %23 = icmp ne i8* %22, null
  br i1 %23, label %24, label %90

; <label>:24:                                     ; preds = %13
  %25 = load %struct.wdt_at32ap700x*, %struct.wdt_at32ap700x** @wdt, align 8
  %26 = getelementptr inbounds %struct.wdt_at32ap700x, %struct.wdt_at32ap700x* %25, i32 0, i32 1
  %27 = call %struct.raw_spinlock* @spinlock_check(%struct.spinlock* %26)
  %28 = load %struct.wdt_at32ap700x*, %struct.wdt_at32ap700x** @wdt, align 8
  %29 = getelementptr inbounds %struct.wdt_at32ap700x, %struct.wdt_at32ap700x* %28, i32 0, i32 1
  %30 = getelementptr inbounds %struct.spinlock, %struct.spinlock* %29, i32 0, i32 0
  %31 = bitcast %union.anon.0* %30 to %struct.raw_spinlock*
  %32 = getelementptr inbounds %struct.raw_spinlock, %struct.raw_spinlock* %2, i32 0, i32 0
  %33 = getelementptr inbounds %struct.arch_spinlock, %struct.arch_spinlock* %32, i32 0, i32 0
  store i32 0, i32* %33, align 4
  %34 = bitcast %struct.raw_spinlock* %31 to i8*
  %35 = bitcast %struct.raw_spinlock* %2 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %34, i8* %35, i64 4, i32 4, i1 false)
  %36 = call i32 @at32_wdt_get_status()
  %37 = load %struct.wdt_at32ap700x*, %struct.wdt_at32ap700x** @wdt, align 8
  %38 = getelementptr inbounds %struct.wdt_at32ap700x, %struct.wdt_at32ap700x* %37, i32 0, i32 3
  store i32 %36, i32* %38, align 8
  %39 = load %struct.wdt_at32ap700x*, %struct.wdt_at32ap700x** @wdt, align 8
  %40 = getelementptr inbounds %struct.wdt_at32ap700x, %struct.wdt_at32ap700x* %39, i32 0, i32 3
  %41 = load i32, i32* %40, align 8
  %42 = and i32 %41, 32
  %43 = icmp ne i32 %42, 0
  br i1 %43, label %44, label %47

; <label>:44:                                     ; preds = %24
  %45 = getelementptr inbounds %struct.platform_device, %struct.platform_device* %0, i32 0, i32 2
  %46 = call i32 (%struct.device*, i8*, ...) @_dev_info(%struct.device* %45, i8* getelementptr inbounds ([69 x i8], [69 x i8]* @.str, i32 0, i32 0))
  br label %86

; <label>:47:                                     ; preds = %24
  %48 = load %struct.wdt_at32ap700x*, %struct.wdt_at32ap700x** @wdt, align 8
  %49 = getelementptr inbounds %struct.wdt_at32ap700x, %struct.wdt_at32ap700x* %48, i32 0, i32 4
  store i64 0, i64* %49, align 8
  %50 = load %struct.wdt_at32ap700x*, %struct.wdt_at32ap700x** @wdt, align 8
  %51 = getelementptr inbounds %struct.wdt_at32ap700x, %struct.wdt_at32ap700x* %50, i32 0, i32 5
  %52 = getelementptr inbounds %struct.miscdevice, %struct.miscdevice* %51, i32 0, i32 0
  store i32 130, i32* %52, align 8
  %53 = load %struct.wdt_at32ap700x*, %struct.wdt_at32ap700x** @wdt, align 8
  %54 = getelementptr inbounds %struct.wdt_at32ap700x, %struct.wdt_at32ap700x* %53, i32 0, i32 5
  %55 = getelementptr inbounds %struct.miscdevice, %struct.miscdevice* %54, i32 0, i32 1
  store i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.1, i32 0, i32 0), i8** %55, align 8
  %56 = load %struct.wdt_at32ap700x*, %struct.wdt_at32ap700x** @wdt, align 8
  %57 = getelementptr inbounds %struct.wdt_at32ap700x, %struct.wdt_at32ap700x* %56, i32 0, i32 5
  %58 = getelementptr inbounds %struct.miscdevice, %struct.miscdevice* %57, i32 0, i32 2
  store %struct.file_operations* @at32_wdt_fops, %struct.file_operations** %58, align 8
  %59 = getelementptr inbounds %struct.platform_device, %struct.platform_device* %0, i32 0, i32 2
  %60 = load %struct.wdt_at32ap700x*, %struct.wdt_at32ap700x** @wdt, align 8
  %61 = getelementptr inbounds %struct.wdt_at32ap700x, %struct.wdt_at32ap700x* %60, i32 0, i32 5
  %62 = getelementptr inbounds %struct.miscdevice, %struct.miscdevice* %61, i32 0, i32 4
  store %struct.device* %59, %struct.device** %62, align 8
  %63 = load %struct.wdt_at32ap700x*, %struct.wdt_at32ap700x** @wdt, align 8
  %64 = bitcast %struct.wdt_at32ap700x* %63 to i8*
  call void @platform_set_drvdata(%struct.platform_device* %0, i8* %64)
  %65 = load i32, i32* @timeout, align 4
  %66 = call i32 @at32_wdt_settimeout(i32 %65)
  %67 = icmp ne i32 %66, 0
  br i1 %67, label %68, label %70

; <label>:68:                                     ; preds = %47
  %69 = call i32 @at32_wdt_settimeout(i32 2)
  br label %70

; <label>:70:                                     ; preds = %68, %47
  %71 = load %struct.wdt_at32ap700x*, %struct.wdt_at32ap700x** @wdt, align 8
  %72 = getelementptr inbounds %struct.wdt_at32ap700x, %struct.wdt_at32ap700x* %71, i32 0, i32 5
  %73 = call i32 @misc_register(%struct.miscdevice* %72)
  %74 = icmp ne i32 %73, 0
  br i1 %74, label %85, label %75

; <label>:75:                                     ; preds = %70
  %76 = getelementptr inbounds %struct.platform_device, %struct.platform_device* %0, i32 0, i32 2
  %77 = load %struct.wdt_at32ap700x*, %struct.wdt_at32ap700x** @wdt, align 8
  %78 = getelementptr inbounds %struct.wdt_at32ap700x, %struct.wdt_at32ap700x* %77, i32 0, i32 0
  %79 = load i8*, i8** %78, align 8
  %80 = load %struct.wdt_at32ap700x*, %struct.wdt_at32ap700x** @wdt, align 8
  %81 = getelementptr inbounds %struct.wdt_at32ap700x, %struct.wdt_at32ap700x* %80, i32 0, i32 2
  %82 = load i32, i32* %81, align 4
  %83 = load i32, i32* @nowayout, align 4
  %84 = call i32 (%struct.device*, i8*, ...) @_dev_info(%struct.device* %76, i8* getelementptr inbounds ([54 x i8], [54 x i8]* @.str.2, i32 0, i32 0), i8* %79, i32 %82, i32 %83)
  br label %93

; <label>:85:                                     ; preds = %70
  call void @platform_set_drvdata(%struct.platform_device* %0, i8* null)
  br label %86

; <label>:86:                                     ; preds = %85, %44
  %.01 = phi i32 [ -5, %44 ], [ %73, %85 ]
  %87 = load %struct.wdt_at32ap700x*, %struct.wdt_at32ap700x** @wdt, align 8
  %88 = getelementptr inbounds %struct.wdt_at32ap700x, %struct.wdt_at32ap700x* %87, i32 0, i32 0
  %89 = load i8*, i8** %88, align 8
  call void @iounmap(i8* %89)
  br label %90

; <label>:90:                                     ; preds = %13, %86
  %.1 = phi i32 [ %.01, %86 ], [ -12, %13 ]
  %91 = load %struct.wdt_at32ap700x*, %struct.wdt_at32ap700x** @wdt, align 8
  %92 = bitcast %struct.wdt_at32ap700x* %91 to i8*
  call void @kfree(i8* %92)
  store %struct.wdt_at32ap700x* null, %struct.wdt_at32ap700x** @wdt, align 8
  br label %93

; <label>:93:                                     ; preds = %8, %5, %1, %90, %75
  %.0 = phi i32 [ %.1, %90 ], [ 0, %75 ], [ -16, %1 ], [ -6, %5 ], [ -12, %8 ]
  ret i32 %.0
}

declare %struct.resource* @platform_get_resource(%struct.platform_device*, i32, i32) #1

; Function Attrs: noinline nounwind uwtable
define internal i8* @kzalloc(i64, i32) #0 {
  %3 = or i32 %1, 32768
  %4 = call i8* @__kmalloc(i64 %0, i32 %3) #3
  ret i8* %4
}

; Function Attrs: noinline nounwind uwtable
define internal i8* @ioremap(i64, i64) #0 {
  %3 = call i8* @ioremap_nocache(i64 %0, i64 %1)
  ret i8* %3
}

; Function Attrs: noinline nounwind uwtable
define internal i64 @resource_size(%struct.resource*) #0 {
  %2 = getelementptr inbounds %struct.resource, %struct.resource* %0, i32 0, i32 1
  %3 = load i64, i64* %2, align 8
  %4 = getelementptr inbounds %struct.resource, %struct.resource* %0, i32 0, i32 0
  %5 = load i64, i64* %4, align 8
  %6 = sub i64 %3, %5
  %7 = add i64 %6, 1
  ret i64 %7
}

; Function Attrs: noinline nounwind uwtable
define internal %struct.raw_spinlock* @spinlock_check(%struct.spinlock*) #0 {
  %2 = getelementptr inbounds %struct.spinlock, %struct.spinlock* %0, i32 0, i32 0
  %3 = bitcast %union.anon.0* %2 to %struct.raw_spinlock*
  ret %struct.raw_spinlock* %3
}

; Function Attrs: argmemonly nounwind
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* nocapture writeonly, i8* nocapture readonly, i64, i32, i1) #2

; Function Attrs: noinline nounwind uwtable
define internal i32 @at32_wdt_get_status() #0 {
  %1 = load %struct.wdt_at32ap700x*, %struct.wdt_at32ap700x** @wdt, align 8
  %2 = getelementptr inbounds %struct.wdt_at32ap700x, %struct.wdt_at32ap700x* %1, i32 0, i32 0
  %3 = load i8*, i8** %2, align 8
  %4 = getelementptr i8, i8* %3, i64 16
  %5 = call i32 @__readl(i8* %4)
  %switch.selectcmp = icmp eq i32 %5, 8
  %switch.select = select i1 %switch.selectcmp, i32 32, i32 0
  %switch.selectcmp1 = icmp eq i32 %5, 4
  %switch.select2 = select i1 %switch.selectcmp1, i32 4, i32 %switch.select
  ret i32 %switch.select2
}

declare i32 @_dev_info(%struct.device*, i8*, ...) #1

; Function Attrs: noinline nounwind uwtable
define internal i32 @at32_wdt_settimeout(i32) #0 {
  %2 = icmp slt i32 %0, 1
  %3 = icmp sgt i32 %0, 2
  %or.cond = or i1 %2, %3
  br i1 %or.cond, label %7, label %4

; <label>:4:                                      ; preds = %1
  %5 = load %struct.wdt_at32ap700x*, %struct.wdt_at32ap700x** @wdt, align 8
  %6 = getelementptr inbounds %struct.wdt_at32ap700x, %struct.wdt_at32ap700x* %5, i32 0, i32 2
  store i32 %0, i32* %6, align 4
  br label %7

; <label>:7:                                      ; preds = %1, %4
  %.0 = phi i32 [ 0, %4 ], [ -22, %1 ]
  ret i32 %.0
}

declare i32 @misc_register(%struct.miscdevice*) #1

declare i8* @__kmalloc(i64, i32) #1

declare i8* @ioremap_nocache(i64, i64) #1

declare i64 @no_llseek(%struct.file*, i64, i32) #1

; Function Attrs: noinline nounwind uwtable
define internal i64 @at32_wdt_write(%struct.file*, i8*, i64, i64*) #0 {
  %5 = icmp ne i64 %2, 0
  br i1 %5, label %6, label %29

; <label>:6:                                      ; preds = %4
  %7 = load i32, i32* @nowayout, align 4
  %8 = icmp ne i32 %7, 0
  br i1 %8, label %28, label %9

; <label>:9:                                      ; preds = %6
  store i8 0, i8* @expect_release, align 1
  br label %10

; <label>:10:                                     ; preds = %26, %9
  %.01 = phi i64 [ 0, %9 ], [ %27, %26 ]
  %11 = icmp ne i64 %.01, %2
  br i1 %11, label %12, label %28

; <label>:12:                                     ; preds = %10
  %13 = call i32 @__mark(i32 42)
  call void @might_fault()
  %14 = getelementptr inbounds i8, i8* %1, i64 %.01
  %15 = call { i8*, i64 } asm sideeffect "call __get_user_1", "={ax},={dx},0,~{dirflag},~{fpsr},~{flags}"(i8* %14) #3, !srcloc !4
  %16 = extractvalue { i8*, i64 } %15, 0
  %17 = extractvalue { i8*, i64 } %15, 1
  %18 = ptrtoint i8* %16 to i64
  %19 = trunc i64 %18 to i32
  %20 = trunc i64 %17 to i8
  %21 = icmp ne i32 %19, 0
  br i1 %21, label %29, label %22

; <label>:22:                                     ; preds = %12
  %23 = sext i8 %20 to i32
  %24 = icmp eq i32 %23, 86
  br i1 %24, label %25, label %26

; <label>:25:                                     ; preds = %22
  store i8 42, i8* @expect_release, align 1
  br label %26

; <label>:26:                                     ; preds = %22, %25
  %27 = add i64 %.01, 1
  br label %10

; <label>:28:                                     ; preds = %10, %6
  call void @at32_wdt_pat()
  br label %29

; <label>:29:                                     ; preds = %4, %28, %12
  %.0 = phi i64 [ -14, %12 ], [ %2, %28 ], [ %2, %4 ]
  ret i64 %.0
}

; Function Attrs: noinline nounwind uwtable
define internal i64 @at32_wdt_ioctl(%struct.file*, i32, i64) #0 {
  %4 = inttoptr i64 %2 to i8*
  %5 = bitcast i8* %4 to i32*
  switch i32 %1, label %52 [
    i32 -2144839936, label %6
    i32 -2147199231, label %11
    i32 -2147199230, label %13
    i32 -2147199228, label %18
    i32 -2147199227, label %34
    i32 -1073457402, label %35
    i32 -2147199225, label %47
  ]

; <label>:6:                                      ; preds = %3
  call void @might_fault() #3
  %7 = call i64 @_copy_to_user(i8* %4, i8* bitcast (%struct.watchdog_info* @at32_wdt_info to i8*), i32 40) #3
  %8 = trunc i64 %7 to i32
  %9 = icmp ne i32 %8, 0
  %10 = select i1 %9, i32 -14, i32 0
  br label %52

; <label>:11:                                     ; preds = %3
  call void @might_fault()
  %12 = call i32 asm sideeffect "call __put_user_4", "={ax},0,{cx},~{ebx},~{dirflag},~{fpsr},~{flags}"(i32 0, i32* %5) #3, !srcloc !5
  br label %52

; <label>:13:                                     ; preds = %3
  call void @might_fault()
  %14 = load %struct.wdt_at32ap700x*, %struct.wdt_at32ap700x** @wdt, align 8
  %15 = getelementptr inbounds %struct.wdt_at32ap700x, %struct.wdt_at32ap700x* %14, i32 0, i32 3
  %16 = load i32, i32* %15, align 8
  %17 = call i32 asm sideeffect "call __put_user_4", "={ax},0,{cx},~{ebx},~{dirflag},~{fpsr},~{flags}"(i32 %16, i32* %5) #3, !srcloc !6
  br label %52

; <label>:18:                                     ; preds = %3
  call void @might_fault()
  %19 = call { i32*, i64 } asm sideeffect "call __get_user_4", "={ax},={dx},0,~{dirflag},~{fpsr},~{flags}"(i32* %5) #3, !srcloc !7
  %20 = extractvalue { i32*, i64 } %19, 0
  %21 = extractvalue { i32*, i64 } %19, 1
  %22 = ptrtoint i32* %20 to i64
  %23 = trunc i64 %22 to i32
  %24 = trunc i64 %21 to i32
  %25 = icmp ne i32 %23, 0
  br i1 %25, label %52, label %26

; <label>:26:                                     ; preds = %18
  %27 = and i32 %24, 1
  %28 = icmp ne i32 %27, 0
  br i1 %28, label %29, label %30

; <label>:29:                                     ; preds = %26
  call void @at32_wdt_stop()
  br label %30

; <label>:30:                                     ; preds = %29, %26
  %31 = and i32 %24, 2
  %32 = icmp ne i32 %31, 0
  br i1 %32, label %33, label %52

; <label>:33:                                     ; preds = %30
  call void @at32_wdt_start()
  br label %52

; <label>:34:                                     ; preds = %3
  call void @at32_wdt_pat()
  br label %52

; <label>:35:                                     ; preds = %3
  call void @might_fault()
  %36 = call { i32*, i64 } asm sideeffect "call __get_user_4", "={ax},={dx},0,~{dirflag},~{fpsr},~{flags}"(i32* %5) #3, !srcloc !8
  %37 = extractvalue { i32*, i64 } %36, 0
  %38 = extractvalue { i32*, i64 } %36, 1
  %39 = ptrtoint i32* %37 to i64
  %40 = trunc i64 %39 to i32
  %41 = trunc i64 %38 to i32
  %42 = icmp ne i32 %40, 0
  br i1 %42, label %52, label %43

; <label>:43:                                     ; preds = %35
  %44 = call i32 @at32_wdt_settimeout(i32 %41)
  %45 = icmp ne i32 %44, 0
  br i1 %45, label %52, label %46

; <label>:46:                                     ; preds = %43
  call void @at32_wdt_start()
  br label %47

; <label>:47:                                     ; preds = %46, %3
  call void @might_fault()
  %48 = load %struct.wdt_at32ap700x*, %struct.wdt_at32ap700x** @wdt, align 8
  %49 = getelementptr inbounds %struct.wdt_at32ap700x, %struct.wdt_at32ap700x* %48, i32 0, i32 2
  %50 = load i32, i32* %49, align 4
  %51 = call i32 asm sideeffect "call __put_user_4", "={ax},0,{cx},~{ebx},~{dirflag},~{fpsr},~{flags}"(i32 %50, i32* %5) #3, !srcloc !9
  br label %52

; <label>:52:                                     ; preds = %43, %35, %30, %33, %18, %47, %34, %13, %11, %6, %3
  %.0 = phi i32 [ -25, %3 ], [ %51, %47 ], [ 0, %34 ], [ %17, %13 ], [ %12, %11 ], [ %10, %6 ], [ %23, %18 ], [ 0, %33 ], [ 0, %30 ], [ %40, %35 ], [ %44, %43 ]
  %53 = sext i32 %.0 to i64
  ret i64 %53
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @at32_wdt_open(%struct.inode*, %struct.file*) #0 {
  %3 = load %struct.wdt_at32ap700x*, %struct.wdt_at32ap700x** @wdt, align 8
  %4 = getelementptr inbounds %struct.wdt_at32ap700x, %struct.wdt_at32ap700x* %3, i32 0, i32 4
  %5 = call i32 @test_and_set_bit(i32 1, i64* %4)
  %6 = icmp ne i32 %5, 0
  br i1 %6, label %9, label %7

; <label>:7:                                      ; preds = %2
  call void @at32_wdt_start()
  %8 = call i32 @nonseekable_open(%struct.inode* %0, %struct.file* %1)
  br label %9

; <label>:9:                                      ; preds = %2, %7
  %.0 = phi i32 [ %8, %7 ], [ -16, %2 ]
  ret i32 %.0
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @at32_wdt_close(%struct.inode*, %struct.file*) #0 {
  %3 = load i8, i8* @expect_release, align 1
  %4 = sext i8 %3 to i32
  %5 = icmp eq i32 %4, 42
  br i1 %5, label %6, label %7

; <label>:6:                                      ; preds = %2
  call void @at32_wdt_stop()
  br label %8

; <label>:7:                                      ; preds = %2
  call void @at32_wdt_pat()
  br label %8

; <label>:8:                                      ; preds = %7, %6
  %9 = load %struct.wdt_at32ap700x*, %struct.wdt_at32ap700x** @wdt, align 8
  %10 = getelementptr inbounds %struct.wdt_at32ap700x, %struct.wdt_at32ap700x* %9, i32 0, i32 4
  call void asm sideeffect ".section .smp_locks,\22a\22\0A.balign 4\0A.long 671f - .\0A.previous\0A671:\0A\09lock; btr $1,$0", "=*m,Ir,*m,~{dirflag},~{fpsr},~{flags}"(i64* %10, i32 1, i64* %10) #3, !srcloc !10
  store i8 0, i8* @expect_release, align 1
  ret i32 0
}

declare i32 @__mark(i32) #1

; Function Attrs: noinline nounwind uwtable
define internal void @might_fault() #0 {
  %1 = call i32 @_cond_resched()
  ret void
}

; Function Attrs: noinline nounwind uwtable
define internal void @at32_wdt_pat() #0 {
  %1 = load %struct.wdt_at32ap700x*, %struct.wdt_at32ap700x** @wdt, align 8
  %2 = getelementptr inbounds %struct.wdt_at32ap700x, %struct.wdt_at32ap700x* %1, i32 0, i32 1
  call void @spin_lock(%struct.spinlock* %2)
  %3 = load %struct.wdt_at32ap700x*, %struct.wdt_at32ap700x** @wdt, align 8
  %4 = getelementptr inbounds %struct.wdt_at32ap700x, %struct.wdt_at32ap700x* %3, i32 0, i32 0
  %5 = load i8*, i8** %4, align 8
  %6 = getelementptr i8, i8* %5, i64 4
  call void @__writel(i32 66, i8* %6)
  %7 = load %struct.wdt_at32ap700x*, %struct.wdt_at32ap700x** @wdt, align 8
  %8 = getelementptr inbounds %struct.wdt_at32ap700x, %struct.wdt_at32ap700x* %7, i32 0, i32 1
  call void @spin_unlock(%struct.spinlock* %8)
  ret void
}

declare i32 @_cond_resched() #1

; Function Attrs: noinline nounwind uwtable
define internal void @at32_wdt_start() #0 {
  %1 = load %struct.wdt_at32ap700x*, %struct.wdt_at32ap700x** @wdt, align 8
  %2 = getelementptr inbounds %struct.wdt_at32ap700x, %struct.wdt_at32ap700x* %1, i32 0, i32 2
  %3 = load i32, i32* %2, align 4
  %4 = icmp sgt i32 %3, 1
  %5 = select i1 %4, i32 15, i32 14
  %6 = sext i32 %5 to i64
  %7 = load %struct.wdt_at32ap700x*, %struct.wdt_at32ap700x** @wdt, align 8
  %8 = getelementptr inbounds %struct.wdt_at32ap700x, %struct.wdt_at32ap700x* %7, i32 0, i32 1
  call void @spin_lock(%struct.spinlock* %8)
  %9 = shl i64 %6, 8
  %10 = or i64 1, %9
  %11 = or i64 %10, 1426063360
  %12 = trunc i64 %11 to i32
  %13 = load %struct.wdt_at32ap700x*, %struct.wdt_at32ap700x** @wdt, align 8
  %14 = getelementptr inbounds %struct.wdt_at32ap700x, %struct.wdt_at32ap700x* %13, i32 0, i32 0
  %15 = load i8*, i8** %14, align 8
  %16 = getelementptr i8, i8* %15, i64 0
  call void @__writel(i32 %12, i8* %16)
  %17 = shl i64 %6, 8
  %18 = or i64 1, %17
  %19 = or i64 %18, -1442840576
  %20 = trunc i64 %19 to i32
  %21 = load %struct.wdt_at32ap700x*, %struct.wdt_at32ap700x** @wdt, align 8
  %22 = getelementptr inbounds %struct.wdt_at32ap700x, %struct.wdt_at32ap700x* %21, i32 0, i32 0
  %23 = load i8*, i8** %22, align 8
  %24 = getelementptr i8, i8* %23, i64 0
  call void @__writel(i32 %20, i8* %24)
  %25 = load %struct.wdt_at32ap700x*, %struct.wdt_at32ap700x** @wdt, align 8
  %26 = getelementptr inbounds %struct.wdt_at32ap700x, %struct.wdt_at32ap700x* %25, i32 0, i32 1
  call void @spin_unlock(%struct.spinlock* %26)
  ret void
}

declare i64 @_copy_to_user(i8*, i8*, i32) #1

; Function Attrs: noinline nounwind uwtable
define internal i32 @test_and_set_bit(i32, i64*) #0 {
  %3 = call i32 asm sideeffect ".section .smp_locks,\22a\22\0A.balign 4\0A.long 671f - .\0A.previous\0A671:\0A\09lock; bts $2,$1\0A\09sbb $0,$0", "=r,=*m,Ir,*m,~{memory},~{dirflag},~{fpsr},~{flags}"(i64* %1, i32 %0, i64* %1) #3, !srcloc !11
  ret i32 %3
}

declare i32 @nonseekable_open(%struct.inode*, %struct.file*) #1

; Function Attrs: noinline nounwind uwtable
define internal void @at32_wdt_shutdown(%struct.platform_device*) #0 {
  call void @at32_wdt_stop()
  ret void
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @at32_wdt_suspend(%struct.platform_device*, i32) #0 {
  %3 = alloca %struct.pm_message, align 4
  %4 = getelementptr inbounds %struct.pm_message, %struct.pm_message* %3, i32 0, i32 0
  store i32 %1, i32* %4, align 4
  call void @at32_wdt_stop()
  ret i32 0
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @at32_wdt_resume(%struct.platform_device*) #0 {
  %2 = load %struct.wdt_at32ap700x*, %struct.wdt_at32ap700x** @wdt, align 8
  %3 = getelementptr inbounds %struct.wdt_at32ap700x, %struct.wdt_at32ap700x* %2, i32 0, i32 4
  %4 = load i64, i64* %3, align 8
  %5 = icmp ne i64 %4, 0
  br i1 %5, label %6, label %7

; <label>:6:                                      ; preds = %1
  call void @at32_wdt_start()
  br label %7

; <label>:7:                                      ; preds = %6, %1
  ret i32 0
}

attributes #0 = { noinline nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { argmemonly nounwind }
attributes #3 = { nounwind }

!llvm.ident = !{!0}

!0 = !{!"clang version 4.0.1 (tags/RELEASE_401/final)"}
!1 = !{i32 -2146365575}
!2 = !{i32 -2146364262}
!3 = !{i32 669956}
!4 = !{i32 -2145621559}
!5 = !{i32 -2145631866}
!6 = !{i32 -2145629762}
!7 = !{i32 -2145627654}
!8 = !{i32 -2145624826}
!9 = !{i32 -2145622752}
!10 = !{i32 -2147306062, i32 -2147306027, i32 -2147306007, i32 -2147305971, i32 -2147305951, i32 -2147306072}
!11 = !{i32 -2147305212, i32 -2147305177, i32 -2147305157, i32 -2147305121, i32 -2147305101, i32 -2147305222, i32 137720}
