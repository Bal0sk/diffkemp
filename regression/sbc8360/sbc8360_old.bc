; ModuleID = 'drivers/watchdog/sbc8360.bc'
source_filename = "drivers/watchdog/sbc8360.c"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%struct.kernel_param_ops = type { i32 (i8*, %struct.kernel_param*)*, i32 (i8*, %struct.kernel_param*)*, void (i8*)* }
%struct.kernel_param = type { i8*, %struct.kernel_param_ops*, i16, i16, %union.anon }
%union.anon = type { i8* }
%struct.miscdevice = type { i32, i8*, %struct.file_operations*, %struct.list_head, %struct.device*, %struct.device*, i8*, i32 }
%struct.file_operations = type { %struct.module*, i64 (%struct.file*, i64, i32)*, i64 (%struct.file*, i8*, i64, i64*)*, i64 (%struct.file*, i8*, i64, i64*)*, i64 (%struct.kiocb*, %struct.iovec*, i64, i64)*, i64 (%struct.kiocb*, %struct.iovec*, i64, i64)*, i32 (%struct.file*, i8*, i32 (i8*, i8*, i32, i64, i64, i32)*)*, i32 (%struct.file*, %struct.poll_table_struct*)*, i64 (%struct.file*, i32, i64)*, i64 (%struct.file*, i32, i64)*, i32 (%struct.file*, %struct.vm_area_struct*)*, i32 (%struct.inode*, %struct.file*)*, i32 (%struct.file*, %struct.files_struct*)*, i32 (%struct.inode*, %struct.file*)*, i32 (%struct.file*, i32)*, i32 (%struct.kiocb*, i32)*, i32 (i32, %struct.file*, i32)*, i32 (%struct.file*, i32, %struct.file_lock*)*, i64 (%struct.file*, %struct.page*, i32, i64, i64*, i32)*, i64 (%struct.file*, i64, i64, i64, i64)*, i32 (i32)*, i32 (%struct.file*, i32, %struct.file_lock*)*, i64 (%struct.pipe_inode_info*, %struct.file*, i64*, i64, i32)*, i64 (%struct.file*, i64*, %struct.pipe_inode_info*, i64, i32)*, i32 (%struct.file*, i64, %struct.file_lock**)*, i64 (%struct.file*, i32, i64, i64)* }
%struct.module = type { i32, %struct.list_head, [56 x i8], %struct.module_kobject, %struct.module_attribute*, i8*, i8*, %struct.kobject*, %struct.kernel_symbol*, i64*, i32, %struct.kernel_param*, i32, i32, %struct.kernel_symbol*, i64*, %struct.kernel_symbol*, i64*, i32, i32, %struct.exception_table_entry*, i32 ()*, i8*, i8*, i32, i32, i32, i32, i32, i32, %struct.mod_arch_specific, i32, i32, %struct.list_head, %struct.bug_entry*, %struct.elf64_sym*, %struct.elf64_sym*, i32, i32, i8*, i8*, %struct.module_sect_attrs*, %struct.module_notes_attrs*, i8*, i8*, i32, i32, %struct.tracepoint**, i32, i8**, %struct.ftrace_event_call**, i32, %struct.list_head, %struct.list_head, %struct.task_struct*, void ()*, %struct.module_ref* }
%struct.module_kobject = type { %struct.kobject, %struct.module*, %struct.kobject*, %struct.module_param_attrs* }
%struct.kobject = type { i8*, %struct.list_head, %struct.kobject*, %struct.kset*, %struct.kobj_type*, %struct.sysfs_dirent*, %struct.kref, i8 }
%struct.kset = type { %struct.list_head, %struct.spinlock, %struct.kobject, %struct.kset_uevent_ops* }
%struct.spinlock = type { %union.anon.1 }
%union.anon.1 = type { %struct.raw_spinlock }
%struct.raw_spinlock = type { %struct.arch_spinlock }
%struct.arch_spinlock = type { i32 }
%struct.kset_uevent_ops = type { i32 (%struct.kset*, %struct.kobject*)*, i8* (%struct.kset*, %struct.kobject*)*, i32 (%struct.kset*, %struct.kobject*, %struct.kobj_uevent_env*)* }
%struct.kobj_uevent_env = type { [32 x i8*], i32, [2048 x i8], i32 }
%struct.kobj_type = type { void (%struct.kobject*)*, %struct.sysfs_ops*, %struct.attribute**, %struct.kobj_ns_type_operations* (%struct.kobject*)*, i8* (%struct.kobject*)* }
%struct.sysfs_ops = type { i64 (%struct.kobject*, %struct.attribute*, i8*)*, i64 (%struct.kobject*, %struct.attribute*, i8*, i64)* }
%struct.attribute = type { i8*, i32 }
%struct.kobj_ns_type_operations = type { i32, i8* ()*, i8* (%struct.sock*)*, i8* ()*, void (i8*)* }
%struct.sock = type opaque
%struct.sysfs_dirent = type opaque
%struct.kref = type { %struct.atomic_t }
%struct.atomic_t = type { i32 }
%struct.module_param_attrs = type opaque
%struct.module_attribute = type { %struct.attribute, i64 (%struct.module_attribute*, %struct.module*, i8*)*, i64 (%struct.module_attribute*, %struct.module*, i8*, i64)*, void (%struct.module*, i8*)*, i32 (%struct.module*)*, void (%struct.module*)* }
%struct.kernel_symbol = type { i64, i8* }
%struct.exception_table_entry = type { i64, i64 }
%struct.mod_arch_specific = type {}
%struct.bug_entry = type { i32, i32, i16, i16 }
%struct.elf64_sym = type { i32, i8, i8, i16, i64, i64 }
%struct.module_sect_attrs = type opaque
%struct.module_notes_attrs = type opaque
%struct.tracepoint = type { i8*, %struct.jump_label_key, void ()*, void ()*, %struct.tracepoint_func* }
%struct.jump_label_key = type { %struct.atomic_t }
%struct.tracepoint_func = type { i8*, i8* }
%struct.ftrace_event_call = type opaque
%struct.task_struct = type opaque
%struct.module_ref = type { i32, i32 }
%struct.file = type { %union.anon.0, %struct.path, %struct.file_operations*, %struct.spinlock, i32, %struct.atomic64_t, i32, i32, i64, %struct.fown_struct, %struct.cred*, %struct.file_ra_state, i64, i8*, i8*, %struct.list_head, %struct.address_space* }
%union.anon.0 = type { %struct.list_head }
%struct.path = type { %struct.vfsmount*, %struct.dentry* }
%struct.vfsmount = type opaque
%struct.dentry = type { i32, %struct.seqcount, %struct.hlist_bl_node, %struct.dentry*, %struct.qstr, %struct.inode*, [32 x i8], i32, %struct.spinlock, %struct.dentry_operations*, %struct.super_block*, i64, i8*, %struct.list_head, %union.anon.6, %struct.list_head, %struct.list_head }
%struct.seqcount = type { i32 }
%struct.hlist_bl_node = type { %struct.hlist_bl_node*, %struct.hlist_bl_node** }
%struct.qstr = type { i32, i32, i8* }
%struct.inode = type { i16, i32, i32, %struct.inode_operations*, %struct.super_block*, %struct.spinlock, i32, i64, i8*, %struct.mutex, i64, %struct.hlist_node, %struct.list_head, %struct.list_head, %struct.list_head, %union.anon.2, i64, %struct.atomic_t, i32, i32, i32, i64, i64, %struct.timespec, %struct.timespec, %struct.timespec, i64, i16, %struct.rw_semaphore, %struct.file_operations*, %struct.file_lock*, %struct.address_space*, %struct.address_space, [2 x %struct.dquot*], %struct.list_head, %union.anon.5, i32, i32, %struct.hlist_head, %struct.atomic_t, %struct.posix_acl*, %struct.posix_acl*, i8* }
%struct.inode_operations = type { %struct.dentry* (%struct.inode*, %struct.dentry*, %struct.nameidata*)*, i8* (%struct.dentry*, %struct.nameidata*)*, i32 (%struct.inode*, i32, i32)*, i32 (%struct.inode*, i32, i32)*, i32 (%struct.dentry*, i8*, i32)*, void (%struct.dentry*, %struct.nameidata*, i8*)*, i32 (%struct.inode*, %struct.dentry*, i32, %struct.nameidata*)*, i32 (%struct.dentry*, %struct.inode*, %struct.dentry*)*, i32 (%struct.inode*, %struct.dentry*)*, i32 (%struct.inode*, %struct.dentry*, i8*)*, i32 (%struct.inode*, %struct.dentry*, i32)*, i32 (%struct.inode*, %struct.dentry*)*, i32 (%struct.inode*, %struct.dentry*, i32, i32)*, i32 (%struct.inode*, %struct.dentry*, %struct.inode*, %struct.dentry*)*, void (%struct.inode*)*, i32 (%struct.dentry*, %struct.iattr*)*, i32 (%struct.vfsmount*, %struct.dentry*, %struct.kstat*)*, i32 (%struct.dentry*, i8*, i8*, i64, i32)*, i64 (%struct.dentry*, i8*, i8*, i64)*, i64 (%struct.dentry*, i8*, i64)*, i32 (%struct.dentry*, i8*)*, void (%struct.inode*, i64, i64)*, i32 (%struct.inode*, %struct.fiemap_extent_info*, i64, i64)*, [8 x i8] }
%struct.nameidata = type opaque
%struct.iattr = type { i32, i16, i32, i32, i64, %struct.timespec, %struct.timespec, %struct.timespec, %struct.file* }
%struct.kstat = type { i64, i32, i16, i32, i32, i32, i32, i64, %struct.timespec, %struct.timespec, %struct.timespec, i64, i64 }
%struct.fiemap_extent_info = type { i32, i32, i32, %struct.fiemap_extent* }
%struct.fiemap_extent = type { i64, i64, i64, [2 x i64], i32, [3 x i32] }
%struct.mutex = type { %struct.atomic_t, %struct.spinlock, %struct.list_head, %struct.task_struct* }
%struct.hlist_node = type { %struct.hlist_node*, %struct.hlist_node** }
%union.anon.2 = type { %struct.list_head }
%struct.timespec = type { i64, i64 }
%struct.rw_semaphore = type { i64, %struct.spinlock, %struct.list_head }
%struct.file_lock = type { %struct.file_lock*, %struct.list_head, %struct.list_head, %struct.files_struct*, i8, i8, i32, %struct.pid*, %struct.__wait_queue_head, %struct.file*, i64, i64, %struct.fasync_struct*, i64, %struct.file_lock_operations*, %struct.lock_manager_operations*, %union.anon.3 }
%struct.files_struct = type opaque
%struct.pid = type { %struct.atomic_t, i32, [3 x %struct.hlist_head], %struct.rcu_head, [1 x %struct.upid] }
%struct.rcu_head = type { %struct.rcu_head*, void (%struct.rcu_head*)* }
%struct.upid = type { i32, %struct.pid_namespace*, %struct.hlist_node }
%struct.pid_namespace = type opaque
%struct.__wait_queue_head = type { %struct.spinlock, %struct.list_head }
%struct.fasync_struct = type { %struct.spinlock, i32, i32, %struct.fasync_struct*, %struct.file*, %struct.rcu_head }
%struct.file_lock_operations = type { void (%struct.file_lock*, %struct.file_lock*)*, void (%struct.file_lock*)* }
%struct.lock_manager_operations = type { i32 (%struct.file_lock*, %struct.file_lock*)*, void (%struct.file_lock*)*, i32 (%struct.file_lock*, %struct.file_lock*, i32)*, void (%struct.file_lock*)*, void (%struct.file_lock*)*, i32 (%struct.file_lock**, i32)* }
%union.anon.3 = type { %struct.nfs_lock_info }
%struct.nfs_lock_info = type { i32, %struct.nlm_lockowner*, %struct.list_head }
%struct.nlm_lockowner = type opaque
%struct.address_space = type { %struct.inode*, %struct.radix_tree_root, %struct.spinlock, i32, %struct.prio_tree_root, %struct.list_head, %struct.mutex, i64, i64, %struct.address_space_operations*, i64, %struct.backing_dev_info*, %struct.spinlock, %struct.list_head, %struct.address_space* }
%struct.radix_tree_root = type { i32, i32, %struct.radix_tree_node* }
%struct.radix_tree_node = type opaque
%struct.prio_tree_root = type { %struct.prio_tree_node*, i16, i16 }
%struct.prio_tree_node = type { %struct.prio_tree_node*, %struct.prio_tree_node*, %struct.prio_tree_node*, i64, i64 }
%struct.address_space_operations = type { i32 (%struct.page*, %struct.writeback_control*)*, i32 (%struct.file*, %struct.page*)*, i32 (%struct.address_space*, %struct.writeback_control*)*, i32 (%struct.page*)*, i32 (%struct.file*, %struct.address_space*, %struct.list_head*, i32)*, i32 (%struct.file*, %struct.address_space*, i64, i32, i32, %struct.page**, i8**)*, i32 (%struct.file*, %struct.address_space*, i64, i32, i32, %struct.page*, i8*)*, i64 (%struct.address_space*, i64)*, void (%struct.page*, i64)*, i32 (%struct.page*, i32)*, void (%struct.page*)*, i64 (i32, %struct.kiocb*, %struct.iovec*, i64, i64)*, i32 (%struct.address_space*, i64, i32, i8**, i64*)*, i32 (%struct.address_space*, %struct.page*, %struct.page*)*, i32 (%struct.page*)*, i32 (%struct.page*, %struct.read_descriptor_t*, i64)*, i32 (%struct.address_space*, %struct.page*)* }
%struct.page = type opaque
%struct.writeback_control = type opaque
%struct.kiocb = type opaque
%struct.iovec = type opaque
%struct.read_descriptor_t = type { i64, i64, %union.anon.4, i32 }
%union.anon.4 = type { i8* }
%struct.backing_dev_info = type opaque
%struct.dquot = type { %struct.hlist_node, %struct.list_head, %struct.list_head, %struct.list_head, %struct.mutex, %struct.atomic_t, %struct.__wait_queue_head, %struct.super_block*, i32, i64, i64, i16, %struct.mem_dqblk }
%struct.mem_dqblk = type { i64, i64, i64, i64, i64, i64, i64, i64, i64 }
%union.anon.5 = type { %struct.pipe_inode_info* }
%struct.pipe_inode_info = type opaque
%struct.hlist_head = type { %struct.hlist_node* }
%struct.posix_acl = type opaque
%struct.dentry_operations = type { i32 (%struct.dentry*, %struct.nameidata*)*, i32 (%struct.dentry*, %struct.inode*, %struct.qstr*)*, i32 (%struct.dentry*, %struct.inode*, %struct.dentry*, %struct.inode*, i32, i8*, %struct.qstr*)*, i32 (%struct.dentry*)*, void (%struct.dentry*)*, void (%struct.dentry*, %struct.inode*)*, i8* (%struct.dentry*, i8*, i32)*, %struct.vfsmount* (%struct.path*)*, i32 (%struct.dentry*, i1)*, [56 x i8] }
%struct.super_block = type { %struct.list_head, i32, i8, i8, i64, i64, %struct.file_system_type*, %struct.super_operations*, %struct.dquot_operations*, %struct.quotactl_ops*, %struct.export_operations*, i64, i64, %struct.dentry*, %struct.rw_semaphore, %struct.mutex, i32, %struct.atomic_t, i8*, %struct.xattr_handler**, %struct.list_head, %struct.hlist_bl_head, %struct.list_head*, %struct.list_head, i32, %struct.block_device*, %struct.backing_dev_info*, %struct.mtd_info*, %struct.list_head, %struct.quota_info, i32, %struct.__wait_queue_head, [32 x i8], [16 x i8], i8*, i32, i32, %struct.mutex, i8*, i8*, %struct.dentry_operations*, i32 }
%struct.file_system_type = type { i8*, i32, %struct.dentry* (%struct.file_system_type*, i32, i8*, i8*)*, void (%struct.super_block*)*, %struct.module*, %struct.file_system_type*, %struct.list_head, %struct.lock_class_key, %struct.lock_class_key, %struct.lock_class_key, %struct.lock_class_key, %struct.lock_class_key, %struct.lock_class_key, %struct.lock_class_key }
%struct.lock_class_key = type {}
%struct.super_operations = type { %struct.inode* (%struct.super_block*)*, void (%struct.inode*)*, void (%struct.inode*, i32)*, i32 (%struct.inode*, %struct.writeback_control*)*, i32 (%struct.inode*)*, void (%struct.inode*)*, void (%struct.super_block*)*, void (%struct.super_block*)*, i32 (%struct.super_block*, i32)*, i32 (%struct.super_block*)*, i32 (%struct.super_block*)*, i32 (%struct.dentry*, %struct.kstatfs*)*, i32 (%struct.super_block*, i32*, i8*)*, void (%struct.super_block*)*, i32 (%struct.seq_file*, %struct.vfsmount*)*, i32 (%struct.seq_file*, %struct.vfsmount*)*, i32 (%struct.seq_file*, %struct.vfsmount*)*, i32 (%struct.seq_file*, %struct.vfsmount*)*, i64 (%struct.super_block*, i32, i8*, i64, i64)*, i64 (%struct.super_block*, i32, i8*, i64, i64)*, i32 (%struct.super_block*, %struct.page*, i32)* }
%struct.kstatfs = type opaque
%struct.seq_file = type opaque
%struct.dquot_operations = type { i32 (%struct.dquot*)*, %struct.dquot* (%struct.super_block*, i32)*, void (%struct.dquot*)*, i32 (%struct.dquot*)*, i32 (%struct.dquot*)*, i32 (%struct.dquot*)*, i32 (%struct.super_block*, i32)*, i64* (%struct.inode*)* }
%struct.quotactl_ops = type { i32 (%struct.super_block*, i32, i32, %struct.path*)*, i32 (%struct.super_block*, i32, i32)*, i32 (%struct.super_block*, i32)*, i32 (%struct.super_block*, i32, i32)*, i32 (%struct.super_block*, i32, %struct.if_dqinfo*)*, i32 (%struct.super_block*, i32, %struct.if_dqinfo*)*, i32 (%struct.super_block*, i32, i32, %struct.fs_disk_quota*)*, i32 (%struct.super_block*, i32, i32, %struct.fs_disk_quota*)*, i32 (%struct.super_block*, %struct.fs_quota_stat*)*, i32 (%struct.super_block*, i32, i32)* }
%struct.if_dqinfo = type { i64, i64, i32, i32 }
%struct.fs_disk_quota = type { i8, i8, i16, i32, i64, i64, i64, i64, i64, i64, i32, i32, i16, i16, i32, i64, i64, i64, i32, i16, i16, [8 x i8] }
%struct.fs_quota_stat = type { i8, i16, i8, %struct.fs_qfilestat, %struct.fs_qfilestat, i32, i32, i32, i32, i16, i16 }
%struct.fs_qfilestat = type { i64, i64, i32 }
%struct.export_operations = type opaque
%struct.xattr_handler = type opaque
%struct.hlist_bl_head = type { %struct.hlist_bl_node* }
%struct.block_device = type { i32, i32, %struct.inode*, %struct.super_block*, %struct.mutex, %struct.list_head, i8*, i8*, i32, i8, %struct.list_head, %struct.block_device*, i32, %struct.hd_struct*, i32, i32, %struct.gendisk*, %struct.list_head, i64, i32, %struct.mutex }
%struct.hd_struct = type opaque
%struct.gendisk = type opaque
%struct.mtd_info = type opaque
%struct.quota_info = type { i32, %struct.mutex, %struct.mutex, %struct.rw_semaphore, [2 x %struct.inode*], [2 x %struct.mem_dqinfo], [2 x %struct.quota_format_ops*] }
%struct.mem_dqinfo = type { %struct.quota_format_type*, i32, %struct.list_head, i64, i32, i32, i64, i64, i8* }
%struct.quota_format_type = type { i32, %struct.quota_format_ops*, %struct.module*, %struct.quota_format_type* }
%struct.quota_format_ops = type { i32 (%struct.super_block*, i32)*, i32 (%struct.super_block*, i32)*, i32 (%struct.super_block*, i32)*, i32 (%struct.super_block*, i32)*, i32 (%struct.dquot*)*, i32 (%struct.dquot*)*, i32 (%struct.dquot*)* }
%union.anon.6 = type { %struct.list_head }
%struct.atomic64_t = type { i64 }
%struct.fown_struct = type { %struct.rwlock_t, %struct.pid*, i32, i32, i32, i32 }
%struct.rwlock_t = type { %struct.arch_rwlock_t }
%struct.arch_rwlock_t = type { i32 }
%struct.cred = type opaque
%struct.file_ra_state = type { i64, i32, i32, i32, i32, i64 }
%struct.poll_table_struct = type opaque
%struct.vm_area_struct = type opaque
%struct.list_head = type { %struct.list_head*, %struct.list_head* }
%struct.device = type opaque
%struct.notifier_block = type { i32 (%struct.notifier_block*, i64, i8*)*, %struct.notifier_block*, i32 }
%struct.resource = type { i64, i64, i8*, i64, %struct.resource*, %struct.resource*, %struct.resource* }
%struct.module_version_attribute = type { %struct.module_attribute, i8*, i8* }
%struct.smp_ops = type { void ()*, void (i32)*, void (i32)*, void (i32)*, void (i32)*, i32 (i32)*, i32 ()*, void (i32)*, void ()*, void (%struct.cpumask*)*, void (i32)* }
%struct.cpumask = type { [1 x i64] }

@__param_str_timeout = internal constant [16 x i8] c"sbc8360.timeout\00", align 16
@param_ops_int = external global %struct.kernel_param_ops, align 8
@timeout = internal global i32 27, align 4
@__param_timeout = internal constant %struct.kernel_param { i8* getelementptr inbounds ([16 x i8], [16 x i8]* @__param_str_timeout, i32 0, i32 0), %struct.kernel_param_ops* @param_ops_int, i16 0, i16 0, %union.anon { i8* bitcast (i32* @timeout to i8*) } }, section "__param", align 8
@__param_str_nowayout = internal constant [17 x i8] c"sbc8360.nowayout\00", align 16
@nowayout = internal global i32 0, align 4
@__param_nowayout = internal constant %struct.kernel_param { i8* getelementptr inbounds ([17 x i8], [17 x i8]* @__param_str_nowayout, i32 0, i32 0), %struct.kernel_param_ops* @param_ops_int, i16 0, i16 0, %union.anon { i8* bitcast (i32* @nowayout to i8*) } }, section "__param", align 8
@sbc8360_miscdev = internal global %struct.miscdevice { i32 130, i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str, i32 0, i32 0), %struct.file_operations* @sbc8360_fops, %struct.list_head zeroinitializer, %struct.device* null, %struct.device* null, i8* null, i32 0 }, align 8
@sbc8360_notifier = internal global %struct.notifier_block { i32 (%struct.notifier_block*, i64, i8*)* @sbc8360_notify_sys, %struct.notifier_block* null, i32 0 }, align 8
@ioport_resource = external global %struct.resource, align 8
@__initcall_sbc8360_init6 = internal global i32 ()* @sbc8360_init, section ".initcall6.init", align 8
@__exitcall_sbc8360_exit = internal global void ()* @sbc8360_exit, section ".exitcall.exit", align 8
@___modver_attr = internal global %struct.module_version_attribute { %struct.module_attribute { %struct.attribute { i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.9, i32 0, i32 0), i32 292 }, i64 (%struct.module_attribute*, %struct.module*, i8*)* @__modver_version_show, i64 (%struct.module_attribute*, %struct.module*, i8*, i64)* null, void (%struct.module*, i8*)* null, i32 (%struct.module*)* null, void (%struct.module*)* null }, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.10, i32 0, i32 0), i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.11, i32 0, i32 0) }, align 8
@__modver_attr = internal constant %struct.module_version_attribute* @___modver_attr, section "__modver", align 8
@smp_ops = external global %struct.smp_ops, align 8
@.str = private unnamed_addr constant [9 x i8] c"watchdog\00", align 1
@sbc8360_fops = internal constant %struct.file_operations { %struct.module* null, i64 (%struct.file*, i64, i32)* @no_llseek, i64 (%struct.file*, i8*, i64, i64*)* null, i64 (%struct.file*, i8*, i64, i64*)* @sbc8360_write, i64 (%struct.kiocb*, %struct.iovec*, i64, i64)* null, i64 (%struct.kiocb*, %struct.iovec*, i64, i64)* null, i32 (%struct.file*, i8*, i32 (i8*, i8*, i32, i64, i64, i32)*)* null, i32 (%struct.file*, %struct.poll_table_struct*)* null, i64 (%struct.file*, i32, i64)* null, i64 (%struct.file*, i32, i64)* null, i32 (%struct.file*, %struct.vm_area_struct*)* null, i32 (%struct.inode*, %struct.file*)* @sbc8360_open, i32 (%struct.file*, %struct.files_struct*)* null, i32 (%struct.inode*, %struct.file*)* @sbc8360_close, i32 (%struct.file*, i32)* null, i32 (%struct.kiocb*, i32)* null, i32 (i32, %struct.file*, i32)* null, i32 (%struct.file*, i32, %struct.file_lock*)* null, i64 (%struct.file*, %struct.page*, i32, i64, i64*, i32)* null, i64 (%struct.file*, i64, i64, i64, i64)* null, i32 (i32)* null, i32 (%struct.file*, i32, %struct.file_lock*)* null, i64 (%struct.pipe_inode_info*, %struct.file*, i64*, i64, i32)* null, i64 (%struct.file*, i64*, %struct.pipe_inode_info*, i64, i32)* null, i32 (%struct.file*, i64, %struct.file_lock**)* null, i64 (%struct.file*, i32, i64, i64)* null }, align 8
@expect_close = internal global i8 0, align 1
@wd_margin = internal global i32 11, align 4
@sbc8360_is_open = internal global i64 0, align 8
@__tracepoint_module_get = external global %struct.tracepoint, align 8
@wd_multiplier = internal global i32 2, align 4
@.str.1 = private unnamed_addr constant [73 x i8] c"<2>sbc8360: SBC8360 device closed unexpectedly.  SBC8360 will not stop!\0A\00", align 1
@.str.2 = private unnamed_addr constant [51 x i8] c"<3>sbc8360: Invalid timeout index (must be 0-63).\0A\00", align 1
@.str.3 = private unnamed_addr constant [8 x i8] c"SBC8360\00", align 1
@.str.4 = private unnamed_addr constant [52 x i8] c"<3>sbc8360: ENABLE method I/O %X is not available.\0A\00", align 1
@.str.5 = private unnamed_addr constant [54 x i8] c"<3>sbc8360: BASETIME method I/O %X is not available.\0A\00", align 1
@.str.6 = private unnamed_addr constant [49 x i8] c"<3>sbc8360: Failed to register reboot notifier.\0A\00", align 1
@.str.7 = private unnamed_addr constant [44 x i8] c"<3>sbc8360: failed to register misc device\0A\00", align 1
@wd_times = internal global [64 x [2 x i32]] [[2 x i32] [i32 0, i32 1], [2 x i32] [i32 1, i32 1], [2 x i32] [i32 2, i32 1], [2 x i32] [i32 3, i32 1], [2 x i32] [i32 4, i32 1], [2 x i32] [i32 5, i32 1], [2 x i32] [i32 6, i32 1], [2 x i32] [i32 7, i32 1], [2 x i32] [i32 8, i32 1], [2 x i32] [i32 9, i32 1], [2 x i32] [i32 10, i32 1], [2 x i32] [i32 11, i32 1], [2 x i32] [i32 12, i32 1], [2 x i32] [i32 13, i32 1], [2 x i32] [i32 14, i32 1], [2 x i32] [i32 15, i32 1], [2 x i32] [i32 0, i32 2], [2 x i32] [i32 1, i32 2], [2 x i32] [i32 2, i32 2], [2 x i32] [i32 3, i32 2], [2 x i32] [i32 4, i32 2], [2 x i32] [i32 5, i32 2], [2 x i32] [i32 6, i32 2], [2 x i32] [i32 7, i32 2], [2 x i32] [i32 8, i32 2], [2 x i32] [i32 9, i32 2], [2 x i32] [i32 10, i32 2], [2 x i32] [i32 11, i32 2], [2 x i32] [i32 12, i32 2], [2 x i32] [i32 13, i32 2], [2 x i32] [i32 14, i32 2], [2 x i32] [i32 15, i32 2], [2 x i32] [i32 0, i32 3], [2 x i32] [i32 1, i32 3], [2 x i32] [i32 2, i32 3], [2 x i32] [i32 3, i32 3], [2 x i32] [i32 4, i32 3], [2 x i32] [i32 5, i32 3], [2 x i32] [i32 6, i32 3], [2 x i32] [i32 7, i32 3], [2 x i32] [i32 8, i32 3], [2 x i32] [i32 9, i32 3], [2 x i32] [i32 10, i32 3], [2 x i32] [i32 11, i32 3], [2 x i32] [i32 12, i32 3], [2 x i32] [i32 13, i32 3], [2 x i32] [i32 14, i32 3], [2 x i32] [i32 15, i32 3], [2 x i32] [i32 0, i32 4], [2 x i32] [i32 1, i32 4], [2 x i32] [i32 2, i32 4], [2 x i32] [i32 3, i32 4], [2 x i32] [i32 4, i32 4], [2 x i32] [i32 5, i32 4], [2 x i32] [i32 6, i32 4], [2 x i32] [i32 7, i32 4], [2 x i32] [i32 8, i32 4], [2 x i32] [i32 9, i32 4], [2 x i32] [i32 10, i32 4], [2 x i32] [i32 11, i32 4], [2 x i32] [i32 12, i32 4], [2 x i32] [i32 13, i32 4], [2 x i32] [i32 14, i32 4], [2 x i32] [i32 15, i32 4]], align 16
@.str.8 = private unnamed_addr constant [36 x i8] c"<6>sbc8360: Timeout set at %ld ms.\0A\00", align 1
@.str.9 = private unnamed_addr constant [8 x i8] c"version\00", align 1
@.str.10 = private unnamed_addr constant [8 x i8] c"sbc8360\00", align 1
@.str.11 = private unnamed_addr constant [5 x i8] c"1.01\00", align 1
@llvm.used = appending global [6 x i8*] [i8* bitcast (%struct.kernel_param* @__param_timeout to i8*), i8* bitcast (%struct.kernel_param* @__param_nowayout to i8*), i8* bitcast (void ()* @sbc8360_exit to i8*), i8* bitcast (i32 ()** @__initcall_sbc8360_init6 to i8*), i8* bitcast (void ()** @__exitcall_sbc8360_exit to i8*), i8* bitcast (%struct.module_version_attribute** @__modver_attr to i8*)], section "llvm.metadata"

; Function Attrs: noinline nounwind uwtable
define internal void @smp_send_stop() #0 {
  %1 = load void (i32)*, void (i32)** getelementptr inbounds (%struct.smp_ops, %struct.smp_ops* @smp_ops, i32 0, i32 3), align 8
  call void %1(i32 0)
  ret void
}

; Function Attrs: noinline nounwind uwtable
define internal void @smp_send_reschedule(i32) #0 {
  %2 = load void (i32)*, void (i32)** getelementptr inbounds (%struct.smp_ops, %struct.smp_ops* @smp_ops, i32 0, i32 4), align 8
  call void %2(i32 %0)
  ret void
}

; Function Attrs: noinline nounwind uwtable
define internal void @smp_prepare_cpus(i32) #0 {
  %2 = load void (i32)*, void (i32)** getelementptr inbounds (%struct.smp_ops, %struct.smp_ops* @smp_ops, i32 0, i32 1), align 8
  call void %2(i32 %0)
  ret void
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @__cpu_up(i32) #0 {
  %2 = load i32 (i32)*, i32 (i32)** getelementptr inbounds (%struct.smp_ops, %struct.smp_ops* @smp_ops, i32 0, i32 5), align 8
  %3 = call i32 %2(i32 %0)
  ret i32 %3
}

; Function Attrs: noinline nounwind uwtable
define internal void @smp_cpus_done(i32) #0 {
  %2 = load void (i32)*, void (i32)** getelementptr inbounds (%struct.smp_ops, %struct.smp_ops* @smp_ops, i32 0, i32 2), align 8
  call void %2(i32 %0)
  ret void
}

; Function Attrs: noinline nounwind uwtable
define internal void @smp_prepare_boot_cpu() #0 {
  %1 = load void ()*, void ()** getelementptr inbounds (%struct.smp_ops, %struct.smp_ops* @smp_ops, i32 0, i32 0), align 8
  call void %1()
  ret void
}

; Function Attrs: noinline nounwind uwtable
define internal void @sbc8360_exit() #0 section ".exit.text" {
  %1 = call i32 @misc_deregister(%struct.miscdevice* @sbc8360_miscdev)
  %2 = call i32 @unregister_reboot_notifier(%struct.notifier_block* @sbc8360_notifier)
  call void @__release_region(%struct.resource* @ioport_resource, i64 288, i64 1)
  call void @__release_region(%struct.resource* @ioport_resource, i64 289, i64 1)
  ret void
}

declare i32 @misc_deregister(%struct.miscdevice*) #1

declare i32 @unregister_reboot_notifier(%struct.notifier_block*) #1

declare void @__release_region(%struct.resource*, i64, i64) #1

; Function Attrs: noinline nounwind uwtable
define internal i32 @sbc8360_init() #0 section ".init.text" {
  %1 = load i32, i32* @timeout, align 4
  %2 = icmp slt i32 %1, 0
  %3 = load i32, i32* @timeout, align 4
  %4 = icmp sgt i32 %3, 63
  %or.cond = or i1 %2, %4
  br i1 %or.cond, label %5, label %7

; <label>:5:                                      ; preds = %0
  %6 = call i32 (i8*, ...) @printk(i8* getelementptr inbounds ([51 x i8], [51 x i8]* @.str.2, i32 0, i32 0))
  br label %74

; <label>:7:                                      ; preds = %0
  %8 = call %struct.resource* @__request_region(%struct.resource* @ioport_resource, i64 288, i64 1, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.3, i32 0, i32 0), i32 0)
  %9 = icmp ne %struct.resource* %8, null
  br i1 %9, label %12, label %10

; <label>:10:                                     ; preds = %7
  %11 = call i32 (i8*, ...) @printk(i8* getelementptr inbounds ([52 x i8], [52 x i8]* @.str.4, i32 0, i32 0), i32 288)
  br label %74

; <label>:12:                                     ; preds = %7
  %13 = call %struct.resource* @__request_region(%struct.resource* @ioport_resource, i64 289, i64 1, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.3, i32 0, i32 0), i32 0)
  %14 = icmp ne %struct.resource* %13, null
  br i1 %14, label %17, label %15

; <label>:15:                                     ; preds = %12
  %16 = call i32 (i8*, ...) @printk(i8* getelementptr inbounds ([54 x i8], [54 x i8]* @.str.5, i32 0, i32 0), i32 289)
  br label %73

; <label>:17:                                     ; preds = %12
  %18 = call i32 @register_reboot_notifier(%struct.notifier_block* @sbc8360_notifier)
  %19 = icmp ne i32 %18, 0
  br i1 %19, label %20, label %22

; <label>:20:                                     ; preds = %17
  %21 = call i32 (i8*, ...) @printk(i8* getelementptr inbounds ([49 x i8], [49 x i8]* @.str.6, i32 0, i32 0))
  br label %72

; <label>:22:                                     ; preds = %17
  %23 = call i32 @misc_register(%struct.miscdevice* @sbc8360_miscdev)
  %24 = icmp ne i32 %23, 0
  br i1 %24, label %25, label %28

; <label>:25:                                     ; preds = %22
  %26 = call i32 (i8*, ...) @printk(i8* getelementptr inbounds ([44 x i8], [44 x i8]* @.str.7, i32 0, i32 0))
  %27 = call i32 @unregister_reboot_notifier(%struct.notifier_block* @sbc8360_notifier)
  br label %72

; <label>:28:                                     ; preds = %22
  %29 = load i32, i32* @timeout, align 4
  %30 = sext i32 %29 to i64
  %31 = getelementptr inbounds [64 x [2 x i32]], [64 x [2 x i32]]* @wd_times, i64 0, i64 %30
  %32 = getelementptr inbounds [2 x i32], [2 x i32]* %31, i64 0, i64 0
  %33 = load i32, i32* %32, align 8
  store i32 %33, i32* @wd_margin, align 4
  %34 = load i32, i32* @timeout, align 4
  %35 = sext i32 %34 to i64
  %36 = getelementptr inbounds [64 x [2 x i32]], [64 x [2 x i32]]* @wd_times, i64 0, i64 %35
  %37 = getelementptr inbounds [2 x i32], [2 x i32]* %36, i64 0, i64 1
  %38 = load i32, i32* %37, align 4
  store i32 %38, i32* @wd_multiplier, align 4
  %39 = load i32, i32* @wd_multiplier, align 4
  %40 = icmp eq i32 %39, 1
  br i1 %40, label %41, label %46

; <label>:41:                                     ; preds = %28
  %42 = load i32, i32* @wd_margin, align 4
  %43 = add nsw i32 %42, 1
  %44 = mul nsw i32 %43, 500
  %45 = sext i32 %44 to i64
  br label %70

; <label>:46:                                     ; preds = %28
  %47 = load i32, i32* @wd_multiplier, align 4
  %48 = icmp eq i32 %47, 2
  br i1 %48, label %49, label %54

; <label>:49:                                     ; preds = %46
  %50 = load i32, i32* @wd_margin, align 4
  %51 = add nsw i32 %50, 1
  %52 = mul nsw i32 %51, 5000
  %53 = sext i32 %52 to i64
  br label %70

; <label>:54:                                     ; preds = %46
  %55 = load i32, i32* @wd_multiplier, align 4
  %56 = icmp eq i32 %55, 3
  br i1 %56, label %57, label %62

; <label>:57:                                     ; preds = %54
  %58 = load i32, i32* @wd_margin, align 4
  %59 = add nsw i32 %58, 1
  %60 = mul nsw i32 %59, 50000
  %61 = sext i32 %60 to i64
  br label %70

; <label>:62:                                     ; preds = %54
  %63 = load i32, i32* @wd_multiplier, align 4
  %64 = icmp eq i32 %63, 4
  br i1 %64, label %65, label %70

; <label>:65:                                     ; preds = %62
  %66 = load i32, i32* @wd_margin, align 4
  %67 = add nsw i32 %66, 1
  %68 = mul nsw i32 %67, 100000
  %69 = sext i32 %68 to i64
  br label %70

; <label>:70:                                     ; preds = %49, %62, %65, %57, %41
  %.3 = phi i64 [ %45, %41 ], [ %53, %49 ], [ %61, %57 ], [ %69, %65 ], [ 60000, %62 ]
  %71 = call i32 (i8*, ...) @printk(i8* getelementptr inbounds ([36 x i8], [36 x i8]* @.str.8, i32 0, i32 0), i64 %.3)
  br label %74

; <label>:72:                                     ; preds = %25, %20
  %.01 = phi i32 [ %18, %20 ], [ %23, %25 ]
  call void @__release_region(%struct.resource* @ioport_resource, i64 289, i64 1)
  br label %73

; <label>:73:                                     ; preds = %72, %15
  %.1 = phi i32 [ %.01, %72 ], [ -5, %15 ]
  call void @__release_region(%struct.resource* @ioport_resource, i64 288, i64 1)
  br label %74

; <label>:74:                                     ; preds = %5, %10, %73, %70
  %.0 = phi i32 [ 0, %70 ], [ -22, %5 ], [ %.1, %73 ], [ -5, %10 ]
  ret i32 %.0
}

declare i64 @no_llseek(%struct.file*, i64, i32) #1

; Function Attrs: noinline nounwind uwtable
define internal i64 @sbc8360_write(%struct.file*, i8*, i64, i64*) #0 {
  %5 = icmp ne i64 %2, 0
  br i1 %5, label %6, label %32

; <label>:6:                                      ; preds = %4
  %7 = load i32, i32* @nowayout, align 4
  %8 = icmp ne i32 %7, 0
  br i1 %8, label %31, label %9

; <label>:9:                                      ; preds = %6
  store i8 0, i8* @expect_close, align 1
  br label %10

; <label>:10:                                     ; preds = %29, %9
  %.01 = phi i64 [ 0, %9 ], [ %30, %29 ]
  %11 = icmp ne i64 %.01, %2
  %12 = zext i1 %11 to i32
  %13 = call i32 @__mark(i32 42)
  %14 = and i32 %12, %13
  %15 = icmp ne i32 %14, 0
  br i1 %15, label %16, label %31

; <label>:16:                                     ; preds = %10
  call void @might_fault()
  %17 = getelementptr inbounds i8, i8* %1, i64 %.01
  %18 = call { i8*, i64 } asm sideeffect "call __get_user_1", "={ax},={dx},0,~{dirflag},~{fpsr},~{flags}"(i8* %17) #2, !srcloc !1
  %19 = extractvalue { i8*, i64 } %18, 0
  %20 = extractvalue { i8*, i64 } %18, 1
  %21 = ptrtoint i8* %19 to i64
  %22 = trunc i64 %21 to i32
  %23 = trunc i64 %20 to i8
  %24 = icmp ne i32 %22, 0
  br i1 %24, label %32, label %25

; <label>:25:                                     ; preds = %16
  %26 = sext i8 %23 to i32
  %27 = icmp eq i32 %26, 86
  br i1 %27, label %28, label %29

; <label>:28:                                     ; preds = %25
  store i8 42, i8* @expect_close, align 1
  br label %29

; <label>:29:                                     ; preds = %25, %28
  %30 = add i64 %.01, 1
  br label %10

; <label>:31:                                     ; preds = %10, %6
  call void @sbc8360_ping()
  br label %32

; <label>:32:                                     ; preds = %4, %31, %16
  %.0 = phi i64 [ -14, %16 ], [ %2, %31 ], [ %2, %4 ]
  ret i64 %.0
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @sbc8360_open(%struct.inode*, %struct.file*) #0 {
  %3 = call i32 @test_and_set_bit(i32 0, i64* @sbc8360_is_open)
  %4 = icmp ne i32 %3, 0
  br i1 %4, label %11, label %5

; <label>:5:                                      ; preds = %2
  %6 = load i32, i32* @nowayout, align 4
  %7 = icmp ne i32 %6, 0
  br i1 %7, label %8, label %9

; <label>:8:                                      ; preds = %5
  call void @__module_get(%struct.module* null)
  br label %9

; <label>:9:                                      ; preds = %8, %5
  call void @sbc8360_activate()
  call void @sbc8360_ping()
  %10 = call i32 @nonseekable_open(%struct.inode* %0, %struct.file* %1)
  br label %11

; <label>:11:                                     ; preds = %2, %9
  %.0 = phi i32 [ %10, %9 ], [ -16, %2 ]
  ret i32 %.0
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @sbc8360_close(%struct.inode*, %struct.file*) #0 {
  %3 = load i8, i8* @expect_close, align 1
  %4 = sext i8 %3 to i32
  %5 = icmp eq i32 %4, 42
  br i1 %5, label %6, label %7

; <label>:6:                                      ; preds = %2
  call void @sbc8360_stop()
  br label %9

; <label>:7:                                      ; preds = %2
  %8 = call i32 (i8*, ...) @printk(i8* getelementptr inbounds ([73 x i8], [73 x i8]* @.str.1, i32 0, i32 0))
  br label %9

; <label>:9:                                      ; preds = %7, %6
  call void asm sideeffect ".section .smp_locks,\22a\22\0A.balign 4\0A.long 671f - .\0A.previous\0A671:\0A\09lock; btr $1,$0", "=*m,Ir,*m,~{dirflag},~{fpsr},~{flags}"(i64* @sbc8360_is_open, i32 0, i64* @sbc8360_is_open) #2, !srcloc !2
  store i8 0, i8* @expect_close, align 1
  ret i32 0
}

declare i32 @__mark(i32) #1

; Function Attrs: noinline nounwind uwtable
define internal void @might_fault() #0 {
  %1 = call i32 @_cond_resched()
  ret void
}

; Function Attrs: noinline nounwind uwtable
define internal void @sbc8360_ping() #0 {
  %1 = load i32, i32* @wd_margin, align 4
  %2 = trunc i32 %1 to i8
  call void @outb(i8 zeroext %2, i32 289)
  ret void
}

declare i32 @_cond_resched() #1

; Function Attrs: noinline nounwind uwtable
define internal void @outb(i8 zeroext, i32) #0 {
  call void asm sideeffect "outb ${0:b}, ${1:w}", "{ax},N{dx},~{dirflag},~{fpsr},~{flags}"(i8 %0, i32 %1) #2, !srcloc !3
  ret void
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @test_and_set_bit(i32, i64*) #0 {
  %3 = call i32 asm sideeffect ".section .smp_locks,\22a\22\0A.balign 4\0A.long 671f - .\0A.previous\0A671:\0A\09lock; bts $2,$1\0A\09sbb $0,$0", "=r,=*m,Ir,*m,~{memory},~{dirflag},~{fpsr},~{flags}"(i64* %1, i32 %0, i64* %1) #2, !srcloc !4
  ret i32 %3
}

; Function Attrs: noinline nounwind uwtable
define internal void @__module_get(%struct.module*) #0 {
  %2 = icmp ne %struct.module* %0, null
  br i1 %2, label %3, label %8

; <label>:3:                                      ; preds = %1
  %4 = getelementptr inbounds %struct.module, %struct.module* %0, i32 0, i32 56
  %5 = load %struct.module_ref*, %struct.module_ref** %4, align 8
  %6 = getelementptr inbounds %struct.module_ref, %struct.module_ref* %5, i32 0, i32 0
  call void asm "incl %gs:${0:P}", "=*m,*m,~{dirflag},~{fpsr},~{flags}"(i32* %6, i32* %6) #2, !srcloc !5
  br label %7

; <label>:7:                                      ; preds = %3
  call void @trace_module_get(%struct.module* %0, i64 ptrtoint (i8* blockaddress(@__module_get, %7) to i64))
  br label %8

; <label>:8:                                      ; preds = %7, %1
  ret void
}

; Function Attrs: noinline nounwind uwtable
define internal void @sbc8360_activate() #0 {
  call void @outb(i8 zeroext 10, i32 288)
  %1 = call i64 @msleep_interruptible(i32 100)
  call void @outb(i8 zeroext 11, i32 288)
  %2 = call i64 @msleep_interruptible(i32 100)
  %3 = load i32, i32* @wd_multiplier, align 4
  %4 = trunc i32 %3 to i8
  call void @outb(i8 zeroext %4, i32 288)
  %5 = call i64 @msleep_interruptible(i32 100)
  ret void
}

declare i32 @nonseekable_open(%struct.inode*, %struct.file*) #1

; Function Attrs: noinline nounwind uwtable
define internal void @trace_module_get(%struct.module*, i64) #0 {
  %3 = getelementptr inbounds %struct.jump_label_key, %struct.jump_label_key* getelementptr inbounds (%struct.tracepoint, %struct.tracepoint* @__tracepoint_module_get, i32 0, i32 1), i32 0, i32 0
  %4 = call i32 @atomic_read(%struct.atomic_t* %3) #2
  %5 = icmp ne i32 %4, 0
  %6 = xor i1 %5, true
  %7 = zext i1 %5 to i32
  %8 = sext i32 %7 to i64
  %. = select i1 %5, i1 true, i1 false
  br i1 %., label %9, label %23

; <label>:9:                                      ; preds = %2
  call void @rcu_read_lock_sched_notrace()
  %10 = load volatile %struct.tracepoint_func*, %struct.tracepoint_func** getelementptr inbounds (%struct.tracepoint, %struct.tracepoint* @__tracepoint_module_get, i32 0, i32 4), align 8
  %11 = icmp ne %struct.tracepoint_func* %10, null
  br i1 %11, label %12, label %22

; <label>:12:                                     ; preds = %9, %12
  %.01 = phi %struct.tracepoint_func* [ %18, %12 ], [ %10, %9 ]
  %13 = getelementptr inbounds %struct.tracepoint_func, %struct.tracepoint_func* %.01, i32 0, i32 0
  %14 = load i8*, i8** %13, align 8
  %15 = getelementptr inbounds %struct.tracepoint_func, %struct.tracepoint_func* %.01, i32 0, i32 1
  %16 = load i8*, i8** %15, align 8
  %17 = bitcast i8* %14 to void (i8*, %struct.module*, i64)*
  call void %17(i8* %16, %struct.module* %0, i64 %1)
  %18 = getelementptr inbounds %struct.tracepoint_func, %struct.tracepoint_func* %.01, i32 1
  %19 = getelementptr inbounds %struct.tracepoint_func, %struct.tracepoint_func* %18, i32 0, i32 0
  %20 = load i8*, i8** %19, align 8
  %21 = icmp ne i8* %20, null
  br i1 %21, label %12, label %22

; <label>:22:                                     ; preds = %12, %9
  call void @rcu_read_unlock_sched_notrace()
  br label %23

; <label>:23:                                     ; preds = %22, %2
  ret void
}

; Function Attrs: noinline nounwind uwtable
define internal void @rcu_read_lock_sched_notrace() #0 {
  ret void
}

; Function Attrs: noinline nounwind uwtable
define internal void @rcu_read_unlock_sched_notrace() #0 {
  ret void
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @atomic_read(%struct.atomic_t*) #0 {
  %2 = getelementptr inbounds %struct.atomic_t, %struct.atomic_t* %0, i32 0, i32 0
  %3 = load volatile i32, i32* %2, align 4
  ret i32 %3
}

declare i64 @msleep_interruptible(i32) #1

; Function Attrs: noinline nounwind uwtable
define internal void @sbc8360_stop() #0 {
  call void @outb(i8 zeroext 0, i32 288)
  ret void
}

declare i32 @printk(i8*, ...) #1

; Function Attrs: noinline nounwind uwtable
define internal i32 @sbc8360_notify_sys(%struct.notifier_block*, i64, i8*) #0 {
  %.off = add i64 %1, -1
  %switch = icmp ult i64 %.off, 2
  br i1 %switch, label %4, label %5

; <label>:4:                                      ; preds = %3
  call void @sbc8360_stop()
  br label %5

; <label>:5:                                      ; preds = %3, %4
  ret i32 0
}

declare %struct.resource* @__request_region(%struct.resource*, i64, i64, i8*, i32) #1

declare i32 @register_reboot_notifier(%struct.notifier_block*) #1

declare i32 @misc_register(%struct.miscdevice*) #1

declare i64 @__modver_version_show(%struct.module_attribute*, %struct.module*, i8*) #1

attributes #0 = { noinline nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { nounwind }

!llvm.ident = !{!0}

!0 = !{!"clang version 4.0.1 (tags/RELEASE_401/final)"}
!1 = !{i32 -2145721281}
!2 = !{i32 -2147257893, i32 -2147257858, i32 -2147257838, i32 -2147257802, i32 -2147257782, i32 -2147257903}
!3 = !{i32 -2146355056}
!4 = !{i32 -2147257043, i32 -2147257008, i32 -2147256988, i32 -2147256952, i32 -2147256932, i32 -2147257053, i32 185889}
!5 = !{i32 -2146058520}
