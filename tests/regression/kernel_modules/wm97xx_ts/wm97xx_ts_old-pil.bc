; ModuleID = 'tests/regression/kernel_modules/wm97xx_ts/wm97xx_ts_old-pil.bc'
source_filename = "llvm-link"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%struct.kernel_param_ops = type { i32 (i8*, %struct.kernel_param*)*, i32 (i8*, %struct.kernel_param*)*, void (i8*)* }
%struct.kernel_param = type { i8*, %struct.kernel_param_ops*, i16, i16, %union.anon.3 }
%union.anon.3 = type { i8* }
%struct.kparam_array = type { i32, i32, i32*, %struct.kernel_param_ops*, i8* }
%struct.kernel_symbol = type { i64, i8* }
%struct.device_driver = type { i8*, %struct.bus_type*, %struct.module*, i8*, i8, %struct.of_device_id*, %struct.acpi_device_id*, i32 (%struct.device*)*, i32 (%struct.device*)*, void (%struct.device*)*, i32 (%struct.device*, i32)*, i32 (%struct.device*)*, %struct.attribute_group**, %struct.dev_pm_ops*, %struct.driver_private* }
%struct.bus_type = type { i8*, i8*, %struct.device*, %struct.bus_attribute*, %struct.device_attribute*, %struct.driver_attribute*, i32 (%struct.device*, %struct.device_driver*)*, i32 (%struct.device*, %struct.kobj_uevent_env*)*, i32 (%struct.device*)*, i32 (%struct.device*)*, void (%struct.device*)*, i32 (%struct.device*, i32)*, i32 (%struct.device*)*, %struct.dev_pm_ops*, %struct.iommu_ops*, %struct.subsys_private*, %struct.lock_class_key }
%struct.device = type { %struct.device*, %struct.device_private*, %struct.kobject, i8*, %struct.device_type*, %struct.mutex, %struct.bus_type*, %struct.device_driver*, i8*, %struct.dev_pm_info, %struct.dev_pm_domain*, i32, i64*, i64, %struct.shrink_control*, %struct.list_head, %struct.dma_coherent_mem*, %struct.dev_archdata, %struct.device_node*, %union.anon.3, i32, i32, %struct.spinlock, %struct.list_head, %struct.klist_node, %struct.class*, %struct.attribute_group**, void (%struct.device*)*, %struct.iommu_group* }
%struct.device_private = type opaque
%struct.kobject = type { i8*, %struct.list_head, %struct.kobject*, %struct.kset*, %struct.kobj_type*, %struct.sysfs_dirent*, %struct.arch_spinlock, i8 }
%struct.kset = type { %struct.list_head, %struct.spinlock, %struct.kobject, %struct.kset_uevent_ops* }
%struct.kset_uevent_ops = type { i32 (%struct.kset*, %struct.kobject*)*, i8* (%struct.kset*, %struct.kobject*)*, i32 (%struct.kset*, %struct.kobject*, %struct.kobj_uevent_env*)* }
%struct.kobj_uevent_env = type { [32 x i8*], i32, [2048 x i8], i32 }
%struct.kobj_type = type { void (%struct.kobject*)*, %struct.sysfs_ops*, %struct.attribute**, %struct.kobj_ns_type_operations* (%struct.kobject*)*, i8* (%struct.kobject*)* }
%struct.sysfs_ops = type { i64 (%struct.kobject*, %struct.attribute*, i8*)*, i64 (%struct.kobject*, %struct.attribute*, i8*, i64)*, i8* (%struct.kobject*, %struct.attribute*)* }
%struct.attribute = type { i8*, i16, i8, %struct.lock_class_key*, %struct.lock_class_key }
%struct.kobj_ns_type_operations = type { i32, i8* ()*, i8* (%struct.sock*)*, i8* ()*, void (i8*)* }
%struct.sock = type opaque
%struct.sysfs_dirent = type opaque
%struct.arch_spinlock = type { %struct.atomic_t }
%struct.atomic_t = type { i32 }
%struct.device_type = type { i8*, %struct.attribute_group**, i32 (%struct.device*, %struct.kobj_uevent_env*)*, i8* (%struct.device*, i16*, i32*, i32*)*, void (%struct.device*)*, %struct.dev_pm_ops* }
%struct.mutex = type { %struct.atomic_t, %struct.spinlock, %struct.list_head, %struct.task_struct*, i8*, i8*, %struct.lockdep_map }
%struct.task_struct = type { i64, i8*, %struct.atomic_t, i32, i32, %struct.llist_node, i32, i32, i32, i32, i32, i32, %struct.sched_class*, %struct.sched_entity, %struct.sched_rt_entity, %struct.task_group*, %struct.hlist_head, i8, i32, i32, i32, %struct.cpumask, %struct.sched_info, %struct.list_head, %struct.plist_node, %struct.mm_struct*, %struct.mm_struct*, i8, i32, i32, i32, i32, i32, i32, i8, i32, i32, i64, %struct.task_struct*, %struct.task_struct*, %struct.list_head, %struct.list_head, %struct.task_struct*, %struct.list_head, %struct.list_head, [3 x %struct.pid_link], %struct.list_head, %struct.completion*, i32*, i32*, i64, i64, i64, i64, i64, %struct.load_weight, i64, i64, %struct.load_weight, %struct.load_weight, i64, i64, %struct.task_cputime, [3 x %struct.list_head], %struct.cred*, %struct.cred*, [16 x i8], i32, i32, %struct.sysv_sem, i64, %struct.thread_struct, %struct.fs_struct*, %struct.files_struct*, %struct.nsproxy*, %struct.signal_struct*, %struct.sighand_struct*, %struct.sigset_t, %struct.sigset_t, %struct.sigset_t, %struct.sigpending, i64, i64, i32 (i8*)*, i8*, %struct.sigset_t*, %struct.callback_head*, %struct.audit_context*, i32, i32, %struct.seccomp, i32, i32, %struct.spinlock, %struct.raw_spinlock, %union.anon.23, %struct.rt_mutex_waiter*, %struct.mutex_waiter*, i32, i64, i64, i32, i32, i32, i32, i64, i64, i32, i32, i32, i32, i64, i32, i32, [48 x %struct.held_lock], i32, i8*, %struct.bio_list*, %struct.blk_plug*, %struct.reclaim_state*, %struct.backing_dev_info*, %struct.io_context*, i64, %struct.siginfo*, %struct.task_io_accounting, i64, i64, i64, %struct.nodemask_t, %struct.atomic_t, i32, i32, %struct.css_set*, %struct.list_head, %struct.robust_list_head*, %struct.compat_robust_list_head*, %struct.list_head, %struct.futex_pi_state*, [2 x %struct.perf_event_context*], %struct.mutex, %struct.list_head, %struct.mempolicy*, i16, i16, i32, i32, i32, i64, %struct.callback_head, %struct.callback_head, %struct.pipe_inode_info*, %struct.page_frag, %struct.task_delay_info*, i32, i32, i32, i64, i32, [32 x %struct.latency_record], i64, i64, i32, %struct.ftrace_ret_stack*, i64, %struct.atomic_t, %struct.atomic_t, i64, i64, %struct.memcg_batch_info, i32, %struct.atomic_t, %struct.uprobe_task*, i32, i32 }
%struct.llist_node = type { %struct.llist_node* }
%struct.sched_class = type opaque
%struct.sched_entity = type { %struct.load_weight, %struct.rb_node, %struct.list_head, i32, i64, i64, i64, i64, i64, %struct.sched_statistics, %struct.sched_entity*, %struct.cfs_rq*, %struct.cfs_rq*, %struct.sched_avg }
%struct.rb_node = type { i64, %struct.rb_node*, %struct.rb_node* }
%struct.sched_statistics = type { i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64 }
%struct.cfs_rq = type opaque
%struct.sched_avg = type { i32, i32, i64, i64, i64 }
%struct.sched_rt_entity = type { %struct.list_head, i64, i64, i32, %struct.sched_rt_entity*, %struct.sched_rt_entity*, %struct.rt_rq*, %struct.rt_rq* }
%struct.rt_rq = type opaque
%struct.task_group = type opaque
%struct.hlist_head = type { %struct.hlist_node* }
%struct.hlist_node = type { %struct.hlist_node*, %struct.hlist_node** }
%struct.cpumask = type { [64 x i64] }
%struct.sched_info = type { i64, i64, i64, i64 }
%struct.plist_node = type { i32, %struct.list_head, %struct.list_head }
%struct.mm_struct = type { %struct.vm_area_struct*, %struct.rb_root, %struct.vm_area_struct*, i64 (%struct.file*, i64, i64, i64, i64)*, void (%struct.mm_struct*, i64)*, i64, i64, i64, i64, i64, %struct.pgprot*, %struct.atomic_t, %struct.atomic_t, i32, %struct.spinlock, %struct.rw_semaphore, %struct.list_head, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, [44 x i64], %struct.mm_rss_stat, %struct.linux_binfmt*, %struct.cpumask*, %struct.mm_context_t, i64, %struct.core_state*, %struct.spinlock, %struct.hlist_head, %struct.task_struct*, %struct.file*, %struct.mmu_notifier_mm*, %struct.page*, %struct.cpumask, i64, i64, i64, i32, i32, %struct.uprobes_state }
%struct.rb_root = type { %struct.rb_node* }
%struct.vm_area_struct = type { i64, i64, %struct.vm_area_struct*, %struct.vm_area_struct*, %struct.rb_node, i64, %struct.mm_struct*, %struct.pgprot, i64, %union.anon, %struct.list_head, %struct.anon_vma*, %struct.vm_operations_struct*, i64, %struct.file*, i8*, %struct.mempolicy* }
%struct.pgprot = type { i64 }
%union.anon = type { %struct.anon }
%struct.anon = type { %struct.rb_node, i64 }
%struct.anon_vma = type opaque
%struct.vm_operations_struct = type { void (%struct.vm_area_struct*)*, void (%struct.vm_area_struct*)*, i32 (%struct.vm_area_struct*, %struct.vm_fault*)*, i32 (%struct.vm_area_struct*, %struct.vm_fault*)*, i32 (%struct.vm_area_struct*, i64, i8*, i32, i32)*, i32 (%struct.vm_area_struct*, %struct.mempolicy*)*, %struct.mempolicy* (%struct.vm_area_struct*, i64)*, i32 (%struct.vm_area_struct*, %struct.nodemask_t*, %struct.nodemask_t*, i64)*, i32 (%struct.vm_area_struct*, i64, i64, i64)* }
%struct.vm_fault = type { i32, i64, i8*, %struct.page* }
%struct.rw_semaphore = type { i64, %struct.raw_spinlock, %struct.list_head, %struct.lockdep_map }
%struct.mm_rss_stat = type { [3 x %struct.pgprot] }
%struct.linux_binfmt = type opaque
%struct.mm_context_t = type { i8*, i32, i16, %struct.mutex, i8* }
%struct.core_state = type { %struct.atomic_t, %struct.core_thread, %struct.completion }
%struct.core_thread = type { %struct.task_struct*, %struct.core_thread* }
%struct.completion = type { i32, %struct.__wait_queue_head }
%struct.__wait_queue_head = type { %struct.spinlock, %struct.list_head }
%struct.file = type { %union.anon.23, %struct.path, %struct.inode*, %struct.file_operations*, %struct.spinlock, i32, %struct.pgprot, i32, i32, i64, %struct.fown_struct, %struct.cred*, %struct.file_ra_state, i64, i8*, i8*, %struct.list_head, %struct.list_head, %struct.address_space*, i64 }
%struct.path = type { %struct.vfsmount*, %struct.dentry* }
%struct.vfsmount = type opaque
%struct.dentry = type { i32, %struct.atomic_t, %struct.hlist_bl_node, %struct.dentry*, %struct.qstr, %struct.inode*, [32 x i8], i32, %struct.spinlock, %struct.dentry_operations*, %struct.super_block*, i64, i8*, %struct.list_head, %union.anon.23, %struct.list_head, %struct.hlist_node }
%struct.hlist_bl_node = type { %struct.hlist_bl_node*, %struct.hlist_bl_node** }
%struct.qstr = type { %struct.pgprot, i8* }
%struct.dentry_operations = type { i32 (%struct.dentry*, i32)*, i32 (%struct.dentry*, i32)*, i32 (%struct.dentry*, %struct.inode*, %struct.qstr*)*, i32 (%struct.dentry*, %struct.inode*, %struct.dentry*, %struct.inode*, i32, i8*, %struct.qstr*)*, i32 (%struct.dentry*)*, void (%struct.dentry*)*, void (%struct.dentry*)*, void (%struct.dentry*, %struct.inode*)*, i8* (%struct.dentry*, i8*, i32)*, %struct.vfsmount* (%struct.path*)*, i32 (%struct.dentry*, i1)*, [40 x i8] }
%struct.super_block = type { %struct.list_head, i32, i8, i64, i64, %struct.file_system_type*, %struct.super_operations*, %struct.dquot_operations*, %struct.quotactl_ops*, %struct.export_operations*, i64, i64, %struct.dentry*, %struct.rw_semaphore, i32, %struct.atomic_t, i8*, %struct.xattr_handler**, %struct.list_head, %struct.hlist_bl_head, %struct.list_head*, %struct.list_head, %struct.list_head, i32, [44 x i8], %struct.spinlock, %struct.list_head, i32, %struct.block_device*, %struct.backing_dev_info*, %struct.mtd_info*, %struct.hlist_node, %struct.quota_info, %struct.sb_writers, [32 x i8], [16 x i8], i8*, i32, i32, i32, %struct.mutex, i8*, i8*, %struct.dentry_operations*, i32, %struct.shrinker, %struct.pgprot, i32, [20 x i8] }
%struct.file_system_type = type { i8*, i32, %struct.dentry* (%struct.file_system_type*, i32, i8*, i8*)*, void (%struct.super_block*)*, %struct.module*, %struct.file_system_type*, %struct.hlist_head, %struct.lock_class_key, %struct.lock_class_key, %struct.lock_class_key, [3 x %struct.lock_class_key], %struct.lock_class_key, %struct.lock_class_key, %struct.lock_class_key }
%struct.super_operations = type { %struct.inode* (%struct.super_block*)*, void (%struct.inode*)*, void (%struct.inode*, i32)*, i32 (%struct.inode*, %struct.writeback_control*)*, i32 (%struct.inode*)*, void (%struct.inode*)*, void (%struct.super_block*)*, i32 (%struct.super_block*, i32)*, i32 (%struct.super_block*)*, i32 (%struct.super_block*)*, i32 (%struct.dentry*, %struct.kstatfs*)*, i32 (%struct.super_block*, i32*, i8*)*, void (%struct.super_block*)*, i32 (%struct.seq_file*, %struct.dentry*)*, i32 (%struct.seq_file*, %struct.dentry*)*, i32 (%struct.seq_file*, %struct.dentry*)*, i32 (%struct.seq_file*, %struct.dentry*)*, i64 (%struct.super_block*, i32, i8*, i64, i64)*, i64 (%struct.super_block*, i32, i8*, i64, i64)*, i32 (%struct.super_block*, %struct.page*, i32)*, i32 (%struct.super_block*)*, void (%struct.super_block*, i32)* }
%struct.writeback_control = type opaque
%struct.kstatfs = type opaque
%struct.seq_file = type opaque
%struct.dquot_operations = type { i32 (%struct.dquot*)*, %struct.dquot* (%struct.super_block*, i32)*, void (%struct.dquot*)*, i32 (%struct.dquot*)*, i32 (%struct.dquot*)*, i32 (%struct.dquot*)*, i32 (%struct.super_block*, i32)*, i64* (%struct.inode*)* }
%struct.dquot = type { %struct.hlist_node, %struct.list_head, %struct.list_head, %struct.list_head, %struct.mutex, %struct.atomic_t, %struct.__wait_queue_head, %struct.super_block*, %struct.kqid, i64, i64, %struct.mem_dqblk }
%struct.kqid = type { %struct.atomic_t, i32 }
%struct.mem_dqblk = type { i64, i64, i64, i64, i64, i64, i64, i64, i64 }
%struct.quotactl_ops = type { i32 (%struct.super_block*, i32, i32, %struct.path*)*, i32 (%struct.super_block*, i32, i32)*, i32 (%struct.super_block*, i32)*, i32 (%struct.super_block*, i32)*, i32 (%struct.super_block*, i32, %struct.if_dqinfo*)*, i32 (%struct.super_block*, i32, %struct.if_dqinfo*)*, i32 (%struct.super_block*, i64, %struct.fs_disk_quota*)*, i32 (%struct.super_block*, i64, %struct.fs_disk_quota*)*, i32 (%struct.super_block*, %struct.fs_quota_stat*)*, i32 (%struct.super_block*, i32, i32)* }
%struct.if_dqinfo = type { i64, i64, i32, i32 }
%struct.fs_disk_quota = type { i8, i8, i16, i32, i64, i64, i64, i64, i64, i64, i32, i32, i16, i16, i32, i64, i64, i64, i32, i16, i16, [8 x i8] }
%struct.fs_quota_stat = type { i8, i16, i8, %struct.fs_qfilestat, %struct.fs_qfilestat, i32, i32, i32, i32, i16, i16 }
%struct.fs_qfilestat = type { i64, i64, i32 }
%struct.export_operations = type opaque
%struct.xattr_handler = type opaque
%struct.hlist_bl_head = type { %struct.hlist_bl_node* }
%struct.block_device = type { i32, i32, %struct.inode*, %struct.super_block*, %struct.mutex, %struct.list_head, i8*, i8*, i32, i8, %struct.list_head, %struct.block_device*, i32, %struct.hd_struct*, i32, i32, %struct.gendisk*, %struct.request_queue*, %struct.list_head, i64, i32, %struct.mutex }
%struct.hd_struct = type opaque
%struct.gendisk = type opaque
%struct.request_queue = type opaque
%struct.mtd_info = type opaque
%struct.quota_info = type { i32, %struct.mutex, %struct.mutex, %struct.rw_semaphore, [2 x %struct.inode*], [2 x %struct.mem_dqinfo], [2 x %struct.quota_format_ops*] }
%struct.mem_dqinfo = type { %struct.quota_format_type*, i32, %struct.list_head, i64, i32, i32, i64, i64, i8* }
%struct.quota_format_type = type { i32, %struct.quota_format_ops*, %struct.module*, %struct.quota_format_type* }
%struct.quota_format_ops = type { i32 (%struct.super_block*, i32)*, i32 (%struct.super_block*, i32)*, i32 (%struct.super_block*, i32)*, i32 (%struct.super_block*, i32)*, i32 (%struct.dquot*)*, i32 (%struct.dquot*)*, i32 (%struct.dquot*)* }
%struct.sb_writers = type { [3 x %struct.percpu_counter], %struct.__wait_queue_head, i32, %struct.__wait_queue_head, [3 x %struct.lockdep_map] }
%struct.percpu_counter = type { %struct.raw_spinlock, i64, %struct.list_head, i32* }
%struct.shrinker = type { i32 (%struct.shrinker*, %struct.shrink_control*)*, i32, i64, %struct.list_head, %struct.pgprot }
%struct.inode = type { i16, i16, i32, i32, i32, %struct.posix_acl*, %struct.posix_acl*, %struct.inode_operations*, %struct.super_block*, %struct.address_space*, i8*, i64, %struct.atomic_t, i32, i64, %struct.load_weight, %struct.load_weight, %struct.load_weight, %struct.spinlock, i16, i32, i64, i64, %struct.mutex, i64, %struct.hlist_node, %struct.list_head, %struct.list_head, %struct.list_head, %union.anon.19, i64, %struct.atomic_t, %struct.atomic_t, %struct.atomic_t, %struct.file_operations*, %struct.file_lock*, %struct.address_space, [2 x %struct.dquot*], %struct.list_head, %union.anon.22, i32, i32, %struct.hlist_head, %struct.atomic_t, i8* }
%struct.posix_acl = type opaque
%struct.inode_operations = type { %struct.dentry* (%struct.inode*, %struct.dentry*, i32)*, i8* (%struct.dentry*, %struct.nameidata*)*, i32 (%struct.inode*, i32)*, %struct.posix_acl* (%struct.inode*, i32)*, i32 (%struct.dentry*, i8*, i32)*, void (%struct.dentry*, %struct.nameidata*, i8*)*, i32 (%struct.inode*, %struct.dentry*, i16, i1)*, i32 (%struct.dentry*, %struct.inode*, %struct.dentry*)*, i32 (%struct.inode*, %struct.dentry*)*, i32 (%struct.inode*, %struct.dentry*, i8*)*, i32 (%struct.inode*, %struct.dentry*, i16)*, i32 (%struct.inode*, %struct.dentry*)*, i32 (%struct.inode*, %struct.dentry*, i16, i32)*, i32 (%struct.inode*, %struct.dentry*, %struct.inode*, %struct.dentry*)*, i32 (%struct.dentry*, %struct.iattr*)*, i32 (%struct.vfsmount*, %struct.dentry*, %struct.kstat*)*, i32 (%struct.dentry*, i8*, i8*, i64, i32)*, i64 (%struct.dentry*, i8*, i8*, i64)*, i64 (%struct.dentry*, i8*, i64)*, i32 (%struct.dentry*, i8*)*, i32 (%struct.inode*, %struct.fiemap_extent_info*, i64, i64)*, i32 (%struct.inode*, %struct.load_weight*, i32)*, i32 (%struct.inode*, %struct.dentry*, %struct.file*, i32, i16, i32*)*, [8 x i8] }
%struct.nameidata = type opaque
%struct.iattr = type { i32, i16, i32, i32, i64, %struct.load_weight, %struct.load_weight, %struct.load_weight, %struct.file* }
%struct.kstat = type { i64, i32, i16, i32, i32, i32, i32, i64, %struct.load_weight, %struct.load_weight, %struct.load_weight, i64, i64 }
%struct.fiemap_extent_info = type { i32, i32, i32, %struct.fiemap_extent* }
%struct.fiemap_extent = type { i64, i64, i64, [2 x i64], i32, [3 x i32] }
%union.anon.19 = type { %struct.callback_head }
%struct.file_lock = type { %struct.file_lock*, %struct.list_head, %struct.list_head, %struct.files_struct*, i32, i8, i32, %struct.pid*, %struct.__wait_queue_head, %struct.file*, i64, i64, %struct.fasync_struct*, i64, i64, %struct.file_lock_operations*, %struct.lock_manager_operations*, %union.anon.20 }
%struct.pid = type { %struct.atomic_t, i32, [3 x %struct.hlist_head], %struct.callback_head, [1 x %struct.upid] }
%struct.upid = type { i32, %struct.pid_namespace*, %struct.hlist_node }
%struct.pid_namespace = type opaque
%struct.fasync_struct = type { %struct.spinlock, i32, i32, %struct.fasync_struct*, %struct.file*, %struct.callback_head }
%struct.file_lock_operations = type { void (%struct.file_lock*, %struct.file_lock*)*, void (%struct.file_lock*)* }
%struct.lock_manager_operations = type { i32 (%struct.file_lock*, %struct.file_lock*)*, void (%struct.file_lock*)*, i32 (%struct.file_lock*, %struct.file_lock*, i32)*, void (%struct.file_lock*)*, i32 (%struct.file_lock**, i32)* }
%union.anon.20 = type { %struct.nfs_lock_info }
%struct.nfs_lock_info = type { i32, %struct.nlm_lockowner*, %struct.list_head }
%struct.nlm_lockowner = type opaque
%struct.address_space = type { %struct.inode*, %struct.radix_tree_root, %struct.spinlock, i32, %struct.rb_root, %struct.list_head, %struct.mutex, i64, i64, %struct.address_space_operations*, i64, %struct.backing_dev_info*, %struct.spinlock, %struct.list_head, i8* }
%struct.radix_tree_root = type { i32, i32, %struct.radix_tree_node* }
%struct.radix_tree_node = type opaque
%struct.address_space_operations = type { i32 (%struct.page*, %struct.writeback_control*)*, i32 (%struct.file*, %struct.page*)*, i32 (%struct.address_space*, %struct.writeback_control*)*, i32 (%struct.page*)*, i32 (%struct.file*, %struct.address_space*, %struct.list_head*, i32)*, i32 (%struct.file*, %struct.address_space*, i64, i32, i32, %struct.page**, i8**)*, i32 (%struct.file*, %struct.address_space*, i64, i32, i32, %struct.page*, i8*)*, i64 (%struct.address_space*, i64)*, void (%struct.page*, i64)*, i32 (%struct.page*, i32)*, void (%struct.page*)*, i64 (i32, %struct.kiocb*, %struct.iovec*, i64, i64)*, i32 (%struct.address_space*, i64, i32, i8**, i64*)*, i32 (%struct.address_space*, %struct.page*, %struct.page*, i32)*, i32 (%struct.page*)*, i32 (%struct.page*, %struct.read_descriptor_t*, i64)*, i32 (%struct.address_space*, %struct.page*)*, i32 (%struct.swap_info_struct*, %struct.file*, i64*)*, void (%struct.file*)* }
%struct.kiocb = type opaque
%struct.iovec = type opaque
%struct.read_descriptor_t = type { i64, i64, %union.anon.3, i32 }
%struct.swap_info_struct = type opaque
%union.anon.22 = type { %struct.pipe_inode_info* }
%struct.file_operations = type { %struct.module*, i64 (%struct.file*, i64, i32)*, i64 (%struct.file*, i8*, i64, i64*)*, i64 (%struct.file*, i8*, i64, i64*)*, i64 (%struct.kiocb*, %struct.iovec*, i64, i64)*, i64 (%struct.kiocb*, %struct.iovec*, i64, i64)*, i32 (%struct.file*, i8*, i32 (i8*, i8*, i32, i64, i64, i32)*)*, i32 (%struct.file*, %struct.poll_table_struct*)*, i64 (%struct.file*, i32, i64)*, i64 (%struct.file*, i32, i64)*, i32 (%struct.file*, %struct.vm_area_struct*)*, i32 (%struct.inode*, %struct.file*)*, i32 (%struct.file*, %struct.files_struct*)*, i32 (%struct.inode*, %struct.file*)*, i32 (%struct.file*, i64, i64, i32)*, i32 (%struct.kiocb*, i32)*, i32 (i32, %struct.file*, i32)*, i32 (%struct.file*, i32, %struct.file_lock*)*, i64 (%struct.file*, %struct.page*, i32, i64, i64*, i32)*, i64 (%struct.file*, i64, i64, i64, i64)*, i32 (i32)*, i32 (%struct.file*, i32, %struct.file_lock*)*, i64 (%struct.pipe_inode_info*, %struct.file*, i64*, i64, i32)*, i64 (%struct.file*, i64*, %struct.pipe_inode_info*, i64, i32)*, i32 (%struct.file*, i64, %struct.file_lock**)*, i64 (%struct.file*, i32, i64, i64)*, i32 (%struct.seq_file*, %struct.file*)* }
%struct.poll_table_struct = type { void (%struct.file*, %struct.__wait_queue_head*, %struct.poll_table_struct*)*, i64 }
%struct.fown_struct = type { %struct.rwlock_t, %struct.pid*, i32, i32, i32, i32 }
%struct.rwlock_t = type { %struct.pgprot, i32, i32, i8*, %struct.lockdep_map }
%struct.file_ra_state = type { i64, i32, i32, i32, i32, i64 }
%struct.mmu_notifier_mm = type opaque
%struct.page = type { i64, %struct.address_space*, %struct.anon.8, %union.anon.23, %struct.pgprot, i64 }
%struct.anon.8 = type { %struct.pgprot, %struct.pgprot }
%struct.uprobes_state = type { %struct.xol_area* }
%struct.xol_area = type { %struct.__wait_queue_head, %struct.atomic_t, i64*, %struct.page*, i64 }
%struct.pid_link = type { %struct.hlist_node, %struct.pid* }
%struct.load_weight = type { i64, i64 }
%struct.task_cputime = type { i64, i64, i64 }
%struct.cred = type { %struct.atomic_t, %struct.atomic_t, i8*, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, %struct.kernel_cap_struct, %struct.kernel_cap_struct, %struct.kernel_cap_struct, %struct.kernel_cap_struct, i8, %struct.key*, %struct.key*, %struct.key*, %struct.key*, i8*, %struct.user_struct*, %struct.user_namespace*, %struct.group_info*, %struct.callback_head }
%struct.kernel_cap_struct = type { [2 x i32] }
%struct.key = type { %struct.atomic_t, i32, %union.anon.25, %struct.key_type*, %struct.rw_semaphore, %struct.key_user*, i8*, %struct.pgprot, i64, i32, i32, i32, i16, i16, i64, i8*, %union.anon.23, %struct.pgprot }
%union.anon.25 = type { %struct.rb_node }
%struct.key_type = type opaque
%struct.key_user = type opaque
%struct.user_struct = type { %struct.atomic_t, %struct.atomic_t, %struct.atomic_t, %struct.atomic_t, %struct.atomic_t, %struct.atomic_t, %struct.atomic_t, %struct.pgprot, i64, i64, %struct.key*, %struct.key*, %struct.hlist_node, i32, %struct.pgprot }
%struct.user_namespace = type opaque
%struct.group_info = type { %struct.atomic_t, i32, i32, [32 x i32], [0 x i32*] }
%struct.sysv_sem = type { %struct.sem_undo_list* }
%struct.sem_undo_list = type opaque
%struct.thread_struct = type { [3 x %struct.desc_struct], i64, i64, i64, i16, i16, i16, i16, i64, i64, [4 x %struct.perf_event*], i64, i64, i64, i64, i64, %struct.fpu, i64*, i64, i32 }
%struct.desc_struct = type { %union.anon.29 }
%union.anon.29 = type { %struct.exception_table_entry }
%struct.exception_table_entry = type { i32, i32 }
%struct.perf_event = type opaque
%struct.fpu = type { i32, i32, %union.thread_xstate* }
%union.thread_xstate = type { %struct.xsave_struct }
%struct.xsave_struct = type { %struct.i387_fxsave_struct, %struct.xsave_hdr_struct, %struct.ymmh_struct }
%struct.i387_fxsave_struct = type { i16, i16, i16, i16, %union.anon.32, i32, i32, [32 x i32], [64 x i32], [12 x i32], %union.anon.35 }
%union.anon.32 = type { %struct.load_weight }
%union.anon.35 = type { [12 x i32] }
%struct.xsave_hdr_struct = type { i64, [2 x i64], [5 x i64] }
%struct.ymmh_struct = type { [64 x i32] }
%struct.fs_struct = type opaque
%struct.files_struct = type opaque
%struct.nsproxy = type opaque
%struct.signal_struct = type { %struct.atomic_t, %struct.atomic_t, i32, %struct.__wait_queue_head, %struct.task_struct*, %struct.sigpending, i32, i32, %struct.task_struct*, i32, i32, i8, i32, %struct.list_head, %struct.hrtimer, %struct.pid*, %struct.pgprot, [2 x %struct.if_dqinfo], %struct.thread_group_cputimer, %struct.task_cputime, [3 x %struct.list_head], %struct.pid*, i32, %struct.tty_struct*, %struct.autogroup*, i64, i64, i64, i64, i64, i64, %struct.load_weight, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, %struct.task_io_accounting, i64, [16 x %struct.load_weight], %struct.pacct_struct, %struct.taskstats*, i32, i32, %struct.tty_audit_buf*, %struct.rw_semaphore, i32, i16, i16, %struct.mutex }
%struct.hrtimer = type { %struct.timerqueue_node, %struct.pgprot, i32 (%struct.hrtimer*)*, %struct.hrtimer_clock_base*, i64, i32, i8*, [16 x i8] }
%struct.timerqueue_node = type { %struct.rb_node, %struct.pgprot }
%struct.hrtimer_clock_base = type { %struct.hrtimer_cpu_base*, i32, i32, %struct.timerqueue_head, %struct.pgprot, i64 ()*, %struct.pgprot, %struct.pgprot }
%struct.hrtimer_cpu_base = type { %struct.raw_spinlock, i32, i32, %struct.pgprot, i32, i32, i64, i64, i64, %struct.pgprot, [4 x %struct.hrtimer_clock_base] }
%struct.timerqueue_head = type { %struct.rb_root, %struct.timerqueue_node* }
%struct.thread_group_cputimer = type { %struct.task_cputime, i32, %struct.raw_spinlock }
%struct.tty_struct = type opaque
%struct.autogroup = type opaque
%struct.pacct_struct = type { i32, i64, i64, i64, i64, i64, i64 }
%struct.taskstats = type opaque
%struct.tty_audit_buf = type opaque
%struct.sighand_struct = type { %struct.atomic_t, [64 x %struct.k_sigaction], %struct.spinlock, %struct.__wait_queue_head }
%struct.k_sigaction = type { %struct.sigaction }
%struct.sigaction = type { void (i32)*, i64, void ()*, %struct.sigset_t }
%struct.sigset_t = type { [1 x i64] }
%struct.sigpending = type { %struct.list_head, %struct.sigset_t }
%struct.audit_context = type opaque
%struct.seccomp = type { i32, %struct.seccomp_filter* }
%struct.seccomp_filter = type opaque
%struct.raw_spinlock = type { %struct.arch_spinlock, i32, i32, i8*, %struct.lockdep_map }
%union.anon.23 = type { %struct.list_head }
%struct.rt_mutex_waiter = type opaque
%struct.mutex_waiter = type { %struct.list_head, %struct.task_struct*, i8* }
%struct.held_lock = type { i64, i64, %struct.lockdep_map*, %struct.lockdep_map*, i64, i64, i32 }
%struct.bio_list = type opaque
%struct.blk_plug = type opaque
%struct.reclaim_state = type opaque
%struct.backing_dev_info = type opaque
%struct.io_context = type opaque
%struct.siginfo = type { i32, i32, i32, %union.anon.37 }
%union.anon.37 = type { %struct.anon.41, [80 x i8] }
%struct.anon.41 = type { i32, i32, i32, i64, i64 }
%struct.task_io_accounting = type { i64, i64, i64, i64, i64, i64, i64 }
%struct.nodemask_t = type { [16 x i64] }
%struct.css_set = type opaque
%struct.robust_list_head = type opaque
%struct.compat_robust_list_head = type opaque
%struct.futex_pi_state = type opaque
%struct.perf_event_context = type opaque
%struct.mempolicy = type opaque
%struct.callback_head = type { %struct.callback_head*, void (%struct.callback_head*)* }
%struct.pipe_inode_info = type opaque
%struct.page_frag = type { %struct.page*, i32, i32 }
%struct.task_delay_info = type { %struct.spinlock, i32, %struct.load_weight, %struct.load_weight, i64, i64, i32, i32, %struct.load_weight, %struct.load_weight, i64, i32 }
%struct.latency_record = type { [12 x i64], i32, i64, i64 }
%struct.ftrace_ret_stack = type opaque
%struct.memcg_batch_info = type { i32, %struct.mem_cgroup*, i64, i64 }
%struct.mem_cgroup = type opaque
%struct.uprobe_task = type { i32, %struct.arch_uprobe_task, %struct.return_instance*, i32, %struct.uprobe*, i64, i64 }
%struct.arch_uprobe_task = type { i64, i32, i32 }
%struct.return_instance = type opaque
%struct.uprobe = type opaque
%struct.lockdep_map = type { %struct.lock_class_key*, [2 x %struct.lock_class*], i8*, i32, i64 }
%struct.lock_class = type { %struct.list_head, %struct.list_head, %struct.lockdep_subclass_key*, i32, i32, i64, [13 x %struct.stack_trace], %struct.list_head, %struct.list_head, i32, i64, i8*, i32, [4 x i64], [4 x i64] }
%struct.lockdep_subclass_key = type { i8 }
%struct.stack_trace = type { i32, i32, i64*, i32 }
%struct.dev_pm_info = type { %struct.atomic_t, i8, %struct.spinlock, %struct.list_head, %struct.completion, %struct.wakeup_source*, i8, %struct.timer_list, i64, %struct.work_struct, %struct.__wait_queue_head, %struct.atomic_t, %struct.atomic_t, i16, i32, i32, i32, i32, i64, i64, i64, i64, %struct.pm_subsys_data*, %struct.dev_pm_qos* }
%struct.wakeup_source = type { i8*, %struct.list_head, %struct.spinlock, %struct.timer_list, i64, %struct.pgprot, %struct.pgprot, %struct.pgprot, %struct.pgprot, %struct.pgprot, i64, i64, i64, i64, i64, i8 }
%struct.timer_list = type { %struct.list_head, i64, %struct.tvec_base*, void (i64)*, i64, i32, i32, i8*, [16 x i8], %struct.lockdep_map }
%struct.tvec_base = type opaque
%struct.work_struct = type { %struct.pgprot, %struct.list_head, void (%struct.work_struct*)*, %struct.lockdep_map }
%struct.pm_subsys_data = type { %struct.spinlock, i32, %struct.list_head }
%struct.dev_pm_qos = type { %struct.pm_qos_constraints, %struct.pm_qos_flags, %struct.dev_pm_qos_request*, %struct.dev_pm_qos_request* }
%struct.pm_qos_constraints = type { %union.anon.23, i32, i32, i32, %struct.blocking_notifier_head* }
%struct.blocking_notifier_head = type { %struct.rw_semaphore, %struct.notifier_block* }
%struct.notifier_block = type { i32 (%struct.notifier_block*, i64, i8*)*, %struct.notifier_block*, i32 }
%struct.pm_qos_flags = type { %struct.list_head, i32 }
%struct.dev_pm_qos_request = type { i32, %union.anon.48, %struct.device* }
%union.anon.48 = type { %struct.plist_node }
%struct.dev_pm_domain = type { %struct.dev_pm_ops }
%struct.dev_pm_ops = type { i32 (%struct.device*)*, void (%struct.device*)*, i32 (%struct.device*)*, i32 (%struct.device*)*, i32 (%struct.device*)*, i32 (%struct.device*)*, i32 (%struct.device*)*, i32 (%struct.device*)*, i32 (%struct.device*)*, i32 (%struct.device*)*, i32 (%struct.device*)*, i32 (%struct.device*)*, i32 (%struct.device*)*, i32 (%struct.device*)*, i32 (%struct.device*)*, i32 (%struct.device*)*, i32 (%struct.device*)*, i32 (%struct.device*)*, i32 (%struct.device*)*, i32 (%struct.device*)*, i32 (%struct.device*)*, i32 (%struct.device*)*, i32 (%struct.device*)* }
%struct.shrink_control = type { i32, i64 }
%struct.dma_coherent_mem = type opaque
%struct.dev_archdata = type { %struct.dma_map_ops*, i8* }
%struct.dma_map_ops = type opaque
%struct.device_node = type opaque
%struct.spinlock = type { %union.anon.4 }
%union.anon.4 = type { %struct.raw_spinlock }
%struct.list_head = type { %struct.list_head*, %struct.list_head* }
%struct.klist_node = type { i8*, %struct.list_head, %struct.arch_spinlock }
%struct.class = type { i8*, %struct.module*, %struct.class_attribute*, %struct.device_attribute*, %struct.bin_attribute*, %struct.kobject*, i32 (%struct.device*, %struct.kobj_uevent_env*)*, i8* (%struct.device*, i16*)*, void (%struct.class*)*, void (%struct.device*)*, i32 (%struct.device*, i32)*, i32 (%struct.device*)*, %struct.kobj_ns_type_operations*, i8* (%struct.device*)*, %struct.dev_pm_ops*, %struct.subsys_private* }
%struct.class_attribute = type { %struct.attribute, i64 (%struct.class*, %struct.class_attribute*, i8*)*, i64 (%struct.class*, %struct.class_attribute*, i8*, i64)*, i8* (%struct.class*, %struct.class_attribute*)* }
%struct.bin_attribute = type { %struct.attribute, i64, i8*, i64 (%struct.file*, %struct.kobject*, %struct.bin_attribute*, i8*, i64, i64)*, i64 (%struct.file*, %struct.kobject*, %struct.bin_attribute*, i8*, i64, i64)*, i32 (%struct.file*, %struct.kobject*, %struct.bin_attribute*, %struct.vm_area_struct*)* }
%struct.iommu_group = type opaque
%struct.bus_attribute = type { %struct.attribute, i64 (%struct.bus_type*, i8*)*, i64 (%struct.bus_type*, i8*, i64)* }
%struct.device_attribute = type { %struct.attribute, i64 (%struct.device*, %struct.device_attribute*, i8*)*, i64 (%struct.device*, %struct.device_attribute*, i8*, i64)* }
%struct.driver_attribute = type { %struct.attribute, i64 (%struct.device_driver*, i8*)*, i64 (%struct.device_driver*, i8*, i64)* }
%struct.iommu_ops = type opaque
%struct.subsys_private = type opaque
%struct.lock_class_key = type { [8 x %struct.lockdep_subclass_key] }
%struct.module = type { i32, %struct.list_head, [56 x i8], %struct.module_kobject, %struct.module_attribute*, i8*, i8*, %struct.kobject*, %struct.kernel_symbol*, i64*, i32, %struct.kernel_param*, i32, i32, %struct.kernel_symbol*, i64*, %struct.kernel_symbol*, i64*, i32, i32, %struct.kernel_symbol*, i64*, i8, %struct.kernel_symbol*, i64*, i32, i32, %struct.exception_table_entry*, i32 ()*, i8*, i8*, i32, i32, i32, i32, i32, i32, %struct.mod_arch_specific, i32, i32, %struct.list_head, %struct.bug_entry*, %struct.elf64_sym*, %struct.elf64_sym*, i32, i32, i8*, i8*, %struct.module_sect_attrs*, %struct.module_notes_attrs*, i8*, i8*, i32, i32, %struct.tracepoint**, i32, i8**, %struct.ftrace_event_call**, i32, i32, i64*, %struct.list_head, %struct.list_head, %struct.task_struct*, void ()*, %struct.load_weight*, void ()**, i32 }
%struct.module_kobject = type { %struct.kobject, %struct.module*, %struct.kobject*, %struct.module_param_attrs* }
%struct.module_param_attrs = type opaque
%struct.module_attribute = type { %struct.attribute, i64 (%struct.module_attribute*, %struct.module_kobject*, i8*)*, i64 (%struct.module_attribute*, %struct.module_kobject*, i8*, i64)*, void (%struct.module*, i8*)*, i32 (%struct.module*)*, void (%struct.module*)* }
%struct.mod_arch_specific = type {}
%struct.bug_entry = type { i32, i32, i16, i16 }
%struct.elf64_sym = type { i32, i8, i8, i16, i64, i64 }
%struct.module_sect_attrs = type opaque
%struct.module_notes_attrs = type opaque
%struct.tracepoint = type { i8*, %struct.arch_spinlock, void ()*, void ()*, %struct.tracepoint_func* }
%struct.tracepoint_func = type { i8*, i8* }
%struct.ftrace_event_call = type opaque
%struct.of_device_id = type { [32 x i8], [32 x i8], [128 x i8], i8* }
%struct.acpi_device_id = type { [9 x i8], i64 }
%struct.attribute_group = type { i8*, i16 (%struct.kobject*, %struct.attribute*, i32)*, %struct.attribute** }
%struct.driver_private = type opaque
%struct.wm97xx.3 = type { [3 x i16], i16, [6 x i16], i16, [3 x i16], %struct.wm97xx_codec_drv.4*, %struct.input_dev*, %struct.snd_ac97*, %struct.device*, %struct.platform_device*, %struct.platform_device*, %struct.wm97xx_mach_ops.9*, %struct.mutex, %struct.delayed_work, i64, i64, i32, %struct.workqueue_struct*, %struct.work_struct, i16, i16, i8, i16, i16 }
%struct.wm97xx_codec_drv.4 = type { i16, i8*, {}*, i32 (%struct.wm97xx.3*, %struct.wm97xx_data*)*, i32 (%struct.wm97xx.3*, i32)*, void (%struct.wm97xx.3*)*, void (%struct.wm97xx.3*, i32)*, void (%struct.wm97xx.3*)*, void (%struct.wm97xx.3*)* }
%struct.input_dev = type { i8*, i8*, i8*, %struct.input_id, [1 x i64], [1 x i64], [12 x i64], [1 x i64], [1 x i64], [1 x i64], [1 x i64], [1 x i64], [2 x i64], [1 x i64], i32, i32, i32, i8*, i32 (%struct.input_dev*, %struct.input_keymap_entry*, i32*)*, i32 (%struct.input_dev*, %struct.input_keymap_entry*)*, %struct.ff_device*, i32, %struct.timer_list, [2 x i32], %struct.input_mt*, %struct.input_absinfo*, [12 x i64], [1 x i64], [1 x i64], [1 x i64], i32 (%struct.input_dev*)*, void (%struct.input_dev*)*, i32 (%struct.input_dev*, %struct.file*)*, i32 (%struct.input_dev*, i32, i32, i32)*, %struct.input_handle*, %struct.spinlock, %struct.mutex, i32, i8, %struct.device, %struct.list_head, %struct.list_head, i32, i32, %struct.input_value*, i8 }
%struct.input_id = type { i16, i16, i16, i16 }
%struct.input_keymap_entry = type { i8, i8, i16, i32, [32 x i8] }
%struct.ff_device = type { i32 (%struct.input_dev*, %struct.ff_effect*, %struct.ff_effect*)*, i32 (%struct.input_dev*, i32)*, i32 (%struct.input_dev*, i32, i32)*, void (%struct.input_dev*, i16)*, void (%struct.input_dev*, i16)*, void (%struct.ff_device*)*, i8*, [2 x i64], %struct.mutex, i32, %struct.ff_effect*, [0 x %struct.file*] }
%struct.ff_effect = type { i16, i16, i16, %struct.ff_trigger, %struct.ff_trigger, %union.anon.47 }
%struct.ff_trigger = type { i16, i16 }
%union.anon.47 = type { %struct.ff_periodic_effect }
%struct.ff_periodic_effect = type { i16, i16, i16, i16, i16, %struct.input_id, i32, i16* }
%struct.input_mt = type opaque
%struct.input_absinfo = type { i32, i32, i32, i32, i32, i32 }
%struct.input_handle = type { i8*, i32, i8*, %struct.input_dev*, %struct.input_handler*, %struct.list_head, %struct.list_head }
%struct.input_handler = type { i8*, void (%struct.input_handle*, i32, i32, i32)*, void (%struct.input_handle*, %struct.input_value*, i32)*, i1 (%struct.input_handle*, i32, i32, i32)*, i1 (%struct.input_handler*, %struct.input_dev*)*, i32 (%struct.input_handler*, %struct.input_dev*, %struct.input_device_id*)*, void (%struct.input_handle*)*, void (%struct.input_handle*)*, i8, i32, i8*, %struct.input_device_id*, %struct.list_head, %struct.list_head }
%struct.input_device_id = type { i64, i16, i16, i16, i16, [1 x i64], [12 x i64], [1 x i64], [1 x i64], [1 x i64], [1 x i64], [1 x i64], [2 x i64], [1 x i64], i64 }
%struct.input_value = type { i16, i16, i32 }
%struct.snd_ac97 = type { %struct.snd_ac97_build_ops*, i8*, void (%struct.snd_ac97*)*, %struct.snd_ac97_bus*, %struct.pci_dev*, %struct.snd_info_entry*, %struct.snd_info_entry*, i16, i16, %struct.mutex, %struct.mutex, i16, i16, i32, i16, i16, i16, %struct.ff_trigger*, i32, i32, [6 x i32], i32, [128 x i16], [2 x i64], %union.anon.51, i8, i8, i32, %struct.delayed_work, %struct.device, [2 x %struct.snd_pcm_chmap*] }
%struct.snd_ac97_build_ops = type { i32 (%struct.snd_ac97*)*, i32 (%struct.snd_ac97*)*, i32 (%struct.snd_ac97*)*, i32 (%struct.snd_ac97*)*, void (%struct.snd_ac97*)*, void (%struct.snd_ac97*)*, void (%struct.snd_ac97*)* }
%struct.snd_ac97_bus = type { %struct.snd_ac97_bus_ops*, i8*, void (%struct.snd_ac97_bus*)*, %struct.snd_card*, i16, i8, i32, %struct.spinlock, [2 x [4 x i16]], i16, %struct.ac97_pcm*, [4 x %struct.snd_ac97*], %struct.snd_info_entry* }
%struct.snd_ac97_bus_ops = type { void (%struct.snd_ac97*)*, void (%struct.snd_ac97*)*, void (%struct.snd_ac97*, i16, i16)*, i16 (%struct.snd_ac97*, i16)*, void (%struct.snd_ac97*)*, void (%struct.snd_ac97*)* }
%struct.snd_card = type { i32, [16 x i8], [16 x i8], [32 x i8], [80 x i8], [80 x i8], [128 x i8], %struct.module*, i8*, void (%struct.snd_card*)*, %struct.list_head, i32, %struct.rw_semaphore, %struct.rwlock_t, i32, i32, %struct.list_head, %struct.list_head, %struct.snd_info_entry*, %struct.snd_info_entry*, %struct.proc_dir_entry*, %struct.list_head, %struct.snd_shutdown_f_ops*, %struct.spinlock, i32, i32, %struct.__wait_queue_head, %struct.atomic_t, %struct.device*, %struct.device*, i32, %struct.mutex, %struct.__wait_queue_head, %struct.snd_mixer_oss*, i32 }
%struct.proc_dir_entry = type opaque
%struct.snd_shutdown_f_ops = type opaque
%struct.snd_mixer_oss = type opaque
%struct.ac97_pcm = type { %struct.snd_ac97_bus*, i8, i16, i16, i32, [2 x %struct.anon.50], i64 }
%struct.anon.50 = type { i16, [4 x i16], [4 x i8], [4 x %struct.snd_ac97*] }
%struct.pci_dev = type opaque
%struct.snd_info_entry = type { i8*, i16, i64, i16, %union.anon.49, %struct.snd_info_entry*, %struct.snd_card*, %struct.module*, i8*, void (%struct.snd_info_entry*)*, %struct.proc_dir_entry*, %struct.mutex, %struct.list_head, %struct.list_head }
%union.anon.49 = type { %struct.snd_info_entry_text }
%struct.snd_info_entry_text = type { void (%struct.snd_info_entry*, %struct.snd_info_buffer*)*, void (%struct.snd_info_entry*, %struct.snd_info_buffer*)* }
%struct.snd_info_buffer = type { i8*, i32, i32, i32, i32, i32 }
%union.anon.51 = type { i32, [28 x i8] }
%struct.snd_pcm_chmap = type { %struct.snd_pcm*, i32, %struct.snd_kcontrol*, %struct.snd_pcm_chmap_elem*, i32, i32, i8* }
%struct.snd_pcm = type { %struct.snd_card*, %struct.list_head, i32, i32, i16, i16, [64 x i8], [80 x i8], [2 x %struct.snd_pcm_str], %struct.mutex, %struct.__wait_queue_head, i8*, void (%struct.snd_pcm*)*, %struct.device*, i8, %struct.exception_table_entry }
%struct.snd_pcm_str = type { i32, %struct.snd_pcm*, i32, i32, %struct.snd_pcm_substream*, %struct.snd_pcm_oss_stream, %struct.snd_info_entry*, %struct.snd_info_entry*, i32, %struct.snd_info_entry*, %struct.snd_kcontrol* }
%struct.snd_pcm_substream = type { %struct.snd_pcm*, %struct.snd_pcm_str*, i8*, i32, [32 x i8], i32, %struct.pm_qos_request, i64, %struct.snd_dma_buffer, i32, i64, %struct.snd_pcm_ops*, %struct.snd_pcm_runtime*, %struct.snd_timer*, i8, %struct.snd_pcm_substream*, %struct.list_head, %struct.snd_pcm_group, %struct.snd_pcm_group*, i8*, i32, %struct.atomic_t, i32, void (%struct.snd_pcm_substream*)*, %struct.pid*, %struct.snd_pcm_oss_substream, %struct.snd_info_entry*, %struct.snd_info_entry*, %struct.snd_info_entry*, %struct.snd_info_entry*, %struct.snd_info_entry*, %struct.snd_info_entry*, %struct.snd_info_entry*, i8 }
%struct.pm_qos_request = type { %struct.plist_node, i32, %struct.delayed_work }
%struct.snd_dma_buffer = type { %struct.snd_dma_device, i8*, i64, i64, i8* }
%struct.snd_dma_device = type { i32, %struct.device* }
%struct.snd_pcm_ops = type { i32 (%struct.snd_pcm_substream*)*, i32 (%struct.snd_pcm_substream*)*, i32 (%struct.snd_pcm_substream*, i32, i8*)*, i32 (%struct.snd_pcm_substream*, %struct.snd_pcm_hw_params*)*, i32 (%struct.snd_pcm_substream*)*, i32 (%struct.snd_pcm_substream*)*, i32 (%struct.snd_pcm_substream*, i32)*, i64 (%struct.snd_pcm_substream*)*, i32 (%struct.snd_pcm_substream*, %struct.load_weight*)*, i32 (%struct.snd_pcm_substream*, i32, i64, i8*, i64)*, i32 (%struct.snd_pcm_substream*, i32, i64, i64)*, %struct.page* (%struct.snd_pcm_substream*, i64)*, i32 (%struct.snd_pcm_substream*, %struct.vm_area_struct*)*, i32 (%struct.snd_pcm_substream*)* }
%struct.snd_pcm_hw_params = type { i32, [3 x %struct.snd_mask], [5 x %struct.snd_mask], [12 x %struct.snd_interval], [9 x %struct.snd_interval], i32, i32, i32, i32, i32, i32, i64, [64 x i8] }
%struct.snd_mask = type { [8 x i32] }
%struct.snd_interval = type { i32, i32, i8 }
%struct.snd_pcm_runtime = type { %struct.snd_pcm_substream*, %struct.load_weight, i32, i64, i64, i64, i64, i64, i64, i64, i32, i32, i32, i32, i32, i64, i32, i64, i64, i64, i32, i32, i32, i32, i32, i8, i32, i32, i64, i64, i64, i64, i64, i64, i64, %union.snd_pcm_sync_id, %struct.snd_pcm_mmap_status*, %struct.load_weight*, i64, %struct.__wait_queue_head, %struct.__wait_queue_head, %struct.fasync_struct*, i8*, void (%struct.snd_pcm_runtime*)*, %struct.snd_pcm_hardware, %struct.snd_pcm_hw_constraints, void (%struct.snd_pcm_substream*)*, void (%struct.snd_pcm_substream*)*, i32, i32, i8*, i64, i64, %struct.snd_dma_buffer*, %struct.snd_pcm_oss_runtime, %struct.snd_pcm_hwptr_log* }
%union.snd_pcm_sync_id = type { [4 x i32] }
%struct.snd_pcm_mmap_status = type { i32, i32, i64, %struct.load_weight, i32, %struct.load_weight }
%struct.snd_pcm_hardware = type { i32, i64, i32, i32, i32, i32, i32, i64, i64, i64, i32, i32, i64 }
%struct.snd_pcm_hw_constraints = type { [3 x %struct.snd_mask], [12 x %struct.snd_interval], i32, i32, %struct.snd_pcm_hw_rule* }
%struct.snd_pcm_hw_rule = type { i32, i32 (%struct.snd_pcm_hw_params*, %struct.snd_pcm_hw_rule*)*, i32, [4 x i32], i8* }
%struct.snd_pcm_oss_runtime = type { i8, i32, i32, i32, i32, i32, i32, i64, i64, i64, i32, i64, i64, i64, i8*, i64, %struct.mutex, %struct.snd_pcm_plugin*, %struct.snd_pcm_plugin*, i32 }
%struct.snd_pcm_plugin = type opaque
%struct.snd_pcm_hwptr_log = type opaque
%struct.snd_timer = type opaque
%struct.snd_pcm_group = type { %struct.spinlock, %struct.list_head, i32 }
%struct.snd_pcm_oss_substream = type { i8, %struct.snd_pcm_oss_setup }
%struct.snd_pcm_oss_setup = type { i8*, i8, i32, i32, %struct.snd_pcm_oss_setup* }
%struct.snd_pcm_oss_stream = type { %struct.snd_pcm_oss_setup*, %struct.mutex, %struct.snd_info_entry* }
%struct.snd_kcontrol = type { %struct.list_head, %struct.snd_ctl_elem_id, i32, i32 (%struct.snd_kcontrol*, %struct.snd_ctl_elem_info*)*, i32 (%struct.snd_kcontrol*, %struct.snd_ctl_elem_value*)*, i32 (%struct.snd_kcontrol*, %struct.snd_ctl_elem_value*)*, %union.anon.63, i64, i8*, void (%struct.snd_kcontrol*)*, [0 x %struct.snd_kcontrol_volatile] }
%struct.snd_ctl_elem_id = type { i32, i32, i32, i32, [44 x i8], i32 }
%struct.snd_ctl_elem_info = type { %struct.snd_ctl_elem_id, i32, i32, i32, i32, %union.anon.53, %union.anon.57, [56 x i8] }
%union.anon.53 = type { %struct.anon.56, [40 x i8] }
%struct.anon.56 = type { i32, i32, [64 x i8], i64, i32 }
%union.anon.57 = type { i16* }
%struct.snd_ctl_elem_value = type { %struct.snd_ctl_elem_id, i8, %union.anon.58, %struct.load_weight, [112 x i8] }
%union.anon.58 = type { %union.anon.59 }
%union.anon.59 = type { [128 x i64] }
%union.anon.63 = type { i32 (%struct.snd_kcontrol*, i32, i32, i32*)* }
%struct.snd_kcontrol_volatile = type { %struct.snd_ctl_file*, i32 }
%struct.snd_ctl_file = type { %struct.list_head, %struct.snd_card*, %struct.pid*, i32, i32, %struct.__wait_queue_head, %struct.spinlock, %struct.fasync_struct*, i32, %struct.list_head }
%struct.snd_pcm_chmap_elem = type { i8, [15 x i8] }
%struct.platform_device = type { i8*, i32, i8, %struct.device, i32, %struct.resource*, %struct.platform_device_id*, %struct.mfd_cell*, %struct.mod_arch_specific }
%struct.resource = type { i64, i64, i8*, i64, %struct.resource*, %struct.resource*, %struct.resource* }
%struct.platform_device_id = type { [20 x i8], i64 }
%struct.mfd_cell = type opaque
%struct.wm97xx_mach_ops.9 = type { i32, void (%struct.wm97xx.3*)*, i32 (%struct.wm97xx.3*)*, i32 (%struct.wm97xx.3*)*, void (%struct.wm97xx.3*)*, void (%struct.wm97xx.3*, i32)*, i32, void (i32)*, void (i32)* }
%struct.delayed_work = type { %struct.work_struct, %struct.timer_list, %struct.workqueue_struct*, i32 }
%struct.workqueue_struct = type opaque
%struct.wm97xx_data = type { i32, i32, i32 }
%struct.wm97xx.343 = type { [3 x i16], i16, [6 x i16], i16, [3 x i16], %struct.wm97xx_codec_drv.344*, %struct.input_dev*, %struct.snd_ac97*, %struct.device*, %struct.platform_device*, %struct.platform_device*, %struct.wm97xx_mach_ops.349*, %struct.mutex, %struct.delayed_work, i64, i64, i32, %struct.workqueue_struct*, %struct.work_struct, i16, i16, i8, i16, i16 }
%struct.wm97xx_codec_drv.344 = type { i16, i8*, {}*, i32 (%struct.wm97xx.343*, %struct.wm97xx_data*)*, i32 (%struct.wm97xx.343*, i32)*, void (%struct.wm97xx.343*)*, void (%struct.wm97xx.343*, i32)*, void (%struct.wm97xx.343*)*, void (%struct.wm97xx.343*)* }
%struct.wm97xx_mach_ops.349 = type { i32, void (%struct.wm97xx.343*)*, i32 (%struct.wm97xx.343*)*, i32 (%struct.wm97xx.343*)*, void (%struct.wm97xx.343*)*, void (%struct.wm97xx.343*, i32)*, i32, void (i32)*, void (i32)* }
%struct.wm97xx.683 = type { [3 x i16], i16, [6 x i16], i16, [3 x i16], %struct.wm97xx_codec_drv.684*, %struct.input_dev*, %struct.snd_ac97*, %struct.device*, %struct.platform_device*, %struct.platform_device*, %struct.wm97xx_mach_ops.689*, %struct.mutex, %struct.delayed_work, i64, i64, i32, %struct.workqueue_struct*, %struct.work_struct, i16, i16, i8, i16, i16 }
%struct.wm97xx_codec_drv.684 = type { i16, i8*, {}*, i32 (%struct.wm97xx.683*, %struct.wm97xx_data*)*, i32 (%struct.wm97xx.683*, i32)*, void (%struct.wm97xx.683*)*, void (%struct.wm97xx.683*, i32)*, void (%struct.wm97xx.683*)*, void (%struct.wm97xx.683*)* }
%struct.wm97xx_mach_ops.689 = type { i32, void (%struct.wm97xx.683*)*, i32 (%struct.wm97xx.683*)*, i32 (%struct.wm97xx.683*)*, void (%struct.wm97xx.683*)*, void (%struct.wm97xx.683*, i32)*, i32, void (i32)*, void (i32)* }
%struct.wm97xx = type { [3 x i16], i16, [6 x i16], i16, [3 x i16], %struct.wm97xx_codec_drv*, %struct.input_dev*, %struct.snd_ac97*, %struct.device*, %struct.platform_device*, %struct.platform_device*, %struct.wm97xx_mach_ops*, %struct.mutex, %struct.delayed_work, i64, i64, i32, %struct.workqueue_struct*, %struct.work_struct, i16, i16, i8, i16, i16 }
%struct.wm97xx_codec_drv = type { i16, i8*, i32 (%struct.wm97xx*, i32, i32*)*, i32 (%struct.wm97xx*, %struct.wm97xx_data*)*, i32 (%struct.wm97xx*, i32)*, void (%struct.wm97xx*)*, void (%struct.wm97xx*, i32)*, void (%struct.wm97xx*)*, void (%struct.wm97xx*)* }
%struct.wm97xx_mach_ops = type { i32, void (%struct.wm97xx*)*, i32 (%struct.wm97xx*)*, i32 (%struct.wm97xx*)*, void (%struct.wm97xx*)*, void (%struct.wm97xx*, i32)*, i32, void (i32)*, void (i32)* }
%struct.wm97xx_pdata = type { %struct.wm97xx_batt_pdata* }
%struct.wm97xx_batt_pdata = type { i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i8* }
%struct._ddebug = type { i8*, i8*, i8*, i8*, i32 }

@llvm.used = appending global [102 x i8*] [i8* bitcast ({ i8*, %struct.kernel_param_ops*, i16, i16, { %struct.kparam_array* } }* @__param_abs_x to i8*), i8* getelementptr inbounds ([28 x i8], [28 x i8]* @__UNIQUE_ID_abs_xtype74, i32 0, i32 0), i8* getelementptr inbounds ([49 x i8], [49 x i8]* @__UNIQUE_ID_abs_x75, i32 0, i32 0), i8* bitcast ({ i8*, %struct.kernel_param_ops*, i16, i16, { %struct.kparam_array* } }* @__param_abs_y to i8*), i8* getelementptr inbounds ([28 x i8], [28 x i8]* @__UNIQUE_ID_abs_ytype78, i32 0, i32 0), i8* getelementptr inbounds ([49 x i8], [49 x i8]* @__UNIQUE_ID_abs_y79, i32 0, i32 0), i8* bitcast ({ i8*, %struct.kernel_param_ops*, i16, i16, { %struct.kparam_array* } }* @__param_abs_p to i8*), i8* getelementptr inbounds ([28 x i8], [28 x i8]* @__UNIQUE_ID_abs_ptype82, i32 0, i32 0), i8* getelementptr inbounds ([56 x i8], [56 x i8]* @__UNIQUE_ID_abs_p83, i32 0, i32 0), i8* bitcast (i64* @__kcrctab_wm97xx_reg_read to i8*), i8* bitcast (%struct.kernel_symbol* @__ksymtab_wm97xx_reg_read to i8*), i8* bitcast (i64* @__kcrctab_wm97xx_reg_write to i8*), i8* bitcast (%struct.kernel_symbol* @__ksymtab_wm97xx_reg_write to i8*), i8* bitcast (i64* @__kcrctab_wm97xx_read_aux_adc to i8*), i8* bitcast (%struct.kernel_symbol* @__ksymtab_wm97xx_read_aux_adc to i8*), i8* bitcast (i64* @__kcrctab_wm97xx_get_gpio to i8*), i8* bitcast (%struct.kernel_symbol* @__ksymtab_wm97xx_get_gpio to i8*), i8* bitcast (i64* @__kcrctab_wm97xx_set_gpio to i8*), i8* bitcast (%struct.kernel_symbol* @__ksymtab_wm97xx_set_gpio to i8*), i8* bitcast (i64* @__kcrctab_wm97xx_config_gpio to i8*), i8* bitcast (%struct.kernel_symbol* @__ksymtab_wm97xx_config_gpio to i8*), i8* bitcast (i64* @__kcrctab_wm97xx_set_suspend_mode to i8*), i8* bitcast (%struct.kernel_symbol* @__ksymtab_wm97xx_set_suspend_mode to i8*), i8* bitcast (i64* @__kcrctab_wm97xx_register_mach_ops to i8*), i8* bitcast (%struct.kernel_symbol* @__ksymtab_wm97xx_register_mach_ops to i8*), i8* bitcast (i64* @__kcrctab_wm97xx_unregister_mach_ops to i8*), i8* bitcast (%struct.kernel_symbol* @__ksymtab_wm97xx_unregister_mach_ops to i8*), i8* getelementptr inbounds ([43 x i8], [43 x i8]* @__UNIQUE_ID_author857, i32 0, i32 0), i8* getelementptr inbounds ([63 x i8], [63 x i8]* @__UNIQUE_ID_description858, i32 0, i32 0), i8* getelementptr inbounds ([12 x i8], [12 x i8]* @__UNIQUE_ID_license859, i32 0, i32 0), i8* bitcast (%struct.kernel_param* @__param_pil to i8*), i8* getelementptr inbounds ([17 x i8], [17 x i8]* @__UNIQUE_ID_piltype44, i32 0, i32 0), i8* getelementptr inbounds ([52 x i8], [52 x i8]* @__UNIQUE_ID_pil45, i32 0, i32 0), i8* bitcast (%struct.kernel_param* @__param_pressure to i8*), i8* getelementptr inbounds ([22 x i8], [22 x i8]* @__UNIQUE_ID_pressuretype53, i32 0, i32 0), i8* getelementptr inbounds ([54 x i8], [54 x i8]* @__UNIQUE_ID_pressure54, i32 0, i32 0), i8* bitcast (%struct.kernel_param* @__param_delay to i8*), i8* getelementptr inbounds ([19 x i8], [19 x i8]* @__UNIQUE_ID_delaytype69, i32 0, i32 0), i8* getelementptr inbounds ([33 x i8], [33 x i8]* @__UNIQUE_ID_delay70, i32 0, i32 0), i8* bitcast (%struct.kernel_param* @__param_pdd to i8*), i8* getelementptr inbounds ([17 x i8], [17 x i8]* @__UNIQUE_ID_pddtype83, i32 0, i32 0), i8* getelementptr inbounds ([45 x i8], [45 x i8]* @__UNIQUE_ID_pdd84, i32 0, i32 0), i8* bitcast (%struct.kernel_param* @__param_mask to i8*), i8* getelementptr inbounds ([18 x i8], [18 x i8]* @__UNIQUE_ID_masktype100, i32 0, i32 0), i8* getelementptr inbounds ([33 x i8], [33 x i8]* @__UNIQUE_ID_mask101, i32 0, i32 0), i8* bitcast (i64* @__kcrctab_wm9705_codec to i8*), i8* bitcast (%struct.kernel_symbol* @__ksymtab_wm9705_codec to i8*), i8* getelementptr inbounds ([43 x i8], [43 x i8]* @__UNIQUE_ID_author348, i32 0, i32 0), i8* getelementptr inbounds ([39 x i8], [39 x i8]* @__UNIQUE_ID_description349, i32 0, i32 0), i8* getelementptr inbounds ([12 x i8], [12 x i8]* @__UNIQUE_ID_license350, i32 0, i32 0), i8* bitcast (%struct.kernel_param* @__param_rpu to i8*), i8* getelementptr inbounds ([17 x i8], [17 x i8]* @__UNIQUE_ID_rputype43, i32 0, i32 0), i8* getelementptr inbounds ([54 x i8], [54 x i8]* @__UNIQUE_ID_rpu44, i32 0, i32 0), i8* bitcast (%struct.kernel_param* @__param_pil.44 to i8*), i8* getelementptr inbounds ([17 x i8], [17 x i8]* @__UNIQUE_ID_piltype57, i32 0, i32 0), i8* getelementptr inbounds ([52 x i8], [52 x i8]* @__UNIQUE_ID_pil58, i32 0, i32 0), i8* bitcast (%struct.kernel_param* @__param_pressure.45 to i8*), i8* getelementptr inbounds ([22 x i8], [22 x i8]* @__UNIQUE_ID_pressuretype66, i32 0, i32 0), i8* getelementptr inbounds ([54 x i8], [54 x i8]* @__UNIQUE_ID_pressure67, i32 0, i32 0), i8* bitcast (%struct.kernel_param* @__param_delay.46 to i8*), i8* getelementptr inbounds ([19 x i8], [19 x i8]* @__UNIQUE_ID_delaytype82, i32 0, i32 0), i8* getelementptr inbounds ([33 x i8], [33 x i8]* @__UNIQUE_ID_delay83, i32 0, i32 0), i8* bitcast (%struct.kernel_param* @__param_five_wire to i8*), i8* getelementptr inbounds ([23 x i8], [23 x i8]* @__UNIQUE_ID_five_wiretype91, i32 0, i32 0), i8* getelementptr inbounds ([53 x i8], [53 x i8]* @__UNIQUE_ID_five_wire92, i32 0, i32 0), i8* bitcast (%struct.kernel_param* @__param_mask.47 to i8*), i8* getelementptr inbounds ([18 x i8], [18 x i8]* @__UNIQUE_ID_masktype108, i32 0, i32 0), i8* getelementptr inbounds ([33 x i8], [33 x i8]* @__UNIQUE_ID_mask109, i32 0, i32 0), i8* bitcast (%struct.kernel_param* @__param_coord to i8*), i8* getelementptr inbounds ([19 x i8], [19 x i8]* @__UNIQUE_ID_coordtype118, i32 0, i32 0), i8* getelementptr inbounds ([35 x i8], [35 x i8]* @__UNIQUE_ID_coord119, i32 0, i32 0), i8* bitcast (i64* @__kcrctab_wm9712_codec to i8*), i8* bitcast (%struct.kernel_symbol* @__ksymtab_wm9712_codec to i8*), i8* getelementptr inbounds ([43 x i8], [43 x i8]* @__UNIQUE_ID_author469, i32 0, i32 0), i8* getelementptr inbounds ([39 x i8], [39 x i8]* @__UNIQUE_ID_description470, i32 0, i32 0), i8* getelementptr inbounds ([12 x i8], [12 x i8]* @__UNIQUE_ID_license471, i32 0, i32 0), i8* bitcast (%struct.kernel_param* @__param_rpu.77 to i8*), i8* getelementptr inbounds ([17 x i8], [17 x i8]* @__UNIQUE_ID_rputype43.78, i32 0, i32 0), i8* getelementptr inbounds ([54 x i8], [54 x i8]* @__UNIQUE_ID_rpu44.79, i32 0, i32 0), i8* bitcast (%struct.kernel_param* @__param_pil.80 to i8*), i8* getelementptr inbounds ([17 x i8], [17 x i8]* @__UNIQUE_ID_piltype57.81, i32 0, i32 0), i8* getelementptr inbounds ([52 x i8], [52 x i8]* @__UNIQUE_ID_pil58.82, i32 0, i32 0), i8* bitcast (%struct.kernel_param* @__param_pressure.83 to i8*), i8* getelementptr inbounds ([22 x i8], [22 x i8]* @__UNIQUE_ID_pressuretype66.84, i32 0, i32 0), i8* getelementptr inbounds ([54 x i8], [54 x i8]* @__UNIQUE_ID_pressure67.85, i32 0, i32 0), i8* bitcast (%struct.kernel_param* @__param_delay.86 to i8*), i8* getelementptr inbounds ([19 x i8], [19 x i8]* @__UNIQUE_ID_delaytype82.87, i32 0, i32 0), i8* getelementptr inbounds ([33 x i8], [33 x i8]* @__UNIQUE_ID_delay83.88, i32 0, i32 0), i8* bitcast (%struct.kernel_param* @__param_five_wire.89 to i8*), i8* getelementptr inbounds ([23 x i8], [23 x i8]* @__UNIQUE_ID_five_wiretype91.90, i32 0, i32 0), i8* getelementptr inbounds ([53 x i8], [53 x i8]* @__UNIQUE_ID_five_wire92.91, i32 0, i32 0), i8* bitcast (%struct.kernel_param* @__param_mask.92 to i8*), i8* getelementptr inbounds ([18 x i8], [18 x i8]* @__UNIQUE_ID_masktype108.93, i32 0, i32 0), i8* getelementptr inbounds ([33 x i8], [33 x i8]* @__UNIQUE_ID_mask109.94, i32 0, i32 0), i8* bitcast (%struct.kernel_param* @__param_coord.95 to i8*), i8* getelementptr inbounds ([19 x i8], [19 x i8]* @__UNIQUE_ID_coordtype118.96, i32 0, i32 0), i8* getelementptr inbounds ([35 x i8], [35 x i8]* @__UNIQUE_ID_coord119.97, i32 0, i32 0), i8* bitcast (i64* @__kcrctab_wm9713_codec to i8*), i8* bitcast (%struct.kernel_symbol* @__ksymtab_wm9713_codec to i8*), i8* getelementptr inbounds ([43 x i8], [43 x i8]* @__UNIQUE_ID_author479, i32 0, i32 0), i8* getelementptr inbounds ([39 x i8], [39 x i8]* @__UNIQUE_ID_description480, i32 0, i32 0), i8* getelementptr inbounds ([12 x i8], [12 x i8]* @__UNIQUE_ID_license481, i32 0, i32 0)], section "llvm.metadata"
@__param_abs_x = internal constant { i8*, %struct.kernel_param_ops*, i16, i16, { %struct.kparam_array* } } { i8* getelementptr inbounds ([6 x i8], [6 x i8]* @__param_str_abs_x, i32 0, i32 0), %struct.kernel_param_ops* @param_array_ops, i16 0, i16 -1, { %struct.kparam_array* } { %struct.kparam_array* @__param_arr_abs_x } }, section "__param", align 8
@__UNIQUE_ID_abs_xtype74 = internal constant [28 x i8] c"parmtype=abs_x:array of int\00", section ".modinfo", align 1
@__UNIQUE_ID_abs_x75 = internal constant [49 x i8] c"parm=abs_x:Touchscreen absolute X min, max, fuzz\00", section ".modinfo", align 1
@__param_abs_y = internal constant { i8*, %struct.kernel_param_ops*, i16, i16, { %struct.kparam_array* } } { i8* getelementptr inbounds ([6 x i8], [6 x i8]* @__param_str_abs_y, i32 0, i32 0), %struct.kernel_param_ops* @param_array_ops, i16 0, i16 -1, { %struct.kparam_array* } { %struct.kparam_array* @__param_arr_abs_y } }, section "__param", align 8
@__UNIQUE_ID_abs_ytype78 = internal constant [28 x i8] c"parmtype=abs_y:array of int\00", section ".modinfo", align 1
@__UNIQUE_ID_abs_y79 = internal constant [49 x i8] c"parm=abs_y:Touchscreen absolute Y min, max, fuzz\00", section ".modinfo", align 1
@__param_abs_p = internal constant { i8*, %struct.kernel_param_ops*, i16, i16, { %struct.kparam_array* } } { i8* getelementptr inbounds ([6 x i8], [6 x i8]* @__param_str_abs_p, i32 0, i32 0), %struct.kernel_param_ops* @param_array_ops, i16 0, i16 -1, { %struct.kparam_array* } { %struct.kparam_array* @__param_arr_abs_p } }, section "__param", align 8
@__UNIQUE_ID_abs_ptype82 = internal constant [28 x i8] c"parmtype=abs_p:array of int\00", section ".modinfo", align 1
@__UNIQUE_ID_abs_p83 = internal constant [56 x i8] c"parm=abs_p:Touchscreen absolute Pressure min, max, fuzz\00", section ".modinfo", align 1
@__kcrctab_wm97xx_reg_read = internal constant i64 ptrtoint (i8** @__crc_wm97xx_reg_read to i64), section "___kcrctab_gpl+wm97xx_reg_read", align 8
@__ksymtab_wm97xx_reg_read = internal constant %struct.kernel_symbol { i64 ptrtoint (i32 (%struct.wm97xx*, i16)* @wm97xx_reg_read to i64), i8* getelementptr inbounds ([16 x i8], [16 x i8]* @__kstrtab_wm97xx_reg_read, i32 0, i32 0) }, section "___ksymtab_gpl+wm97xx_reg_read", align 8
@__kcrctab_wm97xx_reg_write = internal constant i64 ptrtoint (i8** @__crc_wm97xx_reg_write to i64), section "___kcrctab_gpl+wm97xx_reg_write", align 8
@__ksymtab_wm97xx_reg_write = internal constant %struct.kernel_symbol { i64 ptrtoint (void (%struct.wm97xx*, i16, i16)* @wm97xx_reg_write to i64), i8* getelementptr inbounds ([17 x i8], [17 x i8]* @__kstrtab_wm97xx_reg_write, i32 0, i32 0) }, section "___ksymtab_gpl+wm97xx_reg_write", align 8
@__kcrctab_wm97xx_read_aux_adc = internal constant i64 ptrtoint (i8** @__crc_wm97xx_read_aux_adc to i64), section "___kcrctab_gpl+wm97xx_read_aux_adc", align 8
@__ksymtab_wm97xx_read_aux_adc = internal constant %struct.kernel_symbol { i64 ptrtoint (i32 (%struct.wm97xx*, i16)* @wm97xx_read_aux_adc to i64), i8* getelementptr inbounds ([20 x i8], [20 x i8]* @__kstrtab_wm97xx_read_aux_adc, i32 0, i32 0) }, section "___ksymtab_gpl+wm97xx_read_aux_adc", align 8
@__kcrctab_wm97xx_get_gpio = internal constant i64 ptrtoint (i8** @__crc_wm97xx_get_gpio to i64), section "___kcrctab_gpl+wm97xx_get_gpio", align 8
@__ksymtab_wm97xx_get_gpio = internal constant %struct.kernel_symbol { i64 ptrtoint (i32 (%struct.wm97xx*, i32)* @wm97xx_get_gpio to i64), i8* getelementptr inbounds ([16 x i8], [16 x i8]* @__kstrtab_wm97xx_get_gpio, i32 0, i32 0) }, section "___ksymtab_gpl+wm97xx_get_gpio", align 8
@__kcrctab_wm97xx_set_gpio = internal constant i64 ptrtoint (i8** @__crc_wm97xx_set_gpio to i64), section "___kcrctab_gpl+wm97xx_set_gpio", align 8
@__ksymtab_wm97xx_set_gpio = internal constant %struct.kernel_symbol { i64 ptrtoint (void (%struct.wm97xx*, i32, i32)* @wm97xx_set_gpio to i64), i8* getelementptr inbounds ([16 x i8], [16 x i8]* @__kstrtab_wm97xx_set_gpio, i32 0, i32 0) }, section "___ksymtab_gpl+wm97xx_set_gpio", align 8
@__kcrctab_wm97xx_config_gpio = internal constant i64 ptrtoint (i8** @__crc_wm97xx_config_gpio to i64), section "___kcrctab_gpl+wm97xx_config_gpio", align 8
@__ksymtab_wm97xx_config_gpio = internal constant %struct.kernel_symbol { i64 ptrtoint (void (%struct.wm97xx*, i32, i32, i32, i32, i32)* @wm97xx_config_gpio to i64), i8* getelementptr inbounds ([19 x i8], [19 x i8]* @__kstrtab_wm97xx_config_gpio, i32 0, i32 0) }, section "___ksymtab_gpl+wm97xx_config_gpio", align 8
@__kcrctab_wm97xx_set_suspend_mode = internal constant i64 ptrtoint (i8** @__crc_wm97xx_set_suspend_mode to i64), section "___kcrctab_gpl+wm97xx_set_suspend_mode", align 8
@__ksymtab_wm97xx_set_suspend_mode = internal constant %struct.kernel_symbol { i64 ptrtoint (void (%struct.wm97xx*, i16)* @wm97xx_set_suspend_mode to i64), i8* getelementptr inbounds ([24 x i8], [24 x i8]* @__kstrtab_wm97xx_set_suspend_mode, i32 0, i32 0) }, section "___ksymtab_gpl+wm97xx_set_suspend_mode", align 8
@__kcrctab_wm97xx_register_mach_ops = internal constant i64 ptrtoint (i8** @__crc_wm97xx_register_mach_ops to i64), section "___kcrctab_gpl+wm97xx_register_mach_ops", align 8
@__ksymtab_wm97xx_register_mach_ops = internal constant %struct.kernel_symbol { i64 ptrtoint (i32 (%struct.wm97xx*, %struct.wm97xx_mach_ops*)* @wm97xx_register_mach_ops to i64), i8* getelementptr inbounds ([25 x i8], [25 x i8]* @__kstrtab_wm97xx_register_mach_ops, i32 0, i32 0) }, section "___ksymtab_gpl+wm97xx_register_mach_ops", align 8
@__kcrctab_wm97xx_unregister_mach_ops = internal constant i64 ptrtoint (i8** @__crc_wm97xx_unregister_mach_ops to i64), section "___kcrctab_gpl+wm97xx_unregister_mach_ops", align 8
@__ksymtab_wm97xx_unregister_mach_ops = internal constant %struct.kernel_symbol { i64 ptrtoint (void (%struct.wm97xx*)* @wm97xx_unregister_mach_ops to i64), i8* getelementptr inbounds ([27 x i8], [27 x i8]* @__kstrtab_wm97xx_unregister_mach_ops, i32 0, i32 0) }, section "___ksymtab_gpl+wm97xx_unregister_mach_ops", align 8
@__UNIQUE_ID_author857 = internal constant [43 x i8] c"author=Liam Girdwood <lrg@slimlogic.co.uk>\00", section ".modinfo", align 1
@__UNIQUE_ID_description858 = internal constant [63 x i8] c"description=WM97xx Core - Touch Screen / AUX ADC / GPIO Driver\00", section ".modinfo", align 1
@__UNIQUE_ID_license859 = internal constant [12 x i8] c"license=GPL\00", section ".modinfo", align 1
@__kstrtab_wm97xx_unregister_mach_ops = internal constant [27 x i8] c"wm97xx_unregister_mach_ops\00", section "__ksymtab_strings", align 1
@__crc_wm97xx_unregister_mach_ops = extern_weak global i8*, align 8
@__kstrtab_wm97xx_register_mach_ops = internal constant [25 x i8] c"wm97xx_register_mach_ops\00", section "__ksymtab_strings", align 1
@__crc_wm97xx_register_mach_ops = extern_weak global i8*, align 8
@__kstrtab_wm97xx_set_suspend_mode = internal constant [24 x i8] c"wm97xx_set_suspend_mode\00", section "__ksymtab_strings", align 1
@__crc_wm97xx_set_suspend_mode = extern_weak global i8*, align 8
@__kstrtab_wm97xx_config_gpio = internal constant [19 x i8] c"wm97xx_config_gpio\00", section "__ksymtab_strings", align 1
@__crc_wm97xx_config_gpio = extern_weak global i8*, align 8
@__kstrtab_wm97xx_set_gpio = internal constant [16 x i8] c"wm97xx_set_gpio\00", section "__ksymtab_strings", align 1
@__crc_wm97xx_set_gpio = extern_weak global i8*, align 8
@__kstrtab_wm97xx_get_gpio = internal constant [16 x i8] c"wm97xx_get_gpio\00", section "__ksymtab_strings", align 1
@__crc_wm97xx_get_gpio = extern_weak global i8*, align 8
@__kstrtab_wm97xx_read_aux_adc = internal constant [20 x i8] c"wm97xx_read_aux_adc\00", section "__ksymtab_strings", align 1
@.str = private unnamed_addr constant [48 x i8] c"timeout reading auxadc %d, disabling digitiser\0A\00", align 1
@__crc_wm97xx_read_aux_adc = extern_weak global i8*, align 8
@__kstrtab_wm97xx_reg_write = internal constant [17 x i8] c"wm97xx_reg_write\00", section "__ksymtab_strings", align 1
@__crc_wm97xx_reg_write = extern_weak global i8*, align 8
@__kstrtab_wm97xx_reg_read = internal constant [16 x i8] c"wm97xx_reg_read\00", section "__ksymtab_strings", align 1
@__crc_wm97xx_reg_read = extern_weak global i8*, align 8
@__param_str_abs_p = internal constant [6 x i8] c"abs_p\00", align 1
@param_array_ops = external global %struct.kernel_param_ops, align 8
@__param_arr_abs_p = internal constant %struct.kparam_array { i32 3, i32 4, i32* null, %struct.kernel_param_ops* @param_ops_int, i8* bitcast ([3 x i32]* @abs_p to i8*) }, align 8
@param_ops_int = external global %struct.kernel_param_ops, align 8
@abs_p = internal global [3 x i32] [i32 0, i32 150, i32 4], align 4
@__param_str_abs_y = internal constant [6 x i8] c"abs_y\00", align 1
@__param_arr_abs_y = internal constant %struct.kparam_array { i32 3, i32 4, i32* null, %struct.kernel_param_ops* @param_ops_int, i8* bitcast ([3 x i32]* @abs_y to i8*) }, align 8
@abs_y = internal global [3 x i32] [i32 320, i32 3750, i32 40], align 4
@__param_str_abs_x = internal constant [6 x i8] c"abs_x\00", align 1
@__param_arr_abs_x = internal constant %struct.kparam_array { i32 3, i32 4, i32* null, %struct.kernel_param_ops* @param_ops_int, i8* bitcast ([3 x i32]* @abs_x to i8*) }, align 8
@abs_x = internal global [3 x i32] [i32 350, i32 3900, i32 5], align 4
@wm97xx_driver = internal global %struct.device_driver { i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.1, i32 0, i32 0), %struct.bus_type* @ac97_bus_type, %struct.module* @__this_module, i8* null, i8 0, %struct.of_device_id* null, %struct.acpi_device_id* null, i32 (%struct.device*)* @wm97xx_probe, i32 (%struct.device*)* @wm97xx_remove, void (%struct.device*)* null, i32 (%struct.device*, i32)* @wm97xx_suspend, i32 (%struct.device*)* @wm97xx_resume, %struct.attribute_group** null, %struct.dev_pm_ops* null, %struct.driver_private* null }, align 8
@.str.1 = private unnamed_addr constant [10 x i8] c"wm97xx-ts\00", align 1
@ac97_bus_type = external global %struct.bus_type, align 8
@__this_module = external global %struct.module, align 8
@.str.2 = private unnamed_addr constant [17 x i8] c"&wm->codec_mutex\00", align 1
@wm97xx_probe.__key = internal global %struct.lock_class_key zeroinitializer, align 1
@.str.3 = private unnamed_addr constant [41 x i8] c"Device with vendor %04x is not a wm97xx\0A\00", align 1
@.str.4 = private unnamed_addr constant [27 x i8] c"detected a wm97%02x codec\0A\00", align 1
@.str.5 = private unnamed_addr constant [39 x i8] c"Support for wm97%02x not compiled in.\0A\00", align 1
@.str.6 = private unnamed_addr constant [19 x i8] c"wm97xx touchscreen\00", align 1
@.str.7 = private unnamed_addr constant [7 x i8] c"wm97xx\00", align 1
@.str.8 = private unnamed_addr constant [15 x i8] c"wm97xx-battery\00", align 1
@.str.9 = private unnamed_addr constant [13 x i8] c"wm97xx-touch\00", align 1
@.str.19 = private unnamed_addr constant [40 x i8] c"drivers/input/touchscreen/wm97xx-core.c\00", align 1
@.str.10 = private unnamed_addr constant [8 x i8] c"kwm97xx\00", align 1
@wm97xx_ts_input_open.__key = internal global %struct.lock_class_key zeroinitializer, align 1
@.str.11 = private unnamed_addr constant [28 x i8] c"Failed to create workqueue\0A\00", align 1
@.str.13 = private unnamed_addr constant [26 x i8] c"(&(&wm->ts_reader)->work)\00", align 1
@wm97xx_ts_input_open.__key.12 = internal global %struct.lock_class_key zeroinitializer, align 1
@.str.15 = private unnamed_addr constant [27 x i8] c"(&(&wm->ts_reader)->timer)\00", align 1
@wm97xx_ts_input_open.__key.14 = internal global %struct.lock_class_key zeroinitializer, align 1
@.str.17 = private unnamed_addr constant [22 x i8] c"(&wm->pen_event_work)\00", align 1
@wm97xx_ts_input_open.__key.16 = internal global %struct.lock_class_key zeroinitializer, align 1
@.str.18 = private unnamed_addr constant [18 x i8] c"No IRQ specified\0A\00", align 1
@.str.28 = private unnamed_addr constant [11 x i8] c"wm97xx-pen\00", align 1
@.str.29 = private unnamed_addr constant [47 x i8] c"Failed to register pen down interrupt, polling\00", align 1
@wm97xx_read_samples.descriptor = internal global { i8*, i8*, i8*, i8*, i8, i8, i8, i8 } { i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.1.73, i32 0, i32 0), i8* getelementptr inbounds ([20 x i8], [20 x i8]* @__func__.wm97xx_read_samples, i32 0, i32 0), i8* getelementptr inbounds ([40 x i8], [40 x i8]* @.str.19, i32 0, i32 0), i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.21, i32 0, i32 0), i8 -91, i8 1, i8 0, i8 0 }, section "__verbose", align 8
@.str.21 = private unnamed_addr constant [8 x i8] c"pen up\0A\00", align 1
@wm97xx_read_samples.descriptor.22 = internal global { i8*, i8*, i8*, i8*, i8, i8, i8, i8 } { i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.1.73, i32 0, i32 0), i8* getelementptr inbounds ([20 x i8], [20 x i8]* @__func__.wm97xx_read_samples, i32 0, i32 0), i8* getelementptr inbounds ([40 x i8], [40 x i8]* @.str.19, i32 0, i32 0), i8* getelementptr inbounds ([44 x i8], [44 x i8]* @.str.23, i32 0, i32 0), i8 -68, i8 1, i8 0, i8 0 }, section "__verbose", align 8
@.str.23 = private unnamed_addr constant [44 x i8] c"pen down: x=%x:%d, y=%x:%d, pressure=%x:%d\0A\00", align 1
@wm97xx_read_samples.descriptor.24 = internal global { i8*, i8*, i8*, i8*, i8, i8, i8, i8 } { i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.1.73, i32 0, i32 0), i8* getelementptr inbounds ([20 x i8], [20 x i8]* @__func__.wm97xx_read_samples, i32 0, i32 0), i8* getelementptr inbounds ([40 x i8], [40 x i8]* @.str.19, i32 0, i32 0), i8* getelementptr inbounds ([39 x i8], [39 x i8]* @.str.25, i32 0, i32 0), i8 -62, i8 1, i8 0, i8 0 }, section "__verbose", align 8
@.str.25 = private unnamed_addr constant [39 x i8] c"Measurement out of range, dropping it\0A\00", align 1
@wm97xx_read_samples.descriptor.26 = internal global { i8*, i8*, i8*, i8*, i8, i8, i8, i8 } { i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.1.73, i32 0, i32 0), i8* getelementptr inbounds ([20 x i8], [20 x i8]* @__func__.wm97xx_read_samples, i32 0, i32 0), i8* getelementptr inbounds ([40 x i8], [40 x i8]* @.str.19, i32 0, i32 0), i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.27, i32 0, i32 0), i8 -49, i8 1, i8 0, i8 0 }, section "__verbose", align 8
@.str.27 = private unnamed_addr constant [10 x i8] c"pen down\0A\00", align 1
@__func__.wm97xx_read_samples = private unnamed_addr constant [20 x i8] c"wm97xx_read_samples\00", align 1
@wm9705_codec = global { i16, i8*, i32 (%struct.wm97xx.3*, i32, i32*)*, i32 (%struct.wm97xx.3*, %struct.wm97xx_data*)*, i32 (%struct.wm97xx.3*, i32)*, void (%struct.wm97xx.3*)*, void (%struct.wm97xx.3*, i32)*, void (%struct.wm97xx.3*)*, void (%struct.wm97xx.3*)* } { i16 19461, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.12, i32 0, i32 0), i32 (%struct.wm97xx.3*, i32, i32*)* @wm9705_poll_sample, i32 (%struct.wm97xx.3*, %struct.wm97xx_data*)* @wm9705_poll_touch, i32 (%struct.wm97xx.3*, i32)* @wm9705_acc_enable, void (%struct.wm97xx.3*)* @wm9705_phy_init, void (%struct.wm97xx.3*, i32)* @wm9705_dig_enable, void (%struct.wm97xx.3*)* @wm9705_dig_restore, void (%struct.wm97xx.3*)* @wm9705_aux_prepare }, align 8
@.str.12 = private unnamed_addr constant [7 x i8] c"wm9705\00", align 1
@pil = internal global i32 0, align 4
@wm9705_phy_init.descriptor = internal global { i8*, i8*, i8*, i8*, i8, i8, i8, i8 } { i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.1.73, i32 0, i32 0), i8* getelementptr inbounds ([16 x i8], [16 x i8]* @__func__.wm9705_phy_init, i32 0, i32 0), i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.2.18, i32 0, i32 0), i8* getelementptr inbounds ([47 x i8], [47 x i8]* @.str.9.61, i32 0, i32 0), i8 -103, i8 0, i8 0, i8 0 }, section "__verbose", align 8
@wm9705_phy_init.descriptor.7 = internal global { i8*, i8*, i8*, i8*, i8, i8, i8, i8 } { i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.1.73, i32 0, i32 0), i8* getelementptr inbounds ([16 x i8], [16 x i8]* @__func__.wm9705_phy_init, i32 0, i32 0), i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.2.18, i32 0, i32 0), i8* getelementptr inbounds ([47 x i8], [47 x i8]* @.str.10.62, i32 0, i32 0), i8 -100, i8 0, i8 0, i8 0 }, section "__verbose", align 8
@pressure = internal global i32 192, align 4
@delay = internal global i32 4, align 4
@wm9705_phy_init.descriptor.9 = internal global { i8*, i8*, i8*, i8*, i8, i8, i8, i8 } { i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.1.73, i32 0, i32 0), i8* getelementptr inbounds ([16 x i8], [16 x i8]* @__func__.wm9705_phy_init, i32 0, i32 0), i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.2.18, i32 0, i32 0), i8* getelementptr inbounds ([29 x i8], [29 x i8]* @.str.11.65, i32 0, i32 0), i8 -93, i8 0, i8 0, i8 0 }, section "__verbose", align 8
@wm9705_phy_init.descriptor.11 = internal global { i8*, i8*, i8*, i8*, i8, i8, i8, i8 } { i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.1.73, i32 0, i32 0), i8* getelementptr inbounds ([16 x i8], [16 x i8]* @__func__.wm9705_phy_init, i32 0, i32 0), i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.2.18, i32 0, i32 0), i8* getelementptr inbounds ([39 x i8], [39 x i8]* @.str.12.67, i32 0, i32 0), i8 -86, i8 0, i8 0, i8 0 }, section "__verbose", align 8
@delay_table = internal constant [16 x i32] [i32 21, i32 42, i32 84, i32 167, i32 333, i32 667, i32 1000, i32 1333, i32 2000, i32 2667, i32 3333, i32 4000, i32 4667, i32 5333, i32 6000, i32 0], align 16
@pdd = internal global i32 8, align 4
@wm9705_phy_init.descriptor.13 = internal global { i8*, i8*, i8*, i8*, i8, i8, i8, i8 } { i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.1.73, i32 0, i32 0), i8* getelementptr inbounds ([16 x i8], [16 x i8]* @__func__.wm9705_phy_init, i32 0, i32 0), i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.2.18, i32 0, i32 0), i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.14, i32 0, i32 0), i8 -82, i8 0, i8 0, i8 0 }, section "__verbose", align 8
@.str.14 = private unnamed_addr constant [23 x i8] c"setting pdd to Vmid/%d\00", align 1
@mask = internal global i32 0, align 4
@__func__.wm9705_phy_init = private unnamed_addr constant [16 x i8] c"wm9705_phy_init\00", align 1
@.str.2.18 = private unnamed_addr constant [35 x i8] c"drivers/input/touchscreen/wm9705.c\00", align 1
@wm9705_poll_sample.descriptor = internal global { i8*, i8*, i8*, i8*, i8, i8, i8, i8 } { i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.1.73, i32 0, i32 0), i8* getelementptr inbounds ([19 x i8], [19 x i8]* @__func__.wm9705_poll_sample, i32 0, i32 0), i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.2.18, i32 0, i32 0), i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.3.72, i32 0, i32 0), i8 -8, i8 0, i8 0, i8 0 }, section "__verbose", align 8
@wm9705_poll_sample.descriptor.4 = internal global { i8*, i8*, i8*, i8*, i8, i8, i8, i8 } { i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.1.73, i32 0, i32 0), i8* getelementptr inbounds ([19 x i8], [19 x i8]* @__func__.wm9705_poll_sample, i32 0, i32 0), i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.2.18, i32 0, i32 0), i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.5.75, i32 0, i32 0), i8 4, i8 1, i8 0, i8 0 }, section "__verbose", align 8
@__func__.wm9705_poll_sample = private unnamed_addr constant [19 x i8] c"wm9705_poll_sample\00", align 1
@__param_pil = internal constant %struct.kernel_param { i8* getelementptr inbounds ([4 x i8], [4 x i8]* @__param_str_pil, i32 0, i32 0), %struct.kernel_param_ops* @param_ops_int, i16 0, i16 -1, %union.anon.3 { i8* bitcast (i32* @pil to i8*) } }, section "__param", align 8
@__UNIQUE_ID_piltype44 = internal constant [17 x i8] c"parmtype=pil:int\00", section ".modinfo", align 1
@__UNIQUE_ID_pil45 = internal constant [52 x i8] c"parm=pil:Set current used for pressure measurement.\00", section ".modinfo", align 1
@__param_pressure = internal constant %struct.kernel_param { i8* getelementptr inbounds ([9 x i8], [9 x i8]* @__param_str_pressure, i32 0, i32 0), %struct.kernel_param_ops* @param_ops_int, i16 0, i16 -1, %union.anon.3 { i8* bitcast (i32* @pressure to i8*) } }, section "__param", align 8
@__UNIQUE_ID_pressuretype53 = internal constant [22 x i8] c"parmtype=pressure:int\00", section ".modinfo", align 1
@__UNIQUE_ID_pressure54 = internal constant [54 x i8] c"parm=pressure:Set threshold for pressure measurement.\00", section ".modinfo", align 1
@__param_delay = internal constant %struct.kernel_param { i8* getelementptr inbounds ([6 x i8], [6 x i8]* @__param_str_delay, i32 0, i32 0), %struct.kernel_param_ops* @param_ops_int, i16 0, i16 -1, %union.anon.3 { i8* bitcast (i32* @delay to i8*) } }, section "__param", align 8
@__UNIQUE_ID_delaytype69 = internal constant [19 x i8] c"parmtype=delay:int\00", section ".modinfo", align 1
@__UNIQUE_ID_delay70 = internal constant [33 x i8] c"parm=delay:Set adc sample delay.\00", section ".modinfo", align 1
@__param_pdd = internal constant %struct.kernel_param { i8* getelementptr inbounds ([4 x i8], [4 x i8]* @__param_str_pdd, i32 0, i32 0), %struct.kernel_param_ops* @param_ops_int, i16 0, i16 -1, %union.anon.3 { i8* bitcast (i32* @pdd to i8*) } }, section "__param", align 8
@__UNIQUE_ID_pddtype83 = internal constant [17 x i8] c"parmtype=pdd:int\00", section ".modinfo", align 1
@__UNIQUE_ID_pdd84 = internal constant [45 x i8] c"parm=pdd:Set pen detect comparator threshold\00", section ".modinfo", align 1
@__param_mask = internal constant %struct.kernel_param { i8* getelementptr inbounds ([5 x i8], [5 x i8]* @__param_str_mask, i32 0, i32 0), %struct.kernel_param_ops* @param_ops_int, i16 0, i16 -1, %union.anon.3 { i8* bitcast (i32* @mask to i8*) } }, section "__param", align 8
@__UNIQUE_ID_masktype100 = internal constant [18 x i8] c"parmtype=mask:int\00", section ".modinfo", align 1
@__UNIQUE_ID_mask101 = internal constant [33 x i8] c"parm=mask:Set adc mask function.\00", section ".modinfo", align 1
@__kcrctab_wm9705_codec = internal constant i64 ptrtoint (i8** @__crc_wm9705_codec to i64), section "___kcrctab_gpl+wm9705_codec", align 8
@__ksymtab_wm9705_codec = internal constant %struct.kernel_symbol { i64 ptrtoint ({ i16, i8*, i32 (%struct.wm97xx.3*, i32, i32*)*, i32 (%struct.wm97xx.3*, %struct.wm97xx_data*)*, i32 (%struct.wm97xx.3*, i32)*, void (%struct.wm97xx.3*)*, void (%struct.wm97xx.3*, i32)*, void (%struct.wm97xx.3*)*, void (%struct.wm97xx.3*)* }* @wm9705_codec to i64), i8* getelementptr inbounds ([13 x i8], [13 x i8]* @__kstrtab_wm9705_codec, i32 0, i32 0) }, section "___ksymtab_gpl+wm9705_codec", align 8
@__UNIQUE_ID_author348 = internal constant [43 x i8] c"author=Liam Girdwood <lrg@slimlogic.co.uk>\00", section ".modinfo", align 1
@__UNIQUE_ID_description349 = internal constant [39 x i8] c"description=WM9705 Touch Screen Driver\00", section ".modinfo", align 1
@__UNIQUE_ID_license350 = internal constant [12 x i8] c"license=GPL\00", section ".modinfo", align 1
@__kstrtab_wm9705_codec = internal constant [13 x i8] c"wm9705_codec\00", section "__ksymtab_strings", align 1
@__crc_wm9705_codec = extern_weak global i8*, align 8
@__param_str_mask = internal constant [5 x i8] c"mask\00", align 1
@__param_str_pdd = internal constant [4 x i8] c"pdd\00", align 1
@__param_str_delay = internal constant [6 x i8] c"delay\00", align 1
@__param_str_pressure = internal constant [9 x i8] c"pressure\00", align 1
@__param_str_pil = internal constant [4 x i8] c"pil\00", align 1
@wm9712_codec = global { i16, i8*, i32 (%struct.wm97xx.343*, i32, i32*)*, i32 (%struct.wm97xx.343*, %struct.wm97xx_data*)*, i32 (%struct.wm97xx.343*, i32)*, void (%struct.wm97xx.343*)*, void (%struct.wm97xx.343*, i32)*, void (%struct.wm97xx.343*)*, void (%struct.wm97xx.343*)* } { i16 19474, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.24, i32 0, i32 0), i32 (%struct.wm97xx.343*, i32, i32*)* @wm9712_poll_sample, i32 (%struct.wm97xx.343*, %struct.wm97xx_data*)* @wm9712_poll_touch, i32 (%struct.wm97xx.343*, i32)* @wm9712_acc_enable, void (%struct.wm97xx.343*)* @wm9712_phy_init, void (%struct.wm97xx.343*, i32)* @wm9712_dig_enable, void (%struct.wm97xx.343*)* @wm9712_dig_restore, void (%struct.wm97xx.343*)* @wm9712_aux_prepare }, align 8
@.str.24 = private unnamed_addr constant [7 x i8] c"wm9712\00", align 1
@rpu = internal global i32 8, align 4
@wm9712_phy_init.descriptor = internal global { i8*, i8*, i8*, i8*, i8, i8, i8, i8 } { i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.1.73, i32 0, i32 0), i8* getelementptr inbounds ([16 x i8], [16 x i8]* @__func__.wm9712_phy_init, i32 0, i32 0), i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.2.38, i32 0, i32 0), i8* getelementptr inbounds ([39 x i8], [39 x i8]* @.str.6.56, i32 0, i32 0), i8 -90, i8 0, i8 0, i8 0 }, section "__verbose", align 8
@five_wire = internal global i32 0, align 4
@wm9712_phy_init.descriptor.7 = internal global { i8*, i8*, i8*, i8*, i8, i8, i8, i8 } { i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.1.73, i32 0, i32 0), i8* getelementptr inbounds ([16 x i8], [16 x i8]* @__func__.wm9712_phy_init, i32 0, i32 0), i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.2.38, i32 0, i32 0), i8* getelementptr inbounds ([34 x i8], [34 x i8]* @.str.8.26, i32 0, i32 0), i8 -84, i8 0, i8 0, i8 0 }, section "__verbose", align 8
@.str.8.26 = private unnamed_addr constant [34 x i8] c"setting 5-wire touchscreen mode.\0A\00", align 1
@pil.27 = internal global i32 0, align 4
@.str.9.28 = private unnamed_addr constant [54 x i8] c"pressure measurement is not supported in 5-wire mode\0A\00", align 1
@wm9712_phy_init.descriptor.10 = internal global { i8*, i8*, i8*, i8*, i8, i8, i8, i8 } { i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.1.73, i32 0, i32 0), i8* getelementptr inbounds ([16 x i8], [16 x i8]* @__func__.wm9712_phy_init, i32 0, i32 0), i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.2.38, i32 0, i32 0), i8* getelementptr inbounds ([48 x i8], [48 x i8]* @.str.11.29, i32 0, i32 0), i8 -71, i8 0, i8 0, i8 0 }, section "__verbose", align 8
@.str.11.29 = private unnamed_addr constant [48 x i8] c"setting pressure measurement current to 400uA.\0A\00", align 1
@wm9712_phy_init.descriptor.12 = internal global { i8*, i8*, i8*, i8*, i8, i8, i8, i8 } { i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.1.73, i32 0, i32 0), i8* getelementptr inbounds ([16 x i8], [16 x i8]* @__func__.wm9712_phy_init, i32 0, i32 0), i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.2.38, i32 0, i32 0), i8* getelementptr inbounds ([48 x i8], [48 x i8]* @.str.13.30, i32 0, i32 0), i8 -68, i8 0, i8 0, i8 0 }, section "__verbose", align 8
@.str.13.30 = private unnamed_addr constant [48 x i8] c"setting pressure measurement current to 200uA.\0A\00", align 1
@pressure.31 = internal global i32 192, align 4
@delay.32 = internal global i32 3, align 4
@wm9712_phy_init.descriptor.14 = internal global { i8*, i8*, i8*, i8*, i8, i8, i8, i8 } { i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.1.73, i32 0, i32 0), i8* getelementptr inbounds ([16 x i8], [16 x i8]* @__func__.wm9712_phy_init, i32 0, i32 0), i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.2.38, i32 0, i32 0), i8* getelementptr inbounds ([30 x i8], [30 x i8]* @.str.15.33, i32 0, i32 0), i8 -62, i8 0, i8 0, i8 0 }, section "__verbose", align 8
@.str.15.33 = private unnamed_addr constant [30 x i8] c"supplied delay out of range.\0A\00", align 1
@wm9712_phy_init.descriptor.16 = internal global { i8*, i8*, i8*, i8*, i8, i8, i8, i8 } { i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.1.73, i32 0, i32 0), i8* getelementptr inbounds ([16 x i8], [16 x i8]* @__func__.wm9712_phy_init, i32 0, i32 0), i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.2.38, i32 0, i32 0), i8* getelementptr inbounds ([40 x i8], [40 x i8]* @.str.17.35, i32 0, i32 0), i8 -56, i8 0, i8 0, i8 0 }, section "__verbose", align 8
@delay_table.34 = internal constant [16 x i32] [i32 21, i32 42, i32 84, i32 167, i32 333, i32 667, i32 1000, i32 1333, i32 2000, i32 2667, i32 3333, i32 4000, i32 4667, i32 5333, i32 6000, i32 0], align 16
@.str.17.35 = private unnamed_addr constant [40 x i8] c"setting adc sample delay to %d u Secs.\0A\00", align 1
@mask.36 = internal global i32 0, align 4
@coord = internal global i32 0, align 4
@__func__.wm9712_phy_init = private unnamed_addr constant [16 x i8] c"wm9712_phy_init\00", align 1
@.str.2.38 = private unnamed_addr constant [35 x i8] c"drivers/input/touchscreen/wm9712.c\00", align 1
@wm9712_poll_coord.descriptor = internal global { i8*, i8*, i8*, i8*, i8, i8, i8, i8 } { i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.1.73, i32 0, i32 0), i8* getelementptr inbounds ([18 x i8], [18 x i8]* @__func__.wm9712_poll_coord, i32 0, i32 0), i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.2.38, i32 0, i32 0), i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.3.41, i32 0, i32 0), i8 96, i8 1, i8 0, i8 0 }, section "__verbose", align 8
@.str.3.41 = private unnamed_addr constant [20 x i8] c"adc sample timeout\0A\00", align 1
@__func__.wm9712_poll_coord = private unnamed_addr constant [18 x i8] c"wm9712_poll_coord\00", align 1
@wm9712_poll_sample.descriptor = internal global { i8*, i8*, i8*, i8*, i8, i8, i8, i8 } { i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.1.73, i32 0, i32 0), i8* getelementptr inbounds ([19 x i8], [19 x i8]* @__func__.wm9712_poll_sample, i32 0, i32 0), i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.2.38, i32 0, i32 0), i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.3.41, i32 0, i32 0), i8 32, i8 1, i8 0, i8 0 }, section "__verbose", align 8
@wm9712_poll_sample.descriptor.4 = internal global { i8*, i8*, i8*, i8*, i8, i8, i8, i8 } { i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.1.73, i32 0, i32 0), i8* getelementptr inbounds ([19 x i8], [19 x i8]* @__func__.wm9712_poll_sample, i32 0, i32 0), i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.2.38, i32 0, i32 0), i8* getelementptr inbounds ([36 x i8], [36 x i8]* @.str.5.42, i32 0, i32 0), i8 44, i8 1, i8 0, i8 0 }, section "__verbose", align 8
@.str.5.42 = private unnamed_addr constant [36 x i8] c"adc wrong sample, wanted %x got %x\0A\00", align 1
@__func__.wm9712_poll_sample = private unnamed_addr constant [19 x i8] c"wm9712_poll_sample\00", align 1
@__param_rpu = internal constant %struct.kernel_param { i8* getelementptr inbounds ([4 x i8], [4 x i8]* @__param_str_rpu, i32 0, i32 0), %struct.kernel_param_ops* @param_ops_int, i16 0, i16 -1, %union.anon.3 { i8* bitcast (i32* @rpu to i8*) } }, section "__param", align 8
@__UNIQUE_ID_rputype43 = internal constant [17 x i8] c"parmtype=rpu:int\00", section ".modinfo", align 1
@__UNIQUE_ID_rpu44 = internal constant [54 x i8] c"parm=rpu:Set internal pull up resitor for pen detect.\00", section ".modinfo", align 1
@__param_pil.44 = internal constant %struct.kernel_param { i8* getelementptr inbounds ([4 x i8], [4 x i8]* @__param_str_pil.51, i32 0, i32 0), %struct.kernel_param_ops* @param_ops_int, i16 0, i16 -1, %union.anon.3 { i8* bitcast (i32* @pil.27 to i8*) } }, section "__param", align 8
@__UNIQUE_ID_piltype57 = internal constant [17 x i8] c"parmtype=pil:int\00", section ".modinfo", align 1
@__UNIQUE_ID_pil58 = internal constant [52 x i8] c"parm=pil:Set current used for pressure measurement.\00", section ".modinfo", align 1
@__param_pressure.45 = internal constant %struct.kernel_param { i8* getelementptr inbounds ([9 x i8], [9 x i8]* @__param_str_pressure.50, i32 0, i32 0), %struct.kernel_param_ops* @param_ops_int, i16 0, i16 -1, %union.anon.3 { i8* bitcast (i32* @pressure.31 to i8*) } }, section "__param", align 8
@__UNIQUE_ID_pressuretype66 = internal constant [22 x i8] c"parmtype=pressure:int\00", section ".modinfo", align 1
@__UNIQUE_ID_pressure67 = internal constant [54 x i8] c"parm=pressure:Set threshold for pressure measurement.\00", section ".modinfo", align 1
@__param_delay.46 = internal constant %struct.kernel_param { i8* getelementptr inbounds ([6 x i8], [6 x i8]* @__param_str_delay.49, i32 0, i32 0), %struct.kernel_param_ops* @param_ops_int, i16 0, i16 -1, %union.anon.3 { i8* bitcast (i32* @delay.32 to i8*) } }, section "__param", align 8
@__UNIQUE_ID_delaytype82 = internal constant [19 x i8] c"parmtype=delay:int\00", section ".modinfo", align 1
@__UNIQUE_ID_delay83 = internal constant [33 x i8] c"parm=delay:Set adc sample delay.\00", section ".modinfo", align 1
@__param_five_wire = internal constant %struct.kernel_param { i8* getelementptr inbounds ([10 x i8], [10 x i8]* @__param_str_five_wire, i32 0, i32 0), %struct.kernel_param_ops* @param_ops_int, i16 0, i16 -1, %union.anon.3 { i8* bitcast (i32* @five_wire to i8*) } }, section "__param", align 8
@__UNIQUE_ID_five_wiretype91 = internal constant [23 x i8] c"parmtype=five_wire:int\00", section ".modinfo", align 1
@__UNIQUE_ID_five_wire92 = internal constant [53 x i8] c"parm=five_wire:Set to '1' to use 5-wire touchscreen.\00", section ".modinfo", align 1
@__param_mask.47 = internal constant %struct.kernel_param { i8* getelementptr inbounds ([5 x i8], [5 x i8]* @__param_str_mask.48, i32 0, i32 0), %struct.kernel_param_ops* @param_ops_int, i16 0, i16 -1, %union.anon.3 { i8* bitcast (i32* @mask.36 to i8*) } }, section "__param", align 8
@__UNIQUE_ID_masktype108 = internal constant [18 x i8] c"parmtype=mask:int\00", section ".modinfo", align 1
@__UNIQUE_ID_mask109 = internal constant [33 x i8] c"parm=mask:Set adc mask function.\00", section ".modinfo", align 1
@__param_coord = internal constant %struct.kernel_param { i8* getelementptr inbounds ([6 x i8], [6 x i8]* @__param_str_coord, i32 0, i32 0), %struct.kernel_param_ops* @param_ops_int, i16 0, i16 -1, %union.anon.3 { i8* bitcast (i32* @coord to i8*) } }, section "__param", align 8
@__UNIQUE_ID_coordtype118 = internal constant [19 x i8] c"parmtype=coord:int\00", section ".modinfo", align 1
@__UNIQUE_ID_coord119 = internal constant [35 x i8] c"parm=coord:Polling coordinate mode\00", section ".modinfo", align 1
@__kcrctab_wm9712_codec = internal constant i64 ptrtoint (i8** @__crc_wm9712_codec to i64), section "___kcrctab_gpl+wm9712_codec", align 8
@__ksymtab_wm9712_codec = internal constant %struct.kernel_symbol { i64 ptrtoint ({ i16, i8*, i32 (%struct.wm97xx.343*, i32, i32*)*, i32 (%struct.wm97xx.343*, %struct.wm97xx_data*)*, i32 (%struct.wm97xx.343*, i32)*, void (%struct.wm97xx.343*)*, void (%struct.wm97xx.343*, i32)*, void (%struct.wm97xx.343*)*, void (%struct.wm97xx.343*)* }* @wm9712_codec to i64), i8* getelementptr inbounds ([13 x i8], [13 x i8]* @__kstrtab_wm9712_codec, i32 0, i32 0) }, section "___ksymtab_gpl+wm9712_codec", align 8
@__UNIQUE_ID_author469 = internal constant [43 x i8] c"author=Liam Girdwood <lrg@slimlogic.co.uk>\00", section ".modinfo", align 1
@__UNIQUE_ID_description470 = internal constant [39 x i8] c"description=WM9712 Touch Screen Driver\00", section ".modinfo", align 1
@__UNIQUE_ID_license471 = internal constant [12 x i8] c"license=GPL\00", section ".modinfo", align 1
@__kstrtab_wm9712_codec = internal constant [13 x i8] c"wm9712_codec\00", section "__ksymtab_strings", align 1
@__crc_wm9712_codec = extern_weak global i8*, align 8
@__param_str_coord = internal constant [6 x i8] c"coord\00", align 1
@__param_str_mask.48 = internal constant [5 x i8] c"mask\00", align 1
@__param_str_five_wire = internal constant [10 x i8] c"five_wire\00", align 1
@__param_str_delay.49 = internal constant [6 x i8] c"delay\00", align 1
@__param_str_pressure.50 = internal constant [9 x i8] c"pressure\00", align 1
@__param_str_pil.51 = internal constant [4 x i8] c"pil\00", align 1
@__param_str_rpu = internal constant [4 x i8] c"rpu\00", align 1
@wm9713_codec = global { i16, i8*, i32 (%struct.wm97xx.683*, i32, i32*)*, i32 (%struct.wm97xx.683*, %struct.wm97xx_data*)*, i32 (%struct.wm97xx.683*, i32)*, void (%struct.wm97xx.683*)*, void (%struct.wm97xx.683*, i32)*, void (%struct.wm97xx.683*)*, void (%struct.wm97xx.683*)* } { i16 19475, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.54, i32 0, i32 0), i32 (%struct.wm97xx.683*, i32, i32*)* @wm9713_poll_sample, i32 (%struct.wm97xx.683*, %struct.wm97xx_data*)* @wm9713_poll_touch, i32 (%struct.wm97xx.683*, i32)* @wm9713_acc_enable, void (%struct.wm97xx.683*)* @wm9713_phy_init, void (%struct.wm97xx.683*, i32)* @wm9713_dig_enable, void (%struct.wm97xx.683*)* @wm9713_dig_restore, void (%struct.wm97xx.683*)* @wm9713_aux_prepare }, align 8
@.str.54 = private unnamed_addr constant [7 x i8] c"wm9713\00", align 1
@rpu.55 = internal global i32 8, align 4
@.str.6.56 = private unnamed_addr constant [39 x i8] c"setting pen detect pull-up to %d Ohms\0A\00", align 1
@five_wire.57 = internal global i32 0, align 4
@.str.7.58 = private unnamed_addr constant [33 x i8] c"setting 5-wire touchscreen mode.\00", align 1
@pil.59 = internal global i32 0, align 4
@.str.8.60 = private unnamed_addr constant [62 x i8] c"Pressure measurement not supported in 5 wire mode, disabling\0A\00", align 1
@.str.9.61 = private unnamed_addr constant [47 x i8] c"setting pressure measurement current to 400uA.\00", align 1
@.str.10.62 = private unnamed_addr constant [47 x i8] c"setting pressure measurement current to 200uA.\00", align 1
@pressure.63 = internal global i32 192, align 4
@delay.64 = internal global i32 4, align 4
@.str.11.65 = private unnamed_addr constant [29 x i8] c"supplied delay out of range.\00", align 1
@delay_table.66 = internal constant [16 x i32] [i32 21, i32 42, i32 84, i32 167, i32 333, i32 667, i32 1000, i32 1333, i32 2000, i32 2667, i32 3333, i32 4000, i32 4667, i32 5333, i32 6000, i32 0], align 16
@.str.12.67 = private unnamed_addr constant [39 x i8] c"setting adc sample delay to %d u Secs.\00", align 1
@mask.68 = internal global i32 0, align 4
@coord.69 = internal global i32 0, align 4
@wm9713_poll_coord.descriptor = internal global { i8*, i8*, i8*, i8*, i8, i8, i8, i8 } { i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.1.73, i32 0, i32 0), i8* getelementptr inbounds ([18 x i8], [18 x i8]* @__func__.wm9713_poll_coord, i32 0, i32 0), i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.2.74, i32 0, i32 0), i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.3.72, i32 0, i32 0), i8 107, i8 1, i8 0, i8 0 }, section "__verbose", align 8
@.str.3.72 = private unnamed_addr constant [19 x i8] c"adc sample timeout\00", align 1
@.str.1.73 = private unnamed_addr constant [10 x i8] c"wm97xx_ts\00", align 1
@__func__.wm9713_poll_coord = private unnamed_addr constant [18 x i8] c"wm9713_poll_coord\00", align 1
@.str.2.74 = private unnamed_addr constant [35 x i8] c"drivers/input/touchscreen/wm9713.c\00", align 1
@wm9713_poll_sample.descriptor = internal global { i8*, i8*, i8*, i8*, i8, i8, i8, i8 } { i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.1.73, i32 0, i32 0), i8* getelementptr inbounds ([19 x i8], [19 x i8]* @__func__.wm9713_poll_sample, i32 0, i32 0), i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.2.74, i32 0, i32 0), i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.3.72, i32 0, i32 0), i8 42, i8 1, i8 0, i8 0 }, section "__verbose", align 8
@wm9713_poll_sample.descriptor.4 = internal global { i8*, i8*, i8*, i8*, i8, i8, i8, i8 } { i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.1.73, i32 0, i32 0), i8* getelementptr inbounds ([19 x i8], [19 x i8]* @__func__.wm9713_poll_sample, i32 0, i32 0), i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.2.74, i32 0, i32 0), i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.5.75, i32 0, i32 0), i8 54, i8 1, i8 0, i8 0 }, section "__verbose", align 8
@.str.5.75 = private unnamed_addr constant [35 x i8] c"adc wrong sample, wanted %x got %x\00", align 1
@__func__.wm9713_poll_sample = private unnamed_addr constant [19 x i8] c"wm9713_poll_sample\00", align 1
@__param_rpu.77 = internal constant %struct.kernel_param { i8* getelementptr inbounds ([4 x i8], [4 x i8]* @__param_str_rpu.104, i32 0, i32 0), %struct.kernel_param_ops* @param_ops_int, i16 0, i16 -1, %union.anon.3 { i8* bitcast (i32* @rpu.55 to i8*) } }, section "__param", align 8
@__UNIQUE_ID_rputype43.78 = internal constant [17 x i8] c"parmtype=rpu:int\00", section ".modinfo", align 1
@__UNIQUE_ID_rpu44.79 = internal constant [54 x i8] c"parm=rpu:Set internal pull up resitor for pen detect.\00", section ".modinfo", align 1
@__param_pil.80 = internal constant %struct.kernel_param { i8* getelementptr inbounds ([4 x i8], [4 x i8]* @__param_str_pil.103, i32 0, i32 0), %struct.kernel_param_ops* @param_ops_int, i16 0, i16 -1, %union.anon.3 { i8* bitcast (i32* @pil.59 to i8*) } }, section "__param", align 8
@__UNIQUE_ID_piltype57.81 = internal constant [17 x i8] c"parmtype=pil:int\00", section ".modinfo", align 1
@__UNIQUE_ID_pil58.82 = internal constant [52 x i8] c"parm=pil:Set current used for pressure measurement.\00", section ".modinfo", align 1
@__param_pressure.83 = internal constant %struct.kernel_param { i8* getelementptr inbounds ([9 x i8], [9 x i8]* @__param_str_pressure.102, i32 0, i32 0), %struct.kernel_param_ops* @param_ops_int, i16 0, i16 -1, %union.anon.3 { i8* bitcast (i32* @pressure.63 to i8*) } }, section "__param", align 8
@__UNIQUE_ID_pressuretype66.84 = internal constant [22 x i8] c"parmtype=pressure:int\00", section ".modinfo", align 1
@__UNIQUE_ID_pressure67.85 = internal constant [54 x i8] c"parm=pressure:Set threshold for pressure measurement.\00", section ".modinfo", align 1
@__param_delay.86 = internal constant %struct.kernel_param { i8* getelementptr inbounds ([6 x i8], [6 x i8]* @__param_str_delay.101, i32 0, i32 0), %struct.kernel_param_ops* @param_ops_int, i16 0, i16 -1, %union.anon.3 { i8* bitcast (i32* @delay.64 to i8*) } }, section "__param", align 8
@__UNIQUE_ID_delaytype82.87 = internal constant [19 x i8] c"parmtype=delay:int\00", section ".modinfo", align 1
@__UNIQUE_ID_delay83.88 = internal constant [33 x i8] c"parm=delay:Set adc sample delay.\00", section ".modinfo", align 1
@__param_five_wire.89 = internal constant %struct.kernel_param { i8* getelementptr inbounds ([10 x i8], [10 x i8]* @__param_str_five_wire.100, i32 0, i32 0), %struct.kernel_param_ops* @param_ops_int, i16 0, i16 -1, %union.anon.3 { i8* bitcast (i32* @five_wire.57 to i8*) } }, section "__param", align 8
@__UNIQUE_ID_five_wiretype91.90 = internal constant [23 x i8] c"parmtype=five_wire:int\00", section ".modinfo", align 1
@__UNIQUE_ID_five_wire92.91 = internal constant [53 x i8] c"parm=five_wire:Set to '1' to use 5-wire touchscreen.\00", section ".modinfo", align 1
@__param_mask.92 = internal constant %struct.kernel_param { i8* getelementptr inbounds ([5 x i8], [5 x i8]* @__param_str_mask.99, i32 0, i32 0), %struct.kernel_param_ops* @param_ops_int, i16 0, i16 -1, %union.anon.3 { i8* bitcast (i32* @mask.68 to i8*) } }, section "__param", align 8
@__UNIQUE_ID_masktype108.93 = internal constant [18 x i8] c"parmtype=mask:int\00", section ".modinfo", align 1
@__UNIQUE_ID_mask109.94 = internal constant [33 x i8] c"parm=mask:Set adc mask function.\00", section ".modinfo", align 1
@__param_coord.95 = internal constant %struct.kernel_param { i8* getelementptr inbounds ([6 x i8], [6 x i8]* @__param_str_coord.98, i32 0, i32 0), %struct.kernel_param_ops* @param_ops_int, i16 0, i16 -1, %union.anon.3 { i8* bitcast (i32* @coord.69 to i8*) } }, section "__param", align 8
@__UNIQUE_ID_coordtype118.96 = internal constant [19 x i8] c"parmtype=coord:int\00", section ".modinfo", align 1
@__UNIQUE_ID_coord119.97 = internal constant [35 x i8] c"parm=coord:Polling coordinate mode\00", section ".modinfo", align 1
@__kcrctab_wm9713_codec = internal constant i64 ptrtoint (i8** @__crc_wm9713_codec to i64), section "___kcrctab_gpl+wm9713_codec", align 8
@__ksymtab_wm9713_codec = internal constant %struct.kernel_symbol { i64 ptrtoint ({ i16, i8*, i32 (%struct.wm97xx.683*, i32, i32*)*, i32 (%struct.wm97xx.683*, %struct.wm97xx_data*)*, i32 (%struct.wm97xx.683*, i32)*, void (%struct.wm97xx.683*)*, void (%struct.wm97xx.683*, i32)*, void (%struct.wm97xx.683*)*, void (%struct.wm97xx.683*)* }* @wm9713_codec to i64), i8* getelementptr inbounds ([13 x i8], [13 x i8]* @__kstrtab_wm9713_codec, i32 0, i32 0) }, section "___ksymtab_gpl+wm9713_codec", align 8
@__UNIQUE_ID_author479 = internal constant [43 x i8] c"author=Liam Girdwood <lrg@slimlogic.co.uk>\00", section ".modinfo", align 1
@__UNIQUE_ID_description480 = internal constant [39 x i8] c"description=WM9713 Touch Screen Driver\00", section ".modinfo", align 1
@__UNIQUE_ID_license481 = internal constant [12 x i8] c"license=GPL\00", section ".modinfo", align 1
@__kstrtab_wm9713_codec = internal constant [13 x i8] c"wm9713_codec\00", section "__ksymtab_strings", align 1
@__crc_wm9713_codec = extern_weak global i8*, align 8
@__param_str_coord.98 = internal constant [6 x i8] c"coord\00", align 1
@__param_str_mask.99 = internal constant [5 x i8] c"mask\00", align 1
@__param_str_five_wire.100 = internal constant [10 x i8] c"five_wire\00", align 1
@__param_str_delay.101 = internal constant [6 x i8] c"delay\00", align 1
@__param_str_pressure.102 = internal constant [9 x i8] c"pressure\00", align 1
@__param_str_pil.103 = internal constant [4 x i8] c"pil\00", align 1
@__param_str_rpu.104 = internal constant [4 x i8] c"rpu\00", align 1

@init_module = alias i32 (), i32 ()* @wm97xx_init
@cleanup_module = alias void (), void ()* @wm97xx_exit

; Function Attrs: nounwind uwtable
define void @wm97xx_unregister_mach_ops(%struct.wm97xx* %wm) #0 {
entry:
  %codec_mutex = getelementptr inbounds %struct.wm97xx, %struct.wm97xx* %wm, i32 0, i32 12
  call void @mutex_lock_nested(%struct.mutex* %codec_mutex, i32 0)
  %mach_ops = getelementptr inbounds %struct.wm97xx, %struct.wm97xx* %wm, i32 0, i32 11
  store %struct.wm97xx_mach_ops* null, %struct.wm97xx_mach_ops** %mach_ops, align 8, !tbaa !2
  %codec_mutex1 = getelementptr inbounds %struct.wm97xx, %struct.wm97xx* %wm, i32 0, i32 12
  call void @mutex_unlock(%struct.mutex* %codec_mutex1)
  ret void
}

declare void @mutex_lock_nested(%struct.mutex*, i32) #1

declare void @mutex_unlock(%struct.mutex*) #1

; Function Attrs: nounwind uwtable
define i32 @wm97xx_register_mach_ops(%struct.wm97xx* %wm, %struct.wm97xx_mach_ops* %mach_ops) #0 {
entry:
  %codec_mutex = getelementptr inbounds %struct.wm97xx, %struct.wm97xx* %wm, i32 0, i32 12
  call void @mutex_lock_nested(%struct.mutex* %codec_mutex, i32 0)
  %mach_ops1 = getelementptr inbounds %struct.wm97xx, %struct.wm97xx* %wm, i32 0, i32 11
  %0 = load %struct.wm97xx_mach_ops*, %struct.wm97xx_mach_ops** %mach_ops1, align 8, !tbaa !2
  %tobool = icmp ne %struct.wm97xx_mach_ops* %0, null
  br i1 %tobool, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %codec_mutex2 = getelementptr inbounds %struct.wm97xx, %struct.wm97xx* %wm, i32 0, i32 12
  call void @mutex_unlock(%struct.mutex* %codec_mutex2)
  br label %return

if.end:                                           ; preds = %entry
  %mach_ops3 = getelementptr inbounds %struct.wm97xx, %struct.wm97xx* %wm, i32 0, i32 11
  store %struct.wm97xx_mach_ops* %mach_ops, %struct.wm97xx_mach_ops** %mach_ops3, align 8, !tbaa !2
  %codec_mutex4 = getelementptr inbounds %struct.wm97xx, %struct.wm97xx* %wm, i32 0, i32 12
  call void @mutex_unlock(%struct.mutex* %codec_mutex4)
  br label %return

return:                                           ; preds = %if.end, %if.then
  %retval.0 = phi i32 [ -22, %if.then ], [ 0, %if.end ]
  ret i32 %retval.0
}

; Function Attrs: nounwind uwtable
define void @wm97xx_set_suspend_mode(%struct.wm97xx* %wm, i16 zeroext %mode) #0 {
entry:
  %suspend_mode = getelementptr inbounds %struct.wm97xx, %struct.wm97xx* %wm, i32 0, i32 23
  store i16 %mode, i16* %suspend_mode, align 8, !tbaa !19
  %input_dev = getelementptr inbounds %struct.wm97xx, %struct.wm97xx* %wm, i32 0, i32 6
  %0 = load %struct.input_dev*, %struct.input_dev** %input_dev, align 8, !tbaa !20
  %dev = getelementptr inbounds %struct.input_dev, %struct.input_dev* %0, i32 0, i32 39
  %conv = zext i16 %mode to i32
  %cmp = icmp ne i32 %conv, 0
  %call = call i32 @device_init_wakeup(%struct.device* %dev, i1 zeroext %cmp)
  ret void
}

declare i32 @device_init_wakeup(%struct.device*, i1 zeroext) #1

; Function Attrs: nounwind uwtable
define void @wm97xx_config_gpio(%struct.wm97xx* %wm, i32 %gpio, i32 %dir, i32 %pol, i32 %sticky, i32 %wake) #0 {
entry:
  %codec_mutex = getelementptr inbounds %struct.wm97xx, %struct.wm97xx* %wm, i32 0, i32 12
  call void @mutex_lock_nested(%struct.mutex* %codec_mutex, i32 0)
  %call = call i32 @wm97xx_reg_read(%struct.wm97xx* %wm, i16 zeroext 78)
  %conv = trunc i32 %call to i16
  %cmp = icmp eq i32 %pol, 0
  br i1 %cmp, label %if.then, label %if.else

if.then:                                          ; preds = %entry
  %conv2 = zext i16 %conv to i32
  %or = or i32 %conv2, %gpio
  br label %if.end

if.else:                                          ; preds = %entry
  %neg = xor i32 %gpio, -1
  %conv4 = zext i16 %conv to i32
  %and = and i32 %conv4, %neg
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then
  %and.sink = phi i32 [ %and, %if.else ], [ %or, %if.then ]
  %conv5 = trunc i32 %and.sink to i16
  call void @wm97xx_reg_write(%struct.wm97xx* %wm, i16 zeroext 78, i16 zeroext %conv5)
  %call6 = call i32 @wm97xx_reg_read(%struct.wm97xx* %wm, i16 zeroext 80)
  %conv7 = trunc i32 %call6 to i16
  %cmp8 = icmp eq i32 %sticky, 0
  br i1 %cmp8, label %if.then10, label %if.else14

if.then10:                                        ; preds = %if.end
  %conv11 = zext i16 %conv7 to i32
  %or12 = or i32 %conv11, %gpio
  br label %if.end19

if.else14:                                        ; preds = %if.end
  %neg15 = xor i32 %gpio, -1
  %conv16 = zext i16 %conv7 to i32
  %and17 = and i32 %conv16, %neg15
  br label %if.end19

if.end19:                                         ; preds = %if.else14, %if.then10
  %and17.sink = phi i32 [ %and17, %if.else14 ], [ %or12, %if.then10 ]
  %conv18 = trunc i32 %and17.sink to i16
  call void @wm97xx_reg_write(%struct.wm97xx* %wm, i16 zeroext 80, i16 zeroext %conv18)
  %call20 = call i32 @wm97xx_reg_read(%struct.wm97xx* %wm, i16 zeroext 82)
  %conv21 = trunc i32 %call20 to i16
  %cmp22 = icmp eq i32 %wake, 0
  br i1 %cmp22, label %if.then24, label %if.else28

if.then24:                                        ; preds = %if.end19
  %conv25 = zext i16 %conv21 to i32
  %or26 = or i32 %conv25, %gpio
  br label %if.end33

if.else28:                                        ; preds = %if.end19
  %neg29 = xor i32 %gpio, -1
  %conv30 = zext i16 %conv21 to i32
  %and31 = and i32 %conv30, %neg29
  br label %if.end33

if.end33:                                         ; preds = %if.else28, %if.then24
  %and31.sink = phi i32 [ %and31, %if.else28 ], [ %or26, %if.then24 ]
  %conv32 = trunc i32 %and31.sink to i16
  call void @wm97xx_reg_write(%struct.wm97xx* %wm, i16 zeroext 82, i16 zeroext %conv32)
  %call34 = call i32 @wm97xx_reg_read(%struct.wm97xx* %wm, i16 zeroext 76)
  %conv35 = trunc i32 %call34 to i16
  %cmp36 = icmp eq i32 %dir, 0
  br i1 %cmp36, label %if.then38, label %if.else42

if.then38:                                        ; preds = %if.end33
  %conv39 = zext i16 %conv35 to i32
  %or40 = or i32 %conv39, %gpio
  br label %if.end47

if.else42:                                        ; preds = %if.end33
  %neg43 = xor i32 %gpio, -1
  %conv44 = zext i16 %conv35 to i32
  %and45 = and i32 %conv44, %neg43
  br label %if.end47

if.end47:                                         ; preds = %if.else42, %if.then38
  %and45.sink = phi i32 [ %and45, %if.else42 ], [ %or40, %if.then38 ]
  %conv46 = trunc i32 %and45.sink to i16
  call void @wm97xx_reg_write(%struct.wm97xx* %wm, i16 zeroext 76, i16 zeroext %conv46)
  %codec_mutex48 = getelementptr inbounds %struct.wm97xx, %struct.wm97xx* %wm, i32 0, i32 12
  call void @mutex_unlock(%struct.mutex* %codec_mutex48)
  ret void
}

; Function Attrs: nounwind uwtable
declare i32 @wm97xx_reg_read(%struct.wm97xx*, i16 zeroext) #0

; Function Attrs: nounwind uwtable
declare void @wm97xx_reg_write(%struct.wm97xx*, i16 zeroext, i16 zeroext) #0

; Function Attrs: nounwind uwtable
define void @wm97xx_set_gpio(%struct.wm97xx* %wm, i32 %gpio, i32 %status) #0 {
entry:
  %codec_mutex = getelementptr inbounds %struct.wm97xx, %struct.wm97xx* %wm, i32 0, i32 12
  call void @mutex_lock_nested(%struct.mutex* %codec_mutex, i32 0)
  %call = call i32 @wm97xx_reg_read(%struct.wm97xx* %wm, i16 zeroext 84)
  %conv = trunc i32 %call to i16
  %cmp = icmp eq i32 %status, 0
  br i1 %cmp, label %if.then, label %if.else

if.then:                                          ; preds = %entry
  %conv2 = zext i16 %conv to i32
  %or = or i32 %conv2, %gpio
  br label %if.end

if.else:                                          ; preds = %entry
  %neg = xor i32 %gpio, -1
  %conv4 = zext i16 %conv to i32
  %and = and i32 %conv4, %neg
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then
  %and.sink = phi i32 [ %and, %if.else ], [ %or, %if.then ]
  %conv5 = trunc i32 %and.sink to i16
  %id = getelementptr inbounds %struct.wm97xx, %struct.wm97xx* %wm, i32 0, i32 1
  %0 = load i16, i16* %id, align 2, !tbaa !21
  %conv6 = zext i16 %0 to i32
  %cmp7 = icmp eq i32 %conv6, 19474
  br i1 %cmp7, label %land.lhs.true, label %if.else15

land.lhs.true:                                    ; preds = %if.end
  %variant = getelementptr inbounds %struct.wm97xx, %struct.wm97xx* %wm, i32 0, i32 22
  %1 = load i16, i16* %variant, align 2, !tbaa !22
  %conv9 = zext i16 %1 to i32
  %cmp10 = icmp ne i32 %conv9, 5651
  br i1 %cmp10, label %if.then12, label %if.else15

if.then12:                                        ; preds = %land.lhs.true
  %conv13 = zext i16 %conv5 to i32
  %shl = shl i32 %conv13, 1
  %conv14 = trunc i32 %shl to i16
  call void @wm97xx_reg_write(%struct.wm97xx* %wm, i16 zeroext 84, i16 zeroext %conv14)
  br label %if.end16

if.else15:                                        ; preds = %land.lhs.true, %if.end
  call void @wm97xx_reg_write(%struct.wm97xx* %wm, i16 zeroext 84, i16 zeroext %conv5)
  br label %if.end16

if.end16:                                         ; preds = %if.else15, %if.then12
  %codec_mutex17 = getelementptr inbounds %struct.wm97xx, %struct.wm97xx* %wm, i32 0, i32 12
  call void @mutex_unlock(%struct.mutex* %codec_mutex17)
  ret void
}

; Function Attrs: nounwind uwtable
define i32 @wm97xx_get_gpio(%struct.wm97xx* %wm, i32 %gpio) #0 {
entry:
  %codec_mutex = getelementptr inbounds %struct.wm97xx, %struct.wm97xx* %wm, i32 0, i32 12
  call void @mutex_lock_nested(%struct.mutex* %codec_mutex, i32 0)
  %call = call i32 @wm97xx_reg_read(%struct.wm97xx* %wm, i16 zeroext 84)
  %conv = trunc i32 %call to i16
  %conv1 = zext i16 %conv to i32
  %and = and i32 %conv1, %gpio
  %tobool = icmp ne i32 %and, 0
  %. = select i1 %tobool, i32 0, i32 1
  %codec_mutex2 = getelementptr inbounds %struct.wm97xx, %struct.wm97xx* %wm, i32 0, i32 12
  call void @mutex_unlock(%struct.mutex* %codec_mutex2)
  ret i32 %.
}

; Function Attrs: nounwind uwtable
define i32 @wm97xx_read_aux_adc(%struct.wm97xx* %wm, i16 zeroext %adcsel) #0 {
entry:
  %auxval = alloca i32, align 4
  %codec_mutex = getelementptr inbounds %struct.wm97xx, %struct.wm97xx* %wm, i32 0, i32 12
  call void @mutex_lock_nested(%struct.mutex* %codec_mutex, i32 0)
  %id = getelementptr inbounds %struct.wm97xx, %struct.wm97xx* %wm, i32 0, i32 1
  %0 = load i16, i16* %id, align 2, !tbaa !21
  %conv = zext i16 %0 to i32
  %cmp = icmp eq i32 %conv, 19475
  br i1 %cmp, label %land.lhs.true, label %if.end

land.lhs.true:                                    ; preds = %entry
  %call = call i32 @wm97xx_reg_read(%struct.wm97xx* %wm, i16 zeroext 60)
  %conv2 = trunc i32 %call to i16
  %conv3 = zext i16 %conv2 to i32
  %and = and i32 %conv3, 32768
  %tobool = icmp ne i32 %and, 0
  br i1 %tobool, label %if.then, label %if.end

if.then:                                          ; preds = %land.lhs.true
  %conv4 = zext i16 %conv2 to i32
  %and5 = and i32 %conv4, 32767
  %conv6 = trunc i32 %and5 to i16
  call void @wm97xx_reg_write(%struct.wm97xx* %wm, i16 zeroext 60, i16 zeroext %conv6)
  br label %if.end

if.end:                                           ; preds = %if.then, %land.lhs.true, %entry
  %power.0 = phi i16 [ %conv2, %if.then ], [ %conv2, %land.lhs.true ], [ 0, %entry ]
  %power_adc.0 = phi i32 [ 1, %if.then ], [ 0, %land.lhs.true ], [ 0, %entry ]
  %codec = getelementptr inbounds %struct.wm97xx, %struct.wm97xx* %wm, i32 0, i32 5
  %1 = load %struct.wm97xx_codec_drv*, %struct.wm97xx_codec_drv** %codec, align 8, !tbaa !23
  %aux_prepare = getelementptr inbounds %struct.wm97xx_codec_drv, %struct.wm97xx_codec_drv* %1, i32 0, i32 8
  %2 = load void (%struct.wm97xx*)*, void (%struct.wm97xx*)** %aux_prepare, align 8, !tbaa !24
  call void %2(%struct.wm97xx* %wm)
  %pen_probably_down = getelementptr inbounds %struct.wm97xx, %struct.wm97xx* %wm, i32 0, i32 21
  %bf.load = load i8, i8* %pen_probably_down, align 4
  %bf.clear = and i8 %bf.load, -5
  %bf.set = or i8 %bf.clear, 4
  store i8 %bf.set, i8* %pen_probably_down, align 4
  br label %while.cond

while.cond:                                       ; preds = %while.body, %if.end
  %rc.0 = phi i32 [ 0, %if.end ], [ %call13, %while.body ]
  %timeout.0 = phi i32 [ 0, %if.end ], [ %timeout.1, %while.body ]
  %cmp7 = icmp ne i32 %rc.0, 2
  %inc = add nsw i32 %timeout.0, 1
  %cmp9 = icmp slt i32 %timeout.0, 5
  %timeout.1 = select i1 %cmp7, i32 %inc, i32 %timeout.0
  %3 = select i1 %cmp7, i1 %cmp9, i1 false
  br i1 %3, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %codec11 = getelementptr inbounds %struct.wm97xx, %struct.wm97xx* %wm, i32 0, i32 5
  %4 = load %struct.wm97xx_codec_drv*, %struct.wm97xx_codec_drv** %codec11, align 8, !tbaa !23
  %poll_sample = getelementptr inbounds %struct.wm97xx_codec_drv, %struct.wm97xx_codec_drv* %4, i32 0, i32 2
  %5 = load i32 (%struct.wm97xx*, i32, i32*)*, i32 (%struct.wm97xx*, i32, i32*)** %poll_sample, align 8, !tbaa !26
  %conv12 = zext i16 %adcsel to i32
  %call13 = call i32 %5(%struct.wm97xx* %wm, i32 %conv12, i32* %auxval)
  br label %while.cond

while.end:                                        ; preds = %while.cond
  %tobool14 = icmp ne i32 %power_adc.0, 0
  br i1 %tobool14, label %if.then15, label %if.end18

if.then15:                                        ; preds = %while.end
  %conv16 = zext i16 %power.0 to i32
  %or = or i32 %conv16, 32768
  %conv17 = trunc i32 %or to i16
  call void @wm97xx_reg_write(%struct.wm97xx* %wm, i16 zeroext 60, i16 zeroext %conv17)
  br label %if.end18

if.end18:                                         ; preds = %if.then15, %while.end
  %codec19 = getelementptr inbounds %struct.wm97xx, %struct.wm97xx* %wm, i32 0, i32 5
  %6 = load %struct.wm97xx_codec_drv*, %struct.wm97xx_codec_drv** %codec19, align 8, !tbaa !23
  %dig_restore = getelementptr inbounds %struct.wm97xx_codec_drv, %struct.wm97xx_codec_drv* %6, i32 0, i32 7
  %7 = load void (%struct.wm97xx*)*, void (%struct.wm97xx*)** %dig_restore, align 8, !tbaa !27
  call void %7(%struct.wm97xx* %wm)
  %pen_probably_down20 = getelementptr inbounds %struct.wm97xx, %struct.wm97xx* %wm, i32 0, i32 21
  %bf.load21 = load i8, i8* %pen_probably_down20, align 4
  %bf.clear22 = and i8 %bf.load21, -5
  store i8 %bf.clear22, i8* %pen_probably_down20, align 4
  %cmp23 = icmp sge i32 %timeout.1, 5
  br i1 %cmp23, label %if.then25, label %if.end29

if.then25:                                        ; preds = %if.end18
  %8 = call i32 (%struct.device*, i8*, ...) @dev_err(%struct.device* null, i8* null)
  %codec28 = getelementptr inbounds %struct.wm97xx, %struct.wm97xx* %wm, i32 0, i32 5
  %9 = load %struct.wm97xx_codec_drv*, %struct.wm97xx_codec_drv** %codec28, align 8, !tbaa !23
  %dig_enable = getelementptr inbounds %struct.wm97xx_codec_drv, %struct.wm97xx_codec_drv* %9, i32 0, i32 6
  %10 = load void (%struct.wm97xx*, i32)*, void (%struct.wm97xx*, i32)** %dig_enable, align 8, !tbaa !28
  call void %10(%struct.wm97xx* %wm, i32 0)
  br label %if.end29

if.end29:                                         ; preds = %if.then25, %if.end18
  %codec_mutex30 = getelementptr inbounds %struct.wm97xx, %struct.wm97xx* %wm, i32 0, i32 12
  call void @mutex_unlock(%struct.mutex* %codec_mutex30)
  %cmp31 = icmp eq i32 %rc.0, 2
  %11 = load i32, i32* %auxval, align 4
  %and33 = and i32 %11, 4095
  %cond = select i1 %cmp31, i32 %and33, i32 -16
  ret i32 %cond
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64, i8* nocapture) #2

declare i32 @dev_err(%struct.device*, i8*, ...) #1

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64, i8* nocapture) #2

; Function Attrs: nounwind uwtable
define internal i32 @wm97xx_init() #3 section ".init.text" {
entry:
  %call = call i32 @driver_register(%struct.device_driver* @wm97xx_driver)
  ret i32 %call
}

declare i32 @driver_register(%struct.device_driver*) #1

; Function Attrs: nounwind uwtable
define internal i32 @wm97xx_probe(%struct.device* %dev) #0 {
entry:
  %platform_data = getelementptr inbounds %struct.device, %struct.device* %dev, i32 0, i32 8
  %0 = load i8*, i8** %platform_data, align 8, !tbaa !29
  %1 = bitcast i8* %0 to %struct.wm97xx_pdata*
  %call = call i8* @kzalloc(i64 608, i32 208)
  %2 = bitcast i8* %call to %struct.wm97xx*
  %tobool = icmp ne %struct.wm97xx* %2, null
  br i1 %tobool, label %do.body, label %cleanup

do.body:                                          ; preds = %entry
  %codec_mutex = getelementptr inbounds %struct.wm97xx, %struct.wm97xx* %2, i32 0, i32 12
  call void @__mutex_init(%struct.mutex* %codec_mutex, i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.2, i32 0, i32 0), %struct.lock_class_key* @wm97xx_probe.__key)
  %dev1 = getelementptr inbounds %struct.wm97xx, %struct.wm97xx* %2, i32 0, i32 8
  store %struct.device* %dev, %struct.device** %dev1, align 8, !tbaa !42
  %3 = bitcast %struct.wm97xx* %2 to i8*
  %call2 = call i32 @dev_set_drvdata(%struct.device* %dev, i8* %3)
  %4 = bitcast %struct.device* %dev to i8*
  %add.ptr = getelementptr inbounds i8, i8* %4, i64 -1000
  %5 = bitcast i8* %add.ptr to %struct.snd_ac97*
  %ac97 = getelementptr inbounds %struct.wm97xx, %struct.wm97xx* %2, i32 0, i32 7
  store %struct.snd_ac97* %5, %struct.snd_ac97** %ac97, align 8, !tbaa !43
  %call3 = call i32 @wm97xx_reg_read(%struct.wm97xx* %2, i16 zeroext 124)
  %cmp = icmp ne i32 %call3, 22349
  br i1 %cmp, label %if.then4, label %if.end6

if.then4:                                         ; preds = %do.body
  %6 = call i32 (%struct.device*, i8*, ...) @dev_err(%struct.device* null, i8* null)
  br label %alloc_err

if.end6:                                          ; preds = %do.body
  %call7 = call i32 @wm97xx_reg_read(%struct.wm97xx* %2, i16 zeroext 126)
  %conv = trunc i32 %call7 to i16
  %id8 = getelementptr inbounds %struct.wm97xx, %struct.wm97xx* %2, i32 0, i32 1
  store i16 %conv, i16* %id8, align 2, !tbaa !21
  %variant = getelementptr inbounds %struct.wm97xx, %struct.wm97xx* %2, i32 0, i32 22
  store i16 0, i16* %variant, align 2, !tbaa !22
  %7 = call i32 (%struct.device*, i8*, ...) @_dev_info(%struct.device* null, i8* null)
  %id13 = getelementptr inbounds %struct.wm97xx, %struct.wm97xx* %2, i32 0, i32 1
  %8 = load i16, i16* %id13, align 2, !tbaa !21
  %conv14 = zext i16 %8 to i32
  %and15 = and i32 %conv14, 255
  %Pivot4 = icmp slt i32 %and15, 18
  br i1 %Pivot4, label %LeafBlock, label %NodeBlock

NodeBlock:                                        ; preds = %if.end6
  %Pivot = icmp slt i32 %and15, 19
  br i1 %Pivot, label %sw.epilog, label %LeafBlock1

LeafBlock1:                                       ; preds = %NodeBlock
  %SwitchLeaf2 = icmp eq i32 %and15, 19
  br i1 %SwitchLeaf2, label %sw.epilog, label %sw.default

LeafBlock:                                        ; preds = %if.end6
  %SwitchLeaf = icmp eq i32 %and15, 5
  br i1 %SwitchLeaf, label %sw.epilog, label %sw.default

sw.default:                                       ; preds = %LeafBlock, %LeafBlock1
  %9 = call i32 (%struct.device*, i8*, ...) @dev_err(%struct.device* null, i8* null)
  br label %alloc_err

sw.epilog:                                        ; preds = %LeafBlock, %LeafBlock1, %NodeBlock
  %wm9713_codec.sink = phi %struct.wm97xx_codec_drv* [ bitcast ({ i16, i8*, i32 (%struct.wm97xx.343*, i32, i32*)*, i32 (%struct.wm97xx.343*, %struct.wm97xx_data*)*, i32 (%struct.wm97xx.343*, i32)*, void (%struct.wm97xx.343*)*, void (%struct.wm97xx.343*, i32)*, void (%struct.wm97xx.343*)*, void (%struct.wm97xx.343*)* }* @wm9712_codec to %struct.wm97xx_codec_drv*), %NodeBlock ], [ bitcast ({ i16, i8*, i32 (%struct.wm97xx.683*, i32, i32*)*, i32 (%struct.wm97xx.683*, %struct.wm97xx_data*)*, i32 (%struct.wm97xx.683*, i32)*, void (%struct.wm97xx.683*)*, void (%struct.wm97xx.683*, i32)*, void (%struct.wm97xx.683*)*, void (%struct.wm97xx.683*)* }* @wm9713_codec to %struct.wm97xx_codec_drv*), %LeafBlock1 ], [ bitcast ({ i16, i8*, i32 (%struct.wm97xx.3*, i32, i32*)*, i32 (%struct.wm97xx.3*, %struct.wm97xx_data*)*, i32 (%struct.wm97xx.3*, i32)*, void (%struct.wm97xx.3*)*, void (%struct.wm97xx.3*, i32)*, void (%struct.wm97xx.3*)*, void (%struct.wm97xx.3*)* }* @wm9705_codec to %struct.wm97xx_codec_drv*), %LeafBlock ]
  %codec19 = getelementptr inbounds %struct.wm97xx, %struct.wm97xx* %2, i32 0, i32 5
  store %struct.wm97xx_codec_drv* %wm9713_codec.sink, %struct.wm97xx_codec_drv** %codec19, align 8, !tbaa !23
  %codec25 = getelementptr inbounds %struct.wm97xx, %struct.wm97xx* %2, i32 0, i32 5
  %10 = load %struct.wm97xx_codec_drv*, %struct.wm97xx_codec_drv** %codec25, align 8, !tbaa !23
  %phy_init = getelementptr inbounds %struct.wm97xx_codec_drv, %struct.wm97xx_codec_drv* %10, i32 0, i32 5
  %11 = load void (%struct.wm97xx*)*, void (%struct.wm97xx*)** %phy_init, align 8, !tbaa !44
  call void %11(%struct.wm97xx* %2)
  %call26 = call i32 @wm97xx_reg_read(%struct.wm97xx* %2, i16 zeroext 76)
  %conv27 = trunc i32 %call26 to i16
  %gpio = getelementptr inbounds %struct.wm97xx, %struct.wm97xx* %2, i32 0, i32 2
  %arrayidx = getelementptr inbounds [6 x i16], [6 x i16]* %gpio, i64 0, i64 0
  store i16 %conv27, i16* %arrayidx, align 8, !tbaa !45
  %call28 = call i32 @wm97xx_reg_read(%struct.wm97xx* %2, i16 zeroext 78)
  %conv29 = trunc i32 %call28 to i16
  %gpio30 = getelementptr inbounds %struct.wm97xx, %struct.wm97xx* %2, i32 0, i32 2
  %arrayidx31 = getelementptr inbounds [6 x i16], [6 x i16]* %gpio30, i64 0, i64 1
  store i16 %conv29, i16* %arrayidx31, align 2, !tbaa !45
  %call32 = call i32 @wm97xx_reg_read(%struct.wm97xx* %2, i16 zeroext 80)
  %conv33 = trunc i32 %call32 to i16
  %gpio34 = getelementptr inbounds %struct.wm97xx, %struct.wm97xx* %2, i32 0, i32 2
  %arrayidx35 = getelementptr inbounds [6 x i16], [6 x i16]* %gpio34, i64 0, i64 2
  store i16 %conv33, i16* %arrayidx35, align 4, !tbaa !45
  %call36 = call i32 @wm97xx_reg_read(%struct.wm97xx* %2, i16 zeroext 82)
  %conv37 = trunc i32 %call36 to i16
  %gpio38 = getelementptr inbounds %struct.wm97xx, %struct.wm97xx* %2, i32 0, i32 2
  %arrayidx39 = getelementptr inbounds [6 x i16], [6 x i16]* %gpio38, i64 0, i64 3
  store i16 %conv37, i16* %arrayidx39, align 2, !tbaa !45
  %call40 = call i32 @wm97xx_reg_read(%struct.wm97xx* %2, i16 zeroext 84)
  %conv41 = trunc i32 %call40 to i16
  %gpio42 = getelementptr inbounds %struct.wm97xx, %struct.wm97xx* %2, i32 0, i32 2
  %arrayidx43 = getelementptr inbounds [6 x i16], [6 x i16]* %gpio42, i64 0, i64 4
  store i16 %conv41, i16* %arrayidx43, align 8, !tbaa !45
  %call44 = call i32 @wm97xx_reg_read(%struct.wm97xx* %2, i16 zeroext 86)
  %conv45 = trunc i32 %call44 to i16
  %gpio46 = getelementptr inbounds %struct.wm97xx, %struct.wm97xx* %2, i32 0, i32 2
  %arrayidx47 = getelementptr inbounds [6 x i16], [6 x i16]* %gpio46, i64 0, i64 5
  store i16 %conv45, i16* %arrayidx47, align 2, !tbaa !45
  %call48 = call %struct.input_dev* @input_allocate_device()
  %input_dev = getelementptr inbounds %struct.wm97xx, %struct.wm97xx* %2, i32 0, i32 6
  store %struct.input_dev* %call48, %struct.input_dev** %input_dev, align 8, !tbaa !20
  %input_dev49 = getelementptr inbounds %struct.wm97xx, %struct.wm97xx* %2, i32 0, i32 6
  %12 = load %struct.input_dev*, %struct.input_dev** %input_dev49, align 8, !tbaa !20
  %cmp50 = icmp eq %struct.input_dev* %12, null
  br i1 %cmp50, label %alloc_err, label %if.end53

if.end53:                                         ; preds = %sw.epilog
  %input_dev54 = getelementptr inbounds %struct.wm97xx, %struct.wm97xx* %2, i32 0, i32 6
  %13 = load %struct.input_dev*, %struct.input_dev** %input_dev54, align 8, !tbaa !20
  %name = getelementptr inbounds %struct.input_dev, %struct.input_dev* %13, i32 0, i32 0
  store i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.6, i32 0, i32 0), i8** %name, align 8, !tbaa !46
  %input_dev55 = getelementptr inbounds %struct.wm97xx, %struct.wm97xx* %2, i32 0, i32 6
  %14 = load %struct.input_dev*, %struct.input_dev** %input_dev55, align 8, !tbaa !20
  %phys = getelementptr inbounds %struct.input_dev, %struct.input_dev* %14, i32 0, i32 1
  store i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.7, i32 0, i32 0), i8** %phys, align 8, !tbaa !49
  %input_dev56 = getelementptr inbounds %struct.wm97xx, %struct.wm97xx* %2, i32 0, i32 6
  %15 = load %struct.input_dev*, %struct.input_dev** %input_dev56, align 8, !tbaa !20
  %open = getelementptr inbounds %struct.input_dev, %struct.input_dev* %15, i32 0, i32 30
  store i32 (%struct.input_dev*)* @wm97xx_ts_input_open, i32 (%struct.input_dev*)** %open, align 8, !tbaa !50
  %input_dev57 = getelementptr inbounds %struct.wm97xx, %struct.wm97xx* %2, i32 0, i32 6
  %16 = load %struct.input_dev*, %struct.input_dev** %input_dev57, align 8, !tbaa !20
  %close = getelementptr inbounds %struct.input_dev, %struct.input_dev* %16, i32 0, i32 31
  store void (%struct.input_dev*)* @wm97xx_ts_input_close, void (%struct.input_dev*)** %close, align 8, !tbaa !51
  %input_dev58 = getelementptr inbounds %struct.wm97xx, %struct.wm97xx* %2, i32 0, i32 6
  %17 = load %struct.input_dev*, %struct.input_dev** %input_dev58, align 8, !tbaa !20
  %evbit = getelementptr inbounds %struct.input_dev, %struct.input_dev* %17, i32 0, i32 5
  %arraydecay = getelementptr inbounds [1 x i64], [1 x i64]* %evbit, i32 0, i32 0
  call void @__set_bit(i32 3, i64* %arraydecay)
  %input_dev59 = getelementptr inbounds %struct.wm97xx, %struct.wm97xx* %2, i32 0, i32 6
  %18 = load %struct.input_dev*, %struct.input_dev** %input_dev59, align 8, !tbaa !20
  %evbit60 = getelementptr inbounds %struct.input_dev, %struct.input_dev* %18, i32 0, i32 5
  %arraydecay61 = getelementptr inbounds [1 x i64], [1 x i64]* %evbit60, i32 0, i32 0
  call void @__set_bit(i32 1, i64* %arraydecay61)
  %input_dev62 = getelementptr inbounds %struct.wm97xx, %struct.wm97xx* %2, i32 0, i32 6
  %19 = load %struct.input_dev*, %struct.input_dev** %input_dev62, align 8, !tbaa !20
  %keybit = getelementptr inbounds %struct.input_dev, %struct.input_dev* %19, i32 0, i32 6
  %arraydecay63 = getelementptr inbounds [12 x i64], [12 x i64]* %keybit, i32 0, i32 0
  call void @__set_bit(i32 330, i64* %arraydecay63)
  %input_dev64 = getelementptr inbounds %struct.wm97xx, %struct.wm97xx* %2, i32 0, i32 6
  %20 = load %struct.input_dev*, %struct.input_dev** %input_dev64, align 8, !tbaa !20
  %21 = load i32, i32* getelementptr inbounds ([3 x i32], [3 x i32]* @abs_x, i64 0, i64 0), align 4, !tbaa !52
  %22 = load i32, i32* getelementptr inbounds ([3 x i32], [3 x i32]* @abs_x, i64 0, i64 1), align 4, !tbaa !52
  %23 = load i32, i32* getelementptr inbounds ([3 x i32], [3 x i32]* @abs_x, i64 0, i64 2), align 4, !tbaa !52
  call void @input_set_abs_params(%struct.input_dev* %20, i32 0, i32 %21, i32 %22, i32 %23, i32 0)
  %input_dev65 = getelementptr inbounds %struct.wm97xx, %struct.wm97xx* %2, i32 0, i32 6
  %24 = load %struct.input_dev*, %struct.input_dev** %input_dev65, align 8, !tbaa !20
  %25 = load i32, i32* getelementptr inbounds ([3 x i32], [3 x i32]* @abs_y, i64 0, i64 0), align 4, !tbaa !52
  %26 = load i32, i32* getelementptr inbounds ([3 x i32], [3 x i32]* @abs_y, i64 0, i64 1), align 4, !tbaa !52
  %27 = load i32, i32* getelementptr inbounds ([3 x i32], [3 x i32]* @abs_y, i64 0, i64 2), align 4, !tbaa !52
  call void @input_set_abs_params(%struct.input_dev* %24, i32 1, i32 %25, i32 %26, i32 %27, i32 0)
  %input_dev66 = getelementptr inbounds %struct.wm97xx, %struct.wm97xx* %2, i32 0, i32 6
  %28 = load %struct.input_dev*, %struct.input_dev** %input_dev66, align 8, !tbaa !20
  %29 = load i32, i32* getelementptr inbounds ([3 x i32], [3 x i32]* @abs_p, i64 0, i64 0), align 4, !tbaa !52
  %30 = load i32, i32* getelementptr inbounds ([3 x i32], [3 x i32]* @abs_p, i64 0, i64 1), align 4, !tbaa !52
  %31 = load i32, i32* getelementptr inbounds ([3 x i32], [3 x i32]* @abs_p, i64 0, i64 2), align 4, !tbaa !52
  call void @input_set_abs_params(%struct.input_dev* %28, i32 24, i32 %29, i32 %30, i32 %31, i32 0)
  %input_dev67 = getelementptr inbounds %struct.wm97xx, %struct.wm97xx* %2, i32 0, i32 6
  %32 = load %struct.input_dev*, %struct.input_dev** %input_dev67, align 8, !tbaa !20
  %33 = bitcast %struct.wm97xx* %2 to i8*
  call void @input_set_drvdata(%struct.input_dev* %32, i8* %33)
  %input_dev68 = getelementptr inbounds %struct.wm97xx, %struct.wm97xx* %2, i32 0, i32 6
  %34 = load %struct.input_dev*, %struct.input_dev** %input_dev68, align 8, !tbaa !20
  %dev69 = getelementptr inbounds %struct.input_dev, %struct.input_dev* %34, i32 0, i32 39
  %parent = getelementptr inbounds %struct.device, %struct.device* %dev69, i32 0, i32 0
  store %struct.device* %dev, %struct.device** %parent, align 8, !tbaa !53
  %input_dev70 = getelementptr inbounds %struct.wm97xx, %struct.wm97xx* %2, i32 0, i32 6
  %35 = load %struct.input_dev*, %struct.input_dev** %input_dev70, align 8, !tbaa !20
  %call71 = call i32 @input_register_device(%struct.input_dev* %35)
  %cmp72 = icmp slt i32 %call71, 0
  br i1 %cmp72, label %dev_alloc_err, label %if.end75

if.end75:                                         ; preds = %if.end53
  %call76 = call %struct.platform_device* @platform_device_alloc(i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.8, i32 0, i32 0), i32 -1)
  %battery_dev = getelementptr inbounds %struct.wm97xx, %struct.wm97xx* %2, i32 0, i32 9
  store %struct.platform_device* %call76, %struct.platform_device** %battery_dev, align 8, !tbaa !54
  %battery_dev77 = getelementptr inbounds %struct.wm97xx, %struct.wm97xx* %2, i32 0, i32 9
  %36 = load %struct.platform_device*, %struct.platform_device** %battery_dev77, align 8, !tbaa !54
  %tobool78 = icmp ne %struct.platform_device* %36, null
  br i1 %tobool78, label %if.end80, label %batt_err

if.end80:                                         ; preds = %if.end75
  %battery_dev81 = getelementptr inbounds %struct.wm97xx, %struct.wm97xx* %2, i32 0, i32 9
  %37 = load %struct.platform_device*, %struct.platform_device** %battery_dev81, align 8, !tbaa !54
  %38 = bitcast %struct.wm97xx* %2 to i8*
  call void @platform_set_drvdata(%struct.platform_device* %37, i8* %38)
  %battery_dev82 = getelementptr inbounds %struct.wm97xx, %struct.wm97xx* %2, i32 0, i32 9
  %39 = load %struct.platform_device*, %struct.platform_device** %battery_dev82, align 8, !tbaa !54
  %dev83 = getelementptr inbounds %struct.platform_device, %struct.platform_device* %39, i32 0, i32 3
  %parent84 = getelementptr inbounds %struct.device, %struct.device* %dev83, i32 0, i32 0
  store %struct.device* %dev, %struct.device** %parent84, align 8, !tbaa !55
  %40 = bitcast %struct.wm97xx_pdata* %1 to i8*
  %battery_dev85 = getelementptr inbounds %struct.wm97xx, %struct.wm97xx* %2, i32 0, i32 9
  %41 = load %struct.platform_device*, %struct.platform_device** %battery_dev85, align 8, !tbaa !54
  %dev86 = getelementptr inbounds %struct.platform_device, %struct.platform_device* %41, i32 0, i32 3
  %platform_data87 = getelementptr inbounds %struct.device, %struct.device* %dev86, i32 0, i32 8
  store i8* %40, i8** %platform_data87, align 8, !tbaa !58
  %battery_dev88 = getelementptr inbounds %struct.wm97xx, %struct.wm97xx* %2, i32 0, i32 9
  %42 = load %struct.platform_device*, %struct.platform_device** %battery_dev88, align 8, !tbaa !54
  %call89 = call i32 @platform_device_add(%struct.platform_device* %42)
  %cmp90 = icmp slt i32 %call89, 0
  br i1 %cmp90, label %batt_reg_err, label %if.end93

if.end93:                                         ; preds = %if.end80
  %call94 = call %struct.platform_device* @platform_device_alloc(i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.9, i32 0, i32 0), i32 -1)
  %touch_dev = getelementptr inbounds %struct.wm97xx, %struct.wm97xx* %2, i32 0, i32 10
  store %struct.platform_device* %call94, %struct.platform_device** %touch_dev, align 8, !tbaa !59
  %touch_dev95 = getelementptr inbounds %struct.wm97xx, %struct.wm97xx* %2, i32 0, i32 10
  %43 = load %struct.platform_device*, %struct.platform_device** %touch_dev95, align 8, !tbaa !59
  %tobool96 = icmp ne %struct.platform_device* %43, null
  br i1 %tobool96, label %if.end98, label %touch_err

if.end98:                                         ; preds = %if.end93
  %touch_dev99 = getelementptr inbounds %struct.wm97xx, %struct.wm97xx* %2, i32 0, i32 10
  %44 = load %struct.platform_device*, %struct.platform_device** %touch_dev99, align 8, !tbaa !59
  %45 = bitcast %struct.wm97xx* %2 to i8*
  call void @platform_set_drvdata(%struct.platform_device* %44, i8* %45)
  %touch_dev100 = getelementptr inbounds %struct.wm97xx, %struct.wm97xx* %2, i32 0, i32 10
  %46 = load %struct.platform_device*, %struct.platform_device** %touch_dev100, align 8, !tbaa !59
  %dev101 = getelementptr inbounds %struct.platform_device, %struct.platform_device* %46, i32 0, i32 3
  %parent102 = getelementptr inbounds %struct.device, %struct.device* %dev101, i32 0, i32 0
  store %struct.device* %dev, %struct.device** %parent102, align 8, !tbaa !55
  %47 = bitcast %struct.wm97xx_pdata* %1 to i8*
  %touch_dev103 = getelementptr inbounds %struct.wm97xx, %struct.wm97xx* %2, i32 0, i32 10
  %48 = load %struct.platform_device*, %struct.platform_device** %touch_dev103, align 8, !tbaa !59
  %dev104 = getelementptr inbounds %struct.platform_device, %struct.platform_device* %48, i32 0, i32 3
  %platform_data105 = getelementptr inbounds %struct.device, %struct.device* %dev104, i32 0, i32 8
  store i8* %47, i8** %platform_data105, align 8, !tbaa !58
  %touch_dev106 = getelementptr inbounds %struct.wm97xx, %struct.wm97xx* %2, i32 0, i32 10
  %49 = load %struct.platform_device*, %struct.platform_device** %touch_dev106, align 8, !tbaa !59
  %call107 = call i32 @platform_device_add(%struct.platform_device* %49)
  %cmp108 = icmp slt i32 %call107, 0
  br i1 %cmp108, label %touch_reg_err, label %cleanup

touch_reg_err:                                    ; preds = %if.end98
  %touch_dev112 = getelementptr inbounds %struct.wm97xx, %struct.wm97xx* %2, i32 0, i32 10
  %50 = load %struct.platform_device*, %struct.platform_device** %touch_dev112, align 8, !tbaa !59
  call void @platform_device_put(%struct.platform_device* %50)
  br label %touch_err

touch_err:                                        ; preds = %touch_reg_err, %if.end93
  %ret.0 = phi i32 [ %call107, %touch_reg_err ], [ -12, %if.end93 ]
  %battery_dev113 = getelementptr inbounds %struct.wm97xx, %struct.wm97xx* %2, i32 0, i32 9
  %51 = load %struct.platform_device*, %struct.platform_device** %battery_dev113, align 8, !tbaa !54
  call void @platform_device_del(%struct.platform_device* %51)
  br label %batt_reg_err

batt_reg_err:                                     ; preds = %touch_err, %if.end80
  %ret.1 = phi i32 [ %ret.0, %touch_err ], [ %call89, %if.end80 ]
  %battery_dev114 = getelementptr inbounds %struct.wm97xx, %struct.wm97xx* %2, i32 0, i32 9
  %52 = load %struct.platform_device*, %struct.platform_device** %battery_dev114, align 8, !tbaa !54
  call void @platform_device_put(%struct.platform_device* %52)
  br label %batt_err

batt_err:                                         ; preds = %batt_reg_err, %if.end75
  %ret.2 = phi i32 [ %ret.1, %batt_reg_err ], [ -12, %if.end75 ]
  %input_dev115 = getelementptr inbounds %struct.wm97xx, %struct.wm97xx* %2, i32 0, i32 6
  %53 = load %struct.input_dev*, %struct.input_dev** %input_dev115, align 8, !tbaa !20
  call void @input_unregister_device(%struct.input_dev* %53)
  %input_dev116 = getelementptr inbounds %struct.wm97xx, %struct.wm97xx* %2, i32 0, i32 6
  store %struct.input_dev* null, %struct.input_dev** %input_dev116, align 8, !tbaa !20
  br label %dev_alloc_err

dev_alloc_err:                                    ; preds = %batt_err, %if.end53
  %ret.3 = phi i32 [ %ret.2, %batt_err ], [ %call71, %if.end53 ]
  %input_dev117 = getelementptr inbounds %struct.wm97xx, %struct.wm97xx* %2, i32 0, i32 6
  %54 = load %struct.input_dev*, %struct.input_dev** %input_dev117, align 8, !tbaa !20
  call void @input_free_device(%struct.input_dev* %54)
  br label %alloc_err

alloc_err:                                        ; preds = %dev_alloc_err, %sw.epilog, %sw.default, %if.then4
  %ret.4 = phi i32 [ -19, %if.then4 ], [ %ret.3, %dev_alloc_err ], [ -19, %sw.default ], [ -12, %sw.epilog ]
  %55 = bitcast %struct.wm97xx* %2 to i8*
  call void @kfree(i8* %55)
  br label %cleanup

cleanup:                                          ; preds = %alloc_err, %if.end98, %entry
  %retval.0 = phi i32 [ %ret.4, %alloc_err ], [ -12, %entry ], [ %call107, %if.end98 ]
  ret i32 %retval.0
}

; Function Attrs: nounwind uwtable
define internal i32 @wm97xx_remove(%struct.device* %dev) #0 {
entry:
  %call = call i8* @dev_get_drvdata(%struct.device* %dev)
  %0 = bitcast i8* %call to %struct.wm97xx*
  %battery_dev = getelementptr inbounds %struct.wm97xx, %struct.wm97xx* %0, i32 0, i32 9
  %1 = load %struct.platform_device*, %struct.platform_device** %battery_dev, align 8, !tbaa !54
  call void @platform_device_unregister(%struct.platform_device* %1)
  %touch_dev = getelementptr inbounds %struct.wm97xx, %struct.wm97xx* %0, i32 0, i32 10
  %2 = load %struct.platform_device*, %struct.platform_device** %touch_dev, align 8, !tbaa !59
  call void @platform_device_unregister(%struct.platform_device* %2)
  %input_dev = getelementptr inbounds %struct.wm97xx, %struct.wm97xx* %0, i32 0, i32 6
  %3 = load %struct.input_dev*, %struct.input_dev** %input_dev, align 8, !tbaa !20
  call void @input_unregister_device(%struct.input_dev* %3)
  %4 = bitcast %struct.wm97xx* %0 to i8*
  call void @kfree(i8* %4)
  ret i32 0
}

; Function Attrs: nounwind uwtable
define internal i32 @wm97xx_suspend(%struct.device* %dev, i32 %state.coerce) #0 {
entry:
  %state = alloca %struct.atomic_t, align 4
  %coerce.dive = getelementptr inbounds %struct.atomic_t, %struct.atomic_t* %state, i32 0, i32 0
  store i32 %state.coerce, i32* %coerce.dive, align 4
  %call = call i8* @dev_get_drvdata(%struct.device* %dev)
  %0 = bitcast i8* %call to %struct.wm97xx*
  %input_dev = getelementptr inbounds %struct.wm97xx, %struct.wm97xx* %0, i32 0, i32 6
  %1 = load %struct.input_dev*, %struct.input_dev** %input_dev, align 8, !tbaa !20
  %dev1 = getelementptr inbounds %struct.input_dev, %struct.input_dev* %1, i32 0, i32 39
  %call2 = call zeroext i1 @device_may_wakeup(%struct.device* %dev1)
  br i1 %call2, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %suspend_mode3 = getelementptr inbounds %struct.wm97xx, %struct.wm97xx* %0, i32 0, i32 23
  %2 = load i16, i16* %suspend_mode3, align 8, !tbaa !19
  %conv = zext i16 %2 to i32
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  %suspend_mode.0 = phi i32 [ %conv, %if.then ], [ 0, %entry ]
  %input_dev4 = getelementptr inbounds %struct.wm97xx, %struct.wm97xx* %0, i32 0, i32 6
  %3 = load %struct.input_dev*, %struct.input_dev** %input_dev4, align 8, !tbaa !20
  %users = getelementptr inbounds %struct.input_dev, %struct.input_dev* %3, i32 0, i32 37
  %4 = load i32, i32* %users, align 8, !tbaa !60
  %tobool = icmp ne i32 %4, 0
  br i1 %tobool, label %if.then5, label %if.end7

if.then5:                                         ; preds = %if.end
  %ts_reader = getelementptr inbounds %struct.wm97xx, %struct.wm97xx* %0, i32 0, i32 13
  %call6 = call zeroext i1 @cancel_delayed_work_sync(%struct.delayed_work* %ts_reader)
  br label %if.end7

if.end7:                                          ; preds = %if.then5, %if.end
  %call8 = call i32 @wm97xx_reg_read(%struct.wm97xx* %0, i16 zeroext 120)
  %conv9 = trunc i32 %call8 to i16
  %conv10 = zext i16 %conv9 to i32
  %and = and i32 %conv10, -49153
  %conv11 = trunc i32 %and to i16
  %input_dev12 = getelementptr inbounds %struct.wm97xx, %struct.wm97xx* %0, i32 0, i32 6
  %5 = load %struct.input_dev*, %struct.input_dev** %input_dev12, align 8, !tbaa !20
  %users13 = getelementptr inbounds %struct.input_dev, %struct.input_dev* %5, i32 0, i32 37
  %6 = load i32, i32* %users13, align 8, !tbaa !60
  %tobool14 = icmp ne i32 %6, 0
  %conv16 = zext i16 %conv11 to i32
  %or = or i32 %conv16, %suspend_mode.0
  %conv17 = trunc i32 %or to i16
  %reg.0 = select i1 %tobool14, i16 %conv17, i16 %conv11
  %ac97 = getelementptr inbounds %struct.wm97xx, %struct.wm97xx* %0, i32 0, i32 7
  %7 = load %struct.snd_ac97*, %struct.snd_ac97** %ac97, align 8, !tbaa !43
  %bus = getelementptr inbounds %struct.snd_ac97, %struct.snd_ac97* %7, i32 0, i32 3
  %8 = load %struct.snd_ac97_bus*, %struct.snd_ac97_bus** %bus, align 8, !tbaa !61
  %ops = getelementptr inbounds %struct.snd_ac97_bus, %struct.snd_ac97_bus* %8, i32 0, i32 0
  %9 = load %struct.snd_ac97_bus_ops*, %struct.snd_ac97_bus_ops** %ops, align 8, !tbaa !63
  %write = getelementptr inbounds %struct.snd_ac97_bus_ops, %struct.snd_ac97_bus_ops* %9, i32 0, i32 2
  %10 = load void (%struct.snd_ac97*, i16, i16)*, void (%struct.snd_ac97*, i16, i16)** %write, align 8, !tbaa !65
  %ac9719 = getelementptr inbounds %struct.wm97xx, %struct.wm97xx* %0, i32 0, i32 7
  %11 = load %struct.snd_ac97*, %struct.snd_ac97** %ac9719, align 8, !tbaa !43
  call void %10(%struct.snd_ac97* %11, i16 zeroext 120, i16 zeroext %reg.0)
  %id = getelementptr inbounds %struct.wm97xx, %struct.wm97xx* %0, i32 0, i32 1
  %12 = load i16, i16* %id, align 2, !tbaa !21
  %conv20 = zext i16 %12 to i32
  %cmp = icmp eq i32 %conv20, 19475
  br i1 %cmp, label %land.lhs.true, label %if.end30

land.lhs.true:                                    ; preds = %if.end7
  %input_dev22 = getelementptr inbounds %struct.wm97xx, %struct.wm97xx* %0, i32 0, i32 6
  %13 = load %struct.input_dev*, %struct.input_dev** %input_dev22, align 8, !tbaa !20
  %users23 = getelementptr inbounds %struct.input_dev, %struct.input_dev* %13, i32 0, i32 37
  %14 = load i32, i32* %users23, align 8, !tbaa !60
  %tobool24 = icmp ne i32 %14, 0
  %tobool25 = icmp ne i32 %suspend_mode.0, 0
  %or.cond = and i1 %tobool24, %tobool25
  br i1 %or.cond, label %if.end30, label %if.then26

if.then26:                                        ; preds = %land.lhs.true
  %call27 = call i32 @wm97xx_reg_read(%struct.wm97xx* %0, i16 zeroext 60)
  %or28 = or i32 %call27, 32768
  %conv29 = trunc i32 %or28 to i16
  call void @wm97xx_reg_write(%struct.wm97xx* %0, i16 zeroext 60, i16 zeroext %conv29)
  br label %if.end30

if.end30:                                         ; preds = %if.then26, %land.lhs.true, %if.end7
  ret i32 0
}

; Function Attrs: nounwind uwtable
define internal i32 @wm97xx_resume(%struct.device* %dev) #0 {
entry:
  %call = call i8* @dev_get_drvdata(%struct.device* %dev)
  %0 = bitcast i8* %call to %struct.wm97xx*
  %id = getelementptr inbounds %struct.wm97xx, %struct.wm97xx* %0, i32 0, i32 1
  %1 = load i16, i16* %id, align 2, !tbaa !21
  %conv = zext i16 %1 to i32
  %cmp = icmp eq i32 %conv, 19475
  br i1 %cmp, label %if.then, label %if.end5

if.then:                                          ; preds = %entry
  %dig = getelementptr inbounds %struct.wm97xx, %struct.wm97xx* %0, i32 0, i32 0
  %arrayidx = getelementptr inbounds [3 x i16], [3 x i16]* %dig, i64 0, i64 0
  %2 = load i16, i16* %arrayidx, align 8, !tbaa !45
  call void @wm97xx_reg_write(%struct.wm97xx* %0, i16 zeroext 116, i16 zeroext %2)
  %misc = getelementptr inbounds %struct.wm97xx, %struct.wm97xx* %0, i32 0, i32 3
  %3 = load i16, i16* %misc, align 4, !tbaa !67
  call void @wm97xx_reg_write(%struct.wm97xx* %0, i16 zeroext 90, i16 zeroext %3)
  %input_dev = getelementptr inbounds %struct.wm97xx, %struct.wm97xx* %0, i32 0, i32 6
  %4 = load %struct.input_dev*, %struct.input_dev** %input_dev, align 8, !tbaa !20
  %users = getelementptr inbounds %struct.input_dev, %struct.input_dev* %4, i32 0, i32 37
  %5 = load i32, i32* %users, align 8, !tbaa !60
  %tobool = icmp ne i32 %5, 0
  br i1 %tobool, label %if.then2, label %if.end5

if.then2:                                         ; preds = %if.then
  %call3 = call i32 @wm97xx_reg_read(%struct.wm97xx* %0, i16 zeroext 60)
  %and = and i32 %call3, 32767
  %conv4 = trunc i32 %and to i16
  call void @wm97xx_reg_write(%struct.wm97xx* %0, i16 zeroext 60, i16 zeroext %conv4)
  br label %if.end5

if.end5:                                          ; preds = %if.then2, %if.then, %entry
  %dig6 = getelementptr inbounds %struct.wm97xx, %struct.wm97xx* %0, i32 0, i32 0
  %arrayidx7 = getelementptr inbounds [3 x i16], [3 x i16]* %dig6, i64 0, i64 1
  %6 = load i16, i16* %arrayidx7, align 2, !tbaa !45
  call void @wm97xx_reg_write(%struct.wm97xx* %0, i16 zeroext 118, i16 zeroext %6)
  %dig8 = getelementptr inbounds %struct.wm97xx, %struct.wm97xx* %0, i32 0, i32 0
  %arrayidx9 = getelementptr inbounds [3 x i16], [3 x i16]* %dig8, i64 0, i64 2
  %7 = load i16, i16* %arrayidx9, align 4, !tbaa !45
  call void @wm97xx_reg_write(%struct.wm97xx* %0, i16 zeroext 120, i16 zeroext %7)
  %gpio = getelementptr inbounds %struct.wm97xx, %struct.wm97xx* %0, i32 0, i32 2
  %arrayidx10 = getelementptr inbounds [6 x i16], [6 x i16]* %gpio, i64 0, i64 0
  %8 = load i16, i16* %arrayidx10, align 8, !tbaa !45
  call void @wm97xx_reg_write(%struct.wm97xx* %0, i16 zeroext 76, i16 zeroext %8)
  %gpio11 = getelementptr inbounds %struct.wm97xx, %struct.wm97xx* %0, i32 0, i32 2
  %arrayidx12 = getelementptr inbounds [6 x i16], [6 x i16]* %gpio11, i64 0, i64 1
  %9 = load i16, i16* %arrayidx12, align 2, !tbaa !45
  call void @wm97xx_reg_write(%struct.wm97xx* %0, i16 zeroext 78, i16 zeroext %9)
  %gpio13 = getelementptr inbounds %struct.wm97xx, %struct.wm97xx* %0, i32 0, i32 2
  %arrayidx14 = getelementptr inbounds [6 x i16], [6 x i16]* %gpio13, i64 0, i64 2
  %10 = load i16, i16* %arrayidx14, align 4, !tbaa !45
  call void @wm97xx_reg_write(%struct.wm97xx* %0, i16 zeroext 80, i16 zeroext %10)
  %gpio15 = getelementptr inbounds %struct.wm97xx, %struct.wm97xx* %0, i32 0, i32 2
  %arrayidx16 = getelementptr inbounds [6 x i16], [6 x i16]* %gpio15, i64 0, i64 3
  %11 = load i16, i16* %arrayidx16, align 2, !tbaa !45
  call void @wm97xx_reg_write(%struct.wm97xx* %0, i16 zeroext 82, i16 zeroext %11)
  %gpio17 = getelementptr inbounds %struct.wm97xx, %struct.wm97xx* %0, i32 0, i32 2
  %arrayidx18 = getelementptr inbounds [6 x i16], [6 x i16]* %gpio17, i64 0, i64 4
  %12 = load i16, i16* %arrayidx18, align 8, !tbaa !45
  call void @wm97xx_reg_write(%struct.wm97xx* %0, i16 zeroext 84, i16 zeroext %12)
  %gpio19 = getelementptr inbounds %struct.wm97xx, %struct.wm97xx* %0, i32 0, i32 2
  %arrayidx20 = getelementptr inbounds [6 x i16], [6 x i16]* %gpio19, i64 0, i64 5
  %13 = load i16, i16* %arrayidx20, align 2, !tbaa !45
  call void @wm97xx_reg_write(%struct.wm97xx* %0, i16 zeroext 86, i16 zeroext %13)
  %input_dev21 = getelementptr inbounds %struct.wm97xx, %struct.wm97xx* %0, i32 0, i32 6
  %14 = load %struct.input_dev*, %struct.input_dev** %input_dev21, align 8, !tbaa !20
  %users22 = getelementptr inbounds %struct.input_dev, %struct.input_dev* %14, i32 0, i32 37
  %15 = load i32, i32* %users22, align 8, !tbaa !60
  %tobool23 = icmp ne i32 %15, 0
  br i1 %tobool23, label %land.lhs.true, label %if.end28

land.lhs.true:                                    ; preds = %if.end5
  %pen_irq = getelementptr inbounds %struct.wm97xx, %struct.wm97xx* %0, i32 0, i32 16
  %16 = load i32, i32* %pen_irq, align 8, !tbaa !68
  %tobool24 = icmp ne i32 %16, 0
  br i1 %tobool24, label %if.end28, label %if.then25

if.then25:                                        ; preds = %land.lhs.true
  %ts_reader_min_interval = getelementptr inbounds %struct.wm97xx, %struct.wm97xx* %0, i32 0, i32 15
  %17 = load i64, i64* %ts_reader_min_interval, align 8, !tbaa !69
  %ts_reader_interval = getelementptr inbounds %struct.wm97xx, %struct.wm97xx* %0, i32 0, i32 14
  store i64 %17, i64* %ts_reader_interval, align 8, !tbaa !70
  %ts_workq = getelementptr inbounds %struct.wm97xx, %struct.wm97xx* %0, i32 0, i32 17
  %18 = load %struct.workqueue_struct*, %struct.workqueue_struct** %ts_workq, align 8, !tbaa !71
  %ts_reader = getelementptr inbounds %struct.wm97xx, %struct.wm97xx* %0, i32 0, i32 13
  %ts_reader_interval26 = getelementptr inbounds %struct.wm97xx, %struct.wm97xx* %0, i32 0, i32 14
  %19 = load i64, i64* %ts_reader_interval26, align 8, !tbaa !70
  call void @queue_delayed_work(%struct.workqueue_struct* %18, %struct.delayed_work* %ts_reader, i64 %19)
  br label %if.end28

if.end28:                                         ; preds = %if.then25, %land.lhs.true, %if.end5
  ret i32 0
}

declare i8* @dev_get_drvdata(%struct.device*) #1

; Function Attrs: inlinehint nounwind uwtable
define internal void @queue_delayed_work(%struct.workqueue_struct* %wq, %struct.delayed_work* %dwork, i64 %delay) #4 {
entry:
  %call = call zeroext i1 @queue_delayed_work_on(i32 4096, %struct.workqueue_struct* %wq, %struct.delayed_work* %dwork, i64 %delay)
  ret void
}

declare zeroext i1 @queue_delayed_work_on(i32, %struct.workqueue_struct*, %struct.delayed_work*, i64) #1

; Function Attrs: inlinehint nounwind uwtable
define internal zeroext i1 @device_may_wakeup(%struct.device* %dev) #4 {
entry:
  %power = getelementptr inbounds %struct.device, %struct.device* %dev, i32 0, i32 9
  %can_wakeup = getelementptr inbounds %struct.dev_pm_info, %struct.dev_pm_info* %power, i32 0, i32 1
  %bf.load = load i8, i8* %can_wakeup, align 4
  %bf.clear = and i8 %bf.load, 1
  %bf.cast = zext i8 %bf.clear to i32
  %tobool = icmp ne i32 %bf.cast, 0
  br i1 %tobool, label %land.rhs, label %land.end

land.rhs:                                         ; preds = %entry
  %power1 = getelementptr inbounds %struct.device, %struct.device* %dev, i32 0, i32 9
  %wakeup = getelementptr inbounds %struct.dev_pm_info, %struct.dev_pm_info* %power1, i32 0, i32 5
  %0 = load %struct.wakeup_source*, %struct.wakeup_source** %wakeup, align 8, !tbaa !72
  %tobool2 = icmp ne %struct.wakeup_source* %0, null
  %lnot = xor i1 %tobool2, true
  %lnot3 = xor i1 %lnot, true
  br label %land.end

land.end:                                         ; preds = %land.rhs, %entry
  %1 = phi i1 [ false, %entry ], [ %lnot3, %land.rhs ]
  ret i1 %1
}

declare zeroext i1 @cancel_delayed_work_sync(%struct.delayed_work*) #1

declare void @platform_device_unregister(%struct.platform_device*) #1

declare void @input_unregister_device(%struct.input_dev*) #1

declare void @kfree(i8*) #1

; Function Attrs: inlinehint nounwind uwtable
define internal i8* @kzalloc(i64 %size, i32 %flags) #4 {
entry:
  %or = or i32 %flags, 32768
  %call.i = call i8* @__kmalloc(i64 %size, i32 %or) #6
  ret i8* %call.i
}

declare void @__mutex_init(%struct.mutex*, i8*, %struct.lock_class_key*) #1

declare i32 @dev_set_drvdata(%struct.device*, i8*) #1

declare i32 @_dev_info(%struct.device*, i8*, ...) #1

declare %struct.input_dev* @input_allocate_device() #1

; Function Attrs: nounwind uwtable
define internal i32 @wm97xx_ts_input_open(%struct.input_dev* %idev) #0 {
entry:
  %.compoundliteral = alloca %struct.pgprot, align 8
  %.compoundliteral45 = alloca %struct.pgprot, align 8
  %call = call i8* @input_get_drvdata(%struct.input_dev* %idev)
  %0 = bitcast i8* %call to %struct.wm97xx*
  %call1 = call %struct.workqueue_struct* (i8*, i32, i32, %struct.lock_class_key*, i8*, ...) @__alloc_workqueue_key(i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.10, i32 0, i32 0), i32 10, i32 1, %struct.lock_class_key* @wm97xx_ts_input_open.__key, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.10, i32 0, i32 0))
  %ts_workq = getelementptr inbounds %struct.wm97xx, %struct.wm97xx* %0, i32 0, i32 17
  store %struct.workqueue_struct* %call1, %struct.workqueue_struct** %ts_workq, align 8, !tbaa !71
  %ts_workq2 = getelementptr inbounds %struct.wm97xx, %struct.wm97xx* %0, i32 0, i32 17
  %1 = load %struct.workqueue_struct*, %struct.workqueue_struct** %ts_workq2, align 8, !tbaa !71
  %cmp = icmp eq %struct.workqueue_struct* %1, null
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %2 = call i32 (%struct.device*, i8*, ...) @dev_err(%struct.device* null, i8* null)
  br label %cleanup

if.end:                                           ; preds = %entry
  %mach_ops = getelementptr inbounds %struct.wm97xx, %struct.wm97xx* %0, i32 0, i32 11
  %3 = load %struct.wm97xx_mach_ops*, %struct.wm97xx_mach_ops** %mach_ops, align 8, !tbaa !2
  %tobool = icmp ne %struct.wm97xx_mach_ops* %3, null
  br i1 %tobool, label %land.lhs.true, label %if.end8

land.lhs.true:                                    ; preds = %if.end
  %mach_ops4 = getelementptr inbounds %struct.wm97xx, %struct.wm97xx* %0, i32 0, i32 11
  %4 = load %struct.wm97xx_mach_ops*, %struct.wm97xx_mach_ops** %mach_ops4, align 8, !tbaa !2
  %acc_enabled = getelementptr inbounds %struct.wm97xx_mach_ops, %struct.wm97xx_mach_ops* %4, i32 0, i32 0
  %5 = load i32, i32* %acc_enabled, align 8, !tbaa !73
  %tobool5 = icmp ne i32 %5, 0
  br i1 %tobool5, label %if.then6, label %if.end8

if.then6:                                         ; preds = %land.lhs.true
  %codec = getelementptr inbounds %struct.wm97xx, %struct.wm97xx* %0, i32 0, i32 5
  %6 = load %struct.wm97xx_codec_drv*, %struct.wm97xx_codec_drv** %codec, align 8, !tbaa !23
  %acc_enable = getelementptr inbounds %struct.wm97xx_codec_drv, %struct.wm97xx_codec_drv* %6, i32 0, i32 4
  %7 = load i32 (%struct.wm97xx*, i32)*, i32 (%struct.wm97xx*, i32)** %acc_enable, align 8, !tbaa !75
  %call7 = call i32 %7(%struct.wm97xx* %0, i32 1)
  br label %if.end8

if.end8:                                          ; preds = %if.then6, %land.lhs.true, %if.end
  %codec9 = getelementptr inbounds %struct.wm97xx, %struct.wm97xx* %0, i32 0, i32 5
  %8 = load %struct.wm97xx_codec_drv*, %struct.wm97xx_codec_drv** %codec9, align 8, !tbaa !23
  %dig_enable = getelementptr inbounds %struct.wm97xx_codec_drv, %struct.wm97xx_codec_drv* %8, i32 0, i32 6
  %9 = load void (%struct.wm97xx*, i32)*, void (%struct.wm97xx*, i32)** %dig_enable, align 8, !tbaa !28
  call void %9(%struct.wm97xx* %0, i32 1)
  %ts_reader = getelementptr inbounds %struct.wm97xx, %struct.wm97xx* %0, i32 0, i32 13
  %work = getelementptr inbounds %struct.delayed_work, %struct.delayed_work* %ts_reader, i32 0, i32 0
  call void @__init_work(%struct.work_struct* %work, i32 0)
  %ts_reader12 = getelementptr inbounds %struct.wm97xx, %struct.wm97xx* %0, i32 0, i32 13
  %work13 = getelementptr inbounds %struct.delayed_work, %struct.delayed_work* %ts_reader12, i32 0, i32 0
  %data = getelementptr inbounds %struct.work_struct, %struct.work_struct* %work13, i32 0, i32 0
  %counter = getelementptr inbounds %struct.pgprot, %struct.pgprot* %.compoundliteral, i32 0, i32 0
  store i64 137438953408, i64* %counter, align 8, !tbaa !76
  %10 = bitcast %struct.pgprot* %data to i8*
  %11 = bitcast %struct.pgprot* %.compoundliteral to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %10, i8* %11, i64 8, i32 8, i1 false), !tbaa.struct !77
  %ts_reader14 = getelementptr inbounds %struct.wm97xx, %struct.wm97xx* %0, i32 0, i32 13
  %work15 = getelementptr inbounds %struct.delayed_work, %struct.delayed_work* %ts_reader14, i32 0, i32 0
  %lockdep_map = getelementptr inbounds %struct.work_struct, %struct.work_struct* %work15, i32 0, i32 3
  call void @lockdep_init_map(%struct.lockdep_map* %lockdep_map, i8* getelementptr inbounds ([26 x i8], [26 x i8]* @.str.13, i32 0, i32 0), %struct.lock_class_key* @wm97xx_ts_input_open.__key.12, i32 0)
  %ts_reader16 = getelementptr inbounds %struct.wm97xx, %struct.wm97xx* %0, i32 0, i32 13
  %work17 = getelementptr inbounds %struct.delayed_work, %struct.delayed_work* %ts_reader16, i32 0, i32 0
  %entry18 = getelementptr inbounds %struct.work_struct, %struct.work_struct* %work17, i32 0, i32 1
  call void @INIT_LIST_HEAD(%struct.list_head* %entry18)
  %ts_reader20 = getelementptr inbounds %struct.wm97xx, %struct.wm97xx* %0, i32 0, i32 13
  %work21 = getelementptr inbounds %struct.delayed_work, %struct.delayed_work* %ts_reader20, i32 0, i32 0
  %func = getelementptr inbounds %struct.work_struct, %struct.work_struct* %work21, i32 0, i32 2
  store void (%struct.work_struct*)* @wm97xx_ts_reader, void (%struct.work_struct*)** %func, align 8, !tbaa !79
  %ts_reader28 = getelementptr inbounds %struct.wm97xx, %struct.wm97xx* %0, i32 0, i32 13
  %timer = getelementptr inbounds %struct.delayed_work, %struct.delayed_work* %ts_reader28, i32 0, i32 1
  call void @init_timer_key(%struct.timer_list* %timer, i32 2, i8* getelementptr inbounds ([27 x i8], [27 x i8]* @.str.15, i32 0, i32 0), %struct.lock_class_key* @wm97xx_ts_input_open.__key.14)
  %ts_reader31 = getelementptr inbounds %struct.wm97xx, %struct.wm97xx* %0, i32 0, i32 13
  %timer32 = getelementptr inbounds %struct.delayed_work, %struct.delayed_work* %ts_reader31, i32 0, i32 1
  %function = getelementptr inbounds %struct.timer_list, %struct.timer_list* %timer32, i32 0, i32 3
  store void (i64)* @delayed_work_timer_fn, void (i64)** %function, align 8, !tbaa !80
  %ts_reader33 = getelementptr inbounds %struct.wm97xx, %struct.wm97xx* %0, i32 0, i32 13
  %12 = ptrtoint %struct.delayed_work* %ts_reader33 to i64
  %ts_reader34 = getelementptr inbounds %struct.wm97xx, %struct.wm97xx* %0, i32 0, i32 13
  %timer35 = getelementptr inbounds %struct.delayed_work, %struct.delayed_work* %ts_reader34, i32 0, i32 1
  %data36 = getelementptr inbounds %struct.timer_list, %struct.timer_list* %timer35, i32 0, i32 4
  store i64 %12, i64* %data36, align 8, !tbaa !81
  %pen_event_work = getelementptr inbounds %struct.wm97xx, %struct.wm97xx* %0, i32 0, i32 18
  call void @__init_work(%struct.work_struct* %pen_event_work, i32 0)
  %pen_event_work43 = getelementptr inbounds %struct.wm97xx, %struct.wm97xx* %0, i32 0, i32 18
  %data44 = getelementptr inbounds %struct.work_struct, %struct.work_struct* %pen_event_work43, i32 0, i32 0
  %counter46 = getelementptr inbounds %struct.pgprot, %struct.pgprot* %.compoundliteral45, i32 0, i32 0
  store i64 137438953408, i64* %counter46, align 8, !tbaa !76
  %13 = bitcast %struct.pgprot* %data44 to i8*
  %14 = bitcast %struct.pgprot* %.compoundliteral45 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %13, i8* %14, i64 8, i32 8, i1 false), !tbaa.struct !77
  %pen_event_work47 = getelementptr inbounds %struct.wm97xx, %struct.wm97xx* %0, i32 0, i32 18
  %lockdep_map48 = getelementptr inbounds %struct.work_struct, %struct.work_struct* %pen_event_work47, i32 0, i32 3
  call void @lockdep_init_map(%struct.lockdep_map* %lockdep_map48, i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.17, i32 0, i32 0), %struct.lock_class_key* @wm97xx_ts_input_open.__key.16, i32 0)
  %pen_event_work49 = getelementptr inbounds %struct.wm97xx, %struct.wm97xx* %0, i32 0, i32 18
  %entry50 = getelementptr inbounds %struct.work_struct, %struct.work_struct* %pen_event_work49, i32 0, i32 1
  call void @INIT_LIST_HEAD(%struct.list_head* %entry50)
  %pen_event_work52 = getelementptr inbounds %struct.wm97xx, %struct.wm97xx* %0, i32 0, i32 18
  %func53 = getelementptr inbounds %struct.work_struct, %struct.work_struct* %pen_event_work52, i32 0, i32 2
  store void (%struct.work_struct*)* @wm97xx_pen_irq_worker, void (%struct.work_struct*)** %func53, align 8, !tbaa !79
  %ts_reader_min_interval = getelementptr inbounds %struct.wm97xx, %struct.wm97xx* %0, i32 0, i32 15
  store i64 2, i64* %ts_reader_min_interval, align 8, !tbaa !69
  %ts_reader_min_interval60 = getelementptr inbounds %struct.wm97xx, %struct.wm97xx* %0, i32 0, i32 15
  %15 = load i64, i64* %ts_reader_min_interval60, align 8, !tbaa !69
  %cmp61 = icmp ult i64 %15, 1
  br i1 %cmp61, label %if.then62, label %if.end64

if.then62:                                        ; preds = %if.end8
  %ts_reader_min_interval63 = getelementptr inbounds %struct.wm97xx, %struct.wm97xx* %0, i32 0, i32 15
  store i64 1, i64* %ts_reader_min_interval63, align 8, !tbaa !69
  br label %if.end64

if.end64:                                         ; preds = %if.then62, %if.end8
  %ts_reader_min_interval65 = getelementptr inbounds %struct.wm97xx, %struct.wm97xx* %0, i32 0, i32 15
  %16 = load i64, i64* %ts_reader_min_interval65, align 8, !tbaa !69
  %ts_reader_interval = getelementptr inbounds %struct.wm97xx, %struct.wm97xx* %0, i32 0, i32 14
  store i64 %16, i64* %ts_reader_interval, align 8, !tbaa !70
  %pen_is_down = getelementptr inbounds %struct.wm97xx, %struct.wm97xx* %0, i32 0, i32 21
  %bf.load = load i8, i8* %pen_is_down, align 4
  %bf.clear = and i8 %bf.load, -2
  store i8 %bf.clear, i8* %pen_is_down, align 4
  %pen_irq = getelementptr inbounds %struct.wm97xx, %struct.wm97xx* %0, i32 0, i32 16
  %17 = load i32, i32* %pen_irq, align 8, !tbaa !68
  %tobool66 = icmp ne i32 %17, 0
  br i1 %tobool66, label %if.then67, label %if.else

if.then67:                                        ; preds = %if.end64
  call void @wm97xx_init_pen_irq(%struct.wm97xx* %0)
  br label %if.end71

if.else:                                          ; preds = %if.end64
  %18 = call i32 (%struct.device*, i8*, ...) @dev_err(%struct.device* null, i8* null)
  br label %if.end71

if.end71:                                         ; preds = %if.else, %if.then67
  %pen_irq72 = getelementptr inbounds %struct.wm97xx, %struct.wm97xx* %0, i32 0, i32 16
  %19 = load i32, i32* %pen_irq72, align 8, !tbaa !68
  %cmp73 = icmp eq i32 %19, 0
  br i1 %cmp73, label %if.then74, label %cleanup

if.then74:                                        ; preds = %if.end71
  %ts_workq75 = getelementptr inbounds %struct.wm97xx, %struct.wm97xx* %0, i32 0, i32 17
  %20 = load %struct.workqueue_struct*, %struct.workqueue_struct** %ts_workq75, align 8, !tbaa !71
  %ts_reader76 = getelementptr inbounds %struct.wm97xx, %struct.wm97xx* %0, i32 0, i32 13
  %ts_reader_interval77 = getelementptr inbounds %struct.wm97xx, %struct.wm97xx* %0, i32 0, i32 14
  %21 = load i64, i64* %ts_reader_interval77, align 8, !tbaa !70
  call void @queue_delayed_work(%struct.workqueue_struct* %20, %struct.delayed_work* %ts_reader76, i64 %21)
  br label %cleanup

cleanup:                                          ; preds = %if.then74, %if.end71, %if.then
  %retval.0 = phi i32 [ -22, %if.then ], [ 0, %if.then74 ], [ 0, %if.end71 ]
  ret i32 %retval.0
}

; Function Attrs: nounwind uwtable
define internal void @wm97xx_ts_input_close(%struct.input_dev* %idev) #0 {
entry:
  %call = call i8* @input_get_drvdata(%struct.input_dev* %idev)
  %0 = bitcast i8* %call to %struct.wm97xx*
  %pen_irq = getelementptr inbounds %struct.wm97xx, %struct.wm97xx* %0, i32 0, i32 16
  %1 = load i32, i32* %pen_irq, align 8, !tbaa !68
  %tobool = icmp ne i32 %1, 0
  br i1 %tobool, label %if.then, label %if.end23

if.then:                                          ; preds = %entry
  %id = getelementptr inbounds %struct.wm97xx, %struct.wm97xx* %0, i32 0, i32 1
  %2 = load i16, i16* %id, align 2, !tbaa !21
  %conv = zext i16 %2 to i32
  %cmp = icmp ne i32 %conv, 19461
  br i1 %cmp, label %do.body, label %if.end21

do.body:                                          ; preds = %if.then
  %mach_ops = getelementptr inbounds %struct.wm97xx, %struct.wm97xx* %0, i32 0, i32 11
  %3 = load %struct.wm97xx_mach_ops*, %struct.wm97xx_mach_ops** %mach_ops, align 8, !tbaa !2
  %irq_gpio = getelementptr inbounds %struct.wm97xx_mach_ops, %struct.wm97xx_mach_ops* %3, i32 0, i32 6
  %4 = load i32, i32* %irq_gpio, align 8, !tbaa !82
  %tobool3 = icmp ne i32 %4, 0
  %lnot = xor i1 %tobool3, true
  %lnot4 = xor i1 %lnot, true
  %lnot5 = xor i1 %lnot4, true
  %lnot.ext = zext i1 %lnot5 to i32
  %conv6 = sext i32 %lnot.ext to i64
  %expval = call i64 @llvm.expect.i64(i64 %conv6, i64 0)
  %tobool7 = icmp ne i64 %expval, 0
  br i1 %tobool7, label %do.body9, label %do.end14

do.body9:                                         ; preds = %do.body
  call void asm sideeffect "1:\09ud2\0A.pushsection __bug_table,\22a\22\0A2:\09.long 1b - 2b, ${0:c} - 2b\0A\09.word ${1:c}, 0\0A\09.org 2b+${2:c}\0A.popsection", "i,i,i,~{dirflag},~{fpsr},~{flags}"(i8* getelementptr inbounds ([40 x i8], [40 x i8]* @.str.19, i32 0, i32 0), i32 556, i64 12) #6, !srcloc !83
  br label %do.body10

do.body10:                                        ; preds = %do.body10, %do.body9
  br label %do.body10

do.end14:                                         ; preds = %do.body
  %call15 = call i32 @wm97xx_reg_read(%struct.wm97xx* %0, i16 zeroext 86)
  %conv16 = trunc i32 %call15 to i16
  %conv17 = zext i16 %conv16 to i32
  %mach_ops18 = getelementptr inbounds %struct.wm97xx, %struct.wm97xx* %0, i32 0, i32 11
  %5 = load %struct.wm97xx_mach_ops*, %struct.wm97xx_mach_ops** %mach_ops18, align 8, !tbaa !2
  %irq_gpio19 = getelementptr inbounds %struct.wm97xx_mach_ops, %struct.wm97xx_mach_ops* %5, i32 0, i32 6
  %6 = load i32, i32* %irq_gpio19, align 8, !tbaa !82
  %or = or i32 %conv17, %6
  %conv20 = trunc i32 %or to i16
  call void @wm97xx_reg_write(%struct.wm97xx* %0, i16 zeroext 86, i16 zeroext %conv20)
  br label %if.end21

if.end21:                                         ; preds = %do.end14, %if.then
  %pen_irq22 = getelementptr inbounds %struct.wm97xx, %struct.wm97xx* %0, i32 0, i32 16
  %7 = load i32, i32* %pen_irq22, align 8, !tbaa !68
  %8 = bitcast %struct.wm97xx* %0 to i8*
  call void @free_irq(i32 %7, i8* %8)
  br label %if.end23

if.end23:                                         ; preds = %if.end21, %entry
  %pen_is_down = getelementptr inbounds %struct.wm97xx, %struct.wm97xx* %0, i32 0, i32 21
  %bf.load = load i8, i8* %pen_is_down, align 4
  %bf.clear = and i8 %bf.load, -2
  store i8 %bf.clear, i8* %pen_is_down, align 4
  %pen_event_work = getelementptr inbounds %struct.wm97xx, %struct.wm97xx* %0, i32 0, i32 18
  %call24 = call zeroext i1 @cancel_work_sync(%struct.work_struct* %pen_event_work)
  br i1 %call24, label %if.then25, label %if.end27

if.then25:                                        ; preds = %if.end23
  %mach_ops26 = getelementptr inbounds %struct.wm97xx, %struct.wm97xx* %0, i32 0, i32 11
  %9 = load %struct.wm97xx_mach_ops*, %struct.wm97xx_mach_ops** %mach_ops26, align 8, !tbaa !2
  %irq_enable = getelementptr inbounds %struct.wm97xx_mach_ops, %struct.wm97xx_mach_ops* %9, i32 0, i32 5
  %10 = load void (%struct.wm97xx*, i32)*, void (%struct.wm97xx*, i32)** %irq_enable, align 8, !tbaa !84
  call void %10(%struct.wm97xx* %0, i32 1)
  br label %if.end27

if.end27:                                         ; preds = %if.then25, %if.end23
  %ts_reader = getelementptr inbounds %struct.wm97xx, %struct.wm97xx* %0, i32 0, i32 13
  %call28 = call zeroext i1 @cancel_delayed_work_sync(%struct.delayed_work* %ts_reader)
  %ts_workq = getelementptr inbounds %struct.wm97xx, %struct.wm97xx* %0, i32 0, i32 17
  %11 = load %struct.workqueue_struct*, %struct.workqueue_struct** %ts_workq, align 8, !tbaa !71
  call void @destroy_workqueue(%struct.workqueue_struct* %11)
  %codec = getelementptr inbounds %struct.wm97xx, %struct.wm97xx* %0, i32 0, i32 5
  %12 = load %struct.wm97xx_codec_drv*, %struct.wm97xx_codec_drv** %codec, align 8, !tbaa !23
  %dig_enable = getelementptr inbounds %struct.wm97xx_codec_drv, %struct.wm97xx_codec_drv* %12, i32 0, i32 6
  %13 = load void (%struct.wm97xx*, i32)*, void (%struct.wm97xx*, i32)** %dig_enable, align 8, !tbaa !28
  call void %13(%struct.wm97xx* %0, i32 0)
  %mach_ops29 = getelementptr inbounds %struct.wm97xx, %struct.wm97xx* %0, i32 0, i32 11
  %14 = load %struct.wm97xx_mach_ops*, %struct.wm97xx_mach_ops** %mach_ops29, align 8, !tbaa !2
  %tobool30 = icmp ne %struct.wm97xx_mach_ops* %14, null
  br i1 %tobool30, label %land.lhs.true, label %if.end36

land.lhs.true:                                    ; preds = %if.end27
  %mach_ops31 = getelementptr inbounds %struct.wm97xx, %struct.wm97xx* %0, i32 0, i32 11
  %15 = load %struct.wm97xx_mach_ops*, %struct.wm97xx_mach_ops** %mach_ops31, align 8, !tbaa !2
  %acc_enabled = getelementptr inbounds %struct.wm97xx_mach_ops, %struct.wm97xx_mach_ops* %15, i32 0, i32 0
  %16 = load i32, i32* %acc_enabled, align 8, !tbaa !73
  %tobool32 = icmp ne i32 %16, 0
  br i1 %tobool32, label %if.then33, label %if.end36

if.then33:                                        ; preds = %land.lhs.true
  %codec34 = getelementptr inbounds %struct.wm97xx, %struct.wm97xx* %0, i32 0, i32 5
  %17 = load %struct.wm97xx_codec_drv*, %struct.wm97xx_codec_drv** %codec34, align 8, !tbaa !23
  %acc_enable = getelementptr inbounds %struct.wm97xx_codec_drv, %struct.wm97xx_codec_drv* %17, i32 0, i32 4
  %18 = load i32 (%struct.wm97xx*, i32)*, i32 (%struct.wm97xx*, i32)** %acc_enable, align 8, !tbaa !75
  %call35 = call i32 %18(%struct.wm97xx* %0, i32 0)
  br label %if.end36

if.end36:                                         ; preds = %if.then33, %land.lhs.true, %if.end27
  ret void
}

; Function Attrs: inlinehint nounwind uwtable
define internal void @__set_bit(i32 %nr, i64* %addr) #4 {
entry:
  call void asm sideeffect "bts $1,$0", "=*m,Ir,*m,~{memory},~{dirflag},~{fpsr},~{flags}"(i64* %addr, i32 %nr, i64* %addr) #6, !srcloc !85
  ret void
}

declare void @input_set_abs_params(%struct.input_dev*, i32, i32, i32, i32, i32) #1

; Function Attrs: inlinehint nounwind uwtable
define internal void @input_set_drvdata(%struct.input_dev* %dev, i8* %data) #4 {
entry:
  %dev1 = getelementptr inbounds %struct.input_dev, %struct.input_dev* %dev, i32 0, i32 39
  %call = call i32 @dev_set_drvdata(%struct.device* %dev1, i8* %data)
  ret void
}

declare i32 @input_register_device(%struct.input_dev*) #1

declare %struct.platform_device* @platform_device_alloc(i8*, i32) #1

; Function Attrs: inlinehint nounwind uwtable
define internal void @platform_set_drvdata(%struct.platform_device* %pdev, i8* %data) #4 {
entry:
  %dev = getelementptr inbounds %struct.platform_device, %struct.platform_device* %pdev, i32 0, i32 3
  %call = call i32 @dev_set_drvdata(%struct.device* %dev, i8* %data)
  ret void
}

declare i32 @platform_device_add(%struct.platform_device*) #1

declare void @platform_device_put(%struct.platform_device*) #1

declare void @platform_device_del(%struct.platform_device*) #1

declare void @input_free_device(%struct.input_dev*) #1

; Function Attrs: inlinehint nounwind uwtable
define internal i8* @input_get_drvdata(%struct.input_dev* %dev) #4 {
entry:
  %dev1 = getelementptr inbounds %struct.input_dev, %struct.input_dev* %dev, i32 0, i32 39
  %call = call i8* @dev_get_drvdata(%struct.device* %dev1)
  ret i8* %call
}

; Function Attrs: nounwind readnone
declare i64 @llvm.expect.i64(i64, i64) #5

declare void @free_irq(i32, i8*) #1

declare zeroext i1 @cancel_work_sync(%struct.work_struct*) #1

declare void @destroy_workqueue(%struct.workqueue_struct*) #1

declare %struct.workqueue_struct* @__alloc_workqueue_key(i8*, i32, i32, %struct.lock_class_key*, i8*, ...) #1

declare void @__init_work(%struct.work_struct*, i32) #1

; Function Attrs: argmemonly nounwind
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* nocapture writeonly, i8* nocapture readonly, i64, i32, i1) #2

declare void @lockdep_init_map(%struct.lockdep_map*, i8*, %struct.lock_class_key*, i32) #1

; Function Attrs: inlinehint nounwind uwtable
define internal void @INIT_LIST_HEAD(%struct.list_head* %list) #4 {
entry:
  %next = getelementptr inbounds %struct.list_head, %struct.list_head* %list, i32 0, i32 0
  store %struct.list_head* %list, %struct.list_head** %next, align 8, !tbaa !86
  %prev = getelementptr inbounds %struct.list_head, %struct.list_head* %list, i32 0, i32 1
  store %struct.list_head* %list, %struct.list_head** %prev, align 8, !tbaa !87
  ret void
}

; Function Attrs: nounwind uwtable
define internal void @wm97xx_ts_reader(%struct.work_struct* %work) #0 {
entry:
  %0 = bitcast %struct.work_struct* %work to i8*
  %add.ptr = getelementptr inbounds i8, i8* %0, i64 -256
  %1 = bitcast i8* %add.ptr to %struct.wm97xx*
  %codec = getelementptr inbounds %struct.wm97xx, %struct.wm97xx* %1, i32 0, i32 5
  %2 = load %struct.wm97xx_codec_drv*, %struct.wm97xx_codec_drv** %codec, align 8, !tbaa !23
  %tobool = icmp ne %struct.wm97xx_codec_drv* %2, null
  %lnot = xor i1 %tobool, true
  %lnot1 = xor i1 %lnot, true
  %lnot2 = xor i1 %lnot1, true
  %lnot.ext = zext i1 %lnot2 to i32
  %conv = sext i32 %lnot.ext to i64
  %expval = call i64 @llvm.expect.i64(i64 %conv, i64 0)
  %tobool3 = icmp ne i64 %expval, 0
  br i1 %tobool3, label %do.body4, label %do.end9

do.body4:                                         ; preds = %entry
  call void asm sideeffect "1:\09ud2\0A.pushsection __bug_table,\22a\22\0A2:\09.long 1b - 2b, ${0:c} - 2b\0A\09.word ${1:c}, 0\0A\09.org 2b+${2:c}\0A.popsection", "i,i,i,~{dirflag},~{fpsr},~{flags}"(i8* getelementptr inbounds ([40 x i8], [40 x i8]* @.str.19, i32 0, i32 0), i32 481, i64 12) #6, !srcloc !88
  br label %do.body5

do.body5:                                         ; preds = %do.body5, %do.body4
  br label %do.body5

do.end9:                                          ; preds = %entry
  br label %do.body10

do.body10:                                        ; preds = %do.body10, %do.end9
  %call = call i32 @wm97xx_read_samples(%struct.wm97xx* %1)
  %and = and i32 %call, 1
  %tobool12 = icmp ne i32 %and, 0
  br i1 %tobool12, label %do.body10, label %do.end13

do.end13:                                         ; preds = %do.body10
  %pen_is_down = getelementptr inbounds %struct.wm97xx, %struct.wm97xx* %1, i32 0, i32 21
  %bf.load = load i8, i8* %pen_is_down, align 4
  %bf.clear = and i8 %bf.load, 1
  %bf.cast = zext i8 %bf.clear to i32
  %tobool14 = icmp ne i32 %bf.cast, 0
  br i1 %tobool14, label %if.then16, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %do.end13
  %pen_irq = getelementptr inbounds %struct.wm97xx, %struct.wm97xx* %1, i32 0, i32 16
  %3 = load i32, i32* %pen_irq, align 8, !tbaa !68
  %tobool15 = icmp ne i32 %3, 0
  br i1 %tobool15, label %if.end18, label %if.then16

if.then16:                                        ; preds = %lor.lhs.false, %do.end13
  %ts_workq = getelementptr inbounds %struct.wm97xx, %struct.wm97xx* %1, i32 0, i32 17
  %4 = load %struct.workqueue_struct*, %struct.workqueue_struct** %ts_workq, align 8, !tbaa !71
  %ts_reader = getelementptr inbounds %struct.wm97xx, %struct.wm97xx* %1, i32 0, i32 13
  %ts_reader_interval = getelementptr inbounds %struct.wm97xx, %struct.wm97xx* %1, i32 0, i32 14
  %5 = load i64, i64* %ts_reader_interval, align 8, !tbaa !70
  call void @queue_delayed_work(%struct.workqueue_struct* %4, %struct.delayed_work* %ts_reader, i64 %5)
  br label %if.end18

if.end18:                                         ; preds = %if.then16, %lor.lhs.false
  ret void
}

declare void @init_timer_key(%struct.timer_list*, i32, i8*, %struct.lock_class_key*) #1

declare void @delayed_work_timer_fn(i64) #1

; Function Attrs: nounwind uwtable
define internal void @wm97xx_pen_irq_worker(%struct.work_struct* %work) #0 {
entry:
  %0 = bitcast %struct.work_struct* %work to i8*
  %add.ptr = getelementptr inbounds i8, i8* %0, i64 -512
  %1 = bitcast i8* %add.ptr to %struct.wm97xx*
  %pen_is_down = getelementptr inbounds %struct.wm97xx, %struct.wm97xx* %1, i32 0, i32 21
  %bf.load = load i8, i8* %pen_is_down, align 4
  %bf.clear = and i8 %bf.load, 1
  %bf.cast = zext i8 %bf.clear to i32
  %id = getelementptr inbounds %struct.wm97xx, %struct.wm97xx* %1, i32 0, i32 1
  %2 = load i16, i16* %id, align 2, !tbaa !21
  %conv = zext i16 %2 to i32
  %cmp = icmp eq i32 %conv, 19461
  br i1 %cmp, label %if.then, label %if.else9

if.then:                                          ; preds = %entry
  %call = call i32 @wm97xx_reg_read(%struct.wm97xx* %1, i16 zeroext 122)
  %and = and i32 %call, 32768
  %tobool = icmp ne i32 %and, 0
  %pen_is_down3 = getelementptr inbounds %struct.wm97xx, %struct.wm97xx* %1, i32 0, i32 21
  %bf.load4 = load i8, i8* %pen_is_down3, align 4
  %bf.clear5 = and i8 %bf.load4, -2
  %bf.set = or i8 %bf.clear5, 1
  %bf.clear5.sink = select i1 %tobool, i8 %bf.set, i8 %bf.clear5
  store i8 %bf.clear5.sink, i8* %pen_is_down3, align 4
  br label %if.end51

if.else9:                                         ; preds = %entry
  %codec_mutex = getelementptr inbounds %struct.wm97xx, %struct.wm97xx* %1, i32 0, i32 12
  call void @mutex_lock_nested(%struct.mutex* %codec_mutex, i32 0)
  %call10 = call i32 @wm97xx_reg_read(%struct.wm97xx* %1, i16 zeroext 84)
  %conv11 = trunc i32 %call10 to i16
  %call12 = call i32 @wm97xx_reg_read(%struct.wm97xx* %1, i16 zeroext 78)
  %conv13 = trunc i32 %call12 to i16
  %conv14 = zext i16 %conv13 to i32
  %and15 = and i32 8192, %conv14
  %conv16 = zext i16 %conv11 to i32
  %and17 = and i32 %and15, %conv16
  %tobool18 = icmp ne i32 %and17, 0
  %pen_is_down20 = getelementptr inbounds %struct.wm97xx, %struct.wm97xx* %1, i32 0, i32 21
  %bf.load21 = load i8, i8* %pen_is_down20, align 4
  %bf.clear22 = and i8 %bf.load21, -2
  br i1 %tobool18, label %if.then19, label %if.else27

if.then19:                                        ; preds = %if.else9
  %bf.set23 = or i8 %bf.clear22, 1
  store i8 %bf.set23, i8* %pen_is_down20, align 4
  %conv24 = zext i16 %conv13 to i32
  %and25 = and i32 %conv24, -8193
  %conv26 = trunc i32 %and25 to i16
  call void @wm97xx_reg_write(%struct.wm97xx* %1, i16 zeroext 78, i16 zeroext %conv26)
  br label %if.end33

if.else27:                                        ; preds = %if.else9
  store i8 %bf.clear22, i8* %pen_is_down20, align 4
  %conv31 = zext i16 %conv13 to i32
  %or = or i32 %conv31, 8192
  %conv32 = trunc i32 %or to i16
  call void @wm97xx_reg_write(%struct.wm97xx* %1, i16 zeroext 78, i16 zeroext %conv32)
  br label %if.end33

if.end33:                                         ; preds = %if.else27, %if.then19
  %id34 = getelementptr inbounds %struct.wm97xx, %struct.wm97xx* %1, i32 0, i32 1
  %3 = load i16, i16* %id34, align 2, !tbaa !21
  %conv35 = zext i16 %3 to i32
  %cmp36 = icmp eq i32 %conv35, 19474
  br i1 %cmp36, label %land.lhs.true, label %if.else45

land.lhs.true:                                    ; preds = %if.end33
  %variant = getelementptr inbounds %struct.wm97xx, %struct.wm97xx* %1, i32 0, i32 22
  %4 = load i16, i16* %variant, align 2, !tbaa !22
  %conv38 = zext i16 %4 to i32
  %cmp39 = icmp ne i32 %conv38, 5651
  br i1 %cmp39, label %if.then41, label %if.else45

if.then41:                                        ; preds = %land.lhs.true
  %conv42 = zext i16 %conv11 to i32
  %and43 = and i32 %conv42, -8193
  %shl = shl i32 %and43, 1
  %conv44 = trunc i32 %shl to i16
  call void @wm97xx_reg_write(%struct.wm97xx* %1, i16 zeroext 84, i16 zeroext %conv44)
  br label %if.end49

if.else45:                                        ; preds = %land.lhs.true, %if.end33
  %conv46 = zext i16 %conv11 to i32
  %and47 = and i32 %conv46, -8193
  %conv48 = trunc i32 %and47 to i16
  call void @wm97xx_reg_write(%struct.wm97xx* %1, i16 zeroext 84, i16 zeroext %conv48)
  br label %if.end49

if.end49:                                         ; preds = %if.else45, %if.then41
  %codec_mutex50 = getelementptr inbounds %struct.wm97xx, %struct.wm97xx* %1, i32 0, i32 12
  call void @mutex_unlock(%struct.mutex* %codec_mutex50)
  br label %if.end51

if.end51:                                         ; preds = %if.end49, %if.then
  %mach_ops = getelementptr inbounds %struct.wm97xx, %struct.wm97xx* %1, i32 0, i32 11
  %5 = load %struct.wm97xx_mach_ops*, %struct.wm97xx_mach_ops** %mach_ops, align 8, !tbaa !2
  %acc_enabled = getelementptr inbounds %struct.wm97xx_mach_ops, %struct.wm97xx_mach_ops* %5, i32 0, i32 0
  %6 = load i32, i32* %acc_enabled, align 8, !tbaa !73
  %tobool52 = icmp ne i32 %6, 0
  br i1 %tobool52, label %lor.lhs.false, label %if.then55

lor.lhs.false:                                    ; preds = %if.end51
  %mach_ops53 = getelementptr inbounds %struct.wm97xx, %struct.wm97xx* %1, i32 0, i32 11
  %7 = load %struct.wm97xx_mach_ops*, %struct.wm97xx_mach_ops** %mach_ops53, align 8, !tbaa !2
  %acc_pen_down = getelementptr inbounds %struct.wm97xx_mach_ops, %struct.wm97xx_mach_ops* %7, i32 0, i32 2
  %8 = load i32 (%struct.wm97xx*)*, i32 (%struct.wm97xx*)** %acc_pen_down, align 8, !tbaa !89
  %tobool54 = icmp ne i32 (%struct.wm97xx*)* %8, null
  br i1 %tobool54, label %if.then55, label %if.end79

if.then55:                                        ; preds = %lor.lhs.false, %if.end51
  %pen_is_down56 = getelementptr inbounds %struct.wm97xx, %struct.wm97xx* %1, i32 0, i32 21
  %bf.load57 = load i8, i8* %pen_is_down56, align 4
  %bf.clear58 = and i8 %bf.load57, 1
  %bf.cast59 = zext i8 %bf.clear58 to i32
  %tobool60 = icmp eq i32 %bf.cast59, 0
  %tobool62 = icmp ne i32 %bf.cast, 0
  %or.cond = or i1 %tobool60, %tobool62
  br i1 %or.cond, label %if.end65, label %if.then63

if.then63:                                        ; preds = %if.then55
  %ts_workq = getelementptr inbounds %struct.wm97xx, %struct.wm97xx* %1, i32 0, i32 17
  %9 = load %struct.workqueue_struct*, %struct.workqueue_struct** %ts_workq, align 8, !tbaa !71
  %ts_reader = getelementptr inbounds %struct.wm97xx, %struct.wm97xx* %1, i32 0, i32 13
  call void @queue_delayed_work(%struct.workqueue_struct* %9, %struct.delayed_work* %ts_reader, i64 1)
  br label %if.end65

if.end65:                                         ; preds = %if.then63, %if.then55
  %pen_is_down66 = getelementptr inbounds %struct.wm97xx, %struct.wm97xx* %1, i32 0, i32 21
  %bf.load67 = load i8, i8* %pen_is_down66, align 4
  %bf.clear68 = and i8 %bf.load67, 1
  %bf.cast69 = zext i8 %bf.clear68 to i32
  %tobool70 = icmp eq i32 %bf.cast69, 0
  %tobool72 = icmp ne i32 %bf.cast, 0
  %or.cond1 = and i1 %tobool70, %tobool72
  br i1 %or.cond1, label %if.then73, label %if.end79

if.then73:                                        ; preds = %if.end65
  %pen_is_down74 = getelementptr inbounds %struct.wm97xx, %struct.wm97xx* %1, i32 0, i32 21
  %bf.load75 = load i8, i8* %pen_is_down74, align 4
  %bf.clear76 = and i8 %bf.load75, -2
  %bf.set77 = or i8 %bf.clear76, 1
  store i8 %bf.set77, i8* %pen_is_down74, align 4
  br label %if.end79

if.end79:                                         ; preds = %if.then73, %if.end65, %lor.lhs.false
  %pen_is_down80 = getelementptr inbounds %struct.wm97xx, %struct.wm97xx* %1, i32 0, i32 21
  %bf.load81 = load i8, i8* %pen_is_down80, align 4
  %bf.clear82 = and i8 %bf.load81, 1
  %bf.cast83 = zext i8 %bf.clear82 to i32
  %tobool84 = icmp ne i32 %bf.cast83, 0
  br i1 %tobool84, label %if.end91, label %land.lhs.true85

land.lhs.true85:                                  ; preds = %if.end79
  %mach_ops86 = getelementptr inbounds %struct.wm97xx, %struct.wm97xx* %1, i32 0, i32 11
  %10 = load %struct.wm97xx_mach_ops*, %struct.wm97xx_mach_ops** %mach_ops86, align 8, !tbaa !2
  %acc_enabled87 = getelementptr inbounds %struct.wm97xx_mach_ops, %struct.wm97xx_mach_ops* %10, i32 0, i32 0
  %11 = load i32, i32* %acc_enabled87, align 8, !tbaa !73
  %tobool88 = icmp ne i32 %11, 0
  br i1 %tobool88, label %if.then89, label %if.end91

if.then89:                                        ; preds = %land.lhs.true85
  %mach_ops90 = getelementptr inbounds %struct.wm97xx, %struct.wm97xx* %1, i32 0, i32 11
  %12 = load %struct.wm97xx_mach_ops*, %struct.wm97xx_mach_ops** %mach_ops90, align 8, !tbaa !2
  %acc_pen_up = getelementptr inbounds %struct.wm97xx_mach_ops, %struct.wm97xx_mach_ops* %12, i32 0, i32 1
  %13 = load void (%struct.wm97xx*)*, void (%struct.wm97xx*)** %acc_pen_up, align 8, !tbaa !90
  call void %13(%struct.wm97xx* %1)
  br label %if.end91

if.end91:                                         ; preds = %if.then89, %land.lhs.true85, %if.end79
  %mach_ops92 = getelementptr inbounds %struct.wm97xx, %struct.wm97xx* %1, i32 0, i32 11
  %14 = load %struct.wm97xx_mach_ops*, %struct.wm97xx_mach_ops** %mach_ops92, align 8, !tbaa !2
  %irq_enable = getelementptr inbounds %struct.wm97xx_mach_ops, %struct.wm97xx_mach_ops* %14, i32 0, i32 5
  %15 = load void (%struct.wm97xx*, i32)*, void (%struct.wm97xx*, i32)** %irq_enable, align 8, !tbaa !84
  call void %15(%struct.wm97xx* %1, i32 1)
  ret void
}

; Function Attrs: nounwind uwtable
define internal void @wm97xx_init_pen_irq(%struct.wm97xx* %wm) #0 {
entry:
  %mach_ops = getelementptr inbounds %struct.wm97xx, %struct.wm97xx* %wm, i32 0, i32 11
  %0 = load %struct.wm97xx_mach_ops*, %struct.wm97xx_mach_ops** %mach_ops, align 8, !tbaa !2
  %irq_enable = getelementptr inbounds %struct.wm97xx_mach_ops, %struct.wm97xx_mach_ops* %0, i32 0, i32 5
  %1 = load void (%struct.wm97xx*, i32)*, void (%struct.wm97xx*, i32)** %irq_enable, align 8, !tbaa !84
  %tobool = icmp ne void (%struct.wm97xx*, i32)* %1, null
  %lnot = xor i1 %tobool, true
  %lnot1 = xor i1 %lnot, true
  %lnot2 = xor i1 %lnot1, true
  %lnot.ext = zext i1 %lnot2 to i32
  %conv = sext i32 %lnot.ext to i64
  %expval = call i64 @llvm.expect.i64(i64 %conv, i64 0)
  %tobool3 = icmp ne i64 %expval, 0
  br i1 %tobool3, label %do.body4, label %do.end9

do.body4:                                         ; preds = %entry
  call void asm sideeffect "1:\09ud2\0A.pushsection __bug_table,\22a\22\0A2:\09.long 1b - 2b, ${0:c} - 2b\0A\09.word ${1:c}, 0\0A\09.org 2b+${2:c}\0A.popsection", "i,i,i,~{dirflag},~{fpsr},~{flags}"(i8* getelementptr inbounds ([40 x i8], [40 x i8]* @.str.19, i32 0, i32 0), i32 383, i64 12) #6, !srcloc !91
  br label %do.body5

do.body5:                                         ; preds = %do.body5, %do.body4
  br label %do.body5

do.end9:                                          ; preds = %entry
  %pen_irq = getelementptr inbounds %struct.wm97xx, %struct.wm97xx* %wm, i32 0, i32 16
  %2 = load i32, i32* %pen_irq, align 8, !tbaa !68
  %3 = bitcast %struct.wm97xx* %wm to i8*
  %call = call i32 @request_irq(i32 %2, i32 (i32, i8*)* @wm97xx_pen_interrupt, i64 128, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.28, i32 0, i32 0), i8* %3)
  %tobool10 = icmp ne i32 %call, 0
  br i1 %tobool10, label %if.then11, label %if.end14

if.then11:                                        ; preds = %do.end9
  %4 = call i32 (%struct.device*, i8*, ...) @dev_err(%struct.device* null, i8* null)
  %pen_irq13 = getelementptr inbounds %struct.wm97xx, %struct.wm97xx* %wm, i32 0, i32 16
  store i32 0, i32* %pen_irq13, align 8, !tbaa !68
  br label %cleanup

if.end14:                                         ; preds = %do.end9
  %id = getelementptr inbounds %struct.wm97xx, %struct.wm97xx* %wm, i32 0, i32 1
  %5 = load i16, i16* %id, align 2, !tbaa !21
  %conv15 = zext i16 %5 to i32
  %cmp = icmp ne i32 %conv15, 19461
  br i1 %cmp, label %do.body18, label %cleanup

do.body18:                                        ; preds = %if.end14
  %mach_ops19 = getelementptr inbounds %struct.wm97xx, %struct.wm97xx* %wm, i32 0, i32 11
  %6 = load %struct.wm97xx_mach_ops*, %struct.wm97xx_mach_ops** %mach_ops19, align 8, !tbaa !2
  %irq_gpio = getelementptr inbounds %struct.wm97xx_mach_ops, %struct.wm97xx_mach_ops* %6, i32 0, i32 6
  %7 = load i32, i32* %irq_gpio, align 8, !tbaa !82
  %tobool20 = icmp ne i32 %7, 0
  %lnot21 = xor i1 %tobool20, true
  %lnot23 = xor i1 %lnot21, true
  %lnot25 = xor i1 %lnot23, true
  %lnot.ext26 = zext i1 %lnot25 to i32
  %conv27 = sext i32 %lnot.ext26 to i64
  %expval28 = call i64 @llvm.expect.i64(i64 %conv27, i64 0)
  %tobool29 = icmp ne i64 %expval28, 0
  br i1 %tobool29, label %do.body31, label %do.end39

do.body31:                                        ; preds = %do.body18
  call void asm sideeffect "1:\09ud2\0A.pushsection __bug_table,\22a\22\0A2:\09.long 1b - 2b, ${0:c} - 2b\0A\09.word ${1:c}, 0\0A\09.org 2b+${2:c}\0A.popsection", "i,i,i,~{dirflag},~{fpsr},~{flags}"(i8* getelementptr inbounds ([40 x i8], [40 x i8]* @.str.19, i32 0, i32 0), i32 395, i64 12) #6, !srcloc !92
  br label %do.body32

do.body32:                                        ; preds = %do.body32, %do.body31
  br label %do.body32

do.end39:                                         ; preds = %do.body18
  %call40 = call i32 @wm97xx_reg_read(%struct.wm97xx* %wm, i16 zeroext 86)
  %conv41 = trunc i32 %call40 to i16
  %conv42 = zext i16 %conv41 to i32
  %mach_ops43 = getelementptr inbounds %struct.wm97xx, %struct.wm97xx* %wm, i32 0, i32 11
  %8 = load %struct.wm97xx_mach_ops*, %struct.wm97xx_mach_ops** %mach_ops43, align 8, !tbaa !2
  %irq_gpio44 = getelementptr inbounds %struct.wm97xx_mach_ops, %struct.wm97xx_mach_ops* %8, i32 0, i32 6
  %9 = load i32, i32* %irq_gpio44, align 8, !tbaa !82
  %neg = xor i32 %9, -1
  %and = and i32 %conv42, %neg
  %conv45 = trunc i32 %and to i16
  call void @wm97xx_reg_write(%struct.wm97xx* %wm, i16 zeroext 86, i16 zeroext %conv45)
  %call46 = call i32 @wm97xx_reg_read(%struct.wm97xx* %wm, i16 zeroext 90)
  %conv47 = trunc i32 %call46 to i16
  %conv48 = zext i16 %conv47 to i32
  %and49 = and i32 %conv48, -2
  %conv50 = trunc i32 %and49 to i16
  call void @wm97xx_reg_write(%struct.wm97xx* %wm, i16 zeroext 90, i16 zeroext %conv50)
  br label %cleanup

cleanup:                                          ; preds = %do.end39, %if.end14, %if.then11
  ret void
}

; Function Attrs: nounwind uwtable
define internal i32 @wm97xx_pen_interrupt(i32 %irq, i8* %dev_id) #0 {
entry:
  %0 = bitcast i8* %dev_id to %struct.wm97xx*
  %pen_event_work = getelementptr inbounds %struct.wm97xx, %struct.wm97xx* %0, i32 0, i32 18
  %data = getelementptr inbounds %struct.work_struct, %struct.work_struct* %pen_event_work, i32 0, i32 0
  %1 = bitcast %struct.pgprot* %data to i64*
  %2 = load volatile i64, i64* %1, align 8, !tbaa !78
  %and.i = and i64 1, %2
  %cmp.i = icmp ne i64 %and.i, 0
  %conv.i = zext i1 %cmp.i to i32
  %tobool = icmp ne i32 %conv.i, 0
  br i1 %tobool, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  %mach_ops = getelementptr inbounds %struct.wm97xx, %struct.wm97xx* %0, i32 0, i32 11
  %3 = load %struct.wm97xx_mach_ops*, %struct.wm97xx_mach_ops** %mach_ops, align 8, !tbaa !2
  %irq_enable = getelementptr inbounds %struct.wm97xx_mach_ops, %struct.wm97xx_mach_ops* %3, i32 0, i32 5
  %4 = load void (%struct.wm97xx*, i32)*, void (%struct.wm97xx*, i32)** %irq_enable, align 8, !tbaa !84
  call void %4(%struct.wm97xx* %0, i32 0)
  %ts_workq = getelementptr inbounds %struct.wm97xx, %struct.wm97xx* %0, i32 0, i32 17
  %5 = load %struct.workqueue_struct*, %struct.workqueue_struct** %ts_workq, align 8, !tbaa !71
  %pen_event_work5 = getelementptr inbounds %struct.wm97xx, %struct.wm97xx* %0, i32 0, i32 18
  call void @queue_work(%struct.workqueue_struct* %5, %struct.work_struct* %pen_event_work5)
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  ret i32 1
}

; Function Attrs: inlinehint nounwind uwtable
define internal i32 @request_irq(i32 %irq, i32 (i32, i8*)* %handler, i64 %flags, i8* %name, i8* %dev) #4 {
entry:
  %call = call i32 @request_threaded_irq(i32 %irq, i32 (i32, i8*)* %handler, i32 (i32, i8*)* null, i64 %flags, i8* %name, i8* %dev)
  ret i32 %call
}

declare i32 @request_threaded_irq(i32, i32 (i32, i8*)*, i32 (i32, i8*)*, i64, i8*, i8*) #1

; Function Attrs: inlinehint nounwind uwtable
define internal void @queue_work(%struct.workqueue_struct* %wq, %struct.work_struct* %work) #4 {
entry:
  %call = call zeroext i1 @queue_work_on(i32 4096, %struct.workqueue_struct* %wq, %struct.work_struct* %work)
  ret void
}

declare zeroext i1 @queue_work_on(i32, %struct.workqueue_struct*, %struct.work_struct*) #1

; Function Attrs: nounwind uwtable
define internal i32 @wm97xx_read_samples(%struct.wm97xx* %wm) #0 {
entry:
  %data = alloca %struct.wm97xx_data, align 4
  %codec_mutex = getelementptr inbounds %struct.wm97xx, %struct.wm97xx* %wm, i32 0, i32 12
  call void @mutex_lock_nested(%struct.mutex* %codec_mutex, i32 0)
  %mach_ops = getelementptr inbounds %struct.wm97xx, %struct.wm97xx* %wm, i32 0, i32 11
  %0 = load %struct.wm97xx_mach_ops*, %struct.wm97xx_mach_ops** %mach_ops, align 8, !tbaa !2
  %tobool = icmp ne %struct.wm97xx_mach_ops* %0, null
  br i1 %tobool, label %land.lhs.true, label %if.else

land.lhs.true:                                    ; preds = %entry
  %mach_ops1 = getelementptr inbounds %struct.wm97xx, %struct.wm97xx* %wm, i32 0, i32 11
  %1 = load %struct.wm97xx_mach_ops*, %struct.wm97xx_mach_ops** %mach_ops1, align 8, !tbaa !2
  %acc_enabled = getelementptr inbounds %struct.wm97xx_mach_ops, %struct.wm97xx_mach_ops* %1, i32 0, i32 0
  %2 = load i32, i32* %acc_enabled, align 8, !tbaa !73
  %tobool2 = icmp ne i32 %2, 0
  br i1 %tobool2, label %if.then, label %if.else

if.then:                                          ; preds = %land.lhs.true
  %mach_ops3 = getelementptr inbounds %struct.wm97xx, %struct.wm97xx* %wm, i32 0, i32 11
  %3 = load %struct.wm97xx_mach_ops*, %struct.wm97xx_mach_ops** %mach_ops3, align 8, !tbaa !2
  %acc_pen_down = getelementptr inbounds %struct.wm97xx_mach_ops, %struct.wm97xx_mach_ops* %3, i32 0, i32 2
  %4 = load i32 (%struct.wm97xx*)*, i32 (%struct.wm97xx*)** %acc_pen_down, align 8, !tbaa !89
  %call = call i32 %4(%struct.wm97xx* %wm)
  br label %if.end

if.else:                                          ; preds = %land.lhs.true, %entry
  %codec = getelementptr inbounds %struct.wm97xx, %struct.wm97xx* %wm, i32 0, i32 5
  %5 = load %struct.wm97xx_codec_drv*, %struct.wm97xx_codec_drv** %codec, align 8, !tbaa !23
  %poll_touch = getelementptr inbounds %struct.wm97xx_codec_drv, %struct.wm97xx_codec_drv* %5, i32 0, i32 3
  %6 = load i32 (%struct.wm97xx*, %struct.wm97xx_data*)*, i32 (%struct.wm97xx*, %struct.wm97xx_data*)** %poll_touch, align 8, !tbaa !93
  %call4 = call i32 %6(%struct.wm97xx* %wm, %struct.wm97xx_data* %data)
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then
  %rc.0 = phi i32 [ %call, %if.then ], [ %call4, %if.else ]
  %and = and i32 %rc.0, 4
  %tobool5 = icmp ne i32 %and, 0
  br i1 %tobool5, label %if.then6, label %if.else36

if.then6:                                         ; preds = %if.end
  %pen_is_down = getelementptr inbounds %struct.wm97xx, %struct.wm97xx* %wm, i32 0, i32 21
  %bf.load = load i8, i8* %pen_is_down, align 4
  %bf.clear = and i8 %bf.load, 1
  %bf.cast = zext i8 %bf.clear to i32
  %tobool7 = icmp ne i32 %bf.cast, 0
  br i1 %tobool7, label %if.then8, label %if.else26

if.then8:                                         ; preds = %if.then6
  %pen_is_down9 = getelementptr inbounds %struct.wm97xx, %struct.wm97xx* %wm, i32 0, i32 21
  %bf.load10 = load i8, i8* %pen_is_down9, align 4
  %bf.clear11 = and i8 %bf.load10, -2
  store i8 %bf.clear11, i8* %pen_is_down9, align 4
  %bf.load13 = load i32, i32* getelementptr inbounds (%struct._ddebug, %struct._ddebug* bitcast ({ i8*, i8*, i8*, i8*, i8, i8, i8, i8 }* @wm97xx_read_samples.descriptor to %struct._ddebug*), i32 0, i32 4), align 8
  %bf.lshr = lshr i32 %bf.load13, 18
  %bf.clear14 = and i32 %bf.lshr, 255
  %and15 = and i32 %bf.clear14, 1
  %tobool16 = icmp ne i32 %and15, 0
  %lnot = xor i1 %tobool16, true
  %lnot17 = xor i1 %lnot, true
  %lnot.ext = zext i1 %lnot17 to i32
  %conv = sext i32 %lnot.ext to i64
  %expval = call i64 @llvm.expect.i64(i64 %conv, i64 0)
  %tobool18 = icmp ne i64 %expval, 0
  br i1 %tobool18, label %if.then19, label %do.end23

if.then19:                                        ; preds = %if.then8
  %dev = getelementptr inbounds %struct.wm97xx, %struct.wm97xx* %wm, i32 0, i32 8
  %7 = load %struct.device*, %struct.device** %dev, align 8, !tbaa !42
  call void (%struct._ddebug*, %struct.device*, i8*, ...) @__dynamic_dev_dbg(%struct._ddebug* bitcast ({ i8*, i8*, i8*, i8*, i8, i8, i8, i8 }* @wm97xx_read_samples.descriptor to %struct._ddebug*), %struct.device* %7, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.21, i32 0, i32 0))
  br label %do.end23

do.end23:                                         ; preds = %if.then19, %if.then8
  %input_dev = getelementptr inbounds %struct.wm97xx, %struct.wm97xx* %wm, i32 0, i32 6
  %8 = load %struct.input_dev*, %struct.input_dev** %input_dev, align 8, !tbaa !20
  call void @input_report_abs(%struct.input_dev* %8, i32 24, i32 0)
  %input_dev24 = getelementptr inbounds %struct.wm97xx, %struct.wm97xx* %wm, i32 0, i32 6
  %9 = load %struct.input_dev*, %struct.input_dev** %input_dev24, align 8, !tbaa !20
  call void @input_report_key(%struct.input_dev* %9, i32 330, i32 0)
  %input_dev25 = getelementptr inbounds %struct.wm97xx, %struct.wm97xx* %wm, i32 0, i32 6
  %10 = load %struct.input_dev*, %struct.input_dev** %input_dev25, align 8, !tbaa !20
  call void @input_sync(%struct.input_dev* %10)
  br label %out

if.else26:                                        ; preds = %if.then6
  %and27 = and i32 %rc.0, 1
  %tobool28 = icmp ne i32 %and27, 0
  br i1 %tobool28, label %out, label %if.then29

if.then29:                                        ; preds = %if.else26
  %ts_reader_interval = getelementptr inbounds %struct.wm97xx, %struct.wm97xx* %wm, i32 0, i32 14
  %11 = load i64, i64* %ts_reader_interval, align 8, !tbaa !70
  %cmp = icmp ult i64 %11, 25
  br i1 %cmp, label %if.then31, label %out

if.then31:                                        ; preds = %if.then29
  %ts_reader_interval32 = getelementptr inbounds %struct.wm97xx, %struct.wm97xx* %wm, i32 0, i32 14
  %12 = load i64, i64* %ts_reader_interval32, align 8, !tbaa !70
  %inc = add i64 %12, 1
  store i64 %inc, i64* %ts_reader_interval32, align 8, !tbaa !70
  br label %out

if.else36:                                        ; preds = %if.end
  %and37 = and i32 %rc.0, 2
  %tobool38 = icmp ne i32 %and37, 0
  br i1 %tobool38, label %do.body41, label %if.else127

do.body41:                                        ; preds = %if.else36
  %bf.load42 = load i32, i32* getelementptr inbounds (%struct._ddebug, %struct._ddebug* bitcast ({ i8*, i8*, i8*, i8*, i8, i8, i8, i8 }* @wm97xx_read_samples.descriptor.22 to %struct._ddebug*), i32 0, i32 4), align 8
  %bf.lshr43 = lshr i32 %bf.load42, 18
  %bf.clear44 = and i32 %bf.lshr43, 255
  %and45 = and i32 %bf.clear44, 1
  %tobool46 = icmp ne i32 %and45, 0
  %lnot47 = xor i1 %tobool46, true
  %lnot49 = xor i1 %lnot47, true
  %lnot.ext50 = zext i1 %lnot49 to i32
  %conv51 = sext i32 %lnot.ext50 to i64
  %expval52 = call i64 @llvm.expect.i64(i64 %conv51, i64 0)
  %tobool53 = icmp ne i64 %expval52, 0
  br i1 %tobool53, label %if.then54, label %do.end69

if.then54:                                        ; preds = %do.body41
  %dev55 = getelementptr inbounds %struct.wm97xx, %struct.wm97xx* %wm, i32 0, i32 8
  %13 = load %struct.device*, %struct.device** %dev55, align 8, !tbaa !42
  %x = getelementptr inbounds %struct.wm97xx_data, %struct.wm97xx_data* %data, i32 0, i32 0
  %14 = load i32, i32* %x, align 4, !tbaa !94
  %shr = ashr i32 %14, 12
  %x56 = getelementptr inbounds %struct.wm97xx_data, %struct.wm97xx_data* %data, i32 0, i32 0
  %15 = load i32, i32* %x56, align 4, !tbaa !94
  %and57 = and i32 %15, 4095
  %y = getelementptr inbounds %struct.wm97xx_data, %struct.wm97xx_data* %data, i32 0, i32 1
  %16 = load i32, i32* %y, align 4, !tbaa !96
  %shr58 = ashr i32 %16, 12
  %y59 = getelementptr inbounds %struct.wm97xx_data, %struct.wm97xx_data* %data, i32 0, i32 1
  %17 = load i32, i32* %y59, align 4, !tbaa !96
  %and60 = and i32 %17, 4095
  %p = getelementptr inbounds %struct.wm97xx_data, %struct.wm97xx_data* %data, i32 0, i32 2
  %18 = load i32, i32* %p, align 4, !tbaa !97
  %shr61 = ashr i32 %18, 12
  %p62 = getelementptr inbounds %struct.wm97xx_data, %struct.wm97xx_data* %data, i32 0, i32 2
  %19 = load i32, i32* %p62, align 4, !tbaa !97
  %and63 = and i32 %19, 4095
  call void (%struct._ddebug*, %struct.device*, i8*, ...) @__dynamic_dev_dbg(%struct._ddebug* bitcast ({ i8*, i8*, i8*, i8*, i8, i8, i8, i8 }* @wm97xx_read_samples.descriptor.22 to %struct._ddebug*), %struct.device* %13, i8* getelementptr inbounds ([44 x i8], [44 x i8]* @.str.23, i32 0, i32 0), i32 %shr, i32 %and57, i32 %shr58, i32 %and60, i32 %shr61, i32 %and63)
  br label %do.end69

do.end69:                                         ; preds = %if.then54, %do.body41
  %20 = load i32, i32* getelementptr inbounds ([3 x i32], [3 x i32]* @abs_x, i64 0, i64 0), align 4, !tbaa !52
  %x70 = getelementptr inbounds %struct.wm97xx_data, %struct.wm97xx_data* %data, i32 0, i32 0
  %21 = load i32, i32* %x70, align 4, !tbaa !94
  %and71 = and i32 %21, 4095
  %cmp72 = icmp sgt i32 %20, %and71
  br i1 %cmp72, label %do.body90, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %do.end69
  %22 = load i32, i32* getelementptr inbounds ([3 x i32], [3 x i32]* @abs_x, i64 0, i64 1), align 4, !tbaa !52
  %x74 = getelementptr inbounds %struct.wm97xx_data, %struct.wm97xx_data* %data, i32 0, i32 0
  %23 = load i32, i32* %x74, align 4, !tbaa !94
  %and75 = and i32 %23, 4095
  %cmp76 = icmp slt i32 %22, %and75
  br i1 %cmp76, label %do.body90, label %lor.lhs.false78

lor.lhs.false78:                                  ; preds = %lor.lhs.false
  %24 = load i32, i32* getelementptr inbounds ([3 x i32], [3 x i32]* @abs_y, i64 0, i64 0), align 4, !tbaa !52
  %y79 = getelementptr inbounds %struct.wm97xx_data, %struct.wm97xx_data* %data, i32 0, i32 1
  %25 = load i32, i32* %y79, align 4, !tbaa !96
  %and80 = and i32 %25, 4095
  %cmp81 = icmp sgt i32 %24, %and80
  br i1 %cmp81, label %do.body90, label %lor.lhs.false83

lor.lhs.false83:                                  ; preds = %lor.lhs.false78
  %26 = load i32, i32* getelementptr inbounds ([3 x i32], [3 x i32]* @abs_y, i64 0, i64 1), align 4, !tbaa !52
  %y84 = getelementptr inbounds %struct.wm97xx_data, %struct.wm97xx_data* %data, i32 0, i32 1
  %27 = load i32, i32* %y84, align 4, !tbaa !96
  %and85 = and i32 %27, 4095
  %cmp86 = icmp slt i32 %26, %and85
  br i1 %cmp86, label %do.body90, label %if.end111

do.body90:                                        ; preds = %lor.lhs.false83, %lor.lhs.false78, %lor.lhs.false, %do.end69
  %bf.load91 = load i32, i32* getelementptr inbounds (%struct._ddebug, %struct._ddebug* bitcast ({ i8*, i8*, i8*, i8*, i8, i8, i8, i8 }* @wm97xx_read_samples.descriptor.24 to %struct._ddebug*), i32 0, i32 4), align 8
  %bf.lshr92 = lshr i32 %bf.load91, 18
  %bf.clear93 = and i32 %bf.lshr92, 255
  %and94 = and i32 %bf.clear93, 1
  %tobool95 = icmp ne i32 %and94, 0
  %lnot96 = xor i1 %tobool95, true
  %lnot98 = xor i1 %lnot96, true
  %lnot.ext99 = zext i1 %lnot98 to i32
  %conv100 = sext i32 %lnot.ext99 to i64
  %expval101 = call i64 @llvm.expect.i64(i64 %conv100, i64 0)
  %tobool102 = icmp ne i64 %expval101, 0
  br i1 %tobool102, label %if.then103, label %out

if.then103:                                       ; preds = %do.body90
  %dev104 = getelementptr inbounds %struct.wm97xx, %struct.wm97xx* %wm, i32 0, i32 8
  %28 = load %struct.device*, %struct.device** %dev104, align 8, !tbaa !42
  call void (%struct._ddebug*, %struct.device*, i8*, ...) @__dynamic_dev_dbg(%struct._ddebug* bitcast ({ i8*, i8*, i8*, i8*, i8, i8, i8, i8 }* @wm97xx_read_samples.descriptor.24 to %struct._ddebug*), %struct.device* %28, i8* getelementptr inbounds ([39 x i8], [39 x i8]* @.str.25, i32 0, i32 0))
  br label %out

if.end111:                                        ; preds = %lor.lhs.false83
  %input_dev112 = getelementptr inbounds %struct.wm97xx, %struct.wm97xx* %wm, i32 0, i32 6
  %29 = load %struct.input_dev*, %struct.input_dev** %input_dev112, align 8, !tbaa !20
  %x113 = getelementptr inbounds %struct.wm97xx_data, %struct.wm97xx_data* %data, i32 0, i32 0
  %30 = load i32, i32* %x113, align 4, !tbaa !94
  %and114 = and i32 %30, 4095
  call void @input_report_abs(%struct.input_dev* %29, i32 0, i32 %and114)
  %input_dev115 = getelementptr inbounds %struct.wm97xx, %struct.wm97xx* %wm, i32 0, i32 6
  %31 = load %struct.input_dev*, %struct.input_dev** %input_dev115, align 8, !tbaa !20
  %y116 = getelementptr inbounds %struct.wm97xx_data, %struct.wm97xx_data* %data, i32 0, i32 1
  %32 = load i32, i32* %y116, align 4, !tbaa !96
  %and117 = and i32 %32, 4095
  call void @input_report_abs(%struct.input_dev* %31, i32 1, i32 %and117)
  %input_dev118 = getelementptr inbounds %struct.wm97xx, %struct.wm97xx* %wm, i32 0, i32 6
  %33 = load %struct.input_dev*, %struct.input_dev** %input_dev118, align 8, !tbaa !20
  %p119 = getelementptr inbounds %struct.wm97xx_data, %struct.wm97xx_data* %data, i32 0, i32 2
  %34 = load i32, i32* %p119, align 4, !tbaa !97
  %and120 = and i32 %34, 4095
  call void @input_report_abs(%struct.input_dev* %33, i32 24, i32 %and120)
  %input_dev121 = getelementptr inbounds %struct.wm97xx, %struct.wm97xx* %wm, i32 0, i32 6
  %35 = load %struct.input_dev*, %struct.input_dev** %input_dev121, align 8, !tbaa !20
  call void @input_report_key(%struct.input_dev* %35, i32 330, i32 1)
  %input_dev122 = getelementptr inbounds %struct.wm97xx, %struct.wm97xx* %wm, i32 0, i32 6
  %36 = load %struct.input_dev*, %struct.input_dev** %input_dev122, align 8, !tbaa !20
  call void @input_sync(%struct.input_dev* %36)
  %pen_is_down123 = getelementptr inbounds %struct.wm97xx, %struct.wm97xx* %wm, i32 0, i32 21
  %bf.load124 = load i8, i8* %pen_is_down123, align 4
  %bf.clear125 = and i8 %bf.load124, -2
  %bf.set = or i8 %bf.clear125, 1
  store i8 %bf.set, i8* %pen_is_down123, align 4
  %ts_reader_min_interval = getelementptr inbounds %struct.wm97xx, %struct.wm97xx* %wm, i32 0, i32 15
  %37 = load i64, i64* %ts_reader_min_interval, align 8, !tbaa !69
  %ts_reader_interval126 = getelementptr inbounds %struct.wm97xx, %struct.wm97xx* %wm, i32 0, i32 14
  store i64 %37, i64* %ts_reader_interval126, align 8, !tbaa !70
  br label %out

if.else127:                                       ; preds = %if.else36
  %and128 = and i32 %rc.0, 8
  %tobool129 = icmp ne i32 %and128, 0
  br i1 %tobool129, label %do.body132, label %out

do.body132:                                       ; preds = %if.else127
  %bf.load133 = load i32, i32* getelementptr inbounds (%struct._ddebug, %struct._ddebug* bitcast ({ i8*, i8*, i8*, i8*, i8, i8, i8, i8 }* @wm97xx_read_samples.descriptor.26 to %struct._ddebug*), i32 0, i32 4), align 8
  %bf.lshr134 = lshr i32 %bf.load133, 18
  %bf.clear135 = and i32 %bf.lshr134, 255
  %and136 = and i32 %bf.clear135, 1
  %tobool137 = icmp ne i32 %and136, 0
  %lnot138 = xor i1 %tobool137, true
  %lnot140 = xor i1 %lnot138, true
  %lnot.ext141 = zext i1 %lnot140 to i32
  %conv142 = sext i32 %lnot.ext141 to i64
  %expval143 = call i64 @llvm.expect.i64(i64 %conv142, i64 0)
  %tobool144 = icmp ne i64 %expval143, 0
  br i1 %tobool144, label %if.then145, label %do.end152

if.then145:                                       ; preds = %do.body132
  %dev146 = getelementptr inbounds %struct.wm97xx, %struct.wm97xx* %wm, i32 0, i32 8
  %38 = load %struct.device*, %struct.device** %dev146, align 8, !tbaa !42
  call void (%struct._ddebug*, %struct.device*, i8*, ...) @__dynamic_dev_dbg(%struct._ddebug* bitcast ({ i8*, i8*, i8*, i8*, i8, i8, i8, i8 }* @wm97xx_read_samples.descriptor.26 to %struct._ddebug*), %struct.device* %38, i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.27, i32 0, i32 0))
  br label %do.end152

do.end152:                                        ; preds = %if.then145, %do.body132
  %pen_is_down153 = getelementptr inbounds %struct.wm97xx, %struct.wm97xx* %wm, i32 0, i32 21
  %bf.load154 = load i8, i8* %pen_is_down153, align 4
  %bf.clear155 = and i8 %bf.load154, -2
  %bf.set156 = or i8 %bf.clear155, 1
  store i8 %bf.set156, i8* %pen_is_down153, align 4
  %ts_reader_min_interval157 = getelementptr inbounds %struct.wm97xx, %struct.wm97xx* %wm, i32 0, i32 15
  %39 = load i64, i64* %ts_reader_min_interval157, align 8, !tbaa !69
  %ts_reader_interval158 = getelementptr inbounds %struct.wm97xx, %struct.wm97xx* %wm, i32 0, i32 14
  store i64 %39, i64* %ts_reader_interval158, align 8, !tbaa !70
  br label %out

out:                                              ; preds = %do.end152, %if.else127, %if.end111, %if.then103, %do.body90, %if.then31, %if.then29, %if.else26, %do.end23
  %rc.1 = phi i32 [ 1, %if.then103 ], [ 1, %do.body90 ], [ %rc.0, %if.end111 ], [ %rc.0, %do.end152 ], [ %rc.0, %if.else127 ], [ %rc.0, %do.end23 ], [ %rc.0, %if.then29 ], [ %rc.0, %if.then31 ], [ %rc.0, %if.else26 ]
  %codec_mutex162 = getelementptr inbounds %struct.wm97xx, %struct.wm97xx* %wm, i32 0, i32 12
  call void @mutex_unlock(%struct.mutex* %codec_mutex162)
  ret i32 %rc.1
}

; Function Attrs: inlinehint nounwind uwtable
define internal void @input_report_abs(%struct.input_dev* %dev, i32 %code, i32 %value) #4 {
entry:
  call void @input_event(%struct.input_dev* %dev, i32 3, i32 %code, i32 %value)
  ret void
}

; Function Attrs: inlinehint nounwind uwtable
define internal void @input_report_key(%struct.input_dev* %dev, i32 %code, i32 %value) #4 {
entry:
  %tobool = icmp ne i32 %value, 0
  %lnot = xor i1 %tobool, true
  %lnot1 = xor i1 %lnot, true
  %lnot.ext = zext i1 %lnot1 to i32
  call void @input_event(%struct.input_dev* %dev, i32 1, i32 %code, i32 %lnot.ext)
  ret void
}

; Function Attrs: inlinehint nounwind uwtable
define internal void @input_sync(%struct.input_dev* %dev) #4 {
entry:
  call void @input_event(%struct.input_dev* %dev, i32 0, i32 0, i32 0)
  ret void
}

declare void @input_event(%struct.input_dev*, i32, i32, i32) #1

declare i8* @__kmalloc(i64, i32) #1

; Function Attrs: nounwind uwtable
define internal void @wm97xx_exit() #3 section ".exit.text" {
entry:
  call void @driver_unregister(%struct.device_driver* @wm97xx_driver)
  ret void
}

declare void @driver_unregister(%struct.device_driver*) #1

; Function Attrs: nounwind uwtable
define internal i32 @wm9705_poll_sample(%struct.wm97xx.3* %wm, i32 %adcsel, i32* %sample) #0 {
entry:
  %0 = load i32, i32* @delay, align 4, !tbaa !52
  %mul = mul nsw i32 5, %0
  %and = and i32 %adcsel, 32768
  %tobool = icmp ne i32 %and, 0
  %frombool = zext i1 %tobool to i8
  %tobool1 = trunc i8 %frombool to i1
  br i1 %tobool1, label %land.lhs.true, label %if.end10

land.lhs.true:                                    ; preds = %entry
  %pen_probably_down = getelementptr inbounds %struct.wm97xx.3, %struct.wm97xx.3* %wm, i32 0, i32 21
  %bf.load = load i8, i8* %pen_probably_down, align 4
  %bf.lshr = lshr i8 %bf.load, 2
  %bf.clear = and i8 %bf.lshr, 1
  %bf.cast = zext i8 %bf.clear to i32
  %tobool2 = icmp ne i32 %bf.cast, 0
  br i1 %tobool2, label %if.end10, label %if.then

if.then:                                          ; preds = %land.lhs.true
  %call = call i32 bitcast (i32 (%struct.wm97xx*, i16)* @wm97xx_reg_read to i32 (%struct.wm97xx.3*, i16)*)(%struct.wm97xx.3* %wm, i16 zeroext 122)
  %conv = trunc i32 %call to i16
  %conv3 = zext i16 %conv to i32
  %and4 = and i32 %conv3, 32768
  %tobool5 = icmp ne i32 %and4, 0
  br i1 %tobool5, label %if.end, label %LeafBlock

if.end:                                           ; preds = %if.then
  %pen_probably_down7 = getelementptr inbounds %struct.wm97xx.3, %struct.wm97xx.3* %wm, i32 0, i32 21
  %bf.load8 = load i8, i8* %pen_probably_down7, align 4
  %bf.clear9 = and i8 %bf.load8, -5
  %bf.set = or i8 %bf.clear9, 4
  store i8 %bf.set, i8* %pen_probably_down7, align 4
  br label %LeafBlock

LeafBlock:                                        ; preds = %if.end, %if.then
  %cleanup.dest.slot.0 = phi i32 [ 0, %if.end ], [ 1, %if.then ]
  %SwitchLeaf = icmp eq i32 %cleanup.dest.slot.0, 0
  br i1 %SwitchLeaf, label %if.end10, label %cleanup99

if.end10:                                         ; preds = %LeafBlock, %land.lhs.true, %entry
  %mach_ops = getelementptr inbounds %struct.wm97xx.3, %struct.wm97xx.3* %wm, i32 0, i32 11
  %1 = load %struct.wm97xx_mach_ops.9*, %struct.wm97xx_mach_ops.9** %mach_ops, align 8, !tbaa !2
  %tobool11 = icmp ne %struct.wm97xx_mach_ops.9* %1, null
  br i1 %tobool11, label %land.lhs.true12, label %if.end18

land.lhs.true12:                                  ; preds = %if.end10
  %mach_ops13 = getelementptr inbounds %struct.wm97xx.3, %struct.wm97xx.3* %wm, i32 0, i32 11
  %2 = load %struct.wm97xx_mach_ops.9*, %struct.wm97xx_mach_ops.9** %mach_ops13, align 8, !tbaa !2
  %pre_sample = getelementptr inbounds %struct.wm97xx_mach_ops.9, %struct.wm97xx_mach_ops.9* %2, i32 0, i32 7
  %3 = load void (i32)*, void (i32)** %pre_sample, align 8, !tbaa !98
  %tobool14 = icmp ne void (i32)* %3, null
  br i1 %tobool14, label %if.then15, label %if.end18

if.then15:                                        ; preds = %land.lhs.true12
  %mach_ops16 = getelementptr inbounds %struct.wm97xx.3, %struct.wm97xx.3* %wm, i32 0, i32 11
  %4 = load %struct.wm97xx_mach_ops.9*, %struct.wm97xx_mach_ops.9** %mach_ops16, align 8, !tbaa !2
  %pre_sample17 = getelementptr inbounds %struct.wm97xx_mach_ops.9, %struct.wm97xx_mach_ops.9* %4, i32 0, i32 7
  %5 = load void (i32)*, void (i32)** %pre_sample17, align 8, !tbaa !98
  call void @simpll__indirect_1(i32 %adcsel, void (i32)* %5)
  br label %if.end18

if.end18:                                         ; preds = %if.then15, %land.lhs.true12, %if.end10
  %and19 = and i32 %adcsel, 28672
  %or = or i32 %and19, 32768
  %6 = load i32, i32* @delay, align 4, !tbaa !52
  %shl = shl i32 %6, 4
  %and20 = and i32 %shl, 240
  %or21 = or i32 %or, %and20
  %conv22 = trunc i32 %or21 to i16
  call void bitcast (void (%struct.wm97xx*, i16, i16)* @wm97xx_reg_write to void (%struct.wm97xx.3*, i16, i16)*)(%struct.wm97xx.3* %wm, i16 zeroext 118, i16 zeroext %conv22)
  %7 = load i32, i32* @delay, align 4, !tbaa !52
  call void @poll_delay(i32 %7)
  br label %while.cond

while.cond:                                       ; preds = %while.body, %if.end18
  %timeout.0 = phi i32 [ %mul, %if.end18 ], [ %dec, %while.body ]
  %call23 = call i32 bitcast (i32 (%struct.wm97xx*, i16)* @wm97xx_reg_read to i32 (%struct.wm97xx.3*, i16)*)(%struct.wm97xx.3* %wm, i16 zeroext 118)
  %and24 = and i32 %call23, 32768
  %tobool25 = icmp ne i32 %and24, 0
  %tobool26 = icmp ne i32 %timeout.0, 0
  %tobool26. = select i1 %tobool25, i1 %tobool26, i1 false
  br i1 %tobool26., label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  call void @__const_udelay(i64 90195)
  %dec = add nsw i32 %timeout.0, -1
  br label %while.cond

while.end:                                        ; preds = %while.cond
  %cmp = icmp eq i32 %timeout.0, 0
  br i1 %cmp, label %if.then28, label %if.end50

if.then28:                                        ; preds = %while.end
  %call29 = call i32 @is_pden(%struct.wm97xx.3* %wm)
  %tobool30 = icmp ne i32 %call29, 0
  br i1 %tobool30, label %if.then31, label %do.body35

if.then31:                                        ; preds = %if.then28
  %pen_probably_down32 = getelementptr inbounds %struct.wm97xx.3, %struct.wm97xx.3* %wm, i32 0, i32 21
  %bf.load33 = load i8, i8* %pen_probably_down32, align 4
  %bf.clear34 = and i8 %bf.load33, -5
  store i8 %bf.clear34, i8* %pen_probably_down32, align 4
  br label %cleanup99

do.body35:                                        ; preds = %if.then28
  %bf.load36 = load i32, i32* getelementptr inbounds (%struct._ddebug, %struct._ddebug* bitcast ({ i8*, i8*, i8*, i8*, i8, i8, i8, i8 }* @wm9705_poll_sample.descriptor to %struct._ddebug*), i32 0, i32 4), align 8
  %bf.lshr37 = lshr i32 %bf.load36, 18
  %bf.clear38 = and i32 %bf.lshr37, 255
  %and39 = and i32 %bf.clear38, 1
  %tobool40 = icmp ne i32 %and39, 0
  %lnot = xor i1 %tobool40, true
  %lnot41 = xor i1 %lnot, true
  %lnot.ext = zext i1 %lnot41 to i32
  %conv42 = sext i32 %lnot.ext to i64
  %expval = call i64 @llvm.expect.i64(i64 %conv42, i64 0)
  %tobool43 = icmp ne i64 %expval, 0
  br i1 %tobool43, label %if.then44, label %cleanup99

if.then44:                                        ; preds = %do.body35
  %dev = getelementptr inbounds %struct.wm97xx.3, %struct.wm97xx.3* %wm, i32 0, i32 8
  %8 = load %struct.device*, %struct.device** %dev, align 8, !tbaa !42
  call void (%struct._ddebug*, %struct.device*, i8*, ...) @__dynamic_dev_dbg(%struct._ddebug* bitcast ({ i8*, i8*, i8*, i8*, i8, i8, i8, i8 }* @wm9705_poll_sample.descriptor to %struct._ddebug*), %struct.device* %8, i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.3.72, i32 0, i32 0))
  br label %cleanup99

if.end50:                                         ; preds = %while.end
  %call51 = call i32 bitcast (i32 (%struct.wm97xx*, i16)* @wm97xx_reg_read to i32 (%struct.wm97xx.3*, i16)*)(%struct.wm97xx.3* %wm, i16 zeroext 122)
  store i32 %call51, i32* %sample, align 4, !tbaa !52
  %mach_ops52 = getelementptr inbounds %struct.wm97xx.3, %struct.wm97xx.3* %wm, i32 0, i32 11
  %9 = load %struct.wm97xx_mach_ops.9*, %struct.wm97xx_mach_ops.9** %mach_ops52, align 8, !tbaa !2
  %tobool53 = icmp ne %struct.wm97xx_mach_ops.9* %9, null
  br i1 %tobool53, label %land.lhs.true54, label %if.end60

land.lhs.true54:                                  ; preds = %if.end50
  %mach_ops55 = getelementptr inbounds %struct.wm97xx.3, %struct.wm97xx.3* %wm, i32 0, i32 11
  %10 = load %struct.wm97xx_mach_ops.9*, %struct.wm97xx_mach_ops.9** %mach_ops55, align 8, !tbaa !2
  %post_sample = getelementptr inbounds %struct.wm97xx_mach_ops.9, %struct.wm97xx_mach_ops.9* %10, i32 0, i32 8
  %11 = load void (i32)*, void (i32)** %post_sample, align 8, !tbaa !99
  %tobool56 = icmp ne void (i32)* %11, null
  br i1 %tobool56, label %if.then57, label %if.end60

if.then57:                                        ; preds = %land.lhs.true54
  %mach_ops58 = getelementptr inbounds %struct.wm97xx.3, %struct.wm97xx.3* %wm, i32 0, i32 11
  %12 = load %struct.wm97xx_mach_ops.9*, %struct.wm97xx_mach_ops.9** %mach_ops58, align 8, !tbaa !2
  %post_sample59 = getelementptr inbounds %struct.wm97xx_mach_ops.9, %struct.wm97xx_mach_ops.9* %12, i32 0, i32 8
  %13 = load void (i32)*, void (i32)** %post_sample59, align 8, !tbaa !99
  call void @simpll__indirect_1(i32 %adcsel, void (i32)* %13)
  br label %if.end60

if.end60:                                         ; preds = %if.then57, %land.lhs.true54, %if.end50
  %14 = load i32, i32* %sample, align 4, !tbaa !52
  %xor = xor i32 %14, %adcsel
  %and61 = and i32 %xor, 28672
  %tobool62 = icmp ne i32 %and61, 0
  br i1 %tobool62, label %do.body65, label %if.end88

do.body65:                                        ; preds = %if.end60
  %bf.load66 = load i32, i32* getelementptr inbounds (%struct._ddebug, %struct._ddebug* bitcast ({ i8*, i8*, i8*, i8*, i8, i8, i8, i8 }* @wm9705_poll_sample.descriptor.4 to %struct._ddebug*), i32 0, i32 4), align 8
  %bf.lshr67 = lshr i32 %bf.load66, 18
  %bf.clear68 = and i32 %bf.lshr67, 255
  %and69 = and i32 %bf.clear68, 1
  %tobool70 = icmp ne i32 %and69, 0
  %lnot71 = xor i1 %tobool70, true
  %lnot73 = xor i1 %lnot71, true
  %lnot.ext74 = zext i1 %lnot73 to i32
  %conv75 = sext i32 %lnot.ext74 to i64
  %expval76 = call i64 @llvm.expect.i64(i64 %conv75, i64 0)
  %tobool77 = icmp ne i64 %expval76, 0
  br i1 %tobool77, label %if.then78, label %cleanup99

if.then78:                                        ; preds = %do.body65
  %dev79 = getelementptr inbounds %struct.wm97xx.3, %struct.wm97xx.3* %wm, i32 0, i32 8
  %15 = load %struct.device*, %struct.device** %dev79, align 8, !tbaa !42
  %and80 = and i32 %adcsel, 28672
  %16 = load i32, i32* %sample, align 4, !tbaa !52
  %and81 = and i32 %16, 28672
  call void (%struct._ddebug*, %struct.device*, i8*, ...) @__dynamic_dev_dbg(%struct._ddebug* bitcast ({ i8*, i8*, i8*, i8*, i8, i8, i8, i8 }* @wm9705_poll_sample.descriptor.4 to %struct._ddebug*), %struct.device* %15, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.5.75, i32 0, i32 0), i32 %and80, i32 %and81)
  br label %cleanup99

if.end88:                                         ; preds = %if.end60
  %tobool89 = trunc i8 %frombool to i1
  br i1 %tobool89, label %land.lhs.true91, label %cleanup99

land.lhs.true91:                                  ; preds = %if.end88
  %17 = load i32, i32* %sample, align 4, !tbaa !52
  %and92 = and i32 %17, 32768
  %tobool93 = icmp ne i32 %and92, 0
  br i1 %tobool93, label %cleanup99, label %if.then94

if.then94:                                        ; preds = %land.lhs.true91
  %pen_probably_down95 = getelementptr inbounds %struct.wm97xx.3, %struct.wm97xx.3* %wm, i32 0, i32 21
  %bf.load96 = load i8, i8* %pen_probably_down95, align 4
  %bf.clear97 = and i8 %bf.load96, -5
  store i8 %bf.clear97, i8* %pen_probably_down95, align 4
  br label %cleanup99

cleanup99:                                        ; preds = %if.then94, %land.lhs.true91, %if.end88, %if.then78, %do.body65, %if.then44, %do.body35, %if.then31, %LeafBlock
  %retval.1 = phi i32 [ 4, %if.then94 ], [ 4, %do.body35 ], [ 4, %if.then44 ], [ 4, %if.then31 ], [ 4, %if.then78 ], [ 4, %do.body65 ], [ 2, %land.lhs.true91 ], [ 2, %if.end88 ], [ 4, %LeafBlock ]
  ret i32 %retval.1
}

; Function Attrs: nounwind uwtable
declare i32 @wm9705_poll_touch(%struct.wm97xx.3*, %struct.wm97xx_data*) #0

; Function Attrs: nounwind uwtable
define internal i32 @wm9705_acc_enable(%struct.wm97xx.3* %wm, i32 %enable) #0 {
entry:
  %dig = getelementptr inbounds %struct.wm97xx.3, %struct.wm97xx.3* %wm, i32 0, i32 0
  %arrayidx = getelementptr inbounds [3 x i16], [3 x i16]* %dig, i64 0, i64 1
  %0 = load i16, i16* %arrayidx, align 2, !tbaa !45
  br label %if.end

if.end:                                           ; preds = %entry
  %conv = zext i16 %0 to i32
  %and = and i32 %conv, -29688
  %conv9 = trunc i32 %and to i16
  %1 = load i32, i32* @delay, align 4, !tbaa !52
  %shl = shl i32 %1, 4
  %and10 = and i32 %shl, 240
  %or = or i32 3080, %and10
  %acc_slot = getelementptr inbounds %struct.wm97xx.3, %struct.wm97xx.3* %wm, i32 0, i32 19
  %2 = load i16, i16* %acc_slot, align 8, !tbaa !100
  %conv11 = zext i16 %2 to i32
  %sub = sub nsw i32 %conv11, 5
  %and12 = and i32 %sub, 7
  %or13 = or i32 %or, %and12
  %acc_rate = getelementptr inbounds %struct.wm97xx.3, %struct.wm97xx.3* %wm, i32 0, i32 20
  %3 = load i16, i16* %acc_rate, align 2, !tbaa !101
  %conv14 = zext i16 %3 to i32
  %and15 = and i32 %conv14, 3
  %shl16 = shl i32 %and15, 8
  %acc_rate17 = getelementptr inbounds %struct.wm97xx.3, %struct.wm97xx.3* %wm, i32 0, i32 20
  %4 = load i16, i16* %acc_rate17, align 2, !tbaa !101
  %conv18 = zext i16 %4 to i32
  %and19 = and i32 %conv18, 4
  %tobool20 = icmp ne i32 %and19, 0
  %cond = select i1 %tobool20, i32 240, i32 0
  %or21 = or i32 %shl16, %cond
  %or22 = or i32 %or13, %or21
  %conv23 = zext i16 %conv9 to i32
  %or24 = or i32 %conv23, %or22
  %conv25 = trunc i32 %or24 to i16
  %5 = load i32, i32* @pil, align 4, !tbaa !52
  %tobool26 = icmp ne i32 %5, 0
  %conv28 = zext i16 %conv25 to i32
  %or29 = or i32 %conv28, 12288
  %conv30 = trunc i32 %or29 to i16
  %dig1.0 = select i1 %tobool26, i16 %conv30, i16 %conv25
  br label %if.end47

if.end47:                                         ; preds = %if.end
  call void bitcast (void (%struct.wm97xx*, i16, i16)* @wm97xx_reg_write to void (%struct.wm97xx.3*, i16, i16)*)(%struct.wm97xx.3* %wm, i16 zeroext 118, i16 zeroext %dig1.0)
  br label %cleanup

cleanup:                                          ; preds = %if.end47
  ret i32 0
}

; Function Attrs: nounwind uwtable
declare void @wm9705_phy_init(%struct.wm97xx.3*) #0

; Function Attrs: nounwind uwtable
define internal void @wm9705_dig_enable(%struct.wm97xx.3* %wm, i32 %enable) #0 {
entry:
  %tobool = icmp ne i32 %enable, 0
  %dig = getelementptr inbounds %struct.wm97xx.3, %struct.wm97xx.3* %wm, i32 0, i32 0
  %arrayidx = getelementptr inbounds [3 x i16], [3 x i16]* %dig, i64 0, i64 2
  %0 = load i16, i16* %arrayidx, align 4, !tbaa !45
  %conv = zext i16 %0 to i32
  br i1 %tobool, label %if.then, label %if.else

if.then:                                          ; preds = %entry
  %or = or i32 %conv, 49152
  %conv1 = trunc i32 %or to i16
  call void bitcast (void (%struct.wm97xx*, i16, i16)* @wm97xx_reg_write to void (%struct.wm97xx.3*, i16, i16)*)(%struct.wm97xx.3* %wm, i16 zeroext 120, i16 zeroext %conv1)
  %call = call i32 bitcast (i32 (%struct.wm97xx*, i16)* @wm97xx_reg_read to i32 (%struct.wm97xx.3*, i16)*)(%struct.wm97xx.3* %wm, i16 zeroext 122)
  br label %if.end

if.else:                                          ; preds = %entry
  %and = and i32 %conv, -49153
  %conv5 = trunc i32 %and to i16
  call void bitcast (void (%struct.wm97xx*, i16, i16)* @wm97xx_reg_write to void (%struct.wm97xx.3*, i16, i16)*)(%struct.wm97xx.3* %wm, i16 zeroext 120, i16 zeroext %conv5)
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then
  ret void
}

; Function Attrs: nounwind uwtable
define internal void @wm9705_dig_restore(%struct.wm97xx.3* %wm) #0 {
entry:
  %dig_save = getelementptr inbounds %struct.wm97xx.3, %struct.wm97xx.3* %wm, i32 0, i32 4
  %arrayidx = getelementptr inbounds [3 x i16], [3 x i16]* %dig_save, i64 0, i64 1
  %0 = load i16, i16* %arrayidx, align 2, !tbaa !45
  call void bitcast (void (%struct.wm97xx*, i16, i16)* @wm97xx_reg_write to void (%struct.wm97xx.3*, i16, i16)*)(%struct.wm97xx.3* %wm, i16 zeroext 118, i16 zeroext %0)
  %dig_save1 = getelementptr inbounds %struct.wm97xx.3, %struct.wm97xx.3* %wm, i32 0, i32 4
  %arrayidx2 = getelementptr inbounds [3 x i16], [3 x i16]* %dig_save1, i64 0, i64 2
  %1 = load i16, i16* %arrayidx2, align 2, !tbaa !45
  call void bitcast (void (%struct.wm97xx*, i16, i16)* @wm97xx_reg_write to void (%struct.wm97xx.3*, i16, i16)*)(%struct.wm97xx.3* %wm, i16 zeroext 120, i16 zeroext %1)
  ret void
}

; Function Attrs: nounwind uwtable
define internal void @wm9705_aux_prepare(%struct.wm97xx.3* %wm) #0 {
entry:
  %cmp = icmp uge i64 6, 64
  %dig_save = getelementptr inbounds %struct.wm97xx.3, %struct.wm97xx.3* %wm, i32 0, i32 4
  %arraydecay = getelementptr inbounds [3 x i16], [3 x i16]* %dig_save, i32 0, i32 0
  %0 = bitcast i16* %arraydecay to i8*
  %dig = getelementptr inbounds %struct.wm97xx.3, %struct.wm97xx.3* %wm, i32 0, i32 0
  %arraydecay1 = getelementptr inbounds [3 x i16], [3 x i16]* %dig, i32 0, i32 0
  %1 = bitcast i16* %arraydecay1 to i8*
  br i1 %cmp, label %if.then, label %if.else

if.then:                                          ; preds = %entry
  %call = call i8* @__memcpy(i8* %0, i8* %1, i64 6)
  br label %if.end

if.else:                                          ; preds = %entry
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %0, i8* %1, i64 6, i32 2, i1 false)
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then
  call void bitcast (void (%struct.wm97xx*, i16, i16)* @wm97xx_reg_write to void (%struct.wm97xx.3*, i16, i16)*)(%struct.wm97xx.3* %wm, i16 zeroext 118, i16 zeroext 0)
  call void bitcast (void (%struct.wm97xx*, i16, i16)* @wm97xx_reg_write to void (%struct.wm97xx.3*, i16, i16)*)(%struct.wm97xx.3* %wm, i16 zeroext 120, i16 zeroext -16384)
  ret void
}

declare i8* @__memcpy(i8*, i8*, i64) #1

; Function Attrs: inlinehint nounwind uwtable
define internal void @poll_delay(i32 %d) #4 {
entry:
  %idxprom = sext i32 %d to i64
  %arrayidx = getelementptr inbounds [16 x i32], [16 x i32]* @delay_table, i64 0, i64 %idxprom
  %0 = load i32, i32* %arrayidx, align 4, !tbaa !52
  %add = add nsw i32 63, %0
  %conv = sext i32 %add to i64
  call void @__udelay(i64 %conv)
  ret void
}

declare void @__const_udelay(i64) #1

; Function Attrs: inlinehint nounwind uwtable
define internal i32 @is_pden(%struct.wm97xx.3* %wm) #4 {
entry:
  %dig = getelementptr inbounds %struct.wm97xx.3, %struct.wm97xx.3* %wm, i32 0, i32 0
  %arrayidx = getelementptr inbounds [3 x i16], [3 x i16]* %dig, i64 0, i64 2
  %0 = load i16, i16* %arrayidx, align 4, !tbaa !45
  %conv = zext i16 %0 to i32
  %and = and i32 %conv, 4096
  ret i32 %and
}

declare void @__udelay(i64) #1

; Function Attrs: nounwind uwtable
define internal i32 @wm9712_poll_sample(%struct.wm97xx.343* %wm, i32 %adcsel, i32* %sample) #0 {
entry:
  %0 = load i32, i32* @delay.32, align 4, !tbaa !52
  %mul = mul nsw i32 5, %0
  %and = and i32 %adcsel, 32768
  %tobool = icmp ne i32 %and, 0
  %frombool = zext i1 %tobool to i8
  %tobool1 = trunc i8 %frombool to i1
  br i1 %tobool1, label %land.lhs.true, label %if.end10

land.lhs.true:                                    ; preds = %entry
  %pen_probably_down = getelementptr inbounds %struct.wm97xx.343, %struct.wm97xx.343* %wm, i32 0, i32 21
  %bf.load = load i8, i8* %pen_probably_down, align 4
  %bf.lshr = lshr i8 %bf.load, 2
  %bf.clear = and i8 %bf.lshr, 1
  %bf.cast = zext i8 %bf.clear to i32
  %tobool2 = icmp ne i32 %bf.cast, 0
  br i1 %tobool2, label %if.end10, label %if.then

if.then:                                          ; preds = %land.lhs.true
  %call = call i32 bitcast (i32 (%struct.wm97xx*, i16)* @wm97xx_reg_read to i32 (%struct.wm97xx.343*, i16)*)(%struct.wm97xx.343* %wm, i16 zeroext 122)
  %conv = trunc i32 %call to i16
  %conv3 = zext i16 %conv to i32
  %and4 = and i32 %conv3, 32768
  %tobool5 = icmp ne i32 %and4, 0
  br i1 %tobool5, label %if.end, label %LeafBlock

if.end:                                           ; preds = %if.then
  %pen_probably_down7 = getelementptr inbounds %struct.wm97xx.343, %struct.wm97xx.343* %wm, i32 0, i32 21
  %bf.load8 = load i8, i8* %pen_probably_down7, align 4
  %bf.clear9 = and i8 %bf.load8, -5
  %bf.set = or i8 %bf.clear9, 4
  store i8 %bf.set, i8* %pen_probably_down7, align 4
  br label %LeafBlock

LeafBlock:                                        ; preds = %if.end, %if.then
  %cleanup.dest.slot.0 = phi i32 [ 0, %if.end ], [ 1, %if.then ]
  %SwitchLeaf = icmp eq i32 %cleanup.dest.slot.0, 0
  br i1 %SwitchLeaf, label %if.end10, label %cleanup104

if.end10:                                         ; preds = %LeafBlock, %land.lhs.true, %entry
  %mach_ops = getelementptr inbounds %struct.wm97xx.343, %struct.wm97xx.343* %wm, i32 0, i32 11
  %1 = load %struct.wm97xx_mach_ops.349*, %struct.wm97xx_mach_ops.349** %mach_ops, align 8, !tbaa !2
  %tobool11 = icmp ne %struct.wm97xx_mach_ops.349* %1, null
  br i1 %tobool11, label %land.lhs.true12, label %if.end18

land.lhs.true12:                                  ; preds = %if.end10
  %mach_ops13 = getelementptr inbounds %struct.wm97xx.343, %struct.wm97xx.343* %wm, i32 0, i32 11
  %2 = load %struct.wm97xx_mach_ops.349*, %struct.wm97xx_mach_ops.349** %mach_ops13, align 8, !tbaa !2
  %pre_sample = getelementptr inbounds %struct.wm97xx_mach_ops.349, %struct.wm97xx_mach_ops.349* %2, i32 0, i32 7
  %3 = load void (i32)*, void (i32)** %pre_sample, align 8, !tbaa !98
  %tobool14 = icmp ne void (i32)* %3, null
  br i1 %tobool14, label %if.then15, label %if.end18

if.then15:                                        ; preds = %land.lhs.true12
  %mach_ops16 = getelementptr inbounds %struct.wm97xx.343, %struct.wm97xx.343* %wm, i32 0, i32 11
  %4 = load %struct.wm97xx_mach_ops.349*, %struct.wm97xx_mach_ops.349** %mach_ops16, align 8, !tbaa !2
  %pre_sample17 = getelementptr inbounds %struct.wm97xx_mach_ops.349, %struct.wm97xx_mach_ops.349* %4, i32 0, i32 7
  %5 = load void (i32)*, void (i32)** %pre_sample17, align 8, !tbaa !98
  call void %5(i32 %adcsel)
  br label %if.end18

if.end18:                                         ; preds = %if.then15, %land.lhs.true12, %if.end10
  %and19 = and i32 %adcsel, 28672
  %or = or i32 %and19, 32768
  %6 = load i32, i32* @delay.32, align 4, !tbaa !52
  %shl = shl i32 %6, 4
  %and20 = and i32 %shl, 240
  %or21 = or i32 %or, %and20
  %conv22 = trunc i32 %or21 to i16
  call void bitcast (void (%struct.wm97xx*, i16, i16)* @wm97xx_reg_write to void (%struct.wm97xx.343*, i16, i16)*)(%struct.wm97xx.343* %wm, i16 zeroext 118, i16 zeroext %conv22)
  %7 = load i32, i32* @delay.32, align 4, !tbaa !52
  call void @poll_delay.39(i32 %7)
  br label %while.cond

while.cond:                                       ; preds = %while.body, %if.end18
  %timeout.0 = phi i32 [ %mul, %if.end18 ], [ %dec, %while.body ]
  %call23 = call i32 bitcast (i32 (%struct.wm97xx*, i16)* @wm97xx_reg_read to i32 (%struct.wm97xx.343*, i16)*)(%struct.wm97xx.343* %wm, i16 zeroext 118)
  %and24 = and i32 %call23, 32768
  %tobool25 = icmp ne i32 %and24, 0
  %tobool26 = icmp ne i32 %timeout.0, 0
  %tobool26. = select i1 %tobool25, i1 %tobool26, i1 false
  br i1 %tobool26., label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  call void @__const_udelay(i64 90195)
  %dec = add nsw i32 %timeout.0, -1
  br label %while.cond

while.end:                                        ; preds = %while.cond
  %cmp = icmp sle i32 %timeout.0, 0
  br i1 %cmp, label %if.then28, label %if.end50

if.then28:                                        ; preds = %while.end
  %call29 = call i32 @is_pden.40(%struct.wm97xx.343* %wm)
  %tobool30 = icmp ne i32 %call29, 0
  br i1 %tobool30, label %if.then31, label %do.body35

if.then31:                                        ; preds = %if.then28
  %pen_probably_down32 = getelementptr inbounds %struct.wm97xx.343, %struct.wm97xx.343* %wm, i32 0, i32 21
  %bf.load33 = load i8, i8* %pen_probably_down32, align 4
  %bf.clear34 = and i8 %bf.load33, -5
  store i8 %bf.clear34, i8* %pen_probably_down32, align 4
  br label %cleanup104

do.body35:                                        ; preds = %if.then28
  %bf.load36 = load i32, i32* getelementptr inbounds (%struct._ddebug, %struct._ddebug* bitcast ({ i8*, i8*, i8*, i8*, i8, i8, i8, i8 }* @wm9712_poll_sample.descriptor to %struct._ddebug*), i32 0, i32 4), align 8
  %bf.lshr37 = lshr i32 %bf.load36, 18
  %bf.clear38 = and i32 %bf.lshr37, 255
  %and39 = and i32 %bf.clear38, 1
  %tobool40 = icmp ne i32 %and39, 0
  %lnot = xor i1 %tobool40, true
  %lnot41 = xor i1 %lnot, true
  %lnot.ext = zext i1 %lnot41 to i32
  %conv42 = sext i32 %lnot.ext to i64
  %expval = call i64 @llvm.expect.i64(i64 %conv42, i64 0)
  %tobool43 = icmp ne i64 %expval, 0
  br i1 %tobool43, label %if.then44, label %cleanup104

if.then44:                                        ; preds = %do.body35
  %dev = getelementptr inbounds %struct.wm97xx.343, %struct.wm97xx.343* %wm, i32 0, i32 8
  %8 = load %struct.device*, %struct.device** %dev, align 8, !tbaa !42
  call void (%struct._ddebug*, %struct.device*, i8*, ...) @__dynamic_dev_dbg(%struct._ddebug* bitcast ({ i8*, i8*, i8*, i8*, i8, i8, i8, i8 }* @wm9712_poll_sample.descriptor to %struct._ddebug*), %struct.device* %8, i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.3.41, i32 0, i32 0))
  br label %cleanup104

if.end50:                                         ; preds = %while.end
  %call51 = call i32 bitcast (i32 (%struct.wm97xx*, i16)* @wm97xx_reg_read to i32 (%struct.wm97xx.343*, i16)*)(%struct.wm97xx.343* %wm, i16 zeroext 122)
  store i32 %call51, i32* %sample, align 4, !tbaa !52
  %mach_ops52 = getelementptr inbounds %struct.wm97xx.343, %struct.wm97xx.343* %wm, i32 0, i32 11
  %9 = load %struct.wm97xx_mach_ops.349*, %struct.wm97xx_mach_ops.349** %mach_ops52, align 8, !tbaa !2
  %tobool53 = icmp ne %struct.wm97xx_mach_ops.349* %9, null
  br i1 %tobool53, label %land.lhs.true54, label %if.end60

land.lhs.true54:                                  ; preds = %if.end50
  %mach_ops55 = getelementptr inbounds %struct.wm97xx.343, %struct.wm97xx.343* %wm, i32 0, i32 11
  %10 = load %struct.wm97xx_mach_ops.349*, %struct.wm97xx_mach_ops.349** %mach_ops55, align 8, !tbaa !2
  %post_sample = getelementptr inbounds %struct.wm97xx_mach_ops.349, %struct.wm97xx_mach_ops.349* %10, i32 0, i32 8
  %11 = load void (i32)*, void (i32)** %post_sample, align 8, !tbaa !99
  %tobool56 = icmp ne void (i32)* %11, null
  br i1 %tobool56, label %if.then57, label %if.end60

if.then57:                                        ; preds = %land.lhs.true54
  %mach_ops58 = getelementptr inbounds %struct.wm97xx.343, %struct.wm97xx.343* %wm, i32 0, i32 11
  %12 = load %struct.wm97xx_mach_ops.349*, %struct.wm97xx_mach_ops.349** %mach_ops58, align 8, !tbaa !2
  %post_sample59 = getelementptr inbounds %struct.wm97xx_mach_ops.349, %struct.wm97xx_mach_ops.349* %12, i32 0, i32 8
  %13 = load void (i32)*, void (i32)** %post_sample59, align 8, !tbaa !99
  call void %13(i32 %adcsel)
  br label %if.end60

if.end60:                                         ; preds = %if.then57, %land.lhs.true54, %if.end50
  %14 = load i32, i32* %sample, align 4, !tbaa !52
  %xor = xor i32 %14, %adcsel
  %and61 = and i32 %xor, 28672
  %tobool62 = icmp ne i32 %and61, 0
  br i1 %tobool62, label %do.body65, label %if.end88

do.body65:                                        ; preds = %if.end60
  %bf.load66 = load i32, i32* getelementptr inbounds (%struct._ddebug, %struct._ddebug* bitcast ({ i8*, i8*, i8*, i8*, i8, i8, i8, i8 }* @wm9712_poll_sample.descriptor.4 to %struct._ddebug*), i32 0, i32 4), align 8
  %bf.lshr67 = lshr i32 %bf.load66, 18
  %bf.clear68 = and i32 %bf.lshr67, 255
  %and69 = and i32 %bf.clear68, 1
  %tobool70 = icmp ne i32 %and69, 0
  %lnot71 = xor i1 %tobool70, true
  %lnot73 = xor i1 %lnot71, true
  %lnot.ext74 = zext i1 %lnot73 to i32
  %conv75 = sext i32 %lnot.ext74 to i64
  %expval76 = call i64 @llvm.expect.i64(i64 %conv75, i64 0)
  %tobool77 = icmp ne i64 %expval76, 0
  br i1 %tobool77, label %if.then78, label %cleanup104

if.then78:                                        ; preds = %do.body65
  %dev79 = getelementptr inbounds %struct.wm97xx.343, %struct.wm97xx.343* %wm, i32 0, i32 8
  %15 = load %struct.device*, %struct.device** %dev79, align 8, !tbaa !42
  %and80 = and i32 %adcsel, 28672
  %16 = load i32, i32* %sample, align 4, !tbaa !52
  %and81 = and i32 %16, 28672
  call void (%struct._ddebug*, %struct.device*, i8*, ...) @__dynamic_dev_dbg(%struct._ddebug* bitcast ({ i8*, i8*, i8*, i8*, i8, i8, i8, i8 }* @wm9712_poll_sample.descriptor.4 to %struct._ddebug*), %struct.device* %15, i8* getelementptr inbounds ([36 x i8], [36 x i8]* @.str.5.42, i32 0, i32 0), i32 %and80, i32 %and81)
  br label %cleanup104

if.end88:                                         ; preds = %if.end60
  %tobool89 = trunc i8 %frombool to i1
  br i1 %tobool89, label %land.lhs.true91, label %cleanup104

land.lhs.true91:                                  ; preds = %if.end88
  %17 = load i32, i32* %sample, align 4, !tbaa !52
  %and92 = and i32 %17, 32768
  %tobool93 = icmp ne i32 %and92, 0
  br i1 %tobool93, label %cleanup104, label %if.then94

if.then94:                                        ; preds = %land.lhs.true91
  %call95 = call i32 bitcast (i32 (%struct.wm97xx*, i16)* @wm97xx_reg_read to i32 (%struct.wm97xx.343*, i16)*)(%struct.wm97xx.343* %wm, i16 zeroext 122)
  store i32 %call95, i32* %sample, align 4, !tbaa !52
  %18 = load i32, i32* %sample, align 4, !tbaa !52
  %and96 = and i32 %18, 32768
  %tobool97 = icmp ne i32 %and96, 0
  br i1 %tobool97, label %cleanup104, label %if.then98

if.then98:                                        ; preds = %if.then94
  %pen_probably_down99 = getelementptr inbounds %struct.wm97xx.343, %struct.wm97xx.343* %wm, i32 0, i32 21
  %bf.load100 = load i8, i8* %pen_probably_down99, align 4
  %bf.clear101 = and i8 %bf.load100, -5
  store i8 %bf.clear101, i8* %pen_probably_down99, align 4
  br label %cleanup104

cleanup104:                                       ; preds = %if.then98, %if.then94, %land.lhs.true91, %if.end88, %if.then78, %do.body65, %if.then44, %do.body35, %if.then31, %LeafBlock
  %retval.1 = phi i32 [ 4, %if.then98 ], [ 4, %do.body35 ], [ 4, %if.then44 ], [ 4, %if.then31 ], [ 1, %if.then78 ], [ 1, %do.body65 ], [ 2, %if.then94 ], [ 2, %land.lhs.true91 ], [ 2, %if.end88 ], [ 4, %LeafBlock ]
  ret i32 %retval.1
}

; Function Attrs: nounwind uwtable
define internal i32 @wm9712_poll_touch(%struct.wm97xx.343* %wm, %struct.wm97xx_data* %data) #0 {
entry:
  %0 = load i32, i32* @coord, align 4, !tbaa !52
  %tobool = icmp ne i32 %0, 0
  br i1 %tobool, label %if.then, label %if.else

if.then:                                          ; preds = %entry
  %call = call i32 @wm9712_poll_coord(%struct.wm97xx.343* %wm, %struct.wm97xx_data* %data)
  %cmp = icmp ne i32 %call, 2
  br i1 %cmp, label %cleanup, label %if.end20

if.else:                                          ; preds = %entry
  %x = getelementptr inbounds %struct.wm97xx_data, %struct.wm97xx_data* %data, i32 0, i32 0
  %call2 = call i32 @wm9712_poll_sample(%struct.wm97xx.343* %wm, i32 36864, i32* %x)
  %cmp3 = icmp ne i32 %call2, 2
  br i1 %cmp3, label %cleanup, label %if.end5

if.end5:                                          ; preds = %if.else
  %y = getelementptr inbounds %struct.wm97xx_data, %struct.wm97xx_data* %data, i32 0, i32 1
  %call6 = call i32 @wm9712_poll_sample(%struct.wm97xx.343* %wm, i32 40960, i32* %y)
  %cmp7 = icmp ne i32 %call6, 2
  br i1 %cmp7, label %cleanup, label %if.end9

if.end9:                                          ; preds = %if.end5
  %1 = load i32, i32* @pil.27, align 4, !tbaa !52
  %tobool10 = icmp eq i32 %1, 0
  %2 = load i32, i32* @five_wire, align 4
  %tobool11 = icmp ne i32 %2, 0
  %or.cond = or i1 %tobool10, %tobool11
  %p18 = getelementptr inbounds %struct.wm97xx_data, %struct.wm97xx_data* %data, i32 0, i32 2
  br i1 %or.cond, label %if.else17, label %if.then12

if.then12:                                        ; preds = %if.end9
  %call13 = call i32 @wm9712_poll_sample(%struct.wm97xx.343* %wm, i32 45056, i32* %p18)
  %cmp14 = icmp ne i32 %call13, 2
  br i1 %cmp14, label %cleanup, label %if.end20

if.else17:                                        ; preds = %if.end9
  store i32 45248, i32* %p18, align 4, !tbaa !97
  br label %if.end20

if.end20:                                         ; preds = %if.else17, %if.then12, %if.then
  br label %cleanup

cleanup:                                          ; preds = %if.end20, %if.then12, %if.end5, %if.else, %if.then
  %retval.0 = phi i32 [ 2, %if.end20 ], [ %call, %if.then ], [ %call2, %if.else ], [ %call6, %if.end5 ], [ %call13, %if.then12 ]
  ret i32 %retval.0
}

; Function Attrs: nounwind uwtable
define internal i32 @wm9712_acc_enable(%struct.wm97xx.343* %wm, i32 %enable) #0 {
entry:
  %dig = getelementptr inbounds %struct.wm97xx.343, %struct.wm97xx.343* %wm, i32 0, i32 0
  %arrayidx = getelementptr inbounds [3 x i16], [3 x i16]* %dig, i64 0, i64 1
  %0 = load i16, i16* %arrayidx, align 2, !tbaa !45
  %dig3 = getelementptr inbounds %struct.wm97xx.343, %struct.wm97xx.343* %wm, i32 0, i32 0
  %arrayidx4 = getelementptr inbounds [3 x i16], [3 x i16]* %dig3, i64 0, i64 2
  %1 = load i16, i16* %arrayidx4, align 4, !tbaa !45
  %tobool = icmp ne i32 %enable, 0
  br i1 %tobool, label %if.then, label %if.else

if.then:                                          ; preds = %entry
  %mach_ops = getelementptr inbounds %struct.wm97xx.343, %struct.wm97xx.343* %wm, i32 0, i32 11
  %2 = load %struct.wm97xx_mach_ops.349*, %struct.wm97xx_mach_ops.349** %mach_ops, align 8, !tbaa !2
  %acc_startup = getelementptr inbounds %struct.wm97xx_mach_ops.349, %struct.wm97xx_mach_ops.349* %2, i32 0, i32 3
  %3 = load i32 (%struct.wm97xx.343*)*, i32 (%struct.wm97xx.343*)** %acc_startup, align 8, !tbaa !102
  %tobool5 = icmp ne i32 (%struct.wm97xx.343*)* %3, null
  br i1 %tobool5, label %if.then6, label %if.end10

if.then6:                                         ; preds = %if.then
  %mach_ops7 = getelementptr inbounds %struct.wm97xx.343, %struct.wm97xx.343* %wm, i32 0, i32 11
  %4 = load %struct.wm97xx_mach_ops.349*, %struct.wm97xx_mach_ops.349** %mach_ops7, align 8, !tbaa !2
  %acc_startup8 = getelementptr inbounds %struct.wm97xx_mach_ops.349, %struct.wm97xx_mach_ops.349* %4, i32 0, i32 3
  %5 = load i32 (%struct.wm97xx.343*)*, i32 (%struct.wm97xx.343*)** %acc_startup8, align 8, !tbaa !102
  %call = call i32 %5(%struct.wm97xx.343* %wm)
  %cmp = icmp slt i32 %call, 0
  br i1 %cmp, label %cleanup, label %if.end10

if.end10:                                         ; preds = %if.then6, %if.then
  %conv = zext i16 %0 to i32
  %and = and i32 %conv, -29688
  %conv11 = trunc i32 %and to i16
  %6 = load i32, i32* @delay.32, align 4, !tbaa !52
  %shl = shl i32 %6, 4
  %and12 = and i32 %shl, 240
  %or = or i32 3080, %and12
  %acc_slot = getelementptr inbounds %struct.wm97xx.343, %struct.wm97xx.343* %wm, i32 0, i32 19
  %7 = load i16, i16* %acc_slot, align 8, !tbaa !100
  %conv13 = zext i16 %7 to i32
  %sub = sub nsw i32 %conv13, 5
  %and14 = and i32 %sub, 7
  %or15 = or i32 %or, %and14
  %acc_rate = getelementptr inbounds %struct.wm97xx.343, %struct.wm97xx.343* %wm, i32 0, i32 20
  %8 = load i16, i16* %acc_rate, align 2, !tbaa !101
  %conv16 = zext i16 %8 to i32
  %and17 = and i32 %conv16, 3
  %shl18 = shl i32 %and17, 8
  %acc_rate19 = getelementptr inbounds %struct.wm97xx.343, %struct.wm97xx.343* %wm, i32 0, i32 20
  %9 = load i16, i16* %acc_rate19, align 2, !tbaa !101
  %conv20 = zext i16 %9 to i32
  %and21 = and i32 %conv20, 4
  %tobool22 = icmp ne i32 %and21, 0
  %cond = select i1 %tobool22, i32 240, i32 0
  %or23 = or i32 %shl18, %cond
  %or24 = or i32 %or15, %or23
  %conv25 = zext i16 %conv11 to i32
  %or26 = or i32 %conv25, %or24
  %conv27 = trunc i32 %or26 to i16
  %10 = load i32, i32* @pil.27, align 4, !tbaa !52
  %tobool28 = icmp ne i32 %10, 0
  %conv30 = zext i16 %conv27 to i32
  %or31 = or i32 %conv30, 12288
  %conv32 = trunc i32 %or31 to i16
  %dig1.0 = select i1 %tobool28, i16 %conv32, i16 %conv27
  %conv34 = zext i16 %1 to i32
  %or35 = or i32 %conv34, 2048
  %conv36 = trunc i32 %or35 to i16
  br label %if.end49

if.else:                                          ; preds = %entry
  %conv37 = zext i16 %0 to i32
  %and38 = and i32 %conv37, -3081
  %conv39 = trunc i32 %and38 to i16
  %conv40 = zext i16 %1 to i32
  %and41 = and i32 %conv40, -2049
  %conv42 = trunc i32 %and41 to i16
  %mach_ops43 = getelementptr inbounds %struct.wm97xx.343, %struct.wm97xx.343* %wm, i32 0, i32 11
  %11 = load %struct.wm97xx_mach_ops.349*, %struct.wm97xx_mach_ops.349** %mach_ops43, align 8, !tbaa !2
  %acc_shutdown = getelementptr inbounds %struct.wm97xx_mach_ops.349, %struct.wm97xx_mach_ops.349* %11, i32 0, i32 4
  %12 = load void (%struct.wm97xx.343*)*, void (%struct.wm97xx.343*)** %acc_shutdown, align 8, !tbaa !103
  %tobool44 = icmp ne void (%struct.wm97xx.343*)* %12, null
  br i1 %tobool44, label %if.then45, label %if.end49

if.then45:                                        ; preds = %if.else
  %mach_ops46 = getelementptr inbounds %struct.wm97xx.343, %struct.wm97xx.343* %wm, i32 0, i32 11
  %13 = load %struct.wm97xx_mach_ops.349*, %struct.wm97xx_mach_ops.349** %mach_ops46, align 8, !tbaa !2
  %acc_shutdown47 = getelementptr inbounds %struct.wm97xx_mach_ops.349, %struct.wm97xx_mach_ops.349* %13, i32 0, i32 4
  %14 = load void (%struct.wm97xx.343*)*, void (%struct.wm97xx.343*)** %acc_shutdown47, align 8, !tbaa !103
  call void %14(%struct.wm97xx.343* %wm)
  br label %if.end49

if.end49:                                         ; preds = %if.then45, %if.else, %if.end10
  %dig2.0 = phi i16 [ %conv36, %if.end10 ], [ %conv42, %if.then45 ], [ %conv42, %if.else ]
  %dig1.1 = phi i16 [ %dig1.0, %if.end10 ], [ %conv39, %if.then45 ], [ %conv39, %if.else ]
  call void bitcast (void (%struct.wm97xx*, i16, i16)* @wm97xx_reg_write to void (%struct.wm97xx.343*, i16, i16)*)(%struct.wm97xx.343* %wm, i16 zeroext 118, i16 zeroext %dig1.1)
  call void bitcast (void (%struct.wm97xx*, i16, i16)* @wm97xx_reg_write to void (%struct.wm97xx.343*, i16, i16)*)(%struct.wm97xx.343* %wm, i16 zeroext 120, i16 zeroext %dig2.0)
  br label %cleanup

cleanup:                                          ; preds = %if.end49, %if.then6
  %retval.0 = phi i32 [ 0, %if.end49 ], [ %call, %if.then6 ]
  ret i32 %retval.0
}

; Function Attrs: nounwind uwtable
define internal void @wm9712_phy_init(%struct.wm97xx.343* %wm) #0 {
entry:
  %0 = load i32, i32* @rpu, align 4, !tbaa !52
  %tobool = icmp ne i32 %0, 0
  br i1 %tobool, label %if.then, label %if.end14

if.then:                                          ; preds = %entry
  %conv = zext i16 8193 to i32
  %and = and i32 %conv, 65472
  %conv1 = trunc i32 %and to i16
  %1 = load i32, i32* @rpu, align 4, !tbaa !52
  %and2 = and i32 %1, 63
  %conv3 = zext i16 %conv1 to i32
  %or = or i32 %conv3, %and2
  %conv4 = trunc i32 %or to i16
  %bf.load = load i32, i32* getelementptr inbounds (%struct._ddebug, %struct._ddebug* bitcast ({ i8*, i8*, i8*, i8*, i8, i8, i8, i8 }* @wm9712_phy_init.descriptor to %struct._ddebug*), i32 0, i32 4), align 8
  %bf.lshr = lshr i32 %bf.load, 18
  %bf.clear = and i32 %bf.lshr, 255
  %and6 = and i32 %bf.clear, 1
  %tobool7 = icmp ne i32 %and6, 0
  %lnot = xor i1 %tobool7, true
  %lnot8 = xor i1 %lnot, true
  %lnot.ext = zext i1 %lnot8 to i32
  %conv9 = sext i32 %lnot.ext to i64
  %expval = call i64 @llvm.expect.i64(i64 %conv9, i64 0)
  %tobool10 = icmp ne i64 %expval, 0
  br i1 %tobool10, label %if.then11, label %if.end14

if.then11:                                        ; preds = %if.then
  %dev = getelementptr inbounds %struct.wm97xx.343, %struct.wm97xx.343* %wm, i32 0, i32 8
  %2 = load %struct.device*, %struct.device** %dev, align 8, !tbaa !42
  %3 = load i32, i32* @rpu, align 4, !tbaa !52
  %div = sdiv i32 64000, %3
  call void (%struct._ddebug*, %struct.device*, i8*, ...) @__dynamic_dev_dbg(%struct._ddebug* bitcast ({ i8*, i8*, i8*, i8*, i8, i8, i8, i8 }* @wm9712_phy_init.descriptor to %struct._ddebug*), %struct.device* %2, i8* getelementptr inbounds ([39 x i8], [39 x i8]* @.str.6.56, i32 0, i32 0), i32 %div)
  br label %if.end14

if.end14:                                         ; preds = %if.then11, %if.then, %entry
  %dig2.0 = phi i16 [ 8193, %entry ], [ %conv4, %if.then11 ], [ %conv4, %if.then ]
  %4 = load i32, i32* @five_wire, align 4, !tbaa !52
  %tobool15 = icmp ne i32 %4, 0
  br i1 %tobool15, label %if.then16, label %if.end47

if.then16:                                        ; preds = %if.end14
  %conv17 = zext i16 %dig2.0 to i32
  %or18 = or i32 %conv17, 4096
  %conv19 = trunc i32 %or18 to i16
  %bf.load22 = load i32, i32* getelementptr inbounds (%struct._ddebug, %struct._ddebug* bitcast ({ i8*, i8*, i8*, i8*, i8, i8, i8, i8 }* @wm9712_phy_init.descriptor.7 to %struct._ddebug*), i32 0, i32 4), align 8
  %bf.lshr23 = lshr i32 %bf.load22, 18
  %bf.clear24 = and i32 %bf.lshr23, 255
  %and25 = and i32 %bf.clear24, 1
  %tobool26 = icmp ne i32 %and25, 0
  %lnot27 = xor i1 %tobool26, true
  %lnot29 = xor i1 %lnot27, true
  %lnot.ext30 = zext i1 %lnot29 to i32
  %conv31 = sext i32 %lnot.ext30 to i64
  %expval32 = call i64 @llvm.expect.i64(i64 %conv31, i64 0)
  %tobool33 = icmp ne i64 %expval32, 0
  br i1 %tobool33, label %if.then34, label %do.end41

if.then34:                                        ; preds = %if.then16
  %dev35 = getelementptr inbounds %struct.wm97xx.343, %struct.wm97xx.343* %wm, i32 0, i32 8
  %5 = load %struct.device*, %struct.device** %dev35, align 8, !tbaa !42
  call void (%struct._ddebug*, %struct.device*, i8*, ...) @__dynamic_dev_dbg(%struct._ddebug* bitcast ({ i8*, i8*, i8*, i8*, i8, i8, i8, i8 }* @wm9712_phy_init.descriptor.7 to %struct._ddebug*), %struct.device* %5, i8* getelementptr inbounds ([34 x i8], [34 x i8]* @.str.8.26, i32 0, i32 0))
  br label %do.end41

do.end41:                                         ; preds = %if.then34, %if.then16
  %6 = load i32, i32* @pil.27, align 4, !tbaa !52
  %tobool42 = icmp ne i32 %6, 0
  br i1 %tobool42, label %if.then43, label %if.end47

if.then43:                                        ; preds = %do.end41
  %7 = call i32 (%struct.device*, i8*, ...) @dev_warn(%struct.device* null, i8* null)
  store i32 0, i32* @pil.27, align 4, !tbaa !52
  br label %if.end47

if.end47:                                         ; preds = %if.then43, %do.end41, %if.end14
  %dig2.1 = phi i16 [ %dig2.0, %if.end14 ], [ %conv19, %if.then43 ], [ %conv19, %do.end41 ]
  %8 = load i32, i32* @pil.27, align 4, !tbaa !52
  %cmp = icmp eq i32 %8, 2
  br i1 %cmp, label %if.then49, label %if.else

if.then49:                                        ; preds = %if.end47
  %conv50 = zext i16 %dig2.1 to i32
  %or51 = or i32 %conv50, 256
  %conv52 = trunc i32 %or51 to i16
  %bf.load55 = load i32, i32* getelementptr inbounds (%struct._ddebug, %struct._ddebug* bitcast ({ i8*, i8*, i8*, i8*, i8, i8, i8, i8 }* @wm9712_phy_init.descriptor.10 to %struct._ddebug*), i32 0, i32 4), align 8
  %bf.lshr56 = lshr i32 %bf.load55, 18
  %bf.clear57 = and i32 %bf.lshr56, 255
  %and58 = and i32 %bf.clear57, 1
  %tobool59 = icmp ne i32 %and58, 0
  %lnot60 = xor i1 %tobool59, true
  %lnot62 = xor i1 %lnot60, true
  %lnot.ext63 = zext i1 %lnot62 to i32
  %conv64 = sext i32 %lnot.ext63 to i64
  %expval65 = call i64 @llvm.expect.i64(i64 %conv64, i64 0)
  %tobool66 = icmp ne i64 %expval65, 0
  br i1 %tobool66, label %if.then67, label %if.end100

if.then67:                                        ; preds = %if.then49
  %dev68 = getelementptr inbounds %struct.wm97xx.343, %struct.wm97xx.343* %wm, i32 0, i32 8
  %9 = load %struct.device*, %struct.device** %dev68, align 8, !tbaa !42
  call void (%struct._ddebug*, %struct.device*, i8*, ...) @__dynamic_dev_dbg(%struct._ddebug* bitcast ({ i8*, i8*, i8*, i8*, i8, i8, i8, i8 }* @wm9712_phy_init.descriptor.10 to %struct._ddebug*), %struct.device* %9, i8* getelementptr inbounds ([48 x i8], [48 x i8]* @.str.11.29, i32 0, i32 0))
  br label %if.end100

if.else:                                          ; preds = %if.end47
  %10 = load i32, i32* @pil.27, align 4, !tbaa !52
  %tobool75 = icmp ne i32 %10, 0
  br i1 %tobool75, label %do.body78, label %if.end100

do.body78:                                        ; preds = %if.else
  %bf.load79 = load i32, i32* getelementptr inbounds (%struct._ddebug, %struct._ddebug* bitcast ({ i8*, i8*, i8*, i8*, i8, i8, i8, i8 }* @wm9712_phy_init.descriptor.12 to %struct._ddebug*), i32 0, i32 4), align 8
  %bf.lshr80 = lshr i32 %bf.load79, 18
  %bf.clear81 = and i32 %bf.lshr80, 255
  %and82 = and i32 %bf.clear81, 1
  %tobool83 = icmp ne i32 %and82, 0
  %lnot84 = xor i1 %tobool83, true
  %lnot86 = xor i1 %lnot84, true
  %lnot.ext87 = zext i1 %lnot86 to i32
  %conv88 = sext i32 %lnot.ext87 to i64
  %expval89 = call i64 @llvm.expect.i64(i64 %conv88, i64 0)
  %tobool90 = icmp ne i64 %expval89, 0
  br i1 %tobool90, label %if.then91, label %if.end100

if.then91:                                        ; preds = %do.body78
  %dev92 = getelementptr inbounds %struct.wm97xx.343, %struct.wm97xx.343* %wm, i32 0, i32 8
  %11 = load %struct.device*, %struct.device** %dev92, align 8, !tbaa !42
  call void (%struct._ddebug*, %struct.device*, i8*, ...) @__dynamic_dev_dbg(%struct._ddebug* bitcast ({ i8*, i8*, i8*, i8*, i8, i8, i8, i8 }* @wm9712_phy_init.descriptor.12 to %struct._ddebug*), %struct.device* %11, i8* getelementptr inbounds ([48 x i8], [48 x i8]* @.str.13.30, i32 0, i32 0))
  br label %if.end100

if.end100:                                        ; preds = %if.then91, %do.body78, %if.else, %if.then67, %if.then49
  %dig2.2 = phi i16 [ %conv52, %if.then67 ], [ %conv52, %if.then49 ], [ %dig2.1, %do.body78 ], [ %dig2.1, %if.then91 ], [ %dig2.1, %if.else ]
  %12 = load i32, i32* @pil.27, align 4, !tbaa !52
  %tobool101 = icmp ne i32 %12, 0
  br i1 %tobool101, label %if.end103, label %if.then102

if.then102:                                       ; preds = %if.end100
  store i32 0, i32* @pressure.31, align 4, !tbaa !52
  br label %if.end103

if.end103:                                        ; preds = %if.then102, %if.end100
  %13 = load i32, i32* @delay.32, align 4, !tbaa !52
  %cmp104 = icmp slt i32 %13, 0
  %14 = load i32, i32* @delay.32, align 4
  %cmp106 = icmp sgt i32 %14, 15
  %or.cond = or i1 %cmp104, %cmp106
  br i1 %or.cond, label %do.body110, label %if.end131

do.body110:                                       ; preds = %if.end103
  %bf.load111 = load i32, i32* getelementptr inbounds (%struct._ddebug, %struct._ddebug* bitcast ({ i8*, i8*, i8*, i8*, i8, i8, i8, i8 }* @wm9712_phy_init.descriptor.14 to %struct._ddebug*), i32 0, i32 4), align 8
  %bf.lshr112 = lshr i32 %bf.load111, 18
  %bf.clear113 = and i32 %bf.lshr112, 255
  %and114 = and i32 %bf.clear113, 1
  %tobool115 = icmp ne i32 %and114, 0
  %lnot116 = xor i1 %tobool115, true
  %lnot118 = xor i1 %lnot116, true
  %lnot.ext119 = zext i1 %lnot118 to i32
  %conv120 = sext i32 %lnot.ext119 to i64
  %expval121 = call i64 @llvm.expect.i64(i64 %conv120, i64 0)
  %tobool122 = icmp ne i64 %expval121, 0
  br i1 %tobool122, label %if.then123, label %do.end130

if.then123:                                       ; preds = %do.body110
  %dev124 = getelementptr inbounds %struct.wm97xx.343, %struct.wm97xx.343* %wm, i32 0, i32 8
  %15 = load %struct.device*, %struct.device** %dev124, align 8, !tbaa !42
  call void (%struct._ddebug*, %struct.device*, i8*, ...) @__dynamic_dev_dbg(%struct._ddebug* bitcast ({ i8*, i8*, i8*, i8*, i8, i8, i8, i8 }* @wm9712_phy_init.descriptor.14 to %struct._ddebug*), %struct.device* %15, i8* getelementptr inbounds ([30 x i8], [30 x i8]* @.str.15.33, i32 0, i32 0))
  br label %do.end130

do.end130:                                        ; preds = %if.then123, %do.body110
  store i32 4, i32* @delay.32, align 4, !tbaa !52
  br label %if.end131

if.end131:                                        ; preds = %do.end130, %if.end103
  %conv132 = zext i16 0 to i32
  %and133 = and i32 %conv132, 65295
  %conv134 = trunc i32 %and133 to i16
  %16 = load i32, i32* @delay.32, align 4, !tbaa !52
  %shl = shl i32 %16, 4
  %and135 = and i32 %shl, 240
  %conv136 = zext i16 %conv134 to i32
  %or137 = or i32 %conv136, %and135
  %conv138 = trunc i32 %or137 to i16
  %bf.load141 = load i32, i32* getelementptr inbounds (%struct._ddebug, %struct._ddebug* bitcast ({ i8*, i8*, i8*, i8*, i8, i8, i8, i8 }* @wm9712_phy_init.descriptor.16 to %struct._ddebug*), i32 0, i32 4), align 8
  %bf.lshr142 = lshr i32 %bf.load141, 18
  %bf.clear143 = and i32 %bf.lshr142, 255
  %and144 = and i32 %bf.clear143, 1
  %tobool145 = icmp ne i32 %and144, 0
  %lnot146 = xor i1 %tobool145, true
  %lnot148 = xor i1 %lnot146, true
  %lnot.ext149 = zext i1 %lnot148 to i32
  %conv150 = sext i32 %lnot.ext149 to i64
  %expval151 = call i64 @llvm.expect.i64(i64 %conv150, i64 0)
  %tobool152 = icmp ne i64 %expval151, 0
  br i1 %tobool152, label %if.then153, label %do.end160

if.then153:                                       ; preds = %if.end131
  %dev154 = getelementptr inbounds %struct.wm97xx.343, %struct.wm97xx.343* %wm, i32 0, i32 8
  %17 = load %struct.device*, %struct.device** %dev154, align 8, !tbaa !42
  %18 = load i32, i32* @delay.32, align 4, !tbaa !52
  %idxprom = sext i32 %18 to i64
  %arrayidx = getelementptr inbounds [16 x i32], [16 x i32]* @delay_table.34, i64 0, i64 %idxprom
  %19 = load i32, i32* %arrayidx, align 4, !tbaa !52
  call void (%struct._ddebug*, %struct.device*, i8*, ...) @__dynamic_dev_dbg(%struct._ddebug* bitcast ({ i8*, i8*, i8*, i8*, i8, i8, i8, i8 }* @wm9712_phy_init.descriptor.16 to %struct._ddebug*), %struct.device* %17, i8* getelementptr inbounds ([40 x i8], [40 x i8]* @.str.17.35, i32 0, i32 0), i32 %19)
  br label %do.end160

do.end160:                                        ; preds = %if.then153, %if.end131
  %20 = load i32, i32* @mask.36, align 4, !tbaa !52
  %and161 = and i32 %20, 3
  %shl162 = shl i32 %and161, 6
  %conv163 = zext i16 %dig2.2 to i32
  %or164 = or i32 %conv163, %shl162
  %conv165 = trunc i32 %or164 to i16
  %21 = load i32, i32* @mask.36, align 4, !tbaa !52
  %tobool166 = icmp ne i32 %21, 0
  br i1 %tobool166, label %if.then167, label %if.end178

if.then167:                                       ; preds = %do.end160
  %call168 = call i32 bitcast (i32 (%struct.wm97xx*, i16)* @wm97xx_reg_read to i32 (%struct.wm97xx.343*, i16)*)(%struct.wm97xx.343* %wm, i16 zeroext 86)
  %conv169 = trunc i32 %call168 to i16
  %conv170 = zext i16 %conv169 to i32
  %or171 = or i32 %conv170, 16
  %conv172 = trunc i32 %or171 to i16
  call void bitcast (void (%struct.wm97xx*, i16, i16)* @wm97xx_reg_write to void (%struct.wm97xx.343*, i16, i16)*)(%struct.wm97xx.343* %wm, i16 zeroext 86, i16 zeroext %conv172)
  %call173 = call i32 bitcast (i32 (%struct.wm97xx*, i16)* @wm97xx_reg_read to i32 (%struct.wm97xx.343*, i16)*)(%struct.wm97xx.343* %wm, i16 zeroext 76)
  %conv174 = trunc i32 %call173 to i16
  %conv175 = zext i16 %conv174 to i32
  %or176 = or i32 %conv175, 16
  %conv177 = trunc i32 %or176 to i16
  call void bitcast (void (%struct.wm97xx*, i16, i16)* @wm97xx_reg_write to void (%struct.wm97xx.343*, i16, i16)*)(%struct.wm97xx.343* %wm, i16 zeroext 76, i16 zeroext %conv177)
  br label %if.end178

if.end178:                                        ; preds = %if.then167, %do.end160
  %22 = load i32, i32* @coord, align 4, !tbaa !52
  %tobool179 = icmp ne i32 %22, 0
  %conv181 = zext i16 %conv165 to i32
  %or182 = or i32 %conv181, 512
  %conv183 = trunc i32 %or182 to i16
  %dig2.3 = select i1 %tobool179, i16 %conv183, i16 %conv165
  call void bitcast (void (%struct.wm97xx*, i16, i16)* @wm97xx_reg_write to void (%struct.wm97xx.343*, i16, i16)*)(%struct.wm97xx.343* %wm, i16 zeroext 118, i16 zeroext %conv138)
  call void bitcast (void (%struct.wm97xx*, i16, i16)* @wm97xx_reg_write to void (%struct.wm97xx.343*, i16, i16)*)(%struct.wm97xx.343* %wm, i16 zeroext 120, i16 zeroext %dig2.3)
  ret void
}

; Function Attrs: nounwind uwtable
define internal void @wm9712_dig_enable(%struct.wm97xx.343* %wm, i32 %enable) #0 {
entry:
  %dig = getelementptr inbounds %struct.wm97xx.343, %struct.wm97xx.343* %wm, i32 0, i32 0
  %arrayidx = getelementptr inbounds [3 x i16], [3 x i16]* %dig, i64 0, i64 2
  %0 = load i16, i16* %arrayidx, align 4, !tbaa !45
  %tobool = icmp ne i32 %enable, 0
  %conv = zext i16 %0 to i32
  br i1 %tobool, label %if.then, label %if.else

if.then:                                          ; preds = %entry
  %or = or i32 %conv, 49152
  %conv1 = trunc i32 %or to i16
  call void bitcast (void (%struct.wm97xx*, i16, i16)* @wm97xx_reg_write to void (%struct.wm97xx.343*, i16, i16)*)(%struct.wm97xx.343* %wm, i16 zeroext 120, i16 zeroext %conv1)
  %call = call i32 bitcast (i32 (%struct.wm97xx*, i16)* @wm97xx_reg_read to i32 (%struct.wm97xx.343*, i16)*)(%struct.wm97xx.343* %wm, i16 zeroext 122)
  br label %if.end

if.else:                                          ; preds = %entry
  %and = and i32 %conv, -49153
  %conv3 = trunc i32 %and to i16
  call void bitcast (void (%struct.wm97xx*, i16, i16)* @wm97xx_reg_write to void (%struct.wm97xx.343*, i16, i16)*)(%struct.wm97xx.343* %wm, i16 zeroext 120, i16 zeroext %conv3)
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then
  ret void
}

; Function Attrs: nounwind uwtable
define internal void @wm9712_dig_restore(%struct.wm97xx.343* %wm) #0 {
entry:
  %dig_save = getelementptr inbounds %struct.wm97xx.343, %struct.wm97xx.343* %wm, i32 0, i32 4
  %arrayidx = getelementptr inbounds [3 x i16], [3 x i16]* %dig_save, i64 0, i64 1
  %0 = load i16, i16* %arrayidx, align 2, !tbaa !45
  call void bitcast (void (%struct.wm97xx*, i16, i16)* @wm97xx_reg_write to void (%struct.wm97xx.343*, i16, i16)*)(%struct.wm97xx.343* %wm, i16 zeroext 118, i16 zeroext %0)
  %dig_save1 = getelementptr inbounds %struct.wm97xx.343, %struct.wm97xx.343* %wm, i32 0, i32 4
  %arrayidx2 = getelementptr inbounds [3 x i16], [3 x i16]* %dig_save1, i64 0, i64 2
  %1 = load i16, i16* %arrayidx2, align 2, !tbaa !45
  call void bitcast (void (%struct.wm97xx*, i16, i16)* @wm97xx_reg_write to void (%struct.wm97xx.343*, i16, i16)*)(%struct.wm97xx.343* %wm, i16 zeroext 120, i16 zeroext %1)
  ret void
}

; Function Attrs: nounwind uwtable
define internal void @wm9712_aux_prepare(%struct.wm97xx.343* %wm) #0 {
entry:
  %cmp = icmp uge i64 6, 64
  %dig_save = getelementptr inbounds %struct.wm97xx.343, %struct.wm97xx.343* %wm, i32 0, i32 4
  %arraydecay = getelementptr inbounds [3 x i16], [3 x i16]* %dig_save, i32 0, i32 0
  %0 = bitcast i16* %arraydecay to i8*
  %dig = getelementptr inbounds %struct.wm97xx.343, %struct.wm97xx.343* %wm, i32 0, i32 0
  %arraydecay1 = getelementptr inbounds [3 x i16], [3 x i16]* %dig, i32 0, i32 0
  %1 = bitcast i16* %arraydecay1 to i8*
  br i1 %cmp, label %if.then, label %if.else

if.then:                                          ; preds = %entry
  %call = call i8* @__memcpy(i8* %0, i8* %1, i64 6)
  br label %if.end

if.else:                                          ; preds = %entry
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %0, i8* %1, i64 6, i32 2, i1 false)
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then
  call void bitcast (void (%struct.wm97xx*, i16, i16)* @wm97xx_reg_write to void (%struct.wm97xx.343*, i16, i16)*)(%struct.wm97xx.343* %wm, i16 zeroext 118, i16 zeroext 0)
  call void bitcast (void (%struct.wm97xx*, i16, i16)* @wm97xx_reg_write to void (%struct.wm97xx.343*, i16, i16)*)(%struct.wm97xx.343* %wm, i16 zeroext 120, i16 zeroext -16384)
  ret void
}

declare i32 @dev_warn(%struct.device*, i8*, ...) #1

; Function Attrs: nounwind uwtable
define internal i32 @wm9712_poll_coord(%struct.wm97xx.343* %wm, %struct.wm97xx_data* %data) #0 {
entry:
  %0 = load i32, i32* @delay.32, align 4, !tbaa !52
  %mul = mul nsw i32 5, %0
  %pen_probably_down = getelementptr inbounds %struct.wm97xx.343, %struct.wm97xx.343* %wm, i32 0, i32 21
  %bf.load = load i8, i8* %pen_probably_down, align 4
  %bf.lshr = lshr i8 %bf.load, 2
  %bf.clear = and i8 %bf.lshr, 1
  %bf.cast = zext i8 %bf.clear to i32
  %tobool = icmp ne i32 %bf.cast, 0
  br i1 %tobool, label %if.end7, label %if.then

if.then:                                          ; preds = %entry
  %call = call i32 bitcast (i32 (%struct.wm97xx*, i16)* @wm97xx_reg_read to i32 (%struct.wm97xx.343*, i16)*)(%struct.wm97xx.343* %wm, i16 zeroext 122)
  %conv = trunc i32 %call to i16
  %conv1 = zext i16 %conv to i32
  %and = and i32 %conv1, 32768
  %tobool2 = icmp ne i32 %and, 0
  br i1 %tobool2, label %if.end, label %LeafBlock

if.end:                                           ; preds = %if.then
  %pen_probably_down4 = getelementptr inbounds %struct.wm97xx.343, %struct.wm97xx.343* %wm, i32 0, i32 21
  %bf.load5 = load i8, i8* %pen_probably_down4, align 4
  %bf.clear6 = and i8 %bf.load5, -5
  %bf.set = or i8 %bf.clear6, 4
  store i8 %bf.set, i8* %pen_probably_down4, align 4
  br label %LeafBlock

LeafBlock:                                        ; preds = %if.end, %if.then
  %cleanup.dest.slot.0 = phi i32 [ 0, %if.end ], [ 1, %if.then ]
  %SwitchLeaf = icmp eq i32 %cleanup.dest.slot.0, 0
  br i1 %SwitchLeaf, label %if.end7, label %cleanup89

if.end7:                                          ; preds = %LeafBlock, %entry
  %mach_ops = getelementptr inbounds %struct.wm97xx.343, %struct.wm97xx.343* %wm, i32 0, i32 11
  %1 = load %struct.wm97xx_mach_ops.349*, %struct.wm97xx_mach_ops.349** %mach_ops, align 8, !tbaa !2
  %tobool8 = icmp ne %struct.wm97xx_mach_ops.349* %1, null
  br i1 %tobool8, label %land.lhs.true, label %if.end14

land.lhs.true:                                    ; preds = %if.end7
  %mach_ops9 = getelementptr inbounds %struct.wm97xx.343, %struct.wm97xx.343* %wm, i32 0, i32 11
  %2 = load %struct.wm97xx_mach_ops.349*, %struct.wm97xx_mach_ops.349** %mach_ops9, align 8, !tbaa !2
  %pre_sample = getelementptr inbounds %struct.wm97xx_mach_ops.349, %struct.wm97xx_mach_ops.349* %2, i32 0, i32 7
  %3 = load void (i32)*, void (i32)** %pre_sample, align 8, !tbaa !98
  %tobool10 = icmp ne void (i32)* %3, null
  br i1 %tobool10, label %if.then11, label %if.end14

if.then11:                                        ; preds = %land.lhs.true
  %mach_ops12 = getelementptr inbounds %struct.wm97xx.343, %struct.wm97xx.343* %wm, i32 0, i32 11
  %4 = load %struct.wm97xx_mach_ops.349*, %struct.wm97xx_mach_ops.349** %mach_ops12, align 8, !tbaa !2
  %pre_sample13 = getelementptr inbounds %struct.wm97xx_mach_ops.349, %struct.wm97xx_mach_ops.349* %4, i32 0, i32 7
  %5 = load void (i32)*, void (i32)** %pre_sample13, align 8, !tbaa !98
  call void %5(i32 12288)
  br label %if.end14

if.end14:                                         ; preds = %if.then11, %land.lhs.true, %if.end7
  %6 = load i32, i32* @delay.32, align 4, !tbaa !52
  %shl = shl i32 %6, 4
  %and15 = and i32 %shl, 240
  %or = or i32 34816, %and15
  %conv16 = trunc i32 %or to i16
  call void bitcast (void (%struct.wm97xx*, i16, i16)* @wm97xx_reg_write to void (%struct.wm97xx.343*, i16, i16)*)(%struct.wm97xx.343* %wm, i16 zeroext 118, i16 zeroext %conv16)
  %7 = load i32, i32* @delay.32, align 4, !tbaa !52
  call void @poll_delay.39(i32 %7)
  %call17 = call i32 bitcast (i32 (%struct.wm97xx*, i16)* @wm97xx_reg_read to i32 (%struct.wm97xx.343*, i16)*)(%struct.wm97xx.343* %wm, i16 zeroext 122)
  %x = getelementptr inbounds %struct.wm97xx_data, %struct.wm97xx_data* %data, i32 0, i32 0
  store i32 %call17, i32* %x, align 4, !tbaa !94
  br label %while.cond

while.cond:                                       ; preds = %while.body, %if.end14
  %timeout.0 = phi i32 [ %mul, %if.end14 ], [ %dec, %while.body ]
  %call18 = call i32 bitcast (i32 (%struct.wm97xx*, i16)* @wm97xx_reg_read to i32 (%struct.wm97xx.343*, i16)*)(%struct.wm97xx.343* %wm, i16 zeroext 118)
  %and19 = and i32 %call18, 32768
  %tobool20 = icmp ne i32 %and19, 0
  %tobool21 = icmp ne i32 %timeout.0, 0
  %tobool21. = select i1 %tobool20, i1 %tobool21, i1 false
  br i1 %tobool21., label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  call void @__const_udelay(i64 90195)
  %dec = add nsw i32 %timeout.0, -1
  br label %while.cond

while.end:                                        ; preds = %while.cond
  %cmp = icmp sle i32 %timeout.0, 0
  br i1 %cmp, label %if.then23, label %if.end45

if.then23:                                        ; preds = %while.end
  %call24 = call i32 @is_pden.40(%struct.wm97xx.343* %wm)
  %tobool25 = icmp ne i32 %call24, 0
  br i1 %tobool25, label %if.then26, label %do.body30

if.then26:                                        ; preds = %if.then23
  %pen_probably_down27 = getelementptr inbounds %struct.wm97xx.343, %struct.wm97xx.343* %wm, i32 0, i32 21
  %bf.load28 = load i8, i8* %pen_probably_down27, align 4
  %bf.clear29 = and i8 %bf.load28, -5
  store i8 %bf.clear29, i8* %pen_probably_down27, align 4
  br label %cleanup89

do.body30:                                        ; preds = %if.then23
  %bf.load31 = load i32, i32* getelementptr inbounds (%struct._ddebug, %struct._ddebug* bitcast ({ i8*, i8*, i8*, i8*, i8, i8, i8, i8 }* @wm9712_poll_coord.descriptor to %struct._ddebug*), i32 0, i32 4), align 8
  %bf.lshr32 = lshr i32 %bf.load31, 18
  %bf.clear33 = and i32 %bf.lshr32, 255
  %and34 = and i32 %bf.clear33, 1
  %tobool35 = icmp ne i32 %and34, 0
  %lnot = xor i1 %tobool35, true
  %lnot36 = xor i1 %lnot, true
  %lnot.ext = zext i1 %lnot36 to i32
  %conv37 = sext i32 %lnot.ext to i64
  %expval = call i64 @llvm.expect.i64(i64 %conv37, i64 0)
  %tobool38 = icmp ne i64 %expval, 0
  br i1 %tobool38, label %if.then39, label %cleanup89

if.then39:                                        ; preds = %do.body30
  %dev = getelementptr inbounds %struct.wm97xx.343, %struct.wm97xx.343* %wm, i32 0, i32 8
  %8 = load %struct.device*, %struct.device** %dev, align 8, !tbaa !42
  call void (%struct._ddebug*, %struct.device*, i8*, ...) @__dynamic_dev_dbg(%struct._ddebug* bitcast ({ i8*, i8*, i8*, i8*, i8, i8, i8, i8 }* @wm9712_poll_coord.descriptor to %struct._ddebug*), %struct.device* %8, i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.3.41, i32 0, i32 0))
  br label %cleanup89

if.end45:                                         ; preds = %while.end
  %call46 = call i32 bitcast (i32 (%struct.wm97xx*, i16)* @wm97xx_reg_read to i32 (%struct.wm97xx.343*, i16)*)(%struct.wm97xx.343* %wm, i16 zeroext 122)
  %y = getelementptr inbounds %struct.wm97xx_data, %struct.wm97xx_data* %data, i32 0, i32 1
  store i32 %call46, i32* %y, align 4, !tbaa !96
  %9 = load i32, i32* @pil.27, align 4, !tbaa !52
  %tobool47 = icmp ne i32 %9, 0
  br i1 %tobool47, label %if.then48, label %if.end52

if.then48:                                        ; preds = %if.end45
  %call49 = call i32 bitcast (i32 (%struct.wm97xx*, i16)* @wm97xx_reg_read to i32 (%struct.wm97xx.343*, i16)*)(%struct.wm97xx.343* %wm, i16 zeroext 122)
  br label %if.end52

if.end52:                                         ; preds = %if.then48, %if.end45
  %.sink = phi i32 [ %call49, %if.then48 ], [ 45248, %if.end45 ]
  %p51 = getelementptr inbounds %struct.wm97xx_data, %struct.wm97xx_data* %data, i32 0, i32 2
  store i32 %.sink, i32* %p51, align 4, !tbaa !97
  %mach_ops53 = getelementptr inbounds %struct.wm97xx.343, %struct.wm97xx.343* %wm, i32 0, i32 11
  %10 = load %struct.wm97xx_mach_ops.349*, %struct.wm97xx_mach_ops.349** %mach_ops53, align 8, !tbaa !2
  %tobool54 = icmp ne %struct.wm97xx_mach_ops.349* %10, null
  br i1 %tobool54, label %land.lhs.true55, label %if.end61

land.lhs.true55:                                  ; preds = %if.end52
  %mach_ops56 = getelementptr inbounds %struct.wm97xx.343, %struct.wm97xx.343* %wm, i32 0, i32 11
  %11 = load %struct.wm97xx_mach_ops.349*, %struct.wm97xx_mach_ops.349** %mach_ops56, align 8, !tbaa !2
  %post_sample = getelementptr inbounds %struct.wm97xx_mach_ops.349, %struct.wm97xx_mach_ops.349* %11, i32 0, i32 8
  %12 = load void (i32)*, void (i32)** %post_sample, align 8, !tbaa !99
  %tobool57 = icmp ne void (i32)* %12, null
  br i1 %tobool57, label %if.then58, label %if.end61

if.then58:                                        ; preds = %land.lhs.true55
  %mach_ops59 = getelementptr inbounds %struct.wm97xx.343, %struct.wm97xx.343* %wm, i32 0, i32 11
  %13 = load %struct.wm97xx_mach_ops.349*, %struct.wm97xx_mach_ops.349** %mach_ops59, align 8, !tbaa !2
  %post_sample60 = getelementptr inbounds %struct.wm97xx_mach_ops.349, %struct.wm97xx_mach_ops.349* %13, i32 0, i32 8
  %14 = load void (i32)*, void (i32)** %post_sample60, align 8, !tbaa !99
  call void %14(i32 12288)
  br label %if.end61

if.end61:                                         ; preds = %if.then58, %land.lhs.true55, %if.end52
  %x62 = getelementptr inbounds %struct.wm97xx_data, %struct.wm97xx_data* %data, i32 0, i32 0
  %15 = load i32, i32* %x62, align 4, !tbaa !94
  %and63 = and i32 %15, 4096
  %tobool64 = icmp ne i32 %and63, 0
  br i1 %tobool64, label %lor.lhs.false, label %cleanup89

lor.lhs.false:                                    ; preds = %if.end61
  %y65 = getelementptr inbounds %struct.wm97xx_data, %struct.wm97xx_data* %data, i32 0, i32 1
  %16 = load i32, i32* %y65, align 4, !tbaa !96
  %and66 = and i32 %16, 8192
  %tobool67 = icmp ne i32 %and66, 0
  br i1 %tobool67, label %if.end69, label %cleanup89

if.end69:                                         ; preds = %lor.lhs.false
  %17 = load i32, i32* @pil.27, align 4, !tbaa !52
  %tobool70 = icmp ne i32 %17, 0
  br i1 %tobool70, label %land.lhs.true71, label %if.end76

land.lhs.true71:                                  ; preds = %if.end69
  %p72 = getelementptr inbounds %struct.wm97xx_data, %struct.wm97xx_data* %data, i32 0, i32 2
  %18 = load i32, i32* %p72, align 4, !tbaa !97
  %and73 = and i32 %18, 12288
  %tobool74 = icmp ne i32 %and73, 0
  br i1 %tobool74, label %if.end76, label %cleanup89

if.end76:                                         ; preds = %land.lhs.true71, %if.end69
  %x77 = getelementptr inbounds %struct.wm97xx_data, %struct.wm97xx_data* %data, i32 0, i32 0
  %19 = load i32, i32* %x77, align 4, !tbaa !94
  %and78 = and i32 %19, 32768
  %tobool79 = icmp ne i32 %and78, 0
  br i1 %tobool79, label %lor.lhs.false80, label %if.then84

lor.lhs.false80:                                  ; preds = %if.end76
  %y81 = getelementptr inbounds %struct.wm97xx_data, %struct.wm97xx_data* %data, i32 0, i32 1
  %20 = load i32, i32* %y81, align 4, !tbaa !96
  %and82 = and i32 %20, 32768
  %tobool83 = icmp ne i32 %and82, 0
  br i1 %tobool83, label %cleanup89, label %if.then84

if.then84:                                        ; preds = %lor.lhs.false80, %if.end76
  %pen_probably_down85 = getelementptr inbounds %struct.wm97xx.343, %struct.wm97xx.343* %wm, i32 0, i32 21
  %bf.load86 = load i8, i8* %pen_probably_down85, align 4
  %bf.clear87 = and i8 %bf.load86, -5
  store i8 %bf.clear87, i8* %pen_probably_down85, align 4
  br label %cleanup89

cleanup89:                                        ; preds = %if.then84, %lor.lhs.false80, %land.lhs.true71, %lor.lhs.false, %if.end61, %if.then39, %do.body30, %if.then26, %LeafBlock
  %retval.1 = phi i32 [ 4, %if.then84 ], [ 4, %do.body30 ], [ 4, %if.then39 ], [ 4, %if.then26 ], [ 2, %lor.lhs.false80 ], [ 0, %land.lhs.true71 ], [ 0, %if.end61 ], [ 0, %lor.lhs.false ], [ 4, %LeafBlock ]
  ret i32 %retval.1
}

; Function Attrs: inlinehint nounwind uwtable
define internal void @poll_delay.39(i32 %d) #4 {
entry:
  %idxprom = sext i32 %d to i64
  %arrayidx = getelementptr inbounds [16 x i32], [16 x i32]* @delay_table.34, i64 0, i64 %idxprom
  %0 = load i32, i32* %arrayidx, align 4, !tbaa !52
  %add = add nsw i32 63, %0
  %conv = sext i32 %add to i64
  call void @__udelay(i64 %conv)
  ret void
}

; Function Attrs: inlinehint nounwind uwtable
define internal i32 @is_pden.40(%struct.wm97xx.343* %wm) #4 {
entry:
  %dig = getelementptr inbounds %struct.wm97xx.343, %struct.wm97xx.343* %wm, i32 0, i32 0
  %arrayidx = getelementptr inbounds [3 x i16], [3 x i16]* %dig, i64 0, i64 2
  %0 = load i16, i16* %arrayidx, align 4, !tbaa !45
  %conv = zext i16 %0 to i32
  %and = and i32 %conv, 2048
  ret i32 %and
}

; Function Attrs: nounwind uwtable
define internal i32 @wm9713_poll_sample(%struct.wm97xx.683* %wm, i32 %adcsel, i32* %sample) #0 {
entry:
  %0 = load i32, i32* @delay.64, align 4, !tbaa !52
  %mul = mul nsw i32 5, %0
  %and = and i32 %adcsel, 32768
  %tobool = icmp ne i32 %and, 0
  %frombool = zext i1 %tobool to i8
  %tobool1 = trunc i8 %frombool to i1
  br i1 %tobool1, label %land.lhs.true, label %if.end10

land.lhs.true:                                    ; preds = %entry
  %pen_probably_down = getelementptr inbounds %struct.wm97xx.683, %struct.wm97xx.683* %wm, i32 0, i32 21
  %bf.load = load i8, i8* %pen_probably_down, align 4
  %bf.lshr = lshr i8 %bf.load, 2
  %bf.clear = and i8 %bf.lshr, 1
  %bf.cast = zext i8 %bf.clear to i32
  %tobool2 = icmp ne i32 %bf.cast, 0
  br i1 %tobool2, label %if.end10, label %if.then

if.then:                                          ; preds = %land.lhs.true
  %call = call i32 bitcast (i32 (%struct.wm97xx*, i16)* @wm97xx_reg_read to i32 (%struct.wm97xx.683*, i16)*)(%struct.wm97xx.683* %wm, i16 zeroext 122)
  %conv = trunc i32 %call to i16
  %conv3 = zext i16 %conv to i32
  %and4 = and i32 %conv3, 32768
  %tobool5 = icmp ne i32 %and4, 0
  br i1 %tobool5, label %if.end, label %LeafBlock

if.end:                                           ; preds = %if.then
  %pen_probably_down7 = getelementptr inbounds %struct.wm97xx.683, %struct.wm97xx.683* %wm, i32 0, i32 21
  %bf.load8 = load i8, i8* %pen_probably_down7, align 4
  %bf.clear9 = and i8 %bf.load8, -5
  %bf.set = or i8 %bf.clear9, 4
  store i8 %bf.set, i8* %pen_probably_down7, align 4
  br label %LeafBlock

LeafBlock:                                        ; preds = %if.end, %if.then
  %cleanup.dest.slot.0 = phi i32 [ 0, %if.end ], [ 1, %if.then ]
  %SwitchLeaf = icmp eq i32 %cleanup.dest.slot.0, 0
  br i1 %SwitchLeaf, label %if.end10, label %cleanup106

if.end10:                                         ; preds = %LeafBlock, %land.lhs.true, %entry
  %call11 = call i32 bitcast (i32 (%struct.wm97xx*, i16)* @wm97xx_reg_read to i32 (%struct.wm97xx.683*, i16)*)(%struct.wm97xx.683* %wm, i16 zeroext 116)
  %conv12 = trunc i32 %call11 to i16
  %conv13 = zext i16 %conv12 to i32
  %and14 = and i32 %conv13, -255
  %conv15 = trunc i32 %and14 to i16
  %and16 = and i32 %adcsel, 28672
  %shr = ashr i32 %and16, 12
  %shl = shl i32 1, %shr
  %conv17 = zext i16 %conv15 to i32
  %or = or i32 %conv17, %shl
  %conv18 = trunc i32 %or to i16
  %mach_ops = getelementptr inbounds %struct.wm97xx.683, %struct.wm97xx.683* %wm, i32 0, i32 11
  %1 = load %struct.wm97xx_mach_ops.689*, %struct.wm97xx_mach_ops.689** %mach_ops, align 8, !tbaa !2
  %tobool19 = icmp ne %struct.wm97xx_mach_ops.689* %1, null
  br i1 %tobool19, label %land.lhs.true20, label %if.end26

land.lhs.true20:                                  ; preds = %if.end10
  %mach_ops21 = getelementptr inbounds %struct.wm97xx.683, %struct.wm97xx.683* %wm, i32 0, i32 11
  %2 = load %struct.wm97xx_mach_ops.689*, %struct.wm97xx_mach_ops.689** %mach_ops21, align 8, !tbaa !2
  %pre_sample = getelementptr inbounds %struct.wm97xx_mach_ops.689, %struct.wm97xx_mach_ops.689* %2, i32 0, i32 7
  %3 = load void (i32)*, void (i32)** %pre_sample, align 8, !tbaa !98
  %tobool22 = icmp ne void (i32)* %3, null
  br i1 %tobool22, label %if.then23, label %if.end26

if.then23:                                        ; preds = %land.lhs.true20
  %mach_ops24 = getelementptr inbounds %struct.wm97xx.683, %struct.wm97xx.683* %wm, i32 0, i32 11
  %4 = load %struct.wm97xx_mach_ops.689*, %struct.wm97xx_mach_ops.689** %mach_ops24, align 8, !tbaa !2
  %pre_sample25 = getelementptr inbounds %struct.wm97xx_mach_ops.689, %struct.wm97xx_mach_ops.689* %4, i32 0, i32 7
  %5 = load void (i32)*, void (i32)** %pre_sample25, align 8, !tbaa !98
  call void %5(i32 %adcsel)
  br label %if.end26

if.end26:                                         ; preds = %if.then23, %land.lhs.true20, %if.end10
  %conv27 = zext i16 %conv18 to i32
  %or28 = or i32 %conv27, 512
  %conv29 = trunc i32 %or28 to i16
  call void bitcast (void (%struct.wm97xx*, i16, i16)* @wm97xx_reg_write to void (%struct.wm97xx.683*, i16, i16)*)(%struct.wm97xx.683* %wm, i16 zeroext 116, i16 zeroext %conv29)
  %6 = load i32, i32* @delay.64, align 4, !tbaa !52
  call void @poll_delay.70(i32 %6)
  br label %while.cond

while.cond:                                       ; preds = %while.body, %if.end26
  %timeout.0 = phi i32 [ %mul, %if.end26 ], [ %dec, %while.body ]
  %call30 = call i32 bitcast (i32 (%struct.wm97xx*, i16)* @wm97xx_reg_read to i32 (%struct.wm97xx.683*, i16)*)(%struct.wm97xx.683* %wm, i16 zeroext 116)
  %and31 = and i32 %call30, 512
  %tobool32 = icmp ne i32 %and31, 0
  %tobool33 = icmp ne i32 %timeout.0, 0
  %tobool33. = select i1 %tobool32, i1 %tobool33, i1 false
  br i1 %tobool33., label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  call void @__const_udelay(i64 90195)
  %dec = add nsw i32 %timeout.0, -1
  br label %while.cond

while.end:                                        ; preds = %while.cond
  %cmp = icmp sle i32 %timeout.0, 0
  br i1 %cmp, label %if.then35, label %if.end57

if.then35:                                        ; preds = %while.end
  %call36 = call i32 @is_pden.71(%struct.wm97xx.683* %wm)
  %tobool37 = icmp ne i32 %call36, 0
  br i1 %tobool37, label %if.then38, label %do.body42

if.then38:                                        ; preds = %if.then35
  %pen_probably_down39 = getelementptr inbounds %struct.wm97xx.683, %struct.wm97xx.683* %wm, i32 0, i32 21
  %bf.load40 = load i8, i8* %pen_probably_down39, align 4
  %bf.clear41 = and i8 %bf.load40, -5
  store i8 %bf.clear41, i8* %pen_probably_down39, align 4
  br label %cleanup106

do.body42:                                        ; preds = %if.then35
  %bf.load43 = load i32, i32* getelementptr inbounds (%struct._ddebug, %struct._ddebug* bitcast ({ i8*, i8*, i8*, i8*, i8, i8, i8, i8 }* @wm9713_poll_sample.descriptor to %struct._ddebug*), i32 0, i32 4), align 8
  %bf.lshr44 = lshr i32 %bf.load43, 18
  %bf.clear45 = and i32 %bf.lshr44, 255
  %and46 = and i32 %bf.clear45, 1
  %tobool47 = icmp ne i32 %and46, 0
  %lnot = xor i1 %tobool47, true
  %lnot48 = xor i1 %lnot, true
  %lnot.ext = zext i1 %lnot48 to i32
  %conv49 = sext i32 %lnot.ext to i64
  %expval = call i64 @llvm.expect.i64(i64 %conv49, i64 0)
  %tobool50 = icmp ne i64 %expval, 0
  br i1 %tobool50, label %if.then51, label %cleanup106

if.then51:                                        ; preds = %do.body42
  %dev = getelementptr inbounds %struct.wm97xx.683, %struct.wm97xx.683* %wm, i32 0, i32 8
  %7 = load %struct.device*, %struct.device** %dev, align 8, !tbaa !42
  call void (%struct._ddebug*, %struct.device*, i8*, ...) @__dynamic_dev_dbg(%struct._ddebug* bitcast ({ i8*, i8*, i8*, i8*, i8, i8, i8, i8 }* @wm9713_poll_sample.descriptor to %struct._ddebug*), %struct.device* %7, i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.3.72, i32 0, i32 0))
  br label %cleanup106

if.end57:                                         ; preds = %while.end
  %call58 = call i32 bitcast (i32 (%struct.wm97xx*, i16)* @wm97xx_reg_read to i32 (%struct.wm97xx.683*, i16)*)(%struct.wm97xx.683* %wm, i16 zeroext 122)
  store i32 %call58, i32* %sample, align 4, !tbaa !52
  %mach_ops59 = getelementptr inbounds %struct.wm97xx.683, %struct.wm97xx.683* %wm, i32 0, i32 11
  %8 = load %struct.wm97xx_mach_ops.689*, %struct.wm97xx_mach_ops.689** %mach_ops59, align 8, !tbaa !2
  %tobool60 = icmp ne %struct.wm97xx_mach_ops.689* %8, null
  br i1 %tobool60, label %land.lhs.true61, label %if.end67

land.lhs.true61:                                  ; preds = %if.end57
  %mach_ops62 = getelementptr inbounds %struct.wm97xx.683, %struct.wm97xx.683* %wm, i32 0, i32 11
  %9 = load %struct.wm97xx_mach_ops.689*, %struct.wm97xx_mach_ops.689** %mach_ops62, align 8, !tbaa !2
  %post_sample = getelementptr inbounds %struct.wm97xx_mach_ops.689, %struct.wm97xx_mach_ops.689* %9, i32 0, i32 8
  %10 = load void (i32)*, void (i32)** %post_sample, align 8, !tbaa !99
  %tobool63 = icmp ne void (i32)* %10, null
  br i1 %tobool63, label %if.then64, label %if.end67

if.then64:                                        ; preds = %land.lhs.true61
  %mach_ops65 = getelementptr inbounds %struct.wm97xx.683, %struct.wm97xx.683* %wm, i32 0, i32 11
  %11 = load %struct.wm97xx_mach_ops.689*, %struct.wm97xx_mach_ops.689** %mach_ops65, align 8, !tbaa !2
  %post_sample66 = getelementptr inbounds %struct.wm97xx_mach_ops.689, %struct.wm97xx_mach_ops.689* %11, i32 0, i32 8
  %12 = load void (i32)*, void (i32)** %post_sample66, align 8, !tbaa !99
  call void %12(i32 %adcsel)
  br label %if.end67

if.end67:                                         ; preds = %if.then64, %land.lhs.true61, %if.end57
  %13 = load i32, i32* %sample, align 4, !tbaa !52
  %xor = xor i32 %13, %adcsel
  %and68 = and i32 %xor, 28672
  %tobool69 = icmp ne i32 %and68, 0
  br i1 %tobool69, label %do.body72, label %if.end95

do.body72:                                        ; preds = %if.end67
  %bf.load73 = load i32, i32* getelementptr inbounds (%struct._ddebug, %struct._ddebug* bitcast ({ i8*, i8*, i8*, i8*, i8, i8, i8, i8 }* @wm9713_poll_sample.descriptor.4 to %struct._ddebug*), i32 0, i32 4), align 8
  %bf.lshr74 = lshr i32 %bf.load73, 18
  %bf.clear75 = and i32 %bf.lshr74, 255
  %and76 = and i32 %bf.clear75, 1
  %tobool77 = icmp ne i32 %and76, 0
  %lnot78 = xor i1 %tobool77, true
  %lnot80 = xor i1 %lnot78, true
  %lnot.ext81 = zext i1 %lnot80 to i32
  %conv82 = sext i32 %lnot.ext81 to i64
  %expval83 = call i64 @llvm.expect.i64(i64 %conv82, i64 0)
  %tobool84 = icmp ne i64 %expval83, 0
  br i1 %tobool84, label %if.then85, label %cleanup106

if.then85:                                        ; preds = %do.body72
  %dev86 = getelementptr inbounds %struct.wm97xx.683, %struct.wm97xx.683* %wm, i32 0, i32 8
  %14 = load %struct.device*, %struct.device** %dev86, align 8, !tbaa !42
  %and87 = and i32 %adcsel, 28672
  %15 = load i32, i32* %sample, align 4, !tbaa !52
  %and88 = and i32 %15, 28672
  call void (%struct._ddebug*, %struct.device*, i8*, ...) @__dynamic_dev_dbg(%struct._ddebug* bitcast ({ i8*, i8*, i8*, i8*, i8, i8, i8, i8 }* @wm9713_poll_sample.descriptor.4 to %struct._ddebug*), %struct.device* %14, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.5.75, i32 0, i32 0), i32 %and87, i32 %and88)
  br label %cleanup106

if.end95:                                         ; preds = %if.end67
  %tobool96 = trunc i8 %frombool to i1
  br i1 %tobool96, label %land.lhs.true98, label %cleanup106

land.lhs.true98:                                  ; preds = %if.end95
  %16 = load i32, i32* %sample, align 4, !tbaa !52
  %and99 = and i32 %16, 32768
  %tobool100 = icmp ne i32 %and99, 0
  br i1 %tobool100, label %cleanup106, label %if.then101

if.then101:                                       ; preds = %land.lhs.true98
  %pen_probably_down102 = getelementptr inbounds %struct.wm97xx.683, %struct.wm97xx.683* %wm, i32 0, i32 21
  %bf.load103 = load i8, i8* %pen_probably_down102, align 4
  %bf.clear104 = and i8 %bf.load103, -5
  store i8 %bf.clear104, i8* %pen_probably_down102, align 4
  br label %cleanup106

cleanup106:                                       ; preds = %if.then101, %land.lhs.true98, %if.end95, %if.then85, %do.body72, %if.then51, %do.body42, %if.then38, %LeafBlock
  %retval.1 = phi i32 [ 4, %if.then101 ], [ 4, %do.body42 ], [ 4, %if.then51 ], [ 4, %if.then38 ], [ 4, %if.then85 ], [ 4, %do.body72 ], [ 2, %land.lhs.true98 ], [ 2, %if.end95 ], [ 4, %LeafBlock ]
  ret i32 %retval.1
}

; Function Attrs: nounwind uwtable
define internal i32 @wm9713_poll_touch(%struct.wm97xx.683* %wm, %struct.wm97xx_data* %data) #0 {
entry:
  %0 = load i32, i32* @coord.69, align 4, !tbaa !52
  %tobool = icmp ne i32 %0, 0
  br i1 %tobool, label %if.then, label %if.else

if.then:                                          ; preds = %entry
  %call = call i32 @wm9713_poll_coord(%struct.wm97xx.683* %wm, %struct.wm97xx_data* %data)
  %cmp = icmp ne i32 %call, 2
  br i1 %cmp, label %cleanup, label %if.end19

if.else:                                          ; preds = %entry
  %x = getelementptr inbounds %struct.wm97xx_data, %struct.wm97xx_data* %data, i32 0, i32 0
  %call2 = call i32 @wm9713_poll_sample(%struct.wm97xx.683* %wm, i32 36864, i32* %x)
  %cmp3 = icmp ne i32 %call2, 2
  br i1 %cmp3, label %cleanup, label %if.end5

if.end5:                                          ; preds = %if.else
  %y = getelementptr inbounds %struct.wm97xx_data, %struct.wm97xx_data* %data, i32 0, i32 1
  %call6 = call i32 @wm9713_poll_sample(%struct.wm97xx.683* %wm, i32 40960, i32* %y)
  %cmp7 = icmp ne i32 %call6, 2
  br i1 %cmp7, label %cleanup, label %if.end9

if.end9:                                          ; preds = %if.end5
  %1 = load i32, i32* @pil.59, align 4, !tbaa !52
  %tobool10 = icmp ne i32 %1, 0
  %p = getelementptr inbounds %struct.wm97xx_data, %struct.wm97xx_data* %data, i32 0, i32 2
  br i1 %tobool10, label %if.then11, label %if.else16

if.then11:                                        ; preds = %if.end9
  %call12 = call i32 @wm9713_poll_sample(%struct.wm97xx.683* %wm, i32 45056, i32* %p)
  %cmp13 = icmp ne i32 %call12, 2
  br i1 %cmp13, label %cleanup, label %if.end19

if.else16:                                        ; preds = %if.end9
  store i32 45248, i32* %p, align 4, !tbaa !97
  br label %if.end19

if.end19:                                         ; preds = %if.else16, %if.then11, %if.then
  br label %cleanup

cleanup:                                          ; preds = %if.end19, %if.then11, %if.end5, %if.else, %if.then
  %retval.0 = phi i32 [ 2, %if.end19 ], [ %call, %if.then ], [ %call2, %if.else ], [ %call6, %if.end5 ], [ %call12, %if.then11 ]
  ret i32 %retval.0
}

; Function Attrs: nounwind uwtable
define internal i32 @wm9713_acc_enable(%struct.wm97xx.683* %wm, i32 %enable) #0 {
entry:
  %dig = getelementptr inbounds %struct.wm97xx.683, %struct.wm97xx.683* %wm, i32 0, i32 0
  %arrayidx = getelementptr inbounds [3 x i16], [3 x i16]* %dig, i64 0, i64 0
  %0 = load i16, i16* %arrayidx, align 8, !tbaa !45
  %dig4 = getelementptr inbounds %struct.wm97xx.683, %struct.wm97xx.683* %wm, i32 0, i32 0
  %arrayidx5 = getelementptr inbounds [3 x i16], [3 x i16]* %dig4, i64 0, i64 1
  %1 = load i16, i16* %arrayidx5, align 2, !tbaa !45
  %dig6 = getelementptr inbounds %struct.wm97xx.683, %struct.wm97xx.683* %wm, i32 0, i32 0
  %arrayidx7 = getelementptr inbounds [3 x i16], [3 x i16]* %dig6, i64 0, i64 2
  %2 = load i16, i16* %arrayidx7, align 4, !tbaa !45
  %tobool = icmp ne i32 %enable, 0
  br i1 %tobool, label %if.then, label %if.else

if.then:                                          ; preds = %entry
  %mach_ops = getelementptr inbounds %struct.wm97xx.683, %struct.wm97xx.683* %wm, i32 0, i32 11
  %3 = load %struct.wm97xx_mach_ops.689*, %struct.wm97xx_mach_ops.689** %mach_ops, align 8, !tbaa !2
  %acc_startup = getelementptr inbounds %struct.wm97xx_mach_ops.689, %struct.wm97xx_mach_ops.689* %3, i32 0, i32 3
  %4 = load i32 (%struct.wm97xx.683*)*, i32 (%struct.wm97xx.683*)** %acc_startup, align 8, !tbaa !102
  %tobool8 = icmp ne i32 (%struct.wm97xx.683*)* %4, null
  br i1 %tobool8, label %land.lhs.true, label %if.end

land.lhs.true:                                    ; preds = %if.then
  %mach_ops9 = getelementptr inbounds %struct.wm97xx.683, %struct.wm97xx.683* %wm, i32 0, i32 11
  %5 = load %struct.wm97xx_mach_ops.689*, %struct.wm97xx_mach_ops.689** %mach_ops9, align 8, !tbaa !2
  %acc_startup10 = getelementptr inbounds %struct.wm97xx_mach_ops.689, %struct.wm97xx_mach_ops.689* %5, i32 0, i32 3
  %6 = load i32 (%struct.wm97xx.683*)*, i32 (%struct.wm97xx.683*)** %acc_startup10, align 8, !tbaa !102
  %call = call i32 %6(%struct.wm97xx.683* %wm)
  %cmp = icmp slt i32 %call, 0
  br i1 %cmp, label %cleanup, label %if.end

if.end:                                           ; preds = %land.lhs.true, %if.then
  %ret.0 = phi i32 [ %call, %land.lhs.true ], [ 0, %if.then ]
  %conv = zext i16 %0 to i32
  %and = and i32 %conv, -255
  %conv12 = trunc i32 %and to i16
  %conv13 = zext i16 %conv12 to i32
  %or = or i32 %conv13, 263
  %conv14 = trunc i32 %or to i16
  %7 = load i32, i32* @pil.59, align 4, !tbaa !52
  %tobool15 = icmp ne i32 %7, 0
  %conv17 = zext i16 %conv14 to i32
  %or18 = or i32 %conv17, 8
  %conv19 = trunc i32 %or18 to i16
  %dig1.0 = select i1 %tobool15, i16 %conv19, i16 %conv14
  %conv21 = zext i16 %1 to i32
  %and22 = and i32 %conv21, -1016
  %conv23 = trunc i32 %and22 to i16
  %8 = load i32, i32* @delay.64, align 4, !tbaa !52
  %shl = shl i32 %8, 4
  %and24 = and i32 %shl, 240
  %or25 = or i32 8, %and24
  %acc_slot = getelementptr inbounds %struct.wm97xx.683, %struct.wm97xx.683* %wm, i32 0, i32 19
  %9 = load i16, i16* %acc_slot, align 8, !tbaa !100
  %conv26 = zext i16 %9 to i32
  %sub = sub nsw i32 %conv26, 5
  %and27 = and i32 %sub, 7
  %or28 = or i32 %or25, %and27
  %acc_rate = getelementptr inbounds %struct.wm97xx.683, %struct.wm97xx.683* %wm, i32 0, i32 20
  %10 = load i16, i16* %acc_rate, align 2, !tbaa !101
  %conv29 = zext i16 %10 to i32
  %and30 = and i32 %conv29, 3
  %shl31 = shl i32 %and30, 8
  %acc_rate32 = getelementptr inbounds %struct.wm97xx.683, %struct.wm97xx.683* %wm, i32 0, i32 20
  %11 = load i16, i16* %acc_rate32, align 2, !tbaa !101
  %conv33 = zext i16 %11 to i32
  %and34 = and i32 %conv33, 4
  %tobool35 = icmp ne i32 %and34, 0
  %cond = select i1 %tobool35, i32 240, i32 0
  %or36 = or i32 %shl31, %cond
  %or37 = or i32 %or28, %or36
  %conv38 = zext i16 %conv23 to i32
  %or39 = or i32 %conv38, %or37
  %conv40 = trunc i32 %or39 to i16
  %conv41 = zext i16 %2 to i32
  %or42 = or i32 %conv41, 2048
  %conv43 = trunc i32 %or42 to i16
  br label %if.end59

if.else:                                          ; preds = %entry
  %conv44 = zext i16 %0 to i32
  %and45 = and i32 %conv44, -258
  %conv46 = trunc i32 %and45 to i16
  %conv47 = zext i16 %1 to i32
  %and48 = and i32 %conv47, -9
  %conv49 = trunc i32 %and48 to i16
  %conv50 = zext i16 %2 to i32
  %and51 = and i32 %conv50, -2049
  %conv52 = trunc i32 %and51 to i16
  %mach_ops53 = getelementptr inbounds %struct.wm97xx.683, %struct.wm97xx.683* %wm, i32 0, i32 11
  %12 = load %struct.wm97xx_mach_ops.689*, %struct.wm97xx_mach_ops.689** %mach_ops53, align 8, !tbaa !2
  %acc_shutdown = getelementptr inbounds %struct.wm97xx_mach_ops.689, %struct.wm97xx_mach_ops.689* %12, i32 0, i32 4
  %13 = load void (%struct.wm97xx.683*)*, void (%struct.wm97xx.683*)** %acc_shutdown, align 8, !tbaa !103
  %tobool54 = icmp ne void (%struct.wm97xx.683*)* %13, null
  br i1 %tobool54, label %if.then55, label %if.end59

if.then55:                                        ; preds = %if.else
  %mach_ops56 = getelementptr inbounds %struct.wm97xx.683, %struct.wm97xx.683* %wm, i32 0, i32 11
  %14 = load %struct.wm97xx_mach_ops.689*, %struct.wm97xx_mach_ops.689** %mach_ops56, align 8, !tbaa !2
  %acc_shutdown57 = getelementptr inbounds %struct.wm97xx_mach_ops.689, %struct.wm97xx_mach_ops.689* %14, i32 0, i32 4
  %15 = load void (%struct.wm97xx.683*)*, void (%struct.wm97xx.683*)** %acc_shutdown57, align 8, !tbaa !103
  call void %15(%struct.wm97xx.683* %wm)
  br label %if.end59

if.end59:                                         ; preds = %if.then55, %if.else, %if.end
  %dig3.0 = phi i16 [ %conv43, %if.end ], [ %conv52, %if.then55 ], [ %conv52, %if.else ]
  %dig2.0 = phi i16 [ %conv40, %if.end ], [ %conv49, %if.then55 ], [ %conv49, %if.else ]
  %dig1.1 = phi i16 [ %dig1.0, %if.end ], [ %conv46, %if.then55 ], [ %conv46, %if.else ]
  %ret.1 = phi i32 [ %ret.0, %if.end ], [ 0, %if.then55 ], [ 0, %if.else ]
  call void bitcast (void (%struct.wm97xx*, i16, i16)* @wm97xx_reg_write to void (%struct.wm97xx.683*, i16, i16)*)(%struct.wm97xx.683* %wm, i16 zeroext 116, i16 zeroext %dig1.1)
  call void bitcast (void (%struct.wm97xx*, i16, i16)* @wm97xx_reg_write to void (%struct.wm97xx.683*, i16, i16)*)(%struct.wm97xx.683* %wm, i16 zeroext 118, i16 zeroext %dig2.0)
  call void bitcast (void (%struct.wm97xx*, i16, i16)* @wm97xx_reg_write to void (%struct.wm97xx.683*, i16, i16)*)(%struct.wm97xx.683* %wm, i16 zeroext 120, i16 zeroext %dig3.0)
  br label %cleanup

cleanup:                                          ; preds = %if.end59, %land.lhs.true
  %retval.0 = phi i32 [ %ret.1, %if.end59 ], [ %call, %land.lhs.true ]
  ret i32 %retval.0
}

; Function Attrs: nounwind uwtable
define internal void @wm9713_phy_init(%struct.wm97xx.683* %wm) #0 {
entry:
  %0 = load i32, i32* @rpu.55, align 4, !tbaa !52
  %tobool = icmp ne i32 %0, 0
  br i1 %tobool, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %conv = zext i16 1 to i32
  %and = and i32 %conv, 65472
  %conv1 = trunc i32 %and to i16
  %1 = load i32, i32* @rpu.55, align 4, !tbaa !52
  %and2 = and i32 %1, 63
  %conv3 = zext i16 %conv1 to i32
  %or = or i32 %conv3, %and2
  %conv4 = trunc i32 %or to i16
  %2 = call i32 (%struct.device*, i8*, ...) @_dev_info(%struct.device* null, i8* null)
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  %dig3.0 = phi i16 [ %conv4, %if.then ], [ 1, %entry ]
  %3 = load i32, i32* @five_wire.57, align 4, !tbaa !52
  %tobool5 = icmp ne i32 %3, 0
  br i1 %tobool5, label %if.then6, label %if.end17

if.then6:                                         ; preds = %if.end
  %conv7 = zext i16 %dig3.0 to i32
  %or8 = or i32 %conv7, 4096
  %conv9 = trunc i32 %or8 to i16
  %4 = call i32 (%struct.device*, i8*, ...) @_dev_info(%struct.device* null, i8* null)
  %5 = load i32, i32* @pil.59, align 4, !tbaa !52
  %tobool12 = icmp ne i32 %5, 0
  br i1 %tobool12, label %if.then13, label %if.end17

if.then13:                                        ; preds = %if.then6
  %6 = call i32 (%struct.device*, i8*, ...) @dev_warn(%struct.device* null, i8* null)
  store i32 0, i32* @pil.59, align 4, !tbaa !52
  br label %if.end17

if.end17:                                         ; preds = %if.then13, %if.then6, %if.end
  %dig3.1 = phi i16 [ %dig3.0, %if.end ], [ %conv9, %if.then13 ], [ %conv9, %if.then6 ]
  %7 = load i32, i32* @pil.59, align 4, !tbaa !52
  %cmp = icmp eq i32 %7, 2
  br i1 %cmp, label %if.then19, label %if.else

if.then19:                                        ; preds = %if.end17
  %conv20 = zext i16 %dig3.1 to i32
  %or21 = or i32 %conv20, 256
  %conv22 = trunc i32 %or21 to i16
  %8 = call i32 (%struct.device*, i8*, ...) @_dev_info(%struct.device* null, i8* null)
  br label %if.end30

if.else:                                          ; preds = %if.end17
  %9 = load i32, i32* @pil.59, align 4, !tbaa !52
  %tobool25 = icmp ne i32 %9, 0
  br i1 %tobool25, label %if.then26, label %if.end30

if.then26:                                        ; preds = %if.else
  %10 = call i32 (%struct.device*, i8*, ...) @_dev_info(%struct.device* null, i8* null)
  br label %if.end30

if.end30:                                         ; preds = %if.then26, %if.else, %if.then19
  %dig3.2 = phi i16 [ %conv22, %if.then19 ], [ %dig3.1, %if.then26 ], [ %dig3.1, %if.else ]
  %11 = load i32, i32* @pil.59, align 4, !tbaa !52
  %tobool31 = icmp ne i32 %11, 0
  br i1 %tobool31, label %if.end33, label %if.then32

if.then32:                                        ; preds = %if.end30
  store i32 0, i32* @pressure.63, align 4, !tbaa !52
  br label %if.end33

if.end33:                                         ; preds = %if.then32, %if.end30
  %12 = load i32, i32* @delay.64, align 4, !tbaa !52
  %cmp34 = icmp slt i32 %12, 0
  %13 = load i32, i32* @delay.64, align 4
  %cmp36 = icmp sgt i32 %13, 15
  %or.cond = or i1 %cmp34, %cmp36
  br i1 %or.cond, label %if.then38, label %if.end43

if.then38:                                        ; preds = %if.end33
  %14 = call i32 (%struct.device*, i8*, ...) @_dev_info(%struct.device* null, i8* null)
  store i32 4, i32* @delay.64, align 4, !tbaa !52
  %15 = call i32 (%struct.device*, i8*, ...) @_dev_info(%struct.device* null, i8* null)
  br label %if.end43

if.end43:                                         ; preds = %if.then38, %if.end33
  %conv44 = zext i16 64 to i32
  %and45 = and i32 %conv44, 65295
  %conv46 = trunc i32 %and45 to i16
  %16 = load i32, i32* @delay.64, align 4, !tbaa !52
  %shl = shl i32 %16, 4
  %and47 = and i32 %shl, 240
  %conv48 = zext i16 %conv46 to i32
  %or49 = or i32 %conv48, %and47
  %conv50 = trunc i32 %or49 to i16
  %17 = load i32, i32* @mask.68, align 4, !tbaa !52
  %and51 = and i32 %17, 3
  %shl52 = shl i32 %and51, 4
  %conv53 = zext i16 %dig3.2 to i32
  %or54 = or i32 %conv53, %shl52
  %conv55 = trunc i32 %or54 to i16
  %18 = load i32, i32* @coord.69, align 4, !tbaa !52
  %tobool56 = icmp ne i32 %18, 0
  %conv58 = zext i16 %conv55 to i32
  %or59 = or i32 %conv58, 512
  %conv60 = trunc i32 %or59 to i16
  %dig3.3 = select i1 %tobool56, i16 %conv60, i16 %conv55
  %call62 = call i32 bitcast (i32 (%struct.wm97xx*, i16)* @wm97xx_reg_read to i32 (%struct.wm97xx.683*, i16)*)(%struct.wm97xx.683* %wm, i16 zeroext 90)
  %conv63 = trunc i32 %call62 to i16
  %misc = getelementptr inbounds %struct.wm97xx.683, %struct.wm97xx.683* %wm, i32 0, i32 3
  store i16 %conv63, i16* %misc, align 4, !tbaa !67
  call void bitcast (void (%struct.wm97xx*, i16, i16)* @wm97xx_reg_write to void (%struct.wm97xx.683*, i16, i16)*)(%struct.wm97xx.683* %wm, i16 zeroext 116, i16 zeroext 0)
  call void bitcast (void (%struct.wm97xx*, i16, i16)* @wm97xx_reg_write to void (%struct.wm97xx.683*, i16, i16)*)(%struct.wm97xx.683* %wm, i16 zeroext 118, i16 zeroext %conv50)
  call void bitcast (void (%struct.wm97xx*, i16, i16)* @wm97xx_reg_write to void (%struct.wm97xx.683*, i16, i16)*)(%struct.wm97xx.683* %wm, i16 zeroext 120, i16 zeroext %dig3.3)
  call void bitcast (void (%struct.wm97xx*, i16, i16)* @wm97xx_reg_write to void (%struct.wm97xx.683*, i16, i16)*)(%struct.wm97xx.683* %wm, i16 zeroext 80, i16 zeroext 0)
  ret void
}

; Function Attrs: nounwind uwtable
define internal void @wm9713_dig_enable(%struct.wm97xx.683* %wm, i32 %enable) #0 {
entry:
  %tobool = icmp ne i32 %enable, 0
  br i1 %tobool, label %if.then, label %if.else

if.then:                                          ; preds = %entry
  %call = call i32 bitcast (i32 (%struct.wm97xx*, i16)* @wm97xx_reg_read to i32 (%struct.wm97xx.683*, i16)*)(%struct.wm97xx.683* %wm, i16 zeroext 60)
  %conv = trunc i32 %call to i16
  %conv1 = zext i16 %conv to i32
  %and = and i32 %conv1, 32767
  %conv2 = trunc i32 %and to i16
  call void bitcast (void (%struct.wm97xx*, i16, i16)* @wm97xx_reg_write to void (%struct.wm97xx.683*, i16, i16)*)(%struct.wm97xx.683* %wm, i16 zeroext 60, i16 zeroext %conv2)
  %dig = getelementptr inbounds %struct.wm97xx.683, %struct.wm97xx.683* %wm, i32 0, i32 0
  %arrayidx = getelementptr inbounds [3 x i16], [3 x i16]* %dig, i64 0, i64 2
  %0 = load i16, i16* %arrayidx, align 4, !tbaa !45
  %conv3 = zext i16 %0 to i32
  %or = or i32 %conv3, 49152
  %conv4 = trunc i32 %or to i16
  call void bitcast (void (%struct.wm97xx*, i16, i16)* @wm97xx_reg_write to void (%struct.wm97xx.683*, i16, i16)*)(%struct.wm97xx.683* %wm, i16 zeroext 120, i16 zeroext %conv4)
  %call5 = call i32 bitcast (i32 (%struct.wm97xx*, i16)* @wm97xx_reg_read to i32 (%struct.wm97xx.683*, i16)*)(%struct.wm97xx.683* %wm, i16 zeroext 122)
  br label %if.end

if.else:                                          ; preds = %entry
  %dig6 = getelementptr inbounds %struct.wm97xx.683, %struct.wm97xx.683* %wm, i32 0, i32 0
  %arrayidx7 = getelementptr inbounds [3 x i16], [3 x i16]* %dig6, i64 0, i64 2
  %1 = load i16, i16* %arrayidx7, align 4, !tbaa !45
  %conv8 = zext i16 %1 to i32
  %and9 = and i32 %conv8, -49153
  %conv10 = trunc i32 %and9 to i16
  call void bitcast (void (%struct.wm97xx*, i16, i16)* @wm97xx_reg_write to void (%struct.wm97xx.683*, i16, i16)*)(%struct.wm97xx.683* %wm, i16 zeroext 120, i16 zeroext %conv10)
  %call11 = call i32 bitcast (i32 (%struct.wm97xx*, i16)* @wm97xx_reg_read to i32 (%struct.wm97xx.683*, i16)*)(%struct.wm97xx.683* %wm, i16 zeroext 60)
  %conv12 = trunc i32 %call11 to i16
  %conv13 = zext i16 %conv12 to i32
  %or14 = or i32 %conv13, 32768
  %conv15 = trunc i32 %or14 to i16
  call void bitcast (void (%struct.wm97xx*, i16, i16)* @wm97xx_reg_write to void (%struct.wm97xx.683*, i16, i16)*)(%struct.wm97xx.683* %wm, i16 zeroext 60, i16 zeroext %conv15)
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then
  ret void
}

; Function Attrs: nounwind uwtable
define internal void @wm9713_dig_restore(%struct.wm97xx.683* %wm) #0 {
entry:
  %dig_save = getelementptr inbounds %struct.wm97xx.683, %struct.wm97xx.683* %wm, i32 0, i32 4
  %arrayidx = getelementptr inbounds [3 x i16], [3 x i16]* %dig_save, i64 0, i64 0
  %0 = load i16, i16* %arrayidx, align 2, !tbaa !45
  call void bitcast (void (%struct.wm97xx*, i16, i16)* @wm97xx_reg_write to void (%struct.wm97xx.683*, i16, i16)*)(%struct.wm97xx.683* %wm, i16 zeroext 116, i16 zeroext %0)
  %dig_save1 = getelementptr inbounds %struct.wm97xx.683, %struct.wm97xx.683* %wm, i32 0, i32 4
  %arrayidx2 = getelementptr inbounds [3 x i16], [3 x i16]* %dig_save1, i64 0, i64 1
  %1 = load i16, i16* %arrayidx2, align 2, !tbaa !45
  call void bitcast (void (%struct.wm97xx*, i16, i16)* @wm97xx_reg_write to void (%struct.wm97xx.683*, i16, i16)*)(%struct.wm97xx.683* %wm, i16 zeroext 118, i16 zeroext %1)
  %dig_save3 = getelementptr inbounds %struct.wm97xx.683, %struct.wm97xx.683* %wm, i32 0, i32 4
  %arrayidx4 = getelementptr inbounds [3 x i16], [3 x i16]* %dig_save3, i64 0, i64 2
  %2 = load i16, i16* %arrayidx4, align 2, !tbaa !45
  call void bitcast (void (%struct.wm97xx*, i16, i16)* @wm97xx_reg_write to void (%struct.wm97xx.683*, i16, i16)*)(%struct.wm97xx.683* %wm, i16 zeroext 120, i16 zeroext %2)
  ret void
}

; Function Attrs: nounwind uwtable
define internal void @wm9713_aux_prepare(%struct.wm97xx.683* %wm) #0 {
entry:
  %cmp = icmp uge i64 6, 64
  %dig_save = getelementptr inbounds %struct.wm97xx.683, %struct.wm97xx.683* %wm, i32 0, i32 4
  %arraydecay = getelementptr inbounds [3 x i16], [3 x i16]* %dig_save, i32 0, i32 0
  %0 = bitcast i16* %arraydecay to i8*
  %dig = getelementptr inbounds %struct.wm97xx.683, %struct.wm97xx.683* %wm, i32 0, i32 0
  %arraydecay1 = getelementptr inbounds [3 x i16], [3 x i16]* %dig, i32 0, i32 0
  %1 = bitcast i16* %arraydecay1 to i8*
  br i1 %cmp, label %if.then, label %if.else

if.then:                                          ; preds = %entry
  %call = call i8* @__memcpy(i8* %0, i8* %1, i64 6)
  br label %if.end

if.else:                                          ; preds = %entry
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %0, i8* %1, i64 6, i32 2, i1 false)
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then
  call void bitcast (void (%struct.wm97xx*, i16, i16)* @wm97xx_reg_write to void (%struct.wm97xx.683*, i16, i16)*)(%struct.wm97xx.683* %wm, i16 zeroext 116, i16 zeroext 0)
  call void bitcast (void (%struct.wm97xx*, i16, i16)* @wm97xx_reg_write to void (%struct.wm97xx.683*, i16, i16)*)(%struct.wm97xx.683* %wm, i16 zeroext 118, i16 zeroext 0)
  call void bitcast (void (%struct.wm97xx*, i16, i16)* @wm97xx_reg_write to void (%struct.wm97xx.683*, i16, i16)*)(%struct.wm97xx.683* %wm, i16 zeroext 120, i16 zeroext -16384)
  ret void
}

; Function Attrs: nounwind uwtable
define internal i32 @wm9713_poll_coord(%struct.wm97xx.683* %wm, %struct.wm97xx_data* %data) #0 {
entry:
  %0 = load i32, i32* @delay.64, align 4, !tbaa !52
  %mul = mul nsw i32 5, %0
  %pen_probably_down = getelementptr inbounds %struct.wm97xx.683, %struct.wm97xx.683* %wm, i32 0, i32 21
  %bf.load = load i8, i8* %pen_probably_down, align 4
  %bf.lshr = lshr i8 %bf.load, 2
  %bf.clear = and i8 %bf.lshr, 1
  %bf.cast = zext i8 %bf.clear to i32
  %tobool = icmp ne i32 %bf.cast, 0
  br i1 %tobool, label %if.end7, label %if.then

if.then:                                          ; preds = %entry
  %call = call i32 bitcast (i32 (%struct.wm97xx*, i16)* @wm97xx_reg_read to i32 (%struct.wm97xx.683*, i16)*)(%struct.wm97xx.683* %wm, i16 zeroext 122)
  %conv = trunc i32 %call to i16
  %conv1 = zext i16 %conv to i32
  %and = and i32 %conv1, 32768
  %tobool2 = icmp ne i32 %and, 0
  br i1 %tobool2, label %if.end, label %LeafBlock

if.end:                                           ; preds = %if.then
  %pen_probably_down4 = getelementptr inbounds %struct.wm97xx.683, %struct.wm97xx.683* %wm, i32 0, i32 21
  %bf.load5 = load i8, i8* %pen_probably_down4, align 4
  %bf.clear6 = and i8 %bf.load5, -5
  %bf.set = or i8 %bf.clear6, 4
  store i8 %bf.set, i8* %pen_probably_down4, align 4
  br label %LeafBlock

LeafBlock:                                        ; preds = %if.end, %if.then
  %cleanup.dest.slot.0 = phi i32 [ 0, %if.end ], [ 1, %if.then ]
  %SwitchLeaf = icmp eq i32 %cleanup.dest.slot.0, 0
  br i1 %SwitchLeaf, label %if.end7, label %cleanup101

if.end7:                                          ; preds = %LeafBlock, %entry
  %call8 = call i32 bitcast (i32 (%struct.wm97xx*, i16)* @wm97xx_reg_read to i32 (%struct.wm97xx.683*, i16)*)(%struct.wm97xx.683* %wm, i16 zeroext 116)
  %conv9 = trunc i32 %call8 to i16
  %conv10 = zext i16 %conv9 to i32
  %and11 = and i32 %conv10, -255
  %conv12 = trunc i32 %and11 to i16
  %1 = load i32, i32* @pil.59, align 4, !tbaa !52
  %tobool13 = icmp ne i32 %1, 0
  %conv15 = zext i16 %conv12 to i32
  %or = or i32 %conv15, 8
  %conv16 = trunc i32 %or to i16
  %dig1.0 = select i1 %tobool13, i16 %conv16, i16 %conv12
  %mach_ops = getelementptr inbounds %struct.wm97xx.683, %struct.wm97xx.683* %wm, i32 0, i32 11
  %2 = load %struct.wm97xx_mach_ops.689*, %struct.wm97xx_mach_ops.689** %mach_ops, align 8, !tbaa !2
  %tobool18 = icmp ne %struct.wm97xx_mach_ops.689* %2, null
  br i1 %tobool18, label %land.lhs.true, label %if.end24

land.lhs.true:                                    ; preds = %if.end7
  %mach_ops19 = getelementptr inbounds %struct.wm97xx.683, %struct.wm97xx.683* %wm, i32 0, i32 11
  %3 = load %struct.wm97xx_mach_ops.689*, %struct.wm97xx_mach_ops.689** %mach_ops19, align 8, !tbaa !2
  %pre_sample = getelementptr inbounds %struct.wm97xx_mach_ops.689, %struct.wm97xx_mach_ops.689* %3, i32 0, i32 7
  %4 = load void (i32)*, void (i32)** %pre_sample, align 8, !tbaa !98
  %tobool20 = icmp ne void (i32)* %4, null
  br i1 %tobool20, label %if.then21, label %if.end24

if.then21:                                        ; preds = %land.lhs.true
  %mach_ops22 = getelementptr inbounds %struct.wm97xx.683, %struct.wm97xx.683* %wm, i32 0, i32 11
  %5 = load %struct.wm97xx_mach_ops.689*, %struct.wm97xx_mach_ops.689** %mach_ops22, align 8, !tbaa !2
  %pre_sample23 = getelementptr inbounds %struct.wm97xx_mach_ops.689, %struct.wm97xx_mach_ops.689* %5, i32 0, i32 7
  %6 = load void (i32)*, void (i32)** %pre_sample23, align 8, !tbaa !98
  call void %6(i32 12288)
  br label %if.end24

if.end24:                                         ; preds = %if.then21, %land.lhs.true, %if.end7
  %conv25 = zext i16 %dig1.0 to i32
  %or26 = or i32 %conv25, 512
  %or27 = or i32 %or26, 1
  %conv28 = trunc i32 %or27 to i16
  call void bitcast (void (%struct.wm97xx*, i16, i16)* @wm97xx_reg_write to void (%struct.wm97xx.683*, i16, i16)*)(%struct.wm97xx.683* %wm, i16 zeroext 116, i16 zeroext %conv28)
  %7 = load i32, i32* @delay.64, align 4, !tbaa !52
  call void @poll_delay.70(i32 %7)
  %call29 = call i32 bitcast (i32 (%struct.wm97xx*, i16)* @wm97xx_reg_read to i32 (%struct.wm97xx.683*, i16)*)(%struct.wm97xx.683* %wm, i16 zeroext 122)
  %x = getelementptr inbounds %struct.wm97xx_data, %struct.wm97xx_data* %data, i32 0, i32 0
  store i32 %call29, i32* %x, align 4, !tbaa !94
  br label %while.cond

while.cond:                                       ; preds = %while.body, %if.end24
  %timeout.0 = phi i32 [ %mul, %if.end24 ], [ %dec, %while.body ]
  %call30 = call i32 bitcast (i32 (%struct.wm97xx*, i16)* @wm97xx_reg_read to i32 (%struct.wm97xx.683*, i16)*)(%struct.wm97xx.683* %wm, i16 zeroext 116)
  %and31 = and i32 %call30, 512
  %tobool32 = icmp ne i32 %and31, 0
  %tobool33 = icmp ne i32 %timeout.0, 0
  %tobool33. = select i1 %tobool32, i1 %tobool33, i1 false
  br i1 %tobool33., label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  call void @__const_udelay(i64 90195)
  %dec = add nsw i32 %timeout.0, -1
  br label %while.cond

while.end:                                        ; preds = %while.cond
  %cmp = icmp sle i32 %timeout.0, 0
  br i1 %cmp, label %if.then35, label %if.end57

if.then35:                                        ; preds = %while.end
  %call36 = call i32 @is_pden.71(%struct.wm97xx.683* %wm)
  %tobool37 = icmp ne i32 %call36, 0
  br i1 %tobool37, label %if.then38, label %do.body42

if.then38:                                        ; preds = %if.then35
  %pen_probably_down39 = getelementptr inbounds %struct.wm97xx.683, %struct.wm97xx.683* %wm, i32 0, i32 21
  %bf.load40 = load i8, i8* %pen_probably_down39, align 4
  %bf.clear41 = and i8 %bf.load40, -5
  store i8 %bf.clear41, i8* %pen_probably_down39, align 4
  br label %cleanup101

do.body42:                                        ; preds = %if.then35
  %bf.load43 = load i32, i32* getelementptr inbounds (%struct._ddebug, %struct._ddebug* bitcast ({ i8*, i8*, i8*, i8*, i8, i8, i8, i8 }* @wm9713_poll_coord.descriptor to %struct._ddebug*), i32 0, i32 4), align 8
  %bf.lshr44 = lshr i32 %bf.load43, 18
  %bf.clear45 = and i32 %bf.lshr44, 255
  %and46 = and i32 %bf.clear45, 1
  %tobool47 = icmp ne i32 %and46, 0
  %lnot = xor i1 %tobool47, true
  %lnot48 = xor i1 %lnot, true
  %lnot.ext = zext i1 %lnot48 to i32
  %conv49 = sext i32 %lnot.ext to i64
  %expval = call i64 @llvm.expect.i64(i64 %conv49, i64 0)
  %tobool50 = icmp ne i64 %expval, 0
  br i1 %tobool50, label %if.then51, label %cleanup101

if.then51:                                        ; preds = %do.body42
  %dev = getelementptr inbounds %struct.wm97xx.683, %struct.wm97xx.683* %wm, i32 0, i32 8
  %8 = load %struct.device*, %struct.device** %dev, align 8, !tbaa !42
  call void (%struct._ddebug*, %struct.device*, i8*, ...) @__dynamic_dev_dbg(%struct._ddebug* bitcast ({ i8*, i8*, i8*, i8*, i8, i8, i8, i8 }* @wm9713_poll_coord.descriptor to %struct._ddebug*), %struct.device* %8, i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.3.72, i32 0, i32 0))
  br label %cleanup101

if.end57:                                         ; preds = %while.end
  %call58 = call i32 bitcast (i32 (%struct.wm97xx*, i16)* @wm97xx_reg_read to i32 (%struct.wm97xx.683*, i16)*)(%struct.wm97xx.683* %wm, i16 zeroext 122)
  %y = getelementptr inbounds %struct.wm97xx_data, %struct.wm97xx_data* %data, i32 0, i32 1
  store i32 %call58, i32* %y, align 4, !tbaa !96
  %9 = load i32, i32* @pil.59, align 4, !tbaa !52
  %tobool59 = icmp ne i32 %9, 0
  br i1 %tobool59, label %if.then60, label %if.end64

if.then60:                                        ; preds = %if.end57
  %call61 = call i32 bitcast (i32 (%struct.wm97xx*, i16)* @wm97xx_reg_read to i32 (%struct.wm97xx.683*, i16)*)(%struct.wm97xx.683* %wm, i16 zeroext 122)
  br label %if.end64

if.end64:                                         ; preds = %if.then60, %if.end57
  %.sink = phi i32 [ %call61, %if.then60 ], [ 45248, %if.end57 ]
  %p63 = getelementptr inbounds %struct.wm97xx_data, %struct.wm97xx_data* %data, i32 0, i32 2
  store i32 %.sink, i32* %p63, align 4, !tbaa !97
  %mach_ops65 = getelementptr inbounds %struct.wm97xx.683, %struct.wm97xx.683* %wm, i32 0, i32 11
  %10 = load %struct.wm97xx_mach_ops.689*, %struct.wm97xx_mach_ops.689** %mach_ops65, align 8, !tbaa !2
  %tobool66 = icmp ne %struct.wm97xx_mach_ops.689* %10, null
  br i1 %tobool66, label %land.lhs.true67, label %if.end73

land.lhs.true67:                                  ; preds = %if.end64
  %mach_ops68 = getelementptr inbounds %struct.wm97xx.683, %struct.wm97xx.683* %wm, i32 0, i32 11
  %11 = load %struct.wm97xx_mach_ops.689*, %struct.wm97xx_mach_ops.689** %mach_ops68, align 8, !tbaa !2
  %post_sample = getelementptr inbounds %struct.wm97xx_mach_ops.689, %struct.wm97xx_mach_ops.689* %11, i32 0, i32 8
  %12 = load void (i32)*, void (i32)** %post_sample, align 8, !tbaa !99
  %tobool69 = icmp ne void (i32)* %12, null
  br i1 %tobool69, label %if.then70, label %if.end73

if.then70:                                        ; preds = %land.lhs.true67
  %mach_ops71 = getelementptr inbounds %struct.wm97xx.683, %struct.wm97xx.683* %wm, i32 0, i32 11
  %13 = load %struct.wm97xx_mach_ops.689*, %struct.wm97xx_mach_ops.689** %mach_ops71, align 8, !tbaa !2
  %post_sample72 = getelementptr inbounds %struct.wm97xx_mach_ops.689, %struct.wm97xx_mach_ops.689* %13, i32 0, i32 8
  %14 = load void (i32)*, void (i32)** %post_sample72, align 8, !tbaa !99
  call void %14(i32 12288)
  br label %if.end73

if.end73:                                         ; preds = %if.then70, %land.lhs.true67, %if.end64
  %x74 = getelementptr inbounds %struct.wm97xx_data, %struct.wm97xx_data* %data, i32 0, i32 0
  %15 = load i32, i32* %x74, align 4, !tbaa !94
  %and75 = and i32 %15, 4096
  %tobool76 = icmp ne i32 %and75, 0
  br i1 %tobool76, label %lor.lhs.false, label %cleanup101

lor.lhs.false:                                    ; preds = %if.end73
  %y77 = getelementptr inbounds %struct.wm97xx_data, %struct.wm97xx_data* %data, i32 0, i32 1
  %16 = load i32, i32* %y77, align 4, !tbaa !96
  %and78 = and i32 %16, 8192
  %tobool79 = icmp ne i32 %and78, 0
  br i1 %tobool79, label %if.end81, label %cleanup101

if.end81:                                         ; preds = %lor.lhs.false
  %17 = load i32, i32* @pil.59, align 4, !tbaa !52
  %tobool82 = icmp ne i32 %17, 0
  br i1 %tobool82, label %land.lhs.true83, label %if.end88

land.lhs.true83:                                  ; preds = %if.end81
  %p84 = getelementptr inbounds %struct.wm97xx_data, %struct.wm97xx_data* %data, i32 0, i32 2
  %18 = load i32, i32* %p84, align 4, !tbaa !97
  %and85 = and i32 %18, 12288
  %tobool86 = icmp ne i32 %and85, 0
  br i1 %tobool86, label %if.end88, label %cleanup101

if.end88:                                         ; preds = %land.lhs.true83, %if.end81
  %x89 = getelementptr inbounds %struct.wm97xx_data, %struct.wm97xx_data* %data, i32 0, i32 0
  %19 = load i32, i32* %x89, align 4, !tbaa !94
  %and90 = and i32 %19, 32768
  %tobool91 = icmp ne i32 %and90, 0
  br i1 %tobool91, label %lor.lhs.false92, label %if.then96

lor.lhs.false92:                                  ; preds = %if.end88
  %y93 = getelementptr inbounds %struct.wm97xx_data, %struct.wm97xx_data* %data, i32 0, i32 1
  %20 = load i32, i32* %y93, align 4, !tbaa !96
  %and94 = and i32 %20, 32768
  %tobool95 = icmp ne i32 %and94, 0
  br i1 %tobool95, label %cleanup101, label %if.then96

if.then96:                                        ; preds = %lor.lhs.false92, %if.end88
  %pen_probably_down97 = getelementptr inbounds %struct.wm97xx.683, %struct.wm97xx.683* %wm, i32 0, i32 21
  %bf.load98 = load i8, i8* %pen_probably_down97, align 4
  %bf.clear99 = and i8 %bf.load98, -5
  store i8 %bf.clear99, i8* %pen_probably_down97, align 4
  br label %cleanup101

cleanup101:                                       ; preds = %if.then96, %lor.lhs.false92, %land.lhs.true83, %lor.lhs.false, %if.end73, %if.then51, %do.body42, %if.then38, %LeafBlock
  %retval.1 = phi i32 [ 4, %if.then96 ], [ 4, %do.body42 ], [ 4, %if.then51 ], [ 4, %if.then38 ], [ 2, %lor.lhs.false92 ], [ 0, %land.lhs.true83 ], [ 0, %if.end73 ], [ 0, %lor.lhs.false ], [ 4, %LeafBlock ]
  ret i32 %retval.1
}

; Function Attrs: inlinehint nounwind uwtable
define internal void @poll_delay.70(i32 %d) #4 {
entry:
  %idxprom = sext i32 %d to i64
  %arrayidx = getelementptr inbounds [16 x i32], [16 x i32]* @delay_table.66, i64 0, i64 %idxprom
  %0 = load i32, i32* %arrayidx, align 4, !tbaa !52
  %add = add nsw i32 63, %0
  %conv = sext i32 %add to i64
  call void @__udelay(i64 %conv)
  ret void
}

; Function Attrs: inlinehint nounwind uwtable
define internal i32 @is_pden.71(%struct.wm97xx.683* %wm) #4 {
entry:
  %dig = getelementptr inbounds %struct.wm97xx.683, %struct.wm97xx.683* %wm, i32 0, i32 0
  %arrayidx = getelementptr inbounds [3 x i16], [3 x i16]* %dig, i64 0, i64 2
  %0 = load i16, i16* %arrayidx, align 4, !tbaa !45
  %conv = zext i16 %0 to i32
  %and = and i32 %conv, 2048
  ret i32 %and
}

declare void @simpll__indirect_0(%struct.snd_ac97*, i16, i16, void (%struct.snd_ac97*, i16, i16)*)

declare void @__dynamic_dev_dbg(%struct._ddebug*, %struct.device*, i8*, ...) #1

declare i16 @simpll__indirect_0.1(%struct.snd_ac97*, i16, i16 (%struct.snd_ac97*, i16)*)

declare void @simpll__indirect_1(i32, void (i32)*)

attributes #0 = { nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "counting-function"="mcount" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { argmemonly nounwind }
attributes #3 = { nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { inlinehint nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { nounwind readnone }
attributes #6 = { nounwind }

!llvm.ident = !{!0, !0, !0, !0}
!llvm.module.flags = !{!1}

!0 = !{!"clang version 5.0.1 (tags/RELEASE_500/final)"}
!1 = !{i32 1, !"wchar_size", i32 4}
!2 = !{!3, !7, i64 80}
!3 = !{!"wm97xx", !4, i64 0, !6, i64 6, !4, i64 8, !6, i64 20, !4, i64 22, !7, i64 32, !7, i64 40, !7, i64 48, !7, i64 56, !7, i64 64, !7, i64 72, !7, i64 80, !8, i64 88, !15, i64 256, !14, i64 480, !14, i64 488, !10, i64 496, !7, i64 504, !16, i64 512, !6, i64 592, !6, i64 594, !10, i64 596, !10, i64 596, !10, i64 596, !6, i64 598, !6, i64 600}
!4 = !{!"omnipotent char", !5, i64 0}
!5 = !{!"Simple C/C++ TBAA"}
!6 = !{!"short", !4, i64 0}
!7 = !{!"any pointer", !4, i64 0}
!8 = !{!"mutex", !9, i64 0, !11, i64 8, !12, i64 80, !7, i64 96, !7, i64 104, !7, i64 112, !13, i64 120}
!9 = !{!"", !10, i64 0}
!10 = !{!"int", !4, i64 0}
!11 = !{!"spinlock", !4, i64 0}
!12 = !{!"list_head", !7, i64 0, !7, i64 8}
!13 = !{!"lockdep_map", !7, i64 0, !4, i64 8, !7, i64 24, !10, i64 32, !14, i64 40}
!14 = !{!"long", !4, i64 0}
!15 = !{!"delayed_work", !16, i64 0, !18, i64 80, !7, i64 208, !10, i64 216}
!16 = !{!"work_struct", !17, i64 0, !12, i64 8, !7, i64 24, !13, i64 32}
!17 = !{!"", !14, i64 0}
!18 = !{!"timer_list", !12, i64 0, !14, i64 16, !7, i64 24, !7, i64 32, !14, i64 40, !10, i64 48, !10, i64 52, !7, i64 56, !4, i64 64, !13, i64 80}
!19 = !{!3, !6, i64 600}
!20 = !{!3, !7, i64 40}
!21 = !{!3, !6, i64 6}
!22 = !{!3, !6, i64 598}
!23 = !{!3, !7, i64 32}
!24 = !{!25, !7, i64 64}
!25 = !{!"wm97xx_codec_drv", !6, i64 0, !7, i64 8, !7, i64 16, !7, i64 24, !7, i64 32, !7, i64 40, !7, i64 48, !7, i64 56, !7, i64 64}
!26 = !{!25, !7, i64 16}
!27 = !{!25, !7, i64 56}
!28 = !{!25, !7, i64 48}
!29 = !{!30, !7, i64 280}
!30 = !{!"device", !7, i64 0, !7, i64 8, !31, i64 16, !7, i64 80, !7, i64 88, !8, i64 96, !7, i64 264, !7, i64 272, !7, i64 280, !33, i64 288, !7, i64 880, !10, i64 888, !7, i64 896, !38, i64 904, !7, i64 912, !12, i64 920, !7, i64 936, !39, i64 944, !7, i64 960, !40, i64 968, !10, i64 976, !10, i64 980, !11, i64 984, !12, i64 1056, !41, i64 1072, !7, i64 1104, !7, i64 1112, !7, i64 1120, !7, i64 1128}
!31 = !{!"kobject", !7, i64 0, !12, i64 8, !7, i64 24, !7, i64 32, !7, i64 40, !7, i64 48, !32, i64 56, !10, i64 60, !10, i64 60, !10, i64 60, !10, i64 60, !10, i64 60}
!32 = !{!"kref", !9, i64 0}
!33 = !{!"dev_pm_info", !34, i64 0, !10, i64 4, !10, i64 4, !35, i64 4, !35, i64 4, !35, i64 4, !35, i64 4, !11, i64 8, !12, i64 80, !36, i64 96, !7, i64 192, !35, i64 200, !35, i64 200, !18, i64 208, !14, i64 336, !16, i64 344, !37, i64 424, !9, i64 512, !9, i64 516, !10, i64 520, !10, i64 520, !10, i64 520, !10, i64 520, !10, i64 520, !10, i64 520, !10, i64 521, !10, i64 521, !10, i64 521, !10, i64 521, !10, i64 521, !4, i64 524, !4, i64 528, !10, i64 532, !10, i64 536, !14, i64 544, !14, i64 552, !14, i64 560, !14, i64 568, !7, i64 576, !7, i64 584}
!34 = !{!"pm_message", !10, i64 0}
!35 = !{!"_Bool", !4, i64 0}
!36 = !{!"completion", !10, i64 0, !37, i64 8}
!37 = !{!"__wait_queue_head", !11, i64 0, !12, i64 72}
!38 = !{!"long long", !4, i64 0}
!39 = !{!"dev_archdata", !7, i64 0, !7, i64 8}
!40 = !{!"acpi_dev_node", !7, i64 0}
!41 = !{!"klist_node", !7, i64 0, !12, i64 8, !32, i64 24}
!42 = !{!3, !7, i64 56}
!43 = !{!3, !7, i64 48}
!44 = !{!25, !7, i64 40}
!45 = !{!6, !6, i64 0}
!46 = !{!47, !7, i64 0}
!47 = !{!"input_dev", !7, i64 0, !7, i64 8, !7, i64 16, !48, i64 24, !4, i64 32, !4, i64 40, !4, i64 48, !4, i64 144, !4, i64 152, !4, i64 160, !4, i64 168, !4, i64 176, !4, i64 184, !4, i64 200, !10, i64 208, !10, i64 212, !10, i64 216, !7, i64 224, !7, i64 232, !7, i64 240, !7, i64 248, !10, i64 256, !18, i64 264, !4, i64 392, !7, i64 400, !7, i64 408, !4, i64 416, !4, i64 512, !4, i64 520, !4, i64 528, !7, i64 536, !7, i64 544, !7, i64 552, !7, i64 560, !7, i64 568, !11, i64 576, !8, i64 648, !10, i64 816, !35, i64 820, !30, i64 824, !12, i64 1960, !12, i64 1976, !10, i64 1992, !10, i64 1996, !7, i64 2000, !35, i64 2008}
!48 = !{!"input_id", !6, i64 0, !6, i64 2, !6, i64 4, !6, i64 6}
!49 = !{!47, !7, i64 8}
!50 = !{!47, !7, i64 536}
!51 = !{!47, !7, i64 544}
!52 = !{!10, !10, i64 0}
!53 = !{!47, !7, i64 824}
!54 = !{!3, !7, i64 64}
!55 = !{!56, !7, i64 16}
!56 = !{!"platform_device", !7, i64 0, !10, i64 8, !35, i64 12, !30, i64 16, !10, i64 1152, !7, i64 1160, !7, i64 1168, !7, i64 1176, !57, i64 1184}
!57 = !{!"pdev_archdata"}
!58 = !{!56, !7, i64 296}
!59 = !{!3, !7, i64 72}
!60 = !{!47, !10, i64 816}
!61 = !{!62, !7, i64 24}
!62 = !{!"snd_ac97", !7, i64 0, !7, i64 8, !7, i64 16, !7, i64 24, !7, i64 32, !7, i64 40, !7, i64 48, !6, i64 56, !6, i64 58, !8, i64 64, !8, i64 232, !6, i64 400, !6, i64 402, !10, i64 404, !6, i64 408, !6, i64 410, !6, i64 412, !7, i64 416, !10, i64 424, !10, i64 428, !4, i64 432, !10, i64 456, !4, i64 460, !4, i64 720, !4, i64 736, !4, i64 768, !4, i64 769, !10, i64 772, !15, i64 776, !30, i64 1000, !4, i64 2136}
!63 = !{!64, !7, i64 0}
!64 = !{!"snd_ac97_bus", !7, i64 0, !7, i64 8, !7, i64 16, !7, i64 24, !6, i64 32, !6, i64 34, !6, i64 34, !6, i64 34, !10, i64 36, !11, i64 40, !4, i64 112, !6, i64 128, !7, i64 136, !4, i64 144, !7, i64 176}
!65 = !{!66, !7, i64 16}
!66 = !{!"snd_ac97_bus_ops", !7, i64 0, !7, i64 8, !7, i64 16, !7, i64 24, !7, i64 32, !7, i64 40}
!67 = !{!3, !6, i64 20}
!68 = !{!3, !10, i64 496}
!69 = !{!3, !14, i64 488}
!70 = !{!3, !14, i64 480}
!71 = !{!3, !7, i64 504}
!72 = !{!30, !7, i64 480}
!73 = !{!74, !10, i64 0}
!74 = !{!"wm97xx_mach_ops", !10, i64 0, !7, i64 8, !7, i64 16, !7, i64 24, !7, i64 32, !7, i64 40, !10, i64 48, !7, i64 56, !7, i64 64}
!75 = !{!25, !7, i64 32}
!76 = !{!17, !14, i64 0}
!77 = !{i64 0, i64 8, !78}
!78 = !{!14, !14, i64 0}
!79 = !{!16, !7, i64 24}
!80 = !{!18, !7, i64 32}
!81 = !{!18, !14, i64 40}
!82 = !{!74, !10, i64 48}
!83 = !{i32 -2143697598, i32 -2143697573, i32 -2143697303, i32 -2143697506, i32 -2143697475, i32 -2143697445}
!84 = !{!74, !7, i64 40}
!85 = !{i32 396182}
!86 = !{!12, !7, i64 0}
!87 = !{!12, !7, i64 8}
!88 = !{i32 -2143701185, i32 -2143701160, i32 -2143700890, i32 -2143701093, i32 -2143701062, i32 -2143701032}
!89 = !{!74, !7, i64 16}
!90 = !{!74, !7, i64 8}
!91 = !{i32 -2143710482, i32 -2143710457, i32 -2143710187, i32 -2143710390, i32 -2143710359, i32 -2143710329}
!92 = !{i32 -2143709919, i32 -2143709894, i32 -2143709624, i32 -2143709827, i32 -2143709796, i32 -2143709766}
!93 = !{!25, !7, i64 24}
!94 = !{!95, !10, i64 0}
!95 = !{!"wm97xx_data", !10, i64 0, !10, i64 4, !10, i64 8}
!96 = !{!95, !10, i64 4}
!97 = !{!95, !10, i64 8}
!98 = !{!74, !7, i64 56}
!99 = !{!74, !7, i64 64}
!100 = !{!3, !6, i64 592}
!101 = !{!3, !6, i64 594}
!102 = !{!74, !7, i64 24}
!103 = !{!74, !7, i64 32}
