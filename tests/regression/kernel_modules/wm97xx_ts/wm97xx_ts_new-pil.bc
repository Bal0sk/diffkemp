; ModuleID = 'tests/regression/kernel_modules/wm97xx_ts/wm97xx_ts_new-pil.bc'
source_filename = "llvm-link"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm "\09.section \22___kcrctab_gpl+wm97xx_reg_read\22, \22a\22\09"
module asm "\09.weak\09__crc_wm97xx_reg_read\09"
module asm "\09.long\09__crc_wm97xx_reg_read\09"
module asm "\09.previous\09\09\09\09\09"
module asm "\09.section \22___kcrctab_gpl+wm97xx_reg_write\22, \22a\22\09"
module asm "\09.weak\09__crc_wm97xx_reg_write\09"
module asm "\09.long\09__crc_wm97xx_reg_write\09"
module asm "\09.previous\09\09\09\09\09"
module asm "\09.section \22___kcrctab_gpl+wm97xx_read_aux_adc\22, \22a\22\09"
module asm "\09.weak\09__crc_wm97xx_read_aux_adc\09"
module asm "\09.long\09__crc_wm97xx_read_aux_adc\09"
module asm "\09.previous\09\09\09\09\09"
module asm "\09.section \22___kcrctab_gpl+wm97xx_get_gpio\22, \22a\22\09"
module asm "\09.weak\09__crc_wm97xx_get_gpio\09"
module asm "\09.long\09__crc_wm97xx_get_gpio\09"
module asm "\09.previous\09\09\09\09\09"
module asm "\09.section \22___kcrctab_gpl+wm97xx_set_gpio\22, \22a\22\09"
module asm "\09.weak\09__crc_wm97xx_set_gpio\09"
module asm "\09.long\09__crc_wm97xx_set_gpio\09"
module asm "\09.previous\09\09\09\09\09"
module asm "\09.section \22___kcrctab_gpl+wm97xx_config_gpio\22, \22a\22\09"
module asm "\09.weak\09__crc_wm97xx_config_gpio\09"
module asm "\09.long\09__crc_wm97xx_config_gpio\09"
module asm "\09.previous\09\09\09\09\09"
module asm "\09.section \22___kcrctab_gpl+wm97xx_set_suspend_mode\22, \22a\22\09"
module asm "\09.weak\09__crc_wm97xx_set_suspend_mode\09"
module asm "\09.long\09__crc_wm97xx_set_suspend_mode\09"
module asm "\09.previous\09\09\09\09\09"
module asm "\09.section \22___kcrctab_gpl+wm97xx_register_mach_ops\22, \22a\22\09"
module asm "\09.weak\09__crc_wm97xx_register_mach_ops\09"
module asm "\09.long\09__crc_wm97xx_register_mach_ops\09"
module asm "\09.previous\09\09\09\09\09"
module asm "\09.section \22___kcrctab_gpl+wm97xx_unregister_mach_ops\22, \22a\22\09"
module asm "\09.weak\09__crc_wm97xx_unregister_mach_ops\09"
module asm "\09.long\09__crc_wm97xx_unregister_mach_ops\09"
module asm "\09.previous\09\09\09\09\09"
module asm "\09.section \22___kcrctab_gpl+wm9705_codec\22, \22a\22\09"
module asm "\09.weak\09__crc_wm9705_codec\09"
module asm "\09.long\09__crc_wm9705_codec\09"
module asm "\09.previous\09\09\09\09\09"
module asm "\09.section \22___kcrctab_gpl+wm9712_codec\22, \22a\22\09"
module asm "\09.weak\09__crc_wm9712_codec\09"
module asm "\09.long\09__crc_wm9712_codec\09"
module asm "\09.previous\09\09\09\09\09"
module asm "\09.section \22___kcrctab_gpl+wm9713_codec\22, \22a\22\09"
module asm "\09.weak\09__crc_wm9713_codec\09"
module asm "\09.long\09__crc_wm9713_codec\09"
module asm "\09.previous\09\09\09\09\09"

%struct.module = type { i32, %struct.list_head, [56 x i8], %struct.module_kobject, %struct.module_attribute*, i8*, i8*, %struct.kobject*, %struct.kernel_symbol*, i32*, i32, %struct.mutex, %struct.kernel_param*, i32, i32, %struct.kernel_symbol*, i32*, %struct.kernel_symbol*, i32*, i32, i32, %struct.kernel_symbol*, i32*, i8, i8, %struct.kernel_symbol*, i32*, i32, i32, %struct.exception_table_entry*, i32 ()*, [56 x i8], %struct.module_layout, %struct.module_layout, %struct.mod_arch_specific, i64, i32, %struct.list_head, %struct.bug_entry*, %struct.mod_kallsyms*, %struct.mod_kallsyms, %struct.module_sect_attrs*, %struct.module_notes_attrs*, i8*, i8*, i32, i32, %struct.tracepoint**, i32, i8**, %struct.trace_event_call**, i32, %struct.trace_enum_map**, i32, i32, i64*, i8, i8, %struct.klp_modinfo*, %struct.list_head, %struct.list_head, void ()*, %struct.atomic_t, void ()**, i32, [36 x i8] }
%struct.module_kobject = type { %struct.kobject, %struct.module*, %struct.kobject*, %struct.module_param_attrs*, %struct.completion* }
%struct.kobject = type { i8*, %struct.list_head, %struct.kobject*, %struct.kset*, %struct.kobj_type*, %struct.kernfs_node*, %struct.kref, %struct.delayed_work, i8 }
%struct.kset = type { %struct.list_head, %struct.spinlock, %struct.kobject, %struct.kset_uevent_ops* }
%struct.spinlock = type { %union.anon.1 }
%union.anon.1 = type { %struct.raw_spinlock }
%struct.raw_spinlock = type { %struct.qspinlock, i32, i32, i8*, %struct.lockdep_map }
%struct.qspinlock = type { %struct.atomic_t }
%struct.lockdep_map = type { %struct.lock_class_key*, [2 x %struct.lock_class*], i8*, i32, i64 }
%struct.lock_class_key = type { [8 x %struct.lockdep_subclass_key] }
%struct.lockdep_subclass_key = type { i8 }
%struct.lock_class = type { %struct.hlist_node, %struct.list_head, %struct.lockdep_subclass_key*, i32, i32, i64, [13 x %struct.stack_trace], %struct.list_head, %struct.list_head, i32, i64, i8*, i32, [4 x i64], [4 x i64] }
%struct.hlist_node = type { %struct.hlist_node*, %struct.hlist_node** }
%struct.stack_trace = type { i32, i32, i64*, i32 }
%struct.kset_uevent_ops = type { i32 (%struct.kset*, %struct.kobject*)*, i8* (%struct.kset*, %struct.kobject*)*, i32 (%struct.kset*, %struct.kobject*, %struct.kobj_uevent_env*)* }
%struct.kobj_uevent_env = type { [3 x i8*], [32 x i8*], i32, [2048 x i8], i32 }
%struct.kobj_type = type { void (%struct.kobject*)*, %struct.sysfs_ops*, %struct.attribute**, %struct.kobj_ns_type_operations* (%struct.kobject*)*, i8* (%struct.kobject*)* }
%struct.sysfs_ops = type { i64 (%struct.kobject*, %struct.attribute*, i8*)*, i64 (%struct.kobject*, %struct.attribute*, i8*, i64)* }
%struct.attribute = type { i8*, i16, i8, %struct.lock_class_key*, %struct.lock_class_key }
%struct.kobj_ns_type_operations = type { i32, i1 ()*, i8* ()*, i8* (%struct.sock*)*, i8* ()*, void (i8*)* }
%struct.sock = type opaque
%struct.kernfs_node = type { %struct.atomic_t, %struct.atomic_t, %struct.lockdep_map, %struct.kernfs_node*, i8*, %struct.rb_node, i8*, i32, %union.anon, i8*, i16, i16, i32, %struct.kernfs_iattrs* }
%struct.rb_node = type { i64, %struct.rb_node*, %struct.rb_node* }
%union.anon = type { %struct.kernfs_elem_attr }
%struct.kernfs_elem_attr = type { %struct.kernfs_ops*, %struct.kernfs_open_node*, i64, %struct.kernfs_node* }
%struct.kernfs_ops = type { i32 (%struct.kernfs_open_file*)*, void (%struct.kernfs_open_file*)*, i32 (%struct.seq_file*, i8*)*, i8* (%struct.seq_file*, i64*)*, i8* (%struct.seq_file*, i8*, i64*)*, void (%struct.seq_file*, i8*)*, i64 (%struct.kernfs_open_file*, i8*, i64, i64)*, i64, i8, i64 (%struct.kernfs_open_file*, i8*, i64, i64)*, i32 (%struct.kernfs_open_file*, %struct.vm_area_struct*)*, %struct.lock_class_key }
%struct.kernfs_open_file = type { %struct.kernfs_node*, %struct.file*, %struct.seq_file*, i8*, %struct.mutex, %struct.mutex, i32, %struct.list_head, i8*, i64, i8, %struct.vm_operations_struct* }
%struct.file = type { %union.anon.2, %struct.path, %struct.inode*, %struct.file_operations*, %struct.spinlock, %union.anon.3, i32, i32, %struct.mutex, i64, %struct.fown_struct, %struct.cred*, %struct.file_ra_state, i64, i8*, i8*, %struct.list_head, %struct.list_head, %struct.address_space* }
%union.anon.2 = type { %struct.callback_head }
%struct.callback_head = type { %struct.callback_head*, void (%struct.callback_head*)* }
%struct.path = type { %struct.vfsmount*, %struct.dentry* }
%struct.vfsmount = type opaque
%struct.dentry = type { i32, %struct.seqcount, %struct.hlist_bl_node, %struct.dentry*, %struct.qstr, %struct.inode*, [32 x i8], %struct.lockref, %struct.dentry_operations*, %struct.super_block*, i64, i8*, %union.anon.0, %struct.list_head, %struct.list_head, %union.anon.50 }
%struct.seqcount = type { i32, %struct.lockdep_map }
%struct.hlist_bl_node = type { %struct.hlist_bl_node*, %struct.hlist_bl_node** }
%struct.qstr = type { %union.anon.3, i8* }
%struct.lockref = type { %union.anon.47 }
%union.anon.47 = type { %struct.anon.48 }
%struct.anon.48 = type { %struct.spinlock, i32 }
%struct.dentry_operations = type { i32 (%struct.dentry*, i32)*, i32 (%struct.dentry*, i32)*, i32 (%struct.dentry*, %struct.qstr*)*, i32 (%struct.dentry*, i32, i8*, %struct.qstr*)*, i32 (%struct.dentry*)*, i32 (%struct.dentry*)*, void (%struct.dentry*)*, void (%struct.dentry*)*, void (%struct.dentry*, %struct.inode*)*, i8* (%struct.dentry*, i8*, i32)*, %struct.vfsmount* (%struct.path*)*, i32 (%struct.path*, i1)*, %struct.dentry* (%struct.dentry*, %struct.inode*, i32)*, [24 x i8] }
%struct.super_block = type { %struct.list_head, i32, i8, i64, i64, %struct.file_system_type*, %struct.super_operations*, %struct.dquot_operations*, %struct.quotactl_ops*, %struct.export_operations*, i64, i64, i64, %struct.dentry*, %struct.rw_semaphore, i32, %struct.atomic_t, i8*, %struct.xattr_handler**, %struct.fscrypt_operations*, %struct.hlist_bl_head, %struct.list_head, %struct.block_device*, %struct.backing_dev_info*, %struct.mtd_info*, %struct.hlist_node, i32, %struct.quota_info, %struct.sb_writers, [32 x i8], [16 x i8], i8*, i32, i32, i32, %struct.mutex, i8*, i8*, %struct.dentry_operations*, i32, %struct.shrinker, %union.anon.3, i32, %struct.workqueue_struct*, %struct.hlist_head, %struct.user_namespace*, [32 x i8], %struct.list_lru, [40 x i8], %struct.list_lru, %struct.callback_head, %struct.work_struct, %struct.mutex, i32, [36 x i8], %struct.spinlock, %struct.list_head, %struct.spinlock, %struct.list_head, [16 x i8] }
%struct.file_system_type = type { i8*, i32, %struct.dentry* (%struct.file_system_type*, i32, i8*, i8*)*, void (%struct.super_block*)*, %struct.module*, %struct.file_system_type*, %struct.hlist_head, %struct.lock_class_key, %struct.lock_class_key, %struct.lock_class_key, [3 x %struct.lock_class_key], %struct.lock_class_key, %struct.lock_class_key, %struct.lock_class_key }
%struct.super_operations = type { %struct.inode* (%struct.super_block*)*, void (%struct.inode*)*, void (%struct.inode*, i32)*, i32 (%struct.inode*, %struct.writeback_control*)*, i32 (%struct.inode*)*, void (%struct.inode*)*, void (%struct.super_block*)*, i32 (%struct.super_block*, i32)*, i32 (%struct.super_block*)*, i32 (%struct.super_block*)*, i32 (%struct.super_block*)*, i32 (%struct.super_block*)*, i32 (%struct.dentry*, %struct.kstatfs*)*, i32 (%struct.super_block*, i32*, i8*)*, void (%struct.super_block*)*, i32 (%struct.seq_file*, %struct.dentry*)*, i32 (%struct.seq_file*, %struct.dentry*)*, i32 (%struct.seq_file*, %struct.dentry*)*, i32 (%struct.seq_file*, %struct.dentry*)*, i64 (%struct.super_block*, i32, i8*, i64, i64)*, i64 (%struct.super_block*, i32, i8*, i64, i64)*, %struct.dquot** (%struct.inode*)*, i32 (%struct.super_block*, %struct.page*, i32)*, i64 (%struct.super_block*, %struct.shrink_control*)*, i64 (%struct.super_block*, %struct.shrink_control*)* }
%struct.writeback_control = type opaque
%struct.kstatfs = type opaque
%struct.dquot = type { %struct.hlist_node, %struct.list_head, %struct.list_head, %struct.list_head, %struct.mutex, %struct.atomic_t, %struct.__wait_queue_head, %struct.super_block*, %struct.kqid, i64, i64, %struct.mem_dqblk }
%struct.__wait_queue_head = type { %struct.spinlock, %struct.list_head }
%struct.kqid = type { %struct.qspinlock, i32 }
%struct.mem_dqblk = type { i64, i64, i64, i64, i64, i64, i64, i64, i64 }
%struct.page = type { i64, %union.anon.6, %union.anon.3, %union.anon.3, %union.anon.0, %union.anon.3, %struct.mem_cgroup* }
%union.anon.6 = type { %struct.address_space* }
%struct.mem_cgroup = type opaque
%struct.shrink_control = type { i32, i64, i32, %struct.mem_cgroup* }
%struct.dquot_operations = type { i32 (%struct.dquot*)*, %struct.dquot* (%struct.super_block*, i32)*, void (%struct.dquot*)*, i32 (%struct.dquot*)*, i32 (%struct.dquot*)*, i32 (%struct.dquot*)*, i32 (%struct.super_block*, i32)*, i64* (%struct.inode*)*, i32 (%struct.inode*, %struct.atomic_t*)*, i32 (%struct.super_block*, %struct.kqid*)* }
%struct.quotactl_ops = type { i32 (%struct.super_block*, i32, i32, %struct.path*)*, i32 (%struct.super_block*, i32)*, i32 (%struct.super_block*, i32)*, i32 (%struct.super_block*, i32)*, i32 (%struct.super_block*, i32)*, i32 (%struct.super_block*, i32, %struct.qc_info*)*, i32 (%struct.super_block*, i64, %struct.qc_dqblk*)*, i32 (%struct.super_block*, %struct.kqid*, %struct.qc_dqblk*)*, i32 (%struct.super_block*, i64, %struct.qc_dqblk*)*, i32 (%struct.super_block*, %struct.qc_state*)*, i32 (%struct.super_block*, i32)* }
%struct.qc_info = type { i32, i32, i32, i32, i32, i32, i32, i32 }
%struct.qc_dqblk = type { i32, i64, i64, i64, i64, i64, i64, i64, i64, i32, i32, i64, i64, i64, i64, i32 }
%struct.qc_state = type { i32, [3 x %struct.qc_type_state] }
%struct.qc_type_state = type { i32, i32, i32, i32, i32, i32, i32, i64, i64, i64 }
%struct.export_operations = type opaque
%struct.rw_semaphore = type { %union.anon.3, %struct.list_head, %struct.raw_spinlock, %struct.qspinlock, %struct.task_struct*, %struct.lockdep_map }
%struct.task_struct = type { %union.anon.3, i64, i8*, %struct.atomic_t, i32, i32, %struct.llist_node, i32, i32, i32, i64, %struct.task_struct*, i32, i32, i32, i32, i32, i32, %struct.sched_class*, [16 x i8], %struct.sched_entity, %struct.sched_rt_entity, %struct.task_group*, %struct.sched_dl_entity, %struct.hlist_head, i32, i32, i32, %struct.cpumask, i64, i8, %struct.list_head, i32, %struct.sched_info, %struct.list_head, %struct.plist_node, %struct.rb_node, %struct.mm_struct*, %struct.mm_struct*, %struct.vmacache, %struct.task_rss_stat, i32, i32, i32, i32, i64, i32, i8, [3 x i8], i8, i64, %struct.restart_block, i32, i32, %struct.task_struct*, %struct.task_struct*, %struct.list_head, %struct.list_head, %struct.task_struct*, %struct.list_head, %struct.list_head, [3 x %struct.pid_link], %struct.list_head, %struct.list_head, %struct.completion*, i32*, i32*, i64, i64, i64, %struct.prev_cputime, i64, i64, i64, i64, i64, i64, %struct.task_cputime, [3 x %struct.list_head], %struct.cred*, %struct.cred*, %struct.cred*, [16 x i8], %struct.nameidata*, %struct.sysv_sem, %union.anon.0, i64, %struct.fs_struct*, %struct.files_struct*, %struct.nsproxy*, %struct.signal_struct*, %struct.sighand_struct*, %struct.sigset_t, %struct.sigset_t, %struct.sigset_t, %struct.sigpending, i64, i64, i32, %struct.callback_head*, %struct.audit_context*, %struct.atomic_t, i32, %struct.seccomp, i32, i32, %struct.spinlock, %struct.raw_spinlock, %struct.wake_q_node, %struct.rb_root, %struct.rb_node*, %struct.rt_mutex_waiter*, %struct.mutex_waiter*, i32, i64, i64, i32, i32, i32, i32, i64, i64, i32, i32, i32, i32, i64, i32, i32, [48 x %struct.held_lock], i32, i32, i8*, %struct.bio_list*, %struct.blk_plug*, %struct.reclaim_state*, %struct.backing_dev_info*, %struct.io_context*, i64, %struct.siginfo*, %struct.task_io_accounting, i64, i64, i64, %struct.nodemask_t, %struct.seqcount, i32, i32, %struct.css_set*, %struct.list_head, i32, %struct.robust_list_head*, %struct.compat_robust_list_head*, %struct.list_head, %struct.futex_pi_state*, [2 x %struct.perf_event_context*], %struct.mutex, %struct.list_head, %struct.mempolicy*, i16, i16, i32, i32, i32, i32, i64, i64, i64, i64, %struct.callback_head, %struct.list_head, %struct.numa_group*, i64*, i64, [3 x i64], i64, %struct.tlbflush_unmap_batch, %struct.callback_head, %struct.pipe_inode_info*, %struct.page_frag, %struct.task_delay_info*, i32, i32, i32, i64, i32, [32 x %struct.latency_record], i64, i64, i32, i32, %struct.ftrace_ret_stack*, i64, %struct.atomic_t, %struct.atomic_t, i64, i64, i32, i32, i8*, %struct.kcov*, %struct.mem_cgroup*, i32, i32, i32, %struct.uprobe_task*, i32, i32, i64, i32, %struct.task_struct*, %struct.atomic_t, %struct.thread_struct }
%struct.llist_node = type { %struct.llist_node* }
%struct.sched_class = type opaque
%struct.sched_entity = type { %struct.load_weight, %struct.rb_node, %struct.list_head, i32, i64, i64, i64, i64, i64, %struct.sched_statistics, i32, %struct.sched_entity*, %struct.cfs_rq*, %struct.cfs_rq*, [32 x i8], %struct.sched_avg, [24 x i8] }
%struct.load_weight = type { i64, i32 }
%struct.sched_statistics = type { i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64 }
%struct.cfs_rq = type opaque
%struct.sched_avg = type { i64, i64, i32, i32, i64, i64 }
%struct.sched_rt_entity = type { %struct.list_head, i64, i64, i32, i16, i16, %struct.sched_rt_entity*, %struct.sched_rt_entity*, %struct.rt_rq*, %struct.rt_rq* }
%struct.rt_rq = type opaque
%struct.task_group = type opaque
%struct.sched_dl_entity = type { %struct.rb_node, i64, i64, i64, i64, i64, i64, i32, i32, i32, i32, %struct.hrtimer }
%struct.hrtimer = type { %struct.timerqueue_node, i64, i32 (%struct.hrtimer*)*, %struct.hrtimer_clock_base*, i8, i8 }
%struct.timerqueue_node = type { %struct.rb_node, i64 }
%struct.hrtimer_clock_base = type { %struct.hrtimer_cpu_base*, i32, i32, %struct.timerqueue_head, i64 ()*, i64, [16 x i8] }
%struct.hrtimer_cpu_base = type { %struct.raw_spinlock, %struct.seqcount, %struct.hrtimer*, i32, i32, i32, i8, i8, i8, i64, %struct.hrtimer*, i32, i32, i32, i32, [8 x i8], [4 x %struct.hrtimer_clock_base] }
%struct.timerqueue_head = type { %struct.rb_root, %struct.timerqueue_node* }
%struct.cpumask = type { [128 x i64] }
%struct.sched_info = type { i64, i64, i64, i64 }
%struct.plist_node = type { i32, %struct.list_head, %struct.list_head }
%struct.mm_struct = type { %struct.vm_area_struct*, %struct.rb_root, i32, i64 (%struct.file*, i64, i64, i64, i64)*, i64, i64, i64, i64, %union.anon.3*, %struct.atomic_t, %struct.atomic_t, %union.anon.3, %union.anon.3, i32, %struct.spinlock, %struct.rw_semaphore, %struct.list_head, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, [46 x i64], %struct.mm_rss_stat, %struct.linux_binfmt*, %struct.cpumask*, %struct.mm_context_t, i64, %struct.core_state*, %struct.spinlock, %struct.kioctx_table*, %struct.task_struct*, %struct.user_namespace*, %struct.file*, %struct.mmu_notifier_mm*, %struct.cpumask, i64, i64, i32, i8, %struct.uprobes_state, %union.anon.3, %struct.work_struct }
%struct.vm_area_struct = type { i64, i64, %struct.vm_area_struct*, %struct.vm_area_struct*, %struct.rb_node, i64, %struct.mm_struct*, %union.anon.3, i64, %struct.timerqueue_node, %struct.list_head, %struct.anon_vma*, %struct.vm_operations_struct*, i64, %struct.file*, i8*, %struct.mempolicy*, %struct.vm_userfaultfd_ctx }
%struct.anon_vma = type opaque
%struct.vm_userfaultfd_ctx = type { %struct.userfaultfd_ctx* }
%struct.userfaultfd_ctx = type opaque
%struct.mm_rss_stat = type { [4 x %union.anon.3] }
%struct.linux_binfmt = type opaque
%struct.mm_context_t = type { %struct.ldt_struct*, i16, %struct.mutex, i8*, %struct.vdso_image*, %struct.atomic_t, i16, i16, i8* }
%struct.ldt_struct = type opaque
%struct.vdso_image = type { i8*, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64 }
%struct.core_state = type { %struct.atomic_t, %struct.core_thread, %struct.completion }
%struct.core_thread = type { %struct.task_struct*, %struct.core_thread* }
%struct.completion = type { i32, %struct.__wait_queue_head }
%struct.kioctx_table = type opaque
%struct.mmu_notifier_mm = type opaque
%struct.uprobes_state = type { %struct.xol_area* }
%struct.xol_area = type opaque
%struct.vmacache = type { i32, [4 x %struct.vm_area_struct*] }
%struct.task_rss_stat = type { i32, [4 x i32] }
%struct.restart_block = type { i64 (%struct.restart_block*)*, %union.anon.8 }
%union.anon.8 = type { %struct.anon.9 }
%struct.anon.9 = type { i32*, i32, i32, i32, i64, i32* }
%struct.pid_link = type { %struct.hlist_node, %struct.pid* }
%struct.pid = type { %struct.atomic_t, i32, [3 x %struct.hlist_head], %struct.callback_head, [1 x %struct.upid] }
%struct.upid = type { i32, %struct.pid_namespace*, %struct.hlist_node }
%struct.pid_namespace = type opaque
%struct.prev_cputime = type { i64, i64, %struct.raw_spinlock }
%struct.task_cputime = type { i64, i64, i64 }
%struct.nameidata = type opaque
%struct.sysv_sem = type { %struct.sem_undo_list* }
%struct.sem_undo_list = type opaque
%struct.fs_struct = type opaque
%struct.files_struct = type opaque
%struct.nsproxy = type opaque
%struct.signal_struct = type opaque
%struct.sighand_struct = type opaque
%struct.sigset_t = type { [1 x i64] }
%struct.sigpending = type { %struct.list_head, %struct.sigset_t }
%struct.audit_context = type opaque
%struct.seccomp = type { i32, %struct.seccomp_filter* }
%struct.seccomp_filter = type opaque
%struct.wake_q_node = type { %struct.wake_q_node* }
%struct.rb_root = type { %struct.rb_node* }
%struct.rt_mutex_waiter = type opaque
%struct.mutex_waiter = type { %struct.list_head, %struct.task_struct*, %struct.ww_acquire_ctx*, i8* }
%struct.ww_acquire_ctx = type opaque
%struct.held_lock = type { i64, i64, %struct.lockdep_map*, %struct.lockdep_map*, i64, i64, i32, i32 }
%struct.bio_list = type opaque
%struct.blk_plug = type opaque
%struct.reclaim_state = type opaque
%struct.io_context = type opaque
%struct.siginfo = type { i32, i32, i32, %union.anon.12 }
%union.anon.12 = type { %struct.anon.16, [80 x i8] }
%struct.anon.16 = type { i32, i32, i32, i64, i64 }
%struct.task_io_accounting = type { i64, i64, i64, i64, i64, i64, i64 }
%struct.nodemask_t = type { [16 x i64] }
%struct.css_set = type opaque
%struct.robust_list_head = type opaque
%struct.compat_robust_list_head = type opaque
%struct.futex_pi_state = type opaque
%struct.perf_event_context = type opaque
%struct.mempolicy = type opaque
%struct.numa_group = type opaque
%struct.tlbflush_unmap_batch = type { %struct.cpumask, i8, i8 }
%struct.pipe_inode_info = type opaque
%struct.page_frag = type { %struct.page*, i32, i32 }
%struct.task_delay_info = type opaque
%struct.latency_record = type { [12 x i64], i32, i64, i64 }
%struct.ftrace_ret_stack = type opaque
%struct.kcov = type opaque
%struct.uprobe_task = type { i32, %union.anon.22, %struct.uprobe*, i64, %struct.return_instance*, i32 }
%union.anon.22 = type { %struct.anon.23 }
%struct.anon.23 = type { %struct.arch_uprobe_task, i64 }
%struct.arch_uprobe_task = type { i64, i32, i32 }
%struct.uprobe = type opaque
%struct.return_instance = type { %struct.uprobe*, i64, i64, i64, i8, %struct.return_instance* }
%struct.thread_struct = type { [3 x %struct.desc_struct], i64, i64, i16, i16, i16, i16, i32, i64, i64, [4 x %struct.perf_event*], i64, i64, i64, i64, i64, i64*, i64, i32, %union.anon.3, i8, [15 x i8], %struct.fpu }
%struct.desc_struct = type { %union.anon.25 }
%union.anon.25 = type { %struct.anon.26 }
%struct.anon.26 = type { i32, i32 }
%struct.perf_event = type opaque
%struct.fpu = type { i32, i8, i8, [58 x i8], %union.fpregs_state }
%union.fpregs_state = type { %struct.xregs_state, [3520 x i8] }
%struct.xregs_state = type { %struct.fxregs_state, %struct.xstate_header, [0 x i8] }
%struct.fxregs_state = type { i16, i16, i16, i16, %union.anon.28, i32, i32, [32 x i32], [64 x i32], [12 x i32], %union.anon.31 }
%union.anon.28 = type { %struct.timespec }
%struct.timespec = type { i64, i64 }
%union.anon.31 = type { [12 x i32] }
%struct.xstate_header = type { i64, i64, [6 x i64] }
%struct.xattr_handler = type opaque
%struct.fscrypt_operations = type opaque
%struct.hlist_bl_head = type { %struct.hlist_bl_node* }
%struct.block_device = type { i32, i32, %struct.inode*, %struct.super_block*, %struct.mutex, i8*, i8*, i32, i8, %struct.list_head, %struct.block_device*, i32, %struct.hd_struct*, i32, i32, %struct.gendisk*, %struct.request_queue*, %struct.backing_dev_info*, %struct.list_head, i64, i32, %struct.mutex }
%struct.hd_struct = type opaque
%struct.gendisk = type opaque
%struct.request_queue = type opaque
%struct.backing_dev_info = type opaque
%struct.mtd_info = type opaque
%struct.quota_info = type { i32, %struct.mutex, [3 x %struct.inode*], [3 x %struct.mem_dqinfo], [3 x %struct.quota_format_ops*] }
%struct.mem_dqinfo = type { %struct.quota_format_type*, i32, %struct.list_head, i64, i32, i32, i64, i64, i8* }
%struct.quota_format_type = type { i32, %struct.quota_format_ops*, %struct.module*, %struct.quota_format_type* }
%struct.quota_format_ops = type { i32 (%struct.super_block*, i32)*, i32 (%struct.super_block*, i32)*, i32 (%struct.super_block*, i32)*, i32 (%struct.super_block*, i32)*, i32 (%struct.dquot*)*, i32 (%struct.dquot*)*, i32 (%struct.dquot*)*, i32 (%struct.super_block*, %struct.kqid*)* }
%struct.sb_writers = type { i32, %struct.__wait_queue_head, [3 x %struct.percpu_rw_semaphore] }
%struct.percpu_rw_semaphore = type { %struct.rcu_sync, i32*, %struct.rw_semaphore, %struct.rcuwait, i32 }
%struct.rcu_sync = type { i32, i32, %struct.__wait_queue_head, i32, %struct.callback_head, i32 }
%struct.rcuwait = type { %struct.task_struct* }
%struct.shrinker = type { i64 (%struct.shrinker*, %struct.shrink_control*)*, i64 (%struct.shrinker*, %struct.shrink_control*)*, i32, i64, i64, %struct.list_head, %union.anon.3* }
%struct.workqueue_struct = type opaque
%struct.hlist_head = type { %struct.hlist_node* }
%struct.user_namespace = type opaque
%struct.list_lru = type { %struct.list_lru_node*, %struct.list_head }
%struct.list_lru_node = type { %struct.spinlock, %struct.list_lru_one, %struct.list_lru_memcg*, [24 x i8] }
%struct.list_lru_one = type { %struct.list_head, i64 }
%struct.list_lru_memcg = type { [0 x %struct.list_lru_one*] }
%struct.work_struct = type { %union.anon.3, %struct.list_head, void (%struct.work_struct*)*, %struct.lockdep_map }
%union.anon.0 = type { %struct.list_head }
%union.anon.50 = type { %struct.hlist_node }
%struct.inode = type { i16, i16, %struct.atomic_t, %struct.atomic_t, i32, %struct.posix_acl*, %struct.posix_acl*, %struct.inode_operations*, %struct.super_block*, %struct.address_space*, i8*, i64, %struct.atomic_t, i32, i64, %struct.timespec, %struct.timespec, %struct.timespec, %struct.spinlock, i16, i32, i64, i64, %struct.rw_semaphore, i64, i64, %struct.hlist_node, %struct.list_head, %struct.bdi_writeback*, i32, i16, i16, %struct.list_head, %struct.list_head, %struct.list_head, %union.anon.2, i64, %struct.atomic_t, %struct.atomic_t, %struct.atomic_t, %struct.atomic_t, %struct.file_operations*, %struct.file_lock_context*, %struct.address_space, %struct.list_head, %union.anon.46, i32, i32, %struct.hlist_head, %struct.fscrypt_info*, i8* }
%struct.posix_acl = type opaque
%struct.inode_operations = type { %struct.dentry* (%struct.inode*, %struct.dentry*, i32)*, i8* (%struct.dentry*, %struct.inode*, %struct.delayed_call*)*, i32 (%struct.inode*, i32)*, %struct.posix_acl* (%struct.inode*, i32)*, i32 (%struct.dentry*, i8*, i32)*, i32 (%struct.inode*, %struct.dentry*, i16, i1)*, i32 (%struct.dentry*, %struct.inode*, %struct.dentry*)*, i32 (%struct.inode*, %struct.dentry*)*, i32 (%struct.inode*, %struct.dentry*, i8*)*, i32 (%struct.inode*, %struct.dentry*, i16)*, i32 (%struct.inode*, %struct.dentry*)*, i32 (%struct.inode*, %struct.dentry*, i16, i32)*, i32 (%struct.inode*, %struct.dentry*, %struct.inode*, %struct.dentry*, i32)*, i32 (%struct.dentry*, %struct.iattr*)*, i32 (%struct.path*, %struct.kstat*, i32, i32)*, i64 (%struct.dentry*, i8*, i64)*, i32 (%struct.inode*, %struct.fiemap_extent_info*, i64, i64)*, i32 (%struct.inode*, %struct.timespec*, i32)*, i32 (%struct.inode*, %struct.dentry*, %struct.file*, i32, i16, i32*)*, i32 (%struct.inode*, %struct.dentry*, i16)*, i32 (%struct.inode*, %struct.posix_acl*, i32)*, [24 x i8] }
%struct.delayed_call = type { void (i8*)*, i8* }
%struct.iattr = type { i32, i16, %struct.atomic_t, %struct.atomic_t, i64, %struct.timespec, %struct.timespec, %struct.timespec, %struct.file* }
%struct.kstat = type { i32, i16, i32, i32, i64, i64, i64, i32, i32, %struct.atomic_t, %struct.atomic_t, i64, %struct.timespec, %struct.timespec, %struct.timespec, %struct.timespec, i64 }
%struct.fiemap_extent_info = type { i32, i32, i32, %struct.fiemap_extent* }
%struct.fiemap_extent = type { i64, i64, i64, [2 x i64], i32, [3 x i32] }
%struct.bdi_writeback = type opaque
%struct.file_lock_context = type { %struct.spinlock, %struct.list_head, %struct.list_head, %struct.list_head }
%struct.address_space = type { %struct.inode*, %struct.radix_tree_root, %struct.spinlock, %struct.atomic_t, %struct.rb_root, %struct.rw_semaphore, i64, i64, i64, %struct.address_space_operations*, i64, %struct.spinlock, i32, %struct.list_head, i8* }
%struct.radix_tree_root = type { i32, %struct.radix_tree_node* }
%struct.radix_tree_node = type { i8, i8, i8, i8, %struct.radix_tree_node*, %struct.radix_tree_root*, %union.anon.0, [64 x i8*], [3 x [1 x i64]] }
%struct.address_space_operations = type { i32 (%struct.page*, %struct.writeback_control*)*, i32 (%struct.file*, %struct.page*)*, i32 (%struct.address_space*, %struct.writeback_control*)*, i32 (%struct.page*)*, i32 (%struct.file*, %struct.address_space*, %struct.list_head*, i32)*, i32 (%struct.file*, %struct.address_space*, i64, i32, i32, %struct.page**, i8**)*, i32 (%struct.file*, %struct.address_space*, i64, i32, i32, %struct.page*, i8*)*, i64 (%struct.address_space*, i64)*, void (%struct.page*, i32, i32)*, i32 (%struct.page*, i32)*, void (%struct.page*)*, i64 (%struct.kiocb*, %struct.iov_iter*)*, i32 (%struct.address_space*, %struct.page*, %struct.page*, i32)*, i1 (%struct.page*, i32)*, void (%struct.page*)*, i32 (%struct.page*)*, i32 (%struct.page*, i64, i64)*, void (%struct.page*, i8*, i8*)*, i32 (%struct.address_space*, %struct.page*)*, i32 (%struct.swap_info_struct*, %struct.file*, i64*)*, void (%struct.file*)* }
%struct.kiocb = type { %struct.file*, i64, void (%struct.kiocb*, i64, i64)*, i8*, i32 }
%struct.iov_iter = type opaque
%struct.swap_info_struct = type opaque
%union.anon.46 = type { %struct.pipe_inode_info* }
%struct.fscrypt_info = type opaque
%struct.file_operations = type { %struct.module*, i64 (%struct.file*, i64, i32)*, i64 (%struct.file*, i8*, i64, i64*)*, i64 (%struct.file*, i8*, i64, i64*)*, i64 (%struct.kiocb*, %struct.iov_iter*)*, i64 (%struct.kiocb*, %struct.iov_iter*)*, i32 (%struct.file*, %struct.dir_context*)*, i32 (%struct.file*, %struct.dir_context*)*, i32 (%struct.file*, %struct.poll_table_struct*)*, i64 (%struct.file*, i32, i64)*, i64 (%struct.file*, i32, i64)*, i32 (%struct.file*, %struct.vm_area_struct*)*, i32 (%struct.inode*, %struct.file*)*, i32 (%struct.file*, i8*)*, i32 (%struct.inode*, %struct.file*)*, i32 (%struct.file*, i64, i64, i32)*, i32 (i32, %struct.file*, i32)*, i32 (%struct.file*, i32, %struct.file_lock*)*, i64 (%struct.file*, %struct.page*, i32, i64, i64*, i32)*, i64 (%struct.file*, i64, i64, i64, i64)*, i32 (i32)*, i32 (%struct.file*, i32, %struct.file_lock*)*, i64 (%struct.pipe_inode_info*, %struct.file*, i64*, i64, i32)*, i64 (%struct.file*, i64*, %struct.pipe_inode_info*, i64, i32)*, i32 (%struct.file*, i64, %struct.file_lock**, i8**)*, i64 (%struct.file*, i32, i64, i64)*, void (%struct.seq_file*, %struct.file*)*, i64 (%struct.file*, i64, %struct.file*, i64, i64, i32)*, i32 (%struct.file*, i64, %struct.file*, i64, i64)*, i64 (%struct.file*, i64, i64, %struct.file*, i64)* }
%struct.dir_context = type { i32 (%struct.dir_context*, i8*, i32, i64, i64, i32)*, i64 }
%struct.poll_table_struct = type { void (%struct.file*, %struct.__wait_queue_head*, %struct.poll_table_struct*)*, i64 }
%struct.file_lock = type { %struct.file_lock*, %struct.list_head, %struct.hlist_node, %struct.list_head, i8*, i32, i8, i32, i32, %struct.pid*, %struct.__wait_queue_head, %struct.file*, i64, i64, %struct.fasync_struct*, i64, i64, %struct.file_lock_operations*, %struct.lock_manager_operations*, %union.anon.44 }
%struct.fasync_struct = type { %struct.spinlock, i32, i32, %struct.fasync_struct*, %struct.file*, %struct.callback_head }
%struct.file_lock_operations = type { void (%struct.file_lock*, %struct.file_lock*)*, void (%struct.file_lock*)* }
%struct.lock_manager_operations = type { i32 (%struct.file_lock*, %struct.file_lock*)*, i64 (%struct.file_lock*)*, i8* (i8*)*, void (i8*)*, void (%struct.file_lock*)*, i32 (%struct.file_lock*, i32)*, i1 (%struct.file_lock*)*, i32 (%struct.file_lock*, i32, %struct.list_head*)*, void (%struct.file_lock*, i8**)* }
%union.anon.44 = type { %struct.nfs_lock_info }
%struct.nfs_lock_info = type { i32, %struct.nlm_lockowner*, %struct.list_head }
%struct.nlm_lockowner = type opaque
%union.anon.3 = type { i64 }
%struct.fown_struct = type { %struct.rwlock_t, %struct.pid*, i32, %struct.atomic_t, %struct.atomic_t, i32 }
%struct.rwlock_t = type { %struct.qrwlock, i32, i32, i8*, %struct.lockdep_map }
%struct.qrwlock = type { %struct.atomic_t, %struct.qspinlock }
%struct.cred = type { %struct.atomic_t, %struct.atomic_t, i8*, i32, %struct.atomic_t, %struct.atomic_t, %struct.atomic_t, %struct.atomic_t, %struct.atomic_t, %struct.atomic_t, %struct.atomic_t, %struct.atomic_t, i32, %struct.kernel_cap_struct, %struct.kernel_cap_struct, %struct.kernel_cap_struct, %struct.kernel_cap_struct, %struct.kernel_cap_struct, i8, %struct.key*, %struct.key*, %struct.key*, %struct.key*, i8*, %struct.user_struct*, %struct.user_namespace*, %struct.group_info*, %struct.callback_head }
%struct.kernel_cap_struct = type { [2 x i32] }
%struct.key = type { %struct.atomic_t, i32, %union.anon.52, %struct.rw_semaphore, %struct.key_user*, i8*, %union.anon.3, i64, %struct.atomic_t, %struct.atomic_t, i32, i16, i16, i64, %union.anon.54, %union.anon.56, i32 (%struct.key*, %struct.key_type*, %union.key_payload*)* }
%union.anon.52 = type { %struct.rb_node }
%struct.key_user = type opaque
%union.anon.54 = type { %struct.keyring_index_key }
%struct.keyring_index_key = type { %struct.key_type*, i8*, i64 }
%struct.key_type = type opaque
%union.anon.56 = type { %union.key_payload }
%union.key_payload = type { [4 x i8*] }
%struct.user_struct = type { %struct.atomic_t, %struct.atomic_t, %struct.atomic_t, %struct.atomic_t, %union.anon.3, i64, i64, i64, %union.anon.3, %struct.key*, %struct.key*, %struct.hlist_node, %struct.atomic_t, %union.anon.3 }
%struct.group_info = type { %struct.atomic_t, i32, [0 x %struct.atomic_t] }
%struct.file_ra_state = type { i64, i32, i32, i32, i32, i64 }
%struct.seq_file = type { i8*, i64, i64, i64, i64, i64, i64, i64, %struct.mutex, %struct.seq_operations*, i32, %struct.file*, i8* }
%struct.seq_operations = type { i8* (%struct.seq_file*, i64*)*, void (%struct.seq_file*, i8*)*, i8* (%struct.seq_file*, i8*, i64*)*, i32 (%struct.seq_file*, i8*)* }
%struct.vm_operations_struct = type { void (%struct.vm_area_struct*)*, void (%struct.vm_area_struct*)*, i32 (%struct.vm_area_struct*)*, i32 (%struct.vm_fault*)*, i32 (%struct.vm_fault*, i32)*, void (%struct.vm_fault*, i64, i64)*, i32 (%struct.vm_fault*)*, i32 (%struct.vm_fault*)*, i32 (%struct.vm_area_struct*, i64, i8*, i32, i32)*, i8* (%struct.vm_area_struct*)*, i32 (%struct.vm_area_struct*, %struct.mempolicy*)*, %struct.mempolicy* (%struct.vm_area_struct*, i64)*, %struct.page* (%struct.vm_area_struct*, i64)* }
%struct.vm_fault = type { %struct.vm_area_struct*, i32, i32, i64, i64, %union.anon.3*, %union.anon.3*, %union.anon.3, %struct.page*, %struct.mem_cgroup*, %struct.page*, %union.anon.3*, %struct.spinlock*, %struct.page* }
%struct.kernfs_open_node = type opaque
%struct.kernfs_iattrs = type opaque
%struct.kref = type { %struct.qspinlock }
%struct.delayed_work = type { %struct.work_struct, %struct.timer_list, %struct.workqueue_struct*, i32 }
%struct.timer_list = type { %struct.hlist_node, i64, void (i64)*, i64, i32, %struct.lockdep_map }
%struct.module_param_attrs = type opaque
%struct.module_attribute = type { %struct.attribute, i64 (%struct.module_attribute*, %struct.module_kobject*, i8*)*, i64 (%struct.module_attribute*, %struct.module_kobject*, i8*, i64)*, void (%struct.module*, i8*)*, i32 (%struct.module*)*, void (%struct.module*)* }
%struct.mutex = type { %union.anon.3, %struct.spinlock, %struct.qspinlock, %struct.list_head, i8*, %struct.lockdep_map }
%struct.kernel_param = type { i8*, %struct.module*, %struct.kernel_param_ops*, i16, i8, i8, %union.anon.51 }
%union.anon.51 = type { i8* }
%struct.kernel_symbol = type { i64, i8* }
%struct.exception_table_entry = type { i32, i32, i32 }
%struct.module_layout = type { i8*, i32, i32, i32, i32, %struct.mod_tree_node }
%struct.mod_tree_node = type { %struct.module*, %struct.latch_tree_node }
%struct.latch_tree_node = type { [2 x %struct.rb_node] }
%struct.mod_arch_specific = type {}
%struct.bug_entry = type { i32, i32, i16, i16 }
%struct.mod_kallsyms = type { %struct.elf64_sym*, i32, i8* }
%struct.elf64_sym = type { i32, i8, i8, i16, i64, i64 }
%struct.module_sect_attrs = type opaque
%struct.module_notes_attrs = type opaque
%struct.tracepoint = type { i8*, %struct.qspinlock, i32 ()*, void ()*, %struct.tracepoint_func* }
%struct.tracepoint_func = type { i8*, i8*, i32 }
%struct.trace_event_call = type opaque
%struct.trace_enum_map = type opaque
%struct.klp_modinfo = type { %struct.elf64_hdr, %struct.elf64_shdr*, i8*, i32 }
%struct.elf64_hdr = type { [16 x i8], i16, i16, i32, i64, i64, i64, i32, i16, i16, i16, i16, i16, i16 }
%struct.elf64_shdr = type { i32, i32, i64, i64, i64, i64, i32, i32, i64, i64 }
%struct.list_head = type { %struct.list_head*, %struct.list_head* }
%struct.atomic_t = type { i32 }
%struct.kernel_param_ops = type { i32, i32 (i8*, %struct.kernel_param*)*, i32 (i8*, %struct.kernel_param*)*, void (i8*)* }
%struct.kparam_array = type { i32, i32, i32*, %struct.kernel_param_ops*, i8* }
%struct.device_driver = type { i8*, %struct.bus_type*, %struct.module*, i8*, i8, i32, %struct.of_device_id*, %struct.acpi_device_id*, i32 (%struct.device*)*, i32 (%struct.device*)*, void (%struct.device*)*, i32 (%struct.device*, i32)*, i32 (%struct.device*)*, %struct.attribute_group**, %struct.dev_pm_ops*, %struct.driver_private* }
%struct.bus_type = type { i8*, i8*, %struct.device*, %struct.device_attribute*, %struct.attribute_group**, %struct.attribute_group**, %struct.attribute_group**, i32 (%struct.device*, %struct.device_driver*)*, i32 (%struct.device*, %struct.kobj_uevent_env*)*, i32 (%struct.device*)*, i32 (%struct.device*)*, void (%struct.device*)*, i32 (%struct.device*)*, i32 (%struct.device*)*, i32 (%struct.device*, i32)*, i32 (%struct.device*)*, i32 (%struct.device*)*, %struct.dev_pm_ops*, %struct.iommu_ops*, %struct.subsys_private*, %struct.lock_class_key }
%struct.device = type { %struct.device*, %struct.device_private*, %struct.kobject, i8*, %struct.device_type*, %struct.mutex, %struct.bus_type*, %struct.device_driver*, i8*, i8*, %struct.dev_links_info, %struct.dev_pm_info, %struct.dev_pm_domain*, %struct.irq_domain*, %struct.dev_pin_info*, %struct.list_head, i32, %struct.dma_map_ops*, i64*, i64, i64, %struct.device_dma_parameters*, %struct.list_head, %struct.dma_coherent_mem*, %struct.cma*, %union.anon.51, %struct.device_node*, %struct.fwnode_handle*, i32, i32, %struct.spinlock, %struct.list_head, %struct.klist_node, %struct.class*, %struct.attribute_group**, void (%struct.device*)*, %struct.iommu_group*, %struct.iommu_fwspec*, i8 }
%struct.device_private = type opaque
%struct.device_type = type { i8*, %struct.attribute_group**, i32 (%struct.device*, %struct.kobj_uevent_env*)*, i8* (%struct.device*, i16*, %struct.atomic_t*, %struct.atomic_t*)*, void (%struct.device*)*, %struct.dev_pm_ops* }
%struct.dev_links_info = type { %struct.list_head, %struct.list_head, i32 }
%struct.dev_pm_info = type { %struct.atomic_t, i16, %struct.spinlock, %struct.list_head, %struct.completion, %struct.wakeup_source*, i8, %struct.timer_list, i64, %struct.work_struct, %struct.__wait_queue_head, %struct.wake_irq*, %struct.atomic_t, %struct.atomic_t, i16, i32, i32, i32, i32, i32, i64, i64, i64, i64, %struct.pm_subsys_data*, void (%struct.device*, i32)*, %struct.dev_pm_qos* }
%struct.wakeup_source = type { i8*, %struct.list_head, %struct.spinlock, %struct.wake_irq*, %struct.timer_list, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i8 }
%struct.wake_irq = type opaque
%struct.pm_subsys_data = type { %struct.spinlock, i32, %struct.list_head, %struct.pm_domain_data* }
%struct.pm_domain_data = type opaque
%struct.dev_pm_qos = type { %struct.pm_qos_constraints, %struct.pm_qos_constraints, %struct.pm_qos_flags, %struct.dev_pm_qos_request*, %struct.dev_pm_qos_request*, %struct.dev_pm_qos_request* }
%struct.pm_qos_constraints = type { %union.anon.0, i32, i32, i32, i32, %struct.blocking_notifier_head* }
%struct.blocking_notifier_head = type { %struct.rw_semaphore, %struct.notifier_block* }
%struct.notifier_block = type { i32 (%struct.notifier_block*, i64, i8*)*, %struct.notifier_block*, i32 }
%struct.pm_qos_flags = type { %struct.list_head, i32 }
%struct.dev_pm_qos_request = type { i32, %union.anon.59, %struct.device* }
%union.anon.59 = type { %struct.plist_node }
%struct.dev_pm_domain = type { %struct.dev_pm_ops, void (%struct.device*, i1)*, i32 (%struct.device*)*, void (%struct.device*)*, void (%struct.device*)* }
%struct.dev_pm_ops = type { i32 (%struct.device*)*, void (%struct.device*)*, i32 (%struct.device*)*, i32 (%struct.device*)*, i32 (%struct.device*)*, i32 (%struct.device*)*, i32 (%struct.device*)*, i32 (%struct.device*)*, i32 (%struct.device*)*, i32 (%struct.device*)*, i32 (%struct.device*)*, i32 (%struct.device*)*, i32 (%struct.device*)*, i32 (%struct.device*)*, i32 (%struct.device*)*, i32 (%struct.device*)*, i32 (%struct.device*)*, i32 (%struct.device*)*, i32 (%struct.device*)*, i32 (%struct.device*)*, i32 (%struct.device*)*, i32 (%struct.device*)*, i32 (%struct.device*)* }
%struct.irq_domain = type opaque
%struct.dev_pin_info = type { %struct.pinctrl*, %struct.pinctrl_state*, %struct.pinctrl_state*, %struct.pinctrl_state*, %struct.pinctrl_state* }
%struct.pinctrl = type opaque
%struct.pinctrl_state = type opaque
%struct.dma_map_ops = type opaque
%struct.device_dma_parameters = type { i32, i64 }
%struct.dma_coherent_mem = type opaque
%struct.cma = type opaque
%struct.device_node = type opaque
%struct.fwnode_handle = type opaque
%struct.klist_node = type { i8*, %struct.list_head, %struct.kref }
%struct.class = type { i8*, %struct.module*, %struct.class_attribute*, %struct.attribute_group**, %struct.attribute_group**, %struct.kobject*, i32 (%struct.device*, %struct.kobj_uevent_env*)*, i8* (%struct.device*, i16*)*, void (%struct.class*)*, void (%struct.device*)*, i32 (%struct.device*, i32)*, i32 (%struct.device*)*, %struct.kobj_ns_type_operations*, i8* (%struct.device*)*, %struct.dev_pm_ops*, %struct.subsys_private* }
%struct.class_attribute = type { %struct.attribute, i64 (%struct.class*, %struct.class_attribute*, i8*)*, i64 (%struct.class*, %struct.class_attribute*, i8*, i64)* }
%struct.iommu_group = type opaque
%struct.iommu_fwspec = type opaque
%struct.device_attribute = type { %struct.attribute, i64 (%struct.device*, %struct.device_attribute*, i8*)*, i64 (%struct.device*, %struct.device_attribute*, i8*, i64)* }
%struct.iommu_ops = type opaque
%struct.subsys_private = type opaque
%struct.of_device_id = type { [32 x i8], [32 x i8], [128 x i8], i8* }
%struct.acpi_device_id = type { [9 x i8], i64, i32, i32 }
%struct.attribute_group = type { i8*, i16 (%struct.kobject*, %struct.attribute*, i32)*, i16 (%struct.kobject*, %struct.bin_attribute*, i32)*, %struct.attribute**, %struct.bin_attribute** }
%struct.bin_attribute = type { %struct.attribute, i64, i8*, i64 (%struct.file*, %struct.kobject*, %struct.bin_attribute*, i8*, i64, i64)*, i64 (%struct.file*, %struct.kobject*, %struct.bin_attribute*, i8*, i64, i64)*, i32 (%struct.file*, %struct.kobject*, %struct.bin_attribute*, %struct.vm_area_struct*)* }
%struct.driver_private = type opaque
%struct.wm97xx.280 = type { [3 x i16], i16, [6 x i16], i16, [3 x i16], %struct.wm97xx_codec_drv.281*, %struct.input_dev*, %struct.snd_ac97*, %struct.device*, %struct.platform_device*, %struct.platform_device*, %struct.wm97xx_mach_ops.286*, %struct.mutex, %struct.delayed_work, i64, i64, i32, %struct.workqueue_struct*, %struct.work_struct, i16, i16, i8, i16, i16 }
%struct.wm97xx_codec_drv.281 = type { i16, i8*, {}*, i32 (%struct.wm97xx.280*, %struct.exception_table_entry*)*, i32 (%struct.wm97xx.280*, i32)*, void (%struct.wm97xx.280*)*, void (%struct.wm97xx.280*, i32)*, void (%struct.wm97xx.280*)*, void (%struct.wm97xx.280*)* }
%struct.input_dev = type { i8*, i8*, i8*, %struct.input_id, [1 x i64], [1 x i64], [12 x i64], [1 x i64], [1 x i64], [1 x i64], [1 x i64], [1 x i64], [2 x i64], [1 x i64], i32, i32, i32, i8*, i32 (%struct.input_dev*, %struct.input_keymap_entry*, i32*)*, i32 (%struct.input_dev*, %struct.input_keymap_entry*)*, %struct.ff_device*, i32, %struct.timer_list, [2 x i32], %struct.input_mt*, %struct.input_absinfo*, [12 x i64], [1 x i64], [1 x i64], [1 x i64], i32 (%struct.input_dev*)*, void (%struct.input_dev*)*, i32 (%struct.input_dev*, %struct.file*)*, i32 (%struct.input_dev*, i32, i32, i32)*, %struct.input_handle*, %struct.spinlock, %struct.mutex, i32, i8, %struct.device, %struct.list_head, %struct.list_head, i32, i32, %struct.input_value*, i8 }
%struct.input_id = type { i16, i16, i16, i16 }
%struct.input_keymap_entry = type { i8, i8, i16, i32, [32 x i8] }
%struct.ff_device = type { i32 (%struct.input_dev*, %struct.ff_effect*, %struct.ff_effect*)*, i32 (%struct.input_dev*, i32)*, i32 (%struct.input_dev*, i32, i32)*, void (%struct.input_dev*, i16)*, void (%struct.input_dev*, i16)*, void (%struct.ff_device*)*, i8*, [2 x i64], %struct.mutex, i32, %struct.ff_effect*, [0 x %struct.file*] }
%struct.ff_effect = type { i16, i16, i16, %struct.ff_trigger, %struct.ff_trigger, %union.anon.58 }
%struct.ff_trigger = type { i16, i16 }
%union.anon.58 = type { %struct.ff_periodic_effect }
%struct.ff_periodic_effect = type { i16, i16, i16, i16, i16, %struct.input_id, i32, i16* }
%struct.input_mt = type opaque
%struct.input_absinfo = type { i32, i32, i32, i32, i32, i32 }
%struct.input_handle = type { i8*, i32, i8*, %struct.input_dev*, %struct.input_handler*, %struct.list_head, %struct.list_head }
%struct.input_handler = type { i8*, void (%struct.input_handle*, i32, i32, i32)*, void (%struct.input_handle*, %struct.input_value*, i32)*, i1 (%struct.input_handle*, i32, i32, i32)*, i1 (%struct.input_handler*, %struct.input_dev*)*, i32 (%struct.input_handler*, %struct.input_dev*, %struct.input_device_id*)*, void (%struct.input_handle*)*, void (%struct.input_handle*)*, i8, i32, i8*, %struct.input_device_id*, %struct.list_head, %struct.list_head }
%struct.input_device_id = type { i64, i16, i16, i16, i16, [1 x i64], [12 x i64], [1 x i64], [1 x i64], [1 x i64], [1 x i64], [1 x i64], [2 x i64], [1 x i64], i64 }
%struct.input_value = type { i16, i16, i32 }
%struct.snd_ac97 = type { %struct.snd_ac97_build_ops*, i8*, void (%struct.snd_ac97*)*, %struct.snd_ac97_bus*, %struct.pci_dev*, %struct.snd_info_entry*, %struct.snd_info_entry*, i16, i16, %struct.mutex, %struct.mutex, i16, i16, i32, i16, i16, i16, %struct.ff_trigger*, i32, i32, [6 x i32], i32, [128 x i16], [2 x i64], %union.anon.62, i8, i8, i32, %struct.delayed_work, %struct.device, %struct.snd_ac97_gpio_priv*, [2 x %struct.snd_pcm_chmap*] }
%struct.snd_ac97_build_ops = type { i32 (%struct.snd_ac97*)*, i32 (%struct.snd_ac97*)*, i32 (%struct.snd_ac97*)*, i32 (%struct.snd_ac97*)*, void (%struct.snd_ac97*)*, void (%struct.snd_ac97*)*, void (%struct.snd_ac97*)* }
%struct.snd_ac97_bus = type { %struct.snd_ac97_bus_ops*, i8*, void (%struct.snd_ac97_bus*)*, %struct.snd_card*, i16, i8, i32, %struct.spinlock, [2 x [4 x i16]], i16, %struct.ac97_pcm*, [4 x %struct.snd_ac97*], %struct.snd_info_entry* }
%struct.snd_ac97_bus_ops = type { void (%struct.snd_ac97*)*, void (%struct.snd_ac97*)*, void (%struct.snd_ac97*, i16, i16)*, i16 (%struct.snd_ac97*, i16)*, void (%struct.snd_ac97*)*, void (%struct.snd_ac97*)* }
%struct.snd_card = type { i32, [16 x i8], [16 x i8], [32 x i8], [80 x i8], [32 x i8], [80 x i8], [128 x i8], %struct.module*, i8*, void (%struct.snd_card*)*, %struct.list_head, %struct.device, i32, %struct.rw_semaphore, %struct.rwlock_t, i32, i32, %struct.list_head, %struct.list_head, %struct.mutex, %struct.snd_info_entry*, %struct.snd_info_entry*, %struct.proc_dir_entry*, %struct.list_head, %struct.snd_shutdown_f_ops*, %struct.spinlock, i32, %struct.completion*, %struct.device*, %struct.device, [4 x %struct.attribute_group*], i8, i32, %struct.mutex, %struct.__wait_queue_head, %struct.snd_mixer_oss*, i32 }
%struct.proc_dir_entry = type opaque
%struct.snd_shutdown_f_ops = type opaque
%struct.snd_mixer_oss = type opaque
%struct.ac97_pcm = type { %struct.snd_ac97_bus*, i8, i16, i16, i32, [2 x %struct.anon.61], i64 }
%struct.anon.61 = type { i16, [4 x i16], [4 x i8], [4 x %struct.snd_ac97*] }
%struct.pci_dev = type opaque
%struct.snd_info_entry = type { i8*, i16, i64, i16, %union.anon.60, %struct.snd_info_entry*, %struct.snd_card*, %struct.module*, i8*, void (%struct.snd_info_entry*)*, %struct.proc_dir_entry*, %struct.mutex, %struct.list_head, %struct.list_head }
%union.anon.60 = type { %struct.snd_info_entry_text }
%struct.snd_info_entry_text = type { void (%struct.snd_info_entry*, %struct.snd_info_buffer*)*, void (%struct.snd_info_entry*, %struct.snd_info_buffer*)* }
%struct.snd_info_buffer = type { i8*, i32, i32, i32, i32, i32 }
%union.anon.62 = type { i32, [28 x i8] }
%struct.snd_ac97_gpio_priv = type opaque
%struct.snd_pcm_chmap = type { %struct.snd_pcm*, i32, %struct.snd_kcontrol*, %struct.snd_pcm_chmap_elem*, i32, i32, i8* }
%struct.snd_pcm = type { %struct.snd_card*, %struct.list_head, i32, i32, i16, i16, [64 x i8], [80 x i8], [2 x %struct.snd_pcm_str], %struct.mutex, %struct.__wait_queue_head, i8*, void (%struct.snd_pcm*)*, i8, i8, %struct.anon.26 }
%struct.snd_pcm_str = type { i32, %struct.snd_pcm*, i32, i32, %struct.snd_pcm_substream*, %struct.snd_pcm_oss_stream, %struct.snd_info_entry*, %struct.snd_info_entry*, i32, %struct.snd_info_entry*, %struct.snd_kcontrol*, %struct.device }
%struct.snd_pcm_substream = type { %struct.snd_pcm*, %struct.snd_pcm_str*, i8*, i32, [32 x i8], i32, %struct.pm_qos_request, i64, %struct.snd_dma_buffer, i64, %struct.snd_pcm_ops*, %struct.snd_pcm_runtime*, %struct.snd_timer*, i8, %struct.snd_pcm_substream*, %struct.list_head, %struct.snd_pcm_group, %struct.snd_pcm_group*, i8*, i32, %struct.atomic_t, i32, void (%struct.snd_pcm_substream*)*, %struct.pid*, %struct.snd_pcm_oss_substream, %struct.snd_info_entry*, %struct.snd_info_entry*, %struct.snd_info_entry*, %struct.snd_info_entry*, %struct.snd_info_entry*, %struct.snd_info_entry*, %struct.snd_info_entry*, %struct.snd_info_entry*, i8 }
%struct.pm_qos_request = type { %struct.plist_node, i32, %struct.delayed_work }
%struct.snd_dma_buffer = type { %struct.snd_dma_device, i8*, i64, i64, i8* }
%struct.snd_dma_device = type { i32, %struct.device* }
%struct.snd_pcm_ops = type { i32 (%struct.snd_pcm_substream*)*, i32 (%struct.snd_pcm_substream*)*, i32 (%struct.snd_pcm_substream*, i32, i8*)*, i32 (%struct.snd_pcm_substream*, %struct.snd_pcm_hw_params*)*, i32 (%struct.snd_pcm_substream*)*, i32 (%struct.snd_pcm_substream*)*, i32 (%struct.snd_pcm_substream*, i32)*, i64 (%struct.snd_pcm_substream*)*, i32 (%struct.snd_pcm_substream*, %struct.timespec*, %struct.timespec*, %struct.snd_pcm_audio_tstamp_config*, %struct.snd_pcm_audio_tstamp_report*)*, i32 (%struct.snd_pcm_substream*, i32, i64, i8*, i64)*, i32 (%struct.snd_pcm_substream*, i32, i64, i64)*, %struct.page* (%struct.snd_pcm_substream*, i64)*, i32 (%struct.snd_pcm_substream*, %struct.vm_area_struct*)*, i32 (%struct.snd_pcm_substream*)* }
%struct.snd_pcm_hw_params = type { i32, [3 x %struct.snd_mask], [5 x %struct.snd_mask], [12 x %struct.snd_interval], [9 x %struct.snd_interval], i32, i32, i32, i32, i32, i32, i64, [64 x i8] }
%struct.snd_mask = type { [8 x i32] }
%struct.snd_interval = type { i32, i32, i8 }
%struct.snd_pcm_audio_tstamp_config = type { i8, [3 x i8] }
%struct.snd_pcm_audio_tstamp_report = type { i8, i32 }
%struct.snd_pcm_runtime = type { %struct.snd_pcm_substream*, %struct.timespec, i8, i32, i64, i64, i64, i64, i64, i64, i64, i32, i32, i32, i32, i32, i64, i32, i64, i64, i64, i32, i32, i32, i32, i32, i8, i32, i32, i64, i64, i64, i64, i64, i64, i64, %union.snd_pcm_sync_id, %struct.snd_pcm_mmap_status*, %struct.timespec*, i64, %struct.__wait_queue_head, %struct.__wait_queue_head, %struct.fasync_struct*, i8*, void (%struct.snd_pcm_runtime*)*, %struct.snd_pcm_hardware, %struct.snd_pcm_hw_constraints, i32, i32, i8*, i64, i64, %struct.snd_dma_buffer*, %struct.snd_pcm_audio_tstamp_config, %struct.snd_pcm_audio_tstamp_report, %struct.timespec, %struct.snd_pcm_oss_runtime }
%union.snd_pcm_sync_id = type { [4 x i32] }
%struct.snd_pcm_mmap_status = type { i32, i32, i64, %struct.timespec, i32, %struct.timespec }
%struct.snd_pcm_hardware = type { i32, i64, i32, i32, i32, i32, i32, i64, i64, i64, i32, i32, i64 }
%struct.snd_pcm_hw_constraints = type { [3 x %struct.snd_mask], [12 x %struct.snd_interval], i32, i32, %struct.snd_pcm_hw_rule* }
%struct.snd_pcm_hw_rule = type { i32, i32, [4 x i32], i32 (%struct.snd_pcm_hw_params*, %struct.snd_pcm_hw_rule*)*, i8* }
%struct.snd_pcm_oss_runtime = type { i8, i32, i32, i32, i32, i32, i32, i64, i64, i64, i32, i64, i64, i64, i8*, i64, %struct.mutex, %struct.snd_pcm_plugin*, %struct.snd_pcm_plugin*, i32 }
%struct.snd_pcm_plugin = type opaque
%struct.snd_timer = type opaque
%struct.snd_pcm_group = type { %struct.spinlock, %struct.mutex, %struct.list_head, i32 }
%struct.snd_pcm_oss_substream = type { i8, %struct.snd_pcm_oss_setup }
%struct.snd_pcm_oss_setup = type { i8*, i8, i32, i32, %struct.snd_pcm_oss_setup* }
%struct.snd_pcm_oss_stream = type { %struct.snd_pcm_oss_setup*, %struct.mutex, %struct.snd_info_entry* }
%struct.snd_kcontrol = type { %struct.list_head, %struct.snd_ctl_elem_id, i32, i32 (%struct.snd_kcontrol*, %struct.snd_ctl_elem_info*)*, i32 (%struct.snd_kcontrol*, %struct.snd_ctl_elem_value*)*, i32 (%struct.snd_kcontrol*, %struct.snd_ctl_elem_value*)*, %union.anon.74, i64, i8*, void (%struct.snd_kcontrol*)*, [0 x %struct.snd_kcontrol_volatile] }
%struct.snd_ctl_elem_id = type { i32, i32, i32, i32, [44 x i8], i32 }
%struct.snd_ctl_elem_info = type { %struct.snd_ctl_elem_id, i32, i32, i32, i32, %union.anon.64, %union.anon.68, [56 x i8] }
%union.anon.64 = type { %struct.anon.67, [40 x i8] }
%struct.anon.67 = type { i32, i32, [64 x i8], i64, i32 }
%union.anon.68 = type { i16* }
%struct.snd_ctl_elem_value = type { %struct.snd_ctl_elem_id, i8, %union.anon.69, %struct.timespec, [112 x i8] }
%union.anon.69 = type { %struct.cpumask }
%union.anon.74 = type { i32 (%struct.snd_kcontrol*, i32, i32, i32*)* }
%struct.snd_kcontrol_volatile = type { %struct.snd_ctl_file*, i32 }
%struct.snd_ctl_file = type { %struct.list_head, %struct.snd_card*, %struct.pid*, [2 x i32], %struct.__wait_queue_head, %struct.spinlock, %struct.fasync_struct*, i32, %struct.list_head }
%struct.snd_pcm_chmap_elem = type { i8, [15 x i8] }
%struct.platform_device = type { i8*, i32, i8, %struct.device, i32, %struct.resource*, %struct.platform_device_id*, i8*, %struct.mfd_cell*, %struct.mod_arch_specific }
%struct.resource = type { i64, i64, i8*, i64, i64, %struct.resource*, %struct.resource*, %struct.resource* }
%struct.platform_device_id = type { [20 x i8], i64 }
%struct.mfd_cell = type opaque
%struct.wm97xx_mach_ops.286 = type { i32, void (%struct.wm97xx.280*)*, i32 (%struct.wm97xx.280*)*, i32 (%struct.wm97xx.280*)*, void (%struct.wm97xx.280*)*, void (%struct.wm97xx.280*, i32)*, i32, void (i32)*, void (i32)* }
%struct.wm97xx.679 = type { [3 x i16], i16, [6 x i16], i16, [3 x i16], %struct.wm97xx_codec_drv.680*, %struct.input_dev*, %struct.snd_ac97*, %struct.device*, %struct.platform_device*, %struct.platform_device*, %struct.wm97xx_mach_ops.685*, %struct.mutex, %struct.delayed_work, i64, i64, i32, %struct.workqueue_struct*, %struct.work_struct, i16, i16, i8, i16, i16 }
%struct.wm97xx_codec_drv.680 = type { i16, i8*, {}*, i32 (%struct.wm97xx.679*, %struct.exception_table_entry*)*, i32 (%struct.wm97xx.679*, i32)*, void (%struct.wm97xx.679*)*, void (%struct.wm97xx.679*, i32)*, void (%struct.wm97xx.679*)*, void (%struct.wm97xx.679*)* }
%struct.wm97xx_mach_ops.685 = type { i32, void (%struct.wm97xx.679*)*, i32 (%struct.wm97xx.679*)*, i32 (%struct.wm97xx.679*)*, void (%struct.wm97xx.679*)*, void (%struct.wm97xx.679*, i32)*, i32, void (i32)*, void (i32)* }
%struct.wm97xx.1078 = type { [3 x i16], i16, [6 x i16], i16, [3 x i16], %struct.wm97xx_codec_drv.1079*, %struct.input_dev*, %struct.snd_ac97*, %struct.device*, %struct.platform_device*, %struct.platform_device*, %struct.wm97xx_mach_ops.1084*, %struct.mutex, %struct.delayed_work, i64, i64, i32, %struct.workqueue_struct*, %struct.work_struct, i16, i16, i8, i16, i16 }
%struct.wm97xx_codec_drv.1079 = type { i16, i8*, {}*, i32 (%struct.wm97xx.1078*, %struct.exception_table_entry*)*, i32 (%struct.wm97xx.1078*, i32)*, void (%struct.wm97xx.1078*)*, void (%struct.wm97xx.1078*, i32)*, void (%struct.wm97xx.1078*)*, void (%struct.wm97xx.1078*)* }
%struct.wm97xx_mach_ops.1084 = type { i32, void (%struct.wm97xx.1078*)*, i32 (%struct.wm97xx.1078*)*, i32 (%struct.wm97xx.1078*)*, void (%struct.wm97xx.1078*)*, void (%struct.wm97xx.1078*, i32)*, i32, void (i32)*, void (i32)* }
%struct.wm97xx = type { [3 x i16], i16, [6 x i16], i16, [3 x i16], %struct.wm97xx_codec_drv*, %struct.input_dev*, %struct.snd_ac97*, %struct.device*, %struct.platform_device*, %struct.platform_device*, %struct.wm97xx_mach_ops*, %struct.mutex, %struct.delayed_work, i64, i64, i32, %struct.workqueue_struct*, %struct.work_struct, i16, i16, i8, i16, i16 }
%struct.wm97xx_codec_drv = type { i16, i8*, i32 (%struct.wm97xx*, i32, i32*)*, i32 (%struct.wm97xx*, %struct.exception_table_entry*)*, i32 (%struct.wm97xx*, i32)*, void (%struct.wm97xx*)*, void (%struct.wm97xx*, i32)*, void (%struct.wm97xx*)*, void (%struct.wm97xx*)* }
%struct.wm97xx_mach_ops = type { i32, void (%struct.wm97xx*)*, i32 (%struct.wm97xx*)*, i32 (%struct.wm97xx*)*, void (%struct.wm97xx*)*, void (%struct.wm97xx*, i32)*, i32, void (i32)*, void (i32)* }
%struct.wm97xx_pdata = type { %struct.wm97xx_batt_pdata* }
%struct.wm97xx_batt_pdata = type { i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i8* }
%union.anon.75 = type { %struct.list_head* }
%struct._ddebug = type { i8*, i8*, i8*, i8*, i32 }

@llvm.used = appending global [90 x i8*] [i8* bitcast ({ i8*, %struct.module*, %struct.kernel_param_ops*, i16, i8, i8, { %struct.kparam_array* } }* @__param_abs_x to i8*), i8* getelementptr inbounds ([28 x i8], [28 x i8]* @__UNIQUE_ID_abs_xtype12, i32 0, i32 0), i8* getelementptr inbounds ([49 x i8], [49 x i8]* @__UNIQUE_ID_abs_x13, i32 0, i32 0), i8* bitcast ({ i8*, %struct.module*, %struct.kernel_param_ops*, i16, i8, i8, { %struct.kparam_array* } }* @__param_abs_y to i8*), i8* getelementptr inbounds ([28 x i8], [28 x i8]* @__UNIQUE_ID_abs_ytype14, i32 0, i32 0), i8* getelementptr inbounds ([49 x i8], [49 x i8]* @__UNIQUE_ID_abs_y15, i32 0, i32 0), i8* bitcast ({ i8*, %struct.module*, %struct.kernel_param_ops*, i16, i8, i8, { %struct.kparam_array* } }* @__param_abs_p to i8*), i8* getelementptr inbounds ([28 x i8], [28 x i8]* @__UNIQUE_ID_abs_ptype16, i32 0, i32 0), i8* getelementptr inbounds ([56 x i8], [56 x i8]* @__UNIQUE_ID_abs_p17, i32 0, i32 0), i8* bitcast (%struct.kernel_symbol* @__ksymtab_wm97xx_reg_read to i8*), i8* bitcast (%struct.kernel_symbol* @__ksymtab_wm97xx_reg_write to i8*), i8* bitcast (%struct.kernel_symbol* @__ksymtab_wm97xx_read_aux_adc to i8*), i8* bitcast (%struct.kernel_symbol* @__ksymtab_wm97xx_get_gpio to i8*), i8* bitcast (%struct.kernel_symbol* @__ksymtab_wm97xx_set_gpio to i8*), i8* bitcast (%struct.kernel_symbol* @__ksymtab_wm97xx_config_gpio to i8*), i8* bitcast (%struct.kernel_symbol* @__ksymtab_wm97xx_set_suspend_mode to i8*), i8* bitcast (%struct.kernel_symbol* @__ksymtab_wm97xx_register_mach_ops to i8*), i8* bitcast (%struct.kernel_symbol* @__ksymtab_wm97xx_unregister_mach_ops to i8*), i8* getelementptr inbounds ([43 x i8], [43 x i8]* @__UNIQUE_ID_author18, i32 0, i32 0), i8* getelementptr inbounds ([63 x i8], [63 x i8]* @__UNIQUE_ID_description19, i32 0, i32 0), i8* getelementptr inbounds ([12 x i8], [12 x i8]* @__UNIQUE_ID_license20, i32 0, i32 0), i8* bitcast (%struct.kernel_param* @__param_pil to i8*), i8* getelementptr inbounds ([17 x i8], [17 x i8]* @__UNIQUE_ID_piltype12, i32 0, i32 0), i8* getelementptr inbounds ([52 x i8], [52 x i8]* @__UNIQUE_ID_pil13, i32 0, i32 0), i8* bitcast (%struct.kernel_param* @__param_pressure to i8*), i8* getelementptr inbounds ([22 x i8], [22 x i8]* @__UNIQUE_ID_pressuretype14, i32 0, i32 0), i8* getelementptr inbounds ([54 x i8], [54 x i8]* @__UNIQUE_ID_pressure15, i32 0, i32 0), i8* bitcast (%struct.kernel_param* @__param_delay to i8*), i8* getelementptr inbounds ([19 x i8], [19 x i8]* @__UNIQUE_ID_delaytype16, i32 0, i32 0), i8* getelementptr inbounds ([33 x i8], [33 x i8]* @__UNIQUE_ID_delay17, i32 0, i32 0), i8* bitcast (%struct.kernel_param* @__param_pdd to i8*), i8* getelementptr inbounds ([17 x i8], [17 x i8]* @__UNIQUE_ID_pddtype18, i32 0, i32 0), i8* getelementptr inbounds ([45 x i8], [45 x i8]* @__UNIQUE_ID_pdd19, i32 0, i32 0), i8* bitcast (%struct.kernel_param* @__param_mask to i8*), i8* getelementptr inbounds ([18 x i8], [18 x i8]* @__UNIQUE_ID_masktype20, i32 0, i32 0), i8* getelementptr inbounds ([33 x i8], [33 x i8]* @__UNIQUE_ID_mask21, i32 0, i32 0), i8* bitcast (%struct.kernel_symbol* @__ksymtab_wm9705_codec to i8*), i8* getelementptr inbounds ([43 x i8], [43 x i8]* @__UNIQUE_ID_author22, i32 0, i32 0), i8* getelementptr inbounds ([39 x i8], [39 x i8]* @__UNIQUE_ID_description23, i32 0, i32 0), i8* getelementptr inbounds ([12 x i8], [12 x i8]* @__UNIQUE_ID_license24, i32 0, i32 0), i8* bitcast (%struct.kernel_param* @__param_rpu to i8*), i8* getelementptr inbounds ([17 x i8], [17 x i8]* @__UNIQUE_ID_rputype12, i32 0, i32 0), i8* getelementptr inbounds ([55 x i8], [55 x i8]* @__UNIQUE_ID_rpu13, i32 0, i32 0), i8* bitcast (%struct.kernel_param* @__param_pil.45 to i8*), i8* getelementptr inbounds ([17 x i8], [17 x i8]* @__UNIQUE_ID_piltype14, i32 0, i32 0), i8* getelementptr inbounds ([52 x i8], [52 x i8]* @__UNIQUE_ID_pil15, i32 0, i32 0), i8* bitcast (%struct.kernel_param* @__param_pressure.46 to i8*), i8* getelementptr inbounds ([22 x i8], [22 x i8]* @__UNIQUE_ID_pressuretype16, i32 0, i32 0), i8* getelementptr inbounds ([54 x i8], [54 x i8]* @__UNIQUE_ID_pressure17, i32 0, i32 0), i8* bitcast (%struct.kernel_param* @__param_delay.47 to i8*), i8* getelementptr inbounds ([19 x i8], [19 x i8]* @__UNIQUE_ID_delaytype18, i32 0, i32 0), i8* getelementptr inbounds ([33 x i8], [33 x i8]* @__UNIQUE_ID_delay19, i32 0, i32 0), i8* bitcast (%struct.kernel_param* @__param_five_wire to i8*), i8* getelementptr inbounds ([23 x i8], [23 x i8]* @__UNIQUE_ID_five_wiretype20, i32 0, i32 0), i8* getelementptr inbounds ([53 x i8], [53 x i8]* @__UNIQUE_ID_five_wire21, i32 0, i32 0), i8* bitcast (%struct.kernel_param* @__param_mask.48 to i8*), i8* getelementptr inbounds ([18 x i8], [18 x i8]* @__UNIQUE_ID_masktype22, i32 0, i32 0), i8* getelementptr inbounds ([33 x i8], [33 x i8]* @__UNIQUE_ID_mask23, i32 0, i32 0), i8* bitcast (%struct.kernel_param* @__param_coord to i8*), i8* getelementptr inbounds ([19 x i8], [19 x i8]* @__UNIQUE_ID_coordtype24, i32 0, i32 0), i8* getelementptr inbounds ([35 x i8], [35 x i8]* @__UNIQUE_ID_coord25, i32 0, i32 0), i8* bitcast (%struct.kernel_symbol* @__ksymtab_wm9712_codec to i8*), i8* getelementptr inbounds ([43 x i8], [43 x i8]* @__UNIQUE_ID_author26, i32 0, i32 0), i8* getelementptr inbounds ([39 x i8], [39 x i8]* @__UNIQUE_ID_description27, i32 0, i32 0), i8* getelementptr inbounds ([12 x i8], [12 x i8]* @__UNIQUE_ID_license28, i32 0, i32 0), i8* bitcast (%struct.kernel_param* @__param_rpu.78 to i8*), i8* getelementptr inbounds ([17 x i8], [17 x i8]* @__UNIQUE_ID_rputype12.79, i32 0, i32 0), i8* getelementptr inbounds ([55 x i8], [55 x i8]* @__UNIQUE_ID_rpu13.80, i32 0, i32 0), i8* bitcast (%struct.kernel_param* @__param_pil.81 to i8*), i8* getelementptr inbounds ([17 x i8], [17 x i8]* @__UNIQUE_ID_piltype14.82, i32 0, i32 0), i8* getelementptr inbounds ([52 x i8], [52 x i8]* @__UNIQUE_ID_pil15.83, i32 0, i32 0), i8* bitcast (%struct.kernel_param* @__param_pressure.84 to i8*), i8* getelementptr inbounds ([22 x i8], [22 x i8]* @__UNIQUE_ID_pressuretype16.85, i32 0, i32 0), i8* getelementptr inbounds ([54 x i8], [54 x i8]* @__UNIQUE_ID_pressure17.86, i32 0, i32 0), i8* bitcast (%struct.kernel_param* @__param_delay.87 to i8*), i8* getelementptr inbounds ([19 x i8], [19 x i8]* @__UNIQUE_ID_delaytype18.88, i32 0, i32 0), i8* getelementptr inbounds ([33 x i8], [33 x i8]* @__UNIQUE_ID_delay19.89, i32 0, i32 0), i8* bitcast (%struct.kernel_param* @__param_five_wire.90 to i8*), i8* getelementptr inbounds ([23 x i8], [23 x i8]* @__UNIQUE_ID_five_wiretype20.91, i32 0, i32 0), i8* getelementptr inbounds ([53 x i8], [53 x i8]* @__UNIQUE_ID_five_wire21.92, i32 0, i32 0), i8* bitcast (%struct.kernel_param* @__param_mask.93 to i8*), i8* getelementptr inbounds ([18 x i8], [18 x i8]* @__UNIQUE_ID_masktype22.94, i32 0, i32 0), i8* getelementptr inbounds ([33 x i8], [33 x i8]* @__UNIQUE_ID_mask23.95, i32 0, i32 0), i8* bitcast (%struct.kernel_param* @__param_coord.96 to i8*), i8* getelementptr inbounds ([19 x i8], [19 x i8]* @__UNIQUE_ID_coordtype24.97, i32 0, i32 0), i8* getelementptr inbounds ([35 x i8], [35 x i8]* @__UNIQUE_ID_coord25.98, i32 0, i32 0), i8* bitcast (%struct.kernel_symbol* @__ksymtab_wm9713_codec to i8*), i8* getelementptr inbounds ([43 x i8], [43 x i8]* @__UNIQUE_ID_author26.99, i32 0, i32 0), i8* getelementptr inbounds ([39 x i8], [39 x i8]* @__UNIQUE_ID_description27.100, i32 0, i32 0), i8* getelementptr inbounds ([12 x i8], [12 x i8]* @__UNIQUE_ID_license28.101, i32 0, i32 0)], section "llvm.metadata"
@__param_abs_x = internal constant { i8*, %struct.module*, %struct.kernel_param_ops*, i16, i8, i8, { %struct.kparam_array* } } { i8* getelementptr inbounds ([6 x i8], [6 x i8]* @__param_str_abs_x, i32 0, i32 0), %struct.module* @__this_module, %struct.kernel_param_ops* @param_array_ops, i16 0, i8 -1, i8 0, { %struct.kparam_array* } { %struct.kparam_array* @__param_arr_abs_x } }, section "__param", align 8
@__UNIQUE_ID_abs_xtype12 = internal constant [28 x i8] c"parmtype=abs_x:array of int\00", section ".modinfo", align 1
@__UNIQUE_ID_abs_x13 = internal constant [49 x i8] c"parm=abs_x:Touchscreen absolute X min, max, fuzz\00", section ".modinfo", align 1
@__param_abs_y = internal constant { i8*, %struct.module*, %struct.kernel_param_ops*, i16, i8, i8, { %struct.kparam_array* } } { i8* getelementptr inbounds ([6 x i8], [6 x i8]* @__param_str_abs_y, i32 0, i32 0), %struct.module* @__this_module, %struct.kernel_param_ops* @param_array_ops, i16 0, i8 -1, i8 0, { %struct.kparam_array* } { %struct.kparam_array* @__param_arr_abs_y } }, section "__param", align 8
@__UNIQUE_ID_abs_ytype14 = internal constant [28 x i8] c"parmtype=abs_y:array of int\00", section ".modinfo", align 1
@__UNIQUE_ID_abs_y15 = internal constant [49 x i8] c"parm=abs_y:Touchscreen absolute Y min, max, fuzz\00", section ".modinfo", align 1
@__param_abs_p = internal constant { i8*, %struct.module*, %struct.kernel_param_ops*, i16, i8, i8, { %struct.kparam_array* } } { i8* getelementptr inbounds ([6 x i8], [6 x i8]* @__param_str_abs_p, i32 0, i32 0), %struct.module* @__this_module, %struct.kernel_param_ops* @param_array_ops, i16 0, i8 -1, i8 0, { %struct.kparam_array* } { %struct.kparam_array* @__param_arr_abs_p } }, section "__param", align 8
@__UNIQUE_ID_abs_ptype16 = internal constant [28 x i8] c"parmtype=abs_p:array of int\00", section ".modinfo", align 1
@__UNIQUE_ID_abs_p17 = internal constant [56 x i8] c"parm=abs_p:Touchscreen absolute Pressure min, max, fuzz\00", section ".modinfo", align 1
@__ksymtab_wm97xx_reg_read = internal constant %struct.kernel_symbol { i64 ptrtoint (i32 (%struct.wm97xx*, i16)* @wm97xx_reg_read to i64), i8* getelementptr inbounds ([16 x i8], [16 x i8]* @__kstrtab_wm97xx_reg_read, i32 0, i32 0) }, section "___ksymtab_gpl+wm97xx_reg_read", align 8
@__ksymtab_wm97xx_reg_write = internal constant %struct.kernel_symbol { i64 ptrtoint (void (%struct.wm97xx*, i16, i16)* @wm97xx_reg_write to i64), i8* getelementptr inbounds ([17 x i8], [17 x i8]* @__kstrtab_wm97xx_reg_write, i32 0, i32 0) }, section "___ksymtab_gpl+wm97xx_reg_write", align 8
@__ksymtab_wm97xx_read_aux_adc = internal constant %struct.kernel_symbol { i64 ptrtoint (i32 (%struct.wm97xx*, i16)* @wm97xx_read_aux_adc to i64), i8* getelementptr inbounds ([20 x i8], [20 x i8]* @__kstrtab_wm97xx_read_aux_adc, i32 0, i32 0) }, section "___ksymtab_gpl+wm97xx_read_aux_adc", align 8
@__ksymtab_wm97xx_get_gpio = internal constant %struct.kernel_symbol { i64 ptrtoint (i32 (%struct.wm97xx*, i32)* @wm97xx_get_gpio to i64), i8* getelementptr inbounds ([16 x i8], [16 x i8]* @__kstrtab_wm97xx_get_gpio, i32 0, i32 0) }, section "___ksymtab_gpl+wm97xx_get_gpio", align 8
@__ksymtab_wm97xx_set_gpio = internal constant %struct.kernel_symbol { i64 ptrtoint (void (%struct.wm97xx*, i32, i32)* @wm97xx_set_gpio to i64), i8* getelementptr inbounds ([16 x i8], [16 x i8]* @__kstrtab_wm97xx_set_gpio, i32 0, i32 0) }, section "___ksymtab_gpl+wm97xx_set_gpio", align 8
@__ksymtab_wm97xx_config_gpio = internal constant %struct.kernel_symbol { i64 ptrtoint (void (%struct.wm97xx*, i32, i32, i32, i32, i32)* @wm97xx_config_gpio to i64), i8* getelementptr inbounds ([19 x i8], [19 x i8]* @__kstrtab_wm97xx_config_gpio, i32 0, i32 0) }, section "___ksymtab_gpl+wm97xx_config_gpio", align 8
@__ksymtab_wm97xx_set_suspend_mode = internal constant %struct.kernel_symbol { i64 ptrtoint (void (%struct.wm97xx*, i16)* @wm97xx_set_suspend_mode to i64), i8* getelementptr inbounds ([24 x i8], [24 x i8]* @__kstrtab_wm97xx_set_suspend_mode, i32 0, i32 0) }, section "___ksymtab_gpl+wm97xx_set_suspend_mode", align 8
@__ksymtab_wm97xx_register_mach_ops = internal constant %struct.kernel_symbol { i64 ptrtoint (i32 (%struct.wm97xx*, %struct.wm97xx_mach_ops*)* @wm97xx_register_mach_ops to i64), i8* getelementptr inbounds ([25 x i8], [25 x i8]* @__kstrtab_wm97xx_register_mach_ops, i32 0, i32 0) }, section "___ksymtab_gpl+wm97xx_register_mach_ops", align 8
@__ksymtab_wm97xx_unregister_mach_ops = internal constant %struct.kernel_symbol { i64 ptrtoint (void (%struct.wm97xx*)* @wm97xx_unregister_mach_ops to i64), i8* getelementptr inbounds ([27 x i8], [27 x i8]* @__kstrtab_wm97xx_unregister_mach_ops, i32 0, i32 0) }, section "___ksymtab_gpl+wm97xx_unregister_mach_ops", align 8
@__UNIQUE_ID_author18 = internal constant [43 x i8] c"author=Liam Girdwood <lrg@slimlogic.co.uk>\00", section ".modinfo", align 1
@__UNIQUE_ID_description19 = internal constant [63 x i8] c"description=WM97xx Core - Touch Screen / AUX ADC / GPIO Driver\00", section ".modinfo", align 1
@__UNIQUE_ID_license20 = internal constant [12 x i8] c"license=GPL\00", section ".modinfo", align 1
@__kstrtab_wm97xx_unregister_mach_ops = internal constant [27 x i8] c"wm97xx_unregister_mach_ops\00", section "__ksymtab_strings", align 1
@__kstrtab_wm97xx_register_mach_ops = internal constant [25 x i8] c"wm97xx_register_mach_ops\00", section "__ksymtab_strings", align 1
@__kstrtab_wm97xx_set_suspend_mode = internal constant [24 x i8] c"wm97xx_set_suspend_mode\00", section "__ksymtab_strings", align 1
@__kstrtab_wm97xx_config_gpio = internal constant [19 x i8] c"wm97xx_config_gpio\00", section "__ksymtab_strings", align 1
@__kstrtab_wm97xx_set_gpio = internal constant [16 x i8] c"wm97xx_set_gpio\00", section "__ksymtab_strings", align 1
@__kstrtab_wm97xx_get_gpio = internal constant [16 x i8] c"wm97xx_get_gpio\00", section "__ksymtab_strings", align 1
@__kstrtab_wm97xx_read_aux_adc = internal constant [20 x i8] c"wm97xx_read_aux_adc\00", section "__ksymtab_strings", align 1
@.str = private unnamed_addr constant [48 x i8] c"timeout reading auxadc %d, disabling digitiser\0A\00", align 1
@__kstrtab_wm97xx_reg_write = internal constant [17 x i8] c"wm97xx_reg_write\00", section "__ksymtab_strings", align 1
@__kstrtab_wm97xx_reg_read = internal constant [16 x i8] c"wm97xx_reg_read\00", section "__ksymtab_strings", align 1
@__param_str_abs_p = internal constant [6 x i8] c"abs_p\00", align 1
@__this_module = external global %struct.module, align 64
@param_array_ops = external constant %struct.kernel_param_ops, align 8
@__param_arr_abs_p = internal constant %struct.kparam_array { i32 3, i32 4, i32* null, %struct.kernel_param_ops* @param_ops_int, i8* bitcast ([3 x i32]* @abs_p to i8*) }, align 8
@param_ops_int = external constant %struct.kernel_param_ops, align 8
@abs_p = internal global [3 x i32] [i32 0, i32 150, i32 4], align 4
@__param_str_abs_y = internal constant [6 x i8] c"abs_y\00", align 1
@__param_arr_abs_y = internal constant %struct.kparam_array { i32 3, i32 4, i32* null, %struct.kernel_param_ops* @param_ops_int, i8* bitcast ([3 x i32]* @abs_y to i8*) }, align 8
@abs_y = internal global [3 x i32] [i32 200, i32 4000, i32 40], align 4
@__param_str_abs_x = internal constant [6 x i8] c"abs_x\00", align 1
@__param_arr_abs_x = internal constant %struct.kparam_array { i32 3, i32 4, i32* null, %struct.kernel_param_ops* @param_ops_int, i8* bitcast ([3 x i32]* @abs_x to i8*) }, align 8
@abs_x = internal global [3 x i32] [i32 150, i32 4000, i32 5], align 4
@wm97xx_driver = internal global %struct.device_driver { i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.1, i32 0, i32 0), %struct.bus_type* @ac97_bus_type, %struct.module* @__this_module, i8* null, i8 0, i32 0, %struct.of_device_id* null, %struct.acpi_device_id* null, i32 (%struct.device*)* @wm97xx_probe, i32 (%struct.device*)* @wm97xx_remove, void (%struct.device*)* null, i32 (%struct.device*, i32)* null, i32 (%struct.device*)* null, %struct.attribute_group** null, %struct.dev_pm_ops* @wm97xx_pm_ops, %struct.driver_private* null }, align 8
@.str.1 = private unnamed_addr constant [10 x i8] c"wm97xx-ts\00", align 1
@ac97_bus_type = external global %struct.bus_type, align 8
@wm97xx_pm_ops = internal constant %struct.dev_pm_ops { i32 (%struct.device*)* null, void (%struct.device*)* null, i32 (%struct.device*)* @wm97xx_suspend, i32 (%struct.device*)* @wm97xx_resume, i32 (%struct.device*)* @wm97xx_suspend, i32 (%struct.device*)* @wm97xx_resume, i32 (%struct.device*)* @wm97xx_suspend, i32 (%struct.device*)* @wm97xx_resume, i32 (%struct.device*)* null, i32 (%struct.device*)* null, i32 (%struct.device*)* null, i32 (%struct.device*)* null, i32 (%struct.device*)* null, i32 (%struct.device*)* null, i32 (%struct.device*)* null, i32 (%struct.device*)* null, i32 (%struct.device*)* null, i32 (%struct.device*)* null, i32 (%struct.device*)* null, i32 (%struct.device*)* null, i32 (%struct.device*)* null, i32 (%struct.device*)* null, i32 (%struct.device*)* null }, align 8
@.str.2 = private unnamed_addr constant [17 x i8] c"&wm->codec_mutex\00", align 1
@wm97xx_probe.__key = internal global %struct.lock_class_key zeroinitializer, align 1
@.str.3 = private unnamed_addr constant [41 x i8] c"Device with vendor %04x is not a wm97xx\0A\00", align 1
@.str.4 = private unnamed_addr constant [27 x i8] c"detected a wm97%02x codec\0A\00", align 1
@.str.5 = private unnamed_addr constant [39 x i8] c"Support for wm97%02x not compiled in.\0A\00", align 1
@.str.6 = private unnamed_addr constant [19 x i8] c"wm97xx touchscreen\00", align 1
@.str.7 = private unnamed_addr constant [7 x i8] c"wm97xx\00", align 1
@.str.8 = private unnamed_addr constant [15 x i8] c"wm97xx-battery\00", align 1
@.str.9 = private unnamed_addr constant [13 x i8] c"wm97xx-touch\00", align 1
@.str.20 = private unnamed_addr constant [40 x i8] c"drivers/input/touchscreen/wm97xx-core.c\00", align 1
@.str.11 = private unnamed_addr constant [8 x i8] c"kwm97xx\00", align 1
@wm97xx_ts_input_open.__key = internal global %struct.lock_class_key zeroinitializer, align 1
@.str.10 = private unnamed_addr constant [10 x i8] c"\22kwm97xx\22\00", align 1
@.str.12 = private unnamed_addr constant [28 x i8] c"Failed to create workqueue\0A\00", align 1
@.str.14 = private unnamed_addr constant [26 x i8] c"(&(&wm->ts_reader)->work)\00", align 1
@wm97xx_ts_input_open.__key.13 = internal global %struct.lock_class_key zeroinitializer, align 1
@.str.16 = private unnamed_addr constant [27 x i8] c"(&(&wm->ts_reader)->timer)\00", align 1
@wm97xx_ts_input_open.__key.15 = internal global %struct.lock_class_key zeroinitializer, align 1
@.str.18 = private unnamed_addr constant [22 x i8] c"(&wm->pen_event_work)\00", align 1
@wm97xx_ts_input_open.__key.17 = internal global %struct.lock_class_key zeroinitializer, align 1
@.str.19 = private unnamed_addr constant [18 x i8] c"No IRQ specified\0A\00", align 1
@.str.29 = private unnamed_addr constant [11 x i8] c"wm97xx-pen\00", align 1
@.str.30 = private unnamed_addr constant [47 x i8] c"Failed to register pen down interrupt, polling\00", align 1
@wm97xx_read_samples.descriptor = internal global { i8*, i8*, i8*, i8*, i8, i8, i8, i8 } { i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.1.74, i32 0, i32 0), i8* getelementptr inbounds ([20 x i8], [20 x i8]* @__func__.wm97xx_read_samples, i32 0, i32 0), i8* getelementptr inbounds ([40 x i8], [40 x i8]* @.str.20, i32 0, i32 0), i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.22, i32 0, i32 0), i8 -91, i8 1, i8 0, i8 0 }, section "__verbose", align 8
@.str.22 = private unnamed_addr constant [8 x i8] c"pen up\0A\00", align 1
@wm97xx_read_samples.descriptor.23 = internal global { i8*, i8*, i8*, i8*, i8, i8, i8, i8 } { i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.1.74, i32 0, i32 0), i8* getelementptr inbounds ([20 x i8], [20 x i8]* @__func__.wm97xx_read_samples, i32 0, i32 0), i8* getelementptr inbounds ([40 x i8], [40 x i8]* @.str.20, i32 0, i32 0), i8* getelementptr inbounds ([44 x i8], [44 x i8]* @.str.24, i32 0, i32 0), i8 -68, i8 1, i8 0, i8 0 }, section "__verbose", align 8
@.str.24 = private unnamed_addr constant [44 x i8] c"pen down: x=%x:%d, y=%x:%d, pressure=%x:%d\0A\00", align 1
@wm97xx_read_samples.descriptor.25 = internal global { i8*, i8*, i8*, i8*, i8, i8, i8, i8 } { i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.1.74, i32 0, i32 0), i8* getelementptr inbounds ([20 x i8], [20 x i8]* @__func__.wm97xx_read_samples, i32 0, i32 0), i8* getelementptr inbounds ([40 x i8], [40 x i8]* @.str.20, i32 0, i32 0), i8* getelementptr inbounds ([39 x i8], [39 x i8]* @.str.26, i32 0, i32 0), i8 -62, i8 1, i8 0, i8 0 }, section "__verbose", align 8
@.str.26 = private unnamed_addr constant [39 x i8] c"Measurement out of range, dropping it\0A\00", align 1
@wm97xx_read_samples.descriptor.27 = internal global { i8*, i8*, i8*, i8*, i8, i8, i8, i8 } { i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.1.74, i32 0, i32 0), i8* getelementptr inbounds ([20 x i8], [20 x i8]* @__func__.wm97xx_read_samples, i32 0, i32 0), i8* getelementptr inbounds ([40 x i8], [40 x i8]* @.str.20, i32 0, i32 0), i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.28, i32 0, i32 0), i8 -49, i8 1, i8 0, i8 0 }, section "__verbose", align 8
@.str.28 = private unnamed_addr constant [10 x i8] c"pen down\0A\00", align 1
@__func__.wm97xx_read_samples = private unnamed_addr constant [20 x i8] c"wm97xx_read_samples\00", align 1
@wm9705_codec = global { i16, i8*, i32 (%struct.wm97xx.280*, i32, i32*)*, i32 (%struct.wm97xx.280*, %struct.exception_table_entry*)*, i32 (%struct.wm97xx.280*, i32)*, void (%struct.wm97xx.280*)*, void (%struct.wm97xx.280*, i32)*, void (%struct.wm97xx.280*)*, void (%struct.wm97xx.280*)* } { i16 19461, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.13, i32 0, i32 0), i32 (%struct.wm97xx.280*, i32, i32*)* @wm9705_poll_sample, i32 (%struct.wm97xx.280*, %struct.exception_table_entry*)* @wm9705_poll_touch, i32 (%struct.wm97xx.280*, i32)* @wm9705_acc_enable, void (%struct.wm97xx.280*)* @wm9705_phy_init, void (%struct.wm97xx.280*, i32)* @wm9705_dig_enable, void (%struct.wm97xx.280*)* @wm9705_dig_restore, void (%struct.wm97xx.280*)* @wm9705_aux_prepare }, align 8
@.str.13 = private unnamed_addr constant [7 x i8] c"wm9705\00", align 1
@pil = internal global i32 0, align 4
@wm9705_phy_init.descriptor = internal global { i8*, i8*, i8*, i8*, i8, i8, i8, i8 } { i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.1.74, i32 0, i32 0), i8* getelementptr inbounds ([16 x i8], [16 x i8]* @__func__.wm9705_phy_init, i32 0, i32 0), i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.2.20, i32 0, i32 0), i8* getelementptr inbounds ([47 x i8], [47 x i8]* @.str.9.62, i32 0, i32 0), i8 -103, i8 0, i8 0, i8 0 }, section "__verbose", align 8
@wm9705_phy_init.descriptor.7 = internal global { i8*, i8*, i8*, i8*, i8, i8, i8, i8 } { i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.1.74, i32 0, i32 0), i8* getelementptr inbounds ([16 x i8], [16 x i8]* @__func__.wm9705_phy_init, i32 0, i32 0), i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.2.20, i32 0, i32 0), i8* getelementptr inbounds ([47 x i8], [47 x i8]* @.str.10.63, i32 0, i32 0), i8 -100, i8 0, i8 0, i8 0 }, section "__verbose", align 8
@pressure = internal global i32 192, align 4
@delay = internal global i32 4, align 4
@wm9705_phy_init.descriptor.9 = internal global { i8*, i8*, i8*, i8*, i8, i8, i8, i8 } { i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.1.74, i32 0, i32 0), i8* getelementptr inbounds ([16 x i8], [16 x i8]* @__func__.wm9705_phy_init, i32 0, i32 0), i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.2.20, i32 0, i32 0), i8* getelementptr inbounds ([29 x i8], [29 x i8]* @.str.11.66, i32 0, i32 0), i8 -93, i8 0, i8 0, i8 0 }, section "__verbose", align 8
@wm9705_phy_init.descriptor.11 = internal global { i8*, i8*, i8*, i8*, i8, i8, i8, i8 } { i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.1.74, i32 0, i32 0), i8* getelementptr inbounds ([16 x i8], [16 x i8]* @__func__.wm9705_phy_init, i32 0, i32 0), i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.2.20, i32 0, i32 0), i8* getelementptr inbounds ([39 x i8], [39 x i8]* @.str.12.68, i32 0, i32 0), i8 -86, i8 0, i8 0, i8 0 }, section "__verbose", align 8
@delay_table = internal constant [16 x i32] [i32 21, i32 42, i32 84, i32 167, i32 333, i32 667, i32 1000, i32 1333, i32 2000, i32 2667, i32 3333, i32 4000, i32 4667, i32 5333, i32 6000, i32 0], align 16
@pdd = internal global i32 8, align 4
@wm9705_phy_init.descriptor.13 = internal global { i8*, i8*, i8*, i8*, i8, i8, i8, i8 } { i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.1.74, i32 0, i32 0), i8* getelementptr inbounds ([16 x i8], [16 x i8]* @__func__.wm9705_phy_init, i32 0, i32 0), i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.2.20, i32 0, i32 0), i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.14.18, i32 0, i32 0), i8 -82, i8 0, i8 0, i8 0 }, section "__verbose", align 8
@.str.14.18 = private unnamed_addr constant [23 x i8] c"setting pdd to Vmid/%d\00", align 1
@mask = internal global i32 0, align 4
@__func__.wm9705_phy_init = private unnamed_addr constant [16 x i8] c"wm9705_phy_init\00", align 1
@.str.2.20 = private unnamed_addr constant [35 x i8] c"drivers/input/touchscreen/wm9705.c\00", align 1
@wm9705_poll_sample.descriptor = internal global { i8*, i8*, i8*, i8*, i8, i8, i8, i8 } { i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.1.74, i32 0, i32 0), i8* getelementptr inbounds ([19 x i8], [19 x i8]* @__func__.wm9705_poll_sample, i32 0, i32 0), i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.2.20, i32 0, i32 0), i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.3.73, i32 0, i32 0), i8 -8, i8 0, i8 0, i8 0 }, section "__verbose", align 8
@wm9705_poll_sample.descriptor.4 = internal global { i8*, i8*, i8*, i8*, i8, i8, i8, i8 } { i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.1.74, i32 0, i32 0), i8* getelementptr inbounds ([19 x i8], [19 x i8]* @__func__.wm9705_poll_sample, i32 0, i32 0), i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.2.20, i32 0, i32 0), i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.5.76, i32 0, i32 0), i8 4, i8 1, i8 0, i8 0 }, section "__verbose", align 8
@__func__.wm9705_poll_sample = private unnamed_addr constant [19 x i8] c"wm9705_poll_sample\00", align 1
@__param_pil = internal constant %struct.kernel_param { i8* getelementptr inbounds ([4 x i8], [4 x i8]* @__param_str_pil, i32 0, i32 0), %struct.module* @__this_module, %struct.kernel_param_ops* @param_ops_int, i16 0, i8 -1, i8 0, %union.anon.51 { i8* bitcast (i32* @pil to i8*) } }, section "__param", align 8
@__UNIQUE_ID_piltype12 = internal constant [17 x i8] c"parmtype=pil:int\00", section ".modinfo", align 1
@__UNIQUE_ID_pil13 = internal constant [52 x i8] c"parm=pil:Set current used for pressure measurement.\00", section ".modinfo", align 1
@__param_pressure = internal constant %struct.kernel_param { i8* getelementptr inbounds ([9 x i8], [9 x i8]* @__param_str_pressure, i32 0, i32 0), %struct.module* @__this_module, %struct.kernel_param_ops* @param_ops_int, i16 0, i8 -1, i8 0, %union.anon.51 { i8* bitcast (i32* @pressure to i8*) } }, section "__param", align 8
@__UNIQUE_ID_pressuretype14 = internal constant [22 x i8] c"parmtype=pressure:int\00", section ".modinfo", align 1
@__UNIQUE_ID_pressure15 = internal constant [54 x i8] c"parm=pressure:Set threshold for pressure measurement.\00", section ".modinfo", align 1
@__param_delay = internal constant %struct.kernel_param { i8* getelementptr inbounds ([6 x i8], [6 x i8]* @__param_str_delay, i32 0, i32 0), %struct.module* @__this_module, %struct.kernel_param_ops* @param_ops_int, i16 0, i8 -1, i8 0, %union.anon.51 { i8* bitcast (i32* @delay to i8*) } }, section "__param", align 8
@__UNIQUE_ID_delaytype16 = internal constant [19 x i8] c"parmtype=delay:int\00", section ".modinfo", align 1
@__UNIQUE_ID_delay17 = internal constant [33 x i8] c"parm=delay:Set adc sample delay.\00", section ".modinfo", align 1
@__param_pdd = internal constant %struct.kernel_param { i8* getelementptr inbounds ([4 x i8], [4 x i8]* @__param_str_pdd, i32 0, i32 0), %struct.module* @__this_module, %struct.kernel_param_ops* @param_ops_int, i16 0, i8 -1, i8 0, %union.anon.51 { i8* bitcast (i32* @pdd to i8*) } }, section "__param", align 8
@__UNIQUE_ID_pddtype18 = internal constant [17 x i8] c"parmtype=pdd:int\00", section ".modinfo", align 1
@__UNIQUE_ID_pdd19 = internal constant [45 x i8] c"parm=pdd:Set pen detect comparator threshold\00", section ".modinfo", align 1
@__param_mask = internal constant %struct.kernel_param { i8* getelementptr inbounds ([5 x i8], [5 x i8]* @__param_str_mask, i32 0, i32 0), %struct.module* @__this_module, %struct.kernel_param_ops* @param_ops_int, i16 0, i8 -1, i8 0, %union.anon.51 { i8* bitcast (i32* @mask to i8*) } }, section "__param", align 8
@__UNIQUE_ID_masktype20 = internal constant [18 x i8] c"parmtype=mask:int\00", section ".modinfo", align 1
@__UNIQUE_ID_mask21 = internal constant [33 x i8] c"parm=mask:Set adc mask function.\00", section ".modinfo", align 1
@__ksymtab_wm9705_codec = internal constant %struct.kernel_symbol { i64 ptrtoint ({ i16, i8*, i32 (%struct.wm97xx.280*, i32, i32*)*, i32 (%struct.wm97xx.280*, %struct.exception_table_entry*)*, i32 (%struct.wm97xx.280*, i32)*, void (%struct.wm97xx.280*)*, void (%struct.wm97xx.280*, i32)*, void (%struct.wm97xx.280*)*, void (%struct.wm97xx.280*)* }* @wm9705_codec to i64), i8* getelementptr inbounds ([13 x i8], [13 x i8]* @__kstrtab_wm9705_codec, i32 0, i32 0) }, section "___ksymtab_gpl+wm9705_codec", align 8
@__UNIQUE_ID_author22 = internal constant [43 x i8] c"author=Liam Girdwood <lrg@slimlogic.co.uk>\00", section ".modinfo", align 1
@__UNIQUE_ID_description23 = internal constant [39 x i8] c"description=WM9705 Touch Screen Driver\00", section ".modinfo", align 1
@__UNIQUE_ID_license24 = internal constant [12 x i8] c"license=GPL\00", section ".modinfo", align 1
@__kstrtab_wm9705_codec = internal constant [13 x i8] c"wm9705_codec\00", section "__ksymtab_strings", align 1
@__param_str_mask = internal constant [5 x i8] c"mask\00", align 1
@__param_str_pdd = internal constant [4 x i8] c"pdd\00", align 1
@__param_str_delay = internal constant [6 x i8] c"delay\00", align 1
@__param_str_pressure = internal constant [9 x i8] c"pressure\00", align 1
@__param_str_pil = internal constant [4 x i8] c"pil\00", align 1
@wm9712_codec = global { i16, i8*, i32 (%struct.wm97xx.679*, i32, i32*)*, i32 (%struct.wm97xx.679*, %struct.exception_table_entry*)*, i32 (%struct.wm97xx.679*, i32)*, void (%struct.wm97xx.679*)*, void (%struct.wm97xx.679*, i32)*, void (%struct.wm97xx.679*)*, void (%struct.wm97xx.679*)* } { i16 19474, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.27, i32 0, i32 0), i32 (%struct.wm97xx.679*, i32, i32*)* @wm9712_poll_sample, i32 (%struct.wm97xx.679*, %struct.exception_table_entry*)* @wm9712_poll_touch, i32 (%struct.wm97xx.679*, i32)* @wm9712_acc_enable, void (%struct.wm97xx.679*)* @wm9712_phy_init, void (%struct.wm97xx.679*, i32)* @wm9712_dig_enable, void (%struct.wm97xx.679*)* @wm9712_dig_restore, void (%struct.wm97xx.679*)* @wm9712_aux_prepare }, align 8
@.str.27 = private unnamed_addr constant [7 x i8] c"wm9712\00", align 1
@rpu = internal global i32 8, align 4
@wm9712_phy_init.descriptor = internal global { i8*, i8*, i8*, i8*, i8, i8, i8, i8 } { i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.1.74, i32 0, i32 0), i8* getelementptr inbounds ([16 x i8], [16 x i8]* @__func__.wm9712_phy_init, i32 0, i32 0), i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.2.39, i32 0, i32 0), i8* getelementptr inbounds ([39 x i8], [39 x i8]* @.str.6.57, i32 0, i32 0), i8 -90, i8 0, i8 0, i8 0 }, section "__verbose", align 8
@five_wire = internal global i32 0, align 4
@wm9712_phy_init.descriptor.7 = internal global { i8*, i8*, i8*, i8*, i8, i8, i8, i8 } { i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.1.74, i32 0, i32 0), i8* getelementptr inbounds ([16 x i8], [16 x i8]* @__func__.wm9712_phy_init, i32 0, i32 0), i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.2.39, i32 0, i32 0), i8* getelementptr inbounds ([34 x i8], [34 x i8]* @.str.8.29, i32 0, i32 0), i8 -84, i8 0, i8 0, i8 0 }, section "__verbose", align 8
@.str.8.29 = private unnamed_addr constant [34 x i8] c"setting 5-wire touchscreen mode.\0A\00", align 1
@pil.30 = internal global i32 0, align 4
@.str.9.31 = private unnamed_addr constant [54 x i8] c"pressure measurement is not supported in 5-wire mode\0A\00", align 1
@wm9712_phy_init.descriptor.10 = internal global { i8*, i8*, i8*, i8*, i8, i8, i8, i8 } { i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.1.74, i32 0, i32 0), i8* getelementptr inbounds ([16 x i8], [16 x i8]* @__func__.wm9712_phy_init, i32 0, i32 0), i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.2.39, i32 0, i32 0), i8* getelementptr inbounds ([48 x i8], [48 x i8]* @.str.11.32, i32 0, i32 0), i8 -71, i8 0, i8 0, i8 0 }, section "__verbose", align 8
@.str.11.32 = private unnamed_addr constant [48 x i8] c"setting pressure measurement current to 400uA.\0A\00", align 1
@wm9712_phy_init.descriptor.12 = internal global { i8*, i8*, i8*, i8*, i8, i8, i8, i8 } { i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.1.74, i32 0, i32 0), i8* getelementptr inbounds ([16 x i8], [16 x i8]* @__func__.wm9712_phy_init, i32 0, i32 0), i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.2.39, i32 0, i32 0), i8* getelementptr inbounds ([48 x i8], [48 x i8]* @.str.13.33, i32 0, i32 0), i8 -68, i8 0, i8 0, i8 0 }, section "__verbose", align 8
@.str.13.33 = private unnamed_addr constant [48 x i8] c"setting pressure measurement current to 200uA.\0A\00", align 1
@pressure.34 = internal global i32 192, align 4
@delay.35 = internal global i32 3, align 4
@wm9712_phy_init.descriptor.14 = internal global { i8*, i8*, i8*, i8*, i8, i8, i8, i8 } { i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.1.74, i32 0, i32 0), i8* getelementptr inbounds ([16 x i8], [16 x i8]* @__func__.wm9712_phy_init, i32 0, i32 0), i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.2.39, i32 0, i32 0), i8* getelementptr inbounds ([30 x i8], [30 x i8]* @.str.15, i32 0, i32 0), i8 -62, i8 0, i8 0, i8 0 }, section "__verbose", align 8
@.str.15 = private unnamed_addr constant [30 x i8] c"supplied delay out of range.\0A\00", align 1
@wm9712_phy_init.descriptor.16 = internal global { i8*, i8*, i8*, i8*, i8, i8, i8, i8 } { i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.1.74, i32 0, i32 0), i8* getelementptr inbounds ([16 x i8], [16 x i8]* @__func__.wm9712_phy_init, i32 0, i32 0), i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.2.39, i32 0, i32 0), i8* getelementptr inbounds ([40 x i8], [40 x i8]* @.str.17, i32 0, i32 0), i8 -56, i8 0, i8 0, i8 0 }, section "__verbose", align 8
@delay_table.36 = internal constant [16 x i32] [i32 21, i32 42, i32 84, i32 167, i32 333, i32 667, i32 1000, i32 1333, i32 2000, i32 2667, i32 3333, i32 4000, i32 4667, i32 5333, i32 6000, i32 0], align 16
@.str.17 = private unnamed_addr constant [40 x i8] c"setting adc sample delay to %d u Secs.\0A\00", align 1
@mask.37 = internal global i32 0, align 4
@coord = internal global i32 0, align 4
@__func__.wm9712_phy_init = private unnamed_addr constant [16 x i8] c"wm9712_phy_init\00", align 1
@.str.2.39 = private unnamed_addr constant [35 x i8] c"drivers/input/touchscreen/wm9712.c\00", align 1
@wm9712_poll_coord.descriptor = internal global { i8*, i8*, i8*, i8*, i8, i8, i8, i8 } { i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.1.74, i32 0, i32 0), i8* getelementptr inbounds ([18 x i8], [18 x i8]* @__func__.wm9712_poll_coord, i32 0, i32 0), i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.2.39, i32 0, i32 0), i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.3.42, i32 0, i32 0), i8 96, i8 1, i8 0, i8 0 }, section "__verbose", align 8
@.str.3.42 = private unnamed_addr constant [20 x i8] c"adc sample timeout\0A\00", align 1
@__func__.wm9712_poll_coord = private unnamed_addr constant [18 x i8] c"wm9712_poll_coord\00", align 1
@wm9712_poll_sample.descriptor = internal global { i8*, i8*, i8*, i8*, i8, i8, i8, i8 } { i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.1.74, i32 0, i32 0), i8* getelementptr inbounds ([19 x i8], [19 x i8]* @__func__.wm9712_poll_sample, i32 0, i32 0), i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.2.39, i32 0, i32 0), i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.3.42, i32 0, i32 0), i8 32, i8 1, i8 0, i8 0 }, section "__verbose", align 8
@wm9712_poll_sample.descriptor.4 = internal global { i8*, i8*, i8*, i8*, i8, i8, i8, i8 } { i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.1.74, i32 0, i32 0), i8* getelementptr inbounds ([19 x i8], [19 x i8]* @__func__.wm9712_poll_sample, i32 0, i32 0), i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.2.39, i32 0, i32 0), i8* getelementptr inbounds ([36 x i8], [36 x i8]* @.str.5.43, i32 0, i32 0), i8 44, i8 1, i8 0, i8 0 }, section "__verbose", align 8
@.str.5.43 = private unnamed_addr constant [36 x i8] c"adc wrong sample, wanted %x got %x\0A\00", align 1
@__func__.wm9712_poll_sample = private unnamed_addr constant [19 x i8] c"wm9712_poll_sample\00", align 1
@__param_rpu = internal constant %struct.kernel_param { i8* getelementptr inbounds ([4 x i8], [4 x i8]* @__param_str_rpu, i32 0, i32 0), %struct.module* @__this_module, %struct.kernel_param_ops* @param_ops_int, i16 0, i8 -1, i8 0, %union.anon.51 { i8* bitcast (i32* @rpu to i8*) } }, section "__param", align 8
@__UNIQUE_ID_rputype12 = internal constant [17 x i8] c"parmtype=rpu:int\00", section ".modinfo", align 1
@__UNIQUE_ID_rpu13 = internal constant [55 x i8] c"parm=rpu:Set internal pull up resistor for pen detect.\00", section ".modinfo", align 1
@__param_pil.45 = internal constant %struct.kernel_param { i8* getelementptr inbounds ([4 x i8], [4 x i8]* @__param_str_pil.52, i32 0, i32 0), %struct.module* @__this_module, %struct.kernel_param_ops* @param_ops_int, i16 0, i8 -1, i8 0, %union.anon.51 { i8* bitcast (i32* @pil.30 to i8*) } }, section "__param", align 8
@__UNIQUE_ID_piltype14 = internal constant [17 x i8] c"parmtype=pil:int\00", section ".modinfo", align 1
@__UNIQUE_ID_pil15 = internal constant [52 x i8] c"parm=pil:Set current used for pressure measurement.\00", section ".modinfo", align 1
@__param_pressure.46 = internal constant %struct.kernel_param { i8* getelementptr inbounds ([9 x i8], [9 x i8]* @__param_str_pressure.51, i32 0, i32 0), %struct.module* @__this_module, %struct.kernel_param_ops* @param_ops_int, i16 0, i8 -1, i8 0, %union.anon.51 { i8* bitcast (i32* @pressure.34 to i8*) } }, section "__param", align 8
@__UNIQUE_ID_pressuretype16 = internal constant [22 x i8] c"parmtype=pressure:int\00", section ".modinfo", align 1
@__UNIQUE_ID_pressure17 = internal constant [54 x i8] c"parm=pressure:Set threshold for pressure measurement.\00", section ".modinfo", align 1
@__param_delay.47 = internal constant %struct.kernel_param { i8* getelementptr inbounds ([6 x i8], [6 x i8]* @__param_str_delay.50, i32 0, i32 0), %struct.module* @__this_module, %struct.kernel_param_ops* @param_ops_int, i16 0, i8 -1, i8 0, %union.anon.51 { i8* bitcast (i32* @delay.35 to i8*) } }, section "__param", align 8
@__UNIQUE_ID_delaytype18 = internal constant [19 x i8] c"parmtype=delay:int\00", section ".modinfo", align 1
@__UNIQUE_ID_delay19 = internal constant [33 x i8] c"parm=delay:Set adc sample delay.\00", section ".modinfo", align 1
@__param_five_wire = internal constant %struct.kernel_param { i8* getelementptr inbounds ([10 x i8], [10 x i8]* @__param_str_five_wire, i32 0, i32 0), %struct.module* @__this_module, %struct.kernel_param_ops* @param_ops_int, i16 0, i8 -1, i8 0, %union.anon.51 { i8* bitcast (i32* @five_wire to i8*) } }, section "__param", align 8
@__UNIQUE_ID_five_wiretype20 = internal constant [23 x i8] c"parmtype=five_wire:int\00", section ".modinfo", align 1
@__UNIQUE_ID_five_wire21 = internal constant [53 x i8] c"parm=five_wire:Set to '1' to use 5-wire touchscreen.\00", section ".modinfo", align 1
@__param_mask.48 = internal constant %struct.kernel_param { i8* getelementptr inbounds ([5 x i8], [5 x i8]* @__param_str_mask.49, i32 0, i32 0), %struct.module* @__this_module, %struct.kernel_param_ops* @param_ops_int, i16 0, i8 -1, i8 0, %union.anon.51 { i8* bitcast (i32* @mask.37 to i8*) } }, section "__param", align 8
@__UNIQUE_ID_masktype22 = internal constant [18 x i8] c"parmtype=mask:int\00", section ".modinfo", align 1
@__UNIQUE_ID_mask23 = internal constant [33 x i8] c"parm=mask:Set adc mask function.\00", section ".modinfo", align 1
@__param_coord = internal constant %struct.kernel_param { i8* getelementptr inbounds ([6 x i8], [6 x i8]* @__param_str_coord, i32 0, i32 0), %struct.module* @__this_module, %struct.kernel_param_ops* @param_ops_int, i16 0, i8 -1, i8 0, %union.anon.51 { i8* bitcast (i32* @coord to i8*) } }, section "__param", align 8
@__UNIQUE_ID_coordtype24 = internal constant [19 x i8] c"parmtype=coord:int\00", section ".modinfo", align 1
@__UNIQUE_ID_coord25 = internal constant [35 x i8] c"parm=coord:Polling coordinate mode\00", section ".modinfo", align 1
@__ksymtab_wm9712_codec = internal constant %struct.kernel_symbol { i64 ptrtoint ({ i16, i8*, i32 (%struct.wm97xx.679*, i32, i32*)*, i32 (%struct.wm97xx.679*, %struct.exception_table_entry*)*, i32 (%struct.wm97xx.679*, i32)*, void (%struct.wm97xx.679*)*, void (%struct.wm97xx.679*, i32)*, void (%struct.wm97xx.679*)*, void (%struct.wm97xx.679*)* }* @wm9712_codec to i64), i8* getelementptr inbounds ([13 x i8], [13 x i8]* @__kstrtab_wm9712_codec, i32 0, i32 0) }, section "___ksymtab_gpl+wm9712_codec", align 8
@__UNIQUE_ID_author26 = internal constant [43 x i8] c"author=Liam Girdwood <lrg@slimlogic.co.uk>\00", section ".modinfo", align 1
@__UNIQUE_ID_description27 = internal constant [39 x i8] c"description=WM9712 Touch Screen Driver\00", section ".modinfo", align 1
@__UNIQUE_ID_license28 = internal constant [12 x i8] c"license=GPL\00", section ".modinfo", align 1
@__kstrtab_wm9712_codec = internal constant [13 x i8] c"wm9712_codec\00", section "__ksymtab_strings", align 1
@__param_str_coord = internal constant [6 x i8] c"coord\00", align 1
@__param_str_mask.49 = internal constant [5 x i8] c"mask\00", align 1
@__param_str_five_wire = internal constant [10 x i8] c"five_wire\00", align 1
@__param_str_delay.50 = internal constant [6 x i8] c"delay\00", align 1
@__param_str_pressure.51 = internal constant [9 x i8] c"pressure\00", align 1
@__param_str_pil.52 = internal constant [4 x i8] c"pil\00", align 1
@__param_str_rpu = internal constant [4 x i8] c"rpu\00", align 1
@wm9713_codec = global { i16, i8*, i32 (%struct.wm97xx.1078*, i32, i32*)*, i32 (%struct.wm97xx.1078*, %struct.exception_table_entry*)*, i32 (%struct.wm97xx.1078*, i32)*, void (%struct.wm97xx.1078*)*, void (%struct.wm97xx.1078*, i32)*, void (%struct.wm97xx.1078*)*, void (%struct.wm97xx.1078*)* } { i16 19475, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.55, i32 0, i32 0), i32 (%struct.wm97xx.1078*, i32, i32*)* @wm9713_poll_sample, i32 (%struct.wm97xx.1078*, %struct.exception_table_entry*)* @wm9713_poll_touch, i32 (%struct.wm97xx.1078*, i32)* @wm9713_acc_enable, void (%struct.wm97xx.1078*)* @wm9713_phy_init, void (%struct.wm97xx.1078*, i32)* @wm9713_dig_enable, void (%struct.wm97xx.1078*)* @wm9713_dig_restore, void (%struct.wm97xx.1078*)* @wm9713_aux_prepare }, align 8
@.str.55 = private unnamed_addr constant [7 x i8] c"wm9713\00", align 1
@rpu.56 = internal global i32 8, align 4
@.str.6.57 = private unnamed_addr constant [39 x i8] c"setting pen detect pull-up to %d Ohms\0A\00", align 1
@five_wire.58 = internal global i32 0, align 4
@.str.7.59 = private unnamed_addr constant [33 x i8] c"setting 5-wire touchscreen mode.\00", align 1
@pil.60 = internal global i32 0, align 4
@.str.8.61 = private unnamed_addr constant [62 x i8] c"Pressure measurement not supported in 5 wire mode, disabling\0A\00", align 1
@.str.9.62 = private unnamed_addr constant [47 x i8] c"setting pressure measurement current to 400uA.\00", align 1
@.str.10.63 = private unnamed_addr constant [47 x i8] c"setting pressure measurement current to 200uA.\00", align 1
@pressure.64 = internal global i32 192, align 4
@delay.65 = internal global i32 4, align 4
@.str.11.66 = private unnamed_addr constant [29 x i8] c"supplied delay out of range.\00", align 1
@delay_table.67 = internal constant [16 x i32] [i32 21, i32 42, i32 84, i32 167, i32 333, i32 667, i32 1000, i32 1333, i32 2000, i32 2667, i32 3333, i32 4000, i32 4667, i32 5333, i32 6000, i32 0], align 16
@.str.12.68 = private unnamed_addr constant [39 x i8] c"setting adc sample delay to %d u Secs.\00", align 1
@mask.69 = internal global i32 0, align 4
@coord.70 = internal global i32 0, align 4
@wm9713_poll_coord.descriptor = internal global { i8*, i8*, i8*, i8*, i8, i8, i8, i8 } { i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.1.74, i32 0, i32 0), i8* getelementptr inbounds ([18 x i8], [18 x i8]* @__func__.wm9713_poll_coord, i32 0, i32 0), i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.2.75, i32 0, i32 0), i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.3.73, i32 0, i32 0), i8 107, i8 1, i8 0, i8 0 }, section "__verbose", align 8
@.str.3.73 = private unnamed_addr constant [19 x i8] c"adc sample timeout\00", align 1
@.str.1.74 = private unnamed_addr constant [10 x i8] c"wm97xx_ts\00", align 1
@__func__.wm9713_poll_coord = private unnamed_addr constant [18 x i8] c"wm9713_poll_coord\00", align 1
@.str.2.75 = private unnamed_addr constant [35 x i8] c"drivers/input/touchscreen/wm9713.c\00", align 1
@wm9713_poll_sample.descriptor = internal global { i8*, i8*, i8*, i8*, i8, i8, i8, i8 } { i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.1.74, i32 0, i32 0), i8* getelementptr inbounds ([19 x i8], [19 x i8]* @__func__.wm9713_poll_sample, i32 0, i32 0), i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.2.75, i32 0, i32 0), i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.3.73, i32 0, i32 0), i8 42, i8 1, i8 0, i8 0 }, section "__verbose", align 8
@wm9713_poll_sample.descriptor.4 = internal global { i8*, i8*, i8*, i8*, i8, i8, i8, i8 } { i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.1.74, i32 0, i32 0), i8* getelementptr inbounds ([19 x i8], [19 x i8]* @__func__.wm9713_poll_sample, i32 0, i32 0), i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.2.75, i32 0, i32 0), i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.5.76, i32 0, i32 0), i8 54, i8 1, i8 0, i8 0 }, section "__verbose", align 8
@.str.5.76 = private unnamed_addr constant [35 x i8] c"adc wrong sample, wanted %x got %x\00", align 1
@__func__.wm9713_poll_sample = private unnamed_addr constant [19 x i8] c"wm9713_poll_sample\00", align 1
@__param_rpu.78 = internal constant %struct.kernel_param { i8* getelementptr inbounds ([4 x i8], [4 x i8]* @__param_str_rpu.108, i32 0, i32 0), %struct.module* @__this_module, %struct.kernel_param_ops* @param_ops_int, i16 0, i8 -1, i8 0, %union.anon.51 { i8* bitcast (i32* @rpu.56 to i8*) } }, section "__param", align 8
@__UNIQUE_ID_rputype12.79 = internal constant [17 x i8] c"parmtype=rpu:int\00", section ".modinfo", align 1
@__UNIQUE_ID_rpu13.80 = internal constant [55 x i8] c"parm=rpu:Set internal pull up resistor for pen detect.\00", section ".modinfo", align 1
@__param_pil.81 = internal constant %struct.kernel_param { i8* getelementptr inbounds ([4 x i8], [4 x i8]* @__param_str_pil.107, i32 0, i32 0), %struct.module* @__this_module, %struct.kernel_param_ops* @param_ops_int, i16 0, i8 -1, i8 0, %union.anon.51 { i8* bitcast (i32* @pil.60 to i8*) } }, section "__param", align 8
@__UNIQUE_ID_piltype14.82 = internal constant [17 x i8] c"parmtype=pil:int\00", section ".modinfo", align 1
@__UNIQUE_ID_pil15.83 = internal constant [52 x i8] c"parm=pil:Set current used for pressure measurement.\00", section ".modinfo", align 1
@__param_pressure.84 = internal constant %struct.kernel_param { i8* getelementptr inbounds ([9 x i8], [9 x i8]* @__param_str_pressure.106, i32 0, i32 0), %struct.module* @__this_module, %struct.kernel_param_ops* @param_ops_int, i16 0, i8 -1, i8 0, %union.anon.51 { i8* bitcast (i32* @pressure.64 to i8*) } }, section "__param", align 8
@__UNIQUE_ID_pressuretype16.85 = internal constant [22 x i8] c"parmtype=pressure:int\00", section ".modinfo", align 1
@__UNIQUE_ID_pressure17.86 = internal constant [54 x i8] c"parm=pressure:Set threshold for pressure measurement.\00", section ".modinfo", align 1
@__param_delay.87 = internal constant %struct.kernel_param { i8* getelementptr inbounds ([6 x i8], [6 x i8]* @__param_str_delay.105, i32 0, i32 0), %struct.module* @__this_module, %struct.kernel_param_ops* @param_ops_int, i16 0, i8 -1, i8 0, %union.anon.51 { i8* bitcast (i32* @delay.65 to i8*) } }, section "__param", align 8
@__UNIQUE_ID_delaytype18.88 = internal constant [19 x i8] c"parmtype=delay:int\00", section ".modinfo", align 1
@__UNIQUE_ID_delay19.89 = internal constant [33 x i8] c"parm=delay:Set adc sample delay.\00", section ".modinfo", align 1
@__param_five_wire.90 = internal constant %struct.kernel_param { i8* getelementptr inbounds ([10 x i8], [10 x i8]* @__param_str_five_wire.104, i32 0, i32 0), %struct.module* @__this_module, %struct.kernel_param_ops* @param_ops_int, i16 0, i8 -1, i8 0, %union.anon.51 { i8* bitcast (i32* @five_wire.58 to i8*) } }, section "__param", align 8
@__UNIQUE_ID_five_wiretype20.91 = internal constant [23 x i8] c"parmtype=five_wire:int\00", section ".modinfo", align 1
@__UNIQUE_ID_five_wire21.92 = internal constant [53 x i8] c"parm=five_wire:Set to '1' to use 5-wire touchscreen.\00", section ".modinfo", align 1
@__param_mask.93 = internal constant %struct.kernel_param { i8* getelementptr inbounds ([5 x i8], [5 x i8]* @__param_str_mask.103, i32 0, i32 0), %struct.module* @__this_module, %struct.kernel_param_ops* @param_ops_int, i16 0, i8 -1, i8 0, %union.anon.51 { i8* bitcast (i32* @mask.69 to i8*) } }, section "__param", align 8
@__UNIQUE_ID_masktype22.94 = internal constant [18 x i8] c"parmtype=mask:int\00", section ".modinfo", align 1
@__UNIQUE_ID_mask23.95 = internal constant [33 x i8] c"parm=mask:Set adc mask function.\00", section ".modinfo", align 1
@__param_coord.96 = internal constant %struct.kernel_param { i8* getelementptr inbounds ([6 x i8], [6 x i8]* @__param_str_coord.102, i32 0, i32 0), %struct.module* @__this_module, %struct.kernel_param_ops* @param_ops_int, i16 0, i8 -1, i8 0, %union.anon.51 { i8* bitcast (i32* @coord.70 to i8*) } }, section "__param", align 8
@__UNIQUE_ID_coordtype24.97 = internal constant [19 x i8] c"parmtype=coord:int\00", section ".modinfo", align 1
@__UNIQUE_ID_coord25.98 = internal constant [35 x i8] c"parm=coord:Polling coordinate mode\00", section ".modinfo", align 1
@__ksymtab_wm9713_codec = internal constant %struct.kernel_symbol { i64 ptrtoint ({ i16, i8*, i32 (%struct.wm97xx.1078*, i32, i32*)*, i32 (%struct.wm97xx.1078*, %struct.exception_table_entry*)*, i32 (%struct.wm97xx.1078*, i32)*, void (%struct.wm97xx.1078*)*, void (%struct.wm97xx.1078*, i32)*, void (%struct.wm97xx.1078*)*, void (%struct.wm97xx.1078*)* }* @wm9713_codec to i64), i8* getelementptr inbounds ([13 x i8], [13 x i8]* @__kstrtab_wm9713_codec, i32 0, i32 0) }, section "___ksymtab_gpl+wm9713_codec", align 8
@__UNIQUE_ID_author26.99 = internal constant [43 x i8] c"author=Liam Girdwood <lrg@slimlogic.co.uk>\00", section ".modinfo", align 1
@__UNIQUE_ID_description27.100 = internal constant [39 x i8] c"description=WM9713 Touch Screen Driver\00", section ".modinfo", align 1
@__UNIQUE_ID_license28.101 = internal constant [12 x i8] c"license=GPL\00", section ".modinfo", align 1
@__kstrtab_wm9713_codec = internal constant [13 x i8] c"wm9713_codec\00", section "__ksymtab_strings", align 1
@__param_str_coord.102 = internal constant [6 x i8] c"coord\00", align 1
@__param_str_mask.103 = internal constant [5 x i8] c"mask\00", align 1
@__param_str_five_wire.104 = internal constant [10 x i8] c"five_wire\00", align 1
@__param_str_delay.105 = internal constant [6 x i8] c"delay\00", align 1
@__param_str_pressure.106 = internal constant [9 x i8] c"pressure\00", align 1
@__param_str_pil.107 = internal constant [4 x i8] c"pil\00", align 1
@__param_str_rpu.108 = internal constant [4 x i8] c"rpu\00", align 1

@init_module = alias i32 (), i32 ()* @wm97xx_init
@cleanup_module = alias void (), void ()* @wm97xx_exit

; Function Attrs: nounwind uwtable
define void @wm97xx_unregister_mach_ops(%struct.wm97xx* %wm) #0 {
entry:
  %codec_mutex = getelementptr inbounds %struct.wm97xx, %struct.wm97xx* %wm, i32 0, i32 12
  call void @mutex_lock_nested(%struct.mutex* %codec_mutex, i32 0)
  %mach_ops = getelementptr inbounds %struct.wm97xx, %struct.wm97xx* %wm, i32 0, i32 11
  store %struct.wm97xx_mach_ops* null, %struct.wm97xx_mach_ops** %mach_ops, align 8, !tbaa !2
  %codec_mutex1 = getelementptr inbounds %struct.wm97xx, %struct.wm97xx* %wm, i32 0, i32 12
  call void @mutex_unlock(%struct.mutex* %codec_mutex1)
  ret void
}

declare void @mutex_lock_nested(%struct.mutex*, i32) #1

declare void @mutex_unlock(%struct.mutex*) #1

; Function Attrs: nounwind uwtable
define i32 @wm97xx_register_mach_ops(%struct.wm97xx* %wm, %struct.wm97xx_mach_ops* %mach_ops) #0 {
entry:
  %codec_mutex = getelementptr inbounds %struct.wm97xx, %struct.wm97xx* %wm, i32 0, i32 12
  call void @mutex_lock_nested(%struct.mutex* %codec_mutex, i32 0)
  %mach_ops1 = getelementptr inbounds %struct.wm97xx, %struct.wm97xx* %wm, i32 0, i32 11
  %0 = load %struct.wm97xx_mach_ops*, %struct.wm97xx_mach_ops** %mach_ops1, align 8, !tbaa !2
  %tobool = icmp ne %struct.wm97xx_mach_ops* %0, null
  br i1 %tobool, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %codec_mutex2 = getelementptr inbounds %struct.wm97xx, %struct.wm97xx* %wm, i32 0, i32 12
  call void @mutex_unlock(%struct.mutex* %codec_mutex2)
  br label %return

if.end:                                           ; preds = %entry
  %mach_ops3 = getelementptr inbounds %struct.wm97xx, %struct.wm97xx* %wm, i32 0, i32 11
  store %struct.wm97xx_mach_ops* %mach_ops, %struct.wm97xx_mach_ops** %mach_ops3, align 8, !tbaa !2
  %codec_mutex4 = getelementptr inbounds %struct.wm97xx, %struct.wm97xx* %wm, i32 0, i32 12
  call void @mutex_unlock(%struct.mutex* %codec_mutex4)
  br label %return

return:                                           ; preds = %if.end, %if.then
  %retval.0 = phi i32 [ -22, %if.then ], [ 0, %if.end ]
  ret i32 %retval.0
}

; Function Attrs: nounwind uwtable
define void @wm97xx_set_suspend_mode(%struct.wm97xx* %wm, i16 zeroext %mode) #0 {
entry:
  %suspend_mode = getelementptr inbounds %struct.wm97xx, %struct.wm97xx* %wm, i32 0, i32 23
  store i16 %mode, i16* %suspend_mode, align 8, !tbaa !21
  %input_dev = getelementptr inbounds %struct.wm97xx, %struct.wm97xx* %wm, i32 0, i32 6
  %0 = load %struct.input_dev*, %struct.input_dev** %input_dev, align 8, !tbaa !22
  %dev = getelementptr inbounds %struct.input_dev, %struct.input_dev* %0, i32 0, i32 39
  %conv = zext i16 %mode to i32
  %cmp = icmp ne i32 %conv, 0
  %call = call i32 @device_init_wakeup(%struct.device* %dev, i1 zeroext %cmp)
  ret void
}

declare i32 @device_init_wakeup(%struct.device*, i1 zeroext) #1

; Function Attrs: nounwind uwtable
define void @wm97xx_config_gpio(%struct.wm97xx* %wm, i32 %gpio, i32 %dir, i32 %pol, i32 %sticky, i32 %wake) #0 {
entry:
  %codec_mutex = getelementptr inbounds %struct.wm97xx, %struct.wm97xx* %wm, i32 0, i32 12
  call void @mutex_lock_nested(%struct.mutex* %codec_mutex, i32 0)
  %call = call i32 @wm97xx_reg_read(%struct.wm97xx* %wm, i16 zeroext 78)
  %conv = trunc i32 %call to i16
  %cmp = icmp eq i32 %pol, 0
  br i1 %cmp, label %if.then, label %if.else

if.then:                                          ; preds = %entry
  %conv2 = zext i16 %conv to i32
  %or = or i32 %conv2, %gpio
  br label %if.end

if.else:                                          ; preds = %entry
  %neg = xor i32 %gpio, -1
  %conv4 = zext i16 %conv to i32
  %and = and i32 %conv4, %neg
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then
  %and.sink = phi i32 [ %and, %if.else ], [ %or, %if.then ]
  %conv5 = trunc i32 %and.sink to i16
  call void @wm97xx_reg_write(%struct.wm97xx* %wm, i16 zeroext 78, i16 zeroext %conv5)
  %call6 = call i32 @wm97xx_reg_read(%struct.wm97xx* %wm, i16 zeroext 80)
  %conv7 = trunc i32 %call6 to i16
  %cmp8 = icmp eq i32 %sticky, 0
  br i1 %cmp8, label %if.then10, label %if.else14

if.then10:                                        ; preds = %if.end
  %conv11 = zext i16 %conv7 to i32
  %or12 = or i32 %conv11, %gpio
  br label %if.end19

if.else14:                                        ; preds = %if.end
  %neg15 = xor i32 %gpio, -1
  %conv16 = zext i16 %conv7 to i32
  %and17 = and i32 %conv16, %neg15
  br label %if.end19

if.end19:                                         ; preds = %if.else14, %if.then10
  %and17.sink = phi i32 [ %and17, %if.else14 ], [ %or12, %if.then10 ]
  %conv18 = trunc i32 %and17.sink to i16
  call void @wm97xx_reg_write(%struct.wm97xx* %wm, i16 zeroext 80, i16 zeroext %conv18)
  %call20 = call i32 @wm97xx_reg_read(%struct.wm97xx* %wm, i16 zeroext 82)
  %conv21 = trunc i32 %call20 to i16
  %cmp22 = icmp eq i32 %wake, 0
  br i1 %cmp22, label %if.then24, label %if.else28

if.then24:                                        ; preds = %if.end19
  %conv25 = zext i16 %conv21 to i32
  %or26 = or i32 %conv25, %gpio
  br label %if.end33

if.else28:                                        ; preds = %if.end19
  %neg29 = xor i32 %gpio, -1
  %conv30 = zext i16 %conv21 to i32
  %and31 = and i32 %conv30, %neg29
  br label %if.end33

if.end33:                                         ; preds = %if.else28, %if.then24
  %and31.sink = phi i32 [ %and31, %if.else28 ], [ %or26, %if.then24 ]
  %conv32 = trunc i32 %and31.sink to i16
  call void @wm97xx_reg_write(%struct.wm97xx* %wm, i16 zeroext 82, i16 zeroext %conv32)
  %call34 = call i32 @wm97xx_reg_read(%struct.wm97xx* %wm, i16 zeroext 76)
  %conv35 = trunc i32 %call34 to i16
  %cmp36 = icmp eq i32 %dir, 0
  br i1 %cmp36, label %if.then38, label %if.else42

if.then38:                                        ; preds = %if.end33
  %conv39 = zext i16 %conv35 to i32
  %or40 = or i32 %conv39, %gpio
  br label %if.end47

if.else42:                                        ; preds = %if.end33
  %neg43 = xor i32 %gpio, -1
  %conv44 = zext i16 %conv35 to i32
  %and45 = and i32 %conv44, %neg43
  br label %if.end47

if.end47:                                         ; preds = %if.else42, %if.then38
  %and45.sink = phi i32 [ %and45, %if.else42 ], [ %or40, %if.then38 ]
  %conv46 = trunc i32 %and45.sink to i16
  call void @wm97xx_reg_write(%struct.wm97xx* %wm, i16 zeroext 76, i16 zeroext %conv46)
  %codec_mutex48 = getelementptr inbounds %struct.wm97xx, %struct.wm97xx* %wm, i32 0, i32 12
  call void @mutex_unlock(%struct.mutex* %codec_mutex48)
  ret void
}

; Function Attrs: nounwind uwtable
declare i32 @wm97xx_reg_read(%struct.wm97xx*, i16 zeroext) #0

; Function Attrs: nounwind uwtable
declare void @wm97xx_reg_write(%struct.wm97xx*, i16 zeroext, i16 zeroext) #0

; Function Attrs: nounwind uwtable
define void @wm97xx_set_gpio(%struct.wm97xx* %wm, i32 %gpio, i32 %status) #0 {
entry:
  %codec_mutex = getelementptr inbounds %struct.wm97xx, %struct.wm97xx* %wm, i32 0, i32 12
  call void @mutex_lock_nested(%struct.mutex* %codec_mutex, i32 0)
  %call = call i32 @wm97xx_reg_read(%struct.wm97xx* %wm, i16 zeroext 84)
  %conv = trunc i32 %call to i16
  %cmp = icmp eq i32 %status, 0
  br i1 %cmp, label %if.then, label %if.else

if.then:                                          ; preds = %entry
  %conv2 = zext i16 %conv to i32
  %or = or i32 %conv2, %gpio
  br label %if.end

if.else:                                          ; preds = %entry
  %neg = xor i32 %gpio, -1
  %conv4 = zext i16 %conv to i32
  %and = and i32 %conv4, %neg
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then
  %and.sink = phi i32 [ %and, %if.else ], [ %or, %if.then ]
  %conv5 = trunc i32 %and.sink to i16
  %id = getelementptr inbounds %struct.wm97xx, %struct.wm97xx* %wm, i32 0, i32 1
  %0 = load i16, i16* %id, align 2, !tbaa !23
  %conv6 = zext i16 %0 to i32
  %cmp7 = icmp eq i32 %conv6, 19474
  br i1 %cmp7, label %land.lhs.true, label %if.else15

land.lhs.true:                                    ; preds = %if.end
  %variant = getelementptr inbounds %struct.wm97xx, %struct.wm97xx* %wm, i32 0, i32 22
  %1 = load i16, i16* %variant, align 2, !tbaa !24
  %conv9 = zext i16 %1 to i32
  %cmp10 = icmp ne i32 %conv9, 5651
  br i1 %cmp10, label %if.then12, label %if.else15

if.then12:                                        ; preds = %land.lhs.true
  %conv13 = zext i16 %conv5 to i32
  %shl = shl i32 %conv13, 1
  %conv14 = trunc i32 %shl to i16
  call void @wm97xx_reg_write(%struct.wm97xx* %wm, i16 zeroext 84, i16 zeroext %conv14)
  br label %if.end16

if.else15:                                        ; preds = %land.lhs.true, %if.end
  call void @wm97xx_reg_write(%struct.wm97xx* %wm, i16 zeroext 84, i16 zeroext %conv5)
  br label %if.end16

if.end16:                                         ; preds = %if.else15, %if.then12
  %codec_mutex17 = getelementptr inbounds %struct.wm97xx, %struct.wm97xx* %wm, i32 0, i32 12
  call void @mutex_unlock(%struct.mutex* %codec_mutex17)
  ret void
}

; Function Attrs: nounwind uwtable
define i32 @wm97xx_get_gpio(%struct.wm97xx* %wm, i32 %gpio) #0 {
entry:
  %codec_mutex = getelementptr inbounds %struct.wm97xx, %struct.wm97xx* %wm, i32 0, i32 12
  call void @mutex_lock_nested(%struct.mutex* %codec_mutex, i32 0)
  %call = call i32 @wm97xx_reg_read(%struct.wm97xx* %wm, i16 zeroext 84)
  %conv = trunc i32 %call to i16
  %conv1 = zext i16 %conv to i32
  %and = and i32 %conv1, %gpio
  %tobool = icmp ne i32 %and, 0
  %. = select i1 %tobool, i32 0, i32 1
  %codec_mutex2 = getelementptr inbounds %struct.wm97xx, %struct.wm97xx* %wm, i32 0, i32 12
  call void @mutex_unlock(%struct.mutex* %codec_mutex2)
  ret i32 %.
}

; Function Attrs: nounwind uwtable
define i32 @wm97xx_read_aux_adc(%struct.wm97xx* %wm, i16 zeroext %adcsel) #0 {
entry:
  %auxval = alloca i32, align 4
  %codec_mutex = getelementptr inbounds %struct.wm97xx, %struct.wm97xx* %wm, i32 0, i32 12
  call void @mutex_lock_nested(%struct.mutex* %codec_mutex, i32 0)
  %id = getelementptr inbounds %struct.wm97xx, %struct.wm97xx* %wm, i32 0, i32 1
  %0 = load i16, i16* %id, align 2, !tbaa !23
  %conv = zext i16 %0 to i32
  %cmp = icmp eq i32 %conv, 19475
  br i1 %cmp, label %land.lhs.true, label %if.end

land.lhs.true:                                    ; preds = %entry
  %call = call i32 @wm97xx_reg_read(%struct.wm97xx* %wm, i16 zeroext 60)
  %conv2 = trunc i32 %call to i16
  %conv3 = zext i16 %conv2 to i32
  %and = and i32 %conv3, 32768
  %tobool = icmp ne i32 %and, 0
  br i1 %tobool, label %if.then, label %if.end

if.then:                                          ; preds = %land.lhs.true
  %conv4 = zext i16 %conv2 to i32
  %and5 = and i32 %conv4, 32767
  %conv6 = trunc i32 %and5 to i16
  call void @wm97xx_reg_write(%struct.wm97xx* %wm, i16 zeroext 60, i16 zeroext %conv6)
  br label %if.end

if.end:                                           ; preds = %if.then, %land.lhs.true, %entry
  %power.0 = phi i16 [ %conv2, %if.then ], [ %conv2, %land.lhs.true ], [ 0, %entry ]
  %power_adc.0 = phi i32 [ 1, %if.then ], [ 0, %land.lhs.true ], [ 0, %entry ]
  %codec = getelementptr inbounds %struct.wm97xx, %struct.wm97xx* %wm, i32 0, i32 5
  %1 = load %struct.wm97xx_codec_drv*, %struct.wm97xx_codec_drv** %codec, align 8, !tbaa !25
  %aux_prepare = getelementptr inbounds %struct.wm97xx_codec_drv, %struct.wm97xx_codec_drv* %1, i32 0, i32 8
  %2 = load void (%struct.wm97xx*)*, void (%struct.wm97xx*)** %aux_prepare, align 8, !tbaa !26
  call void %2(%struct.wm97xx* %wm)
  %pen_probably_down = getelementptr inbounds %struct.wm97xx, %struct.wm97xx* %wm, i32 0, i32 21
  %bf.load = load i8, i8* %pen_probably_down, align 4
  %bf.clear = and i8 %bf.load, -5
  %bf.set = or i8 %bf.clear, 4
  store i8 %bf.set, i8* %pen_probably_down, align 4
  br label %while.cond

while.cond:                                       ; preds = %while.body, %if.end
  %rc.0 = phi i32 [ 0, %if.end ], [ %call13, %while.body ]
  %timeout.0 = phi i32 [ 0, %if.end ], [ %timeout.1, %while.body ]
  %cmp7 = icmp ne i32 %rc.0, 2
  %inc = add nsw i32 %timeout.0, 1
  %cmp9 = icmp slt i32 %timeout.0, 5
  %timeout.1 = select i1 %cmp7, i32 %inc, i32 %timeout.0
  %3 = select i1 %cmp7, i1 %cmp9, i1 false
  br i1 %3, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %codec11 = getelementptr inbounds %struct.wm97xx, %struct.wm97xx* %wm, i32 0, i32 5
  %4 = load %struct.wm97xx_codec_drv*, %struct.wm97xx_codec_drv** %codec11, align 8, !tbaa !25
  %poll_sample = getelementptr inbounds %struct.wm97xx_codec_drv, %struct.wm97xx_codec_drv* %4, i32 0, i32 2
  %5 = load i32 (%struct.wm97xx*, i32, i32*)*, i32 (%struct.wm97xx*, i32, i32*)** %poll_sample, align 8, !tbaa !28
  %conv12 = zext i16 %adcsel to i32
  %call13 = call i32 %5(%struct.wm97xx* %wm, i32 %conv12, i32* %auxval)
  br label %while.cond

while.end:                                        ; preds = %while.cond
  %tobool14 = icmp ne i32 %power_adc.0, 0
  br i1 %tobool14, label %if.then15, label %if.end18

if.then15:                                        ; preds = %while.end
  %conv16 = zext i16 %power.0 to i32
  %or = or i32 %conv16, 32768
  %conv17 = trunc i32 %or to i16
  call void @wm97xx_reg_write(%struct.wm97xx* %wm, i16 zeroext 60, i16 zeroext %conv17)
  br label %if.end18

if.end18:                                         ; preds = %if.then15, %while.end
  %codec19 = getelementptr inbounds %struct.wm97xx, %struct.wm97xx* %wm, i32 0, i32 5
  %6 = load %struct.wm97xx_codec_drv*, %struct.wm97xx_codec_drv** %codec19, align 8, !tbaa !25
  %dig_restore = getelementptr inbounds %struct.wm97xx_codec_drv, %struct.wm97xx_codec_drv* %6, i32 0, i32 7
  %7 = load void (%struct.wm97xx*)*, void (%struct.wm97xx*)** %dig_restore, align 8, !tbaa !29
  call void %7(%struct.wm97xx* %wm)
  %pen_probably_down20 = getelementptr inbounds %struct.wm97xx, %struct.wm97xx* %wm, i32 0, i32 21
  %bf.load21 = load i8, i8* %pen_probably_down20, align 4
  %bf.clear22 = and i8 %bf.load21, -5
  store i8 %bf.clear22, i8* %pen_probably_down20, align 4
  %cmp23 = icmp sge i32 %timeout.1, 5
  br i1 %cmp23, label %if.then25, label %if.end28

if.then25:                                        ; preds = %if.end18
  call void (%struct.device*, i8*, ...) @dev_err(%struct.device* null, i8* null)
  %codec27 = getelementptr inbounds %struct.wm97xx, %struct.wm97xx* %wm, i32 0, i32 5
  %8 = load %struct.wm97xx_codec_drv*, %struct.wm97xx_codec_drv** %codec27, align 8, !tbaa !25
  %dig_enable = getelementptr inbounds %struct.wm97xx_codec_drv, %struct.wm97xx_codec_drv* %8, i32 0, i32 6
  %9 = load void (%struct.wm97xx*, i32)*, void (%struct.wm97xx*, i32)** %dig_enable, align 8, !tbaa !30
  call void %9(%struct.wm97xx* %wm, i32 0)
  br label %if.end28

if.end28:                                         ; preds = %if.then25, %if.end18
  %codec_mutex29 = getelementptr inbounds %struct.wm97xx, %struct.wm97xx* %wm, i32 0, i32 12
  call void @mutex_unlock(%struct.mutex* %codec_mutex29)
  %cmp30 = icmp eq i32 %rc.0, 2
  %10 = load i32, i32* %auxval, align 4
  %and32 = and i32 %10, 4095
  %cond = select i1 %cmp30, i32 %and32, i32 -16
  ret i32 %cond
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64, i8* nocapture) #2

declare void @dev_err(%struct.device*, i8*, ...) #1

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64, i8* nocapture) #2

; Function Attrs: nounwind uwtable
define internal i32 @wm97xx_init() #3 section ".init.text" {
entry:
  %call = call i32 @driver_register(%struct.device_driver* @wm97xx_driver)
  ret i32 %call
}

declare i32 @driver_register(%struct.device_driver*) #1

; Function Attrs: nounwind uwtable
define internal i32 @wm97xx_probe(%struct.device* %dev) #0 {
entry:
  %call = call i8* @dev_get_platdata(%struct.device* %dev)
  %0 = bitcast i8* %call to %struct.wm97xx_pdata*
  %call1 = call i8* @kzalloc(i64 568, i32 20971712)
  %1 = bitcast i8* %call1 to %struct.wm97xx*
  %tobool = icmp ne %struct.wm97xx* %1, null
  br i1 %tobool, label %do.body, label %cleanup

do.body:                                          ; preds = %entry
  %codec_mutex = getelementptr inbounds %struct.wm97xx, %struct.wm97xx* %1, i32 0, i32 12
  call void @__mutex_init(%struct.mutex* %codec_mutex, i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.2, i32 0, i32 0), %struct.lock_class_key* @wm97xx_probe.__key)
  %dev2 = getelementptr inbounds %struct.wm97xx, %struct.wm97xx* %1, i32 0, i32 8
  store %struct.device* %dev, %struct.device** %dev2, align 8, !tbaa !31
  %2 = bitcast %struct.wm97xx* %1 to i8*
  call void @dev_set_drvdata(%struct.device* %dev, i8* %2)
  %3 = bitcast %struct.device* %dev to i8*
  %add.ptr = getelementptr inbounds i8, i8* %3, i64 -952
  %4 = bitcast i8* %add.ptr to %struct.snd_ac97*
  %ac97 = getelementptr inbounds %struct.wm97xx, %struct.wm97xx* %1, i32 0, i32 7
  store %struct.snd_ac97* %4, %struct.snd_ac97** %ac97, align 8, !tbaa !32
  %call3 = call i32 @wm97xx_reg_read(%struct.wm97xx* %1, i16 zeroext 124)
  %cmp = icmp ne i32 %call3, 22349
  br i1 %cmp, label %if.then4, label %if.end5

if.then4:                                         ; preds = %do.body
  call void (%struct.device*, i8*, ...) @dev_err(%struct.device* null, i8* null)
  br label %alloc_err

if.end5:                                          ; preds = %do.body
  %call6 = call i32 @wm97xx_reg_read(%struct.wm97xx* %1, i16 zeroext 126)
  %conv = trunc i32 %call6 to i16
  %id7 = getelementptr inbounds %struct.wm97xx, %struct.wm97xx* %1, i32 0, i32 1
  store i16 %conv, i16* %id7, align 2, !tbaa !23
  %variant = getelementptr inbounds %struct.wm97xx, %struct.wm97xx* %1, i32 0, i32 22
  store i16 0, i16* %variant, align 2, !tbaa !24
  call void (%struct.device*, i8*, ...) @_dev_info(%struct.device* null, i8* null)
  %id11 = getelementptr inbounds %struct.wm97xx, %struct.wm97xx* %1, i32 0, i32 1
  %5 = load i16, i16* %id11, align 2, !tbaa !23
  %conv12 = zext i16 %5 to i32
  %and13 = and i32 %conv12, 255
  %Pivot4 = icmp slt i32 %and13, 18
  br i1 %Pivot4, label %LeafBlock, label %NodeBlock

NodeBlock:                                        ; preds = %if.end5
  %Pivot = icmp slt i32 %and13, 19
  br i1 %Pivot, label %sw.epilog, label %LeafBlock1

LeafBlock1:                                       ; preds = %NodeBlock
  %SwitchLeaf2 = icmp eq i32 %and13, 19
  br i1 %SwitchLeaf2, label %sw.epilog, label %sw.default

LeafBlock:                                        ; preds = %if.end5
  %SwitchLeaf = icmp eq i32 %and13, 5
  br i1 %SwitchLeaf, label %sw.epilog, label %sw.default

sw.default:                                       ; preds = %LeafBlock, %LeafBlock1
  call void (%struct.device*, i8*, ...) @dev_err(%struct.device* null, i8* null)
  br label %alloc_err

sw.epilog:                                        ; preds = %LeafBlock, %LeafBlock1, %NodeBlock
  %wm9713_codec.sink = phi %struct.wm97xx_codec_drv* [ bitcast ({ i16, i8*, i32 (%struct.wm97xx.679*, i32, i32*)*, i32 (%struct.wm97xx.679*, %struct.exception_table_entry*)*, i32 (%struct.wm97xx.679*, i32)*, void (%struct.wm97xx.679*)*, void (%struct.wm97xx.679*, i32)*, void (%struct.wm97xx.679*)*, void (%struct.wm97xx.679*)* }* @wm9712_codec to %struct.wm97xx_codec_drv*), %NodeBlock ], [ bitcast ({ i16, i8*, i32 (%struct.wm97xx.1078*, i32, i32*)*, i32 (%struct.wm97xx.1078*, %struct.exception_table_entry*)*, i32 (%struct.wm97xx.1078*, i32)*, void (%struct.wm97xx.1078*)*, void (%struct.wm97xx.1078*, i32)*, void (%struct.wm97xx.1078*)*, void (%struct.wm97xx.1078*)* }* @wm9713_codec to %struct.wm97xx_codec_drv*), %LeafBlock1 ], [ bitcast ({ i16, i8*, i32 (%struct.wm97xx.280*, i32, i32*)*, i32 (%struct.wm97xx.280*, %struct.exception_table_entry*)*, i32 (%struct.wm97xx.280*, i32)*, void (%struct.wm97xx.280*)*, void (%struct.wm97xx.280*, i32)*, void (%struct.wm97xx.280*)*, void (%struct.wm97xx.280*)* }* @wm9705_codec to %struct.wm97xx_codec_drv*), %LeafBlock ]
  %codec17 = getelementptr inbounds %struct.wm97xx, %struct.wm97xx* %1, i32 0, i32 5
  store %struct.wm97xx_codec_drv* %wm9713_codec.sink, %struct.wm97xx_codec_drv** %codec17, align 8, !tbaa !25
  %codec22 = getelementptr inbounds %struct.wm97xx, %struct.wm97xx* %1, i32 0, i32 5
  %6 = load %struct.wm97xx_codec_drv*, %struct.wm97xx_codec_drv** %codec22, align 8, !tbaa !25
  %phy_init = getelementptr inbounds %struct.wm97xx_codec_drv, %struct.wm97xx_codec_drv* %6, i32 0, i32 5
  %7 = load void (%struct.wm97xx*)*, void (%struct.wm97xx*)** %phy_init, align 8, !tbaa !33
  call void %7(%struct.wm97xx* %1)
  %call23 = call i32 @wm97xx_reg_read(%struct.wm97xx* %1, i16 zeroext 76)
  %conv24 = trunc i32 %call23 to i16
  %gpio = getelementptr inbounds %struct.wm97xx, %struct.wm97xx* %1, i32 0, i32 2
  %arrayidx = getelementptr inbounds [6 x i16], [6 x i16]* %gpio, i64 0, i64 0
  store i16 %conv24, i16* %arrayidx, align 8, !tbaa !34
  %call25 = call i32 @wm97xx_reg_read(%struct.wm97xx* %1, i16 zeroext 78)
  %conv26 = trunc i32 %call25 to i16
  %gpio27 = getelementptr inbounds %struct.wm97xx, %struct.wm97xx* %1, i32 0, i32 2
  %arrayidx28 = getelementptr inbounds [6 x i16], [6 x i16]* %gpio27, i64 0, i64 1
  store i16 %conv26, i16* %arrayidx28, align 2, !tbaa !34
  %call29 = call i32 @wm97xx_reg_read(%struct.wm97xx* %1, i16 zeroext 80)
  %conv30 = trunc i32 %call29 to i16
  %gpio31 = getelementptr inbounds %struct.wm97xx, %struct.wm97xx* %1, i32 0, i32 2
  %arrayidx32 = getelementptr inbounds [6 x i16], [6 x i16]* %gpio31, i64 0, i64 2
  store i16 %conv30, i16* %arrayidx32, align 4, !tbaa !34
  %call33 = call i32 @wm97xx_reg_read(%struct.wm97xx* %1, i16 zeroext 82)
  %conv34 = trunc i32 %call33 to i16
  %gpio35 = getelementptr inbounds %struct.wm97xx, %struct.wm97xx* %1, i32 0, i32 2
  %arrayidx36 = getelementptr inbounds [6 x i16], [6 x i16]* %gpio35, i64 0, i64 3
  store i16 %conv34, i16* %arrayidx36, align 2, !tbaa !34
  %call37 = call i32 @wm97xx_reg_read(%struct.wm97xx* %1, i16 zeroext 84)
  %conv38 = trunc i32 %call37 to i16
  %gpio39 = getelementptr inbounds %struct.wm97xx, %struct.wm97xx* %1, i32 0, i32 2
  %arrayidx40 = getelementptr inbounds [6 x i16], [6 x i16]* %gpio39, i64 0, i64 4
  store i16 %conv38, i16* %arrayidx40, align 8, !tbaa !34
  %call41 = call i32 @wm97xx_reg_read(%struct.wm97xx* %1, i16 zeroext 86)
  %conv42 = trunc i32 %call41 to i16
  %gpio43 = getelementptr inbounds %struct.wm97xx, %struct.wm97xx* %1, i32 0, i32 2
  %arrayidx44 = getelementptr inbounds [6 x i16], [6 x i16]* %gpio43, i64 0, i64 5
  store i16 %conv42, i16* %arrayidx44, align 2, !tbaa !34
  %call45 = call %struct.input_dev* @input_allocate_device()
  %input_dev = getelementptr inbounds %struct.wm97xx, %struct.wm97xx* %1, i32 0, i32 6
  store %struct.input_dev* %call45, %struct.input_dev** %input_dev, align 8, !tbaa !22
  %input_dev46 = getelementptr inbounds %struct.wm97xx, %struct.wm97xx* %1, i32 0, i32 6
  %8 = load %struct.input_dev*, %struct.input_dev** %input_dev46, align 8, !tbaa !22
  %cmp47 = icmp eq %struct.input_dev* %8, null
  br i1 %cmp47, label %alloc_err, label %if.end50

if.end50:                                         ; preds = %sw.epilog
  %input_dev51 = getelementptr inbounds %struct.wm97xx, %struct.wm97xx* %1, i32 0, i32 6
  %9 = load %struct.input_dev*, %struct.input_dev** %input_dev51, align 8, !tbaa !22
  %name = getelementptr inbounds %struct.input_dev, %struct.input_dev* %9, i32 0, i32 0
  store i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.6, i32 0, i32 0), i8** %name, align 8, !tbaa !35
  %input_dev52 = getelementptr inbounds %struct.wm97xx, %struct.wm97xx* %1, i32 0, i32 6
  %10 = load %struct.input_dev*, %struct.input_dev** %input_dev52, align 8, !tbaa !22
  %phys = getelementptr inbounds %struct.input_dev, %struct.input_dev* %10, i32 0, i32 1
  store i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.7, i32 0, i32 0), i8** %phys, align 8, !tbaa !51
  %input_dev53 = getelementptr inbounds %struct.wm97xx, %struct.wm97xx* %1, i32 0, i32 6
  %11 = load %struct.input_dev*, %struct.input_dev** %input_dev53, align 8, !tbaa !22
  %open = getelementptr inbounds %struct.input_dev, %struct.input_dev* %11, i32 0, i32 30
  store i32 (%struct.input_dev*)* @wm97xx_ts_input_open, i32 (%struct.input_dev*)** %open, align 8, !tbaa !52
  %input_dev54 = getelementptr inbounds %struct.wm97xx, %struct.wm97xx* %1, i32 0, i32 6
  %12 = load %struct.input_dev*, %struct.input_dev** %input_dev54, align 8, !tbaa !22
  %close = getelementptr inbounds %struct.input_dev, %struct.input_dev* %12, i32 0, i32 31
  store void (%struct.input_dev*)* @wm97xx_ts_input_close, void (%struct.input_dev*)** %close, align 8, !tbaa !53
  %input_dev55 = getelementptr inbounds %struct.wm97xx, %struct.wm97xx* %1, i32 0, i32 6
  %13 = load %struct.input_dev*, %struct.input_dev** %input_dev55, align 8, !tbaa !22
  %evbit = getelementptr inbounds %struct.input_dev, %struct.input_dev* %13, i32 0, i32 5
  %arraydecay = getelementptr inbounds [1 x i64], [1 x i64]* %evbit, i32 0, i32 0
  call void asm sideeffect "bts $1,$0", "=*m,Ir,*m,~{memory},~{dirflag},~{fpsr},~{flags}"(i64* %arraydecay, i64 3, i64* %arraydecay) #6, !srcloc !54
  %input_dev56 = getelementptr inbounds %struct.wm97xx, %struct.wm97xx* %1, i32 0, i32 6
  %14 = load %struct.input_dev*, %struct.input_dev** %input_dev56, align 8, !tbaa !22
  %evbit57 = getelementptr inbounds %struct.input_dev, %struct.input_dev* %14, i32 0, i32 5
  %arraydecay58 = getelementptr inbounds [1 x i64], [1 x i64]* %evbit57, i32 0, i32 0
  call void asm sideeffect "bts $1,$0", "=*m,Ir,*m,~{memory},~{dirflag},~{fpsr},~{flags}"(i64* %arraydecay58, i64 1, i64* %arraydecay58) #6, !srcloc !54
  %input_dev59 = getelementptr inbounds %struct.wm97xx, %struct.wm97xx* %1, i32 0, i32 6
  %15 = load %struct.input_dev*, %struct.input_dev** %input_dev59, align 8, !tbaa !22
  %keybit = getelementptr inbounds %struct.input_dev, %struct.input_dev* %15, i32 0, i32 6
  %arraydecay60 = getelementptr inbounds [12 x i64], [12 x i64]* %keybit, i32 0, i32 0
  call void asm sideeffect "bts $1,$0", "=*m,Ir,*m,~{memory},~{dirflag},~{fpsr},~{flags}"(i64* %arraydecay60, i64 330, i64* %arraydecay60) #6, !srcloc !54
  %input_dev61 = getelementptr inbounds %struct.wm97xx, %struct.wm97xx* %1, i32 0, i32 6
  %16 = load %struct.input_dev*, %struct.input_dev** %input_dev61, align 8, !tbaa !22
  %17 = load i32, i32* getelementptr inbounds ([3 x i32], [3 x i32]* @abs_x, i64 0, i64 0), align 4, !tbaa !55
  %18 = load i32, i32* getelementptr inbounds ([3 x i32], [3 x i32]* @abs_x, i64 0, i64 1), align 4, !tbaa !55
  %19 = load i32, i32* getelementptr inbounds ([3 x i32], [3 x i32]* @abs_x, i64 0, i64 2), align 4, !tbaa !55
  call void @input_set_abs_params(%struct.input_dev* %16, i32 0, i32 %17, i32 %18, i32 %19, i32 0)
  %input_dev62 = getelementptr inbounds %struct.wm97xx, %struct.wm97xx* %1, i32 0, i32 6
  %20 = load %struct.input_dev*, %struct.input_dev** %input_dev62, align 8, !tbaa !22
  %21 = load i32, i32* getelementptr inbounds ([3 x i32], [3 x i32]* @abs_y, i64 0, i64 0), align 4, !tbaa !55
  %22 = load i32, i32* getelementptr inbounds ([3 x i32], [3 x i32]* @abs_y, i64 0, i64 1), align 4, !tbaa !55
  %23 = load i32, i32* getelementptr inbounds ([3 x i32], [3 x i32]* @abs_y, i64 0, i64 2), align 4, !tbaa !55
  call void @input_set_abs_params(%struct.input_dev* %20, i32 1, i32 %21, i32 %22, i32 %23, i32 0)
  %input_dev63 = getelementptr inbounds %struct.wm97xx, %struct.wm97xx* %1, i32 0, i32 6
  %24 = load %struct.input_dev*, %struct.input_dev** %input_dev63, align 8, !tbaa !22
  %25 = load i32, i32* getelementptr inbounds ([3 x i32], [3 x i32]* @abs_p, i64 0, i64 0), align 4, !tbaa !55
  %26 = load i32, i32* getelementptr inbounds ([3 x i32], [3 x i32]* @abs_p, i64 0, i64 1), align 4, !tbaa !55
  %27 = load i32, i32* getelementptr inbounds ([3 x i32], [3 x i32]* @abs_p, i64 0, i64 2), align 4, !tbaa !55
  call void @input_set_abs_params(%struct.input_dev* %24, i32 24, i32 %25, i32 %26, i32 %27, i32 0)
  %input_dev64 = getelementptr inbounds %struct.wm97xx, %struct.wm97xx* %1, i32 0, i32 6
  %28 = load %struct.input_dev*, %struct.input_dev** %input_dev64, align 8, !tbaa !22
  %29 = bitcast %struct.wm97xx* %1 to i8*
  call void @input_set_drvdata(%struct.input_dev* %28, i8* %29)
  %input_dev65 = getelementptr inbounds %struct.wm97xx, %struct.wm97xx* %1, i32 0, i32 6
  %30 = load %struct.input_dev*, %struct.input_dev** %input_dev65, align 8, !tbaa !22
  %dev66 = getelementptr inbounds %struct.input_dev, %struct.input_dev* %30, i32 0, i32 39
  %parent = getelementptr inbounds %struct.device, %struct.device* %dev66, i32 0, i32 0
  store %struct.device* %dev, %struct.device** %parent, align 8, !tbaa !56
  %input_dev67 = getelementptr inbounds %struct.wm97xx, %struct.wm97xx* %1, i32 0, i32 6
  %31 = load %struct.input_dev*, %struct.input_dev** %input_dev67, align 8, !tbaa !22
  %call68 = call i32 @input_register_device(%struct.input_dev* %31)
  %cmp69 = icmp slt i32 %call68, 0
  br i1 %cmp69, label %dev_alloc_err, label %if.end72

if.end72:                                         ; preds = %if.end50
  %call73 = call %struct.platform_device* @platform_device_alloc(i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.8, i32 0, i32 0), i32 -1)
  %battery_dev = getelementptr inbounds %struct.wm97xx, %struct.wm97xx* %1, i32 0, i32 9
  store %struct.platform_device* %call73, %struct.platform_device** %battery_dev, align 8, !tbaa !57
  %battery_dev74 = getelementptr inbounds %struct.wm97xx, %struct.wm97xx* %1, i32 0, i32 9
  %32 = load %struct.platform_device*, %struct.platform_device** %battery_dev74, align 8, !tbaa !57
  %tobool75 = icmp ne %struct.platform_device* %32, null
  br i1 %tobool75, label %if.end77, label %batt_err

if.end77:                                         ; preds = %if.end72
  %battery_dev78 = getelementptr inbounds %struct.wm97xx, %struct.wm97xx* %1, i32 0, i32 9
  %33 = load %struct.platform_device*, %struct.platform_device** %battery_dev78, align 8, !tbaa !57
  %34 = bitcast %struct.wm97xx* %1 to i8*
  call void @platform_set_drvdata(%struct.platform_device* %33, i8* %34)
  %battery_dev79 = getelementptr inbounds %struct.wm97xx, %struct.wm97xx* %1, i32 0, i32 9
  %35 = load %struct.platform_device*, %struct.platform_device** %battery_dev79, align 8, !tbaa !57
  %dev80 = getelementptr inbounds %struct.platform_device, %struct.platform_device* %35, i32 0, i32 3
  %parent81 = getelementptr inbounds %struct.device, %struct.device* %dev80, i32 0, i32 0
  store %struct.device* %dev, %struct.device** %parent81, align 8, !tbaa !58
  %tobool82 = icmp ne %struct.wm97xx_pdata* %0, null
  br i1 %tobool82, label %cond.true, label %cond.end

cond.true:                                        ; preds = %if.end77
  %batt_pdata = getelementptr inbounds %struct.wm97xx_pdata, %struct.wm97xx_pdata* %0, i32 0, i32 0
  %36 = load %struct.wm97xx_batt_pdata*, %struct.wm97xx_batt_pdata** %batt_pdata, align 8, !tbaa !61
  br label %cond.end

cond.end:                                         ; preds = %cond.true, %if.end77
  %cond = phi %struct.wm97xx_batt_pdata* [ %36, %cond.true ], [ null, %if.end77 ]
  %37 = bitcast %struct.wm97xx_batt_pdata* %cond to i8*
  %battery_dev83 = getelementptr inbounds %struct.wm97xx, %struct.wm97xx* %1, i32 0, i32 9
  %38 = load %struct.platform_device*, %struct.platform_device** %battery_dev83, align 8, !tbaa !57
  %dev84 = getelementptr inbounds %struct.platform_device, %struct.platform_device* %38, i32 0, i32 3
  %platform_data = getelementptr inbounds %struct.device, %struct.device* %dev84, i32 0, i32 8
  store i8* %37, i8** %platform_data, align 8, !tbaa !63
  %battery_dev85 = getelementptr inbounds %struct.wm97xx, %struct.wm97xx* %1, i32 0, i32 9
  %39 = load %struct.platform_device*, %struct.platform_device** %battery_dev85, align 8, !tbaa !57
  %call86 = call i32 @platform_device_add(%struct.platform_device* %39)
  %cmp87 = icmp slt i32 %call86, 0
  br i1 %cmp87, label %batt_reg_err, label %if.end90

if.end90:                                         ; preds = %cond.end
  %call91 = call %struct.platform_device* @platform_device_alloc(i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.9, i32 0, i32 0), i32 -1)
  %touch_dev = getelementptr inbounds %struct.wm97xx, %struct.wm97xx* %1, i32 0, i32 10
  store %struct.platform_device* %call91, %struct.platform_device** %touch_dev, align 8, !tbaa !64
  %touch_dev92 = getelementptr inbounds %struct.wm97xx, %struct.wm97xx* %1, i32 0, i32 10
  %40 = load %struct.platform_device*, %struct.platform_device** %touch_dev92, align 8, !tbaa !64
  %tobool93 = icmp ne %struct.platform_device* %40, null
  br i1 %tobool93, label %if.end95, label %touch_err

if.end95:                                         ; preds = %if.end90
  %touch_dev96 = getelementptr inbounds %struct.wm97xx, %struct.wm97xx* %1, i32 0, i32 10
  %41 = load %struct.platform_device*, %struct.platform_device** %touch_dev96, align 8, !tbaa !64
  %42 = bitcast %struct.wm97xx* %1 to i8*
  call void @platform_set_drvdata(%struct.platform_device* %41, i8* %42)
  %touch_dev97 = getelementptr inbounds %struct.wm97xx, %struct.wm97xx* %1, i32 0, i32 10
  %43 = load %struct.platform_device*, %struct.platform_device** %touch_dev97, align 8, !tbaa !64
  %dev98 = getelementptr inbounds %struct.platform_device, %struct.platform_device* %43, i32 0, i32 3
  %parent99 = getelementptr inbounds %struct.device, %struct.device* %dev98, i32 0, i32 0
  store %struct.device* %dev, %struct.device** %parent99, align 8, !tbaa !58
  %44 = bitcast %struct.wm97xx_pdata* %0 to i8*
  %touch_dev100 = getelementptr inbounds %struct.wm97xx, %struct.wm97xx* %1, i32 0, i32 10
  %45 = load %struct.platform_device*, %struct.platform_device** %touch_dev100, align 8, !tbaa !64
  %dev101 = getelementptr inbounds %struct.platform_device, %struct.platform_device* %45, i32 0, i32 3
  %platform_data102 = getelementptr inbounds %struct.device, %struct.device* %dev101, i32 0, i32 8
  store i8* %44, i8** %platform_data102, align 8, !tbaa !63
  %touch_dev103 = getelementptr inbounds %struct.wm97xx, %struct.wm97xx* %1, i32 0, i32 10
  %46 = load %struct.platform_device*, %struct.platform_device** %touch_dev103, align 8, !tbaa !64
  %call104 = call i32 @platform_device_add(%struct.platform_device* %46)
  %cmp105 = icmp slt i32 %call104, 0
  br i1 %cmp105, label %touch_reg_err, label %cleanup

touch_reg_err:                                    ; preds = %if.end95
  %touch_dev109 = getelementptr inbounds %struct.wm97xx, %struct.wm97xx* %1, i32 0, i32 10
  %47 = load %struct.platform_device*, %struct.platform_device** %touch_dev109, align 8, !tbaa !64
  call void @platform_device_put(%struct.platform_device* %47)
  br label %touch_err

touch_err:                                        ; preds = %touch_reg_err, %if.end90
  %ret.0 = phi i32 [ %call104, %touch_reg_err ], [ -12, %if.end90 ]
  %battery_dev110 = getelementptr inbounds %struct.wm97xx, %struct.wm97xx* %1, i32 0, i32 9
  %48 = load %struct.platform_device*, %struct.platform_device** %battery_dev110, align 8, !tbaa !57
  call void @platform_device_del(%struct.platform_device* %48)
  br label %batt_reg_err

batt_reg_err:                                     ; preds = %touch_err, %cond.end
  %ret.1 = phi i32 [ %ret.0, %touch_err ], [ %call86, %cond.end ]
  %battery_dev111 = getelementptr inbounds %struct.wm97xx, %struct.wm97xx* %1, i32 0, i32 9
  %49 = load %struct.platform_device*, %struct.platform_device** %battery_dev111, align 8, !tbaa !57
  call void @platform_device_put(%struct.platform_device* %49)
  br label %batt_err

batt_err:                                         ; preds = %batt_reg_err, %if.end72
  %ret.2 = phi i32 [ %ret.1, %batt_reg_err ], [ -12, %if.end72 ]
  %input_dev112 = getelementptr inbounds %struct.wm97xx, %struct.wm97xx* %1, i32 0, i32 6
  %50 = load %struct.input_dev*, %struct.input_dev** %input_dev112, align 8, !tbaa !22
  call void @input_unregister_device(%struct.input_dev* %50)
  %input_dev113 = getelementptr inbounds %struct.wm97xx, %struct.wm97xx* %1, i32 0, i32 6
  store %struct.input_dev* null, %struct.input_dev** %input_dev113, align 8, !tbaa !22
  br label %dev_alloc_err

dev_alloc_err:                                    ; preds = %batt_err, %if.end50
  %ret.3 = phi i32 [ %ret.2, %batt_err ], [ %call68, %if.end50 ]
  %input_dev114 = getelementptr inbounds %struct.wm97xx, %struct.wm97xx* %1, i32 0, i32 6
  %51 = load %struct.input_dev*, %struct.input_dev** %input_dev114, align 8, !tbaa !22
  call void @input_free_device(%struct.input_dev* %51)
  br label %alloc_err

alloc_err:                                        ; preds = %dev_alloc_err, %sw.epilog, %sw.default, %if.then4
  %ret.4 = phi i32 [ -19, %if.then4 ], [ %ret.3, %dev_alloc_err ], [ -19, %sw.default ], [ -12, %sw.epilog ]
  %52 = bitcast %struct.wm97xx* %1 to i8*
  call void @kfree(i8* %52)
  br label %cleanup

cleanup:                                          ; preds = %alloc_err, %if.end95, %entry
  %retval.0 = phi i32 [ %ret.4, %alloc_err ], [ -12, %entry ], [ %call104, %if.end95 ]
  ret i32 %retval.0
}

; Function Attrs: nounwind uwtable
define internal i32 @wm97xx_remove(%struct.device* %dev) #0 {
entry:
  %call = call i8* @dev_get_drvdata(%struct.device* %dev)
  %0 = bitcast i8* %call to %struct.wm97xx*
  %battery_dev = getelementptr inbounds %struct.wm97xx, %struct.wm97xx* %0, i32 0, i32 9
  %1 = load %struct.platform_device*, %struct.platform_device** %battery_dev, align 8, !tbaa !57
  call void @platform_device_unregister(%struct.platform_device* %1)
  %touch_dev = getelementptr inbounds %struct.wm97xx, %struct.wm97xx* %0, i32 0, i32 10
  %2 = load %struct.platform_device*, %struct.platform_device** %touch_dev, align 8, !tbaa !64
  call void @platform_device_unregister(%struct.platform_device* %2)
  %input_dev = getelementptr inbounds %struct.wm97xx, %struct.wm97xx* %0, i32 0, i32 6
  %3 = load %struct.input_dev*, %struct.input_dev** %input_dev, align 8, !tbaa !22
  call void @input_unregister_device(%struct.input_dev* %3)
  %4 = bitcast %struct.wm97xx* %0 to i8*
  call void @kfree(i8* %4)
  ret i32 0
}

; Function Attrs: nounwind uwtable
define internal i32 @wm97xx_suspend(%struct.device* %dev) #0 {
entry:
  %call = call i8* @dev_get_drvdata(%struct.device* %dev)
  %0 = bitcast i8* %call to %struct.wm97xx*
  %input_dev = getelementptr inbounds %struct.wm97xx, %struct.wm97xx* %0, i32 0, i32 6
  %1 = load %struct.input_dev*, %struct.input_dev** %input_dev, align 8, !tbaa !22
  %dev1 = getelementptr inbounds %struct.input_dev, %struct.input_dev* %1, i32 0, i32 39
  %call2 = call zeroext i1 @device_may_wakeup(%struct.device* %dev1)
  br i1 %call2, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %suspend_mode3 = getelementptr inbounds %struct.wm97xx, %struct.wm97xx* %0, i32 0, i32 23
  %2 = load i16, i16* %suspend_mode3, align 8, !tbaa !21
  %conv = zext i16 %2 to i32
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  %suspend_mode.0 = phi i32 [ %conv, %if.then ], [ 0, %entry ]
  %input_dev4 = getelementptr inbounds %struct.wm97xx, %struct.wm97xx* %0, i32 0, i32 6
  %3 = load %struct.input_dev*, %struct.input_dev** %input_dev4, align 8, !tbaa !22
  %users = getelementptr inbounds %struct.input_dev, %struct.input_dev* %3, i32 0, i32 37
  %4 = load i32, i32* %users, align 8, !tbaa !65
  %tobool = icmp ne i32 %4, 0
  br i1 %tobool, label %if.then5, label %if.end7

if.then5:                                         ; preds = %if.end
  %ts_reader = getelementptr inbounds %struct.wm97xx, %struct.wm97xx* %0, i32 0, i32 13
  %call6 = call zeroext i1 @cancel_delayed_work_sync(%struct.delayed_work* %ts_reader)
  br label %if.end7

if.end7:                                          ; preds = %if.then5, %if.end
  %call8 = call i32 @wm97xx_reg_read(%struct.wm97xx* %0, i16 zeroext 120)
  %conv9 = trunc i32 %call8 to i16
  %conv10 = zext i16 %conv9 to i32
  %and = and i32 %conv10, -49153
  %conv11 = trunc i32 %and to i16
  %input_dev12 = getelementptr inbounds %struct.wm97xx, %struct.wm97xx* %0, i32 0, i32 6
  %5 = load %struct.input_dev*, %struct.input_dev** %input_dev12, align 8, !tbaa !22
  %users13 = getelementptr inbounds %struct.input_dev, %struct.input_dev* %5, i32 0, i32 37
  %6 = load i32, i32* %users13, align 8, !tbaa !65
  %tobool14 = icmp ne i32 %6, 0
  %conv16 = zext i16 %conv11 to i32
  %or = or i32 %conv16, %suspend_mode.0
  %conv17 = trunc i32 %or to i16
  %reg.0 = select i1 %tobool14, i16 %conv17, i16 %conv11
  %ac97 = getelementptr inbounds %struct.wm97xx, %struct.wm97xx* %0, i32 0, i32 7
  %7 = load %struct.snd_ac97*, %struct.snd_ac97** %ac97, align 8, !tbaa !32
  %bus = getelementptr inbounds %struct.snd_ac97, %struct.snd_ac97* %7, i32 0, i32 3
  %8 = load %struct.snd_ac97_bus*, %struct.snd_ac97_bus** %bus, align 8, !tbaa !66
  %ops = getelementptr inbounds %struct.snd_ac97_bus, %struct.snd_ac97_bus* %8, i32 0, i32 0
  %9 = load %struct.snd_ac97_bus_ops*, %struct.snd_ac97_bus_ops** %ops, align 8, !tbaa !68
  %write = getelementptr inbounds %struct.snd_ac97_bus_ops, %struct.snd_ac97_bus_ops* %9, i32 0, i32 2
  %10 = load void (%struct.snd_ac97*, i16, i16)*, void (%struct.snd_ac97*, i16, i16)** %write, align 8, !tbaa !70
  %ac9719 = getelementptr inbounds %struct.wm97xx, %struct.wm97xx* %0, i32 0, i32 7
  %11 = load %struct.snd_ac97*, %struct.snd_ac97** %ac9719, align 8, !tbaa !32
  call void %10(%struct.snd_ac97* %11, i16 zeroext 120, i16 zeroext %reg.0)
  %id = getelementptr inbounds %struct.wm97xx, %struct.wm97xx* %0, i32 0, i32 1
  %12 = load i16, i16* %id, align 2, !tbaa !23
  %conv20 = zext i16 %12 to i32
  %cmp = icmp eq i32 %conv20, 19475
  br i1 %cmp, label %land.lhs.true, label %if.end30

land.lhs.true:                                    ; preds = %if.end7
  %input_dev22 = getelementptr inbounds %struct.wm97xx, %struct.wm97xx* %0, i32 0, i32 6
  %13 = load %struct.input_dev*, %struct.input_dev** %input_dev22, align 8, !tbaa !22
  %users23 = getelementptr inbounds %struct.input_dev, %struct.input_dev* %13, i32 0, i32 37
  %14 = load i32, i32* %users23, align 8, !tbaa !65
  %tobool24 = icmp ne i32 %14, 0
  %tobool25 = icmp ne i32 %suspend_mode.0, 0
  %or.cond = and i1 %tobool24, %tobool25
  br i1 %or.cond, label %if.end30, label %if.then26

if.then26:                                        ; preds = %land.lhs.true
  %call27 = call i32 @wm97xx_reg_read(%struct.wm97xx* %0, i16 zeroext 60)
  %or28 = or i32 %call27, 32768
  %conv29 = trunc i32 %or28 to i16
  call void @wm97xx_reg_write(%struct.wm97xx* %0, i16 zeroext 60, i16 zeroext %conv29)
  br label %if.end30

if.end30:                                         ; preds = %if.then26, %land.lhs.true, %if.end7
  ret i32 0
}

; Function Attrs: nounwind uwtable
define internal i32 @wm97xx_resume(%struct.device* %dev) #0 {
entry:
  %call = call i8* @dev_get_drvdata(%struct.device* %dev)
  %0 = bitcast i8* %call to %struct.wm97xx*
  %id = getelementptr inbounds %struct.wm97xx, %struct.wm97xx* %0, i32 0, i32 1
  %1 = load i16, i16* %id, align 2, !tbaa !23
  %conv = zext i16 %1 to i32
  %cmp = icmp eq i32 %conv, 19475
  br i1 %cmp, label %if.then, label %if.end5

if.then:                                          ; preds = %entry
  %dig = getelementptr inbounds %struct.wm97xx, %struct.wm97xx* %0, i32 0, i32 0
  %arrayidx = getelementptr inbounds [3 x i16], [3 x i16]* %dig, i64 0, i64 0
  %2 = load i16, i16* %arrayidx, align 8, !tbaa !34
  call void @wm97xx_reg_write(%struct.wm97xx* %0, i16 zeroext 116, i16 zeroext %2)
  %misc = getelementptr inbounds %struct.wm97xx, %struct.wm97xx* %0, i32 0, i32 3
  %3 = load i16, i16* %misc, align 4, !tbaa !72
  call void @wm97xx_reg_write(%struct.wm97xx* %0, i16 zeroext 90, i16 zeroext %3)
  %input_dev = getelementptr inbounds %struct.wm97xx, %struct.wm97xx* %0, i32 0, i32 6
  %4 = load %struct.input_dev*, %struct.input_dev** %input_dev, align 8, !tbaa !22
  %users = getelementptr inbounds %struct.input_dev, %struct.input_dev* %4, i32 0, i32 37
  %5 = load i32, i32* %users, align 8, !tbaa !65
  %tobool = icmp ne i32 %5, 0
  br i1 %tobool, label %if.then2, label %if.end5

if.then2:                                         ; preds = %if.then
  %call3 = call i32 @wm97xx_reg_read(%struct.wm97xx* %0, i16 zeroext 60)
  %and = and i32 %call3, 32767
  %conv4 = trunc i32 %and to i16
  call void @wm97xx_reg_write(%struct.wm97xx* %0, i16 zeroext 60, i16 zeroext %conv4)
  br label %if.end5

if.end5:                                          ; preds = %if.then2, %if.then, %entry
  %dig6 = getelementptr inbounds %struct.wm97xx, %struct.wm97xx* %0, i32 0, i32 0
  %arrayidx7 = getelementptr inbounds [3 x i16], [3 x i16]* %dig6, i64 0, i64 1
  %6 = load i16, i16* %arrayidx7, align 2, !tbaa !34
  call void @wm97xx_reg_write(%struct.wm97xx* %0, i16 zeroext 118, i16 zeroext %6)
  %dig8 = getelementptr inbounds %struct.wm97xx, %struct.wm97xx* %0, i32 0, i32 0
  %arrayidx9 = getelementptr inbounds [3 x i16], [3 x i16]* %dig8, i64 0, i64 2
  %7 = load i16, i16* %arrayidx9, align 4, !tbaa !34
  call void @wm97xx_reg_write(%struct.wm97xx* %0, i16 zeroext 120, i16 zeroext %7)
  %gpio = getelementptr inbounds %struct.wm97xx, %struct.wm97xx* %0, i32 0, i32 2
  %arrayidx10 = getelementptr inbounds [6 x i16], [6 x i16]* %gpio, i64 0, i64 0
  %8 = load i16, i16* %arrayidx10, align 8, !tbaa !34
  call void @wm97xx_reg_write(%struct.wm97xx* %0, i16 zeroext 76, i16 zeroext %8)
  %gpio11 = getelementptr inbounds %struct.wm97xx, %struct.wm97xx* %0, i32 0, i32 2
  %arrayidx12 = getelementptr inbounds [6 x i16], [6 x i16]* %gpio11, i64 0, i64 1
  %9 = load i16, i16* %arrayidx12, align 2, !tbaa !34
  call void @wm97xx_reg_write(%struct.wm97xx* %0, i16 zeroext 78, i16 zeroext %9)
  %gpio13 = getelementptr inbounds %struct.wm97xx, %struct.wm97xx* %0, i32 0, i32 2
  %arrayidx14 = getelementptr inbounds [6 x i16], [6 x i16]* %gpio13, i64 0, i64 2
  %10 = load i16, i16* %arrayidx14, align 4, !tbaa !34
  call void @wm97xx_reg_write(%struct.wm97xx* %0, i16 zeroext 80, i16 zeroext %10)
  %gpio15 = getelementptr inbounds %struct.wm97xx, %struct.wm97xx* %0, i32 0, i32 2
  %arrayidx16 = getelementptr inbounds [6 x i16], [6 x i16]* %gpio15, i64 0, i64 3
  %11 = load i16, i16* %arrayidx16, align 2, !tbaa !34
  call void @wm97xx_reg_write(%struct.wm97xx* %0, i16 zeroext 82, i16 zeroext %11)
  %gpio17 = getelementptr inbounds %struct.wm97xx, %struct.wm97xx* %0, i32 0, i32 2
  %arrayidx18 = getelementptr inbounds [6 x i16], [6 x i16]* %gpio17, i64 0, i64 4
  %12 = load i16, i16* %arrayidx18, align 8, !tbaa !34
  call void @wm97xx_reg_write(%struct.wm97xx* %0, i16 zeroext 84, i16 zeroext %12)
  %gpio19 = getelementptr inbounds %struct.wm97xx, %struct.wm97xx* %0, i32 0, i32 2
  %arrayidx20 = getelementptr inbounds [6 x i16], [6 x i16]* %gpio19, i64 0, i64 5
  %13 = load i16, i16* %arrayidx20, align 2, !tbaa !34
  call void @wm97xx_reg_write(%struct.wm97xx* %0, i16 zeroext 86, i16 zeroext %13)
  %input_dev21 = getelementptr inbounds %struct.wm97xx, %struct.wm97xx* %0, i32 0, i32 6
  %14 = load %struct.input_dev*, %struct.input_dev** %input_dev21, align 8, !tbaa !22
  %users22 = getelementptr inbounds %struct.input_dev, %struct.input_dev* %14, i32 0, i32 37
  %15 = load i32, i32* %users22, align 8, !tbaa !65
  %tobool23 = icmp ne i32 %15, 0
  br i1 %tobool23, label %land.lhs.true, label %if.end28

land.lhs.true:                                    ; preds = %if.end5
  %pen_irq = getelementptr inbounds %struct.wm97xx, %struct.wm97xx* %0, i32 0, i32 16
  %16 = load i32, i32* %pen_irq, align 8, !tbaa !73
  %tobool24 = icmp ne i32 %16, 0
  br i1 %tobool24, label %if.end28, label %if.then25

if.then25:                                        ; preds = %land.lhs.true
  %ts_reader_min_interval = getelementptr inbounds %struct.wm97xx, %struct.wm97xx* %0, i32 0, i32 15
  %17 = load i64, i64* %ts_reader_min_interval, align 8, !tbaa !74
  %ts_reader_interval = getelementptr inbounds %struct.wm97xx, %struct.wm97xx* %0, i32 0, i32 14
  store i64 %17, i64* %ts_reader_interval, align 8, !tbaa !75
  %ts_workq = getelementptr inbounds %struct.wm97xx, %struct.wm97xx* %0, i32 0, i32 17
  %18 = load %struct.workqueue_struct*, %struct.workqueue_struct** %ts_workq, align 8, !tbaa !76
  %ts_reader = getelementptr inbounds %struct.wm97xx, %struct.wm97xx* %0, i32 0, i32 13
  %ts_reader_interval26 = getelementptr inbounds %struct.wm97xx, %struct.wm97xx* %0, i32 0, i32 14
  %19 = load i64, i64* %ts_reader_interval26, align 8, !tbaa !75
  call void @queue_delayed_work(%struct.workqueue_struct* %18, %struct.delayed_work* %ts_reader, i64 %19)
  br label %if.end28

if.end28:                                         ; preds = %if.then25, %land.lhs.true, %if.end5
  ret i32 0
}

; Function Attrs: inlinehint nounwind uwtable
define internal i8* @dev_get_drvdata(%struct.device* %dev) #4 {
entry:
  %driver_data = getelementptr inbounds %struct.device, %struct.device* %dev, i32 0, i32 9
  %0 = load i8*, i8** %driver_data, align 8, !tbaa !77
  ret i8* %0
}

; Function Attrs: inlinehint nounwind uwtable
define internal void @queue_delayed_work(%struct.workqueue_struct* %wq, %struct.delayed_work* %dwork, i64 %delay) #4 {
entry:
  %call = call zeroext i1 @queue_delayed_work_on(i32 8192, %struct.workqueue_struct* %wq, %struct.delayed_work* %dwork, i64 %delay)
  ret void
}

declare zeroext i1 @queue_delayed_work_on(i32, %struct.workqueue_struct*, %struct.delayed_work*, i64) #1

; Function Attrs: inlinehint nounwind uwtable
define internal zeroext i1 @device_may_wakeup(%struct.device* %dev) #4 {
entry:
  %power = getelementptr inbounds %struct.device, %struct.device* %dev, i32 0, i32 11
  %can_wakeup = getelementptr inbounds %struct.dev_pm_info, %struct.dev_pm_info* %power, i32 0, i32 1
  %bf.load = load i16, i16* %can_wakeup, align 4
  %bf.clear = and i16 %bf.load, 1
  %bf.cast = zext i16 %bf.clear to i32
  %tobool = icmp ne i32 %bf.cast, 0
  br i1 %tobool, label %land.rhs, label %land.end

land.rhs:                                         ; preds = %entry
  %power1 = getelementptr inbounds %struct.device, %struct.device* %dev, i32 0, i32 11
  %wakeup = getelementptr inbounds %struct.dev_pm_info, %struct.dev_pm_info* %power1, i32 0, i32 5
  %0 = load %struct.wakeup_source*, %struct.wakeup_source** %wakeup, align 8, !tbaa !78
  %tobool2 = icmp ne %struct.wakeup_source* %0, null
  %lnot = xor i1 %tobool2, true
  %lnot3 = xor i1 %lnot, true
  br label %land.end

land.end:                                         ; preds = %land.rhs, %entry
  %1 = phi i1 [ false, %entry ], [ %lnot3, %land.rhs ]
  ret i1 %1
}

declare zeroext i1 @cancel_delayed_work_sync(%struct.delayed_work*) #1

declare void @platform_device_unregister(%struct.platform_device*) #1

declare void @input_unregister_device(%struct.input_dev*) #1

declare void @kfree(i8*) #1

; Function Attrs: inlinehint nounwind uwtable
define internal i8* @dev_get_platdata(%struct.device* %dev) #4 {
entry:
  %platform_data = getelementptr inbounds %struct.device, %struct.device* %dev, i32 0, i32 8
  %0 = load i8*, i8** %platform_data, align 8, !tbaa !79
  ret i8* %0
}

; Function Attrs: inlinehint nounwind uwtable
define internal i8* @kzalloc(i64 %size, i32 %flags) #4 {
entry:
  %or = or i32 %flags, 32768
  %call.i = call noalias i8* @__kmalloc(i64 %size, i32 %or) #6
  ret i8* %call.i
}

declare void @__mutex_init(%struct.mutex*, i8*, %struct.lock_class_key*) #1

; Function Attrs: inlinehint nounwind uwtable
define internal void @dev_set_drvdata(%struct.device* %dev, i8* %data) #4 {
entry:
  %driver_data = getelementptr inbounds %struct.device, %struct.device* %dev, i32 0, i32 9
  store i8* %data, i8** %driver_data, align 8, !tbaa !77
  ret void
}

declare void @_dev_info(%struct.device*, i8*, ...) #1

declare %struct.input_dev* @input_allocate_device() #1

; Function Attrs: nounwind uwtable
define internal i32 @wm97xx_ts_input_open(%struct.input_dev* %idev) #0 {
entry:
  %.compoundliteral = alloca %union.anon.3, align 8
  %.compoundliteral37 = alloca %union.anon.3, align 8
  %call = call i8* @input_get_drvdata(%struct.input_dev* %idev)
  %0 = bitcast i8* %call to %struct.wm97xx*
  %call1 = call %struct.workqueue_struct* (i8*, i32, i32, %struct.lock_class_key*, i8*, ...) @__alloc_workqueue_key(i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.11, i32 0, i32 0), i32 131074, i32 1, %struct.lock_class_key* @wm97xx_ts_input_open.__key, i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.10, i32 0, i32 0))
  %ts_workq = getelementptr inbounds %struct.wm97xx, %struct.wm97xx* %0, i32 0, i32 17
  store %struct.workqueue_struct* %call1, %struct.workqueue_struct** %ts_workq, align 8, !tbaa !76
  %ts_workq2 = getelementptr inbounds %struct.wm97xx, %struct.wm97xx* %0, i32 0, i32 17
  %1 = load %struct.workqueue_struct*, %struct.workqueue_struct** %ts_workq2, align 8, !tbaa !76
  %cmp = icmp eq %struct.workqueue_struct* %1, null
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  call void (%struct.device*, i8*, ...) @dev_err(%struct.device* null, i8* null)
  br label %cleanup

if.end:                                           ; preds = %entry
  %mach_ops = getelementptr inbounds %struct.wm97xx, %struct.wm97xx* %0, i32 0, i32 11
  %2 = load %struct.wm97xx_mach_ops*, %struct.wm97xx_mach_ops** %mach_ops, align 8, !tbaa !2
  %tobool = icmp ne %struct.wm97xx_mach_ops* %2, null
  br i1 %tobool, label %land.lhs.true, label %if.end7

land.lhs.true:                                    ; preds = %if.end
  %mach_ops3 = getelementptr inbounds %struct.wm97xx, %struct.wm97xx* %0, i32 0, i32 11
  %3 = load %struct.wm97xx_mach_ops*, %struct.wm97xx_mach_ops** %mach_ops3, align 8, !tbaa !2
  %acc_enabled = getelementptr inbounds %struct.wm97xx_mach_ops, %struct.wm97xx_mach_ops* %3, i32 0, i32 0
  %4 = load i32, i32* %acc_enabled, align 8, !tbaa !80
  %tobool4 = icmp ne i32 %4, 0
  br i1 %tobool4, label %if.then5, label %if.end7

if.then5:                                         ; preds = %land.lhs.true
  %codec = getelementptr inbounds %struct.wm97xx, %struct.wm97xx* %0, i32 0, i32 5
  %5 = load %struct.wm97xx_codec_drv*, %struct.wm97xx_codec_drv** %codec, align 8, !tbaa !25
  %acc_enable = getelementptr inbounds %struct.wm97xx_codec_drv, %struct.wm97xx_codec_drv* %5, i32 0, i32 4
  %6 = load i32 (%struct.wm97xx*, i32)*, i32 (%struct.wm97xx*, i32)** %acc_enable, align 8, !tbaa !82
  %call6 = call i32 %6(%struct.wm97xx* %0, i32 1)
  br label %if.end7

if.end7:                                          ; preds = %if.then5, %land.lhs.true, %if.end
  %codec8 = getelementptr inbounds %struct.wm97xx, %struct.wm97xx* %0, i32 0, i32 5
  %7 = load %struct.wm97xx_codec_drv*, %struct.wm97xx_codec_drv** %codec8, align 8, !tbaa !25
  %dig_enable = getelementptr inbounds %struct.wm97xx_codec_drv, %struct.wm97xx_codec_drv* %7, i32 0, i32 6
  %8 = load void (%struct.wm97xx*, i32)*, void (%struct.wm97xx*, i32)** %dig_enable, align 8, !tbaa !30
  call void %8(%struct.wm97xx* %0, i32 1)
  %ts_reader = getelementptr inbounds %struct.wm97xx, %struct.wm97xx* %0, i32 0, i32 13
  %work = getelementptr inbounds %struct.delayed_work, %struct.delayed_work* %ts_reader, i32 0, i32 0
  call void @__init_work(%struct.work_struct* %work, i32 0)
  %ts_reader10 = getelementptr inbounds %struct.wm97xx, %struct.wm97xx* %0, i32 0, i32 13
  %work11 = getelementptr inbounds %struct.delayed_work, %struct.delayed_work* %ts_reader10, i32 0, i32 0
  %data = getelementptr inbounds %struct.work_struct, %struct.work_struct* %work11, i32 0, i32 0
  %counter = getelementptr inbounds %union.anon.3, %union.anon.3* %.compoundliteral, i32 0, i32 0
  store i64 137438953408, i64* %counter, align 8, !tbaa !83
  %9 = bitcast %union.anon.3* %data to i8*
  %10 = bitcast %union.anon.3* %.compoundliteral to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %9, i8* %10, i64 8, i32 8, i1 false), !tbaa.struct !84
  %ts_reader12 = getelementptr inbounds %struct.wm97xx, %struct.wm97xx* %0, i32 0, i32 13
  %work13 = getelementptr inbounds %struct.delayed_work, %struct.delayed_work* %ts_reader12, i32 0, i32 0
  %lockdep_map = getelementptr inbounds %struct.work_struct, %struct.work_struct* %work13, i32 0, i32 3
  call void @lockdep_init_map(%struct.lockdep_map* %lockdep_map, i8* getelementptr inbounds ([26 x i8], [26 x i8]* @.str.14, i32 0, i32 0), %struct.lock_class_key* @wm97xx_ts_input_open.__key.13, i32 0)
  %ts_reader14 = getelementptr inbounds %struct.wm97xx, %struct.wm97xx* %0, i32 0, i32 13
  %work15 = getelementptr inbounds %struct.delayed_work, %struct.delayed_work* %ts_reader14, i32 0, i32 0
  %entry16 = getelementptr inbounds %struct.work_struct, %struct.work_struct* %work15, i32 0, i32 1
  call void @INIT_LIST_HEAD(%struct.list_head* %entry16)
  %ts_reader17 = getelementptr inbounds %struct.wm97xx, %struct.wm97xx* %0, i32 0, i32 13
  %work18 = getelementptr inbounds %struct.delayed_work, %struct.delayed_work* %ts_reader17, i32 0, i32 0
  %func = getelementptr inbounds %struct.work_struct, %struct.work_struct* %work18, i32 0, i32 2
  store void (%struct.work_struct*)* @wm97xx_ts_reader, void (%struct.work_struct*)** %func, align 8, !tbaa !86
  %ts_reader21 = getelementptr inbounds %struct.wm97xx, %struct.wm97xx* %0, i32 0, i32 13
  %timer = getelementptr inbounds %struct.delayed_work, %struct.delayed_work* %ts_reader21, i32 0, i32 1
  call void @init_timer_key(%struct.timer_list* %timer, i32 2097152, i8* getelementptr inbounds ([27 x i8], [27 x i8]* @.str.16, i32 0, i32 0), %struct.lock_class_key* @wm97xx_ts_input_open.__key.15)
  %ts_reader24 = getelementptr inbounds %struct.wm97xx, %struct.wm97xx* %0, i32 0, i32 13
  %timer25 = getelementptr inbounds %struct.delayed_work, %struct.delayed_work* %ts_reader24, i32 0, i32 1
  %function = getelementptr inbounds %struct.timer_list, %struct.timer_list* %timer25, i32 0, i32 2
  store void (i64)* @delayed_work_timer_fn, void (i64)** %function, align 8, !tbaa !87
  %ts_reader26 = getelementptr inbounds %struct.wm97xx, %struct.wm97xx* %0, i32 0, i32 13
  %11 = ptrtoint %struct.delayed_work* %ts_reader26 to i64
  %ts_reader27 = getelementptr inbounds %struct.wm97xx, %struct.wm97xx* %0, i32 0, i32 13
  %timer28 = getelementptr inbounds %struct.delayed_work, %struct.delayed_work* %ts_reader27, i32 0, i32 1
  %data29 = getelementptr inbounds %struct.timer_list, %struct.timer_list* %timer28, i32 0, i32 3
  store i64 %11, i64* %data29, align 8, !tbaa !88
  %pen_event_work = getelementptr inbounds %struct.wm97xx, %struct.wm97xx* %0, i32 0, i32 18
  call void @__init_work(%struct.work_struct* %pen_event_work, i32 0)
  %pen_event_work35 = getelementptr inbounds %struct.wm97xx, %struct.wm97xx* %0, i32 0, i32 18
  %data36 = getelementptr inbounds %struct.work_struct, %struct.work_struct* %pen_event_work35, i32 0, i32 0
  %counter38 = getelementptr inbounds %union.anon.3, %union.anon.3* %.compoundliteral37, i32 0, i32 0
  store i64 137438953408, i64* %counter38, align 8, !tbaa !83
  %12 = bitcast %union.anon.3* %data36 to i8*
  %13 = bitcast %union.anon.3* %.compoundliteral37 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %12, i8* %13, i64 8, i32 8, i1 false), !tbaa.struct !84
  %pen_event_work39 = getelementptr inbounds %struct.wm97xx, %struct.wm97xx* %0, i32 0, i32 18
  %lockdep_map40 = getelementptr inbounds %struct.work_struct, %struct.work_struct* %pen_event_work39, i32 0, i32 3
  call void @lockdep_init_map(%struct.lockdep_map* %lockdep_map40, i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.18, i32 0, i32 0), %struct.lock_class_key* @wm97xx_ts_input_open.__key.17, i32 0)
  %pen_event_work41 = getelementptr inbounds %struct.wm97xx, %struct.wm97xx* %0, i32 0, i32 18
  %entry42 = getelementptr inbounds %struct.work_struct, %struct.work_struct* %pen_event_work41, i32 0, i32 1
  call void @INIT_LIST_HEAD(%struct.list_head* %entry42)
  %pen_event_work43 = getelementptr inbounds %struct.wm97xx, %struct.wm97xx* %0, i32 0, i32 18
  %func44 = getelementptr inbounds %struct.work_struct, %struct.work_struct* %pen_event_work43, i32 0, i32 2
  store void (%struct.work_struct*)* @wm97xx_pen_irq_worker, void (%struct.work_struct*)** %func44, align 8, !tbaa !86
  %ts_reader_min_interval = getelementptr inbounds %struct.wm97xx, %struct.wm97xx* %0, i32 0, i32 15
  store i64 2, i64* %ts_reader_min_interval, align 8, !tbaa !74
  %ts_reader_min_interval47 = getelementptr inbounds %struct.wm97xx, %struct.wm97xx* %0, i32 0, i32 15
  %14 = load i64, i64* %ts_reader_min_interval47, align 8, !tbaa !74
  %cmp48 = icmp ult i64 %14, 1
  br i1 %cmp48, label %if.then49, label %if.end51

if.then49:                                        ; preds = %if.end7
  %ts_reader_min_interval50 = getelementptr inbounds %struct.wm97xx, %struct.wm97xx* %0, i32 0, i32 15
  store i64 1, i64* %ts_reader_min_interval50, align 8, !tbaa !74
  br label %if.end51

if.end51:                                         ; preds = %if.then49, %if.end7
  %ts_reader_min_interval52 = getelementptr inbounds %struct.wm97xx, %struct.wm97xx* %0, i32 0, i32 15
  %15 = load i64, i64* %ts_reader_min_interval52, align 8, !tbaa !74
  %ts_reader_interval = getelementptr inbounds %struct.wm97xx, %struct.wm97xx* %0, i32 0, i32 14
  store i64 %15, i64* %ts_reader_interval, align 8, !tbaa !75
  %pen_is_down = getelementptr inbounds %struct.wm97xx, %struct.wm97xx* %0, i32 0, i32 21
  %bf.load = load i8, i8* %pen_is_down, align 4
  %bf.clear = and i8 %bf.load, -2
  store i8 %bf.clear, i8* %pen_is_down, align 4
  %pen_irq = getelementptr inbounds %struct.wm97xx, %struct.wm97xx* %0, i32 0, i32 16
  %16 = load i32, i32* %pen_irq, align 8, !tbaa !73
  %tobool53 = icmp ne i32 %16, 0
  br i1 %tobool53, label %if.then54, label %if.else

if.then54:                                        ; preds = %if.end51
  call void @wm97xx_init_pen_irq(%struct.wm97xx* %0)
  br label %if.end57

if.else:                                          ; preds = %if.end51
  call void (%struct.device*, i8*, ...) @dev_err(%struct.device* null, i8* null)
  br label %if.end57

if.end57:                                         ; preds = %if.else, %if.then54
  %pen_irq58 = getelementptr inbounds %struct.wm97xx, %struct.wm97xx* %0, i32 0, i32 16
  %17 = load i32, i32* %pen_irq58, align 8, !tbaa !73
  %cmp59 = icmp eq i32 %17, 0
  br i1 %cmp59, label %if.then60, label %cleanup

if.then60:                                        ; preds = %if.end57
  %ts_workq61 = getelementptr inbounds %struct.wm97xx, %struct.wm97xx* %0, i32 0, i32 17
  %18 = load %struct.workqueue_struct*, %struct.workqueue_struct** %ts_workq61, align 8, !tbaa !76
  %ts_reader62 = getelementptr inbounds %struct.wm97xx, %struct.wm97xx* %0, i32 0, i32 13
  %ts_reader_interval63 = getelementptr inbounds %struct.wm97xx, %struct.wm97xx* %0, i32 0, i32 14
  %19 = load i64, i64* %ts_reader_interval63, align 8, !tbaa !75
  call void @queue_delayed_work(%struct.workqueue_struct* %18, %struct.delayed_work* %ts_reader62, i64 %19)
  br label %cleanup

cleanup:                                          ; preds = %if.then60, %if.end57, %if.then
  %retval.0 = phi i32 [ -22, %if.then ], [ 0, %if.then60 ], [ 0, %if.end57 ]
  ret i32 %retval.0
}

; Function Attrs: nounwind uwtable
define internal void @wm97xx_ts_input_close(%struct.input_dev* %idev) #0 {
entry:
  %call = call i8* @input_get_drvdata(%struct.input_dev* %idev)
  %0 = bitcast i8* %call to %struct.wm97xx*
  %pen_irq = getelementptr inbounds %struct.wm97xx, %struct.wm97xx* %0, i32 0, i32 16
  %1 = load i32, i32* %pen_irq, align 8, !tbaa !73
  %tobool = icmp ne i32 %1, 0
  br i1 %tobool, label %if.then, label %if.end23

if.then:                                          ; preds = %entry
  %id = getelementptr inbounds %struct.wm97xx, %struct.wm97xx* %0, i32 0, i32 1
  %2 = load i16, i16* %id, align 2, !tbaa !23
  %conv = zext i16 %2 to i32
  %cmp = icmp ne i32 %conv, 19461
  br i1 %cmp, label %do.body, label %if.end21

do.body:                                          ; preds = %if.then
  %mach_ops = getelementptr inbounds %struct.wm97xx, %struct.wm97xx* %0, i32 0, i32 11
  %3 = load %struct.wm97xx_mach_ops*, %struct.wm97xx_mach_ops** %mach_ops, align 8, !tbaa !2
  %irq_gpio = getelementptr inbounds %struct.wm97xx_mach_ops, %struct.wm97xx_mach_ops* %3, i32 0, i32 6
  %4 = load i32, i32* %irq_gpio, align 8, !tbaa !89
  %tobool3 = icmp ne i32 %4, 0
  %lnot = xor i1 %tobool3, true
  %lnot4 = xor i1 %lnot, true
  %lnot5 = xor i1 %lnot4, true
  %lnot.ext = zext i1 %lnot5 to i32
  %conv6 = sext i32 %lnot.ext to i64
  %expval = call i64 @llvm.expect.i64(i64 %conv6, i64 0)
  %tobool7 = icmp ne i64 %expval, 0
  br i1 %tobool7, label %do.body9, label %do.end14

do.body9:                                         ; preds = %do.body
  call void asm sideeffect "1:\09ud2\0A.pushsection __bug_table,\22a\22\0A2:\09.long 1b - 2b, ${0:c} - 2b\0A\09.word ${1:c}, 0\0A\09.org 2b+${2:c}\0A.popsection", "i,i,i,~{dirflag},~{fpsr},~{flags}"(i8* getelementptr inbounds ([40 x i8], [40 x i8]* @.str.20, i32 0, i32 0), i32 556, i64 12) #6, !srcloc !90
  br label %do.body10

do.body10:                                        ; preds = %do.body10, %do.body9
  br label %do.body10

do.end14:                                         ; preds = %do.body
  %call15 = call i32 @wm97xx_reg_read(%struct.wm97xx* %0, i16 zeroext 86)
  %conv16 = trunc i32 %call15 to i16
  %conv17 = zext i16 %conv16 to i32
  %mach_ops18 = getelementptr inbounds %struct.wm97xx, %struct.wm97xx* %0, i32 0, i32 11
  %5 = load %struct.wm97xx_mach_ops*, %struct.wm97xx_mach_ops** %mach_ops18, align 8, !tbaa !2
  %irq_gpio19 = getelementptr inbounds %struct.wm97xx_mach_ops, %struct.wm97xx_mach_ops* %5, i32 0, i32 6
  %6 = load i32, i32* %irq_gpio19, align 8, !tbaa !89
  %or = or i32 %conv17, %6
  %conv20 = trunc i32 %or to i16
  call void @wm97xx_reg_write(%struct.wm97xx* %0, i16 zeroext 86, i16 zeroext %conv20)
  br label %if.end21

if.end21:                                         ; preds = %do.end14, %if.then
  %pen_irq22 = getelementptr inbounds %struct.wm97xx, %struct.wm97xx* %0, i32 0, i32 16
  %7 = load i32, i32* %pen_irq22, align 8, !tbaa !73
  %8 = bitcast %struct.wm97xx* %0 to i8*
  call void @free_irq(i32 %7, i8* %8)
  br label %if.end23

if.end23:                                         ; preds = %if.end21, %entry
  %pen_is_down = getelementptr inbounds %struct.wm97xx, %struct.wm97xx* %0, i32 0, i32 21
  %bf.load = load i8, i8* %pen_is_down, align 4
  %bf.clear = and i8 %bf.load, -2
  store i8 %bf.clear, i8* %pen_is_down, align 4
  %pen_event_work = getelementptr inbounds %struct.wm97xx, %struct.wm97xx* %0, i32 0, i32 18
  %call24 = call zeroext i1 @cancel_work_sync(%struct.work_struct* %pen_event_work)
  br i1 %call24, label %if.then25, label %if.end27

if.then25:                                        ; preds = %if.end23
  %mach_ops26 = getelementptr inbounds %struct.wm97xx, %struct.wm97xx* %0, i32 0, i32 11
  %9 = load %struct.wm97xx_mach_ops*, %struct.wm97xx_mach_ops** %mach_ops26, align 8, !tbaa !2
  %irq_enable = getelementptr inbounds %struct.wm97xx_mach_ops, %struct.wm97xx_mach_ops* %9, i32 0, i32 5
  %10 = load void (%struct.wm97xx*, i32)*, void (%struct.wm97xx*, i32)** %irq_enable, align 8, !tbaa !91
  call void %10(%struct.wm97xx* %0, i32 1)
  br label %if.end27

if.end27:                                         ; preds = %if.then25, %if.end23
  %ts_reader = getelementptr inbounds %struct.wm97xx, %struct.wm97xx* %0, i32 0, i32 13
  %call28 = call zeroext i1 @cancel_delayed_work_sync(%struct.delayed_work* %ts_reader)
  %ts_workq = getelementptr inbounds %struct.wm97xx, %struct.wm97xx* %0, i32 0, i32 17
  %11 = load %struct.workqueue_struct*, %struct.workqueue_struct** %ts_workq, align 8, !tbaa !76
  call void @destroy_workqueue(%struct.workqueue_struct* %11)
  %codec = getelementptr inbounds %struct.wm97xx, %struct.wm97xx* %0, i32 0, i32 5
  %12 = load %struct.wm97xx_codec_drv*, %struct.wm97xx_codec_drv** %codec, align 8, !tbaa !25
  %dig_enable = getelementptr inbounds %struct.wm97xx_codec_drv, %struct.wm97xx_codec_drv* %12, i32 0, i32 6
  %13 = load void (%struct.wm97xx*, i32)*, void (%struct.wm97xx*, i32)** %dig_enable, align 8, !tbaa !30
  call void %13(%struct.wm97xx* %0, i32 0)
  %mach_ops29 = getelementptr inbounds %struct.wm97xx, %struct.wm97xx* %0, i32 0, i32 11
  %14 = load %struct.wm97xx_mach_ops*, %struct.wm97xx_mach_ops** %mach_ops29, align 8, !tbaa !2
  %tobool30 = icmp ne %struct.wm97xx_mach_ops* %14, null
  br i1 %tobool30, label %land.lhs.true, label %if.end36

land.lhs.true:                                    ; preds = %if.end27
  %mach_ops31 = getelementptr inbounds %struct.wm97xx, %struct.wm97xx* %0, i32 0, i32 11
  %15 = load %struct.wm97xx_mach_ops*, %struct.wm97xx_mach_ops** %mach_ops31, align 8, !tbaa !2
  %acc_enabled = getelementptr inbounds %struct.wm97xx_mach_ops, %struct.wm97xx_mach_ops* %15, i32 0, i32 0
  %16 = load i32, i32* %acc_enabled, align 8, !tbaa !80
  %tobool32 = icmp ne i32 %16, 0
  br i1 %tobool32, label %if.then33, label %if.end36

if.then33:                                        ; preds = %land.lhs.true
  %codec34 = getelementptr inbounds %struct.wm97xx, %struct.wm97xx* %0, i32 0, i32 5
  %17 = load %struct.wm97xx_codec_drv*, %struct.wm97xx_codec_drv** %codec34, align 8, !tbaa !25
  %acc_enable = getelementptr inbounds %struct.wm97xx_codec_drv, %struct.wm97xx_codec_drv* %17, i32 0, i32 4
  %18 = load i32 (%struct.wm97xx*, i32)*, i32 (%struct.wm97xx*, i32)** %acc_enable, align 8, !tbaa !82
  %call35 = call i32 %18(%struct.wm97xx* %0, i32 0)
  br label %if.end36

if.end36:                                         ; preds = %if.then33, %land.lhs.true, %if.end27
  ret void
}

declare void @input_set_abs_params(%struct.input_dev*, i32, i32, i32, i32, i32) #1

; Function Attrs: inlinehint nounwind uwtable
define internal void @input_set_drvdata(%struct.input_dev* %dev, i8* %data) #4 {
entry:
  %dev1 = getelementptr inbounds %struct.input_dev, %struct.input_dev* %dev, i32 0, i32 39
  call void @dev_set_drvdata(%struct.device* %dev1, i8* %data)
  ret void
}

declare i32 @input_register_device(%struct.input_dev*) #1

declare %struct.platform_device* @platform_device_alloc(i8*, i32) #1

; Function Attrs: inlinehint nounwind uwtable
define internal void @platform_set_drvdata(%struct.platform_device* %pdev, i8* %data) #4 {
entry:
  %dev = getelementptr inbounds %struct.platform_device, %struct.platform_device* %pdev, i32 0, i32 3
  call void @dev_set_drvdata(%struct.device* %dev, i8* %data)
  ret void
}

declare i32 @platform_device_add(%struct.platform_device*) #1

declare void @platform_device_put(%struct.platform_device*) #1

declare void @platform_device_del(%struct.platform_device*) #1

declare void @input_free_device(%struct.input_dev*) #1

; Function Attrs: inlinehint nounwind uwtable
define internal i8* @input_get_drvdata(%struct.input_dev* %dev) #4 {
entry:
  %dev1 = getelementptr inbounds %struct.input_dev, %struct.input_dev* %dev, i32 0, i32 39
  %call = call i8* @dev_get_drvdata(%struct.device* %dev1)
  ret i8* %call
}

; Function Attrs: nounwind readnone
declare i64 @llvm.expect.i64(i64, i64) #5

declare void @free_irq(i32, i8*) #1

declare zeroext i1 @cancel_work_sync(%struct.work_struct*) #1

declare void @destroy_workqueue(%struct.workqueue_struct*) #1

declare %struct.workqueue_struct* @__alloc_workqueue_key(i8*, i32, i32, %struct.lock_class_key*, i8*, ...) #1

declare void @__init_work(%struct.work_struct*, i32) #1

; Function Attrs: argmemonly nounwind
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* nocapture writeonly, i8* nocapture readonly, i64, i32, i1) #2

declare void @lockdep_init_map(%struct.lockdep_map*, i8*, %struct.lock_class_key*, i32) #1

; Function Attrs: inlinehint nounwind uwtable
define internal void @INIT_LIST_HEAD(%struct.list_head* %list) #4 {
entry:
  %__u = alloca %union.anon.75, align 8
  %__val = bitcast %union.anon.75* %__u to %struct.list_head**
  store %struct.list_head* %list, %struct.list_head** %__val, align 8, !tbaa !92
  %next = getelementptr inbounds %struct.list_head, %struct.list_head* %list, i32 0, i32 0
  %0 = bitcast %struct.list_head** %next to i8*
  %__c = bitcast %union.anon.75* %__u to [1 x i8]*
  %arraydecay = getelementptr inbounds [1 x i8], [1 x i8]* %__c, i32 0, i32 0
  %1 = bitcast i8* %arraydecay to i64*
  %2 = load i64, i64* %1, align 8, !tbaa !93
  %3 = bitcast i8* %0 to i64*
  store volatile i64 %2, i64* %3, align 8, !tbaa !93
  %prev = getelementptr inbounds %struct.list_head, %struct.list_head* %list, i32 0, i32 1
  store %struct.list_head* %list, %struct.list_head** %prev, align 8, !tbaa !94
  ret void
}

; Function Attrs: nounwind uwtable
define internal void @wm97xx_ts_reader(%struct.work_struct* %work) #0 {
entry:
  %0 = bitcast %struct.work_struct* %work to i8*
  %add.ptr = getelementptr inbounds i8, i8* %0, i64 -248
  %1 = bitcast i8* %add.ptr to %struct.wm97xx*
  %codec = getelementptr inbounds %struct.wm97xx, %struct.wm97xx* %1, i32 0, i32 5
  %2 = load %struct.wm97xx_codec_drv*, %struct.wm97xx_codec_drv** %codec, align 8, !tbaa !25
  %tobool = icmp ne %struct.wm97xx_codec_drv* %2, null
  %lnot = xor i1 %tobool, true
  %lnot1 = xor i1 %lnot, true
  %lnot2 = xor i1 %lnot1, true
  %lnot.ext = zext i1 %lnot2 to i32
  %conv = sext i32 %lnot.ext to i64
  %expval = call i64 @llvm.expect.i64(i64 %conv, i64 0)
  %tobool3 = icmp ne i64 %expval, 0
  br i1 %tobool3, label %do.body4, label %do.end9

do.body4:                                         ; preds = %entry
  call void asm sideeffect "1:\09ud2\0A.pushsection __bug_table,\22a\22\0A2:\09.long 1b - 2b, ${0:c} - 2b\0A\09.word ${1:c}, 0\0A\09.org 2b+${2:c}\0A.popsection", "i,i,i,~{dirflag},~{fpsr},~{flags}"(i8* getelementptr inbounds ([40 x i8], [40 x i8]* @.str.20, i32 0, i32 0), i32 481, i64 12) #6, !srcloc !95
  br label %do.body5

do.body5:                                         ; preds = %do.body5, %do.body4
  br label %do.body5

do.end9:                                          ; preds = %entry
  br label %do.body10

do.body10:                                        ; preds = %do.body10, %do.end9
  %call = call i32 @wm97xx_read_samples(%struct.wm97xx* %1)
  %and = and i32 %call, 1
  %tobool12 = icmp ne i32 %and, 0
  br i1 %tobool12, label %do.body10, label %do.end13

do.end13:                                         ; preds = %do.body10
  %pen_is_down = getelementptr inbounds %struct.wm97xx, %struct.wm97xx* %1, i32 0, i32 21
  %bf.load = load i8, i8* %pen_is_down, align 4
  %bf.clear = and i8 %bf.load, 1
  %bf.cast = zext i8 %bf.clear to i32
  %tobool14 = icmp ne i32 %bf.cast, 0
  br i1 %tobool14, label %if.then16, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %do.end13
  %pen_irq = getelementptr inbounds %struct.wm97xx, %struct.wm97xx* %1, i32 0, i32 16
  %3 = load i32, i32* %pen_irq, align 8, !tbaa !73
  %tobool15 = icmp ne i32 %3, 0
  br i1 %tobool15, label %if.end18, label %if.then16

if.then16:                                        ; preds = %lor.lhs.false, %do.end13
  %ts_workq = getelementptr inbounds %struct.wm97xx, %struct.wm97xx* %1, i32 0, i32 17
  %4 = load %struct.workqueue_struct*, %struct.workqueue_struct** %ts_workq, align 8, !tbaa !76
  %ts_reader = getelementptr inbounds %struct.wm97xx, %struct.wm97xx* %1, i32 0, i32 13
  %ts_reader_interval = getelementptr inbounds %struct.wm97xx, %struct.wm97xx* %1, i32 0, i32 14
  %5 = load i64, i64* %ts_reader_interval, align 8, !tbaa !75
  call void @queue_delayed_work(%struct.workqueue_struct* %4, %struct.delayed_work* %ts_reader, i64 %5)
  br label %if.end18

if.end18:                                         ; preds = %if.then16, %lor.lhs.false
  ret void
}

declare void @init_timer_key(%struct.timer_list*, i32, i8*, %struct.lock_class_key*) #1

declare void @delayed_work_timer_fn(i64) #1

; Function Attrs: nounwind uwtable
define internal void @wm97xx_pen_irq_worker(%struct.work_struct* %work) #0 {
entry:
  %0 = bitcast %struct.work_struct* %work to i8*
  %add.ptr = getelementptr inbounds i8, i8* %0, i64 -472
  %1 = bitcast i8* %add.ptr to %struct.wm97xx*
  %pen_is_down = getelementptr inbounds %struct.wm97xx, %struct.wm97xx* %1, i32 0, i32 21
  %bf.load = load i8, i8* %pen_is_down, align 4
  %bf.clear = and i8 %bf.load, 1
  %bf.cast = zext i8 %bf.clear to i32
  %id = getelementptr inbounds %struct.wm97xx, %struct.wm97xx* %1, i32 0, i32 1
  %2 = load i16, i16* %id, align 2, !tbaa !23
  %conv = zext i16 %2 to i32
  %cmp = icmp eq i32 %conv, 19461
  br i1 %cmp, label %if.then, label %if.else9

if.then:                                          ; preds = %entry
  %call = call i32 @wm97xx_reg_read(%struct.wm97xx* %1, i16 zeroext 122)
  %and = and i32 %call, 32768
  %tobool = icmp ne i32 %and, 0
  %pen_is_down3 = getelementptr inbounds %struct.wm97xx, %struct.wm97xx* %1, i32 0, i32 21
  %bf.load4 = load i8, i8* %pen_is_down3, align 4
  %bf.clear5 = and i8 %bf.load4, -2
  %bf.set = or i8 %bf.clear5, 1
  %bf.clear5.sink = select i1 %tobool, i8 %bf.set, i8 %bf.clear5
  store i8 %bf.clear5.sink, i8* %pen_is_down3, align 4
  br label %if.end51

if.else9:                                         ; preds = %entry
  %codec_mutex = getelementptr inbounds %struct.wm97xx, %struct.wm97xx* %1, i32 0, i32 12
  call void @mutex_lock_nested(%struct.mutex* %codec_mutex, i32 0)
  %call10 = call i32 @wm97xx_reg_read(%struct.wm97xx* %1, i16 zeroext 84)
  %conv11 = trunc i32 %call10 to i16
  %call12 = call i32 @wm97xx_reg_read(%struct.wm97xx* %1, i16 zeroext 78)
  %conv13 = trunc i32 %call12 to i16
  %conv14 = zext i16 %conv13 to i32
  %and15 = and i32 8192, %conv14
  %conv16 = zext i16 %conv11 to i32
  %and17 = and i32 %and15, %conv16
  %tobool18 = icmp ne i32 %and17, 0
  %pen_is_down20 = getelementptr inbounds %struct.wm97xx, %struct.wm97xx* %1, i32 0, i32 21
  %bf.load21 = load i8, i8* %pen_is_down20, align 4
  %bf.clear22 = and i8 %bf.load21, -2
  br i1 %tobool18, label %if.then19, label %if.else27

if.then19:                                        ; preds = %if.else9
  %bf.set23 = or i8 %bf.clear22, 1
  store i8 %bf.set23, i8* %pen_is_down20, align 4
  %conv24 = zext i16 %conv13 to i32
  %and25 = and i32 %conv24, -8193
  %conv26 = trunc i32 %and25 to i16
  call void @wm97xx_reg_write(%struct.wm97xx* %1, i16 zeroext 78, i16 zeroext %conv26)
  br label %if.end33

if.else27:                                        ; preds = %if.else9
  store i8 %bf.clear22, i8* %pen_is_down20, align 4
  %conv31 = zext i16 %conv13 to i32
  %or = or i32 %conv31, 8192
  %conv32 = trunc i32 %or to i16
  call void @wm97xx_reg_write(%struct.wm97xx* %1, i16 zeroext 78, i16 zeroext %conv32)
  br label %if.end33

if.end33:                                         ; preds = %if.else27, %if.then19
  %id34 = getelementptr inbounds %struct.wm97xx, %struct.wm97xx* %1, i32 0, i32 1
  %3 = load i16, i16* %id34, align 2, !tbaa !23
  %conv35 = zext i16 %3 to i32
  %cmp36 = icmp eq i32 %conv35, 19474
  br i1 %cmp36, label %land.lhs.true, label %if.else45

land.lhs.true:                                    ; preds = %if.end33
  %variant = getelementptr inbounds %struct.wm97xx, %struct.wm97xx* %1, i32 0, i32 22
  %4 = load i16, i16* %variant, align 2, !tbaa !24
  %conv38 = zext i16 %4 to i32
  %cmp39 = icmp ne i32 %conv38, 5651
  br i1 %cmp39, label %if.then41, label %if.else45

if.then41:                                        ; preds = %land.lhs.true
  %conv42 = zext i16 %conv11 to i32
  %and43 = and i32 %conv42, -8193
  %shl = shl i32 %and43, 1
  %conv44 = trunc i32 %shl to i16
  call void @wm97xx_reg_write(%struct.wm97xx* %1, i16 zeroext 84, i16 zeroext %conv44)
  br label %if.end49

if.else45:                                        ; preds = %land.lhs.true, %if.end33
  %conv46 = zext i16 %conv11 to i32
  %and47 = and i32 %conv46, -8193
  %conv48 = trunc i32 %and47 to i16
  call void @wm97xx_reg_write(%struct.wm97xx* %1, i16 zeroext 84, i16 zeroext %conv48)
  br label %if.end49

if.end49:                                         ; preds = %if.else45, %if.then41
  %codec_mutex50 = getelementptr inbounds %struct.wm97xx, %struct.wm97xx* %1, i32 0, i32 12
  call void @mutex_unlock(%struct.mutex* %codec_mutex50)
  br label %if.end51

if.end51:                                         ; preds = %if.end49, %if.then
  %mach_ops = getelementptr inbounds %struct.wm97xx, %struct.wm97xx* %1, i32 0, i32 11
  %5 = load %struct.wm97xx_mach_ops*, %struct.wm97xx_mach_ops** %mach_ops, align 8, !tbaa !2
  %acc_enabled = getelementptr inbounds %struct.wm97xx_mach_ops, %struct.wm97xx_mach_ops* %5, i32 0, i32 0
  %6 = load i32, i32* %acc_enabled, align 8, !tbaa !80
  %tobool52 = icmp ne i32 %6, 0
  br i1 %tobool52, label %lor.lhs.false, label %if.then55

lor.lhs.false:                                    ; preds = %if.end51
  %mach_ops53 = getelementptr inbounds %struct.wm97xx, %struct.wm97xx* %1, i32 0, i32 11
  %7 = load %struct.wm97xx_mach_ops*, %struct.wm97xx_mach_ops** %mach_ops53, align 8, !tbaa !2
  %acc_pen_down = getelementptr inbounds %struct.wm97xx_mach_ops, %struct.wm97xx_mach_ops* %7, i32 0, i32 2
  %8 = load i32 (%struct.wm97xx*)*, i32 (%struct.wm97xx*)** %acc_pen_down, align 8, !tbaa !96
  %tobool54 = icmp ne i32 (%struct.wm97xx*)* %8, null
  br i1 %tobool54, label %if.then55, label %if.end79

if.then55:                                        ; preds = %lor.lhs.false, %if.end51
  %pen_is_down56 = getelementptr inbounds %struct.wm97xx, %struct.wm97xx* %1, i32 0, i32 21
  %bf.load57 = load i8, i8* %pen_is_down56, align 4
  %bf.clear58 = and i8 %bf.load57, 1
  %bf.cast59 = zext i8 %bf.clear58 to i32
  %tobool60 = icmp eq i32 %bf.cast59, 0
  %tobool62 = icmp ne i32 %bf.cast, 0
  %or.cond = or i1 %tobool60, %tobool62
  br i1 %or.cond, label %if.end65, label %if.then63

if.then63:                                        ; preds = %if.then55
  %ts_workq = getelementptr inbounds %struct.wm97xx, %struct.wm97xx* %1, i32 0, i32 17
  %9 = load %struct.workqueue_struct*, %struct.workqueue_struct** %ts_workq, align 8, !tbaa !76
  %ts_reader = getelementptr inbounds %struct.wm97xx, %struct.wm97xx* %1, i32 0, i32 13
  call void @queue_delayed_work(%struct.workqueue_struct* %9, %struct.delayed_work* %ts_reader, i64 1)
  br label %if.end65

if.end65:                                         ; preds = %if.then63, %if.then55
  %pen_is_down66 = getelementptr inbounds %struct.wm97xx, %struct.wm97xx* %1, i32 0, i32 21
  %bf.load67 = load i8, i8* %pen_is_down66, align 4
  %bf.clear68 = and i8 %bf.load67, 1
  %bf.cast69 = zext i8 %bf.clear68 to i32
  %tobool70 = icmp eq i32 %bf.cast69, 0
  %tobool72 = icmp ne i32 %bf.cast, 0
  %or.cond1 = and i1 %tobool70, %tobool72
  br i1 %or.cond1, label %if.then73, label %if.end79

if.then73:                                        ; preds = %if.end65
  %pen_is_down74 = getelementptr inbounds %struct.wm97xx, %struct.wm97xx* %1, i32 0, i32 21
  %bf.load75 = load i8, i8* %pen_is_down74, align 4
  %bf.clear76 = and i8 %bf.load75, -2
  %bf.set77 = or i8 %bf.clear76, 1
  store i8 %bf.set77, i8* %pen_is_down74, align 4
  br label %if.end79

if.end79:                                         ; preds = %if.then73, %if.end65, %lor.lhs.false
  %pen_is_down80 = getelementptr inbounds %struct.wm97xx, %struct.wm97xx* %1, i32 0, i32 21
  %bf.load81 = load i8, i8* %pen_is_down80, align 4
  %bf.clear82 = and i8 %bf.load81, 1
  %bf.cast83 = zext i8 %bf.clear82 to i32
  %tobool84 = icmp ne i32 %bf.cast83, 0
  br i1 %tobool84, label %if.end91, label %land.lhs.true85

land.lhs.true85:                                  ; preds = %if.end79
  %mach_ops86 = getelementptr inbounds %struct.wm97xx, %struct.wm97xx* %1, i32 0, i32 11
  %10 = load %struct.wm97xx_mach_ops*, %struct.wm97xx_mach_ops** %mach_ops86, align 8, !tbaa !2
  %acc_enabled87 = getelementptr inbounds %struct.wm97xx_mach_ops, %struct.wm97xx_mach_ops* %10, i32 0, i32 0
  %11 = load i32, i32* %acc_enabled87, align 8, !tbaa !80
  %tobool88 = icmp ne i32 %11, 0
  br i1 %tobool88, label %if.then89, label %if.end91

if.then89:                                        ; preds = %land.lhs.true85
  %mach_ops90 = getelementptr inbounds %struct.wm97xx, %struct.wm97xx* %1, i32 0, i32 11
  %12 = load %struct.wm97xx_mach_ops*, %struct.wm97xx_mach_ops** %mach_ops90, align 8, !tbaa !2
  %acc_pen_up = getelementptr inbounds %struct.wm97xx_mach_ops, %struct.wm97xx_mach_ops* %12, i32 0, i32 1
  %13 = load void (%struct.wm97xx*)*, void (%struct.wm97xx*)** %acc_pen_up, align 8, !tbaa !97
  call void %13(%struct.wm97xx* %1)
  br label %if.end91

if.end91:                                         ; preds = %if.then89, %land.lhs.true85, %if.end79
  %mach_ops92 = getelementptr inbounds %struct.wm97xx, %struct.wm97xx* %1, i32 0, i32 11
  %14 = load %struct.wm97xx_mach_ops*, %struct.wm97xx_mach_ops** %mach_ops92, align 8, !tbaa !2
  %irq_enable = getelementptr inbounds %struct.wm97xx_mach_ops, %struct.wm97xx_mach_ops* %14, i32 0, i32 5
  %15 = load void (%struct.wm97xx*, i32)*, void (%struct.wm97xx*, i32)** %irq_enable, align 8, !tbaa !91
  call void %15(%struct.wm97xx* %1, i32 1)
  ret void
}

; Function Attrs: nounwind uwtable
define internal void @wm97xx_init_pen_irq(%struct.wm97xx* %wm) #0 {
entry:
  %mach_ops = getelementptr inbounds %struct.wm97xx, %struct.wm97xx* %wm, i32 0, i32 11
  %0 = load %struct.wm97xx_mach_ops*, %struct.wm97xx_mach_ops** %mach_ops, align 8, !tbaa !2
  %irq_enable = getelementptr inbounds %struct.wm97xx_mach_ops, %struct.wm97xx_mach_ops* %0, i32 0, i32 5
  %1 = load void (%struct.wm97xx*, i32)*, void (%struct.wm97xx*, i32)** %irq_enable, align 8, !tbaa !91
  %tobool = icmp ne void (%struct.wm97xx*, i32)* %1, null
  %lnot = xor i1 %tobool, true
  %lnot1 = xor i1 %lnot, true
  %lnot2 = xor i1 %lnot1, true
  %lnot.ext = zext i1 %lnot2 to i32
  %conv = sext i32 %lnot.ext to i64
  %expval = call i64 @llvm.expect.i64(i64 %conv, i64 0)
  %tobool3 = icmp ne i64 %expval, 0
  br i1 %tobool3, label %do.body4, label %do.end9

do.body4:                                         ; preds = %entry
  call void asm sideeffect "1:\09ud2\0A.pushsection __bug_table,\22a\22\0A2:\09.long 1b - 2b, ${0:c} - 2b\0A\09.word ${1:c}, 0\0A\09.org 2b+${2:c}\0A.popsection", "i,i,i,~{dirflag},~{fpsr},~{flags}"(i8* getelementptr inbounds ([40 x i8], [40 x i8]* @.str.20, i32 0, i32 0), i32 383, i64 12) #6, !srcloc !98
  br label %do.body5

do.body5:                                         ; preds = %do.body5, %do.body4
  br label %do.body5

do.end9:                                          ; preds = %entry
  %pen_irq = getelementptr inbounds %struct.wm97xx, %struct.wm97xx* %wm, i32 0, i32 16
  %2 = load i32, i32* %pen_irq, align 8, !tbaa !73
  %3 = bitcast %struct.wm97xx* %wm to i8*
  %call = call i32 @request_irq(i32 %2, i32 (i32, i8*)* @wm97xx_pen_interrupt, i64 128, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.29, i32 0, i32 0), i8* %3)
  %tobool10 = icmp ne i32 %call, 0
  br i1 %tobool10, label %if.then11, label %if.end13

if.then11:                                        ; preds = %do.end9
  call void (%struct.device*, i8*, ...) @dev_err(%struct.device* null, i8* null)
  %pen_irq12 = getelementptr inbounds %struct.wm97xx, %struct.wm97xx* %wm, i32 0, i32 16
  store i32 0, i32* %pen_irq12, align 8, !tbaa !73
  br label %cleanup

if.end13:                                         ; preds = %do.end9
  %id = getelementptr inbounds %struct.wm97xx, %struct.wm97xx* %wm, i32 0, i32 1
  %4 = load i16, i16* %id, align 2, !tbaa !23
  %conv14 = zext i16 %4 to i32
  %cmp = icmp ne i32 %conv14, 19461
  br i1 %cmp, label %do.body17, label %cleanup

do.body17:                                        ; preds = %if.end13
  %mach_ops18 = getelementptr inbounds %struct.wm97xx, %struct.wm97xx* %wm, i32 0, i32 11
  %5 = load %struct.wm97xx_mach_ops*, %struct.wm97xx_mach_ops** %mach_ops18, align 8, !tbaa !2
  %irq_gpio = getelementptr inbounds %struct.wm97xx_mach_ops, %struct.wm97xx_mach_ops* %5, i32 0, i32 6
  %6 = load i32, i32* %irq_gpio, align 8, !tbaa !89
  %tobool19 = icmp ne i32 %6, 0
  %lnot20 = xor i1 %tobool19, true
  %lnot22 = xor i1 %lnot20, true
  %lnot24 = xor i1 %lnot22, true
  %lnot.ext25 = zext i1 %lnot24 to i32
  %conv26 = sext i32 %lnot.ext25 to i64
  %expval27 = call i64 @llvm.expect.i64(i64 %conv26, i64 0)
  %tobool28 = icmp ne i64 %expval27, 0
  br i1 %tobool28, label %do.body30, label %do.end38

do.body30:                                        ; preds = %do.body17
  call void asm sideeffect "1:\09ud2\0A.pushsection __bug_table,\22a\22\0A2:\09.long 1b - 2b, ${0:c} - 2b\0A\09.word ${1:c}, 0\0A\09.org 2b+${2:c}\0A.popsection", "i,i,i,~{dirflag},~{fpsr},~{flags}"(i8* getelementptr inbounds ([40 x i8], [40 x i8]* @.str.20, i32 0, i32 0), i32 395, i64 12) #6, !srcloc !99
  br label %do.body31

do.body31:                                        ; preds = %do.body31, %do.body30
  br label %do.body31

do.end38:                                         ; preds = %do.body17
  %call39 = call i32 @wm97xx_reg_read(%struct.wm97xx* %wm, i16 zeroext 86)
  %conv40 = trunc i32 %call39 to i16
  %conv41 = zext i16 %conv40 to i32
  %mach_ops42 = getelementptr inbounds %struct.wm97xx, %struct.wm97xx* %wm, i32 0, i32 11
  %7 = load %struct.wm97xx_mach_ops*, %struct.wm97xx_mach_ops** %mach_ops42, align 8, !tbaa !2
  %irq_gpio43 = getelementptr inbounds %struct.wm97xx_mach_ops, %struct.wm97xx_mach_ops* %7, i32 0, i32 6
  %8 = load i32, i32* %irq_gpio43, align 8, !tbaa !89
  %neg = xor i32 %8, -1
  %and = and i32 %conv41, %neg
  %conv44 = trunc i32 %and to i16
  call void @wm97xx_reg_write(%struct.wm97xx* %wm, i16 zeroext 86, i16 zeroext %conv44)
  %call45 = call i32 @wm97xx_reg_read(%struct.wm97xx* %wm, i16 zeroext 90)
  %conv46 = trunc i32 %call45 to i16
  %conv47 = zext i16 %conv46 to i32
  %and48 = and i32 %conv47, -2
  %conv49 = trunc i32 %and48 to i16
  call void @wm97xx_reg_write(%struct.wm97xx* %wm, i16 zeroext 90, i16 zeroext %conv49)
  br label %cleanup

cleanup:                                          ; preds = %do.end38, %if.end13, %if.then11
  ret void
}

; Function Attrs: nounwind uwtable
define internal i32 @wm97xx_pen_interrupt(i32 %irq, i8* %dev_id) #0 {
entry:
  %0 = bitcast i8* %dev_id to %struct.wm97xx*
  %pen_event_work = getelementptr inbounds %struct.wm97xx, %struct.wm97xx* %0, i32 0, i32 18
  %data = getelementptr inbounds %struct.work_struct, %struct.work_struct* %pen_event_work, i32 0, i32 0
  %1 = bitcast %union.anon.3* %data to i64*
  %2 = load volatile i64, i64* %1, align 8, !tbaa !85
  %and1.i = and i64 1, %2
  %cmp.i = icmp ne i64 %and1.i, 0
  br i1 %cmp.i, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  %mach_ops = getelementptr inbounds %struct.wm97xx, %struct.wm97xx* %0, i32 0, i32 11
  %3 = load %struct.wm97xx_mach_ops*, %struct.wm97xx_mach_ops** %mach_ops, align 8, !tbaa !2
  %irq_enable = getelementptr inbounds %struct.wm97xx_mach_ops, %struct.wm97xx_mach_ops* %3, i32 0, i32 5
  %4 = load void (%struct.wm97xx*, i32)*, void (%struct.wm97xx*, i32)** %irq_enable, align 8, !tbaa !91
  call void %4(%struct.wm97xx* %0, i32 0)
  %ts_workq = getelementptr inbounds %struct.wm97xx, %struct.wm97xx* %0, i32 0, i32 17
  %5 = load %struct.workqueue_struct*, %struct.workqueue_struct** %ts_workq, align 8, !tbaa !76
  %pen_event_work4 = getelementptr inbounds %struct.wm97xx, %struct.wm97xx* %0, i32 0, i32 18
  call void @queue_work(%struct.workqueue_struct* %5, %struct.work_struct* %pen_event_work4)
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  ret i32 1
}

; Function Attrs: inlinehint nounwind uwtable
define internal i32 @request_irq(i32 %irq, i32 (i32, i8*)* %handler, i64 %flags, i8* %name, i8* %dev) #4 {
entry:
  %call = call i32 @request_threaded_irq(i32 %irq, i32 (i32, i8*)* %handler, i32 (i32, i8*)* null, i64 %flags, i8* %name, i8* %dev)
  ret i32 %call
}

declare i32 @request_threaded_irq(i32, i32 (i32, i8*)*, i32 (i32, i8*)*, i64, i8*, i8*) #1

; Function Attrs: inlinehint nounwind uwtable
define internal void @queue_work(%struct.workqueue_struct* %wq, %struct.work_struct* %work) #4 {
entry:
  %call = call zeroext i1 @queue_work_on(i32 8192, %struct.workqueue_struct* %wq, %struct.work_struct* %work)
  ret void
}

declare zeroext i1 @queue_work_on(i32, %struct.workqueue_struct*, %struct.work_struct*) #1

; Function Attrs: nounwind uwtable
define internal i32 @wm97xx_read_samples(%struct.wm97xx* %wm) #0 {
entry:
  %data = alloca %struct.exception_table_entry, align 4
  %codec_mutex = getelementptr inbounds %struct.wm97xx, %struct.wm97xx* %wm, i32 0, i32 12
  call void @mutex_lock_nested(%struct.mutex* %codec_mutex, i32 0)
  %mach_ops = getelementptr inbounds %struct.wm97xx, %struct.wm97xx* %wm, i32 0, i32 11
  %0 = load %struct.wm97xx_mach_ops*, %struct.wm97xx_mach_ops** %mach_ops, align 8, !tbaa !2
  %tobool = icmp ne %struct.wm97xx_mach_ops* %0, null
  br i1 %tobool, label %land.lhs.true, label %if.else

land.lhs.true:                                    ; preds = %entry
  %mach_ops1 = getelementptr inbounds %struct.wm97xx, %struct.wm97xx* %wm, i32 0, i32 11
  %1 = load %struct.wm97xx_mach_ops*, %struct.wm97xx_mach_ops** %mach_ops1, align 8, !tbaa !2
  %acc_enabled = getelementptr inbounds %struct.wm97xx_mach_ops, %struct.wm97xx_mach_ops* %1, i32 0, i32 0
  %2 = load i32, i32* %acc_enabled, align 8, !tbaa !80
  %tobool2 = icmp ne i32 %2, 0
  br i1 %tobool2, label %if.then, label %if.else

if.then:                                          ; preds = %land.lhs.true
  %mach_ops3 = getelementptr inbounds %struct.wm97xx, %struct.wm97xx* %wm, i32 0, i32 11
  %3 = load %struct.wm97xx_mach_ops*, %struct.wm97xx_mach_ops** %mach_ops3, align 8, !tbaa !2
  %acc_pen_down = getelementptr inbounds %struct.wm97xx_mach_ops, %struct.wm97xx_mach_ops* %3, i32 0, i32 2
  %4 = load i32 (%struct.wm97xx*)*, i32 (%struct.wm97xx*)** %acc_pen_down, align 8, !tbaa !96
  %call = call i32 %4(%struct.wm97xx* %wm)
  br label %if.end

if.else:                                          ; preds = %land.lhs.true, %entry
  %codec = getelementptr inbounds %struct.wm97xx, %struct.wm97xx* %wm, i32 0, i32 5
  %5 = load %struct.wm97xx_codec_drv*, %struct.wm97xx_codec_drv** %codec, align 8, !tbaa !25
  %poll_touch = getelementptr inbounds %struct.wm97xx_codec_drv, %struct.wm97xx_codec_drv* %5, i32 0, i32 3
  %6 = load i32 (%struct.wm97xx*, %struct.exception_table_entry*)*, i32 (%struct.wm97xx*, %struct.exception_table_entry*)** %poll_touch, align 8, !tbaa !100
  %call4 = call i32 %6(%struct.wm97xx* %wm, %struct.exception_table_entry* %data)
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then
  %rc.0 = phi i32 [ %call, %if.then ], [ %call4, %if.else ]
  %and = and i32 %rc.0, 4
  %tobool5 = icmp ne i32 %and, 0
  br i1 %tobool5, label %if.then6, label %if.else35

if.then6:                                         ; preds = %if.end
  %pen_is_down = getelementptr inbounds %struct.wm97xx, %struct.wm97xx* %wm, i32 0, i32 21
  %bf.load = load i8, i8* %pen_is_down, align 4
  %bf.clear = and i8 %bf.load, 1
  %bf.cast = zext i8 %bf.clear to i32
  %tobool7 = icmp ne i32 %bf.cast, 0
  br i1 %tobool7, label %if.then8, label %if.else25

if.then8:                                         ; preds = %if.then6
  %pen_is_down9 = getelementptr inbounds %struct.wm97xx, %struct.wm97xx* %wm, i32 0, i32 21
  %bf.load10 = load i8, i8* %pen_is_down9, align 4
  %bf.clear11 = and i8 %bf.load10, -2
  store i8 %bf.clear11, i8* %pen_is_down9, align 4
  %bf.load13 = load i32, i32* getelementptr inbounds (%struct._ddebug, %struct._ddebug* bitcast ({ i8*, i8*, i8*, i8*, i8, i8, i8, i8 }* @wm97xx_read_samples.descriptor to %struct._ddebug*), i32 0, i32 4), align 8
  %bf.lshr = lshr i32 %bf.load13, 18
  %bf.clear14 = and i32 %bf.lshr, 255
  %and15 = and i32 %bf.clear14, 1
  %tobool16 = icmp ne i32 %and15, 0
  %lnot = xor i1 %tobool16, true
  %lnot17 = xor i1 %lnot, true
  %lnot.ext = zext i1 %lnot17 to i32
  %conv = sext i32 %lnot.ext to i64
  %expval = call i64 @llvm.expect.i64(i64 %conv, i64 0)
  %tobool18 = icmp ne i64 %expval, 0
  br i1 %tobool18, label %if.then19, label %do.end22

if.then19:                                        ; preds = %if.then8
  %dev = getelementptr inbounds %struct.wm97xx, %struct.wm97xx* %wm, i32 0, i32 8
  %7 = load %struct.device*, %struct.device** %dev, align 8, !tbaa !31
  call void (%struct._ddebug*, %struct.device*, i8*, ...) @__dynamic_dev_dbg(%struct._ddebug* bitcast ({ i8*, i8*, i8*, i8*, i8, i8, i8, i8 }* @wm97xx_read_samples.descriptor to %struct._ddebug*), %struct.device* %7, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.22, i32 0, i32 0))
  br label %do.end22

do.end22:                                         ; preds = %if.then19, %if.then8
  %input_dev = getelementptr inbounds %struct.wm97xx, %struct.wm97xx* %wm, i32 0, i32 6
  %8 = load %struct.input_dev*, %struct.input_dev** %input_dev, align 8, !tbaa !22
  call void @input_report_abs(%struct.input_dev* %8, i32 24, i32 0)
  %input_dev23 = getelementptr inbounds %struct.wm97xx, %struct.wm97xx* %wm, i32 0, i32 6
  %9 = load %struct.input_dev*, %struct.input_dev** %input_dev23, align 8, !tbaa !22
  call void @input_report_key(%struct.input_dev* %9, i32 330, i32 0)
  %input_dev24 = getelementptr inbounds %struct.wm97xx, %struct.wm97xx* %wm, i32 0, i32 6
  %10 = load %struct.input_dev*, %struct.input_dev** %input_dev24, align 8, !tbaa !22
  call void @input_sync(%struct.input_dev* %10)
  br label %out

if.else25:                                        ; preds = %if.then6
  %and26 = and i32 %rc.0, 1
  %tobool27 = icmp ne i32 %and26, 0
  br i1 %tobool27, label %out, label %if.then28

if.then28:                                        ; preds = %if.else25
  %ts_reader_interval = getelementptr inbounds %struct.wm97xx, %struct.wm97xx* %wm, i32 0, i32 14
  %11 = load i64, i64* %ts_reader_interval, align 8, !tbaa !75
  %cmp = icmp ult i64 %11, 25
  br i1 %cmp, label %if.then30, label %out

if.then30:                                        ; preds = %if.then28
  %ts_reader_interval31 = getelementptr inbounds %struct.wm97xx, %struct.wm97xx* %wm, i32 0, i32 14
  %12 = load i64, i64* %ts_reader_interval31, align 8, !tbaa !75
  %inc = add i64 %12, 1
  store i64 %inc, i64* %ts_reader_interval31, align 8, !tbaa !75
  br label %out

if.else35:                                        ; preds = %if.end
  %and36 = and i32 %rc.0, 2
  %tobool37 = icmp ne i32 %and36, 0
  br i1 %tobool37, label %do.body40, label %if.else124

do.body40:                                        ; preds = %if.else35
  %bf.load41 = load i32, i32* getelementptr inbounds (%struct._ddebug, %struct._ddebug* bitcast ({ i8*, i8*, i8*, i8*, i8, i8, i8, i8 }* @wm97xx_read_samples.descriptor.23 to %struct._ddebug*), i32 0, i32 4), align 8
  %bf.lshr42 = lshr i32 %bf.load41, 18
  %bf.clear43 = and i32 %bf.lshr42, 255
  %and44 = and i32 %bf.clear43, 1
  %tobool45 = icmp ne i32 %and44, 0
  %lnot46 = xor i1 %tobool45, true
  %lnot48 = xor i1 %lnot46, true
  %lnot.ext49 = zext i1 %lnot48 to i32
  %conv50 = sext i32 %lnot.ext49 to i64
  %expval51 = call i64 @llvm.expect.i64(i64 %conv50, i64 0)
  %tobool52 = icmp ne i64 %expval51, 0
  br i1 %tobool52, label %if.then53, label %do.end67

if.then53:                                        ; preds = %do.body40
  %dev54 = getelementptr inbounds %struct.wm97xx, %struct.wm97xx* %wm, i32 0, i32 8
  %13 = load %struct.device*, %struct.device** %dev54, align 8, !tbaa !31
  %x = getelementptr inbounds %struct.exception_table_entry, %struct.exception_table_entry* %data, i32 0, i32 0
  %14 = load i32, i32* %x, align 4, !tbaa !101
  %shr = ashr i32 %14, 12
  %x55 = getelementptr inbounds %struct.exception_table_entry, %struct.exception_table_entry* %data, i32 0, i32 0
  %15 = load i32, i32* %x55, align 4, !tbaa !101
  %and56 = and i32 %15, 4095
  %y = getelementptr inbounds %struct.exception_table_entry, %struct.exception_table_entry* %data, i32 0, i32 1
  %16 = load i32, i32* %y, align 4, !tbaa !103
  %shr57 = ashr i32 %16, 12
  %y58 = getelementptr inbounds %struct.exception_table_entry, %struct.exception_table_entry* %data, i32 0, i32 1
  %17 = load i32, i32* %y58, align 4, !tbaa !103
  %and59 = and i32 %17, 4095
  %p = getelementptr inbounds %struct.exception_table_entry, %struct.exception_table_entry* %data, i32 0, i32 2
  %18 = load i32, i32* %p, align 4, !tbaa !104
  %shr60 = ashr i32 %18, 12
  %p61 = getelementptr inbounds %struct.exception_table_entry, %struct.exception_table_entry* %data, i32 0, i32 2
  %19 = load i32, i32* %p61, align 4, !tbaa !104
  %and62 = and i32 %19, 4095
  call void (%struct._ddebug*, %struct.device*, i8*, ...) @__dynamic_dev_dbg(%struct._ddebug* bitcast ({ i8*, i8*, i8*, i8*, i8, i8, i8, i8 }* @wm97xx_read_samples.descriptor.23 to %struct._ddebug*), %struct.device* %13, i8* getelementptr inbounds ([44 x i8], [44 x i8]* @.str.24, i32 0, i32 0), i32 %shr, i32 %and56, i32 %shr57, i32 %and59, i32 %shr60, i32 %and62)
  br label %do.end67

do.end67:                                         ; preds = %if.then53, %do.body40
  %20 = load i32, i32* getelementptr inbounds ([3 x i32], [3 x i32]* @abs_x, i64 0, i64 0), align 4, !tbaa !55
  %x68 = getelementptr inbounds %struct.exception_table_entry, %struct.exception_table_entry* %data, i32 0, i32 0
  %21 = load i32, i32* %x68, align 4, !tbaa !101
  %and69 = and i32 %21, 4095
  %cmp70 = icmp sgt i32 %20, %and69
  br i1 %cmp70, label %do.body88, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %do.end67
  %22 = load i32, i32* getelementptr inbounds ([3 x i32], [3 x i32]* @abs_x, i64 0, i64 1), align 4, !tbaa !55
  %x72 = getelementptr inbounds %struct.exception_table_entry, %struct.exception_table_entry* %data, i32 0, i32 0
  %23 = load i32, i32* %x72, align 4, !tbaa !101
  %and73 = and i32 %23, 4095
  %cmp74 = icmp slt i32 %22, %and73
  br i1 %cmp74, label %do.body88, label %lor.lhs.false76

lor.lhs.false76:                                  ; preds = %lor.lhs.false
  %24 = load i32, i32* getelementptr inbounds ([3 x i32], [3 x i32]* @abs_y, i64 0, i64 0), align 4, !tbaa !55
  %y77 = getelementptr inbounds %struct.exception_table_entry, %struct.exception_table_entry* %data, i32 0, i32 1
  %25 = load i32, i32* %y77, align 4, !tbaa !103
  %and78 = and i32 %25, 4095
  %cmp79 = icmp sgt i32 %24, %and78
  br i1 %cmp79, label %do.body88, label %lor.lhs.false81

lor.lhs.false81:                                  ; preds = %lor.lhs.false76
  %26 = load i32, i32* getelementptr inbounds ([3 x i32], [3 x i32]* @abs_y, i64 0, i64 1), align 4, !tbaa !55
  %y82 = getelementptr inbounds %struct.exception_table_entry, %struct.exception_table_entry* %data, i32 0, i32 1
  %27 = load i32, i32* %y82, align 4, !tbaa !103
  %and83 = and i32 %27, 4095
  %cmp84 = icmp slt i32 %26, %and83
  br i1 %cmp84, label %do.body88, label %if.end108

do.body88:                                        ; preds = %lor.lhs.false81, %lor.lhs.false76, %lor.lhs.false, %do.end67
  %bf.load89 = load i32, i32* getelementptr inbounds (%struct._ddebug, %struct._ddebug* bitcast ({ i8*, i8*, i8*, i8*, i8, i8, i8, i8 }* @wm97xx_read_samples.descriptor.25 to %struct._ddebug*), i32 0, i32 4), align 8
  %bf.lshr90 = lshr i32 %bf.load89, 18
  %bf.clear91 = and i32 %bf.lshr90, 255
  %and92 = and i32 %bf.clear91, 1
  %tobool93 = icmp ne i32 %and92, 0
  %lnot94 = xor i1 %tobool93, true
  %lnot96 = xor i1 %lnot94, true
  %lnot.ext97 = zext i1 %lnot96 to i32
  %conv98 = sext i32 %lnot.ext97 to i64
  %expval99 = call i64 @llvm.expect.i64(i64 %conv98, i64 0)
  %tobool100 = icmp ne i64 %expval99, 0
  br i1 %tobool100, label %if.then101, label %out

if.then101:                                       ; preds = %do.body88
  %dev102 = getelementptr inbounds %struct.wm97xx, %struct.wm97xx* %wm, i32 0, i32 8
  %28 = load %struct.device*, %struct.device** %dev102, align 8, !tbaa !31
  call void (%struct._ddebug*, %struct.device*, i8*, ...) @__dynamic_dev_dbg(%struct._ddebug* bitcast ({ i8*, i8*, i8*, i8*, i8, i8, i8, i8 }* @wm97xx_read_samples.descriptor.25 to %struct._ddebug*), %struct.device* %28, i8* getelementptr inbounds ([39 x i8], [39 x i8]* @.str.26, i32 0, i32 0))
  br label %out

if.end108:                                        ; preds = %lor.lhs.false81
  %input_dev109 = getelementptr inbounds %struct.wm97xx, %struct.wm97xx* %wm, i32 0, i32 6
  %29 = load %struct.input_dev*, %struct.input_dev** %input_dev109, align 8, !tbaa !22
  %x110 = getelementptr inbounds %struct.exception_table_entry, %struct.exception_table_entry* %data, i32 0, i32 0
  %30 = load i32, i32* %x110, align 4, !tbaa !101
  %and111 = and i32 %30, 4095
  call void @input_report_abs(%struct.input_dev* %29, i32 0, i32 %and111)
  %input_dev112 = getelementptr inbounds %struct.wm97xx, %struct.wm97xx* %wm, i32 0, i32 6
  %31 = load %struct.input_dev*, %struct.input_dev** %input_dev112, align 8, !tbaa !22
  %y113 = getelementptr inbounds %struct.exception_table_entry, %struct.exception_table_entry* %data, i32 0, i32 1
  %32 = load i32, i32* %y113, align 4, !tbaa !103
  %and114 = and i32 %32, 4095
  call void @input_report_abs(%struct.input_dev* %31, i32 1, i32 %and114)
  %input_dev115 = getelementptr inbounds %struct.wm97xx, %struct.wm97xx* %wm, i32 0, i32 6
  %33 = load %struct.input_dev*, %struct.input_dev** %input_dev115, align 8, !tbaa !22
  %p116 = getelementptr inbounds %struct.exception_table_entry, %struct.exception_table_entry* %data, i32 0, i32 2
  %34 = load i32, i32* %p116, align 4, !tbaa !104
  %and117 = and i32 %34, 4095
  call void @input_report_abs(%struct.input_dev* %33, i32 24, i32 %and117)
  %input_dev118 = getelementptr inbounds %struct.wm97xx, %struct.wm97xx* %wm, i32 0, i32 6
  %35 = load %struct.input_dev*, %struct.input_dev** %input_dev118, align 8, !tbaa !22
  call void @input_report_key(%struct.input_dev* %35, i32 330, i32 1)
  %input_dev119 = getelementptr inbounds %struct.wm97xx, %struct.wm97xx* %wm, i32 0, i32 6
  %36 = load %struct.input_dev*, %struct.input_dev** %input_dev119, align 8, !tbaa !22
  call void @input_sync(%struct.input_dev* %36)
  %pen_is_down120 = getelementptr inbounds %struct.wm97xx, %struct.wm97xx* %wm, i32 0, i32 21
  %bf.load121 = load i8, i8* %pen_is_down120, align 4
  %bf.clear122 = and i8 %bf.load121, -2
  %bf.set = or i8 %bf.clear122, 1
  store i8 %bf.set, i8* %pen_is_down120, align 4
  %ts_reader_min_interval = getelementptr inbounds %struct.wm97xx, %struct.wm97xx* %wm, i32 0, i32 15
  %37 = load i64, i64* %ts_reader_min_interval, align 8, !tbaa !74
  %ts_reader_interval123 = getelementptr inbounds %struct.wm97xx, %struct.wm97xx* %wm, i32 0, i32 14
  store i64 %37, i64* %ts_reader_interval123, align 8, !tbaa !75
  br label %out

if.else124:                                       ; preds = %if.else35
  %and125 = and i32 %rc.0, 8
  %tobool126 = icmp ne i32 %and125, 0
  br i1 %tobool126, label %do.body129, label %out

do.body129:                                       ; preds = %if.else124
  %bf.load130 = load i32, i32* getelementptr inbounds (%struct._ddebug, %struct._ddebug* bitcast ({ i8*, i8*, i8*, i8*, i8, i8, i8, i8 }* @wm97xx_read_samples.descriptor.27 to %struct._ddebug*), i32 0, i32 4), align 8
  %bf.lshr131 = lshr i32 %bf.load130, 18
  %bf.clear132 = and i32 %bf.lshr131, 255
  %and133 = and i32 %bf.clear132, 1
  %tobool134 = icmp ne i32 %and133, 0
  %lnot135 = xor i1 %tobool134, true
  %lnot137 = xor i1 %lnot135, true
  %lnot.ext138 = zext i1 %lnot137 to i32
  %conv139 = sext i32 %lnot.ext138 to i64
  %expval140 = call i64 @llvm.expect.i64(i64 %conv139, i64 0)
  %tobool141 = icmp ne i64 %expval140, 0
  br i1 %tobool141, label %if.then142, label %do.end148

if.then142:                                       ; preds = %do.body129
  %dev143 = getelementptr inbounds %struct.wm97xx, %struct.wm97xx* %wm, i32 0, i32 8
  %38 = load %struct.device*, %struct.device** %dev143, align 8, !tbaa !31
  call void (%struct._ddebug*, %struct.device*, i8*, ...) @__dynamic_dev_dbg(%struct._ddebug* bitcast ({ i8*, i8*, i8*, i8*, i8, i8, i8, i8 }* @wm97xx_read_samples.descriptor.27 to %struct._ddebug*), %struct.device* %38, i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.28, i32 0, i32 0))
  br label %do.end148

do.end148:                                        ; preds = %if.then142, %do.body129
  %pen_is_down149 = getelementptr inbounds %struct.wm97xx, %struct.wm97xx* %wm, i32 0, i32 21
  %bf.load150 = load i8, i8* %pen_is_down149, align 4
  %bf.clear151 = and i8 %bf.load150, -2
  %bf.set152 = or i8 %bf.clear151, 1
  store i8 %bf.set152, i8* %pen_is_down149, align 4
  %ts_reader_min_interval153 = getelementptr inbounds %struct.wm97xx, %struct.wm97xx* %wm, i32 0, i32 15
  %39 = load i64, i64* %ts_reader_min_interval153, align 8, !tbaa !74
  %ts_reader_interval154 = getelementptr inbounds %struct.wm97xx, %struct.wm97xx* %wm, i32 0, i32 14
  store i64 %39, i64* %ts_reader_interval154, align 8, !tbaa !75
  br label %out

out:                                              ; preds = %do.end148, %if.else124, %if.end108, %if.then101, %do.body88, %if.then30, %if.then28, %if.else25, %do.end22
  %rc.1 = phi i32 [ 1, %if.then101 ], [ 1, %do.body88 ], [ %rc.0, %if.end108 ], [ %rc.0, %do.end148 ], [ %rc.0, %if.else124 ], [ %rc.0, %do.end22 ], [ %rc.0, %if.then28 ], [ %rc.0, %if.then30 ], [ %rc.0, %if.else25 ]
  %codec_mutex158 = getelementptr inbounds %struct.wm97xx, %struct.wm97xx* %wm, i32 0, i32 12
  call void @mutex_unlock(%struct.mutex* %codec_mutex158)
  ret i32 %rc.1
}

declare void @__dynamic_dev_dbg(%struct._ddebug*, %struct.device*, i8*, ...) #1

; Function Attrs: inlinehint nounwind uwtable
define internal void @input_report_abs(%struct.input_dev* %dev, i32 %code, i32 %value) #4 {
entry:
  call void @input_event(%struct.input_dev* %dev, i32 3, i32 %code, i32 %value)
  ret void
}

; Function Attrs: inlinehint nounwind uwtable
define internal void @input_report_key(%struct.input_dev* %dev, i32 %code, i32 %value) #4 {
entry:
  %tobool = icmp ne i32 %value, 0
  %lnot = xor i1 %tobool, true
  %lnot1 = xor i1 %lnot, true
  %lnot.ext = zext i1 %lnot1 to i32
  call void @input_event(%struct.input_dev* %dev, i32 1, i32 %code, i32 %lnot.ext)
  ret void
}

; Function Attrs: inlinehint nounwind uwtable
define internal void @input_sync(%struct.input_dev* %dev) #4 {
entry:
  call void @input_event(%struct.input_dev* %dev, i32 0, i32 0, i32 0)
  ret void
}

declare void @input_event(%struct.input_dev*, i32, i32, i32) #1

declare noalias i8* @__kmalloc(i64, i32) #1

; Function Attrs: nounwind uwtable
define internal void @wm97xx_exit() #3 section ".exit.text" {
entry:
  call void @driver_unregister(%struct.device_driver* @wm97xx_driver)
  ret void
}

declare void @driver_unregister(%struct.device_driver*) #1

; Function Attrs: nounwind uwtable
define internal i32 @wm9705_poll_sample(%struct.wm97xx.280* %wm, i32 %adcsel, i32* %sample) #0 {
entry:
  %0 = load i32, i32* @delay, align 4, !tbaa !55
  %mul = mul nsw i32 5, %0
  %and = and i32 %adcsel, 32768
  %tobool = icmp ne i32 %and, 0
  %frombool = zext i1 %tobool to i8
  %tobool1 = trunc i8 %frombool to i1
  br i1 %tobool1, label %land.lhs.true, label %if.end10

land.lhs.true:                                    ; preds = %entry
  %pen_probably_down = getelementptr inbounds %struct.wm97xx.280, %struct.wm97xx.280* %wm, i32 0, i32 21
  %bf.load = load i8, i8* %pen_probably_down, align 4
  %bf.lshr = lshr i8 %bf.load, 2
  %bf.clear = and i8 %bf.lshr, 1
  %bf.cast = zext i8 %bf.clear to i32
  %tobool2 = icmp ne i32 %bf.cast, 0
  br i1 %tobool2, label %if.end10, label %if.then

if.then:                                          ; preds = %land.lhs.true
  %call = call i32 bitcast (i32 (%struct.wm97xx*, i16)* @wm97xx_reg_read to i32 (%struct.wm97xx.280*, i16)*)(%struct.wm97xx.280* %wm, i16 zeroext 122)
  %conv = trunc i32 %call to i16
  %conv3 = zext i16 %conv to i32
  %and4 = and i32 %conv3, 32768
  %tobool5 = icmp ne i32 %and4, 0
  br i1 %tobool5, label %if.end, label %LeafBlock

if.end:                                           ; preds = %if.then
  %pen_probably_down7 = getelementptr inbounds %struct.wm97xx.280, %struct.wm97xx.280* %wm, i32 0, i32 21
  %bf.load8 = load i8, i8* %pen_probably_down7, align 4
  %bf.clear9 = and i8 %bf.load8, -5
  %bf.set = or i8 %bf.clear9, 4
  store i8 %bf.set, i8* %pen_probably_down7, align 4
  br label %LeafBlock

LeafBlock:                                        ; preds = %if.end, %if.then
  %cleanup.dest.slot.0 = phi i32 [ 0, %if.end ], [ 1, %if.then ]
  %SwitchLeaf = icmp eq i32 %cleanup.dest.slot.0, 0
  br i1 %SwitchLeaf, label %if.end10, label %cleanup97

if.end10:                                         ; preds = %LeafBlock, %land.lhs.true, %entry
  %mach_ops = getelementptr inbounds %struct.wm97xx.280, %struct.wm97xx.280* %wm, i32 0, i32 11
  %1 = load %struct.wm97xx_mach_ops.286*, %struct.wm97xx_mach_ops.286** %mach_ops, align 8, !tbaa !2
  %tobool11 = icmp ne %struct.wm97xx_mach_ops.286* %1, null
  br i1 %tobool11, label %land.lhs.true12, label %if.end18

land.lhs.true12:                                  ; preds = %if.end10
  %mach_ops13 = getelementptr inbounds %struct.wm97xx.280, %struct.wm97xx.280* %wm, i32 0, i32 11
  %2 = load %struct.wm97xx_mach_ops.286*, %struct.wm97xx_mach_ops.286** %mach_ops13, align 8, !tbaa !2
  %pre_sample = getelementptr inbounds %struct.wm97xx_mach_ops.286, %struct.wm97xx_mach_ops.286* %2, i32 0, i32 7
  %3 = load void (i32)*, void (i32)** %pre_sample, align 8, !tbaa !105
  %tobool14 = icmp ne void (i32)* %3, null
  br i1 %tobool14, label %if.then15, label %if.end18

if.then15:                                        ; preds = %land.lhs.true12
  %mach_ops16 = getelementptr inbounds %struct.wm97xx.280, %struct.wm97xx.280* %wm, i32 0, i32 11
  %4 = load %struct.wm97xx_mach_ops.286*, %struct.wm97xx_mach_ops.286** %mach_ops16, align 8, !tbaa !2
  %pre_sample17 = getelementptr inbounds %struct.wm97xx_mach_ops.286, %struct.wm97xx_mach_ops.286* %4, i32 0, i32 7
  %5 = load void (i32)*, void (i32)** %pre_sample17, align 8, !tbaa !105
  call void @simpll__indirect_1(i32 %adcsel, void (i32)* %5)
  br label %if.end18

if.end18:                                         ; preds = %if.then15, %land.lhs.true12, %if.end10
  %and19 = and i32 %adcsel, 28672
  %or = or i32 %and19, 32768
  %6 = load i32, i32* @delay, align 4, !tbaa !55
  %shl = shl i32 %6, 4
  %and20 = and i32 %shl, 240
  %or21 = or i32 %or, %and20
  %conv22 = trunc i32 %or21 to i16
  call void bitcast (void (%struct.wm97xx*, i16, i16)* @wm97xx_reg_write to void (%struct.wm97xx.280*, i16, i16)*)(%struct.wm97xx.280* %wm, i16 zeroext 118, i16 zeroext %conv22)
  %7 = load i32, i32* @delay, align 4, !tbaa !55
  call void @poll_delay(i32 %7)
  br label %while.cond

while.cond:                                       ; preds = %while.body, %if.end18
  %timeout.0 = phi i32 [ %mul, %if.end18 ], [ %dec, %while.body ]
  %call23 = call i32 bitcast (i32 (%struct.wm97xx*, i16)* @wm97xx_reg_read to i32 (%struct.wm97xx.280*, i16)*)(%struct.wm97xx.280* %wm, i16 zeroext 118)
  %and24 = and i32 %call23, 32768
  %tobool25 = icmp ne i32 %and24, 0
  %tobool26 = icmp ne i32 %timeout.0, 0
  %tobool26. = select i1 %tobool25, i1 %tobool26, i1 false
  br i1 %tobool26., label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  call void @__const_udelay(i64 90195)
  %dec = add nsw i32 %timeout.0, -1
  br label %while.cond

while.end:                                        ; preds = %while.cond
  %cmp = icmp eq i32 %timeout.0, 0
  br i1 %cmp, label %if.then28, label %if.end49

if.then28:                                        ; preds = %while.end
  %call29 = call i32 @is_pden(%struct.wm97xx.280* %wm)
  %tobool30 = icmp ne i32 %call29, 0
  br i1 %tobool30, label %if.then31, label %do.body35

if.then31:                                        ; preds = %if.then28
  %pen_probably_down32 = getelementptr inbounds %struct.wm97xx.280, %struct.wm97xx.280* %wm, i32 0, i32 21
  %bf.load33 = load i8, i8* %pen_probably_down32, align 4
  %bf.clear34 = and i8 %bf.load33, -5
  store i8 %bf.clear34, i8* %pen_probably_down32, align 4
  br label %cleanup97

do.body35:                                        ; preds = %if.then28
  %bf.load36 = load i32, i32* getelementptr inbounds (%struct._ddebug, %struct._ddebug* bitcast ({ i8*, i8*, i8*, i8*, i8, i8, i8, i8 }* @wm9705_poll_sample.descriptor to %struct._ddebug*), i32 0, i32 4), align 8
  %bf.lshr37 = lshr i32 %bf.load36, 18
  %bf.clear38 = and i32 %bf.lshr37, 255
  %and39 = and i32 %bf.clear38, 1
  %tobool40 = icmp ne i32 %and39, 0
  %lnot = xor i1 %tobool40, true
  %lnot41 = xor i1 %lnot, true
  %lnot.ext = zext i1 %lnot41 to i32
  %conv42 = sext i32 %lnot.ext to i64
  %expval = call i64 @llvm.expect.i64(i64 %conv42, i64 0)
  %tobool43 = icmp ne i64 %expval, 0
  br i1 %tobool43, label %if.then44, label %cleanup97

if.then44:                                        ; preds = %do.body35
  %dev = getelementptr inbounds %struct.wm97xx.280, %struct.wm97xx.280* %wm, i32 0, i32 8
  %8 = load %struct.device*, %struct.device** %dev, align 8, !tbaa !31
  call void (%struct._ddebug*, %struct.device*, i8*, ...) @__dynamic_dev_dbg(%struct._ddebug* bitcast ({ i8*, i8*, i8*, i8*, i8, i8, i8, i8 }* @wm9705_poll_sample.descriptor to %struct._ddebug*), %struct.device* %8, i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.3.73, i32 0, i32 0))
  br label %cleanup97

if.end49:                                         ; preds = %while.end
  %call50 = call i32 bitcast (i32 (%struct.wm97xx*, i16)* @wm97xx_reg_read to i32 (%struct.wm97xx.280*, i16)*)(%struct.wm97xx.280* %wm, i16 zeroext 122)
  store i32 %call50, i32* %sample, align 4, !tbaa !55
  %mach_ops51 = getelementptr inbounds %struct.wm97xx.280, %struct.wm97xx.280* %wm, i32 0, i32 11
  %9 = load %struct.wm97xx_mach_ops.286*, %struct.wm97xx_mach_ops.286** %mach_ops51, align 8, !tbaa !2
  %tobool52 = icmp ne %struct.wm97xx_mach_ops.286* %9, null
  br i1 %tobool52, label %land.lhs.true53, label %if.end59

land.lhs.true53:                                  ; preds = %if.end49
  %mach_ops54 = getelementptr inbounds %struct.wm97xx.280, %struct.wm97xx.280* %wm, i32 0, i32 11
  %10 = load %struct.wm97xx_mach_ops.286*, %struct.wm97xx_mach_ops.286** %mach_ops54, align 8, !tbaa !2
  %post_sample = getelementptr inbounds %struct.wm97xx_mach_ops.286, %struct.wm97xx_mach_ops.286* %10, i32 0, i32 8
  %11 = load void (i32)*, void (i32)** %post_sample, align 8, !tbaa !106
  %tobool55 = icmp ne void (i32)* %11, null
  br i1 %tobool55, label %if.then56, label %if.end59

if.then56:                                        ; preds = %land.lhs.true53
  %mach_ops57 = getelementptr inbounds %struct.wm97xx.280, %struct.wm97xx.280* %wm, i32 0, i32 11
  %12 = load %struct.wm97xx_mach_ops.286*, %struct.wm97xx_mach_ops.286** %mach_ops57, align 8, !tbaa !2
  %post_sample58 = getelementptr inbounds %struct.wm97xx_mach_ops.286, %struct.wm97xx_mach_ops.286* %12, i32 0, i32 8
  %13 = load void (i32)*, void (i32)** %post_sample58, align 8, !tbaa !106
  call void @simpll__indirect_1(i32 %adcsel, void (i32)* %13)
  br label %if.end59

if.end59:                                         ; preds = %if.then56, %land.lhs.true53, %if.end49
  %14 = load i32, i32* %sample, align 4, !tbaa !55
  %xor = xor i32 %14, %adcsel
  %and60 = and i32 %xor, 28672
  %tobool61 = icmp ne i32 %and60, 0
  br i1 %tobool61, label %do.body64, label %if.end86

do.body64:                                        ; preds = %if.end59
  %bf.load65 = load i32, i32* getelementptr inbounds (%struct._ddebug, %struct._ddebug* bitcast ({ i8*, i8*, i8*, i8*, i8, i8, i8, i8 }* @wm9705_poll_sample.descriptor.4 to %struct._ddebug*), i32 0, i32 4), align 8
  %bf.lshr66 = lshr i32 %bf.load65, 18
  %bf.clear67 = and i32 %bf.lshr66, 255
  %and68 = and i32 %bf.clear67, 1
  %tobool69 = icmp ne i32 %and68, 0
  %lnot70 = xor i1 %tobool69, true
  %lnot72 = xor i1 %lnot70, true
  %lnot.ext73 = zext i1 %lnot72 to i32
  %conv74 = sext i32 %lnot.ext73 to i64
  %expval75 = call i64 @llvm.expect.i64(i64 %conv74, i64 0)
  %tobool76 = icmp ne i64 %expval75, 0
  br i1 %tobool76, label %if.then77, label %cleanup97

if.then77:                                        ; preds = %do.body64
  %dev78 = getelementptr inbounds %struct.wm97xx.280, %struct.wm97xx.280* %wm, i32 0, i32 8
  %15 = load %struct.device*, %struct.device** %dev78, align 8, !tbaa !31
  %and79 = and i32 %adcsel, 28672
  %16 = load i32, i32* %sample, align 4, !tbaa !55
  %and80 = and i32 %16, 28672
  call void (%struct._ddebug*, %struct.device*, i8*, ...) @__dynamic_dev_dbg(%struct._ddebug* bitcast ({ i8*, i8*, i8*, i8*, i8, i8, i8, i8 }* @wm9705_poll_sample.descriptor.4 to %struct._ddebug*), %struct.device* %15, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.5.76, i32 0, i32 0), i32 %and79, i32 %and80)
  br label %cleanup97

if.end86:                                         ; preds = %if.end59
  %tobool87 = trunc i8 %frombool to i1
  br i1 %tobool87, label %land.lhs.true89, label %cleanup97

land.lhs.true89:                                  ; preds = %if.end86
  %17 = load i32, i32* %sample, align 4, !tbaa !55
  %and90 = and i32 %17, 32768
  %tobool91 = icmp ne i32 %and90, 0
  br i1 %tobool91, label %cleanup97, label %if.then92

if.then92:                                        ; preds = %land.lhs.true89
  %pen_probably_down93 = getelementptr inbounds %struct.wm97xx.280, %struct.wm97xx.280* %wm, i32 0, i32 21
  %bf.load94 = load i8, i8* %pen_probably_down93, align 4
  %bf.clear95 = and i8 %bf.load94, -5
  store i8 %bf.clear95, i8* %pen_probably_down93, align 4
  br label %cleanup97

cleanup97:                                        ; preds = %if.then92, %land.lhs.true89, %if.end86, %if.then77, %do.body64, %if.then44, %do.body35, %if.then31, %LeafBlock
  %retval.1 = phi i32 [ 4, %if.then92 ], [ 4, %do.body35 ], [ 4, %if.then44 ], [ 4, %if.then31 ], [ 4, %if.then77 ], [ 4, %do.body64 ], [ 2, %land.lhs.true89 ], [ 2, %if.end86 ], [ 4, %LeafBlock ]
  ret i32 %retval.1
}

; Function Attrs: nounwind uwtable
declare i32 @wm9705_poll_touch(%struct.wm97xx.280*, %struct.exception_table_entry*) #0

; Function Attrs: nounwind uwtable
define internal i32 @wm9705_acc_enable(%struct.wm97xx.280* %wm, i32 %enable) #0 {
entry:
  %dig = getelementptr inbounds %struct.wm97xx.280, %struct.wm97xx.280* %wm, i32 0, i32 0
  %arrayidx = getelementptr inbounds [3 x i16], [3 x i16]* %dig, i64 0, i64 1
  %0 = load i16, i16* %arrayidx, align 2, !tbaa !34
  br label %if.end

if.end:                                           ; preds = %entry
  %conv = zext i16 %0 to i32
  %and = and i32 %conv, -29688
  %conv9 = trunc i32 %and to i16
  %1 = load i32, i32* @delay, align 4, !tbaa !55
  %shl = shl i32 %1, 4
  %and10 = and i32 %shl, 240
  %or = or i32 3080, %and10
  %acc_slot = getelementptr inbounds %struct.wm97xx.280, %struct.wm97xx.280* %wm, i32 0, i32 19
  %2 = load i16, i16* %acc_slot, align 8, !tbaa !107
  %conv11 = zext i16 %2 to i32
  %sub = sub nsw i32 %conv11, 5
  %and12 = and i32 %sub, 7
  %or13 = or i32 %or, %and12
  %acc_rate = getelementptr inbounds %struct.wm97xx.280, %struct.wm97xx.280* %wm, i32 0, i32 20
  %3 = load i16, i16* %acc_rate, align 2, !tbaa !108
  %conv14 = zext i16 %3 to i32
  %and15 = and i32 %conv14, 3
  %shl16 = shl i32 %and15, 8
  %acc_rate17 = getelementptr inbounds %struct.wm97xx.280, %struct.wm97xx.280* %wm, i32 0, i32 20
  %4 = load i16, i16* %acc_rate17, align 2, !tbaa !108
  %conv18 = zext i16 %4 to i32
  %and19 = and i32 %conv18, 4
  %tobool20 = icmp ne i32 %and19, 0
  %cond = select i1 %tobool20, i32 240, i32 0
  %or21 = or i32 %shl16, %cond
  %or22 = or i32 %or13, %or21
  %conv23 = zext i16 %conv9 to i32
  %or24 = or i32 %conv23, %or22
  %conv25 = trunc i32 %or24 to i16
  %5 = load i32, i32* @pil, align 4, !tbaa !55
  %tobool26 = icmp ne i32 %5, 0
  %conv28 = zext i16 %conv25 to i32
  %or29 = or i32 %conv28, 12288
  %conv30 = trunc i32 %or29 to i16
  %dig1.0 = select i1 %tobool26, i16 %conv30, i16 %conv25
  br label %if.end47

if.end47:                                         ; preds = %if.end
  call void bitcast (void (%struct.wm97xx*, i16, i16)* @wm97xx_reg_write to void (%struct.wm97xx.280*, i16, i16)*)(%struct.wm97xx.280* %wm, i16 zeroext 118, i16 zeroext %dig1.0)
  br label %cleanup

cleanup:                                          ; preds = %if.end47
  ret i32 0
}

; Function Attrs: nounwind uwtable
declare void @wm9705_phy_init(%struct.wm97xx.280*) #0

; Function Attrs: nounwind uwtable
define internal void @wm9705_dig_enable(%struct.wm97xx.280* %wm, i32 %enable) #0 {
entry:
  %tobool = icmp ne i32 %enable, 0
  %dig = getelementptr inbounds %struct.wm97xx.280, %struct.wm97xx.280* %wm, i32 0, i32 0
  %arrayidx = getelementptr inbounds [3 x i16], [3 x i16]* %dig, i64 0, i64 2
  %0 = load i16, i16* %arrayidx, align 4, !tbaa !34
  %conv = zext i16 %0 to i32
  br i1 %tobool, label %if.then, label %if.else

if.then:                                          ; preds = %entry
  %or = or i32 %conv, 49152
  %conv1 = trunc i32 %or to i16
  call void bitcast (void (%struct.wm97xx*, i16, i16)* @wm97xx_reg_write to void (%struct.wm97xx.280*, i16, i16)*)(%struct.wm97xx.280* %wm, i16 zeroext 120, i16 zeroext %conv1)
  %call = call i32 bitcast (i32 (%struct.wm97xx*, i16)* @wm97xx_reg_read to i32 (%struct.wm97xx.280*, i16)*)(%struct.wm97xx.280* %wm, i16 zeroext 122)
  br label %if.end

if.else:                                          ; preds = %entry
  %and = and i32 %conv, -49153
  %conv5 = trunc i32 %and to i16
  call void bitcast (void (%struct.wm97xx*, i16, i16)* @wm97xx_reg_write to void (%struct.wm97xx.280*, i16, i16)*)(%struct.wm97xx.280* %wm, i16 zeroext 120, i16 zeroext %conv5)
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then
  ret void
}

; Function Attrs: nounwind uwtable
define internal void @wm9705_dig_restore(%struct.wm97xx.280* %wm) #0 {
entry:
  %dig_save = getelementptr inbounds %struct.wm97xx.280, %struct.wm97xx.280* %wm, i32 0, i32 4
  %arrayidx = getelementptr inbounds [3 x i16], [3 x i16]* %dig_save, i64 0, i64 1
  %0 = load i16, i16* %arrayidx, align 2, !tbaa !34
  call void bitcast (void (%struct.wm97xx*, i16, i16)* @wm97xx_reg_write to void (%struct.wm97xx.280*, i16, i16)*)(%struct.wm97xx.280* %wm, i16 zeroext 118, i16 zeroext %0)
  %dig_save1 = getelementptr inbounds %struct.wm97xx.280, %struct.wm97xx.280* %wm, i32 0, i32 4
  %arrayidx2 = getelementptr inbounds [3 x i16], [3 x i16]* %dig_save1, i64 0, i64 2
  %1 = load i16, i16* %arrayidx2, align 2, !tbaa !34
  call void bitcast (void (%struct.wm97xx*, i16, i16)* @wm97xx_reg_write to void (%struct.wm97xx.280*, i16, i16)*)(%struct.wm97xx.280* %wm, i16 zeroext 120, i16 zeroext %1)
  ret void
}

; Function Attrs: nounwind uwtable
define internal void @wm9705_aux_prepare(%struct.wm97xx.280* %wm) #0 {
entry:
  %dig_save = getelementptr inbounds %struct.wm97xx.280, %struct.wm97xx.280* %wm, i32 0, i32 4
  %arraydecay = getelementptr inbounds [3 x i16], [3 x i16]* %dig_save, i32 0, i32 0
  %0 = bitcast i16* %arraydecay to i8*
  %dig = getelementptr inbounds %struct.wm97xx.280, %struct.wm97xx.280* %wm, i32 0, i32 0
  %arraydecay1 = getelementptr inbounds [3 x i16], [3 x i16]* %dig, i32 0, i32 0
  %1 = bitcast i16* %arraydecay1 to i8*
  %call = call i8* @__memcpy(i8* %0, i8* %1, i64 6)
  call void bitcast (void (%struct.wm97xx*, i16, i16)* @wm97xx_reg_write to void (%struct.wm97xx.280*, i16, i16)*)(%struct.wm97xx.280* %wm, i16 zeroext 118, i16 zeroext 0)
  call void bitcast (void (%struct.wm97xx*, i16, i16)* @wm97xx_reg_write to void (%struct.wm97xx.280*, i16, i16)*)(%struct.wm97xx.280* %wm, i16 zeroext 120, i16 zeroext -16384)
  ret void
}

declare i8* @__memcpy(i8*, i8*, i64) #1

; Function Attrs: inlinehint nounwind uwtable
define internal void @poll_delay(i32 %d) #4 {
entry:
  %idxprom = sext i32 %d to i64
  %arrayidx = getelementptr inbounds [16 x i32], [16 x i32]* @delay_table, i64 0, i64 %idxprom
  %0 = load i32, i32* %arrayidx, align 4, !tbaa !55
  %add = add nsw i32 63, %0
  %conv = sext i32 %add to i64
  call void @__udelay(i64 %conv)
  ret void
}

declare void @__const_udelay(i64) #1

; Function Attrs: inlinehint nounwind uwtable
define internal i32 @is_pden(%struct.wm97xx.280* %wm) #4 {
entry:
  %dig = getelementptr inbounds %struct.wm97xx.280, %struct.wm97xx.280* %wm, i32 0, i32 0
  %arrayidx = getelementptr inbounds [3 x i16], [3 x i16]* %dig, i64 0, i64 2
  %0 = load i16, i16* %arrayidx, align 4, !tbaa !34
  %conv = zext i16 %0 to i32
  %and = and i32 %conv, 4096
  ret i32 %and
}

declare void @__udelay(i64) #1

; Function Attrs: nounwind uwtable
define internal i32 @wm9712_poll_sample(%struct.wm97xx.679* %wm, i32 %adcsel, i32* %sample) #0 {
entry:
  %0 = load i32, i32* @delay.35, align 4, !tbaa !55
  %mul = mul nsw i32 5, %0
  %and = and i32 %adcsel, 32768
  %tobool = icmp ne i32 %and, 0
  %frombool = zext i1 %tobool to i8
  %tobool1 = trunc i8 %frombool to i1
  br i1 %tobool1, label %land.lhs.true, label %if.end10

land.lhs.true:                                    ; preds = %entry
  %pen_probably_down = getelementptr inbounds %struct.wm97xx.679, %struct.wm97xx.679* %wm, i32 0, i32 21
  %bf.load = load i8, i8* %pen_probably_down, align 4
  %bf.lshr = lshr i8 %bf.load, 2
  %bf.clear = and i8 %bf.lshr, 1
  %bf.cast = zext i8 %bf.clear to i32
  %tobool2 = icmp ne i32 %bf.cast, 0
  br i1 %tobool2, label %if.end10, label %if.then

if.then:                                          ; preds = %land.lhs.true
  %call = call i32 bitcast (i32 (%struct.wm97xx*, i16)* @wm97xx_reg_read to i32 (%struct.wm97xx.679*, i16)*)(%struct.wm97xx.679* %wm, i16 zeroext 122)
  %conv = trunc i32 %call to i16
  %conv3 = zext i16 %conv to i32
  %and4 = and i32 %conv3, 32768
  %tobool5 = icmp ne i32 %and4, 0
  br i1 %tobool5, label %if.end, label %LeafBlock

if.end:                                           ; preds = %if.then
  %pen_probably_down7 = getelementptr inbounds %struct.wm97xx.679, %struct.wm97xx.679* %wm, i32 0, i32 21
  %bf.load8 = load i8, i8* %pen_probably_down7, align 4
  %bf.clear9 = and i8 %bf.load8, -5
  %bf.set = or i8 %bf.clear9, 4
  store i8 %bf.set, i8* %pen_probably_down7, align 4
  br label %LeafBlock

LeafBlock:                                        ; preds = %if.end, %if.then
  %cleanup.dest.slot.0 = phi i32 [ 0, %if.end ], [ 1, %if.then ]
  %SwitchLeaf = icmp eq i32 %cleanup.dest.slot.0, 0
  br i1 %SwitchLeaf, label %if.end10, label %cleanup102

if.end10:                                         ; preds = %LeafBlock, %land.lhs.true, %entry
  %mach_ops = getelementptr inbounds %struct.wm97xx.679, %struct.wm97xx.679* %wm, i32 0, i32 11
  %1 = load %struct.wm97xx_mach_ops.685*, %struct.wm97xx_mach_ops.685** %mach_ops, align 8, !tbaa !2
  %tobool11 = icmp ne %struct.wm97xx_mach_ops.685* %1, null
  br i1 %tobool11, label %land.lhs.true12, label %if.end18

land.lhs.true12:                                  ; preds = %if.end10
  %mach_ops13 = getelementptr inbounds %struct.wm97xx.679, %struct.wm97xx.679* %wm, i32 0, i32 11
  %2 = load %struct.wm97xx_mach_ops.685*, %struct.wm97xx_mach_ops.685** %mach_ops13, align 8, !tbaa !2
  %pre_sample = getelementptr inbounds %struct.wm97xx_mach_ops.685, %struct.wm97xx_mach_ops.685* %2, i32 0, i32 7
  %3 = load void (i32)*, void (i32)** %pre_sample, align 8, !tbaa !105
  %tobool14 = icmp ne void (i32)* %3, null
  br i1 %tobool14, label %if.then15, label %if.end18

if.then15:                                        ; preds = %land.lhs.true12
  %mach_ops16 = getelementptr inbounds %struct.wm97xx.679, %struct.wm97xx.679* %wm, i32 0, i32 11
  %4 = load %struct.wm97xx_mach_ops.685*, %struct.wm97xx_mach_ops.685** %mach_ops16, align 8, !tbaa !2
  %pre_sample17 = getelementptr inbounds %struct.wm97xx_mach_ops.685, %struct.wm97xx_mach_ops.685* %4, i32 0, i32 7
  %5 = load void (i32)*, void (i32)** %pre_sample17, align 8, !tbaa !105
  call void %5(i32 %adcsel)
  br label %if.end18

if.end18:                                         ; preds = %if.then15, %land.lhs.true12, %if.end10
  %and19 = and i32 %adcsel, 28672
  %or = or i32 %and19, 32768
  %6 = load i32, i32* @delay.35, align 4, !tbaa !55
  %shl = shl i32 %6, 4
  %and20 = and i32 %shl, 240
  %or21 = or i32 %or, %and20
  %conv22 = trunc i32 %or21 to i16
  call void bitcast (void (%struct.wm97xx*, i16, i16)* @wm97xx_reg_write to void (%struct.wm97xx.679*, i16, i16)*)(%struct.wm97xx.679* %wm, i16 zeroext 118, i16 zeroext %conv22)
  %7 = load i32, i32* @delay.35, align 4, !tbaa !55
  call void @poll_delay.40(i32 %7)
  br label %while.cond

while.cond:                                       ; preds = %while.body, %if.end18
  %timeout.0 = phi i32 [ %mul, %if.end18 ], [ %dec, %while.body ]
  %call23 = call i32 bitcast (i32 (%struct.wm97xx*, i16)* @wm97xx_reg_read to i32 (%struct.wm97xx.679*, i16)*)(%struct.wm97xx.679* %wm, i16 zeroext 118)
  %and24 = and i32 %call23, 32768
  %tobool25 = icmp ne i32 %and24, 0
  %tobool26 = icmp ne i32 %timeout.0, 0
  %tobool26. = select i1 %tobool25, i1 %tobool26, i1 false
  br i1 %tobool26., label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  call void @__const_udelay(i64 90195)
  %dec = add nsw i32 %timeout.0, -1
  br label %while.cond

while.end:                                        ; preds = %while.cond
  %cmp = icmp sle i32 %timeout.0, 0
  br i1 %cmp, label %if.then28, label %if.end49

if.then28:                                        ; preds = %while.end
  %call29 = call i32 @is_pden.41(%struct.wm97xx.679* %wm)
  %tobool30 = icmp ne i32 %call29, 0
  br i1 %tobool30, label %if.then31, label %do.body35

if.then31:                                        ; preds = %if.then28
  %pen_probably_down32 = getelementptr inbounds %struct.wm97xx.679, %struct.wm97xx.679* %wm, i32 0, i32 21
  %bf.load33 = load i8, i8* %pen_probably_down32, align 4
  %bf.clear34 = and i8 %bf.load33, -5
  store i8 %bf.clear34, i8* %pen_probably_down32, align 4
  br label %cleanup102

do.body35:                                        ; preds = %if.then28
  %bf.load36 = load i32, i32* getelementptr inbounds (%struct._ddebug, %struct._ddebug* bitcast ({ i8*, i8*, i8*, i8*, i8, i8, i8, i8 }* @wm9712_poll_sample.descriptor to %struct._ddebug*), i32 0, i32 4), align 8
  %bf.lshr37 = lshr i32 %bf.load36, 18
  %bf.clear38 = and i32 %bf.lshr37, 255
  %and39 = and i32 %bf.clear38, 1
  %tobool40 = icmp ne i32 %and39, 0
  %lnot = xor i1 %tobool40, true
  %lnot41 = xor i1 %lnot, true
  %lnot.ext = zext i1 %lnot41 to i32
  %conv42 = sext i32 %lnot.ext to i64
  %expval = call i64 @llvm.expect.i64(i64 %conv42, i64 0)
  %tobool43 = icmp ne i64 %expval, 0
  br i1 %tobool43, label %if.then44, label %cleanup102

if.then44:                                        ; preds = %do.body35
  %dev = getelementptr inbounds %struct.wm97xx.679, %struct.wm97xx.679* %wm, i32 0, i32 8
  %8 = load %struct.device*, %struct.device** %dev, align 8, !tbaa !31
  call void (%struct._ddebug*, %struct.device*, i8*, ...) @__dynamic_dev_dbg(%struct._ddebug* bitcast ({ i8*, i8*, i8*, i8*, i8, i8, i8, i8 }* @wm9712_poll_sample.descriptor to %struct._ddebug*), %struct.device* %8, i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.3.42, i32 0, i32 0))
  br label %cleanup102

if.end49:                                         ; preds = %while.end
  %call50 = call i32 bitcast (i32 (%struct.wm97xx*, i16)* @wm97xx_reg_read to i32 (%struct.wm97xx.679*, i16)*)(%struct.wm97xx.679* %wm, i16 zeroext 122)
  store i32 %call50, i32* %sample, align 4, !tbaa !55
  %mach_ops51 = getelementptr inbounds %struct.wm97xx.679, %struct.wm97xx.679* %wm, i32 0, i32 11
  %9 = load %struct.wm97xx_mach_ops.685*, %struct.wm97xx_mach_ops.685** %mach_ops51, align 8, !tbaa !2
  %tobool52 = icmp ne %struct.wm97xx_mach_ops.685* %9, null
  br i1 %tobool52, label %land.lhs.true53, label %if.end59

land.lhs.true53:                                  ; preds = %if.end49
  %mach_ops54 = getelementptr inbounds %struct.wm97xx.679, %struct.wm97xx.679* %wm, i32 0, i32 11
  %10 = load %struct.wm97xx_mach_ops.685*, %struct.wm97xx_mach_ops.685** %mach_ops54, align 8, !tbaa !2
  %post_sample = getelementptr inbounds %struct.wm97xx_mach_ops.685, %struct.wm97xx_mach_ops.685* %10, i32 0, i32 8
  %11 = load void (i32)*, void (i32)** %post_sample, align 8, !tbaa !106
  %tobool55 = icmp ne void (i32)* %11, null
  br i1 %tobool55, label %if.then56, label %if.end59

if.then56:                                        ; preds = %land.lhs.true53
  %mach_ops57 = getelementptr inbounds %struct.wm97xx.679, %struct.wm97xx.679* %wm, i32 0, i32 11
  %12 = load %struct.wm97xx_mach_ops.685*, %struct.wm97xx_mach_ops.685** %mach_ops57, align 8, !tbaa !2
  %post_sample58 = getelementptr inbounds %struct.wm97xx_mach_ops.685, %struct.wm97xx_mach_ops.685* %12, i32 0, i32 8
  %13 = load void (i32)*, void (i32)** %post_sample58, align 8, !tbaa !106
  call void %13(i32 %adcsel)
  br label %if.end59

if.end59:                                         ; preds = %if.then56, %land.lhs.true53, %if.end49
  %14 = load i32, i32* %sample, align 4, !tbaa !55
  %xor = xor i32 %14, %adcsel
  %and60 = and i32 %xor, 28672
  %tobool61 = icmp ne i32 %and60, 0
  br i1 %tobool61, label %do.body64, label %if.end86

do.body64:                                        ; preds = %if.end59
  %bf.load65 = load i32, i32* getelementptr inbounds (%struct._ddebug, %struct._ddebug* bitcast ({ i8*, i8*, i8*, i8*, i8, i8, i8, i8 }* @wm9712_poll_sample.descriptor.4 to %struct._ddebug*), i32 0, i32 4), align 8
  %bf.lshr66 = lshr i32 %bf.load65, 18
  %bf.clear67 = and i32 %bf.lshr66, 255
  %and68 = and i32 %bf.clear67, 1
  %tobool69 = icmp ne i32 %and68, 0
  %lnot70 = xor i1 %tobool69, true
  %lnot72 = xor i1 %lnot70, true
  %lnot.ext73 = zext i1 %lnot72 to i32
  %conv74 = sext i32 %lnot.ext73 to i64
  %expval75 = call i64 @llvm.expect.i64(i64 %conv74, i64 0)
  %tobool76 = icmp ne i64 %expval75, 0
  br i1 %tobool76, label %if.then77, label %cleanup102

if.then77:                                        ; preds = %do.body64
  %dev78 = getelementptr inbounds %struct.wm97xx.679, %struct.wm97xx.679* %wm, i32 0, i32 8
  %15 = load %struct.device*, %struct.device** %dev78, align 8, !tbaa !31
  %and79 = and i32 %adcsel, 28672
  %16 = load i32, i32* %sample, align 4, !tbaa !55
  %and80 = and i32 %16, 28672
  call void (%struct._ddebug*, %struct.device*, i8*, ...) @__dynamic_dev_dbg(%struct._ddebug* bitcast ({ i8*, i8*, i8*, i8*, i8, i8, i8, i8 }* @wm9712_poll_sample.descriptor.4 to %struct._ddebug*), %struct.device* %15, i8* getelementptr inbounds ([36 x i8], [36 x i8]* @.str.5.43, i32 0, i32 0), i32 %and79, i32 %and80)
  br label %cleanup102

if.end86:                                         ; preds = %if.end59
  %tobool87 = trunc i8 %frombool to i1
  br i1 %tobool87, label %land.lhs.true89, label %cleanup102

land.lhs.true89:                                  ; preds = %if.end86
  %17 = load i32, i32* %sample, align 4, !tbaa !55
  %and90 = and i32 %17, 32768
  %tobool91 = icmp ne i32 %and90, 0
  br i1 %tobool91, label %cleanup102, label %if.then92

if.then92:                                        ; preds = %land.lhs.true89
  %call93 = call i32 bitcast (i32 (%struct.wm97xx*, i16)* @wm97xx_reg_read to i32 (%struct.wm97xx.679*, i16)*)(%struct.wm97xx.679* %wm, i16 zeroext 122)
  store i32 %call93, i32* %sample, align 4, !tbaa !55
  %18 = load i32, i32* %sample, align 4, !tbaa !55
  %and94 = and i32 %18, 32768
  %tobool95 = icmp ne i32 %and94, 0
  br i1 %tobool95, label %cleanup102, label %if.then96

if.then96:                                        ; preds = %if.then92
  %pen_probably_down97 = getelementptr inbounds %struct.wm97xx.679, %struct.wm97xx.679* %wm, i32 0, i32 21
  %bf.load98 = load i8, i8* %pen_probably_down97, align 4
  %bf.clear99 = and i8 %bf.load98, -5
  store i8 %bf.clear99, i8* %pen_probably_down97, align 4
  br label %cleanup102

cleanup102:                                       ; preds = %if.then96, %if.then92, %land.lhs.true89, %if.end86, %if.then77, %do.body64, %if.then44, %do.body35, %if.then31, %LeafBlock
  %retval.1 = phi i32 [ 4, %if.then96 ], [ 4, %do.body35 ], [ 4, %if.then44 ], [ 4, %if.then31 ], [ 1, %if.then77 ], [ 1, %do.body64 ], [ 2, %if.then92 ], [ 2, %land.lhs.true89 ], [ 2, %if.end86 ], [ 4, %LeafBlock ]
  ret i32 %retval.1
}

; Function Attrs: nounwind uwtable
define internal i32 @wm9712_poll_touch(%struct.wm97xx.679* %wm, %struct.exception_table_entry* %data) #0 {
entry:
  %0 = load i32, i32* @coord, align 4, !tbaa !55
  %tobool = icmp ne i32 %0, 0
  br i1 %tobool, label %if.then, label %if.else

if.then:                                          ; preds = %entry
  %call = call i32 @wm9712_poll_coord(%struct.wm97xx.679* %wm, %struct.exception_table_entry* %data)
  %cmp = icmp ne i32 %call, 2
  br i1 %cmp, label %cleanup, label %if.end20

if.else:                                          ; preds = %entry
  %x = getelementptr inbounds %struct.exception_table_entry, %struct.exception_table_entry* %data, i32 0, i32 0
  %call2 = call i32 @wm9712_poll_sample(%struct.wm97xx.679* %wm, i32 36864, i32* %x)
  %cmp3 = icmp ne i32 %call2, 2
  br i1 %cmp3, label %cleanup, label %if.end5

if.end5:                                          ; preds = %if.else
  %y = getelementptr inbounds %struct.exception_table_entry, %struct.exception_table_entry* %data, i32 0, i32 1
  %call6 = call i32 @wm9712_poll_sample(%struct.wm97xx.679* %wm, i32 40960, i32* %y)
  %cmp7 = icmp ne i32 %call6, 2
  br i1 %cmp7, label %cleanup, label %if.end9

if.end9:                                          ; preds = %if.end5
  %1 = load i32, i32* @pil.30, align 4, !tbaa !55
  %tobool10 = icmp eq i32 %1, 0
  %2 = load i32, i32* @five_wire, align 4
  %tobool11 = icmp ne i32 %2, 0
  %or.cond = or i1 %tobool10, %tobool11
  %p18 = getelementptr inbounds %struct.exception_table_entry, %struct.exception_table_entry* %data, i32 0, i32 2
  br i1 %or.cond, label %if.else17, label %if.then12

if.then12:                                        ; preds = %if.end9
  %call13 = call i32 @wm9712_poll_sample(%struct.wm97xx.679* %wm, i32 45056, i32* %p18)
  %cmp14 = icmp ne i32 %call13, 2
  br i1 %cmp14, label %cleanup, label %if.end20

if.else17:                                        ; preds = %if.end9
  store i32 45248, i32* %p18, align 4, !tbaa !104
  br label %if.end20

if.end20:                                         ; preds = %if.else17, %if.then12, %if.then
  br label %cleanup

cleanup:                                          ; preds = %if.end20, %if.then12, %if.end5, %if.else, %if.then
  %retval.0 = phi i32 [ 2, %if.end20 ], [ %call, %if.then ], [ %call2, %if.else ], [ %call6, %if.end5 ], [ %call13, %if.then12 ]
  ret i32 %retval.0
}

; Function Attrs: nounwind uwtable
define internal i32 @wm9712_acc_enable(%struct.wm97xx.679* %wm, i32 %enable) #0 {
entry:
  %dig = getelementptr inbounds %struct.wm97xx.679, %struct.wm97xx.679* %wm, i32 0, i32 0
  %arrayidx = getelementptr inbounds [3 x i16], [3 x i16]* %dig, i64 0, i64 1
  %0 = load i16, i16* %arrayidx, align 2, !tbaa !34
  %dig3 = getelementptr inbounds %struct.wm97xx.679, %struct.wm97xx.679* %wm, i32 0, i32 0
  %arrayidx4 = getelementptr inbounds [3 x i16], [3 x i16]* %dig3, i64 0, i64 2
  %1 = load i16, i16* %arrayidx4, align 4, !tbaa !34
  %tobool = icmp ne i32 %enable, 0
  br i1 %tobool, label %if.then, label %if.else

if.then:                                          ; preds = %entry
  %mach_ops = getelementptr inbounds %struct.wm97xx.679, %struct.wm97xx.679* %wm, i32 0, i32 11
  %2 = load %struct.wm97xx_mach_ops.685*, %struct.wm97xx_mach_ops.685** %mach_ops, align 8, !tbaa !2
  %acc_startup = getelementptr inbounds %struct.wm97xx_mach_ops.685, %struct.wm97xx_mach_ops.685* %2, i32 0, i32 3
  %3 = load i32 (%struct.wm97xx.679*)*, i32 (%struct.wm97xx.679*)** %acc_startup, align 8, !tbaa !109
  %tobool5 = icmp ne i32 (%struct.wm97xx.679*)* %3, null
  br i1 %tobool5, label %if.then6, label %if.end10

if.then6:                                         ; preds = %if.then
  %mach_ops7 = getelementptr inbounds %struct.wm97xx.679, %struct.wm97xx.679* %wm, i32 0, i32 11
  %4 = load %struct.wm97xx_mach_ops.685*, %struct.wm97xx_mach_ops.685** %mach_ops7, align 8, !tbaa !2
  %acc_startup8 = getelementptr inbounds %struct.wm97xx_mach_ops.685, %struct.wm97xx_mach_ops.685* %4, i32 0, i32 3
  %5 = load i32 (%struct.wm97xx.679*)*, i32 (%struct.wm97xx.679*)** %acc_startup8, align 8, !tbaa !109
  %call = call i32 %5(%struct.wm97xx.679* %wm)
  %cmp = icmp slt i32 %call, 0
  br i1 %cmp, label %cleanup, label %if.end10

if.end10:                                         ; preds = %if.then6, %if.then
  %conv = zext i16 %0 to i32
  %and = and i32 %conv, -29688
  %conv11 = trunc i32 %and to i16
  %6 = load i32, i32* @delay.35, align 4, !tbaa !55
  %shl = shl i32 %6, 4
  %and12 = and i32 %shl, 240
  %or = or i32 3080, %and12
  %acc_slot = getelementptr inbounds %struct.wm97xx.679, %struct.wm97xx.679* %wm, i32 0, i32 19
  %7 = load i16, i16* %acc_slot, align 8, !tbaa !107
  %conv13 = zext i16 %7 to i32
  %sub = sub nsw i32 %conv13, 5
  %and14 = and i32 %sub, 7
  %or15 = or i32 %or, %and14
  %acc_rate = getelementptr inbounds %struct.wm97xx.679, %struct.wm97xx.679* %wm, i32 0, i32 20
  %8 = load i16, i16* %acc_rate, align 2, !tbaa !108
  %conv16 = zext i16 %8 to i32
  %and17 = and i32 %conv16, 3
  %shl18 = shl i32 %and17, 8
  %acc_rate19 = getelementptr inbounds %struct.wm97xx.679, %struct.wm97xx.679* %wm, i32 0, i32 20
  %9 = load i16, i16* %acc_rate19, align 2, !tbaa !108
  %conv20 = zext i16 %9 to i32
  %and21 = and i32 %conv20, 4
  %tobool22 = icmp ne i32 %and21, 0
  %cond = select i1 %tobool22, i32 240, i32 0
  %or23 = or i32 %shl18, %cond
  %or24 = or i32 %or15, %or23
  %conv25 = zext i16 %conv11 to i32
  %or26 = or i32 %conv25, %or24
  %conv27 = trunc i32 %or26 to i16
  %10 = load i32, i32* @pil.30, align 4, !tbaa !55
  %tobool28 = icmp ne i32 %10, 0
  %conv30 = zext i16 %conv27 to i32
  %or31 = or i32 %conv30, 12288
  %conv32 = trunc i32 %or31 to i16
  %dig1.0 = select i1 %tobool28, i16 %conv32, i16 %conv27
  %conv34 = zext i16 %1 to i32
  %or35 = or i32 %conv34, 2048
  %conv36 = trunc i32 %or35 to i16
  br label %if.end49

if.else:                                          ; preds = %entry
  %conv37 = zext i16 %0 to i32
  %and38 = and i32 %conv37, -3081
  %conv39 = trunc i32 %and38 to i16
  %conv40 = zext i16 %1 to i32
  %and41 = and i32 %conv40, -2049
  %conv42 = trunc i32 %and41 to i16
  %mach_ops43 = getelementptr inbounds %struct.wm97xx.679, %struct.wm97xx.679* %wm, i32 0, i32 11
  %11 = load %struct.wm97xx_mach_ops.685*, %struct.wm97xx_mach_ops.685** %mach_ops43, align 8, !tbaa !2
  %acc_shutdown = getelementptr inbounds %struct.wm97xx_mach_ops.685, %struct.wm97xx_mach_ops.685* %11, i32 0, i32 4
  %12 = load void (%struct.wm97xx.679*)*, void (%struct.wm97xx.679*)** %acc_shutdown, align 8, !tbaa !110
  %tobool44 = icmp ne void (%struct.wm97xx.679*)* %12, null
  br i1 %tobool44, label %if.then45, label %if.end49

if.then45:                                        ; preds = %if.else
  %mach_ops46 = getelementptr inbounds %struct.wm97xx.679, %struct.wm97xx.679* %wm, i32 0, i32 11
  %13 = load %struct.wm97xx_mach_ops.685*, %struct.wm97xx_mach_ops.685** %mach_ops46, align 8, !tbaa !2
  %acc_shutdown47 = getelementptr inbounds %struct.wm97xx_mach_ops.685, %struct.wm97xx_mach_ops.685* %13, i32 0, i32 4
  %14 = load void (%struct.wm97xx.679*)*, void (%struct.wm97xx.679*)** %acc_shutdown47, align 8, !tbaa !110
  call void %14(%struct.wm97xx.679* %wm)
  br label %if.end49

if.end49:                                         ; preds = %if.then45, %if.else, %if.end10
  %dig2.0 = phi i16 [ %conv36, %if.end10 ], [ %conv42, %if.then45 ], [ %conv42, %if.else ]
  %dig1.1 = phi i16 [ %dig1.0, %if.end10 ], [ %conv39, %if.then45 ], [ %conv39, %if.else ]
  call void bitcast (void (%struct.wm97xx*, i16, i16)* @wm97xx_reg_write to void (%struct.wm97xx.679*, i16, i16)*)(%struct.wm97xx.679* %wm, i16 zeroext 118, i16 zeroext %dig1.1)
  call void bitcast (void (%struct.wm97xx*, i16, i16)* @wm97xx_reg_write to void (%struct.wm97xx.679*, i16, i16)*)(%struct.wm97xx.679* %wm, i16 zeroext 120, i16 zeroext %dig2.0)
  br label %cleanup

cleanup:                                          ; preds = %if.end49, %if.then6
  %retval.0 = phi i32 [ 0, %if.end49 ], [ %call, %if.then6 ]
  ret i32 %retval.0
}

; Function Attrs: nounwind uwtable
define internal void @wm9712_phy_init(%struct.wm97xx.679* %wm) #0 {
entry:
  %0 = load i32, i32* @rpu, align 4, !tbaa !55
  %tobool = icmp ne i32 %0, 0
  br i1 %tobool, label %if.then, label %if.end14

if.then:                                          ; preds = %entry
  %conv = zext i16 8193 to i32
  %and = and i32 %conv, 65472
  %conv1 = trunc i32 %and to i16
  %1 = load i32, i32* @rpu, align 4, !tbaa !55
  %and2 = and i32 %1, 63
  %conv3 = zext i16 %conv1 to i32
  %or = or i32 %conv3, %and2
  %conv4 = trunc i32 %or to i16
  %bf.load = load i32, i32* getelementptr inbounds (%struct._ddebug, %struct._ddebug* bitcast ({ i8*, i8*, i8*, i8*, i8, i8, i8, i8 }* @wm9712_phy_init.descriptor to %struct._ddebug*), i32 0, i32 4), align 8
  %bf.lshr = lshr i32 %bf.load, 18
  %bf.clear = and i32 %bf.lshr, 255
  %and6 = and i32 %bf.clear, 1
  %tobool7 = icmp ne i32 %and6, 0
  %lnot = xor i1 %tobool7, true
  %lnot8 = xor i1 %lnot, true
  %lnot.ext = zext i1 %lnot8 to i32
  %conv9 = sext i32 %lnot.ext to i64
  %expval = call i64 @llvm.expect.i64(i64 %conv9, i64 0)
  %tobool10 = icmp ne i64 %expval, 0
  br i1 %tobool10, label %if.then11, label %if.end14

if.then11:                                        ; preds = %if.then
  %dev = getelementptr inbounds %struct.wm97xx.679, %struct.wm97xx.679* %wm, i32 0, i32 8
  %2 = load %struct.device*, %struct.device** %dev, align 8, !tbaa !31
  %3 = load i32, i32* @rpu, align 4, !tbaa !55
  %div = sdiv i32 64000, %3
  call void (%struct._ddebug*, %struct.device*, i8*, ...) @__dynamic_dev_dbg(%struct._ddebug* bitcast ({ i8*, i8*, i8*, i8*, i8, i8, i8, i8 }* @wm9712_phy_init.descriptor to %struct._ddebug*), %struct.device* %2, i8* getelementptr inbounds ([39 x i8], [39 x i8]* @.str.6.57, i32 0, i32 0), i32 %div)
  br label %if.end14

if.end14:                                         ; preds = %if.then11, %if.then, %entry
  %dig2.0 = phi i16 [ 8193, %entry ], [ %conv4, %if.then11 ], [ %conv4, %if.then ]
  %4 = load i32, i32* @five_wire, align 4, !tbaa !55
  %tobool15 = icmp ne i32 %4, 0
  br i1 %tobool15, label %if.then16, label %if.end45

if.then16:                                        ; preds = %if.end14
  %conv17 = zext i16 %dig2.0 to i32
  %or18 = or i32 %conv17, 4096
  %conv19 = trunc i32 %or18 to i16
  %bf.load22 = load i32, i32* getelementptr inbounds (%struct._ddebug, %struct._ddebug* bitcast ({ i8*, i8*, i8*, i8*, i8, i8, i8, i8 }* @wm9712_phy_init.descriptor.7 to %struct._ddebug*), i32 0, i32 4), align 8
  %bf.lshr23 = lshr i32 %bf.load22, 18
  %bf.clear24 = and i32 %bf.lshr23, 255
  %and25 = and i32 %bf.clear24, 1
  %tobool26 = icmp ne i32 %and25, 0
  %lnot27 = xor i1 %tobool26, true
  %lnot29 = xor i1 %lnot27, true
  %lnot.ext30 = zext i1 %lnot29 to i32
  %conv31 = sext i32 %lnot.ext30 to i64
  %expval32 = call i64 @llvm.expect.i64(i64 %conv31, i64 0)
  %tobool33 = icmp ne i64 %expval32, 0
  br i1 %tobool33, label %if.then34, label %do.end40

if.then34:                                        ; preds = %if.then16
  %dev35 = getelementptr inbounds %struct.wm97xx.679, %struct.wm97xx.679* %wm, i32 0, i32 8
  %5 = load %struct.device*, %struct.device** %dev35, align 8, !tbaa !31
  call void (%struct._ddebug*, %struct.device*, i8*, ...) @__dynamic_dev_dbg(%struct._ddebug* bitcast ({ i8*, i8*, i8*, i8*, i8, i8, i8, i8 }* @wm9712_phy_init.descriptor.7 to %struct._ddebug*), %struct.device* %5, i8* getelementptr inbounds ([34 x i8], [34 x i8]* @.str.8.29, i32 0, i32 0))
  br label %do.end40

do.end40:                                         ; preds = %if.then34, %if.then16
  %6 = load i32, i32* @pil.30, align 4, !tbaa !55
  %tobool41 = icmp ne i32 %6, 0
  br i1 %tobool41, label %if.then42, label %if.end45

if.then42:                                        ; preds = %do.end40
  call void (%struct.device*, i8*, ...) @dev_warn(%struct.device* null, i8* null)
  store i32 0, i32* @pil.30, align 4, !tbaa !55
  br label %if.end45

if.end45:                                         ; preds = %if.then42, %do.end40, %if.end14
  %dig2.1 = phi i16 [ %dig2.0, %if.end14 ], [ %conv19, %if.then42 ], [ %conv19, %do.end40 ]
  %7 = load i32, i32* @pil.30, align 4, !tbaa !55
  %cmp = icmp eq i32 %7, 2
  br i1 %cmp, label %if.then47, label %if.else

if.then47:                                        ; preds = %if.end45
  %conv48 = zext i16 %dig2.1 to i32
  %or49 = or i32 %conv48, 256
  %conv50 = trunc i32 %or49 to i16
  %bf.load53 = load i32, i32* getelementptr inbounds (%struct._ddebug, %struct._ddebug* bitcast ({ i8*, i8*, i8*, i8*, i8, i8, i8, i8 }* @wm9712_phy_init.descriptor.10 to %struct._ddebug*), i32 0, i32 4), align 8
  %bf.lshr54 = lshr i32 %bf.load53, 18
  %bf.clear55 = and i32 %bf.lshr54, 255
  %and56 = and i32 %bf.clear55, 1
  %tobool57 = icmp ne i32 %and56, 0
  %lnot58 = xor i1 %tobool57, true
  %lnot60 = xor i1 %lnot58, true
  %lnot.ext61 = zext i1 %lnot60 to i32
  %conv62 = sext i32 %lnot.ext61 to i64
  %expval63 = call i64 @llvm.expect.i64(i64 %conv62, i64 0)
  %tobool64 = icmp ne i64 %expval63, 0
  br i1 %tobool64, label %if.then65, label %if.end96

if.then65:                                        ; preds = %if.then47
  %dev66 = getelementptr inbounds %struct.wm97xx.679, %struct.wm97xx.679* %wm, i32 0, i32 8
  %8 = load %struct.device*, %struct.device** %dev66, align 8, !tbaa !31
  call void (%struct._ddebug*, %struct.device*, i8*, ...) @__dynamic_dev_dbg(%struct._ddebug* bitcast ({ i8*, i8*, i8*, i8*, i8, i8, i8, i8 }* @wm9712_phy_init.descriptor.10 to %struct._ddebug*), %struct.device* %8, i8* getelementptr inbounds ([48 x i8], [48 x i8]* @.str.11.32, i32 0, i32 0))
  br label %if.end96

if.else:                                          ; preds = %if.end45
  %9 = load i32, i32* @pil.30, align 4, !tbaa !55
  %tobool72 = icmp ne i32 %9, 0
  br i1 %tobool72, label %do.body75, label %if.end96

do.body75:                                        ; preds = %if.else
  %bf.load76 = load i32, i32* getelementptr inbounds (%struct._ddebug, %struct._ddebug* bitcast ({ i8*, i8*, i8*, i8*, i8, i8, i8, i8 }* @wm9712_phy_init.descriptor.12 to %struct._ddebug*), i32 0, i32 4), align 8
  %bf.lshr77 = lshr i32 %bf.load76, 18
  %bf.clear78 = and i32 %bf.lshr77, 255
  %and79 = and i32 %bf.clear78, 1
  %tobool80 = icmp ne i32 %and79, 0
  %lnot81 = xor i1 %tobool80, true
  %lnot83 = xor i1 %lnot81, true
  %lnot.ext84 = zext i1 %lnot83 to i32
  %conv85 = sext i32 %lnot.ext84 to i64
  %expval86 = call i64 @llvm.expect.i64(i64 %conv85, i64 0)
  %tobool87 = icmp ne i64 %expval86, 0
  br i1 %tobool87, label %if.then88, label %if.end96

if.then88:                                        ; preds = %do.body75
  %dev89 = getelementptr inbounds %struct.wm97xx.679, %struct.wm97xx.679* %wm, i32 0, i32 8
  %10 = load %struct.device*, %struct.device** %dev89, align 8, !tbaa !31
  call void (%struct._ddebug*, %struct.device*, i8*, ...) @__dynamic_dev_dbg(%struct._ddebug* bitcast ({ i8*, i8*, i8*, i8*, i8, i8, i8, i8 }* @wm9712_phy_init.descriptor.12 to %struct._ddebug*), %struct.device* %10, i8* getelementptr inbounds ([48 x i8], [48 x i8]* @.str.13.33, i32 0, i32 0))
  br label %if.end96

if.end96:                                         ; preds = %if.then88, %do.body75, %if.else, %if.then65, %if.then47
  %dig2.2 = phi i16 [ %conv50, %if.then65 ], [ %conv50, %if.then47 ], [ %dig2.1, %do.body75 ], [ %dig2.1, %if.then88 ], [ %dig2.1, %if.else ]
  %11 = load i32, i32* @pil.30, align 4, !tbaa !55
  %tobool97 = icmp ne i32 %11, 0
  br i1 %tobool97, label %if.end99, label %if.then98

if.then98:                                        ; preds = %if.end96
  store i32 0, i32* @pressure.34, align 4, !tbaa !55
  br label %if.end99

if.end99:                                         ; preds = %if.then98, %if.end96
  %12 = load i32, i32* @delay.35, align 4, !tbaa !55
  %cmp100 = icmp slt i32 %12, 0
  %13 = load i32, i32* @delay.35, align 4
  %cmp102 = icmp sgt i32 %13, 15
  %or.cond = or i1 %cmp100, %cmp102
  br i1 %or.cond, label %do.body106, label %if.end126

do.body106:                                       ; preds = %if.end99
  %bf.load107 = load i32, i32* getelementptr inbounds (%struct._ddebug, %struct._ddebug* bitcast ({ i8*, i8*, i8*, i8*, i8, i8, i8, i8 }* @wm9712_phy_init.descriptor.14 to %struct._ddebug*), i32 0, i32 4), align 8
  %bf.lshr108 = lshr i32 %bf.load107, 18
  %bf.clear109 = and i32 %bf.lshr108, 255
  %and110 = and i32 %bf.clear109, 1
  %tobool111 = icmp ne i32 %and110, 0
  %lnot112 = xor i1 %tobool111, true
  %lnot114 = xor i1 %lnot112, true
  %lnot.ext115 = zext i1 %lnot114 to i32
  %conv116 = sext i32 %lnot.ext115 to i64
  %expval117 = call i64 @llvm.expect.i64(i64 %conv116, i64 0)
  %tobool118 = icmp ne i64 %expval117, 0
  br i1 %tobool118, label %if.then119, label %do.end125

if.then119:                                       ; preds = %do.body106
  %dev120 = getelementptr inbounds %struct.wm97xx.679, %struct.wm97xx.679* %wm, i32 0, i32 8
  %14 = load %struct.device*, %struct.device** %dev120, align 8, !tbaa !31
  call void (%struct._ddebug*, %struct.device*, i8*, ...) @__dynamic_dev_dbg(%struct._ddebug* bitcast ({ i8*, i8*, i8*, i8*, i8, i8, i8, i8 }* @wm9712_phy_init.descriptor.14 to %struct._ddebug*), %struct.device* %14, i8* getelementptr inbounds ([30 x i8], [30 x i8]* @.str.15, i32 0, i32 0))
  br label %do.end125

do.end125:                                        ; preds = %if.then119, %do.body106
  store i32 4, i32* @delay.35, align 4, !tbaa !55
  br label %if.end126

if.end126:                                        ; preds = %do.end125, %if.end99
  %conv127 = zext i16 0 to i32
  %and128 = and i32 %conv127, 65295
  %conv129 = trunc i32 %and128 to i16
  %15 = load i32, i32* @delay.35, align 4, !tbaa !55
  %shl = shl i32 %15, 4
  %and130 = and i32 %shl, 240
  %conv131 = zext i16 %conv129 to i32
  %or132 = or i32 %conv131, %and130
  %conv133 = trunc i32 %or132 to i16
  %bf.load136 = load i32, i32* getelementptr inbounds (%struct._ddebug, %struct._ddebug* bitcast ({ i8*, i8*, i8*, i8*, i8, i8, i8, i8 }* @wm9712_phy_init.descriptor.16 to %struct._ddebug*), i32 0, i32 4), align 8
  %bf.lshr137 = lshr i32 %bf.load136, 18
  %bf.clear138 = and i32 %bf.lshr137, 255
  %and139 = and i32 %bf.clear138, 1
  %tobool140 = icmp ne i32 %and139, 0
  %lnot141 = xor i1 %tobool140, true
  %lnot143 = xor i1 %lnot141, true
  %lnot.ext144 = zext i1 %lnot143 to i32
  %conv145 = sext i32 %lnot.ext144 to i64
  %expval146 = call i64 @llvm.expect.i64(i64 %conv145, i64 0)
  %tobool147 = icmp ne i64 %expval146, 0
  br i1 %tobool147, label %if.then148, label %do.end154

if.then148:                                       ; preds = %if.end126
  %dev149 = getelementptr inbounds %struct.wm97xx.679, %struct.wm97xx.679* %wm, i32 0, i32 8
  %16 = load %struct.device*, %struct.device** %dev149, align 8, !tbaa !31
  %17 = load i32, i32* @delay.35, align 4, !tbaa !55
  %idxprom = sext i32 %17 to i64
  %arrayidx = getelementptr inbounds [16 x i32], [16 x i32]* @delay_table.36, i64 0, i64 %idxprom
  %18 = load i32, i32* %arrayidx, align 4, !tbaa !55
  call void (%struct._ddebug*, %struct.device*, i8*, ...) @__dynamic_dev_dbg(%struct._ddebug* bitcast ({ i8*, i8*, i8*, i8*, i8, i8, i8, i8 }* @wm9712_phy_init.descriptor.16 to %struct._ddebug*), %struct.device* %16, i8* getelementptr inbounds ([40 x i8], [40 x i8]* @.str.17, i32 0, i32 0), i32 %18)
  br label %do.end154

do.end154:                                        ; preds = %if.then148, %if.end126
  %19 = load i32, i32* @mask.37, align 4, !tbaa !55
  %and155 = and i32 %19, 3
  %shl156 = shl i32 %and155, 6
  %conv157 = zext i16 %dig2.2 to i32
  %or158 = or i32 %conv157, %shl156
  %conv159 = trunc i32 %or158 to i16
  %20 = load i32, i32* @mask.37, align 4, !tbaa !55
  %tobool160 = icmp ne i32 %20, 0
  br i1 %tobool160, label %if.then161, label %if.end171

if.then161:                                       ; preds = %do.end154
  %call = call i32 bitcast (i32 (%struct.wm97xx*, i16)* @wm97xx_reg_read to i32 (%struct.wm97xx.679*, i16)*)(%struct.wm97xx.679* %wm, i16 zeroext 86)
  %conv162 = trunc i32 %call to i16
  %conv163 = zext i16 %conv162 to i32
  %or164 = or i32 %conv163, 16
  %conv165 = trunc i32 %or164 to i16
  call void bitcast (void (%struct.wm97xx*, i16, i16)* @wm97xx_reg_write to void (%struct.wm97xx.679*, i16, i16)*)(%struct.wm97xx.679* %wm, i16 zeroext 86, i16 zeroext %conv165)
  %call166 = call i32 bitcast (i32 (%struct.wm97xx*, i16)* @wm97xx_reg_read to i32 (%struct.wm97xx.679*, i16)*)(%struct.wm97xx.679* %wm, i16 zeroext 76)
  %conv167 = trunc i32 %call166 to i16
  %conv168 = zext i16 %conv167 to i32
  %or169 = or i32 %conv168, 16
  %conv170 = trunc i32 %or169 to i16
  call void bitcast (void (%struct.wm97xx*, i16, i16)* @wm97xx_reg_write to void (%struct.wm97xx.679*, i16, i16)*)(%struct.wm97xx.679* %wm, i16 zeroext 76, i16 zeroext %conv170)
  br label %if.end171

if.end171:                                        ; preds = %if.then161, %do.end154
  %21 = load i32, i32* @coord, align 4, !tbaa !55
  %tobool172 = icmp ne i32 %21, 0
  %conv174 = zext i16 %conv159 to i32
  %or175 = or i32 %conv174, 512
  %conv176 = trunc i32 %or175 to i16
  %dig2.3 = select i1 %tobool172, i16 %conv176, i16 %conv159
  call void bitcast (void (%struct.wm97xx*, i16, i16)* @wm97xx_reg_write to void (%struct.wm97xx.679*, i16, i16)*)(%struct.wm97xx.679* %wm, i16 zeroext 118, i16 zeroext %conv133)
  call void bitcast (void (%struct.wm97xx*, i16, i16)* @wm97xx_reg_write to void (%struct.wm97xx.679*, i16, i16)*)(%struct.wm97xx.679* %wm, i16 zeroext 120, i16 zeroext %dig2.3)
  ret void
}

; Function Attrs: nounwind uwtable
define internal void @wm9712_dig_enable(%struct.wm97xx.679* %wm, i32 %enable) #0 {
entry:
  %dig = getelementptr inbounds %struct.wm97xx.679, %struct.wm97xx.679* %wm, i32 0, i32 0
  %arrayidx = getelementptr inbounds [3 x i16], [3 x i16]* %dig, i64 0, i64 2
  %0 = load i16, i16* %arrayidx, align 4, !tbaa !34
  %tobool = icmp ne i32 %enable, 0
  %conv = zext i16 %0 to i32
  br i1 %tobool, label %if.then, label %if.else

if.then:                                          ; preds = %entry
  %or = or i32 %conv, 49152
  %conv1 = trunc i32 %or to i16
  call void bitcast (void (%struct.wm97xx*, i16, i16)* @wm97xx_reg_write to void (%struct.wm97xx.679*, i16, i16)*)(%struct.wm97xx.679* %wm, i16 zeroext 120, i16 zeroext %conv1)
  %call = call i32 bitcast (i32 (%struct.wm97xx*, i16)* @wm97xx_reg_read to i32 (%struct.wm97xx.679*, i16)*)(%struct.wm97xx.679* %wm, i16 zeroext 122)
  br label %if.end

if.else:                                          ; preds = %entry
  %and = and i32 %conv, -49153
  %conv3 = trunc i32 %and to i16
  call void bitcast (void (%struct.wm97xx*, i16, i16)* @wm97xx_reg_write to void (%struct.wm97xx.679*, i16, i16)*)(%struct.wm97xx.679* %wm, i16 zeroext 120, i16 zeroext %conv3)
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then
  ret void
}

; Function Attrs: nounwind uwtable
define internal void @wm9712_dig_restore(%struct.wm97xx.679* %wm) #0 {
entry:
  %dig_save = getelementptr inbounds %struct.wm97xx.679, %struct.wm97xx.679* %wm, i32 0, i32 4
  %arrayidx = getelementptr inbounds [3 x i16], [3 x i16]* %dig_save, i64 0, i64 1
  %0 = load i16, i16* %arrayidx, align 2, !tbaa !34
  call void bitcast (void (%struct.wm97xx*, i16, i16)* @wm97xx_reg_write to void (%struct.wm97xx.679*, i16, i16)*)(%struct.wm97xx.679* %wm, i16 zeroext 118, i16 zeroext %0)
  %dig_save1 = getelementptr inbounds %struct.wm97xx.679, %struct.wm97xx.679* %wm, i32 0, i32 4
  %arrayidx2 = getelementptr inbounds [3 x i16], [3 x i16]* %dig_save1, i64 0, i64 2
  %1 = load i16, i16* %arrayidx2, align 2, !tbaa !34
  call void bitcast (void (%struct.wm97xx*, i16, i16)* @wm97xx_reg_write to void (%struct.wm97xx.679*, i16, i16)*)(%struct.wm97xx.679* %wm, i16 zeroext 120, i16 zeroext %1)
  ret void
}

; Function Attrs: nounwind uwtable
define internal void @wm9712_aux_prepare(%struct.wm97xx.679* %wm) #0 {
entry:
  %dig_save = getelementptr inbounds %struct.wm97xx.679, %struct.wm97xx.679* %wm, i32 0, i32 4
  %arraydecay = getelementptr inbounds [3 x i16], [3 x i16]* %dig_save, i32 0, i32 0
  %0 = bitcast i16* %arraydecay to i8*
  %dig = getelementptr inbounds %struct.wm97xx.679, %struct.wm97xx.679* %wm, i32 0, i32 0
  %arraydecay1 = getelementptr inbounds [3 x i16], [3 x i16]* %dig, i32 0, i32 0
  %1 = bitcast i16* %arraydecay1 to i8*
  %call = call i8* @__memcpy(i8* %0, i8* %1, i64 6)
  call void bitcast (void (%struct.wm97xx*, i16, i16)* @wm97xx_reg_write to void (%struct.wm97xx.679*, i16, i16)*)(%struct.wm97xx.679* %wm, i16 zeroext 118, i16 zeroext 0)
  call void bitcast (void (%struct.wm97xx*, i16, i16)* @wm97xx_reg_write to void (%struct.wm97xx.679*, i16, i16)*)(%struct.wm97xx.679* %wm, i16 zeroext 120, i16 zeroext -16384)
  ret void
}

declare void @dev_warn(%struct.device*, i8*, ...) #1

; Function Attrs: nounwind uwtable
define internal i32 @wm9712_poll_coord(%struct.wm97xx.679* %wm, %struct.exception_table_entry* %data) #0 {
entry:
  %0 = load i32, i32* @delay.35, align 4, !tbaa !55
  %mul = mul nsw i32 5, %0
  %pen_probably_down = getelementptr inbounds %struct.wm97xx.679, %struct.wm97xx.679* %wm, i32 0, i32 21
  %bf.load = load i8, i8* %pen_probably_down, align 4
  %bf.lshr = lshr i8 %bf.load, 2
  %bf.clear = and i8 %bf.lshr, 1
  %bf.cast = zext i8 %bf.clear to i32
  %tobool = icmp ne i32 %bf.cast, 0
  br i1 %tobool, label %if.end7, label %if.then

if.then:                                          ; preds = %entry
  %call = call i32 bitcast (i32 (%struct.wm97xx*, i16)* @wm97xx_reg_read to i32 (%struct.wm97xx.679*, i16)*)(%struct.wm97xx.679* %wm, i16 zeroext 122)
  %conv = trunc i32 %call to i16
  %conv1 = zext i16 %conv to i32
  %and = and i32 %conv1, 32768
  %tobool2 = icmp ne i32 %and, 0
  br i1 %tobool2, label %if.end, label %LeafBlock

if.end:                                           ; preds = %if.then
  %pen_probably_down4 = getelementptr inbounds %struct.wm97xx.679, %struct.wm97xx.679* %wm, i32 0, i32 21
  %bf.load5 = load i8, i8* %pen_probably_down4, align 4
  %bf.clear6 = and i8 %bf.load5, -5
  %bf.set = or i8 %bf.clear6, 4
  store i8 %bf.set, i8* %pen_probably_down4, align 4
  br label %LeafBlock

LeafBlock:                                        ; preds = %if.end, %if.then
  %cleanup.dest.slot.0 = phi i32 [ 0, %if.end ], [ 1, %if.then ]
  %SwitchLeaf = icmp eq i32 %cleanup.dest.slot.0, 0
  br i1 %SwitchLeaf, label %if.end7, label %cleanup88

if.end7:                                          ; preds = %LeafBlock, %entry
  %mach_ops = getelementptr inbounds %struct.wm97xx.679, %struct.wm97xx.679* %wm, i32 0, i32 11
  %1 = load %struct.wm97xx_mach_ops.685*, %struct.wm97xx_mach_ops.685** %mach_ops, align 8, !tbaa !2
  %tobool8 = icmp ne %struct.wm97xx_mach_ops.685* %1, null
  br i1 %tobool8, label %land.lhs.true, label %if.end14

land.lhs.true:                                    ; preds = %if.end7
  %mach_ops9 = getelementptr inbounds %struct.wm97xx.679, %struct.wm97xx.679* %wm, i32 0, i32 11
  %2 = load %struct.wm97xx_mach_ops.685*, %struct.wm97xx_mach_ops.685** %mach_ops9, align 8, !tbaa !2
  %pre_sample = getelementptr inbounds %struct.wm97xx_mach_ops.685, %struct.wm97xx_mach_ops.685* %2, i32 0, i32 7
  %3 = load void (i32)*, void (i32)** %pre_sample, align 8, !tbaa !105
  %tobool10 = icmp ne void (i32)* %3, null
  br i1 %tobool10, label %if.then11, label %if.end14

if.then11:                                        ; preds = %land.lhs.true
  %mach_ops12 = getelementptr inbounds %struct.wm97xx.679, %struct.wm97xx.679* %wm, i32 0, i32 11
  %4 = load %struct.wm97xx_mach_ops.685*, %struct.wm97xx_mach_ops.685** %mach_ops12, align 8, !tbaa !2
  %pre_sample13 = getelementptr inbounds %struct.wm97xx_mach_ops.685, %struct.wm97xx_mach_ops.685* %4, i32 0, i32 7
  %5 = load void (i32)*, void (i32)** %pre_sample13, align 8, !tbaa !105
  call void %5(i32 12288)
  br label %if.end14

if.end14:                                         ; preds = %if.then11, %land.lhs.true, %if.end7
  %6 = load i32, i32* @delay.35, align 4, !tbaa !55
  %shl = shl i32 %6, 4
  %and15 = and i32 %shl, 240
  %or = or i32 34816, %and15
  %conv16 = trunc i32 %or to i16
  call void bitcast (void (%struct.wm97xx*, i16, i16)* @wm97xx_reg_write to void (%struct.wm97xx.679*, i16, i16)*)(%struct.wm97xx.679* %wm, i16 zeroext 118, i16 zeroext %conv16)
  %7 = load i32, i32* @delay.35, align 4, !tbaa !55
  call void @poll_delay.40(i32 %7)
  %call17 = call i32 bitcast (i32 (%struct.wm97xx*, i16)* @wm97xx_reg_read to i32 (%struct.wm97xx.679*, i16)*)(%struct.wm97xx.679* %wm, i16 zeroext 122)
  %x = getelementptr inbounds %struct.exception_table_entry, %struct.exception_table_entry* %data, i32 0, i32 0
  store i32 %call17, i32* %x, align 4, !tbaa !101
  br label %while.cond

while.cond:                                       ; preds = %while.body, %if.end14
  %timeout.0 = phi i32 [ %mul, %if.end14 ], [ %dec, %while.body ]
  %call18 = call i32 bitcast (i32 (%struct.wm97xx*, i16)* @wm97xx_reg_read to i32 (%struct.wm97xx.679*, i16)*)(%struct.wm97xx.679* %wm, i16 zeroext 118)
  %and19 = and i32 %call18, 32768
  %tobool20 = icmp ne i32 %and19, 0
  %tobool21 = icmp ne i32 %timeout.0, 0
  %tobool21. = select i1 %tobool20, i1 %tobool21, i1 false
  br i1 %tobool21., label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  call void @__const_udelay(i64 90195)
  %dec = add nsw i32 %timeout.0, -1
  br label %while.cond

while.end:                                        ; preds = %while.cond
  %cmp = icmp sle i32 %timeout.0, 0
  br i1 %cmp, label %if.then23, label %if.end44

if.then23:                                        ; preds = %while.end
  %call24 = call i32 @is_pden.41(%struct.wm97xx.679* %wm)
  %tobool25 = icmp ne i32 %call24, 0
  br i1 %tobool25, label %if.then26, label %do.body30

if.then26:                                        ; preds = %if.then23
  %pen_probably_down27 = getelementptr inbounds %struct.wm97xx.679, %struct.wm97xx.679* %wm, i32 0, i32 21
  %bf.load28 = load i8, i8* %pen_probably_down27, align 4
  %bf.clear29 = and i8 %bf.load28, -5
  store i8 %bf.clear29, i8* %pen_probably_down27, align 4
  br label %cleanup88

do.body30:                                        ; preds = %if.then23
  %bf.load31 = load i32, i32* getelementptr inbounds (%struct._ddebug, %struct._ddebug* bitcast ({ i8*, i8*, i8*, i8*, i8, i8, i8, i8 }* @wm9712_poll_coord.descriptor to %struct._ddebug*), i32 0, i32 4), align 8
  %bf.lshr32 = lshr i32 %bf.load31, 18
  %bf.clear33 = and i32 %bf.lshr32, 255
  %and34 = and i32 %bf.clear33, 1
  %tobool35 = icmp ne i32 %and34, 0
  %lnot = xor i1 %tobool35, true
  %lnot36 = xor i1 %lnot, true
  %lnot.ext = zext i1 %lnot36 to i32
  %conv37 = sext i32 %lnot.ext to i64
  %expval = call i64 @llvm.expect.i64(i64 %conv37, i64 0)
  %tobool38 = icmp ne i64 %expval, 0
  br i1 %tobool38, label %if.then39, label %cleanup88

if.then39:                                        ; preds = %do.body30
  %dev = getelementptr inbounds %struct.wm97xx.679, %struct.wm97xx.679* %wm, i32 0, i32 8
  %8 = load %struct.device*, %struct.device** %dev, align 8, !tbaa !31
  call void (%struct._ddebug*, %struct.device*, i8*, ...) @__dynamic_dev_dbg(%struct._ddebug* bitcast ({ i8*, i8*, i8*, i8*, i8, i8, i8, i8 }* @wm9712_poll_coord.descriptor to %struct._ddebug*), %struct.device* %8, i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.3.42, i32 0, i32 0))
  br label %cleanup88

if.end44:                                         ; preds = %while.end
  %call45 = call i32 bitcast (i32 (%struct.wm97xx*, i16)* @wm97xx_reg_read to i32 (%struct.wm97xx.679*, i16)*)(%struct.wm97xx.679* %wm, i16 zeroext 122)
  %y = getelementptr inbounds %struct.exception_table_entry, %struct.exception_table_entry* %data, i32 0, i32 1
  store i32 %call45, i32* %y, align 4, !tbaa !103
  %9 = load i32, i32* @pil.30, align 4, !tbaa !55
  %tobool46 = icmp ne i32 %9, 0
  br i1 %tobool46, label %if.then47, label %if.end51

if.then47:                                        ; preds = %if.end44
  %call48 = call i32 bitcast (i32 (%struct.wm97xx*, i16)* @wm97xx_reg_read to i32 (%struct.wm97xx.679*, i16)*)(%struct.wm97xx.679* %wm, i16 zeroext 122)
  br label %if.end51

if.end51:                                         ; preds = %if.then47, %if.end44
  %.sink = phi i32 [ %call48, %if.then47 ], [ 45248, %if.end44 ]
  %p50 = getelementptr inbounds %struct.exception_table_entry, %struct.exception_table_entry* %data, i32 0, i32 2
  store i32 %.sink, i32* %p50, align 4, !tbaa !104
  %mach_ops52 = getelementptr inbounds %struct.wm97xx.679, %struct.wm97xx.679* %wm, i32 0, i32 11
  %10 = load %struct.wm97xx_mach_ops.685*, %struct.wm97xx_mach_ops.685** %mach_ops52, align 8, !tbaa !2
  %tobool53 = icmp ne %struct.wm97xx_mach_ops.685* %10, null
  br i1 %tobool53, label %land.lhs.true54, label %if.end60

land.lhs.true54:                                  ; preds = %if.end51
  %mach_ops55 = getelementptr inbounds %struct.wm97xx.679, %struct.wm97xx.679* %wm, i32 0, i32 11
  %11 = load %struct.wm97xx_mach_ops.685*, %struct.wm97xx_mach_ops.685** %mach_ops55, align 8, !tbaa !2
  %post_sample = getelementptr inbounds %struct.wm97xx_mach_ops.685, %struct.wm97xx_mach_ops.685* %11, i32 0, i32 8
  %12 = load void (i32)*, void (i32)** %post_sample, align 8, !tbaa !106
  %tobool56 = icmp ne void (i32)* %12, null
  br i1 %tobool56, label %if.then57, label %if.end60

if.then57:                                        ; preds = %land.lhs.true54
  %mach_ops58 = getelementptr inbounds %struct.wm97xx.679, %struct.wm97xx.679* %wm, i32 0, i32 11
  %13 = load %struct.wm97xx_mach_ops.685*, %struct.wm97xx_mach_ops.685** %mach_ops58, align 8, !tbaa !2
  %post_sample59 = getelementptr inbounds %struct.wm97xx_mach_ops.685, %struct.wm97xx_mach_ops.685* %13, i32 0, i32 8
  %14 = load void (i32)*, void (i32)** %post_sample59, align 8, !tbaa !106
  call void %14(i32 12288)
  br label %if.end60

if.end60:                                         ; preds = %if.then57, %land.lhs.true54, %if.end51
  %x61 = getelementptr inbounds %struct.exception_table_entry, %struct.exception_table_entry* %data, i32 0, i32 0
  %15 = load i32, i32* %x61, align 4, !tbaa !101
  %and62 = and i32 %15, 4096
  %tobool63 = icmp ne i32 %and62, 0
  br i1 %tobool63, label %lor.lhs.false, label %cleanup88

lor.lhs.false:                                    ; preds = %if.end60
  %y64 = getelementptr inbounds %struct.exception_table_entry, %struct.exception_table_entry* %data, i32 0, i32 1
  %16 = load i32, i32* %y64, align 4, !tbaa !103
  %and65 = and i32 %16, 8192
  %tobool66 = icmp ne i32 %and65, 0
  br i1 %tobool66, label %if.end68, label %cleanup88

if.end68:                                         ; preds = %lor.lhs.false
  %17 = load i32, i32* @pil.30, align 4, !tbaa !55
  %tobool69 = icmp ne i32 %17, 0
  br i1 %tobool69, label %land.lhs.true70, label %if.end75

land.lhs.true70:                                  ; preds = %if.end68
  %p71 = getelementptr inbounds %struct.exception_table_entry, %struct.exception_table_entry* %data, i32 0, i32 2
  %18 = load i32, i32* %p71, align 4, !tbaa !104
  %and72 = and i32 %18, 12288
  %tobool73 = icmp ne i32 %and72, 0
  br i1 %tobool73, label %if.end75, label %cleanup88

if.end75:                                         ; preds = %land.lhs.true70, %if.end68
  %x76 = getelementptr inbounds %struct.exception_table_entry, %struct.exception_table_entry* %data, i32 0, i32 0
  %19 = load i32, i32* %x76, align 4, !tbaa !101
  %and77 = and i32 %19, 32768
  %tobool78 = icmp ne i32 %and77, 0
  br i1 %tobool78, label %lor.lhs.false79, label %if.then83

lor.lhs.false79:                                  ; preds = %if.end75
  %y80 = getelementptr inbounds %struct.exception_table_entry, %struct.exception_table_entry* %data, i32 0, i32 1
  %20 = load i32, i32* %y80, align 4, !tbaa !103
  %and81 = and i32 %20, 32768
  %tobool82 = icmp ne i32 %and81, 0
  br i1 %tobool82, label %cleanup88, label %if.then83

if.then83:                                        ; preds = %lor.lhs.false79, %if.end75
  %pen_probably_down84 = getelementptr inbounds %struct.wm97xx.679, %struct.wm97xx.679* %wm, i32 0, i32 21
  %bf.load85 = load i8, i8* %pen_probably_down84, align 4
  %bf.clear86 = and i8 %bf.load85, -5
  store i8 %bf.clear86, i8* %pen_probably_down84, align 4
  br label %cleanup88

cleanup88:                                        ; preds = %if.then83, %lor.lhs.false79, %land.lhs.true70, %lor.lhs.false, %if.end60, %if.then39, %do.body30, %if.then26, %LeafBlock
  %retval.1 = phi i32 [ 4, %if.then83 ], [ 4, %do.body30 ], [ 4, %if.then39 ], [ 4, %if.then26 ], [ 2, %lor.lhs.false79 ], [ 0, %land.lhs.true70 ], [ 0, %if.end60 ], [ 0, %lor.lhs.false ], [ 4, %LeafBlock ]
  ret i32 %retval.1
}

; Function Attrs: inlinehint nounwind uwtable
define internal void @poll_delay.40(i32 %d) #4 {
entry:
  %idxprom = sext i32 %d to i64
  %arrayidx = getelementptr inbounds [16 x i32], [16 x i32]* @delay_table.36, i64 0, i64 %idxprom
  %0 = load i32, i32* %arrayidx, align 4, !tbaa !55
  %add = add nsw i32 63, %0
  %conv = sext i32 %add to i64
  call void @__udelay(i64 %conv)
  ret void
}

; Function Attrs: inlinehint nounwind uwtable
define internal i32 @is_pden.41(%struct.wm97xx.679* %wm) #4 {
entry:
  %dig = getelementptr inbounds %struct.wm97xx.679, %struct.wm97xx.679* %wm, i32 0, i32 0
  %arrayidx = getelementptr inbounds [3 x i16], [3 x i16]* %dig, i64 0, i64 2
  %0 = load i16, i16* %arrayidx, align 4, !tbaa !34
  %conv = zext i16 %0 to i32
  %and = and i32 %conv, 2048
  ret i32 %and
}

; Function Attrs: nounwind uwtable
define internal i32 @wm9713_poll_sample(%struct.wm97xx.1078* %wm, i32 %adcsel, i32* %sample) #0 {
entry:
  %0 = load i32, i32* @delay.65, align 4, !tbaa !55
  %mul = mul nsw i32 5, %0
  %and = and i32 %adcsel, 32768
  %tobool = icmp ne i32 %and, 0
  %frombool = zext i1 %tobool to i8
  %tobool1 = trunc i8 %frombool to i1
  br i1 %tobool1, label %land.lhs.true, label %if.end10

land.lhs.true:                                    ; preds = %entry
  %pen_probably_down = getelementptr inbounds %struct.wm97xx.1078, %struct.wm97xx.1078* %wm, i32 0, i32 21
  %bf.load = load i8, i8* %pen_probably_down, align 4
  %bf.lshr = lshr i8 %bf.load, 2
  %bf.clear = and i8 %bf.lshr, 1
  %bf.cast = zext i8 %bf.clear to i32
  %tobool2 = icmp ne i32 %bf.cast, 0
  br i1 %tobool2, label %if.end10, label %if.then

if.then:                                          ; preds = %land.lhs.true
  %call = call i32 bitcast (i32 (%struct.wm97xx*, i16)* @wm97xx_reg_read to i32 (%struct.wm97xx.1078*, i16)*)(%struct.wm97xx.1078* %wm, i16 zeroext 122)
  %conv = trunc i32 %call to i16
  %conv3 = zext i16 %conv to i32
  %and4 = and i32 %conv3, 32768
  %tobool5 = icmp ne i32 %and4, 0
  br i1 %tobool5, label %if.end, label %LeafBlock

if.end:                                           ; preds = %if.then
  %pen_probably_down7 = getelementptr inbounds %struct.wm97xx.1078, %struct.wm97xx.1078* %wm, i32 0, i32 21
  %bf.load8 = load i8, i8* %pen_probably_down7, align 4
  %bf.clear9 = and i8 %bf.load8, -5
  %bf.set = or i8 %bf.clear9, 4
  store i8 %bf.set, i8* %pen_probably_down7, align 4
  br label %LeafBlock

LeafBlock:                                        ; preds = %if.end, %if.then
  %cleanup.dest.slot.0 = phi i32 [ 0, %if.end ], [ 1, %if.then ]
  %SwitchLeaf = icmp eq i32 %cleanup.dest.slot.0, 0
  br i1 %SwitchLeaf, label %if.end10, label %cleanup104

if.end10:                                         ; preds = %LeafBlock, %land.lhs.true, %entry
  %call11 = call i32 bitcast (i32 (%struct.wm97xx*, i16)* @wm97xx_reg_read to i32 (%struct.wm97xx.1078*, i16)*)(%struct.wm97xx.1078* %wm, i16 zeroext 116)
  %conv12 = trunc i32 %call11 to i16
  %conv13 = zext i16 %conv12 to i32
  %and14 = and i32 %conv13, -255
  %conv15 = trunc i32 %and14 to i16
  %and16 = and i32 %adcsel, 28672
  %shr = ashr i32 %and16, 12
  %shl = shl i32 1, %shr
  %conv17 = zext i16 %conv15 to i32
  %or = or i32 %conv17, %shl
  %conv18 = trunc i32 %or to i16
  %mach_ops = getelementptr inbounds %struct.wm97xx.1078, %struct.wm97xx.1078* %wm, i32 0, i32 11
  %1 = load %struct.wm97xx_mach_ops.1084*, %struct.wm97xx_mach_ops.1084** %mach_ops, align 8, !tbaa !2
  %tobool19 = icmp ne %struct.wm97xx_mach_ops.1084* %1, null
  br i1 %tobool19, label %land.lhs.true20, label %if.end26

land.lhs.true20:                                  ; preds = %if.end10
  %mach_ops21 = getelementptr inbounds %struct.wm97xx.1078, %struct.wm97xx.1078* %wm, i32 0, i32 11
  %2 = load %struct.wm97xx_mach_ops.1084*, %struct.wm97xx_mach_ops.1084** %mach_ops21, align 8, !tbaa !2
  %pre_sample = getelementptr inbounds %struct.wm97xx_mach_ops.1084, %struct.wm97xx_mach_ops.1084* %2, i32 0, i32 7
  %3 = load void (i32)*, void (i32)** %pre_sample, align 8, !tbaa !105
  %tobool22 = icmp ne void (i32)* %3, null
  br i1 %tobool22, label %if.then23, label %if.end26

if.then23:                                        ; preds = %land.lhs.true20
  %mach_ops24 = getelementptr inbounds %struct.wm97xx.1078, %struct.wm97xx.1078* %wm, i32 0, i32 11
  %4 = load %struct.wm97xx_mach_ops.1084*, %struct.wm97xx_mach_ops.1084** %mach_ops24, align 8, !tbaa !2
  %pre_sample25 = getelementptr inbounds %struct.wm97xx_mach_ops.1084, %struct.wm97xx_mach_ops.1084* %4, i32 0, i32 7
  %5 = load void (i32)*, void (i32)** %pre_sample25, align 8, !tbaa !105
  call void %5(i32 %adcsel)
  br label %if.end26

if.end26:                                         ; preds = %if.then23, %land.lhs.true20, %if.end10
  %conv27 = zext i16 %conv18 to i32
  %or28 = or i32 %conv27, 512
  %conv29 = trunc i32 %or28 to i16
  call void bitcast (void (%struct.wm97xx*, i16, i16)* @wm97xx_reg_write to void (%struct.wm97xx.1078*, i16, i16)*)(%struct.wm97xx.1078* %wm, i16 zeroext 116, i16 zeroext %conv29)
  %6 = load i32, i32* @delay.65, align 4, !tbaa !55
  call void @poll_delay.71(i32 %6)
  br label %while.cond

while.cond:                                       ; preds = %while.body, %if.end26
  %timeout.0 = phi i32 [ %mul, %if.end26 ], [ %dec, %while.body ]
  %call30 = call i32 bitcast (i32 (%struct.wm97xx*, i16)* @wm97xx_reg_read to i32 (%struct.wm97xx.1078*, i16)*)(%struct.wm97xx.1078* %wm, i16 zeroext 116)
  %and31 = and i32 %call30, 512
  %tobool32 = icmp ne i32 %and31, 0
  %tobool33 = icmp ne i32 %timeout.0, 0
  %tobool33. = select i1 %tobool32, i1 %tobool33, i1 false
  br i1 %tobool33., label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  call void @__const_udelay(i64 90195)
  %dec = add nsw i32 %timeout.0, -1
  br label %while.cond

while.end:                                        ; preds = %while.cond
  %cmp = icmp sle i32 %timeout.0, 0
  br i1 %cmp, label %if.then35, label %if.end56

if.then35:                                        ; preds = %while.end
  %call36 = call i32 @is_pden.72(%struct.wm97xx.1078* %wm)
  %tobool37 = icmp ne i32 %call36, 0
  br i1 %tobool37, label %if.then38, label %do.body42

if.then38:                                        ; preds = %if.then35
  %pen_probably_down39 = getelementptr inbounds %struct.wm97xx.1078, %struct.wm97xx.1078* %wm, i32 0, i32 21
  %bf.load40 = load i8, i8* %pen_probably_down39, align 4
  %bf.clear41 = and i8 %bf.load40, -5
  store i8 %bf.clear41, i8* %pen_probably_down39, align 4
  br label %cleanup104

do.body42:                                        ; preds = %if.then35
  %bf.load43 = load i32, i32* getelementptr inbounds (%struct._ddebug, %struct._ddebug* bitcast ({ i8*, i8*, i8*, i8*, i8, i8, i8, i8 }* @wm9713_poll_sample.descriptor to %struct._ddebug*), i32 0, i32 4), align 8
  %bf.lshr44 = lshr i32 %bf.load43, 18
  %bf.clear45 = and i32 %bf.lshr44, 255
  %and46 = and i32 %bf.clear45, 1
  %tobool47 = icmp ne i32 %and46, 0
  %lnot = xor i1 %tobool47, true
  %lnot48 = xor i1 %lnot, true
  %lnot.ext = zext i1 %lnot48 to i32
  %conv49 = sext i32 %lnot.ext to i64
  %expval = call i64 @llvm.expect.i64(i64 %conv49, i64 0)
  %tobool50 = icmp ne i64 %expval, 0
  br i1 %tobool50, label %if.then51, label %cleanup104

if.then51:                                        ; preds = %do.body42
  %dev = getelementptr inbounds %struct.wm97xx.1078, %struct.wm97xx.1078* %wm, i32 0, i32 8
  %7 = load %struct.device*, %struct.device** %dev, align 8, !tbaa !31
  call void (%struct._ddebug*, %struct.device*, i8*, ...) @__dynamic_dev_dbg(%struct._ddebug* bitcast ({ i8*, i8*, i8*, i8*, i8, i8, i8, i8 }* @wm9713_poll_sample.descriptor to %struct._ddebug*), %struct.device* %7, i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.3.73, i32 0, i32 0))
  br label %cleanup104

if.end56:                                         ; preds = %while.end
  %call57 = call i32 bitcast (i32 (%struct.wm97xx*, i16)* @wm97xx_reg_read to i32 (%struct.wm97xx.1078*, i16)*)(%struct.wm97xx.1078* %wm, i16 zeroext 122)
  store i32 %call57, i32* %sample, align 4, !tbaa !55
  %mach_ops58 = getelementptr inbounds %struct.wm97xx.1078, %struct.wm97xx.1078* %wm, i32 0, i32 11
  %8 = load %struct.wm97xx_mach_ops.1084*, %struct.wm97xx_mach_ops.1084** %mach_ops58, align 8, !tbaa !2
  %tobool59 = icmp ne %struct.wm97xx_mach_ops.1084* %8, null
  br i1 %tobool59, label %land.lhs.true60, label %if.end66

land.lhs.true60:                                  ; preds = %if.end56
  %mach_ops61 = getelementptr inbounds %struct.wm97xx.1078, %struct.wm97xx.1078* %wm, i32 0, i32 11
  %9 = load %struct.wm97xx_mach_ops.1084*, %struct.wm97xx_mach_ops.1084** %mach_ops61, align 8, !tbaa !2
  %post_sample = getelementptr inbounds %struct.wm97xx_mach_ops.1084, %struct.wm97xx_mach_ops.1084* %9, i32 0, i32 8
  %10 = load void (i32)*, void (i32)** %post_sample, align 8, !tbaa !106
  %tobool62 = icmp ne void (i32)* %10, null
  br i1 %tobool62, label %if.then63, label %if.end66

if.then63:                                        ; preds = %land.lhs.true60
  %mach_ops64 = getelementptr inbounds %struct.wm97xx.1078, %struct.wm97xx.1078* %wm, i32 0, i32 11
  %11 = load %struct.wm97xx_mach_ops.1084*, %struct.wm97xx_mach_ops.1084** %mach_ops64, align 8, !tbaa !2
  %post_sample65 = getelementptr inbounds %struct.wm97xx_mach_ops.1084, %struct.wm97xx_mach_ops.1084* %11, i32 0, i32 8
  %12 = load void (i32)*, void (i32)** %post_sample65, align 8, !tbaa !106
  call void %12(i32 %adcsel)
  br label %if.end66

if.end66:                                         ; preds = %if.then63, %land.lhs.true60, %if.end56
  %13 = load i32, i32* %sample, align 4, !tbaa !55
  %xor = xor i32 %13, %adcsel
  %and67 = and i32 %xor, 28672
  %tobool68 = icmp ne i32 %and67, 0
  br i1 %tobool68, label %do.body71, label %if.end93

do.body71:                                        ; preds = %if.end66
  %bf.load72 = load i32, i32* getelementptr inbounds (%struct._ddebug, %struct._ddebug* bitcast ({ i8*, i8*, i8*, i8*, i8, i8, i8, i8 }* @wm9713_poll_sample.descriptor.4 to %struct._ddebug*), i32 0, i32 4), align 8
  %bf.lshr73 = lshr i32 %bf.load72, 18
  %bf.clear74 = and i32 %bf.lshr73, 255
  %and75 = and i32 %bf.clear74, 1
  %tobool76 = icmp ne i32 %and75, 0
  %lnot77 = xor i1 %tobool76, true
  %lnot79 = xor i1 %lnot77, true
  %lnot.ext80 = zext i1 %lnot79 to i32
  %conv81 = sext i32 %lnot.ext80 to i64
  %expval82 = call i64 @llvm.expect.i64(i64 %conv81, i64 0)
  %tobool83 = icmp ne i64 %expval82, 0
  br i1 %tobool83, label %if.then84, label %cleanup104

if.then84:                                        ; preds = %do.body71
  %dev85 = getelementptr inbounds %struct.wm97xx.1078, %struct.wm97xx.1078* %wm, i32 0, i32 8
  %14 = load %struct.device*, %struct.device** %dev85, align 8, !tbaa !31
  %and86 = and i32 %adcsel, 28672
  %15 = load i32, i32* %sample, align 4, !tbaa !55
  %and87 = and i32 %15, 28672
  call void (%struct._ddebug*, %struct.device*, i8*, ...) @__dynamic_dev_dbg(%struct._ddebug* bitcast ({ i8*, i8*, i8*, i8*, i8, i8, i8, i8 }* @wm9713_poll_sample.descriptor.4 to %struct._ddebug*), %struct.device* %14, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.5.76, i32 0, i32 0), i32 %and86, i32 %and87)
  br label %cleanup104

if.end93:                                         ; preds = %if.end66
  %tobool94 = trunc i8 %frombool to i1
  br i1 %tobool94, label %land.lhs.true96, label %cleanup104

land.lhs.true96:                                  ; preds = %if.end93
  %16 = load i32, i32* %sample, align 4, !tbaa !55
  %and97 = and i32 %16, 32768
  %tobool98 = icmp ne i32 %and97, 0
  br i1 %tobool98, label %cleanup104, label %if.then99

if.then99:                                        ; preds = %land.lhs.true96
  %pen_probably_down100 = getelementptr inbounds %struct.wm97xx.1078, %struct.wm97xx.1078* %wm, i32 0, i32 21
  %bf.load101 = load i8, i8* %pen_probably_down100, align 4
  %bf.clear102 = and i8 %bf.load101, -5
  store i8 %bf.clear102, i8* %pen_probably_down100, align 4
  br label %cleanup104

cleanup104:                                       ; preds = %if.then99, %land.lhs.true96, %if.end93, %if.then84, %do.body71, %if.then51, %do.body42, %if.then38, %LeafBlock
  %retval.1 = phi i32 [ 4, %if.then99 ], [ 4, %do.body42 ], [ 4, %if.then51 ], [ 4, %if.then38 ], [ 4, %if.then84 ], [ 4, %do.body71 ], [ 2, %land.lhs.true96 ], [ 2, %if.end93 ], [ 4, %LeafBlock ]
  ret i32 %retval.1
}

; Function Attrs: nounwind uwtable
define internal i32 @wm9713_poll_touch(%struct.wm97xx.1078* %wm, %struct.exception_table_entry* %data) #0 {
entry:
  %0 = load i32, i32* @coord.70, align 4, !tbaa !55
  %tobool = icmp ne i32 %0, 0
  br i1 %tobool, label %if.then, label %if.else

if.then:                                          ; preds = %entry
  %call = call i32 @wm9713_poll_coord(%struct.wm97xx.1078* %wm, %struct.exception_table_entry* %data)
  %cmp = icmp ne i32 %call, 2
  br i1 %cmp, label %cleanup, label %if.end19

if.else:                                          ; preds = %entry
  %x = getelementptr inbounds %struct.exception_table_entry, %struct.exception_table_entry* %data, i32 0, i32 0
  %call2 = call i32 @wm9713_poll_sample(%struct.wm97xx.1078* %wm, i32 36864, i32* %x)
  %cmp3 = icmp ne i32 %call2, 2
  br i1 %cmp3, label %cleanup, label %if.end5

if.end5:                                          ; preds = %if.else
  %y = getelementptr inbounds %struct.exception_table_entry, %struct.exception_table_entry* %data, i32 0, i32 1
  %call6 = call i32 @wm9713_poll_sample(%struct.wm97xx.1078* %wm, i32 40960, i32* %y)
  %cmp7 = icmp ne i32 %call6, 2
  br i1 %cmp7, label %cleanup, label %if.end9

if.end9:                                          ; preds = %if.end5
  %1 = load i32, i32* @pil.60, align 4, !tbaa !55
  %tobool10 = icmp ne i32 %1, 0
  %p = getelementptr inbounds %struct.exception_table_entry, %struct.exception_table_entry* %data, i32 0, i32 2
  br i1 %tobool10, label %if.then11, label %if.else16

if.then11:                                        ; preds = %if.end9
  %call12 = call i32 @wm9713_poll_sample(%struct.wm97xx.1078* %wm, i32 45056, i32* %p)
  %cmp13 = icmp ne i32 %call12, 2
  br i1 %cmp13, label %cleanup, label %if.end19

if.else16:                                        ; preds = %if.end9
  store i32 45248, i32* %p, align 4, !tbaa !104
  br label %if.end19

if.end19:                                         ; preds = %if.else16, %if.then11, %if.then
  br label %cleanup

cleanup:                                          ; preds = %if.end19, %if.then11, %if.end5, %if.else, %if.then
  %retval.0 = phi i32 [ 2, %if.end19 ], [ %call, %if.then ], [ %call2, %if.else ], [ %call6, %if.end5 ], [ %call12, %if.then11 ]
  ret i32 %retval.0
}

; Function Attrs: nounwind uwtable
define internal i32 @wm9713_acc_enable(%struct.wm97xx.1078* %wm, i32 %enable) #0 {
entry:
  %dig = getelementptr inbounds %struct.wm97xx.1078, %struct.wm97xx.1078* %wm, i32 0, i32 0
  %arrayidx = getelementptr inbounds [3 x i16], [3 x i16]* %dig, i64 0, i64 0
  %0 = load i16, i16* %arrayidx, align 8, !tbaa !34
  %dig4 = getelementptr inbounds %struct.wm97xx.1078, %struct.wm97xx.1078* %wm, i32 0, i32 0
  %arrayidx5 = getelementptr inbounds [3 x i16], [3 x i16]* %dig4, i64 0, i64 1
  %1 = load i16, i16* %arrayidx5, align 2, !tbaa !34
  %dig6 = getelementptr inbounds %struct.wm97xx.1078, %struct.wm97xx.1078* %wm, i32 0, i32 0
  %arrayidx7 = getelementptr inbounds [3 x i16], [3 x i16]* %dig6, i64 0, i64 2
  %2 = load i16, i16* %arrayidx7, align 4, !tbaa !34
  %tobool = icmp ne i32 %enable, 0
  br i1 %tobool, label %if.then, label %if.else

if.then:                                          ; preds = %entry
  %mach_ops = getelementptr inbounds %struct.wm97xx.1078, %struct.wm97xx.1078* %wm, i32 0, i32 11
  %3 = load %struct.wm97xx_mach_ops.1084*, %struct.wm97xx_mach_ops.1084** %mach_ops, align 8, !tbaa !2
  %acc_startup = getelementptr inbounds %struct.wm97xx_mach_ops.1084, %struct.wm97xx_mach_ops.1084* %3, i32 0, i32 3
  %4 = load i32 (%struct.wm97xx.1078*)*, i32 (%struct.wm97xx.1078*)** %acc_startup, align 8, !tbaa !109
  %tobool8 = icmp ne i32 (%struct.wm97xx.1078*)* %4, null
  br i1 %tobool8, label %land.lhs.true, label %if.end

land.lhs.true:                                    ; preds = %if.then
  %mach_ops9 = getelementptr inbounds %struct.wm97xx.1078, %struct.wm97xx.1078* %wm, i32 0, i32 11
  %5 = load %struct.wm97xx_mach_ops.1084*, %struct.wm97xx_mach_ops.1084** %mach_ops9, align 8, !tbaa !2
  %acc_startup10 = getelementptr inbounds %struct.wm97xx_mach_ops.1084, %struct.wm97xx_mach_ops.1084* %5, i32 0, i32 3
  %6 = load i32 (%struct.wm97xx.1078*)*, i32 (%struct.wm97xx.1078*)** %acc_startup10, align 8, !tbaa !109
  %call = call i32 %6(%struct.wm97xx.1078* %wm)
  %cmp = icmp slt i32 %call, 0
  br i1 %cmp, label %cleanup, label %if.end

if.end:                                           ; preds = %land.lhs.true, %if.then
  %ret.0 = phi i32 [ %call, %land.lhs.true ], [ 0, %if.then ]
  %conv = zext i16 %0 to i32
  %and = and i32 %conv, -255
  %conv12 = trunc i32 %and to i16
  %conv13 = zext i16 %conv12 to i32
  %or = or i32 %conv13, 263
  %conv14 = trunc i32 %or to i16
  %7 = load i32, i32* @pil.60, align 4, !tbaa !55
  %tobool15 = icmp ne i32 %7, 0
  %conv17 = zext i16 %conv14 to i32
  %or18 = or i32 %conv17, 8
  %conv19 = trunc i32 %or18 to i16
  %dig1.0 = select i1 %tobool15, i16 %conv19, i16 %conv14
  %conv21 = zext i16 %1 to i32
  %and22 = and i32 %conv21, -1016
  %conv23 = trunc i32 %and22 to i16
  %8 = load i32, i32* @delay.65, align 4, !tbaa !55
  %shl = shl i32 %8, 4
  %and24 = and i32 %shl, 240
  %or25 = or i32 8, %and24
  %acc_slot = getelementptr inbounds %struct.wm97xx.1078, %struct.wm97xx.1078* %wm, i32 0, i32 19
  %9 = load i16, i16* %acc_slot, align 8, !tbaa !107
  %conv26 = zext i16 %9 to i32
  %sub = sub nsw i32 %conv26, 5
  %and27 = and i32 %sub, 7
  %or28 = or i32 %or25, %and27
  %acc_rate = getelementptr inbounds %struct.wm97xx.1078, %struct.wm97xx.1078* %wm, i32 0, i32 20
  %10 = load i16, i16* %acc_rate, align 2, !tbaa !108
  %conv29 = zext i16 %10 to i32
  %and30 = and i32 %conv29, 3
  %shl31 = shl i32 %and30, 8
  %acc_rate32 = getelementptr inbounds %struct.wm97xx.1078, %struct.wm97xx.1078* %wm, i32 0, i32 20
  %11 = load i16, i16* %acc_rate32, align 2, !tbaa !108
  %conv33 = zext i16 %11 to i32
  %and34 = and i32 %conv33, 4
  %tobool35 = icmp ne i32 %and34, 0
  %cond = select i1 %tobool35, i32 240, i32 0
  %or36 = or i32 %shl31, %cond
  %or37 = or i32 %or28, %or36
  %conv38 = zext i16 %conv23 to i32
  %or39 = or i32 %conv38, %or37
  %conv40 = trunc i32 %or39 to i16
  %conv41 = zext i16 %2 to i32
  %or42 = or i32 %conv41, 2048
  %conv43 = trunc i32 %or42 to i16
  br label %if.end59

if.else:                                          ; preds = %entry
  %conv44 = zext i16 %0 to i32
  %and45 = and i32 %conv44, -258
  %conv46 = trunc i32 %and45 to i16
  %conv47 = zext i16 %1 to i32
  %and48 = and i32 %conv47, -9
  %conv49 = trunc i32 %and48 to i16
  %conv50 = zext i16 %2 to i32
  %and51 = and i32 %conv50, -2049
  %conv52 = trunc i32 %and51 to i16
  %mach_ops53 = getelementptr inbounds %struct.wm97xx.1078, %struct.wm97xx.1078* %wm, i32 0, i32 11
  %12 = load %struct.wm97xx_mach_ops.1084*, %struct.wm97xx_mach_ops.1084** %mach_ops53, align 8, !tbaa !2
  %acc_shutdown = getelementptr inbounds %struct.wm97xx_mach_ops.1084, %struct.wm97xx_mach_ops.1084* %12, i32 0, i32 4
  %13 = load void (%struct.wm97xx.1078*)*, void (%struct.wm97xx.1078*)** %acc_shutdown, align 8, !tbaa !110
  %tobool54 = icmp ne void (%struct.wm97xx.1078*)* %13, null
  br i1 %tobool54, label %if.then55, label %if.end59

if.then55:                                        ; preds = %if.else
  %mach_ops56 = getelementptr inbounds %struct.wm97xx.1078, %struct.wm97xx.1078* %wm, i32 0, i32 11
  %14 = load %struct.wm97xx_mach_ops.1084*, %struct.wm97xx_mach_ops.1084** %mach_ops56, align 8, !tbaa !2
  %acc_shutdown57 = getelementptr inbounds %struct.wm97xx_mach_ops.1084, %struct.wm97xx_mach_ops.1084* %14, i32 0, i32 4
  %15 = load void (%struct.wm97xx.1078*)*, void (%struct.wm97xx.1078*)** %acc_shutdown57, align 8, !tbaa !110
  call void %15(%struct.wm97xx.1078* %wm)
  br label %if.end59

if.end59:                                         ; preds = %if.then55, %if.else, %if.end
  %dig3.0 = phi i16 [ %conv43, %if.end ], [ %conv52, %if.then55 ], [ %conv52, %if.else ]
  %dig2.0 = phi i16 [ %conv40, %if.end ], [ %conv49, %if.then55 ], [ %conv49, %if.else ]
  %dig1.1 = phi i16 [ %dig1.0, %if.end ], [ %conv46, %if.then55 ], [ %conv46, %if.else ]
  %ret.1 = phi i32 [ %ret.0, %if.end ], [ 0, %if.then55 ], [ 0, %if.else ]
  call void bitcast (void (%struct.wm97xx*, i16, i16)* @wm97xx_reg_write to void (%struct.wm97xx.1078*, i16, i16)*)(%struct.wm97xx.1078* %wm, i16 zeroext 116, i16 zeroext %dig1.1)
  call void bitcast (void (%struct.wm97xx*, i16, i16)* @wm97xx_reg_write to void (%struct.wm97xx.1078*, i16, i16)*)(%struct.wm97xx.1078* %wm, i16 zeroext 118, i16 zeroext %dig2.0)
  call void bitcast (void (%struct.wm97xx*, i16, i16)* @wm97xx_reg_write to void (%struct.wm97xx.1078*, i16, i16)*)(%struct.wm97xx.1078* %wm, i16 zeroext 120, i16 zeroext %dig3.0)
  br label %cleanup

cleanup:                                          ; preds = %if.end59, %land.lhs.true
  %retval.0 = phi i32 [ %ret.1, %if.end59 ], [ %call, %land.lhs.true ]
  ret i32 %retval.0
}

; Function Attrs: nounwind uwtable
define internal void @wm9713_phy_init(%struct.wm97xx.1078* %wm) #0 {
entry:
  %0 = load i32, i32* @rpu.56, align 4, !tbaa !55
  %tobool = icmp ne i32 %0, 0
  br i1 %tobool, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %conv = zext i16 1 to i32
  %and = and i32 %conv, 65472
  %conv1 = trunc i32 %and to i16
  %1 = load i32, i32* @rpu.56, align 4, !tbaa !55
  %and2 = and i32 %1, 63
  %conv3 = zext i16 %conv1 to i32
  %or = or i32 %conv3, %and2
  %conv4 = trunc i32 %or to i16
  call void (%struct.device*, i8*, ...) @_dev_info(%struct.device* null, i8* null)
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  %dig3.0 = phi i16 [ %conv4, %if.then ], [ 1, %entry ]
  %2 = load i32, i32* @five_wire.58, align 4, !tbaa !55
  %tobool5 = icmp ne i32 %2, 0
  br i1 %tobool5, label %if.then6, label %if.end15

if.then6:                                         ; preds = %if.end
  %conv7 = zext i16 %dig3.0 to i32
  %or8 = or i32 %conv7, 4096
  %conv9 = trunc i32 %or8 to i16
  call void (%struct.device*, i8*, ...) @_dev_info(%struct.device* null, i8* null)
  %3 = load i32, i32* @pil.60, align 4, !tbaa !55
  %tobool11 = icmp ne i32 %3, 0
  br i1 %tobool11, label %if.then12, label %if.end15

if.then12:                                        ; preds = %if.then6
  call void (%struct.device*, i8*, ...) @dev_warn(%struct.device* null, i8* null)
  store i32 0, i32* @pil.60, align 4, !tbaa !55
  br label %if.end15

if.end15:                                         ; preds = %if.then12, %if.then6, %if.end
  %dig3.1 = phi i16 [ %dig3.0, %if.end ], [ %conv9, %if.then12 ], [ %conv9, %if.then6 ]
  %4 = load i32, i32* @pil.60, align 4, !tbaa !55
  %cmp = icmp eq i32 %4, 2
  br i1 %cmp, label %if.then17, label %if.else

if.then17:                                        ; preds = %if.end15
  %conv18 = zext i16 %dig3.1 to i32
  %or19 = or i32 %conv18, 256
  %conv20 = trunc i32 %or19 to i16
  call void (%struct.device*, i8*, ...) @_dev_info(%struct.device* null, i8* null)
  br label %if.end26

if.else:                                          ; preds = %if.end15
  %5 = load i32, i32* @pil.60, align 4, !tbaa !55
  %tobool22 = icmp ne i32 %5, 0
  br i1 %tobool22, label %if.then23, label %if.end26

if.then23:                                        ; preds = %if.else
  call void (%struct.device*, i8*, ...) @_dev_info(%struct.device* null, i8* null)
  br label %if.end26

if.end26:                                         ; preds = %if.then23, %if.else, %if.then17
  %dig3.2 = phi i16 [ %conv20, %if.then17 ], [ %dig3.1, %if.then23 ], [ %dig3.1, %if.else ]
  %6 = load i32, i32* @pil.60, align 4, !tbaa !55
  %tobool27 = icmp ne i32 %6, 0
  br i1 %tobool27, label %if.end29, label %if.then28

if.then28:                                        ; preds = %if.end26
  store i32 0, i32* @pressure.64, align 4, !tbaa !55
  br label %if.end29

if.end29:                                         ; preds = %if.then28, %if.end26
  %7 = load i32, i32* @delay.65, align 4, !tbaa !55
  %cmp30 = icmp slt i32 %7, 0
  %8 = load i32, i32* @delay.65, align 4
  %cmp32 = icmp sgt i32 %8, 15
  %or.cond = or i1 %cmp30, %cmp32
  br i1 %or.cond, label %if.then34, label %if.end37

if.then34:                                        ; preds = %if.end29
  call void (%struct.device*, i8*, ...) @_dev_info(%struct.device* null, i8* null)
  store i32 4, i32* @delay.65, align 4, !tbaa !55
  call void (%struct.device*, i8*, ...) @_dev_info(%struct.device* null, i8* null)
  br label %if.end37

if.end37:                                         ; preds = %if.then34, %if.end29
  %conv38 = zext i16 64 to i32
  %and39 = and i32 %conv38, 65295
  %conv40 = trunc i32 %and39 to i16
  %9 = load i32, i32* @delay.65, align 4, !tbaa !55
  %shl = shl i32 %9, 4
  %and41 = and i32 %shl, 240
  %conv42 = zext i16 %conv40 to i32
  %or43 = or i32 %conv42, %and41
  %conv44 = trunc i32 %or43 to i16
  %10 = load i32, i32* @mask.69, align 4, !tbaa !55
  %and45 = and i32 %10, 3
  %shl46 = shl i32 %and45, 4
  %conv47 = zext i16 %dig3.2 to i32
  %or48 = or i32 %conv47, %shl46
  %conv49 = trunc i32 %or48 to i16
  %11 = load i32, i32* @coord.70, align 4, !tbaa !55
  %tobool50 = icmp ne i32 %11, 0
  %conv52 = zext i16 %conv49 to i32
  %or53 = or i32 %conv52, 512
  %conv54 = trunc i32 %or53 to i16
  %dig3.3 = select i1 %tobool50, i16 %conv54, i16 %conv49
  %call = call i32 bitcast (i32 (%struct.wm97xx*, i16)* @wm97xx_reg_read to i32 (%struct.wm97xx.1078*, i16)*)(%struct.wm97xx.1078* %wm, i16 zeroext 90)
  %conv56 = trunc i32 %call to i16
  %misc = getelementptr inbounds %struct.wm97xx.1078, %struct.wm97xx.1078* %wm, i32 0, i32 3
  store i16 %conv56, i16* %misc, align 4, !tbaa !72
  call void bitcast (void (%struct.wm97xx*, i16, i16)* @wm97xx_reg_write to void (%struct.wm97xx.1078*, i16, i16)*)(%struct.wm97xx.1078* %wm, i16 zeroext 116, i16 zeroext 0)
  call void bitcast (void (%struct.wm97xx*, i16, i16)* @wm97xx_reg_write to void (%struct.wm97xx.1078*, i16, i16)*)(%struct.wm97xx.1078* %wm, i16 zeroext 118, i16 zeroext %conv44)
  call void bitcast (void (%struct.wm97xx*, i16, i16)* @wm97xx_reg_write to void (%struct.wm97xx.1078*, i16, i16)*)(%struct.wm97xx.1078* %wm, i16 zeroext 120, i16 zeroext %dig3.3)
  call void bitcast (void (%struct.wm97xx*, i16, i16)* @wm97xx_reg_write to void (%struct.wm97xx.1078*, i16, i16)*)(%struct.wm97xx.1078* %wm, i16 zeroext 80, i16 zeroext 0)
  ret void
}

; Function Attrs: nounwind uwtable
define internal void @wm9713_dig_enable(%struct.wm97xx.1078* %wm, i32 %enable) #0 {
entry:
  %tobool = icmp ne i32 %enable, 0
  br i1 %tobool, label %if.then, label %if.else

if.then:                                          ; preds = %entry
  %call = call i32 bitcast (i32 (%struct.wm97xx*, i16)* @wm97xx_reg_read to i32 (%struct.wm97xx.1078*, i16)*)(%struct.wm97xx.1078* %wm, i16 zeroext 60)
  %conv = trunc i32 %call to i16
  %conv1 = zext i16 %conv to i32
  %and = and i32 %conv1, 32767
  %conv2 = trunc i32 %and to i16
  call void bitcast (void (%struct.wm97xx*, i16, i16)* @wm97xx_reg_write to void (%struct.wm97xx.1078*, i16, i16)*)(%struct.wm97xx.1078* %wm, i16 zeroext 60, i16 zeroext %conv2)
  %dig = getelementptr inbounds %struct.wm97xx.1078, %struct.wm97xx.1078* %wm, i32 0, i32 0
  %arrayidx = getelementptr inbounds [3 x i16], [3 x i16]* %dig, i64 0, i64 2
  %0 = load i16, i16* %arrayidx, align 4, !tbaa !34
  %conv3 = zext i16 %0 to i32
  %or = or i32 %conv3, 49152
  %conv4 = trunc i32 %or to i16
  call void bitcast (void (%struct.wm97xx*, i16, i16)* @wm97xx_reg_write to void (%struct.wm97xx.1078*, i16, i16)*)(%struct.wm97xx.1078* %wm, i16 zeroext 120, i16 zeroext %conv4)
  %call5 = call i32 bitcast (i32 (%struct.wm97xx*, i16)* @wm97xx_reg_read to i32 (%struct.wm97xx.1078*, i16)*)(%struct.wm97xx.1078* %wm, i16 zeroext 122)
  br label %if.end

if.else:                                          ; preds = %entry
  %dig6 = getelementptr inbounds %struct.wm97xx.1078, %struct.wm97xx.1078* %wm, i32 0, i32 0
  %arrayidx7 = getelementptr inbounds [3 x i16], [3 x i16]* %dig6, i64 0, i64 2
  %1 = load i16, i16* %arrayidx7, align 4, !tbaa !34
  %conv8 = zext i16 %1 to i32
  %and9 = and i32 %conv8, -49153
  %conv10 = trunc i32 %and9 to i16
  call void bitcast (void (%struct.wm97xx*, i16, i16)* @wm97xx_reg_write to void (%struct.wm97xx.1078*, i16, i16)*)(%struct.wm97xx.1078* %wm, i16 zeroext 120, i16 zeroext %conv10)
  %call11 = call i32 bitcast (i32 (%struct.wm97xx*, i16)* @wm97xx_reg_read to i32 (%struct.wm97xx.1078*, i16)*)(%struct.wm97xx.1078* %wm, i16 zeroext 60)
  %conv12 = trunc i32 %call11 to i16
  %conv13 = zext i16 %conv12 to i32
  %or14 = or i32 %conv13, 32768
  %conv15 = trunc i32 %or14 to i16
  call void bitcast (void (%struct.wm97xx*, i16, i16)* @wm97xx_reg_write to void (%struct.wm97xx.1078*, i16, i16)*)(%struct.wm97xx.1078* %wm, i16 zeroext 60, i16 zeroext %conv15)
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then
  ret void
}

; Function Attrs: nounwind uwtable
define internal void @wm9713_dig_restore(%struct.wm97xx.1078* %wm) #0 {
entry:
  %dig_save = getelementptr inbounds %struct.wm97xx.1078, %struct.wm97xx.1078* %wm, i32 0, i32 4
  %arrayidx = getelementptr inbounds [3 x i16], [3 x i16]* %dig_save, i64 0, i64 0
  %0 = load i16, i16* %arrayidx, align 2, !tbaa !34
  call void bitcast (void (%struct.wm97xx*, i16, i16)* @wm97xx_reg_write to void (%struct.wm97xx.1078*, i16, i16)*)(%struct.wm97xx.1078* %wm, i16 zeroext 116, i16 zeroext %0)
  %dig_save1 = getelementptr inbounds %struct.wm97xx.1078, %struct.wm97xx.1078* %wm, i32 0, i32 4
  %arrayidx2 = getelementptr inbounds [3 x i16], [3 x i16]* %dig_save1, i64 0, i64 1
  %1 = load i16, i16* %arrayidx2, align 2, !tbaa !34
  call void bitcast (void (%struct.wm97xx*, i16, i16)* @wm97xx_reg_write to void (%struct.wm97xx.1078*, i16, i16)*)(%struct.wm97xx.1078* %wm, i16 zeroext 118, i16 zeroext %1)
  %dig_save3 = getelementptr inbounds %struct.wm97xx.1078, %struct.wm97xx.1078* %wm, i32 0, i32 4
  %arrayidx4 = getelementptr inbounds [3 x i16], [3 x i16]* %dig_save3, i64 0, i64 2
  %2 = load i16, i16* %arrayidx4, align 2, !tbaa !34
  call void bitcast (void (%struct.wm97xx*, i16, i16)* @wm97xx_reg_write to void (%struct.wm97xx.1078*, i16, i16)*)(%struct.wm97xx.1078* %wm, i16 zeroext 120, i16 zeroext %2)
  ret void
}

; Function Attrs: nounwind uwtable
define internal void @wm9713_aux_prepare(%struct.wm97xx.1078* %wm) #0 {
entry:
  %dig_save = getelementptr inbounds %struct.wm97xx.1078, %struct.wm97xx.1078* %wm, i32 0, i32 4
  %arraydecay = getelementptr inbounds [3 x i16], [3 x i16]* %dig_save, i32 0, i32 0
  %0 = bitcast i16* %arraydecay to i8*
  %dig = getelementptr inbounds %struct.wm97xx.1078, %struct.wm97xx.1078* %wm, i32 0, i32 0
  %arraydecay1 = getelementptr inbounds [3 x i16], [3 x i16]* %dig, i32 0, i32 0
  %1 = bitcast i16* %arraydecay1 to i8*
  %call = call i8* @__memcpy(i8* %0, i8* %1, i64 6)
  call void bitcast (void (%struct.wm97xx*, i16, i16)* @wm97xx_reg_write to void (%struct.wm97xx.1078*, i16, i16)*)(%struct.wm97xx.1078* %wm, i16 zeroext 116, i16 zeroext 0)
  call void bitcast (void (%struct.wm97xx*, i16, i16)* @wm97xx_reg_write to void (%struct.wm97xx.1078*, i16, i16)*)(%struct.wm97xx.1078* %wm, i16 zeroext 118, i16 zeroext 0)
  call void bitcast (void (%struct.wm97xx*, i16, i16)* @wm97xx_reg_write to void (%struct.wm97xx.1078*, i16, i16)*)(%struct.wm97xx.1078* %wm, i16 zeroext 120, i16 zeroext -16384)
  ret void
}

; Function Attrs: nounwind uwtable
define internal i32 @wm9713_poll_coord(%struct.wm97xx.1078* %wm, %struct.exception_table_entry* %data) #0 {
entry:
  %0 = load i32, i32* @delay.65, align 4, !tbaa !55
  %mul = mul nsw i32 5, %0
  %pen_probably_down = getelementptr inbounds %struct.wm97xx.1078, %struct.wm97xx.1078* %wm, i32 0, i32 21
  %bf.load = load i8, i8* %pen_probably_down, align 4
  %bf.lshr = lshr i8 %bf.load, 2
  %bf.clear = and i8 %bf.lshr, 1
  %bf.cast = zext i8 %bf.clear to i32
  %tobool = icmp ne i32 %bf.cast, 0
  br i1 %tobool, label %if.end7, label %if.then

if.then:                                          ; preds = %entry
  %call = call i32 bitcast (i32 (%struct.wm97xx*, i16)* @wm97xx_reg_read to i32 (%struct.wm97xx.1078*, i16)*)(%struct.wm97xx.1078* %wm, i16 zeroext 122)
  %conv = trunc i32 %call to i16
  %conv1 = zext i16 %conv to i32
  %and = and i32 %conv1, 32768
  %tobool2 = icmp ne i32 %and, 0
  br i1 %tobool2, label %if.end, label %LeafBlock

if.end:                                           ; preds = %if.then
  %pen_probably_down4 = getelementptr inbounds %struct.wm97xx.1078, %struct.wm97xx.1078* %wm, i32 0, i32 21
  %bf.load5 = load i8, i8* %pen_probably_down4, align 4
  %bf.clear6 = and i8 %bf.load5, -5
  %bf.set = or i8 %bf.clear6, 4
  store i8 %bf.set, i8* %pen_probably_down4, align 4
  br label %LeafBlock

LeafBlock:                                        ; preds = %if.end, %if.then
  %cleanup.dest.slot.0 = phi i32 [ 0, %if.end ], [ 1, %if.then ]
  %SwitchLeaf = icmp eq i32 %cleanup.dest.slot.0, 0
  br i1 %SwitchLeaf, label %if.end7, label %cleanup100

if.end7:                                          ; preds = %LeafBlock, %entry
  %call8 = call i32 bitcast (i32 (%struct.wm97xx*, i16)* @wm97xx_reg_read to i32 (%struct.wm97xx.1078*, i16)*)(%struct.wm97xx.1078* %wm, i16 zeroext 116)
  %conv9 = trunc i32 %call8 to i16
  %conv10 = zext i16 %conv9 to i32
  %and11 = and i32 %conv10, -255
  %conv12 = trunc i32 %and11 to i16
  %1 = load i32, i32* @pil.60, align 4, !tbaa !55
  %tobool13 = icmp ne i32 %1, 0
  %conv15 = zext i16 %conv12 to i32
  %or = or i32 %conv15, 8
  %conv16 = trunc i32 %or to i16
  %dig1.0 = select i1 %tobool13, i16 %conv16, i16 %conv12
  %mach_ops = getelementptr inbounds %struct.wm97xx.1078, %struct.wm97xx.1078* %wm, i32 0, i32 11
  %2 = load %struct.wm97xx_mach_ops.1084*, %struct.wm97xx_mach_ops.1084** %mach_ops, align 8, !tbaa !2
  %tobool18 = icmp ne %struct.wm97xx_mach_ops.1084* %2, null
  br i1 %tobool18, label %land.lhs.true, label %if.end24

land.lhs.true:                                    ; preds = %if.end7
  %mach_ops19 = getelementptr inbounds %struct.wm97xx.1078, %struct.wm97xx.1078* %wm, i32 0, i32 11
  %3 = load %struct.wm97xx_mach_ops.1084*, %struct.wm97xx_mach_ops.1084** %mach_ops19, align 8, !tbaa !2
  %pre_sample = getelementptr inbounds %struct.wm97xx_mach_ops.1084, %struct.wm97xx_mach_ops.1084* %3, i32 0, i32 7
  %4 = load void (i32)*, void (i32)** %pre_sample, align 8, !tbaa !105
  %tobool20 = icmp ne void (i32)* %4, null
  br i1 %tobool20, label %if.then21, label %if.end24

if.then21:                                        ; preds = %land.lhs.true
  %mach_ops22 = getelementptr inbounds %struct.wm97xx.1078, %struct.wm97xx.1078* %wm, i32 0, i32 11
  %5 = load %struct.wm97xx_mach_ops.1084*, %struct.wm97xx_mach_ops.1084** %mach_ops22, align 8, !tbaa !2
  %pre_sample23 = getelementptr inbounds %struct.wm97xx_mach_ops.1084, %struct.wm97xx_mach_ops.1084* %5, i32 0, i32 7
  %6 = load void (i32)*, void (i32)** %pre_sample23, align 8, !tbaa !105
  call void %6(i32 12288)
  br label %if.end24

if.end24:                                         ; preds = %if.then21, %land.lhs.true, %if.end7
  %conv25 = zext i16 %dig1.0 to i32
  %or26 = or i32 %conv25, 512
  %or27 = or i32 %or26, 1
  %conv28 = trunc i32 %or27 to i16
  call void bitcast (void (%struct.wm97xx*, i16, i16)* @wm97xx_reg_write to void (%struct.wm97xx.1078*, i16, i16)*)(%struct.wm97xx.1078* %wm, i16 zeroext 116, i16 zeroext %conv28)
  %7 = load i32, i32* @delay.65, align 4, !tbaa !55
  call void @poll_delay.71(i32 %7)
  %call29 = call i32 bitcast (i32 (%struct.wm97xx*, i16)* @wm97xx_reg_read to i32 (%struct.wm97xx.1078*, i16)*)(%struct.wm97xx.1078* %wm, i16 zeroext 122)
  %x = getelementptr inbounds %struct.exception_table_entry, %struct.exception_table_entry* %data, i32 0, i32 0
  store i32 %call29, i32* %x, align 4, !tbaa !101
  br label %while.cond

while.cond:                                       ; preds = %while.body, %if.end24
  %timeout.0 = phi i32 [ %mul, %if.end24 ], [ %dec, %while.body ]
  %call30 = call i32 bitcast (i32 (%struct.wm97xx*, i16)* @wm97xx_reg_read to i32 (%struct.wm97xx.1078*, i16)*)(%struct.wm97xx.1078* %wm, i16 zeroext 116)
  %and31 = and i32 %call30, 512
  %tobool32 = icmp ne i32 %and31, 0
  %tobool33 = icmp ne i32 %timeout.0, 0
  %tobool33. = select i1 %tobool32, i1 %tobool33, i1 false
  br i1 %tobool33., label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  call void @__const_udelay(i64 90195)
  %dec = add nsw i32 %timeout.0, -1
  br label %while.cond

while.end:                                        ; preds = %while.cond
  %cmp = icmp sle i32 %timeout.0, 0
  br i1 %cmp, label %if.then35, label %if.end56

if.then35:                                        ; preds = %while.end
  %call36 = call i32 @is_pden.72(%struct.wm97xx.1078* %wm)
  %tobool37 = icmp ne i32 %call36, 0
  br i1 %tobool37, label %if.then38, label %do.body42

if.then38:                                        ; preds = %if.then35
  %pen_probably_down39 = getelementptr inbounds %struct.wm97xx.1078, %struct.wm97xx.1078* %wm, i32 0, i32 21
  %bf.load40 = load i8, i8* %pen_probably_down39, align 4
  %bf.clear41 = and i8 %bf.load40, -5
  store i8 %bf.clear41, i8* %pen_probably_down39, align 4
  br label %cleanup100

do.body42:                                        ; preds = %if.then35
  %bf.load43 = load i32, i32* getelementptr inbounds (%struct._ddebug, %struct._ddebug* bitcast ({ i8*, i8*, i8*, i8*, i8, i8, i8, i8 }* @wm9713_poll_coord.descriptor to %struct._ddebug*), i32 0, i32 4), align 8
  %bf.lshr44 = lshr i32 %bf.load43, 18
  %bf.clear45 = and i32 %bf.lshr44, 255
  %and46 = and i32 %bf.clear45, 1
  %tobool47 = icmp ne i32 %and46, 0
  %lnot = xor i1 %tobool47, true
  %lnot48 = xor i1 %lnot, true
  %lnot.ext = zext i1 %lnot48 to i32
  %conv49 = sext i32 %lnot.ext to i64
  %expval = call i64 @llvm.expect.i64(i64 %conv49, i64 0)
  %tobool50 = icmp ne i64 %expval, 0
  br i1 %tobool50, label %if.then51, label %cleanup100

if.then51:                                        ; preds = %do.body42
  %dev = getelementptr inbounds %struct.wm97xx.1078, %struct.wm97xx.1078* %wm, i32 0, i32 8
  %8 = load %struct.device*, %struct.device** %dev, align 8, !tbaa !31
  call void (%struct._ddebug*, %struct.device*, i8*, ...) @__dynamic_dev_dbg(%struct._ddebug* bitcast ({ i8*, i8*, i8*, i8*, i8, i8, i8, i8 }* @wm9713_poll_coord.descriptor to %struct._ddebug*), %struct.device* %8, i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.3.73, i32 0, i32 0))
  br label %cleanup100

if.end56:                                         ; preds = %while.end
  %call57 = call i32 bitcast (i32 (%struct.wm97xx*, i16)* @wm97xx_reg_read to i32 (%struct.wm97xx.1078*, i16)*)(%struct.wm97xx.1078* %wm, i16 zeroext 122)
  %y = getelementptr inbounds %struct.exception_table_entry, %struct.exception_table_entry* %data, i32 0, i32 1
  store i32 %call57, i32* %y, align 4, !tbaa !103
  %9 = load i32, i32* @pil.60, align 4, !tbaa !55
  %tobool58 = icmp ne i32 %9, 0
  br i1 %tobool58, label %if.then59, label %if.end63

if.then59:                                        ; preds = %if.end56
  %call60 = call i32 bitcast (i32 (%struct.wm97xx*, i16)* @wm97xx_reg_read to i32 (%struct.wm97xx.1078*, i16)*)(%struct.wm97xx.1078* %wm, i16 zeroext 122)
  br label %if.end63

if.end63:                                         ; preds = %if.then59, %if.end56
  %.sink = phi i32 [ %call60, %if.then59 ], [ 45248, %if.end56 ]
  %p62 = getelementptr inbounds %struct.exception_table_entry, %struct.exception_table_entry* %data, i32 0, i32 2
  store i32 %.sink, i32* %p62, align 4, !tbaa !104
  %mach_ops64 = getelementptr inbounds %struct.wm97xx.1078, %struct.wm97xx.1078* %wm, i32 0, i32 11
  %10 = load %struct.wm97xx_mach_ops.1084*, %struct.wm97xx_mach_ops.1084** %mach_ops64, align 8, !tbaa !2
  %tobool65 = icmp ne %struct.wm97xx_mach_ops.1084* %10, null
  br i1 %tobool65, label %land.lhs.true66, label %if.end72

land.lhs.true66:                                  ; preds = %if.end63
  %mach_ops67 = getelementptr inbounds %struct.wm97xx.1078, %struct.wm97xx.1078* %wm, i32 0, i32 11
  %11 = load %struct.wm97xx_mach_ops.1084*, %struct.wm97xx_mach_ops.1084** %mach_ops67, align 8, !tbaa !2
  %post_sample = getelementptr inbounds %struct.wm97xx_mach_ops.1084, %struct.wm97xx_mach_ops.1084* %11, i32 0, i32 8
  %12 = load void (i32)*, void (i32)** %post_sample, align 8, !tbaa !106
  %tobool68 = icmp ne void (i32)* %12, null
  br i1 %tobool68, label %if.then69, label %if.end72

if.then69:                                        ; preds = %land.lhs.true66
  %mach_ops70 = getelementptr inbounds %struct.wm97xx.1078, %struct.wm97xx.1078* %wm, i32 0, i32 11
  %13 = load %struct.wm97xx_mach_ops.1084*, %struct.wm97xx_mach_ops.1084** %mach_ops70, align 8, !tbaa !2
  %post_sample71 = getelementptr inbounds %struct.wm97xx_mach_ops.1084, %struct.wm97xx_mach_ops.1084* %13, i32 0, i32 8
  %14 = load void (i32)*, void (i32)** %post_sample71, align 8, !tbaa !106
  call void %14(i32 12288)
  br label %if.end72

if.end72:                                         ; preds = %if.then69, %land.lhs.true66, %if.end63
  %x73 = getelementptr inbounds %struct.exception_table_entry, %struct.exception_table_entry* %data, i32 0, i32 0
  %15 = load i32, i32* %x73, align 4, !tbaa !101
  %and74 = and i32 %15, 4096
  %tobool75 = icmp ne i32 %and74, 0
  br i1 %tobool75, label %lor.lhs.false, label %cleanup100

lor.lhs.false:                                    ; preds = %if.end72
  %y76 = getelementptr inbounds %struct.exception_table_entry, %struct.exception_table_entry* %data, i32 0, i32 1
  %16 = load i32, i32* %y76, align 4, !tbaa !103
  %and77 = and i32 %16, 8192
  %tobool78 = icmp ne i32 %and77, 0
  br i1 %tobool78, label %if.end80, label %cleanup100

if.end80:                                         ; preds = %lor.lhs.false
  %17 = load i32, i32* @pil.60, align 4, !tbaa !55
  %tobool81 = icmp ne i32 %17, 0
  br i1 %tobool81, label %land.lhs.true82, label %if.end87

land.lhs.true82:                                  ; preds = %if.end80
  %p83 = getelementptr inbounds %struct.exception_table_entry, %struct.exception_table_entry* %data, i32 0, i32 2
  %18 = load i32, i32* %p83, align 4, !tbaa !104
  %and84 = and i32 %18, 12288
  %tobool85 = icmp ne i32 %and84, 0
  br i1 %tobool85, label %if.end87, label %cleanup100

if.end87:                                         ; preds = %land.lhs.true82, %if.end80
  %x88 = getelementptr inbounds %struct.exception_table_entry, %struct.exception_table_entry* %data, i32 0, i32 0
  %19 = load i32, i32* %x88, align 4, !tbaa !101
  %and89 = and i32 %19, 32768
  %tobool90 = icmp ne i32 %and89, 0
  br i1 %tobool90, label %lor.lhs.false91, label %if.then95

lor.lhs.false91:                                  ; preds = %if.end87
  %y92 = getelementptr inbounds %struct.exception_table_entry, %struct.exception_table_entry* %data, i32 0, i32 1
  %20 = load i32, i32* %y92, align 4, !tbaa !103
  %and93 = and i32 %20, 32768
  %tobool94 = icmp ne i32 %and93, 0
  br i1 %tobool94, label %cleanup100, label %if.then95

if.then95:                                        ; preds = %lor.lhs.false91, %if.end87
  %pen_probably_down96 = getelementptr inbounds %struct.wm97xx.1078, %struct.wm97xx.1078* %wm, i32 0, i32 21
  %bf.load97 = load i8, i8* %pen_probably_down96, align 4
  %bf.clear98 = and i8 %bf.load97, -5
  store i8 %bf.clear98, i8* %pen_probably_down96, align 4
  br label %cleanup100

cleanup100:                                       ; preds = %if.then95, %lor.lhs.false91, %land.lhs.true82, %lor.lhs.false, %if.end72, %if.then51, %do.body42, %if.then38, %LeafBlock
  %retval.1 = phi i32 [ 4, %if.then95 ], [ 4, %do.body42 ], [ 4, %if.then51 ], [ 4, %if.then38 ], [ 2, %lor.lhs.false91 ], [ 0, %land.lhs.true82 ], [ 0, %if.end72 ], [ 0, %lor.lhs.false ], [ 4, %LeafBlock ]
  ret i32 %retval.1
}

; Function Attrs: inlinehint nounwind uwtable
define internal void @poll_delay.71(i32 %d) #4 {
entry:
  %idxprom = sext i32 %d to i64
  %arrayidx = getelementptr inbounds [16 x i32], [16 x i32]* @delay_table.67, i64 0, i64 %idxprom
  %0 = load i32, i32* %arrayidx, align 4, !tbaa !55
  %add = add nsw i32 63, %0
  %conv = sext i32 %add to i64
  call void @__udelay(i64 %conv)
  ret void
}

; Function Attrs: inlinehint nounwind uwtable
define internal i32 @is_pden.72(%struct.wm97xx.1078* %wm) #4 {
entry:
  %dig = getelementptr inbounds %struct.wm97xx.1078, %struct.wm97xx.1078* %wm, i32 0, i32 0
  %arrayidx = getelementptr inbounds [3 x i16], [3 x i16]* %dig, i64 0, i64 2
  %0 = load i16, i16* %arrayidx, align 4, !tbaa !34
  %conv = zext i16 %0 to i32
  %and = and i32 %conv, 2048
  ret i32 %and
}

declare void @simpll__indirect_0(%struct.snd_ac97*, i16, i16, void (%struct.snd_ac97*, i16, i16)*)

declare i16 @simpll__indirect_0.1(%struct.snd_ac97*, i16, i16 (%struct.snd_ac97*, i16)*)

declare void @simpll__indirect_1(i32, void (i32)*)

attributes #0 = { nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "counting-function"="mcount" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { argmemonly nounwind }
attributes #3 = { nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { inlinehint nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { nounwind readnone }
attributes #6 = { nounwind }

!llvm.ident = !{!0, !0, !0, !0}
!llvm.module.flags = !{!1}

!0 = !{!"clang version 5.0.1 (tags/RELEASE_500/final)"}
!1 = !{i32 1, !"wchar_size", i32 4}
!2 = !{!3, !7, i64 80}
!3 = !{!"wm97xx", !4, i64 0, !6, i64 6, !4, i64 8, !6, i64 20, !4, i64 22, !7, i64 32, !7, i64 40, !7, i64 48, !7, i64 56, !7, i64 64, !7, i64 72, !7, i64 80, !8, i64 88, !17, i64 248, !10, i64 440, !10, i64 448, !14, i64 456, !7, i64 464, !18, i64 472, !6, i64 552, !6, i64 554, !14, i64 556, !14, i64 556, !14, i64 556, !6, i64 558, !6, i64 560}
!4 = !{!"omnipotent char", !5, i64 0}
!5 = !{!"Simple C/C++ TBAA"}
!6 = !{!"short", !4, i64 0}
!7 = !{!"any pointer", !4, i64 0}
!8 = !{!"mutex", !9, i64 0, !11, i64 8, !12, i64 80, !15, i64 88, !7, i64 104, !16, i64 112}
!9 = !{!"", !10, i64 0}
!10 = !{!"long", !4, i64 0}
!11 = !{!"spinlock", !4, i64 0}
!12 = !{!"optimistic_spin_queue", !13, i64 0}
!13 = !{!"", !14, i64 0}
!14 = !{!"int", !4, i64 0}
!15 = !{!"list_head", !7, i64 0, !7, i64 8}
!16 = !{!"lockdep_map", !7, i64 0, !4, i64 8, !7, i64 24, !14, i64 32, !10, i64 40}
!17 = !{!"delayed_work", !18, i64 0, !19, i64 80, !7, i64 176, !14, i64 184}
!18 = !{!"work_struct", !9, i64 0, !15, i64 8, !7, i64 24, !16, i64 32}
!19 = !{!"timer_list", !20, i64 0, !10, i64 16, !7, i64 24, !10, i64 32, !14, i64 40, !16, i64 48}
!20 = !{!"hlist_node", !7, i64 0, !7, i64 8}
!21 = !{!3, !6, i64 560}
!22 = !{!3, !7, i64 40}
!23 = !{!3, !6, i64 6}
!24 = !{!3, !6, i64 558}
!25 = !{!3, !7, i64 32}
!26 = !{!27, !7, i64 64}
!27 = !{!"wm97xx_codec_drv", !6, i64 0, !7, i64 8, !7, i64 16, !7, i64 24, !7, i64 32, !7, i64 40, !7, i64 48, !7, i64 56, !7, i64 64}
!28 = !{!27, !7, i64 16}
!29 = !{!27, !7, i64 56}
!30 = !{!27, !7, i64 48}
!31 = !{!3, !7, i64 56}
!32 = !{!3, !7, i64 48}
!33 = !{!27, !7, i64 40}
!34 = !{!6, !6, i64 0}
!35 = !{!36, !7, i64 0}
!36 = !{!"input_dev", !7, i64 0, !7, i64 8, !7, i64 16, !37, i64 24, !4, i64 32, !4, i64 40, !4, i64 48, !4, i64 144, !4, i64 152, !4, i64 160, !4, i64 168, !4, i64 176, !4, i64 184, !4, i64 200, !14, i64 208, !14, i64 212, !14, i64 216, !7, i64 224, !7, i64 232, !7, i64 240, !7, i64 248, !14, i64 256, !19, i64 264, !4, i64 360, !7, i64 368, !7, i64 376, !4, i64 384, !4, i64 480, !4, i64 488, !4, i64 496, !7, i64 504, !7, i64 512, !7, i64 520, !7, i64 528, !7, i64 536, !11, i64 544, !8, i64 616, !14, i64 776, !38, i64 780, !39, i64 784, !15, i64 2208, !15, i64 2224, !14, i64 2240, !14, i64 2244, !7, i64 2248, !38, i64 2256}
!37 = !{!"input_id", !6, i64 0, !6, i64 2, !6, i64 4, !6, i64 6}
!38 = !{!"_Bool", !4, i64 0}
!39 = !{!"device", !7, i64 0, !7, i64 8, !40, i64 16, !7, i64 280, !7, i64 288, !8, i64 296, !7, i64 456, !7, i64 464, !7, i64 472, !7, i64 480, !43, i64 488, !44, i64 528, !7, i64 1104, !7, i64 1112, !7, i64 1120, !15, i64 1128, !14, i64 1144, !7, i64 1152, !7, i64 1160, !48, i64 1168, !10, i64 1176, !7, i64 1184, !15, i64 1192, !7, i64 1208, !7, i64 1216, !49, i64 1224, !7, i64 1232, !7, i64 1240, !14, i64 1248, !14, i64 1252, !11, i64 1256, !15, i64 1328, !50, i64 1344, !7, i64 1376, !7, i64 1384, !7, i64 1392, !7, i64 1400, !7, i64 1408, !38, i64 1416, !38, i64 1416}
!40 = !{!"kobject", !7, i64 0, !15, i64 8, !7, i64 24, !7, i64 32, !7, i64 40, !7, i64 48, !41, i64 56, !17, i64 64, !14, i64 256, !14, i64 256, !14, i64 256, !14, i64 256, !14, i64 256}
!41 = !{!"kref", !42, i64 0}
!42 = !{!"refcount_struct", !13, i64 0}
!43 = !{!"dev_links_info", !15, i64 0, !15, i64 16, !4, i64 32}
!44 = !{!"dev_pm_info", !45, i64 0, !14, i64 4, !14, i64 4, !38, i64 4, !38, i64 4, !38, i64 4, !38, i64 4, !38, i64 4, !38, i64 4, !38, i64 5, !11, i64 8, !15, i64 80, !46, i64 96, !7, i64 192, !38, i64 200, !38, i64 200, !38, i64 200, !19, i64 208, !10, i64 304, !18, i64 312, !47, i64 392, !7, i64 480, !13, i64 488, !13, i64 492, !14, i64 496, !14, i64 496, !14, i64 496, !14, i64 496, !14, i64 496, !14, i64 496, !38, i64 497, !14, i64 497, !14, i64 497, !14, i64 497, !14, i64 497, !14, i64 497, !14, i64 500, !4, i64 504, !4, i64 508, !14, i64 512, !14, i64 516, !10, i64 520, !10, i64 528, !10, i64 536, !10, i64 544, !7, i64 552, !7, i64 560, !7, i64 568}
!45 = !{!"pm_message", !14, i64 0}
!46 = !{!"completion", !14, i64 0, !47, i64 8}
!47 = !{!"__wait_queue_head", !11, i64 0, !15, i64 72}
!48 = !{!"long long", !4, i64 0}
!49 = !{!"dev_archdata", !7, i64 0}
!50 = !{!"klist_node", !7, i64 0, !15, i64 8, !41, i64 24}
!51 = !{!36, !7, i64 8}
!52 = !{!36, !7, i64 504}
!53 = !{!36, !7, i64 512}
!54 = !{i32 520759}
!55 = !{!14, !14, i64 0}
!56 = !{!36, !7, i64 784}
!57 = !{!3, !7, i64 64}
!58 = !{!59, !7, i64 16}
!59 = !{!"platform_device", !7, i64 0, !14, i64 8, !38, i64 12, !39, i64 16, !14, i64 1440, !7, i64 1448, !7, i64 1456, !7, i64 1464, !7, i64 1472, !60, i64 1480}
!60 = !{!"pdev_archdata"}
!61 = !{!62, !7, i64 0}
!62 = !{!"wm97xx_pdata", !7, i64 0}
!63 = !{!59, !7, i64 488}
!64 = !{!3, !7, i64 72}
!65 = !{!36, !14, i64 776}
!66 = !{!67, !7, i64 24}
!67 = !{!"snd_ac97", !7, i64 0, !7, i64 8, !7, i64 16, !7, i64 24, !7, i64 32, !7, i64 40, !7, i64 48, !6, i64 56, !6, i64 58, !8, i64 64, !8, i64 224, !6, i64 384, !6, i64 386, !14, i64 388, !6, i64 392, !6, i64 394, !6, i64 396, !7, i64 400, !14, i64 408, !14, i64 412, !4, i64 416, !14, i64 440, !4, i64 444, !4, i64 704, !4, i64 720, !4, i64 752, !4, i64 753, !14, i64 756, !17, i64 760, !39, i64 952, !7, i64 2376, !4, i64 2384}
!68 = !{!69, !7, i64 0}
!69 = !{!"snd_ac97_bus", !7, i64 0, !7, i64 8, !7, i64 16, !7, i64 24, !6, i64 32, !6, i64 34, !6, i64 34, !6, i64 34, !14, i64 36, !11, i64 40, !4, i64 112, !6, i64 128, !7, i64 136, !4, i64 144, !7, i64 176}
!70 = !{!71, !7, i64 16}
!71 = !{!"snd_ac97_bus_ops", !7, i64 0, !7, i64 8, !7, i64 16, !7, i64 24, !7, i64 32, !7, i64 40}
!72 = !{!3, !6, i64 20}
!73 = !{!3, !14, i64 456}
!74 = !{!3, !10, i64 448}
!75 = !{!3, !10, i64 440}
!76 = !{!3, !7, i64 464}
!77 = !{!39, !7, i64 480}
!78 = !{!39, !7, i64 720}
!79 = !{!39, !7, i64 472}
!80 = !{!81, !14, i64 0}
!81 = !{!"wm97xx_mach_ops", !14, i64 0, !7, i64 8, !7, i64 16, !7, i64 24, !7, i64 32, !7, i64 40, !14, i64 48, !7, i64 56, !7, i64 64}
!82 = !{!27, !7, i64 32}
!83 = !{!9, !10, i64 0}
!84 = !{i64 0, i64 8, !85}
!85 = !{!10, !10, i64 0}
!86 = !{!18, !7, i64 24}
!87 = !{!19, !7, i64 24}
!88 = !{!19, !10, i64 32}
!89 = !{!81, !14, i64 48}
!90 = !{i32 -2142773671, i32 -2142773646, i32 -2142773376, i32 -2142773579, i32 -2142773548, i32 -2142773518}
!91 = !{!81, !7, i64 40}
!92 = !{!4, !4, i64 0}
!93 = !{!48, !48, i64 0}
!94 = !{!15, !7, i64 8}
!95 = !{i32 -2142776955, i32 -2142776930, i32 -2142776660, i32 -2142776863, i32 -2142776832, i32 -2142776802}
!96 = !{!81, !7, i64 16}
!97 = !{!81, !7, i64 8}
!98 = !{i32 -2142782776, i32 -2142782751, i32 -2142782481, i32 -2142782684, i32 -2142782653, i32 -2142782623}
!99 = !{i32 -2142782212, i32 -2142782187, i32 -2142781917, i32 -2142782120, i32 -2142782089, i32 -2142782059}
!100 = !{!27, !7, i64 24}
!101 = !{!102, !14, i64 0}
!102 = !{!"wm97xx_data", !14, i64 0, !14, i64 4, !14, i64 8}
!103 = !{!102, !14, i64 4}
!104 = !{!102, !14, i64 8}
!105 = !{!81, !7, i64 56}
!106 = !{!81, !7, i64 64}
!107 = !{!3, !6, i64 552}
!108 = !{!3, !6, i64 554}
!109 = !{!81, !7, i64 24}
!110 = !{!81, !7, i64 32}
