; ModuleID = 'sound/pci/intel8x0.bc'
source_filename = "sound/pci/intel8x0.c"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%struct.kernel_param_ops = type { i32, i32 (i8*, %struct.kernel_param*)*, i32 (i8*, %struct.kernel_param*)*, void (i8*)* }
%struct.kernel_param = type { i8*, %struct.module*, %struct.kernel_param_ops*, i16, i8, i8, %union.anon.46 }
%struct.module = type { i32, %struct.list_head, [56 x i8], %struct.module_kobject, %struct.module_attribute*, i8*, i8*, %struct.kobject*, %struct.kernel_symbol*, i32*, i32, %struct.mutex, %struct.kernel_param*, i32, i32, %struct.kernel_symbol*, i32*, i8, %struct.kernel_symbol*, i32*, i32, i32, %struct.exception_table_entry*, i32 ()*, [40 x i8], %struct.module_layout, %struct.module_layout, %struct.mod_arch_specific, i64, i32, %struct.list_head, %struct.bug_entry*, %struct.mod_kallsyms*, %struct.mod_kallsyms, %struct.module_sect_attrs*, %struct.module_notes_attrs*, i8*, i8*, i32, i32, %struct.tracepoint**, i32, i8**, %struct.trace_event_call**, i32, %struct.trace_enum_map**, i32, %struct.list_head, %struct.list_head, void ()*, %struct.atomic_t, [12 x i8] }
%struct.module_kobject = type { %struct.kobject, %struct.module*, %struct.kobject*, %struct.module_param_attrs*, %struct.completion* }
%struct.kobject = type { i8*, %struct.list_head, %struct.kobject*, %struct.kset*, %struct.kobj_type*, %struct.kernfs_node*, %struct.kref, i8 }
%struct.kset = type { %struct.list_head, %struct.spinlock, %struct.kobject, %struct.kset_uevent_ops* }
%struct.spinlock = type { %union.anon.1 }
%union.anon.1 = type { %struct.raw_spinlock }
%struct.raw_spinlock = type { %struct.qspinlock }
%struct.qspinlock = type { %struct.atomic_t }
%struct.kset_uevent_ops = type { i32 (%struct.kset*, %struct.kobject*)*, i8* (%struct.kset*, %struct.kobject*)*, i32 (%struct.kset*, %struct.kobject*, %struct.kobj_uevent_env*)* }
%struct.kobj_uevent_env = type { [3 x i8*], [32 x i8*], i32, [2048 x i8], i32 }
%struct.kobj_type = type { void (%struct.kobject*)*, %struct.sysfs_ops*, %struct.attribute**, %struct.kobj_ns_type_operations* (%struct.kobject*)*, i8* (%struct.kobject*)* }
%struct.sysfs_ops = type { i64 (%struct.kobject*, %struct.attribute*, i8*)*, i64 (%struct.kobject*, %struct.attribute*, i8*, i64)* }
%struct.attribute = type { i8*, i16 }
%struct.kobj_ns_type_operations = type { i32, i1 ()*, i8* ()*, i8* (%struct.sock*)*, i8* ()*, void (i8*)* }
%struct.sock = type opaque
%struct.kernfs_node = type { %struct.atomic_t, %struct.atomic_t, %struct.kernfs_node*, i8*, %struct.rb_node, i8*, i32, %union.anon, i8*, i16, i16, i32, %struct.kernfs_iattrs* }
%struct.rb_node = type { i64, %struct.rb_node*, %struct.rb_node* }
%union.anon = type { %struct.kernfs_elem_attr }
%struct.kernfs_elem_attr = type { %struct.kernfs_ops*, %struct.kernfs_open_node*, i64, %struct.kernfs_node* }
%struct.kernfs_ops = type { i32 (%struct.kernfs_open_file*)*, void (%struct.kernfs_open_file*)*, i32 (%struct.seq_file*, i8*)*, i8* (%struct.seq_file*, i64*)*, i8* (%struct.seq_file*, i8*, i64*)*, void (%struct.seq_file*, i8*)*, i64 (%struct.kernfs_open_file*, i8*, i64, i64)*, i64, i8, i64 (%struct.kernfs_open_file*, i8*, i64, i64)*, i32 (%struct.kernfs_open_file*, %struct.vm_area_struct*)* }
%struct.kernfs_open_file = type { %struct.kernfs_node*, %struct.file*, %struct.seq_file*, i8*, %struct.mutex, %struct.mutex, i32, %struct.list_head, i8*, i64, i8, %struct.vm_operations_struct* }
%struct.file = type { %union.anon.2, %struct.path, %struct.inode*, %struct.file_operations*, %struct.spinlock, %struct.atomic64_t, i32, i32, %struct.mutex, i64, %struct.fown_struct, %struct.cred*, %struct.file_ra_state, i64, i8*, i8*, %struct.list_head, %struct.list_head, %struct.address_space* }
%union.anon.2 = type { %struct.callback_head }
%struct.callback_head = type { %struct.callback_head*, void (%struct.callback_head*)* }
%struct.path = type { %struct.vfsmount*, %struct.dentry* }
%struct.vfsmount = type opaque
%struct.dentry = type { i32, %struct.seqcount, %struct.hlist_bl_node, %struct.dentry*, %struct.qstr, %struct.inode*, [32 x i8], %struct.lockref, %struct.dentry_operations*, %struct.super_block*, i64, i8*, %union.anon.44, %struct.list_head, %struct.list_head, %union.anon.45 }
%struct.seqcount = type { i32 }
%struct.hlist_bl_node = type { %struct.hlist_bl_node*, %struct.hlist_bl_node** }
%struct.qstr = type { %union.anon.3, i8* }
%union.anon.3 = type { i64 }
%struct.lockref = type { %union.anon.42 }
%union.anon.42 = type { i64 }
%struct.dentry_operations = type { i32 (%struct.dentry*, i32)*, i32 (%struct.dentry*, i32)*, i32 (%struct.dentry*, %struct.qstr*)*, i32 (%struct.dentry*, i32, i8*, %struct.qstr*)*, i32 (%struct.dentry*)*, i32 (%struct.dentry*)*, void (%struct.dentry*)*, void (%struct.dentry*)*, void (%struct.dentry*, %struct.inode*)*, i8* (%struct.dentry*, i8*, i32)*, %struct.vfsmount* (%struct.path*)*, i32 (%struct.path*, i1)*, %struct.dentry* (%struct.dentry*, %struct.inode*, i32)*, [24 x i8] }
%struct.super_block = type { %struct.list_head, i32, i8, i64, i64, %struct.file_system_type*, %struct.super_operations*, %struct.dquot_operations*, %struct.quotactl_ops*, %struct.export_operations*, i64, i64, i64, %struct.dentry*, %struct.rw_semaphore, i32, %struct.atomic_t, i8*, %struct.xattr_handler**, %struct.fscrypt_operations*, %struct.hlist_bl_head, %struct.list_head, %struct.block_device*, %struct.backing_dev_info*, %struct.mtd_info*, %struct.hlist_node, i32, %struct.quota_info, %struct.sb_writers, [32 x i8], [16 x i8], i8*, i32, i32, i32, %struct.mutex, i8*, i8*, %struct.dentry_operations*, i32, %struct.shrinker, %struct.atomic64_t, i32, %struct.workqueue_struct*, %struct.hlist_head, %struct.user_namespace*, %struct.list_lru, [56 x i8], %struct.list_lru, %struct.callback_head, %struct.work_struct, %struct.mutex, i32, [36 x i8], %struct.spinlock, %struct.list_head, %struct.spinlock, %struct.list_head, [16 x i8] }
%struct.file_system_type = type { i8*, i32, %struct.dentry* (%struct.file_system_type*, i32, i8*, i8*)*, void (%struct.super_block*)*, %struct.module*, %struct.file_system_type*, %struct.hlist_head, %struct.lock_class_key, %struct.lock_class_key, %struct.lock_class_key, [3 x %struct.lock_class_key], %struct.lock_class_key, %struct.lock_class_key, %struct.lock_class_key }
%struct.lock_class_key = type {}
%struct.super_operations = type { %struct.inode* (%struct.super_block*)*, void (%struct.inode*)*, void (%struct.inode*, i32)*, i32 (%struct.inode*, %struct.writeback_control*)*, i32 (%struct.inode*)*, void (%struct.inode*)*, void (%struct.super_block*)*, i32 (%struct.super_block*, i32)*, i32 (%struct.super_block*)*, i32 (%struct.super_block*)*, i32 (%struct.super_block*)*, i32 (%struct.super_block*)*, i32 (%struct.dentry*, %struct.kstatfs*)*, i32 (%struct.super_block*, i32*, i8*)*, void (%struct.super_block*)*, i32 (%struct.seq_file*, %struct.dentry*)*, i32 (%struct.seq_file*, %struct.dentry*)*, i32 (%struct.seq_file*, %struct.dentry*)*, i32 (%struct.seq_file*, %struct.dentry*)*, i64 (%struct.super_block*, i32, i8*, i64, i64)*, i64 (%struct.super_block*, i32, i8*, i64, i64)*, %struct.dquot** (%struct.inode*)*, i32 (%struct.super_block*, %struct.page*, i32)*, i64 (%struct.super_block*, %struct.shrink_control*)*, i64 (%struct.super_block*, %struct.shrink_control*)* }
%struct.writeback_control = type opaque
%struct.kstatfs = type opaque
%struct.dquot = type { %struct.hlist_node, %struct.list_head, %struct.list_head, %struct.list_head, %struct.mutex, %struct.atomic_t, %struct.__wait_queue_head, %struct.super_block*, %struct.kqid, i64, i64, %struct.mem_dqblk }
%struct.__wait_queue_head = type { %struct.spinlock, %struct.list_head }
%struct.kqid = type { %union.anon.4, i32 }
%union.anon.4 = type { %struct.kuid_t }
%struct.kuid_t = type { i32 }
%struct.mem_dqblk = type { i64, i64, i64, i64, i64, i64, i64, i64, i64 }
%struct.page = type { i64, %union.anon.5, %union.anon.28, %union.anon.29, %union.anon.33, %union.anon.36, [8 x i8] }
%union.anon.5 = type { %struct.address_space* }
%union.anon.28 = type { i64 }
%union.anon.29 = type { i64 }
%union.anon.33 = type { %struct.list_head }
%union.anon.36 = type { i64 }
%struct.shrink_control = type { i32, i64, i32, %struct.mem_cgroup* }
%struct.mem_cgroup = type opaque
%struct.dquot_operations = type { i32 (%struct.dquot*)*, %struct.dquot* (%struct.super_block*, i32)*, void (%struct.dquot*)*, i32 (%struct.dquot*)*, i32 (%struct.dquot*)*, i32 (%struct.dquot*)*, i32 (%struct.super_block*, i32)*, i64* (%struct.inode*)*, i32 (%struct.inode*, %struct.kprojid_t*)*, i32 (%struct.super_block*, %struct.kqid*)* }
%struct.kprojid_t = type { i32 }
%struct.quotactl_ops = type { i32 (%struct.super_block*, i32, i32, %struct.path*)*, i32 (%struct.super_block*, i32)*, i32 (%struct.super_block*, i32)*, i32 (%struct.super_block*, i32)*, i32 (%struct.super_block*, i32)*, i32 (%struct.super_block*, i32, %struct.qc_info*)*, i32 (%struct.super_block*, i64, %struct.qc_dqblk*)*, i32 (%struct.super_block*, %struct.kqid*, %struct.qc_dqblk*)*, i32 (%struct.super_block*, i64, %struct.qc_dqblk*)*, i32 (%struct.super_block*, %struct.qc_state*)*, i32 (%struct.super_block*, i32)* }
%struct.qc_info = type { i32, i32, i32, i32, i32, i32, i32, i32 }
%struct.qc_dqblk = type { i32, i64, i64, i64, i64, i64, i64, i64, i64, i32, i32, i64, i64, i64, i64, i32 }
%struct.qc_state = type { i32, [3 x %struct.qc_type_state] }
%struct.qc_type_state = type { i32, i32, i32, i32, i32, i32, i32, i64, i64, i64 }
%struct.export_operations = type opaque
%struct.rw_semaphore = type { %struct.atomic64_t, %struct.list_head, %struct.raw_spinlock, %struct.optimistic_spin_queue, %struct.task_struct* }
%struct.optimistic_spin_queue = type { %struct.atomic_t }
%struct.task_struct = type { %struct.thread_info, i64, i8*, %struct.atomic_t, i32, i32, %struct.llist_node, i32, i32, i32, i64, %struct.task_struct*, i32, i32, i32, i32, i32, i32, %struct.sched_class*, [16 x i8], %struct.sched_entity, %struct.sched_rt_entity, %struct.task_group*, %struct.sched_dl_entity, i32, i32, i32, %struct.cpumask, %struct.sched_info, %struct.list_head, %struct.plist_node, %struct.rb_node, %struct.mm_struct*, %struct.mm_struct*, %struct.vmacache, %struct.task_rss_stat, i32, i32, i32, i32, i64, i32, i8, [3 x i8], i8, i64, %struct.restart_block, i32, i32, %struct.task_struct*, %struct.task_struct*, %struct.list_head, %struct.list_head, %struct.task_struct*, %struct.list_head, %struct.list_head, [3 x %struct.pid_link], %struct.list_head, %struct.list_head, %struct.completion*, i32*, i32*, i64, i64, i64, %struct.prev_cputime, i64, i64, i64, i64, i64, i64, %struct.task_cputime, [3 x %struct.list_head], %struct.cred*, %struct.cred*, %struct.cred*, [16 x i8], %struct.nameidata*, %struct.sysv_sem, %struct.sysv_shm, %struct.fs_struct*, %struct.files_struct*, %struct.nsproxy*, %struct.signal_struct*, %struct.sighand_struct*, %struct.sigset_t, %struct.sigset_t, %struct.sigset_t, %struct.sigpending, i64, i64, i32, %struct.callback_head*, %struct.audit_context*, %struct.kuid_t, i32, %struct.seccomp, i32, i32, %struct.spinlock, %struct.raw_spinlock, %struct.wake_q_node, %struct.rb_root, %struct.rb_node*, %struct.rt_mutex_waiter*, i8*, %struct.bio_list*, %struct.blk_plug*, %struct.reclaim_state*, %struct.backing_dev_info*, %struct.io_context*, i64, %struct.siginfo*, %struct.task_io_accounting, i64, i64, i64, %struct.nodemask_t, %struct.seqcount, i32, i32, %struct.css_set*, %struct.list_head, %struct.robust_list_head*, %struct.compat_robust_list_head*, %struct.list_head, %struct.futex_pi_state*, [2 x %struct.perf_event_context*], %struct.mutex, %struct.list_head, %struct.mempolicy*, i16, i16, %struct.tlbflush_unmap_batch, %struct.callback_head, %struct.pipe_inode_info*, %struct.page_frag, %struct.task_delay_info*, i32, i32, i64, i64, i64, i64, i64, i32, %struct.task_struct*, %struct.vm_struct*, %struct.atomic_t, [28 x i8], %struct.thread_struct }
%struct.thread_info = type { i64 }
%struct.llist_node = type { %struct.llist_node* }
%struct.sched_class = type opaque
%struct.sched_entity = type { %struct.load_weight, %struct.rb_node, %struct.list_head, i32, i64, i64, i64, i64, i64, %struct.sched_statistics, i32, %struct.sched_entity*, %struct.cfs_rq*, %struct.cfs_rq*, [32 x i8], %struct.sched_avg, [24 x i8] }
%struct.load_weight = type { i64, i32 }
%struct.sched_statistics = type { i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64 }
%struct.cfs_rq = type opaque
%struct.sched_avg = type { i64, i64, i32, i32, i64, i64 }
%struct.sched_rt_entity = type { %struct.list_head, i64, i64, i32, i16, i16, %struct.sched_rt_entity* }
%struct.task_group = type opaque
%struct.sched_dl_entity = type { %struct.rb_node, i64, i64, i64, i64, i64, i64, i32, i32, i32, i32, %struct.hrtimer }
%struct.hrtimer = type { %struct.timerqueue_node, i64, i32 (%struct.hrtimer*)*, %struct.hrtimer_clock_base*, i8, i8 }
%struct.timerqueue_node = type { %struct.rb_node, i64 }
%struct.hrtimer_clock_base = type { %struct.hrtimer_cpu_base*, i32, i32, %struct.timerqueue_head, i64 ()*, i64, [16 x i8] }
%struct.hrtimer_cpu_base = type { %struct.raw_spinlock, %struct.seqcount, %struct.hrtimer*, i32, i32, i32, i8, i8, i8, i64, %struct.hrtimer*, i32, i32, i32, i32, [4 x %struct.hrtimer_clock_base] }
%struct.timerqueue_head = type { %struct.rb_root, %struct.timerqueue_node* }
%struct.cpumask = type { [1 x i64] }
%struct.sched_info = type { i64, i64, i64, i64 }
%struct.plist_node = type { i32, %struct.list_head, %struct.list_head }
%struct.mm_struct = type { %struct.vm_area_struct*, %struct.rb_root, i32, i64 (%struct.file*, i64, i64, i64, i64)*, i64, i64, i64, i64, %struct.pgd_t*, %struct.atomic_t, %struct.atomic_t, %struct.atomic64_t, %struct.atomic64_t, i32, %struct.spinlock, %struct.rw_semaphore, %struct.list_head, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, [46 x i64], %struct.mm_rss_stat, %struct.linux_binfmt*, [1 x %struct.cpumask], %struct.mm_context_t, i64, %struct.core_state*, %struct.spinlock, %struct.kioctx_table*, %struct.user_namespace*, %struct.file*, %struct.mmu_notifier_mm*, i8, %struct.uprobes_state, %struct.atomic64_t, %struct.work_struct }
%struct.vm_area_struct = type { i64, i64, %struct.vm_area_struct*, %struct.vm_area_struct*, %struct.rb_node, i64, %struct.mm_struct*, %struct.pgprot, i64, %struct.anon.6, %struct.list_head, %struct.anon_vma*, %struct.vm_operations_struct*, i64, %struct.file*, i8*, %struct.mempolicy*, %struct.vm_userfaultfd_ctx }
%struct.pgprot = type { i64 }
%struct.anon.6 = type { %struct.rb_node, i64 }
%struct.anon_vma = type opaque
%struct.vm_userfaultfd_ctx = type {}
%struct.pgd_t = type { i64 }
%struct.mm_rss_stat = type { [4 x %struct.atomic64_t] }
%struct.linux_binfmt = type opaque
%struct.mm_context_t = type { %struct.ldt_struct*, i16, %struct.mutex, i8*, %struct.vdso_image*, %struct.atomic_t, i16, i16 }
%struct.ldt_struct = type opaque
%struct.vdso_image = type { i8*, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64 }
%struct.core_state = type { %struct.atomic_t, %struct.core_thread, %struct.completion }
%struct.core_thread = type { %struct.task_struct*, %struct.core_thread* }
%struct.completion = type { i32, %struct.__wait_queue_head }
%struct.kioctx_table = type opaque
%struct.mmu_notifier_mm = type opaque
%struct.uprobes_state = type {}
%struct.vmacache = type { i32, [4 x %struct.vm_area_struct*] }
%struct.task_rss_stat = type { i32, [4 x i32] }
%struct.restart_block = type { i64 (%struct.restart_block*)*, %union.anon.7 }
%union.anon.7 = type { %struct.anon.8 }
%struct.anon.8 = type { i32*, i32, i32, i32, i64, i32* }
%struct.pid_link = type { %struct.hlist_node, %struct.pid* }
%struct.pid = type { %struct.atomic_t, i32, [3 x %struct.hlist_head], %struct.callback_head, [1 x %struct.upid] }
%struct.upid = type { i32, %struct.pid_namespace*, %struct.hlist_node }
%struct.pid_namespace = type opaque
%struct.prev_cputime = type { i64, i64, %struct.raw_spinlock }
%struct.task_cputime = type { i64, i64, i64 }
%struct.nameidata = type opaque
%struct.sysv_sem = type { %struct.sem_undo_list* }
%struct.sem_undo_list = type opaque
%struct.sysv_shm = type { %struct.list_head }
%struct.fs_struct = type opaque
%struct.files_struct = type opaque
%struct.nsproxy = type opaque
%struct.signal_struct = type opaque
%struct.sighand_struct = type opaque
%struct.sigset_t = type { [1 x i64] }
%struct.sigpending = type { %struct.list_head, %struct.sigset_t }
%struct.audit_context = type opaque
%struct.seccomp = type { i32, %struct.seccomp_filter* }
%struct.seccomp_filter = type opaque
%struct.wake_q_node = type { %struct.wake_q_node* }
%struct.rb_root = type { %struct.rb_node* }
%struct.rt_mutex_waiter = type opaque
%struct.bio_list = type opaque
%struct.blk_plug = type opaque
%struct.reclaim_state = type opaque
%struct.io_context = type opaque
%struct.siginfo = type { i32, i32, i32, %union.anon.11 }
%union.anon.11 = type { %struct.anon.15, [80 x i8] }
%struct.anon.15 = type { i32, i32, i32, i64, i64 }
%struct.task_io_accounting = type { i64, i64, i64, i64, i64, i64, i64 }
%struct.nodemask_t = type { [1 x i64] }
%struct.css_set = type opaque
%struct.robust_list_head = type opaque
%struct.compat_robust_list_head = type opaque
%struct.futex_pi_state = type opaque
%struct.perf_event_context = type opaque
%struct.mempolicy = type opaque
%struct.tlbflush_unmap_batch = type { %struct.cpumask, i8, i8 }
%struct.pipe_inode_info = type opaque
%struct.page_frag = type { %struct.page*, i32, i32 }
%struct.task_delay_info = type opaque
%struct.vm_struct = type opaque
%struct.thread_struct = type { [3 x %struct.desc_struct], i64, i64, i16, i16, i16, i16, i32, i64, i64, [4 x %struct.perf_event*], i64, i64, i64, i64, i64, i64*, i64, i32, %struct.mm_segment_t, i8, [15 x i8], %struct.fpu }
%struct.desc_struct = type { %union.anon.21 }
%union.anon.21 = type { %struct.anon.22 }
%struct.anon.22 = type { i32, i32 }
%struct.perf_event = type opaque
%struct.mm_segment_t = type { i64 }
%struct.fpu = type { i32, i8, i8, [58 x i8], %union.fpregs_state }
%union.fpregs_state = type { %struct.xregs_state, [3520 x i8] }
%struct.xregs_state = type { %struct.fxregs_state, %struct.xstate_header, [0 x i8] }
%struct.fxregs_state = type { i16, i16, i16, i16, %union.anon.24, i32, i32, [32 x i32], [64 x i32], [12 x i32], %union.anon.27 }
%union.anon.24 = type { %struct.anon.25 }
%struct.anon.25 = type { i64, i64 }
%union.anon.27 = type { [12 x i32] }
%struct.xstate_header = type { i64, i64, [6 x i64] }
%struct.xattr_handler = type opaque
%struct.fscrypt_operations = type opaque
%struct.hlist_bl_head = type { %struct.hlist_bl_node* }
%struct.block_device = type { i32, i32, %struct.inode*, %struct.super_block*, %struct.mutex, i8*, i8*, i32, i8, %struct.list_head, %struct.block_device*, i32, %struct.hd_struct*, i32, i32, %struct.gendisk*, %struct.request_queue*, %struct.backing_dev_info*, %struct.list_head, i64, i32, %struct.mutex }
%struct.hd_struct = type opaque
%struct.gendisk = type opaque
%struct.request_queue = type opaque
%struct.backing_dev_info = type opaque
%struct.mtd_info = type opaque
%struct.hlist_node = type { %struct.hlist_node*, %struct.hlist_node** }
%struct.quota_info = type { i32, %struct.mutex, [3 x %struct.inode*], [3 x %struct.mem_dqinfo], [3 x %struct.quota_format_ops*] }
%struct.mem_dqinfo = type { %struct.quota_format_type*, i32, %struct.list_head, i64, i32, i32, i64, i64, i8* }
%struct.quota_format_type = type { i32, %struct.quota_format_ops*, %struct.module*, %struct.quota_format_type* }
%struct.quota_format_ops = type { i32 (%struct.super_block*, i32)*, i32 (%struct.super_block*, i32)*, i32 (%struct.super_block*, i32)*, i32 (%struct.super_block*, i32)*, i32 (%struct.dquot*)*, i32 (%struct.dquot*)*, i32 (%struct.dquot*)*, i32 (%struct.super_block*, %struct.kqid*)* }
%struct.sb_writers = type { i32, %struct.__wait_queue_head, [3 x %struct.percpu_rw_semaphore] }
%struct.percpu_rw_semaphore = type { %struct.rcu_sync, i32*, %struct.rw_semaphore, %struct.rcuwait, i32 }
%struct.rcu_sync = type { i32, i32, %struct.__wait_queue_head, i32, %struct.callback_head, i32 }
%struct.rcuwait = type { %struct.task_struct* }
%struct.shrinker = type { i64 (%struct.shrinker*, %struct.shrink_control*)*, i64 (%struct.shrinker*, %struct.shrink_control*)*, i32, i64, i64, %struct.list_head, %struct.atomic64_t* }
%struct.workqueue_struct = type opaque
%struct.hlist_head = type { %struct.hlist_node* }
%struct.user_namespace = type opaque
%struct.list_lru = type { %struct.list_lru_node* }
%struct.list_lru_node = type { %struct.spinlock, %struct.list_lru_one, [32 x i8] }
%struct.list_lru_one = type { %struct.list_head, i64 }
%struct.work_struct = type { %struct.atomic64_t, %struct.list_head, void (%struct.work_struct*)* }
%union.anon.44 = type { %struct.list_head }
%union.anon.45 = type { %struct.hlist_node }
%struct.inode = type { i16, i16, %struct.kuid_t, %struct.kgid_t, i32, %struct.posix_acl*, %struct.posix_acl*, %struct.inode_operations*, %struct.super_block*, %struct.address_space*, i8*, i64, %union.anon.37, i32, i64, %struct.timespec, %struct.timespec, %struct.timespec, %struct.spinlock, i16, i32, i64, i64, %struct.rw_semaphore, i64, i64, %struct.hlist_node, %struct.list_head, %struct.list_head, %struct.list_head, %struct.list_head, %union.anon.38, i64, %struct.atomic_t, %struct.atomic_t, %struct.atomic_t, %struct.file_operations*, %struct.file_lock_context*, %struct.address_space, %struct.list_head, %union.anon.41, i32, i32, %struct.hlist_head, i8* }
%struct.kgid_t = type { i32 }
%struct.posix_acl = type opaque
%struct.inode_operations = type { %struct.dentry* (%struct.inode*, %struct.dentry*, i32)*, i8* (%struct.dentry*, %struct.inode*, %struct.delayed_call*)*, i32 (%struct.inode*, i32)*, %struct.posix_acl* (%struct.inode*, i32)*, i32 (%struct.dentry*, i8*, i32)*, i32 (%struct.inode*, %struct.dentry*, i16, i1)*, i32 (%struct.dentry*, %struct.inode*, %struct.dentry*)*, i32 (%struct.inode*, %struct.dentry*)*, i32 (%struct.inode*, %struct.dentry*, i8*)*, i32 (%struct.inode*, %struct.dentry*, i16)*, i32 (%struct.inode*, %struct.dentry*)*, i32 (%struct.inode*, %struct.dentry*, i16, i32)*, i32 (%struct.inode*, %struct.dentry*, %struct.inode*, %struct.dentry*, i32)*, i32 (%struct.dentry*, %struct.iattr*)*, i32 (%struct.path*, %struct.kstat*, i32, i32)*, i64 (%struct.dentry*, i8*, i64)*, i32 (%struct.inode*, %struct.fiemap_extent_info*, i64, i64)*, i32 (%struct.inode*, %struct.timespec*, i32)*, i32 (%struct.inode*, %struct.dentry*, %struct.file*, i32, i16, i32*)*, i32 (%struct.inode*, %struct.dentry*, i16)*, i32 (%struct.inode*, %struct.posix_acl*, i32)*, [24 x i8] }
%struct.delayed_call = type { void (i8*)*, i8* }
%struct.iattr = type { i32, i16, %struct.kuid_t, %struct.kgid_t, i64, %struct.timespec, %struct.timespec, %struct.timespec, %struct.file* }
%struct.kstat = type { i32, i16, i32, i32, i64, i64, i64, i32, i32, %struct.kuid_t, %struct.kgid_t, i64, %struct.timespec, %struct.timespec, %struct.timespec, %struct.timespec, i64 }
%struct.fiemap_extent_info = type { i32, i32, i32, %struct.fiemap_extent* }
%struct.fiemap_extent = type { i64, i64, i64, [2 x i64], i32, [3 x i32] }
%union.anon.37 = type { i32 }
%struct.timespec = type { i64, i64 }
%union.anon.38 = type { %struct.callback_head }
%struct.file_lock_context = type { %struct.spinlock, %struct.list_head, %struct.list_head, %struct.list_head }
%struct.address_space = type { %struct.inode*, %struct.radix_tree_root, %struct.spinlock, %struct.atomic_t, %struct.rb_root, %struct.rw_semaphore, i64, i64, i64, %struct.address_space_operations*, i64, %struct.spinlock, i32, %struct.list_head, i8* }
%struct.radix_tree_root = type { i32, %struct.radix_tree_node* }
%struct.radix_tree_node = type { i8, i8, i8, i8, %struct.radix_tree_node*, %struct.radix_tree_root*, %union.anon.0, [64 x i8*], [3 x [1 x i64]] }
%union.anon.0 = type { %struct.list_head }
%struct.address_space_operations = type { i32 (%struct.page*, %struct.writeback_control*)*, i32 (%struct.file*, %struct.page*)*, i32 (%struct.address_space*, %struct.writeback_control*)*, i32 (%struct.page*)*, i32 (%struct.file*, %struct.address_space*, %struct.list_head*, i32)*, i32 (%struct.file*, %struct.address_space*, i64, i32, i32, %struct.page**, i8**)*, i32 (%struct.file*, %struct.address_space*, i64, i32, i32, %struct.page*, i8*)*, i64 (%struct.address_space*, i64)*, void (%struct.page*, i32, i32)*, i32 (%struct.page*, i32)*, void (%struct.page*)*, i64 (%struct.kiocb*, %struct.iov_iter*)*, i32 (%struct.address_space*, %struct.page*, %struct.page*, i32)*, i1 (%struct.page*, i32)*, void (%struct.page*)*, i32 (%struct.page*)*, i32 (%struct.page*, i64, i64)*, void (%struct.page*, i8*, i8*)*, i32 (%struct.address_space*, %struct.page*)*, i32 (%struct.swap_info_struct*, %struct.file*, i64*)*, void (%struct.file*)* }
%struct.kiocb = type { %struct.file*, i64, void (%struct.kiocb*, i64, i64)*, i8*, i32 }
%struct.iov_iter = type opaque
%struct.swap_info_struct = type opaque
%union.anon.41 = type { %struct.pipe_inode_info* }
%struct.file_operations = type { %struct.module*, i64 (%struct.file*, i64, i32)*, i64 (%struct.file*, i8*, i64, i64*)*, i64 (%struct.file*, i8*, i64, i64*)*, i64 (%struct.kiocb*, %struct.iov_iter*)*, i64 (%struct.kiocb*, %struct.iov_iter*)*, i32 (%struct.file*, %struct.dir_context*)*, i32 (%struct.file*, %struct.dir_context*)*, i32 (%struct.file*, %struct.poll_table_struct*)*, i64 (%struct.file*, i32, i64)*, i64 (%struct.file*, i32, i64)*, i32 (%struct.file*, %struct.vm_area_struct*)*, i32 (%struct.inode*, %struct.file*)*, i32 (%struct.file*, i8*)*, i32 (%struct.inode*, %struct.file*)*, i32 (%struct.file*, i64, i64, i32)*, i32 (i32, %struct.file*, i32)*, i32 (%struct.file*, i32, %struct.file_lock*)*, i64 (%struct.file*, %struct.page*, i32, i64, i64*, i32)*, i64 (%struct.file*, i64, i64, i64, i64)*, i32 (i32)*, i32 (%struct.file*, i32, %struct.file_lock*)*, i64 (%struct.pipe_inode_info*, %struct.file*, i64*, i64, i32)*, i64 (%struct.file*, i64*, %struct.pipe_inode_info*, i64, i32)*, i32 (%struct.file*, i64, %struct.file_lock**, i8**)*, i64 (%struct.file*, i32, i64, i64)*, void (%struct.seq_file*, %struct.file*)*, i64 (%struct.file*, i64, %struct.file*, i64, i64, i32)*, i32 (%struct.file*, i64, %struct.file*, i64, i64)*, i64 (%struct.file*, i64, i64, %struct.file*, i64)* }
%struct.dir_context = type { i32 (%struct.dir_context*, i8*, i32, i64, i64, i32)*, i64 }
%struct.poll_table_struct = type { void (%struct.file*, %struct.__wait_queue_head*, %struct.poll_table_struct*)*, i64 }
%struct.file_lock = type { %struct.file_lock*, %struct.list_head, %struct.hlist_node, %struct.list_head, i8*, i32, i8, i32, i32, %struct.pid*, %struct.__wait_queue_head, %struct.file*, i64, i64, %struct.fasync_struct*, i64, i64, %struct.file_lock_operations*, %struct.lock_manager_operations*, %union.anon.39 }
%struct.fasync_struct = type { %struct.spinlock, i32, i32, %struct.fasync_struct*, %struct.file*, %struct.callback_head }
%struct.file_lock_operations = type { void (%struct.file_lock*, %struct.file_lock*)*, void (%struct.file_lock*)* }
%struct.lock_manager_operations = type { i32 (%struct.file_lock*, %struct.file_lock*)*, i64 (%struct.file_lock*)*, i8* (i8*)*, void (i8*)*, void (%struct.file_lock*)*, i32 (%struct.file_lock*, i32)*, i1 (%struct.file_lock*)*, i32 (%struct.file_lock*, i32, %struct.list_head*)*, void (%struct.file_lock*, i8**)* }
%union.anon.39 = type { %struct.nfs_lock_info }
%struct.nfs_lock_info = type { i32, %struct.nlm_lockowner*, %struct.list_head }
%struct.nlm_lockowner = type opaque
%struct.atomic64_t = type { i64 }
%struct.fown_struct = type { %struct.rwlock_t, %struct.pid*, i32, %struct.kuid_t, %struct.kuid_t, i32 }
%struct.rwlock_t = type { %struct.qrwlock }
%struct.qrwlock = type { %struct.atomic_t, %struct.qspinlock }
%struct.cred = type { %struct.atomic_t, %struct.kuid_t, %struct.kgid_t, %struct.kuid_t, %struct.kgid_t, %struct.kuid_t, %struct.kgid_t, %struct.kuid_t, %struct.kgid_t, i32, %struct.kernel_cap_struct, %struct.kernel_cap_struct, %struct.kernel_cap_struct, %struct.kernel_cap_struct, %struct.kernel_cap_struct, i8, %struct.key*, %struct.key*, %struct.key*, %struct.key*, i8*, %struct.user_struct*, %struct.user_namespace*, %struct.group_info*, %struct.callback_head }
%struct.kernel_cap_struct = type { [2 x i32] }
%struct.key = type { %struct.atomic_t, i32, %union.anon.47, %struct.rw_semaphore, %struct.key_user*, i8*, %union.anon.48, i64, %struct.kuid_t, %struct.kgid_t, i32, i16, i16, i64, %union.anon.49, %union.anon.51, i32 (%struct.key*, %struct.key_type*, %union.key_payload*)* }
%union.anon.47 = type { %struct.rb_node }
%struct.key_user = type opaque
%union.anon.48 = type { i64 }
%union.anon.49 = type { %struct.keyring_index_key }
%struct.keyring_index_key = type { %struct.key_type*, i8*, i64 }
%struct.key_type = type opaque
%union.anon.51 = type { %union.key_payload }
%union.key_payload = type { [4 x i8*] }
%struct.user_struct = type { %struct.atomic_t, %struct.atomic_t, %struct.atomic_t, %struct.atomic64_t, i64, i64, i64, %struct.atomic64_t, %struct.key*, %struct.key*, %struct.hlist_node, %struct.kuid_t, %struct.atomic64_t }
%struct.group_info = type { %struct.atomic_t, i32, [0 x %struct.kgid_t] }
%struct.file_ra_state = type { i64, i32, i32, i32, i32, i64 }
%struct.seq_file = type { i8*, i64, i64, i64, i64, i64, i64, i64, %struct.mutex, %struct.seq_operations*, i32, %struct.file*, i8* }
%struct.seq_operations = type { i8* (%struct.seq_file*, i64*)*, void (%struct.seq_file*, i8*)*, i8* (%struct.seq_file*, i8*, i64*)*, i32 (%struct.seq_file*, i8*)* }
%struct.vm_operations_struct = type { void (%struct.vm_area_struct*)*, void (%struct.vm_area_struct*)*, i32 (%struct.vm_area_struct*)*, i32 (%struct.vm_fault*)*, i32 (%struct.vm_fault*, i32)*, void (%struct.vm_fault*, i64, i64)*, i32 (%struct.vm_fault*)*, i32 (%struct.vm_fault*)*, i32 (%struct.vm_area_struct*, i64, i8*, i32, i32)*, i8* (%struct.vm_area_struct*)*, i32 (%struct.vm_area_struct*, %struct.mempolicy*)*, %struct.mempolicy* (%struct.vm_area_struct*, i64)*, %struct.page* (%struct.vm_area_struct*, i64)* }
%struct.vm_fault = type { %struct.vm_area_struct*, i32, i32, i64, i64, %struct.pmd_t*, %struct.pud_t*, %struct.pte_t, %struct.page*, %struct.mem_cgroup*, %struct.page*, %struct.pte_t*, %struct.spinlock*, %struct.page* }
%struct.pmd_t = type { i64 }
%struct.pud_t = type { i64 }
%struct.pte_t = type { i64 }
%struct.kernfs_open_node = type opaque
%struct.kernfs_iattrs = type opaque
%struct.kref = type { %struct.refcount_struct }
%struct.refcount_struct = type { %struct.atomic_t }
%struct.module_param_attrs = type opaque
%struct.module_attribute = type { %struct.attribute, i64 (%struct.module_attribute*, %struct.module_kobject*, i8*)*, i64 (%struct.module_attribute*, %struct.module_kobject*, i8*, i64)*, void (%struct.module*, i8*)*, i32 (%struct.module*)*, void (%struct.module*)* }
%struct.mutex = type { %struct.atomic64_t, %struct.spinlock, %struct.optimistic_spin_queue, %struct.list_head }
%struct.kernel_symbol = type { i64, i8* }
%struct.exception_table_entry = type { i32, i32, i32 }
%struct.module_layout = type { i8*, i32, i32, i32, i32, %struct.mod_tree_node }
%struct.mod_tree_node = type { %struct.module*, %struct.latch_tree_node }
%struct.latch_tree_node = type { [2 x %struct.rb_node] }
%struct.mod_arch_specific = type {}
%struct.bug_entry = type { i32, i32, i16, i16 }
%struct.mod_kallsyms = type { %struct.elf64_sym*, i32, i8* }
%struct.elf64_sym = type { i32, i8, i8, i16, i64, i64 }
%struct.module_sect_attrs = type opaque
%struct.module_notes_attrs = type opaque
%struct.tracepoint = type { i8*, %struct.static_key, i32 ()*, void ()*, %struct.tracepoint_func* }
%struct.static_key = type { %struct.atomic_t }
%struct.tracepoint_func = type { i8*, i8*, i32 }
%struct.trace_event_call = type opaque
%struct.trace_enum_map = type opaque
%struct.list_head = type { %struct.list_head*, %struct.list_head* }
%struct.atomic_t = type { i32 }
%union.anon.46 = type { i8* }
%struct.pci_driver = type { %struct.list_head, i8*, %struct.pci_device_id*, i32 (%struct.pci_dev*, %struct.pci_device_id*)*, void (%struct.pci_dev*)*, i32 (%struct.pci_dev*, i32)*, i32 (%struct.pci_dev*, i32)*, i32 (%struct.pci_dev*)*, i32 (%struct.pci_dev*)*, void (%struct.pci_dev*)*, i32 (%struct.pci_dev*, i32)*, %struct.pci_error_handlers*, %struct.device_driver, %struct.pci_dynids }
%struct.pci_device_id = type { i32, i32, i32, i32, i32, i32, i64 }
%struct.pci_dev = type <{ %struct.list_head, %struct.pci_bus*, %struct.pci_bus*, i8*, %struct.proc_dir_entry*, %struct.pci_slot*, i32, i16, i16, i16, i16, i32, i8, i8, i16, i8, i8, i8, i8, i8, i8, i16, [4 x i8], i64*, %struct.pci_driver*, i64, %struct.device_dma_parameters, i32, i8, [3 x i8], i32, i32, %struct.pcie_link_state*, i32, [4 x i8], %struct.device, i32, i32, [11 x %struct.resource], i8, i32, i8, i16, %struct.atomic_t, [16 x i32], [4 x i8], %struct.hlist_head, %struct.bin_attribute*, i32, [4 x i8], [11 x %struct.bin_attribute*], [11 x %struct.bin_attribute*], %struct.attribute_group**, %struct.pci_vpd*, %union.anon.54, i16, i8, i8, %struct.atomic_t, i64, i64, i8* }>
%struct.pci_bus = type { %struct.list_head, %struct.pci_bus*, %struct.list_head, %struct.list_head, %struct.pci_dev*, %struct.list_head, [4 x %struct.resource*], %struct.list_head, %struct.resource, %struct.pci_ops*, %struct.msi_controller*, i8*, %struct.proc_dir_entry*, i8, i8, i8, i8, [48 x i8], i16, i16, %struct.device*, %struct.device, %struct.bin_attribute*, %struct.bin_attribute*, i8 }
%struct.resource = type { i64, i64, i8*, i64, i64, %struct.resource*, %struct.resource*, %struct.resource* }
%struct.pci_ops = type { i32 (%struct.pci_bus*)*, void (%struct.pci_bus*)*, i8* (%struct.pci_bus*, i32, i32)*, i32 (%struct.pci_bus*, i32, i32, i32, i32*)*, i32 (%struct.pci_bus*, i32, i32, i32, i32)* }
%struct.msi_controller = type opaque
%struct.proc_dir_entry = type opaque
%struct.pci_slot = type { %struct.pci_bus*, %struct.list_head, %struct.hotplug_slot*, i8, %struct.kobject }
%struct.hotplug_slot = type opaque
%struct.device_dma_parameters = type { i32, i64 }
%struct.pcie_link_state = type opaque
%struct.device = type { %struct.device*, %struct.device_private*, %struct.kobject, i8*, %struct.device_type*, %struct.mutex, %struct.bus_type*, %struct.device_driver*, i8*, i8*, %struct.dev_links_info, %struct.dev_pm_info, %struct.dev_pm_domain*, %struct.irq_domain*, %struct.list_head, i32, %struct.dma_map_ops*, i64*, i64, i64, %struct.device_dma_parameters*, %struct.list_head, %struct.dma_coherent_mem*, %struct.dev_archdata, %struct.device_node*, %struct.fwnode_handle*, i32, i32, %struct.spinlock, %struct.list_head, %struct.klist_node, %struct.class*, %struct.attribute_group**, void (%struct.device*)*, %struct.iommu_group*, %struct.iommu_fwspec*, i8 }
%struct.device_private = type opaque
%struct.device_type = type { i8*, %struct.attribute_group**, i32 (%struct.device*, %struct.kobj_uevent_env*)*, i8* (%struct.device*, i16*, %struct.kuid_t*, %struct.kgid_t*)*, void (%struct.device*)*, %struct.dev_pm_ops* }
%struct.dev_pm_ops = type { i32 (%struct.device*)*, void (%struct.device*)*, i32 (%struct.device*)*, i32 (%struct.device*)*, i32 (%struct.device*)*, i32 (%struct.device*)*, i32 (%struct.device*)*, i32 (%struct.device*)*, i32 (%struct.device*)*, i32 (%struct.device*)*, i32 (%struct.device*)*, i32 (%struct.device*)*, i32 (%struct.device*)*, i32 (%struct.device*)*, i32 (%struct.device*)*, i32 (%struct.device*)*, i32 (%struct.device*)*, i32 (%struct.device*)*, i32 (%struct.device*)*, i32 (%struct.device*)*, i32 (%struct.device*)*, i32 (%struct.device*)*, i32 (%struct.device*)* }
%struct.bus_type = type { i8*, i8*, %struct.device*, %struct.device_attribute*, %struct.attribute_group**, %struct.attribute_group**, %struct.attribute_group**, i32 (%struct.device*, %struct.device_driver*)*, i32 (%struct.device*, %struct.kobj_uevent_env*)*, i32 (%struct.device*)*, i32 (%struct.device*)*, void (%struct.device*)*, i32 (%struct.device*)*, i32 (%struct.device*)*, i32 (%struct.device*, i32)*, i32 (%struct.device*)*, i32 (%struct.device*)*, %struct.dev_pm_ops*, %struct.iommu_ops*, %struct.subsys_private*, %struct.lock_class_key }
%struct.device_attribute = type { %struct.attribute, i64 (%struct.device*, %struct.device_attribute*, i8*)*, i64 (%struct.device*, %struct.device_attribute*, i8*, i64)* }
%struct.iommu_ops = type opaque
%struct.subsys_private = type opaque
%struct.dev_links_info = type { %struct.list_head, %struct.list_head, i32 }
%struct.dev_pm_info = type { %struct.pm_message, i16, %struct.spinlock, %struct.list_head, %struct.completion, %struct.wakeup_source*, i8, %struct.timer_list, i64, %struct.work_struct, %struct.__wait_queue_head, %struct.wake_irq*, %struct.atomic_t, %struct.atomic_t, i16, i32, i32, i32, i32, i32, i64, i64, i64, i64, %struct.pm_subsys_data*, void (%struct.device*, i32)*, %struct.dev_pm_qos* }
%struct.pm_message = type { i32 }
%struct.wakeup_source = type { i8*, %struct.list_head, %struct.spinlock, %struct.wake_irq*, %struct.timer_list, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i8 }
%struct.timer_list = type { %struct.hlist_node, i64, void (i64)*, i64, i32 }
%struct.wake_irq = type opaque
%struct.pm_subsys_data = type { %struct.spinlock, i32, %struct.list_head }
%struct.dev_pm_qos = type { %struct.pm_qos_constraints, %struct.pm_qos_constraints, %struct.pm_qos_flags, %struct.dev_pm_qos_request*, %struct.dev_pm_qos_request*, %struct.dev_pm_qos_request* }
%struct.pm_qos_constraints = type { %struct.plist_head, i32, i32, i32, i32, %struct.blocking_notifier_head* }
%struct.plist_head = type { %struct.list_head }
%struct.blocking_notifier_head = type { %struct.rw_semaphore, %struct.notifier_block* }
%struct.notifier_block = type { i32 (%struct.notifier_block*, i64, i8*)*, %struct.notifier_block*, i32 }
%struct.pm_qos_flags = type { %struct.list_head, i32 }
%struct.dev_pm_qos_request = type { i32, %union.anon.53, %struct.device* }
%union.anon.53 = type { %struct.plist_node }
%struct.dev_pm_domain = type { %struct.dev_pm_ops, void (%struct.device*, i1)*, i32 (%struct.device*)*, void (%struct.device*)*, void (%struct.device*)* }
%struct.irq_domain = type opaque
%struct.dma_map_ops = type { i8* (%struct.device*, i64, i64*, i32, i64)*, void (%struct.device*, i64, i8*, i64, i64)*, i32 (%struct.device*, %struct.vm_area_struct*, i8*, i64, i64, i64)*, i32 (%struct.device*, %struct.sg_table*, i8*, i64, i64, i64)*, i64 (%struct.device*, %struct.page*, i64, i64, i32, i64)*, void (%struct.device*, i64, i64, i32, i64)*, i32 (%struct.device*, %struct.scatterlist*, i32, i32, i64)*, void (%struct.device*, %struct.scatterlist*, i32, i32, i64)*, i64 (%struct.device*, i64, i64, i32, i64)*, void (%struct.device*, i64, i64, i32, i64)*, void (%struct.device*, i64, i64, i32)*, void (%struct.device*, i64, i64, i32)*, void (%struct.device*, %struct.scatterlist*, i32, i32)*, void (%struct.device*, %struct.scatterlist*, i32, i32)*, i32 (%struct.device*, i64)*, i32 (%struct.device*, i64)*, i32 (%struct.device*, i64)*, i32 }
%struct.sg_table = type { %struct.scatterlist*, i32, i32 }
%struct.scatterlist = type { i64, i32, i32, i64, i32 }
%struct.dma_coherent_mem = type opaque
%struct.dev_archdata = type { i8* }
%struct.device_node = type opaque
%struct.fwnode_handle = type opaque
%struct.klist_node = type { i8*, %struct.list_head, %struct.kref }
%struct.class = type { i8*, %struct.module*, %struct.class_attribute*, %struct.attribute_group**, %struct.attribute_group**, %struct.kobject*, i32 (%struct.device*, %struct.kobj_uevent_env*)*, i8* (%struct.device*, i16*)*, void (%struct.class*)*, void (%struct.device*)*, i32 (%struct.device*, i32)*, i32 (%struct.device*)*, %struct.kobj_ns_type_operations*, i8* (%struct.device*)*, %struct.dev_pm_ops*, %struct.subsys_private* }
%struct.class_attribute = type { %struct.attribute, i64 (%struct.class*, %struct.class_attribute*, i8*)*, i64 (%struct.class*, %struct.class_attribute*, i8*, i64)* }
%struct.iommu_group = type opaque
%struct.iommu_fwspec = type opaque
%struct.bin_attribute = type { %struct.attribute, i64, i8*, i64 (%struct.file*, %struct.kobject*, %struct.bin_attribute*, i8*, i64, i64)*, i64 (%struct.file*, %struct.kobject*, %struct.bin_attribute*, i8*, i64, i64)*, i32 (%struct.file*, %struct.kobject*, %struct.bin_attribute*, %struct.vm_area_struct*)* }
%struct.attribute_group = type { i8*, i16 (%struct.kobject*, %struct.attribute*, i32)*, i16 (%struct.kobject*, %struct.bin_attribute*, i32)*, %struct.attribute**, %struct.bin_attribute** }
%struct.pci_vpd = type opaque
%union.anon.54 = type { %struct.pci_sriov* }
%struct.pci_sriov = type opaque
%struct.pci_error_handlers = type { i32 (%struct.pci_dev*, i32)*, i32 (%struct.pci_dev*)*, i32 (%struct.pci_dev*)*, void (%struct.pci_dev*, i1)*, void (%struct.pci_dev*)* }
%struct.device_driver = type { i8*, %struct.bus_type*, %struct.module*, i8*, i8, i32, %struct.of_device_id*, %struct.acpi_device_id*, i32 (%struct.device*)*, i32 (%struct.device*)*, void (%struct.device*)*, i32 (%struct.device*, i32)*, i32 (%struct.device*)*, %struct.attribute_group**, %struct.dev_pm_ops*, %struct.driver_private* }
%struct.of_device_id = type { [32 x i8], [32 x i8], [128 x i8], i8* }
%struct.acpi_device_id = type { [9 x i8], i64, i32, i32 }
%struct.driver_private = type opaque
%struct.pci_dynids = type { %struct.spinlock, %struct.list_head }
%struct.shortname_table = type { i32, i8* }
%struct.snd_pci_quirk = type { i16, i16, i16, i32 }
%struct.snd_device_ops = type { i32 (%struct.snd_device*)*, i32 (%struct.snd_device*)*, i32 (%struct.snd_device*)* }
%struct.snd_device = type { %struct.list_head, %struct.snd_card*, i32, i32, i8*, %struct.snd_device_ops* }
%struct.snd_card = type { i32, [16 x i8], [16 x i8], [32 x i8], [80 x i8], [32 x i8], [80 x i8], [128 x i8], %struct.module*, i8*, void (%struct.snd_card*)*, %struct.list_head, %struct.device, i32, %struct.rw_semaphore, %struct.rwlock_t, i32, i32, %struct.list_head, %struct.list_head, %struct.mutex, %struct.snd_info_entry*, %struct.snd_info_entry*, %struct.proc_dir_entry*, %struct.list_head, %struct.snd_shutdown_f_ops*, %struct.spinlock, i32, %struct.completion*, %struct.device*, %struct.device, [4 x %struct.attribute_group*], i8, i32, %struct.mutex, %struct.__wait_queue_head, %struct.snd_mixer_oss*, i32 }
%struct.snd_info_entry = type { i8*, i16, i64, i16, %union.anon.55, %struct.snd_info_entry*, %struct.snd_card*, %struct.module*, i8*, void (%struct.snd_info_entry*)*, %struct.proc_dir_entry*, %struct.mutex, %struct.list_head, %struct.list_head }
%union.anon.55 = type { %struct.snd_info_entry_text }
%struct.snd_info_entry_text = type { void (%struct.snd_info_entry*, %struct.snd_info_buffer*)*, void (%struct.snd_info_entry*, %struct.snd_info_buffer*)* }
%struct.snd_info_buffer = type { i8*, i32, i32, i32, i32, i32 }
%struct.snd_shutdown_f_ops = type opaque
%struct.snd_mixer_oss = type opaque
%struct.ich_reg_info = type { i32, i32 }
%struct.snd_ac97_bus_ops = type { void (%struct.snd_ac97*)*, void (%struct.snd_ac97*)*, void (%struct.snd_ac97*, i16, i16)*, i16 (%struct.snd_ac97*, i16)*, void (%struct.snd_ac97*)*, void (%struct.snd_ac97*)* }
%struct.snd_ac97 = type { %struct.snd_ac97_build_ops*, i8*, {}*, %struct.snd_ac97_bus*, %struct.pci_dev*, %struct.snd_info_entry*, %struct.snd_info_entry*, i16, i16, %struct.mutex, %struct.mutex, i16, i16, i32, i16, i16, i16, %struct.snd_ac97_res_table*, i32, i32, [6 x i32], i32, [128 x i16], [2 x i64], %union.anon.67, i8, i8, %struct.device, %struct.snd_ac97_gpio_priv*, [2 x %struct.snd_pcm_chmap*] }
%struct.snd_ac97_build_ops = type { i32 (%struct.snd_ac97*)*, i32 (%struct.snd_ac97*)*, i32 (%struct.snd_ac97*)*, i32 (%struct.snd_ac97*)*, {}*, {}*, {}* }
%struct.snd_ac97_bus = type { %struct.snd_ac97_bus_ops*, i8*, void (%struct.snd_ac97_bus*)*, %struct.snd_card*, i16, i8, i32, %struct.spinlock, [2 x [4 x i16]], i16, %struct.ac97_pcm*, [4 x %struct.snd_ac97*], %struct.snd_info_entry* }
%struct.ac97_pcm = type { %struct.snd_ac97_bus*, i8, i16, i16, i32, [2 x %struct.anon.69], i64 }
%struct.anon.69 = type { i16, [4 x i16], [4 x i8], [4 x %struct.snd_ac97*] }
%struct.snd_ac97_res_table = type { i16, i16 }
%union.anon.67 = type { i32, [28 x i8] }
%struct.snd_ac97_gpio_priv = type opaque
%struct.snd_pcm_chmap = type { %struct.snd_pcm*, i32, %struct.snd_kcontrol*, %struct.snd_pcm_chmap_elem*, i32, i32, i8* }
%struct.snd_pcm = type { %struct.snd_card*, %struct.list_head, i32, i32, i16, i16, [64 x i8], [80 x i8], [2 x %struct.snd_pcm_str], %struct.mutex, %struct.__wait_queue_head, i8*, void (%struct.snd_pcm*)*, i8, i8, %struct.snd_pcm_oss }
%struct.snd_pcm_str = type { i32, %struct.snd_pcm*, i32, i32, %struct.snd_pcm_substream*, %struct.snd_pcm_oss_stream, %struct.snd_info_entry*, %struct.snd_info_entry*, %struct.snd_kcontrol*, %struct.device }
%struct.snd_pcm_substream = type { %struct.snd_pcm*, %struct.snd_pcm_str*, i8*, i32, [32 x i8], i32, %struct.pm_qos_request, i64, %struct.snd_dma_buffer, i64, %struct.snd_pcm_ops*, %struct.snd_pcm_runtime*, %struct.snd_timer*, i8, %struct.snd_pcm_substream*, %struct.list_head, %struct.snd_pcm_group, %struct.snd_pcm_group*, i8*, i32, %struct.atomic_t, i32, void (%struct.snd_pcm_substream*)*, %struct.pid*, %struct.snd_pcm_oss_substream, %struct.snd_info_entry*, %struct.snd_info_entry*, %struct.snd_info_entry*, %struct.snd_info_entry*, %struct.snd_info_entry*, %struct.snd_info_entry*, %struct.snd_info_entry*, i8 }
%struct.pm_qos_request = type { %struct.plist_node, i32, %struct.delayed_work }
%struct.delayed_work = type { %struct.work_struct, %struct.timer_list, %struct.workqueue_struct*, i32 }
%struct.snd_dma_buffer = type { %struct.snd_dma_device, i8*, i64, i64, i8* }
%struct.snd_dma_device = type { i32, %struct.device* }
%struct.snd_pcm_ops = type { i32 (%struct.snd_pcm_substream*)*, i32 (%struct.snd_pcm_substream*)*, i32 (%struct.snd_pcm_substream*, i32, i8*)*, i32 (%struct.snd_pcm_substream*, %struct.snd_pcm_hw_params*)*, i32 (%struct.snd_pcm_substream*)*, i32 (%struct.snd_pcm_substream*)*, i32 (%struct.snd_pcm_substream*, i32)*, i64 (%struct.snd_pcm_substream*)*, i32 (%struct.snd_pcm_substream*, %struct.timespec*, %struct.timespec*, %struct.snd_pcm_audio_tstamp_config*, %struct.snd_pcm_audio_tstamp_report*)*, i32 (%struct.snd_pcm_substream*, i32, i64, i8*, i64)*, i32 (%struct.snd_pcm_substream*, i32, i64, i64)*, %struct.page* (%struct.snd_pcm_substream*, i64)*, i32 (%struct.snd_pcm_substream*, %struct.vm_area_struct*)*, i32 (%struct.snd_pcm_substream*)* }
%struct.snd_pcm_hw_params = type { i32, [3 x %struct.snd_mask], [5 x %struct.snd_mask], [12 x %struct.snd_interval], [9 x %struct.snd_interval], i32, i32, i32, i32, i32, i32, i64, [64 x i8] }
%struct.snd_mask = type { [8 x i32] }
%struct.snd_interval = type { i32, i32, i8 }
%struct.snd_pcm_audio_tstamp_config = type { i8, [3 x i8] }
%struct.snd_pcm_audio_tstamp_report = type { i8, i32 }
%struct.snd_pcm_runtime = type { %struct.snd_pcm_substream*, %struct.timespec, i8, i32, i64, i64, i64, i64, i64, i64, i64, i32, i32, i32, i32, i32, i64, i32, i64, i64, i64, i32, i32, i32, i32, i32, i8, i32, i32, i64, i64, i64, i64, i64, i64, i64, %union.snd_pcm_sync_id, %struct.snd_pcm_mmap_status*, %struct.snd_pcm_mmap_control*, i64, %struct.__wait_queue_head, %struct.__wait_queue_head, %struct.fasync_struct*, i8*, void (%struct.snd_pcm_runtime*)*, %struct.snd_pcm_hardware, %struct.snd_pcm_hw_constraints, i32, i32, i8*, i64, i64, %struct.snd_dma_buffer*, %struct.snd_pcm_audio_tstamp_config, %struct.snd_pcm_audio_tstamp_report, %struct.timespec, %struct.snd_pcm_oss_runtime }
%union.snd_pcm_sync_id = type { [4 x i32] }
%struct.snd_pcm_mmap_status = type { i32, i32, i64, %struct.timespec, i32, %struct.timespec }
%struct.snd_pcm_mmap_control = type { i64, i64 }
%struct.snd_pcm_hardware = type { i32, i64, i32, i32, i32, i32, i32, i64, i64, i64, i32, i32, i64 }
%struct.snd_pcm_hw_constraints = type { [3 x %struct.snd_mask], [12 x %struct.snd_interval], i32, i32, %struct.snd_pcm_hw_rule* }
%struct.snd_pcm_hw_rule = type { i32, i32, [4 x i32], i32 (%struct.snd_pcm_hw_params*, %struct.snd_pcm_hw_rule*)*, i8* }
%struct.snd_pcm_oss_runtime = type { i8, i32, i32, i32, i32, i32, i32, i64, i64, i64, i32, i64, i64, i64, i8*, i64, %struct.mutex, %struct.snd_pcm_plugin*, %struct.snd_pcm_plugin*, i32 }
%struct.snd_pcm_plugin = type opaque
%struct.snd_timer = type opaque
%struct.snd_pcm_group = type { %struct.spinlock, %struct.mutex, %struct.list_head, i32 }
%struct.snd_pcm_oss_substream = type { i8, %struct.snd_pcm_oss_setup }
%struct.snd_pcm_oss_setup = type { i8*, i8, i32, i32, %struct.snd_pcm_oss_setup* }
%struct.snd_pcm_oss_stream = type { %struct.snd_pcm_oss_setup*, %struct.mutex, %struct.snd_info_entry* }
%struct.snd_pcm_oss = type { i32, i32 }
%struct.snd_kcontrol = type { %struct.list_head, %struct.snd_ctl_elem_id, i32, i32 (%struct.snd_kcontrol*, %struct.snd_ctl_elem_info*)*, i32 (%struct.snd_kcontrol*, %struct.snd_ctl_elem_value*)*, i32 (%struct.snd_kcontrol*, %struct.snd_ctl_elem_value*)*, %union.anon.66, i64, i8*, void (%struct.snd_kcontrol*)*, [0 x %struct.snd_kcontrol_volatile] }
%struct.snd_ctl_elem_id = type { i32, i32, i32, i32, [44 x i8], i32 }
%struct.snd_ctl_elem_info = type { %struct.snd_ctl_elem_id, i32, i32, i32, i32, %union.anon.56, %union.anon.60, [56 x i8] }
%union.anon.56 = type { %struct.anon.59, [40 x i8] }
%struct.anon.59 = type { i32, i32, [64 x i8], i64, i32 }
%union.anon.60 = type { i16* }
%struct.snd_ctl_elem_value = type { %struct.snd_ctl_elem_id, i8, %union.anon.61, %struct.timespec, [112 x i8] }
%union.anon.61 = type { %union.anon.62 }
%union.anon.62 = type { [128 x i64] }
%union.anon.66 = type { i32 (%struct.snd_kcontrol*, i32, i32, i32*)* }
%struct.snd_kcontrol_volatile = type { %struct.snd_ctl_file*, i32 }
%struct.snd_ctl_file = type { %struct.list_head, %struct.snd_card*, %struct.pid*, [2 x i32], %struct.__wait_queue_head, %struct.spinlock, %struct.fasync_struct*, i32, %struct.list_head }
%struct.snd_pcm_chmap_elem = type { i8, [15 x i8] }
%struct.ac97_quirk = type { i16, i16, i16, i32, i8*, i32 }
%struct.ich_pcm_table = type { i8*, %struct.snd_pcm_ops*, %struct.snd_pcm_ops*, i64, i64, i32 }
%struct.snd_pcm_hw_constraint_list = type { i32*, i32, i32 }
%struct.intel8x0 = type { i32, i32, i8*, i8*, %struct.pci_dev*, %struct.snd_card*, i32, [6 x %struct.snd_pcm*], [6 x %struct.ichdev], i16, i32, i32, %struct.snd_ac97_bus*, [3 x %struct.snd_ac97*], [3 x i32], i32, i32, i32*, i32, i32, %struct.spinlock, i32, %struct.snd_dma_buffer, i32, i32 }
%struct.ichdev = type { i32, i64, i32*, i32, %struct.snd_pcm_substream*, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, %struct.ac97_pcm*, i32, i8 }
%struct.snd_ac97_template = type { i8*, void (%struct.snd_ac97*)*, %struct.pci_dev*, i16, i16, i32, %struct.snd_ac97_res_table* }
%union.anon.70 = type { i8 }

@__param_str_index = internal constant [15 x i8] c"intel8x0.index\00", align 1
@param_ops_int = external constant %struct.kernel_param_ops, align 8
@index = internal global i32 -1, align 4
@__param_index = internal constant %struct.kernel_param { i8* getelementptr inbounds ([15 x i8], [15 x i8]* @__param_str_index, i32 0, i32 0), %struct.module* null, %struct.kernel_param_ops* @param_ops_int, i16 292, i8 -1, i8 0, %union.anon.46 { i8* bitcast (i32* @index to i8*) } }, section "__param", align 8
@__param_str_id = internal constant [12 x i8] c"intel8x0.id\00", align 1
@param_ops_charp = external constant %struct.kernel_param_ops, align 8
@id = internal global i8* null, align 8
@__param_id = internal constant %struct.kernel_param { i8* getelementptr inbounds ([12 x i8], [12 x i8]* @__param_str_id, i32 0, i32 0), %struct.module* null, %struct.kernel_param_ops* @param_ops_charp, i16 292, i8 -1, i8 0, %union.anon.46 { i8* bitcast (i8** @id to i8*) } }, section "__param", align 8
@__param_str_ac97_clock = internal constant [20 x i8] c"intel8x0.ac97_clock\00", align 16
@ac97_clock = internal global i32 0, align 4
@__param_ac97_clock = internal constant %struct.kernel_param { i8* getelementptr inbounds ([20 x i8], [20 x i8]* @__param_str_ac97_clock, i32 0, i32 0), %struct.module* null, %struct.kernel_param_ops* @param_ops_int, i16 292, i8 -1, i8 0, %union.anon.46 { i8* bitcast (i32* @ac97_clock to i8*) } }, section "__param", align 8
@__param_str_ac97_quirk = internal constant [20 x i8] c"intel8x0.ac97_quirk\00", align 16
@ac97_quirk = internal global i8* null, align 8
@__param_ac97_quirk = internal constant %struct.kernel_param { i8* getelementptr inbounds ([20 x i8], [20 x i8]* @__param_str_ac97_quirk, i32 0, i32 0), %struct.module* null, %struct.kernel_param_ops* @param_ops_charp, i16 292, i8 -1, i8 0, %union.anon.46 { i8* bitcast (i8** @ac97_quirk to i8*) } }, section "__param", align 8
@__param_str_buggy_semaphore = internal constant [25 x i8] c"intel8x0.buggy_semaphore\00", align 16
@param_ops_bool = external constant %struct.kernel_param_ops, align 8
@buggy_semaphore = internal global i8 0, align 1
@__param_buggy_semaphore = internal constant %struct.kernel_param { i8* getelementptr inbounds ([25 x i8], [25 x i8]* @__param_str_buggy_semaphore, i32 0, i32 0), %struct.module* null, %struct.kernel_param_ops* @param_ops_bool, i16 292, i8 -1, i8 0, %union.anon.46 { i8* @buggy_semaphore } }, section "__param", align 8
@__param_str_buggy_irq = internal constant [19 x i8] c"intel8x0.buggy_irq\00", align 16
@param_ops_bint = external constant %struct.kernel_param_ops, align 8
@buggy_irq = internal global i32 -1, align 4
@__param_buggy_irq = internal constant %struct.kernel_param { i8* getelementptr inbounds ([19 x i8], [19 x i8]* @__param_str_buggy_irq, i32 0, i32 0), %struct.module* null, %struct.kernel_param_ops* @param_ops_bint, i16 292, i8 -1, i8 0, %union.anon.46 { i8* bitcast (i32* @buggy_irq to i8*) } }, section "__param", align 8
@__param_str_xbox = internal constant [14 x i8] c"intel8x0.xbox\00", align 1
@xbox = internal global i8 0, align 1
@__param_xbox = internal constant %struct.kernel_param { i8* getelementptr inbounds ([14 x i8], [14 x i8]* @__param_str_xbox, i32 0, i32 0), %struct.module* null, %struct.kernel_param_ops* @param_ops_bool, i16 292, i8 -1, i8 0, %union.anon.46 { i8* @xbox } }, section "__param", align 8
@__param_str_spdif_aclink = internal constant [22 x i8] c"intel8x0.spdif_aclink\00", align 16
@spdif_aclink = internal global i32 -1, align 4
@__param_spdif_aclink = internal constant %struct.kernel_param { i8* getelementptr inbounds ([22 x i8], [22 x i8]* @__param_str_spdif_aclink, i32 0, i32 0), %struct.module* null, %struct.kernel_param_ops* @param_ops_int, i16 292, i8 -1, i8 0, %union.anon.46 { i8* bitcast (i32* @spdif_aclink to i8*) } }, section "__param", align 8
@__param_str_inside_vm = internal constant [19 x i8] c"intel8x0.inside_vm\00", align 16
@inside_vm = internal global i32 -1, align 4
@__param_inside_vm = internal constant %struct.kernel_param { i8* getelementptr inbounds ([19 x i8], [19 x i8]* @__param_str_inside_vm, i32 0, i32 0), %struct.module* null, %struct.kernel_param_ops* @param_ops_bint, i16 292, i8 -1, i8 0, %union.anon.46 { i8* bitcast (i32* @inside_vm to i8*) } }, section "__param", align 8
@__param_str_enable = internal constant [16 x i8] c"intel8x0.enable\00", align 16
@enable = internal global i8 0, align 1
@__param_enable = internal constant %struct.kernel_param { i8* getelementptr inbounds ([16 x i8], [16 x i8]* @__param_str_enable, i32 0, i32 0), %struct.module* null, %struct.kernel_param_ops* @param_ops_bool, i16 292, i8 -1, i8 0, %union.anon.46 { i8* @enable } }, section "__param", align 8
@__param_str_joystick = internal constant [18 x i8] c"intel8x0.joystick\00", align 16
@joystick = internal global i32 0, align 4
@__param_joystick = internal constant %struct.kernel_param { i8* getelementptr inbounds ([18 x i8], [18 x i8]* @__param_str_joystick, i32 0, i32 0), %struct.module* null, %struct.kernel_param_ops* @param_ops_int, i16 292, i8 -1, i8 0, %union.anon.46 { i8* bitcast (i32* @joystick to i8*) } }, section "__param", align 8
@__initcall_intel8x0_driver_init6 = internal global i32 ()* @intel8x0_driver_init, section ".initcall6.init", align 8
@intel8x0_driver = internal global %struct.pci_driver { %struct.list_head zeroinitializer, i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str, i32 0, i32 0), %struct.pci_device_id* getelementptr inbounds ([24 x %struct.pci_device_id], [24 x %struct.pci_device_id]* @snd_intel8x0_ids, i32 0, i32 0), i32 (%struct.pci_dev*, %struct.pci_device_id*)* @snd_intel8x0_probe, void (%struct.pci_dev*)* @snd_intel8x0_remove, i32 (%struct.pci_dev*, i32)* null, i32 (%struct.pci_dev*, i32)* null, i32 (%struct.pci_dev*)* null, i32 (%struct.pci_dev*)* null, void (%struct.pci_dev*)* null, i32 (%struct.pci_dev*, i32)* null, %struct.pci_error_handlers* null, %struct.device_driver { i8* null, %struct.bus_type* null, %struct.module* null, i8* null, i8 0, i32 0, %struct.of_device_id* null, %struct.acpi_device_id* null, i32 (%struct.device*)* null, i32 (%struct.device*)* null, void (%struct.device*)* null, i32 (%struct.device*, i32)* null, i32 (%struct.device*)* null, %struct.attribute_group** null, %struct.dev_pm_ops* @intel8x0_pm, %struct.driver_private* null }, %struct.pci_dynids zeroinitializer }, align 8
@__exitcall_intel8x0_driver_exit = internal global void ()* @intel8x0_driver_exit, section ".exitcall.exit", align 8
@.str = private unnamed_addr constant [9 x i8] c"intel8x0\00", align 1
@snd_intel8x0_ids = internal constant [24 x %struct.pci_device_id] [%struct.pci_device_id { i32 32902, i32 9237, i32 -1, i32 -1, i32 0, i32 0, i64 0 }, %struct.pci_device_id { i32 32902, i32 9253, i32 -1, i32 -1, i32 0, i32 0, i64 0 }, %struct.pci_device_id { i32 32902, i32 9285, i32 -1, i32 -1, i32 0, i32 0, i64 0 }, %struct.pci_device_id { i32 32902, i32 9349, i32 -1, i32 -1, i32 0, i32 0, i64 0 }, %struct.pci_device_id { i32 32902, i32 9413, i32 -1, i32 -1, i32 0, i32 0, i64 1 }, %struct.pci_device_id { i32 32902, i32 9429, i32 -1, i32 -1, i32 0, i32 0, i64 1 }, %struct.pci_device_id { i32 32902, i32 9638, i32 -1, i32 -1, i32 0, i32 0, i64 1 }, %struct.pci_device_id { i32 32902, i32 9838, i32 -1, i32 -1, i32 0, i32 0, i64 1 }, %struct.pci_device_id { i32 32902, i32 10206, i32 -1, i32 -1, i32 0, i32 0, i64 1 }, %struct.pci_device_id { i32 32902, i32 9880, i32 -1, i32 -1, i32 0, i32 0, i64 1 }, %struct.pci_device_id { i32 32902, i32 29077, i32 -1, i32 -1, i32 0, i32 0, i64 0 }, %struct.pci_device_id { i32 4153, i32 28690, i32 -1, i32 -1, i32 0, i32 0, i64 2 }, %struct.pci_device_id { i32 4318, i32 433, i32 -1, i32 -1, i32 0, i32 0, i64 4 }, %struct.pci_device_id { i32 4318, i32 58, i32 -1, i32 -1, i32 0, i32 0, i64 4 }, %struct.pci_device_id { i32 4318, i32 106, i32 -1, i32 -1, i32 0, i32 0, i64 4 }, %struct.pci_device_id { i32 4318, i32 89, i32 -1, i32 -1, i32 0, i32 0, i64 4 }, %struct.pci_device_id { i32 4318, i32 138, i32 -1, i32 -1, i32 0, i32 0, i64 4 }, %struct.pci_device_id { i32 4318, i32 218, i32 -1, i32 -1, i32 0, i32 0, i64 4 }, %struct.pci_device_id { i32 4318, i32 234, i32 -1, i32 -1, i32 0, i32 0, i64 4 }, %struct.pci_device_id { i32 4318, i32 619, i32 -1, i32 -1, i32 0, i32 0, i64 4 }, %struct.pci_device_id { i32 4130, i32 29805, i32 -1, i32 -1, i32 0, i32 0, i64 0 }, %struct.pci_device_id { i32 4130, i32 29765, i32 -1, i32 -1, i32 0, i32 0, i64 0 }, %struct.pci_device_id { i32 4281, i32 21589, i32 -1, i32 -1, i32 0, i32 0, i64 3 }, %struct.pci_device_id zeroinitializer], align 16
@intel8x0_pm = internal constant %struct.dev_pm_ops { i32 (%struct.device*)* null, void (%struct.device*)* null, i32 (%struct.device*)* @intel8x0_suspend, i32 (%struct.device*)* @intel8x0_resume, i32 (%struct.device*)* @intel8x0_suspend, i32 (%struct.device*)* @intel8x0_resume, i32 (%struct.device*)* @intel8x0_suspend, i32 (%struct.device*)* @intel8x0_resume, i32 (%struct.device*)* null, i32 (%struct.device*)* null, i32 (%struct.device*)* null, i32 (%struct.device*)* null, i32 (%struct.device*)* null, i32 (%struct.device*)* null, i32 (%struct.device*)* null, i32 (%struct.device*)* null, i32 (%struct.device*)* null, i32 (%struct.device*)* null, i32 (%struct.device*)* null, i32 (%struct.device*)* null, i32 (%struct.device*)* null, i32 (%struct.device*)* null, i32 (%struct.device*)* null }, align 8
@.str.1 = private unnamed_addr constant [4 x i8] c"ICH\00", align 1
@.str.2 = private unnamed_addr constant [7 x i8] c"NFORCE\00", align 1
@.str.3 = private unnamed_addr constant [5 x i8] c"ICH4\00", align 1
@.str.4 = private unnamed_addr constant [10 x i8] c"Intel ICH\00", align 1
@shortnames = internal global [23 x %struct.shortname_table] [%struct.shortname_table { i32 9237, i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.6, i32 0, i32 0) }, %struct.shortname_table { i32 9253, i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.7, i32 0, i32 0) }, %struct.shortname_table { i32 9285, i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.8, i32 0, i32 0) }, %struct.shortname_table { i32 29077, i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.9, i32 0, i32 0) }, %struct.shortname_table { i32 9349, i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.10, i32 0, i32 0) }, %struct.shortname_table { i32 9413, i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.11, i32 0, i32 0) }, %struct.shortname_table { i32 9429, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.12, i32 0, i32 0) }, %struct.shortname_table { i32 9638, i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.13, i32 0, i32 0) }, %struct.shortname_table { i32 9838, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.14, i32 0, i32 0) }, %struct.shortname_table { i32 10206, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.15, i32 0, i32 0) }, %struct.shortname_table { i32 9880, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.16, i32 0, i32 0) }, %struct.shortname_table { i32 28690, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.17, i32 0, i32 0) }, %struct.shortname_table { i32 433, i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.18, i32 0, i32 0) }, %struct.shortname_table { i32 106, i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.19, i32 0, i32 0) }, %struct.shortname_table { i32 218, i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.20, i32 0, i32 0) }, %struct.shortname_table { i32 234, i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.21, i32 0, i32 0) }, %struct.shortname_table { i32 89, i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.22, i32 0, i32 0) }, %struct.shortname_table { i32 138, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.23, i32 0, i32 0) }, %struct.shortname_table { i32 58, i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.24, i32 0, i32 0) }, %struct.shortname_table { i32 29805, i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.25, i32 0, i32 0) }, %struct.shortname_table { i32 29765, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.26, i32 0, i32 0) }, %struct.shortname_table { i32 21589, i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.27, i32 0, i32 0) }, %struct.shortname_table zeroinitializer], align 16
@.str.5 = private unnamed_addr constant [21 x i8] c"%s with %s at irq %i\00", align 1
@spdif_aclink_defaults = internal global [2 x %struct.snd_pci_quirk] [%struct.snd_pci_quirk { i16 5243, i16 7194, i16 -1, i32 1 }, %struct.snd_pci_quirk zeroinitializer], align 16
@.str.6 = private unnamed_addr constant [18 x i8] c"Intel 82801AA-ICH\00", align 1
@.str.7 = private unnamed_addr constant [19 x i8] c"Intel 82901AB-ICH0\00", align 1
@.str.8 = private unnamed_addr constant [19 x i8] c"Intel 82801BA-ICH2\00", align 1
@.str.9 = private unnamed_addr constant [12 x i8] c"Intel 440MX\00", align 1
@.str.10 = private unnamed_addr constant [19 x i8] c"Intel 82801CA-ICH3\00", align 1
@.str.11 = private unnamed_addr constant [19 x i8] c"Intel 82801DB-ICH4\00", align 1
@.str.12 = private unnamed_addr constant [11 x i8] c"Intel ICH5\00", align 1
@.str.13 = private unnamed_addr constant [14 x i8] c"Intel 6300ESB\00", align 1
@.str.14 = private unnamed_addr constant [11 x i8] c"Intel ICH6\00", align 1
@.str.15 = private unnamed_addr constant [11 x i8] c"Intel ICH7\00", align 1
@.str.16 = private unnamed_addr constant [11 x i8] c"Intel ESB2\00", align 1
@.str.17 = private unnamed_addr constant [11 x i8] c"SiS SI7012\00", align 1
@.str.18 = private unnamed_addr constant [14 x i8] c"NVidia nForce\00", align 1
@.str.19 = private unnamed_addr constant [15 x i8] c"NVidia nForce2\00", align 1
@.str.20 = private unnamed_addr constant [15 x i8] c"NVidia nForce3\00", align 1
@.str.21 = private unnamed_addr constant [12 x i8] c"NVidia CK8S\00", align 1
@.str.22 = private unnamed_addr constant [13 x i8] c"NVidia CK804\00", align 1
@.str.23 = private unnamed_addr constant [11 x i8] c"NVidia CK8\00", align 1
@.str.24 = private unnamed_addr constant [13 x i8] c"NVidia MCP04\00", align 1
@.str.25 = private unnamed_addr constant [12 x i8] c"AMD AMD8111\00", align 1
@.str.26 = private unnamed_addr constant [11 x i8] c"AMD AMD768\00", align 1
@.str.27 = private unnamed_addr constant [10 x i8] c"ALi M5455\00", align 1
@snd_intel8x0_create.ops = internal global %struct.snd_device_ops { i32 (%struct.snd_device*)* @snd_intel8x0_dev_free, i32 (%struct.snd_device*)* null, i32 (%struct.snd_device*)* null }, align 8
@snd_intel8x0_create.bdbars = internal global [5 x i32] [i32 3, i32 6, i32 3, i32 6, i32 4], align 16
@snd_intel8x0_create.intel_regs = internal global [6 x %struct.ich_reg_info] [%struct.ich_reg_info { i32 32, i32 0 }, %struct.ich_reg_info { i32 64, i32 16 }, %struct.ich_reg_info { i32 128, i32 32 }, %struct.ich_reg_info { i32 16777216, i32 64 }, %struct.ich_reg_info { i32 33554432, i32 80 }, %struct.ich_reg_info { i32 67108864, i32 96 }], align 16
@snd_intel8x0_create.nforce_regs = internal global [4 x %struct.ich_reg_info] [%struct.ich_reg_info { i32 32, i32 0 }, %struct.ich_reg_info { i32 64, i32 16 }, %struct.ich_reg_info { i32 128, i32 32 }, %struct.ich_reg_info { i32 16, i32 112 }], align 16
@snd_intel8x0_create.ali_regs = internal global [6 x %struct.ich_reg_info] [%struct.ich_reg_info { i32 65536, i32 64 }, %struct.ich_reg_info { i32 131072, i32 80 }, %struct.ich_reg_info { i32 262144, i32 96 }, %struct.ich_reg_info { i32 524288, i32 112 }, %struct.ich_reg_info { i32 4194304, i32 160 }, %struct.ich_reg_info { i32 8388608, i32 176 }], align 16
@.str.28 = private unnamed_addr constant [29 x i8] c"AC'97 space ioremap problem\0A\00", align 1
@.str.29 = private unnamed_addr constant [34 x i8] c"Controller space ioremap problem\0A\00", align 1
@.str.30 = private unnamed_addr constant [36 x i8] c"cannot allocate buffer descriptors\0A\00", align 1
@ich_codec_bits = internal global [3 x i32] [i32 256, i32 512, i32 268435456], align 4
@sis_codec_bits = internal global [3 x i32] [i32 256, i32 512, i32 262144], align 4
@.str.31 = private unnamed_addr constant [23 x i8] c"unable to grab IRQ %d\0A\00", align 1
@.str.32 = private unnamed_addr constant [19 x i8] c"enable (forced) VM\00", align 1
@.str.33 = private unnamed_addr constant [20 x i8] c"disable (forced) VM\00", align 1
@.str.34 = private unnamed_addr constant [11 x i8] c"enable KVM\00", align 1
@.str.35 = private unnamed_addr constant [20 x i8] c"enable Parallels VM\00", align 1
@.str.36 = private unnamed_addr constant [17 x i8] c"%s optimization\0A\00", align 1
@.str.37 = private unnamed_addr constant [28 x i8] c"reset of registers failed?\0A\00", align 1
@jiffies = external global i64, align 8
@.str.38 = private unnamed_addr constant [40 x i8] c"codec_ready: codec is not ready [0x%x]\0A\00", align 1
@.str.39 = private unnamed_addr constant [44 x i8] c"AC'97 warm reset still in progress? [0x%x]\0A\00", align 1
@.str.40 = private unnamed_addr constant [21 x i8] c"AC'97 reset failed.\0A\00", align 1
@snd_intel8x0_mixer.standard_bus_ops = internal global %struct.snd_ac97_bus_ops { void (%struct.snd_ac97*)* null, void (%struct.snd_ac97*)* null, void (%struct.snd_ac97*, i16, i16)* @snd_intel8x0_codec_write, i16 (%struct.snd_ac97*, i16)* @snd_intel8x0_codec_read, void (%struct.snd_ac97*)* null, void (%struct.snd_ac97*)* null }, align 8
@snd_intel8x0_mixer.ali_bus_ops = internal global %struct.snd_ac97_bus_ops { void (%struct.snd_ac97*)* null, void (%struct.snd_ac97*)* null, void (%struct.snd_ac97*, i16, i16)* @snd_intel8x0_ali_codec_write, i16 (%struct.snd_ac97*, i16)* @snd_intel8x0_ali_codec_read, void (%struct.snd_ac97*)* null, void (%struct.snd_ac97*)* null }, align 8
@.str.41 = private unnamed_addr constant [32 x i8] c"Unable to initialize codec #%d\0A\00", align 1
@ac97_quirks = internal constant [66 x %struct.ac97_quirk] [%struct.ac97_quirk { i16 3601, i16 14, i16 0, i32 0, i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.48, i32 0, i32 0), i32 1 }, %struct.ac97_quirk { i16 3601, i16 138, i16 0, i32 0, i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.49, i32 0, i32 0), i32 1 }, %struct.ac97_quirk { i16 3601, i16 184, i16 0, i32 0, i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.50, i32 0, i32 0), i32 1 }, %struct.ac97_quirk { i16 3601, i16 2144, i16 0, i32 0, i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.51, i32 0, i32 0), i32 7 }, %struct.ac97_quirk { i16 4116, i16 1332, i16 0, i32 0, i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.52, i32 0, i32 0), i32 6 }, %struct.ac97_quirk { i16 4116, i16 7936, i16 0, i32 0, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.53, i32 0, i32 0), i32 5 }, %struct.ac97_quirk { i16 4116, i16 615, i16 0, i32 0, i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.54, i32 0, i32 0), i32 1 }, %struct.ac97_quirk { i16 4133, i16 130, i16 0, i32 0, i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.55, i32 0, i32 0), i32 1 }, %struct.ac97_quirk { i16 4133, i16 131, i16 0, i32 0, i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.56, i32 0, i32 0), i32 1 }, %struct.ac97_quirk { i16 4136, i16 216, i16 0, i32 0, i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.57, i32 0, i32 0), i32 1 }, %struct.ac97_quirk { i16 4136, i16 269, i16 0, i32 0, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.58, i32 0, i32 0), i32 1 }, %struct.ac97_quirk { i16 4136, i16 294, i16 0, i32 0, i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.59, i32 0, i32 0), i32 1 }, %struct.ac97_quirk { i16 4136, i16 300, i16 0, i32 0, i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.60, i32 0, i32 0), i32 1 }, %struct.ac97_quirk { i16 4136, i16 301, i16 0, i32 0, i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.61, i32 0, i32 0), i32 1 }, %struct.ac97_quirk { i16 4136, i16 327, i16 0, i32 0, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.58, i32 0, i32 0), i32 1 }, %struct.ac97_quirk { i16 4136, i16 337, i16 0, i32 0, i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.62, i32 0, i32 0), i32 1 }, %struct.ac97_quirk { i16 4136, i16 334, i16 0, i32 0, i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.63, i32 0, i32 0), i32 1 }, %struct.ac97_quirk { i16 4136, i16 355, i16 0, i32 0, i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.64, i32 0, i32 0), i32 1 }, %struct.ac97_quirk { i16 4136, i16 362, i16 0, i32 0, i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.65, i32 0, i32 0), i32 1 }, %struct.ac97_quirk { i16 4136, i16 386, i16 0, i32 0, i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.66, i32 0, i32 0), i32 1 }, %struct.ac97_quirk { i16 4136, i16 390, i16 0, i32 0, i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.67, i32 0, i32 0), i32 8 }, %struct.ac97_quirk { i16 4136, i16 392, i16 0, i32 0, i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.68, i32 0, i32 0), i32 8 }, %struct.ac97_quirk { i16 4136, i16 393, i16 0, i32 0, i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.69, i32 0, i32 0), i32 8 }, %struct.ac97_quirk { i16 4136, i16 401, i16 0, i32 0, i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.65, i32 0, i32 0), i32 1 }, %struct.ac97_quirk { i16 4156, i16 109, i16 0, i32 0, i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.70, i32 0, i32 0), i32 7 }, %struct.ac97_quirk { i16 4156, i16 195, i16 0, i32 0, i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.71, i32 0, i32 0), i32 1 }, %struct.ac97_quirk { i16 4156, i16 2188, i16 0, i32 0, i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.72, i32 0, i32 0), i32 8 }, %struct.ac97_quirk { i16 4156, i16 2192, i16 0, i32 0, i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.73, i32 0, i32 0), i32 7 }, %struct.ac97_quirk { i16 4156, i16 4765, i16 0, i32 0, i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.74, i32 0, i32 0), i32 1 }, %struct.ac97_quirk { i16 4156, i16 2360, i16 0, i32 0, i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.75, i32 0, i32 0), i32 8 }, %struct.ac97_quirk { i16 4156, i16 2460, i16 0, i32 0, i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.76, i32 0, i32 0), i32 8 }, %struct.ac97_quirk { i16 4156, i16 2372, i16 0, i32 0, i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.77, i32 0, i32 0), i32 8 }, %struct.ac97_quirk { i16 4156, i16 2356, i16 0, i32 0, i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.78, i32 0, i32 0), i32 8 }, %struct.ac97_quirk { i16 4156, i16 4849, i16 0, i32 0, i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.79, i32 0, i32 0), i32 1 }, %struct.ac97_quirk { i16 4156, i16 4850, i16 0, i32 0, i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.80, i32 0, i32 0), i32 1 }, %struct.ac97_quirk { i16 4156, i16 12296, i16 0, i32 0, i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.81, i32 0, i32 0), i32 1 }, %struct.ac97_quirk { i16 4173, i16 -32444, i16 0, i32 0, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.82, i32 0, i32 0), i32 6 }, %struct.ac97_quirk { i16 4173, i16 -32361, i16 0, i32 0, i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.83, i32 0, i32 0), i32 6 }, %struct.ac97_quirk { i16 4173, i16 -32320, i16 0, i32 0, i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.84, i32 0, i32 0), i32 6 }, %struct.ac97_quirk { i16 4173, i16 -32315, i16 0, i32 0, i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.85, i32 0, i32 0), i32 6 }, %struct.ac97_quirk { i16 4163, i16 -32525, i16 0, i32 0, i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.86, i32 0, i32 0), i32 4 }, %struct.ac97_quirk { i16 4303, i16 4547, i16 0, i32 0, i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.87, i32 0, i32 0), i32 1 }, %struct.ac97_quirk { i16 4303, i16 4645, i16 0, i32 0, i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.88, i32 0, i32 0), i32 1 }, %struct.ac97_quirk { i16 4303, i16 4691, i16 0, i32 0, i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.89, i32 0, i32 0), i32 1 }, %struct.ac97_quirk { i16 4303, i16 4733, i16 0, i32 0, i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.90, i32 0, i32 0), i32 1 }, %struct.ac97_quirk { i16 4303, i16 4734, i16 0, i32 0, i8* getelementptr inbounds ([24 x i8], [24 x i8]* @.str.91, i32 0, i32 0), i32 1 }, %struct.ac97_quirk { i16 4303, i16 4844, i16 0, i32 0, i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.92, i32 0, i32 0), i32 1 }, %struct.ac97_quirk { i16 4303, i16 4850, i16 0, i32 0, i8* getelementptr inbounds ([29 x i8], [29 x i8]* @.str.93, i32 0, i32 0), i32 2 }, %struct.ac97_quirk { i16 4337, i16 9829, i16 0, i32 0, i8* getelementptr inbounds ([24 x i8], [24 x i8]* @.str.94, i32 0, i32 0), i32 1 }, %struct.ac97_quirk { i16 4337, i16 10373, i16 0, i32 0, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.95, i32 0, i32 0), i32 1 }, %struct.ac97_quirk { i16 4337, i16 10389, i16 0, i32 0, i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.96, i32 0, i32 0), i32 1 }, %struct.ac97_quirk { i16 4343, i16 -31924, i16 0, i32 0, i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.97, i32 0, i32 0), i32 1 }, %struct.ac97_quirk { i16 4362, i16 86, i16 0, i32 0, i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.98, i32 0, i32 0), i32 1 }, %struct.ac97_quirk { i16 4564, i16 21365, i16 0, i32 0, i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.99, i32 0, i32 0), i32 1 }, %struct.ac97_quirk { i16 5218, i16 21616, i16 0, i32 0, i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.100, i32 0, i32 0), i32 1 }, %struct.ac97_quirk { i16 5663, i16 8239, i16 0, i32 0, i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.101, i32 0, i32 0), i32 6 }, %struct.ac97_quirk { i16 5663, i16 8250, i16 0, i32 0, i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.102, i32 0, i32 0), i32 6 }, %struct.ac97_quirk { i16 5940, i16 136, i16 0, i32 0, i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.103, i32 0, i32 0), i32 1 }, %struct.ac97_quirk { i16 -32634, i16 8192, i16 -16, i32 0, i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.104, i32 0, i32 0), i32 4 }, %struct.ac97_quirk { i16 -32634, i16 16384, i16 -16, i32 0, i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.104, i32 0, i32 0), i32 4 }, %struct.ac97_quirk { i16 -32634, i16 18518, i16 0, i32 0, i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.105, i32 0, i32 0), i32 2 }, %struct.ac97_quirk { i16 -32634, i16 19780, i16 0, i32 0, i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.106, i32 0, i32 0), i32 1 }, %struct.ac97_quirk { i16 -32634, i16 19798, i16 0, i32 0, i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.107, i32 0, i32 0), i32 1 }, %struct.ac97_quirk { i16 -32634, i16 24576, i16 -16, i32 0, i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.104, i32 0, i32 0), i32 4 }, %struct.ac97_quirk { i16 -32634, i16 -8192, i16 -16, i32 0, i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.104, i32 0, i32 0), i32 4 }, %struct.ac97_quirk zeroinitializer], align 16
@ac97_pcm_defs = internal global [6 x %struct.ac97_pcm] [%struct.ac97_pcm { %struct.snd_ac97_bus* null, i8 2, i16 0, i16 0, i32 0, [2 x %struct.anon.69] [%struct.anon.69 { i16 984, [4 x i16] zeroinitializer, [4 x i8] zeroinitializer, [4 x %struct.snd_ac97*] zeroinitializer }, %struct.anon.69 { i16 408, [4 x i16] zeroinitializer, [4 x i8] zeroinitializer, [4 x %struct.snd_ac97*] zeroinitializer }], i64 0 }, %struct.ac97_pcm { %struct.snd_ac97_bus* null, i8 3, i16 0, i16 0, i32 0, [2 x %struct.anon.69] [%struct.anon.69 { i16 24, [4 x i16] zeroinitializer, [4 x i8] zeroinitializer, [4 x %struct.snd_ac97*] zeroinitializer }, %struct.anon.69 zeroinitializer], i64 0 }, %struct.ac97_pcm { %struct.snd_ac97_bus* null, i8 3, i16 0, i16 0, i32 0, [2 x %struct.anon.69] [%struct.anon.69 { i16 64, [4 x i16] zeroinitializer, [4 x i8] zeroinitializer, [4 x %struct.snd_ac97*] zeroinitializer }, %struct.anon.69 zeroinitializer], i64 0 }, %struct.ac97_pcm { %struct.snd_ac97_bus* null, i8 10, i16 0, i16 0, i32 0, [2 x %struct.anon.69] [%struct.anon.69 { i16 3072, [4 x i16] zeroinitializer, [4 x i8] zeroinitializer, [4 x %struct.snd_ac97*] zeroinitializer }, %struct.anon.69 zeroinitializer], i64 0 }, %struct.ac97_pcm { %struct.snd_ac97_bus* null, i8 3, i16 0, i16 0, i32 0, [2 x %struct.anon.69] [%struct.anon.69 { i16 24, [4 x i16] zeroinitializer, [4 x i8] zeroinitializer, [4 x %struct.snd_ac97*] zeroinitializer }, %struct.anon.69 zeroinitializer], i64 0 }, %struct.ac97_pcm { %struct.snd_ac97_bus* null, i8 3, i16 0, i16 0, i32 0, [2 x %struct.anon.69] [%struct.anon.69 { i16 64, [4 x i16] zeroinitializer, [4 x i8] zeroinitializer, [4 x %struct.snd_ac97*] zeroinitializer }, %struct.anon.69 zeroinitializer], i64 0 }], align 16
@.str.42 = private unnamed_addr constant [58 x i8] c"codec_write %d: semaphore is not ready for register 0x%x\0A\00", align 1
@.str.43 = private unnamed_addr constant [54 x i8] c"codec_semaphore: semaphore is not ready [0x%x][0x%x]\0A\00", align 1
@.str.44 = private unnamed_addr constant [57 x i8] c"codec_read %d: semaphore is not ready for register 0x%x\0A\00", align 1
@.str.45 = private unnamed_addr constant [47 x i8] c"codec_read %d: read timeout for register 0x%x\0A\00", align 1
@.str.46 = private unnamed_addr constant [29 x i8] c"ali_codec_semaphore timeout\0A\00", align 1
@.str.47 = private unnamed_addr constant [27 x i8] c"AC97 codec ready timeout.\0A\00", align 1
@.str.48 = private unnamed_addr constant [18 x i8] c"Compaq Deskpro EN\00", align 1
@.str.49 = private unnamed_addr constant [17 x i8] c"Compaq Evo W4000\00", align 1
@.str.50 = private unnamed_addr constant [17 x i8] c"Compaq Evo D510C\00", align 1
@.str.51 = private unnamed_addr constant [17 x i8] c"HP/Compaq nx7010\00", align 1
@.str.52 = private unnamed_addr constant [13 x i8] c"ThinkPad X31\00", align 1
@.str.53 = private unnamed_addr constant [8 x i8] c"MS-9128\00", align 1
@.str.54 = private unnamed_addr constant [18 x i8] c"IBM NetVista A30p\00", align 1
@.str.55 = private unnamed_addr constant [21 x i8] c"Acer Travelmate 2310\00", align 1
@.str.56 = private unnamed_addr constant [20 x i8] c"Acer Aspire 3003LCi\00", align 1
@.str.57 = private unnamed_addr constant [19 x i8] c"Dell Precision 530\00", align 1
@.str.58 = private unnamed_addr constant [5 x i8] c"Dell\00", align 1
@.str.59 = private unnamed_addr constant [20 x i8] c"Dell Optiplex GX260\00", align 1
@.str.60 = private unnamed_addr constant [19 x i8] c"Dell Precision 650\00", align 1
@.str.61 = private unnamed_addr constant [19 x i8] c"Dell Precision 450\00", align 1
@.str.62 = private unnamed_addr constant [20 x i8] c"Dell Optiplex GX270\00", align 1
@.str.63 = private unnamed_addr constant [10 x i8] c"Dell D800\00", align 1
@.str.64 = private unnamed_addr constant [13 x i8] c"Dell Unknown\00", align 1
@.str.65 = private unnamed_addr constant [19 x i8] c"Dell Inspiron 8600\00", align 1
@.str.66 = private unnamed_addr constant [19 x i8] c"Dell Latitude D610\00", align 1
@.str.67 = private unnamed_addr constant [19 x i8] c"Dell Latitude D810\00", align 1
@.str.68 = private unnamed_addr constant [19 x i8] c"Dell Inspiron 6000\00", align 1
@.str.69 = private unnamed_addr constant [19 x i8] c"Dell Inspiron 9300\00", align 1
@.str.70 = private unnamed_addr constant [10 x i8] c"HP zv5000\00", align 1
@.str.71 = private unnamed_addr constant [10 x i8] c"HP xw6000\00", align 1
@.str.72 = private unnamed_addr constant [10 x i8] c"HP nc8000\00", align 1
@.str.73 = private unnamed_addr constant [10 x i8] c"HP nc6000\00", align 1
@.str.74 = private unnamed_addr constant [10 x i8] c"HP xw8000\00", align 1
@.str.75 = private unnamed_addr constant [10 x i8] c"HP nc4200\00", align 1
@.str.76 = private unnamed_addr constant [17 x i8] c"HP nx6110/nc6120\00", align 1
@.str.77 = private unnamed_addr constant [10 x i8] c"HP nc6220\00", align 1
@.str.78 = private unnamed_addr constant [10 x i8] c"HP nc8220\00", align 1
@.str.79 = private unnamed_addr constant [10 x i8] c"HP xw8200\00", align 1
@.str.80 = private unnamed_addr constant [10 x i8] c"HP xw6200\00", align 1
@.str.81 = private unnamed_addr constant [10 x i8] c"HP xw4200\00", align 1
@.str.82 = private unnamed_addr constant [5 x i8] c"Sony\00", align 1
@.str.83 = private unnamed_addr constant [10 x i8] c"Sony S1XP\00", align 1
@.str.84 = private unnamed_addr constant [20 x i8] c"Sony VAIO VGN-T350P\00", align 1
@.str.85 = private unnamed_addr constant [19 x i8] c"Sony VAIO VGN-B1VP\00", align 1
@.str.86 = private unnamed_addr constant [17 x i8] c"ASUS ICH5/AD1985\00", align 1
@.str.87 = private unnamed_addr constant [22 x i8] c"Fujitsu-Siemens E4010\00", align 1
@.str.88 = private unnamed_addr constant [22 x i8] c"Fujitsu-Siemens T3010\00", align 1
@.str.89 = private unnamed_addr constant [14 x i8] c"Fujitsu S6210\00", align 1
@.str.90 = private unnamed_addr constant [23 x i8] c"Fujitsu Lifebook P7010\00", align 1
@.str.91 = private unnamed_addr constant [24 x i8] c"Fujitsu Lifebook C1211D\00", align 1
@.str.92 = private unnamed_addr constant [21 x i8] c"Fujitsu-Siemens 4010\00", align 1
@.str.93 = private unnamed_addr constant [29 x i8] c"Fujitsu-Siemens Celsius H320\00", align 1
@.str.94 = private unnamed_addr constant [24 x i8] c"Fujitsu-Siemens Celsius\00", align 1
@.str.95 = private unnamed_addr constant [11 x i8] c"AMD64 Mobo\00", align 1
@.str.96 = private unnamed_addr constant [18 x i8] c"Tyan Thunder K8WE\00", align 1
@.str.97 = private unnamed_addr constant [16 x i8] c"Panasonic CF-R4\00", align 1
@.str.98 = private unnamed_addr constant [23 x i8] c"Fujitsu-Siemens Scenic\00", align 1
@.str.99 = private unnamed_addr constant [22 x i8] c"ADI AD1985 (discrete)\00", align 1
@.str.100 = private unnamed_addr constant [21 x i8] c"MSI P4 ATX 645 Ultra\00", align 1
@.str.101 = private unnamed_addr constant [13 x i8] c"Gateway M520\00", align 1
@.str.102 = private unnamed_addr constant [15 x i8] c"Gateway 4525GZ\00", align 1
@.str.103 = private unnamed_addr constant [22 x i8] c"Fujitsu-Siemens D1522\00", align 1
@.str.104 = private unnamed_addr constant [18 x i8] c"Intel ICH5/AD1985\00", align 1
@.str.105 = private unnamed_addr constant [23 x i8] c"Intel D845WN (82801BA)\00", align 1
@.str.106 = private unnamed_addr constant [15 x i8] c"Intel D850EMV2\00", align 1
@.str.107 = private unnamed_addr constant [17 x i8] c"Intel ICH/AD1885\00", align 1
@intel_pcms = internal global [5 x %struct.ich_pcm_table] [%struct.ich_pcm_table { i8* null, %struct.snd_pcm_ops* @snd_intel8x0_playback_ops, %struct.snd_pcm_ops* @snd_intel8x0_capture_ops, i64 65536, i64 131072, i32 0 }, %struct.ich_pcm_table { i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.108, i32 0, i32 0), %struct.snd_pcm_ops* null, %struct.snd_pcm_ops* @snd_intel8x0_capture_mic_ops, i64 0, i64 131072, i32 2 }, %struct.ich_pcm_table { i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.109, i32 0, i32 0), %struct.snd_pcm_ops* null, %struct.snd_pcm_ops* @snd_intel8x0_capture_mic2_ops, i64 0, i64 131072, i32 3 }, %struct.ich_pcm_table { i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.110, i32 0, i32 0), %struct.snd_pcm_ops* null, %struct.snd_pcm_ops* @snd_intel8x0_capture2_ops, i64 0, i64 131072, i32 4 }, %struct.ich_pcm_table { i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.111, i32 0, i32 0), %struct.snd_pcm_ops* @snd_intel8x0_spdif_ops, %struct.snd_pcm_ops* null, i64 65536, i64 131072, i32 5 }], align 16
@nforce_pcms = internal global [3 x %struct.ich_pcm_table] [%struct.ich_pcm_table { i8* null, %struct.snd_pcm_ops* @snd_intel8x0_playback_ops, %struct.snd_pcm_ops* @snd_intel8x0_capture_ops, i64 65536, i64 131072, i32 0 }, %struct.ich_pcm_table { i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.108, i32 0, i32 0), %struct.snd_pcm_ops* null, %struct.snd_pcm_ops* @snd_intel8x0_capture_mic_ops, i64 0, i64 131072, i32 2 }, %struct.ich_pcm_table { i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.111, i32 0, i32 0), %struct.snd_pcm_ops* @snd_intel8x0_spdif_ops, %struct.snd_pcm_ops* null, i64 65536, i64 131072, i32 3 }], align 16
@ali_pcms = internal global [3 x %struct.ich_pcm_table] [%struct.ich_pcm_table { i8* null, %struct.snd_pcm_ops* @snd_intel8x0_ali_playback_ops, %struct.snd_pcm_ops* @snd_intel8x0_ali_capture_ops, i64 65536, i64 131072, i32 0 }, %struct.ich_pcm_table { i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.108, i32 0, i32 0), %struct.snd_pcm_ops* null, %struct.snd_pcm_ops* @snd_intel8x0_ali_capture_mic_ops, i64 0, i64 131072, i32 2 }, %struct.ich_pcm_table { i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.111, i32 0, i32 0), %struct.snd_pcm_ops* @snd_intel8x0_ali_ac97spdifout_ops, %struct.snd_pcm_ops* null, i64 65536, i64 131072, i32 3 }], align 16
@snd_intel8x0_playback_ops = internal global %struct.snd_pcm_ops { i32 (%struct.snd_pcm_substream*)* @snd_intel8x0_playback_open, i32 (%struct.snd_pcm_substream*)* @snd_intel8x0_playback_close, i32 (%struct.snd_pcm_substream*, i32, i8*)* @snd_pcm_lib_ioctl, i32 (%struct.snd_pcm_substream*, %struct.snd_pcm_hw_params*)* @snd_intel8x0_hw_params, i32 (%struct.snd_pcm_substream*)* @snd_intel8x0_hw_free, i32 (%struct.snd_pcm_substream*)* @snd_intel8x0_pcm_prepare, i32 (%struct.snd_pcm_substream*, i32)* @snd_intel8x0_pcm_trigger, i64 (%struct.snd_pcm_substream*)* @snd_intel8x0_pcm_pointer, i32 (%struct.snd_pcm_substream*, %struct.timespec*, %struct.timespec*, %struct.snd_pcm_audio_tstamp_config*, %struct.snd_pcm_audio_tstamp_report*)* null, i32 (%struct.snd_pcm_substream*, i32, i64, i8*, i64)* null, i32 (%struct.snd_pcm_substream*, i32, i64, i64)* null, %struct.page* (%struct.snd_pcm_substream*, i64)* null, i32 (%struct.snd_pcm_substream*, %struct.vm_area_struct*)* null, i32 (%struct.snd_pcm_substream*)* null }, align 8
@snd_intel8x0_capture_ops = internal global %struct.snd_pcm_ops { i32 (%struct.snd_pcm_substream*)* @snd_intel8x0_capture_open, i32 (%struct.snd_pcm_substream*)* @snd_intel8x0_capture_close, i32 (%struct.snd_pcm_substream*, i32, i8*)* @snd_pcm_lib_ioctl, i32 (%struct.snd_pcm_substream*, %struct.snd_pcm_hw_params*)* @snd_intel8x0_hw_params, i32 (%struct.snd_pcm_substream*)* @snd_intel8x0_hw_free, i32 (%struct.snd_pcm_substream*)* @snd_intel8x0_pcm_prepare, i32 (%struct.snd_pcm_substream*, i32)* @snd_intel8x0_pcm_trigger, i64 (%struct.snd_pcm_substream*)* @snd_intel8x0_pcm_pointer, i32 (%struct.snd_pcm_substream*, %struct.timespec*, %struct.timespec*, %struct.snd_pcm_audio_tstamp_config*, %struct.snd_pcm_audio_tstamp_report*)* null, i32 (%struct.snd_pcm_substream*, i32, i64, i8*, i64)* null, i32 (%struct.snd_pcm_substream*, i32, i64, i64)* null, %struct.page* (%struct.snd_pcm_substream*, i64)* null, i32 (%struct.snd_pcm_substream*, %struct.vm_area_struct*)* null, i32 (%struct.snd_pcm_substream*)* null }, align 8
@.str.108 = private unnamed_addr constant [8 x i8] c"MIC ADC\00", align 1
@snd_intel8x0_capture_mic_ops = internal global %struct.snd_pcm_ops { i32 (%struct.snd_pcm_substream*)* @snd_intel8x0_mic_open, i32 (%struct.snd_pcm_substream*)* @snd_intel8x0_mic_close, i32 (%struct.snd_pcm_substream*, i32, i8*)* @snd_pcm_lib_ioctl, i32 (%struct.snd_pcm_substream*, %struct.snd_pcm_hw_params*)* @snd_intel8x0_hw_params, i32 (%struct.snd_pcm_substream*)* @snd_intel8x0_hw_free, i32 (%struct.snd_pcm_substream*)* @snd_intel8x0_pcm_prepare, i32 (%struct.snd_pcm_substream*, i32)* @snd_intel8x0_pcm_trigger, i64 (%struct.snd_pcm_substream*)* @snd_intel8x0_pcm_pointer, i32 (%struct.snd_pcm_substream*, %struct.timespec*, %struct.timespec*, %struct.snd_pcm_audio_tstamp_config*, %struct.snd_pcm_audio_tstamp_report*)* null, i32 (%struct.snd_pcm_substream*, i32, i64, i8*, i64)* null, i32 (%struct.snd_pcm_substream*, i32, i64, i64)* null, %struct.page* (%struct.snd_pcm_substream*, i64)* null, i32 (%struct.snd_pcm_substream*, %struct.vm_area_struct*)* null, i32 (%struct.snd_pcm_substream*)* null }, align 8
@.str.109 = private unnamed_addr constant [9 x i8] c"MIC2 ADC\00", align 1
@snd_intel8x0_capture_mic2_ops = internal global %struct.snd_pcm_ops { i32 (%struct.snd_pcm_substream*)* @snd_intel8x0_mic2_open, i32 (%struct.snd_pcm_substream*)* @snd_intel8x0_mic2_close, i32 (%struct.snd_pcm_substream*, i32, i8*)* @snd_pcm_lib_ioctl, i32 (%struct.snd_pcm_substream*, %struct.snd_pcm_hw_params*)* @snd_intel8x0_hw_params, i32 (%struct.snd_pcm_substream*)* @snd_intel8x0_hw_free, i32 (%struct.snd_pcm_substream*)* @snd_intel8x0_pcm_prepare, i32 (%struct.snd_pcm_substream*, i32)* @snd_intel8x0_pcm_trigger, i64 (%struct.snd_pcm_substream*)* @snd_intel8x0_pcm_pointer, i32 (%struct.snd_pcm_substream*, %struct.timespec*, %struct.timespec*, %struct.snd_pcm_audio_tstamp_config*, %struct.snd_pcm_audio_tstamp_report*)* null, i32 (%struct.snd_pcm_substream*, i32, i64, i8*, i64)* null, i32 (%struct.snd_pcm_substream*, i32, i64, i64)* null, %struct.page* (%struct.snd_pcm_substream*, i64)* null, i32 (%struct.snd_pcm_substream*, %struct.vm_area_struct*)* null, i32 (%struct.snd_pcm_substream*)* null }, align 8
@.str.110 = private unnamed_addr constant [5 x i8] c"ADC2\00", align 1
@snd_intel8x0_capture2_ops = internal global %struct.snd_pcm_ops { i32 (%struct.snd_pcm_substream*)* @snd_intel8x0_capture2_open, i32 (%struct.snd_pcm_substream*)* @snd_intel8x0_capture2_close, i32 (%struct.snd_pcm_substream*, i32, i8*)* @snd_pcm_lib_ioctl, i32 (%struct.snd_pcm_substream*, %struct.snd_pcm_hw_params*)* @snd_intel8x0_hw_params, i32 (%struct.snd_pcm_substream*)* @snd_intel8x0_hw_free, i32 (%struct.snd_pcm_substream*)* @snd_intel8x0_pcm_prepare, i32 (%struct.snd_pcm_substream*, i32)* @snd_intel8x0_pcm_trigger, i64 (%struct.snd_pcm_substream*)* @snd_intel8x0_pcm_pointer, i32 (%struct.snd_pcm_substream*, %struct.timespec*, %struct.timespec*, %struct.snd_pcm_audio_tstamp_config*, %struct.snd_pcm_audio_tstamp_report*)* null, i32 (%struct.snd_pcm_substream*, i32, i64, i8*, i64)* null, i32 (%struct.snd_pcm_substream*, i32, i64, i64)* null, %struct.page* (%struct.snd_pcm_substream*, i64)* null, i32 (%struct.snd_pcm_substream*, %struct.vm_area_struct*)* null, i32 (%struct.snd_pcm_substream*)* null }, align 8
@.str.111 = private unnamed_addr constant [7 x i8] c"IEC958\00", align 1
@snd_intel8x0_spdif_ops = internal global %struct.snd_pcm_ops { i32 (%struct.snd_pcm_substream*)* @snd_intel8x0_spdif_open, i32 (%struct.snd_pcm_substream*)* @snd_intel8x0_spdif_close, i32 (%struct.snd_pcm_substream*, i32, i8*)* @snd_pcm_lib_ioctl, i32 (%struct.snd_pcm_substream*, %struct.snd_pcm_hw_params*)* @snd_intel8x0_hw_params, i32 (%struct.snd_pcm_substream*)* @snd_intel8x0_hw_free, i32 (%struct.snd_pcm_substream*)* @snd_intel8x0_pcm_prepare, i32 (%struct.snd_pcm_substream*, i32)* @snd_intel8x0_pcm_trigger, i64 (%struct.snd_pcm_substream*)* @snd_intel8x0_pcm_pointer, i32 (%struct.snd_pcm_substream*, %struct.timespec*, %struct.timespec*, %struct.snd_pcm_audio_tstamp_config*, %struct.snd_pcm_audio_tstamp_report*)* null, i32 (%struct.snd_pcm_substream*, i32, i64, i8*, i64)* null, i32 (%struct.snd_pcm_substream*, i32, i64, i64)* null, %struct.page* (%struct.snd_pcm_substream*, i64)* null, i32 (%struct.snd_pcm_substream*, %struct.vm_area_struct*)* null, i32 (%struct.snd_pcm_substream*)* null }, align 8
@hw_constraints_channels8 = internal global %struct.snd_pcm_hw_constraint_list { i32* getelementptr inbounds ([4 x i32], [4 x i32]* @channels8, i32 0, i32 0), i32 4, i32 0 }, align 8
@hw_constraints_channels6 = internal global %struct.snd_pcm_hw_constraint_list { i32* getelementptr inbounds ([3 x i32], [3 x i32]* @channels6, i32 0, i32 0), i32 3, i32 0 }, align 8
@hw_constraints_channels4 = internal global %struct.snd_pcm_hw_constraint_list { i32* getelementptr inbounds ([2 x i32], [2 x i32]* @channels4, i32 0, i32 0), i32 2, i32 0 }, align 8
@snd_intel8x0_stream = internal global %struct.snd_pcm_hardware { i32 852227, i64 4, i32 128, i32 48000, i32 48000, i32 2, i32 2, i64 131072, i64 32, i64 131072, i32 1, i32 1024, i64 0 }, align 8
@channels8 = internal global [4 x i32] [i32 2, i32 4, i32 6, i32 8], align 16
@channels6 = internal global [3 x i32] [i32 2, i32 4, i32 6], align 4
@channels4 = internal global [2 x i32] [i32 2, i32 4], align 4
@snd_intel8x0_ali_playback_ops = internal global %struct.snd_pcm_ops { i32 (%struct.snd_pcm_substream*)* @snd_intel8x0_playback_open, i32 (%struct.snd_pcm_substream*)* @snd_intel8x0_playback_close, i32 (%struct.snd_pcm_substream*, i32, i8*)* @snd_pcm_lib_ioctl, i32 (%struct.snd_pcm_substream*, %struct.snd_pcm_hw_params*)* @snd_intel8x0_hw_params, i32 (%struct.snd_pcm_substream*)* @snd_intel8x0_hw_free, i32 (%struct.snd_pcm_substream*)* @snd_intel8x0_pcm_prepare, i32 (%struct.snd_pcm_substream*, i32)* @snd_intel8x0_ali_trigger, i64 (%struct.snd_pcm_substream*)* @snd_intel8x0_pcm_pointer, i32 (%struct.snd_pcm_substream*, %struct.timespec*, %struct.timespec*, %struct.snd_pcm_audio_tstamp_config*, %struct.snd_pcm_audio_tstamp_report*)* null, i32 (%struct.snd_pcm_substream*, i32, i64, i8*, i64)* null, i32 (%struct.snd_pcm_substream*, i32, i64, i64)* null, %struct.page* (%struct.snd_pcm_substream*, i64)* null, i32 (%struct.snd_pcm_substream*, %struct.vm_area_struct*)* null, i32 (%struct.snd_pcm_substream*)* null }, align 8
@snd_intel8x0_ali_capture_ops = internal global %struct.snd_pcm_ops { i32 (%struct.snd_pcm_substream*)* @snd_intel8x0_capture_open, i32 (%struct.snd_pcm_substream*)* @snd_intel8x0_capture_close, i32 (%struct.snd_pcm_substream*, i32, i8*)* @snd_pcm_lib_ioctl, i32 (%struct.snd_pcm_substream*, %struct.snd_pcm_hw_params*)* @snd_intel8x0_hw_params, i32 (%struct.snd_pcm_substream*)* @snd_intel8x0_hw_free, i32 (%struct.snd_pcm_substream*)* @snd_intel8x0_pcm_prepare, i32 (%struct.snd_pcm_substream*, i32)* @snd_intel8x0_ali_trigger, i64 (%struct.snd_pcm_substream*)* @snd_intel8x0_pcm_pointer, i32 (%struct.snd_pcm_substream*, %struct.timespec*, %struct.timespec*, %struct.snd_pcm_audio_tstamp_config*, %struct.snd_pcm_audio_tstamp_report*)* null, i32 (%struct.snd_pcm_substream*, i32, i64, i8*, i64)* null, i32 (%struct.snd_pcm_substream*, i32, i64, i64)* null, %struct.page* (%struct.snd_pcm_substream*, i64)* null, i32 (%struct.snd_pcm_substream*, %struct.vm_area_struct*)* null, i32 (%struct.snd_pcm_substream*)* null }, align 8
@snd_intel8x0_ali_capture_mic_ops = internal global %struct.snd_pcm_ops { i32 (%struct.snd_pcm_substream*)* @snd_intel8x0_mic_open, i32 (%struct.snd_pcm_substream*)* @snd_intel8x0_mic_close, i32 (%struct.snd_pcm_substream*, i32, i8*)* @snd_pcm_lib_ioctl, i32 (%struct.snd_pcm_substream*, %struct.snd_pcm_hw_params*)* @snd_intel8x0_hw_params, i32 (%struct.snd_pcm_substream*)* @snd_intel8x0_hw_free, i32 (%struct.snd_pcm_substream*)* @snd_intel8x0_pcm_prepare, i32 (%struct.snd_pcm_substream*, i32)* @snd_intel8x0_ali_trigger, i64 (%struct.snd_pcm_substream*)* @snd_intel8x0_pcm_pointer, i32 (%struct.snd_pcm_substream*, %struct.timespec*, %struct.timespec*, %struct.snd_pcm_audio_tstamp_config*, %struct.snd_pcm_audio_tstamp_report*)* null, i32 (%struct.snd_pcm_substream*, i32, i64, i8*, i64)* null, i32 (%struct.snd_pcm_substream*, i32, i64, i64)* null, %struct.page* (%struct.snd_pcm_substream*, i64)* null, i32 (%struct.snd_pcm_substream*, %struct.vm_area_struct*)* null, i32 (%struct.snd_pcm_substream*)* null }, align 8
@snd_intel8x0_ali_ac97spdifout_ops = internal global %struct.snd_pcm_ops { i32 (%struct.snd_pcm_substream*)* @snd_intel8x0_ali_ac97spdifout_open, i32 (%struct.snd_pcm_substream*)* @snd_intel8x0_ali_ac97spdifout_close, i32 (%struct.snd_pcm_substream*, i32, i8*)* @snd_pcm_lib_ioctl, i32 (%struct.snd_pcm_substream*, %struct.snd_pcm_hw_params*)* @snd_intel8x0_hw_params, i32 (%struct.snd_pcm_substream*)* @snd_intel8x0_hw_free, i32 (%struct.snd_pcm_substream*)* @snd_intel8x0_pcm_prepare, i32 (%struct.snd_pcm_substream*, i32)* @snd_intel8x0_ali_trigger, i64 (%struct.snd_pcm_substream*)* @snd_intel8x0_pcm_pointer, i32 (%struct.snd_pcm_substream*, %struct.timespec*, %struct.timespec*, %struct.snd_pcm_audio_tstamp_config*, %struct.snd_pcm_audio_tstamp_report*)* null, i32 (%struct.snd_pcm_substream*, i32, i64, i8*, i64)* null, i32 (%struct.snd_pcm_substream*, i32, i64, i64)* null, %struct.page* (%struct.snd_pcm_substream*, i64)* null, i32 (%struct.snd_pcm_substream*, %struct.vm_area_struct*)* null, i32 (%struct.snd_pcm_substream*)* null }, align 8
@snd_intel8x0_ali_trigger.fiforeg = internal global [3 x i32] [i32 12, i32 28, i32 44], align 4
@.str.112 = private unnamed_addr constant [15 x i8] c"Intel ICH - %s\00", align 1
@.str.113 = private unnamed_addr constant [8 x i8] c"%s - %s\00", align 1
@snd_pcm_alt_chmaps = external constant [0 x %struct.snd_pcm_chmap_elem], align 1
@.str.114 = private unnamed_addr constant [11 x i8] c"Intel8x0\0A\0A\00", align 1
@.str.115 = private unnamed_addr constant [32 x i8] c"Global control        : 0x%08x\0A\00", align 1
@.str.116 = private unnamed_addr constant [32 x i8] c"Global status         : 0x%08x\0A\00", align 1
@.str.117 = private unnamed_addr constant [32 x i8] c"SDM                   : 0x%08x\0A\00", align 1
@.str.118 = private unnamed_addr constant [24 x i8] c"AC'97 codecs ready    :\00", align 1
@snd_intel8x0_proc_read.codecs = internal global [3 x i8*] [i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.119, i32 0, i32 0), i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.120, i32 0, i32 0), i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.121, i32 0, i32 0)], align 16
@.str.119 = private unnamed_addr constant [8 x i8] c"primary\00", align 1
@.str.120 = private unnamed_addr constant [10 x i8] c"secondary\00", align 1
@.str.121 = private unnamed_addr constant [9 x i8] c"tertiary\00", align 1
@.str.122 = private unnamed_addr constant [4 x i8] c" %s\00", align 1
@.str.123 = private unnamed_addr constant [6 x i8] c" none\00", align 1
@.str.124 = private unnamed_addr constant [2 x i8] c"\0A\00", align 1
@.str.125 = private unnamed_addr constant [34 x i8] c"AC'97 codecs SDIN     : %i %i %i\0A\00", align 1
@intel8x0_clock_list = internal global [7 x %struct.snd_pci_quirk] [%struct.snd_pci_quirk { i16 3601, i16 138, i16 -1, i32 41000 }, %struct.snd_pci_quirk { i16 4116, i16 1409, i16 -1, i32 48000 }, %struct.snd_pci_quirk { i16 4136, i16 190, i16 -1, i32 44100 }, %struct.snd_pci_quirk { i16 4136, i16 375, i16 -1, i32 48000 }, %struct.snd_pci_quirk { i16 4136, i16 429, i16 -1, i32 48000 }, %struct.snd_pci_quirk { i16 4163, i16 -32525, i16 -1, i32 48000 }, %struct.snd_pci_quirk zeroinitializer], align 16
@.str.126 = private unnamed_addr constant [37 x i8] c"white list rate for %04x:%04x is %i\0A\00", align 1
@.str.127 = private unnamed_addr constant [60 x i8] c"no playback buffer allocated - aborting measure ac97 clock\0A\00", align 1
@.str.128 = private unnamed_addr constant [34 x i8] c"cannot set ac97 rate: clock = %d\0A\00", align 1
@.str.129 = private unnamed_addr constant [37 x i8] c"measure - unreliable DMA position..\0A\00", align 1
@.str.130 = private unnamed_addr constant [38 x i8] c"%s: measured %lu usecs (%lu samples)\0A\00", align 1
@__func__.intel8x0_measure_ac97_clock = private unnamed_addr constant [28 x i8] c"intel8x0_measure_ac97_clock\00", align 1
@.str.131 = private unnamed_addr constant [24 x i8] c"?? calculation error..\0A\00", align 1
@.str.132 = private unnamed_addr constant [29 x i8] c"measured clock %ld rejected\0A\00", align 1
@.str.133 = private unnamed_addr constant [16 x i8] c"clocking to %d\0A\00", align 1
@.str.134 = private unnamed_addr constant [24 x i8] c"./include/linux/ktime.h\00", align 1
@.str.135 = private unnamed_addr constant [41 x i8] c"unable to grab IRQ %d, disabling device\0A\00", align 1
@llvm.used = appending global [14 x i8*] [i8* bitcast (%struct.kernel_param* @__param_index to i8*), i8* bitcast (%struct.kernel_param* @__param_id to i8*), i8* bitcast (%struct.kernel_param* @__param_ac97_clock to i8*), i8* bitcast (%struct.kernel_param* @__param_ac97_quirk to i8*), i8* bitcast (%struct.kernel_param* @__param_buggy_semaphore to i8*), i8* bitcast (%struct.kernel_param* @__param_buggy_irq to i8*), i8* bitcast (%struct.kernel_param* @__param_xbox to i8*), i8* bitcast (%struct.kernel_param* @__param_spdif_aclink to i8*), i8* bitcast (%struct.kernel_param* @__param_inside_vm to i8*), i8* bitcast (%struct.kernel_param* @__param_enable to i8*), i8* bitcast (%struct.kernel_param* @__param_joystick to i8*), i8* bitcast (i32 ()** @__initcall_intel8x0_driver_init6 to i8*), i8* bitcast (void ()* @intel8x0_driver_exit to i8*), i8* bitcast (void ()** @__exitcall_intel8x0_driver_exit to i8*)], section "llvm.metadata"

; Function Attrs: noinline nounwind optnone uwtable
define internal i32 @intel8x0_driver_init() #0 section ".init.text" {
entry:
  %call = call i32 @__pci_register_driver(%struct.pci_driver* @intel8x0_driver, %struct.module* null, i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str, i32 0, i32 0))
  ret i32 %call
}

; Function Attrs: noinline nounwind optnone uwtable
define internal void @intel8x0_driver_exit() #0 section ".exit.text" {
entry:
  call void @pci_unregister_driver(%struct.pci_driver* @intel8x0_driver)
  ret void
}

declare void @pci_unregister_driver(%struct.pci_driver*) #1

declare i32 @__pci_register_driver(%struct.pci_driver*, %struct.module*, i8*) #1

; Function Attrs: noinline nounwind optnone uwtable
define internal i32 @snd_intel8x0_probe(%struct.pci_dev* %pci, %struct.pci_device_id* %pci_id) #0 {
entry:
  %retval = alloca i32, align 4
  %pci.addr = alloca %struct.pci_dev*, align 8
  %pci_id.addr = alloca %struct.pci_device_id*, align 8
  %card = alloca %struct.snd_card*, align 8
  %chip = alloca %struct.intel8x0*, align 8
  %err = alloca i32, align 4
  %name = alloca %struct.shortname_table*, align 8
  store %struct.pci_dev* %pci, %struct.pci_dev** %pci.addr, align 8
  store %struct.pci_device_id* %pci_id, %struct.pci_device_id** %pci_id.addr, align 8
  %0 = load %struct.pci_dev*, %struct.pci_dev** %pci.addr, align 8
  %dev = getelementptr inbounds %struct.pci_dev, %struct.pci_dev* %0, i32 0, i32 35
  %1 = load i32, i32* @index, align 4
  %2 = load i8*, i8** @id, align 8
  %call = call i32 @snd_card_new(%struct.device* %dev, i32 %1, i8* %2, %struct.module* null, i32 0, %struct.snd_card** %card)
  store i32 %call, i32* %err, align 4
  %3 = load i32, i32* %err, align 4
  %cmp = icmp slt i32 %3, 0
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %4 = load i32, i32* %err, align 4
  store i32 %4, i32* %retval, align 4
  br label %return

if.end:                                           ; preds = %entry
  %5 = load i32, i32* @spdif_aclink, align 4
  %cmp1 = icmp slt i32 %5, 0
  br i1 %cmp1, label %if.then2, label %if.end4

if.then2:                                         ; preds = %if.end
  %6 = load %struct.pci_dev*, %struct.pci_dev** %pci.addr, align 8
  %call3 = call i32 @check_default_spdif_aclink(%struct.pci_dev* %6)
  store i32 %call3, i32* @spdif_aclink, align 4
  br label %if.end4

if.end4:                                          ; preds = %if.then2, %if.end
  %7 = load %struct.snd_card*, %struct.snd_card** %card, align 8
  %driver = getelementptr inbounds %struct.snd_card, %struct.snd_card* %7, i32 0, i32 2
  %arraydecay = getelementptr inbounds [16 x i8], [16 x i8]* %driver, i32 0, i32 0
  %call5 = call i8* @strcpy(i8* %arraydecay, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.1, i32 0, i32 0))
  %8 = load i32, i32* @spdif_aclink, align 4
  %tobool = icmp ne i32 %8, 0
  br i1 %tobool, label %if.end14, label %if.then6

if.then6:                                         ; preds = %if.end4
  %9 = load %struct.pci_device_id*, %struct.pci_device_id** %pci_id.addr, align 8
  %driver_data = getelementptr inbounds %struct.pci_device_id, %struct.pci_device_id* %9, i32 0, i32 6
  %10 = load i64, i64* %driver_data, align 8
  br label %NodeBlock

NodeBlock:                                        ; preds = %if.then6
  %Pivot = icmp slt i64 %10, 4
  br i1 %Pivot, label %LeafBlock, label %LeafBlock1

LeafBlock1:                                       ; preds = %NodeBlock
  %SwitchLeaf2 = icmp eq i64 %10, 4
  br i1 %SwitchLeaf2, label %sw.bb, label %NewDefault

LeafBlock:                                        ; preds = %NodeBlock
  %SwitchLeaf = icmp eq i64 %10, 1
  br i1 %SwitchLeaf, label %sw.bb10, label %NewDefault

sw.bb:                                            ; preds = %LeafBlock1
  %11 = load %struct.snd_card*, %struct.snd_card** %card, align 8
  %driver7 = getelementptr inbounds %struct.snd_card, %struct.snd_card* %11, i32 0, i32 2
  %arraydecay8 = getelementptr inbounds [16 x i8], [16 x i8]* %driver7, i32 0, i32 0
  %call9 = call i8* @strcpy(i8* %arraydecay8, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.2, i32 0, i32 0))
  br label %sw.epilog

sw.bb10:                                          ; preds = %LeafBlock
  %12 = load %struct.snd_card*, %struct.snd_card** %card, align 8
  %driver11 = getelementptr inbounds %struct.snd_card, %struct.snd_card* %12, i32 0, i32 2
  %arraydecay12 = getelementptr inbounds [16 x i8], [16 x i8]* %driver11, i32 0, i32 0
  %call13 = call i8* @strcpy(i8* %arraydecay12, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.3, i32 0, i32 0))
  br label %sw.epilog

NewDefault:                                       ; preds = %LeafBlock1, %LeafBlock
  br label %sw.epilog

sw.epilog:                                        ; preds = %NewDefault, %sw.bb10, %sw.bb
  br label %if.end14

if.end14:                                         ; preds = %sw.epilog, %if.end4
  %13 = load %struct.snd_card*, %struct.snd_card** %card, align 8
  %shortname = getelementptr inbounds %struct.snd_card, %struct.snd_card* %13, i32 0, i32 3
  %arraydecay15 = getelementptr inbounds [32 x i8], [32 x i8]* %shortname, i32 0, i32 0
  %call16 = call i8* @strcpy(i8* %arraydecay15, i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.4, i32 0, i32 0))
  store %struct.shortname_table* getelementptr inbounds ([23 x %struct.shortname_table], [23 x %struct.shortname_table]* @shortnames, i32 0, i32 0), %struct.shortname_table** %name, align 8
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %if.end14
  %14 = load %struct.shortname_table*, %struct.shortname_table** %name, align 8
  %id = getelementptr inbounds %struct.shortname_table, %struct.shortname_table* %14, i32 0, i32 0
  %15 = load i32, i32* %id, align 8
  %tobool17 = icmp ne i32 %15, 0
  br i1 %tobool17, label %for.body, label %for.end.loopexit

for.body:                                         ; preds = %for.cond
  %16 = load %struct.pci_dev*, %struct.pci_dev** %pci.addr, align 8
  %device = getelementptr inbounds %struct.pci_dev, %struct.pci_dev* %16, i32 0, i32 8
  %17 = load i16, i16* %device, align 2
  %conv = zext i16 %17 to i32
  %18 = load %struct.shortname_table*, %struct.shortname_table** %name, align 8
  %id18 = getelementptr inbounds %struct.shortname_table, %struct.shortname_table* %18, i32 0, i32 0
  %19 = load i32, i32* %id18, align 8
  %cmp19 = icmp eq i32 %conv, %19
  br i1 %cmp19, label %if.then21, label %if.end25

if.then21:                                        ; preds = %for.body
  %20 = load %struct.snd_card*, %struct.snd_card** %card, align 8
  %shortname22 = getelementptr inbounds %struct.snd_card, %struct.snd_card* %20, i32 0, i32 3
  %arraydecay23 = getelementptr inbounds [32 x i8], [32 x i8]* %shortname22, i32 0, i32 0
  %21 = load %struct.shortname_table*, %struct.shortname_table** %name, align 8
  %s = getelementptr inbounds %struct.shortname_table, %struct.shortname_table* %21, i32 0, i32 1
  %22 = load i8*, i8** %s, align 8
  %call24 = call i8* @strcpy(i8* %arraydecay23, i8* %22)
  br label %for.end

if.end25:                                         ; preds = %for.body
  br label %for.inc

for.inc:                                          ; preds = %if.end25
  %23 = load %struct.shortname_table*, %struct.shortname_table** %name, align 8
  %incdec.ptr = getelementptr inbounds %struct.shortname_table, %struct.shortname_table* %23, i32 1
  store %struct.shortname_table* %incdec.ptr, %struct.shortname_table** %name, align 8
  br label %for.cond

for.end.loopexit:                                 ; preds = %for.cond
  br label %for.end

for.end:                                          ; preds = %for.end.loopexit, %if.then21
  %24 = load i32, i32* @buggy_irq, align 4
  %cmp26 = icmp slt i32 %24, 0
  br i1 %cmp26, label %if.then28, label %if.end34

if.then28:                                        ; preds = %for.end
  %25 = load %struct.pci_device_id*, %struct.pci_device_id** %pci_id.addr, align 8
  %driver_data29 = getelementptr inbounds %struct.pci_device_id, %struct.pci_device_id* %25, i32 0, i32 6
  %26 = load i64, i64* %driver_data29, align 8
  %cmp30 = icmp eq i64 %26, 4
  br i1 %cmp30, label %if.then32, label %if.else

if.then32:                                        ; preds = %if.then28
  store i32 1, i32* @buggy_irq, align 4
  br label %if.end33

if.else:                                          ; preds = %if.then28
  store i32 0, i32* @buggy_irq, align 4
  br label %if.end33

if.end33:                                         ; preds = %if.else, %if.then32
  br label %if.end34

if.end34:                                         ; preds = %if.end33, %for.end
  %27 = load %struct.snd_card*, %struct.snd_card** %card, align 8
  %28 = load %struct.pci_dev*, %struct.pci_dev** %pci.addr, align 8
  %29 = load %struct.pci_device_id*, %struct.pci_device_id** %pci_id.addr, align 8
  %driver_data35 = getelementptr inbounds %struct.pci_device_id, %struct.pci_device_id* %29, i32 0, i32 6
  %30 = load i64, i64* %driver_data35, align 8
  %call36 = call i32 @snd_intel8x0_create(%struct.snd_card* %27, %struct.pci_dev* %28, i64 %30, %struct.intel8x0** %chip)
  store i32 %call36, i32* %err, align 4
  %cmp37 = icmp slt i32 %call36, 0
  br i1 %cmp37, label %if.then39, label %if.end41

if.then39:                                        ; preds = %if.end34
  %31 = load %struct.snd_card*, %struct.snd_card** %card, align 8
  %call40 = call i32 @snd_card_free(%struct.snd_card* %31)
  %32 = load i32, i32* %err, align 4
  store i32 %32, i32* %retval, align 4
  br label %return

if.end41:                                         ; preds = %if.end34
  %33 = load %struct.intel8x0*, %struct.intel8x0** %chip, align 8
  %34 = bitcast %struct.intel8x0* %33 to i8*
  %35 = load %struct.snd_card*, %struct.snd_card** %card, align 8
  %private_data = getelementptr inbounds %struct.snd_card, %struct.snd_card* %35, i32 0, i32 9
  store i8* %34, i8** %private_data, align 8
  %36 = load %struct.intel8x0*, %struct.intel8x0** %chip, align 8
  %37 = load i32, i32* @ac97_clock, align 4
  %38 = load i8*, i8** @ac97_quirk, align 8
  %call42 = call i32 @snd_intel8x0_mixer(%struct.intel8x0* %36, i32 %37, i8* %38)
  store i32 %call42, i32* %err, align 4
  %cmp43 = icmp slt i32 %call42, 0
  br i1 %cmp43, label %if.then45, label %if.end47

if.then45:                                        ; preds = %if.end41
  %39 = load %struct.snd_card*, %struct.snd_card** %card, align 8
  %call46 = call i32 @snd_card_free(%struct.snd_card* %39)
  %40 = load i32, i32* %err, align 4
  store i32 %40, i32* %retval, align 4
  br label %return

if.end47:                                         ; preds = %if.end41
  %41 = load %struct.intel8x0*, %struct.intel8x0** %chip, align 8
  %call48 = call i32 @snd_intel8x0_pcm(%struct.intel8x0* %41)
  store i32 %call48, i32* %err, align 4
  %cmp49 = icmp slt i32 %call48, 0
  br i1 %cmp49, label %if.then51, label %if.end53

if.then51:                                        ; preds = %if.end47
  %42 = load %struct.snd_card*, %struct.snd_card** %card, align 8
  %call52 = call i32 @snd_card_free(%struct.snd_card* %42)
  %43 = load i32, i32* %err, align 4
  store i32 %43, i32* %retval, align 4
  br label %return

if.end53:                                         ; preds = %if.end47
  %44 = load %struct.intel8x0*, %struct.intel8x0** %chip, align 8
  call void @snd_intel8x0_proc_init(%struct.intel8x0* %44)
  %45 = load %struct.snd_card*, %struct.snd_card** %card, align 8
  %longname = getelementptr inbounds %struct.snd_card, %struct.snd_card* %45, i32 0, i32 4
  %arraydecay54 = getelementptr inbounds [80 x i8], [80 x i8]* %longname, i32 0, i32 0
  %46 = load %struct.snd_card*, %struct.snd_card** %card, align 8
  %shortname55 = getelementptr inbounds %struct.snd_card, %struct.snd_card* %46, i32 0, i32 3
  %arraydecay56 = getelementptr inbounds [32 x i8], [32 x i8]* %shortname55, i32 0, i32 0
  %47 = load %struct.intel8x0*, %struct.intel8x0** %chip, align 8
  %ac97 = getelementptr inbounds %struct.intel8x0, %struct.intel8x0* %47, i32 0, i32 13
  %arrayidx = getelementptr inbounds [3 x %struct.snd_ac97*], [3 x %struct.snd_ac97*]* %ac97, i64 0, i64 0
  %48 = load %struct.snd_ac97*, %struct.snd_ac97** %arrayidx, align 8
  %call57 = call i8* @snd_ac97_get_short_name(%struct.snd_ac97* %48)
  %49 = load %struct.intel8x0*, %struct.intel8x0** %chip, align 8
  %irq = getelementptr inbounds %struct.intel8x0, %struct.intel8x0* %49, i32 0, i32 1
  %50 = load i32, i32* %irq, align 4
  %call58 = call i32 (i8*, i64, i8*, ...) @snprintf(i8* %arraydecay54, i64 80, i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.5, i32 0, i32 0), i8* %arraydecay56, i8* %call57, i32 %50)
  %51 = load i32, i32* @ac97_clock, align 4
  %cmp59 = icmp eq i32 %51, 0
  br i1 %cmp59, label %if.then63, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %if.end53
  %52 = load i32, i32* @ac97_clock, align 4
  %cmp61 = icmp eq i32 %52, 1
  br i1 %cmp61, label %if.then63, label %if.end74

if.then63:                                        ; preds = %lor.lhs.false, %if.end53
  %53 = load i32, i32* @ac97_clock, align 4
  %cmp64 = icmp eq i32 %53, 0
  br i1 %cmp64, label %if.then66, label %if.else72

if.then66:                                        ; preds = %if.then63
  %54 = load %struct.intel8x0*, %struct.intel8x0** %chip, align 8
  %call67 = call i32 @intel8x0_in_clock_list(%struct.intel8x0* %54)
  %cmp68 = icmp eq i32 %call67, 0
  br i1 %cmp68, label %if.then70, label %if.end71

if.then70:                                        ; preds = %if.then66
  %55 = load %struct.intel8x0*, %struct.intel8x0** %chip, align 8
  call void @intel8x0_measure_ac97_clock(%struct.intel8x0* %55)
  br label %if.end71

if.end71:                                         ; preds = %if.then70, %if.then66
  br label %if.end73

if.else72:                                        ; preds = %if.then63
  %56 = load %struct.intel8x0*, %struct.intel8x0** %chip, align 8
  call void @intel8x0_measure_ac97_clock(%struct.intel8x0* %56)
  br label %if.end73

if.end73:                                         ; preds = %if.else72, %if.end71
  br label %if.end74

if.end74:                                         ; preds = %if.end73, %lor.lhs.false
  %57 = load %struct.snd_card*, %struct.snd_card** %card, align 8
  %call75 = call i32 @snd_card_register(%struct.snd_card* %57)
  store i32 %call75, i32* %err, align 4
  %cmp76 = icmp slt i32 %call75, 0
  br i1 %cmp76, label %if.then78, label %if.end80

if.then78:                                        ; preds = %if.end74
  %58 = load %struct.snd_card*, %struct.snd_card** %card, align 8
  %call79 = call i32 @snd_card_free(%struct.snd_card* %58)
  %59 = load i32, i32* %err, align 4
  store i32 %59, i32* %retval, align 4
  br label %return

if.end80:                                         ; preds = %if.end74
  %60 = load %struct.pci_dev*, %struct.pci_dev** %pci.addr, align 8
  %61 = load %struct.snd_card*, %struct.snd_card** %card, align 8
  %62 = bitcast %struct.snd_card* %61 to i8*
  call void @pci_set_drvdata(%struct.pci_dev* %60, i8* %62)
  store i32 0, i32* %retval, align 4
  br label %return

return:                                           ; preds = %if.end80, %if.then78, %if.then51, %if.then45, %if.then39, %if.then
  %63 = load i32, i32* %retval, align 4
  ret i32 %63
}

; Function Attrs: noinline nounwind optnone uwtable
define internal void @snd_intel8x0_remove(%struct.pci_dev* %pci) #0 {
entry:
  %pci.addr = alloca %struct.pci_dev*, align 8
  store %struct.pci_dev* %pci, %struct.pci_dev** %pci.addr, align 8
  %0 = load %struct.pci_dev*, %struct.pci_dev** %pci.addr, align 8
  %call = call i8* @pci_get_drvdata(%struct.pci_dev* %0)
  %1 = bitcast i8* %call to %struct.snd_card*
  %call1 = call i32 @snd_card_free(%struct.snd_card* %1)
  ret void
}

declare i32 @snd_card_new(%struct.device*, i32, i8*, %struct.module*, i32, %struct.snd_card**) #1

; Function Attrs: noinline nounwind optnone uwtable
define internal i32 @check_default_spdif_aclink(%struct.pci_dev* %pci) #0 {
entry:
  %retval = alloca i32, align 4
  %pci.addr = alloca %struct.pci_dev*, align 8
  %w = alloca %struct.snd_pci_quirk*, align 8
  store %struct.pci_dev* %pci, %struct.pci_dev** %pci.addr, align 8
  %0 = load %struct.pci_dev*, %struct.pci_dev** %pci.addr, align 8
  %call = call %struct.snd_pci_quirk* @snd_pci_quirk_lookup(%struct.pci_dev* %0, %struct.snd_pci_quirk* getelementptr inbounds ([2 x %struct.snd_pci_quirk], [2 x %struct.snd_pci_quirk]* @spdif_aclink_defaults, i32 0, i32 0))
  store %struct.snd_pci_quirk* %call, %struct.snd_pci_quirk** %w, align 8
  %1 = load %struct.snd_pci_quirk*, %struct.snd_pci_quirk** %w, align 8
  %tobool = icmp ne %struct.snd_pci_quirk* %1, null
  br i1 %tobool, label %if.then, label %if.end4

if.then:                                          ; preds = %entry
  %2 = load %struct.snd_pci_quirk*, %struct.snd_pci_quirk** %w, align 8
  %value = getelementptr inbounds %struct.snd_pci_quirk, %struct.snd_pci_quirk* %2, i32 0, i32 3
  %3 = load i32, i32* %value, align 4
  %tobool1 = icmp ne i32 %3, 0
  br i1 %tobool1, label %if.then2, label %if.else

if.then2:                                         ; preds = %if.then
  br label %if.end

if.else:                                          ; preds = %if.then
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then2
  %4 = load %struct.snd_pci_quirk*, %struct.snd_pci_quirk** %w, align 8
  %value3 = getelementptr inbounds %struct.snd_pci_quirk, %struct.snd_pci_quirk* %4, i32 0, i32 3
  %5 = load i32, i32* %value3, align 4
  store i32 %5, i32* %retval, align 4
  br label %return

if.end4:                                          ; preds = %entry
  store i32 0, i32* %retval, align 4
  br label %return

return:                                           ; preds = %if.end4, %if.end
  %6 = load i32, i32* %retval, align 4
  ret i32 %6
}

declare i8* @strcpy(i8*, i8*) #1

; Function Attrs: noinline nounwind optnone uwtable
define internal i32 @snd_intel8x0_create(%struct.snd_card* %card, %struct.pci_dev* %pci, i64 %device_type, %struct.intel8x0** %r_intel8x0) #0 {
entry:
  %lock.addr.i = alloca %struct.spinlock*, align 8
  %retval = alloca i32, align 4
  %card.addr = alloca %struct.snd_card*, align 8
  %pci.addr = alloca %struct.pci_dev*, align 8
  %device_type.addr = alloca i64, align 8
  %r_intel8x0.addr = alloca %struct.intel8x0**, align 8
  %chip = alloca %struct.intel8x0*, align 8
  %err = alloca i32, align 4
  %i = alloca i32, align 4
  %int_sta_masks = alloca i32, align 4
  %ichdev = alloca %struct.ichdev*, align 8
  %tbl = alloca %struct.ich_reg_info*, align 8
  %.compoundliteral = alloca %struct.raw_spinlock, align 4
  store %struct.snd_card* %card, %struct.snd_card** %card.addr, align 8
  store %struct.pci_dev* %pci, %struct.pci_dev** %pci.addr, align 8
  store i64 %device_type, i64* %device_type.addr, align 8
  store %struct.intel8x0** %r_intel8x0, %struct.intel8x0*** %r_intel8x0.addr, align 8
  %0 = load %struct.intel8x0**, %struct.intel8x0*** %r_intel8x0.addr, align 8
  store %struct.intel8x0* null, %struct.intel8x0** %0, align 8
  %1 = load %struct.pci_dev*, %struct.pci_dev** %pci.addr, align 8
  %call = call i32 @pci_enable_device(%struct.pci_dev* %1)
  store i32 %call, i32* %err, align 4
  %cmp = icmp slt i32 %call, 0
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %2 = load i32, i32* %err, align 4
  store i32 %2, i32* %retval, align 4
  br label %return

if.end:                                           ; preds = %entry
  %call1 = call i8* @kzalloc(i64 1016, i32 20971712)
  %3 = bitcast i8* %call1 to %struct.intel8x0*
  store %struct.intel8x0* %3, %struct.intel8x0** %chip, align 8
  %4 = load %struct.intel8x0*, %struct.intel8x0** %chip, align 8
  %cmp2 = icmp eq %struct.intel8x0* %4, null
  br i1 %cmp2, label %if.then3, label %if.end4

if.then3:                                         ; preds = %if.end
  %5 = load %struct.pci_dev*, %struct.pci_dev** %pci.addr, align 8
  call void @pci_disable_device(%struct.pci_dev* %5)
  store i32 -12, i32* %retval, align 4
  br label %return

if.end4:                                          ; preds = %if.end
  br label %do.body

do.body:                                          ; preds = %if.end4
  %6 = load %struct.intel8x0*, %struct.intel8x0** %chip, align 8
  %reg_lock = getelementptr inbounds %struct.intel8x0, %struct.intel8x0* %6, i32 0, i32 20
  store %struct.spinlock* %reg_lock, %struct.spinlock** %lock.addr.i, align 8
  %7 = load %struct.spinlock*, %struct.spinlock** %lock.addr.i, align 8
  %8 = getelementptr inbounds %struct.spinlock, %struct.spinlock* %7, i32 0, i32 0
  %rlock.i = bitcast %union.anon.1* %8 to %struct.raw_spinlock*
  br label %do.body6

do.body6:                                         ; preds = %do.body
  %9 = load %struct.intel8x0*, %struct.intel8x0** %chip, align 8
  %reg_lock7 = getelementptr inbounds %struct.intel8x0, %struct.intel8x0* %9, i32 0, i32 20
  %10 = getelementptr inbounds %struct.spinlock, %struct.spinlock* %reg_lock7, i32 0, i32 0
  %rlock = bitcast %union.anon.1* %10 to %struct.raw_spinlock*
  %raw_lock = getelementptr inbounds %struct.raw_spinlock, %struct.raw_spinlock* %.compoundliteral, i32 0, i32 0
  %val = getelementptr inbounds %struct.qspinlock, %struct.qspinlock* %raw_lock, i32 0, i32 0
  %counter = getelementptr inbounds %struct.atomic_t, %struct.atomic_t* %val, i32 0, i32 0
  store i32 0, i32* %counter, align 4
  %11 = bitcast %struct.raw_spinlock* %rlock to i8*
  %12 = bitcast %struct.raw_spinlock* %.compoundliteral to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %11, i8* %12, i64 4, i32 4, i1 false)
  br label %do.end

do.end:                                           ; preds = %do.body6
  br label %do.end8

do.end8:                                          ; preds = %do.end
  %13 = load i64, i64* %device_type.addr, align 8
  %conv = trunc i64 %13 to i32
  %14 = load %struct.intel8x0*, %struct.intel8x0** %chip, align 8
  %device_type9 = getelementptr inbounds %struct.intel8x0, %struct.intel8x0* %14, i32 0, i32 0
  store i32 %conv, i32* %device_type9, align 8
  %15 = load %struct.snd_card*, %struct.snd_card** %card.addr, align 8
  %16 = load %struct.intel8x0*, %struct.intel8x0** %chip, align 8
  %card10 = getelementptr inbounds %struct.intel8x0, %struct.intel8x0* %16, i32 0, i32 5
  store %struct.snd_card* %15, %struct.snd_card** %card10, align 8
  %17 = load %struct.pci_dev*, %struct.pci_dev** %pci.addr, align 8
  %18 = load %struct.intel8x0*, %struct.intel8x0** %chip, align 8
  %pci11 = getelementptr inbounds %struct.intel8x0, %struct.intel8x0* %18, i32 0, i32 4
  store %struct.pci_dev* %17, %struct.pci_dev** %pci11, align 8
  %19 = load %struct.intel8x0*, %struct.intel8x0** %chip, align 8
  %irq = getelementptr inbounds %struct.intel8x0, %struct.intel8x0* %19, i32 0, i32 1
  store i32 -1, i32* %irq, align 4
  %20 = load i32, i32* @buggy_irq, align 4
  %21 = load %struct.intel8x0*, %struct.intel8x0** %chip, align 8
  %buggy_irq = getelementptr inbounds %struct.intel8x0, %struct.intel8x0* %21, i32 0, i32 9
  %22 = trunc i32 %20 to i16
  %bf.load = load i16, i16* %buggy_irq, align 8
  %bf.value = and i16 %22, 1
  %bf.shl = shl i16 %bf.value, 9
  %bf.clear = and i16 %bf.load, -513
  %bf.set = or i16 %bf.clear, %bf.shl
  store i16 %bf.set, i16* %buggy_irq, align 8
  %bf.result.cast = zext i16 %bf.value to i32
  %23 = load i8, i8* @buggy_semaphore, align 1
  %tobool = trunc i8 %23 to i1
  %conv12 = zext i1 %tobool to i32
  %24 = load %struct.intel8x0*, %struct.intel8x0** %chip, align 8
  %buggy_semaphore = getelementptr inbounds %struct.intel8x0, %struct.intel8x0* %24, i32 0, i32 9
  %25 = trunc i32 %conv12 to i16
  %bf.load13 = load i16, i16* %buggy_semaphore, align 8
  %bf.value14 = and i16 %25, 1
  %bf.shl15 = shl i16 %bf.value14, 11
  %bf.clear16 = and i16 %bf.load13, -2049
  %bf.set17 = or i16 %bf.clear16, %bf.shl15
  store i16 %bf.set17, i16* %buggy_semaphore, align 8
  %bf.result.cast18 = zext i16 %bf.value14 to i32
  %26 = load i8, i8* @xbox, align 1
  %tobool19 = trunc i8 %26 to i1
  br i1 %tobool19, label %if.then20, label %if.end24

if.then20:                                        ; preds = %do.end8
  %27 = load %struct.intel8x0*, %struct.intel8x0** %chip, align 8
  %xbox = getelementptr inbounds %struct.intel8x0, %struct.intel8x0* %27, i32 0, i32 9
  %bf.load21 = load i16, i16* %xbox, align 8
  %bf.clear22 = and i16 %bf.load21, -1025
  %bf.set23 = or i16 %bf.clear22, 1024
  store i16 %bf.set23, i16* %xbox, align 8
  br label %if.end24

if.end24:                                         ; preds = %if.then20, %do.end8
  %28 = load %struct.pci_dev*, %struct.pci_dev** %pci.addr, align 8
  %call25 = call i32 @snd_intel8x0_inside_vm(%struct.pci_dev* %28)
  %29 = load %struct.intel8x0*, %struct.intel8x0** %chip, align 8
  %inside_vm = getelementptr inbounds %struct.intel8x0, %struct.intel8x0* %29, i32 0, i32 9
  %30 = trunc i32 %call25 to i16
  %bf.load26 = load i16, i16* %inside_vm, align 8
  %bf.value27 = and i16 %30, 1
  %bf.shl28 = shl i16 %bf.value27, 12
  %bf.clear29 = and i16 %bf.load26, -4097
  %bf.set30 = or i16 %bf.clear29, %bf.shl28
  store i16 %bf.set30, i16* %inside_vm, align 8
  %bf.result.cast31 = zext i16 %bf.value27 to i32
  %31 = load %struct.pci_dev*, %struct.pci_dev** %pci.addr, align 8
  %vendor = getelementptr inbounds %struct.pci_dev, %struct.pci_dev* %31, i32 0, i32 7
  %32 = load i16, i16* %vendor, align 4
  %conv32 = zext i16 %32 to i32
  %cmp33 = icmp eq i32 %conv32, 32902
  br i1 %cmp33, label %land.lhs.true, label %if.end42

land.lhs.true:                                    ; preds = %if.end24
  %33 = load %struct.pci_dev*, %struct.pci_dev** %pci.addr, align 8
  %device = getelementptr inbounds %struct.pci_dev, %struct.pci_dev* %33, i32 0, i32 8
  %34 = load i16, i16* %device, align 2
  %conv35 = zext i16 %34 to i32
  %cmp36 = icmp eq i32 %conv35, 29077
  br i1 %cmp36, label %if.then38, label %if.end42

if.then38:                                        ; preds = %land.lhs.true
  %35 = load %struct.intel8x0*, %struct.intel8x0** %chip, align 8
  %fix_nocache = getelementptr inbounds %struct.intel8x0, %struct.intel8x0* %35, i32 0, i32 9
  %bf.load39 = load i16, i16* %fix_nocache, align 8
  %bf.clear40 = and i16 %bf.load39, -257
  %bf.set41 = or i16 %bf.clear40, 256
  store i16 %bf.set41, i16* %fix_nocache, align 8
  br label %if.end42

if.end42:                                         ; preds = %if.then38, %land.lhs.true, %if.end24
  %36 = load %struct.pci_dev*, %struct.pci_dev** %pci.addr, align 8
  %37 = load %struct.snd_card*, %struct.snd_card** %card.addr, align 8
  %shortname = getelementptr inbounds %struct.snd_card, %struct.snd_card* %37, i32 0, i32 3
  %arraydecay = getelementptr inbounds [32 x i8], [32 x i8]* %shortname, i32 0, i32 0
  %call43 = call i32 @pci_request_regions(%struct.pci_dev* %36, i8* %arraydecay)
  store i32 %call43, i32* %err, align 4
  %cmp44 = icmp slt i32 %call43, 0
  br i1 %cmp44, label %if.then46, label %if.end47

if.then46:                                        ; preds = %if.end42
  %38 = load %struct.intel8x0*, %struct.intel8x0** %chip, align 8
  %39 = bitcast %struct.intel8x0* %38 to i8*
  call void @kfree(i8* %39)
  %40 = load %struct.pci_dev*, %struct.pci_dev** %pci.addr, align 8
  call void @pci_disable_device(%struct.pci_dev* %40)
  %41 = load i32, i32* %err, align 4
  store i32 %41, i32* %retval, align 4
  br label %return

if.end47:                                         ; preds = %if.end42
  %42 = load i64, i64* %device_type.addr, align 8
  %cmp48 = icmp eq i64 %42, 3
  br i1 %cmp48, label %if.then50, label %if.end52

if.then50:                                        ; preds = %if.end47
  %43 = load %struct.pci_dev*, %struct.pci_dev** %pci.addr, align 8
  %call51 = call i8* @pci_iomap(%struct.pci_dev* %43, i32 0, i64 0)
  %44 = load %struct.intel8x0*, %struct.intel8x0** %chip, align 8
  %bmaddr = getelementptr inbounds %struct.intel8x0, %struct.intel8x0* %44, i32 0, i32 3
  store i8* %call51, i8** %bmaddr, align 8
  br label %port_inited

if.end52:                                         ; preds = %if.end47
  %45 = load %struct.pci_dev*, %struct.pci_dev** %pci.addr, align 8
  %resource = getelementptr inbounds %struct.pci_dev, %struct.pci_dev* %45, i32 0, i32 38
  %arrayidx = getelementptr inbounds [11 x %struct.resource], [11 x %struct.resource]* %resource, i64 0, i64 2
  %flags = getelementptr inbounds %struct.resource, %struct.resource* %arrayidx, i32 0, i32 3
  %46 = load i64, i64* %flags, align 8
  %and = and i64 %46, 512
  %tobool53 = icmp ne i64 %and, 0
  br i1 %tobool53, label %if.then54, label %if.else

if.then54:                                        ; preds = %if.end52
  %47 = load %struct.pci_dev*, %struct.pci_dev** %pci.addr, align 8
  %call55 = call i8* @pci_iomap(%struct.pci_dev* %47, i32 2, i64 0)
  %48 = load %struct.intel8x0*, %struct.intel8x0** %chip, align 8
  %addr = getelementptr inbounds %struct.intel8x0, %struct.intel8x0* %48, i32 0, i32 2
  store i8* %call55, i8** %addr, align 8
  br label %if.end58

if.else:                                          ; preds = %if.end52
  %49 = load %struct.pci_dev*, %struct.pci_dev** %pci.addr, align 8
  %call56 = call i8* @pci_iomap(%struct.pci_dev* %49, i32 0, i64 0)
  %50 = load %struct.intel8x0*, %struct.intel8x0** %chip, align 8
  %addr57 = getelementptr inbounds %struct.intel8x0, %struct.intel8x0* %50, i32 0, i32 2
  store i8* %call56, i8** %addr57, align 8
  br label %if.end58

if.end58:                                         ; preds = %if.else, %if.then54
  %51 = load %struct.intel8x0*, %struct.intel8x0** %chip, align 8
  %addr59 = getelementptr inbounds %struct.intel8x0, %struct.intel8x0* %51, i32 0, i32 2
  %52 = load i8*, i8** %addr59, align 8
  %tobool60 = icmp ne i8* %52, null
  br i1 %tobool60, label %if.end63, label %if.then61

if.then61:                                        ; preds = %if.end58
  %53 = load %struct.snd_card*, %struct.snd_card** %card.addr, align 8
  %dev = getelementptr inbounds %struct.snd_card, %struct.snd_card* %53, i32 0, i32 29
  %54 = load %struct.device*, %struct.device** %dev, align 8
  call void (%struct.device*, i8*, ...) @dev_err(%struct.device* %54, i8* getelementptr inbounds ([29 x i8], [29 x i8]* @.str.28, i32 0, i32 0))
  %55 = load %struct.intel8x0*, %struct.intel8x0** %chip, align 8
  %call62 = call i32 @snd_intel8x0_free(%struct.intel8x0* %55)
  store i32 -5, i32* %retval, align 4
  br label %return

if.end63:                                         ; preds = %if.end58
  %56 = load %struct.pci_dev*, %struct.pci_dev** %pci.addr, align 8
  %resource64 = getelementptr inbounds %struct.pci_dev, %struct.pci_dev* %56, i32 0, i32 38
  %arrayidx65 = getelementptr inbounds [11 x %struct.resource], [11 x %struct.resource]* %resource64, i64 0, i64 3
  %flags66 = getelementptr inbounds %struct.resource, %struct.resource* %arrayidx65, i32 0, i32 3
  %57 = load i64, i64* %flags66, align 8
  %and67 = and i64 %57, 512
  %tobool68 = icmp ne i64 %and67, 0
  br i1 %tobool68, label %if.then69, label %if.else72

if.then69:                                        ; preds = %if.end63
  %58 = load %struct.pci_dev*, %struct.pci_dev** %pci.addr, align 8
  %call70 = call i8* @pci_iomap(%struct.pci_dev* %58, i32 3, i64 0)
  %59 = load %struct.intel8x0*, %struct.intel8x0** %chip, align 8
  %bmaddr71 = getelementptr inbounds %struct.intel8x0, %struct.intel8x0* %59, i32 0, i32 3
  store i8* %call70, i8** %bmaddr71, align 8
  br label %if.end75

if.else72:                                        ; preds = %if.end63
  %60 = load %struct.pci_dev*, %struct.pci_dev** %pci.addr, align 8
  %call73 = call i8* @pci_iomap(%struct.pci_dev* %60, i32 1, i64 0)
  %61 = load %struct.intel8x0*, %struct.intel8x0** %chip, align 8
  %bmaddr74 = getelementptr inbounds %struct.intel8x0, %struct.intel8x0* %61, i32 0, i32 3
  store i8* %call73, i8** %bmaddr74, align 8
  br label %if.end75

if.end75:                                         ; preds = %if.else72, %if.then69
  br label %port_inited

port_inited:                                      ; preds = %if.end75, %if.then50
  %62 = load %struct.intel8x0*, %struct.intel8x0** %chip, align 8
  %bmaddr76 = getelementptr inbounds %struct.intel8x0, %struct.intel8x0* %62, i32 0, i32 3
  %63 = load i8*, i8** %bmaddr76, align 8
  %tobool77 = icmp ne i8* %63, null
  br i1 %tobool77, label %if.end81, label %if.then78

if.then78:                                        ; preds = %port_inited
  %64 = load %struct.snd_card*, %struct.snd_card** %card.addr, align 8
  %dev79 = getelementptr inbounds %struct.snd_card, %struct.snd_card* %64, i32 0, i32 29
  %65 = load %struct.device*, %struct.device** %dev79, align 8
  call void (%struct.device*, i8*, ...) @dev_err(%struct.device* %65, i8* getelementptr inbounds ([34 x i8], [34 x i8]* @.str.29, i32 0, i32 0))
  %66 = load %struct.intel8x0*, %struct.intel8x0** %chip, align 8
  %call80 = call i32 @snd_intel8x0_free(%struct.intel8x0* %66)
  store i32 -5, i32* %retval, align 4
  br label %return

if.end81:                                         ; preds = %port_inited
  %67 = load i64, i64* %device_type.addr, align 8
  %arrayidx82 = getelementptr inbounds [5 x i32], [5 x i32]* @snd_intel8x0_create.bdbars, i64 0, i64 %67
  %68 = load i32, i32* %arrayidx82, align 4
  %69 = load %struct.intel8x0*, %struct.intel8x0** %chip, align 8
  %bdbars_count = getelementptr inbounds %struct.intel8x0, %struct.intel8x0* %69, i32 0, i32 21
  store i32 %68, i32* %bdbars_count, align 4
  %70 = load i64, i64* %device_type.addr, align 8
  br label %NodeBlock

NodeBlock:                                        ; preds = %if.end81
  %Pivot = icmp slt i64 %70, 4
  br i1 %Pivot, label %LeafBlock, label %LeafBlock1

LeafBlock1:                                       ; preds = %NodeBlock
  %SwitchLeaf2 = icmp eq i64 %70, 4
  br i1 %SwitchLeaf2, label %sw.bb, label %NewDefault

LeafBlock:                                        ; preds = %NodeBlock
  %SwitchLeaf = icmp eq i64 %70, 3
  br i1 %SwitchLeaf, label %sw.bb83, label %NewDefault

sw.bb:                                            ; preds = %LeafBlock1
  store %struct.ich_reg_info* getelementptr inbounds ([4 x %struct.ich_reg_info], [4 x %struct.ich_reg_info]* @snd_intel8x0_create.nforce_regs, i32 0, i32 0), %struct.ich_reg_info** %tbl, align 8
  br label %sw.epilog

sw.bb83:                                          ; preds = %LeafBlock
  store %struct.ich_reg_info* getelementptr inbounds ([6 x %struct.ich_reg_info], [6 x %struct.ich_reg_info]* @snd_intel8x0_create.ali_regs, i32 0, i32 0), %struct.ich_reg_info** %tbl, align 8
  br label %sw.epilog

NewDefault:                                       ; preds = %LeafBlock1, %LeafBlock
  br label %sw.default

sw.default:                                       ; preds = %NewDefault
  store %struct.ich_reg_info* getelementptr inbounds ([6 x %struct.ich_reg_info], [6 x %struct.ich_reg_info]* @snd_intel8x0_create.intel_regs, i32 0, i32 0), %struct.ich_reg_info** %tbl, align 8
  br label %sw.epilog

sw.epilog:                                        ; preds = %sw.default, %sw.bb83, %sw.bb
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %sw.epilog
  %71 = load i32, i32* %i, align 4
  %72 = load %struct.intel8x0*, %struct.intel8x0** %chip, align 8
  %bdbars_count84 = getelementptr inbounds %struct.intel8x0, %struct.intel8x0* %72, i32 0, i32 21
  %73 = load i32, i32* %bdbars_count84, align 4
  %cmp85 = icmp ult i32 %71, %73
  br i1 %cmp85, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %74 = load %struct.intel8x0*, %struct.intel8x0** %chip, align 8
  %ichd = getelementptr inbounds %struct.intel8x0, %struct.intel8x0* %74, i32 0, i32 8
  %75 = load i32, i32* %i, align 4
  %idxprom = zext i32 %75 to i64
  %arrayidx87 = getelementptr inbounds [6 x %struct.ichdev], [6 x %struct.ichdev]* %ichd, i64 0, i64 %idxprom
  store %struct.ichdev* %arrayidx87, %struct.ichdev** %ichdev, align 8
  %76 = load i32, i32* %i, align 4
  %77 = load %struct.ichdev*, %struct.ichdev** %ichdev, align 8
  %ichd88 = getelementptr inbounds %struct.ichdev, %struct.ichdev* %77, i32 0, i32 0
  store i32 %76, i32* %ichd88, align 8
  %78 = load %struct.ich_reg_info*, %struct.ich_reg_info** %tbl, align 8
  %79 = load i32, i32* %i, align 4
  %idxprom89 = zext i32 %79 to i64
  %arrayidx90 = getelementptr inbounds %struct.ich_reg_info, %struct.ich_reg_info* %78, i64 %idxprom89
  %offset = getelementptr inbounds %struct.ich_reg_info, %struct.ich_reg_info* %arrayidx90, i32 0, i32 1
  %80 = load i32, i32* %offset, align 4
  %conv91 = zext i32 %80 to i64
  %81 = load %struct.ichdev*, %struct.ichdev** %ichdev, align 8
  %reg_offset = getelementptr inbounds %struct.ichdev, %struct.ichdev* %81, i32 0, i32 1
  store i64 %conv91, i64* %reg_offset, align 8
  %82 = load %struct.ich_reg_info*, %struct.ich_reg_info** %tbl, align 8
  %83 = load i32, i32* %i, align 4
  %idxprom92 = zext i32 %83 to i64
  %arrayidx93 = getelementptr inbounds %struct.ich_reg_info, %struct.ich_reg_info* %82, i64 %idxprom92
  %int_sta_mask = getelementptr inbounds %struct.ich_reg_info, %struct.ich_reg_info* %arrayidx93, i32 0, i32 0
  %84 = load i32, i32* %int_sta_mask, align 4
  %85 = load %struct.ichdev*, %struct.ichdev** %ichdev, align 8
  %int_sta_mask94 = getelementptr inbounds %struct.ichdev, %struct.ichdev* %85, i32 0, i32 21
  store i32 %84, i32* %int_sta_mask94, align 8
  %86 = load i64, i64* %device_type.addr, align 8
  %cmp95 = icmp eq i64 %86, 2
  br i1 %cmp95, label %if.then97, label %if.else98

if.then97:                                        ; preds = %for.body
  %87 = load %struct.ichdev*, %struct.ichdev** %ichdev, align 8
  %roff_sr = getelementptr inbounds %struct.ichdev, %struct.ichdev* %87, i32 0, i32 19
  store i32 8, i32* %roff_sr, align 8
  %88 = load %struct.ichdev*, %struct.ichdev** %ichdev, align 8
  %roff_picb = getelementptr inbounds %struct.ichdev, %struct.ichdev* %88, i32 0, i32 20
  store i32 6, i32* %roff_picb, align 4
  br label %if.end101

if.else98:                                        ; preds = %for.body
  %89 = load %struct.ichdev*, %struct.ichdev** %ichdev, align 8
  %roff_sr99 = getelementptr inbounds %struct.ichdev, %struct.ichdev* %89, i32 0, i32 19
  store i32 6, i32* %roff_sr99, align 8
  %90 = load %struct.ichdev*, %struct.ichdev** %ichdev, align 8
  %roff_picb100 = getelementptr inbounds %struct.ichdev, %struct.ichdev* %90, i32 0, i32 20
  store i32 8, i32* %roff_picb100, align 4
  br label %if.end101

if.end101:                                        ; preds = %if.else98, %if.then97
  %91 = load i64, i64* %device_type.addr, align 8
  %cmp102 = icmp eq i64 %91, 3
  br i1 %cmp102, label %if.then104, label %if.end107

if.then104:                                       ; preds = %if.end101
  %92 = load %struct.ichdev*, %struct.ichdev** %ichdev, align 8
  %reg_offset105 = getelementptr inbounds %struct.ichdev, %struct.ichdev* %92, i32 0, i32 1
  %93 = load i64, i64* %reg_offset105, align 8
  %sub = sub i64 %93, 64
  %div = udiv i64 %sub, 16
  %conv106 = trunc i64 %div to i32
  %94 = load %struct.ichdev*, %struct.ichdev** %ichdev, align 8
  %ali_slot = getelementptr inbounds %struct.ichdev, %struct.ichdev* %94, i32 0, i32 22
  store i32 %conv106, i32* %ali_slot, align 4
  br label %if.end107

if.end107:                                        ; preds = %if.then104, %if.end101
  %95 = load i64, i64* %device_type.addr, align 8
  %cmp108 = icmp eq i64 %95, 2
  %96 = zext i1 %cmp108 to i64
  %cond = select i1 %cmp108, i32 0, i32 1
  %97 = load %struct.ichdev*, %struct.ichdev** %ichdev, align 8
  %pos_shift = getelementptr inbounds %struct.ichdev, %struct.ichdev* %97, i32 0, i32 10
  store i32 %cond, i32* %pos_shift, align 4
  br label %for.inc

for.inc:                                          ; preds = %if.end107
  %98 = load i32, i32* %i, align 4
  %inc = add i32 %98, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %99 = load %struct.pci_dev*, %struct.pci_dev** %pci.addr, align 8
  %dev110 = getelementptr inbounds %struct.pci_dev, %struct.pci_dev* %99, i32 0, i32 35
  %100 = load %struct.intel8x0*, %struct.intel8x0** %chip, align 8
  %bdbars_count111 = getelementptr inbounds %struct.intel8x0, %struct.intel8x0* %100, i32 0, i32 21
  %101 = load i32, i32* %bdbars_count111, align 4
  %conv112 = zext i32 %101 to i64
  %mul = mul i64 %conv112, 4
  %mul113 = mul i64 %mul, 32
  %mul114 = mul i64 %mul113, 2
  %102 = load %struct.intel8x0*, %struct.intel8x0** %chip, align 8
  %bdbars = getelementptr inbounds %struct.intel8x0, %struct.intel8x0* %102, i32 0, i32 22
  %call115 = call i32 @snd_dma_alloc_pages(i32 2, %struct.device* %dev110, i64 %mul114, %struct.snd_dma_buffer* %bdbars)
  %cmp116 = icmp slt i32 %call115, 0
  br i1 %cmp116, label %if.then118, label %if.end121

if.then118:                                       ; preds = %for.end
  %103 = load %struct.intel8x0*, %struct.intel8x0** %chip, align 8
  %call119 = call i32 @snd_intel8x0_free(%struct.intel8x0* %103)
  %104 = load %struct.snd_card*, %struct.snd_card** %card.addr, align 8
  %dev120 = getelementptr inbounds %struct.snd_card, %struct.snd_card* %104, i32 0, i32 29
  %105 = load %struct.device*, %struct.device** %dev120, align 8
  call void (%struct.device*, i8*, ...) @dev_err(%struct.device* %105, i8* getelementptr inbounds ([36 x i8], [36 x i8]* @.str.30, i32 0, i32 0))
  store i32 -12, i32* %retval, align 4
  br label %return

if.end121:                                        ; preds = %for.end
  %106 = load %struct.intel8x0*, %struct.intel8x0** %chip, align 8
  %fix_nocache122 = getelementptr inbounds %struct.intel8x0, %struct.intel8x0* %106, i32 0, i32 9
  %bf.load123 = load i16, i16* %fix_nocache122, align 8
  %bf.lshr = lshr i16 %bf.load123, 8
  %bf.clear124 = and i16 %bf.lshr, 1
  %bf.cast = zext i16 %bf.clear124 to i32
  %tobool125 = icmp ne i32 %bf.cast, 0
  br i1 %tobool125, label %if.then126, label %if.end129

if.then126:                                       ; preds = %if.end121
  br label %do.body127

do.body127:                                       ; preds = %if.then126
  br label %do.end128

do.end128:                                        ; preds = %do.body127
  br label %if.end129

if.end129:                                        ; preds = %do.end128, %if.end121
  store i32 0, i32* %int_sta_masks, align 4
  store i32 0, i32* %i, align 4
  br label %for.cond130

for.cond130:                                      ; preds = %for.inc149, %if.end129
  %107 = load i32, i32* %i, align 4
  %108 = load %struct.intel8x0*, %struct.intel8x0** %chip, align 8
  %bdbars_count131 = getelementptr inbounds %struct.intel8x0, %struct.intel8x0* %108, i32 0, i32 21
  %109 = load i32, i32* %bdbars_count131, align 4
  %cmp132 = icmp ult i32 %107, %109
  br i1 %cmp132, label %for.body134, label %for.end151

for.body134:                                      ; preds = %for.cond130
  %110 = load %struct.intel8x0*, %struct.intel8x0** %chip, align 8
  %ichd135 = getelementptr inbounds %struct.intel8x0, %struct.intel8x0* %110, i32 0, i32 8
  %111 = load i32, i32* %i, align 4
  %idxprom136 = zext i32 %111 to i64
  %arrayidx137 = getelementptr inbounds [6 x %struct.ichdev], [6 x %struct.ichdev]* %ichd135, i64 0, i64 %idxprom136
  store %struct.ichdev* %arrayidx137, %struct.ichdev** %ichdev, align 8
  %112 = load %struct.intel8x0*, %struct.intel8x0** %chip, align 8
  %bdbars138 = getelementptr inbounds %struct.intel8x0, %struct.intel8x0* %112, i32 0, i32 22
  %area = getelementptr inbounds %struct.snd_dma_buffer, %struct.snd_dma_buffer* %bdbars138, i32 0, i32 1
  %113 = load i8*, i8** %area, align 8
  %114 = bitcast i8* %113 to i32*
  %115 = load i32, i32* %i, align 4
  %mul139 = mul i32 %115, 32
  %mul140 = mul i32 %mul139, 2
  %idx.ext = zext i32 %mul140 to i64
  %add.ptr = getelementptr inbounds i32, i32* %114, i64 %idx.ext
  %116 = load %struct.ichdev*, %struct.ichdev** %ichdev, align 8
  %bdbar = getelementptr inbounds %struct.ichdev, %struct.ichdev* %116, i32 0, i32 2
  store i32* %add.ptr, i32** %bdbar, align 8
  %117 = load %struct.intel8x0*, %struct.intel8x0** %chip, align 8
  %bdbars141 = getelementptr inbounds %struct.intel8x0, %struct.intel8x0* %117, i32 0, i32 22
  %addr142 = getelementptr inbounds %struct.snd_dma_buffer, %struct.snd_dma_buffer* %bdbars141, i32 0, i32 2
  %118 = load i64, i64* %addr142, align 8
  %119 = load i32, i32* %i, align 4
  %conv143 = zext i32 %119 to i64
  %mul144 = mul i64 %conv143, 4
  %mul145 = mul i64 %mul144, 32
  %mul146 = mul i64 %mul145, 2
  %add = add i64 %118, %mul146
  %conv147 = trunc i64 %add to i32
  %120 = load %struct.ichdev*, %struct.ichdev** %ichdev, align 8
  %bdbar_addr = getelementptr inbounds %struct.ichdev, %struct.ichdev* %120, i32 0, i32 3
  store i32 %conv147, i32* %bdbar_addr, align 8
  %121 = load %struct.ichdev*, %struct.ichdev** %ichdev, align 8
  %int_sta_mask148 = getelementptr inbounds %struct.ichdev, %struct.ichdev* %121, i32 0, i32 21
  %122 = load i32, i32* %int_sta_mask148, align 8
  %123 = load i32, i32* %int_sta_masks, align 4
  %or = or i32 %123, %122
  store i32 %or, i32* %int_sta_masks, align 4
  br label %for.inc149

for.inc149:                                       ; preds = %for.body134
  %124 = load i32, i32* %i, align 4
  %inc150 = add i32 %124, 1
  store i32 %inc150, i32* %i, align 4
  br label %for.cond130

for.end151:                                       ; preds = %for.cond130
  %125 = load i64, i64* %device_type.addr, align 8
  %cmp152 = icmp eq i64 %125, 3
  %126 = zext i1 %cmp152 to i64
  %cond154 = select i1 %cmp152, i32 24, i32 48
  %127 = load %struct.intel8x0*, %struct.intel8x0** %chip, align 8
  %int_sta_reg = getelementptr inbounds %struct.intel8x0, %struct.intel8x0* %127, i32 0, i32 23
  store i32 %cond154, i32* %int_sta_reg, align 8
  %128 = load i32, i32* %int_sta_masks, align 4
  %129 = load %struct.intel8x0*, %struct.intel8x0** %chip, align 8
  %int_sta_mask155 = getelementptr inbounds %struct.intel8x0, %struct.intel8x0* %129, i32 0, i32 24
  store i32 %128, i32* %int_sta_mask155, align 4
  %130 = load %struct.pci_dev*, %struct.pci_dev** %pci.addr, align 8
  call void @pci_set_master(%struct.pci_dev* %130)
  %131 = load %struct.intel8x0*, %struct.intel8x0** %chip, align 8
  %device_type156 = getelementptr inbounds %struct.intel8x0, %struct.intel8x0* %131, i32 0, i32 0
  %132 = load i32, i32* %device_type156, align 8
  br label %NodeBlock8

NodeBlock8:                                       ; preds = %for.end151
  %Pivot9 = icmp slt i32 %132, 2
  br i1 %Pivot9, label %LeafBlock4, label %LeafBlock6

LeafBlock6:                                       ; preds = %NodeBlock8
  %SwitchLeaf7 = icmp eq i32 %132, 2
  br i1 %SwitchLeaf7, label %sw.bb158, label %NewDefault3

LeafBlock4:                                       ; preds = %NodeBlock8
  %SwitchLeaf5 = icmp eq i32 %132, 1
  br i1 %SwitchLeaf5, label %sw.bb157, label %NewDefault3

sw.bb157:                                         ; preds = %LeafBlock4
  %133 = load %struct.intel8x0*, %struct.intel8x0** %chip, align 8
  %max_codecs = getelementptr inbounds %struct.intel8x0, %struct.intel8x0* %133, i32 0, i32 15
  store i32 3, i32* %max_codecs, align 4
  %134 = load %struct.intel8x0*, %struct.intel8x0** %chip, align 8
  %codec_bit = getelementptr inbounds %struct.intel8x0, %struct.intel8x0* %134, i32 0, i32 17
  store i32* getelementptr inbounds ([3 x i32], [3 x i32]* @ich_codec_bits, i32 0, i32 0), i32** %codec_bit, align 8
  %135 = load %struct.intel8x0*, %struct.intel8x0** %chip, align 8
  %codec_ready_bits = getelementptr inbounds %struct.intel8x0, %struct.intel8x0* %135, i32 0, i32 19
  store i32 536873984, i32* %codec_ready_bits, align 4
  br label %sw.epilog166

sw.bb158:                                         ; preds = %LeafBlock6
  %136 = load %struct.intel8x0*, %struct.intel8x0** %chip, align 8
  %max_codecs159 = getelementptr inbounds %struct.intel8x0, %struct.intel8x0* %136, i32 0, i32 15
  store i32 3, i32* %max_codecs159, align 4
  %137 = load %struct.intel8x0*, %struct.intel8x0** %chip, align 8
  %codec_bit160 = getelementptr inbounds %struct.intel8x0, %struct.intel8x0* %137, i32 0, i32 17
  store i32* getelementptr inbounds ([3 x i32], [3 x i32]* @sis_codec_bits, i32 0, i32 0), i32** %codec_bit160, align 8
  %138 = load %struct.intel8x0*, %struct.intel8x0** %chip, align 8
  %codec_ready_bits161 = getelementptr inbounds %struct.intel8x0, %struct.intel8x0* %138, i32 0, i32 19
  store i32 527360, i32* %codec_ready_bits161, align 4
  br label %sw.epilog166

NewDefault3:                                      ; preds = %LeafBlock6, %LeafBlock4
  br label %sw.default162

sw.default162:                                    ; preds = %NewDefault3
  %139 = load %struct.intel8x0*, %struct.intel8x0** %chip, align 8
  %max_codecs163 = getelementptr inbounds %struct.intel8x0, %struct.intel8x0* %139, i32 0, i32 15
  store i32 2, i32* %max_codecs163, align 4
  %140 = load %struct.intel8x0*, %struct.intel8x0** %chip, align 8
  %codec_bit164 = getelementptr inbounds %struct.intel8x0, %struct.intel8x0* %140, i32 0, i32 17
  store i32* getelementptr inbounds ([3 x i32], [3 x i32]* @ich_codec_bits, i32 0, i32 0), i32** %codec_bit164, align 8
  %141 = load %struct.intel8x0*, %struct.intel8x0** %chip, align 8
  %codec_ready_bits165 = getelementptr inbounds %struct.intel8x0, %struct.intel8x0* %141, i32 0, i32 19
  store i32 3072, i32* %codec_ready_bits165, align 4
  br label %sw.epilog166

sw.epilog166:                                     ; preds = %sw.default162, %sw.bb158, %sw.bb157
  store i32 0, i32* %i, align 4
  br label %for.cond167

for.cond167:                                      ; preds = %for.inc176, %sw.epilog166
  %142 = load i32, i32* %i, align 4
  %143 = load %struct.intel8x0*, %struct.intel8x0** %chip, align 8
  %max_codecs168 = getelementptr inbounds %struct.intel8x0, %struct.intel8x0* %143, i32 0, i32 15
  %144 = load i32, i32* %max_codecs168, align 4
  %cmp169 = icmp ult i32 %142, %144
  br i1 %cmp169, label %for.body171, label %for.end178

for.body171:                                      ; preds = %for.cond167
  %145 = load %struct.intel8x0*, %struct.intel8x0** %chip, align 8
  %codec_bit172 = getelementptr inbounds %struct.intel8x0, %struct.intel8x0* %145, i32 0, i32 17
  %146 = load i32*, i32** %codec_bit172, align 8
  %147 = load i32, i32* %i, align 4
  %idxprom173 = zext i32 %147 to i64
  %arrayidx174 = getelementptr inbounds i32, i32* %146, i64 %idxprom173
  %148 = load i32, i32* %arrayidx174, align 4
  %149 = load %struct.intel8x0*, %struct.intel8x0** %chip, align 8
  %codec_isr_bits = getelementptr inbounds %struct.intel8x0, %struct.intel8x0* %149, i32 0, i32 18
  %150 = load i32, i32* %codec_isr_bits, align 8
  %or175 = or i32 %150, %148
  store i32 %or175, i32* %codec_isr_bits, align 8
  br label %for.inc176

for.inc176:                                       ; preds = %for.body171
  %151 = load i32, i32* %i, align 4
  %inc177 = add i32 %151, 1
  store i32 %inc177, i32* %i, align 4
  br label %for.cond167

for.end178:                                       ; preds = %for.cond167
  %152 = load %struct.intel8x0*, %struct.intel8x0** %chip, align 8
  %call179 = call i32 @snd_intel8x0_chip_init(%struct.intel8x0* %152, i32 1)
  store i32 %call179, i32* %err, align 4
  %cmp180 = icmp slt i32 %call179, 0
  br i1 %cmp180, label %if.then182, label %if.end184

if.then182:                                       ; preds = %for.end178
  %153 = load %struct.intel8x0*, %struct.intel8x0** %chip, align 8
  %call183 = call i32 @snd_intel8x0_free(%struct.intel8x0* %153)
  %154 = load i32, i32* %err, align 4
  store i32 %154, i32* %retval, align 4
  br label %return

if.end184:                                        ; preds = %for.end178
  %155 = load %struct.pci_dev*, %struct.pci_dev** %pci.addr, align 8
  %irq185 = getelementptr inbounds %struct.pci_dev, %struct.pci_dev* %155, i32 0, i32 37
  %156 = load i32, i32* %irq185, align 4
  %157 = load %struct.intel8x0*, %struct.intel8x0** %chip, align 8
  %158 = bitcast %struct.intel8x0* %157 to i8*
  %call186 = call i32 @request_irq(i32 %156, i32 (i32, i8*)* @snd_intel8x0_interrupt, i64 128, i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str, i32 0, i32 0), i8* %158)
  %tobool187 = icmp ne i32 %call186, 0
  br i1 %tobool187, label %if.then188, label %if.end192

if.then188:                                       ; preds = %if.end184
  %159 = load %struct.snd_card*, %struct.snd_card** %card.addr, align 8
  %dev189 = getelementptr inbounds %struct.snd_card, %struct.snd_card* %159, i32 0, i32 29
  %160 = load %struct.device*, %struct.device** %dev189, align 8
  %161 = load %struct.pci_dev*, %struct.pci_dev** %pci.addr, align 8
  %irq190 = getelementptr inbounds %struct.pci_dev, %struct.pci_dev* %161, i32 0, i32 37
  %162 = load i32, i32* %irq190, align 4
  call void (%struct.device*, i8*, ...) @dev_err(%struct.device* %160, i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.31, i32 0, i32 0), i32 %162)
  %163 = load %struct.intel8x0*, %struct.intel8x0** %chip, align 8
  %call191 = call i32 @snd_intel8x0_free(%struct.intel8x0* %163)
  store i32 -16, i32* %retval, align 4
  br label %return

if.end192:                                        ; preds = %if.end184
  %164 = load %struct.pci_dev*, %struct.pci_dev** %pci.addr, align 8
  %irq193 = getelementptr inbounds %struct.pci_dev, %struct.pci_dev* %164, i32 0, i32 37
  %165 = load i32, i32* %irq193, align 4
  %166 = load %struct.intel8x0*, %struct.intel8x0** %chip, align 8
  %irq194 = getelementptr inbounds %struct.intel8x0, %struct.intel8x0* %166, i32 0, i32 1
  store i32 %165, i32* %irq194, align 4
  %167 = load %struct.snd_card*, %struct.snd_card** %card.addr, align 8
  %168 = load %struct.intel8x0*, %struct.intel8x0** %chip, align 8
  %169 = bitcast %struct.intel8x0* %168 to i8*
  %call195 = call i32 @snd_device_new(%struct.snd_card* %167, i32 0, i8* %169, %struct.snd_device_ops* @snd_intel8x0_create.ops)
  store i32 %call195, i32* %err, align 4
  %cmp196 = icmp slt i32 %call195, 0
  br i1 %cmp196, label %if.then198, label %if.end200

if.then198:                                       ; preds = %if.end192
  %170 = load %struct.intel8x0*, %struct.intel8x0** %chip, align 8
  %call199 = call i32 @snd_intel8x0_free(%struct.intel8x0* %170)
  %171 = load i32, i32* %err, align 4
  store i32 %171, i32* %retval, align 4
  br label %return

if.end200:                                        ; preds = %if.end192
  %172 = load %struct.intel8x0*, %struct.intel8x0** %chip, align 8
  %173 = load %struct.intel8x0**, %struct.intel8x0*** %r_intel8x0.addr, align 8
  store %struct.intel8x0* %172, %struct.intel8x0** %173, align 8
  store i32 0, i32* %retval, align 4
  br label %return

return:                                           ; preds = %if.end200, %if.then198, %if.then188, %if.then182, %if.then118, %if.then78, %if.then61, %if.then46, %if.then3, %if.then
  %174 = load i32, i32* %retval, align 4
  ret i32 %174
}

declare i32 @snd_card_free(%struct.snd_card*) #1

; Function Attrs: noinline nounwind optnone uwtable
define internal i32 @snd_intel8x0_mixer(%struct.intel8x0* %chip, i32 %ac97_clock, i8* %quirk_override) #0 {
entry:
  %retval = alloca i32, align 4
  %chip.addr = alloca %struct.intel8x0*, align 8
  %ac97_clock.addr = alloca i32, align 4
  %quirk_override.addr = alloca i8*, align 8
  %pbus = alloca %struct.snd_ac97_bus*, align 8
  %ac97 = alloca %struct.snd_ac97_template, align 8
  %err = alloca i32, align 4
  %i = alloca i32, align 4
  %codecs = alloca i32, align 4
  %glob_sta = alloca i32, align 4
  %ops = alloca %struct.snd_ac97_bus_ops*, align 8
  %__ret_warn_on = alloca i32, align 4
  %tmp = alloca i64, align 8
  %reg = alloca i32, align 4
  %pcm192 = alloca %struct.ac97_pcm*, align 8
  %tmp196 = alloca i8, align 1
  %val = alloca i32, align 4
  store %struct.intel8x0* %chip, %struct.intel8x0** %chip.addr, align 8
  store i32 %ac97_clock, i32* %ac97_clock.addr, align 4
  store i8* %quirk_override, i8** %quirk_override.addr, align 8
  store i32 0, i32* %glob_sta, align 4
  %0 = load %struct.intel8x0*, %struct.intel8x0** %chip.addr, align 8
  %spdif_idx = getelementptr inbounds %struct.intel8x0, %struct.intel8x0* %0, i32 0, i32 10
  store i32 -1, i32* %spdif_idx, align 4
  %1 = load i32, i32* @spdif_aclink, align 4
  %tobool = icmp ne i32 %1, 0
  br i1 %tobool, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  %2 = load %struct.intel8x0*, %struct.intel8x0** %chip.addr, align 8
  %device_type = getelementptr inbounds %struct.intel8x0, %struct.intel8x0* %2, i32 0, i32 0
  %3 = load i32, i32* %device_type, align 8
  br label %NodeBlock3

NodeBlock3:                                       ; preds = %if.then
  %Pivot4 = icmp slt i32 %3, 3
  br i1 %Pivot4, label %LeafBlock, label %NodeBlock

NodeBlock:                                        ; preds = %NodeBlock3
  %Pivot = icmp slt i32 %3, 4
  br i1 %Pivot, label %sw.bb2, label %LeafBlock1

LeafBlock1:                                       ; preds = %NodeBlock
  %SwitchLeaf2 = icmp eq i32 %3, 4
  br i1 %SwitchLeaf2, label %sw.bb, label %NewDefault

LeafBlock:                                        ; preds = %NodeBlock3
  %SwitchLeaf = icmp eq i32 %3, 1
  br i1 %SwitchLeaf, label %sw.bb4, label %NewDefault

sw.bb:                                            ; preds = %LeafBlock1
  %4 = load %struct.intel8x0*, %struct.intel8x0** %chip.addr, align 8
  %spdif_idx1 = getelementptr inbounds %struct.intel8x0, %struct.intel8x0* %4, i32 0, i32 10
  store i32 3, i32* %spdif_idx1, align 4
  br label %sw.epilog

sw.bb2:                                           ; preds = %NodeBlock
  %5 = load %struct.intel8x0*, %struct.intel8x0** %chip.addr, align 8
  %spdif_idx3 = getelementptr inbounds %struct.intel8x0, %struct.intel8x0* %5, i32 0, i32 10
  store i32 3, i32* %spdif_idx3, align 4
  br label %sw.epilog

sw.bb4:                                           ; preds = %LeafBlock
  %6 = load %struct.intel8x0*, %struct.intel8x0** %chip.addr, align 8
  %spdif_idx5 = getelementptr inbounds %struct.intel8x0, %struct.intel8x0* %6, i32 0, i32 10
  store i32 5, i32* %spdif_idx5, align 4
  br label %sw.epilog

NewDefault:                                       ; preds = %LeafBlock1, %LeafBlock
  br label %sw.epilog

sw.epilog:                                        ; preds = %NewDefault, %sw.bb4, %sw.bb2, %sw.bb
  br label %if.end

if.end:                                           ; preds = %sw.epilog, %entry
  %7 = load %struct.intel8x0*, %struct.intel8x0** %chip.addr, align 8
  %in_ac97_init = getelementptr inbounds %struct.intel8x0, %struct.intel8x0* %7, i32 0, i32 9
  %bf.load = load i16, i16* %in_ac97_init, align 8
  %bf.clear = and i16 %bf.load, -33
  %bf.set = or i16 %bf.clear, 32
  store i16 %bf.set, i16* %in_ac97_init, align 8
  %8 = bitcast %struct.snd_ac97_template* %ac97 to i8*
  call void @llvm.memset.p0i8.i64(i8* %8, i8 0, i64 40, i32 8, i1 false)
  %9 = load %struct.intel8x0*, %struct.intel8x0** %chip.addr, align 8
  %10 = bitcast %struct.intel8x0* %9 to i8*
  %private_data = getelementptr inbounds %struct.snd_ac97_template, %struct.snd_ac97_template* %ac97, i32 0, i32 0
  store i8* %10, i8** %private_data, align 8
  %private_free = getelementptr inbounds %struct.snd_ac97_template, %struct.snd_ac97_template* %ac97, i32 0, i32 1
  store void (%struct.snd_ac97*)* @snd_intel8x0_mixer_free_ac97, void (%struct.snd_ac97*)** %private_free, align 8
  %scaps = getelementptr inbounds %struct.snd_ac97_template, %struct.snd_ac97_template* %ac97, i32 0, i32 5
  store i32 2080, i32* %scaps, align 4
  %11 = load %struct.intel8x0*, %struct.intel8x0** %chip.addr, align 8
  %xbox = getelementptr inbounds %struct.intel8x0, %struct.intel8x0* %11, i32 0, i32 9
  %bf.load6 = load i16, i16* %xbox, align 8
  %bf.lshr = lshr i16 %bf.load6, 10
  %bf.clear7 = and i16 %bf.lshr, 1
  %bf.cast = zext i16 %bf.clear7 to i32
  %tobool8 = icmp ne i32 %bf.cast, 0
  br i1 %tobool8, label %if.then9, label %if.end11

if.then9:                                         ; preds = %if.end
  %scaps10 = getelementptr inbounds %struct.snd_ac97_template, %struct.snd_ac97_template* %ac97, i32 0, i32 5
  %12 = load i32, i32* %scaps10, align 4
  %or = or i32 %12, 256
  store i32 %or, i32* %scaps10, align 4
  br label %if.end11

if.end11:                                         ; preds = %if.then9, %if.end
  %13 = load %struct.intel8x0*, %struct.intel8x0** %chip.addr, align 8
  %device_type12 = getelementptr inbounds %struct.intel8x0, %struct.intel8x0* %13, i32 0, i32 0
  %14 = load i32, i32* %device_type12, align 8
  %cmp = icmp ne i32 %14, 3
  br i1 %cmp, label %if.then13, label %if.else57

if.then13:                                        ; preds = %if.end11
  %15 = load %struct.intel8x0*, %struct.intel8x0** %chip.addr, align 8
  %call = call i32 @igetdword(%struct.intel8x0* %15, i32 48)
  store i32 %call, i32* %glob_sta, align 4
  store %struct.snd_ac97_bus_ops* @snd_intel8x0_mixer.standard_bus_ops, %struct.snd_ac97_bus_ops** %ops, align 8
  %16 = load %struct.intel8x0*, %struct.intel8x0** %chip.addr, align 8
  %in_sdin_init = getelementptr inbounds %struct.intel8x0, %struct.intel8x0* %16, i32 0, i32 9
  %bf.load14 = load i16, i16* %in_sdin_init, align 8
  %bf.clear15 = and i16 %bf.load14, -65
  %bf.set16 = or i16 %bf.clear15, 64
  store i16 %bf.set16, i16* %in_sdin_init, align 8
  store i32 0, i32* %codecs, align 4
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %if.then13
  %17 = load i32, i32* %i, align 4
  %18 = load %struct.intel8x0*, %struct.intel8x0** %chip.addr, align 8
  %max_codecs = getelementptr inbounds %struct.intel8x0, %struct.intel8x0* %18, i32 0, i32 15
  %19 = load i32, i32* %max_codecs, align 4
  %cmp17 = icmp ult i32 %17, %19
  br i1 %cmp17, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %20 = load i32, i32* %glob_sta, align 4
  %21 = load %struct.intel8x0*, %struct.intel8x0** %chip.addr, align 8
  %codec_bit = getelementptr inbounds %struct.intel8x0, %struct.intel8x0* %21, i32 0, i32 17
  %22 = load i32*, i32** %codec_bit, align 8
  %23 = load i32, i32* %i, align 4
  %idxprom = zext i32 %23 to i64
  %arrayidx = getelementptr inbounds i32, i32* %22, i64 %idxprom
  %24 = load i32, i32* %arrayidx, align 4
  %and = and i32 %20, %24
  %tobool18 = icmp ne i32 %and, 0
  br i1 %tobool18, label %if.end20, label %if.then19

if.then19:                                        ; preds = %for.body
  br label %for.inc

if.end20:                                         ; preds = %for.body
  %25 = load %struct.intel8x0*, %struct.intel8x0** %chip.addr, align 8
  %device_type21 = getelementptr inbounds %struct.intel8x0, %struct.intel8x0* %25, i32 0, i32 0
  %26 = load i32, i32* %device_type21, align 8
  %cmp22 = icmp eq i32 %26, 1
  br i1 %cmp22, label %if.then23, label %if.else

if.then23:                                        ; preds = %if.end20
  %27 = load %struct.intel8x0*, %struct.intel8x0** %chip.addr, align 8
  %28 = load i32, i32* %codecs, align 4
  call void @snd_intel8x0_codec_read_test(%struct.intel8x0* %27, i32 %28)
  %29 = load %struct.intel8x0*, %struct.intel8x0** %chip.addr, align 8
  %call24 = call zeroext i8 @igetbyte(%struct.intel8x0* %29, i32 128)
  %conv = zext i8 %call24 to i32
  %and25 = and i32 %conv, 3
  %30 = load %struct.intel8x0*, %struct.intel8x0** %chip.addr, align 8
  %ac97_sdin = getelementptr inbounds %struct.intel8x0, %struct.intel8x0* %30, i32 0, i32 14
  %31 = load i32, i32* %codecs, align 4
  %idxprom26 = zext i32 %31 to i64
  %arrayidx27 = getelementptr inbounds [3 x i32], [3 x i32]* %ac97_sdin, i64 0, i64 %idxprom26
  store i32 %and25, i32* %arrayidx27, align 4
  %32 = load %struct.intel8x0*, %struct.intel8x0** %chip.addr, align 8
  %ac97_sdin28 = getelementptr inbounds %struct.intel8x0, %struct.intel8x0* %32, i32 0, i32 14
  %33 = load i32, i32* %codecs, align 4
  %idxprom29 = zext i32 %33 to i64
  %arrayidx30 = getelementptr inbounds [3 x i32], [3 x i32]* %ac97_sdin28, i64 0, i64 %idxprom29
  %34 = load i32, i32* %arrayidx30, align 4
  %cmp31 = icmp uge i32 %34, 3
  %lnot = xor i1 %cmp31, true
  %lnot33 = xor i1 %lnot, true
  %lnot.ext = zext i1 %lnot33 to i32
  store i32 %lnot.ext, i32* %__ret_warn_on, align 4
  %35 = load i32, i32* %__ret_warn_on, align 4
  %tobool34 = icmp ne i32 %35, 0
  %lnot35 = xor i1 %tobool34, true
  %lnot37 = xor i1 %lnot35, true
  %lnot.ext38 = zext i1 %lnot37 to i32
  %conv39 = sext i32 %lnot.ext38 to i64
  store i64 %conv39, i64* %tmp, align 8
  %36 = load i64, i64* %tmp, align 8
  %tobool40 = icmp ne i64 %36, 0
  br i1 %tobool40, label %if.then41, label %if.end45

if.then41:                                        ; preds = %if.then23
  %37 = load %struct.intel8x0*, %struct.intel8x0** %chip.addr, align 8
  %ac97_sdin42 = getelementptr inbounds %struct.intel8x0, %struct.intel8x0* %37, i32 0, i32 14
  %38 = load i32, i32* %codecs, align 4
  %idxprom43 = zext i32 %38 to i64
  %arrayidx44 = getelementptr inbounds [3 x i32], [3 x i32]* %ac97_sdin42, i64 0, i64 %idxprom43
  store i32 0, i32* %arrayidx44, align 4
  br label %if.end45

if.end45:                                         ; preds = %if.then41, %if.then23
  br label %if.end49

if.else:                                          ; preds = %if.end20
  %39 = load i32, i32* %i, align 4
  %40 = load %struct.intel8x0*, %struct.intel8x0** %chip.addr, align 8
  %ac97_sdin46 = getelementptr inbounds %struct.intel8x0, %struct.intel8x0* %40, i32 0, i32 14
  %41 = load i32, i32* %codecs, align 4
  %idxprom47 = zext i32 %41 to i64
  %arrayidx48 = getelementptr inbounds [3 x i32], [3 x i32]* %ac97_sdin46, i64 0, i64 %idxprom47
  store i32 %39, i32* %arrayidx48, align 4
  br label %if.end49

if.end49:                                         ; preds = %if.else, %if.end45
  %42 = load i32, i32* %codecs, align 4
  %inc = add i32 %42, 1
  store i32 %inc, i32* %codecs, align 4
  br label %for.inc

for.inc:                                          ; preds = %if.end49, %if.then19
  %43 = load i32, i32* %i, align 4
  %inc50 = add i32 %43, 1
  store i32 %inc50, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %44 = load %struct.intel8x0*, %struct.intel8x0** %chip.addr, align 8
  %in_sdin_init51 = getelementptr inbounds %struct.intel8x0, %struct.intel8x0* %44, i32 0, i32 9
  %bf.load52 = load i16, i16* %in_sdin_init51, align 8
  %bf.clear53 = and i16 %bf.load52, -65
  store i16 %bf.clear53, i16* %in_sdin_init51, align 8
  %45 = load i32, i32* %codecs, align 4
  %tobool54 = icmp ne i32 %45, 0
  br i1 %tobool54, label %if.end56, label %if.then55

if.then55:                                        ; preds = %for.end
  store i32 1, i32* %codecs, align 4
  br label %if.end56

if.end56:                                         ; preds = %if.then55, %for.end
  br label %if.end71

if.else57:                                        ; preds = %if.end11
  store %struct.snd_ac97_bus_ops* @snd_intel8x0_mixer.ali_bus_ops, %struct.snd_ac97_bus_ops** %ops, align 8
  store i32 1, i32* %codecs, align 4
  store i32 0, i32* %i, align 4
  br label %for.cond58

for.cond58:                                       ; preds = %for.inc68, %if.else57
  %46 = load i32, i32* %i, align 4
  %cmp59 = icmp ult i32 %46, 100
  br i1 %cmp59, label %for.body61, label %for.end70.loopexit

for.body61:                                       ; preds = %for.cond58
  %47 = load %struct.intel8x0*, %struct.intel8x0** %chip.addr, align 8
  %call62 = call i32 @igetdword(%struct.intel8x0* %47, i32 52)
  store i32 %call62, i32* %reg, align 4
  %48 = load i32, i32* %reg, align 4
  %and63 = and i32 %48, 64
  %tobool64 = icmp ne i32 %and63, 0
  br i1 %tobool64, label %if.then65, label %if.end66

if.then65:                                        ; preds = %for.body61
  store i32 2, i32* %codecs, align 4
  br label %for.end70

if.end66:                                         ; preds = %for.body61
  %49 = load %struct.intel8x0*, %struct.intel8x0** %chip.addr, align 8
  %50 = load i32, i32* %reg, align 4
  %or67 = or i32 %50, 64
  call void @iputdword(%struct.intel8x0* %49, i32 52, i32 %or67)
  call void @__const_udelay(i64 4295)
  br label %for.inc68

for.inc68:                                        ; preds = %if.end66
  %51 = load i32, i32* %i, align 4
  %inc69 = add i32 %51, 1
  store i32 %inc69, i32* %i, align 4
  br label %for.cond58

for.end70.loopexit:                               ; preds = %for.cond58
  br label %for.end70

for.end70:                                        ; preds = %for.end70.loopexit, %if.then65
  br label %if.end71

if.end71:                                         ; preds = %for.end70, %if.end56
  %52 = load %struct.intel8x0*, %struct.intel8x0** %chip.addr, align 8
  %card = getelementptr inbounds %struct.intel8x0, %struct.intel8x0* %52, i32 0, i32 5
  %53 = load %struct.snd_card*, %struct.snd_card** %card, align 8
  %54 = load %struct.snd_ac97_bus_ops*, %struct.snd_ac97_bus_ops** %ops, align 8
  %55 = load %struct.intel8x0*, %struct.intel8x0** %chip.addr, align 8
  %56 = bitcast %struct.intel8x0* %55 to i8*
  %call72 = call i32 @snd_ac97_bus(%struct.snd_card* %53, i32 0, %struct.snd_ac97_bus_ops* %54, i8* %56, %struct.snd_ac97_bus** %pbus)
  store i32 %call72, i32* %err, align 4
  %cmp73 = icmp slt i32 %call72, 0
  br i1 %cmp73, label %if.then75, label %if.end76

if.then75:                                        ; preds = %if.end71
  br label %__err

if.end76:                                         ; preds = %if.end71
  %57 = load %struct.snd_ac97_bus*, %struct.snd_ac97_bus** %pbus, align 8
  %private_free77 = getelementptr inbounds %struct.snd_ac97_bus, %struct.snd_ac97_bus* %57, i32 0, i32 2
  store void (%struct.snd_ac97_bus*)* @snd_intel8x0_mixer_free_ac97_bus, void (%struct.snd_ac97_bus*)** %private_free77, align 8
  %58 = load i32, i32* %ac97_clock.addr, align 4
  %cmp78 = icmp sge i32 %58, 8000
  br i1 %cmp78, label %land.lhs.true, label %if.end83

land.lhs.true:                                    ; preds = %if.end76
  %59 = load i32, i32* %ac97_clock.addr, align 4
  %cmp80 = icmp sle i32 %59, 48000
  br i1 %cmp80, label %if.then82, label %if.end83

if.then82:                                        ; preds = %land.lhs.true
  %60 = load i32, i32* %ac97_clock.addr, align 4
  %61 = load %struct.snd_ac97_bus*, %struct.snd_ac97_bus** %pbus, align 8
  %clock = getelementptr inbounds %struct.snd_ac97_bus, %struct.snd_ac97_bus* %61, i32 0, i32 6
  store i32 %60, i32* %clock, align 4
  br label %if.end83

if.end83:                                         ; preds = %if.then82, %land.lhs.true, %if.end76
  %62 = load %struct.intel8x0*, %struct.intel8x0** %chip.addr, align 8
  %device_type84 = getelementptr inbounds %struct.intel8x0, %struct.intel8x0* %62, i32 0, i32 0
  %63 = load i32, i32* %device_type84, align 8
  %cmp85 = icmp eq i32 %63, 3
  br i1 %cmp85, label %if.then87, label %if.else91

if.then87:                                        ; preds = %if.end83
  %64 = load %struct.snd_ac97_bus*, %struct.snd_ac97_bus** %pbus, align 8
  %no_vra = getelementptr inbounds %struct.snd_ac97_bus, %struct.snd_ac97_bus* %64, i32 0, i32 5
  %bf.load88 = load i8, i8* %no_vra, align 2
  %bf.clear89 = and i8 %bf.load88, -2
  %bf.set90 = or i8 %bf.clear89, 1
  store i8 %bf.set90, i8* %no_vra, align 2
  br label %if.end95

if.else91:                                        ; preds = %if.end83
  %65 = load %struct.snd_ac97_bus*, %struct.snd_ac97_bus** %pbus, align 8
  %dra = getelementptr inbounds %struct.snd_ac97_bus, %struct.snd_ac97_bus* %65, i32 0, i32 5
  %bf.load92 = load i8, i8* %dra, align 2
  %bf.clear93 = and i8 %bf.load92, -3
  %bf.set94 = or i8 %bf.clear93, 2
  store i8 %bf.set94, i8* %dra, align 2
  br label %if.end95

if.end95:                                         ; preds = %if.else91, %if.then87
  %66 = load %struct.snd_ac97_bus*, %struct.snd_ac97_bus** %pbus, align 8
  %67 = load %struct.intel8x0*, %struct.intel8x0** %chip.addr, align 8
  %ac97_bus = getelementptr inbounds %struct.intel8x0, %struct.intel8x0* %67, i32 0, i32 12
  store %struct.snd_ac97_bus* %66, %struct.snd_ac97_bus** %ac97_bus, align 8
  %68 = load i32, i32* %codecs, align 4
  %69 = load %struct.intel8x0*, %struct.intel8x0** %chip.addr, align 8
  %ncodecs = getelementptr inbounds %struct.intel8x0, %struct.intel8x0* %69, i32 0, i32 16
  store i32 %68, i32* %ncodecs, align 8
  %70 = load %struct.intel8x0*, %struct.intel8x0** %chip.addr, align 8
  %pci = getelementptr inbounds %struct.intel8x0, %struct.intel8x0* %70, i32 0, i32 4
  %71 = load %struct.pci_dev*, %struct.pci_dev** %pci, align 8
  %pci96 = getelementptr inbounds %struct.snd_ac97_template, %struct.snd_ac97_template* %ac97, i32 0, i32 2
  store %struct.pci_dev* %71, %struct.pci_dev** %pci96, align 8
  store i32 0, i32* %i, align 4
  br label %for.cond97

for.cond97:                                       ; preds = %for.inc119, %if.end95
  %72 = load i32, i32* %i, align 4
  %73 = load i32, i32* %codecs, align 4
  %cmp98 = icmp ult i32 %72, %73
  br i1 %cmp98, label %for.body100, label %for.end121

for.body100:                                      ; preds = %for.cond97
  %74 = load i32, i32* %i, align 4
  %conv101 = trunc i32 %74 to i16
  %num = getelementptr inbounds %struct.snd_ac97_template, %struct.snd_ac97_template* %ac97, i32 0, i32 3
  store i16 %conv101, i16* %num, align 8
  %75 = load %struct.snd_ac97_bus*, %struct.snd_ac97_bus** %pbus, align 8
  %76 = load %struct.intel8x0*, %struct.intel8x0** %chip.addr, align 8
  %ac97102 = getelementptr inbounds %struct.intel8x0, %struct.intel8x0* %76, i32 0, i32 13
  %77 = load i32, i32* %i, align 4
  %idxprom103 = zext i32 %77 to i64
  %arrayidx104 = getelementptr inbounds [3 x %struct.snd_ac97*], [3 x %struct.snd_ac97*]* %ac97102, i64 0, i64 %idxprom103
  %call105 = call i32 @snd_ac97_mixer(%struct.snd_ac97_bus* %75, %struct.snd_ac97_template* %ac97, %struct.snd_ac97** %arrayidx104)
  store i32 %call105, i32* %err, align 4
  %cmp106 = icmp slt i32 %call105, 0
  br i1 %cmp106, label %if.then108, label %if.end118

if.then108:                                       ; preds = %for.body100
  %78 = load i32, i32* %err, align 4
  %cmp109 = icmp ne i32 %78, -13
  br i1 %cmp109, label %if.then111, label %if.end113

if.then111:                                       ; preds = %if.then108
  %79 = load %struct.intel8x0*, %struct.intel8x0** %chip.addr, align 8
  %card112 = getelementptr inbounds %struct.intel8x0, %struct.intel8x0* %79, i32 0, i32 5
  %80 = load %struct.snd_card*, %struct.snd_card** %card112, align 8
  %dev = getelementptr inbounds %struct.snd_card, %struct.snd_card* %80, i32 0, i32 29
  %81 = load %struct.device*, %struct.device** %dev, align 8
  %82 = load i32, i32* %i, align 4
  call void (%struct.device*, i8*, ...) @dev_err(%struct.device* %81, i8* getelementptr inbounds ([32 x i8], [32 x i8]* @.str.41, i32 0, i32 0), i32 %82)
  br label %if.end113

if.end113:                                        ; preds = %if.then111, %if.then108
  %83 = load i32, i32* %i, align 4
  %cmp114 = icmp eq i32 %83, 0
  br i1 %cmp114, label %if.then116, label %if.end117

if.then116:                                       ; preds = %if.end113
  br label %__err

if.end117:                                        ; preds = %if.end113
  br label %if.end118

if.end118:                                        ; preds = %if.end117, %for.body100
  br label %for.inc119

for.inc119:                                       ; preds = %if.end118
  %84 = load i32, i32* %i, align 4
  %inc120 = add i32 %84, 1
  store i32 %inc120, i32* %i, align 4
  br label %for.cond97

for.end121:                                       ; preds = %for.cond97
  %85 = load %struct.intel8x0*, %struct.intel8x0** %chip.addr, align 8
  %ac97122 = getelementptr inbounds %struct.intel8x0, %struct.intel8x0* %85, i32 0, i32 13
  %arrayidx123 = getelementptr inbounds [3 x %struct.snd_ac97*], [3 x %struct.snd_ac97*]* %ac97122, i64 0, i64 0
  %86 = load %struct.snd_ac97*, %struct.snd_ac97** %arrayidx123, align 8
  %87 = load i8*, i8** %quirk_override.addr, align 8
  %call124 = call i32 @snd_ac97_tune_hardware(%struct.snd_ac97* %86, %struct.ac97_quirk* getelementptr inbounds ([66 x %struct.ac97_quirk], [66 x %struct.ac97_quirk]* @ac97_quirks, i32 0, i32 0), i8* %87)
  %88 = load %struct.intel8x0*, %struct.intel8x0** %chip.addr, align 8
  %device_type125 = getelementptr inbounds %struct.intel8x0, %struct.intel8x0* %88, i32 0, i32 0
  %89 = load i32, i32* %device_type125, align 8
  %cmp126 = icmp eq i32 %89, 1
  br i1 %cmp126, label %if.then128, label %if.end132

if.then128:                                       ; preds = %for.end121
  %90 = load %struct.snd_ac97_bus*, %struct.snd_ac97_bus** %pbus, align 8
  %isdin = getelementptr inbounds %struct.snd_ac97_bus, %struct.snd_ac97_bus* %90, i32 0, i32 5
  %bf.load129 = load i8, i8* %isdin, align 2
  %bf.clear130 = and i8 %bf.load129, -5
  %bf.set131 = or i8 %bf.clear130, 4
  store i8 %bf.set131, i8* %isdin, align 2
  br label %if.end132

if.end132:                                        ; preds = %if.then128, %for.end121
  store i32 6, i32* %i, align 4
  %91 = load %struct.intel8x0*, %struct.intel8x0** %chip.addr, align 8
  %device_type133 = getelementptr inbounds %struct.intel8x0, %struct.intel8x0* %91, i32 0, i32 0
  %92 = load i32, i32* %device_type133, align 8
  %cmp134 = icmp ne i32 %92, 1
  br i1 %cmp134, label %if.then136, label %if.end137

if.then136:                                       ; preds = %if.end132
  %93 = load i32, i32* %i, align 4
  %sub = sub i32 %93, 2
  store i32 %sub, i32* %i, align 4
  br label %if.end137

if.end137:                                        ; preds = %if.then136, %if.end132
  %94 = load %struct.intel8x0*, %struct.intel8x0** %chip.addr, align 8
  %spdif_idx138 = getelementptr inbounds %struct.intel8x0, %struct.intel8x0* %94, i32 0, i32 10
  %95 = load i32, i32* %spdif_idx138, align 4
  %cmp139 = icmp slt i32 %95, 0
  br i1 %cmp139, label %if.then141, label %if.end142

if.then141:                                       ; preds = %if.end137
  %96 = load i32, i32* %i, align 4
  %dec = add i32 %96, -1
  store i32 %dec, i32* %i, align 4
  br label %if.end142

if.end142:                                        ; preds = %if.then141, %if.end137
  %97 = load %struct.snd_ac97_bus*, %struct.snd_ac97_bus** %pbus, align 8
  %98 = load i32, i32* %i, align 4
  %conv143 = trunc i32 %98 to i16
  %call144 = call i32 @snd_ac97_pcm_assign(%struct.snd_ac97_bus* %97, i16 zeroext %conv143, %struct.ac97_pcm* getelementptr inbounds ([6 x %struct.ac97_pcm], [6 x %struct.ac97_pcm]* @ac97_pcm_defs, i32 0, i32 0))
  store i32 %call144, i32* %err, align 4
  %99 = load i32, i32* %err, align 4
  %cmp145 = icmp slt i32 %99, 0
  br i1 %cmp145, label %if.then147, label %if.end148

if.then147:                                       ; preds = %if.end142
  br label %__err

if.end148:                                        ; preds = %if.end142
  %100 = load %struct.snd_ac97_bus*, %struct.snd_ac97_bus** %pbus, align 8
  %pcms = getelementptr inbounds %struct.snd_ac97_bus, %struct.snd_ac97_bus* %100, i32 0, i32 10
  %101 = load %struct.ac97_pcm*, %struct.ac97_pcm** %pcms, align 8
  %arrayidx149 = getelementptr inbounds %struct.ac97_pcm, %struct.ac97_pcm* %101, i64 0
  %102 = load %struct.intel8x0*, %struct.intel8x0** %chip.addr, align 8
  %ichd = getelementptr inbounds %struct.intel8x0, %struct.intel8x0* %102, i32 0, i32 8
  %arrayidx150 = getelementptr inbounds [6 x %struct.ichdev], [6 x %struct.ichdev]* %ichd, i64 0, i64 1
  %pcm = getelementptr inbounds %struct.ichdev, %struct.ichdev* %arrayidx150, i32 0, i32 23
  store %struct.ac97_pcm* %arrayidx149, %struct.ac97_pcm** %pcm, align 8
  %103 = load %struct.snd_ac97_bus*, %struct.snd_ac97_bus** %pbus, align 8
  %pcms151 = getelementptr inbounds %struct.snd_ac97_bus, %struct.snd_ac97_bus* %103, i32 0, i32 10
  %104 = load %struct.ac97_pcm*, %struct.ac97_pcm** %pcms151, align 8
  %arrayidx152 = getelementptr inbounds %struct.ac97_pcm, %struct.ac97_pcm* %104, i64 1
  %105 = load %struct.intel8x0*, %struct.intel8x0** %chip.addr, align 8
  %ichd153 = getelementptr inbounds %struct.intel8x0, %struct.intel8x0* %105, i32 0, i32 8
  %arrayidx154 = getelementptr inbounds [6 x %struct.ichdev], [6 x %struct.ichdev]* %ichd153, i64 0, i64 0
  %pcm155 = getelementptr inbounds %struct.ichdev, %struct.ichdev* %arrayidx154, i32 0, i32 23
  store %struct.ac97_pcm* %arrayidx152, %struct.ac97_pcm** %pcm155, align 8
  %106 = load %struct.snd_ac97_bus*, %struct.snd_ac97_bus** %pbus, align 8
  %pcms156 = getelementptr inbounds %struct.snd_ac97_bus, %struct.snd_ac97_bus* %106, i32 0, i32 10
  %107 = load %struct.ac97_pcm*, %struct.ac97_pcm** %pcms156, align 8
  %arrayidx157 = getelementptr inbounds %struct.ac97_pcm, %struct.ac97_pcm* %107, i64 2
  %108 = load %struct.intel8x0*, %struct.intel8x0** %chip.addr, align 8
  %ichd158 = getelementptr inbounds %struct.intel8x0, %struct.intel8x0* %108, i32 0, i32 8
  %arrayidx159 = getelementptr inbounds [6 x %struct.ichdev], [6 x %struct.ichdev]* %ichd158, i64 0, i64 2
  %pcm160 = getelementptr inbounds %struct.ichdev, %struct.ichdev* %arrayidx159, i32 0, i32 23
  store %struct.ac97_pcm* %arrayidx157, %struct.ac97_pcm** %pcm160, align 8
  %109 = load %struct.intel8x0*, %struct.intel8x0** %chip.addr, align 8
  %spdif_idx161 = getelementptr inbounds %struct.intel8x0, %struct.intel8x0* %109, i32 0, i32 10
  %110 = load i32, i32* %spdif_idx161, align 4
  %cmp162 = icmp sge i32 %110, 0
  br i1 %cmp162, label %if.then164, label %if.end172

if.then164:                                       ; preds = %if.end148
  %111 = load %struct.snd_ac97_bus*, %struct.snd_ac97_bus** %pbus, align 8
  %pcms165 = getelementptr inbounds %struct.snd_ac97_bus, %struct.snd_ac97_bus* %111, i32 0, i32 10
  %112 = load %struct.ac97_pcm*, %struct.ac97_pcm** %pcms165, align 8
  %arrayidx166 = getelementptr inbounds %struct.ac97_pcm, %struct.ac97_pcm* %112, i64 3
  %113 = load %struct.intel8x0*, %struct.intel8x0** %chip.addr, align 8
  %ichd167 = getelementptr inbounds %struct.intel8x0, %struct.intel8x0* %113, i32 0, i32 8
  %114 = load %struct.intel8x0*, %struct.intel8x0** %chip.addr, align 8
  %spdif_idx168 = getelementptr inbounds %struct.intel8x0, %struct.intel8x0* %114, i32 0, i32 10
  %115 = load i32, i32* %spdif_idx168, align 4
  %idxprom169 = sext i32 %115 to i64
  %arrayidx170 = getelementptr inbounds [6 x %struct.ichdev], [6 x %struct.ichdev]* %ichd167, i64 0, i64 %idxprom169
  %pcm171 = getelementptr inbounds %struct.ichdev, %struct.ichdev* %arrayidx170, i32 0, i32 23
  store %struct.ac97_pcm* %arrayidx166, %struct.ac97_pcm** %pcm171, align 8
  br label %if.end172

if.end172:                                        ; preds = %if.then164, %if.end148
  %116 = load %struct.intel8x0*, %struct.intel8x0** %chip.addr, align 8
  %device_type173 = getelementptr inbounds %struct.intel8x0, %struct.intel8x0* %116, i32 0, i32 0
  %117 = load i32, i32* %device_type173, align 8
  %cmp174 = icmp eq i32 %117, 1
  br i1 %cmp174, label %if.then176, label %if.end187

if.then176:                                       ; preds = %if.end172
  %118 = load %struct.snd_ac97_bus*, %struct.snd_ac97_bus** %pbus, align 8
  %pcms177 = getelementptr inbounds %struct.snd_ac97_bus, %struct.snd_ac97_bus* %118, i32 0, i32 10
  %119 = load %struct.ac97_pcm*, %struct.ac97_pcm** %pcms177, align 8
  %arrayidx178 = getelementptr inbounds %struct.ac97_pcm, %struct.ac97_pcm* %119, i64 4
  %120 = load %struct.intel8x0*, %struct.intel8x0** %chip.addr, align 8
  %ichd179 = getelementptr inbounds %struct.intel8x0, %struct.intel8x0* %120, i32 0, i32 8
  %arrayidx180 = getelementptr inbounds [6 x %struct.ichdev], [6 x %struct.ichdev]* %ichd179, i64 0, i64 4
  %pcm181 = getelementptr inbounds %struct.ichdev, %struct.ichdev* %arrayidx180, i32 0, i32 23
  store %struct.ac97_pcm* %arrayidx178, %struct.ac97_pcm** %pcm181, align 8
  %121 = load %struct.snd_ac97_bus*, %struct.snd_ac97_bus** %pbus, align 8
  %pcms182 = getelementptr inbounds %struct.snd_ac97_bus, %struct.snd_ac97_bus* %121, i32 0, i32 10
  %122 = load %struct.ac97_pcm*, %struct.ac97_pcm** %pcms182, align 8
  %arrayidx183 = getelementptr inbounds %struct.ac97_pcm, %struct.ac97_pcm* %122, i64 5
  %123 = load %struct.intel8x0*, %struct.intel8x0** %chip.addr, align 8
  %ichd184 = getelementptr inbounds %struct.intel8x0, %struct.intel8x0* %123, i32 0, i32 8
  %arrayidx185 = getelementptr inbounds [6 x %struct.ichdev], [6 x %struct.ichdev]* %ichd184, i64 0, i64 3
  %pcm186 = getelementptr inbounds %struct.ichdev, %struct.ichdev* %arrayidx185, i32 0, i32 23
  store %struct.ac97_pcm* %arrayidx183, %struct.ac97_pcm** %pcm186, align 8
  br label %if.end187

if.end187:                                        ; preds = %if.then176, %if.end172
  %124 = load %struct.intel8x0*, %struct.intel8x0** %chip.addr, align 8
  %device_type188 = getelementptr inbounds %struct.intel8x0, %struct.intel8x0* %124, i32 0, i32 0
  %125 = load i32, i32* %device_type188, align 8
  %cmp189 = icmp eq i32 %125, 1
  br i1 %cmp189, label %if.then191, label %if.end241

if.then191:                                       ; preds = %if.end187
  %126 = load %struct.intel8x0*, %struct.intel8x0** %chip.addr, align 8
  %ichd193 = getelementptr inbounds %struct.intel8x0, %struct.intel8x0* %126, i32 0, i32 8
  %arrayidx194 = getelementptr inbounds [6 x %struct.ichdev], [6 x %struct.ichdev]* %ichd193, i64 0, i64 4
  %pcm195 = getelementptr inbounds %struct.ichdev, %struct.ichdev* %arrayidx194, i32 0, i32 23
  %127 = load %struct.ac97_pcm*, %struct.ac97_pcm** %pcm195, align 8
  store %struct.ac97_pcm* %127, %struct.ac97_pcm** %pcm192, align 8
  %128 = load %struct.intel8x0*, %struct.intel8x0** %chip.addr, align 8
  %call197 = call zeroext i8 @igetbyte(%struct.intel8x0* %128, i32 128)
  store i8 %call197, i8* %tmp196, align 1
  %129 = load i8, i8* %tmp196, align 1
  %conv198 = zext i8 %129 to i32
  %and199 = and i32 %conv198, -241
  %conv200 = trunc i32 %and199 to i8
  store i8 %conv200, i8* %tmp196, align 1
  %130 = load %struct.ac97_pcm*, %struct.ac97_pcm** %pcm192, align 8
  %tobool201 = icmp ne %struct.ac97_pcm* %130, null
  br i1 %tobool201, label %if.then202, label %if.else236

if.then202:                                       ; preds = %if.then191
  %131 = load i8, i8* %tmp196, align 1
  %conv203 = zext i8 %131 to i32
  %or204 = or i32 %conv203, 8
  %conv205 = trunc i32 %or204 to i8
  store i8 %conv205, i8* %tmp196, align 1
  %132 = load %struct.intel8x0*, %struct.intel8x0** %chip.addr, align 8
  %ac97_sdin206 = getelementptr inbounds %struct.intel8x0, %struct.intel8x0* %132, i32 0, i32 14
  %arrayidx207 = getelementptr inbounds [3 x i32], [3 x i32]* %ac97_sdin206, i64 0, i64 0
  %133 = load i32, i32* %arrayidx207, align 8
  %shl = shl i32 %133, 4
  %134 = load i8, i8* %tmp196, align 1
  %conv208 = zext i8 %134 to i32
  %or209 = or i32 %conv208, %shl
  %conv210 = trunc i32 %or209 to i8
  store i8 %conv210, i8* %tmp196, align 1
  store i32 1, i32* %i, align 4
  br label %for.cond211

for.cond211:                                      ; preds = %for.inc233, %if.then202
  %135 = load i32, i32* %i, align 4
  %cmp212 = icmp ult i32 %135, 4
  br i1 %cmp212, label %for.body214, label %for.end235.loopexit

for.body214:                                      ; preds = %for.cond211
  %136 = load %struct.ac97_pcm*, %struct.ac97_pcm** %pcm192, align 8
  %r = getelementptr inbounds %struct.ac97_pcm, %struct.ac97_pcm* %136, i32 0, i32 5
  %arrayidx215 = getelementptr inbounds [2 x %struct.anon.69], [2 x %struct.anon.69]* %r, i64 0, i64 0
  %codec = getelementptr inbounds %struct.anon.69, %struct.anon.69* %arrayidx215, i32 0, i32 3
  %137 = load i32, i32* %i, align 4
  %idxprom216 = zext i32 %137 to i64
  %arrayidx217 = getelementptr inbounds [4 x %struct.snd_ac97*], [4 x %struct.snd_ac97*]* %codec, i64 0, i64 %idxprom216
  %138 = load %struct.snd_ac97*, %struct.snd_ac97** %arrayidx217, align 8
  %tobool218 = icmp ne %struct.snd_ac97* %138, null
  br i1 %tobool218, label %if.then219, label %if.end232

if.then219:                                       ; preds = %for.body214
  %139 = load %struct.intel8x0*, %struct.intel8x0** %chip.addr, align 8
  %ac97_sdin220 = getelementptr inbounds %struct.intel8x0, %struct.intel8x0* %139, i32 0, i32 14
  %140 = load %struct.ac97_pcm*, %struct.ac97_pcm** %pcm192, align 8
  %r221 = getelementptr inbounds %struct.ac97_pcm, %struct.ac97_pcm* %140, i32 0, i32 5
  %arrayidx222 = getelementptr inbounds [2 x %struct.anon.69], [2 x %struct.anon.69]* %r221, i64 0, i64 0
  %codec223 = getelementptr inbounds %struct.anon.69, %struct.anon.69* %arrayidx222, i32 0, i32 3
  %arrayidx224 = getelementptr inbounds [4 x %struct.snd_ac97*], [4 x %struct.snd_ac97*]* %codec223, i64 0, i64 1
  %141 = load %struct.snd_ac97*, %struct.snd_ac97** %arrayidx224, align 8
  %num225 = getelementptr inbounds %struct.snd_ac97, %struct.snd_ac97* %141, i32 0, i32 11
  %142 = load i16, i16* %num225, align 8
  %idxprom226 = zext i16 %142 to i64
  %arrayidx227 = getelementptr inbounds [3 x i32], [3 x i32]* %ac97_sdin220, i64 0, i64 %idxprom226
  %143 = load i32, i32* %arrayidx227, align 4
  %shl228 = shl i32 %143, 6
  %144 = load i8, i8* %tmp196, align 1
  %conv229 = zext i8 %144 to i32
  %or230 = or i32 %conv229, %shl228
  %conv231 = trunc i32 %or230 to i8
  store i8 %conv231, i8* %tmp196, align 1
  br label %for.end235

if.end232:                                        ; preds = %for.body214
  br label %for.inc233

for.inc233:                                       ; preds = %if.end232
  %145 = load i32, i32* %i, align 4
  %inc234 = add i32 %145, 1
  store i32 %inc234, i32* %i, align 4
  br label %for.cond211

for.end235.loopexit:                              ; preds = %for.cond211
  br label %for.end235

for.end235:                                       ; preds = %for.end235.loopexit, %if.then219
  br label %if.end240

if.else236:                                       ; preds = %if.then191
  %146 = load i8, i8* %tmp196, align 1
  %conv237 = zext i8 %146 to i32
  %and238 = and i32 %conv237, -9
  %conv239 = trunc i32 %and238 to i8
  store i8 %conv239, i8* %tmp196, align 1
  br label %if.end240

if.end240:                                        ; preds = %if.else236, %for.end235
  %147 = load %struct.intel8x0*, %struct.intel8x0** %chip.addr, align 8
  %148 = load i8, i8* %tmp196, align 1
  call void @iputbyte(%struct.intel8x0* %147, i32 128, i8 zeroext %148)
  br label %if.end241

if.end241:                                        ; preds = %if.end240, %if.end187
  %149 = load %struct.snd_ac97_bus*, %struct.snd_ac97_bus** %pbus, align 8
  %pcms242 = getelementptr inbounds %struct.snd_ac97_bus, %struct.snd_ac97_bus* %149, i32 0, i32 10
  %150 = load %struct.ac97_pcm*, %struct.ac97_pcm** %pcms242, align 8
  %arrayidx243 = getelementptr inbounds %struct.ac97_pcm, %struct.ac97_pcm* %150, i64 0
  %r244 = getelementptr inbounds %struct.ac97_pcm, %struct.ac97_pcm* %arrayidx243, i32 0, i32 5
  %arrayidx245 = getelementptr inbounds [2 x %struct.anon.69], [2 x %struct.anon.69]* %r244, i64 0, i64 0
  %slots = getelementptr inbounds %struct.anon.69, %struct.anon.69* %arrayidx245, i32 0, i32 0
  %151 = load i16, i16* %slots, align 8
  %conv246 = zext i16 %151 to i32
  %and247 = and i32 %conv246, 128
  %tobool248 = icmp ne i32 %and247, 0
  br i1 %tobool248, label %if.then249, label %if.end275

if.then249:                                       ; preds = %if.end241
  %152 = load %struct.intel8x0*, %struct.intel8x0** %chip.addr, align 8
  %multi4 = getelementptr inbounds %struct.intel8x0, %struct.intel8x0* %152, i32 0, i32 9
  %bf.load250 = load i16, i16* %multi4, align 8
  %bf.clear251 = and i16 %bf.load250, -2
  %bf.set252 = or i16 %bf.clear251, 1
  store i16 %bf.set252, i16* %multi4, align 8
  %153 = load %struct.snd_ac97_bus*, %struct.snd_ac97_bus** %pbus, align 8
  %pcms253 = getelementptr inbounds %struct.snd_ac97_bus, %struct.snd_ac97_bus* %153, i32 0, i32 10
  %154 = load %struct.ac97_pcm*, %struct.ac97_pcm** %pcms253, align 8
  %arrayidx254 = getelementptr inbounds %struct.ac97_pcm, %struct.ac97_pcm* %154, i64 0
  %r255 = getelementptr inbounds %struct.ac97_pcm, %struct.ac97_pcm* %arrayidx254, i32 0, i32 5
  %arrayidx256 = getelementptr inbounds [2 x %struct.anon.69], [2 x %struct.anon.69]* %r255, i64 0, i64 0
  %slots257 = getelementptr inbounds %struct.anon.69, %struct.anon.69* %arrayidx256, i32 0, i32 0
  %155 = load i16, i16* %slots257, align 8
  %conv258 = zext i16 %155 to i32
  %and259 = and i32 %conv258, 512
  %tobool260 = icmp ne i32 %and259, 0
  br i1 %tobool260, label %if.then261, label %if.end274

if.then261:                                       ; preds = %if.then249
  %156 = load %struct.intel8x0*, %struct.intel8x0** %chip.addr, align 8
  %multi6 = getelementptr inbounds %struct.intel8x0, %struct.intel8x0* %156, i32 0, i32 9
  %bf.load262 = load i16, i16* %multi6, align 8
  %bf.clear263 = and i16 %bf.load262, -3
  %bf.set264 = or i16 %bf.clear263, 2
  store i16 %bf.set264, i16* %multi6, align 8
  %157 = load %struct.intel8x0*, %struct.intel8x0** %chip.addr, align 8
  %ac97265 = getelementptr inbounds %struct.intel8x0, %struct.intel8x0* %157, i32 0, i32 13
  %arrayidx266 = getelementptr inbounds [3 x %struct.snd_ac97*], [3 x %struct.snd_ac97*]* %ac97265, i64 0, i64 0
  %158 = load %struct.snd_ac97*, %struct.snd_ac97** %arrayidx266, align 8
  %flags = getelementptr inbounds %struct.snd_ac97, %struct.snd_ac97* %158, i32 0, i32 19
  %159 = load i32, i32* %flags, align 4
  %and267 = and i32 %159, 524288
  %tobool268 = icmp ne i32 %and267, 0
  br i1 %tobool268, label %if.then269, label %if.end273

if.then269:                                       ; preds = %if.then261
  %160 = load %struct.intel8x0*, %struct.intel8x0** %chip.addr, align 8
  %multi8 = getelementptr inbounds %struct.intel8x0, %struct.intel8x0* %160, i32 0, i32 9
  %bf.load270 = load i16, i16* %multi8, align 8
  %bf.clear271 = and i16 %bf.load270, -5
  %bf.set272 = or i16 %bf.clear271, 4
  store i16 %bf.set272, i16* %multi8, align 8
  br label %if.end273

if.end273:                                        ; preds = %if.then269, %if.then261
  br label %if.end274

if.end274:                                        ; preds = %if.end273, %if.then249
  br label %if.end275

if.end275:                                        ; preds = %if.end274, %if.end241
  %161 = load %struct.snd_ac97_bus*, %struct.snd_ac97_bus** %pbus, align 8
  %pcms276 = getelementptr inbounds %struct.snd_ac97_bus, %struct.snd_ac97_bus* %161, i32 0, i32 10
  %162 = load %struct.ac97_pcm*, %struct.ac97_pcm** %pcms276, align 8
  %arrayidx277 = getelementptr inbounds %struct.ac97_pcm, %struct.ac97_pcm* %162, i64 0
  %r278 = getelementptr inbounds %struct.ac97_pcm, %struct.ac97_pcm* %arrayidx277, i32 0, i32 5
  %arrayidx279 = getelementptr inbounds [2 x %struct.anon.69], [2 x %struct.anon.69]* %r278, i64 0, i64 1
  %rslots = getelementptr inbounds %struct.anon.69, %struct.anon.69* %arrayidx279, i32 0, i32 1
  %arrayidx280 = getelementptr inbounds [4 x i16], [4 x i16]* %rslots, i64 0, i64 0
  %163 = load i16, i16* %arrayidx280, align 2
  %tobool281 = icmp ne i16 %163, 0
  br i1 %tobool281, label %if.then282, label %if.end287

if.then282:                                       ; preds = %if.end275
  %164 = load %struct.intel8x0*, %struct.intel8x0** %chip.addr, align 8
  %dra283 = getelementptr inbounds %struct.intel8x0, %struct.intel8x0* %164, i32 0, i32 9
  %bf.load284 = load i16, i16* %dra283, align 8
  %bf.clear285 = and i16 %bf.load284, -9
  %bf.set286 = or i16 %bf.clear285, 8
  store i16 %bf.set286, i16* %dra283, align 8
  br label %if.end287

if.end287:                                        ; preds = %if.then282, %if.end275
  %165 = load %struct.intel8x0*, %struct.intel8x0** %chip.addr, align 8
  %device_type288 = getelementptr inbounds %struct.intel8x0, %struct.intel8x0* %165, i32 0, i32 0
  %166 = load i32, i32* %device_type288, align 8
  %cmp289 = icmp eq i32 %166, 1
  br i1 %cmp289, label %if.then291, label %if.end301

if.then291:                                       ; preds = %if.end287
  %167 = load %struct.intel8x0*, %struct.intel8x0** %chip.addr, align 8
  %call292 = call i32 @igetdword(%struct.intel8x0* %167, i32 48)
  %and293 = and i32 %call292, 12582912
  %cmp294 = icmp eq i32 %and293, 4194304
  br i1 %cmp294, label %if.then296, label %if.end300

if.then296:                                       ; preds = %if.then291
  %168 = load %struct.intel8x0*, %struct.intel8x0** %chip.addr, align 8
  %smp20bit = getelementptr inbounds %struct.intel8x0, %struct.intel8x0* %168, i32 0, i32 9
  %bf.load297 = load i16, i16* %smp20bit, align 8
  %bf.clear298 = and i16 %bf.load297, -17
  %bf.set299 = or i16 %bf.clear298, 16
  store i16 %bf.set299, i16* %smp20bit, align 8
  br label %if.end300

if.end300:                                        ; preds = %if.then296, %if.then291
  br label %if.end301

if.end301:                                        ; preds = %if.end300, %if.end287
  %169 = load %struct.intel8x0*, %struct.intel8x0** %chip.addr, align 8
  %device_type302 = getelementptr inbounds %struct.intel8x0, %struct.intel8x0* %169, i32 0, i32 0
  %170 = load i32, i32* %device_type302, align 8
  %cmp303 = icmp eq i32 %170, 4
  br i1 %cmp303, label %land.lhs.true305, label %if.end313

land.lhs.true305:                                 ; preds = %if.end301
  %171 = load i32, i32* @spdif_aclink, align 4
  %tobool306 = icmp ne i32 %171, 0
  br i1 %tobool306, label %if.end313, label %if.then307

if.then307:                                       ; preds = %land.lhs.true305
  %172 = load %struct.intel8x0*, %struct.intel8x0** %chip.addr, align 8
  %ichd308 = getelementptr inbounds %struct.intel8x0, %struct.intel8x0* %172, i32 0, i32 8
  %173 = load %struct.intel8x0*, %struct.intel8x0** %chip.addr, align 8
  %spdif_idx309 = getelementptr inbounds %struct.intel8x0, %struct.intel8x0* %173, i32 0, i32 10
  %174 = load i32, i32* %spdif_idx309, align 4
  %idxprom310 = sext i32 %174 to i64
  %arrayidx311 = getelementptr inbounds [6 x %struct.ichdev], [6 x %struct.ichdev]* %ichd308, i64 0, i64 %idxprom310
  %pcm312 = getelementptr inbounds %struct.ichdev, %struct.ichdev* %arrayidx311, i32 0, i32 23
  %175 = load %struct.ac97_pcm*, %struct.ac97_pcm** %pcm312, align 8
  %rates = getelementptr inbounds %struct.ac97_pcm, %struct.ac97_pcm* %175, i32 0, i32 4
  store i32 128, i32* %rates, align 8
  br label %if.end313

if.end313:                                        ; preds = %if.then307, %land.lhs.true305, %if.end301
  %176 = load %struct.intel8x0*, %struct.intel8x0** %chip.addr, align 8
  %device_type314 = getelementptr inbounds %struct.intel8x0, %struct.intel8x0* %176, i32 0, i32 0
  %177 = load i32, i32* %device_type314, align 8
  %cmp315 = icmp eq i32 %177, 1
  br i1 %cmp315, label %land.lhs.true317, label %if.end326

land.lhs.true317:                                 ; preds = %if.end313
  %178 = load i32, i32* @spdif_aclink, align 4
  %tobool318 = icmp ne i32 %178, 0
  br i1 %tobool318, label %if.end326, label %if.then319

if.then319:                                       ; preds = %land.lhs.true317
  %179 = load %struct.intel8x0*, %struct.intel8x0** %chip.addr, align 8
  %call320 = call i32 @igetdword(%struct.intel8x0* %179, i32 44)
  %and321 = and i32 %call320, 1073741823
  store i32 %and321, i32* %val, align 4
  %180 = load i32, i32* %val, align 4
  %or322 = or i32 %180, -1073741824
  store i32 %or322, i32* %val, align 4
  %181 = load %struct.intel8x0*, %struct.intel8x0** %chip.addr, align 8
  %182 = load i32, i32* %val, align 4
  call void @iputdword(%struct.intel8x0* %181, i32 44, i32 %182)
  %183 = load %struct.intel8x0*, %struct.intel8x0** %chip.addr, align 8
  %ac97323 = getelementptr inbounds %struct.intel8x0, %struct.intel8x0* %183, i32 0, i32 13
  %arrayidx324 = getelementptr inbounds [3 x %struct.snd_ac97*], [3 x %struct.snd_ac97*]* %ac97323, i64 0, i64 0
  %184 = load %struct.snd_ac97*, %struct.snd_ac97** %arrayidx324, align 8
  %call325 = call i32 @snd_ac97_update_bits(%struct.snd_ac97* %184, i16 zeroext 42, i16 zeroext 48, i16 zeroext 48)
  br label %if.end326

if.end326:                                        ; preds = %if.then319, %land.lhs.true317, %if.end313
  %185 = load %struct.intel8x0*, %struct.intel8x0** %chip.addr, align 8
  %in_ac97_init327 = getelementptr inbounds %struct.intel8x0, %struct.intel8x0* %185, i32 0, i32 9
  %bf.load328 = load i16, i16* %in_ac97_init327, align 8
  %bf.clear329 = and i16 %bf.load328, -33
  store i16 %bf.clear329, i16* %in_ac97_init327, align 8
  store i32 0, i32* %retval, align 4
  br label %return

__err:                                            ; preds = %if.then147, %if.then116, %if.then75
  %186 = load %struct.intel8x0*, %struct.intel8x0** %chip.addr, align 8
  %device_type330 = getelementptr inbounds %struct.intel8x0, %struct.intel8x0* %186, i32 0, i32 0
  %187 = load i32, i32* %device_type330, align 8
  %cmp331 = icmp ne i32 %187, 3
  br i1 %cmp331, label %if.then333, label %if.end336

if.then333:                                       ; preds = %__err
  %188 = load %struct.intel8x0*, %struct.intel8x0** %chip.addr, align 8
  %189 = load %struct.intel8x0*, %struct.intel8x0** %chip.addr, align 8
  %call334 = call i32 @igetdword(%struct.intel8x0* %189, i32 44)
  %and335 = and i32 %call334, -3
  call void @iputdword(%struct.intel8x0* %188, i32 44, i32 %and335)
  br label %if.end336

if.end336:                                        ; preds = %if.then333, %__err
  %190 = load i32, i32* %err, align 4
  store i32 %190, i32* %retval, align 4
  br label %return

return:                                           ; preds = %if.end336, %if.end326
  %191 = load i32, i32* %retval, align 4
  ret i32 %191
}

; Function Attrs: noinline nounwind optnone uwtable
define internal i32 @snd_intel8x0_pcm(%struct.intel8x0* %chip) #0 {
entry:
  %retval = alloca i32, align 4
  %chip.addr = alloca %struct.intel8x0*, align 8
  %i = alloca i32, align 4
  %tblsize = alloca i32, align 4
  %device = alloca i32, align 4
  %err = alloca i32, align 4
  %tbl = alloca %struct.ich_pcm_table*, align 8
  %rec = alloca %struct.ich_pcm_table*, align 8
  store %struct.intel8x0* %chip, %struct.intel8x0** %chip.addr, align 8
  %0 = load %struct.intel8x0*, %struct.intel8x0** %chip.addr, align 8
  %device_type = getelementptr inbounds %struct.intel8x0, %struct.intel8x0* %0, i32 0, i32 0
  %1 = load i32, i32* %device_type, align 8
  br label %NodeBlock3

NodeBlock3:                                       ; preds = %entry
  %Pivot4 = icmp slt i32 %1, 3
  br i1 %Pivot4, label %LeafBlock, label %NodeBlock

NodeBlock:                                        ; preds = %NodeBlock3
  %Pivot = icmp slt i32 %1, 4
  br i1 %Pivot, label %sw.bb6, label %LeafBlock1

LeafBlock1:                                       ; preds = %NodeBlock
  %SwitchLeaf2 = icmp eq i32 %1, 4
  br i1 %SwitchLeaf2, label %sw.bb1, label %NewDefault

LeafBlock:                                        ; preds = %NodeBlock3
  %SwitchLeaf = icmp eq i32 %1, 1
  br i1 %SwitchLeaf, label %sw.bb, label %NewDefault

sw.bb:                                            ; preds = %LeafBlock
  store %struct.ich_pcm_table* getelementptr inbounds ([5 x %struct.ich_pcm_table], [5 x %struct.ich_pcm_table]* @intel_pcms, i32 0, i32 0), %struct.ich_pcm_table** %tbl, align 8
  store i32 5, i32* %tblsize, align 4
  %2 = load i32, i32* @spdif_aclink, align 4
  %tobool = icmp ne i32 %2, 0
  br i1 %tobool, label %if.then, label %if.end

if.then:                                          ; preds = %sw.bb
  %3 = load i32, i32* %tblsize, align 4
  %dec = add nsw i32 %3, -1
  store i32 %dec, i32* %tblsize, align 4
  br label %if.end

if.end:                                           ; preds = %if.then, %sw.bb
  br label %sw.epilog

sw.bb1:                                           ; preds = %LeafBlock1
  store %struct.ich_pcm_table* getelementptr inbounds ([3 x %struct.ich_pcm_table], [3 x %struct.ich_pcm_table]* @nforce_pcms, i32 0, i32 0), %struct.ich_pcm_table** %tbl, align 8
  store i32 3, i32* %tblsize, align 4
  %4 = load i32, i32* @spdif_aclink, align 4
  %tobool2 = icmp ne i32 %4, 0
  br i1 %tobool2, label %if.then3, label %if.end5

if.then3:                                         ; preds = %sw.bb1
  %5 = load i32, i32* %tblsize, align 4
  %dec4 = add nsw i32 %5, -1
  store i32 %dec4, i32* %tblsize, align 4
  br label %if.end5

if.end5:                                          ; preds = %if.then3, %sw.bb1
  br label %sw.epilog

sw.bb6:                                           ; preds = %NodeBlock
  store %struct.ich_pcm_table* getelementptr inbounds ([3 x %struct.ich_pcm_table], [3 x %struct.ich_pcm_table]* @ali_pcms, i32 0, i32 0), %struct.ich_pcm_table** %tbl, align 8
  store i32 3, i32* %tblsize, align 4
  br label %sw.epilog

NewDefault:                                       ; preds = %LeafBlock1, %LeafBlock
  br label %sw.default

sw.default:                                       ; preds = %NewDefault
  store %struct.ich_pcm_table* getelementptr inbounds ([5 x %struct.ich_pcm_table], [5 x %struct.ich_pcm_table]* @intel_pcms, i32 0, i32 0), %struct.ich_pcm_table** %tbl, align 8
  store i32 2, i32* %tblsize, align 4
  br label %sw.epilog

sw.epilog:                                        ; preds = %sw.default, %sw.bb6, %if.end5, %if.end
  store i32 0, i32* %device, align 4
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %sw.epilog
  %6 = load i32, i32* %i, align 4
  %7 = load i32, i32* %tblsize, align 4
  %cmp = icmp slt i32 %6, %7
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %8 = load %struct.ich_pcm_table*, %struct.ich_pcm_table** %tbl, align 8
  %9 = load i32, i32* %i, align 4
  %idx.ext = sext i32 %9 to i64
  %add.ptr = getelementptr inbounds %struct.ich_pcm_table, %struct.ich_pcm_table* %8, i64 %idx.ext
  store %struct.ich_pcm_table* %add.ptr, %struct.ich_pcm_table** %rec, align 8
  %10 = load i32, i32* %i, align 4
  %cmp7 = icmp sgt i32 %10, 0
  br i1 %cmp7, label %land.lhs.true, label %if.end14

land.lhs.true:                                    ; preds = %for.body
  %11 = load %struct.ich_pcm_table*, %struct.ich_pcm_table** %rec, align 8
  %ac97_idx = getelementptr inbounds %struct.ich_pcm_table, %struct.ich_pcm_table* %11, i32 0, i32 5
  %12 = load i32, i32* %ac97_idx, align 8
  %tobool8 = icmp ne i32 %12, 0
  br i1 %tobool8, label %if.then9, label %if.end14

if.then9:                                         ; preds = %land.lhs.true
  %13 = load %struct.intel8x0*, %struct.intel8x0** %chip.addr, align 8
  %ichd = getelementptr inbounds %struct.intel8x0, %struct.intel8x0* %13, i32 0, i32 8
  %14 = load %struct.ich_pcm_table*, %struct.ich_pcm_table** %rec, align 8
  %ac97_idx10 = getelementptr inbounds %struct.ich_pcm_table, %struct.ich_pcm_table* %14, i32 0, i32 5
  %15 = load i32, i32* %ac97_idx10, align 8
  %idxprom = sext i32 %15 to i64
  %arrayidx = getelementptr inbounds [6 x %struct.ichdev], [6 x %struct.ichdev]* %ichd, i64 0, i64 %idxprom
  %pcm = getelementptr inbounds %struct.ichdev, %struct.ichdev* %arrayidx, i32 0, i32 23
  %16 = load %struct.ac97_pcm*, %struct.ac97_pcm** %pcm, align 8
  %tobool11 = icmp ne %struct.ac97_pcm* %16, null
  br i1 %tobool11, label %if.end13, label %if.then12

if.then12:                                        ; preds = %if.then9
  br label %for.inc

if.end13:                                         ; preds = %if.then9
  br label %if.end14

if.end14:                                         ; preds = %if.end13, %land.lhs.true, %for.body
  %17 = load %struct.intel8x0*, %struct.intel8x0** %chip.addr, align 8
  %18 = load i32, i32* %device, align 4
  %19 = load %struct.ich_pcm_table*, %struct.ich_pcm_table** %rec, align 8
  %call = call i32 @snd_intel8x0_pcm1(%struct.intel8x0* %17, i32 %18, %struct.ich_pcm_table* %19)
  store i32 %call, i32* %err, align 4
  %20 = load i32, i32* %err, align 4
  %cmp15 = icmp slt i32 %20, 0
  br i1 %cmp15, label %if.then16, label %if.end17

if.then16:                                        ; preds = %if.end14
  %21 = load i32, i32* %err, align 4
  store i32 %21, i32* %retval, align 4
  br label %return

if.end17:                                         ; preds = %if.end14
  %22 = load i32, i32* %device, align 4
  %inc = add nsw i32 %22, 1
  store i32 %inc, i32* %device, align 4
  br label %for.inc

for.inc:                                          ; preds = %if.end17, %if.then12
  %23 = load i32, i32* %i, align 4
  %inc18 = add nsw i32 %23, 1
  store i32 %inc18, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %24 = load i32, i32* %device, align 4
  %25 = load %struct.intel8x0*, %struct.intel8x0** %chip.addr, align 8
  %pcm_devs = getelementptr inbounds %struct.intel8x0, %struct.intel8x0* %25, i32 0, i32 6
  store i32 %24, i32* %pcm_devs, align 8
  store i32 0, i32* %retval, align 4
  br label %return

return:                                           ; preds = %for.end, %if.then16
  %26 = load i32, i32* %retval, align 4
  ret i32 %26
}

; Function Attrs: noinline nounwind optnone uwtable
define internal void @snd_intel8x0_proc_init(%struct.intel8x0* %chip) #0 {
entry:
  %chip.addr = alloca %struct.intel8x0*, align 8
  %entry1 = alloca %struct.snd_info_entry*, align 8
  store %struct.intel8x0* %chip, %struct.intel8x0** %chip.addr, align 8
  %0 = load %struct.intel8x0*, %struct.intel8x0** %chip.addr, align 8
  %card = getelementptr inbounds %struct.intel8x0, %struct.intel8x0* %0, i32 0, i32 5
  %1 = load %struct.snd_card*, %struct.snd_card** %card, align 8
  %call = call i32 @snd_card_proc_new(%struct.snd_card* %1, i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str, i32 0, i32 0), %struct.snd_info_entry** %entry1)
  %tobool = icmp ne i32 %call, 0
  br i1 %tobool, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  %2 = load %struct.snd_info_entry*, %struct.snd_info_entry** %entry1, align 8
  %3 = load %struct.intel8x0*, %struct.intel8x0** %chip.addr, align 8
  %4 = bitcast %struct.intel8x0* %3 to i8*
  call void @snd_info_set_text_ops(%struct.snd_info_entry* %2, i8* %4, void (%struct.snd_info_entry*, %struct.snd_info_buffer*)* @snd_intel8x0_proc_read)
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  ret void
}

declare i32 @snprintf(i8*, i64, i8*, ...) #1

declare i8* @snd_ac97_get_short_name(%struct.snd_ac97*) #1

; Function Attrs: noinline nounwind optnone uwtable
define internal i32 @intel8x0_in_clock_list(%struct.intel8x0* %chip) #0 {
entry:
  %retval = alloca i32, align 4
  %chip.addr = alloca %struct.intel8x0*, align 8
  %pci = alloca %struct.pci_dev*, align 8
  %wl = alloca %struct.snd_pci_quirk*, align 8
  store %struct.intel8x0* %chip, %struct.intel8x0** %chip.addr, align 8
  %0 = load %struct.intel8x0*, %struct.intel8x0** %chip.addr, align 8
  %pci1 = getelementptr inbounds %struct.intel8x0, %struct.intel8x0* %0, i32 0, i32 4
  %1 = load %struct.pci_dev*, %struct.pci_dev** %pci1, align 8
  store %struct.pci_dev* %1, %struct.pci_dev** %pci, align 8
  %2 = load %struct.pci_dev*, %struct.pci_dev** %pci, align 8
  %call = call %struct.snd_pci_quirk* @snd_pci_quirk_lookup(%struct.pci_dev* %2, %struct.snd_pci_quirk* getelementptr inbounds ([7 x %struct.snd_pci_quirk], [7 x %struct.snd_pci_quirk]* @intel8x0_clock_list, i32 0, i32 0))
  store %struct.snd_pci_quirk* %call, %struct.snd_pci_quirk** %wl, align 8
  %3 = load %struct.snd_pci_quirk*, %struct.snd_pci_quirk** %wl, align 8
  %tobool = icmp ne %struct.snd_pci_quirk* %3, null
  br i1 %tobool, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  store i32 0, i32* %retval, align 4
  br label %return

if.end:                                           ; preds = %entry
  %4 = load %struct.intel8x0*, %struct.intel8x0** %chip.addr, align 8
  %card = getelementptr inbounds %struct.intel8x0, %struct.intel8x0* %4, i32 0, i32 5
  %5 = load %struct.snd_card*, %struct.snd_card** %card, align 8
  %dev = getelementptr inbounds %struct.snd_card, %struct.snd_card* %5, i32 0, i32 29
  %6 = load %struct.device*, %struct.device** %dev, align 8
  %7 = load %struct.pci_dev*, %struct.pci_dev** %pci, align 8
  %subsystem_vendor = getelementptr inbounds %struct.pci_dev, %struct.pci_dev* %7, i32 0, i32 9
  %8 = load i16, i16* %subsystem_vendor, align 8
  %conv = zext i16 %8 to i32
  %9 = load %struct.pci_dev*, %struct.pci_dev** %pci, align 8
  %subsystem_device = getelementptr inbounds %struct.pci_dev, %struct.pci_dev* %9, i32 0, i32 10
  %10 = load i16, i16* %subsystem_device, align 2
  %conv2 = zext i16 %10 to i32
  %11 = load %struct.snd_pci_quirk*, %struct.snd_pci_quirk** %wl, align 8
  %value = getelementptr inbounds %struct.snd_pci_quirk, %struct.snd_pci_quirk* %11, i32 0, i32 3
  %12 = load i32, i32* %value, align 4
  call void (%struct.device*, i8*, ...) @_dev_info(%struct.device* %6, i8* getelementptr inbounds ([37 x i8], [37 x i8]* @.str.126, i32 0, i32 0), i32 %conv, i32 %conv2, i32 %12)
  %13 = load %struct.snd_pci_quirk*, %struct.snd_pci_quirk** %wl, align 8
  %value3 = getelementptr inbounds %struct.snd_pci_quirk, %struct.snd_pci_quirk* %13, i32 0, i32 3
  %14 = load i32, i32* %value3, align 4
  %15 = load %struct.intel8x0*, %struct.intel8x0** %chip.addr, align 8
  %ac97_bus = getelementptr inbounds %struct.intel8x0, %struct.intel8x0* %15, i32 0, i32 12
  %16 = load %struct.snd_ac97_bus*, %struct.snd_ac97_bus** %ac97_bus, align 8
  %clock = getelementptr inbounds %struct.snd_ac97_bus, %struct.snd_ac97_bus* %16, i32 0, i32 6
  store i32 %14, i32* %clock, align 4
  store i32 1, i32* %retval, align 4
  br label %return

return:                                           ; preds = %if.end, %if.then
  %17 = load i32, i32* %retval, align 4
  ret i32 %17
}

; Function Attrs: noinline nounwind optnone uwtable
define internal void @intel8x0_measure_ac97_clock(%struct.intel8x0* %chip) #0 {
entry:
  %lock.addr.i183 = alloca %struct.spinlock*, align 8
  %lock.addr.i181 = alloca %struct.spinlock*, align 8
  %lock.addr.i179 = alloca %struct.spinlock*, align 8
  %lock.addr.i = alloca %struct.spinlock*, align 8
  %chip.addr = alloca %struct.intel8x0*, align 8
  %subs = alloca %struct.snd_pcm_substream*, align 8
  %ichdev = alloca %struct.ichdev*, align 8
  %port = alloca i64, align 8
  %pos = alloca i64, align 8
  %pos1 = alloca i64, align 8
  %t = alloca i64, align 8
  %civ = alloca i32, align 4
  %timeout = alloca i32, align 4
  %attempt = alloca i32, align 4
  %start_time = alloca i64, align 8
  %stop_time = alloca i64, align 8
  store %struct.intel8x0* %chip, %struct.intel8x0** %chip.addr, align 8
  store i32 1000, i32* %timeout, align 4
  store i32 1, i32* %attempt, align 4
  %0 = load %struct.intel8x0*, %struct.intel8x0** %chip.addr, align 8
  %ac97_bus = getelementptr inbounds %struct.intel8x0, %struct.intel8x0* %0, i32 0, i32 12
  %1 = load %struct.snd_ac97_bus*, %struct.snd_ac97_bus** %ac97_bus, align 8
  %clock = getelementptr inbounds %struct.snd_ac97_bus, %struct.snd_ac97_bus* %1, i32 0, i32 6
  %2 = load i32, i32* %clock, align 4
  %cmp = icmp ne i32 %2, 48000
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  br label %return

if.end:                                           ; preds = %entry
  br label %__again

__again:                                          ; preds = %if.then110, %if.end
  %3 = load %struct.intel8x0*, %struct.intel8x0** %chip.addr, align 8
  %pcm = getelementptr inbounds %struct.intel8x0, %struct.intel8x0* %3, i32 0, i32 7
  %arrayidx = getelementptr inbounds [6 x %struct.snd_pcm*], [6 x %struct.snd_pcm*]* %pcm, i64 0, i64 0
  %4 = load %struct.snd_pcm*, %struct.snd_pcm** %arrayidx, align 8
  %streams = getelementptr inbounds %struct.snd_pcm, %struct.snd_pcm* %4, i32 0, i32 8
  %arrayidx1 = getelementptr inbounds [2 x %struct.snd_pcm_str], [2 x %struct.snd_pcm_str]* %streams, i64 0, i64 0
  %substream = getelementptr inbounds %struct.snd_pcm_str, %struct.snd_pcm_str* %arrayidx1, i32 0, i32 4
  %5 = load %struct.snd_pcm_substream*, %struct.snd_pcm_substream** %substream, align 8
  store %struct.snd_pcm_substream* %5, %struct.snd_pcm_substream** %subs, align 8
  %6 = load %struct.snd_pcm_substream*, %struct.snd_pcm_substream** %subs, align 8
  %tobool = icmp ne %struct.snd_pcm_substream* %6, null
  br i1 %tobool, label %lor.lhs.false, label %if.then3

lor.lhs.false:                                    ; preds = %__again
  %7 = load %struct.snd_pcm_substream*, %struct.snd_pcm_substream** %subs, align 8
  %dma_buffer = getelementptr inbounds %struct.snd_pcm_substream, %struct.snd_pcm_substream* %7, i32 0, i32 8
  %bytes = getelementptr inbounds %struct.snd_dma_buffer, %struct.snd_dma_buffer* %dma_buffer, i32 0, i32 3
  %8 = load i64, i64* %bytes, align 8
  %cmp2 = icmp ult i64 %8, 32768
  br i1 %cmp2, label %if.then3, label %if.end4

if.then3:                                         ; preds = %lor.lhs.false, %__again
  %9 = load %struct.intel8x0*, %struct.intel8x0** %chip.addr, align 8
  %card = getelementptr inbounds %struct.intel8x0, %struct.intel8x0* %9, i32 0, i32 5
  %10 = load %struct.snd_card*, %struct.snd_card** %card, align 8
  %dev = getelementptr inbounds %struct.snd_card, %struct.snd_card* %10, i32 0, i32 29
  %11 = load %struct.device*, %struct.device** %dev, align 8
  call void (%struct.device*, i8*, ...) @dev_warn(%struct.device* %11, i8* getelementptr inbounds ([60 x i8], [60 x i8]* @.str.127, i32 0, i32 0))
  br label %return

if.end4:                                          ; preds = %lor.lhs.false
  %12 = load %struct.intel8x0*, %struct.intel8x0** %chip.addr, align 8
  %ichd = getelementptr inbounds %struct.intel8x0, %struct.intel8x0* %12, i32 0, i32 8
  %arrayidx5 = getelementptr inbounds [6 x %struct.ichdev], [6 x %struct.ichdev]* %ichd, i64 0, i64 1
  store %struct.ichdev* %arrayidx5, %struct.ichdev** %ichdev, align 8
  %13 = load %struct.snd_pcm_substream*, %struct.snd_pcm_substream** %subs, align 8
  %dma_buffer6 = getelementptr inbounds %struct.snd_pcm_substream, %struct.snd_pcm_substream* %13, i32 0, i32 8
  %addr = getelementptr inbounds %struct.snd_dma_buffer, %struct.snd_dma_buffer* %dma_buffer6, i32 0, i32 2
  %14 = load i64, i64* %addr, align 8
  %conv = trunc i64 %14 to i32
  %15 = load %struct.ichdev*, %struct.ichdev** %ichdev, align 8
  %physbuf = getelementptr inbounds %struct.ichdev, %struct.ichdev* %15, i32 0, i32 5
  store i32 %conv, i32* %physbuf, align 8
  %16 = load %struct.ichdev*, %struct.ichdev** %ichdev, align 8
  %fragsize = getelementptr inbounds %struct.ichdev, %struct.ichdev* %16, i32 0, i32 7
  store i32 32768, i32* %fragsize, align 8
  %17 = load %struct.ichdev*, %struct.ichdev** %ichdev, align 8
  %size = getelementptr inbounds %struct.ichdev, %struct.ichdev* %17, i32 0, i32 6
  store i32 32768, i32* %size, align 4
  %18 = load %struct.ichdev*, %struct.ichdev** %ichdev, align 8
  %substream7 = getelementptr inbounds %struct.ichdev, %struct.ichdev* %18, i32 0, i32 4
  store %struct.snd_pcm_substream* null, %struct.snd_pcm_substream** %substream7, align 8
  %19 = load %struct.intel8x0*, %struct.intel8x0** %chip.addr, align 8
  %ac97 = getelementptr inbounds %struct.intel8x0, %struct.intel8x0* %19, i32 0, i32 13
  %arrayidx8 = getelementptr inbounds [3 x %struct.snd_ac97*], [3 x %struct.snd_ac97*]* %ac97, i64 0, i64 0
  %20 = load %struct.snd_ac97*, %struct.snd_ac97** %arrayidx8, align 8
  %call = call i32 @snd_ac97_set_rate(%struct.snd_ac97* %20, i32 44, i32 48000)
  %cmp9 = icmp slt i32 %call, 0
  br i1 %cmp9, label %if.then11, label %if.end16

if.then11:                                        ; preds = %if.end4
  %21 = load %struct.intel8x0*, %struct.intel8x0** %chip.addr, align 8
  %card12 = getelementptr inbounds %struct.intel8x0, %struct.intel8x0* %21, i32 0, i32 5
  %22 = load %struct.snd_card*, %struct.snd_card** %card12, align 8
  %dev13 = getelementptr inbounds %struct.snd_card, %struct.snd_card* %22, i32 0, i32 29
  %23 = load %struct.device*, %struct.device** %dev13, align 8
  %24 = load %struct.intel8x0*, %struct.intel8x0** %chip.addr, align 8
  %ac97_bus14 = getelementptr inbounds %struct.intel8x0, %struct.intel8x0* %24, i32 0, i32 12
  %25 = load %struct.snd_ac97_bus*, %struct.snd_ac97_bus** %ac97_bus14, align 8
  %clock15 = getelementptr inbounds %struct.snd_ac97_bus, %struct.snd_ac97_bus* %25, i32 0, i32 6
  %26 = load i32, i32* %clock15, align 4
  call void (%struct.device*, i8*, ...) @dev_err(%struct.device* %23, i8* getelementptr inbounds ([34 x i8], [34 x i8]* @.str.128, i32 0, i32 0), i32 %26)
  br label %return

if.end16:                                         ; preds = %if.end4
  %27 = load %struct.intel8x0*, %struct.intel8x0** %chip.addr, align 8
  %28 = load %struct.ichdev*, %struct.ichdev** %ichdev, align 8
  call void @snd_intel8x0_setup_periods(%struct.intel8x0* %27, %struct.ichdev* %28)
  %29 = load %struct.ichdev*, %struct.ichdev** %ichdev, align 8
  %reg_offset = getelementptr inbounds %struct.ichdev, %struct.ichdev* %29, i32 0, i32 1
  %30 = load i64, i64* %reg_offset, align 8
  store i64 %30, i64* %port, align 8
  %31 = load %struct.intel8x0*, %struct.intel8x0** %chip.addr, align 8
  %reg_lock = getelementptr inbounds %struct.intel8x0, %struct.intel8x0* %31, i32 0, i32 20
  store %struct.spinlock* %reg_lock, %struct.spinlock** %lock.addr.i, align 8
  %32 = load %struct.spinlock*, %struct.spinlock** %lock.addr.i, align 8
  %33 = getelementptr inbounds %struct.spinlock, %struct.spinlock* %32, i32 0, i32 0
  %rlock.i = bitcast %union.anon.1* %33 to %struct.raw_spinlock*
  call void @_raw_spin_lock_irq(%struct.raw_spinlock* %rlock.i) #3
  %34 = load %struct.intel8x0*, %struct.intel8x0** %chip.addr, align 8
  %in_measurement = getelementptr inbounds %struct.intel8x0, %struct.intel8x0* %34, i32 0, i32 9
  %bf.load = load i16, i16* %in_measurement, align 8
  %bf.clear = and i16 %bf.load, -129
  %bf.set = or i16 %bf.clear, 128
  store i16 %bf.set, i16* %in_measurement, align 8
  %35 = load %struct.intel8x0*, %struct.intel8x0** %chip.addr, align 8
  %device_type = getelementptr inbounds %struct.intel8x0, %struct.intel8x0* %35, i32 0, i32 0
  %36 = load i32, i32* %device_type, align 8
  %cmp17 = icmp ne i32 %36, 3
  br i1 %cmp17, label %if.then19, label %if.else

if.then19:                                        ; preds = %if.end16
  %37 = load %struct.intel8x0*, %struct.intel8x0** %chip.addr, align 8
  %38 = load i64, i64* %port, align 8
  %add = add i64 %38, 11
  %conv20 = trunc i64 %add to i32
  call void @iputbyte(%struct.intel8x0* %37, i32 %conv20, i8 zeroext 17)
  br label %if.end23

if.else:                                          ; preds = %if.end16
  %39 = load %struct.intel8x0*, %struct.intel8x0** %chip.addr, align 8
  %40 = load i64, i64* %port, align 8
  %add21 = add i64 %40, 11
  %conv22 = trunc i64 %add21 to i32
  call void @iputbyte(%struct.intel8x0* %39, i32 %conv22, i8 zeroext 16)
  %41 = load %struct.intel8x0*, %struct.intel8x0** %chip.addr, align 8
  %42 = load %struct.ichdev*, %struct.ichdev** %ichdev, align 8
  %ali_slot = getelementptr inbounds %struct.ichdev, %struct.ichdev* %42, i32 0, i32 22
  %43 = load i32, i32* %ali_slot, align 4
  %shl = shl i32 1, %43
  call void @iputdword(%struct.intel8x0* %41, i32 8, i32 %shl)
  br label %if.end23

if.end23:                                         ; preds = %if.else, %if.then19
  %call24 = call i64 @ktime_get()
  store i64 %call24, i64* %start_time, align 8
  %44 = load %struct.intel8x0*, %struct.intel8x0** %chip.addr, align 8
  %reg_lock25 = getelementptr inbounds %struct.intel8x0, %struct.intel8x0* %44, i32 0, i32 20
  store %struct.spinlock* %reg_lock25, %struct.spinlock** %lock.addr.i179, align 8
  %45 = load %struct.spinlock*, %struct.spinlock** %lock.addr.i179, align 8
  %46 = getelementptr inbounds %struct.spinlock, %struct.spinlock* %45, i32 0, i32 0
  %rlock.i180 = bitcast %union.anon.1* %46 to %struct.raw_spinlock*
  call void @__raw_spin_unlock_irq(%struct.raw_spinlock* %rlock.i180) #3
  call void @msleep(i32 50)
  %47 = load %struct.intel8x0*, %struct.intel8x0** %chip.addr, align 8
  %reg_lock26 = getelementptr inbounds %struct.intel8x0, %struct.intel8x0* %47, i32 0, i32 20
  store %struct.spinlock* %reg_lock26, %struct.spinlock** %lock.addr.i181, align 8
  %48 = load %struct.spinlock*, %struct.spinlock** %lock.addr.i181, align 8
  %49 = getelementptr inbounds %struct.spinlock, %struct.spinlock* %48, i32 0, i32 0
  %rlock.i182 = bitcast %union.anon.1* %49 to %struct.raw_spinlock*
  call void @_raw_spin_lock_irq(%struct.raw_spinlock* %rlock.i182) #3
  br label %do.body

do.body:                                          ; preds = %do.cond, %if.end23
  %50 = load %struct.intel8x0*, %struct.intel8x0** %chip.addr, align 8
  %51 = load %struct.ichdev*, %struct.ichdev** %ichdev, align 8
  %reg_offset27 = getelementptr inbounds %struct.ichdev, %struct.ichdev* %51, i32 0, i32 1
  %52 = load i64, i64* %reg_offset27, align 8
  %add28 = add i64 %52, 4
  %conv29 = trunc i64 %add28 to i32
  %call30 = call zeroext i8 @igetbyte(%struct.intel8x0* %50, i32 %conv29)
  %conv31 = zext i8 %call30 to i32
  store i32 %conv31, i32* %civ, align 4
  %53 = load %struct.intel8x0*, %struct.intel8x0** %chip.addr, align 8
  %54 = load %struct.ichdev*, %struct.ichdev** %ichdev, align 8
  %reg_offset32 = getelementptr inbounds %struct.ichdev, %struct.ichdev* %54, i32 0, i32 1
  %55 = load i64, i64* %reg_offset32, align 8
  %56 = load %struct.ichdev*, %struct.ichdev** %ichdev, align 8
  %roff_picb = getelementptr inbounds %struct.ichdev, %struct.ichdev* %56, i32 0, i32 20
  %57 = load i32, i32* %roff_picb, align 4
  %conv33 = zext i32 %57 to i64
  %add34 = add i64 %55, %conv33
  %conv35 = trunc i64 %add34 to i32
  %call36 = call zeroext i16 @igetword(%struct.intel8x0* %53, i32 %conv35)
  %conv37 = zext i16 %call36 to i64
  store i64 %conv37, i64* %pos1, align 8
  %58 = load i64, i64* %pos1, align 8
  %cmp38 = icmp eq i64 %58, 0
  br i1 %cmp38, label %if.then40, label %if.end41

if.then40:                                        ; preds = %do.body
  call void @__const_udelay(i64 42950)
  br label %do.cond

if.end41:                                         ; preds = %do.body
  %59 = load i32, i32* %civ, align 4
  %60 = load %struct.intel8x0*, %struct.intel8x0** %chip.addr, align 8
  %61 = load %struct.ichdev*, %struct.ichdev** %ichdev, align 8
  %reg_offset42 = getelementptr inbounds %struct.ichdev, %struct.ichdev* %61, i32 0, i32 1
  %62 = load i64, i64* %reg_offset42, align 8
  %add43 = add i64 %62, 4
  %conv44 = trunc i64 %add43 to i32
  %call45 = call zeroext i8 @igetbyte(%struct.intel8x0* %60, i32 %conv44)
  %conv46 = zext i8 %call45 to i32
  %cmp47 = icmp eq i32 %59, %conv46
  br i1 %cmp47, label %land.lhs.true, label %if.end59

land.lhs.true:                                    ; preds = %if.end41
  %63 = load i64, i64* %pos1, align 8
  %64 = load %struct.intel8x0*, %struct.intel8x0** %chip.addr, align 8
  %65 = load %struct.ichdev*, %struct.ichdev** %ichdev, align 8
  %reg_offset49 = getelementptr inbounds %struct.ichdev, %struct.ichdev* %65, i32 0, i32 1
  %66 = load i64, i64* %reg_offset49, align 8
  %67 = load %struct.ichdev*, %struct.ichdev** %ichdev, align 8
  %roff_picb50 = getelementptr inbounds %struct.ichdev, %struct.ichdev* %67, i32 0, i32 20
  %68 = load i32, i32* %roff_picb50, align 4
  %conv51 = zext i32 %68 to i64
  %add52 = add i64 %66, %conv51
  %conv53 = trunc i64 %add52 to i32
  %call54 = call zeroext i16 @igetword(%struct.intel8x0* %64, i32 %conv53)
  %conv55 = zext i16 %call54 to i64
  %cmp56 = icmp eq i64 %63, %conv55
  br i1 %cmp56, label %if.then58, label %if.end59

if.then58:                                        ; preds = %land.lhs.true
  br label %do.end

if.end59:                                         ; preds = %land.lhs.true, %if.end41
  br label %do.cond

do.cond:                                          ; preds = %if.end59, %if.then40
  %69 = load i32, i32* %timeout, align 4
  %dec = add nsw i32 %69, -1
  store i32 %dec, i32* %timeout, align 4
  %tobool60 = icmp ne i32 %69, 0
  br i1 %tobool60, label %do.body, label %do.end.loopexit

do.end.loopexit:                                  ; preds = %do.cond
  br label %do.end

do.end:                                           ; preds = %do.end.loopexit, %if.then58
  %70 = load i64, i64* %pos1, align 8
  %cmp61 = icmp eq i64 %70, 0
  br i1 %cmp61, label %if.then63, label %if.else64

if.then63:                                        ; preds = %do.end
  store i64 0, i64* %pos, align 8
  br label %if.end69

if.else64:                                        ; preds = %do.end
  %71 = load %struct.ichdev*, %struct.ichdev** %ichdev, align 8
  %fragsize1 = getelementptr inbounds %struct.ichdev, %struct.ichdev* %71, i32 0, i32 8
  %72 = load i32, i32* %fragsize1, align 4
  %conv65 = zext i32 %72 to i64
  store i64 %conv65, i64* %pos, align 8
  %73 = load i64, i64* %pos1, align 8
  %74 = load %struct.ichdev*, %struct.ichdev** %ichdev, align 8
  %pos_shift = getelementptr inbounds %struct.ichdev, %struct.ichdev* %74, i32 0, i32 10
  %75 = load i32, i32* %pos_shift, align 4
  %sh_prom = zext i32 %75 to i64
  %shl66 = shl i64 %73, %sh_prom
  %76 = load i64, i64* %pos, align 8
  %sub = sub i64 %76, %shl66
  store i64 %sub, i64* %pos, align 8
  %77 = load %struct.ichdev*, %struct.ichdev** %ichdev, align 8
  %position = getelementptr inbounds %struct.ichdev, %struct.ichdev* %77, i32 0, i32 9
  %78 = load i32, i32* %position, align 8
  %conv67 = zext i32 %78 to i64
  %79 = load i64, i64* %pos, align 8
  %add68 = add i64 %79, %conv67
  store i64 %add68, i64* %pos, align 8
  br label %if.end69

if.end69:                                         ; preds = %if.else64, %if.then63
  %80 = load %struct.intel8x0*, %struct.intel8x0** %chip.addr, align 8
  %in_measurement70 = getelementptr inbounds %struct.intel8x0, %struct.intel8x0* %80, i32 0, i32 9
  %bf.load71 = load i16, i16* %in_measurement70, align 8
  %bf.clear72 = and i16 %bf.load71, -129
  store i16 %bf.clear72, i16* %in_measurement70, align 8
  %call73 = call i64 @ktime_get()
  store i64 %call73, i64* %stop_time, align 8
  %81 = load %struct.intel8x0*, %struct.intel8x0** %chip.addr, align 8
  %device_type74 = getelementptr inbounds %struct.intel8x0, %struct.intel8x0* %81, i32 0, i32 0
  %82 = load i32, i32* %device_type74, align 8
  %cmp75 = icmp eq i32 %82, 3
  br i1 %cmp75, label %if.then77, label %if.else87

if.then77:                                        ; preds = %if.end69
  %83 = load %struct.intel8x0*, %struct.intel8x0** %chip.addr, align 8
  %84 = load %struct.ichdev*, %struct.ichdev** %ichdev, align 8
  %ali_slot78 = getelementptr inbounds %struct.ichdev, %struct.ichdev* %84, i32 0, i32 22
  %85 = load i32, i32* %ali_slot78, align 4
  %add79 = add i32 %85, 16
  %shl80 = shl i32 1, %add79
  call void @iputdword(%struct.intel8x0* %83, i32 8, i32 %shl80)
  %86 = load %struct.intel8x0*, %struct.intel8x0** %chip.addr, align 8
  %87 = load i64, i64* %port, align 8
  %add81 = add i64 %87, 11
  %conv82 = trunc i64 %add81 to i32
  call void @iputbyte(%struct.intel8x0* %86, i32 %conv82, i8 zeroext 0)
  br label %while.cond

while.cond:                                       ; preds = %while.body, %if.then77
  %88 = load %struct.intel8x0*, %struct.intel8x0** %chip.addr, align 8
  %89 = load i64, i64* %port, align 8
  %add83 = add i64 %89, 11
  %conv84 = trunc i64 %add83 to i32
  %call85 = call zeroext i8 @igetbyte(%struct.intel8x0* %88, i32 %conv84)
  %tobool86 = icmp ne i8 %call85, 0
  br i1 %tobool86, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  br label %while.cond

while.end:                                        ; preds = %while.cond
  br label %if.end99

if.else87:                                        ; preds = %if.end69
  %90 = load %struct.intel8x0*, %struct.intel8x0** %chip.addr, align 8
  %91 = load i64, i64* %port, align 8
  %add88 = add i64 %91, 11
  %conv89 = trunc i64 %add88 to i32
  call void @iputbyte(%struct.intel8x0* %90, i32 %conv89, i8 zeroext 0)
  br label %while.cond90

while.cond90:                                     ; preds = %while.body97, %if.else87
  %92 = load %struct.intel8x0*, %struct.intel8x0** %chip.addr, align 8
  %93 = load i64, i64* %port, align 8
  %94 = load %struct.ichdev*, %struct.ichdev** %ichdev, align 8
  %roff_sr = getelementptr inbounds %struct.ichdev, %struct.ichdev* %94, i32 0, i32 19
  %95 = load i32, i32* %roff_sr, align 8
  %conv91 = zext i32 %95 to i64
  %add92 = add i64 %93, %conv91
  %conv93 = trunc i64 %add92 to i32
  %call94 = call zeroext i8 @igetbyte(%struct.intel8x0* %92, i32 %conv93)
  %conv95 = zext i8 %call94 to i32
  %and = and i32 %conv95, 1
  %tobool96 = icmp ne i32 %and, 0
  %lnot = xor i1 %tobool96, true
  br i1 %lnot, label %while.body97, label %while.end98

while.body97:                                     ; preds = %while.cond90
  br label %while.cond90

while.end98:                                      ; preds = %while.cond90
  br label %if.end99

if.end99:                                         ; preds = %while.end98, %while.end
  %96 = load %struct.intel8x0*, %struct.intel8x0** %chip.addr, align 8
  %97 = load i64, i64* %port, align 8
  %add100 = add i64 %97, 11
  %conv101 = trunc i64 %add100 to i32
  call void @iputbyte(%struct.intel8x0* %96, i32 %conv101, i8 zeroext 2)
  %98 = load %struct.intel8x0*, %struct.intel8x0** %chip.addr, align 8
  %reg_lock102 = getelementptr inbounds %struct.intel8x0, %struct.intel8x0* %98, i32 0, i32 20
  store %struct.spinlock* %reg_lock102, %struct.spinlock** %lock.addr.i183, align 8
  %99 = load %struct.spinlock*, %struct.spinlock** %lock.addr.i183, align 8
  %100 = getelementptr inbounds %struct.spinlock, %struct.spinlock* %99, i32 0, i32 0
  %rlock.i184 = bitcast %union.anon.1* %100 to %struct.raw_spinlock*
  call void @__raw_spin_unlock_irq(%struct.raw_spinlock* %rlock.i184) #3
  %101 = load i64, i64* %pos, align 8
  %cmp103 = icmp eq i64 %101, 0
  br i1 %cmp103, label %if.then105, label %if.end112

if.then105:                                       ; preds = %if.end99
  %102 = load %struct.intel8x0*, %struct.intel8x0** %chip.addr, align 8
  %card106 = getelementptr inbounds %struct.intel8x0, %struct.intel8x0* %102, i32 0, i32 5
  %103 = load %struct.snd_card*, %struct.snd_card** %card106, align 8
  %dev107 = getelementptr inbounds %struct.snd_card, %struct.snd_card* %103, i32 0, i32 29
  %104 = load %struct.device*, %struct.device** %dev107, align 8
  call void (%struct.device*, i8*, ...) @dev_err(%struct.device* %104, i8* getelementptr inbounds ([37 x i8], [37 x i8]* @.str.129, i32 0, i32 0))
  br label %__retry

__retry:                                          ; preds = %if.then132, %if.then118, %if.then105
  %105 = load i32, i32* %attempt, align 4
  %cmp108 = icmp slt i32 %105, 3
  br i1 %cmp108, label %if.then110, label %if.end111

if.then110:                                       ; preds = %__retry
  call void @msleep(i32 300)
  %106 = load i32, i32* %attempt, align 4
  %inc = add nsw i32 %106, 1
  store i32 %inc, i32* %attempt, align 4
  br label %__again

if.end111:                                        ; preds = %__retry
  br label %__end

if.end112:                                        ; preds = %if.end99
  %107 = load i64, i64* %pos, align 8
  %div = udiv i64 %107, 4
  store i64 %div, i64* %pos, align 8
  %108 = load i64, i64* %stop_time, align 8
  %109 = load i64, i64* %start_time, align 8
  %call113 = call i64 @ktime_us_delta(i64 %108, i64 %109)
  store i64 %call113, i64* %t, align 8
  %110 = load %struct.intel8x0*, %struct.intel8x0** %chip.addr, align 8
  %card114 = getelementptr inbounds %struct.intel8x0, %struct.intel8x0* %110, i32 0, i32 5
  %111 = load %struct.snd_card*, %struct.snd_card** %card114, align 8
  %dev115 = getelementptr inbounds %struct.snd_card, %struct.snd_card* %111, i32 0, i32 29
  %112 = load %struct.device*, %struct.device** %dev115, align 8
  %113 = load i64, i64* %t, align 8
  %114 = load i64, i64* %pos, align 8
  call void (%struct.device*, i8*, ...) @_dev_info(%struct.device* %112, i8* getelementptr inbounds ([38 x i8], [38 x i8]* @.str.130, i32 0, i32 0), i8* getelementptr inbounds ([28 x i8], [28 x i8]* @__func__.intel8x0_measure_ac97_clock, i32 0, i32 0), i64 %113, i64 %114)
  %115 = load i64, i64* %t, align 8
  %cmp116 = icmp eq i64 %115, 0
  br i1 %cmp116, label %if.then118, label %if.end121

if.then118:                                       ; preds = %if.end112
  %116 = load %struct.intel8x0*, %struct.intel8x0** %chip.addr, align 8
  %card119 = getelementptr inbounds %struct.intel8x0, %struct.intel8x0* %116, i32 0, i32 5
  %117 = load %struct.snd_card*, %struct.snd_card** %card119, align 8
  %dev120 = getelementptr inbounds %struct.snd_card, %struct.snd_card* %117, i32 0, i32 29
  %118 = load %struct.device*, %struct.device** %dev120, align 8
  call void (%struct.device*, i8*, ...) @dev_err(%struct.device* %118, i8* getelementptr inbounds ([24 x i8], [24 x i8]* @.str.131, i32 0, i32 0))
  br label %__retry

if.end121:                                        ; preds = %if.end112
  %119 = load i64, i64* %pos, align 8
  %mul = mul i64 %119, 1000
  store i64 %mul, i64* %pos, align 8
  %120 = load i64, i64* %pos, align 8
  %121 = load i64, i64* %t, align 8
  %div122 = udiv i64 %120, %121
  %mul123 = mul i64 %div122, 1000
  %122 = load i64, i64* %pos, align 8
  %123 = load i64, i64* %t, align 8
  %rem = urem i64 %122, %123
  %mul124 = mul i64 %rem, 1000
  %124 = load i64, i64* %t, align 8
  %div125 = udiv i64 %mul124, %124
  %add126 = add i64 %mul123, %div125
  store i64 %add126, i64* %pos, align 8
  %125 = load i64, i64* %pos, align 8
  %cmp127 = icmp ult i64 %125, 40000
  br i1 %cmp127, label %if.then132, label %lor.lhs.false129

lor.lhs.false129:                                 ; preds = %if.end121
  %126 = load i64, i64* %pos, align 8
  %cmp130 = icmp uge i64 %126, 60000
  br i1 %cmp130, label %if.then132, label %if.else135

if.then132:                                       ; preds = %lor.lhs.false129, %if.end121
  %127 = load %struct.intel8x0*, %struct.intel8x0** %chip.addr, align 8
  %card133 = getelementptr inbounds %struct.intel8x0, %struct.intel8x0* %127, i32 0, i32 5
  %128 = load %struct.snd_card*, %struct.snd_card** %card133, align 8
  %dev134 = getelementptr inbounds %struct.snd_card, %struct.snd_card* %128, i32 0, i32 29
  %129 = load %struct.device*, %struct.device** %dev134, align 8
  %130 = load i64, i64* %pos, align 8
  call void (%struct.device*, i8*, ...) @_dev_info(%struct.device* %129, i8* getelementptr inbounds ([29 x i8], [29 x i8]* @.str.132, i32 0, i32 0), i64 %130)
  br label %__retry

if.else135:                                       ; preds = %lor.lhs.false129
  %131 = load i64, i64* %pos, align 8
  %cmp136 = icmp ugt i64 %131, 40500
  br i1 %cmp136, label %land.lhs.true138, label %if.else144

land.lhs.true138:                                 ; preds = %if.else135
  %132 = load i64, i64* %pos, align 8
  %cmp139 = icmp ult i64 %132, 41500
  br i1 %cmp139, label %if.then141, label %if.else144

if.then141:                                       ; preds = %land.lhs.true138
  %133 = load %struct.intel8x0*, %struct.intel8x0** %chip.addr, align 8
  %ac97_bus142 = getelementptr inbounds %struct.intel8x0, %struct.intel8x0* %133, i32 0, i32 12
  %134 = load %struct.snd_ac97_bus*, %struct.snd_ac97_bus** %ac97_bus142, align 8
  %clock143 = getelementptr inbounds %struct.snd_ac97_bus, %struct.snd_ac97_bus* %134, i32 0, i32 6
  store i32 41000, i32* %clock143, align 4
  br label %if.end170

if.else144:                                       ; preds = %land.lhs.true138, %if.else135
  %135 = load i64, i64* %pos, align 8
  %cmp145 = icmp ugt i64 %135, 43600
  br i1 %cmp145, label %land.lhs.true147, label %if.else153

land.lhs.true147:                                 ; preds = %if.else144
  %136 = load i64, i64* %pos, align 8
  %cmp148 = icmp ult i64 %136, 44600
  br i1 %cmp148, label %if.then150, label %if.else153

if.then150:                                       ; preds = %land.lhs.true147
  %137 = load %struct.intel8x0*, %struct.intel8x0** %chip.addr, align 8
  %ac97_bus151 = getelementptr inbounds %struct.intel8x0, %struct.intel8x0* %137, i32 0, i32 12
  %138 = load %struct.snd_ac97_bus*, %struct.snd_ac97_bus** %ac97_bus151, align 8
  %clock152 = getelementptr inbounds %struct.snd_ac97_bus, %struct.snd_ac97_bus* %138, i32 0, i32 6
  store i32 44100, i32* %clock152, align 4
  br label %if.end169

if.else153:                                       ; preds = %land.lhs.true147, %if.else144
  %139 = load i64, i64* %pos, align 8
  %cmp154 = icmp ult i64 %139, 47500
  br i1 %cmp154, label %if.then159, label %lor.lhs.false156

lor.lhs.false156:                                 ; preds = %if.else153
  %140 = load i64, i64* %pos, align 8
  %cmp157 = icmp ugt i64 %140, 48500
  br i1 %cmp157, label %if.then159, label %if.end168

if.then159:                                       ; preds = %lor.lhs.false156, %if.else153
  %141 = load %struct.intel8x0*, %struct.intel8x0** %chip.addr, align 8
  %ac97_bus160 = getelementptr inbounds %struct.intel8x0, %struct.intel8x0* %141, i32 0, i32 12
  %142 = load %struct.snd_ac97_bus*, %struct.snd_ac97_bus** %ac97_bus160, align 8
  %clock161 = getelementptr inbounds %struct.snd_ac97_bus, %struct.snd_ac97_bus* %142, i32 0, i32 6
  %143 = load i32, i32* %clock161, align 4
  %mul162 = mul i32 %143, 48000
  %conv163 = zext i32 %mul162 to i64
  %144 = load i64, i64* %pos, align 8
  %div164 = udiv i64 %conv163, %144
  %conv165 = trunc i64 %div164 to i32
  %145 = load %struct.intel8x0*, %struct.intel8x0** %chip.addr, align 8
  %ac97_bus166 = getelementptr inbounds %struct.intel8x0, %struct.intel8x0* %145, i32 0, i32 12
  %146 = load %struct.snd_ac97_bus*, %struct.snd_ac97_bus** %ac97_bus166, align 8
  %clock167 = getelementptr inbounds %struct.snd_ac97_bus, %struct.snd_ac97_bus* %146, i32 0, i32 6
  store i32 %conv165, i32* %clock167, align 4
  br label %if.end168

if.end168:                                        ; preds = %if.then159, %lor.lhs.false156
  br label %if.end169

if.end169:                                        ; preds = %if.end168, %if.then150
  br label %if.end170

if.end170:                                        ; preds = %if.end169, %if.then141
  br label %if.end171

if.end171:                                        ; preds = %if.end170
  br label %__end

__end:                                            ; preds = %if.end171, %if.end111
  %147 = load %struct.intel8x0*, %struct.intel8x0** %chip.addr, align 8
  %card172 = getelementptr inbounds %struct.intel8x0, %struct.intel8x0* %147, i32 0, i32 5
  %148 = load %struct.snd_card*, %struct.snd_card** %card172, align 8
  %dev173 = getelementptr inbounds %struct.snd_card, %struct.snd_card* %148, i32 0, i32 29
  %149 = load %struct.device*, %struct.device** %dev173, align 8
  %150 = load %struct.intel8x0*, %struct.intel8x0** %chip.addr, align 8
  %ac97_bus174 = getelementptr inbounds %struct.intel8x0, %struct.intel8x0* %150, i32 0, i32 12
  %151 = load %struct.snd_ac97_bus*, %struct.snd_ac97_bus** %ac97_bus174, align 8
  %clock175 = getelementptr inbounds %struct.snd_ac97_bus, %struct.snd_ac97_bus* %151, i32 0, i32 6
  %152 = load i32, i32* %clock175, align 4
  call void (%struct.device*, i8*, ...) @_dev_info(%struct.device* %149, i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.133, i32 0, i32 0), i32 %152)
  %153 = load %struct.intel8x0*, %struct.intel8x0** %chip.addr, align 8
  %ac97176 = getelementptr inbounds %struct.intel8x0, %struct.intel8x0* %153, i32 0, i32 13
  %arrayidx177 = getelementptr inbounds [3 x %struct.snd_ac97*], [3 x %struct.snd_ac97*]* %ac97176, i64 0, i64 0
  %154 = load %struct.snd_ac97*, %struct.snd_ac97** %arrayidx177, align 8
  %call178 = call i32 @snd_ac97_update_power(%struct.snd_ac97* %154, i32 44, i32 0)
  br label %return

return:                                           ; preds = %__end, %if.then11, %if.then3, %if.then
  ret void
}

declare i32 @snd_card_register(%struct.snd_card*) #1

; Function Attrs: noinline nounwind optnone uwtable
define internal void @pci_set_drvdata(%struct.pci_dev* %pdev, i8* %data) #0 {
entry:
  %pdev.addr = alloca %struct.pci_dev*, align 8
  %data.addr = alloca i8*, align 8
  store %struct.pci_dev* %pdev, %struct.pci_dev** %pdev.addr, align 8
  store i8* %data, i8** %data.addr, align 8
  %0 = load %struct.pci_dev*, %struct.pci_dev** %pdev.addr, align 8
  %dev = getelementptr inbounds %struct.pci_dev, %struct.pci_dev* %0, i32 0, i32 35
  %1 = load i8*, i8** %data.addr, align 8
  call void @dev_set_drvdata(%struct.device* %dev, i8* %1)
  ret void
}

declare %struct.snd_pci_quirk* @snd_pci_quirk_lookup(%struct.pci_dev*, %struct.snd_pci_quirk*) #1

; Function Attrs: noinline nounwind optnone uwtable
define internal i32 @snd_intel8x0_dev_free(%struct.snd_device* %device) #0 {
entry:
  %device.addr = alloca %struct.snd_device*, align 8
  %chip = alloca %struct.intel8x0*, align 8
  store %struct.snd_device* %device, %struct.snd_device** %device.addr, align 8
  %0 = load %struct.snd_device*, %struct.snd_device** %device.addr, align 8
  %device_data = getelementptr inbounds %struct.snd_device, %struct.snd_device* %0, i32 0, i32 4
  %1 = load i8*, i8** %device_data, align 8
  %2 = bitcast i8* %1 to %struct.intel8x0*
  store %struct.intel8x0* %2, %struct.intel8x0** %chip, align 8
  %3 = load %struct.intel8x0*, %struct.intel8x0** %chip, align 8
  %call = call i32 @snd_intel8x0_free(%struct.intel8x0* %3)
  ret i32 %call
}

declare i32 @pci_enable_device(%struct.pci_dev*) #1

; Function Attrs: noinline nounwind optnone uwtable
define internal i8* @kzalloc(i64 %size, i32 %flags) #0 {
entry:
  %size.addr.i = alloca i64, align 8
  %flags.addr.i = alloca i32, align 4
  %size.addr = alloca i64, align 8
  %flags.addr = alloca i32, align 4
  store i64 %size, i64* %size.addr, align 8
  store i32 %flags, i32* %flags.addr, align 4
  %0 = load i64, i64* %size.addr, align 8
  %1 = load i32, i32* %flags.addr, align 4
  %or = or i32 %1, 32768
  store i64 %0, i64* %size.addr.i, align 8
  store i32 %or, i32* %flags.addr.i, align 4
  %2 = load i64, i64* %size.addr.i, align 8
  %3 = load i32, i32* %flags.addr.i, align 4
  %call.i = call noalias i8* @__kmalloc(i64 %2, i32 %3) #3
  ret i8* %call.i
}

declare void @pci_disable_device(%struct.pci_dev*) #1

; Function Attrs: argmemonly nounwind
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* nocapture writeonly, i8* nocapture readonly, i64, i32, i1) #2

; Function Attrs: noinline nounwind optnone uwtable
define internal i32 @snd_intel8x0_inside_vm(%struct.pci_dev* %pci) #0 {
entry:
  %pci.addr = alloca %struct.pci_dev*, align 8
  %result = alloca i32, align 4
  %msg = alloca i8*, align 8
  store %struct.pci_dev* %pci, %struct.pci_dev** %pci.addr, align 8
  %0 = load i32, i32* @inside_vm, align 4
  store i32 %0, i32* %result, align 4
  store i8* null, i8** %msg, align 8
  %1 = load i32, i32* %result, align 4
  %cmp = icmp sge i32 %1, 0
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %2 = load i32, i32* %result, align 4
  %tobool = icmp ne i32 %2, 0
  %3 = zext i1 %tobool to i64
  %cond = select i1 %tobool, i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.32, i32 0, i32 0), i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.33, i32 0, i32 0)
  store i8* %cond, i8** %msg, align 8
  br label %fini

if.end:                                           ; preds = %entry
  store i32 0, i32* %result, align 4
  %4 = load %struct.pci_dev*, %struct.pci_dev** %pci.addr, align 8
  %subsystem_vendor = getelementptr inbounds %struct.pci_dev, %struct.pci_dev* %4, i32 0, i32 9
  %5 = load i16, i16* %subsystem_vendor, align 8
  %conv = zext i16 %5 to i32
  %cmp1 = icmp eq i32 %conv, 6900
  br i1 %cmp1, label %land.lhs.true, label %if.else

land.lhs.true:                                    ; preds = %if.end
  %6 = load %struct.pci_dev*, %struct.pci_dev** %pci.addr, align 8
  %subsystem_device = getelementptr inbounds %struct.pci_dev, %struct.pci_dev* %6, i32 0, i32 10
  %7 = load i16, i16* %subsystem_device, align 2
  %conv3 = zext i16 %7 to i32
  %cmp4 = icmp eq i32 %conv3, 4352
  br i1 %cmp4, label %if.then6, label %if.else

if.then6:                                         ; preds = %land.lhs.true
  store i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.34, i32 0, i32 0), i8** %msg, align 8
  store i32 1, i32* %result, align 4
  br label %if.end13

if.else:                                          ; preds = %land.lhs.true, %if.end
  %8 = load %struct.pci_dev*, %struct.pci_dev** %pci.addr, align 8
  %subsystem_vendor7 = getelementptr inbounds %struct.pci_dev, %struct.pci_dev* %8, i32 0, i32 9
  %9 = load i16, i16* %subsystem_vendor7, align 8
  %conv8 = zext i16 %9 to i32
  %cmp9 = icmp eq i32 %conv8, 6840
  br i1 %cmp9, label %if.then11, label %if.end12

if.then11:                                        ; preds = %if.else
  store i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.35, i32 0, i32 0), i8** %msg, align 8
  store i32 1, i32* %result, align 4
  br label %if.end12

if.end12:                                         ; preds = %if.then11, %if.else
  br label %if.end13

if.end13:                                         ; preds = %if.end12, %if.then6
  br label %fini

fini:                                             ; preds = %if.end13, %if.then
  %10 = load i8*, i8** %msg, align 8
  %cmp14 = icmp ne i8* %10, null
  br i1 %cmp14, label %if.then16, label %if.end17

if.then16:                                        ; preds = %fini
  %11 = load %struct.pci_dev*, %struct.pci_dev** %pci.addr, align 8
  %dev = getelementptr inbounds %struct.pci_dev, %struct.pci_dev* %11, i32 0, i32 35
  %12 = load i8*, i8** %msg, align 8
  call void (%struct.device*, i8*, ...) @_dev_info(%struct.device* %dev, i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.36, i32 0, i32 0), i8* %12)
  br label %if.end17

if.end17:                                         ; preds = %if.then16, %fini
  %13 = load i32, i32* %result, align 4
  ret i32 %13
}

declare i32 @pci_request_regions(%struct.pci_dev*, i8*) #1

declare void @kfree(i8*) #1

declare i8* @pci_iomap(%struct.pci_dev*, i32, i64) #1

declare void @dev_err(%struct.device*, i8*, ...) #1

; Function Attrs: noinline nounwind optnone uwtable
define internal i32 @snd_intel8x0_free(%struct.intel8x0* %chip) #0 {
entry:
  %chip.addr = alloca %struct.intel8x0*, align 8
  %i = alloca i32, align 4
  %val = alloca i32, align 4
  store %struct.intel8x0* %chip, %struct.intel8x0** %chip.addr, align 8
  %0 = load %struct.intel8x0*, %struct.intel8x0** %chip.addr, align 8
  %irq = getelementptr inbounds %struct.intel8x0, %struct.intel8x0* %0, i32 0, i32 1
  %1 = load i32, i32* %irq, align 4
  %cmp = icmp slt i32 %1, 0
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  br label %__hw_end

if.end:                                           ; preds = %entry
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %if.end
  %2 = load i32, i32* %i, align 4
  %3 = load %struct.intel8x0*, %struct.intel8x0** %chip.addr, align 8
  %bdbars_count = getelementptr inbounds %struct.intel8x0, %struct.intel8x0* %3, i32 0, i32 21
  %4 = load i32, i32* %bdbars_count, align 4
  %cmp1 = icmp ult i32 %2, %4
  br i1 %cmp1, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %5 = load %struct.intel8x0*, %struct.intel8x0** %chip.addr, align 8
  %6 = load %struct.intel8x0*, %struct.intel8x0** %chip.addr, align 8
  %ichd = getelementptr inbounds %struct.intel8x0, %struct.intel8x0* %6, i32 0, i32 8
  %7 = load i32, i32* %i, align 4
  %idxprom = zext i32 %7 to i64
  %arrayidx = getelementptr inbounds [6 x %struct.ichdev], [6 x %struct.ichdev]* %ichd, i64 0, i64 %idxprom
  %reg_offset = getelementptr inbounds %struct.ichdev, %struct.ichdev* %arrayidx, i32 0, i32 1
  %8 = load i64, i64* %reg_offset, align 8
  %add = add i64 11, %8
  %conv = trunc i64 %add to i32
  call void @iputbyte(%struct.intel8x0* %5, i32 %conv, i8 zeroext 0)
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %9 = load i32, i32* %i, align 4
  %inc = add i32 %9, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  store i32 0, i32* %i, align 4
  br label %for.cond2

for.cond2:                                        ; preds = %for.inc13, %for.end
  %10 = load i32, i32* %i, align 4
  %11 = load %struct.intel8x0*, %struct.intel8x0** %chip.addr, align 8
  %bdbars_count3 = getelementptr inbounds %struct.intel8x0, %struct.intel8x0* %11, i32 0, i32 21
  %12 = load i32, i32* %bdbars_count3, align 4
  %cmp4 = icmp ult i32 %10, %12
  br i1 %cmp4, label %for.body6, label %for.end15

for.body6:                                        ; preds = %for.cond2
  %13 = load %struct.intel8x0*, %struct.intel8x0** %chip.addr, align 8
  %14 = load %struct.intel8x0*, %struct.intel8x0** %chip.addr, align 8
  %ichd7 = getelementptr inbounds %struct.intel8x0, %struct.intel8x0* %14, i32 0, i32 8
  %15 = load i32, i32* %i, align 4
  %idxprom8 = zext i32 %15 to i64
  %arrayidx9 = getelementptr inbounds [6 x %struct.ichdev], [6 x %struct.ichdev]* %ichd7, i64 0, i64 %idxprom8
  %reg_offset10 = getelementptr inbounds %struct.ichdev, %struct.ichdev* %arrayidx9, i32 0, i32 1
  %16 = load i64, i64* %reg_offset10, align 8
  %add11 = add i64 11, %16
  %conv12 = trunc i64 %add11 to i32
  call void @iputbyte(%struct.intel8x0* %13, i32 %conv12, i8 zeroext 2)
  br label %for.inc13

for.inc13:                                        ; preds = %for.body6
  %17 = load i32, i32* %i, align 4
  %inc14 = add i32 %17, 1
  store i32 %inc14, i32* %i, align 4
  br label %for.cond2

for.end15:                                        ; preds = %for.cond2
  %18 = load %struct.intel8x0*, %struct.intel8x0** %chip.addr, align 8
  %device_type = getelementptr inbounds %struct.intel8x0, %struct.intel8x0* %18, i32 0, i32 0
  %19 = load i32, i32* %device_type, align 8
  %cmp16 = icmp eq i32 %19, 4
  br i1 %cmp16, label %land.lhs.true, label %if.end21

land.lhs.true:                                    ; preds = %for.end15
  %20 = load i32, i32* @spdif_aclink, align 4
  %tobool = icmp ne i32 %20, 0
  br i1 %tobool, label %if.end21, label %if.then18

if.then18:                                        ; preds = %land.lhs.true
  %21 = load %struct.intel8x0*, %struct.intel8x0** %chip.addr, align 8
  %pci = getelementptr inbounds %struct.intel8x0, %struct.intel8x0* %21, i32 0, i32 4
  %22 = load %struct.pci_dev*, %struct.pci_dev** %pci, align 8
  %call = call i32 @pci_read_config_dword(%struct.pci_dev* %22, i32 76, i32* %val)
  %23 = load i32, i32* %val, align 4
  %and = and i32 %23, -16777217
  store i32 %and, i32* %val, align 4
  %24 = load %struct.intel8x0*, %struct.intel8x0** %chip.addr, align 8
  %pci19 = getelementptr inbounds %struct.intel8x0, %struct.intel8x0* %24, i32 0, i32 4
  %25 = load %struct.pci_dev*, %struct.pci_dev** %pci19, align 8
  %26 = load i32, i32* %val, align 4
  %call20 = call i32 @pci_write_config_dword(%struct.pci_dev* %25, i32 76, i32 %26)
  br label %if.end21

if.end21:                                         ; preds = %if.then18, %land.lhs.true, %for.end15
  br label %__hw_end

__hw_end:                                         ; preds = %if.end21, %if.then
  %27 = load %struct.intel8x0*, %struct.intel8x0** %chip.addr, align 8
  %irq22 = getelementptr inbounds %struct.intel8x0, %struct.intel8x0* %27, i32 0, i32 1
  %28 = load i32, i32* %irq22, align 4
  %cmp23 = icmp sge i32 %28, 0
  br i1 %cmp23, label %if.then25, label %if.end27

if.then25:                                        ; preds = %__hw_end
  %29 = load %struct.intel8x0*, %struct.intel8x0** %chip.addr, align 8
  %irq26 = getelementptr inbounds %struct.intel8x0, %struct.intel8x0* %29, i32 0, i32 1
  %30 = load i32, i32* %irq26, align 4
  %31 = load %struct.intel8x0*, %struct.intel8x0** %chip.addr, align 8
  %32 = bitcast %struct.intel8x0* %31 to i8*
  call void @free_irq(i32 %30, i8* %32)
  br label %if.end27

if.end27:                                         ; preds = %if.then25, %__hw_end
  %33 = load %struct.intel8x0*, %struct.intel8x0** %chip.addr, align 8
  %bdbars = getelementptr inbounds %struct.intel8x0, %struct.intel8x0* %33, i32 0, i32 22
  %area = getelementptr inbounds %struct.snd_dma_buffer, %struct.snd_dma_buffer* %bdbars, i32 0, i32 1
  %34 = load i8*, i8** %area, align 8
  %tobool28 = icmp ne i8* %34, null
  br i1 %tobool28, label %if.then29, label %if.end34

if.then29:                                        ; preds = %if.end27
  %35 = load %struct.intel8x0*, %struct.intel8x0** %chip.addr, align 8
  %fix_nocache = getelementptr inbounds %struct.intel8x0, %struct.intel8x0* %35, i32 0, i32 9
  %bf.load = load i16, i16* %fix_nocache, align 8
  %bf.lshr = lshr i16 %bf.load, 8
  %bf.clear = and i16 %bf.lshr, 1
  %bf.cast = zext i16 %bf.clear to i32
  %tobool30 = icmp ne i32 %bf.cast, 0
  br i1 %tobool30, label %if.then31, label %if.end32

if.then31:                                        ; preds = %if.then29
  br label %do.body

do.body:                                          ; preds = %if.then31
  br label %do.end

do.end:                                           ; preds = %do.body
  br label %if.end32

if.end32:                                         ; preds = %do.end, %if.then29
  %36 = load %struct.intel8x0*, %struct.intel8x0** %chip.addr, align 8
  %bdbars33 = getelementptr inbounds %struct.intel8x0, %struct.intel8x0* %36, i32 0, i32 22
  call void @snd_dma_free_pages(%struct.snd_dma_buffer* %bdbars33)
  br label %if.end34

if.end34:                                         ; preds = %if.end32, %if.end27
  %37 = load %struct.intel8x0*, %struct.intel8x0** %chip.addr, align 8
  %addr = getelementptr inbounds %struct.intel8x0, %struct.intel8x0* %37, i32 0, i32 2
  %38 = load i8*, i8** %addr, align 8
  %tobool35 = icmp ne i8* %38, null
  br i1 %tobool35, label %if.then36, label %if.end39

if.then36:                                        ; preds = %if.end34
  %39 = load %struct.intel8x0*, %struct.intel8x0** %chip.addr, align 8
  %pci37 = getelementptr inbounds %struct.intel8x0, %struct.intel8x0* %39, i32 0, i32 4
  %40 = load %struct.pci_dev*, %struct.pci_dev** %pci37, align 8
  %41 = load %struct.intel8x0*, %struct.intel8x0** %chip.addr, align 8
  %addr38 = getelementptr inbounds %struct.intel8x0, %struct.intel8x0* %41, i32 0, i32 2
  %42 = load i8*, i8** %addr38, align 8
  call void @pci_iounmap(%struct.pci_dev* %40, i8* %42)
  br label %if.end39

if.end39:                                         ; preds = %if.then36, %if.end34
  %43 = load %struct.intel8x0*, %struct.intel8x0** %chip.addr, align 8
  %bmaddr = getelementptr inbounds %struct.intel8x0, %struct.intel8x0* %43, i32 0, i32 3
  %44 = load i8*, i8** %bmaddr, align 8
  %tobool40 = icmp ne i8* %44, null
  br i1 %tobool40, label %if.then41, label %if.end44

if.then41:                                        ; preds = %if.end39
  %45 = load %struct.intel8x0*, %struct.intel8x0** %chip.addr, align 8
  %pci42 = getelementptr inbounds %struct.intel8x0, %struct.intel8x0* %45, i32 0, i32 4
  %46 = load %struct.pci_dev*, %struct.pci_dev** %pci42, align 8
  %47 = load %struct.intel8x0*, %struct.intel8x0** %chip.addr, align 8
  %bmaddr43 = getelementptr inbounds %struct.intel8x0, %struct.intel8x0* %47, i32 0, i32 3
  %48 = load i8*, i8** %bmaddr43, align 8
  call void @pci_iounmap(%struct.pci_dev* %46, i8* %48)
  br label %if.end44

if.end44:                                         ; preds = %if.then41, %if.end39
  %49 = load %struct.intel8x0*, %struct.intel8x0** %chip.addr, align 8
  %pci45 = getelementptr inbounds %struct.intel8x0, %struct.intel8x0* %49, i32 0, i32 4
  %50 = load %struct.pci_dev*, %struct.pci_dev** %pci45, align 8
  call void @pci_release_regions(%struct.pci_dev* %50)
  %51 = load %struct.intel8x0*, %struct.intel8x0** %chip.addr, align 8
  %pci46 = getelementptr inbounds %struct.intel8x0, %struct.intel8x0* %51, i32 0, i32 4
  %52 = load %struct.pci_dev*, %struct.pci_dev** %pci46, align 8
  call void @pci_disable_device(%struct.pci_dev* %52)
  %53 = load %struct.intel8x0*, %struct.intel8x0** %chip.addr, align 8
  %54 = bitcast %struct.intel8x0* %53 to i8*
  call void @kfree(i8* %54)
  ret i32 0
}

declare i32 @snd_dma_alloc_pages(i32, %struct.device*, i64, %struct.snd_dma_buffer*) #1

declare void @pci_set_master(%struct.pci_dev*) #1

; Function Attrs: noinline nounwind optnone uwtable
define internal i32 @snd_intel8x0_chip_init(%struct.intel8x0* %chip, i32 %probing) #0 {
entry:
  %retval = alloca i32, align 4
  %chip.addr = alloca %struct.intel8x0*, align 8
  %probing.addr = alloca i32, align 4
  %i = alloca i32, align 4
  %timeout = alloca i32, align 4
  %err = alloca i32, align 4
  store %struct.intel8x0* %chip, %struct.intel8x0** %chip.addr, align 8
  store i32 %probing, i32* %probing.addr, align 4
  %0 = load %struct.intel8x0*, %struct.intel8x0** %chip.addr, align 8
  %device_type = getelementptr inbounds %struct.intel8x0, %struct.intel8x0* %0, i32 0, i32 0
  %1 = load i32, i32* %device_type, align 8
  %cmp = icmp ne i32 %1, 3
  br i1 %cmp, label %if.then, label %if.else

if.then:                                          ; preds = %entry
  %2 = load %struct.intel8x0*, %struct.intel8x0** %chip.addr, align 8
  %3 = load i32, i32* %probing.addr, align 4
  %call = call i32 @snd_intel8x0_ich_chip_init(%struct.intel8x0* %2, i32 %3)
  store i32 %call, i32* %err, align 4
  %cmp1 = icmp slt i32 %call, 0
  br i1 %cmp1, label %if.then2, label %if.end

if.then2:                                         ; preds = %if.then
  %4 = load i32, i32* %err, align 4
  store i32 %4, i32* %retval, align 4
  br label %return

if.end:                                           ; preds = %if.then
  %5 = load %struct.intel8x0*, %struct.intel8x0** %chip.addr, align 8
  %call3 = call zeroext i16 @iagetword(%struct.intel8x0* %5, i32 0)
  br label %if.end8

if.else:                                          ; preds = %entry
  %6 = load %struct.intel8x0*, %struct.intel8x0** %chip.addr, align 8
  %7 = load i32, i32* %probing.addr, align 4
  %call4 = call i32 @snd_intel8x0_ali_chip_init(%struct.intel8x0* %6, i32 %7)
  store i32 %call4, i32* %err, align 4
  %cmp5 = icmp slt i32 %call4, 0
  br i1 %cmp5, label %if.then6, label %if.end7

if.then6:                                         ; preds = %if.else
  %8 = load i32, i32* %err, align 4
  store i32 %8, i32* %retval, align 4
  br label %return

if.end7:                                          ; preds = %if.else
  br label %if.end8

if.end8:                                          ; preds = %if.end7, %if.end
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %if.end8
  %9 = load i32, i32* %i, align 4
  %10 = load %struct.intel8x0*, %struct.intel8x0** %chip.addr, align 8
  %bdbars_count = getelementptr inbounds %struct.intel8x0, %struct.intel8x0* %10, i32 0, i32 21
  %11 = load i32, i32* %bdbars_count, align 4
  %cmp9 = icmp ult i32 %9, %11
  br i1 %cmp9, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %12 = load %struct.intel8x0*, %struct.intel8x0** %chip.addr, align 8
  %13 = load %struct.intel8x0*, %struct.intel8x0** %chip.addr, align 8
  %ichd = getelementptr inbounds %struct.intel8x0, %struct.intel8x0* %13, i32 0, i32 8
  %14 = load i32, i32* %i, align 4
  %idxprom = zext i32 %14 to i64
  %arrayidx = getelementptr inbounds [6 x %struct.ichdev], [6 x %struct.ichdev]* %ichd, i64 0, i64 %idxprom
  %reg_offset = getelementptr inbounds %struct.ichdev, %struct.ichdev* %arrayidx, i32 0, i32 1
  %15 = load i64, i64* %reg_offset, align 8
  %add = add i64 11, %15
  %conv = trunc i64 %add to i32
  call void @iputbyte(%struct.intel8x0* %12, i32 %conv, i8 zeroext 0)
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %16 = load i32, i32* %i, align 4
  %inc = add i32 %16, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  store i32 0, i32* %i, align 4
  br label %for.cond10

for.cond10:                                       ; preds = %for.inc21, %for.end
  %17 = load i32, i32* %i, align 4
  %18 = load %struct.intel8x0*, %struct.intel8x0** %chip.addr, align 8
  %bdbars_count11 = getelementptr inbounds %struct.intel8x0, %struct.intel8x0* %18, i32 0, i32 21
  %19 = load i32, i32* %bdbars_count11, align 4
  %cmp12 = icmp ult i32 %17, %19
  br i1 %cmp12, label %for.body14, label %for.end23

for.body14:                                       ; preds = %for.cond10
  %20 = load %struct.intel8x0*, %struct.intel8x0** %chip.addr, align 8
  %21 = load %struct.intel8x0*, %struct.intel8x0** %chip.addr, align 8
  %ichd15 = getelementptr inbounds %struct.intel8x0, %struct.intel8x0* %21, i32 0, i32 8
  %22 = load i32, i32* %i, align 4
  %idxprom16 = zext i32 %22 to i64
  %arrayidx17 = getelementptr inbounds [6 x %struct.ichdev], [6 x %struct.ichdev]* %ichd15, i64 0, i64 %idxprom16
  %reg_offset18 = getelementptr inbounds %struct.ichdev, %struct.ichdev* %arrayidx17, i32 0, i32 1
  %23 = load i64, i64* %reg_offset18, align 8
  %add19 = add i64 11, %23
  %conv20 = trunc i64 %add19 to i32
  call void @iputbyte(%struct.intel8x0* %20, i32 %conv20, i8 zeroext 2)
  br label %for.inc21

for.inc21:                                        ; preds = %for.body14
  %24 = load i32, i32* %i, align 4
  %inc22 = add i32 %24, 1
  store i32 %inc22, i32* %i, align 4
  br label %for.cond10

for.end23:                                        ; preds = %for.cond10
  store i32 0, i32* %i, align 4
  br label %for.cond24

for.cond24:                                       ; preds = %for.inc47, %for.end23
  %25 = load i32, i32* %i, align 4
  %26 = load %struct.intel8x0*, %struct.intel8x0** %chip.addr, align 8
  %bdbars_count25 = getelementptr inbounds %struct.intel8x0, %struct.intel8x0* %26, i32 0, i32 21
  %27 = load i32, i32* %bdbars_count25, align 4
  %cmp26 = icmp ult i32 %25, %27
  br i1 %cmp26, label %for.body28, label %for.end49

for.body28:                                       ; preds = %for.cond24
  store i32 100000, i32* %timeout, align 4
  br label %while.cond

while.cond:                                       ; preds = %if.end42, %for.body28
  %28 = load i32, i32* %timeout, align 4
  %dec = add i32 %28, -1
  store i32 %dec, i32* %timeout, align 4
  %cmp29 = icmp ne i32 %dec, 0
  br i1 %cmp29, label %while.body, label %while.end.loopexit

while.body:                                       ; preds = %while.cond
  %29 = load %struct.intel8x0*, %struct.intel8x0** %chip.addr, align 8
  %30 = load %struct.intel8x0*, %struct.intel8x0** %chip.addr, align 8
  %ichd31 = getelementptr inbounds %struct.intel8x0, %struct.intel8x0* %30, i32 0, i32 8
  %31 = load i32, i32* %i, align 4
  %idxprom32 = zext i32 %31 to i64
  %arrayidx33 = getelementptr inbounds [6 x %struct.ichdev], [6 x %struct.ichdev]* %ichd31, i64 0, i64 %idxprom32
  %reg_offset34 = getelementptr inbounds %struct.ichdev, %struct.ichdev* %arrayidx33, i32 0, i32 1
  %32 = load i64, i64* %reg_offset34, align 8
  %add35 = add i64 11, %32
  %conv36 = trunc i64 %add35 to i32
  %call37 = call zeroext i8 @igetbyte(%struct.intel8x0* %29, i32 %conv36)
  %conv38 = zext i8 %call37 to i32
  %and = and i32 %conv38, 2
  %cmp39 = icmp eq i32 %and, 0
  br i1 %cmp39, label %if.then41, label %if.end42

if.then41:                                        ; preds = %while.body
  br label %while.end

if.end42:                                         ; preds = %while.body
  br label %while.cond

while.end.loopexit:                               ; preds = %while.cond
  br label %while.end

while.end:                                        ; preds = %while.end.loopexit, %if.then41
  %33 = load i32, i32* %timeout, align 4
  %cmp43 = icmp eq i32 %33, 0
  br i1 %cmp43, label %if.then45, label %if.end46

if.then45:                                        ; preds = %while.end
  %34 = load %struct.intel8x0*, %struct.intel8x0** %chip.addr, align 8
  %card = getelementptr inbounds %struct.intel8x0, %struct.intel8x0* %34, i32 0, i32 5
  %35 = load %struct.snd_card*, %struct.snd_card** %card, align 8
  %dev = getelementptr inbounds %struct.snd_card, %struct.snd_card* %35, i32 0, i32 29
  %36 = load %struct.device*, %struct.device** %dev, align 8
  call void (%struct.device*, i8*, ...) @dev_err(%struct.device* %36, i8* getelementptr inbounds ([28 x i8], [28 x i8]* @.str.37, i32 0, i32 0))
  br label %if.end46

if.end46:                                         ; preds = %if.then45, %while.end
  br label %for.inc47

for.inc47:                                        ; preds = %if.end46
  %37 = load i32, i32* %i, align 4
  %inc48 = add i32 %37, 1
  store i32 %inc48, i32* %i, align 4
  br label %for.cond24

for.end49:                                        ; preds = %for.cond24
  store i32 0, i32* %i, align 4
  br label %for.cond50

for.cond50:                                       ; preds = %for.inc64, %for.end49
  %38 = load i32, i32* %i, align 4
  %39 = load %struct.intel8x0*, %struct.intel8x0** %chip.addr, align 8
  %bdbars_count51 = getelementptr inbounds %struct.intel8x0, %struct.intel8x0* %39, i32 0, i32 21
  %40 = load i32, i32* %bdbars_count51, align 4
  %cmp52 = icmp ult i32 %38, %40
  br i1 %cmp52, label %for.body54, label %for.end66

for.body54:                                       ; preds = %for.cond50
  %41 = load %struct.intel8x0*, %struct.intel8x0** %chip.addr, align 8
  %42 = load %struct.intel8x0*, %struct.intel8x0** %chip.addr, align 8
  %ichd55 = getelementptr inbounds %struct.intel8x0, %struct.intel8x0* %42, i32 0, i32 8
  %43 = load i32, i32* %i, align 4
  %idxprom56 = zext i32 %43 to i64
  %arrayidx57 = getelementptr inbounds [6 x %struct.ichdev], [6 x %struct.ichdev]* %ichd55, i64 0, i64 %idxprom56
  %reg_offset58 = getelementptr inbounds %struct.ichdev, %struct.ichdev* %arrayidx57, i32 0, i32 1
  %44 = load i64, i64* %reg_offset58, align 8
  %add59 = add i64 0, %44
  %conv60 = trunc i64 %add59 to i32
  %45 = load %struct.intel8x0*, %struct.intel8x0** %chip.addr, align 8
  %ichd61 = getelementptr inbounds %struct.intel8x0, %struct.intel8x0* %45, i32 0, i32 8
  %46 = load i32, i32* %i, align 4
  %idxprom62 = zext i32 %46 to i64
  %arrayidx63 = getelementptr inbounds [6 x %struct.ichdev], [6 x %struct.ichdev]* %ichd61, i64 0, i64 %idxprom62
  %bdbar_addr = getelementptr inbounds %struct.ichdev, %struct.ichdev* %arrayidx63, i32 0, i32 3
  %47 = load i32, i32* %bdbar_addr, align 8
  call void @iputdword(%struct.intel8x0* %41, i32 %conv60, i32 %47)
  br label %for.inc64

for.inc64:                                        ; preds = %for.body54
  %48 = load i32, i32* %i, align 4
  %inc65 = add i32 %48, 1
  store i32 %inc65, i32* %i, align 4
  br label %for.cond50

for.end66:                                        ; preds = %for.cond50
  store i32 0, i32* %retval, align 4
  br label %return

return:                                           ; preds = %for.end66, %if.then6, %if.then2
  %49 = load i32, i32* %retval, align 4
  ret i32 %49
}

; Function Attrs: noinline nounwind optnone uwtable
define internal i32 @request_irq(i32 %irq, i32 (i32, i8*)* %handler, i64 %flags, i8* %name, i8* %dev) #0 {
entry:
  %irq.addr = alloca i32, align 4
  %handler.addr = alloca i32 (i32, i8*)*, align 8
  %flags.addr = alloca i64, align 8
  %name.addr = alloca i8*, align 8
  %dev.addr = alloca i8*, align 8
  store i32 %irq, i32* %irq.addr, align 4
  store i32 (i32, i8*)* %handler, i32 (i32, i8*)** %handler.addr, align 8
  store i64 %flags, i64* %flags.addr, align 8
  store i8* %name, i8** %name.addr, align 8
  store i8* %dev, i8** %dev.addr, align 8
  %0 = load i32, i32* %irq.addr, align 4
  %1 = load i32 (i32, i8*)*, i32 (i32, i8*)** %handler.addr, align 8
  %2 = load i64, i64* %flags.addr, align 8
  %3 = load i8*, i8** %name.addr, align 8
  %4 = load i8*, i8** %dev.addr, align 8
  %call = call i32 @request_threaded_irq(i32 %0, i32 (i32, i8*)* %1, i32 (i32, i8*)* null, i64 %2, i8* %3, i8* %4)
  ret i32 %call
}

; Function Attrs: noinline nounwind optnone uwtable
define internal i32 @snd_intel8x0_interrupt(i32 %irq, i8* %dev_id) #0 {
entry:
  %retval = alloca i32, align 4
  %irq.addr = alloca i32, align 4
  %dev_id.addr = alloca i8*, align 8
  %chip = alloca %struct.intel8x0*, align 8
  %ichdev = alloca %struct.ichdev*, align 8
  %status = alloca i32, align 4
  %i = alloca i32, align 4
  store i32 %irq, i32* %irq.addr, align 4
  store i8* %dev_id, i8** %dev_id.addr, align 8
  %0 = load i8*, i8** %dev_id.addr, align 8
  %1 = bitcast i8* %0 to %struct.intel8x0*
  store %struct.intel8x0* %1, %struct.intel8x0** %chip, align 8
  %2 = load %struct.intel8x0*, %struct.intel8x0** %chip, align 8
  %3 = load %struct.intel8x0*, %struct.intel8x0** %chip, align 8
  %int_sta_reg = getelementptr inbounds %struct.intel8x0, %struct.intel8x0* %3, i32 0, i32 23
  %4 = load i32, i32* %int_sta_reg, align 8
  %call = call i32 @igetdword(%struct.intel8x0* %2, i32 %4)
  store i32 %call, i32* %status, align 4
  %5 = load i32, i32* %status, align 4
  %cmp = icmp eq i32 %5, -1
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  store i32 0, i32* %retval, align 4
  br label %return

if.end:                                           ; preds = %entry
  %6 = load i32, i32* %status, align 4
  %7 = load %struct.intel8x0*, %struct.intel8x0** %chip, align 8
  %int_sta_mask = getelementptr inbounds %struct.intel8x0, %struct.intel8x0* %7, i32 0, i32 24
  %8 = load i32, i32* %int_sta_mask, align 4
  %and = and i32 %6, %8
  %cmp1 = icmp eq i32 %and, 0
  br i1 %cmp1, label %if.then2, label %if.end10

if.then2:                                         ; preds = %if.end
  %9 = load i32, i32* %status, align 4
  %tobool = icmp ne i32 %9, 0
  br i1 %tobool, label %if.then3, label %if.end8

if.then3:                                         ; preds = %if.then2
  %10 = load %struct.intel8x0*, %struct.intel8x0** %chip, align 8
  %11 = load %struct.intel8x0*, %struct.intel8x0** %chip, align 8
  %int_sta_reg4 = getelementptr inbounds %struct.intel8x0, %struct.intel8x0* %11, i32 0, i32 23
  %12 = load i32, i32* %int_sta_reg4, align 8
  %13 = load i32, i32* %status, align 4
  call void @iputdword(%struct.intel8x0* %10, i32 %12, i32 %13)
  %14 = load %struct.intel8x0*, %struct.intel8x0** %chip, align 8
  %buggy_irq = getelementptr inbounds %struct.intel8x0, %struct.intel8x0* %14, i32 0, i32 9
  %bf.load = load i16, i16* %buggy_irq, align 8
  %bf.lshr = lshr i16 %bf.load, 9
  %bf.clear = and i16 %bf.lshr, 1
  %bf.cast = zext i16 %bf.clear to i32
  %tobool5 = icmp ne i32 %bf.cast, 0
  br i1 %tobool5, label %if.end7, label %if.then6

if.then6:                                         ; preds = %if.then3
  store i32 0, i32* %status, align 4
  br label %if.end7

if.end7:                                          ; preds = %if.then6, %if.then3
  br label %if.end8

if.end8:                                          ; preds = %if.end7, %if.then2
  %15 = load i32, i32* %status, align 4
  %tobool9 = icmp ne i32 %15, 0
  %16 = zext i1 %tobool9 to i64
  %cond = select i1 %tobool9, i32 1, i32 0
  store i32 %cond, i32* %retval, align 4
  br label %return

if.end10:                                         ; preds = %if.end
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %if.end10
  %17 = load i32, i32* %i, align 4
  %18 = load %struct.intel8x0*, %struct.intel8x0** %chip, align 8
  %bdbars_count = getelementptr inbounds %struct.intel8x0, %struct.intel8x0* %18, i32 0, i32 21
  %19 = load i32, i32* %bdbars_count, align 4
  %cmp11 = icmp ult i32 %17, %19
  br i1 %cmp11, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %20 = load %struct.intel8x0*, %struct.intel8x0** %chip, align 8
  %ichd = getelementptr inbounds %struct.intel8x0, %struct.intel8x0* %20, i32 0, i32 8
  %21 = load i32, i32* %i, align 4
  %idxprom = zext i32 %21 to i64
  %arrayidx = getelementptr inbounds [6 x %struct.ichdev], [6 x %struct.ichdev]* %ichd, i64 0, i64 %idxprom
  store %struct.ichdev* %arrayidx, %struct.ichdev** %ichdev, align 8
  %22 = load i32, i32* %status, align 4
  %23 = load %struct.ichdev*, %struct.ichdev** %ichdev, align 8
  %int_sta_mask12 = getelementptr inbounds %struct.ichdev, %struct.ichdev* %23, i32 0, i32 21
  %24 = load i32, i32* %int_sta_mask12, align 8
  %and13 = and i32 %22, %24
  %tobool14 = icmp ne i32 %and13, 0
  br i1 %tobool14, label %if.then15, label %if.end16

if.then15:                                        ; preds = %for.body
  %25 = load %struct.intel8x0*, %struct.intel8x0** %chip, align 8
  %26 = load %struct.ichdev*, %struct.ichdev** %ichdev, align 8
  call void @snd_intel8x0_update(%struct.intel8x0* %25, %struct.ichdev* %26)
  br label %if.end16

if.end16:                                         ; preds = %if.then15, %for.body
  br label %for.inc

for.inc:                                          ; preds = %if.end16
  %27 = load i32, i32* %i, align 4
  %inc = add i32 %27, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %28 = load %struct.intel8x0*, %struct.intel8x0** %chip, align 8
  %29 = load %struct.intel8x0*, %struct.intel8x0** %chip, align 8
  %int_sta_reg17 = getelementptr inbounds %struct.intel8x0, %struct.intel8x0* %29, i32 0, i32 23
  %30 = load i32, i32* %int_sta_reg17, align 8
  %31 = load i32, i32* %status, align 4
  %32 = load %struct.intel8x0*, %struct.intel8x0** %chip, align 8
  %int_sta_mask18 = getelementptr inbounds %struct.intel8x0, %struct.intel8x0* %32, i32 0, i32 24
  %33 = load i32, i32* %int_sta_mask18, align 4
  %and19 = and i32 %31, %33
  call void @iputdword(%struct.intel8x0* %28, i32 %30, i32 %and19)
  store i32 1, i32* %retval, align 4
  br label %return

return:                                           ; preds = %for.end, %if.end8, %if.then
  %34 = load i32, i32* %retval, align 4
  ret i32 %34
}

declare i32 @snd_device_new(%struct.snd_card*, i32, i8*, %struct.snd_device_ops*) #1

declare noalias i8* @__kmalloc(i64, i32) #1

declare void @_dev_info(%struct.device*, i8*, ...) #1

; Function Attrs: noinline nounwind optnone uwtable
define internal void @iputbyte(%struct.intel8x0* %chip, i32 %offset, i8 zeroext %val) #0 {
entry:
  %chip.addr = alloca %struct.intel8x0*, align 8
  %offset.addr = alloca i32, align 4
  %val.addr = alloca i8, align 1
  store %struct.intel8x0* %chip, %struct.intel8x0** %chip.addr, align 8
  store i32 %offset, i32* %offset.addr, align 4
  store i8 %val, i8* %val.addr, align 1
  %0 = load i8, i8* %val.addr, align 1
  %1 = load %struct.intel8x0*, %struct.intel8x0** %chip.addr, align 8
  %bmaddr = getelementptr inbounds %struct.intel8x0, %struct.intel8x0* %1, i32 0, i32 3
  %2 = load i8*, i8** %bmaddr, align 8
  %3 = load i32, i32* %offset.addr, align 4
  %idx.ext = zext i32 %3 to i64
  %add.ptr = getelementptr i8, i8* %2, i64 %idx.ext
  call void @iowrite8(i8 zeroext %0, i8* %add.ptr)
  ret void
}

; Function Attrs: noinline nounwind optnone uwtable
define internal i32 @pci_read_config_dword(%struct.pci_dev* %dev, i32 %where, i32* %val) #0 {
entry:
  %dev.addr = alloca %struct.pci_dev*, align 8
  %where.addr = alloca i32, align 4
  %val.addr = alloca i32*, align 8
  store %struct.pci_dev* %dev, %struct.pci_dev** %dev.addr, align 8
  store i32 %where, i32* %where.addr, align 4
  store i32* %val, i32** %val.addr, align 8
  %0 = load %struct.pci_dev*, %struct.pci_dev** %dev.addr, align 8
  %bus = getelementptr inbounds %struct.pci_dev, %struct.pci_dev* %0, i32 0, i32 1
  %1 = load %struct.pci_bus*, %struct.pci_bus** %bus, align 8
  %2 = load %struct.pci_dev*, %struct.pci_dev** %dev.addr, align 8
  %devfn = getelementptr inbounds %struct.pci_dev, %struct.pci_dev* %2, i32 0, i32 6
  %3 = load i32, i32* %devfn, align 8
  %4 = load i32, i32* %where.addr, align 4
  %5 = load i32*, i32** %val.addr, align 8
  %call = call i32 @pci_bus_read_config_dword(%struct.pci_bus* %1, i32 %3, i32 %4, i32* %5)
  ret i32 %call
}

; Function Attrs: noinline nounwind optnone uwtable
define internal i32 @pci_write_config_dword(%struct.pci_dev* %dev, i32 %where, i32 %val) #0 {
entry:
  %dev.addr = alloca %struct.pci_dev*, align 8
  %where.addr = alloca i32, align 4
  %val.addr = alloca i32, align 4
  store %struct.pci_dev* %dev, %struct.pci_dev** %dev.addr, align 8
  store i32 %where, i32* %where.addr, align 4
  store i32 %val, i32* %val.addr, align 4
  %0 = load %struct.pci_dev*, %struct.pci_dev** %dev.addr, align 8
  %bus = getelementptr inbounds %struct.pci_dev, %struct.pci_dev* %0, i32 0, i32 1
  %1 = load %struct.pci_bus*, %struct.pci_bus** %bus, align 8
  %2 = load %struct.pci_dev*, %struct.pci_dev** %dev.addr, align 8
  %devfn = getelementptr inbounds %struct.pci_dev, %struct.pci_dev* %2, i32 0, i32 6
  %3 = load i32, i32* %devfn, align 8
  %4 = load i32, i32* %where.addr, align 4
  %5 = load i32, i32* %val.addr, align 4
  %call = call i32 @pci_bus_write_config_dword(%struct.pci_bus* %1, i32 %3, i32 %4, i32 %5)
  ret i32 %call
}

declare void @free_irq(i32, i8*) #1

declare void @snd_dma_free_pages(%struct.snd_dma_buffer*) #1

declare void @pci_iounmap(%struct.pci_dev*, i8*) #1

declare void @pci_release_regions(%struct.pci_dev*) #1

declare void @iowrite8(i8 zeroext, i8*) #1

declare i32 @pci_bus_read_config_dword(%struct.pci_bus*, i32, i32, i32*) #1

declare i32 @pci_bus_write_config_dword(%struct.pci_bus*, i32, i32, i32) #1

; Function Attrs: noinline nounwind optnone uwtable
define internal i32 @snd_intel8x0_ich_chip_init(%struct.intel8x0* %chip, i32 %probing) #0 {
entry:
  %retval = alloca i32, align 4
  %chip.addr = alloca %struct.intel8x0*, align 8
  %probing.addr = alloca i32, align 4
  %end_time = alloca i64, align 8
  %status = alloca i32, align 4
  %nstatus = alloca i32, align 4
  %cnt = alloca i32, align 4
  %err = alloca i32, align 4
  %__dummy = alloca i64, align 8
  %__dummy2 = alloca i64, align 8
  %tmp = alloca i32, align 4
  %__dummy14 = alloca i64, align 8
  %__dummy215 = alloca i64, align 8
  %tmp18 = alloca i32, align 4
  %__dummy31 = alloca i64, align 8
  %__dummy232 = alloca i64, align 8
  %tmp35 = alloca i32, align 4
  %__dummy38 = alloca i64, align 8
  %__dummy239 = alloca i64, align 8
  %tmp42 = alloca i32, align 4
  %i = alloca i32, align 4
  %__dummy76 = alloca i64, align 8
  %__dummy277 = alloca i64, align 8
  %tmp80 = alloca i32, align 4
  %__dummy83 = alloca i64, align 8
  %__dummy284 = alloca i64, align 8
  %tmp87 = alloca i32, align 4
  %val = alloca i32, align 4
  store %struct.intel8x0* %chip, %struct.intel8x0** %chip.addr, align 8
  store i32 %probing, i32* %probing.addr, align 4
  store i32 32992, i32* %status, align 4
  %0 = load %struct.intel8x0*, %struct.intel8x0** %chip.addr, align 8
  %device_type = getelementptr inbounds %struct.intel8x0, %struct.intel8x0* %0, i32 0, i32 0
  %1 = load i32, i32* %device_type, align 8
  %cmp = icmp eq i32 %1, 4
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %2 = load i32, i32* %status, align 4
  %or = or i32 %2, 16
  store i32 %or, i32* %status, align 4
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  %3 = load %struct.intel8x0*, %struct.intel8x0** %chip.addr, align 8
  %call = call i32 @igetdword(%struct.intel8x0* %3, i32 48)
  store i32 %call, i32* %cnt, align 4
  %4 = load %struct.intel8x0*, %struct.intel8x0** %chip.addr, align 8
  %5 = load i32, i32* %cnt, align 4
  %6 = load i32, i32* %status, align 4
  %and = and i32 %5, %6
  call void @iputdword(%struct.intel8x0* %4, i32 48, i32 %and)
  %7 = load %struct.intel8x0*, %struct.intel8x0** %chip.addr, align 8
  %call1 = call i32 @snd_intel8x0_ich_chip_reset(%struct.intel8x0* %7)
  store i32 %call1, i32* %err, align 4
  %8 = load i32, i32* %err, align 4
  %cmp2 = icmp slt i32 %8, 0
  br i1 %cmp2, label %if.then3, label %if.end4

if.then3:                                         ; preds = %if.end
  %9 = load i32, i32* %err, align 4
  store i32 %9, i32* %retval, align 4
  br label %return

if.end4:                                          ; preds = %if.end
  %10 = load i32, i32* %probing.addr, align 4
  %tobool = icmp ne i32 %10, 0
  br i1 %tobool, label %if.then5, label %if.else

if.then5:                                         ; preds = %if.end4
  %11 = load volatile i64, i64* @jiffies, align 8
  %add = add i64 %11, 1000
  store i64 %add, i64* %end_time, align 8
  br label %do.body

do.body:                                          ; preds = %land.end, %if.then5
  %12 = load %struct.intel8x0*, %struct.intel8x0** %chip.addr, align 8
  %call6 = call i32 @igetdword(%struct.intel8x0* %12, i32 48)
  %13 = load %struct.intel8x0*, %struct.intel8x0** %chip.addr, align 8
  %codec_isr_bits = getelementptr inbounds %struct.intel8x0, %struct.intel8x0* %13, i32 0, i32 18
  %14 = load i32, i32* %codec_isr_bits, align 8
  %and7 = and i32 %call6, %14
  store i32 %and7, i32* %status, align 4
  %15 = load i32, i32* %status, align 4
  %tobool8 = icmp ne i32 %15, 0
  br i1 %tobool8, label %if.then9, label %if.end10

if.then9:                                         ; preds = %do.body
  br label %do.end

if.end10:                                         ; preds = %do.body
  %call11 = call i64 @schedule_timeout_uninterruptible(i64 1)
  br label %do.cond

do.cond:                                          ; preds = %if.end10
  %cmp12 = icmp eq i64* %__dummy, %__dummy2
  %conv = zext i1 %cmp12 to i32
  store i32 1, i32* %tmp, align 4
  %16 = load i32, i32* %tmp, align 4
  %tobool13 = icmp ne i32 %16, 0
  br i1 %tobool13, label %land.lhs.true, label %land.end

land.lhs.true:                                    ; preds = %do.cond
  %cmp16 = icmp eq i64* %__dummy14, %__dummy215
  %conv17 = zext i1 %cmp16 to i32
  store i32 1, i32* %tmp18, align 4
  %17 = load i32, i32* %tmp18, align 4
  %tobool19 = icmp ne i32 %17, 0
  br i1 %tobool19, label %land.rhs, label %land.end

land.rhs:                                         ; preds = %land.lhs.true
  %18 = load i64, i64* %end_time, align 8
  %19 = load volatile i64, i64* @jiffies, align 8
  %sub = sub i64 %18, %19
  %cmp20 = icmp sge i64 %sub, 0
  br label %land.end

land.end:                                         ; preds = %land.rhs, %land.lhs.true, %do.cond
  %20 = phi i1 [ false, %land.lhs.true ], [ false, %do.cond ], [ %cmp20, %land.rhs ]
  br i1 %20, label %do.body, label %do.end.loopexit

do.end.loopexit:                                  ; preds = %land.end
  br label %do.end

do.end:                                           ; preds = %do.end.loopexit, %if.then9
  %21 = load i32, i32* %status, align 4
  %tobool22 = icmp ne i32 %21, 0
  br i1 %tobool22, label %if.end25, label %if.then23

if.then23:                                        ; preds = %do.end
  %22 = load %struct.intel8x0*, %struct.intel8x0** %chip.addr, align 8
  %card = getelementptr inbounds %struct.intel8x0, %struct.intel8x0* %22, i32 0, i32 5
  %23 = load %struct.snd_card*, %struct.snd_card** %card, align 8
  %dev = getelementptr inbounds %struct.snd_card, %struct.snd_card* %23, i32 0, i32 29
  %24 = load %struct.device*, %struct.device** %dev, align 8
  %25 = load %struct.intel8x0*, %struct.intel8x0** %chip.addr, align 8
  %call24 = call i32 @igetdword(%struct.intel8x0* %25, i32 48)
  call void (%struct.device*, i8*, ...) @dev_err(%struct.device* %24, i8* getelementptr inbounds ([40 x i8], [40 x i8]* @.str.38, i32 0, i32 0), i32 %call24)
  store i32 -5, i32* %retval, align 4
  br label %return

if.end25:                                         ; preds = %do.end
  %26 = load volatile i64, i64* @jiffies, align 8
  %add26 = add i64 %26, 250
  store i64 %add26, i64* %end_time, align 8
  br label %while.cond

while.cond:                                       ; preds = %while.body, %if.end25
  %27 = load i32, i32* %status, align 4
  %28 = load %struct.intel8x0*, %struct.intel8x0** %chip.addr, align 8
  %codec_isr_bits27 = getelementptr inbounds %struct.intel8x0, %struct.intel8x0* %28, i32 0, i32 18
  %29 = load i32, i32* %codec_isr_bits27, align 8
  %cmp28 = icmp ne i32 %27, %29
  br i1 %cmp28, label %land.rhs30, label %land.end49

land.rhs30:                                       ; preds = %while.cond
  %cmp33 = icmp eq i64* %__dummy31, %__dummy232
  %conv34 = zext i1 %cmp33 to i32
  store i32 1, i32* %tmp35, align 4
  %30 = load i32, i32* %tmp35, align 4
  %tobool36 = icmp ne i32 %30, 0
  br i1 %tobool36, label %land.lhs.true37, label %land.end48

land.lhs.true37:                                  ; preds = %land.rhs30
  %cmp40 = icmp eq i64* %__dummy38, %__dummy239
  %conv41 = zext i1 %cmp40 to i32
  store i32 1, i32* %tmp42, align 4
  %31 = load i32, i32* %tmp42, align 4
  %tobool43 = icmp ne i32 %31, 0
  br i1 %tobool43, label %land.rhs44, label %land.end48

land.rhs44:                                       ; preds = %land.lhs.true37
  %32 = load i64, i64* %end_time, align 8
  %33 = load volatile i64, i64* @jiffies, align 8
  %sub45 = sub i64 %32, %33
  %cmp46 = icmp sge i64 %sub45, 0
  br label %land.end48

land.end48:                                       ; preds = %land.rhs44, %land.lhs.true37, %land.rhs30
  %34 = phi i1 [ false, %land.lhs.true37 ], [ false, %land.rhs30 ], [ %cmp46, %land.rhs44 ]
  br label %land.end49

land.end49:                                       ; preds = %land.end48, %while.cond
  %35 = phi i1 [ false, %while.cond ], [ %34, %land.end48 ]
  br i1 %35, label %while.body, label %while.end

while.body:                                       ; preds = %land.end49
  %call50 = call i64 @schedule_timeout_uninterruptible(i64 1)
  %36 = load %struct.intel8x0*, %struct.intel8x0** %chip.addr, align 8
  %call51 = call i32 @igetdword(%struct.intel8x0* %36, i32 48)
  %37 = load %struct.intel8x0*, %struct.intel8x0** %chip.addr, align 8
  %codec_isr_bits52 = getelementptr inbounds %struct.intel8x0, %struct.intel8x0* %37, i32 0, i32 18
  %38 = load i32, i32* %codec_isr_bits52, align 8
  %and53 = and i32 %call51, %38
  %39 = load i32, i32* %status, align 4
  %or54 = or i32 %39, %and53
  store i32 %or54, i32* %status, align 4
  br label %while.cond

while.end:                                        ; preds = %land.end49
  br label %if.end95

if.else:                                          ; preds = %if.end4
  store i32 0, i32* %status, align 4
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %if.else
  %40 = load i32, i32* %i, align 4
  %41 = load %struct.intel8x0*, %struct.intel8x0** %chip.addr, align 8
  %ncodecs = getelementptr inbounds %struct.intel8x0, %struct.intel8x0* %41, i32 0, i32 16
  %42 = load i32, i32* %ncodecs, align 8
  %cmp55 = icmp ult i32 %40, %42
  br i1 %cmp55, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %43 = load %struct.intel8x0*, %struct.intel8x0** %chip.addr, align 8
  %ac97 = getelementptr inbounds %struct.intel8x0, %struct.intel8x0* %43, i32 0, i32 13
  %44 = load i32, i32* %i, align 4
  %idxprom = sext i32 %44 to i64
  %arrayidx = getelementptr inbounds [3 x %struct.snd_ac97*], [3 x %struct.snd_ac97*]* %ac97, i64 0, i64 %idxprom
  %45 = load %struct.snd_ac97*, %struct.snd_ac97** %arrayidx, align 8
  %tobool57 = icmp ne %struct.snd_ac97* %45, null
  br i1 %tobool57, label %if.then58, label %if.end64

if.then58:                                        ; preds = %for.body
  %46 = load %struct.intel8x0*, %struct.intel8x0** %chip.addr, align 8
  %codec_bit = getelementptr inbounds %struct.intel8x0, %struct.intel8x0* %46, i32 0, i32 17
  %47 = load i32*, i32** %codec_bit, align 8
  %48 = load %struct.intel8x0*, %struct.intel8x0** %chip.addr, align 8
  %ac97_sdin = getelementptr inbounds %struct.intel8x0, %struct.intel8x0* %48, i32 0, i32 14
  %49 = load i32, i32* %i, align 4
  %idxprom59 = sext i32 %49 to i64
  %arrayidx60 = getelementptr inbounds [3 x i32], [3 x i32]* %ac97_sdin, i64 0, i64 %idxprom59
  %50 = load i32, i32* %arrayidx60, align 4
  %idxprom61 = zext i32 %50 to i64
  %arrayidx62 = getelementptr inbounds i32, i32* %47, i64 %idxprom61
  %51 = load i32, i32* %arrayidx62, align 4
  %52 = load i32, i32* %status, align 4
  %or63 = or i32 %52, %51
  store i32 %or63, i32* %status, align 4
  br label %if.end64

if.end64:                                         ; preds = %if.then58, %for.body
  br label %for.inc

for.inc:                                          ; preds = %if.end64
  %53 = load i32, i32* %i, align 4
  %inc = add nsw i32 %53, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %54 = load volatile i64, i64* @jiffies, align 8
  %add65 = add i64 %54, 1000
  store i64 %add65, i64* %end_time, align 8
  br label %do.body66

do.body66:                                        ; preds = %land.end93, %for.end
  %55 = load %struct.intel8x0*, %struct.intel8x0** %chip.addr, align 8
  %call67 = call i32 @igetdword(%struct.intel8x0* %55, i32 48)
  %56 = load %struct.intel8x0*, %struct.intel8x0** %chip.addr, align 8
  %codec_isr_bits68 = getelementptr inbounds %struct.intel8x0, %struct.intel8x0* %56, i32 0, i32 18
  %57 = load i32, i32* %codec_isr_bits68, align 8
  %and69 = and i32 %call67, %57
  store i32 %and69, i32* %nstatus, align 4
  %58 = load i32, i32* %status, align 4
  %59 = load i32, i32* %nstatus, align 4
  %cmp70 = icmp eq i32 %58, %59
  br i1 %cmp70, label %if.then72, label %if.end73

if.then72:                                        ; preds = %do.body66
  br label %do.end94

if.end73:                                         ; preds = %do.body66
  %call74 = call i64 @schedule_timeout_uninterruptible(i64 1)
  br label %do.cond75

do.cond75:                                        ; preds = %if.end73
  %cmp78 = icmp eq i64* %__dummy76, %__dummy277
  %conv79 = zext i1 %cmp78 to i32
  store i32 1, i32* %tmp80, align 4
  %60 = load i32, i32* %tmp80, align 4
  %tobool81 = icmp ne i32 %60, 0
  br i1 %tobool81, label %land.lhs.true82, label %land.end93

land.lhs.true82:                                  ; preds = %do.cond75
  %cmp85 = icmp eq i64* %__dummy83, %__dummy284
  %conv86 = zext i1 %cmp85 to i32
  store i32 1, i32* %tmp87, align 4
  %61 = load i32, i32* %tmp87, align 4
  %tobool88 = icmp ne i32 %61, 0
  br i1 %tobool88, label %land.rhs89, label %land.end93

land.rhs89:                                       ; preds = %land.lhs.true82
  %62 = load i64, i64* %end_time, align 8
  %63 = load volatile i64, i64* @jiffies, align 8
  %sub90 = sub i64 %62, %63
  %cmp91 = icmp sge i64 %sub90, 0
  br label %land.end93

land.end93:                                       ; preds = %land.rhs89, %land.lhs.true82, %do.cond75
  %64 = phi i1 [ false, %land.lhs.true82 ], [ false, %do.cond75 ], [ %cmp91, %land.rhs89 ]
  br i1 %64, label %do.body66, label %do.end94.loopexit

do.end94.loopexit:                                ; preds = %land.end93
  br label %do.end94

do.end94:                                         ; preds = %do.end94.loopexit, %if.then72
  br label %if.end95

if.end95:                                         ; preds = %do.end94, %while.end
  %65 = load %struct.intel8x0*, %struct.intel8x0** %chip.addr, align 8
  %device_type96 = getelementptr inbounds %struct.intel8x0, %struct.intel8x0* %65, i32 0, i32 0
  %66 = load i32, i32* %device_type96, align 8
  %cmp97 = icmp eq i32 %66, 2
  br i1 %cmp97, label %if.then99, label %if.end104

if.then99:                                        ; preds = %if.end95
  %67 = load %struct.intel8x0*, %struct.intel8x0** %chip.addr, align 8
  %68 = load %struct.intel8x0*, %struct.intel8x0** %chip.addr, align 8
  %call100 = call zeroext i16 @igetword(%struct.intel8x0* %68, i32 76)
  %conv101 = zext i16 %call100 to i32
  %or102 = or i32 %conv101, 1
  %conv103 = trunc i32 %or102 to i16
  call void @iputword(%struct.intel8x0* %67, i32 76, i16 zeroext %conv103)
  br label %if.end104

if.end104:                                        ; preds = %if.then99, %if.end95
  %69 = load %struct.intel8x0*, %struct.intel8x0** %chip.addr, align 8
  %device_type105 = getelementptr inbounds %struct.intel8x0, %struct.intel8x0* %69, i32 0, i32 0
  %70 = load i32, i32* %device_type105, align 8
  %cmp106 = icmp eq i32 %70, 4
  br i1 %cmp106, label %land.lhs.true108, label %if.end115

land.lhs.true108:                                 ; preds = %if.end104
  %71 = load i32, i32* @spdif_aclink, align 4
  %tobool109 = icmp ne i32 %71, 0
  br i1 %tobool109, label %if.end115, label %if.then110

if.then110:                                       ; preds = %land.lhs.true108
  %72 = load %struct.intel8x0*, %struct.intel8x0** %chip.addr, align 8
  %pci = getelementptr inbounds %struct.intel8x0, %struct.intel8x0* %72, i32 0, i32 4
  %73 = load %struct.pci_dev*, %struct.pci_dev** %pci, align 8
  %call111 = call i32 @pci_read_config_dword(%struct.pci_dev* %73, i32 76, i32* %val)
  %74 = load i32, i32* %val, align 4
  %or112 = or i32 %74, 16777216
  store i32 %or112, i32* %val, align 4
  %75 = load %struct.intel8x0*, %struct.intel8x0** %chip.addr, align 8
  %pci113 = getelementptr inbounds %struct.intel8x0, %struct.intel8x0* %75, i32 0, i32 4
  %76 = load %struct.pci_dev*, %struct.pci_dev** %pci113, align 8
  %77 = load i32, i32* %val, align 4
  %call114 = call i32 @pci_write_config_dword(%struct.pci_dev* %76, i32 76, i32 %77)
  br label %if.end115

if.end115:                                        ; preds = %if.then110, %land.lhs.true108, %if.end104
  store i32 0, i32* %retval, align 4
  br label %return

return:                                           ; preds = %if.end115, %if.then23, %if.then3
  %78 = load i32, i32* %retval, align 4
  ret i32 %78
}

; Function Attrs: noinline nounwind optnone uwtable
define internal zeroext i16 @iagetword(%struct.intel8x0* %chip, i32 %offset) #0 {
entry:
  %chip.addr = alloca %struct.intel8x0*, align 8
  %offset.addr = alloca i32, align 4
  store %struct.intel8x0* %chip, %struct.intel8x0** %chip.addr, align 8
  store i32 %offset, i32* %offset.addr, align 4
  %0 = load %struct.intel8x0*, %struct.intel8x0** %chip.addr, align 8
  %addr = getelementptr inbounds %struct.intel8x0, %struct.intel8x0* %0, i32 0, i32 2
  %1 = load i8*, i8** %addr, align 8
  %2 = load i32, i32* %offset.addr, align 4
  %idx.ext = zext i32 %2 to i64
  %add.ptr = getelementptr i8, i8* %1, i64 %idx.ext
  %call = call i32 @ioread16(i8* %add.ptr)
  %conv = trunc i32 %call to i16
  ret i16 %conv
}

; Function Attrs: noinline nounwind optnone uwtable
define internal i32 @snd_intel8x0_ali_chip_init(%struct.intel8x0* %chip, i32 %probing) #0 {
entry:
  %retval = alloca i32, align 4
  %chip.addr = alloca %struct.intel8x0*, align 8
  %probing.addr = alloca i32, align 4
  %reg = alloca i32, align 4
  %i = alloca i32, align 4
  store %struct.intel8x0* %chip, %struct.intel8x0** %chip.addr, align 8
  store i32 %probing, i32* %probing.addr, align 4
  store i32 0, i32* %i, align 4
  %0 = load %struct.intel8x0*, %struct.intel8x0** %chip.addr, align 8
  %call = call i32 @igetdword(%struct.intel8x0* %0, i32 0)
  store i32 %call, i32* %reg, align 4
  %1 = load i32, i32* %reg, align 4
  %and = and i32 %1, 2
  %cmp = icmp eq i32 %and, 0
  br i1 %cmp, label %if.then, label %if.else

if.then:                                          ; preds = %entry
  %2 = load i32, i32* %reg, align 4
  %or = or i32 %2, 2
  store i32 %or, i32* %reg, align 4
  br label %if.end

if.else:                                          ; preds = %entry
  %3 = load i32, i32* %reg, align 4
  %or1 = or i32 %3, 1
  store i32 %or1, i32* %reg, align 4
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then
  %4 = load i32, i32* %reg, align 4
  %and2 = and i32 %4, 2147483647
  store i32 %and2, i32* %reg, align 4
  %5 = load %struct.intel8x0*, %struct.intel8x0** %chip.addr, align 8
  %6 = load i32, i32* %reg, align 4
  call void @iputdword(%struct.intel8x0* %5, i32 0, i32 %6)
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %if.end
  %7 = load i32, i32* %i, align 4
  %cmp3 = icmp slt i32 %7, 500
  br i1 %cmp3, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %8 = load %struct.intel8x0*, %struct.intel8x0** %chip.addr, align 8
  %call4 = call i32 @igetdword(%struct.intel8x0* %8, i32 24)
  %and5 = and i32 %call4, 2
  %tobool = icmp ne i32 %and5, 0
  br i1 %tobool, label %if.end7, label %if.then6

if.then6:                                         ; preds = %for.body
  br label %__ok

if.end7:                                          ; preds = %for.body
  %call8 = call i64 @schedule_timeout_uninterruptible(i64 1)
  br label %for.inc

for.inc:                                          ; preds = %if.end7
  %9 = load i32, i32* %i, align 4
  %inc = add nsw i32 %9, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %10 = load %struct.intel8x0*, %struct.intel8x0** %chip.addr, align 8
  %card = getelementptr inbounds %struct.intel8x0, %struct.intel8x0* %10, i32 0, i32 5
  %11 = load %struct.snd_card*, %struct.snd_card** %card, align 8
  %dev = getelementptr inbounds %struct.snd_card, %struct.snd_card* %11, i32 0, i32 29
  %12 = load %struct.device*, %struct.device** %dev, align 8
  call void (%struct.device*, i8*, ...) @dev_err(%struct.device* %12, i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.40, i32 0, i32 0))
  %13 = load i32, i32* %probing.addr, align 4
  %tobool9 = icmp ne i32 %13, 0
  br i1 %tobool9, label %if.then10, label %if.end11

if.then10:                                        ; preds = %for.end
  store i32 -5, i32* %retval, align 4
  br label %return

if.end11:                                         ; preds = %for.end
  br label %__ok

__ok:                                             ; preds = %if.end11, %if.then6
  store i32 0, i32* %i, align 4
  br label %for.cond12

for.cond12:                                       ; preds = %for.inc22, %__ok
  %14 = load i32, i32* %i, align 4
  %cmp13 = icmp slt i32 %14, 500
  br i1 %cmp13, label %for.body14, label %for.end24.loopexit

for.body14:                                       ; preds = %for.cond12
  %15 = load %struct.intel8x0*, %struct.intel8x0** %chip.addr, align 8
  %call15 = call i32 @igetdword(%struct.intel8x0* %15, i32 52)
  store i32 %call15, i32* %reg, align 4
  %16 = load i32, i32* %reg, align 4
  %and16 = and i32 %16, 128
  %tobool17 = icmp ne i32 %and16, 0
  br i1 %tobool17, label %if.then18, label %if.end19

if.then18:                                        ; preds = %for.body14
  br label %for.end24

if.end19:                                         ; preds = %for.body14
  %17 = load %struct.intel8x0*, %struct.intel8x0** %chip.addr, align 8
  %18 = load i32, i32* %reg, align 4
  %or20 = or i32 %18, 128
  call void @iputdword(%struct.intel8x0* %17, i32 52, i32 %or20)
  %call21 = call i64 @schedule_timeout_uninterruptible(i64 1)
  br label %for.inc22

for.inc22:                                        ; preds = %if.end19
  %19 = load i32, i32* %i, align 4
  %inc23 = add nsw i32 %19, 1
  store i32 %inc23, i32* %i, align 4
  br label %for.cond12

for.end24.loopexit:                               ; preds = %for.cond12
  br label %for.end24

for.end24:                                        ; preds = %for.end24.loopexit, %if.then18
  %20 = load %struct.intel8x0*, %struct.intel8x0** %chip.addr, align 8
  call void @do_ali_reset(%struct.intel8x0* %20)
  store i32 0, i32* %retval, align 4
  br label %return

return:                                           ; preds = %for.end24, %if.then10
  %21 = load i32, i32* %retval, align 4
  ret i32 %21
}

; Function Attrs: noinline nounwind optnone uwtable
define internal zeroext i8 @igetbyte(%struct.intel8x0* %chip, i32 %offset) #0 {
entry:
  %chip.addr = alloca %struct.intel8x0*, align 8
  %offset.addr = alloca i32, align 4
  store %struct.intel8x0* %chip, %struct.intel8x0** %chip.addr, align 8
  store i32 %offset, i32* %offset.addr, align 4
  %0 = load %struct.intel8x0*, %struct.intel8x0** %chip.addr, align 8
  %bmaddr = getelementptr inbounds %struct.intel8x0, %struct.intel8x0* %0, i32 0, i32 3
  %1 = load i8*, i8** %bmaddr, align 8
  %2 = load i32, i32* %offset.addr, align 4
  %idx.ext = zext i32 %2 to i64
  %add.ptr = getelementptr i8, i8* %1, i64 %idx.ext
  %call = call i32 @ioread8(i8* %add.ptr)
  %conv = trunc i32 %call to i8
  ret i8 %conv
}

; Function Attrs: noinline nounwind optnone uwtable
define internal void @iputdword(%struct.intel8x0* %chip, i32 %offset, i32 %val) #0 {
entry:
  %chip.addr = alloca %struct.intel8x0*, align 8
  %offset.addr = alloca i32, align 4
  %val.addr = alloca i32, align 4
  store %struct.intel8x0* %chip, %struct.intel8x0** %chip.addr, align 8
  store i32 %offset, i32* %offset.addr, align 4
  store i32 %val, i32* %val.addr, align 4
  %0 = load i32, i32* %val.addr, align 4
  %1 = load %struct.intel8x0*, %struct.intel8x0** %chip.addr, align 8
  %bmaddr = getelementptr inbounds %struct.intel8x0, %struct.intel8x0* %1, i32 0, i32 3
  %2 = load i8*, i8** %bmaddr, align 8
  %3 = load i32, i32* %offset.addr, align 4
  %idx.ext = zext i32 %3 to i64
  %add.ptr = getelementptr i8, i8* %2, i64 %idx.ext
  call void @iowrite32(i32 %0, i8* %add.ptr)
  ret void
}

; Function Attrs: noinline nounwind optnone uwtable
define internal i32 @igetdword(%struct.intel8x0* %chip, i32 %offset) #0 {
entry:
  %chip.addr = alloca %struct.intel8x0*, align 8
  %offset.addr = alloca i32, align 4
  store %struct.intel8x0* %chip, %struct.intel8x0** %chip.addr, align 8
  store i32 %offset, i32* %offset.addr, align 4
  %0 = load %struct.intel8x0*, %struct.intel8x0** %chip.addr, align 8
  %bmaddr = getelementptr inbounds %struct.intel8x0, %struct.intel8x0* %0, i32 0, i32 3
  %1 = load i8*, i8** %bmaddr, align 8
  %2 = load i32, i32* %offset.addr, align 4
  %idx.ext = zext i32 %2 to i64
  %add.ptr = getelementptr i8, i8* %1, i64 %idx.ext
  %call = call i32 @ioread32(i8* %add.ptr)
  ret i32 %call
}

; Function Attrs: noinline nounwind optnone uwtable
define internal i32 @snd_intel8x0_ich_chip_reset(%struct.intel8x0* %chip) #0 {
entry:
  %retval = alloca i32, align 4
  %chip.addr = alloca %struct.intel8x0*, align 8
  %end_time = alloca i64, align 8
  %cnt = alloca i32, align 4
  %__dummy = alloca i64, align 8
  %__dummy2 = alloca i64, align 8
  %tmp = alloca i32, align 4
  %__dummy8 = alloca i64, align 8
  %__dummy29 = alloca i64, align 8
  %tmp12 = alloca i32, align 4
  store %struct.intel8x0* %chip, %struct.intel8x0** %chip.addr, align 8
  %0 = load %struct.intel8x0*, %struct.intel8x0** %chip.addr, align 8
  %call = call i32 @igetdword(%struct.intel8x0* %0, i32 44)
  store i32 %call, i32* %cnt, align 4
  %1 = load i32, i32* %cnt, align 4
  %and = and i32 %1, -3145737
  store i32 %and, i32* %cnt, align 4
  %2 = load i32, i32* %cnt, align 4
  %and1 = and i32 %2, 2
  %cmp = icmp eq i32 %and1, 0
  %3 = zext i1 %cmp to i64
  %cond = select i1 %cmp, i32 2, i32 4
  %4 = load i32, i32* %cnt, align 4
  %or = or i32 %4, %cond
  store i32 %or, i32* %cnt, align 4
  %5 = load %struct.intel8x0*, %struct.intel8x0** %chip.addr, align 8
  %6 = load i32, i32* %cnt, align 4
  call void @iputdword(%struct.intel8x0* %5, i32 44, i32 %6)
  %7 = load volatile i64, i64* @jiffies, align 8
  %add = add i64 %7, 250
  %add2 = add i64 %add, 1
  store i64 %add2, i64* %end_time, align 8
  br label %do.body

do.body:                                          ; preds = %land.end, %entry
  %8 = load %struct.intel8x0*, %struct.intel8x0** %chip.addr, align 8
  %call3 = call i32 @igetdword(%struct.intel8x0* %8, i32 44)
  %and4 = and i32 %call3, 4
  %cmp5 = icmp eq i32 %and4, 0
  br i1 %cmp5, label %if.then, label %if.end

if.then:                                          ; preds = %do.body
  store i32 0, i32* %retval, align 4
  br label %return

if.end:                                           ; preds = %do.body
  %call6 = call i64 @schedule_timeout_uninterruptible(i64 1)
  br label %do.cond

do.cond:                                          ; preds = %if.end
  %cmp7 = icmp eq i64* %__dummy, %__dummy2
  %conv = zext i1 %cmp7 to i32
  store i32 1, i32* %tmp, align 4
  %9 = load i32, i32* %tmp, align 4
  %tobool = icmp ne i32 %9, 0
  br i1 %tobool, label %land.lhs.true, label %land.end

land.lhs.true:                                    ; preds = %do.cond
  %cmp10 = icmp eq i64* %__dummy8, %__dummy29
  %conv11 = zext i1 %cmp10 to i32
  store i32 1, i32* %tmp12, align 4
  %10 = load i32, i32* %tmp12, align 4
  %tobool13 = icmp ne i32 %10, 0
  br i1 %tobool13, label %land.rhs, label %land.end

land.rhs:                                         ; preds = %land.lhs.true
  %11 = load i64, i64* %end_time, align 8
  %12 = load volatile i64, i64* @jiffies, align 8
  %sub = sub i64 %11, %12
  %cmp14 = icmp sge i64 %sub, 0
  br label %land.end

land.end:                                         ; preds = %land.rhs, %land.lhs.true, %do.cond
  %13 = phi i1 [ false, %land.lhs.true ], [ false, %do.cond ], [ %cmp14, %land.rhs ]
  br i1 %13, label %do.body, label %do.end

do.end:                                           ; preds = %land.end
  %14 = load %struct.intel8x0*, %struct.intel8x0** %chip.addr, align 8
  %card = getelementptr inbounds %struct.intel8x0, %struct.intel8x0* %14, i32 0, i32 5
  %15 = load %struct.snd_card*, %struct.snd_card** %card, align 8
  %dev = getelementptr inbounds %struct.snd_card, %struct.snd_card* %15, i32 0, i32 29
  %16 = load %struct.device*, %struct.device** %dev, align 8
  %17 = load %struct.intel8x0*, %struct.intel8x0** %chip.addr, align 8
  %call16 = call i32 @igetdword(%struct.intel8x0* %17, i32 44)
  call void (%struct.device*, i8*, ...) @dev_err(%struct.device* %16, i8* getelementptr inbounds ([44 x i8], [44 x i8]* @.str.39, i32 0, i32 0), i32 %call16)
  store i32 -5, i32* %retval, align 4
  br label %return

return:                                           ; preds = %do.end, %if.then
  %18 = load i32, i32* %retval, align 4
  ret i32 %18
}

declare i64 @schedule_timeout_uninterruptible(i64) #1

; Function Attrs: noinline nounwind optnone uwtable
define internal void @iputword(%struct.intel8x0* %chip, i32 %offset, i16 zeroext %val) #0 {
entry:
  %chip.addr = alloca %struct.intel8x0*, align 8
  %offset.addr = alloca i32, align 4
  %val.addr = alloca i16, align 2
  store %struct.intel8x0* %chip, %struct.intel8x0** %chip.addr, align 8
  store i32 %offset, i32* %offset.addr, align 4
  store i16 %val, i16* %val.addr, align 2
  %0 = load i16, i16* %val.addr, align 2
  %1 = load %struct.intel8x0*, %struct.intel8x0** %chip.addr, align 8
  %bmaddr = getelementptr inbounds %struct.intel8x0, %struct.intel8x0* %1, i32 0, i32 3
  %2 = load i8*, i8** %bmaddr, align 8
  %3 = load i32, i32* %offset.addr, align 4
  %idx.ext = zext i32 %3 to i64
  %add.ptr = getelementptr i8, i8* %2, i64 %idx.ext
  call void @iowrite16(i16 zeroext %0, i8* %add.ptr)
  ret void
}

; Function Attrs: noinline nounwind optnone uwtable
define internal zeroext i16 @igetword(%struct.intel8x0* %chip, i32 %offset) #0 {
entry:
  %chip.addr = alloca %struct.intel8x0*, align 8
  %offset.addr = alloca i32, align 4
  store %struct.intel8x0* %chip, %struct.intel8x0** %chip.addr, align 8
  store i32 %offset, i32* %offset.addr, align 4
  %0 = load %struct.intel8x0*, %struct.intel8x0** %chip.addr, align 8
  %bmaddr = getelementptr inbounds %struct.intel8x0, %struct.intel8x0* %0, i32 0, i32 3
  %1 = load i8*, i8** %bmaddr, align 8
  %2 = load i32, i32* %offset.addr, align 4
  %idx.ext = zext i32 %2 to i64
  %add.ptr = getelementptr i8, i8* %1, i64 %idx.ext
  %call = call i32 @ioread16(i8* %add.ptr)
  %conv = trunc i32 %call to i16
  ret i16 %conv
}

declare i32 @ioread32(i8*) #1

declare void @iowrite16(i16 zeroext, i8*) #1

declare i32 @ioread16(i8*) #1

; Function Attrs: noinline nounwind optnone uwtable
define internal void @do_ali_reset(%struct.intel8x0* %chip) #0 {
entry:
  %chip.addr = alloca %struct.intel8x0*, align 8
  store %struct.intel8x0* %chip, %struct.intel8x0** %chip.addr, align 8
  %0 = load %struct.intel8x0*, %struct.intel8x0** %chip.addr, align 8
  call void @iputdword(%struct.intel8x0* %0, i32 0, i32 -2147483648)
  %1 = load %struct.intel8x0*, %struct.intel8x0** %chip.addr, align 8
  call void @iputdword(%struct.intel8x0* %1, i32 12, i32 -2088533117)
  %2 = load %struct.intel8x0*, %struct.intel8x0** %chip.addr, align 8
  call void @iputdword(%struct.intel8x0* %2, i32 28, i32 -2088533117)
  %3 = load %struct.intel8x0*, %struct.intel8x0** %chip.addr, align 8
  call void @iputdword(%struct.intel8x0* %3, i32 44, i32 -2088533117)
  %4 = load %struct.intel8x0*, %struct.intel8x0** %chip.addr, align 8
  call void @iputdword(%struct.intel8x0* %4, i32 16, i32 524290)
  %5 = load %struct.intel8x0*, %struct.intel8x0** %chip.addr, align 8
  call void @iputdword(%struct.intel8x0* %5, i32 20, i32 0)
  %6 = load %struct.intel8x0*, %struct.intel8x0** %chip.addr, align 8
  call void @iputdword(%struct.intel8x0* %6, i32 24, i32 0)
  ret void
}

declare i32 @ioread8(i8*) #1

declare void @iowrite32(i32, i8*) #1

declare i32 @request_threaded_irq(i32, i32 (i32, i8*)*, i32 (i32, i8*)*, i64, i8*, i8*) #1

; Function Attrs: noinline nounwind optnone uwtable
define internal void @snd_intel8x0_update(%struct.intel8x0* %chip, %struct.ichdev* %ichdev) #0 {
entry:
  %lock.addr.i70 = alloca %struct.spinlock*, align 8
  %flags.addr.i = alloca i64, align 8
  %__dummy.i = alloca i64, align 8
  %__dummy2.i = alloca i64, align 8
  %tmp.i = alloca i32, align 4
  %lock.addr.i = alloca %struct.spinlock*, align 8
  %chip.addr = alloca %struct.intel8x0*, align 8
  %ichdev.addr = alloca %struct.ichdev*, align 8
  %port = alloca i64, align 8
  %flags = alloca i64, align 8
  %status = alloca i32, align 4
  %civ = alloca i32, align 4
  %i = alloca i32, align 4
  %step = alloca i32, align 4
  %ack = alloca i32, align 4
  %__dummy = alloca i64, align 8
  %__dummy2 = alloca i64, align 8
  %tmp = alloca i32, align 4
  store %struct.intel8x0* %chip, %struct.intel8x0** %chip.addr, align 8
  store %struct.ichdev* %ichdev, %struct.ichdev** %ichdev.addr, align 8
  %0 = load %struct.ichdev*, %struct.ichdev** %ichdev.addr, align 8
  %reg_offset = getelementptr inbounds %struct.ichdev, %struct.ichdev* %0, i32 0, i32 1
  %1 = load i64, i64* %reg_offset, align 8
  store i64 %1, i64* %port, align 8
  store i32 0, i32* %ack, align 4
  br label %do.body

do.body:                                          ; preds = %entry
  br label %do.body1

do.body1:                                         ; preds = %do.body
  %cmp = icmp eq i64* %__dummy, %__dummy2
  %conv = zext i1 %cmp to i32
  store i32 1, i32* %tmp, align 4
  %2 = load i32, i32* %tmp, align 4
  %3 = load %struct.intel8x0*, %struct.intel8x0** %chip.addr, align 8
  %reg_lock = getelementptr inbounds %struct.intel8x0, %struct.intel8x0* %3, i32 0, i32 20
  store %struct.spinlock* %reg_lock, %struct.spinlock** %lock.addr.i, align 8
  %4 = load %struct.spinlock*, %struct.spinlock** %lock.addr.i, align 8
  %5 = getelementptr inbounds %struct.spinlock, %struct.spinlock* %4, i32 0, i32 0
  %rlock.i = bitcast %union.anon.1* %5 to %struct.raw_spinlock*
  %call2 = call i64 @_raw_spin_lock_irqsave(%struct.raw_spinlock* %rlock.i)
  store i64 %call2, i64* %flags, align 8
  br label %do.end

do.end:                                           ; preds = %do.body1
  br label %do.end3

do.end3:                                          ; preds = %do.end
  %6 = load %struct.intel8x0*, %struct.intel8x0** %chip.addr, align 8
  %7 = load i64, i64* %port, align 8
  %8 = load %struct.ichdev*, %struct.ichdev** %ichdev.addr, align 8
  %roff_sr = getelementptr inbounds %struct.ichdev, %struct.ichdev* %8, i32 0, i32 19
  %9 = load i32, i32* %roff_sr, align 8
  %conv4 = zext i32 %9 to i64
  %add = add i64 %7, %conv4
  %conv5 = trunc i64 %add to i32
  %call6 = call zeroext i8 @igetbyte(%struct.intel8x0* %6, i32 %conv5)
  %conv7 = zext i8 %call6 to i32
  store i32 %conv7, i32* %status, align 4
  %10 = load %struct.intel8x0*, %struct.intel8x0** %chip.addr, align 8
  %11 = load i64, i64* %port, align 8
  %add8 = add i64 %11, 4
  %conv9 = trunc i64 %add8 to i32
  %call10 = call zeroext i8 @igetbyte(%struct.intel8x0* %10, i32 %conv9)
  %conv11 = zext i8 %call10 to i32
  store i32 %conv11, i32* %civ, align 4
  %12 = load i32, i32* %status, align 4
  %and = and i32 %12, 8
  %tobool = icmp ne i32 %and, 0
  br i1 %tobool, label %if.else, label %if.then

if.then:                                          ; preds = %do.end3
  store i32 0, i32* %step, align 4
  br label %if.end27

if.else:                                          ; preds = %do.end3
  %13 = load i32, i32* %civ, align 4
  %14 = load %struct.ichdev*, %struct.ichdev** %ichdev.addr, align 8
  %civ12 = getelementptr inbounds %struct.ichdev, %struct.ichdev* %14, i32 0, i32 15
  %15 = load i32, i32* %civ12, align 8
  %cmp13 = icmp eq i32 %13, %15
  br i1 %cmp13, label %if.then15, label %if.else19

if.then15:                                        ; preds = %if.else
  store i32 1, i32* %step, align 4
  %16 = load %struct.ichdev*, %struct.ichdev** %ichdev.addr, align 8
  %civ16 = getelementptr inbounds %struct.ichdev, %struct.ichdev* %16, i32 0, i32 15
  %17 = load i32, i32* %civ16, align 8
  %inc = add nsw i32 %17, 1
  store i32 %inc, i32* %civ16, align 8
  %18 = load %struct.ichdev*, %struct.ichdev** %ichdev.addr, align 8
  %civ17 = getelementptr inbounds %struct.ichdev, %struct.ichdev* %18, i32 0, i32 15
  %19 = load i32, i32* %civ17, align 8
  %and18 = and i32 %19, 31
  store i32 %and18, i32* %civ17, align 8
  br label %if.end26

if.else19:                                        ; preds = %if.else
  %20 = load i32, i32* %civ, align 4
  %21 = load %struct.ichdev*, %struct.ichdev** %ichdev.addr, align 8
  %civ20 = getelementptr inbounds %struct.ichdev, %struct.ichdev* %21, i32 0, i32 15
  %22 = load i32, i32* %civ20, align 8
  %sub = sub nsw i32 %20, %22
  store i32 %sub, i32* %step, align 4
  %23 = load i32, i32* %step, align 4
  %cmp21 = icmp slt i32 %23, 0
  br i1 %cmp21, label %if.then23, label %if.end

if.then23:                                        ; preds = %if.else19
  %24 = load i32, i32* %step, align 4
  %add24 = add nsw i32 %24, 32
  store i32 %add24, i32* %step, align 4
  br label %if.end

if.end:                                           ; preds = %if.then23, %if.else19
  %25 = load i32, i32* %civ, align 4
  %26 = load %struct.ichdev*, %struct.ichdev** %ichdev.addr, align 8
  %civ25 = getelementptr inbounds %struct.ichdev, %struct.ichdev* %26, i32 0, i32 15
  store i32 %25, i32* %civ25, align 8
  br label %if.end26

if.end26:                                         ; preds = %if.end, %if.then15
  br label %if.end27

if.end27:                                         ; preds = %if.end26, %if.then
  %27 = load i32, i32* %step, align 4
  %28 = load %struct.ichdev*, %struct.ichdev** %ichdev.addr, align 8
  %fragsize1 = getelementptr inbounds %struct.ichdev, %struct.ichdev* %28, i32 0, i32 8
  %29 = load i32, i32* %fragsize1, align 4
  %mul = mul i32 %27, %29
  %30 = load %struct.ichdev*, %struct.ichdev** %ichdev.addr, align 8
  %position = getelementptr inbounds %struct.ichdev, %struct.ichdev* %30, i32 0, i32 9
  %31 = load i32, i32* %position, align 8
  %add28 = add i32 %31, %mul
  store i32 %add28, i32* %position, align 8
  %32 = load %struct.intel8x0*, %struct.intel8x0** %chip.addr, align 8
  %in_measurement = getelementptr inbounds %struct.intel8x0, %struct.intel8x0* %32, i32 0, i32 9
  %bf.load = load i16, i16* %in_measurement, align 8
  %bf.lshr = lshr i16 %bf.load, 7
  %bf.clear = and i16 %bf.lshr, 1
  %bf.cast = zext i16 %bf.clear to i32
  %tobool29 = icmp ne i32 %bf.cast, 0
  br i1 %tobool29, label %if.end32, label %if.then30

if.then30:                                        ; preds = %if.end27
  %33 = load %struct.ichdev*, %struct.ichdev** %ichdev.addr, align 8
  %size = getelementptr inbounds %struct.ichdev, %struct.ichdev* %33, i32 0, i32 6
  %34 = load i32, i32* %size, align 4
  %35 = load %struct.ichdev*, %struct.ichdev** %ichdev.addr, align 8
  %position31 = getelementptr inbounds %struct.ichdev, %struct.ichdev* %35, i32 0, i32 9
  %36 = load i32, i32* %position31, align 8
  %rem = urem i32 %36, %34
  store i32 %rem, i32* %position31, align 8
  br label %if.end32

if.end32:                                         ; preds = %if.then30, %if.end27
  %37 = load i32, i32* %step, align 4
  %38 = load %struct.ichdev*, %struct.ichdev** %ichdev.addr, align 8
  %lvi = getelementptr inbounds %struct.ichdev, %struct.ichdev* %38, i32 0, i32 13
  %39 = load i32, i32* %lvi, align 8
  %add33 = add nsw i32 %39, %37
  store i32 %add33, i32* %lvi, align 8
  %40 = load %struct.ichdev*, %struct.ichdev** %ichdev.addr, align 8
  %lvi34 = getelementptr inbounds %struct.ichdev, %struct.ichdev* %40, i32 0, i32 13
  %41 = load i32, i32* %lvi34, align 8
  %and35 = and i32 %41, 31
  store i32 %and35, i32* %lvi34, align 8
  %42 = load %struct.intel8x0*, %struct.intel8x0** %chip.addr, align 8
  %43 = load i64, i64* %port, align 8
  %add36 = add i64 %43, 5
  %conv37 = trunc i64 %add36 to i32
  %44 = load %struct.ichdev*, %struct.ichdev** %ichdev.addr, align 8
  %lvi38 = getelementptr inbounds %struct.ichdev, %struct.ichdev* %44, i32 0, i32 13
  %45 = load i32, i32* %lvi38, align 8
  %conv39 = trunc i32 %45 to i8
  call void @iputbyte(%struct.intel8x0* %42, i32 %conv37, i8 zeroext %conv39)
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %if.end32
  %46 = load i32, i32* %i, align 4
  %47 = load i32, i32* %step, align 4
  %cmp40 = icmp slt i32 %46, %47
  br i1 %cmp40, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %48 = load %struct.ichdev*, %struct.ichdev** %ichdev.addr, align 8
  %lvi_frag = getelementptr inbounds %struct.ichdev, %struct.ichdev* %48, i32 0, i32 14
  %49 = load i32, i32* %lvi_frag, align 4
  %inc42 = add nsw i32 %49, 1
  store i32 %inc42, i32* %lvi_frag, align 4
  %50 = load %struct.ichdev*, %struct.ichdev** %ichdev.addr, align 8
  %frags = getelementptr inbounds %struct.ichdev, %struct.ichdev* %50, i32 0, i32 12
  %51 = load i32, i32* %frags, align 4
  %52 = load %struct.ichdev*, %struct.ichdev** %ichdev.addr, align 8
  %lvi_frag43 = getelementptr inbounds %struct.ichdev, %struct.ichdev* %52, i32 0, i32 14
  %53 = load i32, i32* %lvi_frag43, align 4
  %rem44 = srem i32 %53, %51
  store i32 %rem44, i32* %lvi_frag43, align 4
  %54 = load %struct.ichdev*, %struct.ichdev** %ichdev.addr, align 8
  %physbuf = getelementptr inbounds %struct.ichdev, %struct.ichdev* %54, i32 0, i32 5
  %55 = load i32, i32* %physbuf, align 8
  %56 = load %struct.ichdev*, %struct.ichdev** %ichdev.addr, align 8
  %lvi_frag45 = getelementptr inbounds %struct.ichdev, %struct.ichdev* %56, i32 0, i32 14
  %57 = load i32, i32* %lvi_frag45, align 4
  %58 = load %struct.ichdev*, %struct.ichdev** %ichdev.addr, align 8
  %fragsize146 = getelementptr inbounds %struct.ichdev, %struct.ichdev* %58, i32 0, i32 8
  %59 = load i32, i32* %fragsize146, align 4
  %mul47 = mul i32 %57, %59
  %add48 = add i32 %55, %mul47
  %60 = load %struct.ichdev*, %struct.ichdev** %ichdev.addr, align 8
  %bdbar = getelementptr inbounds %struct.ichdev, %struct.ichdev* %60, i32 0, i32 2
  %61 = load i32*, i32** %bdbar, align 8
  %62 = load %struct.ichdev*, %struct.ichdev** %ichdev.addr, align 8
  %lvi49 = getelementptr inbounds %struct.ichdev, %struct.ichdev* %62, i32 0, i32 13
  %63 = load i32, i32* %lvi49, align 8
  %mul50 = mul nsw i32 %63, 2
  %idxprom = sext i32 %mul50 to i64
  %arrayidx = getelementptr inbounds i32, i32* %61, i64 %idxprom
  store i32 %add48, i32* %arrayidx, align 4
  %64 = load %struct.ichdev*, %struct.ichdev** %ichdev.addr, align 8
  %ack51 = getelementptr inbounds %struct.ichdev, %struct.ichdev* %64, i32 0, i32 16
  %65 = load i32, i32* %ack51, align 4
  %dec = add nsw i32 %65, -1
  store i32 %dec, i32* %ack51, align 4
  %cmp52 = icmp eq i32 %dec, 0
  br i1 %cmp52, label %if.then54, label %if.end56

if.then54:                                        ; preds = %for.body
  %66 = load %struct.ichdev*, %struct.ichdev** %ichdev.addr, align 8
  %ack_reload = getelementptr inbounds %struct.ichdev, %struct.ichdev* %66, i32 0, i32 17
  %67 = load i32, i32* %ack_reload, align 8
  %68 = load %struct.ichdev*, %struct.ichdev** %ichdev.addr, align 8
  %ack55 = getelementptr inbounds %struct.ichdev, %struct.ichdev* %68, i32 0, i32 16
  store i32 %67, i32* %ack55, align 4
  store i32 1, i32* %ack, align 4
  br label %if.end56

if.end56:                                         ; preds = %if.then54, %for.body
  br label %for.inc

for.inc:                                          ; preds = %if.end56
  %69 = load i32, i32* %i, align 4
  %inc57 = add nsw i32 %69, 1
  store i32 %inc57, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %70 = load %struct.intel8x0*, %struct.intel8x0** %chip.addr, align 8
  %reg_lock58 = getelementptr inbounds %struct.intel8x0, %struct.intel8x0* %70, i32 0, i32 20
  %71 = load i64, i64* %flags, align 8
  store %struct.spinlock* %reg_lock58, %struct.spinlock** %lock.addr.i70, align 8
  store i64 %71, i64* %flags.addr.i, align 8
  store i32 1, i32* %tmp.i, align 4
  %72 = load i32, i32* %tmp.i, align 4
  %73 = load %struct.spinlock*, %struct.spinlock** %lock.addr.i70, align 8
  %74 = getelementptr inbounds %struct.spinlock, %struct.spinlock* %73, i32 0, i32 0
  %rlock.i71 = bitcast %union.anon.1* %74 to %struct.raw_spinlock*
  %75 = load i64, i64* %flags.addr.i, align 8
  call void @_raw_spin_unlock_irqrestore(%struct.raw_spinlock* %rlock.i71, i64 %75) #3
  %76 = load i32, i32* %ack, align 4
  %tobool59 = icmp ne i32 %76, 0
  br i1 %tobool59, label %land.lhs.true, label %if.end63

land.lhs.true:                                    ; preds = %for.end
  %77 = load %struct.ichdev*, %struct.ichdev** %ichdev.addr, align 8
  %substream = getelementptr inbounds %struct.ichdev, %struct.ichdev* %77, i32 0, i32 4
  %78 = load %struct.snd_pcm_substream*, %struct.snd_pcm_substream** %substream, align 8
  %tobool60 = icmp ne %struct.snd_pcm_substream* %78, null
  br i1 %tobool60, label %if.then61, label %if.end63

if.then61:                                        ; preds = %land.lhs.true
  %79 = load %struct.ichdev*, %struct.ichdev** %ichdev.addr, align 8
  %substream62 = getelementptr inbounds %struct.ichdev, %struct.ichdev* %79, i32 0, i32 4
  %80 = load %struct.snd_pcm_substream*, %struct.snd_pcm_substream** %substream62, align 8
  call void @snd_pcm_period_elapsed(%struct.snd_pcm_substream* %80)
  br label %if.end63

if.end63:                                         ; preds = %if.then61, %land.lhs.true, %for.end
  %81 = load %struct.intel8x0*, %struct.intel8x0** %chip.addr, align 8
  %82 = load i64, i64* %port, align 8
  %83 = load %struct.ichdev*, %struct.ichdev** %ichdev.addr, align 8
  %roff_sr64 = getelementptr inbounds %struct.ichdev, %struct.ichdev* %83, i32 0, i32 19
  %84 = load i32, i32* %roff_sr64, align 8
  %conv65 = zext i32 %84 to i64
  %add66 = add i64 %82, %conv65
  %conv67 = trunc i64 %add66 to i32
  %85 = load i32, i32* %status, align 4
  %and68 = and i32 %85, 28
  %conv69 = trunc i32 %and68 to i8
  call void @iputbyte(%struct.intel8x0* %81, i32 %conv67, i8 zeroext %conv69)
  ret void
}

declare i64 @_raw_spin_lock_irqsave(%struct.raw_spinlock*) #1 section ".spinlock.text"

declare void @snd_pcm_period_elapsed(%struct.snd_pcm_substream*) #1

declare void @_raw_spin_unlock_irqrestore(%struct.raw_spinlock*, i64) #1 section ".spinlock.text"

; Function Attrs: noinline nounwind optnone uwtable
define internal void @snd_intel8x0_codec_write(%struct.snd_ac97* %ac97, i16 zeroext %reg, i16 zeroext %val) #0 {
entry:
  %ac97.addr = alloca %struct.snd_ac97*, align 8
  %reg.addr = alloca i16, align 2
  %val.addr = alloca i16, align 2
  %chip = alloca %struct.intel8x0*, align 8
  store %struct.snd_ac97* %ac97, %struct.snd_ac97** %ac97.addr, align 8
  store i16 %reg, i16* %reg.addr, align 2
  store i16 %val, i16* %val.addr, align 2
  %0 = load %struct.snd_ac97*, %struct.snd_ac97** %ac97.addr, align 8
  %private_data = getelementptr inbounds %struct.snd_ac97, %struct.snd_ac97* %0, i32 0, i32 1
  %1 = load i8*, i8** %private_data, align 8
  %2 = bitcast i8* %1 to %struct.intel8x0*
  store %struct.intel8x0* %2, %struct.intel8x0** %chip, align 8
  %3 = load %struct.intel8x0*, %struct.intel8x0** %chip, align 8
  %4 = load %struct.snd_ac97*, %struct.snd_ac97** %ac97.addr, align 8
  %num = getelementptr inbounds %struct.snd_ac97, %struct.snd_ac97* %4, i32 0, i32 11
  %5 = load i16, i16* %num, align 8
  %conv = zext i16 %5 to i32
  %call = call i32 @snd_intel8x0_codec_semaphore(%struct.intel8x0* %3, i32 %conv)
  %cmp = icmp slt i32 %call, 0
  br i1 %cmp, label %if.then, label %if.end6

if.then:                                          ; preds = %entry
  %6 = load %struct.intel8x0*, %struct.intel8x0** %chip, align 8
  %in_ac97_init = getelementptr inbounds %struct.intel8x0, %struct.intel8x0* %6, i32 0, i32 9
  %bf.load = load i16, i16* %in_ac97_init, align 8
  %bf.lshr = lshr i16 %bf.load, 5
  %bf.clear = and i16 %bf.lshr, 1
  %bf.cast = zext i16 %bf.clear to i32
  %tobool = icmp ne i32 %bf.cast, 0
  br i1 %tobool, label %if.end, label %if.then2

if.then2:                                         ; preds = %if.then
  %7 = load %struct.intel8x0*, %struct.intel8x0** %chip, align 8
  %card = getelementptr inbounds %struct.intel8x0, %struct.intel8x0* %7, i32 0, i32 5
  %8 = load %struct.snd_card*, %struct.snd_card** %card, align 8
  %dev = getelementptr inbounds %struct.snd_card, %struct.snd_card* %8, i32 0, i32 29
  %9 = load %struct.device*, %struct.device** %dev, align 8
  %10 = load %struct.snd_ac97*, %struct.snd_ac97** %ac97.addr, align 8
  %num3 = getelementptr inbounds %struct.snd_ac97, %struct.snd_ac97* %10, i32 0, i32 11
  %11 = load i16, i16* %num3, align 8
  %conv4 = zext i16 %11 to i32
  %12 = load i16, i16* %reg.addr, align 2
  %conv5 = zext i16 %12 to i32
  call void (%struct.device*, i8*, ...) @dev_err(%struct.device* %9, i8* getelementptr inbounds ([58 x i8], [58 x i8]* @.str.42, i32 0, i32 0), i32 %conv4, i32 %conv5)
  br label %if.end

if.end:                                           ; preds = %if.then2, %if.then
  br label %if.end6

if.end6:                                          ; preds = %if.end, %entry
  %13 = load %struct.intel8x0*, %struct.intel8x0** %chip, align 8
  %14 = load i16, i16* %reg.addr, align 2
  %conv7 = zext i16 %14 to i32
  %15 = load %struct.snd_ac97*, %struct.snd_ac97** %ac97.addr, align 8
  %num8 = getelementptr inbounds %struct.snd_ac97, %struct.snd_ac97* %15, i32 0, i32 11
  %16 = load i16, i16* %num8, align 8
  %conv9 = zext i16 %16 to i32
  %mul = mul nsw i32 %conv9, 128
  %add = add nsw i32 %conv7, %mul
  %17 = load i16, i16* %val.addr, align 2
  call void @iaputword(%struct.intel8x0* %13, i32 %add, i16 zeroext %17)
  ret void
}

; Function Attrs: noinline nounwind optnone uwtable
define internal zeroext i16 @snd_intel8x0_codec_read(%struct.snd_ac97* %ac97, i16 zeroext %reg) #0 {
entry:
  %ac97.addr = alloca %struct.snd_ac97*, align 8
  %reg.addr = alloca i16, align 2
  %chip = alloca %struct.intel8x0*, align 8
  %res = alloca i16, align 2
  %tmp = alloca i32, align 4
  store %struct.snd_ac97* %ac97, %struct.snd_ac97** %ac97.addr, align 8
  store i16 %reg, i16* %reg.addr, align 2
  %0 = load %struct.snd_ac97*, %struct.snd_ac97** %ac97.addr, align 8
  %private_data = getelementptr inbounds %struct.snd_ac97, %struct.snd_ac97* %0, i32 0, i32 1
  %1 = load i8*, i8** %private_data, align 8
  %2 = bitcast i8* %1 to %struct.intel8x0*
  store %struct.intel8x0* %2, %struct.intel8x0** %chip, align 8
  %3 = load %struct.intel8x0*, %struct.intel8x0** %chip, align 8
  %4 = load %struct.snd_ac97*, %struct.snd_ac97** %ac97.addr, align 8
  %num = getelementptr inbounds %struct.snd_ac97, %struct.snd_ac97* %4, i32 0, i32 11
  %5 = load i16, i16* %num, align 8
  %conv = zext i16 %5 to i32
  %call = call i32 @snd_intel8x0_codec_semaphore(%struct.intel8x0* %3, i32 %conv)
  %cmp = icmp slt i32 %call, 0
  br i1 %cmp, label %if.then, label %if.else

if.then:                                          ; preds = %entry
  %6 = load %struct.intel8x0*, %struct.intel8x0** %chip, align 8
  %in_ac97_init = getelementptr inbounds %struct.intel8x0, %struct.intel8x0* %6, i32 0, i32 9
  %bf.load = load i16, i16* %in_ac97_init, align 8
  %bf.lshr = lshr i16 %bf.load, 5
  %bf.clear = and i16 %bf.lshr, 1
  %bf.cast = zext i16 %bf.clear to i32
  %tobool = icmp ne i32 %bf.cast, 0
  br i1 %tobool, label %if.end, label %if.then2

if.then2:                                         ; preds = %if.then
  %7 = load %struct.intel8x0*, %struct.intel8x0** %chip, align 8
  %card = getelementptr inbounds %struct.intel8x0, %struct.intel8x0* %7, i32 0, i32 5
  %8 = load %struct.snd_card*, %struct.snd_card** %card, align 8
  %dev = getelementptr inbounds %struct.snd_card, %struct.snd_card* %8, i32 0, i32 29
  %9 = load %struct.device*, %struct.device** %dev, align 8
  %10 = load %struct.snd_ac97*, %struct.snd_ac97** %ac97.addr, align 8
  %num3 = getelementptr inbounds %struct.snd_ac97, %struct.snd_ac97* %10, i32 0, i32 11
  %11 = load i16, i16* %num3, align 8
  %conv4 = zext i16 %11 to i32
  %12 = load i16, i16* %reg.addr, align 2
  %conv5 = zext i16 %12 to i32
  call void (%struct.device*, i8*, ...) @dev_err(%struct.device* %9, i8* getelementptr inbounds ([57 x i8], [57 x i8]* @.str.44, i32 0, i32 0), i32 %conv4, i32 %conv5)
  br label %if.end

if.end:                                           ; preds = %if.then2, %if.then
  store i16 -1, i16* %res, align 2
  br label %if.end28

if.else:                                          ; preds = %entry
  %13 = load %struct.intel8x0*, %struct.intel8x0** %chip, align 8
  %14 = load i16, i16* %reg.addr, align 2
  %conv6 = zext i16 %14 to i32
  %15 = load %struct.snd_ac97*, %struct.snd_ac97** %ac97.addr, align 8
  %num7 = getelementptr inbounds %struct.snd_ac97, %struct.snd_ac97* %15, i32 0, i32 11
  %16 = load i16, i16* %num7, align 8
  %conv8 = zext i16 %16 to i32
  %mul = mul nsw i32 %conv8, 128
  %add = add nsw i32 %conv6, %mul
  %call9 = call zeroext i16 @iagetword(%struct.intel8x0* %13, i32 %add)
  store i16 %call9, i16* %res, align 2
  %17 = load %struct.intel8x0*, %struct.intel8x0** %chip, align 8
  %call10 = call i32 @igetdword(%struct.intel8x0* %17, i32 48)
  store i32 %call10, i32* %tmp, align 4
  %and = and i32 %call10, 32768
  %tobool11 = icmp ne i32 %and, 0
  br i1 %tobool11, label %if.then12, label %if.end27

if.then12:                                        ; preds = %if.else
  %18 = load %struct.intel8x0*, %struct.intel8x0** %chip, align 8
  %19 = load i32, i32* %tmp, align 4
  %20 = load %struct.intel8x0*, %struct.intel8x0** %chip, align 8
  %codec_ready_bits = getelementptr inbounds %struct.intel8x0, %struct.intel8x0* %20, i32 0, i32 19
  %21 = load i32, i32* %codec_ready_bits, align 4
  %or = or i32 %21, 1
  %neg = xor i32 %or, -1
  %and13 = and i32 %19, %neg
  call void @iputdword(%struct.intel8x0* %18, i32 48, i32 %and13)
  %22 = load %struct.intel8x0*, %struct.intel8x0** %chip, align 8
  %in_ac97_init14 = getelementptr inbounds %struct.intel8x0, %struct.intel8x0* %22, i32 0, i32 9
  %bf.load15 = load i16, i16* %in_ac97_init14, align 8
  %bf.lshr16 = lshr i16 %bf.load15, 5
  %bf.clear17 = and i16 %bf.lshr16, 1
  %bf.cast18 = zext i16 %bf.clear17 to i32
  %tobool19 = icmp ne i32 %bf.cast18, 0
  br i1 %tobool19, label %if.end26, label %if.then20

if.then20:                                        ; preds = %if.then12
  %23 = load %struct.intel8x0*, %struct.intel8x0** %chip, align 8
  %card21 = getelementptr inbounds %struct.intel8x0, %struct.intel8x0* %23, i32 0, i32 5
  %24 = load %struct.snd_card*, %struct.snd_card** %card21, align 8
  %dev22 = getelementptr inbounds %struct.snd_card, %struct.snd_card* %24, i32 0, i32 29
  %25 = load %struct.device*, %struct.device** %dev22, align 8
  %26 = load %struct.snd_ac97*, %struct.snd_ac97** %ac97.addr, align 8
  %num23 = getelementptr inbounds %struct.snd_ac97, %struct.snd_ac97* %26, i32 0, i32 11
  %27 = load i16, i16* %num23, align 8
  %conv24 = zext i16 %27 to i32
  %28 = load i16, i16* %reg.addr, align 2
  %conv25 = zext i16 %28 to i32
  call void (%struct.device*, i8*, ...) @dev_err(%struct.device* %25, i8* getelementptr inbounds ([47 x i8], [47 x i8]* @.str.45, i32 0, i32 0), i32 %conv24, i32 %conv25)
  br label %if.end26

if.end26:                                         ; preds = %if.then20, %if.then12
  store i16 -1, i16* %res, align 2
  br label %if.end27

if.end27:                                         ; preds = %if.end26, %if.else
  br label %if.end28

if.end28:                                         ; preds = %if.end27, %if.end
  %29 = load i16, i16* %res, align 2
  ret i16 %29
}

; Function Attrs: noinline nounwind optnone uwtable
define internal void @snd_intel8x0_ali_codec_write(%struct.snd_ac97* %ac97, i16 zeroext %reg, i16 zeroext %val) #0 {
entry:
  %ac97.addr = alloca %struct.snd_ac97*, align 8
  %reg.addr = alloca i16, align 2
  %val.addr = alloca i16, align 2
  %chip = alloca %struct.intel8x0*, align 8
  store %struct.snd_ac97* %ac97, %struct.snd_ac97** %ac97.addr, align 8
  store i16 %reg, i16* %reg.addr, align 2
  store i16 %val, i16* %val.addr, align 2
  %0 = load %struct.snd_ac97*, %struct.snd_ac97** %ac97.addr, align 8
  %private_data = getelementptr inbounds %struct.snd_ac97, %struct.snd_ac97* %0, i32 0, i32 1
  %1 = load i8*, i8** %private_data, align 8
  %2 = bitcast i8* %1 to %struct.intel8x0*
  store %struct.intel8x0* %2, %struct.intel8x0** %chip, align 8
  %3 = load %struct.intel8x0*, %struct.intel8x0** %chip, align 8
  %call = call i32 @snd_intel8x0_ali_codec_semaphore(%struct.intel8x0* %3)
  %tobool = icmp ne i32 %call, 0
  br i1 %tobool, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  br label %return

if.end:                                           ; preds = %entry
  %4 = load %struct.intel8x0*, %struct.intel8x0** %chip, align 8
  %5 = load i16, i16* %val.addr, align 2
  call void @iputword(%struct.intel8x0* %4, i32 32, i16 zeroext %5)
  %6 = load %struct.snd_ac97*, %struct.snd_ac97** %ac97.addr, align 8
  %num = getelementptr inbounds %struct.snd_ac97, %struct.snd_ac97* %6, i32 0, i32 11
  %7 = load i16, i16* %num, align 8
  %tobool1 = icmp ne i16 %7, 0
  br i1 %tobool1, label %if.then2, label %if.end4

if.then2:                                         ; preds = %if.end
  %8 = load i16, i16* %reg.addr, align 2
  %conv = zext i16 %8 to i32
  %or = or i32 %conv, 256
  %conv3 = trunc i32 %or to i16
  store i16 %conv3, i16* %reg.addr, align 2
  br label %if.end4

if.end4:                                          ; preds = %if.then2, %if.end
  %9 = load %struct.intel8x0*, %struct.intel8x0** %chip, align 8
  %10 = load i16, i16* %reg.addr, align 2
  call void @iputword(%struct.intel8x0* %9, i32 34, i16 zeroext %10)
  %11 = load %struct.intel8x0*, %struct.intel8x0** %chip, align 8
  %call5 = call i32 @snd_intel8x0_ali_codec_ready(%struct.intel8x0* %11, i32 1)
  br label %return

return:                                           ; preds = %if.end4, %if.then
  ret void
}

; Function Attrs: noinline nounwind optnone uwtable
define internal zeroext i16 @snd_intel8x0_ali_codec_read(%struct.snd_ac97* %ac97, i16 zeroext %reg) #0 {
entry:
  %ac97.addr = alloca %struct.snd_ac97*, align 8
  %reg.addr = alloca i16, align 2
  %chip = alloca %struct.intel8x0*, align 8
  %data = alloca i16, align 2
  store %struct.snd_ac97* %ac97, %struct.snd_ac97** %ac97.addr, align 8
  store i16 %reg, i16* %reg.addr, align 2
  %0 = load %struct.snd_ac97*, %struct.snd_ac97** %ac97.addr, align 8
  %private_data = getelementptr inbounds %struct.snd_ac97, %struct.snd_ac97* %0, i32 0, i32 1
  %1 = load i8*, i8** %private_data, align 8
  %2 = bitcast i8* %1 to %struct.intel8x0*
  store %struct.intel8x0* %2, %struct.intel8x0** %chip, align 8
  store i16 -1, i16* %data, align 2
  %3 = load %struct.intel8x0*, %struct.intel8x0** %chip, align 8
  %call = call i32 @snd_intel8x0_ali_codec_semaphore(%struct.intel8x0* %3)
  %tobool = icmp ne i32 %call, 0
  br i1 %tobool, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  br label %__err

if.end:                                           ; preds = %entry
  %4 = load i16, i16* %reg.addr, align 2
  %conv = zext i16 %4 to i32
  %or = or i32 %conv, 128
  %conv1 = trunc i32 %or to i16
  store i16 %conv1, i16* %reg.addr, align 2
  %5 = load %struct.snd_ac97*, %struct.snd_ac97** %ac97.addr, align 8
  %num = getelementptr inbounds %struct.snd_ac97, %struct.snd_ac97* %5, i32 0, i32 11
  %6 = load i16, i16* %num, align 8
  %tobool2 = icmp ne i16 %6, 0
  br i1 %tobool2, label %if.then3, label %if.end7

if.then3:                                         ; preds = %if.end
  %7 = load i16, i16* %reg.addr, align 2
  %conv4 = zext i16 %7 to i32
  %or5 = or i32 %conv4, 256
  %conv6 = trunc i32 %or5 to i16
  store i16 %conv6, i16* %reg.addr, align 2
  br label %if.end7

if.end7:                                          ; preds = %if.then3, %if.end
  %8 = load %struct.intel8x0*, %struct.intel8x0** %chip, align 8
  %9 = load i16, i16* %reg.addr, align 2
  call void @iputword(%struct.intel8x0* %8, i32 34, i16 zeroext %9)
  %10 = load %struct.intel8x0*, %struct.intel8x0** %chip, align 8
  %call8 = call i32 @snd_intel8x0_ali_codec_ready(%struct.intel8x0* %10, i32 2)
  %tobool9 = icmp ne i32 %call8, 0
  br i1 %tobool9, label %if.then10, label %if.end11

if.then10:                                        ; preds = %if.end7
  br label %__err

if.end11:                                         ; preds = %if.end7
  %11 = load %struct.intel8x0*, %struct.intel8x0** %chip, align 8
  %call12 = call zeroext i16 @igetword(%struct.intel8x0* %11, i32 36)
  store i16 %call12, i16* %data, align 2
  br label %__err

__err:                                            ; preds = %if.end11, %if.then10, %if.then
  %12 = load i16, i16* %data, align 2
  ret i16 %12
}

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i32, i1) #2

; Function Attrs: noinline nounwind optnone uwtable
define internal void @snd_intel8x0_mixer_free_ac97(%struct.snd_ac97* %ac97) #0 {
entry:
  %ac97.addr = alloca %struct.snd_ac97*, align 8
  %chip = alloca %struct.intel8x0*, align 8
  store %struct.snd_ac97* %ac97, %struct.snd_ac97** %ac97.addr, align 8
  %0 = load %struct.snd_ac97*, %struct.snd_ac97** %ac97.addr, align 8
  %private_data = getelementptr inbounds %struct.snd_ac97, %struct.snd_ac97* %0, i32 0, i32 1
  %1 = load i8*, i8** %private_data, align 8
  %2 = bitcast i8* %1 to %struct.intel8x0*
  store %struct.intel8x0* %2, %struct.intel8x0** %chip, align 8
  %3 = load %struct.intel8x0*, %struct.intel8x0** %chip, align 8
  %ac971 = getelementptr inbounds %struct.intel8x0, %struct.intel8x0* %3, i32 0, i32 13
  %4 = load %struct.snd_ac97*, %struct.snd_ac97** %ac97.addr, align 8
  %num = getelementptr inbounds %struct.snd_ac97, %struct.snd_ac97* %4, i32 0, i32 11
  %5 = load i16, i16* %num, align 8
  %idxprom = zext i16 %5 to i64
  %arrayidx = getelementptr inbounds [3 x %struct.snd_ac97*], [3 x %struct.snd_ac97*]* %ac971, i64 0, i64 %idxprom
  store %struct.snd_ac97* null, %struct.snd_ac97** %arrayidx, align 8
  ret void
}

; Function Attrs: noinline nounwind optnone uwtable
define internal void @snd_intel8x0_codec_read_test(%struct.intel8x0* %chip, i32 %codec) #0 {
entry:
  %chip.addr = alloca %struct.intel8x0*, align 8
  %codec.addr = alloca i32, align 4
  %tmp = alloca i32, align 4
  store %struct.intel8x0* %chip, %struct.intel8x0** %chip.addr, align 8
  store i32 %codec, i32* %codec.addr, align 4
  %0 = load %struct.intel8x0*, %struct.intel8x0** %chip.addr, align 8
  %1 = load i32, i32* %codec.addr, align 4
  %call = call i32 @snd_intel8x0_codec_semaphore(%struct.intel8x0* %0, i32 %1)
  %cmp = icmp sge i32 %call, 0
  br i1 %cmp, label %if.then, label %if.end5

if.then:                                          ; preds = %entry
  %2 = load %struct.intel8x0*, %struct.intel8x0** %chip.addr, align 8
  %3 = load i32, i32* %codec.addr, align 4
  %mul = mul i32 %3, 128
  %call1 = call zeroext i16 @iagetword(%struct.intel8x0* %2, i32 %mul)
  %4 = load %struct.intel8x0*, %struct.intel8x0** %chip.addr, align 8
  %call2 = call i32 @igetdword(%struct.intel8x0* %4, i32 48)
  store i32 %call2, i32* %tmp, align 4
  %and = and i32 %call2, 32768
  %tobool = icmp ne i32 %and, 0
  br i1 %tobool, label %if.then3, label %if.end

if.then3:                                         ; preds = %if.then
  %5 = load %struct.intel8x0*, %struct.intel8x0** %chip.addr, align 8
  %6 = load i32, i32* %tmp, align 4
  %7 = load %struct.intel8x0*, %struct.intel8x0** %chip.addr, align 8
  %codec_ready_bits = getelementptr inbounds %struct.intel8x0, %struct.intel8x0* %7, i32 0, i32 19
  %8 = load i32, i32* %codec_ready_bits, align 4
  %or = or i32 %8, 1
  %neg = xor i32 %or, -1
  %and4 = and i32 %6, %neg
  call void @iputdword(%struct.intel8x0* %5, i32 48, i32 %and4)
  br label %if.end

if.end:                                           ; preds = %if.then3, %if.then
  br label %if.end5

if.end5:                                          ; preds = %if.end, %entry
  ret void
}

declare void @__const_udelay(i64) #1

declare i32 @snd_ac97_bus(%struct.snd_card*, i32, %struct.snd_ac97_bus_ops*, i8*, %struct.snd_ac97_bus**) #1

; Function Attrs: noinline nounwind optnone uwtable
define internal void @snd_intel8x0_mixer_free_ac97_bus(%struct.snd_ac97_bus* %bus) #0 {
entry:
  %bus.addr = alloca %struct.snd_ac97_bus*, align 8
  %chip = alloca %struct.intel8x0*, align 8
  store %struct.snd_ac97_bus* %bus, %struct.snd_ac97_bus** %bus.addr, align 8
  %0 = load %struct.snd_ac97_bus*, %struct.snd_ac97_bus** %bus.addr, align 8
  %private_data = getelementptr inbounds %struct.snd_ac97_bus, %struct.snd_ac97_bus* %0, i32 0, i32 1
  %1 = load i8*, i8** %private_data, align 8
  %2 = bitcast i8* %1 to %struct.intel8x0*
  store %struct.intel8x0* %2, %struct.intel8x0** %chip, align 8
  %3 = load %struct.intel8x0*, %struct.intel8x0** %chip, align 8
  %ac97_bus = getelementptr inbounds %struct.intel8x0, %struct.intel8x0* %3, i32 0, i32 12
  store %struct.snd_ac97_bus* null, %struct.snd_ac97_bus** %ac97_bus, align 8
  ret void
}

declare i32 @snd_ac97_mixer(%struct.snd_ac97_bus*, %struct.snd_ac97_template*, %struct.snd_ac97**) #1

declare i32 @snd_ac97_tune_hardware(%struct.snd_ac97*, %struct.ac97_quirk*, i8*) #1

declare i32 @snd_ac97_pcm_assign(%struct.snd_ac97_bus*, i16 zeroext, %struct.ac97_pcm*) #1

declare i32 @snd_ac97_update_bits(%struct.snd_ac97*, i16 zeroext, i16 zeroext, i16 zeroext) #1

; Function Attrs: noinline nounwind optnone uwtable
define internal i32 @snd_intel8x0_codec_semaphore(%struct.intel8x0* %chip, i32 %codec) #0 {
entry:
  %retval = alloca i32, align 4
  %chip.addr = alloca %struct.intel8x0*, align 8
  %codec.addr = alloca i32, align 4
  %time = alloca i32, align 4
  store %struct.intel8x0* %chip, %struct.intel8x0** %chip.addr, align 8
  store i32 %codec, i32* %codec.addr, align 4
  %0 = load i32, i32* %codec.addr, align 4
  %cmp = icmp ugt i32 %0, 2
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  store i32 -5, i32* %retval, align 4
  br label %return

if.end:                                           ; preds = %entry
  %1 = load %struct.intel8x0*, %struct.intel8x0** %chip.addr, align 8
  %in_sdin_init = getelementptr inbounds %struct.intel8x0, %struct.intel8x0* %1, i32 0, i32 9
  %bf.load = load i16, i16* %in_sdin_init, align 8
  %bf.lshr = lshr i16 %bf.load, 6
  %bf.clear = and i16 %bf.lshr, 1
  %bf.cast = zext i16 %bf.clear to i32
  %tobool = icmp ne i32 %bf.cast, 0
  br i1 %tobool, label %if.then1, label %if.else

if.then1:                                         ; preds = %if.end
  %2 = load %struct.intel8x0*, %struct.intel8x0** %chip.addr, align 8
  %codec_isr_bits = getelementptr inbounds %struct.intel8x0, %struct.intel8x0* %2, i32 0, i32 18
  %3 = load i32, i32* %codec_isr_bits, align 8
  store i32 %3, i32* %codec.addr, align 4
  br label %if.end4

if.else:                                          ; preds = %if.end
  %4 = load %struct.intel8x0*, %struct.intel8x0** %chip.addr, align 8
  %codec_bit = getelementptr inbounds %struct.intel8x0, %struct.intel8x0* %4, i32 0, i32 17
  %5 = load i32*, i32** %codec_bit, align 8
  %6 = load %struct.intel8x0*, %struct.intel8x0** %chip.addr, align 8
  %ac97_sdin = getelementptr inbounds %struct.intel8x0, %struct.intel8x0* %6, i32 0, i32 14
  %7 = load i32, i32* %codec.addr, align 4
  %idxprom = zext i32 %7 to i64
  %arrayidx = getelementptr inbounds [3 x i32], [3 x i32]* %ac97_sdin, i64 0, i64 %idxprom
  %8 = load i32, i32* %arrayidx, align 4
  %idxprom2 = zext i32 %8 to i64
  %arrayidx3 = getelementptr inbounds i32, i32* %5, i64 %idxprom2
  %9 = load i32, i32* %arrayidx3, align 4
  store i32 %9, i32* %codec.addr, align 4
  br label %if.end4

if.end4:                                          ; preds = %if.else, %if.then1
  %10 = load %struct.intel8x0*, %struct.intel8x0** %chip.addr, align 8
  %call = call i32 @igetdword(%struct.intel8x0* %10, i32 48)
  %11 = load i32, i32* %codec.addr, align 4
  %and = and i32 %call, %11
  %cmp5 = icmp eq i32 %and, 0
  br i1 %cmp5, label %if.then6, label %if.end7

if.then6:                                         ; preds = %if.end4
  store i32 -5, i32* %retval, align 4
  br label %return

if.end7:                                          ; preds = %if.end4
  %12 = load %struct.intel8x0*, %struct.intel8x0** %chip.addr, align 8
  %buggy_semaphore = getelementptr inbounds %struct.intel8x0, %struct.intel8x0* %12, i32 0, i32 9
  %bf.load8 = load i16, i16* %buggy_semaphore, align 8
  %bf.lshr9 = lshr i16 %bf.load8, 11
  %bf.clear10 = and i16 %bf.lshr9, 1
  %bf.cast11 = zext i16 %bf.clear10 to i32
  %tobool12 = icmp ne i32 %bf.cast11, 0
  br i1 %tobool12, label %if.then13, label %if.end14

if.then13:                                        ; preds = %if.end7
  store i32 0, i32* %retval, align 4
  br label %return

if.end14:                                         ; preds = %if.end7
  store i32 100, i32* %time, align 4
  br label %do.body

do.body:                                          ; preds = %do.cond, %if.end14
  %13 = load %struct.intel8x0*, %struct.intel8x0** %chip.addr, align 8
  %call15 = call zeroext i8 @igetbyte(%struct.intel8x0* %13, i32 52)
  %conv = zext i8 %call15 to i32
  %and16 = and i32 %conv, 1
  %tobool17 = icmp ne i32 %and16, 0
  br i1 %tobool17, label %if.end19, label %if.then18

if.then18:                                        ; preds = %do.body
  store i32 0, i32* %retval, align 4
  br label %return

if.end19:                                         ; preds = %do.body
  call void @__const_udelay(i64 42950)
  br label %do.cond

do.cond:                                          ; preds = %if.end19
  %14 = load i32, i32* %time, align 4
  %dec = add nsw i32 %14, -1
  store i32 %dec, i32* %time, align 4
  %tobool20 = icmp ne i32 %14, 0
  br i1 %tobool20, label %do.body, label %do.end

do.end:                                           ; preds = %do.cond
  %15 = load %struct.intel8x0*, %struct.intel8x0** %chip.addr, align 8
  %card = getelementptr inbounds %struct.intel8x0, %struct.intel8x0* %15, i32 0, i32 5
  %16 = load %struct.snd_card*, %struct.snd_card** %card, align 8
  %dev = getelementptr inbounds %struct.snd_card, %struct.snd_card* %16, i32 0, i32 29
  %17 = load %struct.device*, %struct.device** %dev, align 8
  %18 = load %struct.intel8x0*, %struct.intel8x0** %chip.addr, align 8
  %call21 = call zeroext i8 @igetbyte(%struct.intel8x0* %18, i32 52)
  %conv22 = zext i8 %call21 to i32
  %19 = load %struct.intel8x0*, %struct.intel8x0** %chip.addr, align 8
  %call23 = call i32 @igetdword(%struct.intel8x0* %19, i32 48)
  call void (%struct.device*, i8*, ...) @dev_err(%struct.device* %17, i8* getelementptr inbounds ([54 x i8], [54 x i8]* @.str.43, i32 0, i32 0), i32 %conv22, i32 %call23)
  %20 = load %struct.intel8x0*, %struct.intel8x0** %chip.addr, align 8
  %call24 = call zeroext i16 @iagetword(%struct.intel8x0* %20, i32 0)
  store i32 -16, i32* %retval, align 4
  br label %return

return:                                           ; preds = %do.end, %if.then18, %if.then13, %if.then6, %if.then
  %21 = load i32, i32* %retval, align 4
  ret i32 %21
}

; Function Attrs: noinline nounwind optnone uwtable
define internal void @iaputword(%struct.intel8x0* %chip, i32 %offset, i16 zeroext %val) #0 {
entry:
  %chip.addr = alloca %struct.intel8x0*, align 8
  %offset.addr = alloca i32, align 4
  %val.addr = alloca i16, align 2
  store %struct.intel8x0* %chip, %struct.intel8x0** %chip.addr, align 8
  store i32 %offset, i32* %offset.addr, align 4
  store i16 %val, i16* %val.addr, align 2
  %0 = load i16, i16* %val.addr, align 2
  %1 = load %struct.intel8x0*, %struct.intel8x0** %chip.addr, align 8
  %addr = getelementptr inbounds %struct.intel8x0, %struct.intel8x0* %1, i32 0, i32 2
  %2 = load i8*, i8** %addr, align 8
  %3 = load i32, i32* %offset.addr, align 4
  %idx.ext = zext i32 %3 to i64
  %add.ptr = getelementptr i8, i8* %2, i64 %idx.ext
  call void @iowrite16(i16 zeroext %0, i8* %add.ptr)
  ret void
}

; Function Attrs: noinline nounwind optnone uwtable
define internal i32 @snd_intel8x0_ali_codec_semaphore(%struct.intel8x0* %chip) #0 {
entry:
  %retval = alloca i32, align 4
  %chip.addr = alloca %struct.intel8x0*, align 8
  %time = alloca i32, align 4
  store %struct.intel8x0* %chip, %struct.intel8x0** %chip.addr, align 8
  store i32 100, i32* %time, align 4
  %0 = load %struct.intel8x0*, %struct.intel8x0** %chip.addr, align 8
  %buggy_semaphore = getelementptr inbounds %struct.intel8x0, %struct.intel8x0* %0, i32 0, i32 9
  %bf.load = load i16, i16* %buggy_semaphore, align 8
  %bf.lshr = lshr i16 %bf.load, 11
  %bf.clear = and i16 %bf.lshr, 1
  %bf.cast = zext i16 %bf.clear to i32
  %tobool = icmp ne i32 %bf.cast, 0
  br i1 %tobool, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  store i32 0, i32* %retval, align 4
  br label %return

if.end:                                           ; preds = %entry
  br label %while.cond

while.cond:                                       ; preds = %while.body, %if.end
  %1 = load i32, i32* %time, align 4
  %dec = add nsw i32 %1, -1
  store i32 %dec, i32* %time, align 4
  %tobool1 = icmp ne i32 %dec, 0
  br i1 %tobool1, label %land.rhs, label %land.end

land.rhs:                                         ; preds = %while.cond
  %2 = load %struct.intel8x0*, %struct.intel8x0** %chip.addr, align 8
  %call = call i32 @igetdword(%struct.intel8x0* %2, i32 60)
  %and = and i32 %call, -2147483648
  %tobool2 = icmp ne i32 %and, 0
  br label %land.end

land.end:                                         ; preds = %land.rhs, %while.cond
  %3 = phi i1 [ false, %while.cond ], [ %tobool2, %land.rhs ]
  br i1 %3, label %while.body, label %while.end

while.body:                                       ; preds = %land.end
  call void @__const_udelay(i64 4295)
  br label %while.cond

while.end:                                        ; preds = %land.end
  %4 = load i32, i32* %time, align 4
  %tobool3 = icmp ne i32 %4, 0
  br i1 %tobool3, label %if.end10, label %land.lhs.true

land.lhs.true:                                    ; preds = %while.end
  %5 = load %struct.intel8x0*, %struct.intel8x0** %chip.addr, align 8
  %in_ac97_init = getelementptr inbounds %struct.intel8x0, %struct.intel8x0* %5, i32 0, i32 9
  %bf.load4 = load i16, i16* %in_ac97_init, align 8
  %bf.lshr5 = lshr i16 %bf.load4, 5
  %bf.clear6 = and i16 %bf.lshr5, 1
  %bf.cast7 = zext i16 %bf.clear6 to i32
  %tobool8 = icmp ne i32 %bf.cast7, 0
  br i1 %tobool8, label %if.end10, label %if.then9

if.then9:                                         ; preds = %land.lhs.true
  %6 = load %struct.intel8x0*, %struct.intel8x0** %chip.addr, align 8
  %card = getelementptr inbounds %struct.intel8x0, %struct.intel8x0* %6, i32 0, i32 5
  %7 = load %struct.snd_card*, %struct.snd_card** %card, align 8
  %dev = getelementptr inbounds %struct.snd_card, %struct.snd_card* %7, i32 0, i32 29
  %8 = load %struct.device*, %struct.device** %dev, align 8
  call void (%struct.device*, i8*, ...) @dev_warn(%struct.device* %8, i8* getelementptr inbounds ([29 x i8], [29 x i8]* @.str.46, i32 0, i32 0))
  br label %if.end10

if.end10:                                         ; preds = %if.then9, %land.lhs.true, %while.end
  %9 = load %struct.intel8x0*, %struct.intel8x0** %chip.addr, align 8
  %call11 = call i32 @snd_intel8x0_ali_codec_ready(%struct.intel8x0* %9, i32 8)
  store i32 %call11, i32* %retval, align 4
  br label %return

return:                                           ; preds = %if.end10, %if.then
  %10 = load i32, i32* %retval, align 4
  ret i32 %10
}

; Function Attrs: noinline nounwind optnone uwtable
define internal i32 @snd_intel8x0_ali_codec_ready(%struct.intel8x0* %chip, i32 %mask) #0 {
entry:
  %retval = alloca i32, align 4
  %chip.addr = alloca %struct.intel8x0*, align 8
  %mask.addr = alloca i32, align 4
  %count = alloca i32, align 4
  %val = alloca i32, align 4
  store %struct.intel8x0* %chip, %struct.intel8x0** %chip.addr, align 8
  store i32 %mask, i32* %mask.addr, align 4
  store i32 0, i32* %count, align 4
  store i32 0, i32* %count, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %0 = load i32, i32* %count, align 4
  %cmp = icmp slt i32 %0, 127
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %1 = load %struct.intel8x0*, %struct.intel8x0** %chip.addr, align 8
  %call = call zeroext i8 @igetbyte(%struct.intel8x0* %1, i32 56)
  %conv = zext i8 %call to i32
  store i32 %conv, i32* %val, align 4
  %2 = load i32, i32* %val, align 4
  %3 = load i32, i32* %mask.addr, align 4
  %and = and i32 %2, %3
  %tobool = icmp ne i32 %and, 0
  br i1 %tobool, label %if.then, label %if.end

if.then:                                          ; preds = %for.body
  store i32 0, i32* %retval, align 4
  br label %return

if.end:                                           ; preds = %for.body
  br label %for.inc

for.inc:                                          ; preds = %if.end
  %4 = load i32, i32* %count, align 4
  %inc = add nsw i32 %4, 1
  store i32 %inc, i32* %count, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %5 = load %struct.intel8x0*, %struct.intel8x0** %chip.addr, align 8
  %in_ac97_init = getelementptr inbounds %struct.intel8x0, %struct.intel8x0* %5, i32 0, i32 9
  %bf.load = load i16, i16* %in_ac97_init, align 8
  %bf.lshr = lshr i16 %bf.load, 5
  %bf.clear = and i16 %bf.lshr, 1
  %bf.cast = zext i16 %bf.clear to i32
  %tobool1 = icmp ne i32 %bf.cast, 0
  br i1 %tobool1, label %if.end3, label %if.then2

if.then2:                                         ; preds = %for.end
  %6 = load %struct.intel8x0*, %struct.intel8x0** %chip.addr, align 8
  %card = getelementptr inbounds %struct.intel8x0, %struct.intel8x0* %6, i32 0, i32 5
  %7 = load %struct.snd_card*, %struct.snd_card** %card, align 8
  %dev = getelementptr inbounds %struct.snd_card, %struct.snd_card* %7, i32 0, i32 29
  %8 = load %struct.device*, %struct.device** %dev, align 8
  call void (%struct.device*, i8*, ...) @dev_warn(%struct.device* %8, i8* getelementptr inbounds ([27 x i8], [27 x i8]* @.str.47, i32 0, i32 0))
  br label %if.end3

if.end3:                                          ; preds = %if.then2, %for.end
  store i32 -16, i32* %retval, align 4
  br label %return

return:                                           ; preds = %if.end3, %if.then
  %9 = load i32, i32* %retval, align 4
  ret i32 %9
}

declare void @dev_warn(%struct.device*, i8*, ...) #1

; Function Attrs: noinline nounwind optnone uwtable
define internal i32 @snd_intel8x0_pcm1(%struct.intel8x0* %chip, i32 %device, %struct.ich_pcm_table* %rec) #0 {
entry:
  %retval = alloca i32, align 4
  %chip.addr = alloca %struct.intel8x0*, align 8
  %device.addr = alloca i32, align 4
  %rec.addr = alloca %struct.ich_pcm_table*, align 8
  %pcm = alloca %struct.snd_pcm*, align 8
  %err = alloca i32, align 4
  %name = alloca [32 x i8], align 16
  %chmap = alloca %struct.snd_pcm_chmap*, align 8
  %chs = alloca i32, align 4
  store %struct.intel8x0* %chip, %struct.intel8x0** %chip.addr, align 8
  store i32 %device, i32* %device.addr, align 4
  store %struct.ich_pcm_table* %rec, %struct.ich_pcm_table** %rec.addr, align 8
  %0 = load %struct.ich_pcm_table*, %struct.ich_pcm_table** %rec.addr, align 8
  %suffix = getelementptr inbounds %struct.ich_pcm_table, %struct.ich_pcm_table* %0, i32 0, i32 0
  %1 = load i8*, i8** %suffix, align 8
  %tobool = icmp ne i8* %1, null
  br i1 %tobool, label %if.then, label %if.else

if.then:                                          ; preds = %entry
  %arraydecay = getelementptr inbounds [32 x i8], [32 x i8]* %name, i32 0, i32 0
  %2 = load %struct.ich_pcm_table*, %struct.ich_pcm_table** %rec.addr, align 8
  %suffix1 = getelementptr inbounds %struct.ich_pcm_table, %struct.ich_pcm_table* %2, i32 0, i32 0
  %3 = load i8*, i8** %suffix1, align 8
  %call = call i32 (i8*, i8*, ...) @sprintf(i8* %arraydecay, i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.112, i32 0, i32 0), i8* %3)
  br label %if.end

if.else:                                          ; preds = %entry
  %arraydecay2 = getelementptr inbounds [32 x i8], [32 x i8]* %name, i32 0, i32 0
  %call3 = call i8* @strcpy(i8* %arraydecay2, i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.4, i32 0, i32 0))
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then
  %4 = load %struct.intel8x0*, %struct.intel8x0** %chip.addr, align 8
  %card = getelementptr inbounds %struct.intel8x0, %struct.intel8x0* %4, i32 0, i32 5
  %5 = load %struct.snd_card*, %struct.snd_card** %card, align 8
  %arraydecay4 = getelementptr inbounds [32 x i8], [32 x i8]* %name, i32 0, i32 0
  %6 = load i32, i32* %device.addr, align 4
  %7 = load %struct.ich_pcm_table*, %struct.ich_pcm_table** %rec.addr, align 8
  %playback_ops = getelementptr inbounds %struct.ich_pcm_table, %struct.ich_pcm_table* %7, i32 0, i32 1
  %8 = load %struct.snd_pcm_ops*, %struct.snd_pcm_ops** %playback_ops, align 8
  %tobool5 = icmp ne %struct.snd_pcm_ops* %8, null
  %9 = zext i1 %tobool5 to i64
  %cond = select i1 %tobool5, i32 1, i32 0
  %10 = load %struct.ich_pcm_table*, %struct.ich_pcm_table** %rec.addr, align 8
  %capture_ops = getelementptr inbounds %struct.ich_pcm_table, %struct.ich_pcm_table* %10, i32 0, i32 2
  %11 = load %struct.snd_pcm_ops*, %struct.snd_pcm_ops** %capture_ops, align 8
  %tobool6 = icmp ne %struct.snd_pcm_ops* %11, null
  %12 = zext i1 %tobool6 to i64
  %cond7 = select i1 %tobool6, i32 1, i32 0
  %call8 = call i32 @snd_pcm_new(%struct.snd_card* %5, i8* %arraydecay4, i32 %6, i32 %cond, i32 %cond7, %struct.snd_pcm** %pcm)
  store i32 %call8, i32* %err, align 4
  %13 = load i32, i32* %err, align 4
  %cmp = icmp slt i32 %13, 0
  br i1 %cmp, label %if.then9, label %if.end10

if.then9:                                         ; preds = %if.end
  %14 = load i32, i32* %err, align 4
  store i32 %14, i32* %retval, align 4
  br label %return

if.end10:                                         ; preds = %if.end
  %15 = load %struct.ich_pcm_table*, %struct.ich_pcm_table** %rec.addr, align 8
  %playback_ops11 = getelementptr inbounds %struct.ich_pcm_table, %struct.ich_pcm_table* %15, i32 0, i32 1
  %16 = load %struct.snd_pcm_ops*, %struct.snd_pcm_ops** %playback_ops11, align 8
  %tobool12 = icmp ne %struct.snd_pcm_ops* %16, null
  br i1 %tobool12, label %if.then13, label %if.end15

if.then13:                                        ; preds = %if.end10
  %17 = load %struct.snd_pcm*, %struct.snd_pcm** %pcm, align 8
  %18 = load %struct.ich_pcm_table*, %struct.ich_pcm_table** %rec.addr, align 8
  %playback_ops14 = getelementptr inbounds %struct.ich_pcm_table, %struct.ich_pcm_table* %18, i32 0, i32 1
  %19 = load %struct.snd_pcm_ops*, %struct.snd_pcm_ops** %playback_ops14, align 8
  call void @snd_pcm_set_ops(%struct.snd_pcm* %17, i32 0, %struct.snd_pcm_ops* %19)
  br label %if.end15

if.end15:                                         ; preds = %if.then13, %if.end10
  %20 = load %struct.ich_pcm_table*, %struct.ich_pcm_table** %rec.addr, align 8
  %capture_ops16 = getelementptr inbounds %struct.ich_pcm_table, %struct.ich_pcm_table* %20, i32 0, i32 2
  %21 = load %struct.snd_pcm_ops*, %struct.snd_pcm_ops** %capture_ops16, align 8
  %tobool17 = icmp ne %struct.snd_pcm_ops* %21, null
  br i1 %tobool17, label %if.then18, label %if.end20

if.then18:                                        ; preds = %if.end15
  %22 = load %struct.snd_pcm*, %struct.snd_pcm** %pcm, align 8
  %23 = load %struct.ich_pcm_table*, %struct.ich_pcm_table** %rec.addr, align 8
  %capture_ops19 = getelementptr inbounds %struct.ich_pcm_table, %struct.ich_pcm_table* %23, i32 0, i32 2
  %24 = load %struct.snd_pcm_ops*, %struct.snd_pcm_ops** %capture_ops19, align 8
  call void @snd_pcm_set_ops(%struct.snd_pcm* %22, i32 1, %struct.snd_pcm_ops* %24)
  br label %if.end20

if.end20:                                         ; preds = %if.then18, %if.end15
  %25 = load %struct.intel8x0*, %struct.intel8x0** %chip.addr, align 8
  %26 = bitcast %struct.intel8x0* %25 to i8*
  %27 = load %struct.snd_pcm*, %struct.snd_pcm** %pcm, align 8
  %private_data = getelementptr inbounds %struct.snd_pcm, %struct.snd_pcm* %27, i32 0, i32 11
  store i8* %26, i8** %private_data, align 8
  %28 = load %struct.snd_pcm*, %struct.snd_pcm** %pcm, align 8
  %info_flags = getelementptr inbounds %struct.snd_pcm, %struct.snd_pcm* %28, i32 0, i32 3
  store i32 0, i32* %info_flags, align 4
  %29 = load %struct.ich_pcm_table*, %struct.ich_pcm_table** %rec.addr, align 8
  %suffix21 = getelementptr inbounds %struct.ich_pcm_table, %struct.ich_pcm_table* %29, i32 0, i32 0
  %30 = load i8*, i8** %suffix21, align 8
  %tobool22 = icmp ne i8* %30, null
  br i1 %tobool22, label %if.then23, label %if.else30

if.then23:                                        ; preds = %if.end20
  %31 = load %struct.snd_pcm*, %struct.snd_pcm** %pcm, align 8
  %name24 = getelementptr inbounds %struct.snd_pcm, %struct.snd_pcm* %31, i32 0, i32 7
  %arraydecay25 = getelementptr inbounds [80 x i8], [80 x i8]* %name24, i32 0, i32 0
  %32 = load %struct.intel8x0*, %struct.intel8x0** %chip.addr, align 8
  %card26 = getelementptr inbounds %struct.intel8x0, %struct.intel8x0* %32, i32 0, i32 5
  %33 = load %struct.snd_card*, %struct.snd_card** %card26, align 8
  %shortname = getelementptr inbounds %struct.snd_card, %struct.snd_card* %33, i32 0, i32 3
  %arraydecay27 = getelementptr inbounds [32 x i8], [32 x i8]* %shortname, i32 0, i32 0
  %34 = load %struct.ich_pcm_table*, %struct.ich_pcm_table** %rec.addr, align 8
  %suffix28 = getelementptr inbounds %struct.ich_pcm_table, %struct.ich_pcm_table* %34, i32 0, i32 0
  %35 = load i8*, i8** %suffix28, align 8
  %call29 = call i32 (i8*, i8*, ...) @sprintf(i8* %arraydecay25, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.113, i32 0, i32 0), i8* %arraydecay27, i8* %35)
  br label %if.end37

if.else30:                                        ; preds = %if.end20
  %36 = load %struct.snd_pcm*, %struct.snd_pcm** %pcm, align 8
  %name31 = getelementptr inbounds %struct.snd_pcm, %struct.snd_pcm* %36, i32 0, i32 7
  %arraydecay32 = getelementptr inbounds [80 x i8], [80 x i8]* %name31, i32 0, i32 0
  %37 = load %struct.intel8x0*, %struct.intel8x0** %chip.addr, align 8
  %card33 = getelementptr inbounds %struct.intel8x0, %struct.intel8x0* %37, i32 0, i32 5
  %38 = load %struct.snd_card*, %struct.snd_card** %card33, align 8
  %shortname34 = getelementptr inbounds %struct.snd_card, %struct.snd_card* %38, i32 0, i32 3
  %arraydecay35 = getelementptr inbounds [32 x i8], [32 x i8]* %shortname34, i32 0, i32 0
  %call36 = call i8* @strcpy(i8* %arraydecay32, i8* %arraydecay35)
  br label %if.end37

if.end37:                                         ; preds = %if.else30, %if.then23
  %39 = load %struct.snd_pcm*, %struct.snd_pcm** %pcm, align 8
  %40 = load %struct.intel8x0*, %struct.intel8x0** %chip.addr, align 8
  %pcm38 = getelementptr inbounds %struct.intel8x0, %struct.intel8x0* %40, i32 0, i32 7
  %41 = load i32, i32* %device.addr, align 4
  %idxprom = sext i32 %41 to i64
  %arrayidx = getelementptr inbounds [6 x %struct.snd_pcm*], [6 x %struct.snd_pcm*]* %pcm38, i64 0, i64 %idxprom
  store %struct.snd_pcm* %39, %struct.snd_pcm** %arrayidx, align 8
  %42 = load %struct.snd_pcm*, %struct.snd_pcm** %pcm, align 8
  %43 = load %struct.intel8x0*, %struct.intel8x0** %chip.addr, align 8
  %pci = getelementptr inbounds %struct.intel8x0, %struct.intel8x0* %43, i32 0, i32 4
  %44 = load %struct.pci_dev*, %struct.pci_dev** %pci, align 8
  %dev = getelementptr inbounds %struct.pci_dev, %struct.pci_dev* %44, i32 0, i32 35
  %45 = bitcast %struct.device* %dev to i8*
  %46 = load %struct.ich_pcm_table*, %struct.ich_pcm_table** %rec.addr, align 8
  %prealloc_size = getelementptr inbounds %struct.ich_pcm_table, %struct.ich_pcm_table* %46, i32 0, i32 3
  %47 = load i64, i64* %prealloc_size, align 8
  %48 = load %struct.ich_pcm_table*, %struct.ich_pcm_table** %rec.addr, align 8
  %prealloc_max_size = getelementptr inbounds %struct.ich_pcm_table, %struct.ich_pcm_table* %48, i32 0, i32 4
  %49 = load i64, i64* %prealloc_max_size, align 8
  %call39 = call i32 @snd_pcm_lib_preallocate_pages_for_all(%struct.snd_pcm* %42, i32 2, i8* %45, i64 %47, i64 %49)
  %50 = load %struct.ich_pcm_table*, %struct.ich_pcm_table** %rec.addr, align 8
  %playback_ops40 = getelementptr inbounds %struct.ich_pcm_table, %struct.ich_pcm_table* %50, i32 0, i32 1
  %51 = load %struct.snd_pcm_ops*, %struct.snd_pcm_ops** %playback_ops40, align 8
  %tobool41 = icmp ne %struct.snd_pcm_ops* %51, null
  br i1 %tobool41, label %land.lhs.true, label %if.end69

land.lhs.true:                                    ; preds = %if.end37
  %52 = load %struct.ich_pcm_table*, %struct.ich_pcm_table** %rec.addr, align 8
  %playback_ops42 = getelementptr inbounds %struct.ich_pcm_table, %struct.ich_pcm_table* %52, i32 0, i32 1
  %53 = load %struct.snd_pcm_ops*, %struct.snd_pcm_ops** %playback_ops42, align 8
  %open = getelementptr inbounds %struct.snd_pcm_ops, %struct.snd_pcm_ops* %53, i32 0, i32 0
  %54 = load i32 (%struct.snd_pcm_substream*)*, i32 (%struct.snd_pcm_substream*)** %open, align 8
  %cmp43 = icmp eq i32 (%struct.snd_pcm_substream*)* %54, @snd_intel8x0_playback_open
  br i1 %cmp43, label %if.then44, label %if.end69

if.then44:                                        ; preds = %land.lhs.true
  store i32 2, i32* %chs, align 4
  %55 = load %struct.intel8x0*, %struct.intel8x0** %chip.addr, align 8
  %multi8 = getelementptr inbounds %struct.intel8x0, %struct.intel8x0* %55, i32 0, i32 9
  %bf.load = load i16, i16* %multi8, align 8
  %bf.lshr = lshr i16 %bf.load, 2
  %bf.clear = and i16 %bf.lshr, 1
  %bf.cast = zext i16 %bf.clear to i32
  %tobool45 = icmp ne i32 %bf.cast, 0
  br i1 %tobool45, label %if.then46, label %if.else47

if.then46:                                        ; preds = %if.then44
  store i32 8, i32* %chs, align 4
  br label %if.end62

if.else47:                                        ; preds = %if.then44
  %56 = load %struct.intel8x0*, %struct.intel8x0** %chip.addr, align 8
  %multi6 = getelementptr inbounds %struct.intel8x0, %struct.intel8x0* %56, i32 0, i32 9
  %bf.load48 = load i16, i16* %multi6, align 8
  %bf.lshr49 = lshr i16 %bf.load48, 1
  %bf.clear50 = and i16 %bf.lshr49, 1
  %bf.cast51 = zext i16 %bf.clear50 to i32
  %tobool52 = icmp ne i32 %bf.cast51, 0
  br i1 %tobool52, label %if.then53, label %if.else54

if.then53:                                        ; preds = %if.else47
  store i32 6, i32* %chs, align 4
  br label %if.end61

if.else54:                                        ; preds = %if.else47
  %57 = load %struct.intel8x0*, %struct.intel8x0** %chip.addr, align 8
  %multi4 = getelementptr inbounds %struct.intel8x0, %struct.intel8x0* %57, i32 0, i32 9
  %bf.load55 = load i16, i16* %multi4, align 8
  %bf.clear56 = and i16 %bf.load55, 1
  %bf.cast57 = zext i16 %bf.clear56 to i32
  %tobool58 = icmp ne i32 %bf.cast57, 0
  br i1 %tobool58, label %if.then59, label %if.end60

if.then59:                                        ; preds = %if.else54
  store i32 4, i32* %chs, align 4
  br label %if.end60

if.end60:                                         ; preds = %if.then59, %if.else54
  br label %if.end61

if.end61:                                         ; preds = %if.end60, %if.then53
  br label %if.end62

if.end62:                                         ; preds = %if.end61, %if.then46
  %58 = load %struct.snd_pcm*, %struct.snd_pcm** %pcm, align 8
  %59 = load i32, i32* %chs, align 4
  %call63 = call i32 @snd_pcm_add_chmap_ctls(%struct.snd_pcm* %58, i32 0, %struct.snd_pcm_chmap_elem* getelementptr inbounds ([0 x %struct.snd_pcm_chmap_elem], [0 x %struct.snd_pcm_chmap_elem]* @snd_pcm_alt_chmaps, i32 0, i32 0), i32 %59, i64 0, %struct.snd_pcm_chmap** %chmap)
  store i32 %call63, i32* %err, align 4
  %60 = load i32, i32* %err, align 4
  %cmp64 = icmp slt i32 %60, 0
  br i1 %cmp64, label %if.then65, label %if.end66

if.then65:                                        ; preds = %if.end62
  %61 = load i32, i32* %err, align 4
  store i32 %61, i32* %retval, align 4
  br label %return

if.end66:                                         ; preds = %if.end62
  %62 = load %struct.snd_pcm_chmap*, %struct.snd_pcm_chmap** %chmap, align 8
  %channel_mask = getelementptr inbounds %struct.snd_pcm_chmap, %struct.snd_pcm_chmap* %62, i32 0, i32 5
  store i32 340, i32* %channel_mask, align 4
  %63 = load %struct.snd_pcm_chmap*, %struct.snd_pcm_chmap** %chmap, align 8
  %64 = load %struct.intel8x0*, %struct.intel8x0** %chip.addr, align 8
  %ac97 = getelementptr inbounds %struct.intel8x0, %struct.intel8x0* %64, i32 0, i32 13
  %arrayidx67 = getelementptr inbounds [3 x %struct.snd_ac97*], [3 x %struct.snd_ac97*]* %ac97, i64 0, i64 0
  %65 = load %struct.snd_ac97*, %struct.snd_ac97** %arrayidx67, align 8
  %chmaps = getelementptr inbounds %struct.snd_ac97, %struct.snd_ac97* %65, i32 0, i32 29
  %arrayidx68 = getelementptr inbounds [2 x %struct.snd_pcm_chmap*], [2 x %struct.snd_pcm_chmap*]* %chmaps, i64 0, i64 0
  store %struct.snd_pcm_chmap* %63, %struct.snd_pcm_chmap** %arrayidx68, align 8
  br label %if.end69

if.end69:                                         ; preds = %if.end66, %land.lhs.true, %if.end37
  store i32 0, i32* %retval, align 4
  br label %return

return:                                           ; preds = %if.end69, %if.then65, %if.then9
  %66 = load i32, i32* %retval, align 4
  ret i32 %66
}

; Function Attrs: noinline nounwind optnone uwtable
define internal i32 @snd_intel8x0_playback_open(%struct.snd_pcm_substream* %substream) #0 {
entry:
  %retval = alloca i32, align 4
  %substream.addr = alloca %struct.snd_pcm_substream*, align 8
  %chip = alloca %struct.intel8x0*, align 8
  %runtime = alloca %struct.snd_pcm_runtime*, align 8
  %err = alloca i32, align 4
  store %struct.snd_pcm_substream* %substream, %struct.snd_pcm_substream** %substream.addr, align 8
  %0 = load %struct.snd_pcm_substream*, %struct.snd_pcm_substream** %substream.addr, align 8
  %private_data = getelementptr inbounds %struct.snd_pcm_substream, %struct.snd_pcm_substream* %0, i32 0, i32 2
  %1 = load i8*, i8** %private_data, align 8
  %2 = bitcast i8* %1 to %struct.intel8x0*
  store %struct.intel8x0* %2, %struct.intel8x0** %chip, align 8
  %3 = load %struct.snd_pcm_substream*, %struct.snd_pcm_substream** %substream.addr, align 8
  %runtime1 = getelementptr inbounds %struct.snd_pcm_substream, %struct.snd_pcm_substream* %3, i32 0, i32 11
  %4 = load %struct.snd_pcm_runtime*, %struct.snd_pcm_runtime** %runtime1, align 8
  store %struct.snd_pcm_runtime* %4, %struct.snd_pcm_runtime** %runtime, align 8
  %5 = load %struct.snd_pcm_substream*, %struct.snd_pcm_substream** %substream.addr, align 8
  %6 = load %struct.intel8x0*, %struct.intel8x0** %chip, align 8
  %ichd = getelementptr inbounds %struct.intel8x0, %struct.intel8x0* %6, i32 0, i32 8
  %arrayidx = getelementptr inbounds [6 x %struct.ichdev], [6 x %struct.ichdev]* %ichd, i64 0, i64 1
  %call = call i32 @snd_intel8x0_pcm_open(%struct.snd_pcm_substream* %5, %struct.ichdev* %arrayidx)
  store i32 %call, i32* %err, align 4
  %7 = load i32, i32* %err, align 4
  %cmp = icmp slt i32 %7, 0
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %8 = load i32, i32* %err, align 4
  store i32 %8, i32* %retval, align 4
  br label %return

if.end:                                           ; preds = %entry
  %9 = load %struct.intel8x0*, %struct.intel8x0** %chip, align 8
  %multi8 = getelementptr inbounds %struct.intel8x0, %struct.intel8x0* %9, i32 0, i32 9
  %bf.load = load i16, i16* %multi8, align 8
  %bf.lshr = lshr i16 %bf.load, 2
  %bf.clear = and i16 %bf.lshr, 1
  %bf.cast = zext i16 %bf.clear to i32
  %tobool = icmp ne i32 %bf.cast, 0
  br i1 %tobool, label %if.then2, label %if.else

if.then2:                                         ; preds = %if.end
  %10 = load %struct.snd_pcm_runtime*, %struct.snd_pcm_runtime** %runtime, align 8
  %hw = getelementptr inbounds %struct.snd_pcm_runtime, %struct.snd_pcm_runtime* %10, i32 0, i32 45
  %channels_max = getelementptr inbounds %struct.snd_pcm_hardware, %struct.snd_pcm_hardware* %hw, i32 0, i32 6
  store i32 8, i32* %channels_max, align 8
  %11 = load %struct.snd_pcm_runtime*, %struct.snd_pcm_runtime** %runtime, align 8
  %call3 = call i32 @snd_pcm_hw_constraint_list(%struct.snd_pcm_runtime* %11, i32 0, i32 10, %struct.snd_pcm_hw_constraint_list* @hw_constraints_channels8)
  br label %if.end24

if.else:                                          ; preds = %if.end
  %12 = load %struct.intel8x0*, %struct.intel8x0** %chip, align 8
  %multi6 = getelementptr inbounds %struct.intel8x0, %struct.intel8x0* %12, i32 0, i32 9
  %bf.load4 = load i16, i16* %multi6, align 8
  %bf.lshr5 = lshr i16 %bf.load4, 1
  %bf.clear6 = and i16 %bf.lshr5, 1
  %bf.cast7 = zext i16 %bf.clear6 to i32
  %tobool8 = icmp ne i32 %bf.cast7, 0
  br i1 %tobool8, label %if.then9, label %if.else13

if.then9:                                         ; preds = %if.else
  %13 = load %struct.snd_pcm_runtime*, %struct.snd_pcm_runtime** %runtime, align 8
  %hw10 = getelementptr inbounds %struct.snd_pcm_runtime, %struct.snd_pcm_runtime* %13, i32 0, i32 45
  %channels_max11 = getelementptr inbounds %struct.snd_pcm_hardware, %struct.snd_pcm_hardware* %hw10, i32 0, i32 6
  store i32 6, i32* %channels_max11, align 8
  %14 = load %struct.snd_pcm_runtime*, %struct.snd_pcm_runtime** %runtime, align 8
  %call12 = call i32 @snd_pcm_hw_constraint_list(%struct.snd_pcm_runtime* %14, i32 0, i32 10, %struct.snd_pcm_hw_constraint_list* @hw_constraints_channels6)
  br label %if.end23

if.else13:                                        ; preds = %if.else
  %15 = load %struct.intel8x0*, %struct.intel8x0** %chip, align 8
  %multi4 = getelementptr inbounds %struct.intel8x0, %struct.intel8x0* %15, i32 0, i32 9
  %bf.load14 = load i16, i16* %multi4, align 8
  %bf.clear15 = and i16 %bf.load14, 1
  %bf.cast16 = zext i16 %bf.clear15 to i32
  %tobool17 = icmp ne i32 %bf.cast16, 0
  br i1 %tobool17, label %if.then18, label %if.end22

if.then18:                                        ; preds = %if.else13
  %16 = load %struct.snd_pcm_runtime*, %struct.snd_pcm_runtime** %runtime, align 8
  %hw19 = getelementptr inbounds %struct.snd_pcm_runtime, %struct.snd_pcm_runtime* %16, i32 0, i32 45
  %channels_max20 = getelementptr inbounds %struct.snd_pcm_hardware, %struct.snd_pcm_hardware* %hw19, i32 0, i32 6
  store i32 4, i32* %channels_max20, align 8
  %17 = load %struct.snd_pcm_runtime*, %struct.snd_pcm_runtime** %runtime, align 8
  %call21 = call i32 @snd_pcm_hw_constraint_list(%struct.snd_pcm_runtime* %17, i32 0, i32 10, %struct.snd_pcm_hw_constraint_list* @hw_constraints_channels4)
  br label %if.end22

if.end22:                                         ; preds = %if.then18, %if.else13
  br label %if.end23

if.end23:                                         ; preds = %if.end22, %if.then9
  br label %if.end24

if.end24:                                         ; preds = %if.end23, %if.then2
  %18 = load %struct.intel8x0*, %struct.intel8x0** %chip, align 8
  %dra = getelementptr inbounds %struct.intel8x0, %struct.intel8x0* %18, i32 0, i32 9
  %bf.load25 = load i16, i16* %dra, align 8
  %bf.lshr26 = lshr i16 %bf.load25, 3
  %bf.clear27 = and i16 %bf.lshr26, 1
  %bf.cast28 = zext i16 %bf.clear27 to i32
  %tobool29 = icmp ne i32 %bf.cast28, 0
  br i1 %tobool29, label %if.then30, label %if.end32

if.then30:                                        ; preds = %if.end24
  %19 = load %struct.snd_pcm_runtime*, %struct.snd_pcm_runtime** %runtime, align 8
  %call31 = call i32 @snd_ac97_pcm_double_rate_rules(%struct.snd_pcm_runtime* %19)
  br label %if.end32

if.end32:                                         ; preds = %if.then30, %if.end24
  %20 = load %struct.intel8x0*, %struct.intel8x0** %chip, align 8
  %smp20bit = getelementptr inbounds %struct.intel8x0, %struct.intel8x0* %20, i32 0, i32 9
  %bf.load33 = load i16, i16* %smp20bit, align 8
  %bf.lshr34 = lshr i16 %bf.load33, 4
  %bf.clear35 = and i16 %bf.lshr34, 1
  %bf.cast36 = zext i16 %bf.clear35 to i32
  %tobool37 = icmp ne i32 %bf.cast36, 0
  br i1 %tobool37, label %if.then38, label %if.end41

if.then38:                                        ; preds = %if.end32
  %21 = load %struct.snd_pcm_runtime*, %struct.snd_pcm_runtime** %runtime, align 8
  %hw39 = getelementptr inbounds %struct.snd_pcm_runtime, %struct.snd_pcm_runtime* %21, i32 0, i32 45
  %formats = getelementptr inbounds %struct.snd_pcm_hardware, %struct.snd_pcm_hardware* %hw39, i32 0, i32 1
  %22 = load i64, i64* %formats, align 8
  %or = or i64 %22, 1024
  store i64 %or, i64* %formats, align 8
  %23 = load %struct.snd_pcm_runtime*, %struct.snd_pcm_runtime** %runtime, align 8
  %call40 = call i32 @snd_pcm_hw_constraint_msbits(%struct.snd_pcm_runtime* %23, i32 0, i32 32, i32 20)
  br label %if.end41

if.end41:                                         ; preds = %if.then38, %if.end32
  store i32 0, i32* %retval, align 4
  br label %return

return:                                           ; preds = %if.end41, %if.then
  %24 = load i32, i32* %retval, align 4
  ret i32 %24
}

; Function Attrs: noinline nounwind optnone uwtable
define internal i32 @snd_intel8x0_playback_close(%struct.snd_pcm_substream* %substream) #0 {
entry:
  %substream.addr = alloca %struct.snd_pcm_substream*, align 8
  %chip = alloca %struct.intel8x0*, align 8
  store %struct.snd_pcm_substream* %substream, %struct.snd_pcm_substream** %substream.addr, align 8
  %0 = load %struct.snd_pcm_substream*, %struct.snd_pcm_substream** %substream.addr, align 8
  %private_data = getelementptr inbounds %struct.snd_pcm_substream, %struct.snd_pcm_substream* %0, i32 0, i32 2
  %1 = load i8*, i8** %private_data, align 8
  %2 = bitcast i8* %1 to %struct.intel8x0*
  store %struct.intel8x0* %2, %struct.intel8x0** %chip, align 8
  %3 = load %struct.intel8x0*, %struct.intel8x0** %chip, align 8
  %ichd = getelementptr inbounds %struct.intel8x0, %struct.intel8x0* %3, i32 0, i32 8
  %arrayidx = getelementptr inbounds [6 x %struct.ichdev], [6 x %struct.ichdev]* %ichd, i64 0, i64 1
  %substream1 = getelementptr inbounds %struct.ichdev, %struct.ichdev* %arrayidx, i32 0, i32 4
  store %struct.snd_pcm_substream* null, %struct.snd_pcm_substream** %substream1, align 8
  ret i32 0
}

declare i32 @snd_pcm_lib_ioctl(%struct.snd_pcm_substream*, i32, i8*) #1

; Function Attrs: noinline nounwind optnone uwtable
define internal i32 @snd_intel8x0_hw_params(%struct.snd_pcm_substream* %substream, %struct.snd_pcm_hw_params* %hw_params) #0 {
entry:
  %retval = alloca i32, align 4
  %substream.addr = alloca %struct.snd_pcm_substream*, align 8
  %hw_params.addr = alloca %struct.snd_pcm_hw_params*, align 8
  %chip = alloca %struct.intel8x0*, align 8
  %ichdev = alloca %struct.ichdev*, align 8
  %runtime2 = alloca %struct.snd_pcm_runtime*, align 8
  %dbl = alloca i32, align 4
  %err = alloca i32, align 4
  store %struct.snd_pcm_substream* %substream, %struct.snd_pcm_substream** %substream.addr, align 8
  store %struct.snd_pcm_hw_params* %hw_params, %struct.snd_pcm_hw_params** %hw_params.addr, align 8
  %0 = load %struct.snd_pcm_substream*, %struct.snd_pcm_substream** %substream.addr, align 8
  %private_data = getelementptr inbounds %struct.snd_pcm_substream, %struct.snd_pcm_substream* %0, i32 0, i32 2
  %1 = load i8*, i8** %private_data, align 8
  %2 = bitcast i8* %1 to %struct.intel8x0*
  store %struct.intel8x0* %2, %struct.intel8x0** %chip, align 8
  %3 = load %struct.snd_pcm_substream*, %struct.snd_pcm_substream** %substream.addr, align 8
  %runtime = getelementptr inbounds %struct.snd_pcm_substream, %struct.snd_pcm_substream* %3, i32 0, i32 11
  %4 = load %struct.snd_pcm_runtime*, %struct.snd_pcm_runtime** %runtime, align 8
  %private_data1 = getelementptr inbounds %struct.snd_pcm_runtime, %struct.snd_pcm_runtime* %4, i32 0, i32 43
  %5 = load i8*, i8** %private_data1, align 8
  %6 = bitcast i8* %5 to %struct.ichdev*
  store %struct.ichdev* %6, %struct.ichdev** %ichdev, align 8
  %7 = load %struct.snd_pcm_substream*, %struct.snd_pcm_substream** %substream.addr, align 8
  %runtime3 = getelementptr inbounds %struct.snd_pcm_substream, %struct.snd_pcm_substream* %7, i32 0, i32 11
  %8 = load %struct.snd_pcm_runtime*, %struct.snd_pcm_runtime** %runtime3, align 8
  store %struct.snd_pcm_runtime* %8, %struct.snd_pcm_runtime** %runtime2, align 8
  %9 = load %struct.snd_pcm_hw_params*, %struct.snd_pcm_hw_params** %hw_params.addr, align 8
  %call = call i32 @params_rate(%struct.snd_pcm_hw_params* %9)
  %cmp = icmp ugt i32 %call, 48000
  %conv = zext i1 %cmp to i32
  store i32 %conv, i32* %dbl, align 4
  %10 = load %struct.intel8x0*, %struct.intel8x0** %chip, align 8
  %fix_nocache = getelementptr inbounds %struct.intel8x0, %struct.intel8x0* %10, i32 0, i32 9
  %bf.load = load i16, i16* %fix_nocache, align 8
  %bf.lshr = lshr i16 %bf.load, 8
  %bf.clear = and i16 %bf.lshr, 1
  %bf.cast = zext i16 %bf.clear to i32
  %tobool = icmp ne i32 %bf.cast, 0
  br i1 %tobool, label %land.lhs.true, label %if.end

land.lhs.true:                                    ; preds = %entry
  %11 = load %struct.ichdev*, %struct.ichdev** %ichdev, align 8
  %page_attr_changed = getelementptr inbounds %struct.ichdev, %struct.ichdev* %11, i32 0, i32 25
  %bf.load4 = load i8, i8* %page_attr_changed, align 4
  %bf.clear5 = and i8 %bf.load4, 1
  %bf.cast6 = zext i8 %bf.clear5 to i32
  %tobool7 = icmp ne i32 %bf.cast6, 0
  br i1 %tobool7, label %if.then, label %if.end

if.then:                                          ; preds = %land.lhs.true
  br label %do.body

do.body:                                          ; preds = %if.then
  br label %do.end

do.end:                                           ; preds = %do.body
  %12 = load %struct.ichdev*, %struct.ichdev** %ichdev, align 8
  %page_attr_changed8 = getelementptr inbounds %struct.ichdev, %struct.ichdev* %12, i32 0, i32 25
  %bf.load9 = load i8, i8* %page_attr_changed8, align 4
  %bf.clear10 = and i8 %bf.load9, -2
  store i8 %bf.clear10, i8* %page_attr_changed8, align 4
  br label %if.end

if.end:                                           ; preds = %do.end, %land.lhs.true, %entry
  %13 = load %struct.snd_pcm_substream*, %struct.snd_pcm_substream** %substream.addr, align 8
  %14 = load %struct.snd_pcm_hw_params*, %struct.snd_pcm_hw_params** %hw_params.addr, align 8
  %call11 = call i32 @params_buffer_bytes(%struct.snd_pcm_hw_params* %14)
  %conv12 = zext i32 %call11 to i64
  %call13 = call i32 @snd_pcm_lib_malloc_pages(%struct.snd_pcm_substream* %13, i64 %conv12)
  store i32 %call13, i32* %err, align 4
  %15 = load i32, i32* %err, align 4
  %cmp14 = icmp slt i32 %15, 0
  br i1 %cmp14, label %if.then16, label %if.end17

if.then16:                                        ; preds = %if.end
  %16 = load i32, i32* %err, align 4
  store i32 %16, i32* %retval, align 4
  br label %return

if.end17:                                         ; preds = %if.end
  %17 = load %struct.intel8x0*, %struct.intel8x0** %chip, align 8
  %fix_nocache18 = getelementptr inbounds %struct.intel8x0, %struct.intel8x0* %17, i32 0, i32 9
  %bf.load19 = load i16, i16* %fix_nocache18, align 8
  %bf.lshr20 = lshr i16 %bf.load19, 8
  %bf.clear21 = and i16 %bf.lshr20, 1
  %bf.cast22 = zext i16 %bf.clear21 to i32
  %tobool23 = icmp ne i32 %bf.cast22, 0
  br i1 %tobool23, label %if.then24, label %if.end39

if.then24:                                        ; preds = %if.end17
  %18 = load %struct.snd_pcm_runtime*, %struct.snd_pcm_runtime** %runtime2, align 8
  %dma_area = getelementptr inbounds %struct.snd_pcm_runtime, %struct.snd_pcm_runtime* %18, i32 0, i32 49
  %19 = load i8*, i8** %dma_area, align 8
  %tobool25 = icmp ne i8* %19, null
  br i1 %tobool25, label %land.lhs.true26, label %if.end38

land.lhs.true26:                                  ; preds = %if.then24
  %20 = load %struct.ichdev*, %struct.ichdev** %ichdev, align 8
  %page_attr_changed27 = getelementptr inbounds %struct.ichdev, %struct.ichdev* %20, i32 0, i32 25
  %bf.load28 = load i8, i8* %page_attr_changed27, align 4
  %bf.clear29 = and i8 %bf.load28, 1
  %bf.cast30 = zext i8 %bf.clear29 to i32
  %tobool31 = icmp ne i32 %bf.cast30, 0
  br i1 %tobool31, label %if.end38, label %if.then32

if.then32:                                        ; preds = %land.lhs.true26
  br label %do.body33

do.body33:                                        ; preds = %if.then32
  br label %do.end34

do.end34:                                         ; preds = %do.body33
  %21 = load %struct.ichdev*, %struct.ichdev** %ichdev, align 8
  %page_attr_changed35 = getelementptr inbounds %struct.ichdev, %struct.ichdev* %21, i32 0, i32 25
  %bf.load36 = load i8, i8* %page_attr_changed35, align 4
  %bf.clear37 = and i8 %bf.load36, -2
  %bf.set = or i8 %bf.clear37, 1
  store i8 %bf.set, i8* %page_attr_changed35, align 4
  br label %if.end38

if.end38:                                         ; preds = %do.end34, %land.lhs.true26, %if.then24
  br label %if.end39

if.end39:                                         ; preds = %if.end38, %if.end17
  %22 = load %struct.ichdev*, %struct.ichdev** %ichdev, align 8
  %pcm_open_flag = getelementptr inbounds %struct.ichdev, %struct.ichdev* %22, i32 0, i32 24
  %23 = load i32, i32* %pcm_open_flag, align 8
  %tobool40 = icmp ne i32 %23, 0
  br i1 %tobool40, label %if.then41, label %if.end44

if.then41:                                        ; preds = %if.end39
  %24 = load %struct.ichdev*, %struct.ichdev** %ichdev, align 8
  %pcm = getelementptr inbounds %struct.ichdev, %struct.ichdev* %24, i32 0, i32 23
  %25 = load %struct.ac97_pcm*, %struct.ac97_pcm** %pcm, align 8
  %call42 = call i32 @snd_ac97_pcm_close(%struct.ac97_pcm* %25)
  %26 = load %struct.ichdev*, %struct.ichdev** %ichdev, align 8
  %pcm_open_flag43 = getelementptr inbounds %struct.ichdev, %struct.ichdev* %26, i32 0, i32 24
  store i32 0, i32* %pcm_open_flag43, align 8
  br label %if.end44

if.end44:                                         ; preds = %if.then41, %if.end39
  %27 = load %struct.ichdev*, %struct.ichdev** %ichdev, align 8
  %pcm45 = getelementptr inbounds %struct.ichdev, %struct.ichdev* %27, i32 0, i32 23
  %28 = load %struct.ac97_pcm*, %struct.ac97_pcm** %pcm45, align 8
  %29 = load %struct.snd_pcm_hw_params*, %struct.snd_pcm_hw_params** %hw_params.addr, align 8
  %call46 = call i32 @params_rate(%struct.snd_pcm_hw_params* %29)
  %30 = load %struct.snd_pcm_hw_params*, %struct.snd_pcm_hw_params** %hw_params.addr, align 8
  %call47 = call i32 @params_channels(%struct.snd_pcm_hw_params* %30)
  %31 = load %struct.ichdev*, %struct.ichdev** %ichdev, align 8
  %pcm48 = getelementptr inbounds %struct.ichdev, %struct.ichdev* %31, i32 0, i32 23
  %32 = load %struct.ac97_pcm*, %struct.ac97_pcm** %pcm48, align 8
  %r = getelementptr inbounds %struct.ac97_pcm, %struct.ac97_pcm* %32, i32 0, i32 5
  %33 = load i32, i32* %dbl, align 4
  %idxprom = sext i32 %33 to i64
  %arrayidx = getelementptr inbounds [2 x %struct.anon.69], [2 x %struct.anon.69]* %r, i64 0, i64 %idxprom
  %slots = getelementptr inbounds %struct.anon.69, %struct.anon.69* %arrayidx, i32 0, i32 0
  %34 = load i16, i16* %slots, align 8
  %call49 = call i32 @snd_ac97_pcm_open(%struct.ac97_pcm* %28, i32 %call46, i32 %call47, i16 zeroext %34)
  store i32 %call49, i32* %err, align 4
  %35 = load i32, i32* %err, align 4
  %cmp50 = icmp sge i32 %35, 0
  br i1 %cmp50, label %if.then52, label %if.end67

if.then52:                                        ; preds = %if.end44
  %36 = load %struct.ichdev*, %struct.ichdev** %ichdev, align 8
  %pcm_open_flag53 = getelementptr inbounds %struct.ichdev, %struct.ichdev* %36, i32 0, i32 24
  store i32 1, i32* %pcm_open_flag53, align 8
  %37 = load %struct.ichdev*, %struct.ichdev** %ichdev, align 8
  %ichd = getelementptr inbounds %struct.ichdev, %struct.ichdev* %37, i32 0, i32 0
  %38 = load i32, i32* %ichd, align 8
  %cmp54 = icmp eq i32 %38, 1
  br i1 %cmp54, label %land.lhs.true56, label %if.end66

land.lhs.true56:                                  ; preds = %if.then52
  %39 = load %struct.intel8x0*, %struct.intel8x0** %chip, align 8
  %spdif_idx = getelementptr inbounds %struct.intel8x0, %struct.intel8x0* %39, i32 0, i32 10
  %40 = load i32, i32* %spdif_idx, align 4
  %cmp57 = icmp slt i32 %40, 0
  br i1 %cmp57, label %if.then59, label %if.end66

if.then59:                                        ; preds = %land.lhs.true56
  %41 = load %struct.ichdev*, %struct.ichdev** %ichdev, align 8
  %pcm60 = getelementptr inbounds %struct.ichdev, %struct.ichdev* %41, i32 0, i32 23
  %42 = load %struct.ac97_pcm*, %struct.ac97_pcm** %pcm60, align 8
  %r61 = getelementptr inbounds %struct.ac97_pcm, %struct.ac97_pcm* %42, i32 0, i32 5
  %arrayidx62 = getelementptr inbounds [2 x %struct.anon.69], [2 x %struct.anon.69]* %r61, i64 0, i64 0
  %codec = getelementptr inbounds %struct.anon.69, %struct.anon.69* %arrayidx62, i32 0, i32 3
  %arrayidx63 = getelementptr inbounds [4 x %struct.snd_ac97*], [4 x %struct.snd_ac97*]* %codec, i64 0, i64 0
  %43 = load %struct.snd_ac97*, %struct.snd_ac97** %arrayidx63, align 8
  %44 = load %struct.snd_pcm_hw_params*, %struct.snd_pcm_hw_params** %hw_params.addr, align 8
  %call64 = call i32 @params_rate(%struct.snd_pcm_hw_params* %44)
  %call65 = call i32 @snd_ac97_set_rate(%struct.snd_ac97* %43, i32 58, i32 %call64)
  br label %if.end66

if.end66:                                         ; preds = %if.then59, %land.lhs.true56, %if.then52
  br label %if.end67

if.end67:                                         ; preds = %if.end66, %if.end44
  %45 = load i32, i32* %err, align 4
  store i32 %45, i32* %retval, align 4
  br label %return

return:                                           ; preds = %if.end67, %if.then16
  %46 = load i32, i32* %retval, align 4
  ret i32 %46
}

; Function Attrs: noinline nounwind optnone uwtable
define internal i32 @snd_intel8x0_hw_free(%struct.snd_pcm_substream* %substream) #0 {
entry:
  %substream.addr = alloca %struct.snd_pcm_substream*, align 8
  %chip = alloca %struct.intel8x0*, align 8
  %ichdev = alloca %struct.ichdev*, align 8
  store %struct.snd_pcm_substream* %substream, %struct.snd_pcm_substream** %substream.addr, align 8
  %0 = load %struct.snd_pcm_substream*, %struct.snd_pcm_substream** %substream.addr, align 8
  %private_data = getelementptr inbounds %struct.snd_pcm_substream, %struct.snd_pcm_substream* %0, i32 0, i32 2
  %1 = load i8*, i8** %private_data, align 8
  %2 = bitcast i8* %1 to %struct.intel8x0*
  store %struct.intel8x0* %2, %struct.intel8x0** %chip, align 8
  %3 = load %struct.snd_pcm_substream*, %struct.snd_pcm_substream** %substream.addr, align 8
  %runtime = getelementptr inbounds %struct.snd_pcm_substream, %struct.snd_pcm_substream* %3, i32 0, i32 11
  %4 = load %struct.snd_pcm_runtime*, %struct.snd_pcm_runtime** %runtime, align 8
  %private_data1 = getelementptr inbounds %struct.snd_pcm_runtime, %struct.snd_pcm_runtime* %4, i32 0, i32 43
  %5 = load i8*, i8** %private_data1, align 8
  %6 = bitcast i8* %5 to %struct.ichdev*
  store %struct.ichdev* %6, %struct.ichdev** %ichdev, align 8
  %7 = load %struct.ichdev*, %struct.ichdev** %ichdev, align 8
  %pcm_open_flag = getelementptr inbounds %struct.ichdev, %struct.ichdev* %7, i32 0, i32 24
  %8 = load i32, i32* %pcm_open_flag, align 8
  %tobool = icmp ne i32 %8, 0
  br i1 %tobool, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %9 = load %struct.ichdev*, %struct.ichdev** %ichdev, align 8
  %pcm = getelementptr inbounds %struct.ichdev, %struct.ichdev* %9, i32 0, i32 23
  %10 = load %struct.ac97_pcm*, %struct.ac97_pcm** %pcm, align 8
  %call = call i32 @snd_ac97_pcm_close(%struct.ac97_pcm* %10)
  %11 = load %struct.ichdev*, %struct.ichdev** %ichdev, align 8
  %pcm_open_flag2 = getelementptr inbounds %struct.ichdev, %struct.ichdev* %11, i32 0, i32 24
  store i32 0, i32* %pcm_open_flag2, align 8
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  %12 = load %struct.intel8x0*, %struct.intel8x0** %chip, align 8
  %fix_nocache = getelementptr inbounds %struct.intel8x0, %struct.intel8x0* %12, i32 0, i32 9
  %bf.load = load i16, i16* %fix_nocache, align 8
  %bf.lshr = lshr i16 %bf.load, 8
  %bf.clear = and i16 %bf.lshr, 1
  %bf.cast = zext i16 %bf.clear to i32
  %tobool3 = icmp ne i32 %bf.cast, 0
  br i1 %tobool3, label %land.lhs.true, label %if.end12

land.lhs.true:                                    ; preds = %if.end
  %13 = load %struct.ichdev*, %struct.ichdev** %ichdev, align 8
  %page_attr_changed = getelementptr inbounds %struct.ichdev, %struct.ichdev* %13, i32 0, i32 25
  %bf.load4 = load i8, i8* %page_attr_changed, align 4
  %bf.clear5 = and i8 %bf.load4, 1
  %bf.cast6 = zext i8 %bf.clear5 to i32
  %tobool7 = icmp ne i32 %bf.cast6, 0
  br i1 %tobool7, label %if.then8, label %if.end12

if.then8:                                         ; preds = %land.lhs.true
  br label %do.body

do.body:                                          ; preds = %if.then8
  br label %do.end

do.end:                                           ; preds = %do.body
  %14 = load %struct.ichdev*, %struct.ichdev** %ichdev, align 8
  %page_attr_changed9 = getelementptr inbounds %struct.ichdev, %struct.ichdev* %14, i32 0, i32 25
  %bf.load10 = load i8, i8* %page_attr_changed9, align 4
  %bf.clear11 = and i8 %bf.load10, -2
  store i8 %bf.clear11, i8* %page_attr_changed9, align 4
  br label %if.end12

if.end12:                                         ; preds = %do.end, %land.lhs.true, %if.end
  %15 = load %struct.snd_pcm_substream*, %struct.snd_pcm_substream** %substream.addr, align 8
  %call13 = call i32 @snd_pcm_lib_free_pages(%struct.snd_pcm_substream* %15)
  ret i32 %call13
}

; Function Attrs: noinline nounwind optnone uwtable
define internal i32 @snd_intel8x0_pcm_prepare(%struct.snd_pcm_substream* %substream) #0 {
entry:
  %substream.addr = alloca %struct.snd_pcm_substream*, align 8
  %chip = alloca %struct.intel8x0*, align 8
  %runtime = alloca %struct.snd_pcm_runtime*, align 8
  %ichdev = alloca %struct.ichdev*, align 8
  store %struct.snd_pcm_substream* %substream, %struct.snd_pcm_substream** %substream.addr, align 8
  %0 = load %struct.snd_pcm_substream*, %struct.snd_pcm_substream** %substream.addr, align 8
  %private_data = getelementptr inbounds %struct.snd_pcm_substream, %struct.snd_pcm_substream* %0, i32 0, i32 2
  %1 = load i8*, i8** %private_data, align 8
  %2 = bitcast i8* %1 to %struct.intel8x0*
  store %struct.intel8x0* %2, %struct.intel8x0** %chip, align 8
  %3 = load %struct.snd_pcm_substream*, %struct.snd_pcm_substream** %substream.addr, align 8
  %runtime1 = getelementptr inbounds %struct.snd_pcm_substream, %struct.snd_pcm_substream* %3, i32 0, i32 11
  %4 = load %struct.snd_pcm_runtime*, %struct.snd_pcm_runtime** %runtime1, align 8
  store %struct.snd_pcm_runtime* %4, %struct.snd_pcm_runtime** %runtime, align 8
  %5 = load %struct.snd_pcm_substream*, %struct.snd_pcm_substream** %substream.addr, align 8
  %runtime2 = getelementptr inbounds %struct.snd_pcm_substream, %struct.snd_pcm_substream* %5, i32 0, i32 11
  %6 = load %struct.snd_pcm_runtime*, %struct.snd_pcm_runtime** %runtime2, align 8
  %private_data3 = getelementptr inbounds %struct.snd_pcm_runtime, %struct.snd_pcm_runtime* %6, i32 0, i32 43
  %7 = load i8*, i8** %private_data3, align 8
  %8 = bitcast i8* %7 to %struct.ichdev*
  store %struct.ichdev* %8, %struct.ichdev** %ichdev, align 8
  %9 = load %struct.snd_pcm_runtime*, %struct.snd_pcm_runtime** %runtime, align 8
  %dma_addr = getelementptr inbounds %struct.snd_pcm_runtime, %struct.snd_pcm_runtime* %9, i32 0, i32 50
  %10 = load i64, i64* %dma_addr, align 8
  %conv = trunc i64 %10 to i32
  %11 = load %struct.ichdev*, %struct.ichdev** %ichdev, align 8
  %physbuf = getelementptr inbounds %struct.ichdev, %struct.ichdev* %11, i32 0, i32 5
  store i32 %conv, i32* %physbuf, align 8
  %12 = load %struct.snd_pcm_substream*, %struct.snd_pcm_substream** %substream.addr, align 8
  %call = call i64 @snd_pcm_lib_buffer_bytes(%struct.snd_pcm_substream* %12)
  %conv4 = trunc i64 %call to i32
  %13 = load %struct.ichdev*, %struct.ichdev** %ichdev, align 8
  %size = getelementptr inbounds %struct.ichdev, %struct.ichdev* %13, i32 0, i32 6
  store i32 %conv4, i32* %size, align 4
  %14 = load %struct.snd_pcm_substream*, %struct.snd_pcm_substream** %substream.addr, align 8
  %call5 = call i64 @snd_pcm_lib_period_bytes(%struct.snd_pcm_substream* %14)
  %conv6 = trunc i64 %call5 to i32
  %15 = load %struct.ichdev*, %struct.ichdev** %ichdev, align 8
  %fragsize = getelementptr inbounds %struct.ichdev, %struct.ichdev* %15, i32 0, i32 7
  store i32 %conv6, i32* %fragsize, align 8
  %16 = load %struct.ichdev*, %struct.ichdev** %ichdev, align 8
  %ichd = getelementptr inbounds %struct.ichdev, %struct.ichdev* %16, i32 0, i32 0
  %17 = load i32, i32* %ichd, align 8
  %cmp = icmp eq i32 %17, 1
  br i1 %cmp, label %if.then, label %if.end13

if.then:                                          ; preds = %entry
  %18 = load %struct.intel8x0*, %struct.intel8x0** %chip, align 8
  %19 = load %struct.snd_pcm_runtime*, %struct.snd_pcm_runtime** %runtime, align 8
  call void @snd_intel8x0_setup_pcm_out(%struct.intel8x0* %18, %struct.snd_pcm_runtime* %19)
  %20 = load %struct.intel8x0*, %struct.intel8x0** %chip, align 8
  %device_type = getelementptr inbounds %struct.intel8x0, %struct.intel8x0* %20, i32 0, i32 0
  %21 = load i32, i32* %device_type, align 8
  %cmp8 = icmp eq i32 %21, 1
  br i1 %cmp8, label %if.then10, label %if.end

if.then10:                                        ; preds = %if.then
  %22 = load %struct.snd_pcm_runtime*, %struct.snd_pcm_runtime** %runtime, align 8
  %sample_bits = getelementptr inbounds %struct.snd_pcm_runtime, %struct.snd_pcm_runtime* %22, i32 0, i32 22
  %23 = load i32, i32* %sample_bits, align 4
  %cmp11 = icmp ugt i32 %23, 16
  %24 = zext i1 %cmp11 to i64
  %cond = select i1 %cmp11, i32 2, i32 1
  %25 = load %struct.ichdev*, %struct.ichdev** %ichdev, align 8
  %pos_shift = getelementptr inbounds %struct.ichdev, %struct.ichdev* %25, i32 0, i32 10
  store i32 %cond, i32* %pos_shift, align 4
  br label %if.end

if.end:                                           ; preds = %if.then10, %if.then
  br label %if.end13

if.end13:                                         ; preds = %if.end, %entry
  %26 = load %struct.intel8x0*, %struct.intel8x0** %chip, align 8
  %27 = load %struct.ichdev*, %struct.ichdev** %ichdev, align 8
  call void @snd_intel8x0_setup_periods(%struct.intel8x0* %26, %struct.ichdev* %27)
  ret i32 0
}

; Function Attrs: noinline nounwind optnone uwtable
define internal i32 @snd_intel8x0_pcm_trigger(%struct.snd_pcm_substream* %substream, i32 %cmd) #0 {
entry:
  %retval = alloca i32, align 4
  %substream.addr = alloca %struct.snd_pcm_substream*, align 8
  %cmd.addr = alloca i32, align 4
  %chip = alloca %struct.intel8x0*, align 8
  %ichdev = alloca %struct.ichdev*, align 8
  %val = alloca i8, align 1
  %port = alloca i64, align 8
  store %struct.snd_pcm_substream* %substream, %struct.snd_pcm_substream** %substream.addr, align 8
  store i32 %cmd, i32* %cmd.addr, align 4
  %0 = load %struct.snd_pcm_substream*, %struct.snd_pcm_substream** %substream.addr, align 8
  %private_data = getelementptr inbounds %struct.snd_pcm_substream, %struct.snd_pcm_substream* %0, i32 0, i32 2
  %1 = load i8*, i8** %private_data, align 8
  %2 = bitcast i8* %1 to %struct.intel8x0*
  store %struct.intel8x0* %2, %struct.intel8x0** %chip, align 8
  %3 = load %struct.snd_pcm_substream*, %struct.snd_pcm_substream** %substream.addr, align 8
  %runtime = getelementptr inbounds %struct.snd_pcm_substream, %struct.snd_pcm_substream* %3, i32 0, i32 11
  %4 = load %struct.snd_pcm_runtime*, %struct.snd_pcm_runtime** %runtime, align 8
  %private_data1 = getelementptr inbounds %struct.snd_pcm_runtime, %struct.snd_pcm_runtime* %4, i32 0, i32 43
  %5 = load i8*, i8** %private_data1, align 8
  %6 = bitcast i8* %5 to %struct.ichdev*
  store %struct.ichdev* %6, %struct.ichdev** %ichdev, align 8
  store i8 0, i8* %val, align 1
  %7 = load %struct.ichdev*, %struct.ichdev** %ichdev, align 8
  %reg_offset = getelementptr inbounds %struct.ichdev, %struct.ichdev* %7, i32 0, i32 1
  %8 = load i64, i64* %reg_offset, align 8
  store i64 %8, i64* %port, align 8
  %9 = load i32, i32* %cmd.addr, align 4
  br label %NodeBlock11

NodeBlock11:                                      ; preds = %entry
  %Pivot12 = icmp slt i32 %9, 4
  br i1 %Pivot12, label %NodeBlock3, label %NodeBlock9

NodeBlock9:                                       ; preds = %NodeBlock11
  %Pivot10 = icmp slt i32 %9, 5
  br i1 %Pivot10, label %sw.bb2, label %NodeBlock7

NodeBlock7:                                       ; preds = %NodeBlock9
  %Pivot8 = icmp slt i32 %9, 6
  br i1 %Pivot8, label %sw.bb3, label %LeafBlock5

LeafBlock5:                                       ; preds = %NodeBlock7
  %SwitchLeaf6 = icmp eq i32 %9, 6
  br i1 %SwitchLeaf6, label %sw.bb, label %NewDefault

NodeBlock3:                                       ; preds = %NodeBlock11
  %Pivot4 = icmp slt i32 %9, 1
  br i1 %Pivot4, label %LeafBlock, label %NodeBlock

NodeBlock:                                        ; preds = %NodeBlock3
  %Pivot = icmp slt i32 %9, 3
  br i1 %Pivot, label %LeafBlock1, label %sw.bb8

LeafBlock1:                                       ; preds = %NodeBlock
  %SwitchLeaf2 = icmp eq i32 %9, 1
  br i1 %SwitchLeaf2, label %sw.bb2, label %NewDefault

LeafBlock:                                        ; preds = %NodeBlock3
  %SwitchLeaf = icmp eq i32 %9, 0
  br i1 %SwitchLeaf, label %sw.bb7, label %NewDefault

sw.bb:                                            ; preds = %LeafBlock5
  %10 = load %struct.ichdev*, %struct.ichdev** %ichdev, align 8
  %suspended = getelementptr inbounds %struct.ichdev, %struct.ichdev* %10, i32 0, i32 25
  %bf.load = load i8, i8* %suspended, align 4
  %bf.clear = and i8 %bf.load, -3
  store i8 %bf.clear, i8* %suspended, align 4
  br label %sw.bb2

sw.bb2:                                           ; preds = %NodeBlock9, %LeafBlock1, %sw.bb
  store i8 17, i8* %val, align 1
  %11 = load %struct.ichdev*, %struct.ichdev** %ichdev, align 8
  %position = getelementptr inbounds %struct.ichdev, %struct.ichdev* %11, i32 0, i32 9
  %12 = load i32, i32* %position, align 8
  %13 = load %struct.ichdev*, %struct.ichdev** %ichdev, align 8
  %last_pos = getelementptr inbounds %struct.ichdev, %struct.ichdev* %13, i32 0, i32 11
  store i32 %12, i32* %last_pos, align 8
  br label %sw.epilog

sw.bb3:                                           ; preds = %NodeBlock7
  %14 = load %struct.ichdev*, %struct.ichdev** %ichdev, align 8
  %suspended4 = getelementptr inbounds %struct.ichdev, %struct.ichdev* %14, i32 0, i32 25
  %bf.load5 = load i8, i8* %suspended4, align 4
  %bf.clear6 = and i8 %bf.load5, -3
  %bf.set = or i8 %bf.clear6, 2
  store i8 %bf.set, i8* %suspended4, align 4
  br label %sw.bb7

sw.bb7:                                           ; preds = %LeafBlock, %sw.bb3
  store i8 0, i8* %val, align 1
  br label %sw.epilog

sw.bb8:                                           ; preds = %NodeBlock
  store i8 16, i8* %val, align 1
  br label %sw.epilog

NewDefault:                                       ; preds = %LeafBlock5, %LeafBlock1, %LeafBlock
  br label %sw.default

sw.default:                                       ; preds = %NewDefault
  store i32 -22, i32* %retval, align 4
  br label %return

sw.epilog:                                        ; preds = %sw.bb8, %sw.bb7, %sw.bb2
  %15 = load %struct.intel8x0*, %struct.intel8x0** %chip, align 8
  %16 = load i64, i64* %port, align 8
  %add = add i64 %16, 11
  %conv = trunc i64 %add to i32
  %17 = load i8, i8* %val, align 1
  call void @iputbyte(%struct.intel8x0* %15, i32 %conv, i8 zeroext %17)
  %18 = load i32, i32* %cmd.addr, align 4
  %cmp = icmp eq i32 %18, 0
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %sw.epilog
  br label %while.cond

while.cond:                                       ; preds = %while.body, %if.then
  %19 = load %struct.intel8x0*, %struct.intel8x0** %chip, align 8
  %20 = load i64, i64* %port, align 8
  %21 = load %struct.ichdev*, %struct.ichdev** %ichdev, align 8
  %roff_sr = getelementptr inbounds %struct.ichdev, %struct.ichdev* %21, i32 0, i32 19
  %22 = load i32, i32* %roff_sr, align 8
  %conv10 = zext i32 %22 to i64
  %add11 = add i64 %20, %conv10
  %conv12 = trunc i64 %add11 to i32
  %call = call zeroext i8 @igetbyte(%struct.intel8x0* %19, i32 %conv12)
  %conv13 = zext i8 %call to i32
  %and = and i32 %conv13, 1
  %tobool = icmp ne i32 %and, 0
  %lnot = xor i1 %tobool, true
  br i1 %lnot, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  br label %while.cond

while.end:                                        ; preds = %while.cond
  %23 = load %struct.intel8x0*, %struct.intel8x0** %chip, align 8
  %24 = load i64, i64* %port, align 8
  %add14 = add i64 %24, 11
  %conv15 = trunc i64 %add14 to i32
  call void @iputbyte(%struct.intel8x0* %23, i32 %conv15, i8 zeroext 2)
  br label %if.end

if.end:                                           ; preds = %while.end, %sw.epilog
  store i32 0, i32* %retval, align 4
  br label %return

return:                                           ; preds = %if.end, %sw.default
  %25 = load i32, i32* %retval, align 4
  ret i32 %25
}

; Function Attrs: noinline nounwind optnone uwtable
define internal i64 @snd_intel8x0_pcm_pointer(%struct.snd_pcm_substream* %substream) #0 {
entry:
  %lock.addr.i68 = alloca %struct.spinlock*, align 8
  %lock.addr.i = alloca %struct.spinlock*, align 8
  %retval = alloca i64, align 8
  %substream.addr = alloca %struct.snd_pcm_substream*, align 8
  %chip = alloca %struct.intel8x0*, align 8
  %ichdev = alloca %struct.ichdev*, align 8
  %ptr1 = alloca i64, align 8
  %ptr = alloca i64, align 8
  %civ = alloca i32, align 4
  %timeout = alloca i32, align 4
  %position = alloca i32, align 4
  %pos_base = alloca i32, align 4
  %last_base = alloca i32, align 4
  store %struct.snd_pcm_substream* %substream, %struct.snd_pcm_substream** %substream.addr, align 8
  %0 = load %struct.snd_pcm_substream*, %struct.snd_pcm_substream** %substream.addr, align 8
  %private_data = getelementptr inbounds %struct.snd_pcm_substream, %struct.snd_pcm_substream* %0, i32 0, i32 2
  %1 = load i8*, i8** %private_data, align 8
  %2 = bitcast i8* %1 to %struct.intel8x0*
  store %struct.intel8x0* %2, %struct.intel8x0** %chip, align 8
  %3 = load %struct.snd_pcm_substream*, %struct.snd_pcm_substream** %substream.addr, align 8
  %runtime = getelementptr inbounds %struct.snd_pcm_substream, %struct.snd_pcm_substream* %3, i32 0, i32 11
  %4 = load %struct.snd_pcm_runtime*, %struct.snd_pcm_runtime** %runtime, align 8
  %private_data1 = getelementptr inbounds %struct.snd_pcm_runtime, %struct.snd_pcm_runtime* %4, i32 0, i32 43
  %5 = load i8*, i8** %private_data1, align 8
  %6 = bitcast i8* %5 to %struct.ichdev*
  store %struct.ichdev* %6, %struct.ichdev** %ichdev, align 8
  store i32 10, i32* %timeout, align 4
  %7 = load %struct.intel8x0*, %struct.intel8x0** %chip, align 8
  %reg_lock = getelementptr inbounds %struct.intel8x0, %struct.intel8x0* %7, i32 0, i32 20
  store %struct.spinlock* %reg_lock, %struct.spinlock** %lock.addr.i, align 8
  %8 = load %struct.spinlock*, %struct.spinlock** %lock.addr.i, align 8
  %9 = getelementptr inbounds %struct.spinlock, %struct.spinlock* %8, i32 0, i32 0
  %rlock.i = bitcast %union.anon.1* %9 to %struct.raw_spinlock*
  call void @_raw_spin_lock(%struct.raw_spinlock* %rlock.i) #3
  br label %do.body

do.body:                                          ; preds = %do.cond, %entry
  %10 = load %struct.intel8x0*, %struct.intel8x0** %chip, align 8
  %11 = load %struct.ichdev*, %struct.ichdev** %ichdev, align 8
  %reg_offset = getelementptr inbounds %struct.ichdev, %struct.ichdev* %11, i32 0, i32 1
  %12 = load i64, i64* %reg_offset, align 8
  %add = add i64 %12, 4
  %conv = trunc i64 %add to i32
  %call = call zeroext i8 @igetbyte(%struct.intel8x0* %10, i32 %conv)
  %conv2 = zext i8 %call to i32
  store i32 %conv2, i32* %civ, align 4
  %13 = load %struct.intel8x0*, %struct.intel8x0** %chip, align 8
  %14 = load %struct.ichdev*, %struct.ichdev** %ichdev, align 8
  %reg_offset3 = getelementptr inbounds %struct.ichdev, %struct.ichdev* %14, i32 0, i32 1
  %15 = load i64, i64* %reg_offset3, align 8
  %16 = load %struct.ichdev*, %struct.ichdev** %ichdev, align 8
  %roff_picb = getelementptr inbounds %struct.ichdev, %struct.ichdev* %16, i32 0, i32 20
  %17 = load i32, i32* %roff_picb, align 4
  %conv4 = zext i32 %17 to i64
  %add5 = add i64 %15, %conv4
  %conv6 = trunc i64 %add5 to i32
  %call7 = call zeroext i16 @igetword(%struct.intel8x0* %13, i32 %conv6)
  %conv8 = zext i16 %call7 to i64
  store i64 %conv8, i64* %ptr1, align 8
  %18 = load %struct.ichdev*, %struct.ichdev** %ichdev, align 8
  %position9 = getelementptr inbounds %struct.ichdev, %struct.ichdev* %18, i32 0, i32 9
  %19 = load i32, i32* %position9, align 8
  store i32 %19, i32* %position, align 4
  %20 = load i64, i64* %ptr1, align 8
  %cmp = icmp eq i64 %20, 0
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %do.body
  call void @__const_udelay(i64 42950)
  br label %do.cond

if.end:                                           ; preds = %do.body
  %21 = load i32, i32* %civ, align 4
  %22 = load %struct.intel8x0*, %struct.intel8x0** %chip, align 8
  %23 = load %struct.ichdev*, %struct.ichdev** %ichdev, align 8
  %reg_offset11 = getelementptr inbounds %struct.ichdev, %struct.ichdev* %23, i32 0, i32 1
  %24 = load i64, i64* %reg_offset11, align 8
  %add12 = add i64 %24, 4
  %conv13 = trunc i64 %add12 to i32
  %call14 = call zeroext i8 @igetbyte(%struct.intel8x0* %22, i32 %conv13)
  %conv15 = zext i8 %call14 to i32
  %cmp16 = icmp ne i32 %21, %conv15
  br i1 %cmp16, label %if.then18, label %if.end19

if.then18:                                        ; preds = %if.end
  br label %do.cond

if.end19:                                         ; preds = %if.end
  %25 = load %struct.intel8x0*, %struct.intel8x0** %chip, align 8
  %inside_vm = getelementptr inbounds %struct.intel8x0, %struct.intel8x0* %25, i32 0, i32 9
  %bf.load = load i16, i16* %inside_vm, align 8
  %bf.lshr = lshr i16 %bf.load, 12
  %bf.clear = and i16 %bf.lshr, 1
  %bf.cast = zext i16 %bf.clear to i32
  %tobool = icmp ne i32 %bf.cast, 0
  br i1 %tobool, label %if.then20, label %if.end21

if.then20:                                        ; preds = %if.end19
  br label %do.end

if.end21:                                         ; preds = %if.end19
  %26 = load i64, i64* %ptr1, align 8
  %27 = load %struct.intel8x0*, %struct.intel8x0** %chip, align 8
  %28 = load %struct.ichdev*, %struct.ichdev** %ichdev, align 8
  %reg_offset22 = getelementptr inbounds %struct.ichdev, %struct.ichdev* %28, i32 0, i32 1
  %29 = load i64, i64* %reg_offset22, align 8
  %30 = load %struct.ichdev*, %struct.ichdev** %ichdev, align 8
  %roff_picb23 = getelementptr inbounds %struct.ichdev, %struct.ichdev* %30, i32 0, i32 20
  %31 = load i32, i32* %roff_picb23, align 4
  %conv24 = zext i32 %31 to i64
  %add25 = add i64 %29, %conv24
  %conv26 = trunc i64 %add25 to i32
  %call27 = call zeroext i16 @igetword(%struct.intel8x0* %27, i32 %conv26)
  %conv28 = zext i16 %call27 to i64
  %cmp29 = icmp eq i64 %26, %conv28
  br i1 %cmp29, label %if.then31, label %if.end32

if.then31:                                        ; preds = %if.end21
  br label %do.end

if.end32:                                         ; preds = %if.end21
  br label %do.cond

do.cond:                                          ; preds = %if.end32, %if.then18, %if.then
  %32 = load i32, i32* %timeout, align 4
  %dec = add nsw i32 %32, -1
  store i32 %dec, i32* %timeout, align 4
  %tobool33 = icmp ne i32 %32, 0
  br i1 %tobool33, label %do.body, label %do.end.loopexit

do.end.loopexit:                                  ; preds = %do.cond
  br label %do.end

do.end:                                           ; preds = %do.end.loopexit, %if.then31, %if.then20
  %33 = load %struct.ichdev*, %struct.ichdev** %ichdev, align 8
  %last_pos = getelementptr inbounds %struct.ichdev, %struct.ichdev* %33, i32 0, i32 11
  %34 = load i32, i32* %last_pos, align 8
  %conv34 = zext i32 %34 to i64
  store i64 %conv34, i64* %ptr, align 8
  %35 = load i64, i64* %ptr1, align 8
  %cmp35 = icmp ne i64 %35, 0
  br i1 %cmp35, label %if.then37, label %if.end57

if.then37:                                        ; preds = %do.end
  %36 = load %struct.ichdev*, %struct.ichdev** %ichdev, align 8
  %pos_shift = getelementptr inbounds %struct.ichdev, %struct.ichdev* %36, i32 0, i32 10
  %37 = load i32, i32* %pos_shift, align 4
  %38 = load i64, i64* %ptr1, align 8
  %sh_prom = zext i32 %37 to i64
  %shl = shl i64 %38, %sh_prom
  store i64 %shl, i64* %ptr1, align 8
  %39 = load %struct.ichdev*, %struct.ichdev** %ichdev, align 8
  %fragsize1 = getelementptr inbounds %struct.ichdev, %struct.ichdev* %39, i32 0, i32 8
  %40 = load i32, i32* %fragsize1, align 4
  %conv38 = zext i32 %40 to i64
  %41 = load i64, i64* %ptr1, align 8
  %sub = sub i64 %conv38, %41
  store i64 %sub, i64* %ptr, align 8
  %42 = load i32, i32* %position, align 4
  %conv39 = zext i32 %42 to i64
  %43 = load i64, i64* %ptr, align 8
  %add40 = add i64 %43, %conv39
  store i64 %add40, i64* %ptr, align 8
  %44 = load i64, i64* %ptr, align 8
  %45 = load %struct.ichdev*, %struct.ichdev** %ichdev, align 8
  %last_pos41 = getelementptr inbounds %struct.ichdev, %struct.ichdev* %45, i32 0, i32 11
  %46 = load i32, i32* %last_pos41, align 8
  %conv42 = zext i32 %46 to i64
  %cmp43 = icmp ult i64 %44, %conv42
  br i1 %cmp43, label %if.then45, label %if.end56

if.then45:                                        ; preds = %if.then37
  %47 = load i32, i32* %position, align 4
  %48 = load %struct.ichdev*, %struct.ichdev** %ichdev, align 8
  %fragsize146 = getelementptr inbounds %struct.ichdev, %struct.ichdev* %48, i32 0, i32 8
  %49 = load i32, i32* %fragsize146, align 4
  %div = udiv i32 %47, %49
  store i32 %div, i32* %pos_base, align 4
  %50 = load %struct.ichdev*, %struct.ichdev** %ichdev, align 8
  %last_pos47 = getelementptr inbounds %struct.ichdev, %struct.ichdev* %50, i32 0, i32 11
  %51 = load i32, i32* %last_pos47, align 8
  %52 = load %struct.ichdev*, %struct.ichdev** %ichdev, align 8
  %fragsize148 = getelementptr inbounds %struct.ichdev, %struct.ichdev* %52, i32 0, i32 8
  %53 = load i32, i32* %fragsize148, align 4
  %div49 = udiv i32 %51, %53
  store i32 %div49, i32* %last_base, align 4
  %54 = load i32, i32* %pos_base, align 4
  %55 = load i32, i32* %last_base, align 4
  %cmp50 = icmp eq i32 %54, %55
  br i1 %cmp50, label %if.then52, label %if.end55

if.then52:                                        ; preds = %if.then45
  %56 = load %struct.ichdev*, %struct.ichdev** %ichdev, align 8
  %last_pos53 = getelementptr inbounds %struct.ichdev, %struct.ichdev* %56, i32 0, i32 11
  %57 = load i32, i32* %last_pos53, align 8
  %conv54 = zext i32 %57 to i64
  store i64 %conv54, i64* %ptr, align 8
  br label %if.end55

if.end55:                                         ; preds = %if.then52, %if.then45
  br label %if.end56

if.end56:                                         ; preds = %if.end55, %if.then37
  br label %if.end57

if.end57:                                         ; preds = %if.end56, %do.end
  %58 = load i64, i64* %ptr, align 8
  %conv58 = trunc i64 %58 to i32
  %59 = load %struct.ichdev*, %struct.ichdev** %ichdev, align 8
  %last_pos59 = getelementptr inbounds %struct.ichdev, %struct.ichdev* %59, i32 0, i32 11
  store i32 %conv58, i32* %last_pos59, align 8
  %60 = load %struct.intel8x0*, %struct.intel8x0** %chip, align 8
  %reg_lock60 = getelementptr inbounds %struct.intel8x0, %struct.intel8x0* %60, i32 0, i32 20
  store %struct.spinlock* %reg_lock60, %struct.spinlock** %lock.addr.i68, align 8
  %61 = load %struct.spinlock*, %struct.spinlock** %lock.addr.i68, align 8
  %62 = getelementptr inbounds %struct.spinlock, %struct.spinlock* %61, i32 0, i32 0
  %rlock.i69 = bitcast %union.anon.1* %62 to %struct.raw_spinlock*
  call void @__raw_spin_unlock(%struct.raw_spinlock* %rlock.i69) #3
  %63 = load i64, i64* %ptr, align 8
  %64 = load %struct.ichdev*, %struct.ichdev** %ichdev, align 8
  %size = getelementptr inbounds %struct.ichdev, %struct.ichdev* %64, i32 0, i32 6
  %65 = load i32, i32* %size, align 4
  %conv61 = zext i32 %65 to i64
  %cmp62 = icmp uge i64 %63, %conv61
  br i1 %cmp62, label %if.then64, label %if.end65

if.then64:                                        ; preds = %if.end57
  store i64 0, i64* %retval, align 8
  br label %return

if.end65:                                         ; preds = %if.end57
  %66 = load %struct.snd_pcm_substream*, %struct.snd_pcm_substream** %substream.addr, align 8
  %runtime66 = getelementptr inbounds %struct.snd_pcm_substream, %struct.snd_pcm_substream* %66, i32 0, i32 11
  %67 = load %struct.snd_pcm_runtime*, %struct.snd_pcm_runtime** %runtime66, align 8
  %68 = load i64, i64* %ptr, align 8
  %call67 = call i64 @bytes_to_frames(%struct.snd_pcm_runtime* %67, i64 %68)
  store i64 %call67, i64* %retval, align 8
  br label %return

return:                                           ; preds = %if.end65, %if.then64
  %69 = load i64, i64* %retval, align 8
  ret i64 %69
}

; Function Attrs: noinline nounwind optnone uwtable
define internal i32 @snd_intel8x0_pcm_open(%struct.snd_pcm_substream* %substream, %struct.ichdev* %ichdev) #0 {
entry:
  %retval = alloca i32, align 4
  %substream.addr = alloca %struct.snd_pcm_substream*, align 8
  %ichdev.addr = alloca %struct.ichdev*, align 8
  %chip = alloca %struct.intel8x0*, align 8
  %runtime = alloca %struct.snd_pcm_runtime*, align 8
  %err = alloca i32, align 4
  store %struct.snd_pcm_substream* %substream, %struct.snd_pcm_substream** %substream.addr, align 8
  store %struct.ichdev* %ichdev, %struct.ichdev** %ichdev.addr, align 8
  %0 = load %struct.snd_pcm_substream*, %struct.snd_pcm_substream** %substream.addr, align 8
  %private_data = getelementptr inbounds %struct.snd_pcm_substream, %struct.snd_pcm_substream* %0, i32 0, i32 2
  %1 = load i8*, i8** %private_data, align 8
  %2 = bitcast i8* %1 to %struct.intel8x0*
  store %struct.intel8x0* %2, %struct.intel8x0** %chip, align 8
  %3 = load %struct.snd_pcm_substream*, %struct.snd_pcm_substream** %substream.addr, align 8
  %runtime1 = getelementptr inbounds %struct.snd_pcm_substream, %struct.snd_pcm_substream* %3, i32 0, i32 11
  %4 = load %struct.snd_pcm_runtime*, %struct.snd_pcm_runtime** %runtime1, align 8
  store %struct.snd_pcm_runtime* %4, %struct.snd_pcm_runtime** %runtime, align 8
  %5 = load %struct.snd_pcm_substream*, %struct.snd_pcm_substream** %substream.addr, align 8
  %6 = load %struct.ichdev*, %struct.ichdev** %ichdev.addr, align 8
  %substream2 = getelementptr inbounds %struct.ichdev, %struct.ichdev* %6, i32 0, i32 4
  store %struct.snd_pcm_substream* %5, %struct.snd_pcm_substream** %substream2, align 8
  %7 = load %struct.snd_pcm_runtime*, %struct.snd_pcm_runtime** %runtime, align 8
  %hw = getelementptr inbounds %struct.snd_pcm_runtime, %struct.snd_pcm_runtime* %7, i32 0, i32 45
  %8 = bitcast %struct.snd_pcm_hardware* %hw to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %8, i8* bitcast (%struct.snd_pcm_hardware* @snd_intel8x0_stream to i8*), i64 80, i32 8, i1 false)
  %9 = load %struct.ichdev*, %struct.ichdev** %ichdev.addr, align 8
  %pcm = getelementptr inbounds %struct.ichdev, %struct.ichdev* %9, i32 0, i32 23
  %10 = load %struct.ac97_pcm*, %struct.ac97_pcm** %pcm, align 8
  %rates = getelementptr inbounds %struct.ac97_pcm, %struct.ac97_pcm* %10, i32 0, i32 4
  %11 = load i32, i32* %rates, align 8
  %12 = load %struct.snd_pcm_runtime*, %struct.snd_pcm_runtime** %runtime, align 8
  %hw3 = getelementptr inbounds %struct.snd_pcm_runtime, %struct.snd_pcm_runtime* %12, i32 0, i32 45
  %rates4 = getelementptr inbounds %struct.snd_pcm_hardware, %struct.snd_pcm_hardware* %hw3, i32 0, i32 2
  store i32 %11, i32* %rates4, align 8
  %13 = load %struct.snd_pcm_runtime*, %struct.snd_pcm_runtime** %runtime, align 8
  %call = call i32 @snd_pcm_limit_hw_rates(%struct.snd_pcm_runtime* %13)
  %14 = load %struct.intel8x0*, %struct.intel8x0** %chip, align 8
  %device_type = getelementptr inbounds %struct.intel8x0, %struct.intel8x0* %14, i32 0, i32 0
  %15 = load i32, i32* %device_type, align 8
  %cmp = icmp eq i32 %15, 2
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %16 = load %struct.snd_pcm_runtime*, %struct.snd_pcm_runtime** %runtime, align 8
  %hw5 = getelementptr inbounds %struct.snd_pcm_runtime, %struct.snd_pcm_runtime* %16, i32 0, i32 45
  %buffer_bytes_max = getelementptr inbounds %struct.snd_pcm_hardware, %struct.snd_pcm_hardware* %hw5, i32 0, i32 7
  store i64 65536, i64* %buffer_bytes_max, align 8
  %17 = load %struct.snd_pcm_runtime*, %struct.snd_pcm_runtime** %runtime, align 8
  %hw6 = getelementptr inbounds %struct.snd_pcm_runtime, %struct.snd_pcm_runtime* %17, i32 0, i32 45
  %period_bytes_max = getelementptr inbounds %struct.snd_pcm_hardware, %struct.snd_pcm_hardware* %hw6, i32 0, i32 9
  store i64 65536, i64* %period_bytes_max, align 8
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  %18 = load %struct.snd_pcm_runtime*, %struct.snd_pcm_runtime** %runtime, align 8
  %call7 = call i32 @snd_pcm_hw_constraint_integer(%struct.snd_pcm_runtime* %18, i32 15)
  store i32 %call7, i32* %err, align 4
  %cmp8 = icmp slt i32 %call7, 0
  br i1 %cmp8, label %if.then9, label %if.end10

if.then9:                                         ; preds = %if.end
  %19 = load i32, i32* %err, align 4
  store i32 %19, i32* %retval, align 4
  br label %return

if.end10:                                         ; preds = %if.end
  %20 = load %struct.ichdev*, %struct.ichdev** %ichdev.addr, align 8
  %21 = bitcast %struct.ichdev* %20 to i8*
  %22 = load %struct.snd_pcm_runtime*, %struct.snd_pcm_runtime** %runtime, align 8
  %private_data11 = getelementptr inbounds %struct.snd_pcm_runtime, %struct.snd_pcm_runtime* %22, i32 0, i32 43
  store i8* %21, i8** %private_data11, align 8
  store i32 0, i32* %retval, align 4
  br label %return

return:                                           ; preds = %if.end10, %if.then9
  %23 = load i32, i32* %retval, align 4
  ret i32 %23
}

declare i32 @snd_pcm_hw_constraint_list(%struct.snd_pcm_runtime*, i32, i32, %struct.snd_pcm_hw_constraint_list*) #1

declare i32 @snd_ac97_pcm_double_rate_rules(%struct.snd_pcm_runtime*) #1

declare i32 @snd_pcm_hw_constraint_msbits(%struct.snd_pcm_runtime*, i32, i32, i32) #1

declare i32 @snd_pcm_limit_hw_rates(%struct.snd_pcm_runtime*) #1

declare i32 @snd_pcm_hw_constraint_integer(%struct.snd_pcm_runtime*, i32) #1

; Function Attrs: noinline nounwind optnone uwtable
define internal i32 @params_rate(%struct.snd_pcm_hw_params* %p) #0 {
entry:
  %p.addr = alloca %struct.snd_pcm_hw_params*, align 8
  store %struct.snd_pcm_hw_params* %p, %struct.snd_pcm_hw_params** %p.addr, align 8
  %0 = load %struct.snd_pcm_hw_params*, %struct.snd_pcm_hw_params** %p.addr, align 8
  %call = call %struct.snd_interval* @hw_param_interval_c(%struct.snd_pcm_hw_params* %0, i32 11)
  %min = getelementptr inbounds %struct.snd_interval, %struct.snd_interval* %call, i32 0, i32 0
  %1 = load i32, i32* %min, align 4
  ret i32 %1
}

declare i32 @snd_pcm_lib_malloc_pages(%struct.snd_pcm_substream*, i64) #1

; Function Attrs: noinline nounwind optnone uwtable
define internal i32 @params_buffer_bytes(%struct.snd_pcm_hw_params* %p) #0 {
entry:
  %p.addr = alloca %struct.snd_pcm_hw_params*, align 8
  store %struct.snd_pcm_hw_params* %p, %struct.snd_pcm_hw_params** %p.addr, align 8
  %0 = load %struct.snd_pcm_hw_params*, %struct.snd_pcm_hw_params** %p.addr, align 8
  %call = call %struct.snd_interval* @hw_param_interval_c(%struct.snd_pcm_hw_params* %0, i32 18)
  %min = getelementptr inbounds %struct.snd_interval, %struct.snd_interval* %call, i32 0, i32 0
  %1 = load i32, i32* %min, align 4
  ret i32 %1
}

declare i32 @snd_ac97_pcm_close(%struct.ac97_pcm*) #1

declare i32 @snd_ac97_pcm_open(%struct.ac97_pcm*, i32, i32, i16 zeroext) #1

; Function Attrs: noinline nounwind optnone uwtable
define internal i32 @params_channels(%struct.snd_pcm_hw_params* %p) #0 {
entry:
  %p.addr = alloca %struct.snd_pcm_hw_params*, align 8
  store %struct.snd_pcm_hw_params* %p, %struct.snd_pcm_hw_params** %p.addr, align 8
  %0 = load %struct.snd_pcm_hw_params*, %struct.snd_pcm_hw_params** %p.addr, align 8
  %call = call %struct.snd_interval* @hw_param_interval_c(%struct.snd_pcm_hw_params* %0, i32 10)
  %min = getelementptr inbounds %struct.snd_interval, %struct.snd_interval* %call, i32 0, i32 0
  %1 = load i32, i32* %min, align 4
  ret i32 %1
}

declare i32 @snd_ac97_set_rate(%struct.snd_ac97*, i32, i32) #1

; Function Attrs: noinline nounwind optnone uwtable
define internal %struct.snd_interval* @hw_param_interval_c(%struct.snd_pcm_hw_params* %params, i32 %var) #0 {
entry:
  %params.addr = alloca %struct.snd_pcm_hw_params*, align 8
  %var.addr = alloca i32, align 4
  store %struct.snd_pcm_hw_params* %params, %struct.snd_pcm_hw_params** %params.addr, align 8
  store i32 %var, i32* %var.addr, align 4
  %0 = load %struct.snd_pcm_hw_params*, %struct.snd_pcm_hw_params** %params.addr, align 8
  %intervals = getelementptr inbounds %struct.snd_pcm_hw_params, %struct.snd_pcm_hw_params* %0, i32 0, i32 3
  %1 = load i32, i32* %var.addr, align 4
  %sub = sub nsw i32 %1, 8
  %idxprom = sext i32 %sub to i64
  %arrayidx = getelementptr inbounds [12 x %struct.snd_interval], [12 x %struct.snd_interval]* %intervals, i64 0, i64 %idxprom
  ret %struct.snd_interval* %arrayidx
}

declare i32 @snd_pcm_lib_free_pages(%struct.snd_pcm_substream*) #1

; Function Attrs: noinline nounwind optnone uwtable
define internal i64 @snd_pcm_lib_buffer_bytes(%struct.snd_pcm_substream* %substream) #0 {
entry:
  %substream.addr = alloca %struct.snd_pcm_substream*, align 8
  %runtime = alloca %struct.snd_pcm_runtime*, align 8
  store %struct.snd_pcm_substream* %substream, %struct.snd_pcm_substream** %substream.addr, align 8
  %0 = load %struct.snd_pcm_substream*, %struct.snd_pcm_substream** %substream.addr, align 8
  %runtime1 = getelementptr inbounds %struct.snd_pcm_substream, %struct.snd_pcm_substream* %0, i32 0, i32 11
  %1 = load %struct.snd_pcm_runtime*, %struct.snd_pcm_runtime** %runtime1, align 8
  store %struct.snd_pcm_runtime* %1, %struct.snd_pcm_runtime** %runtime, align 8
  %2 = load %struct.snd_pcm_runtime*, %struct.snd_pcm_runtime** %runtime, align 8
  %3 = load %struct.snd_pcm_runtime*, %struct.snd_pcm_runtime** %runtime, align 8
  %buffer_size = getelementptr inbounds %struct.snd_pcm_runtime, %struct.snd_pcm_runtime* %3, i32 0, i32 18
  %4 = load i64, i64* %buffer_size, align 8
  %call = call i64 @frames_to_bytes(%struct.snd_pcm_runtime* %2, i64 %4)
  ret i64 %call
}

; Function Attrs: noinline nounwind optnone uwtable
define internal i64 @snd_pcm_lib_period_bytes(%struct.snd_pcm_substream* %substream) #0 {
entry:
  %substream.addr = alloca %struct.snd_pcm_substream*, align 8
  %runtime = alloca %struct.snd_pcm_runtime*, align 8
  store %struct.snd_pcm_substream* %substream, %struct.snd_pcm_substream** %substream.addr, align 8
  %0 = load %struct.snd_pcm_substream*, %struct.snd_pcm_substream** %substream.addr, align 8
  %runtime1 = getelementptr inbounds %struct.snd_pcm_substream, %struct.snd_pcm_substream* %0, i32 0, i32 11
  %1 = load %struct.snd_pcm_runtime*, %struct.snd_pcm_runtime** %runtime1, align 8
  store %struct.snd_pcm_runtime* %1, %struct.snd_pcm_runtime** %runtime, align 8
  %2 = load %struct.snd_pcm_runtime*, %struct.snd_pcm_runtime** %runtime, align 8
  %3 = load %struct.snd_pcm_runtime*, %struct.snd_pcm_runtime** %runtime, align 8
  %period_size = getelementptr inbounds %struct.snd_pcm_runtime, %struct.snd_pcm_runtime* %3, i32 0, i32 16
  %4 = load i64, i64* %period_size, align 8
  %call = call i64 @frames_to_bytes(%struct.snd_pcm_runtime* %2, i64 %4)
  ret i64 %call
}

; Function Attrs: noinline nounwind optnone uwtable
define internal void @snd_intel8x0_setup_pcm_out(%struct.intel8x0* %chip, %struct.snd_pcm_runtime* %runtime) #0 {
entry:
  %lock.addr.i79 = alloca %struct.spinlock*, align 8
  %lock.addr.i77 = alloca %struct.spinlock*, align 8
  %lock.addr.i75 = alloca %struct.spinlock*, align 8
  %lock.addr.i = alloca %struct.spinlock*, align 8
  %chip.addr = alloca %struct.intel8x0*, align 8
  %runtime.addr = alloca %struct.snd_pcm_runtime*, align 8
  %cnt = alloca i32, align 4
  %dbl = alloca i32, align 4
  store %struct.intel8x0* %chip, %struct.intel8x0** %chip.addr, align 8
  store %struct.snd_pcm_runtime* %runtime, %struct.snd_pcm_runtime** %runtime.addr, align 8
  %0 = load %struct.snd_pcm_runtime*, %struct.snd_pcm_runtime** %runtime.addr, align 8
  %rate = getelementptr inbounds %struct.snd_pcm_runtime, %struct.snd_pcm_runtime* %0, i32 0, i32 14
  %1 = load i32, i32* %rate, align 4
  %cmp = icmp ugt i32 %1, 48000
  %conv = zext i1 %cmp to i32
  store i32 %conv, i32* %dbl, align 4
  %2 = load %struct.intel8x0*, %struct.intel8x0** %chip.addr, align 8
  %reg_lock = getelementptr inbounds %struct.intel8x0, %struct.intel8x0* %2, i32 0, i32 20
  store %struct.spinlock* %reg_lock, %struct.spinlock** %lock.addr.i, align 8
  %3 = load %struct.spinlock*, %struct.spinlock** %lock.addr.i, align 8
  %4 = getelementptr inbounds %struct.spinlock, %struct.spinlock* %3, i32 0, i32 0
  %rlock.i = bitcast %union.anon.1* %4 to %struct.raw_spinlock*
  call void @_raw_spin_lock_irq(%struct.raw_spinlock* %rlock.i) #3
  %5 = load %struct.intel8x0*, %struct.intel8x0** %chip.addr, align 8
  %device_type = getelementptr inbounds %struct.intel8x0, %struct.intel8x0* %5, i32 0, i32 0
  %6 = load i32, i32* %device_type, align 8
  br label %NodeBlock

NodeBlock:                                        ; preds = %entry
  %Pivot = icmp slt i32 %6, 3
  br i1 %Pivot, label %LeafBlock, label %LeafBlock1

LeafBlock1:                                       ; preds = %NodeBlock
  %SwitchLeaf2 = icmp eq i32 %6, 3
  br i1 %SwitchLeaf2, label %sw.bb, label %NewDefault

LeafBlock:                                        ; preds = %NodeBlock
  %SwitchLeaf = icmp eq i32 %6, 2
  br i1 %SwitchLeaf, label %sw.bb9, label %NewDefault

sw.bb:                                            ; preds = %LeafBlock1
  %7 = load %struct.intel8x0*, %struct.intel8x0** %chip.addr, align 8
  %call = call i32 @igetdword(%struct.intel8x0* %7, i32 0)
  store i32 %call, i32* %cnt, align 4
  %8 = load i32, i32* %cnt, align 4
  %and = and i32 %8, -769
  store i32 %and, i32* %cnt, align 4
  %9 = load %struct.snd_pcm_runtime*, %struct.snd_pcm_runtime** %runtime.addr, align 8
  %channels = getelementptr inbounds %struct.snd_pcm_runtime, %struct.snd_pcm_runtime* %9, i32 0, i32 15
  %10 = load i32, i32* %channels, align 8
  %cmp1 = icmp eq i32 %10, 4
  br i1 %cmp1, label %if.then, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %sw.bb
  %11 = load i32, i32* %dbl, align 4
  %tobool = icmp ne i32 %11, 0
  br i1 %tobool, label %if.then, label %if.else

if.then:                                          ; preds = %lor.lhs.false, %sw.bb
  %12 = load i32, i32* %cnt, align 4
  %or = or i32 %12, 256
  store i32 %or, i32* %cnt, align 4
  br label %if.end8

if.else:                                          ; preds = %lor.lhs.false
  %13 = load %struct.snd_pcm_runtime*, %struct.snd_pcm_runtime** %runtime.addr, align 8
  %channels3 = getelementptr inbounds %struct.snd_pcm_runtime, %struct.snd_pcm_runtime* %13, i32 0, i32 15
  %14 = load i32, i32* %channels3, align 8
  %cmp4 = icmp eq i32 %14, 6
  br i1 %cmp4, label %if.then6, label %if.end

if.then6:                                         ; preds = %if.else
  %15 = load i32, i32* %cnt, align 4
  %or7 = or i32 %15, 512
  store i32 %or7, i32* %cnt, align 4
  br label %if.end

if.end:                                           ; preds = %if.then6, %if.else
  br label %if.end8

if.end8:                                          ; preds = %if.end, %if.then
  %16 = load %struct.intel8x0*, %struct.intel8x0** %chip.addr, align 8
  %17 = load i32, i32* %cnt, align 4
  call void @iputdword(%struct.intel8x0* %16, i32 0, i32 %17)
  br label %sw.epilog

sw.bb9:                                           ; preds = %LeafBlock
  %18 = load %struct.intel8x0*, %struct.intel8x0** %chip.addr, align 8
  %call10 = call i32 @igetdword(%struct.intel8x0* %18, i32 44)
  store i32 %call10, i32* %cnt, align 4
  %19 = load i32, i32* %cnt, align 4
  %and11 = and i32 %19, -193
  store i32 %and11, i32* %cnt, align 4
  %20 = load %struct.snd_pcm_runtime*, %struct.snd_pcm_runtime** %runtime.addr, align 8
  %channels12 = getelementptr inbounds %struct.snd_pcm_runtime, %struct.snd_pcm_runtime* %20, i32 0, i32 15
  %21 = load i32, i32* %channels12, align 8
  %cmp13 = icmp eq i32 %21, 4
  br i1 %cmp13, label %if.then17, label %lor.lhs.false15

lor.lhs.false15:                                  ; preds = %sw.bb9
  %22 = load i32, i32* %dbl, align 4
  %tobool16 = icmp ne i32 %22, 0
  br i1 %tobool16, label %if.then17, label %if.else19

if.then17:                                        ; preds = %lor.lhs.false15, %sw.bb9
  %23 = load i32, i32* %cnt, align 4
  %or18 = or i32 %23, 64
  store i32 %or18, i32* %cnt, align 4
  br label %if.end26

if.else19:                                        ; preds = %lor.lhs.false15
  %24 = load %struct.snd_pcm_runtime*, %struct.snd_pcm_runtime** %runtime.addr, align 8
  %channels20 = getelementptr inbounds %struct.snd_pcm_runtime, %struct.snd_pcm_runtime* %24, i32 0, i32 15
  %25 = load i32, i32* %channels20, align 8
  %cmp21 = icmp eq i32 %25, 6
  br i1 %cmp21, label %if.then23, label %if.end25

if.then23:                                        ; preds = %if.else19
  %26 = load i32, i32* %cnt, align 4
  %or24 = or i32 %26, 128
  store i32 %or24, i32* %cnt, align 4
  br label %if.end25

if.end25:                                         ; preds = %if.then23, %if.else19
  br label %if.end26

if.end26:                                         ; preds = %if.end25, %if.then17
  %27 = load %struct.intel8x0*, %struct.intel8x0** %chip.addr, align 8
  %28 = load i32, i32* %cnt, align 4
  call void @iputdword(%struct.intel8x0* %27, i32 44, i32 %28)
  br label %sw.epilog

NewDefault:                                       ; preds = %LeafBlock1, %LeafBlock
  br label %sw.default

sw.default:                                       ; preds = %NewDefault
  %29 = load %struct.intel8x0*, %struct.intel8x0** %chip.addr, align 8
  %call27 = call i32 @igetdword(%struct.intel8x0* %29, i32 44)
  store i32 %call27, i32* %cnt, align 4
  %30 = load i32, i32* %cnt, align 4
  %and28 = and i32 %30, -7340033
  store i32 %and28, i32* %cnt, align 4
  %31 = load %struct.snd_pcm_runtime*, %struct.snd_pcm_runtime** %runtime.addr, align 8
  %channels29 = getelementptr inbounds %struct.snd_pcm_runtime, %struct.snd_pcm_runtime* %31, i32 0, i32 15
  %32 = load i32, i32* %channels29, align 8
  %cmp30 = icmp eq i32 %32, 4
  br i1 %cmp30, label %if.then34, label %lor.lhs.false32

lor.lhs.false32:                                  ; preds = %sw.default
  %33 = load i32, i32* %dbl, align 4
  %tobool33 = icmp ne i32 %33, 0
  br i1 %tobool33, label %if.then34, label %if.else36

if.then34:                                        ; preds = %lor.lhs.false32, %sw.default
  %34 = load i32, i32* %cnt, align 4
  %or35 = or i32 %34, 1048576
  store i32 %or35, i32* %cnt, align 4
  br label %if.end50

if.else36:                                        ; preds = %lor.lhs.false32
  %35 = load %struct.snd_pcm_runtime*, %struct.snd_pcm_runtime** %runtime.addr, align 8
  %channels37 = getelementptr inbounds %struct.snd_pcm_runtime, %struct.snd_pcm_runtime* %35, i32 0, i32 15
  %36 = load i32, i32* %channels37, align 8
  %cmp38 = icmp eq i32 %36, 6
  br i1 %cmp38, label %if.then40, label %if.else42

if.then40:                                        ; preds = %if.else36
  %37 = load i32, i32* %cnt, align 4
  %or41 = or i32 %37, 2097152
  store i32 %or41, i32* %cnt, align 4
  br label %if.end49

if.else42:                                        ; preds = %if.else36
  %38 = load %struct.snd_pcm_runtime*, %struct.snd_pcm_runtime** %runtime.addr, align 8
  %channels43 = getelementptr inbounds %struct.snd_pcm_runtime, %struct.snd_pcm_runtime* %38, i32 0, i32 15
  %39 = load i32, i32* %channels43, align 8
  %cmp44 = icmp eq i32 %39, 8
  br i1 %cmp44, label %if.then46, label %if.end48

if.then46:                                        ; preds = %if.else42
  %40 = load i32, i32* %cnt, align 4
  %or47 = or i32 %40, 3145728
  store i32 %or47, i32* %cnt, align 4
  br label %if.end48

if.end48:                                         ; preds = %if.then46, %if.else42
  br label %if.end49

if.end49:                                         ; preds = %if.end48, %if.then40
  br label %if.end50

if.end50:                                         ; preds = %if.end49, %if.then34
  %41 = load %struct.intel8x0*, %struct.intel8x0** %chip.addr, align 8
  %device_type51 = getelementptr inbounds %struct.intel8x0, %struct.intel8x0* %41, i32 0, i32 0
  %42 = load i32, i32* %device_type51, align 8
  %cmp52 = icmp eq i32 %42, 4
  br i1 %cmp52, label %if.then54, label %if.else62

if.then54:                                        ; preds = %if.end50
  %43 = load i32, i32* %cnt, align 4
  %and55 = and i32 %43, 3145728
  %tobool56 = icmp ne i32 %and55, 0
  br i1 %tobool56, label %if.then57, label %if.end61

if.then57:                                        ; preds = %if.then54
  %44 = load %struct.intel8x0*, %struct.intel8x0** %chip.addr, align 8
  %45 = load i32, i32* %cnt, align 4
  %and58 = and i32 %45, -3145729
  call void @iputdword(%struct.intel8x0* %44, i32 44, i32 %and58)
  %46 = load %struct.intel8x0*, %struct.intel8x0** %chip.addr, align 8
  %reg_lock59 = getelementptr inbounds %struct.intel8x0, %struct.intel8x0* %46, i32 0, i32 20
  store %struct.spinlock* %reg_lock59, %struct.spinlock** %lock.addr.i75, align 8
  %47 = load %struct.spinlock*, %struct.spinlock** %lock.addr.i75, align 8
  %48 = getelementptr inbounds %struct.spinlock, %struct.spinlock* %47, i32 0, i32 0
  %rlock.i76 = bitcast %union.anon.1* %48 to %struct.raw_spinlock*
  call void @__raw_spin_unlock_irq(%struct.raw_spinlock* %rlock.i76) #3
  call void @msleep(i32 50)
  %49 = load %struct.intel8x0*, %struct.intel8x0** %chip.addr, align 8
  %reg_lock60 = getelementptr inbounds %struct.intel8x0, %struct.intel8x0* %49, i32 0, i32 20
  store %struct.spinlock* %reg_lock60, %struct.spinlock** %lock.addr.i77, align 8
  %50 = load %struct.spinlock*, %struct.spinlock** %lock.addr.i77, align 8
  %51 = getelementptr inbounds %struct.spinlock, %struct.spinlock* %50, i32 0, i32 0
  %rlock.i78 = bitcast %union.anon.1* %51 to %struct.raw_spinlock*
  call void @_raw_spin_lock_irq(%struct.raw_spinlock* %rlock.i78) #3
  br label %if.end61

if.end61:                                         ; preds = %if.then57, %if.then54
  br label %if.end73

if.else62:                                        ; preds = %if.end50
  %52 = load %struct.intel8x0*, %struct.intel8x0** %chip.addr, align 8
  %device_type63 = getelementptr inbounds %struct.intel8x0, %struct.intel8x0* %52, i32 0, i32 0
  %53 = load i32, i32* %device_type63, align 8
  %cmp64 = icmp eq i32 %53, 1
  br i1 %cmp64, label %if.then66, label %if.end72

if.then66:                                        ; preds = %if.else62
  %54 = load %struct.snd_pcm_runtime*, %struct.snd_pcm_runtime** %runtime.addr, align 8
  %sample_bits = getelementptr inbounds %struct.snd_pcm_runtime, %struct.snd_pcm_runtime* %54, i32 0, i32 22
  %55 = load i32, i32* %sample_bits, align 4
  %cmp67 = icmp ugt i32 %55, 16
  br i1 %cmp67, label %if.then69, label %if.end71

if.then69:                                        ; preds = %if.then66
  %56 = load i32, i32* %cnt, align 4
  %or70 = or i32 %56, 4194304
  store i32 %or70, i32* %cnt, align 4
  br label %if.end71

if.end71:                                         ; preds = %if.then69, %if.then66
  br label %if.end72

if.end72:                                         ; preds = %if.end71, %if.else62
  br label %if.end73

if.end73:                                         ; preds = %if.end72, %if.end61
  %57 = load %struct.intel8x0*, %struct.intel8x0** %chip.addr, align 8
  %58 = load i32, i32* %cnt, align 4
  call void @iputdword(%struct.intel8x0* %57, i32 44, i32 %58)
  br label %sw.epilog

sw.epilog:                                        ; preds = %if.end73, %if.end26, %if.end8
  %59 = load %struct.intel8x0*, %struct.intel8x0** %chip.addr, align 8
  %reg_lock74 = getelementptr inbounds %struct.intel8x0, %struct.intel8x0* %59, i32 0, i32 20
  store %struct.spinlock* %reg_lock74, %struct.spinlock** %lock.addr.i79, align 8
  %60 = load %struct.spinlock*, %struct.spinlock** %lock.addr.i79, align 8
  %61 = getelementptr inbounds %struct.spinlock, %struct.spinlock* %60, i32 0, i32 0
  %rlock.i80 = bitcast %union.anon.1* %61 to %struct.raw_spinlock*
  call void @__raw_spin_unlock_irq(%struct.raw_spinlock* %rlock.i80) #3
  ret void
}

; Function Attrs: noinline nounwind optnone uwtable
define internal void @snd_intel8x0_setup_periods(%struct.intel8x0* %chip, %struct.ichdev* %ichdev) #0 {
entry:
  %chip.addr = alloca %struct.intel8x0*, align 8
  %ichdev.addr = alloca %struct.ichdev*, align 8
  %idx = alloca i32, align 4
  %bdbar = alloca i32*, align 8
  %port = alloca i64, align 8
  store %struct.intel8x0* %chip, %struct.intel8x0** %chip.addr, align 8
  store %struct.ichdev* %ichdev, %struct.ichdev** %ichdev.addr, align 8
  %0 = load %struct.ichdev*, %struct.ichdev** %ichdev.addr, align 8
  %bdbar1 = getelementptr inbounds %struct.ichdev, %struct.ichdev* %0, i32 0, i32 2
  %1 = load i32*, i32** %bdbar1, align 8
  store i32* %1, i32** %bdbar, align 8
  %2 = load %struct.ichdev*, %struct.ichdev** %ichdev.addr, align 8
  %reg_offset = getelementptr inbounds %struct.ichdev, %struct.ichdev* %2, i32 0, i32 1
  %3 = load i64, i64* %reg_offset, align 8
  store i64 %3, i64* %port, align 8
  %4 = load %struct.intel8x0*, %struct.intel8x0** %chip.addr, align 8
  %5 = load i64, i64* %port, align 8
  %add = add i64 %5, 0
  %conv = trunc i64 %add to i32
  %6 = load %struct.ichdev*, %struct.ichdev** %ichdev.addr, align 8
  %bdbar_addr = getelementptr inbounds %struct.ichdev, %struct.ichdev* %6, i32 0, i32 3
  %7 = load i32, i32* %bdbar_addr, align 8
  call void @iputdword(%struct.intel8x0* %4, i32 %conv, i32 %7)
  %8 = load %struct.ichdev*, %struct.ichdev** %ichdev.addr, align 8
  %size = getelementptr inbounds %struct.ichdev, %struct.ichdev* %8, i32 0, i32 6
  %9 = load i32, i32* %size, align 4
  %10 = load %struct.ichdev*, %struct.ichdev** %ichdev.addr, align 8
  %fragsize = getelementptr inbounds %struct.ichdev, %struct.ichdev* %10, i32 0, i32 7
  %11 = load i32, i32* %fragsize, align 8
  %cmp = icmp eq i32 %9, %11
  br i1 %cmp, label %if.then, label %if.else

if.then:                                          ; preds = %entry
  %12 = load %struct.ichdev*, %struct.ichdev** %ichdev.addr, align 8
  %ack = getelementptr inbounds %struct.ichdev, %struct.ichdev* %12, i32 0, i32 16
  store i32 2, i32* %ack, align 4
  %13 = load %struct.ichdev*, %struct.ichdev** %ichdev.addr, align 8
  %ack_reload = getelementptr inbounds %struct.ichdev, %struct.ichdev* %13, i32 0, i32 17
  store i32 2, i32* %ack_reload, align 8
  %14 = load %struct.ichdev*, %struct.ichdev** %ichdev.addr, align 8
  %fragsize3 = getelementptr inbounds %struct.ichdev, %struct.ichdev* %14, i32 0, i32 7
  %15 = load i32, i32* %fragsize3, align 8
  %shr = lshr i32 %15, 1
  %16 = load %struct.ichdev*, %struct.ichdev** %ichdev.addr, align 8
  %fragsize1 = getelementptr inbounds %struct.ichdev, %struct.ichdev* %16, i32 0, i32 8
  store i32 %shr, i32* %fragsize1, align 4
  store i32 0, i32* %idx, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %if.then
  %17 = load i32, i32* %idx, align 4
  %cmp4 = icmp slt i32 %17, 64
  br i1 %cmp4, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %18 = load %struct.ichdev*, %struct.ichdev** %ichdev.addr, align 8
  %physbuf = getelementptr inbounds %struct.ichdev, %struct.ichdev* %18, i32 0, i32 5
  %19 = load i32, i32* %physbuf, align 8
  %20 = load i32*, i32** %bdbar, align 8
  %21 = load i32, i32* %idx, align 4
  %add6 = add nsw i32 %21, 0
  %idxprom = sext i32 %add6 to i64
  %arrayidx = getelementptr inbounds i32, i32* %20, i64 %idxprom
  store i32 %19, i32* %arrayidx, align 4
  %22 = load %struct.ichdev*, %struct.ichdev** %ichdev.addr, align 8
  %fragsize17 = getelementptr inbounds %struct.ichdev, %struct.ichdev* %22, i32 0, i32 8
  %23 = load i32, i32* %fragsize17, align 4
  %24 = load %struct.ichdev*, %struct.ichdev** %ichdev.addr, align 8
  %pos_shift = getelementptr inbounds %struct.ichdev, %struct.ichdev* %24, i32 0, i32 10
  %25 = load i32, i32* %pos_shift, align 4
  %shr8 = lshr i32 %23, %25
  %or = or i32 -2147483648, %shr8
  %26 = load i32*, i32** %bdbar, align 8
  %27 = load i32, i32* %idx, align 4
  %add9 = add nsw i32 %27, 1
  %idxprom10 = sext i32 %add9 to i64
  %arrayidx11 = getelementptr inbounds i32, i32* %26, i64 %idxprom10
  store i32 %or, i32* %arrayidx11, align 4
  %28 = load %struct.ichdev*, %struct.ichdev** %ichdev.addr, align 8
  %physbuf12 = getelementptr inbounds %struct.ichdev, %struct.ichdev* %28, i32 0, i32 5
  %29 = load i32, i32* %physbuf12, align 8
  %30 = load %struct.ichdev*, %struct.ichdev** %ichdev.addr, align 8
  %size13 = getelementptr inbounds %struct.ichdev, %struct.ichdev* %30, i32 0, i32 6
  %31 = load i32, i32* %size13, align 4
  %shr14 = lshr i32 %31, 1
  %add15 = add i32 %29, %shr14
  %32 = load i32*, i32** %bdbar, align 8
  %33 = load i32, i32* %idx, align 4
  %add16 = add nsw i32 %33, 2
  %idxprom17 = sext i32 %add16 to i64
  %arrayidx18 = getelementptr inbounds i32, i32* %32, i64 %idxprom17
  store i32 %add15, i32* %arrayidx18, align 4
  %34 = load %struct.ichdev*, %struct.ichdev** %ichdev.addr, align 8
  %fragsize119 = getelementptr inbounds %struct.ichdev, %struct.ichdev* %34, i32 0, i32 8
  %35 = load i32, i32* %fragsize119, align 4
  %36 = load %struct.ichdev*, %struct.ichdev** %ichdev.addr, align 8
  %pos_shift20 = getelementptr inbounds %struct.ichdev, %struct.ichdev* %36, i32 0, i32 10
  %37 = load i32, i32* %pos_shift20, align 4
  %shr21 = lshr i32 %35, %37
  %or22 = or i32 -2147483648, %shr21
  %38 = load i32*, i32** %bdbar, align 8
  %39 = load i32, i32* %idx, align 4
  %add23 = add nsw i32 %39, 3
  %idxprom24 = sext i32 %add23 to i64
  %arrayidx25 = getelementptr inbounds i32, i32* %38, i64 %idxprom24
  store i32 %or22, i32* %arrayidx25, align 4
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %40 = load i32, i32* %idx, align 4
  %add26 = add nsw i32 %40, 4
  store i32 %add26, i32* %idx, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %41 = load %struct.ichdev*, %struct.ichdev** %ichdev.addr, align 8
  %frags = getelementptr inbounds %struct.ichdev, %struct.ichdev* %41, i32 0, i32 12
  store i32 2, i32* %frags, align 4
  br label %if.end

if.else:                                          ; preds = %entry
  %42 = load %struct.ichdev*, %struct.ichdev** %ichdev.addr, align 8
  %ack27 = getelementptr inbounds %struct.ichdev, %struct.ichdev* %42, i32 0, i32 16
  store i32 1, i32* %ack27, align 4
  %43 = load %struct.ichdev*, %struct.ichdev** %ichdev.addr, align 8
  %ack_reload28 = getelementptr inbounds %struct.ichdev, %struct.ichdev* %43, i32 0, i32 17
  store i32 1, i32* %ack_reload28, align 8
  %44 = load %struct.ichdev*, %struct.ichdev** %ichdev.addr, align 8
  %fragsize29 = getelementptr inbounds %struct.ichdev, %struct.ichdev* %44, i32 0, i32 7
  %45 = load i32, i32* %fragsize29, align 8
  %46 = load %struct.ichdev*, %struct.ichdev** %ichdev.addr, align 8
  %fragsize130 = getelementptr inbounds %struct.ichdev, %struct.ichdev* %46, i32 0, i32 8
  store i32 %45, i32* %fragsize130, align 4
  store i32 0, i32* %idx, align 4
  br label %for.cond31

for.cond31:                                       ; preds = %for.inc50, %if.else
  %47 = load i32, i32* %idx, align 4
  %cmp32 = icmp slt i32 %47, 64
  br i1 %cmp32, label %for.body34, label %for.end52

for.body34:                                       ; preds = %for.cond31
  %48 = load %struct.ichdev*, %struct.ichdev** %ichdev.addr, align 8
  %physbuf35 = getelementptr inbounds %struct.ichdev, %struct.ichdev* %48, i32 0, i32 5
  %49 = load i32, i32* %physbuf35, align 8
  %50 = load i32, i32* %idx, align 4
  %shr36 = ashr i32 %50, 1
  %51 = load %struct.ichdev*, %struct.ichdev** %ichdev.addr, align 8
  %fragsize37 = getelementptr inbounds %struct.ichdev, %struct.ichdev* %51, i32 0, i32 7
  %52 = load i32, i32* %fragsize37, align 8
  %mul = mul i32 %shr36, %52
  %53 = load %struct.ichdev*, %struct.ichdev** %ichdev.addr, align 8
  %size38 = getelementptr inbounds %struct.ichdev, %struct.ichdev* %53, i32 0, i32 6
  %54 = load i32, i32* %size38, align 4
  %rem = urem i32 %mul, %54
  %add39 = add i32 %49, %rem
  %55 = load i32*, i32** %bdbar, align 8
  %56 = load i32, i32* %idx, align 4
  %add40 = add nsw i32 %56, 0
  %idxprom41 = sext i32 %add40 to i64
  %arrayidx42 = getelementptr inbounds i32, i32* %55, i64 %idxprom41
  store i32 %add39, i32* %arrayidx42, align 4
  %57 = load %struct.ichdev*, %struct.ichdev** %ichdev.addr, align 8
  %fragsize43 = getelementptr inbounds %struct.ichdev, %struct.ichdev* %57, i32 0, i32 7
  %58 = load i32, i32* %fragsize43, align 8
  %59 = load %struct.ichdev*, %struct.ichdev** %ichdev.addr, align 8
  %pos_shift44 = getelementptr inbounds %struct.ichdev, %struct.ichdev* %59, i32 0, i32 10
  %60 = load i32, i32* %pos_shift44, align 4
  %shr45 = lshr i32 %58, %60
  %or46 = or i32 -2147483648, %shr45
  %61 = load i32*, i32** %bdbar, align 8
  %62 = load i32, i32* %idx, align 4
  %add47 = add nsw i32 %62, 1
  %idxprom48 = sext i32 %add47 to i64
  %arrayidx49 = getelementptr inbounds i32, i32* %61, i64 %idxprom48
  store i32 %or46, i32* %arrayidx49, align 4
  br label %for.inc50

for.inc50:                                        ; preds = %for.body34
  %63 = load i32, i32* %idx, align 4
  %add51 = add nsw i32 %63, 2
  store i32 %add51, i32* %idx, align 4
  br label %for.cond31

for.end52:                                        ; preds = %for.cond31
  %64 = load %struct.ichdev*, %struct.ichdev** %ichdev.addr, align 8
  %size53 = getelementptr inbounds %struct.ichdev, %struct.ichdev* %64, i32 0, i32 6
  %65 = load i32, i32* %size53, align 4
  %66 = load %struct.ichdev*, %struct.ichdev** %ichdev.addr, align 8
  %fragsize54 = getelementptr inbounds %struct.ichdev, %struct.ichdev* %66, i32 0, i32 7
  %67 = load i32, i32* %fragsize54, align 8
  %div = udiv i32 %65, %67
  %68 = load %struct.ichdev*, %struct.ichdev** %ichdev.addr, align 8
  %frags55 = getelementptr inbounds %struct.ichdev, %struct.ichdev* %68, i32 0, i32 12
  store i32 %div, i32* %frags55, align 4
  br label %if.end

if.end:                                           ; preds = %for.end52, %for.end
  %69 = load %struct.intel8x0*, %struct.intel8x0** %chip.addr, align 8
  %70 = load i64, i64* %port, align 8
  %add56 = add i64 %70, 5
  %conv57 = trunc i64 %add56 to i32
  %71 = load %struct.ichdev*, %struct.ichdev** %ichdev.addr, align 8
  %lvi = getelementptr inbounds %struct.ichdev, %struct.ichdev* %71, i32 0, i32 13
  store i32 31, i32* %lvi, align 8
  call void @iputbyte(%struct.intel8x0* %69, i32 %conv57, i8 zeroext 31)
  %72 = load %struct.ichdev*, %struct.ichdev** %ichdev.addr, align 8
  %civ = getelementptr inbounds %struct.ichdev, %struct.ichdev* %72, i32 0, i32 15
  store i32 0, i32* %civ, align 8
  %73 = load %struct.intel8x0*, %struct.intel8x0** %chip.addr, align 8
  %74 = load i64, i64* %port, align 8
  %add58 = add i64 %74, 4
  %conv59 = trunc i64 %add58 to i32
  call void @iputbyte(%struct.intel8x0* %73, i32 %conv59, i8 zeroext 0)
  %75 = load %struct.ichdev*, %struct.ichdev** %ichdev.addr, align 8
  %frags60 = getelementptr inbounds %struct.ichdev, %struct.ichdev* %75, i32 0, i32 12
  %76 = load i32, i32* %frags60, align 4
  %rem61 = srem i32 31, %76
  %77 = load %struct.ichdev*, %struct.ichdev** %ichdev.addr, align 8
  %lvi_frag = getelementptr inbounds %struct.ichdev, %struct.ichdev* %77, i32 0, i32 14
  store i32 %rem61, i32* %lvi_frag, align 4
  %78 = load %struct.ichdev*, %struct.ichdev** %ichdev.addr, align 8
  %position = getelementptr inbounds %struct.ichdev, %struct.ichdev* %78, i32 0, i32 9
  store i32 0, i32* %position, align 8
  %79 = load %struct.intel8x0*, %struct.intel8x0** %chip.addr, align 8
  %80 = load i64, i64* %port, align 8
  %81 = load %struct.ichdev*, %struct.ichdev** %ichdev.addr, align 8
  %roff_sr = getelementptr inbounds %struct.ichdev, %struct.ichdev* %81, i32 0, i32 19
  %82 = load i32, i32* %roff_sr, align 8
  %conv62 = zext i32 %82 to i64
  %add63 = add i64 %80, %conv62
  %conv64 = trunc i64 %add63 to i32
  call void @iputbyte(%struct.intel8x0* %79, i32 %conv64, i8 zeroext 28)
  ret void
}

; Function Attrs: noinline nounwind optnone uwtable
define internal i64 @frames_to_bytes(%struct.snd_pcm_runtime* %runtime, i64 %size) #0 {
entry:
  %runtime.addr = alloca %struct.snd_pcm_runtime*, align 8
  %size.addr = alloca i64, align 8
  store %struct.snd_pcm_runtime* %runtime, %struct.snd_pcm_runtime** %runtime.addr, align 8
  store i64 %size, i64* %size.addr, align 8
  %0 = load i64, i64* %size.addr, align 8
  %1 = load %struct.snd_pcm_runtime*, %struct.snd_pcm_runtime** %runtime.addr, align 8
  %frame_bits = getelementptr inbounds %struct.snd_pcm_runtime, %struct.snd_pcm_runtime* %1, i32 0, i32 21
  %2 = load i32, i32* %frame_bits, align 8
  %conv = zext i32 %2 to i64
  %mul = mul nsw i64 %0, %conv
  %div = sdiv i64 %mul, 8
  ret i64 %div
}

declare void @msleep(i32) #1

declare void @_raw_spin_lock_irq(%struct.raw_spinlock*) #1 section ".spinlock.text"

; Function Attrs: noinline nounwind optnone uwtable
define internal void @__raw_spin_unlock_irq(%struct.raw_spinlock* %lock) #0 {
entry:
  %lock.addr = alloca %struct.raw_spinlock*, align 8
  store %struct.raw_spinlock* %lock, %struct.raw_spinlock** %lock.addr, align 8
  br label %do.body

do.body:                                          ; preds = %entry
  br label %do.end

do.end:                                           ; preds = %do.body
  %0 = load %struct.raw_spinlock*, %struct.raw_spinlock** %lock.addr, align 8
  call void @do_raw_spin_unlock(%struct.raw_spinlock* %0)
  br label %do.body1

do.body1:                                         ; preds = %do.end
  call void @arch_local_irq_enable()
  br label %do.end2

do.end2:                                          ; preds = %do.body1
  call void asm sideeffect "", "~{memory},~{dirflag},~{fpsr},~{flags}"() #3, !srcloc !2
  ret void
}

; Function Attrs: noinline nounwind optnone uwtable
define internal void @do_raw_spin_unlock(%struct.raw_spinlock* %lock) #0 {
entry:
  %lock.addr = alloca %struct.raw_spinlock*, align 8
  store %struct.raw_spinlock* %lock, %struct.raw_spinlock** %lock.addr, align 8
  %0 = load %struct.raw_spinlock*, %struct.raw_spinlock** %lock.addr, align 8
  %raw_lock = getelementptr inbounds %struct.raw_spinlock, %struct.raw_spinlock* %0, i32 0, i32 0
  call void @queued_spin_unlock(%struct.qspinlock* %raw_lock)
  ret void
}

; Function Attrs: noinline nounwind optnone uwtable
define internal void @arch_local_irq_enable() #0 {
entry:
  call void @native_irq_enable()
  ret void
}

; Function Attrs: noinline nounwind optnone uwtable
define internal void @queued_spin_unlock(%struct.qspinlock* %lock) #0 {
entry:
  %lock.addr = alloca %struct.qspinlock*, align 8
  store %struct.qspinlock* %lock, %struct.qspinlock** %lock.addr, align 8
  %0 = load %struct.qspinlock*, %struct.qspinlock** %lock.addr, align 8
  call void @native_queued_spin_unlock(%struct.qspinlock* %0)
  ret void
}

; Function Attrs: noinline nounwind optnone uwtable
define internal void @native_queued_spin_unlock(%struct.qspinlock* %lock) #0 {
entry:
  %p.addr.i = alloca i8*, align 8
  %res.addr.i = alloca i8*, align 8
  %size.addr.i = alloca i32, align 4
  %lock.addr = alloca %struct.qspinlock*, align 8
  %__cond = alloca i8, align 1
  %__u = alloca %union.anon.70, align 1
  %tmp = alloca i8, align 1
  store %struct.qspinlock* %lock, %struct.qspinlock** %lock.addr, align 8
  br label %do.body

do.body:                                          ; preds = %entry
  br label %do.body1

do.body1:                                         ; preds = %do.body
  store i8 0, i8* %__cond, align 1
  %0 = load i8, i8* %__cond, align 1
  %tobool = trunc i8 %0 to i1
  br i1 %tobool, label %if.then, label %if.end

if.then:                                          ; preds = %do.body1
  call void @__compiletime_assert_17()
  br label %if.end

if.end:                                           ; preds = %if.then, %do.body1
  br label %do.body2

do.body2:                                         ; preds = %if.end
  %1 = load i8, i8* %__cond, align 1
  %tobool3 = trunc i8 %1 to i1
  %conv = zext i1 %tobool3 to i32
  %mul = mul nsw i32 2, %conv
  %sub = sub nsw i32 1, %mul
  %2 = zext i32 %sub to i64
  br label %do.end

do.end:                                           ; preds = %do.body2
  br label %do.end4

do.end4:                                          ; preds = %do.end
  call void asm sideeffect "", "~{memory},~{dirflag},~{fpsr},~{flags}"() #3, !srcloc !3
  %3 = bitcast %union.anon.70* %__u to i8*
  call void @llvm.memset.p0i8.i64(i8* %3, i8 0, i64 1, i32 1, i1 false)
  %4 = load %struct.qspinlock*, %struct.qspinlock** %lock.addr, align 8
  %5 = bitcast %struct.qspinlock* %4 to i8*
  %__c = bitcast %union.anon.70* %__u to [1 x i8]*
  %arraydecay = getelementptr inbounds [1 x i8], [1 x i8]* %__c, i32 0, i32 0
  store i8* %5, i8** %p.addr.i, align 8
  store i8* %arraydecay, i8** %res.addr.i, align 8
  store i32 1, i32* %size.addr.i, align 4
  %6 = load i32, i32* %size.addr.i, align 4
  br label %NodeBlock9

NodeBlock9:                                       ; preds = %do.end4
  %Pivot10 = icmp slt i32 %6, 4
  br i1 %Pivot10, label %NodeBlock, label %NodeBlock7

NodeBlock7:                                       ; preds = %NodeBlock9
  %Pivot8 = icmp slt i32 %6, 8
  br i1 %Pivot8, label %LeafBlock3, label %LeafBlock5

LeafBlock5:                                       ; preds = %NodeBlock7
  %SwitchLeaf6 = icmp eq i32 %6, 8
  br i1 %SwitchLeaf6, label %sw.bb3.i, label %NewDefault

LeafBlock3:                                       ; preds = %NodeBlock7
  %SwitchLeaf4 = icmp eq i32 %6, 4
  br i1 %SwitchLeaf4, label %sw.bb2.i, label %NewDefault

NodeBlock:                                        ; preds = %NodeBlock9
  %Pivot = icmp slt i32 %6, 2
  br i1 %Pivot, label %LeafBlock, label %LeafBlock1

LeafBlock1:                                       ; preds = %NodeBlock
  %SwitchLeaf2 = icmp eq i32 %6, 2
  br i1 %SwitchLeaf2, label %sw.bb1.i, label %NewDefault

LeafBlock:                                        ; preds = %NodeBlock
  %SwitchLeaf = icmp eq i32 %6, 1
  br i1 %SwitchLeaf, label %sw.bb.i, label %NewDefault

sw.bb.i:                                          ; preds = %LeafBlock
  %7 = load i8*, i8** %res.addr.i, align 8
  %8 = load i8, i8* %7, align 1
  %9 = load i8*, i8** %p.addr.i, align 8
  store volatile i8 %8, i8* %9, align 1
  br label %__write_once_size.exit

sw.bb1.i:                                         ; preds = %LeafBlock1
  %10 = load i8*, i8** %res.addr.i, align 8
  %11 = bitcast i8* %10 to i16*
  %12 = load i16, i16* %11, align 2
  %13 = load i8*, i8** %p.addr.i, align 8
  %14 = bitcast i8* %13 to i16*
  store volatile i16 %12, i16* %14, align 2
  br label %__write_once_size.exit

sw.bb2.i:                                         ; preds = %LeafBlock3
  %15 = load i8*, i8** %res.addr.i, align 8
  %16 = bitcast i8* %15 to i32*
  %17 = load i32, i32* %16, align 4
  %18 = load i8*, i8** %p.addr.i, align 8
  %19 = bitcast i8* %18 to i32*
  store volatile i32 %17, i32* %19, align 4
  br label %__write_once_size.exit

sw.bb3.i:                                         ; preds = %LeafBlock5
  %20 = load i8*, i8** %res.addr.i, align 8
  %21 = bitcast i8* %20 to i64*
  %22 = load i64, i64* %21, align 8
  %23 = load i8*, i8** %p.addr.i, align 8
  %24 = bitcast i8* %23 to i64*
  store volatile i64 %22, i64* %24, align 8
  br label %__write_once_size.exit

NewDefault:                                       ; preds = %LeafBlock5, %LeafBlock3, %LeafBlock1, %LeafBlock
  br label %sw.default.i

sw.default.i:                                     ; preds = %NewDefault
  call void asm sideeffect "", "~{memory},~{dirflag},~{fpsr},~{flags}"() #3, !srcloc !4
  %25 = load i8*, i8** %p.addr.i, align 8
  %26 = load i8*, i8** %res.addr.i, align 8
  %27 = load i32, i32* %size.addr.i, align 4
  %conv.i = sext i32 %27 to i64
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %25, i8* %26, i64 %conv.i, i32 1, i1 false) #3
  call void asm sideeffect "", "~{memory},~{dirflag},~{fpsr},~{flags}"() #3, !srcloc !5
  br label %__write_once_size.exit

__write_once_size.exit:                           ; preds = %sw.default.i, %sw.bb3.i, %sw.bb2.i, %sw.bb1.i, %sw.bb.i
  %__val = bitcast %union.anon.70* %__u to i8*
  %28 = load i8, i8* %__val, align 1
  store i8 %28, i8* %tmp, align 1
  %29 = load i8, i8* %tmp, align 1
  br label %do.end5

do.end5:                                          ; preds = %__write_once_size.exit
  ret void
}

declare void @__compiletime_assert_17() #1

; Function Attrs: noinline nounwind optnone uwtable
define internal void @native_irq_enable() #0 {
entry:
  call void asm sideeffect "sti", "~{memory},~{dirflag},~{fpsr},~{flags}"() #3, !srcloc !6
  ret void
}

; Function Attrs: noinline nounwind optnone uwtable
define internal i64 @bytes_to_frames(%struct.snd_pcm_runtime* %runtime, i64 %size) #0 {
entry:
  %runtime.addr = alloca %struct.snd_pcm_runtime*, align 8
  %size.addr = alloca i64, align 8
  store %struct.snd_pcm_runtime* %runtime, %struct.snd_pcm_runtime** %runtime.addr, align 8
  store i64 %size, i64* %size.addr, align 8
  %0 = load i64, i64* %size.addr, align 8
  %mul = mul nsw i64 %0, 8
  %1 = load %struct.snd_pcm_runtime*, %struct.snd_pcm_runtime** %runtime.addr, align 8
  %frame_bits = getelementptr inbounds %struct.snd_pcm_runtime, %struct.snd_pcm_runtime* %1, i32 0, i32 21
  %2 = load i32, i32* %frame_bits, align 8
  %conv = zext i32 %2 to i64
  %div = sdiv i64 %mul, %conv
  ret i64 %div
}

declare void @_raw_spin_lock(%struct.raw_spinlock*) #1 section ".spinlock.text"

; Function Attrs: noinline nounwind optnone uwtable
define internal void @__raw_spin_unlock(%struct.raw_spinlock* %lock) #0 {
entry:
  %lock.addr = alloca %struct.raw_spinlock*, align 8
  store %struct.raw_spinlock* %lock, %struct.raw_spinlock** %lock.addr, align 8
  br label %do.body

do.body:                                          ; preds = %entry
  br label %do.end

do.end:                                           ; preds = %do.body
  %0 = load %struct.raw_spinlock*, %struct.raw_spinlock** %lock.addr, align 8
  call void @do_raw_spin_unlock(%struct.raw_spinlock* %0)
  call void asm sideeffect "", "~{memory},~{dirflag},~{fpsr},~{flags}"() #3, !srcloc !7
  ret void
}

; Function Attrs: noinline nounwind optnone uwtable
define internal i32 @snd_intel8x0_capture_open(%struct.snd_pcm_substream* %substream) #0 {
entry:
  %substream.addr = alloca %struct.snd_pcm_substream*, align 8
  %chip = alloca %struct.intel8x0*, align 8
  store %struct.snd_pcm_substream* %substream, %struct.snd_pcm_substream** %substream.addr, align 8
  %0 = load %struct.snd_pcm_substream*, %struct.snd_pcm_substream** %substream.addr, align 8
  %private_data = getelementptr inbounds %struct.snd_pcm_substream, %struct.snd_pcm_substream* %0, i32 0, i32 2
  %1 = load i8*, i8** %private_data, align 8
  %2 = bitcast i8* %1 to %struct.intel8x0*
  store %struct.intel8x0* %2, %struct.intel8x0** %chip, align 8
  %3 = load %struct.snd_pcm_substream*, %struct.snd_pcm_substream** %substream.addr, align 8
  %4 = load %struct.intel8x0*, %struct.intel8x0** %chip, align 8
  %ichd = getelementptr inbounds %struct.intel8x0, %struct.intel8x0* %4, i32 0, i32 8
  %arrayidx = getelementptr inbounds [6 x %struct.ichdev], [6 x %struct.ichdev]* %ichd, i64 0, i64 0
  %call = call i32 @snd_intel8x0_pcm_open(%struct.snd_pcm_substream* %3, %struct.ichdev* %arrayidx)
  ret i32 %call
}

; Function Attrs: noinline nounwind optnone uwtable
define internal i32 @snd_intel8x0_capture_close(%struct.snd_pcm_substream* %substream) #0 {
entry:
  %substream.addr = alloca %struct.snd_pcm_substream*, align 8
  %chip = alloca %struct.intel8x0*, align 8
  store %struct.snd_pcm_substream* %substream, %struct.snd_pcm_substream** %substream.addr, align 8
  %0 = load %struct.snd_pcm_substream*, %struct.snd_pcm_substream** %substream.addr, align 8
  %private_data = getelementptr inbounds %struct.snd_pcm_substream, %struct.snd_pcm_substream* %0, i32 0, i32 2
  %1 = load i8*, i8** %private_data, align 8
  %2 = bitcast i8* %1 to %struct.intel8x0*
  store %struct.intel8x0* %2, %struct.intel8x0** %chip, align 8
  %3 = load %struct.intel8x0*, %struct.intel8x0** %chip, align 8
  %ichd = getelementptr inbounds %struct.intel8x0, %struct.intel8x0* %3, i32 0, i32 8
  %arrayidx = getelementptr inbounds [6 x %struct.ichdev], [6 x %struct.ichdev]* %ichd, i64 0, i64 0
  %substream1 = getelementptr inbounds %struct.ichdev, %struct.ichdev* %arrayidx, i32 0, i32 4
  store %struct.snd_pcm_substream* null, %struct.snd_pcm_substream** %substream1, align 8
  ret i32 0
}

; Function Attrs: noinline nounwind optnone uwtable
define internal i32 @snd_intel8x0_mic_open(%struct.snd_pcm_substream* %substream) #0 {
entry:
  %substream.addr = alloca %struct.snd_pcm_substream*, align 8
  %chip = alloca %struct.intel8x0*, align 8
  store %struct.snd_pcm_substream* %substream, %struct.snd_pcm_substream** %substream.addr, align 8
  %0 = load %struct.snd_pcm_substream*, %struct.snd_pcm_substream** %substream.addr, align 8
  %private_data = getelementptr inbounds %struct.snd_pcm_substream, %struct.snd_pcm_substream* %0, i32 0, i32 2
  %1 = load i8*, i8** %private_data, align 8
  %2 = bitcast i8* %1 to %struct.intel8x0*
  store %struct.intel8x0* %2, %struct.intel8x0** %chip, align 8
  %3 = load %struct.snd_pcm_substream*, %struct.snd_pcm_substream** %substream.addr, align 8
  %4 = load %struct.intel8x0*, %struct.intel8x0** %chip, align 8
  %ichd = getelementptr inbounds %struct.intel8x0, %struct.intel8x0* %4, i32 0, i32 8
  %arrayidx = getelementptr inbounds [6 x %struct.ichdev], [6 x %struct.ichdev]* %ichd, i64 0, i64 2
  %call = call i32 @snd_intel8x0_pcm_open(%struct.snd_pcm_substream* %3, %struct.ichdev* %arrayidx)
  ret i32 %call
}

; Function Attrs: noinline nounwind optnone uwtable
define internal i32 @snd_intel8x0_mic_close(%struct.snd_pcm_substream* %substream) #0 {
entry:
  %substream.addr = alloca %struct.snd_pcm_substream*, align 8
  %chip = alloca %struct.intel8x0*, align 8
  store %struct.snd_pcm_substream* %substream, %struct.snd_pcm_substream** %substream.addr, align 8
  %0 = load %struct.snd_pcm_substream*, %struct.snd_pcm_substream** %substream.addr, align 8
  %private_data = getelementptr inbounds %struct.snd_pcm_substream, %struct.snd_pcm_substream* %0, i32 0, i32 2
  %1 = load i8*, i8** %private_data, align 8
  %2 = bitcast i8* %1 to %struct.intel8x0*
  store %struct.intel8x0* %2, %struct.intel8x0** %chip, align 8
  %3 = load %struct.intel8x0*, %struct.intel8x0** %chip, align 8
  %ichd = getelementptr inbounds %struct.intel8x0, %struct.intel8x0* %3, i32 0, i32 8
  %arrayidx = getelementptr inbounds [6 x %struct.ichdev], [6 x %struct.ichdev]* %ichd, i64 0, i64 2
  %substream1 = getelementptr inbounds %struct.ichdev, %struct.ichdev* %arrayidx, i32 0, i32 4
  store %struct.snd_pcm_substream* null, %struct.snd_pcm_substream** %substream1, align 8
  ret i32 0
}

; Function Attrs: noinline nounwind optnone uwtable
define internal i32 @snd_intel8x0_mic2_open(%struct.snd_pcm_substream* %substream) #0 {
entry:
  %substream.addr = alloca %struct.snd_pcm_substream*, align 8
  %chip = alloca %struct.intel8x0*, align 8
  store %struct.snd_pcm_substream* %substream, %struct.snd_pcm_substream** %substream.addr, align 8
  %0 = load %struct.snd_pcm_substream*, %struct.snd_pcm_substream** %substream.addr, align 8
  %private_data = getelementptr inbounds %struct.snd_pcm_substream, %struct.snd_pcm_substream* %0, i32 0, i32 2
  %1 = load i8*, i8** %private_data, align 8
  %2 = bitcast i8* %1 to %struct.intel8x0*
  store %struct.intel8x0* %2, %struct.intel8x0** %chip, align 8
  %3 = load %struct.snd_pcm_substream*, %struct.snd_pcm_substream** %substream.addr, align 8
  %4 = load %struct.intel8x0*, %struct.intel8x0** %chip, align 8
  %ichd = getelementptr inbounds %struct.intel8x0, %struct.intel8x0* %4, i32 0, i32 8
  %arrayidx = getelementptr inbounds [6 x %struct.ichdev], [6 x %struct.ichdev]* %ichd, i64 0, i64 3
  %call = call i32 @snd_intel8x0_pcm_open(%struct.snd_pcm_substream* %3, %struct.ichdev* %arrayidx)
  ret i32 %call
}

; Function Attrs: noinline nounwind optnone uwtable
define internal i32 @snd_intel8x0_mic2_close(%struct.snd_pcm_substream* %substream) #0 {
entry:
  %substream.addr = alloca %struct.snd_pcm_substream*, align 8
  %chip = alloca %struct.intel8x0*, align 8
  store %struct.snd_pcm_substream* %substream, %struct.snd_pcm_substream** %substream.addr, align 8
  %0 = load %struct.snd_pcm_substream*, %struct.snd_pcm_substream** %substream.addr, align 8
  %private_data = getelementptr inbounds %struct.snd_pcm_substream, %struct.snd_pcm_substream* %0, i32 0, i32 2
  %1 = load i8*, i8** %private_data, align 8
  %2 = bitcast i8* %1 to %struct.intel8x0*
  store %struct.intel8x0* %2, %struct.intel8x0** %chip, align 8
  %3 = load %struct.intel8x0*, %struct.intel8x0** %chip, align 8
  %ichd = getelementptr inbounds %struct.intel8x0, %struct.intel8x0* %3, i32 0, i32 8
  %arrayidx = getelementptr inbounds [6 x %struct.ichdev], [6 x %struct.ichdev]* %ichd, i64 0, i64 3
  %substream1 = getelementptr inbounds %struct.ichdev, %struct.ichdev* %arrayidx, i32 0, i32 4
  store %struct.snd_pcm_substream* null, %struct.snd_pcm_substream** %substream1, align 8
  ret i32 0
}

; Function Attrs: noinline nounwind optnone uwtable
define internal i32 @snd_intel8x0_capture2_open(%struct.snd_pcm_substream* %substream) #0 {
entry:
  %substream.addr = alloca %struct.snd_pcm_substream*, align 8
  %chip = alloca %struct.intel8x0*, align 8
  store %struct.snd_pcm_substream* %substream, %struct.snd_pcm_substream** %substream.addr, align 8
  %0 = load %struct.snd_pcm_substream*, %struct.snd_pcm_substream** %substream.addr, align 8
  %private_data = getelementptr inbounds %struct.snd_pcm_substream, %struct.snd_pcm_substream* %0, i32 0, i32 2
  %1 = load i8*, i8** %private_data, align 8
  %2 = bitcast i8* %1 to %struct.intel8x0*
  store %struct.intel8x0* %2, %struct.intel8x0** %chip, align 8
  %3 = load %struct.snd_pcm_substream*, %struct.snd_pcm_substream** %substream.addr, align 8
  %4 = load %struct.intel8x0*, %struct.intel8x0** %chip, align 8
  %ichd = getelementptr inbounds %struct.intel8x0, %struct.intel8x0* %4, i32 0, i32 8
  %arrayidx = getelementptr inbounds [6 x %struct.ichdev], [6 x %struct.ichdev]* %ichd, i64 0, i64 4
  %call = call i32 @snd_intel8x0_pcm_open(%struct.snd_pcm_substream* %3, %struct.ichdev* %arrayidx)
  ret i32 %call
}

; Function Attrs: noinline nounwind optnone uwtable
define internal i32 @snd_intel8x0_capture2_close(%struct.snd_pcm_substream* %substream) #0 {
entry:
  %substream.addr = alloca %struct.snd_pcm_substream*, align 8
  %chip = alloca %struct.intel8x0*, align 8
  store %struct.snd_pcm_substream* %substream, %struct.snd_pcm_substream** %substream.addr, align 8
  %0 = load %struct.snd_pcm_substream*, %struct.snd_pcm_substream** %substream.addr, align 8
  %private_data = getelementptr inbounds %struct.snd_pcm_substream, %struct.snd_pcm_substream* %0, i32 0, i32 2
  %1 = load i8*, i8** %private_data, align 8
  %2 = bitcast i8* %1 to %struct.intel8x0*
  store %struct.intel8x0* %2, %struct.intel8x0** %chip, align 8
  %3 = load %struct.intel8x0*, %struct.intel8x0** %chip, align 8
  %ichd = getelementptr inbounds %struct.intel8x0, %struct.intel8x0* %3, i32 0, i32 8
  %arrayidx = getelementptr inbounds [6 x %struct.ichdev], [6 x %struct.ichdev]* %ichd, i64 0, i64 4
  %substream1 = getelementptr inbounds %struct.ichdev, %struct.ichdev* %arrayidx, i32 0, i32 4
  store %struct.snd_pcm_substream* null, %struct.snd_pcm_substream** %substream1, align 8
  ret i32 0
}

; Function Attrs: noinline nounwind optnone uwtable
define internal i32 @snd_intel8x0_spdif_open(%struct.snd_pcm_substream* %substream) #0 {
entry:
  %substream.addr = alloca %struct.snd_pcm_substream*, align 8
  %chip = alloca %struct.intel8x0*, align 8
  %idx = alloca i32, align 4
  store %struct.snd_pcm_substream* %substream, %struct.snd_pcm_substream** %substream.addr, align 8
  %0 = load %struct.snd_pcm_substream*, %struct.snd_pcm_substream** %substream.addr, align 8
  %private_data = getelementptr inbounds %struct.snd_pcm_substream, %struct.snd_pcm_substream* %0, i32 0, i32 2
  %1 = load i8*, i8** %private_data, align 8
  %2 = bitcast i8* %1 to %struct.intel8x0*
  store %struct.intel8x0* %2, %struct.intel8x0** %chip, align 8
  %3 = load %struct.intel8x0*, %struct.intel8x0** %chip, align 8
  %device_type = getelementptr inbounds %struct.intel8x0, %struct.intel8x0* %3, i32 0, i32 0
  %4 = load i32, i32* %device_type, align 8
  %cmp = icmp eq i32 %4, 4
  %5 = zext i1 %cmp to i64
  %cond = select i1 %cmp, i32 3, i32 5
  store i32 %cond, i32* %idx, align 4
  %6 = load %struct.snd_pcm_substream*, %struct.snd_pcm_substream** %substream.addr, align 8
  %7 = load %struct.intel8x0*, %struct.intel8x0** %chip, align 8
  %ichd = getelementptr inbounds %struct.intel8x0, %struct.intel8x0* %7, i32 0, i32 8
  %8 = load i32, i32* %idx, align 4
  %idxprom = sext i32 %8 to i64
  %arrayidx = getelementptr inbounds [6 x %struct.ichdev], [6 x %struct.ichdev]* %ichd, i64 0, i64 %idxprom
  %call = call i32 @snd_intel8x0_pcm_open(%struct.snd_pcm_substream* %6, %struct.ichdev* %arrayidx)
  ret i32 %call
}

; Function Attrs: noinline nounwind optnone uwtable
define internal i32 @snd_intel8x0_spdif_close(%struct.snd_pcm_substream* %substream) #0 {
entry:
  %substream.addr = alloca %struct.snd_pcm_substream*, align 8
  %chip = alloca %struct.intel8x0*, align 8
  %idx = alloca i32, align 4
  store %struct.snd_pcm_substream* %substream, %struct.snd_pcm_substream** %substream.addr, align 8
  %0 = load %struct.snd_pcm_substream*, %struct.snd_pcm_substream** %substream.addr, align 8
  %private_data = getelementptr inbounds %struct.snd_pcm_substream, %struct.snd_pcm_substream* %0, i32 0, i32 2
  %1 = load i8*, i8** %private_data, align 8
  %2 = bitcast i8* %1 to %struct.intel8x0*
  store %struct.intel8x0* %2, %struct.intel8x0** %chip, align 8
  %3 = load %struct.intel8x0*, %struct.intel8x0** %chip, align 8
  %device_type = getelementptr inbounds %struct.intel8x0, %struct.intel8x0* %3, i32 0, i32 0
  %4 = load i32, i32* %device_type, align 8
  %cmp = icmp eq i32 %4, 4
  %5 = zext i1 %cmp to i64
  %cond = select i1 %cmp, i32 3, i32 5
  store i32 %cond, i32* %idx, align 4
  %6 = load %struct.intel8x0*, %struct.intel8x0** %chip, align 8
  %ichd = getelementptr inbounds %struct.intel8x0, %struct.intel8x0* %6, i32 0, i32 8
  %7 = load i32, i32* %idx, align 4
  %idxprom = sext i32 %7 to i64
  %arrayidx = getelementptr inbounds [6 x %struct.ichdev], [6 x %struct.ichdev]* %ichd, i64 0, i64 %idxprom
  %substream1 = getelementptr inbounds %struct.ichdev, %struct.ichdev* %arrayidx, i32 0, i32 4
  store %struct.snd_pcm_substream* null, %struct.snd_pcm_substream** %substream1, align 8
  ret i32 0
}

; Function Attrs: noinline nounwind optnone uwtable
define internal i32 @snd_intel8x0_ali_trigger(%struct.snd_pcm_substream* %substream, i32 %cmd) #0 {
entry:
  %retval = alloca i32, align 4
  %substream.addr = alloca %struct.snd_pcm_substream*, align 8
  %cmd.addr = alloca i32, align 4
  %chip = alloca %struct.intel8x0*, align 8
  %ichdev = alloca %struct.ichdev*, align 8
  %port = alloca i64, align 8
  %val = alloca i32, align 4
  %fifo = alloca i32, align 4
  store %struct.snd_pcm_substream* %substream, %struct.snd_pcm_substream** %substream.addr, align 8
  store i32 %cmd, i32* %cmd.addr, align 4
  %0 = load %struct.snd_pcm_substream*, %struct.snd_pcm_substream** %substream.addr, align 8
  %private_data = getelementptr inbounds %struct.snd_pcm_substream, %struct.snd_pcm_substream* %0, i32 0, i32 2
  %1 = load i8*, i8** %private_data, align 8
  %2 = bitcast i8* %1 to %struct.intel8x0*
  store %struct.intel8x0* %2, %struct.intel8x0** %chip, align 8
  %3 = load %struct.snd_pcm_substream*, %struct.snd_pcm_substream** %substream.addr, align 8
  %runtime = getelementptr inbounds %struct.snd_pcm_substream, %struct.snd_pcm_substream* %3, i32 0, i32 11
  %4 = load %struct.snd_pcm_runtime*, %struct.snd_pcm_runtime** %runtime, align 8
  %private_data1 = getelementptr inbounds %struct.snd_pcm_runtime, %struct.snd_pcm_runtime* %4, i32 0, i32 43
  %5 = load i8*, i8** %private_data1, align 8
  %6 = bitcast i8* %5 to %struct.ichdev*
  store %struct.ichdev* %6, %struct.ichdev** %ichdev, align 8
  %7 = load %struct.ichdev*, %struct.ichdev** %ichdev, align 8
  %reg_offset = getelementptr inbounds %struct.ichdev, %struct.ichdev* %7, i32 0, i32 1
  %8 = load i64, i64* %reg_offset, align 8
  store i64 %8, i64* %port, align 8
  %9 = load %struct.intel8x0*, %struct.intel8x0** %chip, align 8
  %call = call i32 @igetdword(%struct.intel8x0* %9, i32 8)
  store i32 %call, i32* %val, align 4
  %10 = load i32, i32* %cmd.addr, align 4
  br label %NodeBlock11

NodeBlock11:                                      ; preds = %entry
  %Pivot12 = icmp slt i32 %10, 4
  br i1 %Pivot12, label %NodeBlock3, label %NodeBlock9

NodeBlock9:                                       ; preds = %NodeBlock11
  %Pivot10 = icmp slt i32 %10, 5
  br i1 %Pivot10, label %sw.bb2, label %NodeBlock7

NodeBlock7:                                       ; preds = %NodeBlock9
  %Pivot8 = icmp slt i32 %10, 6
  br i1 %Pivot8, label %sw.bb20, label %LeafBlock5

LeafBlock5:                                       ; preds = %NodeBlock7
  %SwitchLeaf6 = icmp eq i32 %10, 6
  br i1 %SwitchLeaf6, label %sw.bb, label %NewDefault

NodeBlock3:                                       ; preds = %NodeBlock11
  %Pivot4 = icmp slt i32 %10, 1
  br i1 %Pivot4, label %LeafBlock, label %NodeBlock

NodeBlock:                                        ; preds = %NodeBlock3
  %Pivot = icmp slt i32 %10, 3
  br i1 %Pivot, label %LeafBlock1, label %sw.bb24

LeafBlock1:                                       ; preds = %NodeBlock
  %SwitchLeaf2 = icmp eq i32 %10, 1
  br i1 %SwitchLeaf2, label %sw.bb2, label %NewDefault

LeafBlock:                                        ; preds = %NodeBlock3
  %SwitchLeaf = icmp eq i32 %10, 0
  br i1 %SwitchLeaf, label %sw.bb24, label %NewDefault

sw.bb:                                            ; preds = %LeafBlock5
  %11 = load %struct.ichdev*, %struct.ichdev** %ichdev, align 8
  %suspended = getelementptr inbounds %struct.ichdev, %struct.ichdev* %11, i32 0, i32 25
  %bf.load = load i8, i8* %suspended, align 4
  %bf.clear = and i8 %bf.load, -3
  store i8 %bf.clear, i8* %suspended, align 4
  br label %sw.bb2

sw.bb2:                                           ; preds = %NodeBlock9, %LeafBlock1, %sw.bb
  %12 = load %struct.snd_pcm_substream*, %struct.snd_pcm_substream** %substream.addr, align 8
  %stream = getelementptr inbounds %struct.snd_pcm_substream, %struct.snd_pcm_substream* %12, i32 0, i32 5
  %13 = load i32, i32* %stream, align 4
  %cmp = icmp eq i32 %13, 0
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %sw.bb2
  %14 = load %struct.intel8x0*, %struct.intel8x0** %chip, align 8
  %15 = load %struct.ichdev*, %struct.ichdev** %ichdev, align 8
  %ali_slot = getelementptr inbounds %struct.ichdev, %struct.ichdev* %15, i32 0, i32 22
  %16 = load i32, i32* %ali_slot, align 4
  %div = udiv i32 %16, 4
  %idxprom = zext i32 %div to i64
  %arrayidx = getelementptr inbounds [3 x i32], [3 x i32]* @snd_intel8x0_ali_trigger.fiforeg, i64 0, i64 %idxprom
  %17 = load i32, i32* %arrayidx, align 4
  %call3 = call i32 @igetdword(%struct.intel8x0* %14, i32 %17)
  store i32 %call3, i32* %fifo, align 4
  %18 = load %struct.ichdev*, %struct.ichdev** %ichdev, align 8
  %ali_slot4 = getelementptr inbounds %struct.ichdev, %struct.ichdev* %18, i32 0, i32 22
  %19 = load i32, i32* %ali_slot4, align 4
  %rem = urem i32 %19, 4
  %shl = shl i32 255, %rem
  %neg = xor i32 %shl, -1
  %20 = load i32, i32* %fifo, align 4
  %and = and i32 %20, %neg
  store i32 %and, i32* %fifo, align 4
  %21 = load %struct.ichdev*, %struct.ichdev** %ichdev, align 8
  %ali_slot5 = getelementptr inbounds %struct.ichdev, %struct.ichdev* %21, i32 0, i32 22
  %22 = load i32, i32* %ali_slot5, align 4
  %rem6 = urem i32 %22, 4
  %shl7 = shl i32 131, %rem6
  %23 = load i32, i32* %fifo, align 4
  %or = or i32 %23, %shl7
  store i32 %or, i32* %fifo, align 4
  %24 = load %struct.intel8x0*, %struct.intel8x0** %chip, align 8
  %25 = load %struct.ichdev*, %struct.ichdev** %ichdev, align 8
  %ali_slot8 = getelementptr inbounds %struct.ichdev, %struct.ichdev* %25, i32 0, i32 22
  %26 = load i32, i32* %ali_slot8, align 4
  %div9 = udiv i32 %26, 4
  %idxprom10 = zext i32 %div9 to i64
  %arrayidx11 = getelementptr inbounds [3 x i32], [3 x i32]* @snd_intel8x0_ali_trigger.fiforeg, i64 0, i64 %idxprom10
  %27 = load i32, i32* %arrayidx11, align 4
  %28 = load i32, i32* %fifo, align 4
  call void @iputdword(%struct.intel8x0* %24, i32 %27, i32 %28)
  br label %if.end

if.end:                                           ; preds = %if.then, %sw.bb2
  %29 = load %struct.intel8x0*, %struct.intel8x0** %chip, align 8
  %30 = load i64, i64* %port, align 8
  %add = add i64 %30, 11
  %conv = trunc i64 %add to i32
  call void @iputbyte(%struct.intel8x0* %29, i32 %conv, i8 zeroext 16)
  %31 = load %struct.ichdev*, %struct.ichdev** %ichdev, align 8
  %ali_slot12 = getelementptr inbounds %struct.ichdev, %struct.ichdev* %31, i32 0, i32 22
  %32 = load i32, i32* %ali_slot12, align 4
  %add13 = add i32 %32, 16
  %shl14 = shl i32 1, %add13
  %neg15 = xor i32 %shl14, -1
  %33 = load i32, i32* %val, align 4
  %and16 = and i32 %33, %neg15
  store i32 %and16, i32* %val, align 4
  %34 = load %struct.intel8x0*, %struct.intel8x0** %chip, align 8
  %35 = load i32, i32* %val, align 4
  %36 = load %struct.ichdev*, %struct.ichdev** %ichdev, align 8
  %ali_slot17 = getelementptr inbounds %struct.ichdev, %struct.ichdev* %36, i32 0, i32 22
  %37 = load i32, i32* %ali_slot17, align 4
  %shl18 = shl i32 1, %37
  %or19 = or i32 %35, %shl18
  call void @iputdword(%struct.intel8x0* %34, i32 8, i32 %or19)
  br label %sw.epilog

sw.bb20:                                          ; preds = %NodeBlock7
  %38 = load %struct.ichdev*, %struct.ichdev** %ichdev, align 8
  %suspended21 = getelementptr inbounds %struct.ichdev, %struct.ichdev* %38, i32 0, i32 25
  %bf.load22 = load i8, i8* %suspended21, align 4
  %bf.clear23 = and i8 %bf.load22, -3
  %bf.set = or i8 %bf.clear23, 2
  store i8 %bf.set, i8* %suspended21, align 4
  br label %sw.bb24

sw.bb24:                                          ; preds = %NodeBlock, %LeafBlock, %sw.bb20
  %39 = load %struct.intel8x0*, %struct.intel8x0** %chip, align 8
  %40 = load i32, i32* %val, align 4
  %41 = load %struct.ichdev*, %struct.ichdev** %ichdev, align 8
  %ali_slot25 = getelementptr inbounds %struct.ichdev, %struct.ichdev* %41, i32 0, i32 22
  %42 = load i32, i32* %ali_slot25, align 4
  %add26 = add i32 %42, 16
  %shl27 = shl i32 1, %add26
  %or28 = or i32 %40, %shl27
  call void @iputdword(%struct.intel8x0* %39, i32 8, i32 %or28)
  %43 = load %struct.intel8x0*, %struct.intel8x0** %chip, align 8
  %44 = load i64, i64* %port, align 8
  %add29 = add i64 %44, 11
  %conv30 = trunc i64 %add29 to i32
  call void @iputbyte(%struct.intel8x0* %43, i32 %conv30, i8 zeroext 0)
  br label %while.cond

while.cond:                                       ; preds = %while.body, %sw.bb24
  %45 = load %struct.intel8x0*, %struct.intel8x0** %chip, align 8
  %46 = load i64, i64* %port, align 8
  %add31 = add i64 %46, 11
  %conv32 = trunc i64 %add31 to i32
  %call33 = call zeroext i8 @igetbyte(%struct.intel8x0* %45, i32 %conv32)
  %tobool = icmp ne i8 %call33, 0
  br i1 %tobool, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  br label %while.cond

while.end:                                        ; preds = %while.cond
  %47 = load i32, i32* %cmd.addr, align 4
  %cmp34 = icmp eq i32 %47, 3
  br i1 %cmp34, label %if.then36, label %if.end37

if.then36:                                        ; preds = %while.end
  br label %sw.epilog

if.end37:                                         ; preds = %while.end
  %48 = load %struct.intel8x0*, %struct.intel8x0** %chip, align 8
  %49 = load i64, i64* %port, align 8
  %add38 = add i64 %49, 11
  %conv39 = trunc i64 %add38 to i32
  call void @iputbyte(%struct.intel8x0* %48, i32 %conv39, i8 zeroext 2)
  %50 = load %struct.intel8x0*, %struct.intel8x0** %chip, align 8
  %51 = load i64, i64* %port, align 8
  %add40 = add i64 %51, 6
  %conv41 = trunc i64 %add40 to i32
  %52 = load %struct.intel8x0*, %struct.intel8x0** %chip, align 8
  %53 = load i64, i64* %port, align 8
  %add42 = add i64 %53, 6
  %conv43 = trunc i64 %add42 to i32
  %call44 = call zeroext i8 @igetbyte(%struct.intel8x0* %52, i32 %conv43)
  %conv45 = zext i8 %call44 to i32
  %or46 = or i32 %conv45, 30
  %conv47 = trunc i32 %or46 to i8
  call void @iputbyte(%struct.intel8x0* %50, i32 %conv41, i8 zeroext %conv47)
  %54 = load %struct.intel8x0*, %struct.intel8x0** %chip, align 8
  %55 = load %struct.intel8x0*, %struct.intel8x0** %chip, align 8
  %call48 = call i32 @igetdword(%struct.intel8x0* %55, i32 24)
  %56 = load %struct.ichdev*, %struct.ichdev** %ichdev, align 8
  %int_sta_mask = getelementptr inbounds %struct.ichdev, %struct.ichdev* %56, i32 0, i32 21
  %57 = load i32, i32* %int_sta_mask, align 8
  %and49 = and i32 %call48, %57
  call void @iputdword(%struct.intel8x0* %54, i32 24, i32 %and49)
  br label %sw.epilog

NewDefault:                                       ; preds = %LeafBlock5, %LeafBlock1, %LeafBlock
  br label %sw.default

sw.default:                                       ; preds = %NewDefault
  store i32 -22, i32* %retval, align 4
  br label %return

sw.epilog:                                        ; preds = %if.end37, %if.then36, %if.end
  store i32 0, i32* %retval, align 4
  br label %return

return:                                           ; preds = %sw.epilog, %sw.default
  %58 = load i32, i32* %retval, align 4
  ret i32 %58
}

; Function Attrs: noinline nounwind optnone uwtable
define internal i32 @snd_intel8x0_ali_ac97spdifout_open(%struct.snd_pcm_substream* %substream) #0 {
entry:
  %lock.addr.i3 = alloca %struct.spinlock*, align 8
  %lock.addr.i = alloca %struct.spinlock*, align 8
  %substream.addr = alloca %struct.snd_pcm_substream*, align 8
  %chip = alloca %struct.intel8x0*, align 8
  %val = alloca i32, align 4
  store %struct.snd_pcm_substream* %substream, %struct.snd_pcm_substream** %substream.addr, align 8
  %0 = load %struct.snd_pcm_substream*, %struct.snd_pcm_substream** %substream.addr, align 8
  %private_data = getelementptr inbounds %struct.snd_pcm_substream, %struct.snd_pcm_substream* %0, i32 0, i32 2
  %1 = load i8*, i8** %private_data, align 8
  %2 = bitcast i8* %1 to %struct.intel8x0*
  store %struct.intel8x0* %2, %struct.intel8x0** %chip, align 8
  %3 = load %struct.intel8x0*, %struct.intel8x0** %chip, align 8
  %reg_lock = getelementptr inbounds %struct.intel8x0, %struct.intel8x0* %3, i32 0, i32 20
  store %struct.spinlock* %reg_lock, %struct.spinlock** %lock.addr.i, align 8
  %4 = load %struct.spinlock*, %struct.spinlock** %lock.addr.i, align 8
  %5 = getelementptr inbounds %struct.spinlock, %struct.spinlock* %4, i32 0, i32 0
  %rlock.i = bitcast %union.anon.1* %5 to %struct.raw_spinlock*
  call void @_raw_spin_lock_irq(%struct.raw_spinlock* %rlock.i) #3
  %6 = load %struct.intel8x0*, %struct.intel8x0** %chip, align 8
  %call = call i32 @igetdword(%struct.intel8x0* %6, i32 16)
  store i32 %call, i32* %val, align 4
  %7 = load i32, i32* %val, align 4
  %or = or i32 %7, 2097152
  store i32 %or, i32* %val, align 4
  %8 = load %struct.intel8x0*, %struct.intel8x0** %chip, align 8
  %9 = load i32, i32* %val, align 4
  call void @iputdword(%struct.intel8x0* %8, i32 16, i32 %9)
  %10 = load %struct.intel8x0*, %struct.intel8x0** %chip, align 8
  %reg_lock1 = getelementptr inbounds %struct.intel8x0, %struct.intel8x0* %10, i32 0, i32 20
  store %struct.spinlock* %reg_lock1, %struct.spinlock** %lock.addr.i3, align 8
  %11 = load %struct.spinlock*, %struct.spinlock** %lock.addr.i3, align 8
  %12 = getelementptr inbounds %struct.spinlock, %struct.spinlock* %11, i32 0, i32 0
  %rlock.i4 = bitcast %union.anon.1* %12 to %struct.raw_spinlock*
  call void @__raw_spin_unlock_irq(%struct.raw_spinlock* %rlock.i4) #3
  %13 = load %struct.snd_pcm_substream*, %struct.snd_pcm_substream** %substream.addr, align 8
  %14 = load %struct.intel8x0*, %struct.intel8x0** %chip, align 8
  %ichd = getelementptr inbounds %struct.intel8x0, %struct.intel8x0* %14, i32 0, i32 8
  %arrayidx = getelementptr inbounds [6 x %struct.ichdev], [6 x %struct.ichdev]* %ichd, i64 0, i64 3
  %call2 = call i32 @snd_intel8x0_pcm_open(%struct.snd_pcm_substream* %13, %struct.ichdev* %arrayidx)
  ret i32 %call2
}

; Function Attrs: noinline nounwind optnone uwtable
define internal i32 @snd_intel8x0_ali_ac97spdifout_close(%struct.snd_pcm_substream* %substream) #0 {
entry:
  %lock.addr.i3 = alloca %struct.spinlock*, align 8
  %lock.addr.i = alloca %struct.spinlock*, align 8
  %substream.addr = alloca %struct.snd_pcm_substream*, align 8
  %chip = alloca %struct.intel8x0*, align 8
  %val = alloca i32, align 4
  store %struct.snd_pcm_substream* %substream, %struct.snd_pcm_substream** %substream.addr, align 8
  %0 = load %struct.snd_pcm_substream*, %struct.snd_pcm_substream** %substream.addr, align 8
  %private_data = getelementptr inbounds %struct.snd_pcm_substream, %struct.snd_pcm_substream* %0, i32 0, i32 2
  %1 = load i8*, i8** %private_data, align 8
  %2 = bitcast i8* %1 to %struct.intel8x0*
  store %struct.intel8x0* %2, %struct.intel8x0** %chip, align 8
  %3 = load %struct.intel8x0*, %struct.intel8x0** %chip, align 8
  %ichd = getelementptr inbounds %struct.intel8x0, %struct.intel8x0* %3, i32 0, i32 8
  %arrayidx = getelementptr inbounds [6 x %struct.ichdev], [6 x %struct.ichdev]* %ichd, i64 0, i64 3
  %substream1 = getelementptr inbounds %struct.ichdev, %struct.ichdev* %arrayidx, i32 0, i32 4
  store %struct.snd_pcm_substream* null, %struct.snd_pcm_substream** %substream1, align 8
  %4 = load %struct.intel8x0*, %struct.intel8x0** %chip, align 8
  %reg_lock = getelementptr inbounds %struct.intel8x0, %struct.intel8x0* %4, i32 0, i32 20
  store %struct.spinlock* %reg_lock, %struct.spinlock** %lock.addr.i, align 8
  %5 = load %struct.spinlock*, %struct.spinlock** %lock.addr.i, align 8
  %6 = getelementptr inbounds %struct.spinlock, %struct.spinlock* %5, i32 0, i32 0
  %rlock.i = bitcast %union.anon.1* %6 to %struct.raw_spinlock*
  call void @_raw_spin_lock_irq(%struct.raw_spinlock* %rlock.i) #3
  %7 = load %struct.intel8x0*, %struct.intel8x0** %chip, align 8
  %call = call i32 @igetdword(%struct.intel8x0* %7, i32 16)
  store i32 %call, i32* %val, align 4
  %8 = load i32, i32* %val, align 4
  %and = and i32 %8, -2097153
  store i32 %and, i32* %val, align 4
  %9 = load %struct.intel8x0*, %struct.intel8x0** %chip, align 8
  %10 = load i32, i32* %val, align 4
  call void @iputdword(%struct.intel8x0* %9, i32 16, i32 %10)
  %11 = load %struct.intel8x0*, %struct.intel8x0** %chip, align 8
  %reg_lock2 = getelementptr inbounds %struct.intel8x0, %struct.intel8x0* %11, i32 0, i32 20
  store %struct.spinlock* %reg_lock2, %struct.spinlock** %lock.addr.i3, align 8
  %12 = load %struct.spinlock*, %struct.spinlock** %lock.addr.i3, align 8
  %13 = getelementptr inbounds %struct.spinlock, %struct.spinlock* %12, i32 0, i32 0
  %rlock.i4 = bitcast %union.anon.1* %13 to %struct.raw_spinlock*
  call void @__raw_spin_unlock_irq(%struct.raw_spinlock* %rlock.i4) #3
  ret i32 0
}

declare i32 @sprintf(i8*, i8*, ...) #1

declare i32 @snd_pcm_new(%struct.snd_card*, i8*, i32, i32, i32, %struct.snd_pcm**) #1

declare void @snd_pcm_set_ops(%struct.snd_pcm*, i32, %struct.snd_pcm_ops*) #1

declare i32 @snd_pcm_lib_preallocate_pages_for_all(%struct.snd_pcm*, i32, i8*, i64, i64) #1

declare i32 @snd_pcm_add_chmap_ctls(%struct.snd_pcm*, i32, %struct.snd_pcm_chmap_elem*, i32, i64, %struct.snd_pcm_chmap**) #1

; Function Attrs: noinline nounwind optnone uwtable
define internal i32 @snd_card_proc_new(%struct.snd_card* %card, i8* %name, %struct.snd_info_entry** %entryp) #0 {
entry:
  %card.addr = alloca %struct.snd_card*, align 8
  %name.addr = alloca i8*, align 8
  %entryp.addr = alloca %struct.snd_info_entry**, align 8
  store %struct.snd_card* %card, %struct.snd_card** %card.addr, align 8
  store i8* %name, i8** %name.addr, align 8
  store %struct.snd_info_entry** %entryp, %struct.snd_info_entry*** %entryp.addr, align 8
  %0 = load %struct.snd_card*, %struct.snd_card** %card.addr, align 8
  %1 = load i8*, i8** %name.addr, align 8
  %2 = load %struct.snd_card*, %struct.snd_card** %card.addr, align 8
  %proc_root = getelementptr inbounds %struct.snd_card, %struct.snd_card* %2, i32 0, i32 21
  %3 = load %struct.snd_info_entry*, %struct.snd_info_entry** %proc_root, align 8
  %call = call %struct.snd_info_entry* @snd_info_create_card_entry(%struct.snd_card* %0, i8* %1, %struct.snd_info_entry* %3)
  %4 = load %struct.snd_info_entry**, %struct.snd_info_entry*** %entryp.addr, align 8
  store %struct.snd_info_entry* %call, %struct.snd_info_entry** %4, align 8
  %5 = load %struct.snd_info_entry**, %struct.snd_info_entry*** %entryp.addr, align 8
  %6 = load %struct.snd_info_entry*, %struct.snd_info_entry** %5, align 8
  %tobool = icmp ne %struct.snd_info_entry* %6, null
  %7 = zext i1 %tobool to i64
  %cond = select i1 %tobool, i32 0, i32 -12
  ret i32 %cond
}

; Function Attrs: noinline nounwind optnone uwtable
define internal void @snd_info_set_text_ops(%struct.snd_info_entry* %entry1, i8* %private_data, void (%struct.snd_info_entry*, %struct.snd_info_buffer*)* %read) #0 {
entry:
  %entry.addr = alloca %struct.snd_info_entry*, align 8
  %private_data.addr = alloca i8*, align 8
  %read.addr = alloca void (%struct.snd_info_entry*, %struct.snd_info_buffer*)*, align 8
  store %struct.snd_info_entry* %entry1, %struct.snd_info_entry** %entry.addr, align 8
  store i8* %private_data, i8** %private_data.addr, align 8
  store void (%struct.snd_info_entry*, %struct.snd_info_buffer*)* %read, void (%struct.snd_info_entry*, %struct.snd_info_buffer*)** %read.addr, align 8
  %0 = load i8*, i8** %private_data.addr, align 8
  %1 = load %struct.snd_info_entry*, %struct.snd_info_entry** %entry.addr, align 8
  %private_data2 = getelementptr inbounds %struct.snd_info_entry, %struct.snd_info_entry* %1, i32 0, i32 8
  store i8* %0, i8** %private_data2, align 8
  %2 = load void (%struct.snd_info_entry*, %struct.snd_info_buffer*)*, void (%struct.snd_info_entry*, %struct.snd_info_buffer*)** %read.addr, align 8
  %3 = load %struct.snd_info_entry*, %struct.snd_info_entry** %entry.addr, align 8
  %c = getelementptr inbounds %struct.snd_info_entry, %struct.snd_info_entry* %3, i32 0, i32 4
  %text = bitcast %union.anon.55* %c to %struct.snd_info_entry_text*
  %read3 = getelementptr inbounds %struct.snd_info_entry_text, %struct.snd_info_entry_text* %text, i32 0, i32 0
  store void (%struct.snd_info_entry*, %struct.snd_info_buffer*)* %2, void (%struct.snd_info_entry*, %struct.snd_info_buffer*)** %read3, align 8
  ret void
}

; Function Attrs: noinline nounwind optnone uwtable
define internal void @snd_intel8x0_proc_read(%struct.snd_info_entry* %entry1, %struct.snd_info_buffer* %buffer) #0 {
entry:
  %entry.addr = alloca %struct.snd_info_entry*, align 8
  %buffer.addr = alloca %struct.snd_info_buffer*, align 8
  %chip = alloca %struct.intel8x0*, align 8
  %tmp = alloca i32, align 4
  %i = alloca i32, align 4
  store %struct.snd_info_entry* %entry1, %struct.snd_info_entry** %entry.addr, align 8
  store %struct.snd_info_buffer* %buffer, %struct.snd_info_buffer** %buffer.addr, align 8
  %0 = load %struct.snd_info_entry*, %struct.snd_info_entry** %entry.addr, align 8
  %private_data = getelementptr inbounds %struct.snd_info_entry, %struct.snd_info_entry* %0, i32 0, i32 8
  %1 = load i8*, i8** %private_data, align 8
  %2 = bitcast i8* %1 to %struct.intel8x0*
  store %struct.intel8x0* %2, %struct.intel8x0** %chip, align 8
  %3 = load %struct.snd_info_buffer*, %struct.snd_info_buffer** %buffer.addr, align 8
  %buffer2 = getelementptr inbounds %struct.snd_info_buffer, %struct.snd_info_buffer* %3, i32 0, i32 0
  %4 = load i8*, i8** %buffer2, align 8
  %5 = bitcast i8* %4 to %struct.seq_file*
  call void (%struct.seq_file*, i8*, ...) @seq_printf(%struct.seq_file* %5, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.114, i32 0, i32 0))
  %6 = load %struct.intel8x0*, %struct.intel8x0** %chip, align 8
  %device_type = getelementptr inbounds %struct.intel8x0, %struct.intel8x0* %6, i32 0, i32 0
  %7 = load i32, i32* %device_type, align 8
  %cmp = icmp eq i32 %7, 3
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  br label %if.end36

if.end:                                           ; preds = %entry
  %8 = load %struct.intel8x0*, %struct.intel8x0** %chip, align 8
  %call = call i32 @igetdword(%struct.intel8x0* %8, i32 48)
  store i32 %call, i32* %tmp, align 4
  %9 = load %struct.snd_info_buffer*, %struct.snd_info_buffer** %buffer.addr, align 8
  %buffer3 = getelementptr inbounds %struct.snd_info_buffer, %struct.snd_info_buffer* %9, i32 0, i32 0
  %10 = load i8*, i8** %buffer3, align 8
  %11 = bitcast i8* %10 to %struct.seq_file*
  %12 = load %struct.intel8x0*, %struct.intel8x0** %chip, align 8
  %call4 = call i32 @igetdword(%struct.intel8x0* %12, i32 44)
  call void (%struct.seq_file*, i8*, ...) @seq_printf(%struct.seq_file* %11, i8* getelementptr inbounds ([32 x i8], [32 x i8]* @.str.115, i32 0, i32 0), i32 %call4)
  %13 = load %struct.snd_info_buffer*, %struct.snd_info_buffer** %buffer.addr, align 8
  %buffer5 = getelementptr inbounds %struct.snd_info_buffer, %struct.snd_info_buffer* %13, i32 0, i32 0
  %14 = load i8*, i8** %buffer5, align 8
  %15 = bitcast i8* %14 to %struct.seq_file*
  %16 = load i32, i32* %tmp, align 4
  call void (%struct.seq_file*, i8*, ...) @seq_printf(%struct.seq_file* %15, i8* getelementptr inbounds ([32 x i8], [32 x i8]* @.str.116, i32 0, i32 0), i32 %16)
  %17 = load %struct.intel8x0*, %struct.intel8x0** %chip, align 8
  %device_type6 = getelementptr inbounds %struct.intel8x0, %struct.intel8x0* %17, i32 0, i32 0
  %18 = load i32, i32* %device_type6, align 8
  %cmp7 = icmp eq i32 %18, 1
  br i1 %cmp7, label %if.then8, label %if.end11

if.then8:                                         ; preds = %if.end
  %19 = load %struct.snd_info_buffer*, %struct.snd_info_buffer** %buffer.addr, align 8
  %buffer9 = getelementptr inbounds %struct.snd_info_buffer, %struct.snd_info_buffer* %19, i32 0, i32 0
  %20 = load i8*, i8** %buffer9, align 8
  %21 = bitcast i8* %20 to %struct.seq_file*
  %22 = load %struct.intel8x0*, %struct.intel8x0** %chip, align 8
  %call10 = call i32 @igetdword(%struct.intel8x0* %22, i32 128)
  call void (%struct.seq_file*, i8*, ...) @seq_printf(%struct.seq_file* %21, i8* getelementptr inbounds ([32 x i8], [32 x i8]* @.str.117, i32 0, i32 0), i32 %call10)
  br label %if.end11

if.end11:                                         ; preds = %if.then8, %if.end
  %23 = load %struct.snd_info_buffer*, %struct.snd_info_buffer** %buffer.addr, align 8
  %buffer12 = getelementptr inbounds %struct.snd_info_buffer, %struct.snd_info_buffer* %23, i32 0, i32 0
  %24 = load i8*, i8** %buffer12, align 8
  %25 = bitcast i8* %24 to %struct.seq_file*
  call void (%struct.seq_file*, i8*, ...) @seq_printf(%struct.seq_file* %25, i8* getelementptr inbounds ([24 x i8], [24 x i8]* @.str.118, i32 0, i32 0))
  %26 = load i32, i32* %tmp, align 4
  %27 = load %struct.intel8x0*, %struct.intel8x0** %chip, align 8
  %codec_isr_bits = getelementptr inbounds %struct.intel8x0, %struct.intel8x0* %27, i32 0, i32 18
  %28 = load i32, i32* %codec_isr_bits, align 8
  %and = and i32 %26, %28
  %tobool = icmp ne i32 %and, 0
  br i1 %tobool, label %if.then13, label %if.else

if.then13:                                        ; preds = %if.end11
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %if.then13
  %29 = load i32, i32* %i, align 4
  %30 = load %struct.intel8x0*, %struct.intel8x0** %chip, align 8
  %max_codecs = getelementptr inbounds %struct.intel8x0, %struct.intel8x0* %30, i32 0, i32 15
  %31 = load i32, i32* %max_codecs, align 4
  %cmp14 = icmp ult i32 %29, %31
  br i1 %cmp14, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %32 = load i32, i32* %tmp, align 4
  %33 = load %struct.intel8x0*, %struct.intel8x0** %chip, align 8
  %codec_bit = getelementptr inbounds %struct.intel8x0, %struct.intel8x0* %33, i32 0, i32 17
  %34 = load i32*, i32** %codec_bit, align 8
  %35 = load i32, i32* %i, align 4
  %idxprom = sext i32 %35 to i64
  %arrayidx = getelementptr inbounds i32, i32* %34, i64 %idxprom
  %36 = load i32, i32* %arrayidx, align 4
  %and15 = and i32 %32, %36
  %tobool16 = icmp ne i32 %and15, 0
  br i1 %tobool16, label %if.then17, label %if.end21

if.then17:                                        ; preds = %for.body
  %37 = load %struct.snd_info_buffer*, %struct.snd_info_buffer** %buffer.addr, align 8
  %buffer18 = getelementptr inbounds %struct.snd_info_buffer, %struct.snd_info_buffer* %37, i32 0, i32 0
  %38 = load i8*, i8** %buffer18, align 8
  %39 = bitcast i8* %38 to %struct.seq_file*
  %40 = load i32, i32* %i, align 4
  %idxprom19 = sext i32 %40 to i64
  %arrayidx20 = getelementptr inbounds [3 x i8*], [3 x i8*]* @snd_intel8x0_proc_read.codecs, i64 0, i64 %idxprom19
  %41 = load i8*, i8** %arrayidx20, align 8
  call void (%struct.seq_file*, i8*, ...) @seq_printf(%struct.seq_file* %39, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.122, i32 0, i32 0), i8* %41)
  br label %if.end21

if.end21:                                         ; preds = %if.then17, %for.body
  br label %for.inc

for.inc:                                          ; preds = %if.end21
  %42 = load i32, i32* %i, align 4
  %inc = add nsw i32 %42, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  br label %if.end23

if.else:                                          ; preds = %if.end11
  %43 = load %struct.snd_info_buffer*, %struct.snd_info_buffer** %buffer.addr, align 8
  %buffer22 = getelementptr inbounds %struct.snd_info_buffer, %struct.snd_info_buffer* %43, i32 0, i32 0
  %44 = load i8*, i8** %buffer22, align 8
  %45 = bitcast i8* %44 to %struct.seq_file*
  call void (%struct.seq_file*, i8*, ...) @seq_printf(%struct.seq_file* %45, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.123, i32 0, i32 0))
  br label %if.end23

if.end23:                                         ; preds = %if.else, %for.end
  %46 = load %struct.snd_info_buffer*, %struct.snd_info_buffer** %buffer.addr, align 8
  %buffer24 = getelementptr inbounds %struct.snd_info_buffer, %struct.snd_info_buffer* %46, i32 0, i32 0
  %47 = load i8*, i8** %buffer24, align 8
  %48 = bitcast i8* %47 to %struct.seq_file*
  call void (%struct.seq_file*, i8*, ...) @seq_printf(%struct.seq_file* %48, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.124, i32 0, i32 0))
  %49 = load %struct.intel8x0*, %struct.intel8x0** %chip, align 8
  %device_type25 = getelementptr inbounds %struct.intel8x0, %struct.intel8x0* %49, i32 0, i32 0
  %50 = load i32, i32* %device_type25, align 8
  %cmp26 = icmp eq i32 %50, 1
  br i1 %cmp26, label %if.then29, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %if.end23
  %51 = load %struct.intel8x0*, %struct.intel8x0** %chip, align 8
  %device_type27 = getelementptr inbounds %struct.intel8x0, %struct.intel8x0* %51, i32 0, i32 0
  %52 = load i32, i32* %device_type27, align 8
  %cmp28 = icmp eq i32 %52, 2
  br i1 %cmp28, label %if.then29, label %if.end36

if.then29:                                        ; preds = %lor.lhs.false, %if.end23
  %53 = load %struct.snd_info_buffer*, %struct.snd_info_buffer** %buffer.addr, align 8
  %buffer30 = getelementptr inbounds %struct.snd_info_buffer, %struct.snd_info_buffer* %53, i32 0, i32 0
  %54 = load i8*, i8** %buffer30, align 8
  %55 = bitcast i8* %54 to %struct.seq_file*
  %56 = load %struct.intel8x0*, %struct.intel8x0** %chip, align 8
  %ac97_sdin = getelementptr inbounds %struct.intel8x0, %struct.intel8x0* %56, i32 0, i32 14
  %arrayidx31 = getelementptr inbounds [3 x i32], [3 x i32]* %ac97_sdin, i64 0, i64 0
  %57 = load i32, i32* %arrayidx31, align 8
  %58 = load %struct.intel8x0*, %struct.intel8x0** %chip, align 8
  %ac97_sdin32 = getelementptr inbounds %struct.intel8x0, %struct.intel8x0* %58, i32 0, i32 14
  %arrayidx33 = getelementptr inbounds [3 x i32], [3 x i32]* %ac97_sdin32, i64 0, i64 1
  %59 = load i32, i32* %arrayidx33, align 4
  %60 = load %struct.intel8x0*, %struct.intel8x0** %chip, align 8
  %ac97_sdin34 = getelementptr inbounds %struct.intel8x0, %struct.intel8x0* %60, i32 0, i32 14
  %arrayidx35 = getelementptr inbounds [3 x i32], [3 x i32]* %ac97_sdin34, i64 0, i64 2
  %61 = load i32, i32* %arrayidx35, align 8
  call void (%struct.seq_file*, i8*, ...) @seq_printf(%struct.seq_file* %55, i8* getelementptr inbounds ([34 x i8], [34 x i8]* @.str.125, i32 0, i32 0), i32 %57, i32 %59, i32 %61)
  br label %if.end36

if.end36:                                         ; preds = %if.then29, %lor.lhs.false, %if.then
  ret void
}

declare %struct.snd_info_entry* @snd_info_create_card_entry(%struct.snd_card*, i8*, %struct.snd_info_entry*) #1

declare void @seq_printf(%struct.seq_file*, i8*, ...) #1

declare i64 @ktime_get() #1

; Function Attrs: noinline nounwind optnone uwtable
define internal i64 @ktime_us_delta(i64 %later, i64 %earlier) #0 {
entry:
  %later.addr = alloca i64, align 8
  %earlier.addr = alloca i64, align 8
  store i64 %later, i64* %later.addr, align 8
  store i64 %earlier, i64* %earlier.addr, align 8
  %0 = load i64, i64* %later.addr, align 8
  %1 = load i64, i64* %earlier.addr, align 8
  %sub = sub nsw i64 %0, %1
  %call = call i64 @ktime_to_us(i64 %sub)
  ret i64 %call
}

; Function Attrs: noinline nounwind optnone uwtable
define internal i32 @snd_ac97_update_power(%struct.snd_ac97* %ac97, i32 %reg, i32 %powerup) #0 {
entry:
  %ac97.addr = alloca %struct.snd_ac97*, align 8
  %reg.addr = alloca i32, align 4
  %powerup.addr = alloca i32, align 4
  store %struct.snd_ac97* %ac97, %struct.snd_ac97** %ac97.addr, align 8
  store i32 %reg, i32* %reg.addr, align 4
  store i32 %powerup, i32* %powerup.addr, align 4
  ret i32 0
}

; Function Attrs: noinline nounwind optnone uwtable
define internal i64 @ktime_to_us(i64 %kt) #0 {
entry:
  %kt.addr = alloca i64, align 8
  store i64 %kt, i64* %kt.addr, align 8
  %0 = load i64, i64* %kt.addr, align 8
  %call = call i64 @ktime_divns(i64 %0, i64 1000)
  ret i64 %call
}

; Function Attrs: noinline nounwind optnone uwtable
define internal i64 @ktime_divns(i64 %kt, i64 %div) #0 {
entry:
  %kt.addr = alloca i64, align 8
  %div.addr = alloca i64, align 8
  %__ret_warn_on = alloca i32, align 4
  %tmp = alloca i64, align 8
  store i64 %kt, i64* %kt.addr, align 8
  store i64 %div, i64* %div.addr, align 8
  %0 = load i64, i64* %div.addr, align 8
  %cmp = icmp slt i64 %0, 0
  %lnot = xor i1 %cmp, true
  %lnot1 = xor i1 %lnot, true
  %lnot.ext = zext i1 %lnot1 to i32
  store i32 %lnot.ext, i32* %__ret_warn_on, align 4
  %1 = load i32, i32* %__ret_warn_on, align 4
  %tobool = icmp ne i32 %1, 0
  %lnot2 = xor i1 %tobool, true
  %lnot4 = xor i1 %lnot2, true
  %lnot.ext5 = zext i1 %lnot4 to i32
  %conv = sext i32 %lnot.ext5 to i64
  %tobool6 = icmp ne i64 %conv, 0
  br i1 %tobool6, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  call void @warn_slowpath_null(i8* getelementptr inbounds ([24 x i8], [24 x i8]* @.str.134, i32 0, i32 0), i32 168)
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  %2 = load i32, i32* %__ret_warn_on, align 4
  %tobool7 = icmp ne i32 %2, 0
  %lnot8 = xor i1 %tobool7, true
  %lnot10 = xor i1 %lnot8, true
  %lnot.ext11 = zext i1 %lnot10 to i32
  %conv12 = sext i32 %lnot.ext11 to i64
  store i64 %conv12, i64* %tmp, align 8
  %3 = load i64, i64* %tmp, align 8
  %4 = load i64, i64* %kt.addr, align 8
  %5 = load i64, i64* %div.addr, align 8
  %div13 = sdiv i64 %4, %5
  ret i64 %div13
}

declare void @warn_slowpath_null(i8*, i32) #1

; Function Attrs: noinline nounwind optnone uwtable
define internal void @dev_set_drvdata(%struct.device* %dev, i8* %data) #0 {
entry:
  %dev.addr = alloca %struct.device*, align 8
  %data.addr = alloca i8*, align 8
  store %struct.device* %dev, %struct.device** %dev.addr, align 8
  store i8* %data, i8** %data.addr, align 8
  %0 = load i8*, i8** %data.addr, align 8
  %1 = load %struct.device*, %struct.device** %dev.addr, align 8
  %driver_data = getelementptr inbounds %struct.device, %struct.device* %1, i32 0, i32 9
  store i8* %0, i8** %driver_data, align 8
  ret void
}

; Function Attrs: noinline nounwind optnone uwtable
define internal i8* @pci_get_drvdata(%struct.pci_dev* %pdev) #0 {
entry:
  %pdev.addr = alloca %struct.pci_dev*, align 8
  store %struct.pci_dev* %pdev, %struct.pci_dev** %pdev.addr, align 8
  %0 = load %struct.pci_dev*, %struct.pci_dev** %pdev.addr, align 8
  %dev = getelementptr inbounds %struct.pci_dev, %struct.pci_dev* %0, i32 0, i32 35
  %call = call i8* @dev_get_drvdata(%struct.device* %dev)
  ret i8* %call
}

; Function Attrs: noinline nounwind optnone uwtable
define internal i8* @dev_get_drvdata(%struct.device* %dev) #0 {
entry:
  %dev.addr = alloca %struct.device*, align 8
  store %struct.device* %dev, %struct.device** %dev.addr, align 8
  %0 = load %struct.device*, %struct.device** %dev.addr, align 8
  %driver_data = getelementptr inbounds %struct.device, %struct.device* %0, i32 0, i32 9
  %1 = load i8*, i8** %driver_data, align 8
  ret i8* %1
}

; Function Attrs: noinline nounwind optnone uwtable
define internal i32 @intel8x0_suspend(%struct.device* %dev) #0 {
entry:
  %dev.addr = alloca %struct.device*, align 8
  %card = alloca %struct.snd_card*, align 8
  %chip = alloca %struct.intel8x0*, align 8
  %i = alloca i32, align 4
  %ichdev = alloca %struct.ichdev*, align 8
  %runtime = alloca %struct.snd_pcm_runtime*, align 8
  store %struct.device* %dev, %struct.device** %dev.addr, align 8
  %0 = load %struct.device*, %struct.device** %dev.addr, align 8
  %call = call i8* @dev_get_drvdata(%struct.device* %0)
  %1 = bitcast i8* %call to %struct.snd_card*
  store %struct.snd_card* %1, %struct.snd_card** %card, align 8
  %2 = load %struct.snd_card*, %struct.snd_card** %card, align 8
  %private_data = getelementptr inbounds %struct.snd_card, %struct.snd_card* %2, i32 0, i32 9
  %3 = load i8*, i8** %private_data, align 8
  %4 = bitcast i8* %3 to %struct.intel8x0*
  store %struct.intel8x0* %4, %struct.intel8x0** %chip, align 8
  %5 = load %struct.snd_card*, %struct.snd_card** %card, align 8
  call void @snd_power_change_state(%struct.snd_card* %5, i32 768)
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %6 = load i32, i32* %i, align 4
  %7 = load %struct.intel8x0*, %struct.intel8x0** %chip, align 8
  %pcm_devs = getelementptr inbounds %struct.intel8x0, %struct.intel8x0* %7, i32 0, i32 6
  %8 = load i32, i32* %pcm_devs, align 8
  %cmp = icmp slt i32 %6, %8
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %9 = load %struct.intel8x0*, %struct.intel8x0** %chip, align 8
  %pcm = getelementptr inbounds %struct.intel8x0, %struct.intel8x0* %9, i32 0, i32 7
  %10 = load i32, i32* %i, align 4
  %idxprom = sext i32 %10 to i64
  %arrayidx = getelementptr inbounds [6 x %struct.snd_pcm*], [6 x %struct.snd_pcm*]* %pcm, i64 0, i64 %idxprom
  %11 = load %struct.snd_pcm*, %struct.snd_pcm** %arrayidx, align 8
  %call1 = call i32 @snd_pcm_suspend_all(%struct.snd_pcm* %11)
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %12 = load i32, i32* %i, align 4
  %inc = add nsw i32 %12, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %13 = load %struct.intel8x0*, %struct.intel8x0** %chip, align 8
  %fix_nocache = getelementptr inbounds %struct.intel8x0, %struct.intel8x0* %13, i32 0, i32 9
  %bf.load = load i16, i16* %fix_nocache, align 8
  %bf.lshr = lshr i16 %bf.load, 8
  %bf.clear = and i16 %bf.lshr, 1
  %bf.cast = zext i16 %bf.clear to i32
  %tobool = icmp ne i32 %bf.cast, 0
  br i1 %tobool, label %if.then, label %if.end21

if.then:                                          ; preds = %for.end
  store i32 0, i32* %i, align 4
  br label %for.cond2

for.cond2:                                        ; preds = %for.inc18, %if.then
  %14 = load i32, i32* %i, align 4
  %15 = load %struct.intel8x0*, %struct.intel8x0** %chip, align 8
  %bdbars_count = getelementptr inbounds %struct.intel8x0, %struct.intel8x0* %15, i32 0, i32 21
  %16 = load i32, i32* %bdbars_count, align 4
  %cmp3 = icmp ult i32 %14, %16
  br i1 %cmp3, label %for.body4, label %for.end20

for.body4:                                        ; preds = %for.cond2
  %17 = load %struct.intel8x0*, %struct.intel8x0** %chip, align 8
  %ichd = getelementptr inbounds %struct.intel8x0, %struct.intel8x0* %17, i32 0, i32 8
  %18 = load i32, i32* %i, align 4
  %idxprom5 = sext i32 %18 to i64
  %arrayidx6 = getelementptr inbounds [6 x %struct.ichdev], [6 x %struct.ichdev]* %ichd, i64 0, i64 %idxprom5
  store %struct.ichdev* %arrayidx6, %struct.ichdev** %ichdev, align 8
  %19 = load %struct.ichdev*, %struct.ichdev** %ichdev, align 8
  %substream = getelementptr inbounds %struct.ichdev, %struct.ichdev* %19, i32 0, i32 4
  %20 = load %struct.snd_pcm_substream*, %struct.snd_pcm_substream** %substream, align 8
  %tobool7 = icmp ne %struct.snd_pcm_substream* %20, null
  br i1 %tobool7, label %land.lhs.true, label %if.end17

land.lhs.true:                                    ; preds = %for.body4
  %21 = load %struct.ichdev*, %struct.ichdev** %ichdev, align 8
  %page_attr_changed = getelementptr inbounds %struct.ichdev, %struct.ichdev* %21, i32 0, i32 25
  %bf.load8 = load i8, i8* %page_attr_changed, align 4
  %bf.clear9 = and i8 %bf.load8, 1
  %bf.cast10 = zext i8 %bf.clear9 to i32
  %tobool11 = icmp ne i32 %bf.cast10, 0
  br i1 %tobool11, label %if.then12, label %if.end17

if.then12:                                        ; preds = %land.lhs.true
  %22 = load %struct.ichdev*, %struct.ichdev** %ichdev, align 8
  %substream13 = getelementptr inbounds %struct.ichdev, %struct.ichdev* %22, i32 0, i32 4
  %23 = load %struct.snd_pcm_substream*, %struct.snd_pcm_substream** %substream13, align 8
  %runtime14 = getelementptr inbounds %struct.snd_pcm_substream, %struct.snd_pcm_substream* %23, i32 0, i32 11
  %24 = load %struct.snd_pcm_runtime*, %struct.snd_pcm_runtime** %runtime14, align 8
  store %struct.snd_pcm_runtime* %24, %struct.snd_pcm_runtime** %runtime, align 8
  %25 = load %struct.snd_pcm_runtime*, %struct.snd_pcm_runtime** %runtime, align 8
  %dma_area = getelementptr inbounds %struct.snd_pcm_runtime, %struct.snd_pcm_runtime* %25, i32 0, i32 49
  %26 = load i8*, i8** %dma_area, align 8
  %tobool15 = icmp ne i8* %26, null
  br i1 %tobool15, label %if.then16, label %if.end

if.then16:                                        ; preds = %if.then12
  br label %do.body

do.body:                                          ; preds = %if.then16
  br label %do.end

do.end:                                           ; preds = %do.body
  br label %if.end

if.end:                                           ; preds = %do.end, %if.then12
  br label %if.end17

if.end17:                                         ; preds = %if.end, %land.lhs.true, %for.body4
  br label %for.inc18

for.inc18:                                        ; preds = %if.end17
  %27 = load i32, i32* %i, align 4
  %inc19 = add nsw i32 %27, 1
  store i32 %inc19, i32* %i, align 4
  br label %for.cond2

for.end20:                                        ; preds = %for.cond2
  br label %if.end21

if.end21:                                         ; preds = %for.end20, %for.end
  store i32 0, i32* %i, align 4
  br label %for.cond22

for.cond22:                                       ; preds = %for.inc27, %if.end21
  %28 = load i32, i32* %i, align 4
  %29 = load %struct.intel8x0*, %struct.intel8x0** %chip, align 8
  %ncodecs = getelementptr inbounds %struct.intel8x0, %struct.intel8x0* %29, i32 0, i32 16
  %30 = load i32, i32* %ncodecs, align 8
  %cmp23 = icmp ult i32 %28, %30
  br i1 %cmp23, label %for.body24, label %for.end29

for.body24:                                       ; preds = %for.cond22
  %31 = load %struct.intel8x0*, %struct.intel8x0** %chip, align 8
  %ac97 = getelementptr inbounds %struct.intel8x0, %struct.intel8x0* %31, i32 0, i32 13
  %32 = load i32, i32* %i, align 4
  %idxprom25 = sext i32 %32 to i64
  %arrayidx26 = getelementptr inbounds [3 x %struct.snd_ac97*], [3 x %struct.snd_ac97*]* %ac97, i64 0, i64 %idxprom25
  %33 = load %struct.snd_ac97*, %struct.snd_ac97** %arrayidx26, align 8
  call void @snd_ac97_suspend(%struct.snd_ac97* %33)
  br label %for.inc27

for.inc27:                                        ; preds = %for.body24
  %34 = load i32, i32* %i, align 4
  %inc28 = add nsw i32 %34, 1
  store i32 %inc28, i32* %i, align 4
  br label %for.cond22

for.end29:                                        ; preds = %for.cond22
  %35 = load %struct.intel8x0*, %struct.intel8x0** %chip, align 8
  %device_type = getelementptr inbounds %struct.intel8x0, %struct.intel8x0* %35, i32 0, i32 0
  %36 = load i32, i32* %device_type, align 8
  %cmp30 = icmp eq i32 %36, 1
  br i1 %cmp30, label %if.then31, label %if.end33

if.then31:                                        ; preds = %for.end29
  %37 = load %struct.intel8x0*, %struct.intel8x0** %chip, align 8
  %call32 = call zeroext i8 @igetbyte(%struct.intel8x0* %37, i32 128)
  %conv = zext i8 %call32 to i32
  %38 = load %struct.intel8x0*, %struct.intel8x0** %chip, align 8
  %sdm_saved = getelementptr inbounds %struct.intel8x0, %struct.intel8x0* %38, i32 0, i32 11
  store i32 %conv, i32* %sdm_saved, align 8
  br label %if.end33

if.end33:                                         ; preds = %if.then31, %for.end29
  %39 = load %struct.intel8x0*, %struct.intel8x0** %chip, align 8
  %irq = getelementptr inbounds %struct.intel8x0, %struct.intel8x0* %39, i32 0, i32 1
  %40 = load i32, i32* %irq, align 4
  %cmp34 = icmp sge i32 %40, 0
  br i1 %cmp34, label %if.then36, label %if.end39

if.then36:                                        ; preds = %if.end33
  %41 = load %struct.intel8x0*, %struct.intel8x0** %chip, align 8
  %irq37 = getelementptr inbounds %struct.intel8x0, %struct.intel8x0* %41, i32 0, i32 1
  %42 = load i32, i32* %irq37, align 4
  %43 = load %struct.intel8x0*, %struct.intel8x0** %chip, align 8
  %44 = bitcast %struct.intel8x0* %43 to i8*
  call void @free_irq(i32 %42, i8* %44)
  %45 = load %struct.intel8x0*, %struct.intel8x0** %chip, align 8
  %irq38 = getelementptr inbounds %struct.intel8x0, %struct.intel8x0* %45, i32 0, i32 1
  store i32 -1, i32* %irq38, align 4
  br label %if.end39

if.end39:                                         ; preds = %if.then36, %if.end33
  ret i32 0
}

; Function Attrs: noinline nounwind optnone uwtable
define internal i32 @intel8x0_resume(%struct.device* %dev) #0 {
entry:
  %retval = alloca i32, align 4
  %dev.addr = alloca %struct.device*, align 8
  %pci = alloca %struct.pci_dev*, align 8
  %__mptr = alloca %struct.device*, align 8
  %tmp = alloca %struct.pci_dev*, align 8
  %card = alloca %struct.snd_card*, align 8
  %chip = alloca %struct.intel8x0*, align 8
  %i = alloca i32, align 4
  %ichdev = alloca %struct.ichdev*, align 8
  %runtime = alloca %struct.snd_pcm_runtime*, align 8
  %ichdev54 = alloca %struct.ichdev*, align 8
  %port = alloca i64, align 8
  store %struct.device* %dev, %struct.device** %dev.addr, align 8
  %0 = load %struct.device*, %struct.device** %dev.addr, align 8
  store %struct.device* %0, %struct.device** %__mptr, align 8
  %1 = load %struct.device*, %struct.device** %__mptr, align 8
  %2 = bitcast %struct.device* %1 to i8*
  %add.ptr = getelementptr inbounds i8, i8* %2, i64 -160
  %3 = bitcast i8* %add.ptr to %struct.pci_dev*
  store %struct.pci_dev* %3, %struct.pci_dev** %tmp, align 8
  %4 = load %struct.pci_dev*, %struct.pci_dev** %tmp, align 8
  store %struct.pci_dev* %4, %struct.pci_dev** %pci, align 8
  %5 = load %struct.device*, %struct.device** %dev.addr, align 8
  %call = call i8* @dev_get_drvdata(%struct.device* %5)
  %6 = bitcast i8* %call to %struct.snd_card*
  store %struct.snd_card* %6, %struct.snd_card** %card, align 8
  %7 = load %struct.snd_card*, %struct.snd_card** %card, align 8
  %private_data = getelementptr inbounds %struct.snd_card, %struct.snd_card* %7, i32 0, i32 9
  %8 = load i8*, i8** %private_data, align 8
  %9 = bitcast i8* %8 to %struct.intel8x0*
  store %struct.intel8x0* %9, %struct.intel8x0** %chip, align 8
  %10 = load %struct.intel8x0*, %struct.intel8x0** %chip, align 8
  %call1 = call i32 @snd_intel8x0_chip_init(%struct.intel8x0* %10, i32 0)
  %11 = load %struct.pci_dev*, %struct.pci_dev** %pci, align 8
  %irq = getelementptr inbounds %struct.pci_dev, %struct.pci_dev* %11, i32 0, i32 37
  %12 = load i32, i32* %irq, align 4
  %13 = load %struct.intel8x0*, %struct.intel8x0** %chip, align 8
  %14 = bitcast %struct.intel8x0* %13 to i8*
  %call2 = call i32 @request_irq(i32 %12, i32 (i32, i8*)* @snd_intel8x0_interrupt, i64 128, i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str, i32 0, i32 0), i8* %14)
  %tobool = icmp ne i32 %call2, 0
  br i1 %tobool, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %15 = load %struct.device*, %struct.device** %dev.addr, align 8
  %16 = load %struct.pci_dev*, %struct.pci_dev** %pci, align 8
  %irq3 = getelementptr inbounds %struct.pci_dev, %struct.pci_dev* %16, i32 0, i32 37
  %17 = load i32, i32* %irq3, align 4
  call void (%struct.device*, i8*, ...) @dev_err(%struct.device* %15, i8* getelementptr inbounds ([41 x i8], [41 x i8]* @.str.135, i32 0, i32 0), i32 %17)
  %18 = load %struct.snd_card*, %struct.snd_card** %card, align 8
  %call4 = call i32 @snd_card_disconnect(%struct.snd_card* %18)
  store i32 -5, i32* %retval, align 4
  br label %return

if.end:                                           ; preds = %entry
  %19 = load %struct.pci_dev*, %struct.pci_dev** %pci, align 8
  %irq5 = getelementptr inbounds %struct.pci_dev, %struct.pci_dev* %19, i32 0, i32 37
  %20 = load i32, i32* %irq5, align 4
  %21 = load %struct.intel8x0*, %struct.intel8x0** %chip, align 8
  %irq6 = getelementptr inbounds %struct.intel8x0, %struct.intel8x0* %21, i32 0, i32 1
  store i32 %20, i32* %irq6, align 4
  %22 = load %struct.intel8x0*, %struct.intel8x0** %chip, align 8
  %irq7 = getelementptr inbounds %struct.intel8x0, %struct.intel8x0* %22, i32 0, i32 1
  %23 = load i32, i32* %irq7, align 4
  call void @synchronize_irq(i32 %23)
  %24 = load %struct.intel8x0*, %struct.intel8x0** %chip, align 8
  %device_type = getelementptr inbounds %struct.intel8x0, %struct.intel8x0* %24, i32 0, i32 0
  %25 = load i32, i32* %device_type, align 8
  %cmp = icmp eq i32 %25, 1
  br i1 %cmp, label %land.lhs.true, label %if.end11

land.lhs.true:                                    ; preds = %if.end
  %26 = load i32, i32* @spdif_aclink, align 4
  %tobool8 = icmp ne i32 %26, 0
  br i1 %tobool8, label %if.end11, label %if.then9

if.then9:                                         ; preds = %land.lhs.true
  %27 = load %struct.intel8x0*, %struct.intel8x0** %chip, align 8
  %28 = load %struct.intel8x0*, %struct.intel8x0** %chip, align 8
  %sdm_saved = getelementptr inbounds %struct.intel8x0, %struct.intel8x0* %28, i32 0, i32 11
  %29 = load i32, i32* %sdm_saved, align 8
  %conv = trunc i32 %29 to i8
  call void @iputbyte(%struct.intel8x0* %27, i32 128, i8 zeroext %conv)
  %30 = load %struct.intel8x0*, %struct.intel8x0** %chip, align 8
  %31 = load %struct.intel8x0*, %struct.intel8x0** %chip, align 8
  %call10 = call i32 @igetdword(%struct.intel8x0* %31, i32 44)
  %and = and i32 %call10, 1073741823
  %or = or i32 %and, -1073741824
  call void @iputdword(%struct.intel8x0* %30, i32 44, i32 %or)
  br label %if.end11

if.end11:                                         ; preds = %if.then9, %land.lhs.true, %if.end
  %32 = load %struct.intel8x0*, %struct.intel8x0** %chip, align 8
  %fix_nocache = getelementptr inbounds %struct.intel8x0, %struct.intel8x0* %32, i32 0, i32 9
  %bf.load = load i16, i16* %fix_nocache, align 8
  %bf.lshr = lshr i16 %bf.load, 8
  %bf.clear = and i16 %bf.lshr, 1
  %bf.cast = zext i16 %bf.clear to i32
  %tobool12 = icmp ne i32 %bf.cast, 0
  br i1 %tobool12, label %if.then13, label %if.end14

if.then13:                                        ; preds = %if.end11
  br label %do.body

do.body:                                          ; preds = %if.then13
  br label %do.end

do.end:                                           ; preds = %do.body
  br label %if.end14

if.end14:                                         ; preds = %do.end, %if.end11
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %if.end14
  %33 = load i32, i32* %i, align 4
  %34 = load %struct.intel8x0*, %struct.intel8x0** %chip, align 8
  %ncodecs = getelementptr inbounds %struct.intel8x0, %struct.intel8x0* %34, i32 0, i32 16
  %35 = load i32, i32* %ncodecs, align 8
  %cmp15 = icmp ult i32 %33, %35
  br i1 %cmp15, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %36 = load %struct.intel8x0*, %struct.intel8x0** %chip, align 8
  %ac97 = getelementptr inbounds %struct.intel8x0, %struct.intel8x0* %36, i32 0, i32 13
  %37 = load i32, i32* %i, align 4
  %idxprom = sext i32 %37 to i64
  %arrayidx = getelementptr inbounds [3 x %struct.snd_ac97*], [3 x %struct.snd_ac97*]* %ac97, i64 0, i64 %idxprom
  %38 = load %struct.snd_ac97*, %struct.snd_ac97** %arrayidx, align 8
  call void @snd_ac97_resume(%struct.snd_ac97* %38)
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %39 = load i32, i32* %i, align 4
  %inc = add nsw i32 %39, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %40 = load %struct.intel8x0*, %struct.intel8x0** %chip, align 8
  %fix_nocache17 = getelementptr inbounds %struct.intel8x0, %struct.intel8x0* %40, i32 0, i32 9
  %bf.load18 = load i16, i16* %fix_nocache17, align 8
  %bf.lshr19 = lshr i16 %bf.load18, 8
  %bf.clear20 = and i16 %bf.lshr19, 1
  %bf.cast21 = zext i16 %bf.clear20 to i32
  %tobool22 = icmp ne i32 %bf.cast21, 0
  br i1 %tobool22, label %if.then23, label %if.end48

if.then23:                                        ; preds = %for.end
  store i32 0, i32* %i, align 4
  br label %for.cond24

for.cond24:                                       ; preds = %for.inc45, %if.then23
  %41 = load i32, i32* %i, align 4
  %42 = load %struct.intel8x0*, %struct.intel8x0** %chip, align 8
  %bdbars_count = getelementptr inbounds %struct.intel8x0, %struct.intel8x0* %42, i32 0, i32 21
  %43 = load i32, i32* %bdbars_count, align 4
  %cmp25 = icmp ult i32 %41, %43
  br i1 %cmp25, label %for.body27, label %for.end47

for.body27:                                       ; preds = %for.cond24
  %44 = load %struct.intel8x0*, %struct.intel8x0** %chip, align 8
  %ichd = getelementptr inbounds %struct.intel8x0, %struct.intel8x0* %44, i32 0, i32 8
  %45 = load i32, i32* %i, align 4
  %idxprom28 = sext i32 %45 to i64
  %arrayidx29 = getelementptr inbounds [6 x %struct.ichdev], [6 x %struct.ichdev]* %ichd, i64 0, i64 %idxprom28
  store %struct.ichdev* %arrayidx29, %struct.ichdev** %ichdev, align 8
  %46 = load %struct.ichdev*, %struct.ichdev** %ichdev, align 8
  %substream = getelementptr inbounds %struct.ichdev, %struct.ichdev* %46, i32 0, i32 4
  %47 = load %struct.snd_pcm_substream*, %struct.snd_pcm_substream** %substream, align 8
  %tobool30 = icmp ne %struct.snd_pcm_substream* %47, null
  br i1 %tobool30, label %land.lhs.true31, label %if.end44

land.lhs.true31:                                  ; preds = %for.body27
  %48 = load %struct.ichdev*, %struct.ichdev** %ichdev, align 8
  %page_attr_changed = getelementptr inbounds %struct.ichdev, %struct.ichdev* %48, i32 0, i32 25
  %bf.load32 = load i8, i8* %page_attr_changed, align 4
  %bf.clear33 = and i8 %bf.load32, 1
  %bf.cast34 = zext i8 %bf.clear33 to i32
  %tobool35 = icmp ne i32 %bf.cast34, 0
  br i1 %tobool35, label %if.then36, label %if.end44

if.then36:                                        ; preds = %land.lhs.true31
  %49 = load %struct.ichdev*, %struct.ichdev** %ichdev, align 8
  %substream37 = getelementptr inbounds %struct.ichdev, %struct.ichdev* %49, i32 0, i32 4
  %50 = load %struct.snd_pcm_substream*, %struct.snd_pcm_substream** %substream37, align 8
  %runtime38 = getelementptr inbounds %struct.snd_pcm_substream, %struct.snd_pcm_substream* %50, i32 0, i32 11
  %51 = load %struct.snd_pcm_runtime*, %struct.snd_pcm_runtime** %runtime38, align 8
  store %struct.snd_pcm_runtime* %51, %struct.snd_pcm_runtime** %runtime, align 8
  %52 = load %struct.snd_pcm_runtime*, %struct.snd_pcm_runtime** %runtime, align 8
  %dma_area = getelementptr inbounds %struct.snd_pcm_runtime, %struct.snd_pcm_runtime* %52, i32 0, i32 49
  %53 = load i8*, i8** %dma_area, align 8
  %tobool39 = icmp ne i8* %53, null
  br i1 %tobool39, label %if.then40, label %if.end43

if.then40:                                        ; preds = %if.then36
  br label %do.body41

do.body41:                                        ; preds = %if.then40
  br label %do.end42

do.end42:                                         ; preds = %do.body41
  br label %if.end43

if.end43:                                         ; preds = %do.end42, %if.then36
  br label %if.end44

if.end44:                                         ; preds = %if.end43, %land.lhs.true31, %for.body27
  br label %for.inc45

for.inc45:                                        ; preds = %if.end44
  %54 = load i32, i32* %i, align 4
  %inc46 = add nsw i32 %54, 1
  store i32 %inc46, i32* %i, align 4
  br label %for.cond24

for.end47:                                        ; preds = %for.cond24
  br label %if.end48

if.end48:                                         ; preds = %for.end47, %for.end
  store i32 0, i32* %i, align 4
  br label %for.cond49

for.cond49:                                       ; preds = %for.inc84, %if.end48
  %55 = load i32, i32* %i, align 4
  %56 = load %struct.intel8x0*, %struct.intel8x0** %chip, align 8
  %bdbars_count50 = getelementptr inbounds %struct.intel8x0, %struct.intel8x0* %56, i32 0, i32 21
  %57 = load i32, i32* %bdbars_count50, align 4
  %cmp51 = icmp ult i32 %55, %57
  br i1 %cmp51, label %for.body53, label %for.end86

for.body53:                                       ; preds = %for.cond49
  %58 = load %struct.intel8x0*, %struct.intel8x0** %chip, align 8
  %ichd55 = getelementptr inbounds %struct.intel8x0, %struct.intel8x0* %58, i32 0, i32 8
  %59 = load i32, i32* %i, align 4
  %idxprom56 = sext i32 %59 to i64
  %arrayidx57 = getelementptr inbounds [6 x %struct.ichdev], [6 x %struct.ichdev]* %ichd55, i64 0, i64 %idxprom56
  store %struct.ichdev* %arrayidx57, %struct.ichdev** %ichdev54, align 8
  %60 = load %struct.ichdev*, %struct.ichdev** %ichdev54, align 8
  %reg_offset = getelementptr inbounds %struct.ichdev, %struct.ichdev* %60, i32 0, i32 1
  %61 = load i64, i64* %reg_offset, align 8
  store i64 %61, i64* %port, align 8
  %62 = load %struct.ichdev*, %struct.ichdev** %ichdev54, align 8
  %substream58 = getelementptr inbounds %struct.ichdev, %struct.ichdev* %62, i32 0, i32 4
  %63 = load %struct.snd_pcm_substream*, %struct.snd_pcm_substream** %substream58, align 8
  %tobool59 = icmp ne %struct.snd_pcm_substream* %63, null
  br i1 %tobool59, label %lor.lhs.false, label %if.then65

lor.lhs.false:                                    ; preds = %for.body53
  %64 = load %struct.ichdev*, %struct.ichdev** %ichdev54, align 8
  %suspended = getelementptr inbounds %struct.ichdev, %struct.ichdev* %64, i32 0, i32 25
  %bf.load60 = load i8, i8* %suspended, align 4
  %bf.lshr61 = lshr i8 %bf.load60, 1
  %bf.clear62 = and i8 %bf.lshr61, 1
  %bf.cast63 = zext i8 %bf.clear62 to i32
  %tobool64 = icmp ne i32 %bf.cast63, 0
  br i1 %tobool64, label %if.end66, label %if.then65

if.then65:                                        ; preds = %lor.lhs.false, %for.body53
  br label %for.inc84

if.end66:                                         ; preds = %lor.lhs.false
  %65 = load %struct.ichdev*, %struct.ichdev** %ichdev54, align 8
  %ichd67 = getelementptr inbounds %struct.ichdev, %struct.ichdev* %65, i32 0, i32 0
  %66 = load i32, i32* %ichd67, align 8
  %cmp68 = icmp eq i32 %66, 1
  br i1 %cmp68, label %if.then70, label %if.end73

if.then70:                                        ; preds = %if.end66
  %67 = load %struct.intel8x0*, %struct.intel8x0** %chip, align 8
  %68 = load %struct.ichdev*, %struct.ichdev** %ichdev54, align 8
  %substream71 = getelementptr inbounds %struct.ichdev, %struct.ichdev* %68, i32 0, i32 4
  %69 = load %struct.snd_pcm_substream*, %struct.snd_pcm_substream** %substream71, align 8
  %runtime72 = getelementptr inbounds %struct.snd_pcm_substream, %struct.snd_pcm_substream* %69, i32 0, i32 11
  %70 = load %struct.snd_pcm_runtime*, %struct.snd_pcm_runtime** %runtime72, align 8
  call void @snd_intel8x0_setup_pcm_out(%struct.intel8x0* %67, %struct.snd_pcm_runtime* %70)
  br label %if.end73

if.end73:                                         ; preds = %if.then70, %if.end66
  %71 = load %struct.intel8x0*, %struct.intel8x0** %chip, align 8
  %72 = load i64, i64* %port, align 8
  %add = add i64 %72, 0
  %conv74 = trunc i64 %add to i32
  %73 = load %struct.ichdev*, %struct.ichdev** %ichdev54, align 8
  %bdbar_addr = getelementptr inbounds %struct.ichdev, %struct.ichdev* %73, i32 0, i32 3
  %74 = load i32, i32* %bdbar_addr, align 8
  call void @iputdword(%struct.intel8x0* %71, i32 %conv74, i32 %74)
  %75 = load %struct.intel8x0*, %struct.intel8x0** %chip, align 8
  %76 = load i64, i64* %port, align 8
  %add75 = add i64 %76, 5
  %conv76 = trunc i64 %add75 to i32
  %77 = load %struct.ichdev*, %struct.ichdev** %ichdev54, align 8
  %lvi = getelementptr inbounds %struct.ichdev, %struct.ichdev* %77, i32 0, i32 13
  %78 = load i32, i32* %lvi, align 8
  %conv77 = trunc i32 %78 to i8
  call void @iputbyte(%struct.intel8x0* %75, i32 %conv76, i8 zeroext %conv77)
  %79 = load %struct.intel8x0*, %struct.intel8x0** %chip, align 8
  %80 = load i64, i64* %port, align 8
  %add78 = add i64 %80, 4
  %conv79 = trunc i64 %add78 to i32
  %81 = load %struct.ichdev*, %struct.ichdev** %ichdev54, align 8
  %civ = getelementptr inbounds %struct.ichdev, %struct.ichdev* %81, i32 0, i32 15
  %82 = load i32, i32* %civ, align 8
  %conv80 = trunc i32 %82 to i8
  call void @iputbyte(%struct.intel8x0* %79, i32 %conv79, i8 zeroext %conv80)
  %83 = load %struct.intel8x0*, %struct.intel8x0** %chip, align 8
  %84 = load i64, i64* %port, align 8
  %85 = load %struct.ichdev*, %struct.ichdev** %ichdev54, align 8
  %roff_sr = getelementptr inbounds %struct.ichdev, %struct.ichdev* %85, i32 0, i32 19
  %86 = load i32, i32* %roff_sr, align 8
  %conv81 = zext i32 %86 to i64
  %add82 = add i64 %84, %conv81
  %conv83 = trunc i64 %add82 to i32
  call void @iputbyte(%struct.intel8x0* %83, i32 %conv83, i8 zeroext 28)
  br label %for.inc84

for.inc84:                                        ; preds = %if.end73, %if.then65
  %87 = load i32, i32* %i, align 4
  %inc85 = add nsw i32 %87, 1
  store i32 %inc85, i32* %i, align 4
  br label %for.cond49

for.end86:                                        ; preds = %for.cond49
  %88 = load %struct.snd_card*, %struct.snd_card** %card, align 8
  call void @snd_power_change_state(%struct.snd_card* %88, i32 0)
  store i32 0, i32* %retval, align 4
  br label %return

return:                                           ; preds = %for.end86, %if.then
  %89 = load i32, i32* %retval, align 4
  ret i32 %89
}

; Function Attrs: noinline nounwind optnone uwtable
define internal void @snd_power_change_state(%struct.snd_card* %card, i32 %state) #0 {
entry:
  %card.addr = alloca %struct.snd_card*, align 8
  %state.addr = alloca i32, align 4
  store %struct.snd_card* %card, %struct.snd_card** %card.addr, align 8
  store i32 %state, i32* %state.addr, align 4
  %0 = load i32, i32* %state.addr, align 4
  %1 = load %struct.snd_card*, %struct.snd_card** %card.addr, align 8
  %power_state = getelementptr inbounds %struct.snd_card, %struct.snd_card* %1, i32 0, i32 33
  store i32 %0, i32* %power_state, align 4
  %2 = load %struct.snd_card*, %struct.snd_card** %card.addr, align 8
  %power_sleep = getelementptr inbounds %struct.snd_card, %struct.snd_card* %2, i32 0, i32 35
  call void @__wake_up(%struct.__wait_queue_head* %power_sleep, i32 3, i32 1, i8* null)
  ret void
}

declare i32 @snd_pcm_suspend_all(%struct.snd_pcm*) #1

declare void @snd_ac97_suspend(%struct.snd_ac97*) #1

declare void @__wake_up(%struct.__wait_queue_head*, i32, i32, i8*) #1

declare i32 @snd_card_disconnect(%struct.snd_card*) #1

declare void @synchronize_irq(i32) #1

declare void @snd_ac97_resume(%struct.snd_ac97*) #1

attributes #0 = { noinline nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { argmemonly nounwind }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 5.0.1 (tags/RELEASE_500/final)"}
!2 = !{i32 -2146156925}
!3 = !{i32 -2146185727}
!4 = !{i32 -2147283712}
!5 = !{i32 -2147283674}
!6 = !{i32 1024238}
!7 = !{i32 -2146157752}
