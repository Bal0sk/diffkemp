; ModuleID = 'sound/pci/intel8x0.bc'
source_filename = "sound/pci/intel8x0.c"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%struct.kernel_param_ops = type { i32 (i8*, %struct.kernel_param*)*, i32 (i8*, %struct.kernel_param*)*, void (i8*)* }
%struct.kernel_param = type { i8*, %struct.kernel_param_ops*, i16, i16, %union.anon }
%union.anon = type { i8* }
%struct.smp_ops = type { void ()*, void (i32)*, void (i32)*, void (i32)*, void (i32)*, i32 (i32)*, i32 ()*, void (i32)*, void ()*, void (%struct.cpumask*)*, void (i32)* }
%struct.cpumask = type { [1 x i64] }
%struct.pci_device_id = type { i32, i32, i32, i32, i32, i32, i64 }
%struct.list_head = type { %struct.list_head*, %struct.list_head* }
%struct.pci_dev = type { %struct.list_head, %struct.pci_bus*, %struct.pci_bus*, i8*, %struct.proc_dir_entry*, %struct.pci_slot*, i32, i16, i16, i16, i16, i32, i8, i8, i8, i8, i8, i8, %struct.pci_driver*, i64, %struct.device_dma_parameters, i32, i32, i16, i32, %struct.pcie_link_state*, i32, %struct.device, i32, i32, [18 x %struct.resource], [18 x i64], i24, i16, %struct.atomic_t, [16 x i32], %struct.hlist_head, %struct.bin_attribute*, i32, [18 x %struct.bin_attribute*], [18 x %struct.bin_attribute*], %struct.list_head, %struct.pci_vpd*, %union.anon.16, %struct.pci_ats* }
%struct.pci_bus = type { %struct.list_head, %struct.pci_bus*, %struct.list_head, %struct.list_head, %struct.pci_dev*, %struct.list_head, [4 x %struct.resource*], %struct.list_head, %struct.pci_ops*, i8*, %struct.proc_dir_entry*, i8, i8, i8, i8, i8, i8, [48 x i8], i16, i16, %struct.device*, %struct.device, %struct.bin_attribute*, %struct.bin_attribute*, i8 }
%struct.resource = type { i64, i64, i8*, i64, %struct.resource*, %struct.resource*, %struct.resource* }
%struct.pci_ops = type { i32 (%struct.pci_bus*, i32, i32, i32, i32*)*, i32 (%struct.pci_bus*, i32, i32, i32, i32)* }
%struct.proc_dir_entry = type opaque
%struct.pci_slot = type { %struct.pci_bus*, %struct.list_head, %struct.hotplug_slot*, i8, %struct.kobject }
%struct.hotplug_slot = type opaque
%struct.kobject = type { i8*, %struct.list_head, %struct.kobject*, %struct.kset*, %struct.kobj_type*, %struct.sysfs_dirent*, %struct.kref, i8 }
%struct.kset = type { %struct.list_head, %struct.spinlock, %struct.kobject, %struct.kset_uevent_ops* }
%struct.spinlock = type { %union.anon.0 }
%union.anon.0 = type { %struct.raw_spinlock }
%struct.raw_spinlock = type { %struct.arch_spinlock }
%struct.arch_spinlock = type { i32 }
%struct.kset_uevent_ops = type { i32 (%struct.kset*, %struct.kobject*)*, i8* (%struct.kset*, %struct.kobject*)*, i32 (%struct.kset*, %struct.kobject*, %struct.kobj_uevent_env*)* }
%struct.kobj_uevent_env = type { [32 x i8*], i32, [2048 x i8], i32 }
%struct.kobj_type = type { void (%struct.kobject*)*, %struct.sysfs_ops*, %struct.attribute**, %struct.kobj_ns_type_operations* (%struct.kobject*)*, i8* (%struct.kobject*)* }
%struct.sysfs_ops = type { i64 (%struct.kobject*, %struct.attribute*, i8*)*, i64 (%struct.kobject*, %struct.attribute*, i8*, i64)* }
%struct.attribute = type { i8*, i32 }
%struct.kobj_ns_type_operations = type { i32, i8* ()*, i8* (%struct.sock*)*, i8* ()*, void (i8*)* }
%struct.sock = type opaque
%struct.sysfs_dirent = type opaque
%struct.kref = type { %struct.atomic_t }
%struct.pci_driver = type { %struct.list_head, i8*, %struct.pci_device_id*, i32 (%struct.pci_dev*, %struct.pci_device_id*)*, {}*, i32 (%struct.pci_dev*, i32)*, i32 (%struct.pci_dev*, i32)*, i32 (%struct.pci_dev*)*, i32 (%struct.pci_dev*)*, {}*, %struct.pci_error_handlers*, %struct.device_driver, %struct.pci_dynids }
%struct.device_dma_parameters = type { i32, i64 }
%struct.pcie_link_state = type opaque
%struct.device = type { %struct.device*, %struct.device_private*, %struct.kobject, i8*, %struct.device_type*, %struct.mutex, %struct.bus_type*, %struct.device_driver*, i8*, %struct.dev_pm_info, %struct.dev_power_domain*, i32, i64*, i64, %struct.device_dma_parameters*, %struct.list_head, %struct.dma_coherent_mem*, %struct.dev_archdata, %struct.device_node*, i32, %struct.spinlock, %struct.list_head, %struct.klist_node, %struct.class*, %struct.attribute_group**, void (%struct.device*)* }
%struct.device_private = type opaque
%struct.device_type = type { i8*, %struct.attribute_group**, i32 (%struct.device*, %struct.kobj_uevent_env*)*, i8* (%struct.device*, i32*)*, void (%struct.device*)*, %struct.dev_pm_ops* }
%struct.dev_pm_ops = type { i32 (%struct.device*)*, void (%struct.device*)*, i32 (%struct.device*)*, i32 (%struct.device*)*, i32 (%struct.device*)*, i32 (%struct.device*)*, i32 (%struct.device*)*, i32 (%struct.device*)*, i32 (%struct.device*)*, i32 (%struct.device*)*, i32 (%struct.device*)*, i32 (%struct.device*)*, i32 (%struct.device*)*, i32 (%struct.device*)*, i32 (%struct.device*)*, i32 (%struct.device*)*, i32 (%struct.device*)* }
%struct.mutex = type { %struct.atomic_t, %struct.spinlock, %struct.list_head, %struct.task_struct* }
%struct.task_struct = type { i64, i8*, %struct.atomic_t, i32, i32, %struct.task_struct*, i32, i32, i32, i32, i32, i32, %struct.sched_class*, %struct.sched_entity, %struct.sched_rt_entity, i8, i32, i32, %struct.cpumask, %struct.sched_info, %struct.list_head, %struct.plist_node, %struct.mm_struct*, %struct.mm_struct*, %struct.task_rss_stat, i32, i32, i32, i32, i32, i32, i8, i32, i32, %struct.task_struct*, %struct.task_struct*, %struct.list_head, %struct.list_head, %struct.task_struct*, %struct.list_head, %struct.list_head, [3 x %struct.pid_link], %struct.list_head, %struct.completion*, i32*, i32*, i64, i64, i64, i64, i64, i64, i64, i64, i64, %struct.timespec, %struct.timespec, i64, i64, %struct.task_cputime, [3 x %struct.list_head], %struct.cred*, %struct.cred*, %struct.cred*, [16 x i8], i32, i32, %struct.sysv_sem, %struct.thread_struct, %struct.fs_struct*, %struct.files_struct*, %struct.nsproxy*, %struct.signal_struct*, %struct.sighand_struct*, %struct.sigset_t, %struct.sigset_t, %struct.sigset_t, %struct.sigpending, i64, i64, i32 (i8*)*, i8*, %struct.sigset_t*, %struct.audit_context*, i32, i32, %struct.seccomp_t, i32, i32, %struct.spinlock, %struct.irqaction*, %struct.raw_spinlock, %struct.plist_head, %struct.rt_mutex_waiter*, i8*, %struct.bio_list*, %struct.blk_plug*, %struct.reclaim_state*, %struct.backing_dev_info*, %struct.io_context*, i64, %struct.siginfo*, %struct.task_io_accounting, i64, i64, i64, %struct.nodemask_t, i32, i32, i32, %struct.css_set*, %struct.list_head, %struct.robust_list_head*, %struct.compat_robust_list_head*, %struct.list_head, %struct.futex_pi_state*, [2 x %struct.perf_event_context*], %struct.mutex, %struct.list_head, %struct.mempolicy*, i16, i16, %struct.atomic_t, %struct.rcu_head, %struct.pipe_inode_info*, %struct.task_delay_info*, %struct.prop_local_single, i64, i64, %struct.list_head*, i64, i64, %struct.atomic_t }
%struct.sched_class = type { %struct.sched_class*, void (%struct.rq*, %struct.task_struct*, i32)*, void (%struct.rq*, %struct.task_struct*, i32)*, void (%struct.rq*)*, i1 (%struct.rq*, %struct.task_struct*, i1)*, void (%struct.rq*, %struct.task_struct*, i32)*, %struct.task_struct* (%struct.rq*)*, void (%struct.rq*, %struct.task_struct*)*, i32 (%struct.task_struct*, i32, i32)*, void (%struct.rq*, %struct.task_struct*)*, void (%struct.rq*)*, void (%struct.task_struct*)*, void (%struct.rq*, %struct.task_struct*)*, void (%struct.task_struct*, %struct.cpumask*)*, void (%struct.rq*)*, void (%struct.rq*)*, void (%struct.rq*)*, void (%struct.rq*, %struct.task_struct*, i32)*, void (%struct.task_struct*)*, void (%struct.rq*, %struct.task_struct*)*, void (%struct.rq*, %struct.task_struct*)*, void (%struct.rq*, %struct.task_struct*, i32)*, i32 (%struct.rq*, %struct.task_struct*)*, void (%struct.task_struct*, i32)* }
%struct.rq = type opaque
%struct.sched_entity = type { %struct.load_weight, %struct.rb_node, %struct.list_head, i32, i64, i64, i64, i64, i64, %struct.sched_statistics, %struct.sched_entity*, %struct.cfs_rq*, %struct.cfs_rq* }
%struct.load_weight = type { i64, i64 }
%struct.rb_node = type { i64, %struct.rb_node*, %struct.rb_node* }
%struct.sched_statistics = type { i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64 }
%struct.cfs_rq = type opaque
%struct.sched_rt_entity = type { %struct.list_head, i64, i32, i32, %struct.sched_rt_entity* }
%struct.sched_info = type { i64, i64, i64, i64 }
%struct.plist_node = type { i32, %struct.list_head, %struct.list_head }
%struct.mm_struct = type { %struct.vm_area_struct*, %struct.rb_root, %struct.vm_area_struct*, i64 (%struct.file*, i64, i64, i64, i64)*, void (%struct.mm_struct*, i64)*, i64, i64, i64, i64, %struct.pgd_t*, %struct.atomic_t, %struct.atomic_t, i32, %struct.spinlock, %struct.rw_semaphore, %struct.list_head, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, [44 x i64], %struct.mm_rss_stat, %struct.linux_binfmt*, [1 x %struct.cpumask], %struct.mm_context_t, i32, i32, i32, %struct.atomic_t, i64, %struct.core_state*, %struct.spinlock, %struct.hlist_head, %struct.file*, i64 }
%struct.rb_root = type { %struct.rb_node* }
%struct.vm_area_struct = type { %struct.mm_struct*, i64, i64, %struct.vm_area_struct*, %struct.vm_area_struct*, %struct.pgprot, i64, %struct.rb_node, %union.anon.6, %struct.list_head, %struct.anon_vma*, %struct.vm_operations_struct*, i64, %struct.file*, i8*, %struct.mempolicy* }
%struct.pgprot = type { i64 }
%union.anon.6 = type { %struct.anon.7 }
%struct.anon.7 = type { %struct.list_head, i8*, %struct.vm_area_struct* }
%struct.anon_vma = type opaque
%struct.vm_operations_struct = type { void (%struct.vm_area_struct*)*, void (%struct.vm_area_struct*)*, i32 (%struct.vm_area_struct*, %struct.vm_fault*)*, i32 (%struct.vm_area_struct*, %struct.vm_fault*)*, i32 (%struct.vm_area_struct*, i64, i8*, i32, i32)*, i32 (%struct.vm_area_struct*, %struct.mempolicy*)*, %struct.mempolicy* (%struct.vm_area_struct*, i64)*, i32 (%struct.vm_area_struct*, %struct.nodemask_t*, %struct.nodemask_t*, i64)* }
%struct.vm_fault = type { i32, i64, i8*, %struct.page* }
%struct.page = type { i64, %struct.atomic_t, %union.anon.1, %union.anon.2, %union.anon.15, %struct.list_head }
%union.anon.1 = type { %struct.atomic_t }
%union.anon.2 = type { %struct.anon.3 }
%struct.anon.3 = type { i64, %struct.address_space* }
%struct.address_space = type { %struct.inode*, %struct.radix_tree_root, %struct.spinlock, i32, %struct.prio_tree_root, %struct.list_head, %struct.mutex, i64, i64, %struct.address_space_operations*, i64, %struct.backing_dev_info*, %struct.spinlock, %struct.list_head, %struct.address_space* }
%struct.inode = type { i16, i32, i32, %struct.inode_operations*, %struct.super_block*, %struct.spinlock, i32, i64, i8*, %struct.mutex, i64, %struct.hlist_node, %struct.list_head, %struct.list_head, %struct.list_head, %union.anon.17, i64, %struct.atomic_t, i32, i32, i32, i64, i64, %struct.timespec, %struct.timespec, %struct.timespec, i64, i16, %struct.rw_semaphore, %struct.file_operations*, %struct.file_lock*, %struct.address_space*, %struct.address_space, [2 x %struct.dquot*], %struct.list_head, %union.anon.18, i32, i32, %struct.hlist_head, %struct.atomic_t, %struct.posix_acl*, %struct.posix_acl*, i8* }
%struct.inode_operations = type { %struct.dentry* (%struct.inode*, %struct.dentry*, %struct.nameidata*)*, i8* (%struct.dentry*, %struct.nameidata*)*, i32 (%struct.inode*, i32, i32)*, i32 (%struct.inode*, i32, i32)*, i32 (%struct.dentry*, i8*, i32)*, void (%struct.dentry*, %struct.nameidata*, i8*)*, i32 (%struct.inode*, %struct.dentry*, i32, %struct.nameidata*)*, i32 (%struct.dentry*, %struct.inode*, %struct.dentry*)*, i32 (%struct.inode*, %struct.dentry*)*, i32 (%struct.inode*, %struct.dentry*, i8*)*, i32 (%struct.inode*, %struct.dentry*, i32)*, i32 (%struct.inode*, %struct.dentry*)*, i32 (%struct.inode*, %struct.dentry*, i32, i32)*, i32 (%struct.inode*, %struct.dentry*, %struct.inode*, %struct.dentry*)*, void (%struct.inode*)*, i32 (%struct.dentry*, %struct.iattr*)*, i32 (%struct.vfsmount*, %struct.dentry*, %struct.kstat*)*, i32 (%struct.dentry*, i8*, i8*, i64, i32)*, i64 (%struct.dentry*, i8*, i8*, i64)*, i64 (%struct.dentry*, i8*, i64)*, i32 (%struct.dentry*, i8*)*, void (%struct.inode*, i64, i64)*, i32 (%struct.inode*, %struct.fiemap_extent_info*, i64, i64)*, [8 x i8] }
%struct.dentry = type { i32, %struct.seqcount, %struct.hlist_bl_node, %struct.dentry*, %struct.qstr, %struct.inode*, [32 x i8], i32, %struct.spinlock, %struct.dentry_operations*, %struct.super_block*, i64, i8*, %struct.list_head, %union.anon.5, %struct.list_head, %struct.list_head }
%struct.seqcount = type { i32 }
%struct.hlist_bl_node = type { %struct.hlist_bl_node*, %struct.hlist_bl_node** }
%struct.qstr = type { i32, i32, i8* }
%struct.dentry_operations = type { i32 (%struct.dentry*, %struct.nameidata*)*, i32 (%struct.dentry*, %struct.inode*, %struct.qstr*)*, i32 (%struct.dentry*, %struct.inode*, %struct.dentry*, %struct.inode*, i32, i8*, %struct.qstr*)*, i32 (%struct.dentry*)*, void (%struct.dentry*)*, void (%struct.dentry*, %struct.inode*)*, i8* (%struct.dentry*, i8*, i32)*, %struct.vfsmount* (%struct.path*)*, i32 (%struct.dentry*, i1)*, [56 x i8] }
%struct.vfsmount = type opaque
%struct.path = type { %struct.vfsmount*, %struct.dentry* }
%union.anon.5 = type { %struct.list_head }
%struct.nameidata = type opaque
%struct.iattr = type { i32, i16, i32, i32, i64, %struct.timespec, %struct.timespec, %struct.timespec, %struct.file* }
%struct.kstat = type { i64, i32, i16, i32, i32, i32, i32, i64, %struct.timespec, %struct.timespec, %struct.timespec, i64, i64 }
%struct.fiemap_extent_info = type { i32, i32, i32, %struct.fiemap_extent* }
%struct.fiemap_extent = type { i64, i64, i64, [2 x i64], i32, [3 x i32] }
%struct.super_block = type { %struct.list_head, i32, i8, i8, i64, i64, %struct.file_system_type*, %struct.super_operations*, %struct.dquot_operations*, %struct.quotactl_ops*, %struct.export_operations*, i64, i64, %struct.dentry*, %struct.rw_semaphore, %struct.mutex, i32, %struct.atomic_t, i8*, %struct.xattr_handler**, %struct.list_head, %struct.hlist_bl_head, %struct.list_head*, %struct.list_head, i32, %struct.block_device*, %struct.backing_dev_info*, %struct.mtd_info*, %struct.list_head, %struct.quota_info, i32, %struct.__wait_queue_head, [32 x i8], [16 x i8], i8*, i32, i32, %struct.mutex, i8*, i8*, %struct.dentry_operations*, i32 }
%struct.file_system_type = type { i8*, i32, %struct.dentry* (%struct.file_system_type*, i32, i8*, i8*)*, void (%struct.super_block*)*, %struct.module*, %struct.file_system_type*, %struct.list_head, %struct.lock_class_key, %struct.lock_class_key, %struct.lock_class_key, %struct.lock_class_key, %struct.lock_class_key, %struct.lock_class_key, %struct.lock_class_key }
%struct.module = type { i32, %struct.list_head, [56 x i8], %struct.module_kobject, %struct.module_attribute*, i8*, i8*, %struct.kobject*, %struct.kernel_symbol*, i64*, i32, %struct.kernel_param*, i32, i32, %struct.kernel_symbol*, i64*, %struct.kernel_symbol*, i64*, i32, i32, %struct.exception_table_entry*, i32 ()*, i8*, i8*, i32, i32, i32, i32, i32, i32, %struct.mod_arch_specific, i32, i32, %struct.list_head, %struct.bug_entry*, %struct.elf64_sym*, %struct.elf64_sym*, i32, i32, i8*, i8*, %struct.module_sect_attrs*, %struct.module_notes_attrs*, i8*, i8*, i32, i32, %struct.tracepoint**, i32, i8**, %struct.ftrace_event_call**, i32, %struct.list_head, %struct.list_head, %struct.task_struct*, void ()*, %struct.module_ref* }
%struct.module_kobject = type { %struct.kobject, %struct.module*, %struct.kobject*, %struct.module_param_attrs* }
%struct.module_param_attrs = type opaque
%struct.module_attribute = type { %struct.attribute, i64 (%struct.module_attribute*, %struct.module*, i8*)*, i64 (%struct.module_attribute*, %struct.module*, i8*, i64)*, void (%struct.module*, i8*)*, i32 (%struct.module*)*, void (%struct.module*)* }
%struct.kernel_symbol = type { i64, i8* }
%struct.exception_table_entry = type { i64, i64 }
%struct.mod_arch_specific = type {}
%struct.bug_entry = type { i32, i32, i16, i16 }
%struct.elf64_sym = type { i32, i8, i8, i16, i64, i64 }
%struct.module_sect_attrs = type opaque
%struct.module_notes_attrs = type opaque
%struct.tracepoint = type { i8*, %struct.jump_label_key, void ()*, void ()*, %struct.tracepoint_func* }
%struct.jump_label_key = type { %struct.atomic_t }
%struct.tracepoint_func = type { i8*, i8* }
%struct.ftrace_event_call = type opaque
%struct.module_ref = type { i32, i32 }
%struct.lock_class_key = type {}
%struct.super_operations = type { %struct.inode* (%struct.super_block*)*, void (%struct.inode*)*, void (%struct.inode*, i32)*, i32 (%struct.inode*, %struct.writeback_control*)*, i32 (%struct.inode*)*, void (%struct.inode*)*, void (%struct.super_block*)*, void (%struct.super_block*)*, i32 (%struct.super_block*, i32)*, i32 (%struct.super_block*)*, i32 (%struct.super_block*)*, i32 (%struct.dentry*, %struct.kstatfs*)*, i32 (%struct.super_block*, i32*, i8*)*, void (%struct.super_block*)*, i32 (%struct.seq_file*, %struct.vfsmount*)*, i32 (%struct.seq_file*, %struct.vfsmount*)*, i32 (%struct.seq_file*, %struct.vfsmount*)*, i32 (%struct.seq_file*, %struct.vfsmount*)*, i64 (%struct.super_block*, i32, i8*, i64, i64)*, i64 (%struct.super_block*, i32, i8*, i64, i64)*, i32 (%struct.super_block*, %struct.page*, i32)* }
%struct.writeback_control = type opaque
%struct.kstatfs = type opaque
%struct.seq_file = type opaque
%struct.dquot_operations = type { i32 (%struct.dquot*)*, %struct.dquot* (%struct.super_block*, i32)*, void (%struct.dquot*)*, i32 (%struct.dquot*)*, i32 (%struct.dquot*)*, i32 (%struct.dquot*)*, i32 (%struct.super_block*, i32)*, i64* (%struct.inode*)* }
%struct.dquot = type { %struct.hlist_node, %struct.list_head, %struct.list_head, %struct.list_head, %struct.mutex, %struct.atomic_t, %struct.__wait_queue_head, %struct.super_block*, i32, i64, i64, i16, %struct.mem_dqblk }
%struct.mem_dqblk = type { i64, i64, i64, i64, i64, i64, i64, i64, i64 }
%struct.quotactl_ops = type { i32 (%struct.super_block*, i32, i32, %struct.path*)*, i32 (%struct.super_block*, i32, i32)*, i32 (%struct.super_block*, i32)*, i32 (%struct.super_block*, i32, i32)*, i32 (%struct.super_block*, i32, %struct.if_dqinfo*)*, i32 (%struct.super_block*, i32, %struct.if_dqinfo*)*, i32 (%struct.super_block*, i32, i32, %struct.fs_disk_quota*)*, i32 (%struct.super_block*, i32, i32, %struct.fs_disk_quota*)*, i32 (%struct.super_block*, %struct.fs_quota_stat*)*, i32 (%struct.super_block*, i32, i32)* }
%struct.if_dqinfo = type { i64, i64, i32, i32 }
%struct.fs_disk_quota = type { i8, i8, i16, i32, i64, i64, i64, i64, i64, i64, i32, i32, i16, i16, i32, i64, i64, i64, i32, i16, i16, [8 x i8] }
%struct.fs_quota_stat = type { i8, i16, i8, %struct.fs_qfilestat, %struct.fs_qfilestat, i32, i32, i32, i32, i16, i16 }
%struct.fs_qfilestat = type { i64, i64, i32 }
%struct.export_operations = type opaque
%struct.xattr_handler = type opaque
%struct.hlist_bl_head = type { %struct.hlist_bl_node* }
%struct.block_device = type { i32, i32, %struct.inode*, %struct.super_block*, %struct.mutex, %struct.list_head, i8*, i8*, i32, i8, %struct.list_head, %struct.block_device*, i32, %struct.hd_struct*, i32, i32, %struct.gendisk*, %struct.list_head, i64, i32, %struct.mutex }
%struct.hd_struct = type opaque
%struct.gendisk = type opaque
%struct.mtd_info = type opaque
%struct.quota_info = type { i32, %struct.mutex, %struct.mutex, %struct.rw_semaphore, [2 x %struct.inode*], [2 x %struct.mem_dqinfo], [2 x %struct.quota_format_ops*] }
%struct.mem_dqinfo = type { %struct.quota_format_type*, i32, %struct.list_head, i64, i32, i32, i64, i64, i8* }
%struct.quota_format_type = type { i32, %struct.quota_format_ops*, %struct.module*, %struct.quota_format_type* }
%struct.quota_format_ops = type { i32 (%struct.super_block*, i32)*, i32 (%struct.super_block*, i32)*, i32 (%struct.super_block*, i32)*, i32 (%struct.super_block*, i32)*, i32 (%struct.dquot*)*, i32 (%struct.dquot*)*, i32 (%struct.dquot*)* }
%struct.__wait_queue_head = type { %struct.spinlock, %struct.list_head }
%struct.hlist_node = type { %struct.hlist_node*, %struct.hlist_node** }
%union.anon.17 = type { %struct.list_head }
%struct.file_operations = type { %struct.module*, i64 (%struct.file*, i64, i32)*, i64 (%struct.file*, i8*, i64, i64*)*, i64 (%struct.file*, i8*, i64, i64*)*, i64 (%struct.kiocb*, %struct.iovec*, i64, i64)*, i64 (%struct.kiocb*, %struct.iovec*, i64, i64)*, i32 (%struct.file*, i8*, i32 (i8*, i8*, i32, i64, i64, i32)*)*, i32 (%struct.file*, %struct.poll_table_struct*)*, i64 (%struct.file*, i32, i64)*, i64 (%struct.file*, i32, i64)*, i32 (%struct.file*, %struct.vm_area_struct*)*, i32 (%struct.inode*, %struct.file*)*, i32 (%struct.file*, %struct.files_struct*)*, i32 (%struct.inode*, %struct.file*)*, i32 (%struct.file*, i32)*, i32 (%struct.kiocb*, i32)*, i32 (i32, %struct.file*, i32)*, i32 (%struct.file*, i32, %struct.file_lock*)*, i64 (%struct.file*, %struct.page*, i32, i64, i64*, i32)*, i64 (%struct.file*, i64, i64, i64, i64)*, i32 (i32)*, i32 (%struct.file*, i32, %struct.file_lock*)*, i64 (%struct.pipe_inode_info*, %struct.file*, i64*, i64, i32)*, i64 (%struct.file*, i64*, %struct.pipe_inode_info*, i64, i32)*, i32 (%struct.file*, i64, %struct.file_lock**)*, i64 (%struct.file*, i32, i64, i64)* }
%struct.kiocb = type { %struct.list_head, i64, i32, i32, %struct.file*, %struct.kioctx*, i32 (%struct.kiocb*, %struct.io_event*)*, i64 (%struct.kiocb*)*, void (%struct.kiocb*)*, %union.anon.8, i64, i64, i8*, i16, i64, i8*, i64, %struct.iovec, %struct.iovec*, i64, i64, %struct.list_head, %struct.eventfd_ctx* }
%struct.kioctx = type { %struct.atomic_t, i32, %struct.mm_struct*, i64, %struct.hlist_node, %struct.__wait_queue_head, %struct.spinlock, i32, %struct.list_head, %struct.list_head, i32, %struct.aio_ring_info, %struct.delayed_work, %struct.rcu_head }
%struct.aio_ring_info = type { i64, i64, %struct.page**, %struct.spinlock, i64, i32, i32, [8 x %struct.page*] }
%struct.delayed_work = type { %struct.work_struct, %struct.timer_list }
%struct.work_struct = type { %struct.atomic64_t, %struct.list_head, void (%struct.work_struct*)* }
%struct.atomic64_t = type { i64 }
%struct.timer_list = type { %struct.list_head, i64, %struct.tvec_base*, void (i64)*, i64, i32, i32, i8*, [16 x i8] }
%struct.tvec_base = type opaque
%struct.io_event = type { i64, i64, i64, i64 }
%union.anon.8 = type { i8* }
%struct.iovec = type { i8*, i64 }
%struct.eventfd_ctx = type opaque
%struct.poll_table_struct = type { void (%struct.file*, %struct.__wait_queue_head*, %struct.poll_table_struct*)*, i64 }
%struct.file_lock = type { %struct.file_lock*, %struct.list_head, %struct.list_head, %struct.files_struct*, i8, i8, i32, %struct.pid*, %struct.__wait_queue_head, %struct.file*, i64, i64, %struct.fasync_struct*, i64, %struct.file_lock_operations*, %struct.lock_manager_operations*, %union.anon.9 }
%struct.pid = type { %struct.atomic_t, i32, [3 x %struct.hlist_head], %struct.rcu_head, [1 x %struct.upid] }
%struct.upid = type { i32, %struct.pid_namespace*, %struct.hlist_node }
%struct.pid_namespace = type opaque
%struct.fasync_struct = type { %struct.spinlock, i32, i32, %struct.fasync_struct*, %struct.file*, %struct.rcu_head }
%struct.file_lock_operations = type { void (%struct.file_lock*, %struct.file_lock*)*, void (%struct.file_lock*)* }
%struct.lock_manager_operations = type { i32 (%struct.file_lock*, %struct.file_lock*)*, void (%struct.file_lock*)*, i32 (%struct.file_lock*, %struct.file_lock*, i32)*, void (%struct.file_lock*)*, void (%struct.file_lock*)*, i32 (%struct.file_lock**, i32)* }
%union.anon.9 = type { %struct.nfs_lock_info }
%struct.nfs_lock_info = type { i32, %struct.nlm_lockowner*, %struct.list_head }
%struct.nlm_lockowner = type opaque
%union.anon.18 = type { %struct.pipe_inode_info* }
%struct.posix_acl = type opaque
%struct.radix_tree_root = type { i32, i32, %struct.radix_tree_node* }
%struct.radix_tree_node = type opaque
%struct.prio_tree_root = type { %struct.prio_tree_node*, i16, i16 }
%struct.prio_tree_node = type { %struct.prio_tree_node*, %struct.prio_tree_node*, %struct.prio_tree_node*, i64, i64 }
%struct.address_space_operations = type { i32 (%struct.page*, %struct.writeback_control*)*, i32 (%struct.file*, %struct.page*)*, i32 (%struct.address_space*, %struct.writeback_control*)*, i32 (%struct.page*)*, i32 (%struct.file*, %struct.address_space*, %struct.list_head*, i32)*, i32 (%struct.file*, %struct.address_space*, i64, i32, i32, %struct.page**, i8**)*, i32 (%struct.file*, %struct.address_space*, i64, i32, i32, %struct.page*, i8*)*, i64 (%struct.address_space*, i64)*, void (%struct.page*, i64)*, i32 (%struct.page*, i32)*, void (%struct.page*)*, i64 (i32, %struct.kiocb*, %struct.iovec*, i64, i64)*, i32 (%struct.address_space*, i64, i32, i8**, i64*)*, i32 (%struct.address_space*, %struct.page*, %struct.page*)*, i32 (%struct.page*)*, i32 (%struct.page*, %struct.read_descriptor_t*, i64)*, i32 (%struct.address_space*, %struct.page*)* }
%struct.read_descriptor_t = type { i64, i64, %union.anon.14, i32 }
%union.anon.14 = type { i8* }
%union.anon.15 = type { i64 }
%struct.pgd_t = type { i64 }
%struct.rw_semaphore = type { i64, %struct.spinlock, %struct.list_head }
%struct.mm_rss_stat = type { [3 x %struct.atomic64_t] }
%struct.linux_binfmt = type opaque
%struct.mm_context_t = type { i8*, i32, i16, %struct.mutex, i8* }
%struct.core_state = type { %struct.atomic_t, %struct.core_thread, %struct.completion }
%struct.core_thread = type { %struct.task_struct*, %struct.core_thread* }
%struct.completion = type { i32, %struct.__wait_queue_head }
%struct.file = type { %union.anon.4, %struct.path, %struct.file_operations*, %struct.spinlock, i32, %struct.atomic64_t, i32, i32, i64, %struct.fown_struct, %struct.cred*, %struct.file_ra_state, i64, i8*, i8*, %struct.list_head, %struct.address_space* }
%union.anon.4 = type { %struct.list_head }
%struct.fown_struct = type { %struct.rwlock_t, %struct.pid*, i32, i32, i32, i32 }
%struct.rwlock_t = type { %struct.arch_rwlock_t }
%struct.arch_rwlock_t = type { i32 }
%struct.file_ra_state = type { i64, i32, i32, i32, i32, i64 }
%struct.task_rss_stat = type { i32, [3 x i32] }
%struct.pid_link = type { %struct.hlist_node, %struct.pid* }
%struct.timespec = type { i64, i64 }
%struct.task_cputime = type { i64, i64, i64 }
%struct.cred = type { %struct.atomic_t, i32, i32, i32, i32, i32, i32, i32, i32, i32, %struct.kernel_cap_struct, %struct.kernel_cap_struct, %struct.kernel_cap_struct, %struct.kernel_cap_struct, i8, %struct.key*, %struct.key*, %struct.thread_group_cred*, i8*, %struct.user_struct*, %struct.user_namespace*, %struct.group_info*, %struct.rcu_head }
%struct.kernel_cap_struct = type { [2 x i32] }
%struct.key = type { %struct.atomic_t, i32, %struct.rb_node, %struct.key_type*, %struct.rw_semaphore, %struct.key_user*, i8*, %union.anon.11, i32, i32, i32, i16, i16, i64, i8*, %union.anon.12, %union.anon.13 }
%struct.key_type = type opaque
%struct.key_user = type opaque
%union.anon.11 = type { i64 }
%union.anon.12 = type { %struct.list_head }
%union.anon.13 = type { i64 }
%struct.thread_group_cred = type { %struct.atomic_t, i32, %struct.spinlock, %struct.key*, %struct.key*, %struct.rcu_head }
%struct.user_struct = type { %struct.atomic_t, %struct.atomic_t, %struct.atomic_t, %struct.atomic_t, %struct.atomic_t, %struct.atomic_t, %struct.atomic64_t, i64, i64, %struct.key*, %struct.key*, %struct.hlist_node, i32, %struct.user_namespace*, %struct.atomic64_t }
%struct.user_namespace = type opaque
%struct.group_info = type { %struct.atomic_t, i32, i32, [32 x i32], [0 x i32*] }
%struct.sysv_sem = type { %struct.sem_undo_list* }
%struct.sem_undo_list = type { %struct.atomic_t, %struct.spinlock, %struct.list_head }
%struct.thread_struct = type { [3 x %struct.desc_struct], i64, i64, i64, i16, i16, i16, i16, i64, i64, [4 x %struct.perf_event*], i64, i64, i64, i64, i64, %struct.fpu, i64*, i64, i32 }
%struct.desc_struct = type { %union.anon.19 }
%union.anon.19 = type { %struct.anon.20 }
%struct.anon.20 = type { i32, i32 }
%struct.perf_event = type opaque
%struct.fpu = type { %union.thread_xstate* }
%union.thread_xstate = type { %struct.xsave_struct }
%struct.xsave_struct = type { %struct.i387_fxsave_struct, %struct.xsave_hdr_struct, %struct.ymmh_struct }
%struct.i387_fxsave_struct = type { i16, i16, i16, i16, %union.anon.22, i32, i32, [32 x i32], [64 x i32], [12 x i32], %union.anon.25 }
%union.anon.22 = type { %struct.anon.23 }
%struct.anon.23 = type { i64, i64 }
%union.anon.25 = type { [12 x i32] }
%struct.xsave_hdr_struct = type { i64, [2 x i64], [5 x i64] }
%struct.ymmh_struct = type { [64 x i32] }
%struct.fs_struct = type opaque
%struct.files_struct = type opaque
%struct.nsproxy = type opaque
%struct.signal_struct = type { %struct.atomic_t, %struct.atomic_t, i32, %struct.__wait_queue_head, %struct.task_struct*, %struct.sigpending, i32, i32, %struct.task_struct*, i32, i32, %struct.list_head, %struct.hrtimer, %struct.pid*, %union.ktime, [2 x %struct.cpu_itimer], %struct.thread_group_cputimer, %struct.task_cputime, [3 x %struct.list_head], %struct.pid*, i32, %struct.tty_struct*, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, %struct.task_io_accounting, i64, [16 x %struct.rlimit], %struct.pacct_struct, %struct.taskstats*, i32, %struct.tty_audit_buf*, %struct.rw_semaphore, i32, i32, i32, %struct.mutex }
%struct.hrtimer = type { %struct.timerqueue_node, %union.ktime, i32 (%struct.hrtimer*)*, %struct.hrtimer_clock_base*, i64, i32, i8*, [16 x i8] }
%struct.timerqueue_node = type { %struct.rb_node, %union.ktime }
%struct.hrtimer_clock_base = type { %struct.hrtimer_cpu_base*, i32, i32, %struct.timerqueue_head, %union.ktime, i64 ()*, %union.ktime, %union.ktime }
%struct.hrtimer_cpu_base = type { %struct.raw_spinlock, i64, %union.ktime, i32, i32, i64, i64, i64, %union.ktime, [3 x %struct.hrtimer_clock_base] }
%struct.timerqueue_head = type { %struct.rb_root, %struct.timerqueue_node* }
%union.ktime = type { i64 }
%struct.cpu_itimer = type { i64, i64, i32, i32 }
%struct.thread_group_cputimer = type { %struct.task_cputime, i32, %struct.spinlock }
%struct.tty_struct = type opaque
%struct.rlimit = type { i64, i64 }
%struct.pacct_struct = type { i32, i64, i64, i64, i64, i64, i64 }
%struct.taskstats = type opaque
%struct.tty_audit_buf = type opaque
%struct.sighand_struct = type { %struct.atomic_t, [64 x %struct.k_sigaction], %struct.spinlock, %struct.__wait_queue_head }
%struct.k_sigaction = type { %struct.sigaction }
%struct.sigaction = type { void (i32)*, i64, void ()*, %struct.sigset_t }
%struct.sigset_t = type { [1 x i64] }
%struct.sigpending = type { %struct.list_head, %struct.sigset_t }
%struct.audit_context = type opaque
%struct.seccomp_t = type { i32 }
%struct.irqaction = type { i32 (i32, i8*)*, i64, i8*, %struct.irqaction*, i32, i32 (i32, i8*)*, %struct.task_struct*, i64, i64, i8*, %struct.proc_dir_entry*, [40 x i8] }
%struct.plist_head = type { %struct.list_head }
%struct.rt_mutex_waiter = type opaque
%struct.bio_list = type opaque
%struct.blk_plug = type opaque
%struct.reclaim_state = type opaque
%struct.backing_dev_info = type opaque
%struct.io_context = type opaque
%struct.siginfo = type { i32, i32, i32, %union.anon.27 }
%union.anon.27 = type { %struct.anon.31, [80 x i8] }
%struct.anon.31 = type { i32, i32, i32, i64, i64 }
%struct.task_io_accounting = type { i64, i64, i64, i64, i64, i64, i64 }
%struct.nodemask_t = type { [1 x i64] }
%struct.css_set = type opaque
%struct.robust_list_head = type opaque
%struct.compat_robust_list_head = type opaque
%struct.futex_pi_state = type opaque
%struct.perf_event_context = type opaque
%struct.mempolicy = type opaque
%struct.rcu_head = type { %struct.rcu_head*, void (%struct.rcu_head*)* }
%struct.pipe_inode_info = type opaque
%struct.task_delay_info = type { %struct.spinlock, i32, %struct.timespec, %struct.timespec, i64, i64, i32, i32, %struct.timespec, %struct.timespec, i64, i32 }
%struct.prop_local_single = type { i64, i64, i32, %struct.spinlock }
%struct.bus_type = type { i8*, %struct.bus_attribute*, %struct.device_attribute*, %struct.driver_attribute*, i32 (%struct.device*, %struct.device_driver*)*, i32 (%struct.device*, %struct.kobj_uevent_env*)*, i32 (%struct.device*)*, i32 (%struct.device*)*, void (%struct.device*)*, i32 (%struct.device*, i32)*, i32 (%struct.device*)*, %struct.dev_pm_ops*, %struct.subsys_private* }
%struct.bus_attribute = type { %struct.attribute, i64 (%struct.bus_type*, i8*)*, i64 (%struct.bus_type*, i8*, i64)* }
%struct.device_attribute = type { %struct.attribute, i64 (%struct.device*, %struct.device_attribute*, i8*)*, i64 (%struct.device*, %struct.device_attribute*, i8*, i64)* }
%struct.driver_attribute = type { %struct.attribute, i64 (%struct.device_driver*, i8*)*, i64 (%struct.device_driver*, i8*, i64)* }
%struct.subsys_private = type opaque
%struct.dev_pm_info = type { %struct.pm_message, i8, %struct.spinlock, %struct.list_head, %struct.completion, %struct.wakeup_source* }
%struct.pm_message = type { i32 }
%struct.wakeup_source = type { i8*, %struct.list_head, %struct.spinlock, %struct.timer_list, i64, %union.ktime, %union.ktime, %union.ktime, i64, i64, i64, i64, i8 }
%struct.dev_power_domain = type { %struct.dev_pm_ops }
%struct.dma_coherent_mem = type opaque
%struct.dev_archdata = type { i8*, %struct.dma_map_ops*, i8* }
%struct.dma_map_ops = type { i8* (%struct.device*, i64, i64*, i32)*, void (%struct.device*, i64, i8*, i64)*, i64 (%struct.device*, %struct.page*, i64, i64, i32, %struct.dma_attrs*)*, void (%struct.device*, i64, i64, i32, %struct.dma_attrs*)*, i32 (%struct.device*, %struct.scatterlist*, i32, i32, %struct.dma_attrs*)*, void (%struct.device*, %struct.scatterlist*, i32, i32, %struct.dma_attrs*)*, void (%struct.device*, i64, i64, i32)*, void (%struct.device*, i64, i64, i32)*, void (%struct.device*, %struct.scatterlist*, i32, i32)*, void (%struct.device*, %struct.scatterlist*, i32, i32)*, i32 (%struct.device*, i64)*, i32 (%struct.device*, i64)*, i32 (%struct.device*, i64)*, i32 }
%struct.dma_attrs = type { [1 x i64] }
%struct.scatterlist = type { i64, i32, i32, i64, i32 }
%struct.device_node = type opaque
%struct.klist_node = type { i8*, %struct.list_head, %struct.kref }
%struct.class = type { i8*, %struct.module*, %struct.class_attribute*, %struct.device_attribute*, %struct.bin_attribute*, %struct.kobject*, i32 (%struct.device*, %struct.kobj_uevent_env*)*, i8* (%struct.device*, i32*)*, void (%struct.class*)*, void (%struct.device*)*, i32 (%struct.device*, i32)*, i32 (%struct.device*)*, %struct.kobj_ns_type_operations*, i8* (%struct.device*)*, %struct.dev_pm_ops*, %struct.subsys_private* }
%struct.class_attribute = type { %struct.attribute, i64 (%struct.class*, %struct.class_attribute*, i8*)*, i64 (%struct.class*, %struct.class_attribute*, i8*, i64)* }
%struct.attribute_group = type { i8*, i32 (%struct.kobject*, %struct.attribute*, i32)*, %struct.attribute** }
%struct.atomic_t = type { i32 }
%struct.hlist_head = type { %struct.hlist_node* }
%struct.bin_attribute = type { %struct.attribute, i64, i8*, i64 (%struct.file*, %struct.kobject*, %struct.bin_attribute*, i8*, i64, i64)*, i64 (%struct.file*, %struct.kobject*, %struct.bin_attribute*, i8*, i64, i64)*, i32 (%struct.file*, %struct.kobject*, %struct.bin_attribute*, %struct.vm_area_struct*)* }
%struct.pci_vpd = type opaque
%union.anon.16 = type { %struct.pci_sriov* }
%struct.pci_sriov = type opaque
%struct.pci_ats = type opaque
%struct.pci_error_handlers = type { i32 (%struct.pci_dev*, i32)*, i32 (%struct.pci_dev*)*, i32 (%struct.pci_dev*)*, i32 (%struct.pci_dev*)*, {}* }
%struct.device_driver = type { i8*, %struct.bus_type*, %struct.module*, i8*, i8, %struct.of_device_id*, i32 (%struct.device*)*, i32 (%struct.device*)*, void (%struct.device*)*, i32 (%struct.device*, i32)*, i32 (%struct.device*)*, %struct.attribute_group**, %struct.dev_pm_ops*, %struct.driver_private* }
%struct.of_device_id = type { [32 x i8], [32 x i8], [128 x i8], i8* }
%struct.driver_private = type opaque
%struct.pci_dynids = type { %struct.spinlock, %struct.list_head }
%struct.shortname_table = type { i32, i8* }
%struct.snd_pci_quirk = type { i16, i16, i16, i32 }
%struct.snd_device_ops = type { i32 (%struct.snd_device*)*, i32 (%struct.snd_device*)*, i32 (%struct.snd_device*)* }
%struct.snd_device = type { %struct.list_head, %struct.snd_card*, i32, i32, i8*, %struct.snd_device_ops* }
%struct.snd_card = type { i32, [16 x i8], [16 x i8], [32 x i8], [80 x i8], [80 x i8], [128 x i8], %struct.module*, i8*, void (%struct.snd_card*)*, %struct.list_head, i32, %struct.rw_semaphore, %struct.rwlock_t, i32, i32, %struct.list_head, %struct.list_head, %struct.snd_info_entry*, %struct.snd_info_entry*, %struct.proc_dir_entry*, %struct.list_head, %struct.snd_shutdown_f_ops*, %struct.spinlock, i32, i32, %struct.__wait_queue_head, %struct.device*, %struct.device*, i32, %struct.mutex, %struct.__wait_queue_head, %struct.snd_mixer_oss*, i32 }
%struct.snd_info_entry = type { i8*, i32, i64, i16, %union.anon.34, %struct.snd_info_entry*, %struct.snd_card*, %struct.module*, i8*, void (%struct.snd_info_entry*)*, %struct.proc_dir_entry*, %struct.mutex, %struct.list_head, %struct.list_head }
%union.anon.34 = type { %struct.snd_info_entry_text }
%struct.snd_info_entry_text = type { void (%struct.snd_info_entry*, %struct.snd_info_buffer*)*, void (%struct.snd_info_entry*, %struct.snd_info_buffer*)* }
%struct.snd_info_buffer = type { i8*, i32, i32, i32, i32, i32 }
%struct.snd_shutdown_f_ops = type opaque
%struct.snd_mixer_oss = type opaque
%struct.ich_reg_info = type { i32, i32 }
%struct.snd_ac97_bus_ops = type { void (%struct.snd_ac97*)*, void (%struct.snd_ac97*)*, void (%struct.snd_ac97*, i16, i16)*, i16 (%struct.snd_ac97*, i16)*, void (%struct.snd_ac97*)*, void (%struct.snd_ac97*)* }
%struct.snd_ac97 = type { %struct.snd_ac97_build_ops*, i8*, {}*, %struct.snd_ac97_bus*, %struct.pci_dev*, %struct.snd_info_entry*, %struct.snd_info_entry*, i16, i16, %struct.mutex, %struct.mutex, i16, i16, i32, i16, i16, i16, %struct.snd_ac97_res_table*, i32, i32, [6 x i32], i32, [128 x i16], [2 x i64], %union.anon.35, i8, i8, %struct.device }
%struct.snd_ac97_build_ops = type { i32 (%struct.snd_ac97*)*, i32 (%struct.snd_ac97*)*, i32 (%struct.snd_ac97*)*, i32 (%struct.snd_ac97*)*, {}*, {}*, {}* }
%struct.snd_ac97_bus = type { %struct.snd_ac97_bus_ops*, i8*, void (%struct.snd_ac97_bus*)*, %struct.snd_card*, i16, i8, i32, %struct.spinlock, [2 x [4 x i16]], i16, %struct.ac97_pcm*, [4 x %struct.snd_ac97*], %struct.snd_info_entry* }
%struct.ac97_pcm = type { %struct.snd_ac97_bus*, i8, i16, i16, i32, [2 x %struct.anon.37], i64 }
%struct.anon.37 = type { i16, [4 x i16], [4 x i8], [4 x %struct.snd_ac97*] }
%struct.snd_ac97_res_table = type { i16, i16 }
%union.anon.35 = type { i32, [28 x i8] }
%struct.ac97_quirk = type { i16, i16, i16, i32, i8*, i32 }
%struct.ich_pcm_table = type { i8*, %struct.snd_pcm_ops*, %struct.snd_pcm_ops*, i64, i64, i32 }
%struct.snd_pcm_ops = type { i32 (%struct.snd_pcm_substream*)*, i32 (%struct.snd_pcm_substream*)*, i32 (%struct.snd_pcm_substream*, i32, i8*)*, i32 (%struct.snd_pcm_substream*, %struct.snd_pcm_hw_params*)*, i32 (%struct.snd_pcm_substream*)*, i32 (%struct.snd_pcm_substream*)*, i32 (%struct.snd_pcm_substream*, i32)*, i64 (%struct.snd_pcm_substream*)*, i32 (%struct.snd_pcm_substream*, i32, i64, i8*, i64)*, i32 (%struct.snd_pcm_substream*, i32, i64, i64)*, %struct.page* (%struct.snd_pcm_substream*, i64)*, i32 (%struct.snd_pcm_substream*, %struct.vm_area_struct*)*, i32 (%struct.snd_pcm_substream*)* }
%struct.snd_pcm_substream = type { %struct.snd_pcm*, %struct.snd_pcm_str*, i8*, i32, [32 x i8], i32, %struct.pm_qos_request_list, i64, %struct.snd_dma_buffer, i32, i64, %struct.snd_pcm_ops*, %struct.snd_pcm_runtime*, %struct.snd_timer*, i8, %struct.snd_pcm_substream*, %struct.list_head, %struct.snd_pcm_group, %struct.snd_pcm_group*, i8*, i32, %struct.atomic_t, i32, void (%struct.snd_pcm_substream*)*, %struct.pid*, %struct.snd_pcm_oss_substream, %struct.snd_info_entry*, %struct.snd_info_entry*, %struct.snd_info_entry*, %struct.snd_info_entry*, %struct.snd_info_entry*, %struct.snd_info_entry*, %struct.snd_info_entry*, i8 }
%struct.snd_pcm = type { %struct.snd_card*, %struct.list_head, i32, i32, i16, i16, [64 x i8], [80 x i8], [2 x %struct.snd_pcm_str], %struct.mutex, %struct.__wait_queue_head, i8*, void (%struct.snd_pcm*)*, %struct.device*, %struct.snd_pcm_oss }
%struct.snd_pcm_str = type { i32, %struct.snd_pcm*, i32, i32, %struct.snd_pcm_substream*, %struct.snd_pcm_oss_stream, %struct.snd_info_entry*, %struct.snd_info_entry* }
%struct.snd_pcm_oss_stream = type { %struct.snd_pcm_oss_setup*, %struct.mutex, %struct.snd_info_entry* }
%struct.snd_pcm_oss_setup = type { i8*, i8, i32, i32, %struct.snd_pcm_oss_setup* }
%struct.snd_pcm_oss = type { i32, i32 }
%struct.pm_qos_request_list = type { %struct.plist_node, i32 }
%struct.snd_dma_buffer = type { %struct.snd_dma_device, i8*, i64, i64, i8* }
%struct.snd_dma_device = type { i32, %struct.device* }
%struct.snd_pcm_runtime = type { %struct.snd_pcm_substream*, %struct.timespec, i32, i64, i64, i64, i64, i64, i64, i32, i32, i32, i32, i32, i64, i32, i64, i64, i64, i32, i32, i32, i32, i32, i8, i32, i32, i64, i64, i64, i64, i64, i64, i64, %union.snd_pcm_sync_id, %struct.snd_pcm_mmap_status*, %struct.snd_pcm_mmap_control*, i64, %struct.__wait_queue_head, %struct.__wait_queue_head, %struct.fasync_struct*, i8*, void (%struct.snd_pcm_runtime*)*, %struct.snd_pcm_hardware, %struct.snd_pcm_hw_constraints, void (%struct.snd_pcm_substream*)*, void (%struct.snd_pcm_substream*)*, i32, i32, i8*, i64, i64, %struct.snd_dma_buffer*, %struct.snd_pcm_oss_runtime }
%union.snd_pcm_sync_id = type { [4 x i32] }
%struct.snd_pcm_mmap_status = type { i32, i32, i64, %struct.timespec, i32 }
%struct.snd_pcm_mmap_control = type { i64, i64 }
%struct.snd_pcm_hardware = type { i32, i64, i32, i32, i32, i32, i32, i64, i64, i64, i32, i32, i64 }
%struct.snd_pcm_hw_constraints = type { [3 x %struct.snd_mask], [12 x %struct.snd_interval], i32, i32, %struct.snd_pcm_hw_rule* }
%struct.snd_mask = type { [8 x i32] }
%struct.snd_interval = type { i32, i32, i8 }
%struct.snd_pcm_hw_rule = type { i32, i32 (%struct.snd_pcm_hw_params*, %struct.snd_pcm_hw_rule*)*, i32, [4 x i32], i8* }
%struct.snd_pcm_hw_params = type { i32, [3 x %struct.snd_mask], [5 x %struct.snd_mask], [12 x %struct.snd_interval], [9 x %struct.snd_interval], i32, i32, i32, i32, i32, i32, i64, [64 x i8] }
%struct.snd_pcm_oss_runtime = type { i8, i32, i32, i32, i32, i32, i32, i64, i64, i64, i32, i64, i64, i64, i8*, i64, %struct.mutex, %struct.snd_pcm_plugin*, %struct.snd_pcm_plugin*, i32 }
%struct.snd_pcm_plugin = type opaque
%struct.snd_timer = type opaque
%struct.snd_pcm_group = type { %struct.spinlock, %struct.list_head, i32 }
%struct.snd_pcm_oss_substream = type { i8, %struct.snd_pcm_oss_setup }
%struct.snd_pcm_hw_constraint_list = type { i32, i32*, i32 }
%struct.intel8x0 = type { i32, i32, i8*, i8*, %struct.pci_dev*, %struct.snd_card*, i32, [6 x %struct.snd_pcm*], [6 x %struct.ichdev], i16, i32, i32, %struct.snd_ac97_bus*, [3 x %struct.snd_ac97*], [3 x i32], i32, i32, i32*, i32, i32, %struct.spinlock, i32, %struct.snd_dma_buffer, i32, i32 }
%struct.ichdev = type { i32, i64, i32*, i32, %struct.snd_pcm_substream*, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, %struct.ac97_pcm*, i32, i8 }
%struct.snd_ac97_template = type { i8*, void (%struct.snd_ac97*)*, %struct.pci_dev*, i16, i16, i32, %struct.snd_ac97_res_table* }

@__param_str_index = internal constant [15 x i8] c"intel8x0.index\00", align 1
@param_ops_int = external global %struct.kernel_param_ops, align 8
@index = internal global i32 -1, align 4
@__param_index = internal constant %struct.kernel_param { i8* getelementptr inbounds ([15 x i8], [15 x i8]* @__param_str_index, i32 0, i32 0), %struct.kernel_param_ops* @param_ops_int, i16 292, i16 0, %union.anon { i8* bitcast (i32* @index to i8*) } }, section "__param", align 8
@__param_str_id = internal constant [12 x i8] c"intel8x0.id\00", align 1
@param_ops_charp = external global %struct.kernel_param_ops, align 8
@id = internal global i8* null, align 8
@__param_id = internal constant %struct.kernel_param { i8* getelementptr inbounds ([12 x i8], [12 x i8]* @__param_str_id, i32 0, i32 0), %struct.kernel_param_ops* @param_ops_charp, i16 292, i16 0, %union.anon { i8* bitcast (i8** @id to i8*) } }, section "__param", align 8
@__param_str_ac97_clock = internal constant [20 x i8] c"intel8x0.ac97_clock\00", align 16
@ac97_clock = internal global i32 0, align 4
@__param_ac97_clock = internal constant %struct.kernel_param { i8* getelementptr inbounds ([20 x i8], [20 x i8]* @__param_str_ac97_clock, i32 0, i32 0), %struct.kernel_param_ops* @param_ops_int, i16 292, i16 0, %union.anon { i8* bitcast (i32* @ac97_clock to i8*) } }, section "__param", align 8
@__param_str_ac97_quirk = internal constant [20 x i8] c"intel8x0.ac97_quirk\00", align 16
@ac97_quirk = internal global i8* null, align 8
@__param_ac97_quirk = internal constant %struct.kernel_param { i8* getelementptr inbounds ([20 x i8], [20 x i8]* @__param_str_ac97_quirk, i32 0, i32 0), %struct.kernel_param_ops* @param_ops_charp, i16 292, i16 0, %union.anon { i8* bitcast (i8** @ac97_quirk to i8*) } }, section "__param", align 8
@__param_str_buggy_semaphore = internal constant [25 x i8] c"intel8x0.buggy_semaphore\00", align 16
@param_ops_bool = external global %struct.kernel_param_ops, align 8
@buggy_semaphore = internal global i32 0, align 4
@__param_buggy_semaphore = internal constant %struct.kernel_param { i8* getelementptr inbounds ([25 x i8], [25 x i8]* @__param_str_buggy_semaphore, i32 0, i32 0), %struct.kernel_param_ops* @param_ops_bool, i16 292, i16 0, %union.anon { i8* bitcast (i32* @buggy_semaphore to i8*) } }, section "__param", align 8
@__param_str_buggy_irq = internal constant [19 x i8] c"intel8x0.buggy_irq\00", align 16
@buggy_irq = internal global i32 -1, align 4
@__param_buggy_irq = internal constant %struct.kernel_param { i8* getelementptr inbounds ([19 x i8], [19 x i8]* @__param_str_buggy_irq, i32 0, i32 0), %struct.kernel_param_ops* @param_ops_bool, i16 292, i16 0, %union.anon { i8* bitcast (i32* @buggy_irq to i8*) } }, section "__param", align 8
@__param_str_xbox = internal constant [14 x i8] c"intel8x0.xbox\00", align 1
@xbox = internal global i32 0, align 4
@__param_xbox = internal constant %struct.kernel_param { i8* getelementptr inbounds ([14 x i8], [14 x i8]* @__param_str_xbox, i32 0, i32 0), %struct.kernel_param_ops* @param_ops_bool, i16 292, i16 0, %union.anon { i8* bitcast (i32* @xbox to i8*) } }, section "__param", align 8
@__param_str_spdif_aclink = internal constant [22 x i8] c"intel8x0.spdif_aclink\00", align 16
@spdif_aclink = internal global i32 -1, align 4
@__param_spdif_aclink = internal constant %struct.kernel_param { i8* getelementptr inbounds ([22 x i8], [22 x i8]* @__param_str_spdif_aclink, i32 0, i32 0), %struct.kernel_param_ops* @param_ops_int, i16 292, i16 0, %union.anon { i8* bitcast (i32* @spdif_aclink to i8*) } }, section "__param", align 8
@__param_str_enable = internal constant [16 x i8] c"intel8x0.enable\00", align 16
@enable = internal global i32 0, align 4
@__param_enable = internal constant %struct.kernel_param { i8* getelementptr inbounds ([16 x i8], [16 x i8]* @__param_str_enable, i32 0, i32 0), %struct.kernel_param_ops* @param_ops_bool, i16 292, i16 0, %union.anon { i8* bitcast (i32* @enable to i8*) } }, section "__param", align 8
@__param_str_joystick = internal constant [18 x i8] c"intel8x0.joystick\00", align 16
@joystick = internal global i32 0, align 4
@__param_joystick = internal constant %struct.kernel_param { i8* getelementptr inbounds ([18 x i8], [18 x i8]* @__param_str_joystick, i32 0, i32 0), %struct.kernel_param_ops* @param_ops_int, i16 292, i16 0, %union.anon { i8* bitcast (i32* @joystick to i8*) } }, section "__param", align 8
@__initcall_alsa_card_intel8x0_init6 = internal global i32 ()* @alsa_card_intel8x0_init, section ".initcall6.init", align 8
@__exitcall_alsa_card_intel8x0_exit = internal global void ()* @alsa_card_intel8x0_exit, section ".exitcall.exit", align 8
@smp_ops = external global %struct.smp_ops, align 8
@.str = private unnamed_addr constant [10 x i8] c"Intel ICH\00", align 1
@snd_intel8x0_ids = internal constant [24 x %struct.pci_device_id] [%struct.pci_device_id { i32 32902, i32 9237, i32 -1, i32 -1, i32 0, i32 0, i64 0 }, %struct.pci_device_id { i32 32902, i32 9253, i32 -1, i32 -1, i32 0, i32 0, i64 0 }, %struct.pci_device_id { i32 32902, i32 9285, i32 -1, i32 -1, i32 0, i32 0, i64 0 }, %struct.pci_device_id { i32 32902, i32 9349, i32 -1, i32 -1, i32 0, i32 0, i64 0 }, %struct.pci_device_id { i32 32902, i32 9413, i32 -1, i32 -1, i32 0, i32 0, i64 1 }, %struct.pci_device_id { i32 32902, i32 9429, i32 -1, i32 -1, i32 0, i32 0, i64 1 }, %struct.pci_device_id { i32 32902, i32 9638, i32 -1, i32 -1, i32 0, i32 0, i64 1 }, %struct.pci_device_id { i32 32902, i32 9838, i32 -1, i32 -1, i32 0, i32 0, i64 1 }, %struct.pci_device_id { i32 32902, i32 10206, i32 -1, i32 -1, i32 0, i32 0, i64 1 }, %struct.pci_device_id { i32 32902, i32 9880, i32 -1, i32 -1, i32 0, i32 0, i64 1 }, %struct.pci_device_id { i32 32902, i32 29077, i32 -1, i32 -1, i32 0, i32 0, i64 0 }, %struct.pci_device_id { i32 4153, i32 28690, i32 -1, i32 -1, i32 0, i32 0, i64 2 }, %struct.pci_device_id { i32 4318, i32 433, i32 -1, i32 -1, i32 0, i32 0, i64 4 }, %struct.pci_device_id { i32 4318, i32 58, i32 -1, i32 -1, i32 0, i32 0, i64 4 }, %struct.pci_device_id { i32 4318, i32 106, i32 -1, i32 -1, i32 0, i32 0, i64 4 }, %struct.pci_device_id { i32 4318, i32 89, i32 -1, i32 -1, i32 0, i32 0, i64 4 }, %struct.pci_device_id { i32 4318, i32 138, i32 -1, i32 -1, i32 0, i32 0, i64 4 }, %struct.pci_device_id { i32 4318, i32 218, i32 -1, i32 -1, i32 0, i32 0, i64 4 }, %struct.pci_device_id { i32 4318, i32 234, i32 -1, i32 -1, i32 0, i32 0, i64 4 }, %struct.pci_device_id { i32 4318, i32 619, i32 -1, i32 -1, i32 0, i32 0, i64 4 }, %struct.pci_device_id { i32 4130, i32 29805, i32 -1, i32 -1, i32 0, i32 0, i64 0 }, %struct.pci_device_id { i32 4130, i32 29765, i32 -1, i32 -1, i32 0, i32 0, i64 0 }, %struct.pci_device_id { i32 4281, i32 21589, i32 -1, i32 -1, i32 0, i32 0, i64 3 }, %struct.pci_device_id zeroinitializer], section ".devinit.rodata", align 16
@driver = internal global { %struct.list_head, i8*, %struct.pci_device_id*, i32 (%struct.pci_dev*, %struct.pci_device_id*)*, void (%struct.pci_dev*)*, i32 (%struct.pci_dev*, i32)*, i32 (%struct.pci_dev*, i32)*, i32 (%struct.pci_dev*)*, i32 (%struct.pci_dev*)*, void (%struct.pci_dev*)*, %struct.pci_error_handlers*, %struct.device_driver, %struct.pci_dynids } { %struct.list_head zeroinitializer, i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str, i32 0, i32 0), %struct.pci_device_id* getelementptr inbounds ([24 x %struct.pci_device_id], [24 x %struct.pci_device_id]* @snd_intel8x0_ids, i32 0, i32 0), i32 (%struct.pci_dev*, %struct.pci_device_id*)* @snd_intel8x0_probe, void (%struct.pci_dev*)* @snd_intel8x0_remove, i32 (%struct.pci_dev*, i32)* @intel8x0_suspend, i32 (%struct.pci_dev*, i32)* null, i32 (%struct.pci_dev*)* null, i32 (%struct.pci_dev*)* @intel8x0_resume, void (%struct.pci_dev*)* null, %struct.pci_error_handlers* null, %struct.device_driver zeroinitializer, %struct.pci_dynids zeroinitializer }, align 8
@.str.2 = private unnamed_addr constant [4 x i8] c"ICH\00", align 1
@.str.3 = private unnamed_addr constant [7 x i8] c"NFORCE\00", align 1
@.str.4 = private unnamed_addr constant [5 x i8] c"ICH4\00", align 1
@shortnames = internal global [23 x %struct.shortname_table] [%struct.shortname_table { i32 9237, i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.6, i32 0, i32 0) }, %struct.shortname_table { i32 9253, i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.7, i32 0, i32 0) }, %struct.shortname_table { i32 9285, i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.8, i32 0, i32 0) }, %struct.shortname_table { i32 29077, i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.9, i32 0, i32 0) }, %struct.shortname_table { i32 9349, i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.10, i32 0, i32 0) }, %struct.shortname_table { i32 9413, i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.11, i32 0, i32 0) }, %struct.shortname_table { i32 9429, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.12, i32 0, i32 0) }, %struct.shortname_table { i32 9638, i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.13, i32 0, i32 0) }, %struct.shortname_table { i32 9838, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.14, i32 0, i32 0) }, %struct.shortname_table { i32 10206, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.15, i32 0, i32 0) }, %struct.shortname_table { i32 9880, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.16, i32 0, i32 0) }, %struct.shortname_table { i32 28690, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.17, i32 0, i32 0) }, %struct.shortname_table { i32 433, i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.18, i32 0, i32 0) }, %struct.shortname_table { i32 106, i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.19, i32 0, i32 0) }, %struct.shortname_table { i32 218, i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.20, i32 0, i32 0) }, %struct.shortname_table { i32 234, i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.21, i32 0, i32 0) }, %struct.shortname_table { i32 89, i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.22, i32 0, i32 0) }, %struct.shortname_table { i32 138, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.23, i32 0, i32 0) }, %struct.shortname_table { i32 58, i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.24, i32 0, i32 0) }, %struct.shortname_table { i32 29805, i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.25, i32 0, i32 0) }, %struct.shortname_table { i32 29765, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.26, i32 0, i32 0) }, %struct.shortname_table { i32 21589, i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.27, i32 0, i32 0) }, %struct.shortname_table zeroinitializer], section ".devinit.data", align 16
@.str.5 = private unnamed_addr constant [21 x i8] c"%s with %s at irq %i\00", align 1
@spdif_aclink_defaults = internal global [2 x %struct.snd_pci_quirk] [%struct.snd_pci_quirk { i16 5243, i16 7194, i16 -1, i32 1 }, %struct.snd_pci_quirk zeroinitializer], section ".devinit.data", align 16
@.str.6 = private unnamed_addr constant [18 x i8] c"Intel 82801AA-ICH\00", align 1
@.str.7 = private unnamed_addr constant [19 x i8] c"Intel 82901AB-ICH0\00", align 1
@.str.8 = private unnamed_addr constant [19 x i8] c"Intel 82801BA-ICH2\00", align 1
@.str.9 = private unnamed_addr constant [12 x i8] c"Intel 440MX\00", align 1
@.str.10 = private unnamed_addr constant [19 x i8] c"Intel 82801CA-ICH3\00", align 1
@.str.11 = private unnamed_addr constant [19 x i8] c"Intel 82801DB-ICH4\00", align 1
@.str.12 = private unnamed_addr constant [11 x i8] c"Intel ICH5\00", align 1
@.str.13 = private unnamed_addr constant [14 x i8] c"Intel 6300ESB\00", align 1
@.str.14 = private unnamed_addr constant [11 x i8] c"Intel ICH6\00", align 1
@.str.15 = private unnamed_addr constant [11 x i8] c"Intel ICH7\00", align 1
@.str.16 = private unnamed_addr constant [11 x i8] c"Intel ESB2\00", align 1
@.str.17 = private unnamed_addr constant [11 x i8] c"SiS SI7012\00", align 1
@.str.18 = private unnamed_addr constant [14 x i8] c"NVidia nForce\00", align 1
@.str.19 = private unnamed_addr constant [15 x i8] c"NVidia nForce2\00", align 1
@.str.20 = private unnamed_addr constant [15 x i8] c"NVidia nForce3\00", align 1
@.str.21 = private unnamed_addr constant [12 x i8] c"NVidia CK8S\00", align 1
@.str.22 = private unnamed_addr constant [13 x i8] c"NVidia CK804\00", align 1
@.str.23 = private unnamed_addr constant [11 x i8] c"NVidia CK8\00", align 1
@.str.24 = private unnamed_addr constant [13 x i8] c"NVidia MCP04\00", align 1
@.str.25 = private unnamed_addr constant [12 x i8] c"AMD AMD8111\00", align 1
@.str.26 = private unnamed_addr constant [11 x i8] c"AMD AMD768\00", align 1
@.str.27 = private unnamed_addr constant [10 x i8] c"ALi M5455\00", align 1
@snd_intel8x0_create.ops = internal global %struct.snd_device_ops { i32 (%struct.snd_device*)* @snd_intel8x0_dev_free, i32 (%struct.snd_device*)* null, i32 (%struct.snd_device*)* null }, align 8
@snd_intel8x0_create.bdbars = internal global [5 x i32] [i32 3, i32 6, i32 3, i32 6, i32 4], align 16
@snd_intel8x0_create.intel_regs = internal global [6 x %struct.ich_reg_info] [%struct.ich_reg_info { i32 32, i32 0 }, %struct.ich_reg_info { i32 64, i32 16 }, %struct.ich_reg_info { i32 128, i32 32 }, %struct.ich_reg_info { i32 16777216, i32 64 }, %struct.ich_reg_info { i32 33554432, i32 80 }, %struct.ich_reg_info { i32 67108864, i32 96 }], align 16
@snd_intel8x0_create.nforce_regs = internal global [4 x %struct.ich_reg_info] [%struct.ich_reg_info { i32 32, i32 0 }, %struct.ich_reg_info { i32 64, i32 16 }, %struct.ich_reg_info { i32 128, i32 32 }, %struct.ich_reg_info { i32 16, i32 112 }], align 16
@snd_intel8x0_create.ali_regs = internal global [6 x %struct.ich_reg_info] [%struct.ich_reg_info { i32 65536, i32 64 }, %struct.ich_reg_info { i32 131072, i32 80 }, %struct.ich_reg_info { i32 262144, i32 96 }, %struct.ich_reg_info { i32 524288, i32 112 }, %struct.ich_reg_info { i32 4194304, i32 160 }, %struct.ich_reg_info { i32 8388608, i32 176 }], align 16
@.str.28 = private unnamed_addr constant [32 x i8] c"<3>AC'97 space ioremap problem\0A\00", align 1
@.str.29 = private unnamed_addr constant [37 x i8] c"<3>Controller space ioremap problem\0A\00", align 1
@.str.30 = private unnamed_addr constant [49 x i8] c"<3>intel8x0: cannot allocate buffer descriptors\0A\00", align 1
@ich_codec_bits = internal global [3 x i32] [i32 256, i32 512, i32 268435456], align 4
@sis_codec_bits = internal global [3 x i32] [i32 256, i32 512, i32 262144], align 4
@.str.31 = private unnamed_addr constant [26 x i8] c"<3>unable to grab IRQ %d\0A\00", align 1
@.str.32 = private unnamed_addr constant [41 x i8] c"<3>intel8x0: reset of registers failed?\0A\00", align 1
@jiffies = external global i64, align 8
@.str.33 = private unnamed_addr constant [43 x i8] c"<3>codec_ready: codec is not ready [0x%x]\0A\00", align 1
@.str.34 = private unnamed_addr constant [47 x i8] c"<3>AC'97 warm reset still in progress? [0x%x]\0A\00", align 1
@.str.35 = private unnamed_addr constant [24 x i8] c"<3>AC'97 reset failed.\0A\00", align 1
@snd_intel8x0_mixer.standard_bus_ops = internal global %struct.snd_ac97_bus_ops { void (%struct.snd_ac97*)* null, void (%struct.snd_ac97*)* null, void (%struct.snd_ac97*, i16, i16)* @snd_intel8x0_codec_write, i16 (%struct.snd_ac97*, i16)* @snd_intel8x0_codec_read, void (%struct.snd_ac97*)* null, void (%struct.snd_ac97*)* null }, align 8
@snd_intel8x0_mixer.ali_bus_ops = internal global %struct.snd_ac97_bus_ops { void (%struct.snd_ac97*)* null, void (%struct.snd_ac97*)* null, void (%struct.snd_ac97*, i16, i16)* @snd_intel8x0_ali_codec_write, i16 (%struct.snd_ac97*, i16)* @snd_intel8x0_ali_codec_read, void (%struct.snd_ac97*)* null, void (%struct.snd_ac97*)* null }, align 8
@.str.36 = private unnamed_addr constant [35 x i8] c"<3>Unable to initialize codec #%d\0A\00", align 1
@ac97_quirks = internal global [64 x %struct.ac97_quirk] [%struct.ac97_quirk { i16 3601, i16 14, i16 0, i32 0, i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.42, i32 0, i32 0), i32 1 }, %struct.ac97_quirk { i16 3601, i16 138, i16 0, i32 0, i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.43, i32 0, i32 0), i32 1 }, %struct.ac97_quirk { i16 3601, i16 184, i16 0, i32 0, i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.44, i32 0, i32 0), i32 1 }, %struct.ac97_quirk { i16 3601, i16 2144, i16 0, i32 0, i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.45, i32 0, i32 0), i32 7 }, %struct.ac97_quirk { i16 4116, i16 1332, i16 0, i32 0, i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.46, i32 0, i32 0), i32 6 }, %struct.ac97_quirk { i16 4116, i16 7936, i16 0, i32 0, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.47, i32 0, i32 0), i32 5 }, %struct.ac97_quirk { i16 4116, i16 615, i16 0, i32 0, i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.48, i32 0, i32 0), i32 1 }, %struct.ac97_quirk { i16 4133, i16 130, i16 0, i32 0, i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.49, i32 0, i32 0), i32 1 }, %struct.ac97_quirk { i16 4133, i16 131, i16 0, i32 0, i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.50, i32 0, i32 0), i32 1 }, %struct.ac97_quirk { i16 4136, i16 216, i16 0, i32 0, i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.51, i32 0, i32 0), i32 1 }, %struct.ac97_quirk { i16 4136, i16 269, i16 0, i32 0, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.52, i32 0, i32 0), i32 1 }, %struct.ac97_quirk { i16 4136, i16 294, i16 0, i32 0, i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.53, i32 0, i32 0), i32 1 }, %struct.ac97_quirk { i16 4136, i16 300, i16 0, i32 0, i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.54, i32 0, i32 0), i32 1 }, %struct.ac97_quirk { i16 4136, i16 301, i16 0, i32 0, i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.55, i32 0, i32 0), i32 1 }, %struct.ac97_quirk { i16 4136, i16 327, i16 0, i32 0, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.52, i32 0, i32 0), i32 1 }, %struct.ac97_quirk { i16 4136, i16 337, i16 0, i32 0, i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.56, i32 0, i32 0), i32 1 }, %struct.ac97_quirk { i16 4136, i16 334, i16 0, i32 0, i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.57, i32 0, i32 0), i32 1 }, %struct.ac97_quirk { i16 4136, i16 355, i16 0, i32 0, i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.58, i32 0, i32 0), i32 1 }, %struct.ac97_quirk { i16 4136, i16 362, i16 0, i32 0, i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.59, i32 0, i32 0), i32 1 }, %struct.ac97_quirk { i16 4136, i16 386, i16 0, i32 0, i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.60, i32 0, i32 0), i32 1 }, %struct.ac97_quirk { i16 4136, i16 390, i16 0, i32 0, i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.61, i32 0, i32 0), i32 8 }, %struct.ac97_quirk { i16 4136, i16 392, i16 0, i32 0, i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.62, i32 0, i32 0), i32 8 }, %struct.ac97_quirk { i16 4136, i16 401, i16 0, i32 0, i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.59, i32 0, i32 0), i32 1 }, %struct.ac97_quirk { i16 4156, i16 109, i16 0, i32 0, i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.63, i32 0, i32 0), i32 7 }, %struct.ac97_quirk { i16 4156, i16 195, i16 0, i32 0, i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.64, i32 0, i32 0), i32 1 }, %struct.ac97_quirk { i16 4156, i16 2188, i16 0, i32 0, i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.65, i32 0, i32 0), i32 8 }, %struct.ac97_quirk { i16 4156, i16 2192, i16 0, i32 0, i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.66, i32 0, i32 0), i32 7 }, %struct.ac97_quirk { i16 4156, i16 4765, i16 0, i32 0, i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.67, i32 0, i32 0), i32 1 }, %struct.ac97_quirk { i16 4156, i16 2360, i16 0, i32 0, i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.68, i32 0, i32 0), i32 8 }, %struct.ac97_quirk { i16 4156, i16 2460, i16 0, i32 0, i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.69, i32 0, i32 0), i32 8 }, %struct.ac97_quirk { i16 4156, i16 2372, i16 0, i32 0, i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.70, i32 0, i32 0), i32 8 }, %struct.ac97_quirk { i16 4156, i16 2356, i16 0, i32 0, i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.71, i32 0, i32 0), i32 8 }, %struct.ac97_quirk { i16 4156, i16 4849, i16 0, i32 0, i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.72, i32 0, i32 0), i32 1 }, %struct.ac97_quirk { i16 4156, i16 4850, i16 0, i32 0, i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.73, i32 0, i32 0), i32 1 }, %struct.ac97_quirk { i16 4156, i16 12296, i16 0, i32 0, i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.74, i32 0, i32 0), i32 1 }, %struct.ac97_quirk { i16 4173, i16 -32444, i16 0, i32 0, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.75, i32 0, i32 0), i32 6 }, %struct.ac97_quirk { i16 4173, i16 -32361, i16 0, i32 0, i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.76, i32 0, i32 0), i32 6 }, %struct.ac97_quirk { i16 4173, i16 -32320, i16 0, i32 0, i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.77, i32 0, i32 0), i32 6 }, %struct.ac97_quirk { i16 4173, i16 -32315, i16 0, i32 0, i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.78, i32 0, i32 0), i32 6 }, %struct.ac97_quirk { i16 4163, i16 -32525, i16 0, i32 0, i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.79, i32 0, i32 0), i32 4 }, %struct.ac97_quirk { i16 4303, i16 4547, i16 0, i32 0, i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.80, i32 0, i32 0), i32 1 }, %struct.ac97_quirk { i16 4303, i16 4645, i16 0, i32 0, i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.81, i32 0, i32 0), i32 1 }, %struct.ac97_quirk { i16 4303, i16 4691, i16 0, i32 0, i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.82, i32 0, i32 0), i32 1 }, %struct.ac97_quirk { i16 4303, i16 4733, i16 0, i32 0, i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.83, i32 0, i32 0), i32 1 }, %struct.ac97_quirk { i16 4303, i16 4734, i16 0, i32 0, i8* getelementptr inbounds ([24 x i8], [24 x i8]* @.str.84, i32 0, i32 0), i32 1 }, %struct.ac97_quirk { i16 4303, i16 4844, i16 0, i32 0, i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.85, i32 0, i32 0), i32 1 }, %struct.ac97_quirk { i16 4303, i16 4850, i16 0, i32 0, i8* getelementptr inbounds ([29 x i8], [29 x i8]* @.str.86, i32 0, i32 0), i32 2 }, %struct.ac97_quirk { i16 4337, i16 9829, i16 0, i32 0, i8* getelementptr inbounds ([24 x i8], [24 x i8]* @.str.87, i32 0, i32 0), i32 1 }, %struct.ac97_quirk { i16 4337, i16 10373, i16 0, i32 0, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.88, i32 0, i32 0), i32 1 }, %struct.ac97_quirk { i16 4337, i16 10389, i16 0, i32 0, i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.89, i32 0, i32 0), i32 1 }, %struct.ac97_quirk { i16 4343, i16 -31924, i16 0, i32 0, i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.90, i32 0, i32 0), i32 1 }, %struct.ac97_quirk { i16 4362, i16 86, i16 0, i32 0, i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.91, i32 0, i32 0), i32 1 }, %struct.ac97_quirk { i16 4564, i16 21365, i16 0, i32 0, i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.92, i32 0, i32 0), i32 1 }, %struct.ac97_quirk { i16 5218, i16 21616, i16 0, i32 0, i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.93, i32 0, i32 0), i32 1 }, %struct.ac97_quirk { i16 5663, i16 8250, i16 0, i32 0, i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.94, i32 0, i32 0), i32 6 }, %struct.ac97_quirk { i16 5940, i16 136, i16 0, i32 0, i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.95, i32 0, i32 0), i32 1 }, %struct.ac97_quirk { i16 -32634, i16 8192, i16 -16, i32 0, i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.96, i32 0, i32 0), i32 4 }, %struct.ac97_quirk { i16 -32634, i16 16384, i16 -16, i32 0, i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.96, i32 0, i32 0), i32 4 }, %struct.ac97_quirk { i16 -32634, i16 18518, i16 0, i32 0, i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.97, i32 0, i32 0), i32 2 }, %struct.ac97_quirk { i16 -32634, i16 19780, i16 0, i32 0, i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.98, i32 0, i32 0), i32 1 }, %struct.ac97_quirk { i16 -32634, i16 19798, i16 0, i32 0, i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.99, i32 0, i32 0), i32 1 }, %struct.ac97_quirk { i16 -32634, i16 24576, i16 -16, i32 0, i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.96, i32 0, i32 0), i32 4 }, %struct.ac97_quirk { i16 -32634, i16 -8192, i16 -16, i32 0, i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.96, i32 0, i32 0), i32 4 }, %struct.ac97_quirk zeroinitializer], section ".devinit.data", align 16
@ac97_pcm_defs = internal global [6 x %struct.ac97_pcm] [%struct.ac97_pcm { %struct.snd_ac97_bus* null, i8 2, i16 0, i16 0, i32 0, [2 x %struct.anon.37] [%struct.anon.37 { i16 984, [4 x i16] zeroinitializer, [4 x i8] zeroinitializer, [4 x %struct.snd_ac97*] zeroinitializer }, %struct.anon.37 { i16 408, [4 x i16] zeroinitializer, [4 x i8] zeroinitializer, [4 x %struct.snd_ac97*] zeroinitializer }], i64 0 }, %struct.ac97_pcm { %struct.snd_ac97_bus* null, i8 3, i16 0, i16 0, i32 0, [2 x %struct.anon.37] [%struct.anon.37 { i16 24, [4 x i16] zeroinitializer, [4 x i8] zeroinitializer, [4 x %struct.snd_ac97*] zeroinitializer }, %struct.anon.37 zeroinitializer], i64 0 }, %struct.ac97_pcm { %struct.snd_ac97_bus* null, i8 3, i16 0, i16 0, i32 0, [2 x %struct.anon.37] [%struct.anon.37 { i16 64, [4 x i16] zeroinitializer, [4 x i8] zeroinitializer, [4 x %struct.snd_ac97*] zeroinitializer }, %struct.anon.37 zeroinitializer], i64 0 }, %struct.ac97_pcm { %struct.snd_ac97_bus* null, i8 10, i16 0, i16 0, i32 0, [2 x %struct.anon.37] [%struct.anon.37 { i16 3072, [4 x i16] zeroinitializer, [4 x i8] zeroinitializer, [4 x %struct.snd_ac97*] zeroinitializer }, %struct.anon.37 zeroinitializer], i64 0 }, %struct.ac97_pcm { %struct.snd_ac97_bus* null, i8 3, i16 0, i16 0, i32 0, [2 x %struct.anon.37] [%struct.anon.37 { i16 24, [4 x i16] zeroinitializer, [4 x i8] zeroinitializer, [4 x %struct.snd_ac97*] zeroinitializer }, %struct.anon.37 zeroinitializer], i64 0 }, %struct.ac97_pcm { %struct.snd_ac97_bus* null, i8 3, i16 0, i16 0, i32 0, [2 x %struct.anon.37] [%struct.anon.37 { i16 64, [4 x i16] zeroinitializer, [4 x i8] zeroinitializer, [4 x %struct.snd_ac97*] zeroinitializer }, %struct.anon.37 zeroinitializer], i64 0 }], section ".devinit.data", align 16
@.str.37 = private unnamed_addr constant [61 x i8] c"<3>codec_write %d: semaphore is not ready for register 0x%x\0A\00", align 1
@.str.38 = private unnamed_addr constant [57 x i8] c"<3>codec_semaphore: semaphore is not ready [0x%x][0x%x]\0A\00", align 1
@.str.39 = private unnamed_addr constant [60 x i8] c"<3>codec_read %d: semaphore is not ready for register 0x%x\0A\00", align 1
@.str.40 = private unnamed_addr constant [50 x i8] c"<3>codec_read %d: read timeout for register 0x%x\0A\00", align 1
@.str.41 = private unnamed_addr constant [32 x i8] c"<4>ali_codec_semaphore timeout\0A\00", align 1
@.str.42 = private unnamed_addr constant [18 x i8] c"Compaq Deskpro EN\00", align 1
@.str.43 = private unnamed_addr constant [17 x i8] c"Compaq Evo W4000\00", align 1
@.str.44 = private unnamed_addr constant [17 x i8] c"Compaq Evo D510C\00", align 1
@.str.45 = private unnamed_addr constant [17 x i8] c"HP/Compaq nx7010\00", align 1
@.str.46 = private unnamed_addr constant [13 x i8] c"ThinkPad X31\00", align 1
@.str.47 = private unnamed_addr constant [8 x i8] c"MS-9128\00", align 1
@.str.48 = private unnamed_addr constant [18 x i8] c"IBM NetVista A30p\00", align 1
@.str.49 = private unnamed_addr constant [21 x i8] c"Acer Travelmate 2310\00", align 1
@.str.50 = private unnamed_addr constant [20 x i8] c"Acer Aspire 3003LCi\00", align 1
@.str.51 = private unnamed_addr constant [19 x i8] c"Dell Precision 530\00", align 1
@.str.52 = private unnamed_addr constant [5 x i8] c"Dell\00", align 1
@.str.53 = private unnamed_addr constant [20 x i8] c"Dell Optiplex GX260\00", align 1
@.str.54 = private unnamed_addr constant [19 x i8] c"Dell Precision 650\00", align 1
@.str.55 = private unnamed_addr constant [19 x i8] c"Dell Precision 450\00", align 1
@.str.56 = private unnamed_addr constant [20 x i8] c"Dell Optiplex GX270\00", align 1
@.str.57 = private unnamed_addr constant [10 x i8] c"Dell D800\00", align 1
@.str.58 = private unnamed_addr constant [13 x i8] c"Dell Unknown\00", align 1
@.str.59 = private unnamed_addr constant [19 x i8] c"Dell Inspiron 8600\00", align 1
@.str.60 = private unnamed_addr constant [19 x i8] c"Dell Latitude D610\00", align 1
@.str.61 = private unnamed_addr constant [19 x i8] c"Dell Latitude D810\00", align 1
@.str.62 = private unnamed_addr constant [19 x i8] c"Dell Inspiron 6000\00", align 1
@.str.63 = private unnamed_addr constant [10 x i8] c"HP zv5000\00", align 1
@.str.64 = private unnamed_addr constant [10 x i8] c"HP xw6000\00", align 1
@.str.65 = private unnamed_addr constant [10 x i8] c"HP nc8000\00", align 1
@.str.66 = private unnamed_addr constant [10 x i8] c"HP nc6000\00", align 1
@.str.67 = private unnamed_addr constant [10 x i8] c"HP xw8000\00", align 1
@.str.68 = private unnamed_addr constant [10 x i8] c"HP nc4200\00", align 1
@.str.69 = private unnamed_addr constant [17 x i8] c"HP nx6110/nc6120\00", align 1
@.str.70 = private unnamed_addr constant [10 x i8] c"HP nc6220\00", align 1
@.str.71 = private unnamed_addr constant [10 x i8] c"HP nc8220\00", align 1
@.str.72 = private unnamed_addr constant [10 x i8] c"HP xw8200\00", align 1
@.str.73 = private unnamed_addr constant [10 x i8] c"HP xw6200\00", align 1
@.str.74 = private unnamed_addr constant [10 x i8] c"HP xw4200\00", align 1
@.str.75 = private unnamed_addr constant [5 x i8] c"Sony\00", align 1
@.str.76 = private unnamed_addr constant [10 x i8] c"Sony S1XP\00", align 1
@.str.77 = private unnamed_addr constant [20 x i8] c"Sony VAIO VGN-T350P\00", align 1
@.str.78 = private unnamed_addr constant [19 x i8] c"Sony VAIO VGN-B1VP\00", align 1
@.str.79 = private unnamed_addr constant [17 x i8] c"ASUS ICH5/AD1985\00", align 1
@.str.80 = private unnamed_addr constant [22 x i8] c"Fujitsu-Siemens E4010\00", align 1
@.str.81 = private unnamed_addr constant [22 x i8] c"Fujitsu-Siemens T3010\00", align 1
@.str.82 = private unnamed_addr constant [14 x i8] c"Fujitsu S6210\00", align 1
@.str.83 = private unnamed_addr constant [23 x i8] c"Fujitsu Lifebook P7010\00", align 1
@.str.84 = private unnamed_addr constant [24 x i8] c"Fujitsu Lifebook C1211D\00", align 1
@.str.85 = private unnamed_addr constant [21 x i8] c"Fujitsu-Siemens 4010\00", align 1
@.str.86 = private unnamed_addr constant [29 x i8] c"Fujitsu-Siemens Celsius H320\00", align 1
@.str.87 = private unnamed_addr constant [24 x i8] c"Fujitsu-Siemens Celsius\00", align 1
@.str.88 = private unnamed_addr constant [11 x i8] c"AMD64 Mobo\00", align 1
@.str.89 = private unnamed_addr constant [18 x i8] c"Tyan Thunder K8WE\00", align 1
@.str.90 = private unnamed_addr constant [16 x i8] c"Panasonic CF-R4\00", align 1
@.str.91 = private unnamed_addr constant [23 x i8] c"Fujitsu-Siemens Scenic\00", align 1
@.str.92 = private unnamed_addr constant [22 x i8] c"ADI AD1985 (discrete)\00", align 1
@.str.93 = private unnamed_addr constant [21 x i8] c"MSI P4 ATX 645 Ultra\00", align 1
@.str.94 = private unnamed_addr constant [15 x i8] c"Gateway 4525GZ\00", align 1
@.str.95 = private unnamed_addr constant [22 x i8] c"Fujitsu-Siemens D1522\00", align 1
@.str.96 = private unnamed_addr constant [18 x i8] c"Intel ICH5/AD1985\00", align 1
@.str.97 = private unnamed_addr constant [23 x i8] c"Intel D845WN (82801BA)\00", align 1
@.str.98 = private unnamed_addr constant [15 x i8] c"Intel D850EMV2\00", align 1
@.str.99 = private unnamed_addr constant [17 x i8] c"Intel ICH/AD1885\00", align 1
@intel_pcms = internal global [5 x %struct.ich_pcm_table] [%struct.ich_pcm_table { i8* null, %struct.snd_pcm_ops* @snd_intel8x0_playback_ops, %struct.snd_pcm_ops* @snd_intel8x0_capture_ops, i64 65536, i64 131072, i32 0 }, %struct.ich_pcm_table { i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.100, i32 0, i32 0), %struct.snd_pcm_ops* null, %struct.snd_pcm_ops* @snd_intel8x0_capture_mic_ops, i64 0, i64 131072, i32 2 }, %struct.ich_pcm_table { i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.101, i32 0, i32 0), %struct.snd_pcm_ops* null, %struct.snd_pcm_ops* @snd_intel8x0_capture_mic2_ops, i64 0, i64 131072, i32 3 }, %struct.ich_pcm_table { i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.102, i32 0, i32 0), %struct.snd_pcm_ops* null, %struct.snd_pcm_ops* @snd_intel8x0_capture2_ops, i64 0, i64 131072, i32 4 }, %struct.ich_pcm_table { i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.103, i32 0, i32 0), %struct.snd_pcm_ops* @snd_intel8x0_spdif_ops, %struct.snd_pcm_ops* null, i64 65536, i64 131072, i32 5 }], section ".devinit.data", align 16
@nforce_pcms = internal global [3 x %struct.ich_pcm_table] [%struct.ich_pcm_table { i8* null, %struct.snd_pcm_ops* @snd_intel8x0_playback_ops, %struct.snd_pcm_ops* @snd_intel8x0_capture_ops, i64 65536, i64 131072, i32 0 }, %struct.ich_pcm_table { i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.100, i32 0, i32 0), %struct.snd_pcm_ops* null, %struct.snd_pcm_ops* @snd_intel8x0_capture_mic_ops, i64 0, i64 131072, i32 2 }, %struct.ich_pcm_table { i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.103, i32 0, i32 0), %struct.snd_pcm_ops* @snd_intel8x0_spdif_ops, %struct.snd_pcm_ops* null, i64 65536, i64 131072, i32 3 }], section ".devinit.data", align 16
@ali_pcms = internal global [3 x %struct.ich_pcm_table] [%struct.ich_pcm_table { i8* null, %struct.snd_pcm_ops* @snd_intel8x0_ali_playback_ops, %struct.snd_pcm_ops* @snd_intel8x0_ali_capture_ops, i64 65536, i64 131072, i32 0 }, %struct.ich_pcm_table { i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.100, i32 0, i32 0), %struct.snd_pcm_ops* null, %struct.snd_pcm_ops* @snd_intel8x0_ali_capture_mic_ops, i64 0, i64 131072, i32 2 }, %struct.ich_pcm_table { i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.103, i32 0, i32 0), %struct.snd_pcm_ops* @snd_intel8x0_ali_ac97spdifout_ops, %struct.snd_pcm_ops* null, i64 65536, i64 131072, i32 3 }], section ".devinit.data", align 16
@snd_intel8x0_playback_ops = internal global %struct.snd_pcm_ops { i32 (%struct.snd_pcm_substream*)* @snd_intel8x0_playback_open, i32 (%struct.snd_pcm_substream*)* @snd_intel8x0_playback_close, i32 (%struct.snd_pcm_substream*, i32, i8*)* @snd_pcm_lib_ioctl, i32 (%struct.snd_pcm_substream*, %struct.snd_pcm_hw_params*)* @snd_intel8x0_hw_params, i32 (%struct.snd_pcm_substream*)* @snd_intel8x0_hw_free, i32 (%struct.snd_pcm_substream*)* @snd_intel8x0_pcm_prepare, i32 (%struct.snd_pcm_substream*, i32)* @snd_intel8x0_pcm_trigger, i64 (%struct.snd_pcm_substream*)* @snd_intel8x0_pcm_pointer, i32 (%struct.snd_pcm_substream*, i32, i64, i8*, i64)* null, i32 (%struct.snd_pcm_substream*, i32, i64, i64)* null, %struct.page* (%struct.snd_pcm_substream*, i64)* null, i32 (%struct.snd_pcm_substream*, %struct.vm_area_struct*)* null, i32 (%struct.snd_pcm_substream*)* null }, align 8
@snd_intel8x0_capture_ops = internal global %struct.snd_pcm_ops { i32 (%struct.snd_pcm_substream*)* @snd_intel8x0_capture_open, i32 (%struct.snd_pcm_substream*)* @snd_intel8x0_capture_close, i32 (%struct.snd_pcm_substream*, i32, i8*)* @snd_pcm_lib_ioctl, i32 (%struct.snd_pcm_substream*, %struct.snd_pcm_hw_params*)* @snd_intel8x0_hw_params, i32 (%struct.snd_pcm_substream*)* @snd_intel8x0_hw_free, i32 (%struct.snd_pcm_substream*)* @snd_intel8x0_pcm_prepare, i32 (%struct.snd_pcm_substream*, i32)* @snd_intel8x0_pcm_trigger, i64 (%struct.snd_pcm_substream*)* @snd_intel8x0_pcm_pointer, i32 (%struct.snd_pcm_substream*, i32, i64, i8*, i64)* null, i32 (%struct.snd_pcm_substream*, i32, i64, i64)* null, %struct.page* (%struct.snd_pcm_substream*, i64)* null, i32 (%struct.snd_pcm_substream*, %struct.vm_area_struct*)* null, i32 (%struct.snd_pcm_substream*)* null }, align 8
@.str.100 = private unnamed_addr constant [8 x i8] c"MIC ADC\00", align 1
@snd_intel8x0_capture_mic_ops = internal global %struct.snd_pcm_ops { i32 (%struct.snd_pcm_substream*)* @snd_intel8x0_mic_open, i32 (%struct.snd_pcm_substream*)* @snd_intel8x0_mic_close, i32 (%struct.snd_pcm_substream*, i32, i8*)* @snd_pcm_lib_ioctl, i32 (%struct.snd_pcm_substream*, %struct.snd_pcm_hw_params*)* @snd_intel8x0_hw_params, i32 (%struct.snd_pcm_substream*)* @snd_intel8x0_hw_free, i32 (%struct.snd_pcm_substream*)* @snd_intel8x0_pcm_prepare, i32 (%struct.snd_pcm_substream*, i32)* @snd_intel8x0_pcm_trigger, i64 (%struct.snd_pcm_substream*)* @snd_intel8x0_pcm_pointer, i32 (%struct.snd_pcm_substream*, i32, i64, i8*, i64)* null, i32 (%struct.snd_pcm_substream*, i32, i64, i64)* null, %struct.page* (%struct.snd_pcm_substream*, i64)* null, i32 (%struct.snd_pcm_substream*, %struct.vm_area_struct*)* null, i32 (%struct.snd_pcm_substream*)* null }, align 8
@.str.101 = private unnamed_addr constant [9 x i8] c"MIC2 ADC\00", align 1
@snd_intel8x0_capture_mic2_ops = internal global %struct.snd_pcm_ops { i32 (%struct.snd_pcm_substream*)* @snd_intel8x0_mic2_open, i32 (%struct.snd_pcm_substream*)* @snd_intel8x0_mic2_close, i32 (%struct.snd_pcm_substream*, i32, i8*)* @snd_pcm_lib_ioctl, i32 (%struct.snd_pcm_substream*, %struct.snd_pcm_hw_params*)* @snd_intel8x0_hw_params, i32 (%struct.snd_pcm_substream*)* @snd_intel8x0_hw_free, i32 (%struct.snd_pcm_substream*)* @snd_intel8x0_pcm_prepare, i32 (%struct.snd_pcm_substream*, i32)* @snd_intel8x0_pcm_trigger, i64 (%struct.snd_pcm_substream*)* @snd_intel8x0_pcm_pointer, i32 (%struct.snd_pcm_substream*, i32, i64, i8*, i64)* null, i32 (%struct.snd_pcm_substream*, i32, i64, i64)* null, %struct.page* (%struct.snd_pcm_substream*, i64)* null, i32 (%struct.snd_pcm_substream*, %struct.vm_area_struct*)* null, i32 (%struct.snd_pcm_substream*)* null }, align 8
@.str.102 = private unnamed_addr constant [5 x i8] c"ADC2\00", align 1
@snd_intel8x0_capture2_ops = internal global %struct.snd_pcm_ops { i32 (%struct.snd_pcm_substream*)* @snd_intel8x0_capture2_open, i32 (%struct.snd_pcm_substream*)* @snd_intel8x0_capture2_close, i32 (%struct.snd_pcm_substream*, i32, i8*)* @snd_pcm_lib_ioctl, i32 (%struct.snd_pcm_substream*, %struct.snd_pcm_hw_params*)* @snd_intel8x0_hw_params, i32 (%struct.snd_pcm_substream*)* @snd_intel8x0_hw_free, i32 (%struct.snd_pcm_substream*)* @snd_intel8x0_pcm_prepare, i32 (%struct.snd_pcm_substream*, i32)* @snd_intel8x0_pcm_trigger, i64 (%struct.snd_pcm_substream*)* @snd_intel8x0_pcm_pointer, i32 (%struct.snd_pcm_substream*, i32, i64, i8*, i64)* null, i32 (%struct.snd_pcm_substream*, i32, i64, i64)* null, %struct.page* (%struct.snd_pcm_substream*, i64)* null, i32 (%struct.snd_pcm_substream*, %struct.vm_area_struct*)* null, i32 (%struct.snd_pcm_substream*)* null }, align 8
@.str.103 = private unnamed_addr constant [7 x i8] c"IEC958\00", align 1
@snd_intel8x0_spdif_ops = internal global %struct.snd_pcm_ops { i32 (%struct.snd_pcm_substream*)* @snd_intel8x0_spdif_open, i32 (%struct.snd_pcm_substream*)* @snd_intel8x0_spdif_close, i32 (%struct.snd_pcm_substream*, i32, i8*)* @snd_pcm_lib_ioctl, i32 (%struct.snd_pcm_substream*, %struct.snd_pcm_hw_params*)* @snd_intel8x0_hw_params, i32 (%struct.snd_pcm_substream*)* @snd_intel8x0_hw_free, i32 (%struct.snd_pcm_substream*)* @snd_intel8x0_pcm_prepare, i32 (%struct.snd_pcm_substream*, i32)* @snd_intel8x0_pcm_trigger, i64 (%struct.snd_pcm_substream*)* @snd_intel8x0_pcm_pointer, i32 (%struct.snd_pcm_substream*, i32, i64, i8*, i64)* null, i32 (%struct.snd_pcm_substream*, i32, i64, i64)* null, %struct.page* (%struct.snd_pcm_substream*, i64)* null, i32 (%struct.snd_pcm_substream*, %struct.vm_area_struct*)* null, i32 (%struct.snd_pcm_substream*)* null }, align 8
@hw_constraints_channels8 = internal global %struct.snd_pcm_hw_constraint_list { i32 4, i32* getelementptr inbounds ([4 x i32], [4 x i32]* @channels8, i32 0, i32 0), i32 0 }, align 8
@hw_constraints_channels6 = internal global %struct.snd_pcm_hw_constraint_list { i32 3, i32* getelementptr inbounds ([3 x i32], [3 x i32]* @channels6, i32 0, i32 0), i32 0 }, align 8
@hw_constraints_channels4 = internal global %struct.snd_pcm_hw_constraint_list { i32 2, i32* getelementptr inbounds ([2 x i32], [2 x i32]* @channels4, i32 0, i32 0), i32 0 }, align 8
@snd_intel8x0_stream = internal global %struct.snd_pcm_hardware { i32 852227, i64 4, i32 128, i32 48000, i32 48000, i32 2, i32 2, i64 131072, i64 32, i64 131072, i32 1, i32 1024, i64 0 }, align 8
@channels8 = internal global [4 x i32] [i32 2, i32 4, i32 6, i32 8], align 16
@channels6 = internal global [3 x i32] [i32 2, i32 4, i32 6], align 4
@channels4 = internal global [2 x i32] [i32 2, i32 4], align 4
@snd_intel8x0_ali_playback_ops = internal global %struct.snd_pcm_ops { i32 (%struct.snd_pcm_substream*)* @snd_intel8x0_playback_open, i32 (%struct.snd_pcm_substream*)* @snd_intel8x0_playback_close, i32 (%struct.snd_pcm_substream*, i32, i8*)* @snd_pcm_lib_ioctl, i32 (%struct.snd_pcm_substream*, %struct.snd_pcm_hw_params*)* @snd_intel8x0_hw_params, i32 (%struct.snd_pcm_substream*)* @snd_intel8x0_hw_free, i32 (%struct.snd_pcm_substream*)* @snd_intel8x0_pcm_prepare, i32 (%struct.snd_pcm_substream*, i32)* @snd_intel8x0_ali_trigger, i64 (%struct.snd_pcm_substream*)* @snd_intel8x0_pcm_pointer, i32 (%struct.snd_pcm_substream*, i32, i64, i8*, i64)* null, i32 (%struct.snd_pcm_substream*, i32, i64, i64)* null, %struct.page* (%struct.snd_pcm_substream*, i64)* null, i32 (%struct.snd_pcm_substream*, %struct.vm_area_struct*)* null, i32 (%struct.snd_pcm_substream*)* null }, align 8
@snd_intel8x0_ali_capture_ops = internal global %struct.snd_pcm_ops { i32 (%struct.snd_pcm_substream*)* @snd_intel8x0_capture_open, i32 (%struct.snd_pcm_substream*)* @snd_intel8x0_capture_close, i32 (%struct.snd_pcm_substream*, i32, i8*)* @snd_pcm_lib_ioctl, i32 (%struct.snd_pcm_substream*, %struct.snd_pcm_hw_params*)* @snd_intel8x0_hw_params, i32 (%struct.snd_pcm_substream*)* @snd_intel8x0_hw_free, i32 (%struct.snd_pcm_substream*)* @snd_intel8x0_pcm_prepare, i32 (%struct.snd_pcm_substream*, i32)* @snd_intel8x0_ali_trigger, i64 (%struct.snd_pcm_substream*)* @snd_intel8x0_pcm_pointer, i32 (%struct.snd_pcm_substream*, i32, i64, i8*, i64)* null, i32 (%struct.snd_pcm_substream*, i32, i64, i64)* null, %struct.page* (%struct.snd_pcm_substream*, i64)* null, i32 (%struct.snd_pcm_substream*, %struct.vm_area_struct*)* null, i32 (%struct.snd_pcm_substream*)* null }, align 8
@snd_intel8x0_ali_capture_mic_ops = internal global %struct.snd_pcm_ops { i32 (%struct.snd_pcm_substream*)* @snd_intel8x0_mic_open, i32 (%struct.snd_pcm_substream*)* @snd_intel8x0_mic_close, i32 (%struct.snd_pcm_substream*, i32, i8*)* @snd_pcm_lib_ioctl, i32 (%struct.snd_pcm_substream*, %struct.snd_pcm_hw_params*)* @snd_intel8x0_hw_params, i32 (%struct.snd_pcm_substream*)* @snd_intel8x0_hw_free, i32 (%struct.snd_pcm_substream*)* @snd_intel8x0_pcm_prepare, i32 (%struct.snd_pcm_substream*, i32)* @snd_intel8x0_ali_trigger, i64 (%struct.snd_pcm_substream*)* @snd_intel8x0_pcm_pointer, i32 (%struct.snd_pcm_substream*, i32, i64, i8*, i64)* null, i32 (%struct.snd_pcm_substream*, i32, i64, i64)* null, %struct.page* (%struct.snd_pcm_substream*, i64)* null, i32 (%struct.snd_pcm_substream*, %struct.vm_area_struct*)* null, i32 (%struct.snd_pcm_substream*)* null }, align 8
@snd_intel8x0_ali_ac97spdifout_ops = internal global %struct.snd_pcm_ops { i32 (%struct.snd_pcm_substream*)* @snd_intel8x0_ali_ac97spdifout_open, i32 (%struct.snd_pcm_substream*)* @snd_intel8x0_ali_ac97spdifout_close, i32 (%struct.snd_pcm_substream*, i32, i8*)* @snd_pcm_lib_ioctl, i32 (%struct.snd_pcm_substream*, %struct.snd_pcm_hw_params*)* @snd_intel8x0_hw_params, i32 (%struct.snd_pcm_substream*)* @snd_intel8x0_hw_free, i32 (%struct.snd_pcm_substream*)* @snd_intel8x0_pcm_prepare, i32 (%struct.snd_pcm_substream*, i32)* @snd_intel8x0_ali_trigger, i64 (%struct.snd_pcm_substream*)* @snd_intel8x0_pcm_pointer, i32 (%struct.snd_pcm_substream*, i32, i64, i8*, i64)* null, i32 (%struct.snd_pcm_substream*, i32, i64, i64)* null, %struct.page* (%struct.snd_pcm_substream*, i64)* null, i32 (%struct.snd_pcm_substream*, %struct.vm_area_struct*)* null, i32 (%struct.snd_pcm_substream*)* null }, align 8
@snd_intel8x0_ali_trigger.fiforeg = internal global [3 x i32] [i32 12, i32 28, i32 44], align 4
@.str.104 = private unnamed_addr constant [15 x i8] c"Intel ICH - %s\00", align 1
@.str.105 = private unnamed_addr constant [8 x i8] c"%s - %s\00", align 1
@.str.106 = private unnamed_addr constant [9 x i8] c"intel8x0\00", align 1
@.str.107 = private unnamed_addr constant [11 x i8] c"Intel8x0\0A\0A\00", align 1
@.str.108 = private unnamed_addr constant [32 x i8] c"Global control        : 0x%08x\0A\00", align 1
@.str.109 = private unnamed_addr constant [32 x i8] c"Global status         : 0x%08x\0A\00", align 1
@.str.110 = private unnamed_addr constant [32 x i8] c"SDM                   : 0x%08x\0A\00", align 1
@.str.111 = private unnamed_addr constant [24 x i8] c"AC'97 codecs ready    :\00", align 1
@snd_intel8x0_proc_read.codecs = internal global [3 x i8*] [i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.112, i32 0, i32 0), i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.113, i32 0, i32 0), i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.114, i32 0, i32 0)], align 16
@.str.112 = private unnamed_addr constant [8 x i8] c"primary\00", align 1
@.str.113 = private unnamed_addr constant [10 x i8] c"secondary\00", align 1
@.str.114 = private unnamed_addr constant [9 x i8] c"tertiary\00", align 1
@.str.115 = private unnamed_addr constant [4 x i8] c" %s\00", align 1
@.str.116 = private unnamed_addr constant [6 x i8] c" none\00", align 1
@.str.117 = private unnamed_addr constant [2 x i8] c"\0A\00", align 1
@.str.118 = private unnamed_addr constant [34 x i8] c"AC'97 codecs SDIN     : %i %i %i\0A\00", align 1
@intel8x0_clock_list = internal global [6 x %struct.snd_pci_quirk] [%struct.snd_pci_quirk { i16 3601, i16 138, i16 -1, i32 41000 }, %struct.snd_pci_quirk { i16 4136, i16 190, i16 -1, i32 44100 }, %struct.snd_pci_quirk { i16 4136, i16 375, i16 -1, i32 48000 }, %struct.snd_pci_quirk { i16 4136, i16 429, i16 -1, i32 48000 }, %struct.snd_pci_quirk { i16 4163, i16 -32525, i16 -1, i32 48000 }, %struct.snd_pci_quirk zeroinitializer], section ".devinit.data", align 16
@.str.119 = private unnamed_addr constant [50 x i8] c"<6>intel8x0: white list rate for %04x:%04x is %i\0A\00", align 1
@.str.120 = private unnamed_addr constant [63 x i8] c"<4>no playback buffer allocated - aborting measure ac97 clock\0A\00", align 1
@.str.121 = private unnamed_addr constant [37 x i8] c"<3>cannot set ac97 rate: clock = %d\0A\00", align 1
@.str.122 = private unnamed_addr constant [50 x i8] c"<3>intel8x0: measure - unreliable DMA position..\0A\00", align 1
@.str.123 = private unnamed_addr constant [41 x i8] c"<6>%s: measured %lu usecs (%lu samples)\0A\00", align 1
@__func__.intel8x0_measure_ac97_clock = private unnamed_addr constant [28 x i8] c"intel8x0_measure_ac97_clock\00", align 1
@.str.124 = private unnamed_addr constant [37 x i8] c"<3>intel8x0: ?? calculation error..\0A\00", align 1
@.str.125 = private unnamed_addr constant [42 x i8] c"<6>intel8x0: measured clock %ld rejected\0A\00", align 1
@.str.126 = private unnamed_addr constant [29 x i8] c"<6>intel8x0: clocking to %d\0A\00", align 1
@.str.127 = private unnamed_addr constant [57 x i8] c"<3>intel8x0: pci_enable_device failed, disabling device\0A\00", align 1
@.str.128 = private unnamed_addr constant [54 x i8] c"<3>intel8x0: unable to grab IRQ %d, disabling device\0A\00", align 1
@llvm.used = appending global [14 x i8*] [i8* bitcast (%struct.kernel_param* @__param_index to i8*), i8* bitcast (%struct.kernel_param* @__param_id to i8*), i8* bitcast (%struct.kernel_param* @__param_ac97_clock to i8*), i8* bitcast (%struct.kernel_param* @__param_ac97_quirk to i8*), i8* bitcast (%struct.kernel_param* @__param_buggy_semaphore to i8*), i8* bitcast (%struct.kernel_param* @__param_buggy_irq to i8*), i8* bitcast (%struct.kernel_param* @__param_xbox to i8*), i8* bitcast (%struct.kernel_param* @__param_spdif_aclink to i8*), i8* bitcast (%struct.kernel_param* @__param_enable to i8*), i8* bitcast (%struct.kernel_param* @__param_joystick to i8*), i8* bitcast (void (%struct.pci_dev*)* @snd_intel8x0_remove to i8*), i8* bitcast (void ()* @alsa_card_intel8x0_exit to i8*), i8* bitcast (i32 ()** @__initcall_alsa_card_intel8x0_init6 to i8*), i8* bitcast (void ()** @__exitcall_alsa_card_intel8x0_exit to i8*)], section "llvm.metadata"

; Function Attrs: noinline nounwind uwtable
define internal void @smp_send_stop() #0 {
  %1 = load void (i32)*, void (i32)** getelementptr inbounds (%struct.smp_ops, %struct.smp_ops* @smp_ops, i32 0, i32 3), align 8
  call void %1(i32 0)
  ret void
}

; Function Attrs: noinline nounwind uwtable
define internal void @smp_send_reschedule(i32) #0 {
  %2 = load void (i32)*, void (i32)** getelementptr inbounds (%struct.smp_ops, %struct.smp_ops* @smp_ops, i32 0, i32 4), align 8
  call void %2(i32 %0)
  ret void
}

; Function Attrs: noinline nounwind uwtable
define internal void @smp_prepare_cpus(i32) #0 {
  %2 = load void (i32)*, void (i32)** getelementptr inbounds (%struct.smp_ops, %struct.smp_ops* @smp_ops, i32 0, i32 1), align 8
  call void %2(i32 %0)
  ret void
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @__cpu_up(i32) #0 {
  %2 = load i32 (i32)*, i32 (i32)** getelementptr inbounds (%struct.smp_ops, %struct.smp_ops* @smp_ops, i32 0, i32 5), align 8
  %3 = call i32 %2(i32 %0)
  ret i32 %3
}

; Function Attrs: noinline nounwind uwtable
define internal void @smp_cpus_done(i32) #0 {
  %2 = load void (i32)*, void (i32)** getelementptr inbounds (%struct.smp_ops, %struct.smp_ops* @smp_ops, i32 0, i32 2), align 8
  call void %2(i32 %0)
  ret void
}

; Function Attrs: noinline nounwind uwtable
define internal void @smp_prepare_boot_cpu() #0 {
  %1 = load void ()*, void ()** getelementptr inbounds (%struct.smp_ops, %struct.smp_ops* @smp_ops, i32 0, i32 0), align 8
  call void %1()
  ret void
}

; Function Attrs: noinline nounwind uwtable
define internal void @snd_intel8x0_remove(%struct.pci_dev*) #0 section ".devexit.text" {
  %2 = call i8* @pci_get_drvdata(%struct.pci_dev* %0)
  %3 = bitcast i8* %2 to %struct.snd_card*
  %4 = call i32 @snd_card_free(%struct.snd_card* %3)
  call void @pci_set_drvdata(%struct.pci_dev* %0, i8* null)
  ret void
}

declare i32 @snd_card_free(%struct.snd_card*) #1

; Function Attrs: noinline nounwind uwtable
define internal i8* @pci_get_drvdata(%struct.pci_dev*) #0 {
  %2 = getelementptr inbounds %struct.pci_dev, %struct.pci_dev* %0, i32 0, i32 27
  %3 = call i8* @dev_get_drvdata(%struct.device* %2)
  ret i8* %3
}

; Function Attrs: noinline nounwind uwtable
define internal void @pci_set_drvdata(%struct.pci_dev*, i8*) #0 {
  %3 = getelementptr inbounds %struct.pci_dev, %struct.pci_dev* %0, i32 0, i32 27
  %4 = call i32 @dev_set_drvdata(%struct.device* %3, i8* %1)
  ret void
}

; Function Attrs: noinline nounwind uwtable
define internal void @alsa_card_intel8x0_exit() #0 section ".exit.text" {
  call void @pci_unregister_driver(%struct.pci_driver* bitcast ({ %struct.list_head, i8*, %struct.pci_device_id*, i32 (%struct.pci_dev*, %struct.pci_device_id*)*, void (%struct.pci_dev*)*, i32 (%struct.pci_dev*, i32)*, i32 (%struct.pci_dev*, i32)*, i32 (%struct.pci_dev*)*, i32 (%struct.pci_dev*)*, void (%struct.pci_dev*)*, %struct.pci_error_handlers*, %struct.device_driver, %struct.pci_dynids }* @driver to %struct.pci_driver*))
  ret void
}

declare void @pci_unregister_driver(%struct.pci_driver*) #1

; Function Attrs: noinline nounwind uwtable
define internal i32 @alsa_card_intel8x0_init() #0 section ".init.text" {
  %1 = call i32 @__pci_register_driver(%struct.pci_driver* bitcast ({ %struct.list_head, i8*, %struct.pci_device_id*, i32 (%struct.pci_dev*, %struct.pci_device_id*)*, void (%struct.pci_dev*)*, i32 (%struct.pci_dev*, i32)*, i32 (%struct.pci_dev*, i32)*, i32 (%struct.pci_dev*)*, i32 (%struct.pci_dev*)*, void (%struct.pci_dev*)*, %struct.pci_error_handlers*, %struct.device_driver, %struct.pci_dynids }* @driver to %struct.pci_driver*), %struct.module* null, i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.106, i32 0, i32 0))
  ret i32 %1
}

declare i8* @dev_get_drvdata(%struct.device*) #1

declare i32 @dev_set_drvdata(%struct.device*, i8*) #1

; Function Attrs: noinline nounwind uwtable
define internal i32 @snd_intel8x0_probe(%struct.pci_dev*, %struct.pci_device_id*) #0 section ".devinit.text" {
  %3 = alloca %struct.snd_card*, align 8
  %4 = alloca %struct.intel8x0*, align 8
  %5 = load i32, i32* @index, align 4
  %6 = load i8*, i8** @id, align 8
  %7 = call i32 @snd_card_create(i32 %5, i8* %6, %struct.module* null, i32 0, %struct.snd_card** %3)
  %8 = icmp slt i32 %7, 0
  br i1 %8, label %134, label %9

; <label>:9:                                      ; preds = %2
  %10 = load i32, i32* @spdif_aclink, align 4
  %11 = icmp slt i32 %10, 0
  br i1 %11, label %12, label %14

; <label>:12:                                     ; preds = %9
  %13 = call i32 @check_default_spdif_aclink(%struct.pci_dev* %0)
  store i32 %13, i32* @spdif_aclink, align 4
  br label %14

; <label>:14:                                     ; preds = %12, %9
  %15 = load %struct.snd_card*, %struct.snd_card** %3, align 8
  %16 = getelementptr inbounds %struct.snd_card, %struct.snd_card* %15, i32 0, i32 2
  %17 = getelementptr inbounds [16 x i8], [16 x i8]* %16, i32 0, i32 0
  %18 = call i8* @strcpy(i8* %17, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.2, i32 0, i32 0))
  %19 = load i32, i32* @spdif_aclink, align 4
  %20 = icmp ne i32 %19, 0
  br i1 %20, label %34, label %21

; <label>:21:                                     ; preds = %14
  %22 = getelementptr inbounds %struct.pci_device_id, %struct.pci_device_id* %1, i32 0, i32 6
  %23 = load i64, i64* %22, align 8
  switch i64 %23, label %34 [
    i64 4, label %24
    i64 1, label %29
  ]

; <label>:24:                                     ; preds = %21
  %25 = load %struct.snd_card*, %struct.snd_card** %3, align 8
  %26 = getelementptr inbounds %struct.snd_card, %struct.snd_card* %25, i32 0, i32 2
  %27 = getelementptr inbounds [16 x i8], [16 x i8]* %26, i32 0, i32 0
  %28 = call i8* @strcpy(i8* %27, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.3, i32 0, i32 0))
  br label %34

; <label>:29:                                     ; preds = %21
  %30 = load %struct.snd_card*, %struct.snd_card** %3, align 8
  %31 = getelementptr inbounds %struct.snd_card, %struct.snd_card* %30, i32 0, i32 2
  %32 = getelementptr inbounds [16 x i8], [16 x i8]* %31, i32 0, i32 0
  %33 = call i8* @strcpy(i8* %32, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.4, i32 0, i32 0))
  br label %34

; <label>:34:                                     ; preds = %21, %24, %29, %14
  %35 = load %struct.snd_card*, %struct.snd_card** %3, align 8
  %36 = getelementptr inbounds %struct.snd_card, %struct.snd_card* %35, i32 0, i32 3
  %37 = getelementptr inbounds [32 x i8], [32 x i8]* %36, i32 0, i32 0
  %38 = call i8* @strcpy(i8* %37, i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str, i32 0, i32 0))
  br label %39

; <label>:39:                                     ; preds = %57, %34
  %.01 = phi %struct.shortname_table* [ getelementptr inbounds ([23 x %struct.shortname_table], [23 x %struct.shortname_table]* @shortnames, i32 0, i32 0), %34 ], [ %58, %57 ]
  %40 = getelementptr inbounds %struct.shortname_table, %struct.shortname_table* %.01, i32 0, i32 0
  %41 = load i32, i32* %40, align 8
  %42 = icmp ne i32 %41, 0
  br i1 %42, label %43, label %.loopexit

; <label>:43:                                     ; preds = %39
  %44 = getelementptr inbounds %struct.pci_dev, %struct.pci_dev* %0, i32 0, i32 8
  %45 = load i16, i16* %44, align 2
  %46 = zext i16 %45 to i32
  %47 = getelementptr inbounds %struct.shortname_table, %struct.shortname_table* %.01, i32 0, i32 0
  %48 = load i32, i32* %47, align 8
  %49 = icmp eq i32 %46, %48
  br i1 %49, label %50, label %57

; <label>:50:                                     ; preds = %43
  %51 = load %struct.snd_card*, %struct.snd_card** %3, align 8
  %52 = getelementptr inbounds %struct.snd_card, %struct.snd_card* %51, i32 0, i32 3
  %53 = getelementptr inbounds [32 x i8], [32 x i8]* %52, i32 0, i32 0
  %54 = getelementptr inbounds %struct.shortname_table, %struct.shortname_table* %.01, i32 0, i32 1
  %55 = load i8*, i8** %54, align 8
  %56 = call i8* @strcpy(i8* %53, i8* %55)
  br label %.loopexit

; <label>:57:                                     ; preds = %43
  %58 = getelementptr inbounds %struct.shortname_table, %struct.shortname_table* %.01, i32 1
  br label %39

.loopexit:                                        ; preds = %39, %50
  %59 = load i32, i32* @buggy_irq, align 4
  %60 = icmp slt i32 %59, 0
  br i1 %60, label %61, label %65

; <label>:61:                                     ; preds = %.loopexit
  %62 = getelementptr inbounds %struct.pci_device_id, %struct.pci_device_id* %1, i32 0, i32 6
  %63 = load i64, i64* %62, align 8
  %64 = icmp eq i64 %63, 4
  %.sink = select i1 %64, i32 1, i32 0
  store i32 %.sink, i32* @buggy_irq, align 4
  br label %65

; <label>:65:                                     ; preds = %61, %.loopexit
  %66 = load %struct.snd_card*, %struct.snd_card** %3, align 8
  %67 = getelementptr inbounds %struct.pci_device_id, %struct.pci_device_id* %1, i32 0, i32 6
  %68 = load i64, i64* %67, align 8
  %69 = call i32 @snd_intel8x0_create(%struct.snd_card* %66, %struct.pci_dev* %0, i64 %68, %struct.intel8x0** %4)
  %70 = icmp slt i32 %69, 0
  br i1 %70, label %71, label %74

; <label>:71:                                     ; preds = %65
  %72 = load %struct.snd_card*, %struct.snd_card** %3, align 8
  %73 = call i32 @snd_card_free(%struct.snd_card* %72)
  br label %134

; <label>:74:                                     ; preds = %65
  %75 = load %struct.intel8x0*, %struct.intel8x0** %4, align 8
  %76 = bitcast %struct.intel8x0* %75 to i8*
  %77 = load %struct.snd_card*, %struct.snd_card** %3, align 8
  %78 = getelementptr inbounds %struct.snd_card, %struct.snd_card* %77, i32 0, i32 8
  store i8* %76, i8** %78, align 8
  %79 = load %struct.intel8x0*, %struct.intel8x0** %4, align 8
  %80 = load i32, i32* @ac97_clock, align 4
  %81 = load i8*, i8** @ac97_quirk, align 8
  %82 = call i32 @snd_intel8x0_mixer(%struct.intel8x0* %79, i32 %80, i8* %81)
  %83 = icmp slt i32 %82, 0
  br i1 %83, label %84, label %87

; <label>:84:                                     ; preds = %74
  %85 = load %struct.snd_card*, %struct.snd_card** %3, align 8
  %86 = call i32 @snd_card_free(%struct.snd_card* %85)
  br label %134

; <label>:87:                                     ; preds = %74
  %88 = load %struct.intel8x0*, %struct.intel8x0** %4, align 8
  %89 = call i32 @snd_intel8x0_pcm(%struct.intel8x0* %88)
  %90 = icmp slt i32 %89, 0
  br i1 %90, label %91, label %94

; <label>:91:                                     ; preds = %87
  %92 = load %struct.snd_card*, %struct.snd_card** %3, align 8
  %93 = call i32 @snd_card_free(%struct.snd_card* %92)
  br label %134

; <label>:94:                                     ; preds = %87
  %95 = load %struct.intel8x0*, %struct.intel8x0** %4, align 8
  call void @snd_intel8x0_proc_init(%struct.intel8x0* %95)
  %96 = load %struct.snd_card*, %struct.snd_card** %3, align 8
  %97 = getelementptr inbounds %struct.snd_card, %struct.snd_card* %96, i32 0, i32 4
  %98 = getelementptr inbounds [80 x i8], [80 x i8]* %97, i32 0, i32 0
  %99 = load %struct.snd_card*, %struct.snd_card** %3, align 8
  %100 = getelementptr inbounds %struct.snd_card, %struct.snd_card* %99, i32 0, i32 3
  %101 = getelementptr inbounds [32 x i8], [32 x i8]* %100, i32 0, i32 0
  %102 = load %struct.intel8x0*, %struct.intel8x0** %4, align 8
  %103 = getelementptr inbounds %struct.intel8x0, %struct.intel8x0* %102, i32 0, i32 13
  %104 = getelementptr inbounds [3 x %struct.snd_ac97*], [3 x %struct.snd_ac97*]* %103, i64 0, i64 0
  %105 = load %struct.snd_ac97*, %struct.snd_ac97** %104, align 8
  %106 = call i8* @snd_ac97_get_short_name(%struct.snd_ac97* %105)
  %107 = load %struct.intel8x0*, %struct.intel8x0** %4, align 8
  %108 = getelementptr inbounds %struct.intel8x0, %struct.intel8x0* %107, i32 0, i32 1
  %109 = load i32, i32* %108, align 4
  %110 = call i32 (i8*, i64, i8*, ...) @snprintf(i8* %98, i64 80, i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.5, i32 0, i32 0), i8* %101, i8* %106, i32 %109)
  %111 = load i32, i32* @ac97_clock, align 4
  %112 = icmp eq i32 %111, 0
  %113 = load i32, i32* @ac97_clock, align 4
  %114 = icmp eq i32 %113, 1
  %or.cond = or i1 %112, %114
  br i1 %or.cond, label %115, label %125

; <label>:115:                                    ; preds = %94
  %116 = load i32, i32* @ac97_clock, align 4
  %117 = icmp eq i32 %116, 0
  %118 = load %struct.intel8x0*, %struct.intel8x0** %4, align 8
  br i1 %117, label %119, label %124

; <label>:119:                                    ; preds = %115
  %120 = call i32 @intel8x0_in_clock_list(%struct.intel8x0* %118)
  %121 = icmp eq i32 %120, 0
  br i1 %121, label %122, label %125

; <label>:122:                                    ; preds = %119
  %123 = load %struct.intel8x0*, %struct.intel8x0** %4, align 8
  call void @intel8x0_measure_ac97_clock(%struct.intel8x0* %123)
  br label %125

; <label>:124:                                    ; preds = %115
  call void @intel8x0_measure_ac97_clock(%struct.intel8x0* %118)
  br label %125

; <label>:125:                                    ; preds = %124, %122, %119, %94
  %126 = load %struct.snd_card*, %struct.snd_card** %3, align 8
  %127 = call i32 @snd_card_register(%struct.snd_card* %126)
  %128 = icmp slt i32 %127, 0
  %129 = load %struct.snd_card*, %struct.snd_card** %3, align 8
  br i1 %128, label %130, label %132

; <label>:130:                                    ; preds = %125
  %131 = call i32 @snd_card_free(%struct.snd_card* %129)
  br label %134

; <label>:132:                                    ; preds = %125
  %133 = bitcast %struct.snd_card* %129 to i8*
  call void @pci_set_drvdata(%struct.pci_dev* %0, i8* %133)
  br label %134

; <label>:134:                                    ; preds = %2, %132, %130, %91, %84, %71
  %.0 = phi i32 [ %69, %71 ], [ %82, %84 ], [ %89, %91 ], [ %127, %130 ], [ 0, %132 ], [ %7, %2 ]
  ret i32 %.0
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @intel8x0_suspend(%struct.pci_dev*, i32) #0 {
  %3 = alloca %struct.pm_message, align 4
  %4 = getelementptr inbounds %struct.pm_message, %struct.pm_message* %3, i32 0, i32 0
  store i32 %1, i32* %4, align 4
  %5 = call i8* @pci_get_drvdata(%struct.pci_dev* %0)
  %6 = bitcast i8* %5 to %struct.snd_card*
  %7 = getelementptr inbounds %struct.snd_card, %struct.snd_card* %6, i32 0, i32 8
  %8 = load i8*, i8** %7, align 8
  %9 = bitcast i8* %8 to %struct.intel8x0*
  call void @snd_power_change_state(%struct.snd_card* %6, i32 768)
  br label %10

; <label>:10:                                     ; preds = %14, %2
  %.0 = phi i32 [ 0, %2 ], [ %20, %14 ]
  %11 = getelementptr inbounds %struct.intel8x0, %struct.intel8x0* %9, i32 0, i32 6
  %12 = load i32, i32* %11, align 8
  %13 = icmp slt i32 %.0, %12
  br i1 %13, label %14, label %21

; <label>:14:                                     ; preds = %10
  %15 = getelementptr inbounds %struct.intel8x0, %struct.intel8x0* %9, i32 0, i32 7
  %16 = sext i32 %.0 to i64
  %17 = getelementptr inbounds [6 x %struct.snd_pcm*], [6 x %struct.snd_pcm*]* %15, i64 0, i64 %16
  %18 = load %struct.snd_pcm*, %struct.snd_pcm** %17, align 8
  %19 = call i32 @snd_pcm_suspend_all(%struct.snd_pcm* %18)
  %20 = add nsw i32 %.0, 1
  br label %10

; <label>:21:                                     ; preds = %10
  %22 = getelementptr inbounds %struct.intel8x0, %struct.intel8x0* %9, i32 0, i32 9
  %23 = load i16, i16* %22, align 8
  %24 = lshr i16 %23, 8
  %25 = and i16 %24, 1
  %26 = zext i16 %25 to i32
  %27 = icmp ne i32 %26, 0
  br i1 %27, label %28, label %55

; <label>:28:                                     ; preds = %21, %53
  %.1 = phi i32 [ %54, %53 ], [ 0, %21 ]
  %29 = getelementptr inbounds %struct.intel8x0, %struct.intel8x0* %9, i32 0, i32 21
  %30 = load i32, i32* %29, align 4
  %31 = icmp ult i32 %.1, %30
  br i1 %31, label %32, label %55

; <label>:32:                                     ; preds = %28
  %33 = getelementptr inbounds %struct.intel8x0, %struct.intel8x0* %9, i32 0, i32 8
  %34 = sext i32 %.1 to i64
  %35 = getelementptr inbounds [6 x %struct.ichdev], [6 x %struct.ichdev]* %33, i64 0, i64 %34
  %36 = getelementptr inbounds %struct.ichdev, %struct.ichdev* %35, i32 0, i32 4
  %37 = load %struct.snd_pcm_substream*, %struct.snd_pcm_substream** %36, align 8
  %38 = icmp ne %struct.snd_pcm_substream* %37, null
  br i1 %38, label %39, label %53

; <label>:39:                                     ; preds = %32
  %40 = getelementptr inbounds %struct.ichdev, %struct.ichdev* %35, i32 0, i32 25
  %41 = load i8, i8* %40, align 4
  %42 = and i8 %41, 1
  %43 = zext i8 %42 to i32
  %44 = icmp ne i32 %43, 0
  br i1 %44, label %45, label %53

; <label>:45:                                     ; preds = %39
  %46 = getelementptr inbounds %struct.ichdev, %struct.ichdev* %35, i32 0, i32 4
  %47 = load %struct.snd_pcm_substream*, %struct.snd_pcm_substream** %46, align 8
  %48 = getelementptr inbounds %struct.snd_pcm_substream, %struct.snd_pcm_substream* %47, i32 0, i32 12
  %49 = load %struct.snd_pcm_runtime*, %struct.snd_pcm_runtime** %48, align 8
  %50 = getelementptr inbounds %struct.snd_pcm_runtime, %struct.snd_pcm_runtime* %49, i32 0, i32 49
  %51 = load i8*, i8** %50, align 8
  %52 = icmp ne i8* %51, null
  br label %53

; <label>:53:                                     ; preds = %32, %39, %45
  %54 = add nsw i32 %.1, 1
  br label %28

; <label>:55:                                     ; preds = %21, %28, %59
  %.2 = phi i32 [ %64, %59 ], [ 0, %28 ], [ 0, %21 ]
  %56 = getelementptr inbounds %struct.intel8x0, %struct.intel8x0* %9, i32 0, i32 16
  %57 = load i32, i32* %56, align 8
  %58 = icmp ult i32 %.2, %57
  br i1 %58, label %59, label %65

; <label>:59:                                     ; preds = %55
  %60 = getelementptr inbounds %struct.intel8x0, %struct.intel8x0* %9, i32 0, i32 13
  %61 = sext i32 %.2 to i64
  %62 = getelementptr inbounds [3 x %struct.snd_ac97*], [3 x %struct.snd_ac97*]* %60, i64 0, i64 %61
  %63 = load %struct.snd_ac97*, %struct.snd_ac97** %62, align 8
  call void @snd_ac97_suspend(%struct.snd_ac97* %63)
  %64 = add nsw i32 %.2, 1
  br label %55

; <label>:65:                                     ; preds = %55
  %66 = getelementptr inbounds %struct.intel8x0, %struct.intel8x0* %9, i32 0, i32 0
  %67 = load i32, i32* %66, align 8
  %68 = icmp eq i32 %67, 1
  br i1 %68, label %69, label %73

; <label>:69:                                     ; preds = %65
  %70 = call zeroext i8 @igetbyte(%struct.intel8x0* %9, i32 128)
  %71 = zext i8 %70 to i32
  %72 = getelementptr inbounds %struct.intel8x0, %struct.intel8x0* %9, i32 0, i32 11
  store i32 %71, i32* %72, align 8
  br label %73

; <label>:73:                                     ; preds = %69, %65
  %74 = getelementptr inbounds %struct.intel8x0, %struct.intel8x0* %9, i32 0, i32 1
  %75 = load i32, i32* %74, align 4
  %76 = icmp sge i32 %75, 0
  br i1 %76, label %77, label %82

; <label>:77:                                     ; preds = %73
  %78 = getelementptr inbounds %struct.intel8x0, %struct.intel8x0* %9, i32 0, i32 1
  %79 = load i32, i32* %78, align 4
  %80 = bitcast %struct.intel8x0* %9 to i8*
  call void @free_irq(i32 %79, i8* %80)
  %81 = getelementptr inbounds %struct.intel8x0, %struct.intel8x0* %9, i32 0, i32 1
  store i32 -1, i32* %81, align 4
  br label %82

; <label>:82:                                     ; preds = %77, %73
  call void @pci_disable_device(%struct.pci_dev* %0)
  %83 = call i32 @pci_save_state(%struct.pci_dev* %0)
  ret i32 0
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @intel8x0_resume(%struct.pci_dev*) #0 {
  %2 = call i8* @pci_get_drvdata(%struct.pci_dev* %0)
  %3 = bitcast i8* %2 to %struct.snd_card*
  %4 = getelementptr inbounds %struct.snd_card, %struct.snd_card* %3, i32 0, i32 8
  %5 = load i8*, i8** %4, align 8
  %6 = bitcast i8* %5 to %struct.intel8x0*
  %7 = call i32 @pci_set_power_state(%struct.pci_dev* %0, i32 0)
  call void @pci_restore_state(%struct.pci_dev* %0)
  %8 = call i32 @pci_enable_device(%struct.pci_dev* %0)
  %9 = icmp slt i32 %8, 0
  br i1 %9, label %10, label %13

; <label>:10:                                     ; preds = %1
  %11 = call i32 (i8*, ...) @printk(i8* getelementptr inbounds ([57 x i8], [57 x i8]* @.str.127, i32 0, i32 0))
  %12 = call i32 @snd_card_disconnect(%struct.snd_card* %3)
  br label %146

; <label>:13:                                     ; preds = %1
  call void @pci_set_master(%struct.pci_dev* %0)
  %14 = call i32 @snd_intel8x0_chip_init(%struct.intel8x0* %6, i32 0)
  %15 = getelementptr inbounds %struct.pci_dev, %struct.pci_dev* %0, i32 0, i32 29
  %16 = load i32, i32* %15, align 4
  %17 = getelementptr inbounds %struct.snd_card, %struct.snd_card* %3, i32 0, i32 3
  %18 = getelementptr inbounds [32 x i8], [32 x i8]* %17, i32 0, i32 0
  %19 = bitcast %struct.intel8x0* %6 to i8*
  %20 = call i32 @request_irq(i32 %16, i32 (i32, i8*)* @snd_intel8x0_interrupt, i64 128, i8* %18, i8* %19)
  %21 = icmp ne i32 %20, 0
  %22 = getelementptr inbounds %struct.pci_dev, %struct.pci_dev* %0, i32 0, i32 29
  %23 = load i32, i32* %22, align 4
  br i1 %21, label %24, label %27

; <label>:24:                                     ; preds = %13
  %25 = call i32 (i8*, ...) @printk(i8* getelementptr inbounds ([54 x i8], [54 x i8]* @.str.128, i32 0, i32 0), i32 %23)
  %26 = call i32 @snd_card_disconnect(%struct.snd_card* %3)
  br label %146

; <label>:27:                                     ; preds = %13
  %28 = getelementptr inbounds %struct.intel8x0, %struct.intel8x0* %6, i32 0, i32 1
  store i32 %23, i32* %28, align 4
  %29 = getelementptr inbounds %struct.intel8x0, %struct.intel8x0* %6, i32 0, i32 1
  %30 = load i32, i32* %29, align 4
  call void @synchronize_irq(i32 %30)
  %31 = getelementptr inbounds %struct.intel8x0, %struct.intel8x0* %6, i32 0, i32 0
  %32 = load i32, i32* %31, align 8
  %33 = icmp ne i32 %32, 1
  %34 = load i32, i32* @spdif_aclink, align 4
  %35 = icmp ne i32 %34, 0
  %or.cond = or i1 %33, %35
  br i1 %or.cond, label %43, label %36

; <label>:36:                                     ; preds = %27
  %37 = getelementptr inbounds %struct.intel8x0, %struct.intel8x0* %6, i32 0, i32 11
  %38 = load i32, i32* %37, align 8
  %39 = trunc i32 %38 to i8
  call void @iputbyte(%struct.intel8x0* %6, i32 128, i8 zeroext %39)
  %40 = call i32 @igetdword(%struct.intel8x0* %6, i32 44)
  %41 = and i32 %40, 1073741823
  %42 = or i32 %41, -1073741824
  call void @iputdword(%struct.intel8x0* %6, i32 44, i32 %42)
  br label %43

; <label>:43:                                     ; preds = %27, %36
  %44 = getelementptr inbounds %struct.intel8x0, %struct.intel8x0* %6, i32 0, i32 9
  %45 = load i16, i16* %44, align 8
  %46 = lshr i16 %45, 8
  %47 = and i16 %46, 1
  %48 = zext i16 %47 to i32
  %49 = icmp ne i32 %48, 0
  br label %50

; <label>:50:                                     ; preds = %54, %43
  %.01 = phi i32 [ 0, %43 ], [ %59, %54 ]
  %51 = getelementptr inbounds %struct.intel8x0, %struct.intel8x0* %6, i32 0, i32 16
  %52 = load i32, i32* %51, align 8
  %53 = icmp ult i32 %.01, %52
  br i1 %53, label %54, label %60

; <label>:54:                                     ; preds = %50
  %55 = getelementptr inbounds %struct.intel8x0, %struct.intel8x0* %6, i32 0, i32 13
  %56 = sext i32 %.01 to i64
  %57 = getelementptr inbounds [3 x %struct.snd_ac97*], [3 x %struct.snd_ac97*]* %55, i64 0, i64 %56
  %58 = load %struct.snd_ac97*, %struct.snd_ac97** %57, align 8
  call void @snd_ac97_resume(%struct.snd_ac97* %58)
  %59 = add nsw i32 %.01, 1
  br label %50

; <label>:60:                                     ; preds = %50
  %61 = getelementptr inbounds %struct.intel8x0, %struct.intel8x0* %6, i32 0, i32 9
  %62 = load i16, i16* %61, align 8
  %63 = lshr i16 %62, 8
  %64 = and i16 %63, 1
  %65 = zext i16 %64 to i32
  %66 = icmp ne i32 %65, 0
  br i1 %66, label %67, label %94

; <label>:67:                                     ; preds = %60, %92
  %.1 = phi i32 [ %93, %92 ], [ 0, %60 ]
  %68 = getelementptr inbounds %struct.intel8x0, %struct.intel8x0* %6, i32 0, i32 21
  %69 = load i32, i32* %68, align 4
  %70 = icmp ult i32 %.1, %69
  br i1 %70, label %71, label %94

; <label>:71:                                     ; preds = %67
  %72 = getelementptr inbounds %struct.intel8x0, %struct.intel8x0* %6, i32 0, i32 8
  %73 = sext i32 %.1 to i64
  %74 = getelementptr inbounds [6 x %struct.ichdev], [6 x %struct.ichdev]* %72, i64 0, i64 %73
  %75 = getelementptr inbounds %struct.ichdev, %struct.ichdev* %74, i32 0, i32 4
  %76 = load %struct.snd_pcm_substream*, %struct.snd_pcm_substream** %75, align 8
  %77 = icmp ne %struct.snd_pcm_substream* %76, null
  br i1 %77, label %78, label %92

; <label>:78:                                     ; preds = %71
  %79 = getelementptr inbounds %struct.ichdev, %struct.ichdev* %74, i32 0, i32 25
  %80 = load i8, i8* %79, align 4
  %81 = and i8 %80, 1
  %82 = zext i8 %81 to i32
  %83 = icmp ne i32 %82, 0
  br i1 %83, label %84, label %92

; <label>:84:                                     ; preds = %78
  %85 = getelementptr inbounds %struct.ichdev, %struct.ichdev* %74, i32 0, i32 4
  %86 = load %struct.snd_pcm_substream*, %struct.snd_pcm_substream** %85, align 8
  %87 = getelementptr inbounds %struct.snd_pcm_substream, %struct.snd_pcm_substream* %86, i32 0, i32 12
  %88 = load %struct.snd_pcm_runtime*, %struct.snd_pcm_runtime** %87, align 8
  %89 = getelementptr inbounds %struct.snd_pcm_runtime, %struct.snd_pcm_runtime* %88, i32 0, i32 49
  %90 = load i8*, i8** %89, align 8
  %91 = icmp ne i8* %90, null
  br label %92

; <label>:92:                                     ; preds = %71, %78, %84
  %93 = add nsw i32 %.1, 1
  br label %67

; <label>:94:                                     ; preds = %60, %67, %143
  %.2 = phi i32 [ %144, %143 ], [ 0, %67 ], [ 0, %60 ]
  %95 = getelementptr inbounds %struct.intel8x0, %struct.intel8x0* %6, i32 0, i32 21
  %96 = load i32, i32* %95, align 4
  %97 = icmp ult i32 %.2, %96
  br i1 %97, label %98, label %145

; <label>:98:                                     ; preds = %94
  %99 = getelementptr inbounds %struct.intel8x0, %struct.intel8x0* %6, i32 0, i32 8
  %100 = sext i32 %.2 to i64
  %101 = getelementptr inbounds [6 x %struct.ichdev], [6 x %struct.ichdev]* %99, i64 0, i64 %100
  %102 = getelementptr inbounds %struct.ichdev, %struct.ichdev* %101, i32 0, i32 1
  %103 = load i64, i64* %102, align 8
  %104 = getelementptr inbounds %struct.ichdev, %struct.ichdev* %101, i32 0, i32 4
  %105 = load %struct.snd_pcm_substream*, %struct.snd_pcm_substream** %104, align 8
  %106 = icmp ne %struct.snd_pcm_substream* %105, null
  br i1 %106, label %107, label %143

; <label>:107:                                    ; preds = %98
  %108 = getelementptr inbounds %struct.ichdev, %struct.ichdev* %101, i32 0, i32 25
  %109 = load i8, i8* %108, align 4
  %110 = lshr i8 %109, 1
  %111 = and i8 %110, 1
  %112 = zext i8 %111 to i32
  %113 = icmp ne i32 %112, 0
  br i1 %113, label %114, label %143

; <label>:114:                                    ; preds = %107
  %115 = getelementptr inbounds %struct.ichdev, %struct.ichdev* %101, i32 0, i32 0
  %116 = load i32, i32* %115, align 8
  %117 = icmp eq i32 %116, 1
  br i1 %117, label %118, label %123

; <label>:118:                                    ; preds = %114
  %119 = getelementptr inbounds %struct.ichdev, %struct.ichdev* %101, i32 0, i32 4
  %120 = load %struct.snd_pcm_substream*, %struct.snd_pcm_substream** %119, align 8
  %121 = getelementptr inbounds %struct.snd_pcm_substream, %struct.snd_pcm_substream* %120, i32 0, i32 12
  %122 = load %struct.snd_pcm_runtime*, %struct.snd_pcm_runtime** %121, align 8
  call void @snd_intel8x0_setup_pcm_out(%struct.intel8x0* %6, %struct.snd_pcm_runtime* %122)
  br label %123

; <label>:123:                                    ; preds = %118, %114
  %124 = add i64 %103, 0
  %125 = trunc i64 %124 to i32
  %126 = getelementptr inbounds %struct.ichdev, %struct.ichdev* %101, i32 0, i32 3
  %127 = load i32, i32* %126, align 8
  call void @iputdword(%struct.intel8x0* %6, i32 %125, i32 %127)
  %128 = add i64 %103, 5
  %129 = trunc i64 %128 to i32
  %130 = getelementptr inbounds %struct.ichdev, %struct.ichdev* %101, i32 0, i32 13
  %131 = load i32, i32* %130, align 8
  %132 = trunc i32 %131 to i8
  call void @iputbyte(%struct.intel8x0* %6, i32 %129, i8 zeroext %132)
  %133 = add i64 %103, 4
  %134 = trunc i64 %133 to i32
  %135 = getelementptr inbounds %struct.ichdev, %struct.ichdev* %101, i32 0, i32 15
  %136 = load i32, i32* %135, align 8
  %137 = trunc i32 %136 to i8
  call void @iputbyte(%struct.intel8x0* %6, i32 %134, i8 zeroext %137)
  %138 = getelementptr inbounds %struct.ichdev, %struct.ichdev* %101, i32 0, i32 19
  %139 = load i32, i32* %138, align 8
  %140 = zext i32 %139 to i64
  %141 = add i64 %103, %140
  %142 = trunc i64 %141 to i32
  call void @iputbyte(%struct.intel8x0* %6, i32 %142, i8 zeroext 28)
  br label %143

; <label>:143:                                    ; preds = %98, %107, %123
  %144 = add nsw i32 %.2, 1
  br label %94

; <label>:145:                                    ; preds = %94
  call void @snd_power_change_state(%struct.snd_card* %3, i32 0)
  br label %146

; <label>:146:                                    ; preds = %145, %24, %10
  %.0 = phi i32 [ -5, %10 ], [ -5, %24 ], [ 0, %145 ]
  ret i32 %.0
}

declare i32 @snd_card_create(i32, i8*, %struct.module*, i32, %struct.snd_card**) #1

; Function Attrs: noinline nounwind uwtable
define internal i32 @check_default_spdif_aclink(%struct.pci_dev*) #0 section ".devinit.text" {
  %2 = call %struct.snd_pci_quirk* @snd_pci_quirk_lookup(%struct.pci_dev* %0, %struct.snd_pci_quirk* getelementptr inbounds ([2 x %struct.snd_pci_quirk], [2 x %struct.snd_pci_quirk]* @spdif_aclink_defaults, i32 0, i32 0))
  %3 = icmp ne %struct.snd_pci_quirk* %2, null
  br i1 %3, label %4, label %10

; <label>:4:                                      ; preds = %1
  %5 = getelementptr inbounds %struct.snd_pci_quirk, %struct.snd_pci_quirk* %2, i32 0, i32 3
  %6 = load i32, i32* %5, align 4
  %7 = icmp ne i32 %6, 0
  %8 = getelementptr inbounds %struct.snd_pci_quirk, %struct.snd_pci_quirk* %2, i32 0, i32 3
  %9 = load i32, i32* %8, align 4
  br label %10

; <label>:10:                                     ; preds = %1, %4
  %.0 = phi i32 [ %9, %4 ], [ 0, %1 ]
  ret i32 %.0
}

declare i8* @strcpy(i8*, i8*) #1

; Function Attrs: noinline nounwind uwtable
define internal i32 @snd_intel8x0_create(%struct.snd_card*, %struct.pci_dev*, i64, %struct.intel8x0**) #0 section ".devinit.text" {
  %5 = alloca %struct.raw_spinlock, align 4
  store %struct.intel8x0* null, %struct.intel8x0** %3, align 8
  %6 = call i32 @pci_enable_device(%struct.pci_dev* %1)
  %7 = icmp slt i32 %6, 0
  br i1 %7, label %257, label %8

; <label>:8:                                      ; preds = %4
  %9 = call i8* @kzalloc(i64 1016, i32 208)
  %10 = bitcast i8* %9 to %struct.intel8x0*
  %11 = icmp eq %struct.intel8x0* %10, null
  br i1 %11, label %12, label %13

; <label>:12:                                     ; preds = %8
  call void @pci_disable_device(%struct.pci_dev* %1)
  br label %257

; <label>:13:                                     ; preds = %8
  %14 = getelementptr inbounds %struct.intel8x0, %struct.intel8x0* %10, i32 0, i32 20
  %15 = call %struct.raw_spinlock* @spinlock_check(%struct.spinlock* %14)
  %16 = getelementptr inbounds %struct.intel8x0, %struct.intel8x0* %10, i32 0, i32 20
  %17 = getelementptr inbounds %struct.spinlock, %struct.spinlock* %16, i32 0, i32 0
  %18 = bitcast %union.anon.0* %17 to %struct.raw_spinlock*
  %19 = getelementptr inbounds %struct.raw_spinlock, %struct.raw_spinlock* %5, i32 0, i32 0
  %20 = getelementptr inbounds %struct.arch_spinlock, %struct.arch_spinlock* %19, i32 0, i32 0
  store i32 0, i32* %20, align 4
  %21 = bitcast %struct.raw_spinlock* %18 to i8*
  %22 = bitcast %struct.raw_spinlock* %5 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %21, i8* %22, i64 4, i32 4, i1 false)
  %23 = trunc i64 %2 to i32
  %24 = getelementptr inbounds %struct.intel8x0, %struct.intel8x0* %10, i32 0, i32 0
  store i32 %23, i32* %24, align 8
  %25 = getelementptr inbounds %struct.intel8x0, %struct.intel8x0* %10, i32 0, i32 5
  store %struct.snd_card* %0, %struct.snd_card** %25, align 8
  %26 = getelementptr inbounds %struct.intel8x0, %struct.intel8x0* %10, i32 0, i32 4
  store %struct.pci_dev* %1, %struct.pci_dev** %26, align 8
  %27 = getelementptr inbounds %struct.intel8x0, %struct.intel8x0* %10, i32 0, i32 1
  store i32 -1, i32* %27, align 4
  %28 = load i32, i32* @buggy_irq, align 4
  %29 = getelementptr inbounds %struct.intel8x0, %struct.intel8x0* %10, i32 0, i32 9
  %30 = trunc i32 %28 to i16
  %31 = load i16, i16* %29, align 8
  %32 = and i16 %30, 1
  %33 = shl i16 %32, 9
  %34 = and i16 %31, -513
  %35 = or i16 %34, %33
  store i16 %35, i16* %29, align 8
  %36 = zext i16 %32 to i32
  %37 = load i32, i32* @buggy_semaphore, align 4
  %38 = getelementptr inbounds %struct.intel8x0, %struct.intel8x0* %10, i32 0, i32 9
  %39 = trunc i32 %37 to i16
  %40 = load i16, i16* %38, align 8
  %41 = and i16 %39, 1
  %42 = shl i16 %41, 11
  %43 = and i16 %40, -2049
  %44 = or i16 %43, %42
  store i16 %44, i16* %38, align 8
  %45 = zext i16 %41 to i32
  %46 = load i32, i32* @xbox, align 4
  %47 = icmp ne i32 %46, 0
  br i1 %47, label %48, label %53

; <label>:48:                                     ; preds = %13
  %49 = getelementptr inbounds %struct.intel8x0, %struct.intel8x0* %10, i32 0, i32 9
  %50 = load i16, i16* %49, align 8
  %51 = and i16 %50, -1025
  %52 = or i16 %51, 1024
  store i16 %52, i16* %49, align 8
  br label %53

; <label>:53:                                     ; preds = %48, %13
  %54 = getelementptr inbounds %struct.pci_dev, %struct.pci_dev* %1, i32 0, i32 7
  %55 = load i16, i16* %54, align 4
  %56 = zext i16 %55 to i32
  %57 = icmp eq i32 %56, 32902
  br i1 %57, label %58, label %68

; <label>:58:                                     ; preds = %53
  %59 = getelementptr inbounds %struct.pci_dev, %struct.pci_dev* %1, i32 0, i32 8
  %60 = load i16, i16* %59, align 2
  %61 = zext i16 %60 to i32
  %62 = icmp eq i32 %61, 29077
  br i1 %62, label %63, label %68

; <label>:63:                                     ; preds = %58
  %64 = getelementptr inbounds %struct.intel8x0, %struct.intel8x0* %10, i32 0, i32 9
  %65 = load i16, i16* %64, align 8
  %66 = and i16 %65, -257
  %67 = or i16 %66, 256
  store i16 %67, i16* %64, align 8
  br label %68

; <label>:68:                                     ; preds = %63, %58, %53
  %69 = getelementptr inbounds %struct.snd_card, %struct.snd_card* %0, i32 0, i32 3
  %70 = getelementptr inbounds [32 x i8], [32 x i8]* %69, i32 0, i32 0
  %71 = call i32 @pci_request_regions(%struct.pci_dev* %1, i8* %70)
  %72 = icmp slt i32 %71, 0
  br i1 %72, label %73, label %75

; <label>:73:                                     ; preds = %68
  %74 = bitcast %struct.intel8x0* %10 to i8*
  call void @kfree(i8* %74)
  call void @pci_disable_device(%struct.pci_dev* %1)
  br label %257

; <label>:75:                                     ; preds = %68
  %76 = icmp eq i64 %2, 3
  br i1 %76, label %77, label %80

; <label>:77:                                     ; preds = %75
  %78 = call i8* @pci_iomap(%struct.pci_dev* %1, i32 0, i64 0)
  %79 = getelementptr inbounds %struct.intel8x0, %struct.intel8x0* %10, i32 0, i32 3
  store i8* %78, i8** %79, align 8
  br label %110

; <label>:80:                                     ; preds = %75
  %81 = getelementptr inbounds %struct.pci_dev, %struct.pci_dev* %1, i32 0, i32 30
  %82 = getelementptr inbounds [18 x %struct.resource], [18 x %struct.resource]* %81, i64 0, i64 2
  %83 = getelementptr inbounds %struct.resource, %struct.resource* %82, i32 0, i32 3
  %84 = load i64, i64* %83, align 8
  %85 = and i64 %84, 512
  %86 = icmp ne i64 %85, 0
  %.sink5 = select i1 %86, i32 2, i32 0
  %87 = call i8* @pci_iomap(%struct.pci_dev* %1, i32 %.sink5, i64 0)
  %88 = getelementptr inbounds %struct.intel8x0, %struct.intel8x0* %10, i32 0, i32 2
  store i8* %87, i8** %88, align 8
  %89 = getelementptr inbounds %struct.intel8x0, %struct.intel8x0* %10, i32 0, i32 2
  %90 = load i8*, i8** %89, align 8
  %91 = icmp ne i8* %90, null
  br i1 %91, label %95, label %92

; <label>:92:                                     ; preds = %80
  %93 = call i32 (i8*, ...) @printk(i8* getelementptr inbounds ([32 x i8], [32 x i8]* @.str.28, i32 0, i32 0))
  %94 = call i32 @snd_intel8x0_free(%struct.intel8x0* %10)
  br label %257

; <label>:95:                                     ; preds = %80
  %96 = getelementptr inbounds %struct.pci_dev, %struct.pci_dev* %1, i32 0, i32 30
  %97 = getelementptr inbounds [18 x %struct.resource], [18 x %struct.resource]* %96, i64 0, i64 3
  %98 = getelementptr inbounds %struct.resource, %struct.resource* %97, i32 0, i32 3
  %99 = load i64, i64* %98, align 8
  %100 = and i64 %99, 512
  %101 = icmp ne i64 %100, 0
  %.sink7 = select i1 %101, i32 3, i32 1
  %102 = call i8* @pci_iomap(%struct.pci_dev* %1, i32 %.sink7, i64 0)
  %103 = getelementptr inbounds %struct.intel8x0, %struct.intel8x0* %10, i32 0, i32 3
  store i8* %102, i8** %103, align 8
  %104 = getelementptr inbounds %struct.intel8x0, %struct.intel8x0* %10, i32 0, i32 3
  %105 = load i8*, i8** %104, align 8
  %106 = icmp ne i8* %105, null
  br i1 %106, label %110, label %107

; <label>:107:                                    ; preds = %95
  %108 = call i32 (i8*, ...) @printk(i8* getelementptr inbounds ([37 x i8], [37 x i8]* @.str.29, i32 0, i32 0))
  %109 = call i32 @snd_intel8x0_free(%struct.intel8x0* %10)
  br label %257

; <label>:110:                                    ; preds = %95, %77
  %111 = getelementptr inbounds [5 x i32], [5 x i32]* @snd_intel8x0_create.bdbars, i64 0, i64 %2
  %112 = load i32, i32* %111, align 4
  %113 = getelementptr inbounds %struct.intel8x0, %struct.intel8x0* %10, i32 0, i32 21
  store i32 %112, i32* %113, align 4
  %switch.selectcmp = icmp eq i64 %2, 3
  %switch.select = select i1 %switch.selectcmp, %struct.ich_reg_info* getelementptr inbounds ([6 x %struct.ich_reg_info], [6 x %struct.ich_reg_info]* @snd_intel8x0_create.ali_regs, i32 0, i32 0), %struct.ich_reg_info* getelementptr inbounds ([6 x %struct.ich_reg_info], [6 x %struct.ich_reg_info]* @snd_intel8x0_create.intel_regs, i32 0, i32 0)
  %switch.selectcmp8 = icmp eq i64 %2, 4
  %switch.select9 = select i1 %switch.selectcmp8, %struct.ich_reg_info* getelementptr inbounds ([4 x %struct.ich_reg_info], [4 x %struct.ich_reg_info]* @snd_intel8x0_create.nforce_regs, i32 0, i32 0), %struct.ich_reg_info* %switch.select
  br label %114

; <label>:114:                                    ; preds = %145, %110
  %.03 = phi i32 [ 0, %110 ], [ %149, %145 ]
  %115 = getelementptr inbounds %struct.intel8x0, %struct.intel8x0* %10, i32 0, i32 21
  %116 = load i32, i32* %115, align 4
  %117 = icmp ult i32 %.03, %116
  br i1 %117, label %118, label %150

; <label>:118:                                    ; preds = %114
  %119 = getelementptr inbounds %struct.intel8x0, %struct.intel8x0* %10, i32 0, i32 8
  %120 = zext i32 %.03 to i64
  %121 = getelementptr inbounds [6 x %struct.ichdev], [6 x %struct.ichdev]* %119, i64 0, i64 %120
  %122 = getelementptr inbounds %struct.ichdev, %struct.ichdev* %121, i32 0, i32 0
  store i32 %.03, i32* %122, align 8
  %123 = zext i32 %.03 to i64
  %124 = getelementptr inbounds %struct.ich_reg_info, %struct.ich_reg_info* %switch.select9, i64 %123
  %125 = getelementptr inbounds %struct.ich_reg_info, %struct.ich_reg_info* %124, i32 0, i32 1
  %126 = load i32, i32* %125, align 4
  %127 = zext i32 %126 to i64
  %128 = getelementptr inbounds %struct.ichdev, %struct.ichdev* %121, i32 0, i32 1
  store i64 %127, i64* %128, align 8
  %129 = zext i32 %.03 to i64
  %130 = getelementptr inbounds %struct.ich_reg_info, %struct.ich_reg_info* %switch.select9, i64 %129
  %131 = getelementptr inbounds %struct.ich_reg_info, %struct.ich_reg_info* %130, i32 0, i32 0
  %132 = load i32, i32* %131, align 4
  %133 = getelementptr inbounds %struct.ichdev, %struct.ichdev* %121, i32 0, i32 21
  store i32 %132, i32* %133, align 8
  %134 = icmp eq i64 %2, 2
  %135 = getelementptr inbounds %struct.ichdev, %struct.ichdev* %121, i32 0, i32 19
  %.sink11 = select i1 %134, i32 8, i32 6
  %.sink = select i1 %134, i32 6, i32 8
  store i32 %.sink11, i32* %135, align 8
  %136 = getelementptr inbounds %struct.ichdev, %struct.ichdev* %121, i32 0, i32 20
  store i32 %.sink, i32* %136, align 4
  %137 = icmp eq i64 %2, 3
  br i1 %137, label %138, label %145

; <label>:138:                                    ; preds = %118
  %139 = getelementptr inbounds %struct.ichdev, %struct.ichdev* %121, i32 0, i32 1
  %140 = load i64, i64* %139, align 8
  %141 = sub i64 %140, 64
  %142 = udiv i64 %141, 16
  %143 = trunc i64 %142 to i32
  %144 = getelementptr inbounds %struct.ichdev, %struct.ichdev* %121, i32 0, i32 22
  store i32 %143, i32* %144, align 4
  br label %145

; <label>:145:                                    ; preds = %138, %118
  %146 = icmp eq i64 %2, 2
  %147 = select i1 %146, i32 0, i32 1
  %148 = getelementptr inbounds %struct.ichdev, %struct.ichdev* %121, i32 0, i32 10
  store i32 %147, i32* %148, align 4
  %149 = add i32 %.03, 1
  br label %114

; <label>:150:                                    ; preds = %114
  %151 = getelementptr inbounds %struct.pci_dev, %struct.pci_dev* %1, i32 0, i32 27
  %152 = getelementptr inbounds %struct.intel8x0, %struct.intel8x0* %10, i32 0, i32 21
  %153 = load i32, i32* %152, align 4
  %154 = zext i32 %153 to i64
  %155 = mul i64 %154, 4
  %156 = mul i64 %155, 32
  %157 = mul i64 %156, 2
  %158 = getelementptr inbounds %struct.intel8x0, %struct.intel8x0* %10, i32 0, i32 22
  %159 = call i32 @snd_dma_alloc_pages(i32 2, %struct.device* %151, i64 %157, %struct.snd_dma_buffer* %158)
  %160 = icmp slt i32 %159, 0
  br i1 %160, label %161, label %164

; <label>:161:                                    ; preds = %150
  %162 = call i32 @snd_intel8x0_free(%struct.intel8x0* %10)
  %163 = call i32 (i8*, ...) @printk(i8* getelementptr inbounds ([49 x i8], [49 x i8]* @.str.30, i32 0, i32 0))
  br label %257

; <label>:164:                                    ; preds = %150
  %165 = getelementptr inbounds %struct.intel8x0, %struct.intel8x0* %10, i32 0, i32 9
  %166 = load i16, i16* %165, align 8
  %167 = lshr i16 %166, 8
  %168 = and i16 %167, 1
  %169 = zext i16 %168 to i32
  %170 = icmp ne i32 %169, 0
  br label %171

; <label>:171:                                    ; preds = %175, %164
  %.1 = phi i32 [ 0, %164 ], [ %201, %175 ]
  %.02 = phi i32 [ 0, %164 ], [ %200, %175 ]
  %172 = getelementptr inbounds %struct.intel8x0, %struct.intel8x0* %10, i32 0, i32 21
  %173 = load i32, i32* %172, align 4
  %174 = icmp ult i32 %.1, %173
  br i1 %174, label %175, label %202

; <label>:175:                                    ; preds = %171
  %176 = getelementptr inbounds %struct.intel8x0, %struct.intel8x0* %10, i32 0, i32 8
  %177 = zext i32 %.1 to i64
  %178 = getelementptr inbounds [6 x %struct.ichdev], [6 x %struct.ichdev]* %176, i64 0, i64 %177
  %179 = getelementptr inbounds %struct.intel8x0, %struct.intel8x0* %10, i32 0, i32 22
  %180 = getelementptr inbounds %struct.snd_dma_buffer, %struct.snd_dma_buffer* %179, i32 0, i32 1
  %181 = load i8*, i8** %180, align 8
  %182 = bitcast i8* %181 to i32*
  %183 = mul i32 %.1, 32
  %184 = mul i32 %183, 2
  %185 = zext i32 %184 to i64
  %186 = getelementptr inbounds i32, i32* %182, i64 %185
  %187 = getelementptr inbounds %struct.ichdev, %struct.ichdev* %178, i32 0, i32 2
  store i32* %186, i32** %187, align 8
  %188 = getelementptr inbounds %struct.intel8x0, %struct.intel8x0* %10, i32 0, i32 22
  %189 = getelementptr inbounds %struct.snd_dma_buffer, %struct.snd_dma_buffer* %188, i32 0, i32 2
  %190 = load i64, i64* %189, align 8
  %191 = zext i32 %.1 to i64
  %192 = mul i64 %191, 4
  %193 = mul i64 %192, 32
  %194 = mul i64 %193, 2
  %195 = add i64 %190, %194
  %196 = trunc i64 %195 to i32
  %197 = getelementptr inbounds %struct.ichdev, %struct.ichdev* %178, i32 0, i32 3
  store i32 %196, i32* %197, align 8
  %198 = getelementptr inbounds %struct.ichdev, %struct.ichdev* %178, i32 0, i32 21
  %199 = load i32, i32* %198, align 8
  %200 = or i32 %.02, %199
  %201 = add i32 %.1, 1
  br label %171

; <label>:202:                                    ; preds = %171
  %203 = icmp eq i64 %2, 3
  %204 = select i1 %203, i32 24, i32 48
  %205 = getelementptr inbounds %struct.intel8x0, %struct.intel8x0* %10, i32 0, i32 23
  store i32 %204, i32* %205, align 8
  %206 = getelementptr inbounds %struct.intel8x0, %struct.intel8x0* %10, i32 0, i32 24
  store i32 %.02, i32* %206, align 4
  call void @pci_set_master(%struct.pci_dev* %1)
  %207 = getelementptr inbounds %struct.intel8x0, %struct.intel8x0* %10, i32 0, i32 0
  %208 = load i32, i32* %207, align 8
  switch i32 %208, label %210 [
    i32 1, label %209
    i32 2, label %211
  ]

; <label>:209:                                    ; preds = %202
  br label %211

; <label>:210:                                    ; preds = %202
  br label %211

; <label>:211:                                    ; preds = %202, %210, %209
  %.sink16 = phi i32 [ 2, %210 ], [ 3, %209 ], [ 3, %202 ]
  %.sink14 = phi i32* [ getelementptr inbounds ([3 x i32], [3 x i32]* @ich_codec_bits, i32 0, i32 0), %210 ], [ getelementptr inbounds ([3 x i32], [3 x i32]* @ich_codec_bits, i32 0, i32 0), %209 ], [ getelementptr inbounds ([3 x i32], [3 x i32]* @sis_codec_bits, i32 0, i32 0), %202 ]
  %.sink12 = phi i32 [ 3072, %210 ], [ 536873984, %209 ], [ 527360, %202 ]
  %212 = getelementptr inbounds %struct.intel8x0, %struct.intel8x0* %10, i32 0, i32 15
  store i32 %.sink16, i32* %212, align 4
  %213 = getelementptr inbounds %struct.intel8x0, %struct.intel8x0* %10, i32 0, i32 17
  store i32* %.sink14, i32** %213, align 8
  %214 = getelementptr inbounds %struct.intel8x0, %struct.intel8x0* %10, i32 0, i32 19
  store i32 %.sink12, i32* %214, align 4
  br label %215

; <label>:215:                                    ; preds = %219, %211
  %.2 = phi i32 [ 0, %211 ], [ %228, %219 ]
  %216 = getelementptr inbounds %struct.intel8x0, %struct.intel8x0* %10, i32 0, i32 15
  %217 = load i32, i32* %216, align 4
  %218 = icmp ult i32 %.2, %217
  br i1 %218, label %219, label %229

; <label>:219:                                    ; preds = %215
  %220 = getelementptr inbounds %struct.intel8x0, %struct.intel8x0* %10, i32 0, i32 17
  %221 = load i32*, i32** %220, align 8
  %222 = zext i32 %.2 to i64
  %223 = getelementptr inbounds i32, i32* %221, i64 %222
  %224 = load i32, i32* %223, align 4
  %225 = getelementptr inbounds %struct.intel8x0, %struct.intel8x0* %10, i32 0, i32 18
  %226 = load i32, i32* %225, align 8
  %227 = or i32 %226, %224
  store i32 %227, i32* %225, align 8
  %228 = add i32 %.2, 1
  br label %215

; <label>:229:                                    ; preds = %215
  %230 = call i32 @snd_intel8x0_chip_init(%struct.intel8x0* %10, i32 1)
  %231 = icmp slt i32 %230, 0
  br i1 %231, label %232, label %234

; <label>:232:                                    ; preds = %229
  %233 = call i32 @snd_intel8x0_free(%struct.intel8x0* %10)
  br label %257

; <label>:234:                                    ; preds = %229
  %235 = getelementptr inbounds %struct.pci_dev, %struct.pci_dev* %1, i32 0, i32 29
  %236 = load i32, i32* %235, align 4
  %237 = getelementptr inbounds %struct.snd_card, %struct.snd_card* %0, i32 0, i32 3
  %238 = getelementptr inbounds [32 x i8], [32 x i8]* %237, i32 0, i32 0
  %239 = bitcast %struct.intel8x0* %10 to i8*
  %240 = call i32 @request_irq(i32 %236, i32 (i32, i8*)* @snd_intel8x0_interrupt, i64 128, i8* %238, i8* %239)
  %241 = icmp ne i32 %240, 0
  %242 = getelementptr inbounds %struct.pci_dev, %struct.pci_dev* %1, i32 0, i32 29
  %243 = load i32, i32* %242, align 4
  br i1 %241, label %244, label %247

; <label>:244:                                    ; preds = %234
  %245 = call i32 (i8*, ...) @printk(i8* getelementptr inbounds ([26 x i8], [26 x i8]* @.str.31, i32 0, i32 0), i32 %243)
  %246 = call i32 @snd_intel8x0_free(%struct.intel8x0* %10)
  br label %257

; <label>:247:                                    ; preds = %234
  %248 = getelementptr inbounds %struct.intel8x0, %struct.intel8x0* %10, i32 0, i32 1
  store i32 %243, i32* %248, align 4
  %249 = bitcast %struct.intel8x0* %10 to i8*
  %250 = call i32 @snd_device_new(%struct.snd_card* %0, i32 8192, i8* %249, %struct.snd_device_ops* @snd_intel8x0_create.ops)
  %251 = icmp slt i32 %250, 0
  br i1 %251, label %252, label %254

; <label>:252:                                    ; preds = %247
  %253 = call i32 @snd_intel8x0_free(%struct.intel8x0* %10)
  br label %257

; <label>:254:                                    ; preds = %247
  %255 = getelementptr inbounds %struct.pci_dev, %struct.pci_dev* %1, i32 0, i32 27
  %256 = getelementptr inbounds %struct.snd_card, %struct.snd_card* %0, i32 0, i32 27
  store %struct.device* %255, %struct.device** %256, align 8
  store %struct.intel8x0* %10, %struct.intel8x0** %3, align 8
  br label %257

; <label>:257:                                    ; preds = %4, %254, %252, %244, %232, %161, %107, %92, %73, %12
  %.0 = phi i32 [ -12, %12 ], [ %71, %73 ], [ -12, %161 ], [ %230, %232 ], [ -16, %244 ], [ %250, %252 ], [ 0, %254 ], [ -5, %107 ], [ -5, %92 ], [ %6, %4 ]
  ret i32 %.0
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @snd_intel8x0_mixer(%struct.intel8x0*, i32, i8*) #0 section ".devinit.text" {
  %4 = alloca %struct.snd_ac97_bus*, align 8
  %5 = alloca %struct.snd_ac97_template, align 8
  %6 = getelementptr inbounds %struct.intel8x0, %struct.intel8x0* %0, i32 0, i32 10
  store i32 -1, i32* %6, align 4
  %7 = load i32, i32* @spdif_aclink, align 4
  %8 = icmp ne i32 %7, 0
  br i1 %8, label %14, label %9

; <label>:9:                                      ; preds = %3
  %10 = getelementptr inbounds %struct.intel8x0, %struct.intel8x0* %0, i32 0, i32 0
  %11 = load i32, i32* %10, align 8
  switch i32 %11, label %14 [
    i32 4, label %.sink.split
    i32 3, label %.sink.split
    i32 1, label %12
  ]

; <label>:12:                                     ; preds = %9
  br label %.sink.split

.sink.split:                                      ; preds = %9, %9, %12
  %.sink = phi i32 [ 5, %12 ], [ 3, %9 ], [ 3, %9 ]
  %13 = getelementptr inbounds %struct.intel8x0, %struct.intel8x0* %0, i32 0, i32 10
  store i32 %.sink, i32* %13, align 4
  br label %14

; <label>:14:                                     ; preds = %9, %.sink.split, %3
  %15 = getelementptr inbounds %struct.intel8x0, %struct.intel8x0* %0, i32 0, i32 9
  %16 = load i16, i16* %15, align 8
  %17 = and i16 %16, -33
  %18 = or i16 %17, 32
  store i16 %18, i16* %15, align 8
  %19 = bitcast %struct.snd_ac97_template* %5 to i8*
  call void @llvm.memset.p0i8.i64(i8* %19, i8 0, i64 40, i32 8, i1 false)
  %20 = bitcast %struct.intel8x0* %0 to i8*
  %21 = getelementptr inbounds %struct.snd_ac97_template, %struct.snd_ac97_template* %5, i32 0, i32 0
  store i8* %20, i8** %21, align 8
  %22 = getelementptr inbounds %struct.snd_ac97_template, %struct.snd_ac97_template* %5, i32 0, i32 1
  store void (%struct.snd_ac97*)* @snd_intel8x0_mixer_free_ac97, void (%struct.snd_ac97*)** %22, align 8
  %23 = getelementptr inbounds %struct.snd_ac97_template, %struct.snd_ac97_template* %5, i32 0, i32 5
  store i32 2080, i32* %23, align 4
  %24 = getelementptr inbounds %struct.intel8x0, %struct.intel8x0* %0, i32 0, i32 9
  %25 = load i16, i16* %24, align 8
  %26 = lshr i16 %25, 10
  %27 = and i16 %26, 1
  %28 = zext i16 %27 to i32
  %29 = icmp ne i32 %28, 0
  br i1 %29, label %30, label %34

; <label>:30:                                     ; preds = %14
  %31 = getelementptr inbounds %struct.snd_ac97_template, %struct.snd_ac97_template* %5, i32 0, i32 5
  %32 = load i32, i32* %31, align 4
  %33 = or i32 %32, 256
  store i32 %33, i32* %31, align 4
  br label %34

; <label>:34:                                     ; preds = %30, %14
  %35 = getelementptr inbounds %struct.intel8x0, %struct.intel8x0* %0, i32 0, i32 0
  %36 = load i32, i32* %35, align 8
  %37 = icmp ne i32 %36, 3
  br i1 %37, label %38, label %81

; <label>:38:                                     ; preds = %34
  %39 = call i32 @igetdword(%struct.intel8x0* %0, i32 48)
  %40 = getelementptr inbounds %struct.intel8x0, %struct.intel8x0* %0, i32 0, i32 9
  %41 = load i16, i16* %40, align 8
  %42 = and i16 %41, -65
  %43 = or i16 %42, 64
  store i16 %43, i16* %40, align 8
  br label %44

; <label>:44:                                     ; preds = %74, %38
  %.06 = phi i32 [ 0, %38 ], [ %.17, %74 ]
  %.04 = phi i32 [ 0, %38 ], [ %75, %74 ]
  %45 = getelementptr inbounds %struct.intel8x0, %struct.intel8x0* %0, i32 0, i32 15
  %46 = load i32, i32* %45, align 4
  %47 = icmp ult i32 %.04, %46
  br i1 %47, label %48, label %76

; <label>:48:                                     ; preds = %44
  %49 = getelementptr inbounds %struct.intel8x0, %struct.intel8x0* %0, i32 0, i32 17
  %50 = load i32*, i32** %49, align 8
  %51 = zext i32 %.04 to i64
  %52 = getelementptr inbounds i32, i32* %50, i64 %51
  %53 = load i32, i32* %52, align 4
  %54 = and i32 %39, %53
  %55 = icmp ne i32 %54, 0
  br i1 %55, label %56, label %74

; <label>:56:                                     ; preds = %48
  %57 = getelementptr inbounds %struct.intel8x0, %struct.intel8x0* %0, i32 0, i32 0
  %58 = load i32, i32* %57, align 8
  %59 = icmp eq i32 %58, 1
  br i1 %59, label %60, label %.sink.split13

; <label>:60:                                     ; preds = %56
  call void @snd_intel8x0_codec_read_test(%struct.intel8x0* %0, i32 %.06)
  %61 = call zeroext i8 @igetbyte(%struct.intel8x0* %0, i32 128)
  %62 = zext i8 %61 to i32
  %63 = and i32 %62, 3
  %64 = getelementptr inbounds %struct.intel8x0, %struct.intel8x0* %0, i32 0, i32 14
  %65 = zext i32 %.06 to i64
  %66 = getelementptr inbounds [3 x i32], [3 x i32]* %64, i64 0, i64 %65
  store i32 %63, i32* %66, align 4
  %67 = call i32 @__snd_bug_on(i32 0)
  %68 = icmp ne i32 %67, 0
  br i1 %68, label %.sink.split13, label %72

.sink.split13:                                    ; preds = %56, %60
  %.sink14 = phi i32 [ 0, %60 ], [ %.04, %56 ]
  %69 = getelementptr inbounds %struct.intel8x0, %struct.intel8x0* %0, i32 0, i32 14
  %70 = zext i32 %.06 to i64
  %71 = getelementptr inbounds [3 x i32], [3 x i32]* %69, i64 0, i64 %70
  store i32 %.sink14, i32* %71, align 4
  br label %72

; <label>:72:                                     ; preds = %.sink.split13, %60
  %73 = add i32 %.06, 1
  br label %74

; <label>:74:                                     ; preds = %48, %72
  %.17 = phi i32 [ %73, %72 ], [ %.06, %48 ]
  %75 = add i32 %.04, 1
  br label %44

; <label>:76:                                     ; preds = %44
  %77 = getelementptr inbounds %struct.intel8x0, %struct.intel8x0* %0, i32 0, i32 9
  %78 = load i16, i16* %77, align 8
  %79 = and i16 %78, -65
  store i16 %79, i16* %77, align 8
  %80 = icmp ne i32 %.06, 0
  %.06. = select i1 %80, i32 %.06, i32 1
  br label %.loopexit11

; <label>:81:                                     ; preds = %34, %87
  %.15 = phi i32 [ %89, %87 ], [ 0, %34 ]
  %82 = icmp ult i32 %.15, 100
  br i1 %82, label %83, label %.loopexit11

; <label>:83:                                     ; preds = %81
  %84 = call i32 @igetdword(%struct.intel8x0* %0, i32 52)
  %85 = and i32 %84, 64
  %86 = icmp ne i32 %85, 0
  br i1 %86, label %.loopexit11, label %87

; <label>:87:                                     ; preds = %83
  %88 = or i32 %84, 64
  call void @iputdword(%struct.intel8x0* %0, i32 52, i32 %88)
  call void @__const_udelay(i64 4295)
  %89 = add i32 %.15, 1
  br label %81

.loopexit11:                                      ; preds = %83, %81, %76
  %.410 = phi i32 [ %.06., %76 ], [ 2, %83 ], [ 1, %81 ]
  %.02 = phi %struct.snd_ac97_bus_ops* [ @snd_intel8x0_mixer.standard_bus_ops, %76 ], [ @snd_intel8x0_mixer.ali_bus_ops, %81 ], [ @snd_intel8x0_mixer.ali_bus_ops, %83 ]
  %90 = getelementptr inbounds %struct.intel8x0, %struct.intel8x0* %0, i32 0, i32 5
  %91 = load %struct.snd_card*, %struct.snd_card** %90, align 8
  %92 = bitcast %struct.intel8x0* %0 to i8*
  %93 = call i32 @snd_ac97_bus(%struct.snd_card* %91, i32 0, %struct.snd_ac97_bus_ops* %.02, i8* %92, %struct.snd_ac97_bus** %4)
  %94 = icmp slt i32 %93, 0
  br i1 %94, label %382, label %95

; <label>:95:                                     ; preds = %.loopexit11
  %96 = load %struct.snd_ac97_bus*, %struct.snd_ac97_bus** %4, align 8
  %97 = getelementptr inbounds %struct.snd_ac97_bus, %struct.snd_ac97_bus* %96, i32 0, i32 2
  store void (%struct.snd_ac97_bus*)* @snd_intel8x0_mixer_free_ac97_bus, void (%struct.snd_ac97_bus*)** %97, align 8
  %98 = icmp sge i32 %1, 8000
  %99 = icmp sle i32 %1, 48000
  %or.cond = and i1 %98, %99
  br i1 %or.cond, label %100, label %103

; <label>:100:                                    ; preds = %95
  %101 = load %struct.snd_ac97_bus*, %struct.snd_ac97_bus** %4, align 8
  %102 = getelementptr inbounds %struct.snd_ac97_bus, %struct.snd_ac97_bus* %101, i32 0, i32 6
  store i32 %1, i32* %102, align 4
  br label %103

; <label>:103:                                    ; preds = %100, %95
  %104 = getelementptr inbounds %struct.intel8x0, %struct.intel8x0* %0, i32 0, i32 0
  %105 = load i32, i32* %104, align 8
  %106 = icmp eq i32 %105, 3
  %107 = load %struct.snd_ac97_bus*, %struct.snd_ac97_bus** %4, align 8
  %108 = getelementptr inbounds %struct.snd_ac97_bus, %struct.snd_ac97_bus* %107, i32 0, i32 5
  %109 = load i8, i8* %108, align 2
  %.sink21 = select i1 %106, i8 -2, i8 -3
  %.sink20 = select i1 %106, i8 1, i8 2
  %110 = and i8 %109, %.sink21
  %111 = or i8 %110, %.sink20
  store i8 %111, i8* %108, align 2
  %112 = load %struct.snd_ac97_bus*, %struct.snd_ac97_bus** %4, align 8
  %113 = getelementptr inbounds %struct.intel8x0, %struct.intel8x0* %0, i32 0, i32 12
  store %struct.snd_ac97_bus* %112, %struct.snd_ac97_bus** %113, align 8
  %114 = getelementptr inbounds %struct.intel8x0, %struct.intel8x0* %0, i32 0, i32 16
  store i32 %.410, i32* %114, align 8
  %115 = getelementptr inbounds %struct.intel8x0, %struct.intel8x0* %0, i32 0, i32 4
  %116 = load %struct.pci_dev*, %struct.pci_dev** %115, align 8
  %117 = getelementptr inbounds %struct.snd_ac97_template, %struct.snd_ac97_template* %5, i32 0, i32 2
  store %struct.pci_dev* %116, %struct.pci_dev** %117, align 8
  br label %118

; <label>:118:                                    ; preds = %135, %103
  %.2 = phi i32 [ 0, %103 ], [ %136, %135 ]
  %119 = icmp ult i32 %.2, %.410
  br i1 %119, label %120, label %137

; <label>:120:                                    ; preds = %118
  %121 = trunc i32 %.2 to i16
  %122 = getelementptr inbounds %struct.snd_ac97_template, %struct.snd_ac97_template* %5, i32 0, i32 3
  store i16 %121, i16* %122, align 8
  %123 = load %struct.snd_ac97_bus*, %struct.snd_ac97_bus** %4, align 8
  %124 = getelementptr inbounds %struct.intel8x0, %struct.intel8x0* %0, i32 0, i32 13
  %125 = zext i32 %.2 to i64
  %126 = getelementptr inbounds [3 x %struct.snd_ac97*], [3 x %struct.snd_ac97*]* %124, i64 0, i64 %125
  %127 = call i32 @snd_ac97_mixer(%struct.snd_ac97_bus* %123, %struct.snd_ac97_template* %5, %struct.snd_ac97** %126)
  %128 = icmp slt i32 %127, 0
  br i1 %128, label %129, label %135

; <label>:129:                                    ; preds = %120
  %130 = icmp ne i32 %127, -13
  br i1 %130, label %131, label %133

; <label>:131:                                    ; preds = %129
  %132 = call i32 (i8*, ...) @printk(i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.36, i32 0, i32 0), i32 %.2)
  br label %133

; <label>:133:                                    ; preds = %131, %129
  %134 = icmp eq i32 %.2, 0
  br i1 %134, label %382, label %135

; <label>:135:                                    ; preds = %120, %133
  %136 = add i32 %.2, 1
  br label %118

; <label>:137:                                    ; preds = %118
  %138 = getelementptr inbounds %struct.intel8x0, %struct.intel8x0* %0, i32 0, i32 13
  %139 = getelementptr inbounds [3 x %struct.snd_ac97*], [3 x %struct.snd_ac97*]* %138, i64 0, i64 0
  %140 = load %struct.snd_ac97*, %struct.snd_ac97** %139, align 8
  %141 = call i32 @snd_ac97_tune_hardware(%struct.snd_ac97* %140, %struct.ac97_quirk* getelementptr inbounds ([64 x %struct.ac97_quirk], [64 x %struct.ac97_quirk]* @ac97_quirks, i32 0, i32 0), i8* %2)
  %142 = getelementptr inbounds %struct.intel8x0, %struct.intel8x0* %0, i32 0, i32 0
  %143 = load i32, i32* %142, align 8
  %144 = icmp eq i32 %143, 1
  br i1 %144, label %145, label %151

; <label>:145:                                    ; preds = %137
  %146 = load %struct.snd_ac97_bus*, %struct.snd_ac97_bus** %4, align 8
  %147 = getelementptr inbounds %struct.snd_ac97_bus, %struct.snd_ac97_bus* %146, i32 0, i32 5
  %148 = load i8, i8* %147, align 2
  %149 = and i8 %148, -5
  %150 = or i8 %149, 4
  store i8 %150, i8* %147, align 2
  br label %151

; <label>:151:                                    ; preds = %145, %137
  %152 = getelementptr inbounds %struct.intel8x0, %struct.intel8x0* %0, i32 0, i32 0
  %153 = load i32, i32* %152, align 8
  %154 = icmp ne i32 %153, 1
  %155 = sub i32 6, 2
  %. = select i1 %154, i32 %155, i32 6
  %156 = getelementptr inbounds %struct.intel8x0, %struct.intel8x0* %0, i32 0, i32 10
  %157 = load i32, i32* %156, align 4
  %158 = icmp slt i32 %157, 0
  %159 = add i32 %., -1
  %.4 = select i1 %158, i32 %159, i32 %.
  %160 = load %struct.snd_ac97_bus*, %struct.snd_ac97_bus** %4, align 8
  %161 = trunc i32 %.4 to i16
  %162 = call i32 @snd_ac97_pcm_assign(%struct.snd_ac97_bus* %160, i16 zeroext %161, %struct.ac97_pcm* getelementptr inbounds ([6 x %struct.ac97_pcm], [6 x %struct.ac97_pcm]* @ac97_pcm_defs, i32 0, i32 0))
  %163 = icmp slt i32 %162, 0
  br i1 %163, label %382, label %164

; <label>:164:                                    ; preds = %151
  %165 = load %struct.snd_ac97_bus*, %struct.snd_ac97_bus** %4, align 8
  %166 = getelementptr inbounds %struct.snd_ac97_bus, %struct.snd_ac97_bus* %165, i32 0, i32 10
  %167 = load %struct.ac97_pcm*, %struct.ac97_pcm** %166, align 8
  %168 = getelementptr inbounds %struct.ac97_pcm, %struct.ac97_pcm* %167, i64 0
  %169 = getelementptr inbounds %struct.intel8x0, %struct.intel8x0* %0, i32 0, i32 8
  %170 = getelementptr inbounds [6 x %struct.ichdev], [6 x %struct.ichdev]* %169, i64 0, i64 1
  %171 = getelementptr inbounds %struct.ichdev, %struct.ichdev* %170, i32 0, i32 23
  store %struct.ac97_pcm* %168, %struct.ac97_pcm** %171, align 8
  %172 = load %struct.snd_ac97_bus*, %struct.snd_ac97_bus** %4, align 8
  %173 = getelementptr inbounds %struct.snd_ac97_bus, %struct.snd_ac97_bus* %172, i32 0, i32 10
  %174 = load %struct.ac97_pcm*, %struct.ac97_pcm** %173, align 8
  %175 = getelementptr inbounds %struct.ac97_pcm, %struct.ac97_pcm* %174, i64 1
  %176 = getelementptr inbounds %struct.intel8x0, %struct.intel8x0* %0, i32 0, i32 8
  %177 = getelementptr inbounds [6 x %struct.ichdev], [6 x %struct.ichdev]* %176, i64 0, i64 0
  %178 = getelementptr inbounds %struct.ichdev, %struct.ichdev* %177, i32 0, i32 23
  store %struct.ac97_pcm* %175, %struct.ac97_pcm** %178, align 8
  %179 = load %struct.snd_ac97_bus*, %struct.snd_ac97_bus** %4, align 8
  %180 = getelementptr inbounds %struct.snd_ac97_bus, %struct.snd_ac97_bus* %179, i32 0, i32 10
  %181 = load %struct.ac97_pcm*, %struct.ac97_pcm** %180, align 8
  %182 = getelementptr inbounds %struct.ac97_pcm, %struct.ac97_pcm* %181, i64 2
  %183 = getelementptr inbounds %struct.intel8x0, %struct.intel8x0* %0, i32 0, i32 8
  %184 = getelementptr inbounds [6 x %struct.ichdev], [6 x %struct.ichdev]* %183, i64 0, i64 2
  %185 = getelementptr inbounds %struct.ichdev, %struct.ichdev* %184, i32 0, i32 23
  store %struct.ac97_pcm* %182, %struct.ac97_pcm** %185, align 8
  %186 = getelementptr inbounds %struct.intel8x0, %struct.intel8x0* %0, i32 0, i32 10
  %187 = load i32, i32* %186, align 4
  %188 = icmp sge i32 %187, 0
  br i1 %188, label %189, label %200

; <label>:189:                                    ; preds = %164
  %190 = load %struct.snd_ac97_bus*, %struct.snd_ac97_bus** %4, align 8
  %191 = getelementptr inbounds %struct.snd_ac97_bus, %struct.snd_ac97_bus* %190, i32 0, i32 10
  %192 = load %struct.ac97_pcm*, %struct.ac97_pcm** %191, align 8
  %193 = getelementptr inbounds %struct.ac97_pcm, %struct.ac97_pcm* %192, i64 3
  %194 = getelementptr inbounds %struct.intel8x0, %struct.intel8x0* %0, i32 0, i32 8
  %195 = getelementptr inbounds %struct.intel8x0, %struct.intel8x0* %0, i32 0, i32 10
  %196 = load i32, i32* %195, align 4
  %197 = sext i32 %196 to i64
  %198 = getelementptr inbounds [6 x %struct.ichdev], [6 x %struct.ichdev]* %194, i64 0, i64 %197
  %199 = getelementptr inbounds %struct.ichdev, %struct.ichdev* %198, i32 0, i32 23
  store %struct.ac97_pcm* %193, %struct.ac97_pcm** %199, align 8
  br label %200

; <label>:200:                                    ; preds = %189, %164
  %201 = getelementptr inbounds %struct.intel8x0, %struct.intel8x0* %0, i32 0, i32 0
  %202 = load i32, i32* %201, align 8
  %203 = icmp eq i32 %202, 1
  br i1 %203, label %204, label %219

; <label>:204:                                    ; preds = %200
  %205 = load %struct.snd_ac97_bus*, %struct.snd_ac97_bus** %4, align 8
  %206 = getelementptr inbounds %struct.snd_ac97_bus, %struct.snd_ac97_bus* %205, i32 0, i32 10
  %207 = load %struct.ac97_pcm*, %struct.ac97_pcm** %206, align 8
  %208 = getelementptr inbounds %struct.ac97_pcm, %struct.ac97_pcm* %207, i64 4
  %209 = getelementptr inbounds %struct.intel8x0, %struct.intel8x0* %0, i32 0, i32 8
  %210 = getelementptr inbounds [6 x %struct.ichdev], [6 x %struct.ichdev]* %209, i64 0, i64 4
  %211 = getelementptr inbounds %struct.ichdev, %struct.ichdev* %210, i32 0, i32 23
  store %struct.ac97_pcm* %208, %struct.ac97_pcm** %211, align 8
  %212 = load %struct.snd_ac97_bus*, %struct.snd_ac97_bus** %4, align 8
  %213 = getelementptr inbounds %struct.snd_ac97_bus, %struct.snd_ac97_bus* %212, i32 0, i32 10
  %214 = load %struct.ac97_pcm*, %struct.ac97_pcm** %213, align 8
  %215 = getelementptr inbounds %struct.ac97_pcm, %struct.ac97_pcm* %214, i64 5
  %216 = getelementptr inbounds %struct.intel8x0, %struct.intel8x0* %0, i32 0, i32 8
  %217 = getelementptr inbounds [6 x %struct.ichdev], [6 x %struct.ichdev]* %216, i64 0, i64 3
  %218 = getelementptr inbounds %struct.ichdev, %struct.ichdev* %217, i32 0, i32 23
  store %struct.ac97_pcm* %215, %struct.ac97_pcm** %218, align 8
  br label %219

; <label>:219:                                    ; preds = %204, %200
  %220 = getelementptr inbounds %struct.intel8x0, %struct.intel8x0* %0, i32 0, i32 0
  %221 = load i32, i32* %220, align 8
  %222 = icmp eq i32 %221, 1
  br i1 %222, label %223, label %275

; <label>:223:                                    ; preds = %219
  %224 = getelementptr inbounds %struct.intel8x0, %struct.intel8x0* %0, i32 0, i32 8
  %225 = getelementptr inbounds [6 x %struct.ichdev], [6 x %struct.ichdev]* %224, i64 0, i64 4
  %226 = getelementptr inbounds %struct.ichdev, %struct.ichdev* %225, i32 0, i32 23
  %227 = load %struct.ac97_pcm*, %struct.ac97_pcm** %226, align 8
  %228 = call zeroext i8 @igetbyte(%struct.intel8x0* %0, i32 128)
  %229 = zext i8 %228 to i32
  %230 = and i32 %229, -241
  %231 = trunc i32 %230 to i8
  %232 = icmp ne %struct.ac97_pcm* %227, null
  %233 = zext i8 %231 to i32
  br i1 %232, label %234, label %272

; <label>:234:                                    ; preds = %223
  %235 = or i32 %233, 8
  %236 = trunc i32 %235 to i8
  %237 = getelementptr inbounds %struct.intel8x0, %struct.intel8x0* %0, i32 0, i32 14
  %238 = getelementptr inbounds [3 x i32], [3 x i32]* %237, i64 0, i64 0
  %239 = load i32, i32* %238, align 8
  %240 = shl i32 %239, 4
  %241 = zext i8 %236 to i32
  %242 = or i32 %241, %240
  %243 = trunc i32 %242 to i8
  br label %244

; <label>:244:                                    ; preds = %270, %234
  %.5 = phi i32 [ 1, %234 ], [ %271, %270 ]
  %245 = icmp ult i32 %.5, 4
  br i1 %245, label %246, label %.loopexit

; <label>:246:                                    ; preds = %244
  %247 = getelementptr inbounds %struct.ac97_pcm, %struct.ac97_pcm* %227, i32 0, i32 5
  %248 = getelementptr inbounds [2 x %struct.anon.37], [2 x %struct.anon.37]* %247, i64 0, i64 0
  %249 = getelementptr inbounds %struct.anon.37, %struct.anon.37* %248, i32 0, i32 3
  %250 = zext i32 %.5 to i64
  %251 = getelementptr inbounds [4 x %struct.snd_ac97*], [4 x %struct.snd_ac97*]* %249, i64 0, i64 %250
  %252 = load %struct.snd_ac97*, %struct.snd_ac97** %251, align 8
  %253 = icmp ne %struct.snd_ac97* %252, null
  br i1 %253, label %254, label %270

; <label>:254:                                    ; preds = %246
  %255 = getelementptr inbounds %struct.intel8x0, %struct.intel8x0* %0, i32 0, i32 14
  %256 = getelementptr inbounds %struct.ac97_pcm, %struct.ac97_pcm* %227, i32 0, i32 5
  %257 = getelementptr inbounds [2 x %struct.anon.37], [2 x %struct.anon.37]* %256, i64 0, i64 0
  %258 = getelementptr inbounds %struct.anon.37, %struct.anon.37* %257, i32 0, i32 3
  %259 = getelementptr inbounds [4 x %struct.snd_ac97*], [4 x %struct.snd_ac97*]* %258, i64 0, i64 1
  %260 = load %struct.snd_ac97*, %struct.snd_ac97** %259, align 8
  %261 = getelementptr inbounds %struct.snd_ac97, %struct.snd_ac97* %260, i32 0, i32 11
  %262 = load i16, i16* %261, align 8
  %263 = zext i16 %262 to i64
  %264 = getelementptr inbounds [3 x i32], [3 x i32]* %255, i64 0, i64 %263
  %265 = load i32, i32* %264, align 4
  %266 = shl i32 %265, 6
  %267 = zext i8 %243 to i32
  %268 = or i32 %267, %266
  %269 = trunc i32 %268 to i8
  br label %.loopexit

; <label>:270:                                    ; preds = %246
  %271 = add i32 %.5, 1
  br label %244

; <label>:272:                                    ; preds = %223
  %273 = and i32 %233, -9
  %274 = trunc i32 %273 to i8
  br label %.loopexit

.loopexit:                                        ; preds = %254, %244, %272
  %.1 = phi i8 [ %274, %272 ], [ %269, %254 ], [ %243, %244 ]
  call void @iputbyte(%struct.intel8x0* %0, i32 128, i8 zeroext %.1)
  br label %275

; <label>:275:                                    ; preds = %.loopexit, %219
  %276 = load %struct.snd_ac97_bus*, %struct.snd_ac97_bus** %4, align 8
  %277 = getelementptr inbounds %struct.snd_ac97_bus, %struct.snd_ac97_bus* %276, i32 0, i32 10
  %278 = load %struct.ac97_pcm*, %struct.ac97_pcm** %277, align 8
  %279 = getelementptr inbounds %struct.ac97_pcm, %struct.ac97_pcm* %278, i64 0
  %280 = getelementptr inbounds %struct.ac97_pcm, %struct.ac97_pcm* %279, i32 0, i32 5
  %281 = getelementptr inbounds [2 x %struct.anon.37], [2 x %struct.anon.37]* %280, i64 0, i64 0
  %282 = getelementptr inbounds %struct.anon.37, %struct.anon.37* %281, i32 0, i32 0
  %283 = load i16, i16* %282, align 8
  %284 = zext i16 %283 to i32
  %285 = and i32 %284, 128
  %286 = icmp ne i32 %285, 0
  br i1 %286, label %287, label %320

; <label>:287:                                    ; preds = %275
  %288 = getelementptr inbounds %struct.intel8x0, %struct.intel8x0* %0, i32 0, i32 9
  %289 = load i16, i16* %288, align 8
  %290 = and i16 %289, -2
  %291 = or i16 %290, 1
  store i16 %291, i16* %288, align 8
  %292 = load %struct.snd_ac97_bus*, %struct.snd_ac97_bus** %4, align 8
  %293 = getelementptr inbounds %struct.snd_ac97_bus, %struct.snd_ac97_bus* %292, i32 0, i32 10
  %294 = load %struct.ac97_pcm*, %struct.ac97_pcm** %293, align 8
  %295 = getelementptr inbounds %struct.ac97_pcm, %struct.ac97_pcm* %294, i64 0
  %296 = getelementptr inbounds %struct.ac97_pcm, %struct.ac97_pcm* %295, i32 0, i32 5
  %297 = getelementptr inbounds [2 x %struct.anon.37], [2 x %struct.anon.37]* %296, i64 0, i64 0
  %298 = getelementptr inbounds %struct.anon.37, %struct.anon.37* %297, i32 0, i32 0
  %299 = load i16, i16* %298, align 8
  %300 = zext i16 %299 to i32
  %301 = and i32 %300, 512
  %302 = icmp ne i32 %301, 0
  br i1 %302, label %303, label %320

; <label>:303:                                    ; preds = %287
  %304 = getelementptr inbounds %struct.intel8x0, %struct.intel8x0* %0, i32 0, i32 9
  %305 = load i16, i16* %304, align 8
  %306 = and i16 %305, -3
  %307 = or i16 %306, 2
  store i16 %307, i16* %304, align 8
  %308 = getelementptr inbounds %struct.intel8x0, %struct.intel8x0* %0, i32 0, i32 13
  %309 = getelementptr inbounds [3 x %struct.snd_ac97*], [3 x %struct.snd_ac97*]* %308, i64 0, i64 0
  %310 = load %struct.snd_ac97*, %struct.snd_ac97** %309, align 8
  %311 = getelementptr inbounds %struct.snd_ac97, %struct.snd_ac97* %310, i32 0, i32 19
  %312 = load i32, i32* %311, align 4
  %313 = and i32 %312, 524288
  %314 = icmp ne i32 %313, 0
  br i1 %314, label %315, label %320

; <label>:315:                                    ; preds = %303
  %316 = getelementptr inbounds %struct.intel8x0, %struct.intel8x0* %0, i32 0, i32 9
  %317 = load i16, i16* %316, align 8
  %318 = and i16 %317, -5
  %319 = or i16 %318, 4
  store i16 %319, i16* %316, align 8
  br label %320

; <label>:320:                                    ; preds = %287, %315, %303, %275
  %321 = load %struct.snd_ac97_bus*, %struct.snd_ac97_bus** %4, align 8
  %322 = getelementptr inbounds %struct.snd_ac97_bus, %struct.snd_ac97_bus* %321, i32 0, i32 10
  %323 = load %struct.ac97_pcm*, %struct.ac97_pcm** %322, align 8
  %324 = getelementptr inbounds %struct.ac97_pcm, %struct.ac97_pcm* %323, i64 0
  %325 = getelementptr inbounds %struct.ac97_pcm, %struct.ac97_pcm* %324, i32 0, i32 5
  %326 = getelementptr inbounds [2 x %struct.anon.37], [2 x %struct.anon.37]* %325, i64 0, i64 1
  %327 = getelementptr inbounds %struct.anon.37, %struct.anon.37* %326, i32 0, i32 1
  %328 = getelementptr inbounds [4 x i16], [4 x i16]* %327, i64 0, i64 0
  %329 = load i16, i16* %328, align 2
  %330 = icmp ne i16 %329, 0
  br i1 %330, label %331, label %336

; <label>:331:                                    ; preds = %320
  %332 = getelementptr inbounds %struct.intel8x0, %struct.intel8x0* %0, i32 0, i32 9
  %333 = load i16, i16* %332, align 8
  %334 = and i16 %333, -9
  %335 = or i16 %334, 8
  store i16 %335, i16* %332, align 8
  br label %336

; <label>:336:                                    ; preds = %331, %320
  %337 = getelementptr inbounds %struct.intel8x0, %struct.intel8x0* %0, i32 0, i32 0
  %338 = load i32, i32* %337, align 8
  %339 = icmp eq i32 %338, 1
  br i1 %339, label %340, label %349

; <label>:340:                                    ; preds = %336
  %341 = call i32 @igetdword(%struct.intel8x0* %0, i32 48)
  %342 = and i32 %341, 12582912
  %343 = icmp eq i32 %342, 4194304
  br i1 %343, label %344, label %349

; <label>:344:                                    ; preds = %340
  %345 = getelementptr inbounds %struct.intel8x0, %struct.intel8x0* %0, i32 0, i32 9
  %346 = load i16, i16* %345, align 8
  %347 = and i16 %346, -17
  %348 = or i16 %347, 16
  store i16 %348, i16* %345, align 8
  br label %349

; <label>:349:                                    ; preds = %340, %344, %336
  %350 = getelementptr inbounds %struct.intel8x0, %struct.intel8x0* %0, i32 0, i32 0
  %351 = load i32, i32* %350, align 8
  %352 = icmp ne i32 %351, 4
  %353 = load i32, i32* @spdif_aclink, align 4
  %354 = icmp ne i32 %353, 0
  %or.cond23 = or i1 %352, %354
  br i1 %or.cond23, label %364, label %355

; <label>:355:                                    ; preds = %349
  %356 = getelementptr inbounds %struct.intel8x0, %struct.intel8x0* %0, i32 0, i32 8
  %357 = getelementptr inbounds %struct.intel8x0, %struct.intel8x0* %0, i32 0, i32 10
  %358 = load i32, i32* %357, align 4
  %359 = sext i32 %358 to i64
  %360 = getelementptr inbounds [6 x %struct.ichdev], [6 x %struct.ichdev]* %356, i64 0, i64 %359
  %361 = getelementptr inbounds %struct.ichdev, %struct.ichdev* %360, i32 0, i32 23
  %362 = load %struct.ac97_pcm*, %struct.ac97_pcm** %361, align 8
  %363 = getelementptr inbounds %struct.ac97_pcm, %struct.ac97_pcm* %362, i32 0, i32 4
  store i32 128, i32* %363, align 8
  br label %364

; <label>:364:                                    ; preds = %349, %355
  %365 = getelementptr inbounds %struct.intel8x0, %struct.intel8x0* %0, i32 0, i32 0
  %366 = load i32, i32* %365, align 8
  %367 = icmp ne i32 %366, 1
  %368 = load i32, i32* @spdif_aclink, align 4
  %369 = icmp ne i32 %368, 0
  %or.cond25 = or i1 %367, %369
  br i1 %or.cond25, label %378, label %370

; <label>:370:                                    ; preds = %364
  %371 = call i32 @igetdword(%struct.intel8x0* %0, i32 44)
  %372 = and i32 %371, 1073741823
  %373 = or i32 %372, -1073741824
  call void @iputdword(%struct.intel8x0* %0, i32 44, i32 %373)
  %374 = getelementptr inbounds %struct.intel8x0, %struct.intel8x0* %0, i32 0, i32 13
  %375 = getelementptr inbounds [3 x %struct.snd_ac97*], [3 x %struct.snd_ac97*]* %374, i64 0, i64 0
  %376 = load %struct.snd_ac97*, %struct.snd_ac97** %375, align 8
  %377 = call i32 @snd_ac97_update_bits(%struct.snd_ac97* %376, i16 zeroext 42, i16 zeroext 48, i16 zeroext 48)
  br label %378

; <label>:378:                                    ; preds = %364, %370
  %379 = getelementptr inbounds %struct.intel8x0, %struct.intel8x0* %0, i32 0, i32 9
  %380 = load i16, i16* %379, align 8
  %381 = and i16 %380, -33
  store i16 %381, i16* %379, align 8
  br label %389

; <label>:382:                                    ; preds = %151, %133, %.loopexit11
  %.03 = phi i32 [ %93, %.loopexit11 ], [ %127, %133 ], [ %162, %151 ]
  %383 = getelementptr inbounds %struct.intel8x0, %struct.intel8x0* %0, i32 0, i32 0
  %384 = load i32, i32* %383, align 8
  %385 = icmp ne i32 %384, 3
  br i1 %385, label %386, label %389

; <label>:386:                                    ; preds = %382
  %387 = call i32 @igetdword(%struct.intel8x0* %0, i32 44)
  %388 = and i32 %387, -3
  call void @iputdword(%struct.intel8x0* %0, i32 44, i32 %388)
  br label %389

; <label>:389:                                    ; preds = %382, %386, %378
  %.0 = phi i32 [ 0, %378 ], [ %.03, %386 ], [ %.03, %382 ]
  ret i32 %.0
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @snd_intel8x0_pcm(%struct.intel8x0*) #0 section ".devinit.text" {
  %2 = getelementptr inbounds %struct.intel8x0, %struct.intel8x0* %0, i32 0, i32 0
  %3 = load i32, i32* %2, align 8
  switch i32 %3, label %12 [
    i32 1, label %4
    i32 4, label %8
    i32 3, label %13
  ]

; <label>:4:                                      ; preds = %1
  %5 = load i32, i32* @spdif_aclink, align 4
  %6 = icmp ne i32 %5, 0
  %7 = add nsw i32 5, -1
  %. = select i1 %6, i32 %7, i32 5
  br label %13

; <label>:8:                                      ; preds = %1
  %9 = load i32, i32* @spdif_aclink, align 4
  %10 = icmp ne i32 %9, 0
  %11 = add nsw i32 3, -1
  %.6 = select i1 %10, i32 %11, i32 3
  br label %13

; <label>:12:                                     ; preds = %1
  br label %13

; <label>:13:                                     ; preds = %1, %12, %8, %4
  %.2 = phi i32 [ 2, %12 ], [ %.6, %8 ], [ %., %4 ], [ 3, %1 ]
  %.01 = phi %struct.ich_pcm_table* [ getelementptr inbounds ([5 x %struct.ich_pcm_table], [5 x %struct.ich_pcm_table]* @intel_pcms, i32 0, i32 0), %12 ], [ getelementptr inbounds ([3 x %struct.ich_pcm_table], [3 x %struct.ich_pcm_table]* @nforce_pcms, i32 0, i32 0), %8 ], [ getelementptr inbounds ([5 x %struct.ich_pcm_table], [5 x %struct.ich_pcm_table]* @intel_pcms, i32 0, i32 0), %4 ], [ getelementptr inbounds ([3 x %struct.ich_pcm_table], [3 x %struct.ich_pcm_table]* @ali_pcms, i32 0, i32 0), %1 ]
  br label %14

; <label>:14:                                     ; preds = %38, %13
  %.04 = phi i32 [ 0, %13 ], [ %.15, %38 ]
  %.02 = phi i32 [ 0, %13 ], [ %39, %38 ]
  %15 = icmp slt i32 %.02, %.2
  br i1 %15, label %16, label %40

; <label>:16:                                     ; preds = %14
  %17 = sext i32 %.02 to i64
  %18 = getelementptr inbounds %struct.ich_pcm_table, %struct.ich_pcm_table* %.01, i64 %17
  %19 = icmp sgt i32 %.02, 0
  br i1 %19, label %20, label %33

; <label>:20:                                     ; preds = %16
  %21 = getelementptr inbounds %struct.ich_pcm_table, %struct.ich_pcm_table* %18, i32 0, i32 5
  %22 = load i32, i32* %21, align 8
  %23 = icmp ne i32 %22, 0
  br i1 %23, label %24, label %33

; <label>:24:                                     ; preds = %20
  %25 = getelementptr inbounds %struct.intel8x0, %struct.intel8x0* %0, i32 0, i32 8
  %26 = getelementptr inbounds %struct.ich_pcm_table, %struct.ich_pcm_table* %18, i32 0, i32 5
  %27 = load i32, i32* %26, align 8
  %28 = sext i32 %27 to i64
  %29 = getelementptr inbounds [6 x %struct.ichdev], [6 x %struct.ichdev]* %25, i64 0, i64 %28
  %30 = getelementptr inbounds %struct.ichdev, %struct.ichdev* %29, i32 0, i32 23
  %31 = load %struct.ac97_pcm*, %struct.ac97_pcm** %30, align 8
  %32 = icmp ne %struct.ac97_pcm* %31, null
  br i1 %32, label %33, label %38

; <label>:33:                                     ; preds = %24, %20, %16
  %34 = call i32 @snd_intel8x0_pcm1(%struct.intel8x0* %0, i32 %.04, %struct.ich_pcm_table* %18)
  %35 = icmp slt i32 %34, 0
  br i1 %35, label %42, label %36

; <label>:36:                                     ; preds = %33
  %37 = add nsw i32 %.04, 1
  br label %38

; <label>:38:                                     ; preds = %24, %36
  %.15 = phi i32 [ %37, %36 ], [ %.04, %24 ]
  %39 = add nsw i32 %.02, 1
  br label %14

; <label>:40:                                     ; preds = %14
  %41 = getelementptr inbounds %struct.intel8x0, %struct.intel8x0* %0, i32 0, i32 6
  store i32 %.04, i32* %41, align 8
  br label %42

; <label>:42:                                     ; preds = %33, %40
  %.0 = phi i32 [ 0, %40 ], [ %34, %33 ]
  ret i32 %.0
}

; Function Attrs: noinline nounwind uwtable
define internal void @snd_intel8x0_proc_init(%struct.intel8x0*) #0 section ".devinit.text" {
  %2 = alloca %struct.snd_info_entry*, align 8
  %3 = getelementptr inbounds %struct.intel8x0, %struct.intel8x0* %0, i32 0, i32 5
  %4 = load %struct.snd_card*, %struct.snd_card** %3, align 8
  %5 = call i32 @snd_card_proc_new(%struct.snd_card* %4, i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.106, i32 0, i32 0), %struct.snd_info_entry** %2)
  %6 = icmp ne i32 %5, 0
  br i1 %6, label %10, label %7

; <label>:7:                                      ; preds = %1
  %8 = load %struct.snd_info_entry*, %struct.snd_info_entry** %2, align 8
  %9 = bitcast %struct.intel8x0* %0 to i8*
  call void @snd_info_set_text_ops(%struct.snd_info_entry* %8, i8* %9, void (%struct.snd_info_entry*, %struct.snd_info_buffer*)* @snd_intel8x0_proc_read)
  br label %10

; <label>:10:                                     ; preds = %7, %1
  ret void
}

declare i32 @snprintf(i8*, i64, i8*, ...) #1

declare i8* @snd_ac97_get_short_name(%struct.snd_ac97*) #1

; Function Attrs: noinline nounwind uwtable
define internal i32 @intel8x0_in_clock_list(%struct.intel8x0*) #0 section ".devinit.text" {
  %2 = getelementptr inbounds %struct.intel8x0, %struct.intel8x0* %0, i32 0, i32 4
  %3 = load %struct.pci_dev*, %struct.pci_dev** %2, align 8
  %4 = call %struct.snd_pci_quirk* @snd_pci_quirk_lookup(%struct.pci_dev* %3, %struct.snd_pci_quirk* getelementptr inbounds ([6 x %struct.snd_pci_quirk], [6 x %struct.snd_pci_quirk]* @intel8x0_clock_list, i32 0, i32 0))
  %5 = icmp ne %struct.snd_pci_quirk* %4, null
  br i1 %5, label %6, label %21

; <label>:6:                                      ; preds = %1
  %7 = getelementptr inbounds %struct.pci_dev, %struct.pci_dev* %3, i32 0, i32 9
  %8 = load i16, i16* %7, align 8
  %9 = zext i16 %8 to i32
  %10 = getelementptr inbounds %struct.pci_dev, %struct.pci_dev* %3, i32 0, i32 10
  %11 = load i16, i16* %10, align 2
  %12 = zext i16 %11 to i32
  %13 = getelementptr inbounds %struct.snd_pci_quirk, %struct.snd_pci_quirk* %4, i32 0, i32 3
  %14 = load i32, i32* %13, align 4
  %15 = call i32 (i8*, ...) @printk(i8* getelementptr inbounds ([50 x i8], [50 x i8]* @.str.119, i32 0, i32 0), i32 %9, i32 %12, i32 %14)
  %16 = getelementptr inbounds %struct.snd_pci_quirk, %struct.snd_pci_quirk* %4, i32 0, i32 3
  %17 = load i32, i32* %16, align 4
  %18 = getelementptr inbounds %struct.intel8x0, %struct.intel8x0* %0, i32 0, i32 12
  %19 = load %struct.snd_ac97_bus*, %struct.snd_ac97_bus** %18, align 8
  %20 = getelementptr inbounds %struct.snd_ac97_bus, %struct.snd_ac97_bus* %19, i32 0, i32 6
  store i32 %17, i32* %20, align 4
  br label %21

; <label>:21:                                     ; preds = %1, %6
  %.0 = phi i32 [ 1, %6 ], [ 0, %1 ]
  ret i32 %.0
}

; Function Attrs: noinline nounwind uwtable
define internal void @intel8x0_measure_ac97_clock(%struct.intel8x0*) #0 section ".devinit.text" {
  %2 = alloca %struct.timespec, align 8
  %3 = alloca %struct.timespec, align 8
  %4 = getelementptr inbounds %struct.intel8x0, %struct.intel8x0* %0, i32 0, i32 12
  %5 = load %struct.snd_ac97_bus*, %struct.snd_ac97_bus** %4, align 8
  %6 = getelementptr inbounds %struct.snd_ac97_bus, %struct.snd_ac97_bus* %5, i32 0, i32 6
  %7 = load i32, i32* %6, align 4
  %8 = icmp ne i32 %7, 48000
  br i1 %8, label %236, label %9

; <label>:9:                                      ; preds = %1, %164
  %.01 = phi i32 [ %.2, %164 ], [ 1000, %1 ]
  %.0 = phi i32 [ %165, %164 ], [ 1, %1 ]
  %10 = getelementptr inbounds %struct.intel8x0, %struct.intel8x0* %0, i32 0, i32 7
  %11 = getelementptr inbounds [6 x %struct.snd_pcm*], [6 x %struct.snd_pcm*]* %10, i64 0, i64 0
  %12 = load %struct.snd_pcm*, %struct.snd_pcm** %11, align 8
  %13 = getelementptr inbounds %struct.snd_pcm, %struct.snd_pcm* %12, i32 0, i32 8
  %14 = getelementptr inbounds [2 x %struct.snd_pcm_str], [2 x %struct.snd_pcm_str]* %13, i64 0, i64 0
  %15 = getelementptr inbounds %struct.snd_pcm_str, %struct.snd_pcm_str* %14, i32 0, i32 4
  %16 = load %struct.snd_pcm_substream*, %struct.snd_pcm_substream** %15, align 8
  %17 = icmp ne %struct.snd_pcm_substream* %16, null
  br i1 %17, label %18, label %23

; <label>:18:                                     ; preds = %9
  %19 = getelementptr inbounds %struct.snd_pcm_substream, %struct.snd_pcm_substream* %16, i32 0, i32 8
  %20 = getelementptr inbounds %struct.snd_dma_buffer, %struct.snd_dma_buffer* %19, i32 0, i32 3
  %21 = load i64, i64* %20, align 8
  %22 = icmp ult i64 %21, 32768
  br i1 %22, label %23, label %25

; <label>:23:                                     ; preds = %18, %9
  %24 = call i32 (i8*, ...) @printk(i8* getelementptr inbounds ([63 x i8], [63 x i8]* @.str.120, i32 0, i32 0))
  br label %236

; <label>:25:                                     ; preds = %18
  %26 = getelementptr inbounds %struct.intel8x0, %struct.intel8x0* %0, i32 0, i32 8
  %27 = getelementptr inbounds [6 x %struct.ichdev], [6 x %struct.ichdev]* %26, i64 0, i64 1
  %28 = getelementptr inbounds %struct.snd_pcm_substream, %struct.snd_pcm_substream* %16, i32 0, i32 8
  %29 = getelementptr inbounds %struct.snd_dma_buffer, %struct.snd_dma_buffer* %28, i32 0, i32 2
  %30 = load i64, i64* %29, align 8
  %31 = trunc i64 %30 to i32
  %32 = getelementptr inbounds %struct.ichdev, %struct.ichdev* %27, i32 0, i32 5
  store i32 %31, i32* %32, align 8
  %33 = getelementptr inbounds %struct.ichdev, %struct.ichdev* %27, i32 0, i32 7
  store i32 32768, i32* %33, align 8
  %34 = getelementptr inbounds %struct.ichdev, %struct.ichdev* %27, i32 0, i32 6
  store i32 32768, i32* %34, align 4
  %35 = getelementptr inbounds %struct.ichdev, %struct.ichdev* %27, i32 0, i32 4
  store %struct.snd_pcm_substream* null, %struct.snd_pcm_substream** %35, align 8
  %36 = getelementptr inbounds %struct.intel8x0, %struct.intel8x0* %0, i32 0, i32 13
  %37 = getelementptr inbounds [3 x %struct.snd_ac97*], [3 x %struct.snd_ac97*]* %36, i64 0, i64 0
  %38 = load %struct.snd_ac97*, %struct.snd_ac97** %37, align 8
  %39 = call i32 @snd_ac97_set_rate(%struct.snd_ac97* %38, i32 44, i32 48000)
  %40 = icmp slt i32 %39, 0
  br i1 %40, label %41, label %47

; <label>:41:                                     ; preds = %25
  %42 = getelementptr inbounds %struct.intel8x0, %struct.intel8x0* %0, i32 0, i32 12
  %43 = load %struct.snd_ac97_bus*, %struct.snd_ac97_bus** %42, align 8
  %44 = getelementptr inbounds %struct.snd_ac97_bus, %struct.snd_ac97_bus* %43, i32 0, i32 6
  %45 = load i32, i32* %44, align 4
  %46 = call i32 (i8*, ...) @printk(i8* getelementptr inbounds ([37 x i8], [37 x i8]* @.str.121, i32 0, i32 0), i32 %45)
  br label %236

; <label>:47:                                     ; preds = %25
  call void @snd_intel8x0_setup_periods(%struct.intel8x0* %0, %struct.ichdev* %27)
  %48 = getelementptr inbounds %struct.ichdev, %struct.ichdev* %27, i32 0, i32 1
  %49 = load i64, i64* %48, align 8
  %50 = getelementptr inbounds %struct.intel8x0, %struct.intel8x0* %0, i32 0, i32 20
  call void @spin_lock_irq(%struct.spinlock* %50)
  %51 = getelementptr inbounds %struct.intel8x0, %struct.intel8x0* %0, i32 0, i32 9
  %52 = load i16, i16* %51, align 8
  %53 = and i16 %52, -129
  %54 = or i16 %53, 128
  store i16 %54, i16* %51, align 8
  %55 = getelementptr inbounds %struct.intel8x0, %struct.intel8x0* %0, i32 0, i32 0
  %56 = load i32, i32* %55, align 8
  %57 = icmp ne i32 %56, 3
  %58 = add i64 %49, 11
  %59 = trunc i64 %58 to i32
  br i1 %57, label %60, label %61

; <label>:60:                                     ; preds = %47
  call void @iputbyte(%struct.intel8x0* %0, i32 %59, i8 zeroext 17)
  br label %65

; <label>:61:                                     ; preds = %47
  call void @iputbyte(%struct.intel8x0* %0, i32 %59, i8 zeroext 16)
  %62 = getelementptr inbounds %struct.ichdev, %struct.ichdev* %27, i32 0, i32 22
  %63 = load i32, i32* %62, align 4
  %64 = shl i32 1, %63
  call void @iputdword(%struct.intel8x0* %0, i32 8, i32 %64)
  br label %65

; <label>:65:                                     ; preds = %61, %60
  call void @ktime_get_ts(%struct.timespec* %2)
  %66 = getelementptr inbounds %struct.intel8x0, %struct.intel8x0* %0, i32 0, i32 20
  call void @spin_unlock_irq(%struct.spinlock* %66)
  call void @msleep(i32 50)
  %67 = getelementptr inbounds %struct.intel8x0, %struct.intel8x0* %0, i32 0, i32 20
  call void @spin_lock_irq(%struct.spinlock* %67)
  br label %68

; <label>:68:                                     ; preds = %105, %65
  %.1 = phi i32 [ %.01, %65 ], [ %106, %105 ]
  %69 = getelementptr inbounds %struct.ichdev, %struct.ichdev* %27, i32 0, i32 1
  %70 = load i64, i64* %69, align 8
  %71 = add i64 %70, 4
  %72 = trunc i64 %71 to i32
  %73 = call zeroext i8 @igetbyte(%struct.intel8x0* %0, i32 %72)
  %74 = zext i8 %73 to i32
  %75 = getelementptr inbounds %struct.ichdev, %struct.ichdev* %27, i32 0, i32 1
  %76 = load i64, i64* %75, align 8
  %77 = getelementptr inbounds %struct.ichdev, %struct.ichdev* %27, i32 0, i32 20
  %78 = load i32, i32* %77, align 4
  %79 = zext i32 %78 to i64
  %80 = add i64 %76, %79
  %81 = trunc i64 %80 to i32
  %82 = call zeroext i16 @igetword(%struct.intel8x0* %0, i32 %81)
  %83 = zext i16 %82 to i64
  %84 = icmp eq i64 %83, 0
  br i1 %84, label %85, label %86

; <label>:85:                                     ; preds = %68
  call void @__const_udelay(i64 42950)
  br label %105

; <label>:86:                                     ; preds = %68
  %87 = getelementptr inbounds %struct.ichdev, %struct.ichdev* %27, i32 0, i32 1
  %88 = load i64, i64* %87, align 8
  %89 = add i64 %88, 4
  %90 = trunc i64 %89 to i32
  %91 = call zeroext i8 @igetbyte(%struct.intel8x0* %0, i32 %90)
  %92 = zext i8 %91 to i32
  %93 = icmp eq i32 %74, %92
  br i1 %93, label %94, label %105

; <label>:94:                                     ; preds = %86
  %95 = getelementptr inbounds %struct.ichdev, %struct.ichdev* %27, i32 0, i32 1
  %96 = load i64, i64* %95, align 8
  %97 = getelementptr inbounds %struct.ichdev, %struct.ichdev* %27, i32 0, i32 20
  %98 = load i32, i32* %97, align 4
  %99 = zext i32 %98 to i64
  %100 = add i64 %96, %99
  %101 = trunc i64 %100 to i32
  %102 = call zeroext i16 @igetword(%struct.intel8x0* %0, i32 %101)
  %103 = zext i16 %102 to i64
  %104 = icmp eq i64 %83, %103
  br i1 %104, label %.loopexit, label %105

; <label>:105:                                    ; preds = %86, %94, %85
  %106 = add nsw i32 %.1, -1
  %107 = icmp ne i32 %.1, 0
  br i1 %107, label %68, label %.loopexit

.loopexit:                                        ; preds = %105, %94
  %.2 = phi i32 [ %.1, %94 ], [ %106, %105 ]
  %108 = icmp eq i64 %83, 0
  br i1 %108, label %122, label %109

; <label>:109:                                    ; preds = %.loopexit
  %110 = getelementptr inbounds %struct.ichdev, %struct.ichdev* %27, i32 0, i32 8
  %111 = load i32, i32* %110, align 4
  %112 = zext i32 %111 to i64
  %113 = getelementptr inbounds %struct.ichdev, %struct.ichdev* %27, i32 0, i32 10
  %114 = load i32, i32* %113, align 4
  %115 = zext i32 %114 to i64
  %116 = shl i64 %83, %115
  %117 = sub i64 %112, %116
  %118 = getelementptr inbounds %struct.ichdev, %struct.ichdev* %27, i32 0, i32 9
  %119 = load i32, i32* %118, align 8
  %120 = zext i32 %119 to i64
  %121 = add i64 %117, %120
  br label %122

; <label>:122:                                    ; preds = %.loopexit, %109
  %.02 = phi i64 [ %121, %109 ], [ 0, %.loopexit ]
  %123 = getelementptr inbounds %struct.intel8x0, %struct.intel8x0* %0, i32 0, i32 9
  %124 = load i16, i16* %123, align 8
  %125 = and i16 %124, -129
  store i16 %125, i16* %123, align 8
  call void @ktime_get_ts(%struct.timespec* %3)
  %126 = getelementptr inbounds %struct.intel8x0, %struct.intel8x0* %0, i32 0, i32 0
  %127 = load i32, i32* %126, align 8
  %128 = icmp eq i32 %127, 3
  br i1 %128, label %129, label %141

; <label>:129:                                    ; preds = %122
  %130 = getelementptr inbounds %struct.ichdev, %struct.ichdev* %27, i32 0, i32 22
  %131 = load i32, i32* %130, align 4
  %132 = add i32 %131, 16
  %133 = shl i32 1, %132
  call void @iputdword(%struct.intel8x0* %0, i32 8, i32 %133)
  %134 = add i64 %49, 11
  %135 = trunc i64 %134 to i32
  call void @iputbyte(%struct.intel8x0* %0, i32 %135, i8 zeroext 0)
  br label %136

; <label>:136:                                    ; preds = %136, %129
  %137 = add i64 %49, 11
  %138 = trunc i64 %137 to i32
  %139 = call zeroext i8 @igetbyte(%struct.intel8x0* %0, i32 %138)
  %140 = icmp ne i8 %139, 0
  br i1 %140, label %136, label %155

; <label>:141:                                    ; preds = %122
  %142 = add i64 %49, 11
  %143 = trunc i64 %142 to i32
  call void @iputbyte(%struct.intel8x0* %0, i32 %143, i8 zeroext 0)
  br label %144

; <label>:144:                                    ; preds = %144, %141
  %145 = getelementptr inbounds %struct.ichdev, %struct.ichdev* %27, i32 0, i32 19
  %146 = load i32, i32* %145, align 8
  %147 = zext i32 %146 to i64
  %148 = add i64 %49, %147
  %149 = trunc i64 %148 to i32
  %150 = call zeroext i8 @igetbyte(%struct.intel8x0* %0, i32 %149)
  %151 = zext i8 %150 to i32
  %152 = and i32 %151, 1
  %153 = icmp ne i32 %152, 0
  %154 = xor i1 %153, true
  br i1 %154, label %144, label %155

; <label>:155:                                    ; preds = %144, %136
  %156 = add i64 %49, 11
  %157 = trunc i64 %156 to i32
  call void @iputbyte(%struct.intel8x0* %0, i32 %157, i8 zeroext 2)
  %158 = getelementptr inbounds %struct.intel8x0, %struct.intel8x0* %0, i32 0, i32 20
  call void @spin_unlock_irq(%struct.spinlock* %158)
  %159 = icmp eq i64 %.02, 0
  br i1 %159, label %160, label %166

; <label>:160:                                    ; preds = %155
  %161 = call i32 (i8*, ...) @printk(i8* getelementptr inbounds ([50 x i8], [50 x i8]* @.str.122, i32 0, i32 0))
  br label %162

; <label>:162:                                    ; preds = %195, %183, %160
  %163 = icmp slt i32 %.0, 3
  br i1 %163, label %164, label %226

; <label>:164:                                    ; preds = %162
  call void @msleep(i32 300)
  %165 = add nsw i32 %.0, 1
  br label %9

; <label>:166:                                    ; preds = %155
  %167 = udiv i64 %.02, 4
  %168 = getelementptr inbounds %struct.timespec, %struct.timespec* %3, i32 0, i32 0
  %169 = load i64, i64* %168, align 8
  %170 = getelementptr inbounds %struct.timespec, %struct.timespec* %2, i32 0, i32 0
  %171 = load i64, i64* %170, align 8
  %172 = sub nsw i64 %169, %171
  %173 = mul i64 %172, 1000000
  %174 = getelementptr inbounds %struct.timespec, %struct.timespec* %3, i32 0, i32 1
  %175 = load i64, i64* %174, align 8
  %176 = getelementptr inbounds %struct.timespec, %struct.timespec* %2, i32 0, i32 1
  %177 = load i64, i64* %176, align 8
  %178 = sub nsw i64 %175, %177
  %179 = sdiv i64 %178, 1000
  %180 = add i64 %173, %179
  %181 = call i32 (i8*, ...) @printk(i8* getelementptr inbounds ([41 x i8], [41 x i8]* @.str.123, i32 0, i32 0), i8* getelementptr inbounds ([28 x i8], [28 x i8]* @__func__.intel8x0_measure_ac97_clock, i32 0, i32 0), i64 %180, i64 %167)
  %182 = icmp eq i64 %180, 0
  br i1 %182, label %183, label %185

; <label>:183:                                    ; preds = %166
  %184 = call i32 (i8*, ...) @printk(i8* getelementptr inbounds ([37 x i8], [37 x i8]* @.str.124, i32 0, i32 0))
  br label %162

; <label>:185:                                    ; preds = %166
  %186 = mul i64 %167, 1000
  %187 = udiv i64 %186, %180
  %188 = mul i64 %187, 1000
  %189 = urem i64 %186, %180
  %190 = mul i64 %189, 1000
  %191 = udiv i64 %190, %180
  %192 = add i64 %188, %191
  %193 = icmp ult i64 %192, 40000
  %194 = icmp uge i64 %192, 60000
  %or.cond = or i1 %193, %194
  br i1 %or.cond, label %195, label %197

; <label>:195:                                    ; preds = %185
  %196 = call i32 (i8*, ...) @printk(i8* getelementptr inbounds ([42 x i8], [42 x i8]* @.str.125, i32 0, i32 0), i64 %192)
  br label %162

; <label>:197:                                    ; preds = %185
  %198 = icmp ugt i64 %192, 40500
  %199 = icmp ult i64 %192, 41500
  %or.cond3 = and i1 %198, %199
  br i1 %or.cond3, label %200, label %204

; <label>:200:                                    ; preds = %197
  %201 = getelementptr inbounds %struct.intel8x0, %struct.intel8x0* %0, i32 0, i32 12
  %202 = load %struct.snd_ac97_bus*, %struct.snd_ac97_bus** %201, align 8
  %203 = getelementptr inbounds %struct.snd_ac97_bus, %struct.snd_ac97_bus* %202, i32 0, i32 6
  store i32 41000, i32* %203, align 4
  br label %226

; <label>:204:                                    ; preds = %197
  %205 = icmp ugt i64 %192, 43600
  %206 = icmp ult i64 %192, 44600
  %or.cond4 = and i1 %205, %206
  br i1 %or.cond4, label %207, label %211

; <label>:207:                                    ; preds = %204
  %208 = getelementptr inbounds %struct.intel8x0, %struct.intel8x0* %0, i32 0, i32 12
  %209 = load %struct.snd_ac97_bus*, %struct.snd_ac97_bus** %208, align 8
  %210 = getelementptr inbounds %struct.snd_ac97_bus, %struct.snd_ac97_bus* %209, i32 0, i32 6
  store i32 44100, i32* %210, align 4
  br label %226

; <label>:211:                                    ; preds = %204
  %212 = icmp ult i64 %192, 47500
  %213 = icmp ugt i64 %192, 48500
  %or.cond5 = or i1 %212, %213
  br i1 %or.cond5, label %214, label %226

; <label>:214:                                    ; preds = %211
  %215 = getelementptr inbounds %struct.intel8x0, %struct.intel8x0* %0, i32 0, i32 12
  %216 = load %struct.snd_ac97_bus*, %struct.snd_ac97_bus** %215, align 8
  %217 = getelementptr inbounds %struct.snd_ac97_bus, %struct.snd_ac97_bus* %216, i32 0, i32 6
  %218 = load i32, i32* %217, align 4
  %219 = mul i32 %218, 48000
  %220 = zext i32 %219 to i64
  %221 = udiv i64 %220, %192
  %222 = trunc i64 %221 to i32
  %223 = getelementptr inbounds %struct.intel8x0, %struct.intel8x0* %0, i32 0, i32 12
  %224 = load %struct.snd_ac97_bus*, %struct.snd_ac97_bus** %223, align 8
  %225 = getelementptr inbounds %struct.snd_ac97_bus, %struct.snd_ac97_bus* %224, i32 0, i32 6
  store i32 %222, i32* %225, align 4
  br label %226

; <label>:226:                                    ; preds = %207, %211, %214, %200, %162
  %227 = getelementptr inbounds %struct.intel8x0, %struct.intel8x0* %0, i32 0, i32 12
  %228 = load %struct.snd_ac97_bus*, %struct.snd_ac97_bus** %227, align 8
  %229 = getelementptr inbounds %struct.snd_ac97_bus, %struct.snd_ac97_bus* %228, i32 0, i32 6
  %230 = load i32, i32* %229, align 4
  %231 = call i32 (i8*, ...) @printk(i8* getelementptr inbounds ([29 x i8], [29 x i8]* @.str.126, i32 0, i32 0), i32 %230)
  %232 = getelementptr inbounds %struct.intel8x0, %struct.intel8x0* %0, i32 0, i32 13
  %233 = getelementptr inbounds [3 x %struct.snd_ac97*], [3 x %struct.snd_ac97*]* %232, i64 0, i64 0
  %234 = load %struct.snd_ac97*, %struct.snd_ac97** %233, align 8
  %235 = call i32 @snd_ac97_update_power(%struct.snd_ac97* %234, i32 44, i32 0)
  br label %236

; <label>:236:                                    ; preds = %1, %226, %41, %23
  ret void
}

declare i32 @snd_card_register(%struct.snd_card*) #1

declare %struct.snd_pci_quirk* @snd_pci_quirk_lookup(%struct.pci_dev*, %struct.snd_pci_quirk*) #1

; Function Attrs: noinline nounwind uwtable
define internal i32 @snd_intel8x0_dev_free(%struct.snd_device*) #0 {
  %2 = getelementptr inbounds %struct.snd_device, %struct.snd_device* %0, i32 0, i32 4
  %3 = load i8*, i8** %2, align 8
  %4 = bitcast i8* %3 to %struct.intel8x0*
  %5 = call i32 @snd_intel8x0_free(%struct.intel8x0* %4)
  ret i32 %5
}

declare i32 @pci_enable_device(%struct.pci_dev*) #1

; Function Attrs: noinline nounwind uwtable
define internal i8* @kzalloc(i64, i32) #0 {
  %3 = or i32 %1, 32768
  %4 = call i8* @__kmalloc(i64 %0, i32 %3) #3
  ret i8* %4
}

declare void @pci_disable_device(%struct.pci_dev*) #1

; Function Attrs: noinline nounwind uwtable
define internal %struct.raw_spinlock* @spinlock_check(%struct.spinlock*) #0 {
  %2 = getelementptr inbounds %struct.spinlock, %struct.spinlock* %0, i32 0, i32 0
  %3 = bitcast %union.anon.0* %2 to %struct.raw_spinlock*
  ret %struct.raw_spinlock* %3
}

; Function Attrs: argmemonly nounwind
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* nocapture writeonly, i8* nocapture readonly, i64, i32, i1) #2

declare i32 @pci_request_regions(%struct.pci_dev*, i8*) #1

declare void @kfree(i8*) #1

declare i8* @pci_iomap(%struct.pci_dev*, i32, i64) #1

declare i32 @printk(i8*, ...) #1

; Function Attrs: noinline nounwind uwtable
define internal i32 @snd_intel8x0_free(%struct.intel8x0*) #0 {
  %2 = alloca i32, align 4
  %3 = getelementptr inbounds %struct.intel8x0, %struct.intel8x0* %0, i32 0, i32 1
  %4 = load i32, i32* %3, align 4
  %5 = icmp slt i32 %4, 0
  br i1 %5, label %48, label %6

; <label>:6:                                      ; preds = %1, %10
  %.0 = phi i32 [ %18, %10 ], [ 0, %1 ]
  %7 = getelementptr inbounds %struct.intel8x0, %struct.intel8x0* %0, i32 0, i32 21
  %8 = load i32, i32* %7, align 4
  %9 = icmp ult i32 %.0, %8
  br i1 %9, label %10, label %19

; <label>:10:                                     ; preds = %6
  %11 = getelementptr inbounds %struct.intel8x0, %struct.intel8x0* %0, i32 0, i32 8
  %12 = zext i32 %.0 to i64
  %13 = getelementptr inbounds [6 x %struct.ichdev], [6 x %struct.ichdev]* %11, i64 0, i64 %12
  %14 = getelementptr inbounds %struct.ichdev, %struct.ichdev* %13, i32 0, i32 1
  %15 = load i64, i64* %14, align 8
  %16 = add i64 11, %15
  %17 = trunc i64 %16 to i32
  call void @iputbyte(%struct.intel8x0* %0, i32 %17, i8 zeroext 0)
  %18 = add i32 %.0, 1
  br label %6

; <label>:19:                                     ; preds = %6, %23
  %.1 = phi i32 [ %31, %23 ], [ 0, %6 ]
  %20 = getelementptr inbounds %struct.intel8x0, %struct.intel8x0* %0, i32 0, i32 21
  %21 = load i32, i32* %20, align 4
  %22 = icmp ult i32 %.1, %21
  br i1 %22, label %23, label %32

; <label>:23:                                     ; preds = %19
  %24 = getelementptr inbounds %struct.intel8x0, %struct.intel8x0* %0, i32 0, i32 8
  %25 = zext i32 %.1 to i64
  %26 = getelementptr inbounds [6 x %struct.ichdev], [6 x %struct.ichdev]* %24, i64 0, i64 %25
  %27 = getelementptr inbounds %struct.ichdev, %struct.ichdev* %26, i32 0, i32 1
  %28 = load i64, i64* %27, align 8
  %29 = add i64 11, %28
  %30 = trunc i64 %29 to i32
  call void @iputbyte(%struct.intel8x0* %0, i32 %30, i8 zeroext 2)
  %31 = add i32 %.1, 1
  br label %19

; <label>:32:                                     ; preds = %19
  %33 = getelementptr inbounds %struct.intel8x0, %struct.intel8x0* %0, i32 0, i32 0
  %34 = load i32, i32* %33, align 8
  %35 = icmp ne i32 %34, 4
  %36 = load i32, i32* @spdif_aclink, align 4
  %37 = icmp ne i32 %36, 0
  %or.cond = or i1 %35, %37
  br i1 %or.cond, label %48, label %38

; <label>:38:                                     ; preds = %32
  %39 = getelementptr inbounds %struct.intel8x0, %struct.intel8x0* %0, i32 0, i32 4
  %40 = load %struct.pci_dev*, %struct.pci_dev** %39, align 8
  %41 = call i32 @pci_read_config_dword(%struct.pci_dev* %40, i32 76, i32* %2)
  %42 = load i32, i32* %2, align 4
  %43 = and i32 %42, -16777217
  store i32 %43, i32* %2, align 4
  %44 = getelementptr inbounds %struct.intel8x0, %struct.intel8x0* %0, i32 0, i32 4
  %45 = load %struct.pci_dev*, %struct.pci_dev** %44, align 8
  %46 = load i32, i32* %2, align 4
  %47 = call i32 @pci_write_config_dword(%struct.pci_dev* %45, i32 76, i32 %46)
  br label %48

; <label>:48:                                     ; preds = %38, %32, %1
  %49 = getelementptr inbounds %struct.intel8x0, %struct.intel8x0* %0, i32 0, i32 1
  %50 = load i32, i32* %49, align 4
  %51 = icmp sge i32 %50, 0
  br i1 %51, label %52, label %56

; <label>:52:                                     ; preds = %48
  %53 = getelementptr inbounds %struct.intel8x0, %struct.intel8x0* %0, i32 0, i32 1
  %54 = load i32, i32* %53, align 4
  %55 = bitcast %struct.intel8x0* %0 to i8*
  call void @free_irq(i32 %54, i8* %55)
  br label %56

; <label>:56:                                     ; preds = %52, %48
  %57 = getelementptr inbounds %struct.intel8x0, %struct.intel8x0* %0, i32 0, i32 22
  %58 = getelementptr inbounds %struct.snd_dma_buffer, %struct.snd_dma_buffer* %57, i32 0, i32 1
  %59 = load i8*, i8** %58, align 8
  %60 = icmp ne i8* %59, null
  br i1 %60, label %61, label %69

; <label>:61:                                     ; preds = %56
  %62 = getelementptr inbounds %struct.intel8x0, %struct.intel8x0* %0, i32 0, i32 9
  %63 = load i16, i16* %62, align 8
  %64 = lshr i16 %63, 8
  %65 = and i16 %64, 1
  %66 = zext i16 %65 to i32
  %67 = icmp ne i32 %66, 0
  %68 = getelementptr inbounds %struct.intel8x0, %struct.intel8x0* %0, i32 0, i32 22
  call void @snd_dma_free_pages(%struct.snd_dma_buffer* %68)
  br label %69

; <label>:69:                                     ; preds = %61, %56
  %70 = getelementptr inbounds %struct.intel8x0, %struct.intel8x0* %0, i32 0, i32 2
  %71 = load i8*, i8** %70, align 8
  %72 = icmp ne i8* %71, null
  br i1 %72, label %73, label %78

; <label>:73:                                     ; preds = %69
  %74 = getelementptr inbounds %struct.intel8x0, %struct.intel8x0* %0, i32 0, i32 4
  %75 = load %struct.pci_dev*, %struct.pci_dev** %74, align 8
  %76 = getelementptr inbounds %struct.intel8x0, %struct.intel8x0* %0, i32 0, i32 2
  %77 = load i8*, i8** %76, align 8
  call void @pci_iounmap(%struct.pci_dev* %75, i8* %77)
  br label %78

; <label>:78:                                     ; preds = %73, %69
  %79 = getelementptr inbounds %struct.intel8x0, %struct.intel8x0* %0, i32 0, i32 3
  %80 = load i8*, i8** %79, align 8
  %81 = icmp ne i8* %80, null
  br i1 %81, label %82, label %87

; <label>:82:                                     ; preds = %78
  %83 = getelementptr inbounds %struct.intel8x0, %struct.intel8x0* %0, i32 0, i32 4
  %84 = load %struct.pci_dev*, %struct.pci_dev** %83, align 8
  %85 = getelementptr inbounds %struct.intel8x0, %struct.intel8x0* %0, i32 0, i32 3
  %86 = load i8*, i8** %85, align 8
  call void @pci_iounmap(%struct.pci_dev* %84, i8* %86)
  br label %87

; <label>:87:                                     ; preds = %82, %78
  %88 = getelementptr inbounds %struct.intel8x0, %struct.intel8x0* %0, i32 0, i32 4
  %89 = load %struct.pci_dev*, %struct.pci_dev** %88, align 8
  call void @pci_release_regions(%struct.pci_dev* %89)
  %90 = getelementptr inbounds %struct.intel8x0, %struct.intel8x0* %0, i32 0, i32 4
  %91 = load %struct.pci_dev*, %struct.pci_dev** %90, align 8
  call void @pci_disable_device(%struct.pci_dev* %91)
  %92 = bitcast %struct.intel8x0* %0 to i8*
  call void @kfree(i8* %92)
  ret i32 0
}

declare i32 @snd_dma_alloc_pages(i32, %struct.device*, i64, %struct.snd_dma_buffer*) #1

declare void @pci_set_master(%struct.pci_dev*) #1

; Function Attrs: noinline nounwind uwtable
define internal i32 @snd_intel8x0_chip_init(%struct.intel8x0*, i32) #0 {
  %3 = getelementptr inbounds %struct.intel8x0, %struct.intel8x0* %0, i32 0, i32 0
  %4 = load i32, i32* %3, align 8
  %5 = icmp ne i32 %4, 3
  br i1 %5, label %6, label %11

; <label>:6:                                      ; preds = %2
  %7 = call i32 @snd_intel8x0_ich_chip_init(%struct.intel8x0* %0, i32 %1)
  %8 = icmp slt i32 %7, 0
  br i1 %8, label %81, label %9

; <label>:9:                                      ; preds = %6
  %10 = call zeroext i16 @iagetword(%struct.intel8x0* %0, i32 0)
  br label %14

; <label>:11:                                     ; preds = %2
  %12 = call i32 @snd_intel8x0_ali_chip_init(%struct.intel8x0* %0, i32 %1)
  %13 = icmp slt i32 %12, 0
  br i1 %13, label %81, label %14

; <label>:14:                                     ; preds = %9, %11, %18
  %.02 = phi i32 [ %26, %18 ], [ 0, %11 ], [ 0, %9 ]
  %15 = getelementptr inbounds %struct.intel8x0, %struct.intel8x0* %0, i32 0, i32 21
  %16 = load i32, i32* %15, align 4
  %17 = icmp ult i32 %.02, %16
  br i1 %17, label %18, label %27

; <label>:18:                                     ; preds = %14
  %19 = getelementptr inbounds %struct.intel8x0, %struct.intel8x0* %0, i32 0, i32 8
  %20 = zext i32 %.02 to i64
  %21 = getelementptr inbounds [6 x %struct.ichdev], [6 x %struct.ichdev]* %19, i64 0, i64 %20
  %22 = getelementptr inbounds %struct.ichdev, %struct.ichdev* %21, i32 0, i32 1
  %23 = load i64, i64* %22, align 8
  %24 = add i64 11, %23
  %25 = trunc i64 %24 to i32
  call void @iputbyte(%struct.intel8x0* %0, i32 %25, i8 zeroext 0)
  %26 = add i32 %.02, 1
  br label %14

; <label>:27:                                     ; preds = %14, %31
  %.1 = phi i32 [ %39, %31 ], [ 0, %14 ]
  %28 = getelementptr inbounds %struct.intel8x0, %struct.intel8x0* %0, i32 0, i32 21
  %29 = load i32, i32* %28, align 4
  %30 = icmp ult i32 %.1, %29
  br i1 %30, label %31, label %40

; <label>:31:                                     ; preds = %27
  %32 = getelementptr inbounds %struct.intel8x0, %struct.intel8x0* %0, i32 0, i32 8
  %33 = zext i32 %.1 to i64
  %34 = getelementptr inbounds [6 x %struct.ichdev], [6 x %struct.ichdev]* %32, i64 0, i64 %33
  %35 = getelementptr inbounds %struct.ichdev, %struct.ichdev* %34, i32 0, i32 1
  %36 = load i64, i64* %35, align 8
  %37 = add i64 11, %36
  %38 = trunc i64 %37 to i32
  call void @iputbyte(%struct.intel8x0* %0, i32 %38, i8 zeroext 2)
  %39 = add i32 %.1, 1
  br label %27

; <label>:40:                                     ; preds = %27, %61
  %.2 = phi i32 [ %62, %61 ], [ 0, %27 ]
  %41 = getelementptr inbounds %struct.intel8x0, %struct.intel8x0* %0, i32 0, i32 21
  %42 = load i32, i32* %41, align 4
  %43 = icmp ult i32 %.2, %42
  br i1 %43, label %44, label %63

; <label>:44:                                     ; preds = %46, %40
  %.01 = phi i32 [ 100000, %40 ], [ %45, %46 ]
  %45 = add i32 %.01, -1
  %cond = icmp eq i32 %45, 0
  br i1 %cond, label %59, label %46

; <label>:46:                                     ; preds = %44
  %47 = getelementptr inbounds %struct.intel8x0, %struct.intel8x0* %0, i32 0, i32 8
  %48 = zext i32 %.2 to i64
  %49 = getelementptr inbounds [6 x %struct.ichdev], [6 x %struct.ichdev]* %47, i64 0, i64 %48
  %50 = getelementptr inbounds %struct.ichdev, %struct.ichdev* %49, i32 0, i32 1
  %51 = load i64, i64* %50, align 8
  %52 = add i64 11, %51
  %53 = trunc i64 %52 to i32
  %54 = call zeroext i8 @igetbyte(%struct.intel8x0* %0, i32 %53)
  %55 = zext i8 %54 to i32
  %56 = and i32 %55, 2
  %57 = icmp eq i32 %56, 0
  br i1 %57, label %.loopexit, label %44

.loopexit:                                        ; preds = %46
  %58 = icmp eq i32 %45, 0
  br i1 %58, label %59, label %61

; <label>:59:                                     ; preds = %44, %.loopexit
  %60 = call i32 (i8*, ...) @printk(i8* getelementptr inbounds ([41 x i8], [41 x i8]* @.str.32, i32 0, i32 0))
  br label %61

; <label>:61:                                     ; preds = %.loopexit, %59
  %62 = add i32 %.2, 1
  br label %40

; <label>:63:                                     ; preds = %40, %67
  %.3 = phi i32 [ %80, %67 ], [ 0, %40 ]
  %64 = getelementptr inbounds %struct.intel8x0, %struct.intel8x0* %0, i32 0, i32 21
  %65 = load i32, i32* %64, align 4
  %66 = icmp ult i32 %.3, %65
  br i1 %66, label %67, label %81

; <label>:67:                                     ; preds = %63
  %68 = getelementptr inbounds %struct.intel8x0, %struct.intel8x0* %0, i32 0, i32 8
  %69 = zext i32 %.3 to i64
  %70 = getelementptr inbounds [6 x %struct.ichdev], [6 x %struct.ichdev]* %68, i64 0, i64 %69
  %71 = getelementptr inbounds %struct.ichdev, %struct.ichdev* %70, i32 0, i32 1
  %72 = load i64, i64* %71, align 8
  %73 = add i64 0, %72
  %74 = trunc i64 %73 to i32
  %75 = getelementptr inbounds %struct.intel8x0, %struct.intel8x0* %0, i32 0, i32 8
  %76 = zext i32 %.3 to i64
  %77 = getelementptr inbounds [6 x %struct.ichdev], [6 x %struct.ichdev]* %75, i64 0, i64 %76
  %78 = getelementptr inbounds %struct.ichdev, %struct.ichdev* %77, i32 0, i32 3
  %79 = load i32, i32* %78, align 8
  call void @iputdword(%struct.intel8x0* %0, i32 %74, i32 %79)
  %80 = add i32 %.3, 1
  br label %63

; <label>:81:                                     ; preds = %63, %11, %6
  %.0 = phi i32 [ %7, %6 ], [ %12, %11 ], [ 0, %63 ]
  ret i32 %.0
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @request_irq(i32, i32 (i32, i8*)*, i64, i8*, i8*) #0 {
  %6 = call i32 @request_threaded_irq(i32 %0, i32 (i32, i8*)* %1, i32 (i32, i8*)* null, i64 %2, i8* %3, i8* %4)
  ret i32 %6
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @snd_intel8x0_interrupt(i32, i8*) #0 {
  %3 = bitcast i8* %1 to %struct.intel8x0*
  %4 = getelementptr inbounds %struct.intel8x0, %struct.intel8x0* %3, i32 0, i32 23
  %5 = load i32, i32* %4, align 8
  %6 = call i32 @igetdword(%struct.intel8x0* %3, i32 %5)
  %7 = icmp eq i32 %6, -1
  br i1 %7, label %48, label %8

; <label>:8:                                      ; preds = %2
  %9 = getelementptr inbounds %struct.intel8x0, %struct.intel8x0* %3, i32 0, i32 24
  %10 = load i32, i32* %9, align 4
  %11 = and i32 %6, %10
  %12 = icmp eq i32 %11, 0
  br i1 %12, label %13, label %27

; <label>:13:                                     ; preds = %8
  %14 = icmp ne i32 %6, 0
  br i1 %14, label %15, label %24

; <label>:15:                                     ; preds = %13
  %16 = getelementptr inbounds %struct.intel8x0, %struct.intel8x0* %3, i32 0, i32 23
  %17 = load i32, i32* %16, align 8
  call void @iputdword(%struct.intel8x0* %3, i32 %17, i32 %6)
  %18 = getelementptr inbounds %struct.intel8x0, %struct.intel8x0* %3, i32 0, i32 9
  %19 = load i16, i16* %18, align 8
  %20 = lshr i16 %19, 9
  %21 = and i16 %20, 1
  %22 = zext i16 %21 to i32
  %23 = icmp ne i32 %22, 0
  %. = select i1 %23, i32 %6, i32 0
  br label %24

; <label>:24:                                     ; preds = %15, %13
  %.1 = phi i32 [ %., %15 ], [ %6, %13 ]
  %25 = icmp ne i32 %.1, 0
  %26 = zext i1 %25 to i32
  br label %48

; <label>:27:                                     ; preds = %8, %40
  %.01 = phi i32 [ %41, %40 ], [ 0, %8 ]
  %28 = getelementptr inbounds %struct.intel8x0, %struct.intel8x0* %3, i32 0, i32 21
  %29 = load i32, i32* %28, align 4
  %30 = icmp ult i32 %.01, %29
  br i1 %30, label %31, label %42

; <label>:31:                                     ; preds = %27
  %32 = getelementptr inbounds %struct.intel8x0, %struct.intel8x0* %3, i32 0, i32 8
  %33 = zext i32 %.01 to i64
  %34 = getelementptr inbounds [6 x %struct.ichdev], [6 x %struct.ichdev]* %32, i64 0, i64 %33
  %35 = getelementptr inbounds %struct.ichdev, %struct.ichdev* %34, i32 0, i32 21
  %36 = load i32, i32* %35, align 8
  %37 = and i32 %6, %36
  %38 = icmp ne i32 %37, 0
  br i1 %38, label %39, label %40

; <label>:39:                                     ; preds = %31
  call void @snd_intel8x0_update(%struct.intel8x0* %3, %struct.ichdev* %34)
  br label %40

; <label>:40:                                     ; preds = %31, %39
  %41 = add i32 %.01, 1
  br label %27

; <label>:42:                                     ; preds = %27
  %43 = getelementptr inbounds %struct.intel8x0, %struct.intel8x0* %3, i32 0, i32 23
  %44 = load i32, i32* %43, align 8
  %45 = getelementptr inbounds %struct.intel8x0, %struct.intel8x0* %3, i32 0, i32 24
  %46 = load i32, i32* %45, align 4
  %47 = and i32 %6, %46
  call void @iputdword(%struct.intel8x0* %3, i32 %44, i32 %47)
  br label %48

; <label>:48:                                     ; preds = %2, %42, %24
  %.0 = phi i32 [ %26, %24 ], [ 1, %42 ], [ 0, %2 ]
  ret i32 %.0
}

declare i32 @snd_device_new(%struct.snd_card*, i32, i8*, %struct.snd_device_ops*) #1

declare i8* @__kmalloc(i64, i32) #1

; Function Attrs: noinline nounwind uwtable
define internal void @iputbyte(%struct.intel8x0*, i32, i8 zeroext) #0 {
  %4 = getelementptr inbounds %struct.intel8x0, %struct.intel8x0* %0, i32 0, i32 3
  %5 = load i8*, i8** %4, align 8
  %6 = zext i32 %1 to i64
  %7 = getelementptr i8, i8* %5, i64 %6
  call void @iowrite8(i8 zeroext %2, i8* %7)
  ret void
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @pci_read_config_dword(%struct.pci_dev*, i32, i32*) #0 {
  %4 = getelementptr inbounds %struct.pci_dev, %struct.pci_dev* %0, i32 0, i32 1
  %5 = load %struct.pci_bus*, %struct.pci_bus** %4, align 8
  %6 = getelementptr inbounds %struct.pci_dev, %struct.pci_dev* %0, i32 0, i32 6
  %7 = load i32, i32* %6, align 8
  %8 = call i32 @pci_bus_read_config_dword(%struct.pci_bus* %5, i32 %7, i32 %1, i32* %2)
  ret i32 %8
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @pci_write_config_dword(%struct.pci_dev*, i32, i32) #0 {
  %4 = getelementptr inbounds %struct.pci_dev, %struct.pci_dev* %0, i32 0, i32 1
  %5 = load %struct.pci_bus*, %struct.pci_bus** %4, align 8
  %6 = getelementptr inbounds %struct.pci_dev, %struct.pci_dev* %0, i32 0, i32 6
  %7 = load i32, i32* %6, align 8
  %8 = call i32 @pci_bus_write_config_dword(%struct.pci_bus* %5, i32 %7, i32 %1, i32 %2)
  ret i32 %8
}

declare void @free_irq(i32, i8*) #1

declare void @snd_dma_free_pages(%struct.snd_dma_buffer*) #1

declare void @pci_iounmap(%struct.pci_dev*, i8*) #1

declare void @pci_release_regions(%struct.pci_dev*) #1

declare void @iowrite8(i8 zeroext, i8*) #1

declare i32 @pci_bus_read_config_dword(%struct.pci_bus*, i32, i32, i32*) #1

declare i32 @pci_bus_write_config_dword(%struct.pci_bus*, i32, i32, i32) #1

; Function Attrs: noinline nounwind uwtable
define internal i32 @snd_intel8x0_ich_chip_init(%struct.intel8x0*, i32) #0 {
  %3 = alloca i64, align 8
  %4 = alloca i64, align 8
  %5 = alloca i64, align 8
  %6 = alloca i64, align 8
  %7 = alloca i64, align 8
  %8 = alloca i64, align 8
  %9 = alloca i64, align 8
  %10 = alloca i64, align 8
  %11 = alloca i64, align 8
  %12 = alloca i64, align 8
  %13 = alloca i64, align 8
  %14 = alloca i64, align 8
  %15 = alloca i32, align 4
  %16 = getelementptr inbounds %struct.intel8x0, %struct.intel8x0* %0, i32 0, i32 0
  %17 = load i32, i32* %16, align 8
  %18 = icmp eq i32 %17, 4
  %19 = or i32 32992, 16
  %. = select i1 %18, i32 %19, i32 32992
  %20 = call i32 @igetdword(%struct.intel8x0* %0, i32 48)
  %21 = and i32 %20, %.
  call void @iputdword(%struct.intel8x0* %0, i32 48, i32 %21)
  %22 = call i32 @snd_intel8x0_ich_chip_reset(%struct.intel8x0* %0)
  %23 = icmp slt i32 %22, 0
  br i1 %23, label %140, label %24

; <label>:24:                                     ; preds = %2
  %25 = icmp ne i32 %1, 0
  br i1 %25, label %26, label %73

; <label>:26:                                     ; preds = %24
  %27 = load volatile i64, i64* @jiffies, align 8
  %28 = add i64 %27, 1000
  br label %29

; <label>:29:                                     ; preds = %39, %26
  %30 = call i32 @igetdword(%struct.intel8x0* %0, i32 48)
  %31 = getelementptr inbounds %struct.intel8x0, %struct.intel8x0* %0, i32 0, i32 18
  %32 = load i32, i32* %31, align 8
  %33 = and i32 %30, %32
  %cond = icmp eq i32 %33, 0
  br i1 %cond, label %34, label %49

; <label>:34:                                     ; preds = %29
  %35 = call i64 @schedule_timeout_uninterruptible(i64 1)
  %36 = icmp eq i64* %3, %4
  %37 = zext i1 %36 to i32
  %38 = icmp ne i32 1, 0
  br i1 %38, label %39, label %.loopexit

; <label>:39:                                     ; preds = %34
  %40 = icmp eq i64* %5, %6
  %41 = zext i1 %40 to i32
  %42 = load volatile i64, i64* @jiffies, align 8
  %43 = sub nsw i64 %28, %42
  %44 = icmp sge i64 %43, 0
  br i1 %44, label %29, label %.loopexit

.loopexit:                                        ; preds = %34, %39
  %45 = icmp ne i32 %33, 0
  br i1 %45, label %49, label %46

; <label>:46:                                     ; preds = %.loopexit
  %47 = call i32 @igetdword(%struct.intel8x0* %0, i32 48)
  %48 = call i32 (i8*, ...) @printk(i8* getelementptr inbounds ([43 x i8], [43 x i8]* @.str.33, i32 0, i32 0), i32 %47)
  br label %140

; <label>:49:                                     ; preds = %29, %.loopexit
  %50 = load volatile i64, i64* @jiffies, align 8
  %51 = add i64 %50, 250
  br label %52

; <label>:52:                                     ; preds = %66, %49
  %.1 = phi i32 [ %33, %49 ], [ %72, %66 ]
  %53 = getelementptr inbounds %struct.intel8x0, %struct.intel8x0* %0, i32 0, i32 18
  %54 = load i32, i32* %53, align 8
  %55 = icmp ne i32 %.1, %54
  br i1 %55, label %56, label %.critedge

; <label>:56:                                     ; preds = %52
  %57 = icmp eq i64* %7, %8
  %58 = zext i1 %57 to i32
  %59 = icmp ne i32 1, 0
  br i1 %59, label %60, label %.critedge

; <label>:60:                                     ; preds = %56
  %61 = icmp eq i64* %9, %10
  %62 = zext i1 %61 to i32
  %63 = load volatile i64, i64* @jiffies, align 8
  %64 = sub nsw i64 %51, %63
  %65 = icmp sge i64 %64, 0
  br i1 %65, label %66, label %.critedge

; <label>:66:                                     ; preds = %60
  %67 = call i64 @schedule_timeout_uninterruptible(i64 1)
  %68 = call i32 @igetdword(%struct.intel8x0* %0, i32 48)
  %69 = getelementptr inbounds %struct.intel8x0, %struct.intel8x0* %0, i32 0, i32 18
  %70 = load i32, i32* %69, align 8
  %71 = and i32 %68, %70
  %72 = or i32 %.1, %71
  br label %52

; <label>:73:                                     ; preds = %24, %94
  %.2 = phi i32 [ %.3, %94 ], [ 0, %24 ]
  %.01 = phi i32 [ %95, %94 ], [ 0, %24 ]
  %74 = getelementptr inbounds %struct.intel8x0, %struct.intel8x0* %0, i32 0, i32 16
  %75 = load i32, i32* %74, align 8
  %76 = icmp ult i32 %.01, %75
  br i1 %76, label %77, label %96

; <label>:77:                                     ; preds = %73
  %78 = getelementptr inbounds %struct.intel8x0, %struct.intel8x0* %0, i32 0, i32 13
  %79 = sext i32 %.01 to i64
  %80 = getelementptr inbounds [3 x %struct.snd_ac97*], [3 x %struct.snd_ac97*]* %78, i64 0, i64 %79
  %81 = load %struct.snd_ac97*, %struct.snd_ac97** %80, align 8
  %82 = icmp ne %struct.snd_ac97* %81, null
  br i1 %82, label %83, label %94

; <label>:83:                                     ; preds = %77
  %84 = getelementptr inbounds %struct.intel8x0, %struct.intel8x0* %0, i32 0, i32 17
  %85 = load i32*, i32** %84, align 8
  %86 = getelementptr inbounds %struct.intel8x0, %struct.intel8x0* %0, i32 0, i32 14
  %87 = sext i32 %.01 to i64
  %88 = getelementptr inbounds [3 x i32], [3 x i32]* %86, i64 0, i64 %87
  %89 = load i32, i32* %88, align 4
  %90 = zext i32 %89 to i64
  %91 = getelementptr inbounds i32, i32* %85, i64 %90
  %92 = load i32, i32* %91, align 4
  %93 = or i32 %.2, %92
  br label %94

; <label>:94:                                     ; preds = %77, %83
  %.3 = phi i32 [ %93, %83 ], [ %.2, %77 ]
  %95 = add nsw i32 %.01, 1
  br label %73

; <label>:96:                                     ; preds = %73
  %97 = load volatile i64, i64* @jiffies, align 8
  %98 = add i64 %97, 1000
  br label %99

; <label>:99:                                     ; preds = %110, %96
  %100 = call i32 @igetdword(%struct.intel8x0* %0, i32 48)
  %101 = getelementptr inbounds %struct.intel8x0, %struct.intel8x0* %0, i32 0, i32 18
  %102 = load i32, i32* %101, align 8
  %103 = and i32 %100, %102
  %104 = icmp eq i32 %.2, %103
  br i1 %104, label %.critedge, label %105

; <label>:105:                                    ; preds = %99
  %106 = call i64 @schedule_timeout_uninterruptible(i64 1)
  %107 = icmp eq i64* %11, %12
  %108 = zext i1 %107 to i32
  %109 = icmp ne i32 1, 0
  br i1 %109, label %110, label %.critedge

; <label>:110:                                    ; preds = %105
  %111 = icmp eq i64* %13, %14
  %112 = zext i1 %111 to i32
  %113 = load volatile i64, i64* @jiffies, align 8
  %114 = sub nsw i64 %98, %113
  %115 = icmp sge i64 %114, 0
  br i1 %115, label %99, label %.critedge

.critedge:                                        ; preds = %105, %99, %110, %60, %52, %56
  %116 = getelementptr inbounds %struct.intel8x0, %struct.intel8x0* %0, i32 0, i32 0
  %117 = load i32, i32* %116, align 8
  %118 = icmp eq i32 %117, 2
  br i1 %118, label %119, label %124

; <label>:119:                                    ; preds = %.critedge
  %120 = call zeroext i16 @igetword(%struct.intel8x0* %0, i32 76)
  %121 = zext i16 %120 to i32
  %122 = or i32 %121, 1
  %123 = trunc i32 %122 to i16
  call void @iputword(%struct.intel8x0* %0, i32 76, i16 zeroext %123)
  br label %124

; <label>:124:                                    ; preds = %119, %.critedge
  %125 = getelementptr inbounds %struct.intel8x0, %struct.intel8x0* %0, i32 0, i32 0
  %126 = load i32, i32* %125, align 8
  %127 = icmp ne i32 %126, 4
  %128 = load i32, i32* @spdif_aclink, align 4
  %129 = icmp ne i32 %128, 0
  %or.cond = or i1 %127, %129
  br i1 %or.cond, label %140, label %130

; <label>:130:                                    ; preds = %124
  %131 = getelementptr inbounds %struct.intel8x0, %struct.intel8x0* %0, i32 0, i32 4
  %132 = load %struct.pci_dev*, %struct.pci_dev** %131, align 8
  %133 = call i32 @pci_read_config_dword(%struct.pci_dev* %132, i32 76, i32* %15)
  %134 = load i32, i32* %15, align 4
  %135 = or i32 %134, 16777216
  store i32 %135, i32* %15, align 4
  %136 = getelementptr inbounds %struct.intel8x0, %struct.intel8x0* %0, i32 0, i32 4
  %137 = load %struct.pci_dev*, %struct.pci_dev** %136, align 8
  %138 = load i32, i32* %15, align 4
  %139 = call i32 @pci_write_config_dword(%struct.pci_dev* %137, i32 76, i32 %138)
  br label %140

; <label>:140:                                    ; preds = %130, %124, %2, %46
  %.0 = phi i32 [ -5, %46 ], [ %22, %2 ], [ 0, %124 ], [ 0, %130 ]
  ret i32 %.0
}

; Function Attrs: noinline nounwind uwtable
define internal zeroext i16 @iagetword(%struct.intel8x0*, i32) #0 {
  %3 = getelementptr inbounds %struct.intel8x0, %struct.intel8x0* %0, i32 0, i32 2
  %4 = load i8*, i8** %3, align 8
  %5 = zext i32 %1 to i64
  %6 = getelementptr i8, i8* %4, i64 %5
  %7 = call i32 @ioread16(i8* %6)
  %8 = trunc i32 %7 to i16
  ret i16 %8
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @snd_intel8x0_ali_chip_init(%struct.intel8x0*, i32) #0 {
  %3 = call i32 @igetdword(%struct.intel8x0* %0, i32 0)
  %4 = and i32 %3, 2
  %5 = icmp eq i32 %4, 0
  %.sink = select i1 %5, i32 2, i32 1
  %6 = or i32 %3, %.sink
  %7 = and i32 %6, 2147483647
  call void @iputdword(%struct.intel8x0* %0, i32 0, i32 %7)
  br label %8

; <label>:8:                                      ; preds = %14, %2
  %.01 = phi i32 [ 0, %2 ], [ %16, %14 ]
  %9 = icmp slt i32 %.01, 500
  br i1 %9, label %10, label %17

; <label>:10:                                     ; preds = %8
  %11 = call i32 @igetdword(%struct.intel8x0* %0, i32 24)
  %12 = and i32 %11, 2
  %13 = icmp ne i32 %12, 0
  br i1 %13, label %14, label %20

; <label>:14:                                     ; preds = %10
  %15 = call i64 @schedule_timeout_uninterruptible(i64 1)
  %16 = add nsw i32 %.01, 1
  br label %8

; <label>:17:                                     ; preds = %8
  %18 = call i32 (i8*, ...) @printk(i8* getelementptr inbounds ([24 x i8], [24 x i8]* @.str.35, i32 0, i32 0))
  %19 = icmp ne i32 %1, 0
  br i1 %19, label %30, label %20

; <label>:20:                                     ; preds = %10, %17, %26
  %.1 = phi i32 [ %29, %26 ], [ 0, %17 ], [ 0, %10 ]
  %21 = icmp slt i32 %.1, 500
  br i1 %21, label %22, label %.loopexit

; <label>:22:                                     ; preds = %20
  %23 = call i32 @igetdword(%struct.intel8x0* %0, i32 52)
  %24 = and i32 %23, 128
  %25 = icmp ne i32 %24, 0
  br i1 %25, label %.loopexit, label %26

; <label>:26:                                     ; preds = %22
  %27 = or i32 %23, 128
  call void @iputdword(%struct.intel8x0* %0, i32 52, i32 %27)
  %28 = call i64 @schedule_timeout_uninterruptible(i64 1)
  %29 = add nsw i32 %.1, 1
  br label %20

.loopexit:                                        ; preds = %20, %22
  call void @do_ali_reset(%struct.intel8x0* %0)
  br label %30

; <label>:30:                                     ; preds = %17, %.loopexit
  %.0 = phi i32 [ 0, %.loopexit ], [ -5, %17 ]
  ret i32 %.0
}

; Function Attrs: noinline nounwind uwtable
define internal zeroext i8 @igetbyte(%struct.intel8x0*, i32) #0 {
  %3 = getelementptr inbounds %struct.intel8x0, %struct.intel8x0* %0, i32 0, i32 3
  %4 = load i8*, i8** %3, align 8
  %5 = zext i32 %1 to i64
  %6 = getelementptr i8, i8* %4, i64 %5
  %7 = call i32 @ioread8(i8* %6)
  %8 = trunc i32 %7 to i8
  ret i8 %8
}

; Function Attrs: noinline nounwind uwtable
define internal void @iputdword(%struct.intel8x0*, i32, i32) #0 {
  %4 = getelementptr inbounds %struct.intel8x0, %struct.intel8x0* %0, i32 0, i32 3
  %5 = load i8*, i8** %4, align 8
  %6 = zext i32 %1 to i64
  %7 = getelementptr i8, i8* %5, i64 %6
  call void @iowrite32(i32 %2, i8* %7)
  ret void
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @igetdword(%struct.intel8x0*, i32) #0 {
  %3 = getelementptr inbounds %struct.intel8x0, %struct.intel8x0* %0, i32 0, i32 3
  %4 = load i8*, i8** %3, align 8
  %5 = zext i32 %1 to i64
  %6 = getelementptr i8, i8* %4, i64 %5
  %7 = call i32 @ioread32(i8* %6)
  ret i32 %7
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @snd_intel8x0_ich_chip_reset(%struct.intel8x0*) #0 {
  %2 = alloca i64, align 8
  %3 = alloca i64, align 8
  %4 = alloca i64, align 8
  %5 = alloca i64, align 8
  %6 = call i32 @igetdword(%struct.intel8x0* %0, i32 44)
  %7 = and i32 %6, -3145737
  %8 = and i32 %7, 2
  %9 = icmp eq i32 %8, 0
  %10 = select i1 %9, i32 2, i32 4
  %11 = or i32 %7, %10
  call void @iputdword(%struct.intel8x0* %0, i32 44, i32 %11)
  %12 = load volatile i64, i64* @jiffies, align 8
  %13 = add i64 %12, 250
  %14 = add i64 %13, 1
  br label %15

; <label>:15:                                     ; preds = %24, %1
  %16 = call i32 @igetdword(%struct.intel8x0* %0, i32 44)
  %17 = and i32 %16, 4
  %18 = icmp eq i32 %17, 0
  br i1 %18, label %32, label %19

; <label>:19:                                     ; preds = %15
  %20 = call i64 @schedule_timeout_uninterruptible(i64 1)
  %21 = icmp eq i64* %2, %3
  %22 = zext i1 %21 to i32
  %23 = icmp ne i32 1, 0
  br i1 %23, label %24, label %.critedge

; <label>:24:                                     ; preds = %19
  %25 = icmp eq i64* %4, %5
  %26 = zext i1 %25 to i32
  %27 = load volatile i64, i64* @jiffies, align 8
  %28 = sub nsw i64 %14, %27
  %29 = icmp sge i64 %28, 0
  br i1 %29, label %15, label %.critedge

.critedge:                                        ; preds = %19, %24
  %30 = call i32 @igetdword(%struct.intel8x0* %0, i32 44)
  %31 = call i32 (i8*, ...) @printk(i8* getelementptr inbounds ([47 x i8], [47 x i8]* @.str.34, i32 0, i32 0), i32 %30)
  br label %32

; <label>:32:                                     ; preds = %15, %.critedge
  %.0 = phi i32 [ -5, %.critedge ], [ 0, %15 ]
  ret i32 %.0
}

declare i64 @schedule_timeout_uninterruptible(i64) #1

; Function Attrs: noinline nounwind uwtable
define internal void @iputword(%struct.intel8x0*, i32, i16 zeroext) #0 {
  %4 = getelementptr inbounds %struct.intel8x0, %struct.intel8x0* %0, i32 0, i32 3
  %5 = load i8*, i8** %4, align 8
  %6 = zext i32 %1 to i64
  %7 = getelementptr i8, i8* %5, i64 %6
  call void @iowrite16(i16 zeroext %2, i8* %7)
  ret void
}

; Function Attrs: noinline nounwind uwtable
define internal zeroext i16 @igetword(%struct.intel8x0*, i32) #0 {
  %3 = getelementptr inbounds %struct.intel8x0, %struct.intel8x0* %0, i32 0, i32 3
  %4 = load i8*, i8** %3, align 8
  %5 = zext i32 %1 to i64
  %6 = getelementptr i8, i8* %4, i64 %5
  %7 = call i32 @ioread16(i8* %6)
  %8 = trunc i32 %7 to i16
  ret i16 %8
}

declare i32 @ioread32(i8*) #1

declare void @iowrite16(i16 zeroext, i8*) #1

declare i32 @ioread16(i8*) #1

; Function Attrs: noinline nounwind uwtable
define internal void @do_ali_reset(%struct.intel8x0*) #0 {
  call void @iputdword(%struct.intel8x0* %0, i32 0, i32 -2147483648)
  call void @iputdword(%struct.intel8x0* %0, i32 12, i32 -2088533117)
  call void @iputdword(%struct.intel8x0* %0, i32 28, i32 -2088533117)
  call void @iputdword(%struct.intel8x0* %0, i32 44, i32 -2088533117)
  call void @iputdword(%struct.intel8x0* %0, i32 16, i32 524290)
  call void @iputdword(%struct.intel8x0* %0, i32 20, i32 0)
  call void @iputdword(%struct.intel8x0* %0, i32 24, i32 0)
  ret void
}

declare i32 @ioread8(i8*) #1

declare void @iowrite32(i32, i8*) #1

declare i32 @request_threaded_irq(i32, i32 (i32, i8*)*, i32 (i32, i8*)*, i64, i8*, i8*) #1

; Function Attrs: noinline nounwind uwtable
define internal void @snd_intel8x0_update(%struct.intel8x0*, %struct.ichdev*) #0 {
  %3 = alloca i64, align 8
  %4 = alloca i64, align 8
  %5 = getelementptr inbounds %struct.ichdev, %struct.ichdev* %1, i32 0, i32 1
  %6 = load i64, i64* %5, align 8
  %7 = icmp eq i64* %3, %4
  %8 = zext i1 %7 to i32
  %9 = getelementptr inbounds %struct.intel8x0, %struct.intel8x0* %0, i32 0, i32 20
  %10 = call %struct.raw_spinlock* @spinlock_check(%struct.spinlock* %9)
  %11 = call i64 @_raw_spin_lock_irqsave(%struct.raw_spinlock* %10)
  %12 = getelementptr inbounds %struct.ichdev, %struct.ichdev* %1, i32 0, i32 19
  %13 = load i32, i32* %12, align 8
  %14 = zext i32 %13 to i64
  %15 = add i64 %6, %14
  %16 = trunc i64 %15 to i32
  %17 = call zeroext i8 @igetbyte(%struct.intel8x0* %0, i32 %16)
  %18 = zext i8 %17 to i32
  %19 = add i64 %6, 4
  %20 = trunc i64 %19 to i32
  %21 = call zeroext i8 @igetbyte(%struct.intel8x0* %0, i32 %20)
  %22 = zext i8 %21 to i32
  %23 = and i32 %18, 8
  %24 = icmp ne i32 %23, 0
  br i1 %24, label %25, label %41

; <label>:25:                                     ; preds = %2
  %26 = getelementptr inbounds %struct.ichdev, %struct.ichdev* %1, i32 0, i32 15
  %27 = load i32, i32* %26, align 8
  %28 = icmp eq i32 %22, %27
  %29 = getelementptr inbounds %struct.ichdev, %struct.ichdev* %1, i32 0, i32 15
  %30 = load i32, i32* %29, align 8
  br i1 %28, label %31, label %36

; <label>:31:                                     ; preds = %25
  %32 = add nsw i32 %30, 1
  store i32 %32, i32* %29, align 8
  %33 = getelementptr inbounds %struct.ichdev, %struct.ichdev* %1, i32 0, i32 15
  %34 = load i32, i32* %33, align 8
  %35 = and i32 %34, 31
  store i32 %35, i32* %33, align 8
  br label %41

; <label>:36:                                     ; preds = %25
  %37 = sub nsw i32 %22, %30
  %38 = icmp slt i32 %37, 0
  %39 = add nsw i32 %37, 32
  %. = select i1 %38, i32 %39, i32 %37
  %40 = getelementptr inbounds %struct.ichdev, %struct.ichdev* %1, i32 0, i32 15
  store i32 %22, i32* %40, align 8
  br label %41

; <label>:41:                                     ; preds = %31, %36, %2
  %.2 = phi i32 [ 0, %2 ], [ 1, %31 ], [ %., %36 ]
  %42 = getelementptr inbounds %struct.ichdev, %struct.ichdev* %1, i32 0, i32 8
  %43 = load i32, i32* %42, align 4
  %44 = mul i32 %.2, %43
  %45 = getelementptr inbounds %struct.ichdev, %struct.ichdev* %1, i32 0, i32 9
  %46 = load i32, i32* %45, align 8
  %47 = add i32 %46, %44
  store i32 %47, i32* %45, align 8
  %48 = getelementptr inbounds %struct.intel8x0, %struct.intel8x0* %0, i32 0, i32 9
  %49 = load i16, i16* %48, align 8
  %50 = lshr i16 %49, 7
  %51 = and i16 %50, 1
  %52 = zext i16 %51 to i32
  %53 = icmp ne i32 %52, 0
  br i1 %53, label %60, label %54

; <label>:54:                                     ; preds = %41
  %55 = getelementptr inbounds %struct.ichdev, %struct.ichdev* %1, i32 0, i32 6
  %56 = load i32, i32* %55, align 4
  %57 = getelementptr inbounds %struct.ichdev, %struct.ichdev* %1, i32 0, i32 9
  %58 = load i32, i32* %57, align 8
  %59 = urem i32 %58, %56
  store i32 %59, i32* %57, align 8
  br label %60

; <label>:60:                                     ; preds = %54, %41
  %61 = getelementptr inbounds %struct.ichdev, %struct.ichdev* %1, i32 0, i32 13
  %62 = load i32, i32* %61, align 8
  %63 = add nsw i32 %62, %.2
  store i32 %63, i32* %61, align 8
  %64 = getelementptr inbounds %struct.ichdev, %struct.ichdev* %1, i32 0, i32 13
  %65 = load i32, i32* %64, align 8
  %66 = and i32 %65, 31
  store i32 %66, i32* %64, align 8
  %67 = add i64 %6, 5
  %68 = trunc i64 %67 to i32
  %69 = getelementptr inbounds %struct.ichdev, %struct.ichdev* %1, i32 0, i32 13
  %70 = load i32, i32* %69, align 8
  %71 = trunc i32 %70 to i8
  call void @iputbyte(%struct.intel8x0* %0, i32 %68, i8 zeroext %71)
  br label %72

; <label>:72:                                     ; preds = %106, %60
  %.03 = phi i32 [ 0, %60 ], [ %107, %106 ]
  %.0 = phi i32 [ 0, %60 ], [ %.1, %106 ]
  %73 = icmp slt i32 %.03, %.2
  br i1 %73, label %74, label %108

; <label>:74:                                     ; preds = %72
  %75 = getelementptr inbounds %struct.ichdev, %struct.ichdev* %1, i32 0, i32 14
  %76 = load i32, i32* %75, align 4
  %77 = add nsw i32 %76, 1
  store i32 %77, i32* %75, align 4
  %78 = getelementptr inbounds %struct.ichdev, %struct.ichdev* %1, i32 0, i32 12
  %79 = load i32, i32* %78, align 4
  %80 = getelementptr inbounds %struct.ichdev, %struct.ichdev* %1, i32 0, i32 14
  %81 = load i32, i32* %80, align 4
  %82 = srem i32 %81, %79
  store i32 %82, i32* %80, align 4
  %83 = getelementptr inbounds %struct.ichdev, %struct.ichdev* %1, i32 0, i32 5
  %84 = load i32, i32* %83, align 8
  %85 = getelementptr inbounds %struct.ichdev, %struct.ichdev* %1, i32 0, i32 14
  %86 = load i32, i32* %85, align 4
  %87 = getelementptr inbounds %struct.ichdev, %struct.ichdev* %1, i32 0, i32 8
  %88 = load i32, i32* %87, align 4
  %89 = mul i32 %86, %88
  %90 = add i32 %84, %89
  %91 = getelementptr inbounds %struct.ichdev, %struct.ichdev* %1, i32 0, i32 2
  %92 = load i32*, i32** %91, align 8
  %93 = getelementptr inbounds %struct.ichdev, %struct.ichdev* %1, i32 0, i32 13
  %94 = load i32, i32* %93, align 8
  %95 = mul nsw i32 %94, 2
  %96 = sext i32 %95 to i64
  %97 = getelementptr inbounds i32, i32* %92, i64 %96
  store i32 %90, i32* %97, align 4
  %98 = getelementptr inbounds %struct.ichdev, %struct.ichdev* %1, i32 0, i32 16
  %99 = load i32, i32* %98, align 4
  %100 = add nsw i32 %99, -1
  store i32 %100, i32* %98, align 4
  %101 = icmp eq i32 %100, 0
  br i1 %101, label %102, label %106

; <label>:102:                                    ; preds = %74
  %103 = getelementptr inbounds %struct.ichdev, %struct.ichdev* %1, i32 0, i32 17
  %104 = load i32, i32* %103, align 8
  %105 = getelementptr inbounds %struct.ichdev, %struct.ichdev* %1, i32 0, i32 16
  store i32 %104, i32* %105, align 4
  br label %106

; <label>:106:                                    ; preds = %74, %102
  %.1 = phi i32 [ 1, %102 ], [ %.0, %74 ]
  %107 = add nsw i32 %.03, 1
  br label %72

; <label>:108:                                    ; preds = %72
  %109 = getelementptr inbounds %struct.intel8x0, %struct.intel8x0* %0, i32 0, i32 20
  call void @spin_unlock_irqrestore(%struct.spinlock* %109, i64 %11)
  %110 = icmp ne i32 %.0, 0
  br i1 %110, label %111, label %118

; <label>:111:                                    ; preds = %108
  %112 = getelementptr inbounds %struct.ichdev, %struct.ichdev* %1, i32 0, i32 4
  %113 = load %struct.snd_pcm_substream*, %struct.snd_pcm_substream** %112, align 8
  %114 = icmp ne %struct.snd_pcm_substream* %113, null
  br i1 %114, label %115, label %118

; <label>:115:                                    ; preds = %111
  %116 = getelementptr inbounds %struct.ichdev, %struct.ichdev* %1, i32 0, i32 4
  %117 = load %struct.snd_pcm_substream*, %struct.snd_pcm_substream** %116, align 8
  call void @snd_pcm_period_elapsed(%struct.snd_pcm_substream* %117)
  br label %118

; <label>:118:                                    ; preds = %115, %111, %108
  %119 = getelementptr inbounds %struct.ichdev, %struct.ichdev* %1, i32 0, i32 19
  %120 = load i32, i32* %119, align 8
  %121 = zext i32 %120 to i64
  %122 = add i64 %6, %121
  %123 = trunc i64 %122 to i32
  %124 = and i32 %18, 28
  %125 = trunc i32 %124 to i8
  call void @iputbyte(%struct.intel8x0* %0, i32 %123, i8 zeroext %125)
  ret void
}

declare i64 @_raw_spin_lock_irqsave(%struct.raw_spinlock*) #1 section ".spinlock.text"

; Function Attrs: noinline nounwind uwtable
define internal void @spin_unlock_irqrestore(%struct.spinlock*, i64) #0 {
  %3 = alloca i64, align 8
  %4 = alloca i64, align 8
  %5 = icmp eq i64* %3, %4
  %6 = zext i1 %5 to i32
  %7 = getelementptr inbounds %struct.spinlock, %struct.spinlock* %0, i32 0, i32 0
  %8 = bitcast %union.anon.0* %7 to %struct.raw_spinlock*
  call void @_raw_spin_unlock_irqrestore(%struct.raw_spinlock* %8, i64 %1)
  ret void
}

declare void @snd_pcm_period_elapsed(%struct.snd_pcm_substream*) #1

declare void @_raw_spin_unlock_irqrestore(%struct.raw_spinlock*, i64) #1 section ".spinlock.text"

; Function Attrs: noinline nounwind uwtable
define internal void @snd_intel8x0_codec_write(%struct.snd_ac97*, i16 zeroext, i16 zeroext) #0 {
  %4 = getelementptr inbounds %struct.snd_ac97, %struct.snd_ac97* %0, i32 0, i32 1
  %5 = load i8*, i8** %4, align 8
  %6 = bitcast i8* %5 to %struct.intel8x0*
  %7 = getelementptr inbounds %struct.snd_ac97, %struct.snd_ac97* %0, i32 0, i32 11
  %8 = load i16, i16* %7, align 8
  %9 = zext i16 %8 to i32
  %10 = call i32 @snd_intel8x0_codec_semaphore(%struct.intel8x0* %6, i32 %9)
  %11 = icmp slt i32 %10, 0
  br i1 %11, label %12, label %25

; <label>:12:                                     ; preds = %3
  %13 = getelementptr inbounds %struct.intel8x0, %struct.intel8x0* %6, i32 0, i32 9
  %14 = load i16, i16* %13, align 8
  %15 = lshr i16 %14, 5
  %16 = and i16 %15, 1
  %17 = zext i16 %16 to i32
  %18 = icmp ne i32 %17, 0
  br i1 %18, label %25, label %19

; <label>:19:                                     ; preds = %12
  %20 = getelementptr inbounds %struct.snd_ac97, %struct.snd_ac97* %0, i32 0, i32 11
  %21 = load i16, i16* %20, align 8
  %22 = zext i16 %21 to i32
  %23 = zext i16 %1 to i32
  %24 = call i32 (i8*, ...) @printk(i8* getelementptr inbounds ([61 x i8], [61 x i8]* @.str.37, i32 0, i32 0), i32 %22, i32 %23)
  br label %25

; <label>:25:                                     ; preds = %12, %19, %3
  %26 = zext i16 %1 to i32
  %27 = getelementptr inbounds %struct.snd_ac97, %struct.snd_ac97* %0, i32 0, i32 11
  %28 = load i16, i16* %27, align 8
  %29 = zext i16 %28 to i32
  %30 = mul nsw i32 %29, 128
  %31 = add nsw i32 %26, %30
  call void @iaputword(%struct.intel8x0* %6, i32 %31, i16 zeroext %2)
  ret void
}

; Function Attrs: noinline nounwind uwtable
define internal zeroext i16 @snd_intel8x0_codec_read(%struct.snd_ac97*, i16 zeroext) #0 {
  %3 = getelementptr inbounds %struct.snd_ac97, %struct.snd_ac97* %0, i32 0, i32 1
  %4 = load i8*, i8** %3, align 8
  %5 = bitcast i8* %4 to %struct.intel8x0*
  %6 = getelementptr inbounds %struct.snd_ac97, %struct.snd_ac97* %0, i32 0, i32 11
  %7 = load i16, i16* %6, align 8
  %8 = zext i16 %7 to i32
  %9 = call i32 @snd_intel8x0_codec_semaphore(%struct.intel8x0* %5, i32 %8)
  %10 = icmp slt i32 %9, 0
  br i1 %10, label %11, label %24

; <label>:11:                                     ; preds = %2
  %12 = getelementptr inbounds %struct.intel8x0, %struct.intel8x0* %5, i32 0, i32 9
  %13 = load i16, i16* %12, align 8
  %14 = lshr i16 %13, 5
  %15 = and i16 %14, 1
  %16 = zext i16 %15 to i32
  %17 = icmp ne i32 %16, 0
  br i1 %17, label %53, label %18

; <label>:18:                                     ; preds = %11
  %19 = getelementptr inbounds %struct.snd_ac97, %struct.snd_ac97* %0, i32 0, i32 11
  %20 = load i16, i16* %19, align 8
  %21 = zext i16 %20 to i32
  %22 = zext i16 %1 to i32
  %23 = call i32 (i8*, ...) @printk(i8* getelementptr inbounds ([60 x i8], [60 x i8]* @.str.39, i32 0, i32 0), i32 %21, i32 %22)
  br label %53

; <label>:24:                                     ; preds = %2
  %25 = zext i16 %1 to i32
  %26 = getelementptr inbounds %struct.snd_ac97, %struct.snd_ac97* %0, i32 0, i32 11
  %27 = load i16, i16* %26, align 8
  %28 = zext i16 %27 to i32
  %29 = mul nsw i32 %28, 128
  %30 = add nsw i32 %25, %29
  %31 = call zeroext i16 @iagetword(%struct.intel8x0* %5, i32 %30)
  %32 = call i32 @igetdword(%struct.intel8x0* %5, i32 48)
  %33 = and i32 %32, 32768
  %34 = icmp ne i32 %33, 0
  br i1 %34, label %35, label %53

; <label>:35:                                     ; preds = %24
  %36 = getelementptr inbounds %struct.intel8x0, %struct.intel8x0* %5, i32 0, i32 19
  %37 = load i32, i32* %36, align 4
  %38 = or i32 %37, 1
  %39 = xor i32 %38, -1
  %40 = and i32 %32, %39
  call void @iputdword(%struct.intel8x0* %5, i32 48, i32 %40)
  %41 = getelementptr inbounds %struct.intel8x0, %struct.intel8x0* %5, i32 0, i32 9
  %42 = load i16, i16* %41, align 8
  %43 = lshr i16 %42, 5
  %44 = and i16 %43, 1
  %45 = zext i16 %44 to i32
  %46 = icmp ne i32 %45, 0
  br i1 %46, label %53, label %47

; <label>:47:                                     ; preds = %35
  %48 = getelementptr inbounds %struct.snd_ac97, %struct.snd_ac97* %0, i32 0, i32 11
  %49 = load i16, i16* %48, align 8
  %50 = zext i16 %49 to i32
  %51 = zext i16 %1 to i32
  %52 = call i32 (i8*, ...) @printk(i8* getelementptr inbounds ([50 x i8], [50 x i8]* @.str.40, i32 0, i32 0), i32 %50, i32 %51)
  br label %53

; <label>:53:                                     ; preds = %24, %47, %35, %11, %18
  %.1 = phi i16 [ -1, %18 ], [ -1, %11 ], [ %31, %24 ], [ -1, %47 ], [ -1, %35 ]
  ret i16 %.1
}

; Function Attrs: noinline nounwind uwtable
define internal void @snd_intel8x0_ali_codec_write(%struct.snd_ac97*, i16 zeroext, i16 zeroext) #0 {
  %4 = getelementptr inbounds %struct.snd_ac97, %struct.snd_ac97* %0, i32 0, i32 1
  %5 = load i8*, i8** %4, align 8
  %6 = bitcast i8* %5 to %struct.intel8x0*
  %7 = call i32 @snd_intel8x0_ali_codec_semaphore(%struct.intel8x0* %6)
  %8 = icmp ne i32 %7, 0
  br i1 %8, label %17, label %9

; <label>:9:                                      ; preds = %3
  call void @iputword(%struct.intel8x0* %6, i32 32, i16 zeroext %2)
  %10 = getelementptr inbounds %struct.snd_ac97, %struct.snd_ac97* %0, i32 0, i32 11
  %11 = load i16, i16* %10, align 8
  %12 = icmp ne i16 %11, 0
  %13 = zext i16 %1 to i32
  %14 = or i32 %13, 256
  %15 = trunc i32 %14 to i16
  %.0 = select i1 %12, i16 %15, i16 %1
  call void @iputword(%struct.intel8x0* %6, i32 34, i16 zeroext %.0)
  %16 = call i32 @snd_intel8x0_ali_codec_ready(%struct.intel8x0* %6, i32 1)
  br label %17

; <label>:17:                                     ; preds = %3, %9
  ret void
}

; Function Attrs: noinline nounwind uwtable
define internal zeroext i16 @snd_intel8x0_ali_codec_read(%struct.snd_ac97*, i16 zeroext) #0 {
  %3 = getelementptr inbounds %struct.snd_ac97, %struct.snd_ac97* %0, i32 0, i32 1
  %4 = load i8*, i8** %3, align 8
  %5 = bitcast i8* %4 to %struct.intel8x0*
  %6 = call i32 @snd_intel8x0_ali_codec_semaphore(%struct.intel8x0* %5)
  %7 = icmp ne i32 %6, 0
  br i1 %7, label %22, label %8

; <label>:8:                                      ; preds = %2
  %9 = zext i16 %1 to i32
  %10 = or i32 %9, 128
  %11 = trunc i32 %10 to i16
  %12 = getelementptr inbounds %struct.snd_ac97, %struct.snd_ac97* %0, i32 0, i32 11
  %13 = load i16, i16* %12, align 8
  %14 = icmp ne i16 %13, 0
  %15 = zext i16 %11 to i32
  %16 = or i32 %15, 256
  %17 = trunc i32 %16 to i16
  %.01 = select i1 %14, i16 %17, i16 %11
  call void @iputword(%struct.intel8x0* %5, i32 34, i16 zeroext %.01)
  %18 = call i32 @snd_intel8x0_ali_codec_ready(%struct.intel8x0* %5, i32 2)
  %19 = icmp ne i32 %18, 0
  br i1 %19, label %22, label %20

; <label>:20:                                     ; preds = %8
  %21 = call zeroext i16 @igetword(%struct.intel8x0* %5, i32 36)
  br label %22

; <label>:22:                                     ; preds = %8, %2, %20
  %.0 = phi i16 [ %21, %20 ], [ -1, %2 ], [ -1, %8 ]
  ret i16 %.0
}

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i32, i1) #2

; Function Attrs: noinline nounwind uwtable
define internal void @snd_intel8x0_mixer_free_ac97(%struct.snd_ac97*) #0 {
  %2 = getelementptr inbounds %struct.snd_ac97, %struct.snd_ac97* %0, i32 0, i32 1
  %3 = load i8*, i8** %2, align 8
  %4 = bitcast i8* %3 to %struct.intel8x0*
  %5 = getelementptr inbounds %struct.intel8x0, %struct.intel8x0* %4, i32 0, i32 13
  %6 = getelementptr inbounds %struct.snd_ac97, %struct.snd_ac97* %0, i32 0, i32 11
  %7 = load i16, i16* %6, align 8
  %8 = zext i16 %7 to i64
  %9 = getelementptr inbounds [3 x %struct.snd_ac97*], [3 x %struct.snd_ac97*]* %5, i64 0, i64 %8
  store %struct.snd_ac97* null, %struct.snd_ac97** %9, align 8
  ret void
}

; Function Attrs: noinline nounwind uwtable
define internal void @snd_intel8x0_codec_read_test(%struct.intel8x0*, i32) #0 section ".devinit.text" {
  %3 = call i32 @snd_intel8x0_codec_semaphore(%struct.intel8x0* %0, i32 %1)
  %4 = icmp sge i32 %3, 0
  br i1 %4, label %5, label %17

; <label>:5:                                      ; preds = %2
  %6 = mul i32 %1, 128
  %7 = call zeroext i16 @iagetword(%struct.intel8x0* %0, i32 %6)
  %8 = call i32 @igetdword(%struct.intel8x0* %0, i32 48)
  %9 = and i32 %8, 32768
  %10 = icmp ne i32 %9, 0
  br i1 %10, label %11, label %17

; <label>:11:                                     ; preds = %5
  %12 = getelementptr inbounds %struct.intel8x0, %struct.intel8x0* %0, i32 0, i32 19
  %13 = load i32, i32* %12, align 4
  %14 = or i32 %13, 1
  %15 = xor i32 %14, -1
  %16 = and i32 %8, %15
  call void @iputdword(%struct.intel8x0* %0, i32 48, i32 %16)
  br label %17

; <label>:17:                                     ; preds = %5, %11, %2
  ret void
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @__snd_bug_on(i32) #0 {
  ret i32 0
}

declare void @__const_udelay(i64) #1

declare i32 @snd_ac97_bus(%struct.snd_card*, i32, %struct.snd_ac97_bus_ops*, i8*, %struct.snd_ac97_bus**) #1

; Function Attrs: noinline nounwind uwtable
define internal void @snd_intel8x0_mixer_free_ac97_bus(%struct.snd_ac97_bus*) #0 {
  %2 = getelementptr inbounds %struct.snd_ac97_bus, %struct.snd_ac97_bus* %0, i32 0, i32 1
  %3 = load i8*, i8** %2, align 8
  %4 = bitcast i8* %3 to %struct.intel8x0*
  %5 = getelementptr inbounds %struct.intel8x0, %struct.intel8x0* %4, i32 0, i32 12
  store %struct.snd_ac97_bus* null, %struct.snd_ac97_bus** %5, align 8
  ret void
}

declare i32 @snd_ac97_mixer(%struct.snd_ac97_bus*, %struct.snd_ac97_template*, %struct.snd_ac97**) #1

declare i32 @snd_ac97_tune_hardware(%struct.snd_ac97*, %struct.ac97_quirk*, i8*) #1

declare i32 @snd_ac97_pcm_assign(%struct.snd_ac97_bus*, i16 zeroext, %struct.ac97_pcm*) #1

declare i32 @snd_ac97_update_bits(%struct.snd_ac97*, i16 zeroext, i16 zeroext, i16 zeroext) #1

; Function Attrs: noinline nounwind uwtable
define internal i32 @snd_intel8x0_codec_semaphore(%struct.intel8x0*, i32) #0 {
  %3 = icmp ugt i32 %1, 2
  br i1 %3, label %49, label %4

; <label>:4:                                      ; preds = %2
  %5 = getelementptr inbounds %struct.intel8x0, %struct.intel8x0* %0, i32 0, i32 9
  %6 = load i16, i16* %5, align 8
  %7 = lshr i16 %6, 6
  %8 = and i16 %7, 1
  %9 = zext i16 %8 to i32
  %10 = icmp ne i32 %9, 0
  br i1 %10, label %11, label %14

; <label>:11:                                     ; preds = %4
  %12 = getelementptr inbounds %struct.intel8x0, %struct.intel8x0* %0, i32 0, i32 18
  %13 = load i32, i32* %12, align 8
  br label %24

; <label>:14:                                     ; preds = %4
  %15 = getelementptr inbounds %struct.intel8x0, %struct.intel8x0* %0, i32 0, i32 17
  %16 = load i32*, i32** %15, align 8
  %17 = getelementptr inbounds %struct.intel8x0, %struct.intel8x0* %0, i32 0, i32 14
  %18 = zext i32 %1 to i64
  %19 = getelementptr inbounds [3 x i32], [3 x i32]* %17, i64 0, i64 %18
  %20 = load i32, i32* %19, align 4
  %21 = zext i32 %20 to i64
  %22 = getelementptr inbounds i32, i32* %16, i64 %21
  %23 = load i32, i32* %22, align 4
  br label %24

; <label>:24:                                     ; preds = %14, %11
  %.02 = phi i32 [ %13, %11 ], [ %23, %14 ]
  %25 = call i32 @igetdword(%struct.intel8x0* %0, i32 48)
  %26 = and i32 %25, %.02
  %27 = icmp eq i32 %26, 0
  br i1 %27, label %49, label %28

; <label>:28:                                     ; preds = %24
  %29 = getelementptr inbounds %struct.intel8x0, %struct.intel8x0* %0, i32 0, i32 9
  %30 = load i16, i16* %29, align 8
  %31 = lshr i16 %30, 11
  %32 = and i16 %31, 1
  %33 = zext i16 %32 to i32
  %34 = icmp ne i32 %33, 0
  br i1 %34, label %49, label %35

; <label>:35:                                     ; preds = %28, %40
  %.01 = phi i32 [ %41, %40 ], [ 100, %28 ]
  %36 = call zeroext i8 @igetbyte(%struct.intel8x0* %0, i32 52)
  %37 = zext i8 %36 to i32
  %38 = and i32 %37, 1
  %39 = icmp ne i32 %38, 0
  br i1 %39, label %40, label %49

; <label>:40:                                     ; preds = %35
  call void @__const_udelay(i64 42950)
  %41 = add nsw i32 %.01, -1
  %42 = icmp ne i32 %.01, 0
  br i1 %42, label %35, label %43

; <label>:43:                                     ; preds = %40
  %44 = call zeroext i8 @igetbyte(%struct.intel8x0* %0, i32 52)
  %45 = zext i8 %44 to i32
  %46 = call i32 @igetdword(%struct.intel8x0* %0, i32 48)
  %47 = call i32 (i8*, ...) @printk(i8* getelementptr inbounds ([57 x i8], [57 x i8]* @.str.38, i32 0, i32 0), i32 %45, i32 %46)
  %48 = call zeroext i16 @iagetword(%struct.intel8x0* %0, i32 0)
  br label %49

; <label>:49:                                     ; preds = %35, %28, %24, %2, %43
  %.0 = phi i32 [ -16, %43 ], [ -5, %2 ], [ -5, %24 ], [ 0, %28 ], [ 0, %35 ]
  ret i32 %.0
}

; Function Attrs: noinline nounwind uwtable
define internal void @iaputword(%struct.intel8x0*, i32, i16 zeroext) #0 {
  %4 = getelementptr inbounds %struct.intel8x0, %struct.intel8x0* %0, i32 0, i32 2
  %5 = load i8*, i8** %4, align 8
  %6 = zext i32 %1 to i64
  %7 = getelementptr i8, i8* %5, i64 %6
  call void @iowrite16(i16 zeroext %2, i8* %7)
  ret void
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @snd_intel8x0_ali_codec_semaphore(%struct.intel8x0*) #0 {
  %2 = getelementptr inbounds %struct.intel8x0, %struct.intel8x0* %0, i32 0, i32 9
  %3 = load i16, i16* %2, align 8
  %4 = lshr i16 %3, 11
  %5 = and i16 %4, 1
  %6 = zext i16 %5 to i32
  %7 = icmp ne i32 %6, 0
  br i1 %7, label %27, label %8

; <label>:8:                                      ; preds = %1, %14
  %.01 = phi i32 [ %9, %14 ], [ 100, %1 ]
  %9 = add nsw i32 %.01, -1
  %cond = icmp eq i32 %9, 0
  br i1 %cond, label %16, label %10

; <label>:10:                                     ; preds = %8
  %11 = call i32 @igetdword(%struct.intel8x0* %0, i32 60)
  %12 = and i32 %11, -2147483648
  %13 = icmp ne i32 %12, 0
  br i1 %13, label %14, label %.critedge

; <label>:14:                                     ; preds = %10
  call void @__const_udelay(i64 4295)
  br label %8

.critedge:                                        ; preds = %10
  %15 = icmp ne i32 %9, 0
  br i1 %15, label %25, label %16

; <label>:16:                                     ; preds = %8, %.critedge
  %17 = getelementptr inbounds %struct.intel8x0, %struct.intel8x0* %0, i32 0, i32 9
  %18 = load i16, i16* %17, align 8
  %19 = lshr i16 %18, 5
  %20 = and i16 %19, 1
  %21 = zext i16 %20 to i32
  %22 = icmp ne i32 %21, 0
  br i1 %22, label %25, label %23

; <label>:23:                                     ; preds = %16
  %24 = call i32 (i8*, ...) @printk(i8* getelementptr inbounds ([32 x i8], [32 x i8]* @.str.41, i32 0, i32 0))
  br label %25

; <label>:25:                                     ; preds = %23, %16, %.critedge
  %26 = call i32 @snd_intel8x0_ali_codec_ready(%struct.intel8x0* %0, i32 8)
  br label %27

; <label>:27:                                     ; preds = %1, %25
  %.0 = phi i32 [ %26, %25 ], [ 0, %1 ]
  ret i32 %.0
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @snd_intel8x0_ali_codec_ready(%struct.intel8x0*, i32) #0 {
  br label %3

; <label>:3:                                      ; preds = %10, %2
  %.01 = phi i32 [ 0, %2 ], [ %11, %10 ]
  %4 = icmp slt i32 %.01, 127
  br i1 %4, label %5, label %12

; <label>:5:                                      ; preds = %3
  %6 = call zeroext i8 @igetbyte(%struct.intel8x0* %0, i32 56)
  %7 = zext i8 %6 to i32
  %8 = and i32 %7, %1
  %9 = icmp ne i32 %8, 0
  br i1 %9, label %19, label %10

; <label>:10:                                     ; preds = %5
  %11 = add nsw i32 %.01, 1
  br label %3

; <label>:12:                                     ; preds = %3
  %13 = getelementptr inbounds %struct.intel8x0, %struct.intel8x0* %0, i32 0, i32 9
  %14 = load i16, i16* %13, align 8
  %15 = lshr i16 %14, 5
  %16 = and i16 %15, 1
  %17 = zext i16 %16 to i32
  %18 = icmp ne i32 %17, 0
  br label %19

; <label>:19:                                     ; preds = %5, %12
  %.0 = phi i32 [ -16, %12 ], [ 0, %5 ]
  ret i32 %.0
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @snd_intel8x0_pcm1(%struct.intel8x0*, i32, %struct.ich_pcm_table*) #0 section ".devinit.text" {
  %4 = alloca %struct.snd_pcm*, align 8
  %5 = alloca [32 x i8], align 16
  %6 = getelementptr inbounds %struct.ich_pcm_table, %struct.ich_pcm_table* %2, i32 0, i32 0
  %7 = load i8*, i8** %6, align 8
  %8 = icmp ne i8* %7, null
  %9 = getelementptr inbounds [32 x i8], [32 x i8]* %5, i32 0, i32 0
  br i1 %8, label %10, label %14

; <label>:10:                                     ; preds = %3
  %11 = getelementptr inbounds %struct.ich_pcm_table, %struct.ich_pcm_table* %2, i32 0, i32 0
  %12 = load i8*, i8** %11, align 8
  %13 = call i32 (i8*, i8*, ...) @sprintf(i8* %9, i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.104, i32 0, i32 0), i8* %12)
  br label %16

; <label>:14:                                     ; preds = %3
  %15 = call i8* @strcpy(i8* %9, i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str, i32 0, i32 0))
  br label %16

; <label>:16:                                     ; preds = %14, %10
  %17 = getelementptr inbounds %struct.intel8x0, %struct.intel8x0* %0, i32 0, i32 5
  %18 = load %struct.snd_card*, %struct.snd_card** %17, align 8
  %19 = getelementptr inbounds [32 x i8], [32 x i8]* %5, i32 0, i32 0
  %20 = getelementptr inbounds %struct.ich_pcm_table, %struct.ich_pcm_table* %2, i32 0, i32 1
  %21 = load %struct.snd_pcm_ops*, %struct.snd_pcm_ops** %20, align 8
  %22 = icmp ne %struct.snd_pcm_ops* %21, null
  %23 = select i1 %22, i32 1, i32 0
  %24 = getelementptr inbounds %struct.ich_pcm_table, %struct.ich_pcm_table* %2, i32 0, i32 2
  %25 = load %struct.snd_pcm_ops*, %struct.snd_pcm_ops** %24, align 8
  %26 = icmp ne %struct.snd_pcm_ops* %25, null
  %27 = select i1 %26, i32 1, i32 0
  %28 = call i32 @snd_pcm_new(%struct.snd_card* %18, i8* %19, i32 %1, i32 %23, i32 %27, %struct.snd_pcm** %4)
  %29 = icmp slt i32 %28, 0
  br i1 %29, label %83, label %30

; <label>:30:                                     ; preds = %16
  %31 = getelementptr inbounds %struct.ich_pcm_table, %struct.ich_pcm_table* %2, i32 0, i32 1
  %32 = load %struct.snd_pcm_ops*, %struct.snd_pcm_ops** %31, align 8
  %33 = icmp ne %struct.snd_pcm_ops* %32, null
  br i1 %33, label %34, label %38

; <label>:34:                                     ; preds = %30
  %35 = load %struct.snd_pcm*, %struct.snd_pcm** %4, align 8
  %36 = getelementptr inbounds %struct.ich_pcm_table, %struct.ich_pcm_table* %2, i32 0, i32 1
  %37 = load %struct.snd_pcm_ops*, %struct.snd_pcm_ops** %36, align 8
  call void @snd_pcm_set_ops(%struct.snd_pcm* %35, i32 0, %struct.snd_pcm_ops* %37)
  br label %38

; <label>:38:                                     ; preds = %34, %30
  %39 = getelementptr inbounds %struct.ich_pcm_table, %struct.ich_pcm_table* %2, i32 0, i32 2
  %40 = load %struct.snd_pcm_ops*, %struct.snd_pcm_ops** %39, align 8
  %41 = icmp ne %struct.snd_pcm_ops* %40, null
  br i1 %41, label %42, label %46

; <label>:42:                                     ; preds = %38
  %43 = load %struct.snd_pcm*, %struct.snd_pcm** %4, align 8
  %44 = getelementptr inbounds %struct.ich_pcm_table, %struct.ich_pcm_table* %2, i32 0, i32 2
  %45 = load %struct.snd_pcm_ops*, %struct.snd_pcm_ops** %44, align 8
  call void @snd_pcm_set_ops(%struct.snd_pcm* %43, i32 1, %struct.snd_pcm_ops* %45)
  br label %46

; <label>:46:                                     ; preds = %42, %38
  %47 = bitcast %struct.intel8x0* %0 to i8*
  %48 = load %struct.snd_pcm*, %struct.snd_pcm** %4, align 8
  %49 = getelementptr inbounds %struct.snd_pcm, %struct.snd_pcm* %48, i32 0, i32 11
  store i8* %47, i8** %49, align 8
  %50 = load %struct.snd_pcm*, %struct.snd_pcm** %4, align 8
  %51 = getelementptr inbounds %struct.snd_pcm, %struct.snd_pcm* %50, i32 0, i32 3
  store i32 0, i32* %51, align 4
  %52 = getelementptr inbounds %struct.ich_pcm_table, %struct.ich_pcm_table* %2, i32 0, i32 0
  %53 = load i8*, i8** %52, align 8
  %54 = icmp ne i8* %53, null
  %55 = load %struct.snd_pcm*, %struct.snd_pcm** %4, align 8
  %56 = getelementptr inbounds %struct.snd_pcm, %struct.snd_pcm* %55, i32 0, i32 7
  %57 = getelementptr inbounds [80 x i8], [80 x i8]* %56, i32 0, i32 0
  %58 = getelementptr inbounds %struct.intel8x0, %struct.intel8x0* %0, i32 0, i32 5
  %59 = load %struct.snd_card*, %struct.snd_card** %58, align 8
  %60 = getelementptr inbounds %struct.snd_card, %struct.snd_card* %59, i32 0, i32 3
  %61 = getelementptr inbounds [32 x i8], [32 x i8]* %60, i32 0, i32 0
  br i1 %54, label %62, label %66

; <label>:62:                                     ; preds = %46
  %63 = getelementptr inbounds %struct.ich_pcm_table, %struct.ich_pcm_table* %2, i32 0, i32 0
  %64 = load i8*, i8** %63, align 8
  %65 = call i32 (i8*, i8*, ...) @sprintf(i8* %57, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.105, i32 0, i32 0), i8* %61, i8* %64)
  br label %68

; <label>:66:                                     ; preds = %46
  %67 = call i8* @strcpy(i8* %57, i8* %61)
  br label %68

; <label>:68:                                     ; preds = %66, %62
  %69 = load %struct.snd_pcm*, %struct.snd_pcm** %4, align 8
  %70 = getelementptr inbounds %struct.intel8x0, %struct.intel8x0* %0, i32 0, i32 7
  %71 = sext i32 %1 to i64
  %72 = getelementptr inbounds [6 x %struct.snd_pcm*], [6 x %struct.snd_pcm*]* %70, i64 0, i64 %71
  store %struct.snd_pcm* %69, %struct.snd_pcm** %72, align 8
  %73 = load %struct.snd_pcm*, %struct.snd_pcm** %4, align 8
  %74 = getelementptr inbounds %struct.intel8x0, %struct.intel8x0* %0, i32 0, i32 4
  %75 = load %struct.pci_dev*, %struct.pci_dev** %74, align 8
  %76 = getelementptr inbounds %struct.pci_dev, %struct.pci_dev* %75, i32 0, i32 27
  %77 = bitcast %struct.device* %76 to i8*
  %78 = getelementptr inbounds %struct.ich_pcm_table, %struct.ich_pcm_table* %2, i32 0, i32 3
  %79 = load i64, i64* %78, align 8
  %80 = getelementptr inbounds %struct.ich_pcm_table, %struct.ich_pcm_table* %2, i32 0, i32 4
  %81 = load i64, i64* %80, align 8
  %82 = call i32 @snd_pcm_lib_preallocate_pages_for_all(%struct.snd_pcm* %73, i32 2, i8* %77, i64 %79, i64 %81)
  br label %83

; <label>:83:                                     ; preds = %16, %68
  %.0 = phi i32 [ 0, %68 ], [ %28, %16 ]
  ret i32 %.0
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @snd_intel8x0_playback_open(%struct.snd_pcm_substream*) #0 {
  %2 = getelementptr inbounds %struct.snd_pcm_substream, %struct.snd_pcm_substream* %0, i32 0, i32 2
  %3 = load i8*, i8** %2, align 8
  %4 = bitcast i8* %3 to %struct.intel8x0*
  %5 = getelementptr inbounds %struct.snd_pcm_substream, %struct.snd_pcm_substream* %0, i32 0, i32 12
  %6 = load %struct.snd_pcm_runtime*, %struct.snd_pcm_runtime** %5, align 8
  %7 = getelementptr inbounds %struct.intel8x0, %struct.intel8x0* %4, i32 0, i32 8
  %8 = getelementptr inbounds [6 x %struct.ichdev], [6 x %struct.ichdev]* %7, i64 0, i64 1
  %9 = call i32 @snd_intel8x0_pcm_open(%struct.snd_pcm_substream* %0, %struct.ichdev* %8)
  %10 = icmp slt i32 %9, 0
  br i1 %10, label %65, label %11

; <label>:11:                                     ; preds = %1
  %12 = getelementptr inbounds %struct.intel8x0, %struct.intel8x0* %4, i32 0, i32 9
  %13 = load i16, i16* %12, align 8
  %14 = lshr i16 %13, 2
  %15 = and i16 %14, 1
  %16 = zext i16 %15 to i32
  %17 = icmp ne i32 %16, 0
  br i1 %17, label %18, label %22

; <label>:18:                                     ; preds = %11
  %19 = getelementptr inbounds %struct.snd_pcm_runtime, %struct.snd_pcm_runtime* %6, i32 0, i32 43
  %20 = getelementptr inbounds %struct.snd_pcm_hardware, %struct.snd_pcm_hardware* %19, i32 0, i32 6
  store i32 8, i32* %20, align 8
  %21 = call i32 @snd_pcm_hw_constraint_list(%struct.snd_pcm_runtime* %6, i32 0, i32 10, %struct.snd_pcm_hw_constraint_list* @hw_constraints_channels8)
  br label %43

; <label>:22:                                     ; preds = %11
  %23 = getelementptr inbounds %struct.intel8x0, %struct.intel8x0* %4, i32 0, i32 9
  %24 = load i16, i16* %23, align 8
  %25 = lshr i16 %24, 1
  %26 = and i16 %25, 1
  %27 = zext i16 %26 to i32
  %28 = icmp ne i32 %27, 0
  br i1 %28, label %29, label %33

; <label>:29:                                     ; preds = %22
  %30 = getelementptr inbounds %struct.snd_pcm_runtime, %struct.snd_pcm_runtime* %6, i32 0, i32 43
  %31 = getelementptr inbounds %struct.snd_pcm_hardware, %struct.snd_pcm_hardware* %30, i32 0, i32 6
  store i32 6, i32* %31, align 8
  %32 = call i32 @snd_pcm_hw_constraint_list(%struct.snd_pcm_runtime* %6, i32 0, i32 10, %struct.snd_pcm_hw_constraint_list* @hw_constraints_channels6)
  br label %43

; <label>:33:                                     ; preds = %22
  %34 = getelementptr inbounds %struct.intel8x0, %struct.intel8x0* %4, i32 0, i32 9
  %35 = load i16, i16* %34, align 8
  %36 = and i16 %35, 1
  %37 = zext i16 %36 to i32
  %38 = icmp ne i32 %37, 0
  br i1 %38, label %39, label %43

; <label>:39:                                     ; preds = %33
  %40 = getelementptr inbounds %struct.snd_pcm_runtime, %struct.snd_pcm_runtime* %6, i32 0, i32 43
  %41 = getelementptr inbounds %struct.snd_pcm_hardware, %struct.snd_pcm_hardware* %40, i32 0, i32 6
  store i32 4, i32* %41, align 8
  %42 = call i32 @snd_pcm_hw_constraint_list(%struct.snd_pcm_runtime* %6, i32 0, i32 10, %struct.snd_pcm_hw_constraint_list* @hw_constraints_channels4)
  br label %43

; <label>:43:                                     ; preds = %29, %39, %33, %18
  %44 = getelementptr inbounds %struct.intel8x0, %struct.intel8x0* %4, i32 0, i32 9
  %45 = load i16, i16* %44, align 8
  %46 = lshr i16 %45, 3
  %47 = and i16 %46, 1
  %48 = zext i16 %47 to i32
  %49 = icmp ne i32 %48, 0
  br i1 %49, label %50, label %52

; <label>:50:                                     ; preds = %43
  %51 = call i32 @snd_ac97_pcm_double_rate_rules(%struct.snd_pcm_runtime* %6)
  br label %52

; <label>:52:                                     ; preds = %50, %43
  %53 = getelementptr inbounds %struct.intel8x0, %struct.intel8x0* %4, i32 0, i32 9
  %54 = load i16, i16* %53, align 8
  %55 = lshr i16 %54, 4
  %56 = and i16 %55, 1
  %57 = zext i16 %56 to i32
  %58 = icmp ne i32 %57, 0
  br i1 %58, label %59, label %65

; <label>:59:                                     ; preds = %52
  %60 = getelementptr inbounds %struct.snd_pcm_runtime, %struct.snd_pcm_runtime* %6, i32 0, i32 43
  %61 = getelementptr inbounds %struct.snd_pcm_hardware, %struct.snd_pcm_hardware* %60, i32 0, i32 1
  %62 = load i64, i64* %61, align 8
  %63 = or i64 %62, 1024
  store i64 %63, i64* %61, align 8
  %64 = call i32 @snd_pcm_hw_constraint_msbits(%struct.snd_pcm_runtime* %6, i32 0, i32 32, i32 20)
  br label %65

; <label>:65:                                     ; preds = %52, %59, %1
  %.0 = phi i32 [ %9, %1 ], [ 0, %59 ], [ 0, %52 ]
  ret i32 %.0
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @snd_intel8x0_playback_close(%struct.snd_pcm_substream*) #0 {
  %2 = getelementptr inbounds %struct.snd_pcm_substream, %struct.snd_pcm_substream* %0, i32 0, i32 2
  %3 = load i8*, i8** %2, align 8
  %4 = bitcast i8* %3 to %struct.intel8x0*
  %5 = getelementptr inbounds %struct.intel8x0, %struct.intel8x0* %4, i32 0, i32 8
  %6 = getelementptr inbounds [6 x %struct.ichdev], [6 x %struct.ichdev]* %5, i64 0, i64 1
  %7 = getelementptr inbounds %struct.ichdev, %struct.ichdev* %6, i32 0, i32 4
  store %struct.snd_pcm_substream* null, %struct.snd_pcm_substream** %7, align 8
  ret i32 0
}

declare i32 @snd_pcm_lib_ioctl(%struct.snd_pcm_substream*, i32, i8*) #1

; Function Attrs: noinline nounwind uwtable
define internal i32 @snd_intel8x0_hw_params(%struct.snd_pcm_substream*, %struct.snd_pcm_hw_params*) #0 {
  %3 = getelementptr inbounds %struct.snd_pcm_substream, %struct.snd_pcm_substream* %0, i32 0, i32 2
  %4 = load i8*, i8** %3, align 8
  %5 = bitcast i8* %4 to %struct.intel8x0*
  %6 = getelementptr inbounds %struct.snd_pcm_substream, %struct.snd_pcm_substream* %0, i32 0, i32 12
  %7 = load %struct.snd_pcm_runtime*, %struct.snd_pcm_runtime** %6, align 8
  %8 = getelementptr inbounds %struct.snd_pcm_runtime, %struct.snd_pcm_runtime* %7, i32 0, i32 41
  %9 = load i8*, i8** %8, align 8
  %10 = bitcast i8* %9 to %struct.ichdev*
  %11 = getelementptr inbounds %struct.snd_pcm_substream, %struct.snd_pcm_substream* %0, i32 0, i32 12
  %12 = load %struct.snd_pcm_runtime*, %struct.snd_pcm_runtime** %11, align 8
  %13 = call %struct.snd_interval* @hw_param_interval(%struct.snd_pcm_hw_params* %1, i32 11)
  %14 = getelementptr inbounds %struct.snd_interval, %struct.snd_interval* %13, i32 0, i32 0
  %15 = load i32, i32* %14, align 4
  %16 = icmp ugt i32 %15, 48000
  %17 = zext i1 %16 to i32
  %18 = getelementptr inbounds %struct.intel8x0, %struct.intel8x0* %5, i32 0, i32 9
  %19 = load i16, i16* %18, align 8
  %20 = lshr i16 %19, 8
  %21 = and i16 %20, 1
  %22 = zext i16 %21 to i32
  %23 = icmp ne i32 %22, 0
  br i1 %23, label %24, label %34

; <label>:24:                                     ; preds = %2
  %25 = getelementptr inbounds %struct.ichdev, %struct.ichdev* %10, i32 0, i32 25
  %26 = load i8, i8* %25, align 4
  %27 = and i8 %26, 1
  %28 = zext i8 %27 to i32
  %29 = icmp ne i32 %28, 0
  br i1 %29, label %30, label %34

; <label>:30:                                     ; preds = %24
  %31 = getelementptr inbounds %struct.ichdev, %struct.ichdev* %10, i32 0, i32 25
  %32 = load i8, i8* %31, align 4
  %33 = and i8 %32, -2
  store i8 %33, i8* %31, align 4
  br label %34

; <label>:34:                                     ; preds = %30, %24, %2
  %35 = call %struct.snd_interval* @hw_param_interval(%struct.snd_pcm_hw_params* %1, i32 18)
  %36 = getelementptr inbounds %struct.snd_interval, %struct.snd_interval* %35, i32 0, i32 0
  %37 = load i32, i32* %36, align 4
  %38 = zext i32 %37 to i64
  %39 = call i32 @snd_pcm_lib_malloc_pages(%struct.snd_pcm_substream* %0, i64 %38)
  %40 = icmp slt i32 %39, 0
  br i1 %40, label %111, label %41

; <label>:41:                                     ; preds = %34
  %42 = getelementptr inbounds %struct.intel8x0, %struct.intel8x0* %5, i32 0, i32 9
  %43 = load i16, i16* %42, align 8
  %44 = lshr i16 %43, 8
  %45 = and i16 %44, 1
  %46 = zext i16 %45 to i32
  %47 = icmp ne i32 %46, 0
  br i1 %47, label %48, label %63

; <label>:48:                                     ; preds = %41
  %49 = getelementptr inbounds %struct.snd_pcm_runtime, %struct.snd_pcm_runtime* %12, i32 0, i32 49
  %50 = load i8*, i8** %49, align 8
  %51 = icmp ne i8* %50, null
  br i1 %51, label %52, label %63

; <label>:52:                                     ; preds = %48
  %53 = getelementptr inbounds %struct.ichdev, %struct.ichdev* %10, i32 0, i32 25
  %54 = load i8, i8* %53, align 4
  %55 = and i8 %54, 1
  %56 = zext i8 %55 to i32
  %57 = icmp ne i32 %56, 0
  br i1 %57, label %63, label %58

; <label>:58:                                     ; preds = %52
  %59 = getelementptr inbounds %struct.ichdev, %struct.ichdev* %10, i32 0, i32 25
  %60 = load i8, i8* %59, align 4
  %61 = and i8 %60, -2
  %62 = or i8 %61, 1
  store i8 %62, i8* %59, align 4
  br label %63

; <label>:63:                                     ; preds = %48, %52, %58, %41
  %64 = getelementptr inbounds %struct.ichdev, %struct.ichdev* %10, i32 0, i32 24
  %65 = load i32, i32* %64, align 8
  %66 = icmp ne i32 %65, 0
  br i1 %66, label %67, label %72

; <label>:67:                                     ; preds = %63
  %68 = getelementptr inbounds %struct.ichdev, %struct.ichdev* %10, i32 0, i32 23
  %69 = load %struct.ac97_pcm*, %struct.ac97_pcm** %68, align 8
  %70 = call i32 @snd_ac97_pcm_close(%struct.ac97_pcm* %69)
  %71 = getelementptr inbounds %struct.ichdev, %struct.ichdev* %10, i32 0, i32 24
  store i32 0, i32* %71, align 8
  br label %72

; <label>:72:                                     ; preds = %67, %63
  %73 = getelementptr inbounds %struct.ichdev, %struct.ichdev* %10, i32 0, i32 23
  %74 = load %struct.ac97_pcm*, %struct.ac97_pcm** %73, align 8
  %75 = call %struct.snd_interval* @hw_param_interval(%struct.snd_pcm_hw_params* %1, i32 11)
  %76 = getelementptr inbounds %struct.snd_interval, %struct.snd_interval* %75, i32 0, i32 0
  %77 = load i32, i32* %76, align 4
  %78 = call %struct.snd_interval* @hw_param_interval(%struct.snd_pcm_hw_params* %1, i32 10)
  %79 = getelementptr inbounds %struct.snd_interval, %struct.snd_interval* %78, i32 0, i32 0
  %80 = load i32, i32* %79, align 4
  %81 = getelementptr inbounds %struct.ichdev, %struct.ichdev* %10, i32 0, i32 23
  %82 = load %struct.ac97_pcm*, %struct.ac97_pcm** %81, align 8
  %83 = getelementptr inbounds %struct.ac97_pcm, %struct.ac97_pcm* %82, i32 0, i32 5
  %84 = sext i32 %17 to i64
  %85 = getelementptr inbounds [2 x %struct.anon.37], [2 x %struct.anon.37]* %83, i64 0, i64 %84
  %86 = getelementptr inbounds %struct.anon.37, %struct.anon.37* %85, i32 0, i32 0
  %87 = load i16, i16* %86, align 8
  %88 = call i32 @snd_ac97_pcm_open(%struct.ac97_pcm* %74, i32 %77, i32 %80, i16 zeroext %87)
  %89 = icmp sge i32 %88, 0
  br i1 %89, label %90, label %111

; <label>:90:                                     ; preds = %72
  %91 = getelementptr inbounds %struct.ichdev, %struct.ichdev* %10, i32 0, i32 24
  store i32 1, i32* %91, align 8
  %92 = getelementptr inbounds %struct.ichdev, %struct.ichdev* %10, i32 0, i32 0
  %93 = load i32, i32* %92, align 8
  %94 = icmp eq i32 %93, 1
  br i1 %94, label %95, label %111

; <label>:95:                                     ; preds = %90
  %96 = getelementptr inbounds %struct.intel8x0, %struct.intel8x0* %5, i32 0, i32 10
  %97 = load i32, i32* %96, align 4
  %98 = icmp slt i32 %97, 0
  br i1 %98, label %99, label %111

; <label>:99:                                     ; preds = %95
  %100 = getelementptr inbounds %struct.ichdev, %struct.ichdev* %10, i32 0, i32 23
  %101 = load %struct.ac97_pcm*, %struct.ac97_pcm** %100, align 8
  %102 = getelementptr inbounds %struct.ac97_pcm, %struct.ac97_pcm* %101, i32 0, i32 5
  %103 = getelementptr inbounds [2 x %struct.anon.37], [2 x %struct.anon.37]* %102, i64 0, i64 0
  %104 = getelementptr inbounds %struct.anon.37, %struct.anon.37* %103, i32 0, i32 3
  %105 = getelementptr inbounds [4 x %struct.snd_ac97*], [4 x %struct.snd_ac97*]* %104, i64 0, i64 0
  %106 = load %struct.snd_ac97*, %struct.snd_ac97** %105, align 8
  %107 = call %struct.snd_interval* @hw_param_interval(%struct.snd_pcm_hw_params* %1, i32 11)
  %108 = getelementptr inbounds %struct.snd_interval, %struct.snd_interval* %107, i32 0, i32 0
  %109 = load i32, i32* %108, align 4
  %110 = call i32 @snd_ac97_set_rate(%struct.snd_ac97* %106, i32 58, i32 %109)
  br label %111

; <label>:111:                                    ; preds = %72, %99, %95, %90, %34
  %.0 = phi i32 [ %39, %34 ], [ %88, %90 ], [ %88, %95 ], [ %88, %99 ], [ %88, %72 ]
  ret i32 %.0
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @snd_intel8x0_hw_free(%struct.snd_pcm_substream*) #0 {
  %2 = getelementptr inbounds %struct.snd_pcm_substream, %struct.snd_pcm_substream* %0, i32 0, i32 2
  %3 = load i8*, i8** %2, align 8
  %4 = bitcast i8* %3 to %struct.intel8x0*
  %5 = getelementptr inbounds %struct.snd_pcm_substream, %struct.snd_pcm_substream* %0, i32 0, i32 12
  %6 = load %struct.snd_pcm_runtime*, %struct.snd_pcm_runtime** %5, align 8
  %7 = getelementptr inbounds %struct.snd_pcm_runtime, %struct.snd_pcm_runtime* %6, i32 0, i32 41
  %8 = load i8*, i8** %7, align 8
  %9 = bitcast i8* %8 to %struct.ichdev*
  %10 = getelementptr inbounds %struct.ichdev, %struct.ichdev* %9, i32 0, i32 24
  %11 = load i32, i32* %10, align 8
  %12 = icmp ne i32 %11, 0
  br i1 %12, label %13, label %18

; <label>:13:                                     ; preds = %1
  %14 = getelementptr inbounds %struct.ichdev, %struct.ichdev* %9, i32 0, i32 23
  %15 = load %struct.ac97_pcm*, %struct.ac97_pcm** %14, align 8
  %16 = call i32 @snd_ac97_pcm_close(%struct.ac97_pcm* %15)
  %17 = getelementptr inbounds %struct.ichdev, %struct.ichdev* %9, i32 0, i32 24
  store i32 0, i32* %17, align 8
  br label %18

; <label>:18:                                     ; preds = %13, %1
  %19 = getelementptr inbounds %struct.intel8x0, %struct.intel8x0* %4, i32 0, i32 9
  %20 = load i16, i16* %19, align 8
  %21 = lshr i16 %20, 8
  %22 = and i16 %21, 1
  %23 = zext i16 %22 to i32
  %24 = icmp ne i32 %23, 0
  br i1 %24, label %25, label %35

; <label>:25:                                     ; preds = %18
  %26 = getelementptr inbounds %struct.ichdev, %struct.ichdev* %9, i32 0, i32 25
  %27 = load i8, i8* %26, align 4
  %28 = and i8 %27, 1
  %29 = zext i8 %28 to i32
  %30 = icmp ne i32 %29, 0
  br i1 %30, label %31, label %35

; <label>:31:                                     ; preds = %25
  %32 = getelementptr inbounds %struct.ichdev, %struct.ichdev* %9, i32 0, i32 25
  %33 = load i8, i8* %32, align 4
  %34 = and i8 %33, -2
  store i8 %34, i8* %32, align 4
  br label %35

; <label>:35:                                     ; preds = %31, %25, %18
  %36 = call i32 @snd_pcm_lib_free_pages(%struct.snd_pcm_substream* %0)
  ret i32 %36
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @snd_intel8x0_pcm_prepare(%struct.snd_pcm_substream*) #0 {
  %2 = getelementptr inbounds %struct.snd_pcm_substream, %struct.snd_pcm_substream* %0, i32 0, i32 2
  %3 = load i8*, i8** %2, align 8
  %4 = bitcast i8* %3 to %struct.intel8x0*
  %5 = getelementptr inbounds %struct.snd_pcm_substream, %struct.snd_pcm_substream* %0, i32 0, i32 12
  %6 = load %struct.snd_pcm_runtime*, %struct.snd_pcm_runtime** %5, align 8
  %7 = getelementptr inbounds %struct.snd_pcm_substream, %struct.snd_pcm_substream* %0, i32 0, i32 12
  %8 = load %struct.snd_pcm_runtime*, %struct.snd_pcm_runtime** %7, align 8
  %9 = getelementptr inbounds %struct.snd_pcm_runtime, %struct.snd_pcm_runtime* %8, i32 0, i32 41
  %10 = load i8*, i8** %9, align 8
  %11 = bitcast i8* %10 to %struct.ichdev*
  %12 = getelementptr inbounds %struct.snd_pcm_runtime, %struct.snd_pcm_runtime* %6, i32 0, i32 50
  %13 = load i64, i64* %12, align 8
  %14 = trunc i64 %13 to i32
  %15 = getelementptr inbounds %struct.ichdev, %struct.ichdev* %11, i32 0, i32 5
  store i32 %14, i32* %15, align 8
  %16 = call i64 @snd_pcm_lib_buffer_bytes(%struct.snd_pcm_substream* %0)
  %17 = trunc i64 %16 to i32
  %18 = getelementptr inbounds %struct.ichdev, %struct.ichdev* %11, i32 0, i32 6
  store i32 %17, i32* %18, align 4
  %19 = call i64 @snd_pcm_lib_period_bytes(%struct.snd_pcm_substream* %0)
  %20 = trunc i64 %19 to i32
  %21 = getelementptr inbounds %struct.ichdev, %struct.ichdev* %11, i32 0, i32 7
  store i32 %20, i32* %21, align 8
  %22 = getelementptr inbounds %struct.ichdev, %struct.ichdev* %11, i32 0, i32 0
  %23 = load i32, i32* %22, align 8
  %24 = icmp eq i32 %23, 1
  br i1 %24, label %25, label %35

; <label>:25:                                     ; preds = %1
  call void @snd_intel8x0_setup_pcm_out(%struct.intel8x0* %4, %struct.snd_pcm_runtime* %6)
  %26 = getelementptr inbounds %struct.intel8x0, %struct.intel8x0* %4, i32 0, i32 0
  %27 = load i32, i32* %26, align 8
  %28 = icmp eq i32 %27, 1
  br i1 %28, label %29, label %35

; <label>:29:                                     ; preds = %25
  %30 = getelementptr inbounds %struct.snd_pcm_runtime, %struct.snd_pcm_runtime* %6, i32 0, i32 20
  %31 = load i32, i32* %30, align 4
  %32 = icmp ugt i32 %31, 16
  %33 = select i1 %32, i32 2, i32 1
  %34 = getelementptr inbounds %struct.ichdev, %struct.ichdev* %11, i32 0, i32 10
  store i32 %33, i32* %34, align 4
  br label %35

; <label>:35:                                     ; preds = %25, %29, %1
  call void @snd_intel8x0_setup_periods(%struct.intel8x0* %4, %struct.ichdev* %11)
  ret i32 0
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @snd_intel8x0_pcm_trigger(%struct.snd_pcm_substream*, i32) #0 {
  %3 = getelementptr inbounds %struct.snd_pcm_substream, %struct.snd_pcm_substream* %0, i32 0, i32 2
  %4 = load i8*, i8** %3, align 8
  %5 = bitcast i8* %4 to %struct.intel8x0*
  %6 = getelementptr inbounds %struct.snd_pcm_substream, %struct.snd_pcm_substream* %0, i32 0, i32 12
  %7 = load %struct.snd_pcm_runtime*, %struct.snd_pcm_runtime** %6, align 8
  %8 = getelementptr inbounds %struct.snd_pcm_runtime, %struct.snd_pcm_runtime* %7, i32 0, i32 41
  %9 = load i8*, i8** %8, align 8
  %10 = bitcast i8* %9 to %struct.ichdev*
  %11 = getelementptr inbounds %struct.ichdev, %struct.ichdev* %10, i32 0, i32 1
  %12 = load i64, i64* %11, align 8
  switch i32 %1, label %45 [
    i32 6, label %13
    i32 1, label %17
    i32 4, label %17
    i32 5, label %21
    i32 0, label %27
    i32 3, label %26
  ]

; <label>:13:                                     ; preds = %2
  %14 = getelementptr inbounds %struct.ichdev, %struct.ichdev* %10, i32 0, i32 25
  %15 = load i8, i8* %14, align 4
  %16 = and i8 %15, -3
  store i8 %16, i8* %14, align 4
  br label %17

; <label>:17:                                     ; preds = %13, %2, %2
  %18 = getelementptr inbounds %struct.ichdev, %struct.ichdev* %10, i32 0, i32 9
  %19 = load i32, i32* %18, align 8
  %20 = getelementptr inbounds %struct.ichdev, %struct.ichdev* %10, i32 0, i32 11
  store i32 %19, i32* %20, align 8
  br label %27

; <label>:21:                                     ; preds = %2
  %22 = getelementptr inbounds %struct.ichdev, %struct.ichdev* %10, i32 0, i32 25
  %23 = load i8, i8* %22, align 4
  %24 = and i8 %23, -3
  %25 = or i8 %24, 2
  store i8 %25, i8* %22, align 4
  br label %27

; <label>:26:                                     ; preds = %2
  br label %27

; <label>:27:                                     ; preds = %2, %21, %26, %17
  %.01 = phi i8 [ 16, %26 ], [ 17, %17 ], [ 0, %21 ], [ 0, %2 ]
  %28 = add i64 %12, 11
  %29 = trunc i64 %28 to i32
  call void @iputbyte(%struct.intel8x0* %5, i32 %29, i8 zeroext %.01)
  %30 = icmp eq i32 %1, 0
  br i1 %30, label %31, label %45

; <label>:31:                                     ; preds = %31, %27
  %32 = getelementptr inbounds %struct.ichdev, %struct.ichdev* %10, i32 0, i32 19
  %33 = load i32, i32* %32, align 8
  %34 = zext i32 %33 to i64
  %35 = add i64 %12, %34
  %36 = trunc i64 %35 to i32
  %37 = call zeroext i8 @igetbyte(%struct.intel8x0* %5, i32 %36)
  %38 = zext i8 %37 to i32
  %39 = and i32 %38, 1
  %40 = icmp ne i32 %39, 0
  %41 = xor i1 %40, true
  br i1 %41, label %31, label %42

; <label>:42:                                     ; preds = %31
  %43 = add i64 %12, 11
  %44 = trunc i64 %43 to i32
  call void @iputbyte(%struct.intel8x0* %5, i32 %44, i8 zeroext 2)
  br label %45

; <label>:45:                                     ; preds = %27, %42, %2
  %.0 = phi i32 [ -22, %2 ], [ 0, %42 ], [ 0, %27 ]
  ret i32 %.0
}

; Function Attrs: noinline nounwind uwtable
define internal i64 @snd_intel8x0_pcm_pointer(%struct.snd_pcm_substream*) #0 {
  %2 = getelementptr inbounds %struct.snd_pcm_substream, %struct.snd_pcm_substream* %0, i32 0, i32 2
  %3 = load i8*, i8** %2, align 8
  %4 = bitcast i8* %3 to %struct.intel8x0*
  %5 = getelementptr inbounds %struct.snd_pcm_substream, %struct.snd_pcm_substream* %0, i32 0, i32 12
  %6 = load %struct.snd_pcm_runtime*, %struct.snd_pcm_runtime** %5, align 8
  %7 = getelementptr inbounds %struct.snd_pcm_runtime, %struct.snd_pcm_runtime* %6, i32 0, i32 41
  %8 = load i8*, i8** %7, align 8
  %9 = bitcast i8* %8 to %struct.ichdev*
  %10 = getelementptr inbounds %struct.intel8x0, %struct.intel8x0* %4, i32 0, i32 20
  call void @spin_lock(%struct.spinlock* %10)
  br label %11

; <label>:11:                                     ; preds = %50, %1
  %.01 = phi i32 [ 10, %1 ], [ %51, %50 ]
  %12 = getelementptr inbounds %struct.ichdev, %struct.ichdev* %9, i32 0, i32 1
  %13 = load i64, i64* %12, align 8
  %14 = add i64 %13, 4
  %15 = trunc i64 %14 to i32
  %16 = call zeroext i8 @igetbyte(%struct.intel8x0* %4, i32 %15)
  %17 = zext i8 %16 to i32
  %18 = getelementptr inbounds %struct.ichdev, %struct.ichdev* %9, i32 0, i32 1
  %19 = load i64, i64* %18, align 8
  %20 = getelementptr inbounds %struct.ichdev, %struct.ichdev* %9, i32 0, i32 20
  %21 = load i32, i32* %20, align 4
  %22 = zext i32 %21 to i64
  %23 = add i64 %19, %22
  %24 = trunc i64 %23 to i32
  %25 = call zeroext i16 @igetword(%struct.intel8x0* %4, i32 %24)
  %26 = zext i16 %25 to i64
  %27 = getelementptr inbounds %struct.ichdev, %struct.ichdev* %9, i32 0, i32 9
  %28 = load i32, i32* %27, align 8
  %29 = icmp eq i64 %26, 0
  br i1 %29, label %30, label %31

; <label>:30:                                     ; preds = %11
  call void @__const_udelay(i64 42950)
  br label %50

; <label>:31:                                     ; preds = %11
  %32 = getelementptr inbounds %struct.ichdev, %struct.ichdev* %9, i32 0, i32 1
  %33 = load i64, i64* %32, align 8
  %34 = add i64 %33, 4
  %35 = trunc i64 %34 to i32
  %36 = call zeroext i8 @igetbyte(%struct.intel8x0* %4, i32 %35)
  %37 = zext i8 %36 to i32
  %38 = icmp eq i32 %17, %37
  br i1 %38, label %39, label %50

; <label>:39:                                     ; preds = %31
  %40 = getelementptr inbounds %struct.ichdev, %struct.ichdev* %9, i32 0, i32 1
  %41 = load i64, i64* %40, align 8
  %42 = getelementptr inbounds %struct.ichdev, %struct.ichdev* %9, i32 0, i32 20
  %43 = load i32, i32* %42, align 4
  %44 = zext i32 %43 to i64
  %45 = add i64 %41, %44
  %46 = trunc i64 %45 to i32
  %47 = call zeroext i16 @igetword(%struct.intel8x0* %4, i32 %46)
  %48 = zext i16 %47 to i64
  %49 = icmp eq i64 %26, %48
  br i1 %49, label %.loopexit, label %50

; <label>:50:                                     ; preds = %31, %39, %30
  %51 = add nsw i32 %.01, -1
  %52 = icmp ne i32 %.01, 0
  br i1 %52, label %11, label %.loopexit

.loopexit:                                        ; preds = %50, %39
  %53 = getelementptr inbounds %struct.ichdev, %struct.ichdev* %9, i32 0, i32 11
  %54 = load i32, i32* %53, align 8
  %55 = zext i32 %54 to i64
  %56 = icmp ne i64 %26, 0
  br i1 %56, label %57, label %86

; <label>:57:                                     ; preds = %.loopexit
  %58 = getelementptr inbounds %struct.ichdev, %struct.ichdev* %9, i32 0, i32 10
  %59 = load i32, i32* %58, align 4
  %60 = zext i32 %59 to i64
  %61 = shl i64 %26, %60
  %62 = getelementptr inbounds %struct.ichdev, %struct.ichdev* %9, i32 0, i32 8
  %63 = load i32, i32* %62, align 4
  %64 = zext i32 %63 to i64
  %65 = sub i64 %64, %61
  %66 = zext i32 %28 to i64
  %67 = add i64 %65, %66
  %68 = getelementptr inbounds %struct.ichdev, %struct.ichdev* %9, i32 0, i32 11
  %69 = load i32, i32* %68, align 8
  %70 = zext i32 %69 to i64
  %71 = icmp ult i64 %67, %70
  br i1 %71, label %72, label %86

; <label>:72:                                     ; preds = %57
  %73 = getelementptr inbounds %struct.ichdev, %struct.ichdev* %9, i32 0, i32 8
  %74 = load i32, i32* %73, align 4
  %75 = udiv i32 %28, %74
  %76 = getelementptr inbounds %struct.ichdev, %struct.ichdev* %9, i32 0, i32 11
  %77 = load i32, i32* %76, align 8
  %78 = getelementptr inbounds %struct.ichdev, %struct.ichdev* %9, i32 0, i32 8
  %79 = load i32, i32* %78, align 4
  %80 = udiv i32 %77, %79
  %81 = icmp eq i32 %75, %80
  br i1 %81, label %82, label %86

; <label>:82:                                     ; preds = %72
  %83 = getelementptr inbounds %struct.ichdev, %struct.ichdev* %9, i32 0, i32 11
  %84 = load i32, i32* %83, align 8
  %85 = zext i32 %84 to i64
  br label %86

; <label>:86:                                     ; preds = %57, %82, %72, %.loopexit
  %.2 = phi i64 [ %55, %.loopexit ], [ %67, %57 ], [ %85, %82 ], [ %67, %72 ]
  %87 = trunc i64 %.2 to i32
  %88 = getelementptr inbounds %struct.ichdev, %struct.ichdev* %9, i32 0, i32 11
  store i32 %87, i32* %88, align 8
  %89 = getelementptr inbounds %struct.intel8x0, %struct.intel8x0* %4, i32 0, i32 20
  call void @spin_unlock(%struct.spinlock* %89)
  %90 = getelementptr inbounds %struct.ichdev, %struct.ichdev* %9, i32 0, i32 6
  %91 = load i32, i32* %90, align 4
  %92 = zext i32 %91 to i64
  %93 = icmp uge i64 %.2, %92
  br i1 %93, label %98, label %94

; <label>:94:                                     ; preds = %86
  %95 = getelementptr inbounds %struct.snd_pcm_substream, %struct.snd_pcm_substream* %0, i32 0, i32 12
  %96 = load %struct.snd_pcm_runtime*, %struct.snd_pcm_runtime** %95, align 8
  %97 = call i64 @bytes_to_frames(%struct.snd_pcm_runtime* %96, i64 %.2)
  br label %98

; <label>:98:                                     ; preds = %86, %94
  %.0 = phi i64 [ %97, %94 ], [ 0, %86 ]
  ret i64 %.0
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @snd_intel8x0_pcm_open(%struct.snd_pcm_substream*, %struct.ichdev*) #0 {
  %3 = getelementptr inbounds %struct.snd_pcm_substream, %struct.snd_pcm_substream* %0, i32 0, i32 2
  %4 = load i8*, i8** %3, align 8
  %5 = bitcast i8* %4 to %struct.intel8x0*
  %6 = getelementptr inbounds %struct.snd_pcm_substream, %struct.snd_pcm_substream* %0, i32 0, i32 12
  %7 = load %struct.snd_pcm_runtime*, %struct.snd_pcm_runtime** %6, align 8
  %8 = getelementptr inbounds %struct.ichdev, %struct.ichdev* %1, i32 0, i32 4
  store %struct.snd_pcm_substream* %0, %struct.snd_pcm_substream** %8, align 8
  %9 = getelementptr inbounds %struct.snd_pcm_runtime, %struct.snd_pcm_runtime* %7, i32 0, i32 43
  %10 = bitcast %struct.snd_pcm_hardware* %9 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %10, i8* bitcast (%struct.snd_pcm_hardware* @snd_intel8x0_stream to i8*), i64 80, i32 8, i1 false)
  %11 = getelementptr inbounds %struct.ichdev, %struct.ichdev* %1, i32 0, i32 23
  %12 = load %struct.ac97_pcm*, %struct.ac97_pcm** %11, align 8
  %13 = getelementptr inbounds %struct.ac97_pcm, %struct.ac97_pcm* %12, i32 0, i32 4
  %14 = load i32, i32* %13, align 8
  %15 = getelementptr inbounds %struct.snd_pcm_runtime, %struct.snd_pcm_runtime* %7, i32 0, i32 43
  %16 = getelementptr inbounds %struct.snd_pcm_hardware, %struct.snd_pcm_hardware* %15, i32 0, i32 2
  store i32 %14, i32* %16, align 8
  %17 = call i32 @snd_pcm_limit_hw_rates(%struct.snd_pcm_runtime* %7)
  %18 = getelementptr inbounds %struct.intel8x0, %struct.intel8x0* %5, i32 0, i32 0
  %19 = load i32, i32* %18, align 8
  %20 = icmp eq i32 %19, 2
  br i1 %20, label %21, label %26

; <label>:21:                                     ; preds = %2
  %22 = getelementptr inbounds %struct.snd_pcm_runtime, %struct.snd_pcm_runtime* %7, i32 0, i32 43
  %23 = getelementptr inbounds %struct.snd_pcm_hardware, %struct.snd_pcm_hardware* %22, i32 0, i32 7
  store i64 65536, i64* %23, align 8
  %24 = getelementptr inbounds %struct.snd_pcm_runtime, %struct.snd_pcm_runtime* %7, i32 0, i32 43
  %25 = getelementptr inbounds %struct.snd_pcm_hardware, %struct.snd_pcm_hardware* %24, i32 0, i32 9
  store i64 65536, i64* %25, align 8
  br label %26

; <label>:26:                                     ; preds = %21, %2
  %27 = call i32 @snd_pcm_hw_constraint_integer(%struct.snd_pcm_runtime* %7, i32 15)
  %28 = icmp slt i32 %27, 0
  br i1 %28, label %32, label %29

; <label>:29:                                     ; preds = %26
  %30 = bitcast %struct.ichdev* %1 to i8*
  %31 = getelementptr inbounds %struct.snd_pcm_runtime, %struct.snd_pcm_runtime* %7, i32 0, i32 41
  store i8* %30, i8** %31, align 8
  br label %32

; <label>:32:                                     ; preds = %26, %29
  %.0 = phi i32 [ 0, %29 ], [ %27, %26 ]
  ret i32 %.0
}

declare i32 @snd_pcm_hw_constraint_list(%struct.snd_pcm_runtime*, i32, i32, %struct.snd_pcm_hw_constraint_list*) #1

declare i32 @snd_ac97_pcm_double_rate_rules(%struct.snd_pcm_runtime*) #1

declare i32 @snd_pcm_hw_constraint_msbits(%struct.snd_pcm_runtime*, i32, i32, i32) #1

declare i32 @snd_pcm_limit_hw_rates(%struct.snd_pcm_runtime*) #1

declare i32 @snd_pcm_hw_constraint_integer(%struct.snd_pcm_runtime*, i32) #1

; Function Attrs: noinline nounwind uwtable
define internal %struct.snd_interval* @hw_param_interval(%struct.snd_pcm_hw_params*, i32) #0 {
  %3 = getelementptr inbounds %struct.snd_pcm_hw_params, %struct.snd_pcm_hw_params* %0, i32 0, i32 3
  %4 = sub nsw i32 %1, 8
  %5 = sext i32 %4 to i64
  %6 = getelementptr inbounds [12 x %struct.snd_interval], [12 x %struct.snd_interval]* %3, i64 0, i64 %5
  ret %struct.snd_interval* %6
}

declare i32 @snd_pcm_lib_malloc_pages(%struct.snd_pcm_substream*, i64) #1

declare i32 @snd_ac97_pcm_close(%struct.ac97_pcm*) #1

declare i32 @snd_ac97_pcm_open(%struct.ac97_pcm*, i32, i32, i16 zeroext) #1

declare i32 @snd_ac97_set_rate(%struct.snd_ac97*, i32, i32) #1

declare i32 @snd_pcm_lib_free_pages(%struct.snd_pcm_substream*) #1

; Function Attrs: noinline nounwind uwtable
define internal i64 @snd_pcm_lib_buffer_bytes(%struct.snd_pcm_substream*) #0 {
  %2 = getelementptr inbounds %struct.snd_pcm_substream, %struct.snd_pcm_substream* %0, i32 0, i32 12
  %3 = load %struct.snd_pcm_runtime*, %struct.snd_pcm_runtime** %2, align 8
  %4 = getelementptr inbounds %struct.snd_pcm_runtime, %struct.snd_pcm_runtime* %3, i32 0, i32 16
  %5 = load i64, i64* %4, align 8
  %6 = call i64 @frames_to_bytes(%struct.snd_pcm_runtime* %3, i64 %5)
  ret i64 %6
}

; Function Attrs: noinline nounwind uwtable
define internal i64 @snd_pcm_lib_period_bytes(%struct.snd_pcm_substream*) #0 {
  %2 = getelementptr inbounds %struct.snd_pcm_substream, %struct.snd_pcm_substream* %0, i32 0, i32 12
  %3 = load %struct.snd_pcm_runtime*, %struct.snd_pcm_runtime** %2, align 8
  %4 = getelementptr inbounds %struct.snd_pcm_runtime, %struct.snd_pcm_runtime* %3, i32 0, i32 14
  %5 = load i64, i64* %4, align 8
  %6 = call i64 @frames_to_bytes(%struct.snd_pcm_runtime* %3, i64 %5)
  ret i64 %6
}

; Function Attrs: noinline nounwind uwtable
define internal void @snd_intel8x0_setup_pcm_out(%struct.intel8x0*, %struct.snd_pcm_runtime*) #0 {
  %3 = getelementptr inbounds %struct.snd_pcm_runtime, %struct.snd_pcm_runtime* %1, i32 0, i32 12
  %4 = load i32, i32* %3, align 4
  %5 = icmp ugt i32 %4, 48000
  %6 = zext i1 %5 to i32
  %7 = getelementptr inbounds %struct.intel8x0, %struct.intel8x0* %0, i32 0, i32 20
  call void @spin_lock_irq(%struct.spinlock* %7)
  %8 = getelementptr inbounds %struct.intel8x0, %struct.intel8x0* %0, i32 0, i32 0
  %9 = load i32, i32* %8, align 8
  switch i32 %9, label %40 [
    i32 3, label %10
    i32 2, label %25
  ]

; <label>:10:                                     ; preds = %2
  %11 = call i32 @igetdword(%struct.intel8x0* %0, i32 0)
  %12 = and i32 %11, -769
  %13 = getelementptr inbounds %struct.snd_pcm_runtime, %struct.snd_pcm_runtime* %1, i32 0, i32 13
  %14 = load i32, i32* %13, align 8
  %15 = icmp eq i32 %14, 4
  %16 = icmp ne i32 %6, 0
  %or.cond = or i1 %15, %16
  br i1 %or.cond, label %17, label %19

; <label>:17:                                     ; preds = %10
  %18 = or i32 %12, 256
  br label %24

; <label>:19:                                     ; preds = %10
  %20 = getelementptr inbounds %struct.snd_pcm_runtime, %struct.snd_pcm_runtime* %1, i32 0, i32 13
  %21 = load i32, i32* %20, align 8
  %22 = icmp eq i32 %21, 6
  %23 = or i32 %12, 512
  %. = select i1 %22, i32 %23, i32 %12
  br label %24

; <label>:24:                                     ; preds = %19, %17
  %.1 = phi i32 [ %18, %17 ], [ %., %19 ]
  call void @iputdword(%struct.intel8x0* %0, i32 0, i32 %.1)
  br label %81

; <label>:25:                                     ; preds = %2
  %26 = call i32 @igetdword(%struct.intel8x0* %0, i32 44)
  %27 = and i32 %26, -193
  %28 = getelementptr inbounds %struct.snd_pcm_runtime, %struct.snd_pcm_runtime* %1, i32 0, i32 13
  %29 = load i32, i32* %28, align 8
  %30 = icmp eq i32 %29, 4
  %31 = icmp ne i32 %6, 0
  %or.cond1 = or i1 %30, %31
  br i1 %or.cond1, label %32, label %34

; <label>:32:                                     ; preds = %25
  %33 = or i32 %27, 64
  br label %39

; <label>:34:                                     ; preds = %25
  %35 = getelementptr inbounds %struct.snd_pcm_runtime, %struct.snd_pcm_runtime* %1, i32 0, i32 13
  %36 = load i32, i32* %35, align 8
  %37 = icmp eq i32 %36, 6
  %38 = or i32 %27, 128
  %.10 = select i1 %37, i32 %38, i32 %27
  br label %39

; <label>:39:                                     ; preds = %34, %32
  %.3 = phi i32 [ %33, %32 ], [ %.10, %34 ]
  call void @iputdword(%struct.intel8x0* %0, i32 44, i32 %.3)
  br label %81

; <label>:40:                                     ; preds = %2
  %41 = call i32 @igetdword(%struct.intel8x0* %0, i32 44)
  %42 = and i32 %41, -7340033
  %43 = getelementptr inbounds %struct.snd_pcm_runtime, %struct.snd_pcm_runtime* %1, i32 0, i32 13
  %44 = load i32, i32* %43, align 8
  %45 = icmp eq i32 %44, 4
  %46 = icmp ne i32 %6, 0
  %or.cond11 = or i1 %45, %46
  br i1 %or.cond11, label %47, label %49

; <label>:47:                                     ; preds = %40
  %48 = or i32 %42, 1048576
  br label %60

; <label>:49:                                     ; preds = %40
  %50 = getelementptr inbounds %struct.snd_pcm_runtime, %struct.snd_pcm_runtime* %1, i32 0, i32 13
  %51 = load i32, i32* %50, align 8
  %52 = icmp eq i32 %51, 6
  br i1 %52, label %53, label %55

; <label>:53:                                     ; preds = %49
  %54 = or i32 %42, 2097152
  br label %60

; <label>:55:                                     ; preds = %49
  %56 = getelementptr inbounds %struct.snd_pcm_runtime, %struct.snd_pcm_runtime* %1, i32 0, i32 13
  %57 = load i32, i32* %56, align 8
  %58 = icmp eq i32 %57, 8
  %59 = or i32 %42, 3145728
  %.12 = select i1 %58, i32 %59, i32 %42
  br label %60

; <label>:60:                                     ; preds = %53, %55, %47
  %.6 = phi i32 [ %48, %47 ], [ %54, %53 ], [ %.12, %55 ]
  %61 = getelementptr inbounds %struct.intel8x0, %struct.intel8x0* %0, i32 0, i32 0
  %62 = load i32, i32* %61, align 8
  %63 = icmp eq i32 %62, 4
  br i1 %63, label %64, label %71

; <label>:64:                                     ; preds = %60
  %65 = and i32 %.6, 3145728
  %66 = icmp ne i32 %65, 0
  br i1 %66, label %67, label %80

; <label>:67:                                     ; preds = %64
  %68 = and i32 %.6, -3145729
  call void @iputdword(%struct.intel8x0* %0, i32 44, i32 %68)
  %69 = getelementptr inbounds %struct.intel8x0, %struct.intel8x0* %0, i32 0, i32 20
  call void @spin_unlock_irq(%struct.spinlock* %69)
  call void @msleep(i32 50)
  %70 = getelementptr inbounds %struct.intel8x0, %struct.intel8x0* %0, i32 0, i32 20
  call void @spin_lock_irq(%struct.spinlock* %70)
  br label %80

; <label>:71:                                     ; preds = %60
  %72 = getelementptr inbounds %struct.intel8x0, %struct.intel8x0* %0, i32 0, i32 0
  %73 = load i32, i32* %72, align 8
  %74 = icmp eq i32 %73, 1
  br i1 %74, label %75, label %80

; <label>:75:                                     ; preds = %71
  %76 = getelementptr inbounds %struct.snd_pcm_runtime, %struct.snd_pcm_runtime* %1, i32 0, i32 20
  %77 = load i32, i32* %76, align 4
  %78 = icmp ugt i32 %77, 16
  %79 = or i32 %.6, 4194304
  %..6 = select i1 %78, i32 %79, i32 %.6
  br label %80

; <label>:80:                                     ; preds = %71, %75, %64, %67
  %.9 = phi i32 [ %.6, %67 ], [ %.6, %64 ], [ %..6, %75 ], [ %.6, %71 ]
  call void @iputdword(%struct.intel8x0* %0, i32 44, i32 %.9)
  br label %81

; <label>:81:                                     ; preds = %80, %39, %24
  %82 = getelementptr inbounds %struct.intel8x0, %struct.intel8x0* %0, i32 0, i32 20
  call void @spin_unlock_irq(%struct.spinlock* %82)
  ret void
}

; Function Attrs: noinline nounwind uwtable
define internal void @snd_intel8x0_setup_periods(%struct.intel8x0*, %struct.ichdev*) #0 {
  %3 = getelementptr inbounds %struct.ichdev, %struct.ichdev* %1, i32 0, i32 2
  %4 = load i32*, i32** %3, align 8
  %5 = getelementptr inbounds %struct.ichdev, %struct.ichdev* %1, i32 0, i32 1
  %6 = load i64, i64* %5, align 8
  %7 = add i64 %6, 0
  %8 = trunc i64 %7 to i32
  %9 = getelementptr inbounds %struct.ichdev, %struct.ichdev* %1, i32 0, i32 3
  %10 = load i32, i32* %9, align 8
  call void @iputdword(%struct.intel8x0* %0, i32 %8, i32 %10)
  %11 = getelementptr inbounds %struct.ichdev, %struct.ichdev* %1, i32 0, i32 6
  %12 = load i32, i32* %11, align 4
  %13 = getelementptr inbounds %struct.ichdev, %struct.ichdev* %1, i32 0, i32 7
  %14 = load i32, i32* %13, align 8
  %15 = icmp eq i32 %12, %14
  %16 = getelementptr inbounds %struct.ichdev, %struct.ichdev* %1, i32 0, i32 16
  br i1 %15, label %17, label %59

; <label>:17:                                     ; preds = %2
  store i32 2, i32* %16, align 4
  %18 = getelementptr inbounds %struct.ichdev, %struct.ichdev* %1, i32 0, i32 17
  store i32 2, i32* %18, align 8
  %19 = getelementptr inbounds %struct.ichdev, %struct.ichdev* %1, i32 0, i32 7
  %20 = load i32, i32* %19, align 8
  %21 = lshr i32 %20, 1
  %22 = getelementptr inbounds %struct.ichdev, %struct.ichdev* %1, i32 0, i32 8
  store i32 %21, i32* %22, align 4
  br label %23

; <label>:23:                                     ; preds = %25, %17
  %.0 = phi i32 [ 0, %17 ], [ %58, %25 ]
  %24 = icmp slt i32 %.0, 64
  br i1 %24, label %25, label %96

; <label>:25:                                     ; preds = %23
  %26 = getelementptr inbounds %struct.ichdev, %struct.ichdev* %1, i32 0, i32 5
  %27 = load i32, i32* %26, align 8
  %28 = add nsw i32 %.0, 0
  %29 = sext i32 %28 to i64
  %30 = getelementptr inbounds i32, i32* %4, i64 %29
  store i32 %27, i32* %30, align 4
  %31 = getelementptr inbounds %struct.ichdev, %struct.ichdev* %1, i32 0, i32 8
  %32 = load i32, i32* %31, align 4
  %33 = getelementptr inbounds %struct.ichdev, %struct.ichdev* %1, i32 0, i32 10
  %34 = load i32, i32* %33, align 4
  %35 = lshr i32 %32, %34
  %36 = or i32 -2147483648, %35
  %37 = add nsw i32 %.0, 1
  %38 = sext i32 %37 to i64
  %39 = getelementptr inbounds i32, i32* %4, i64 %38
  store i32 %36, i32* %39, align 4
  %40 = getelementptr inbounds %struct.ichdev, %struct.ichdev* %1, i32 0, i32 5
  %41 = load i32, i32* %40, align 8
  %42 = getelementptr inbounds %struct.ichdev, %struct.ichdev* %1, i32 0, i32 6
  %43 = load i32, i32* %42, align 4
  %44 = lshr i32 %43, 1
  %45 = add i32 %41, %44
  %46 = add nsw i32 %.0, 2
  %47 = sext i32 %46 to i64
  %48 = getelementptr inbounds i32, i32* %4, i64 %47
  store i32 %45, i32* %48, align 4
  %49 = getelementptr inbounds %struct.ichdev, %struct.ichdev* %1, i32 0, i32 8
  %50 = load i32, i32* %49, align 4
  %51 = getelementptr inbounds %struct.ichdev, %struct.ichdev* %1, i32 0, i32 10
  %52 = load i32, i32* %51, align 4
  %53 = lshr i32 %50, %52
  %54 = or i32 -2147483648, %53
  %55 = add nsw i32 %.0, 3
  %56 = sext i32 %55 to i64
  %57 = getelementptr inbounds i32, i32* %4, i64 %56
  store i32 %54, i32* %57, align 4
  %58 = add nsw i32 %.0, 4
  br label %23

; <label>:59:                                     ; preds = %2
  store i32 1, i32* %16, align 4
  %60 = getelementptr inbounds %struct.ichdev, %struct.ichdev* %1, i32 0, i32 17
  store i32 1, i32* %60, align 8
  %61 = getelementptr inbounds %struct.ichdev, %struct.ichdev* %1, i32 0, i32 7
  %62 = load i32, i32* %61, align 8
  %63 = getelementptr inbounds %struct.ichdev, %struct.ichdev* %1, i32 0, i32 8
  store i32 %62, i32* %63, align 4
  br label %64

; <label>:64:                                     ; preds = %66, %59
  %.1 = phi i32 [ 0, %59 ], [ %89, %66 ]
  %65 = icmp slt i32 %.1, 64
  br i1 %65, label %66, label %90

; <label>:66:                                     ; preds = %64
  %67 = getelementptr inbounds %struct.ichdev, %struct.ichdev* %1, i32 0, i32 5
  %68 = load i32, i32* %67, align 8
  %69 = ashr i32 %.1, 1
  %70 = getelementptr inbounds %struct.ichdev, %struct.ichdev* %1, i32 0, i32 7
  %71 = load i32, i32* %70, align 8
  %72 = mul i32 %69, %71
  %73 = getelementptr inbounds %struct.ichdev, %struct.ichdev* %1, i32 0, i32 6
  %74 = load i32, i32* %73, align 4
  %75 = urem i32 %72, %74
  %76 = add i32 %68, %75
  %77 = add nsw i32 %.1, 0
  %78 = sext i32 %77 to i64
  %79 = getelementptr inbounds i32, i32* %4, i64 %78
  store i32 %76, i32* %79, align 4
  %80 = getelementptr inbounds %struct.ichdev, %struct.ichdev* %1, i32 0, i32 7
  %81 = load i32, i32* %80, align 8
  %82 = getelementptr inbounds %struct.ichdev, %struct.ichdev* %1, i32 0, i32 10
  %83 = load i32, i32* %82, align 4
  %84 = lshr i32 %81, %83
  %85 = or i32 -2147483648, %84
  %86 = add nsw i32 %.1, 1
  %87 = sext i32 %86 to i64
  %88 = getelementptr inbounds i32, i32* %4, i64 %87
  store i32 %85, i32* %88, align 4
  %89 = add nsw i32 %.1, 2
  br label %64

; <label>:90:                                     ; preds = %64
  %91 = getelementptr inbounds %struct.ichdev, %struct.ichdev* %1, i32 0, i32 6
  %92 = load i32, i32* %91, align 4
  %93 = getelementptr inbounds %struct.ichdev, %struct.ichdev* %1, i32 0, i32 7
  %94 = load i32, i32* %93, align 8
  %95 = udiv i32 %92, %94
  br label %96

; <label>:96:                                     ; preds = %23, %90
  %.sink = phi i32 [ %95, %90 ], [ 2, %23 ]
  %97 = getelementptr inbounds %struct.ichdev, %struct.ichdev* %1, i32 0, i32 12
  store i32 %.sink, i32* %97, align 4
  %98 = add i64 %6, 5
  %99 = trunc i64 %98 to i32
  %100 = getelementptr inbounds %struct.ichdev, %struct.ichdev* %1, i32 0, i32 13
  store i32 31, i32* %100, align 8
  call void @iputbyte(%struct.intel8x0* %0, i32 %99, i8 zeroext 31)
  %101 = getelementptr inbounds %struct.ichdev, %struct.ichdev* %1, i32 0, i32 15
  store i32 0, i32* %101, align 8
  %102 = add i64 %6, 4
  %103 = trunc i64 %102 to i32
  call void @iputbyte(%struct.intel8x0* %0, i32 %103, i8 zeroext 0)
  %104 = getelementptr inbounds %struct.ichdev, %struct.ichdev* %1, i32 0, i32 12
  %105 = load i32, i32* %104, align 4
  %106 = srem i32 31, %105
  %107 = getelementptr inbounds %struct.ichdev, %struct.ichdev* %1, i32 0, i32 14
  store i32 %106, i32* %107, align 4
  %108 = getelementptr inbounds %struct.ichdev, %struct.ichdev* %1, i32 0, i32 9
  store i32 0, i32* %108, align 8
  %109 = getelementptr inbounds %struct.ichdev, %struct.ichdev* %1, i32 0, i32 19
  %110 = load i32, i32* %109, align 8
  %111 = zext i32 %110 to i64
  %112 = add i64 %6, %111
  %113 = trunc i64 %112 to i32
  call void @iputbyte(%struct.intel8x0* %0, i32 %113, i8 zeroext 28)
  ret void
}

; Function Attrs: noinline nounwind uwtable
define internal i64 @frames_to_bytes(%struct.snd_pcm_runtime*, i64) #0 {
  %3 = getelementptr inbounds %struct.snd_pcm_runtime, %struct.snd_pcm_runtime* %0, i32 0, i32 19
  %4 = load i32, i32* %3, align 8
  %5 = zext i32 %4 to i64
  %6 = mul nsw i64 %1, %5
  %7 = sdiv i64 %6, 8
  ret i64 %7
}

; Function Attrs: noinline nounwind uwtable
define internal void @spin_lock_irq(%struct.spinlock*) #0 {
  %2 = getelementptr inbounds %struct.spinlock, %struct.spinlock* %0, i32 0, i32 0
  %3 = bitcast %union.anon.0* %2 to %struct.raw_spinlock*
  call void @_raw_spin_lock_irq(%struct.raw_spinlock* %3)
  ret void
}

; Function Attrs: noinline nounwind uwtable
define internal void @spin_unlock_irq(%struct.spinlock*) #0 {
  %2 = getelementptr inbounds %struct.spinlock, %struct.spinlock* %0, i32 0, i32 0
  %3 = bitcast %union.anon.0* %2 to %struct.raw_spinlock*
  call void @__raw_spin_unlock_irq(%struct.raw_spinlock* %3)
  ret void
}

declare void @msleep(i32) #1

declare void @_raw_spin_lock_irq(%struct.raw_spinlock*) #1 section ".spinlock.text"

; Function Attrs: noinline nounwind uwtable
define internal void @__raw_spin_unlock_irq(%struct.raw_spinlock*) #0 {
  call void @do_raw_spin_unlock(%struct.raw_spinlock* %0)
  call void @arch_local_irq_enable()
  ret void
}

; Function Attrs: noinline nounwind uwtable
define internal void @do_raw_spin_unlock(%struct.raw_spinlock*) #0 {
  %2 = getelementptr inbounds %struct.raw_spinlock, %struct.raw_spinlock* %0, i32 0, i32 0
  %3 = getelementptr inbounds %struct.arch_spinlock, %struct.arch_spinlock* %2, i32 0, i32 0
  call void asm sideeffect "incb $0", "=*m,*m,~{memory},~{cc},~{dirflag},~{fpsr},~{flags}"(i32* %3, i32* %3) #3, !srcloc !1
  ret void
}

; Function Attrs: noinline nounwind uwtable
define internal void @arch_local_irq_enable() #0 {
  call void @native_irq_enable()
  ret void
}

; Function Attrs: noinline nounwind uwtable
define internal void @native_irq_enable() #0 {
  call void asm sideeffect "sti", "~{memory},~{dirflag},~{fpsr},~{flags}"() #3, !srcloc !2
  ret void
}

; Function Attrs: noinline nounwind uwtable
define internal void @spin_lock(%struct.spinlock*) #0 {
  %2 = getelementptr inbounds %struct.spinlock, %struct.spinlock* %0, i32 0, i32 0
  %3 = bitcast %union.anon.0* %2 to %struct.raw_spinlock*
  call void @_raw_spin_lock(%struct.raw_spinlock* %3)
  ret void
}

; Function Attrs: noinline nounwind uwtable
define internal void @spin_unlock(%struct.spinlock*) #0 {
  %2 = getelementptr inbounds %struct.spinlock, %struct.spinlock* %0, i32 0, i32 0
  %3 = bitcast %union.anon.0* %2 to %struct.raw_spinlock*
  call void @__raw_spin_unlock(%struct.raw_spinlock* %3)
  ret void
}

; Function Attrs: noinline nounwind uwtable
define internal i64 @bytes_to_frames(%struct.snd_pcm_runtime*, i64) #0 {
  %3 = mul nsw i64 %1, 8
  %4 = getelementptr inbounds %struct.snd_pcm_runtime, %struct.snd_pcm_runtime* %0, i32 0, i32 19
  %5 = load i32, i32* %4, align 8
  %6 = zext i32 %5 to i64
  %7 = sdiv i64 %3, %6
  ret i64 %7
}

declare void @_raw_spin_lock(%struct.raw_spinlock*) #1 section ".spinlock.text"

; Function Attrs: noinline nounwind uwtable
define internal void @__raw_spin_unlock(%struct.raw_spinlock*) #0 {
  call void @do_raw_spin_unlock(%struct.raw_spinlock* %0)
  ret void
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @snd_intel8x0_capture_open(%struct.snd_pcm_substream*) #0 {
  %2 = getelementptr inbounds %struct.snd_pcm_substream, %struct.snd_pcm_substream* %0, i32 0, i32 2
  %3 = load i8*, i8** %2, align 8
  %4 = bitcast i8* %3 to %struct.intel8x0*
  %5 = getelementptr inbounds %struct.intel8x0, %struct.intel8x0* %4, i32 0, i32 8
  %6 = getelementptr inbounds [6 x %struct.ichdev], [6 x %struct.ichdev]* %5, i64 0, i64 0
  %7 = call i32 @snd_intel8x0_pcm_open(%struct.snd_pcm_substream* %0, %struct.ichdev* %6)
  ret i32 %7
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @snd_intel8x0_capture_close(%struct.snd_pcm_substream*) #0 {
  %2 = getelementptr inbounds %struct.snd_pcm_substream, %struct.snd_pcm_substream* %0, i32 0, i32 2
  %3 = load i8*, i8** %2, align 8
  %4 = bitcast i8* %3 to %struct.intel8x0*
  %5 = getelementptr inbounds %struct.intel8x0, %struct.intel8x0* %4, i32 0, i32 8
  %6 = getelementptr inbounds [6 x %struct.ichdev], [6 x %struct.ichdev]* %5, i64 0, i64 0
  %7 = getelementptr inbounds %struct.ichdev, %struct.ichdev* %6, i32 0, i32 4
  store %struct.snd_pcm_substream* null, %struct.snd_pcm_substream** %7, align 8
  ret i32 0
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @snd_intel8x0_mic_open(%struct.snd_pcm_substream*) #0 {
  %2 = getelementptr inbounds %struct.snd_pcm_substream, %struct.snd_pcm_substream* %0, i32 0, i32 2
  %3 = load i8*, i8** %2, align 8
  %4 = bitcast i8* %3 to %struct.intel8x0*
  %5 = getelementptr inbounds %struct.intel8x0, %struct.intel8x0* %4, i32 0, i32 8
  %6 = getelementptr inbounds [6 x %struct.ichdev], [6 x %struct.ichdev]* %5, i64 0, i64 2
  %7 = call i32 @snd_intel8x0_pcm_open(%struct.snd_pcm_substream* %0, %struct.ichdev* %6)
  ret i32 %7
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @snd_intel8x0_mic_close(%struct.snd_pcm_substream*) #0 {
  %2 = getelementptr inbounds %struct.snd_pcm_substream, %struct.snd_pcm_substream* %0, i32 0, i32 2
  %3 = load i8*, i8** %2, align 8
  %4 = bitcast i8* %3 to %struct.intel8x0*
  %5 = getelementptr inbounds %struct.intel8x0, %struct.intel8x0* %4, i32 0, i32 8
  %6 = getelementptr inbounds [6 x %struct.ichdev], [6 x %struct.ichdev]* %5, i64 0, i64 2
  %7 = getelementptr inbounds %struct.ichdev, %struct.ichdev* %6, i32 0, i32 4
  store %struct.snd_pcm_substream* null, %struct.snd_pcm_substream** %7, align 8
  ret i32 0
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @snd_intel8x0_mic2_open(%struct.snd_pcm_substream*) #0 {
  %2 = getelementptr inbounds %struct.snd_pcm_substream, %struct.snd_pcm_substream* %0, i32 0, i32 2
  %3 = load i8*, i8** %2, align 8
  %4 = bitcast i8* %3 to %struct.intel8x0*
  %5 = getelementptr inbounds %struct.intel8x0, %struct.intel8x0* %4, i32 0, i32 8
  %6 = getelementptr inbounds [6 x %struct.ichdev], [6 x %struct.ichdev]* %5, i64 0, i64 3
  %7 = call i32 @snd_intel8x0_pcm_open(%struct.snd_pcm_substream* %0, %struct.ichdev* %6)
  ret i32 %7
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @snd_intel8x0_mic2_close(%struct.snd_pcm_substream*) #0 {
  %2 = getelementptr inbounds %struct.snd_pcm_substream, %struct.snd_pcm_substream* %0, i32 0, i32 2
  %3 = load i8*, i8** %2, align 8
  %4 = bitcast i8* %3 to %struct.intel8x0*
  %5 = getelementptr inbounds %struct.intel8x0, %struct.intel8x0* %4, i32 0, i32 8
  %6 = getelementptr inbounds [6 x %struct.ichdev], [6 x %struct.ichdev]* %5, i64 0, i64 3
  %7 = getelementptr inbounds %struct.ichdev, %struct.ichdev* %6, i32 0, i32 4
  store %struct.snd_pcm_substream* null, %struct.snd_pcm_substream** %7, align 8
  ret i32 0
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @snd_intel8x0_capture2_open(%struct.snd_pcm_substream*) #0 {
  %2 = getelementptr inbounds %struct.snd_pcm_substream, %struct.snd_pcm_substream* %0, i32 0, i32 2
  %3 = load i8*, i8** %2, align 8
  %4 = bitcast i8* %3 to %struct.intel8x0*
  %5 = getelementptr inbounds %struct.intel8x0, %struct.intel8x0* %4, i32 0, i32 8
  %6 = getelementptr inbounds [6 x %struct.ichdev], [6 x %struct.ichdev]* %5, i64 0, i64 4
  %7 = call i32 @snd_intel8x0_pcm_open(%struct.snd_pcm_substream* %0, %struct.ichdev* %6)
  ret i32 %7
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @snd_intel8x0_capture2_close(%struct.snd_pcm_substream*) #0 {
  %2 = getelementptr inbounds %struct.snd_pcm_substream, %struct.snd_pcm_substream* %0, i32 0, i32 2
  %3 = load i8*, i8** %2, align 8
  %4 = bitcast i8* %3 to %struct.intel8x0*
  %5 = getelementptr inbounds %struct.intel8x0, %struct.intel8x0* %4, i32 0, i32 8
  %6 = getelementptr inbounds [6 x %struct.ichdev], [6 x %struct.ichdev]* %5, i64 0, i64 4
  %7 = getelementptr inbounds %struct.ichdev, %struct.ichdev* %6, i32 0, i32 4
  store %struct.snd_pcm_substream* null, %struct.snd_pcm_substream** %7, align 8
  ret i32 0
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @snd_intel8x0_spdif_open(%struct.snd_pcm_substream*) #0 {
  %2 = getelementptr inbounds %struct.snd_pcm_substream, %struct.snd_pcm_substream* %0, i32 0, i32 2
  %3 = load i8*, i8** %2, align 8
  %4 = bitcast i8* %3 to %struct.intel8x0*
  %5 = getelementptr inbounds %struct.intel8x0, %struct.intel8x0* %4, i32 0, i32 0
  %6 = load i32, i32* %5, align 8
  %7 = icmp eq i32 %6, 4
  %8 = select i1 %7, i32 3, i32 5
  %9 = getelementptr inbounds %struct.intel8x0, %struct.intel8x0* %4, i32 0, i32 8
  %10 = sext i32 %8 to i64
  %11 = getelementptr inbounds [6 x %struct.ichdev], [6 x %struct.ichdev]* %9, i64 0, i64 %10
  %12 = call i32 @snd_intel8x0_pcm_open(%struct.snd_pcm_substream* %0, %struct.ichdev* %11)
  ret i32 %12
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @snd_intel8x0_spdif_close(%struct.snd_pcm_substream*) #0 {
  %2 = getelementptr inbounds %struct.snd_pcm_substream, %struct.snd_pcm_substream* %0, i32 0, i32 2
  %3 = load i8*, i8** %2, align 8
  %4 = bitcast i8* %3 to %struct.intel8x0*
  %5 = getelementptr inbounds %struct.intel8x0, %struct.intel8x0* %4, i32 0, i32 0
  %6 = load i32, i32* %5, align 8
  %7 = icmp eq i32 %6, 4
  %8 = select i1 %7, i32 3, i32 5
  %9 = getelementptr inbounds %struct.intel8x0, %struct.intel8x0* %4, i32 0, i32 8
  %10 = sext i32 %8 to i64
  %11 = getelementptr inbounds [6 x %struct.ichdev], [6 x %struct.ichdev]* %9, i64 0, i64 %10
  %12 = getelementptr inbounds %struct.ichdev, %struct.ichdev* %11, i32 0, i32 4
  store %struct.snd_pcm_substream* null, %struct.snd_pcm_substream** %12, align 8
  ret i32 0
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @snd_intel8x0_ali_trigger(%struct.snd_pcm_substream*, i32) #0 {
  %3 = getelementptr inbounds %struct.snd_pcm_substream, %struct.snd_pcm_substream* %0, i32 0, i32 2
  %4 = load i8*, i8** %3, align 8
  %5 = bitcast i8* %4 to %struct.intel8x0*
  %6 = getelementptr inbounds %struct.snd_pcm_substream, %struct.snd_pcm_substream* %0, i32 0, i32 12
  %7 = load %struct.snd_pcm_runtime*, %struct.snd_pcm_runtime** %6, align 8
  %8 = getelementptr inbounds %struct.snd_pcm_runtime, %struct.snd_pcm_runtime* %7, i32 0, i32 41
  %9 = load i8*, i8** %8, align 8
  %10 = bitcast i8* %9 to %struct.ichdev*
  %11 = getelementptr inbounds %struct.ichdev, %struct.ichdev* %10, i32 0, i32 1
  %12 = load i64, i64* %11, align 8
  %13 = call i32 @igetdword(%struct.intel8x0* %5, i32 8)
  switch i32 %1, label %95 [
    i32 6, label %14
    i32 1, label %18
    i32 4, label %18
    i32 5, label %60
    i32 0, label %65
    i32 3, label %65
  ]

; <label>:14:                                     ; preds = %2
  %15 = getelementptr inbounds %struct.ichdev, %struct.ichdev* %10, i32 0, i32 25
  %16 = load i8, i8* %15, align 4
  %17 = and i8 %16, -3
  store i8 %17, i8* %15, align 4
  br label %18

; <label>:18:                                     ; preds = %14, %2, %2
  %19 = getelementptr inbounds %struct.snd_pcm_substream, %struct.snd_pcm_substream* %0, i32 0, i32 5
  %20 = load i32, i32* %19, align 4
  %21 = icmp eq i32 %20, 0
  br i1 %21, label %22, label %47

; <label>:22:                                     ; preds = %18
  %23 = getelementptr inbounds %struct.ichdev, %struct.ichdev* %10, i32 0, i32 22
  %24 = load i32, i32* %23, align 4
  %25 = udiv i32 %24, 4
  %26 = zext i32 %25 to i64
  %27 = getelementptr inbounds [3 x i32], [3 x i32]* @snd_intel8x0_ali_trigger.fiforeg, i64 0, i64 %26
  %28 = load i32, i32* %27, align 4
  %29 = call i32 @igetdword(%struct.intel8x0* %5, i32 %28)
  %30 = getelementptr inbounds %struct.ichdev, %struct.ichdev* %10, i32 0, i32 22
  %31 = load i32, i32* %30, align 4
  %32 = urem i32 %31, 4
  %33 = shl i32 255, %32
  %34 = xor i32 %33, -1
  %35 = and i32 %29, %34
  %36 = getelementptr inbounds %struct.ichdev, %struct.ichdev* %10, i32 0, i32 22
  %37 = load i32, i32* %36, align 4
  %38 = urem i32 %37, 4
  %39 = shl i32 131, %38
  %40 = or i32 %35, %39
  %41 = getelementptr inbounds %struct.ichdev, %struct.ichdev* %10, i32 0, i32 22
  %42 = load i32, i32* %41, align 4
  %43 = udiv i32 %42, 4
  %44 = zext i32 %43 to i64
  %45 = getelementptr inbounds [3 x i32], [3 x i32]* @snd_intel8x0_ali_trigger.fiforeg, i64 0, i64 %44
  %46 = load i32, i32* %45, align 4
  call void @iputdword(%struct.intel8x0* %5, i32 %46, i32 %40)
  br label %47

; <label>:47:                                     ; preds = %22, %18
  %48 = add i64 %12, 11
  %49 = trunc i64 %48 to i32
  call void @iputbyte(%struct.intel8x0* %5, i32 %49, i8 zeroext 16)
  %50 = getelementptr inbounds %struct.ichdev, %struct.ichdev* %10, i32 0, i32 22
  %51 = load i32, i32* %50, align 4
  %52 = add i32 %51, 16
  %53 = shl i32 1, %52
  %54 = xor i32 %53, -1
  %55 = and i32 %13, %54
  %56 = getelementptr inbounds %struct.ichdev, %struct.ichdev* %10, i32 0, i32 22
  %57 = load i32, i32* %56, align 4
  %58 = shl i32 1, %57
  %59 = or i32 %55, %58
  call void @iputdword(%struct.intel8x0* %5, i32 8, i32 %59)
  br label %95

; <label>:60:                                     ; preds = %2
  %61 = getelementptr inbounds %struct.ichdev, %struct.ichdev* %10, i32 0, i32 25
  %62 = load i8, i8* %61, align 4
  %63 = and i8 %62, -3
  %64 = or i8 %63, 2
  store i8 %64, i8* %61, align 4
  br label %65

; <label>:65:                                     ; preds = %60, %2, %2
  %66 = getelementptr inbounds %struct.ichdev, %struct.ichdev* %10, i32 0, i32 22
  %67 = load i32, i32* %66, align 4
  %68 = add i32 %67, 16
  %69 = shl i32 1, %68
  %70 = or i32 %13, %69
  call void @iputdword(%struct.intel8x0* %5, i32 8, i32 %70)
  %71 = add i64 %12, 11
  %72 = trunc i64 %71 to i32
  call void @iputbyte(%struct.intel8x0* %5, i32 %72, i8 zeroext 0)
  br label %73

; <label>:73:                                     ; preds = %73, %65
  %74 = add i64 %12, 11
  %75 = trunc i64 %74 to i32
  %76 = call zeroext i8 @igetbyte(%struct.intel8x0* %5, i32 %75)
  %77 = icmp ne i8 %76, 0
  br i1 %77, label %73, label %78

; <label>:78:                                     ; preds = %73
  %79 = icmp eq i32 %1, 3
  br i1 %79, label %95, label %80

; <label>:80:                                     ; preds = %78
  %81 = add i64 %12, 11
  %82 = trunc i64 %81 to i32
  call void @iputbyte(%struct.intel8x0* %5, i32 %82, i8 zeroext 2)
  %83 = add i64 %12, 6
  %84 = trunc i64 %83 to i32
  %85 = add i64 %12, 6
  %86 = trunc i64 %85 to i32
  %87 = call zeroext i8 @igetbyte(%struct.intel8x0* %5, i32 %86)
  %88 = zext i8 %87 to i32
  %89 = or i32 %88, 30
  %90 = trunc i32 %89 to i8
  call void @iputbyte(%struct.intel8x0* %5, i32 %84, i8 zeroext %90)
  %91 = call i32 @igetdword(%struct.intel8x0* %5, i32 24)
  %92 = getelementptr inbounds %struct.ichdev, %struct.ichdev* %10, i32 0, i32 21
  %93 = load i32, i32* %92, align 8
  %94 = and i32 %91, %93
  call void @iputdword(%struct.intel8x0* %5, i32 24, i32 %94)
  br label %95

; <label>:95:                                     ; preds = %47, %80, %78, %2
  %.0 = phi i32 [ -22, %2 ], [ 0, %78 ], [ 0, %80 ], [ 0, %47 ]
  ret i32 %.0
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @snd_intel8x0_ali_ac97spdifout_open(%struct.snd_pcm_substream*) #0 {
  %2 = getelementptr inbounds %struct.snd_pcm_substream, %struct.snd_pcm_substream* %0, i32 0, i32 2
  %3 = load i8*, i8** %2, align 8
  %4 = bitcast i8* %3 to %struct.intel8x0*
  %5 = getelementptr inbounds %struct.intel8x0, %struct.intel8x0* %4, i32 0, i32 20
  call void @spin_lock_irq(%struct.spinlock* %5)
  %6 = call i32 @igetdword(%struct.intel8x0* %4, i32 16)
  %7 = or i32 %6, 2097152
  call void @iputdword(%struct.intel8x0* %4, i32 16, i32 %7)
  %8 = getelementptr inbounds %struct.intel8x0, %struct.intel8x0* %4, i32 0, i32 20
  call void @spin_unlock_irq(%struct.spinlock* %8)
  %9 = getelementptr inbounds %struct.intel8x0, %struct.intel8x0* %4, i32 0, i32 8
  %10 = getelementptr inbounds [6 x %struct.ichdev], [6 x %struct.ichdev]* %9, i64 0, i64 3
  %11 = call i32 @snd_intel8x0_pcm_open(%struct.snd_pcm_substream* %0, %struct.ichdev* %10)
  ret i32 %11
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @snd_intel8x0_ali_ac97spdifout_close(%struct.snd_pcm_substream*) #0 {
  %2 = getelementptr inbounds %struct.snd_pcm_substream, %struct.snd_pcm_substream* %0, i32 0, i32 2
  %3 = load i8*, i8** %2, align 8
  %4 = bitcast i8* %3 to %struct.intel8x0*
  %5 = getelementptr inbounds %struct.intel8x0, %struct.intel8x0* %4, i32 0, i32 8
  %6 = getelementptr inbounds [6 x %struct.ichdev], [6 x %struct.ichdev]* %5, i64 0, i64 3
  %7 = getelementptr inbounds %struct.ichdev, %struct.ichdev* %6, i32 0, i32 4
  store %struct.snd_pcm_substream* null, %struct.snd_pcm_substream** %7, align 8
  %8 = getelementptr inbounds %struct.intel8x0, %struct.intel8x0* %4, i32 0, i32 20
  call void @spin_lock_irq(%struct.spinlock* %8)
  %9 = call i32 @igetdword(%struct.intel8x0* %4, i32 16)
  %10 = and i32 %9, -2097153
  call void @iputdword(%struct.intel8x0* %4, i32 16, i32 %10)
  %11 = getelementptr inbounds %struct.intel8x0, %struct.intel8x0* %4, i32 0, i32 20
  call void @spin_unlock_irq(%struct.spinlock* %11)
  ret i32 0
}

declare i32 @sprintf(i8*, i8*, ...) #1

declare i32 @snd_pcm_new(%struct.snd_card*, i8*, i32, i32, i32, %struct.snd_pcm**) #1

declare void @snd_pcm_set_ops(%struct.snd_pcm*, i32, %struct.snd_pcm_ops*) #1

declare i32 @snd_pcm_lib_preallocate_pages_for_all(%struct.snd_pcm*, i32, i8*, i64, i64) #1

declare i32 @snd_card_proc_new(%struct.snd_card*, i8*, %struct.snd_info_entry**) #1

; Function Attrs: noinline nounwind uwtable
define internal void @snd_info_set_text_ops(%struct.snd_info_entry*, i8*, void (%struct.snd_info_entry*, %struct.snd_info_buffer*)*) #0 {
  %4 = getelementptr inbounds %struct.snd_info_entry, %struct.snd_info_entry* %0, i32 0, i32 8
  store i8* %1, i8** %4, align 8
  %5 = getelementptr inbounds %struct.snd_info_entry, %struct.snd_info_entry* %0, i32 0, i32 4
  %6 = bitcast %union.anon.34* %5 to %struct.snd_info_entry_text*
  %7 = getelementptr inbounds %struct.snd_info_entry_text, %struct.snd_info_entry_text* %6, i32 0, i32 0
  store void (%struct.snd_info_entry*, %struct.snd_info_buffer*)* %2, void (%struct.snd_info_entry*, %struct.snd_info_buffer*)** %7, align 8
  ret void
}

; Function Attrs: noinline nounwind uwtable
define internal void @snd_intel8x0_proc_read(%struct.snd_info_entry*, %struct.snd_info_buffer*) #0 {
  %3 = getelementptr inbounds %struct.snd_info_entry, %struct.snd_info_entry* %0, i32 0, i32 8
  %4 = load i8*, i8** %3, align 8
  %5 = bitcast i8* %4 to %struct.intel8x0*
  %6 = call i32 (%struct.snd_info_buffer*, i8*, ...) @snd_iprintf(%struct.snd_info_buffer* %1, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.107, i32 0, i32 0))
  %7 = getelementptr inbounds %struct.intel8x0, %struct.intel8x0* %5, i32 0, i32 0
  %8 = load i32, i32* %7, align 8
  %9 = icmp eq i32 %8, 3
  br i1 %9, label %68, label %10

; <label>:10:                                     ; preds = %2
  %11 = call i32 @igetdword(%struct.intel8x0* %5, i32 48)
  %12 = call i32 @igetdword(%struct.intel8x0* %5, i32 44)
  %13 = call i32 (%struct.snd_info_buffer*, i8*, ...) @snd_iprintf(%struct.snd_info_buffer* %1, i8* getelementptr inbounds ([32 x i8], [32 x i8]* @.str.108, i32 0, i32 0), i32 %12)
  %14 = call i32 (%struct.snd_info_buffer*, i8*, ...) @snd_iprintf(%struct.snd_info_buffer* %1, i8* getelementptr inbounds ([32 x i8], [32 x i8]* @.str.109, i32 0, i32 0), i32 %11)
  %15 = getelementptr inbounds %struct.intel8x0, %struct.intel8x0* %5, i32 0, i32 0
  %16 = load i32, i32* %15, align 8
  %17 = icmp eq i32 %16, 1
  br i1 %17, label %18, label %21

; <label>:18:                                     ; preds = %10
  %19 = call i32 @igetdword(%struct.intel8x0* %5, i32 128)
  %20 = call i32 (%struct.snd_info_buffer*, i8*, ...) @snd_iprintf(%struct.snd_info_buffer* %1, i8* getelementptr inbounds ([32 x i8], [32 x i8]* @.str.110, i32 0, i32 0), i32 %19)
  br label %21

; <label>:21:                                     ; preds = %18, %10
  %22 = call i32 (%struct.snd_info_buffer*, i8*, ...) @snd_iprintf(%struct.snd_info_buffer* %1, i8* getelementptr inbounds ([24 x i8], [24 x i8]* @.str.111, i32 0, i32 0))
  %23 = getelementptr inbounds %struct.intel8x0, %struct.intel8x0* %5, i32 0, i32 18
  %24 = load i32, i32* %23, align 8
  %25 = and i32 %11, %24
  %26 = icmp ne i32 %25, 0
  br i1 %26, label %27, label %46

; <label>:27:                                     ; preds = %21, %44
  %.0 = phi i32 [ %45, %44 ], [ 0, %21 ]
  %28 = getelementptr inbounds %struct.intel8x0, %struct.intel8x0* %5, i32 0, i32 15
  %29 = load i32, i32* %28, align 4
  %30 = icmp ult i32 %.0, %29
  br i1 %30, label %31, label %48

; <label>:31:                                     ; preds = %27
  %32 = getelementptr inbounds %struct.intel8x0, %struct.intel8x0* %5, i32 0, i32 17
  %33 = load i32*, i32** %32, align 8
  %34 = sext i32 %.0 to i64
  %35 = getelementptr inbounds i32, i32* %33, i64 %34
  %36 = load i32, i32* %35, align 4
  %37 = and i32 %11, %36
  %38 = icmp ne i32 %37, 0
  br i1 %38, label %39, label %44

; <label>:39:                                     ; preds = %31
  %40 = sext i32 %.0 to i64
  %41 = getelementptr inbounds [3 x i8*], [3 x i8*]* @snd_intel8x0_proc_read.codecs, i64 0, i64 %40
  %42 = load i8*, i8** %41, align 8
  %43 = call i32 (%struct.snd_info_buffer*, i8*, ...) @snd_iprintf(%struct.snd_info_buffer* %1, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.115, i32 0, i32 0), i8* %42)
  br label %44

; <label>:44:                                     ; preds = %31, %39
  %45 = add nsw i32 %.0, 1
  br label %27

; <label>:46:                                     ; preds = %21
  %47 = call i32 (%struct.snd_info_buffer*, i8*, ...) @snd_iprintf(%struct.snd_info_buffer* %1, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.116, i32 0, i32 0))
  br label %48

; <label>:48:                                     ; preds = %27, %46
  %49 = call i32 (%struct.snd_info_buffer*, i8*, ...) @snd_iprintf(%struct.snd_info_buffer* %1, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.117, i32 0, i32 0))
  %50 = getelementptr inbounds %struct.intel8x0, %struct.intel8x0* %5, i32 0, i32 0
  %51 = load i32, i32* %50, align 8
  %52 = icmp eq i32 %51, 1
  br i1 %52, label %57, label %53

; <label>:53:                                     ; preds = %48
  %54 = getelementptr inbounds %struct.intel8x0, %struct.intel8x0* %5, i32 0, i32 0
  %55 = load i32, i32* %54, align 8
  %56 = icmp eq i32 %55, 2
  br i1 %56, label %57, label %68

; <label>:57:                                     ; preds = %53, %48
  %58 = getelementptr inbounds %struct.intel8x0, %struct.intel8x0* %5, i32 0, i32 14
  %59 = getelementptr inbounds [3 x i32], [3 x i32]* %58, i64 0, i64 0
  %60 = load i32, i32* %59, align 8
  %61 = getelementptr inbounds %struct.intel8x0, %struct.intel8x0* %5, i32 0, i32 14
  %62 = getelementptr inbounds [3 x i32], [3 x i32]* %61, i64 0, i64 1
  %63 = load i32, i32* %62, align 4
  %64 = getelementptr inbounds %struct.intel8x0, %struct.intel8x0* %5, i32 0, i32 14
  %65 = getelementptr inbounds [3 x i32], [3 x i32]* %64, i64 0, i64 2
  %66 = load i32, i32* %65, align 8
  %67 = call i32 (%struct.snd_info_buffer*, i8*, ...) @snd_iprintf(%struct.snd_info_buffer* %1, i8* getelementptr inbounds ([34 x i8], [34 x i8]* @.str.118, i32 0, i32 0), i32 %60, i32 %63, i32 %66)
  br label %68

; <label>:68:                                     ; preds = %2, %57, %53
  ret void
}

declare i32 @snd_iprintf(%struct.snd_info_buffer*, i8*, ...) #1

declare void @ktime_get_ts(%struct.timespec*) #1

; Function Attrs: noinline nounwind uwtable
define internal i32 @snd_ac97_update_power(%struct.snd_ac97*, i32, i32) #0 {
  ret i32 0
}

; Function Attrs: noinline nounwind uwtable
define internal void @snd_power_change_state(%struct.snd_card*, i32) #0 {
  %3 = getelementptr inbounds %struct.snd_card, %struct.snd_card* %0, i32 0, i32 29
  store i32 %1, i32* %3, align 8
  %4 = getelementptr inbounds %struct.snd_card, %struct.snd_card* %0, i32 0, i32 31
  call void @__wake_up(%struct.__wait_queue_head* %4, i32 3, i32 1, i8* null)
  ret void
}

declare i32 @snd_pcm_suspend_all(%struct.snd_pcm*) #1

declare void @snd_ac97_suspend(%struct.snd_ac97*) #1

declare i32 @pci_save_state(%struct.pci_dev*) #1

declare void @__wake_up(%struct.__wait_queue_head*, i32, i32, i8*) #1

declare i32 @pci_set_power_state(%struct.pci_dev*, i32) #1

declare void @pci_restore_state(%struct.pci_dev*) #1

declare i32 @snd_card_disconnect(%struct.snd_card*) #1

declare void @synchronize_irq(i32) #1

declare void @snd_ac97_resume(%struct.snd_ac97*) #1

declare i32 @__pci_register_driver(%struct.pci_driver*, %struct.module*, i8*) #1

attributes #0 = { noinline nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { argmemonly nounwind }
attributes #3 = { nounwind }

!llvm.ident = !{!0}

!0 = !{!"clang version 4.0.1 (tags/RELEASE_401/final)"}
!1 = !{i32 733856}
!2 = !{i32 529490}
