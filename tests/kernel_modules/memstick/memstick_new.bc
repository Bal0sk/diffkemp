; ModuleID = 'drivers/memstick/core/memstick.bc'
source_filename = "drivers/memstick/core/memstick.c"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%struct.kernel_param_ops = type { i32, i32 (i8*, %struct.kernel_param*)*, i32 (i8*, %struct.kernel_param*)*, void (i8*)* }
%struct.kernel_param = type { i8*, %struct.module*, %struct.kernel_param_ops*, i16, i8, i8, %union.anon.46 }
%struct.module = type { i32, %struct.list_head, [56 x i8], %struct.module_kobject, %struct.module_attribute*, i8*, i8*, %struct.kobject*, %struct.kernel_symbol*, i32*, i32, %struct.mutex, %struct.kernel_param*, i32, i32, %struct.kernel_symbol*, i32*, i8, %struct.kernel_symbol*, i32*, i32, i32, %struct.exception_table_entry*, i32 ()*, [40 x i8], %struct.module_layout, %struct.module_layout, %struct.mod_arch_specific, i64, i32, %struct.list_head, %struct.bug_entry*, %struct.mod_kallsyms*, %struct.mod_kallsyms, %struct.module_sect_attrs*, %struct.module_notes_attrs*, i8*, i8*, i32, i32, %struct.tracepoint**, i32, i8**, %struct.trace_event_call**, i32, %struct.trace_enum_map**, i32, %struct.list_head, %struct.list_head, void ()*, %struct.atomic_t, [12 x i8] }
%struct.module_kobject = type { %struct.kobject, %struct.module*, %struct.kobject*, %struct.module_param_attrs*, %struct.completion* }
%struct.kobject = type { i8*, %struct.list_head, %struct.kobject*, %struct.kset*, %struct.kobj_type*, %struct.kernfs_node*, %struct.kref, i8 }
%struct.kset = type { %struct.list_head, %struct.spinlock, %struct.kobject, %struct.kset_uevent_ops* }
%struct.spinlock = type { %union.anon.1 }
%union.anon.1 = type { %struct.raw_spinlock }
%struct.raw_spinlock = type { %struct.qspinlock }
%struct.qspinlock = type { %struct.atomic_t }
%struct.kset_uevent_ops = type { i32 (%struct.kset*, %struct.kobject*)*, i8* (%struct.kset*, %struct.kobject*)*, i32 (%struct.kset*, %struct.kobject*, %struct.kobj_uevent_env*)* }
%struct.kobj_uevent_env = type { [3 x i8*], [32 x i8*], i32, [2048 x i8], i32 }
%struct.kobj_type = type { void (%struct.kobject*)*, %struct.sysfs_ops*, %struct.attribute**, %struct.kobj_ns_type_operations* (%struct.kobject*)*, i8* (%struct.kobject*)* }
%struct.sysfs_ops = type { i64 (%struct.kobject*, %struct.attribute*, i8*)*, i64 (%struct.kobject*, %struct.attribute*, i8*, i64)* }
%struct.attribute = type { i8*, i16 }
%struct.kobj_ns_type_operations = type { i32, i1 ()*, i8* ()*, i8* (%struct.sock*)*, i8* ()*, void (i8*)* }
%struct.sock = type opaque
%struct.kernfs_node = type { %struct.atomic_t, %struct.atomic_t, %struct.kernfs_node*, i8*, %struct.rb_node, i8*, i32, %union.anon, i8*, i16, i16, i32, %struct.kernfs_iattrs* }
%struct.rb_node = type { i64, %struct.rb_node*, %struct.rb_node* }
%union.anon = type { %struct.kernfs_elem_attr }
%struct.kernfs_elem_attr = type { %struct.kernfs_ops*, %struct.kernfs_open_node*, i64, %struct.kernfs_node* }
%struct.kernfs_ops = type { i32 (%struct.kernfs_open_file*)*, void (%struct.kernfs_open_file*)*, i32 (%struct.seq_file*, i8*)*, i8* (%struct.seq_file*, i64*)*, i8* (%struct.seq_file*, i8*, i64*)*, void (%struct.seq_file*, i8*)*, i64 (%struct.kernfs_open_file*, i8*, i64, i64)*, i64, i8, i64 (%struct.kernfs_open_file*, i8*, i64, i64)*, i32 (%struct.kernfs_open_file*, %struct.vm_area_struct*)* }
%struct.kernfs_open_file = type { %struct.kernfs_node*, %struct.file*, %struct.seq_file*, i8*, %struct.mutex, %struct.mutex, i32, %struct.list_head, i8*, i64, i8, %struct.vm_operations_struct* }
%struct.file = type { %union.anon.2, %struct.path, %struct.inode*, %struct.file_operations*, %struct.spinlock, %struct.atomic64_t, i32, i32, %struct.mutex, i64, %struct.fown_struct, %struct.cred*, %struct.file_ra_state, i64, i8*, i8*, %struct.list_head, %struct.list_head, %struct.address_space* }
%union.anon.2 = type { %struct.callback_head }
%struct.callback_head = type { %struct.callback_head*, void (%struct.callback_head*)* }
%struct.path = type { %struct.vfsmount*, %struct.dentry* }
%struct.vfsmount = type opaque
%struct.dentry = type { i32, %struct.seqcount, %struct.hlist_bl_node, %struct.dentry*, %struct.qstr, %struct.inode*, [32 x i8], %struct.lockref, %struct.dentry_operations*, %struct.super_block*, i64, i8*, %union.anon.44, %struct.list_head, %struct.list_head, %union.anon.45 }
%struct.seqcount = type { i32 }
%struct.hlist_bl_node = type { %struct.hlist_bl_node*, %struct.hlist_bl_node** }
%struct.qstr = type { %union.anon.3, i8* }
%union.anon.3 = type { i64 }
%struct.lockref = type { %union.anon.42 }
%union.anon.42 = type { i64 }
%struct.dentry_operations = type { i32 (%struct.dentry*, i32)*, i32 (%struct.dentry*, i32)*, i32 (%struct.dentry*, %struct.qstr*)*, i32 (%struct.dentry*, i32, i8*, %struct.qstr*)*, i32 (%struct.dentry*)*, i32 (%struct.dentry*)*, void (%struct.dentry*)*, void (%struct.dentry*)*, void (%struct.dentry*, %struct.inode*)*, i8* (%struct.dentry*, i8*, i32)*, %struct.vfsmount* (%struct.path*)*, i32 (%struct.path*, i1)*, %struct.dentry* (%struct.dentry*, %struct.inode*, i32)*, [24 x i8] }
%struct.super_block = type { %struct.list_head, i32, i8, i64, i64, %struct.file_system_type*, %struct.super_operations*, %struct.dquot_operations*, %struct.quotactl_ops*, %struct.export_operations*, i64, i64, i64, %struct.dentry*, %struct.rw_semaphore, i32, %struct.atomic_t, i8*, %struct.xattr_handler**, %struct.fscrypt_operations*, %struct.hlist_bl_head, %struct.list_head, %struct.block_device*, %struct.backing_dev_info*, %struct.mtd_info*, %struct.hlist_node, i32, %struct.quota_info, %struct.sb_writers, [32 x i8], [16 x i8], i8*, i32, i32, i32, %struct.mutex, i8*, i8*, %struct.dentry_operations*, i32, %struct.shrinker, %struct.atomic64_t, i32, %struct.workqueue_struct*, %struct.hlist_head, %struct.user_namespace*, %struct.list_lru, [56 x i8], %struct.list_lru, %struct.callback_head, %struct.work_struct, %struct.mutex, i32, [36 x i8], %struct.spinlock, %struct.list_head, %struct.spinlock, %struct.list_head, [16 x i8] }
%struct.file_system_type = type { i8*, i32, %struct.dentry* (%struct.file_system_type*, i32, i8*, i8*)*, void (%struct.super_block*)*, %struct.module*, %struct.file_system_type*, %struct.hlist_head, %struct.lock_class_key, %struct.lock_class_key, %struct.lock_class_key, [3 x %struct.lock_class_key], %struct.lock_class_key, %struct.lock_class_key, %struct.lock_class_key }
%struct.lock_class_key = type {}
%struct.super_operations = type { %struct.inode* (%struct.super_block*)*, void (%struct.inode*)*, void (%struct.inode*, i32)*, i32 (%struct.inode*, %struct.writeback_control*)*, i32 (%struct.inode*)*, void (%struct.inode*)*, void (%struct.super_block*)*, i32 (%struct.super_block*, i32)*, i32 (%struct.super_block*)*, i32 (%struct.super_block*)*, i32 (%struct.super_block*)*, i32 (%struct.super_block*)*, i32 (%struct.dentry*, %struct.kstatfs*)*, i32 (%struct.super_block*, i32*, i8*)*, void (%struct.super_block*)*, i32 (%struct.seq_file*, %struct.dentry*)*, i32 (%struct.seq_file*, %struct.dentry*)*, i32 (%struct.seq_file*, %struct.dentry*)*, i32 (%struct.seq_file*, %struct.dentry*)*, i64 (%struct.super_block*, i32, i8*, i64, i64)*, i64 (%struct.super_block*, i32, i8*, i64, i64)*, %struct.dquot** (%struct.inode*)*, i32 (%struct.super_block*, %struct.page*, i32)*, i64 (%struct.super_block*, %struct.shrink_control*)*, i64 (%struct.super_block*, %struct.shrink_control*)* }
%struct.writeback_control = type opaque
%struct.kstatfs = type opaque
%struct.dquot = type { %struct.hlist_node, %struct.list_head, %struct.list_head, %struct.list_head, %struct.mutex, %struct.atomic_t, %struct.__wait_queue_head, %struct.super_block*, %struct.kqid, i64, i64, %struct.mem_dqblk }
%struct.__wait_queue_head = type { %struct.spinlock, %struct.list_head }
%struct.kqid = type { %union.anon.4, i32 }
%union.anon.4 = type { %struct.kuid_t }
%struct.kuid_t = type { i32 }
%struct.mem_dqblk = type { i64, i64, i64, i64, i64, i64, i64, i64, i64 }
%struct.page = type { i64, %union.anon.5, %union.anon.28, %union.anon.29, %union.anon.33, %union.anon.36, [8 x i8] }
%union.anon.5 = type { %struct.address_space* }
%union.anon.28 = type { i64 }
%union.anon.29 = type { i64 }
%union.anon.33 = type { %struct.list_head }
%union.anon.36 = type { i64 }
%struct.shrink_control = type { i32, i64, i32, %struct.mem_cgroup* }
%struct.mem_cgroup = type opaque
%struct.dquot_operations = type { i32 (%struct.dquot*)*, %struct.dquot* (%struct.super_block*, i32)*, void (%struct.dquot*)*, i32 (%struct.dquot*)*, i32 (%struct.dquot*)*, i32 (%struct.dquot*)*, i32 (%struct.super_block*, i32)*, i64* (%struct.inode*)*, i32 (%struct.inode*, %struct.kprojid_t*)*, i32 (%struct.super_block*, %struct.kqid*)* }
%struct.kprojid_t = type { i32 }
%struct.quotactl_ops = type { i32 (%struct.super_block*, i32, i32, %struct.path*)*, i32 (%struct.super_block*, i32)*, i32 (%struct.super_block*, i32)*, i32 (%struct.super_block*, i32)*, i32 (%struct.super_block*, i32)*, i32 (%struct.super_block*, i32, %struct.qc_info*)*, i32 (%struct.super_block*, i64, %struct.qc_dqblk*)*, i32 (%struct.super_block*, %struct.kqid*, %struct.qc_dqblk*)*, i32 (%struct.super_block*, i64, %struct.qc_dqblk*)*, i32 (%struct.super_block*, %struct.qc_state*)*, i32 (%struct.super_block*, i32)* }
%struct.qc_info = type { i32, i32, i32, i32, i32, i32, i32, i32 }
%struct.qc_dqblk = type { i32, i64, i64, i64, i64, i64, i64, i64, i64, i32, i32, i64, i64, i64, i64, i32 }
%struct.qc_state = type { i32, [3 x %struct.qc_type_state] }
%struct.qc_type_state = type { i32, i32, i32, i32, i32, i32, i32, i64, i64, i64 }
%struct.export_operations = type opaque
%struct.rw_semaphore = type { %struct.atomic64_t, %struct.list_head, %struct.raw_spinlock, %struct.optimistic_spin_queue, %struct.task_struct* }
%struct.optimistic_spin_queue = type { %struct.atomic_t }
%struct.task_struct = type { %struct.thread_info, i64, i8*, %struct.atomic_t, i32, i32, %struct.llist_node, i32, i32, i32, i64, %struct.task_struct*, i32, i32, i32, i32, i32, i32, %struct.sched_class*, [16 x i8], %struct.sched_entity, %struct.sched_rt_entity, %struct.task_group*, %struct.sched_dl_entity, i32, i32, i32, %struct.cpumask, %struct.sched_info, %struct.list_head, %struct.plist_node, %struct.rb_node, %struct.mm_struct*, %struct.mm_struct*, %struct.vmacache, %struct.task_rss_stat, i32, i32, i32, i32, i64, i32, i8, [3 x i8], i8, i64, %struct.restart_block, i32, i32, %struct.task_struct*, %struct.task_struct*, %struct.list_head, %struct.list_head, %struct.task_struct*, %struct.list_head, %struct.list_head, [3 x %struct.pid_link], %struct.list_head, %struct.list_head, %struct.completion*, i32*, i32*, i64, i64, i64, %struct.prev_cputime, i64, i64, i64, i64, i64, i64, %struct.task_cputime, [3 x %struct.list_head], %struct.cred*, %struct.cred*, %struct.cred*, [16 x i8], %struct.nameidata*, %struct.sysv_sem, %struct.sysv_shm, %struct.fs_struct*, %struct.files_struct*, %struct.nsproxy*, %struct.signal_struct*, %struct.sighand_struct*, %struct.sigset_t, %struct.sigset_t, %struct.sigset_t, %struct.sigpending, i64, i64, i32, %struct.callback_head*, %struct.audit_context*, %struct.kuid_t, i32, %struct.seccomp, i32, i32, %struct.spinlock, %struct.raw_spinlock, %struct.wake_q_node, %struct.rb_root, %struct.rb_node*, %struct.rt_mutex_waiter*, i8*, %struct.bio_list*, %struct.blk_plug*, %struct.reclaim_state*, %struct.backing_dev_info*, %struct.io_context*, i64, %struct.siginfo*, %struct.task_io_accounting, i64, i64, i64, %struct.nodemask_t, %struct.seqcount, i32, i32, %struct.css_set*, %struct.list_head, %struct.robust_list_head*, %struct.compat_robust_list_head*, %struct.list_head, %struct.futex_pi_state*, [2 x %struct.perf_event_context*], %struct.mutex, %struct.list_head, %struct.mempolicy*, i16, i16, %struct.tlbflush_unmap_batch, %struct.callback_head, %struct.pipe_inode_info*, %struct.page_frag, %struct.task_delay_info*, i32, i32, i64, i64, i64, i64, i64, i32, %struct.task_struct*, %struct.vm_struct*, %struct.atomic_t, [28 x i8], %struct.thread_struct }
%struct.thread_info = type { i64 }
%struct.llist_node = type { %struct.llist_node* }
%struct.sched_class = type opaque
%struct.sched_entity = type { %struct.load_weight, %struct.rb_node, %struct.list_head, i32, i64, i64, i64, i64, i64, %struct.sched_statistics, i32, %struct.sched_entity*, %struct.cfs_rq*, %struct.cfs_rq*, [32 x i8], %struct.sched_avg, [24 x i8] }
%struct.load_weight = type { i64, i32 }
%struct.sched_statistics = type { i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64 }
%struct.cfs_rq = type opaque
%struct.sched_avg = type { i64, i64, i32, i32, i64, i64 }
%struct.sched_rt_entity = type { %struct.list_head, i64, i64, i32, i16, i16, %struct.sched_rt_entity* }
%struct.task_group = type opaque
%struct.sched_dl_entity = type { %struct.rb_node, i64, i64, i64, i64, i64, i64, i32, i32, i32, i32, %struct.hrtimer }
%struct.hrtimer = type { %struct.timerqueue_node, i64, i32 (%struct.hrtimer*)*, %struct.hrtimer_clock_base*, i8, i8 }
%struct.timerqueue_node = type { %struct.rb_node, i64 }
%struct.hrtimer_clock_base = type { %struct.hrtimer_cpu_base*, i32, i32, %struct.timerqueue_head, i64 ()*, i64, [16 x i8] }
%struct.hrtimer_cpu_base = type { %struct.raw_spinlock, %struct.seqcount, %struct.hrtimer*, i32, i32, i32, i8, i8, i8, i64, %struct.hrtimer*, i32, i32, i32, i32, [4 x %struct.hrtimer_clock_base] }
%struct.timerqueue_head = type { %struct.rb_root, %struct.timerqueue_node* }
%struct.cpumask = type { [1 x i64] }
%struct.sched_info = type { i64, i64, i64, i64 }
%struct.plist_node = type { i32, %struct.list_head, %struct.list_head }
%struct.mm_struct = type { %struct.vm_area_struct*, %struct.rb_root, i32, i64 (%struct.file*, i64, i64, i64, i64)*, i64, i64, i64, i64, %struct.pgd_t*, %struct.atomic_t, %struct.atomic_t, %struct.atomic64_t, %struct.atomic64_t, i32, %struct.spinlock, %struct.rw_semaphore, %struct.list_head, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, [46 x i64], %struct.mm_rss_stat, %struct.linux_binfmt*, [1 x %struct.cpumask], %struct.mm_context_t, i64, %struct.core_state*, %struct.spinlock, %struct.kioctx_table*, %struct.user_namespace*, %struct.file*, %struct.mmu_notifier_mm*, i8, %struct.uprobes_state, %struct.atomic64_t, %struct.work_struct }
%struct.vm_area_struct = type { i64, i64, %struct.vm_area_struct*, %struct.vm_area_struct*, %struct.rb_node, i64, %struct.mm_struct*, %struct.pgprot, i64, %struct.anon.6, %struct.list_head, %struct.anon_vma*, %struct.vm_operations_struct*, i64, %struct.file*, i8*, %struct.mempolicy*, %struct.vm_userfaultfd_ctx }
%struct.pgprot = type { i64 }
%struct.anon.6 = type { %struct.rb_node, i64 }
%struct.anon_vma = type opaque
%struct.vm_userfaultfd_ctx = type {}
%struct.pgd_t = type { i64 }
%struct.mm_rss_stat = type { [4 x %struct.atomic64_t] }
%struct.linux_binfmt = type opaque
%struct.mm_context_t = type { %struct.ldt_struct*, i16, %struct.mutex, i8*, %struct.vdso_image*, %struct.atomic_t, i16, i16 }
%struct.ldt_struct = type opaque
%struct.vdso_image = type { i8*, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64 }
%struct.core_state = type { %struct.atomic_t, %struct.core_thread, %struct.completion }
%struct.core_thread = type { %struct.task_struct*, %struct.core_thread* }
%struct.completion = type { i32, %struct.__wait_queue_head }
%struct.kioctx_table = type opaque
%struct.mmu_notifier_mm = type opaque
%struct.uprobes_state = type {}
%struct.vmacache = type { i32, [4 x %struct.vm_area_struct*] }
%struct.task_rss_stat = type { i32, [4 x i32] }
%struct.restart_block = type { i64 (%struct.restart_block*)*, %union.anon.7 }
%union.anon.7 = type { %struct.anon.8 }
%struct.anon.8 = type { i32*, i32, i32, i32, i64, i32* }
%struct.pid_link = type { %struct.hlist_node, %struct.pid* }
%struct.pid = type { %struct.atomic_t, i32, [3 x %struct.hlist_head], %struct.callback_head, [1 x %struct.upid] }
%struct.upid = type { i32, %struct.pid_namespace*, %struct.hlist_node }
%struct.pid_namespace = type opaque
%struct.prev_cputime = type { i64, i64, %struct.raw_spinlock }
%struct.task_cputime = type { i64, i64, i64 }
%struct.nameidata = type opaque
%struct.sysv_sem = type { %struct.sem_undo_list* }
%struct.sem_undo_list = type opaque
%struct.sysv_shm = type { %struct.list_head }
%struct.fs_struct = type opaque
%struct.files_struct = type opaque
%struct.nsproxy = type opaque
%struct.signal_struct = type opaque
%struct.sighand_struct = type opaque
%struct.sigset_t = type { [1 x i64] }
%struct.sigpending = type { %struct.list_head, %struct.sigset_t }
%struct.audit_context = type opaque
%struct.seccomp = type { i32, %struct.seccomp_filter* }
%struct.seccomp_filter = type opaque
%struct.wake_q_node = type { %struct.wake_q_node* }
%struct.rb_root = type { %struct.rb_node* }
%struct.rt_mutex_waiter = type opaque
%struct.bio_list = type opaque
%struct.blk_plug = type opaque
%struct.reclaim_state = type opaque
%struct.io_context = type opaque
%struct.siginfo = type { i32, i32, i32, %union.anon.11 }
%union.anon.11 = type { %struct.anon.15, [80 x i8] }
%struct.anon.15 = type { i32, i32, i32, i64, i64 }
%struct.task_io_accounting = type { i64, i64, i64, i64, i64, i64, i64 }
%struct.nodemask_t = type { [1 x i64] }
%struct.css_set = type opaque
%struct.robust_list_head = type opaque
%struct.compat_robust_list_head = type opaque
%struct.futex_pi_state = type opaque
%struct.perf_event_context = type opaque
%struct.mempolicy = type opaque
%struct.tlbflush_unmap_batch = type { %struct.cpumask, i8, i8 }
%struct.pipe_inode_info = type opaque
%struct.page_frag = type { %struct.page*, i32, i32 }
%struct.task_delay_info = type opaque
%struct.vm_struct = type opaque
%struct.thread_struct = type { [3 x %struct.desc_struct], i64, i64, i16, i16, i16, i16, i32, i64, i64, [4 x %struct.perf_event*], i64, i64, i64, i64, i64, i64*, i64, i32, %struct.mm_segment_t, i8, [15 x i8], %struct.fpu }
%struct.desc_struct = type { %union.anon.21 }
%union.anon.21 = type { %struct.anon.22 }
%struct.anon.22 = type { i32, i32 }
%struct.perf_event = type opaque
%struct.mm_segment_t = type { i64 }
%struct.fpu = type { i32, i8, i8, [58 x i8], %union.fpregs_state }
%union.fpregs_state = type { %struct.xregs_state, [3520 x i8] }
%struct.xregs_state = type { %struct.fxregs_state, %struct.xstate_header, [0 x i8] }
%struct.fxregs_state = type { i16, i16, i16, i16, %union.anon.24, i32, i32, [32 x i32], [64 x i32], [12 x i32], %union.anon.27 }
%union.anon.24 = type { %struct.anon.25 }
%struct.anon.25 = type { i64, i64 }
%union.anon.27 = type { [12 x i32] }
%struct.xstate_header = type { i64, i64, [6 x i64] }
%struct.xattr_handler = type opaque
%struct.fscrypt_operations = type opaque
%struct.hlist_bl_head = type { %struct.hlist_bl_node* }
%struct.block_device = type { i32, i32, %struct.inode*, %struct.super_block*, %struct.mutex, i8*, i8*, i32, i8, %struct.list_head, %struct.block_device*, i32, %struct.hd_struct*, i32, i32, %struct.gendisk*, %struct.request_queue*, %struct.backing_dev_info*, %struct.list_head, i64, i32, %struct.mutex }
%struct.hd_struct = type opaque
%struct.gendisk = type opaque
%struct.request_queue = type opaque
%struct.backing_dev_info = type opaque
%struct.mtd_info = type opaque
%struct.hlist_node = type { %struct.hlist_node*, %struct.hlist_node** }
%struct.quota_info = type { i32, %struct.mutex, [3 x %struct.inode*], [3 x %struct.mem_dqinfo], [3 x %struct.quota_format_ops*] }
%struct.mem_dqinfo = type { %struct.quota_format_type*, i32, %struct.list_head, i64, i32, i32, i64, i64, i8* }
%struct.quota_format_type = type { i32, %struct.quota_format_ops*, %struct.module*, %struct.quota_format_type* }
%struct.quota_format_ops = type { i32 (%struct.super_block*, i32)*, i32 (%struct.super_block*, i32)*, i32 (%struct.super_block*, i32)*, i32 (%struct.super_block*, i32)*, i32 (%struct.dquot*)*, i32 (%struct.dquot*)*, i32 (%struct.dquot*)*, i32 (%struct.super_block*, %struct.kqid*)* }
%struct.sb_writers = type { i32, %struct.__wait_queue_head, [3 x %struct.percpu_rw_semaphore] }
%struct.percpu_rw_semaphore = type { %struct.rcu_sync, i32*, %struct.rw_semaphore, %struct.rcuwait, i32 }
%struct.rcu_sync = type { i32, i32, %struct.__wait_queue_head, i32, %struct.callback_head, i32 }
%struct.rcuwait = type { %struct.task_struct* }
%struct.shrinker = type { i64 (%struct.shrinker*, %struct.shrink_control*)*, i64 (%struct.shrinker*, %struct.shrink_control*)*, i32, i64, i64, %struct.list_head, %struct.atomic64_t* }
%struct.workqueue_struct = type opaque
%struct.hlist_head = type { %struct.hlist_node* }
%struct.user_namespace = type opaque
%struct.list_lru = type { %struct.list_lru_node* }
%struct.list_lru_node = type { %struct.spinlock, %struct.list_lru_one, [32 x i8] }
%struct.list_lru_one = type { %struct.list_head, i64 }
%struct.work_struct = type { %struct.atomic64_t, %struct.list_head, void (%struct.work_struct*)* }
%union.anon.44 = type { %struct.list_head }
%union.anon.45 = type { %struct.hlist_node }
%struct.inode = type { i16, i16, %struct.kuid_t, %struct.kgid_t, i32, %struct.posix_acl*, %struct.posix_acl*, %struct.inode_operations*, %struct.super_block*, %struct.address_space*, i8*, i64, %union.anon.37, i32, i64, %struct.timespec, %struct.timespec, %struct.timespec, %struct.spinlock, i16, i32, i64, i64, %struct.rw_semaphore, i64, i64, %struct.hlist_node, %struct.list_head, %struct.list_head, %struct.list_head, %struct.list_head, %union.anon.38, i64, %struct.atomic_t, %struct.atomic_t, %struct.atomic_t, %struct.file_operations*, %struct.file_lock_context*, %struct.address_space, %struct.list_head, %union.anon.41, i32, i32, %struct.hlist_head, i8* }
%struct.kgid_t = type { i32 }
%struct.posix_acl = type opaque
%struct.inode_operations = type { %struct.dentry* (%struct.inode*, %struct.dentry*, i32)*, i8* (%struct.dentry*, %struct.inode*, %struct.delayed_call*)*, i32 (%struct.inode*, i32)*, %struct.posix_acl* (%struct.inode*, i32)*, i32 (%struct.dentry*, i8*, i32)*, i32 (%struct.inode*, %struct.dentry*, i16, i1)*, i32 (%struct.dentry*, %struct.inode*, %struct.dentry*)*, i32 (%struct.inode*, %struct.dentry*)*, i32 (%struct.inode*, %struct.dentry*, i8*)*, i32 (%struct.inode*, %struct.dentry*, i16)*, i32 (%struct.inode*, %struct.dentry*)*, i32 (%struct.inode*, %struct.dentry*, i16, i32)*, i32 (%struct.inode*, %struct.dentry*, %struct.inode*, %struct.dentry*, i32)*, i32 (%struct.dentry*, %struct.iattr*)*, i32 (%struct.path*, %struct.kstat*, i32, i32)*, i64 (%struct.dentry*, i8*, i64)*, i32 (%struct.inode*, %struct.fiemap_extent_info*, i64, i64)*, i32 (%struct.inode*, %struct.timespec*, i32)*, i32 (%struct.inode*, %struct.dentry*, %struct.file*, i32, i16, i32*)*, i32 (%struct.inode*, %struct.dentry*, i16)*, i32 (%struct.inode*, %struct.posix_acl*, i32)*, [24 x i8] }
%struct.delayed_call = type { void (i8*)*, i8* }
%struct.iattr = type { i32, i16, %struct.kuid_t, %struct.kgid_t, i64, %struct.timespec, %struct.timespec, %struct.timespec, %struct.file* }
%struct.kstat = type { i32, i16, i32, i32, i64, i64, i64, i32, i32, %struct.kuid_t, %struct.kgid_t, i64, %struct.timespec, %struct.timespec, %struct.timespec, %struct.timespec, i64 }
%struct.fiemap_extent_info = type { i32, i32, i32, %struct.fiemap_extent* }
%struct.fiemap_extent = type { i64, i64, i64, [2 x i64], i32, [3 x i32] }
%union.anon.37 = type { i32 }
%struct.timespec = type { i64, i64 }
%union.anon.38 = type { %struct.callback_head }
%struct.file_lock_context = type { %struct.spinlock, %struct.list_head, %struct.list_head, %struct.list_head }
%struct.address_space = type { %struct.inode*, %struct.radix_tree_root, %struct.spinlock, %struct.atomic_t, %struct.rb_root, %struct.rw_semaphore, i64, i64, i64, %struct.address_space_operations*, i64, %struct.spinlock, i32, %struct.list_head, i8* }
%struct.radix_tree_root = type { i32, %struct.radix_tree_node* }
%struct.radix_tree_node = type { i8, i8, i8, i8, %struct.radix_tree_node*, %struct.radix_tree_root*, %union.anon.0, [64 x i8*], [3 x [1 x i64]] }
%union.anon.0 = type { %struct.list_head }
%struct.address_space_operations = type { i32 (%struct.page*, %struct.writeback_control*)*, i32 (%struct.file*, %struct.page*)*, i32 (%struct.address_space*, %struct.writeback_control*)*, i32 (%struct.page*)*, i32 (%struct.file*, %struct.address_space*, %struct.list_head*, i32)*, i32 (%struct.file*, %struct.address_space*, i64, i32, i32, %struct.page**, i8**)*, i32 (%struct.file*, %struct.address_space*, i64, i32, i32, %struct.page*, i8*)*, i64 (%struct.address_space*, i64)*, void (%struct.page*, i32, i32)*, i32 (%struct.page*, i32)*, void (%struct.page*)*, i64 (%struct.kiocb*, %struct.iov_iter*)*, i32 (%struct.address_space*, %struct.page*, %struct.page*, i32)*, i1 (%struct.page*, i32)*, void (%struct.page*)*, i32 (%struct.page*)*, i32 (%struct.page*, i64, i64)*, void (%struct.page*, i8*, i8*)*, i32 (%struct.address_space*, %struct.page*)*, i32 (%struct.swap_info_struct*, %struct.file*, i64*)*, void (%struct.file*)* }
%struct.kiocb = type { %struct.file*, i64, void (%struct.kiocb*, i64, i64)*, i8*, i32 }
%struct.iov_iter = type opaque
%struct.swap_info_struct = type opaque
%union.anon.41 = type { %struct.pipe_inode_info* }
%struct.file_operations = type { %struct.module*, i64 (%struct.file*, i64, i32)*, i64 (%struct.file*, i8*, i64, i64*)*, i64 (%struct.file*, i8*, i64, i64*)*, i64 (%struct.kiocb*, %struct.iov_iter*)*, i64 (%struct.kiocb*, %struct.iov_iter*)*, i32 (%struct.file*, %struct.dir_context*)*, i32 (%struct.file*, %struct.dir_context*)*, i32 (%struct.file*, %struct.poll_table_struct*)*, i64 (%struct.file*, i32, i64)*, i64 (%struct.file*, i32, i64)*, i32 (%struct.file*, %struct.vm_area_struct*)*, i32 (%struct.inode*, %struct.file*)*, i32 (%struct.file*, i8*)*, i32 (%struct.inode*, %struct.file*)*, i32 (%struct.file*, i64, i64, i32)*, i32 (i32, %struct.file*, i32)*, i32 (%struct.file*, i32, %struct.file_lock*)*, i64 (%struct.file*, %struct.page*, i32, i64, i64*, i32)*, i64 (%struct.file*, i64, i64, i64, i64)*, i32 (i32)*, i32 (%struct.file*, i32, %struct.file_lock*)*, i64 (%struct.pipe_inode_info*, %struct.file*, i64*, i64, i32)*, i64 (%struct.file*, i64*, %struct.pipe_inode_info*, i64, i32)*, i32 (%struct.file*, i64, %struct.file_lock**, i8**)*, i64 (%struct.file*, i32, i64, i64)*, void (%struct.seq_file*, %struct.file*)*, i64 (%struct.file*, i64, %struct.file*, i64, i64, i32)*, i32 (%struct.file*, i64, %struct.file*, i64, i64)*, i64 (%struct.file*, i64, i64, %struct.file*, i64)* }
%struct.dir_context = type { i32 (%struct.dir_context*, i8*, i32, i64, i64, i32)*, i64 }
%struct.poll_table_struct = type opaque
%struct.file_lock = type { %struct.file_lock*, %struct.list_head, %struct.hlist_node, %struct.list_head, i8*, i32, i8, i32, i32, %struct.pid*, %struct.__wait_queue_head, %struct.file*, i64, i64, %struct.fasync_struct*, i64, i64, %struct.file_lock_operations*, %struct.lock_manager_operations*, %union.anon.39 }
%struct.fasync_struct = type { %struct.spinlock, i32, i32, %struct.fasync_struct*, %struct.file*, %struct.callback_head }
%struct.file_lock_operations = type { void (%struct.file_lock*, %struct.file_lock*)*, void (%struct.file_lock*)* }
%struct.lock_manager_operations = type { i32 (%struct.file_lock*, %struct.file_lock*)*, i64 (%struct.file_lock*)*, i8* (i8*)*, void (i8*)*, void (%struct.file_lock*)*, i32 (%struct.file_lock*, i32)*, i1 (%struct.file_lock*)*, i32 (%struct.file_lock*, i32, %struct.list_head*)*, void (%struct.file_lock*, i8**)* }
%union.anon.39 = type { %struct.nfs_lock_info }
%struct.nfs_lock_info = type { i32, %struct.nlm_lockowner*, %struct.list_head }
%struct.nlm_lockowner = type opaque
%struct.atomic64_t = type { i64 }
%struct.fown_struct = type { %struct.rwlock_t, %struct.pid*, i32, %struct.kuid_t, %struct.kuid_t, i32 }
%struct.rwlock_t = type { %struct.qrwlock }
%struct.qrwlock = type { %struct.atomic_t, %struct.qspinlock }
%struct.cred = type opaque
%struct.file_ra_state = type { i64, i32, i32, i32, i32, i64 }
%struct.seq_file = type opaque
%struct.vm_operations_struct = type { void (%struct.vm_area_struct*)*, void (%struct.vm_area_struct*)*, i32 (%struct.vm_area_struct*)*, i32 (%struct.vm_fault*)*, i32 (%struct.vm_fault*, i32)*, void (%struct.vm_fault*, i64, i64)*, i32 (%struct.vm_fault*)*, i32 (%struct.vm_fault*)*, i32 (%struct.vm_area_struct*, i64, i8*, i32, i32)*, i8* (%struct.vm_area_struct*)*, i32 (%struct.vm_area_struct*, %struct.mempolicy*)*, %struct.mempolicy* (%struct.vm_area_struct*, i64)*, %struct.page* (%struct.vm_area_struct*, i64)* }
%struct.vm_fault = type { %struct.vm_area_struct*, i32, i32, i64, i64, %struct.pmd_t*, %struct.pud_t*, %struct.pte_t, %struct.page*, %struct.mem_cgroup*, %struct.page*, %struct.pte_t*, %struct.spinlock*, %struct.page* }
%struct.pmd_t = type { i64 }
%struct.pud_t = type { i64 }
%struct.pte_t = type { i64 }
%struct.kernfs_open_node = type opaque
%struct.kernfs_iattrs = type opaque
%struct.kref = type { %struct.refcount_struct }
%struct.refcount_struct = type { %struct.atomic_t }
%struct.module_param_attrs = type opaque
%struct.module_attribute = type { %struct.attribute, i64 (%struct.module_attribute*, %struct.module_kobject*, i8*)*, i64 (%struct.module_attribute*, %struct.module_kobject*, i8*, i64)*, void (%struct.module*, i8*)*, i32 (%struct.module*)*, void (%struct.module*)* }
%struct.mutex = type { %struct.atomic64_t, %struct.spinlock, %struct.optimistic_spin_queue, %struct.list_head }
%struct.kernel_symbol = type { i64, i8* }
%struct.exception_table_entry = type opaque
%struct.module_layout = type { i8*, i32, i32, i32, i32, %struct.mod_tree_node }
%struct.mod_tree_node = type { %struct.module*, %struct.latch_tree_node }
%struct.latch_tree_node = type { [2 x %struct.rb_node] }
%struct.mod_arch_specific = type {}
%struct.bug_entry = type { i32, i32, i16, i16 }
%struct.mod_kallsyms = type { %struct.elf64_sym*, i32, i8* }
%struct.elf64_sym = type { i32, i8, i8, i16, i64, i64 }
%struct.module_sect_attrs = type opaque
%struct.module_notes_attrs = type opaque
%struct.tracepoint = type { i8*, %struct.static_key, i32 ()*, void ()*, %struct.tracepoint_func* }
%struct.static_key = type { %struct.atomic_t }
%struct.tracepoint_func = type { i8*, i8*, i32 }
%struct.trace_event_call = type opaque
%struct.trace_enum_map = type opaque
%struct.list_head = type { %struct.list_head*, %struct.list_head* }
%struct.atomic_t = type { i32 }
%union.anon.46 = type { i8* }
%struct.class = type { i8*, %struct.module*, %struct.class_attribute*, %struct.attribute_group**, %struct.attribute_group**, %struct.kobject*, i32 (%struct.device*, %struct.kobj_uevent_env*)*, i8* (%struct.device*, i16*)*, void (%struct.class*)*, void (%struct.device*)*, i32 (%struct.device*, i32)*, i32 (%struct.device*)*, %struct.kobj_ns_type_operations*, i8* (%struct.device*)*, %struct.dev_pm_ops*, %struct.subsys_private* }
%struct.class_attribute = type { %struct.attribute, i64 (%struct.class*, %struct.class_attribute*, i8*)*, i64 (%struct.class*, %struct.class_attribute*, i8*, i64)* }
%struct.attribute_group = type { i8*, i16 (%struct.kobject*, %struct.attribute*, i32)*, i16 (%struct.kobject*, %struct.bin_attribute*, i32)*, %struct.attribute**, %struct.bin_attribute** }
%struct.bin_attribute = type { %struct.attribute, i64, i8*, i64 (%struct.file*, %struct.kobject*, %struct.bin_attribute*, i8*, i64, i64)*, i64 (%struct.file*, %struct.kobject*, %struct.bin_attribute*, i8*, i64, i64)*, i32 (%struct.file*, %struct.kobject*, %struct.bin_attribute*, %struct.vm_area_struct*)* }
%struct.device = type { %struct.device*, %struct.device_private*, %struct.kobject, i8*, %struct.device_type*, %struct.mutex, %struct.bus_type*, %struct.device_driver*, i8*, i8*, %struct.dev_links_info, %struct.dev_pm_info, %struct.dev_pm_domain*, %struct.irq_domain*, %struct.list_head, i32, %struct.dma_map_ops*, i64*, i64, i64, %struct.device_dma_parameters*, %struct.list_head, %struct.dma_coherent_mem*, %struct.dev_archdata, %struct.device_node*, %struct.fwnode_handle*, i32, i32, %struct.spinlock, %struct.list_head, %struct.klist_node, %struct.class*, %struct.attribute_group**, void (%struct.device*)*, %struct.iommu_group*, %struct.iommu_fwspec*, i8 }
%struct.device_private = type opaque
%struct.device_type = type { i8*, %struct.attribute_group**, i32 (%struct.device*, %struct.kobj_uevent_env*)*, i8* (%struct.device*, i16*, %struct.kuid_t*, %struct.kgid_t*)*, void (%struct.device*)*, %struct.dev_pm_ops* }
%struct.bus_type = type { i8*, i8*, %struct.device*, %struct.device_attribute*, %struct.attribute_group**, %struct.attribute_group**, %struct.attribute_group**, i32 (%struct.device*, %struct.device_driver*)*, i32 (%struct.device*, %struct.kobj_uevent_env*)*, i32 (%struct.device*)*, i32 (%struct.device*)*, void (%struct.device*)*, i32 (%struct.device*)*, i32 (%struct.device*)*, i32 (%struct.device*, i32)*, i32 (%struct.device*)*, i32 (%struct.device*)*, %struct.dev_pm_ops*, %struct.iommu_ops*, %struct.subsys_private*, %struct.lock_class_key }
%struct.device_attribute = type { %struct.attribute, i64 (%struct.device*, %struct.device_attribute*, i8*)*, i64 (%struct.device*, %struct.device_attribute*, i8*, i64)* }
%struct.iommu_ops = type opaque
%struct.device_driver = type { i8*, %struct.bus_type*, %struct.module*, i8*, i8, i32, %struct.of_device_id*, %struct.acpi_device_id*, i32 (%struct.device*)*, i32 (%struct.device*)*, void (%struct.device*)*, i32 (%struct.device*, i32)*, i32 (%struct.device*)*, %struct.attribute_group**, %struct.dev_pm_ops*, %struct.driver_private* }
%struct.of_device_id = type opaque
%struct.acpi_device_id = type opaque
%struct.driver_private = type opaque
%struct.dev_links_info = type { %struct.list_head, %struct.list_head, i32 }
%struct.dev_pm_info = type { %struct.pm_message, i16, %struct.spinlock, %struct.list_head, %struct.completion, %struct.wakeup_source*, i8, %struct.timer_list, i64, %struct.work_struct, %struct.__wait_queue_head, %struct.wake_irq*, %struct.atomic_t, %struct.atomic_t, i16, i32, i32, i32, i32, i32, i64, i64, i64, i64, %struct.pm_subsys_data*, void (%struct.device*, i32)*, %struct.dev_pm_qos* }
%struct.pm_message = type { i32 }
%struct.wakeup_source = type { i8*, %struct.list_head, %struct.spinlock, %struct.wake_irq*, %struct.timer_list, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i8 }
%struct.timer_list = type { %struct.hlist_node, i64, void (i64)*, i64, i32 }
%struct.wake_irq = type opaque
%struct.pm_subsys_data = type { %struct.spinlock, i32, %struct.list_head }
%struct.dev_pm_qos = type opaque
%struct.dev_pm_domain = type { %struct.dev_pm_ops, void (%struct.device*, i1)*, i32 (%struct.device*)*, void (%struct.device*)*, void (%struct.device*)* }
%struct.dev_pm_ops = type { i32 (%struct.device*)*, void (%struct.device*)*, i32 (%struct.device*)*, i32 (%struct.device*)*, i32 (%struct.device*)*, i32 (%struct.device*)*, i32 (%struct.device*)*, i32 (%struct.device*)*, i32 (%struct.device*)*, i32 (%struct.device*)*, i32 (%struct.device*)*, i32 (%struct.device*)*, i32 (%struct.device*)*, i32 (%struct.device*)*, i32 (%struct.device*)*, i32 (%struct.device*)*, i32 (%struct.device*)*, i32 (%struct.device*)*, i32 (%struct.device*)*, i32 (%struct.device*)*, i32 (%struct.device*)*, i32 (%struct.device*)*, i32 (%struct.device*)* }
%struct.irq_domain = type opaque
%struct.dma_map_ops = type opaque
%struct.device_dma_parameters = type { i32, i64 }
%struct.dma_coherent_mem = type opaque
%struct.dev_archdata = type { i8* }
%struct.device_node = type opaque
%struct.fwnode_handle = type opaque
%struct.klist_node = type { i8*, %struct.list_head, %struct.kref }
%struct.iommu_group = type opaque
%struct.iommu_fwspec = type opaque
%struct.subsys_private = type opaque
%struct.idr = type { %struct.radix_tree_root, i32 }
%struct.memstick_host = type { %struct.mutex, i32, i32, %struct.work_struct, %struct.device, %struct.memstick_dev*, i32, {}*, i32 (%struct.memstick_host*, i32, i32)*, [0 x i64] }
%struct.memstick_dev = type { %struct.memstick_device_id, %struct.memstick_host*, %struct.ms_register_addr, %struct.completion, %struct.memstick_request, i32 (%struct.memstick_dev*)*, i32 (%struct.memstick_dev*, %struct.memstick_request**)*, void (%struct.memstick_dev*)*, void (%struct.memstick_dev*)*, %struct.device }
%struct.memstick_device_id = type { i8, i8, i8, i8 }
%struct.ms_register_addr = type { i8, i8, i8, i8 }
%struct.memstick_request = type { i8, i8, i8, i32, %union.anon.47 }
%union.anon.47 = type { %struct.scatterlist }
%struct.scatterlist = type { i64, i32, i32, i64, i32 }
%struct.anon.48 = type { i8, [15 x i8] }
%union.anon.49 = type { %struct.list_head* }
%struct.memstick_driver = type { %struct.memstick_device_id*, i32 (%struct.memstick_dev*)*, void (%struct.memstick_dev*)*, i32 (%struct.memstick_dev*, i32)*, i32 (%struct.memstick_dev*)*, %struct.device_driver }
%struct.ms_id_register = type { i8, i8, i8, i8 }
%union.anon.50 = type { i8 }

@__param_str_cmd_retries = internal constant [21 x i8] c"memstick.cmd_retries\00", align 16
@param_ops_uint = external constant %struct.kernel_param_ops, align 8
@cmd_retries = internal global i32 3, align 4
@__param_cmd_retries = internal constant %struct.kernel_param { i8* getelementptr inbounds ([21 x i8], [21 x i8]* @__param_str_cmd_retries, i32 0, i32 0), %struct.module* null, %struct.kernel_param_ops* @param_ops_uint, i16 420, i8 -1, i8 0, %union.anon.46 { i8* bitcast (i32* @cmd_retries to i8*) } }, section "__param", align 8
@workqueue = internal global %struct.workqueue_struct* null, align 8
@__kstrtab_memstick_detect_change = internal constant [23 x i8] c"memstick_detect_change\00", section "__ksymtab_strings", align 1
@__ksymtab_memstick_detect_change = internal constant %struct.kernel_symbol { i64 ptrtoint (void (%struct.memstick_host*)* @memstick_detect_change to i64), i8* getelementptr inbounds ([23 x i8], [23 x i8]* @__kstrtab_memstick_detect_change, i32 0, i32 0) }, section "___ksymtab+memstick_detect_change", align 8
@__kstrtab_memstick_next_req = internal constant [18 x i8] c"memstick_next_req\00", section "__ksymtab_strings", align 1
@__ksymtab_memstick_next_req = internal constant %struct.kernel_symbol { i64 ptrtoint (i32 (%struct.memstick_host*, %struct.memstick_request**)* @memstick_next_req to i64), i8* getelementptr inbounds ([18 x i8], [18 x i8]* @__kstrtab_memstick_next_req, i32 0, i32 0) }, section "___ksymtab+memstick_next_req", align 8
@__kstrtab_memstick_new_req = internal constant [17 x i8] c"memstick_new_req\00", section "__ksymtab_strings", align 1
@__ksymtab_memstick_new_req = internal constant %struct.kernel_symbol { i64 ptrtoint (void (%struct.memstick_host*)* @memstick_new_req to i64), i8* getelementptr inbounds ([17 x i8], [17 x i8]* @__kstrtab_memstick_new_req, i32 0, i32 0) }, section "___ksymtab+memstick_new_req", align 8
@__kstrtab_memstick_init_req_sg = internal constant [21 x i8] c"memstick_init_req_sg\00", section "__ksymtab_strings", align 1
@__ksymtab_memstick_init_req_sg = internal constant %struct.kernel_symbol { i64 ptrtoint (void (%struct.memstick_request*, i8, %struct.scatterlist*)* @memstick_init_req_sg to i64), i8* getelementptr inbounds ([21 x i8], [21 x i8]* @__kstrtab_memstick_init_req_sg, i32 0, i32 0) }, section "___ksymtab+memstick_init_req_sg", align 8
@__kstrtab_memstick_init_req = internal constant [18 x i8] c"memstick_init_req\00", section "__ksymtab_strings", align 1
@__ksymtab_memstick_init_req = internal constant %struct.kernel_symbol { i64 ptrtoint (void (%struct.memstick_request*, i8, i8*, i64)* @memstick_init_req to i64), i8* getelementptr inbounds ([18 x i8], [18 x i8]* @__kstrtab_memstick_init_req, i32 0, i32 0) }, section "___ksymtab+memstick_init_req", align 8
@__kstrtab_memstick_set_rw_addr = internal constant [21 x i8] c"memstick_set_rw_addr\00", section "__ksymtab_strings", align 1
@__ksymtab_memstick_set_rw_addr = internal constant %struct.kernel_symbol { i64 ptrtoint (i32 (%struct.memstick_dev*)* @memstick_set_rw_addr to i64), i8* getelementptr inbounds ([21 x i8], [21 x i8]* @__kstrtab_memstick_set_rw_addr, i32 0, i32 0) }, section "___ksymtab+memstick_set_rw_addr", align 8
@memstick_alloc_host.__key = internal global %struct.lock_class_key zeroinitializer, align 1
@.str = private unnamed_addr constant [12 x i8] c"&host->lock\00", align 1
@memstick_host_class = internal global %struct.class { i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.4, i32 0, i32 0), %struct.module* null, %struct.class_attribute* null, %struct.attribute_group** null, %struct.attribute_group** null, %struct.kobject* null, i32 (%struct.device*, %struct.kobj_uevent_env*)* null, i8* (%struct.device*, i16*)* null, void (%struct.class*)* null, void (%struct.device*)* @memstick_free, i32 (%struct.device*, i32)* null, i32 (%struct.device*)* null, %struct.kobj_ns_type_operations* null, i8* (%struct.device*)* null, %struct.dev_pm_ops* null, %struct.subsys_private* null }, align 8
@__kstrtab_memstick_alloc_host = internal constant [20 x i8] c"memstick_alloc_host\00", section "__ksymtab_strings", align 1
@__ksymtab_memstick_alloc_host = internal constant %struct.kernel_symbol { i64 ptrtoint (%struct.memstick_host* (i32, %struct.device*)* @memstick_alloc_host to i64), i8* getelementptr inbounds ([20 x i8], [20 x i8]* @__kstrtab_memstick_alloc_host, i32 0, i32 0) }, section "___ksymtab+memstick_alloc_host", align 8
@memstick_host_lock = internal global %struct.spinlock zeroinitializer, align 4
@memstick_host_idr = internal global %struct.idr { %struct.radix_tree_root { i32 100663296, %struct.radix_tree_node* null }, i32 0 }, align 8
@.str.1 = private unnamed_addr constant [11 x i8] c"memstick%u\00", align 1
@__kstrtab_memstick_add_host = internal constant [18 x i8] c"memstick_add_host\00", section "__ksymtab_strings", align 1
@__ksymtab_memstick_add_host = internal constant %struct.kernel_symbol { i64 ptrtoint (i32 (%struct.memstick_host*)* @memstick_add_host to i64), i8* getelementptr inbounds ([18 x i8], [18 x i8]* @__kstrtab_memstick_add_host, i32 0, i32 0) }, section "___ksymtab+memstick_add_host", align 8
@__kstrtab_memstick_remove_host = internal constant [21 x i8] c"memstick_remove_host\00", section "__ksymtab_strings", align 1
@__ksymtab_memstick_remove_host = internal constant %struct.kernel_symbol { i64 ptrtoint (void (%struct.memstick_host*)* @memstick_remove_host to i64), i8* getelementptr inbounds ([21 x i8], [21 x i8]* @__kstrtab_memstick_remove_host, i32 0, i32 0) }, section "___ksymtab+memstick_remove_host", align 8
@__kstrtab_memstick_free_host = internal constant [19 x i8] c"memstick_free_host\00", section "__ksymtab_strings", align 1
@__ksymtab_memstick_free_host = internal constant %struct.kernel_symbol { i64 ptrtoint (void (%struct.memstick_host*)* @memstick_free_host to i64), i8* getelementptr inbounds ([19 x i8], [19 x i8]* @__kstrtab_memstick_free_host, i32 0, i32 0) }, section "___ksymtab+memstick_free_host", align 8
@__kstrtab_memstick_suspend_host = internal constant [22 x i8] c"memstick_suspend_host\00", section "__ksymtab_strings", align 1
@__ksymtab_memstick_suspend_host = internal constant %struct.kernel_symbol { i64 ptrtoint (void (%struct.memstick_host*)* @memstick_suspend_host to i64), i8* getelementptr inbounds ([22 x i8], [22 x i8]* @__kstrtab_memstick_suspend_host, i32 0, i32 0) }, section "___ksymtab+memstick_suspend_host", align 8
@__kstrtab_memstick_resume_host = internal constant [21 x i8] c"memstick_resume_host\00", section "__ksymtab_strings", align 1
@__ksymtab_memstick_resume_host = internal constant %struct.kernel_symbol { i64 ptrtoint (void (%struct.memstick_host*)* @memstick_resume_host to i64), i8* getelementptr inbounds ([21 x i8], [21 x i8]* @__kstrtab_memstick_resume_host, i32 0, i32 0) }, section "___ksymtab+memstick_resume_host", align 8
@memstick_bus_type = internal global %struct.bus_type { i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.5, i32 0, i32 0), i8* null, %struct.device* null, %struct.device_attribute* null, %struct.attribute_group** null, %struct.attribute_group** getelementptr inbounds ([2 x %struct.attribute_group*], [2 x %struct.attribute_group*]* @memstick_dev_groups, i32 0, i32 0), %struct.attribute_group** null, i32 (%struct.device*, %struct.device_driver*)* @memstick_bus_match, i32 (%struct.device*, %struct.kobj_uevent_env*)* @memstick_uevent, i32 (%struct.device*)* @memstick_device_probe, i32 (%struct.device*)* @memstick_device_remove, void (%struct.device*)* null, i32 (%struct.device*)* null, i32 (%struct.device*)* null, i32 (%struct.device*, i32)* @memstick_device_suspend, i32 (%struct.device*)* @memstick_device_resume, i32 (%struct.device*)* null, %struct.dev_pm_ops* null, %struct.iommu_ops* null, %struct.subsys_private* null, %struct.lock_class_key zeroinitializer }, align 8
@__kstrtab_memstick_register_driver = internal constant [25 x i8] c"memstick_register_driver\00", section "__ksymtab_strings", align 1
@__ksymtab_memstick_register_driver = internal constant %struct.kernel_symbol { i64 ptrtoint (i32 (%struct.memstick_driver*)* @memstick_register_driver to i64), i8* getelementptr inbounds ([25 x i8], [25 x i8]* @__kstrtab_memstick_register_driver, i32 0, i32 0) }, section "___ksymtab+memstick_register_driver", align 8
@__kstrtab_memstick_unregister_driver = internal constant [27 x i8] c"memstick_unregister_driver\00", section "__ksymtab_strings", align 1
@__ksymtab_memstick_unregister_driver = internal constant %struct.kernel_symbol { i64 ptrtoint (void (%struct.memstick_driver*)* @memstick_unregister_driver to i64), i8* getelementptr inbounds ([27 x i8], [27 x i8]* @__kstrtab_memstick_unregister_driver, i32 0, i32 0) }, section "___ksymtab+memstick_unregister_driver", align 8
@__initcall_memstick_init6 = internal global i32 ()* @memstick_init, section ".initcall6.init", align 8
@__exitcall_memstick_exit = internal global void ()* @memstick_exit, section ".exitcall.exit", align 8
@.str.2 = private unnamed_addr constant [3 x i8] c"%s\00", align 1
@init_completion.__key = internal global %struct.lock_class_key zeroinitializer, align 1
@.str.3 = private unnamed_addr constant [9 x i8] c"&x->wait\00", align 1
@.str.4 = private unnamed_addr constant [14 x i8] c"memstick_host\00", align 1
@.str.5 = private unnamed_addr constant [9 x i8] c"memstick\00", align 1
@memstick_dev_groups = internal global [2 x %struct.attribute_group*] [%struct.attribute_group* @memstick_dev_group, %struct.attribute_group* null], align 16
@memstick_dev_group = internal constant %struct.attribute_group { i8* null, i16 (%struct.kobject*, %struct.attribute*, i32)* null, i16 (%struct.kobject*, %struct.bin_attribute*, i32)* null, %struct.attribute** getelementptr inbounds ([4 x %struct.attribute*], [4 x %struct.attribute*]* @memstick_dev_attrs, i32 0, i32 0), %struct.bin_attribute** null }, align 8
@memstick_dev_attrs = internal global [4 x %struct.attribute*] [%struct.attribute* getelementptr inbounds (%struct.device_attribute, %struct.device_attribute* @dev_attr_type, i32 0, i32 0), %struct.attribute* getelementptr inbounds (%struct.device_attribute, %struct.device_attribute* @dev_attr_category, i32 0, i32 0), %struct.attribute* getelementptr inbounds (%struct.device_attribute, %struct.device_attribute* @dev_attr_class, i32 0, i32 0), %struct.attribute* null], align 16
@dev_attr_type = internal global %struct.device_attribute { %struct.attribute { i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.6, i32 0, i32 0), i16 292 }, i64 (%struct.device*, %struct.device_attribute*, i8*)* @type_show, i64 (%struct.device*, %struct.device_attribute*, i8*, i64)* null }, align 8
@dev_attr_category = internal global %struct.device_attribute { %struct.attribute { i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.8, i32 0, i32 0), i16 292 }, i64 (%struct.device*, %struct.device_attribute*, i8*)* @category_show, i64 (%struct.device*, %struct.device_attribute*, i8*, i64)* null }, align 8
@dev_attr_class = internal global %struct.device_attribute { %struct.attribute { i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.9, i32 0, i32 0), i16 292 }, i64 (%struct.device*, %struct.device_attribute*, i8*)* @class_show, i64 (%struct.device*, %struct.device_attribute*, i8*, i64)* null }, align 8
@.str.6 = private unnamed_addr constant [5 x i8] c"type\00", align 1
@.str.7 = private unnamed_addr constant [5 x i8] c"%02X\00", align 1
@.str.8 = private unnamed_addr constant [9 x i8] c"category\00", align 1
@.str.9 = private unnamed_addr constant [6 x i8] c"class\00", align 1
@.str.10 = private unnamed_addr constant [19 x i8] c"MEMSTICK_TYPE=%02X\00", align 1
@.str.11 = private unnamed_addr constant [23 x i8] c"MEMSTICK_CATEGORY=%02X\00", align 1
@.str.12 = private unnamed_addr constant [20 x i8] c"MEMSTICK_CLASS=%02X\00", align 1
@.str.13 = private unnamed_addr constant [10 x i8] c"kmemstick\00", align 1
@memstick_init.__key = internal global %struct.lock_class_key zeroinitializer, align 1
@llvm.used = appending global [18 x i8*] [i8* bitcast (%struct.kernel_param* @__param_cmd_retries to i8*), i8* bitcast (%struct.kernel_symbol* @__ksymtab_memstick_detect_change to i8*), i8* bitcast (%struct.kernel_symbol* @__ksymtab_memstick_next_req to i8*), i8* bitcast (%struct.kernel_symbol* @__ksymtab_memstick_new_req to i8*), i8* bitcast (%struct.kernel_symbol* @__ksymtab_memstick_init_req_sg to i8*), i8* bitcast (%struct.kernel_symbol* @__ksymtab_memstick_init_req to i8*), i8* bitcast (%struct.kernel_symbol* @__ksymtab_memstick_set_rw_addr to i8*), i8* bitcast (%struct.kernel_symbol* @__ksymtab_memstick_alloc_host to i8*), i8* bitcast (%struct.kernel_symbol* @__ksymtab_memstick_add_host to i8*), i8* bitcast (%struct.kernel_symbol* @__ksymtab_memstick_remove_host to i8*), i8* bitcast (%struct.kernel_symbol* @__ksymtab_memstick_free_host to i8*), i8* bitcast (%struct.kernel_symbol* @__ksymtab_memstick_suspend_host to i8*), i8* bitcast (%struct.kernel_symbol* @__ksymtab_memstick_resume_host to i8*), i8* bitcast (%struct.kernel_symbol* @__ksymtab_memstick_register_driver to i8*), i8* bitcast (%struct.kernel_symbol* @__ksymtab_memstick_unregister_driver to i8*), i8* bitcast (void ()* @memstick_exit to i8*), i8* bitcast (i32 ()** @__initcall_memstick_init6 to i8*), i8* bitcast (void ()** @__exitcall_memstick_exit to i8*)], section "llvm.metadata"

; Function Attrs: noinline nounwind uwtable
define void @memstick_detect_change(%struct.memstick_host*) #0 {
  %2 = load %struct.workqueue_struct*, %struct.workqueue_struct** @workqueue, align 8
  %3 = getelementptr inbounds %struct.memstick_host, %struct.memstick_host* %0, i32 0, i32 3
  %4 = call zeroext i1 @queue_work(%struct.workqueue_struct* %2, %struct.work_struct* %3)
  ret void
}

; Function Attrs: noinline nounwind uwtable
define internal zeroext i1 @queue_work(%struct.workqueue_struct*, %struct.work_struct*) #0 {
  %3 = call zeroext i1 @queue_work_on(i32 64, %struct.workqueue_struct* %0, %struct.work_struct* %1)
  ret i1 %3
}

; Function Attrs: noinline nounwind uwtable
define i32 @memstick_next_req(%struct.memstick_host*, %struct.memstick_request**) #0 {
  %3 = load %struct.memstick_request*, %struct.memstick_request** %1, align 8
  %4 = icmp ne %struct.memstick_request* %3, null
  br i1 %4, label %5, label %20

; <label>:5:                                      ; preds = %2
  %6 = load %struct.memstick_request*, %struct.memstick_request** %1, align 8
  %7 = getelementptr inbounds %struct.memstick_request, %struct.memstick_request* %6, i32 0, i32 3
  %8 = load i32, i32* %7, align 4
  %9 = icmp ne i32 %8, 0
  br i1 %9, label %10, label %20

; <label>:10:                                     ; preds = %5
  %11 = getelementptr inbounds %struct.memstick_host, %struct.memstick_host* %0, i32 0, i32 6
  %12 = load i32, i32* %11, align 8
  %13 = icmp ne i32 %12, 0
  br i1 %13, label %14, label %20

; <label>:14:                                     ; preds = %10
  %15 = load %struct.memstick_request*, %struct.memstick_request** %1, align 8
  %16 = getelementptr inbounds %struct.memstick_request, %struct.memstick_request* %15, i32 0, i32 3
  store i32 -6, i32* %16, align 4
  %17 = getelementptr inbounds %struct.memstick_host, %struct.memstick_host* %0, i32 0, i32 6
  %18 = load i32, i32* %17, align 8
  %19 = add i32 %18, -1
  store i32 %19, i32* %17, align 8
  br label %48

; <label>:20:                                     ; preds = %10, %5, %2
  %21 = getelementptr inbounds %struct.memstick_host, %struct.memstick_host* %0, i32 0, i32 5
  %22 = load %struct.memstick_dev*, %struct.memstick_dev** %21, align 32
  %23 = icmp ne %struct.memstick_dev* %22, null
  br i1 %23, label %24, label %38

; <label>:24:                                     ; preds = %20
  %25 = getelementptr inbounds %struct.memstick_host, %struct.memstick_host* %0, i32 0, i32 5
  %26 = load %struct.memstick_dev*, %struct.memstick_dev** %25, align 32
  %27 = getelementptr inbounds %struct.memstick_dev, %struct.memstick_dev* %26, i32 0, i32 6
  %28 = load i32 (%struct.memstick_dev*, %struct.memstick_request**)*, i32 (%struct.memstick_dev*, %struct.memstick_request**)** %27, align 8
  %29 = icmp ne i32 (%struct.memstick_dev*, %struct.memstick_request**)* %28, null
  br i1 %29, label %30, label %38

; <label>:30:                                     ; preds = %24
  %31 = getelementptr inbounds %struct.memstick_host, %struct.memstick_host* %0, i32 0, i32 5
  %32 = load %struct.memstick_dev*, %struct.memstick_dev** %31, align 32
  %33 = getelementptr inbounds %struct.memstick_dev, %struct.memstick_dev* %32, i32 0, i32 6
  %34 = load i32 (%struct.memstick_dev*, %struct.memstick_request**)*, i32 (%struct.memstick_dev*, %struct.memstick_request**)** %33, align 8
  %35 = getelementptr inbounds %struct.memstick_host, %struct.memstick_host* %0, i32 0, i32 5
  %36 = load %struct.memstick_dev*, %struct.memstick_dev** %35, align 32
  %37 = call i32 %34(%struct.memstick_dev* %36, %struct.memstick_request** %1)
  br label %38

; <label>:38:                                     ; preds = %30, %24, %20
  %.01 = phi i32 [ %37, %30 ], [ -6, %24 ], [ -6, %20 ]
  %39 = icmp ne i32 %.01, 0
  br i1 %39, label %47, label %40

; <label>:40:                                     ; preds = %38
  %41 = load i32, i32* @cmd_retries, align 4
  %42 = icmp ugt i32 %41, 1
  %43 = load i32, i32* @cmd_retries, align 4
  %44 = sub i32 %43, 1
  %45 = select i1 %42, i32 %44, i32 1
  %46 = getelementptr inbounds %struct.memstick_host, %struct.memstick_host* %0, i32 0, i32 6
  store i32 %45, i32* %46, align 8
  br label %48

; <label>:47:                                     ; preds = %38
  store %struct.memstick_request* null, %struct.memstick_request** %1, align 8
  br label %48

; <label>:48:                                     ; preds = %40, %47, %14
  %.0 = phi i32 [ 0, %14 ], [ %.01, %47 ], [ %.01, %40 ]
  ret i32 %.0
}

; Function Attrs: noinline nounwind uwtable
define void @memstick_new_req(%struct.memstick_host*) #0 {
  %2 = getelementptr inbounds %struct.memstick_host, %struct.memstick_host* %0, i32 0, i32 5
  %3 = load %struct.memstick_dev*, %struct.memstick_dev** %2, align 32
  %4 = icmp ne %struct.memstick_dev* %3, null
  br i1 %4, label %5, label %14

; <label>:5:                                      ; preds = %1
  %6 = load i32, i32* @cmd_retries, align 4
  %7 = getelementptr inbounds %struct.memstick_host, %struct.memstick_host* %0, i32 0, i32 6
  store i32 %6, i32* %7, align 8
  %8 = getelementptr inbounds %struct.memstick_host, %struct.memstick_host* %0, i32 0, i32 5
  %9 = load %struct.memstick_dev*, %struct.memstick_dev** %8, align 32
  %10 = getelementptr inbounds %struct.memstick_dev, %struct.memstick_dev* %9, i32 0, i32 3
  call void @reinit_completion(%struct.completion* %10)
  %11 = getelementptr inbounds %struct.memstick_host, %struct.memstick_host* %0, i32 0, i32 7
  %12 = bitcast {}** %11 to void (%struct.memstick_host*)**
  %13 = load void (%struct.memstick_host*)*, void (%struct.memstick_host*)** %12, align 16
  call void %13(%struct.memstick_host* %0)
  br label %14

; <label>:14:                                     ; preds = %5, %1
  ret void
}

; Function Attrs: noinline nounwind uwtable
define internal void @reinit_completion(%struct.completion*) #0 {
  %2 = getelementptr inbounds %struct.completion, %struct.completion* %0, i32 0, i32 0
  store i32 0, i32* %2, align 8
  ret void
}

; Function Attrs: noinline nounwind uwtable
define void @memstick_init_req_sg(%struct.memstick_request*, i8 zeroext, %struct.scatterlist*) #0 {
  %4 = getelementptr inbounds %struct.memstick_request, %struct.memstick_request* %0, i32 0, i32 0
  store i8 %1, i8* %4, align 8
  %5 = zext i8 %1 to i32
  %6 = and i32 %5, 8
  %7 = icmp ne i32 %6, 0
  %8 = getelementptr inbounds %struct.memstick_request, %struct.memstick_request* %0, i32 0, i32 1
  %9 = load i8, i8* %8, align 1
  %10 = and i8 %9, -2
  %11 = or i8 %10, 1
  %.sink = select i1 %7, i8 %11, i8 %10
  store i8 %.sink, i8* %8, align 1
  %12 = getelementptr inbounds %struct.memstick_request, %struct.memstick_request* %0, i32 0, i32 4
  %13 = bitcast %union.anon.47* %12 to %struct.scatterlist*
  %14 = bitcast %struct.scatterlist* %13 to i8*
  %15 = bitcast %struct.scatterlist* %2 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %14, i8* %15, i64 32, i32 8, i1 false)
  %16 = getelementptr inbounds %struct.memstick_request, %struct.memstick_request* %0, i32 0, i32 1
  %17 = load i8, i8* %16, align 1
  %18 = and i8 %17, -5
  %19 = or i8 %18, 4
  store i8 %19, i8* %16, align 1
  %20 = zext i8 %1 to i32
  %21 = icmp eq i32 %20, 14
  %22 = zext i8 %1 to i32
  %23 = icmp eq i32 %22, 9
  %or.cond = or i1 %21, %23
  %24 = getelementptr inbounds %struct.memstick_request, %struct.memstick_request* %0, i32 0, i32 1
  %25 = load i8, i8* %24, align 1
  %26 = and i8 %25, -3
  %27 = or i8 %26, 2
  %.sink2 = select i1 %or.cond, i8 %27, i8 %26
  store i8 %.sink2, i8* %24, align 1
  ret void
}

; Function Attrs: argmemonly nounwind
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* nocapture writeonly, i8* nocapture readonly, i64, i32, i1) #1

; Function Attrs: noinline nounwind uwtable
define void @memstick_init_req(%struct.memstick_request*, i8 zeroext, i8*, i64) #0 {
  %5 = getelementptr inbounds %struct.memstick_request, %struct.memstick_request* %0, i32 0, i32 0
  store i8 %1, i8* %5, align 8
  %6 = zext i8 %1 to i32
  %7 = and i32 %6, 8
  %8 = icmp ne i32 %7, 0
  %9 = getelementptr inbounds %struct.memstick_request, %struct.memstick_request* %0, i32 0, i32 1
  %10 = load i8, i8* %9, align 1
  %11 = and i8 %10, -2
  %12 = or i8 %11, 1
  %.sink = select i1 %8, i8 %12, i8 %11
  store i8 %.sink, i8* %9, align 1
  %13 = icmp ugt i64 %3, 15
  %. = select i1 %13, i64 15, i64 %3
  %14 = trunc i64 %. to i8
  %15 = getelementptr inbounds %struct.memstick_request, %struct.memstick_request* %0, i32 0, i32 4
  %16 = bitcast %union.anon.47* %15 to %struct.anon.48*
  %17 = getelementptr inbounds %struct.anon.48, %struct.anon.48* %16, i32 0, i32 0
  store i8 %14, i8* %17, align 8
  %18 = getelementptr inbounds %struct.memstick_request, %struct.memstick_request* %0, i32 0, i32 1
  %19 = load i8, i8* %18, align 1
  %20 = and i8 %19, 1
  %21 = zext i8 %20 to i32
  %22 = icmp eq i32 %21, 1
  br i1 %22, label %23, label %33

; <label>:23:                                     ; preds = %4
  %24 = getelementptr inbounds %struct.memstick_request, %struct.memstick_request* %0, i32 0, i32 4
  %25 = bitcast %union.anon.47* %24 to %struct.anon.48*
  %26 = getelementptr inbounds %struct.anon.48, %struct.anon.48* %25, i32 0, i32 0
  %27 = load i8, i8* %26, align 8
  %28 = zext i8 %27 to i64
  %29 = getelementptr inbounds %struct.memstick_request, %struct.memstick_request* %0, i32 0, i32 4
  %30 = bitcast %union.anon.47* %29 to %struct.anon.48*
  %31 = getelementptr inbounds %struct.anon.48, %struct.anon.48* %30, i32 0, i32 1
  %32 = getelementptr inbounds [15 x i8], [15 x i8]* %31, i32 0, i32 0
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %32, i8* %2, i64 %28, i32 1, i1 false)
  br label %33

; <label>:33:                                     ; preds = %23, %4
  %34 = getelementptr inbounds %struct.memstick_request, %struct.memstick_request* %0, i32 0, i32 1
  %35 = load i8, i8* %34, align 1
  %36 = and i8 %35, -5
  store i8 %36, i8* %34, align 1
  %37 = zext i8 %1 to i32
  %38 = icmp eq i32 %37, 14
  %39 = zext i8 %1 to i32
  %40 = icmp eq i32 %39, 9
  %or.cond = or i1 %38, %40
  %41 = getelementptr inbounds %struct.memstick_request, %struct.memstick_request* %0, i32 0, i32 1
  %42 = load i8, i8* %41, align 1
  %43 = and i8 %42, -3
  %44 = or i8 %43, 2
  %.sink2 = select i1 %or.cond, i8 %44, i8 %43
  store i8 %.sink2, i8* %41, align 1
  ret void
}

; Function Attrs: noinline nounwind uwtable
define i32 @memstick_set_rw_addr(%struct.memstick_dev*) #0 {
  %2 = getelementptr inbounds %struct.memstick_dev, %struct.memstick_dev* %0, i32 0, i32 6
  store i32 (%struct.memstick_dev*, %struct.memstick_request**)* @h_memstick_set_rw_addr, i32 (%struct.memstick_dev*, %struct.memstick_request**)** %2, align 8
  %3 = getelementptr inbounds %struct.memstick_dev, %struct.memstick_dev* %0, i32 0, i32 1
  %4 = load %struct.memstick_host*, %struct.memstick_host** %3, align 8
  call void @memstick_new_req(%struct.memstick_host* %4)
  %5 = getelementptr inbounds %struct.memstick_dev, %struct.memstick_dev* %0, i32 0, i32 3
  call void @wait_for_completion(%struct.completion* %5)
  %6 = getelementptr inbounds %struct.memstick_dev, %struct.memstick_dev* %0, i32 0, i32 4
  %7 = getelementptr inbounds %struct.memstick_request, %struct.memstick_request* %6, i32 0, i32 3
  %8 = load i32, i32* %7, align 4
  ret i32 %8
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @h_memstick_set_rw_addr(%struct.memstick_dev*, %struct.memstick_request**) #0 {
  %3 = load %struct.memstick_request*, %struct.memstick_request** %1, align 8
  %4 = icmp ne %struct.memstick_request* %3, null
  br i1 %4, label %10, label %5

; <label>:5:                                      ; preds = %2
  %6 = getelementptr inbounds %struct.memstick_dev, %struct.memstick_dev* %0, i32 0, i32 4
  %7 = getelementptr inbounds %struct.memstick_dev, %struct.memstick_dev* %0, i32 0, i32 2
  %8 = bitcast %struct.ms_register_addr* %7 to i8*
  call void @memstick_init_req(%struct.memstick_request* %6, i8 zeroext 8, i8* %8, i64 4)
  %9 = getelementptr inbounds %struct.memstick_dev, %struct.memstick_dev* %0, i32 0, i32 4
  store %struct.memstick_request* %9, %struct.memstick_request** %1, align 8
  br label %12

; <label>:10:                                     ; preds = %2
  %11 = getelementptr inbounds %struct.memstick_dev, %struct.memstick_dev* %0, i32 0, i32 3
  call void @complete(%struct.completion* %11)
  br label %12

; <label>:12:                                     ; preds = %10, %5
  %.0 = phi i32 [ -11, %10 ], [ 0, %5 ]
  ret i32 %.0
}

declare void @wait_for_completion(%struct.completion*) #2

; Function Attrs: noinline nounwind uwtable
define %struct.memstick_host* @memstick_alloc_host(i32, %struct.device*) #0 {
  %3 = alloca %struct.atomic64_t, align 8
  %4 = zext i32 %0 to i64
  %5 = add i64 832, %4
  %6 = call i8* @kzalloc(i64 %5, i32 20971712)
  %7 = bitcast i8* %6 to %struct.memstick_host*
  %8 = icmp ne %struct.memstick_host* %7, null
  br i1 %8, label %9, label %26

; <label>:9:                                      ; preds = %2
  %10 = getelementptr inbounds %struct.memstick_host, %struct.memstick_host* %7, i32 0, i32 0
  call void @__mutex_init(%struct.mutex* %10, i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str, i32 0, i32 0), %struct.lock_class_key* @memstick_alloc_host.__key)
  %11 = getelementptr inbounds %struct.memstick_host, %struct.memstick_host* %7, i32 0, i32 3
  call void @__init_work(%struct.work_struct* %11, i32 0)
  %12 = getelementptr inbounds %struct.memstick_host, %struct.memstick_host* %7, i32 0, i32 3
  %13 = getelementptr inbounds %struct.work_struct, %struct.work_struct* %12, i32 0, i32 0
  %14 = getelementptr inbounds %struct.atomic64_t, %struct.atomic64_t* %3, i32 0, i32 0
  store i64 68719476704, i64* %14, align 8
  %15 = bitcast %struct.atomic64_t* %13 to i8*
  %16 = bitcast %struct.atomic64_t* %3 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %15, i8* %16, i64 8, i32 8, i1 false)
  %17 = getelementptr inbounds %struct.memstick_host, %struct.memstick_host* %7, i32 0, i32 3
  %18 = getelementptr inbounds %struct.work_struct, %struct.work_struct* %17, i32 0, i32 1
  call void @INIT_LIST_HEAD(%struct.list_head* %18)
  %19 = getelementptr inbounds %struct.memstick_host, %struct.memstick_host* %7, i32 0, i32 3
  %20 = getelementptr inbounds %struct.work_struct, %struct.work_struct* %19, i32 0, i32 2
  store void (%struct.work_struct*)* @memstick_check, void (%struct.work_struct*)** %20, align 8
  %21 = getelementptr inbounds %struct.memstick_host, %struct.memstick_host* %7, i32 0, i32 4
  %22 = getelementptr inbounds %struct.device, %struct.device* %21, i32 0, i32 31
  store %struct.class* @memstick_host_class, %struct.class** %22, align 8
  %23 = getelementptr inbounds %struct.memstick_host, %struct.memstick_host* %7, i32 0, i32 4
  %24 = getelementptr inbounds %struct.device, %struct.device* %23, i32 0, i32 0
  store %struct.device* %1, %struct.device** %24, align 8
  %25 = getelementptr inbounds %struct.memstick_host, %struct.memstick_host* %7, i32 0, i32 4
  call void @device_initialize(%struct.device* %25)
  br label %26

; <label>:26:                                     ; preds = %9, %2
  ret %struct.memstick_host* %7
}

; Function Attrs: noinline nounwind uwtable
define internal i8* @kzalloc(i64, i32) #0 {
  %3 = or i32 %1, 32768
  %4 = call noalias i8* @__kmalloc(i64 %0, i32 %3) #3
  ret i8* %4
}

declare void @__mutex_init(%struct.mutex*, i8*, %struct.lock_class_key*) #2

; Function Attrs: noinline nounwind uwtable
define internal void @__init_work(%struct.work_struct*, i32) #0 {
  ret void
}

; Function Attrs: noinline nounwind uwtable
define internal void @INIT_LIST_HEAD(%struct.list_head*) #0 {
  %2 = alloca %union.anon.49, align 8
  %3 = bitcast %union.anon.49* %2 to %struct.list_head**
  store %struct.list_head* %0, %struct.list_head** %3, align 8
  %4 = getelementptr inbounds %struct.list_head, %struct.list_head* %0, i32 0, i32 0
  %5 = bitcast %struct.list_head** %4 to i8*
  %6 = bitcast %union.anon.49* %2 to [1 x i8]*
  %7 = getelementptr inbounds [1 x i8], [1 x i8]* %6, i32 0, i32 0
  %8 = bitcast i8* %7 to i64*
  %9 = load i64, i64* %8, align 8
  %10 = bitcast i8* %5 to i64*
  store volatile i64 %9, i64* %10, align 8
  %11 = bitcast %union.anon.49* %2 to %struct.list_head**
  %12 = load %struct.list_head*, %struct.list_head** %11, align 8
  %13 = getelementptr inbounds %struct.list_head, %struct.list_head* %0, i32 0, i32 1
  store %struct.list_head* %0, %struct.list_head** %13, align 8
  ret void
}

; Function Attrs: noinline nounwind uwtable
define internal void @memstick_check(%struct.work_struct*) #0 {
  %2 = bitcast %struct.work_struct* %0 to i8*
  %3 = getelementptr inbounds i8, i8* %2, i64 -40
  %4 = bitcast i8* %3 to %struct.memstick_host*
  %5 = getelementptr inbounds %struct.memstick_host, %struct.memstick_host* %4, i32 0, i32 0
  call void @mutex_lock(%struct.mutex* %5)
  %6 = getelementptr inbounds %struct.memstick_host, %struct.memstick_host* %4, i32 0, i32 5
  %7 = load %struct.memstick_dev*, %struct.memstick_dev** %6, align 32
  %8 = icmp ne %struct.memstick_dev* %7, null
  br i1 %8, label %12, label %9

; <label>:9:                                      ; preds = %1
  %10 = call i32 @memstick_power_on(%struct.memstick_host* %4)
  %11 = icmp ne i32 %10, 0
  br i1 %11, label %93, label %25

; <label>:12:                                     ; preds = %1
  %13 = getelementptr inbounds %struct.memstick_host, %struct.memstick_host* %4, i32 0, i32 5
  %14 = load %struct.memstick_dev*, %struct.memstick_dev** %13, align 32
  %15 = getelementptr inbounds %struct.memstick_dev, %struct.memstick_dev* %14, i32 0, i32 7
  %16 = load void (%struct.memstick_dev*)*, void (%struct.memstick_dev*)** %15, align 8
  %17 = icmp ne void (%struct.memstick_dev*)* %16, null
  br i1 %17, label %18, label %25

; <label>:18:                                     ; preds = %12
  %19 = getelementptr inbounds %struct.memstick_host, %struct.memstick_host* %4, i32 0, i32 5
  %20 = load %struct.memstick_dev*, %struct.memstick_dev** %19, align 32
  %21 = getelementptr inbounds %struct.memstick_dev, %struct.memstick_dev* %20, i32 0, i32 7
  %22 = load void (%struct.memstick_dev*)*, void (%struct.memstick_dev*)** %21, align 8
  %23 = getelementptr inbounds %struct.memstick_host, %struct.memstick_host* %4, i32 0, i32 5
  %24 = load %struct.memstick_dev*, %struct.memstick_dev** %23, align 32
  call void %22(%struct.memstick_dev* %24)
  br label %25

; <label>:25:                                     ; preds = %12, %18, %9
  %26 = call %struct.memstick_dev* @memstick_alloc_card(%struct.memstick_host* %4)
  %27 = icmp ne %struct.memstick_dev* %26, null
  %28 = getelementptr inbounds %struct.memstick_host, %struct.memstick_host* %4, i32 0, i32 5
  %29 = load %struct.memstick_dev*, %struct.memstick_dev** %28, align 32
  %30 = icmp ne %struct.memstick_dev* %29, null
  br i1 %27, label %37, label %31

; <label>:31:                                     ; preds = %25
  br i1 %30, label %32, label %93

; <label>:32:                                     ; preds = %31
  %33 = getelementptr inbounds %struct.memstick_host, %struct.memstick_host* %4, i32 0, i32 5
  %34 = load %struct.memstick_dev*, %struct.memstick_dev** %33, align 32
  %35 = getelementptr inbounds %struct.memstick_dev, %struct.memstick_dev* %34, i32 0, i32 9
  call void @device_unregister(%struct.device* %35)
  %36 = getelementptr inbounds %struct.memstick_host, %struct.memstick_host* %4, i32 0, i32 5
  store %struct.memstick_dev* null, %struct.memstick_dev** %36, align 32
  br label %93

; <label>:37:                                     ; preds = %25
  br i1 %30, label %38, label %76

; <label>:38:                                     ; preds = %37
  %39 = getelementptr inbounds %struct.memstick_host, %struct.memstick_host* %4, i32 0, i32 5
  %40 = load %struct.memstick_dev*, %struct.memstick_dev** %39, align 32
  %41 = call i32 @memstick_set_rw_addr(%struct.memstick_dev* %40)
  %42 = icmp ne i32 %41, 0
  br i1 %42, label %58, label %43

; <label>:43:                                     ; preds = %38
  %44 = getelementptr inbounds %struct.memstick_host, %struct.memstick_host* %4, i32 0, i32 5
  %45 = load %struct.memstick_dev*, %struct.memstick_dev** %44, align 32
  %46 = getelementptr inbounds %struct.memstick_dev, %struct.memstick_dev* %26, i32 0, i32 0
  %47 = call i32 @memstick_dev_match(%struct.memstick_dev* %45, %struct.memstick_device_id* %46)
  %48 = icmp ne i32 %47, 0
  br i1 %48, label %49, label %58

; <label>:49:                                     ; preds = %43
  %50 = getelementptr inbounds %struct.memstick_host, %struct.memstick_host* %4, i32 0, i32 5
  %51 = load %struct.memstick_dev*, %struct.memstick_dev** %50, align 32
  %52 = getelementptr inbounds %struct.memstick_dev, %struct.memstick_dev* %51, i32 0, i32 5
  %53 = load i32 (%struct.memstick_dev*)*, i32 (%struct.memstick_dev*)** %52, align 8
  %54 = getelementptr inbounds %struct.memstick_host, %struct.memstick_host* %4, i32 0, i32 5
  %55 = load %struct.memstick_dev*, %struct.memstick_dev** %54, align 32
  %56 = call i32 %53(%struct.memstick_dev* %55)
  %57 = icmp ne i32 %56, 0
  br i1 %57, label %63, label %58

; <label>:58:                                     ; preds = %49, %43, %38
  %59 = getelementptr inbounds %struct.memstick_host, %struct.memstick_host* %4, i32 0, i32 5
  %60 = load %struct.memstick_dev*, %struct.memstick_dev** %59, align 32
  %61 = getelementptr inbounds %struct.memstick_dev, %struct.memstick_dev* %60, i32 0, i32 9
  call void @device_unregister(%struct.device* %61)
  %62 = getelementptr inbounds %struct.memstick_host, %struct.memstick_host* %4, i32 0, i32 5
  store %struct.memstick_dev* null, %struct.memstick_dev** %62, align 32
  br label %76

; <label>:63:                                     ; preds = %49
  %64 = getelementptr inbounds %struct.memstick_host, %struct.memstick_host* %4, i32 0, i32 5
  %65 = load %struct.memstick_dev*, %struct.memstick_dev** %64, align 32
  %66 = getelementptr inbounds %struct.memstick_dev, %struct.memstick_dev* %65, i32 0, i32 8
  %67 = load void (%struct.memstick_dev*)*, void (%struct.memstick_dev*)** %66, align 8
  %68 = icmp ne void (%struct.memstick_dev*)* %67, null
  br i1 %68, label %69, label %76

; <label>:69:                                     ; preds = %63
  %70 = getelementptr inbounds %struct.memstick_host, %struct.memstick_host* %4, i32 0, i32 5
  %71 = load %struct.memstick_dev*, %struct.memstick_dev** %70, align 32
  %72 = getelementptr inbounds %struct.memstick_dev, %struct.memstick_dev* %71, i32 0, i32 8
  %73 = load void (%struct.memstick_dev*)*, void (%struct.memstick_dev*)** %72, align 8
  %74 = getelementptr inbounds %struct.memstick_host, %struct.memstick_host* %4, i32 0, i32 5
  %75 = load %struct.memstick_dev*, %struct.memstick_dev** %74, align 32
  call void %73(%struct.memstick_dev* %75)
  br label %76

; <label>:76:                                     ; preds = %58, %69, %63, %37
  %77 = getelementptr inbounds %struct.memstick_host, %struct.memstick_host* %4, i32 0, i32 5
  %78 = load %struct.memstick_dev*, %struct.memstick_dev** %77, align 32
  %79 = icmp ne %struct.memstick_dev* %78, null
  br i1 %79, label %91, label %80

; <label>:80:                                     ; preds = %76
  %81 = getelementptr inbounds %struct.memstick_host, %struct.memstick_host* %4, i32 0, i32 5
  store %struct.memstick_dev* %26, %struct.memstick_dev** %81, align 32
  %82 = getelementptr inbounds %struct.memstick_dev, %struct.memstick_dev* %26, i32 0, i32 9
  %83 = call i32 @device_register(%struct.device* %82)
  %84 = icmp ne i32 %83, 0
  br i1 %84, label %85, label %93

; <label>:85:                                     ; preds = %80
  %86 = getelementptr inbounds %struct.memstick_dev, %struct.memstick_dev* %26, i32 0, i32 9
  call void @put_device(%struct.device* %86)
  %87 = getelementptr inbounds %struct.memstick_host, %struct.memstick_host* %4, i32 0, i32 5
  %88 = load %struct.memstick_dev*, %struct.memstick_dev** %87, align 32
  %89 = bitcast %struct.memstick_dev* %88 to i8*
  call void @kfree(i8* %89)
  %90 = getelementptr inbounds %struct.memstick_host, %struct.memstick_host* %4, i32 0, i32 5
  store %struct.memstick_dev* null, %struct.memstick_dev** %90, align 32
  br label %93

; <label>:91:                                     ; preds = %76
  %92 = bitcast %struct.memstick_dev* %26 to i8*
  call void @kfree(i8* %92)
  br label %93

; <label>:93:                                     ; preds = %32, %31, %80, %85, %91, %9
  %94 = getelementptr inbounds %struct.memstick_host, %struct.memstick_host* %4, i32 0, i32 5
  %95 = load %struct.memstick_dev*, %struct.memstick_dev** %94, align 32
  %96 = icmp ne %struct.memstick_dev* %95, null
  br i1 %96, label %101, label %97

; <label>:97:                                     ; preds = %93
  %98 = getelementptr inbounds %struct.memstick_host, %struct.memstick_host* %4, i32 0, i32 8
  %99 = load i32 (%struct.memstick_host*, i32, i32)*, i32 (%struct.memstick_host*, i32, i32)** %98, align 8
  %100 = call i32 %99(%struct.memstick_host* %4, i32 1, i32 0)
  br label %101

; <label>:101:                                    ; preds = %97, %93
  %102 = getelementptr inbounds %struct.memstick_host, %struct.memstick_host* %4, i32 0, i32 0
  call void @mutex_unlock(%struct.mutex* %102)
  ret void
}

declare void @device_initialize(%struct.device*) #2

; Function Attrs: noinline nounwind uwtable
define i32 @memstick_add_host(%struct.memstick_host*) #0 {
  call void @idr_preload(i32 20971712)
  %2 = getelementptr inbounds %struct.spinlock, %struct.spinlock* @memstick_host_lock, i32 0, i32 0
  %3 = bitcast %union.anon.1* %2 to %struct.raw_spinlock*
  call void @_raw_spin_lock(%struct.raw_spinlock* %3) #3
  %4 = bitcast %struct.memstick_host* %0 to i8*
  %5 = call i32 @idr_alloc(%struct.idr* @memstick_host_idr, i8* %4, i32 0, i32 0, i32 16777216)
  %6 = icmp sge i32 %5, 0
  br i1 %6, label %7, label %9

; <label>:7:                                      ; preds = %1
  %8 = getelementptr inbounds %struct.memstick_host, %struct.memstick_host* %0, i32 0, i32 1
  store i32 %5, i32* %8, align 32
  br label %9

; <label>:9:                                      ; preds = %7, %1
  %10 = getelementptr inbounds %struct.spinlock, %struct.spinlock* @memstick_host_lock, i32 0, i32 0
  %11 = bitcast %union.anon.1* %10 to %struct.raw_spinlock*
  call void @__raw_spin_unlock(%struct.raw_spinlock* %11) #3
  call void @idr_preload_end()
  %12 = icmp slt i32 %5, 0
  br i1 %12, label %33, label %13

; <label>:13:                                     ; preds = %9
  %14 = getelementptr inbounds %struct.memstick_host, %struct.memstick_host* %0, i32 0, i32 4
  %15 = getelementptr inbounds %struct.memstick_host, %struct.memstick_host* %0, i32 0, i32 1
  %16 = load i32, i32* %15, align 32
  %17 = call i32 (%struct.device*, i8*, ...) @dev_set_name(%struct.device* %14, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.1, i32 0, i32 0), i32 %16)
  %18 = getelementptr inbounds %struct.memstick_host, %struct.memstick_host* %0, i32 0, i32 4
  %19 = call i32 @device_add(%struct.device* %18)
  %20 = icmp ne i32 %19, 0
  br i1 %20, label %21, label %29

; <label>:21:                                     ; preds = %13
  %22 = getelementptr inbounds %struct.spinlock, %struct.spinlock* @memstick_host_lock, i32 0, i32 0
  %23 = bitcast %union.anon.1* %22 to %struct.raw_spinlock*
  call void @_raw_spin_lock(%struct.raw_spinlock* %23) #3
  %24 = getelementptr inbounds %struct.memstick_host, %struct.memstick_host* %0, i32 0, i32 1
  %25 = load i32, i32* %24, align 32
  %26 = call i8* @idr_remove(%struct.idr* @memstick_host_idr, i32 %25)
  %27 = getelementptr inbounds %struct.spinlock, %struct.spinlock* @memstick_host_lock, i32 0, i32 0
  %28 = bitcast %union.anon.1* %27 to %struct.raw_spinlock*
  call void @__raw_spin_unlock(%struct.raw_spinlock* %28) #3
  br label %33

; <label>:29:                                     ; preds = %13
  %30 = getelementptr inbounds %struct.memstick_host, %struct.memstick_host* %0, i32 0, i32 8
  %31 = load i32 (%struct.memstick_host*, i32, i32)*, i32 (%struct.memstick_host*, i32, i32)** %30, align 8
  %32 = call i32 %31(%struct.memstick_host* %0, i32 1, i32 0)
  call void @memstick_detect_change(%struct.memstick_host* %0)
  br label %33

; <label>:33:                                     ; preds = %9, %29, %21
  %.0 = phi i32 [ %19, %21 ], [ 0, %29 ], [ %5, %9 ]
  ret i32 %.0
}

declare void @idr_preload(i32) #2

declare i32 @idr_alloc(%struct.idr*, i8*, i32, i32, i32) #2

; Function Attrs: noinline nounwind uwtable
define internal void @idr_preload_end() #0 {
  call void asm sideeffect "", "~{memory},~{dirflag},~{fpsr},~{flags}"() #3, !srcloc !1
  ret void
}

declare i32 @dev_set_name(%struct.device*, i8*, ...) #2

declare i32 @device_add(%struct.device*) #2

; Function Attrs: noinline nounwind uwtable
define internal i8* @idr_remove(%struct.idr*, i32) #0 {
  %3 = getelementptr inbounds %struct.idr, %struct.idr* %0, i32 0, i32 0
  %4 = sext i32 %1 to i64
  %5 = call i8* @radix_tree_delete_item(%struct.radix_tree_root* %3, i64 %4, i8* null)
  ret i8* %5
}

; Function Attrs: noinline nounwind uwtable
define void @memstick_remove_host(%struct.memstick_host*) #0 {
  %2 = load %struct.workqueue_struct*, %struct.workqueue_struct** @workqueue, align 8
  call void @flush_workqueue(%struct.workqueue_struct* %2)
  %3 = getelementptr inbounds %struct.memstick_host, %struct.memstick_host* %0, i32 0, i32 0
  call void @mutex_lock(%struct.mutex* %3)
  %4 = getelementptr inbounds %struct.memstick_host, %struct.memstick_host* %0, i32 0, i32 5
  %5 = load %struct.memstick_dev*, %struct.memstick_dev** %4, align 32
  %6 = icmp ne %struct.memstick_dev* %5, null
  br i1 %6, label %7, label %11

; <label>:7:                                      ; preds = %1
  %8 = getelementptr inbounds %struct.memstick_host, %struct.memstick_host* %0, i32 0, i32 5
  %9 = load %struct.memstick_dev*, %struct.memstick_dev** %8, align 32
  %10 = getelementptr inbounds %struct.memstick_dev, %struct.memstick_dev* %9, i32 0, i32 9
  call void @device_unregister(%struct.device* %10)
  br label %11

; <label>:11:                                     ; preds = %7, %1
  %12 = getelementptr inbounds %struct.memstick_host, %struct.memstick_host* %0, i32 0, i32 5
  store %struct.memstick_dev* null, %struct.memstick_dev** %12, align 32
  %13 = getelementptr inbounds %struct.memstick_host, %struct.memstick_host* %0, i32 0, i32 8
  %14 = load i32 (%struct.memstick_host*, i32, i32)*, i32 (%struct.memstick_host*, i32, i32)** %13, align 8
  %15 = call i32 %14(%struct.memstick_host* %0, i32 1, i32 0)
  %16 = getelementptr inbounds %struct.memstick_host, %struct.memstick_host* %0, i32 0, i32 0
  call void @mutex_unlock(%struct.mutex* %16)
  %17 = getelementptr inbounds %struct.spinlock, %struct.spinlock* @memstick_host_lock, i32 0, i32 0
  %18 = bitcast %union.anon.1* %17 to %struct.raw_spinlock*
  call void @_raw_spin_lock(%struct.raw_spinlock* %18) #3
  %19 = getelementptr inbounds %struct.memstick_host, %struct.memstick_host* %0, i32 0, i32 1
  %20 = load i32, i32* %19, align 32
  %21 = call i8* @idr_remove(%struct.idr* @memstick_host_idr, i32 %20)
  %22 = getelementptr inbounds %struct.spinlock, %struct.spinlock* @memstick_host_lock, i32 0, i32 0
  %23 = bitcast %union.anon.1* %22 to %struct.raw_spinlock*
  call void @__raw_spin_unlock(%struct.raw_spinlock* %23) #3
  %24 = getelementptr inbounds %struct.memstick_host, %struct.memstick_host* %0, i32 0, i32 4
  call void @device_del(%struct.device* %24)
  ret void
}

declare void @flush_workqueue(%struct.workqueue_struct*) #2

declare void @mutex_lock(%struct.mutex*) #2

declare void @device_unregister(%struct.device*) #2

declare void @mutex_unlock(%struct.mutex*) #2

declare void @device_del(%struct.device*) #2

; Function Attrs: noinline nounwind uwtable
define void @memstick_free_host(%struct.memstick_host*) #0 {
  %2 = getelementptr inbounds %struct.memstick_host, %struct.memstick_host* %0, i32 0, i32 0
  call void @mutex_destroy(%struct.mutex* %2)
  %3 = getelementptr inbounds %struct.memstick_host, %struct.memstick_host* %0, i32 0, i32 4
  call void @put_device(%struct.device* %3)
  ret void
}

; Function Attrs: noinline nounwind uwtable
define internal void @mutex_destroy(%struct.mutex*) #0 {
  ret void
}

declare void @put_device(%struct.device*) #2

; Function Attrs: noinline nounwind uwtable
define void @memstick_suspend_host(%struct.memstick_host*) #0 {
  %2 = getelementptr inbounds %struct.memstick_host, %struct.memstick_host* %0, i32 0, i32 0
  call void @mutex_lock(%struct.mutex* %2)
  %3 = getelementptr inbounds %struct.memstick_host, %struct.memstick_host* %0, i32 0, i32 8
  %4 = load i32 (%struct.memstick_host*, i32, i32)*, i32 (%struct.memstick_host*, i32, i32)** %3, align 8
  %5 = call i32 %4(%struct.memstick_host* %0, i32 1, i32 0)
  %6 = getelementptr inbounds %struct.memstick_host, %struct.memstick_host* %0, i32 0, i32 0
  call void @mutex_unlock(%struct.mutex* %6)
  ret void
}

; Function Attrs: noinline nounwind uwtable
define void @memstick_resume_host(%struct.memstick_host*) #0 {
  %2 = getelementptr inbounds %struct.memstick_host, %struct.memstick_host* %0, i32 0, i32 0
  call void @mutex_lock(%struct.mutex* %2)
  %3 = getelementptr inbounds %struct.memstick_host, %struct.memstick_host* %0, i32 0, i32 5
  %4 = load %struct.memstick_dev*, %struct.memstick_dev** %3, align 32
  %5 = icmp ne %struct.memstick_dev* %4, null
  br i1 %5, label %6, label %8

; <label>:6:                                      ; preds = %1
  %7 = call i32 @memstick_power_on(%struct.memstick_host* %0)
  br label %8

; <label>:8:                                      ; preds = %6, %1
  %.0 = phi i32 [ %7, %6 ], [ 0, %1 ]
  %9 = getelementptr inbounds %struct.memstick_host, %struct.memstick_host* %0, i32 0, i32 0
  call void @mutex_unlock(%struct.mutex* %9)
  %10 = icmp ne i32 %.0, 0
  br i1 %10, label %12, label %11

; <label>:11:                                     ; preds = %8
  call void @memstick_detect_change(%struct.memstick_host* %0)
  br label %12

; <label>:12:                                     ; preds = %11, %8
  ret void
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @memstick_power_on(%struct.memstick_host*) #0 {
  %2 = getelementptr inbounds %struct.memstick_host, %struct.memstick_host* %0, i32 0, i32 8
  %3 = load i32 (%struct.memstick_host*, i32, i32)*, i32 (%struct.memstick_host*, i32, i32)** %2, align 8
  %4 = call i32 %3(%struct.memstick_host* %0, i32 1, i32 1)
  %5 = icmp ne i32 %4, 0
  br i1 %5, label %10, label %6

; <label>:6:                                      ; preds = %1
  %7 = getelementptr inbounds %struct.memstick_host, %struct.memstick_host* %0, i32 0, i32 8
  %8 = load i32 (%struct.memstick_host*, i32, i32)*, i32 (%struct.memstick_host*, i32, i32)** %7, align 8
  %9 = call i32 %8(%struct.memstick_host* %0, i32 2, i32 0)
  br label %10

; <label>:10:                                     ; preds = %6, %1
  %.0 = phi i32 [ %4, %1 ], [ %9, %6 ]
  ret i32 %.0
}

; Function Attrs: noinline nounwind uwtable
define i32 @memstick_register_driver(%struct.memstick_driver*) #0 {
  %2 = getelementptr inbounds %struct.memstick_driver, %struct.memstick_driver* %0, i32 0, i32 5
  %3 = getelementptr inbounds %struct.device_driver, %struct.device_driver* %2, i32 0, i32 1
  store %struct.bus_type* @memstick_bus_type, %struct.bus_type** %3, align 8
  %4 = getelementptr inbounds %struct.memstick_driver, %struct.memstick_driver* %0, i32 0, i32 5
  %5 = call i32 @driver_register(%struct.device_driver* %4)
  ret i32 %5
}

declare i32 @driver_register(%struct.device_driver*) #2

; Function Attrs: noinline nounwind uwtable
define void @memstick_unregister_driver(%struct.memstick_driver*) #0 {
  %2 = getelementptr inbounds %struct.memstick_driver, %struct.memstick_driver* %0, i32 0, i32 5
  call void @driver_unregister(%struct.device_driver* %2)
  ret void
}

declare void @driver_unregister(%struct.device_driver*) #2

; Function Attrs: noinline nounwind uwtable
define internal void @memstick_exit() #0 section ".exit.text" {
  call void @class_unregister(%struct.class* @memstick_host_class)
  call void @bus_unregister(%struct.bus_type* @memstick_bus_type)
  %1 = load %struct.workqueue_struct*, %struct.workqueue_struct** @workqueue, align 8
  call void @destroy_workqueue(%struct.workqueue_struct* %1)
  call void @idr_destroy(%struct.idr* @memstick_host_idr)
  ret void
}

declare void @class_unregister(%struct.class*) #2

declare void @bus_unregister(%struct.bus_type*) #2

declare void @destroy_workqueue(%struct.workqueue_struct*) #2

declare void @idr_destroy(%struct.idr*) #2

; Function Attrs: noinline nounwind uwtable
define internal i32 @memstick_init() #0 section ".init.text" {
  %1 = call %struct.workqueue_struct* (i8*, i32, i32, %struct.lock_class_key*, i8*, ...) @__alloc_workqueue_key(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.2, i32 0, i32 0), i32 262158, i32 1, %struct.lock_class_key* null, i8* null, i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.13, i32 0, i32 0))
  store %struct.workqueue_struct* %1, %struct.workqueue_struct** @workqueue, align 8
  %2 = load %struct.workqueue_struct*, %struct.workqueue_struct** @workqueue, align 8
  %3 = icmp ne %struct.workqueue_struct* %2, null
  br i1 %3, label %4, label %13

; <label>:4:                                      ; preds = %0
  %5 = call i32 @bus_register(%struct.bus_type* @memstick_bus_type)
  %6 = icmp ne i32 %5, 0
  br i1 %6, label %9, label %7

; <label>:7:                                      ; preds = %4
  %8 = call i32 @__class_register(%struct.class* @memstick_host_class, %struct.lock_class_key* @memstick_init.__key)
  br label %9

; <label>:9:                                      ; preds = %7, %4
  %.01 = phi i32 [ %5, %4 ], [ %8, %7 ]
  %10 = icmp ne i32 %.01, 0
  br i1 %10, label %11, label %13

; <label>:11:                                     ; preds = %9
  call void @bus_unregister(%struct.bus_type* @memstick_bus_type)
  %12 = load %struct.workqueue_struct*, %struct.workqueue_struct** @workqueue, align 8
  call void @destroy_workqueue(%struct.workqueue_struct* %12)
  br label %13

; <label>:13:                                     ; preds = %9, %0, %11
  %.0 = phi i32 [ %.01, %11 ], [ -12, %0 ], [ 0, %9 ]
  ret i32 %.0
}

declare zeroext i1 @queue_work_on(i32, %struct.workqueue_struct*, %struct.work_struct*) #2

declare void @complete(%struct.completion*) #2

declare noalias i8* @__kmalloc(i64, i32) #2

; Function Attrs: noinline nounwind uwtable
define internal %struct.memstick_dev* @memstick_alloc_card(%struct.memstick_host*) #0 {
  %2 = call i8* @kzalloc(i64 856, i32 20971712)
  %3 = bitcast i8* %2 to %struct.memstick_dev*
  %4 = getelementptr inbounds %struct.memstick_host, %struct.memstick_host* %0, i32 0, i32 5
  %5 = load %struct.memstick_dev*, %struct.memstick_dev** %4, align 32
  %6 = icmp ne %struct.memstick_dev* %3, null
  br i1 %6, label %7, label %40

; <label>:7:                                      ; preds = %1
  %8 = getelementptr inbounds %struct.memstick_dev, %struct.memstick_dev* %3, i32 0, i32 1
  store %struct.memstick_host* %0, %struct.memstick_host** %8, align 8
  %9 = getelementptr inbounds %struct.memstick_dev, %struct.memstick_dev* %3, i32 0, i32 9
  %10 = getelementptr inbounds %struct.memstick_host, %struct.memstick_host* %0, i32 0, i32 4
  %11 = call i8* @dev_name(%struct.device* %10)
  %12 = call i32 (%struct.device*, i8*, ...) @dev_set_name(%struct.device* %9, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.2, i32 0, i32 0), i8* %11)
  %13 = getelementptr inbounds %struct.memstick_host, %struct.memstick_host* %0, i32 0, i32 4
  %14 = getelementptr inbounds %struct.memstick_dev, %struct.memstick_dev* %3, i32 0, i32 9
  %15 = getelementptr inbounds %struct.device, %struct.device* %14, i32 0, i32 0
  store %struct.device* %13, %struct.device** %15, align 8
  %16 = getelementptr inbounds %struct.memstick_dev, %struct.memstick_dev* %3, i32 0, i32 9
  %17 = getelementptr inbounds %struct.device, %struct.device* %16, i32 0, i32 6
  store %struct.bus_type* @memstick_bus_type, %struct.bus_type** %17, align 8
  %18 = getelementptr inbounds %struct.memstick_dev, %struct.memstick_dev* %3, i32 0, i32 9
  %19 = getelementptr inbounds %struct.device, %struct.device* %18, i32 0, i32 33
  store void (%struct.device*)* @memstick_free_card, void (%struct.device*)** %19, align 8
  %20 = getelementptr inbounds %struct.memstick_dev, %struct.memstick_dev* %3, i32 0, i32 5
  store i32 (%struct.memstick_dev*)* @memstick_dummy_check, i32 (%struct.memstick_dev*)** %20, align 8
  %21 = getelementptr inbounds %struct.memstick_dev, %struct.memstick_dev* %3, i32 0, i32 2
  %22 = getelementptr inbounds %struct.ms_register_addr, %struct.ms_register_addr* %21, i32 0, i32 0
  store i8 4, i8* %22, align 8
  %23 = getelementptr inbounds %struct.memstick_dev, %struct.memstick_dev* %3, i32 0, i32 2
  %24 = getelementptr inbounds %struct.ms_register_addr, %struct.ms_register_addr* %23, i32 0, i32 1
  store i8 4, i8* %24, align 1
  %25 = getelementptr inbounds %struct.memstick_dev, %struct.memstick_dev* %3, i32 0, i32 2
  %26 = getelementptr inbounds %struct.ms_register_addr, %struct.ms_register_addr* %25, i32 0, i32 2
  store i8 4, i8* %26, align 2
  %27 = getelementptr inbounds %struct.memstick_dev, %struct.memstick_dev* %3, i32 0, i32 2
  %28 = getelementptr inbounds %struct.ms_register_addr, %struct.ms_register_addr* %27, i32 0, i32 3
  store i8 4, i8* %28, align 1
  %29 = getelementptr inbounds %struct.memstick_dev, %struct.memstick_dev* %3, i32 0, i32 3
  call void @init_completion(%struct.completion* %29)
  %30 = getelementptr inbounds %struct.memstick_host, %struct.memstick_host* %0, i32 0, i32 5
  store %struct.memstick_dev* %3, %struct.memstick_dev** %30, align 32
  %31 = call i32 @memstick_set_rw_addr(%struct.memstick_dev* %3)
  %32 = icmp ne i32 %31, 0
  br i1 %32, label %42, label %33

; <label>:33:                                     ; preds = %7
  %34 = getelementptr inbounds %struct.memstick_dev, %struct.memstick_dev* %3, i32 0, i32 6
  store i32 (%struct.memstick_dev*, %struct.memstick_request**)* @h_memstick_read_dev_id, i32 (%struct.memstick_dev*, %struct.memstick_request**)** %34, align 8
  call void @memstick_new_req(%struct.memstick_host* %0)
  %35 = getelementptr inbounds %struct.memstick_dev, %struct.memstick_dev* %3, i32 0, i32 3
  call void @wait_for_completion(%struct.completion* %35)
  %36 = getelementptr inbounds %struct.memstick_dev, %struct.memstick_dev* %3, i32 0, i32 4
  %37 = getelementptr inbounds %struct.memstick_request, %struct.memstick_request* %36, i32 0, i32 3
  %38 = load i32, i32* %37, align 4
  %39 = icmp ne i32 %38, 0
  br i1 %39, label %42, label %40

; <label>:40:                                     ; preds = %33, %1
  %41 = getelementptr inbounds %struct.memstick_host, %struct.memstick_host* %0, i32 0, i32 5
  store %struct.memstick_dev* %5, %struct.memstick_dev** %41, align 32
  br label %45

; <label>:42:                                     ; preds = %33, %7
  %43 = getelementptr inbounds %struct.memstick_host, %struct.memstick_host* %0, i32 0, i32 5
  store %struct.memstick_dev* %5, %struct.memstick_dev** %43, align 32
  %44 = bitcast %struct.memstick_dev* %3 to i8*
  call void @kfree(i8* %44)
  br label %45

; <label>:45:                                     ; preds = %42, %40
  %.0 = phi %struct.memstick_dev* [ null, %42 ], [ %3, %40 ]
  ret %struct.memstick_dev* %.0
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @memstick_dev_match(%struct.memstick_dev*, %struct.memstick_device_id*) #0 {
  %3 = getelementptr inbounds %struct.memstick_device_id, %struct.memstick_device_id* %1, i32 0, i32 0
  %4 = load i8, i8* %3, align 1
  %5 = zext i8 %4 to i32
  %6 = and i32 %5, 1
  %7 = icmp ne i32 %6, 0
  br i1 %7, label %8, label %35

; <label>:8:                                      ; preds = %2
  %9 = getelementptr inbounds %struct.memstick_device_id, %struct.memstick_device_id* %1, i32 0, i32 1
  %10 = load i8, i8* %9, align 1
  %11 = zext i8 %10 to i32
  %12 = getelementptr inbounds %struct.memstick_dev, %struct.memstick_dev* %0, i32 0, i32 0
  %13 = getelementptr inbounds %struct.memstick_device_id, %struct.memstick_device_id* %12, i32 0, i32 1
  %14 = load i8, i8* %13, align 1
  %15 = zext i8 %14 to i32
  %16 = icmp eq i32 %11, %15
  br i1 %16, label %17, label %35

; <label>:17:                                     ; preds = %8
  %18 = getelementptr inbounds %struct.memstick_device_id, %struct.memstick_device_id* %1, i32 0, i32 2
  %19 = load i8, i8* %18, align 1
  %20 = zext i8 %19 to i32
  %21 = getelementptr inbounds %struct.memstick_dev, %struct.memstick_dev* %0, i32 0, i32 0
  %22 = getelementptr inbounds %struct.memstick_device_id, %struct.memstick_device_id* %21, i32 0, i32 2
  %23 = load i8, i8* %22, align 2
  %24 = zext i8 %23 to i32
  %25 = icmp eq i32 %20, %24
  br i1 %25, label %26, label %35

; <label>:26:                                     ; preds = %17
  %27 = getelementptr inbounds %struct.memstick_device_id, %struct.memstick_device_id* %1, i32 0, i32 3
  %28 = load i8, i8* %27, align 1
  %29 = zext i8 %28 to i32
  %30 = getelementptr inbounds %struct.memstick_dev, %struct.memstick_dev* %0, i32 0, i32 0
  %31 = getelementptr inbounds %struct.memstick_device_id, %struct.memstick_device_id* %30, i32 0, i32 3
  %32 = load i8, i8* %31, align 1
  %33 = zext i8 %32 to i32
  %34 = icmp eq i32 %29, %33
  br i1 %34, label %36, label %35

; <label>:35:                                     ; preds = %8, %17, %26, %2
  br label %36

; <label>:36:                                     ; preds = %26, %35
  %.0 = phi i32 [ 0, %35 ], [ 1, %26 ]
  ret i32 %.0
}

declare i32 @device_register(%struct.device*) #2

declare void @kfree(i8*) #2

; Function Attrs: noinline nounwind uwtable
define internal i8* @dev_name(%struct.device*) #0 {
  %2 = getelementptr inbounds %struct.device, %struct.device* %0, i32 0, i32 3
  %3 = load i8*, i8** %2, align 8
  %4 = icmp ne i8* %3, null
  br i1 %4, label %5, label %8

; <label>:5:                                      ; preds = %1
  %6 = getelementptr inbounds %struct.device, %struct.device* %0, i32 0, i32 3
  %7 = load i8*, i8** %6, align 8
  br label %11

; <label>:8:                                      ; preds = %1
  %9 = getelementptr inbounds %struct.device, %struct.device* %0, i32 0, i32 2
  %10 = call i8* @kobject_name(%struct.kobject* %9)
  br label %11

; <label>:11:                                     ; preds = %8, %5
  %.0 = phi i8* [ %7, %5 ], [ %10, %8 ]
  ret i8* %.0
}

; Function Attrs: noinline nounwind uwtable
define internal void @memstick_free_card(%struct.device*) #0 {
  %2 = bitcast %struct.device* %0 to i8*
  %3 = getelementptr inbounds i8, i8* %2, i64 -128
  %4 = bitcast i8* %3 to %struct.memstick_dev*
  %5 = bitcast %struct.memstick_dev* %4 to i8*
  call void @kfree(i8* %5)
  ret void
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @memstick_dummy_check(%struct.memstick_dev*) #0 {
  ret i32 0
}

; Function Attrs: noinline nounwind uwtable
define internal void @init_completion(%struct.completion*) #0 {
  %2 = getelementptr inbounds %struct.completion, %struct.completion* %0, i32 0, i32 0
  store i32 0, i32* %2, align 8
  %3 = getelementptr inbounds %struct.completion, %struct.completion* %0, i32 0, i32 1
  call void @__init_waitqueue_head(%struct.__wait_queue_head* %3, i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.3, i32 0, i32 0), %struct.lock_class_key* @init_completion.__key)
  ret void
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @h_memstick_read_dev_id(%struct.memstick_dev*, %struct.memstick_request**) #0 {
  %3 = alloca %struct.ms_id_register, align 1
  %4 = load %struct.memstick_request*, %struct.memstick_request** %1, align 8
  %5 = icmp ne %struct.memstick_request* %4, null
  br i1 %5, label %10, label %6

; <label>:6:                                      ; preds = %2
  %7 = getelementptr inbounds %struct.memstick_dev, %struct.memstick_dev* %0, i32 0, i32 4
  %8 = bitcast %struct.ms_id_register* %3 to i8*
  call void @memstick_init_req(%struct.memstick_request* %7, i8 zeroext 4, i8* %8, i64 4)
  %9 = getelementptr inbounds %struct.memstick_dev, %struct.memstick_dev* %0, i32 0, i32 4
  store %struct.memstick_request* %9, %struct.memstick_request** %1, align 8
  br label %43

; <label>:10:                                     ; preds = %2
  %11 = load %struct.memstick_request*, %struct.memstick_request** %1, align 8
  %12 = getelementptr inbounds %struct.memstick_request, %struct.memstick_request* %11, i32 0, i32 3
  %13 = load i32, i32* %12, align 4
  %14 = icmp ne i32 %13, 0
  br i1 %14, label %41, label %15

; <label>:15:                                     ; preds = %10
  %16 = icmp uge i64 4, 64
  %17 = bitcast %struct.ms_id_register* %3 to i8*
  %18 = load %struct.memstick_request*, %struct.memstick_request** %1, align 8
  %19 = getelementptr inbounds %struct.memstick_request, %struct.memstick_request* %18, i32 0, i32 4
  %20 = bitcast %union.anon.47* %19 to %struct.anon.48*
  %21 = getelementptr inbounds %struct.anon.48, %struct.anon.48* %20, i32 0, i32 1
  %22 = getelementptr inbounds [15 x i8], [15 x i8]* %21, i32 0, i32 0
  br i1 %16, label %23, label %25

; <label>:23:                                     ; preds = %15
  %24 = call i8* @__memcpy(i8* %17, i8* %22, i64 4)
  br label %26

; <label>:25:                                     ; preds = %15
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %17, i8* %22, i64 4, i32 1, i1 false)
  br label %26

; <label>:26:                                     ; preds = %25, %23
  %.01 = phi i8* [ %24, %23 ], [ %17, %25 ]
  %27 = getelementptr inbounds %struct.memstick_dev, %struct.memstick_dev* %0, i32 0, i32 0
  %28 = getelementptr inbounds %struct.memstick_device_id, %struct.memstick_device_id* %27, i32 0, i32 0
  store i8 1, i8* %28, align 8
  %29 = getelementptr inbounds %struct.ms_id_register, %struct.ms_id_register* %3, i32 0, i32 0
  %30 = load i8, i8* %29, align 1
  %31 = getelementptr inbounds %struct.memstick_dev, %struct.memstick_dev* %0, i32 0, i32 0
  %32 = getelementptr inbounds %struct.memstick_device_id, %struct.memstick_device_id* %31, i32 0, i32 1
  store i8 %30, i8* %32, align 1
  %33 = getelementptr inbounds %struct.ms_id_register, %struct.ms_id_register* %3, i32 0, i32 2
  %34 = load i8, i8* %33, align 1
  %35 = getelementptr inbounds %struct.memstick_dev, %struct.memstick_dev* %0, i32 0, i32 0
  %36 = getelementptr inbounds %struct.memstick_device_id, %struct.memstick_device_id* %35, i32 0, i32 2
  store i8 %34, i8* %36, align 2
  %37 = getelementptr inbounds %struct.ms_id_register, %struct.ms_id_register* %3, i32 0, i32 3
  %38 = load i8, i8* %37, align 1
  %39 = getelementptr inbounds %struct.memstick_dev, %struct.memstick_dev* %0, i32 0, i32 0
  %40 = getelementptr inbounds %struct.memstick_device_id, %struct.memstick_device_id* %39, i32 0, i32 3
  store i8 %38, i8* %40, align 1
  br label %41

; <label>:41:                                     ; preds = %26, %10
  %42 = getelementptr inbounds %struct.memstick_dev, %struct.memstick_dev* %0, i32 0, i32 3
  call void @complete(%struct.completion* %42)
  br label %43

; <label>:43:                                     ; preds = %41, %6
  %.0 = phi i32 [ -11, %41 ], [ 0, %6 ]
  ret i32 %.0
}

; Function Attrs: noinline nounwind uwtable
define internal i8* @kobject_name(%struct.kobject*) #0 {
  %2 = getelementptr inbounds %struct.kobject, %struct.kobject* %0, i32 0, i32 0
  %3 = load i8*, i8** %2, align 8
  ret i8* %3
}

declare void @__init_waitqueue_head(%struct.__wait_queue_head*, i8*, %struct.lock_class_key*) #2

declare i8* @__memcpy(i8*, i8*, i64) #2

; Function Attrs: noinline nounwind uwtable
define internal void @memstick_free(%struct.device*) #0 {
  %2 = bitcast %struct.device* %0 to i8*
  %3 = getelementptr inbounds i8, i8* %2, i64 -72
  %4 = bitcast i8* %3 to %struct.memstick_host*
  %5 = bitcast %struct.memstick_host* %4 to i8*
  call void @kfree(i8* %5)
  ret void
}

declare void @_raw_spin_lock(%struct.raw_spinlock*) #2 section ".spinlock.text"

; Function Attrs: noinline nounwind uwtable
define internal void @__raw_spin_unlock(%struct.raw_spinlock*) #0 {
  call void @do_raw_spin_unlock(%struct.raw_spinlock* %0)
  call void asm sideeffect "", "~{memory},~{dirflag},~{fpsr},~{flags}"() #3, !srcloc !2
  ret void
}

; Function Attrs: noinline nounwind uwtable
define internal void @do_raw_spin_unlock(%struct.raw_spinlock*) #0 {
  %2 = getelementptr inbounds %struct.raw_spinlock, %struct.raw_spinlock* %0, i32 0, i32 0
  call void @queued_spin_unlock(%struct.qspinlock* %2)
  ret void
}

; Function Attrs: noinline nounwind uwtable
define internal void @queued_spin_unlock(%struct.qspinlock*) #0 {
  call void @native_queued_spin_unlock(%struct.qspinlock* %0)
  ret void
}

; Function Attrs: noinline nounwind uwtable
define internal void @native_queued_spin_unlock(%struct.qspinlock*) #0 {
  %2 = alloca %union.anon.50, align 1
  %3 = trunc i8 0 to i1
  br i1 %3, label %4, label %5

; <label>:4:                                      ; preds = %1
  call void @__compiletime_assert_17()
  br label %5

; <label>:5:                                      ; preds = %1, %4
  %6 = trunc i8 0 to i1
  %7 = zext i1 %6 to i32
  %8 = mul nsw i32 2, %7
  %9 = sub nsw i32 1, %8
  %10 = zext i32 %9 to i64
  call void asm sideeffect "", "~{memory},~{dirflag},~{fpsr},~{flags}"() #3, !srcloc !3
  %11 = bitcast %union.anon.50* %2 to i8*
  call void @llvm.memset.p0i8.i64(i8* %11, i8 0, i64 1, i32 1, i1 false)
  %12 = bitcast %struct.qspinlock* %0 to i8*
  %13 = bitcast %union.anon.50* %2 to [1 x i8]*
  %14 = getelementptr inbounds [1 x i8], [1 x i8]* %13, i32 0, i32 0
  %15 = load i8, i8* %14, align 1
  store volatile i8 %15, i8* %12, align 1
  %16 = bitcast %union.anon.50* %2 to i8*
  %17 = load i8, i8* %16, align 1
  ret void
}

declare void @__compiletime_assert_17() #2

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i32, i1) #1

declare i8* @radix_tree_delete_item(%struct.radix_tree_root*, i64, i8*) #2

; Function Attrs: noinline nounwind uwtable
define internal i32 @memstick_bus_match(%struct.device*, %struct.device_driver*) #0 {
  %3 = bitcast %struct.device* %0 to i8*
  %4 = getelementptr inbounds i8, i8* %3, i64 -128
  %5 = bitcast i8* %4 to %struct.memstick_dev*
  %6 = bitcast %struct.device_driver* %1 to i8*
  %7 = getelementptr inbounds i8, i8* %6, i64 -40
  %8 = bitcast i8* %7 to %struct.memstick_driver*
  %9 = getelementptr inbounds %struct.memstick_driver, %struct.memstick_driver* %8, i32 0, i32 0
  %10 = load %struct.memstick_device_id*, %struct.memstick_device_id** %9, align 8
  %11 = icmp ne %struct.memstick_device_id* %10, null
  br i1 %11, label %12, label %21

; <label>:12:                                     ; preds = %2, %19
  %.01 = phi %struct.memstick_device_id* [ %20, %19 ], [ %10, %2 ]
  %13 = getelementptr inbounds %struct.memstick_device_id, %struct.memstick_device_id* %.01, i32 0, i32 0
  %14 = load i8, i8* %13, align 1
  %15 = icmp ne i8 %14, 0
  br i1 %15, label %16, label %21

; <label>:16:                                     ; preds = %12
  %17 = call i32 @memstick_dev_match(%struct.memstick_dev* %5, %struct.memstick_device_id* %.01)
  %18 = icmp ne i32 %17, 0
  br i1 %18, label %21, label %19

; <label>:19:                                     ; preds = %16
  %20 = getelementptr inbounds %struct.memstick_device_id, %struct.memstick_device_id* %.01, i32 1
  br label %12

; <label>:21:                                     ; preds = %2, %12, %16
  %.0 = phi i32 [ 1, %16 ], [ 0, %12 ], [ 0, %2 ]
  ret i32 %.0
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @memstick_uevent(%struct.device*, %struct.kobj_uevent_env*) #0 {
  %3 = bitcast %struct.device* %0 to i8*
  %4 = getelementptr inbounds i8, i8* %3, i64 -128
  %5 = bitcast i8* %4 to %struct.memstick_dev*
  %6 = getelementptr inbounds %struct.memstick_dev, %struct.memstick_dev* %5, i32 0, i32 0
  %7 = getelementptr inbounds %struct.memstick_device_id, %struct.memstick_device_id* %6, i32 0, i32 1
  %8 = load i8, i8* %7, align 1
  %9 = zext i8 %8 to i32
  %10 = call i32 (%struct.kobj_uevent_env*, i8*, ...) @add_uevent_var(%struct.kobj_uevent_env* %1, i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.10, i32 0, i32 0), i32 %9)
  %11 = icmp ne i32 %10, 0
  br i1 %11, label %26, label %12

; <label>:12:                                     ; preds = %2
  %13 = getelementptr inbounds %struct.memstick_dev, %struct.memstick_dev* %5, i32 0, i32 0
  %14 = getelementptr inbounds %struct.memstick_device_id, %struct.memstick_device_id* %13, i32 0, i32 2
  %15 = load i8, i8* %14, align 2
  %16 = zext i8 %15 to i32
  %17 = call i32 (%struct.kobj_uevent_env*, i8*, ...) @add_uevent_var(%struct.kobj_uevent_env* %1, i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.11, i32 0, i32 0), i32 %16)
  %18 = icmp ne i32 %17, 0
  br i1 %18, label %26, label %19

; <label>:19:                                     ; preds = %12
  %20 = getelementptr inbounds %struct.memstick_dev, %struct.memstick_dev* %5, i32 0, i32 0
  %21 = getelementptr inbounds %struct.memstick_device_id, %struct.memstick_device_id* %20, i32 0, i32 3
  %22 = load i8, i8* %21, align 1
  %23 = zext i8 %22 to i32
  %24 = call i32 (%struct.kobj_uevent_env*, i8*, ...) @add_uevent_var(%struct.kobj_uevent_env* %1, i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.12, i32 0, i32 0), i32 %23)
  %25 = icmp ne i32 %24, 0
  %. = select i1 %25, i32 -12, i32 0
  br label %26

; <label>:26:                                     ; preds = %19, %12, %2
  %.0 = phi i32 [ -12, %2 ], [ -12, %12 ], [ %., %19 ]
  ret i32 %.0
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @memstick_device_probe(%struct.device*) #0 {
  %2 = bitcast %struct.device* %0 to i8*
  %3 = getelementptr inbounds i8, i8* %2, i64 -128
  %4 = bitcast i8* %3 to %struct.memstick_dev*
  %5 = getelementptr inbounds %struct.device, %struct.device* %0, i32 0, i32 7
  %6 = load %struct.device_driver*, %struct.device_driver** %5, align 8
  %7 = bitcast %struct.device_driver* %6 to i8*
  %8 = getelementptr inbounds i8, i8* %7, i64 -40
  %9 = bitcast i8* %8 to %struct.memstick_driver*
  %10 = getelementptr inbounds %struct.device, %struct.device* %0, i32 0, i32 7
  %11 = load %struct.device_driver*, %struct.device_driver** %10, align 8
  %12 = icmp ne %struct.device_driver* %11, null
  br i1 %12, label %13, label %24

; <label>:13:                                     ; preds = %1
  %14 = getelementptr inbounds %struct.memstick_driver, %struct.memstick_driver* %9, i32 0, i32 1
  %15 = load i32 (%struct.memstick_dev*)*, i32 (%struct.memstick_dev*)** %14, align 8
  %16 = icmp ne i32 (%struct.memstick_dev*)* %15, null
  br i1 %16, label %17, label %24

; <label>:17:                                     ; preds = %13
  %18 = getelementptr inbounds %struct.memstick_driver, %struct.memstick_driver* %9, i32 0, i32 1
  %19 = load i32 (%struct.memstick_dev*)*, i32 (%struct.memstick_dev*)** %18, align 8
  %20 = call i32 %19(%struct.memstick_dev* %4)
  %21 = icmp ne i32 %20, 0
  br i1 %21, label %24, label %22

; <label>:22:                                     ; preds = %17
  %23 = call %struct.device* @get_device(%struct.device* %0)
  br label %24

; <label>:24:                                     ; preds = %17, %22, %13, %1
  %.0 = phi i32 [ -19, %13 ], [ -19, %1 ], [ %20, %22 ], [ %20, %17 ]
  ret i32 %.0
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @memstick_device_remove(%struct.device*) #0 {
  %2 = bitcast %struct.device* %0 to i8*
  %3 = getelementptr inbounds i8, i8* %2, i64 -128
  %4 = bitcast i8* %3 to %struct.memstick_dev*
  %5 = getelementptr inbounds %struct.device, %struct.device* %0, i32 0, i32 7
  %6 = load %struct.device_driver*, %struct.device_driver** %5, align 8
  %7 = bitcast %struct.device_driver* %6 to i8*
  %8 = getelementptr inbounds i8, i8* %7, i64 -40
  %9 = bitcast i8* %8 to %struct.memstick_driver*
  %10 = getelementptr inbounds %struct.device, %struct.device* %0, i32 0, i32 7
  %11 = load %struct.device_driver*, %struct.device_driver** %10, align 8
  %12 = icmp ne %struct.device_driver* %11, null
  br i1 %12, label %13, label %22

; <label>:13:                                     ; preds = %1
  %14 = getelementptr inbounds %struct.memstick_driver, %struct.memstick_driver* %9, i32 0, i32 2
  %15 = load void (%struct.memstick_dev*)*, void (%struct.memstick_dev*)** %14, align 8
  %16 = icmp ne void (%struct.memstick_dev*)* %15, null
  br i1 %16, label %17, label %22

; <label>:17:                                     ; preds = %13
  %18 = getelementptr inbounds %struct.memstick_driver, %struct.memstick_driver* %9, i32 0, i32 2
  %19 = load void (%struct.memstick_dev*)*, void (%struct.memstick_dev*)** %18, align 8
  call void %19(%struct.memstick_dev* %4)
  %20 = getelementptr inbounds %struct.memstick_dev, %struct.memstick_dev* %4, i32 0, i32 9
  %21 = getelementptr inbounds %struct.device, %struct.device* %20, i32 0, i32 7
  store %struct.device_driver* null, %struct.device_driver** %21, align 8
  br label %22

; <label>:22:                                     ; preds = %17, %13, %1
  call void @put_device(%struct.device* %0)
  ret i32 0
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @memstick_device_suspend(%struct.device*, i32) #0 {
  %3 = alloca %struct.pm_message, align 4
  %4 = getelementptr inbounds %struct.pm_message, %struct.pm_message* %3, i32 0, i32 0
  store i32 %1, i32* %4, align 4
  %5 = bitcast %struct.device* %0 to i8*
  %6 = getelementptr inbounds i8, i8* %5, i64 -128
  %7 = bitcast i8* %6 to %struct.memstick_dev*
  %8 = getelementptr inbounds %struct.device, %struct.device* %0, i32 0, i32 7
  %9 = load %struct.device_driver*, %struct.device_driver** %8, align 8
  %10 = bitcast %struct.device_driver* %9 to i8*
  %11 = getelementptr inbounds i8, i8* %10, i64 -40
  %12 = bitcast i8* %11 to %struct.memstick_driver*
  %13 = getelementptr inbounds %struct.device, %struct.device* %0, i32 0, i32 7
  %14 = load %struct.device_driver*, %struct.device_driver** %13, align 8
  %15 = icmp ne %struct.device_driver* %14, null
  br i1 %15, label %16, label %26

; <label>:16:                                     ; preds = %2
  %17 = getelementptr inbounds %struct.memstick_driver, %struct.memstick_driver* %12, i32 0, i32 3
  %18 = load i32 (%struct.memstick_dev*, i32)*, i32 (%struct.memstick_dev*, i32)** %17, align 8
  %19 = icmp ne i32 (%struct.memstick_dev*, i32)* %18, null
  br i1 %19, label %20, label %26

; <label>:20:                                     ; preds = %16
  %21 = getelementptr inbounds %struct.memstick_driver, %struct.memstick_driver* %12, i32 0, i32 3
  %22 = load i32 (%struct.memstick_dev*, i32)*, i32 (%struct.memstick_dev*, i32)** %21, align 8
  %23 = getelementptr inbounds %struct.pm_message, %struct.pm_message* %3, i32 0, i32 0
  %24 = load i32, i32* %23, align 4
  %25 = call i32 %22(%struct.memstick_dev* %7, i32 %24)
  br label %26

; <label>:26:                                     ; preds = %2, %16, %20
  %.0 = phi i32 [ %25, %20 ], [ 0, %16 ], [ 0, %2 ]
  ret i32 %.0
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @memstick_device_resume(%struct.device*) #0 {
  %2 = bitcast %struct.device* %0 to i8*
  %3 = getelementptr inbounds i8, i8* %2, i64 -128
  %4 = bitcast i8* %3 to %struct.memstick_dev*
  %5 = getelementptr inbounds %struct.device, %struct.device* %0, i32 0, i32 7
  %6 = load %struct.device_driver*, %struct.device_driver** %5, align 8
  %7 = bitcast %struct.device_driver* %6 to i8*
  %8 = getelementptr inbounds i8, i8* %7, i64 -40
  %9 = bitcast i8* %8 to %struct.memstick_driver*
  %10 = getelementptr inbounds %struct.device, %struct.device* %0, i32 0, i32 7
  %11 = load %struct.device_driver*, %struct.device_driver** %10, align 8
  %12 = icmp ne %struct.device_driver* %11, null
  br i1 %12, label %13, label %21

; <label>:13:                                     ; preds = %1
  %14 = getelementptr inbounds %struct.memstick_driver, %struct.memstick_driver* %9, i32 0, i32 4
  %15 = load i32 (%struct.memstick_dev*)*, i32 (%struct.memstick_dev*)** %14, align 8
  %16 = icmp ne i32 (%struct.memstick_dev*)* %15, null
  br i1 %16, label %17, label %21

; <label>:17:                                     ; preds = %13
  %18 = getelementptr inbounds %struct.memstick_driver, %struct.memstick_driver* %9, i32 0, i32 4
  %19 = load i32 (%struct.memstick_dev*)*, i32 (%struct.memstick_dev*)** %18, align 8
  %20 = call i32 %19(%struct.memstick_dev* %4)
  br label %21

; <label>:21:                                     ; preds = %1, %13, %17
  %.0 = phi i32 [ %20, %17 ], [ 0, %13 ], [ 0, %1 ]
  ret i32 %.0
}

; Function Attrs: noinline nounwind uwtable
define internal i64 @type_show(%struct.device*, %struct.device_attribute*, i8*) #0 {
  %4 = bitcast %struct.device* %0 to i8*
  %5 = getelementptr inbounds i8, i8* %4, i64 -128
  %6 = bitcast i8* %5 to %struct.memstick_dev*
  %7 = getelementptr inbounds %struct.memstick_dev, %struct.memstick_dev* %6, i32 0, i32 0
  %8 = getelementptr inbounds %struct.memstick_device_id, %struct.memstick_device_id* %7, i32 0, i32 1
  %9 = load i8, i8* %8, align 1
  %10 = zext i8 %9 to i32
  %11 = call i32 (i8*, i8*, ...) @sprintf(i8* %2, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.7, i32 0, i32 0), i32 %10)
  %12 = sext i32 %11 to i64
  ret i64 %12
}

declare i32 @sprintf(i8*, i8*, ...) #2

; Function Attrs: noinline nounwind uwtable
define internal i64 @category_show(%struct.device*, %struct.device_attribute*, i8*) #0 {
  %4 = bitcast %struct.device* %0 to i8*
  %5 = getelementptr inbounds i8, i8* %4, i64 -128
  %6 = bitcast i8* %5 to %struct.memstick_dev*
  %7 = getelementptr inbounds %struct.memstick_dev, %struct.memstick_dev* %6, i32 0, i32 0
  %8 = getelementptr inbounds %struct.memstick_device_id, %struct.memstick_device_id* %7, i32 0, i32 2
  %9 = load i8, i8* %8, align 2
  %10 = zext i8 %9 to i32
  %11 = call i32 (i8*, i8*, ...) @sprintf(i8* %2, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.7, i32 0, i32 0), i32 %10)
  %12 = sext i32 %11 to i64
  ret i64 %12
}

; Function Attrs: noinline nounwind uwtable
define internal i64 @class_show(%struct.device*, %struct.device_attribute*, i8*) #0 {
  %4 = bitcast %struct.device* %0 to i8*
  %5 = getelementptr inbounds i8, i8* %4, i64 -128
  %6 = bitcast i8* %5 to %struct.memstick_dev*
  %7 = getelementptr inbounds %struct.memstick_dev, %struct.memstick_dev* %6, i32 0, i32 0
  %8 = getelementptr inbounds %struct.memstick_device_id, %struct.memstick_device_id* %7, i32 0, i32 3
  %9 = load i8, i8* %8, align 1
  %10 = zext i8 %9 to i32
  %11 = call i32 (i8*, i8*, ...) @sprintf(i8* %2, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.7, i32 0, i32 0), i32 %10)
  %12 = sext i32 %11 to i64
  ret i64 %12
}

declare i32 @add_uevent_var(%struct.kobj_uevent_env*, i8*, ...) #2

declare %struct.device* @get_device(%struct.device*) #2

declare %struct.workqueue_struct* @__alloc_workqueue_key(i8*, i32, i32, %struct.lock_class_key*, i8*, ...) #2

declare i32 @bus_register(%struct.bus_type*) #2

declare i32 @__class_register(%struct.class*, %struct.lock_class_key*) #2

attributes #0 = { noinline nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind }
attributes #2 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { nounwind }

!llvm.ident = !{!0}

!0 = !{!"clang version 4.0.1 (tags/RELEASE_401/final)"}
!1 = !{i32 -2145023834}
!2 = !{i32 -2146400429}
!3 = !{i32 -2146428404}
