; ModuleID = 'drivers/media/usb/uvc/uvc_driver.bc'
source_filename = "drivers/media/usb/uvc/uvc_driver.c"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%struct.kernel_param_ops = type { i32 (i8*, %struct.kernel_param*)*, i32 (i8*, %struct.kernel_param*)*, void (i8*)* }
%struct.kernel_param = type { i8*, %struct.kernel_param_ops*, i16, i16, %union.anon.3 }
%union.anon.3 = type { i8* }
%struct.usb_device_id = type { i16, i16, i16, i16, i16, i8, i8, i8, i8, i8, i8, i8, i64 }
%struct.uvc_driver = type { %struct.usb_driver }
%struct.usb_driver = type { i8*, i32 (%struct.usb_interface*, %struct.usb_device_id*)*, void (%struct.usb_interface*)*, i32 (%struct.usb_interface*, i32, i8*)*, i32 (%struct.usb_interface*, i32)*, i32 (%struct.usb_interface*)*, i32 (%struct.usb_interface*)*, i32 (%struct.usb_interface*)*, i32 (%struct.usb_interface*)*, %struct.usb_device_id*, %struct.usb_dynids, %struct.usbdrv_wrap, i8 }
%struct.usb_interface = type { %struct.usb_host_interface*, %struct.usb_host_interface*, i32, %struct.usb_interface_assoc_descriptor*, i32, i32, i8, %struct.device, %struct.device*, %struct.atomic_t, %struct.work_struct }
%struct.usb_host_interface = type { %struct.usb_interface_descriptor, i32, i8*, %struct.usb_host_endpoint*, i8* }
%struct.usb_interface_descriptor = type { i8, i8, i8, i8, i8, i8, i8, i8, i8 }
%struct.usb_host_endpoint = type <{ %struct.usb_endpoint_descriptor, %struct.usb_ss_ep_comp_descriptor, i8, %struct.list_head, i8*, %struct.ep_device*, i8*, i32, i32 }>
%struct.usb_endpoint_descriptor = type <{ i8, i8, i8, i8, i16, i8, i8, i8 }>
%struct.usb_ss_ep_comp_descriptor = type { i8, i8, i8, i8, i16 }
%struct.list_head = type { %struct.list_head*, %struct.list_head* }
%struct.ep_device = type opaque
%struct.usb_interface_assoc_descriptor = type { i8, i8, i8, i8, i8, i8, i8, i8 }
%struct.device = type { %struct.device*, %struct.device_private*, %struct.kobject, i8*, %struct.device_type*, %struct.mutex, %struct.bus_type*, %struct.device_driver*, i8*, %struct.dev_pm_info, %struct.dev_pm_domain*, i32, i64*, i64, %struct.device_dma_parameters*, %struct.list_head, %struct.dma_coherent_mem*, %struct.dev_archdata, %struct.device_node*, %struct.acpi_dev_node, i32, i32, %struct.spinlock, %struct.list_head, %struct.klist_node, %struct.class*, %struct.attribute_group**, void (%struct.device*)*, %struct.iommu_group* }
%struct.device_private = type opaque
%struct.kobject = type { i8*, %struct.list_head, %struct.kobject*, %struct.kset*, %struct.kobj_type*, %struct.sysfs_dirent*, %struct.kref, i8 }
%struct.kset = type { %struct.list_head, %struct.spinlock, %struct.kobject, %struct.kset_uevent_ops* }
%struct.kset_uevent_ops = type { i32 (%struct.kset*, %struct.kobject*)*, i8* (%struct.kset*, %struct.kobject*)*, i32 (%struct.kset*, %struct.kobject*, %struct.kobj_uevent_env*)* }
%struct.kobj_uevent_env = type { [32 x i8*], i32, [2048 x i8], i32 }
%struct.kobj_type = type { void (%struct.kobject*)*, %struct.sysfs_ops*, %struct.attribute**, %struct.kobj_ns_type_operations* (%struct.kobject*)*, i8* (%struct.kobject*)* }
%struct.sysfs_ops = type { i64 (%struct.kobject*, %struct.attribute*, i8*)*, i64 (%struct.kobject*, %struct.attribute*, i8*, i64)*, i8* (%struct.kobject*, %struct.attribute*)* }
%struct.attribute = type { i8*, i16 }
%struct.kobj_ns_type_operations = type { i32, i8* ()*, i8* (%struct.sock*)*, i8* ()*, void (i8*)* }
%struct.sock = type opaque
%struct.sysfs_dirent = type opaque
%struct.kref = type { %struct.atomic_t }
%struct.device_type = type { i8*, %struct.attribute_group**, i32 (%struct.device*, %struct.kobj_uevent_env*)*, i8* (%struct.device*, i16*, i32*, i32*)*, void (%struct.device*)*, %struct.dev_pm_ops* }
%struct.dev_pm_ops = type { i32 (%struct.device*)*, void (%struct.device*)*, i32 (%struct.device*)*, i32 (%struct.device*)*, i32 (%struct.device*)*, i32 (%struct.device*)*, i32 (%struct.device*)*, i32 (%struct.device*)*, i32 (%struct.device*)*, i32 (%struct.device*)*, i32 (%struct.device*)*, i32 (%struct.device*)*, i32 (%struct.device*)*, i32 (%struct.device*)*, i32 (%struct.device*)*, i32 (%struct.device*)*, i32 (%struct.device*)*, i32 (%struct.device*)*, i32 (%struct.device*)*, i32 (%struct.device*)*, i32 (%struct.device*)*, i32 (%struct.device*)*, i32 (%struct.device*)* }
%struct.mutex = type { %struct.atomic_t, %struct.spinlock, %struct.list_head, %struct.task_struct*, i8* }
%struct.task_struct = type { i64, i8*, %struct.atomic_t, i32, i32, %struct.llist_node, i32, i32, i32, i32, i32, i32, %struct.sched_class*, %struct.sched_entity, %struct.sched_rt_entity, %struct.task_group*, i8, i32, i32, i32, %struct.cpumask, %struct.sched_info, %struct.list_head, %struct.plist_node, %struct.mm_struct*, %struct.mm_struct*, %struct.task_rss_stat, i32, i32, i32, i32, i32, i32, i8, i32, i32, %struct.task_struct*, %struct.task_struct*, %struct.list_head, %struct.list_head, %struct.task_struct*, %struct.list_head, %struct.list_head, [3 x %struct.pid_link], %struct.list_head, %struct.completion*, i32*, i32*, i64, i64, i64, i64, i64, %struct.cputime, i64, i64, %struct.timespec, %struct.timespec, i64, i64, %struct.task_cputime, [3 x %struct.list_head], %struct.cred*, %struct.cred*, [16 x i8], i32, i32, %struct.sysv_sem, %struct.thread_struct, %struct.fs_struct*, %struct.files_struct*, %struct.nsproxy*, %struct.signal_struct*, %struct.sighand_struct*, %struct.sigset_t, %struct.sigset_t, %struct.sigset_t, %struct.sigpending, i64, i64, i32 (i8*)*, i8*, %struct.sigset_t*, %struct.callback_head*, %struct.audit_context*, i32, i32, %struct.seccomp, i32, i32, %struct.spinlock, %struct.raw_spinlock, %struct.plist_head, %struct.rt_mutex_waiter*, i8*, %struct.bio_list*, %struct.blk_plug*, %struct.reclaim_state*, %struct.backing_dev_info*, %struct.io_context*, i64, %struct.siginfo*, %struct.task_io_accounting, i64, i64, i64, %struct.nodemask_t, %struct.seqcount, i32, i32, %struct.css_set*, %struct.list_head, %struct.robust_list_head*, %struct.compat_robust_list_head*, %struct.list_head, %struct.futex_pi_state*, [2 x %struct.perf_event_context*], %struct.mutex, %struct.list_head, %struct.mempolicy*, i16, i16, %struct.callback_head, %struct.pipe_inode_info*, %struct.page_frag, %struct.task_delay_info*, i32, i32, i64, i64, i64, i64, i64, %struct.atomic_t }
%struct.llist_node = type { %struct.llist_node* }
%struct.sched_class = type opaque
%struct.sched_entity = type { %struct.load_weight, %struct.rb_node, %struct.list_head, i32, i64, i64, i64, i64, i64, %struct.sched_statistics, %struct.sched_entity*, %struct.cfs_rq*, %struct.cfs_rq*, %struct.sched_avg }
%struct.load_weight = type { i64, i64 }
%struct.rb_node = type { i64, %struct.rb_node*, %struct.rb_node* }
%struct.sched_statistics = type { i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64 }
%struct.cfs_rq = type opaque
%struct.sched_avg = type { i32, i32, i64, i64, i64 }
%struct.sched_rt_entity = type { %struct.list_head, i64, i64, i32, %struct.sched_rt_entity* }
%struct.task_group = type opaque
%struct.cpumask = type { [1 x i64] }
%struct.sched_info = type { i64, i64, i64, i64 }
%struct.plist_node = type { i32, %struct.list_head, %struct.list_head }
%struct.mm_struct = type { %struct.vm_area_struct*, %struct.rb_root, %struct.vm_area_struct*, i64 (%struct.file*, i64, i64, i64, i64)*, void (%struct.mm_struct*, i64)*, i64, i64, i64, i64, i64, %struct.pgd_t*, %struct.atomic_t, %struct.atomic_t, i32, %struct.spinlock, %struct.rw_semaphore, %struct.list_head, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, [44 x i64], %struct.mm_rss_stat, %struct.linux_binfmt*, [1 x %struct.cpumask], %struct.mm_context_t, i64, %struct.core_state*, %struct.spinlock, %struct.hlist_head, %struct.file*, %struct.uprobes_state }
%struct.rb_root = type { %struct.rb_node* }
%struct.vm_area_struct = type { i64, i64, %struct.vm_area_struct*, %struct.vm_area_struct*, %struct.rb_node, i64, %struct.mm_struct*, %struct.pgprot, i64, %union.anon, %struct.list_head, %struct.anon_vma*, %struct.vm_operations_struct*, i64, %struct.file*, i8*, %struct.mempolicy* }
%struct.pgprot = type { i64 }
%union.anon = type { %struct.anon }
%struct.anon = type { %struct.rb_node, i64 }
%struct.anon_vma = type opaque
%struct.vm_operations_struct = type { void (%struct.vm_area_struct*)*, void (%struct.vm_area_struct*)*, i32 (%struct.vm_area_struct*, %struct.vm_fault*)*, i32 (%struct.vm_area_struct*, %struct.vm_fault*)*, i32 (%struct.vm_area_struct*, i64, i8*, i32, i32)*, i32 (%struct.vm_area_struct*, %struct.mempolicy*)*, %struct.mempolicy* (%struct.vm_area_struct*, i64)*, i32 (%struct.vm_area_struct*, %struct.nodemask_t*, %struct.nodemask_t*, i64)*, i32 (%struct.vm_area_struct*, i64, i64, i64)* }
%struct.vm_fault = type { i32, i64, i8*, %struct.page* }
%struct.page = type { i64, %struct.address_space*, %struct.anon.7, %union.anon.13, %union.anon.15, [8 x i8] }
%struct.address_space = type { %struct.inode*, %struct.radix_tree_root, %struct.spinlock, i32, %struct.rb_root, %struct.list_head, %struct.mutex, i64, i64, %struct.address_space_operations*, i64, %struct.backing_dev_info*, %struct.spinlock, %struct.list_head, i8* }
%struct.inode = type { i16, i16, i32, i32, i32, %struct.posix_acl*, %struct.posix_acl*, %struct.inode_operations*, %struct.super_block*, %struct.address_space*, i8*, i64, %union.anon.17, i32, i64, %struct.timespec, %struct.timespec, %struct.timespec, %struct.spinlock, i16, i32, i64, i64, %struct.mutex, i64, %struct.hlist_node, %struct.list_head, %struct.list_head, %struct.list_head, %union.anon.18, i64, %struct.atomic_t, %struct.atomic_t, %struct.atomic_t, %struct.file_operations*, %struct.file_lock*, %struct.address_space, [2 x %struct.dquot*], %struct.list_head, %union.anon.21, i32, i32, %struct.hlist_head, i8* }
%struct.posix_acl = type opaque
%struct.inode_operations = type { %struct.dentry* (%struct.inode*, %struct.dentry*, i32)*, i8* (%struct.dentry*, %struct.nameidata*)*, i32 (%struct.inode*, i32)*, %struct.posix_acl* (%struct.inode*, i32)*, i32 (%struct.dentry*, i8*, i32)*, void (%struct.dentry*, %struct.nameidata*, i8*)*, i32 (%struct.inode*, %struct.dentry*, i16, i1)*, i32 (%struct.dentry*, %struct.inode*, %struct.dentry*)*, i32 (%struct.inode*, %struct.dentry*)*, i32 (%struct.inode*, %struct.dentry*, i8*)*, i32 (%struct.inode*, %struct.dentry*, i16)*, i32 (%struct.inode*, %struct.dentry*)*, i32 (%struct.inode*, %struct.dentry*, i16, i32)*, i32 (%struct.inode*, %struct.dentry*, %struct.inode*, %struct.dentry*)*, i32 (%struct.dentry*, %struct.iattr*)*, i32 (%struct.vfsmount*, %struct.dentry*, %struct.kstat*)*, i32 (%struct.dentry*, i8*, i8*, i64, i32)*, i64 (%struct.dentry*, i8*, i8*, i64)*, i64 (%struct.dentry*, i8*, i64)*, i32 (%struct.dentry*, i8*)*, i32 (%struct.inode*, %struct.fiemap_extent_info*, i64, i64)*, i32 (%struct.inode*, %struct.timespec*, i32)*, i32 (%struct.inode*, %struct.dentry*, %struct.file*, i32, i16, i32*)*, [8 x i8] }
%struct.dentry = type { i32, %struct.seqcount, %struct.hlist_bl_node, %struct.dentry*, %struct.qstr, %struct.inode*, [32 x i8], i32, %struct.spinlock, %struct.dentry_operations*, %struct.super_block*, i64, i8*, %struct.list_head, %union.anon.22, %struct.list_head, %struct.hlist_node }
%struct.hlist_bl_node = type { %struct.hlist_bl_node*, %struct.hlist_bl_node** }
%struct.qstr = type { %union.anon.1, i8* }
%union.anon.1 = type { i64 }
%struct.dentry_operations = type { i32 (%struct.dentry*, i32)*, i32 (%struct.dentry*, i32)*, i32 (%struct.dentry*, %struct.inode*, %struct.qstr*)*, i32 (%struct.dentry*, %struct.inode*, %struct.dentry*, %struct.inode*, i32, i8*, %struct.qstr*)*, i32 (%struct.dentry*)*, void (%struct.dentry*)*, void (%struct.dentry*)*, void (%struct.dentry*, %struct.inode*)*, i8* (%struct.dentry*, i8*, i32)*, %struct.vfsmount* (%struct.path*)*, i32 (%struct.dentry*, i1)*, [40 x i8] }
%struct.vfsmount = type opaque
%struct.path = type { %struct.vfsmount*, %struct.dentry* }
%union.anon.22 = type { %struct.list_head }
%struct.nameidata = type opaque
%struct.iattr = type { i32, i16, i32, i32, i64, %struct.timespec, %struct.timespec, %struct.timespec, %struct.file* }
%struct.kstat = type { i64, i32, i16, i32, i32, i32, i32, i64, %struct.timespec, %struct.timespec, %struct.timespec, i64, i64 }
%struct.fiemap_extent_info = type { i32, i32, i32, %struct.fiemap_extent* }
%struct.fiemap_extent = type { i64, i64, i64, [2 x i64], i32, [3 x i32] }
%struct.super_block = type { %struct.list_head, i32, i8, i64, i64, %struct.file_system_type*, %struct.super_operations*, %struct.dquot_operations*, %struct.quotactl_ops*, %struct.export_operations*, i64, i64, %struct.dentry*, %struct.rw_semaphore, i32, %struct.atomic_t, i8*, %struct.xattr_handler**, %struct.list_head, %struct.hlist_bl_head, %struct.list_head*, %struct.list_head, %struct.list_head, i32, [28 x i8], %struct.spinlock, %struct.list_head, i32, %struct.block_device*, %struct.backing_dev_info*, %struct.mtd_info*, %struct.hlist_node, %struct.quota_info, %struct.sb_writers, [32 x i8], [16 x i8], i8*, i32, i32, i32, %struct.mutex, i8*, i8*, %struct.dentry_operations*, i32, %struct.shrinker, %struct.atomic64_t, i32, [20 x i8] }
%struct.file_system_type = type { i8*, i32, %struct.dentry* (%struct.file_system_type*, i32, i8*, i8*)*, void (%struct.super_block*)*, %struct.module*, %struct.file_system_type*, %struct.hlist_head, %struct.lock_class_key, %struct.lock_class_key, %struct.lock_class_key, [3 x %struct.lock_class_key], %struct.lock_class_key, %struct.lock_class_key, %struct.lock_class_key }
%struct.module = type { i32, %struct.list_head, [56 x i8], %struct.module_kobject, %struct.module_attribute*, i8*, i8*, %struct.kobject*, %struct.kernel_symbol*, i64*, i32, %struct.kernel_param*, i32, i32, %struct.kernel_symbol*, i64*, %struct.kernel_symbol*, i64*, i32, i32, %struct.exception_table_entry*, i32 ()*, i8*, i8*, i32, i32, i32, i32, i32, i32, %struct.mod_arch_specific, i32, i32, %struct.list_head, %struct.bug_entry*, %struct.elf64_sym*, %struct.elf64_sym*, i32, i32, i8*, i8*, %struct.module_sect_attrs*, %struct.module_notes_attrs*, i8*, i8*, i32, i32, %struct.tracepoint**, i32, i8**, %struct.ftrace_event_call**, i32, %struct.list_head, %struct.list_head, %struct.task_struct*, void ()*, %struct.module_ref* }
%struct.module_kobject = type { %struct.kobject, %struct.module*, %struct.kobject*, %struct.module_param_attrs* }
%struct.module_param_attrs = type opaque
%struct.module_attribute = type { %struct.attribute, i64 (%struct.module_attribute*, %struct.module_kobject*, i8*)*, i64 (%struct.module_attribute*, %struct.module_kobject*, i8*, i64)*, void (%struct.module*, i8*)*, i32 (%struct.module*)*, void (%struct.module*)* }
%struct.kernel_symbol = type { i64, i8* }
%struct.exception_table_entry = type { i32, i32 }
%struct.mod_arch_specific = type {}
%struct.bug_entry = type { i32, i32, i16, i16 }
%struct.elf64_sym = type { i32, i8, i8, i16, i64, i64 }
%struct.module_sect_attrs = type opaque
%struct.module_notes_attrs = type opaque
%struct.tracepoint = type { i8*, %struct.static_key, void ()*, void ()*, %struct.tracepoint_func* }
%struct.static_key = type { %struct.atomic_t }
%struct.tracepoint_func = type { i8*, i8* }
%struct.ftrace_event_call = type opaque
%struct.module_ref = type { i64, i64 }
%struct.lock_class_key = type {}
%struct.super_operations = type { %struct.inode* (%struct.super_block*)*, void (%struct.inode*)*, void (%struct.inode*, i32)*, i32 (%struct.inode*, %struct.writeback_control*)*, i32 (%struct.inode*)*, void (%struct.inode*)*, void (%struct.super_block*)*, i32 (%struct.super_block*, i32)*, i32 (%struct.super_block*)*, i32 (%struct.super_block*)*, i32 (%struct.dentry*, %struct.kstatfs*)*, i32 (%struct.super_block*, i32*, i8*)*, void (%struct.super_block*)*, i32 (%struct.seq_file*, %struct.dentry*)*, i32 (%struct.seq_file*, %struct.dentry*)*, i32 (%struct.seq_file*, %struct.dentry*)*, i32 (%struct.seq_file*, %struct.dentry*)*, i64 (%struct.super_block*, i32, i8*, i64, i64)*, i64 (%struct.super_block*, i32, i8*, i64, i64)*, i32 (%struct.super_block*, %struct.page*, i32)*, i32 (%struct.super_block*)*, void (%struct.super_block*, i32)* }
%struct.writeback_control = type opaque
%struct.kstatfs = type opaque
%struct.seq_file = type opaque
%struct.dquot_operations = type { i32 (%struct.dquot*)*, %struct.dquot* (%struct.super_block*, i32)*, void (%struct.dquot*)*, i32 (%struct.dquot*)*, i32 (%struct.dquot*)*, i32 (%struct.dquot*)*, i32 (%struct.super_block*, i32)*, i64* (%struct.inode*)* }
%struct.dquot = type { %struct.hlist_node, %struct.list_head, %struct.list_head, %struct.list_head, %struct.mutex, %struct.atomic_t, %struct.__wait_queue_head, %struct.super_block*, %struct.kqid, i64, i64, %struct.mem_dqblk }
%struct.__wait_queue_head = type { %struct.spinlock, %struct.list_head }
%struct.kqid = type { %union.anon.16, i32 }
%union.anon.16 = type { i32 }
%struct.mem_dqblk = type { i64, i64, i64, i64, i64, i64, i64, i64, i64 }
%struct.quotactl_ops = type { i32 (%struct.super_block*, i32, i32, %struct.path*)*, i32 (%struct.super_block*, i32, i32)*, i32 (%struct.super_block*, i32)*, i32 (%struct.super_block*, i32)*, i32 (%struct.super_block*, i32, %struct.if_dqinfo*)*, i32 (%struct.super_block*, i32, %struct.if_dqinfo*)*, i32 (%struct.super_block*, i64, %struct.fs_disk_quota*)*, i32 (%struct.super_block*, i64, %struct.fs_disk_quota*)*, i32 (%struct.super_block*, %struct.fs_quota_stat*)*, i32 (%struct.super_block*, i32, i32)* }
%struct.if_dqinfo = type { i64, i64, i32, i32 }
%struct.fs_disk_quota = type { i8, i8, i16, i32, i64, i64, i64, i64, i64, i64, i32, i32, i16, i16, i32, i64, i64, i64, i32, i16, i16, [8 x i8] }
%struct.fs_quota_stat = type { i8, i16, i8, %struct.fs_qfilestat, %struct.fs_qfilestat, i32, i32, i32, i32, i16, i16 }
%struct.fs_qfilestat = type { i64, i64, i32 }
%struct.export_operations = type opaque
%struct.xattr_handler = type opaque
%struct.hlist_bl_head = type { %struct.hlist_bl_node* }
%struct.block_device = type { i32, i32, %struct.inode*, %struct.super_block*, %struct.mutex, %struct.list_head, i8*, i8*, i32, i8, %struct.list_head, %struct.block_device*, i32, %struct.hd_struct*, i32, i32, %struct.gendisk*, %struct.request_queue*, %struct.list_head, i64, i32, %struct.mutex }
%struct.hd_struct = type opaque
%struct.gendisk = type opaque
%struct.request_queue = type opaque
%struct.mtd_info = type opaque
%struct.quota_info = type { i32, %struct.mutex, %struct.mutex, %struct.rw_semaphore, [2 x %struct.inode*], [2 x %struct.mem_dqinfo], [2 x %struct.quota_format_ops*] }
%struct.mem_dqinfo = type { %struct.quota_format_type*, i32, %struct.list_head, i64, i32, i32, i64, i64, i8* }
%struct.quota_format_type = type { i32, %struct.quota_format_ops*, %struct.module*, %struct.quota_format_type* }
%struct.quota_format_ops = type { i32 (%struct.super_block*, i32)*, i32 (%struct.super_block*, i32)*, i32 (%struct.super_block*, i32)*, i32 (%struct.super_block*, i32)*, i32 (%struct.dquot*)*, i32 (%struct.dquot*)*, i32 (%struct.dquot*)* }
%struct.sb_writers = type { [3 x %struct.percpu_counter], %struct.__wait_queue_head, i32, %struct.__wait_queue_head }
%struct.percpu_counter = type { %struct.raw_spinlock, i64, %struct.list_head, i32* }
%struct.shrinker = type { i32 (%struct.shrinker*, %struct.shrink_control*)*, i32, i64, %struct.list_head, %struct.atomic64_t }
%struct.shrink_control = type { i32, i64 }
%struct.atomic64_t = type { i64 }
%union.anon.17 = type { i32 }
%struct.hlist_node = type { %struct.hlist_node*, %struct.hlist_node** }
%union.anon.18 = type { %struct.callback_head }
%struct.file_operations = type { %struct.module*, i64 (%struct.file*, i64, i32)*, i64 (%struct.file*, i8*, i64, i64*)*, i64 (%struct.file*, i8*, i64, i64*)*, i64 (%struct.kiocb*, %struct.iovec*, i64, i64)*, i64 (%struct.kiocb*, %struct.iovec*, i64, i64)*, i32 (%struct.file*, i8*, i32 (i8*, i8*, i32, i64, i64, i32)*)*, i32 (%struct.file*, %struct.poll_table_struct*)*, i64 (%struct.file*, i32, i64)*, i64 (%struct.file*, i32, i64)*, i32 (%struct.file*, %struct.vm_area_struct*)*, i32 (%struct.inode*, %struct.file*)*, i32 (%struct.file*, %struct.files_struct*)*, i32 (%struct.inode*, %struct.file*)*, i32 (%struct.file*, i64, i64, i32)*, i32 (%struct.kiocb*, i32)*, i32 (i32, %struct.file*, i32)*, i32 (%struct.file*, i32, %struct.file_lock*)*, i64 (%struct.file*, %struct.page*, i32, i64, i64*, i32)*, i64 (%struct.file*, i64, i64, i64, i64)*, i32 (i32)*, i32 (%struct.file*, i32, %struct.file_lock*)*, i64 (%struct.pipe_inode_info*, %struct.file*, i64*, i64, i32)*, i64 (%struct.file*, i64*, %struct.pipe_inode_info*, i64, i32)*, i32 (%struct.file*, i64, %struct.file_lock**)*, i64 (%struct.file*, i32, i64, i64)*, i32 (%struct.seq_file*, %struct.file*)* }
%struct.kiocb = type opaque
%struct.iovec = type opaque
%struct.poll_table_struct = type { void (%struct.file*, %struct.__wait_queue_head*, %struct.poll_table_struct*)*, i64 }
%struct.file_lock = type { %struct.file_lock*, %struct.list_head, %struct.list_head, %struct.files_struct*, i32, i8, i32, %struct.pid*, %struct.__wait_queue_head, %struct.file*, i64, i64, %struct.fasync_struct*, i64, i64, %struct.file_lock_operations*, %struct.lock_manager_operations*, %union.anon.19 }
%struct.pid = type { %struct.atomic_t, i32, [3 x %struct.hlist_head], %struct.callback_head, [1 x %struct.upid] }
%struct.upid = type { i32, %struct.pid_namespace*, %struct.hlist_node }
%struct.pid_namespace = type opaque
%struct.fasync_struct = type { %struct.spinlock, i32, i32, %struct.fasync_struct*, %struct.file*, %struct.callback_head }
%struct.file_lock_operations = type { void (%struct.file_lock*, %struct.file_lock*)*, void (%struct.file_lock*)* }
%struct.lock_manager_operations = type { i32 (%struct.file_lock*, %struct.file_lock*)*, void (%struct.file_lock*)*, i32 (%struct.file_lock*, %struct.file_lock*, i32)*, void (%struct.file_lock*)*, i32 (%struct.file_lock**, i32)* }
%union.anon.19 = type { %struct.nfs_lock_info }
%struct.nfs_lock_info = type { i32, %struct.nlm_lockowner*, %struct.list_head }
%struct.nlm_lockowner = type opaque
%union.anon.21 = type { %struct.pipe_inode_info* }
%struct.radix_tree_root = type { i32, i32, %struct.radix_tree_node* }
%struct.radix_tree_node = type opaque
%struct.address_space_operations = type { i32 (%struct.page*, %struct.writeback_control*)*, i32 (%struct.file*, %struct.page*)*, i32 (%struct.address_space*, %struct.writeback_control*)*, i32 (%struct.page*)*, i32 (%struct.file*, %struct.address_space*, %struct.list_head*, i32)*, i32 (%struct.file*, %struct.address_space*, i64, i32, i32, %struct.page**, i8**)*, i32 (%struct.file*, %struct.address_space*, i64, i32, i32, %struct.page*, i8*)*, i64 (%struct.address_space*, i64)*, void (%struct.page*, i64)*, i32 (%struct.page*, i32)*, void (%struct.page*)*, i64 (i32, %struct.kiocb*, %struct.iovec*, i64, i64)*, i32 (%struct.address_space*, i64, i32, i8**, i64*)*, i32 (%struct.address_space*, %struct.page*, %struct.page*, i32)*, i32 (%struct.page*)*, i32 (%struct.page*, %struct.read_descriptor_t*, i64)*, i32 (%struct.address_space*, %struct.page*)*, i32 (%struct.swap_info_struct*, %struct.file*, i64*)*, void (%struct.file*)* }
%struct.read_descriptor_t = type { i64, i64, %union.anon.6, i32 }
%union.anon.6 = type { i8* }
%struct.swap_info_struct = type opaque
%struct.anon.7 = type { %union.anon.8, %union.anon.9 }
%union.anon.8 = type { i64 }
%union.anon.9 = type { i64 }
%union.anon.13 = type { %struct.list_head }
%union.anon.15 = type { i64 }
%struct.pgd_t = type { i64 }
%struct.rw_semaphore = type { i64, %struct.raw_spinlock, %struct.list_head }
%struct.mm_rss_stat = type { [3 x %struct.atomic64_t] }
%struct.linux_binfmt = type opaque
%struct.mm_context_t = type { i8*, i32, i16, %struct.mutex, i8* }
%struct.core_state = type { %struct.atomic_t, %struct.core_thread, %struct.completion }
%struct.core_thread = type { %struct.task_struct*, %struct.core_thread* }
%struct.completion = type { i32, %struct.__wait_queue_head }
%struct.hlist_head = type { %struct.hlist_node* }
%struct.file = type { %union.anon.0, %struct.path, %struct.inode*, %struct.file_operations*, %struct.spinlock, i32, %struct.atomic64_t, i32, i32, i64, %struct.fown_struct, %struct.cred*, %struct.file_ra_state, i64, i8*, i8*, %struct.list_head, %struct.list_head, %struct.address_space* }
%union.anon.0 = type { %struct.list_head }
%struct.fown_struct = type { %struct.rwlock_t, %struct.pid*, i32, i32, i32, i32 }
%struct.rwlock_t = type { %union.arch_rwlock_t }
%union.arch_rwlock_t = type { i32 }
%struct.file_ra_state = type { i64, i32, i32, i32, i32, i64 }
%struct.uprobes_state = type {}
%struct.task_rss_stat = type { i32, [3 x i32] }
%struct.pid_link = type { %struct.hlist_node, %struct.pid* }
%struct.cputime = type { i64, i64 }
%struct.timespec = type { i64, i64 }
%struct.task_cputime = type { i64, i64, i64 }
%struct.cred = type { %struct.atomic_t, i32, i32, i32, i32, i32, i32, i32, i32, i32, %struct.kernel_cap_struct, %struct.kernel_cap_struct, %struct.kernel_cap_struct, %struct.kernel_cap_struct, i8, %struct.key*, %struct.key*, %struct.key*, %struct.key*, i8*, %struct.user_struct*, %struct.user_namespace*, %struct.group_info*, %struct.callback_head }
%struct.kernel_cap_struct = type { [2 x i32] }
%struct.key = type { %struct.atomic_t, i32, %union.anon.23, %struct.key_type*, %struct.rw_semaphore, %struct.key_user*, i8*, %union.anon.24, i64, i32, i32, i32, i16, i16, i64, i8*, %union.anon.25, %union.anon.26 }
%union.anon.23 = type { %struct.rb_node }
%struct.key_type = type opaque
%struct.key_user = type opaque
%union.anon.24 = type { i64 }
%union.anon.25 = type { %struct.list_head }
%union.anon.26 = type { i64 }
%struct.user_struct = type { %struct.atomic_t, %struct.atomic_t, %struct.atomic_t, %struct.atomic_t, %struct.atomic_t, %struct.atomic_t, %struct.atomic64_t, i64, i64, %struct.key*, %struct.key*, %struct.hlist_node, i32, %struct.atomic64_t }
%struct.user_namespace = type opaque
%struct.group_info = type { %struct.atomic_t, i32, i32, [32 x i32], [0 x i32*] }
%struct.sysv_sem = type { %struct.sem_undo_list* }
%struct.sem_undo_list = type opaque
%struct.thread_struct = type { [3 x %struct.desc_struct], i64, i64, i64, i16, i16, i16, i16, i64, i64, [4 x %struct.perf_event*], i64, i64, i64, i64, i64, %struct.fpu, i64*, i64, i32 }
%struct.desc_struct = type { %union.anon.27 }
%union.anon.27 = type { %struct.anon.28 }
%struct.anon.28 = type { i32, i32 }
%struct.perf_event = type opaque
%struct.fpu = type { i32, i32, %union.thread_xstate* }
%union.thread_xstate = type { %struct.xsave_struct }
%struct.xsave_struct = type { %struct.i387_fxsave_struct, %struct.xsave_hdr_struct, %struct.ymmh_struct }
%struct.i387_fxsave_struct = type { i16, i16, i16, i16, %union.anon.30, i32, i32, [32 x i32], [64 x i32], [12 x i32], %union.anon.33 }
%union.anon.30 = type { %struct.anon.31 }
%struct.anon.31 = type { i64, i64 }
%union.anon.33 = type { [12 x i32] }
%struct.xsave_hdr_struct = type { i64, [2 x i64], [5 x i64] }
%struct.ymmh_struct = type { [64 x i32] }
%struct.fs_struct = type opaque
%struct.files_struct = type opaque
%struct.nsproxy = type opaque
%struct.signal_struct = type { %struct.atomic_t, %struct.atomic_t, i32, %struct.__wait_queue_head, %struct.task_struct*, %struct.sigpending, i32, i32, %struct.task_struct*, i32, i32, i8, i32, %struct.list_head, %struct.hrtimer, %struct.pid*, %union.ktime, [2 x %struct.cpu_itimer], %struct.thread_group_cputimer, %struct.task_cputime, [3 x %struct.list_head], %struct.pid*, i32, %struct.tty_struct*, i64, i64, i64, i64, i64, i64, %struct.cputime, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, %struct.task_io_accounting, i64, [16 x %struct.rlimit], %struct.pacct_struct, %struct.taskstats*, i32, i32, %struct.tty_audit_buf*, %struct.rw_semaphore, i32, i16, i16, %struct.mutex }
%struct.hrtimer = type { %struct.timerqueue_node, %union.ktime, i32 (%struct.hrtimer*)*, %struct.hrtimer_clock_base*, i64, i32, i8*, [16 x i8] }
%struct.timerqueue_node = type { %struct.rb_node, %union.ktime }
%struct.hrtimer_clock_base = type { %struct.hrtimer_cpu_base*, i32, i32, %struct.timerqueue_head, %union.ktime, i64 ()*, %union.ktime, %union.ktime }
%struct.hrtimer_cpu_base = type { %struct.raw_spinlock, i32, i32, %union.ktime, i32, i32, i64, i64, i64, %union.ktime, [4 x %struct.hrtimer_clock_base] }
%struct.timerqueue_head = type { %struct.rb_root, %struct.timerqueue_node* }
%union.ktime = type { i64 }
%struct.cpu_itimer = type { i64, i64, i32, i32 }
%struct.thread_group_cputimer = type { %struct.task_cputime, i32, %struct.raw_spinlock }
%struct.tty_struct = type opaque
%struct.rlimit = type { i64, i64 }
%struct.pacct_struct = type { i32, i64, i64, i64, i64, i64, i64 }
%struct.taskstats = type opaque
%struct.tty_audit_buf = type opaque
%struct.sighand_struct = type { %struct.atomic_t, [64 x %struct.k_sigaction], %struct.spinlock, %struct.__wait_queue_head }
%struct.k_sigaction = type { %struct.sigaction }
%struct.sigaction = type { void (i32)*, i64, void ()*, %struct.sigset_t }
%struct.sigset_t = type { [1 x i64] }
%struct.sigpending = type { %struct.list_head, %struct.sigset_t }
%struct.audit_context = type opaque
%struct.seccomp = type { i32, %struct.seccomp_filter* }
%struct.seccomp_filter = type opaque
%struct.raw_spinlock = type { %struct.arch_spinlock }
%struct.arch_spinlock = type { %union.anon.5 }
%union.anon.5 = type { i16 }
%struct.plist_head = type { %struct.list_head }
%struct.rt_mutex_waiter = type opaque
%struct.bio_list = type opaque
%struct.blk_plug = type opaque
%struct.reclaim_state = type opaque
%struct.backing_dev_info = type opaque
%struct.io_context = type opaque
%struct.siginfo = type { i32, i32, i32, %union.anon.35 }
%union.anon.35 = type { %struct.anon.39, [80 x i8] }
%struct.anon.39 = type { i32, i32, i32, i64, i64 }
%struct.task_io_accounting = type { i64, i64, i64, i64, i64, i64, i64 }
%struct.nodemask_t = type { [1 x i64] }
%struct.seqcount = type { i32 }
%struct.css_set = type opaque
%struct.robust_list_head = type opaque
%struct.compat_robust_list_head = type opaque
%struct.futex_pi_state = type opaque
%struct.perf_event_context = type opaque
%struct.mempolicy = type opaque
%struct.callback_head = type { %struct.callback_head*, void (%struct.callback_head*)* }
%struct.pipe_inode_info = type opaque
%struct.page_frag = type { %struct.page*, i32, i32 }
%struct.task_delay_info = type { %struct.spinlock, i32, %struct.timespec, %struct.timespec, i64, i64, i32, i32, %struct.timespec, %struct.timespec, i64, i32 }
%struct.bus_type = type { i8*, i8*, %struct.device*, %struct.bus_attribute*, %struct.device_attribute*, %struct.driver_attribute*, i32 (%struct.device*, %struct.device_driver*)*, i32 (%struct.device*, %struct.kobj_uevent_env*)*, i32 (%struct.device*)*, i32 (%struct.device*)*, void (%struct.device*)*, i32 (%struct.device*, i32)*, i32 (%struct.device*)*, %struct.dev_pm_ops*, %struct.iommu_ops*, %struct.subsys_private*, %struct.lock_class_key }
%struct.bus_attribute = type { %struct.attribute, i64 (%struct.bus_type*, i8*)*, i64 (%struct.bus_type*, i8*, i64)* }
%struct.device_attribute = type { %struct.attribute, i64 (%struct.device*, %struct.device_attribute*, i8*)*, i64 (%struct.device*, %struct.device_attribute*, i8*, i64)* }
%struct.driver_attribute = type { %struct.attribute, i64 (%struct.device_driver*, i8*)*, i64 (%struct.device_driver*, i8*, i64)* }
%struct.iommu_ops = type opaque
%struct.subsys_private = type opaque
%struct.device_driver = type { i8*, %struct.bus_type*, %struct.module*, i8*, i8, %struct.of_device_id*, %struct.acpi_device_id*, i32 (%struct.device*)*, i32 (%struct.device*)*, void (%struct.device*)*, i32 (%struct.device*, i32)*, i32 (%struct.device*)*, %struct.attribute_group**, %struct.dev_pm_ops*, %struct.driver_private* }
%struct.of_device_id = type { [32 x i8], [32 x i8], [128 x i8], i8* }
%struct.acpi_device_id = type { [9 x i8], i64 }
%struct.driver_private = type opaque
%struct.dev_pm_info = type { %struct.pm_message, i8, %struct.spinlock, %struct.list_head, %struct.completion, %struct.wakeup_source*, i8, %struct.pm_subsys_data*, %struct.dev_pm_qos* }
%struct.pm_message = type { i32 }
%struct.wakeup_source = type { i8*, %struct.list_head, %struct.spinlock, %struct.timer_list, i64, %union.ktime, %union.ktime, %union.ktime, %union.ktime, %union.ktime, i64, i64, i64, i64, i64, i8 }
%struct.timer_list = type { %struct.list_head, i64, %struct.tvec_base*, void (i64)*, i64, i32, i32, i8*, [16 x i8] }
%struct.tvec_base = type opaque
%struct.pm_subsys_data = type { %struct.spinlock, i32 }
%struct.dev_pm_qos = type opaque
%struct.dev_pm_domain = type { %struct.dev_pm_ops }
%struct.device_dma_parameters = type { i32, i64 }
%struct.dma_coherent_mem = type opaque
%struct.dev_archdata = type { %struct.dma_map_ops*, i8* }
%struct.dma_map_ops = type { i8* (%struct.device*, i64, i64*, i32, %struct.dma_attrs*)*, void (%struct.device*, i64, i8*, i64, %struct.dma_attrs*)*, i32 (%struct.device*, %struct.vm_area_struct*, i8*, i64, i64, %struct.dma_attrs*)*, i32 (%struct.device*, %struct.sg_table*, i8*, i64, i64, %struct.dma_attrs*)*, i64 (%struct.device*, %struct.page*, i64, i64, i32, %struct.dma_attrs*)*, void (%struct.device*, i64, i64, i32, %struct.dma_attrs*)*, i32 (%struct.device*, %struct.scatterlist*, i32, i32, %struct.dma_attrs*)*, void (%struct.device*, %struct.scatterlist*, i32, i32, %struct.dma_attrs*)*, void (%struct.device*, i64, i64, i32)*, void (%struct.device*, i64, i64, i32)*, void (%struct.device*, %struct.scatterlist*, i32, i32)*, void (%struct.device*, %struct.scatterlist*, i32, i32)*, i32 (%struct.device*, i64)*, i32 (%struct.device*, i64)*, i32 (%struct.device*, i64)*, i32 }
%struct.dma_attrs = type { [1 x i64] }
%struct.sg_table = type { %struct.scatterlist*, i32, i32 }
%struct.scatterlist = type { i64, i32, i32, i64, i32 }
%struct.device_node = type opaque
%struct.acpi_dev_node = type { i8* }
%struct.spinlock = type { %union.anon.4 }
%union.anon.4 = type { %struct.raw_spinlock }
%struct.klist_node = type { i8*, %struct.list_head, %struct.kref }
%struct.class = type { i8*, %struct.module*, %struct.class_attribute*, %struct.device_attribute*, %struct.bin_attribute*, %struct.kobject*, i32 (%struct.device*, %struct.kobj_uevent_env*)*, i8* (%struct.device*, i16*)*, void (%struct.class*)*, void (%struct.device*)*, i32 (%struct.device*, i32)*, i32 (%struct.device*)*, %struct.kobj_ns_type_operations*, i8* (%struct.device*)*, %struct.dev_pm_ops*, %struct.subsys_private* }
%struct.class_attribute = type { %struct.attribute, i64 (%struct.class*, %struct.class_attribute*, i8*)*, i64 (%struct.class*, %struct.class_attribute*, i8*, i64)*, i8* (%struct.class*, %struct.class_attribute*)* }
%struct.bin_attribute = type { %struct.attribute, i64, i8*, i64 (%struct.file*, %struct.kobject*, %struct.bin_attribute*, i8*, i64, i64)*, i64 (%struct.file*, %struct.kobject*, %struct.bin_attribute*, i8*, i64, i64)*, i32 (%struct.file*, %struct.kobject*, %struct.bin_attribute*, %struct.vm_area_struct*)* }
%struct.attribute_group = type { i8*, i16 (%struct.kobject*, %struct.attribute*, i32)*, %struct.attribute** }
%struct.iommu_group = type opaque
%struct.atomic_t = type { i32 }
%struct.work_struct = type { %struct.atomic64_t, %struct.list_head, void (%struct.work_struct*)* }
%struct.usb_dynids = type { %struct.spinlock, %struct.list_head }
%struct.usbdrv_wrap = type { %struct.device_driver, i32 }
%struct.module_version_attribute = type { %struct.module_attribute, i8*, i8* }
%struct.smp_ops = type { void ()*, void (i32)*, void (i32)*, void (i32)*, void (i32)*, i32 (i32, %struct.task_struct*)*, i32 ()*, void (i32)*, void ()*, void (%struct.cpumask*)*, void (i32)* }
%struct.uvc_format_desc = type { i8*, [16 x i8], i32 }
%struct.v4l2_file_operations = type { %struct.module*, i64 (%struct.file*, i8*, i64, i64*)*, i64 (%struct.file*, i8*, i64, i64*)*, i32 (%struct.file*, %struct.poll_table_struct*)*, i64 (%struct.file*, i32, i64)*, i64 (%struct.file*, i32, i64)*, i64 (%struct.file*, i32, i64)*, i64 (%struct.file*, i64, i64, i64, i64)*, i32 (%struct.file*, %struct.vm_area_struct*)*, i32 (%struct.file*)*, i32 (%struct.file*)* }
%struct.uvc_entity = type { %struct.list_head, %struct.list_head, i32, i8, i16, [64 x i8], %struct.video_device*, %struct.v4l2_subdev, i32, i32, %struct.media_pad*, %union.anon.58, i8, i8*, i32, %struct.uvc_control* }
%struct.video_device = type { %struct.v4l2_file_operations*, %struct.device, %struct.cdev*, %struct.device*, %struct.v4l2_device*, %struct.v4l2_ctrl_handler*, %struct.vb2_queue*, %struct.v4l2_prio_state*, [32 x i8], i32, i32, i32, i16, i64, i32, %struct.spinlock, %struct.list_head, i32, i64, i64, void (%struct.video_device*)*, %struct.v4l2_ioctl_ops*, [3 x i64], [3 x i64], %struct.mutex* }
%struct.cdev = type { %struct.kobject, %struct.module*, %struct.file_operations*, %struct.list_head, i32, i32 }
%struct.v4l2_device = type { %struct.device*, %struct.list_head, %struct.spinlock, [36 x i8], void (%struct.v4l2_subdev*, i32, i8*)*, %struct.v4l2_ctrl_handler*, %struct.v4l2_prio_state, %struct.mutex, %struct.kref, void (%struct.v4l2_device*)* }
%struct.v4l2_prio_state = type { [4 x %struct.atomic_t] }
%struct.v4l2_ctrl_handler = type opaque
%struct.vb2_queue = type { i32, i32, i32, %struct.mutex*, %struct.v4l2_fh*, %struct.vb2_ops*, %struct.vb2_mem_ops*, i8*, i32, i32, i32, i32, [32 x %struct.vb2_buffer*], i32, %struct.list_head, %struct.atomic_t, %struct.list_head, %struct.spinlock, %struct.__wait_queue_head, [8 x i8*], [8 x i32], i8, %struct.vb2_fileio_data* }
%struct.v4l2_fh = type { %struct.list_head, %struct.video_device*, %struct.v4l2_ctrl_handler*, i32, %struct.__wait_queue_head, %struct.list_head, %struct.list_head, i32, i32 }
%struct.vb2_ops = type { i32 (%struct.vb2_queue*, %struct.v4l2_format*, i32*, i32*, i32*, i8**)*, void (%struct.vb2_queue*)*, void (%struct.vb2_queue*)*, i32 (%struct.vb2_buffer*)*, i32 (%struct.vb2_buffer*)*, i32 (%struct.vb2_buffer*)*, void (%struct.vb2_buffer*)*, i32 (%struct.vb2_queue*, i32)*, i32 (%struct.vb2_queue*)*, void (%struct.vb2_buffer*)* }
%struct.v4l2_format = type { i32, %union.anon.51 }
%union.anon.51 = type { %struct.v4l2_window, [144 x i8] }
%struct.v4l2_window = type { %struct.v4l2_rect, i32, i32, %struct.v4l2_clip*, i32, i8*, i8 }
%struct.v4l2_rect = type { i32, i32, i32, i32 }
%struct.v4l2_clip = type { %struct.v4l2_rect, %struct.v4l2_clip* }
%struct.vb2_buffer = type { %struct.v4l2_buffer, [8 x %struct.v4l2_plane], %struct.vb2_queue*, i32, i32, %struct.list_head, %struct.list_head, [8 x %struct.vb2_plane] }
%struct.v4l2_buffer = type { i32, i32, i32, i32, i32, %struct.timeval, %struct.v4l2_timecode, i32, i32, %union.anon.52, i32, i32, i32 }
%struct.timeval = type { i64, i64 }
%struct.v4l2_timecode = type { i32, i32, i8, i8, i8, i8, [4 x i8] }
%union.anon.52 = type { i64 }
%struct.v4l2_plane = type { i32, i32, %union.anon.53, i32, [11 x i32] }
%union.anon.53 = type { i64 }
%struct.vb2_plane = type { i8*, %struct.dma_buf*, i32 }
%struct.dma_buf = type { i64, %struct.file*, %struct.list_head, %struct.dma_buf_ops*, %struct.mutex, i32, i8*, i8*, %struct.list_head, i8* }
%struct.dma_buf_ops = type { i32 (%struct.dma_buf*, %struct.device*, %struct.dma_buf_attachment*)*, void (%struct.dma_buf*, %struct.dma_buf_attachment*)*, %struct.sg_table* (%struct.dma_buf_attachment*, i32)*, void (%struct.dma_buf_attachment*, %struct.sg_table*, i32)*, void (%struct.dma_buf*)*, i32 (%struct.dma_buf*, i64, i64, i32)*, void (%struct.dma_buf*, i64, i64, i32)*, i8* (%struct.dma_buf*, i64)*, void (%struct.dma_buf*, i64, i8*)*, i8* (%struct.dma_buf*, i64)*, void (%struct.dma_buf*, i64, i8*)*, i32 (%struct.dma_buf*, %struct.vm_area_struct*)*, i8* (%struct.dma_buf*)*, void (%struct.dma_buf*, i8*)* }
%struct.dma_buf_attachment = type { %struct.dma_buf*, %struct.device*, %struct.list_head, i8* }
%struct.vb2_mem_ops = type { i8* (i8*, i64, i32)*, void (i8*)*, %struct.dma_buf* (i8*)*, i8* (i8*, i64, i64, i32)*, void (i8*)*, void (i8*)*, void (i8*)*, i8* (i8*, %struct.dma_buf*, i64, i32)*, void (i8*)*, i32 (i8*)*, void (i8*)*, i8* (i8*)*, i8* (i8*)*, i32 (i8*)*, i32 (i8*, %struct.vm_area_struct*)* }
%struct.vb2_fileio_data = type opaque
%struct.v4l2_ioctl_ops = type opaque
%struct.v4l2_subdev = type { %struct.list_head, %struct.module*, i32, %struct.v4l2_device*, %struct.v4l2_subdev_ops*, %struct.v4l2_subdev_internal_ops*, %struct.v4l2_ctrl_handler*, [32 x i8], i32, i8*, i8*, %struct.video_device* }
%struct.v4l2_subdev_ops = type { %struct.v4l2_subdev_core_ops*, %struct.v4l2_subdev_tuner_ops*, %struct.v4l2_subdev_audio_ops*, %struct.v4l2_subdev_video_ops*, %struct.v4l2_subdev_vbi_ops*, %struct.v4l2_subdev_ir_ops*, %struct.v4l2_subdev_sensor_ops*, %struct.v4l2_subdev_pad_ops* }
%struct.v4l2_subdev_core_ops = type { i32 (%struct.v4l2_subdev*, %struct.v4l2_dbg_chip_ident*)*, i32 (%struct.v4l2_subdev*)*, i32 (%struct.v4l2_subdev*, i64, %struct.v4l2_subdev_io_pin_config*)*, i32 (%struct.v4l2_subdev*, i32)*, i32 (%struct.v4l2_subdev*)*, i32 (%struct.v4l2_subdev*, i32)*, i32 (%struct.v4l2_subdev*, i32)*, i32 (%struct.v4l2_subdev*, %struct.v4l2_queryctrl*)*, i32 (%struct.v4l2_subdev*, %struct.v4l2_control*)*, i32 (%struct.v4l2_subdev*, %struct.v4l2_control*)*, i32 (%struct.v4l2_subdev*, %struct.v4l2_ext_controls*)*, i32 (%struct.v4l2_subdev*, %struct.v4l2_ext_controls*)*, i32 (%struct.v4l2_subdev*, %struct.v4l2_ext_controls*)*, i32 (%struct.v4l2_subdev*, %struct.v4l2_querymenu*)*, i32 (%struct.v4l2_subdev*, i64*)*, i32 (%struct.v4l2_subdev*, i64)*, i64 (%struct.v4l2_subdev*, i32, i8*)*, i32 (%struct.v4l2_subdev*, i32)*, i32 (%struct.v4l2_subdev*, i32, i8*)*, i32 (%struct.v4l2_subdev*, %struct.v4l2_fh*, %struct.v4l2_event_subscription*)*, i32 (%struct.v4l2_subdev*, %struct.v4l2_fh*, %struct.v4l2_event_subscription*)* }
%struct.v4l2_dbg_chip_ident = type { %struct.v4l2_dbg_match, i32, i32 }
%struct.v4l2_dbg_match = type { i32, %union.anon.43 }
%union.anon.43 = type { i32, [28 x i8] }
%struct.v4l2_subdev_io_pin_config = type { i32, i8, i8, i8, i8 }
%struct.v4l2_queryctrl = type { i32, i32, [32 x i8], i32, i32, i32, i32, i32, [2 x i32] }
%struct.v4l2_control = type { i32, i32 }
%struct.v4l2_ext_controls = type { i32, i32, i32, [2 x i32], %struct.v4l2_ext_control* }
%struct.v4l2_ext_control = type <{ i32, i32, [1 x i32], %union.anon.44 }>
%union.anon.44 = type { i64 }
%struct.v4l2_querymenu = type <{ i32, i32, %union.anon.45, i32 }>
%union.anon.45 = type { i64, [24 x i8] }
%struct.v4l2_event_subscription = type { i32, i32, i32, [5 x i32] }
%struct.v4l2_subdev_tuner_ops = type { i32 (%struct.v4l2_subdev*)*, i32 (%struct.v4l2_subdev*, %struct.v4l2_frequency*)*, i32 (%struct.v4l2_subdev*, %struct.v4l2_frequency*)*, i32 (%struct.v4l2_subdev*, %struct.v4l2_tuner*)*, i32 (%struct.v4l2_subdev*, %struct.v4l2_tuner*)*, i32 (%struct.v4l2_subdev*, %struct.v4l2_modulator*)*, i32 (%struct.v4l2_subdev*, %struct.v4l2_modulator*)*, i32 (%struct.v4l2_subdev*, %struct.tuner_setup*)*, i32 (%struct.v4l2_subdev*, %struct.v4l2_priv_tun_config*)* }
%struct.v4l2_frequency = type { i32, i32, i32, [8 x i32] }
%struct.v4l2_tuner = type { i32, [32 x i8], i32, i32, i32, i32, i32, i32, i32, i32, [4 x i32] }
%struct.v4l2_modulator = type { i32, [32 x i8], i32, i32, i32, i32, [4 x i32] }
%struct.tuner_setup = type opaque
%struct.v4l2_priv_tun_config = type { i32, i8* }
%struct.v4l2_subdev_audio_ops = type { i32 (%struct.v4l2_subdev*, i32)*, i32 (%struct.v4l2_subdev*, i32)*, i32 (%struct.v4l2_subdev*, i32, i32, i32)*, i32 (%struct.v4l2_subdev*, i32)* }
%struct.v4l2_subdev_video_ops = type { i32 (%struct.v4l2_subdev*, i32, i32, i32)*, i32 (%struct.v4l2_subdev*, i32, i32)*, i32 (%struct.v4l2_subdev*, i64)*, i32 (%struct.v4l2_subdev*, i64*)*, i32 (%struct.v4l2_subdev*, i64*)*, i32 (%struct.v4l2_subdev*, i64*)*, i32 (%struct.v4l2_subdev*, i32*)*, i32 (%struct.v4l2_subdev*, i32)*, i32 (%struct.v4l2_subdev*, %struct.v4l2_cropcap*)*, i32 (%struct.v4l2_subdev*, %struct.v4l2_crop*)*, i32 (%struct.v4l2_subdev*, %struct.v4l2_crop*)*, i32 (%struct.v4l2_subdev*, %struct.v4l2_streamparm*)*, i32 (%struct.v4l2_subdev*, %struct.v4l2_streamparm*)*, i32 (%struct.v4l2_subdev*, %struct.v4l2_subdev_frame_interval*)*, i32 (%struct.v4l2_subdev*, %struct.v4l2_subdev_frame_interval*)*, i32 (%struct.v4l2_subdev*, %struct.v4l2_frmsizeenum*)*, i32 (%struct.v4l2_subdev*, %struct.v4l2_frmivalenum*)*, i32 (%struct.v4l2_subdev*, %struct.v4l2_dv_timings*)*, i32 (%struct.v4l2_subdev*, %struct.v4l2_dv_timings*)*, i32 (%struct.v4l2_subdev*, %struct.v4l2_enum_dv_timings*)*, i32 (%struct.v4l2_subdev*, %struct.v4l2_dv_timings*)*, i32 (%struct.v4l2_subdev*, %struct.v4l2_dv_timings_cap*)*, i32 (%struct.v4l2_subdev*, i32, i32*)*, i32 (%struct.v4l2_subdev*, %struct.v4l2_frmsizeenum*)*, i32 (%struct.v4l2_subdev*, %struct.v4l2_mbus_framefmt*)*, i32 (%struct.v4l2_subdev*, %struct.v4l2_mbus_framefmt*)*, i32 (%struct.v4l2_subdev*, %struct.v4l2_mbus_framefmt*)*, i32 (%struct.v4l2_subdev*, %struct.v4l2_mbus_config*)*, i32 (%struct.v4l2_subdev*, %struct.v4l2_mbus_config*)*, i32 (%struct.v4l2_subdev*, i8*, i32*)* }
%struct.v4l2_cropcap = type { i32, %struct.v4l2_rect, %struct.v4l2_rect, %struct.v4l2_fract }
%struct.v4l2_fract = type { i32, i32 }
%struct.v4l2_crop = type { i32, %struct.v4l2_rect }
%struct.v4l2_streamparm = type { i32, %union.anon.46 }
%union.anon.46 = type { %struct.v4l2_captureparm, [160 x i8] }
%struct.v4l2_captureparm = type { i32, i32, %struct.v4l2_fract, i32, i32, [4 x i32] }
%struct.v4l2_subdev_frame_interval = type { i32, %struct.v4l2_fract, [9 x i32] }
%struct.v4l2_frmivalenum = type { i32, i32, i32, i32, i32, %union.anon.48, [2 x i32] }
%union.anon.48 = type { %struct.v4l2_frmival_stepwise }
%struct.v4l2_frmival_stepwise = type { %struct.v4l2_fract, %struct.v4l2_fract, %struct.v4l2_fract }
%struct.v4l2_enum_dv_timings = type { i32, [3 x i32], %struct.v4l2_dv_timings }
%struct.v4l2_dv_timings = type { i32, %union.anon.49 }
%union.anon.49 = type { [32 x i32] }
%struct.v4l2_dv_timings_cap = type { i32, [3 x i32], %union.anon.50 }
%union.anon.50 = type { %struct.v4l2_bt_timings_cap, [24 x i8] }
%struct.v4l2_bt_timings_cap = type { i32, i32, i32, i32, i64, i64, i32, i32, [16 x i32] }
%struct.v4l2_frmsizeenum = type { i32, i32, i32, %union.anon.47, [2 x i32] }
%union.anon.47 = type { %struct.v4l2_frmsize_stepwise }
%struct.v4l2_frmsize_stepwise = type { i32, i32, i32, i32, i32, i32 }
%struct.v4l2_mbus_framefmt = type { i32, i32, i32, i32, i32, [7 x i32] }
%struct.v4l2_mbus_config = type { i32, i32 }
%struct.v4l2_subdev_vbi_ops = type { i32 (%struct.v4l2_subdev*, %struct.v4l2_decode_vbi_line*)*, i32 (%struct.v4l2_subdev*, %struct.v4l2_sliced_vbi_data*)*, i32 (%struct.v4l2_subdev*, %struct.v4l2_sliced_vbi_data*)*, i32 (%struct.v4l2_subdev*, %struct.v4l2_sliced_vbi_cap*)*, i32 (%struct.v4l2_subdev*, %struct.v4l2_vbi_format*)*, i32 (%struct.v4l2_subdev*, %struct.v4l2_sliced_vbi_format*)*, i32 (%struct.v4l2_subdev*, %struct.v4l2_sliced_vbi_format*)* }
%struct.v4l2_decode_vbi_line = type { i32, i8*, i32, i32 }
%struct.v4l2_sliced_vbi_data = type { i32, i32, i32, i32, [48 x i8] }
%struct.v4l2_sliced_vbi_cap = type { i16, [2 x [24 x i16]], i32, [3 x i32] }
%struct.v4l2_vbi_format = type { i32, i32, i32, i32, [2 x i32], [2 x i32], i32, [2 x i32] }
%struct.v4l2_sliced_vbi_format = type { i16, [2 x [24 x i16]], i32, [2 x i32] }
%struct.v4l2_subdev_ir_ops = type { i32 (%struct.v4l2_subdev*, i8*, i64, i64*)*, i32 (%struct.v4l2_subdev*, %struct.v4l2_subdev_ir_parameters*)*, i32 (%struct.v4l2_subdev*, %struct.v4l2_subdev_ir_parameters*)*, i32 (%struct.v4l2_subdev*, i8*, i64, i64*)*, i32 (%struct.v4l2_subdev*, %struct.v4l2_subdev_ir_parameters*)*, i32 (%struct.v4l2_subdev*, %struct.v4l2_subdev_ir_parameters*)* }
%struct.v4l2_subdev_ir_parameters = type { i32, i32, i8, i8, i8, i8, i32, i32, i32, i8, i8, i32, i32, i32, i32 }
%struct.v4l2_subdev_sensor_ops = type { i32 (%struct.v4l2_subdev*, i32*)*, i32 (%struct.v4l2_subdev*, i32*)* }
%struct.v4l2_subdev_pad_ops = type { i32 (%struct.v4l2_subdev*, %struct.v4l2_subdev_fh*, %struct.v4l2_subdev_mbus_code_enum*)*, i32 (%struct.v4l2_subdev*, %struct.v4l2_subdev_fh*, %struct.v4l2_subdev_frame_size_enum*)*, i32 (%struct.v4l2_subdev*, %struct.v4l2_subdev_fh*, %struct.v4l2_subdev_frame_interval_enum*)*, i32 (%struct.v4l2_subdev*, %struct.v4l2_subdev_fh*, %struct.v4l2_subdev_format*)*, i32 (%struct.v4l2_subdev*, %struct.v4l2_subdev_fh*, %struct.v4l2_subdev_format*)*, i32 (%struct.v4l2_subdev*, %struct.v4l2_subdev_fh*, %struct.v4l2_subdev_crop*)*, i32 (%struct.v4l2_subdev*, %struct.v4l2_subdev_fh*, %struct.v4l2_subdev_crop*)*, i32 (%struct.v4l2_subdev*, %struct.v4l2_subdev_fh*, %struct.v4l2_subdev_selection*)*, i32 (%struct.v4l2_subdev*, %struct.v4l2_subdev_fh*, %struct.v4l2_subdev_selection*)*, i32 (%struct.v4l2_subdev*, %struct.v4l2_subdev_edid*)*, i32 (%struct.v4l2_subdev*, %struct.v4l2_subdev_edid*)*, i32 (%struct.v4l2_subdev*, i32, %struct.v4l2_mbus_frame_desc*)*, i32 (%struct.v4l2_subdev*, i32, %struct.v4l2_mbus_frame_desc*)* }
%struct.v4l2_subdev_fh = type { %struct.v4l2_fh }
%struct.v4l2_subdev_mbus_code_enum = type { i32, i32, i32, [9 x i32] }
%struct.v4l2_subdev_frame_size_enum = type { i32, i32, i32, i32, i32, i32, i32, [9 x i32] }
%struct.v4l2_subdev_frame_interval_enum = type { i32, i32, i32, i32, i32, %struct.v4l2_fract, [9 x i32] }
%struct.v4l2_subdev_format = type { i32, i32, %struct.v4l2_mbus_framefmt, [8 x i32] }
%struct.v4l2_subdev_crop = type { i32, i32, %struct.v4l2_rect, [8 x i32] }
%struct.v4l2_subdev_selection = type { i32, i32, i32, i32, %struct.v4l2_rect, [8 x i32] }
%struct.v4l2_subdev_edid = type { i32, i32, i32, [5 x i32], i8* }
%struct.v4l2_mbus_frame_desc = type { [4 x %struct.v4l2_mbus_frame_desc_entry], i16 }
%struct.v4l2_mbus_frame_desc_entry = type { i16, i32, i32 }
%struct.v4l2_subdev_internal_ops = type { i32 (%struct.v4l2_subdev*)*, void (%struct.v4l2_subdev*)*, i32 (%struct.v4l2_subdev*, %struct.v4l2_subdev_fh*)*, i32 (%struct.v4l2_subdev*, %struct.v4l2_subdev_fh*)* }
%struct.media_pad = type { %struct.media_entity*, i16, i64 }
%struct.media_entity = type { %struct.list_head, %struct.media_device*, i32, i8*, i32, i32, i64, i32, i16, i16, i16, i16, %struct.media_pad*, %struct.media_link*, %struct.media_entity_operations*, i32, i32, %struct.media_pipeline*, %union.anon.54 }
%struct.media_device = type { %struct.device*, %struct.media_devnode, [32 x i8], [40 x i8], [32 x i8], i32, i32, i32, %struct.list_head, %struct.spinlock, %struct.mutex, i32 (%struct.media_pad*, %struct.media_pad*, i32)* }
%struct.media_devnode = type { %struct.media_file_operations*, %struct.device, %struct.cdev, %struct.device*, i32, i64, void (%struct.media_devnode*)* }
%struct.media_file_operations = type { %struct.module*, i64 (%struct.file*, i8*, i64, i64*)*, i64 (%struct.file*, i8*, i64, i64*)*, i32 (%struct.file*, %struct.poll_table_struct*)*, i64 (%struct.file*, i32, i64)*, i64 (%struct.file*, i32, i64)*, i32 (%struct.file*)*, i32 (%struct.file*)* }
%struct.media_link = type { %struct.media_pad*, %struct.media_pad*, %struct.media_link*, i64 }
%struct.media_entity_operations = type { i32 (%struct.media_entity*, %struct.media_pad*, %struct.media_pad*, i32)*, i32 (%struct.media_link*)* }
%struct.media_pipeline = type {}
%union.anon.54 = type { %struct.anon.57 }
%struct.anon.57 = type { i32, i32, i32 }
%union.anon.58 = type { %struct.anon.64 }
%struct.anon.64 = type { [16 x i8], i8, i8, i8*, i8* }
%struct.uvc_control = type { %struct.uvc_entity*, %struct.uvc_control_info, i8, i8, i8* }
%struct.uvc_control_info = type { %struct.list_head, [16 x i8], i8, i8, i16, i32 }
%struct.uvc_device = type { %struct.usb_device*, %struct.usb_interface*, i64, i32, i32, [32 x i8], i32, %struct.atomic_t, %struct.atomic_t, %struct.v4l2_device, i16, i32, %struct.list_head, %struct.list_head, %struct.list_head, %struct.atomic_t, %struct.usb_host_endpoint*, %struct.urb*, i8*, %struct.input_dev*, [64 x i8] }
%struct.usb_device = type { i32, [16 x i8], i32, i32, i32, %struct.usb_tt*, i32, [2 x i32], %struct.usb_device*, %struct.usb_bus*, %struct.usb_host_endpoint, %struct.device, %struct.usb_device_descriptor, %struct.usb_host_bos*, %struct.usb_host_config*, %struct.usb_host_config*, [16 x %struct.usb_host_endpoint*], [16 x %struct.usb_host_endpoint*], i8**, i16, i8, i8, i16, i32, i8*, i8*, i8*, %struct.list_head, i32, i32, %struct.atomic_t, i64, i64, i8, %struct.wusb_dev*, i32, i32, %struct.usb3_lpm_parameters, %struct.usb3_lpm_parameters, i32 }
%struct.usb_tt = type opaque
%struct.usb_bus = type { %struct.device*, i32, i8*, i8, i8, i8, i8, i32, i32, %struct.usb_devmap, %struct.usb_device*, %struct.usb_bus*, %struct.list_head, i32, i32, i32, i32, %struct.mon_bus*, i32 }
%struct.usb_devmap = type { [2 x i64] }
%struct.mon_bus = type opaque
%struct.usb_device_descriptor = type { i8, i8, i16, i8, i8, i8, i8, i16, i16, i16, i8, i8, i8, i8 }
%struct.usb_host_bos = type { %struct.usb_bos_descriptor*, %struct.usb_ext_cap_descriptor*, %struct.usb_ss_cap_descriptor*, %struct.usb_ss_container_id_descriptor* }
%struct.usb_bos_descriptor = type <{ i8, i8, i16, i8 }>
%struct.usb_ext_cap_descriptor = type <{ i8, i8, i8, i32 }>
%struct.usb_ss_cap_descriptor = type { i8, i8, i8, i8, i16, i8, i8, i16 }
%struct.usb_ss_container_id_descriptor = type { i8, i8, i8, i8, [16 x i8] }
%struct.usb_host_config = type { %struct.usb_config_descriptor, i8*, [16 x %struct.usb_interface_assoc_descriptor*], [32 x %struct.usb_interface*], [32 x %struct.usb_interface_cache*], i8*, i32 }
%struct.usb_config_descriptor = type <{ i8, i8, i16, i8, i8, i8, i8, i8 }>
%struct.usb_interface_cache = type { i32, %struct.kref, [0 x %struct.usb_host_interface] }
%struct.wusb_dev = type opaque
%struct.usb3_lpm_parameters = type { i32, i32, i32, i32 }
%struct.urb = type { %struct.kref, i8*, %struct.atomic_t, %struct.atomic_t, i32, %struct.list_head, %struct.list_head, %struct.usb_anchor*, %struct.usb_device*, %struct.usb_host_endpoint*, i32, i32, i32, i32, i8*, i64, %struct.scatterlist*, i32, i32, i32, i32, i8*, i64, i32, i32, i32, i32, i8*, void (%struct.urb*)*, [0 x %struct.usb_iso_packet_descriptor] }
%struct.usb_anchor = type { %struct.list_head, %struct.__wait_queue_head, %struct.spinlock, i8 }
%struct.usb_iso_packet_descriptor = type { i32, i32, i32, i32 }
%struct.input_dev = type opaque
%struct.uvc_streaming = type { %struct.list_head, %struct.uvc_device*, %struct.video_device*, %struct.uvc_video_chain*, %struct.atomic_t, %struct.usb_interface*, i32, i16, %struct.uvc_streaming_header, i32, i32, %struct.uvc_format*, %struct.uvc_streaming_control, %struct.uvc_format*, %struct.uvc_format*, %struct.uvc_frame*, %struct.mutex, i8, %struct.uvc_video_queue, void (%struct.urb*, %struct.uvc_streaming*, %struct.uvc_buffer*)*, %struct.anon.65, [5 x %struct.urb*], [5 x i8*], [5 x i64], i32, i32, i8, %struct.dentry*, %struct.anon.66, %struct.uvc_clock }
%struct.uvc_video_chain = type { %struct.uvc_device*, %struct.list_head, %struct.list_head, %struct.uvc_entity*, %struct.uvc_entity*, %struct.mutex, %struct.v4l2_prio_state, i32 }
%struct.uvc_streaming_header = type { i8, i8, i8, i8, i8*, i8, i8, i8, i8 }
%struct.uvc_streaming_control = type <{ i16, i8, i8, i32, i16, i16, i16, i16, i16, i32, i32, i32, i8, i8, i8, i8 }>
%struct.uvc_format = type { i8, i8, i8, i8, i32, i32, [32 x i8], i32, %struct.uvc_frame* }
%struct.uvc_frame = type { i8, i8, i16, i16, i32, i32, i32, i8, i32, i32* }
%struct.uvc_video_queue = type { %struct.vb2_queue, %struct.mutex, i32, i32, %struct.spinlock, %struct.list_head }
%struct.uvc_buffer = type { %struct.vb2_buffer, %struct.list_head, i32, i32, i8*, i32, i32, i32 }
%struct.anon.65 = type { [256 x i8], i32, i32, i32, i32 }
%struct.anon.66 = type { %struct.uvc_stats_frame, %struct.uvc_stats_stream }
%struct.uvc_stats_frame = type { i32, i32, i32, i32, i32, i32, i32, i32, i32, i8, i8, i32, i32, i32, i16, i32 }
%struct.uvc_stats_stream = type { %struct.timespec, %struct.timespec, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32 }
%struct.uvc_clock = type { %struct.uvc_clock_sample*, i32, i32, i32, i16, i16, %struct.spinlock }
%struct.uvc_clock_sample = type { i32, i16, %struct.timespec, i16 }
%struct.anon.59 = type { i16, i16, i16, i8, i8* }
%struct.anon.60 = type { i8, i8*, i8, i8* }
%struct.anon.62 = type { i16, i8, i8*, i8 }

@uvc_clock_param = global i32 1, align 4
@uvc_timeout_param = global i32 5000, align 4
@__param_str_clock = internal constant [17 x i8] c"uvc_driver.clock\00", align 16
@__param_ops_clock = internal global %struct.kernel_param_ops { i32 (i8*, %struct.kernel_param*)* @uvc_clock_param_set, i32 (i8*, %struct.kernel_param*)* @uvc_clock_param_get, void (i8*)* null }, align 8
@__param_clock = internal constant %struct.kernel_param { i8* getelementptr inbounds ([17 x i8], [17 x i8]* @__param_str_clock, i32 0, i32 0), %struct.kernel_param_ops* @__param_ops_clock, i16 420, i16 -1, %union.anon.3 { i8* bitcast (i32* @uvc_clock_param to i8*) } }, section "__param", align 8
@__param_str_nodrop = internal constant [18 x i8] c"uvc_driver.nodrop\00", align 16
@param_ops_uint = external global %struct.kernel_param_ops, align 8
@uvc_no_drop_param = common global i32 0, align 4
@__param_nodrop = internal constant %struct.kernel_param { i8* getelementptr inbounds ([18 x i8], [18 x i8]* @__param_str_nodrop, i32 0, i32 0), %struct.kernel_param_ops* @param_ops_uint, i16 420, i16 -1, %union.anon.3 { i8* bitcast (i32* @uvc_no_drop_param to i8*) } }, section "__param", align 8
@__param_str_quirks = internal constant [18 x i8] c"uvc_driver.quirks\00", align 16
@uvc_quirks_param = internal global i32 -1, align 4
@__param_quirks = internal constant %struct.kernel_param { i8* getelementptr inbounds ([18 x i8], [18 x i8]* @__param_str_quirks, i32 0, i32 0), %struct.kernel_param_ops* @param_ops_uint, i16 420, i16 -1, %union.anon.3 { i8* bitcast (i32* @uvc_quirks_param to i8*) } }, section "__param", align 8
@__param_str_trace = internal constant [17 x i8] c"uvc_driver.trace\00", align 16
@uvc_trace_param = common global i32 0, align 4
@__param_trace = internal constant %struct.kernel_param { i8* getelementptr inbounds ([17 x i8], [17 x i8]* @__param_str_trace, i32 0, i32 0), %struct.kernel_param_ops* @param_ops_uint, i16 420, i16 -1, %union.anon.3 { i8* bitcast (i32* @uvc_trace_param to i8*) } }, section "__param", align 8
@__param_str_timeout = internal constant [19 x i8] c"uvc_driver.timeout\00", align 16
@__param_timeout = internal constant %struct.kernel_param { i8* getelementptr inbounds ([19 x i8], [19 x i8]* @__param_str_timeout, i32 0, i32 0), %struct.kernel_param_ops* @param_ops_uint, i16 420, i16 -1, %union.anon.3 { i8* bitcast (i32* @uvc_timeout_param to i8*) } }, section "__param", align 8
@.str = private unnamed_addr constant [9 x i8] c"uvcvideo\00", align 1
@uvc_ids = internal global [43 x %struct.usb_device_id] [%struct.usb_device_id { i16 899, i16 1046, i16 -22246, i16 0, i16 0, i8 0, i8 0, i8 0, i8 14, i8 1, i8 0, i8 0, i64 2 }, %struct.usb_device_id { i16 899, i16 1112, i16 28782, i16 0, i16 0, i8 0, i8 0, i8 0, i8 14, i8 1, i8 0, i8 0, i64 2 }, %struct.usb_device_id { i16 899, i16 1118, i16 248, i16 0, i16 0, i8 0, i8 0, i8 0, i8 14, i8 1, i8 0, i8 0, i64 2 }, %struct.usb_device_id { i16 899, i16 1118, i16 1827, i16 0, i16 0, i8 0, i8 0, i8 0, i8 14, i8 1, i8 0, i8 0, i64 2 }, %struct.usb_device_id { i16 899, i16 1133, i16 2241, i16 0, i16 0, i8 0, i8 0, i8 0, i8 -1, i8 1, i8 0, i8 0, i64 0 }, %struct.usb_device_id { i16 899, i16 1133, i16 2242, i16 0, i16 0, i8 0, i8 0, i8 0, i8 -1, i8 1, i8 0, i8 0, i64 0 }, %struct.usb_device_id { i16 899, i16 1133, i16 2243, i16 0, i16 0, i8 0, i8 0, i8 0, i8 -1, i8 1, i8 0, i8 0, i64 0 }, %struct.usb_device_id { i16 899, i16 1133, i16 2245, i16 0, i16 0, i8 0, i8 0, i8 0, i8 -1, i8 1, i8 0, i8 0, i64 0 }, %struct.usb_device_id { i16 899, i16 1133, i16 2246, i16 0, i16 0, i8 0, i8 0, i8 0, i8 -1, i8 1, i8 0, i8 0, i64 0 }, %struct.usb_device_id { i16 899, i16 1133, i16 2247, i16 0, i16 0, i8 0, i8 0, i8 0, i8 -1, i8 1, i8 0, i8 0, i64 0 }, %struct.usb_device_id { i16 899, i16 1266, i16 -20367, i16 0, i16 0, i8 0, i8 0, i8 0, i8 14, i8 1, i8 0, i8 0, i64 512 }, %struct.usb_device_id { i16 899, i16 1423, i16 14368, i16 0, i16 0, i8 0, i8 0, i8 0, i8 14, i8 1, i8 0, i8 0, i64 2 }, %struct.usb_device_id { i16 899, i16 1449, i16 9792, i16 0, i16 0, i8 0, i8 0, i8 0, i8 14, i8 1, i8 0, i8 0, i64 256 }, %struct.usb_device_id { i16 899, i16 1452, i16 -31487, i16 0, i16 0, i8 0, i8 0, i8 0, i8 14, i8 1, i8 0, i8 0, i64 10 }, %struct.usb_device_id { i16 899, i16 1480, i16 1027, i16 0, i16 0, i8 0, i8 0, i8 0, i8 14, i8 1, i8 0, i8 0, i64 128 }, %struct.usb_device_id { i16 899, i16 1507, i16 1285, i16 0, i16 0, i8 0, i8 0, i8 0, i8 14, i8 1, i8 0, i8 0, i64 16 }, %struct.usb_device_id { i16 899, i16 1784, i16 12300, i16 0, i16 0, i8 0, i8 0, i8 0, i8 14, i8 1, i8 0, i8 0, i64 128 }, %struct.usb_device_id { i16 899, i16 2760, i16 13101, i16 0, i16 0, i8 0, i8 0, i8 0, i8 14, i8 1, i8 0, i8 0, i64 128 }, %struct.usb_device_id { i16 899, i16 2760, i16 13328, i16 0, i16 0, i8 0, i8 0, i8 0, i8 14, i8 1, i8 0, i8 0, i64 128 }, %struct.usb_device_id { i16 899, i16 2760, i16 13344, i16 0, i16 0, i8 0, i8 0, i8 0, i8 14, i8 1, i8 0, i8 0, i64 128 }, %struct.usb_device_id { i16 899, i16 3027, i16 1365, i16 0, i16 0, i8 0, i8 0, i8 0, i8 14, i8 1, i8 0, i8 0, i64 2 }, %struct.usb_device_id { i16 899, i16 3725, i16 4, i16 0, i16 0, i8 0, i8 0, i8 0, i8 14, i8 1, i8 0, i8 0, i64 258 }, %struct.usb_device_id { i16 899, i16 5075, i16 20739, i16 0, i16 0, i8 0, i8 0, i8 0, i8 14, i8 1, i8 0, i8 0, i64 16 }, %struct.usb_device_id { i16 899, i16 5421, i16 784, i16 0, i16 0, i8 0, i8 0, i8 0, i8 14, i8 1, i8 0, i8 0, i64 2 }, %struct.usb_device_id { i16 899, i16 5967, i16 21010, i16 0, i16 0, i8 0, i8 0, i8 0, i8 14, i8 1, i8 0, i8 0, i64 16 }, %struct.usb_device_id { i16 899, i16 5967, i16 22833, i16 0, i16 0, i8 0, i8 0, i8 0, i8 14, i8 1, i8 0, i8 0, i64 16 }, %struct.usb_device_id { i16 899, i16 5967, i16 -30190, i16 0, i16 0, i8 0, i8 0, i8 0, i8 14, i8 1, i8 0, i8 0, i64 16 }, %struct.usb_device_id { i16 899, i16 5967, i16 -30159, i16 0, i16 0, i8 0, i8 0, i8 0, i8 14, i8 1, i8 0, i8 0, i64 16 }, %struct.usb_device_id { i16 899, i16 5967, i16 -30157, i16 0, i16 0, i8 0, i8 0, i8 0, i8 14, i8 1, i8 0, i8 0, i64 16 }, %struct.usb_device_id { i16 899, i16 5967, i16 -30156, i16 0, i16 0, i8 0, i8 0, i8 0, i8 14, i8 1, i8 0, i8 0, i64 16 }, %struct.usb_device_id { i16 899, i16 6108, i16 514, i16 0, i16 0, i8 0, i8 0, i8 0, i8 14, i8 1, i8 0, i8 0, i64 16 }, %struct.usb_device_id { i16 899, i16 6127, i16 18443, i16 0, i16 0, i8 0, i8 0, i8 0, i8 14, i8 1, i8 0, i8 0, i64 16 }, %struct.usb_device_id { i16 899, i16 6257, i16 774, i16 0, i16 0, i8 0, i8 0, i8 0, i8 14, i8 1, i8 0, i8 0, i64 6 }, %struct.usb_device_id { i16 899, i16 6349, i16 -13570, i16 0, i16 0, i8 0, i8 0, i8 0, i8 14, i8 1, i8 0, i8 0, i64 4 }, %struct.usb_device_id { i16 899, i16 6380, i16 12680, i16 0, i16 0, i8 0, i8 0, i8 0, i8 14, i8 1, i8 0, i8 0, i64 2 }, %struct.usb_device_id { i16 899, i16 6380, i16 12936, i16 0, i16 0, i8 0, i8 0, i8 0, i8 14, i8 1, i8 0, i8 0, i64 2 }, %struct.usb_device_id { i16 899, i16 6380, i16 12944, i16 0, i16 0, i8 0, i8 0, i8 0, i8 14, i8 1, i8 0, i8 0, i64 256 }, %struct.usb_device_id { i16 899, i16 6558, i16 -32510, i16 0, i16 0, i8 0, i8 0, i8 0, i8 -1, i8 1, i8 0, i8 0, i64 0 }, %struct.usb_device_id { i16 907, i16 6571, i16 4096, i16 0, i16 294, i8 0, i8 0, i8 0, i8 14, i8 1, i8 0, i8 0, i64 1 }, %struct.usb_device_id { i16 899, i16 6971, i16 10577, i16 0, i16 0, i8 0, i8 0, i8 0, i8 14, i8 1, i8 0, i8 0, i64 2 }, %struct.usb_device_id { i16 899, i16 7247, i16 12288, i16 0, i16 0, i8 0, i8 0, i8 0, i8 14, i8 1, i8 0, i8 0, i64 34 }, %struct.usb_device_id { i16 896, i16 0, i16 0, i16 0, i16 0, i8 0, i8 0, i8 0, i8 14, i8 1, i8 0, i8 0, i64 0 }, %struct.usb_device_id zeroinitializer], align 16
@uvc_driver = global %struct.uvc_driver { %struct.usb_driver { i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str, i32 0, i32 0), i32 (%struct.usb_interface*, %struct.usb_device_id*)* @uvc_probe, void (%struct.usb_interface*)* @uvc_disconnect, i32 (%struct.usb_interface*, i32, i8*)* null, i32 (%struct.usb_interface*, i32)* @uvc_suspend, i32 (%struct.usb_interface*)* @uvc_resume, i32 (%struct.usb_interface*)* @uvc_reset_resume, i32 (%struct.usb_interface*)* null, i32 (%struct.usb_interface*)* null, %struct.usb_device_id* getelementptr inbounds ([43 x %struct.usb_device_id], [43 x %struct.usb_device_id]* @uvc_ids, i32 0, i32 0), %struct.usb_dynids zeroinitializer, %struct.usbdrv_wrap zeroinitializer, i8 2 } }, align 8
@__initcall_uvc_init6 = internal global i32 ()* @uvc_init, section ".initcall6.init", align 8
@__exitcall_uvc_cleanup = internal global void ()* @uvc_cleanup, section ".exitcall.exit", align 8
@___modver_attr = internal global %struct.module_version_attribute { %struct.module_attribute { %struct.attribute { i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.110, i32 0, i32 0), i16 292 }, i64 (%struct.module_attribute*, %struct.module_kobject*, i8*)* @__modver_version_show, i64 (%struct.module_attribute*, %struct.module_kobject*, i8*, i64)* null, void (%struct.module*, i8*)* null, i32 (%struct.module*)* null, void (%struct.module*)* null }, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.108, i32 0, i32 0), i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.111, i32 0, i32 0) }, align 8
@__modver_attr = internal constant %struct.module_version_attribute* @___modver_attr, section "__modver", align 8
@smp_ops = external global %struct.smp_ops, align 8
@.str.1 = private unnamed_addr constant [7 x i8] c"clock_\00", align 1
@.str.2 = private unnamed_addr constant [10 x i8] c"monotonic\00", align 1
@.str.3 = private unnamed_addr constant [9 x i8] c"realtime\00", align 1
@.str.4 = private unnamed_addr constant [16 x i8] c"CLOCK_MONOTONIC\00", align 1
@.str.5 = private unnamed_addr constant [15 x i8] c"CLOCK_REALTIME\00", align 1
@.str.6 = private unnamed_addr constant [53 x i8] c"\017uvcvideo: Probing known UVC device %s (%04x:%04x)\0A\00", align 1
@.str.7 = private unnamed_addr constant [43 x i8] c"\017uvcvideo: Probing generic UVC device %s\0A\00", align 1
@.str.8 = private unnamed_addr constant [23 x i8] c"UVC Camera (%04x:%04x)\00", align 1
@.str.9 = private unnamed_addr constant [46 x i8] c"\017uvcvideo: Unable to parse UVC descriptors.\0A\00", align 1
@.str.10 = private unnamed_addr constant [53 x i8] c"\016uvcvideo: Found UVC %u.%02x device %s (%04x:%04x)\0A\00", align 1
@.str.11 = private unnamed_addr constant [10 x i8] c"<unnamed>\00", align 1
@.str.12 = private unnamed_addr constant [84 x i8] c"\016uvcvideo: Forcing device quirks to 0x%x by module parameter for testing purpose.\0A\00", align 1
@.str.13 = private unnamed_addr constant [80 x i8] c"\016uvcvideo: Please report required quirks to the linux-uvc-devel mailing list.\0A\00", align 1
@.str.14 = private unnamed_addr constant [100 x i8] c"\016uvcvideo: Unable to initialize the status endpoint (%d), status interrupt will not be supported.\0A\00", align 1
@.str.15 = private unnamed_addr constant [37 x i8] c"\017uvcvideo: UVC device initialized.\0A\00", align 1
@.str.16 = private unnamed_addr constant [50 x i8] c"\017uvcvideo: Found a Status endpoint (addr %02x).\0A\00", align 1
@.str.17 = private unnamed_addr constant [70 x i8] c"\017uvcvideo: device %d videocontrol interface %d EXTENSION_UNIT error\0A\00", align 1
@.str.18 = private unnamed_addr constant [13 x i8] c"Extension %u\00", align 1
@.str.19 = private unnamed_addr constant [62 x i8] c"\017uvcvideo: device %d videocontrol interface %d HEADER error\0A\00", align 1
@.str.20 = private unnamed_addr constant [51 x i8] c"\017uvcvideo: device %d interface %d doesn't exists\0A\00", align 1
@.str.21 = private unnamed_addr constant [70 x i8] c"\017uvcvideo: device %d videocontrol interface %d INPUT_TERMINAL error\0A\00", align 1
@.str.22 = private unnamed_addr constant [101 x i8] c"\017uvcvideo: device %d videocontrol interface %d INPUT_TERMINAL %d has invalid type 0x%04x, skipping\0A\00", align 1
@.str.23 = private unnamed_addr constant [10 x i8] c"Camera %u\00", align 1
@.str.24 = private unnamed_addr constant [9 x i8] c"Media %u\00", align 1
@.str.25 = private unnamed_addr constant [9 x i8] c"Input %u\00", align 1
@.str.26 = private unnamed_addr constant [71 x i8] c"\017uvcvideo: device %d videocontrol interface %d OUTPUT_TERMINAL error\0A\00", align 1
@.str.27 = private unnamed_addr constant [102 x i8] c"\017uvcvideo: device %d videocontrol interface %d OUTPUT_TERMINAL %d has invalid type 0x%04x, skipping\0A\00", align 1
@.str.28 = private unnamed_addr constant [10 x i8] c"Output %u\00", align 1
@.str.29 = private unnamed_addr constant [69 x i8] c"\017uvcvideo: device %d videocontrol interface %d SELECTOR_UNIT error\0A\00", align 1
@.str.30 = private unnamed_addr constant [12 x i8] c"Selector %u\00", align 1
@.str.31 = private unnamed_addr constant [71 x i8] c"\017uvcvideo: device %d videocontrol interface %d PROCESSING_UNIT error\0A\00", align 1
@.str.32 = private unnamed_addr constant [14 x i8] c"Processing %u\00", align 1
@.str.33 = private unnamed_addr constant [59 x i8] c"\017uvcvideo: Found an unknown CS_INTERFACE descriptor (%u)\0A\00", align 1
@.str.34 = private unnamed_addr constant [70 x i8] c"\017uvcvideo: device %d interface %d isn't a video streaming interface\0A\00", align 1
@.str.35 = private unnamed_addr constant [55 x i8] c"\017uvcvideo: device %d interface %d is already claimed\0A\00", align 1
@uvc_parse_streaming.__key = internal global %struct.lock_class_key zeroinitializer, align 1
@.str.36 = private unnamed_addr constant [18 x i8] c"&streaming->mutex\00", align 1
@.str.37 = private unnamed_addr constant [49 x i8] c"\017uvcvideo: trying extra data from endpoint %u.\0A\00", align 1
@.str.38 = private unnamed_addr constant [70 x i8] c"\017uvcvideo: no class-specific streaming interface descriptors found.\0A\00", align 1
@.str.39 = private unnamed_addr constant [80 x i8] c"\017uvcvideo: device %d videostreaming interface %d HEADER descriptor not found.\0A\00", align 1
@.str.40 = private unnamed_addr constant [81 x i8] c"\017uvcvideo: device %d videostreaming interface %d HEADER descriptor is invalid.\0A\00", align 1
@.str.41 = private unnamed_addr constant [79 x i8] c"\017uvcvideo: device %d videostreaming interface %d FORMAT %u is not supported.\0A\00", align 1
@.str.42 = private unnamed_addr constant [85 x i8] c"\017uvcvideo: device %d videostreaming interface %d has no supported formats defined.\0A\00", align 1
@.str.43 = private unnamed_addr constant [96 x i8] c"\017uvcvideo: device %d videostreaming interface %d has %u bytes of trailing descriptor garbage.\0A\00", align 1
@.str.44 = private unnamed_addr constant [64 x i8] c"\017uvcvideo: device %d videostreaming interface %d FORMAT error\0A\00", align 1
@.str.45 = private unnamed_addr constant [39 x i8] c"\016uvcvideo: Unknown video format %pUl\0A\00", align 1
@.str.46 = private unnamed_addr constant [6 x i8] c"%pUl\0A\00", align 1
@.str.47 = private unnamed_addr constant [6 x i8] c"MJPEG\00", align 1
@.str.48 = private unnamed_addr constant [6 x i8] c"SD-DV\00", align 1
@.str.49 = private unnamed_addr constant [7 x i8] c"SDL-DV\00", align 1
@.str.50 = private unnamed_addr constant [6 x i8] c"HD-DV\00", align 1
@.str.51 = private unnamed_addr constant [73 x i8] c"\017uvcvideo: device %d videostreaming interface %d: unknown DV format %u\0A\00", align 1
@.str.52 = private unnamed_addr constant [6 x i8] c" 60Hz\00", align 1
@.str.53 = private unnamed_addr constant [6 x i8] c" 50Hz\00", align 1
@.str.54 = private unnamed_addr constant [73 x i8] c"\017uvcvideo: device %d videostreaming interface %d unsupported format %u\0A\00", align 1
@.str.55 = private unnamed_addr constant [30 x i8] c"\017uvcvideo: Found format %s.\0A\00", align 1
@.str.56 = private unnamed_addr constant [63 x i8] c"\017uvcvideo: device %d videostreaming interface %d FRAME error\0A\00", align 1
@.str.57 = private unnamed_addr constant [33 x i8] c"\017uvcvideo: - %ux%u (%u.%u fps)\0A\00", align 1
@.str.58 = private unnamed_addr constant [69 x i8] c"\017uvcvideo: device %d videostreaming interface %d COLORFORMAT error\0A\00", align 1
@uvc_fmts = internal global [16 x %struct.uvc_format_desc] [%struct.uvc_format_desc { i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.59, i32 0, i32 0), [16 x i8] c"YUY2\00\00\10\00\80\00\00\AA\008\9Bq", i32 1448695129 }, %struct.uvc_format_desc { i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.59, i32 0, i32 0), [16 x i8] c"YUY2\00\00\10\00\80\00\00\00\008\9Bq", i32 1448695129 }, %struct.uvc_format_desc { i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.60, i32 0, i32 0), [16 x i8] c"NV12\00\00\10\00\80\00\00\AA\008\9Bq", i32 842094158 }, %struct.uvc_format_desc { i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.47, i32 0, i32 0), [16 x i8] c"MJPG\00\00\10\00\80\00\00\AA\008\9Bq", i32 1196444237 }, %struct.uvc_format_desc { i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.61, i32 0, i32 0), [16 x i8] c"YV12\00\00\10\00\80\00\00\AA\008\9Bq", i32 842094169 }, %struct.uvc_format_desc { i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.62, i32 0, i32 0), [16 x i8] c"I420\00\00\10\00\80\00\00\AA\008\9Bq", i32 842093913 }, %struct.uvc_format_desc { i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.63, i32 0, i32 0), [16 x i8] c"M420\00\00\10\00\80\00\00\AA\008\9Bq", i32 808596557 }, %struct.uvc_format_desc { i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.64, i32 0, i32 0), [16 x i8] c"UYVY\00\00\10\00\80\00\00\AA\008\9Bq", i32 1498831189 }, %struct.uvc_format_desc { i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.65, i32 0, i32 0), [16 x i8] c"Y800\00\00\10\00\80\00\00\AA\008\9Bq", i32 1497715271 }, %struct.uvc_format_desc { i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.66, i32 0, i32 0), [16 x i8] c"Y8  \00\00\10\00\80\00\00\AA\008\9Bq", i32 1497715271 }, %struct.uvc_format_desc { i8* getelementptr inbounds ([24 x i8], [24 x i8]* @.str.67, i32 0, i32 0), [16 x i8] c"Y10 \00\00\10\00\80\00\00\AA\008\9Bq", i32 540029273 }, %struct.uvc_format_desc { i8* getelementptr inbounds ([24 x i8], [24 x i8]* @.str.68, i32 0, i32 0), [16 x i8] c"Y12 \00\00\10\00\80\00\00\AA\008\9Bq", i32 540160345 }, %struct.uvc_format_desc { i8* getelementptr inbounds ([24 x i8], [24 x i8]* @.str.69, i32 0, i32 0), [16 x i8] c"Y16 \00\00\10\00\80\00\00\AA\008\9Bq", i32 540422489 }, %struct.uvc_format_desc { i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.70, i32 0, i32 0), [16 x i8] c"BY8 \00\00\10\00\80\00\00\AA\008\9Bq", i32 825770306 }, %struct.uvc_format_desc { i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.71, i32 0, i32 0), [16 x i8] c"RGBP\00\00\10\00\80\00\00\AA\008\9Bq", i32 1346520914 }, %struct.uvc_format_desc { i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.72, i32 0, i32 0), [16 x i8] c"H264\00\00\10\00\80\00\00\AA\008\9Bq", i32 875967048 }], align 16
@.str.59 = private unnamed_addr constant [17 x i8] c"YUV 4:2:2 (YUYV)\00", align 1
@.str.60 = private unnamed_addr constant [17 x i8] c"YUV 4:2:0 (NV12)\00", align 1
@.str.61 = private unnamed_addr constant [17 x i8] c"YVU 4:2:0 (YV12)\00", align 1
@.str.62 = private unnamed_addr constant [17 x i8] c"YUV 4:2:0 (I420)\00", align 1
@.str.63 = private unnamed_addr constant [17 x i8] c"YUV 4:2:0 (M420)\00", align 1
@.str.64 = private unnamed_addr constant [17 x i8] c"YUV 4:2:2 (UYVY)\00", align 1
@.str.65 = private unnamed_addr constant [23 x i8] c"Greyscale 8-bit (Y800)\00", align 1
@.str.66 = private unnamed_addr constant [23 x i8] c"Greyscale 8-bit (Y8  )\00", align 1
@.str.67 = private unnamed_addr constant [24 x i8] c"Greyscale 10-bit (Y10 )\00", align 1
@.str.68 = private unnamed_addr constant [24 x i8] c"Greyscale 12-bit (Y12 )\00", align 1
@.str.69 = private unnamed_addr constant [24 x i8] c"Greyscale 16-bit (Y16 )\00", align 1
@.str.70 = private unnamed_addr constant [10 x i8] c"RGB Bayer\00", align 1
@.str.71 = private unnamed_addr constant [7 x i8] c"RGB565\00", align 1
@.str.72 = private unnamed_addr constant [6 x i8] c"H.264\00", align 1
@uvc_colorspace.colorprimaries = internal constant [6 x i8] c"\00\08\05\06\01\02", align 1
@uvc_scan_device.__key = internal global %struct.lock_class_key zeroinitializer, align 1
@.str.73 = private unnamed_addr constant [19 x i8] c"&chain->ctrl_mutex\00", align 1
@.str.74 = private unnamed_addr constant [45 x i8] c"\017uvcvideo: Found a valid video chain (%s).\0A\00", align 1
@.str.75 = private unnamed_addr constant [41 x i8] c"\016uvcvideo: No valid video chain found.\0A\00", align 1
@.str.76 = private unnamed_addr constant [32 x i8] c"\017uvcvideo: Scanning UVC chain:\00", align 1
@.str.77 = private unnamed_addr constant [60 x i8] c"\017uvcvideo: Found reference to entity %d already in chain.\0A\00", align 1
@.str.78 = private unnamed_addr constant [10 x i8] c" <- XU %d\00", align 1
@.str.79 = private unnamed_addr constant [58 x i8] c"\017uvcvideo: Extension unit %d has more than 1 input pin.\0A\00", align 1
@.str.80 = private unnamed_addr constant [10 x i8] c" <- PU %d\00", align 1
@.str.81 = private unnamed_addr constant [55 x i8] c"\017uvcvideo: Found multiple Processing Units in chain.\0A\00", align 1
@.str.82 = private unnamed_addr constant [10 x i8] c" <- SU %d\00", align 1
@.str.83 = private unnamed_addr constant [53 x i8] c"\017uvcvideo: Found multiple Selector Units in chain.\0A\00", align 1
@.str.84 = private unnamed_addr constant [11 x i8] c" <- IT %d\0A\00", align 1
@.str.85 = private unnamed_addr constant [7 x i8] c" OT %d\00", align 1
@.str.86 = private unnamed_addr constant [60 x i8] c"\017uvcvideo: Unsupported entity type 0x%04x found in chain.\0A\00", align 1
@.str.87 = private unnamed_addr constant [5 x i8] c" (->\00", align 1
@.str.88 = private unnamed_addr constant [7 x i8] c" XU %d\00", align 1
@.str.89 = private unnamed_addr constant [44 x i8] c"\017uvcvideo: Unsupported input terminal %u.\0A\00", align 1
@.str.90 = private unnamed_addr constant [2 x i8] c")\00", align 1
@.str.91 = private unnamed_addr constant [7 x i8] c" <- IT\00", align 1
@.str.92 = private unnamed_addr constant [76 x i8] c"\017uvcvideo: Selector unit %d input %d isn't connected to an input terminal\0A\00", align 1
@.str.93 = private unnamed_addr constant [4 x i8] c" %d\00", align 1
@.str.94 = private unnamed_addr constant [2 x i8] c"\0A\00", align 1
@.str.95 = private unnamed_addr constant [51 x i8] c"\017uvcvideo: Found reference to unknown entity %d.\0A\00", align 1
@uvc_print_chain.buffer = internal global [43 x i8] zeroinitializer, align 16
@.str.96 = private unnamed_addr constant [5 x i8] c" -> \00", align 1
@.str.97 = private unnamed_addr constant [2 x i8] c",\00", align 1
@.str.98 = private unnamed_addr constant [4 x i8] c"...\00", align 1
@.str.99 = private unnamed_addr constant [3 x i8] c"%u\00", align 1
@.str.100 = private unnamed_addr constant [58 x i8] c"\016uvcvideo: No streaming interface found for terminal %u.\00", align 1
@.str.101 = private unnamed_addr constant [51 x i8] c"\013uvcvideo: Failed to initialize the device (%d).\0A\00", align 1
@.str.102 = private unnamed_addr constant [51 x i8] c"\013uvcvideo: Failed to allocate video device (%d).\0A\00", align 1
@uvc_fops = external constant %struct.v4l2_file_operations, align 8
@.str.103 = private unnamed_addr constant [51 x i8] c"\013uvcvideo: Failed to register video device (%d).\0A\00", align 1
@.str.104 = private unnamed_addr constant [37 x i8] c"\017uvcvideo: Suspending interface %u\0A\00", align 1
@.str.105 = private unnamed_addr constant [62 x i8] c"\017uvcvideo: Suspend: video streaming USB interface mismatch.\0A\00", align 1
@.str.106 = private unnamed_addr constant [35 x i8] c"\017uvcvideo: Resuming interface %u\0A\00", align 1
@.str.107 = private unnamed_addr constant [61 x i8] c"\017uvcvideo: Resume: video streaming USB interface mismatch.\0A\00", align 1
@.str.108 = private unnamed_addr constant [11 x i8] c"uvc_driver\00", align 1
@.str.109 = private unnamed_addr constant [34 x i8] c"\016USB Video Class driver (1.1.1)\0A\00", align 1
@.str.110 = private unnamed_addr constant [8 x i8] c"version\00", align 1
@.str.111 = private unnamed_addr constant [6 x i8] c"1.1.1\00", align 1
@llvm.used = appending global [9 x i8*] [i8* bitcast (%struct.kernel_param* @__param_clock to i8*), i8* bitcast (%struct.kernel_param* @__param_nodrop to i8*), i8* bitcast (%struct.kernel_param* @__param_quirks to i8*), i8* bitcast (%struct.kernel_param* @__param_trace to i8*), i8* bitcast (%struct.kernel_param* @__param_timeout to i8*), i8* bitcast (void ()* @uvc_cleanup to i8*), i8* bitcast (i32 ()** @__initcall_uvc_init6 to i8*), i8* bitcast (void ()** @__exitcall_uvc_cleanup to i8*), i8* bitcast (%struct.module_version_attribute** @__modver_attr to i8*)], section "llvm.metadata"

; Function Attrs: inlinehint nounwind uwtable
define internal void @smp_send_stop() #0 {
entry:
  %0 = load void (i32)*, void (i32)** getelementptr inbounds (%struct.smp_ops, %struct.smp_ops* @smp_ops, i32 0, i32 3), align 8, !tbaa !2
  call void %0(i32 0)
  ret void
}

; Function Attrs: inlinehint nounwind uwtable
define internal void @smp_send_reschedule(i32 %cpu) #0 {
entry:
  %0 = load void (i32)*, void (i32)** getelementptr inbounds (%struct.smp_ops, %struct.smp_ops* @smp_ops, i32 0, i32 4), align 8, !tbaa !7
  call void %0(i32 %cpu)
  ret void
}

; Function Attrs: inlinehint nounwind uwtable
define internal void @smp_prepare_cpus(i32 %max_cpus) #0 {
entry:
  %0 = load void (i32)*, void (i32)** getelementptr inbounds (%struct.smp_ops, %struct.smp_ops* @smp_ops, i32 0, i32 1), align 8, !tbaa !8
  call void %0(i32 %max_cpus)
  ret void
}

; Function Attrs: inlinehint nounwind uwtable
define internal i32 @__cpu_up(i32 %cpu, %struct.task_struct* %tidle) #0 {
entry:
  %0 = load i32 (i32, %struct.task_struct*)*, i32 (i32, %struct.task_struct*)** getelementptr inbounds (%struct.smp_ops, %struct.smp_ops* @smp_ops, i32 0, i32 5), align 8, !tbaa !9
  %call = call i32 %0(i32 %cpu, %struct.task_struct* %tidle)
  ret i32 %call
}

; Function Attrs: inlinehint nounwind uwtable
define internal void @smp_cpus_done(i32 %max_cpus) #0 {
entry:
  %0 = load void (i32)*, void (i32)** getelementptr inbounds (%struct.smp_ops, %struct.smp_ops* @smp_ops, i32 0, i32 2), align 8, !tbaa !10
  call void %0(i32 %max_cpus)
  ret void
}

; Function Attrs: inlinehint nounwind uwtable
define internal void @smp_prepare_boot_cpu() #0 {
entry:
  %0 = load void ()*, void ()** getelementptr inbounds (%struct.smp_ops, %struct.smp_ops* @smp_ops, i32 0, i32 0), align 8, !tbaa !11
  call void %0()
  ret void
}

; Function Attrs: nounwind uwtable
define %struct.usb_host_endpoint* @uvc_find_endpoint(%struct.usb_host_interface* %alts, i8 zeroext %epaddr) #1 {
entry:
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %i.0 = phi i32 [ 0, %entry ], [ %inc, %for.inc ]
  %desc = getelementptr inbounds %struct.usb_host_interface, %struct.usb_host_interface* %alts, i32 0, i32 0
  %bNumEndpoints = getelementptr inbounds %struct.usb_interface_descriptor, %struct.usb_interface_descriptor* %desc, i32 0, i32 4
  %0 = load i8, i8* %bNumEndpoints, align 4, !tbaa !12
  %conv = zext i8 %0 to i32
  %cmp = icmp ult i32 %i.0, %conv
  br i1 %cmp, label %for.body, label %cleanup

for.body:                                         ; preds = %for.cond
  %endpoint = getelementptr inbounds %struct.usb_host_interface, %struct.usb_host_interface* %alts, i32 0, i32 3
  %1 = load %struct.usb_host_endpoint*, %struct.usb_host_endpoint** %endpoint, align 8, !tbaa !16
  %idxprom = zext i32 %i.0 to i64
  %arrayidx = getelementptr inbounds %struct.usb_host_endpoint, %struct.usb_host_endpoint* %1, i64 %idxprom
  %desc2 = getelementptr inbounds %struct.usb_host_endpoint, %struct.usb_host_endpoint* %arrayidx, i32 0, i32 0
  %bEndpointAddress = getelementptr inbounds %struct.usb_endpoint_descriptor, %struct.usb_endpoint_descriptor* %desc2, i32 0, i32 2
  %2 = load i8, i8* %bEndpointAddress, align 2, !tbaa !17
  %conv3 = zext i8 %2 to i32
  %conv4 = zext i8 %epaddr to i32
  %cmp5 = icmp eq i32 %conv3, %conv4
  br i1 %cmp5, label %cleanup, label %for.inc

for.inc:                                          ; preds = %for.body
  %inc = add i32 %i.0, 1
  br label %for.cond

cleanup:                                          ; preds = %for.cond, %for.body
  %retval.0 = phi %struct.usb_host_endpoint* [ %arrayidx, %for.body ], [ null, %for.cond ]
  ret %struct.usb_host_endpoint* %retval.0
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64, i8* nocapture) #2

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64, i8* nocapture) #2

; Function Attrs: nounwind uwtable
define void @uvc_simplify_fraction(i32* %numerator, i32* %denominator, i32 %n_terms, i32 %threshold) #1 {
entry:
  %conv = zext i32 %n_terms to i64
  %mul = mul i64 %conv, 4
  %call = call i8* @kmalloc(i64 %mul, i32 208)
  %0 = bitcast i8* %call to i32*
  %cmp = icmp eq i32* %0, null
  br i1 %cmp, label %cleanup.cont, label %if.end

if.end:                                           ; preds = %entry
  %1 = load i32, i32* %numerator, align 4, !tbaa !23
  %2 = load i32, i32* %denominator, align 4, !tbaa !23
  br label %for.cond

for.cond:                                         ; preds = %if.end15, %if.end
  %x.0 = phi i32 [ %1, %if.end ], [ %y.0, %if.end15 ]
  %y.0 = phi i32 [ %2, %if.end ], [ %sub, %if.end15 ]
  %n.0 = phi i32 [ 0, %if.end ], [ %inc19, %if.end15 ]
  %cmp2 = icmp ult i32 %n.0, %n_terms
  %cmp4 = icmp ne i32 %y.0, 0
  %cmp4. = select i1 %cmp2, i1 %cmp4, i1 false
  br i1 %cmp4., label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %div = udiv i32 %x.0, %y.0
  %idxprom = zext i32 %n.0 to i64
  %arrayidx = getelementptr inbounds i32, i32* %0, i64 %idxprom
  store i32 %div, i32* %arrayidx, align 4, !tbaa !23
  %idxprom6 = zext i32 %n.0 to i64
  %arrayidx7 = getelementptr inbounds i32, i32* %0, i64 %idxprom6
  %3 = load i32, i32* %arrayidx7, align 4, !tbaa !23
  %cmp8 = icmp uge i32 %3, %threshold
  br i1 %cmp8, label %if.then10, label %if.end15

if.then10:                                        ; preds = %for.body
  %cmp11 = icmp ult i32 %n.0, 2
  %inc = add i32 %n.0, 1
  %inc.n.0 = select i1 %cmp11, i32 %inc, i32 %n.0
  br label %for.end

if.end15:                                         ; preds = %for.body
  %idxprom16 = zext i32 %n.0 to i64
  %arrayidx17 = getelementptr inbounds i32, i32* %0, i64 %idxprom16
  %4 = load i32, i32* %arrayidx17, align 4, !tbaa !23
  %mul18 = mul i32 %4, %y.0
  %sub = sub i32 %x.0, %mul18
  %inc19 = add i32 %n.0, 1
  br label %for.cond

for.end:                                          ; preds = %for.cond, %if.then10
  %n.2 = phi i32 [ %inc.n.0, %if.then10 ], [ %n.0, %for.cond ]
  br label %for.cond20

for.cond20:                                       ; preds = %for.body23, %for.end
  %x.1 = phi i32 [ 0, %for.end ], [ %y.1, %for.body23 ]
  %y.1 = phi i32 [ 1, %for.end ], [ %add, %for.body23 ]
  %i.0 = phi i32 [ %n.2, %for.end ], [ %dec, %for.body23 ]
  %cmp21 = icmp ugt i32 %i.0, 0
  br i1 %cmp21, label %for.body23, label %for.end29

for.body23:                                       ; preds = %for.cond20
  %sub24 = sub i32 %i.0, 1
  %idxprom25 = zext i32 %sub24 to i64
  %arrayidx26 = getelementptr inbounds i32, i32* %0, i64 %idxprom25
  %5 = load i32, i32* %arrayidx26, align 4, !tbaa !23
  %mul27 = mul i32 %5, %y.1
  %add = add i32 %mul27, %x.1
  %dec = add i32 %i.0, -1
  br label %for.cond20

for.end29:                                        ; preds = %for.cond20
  store i32 %y.1, i32* %numerator, align 4, !tbaa !23
  store i32 %x.1, i32* %denominator, align 4, !tbaa !23
  %6 = bitcast i32* %0 to i8*
  call void @kfree(i8* %6)
  br label %cleanup.cont

cleanup.cont:                                     ; preds = %for.end29, %entry
  ret void
}

; Function Attrs: alwaysinline nounwind uwtable
define internal i8* @kmalloc(i64 %size, i32 %flags) #3 {
entry:
  %call = call i8* @__kmalloc(i64 %size, i32 %flags)
  ret i8* %call
}

declare void @kfree(i8*) #4

; Function Attrs: nounwind uwtable
define i32 @uvc_fraction_to_interval(i32 %numerator, i32 %denominator) #1 {
entry:
  %cmp = icmp eq i32 %denominator, 0
  br i1 %cmp, label %cleanup, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %entry
  %div = udiv i32 %numerator, %denominator
  %cmp1 = icmp uge i32 %div, 429
  br i1 %cmp1, label %cleanup, label %if.end

if.end:                                           ; preds = %lor.lhs.false
  br label %while.cond

while.cond:                                       ; preds = %while.body, %if.end
  %multiplier.0 = phi i32 [ 10000000, %if.end ], [ %div4, %while.body ]
  %denominator.addr.0 = phi i32 [ %denominator, %if.end ], [ %div5, %while.body ]
  %div2 = udiv i32 -1, %multiplier.0
  %cmp3 = icmp ugt i32 %numerator, %div2
  br i1 %cmp3, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %div4 = udiv i32 %multiplier.0, 2
  %div5 = udiv i32 %denominator.addr.0, 2
  br label %while.cond

while.end:                                        ; preds = %while.cond
  %tobool = icmp ne i32 %denominator.addr.0, 0
  br i1 %tobool, label %cond.true, label %cleanup

cond.true:                                        ; preds = %while.end
  %mul = mul i32 %numerator, %multiplier.0
  %div6 = udiv i32 %mul, %denominator.addr.0
  br label %cleanup

cleanup:                                          ; preds = %cond.true, %while.end, %entry, %lor.lhs.false
  %retval.0 = phi i32 [ -1, %lor.lhs.false ], [ -1, %entry ], [ %div6, %cond.true ], [ 0, %while.end ]
  ret i32 %retval.0
}

; Function Attrs: nounwind uwtable
define %struct.uvc_entity* @uvc_entity_by_id(%struct.uvc_device* %dev, i32 %id) #1 {
entry:
  %entities = getelementptr inbounds %struct.uvc_device, %struct.uvc_device* %dev, i32 0, i32 12
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %list6.sink = phi %struct.list_head* [ %list6, %for.inc ], [ %entities, %entry ]
  %next7 = getelementptr inbounds %struct.list_head, %struct.list_head* %list6.sink, i32 0, i32 0
  %0 = load %struct.list_head*, %struct.list_head** %next7, align 8, !tbaa !24
  %1 = bitcast %struct.list_head* %0 to i8*
  %add.ptr9 = getelementptr inbounds i8, i8* %1, i64 0
  %2 = bitcast i8* %add.ptr9 to %struct.uvc_entity*
  %list = getelementptr inbounds %struct.uvc_entity, %struct.uvc_entity* %2, i32 0, i32 0
  %entities1 = getelementptr inbounds %struct.uvc_device, %struct.uvc_device* %dev, i32 0, i32 12
  %cmp = icmp ne %struct.list_head* %list, %entities1
  br i1 %cmp, label %for.body, label %cleanup

for.body:                                         ; preds = %for.cond
  %id2 = getelementptr inbounds %struct.uvc_entity, %struct.uvc_entity* %2, i32 0, i32 3
  %3 = load i8, i8* %id2, align 4, !tbaa !25
  %conv = zext i8 %3 to i32
  %cmp3 = icmp eq i32 %conv, %id
  br i1 %cmp3, label %cleanup, label %for.inc

for.inc:                                          ; preds = %for.body
  %list6 = getelementptr inbounds %struct.uvc_entity, %struct.uvc_entity* %2, i32 0, i32 0
  br label %for.cond

cleanup:                                          ; preds = %for.cond, %for.body
  %retval.0 = phi %struct.uvc_entity* [ %2, %for.body ], [ null, %for.cond ]
  ret %struct.uvc_entity* %retval.0
}

; Function Attrs: nounwind uwtable
define internal i32 @uvc_probe(%struct.usb_interface* %intf, %struct.usb_device_id* %id) #1 {
entry:
  %call = call %struct.usb_device* @interface_to_usbdev(%struct.usb_interface* %intf)
  %idVendor = getelementptr inbounds %struct.usb_device_id, %struct.usb_device_id* %id, i32 0, i32 1
  %0 = load i16, i16* %idVendor, align 2, !tbaa !28
  %conv = zext i16 %0 to i32
  %tobool = icmp ne i32 %conv, 0
  br i1 %tobool, label %land.lhs.true, label %do.body10

land.lhs.true:                                    ; preds = %entry
  %idProduct = getelementptr inbounds %struct.usb_device_id, %struct.usb_device_id* %id, i32 0, i32 2
  %1 = load i16, i16* %idProduct, align 4, !tbaa !31
  %conv1 = zext i16 %1 to i32
  %tobool2 = icmp ne i32 %conv1, 0
  br i1 %tobool2, label %do.body, label %do.body10

do.body:                                          ; preds = %land.lhs.true
  %2 = load i32, i32* @uvc_trace_param, align 4, !tbaa !23
  %and = and i32 %2, 1
  %tobool3 = icmp ne i32 %and, 0
  br i1 %tobool3, label %if.then4, label %if.end20

if.then4:                                         ; preds = %do.body
  %devpath = getelementptr inbounds %struct.usb_device, %struct.usb_device* %call, i32 0, i32 1
  %arraydecay = getelementptr inbounds [16 x i8], [16 x i8]* %devpath, i32 0, i32 0
  %idVendor5 = getelementptr inbounds %struct.usb_device_id, %struct.usb_device_id* %id, i32 0, i32 1
  %3 = load i16, i16* %idVendor5, align 2, !tbaa !28
  %conv6 = zext i16 %3 to i32
  %idProduct7 = getelementptr inbounds %struct.usb_device_id, %struct.usb_device_id* %id, i32 0, i32 2
  %4 = load i16, i16* %idProduct7, align 4, !tbaa !31
  %conv8 = zext i16 %4 to i32
  %call9 = call i32 (i8*, ...) @printk(i8* getelementptr inbounds ([53 x i8], [53 x i8]* @.str.6, i32 0, i32 0), i8* %arraydecay, i32 %conv6, i32 %conv8)
  br label %if.end20

do.body10:                                        ; preds = %entry, %land.lhs.true
  %5 = load i32, i32* @uvc_trace_param, align 4, !tbaa !23
  %and11 = and i32 %5, 1
  %tobool12 = icmp ne i32 %and11, 0
  br i1 %tobool12, label %if.then13, label %if.end20

if.then13:                                        ; preds = %do.body10
  %devpath14 = getelementptr inbounds %struct.usb_device, %struct.usb_device* %call, i32 0, i32 1
  %arraydecay15 = getelementptr inbounds [16 x i8], [16 x i8]* %devpath14, i32 0, i32 0
  %call16 = call i32 (i8*, ...) @printk(i8* getelementptr inbounds ([43 x i8], [43 x i8]* @.str.7, i32 0, i32 0), i8* %arraydecay15)
  br label %if.end20

if.end20:                                         ; preds = %do.body10, %if.then13, %do.body, %if.then4
  %call21 = call i8* @kzalloc(i64 392, i32 208)
  %6 = bitcast i8* %call21 to %struct.uvc_device*
  %cmp = icmp eq %struct.uvc_device* %6, null
  br i1 %cmp, label %cleanup, label %if.end24

if.end24:                                         ; preds = %if.end20
  %entities = getelementptr inbounds %struct.uvc_device, %struct.uvc_device* %6, i32 0, i32 12
  call void @INIT_LIST_HEAD(%struct.list_head* %entities)
  %chains = getelementptr inbounds %struct.uvc_device, %struct.uvc_device* %6, i32 0, i32 13
  call void @INIT_LIST_HEAD(%struct.list_head* %chains)
  %streams = getelementptr inbounds %struct.uvc_device, %struct.uvc_device* %6, i32 0, i32 14
  call void @INIT_LIST_HEAD(%struct.list_head* %streams)
  %nstreams = getelementptr inbounds %struct.uvc_device, %struct.uvc_device* %6, i32 0, i32 15
  call void @atomic_set(%struct.atomic_t* %nstreams, i32 0)
  %users = getelementptr inbounds %struct.uvc_device, %struct.uvc_device* %6, i32 0, i32 7
  call void @atomic_set(%struct.atomic_t* %users, i32 0)
  %nmappings = getelementptr inbounds %struct.uvc_device, %struct.uvc_device* %6, i32 0, i32 8
  call void @atomic_set(%struct.atomic_t* %nmappings, i32 0)
  %call25 = call %struct.usb_device* @usb_get_dev(%struct.usb_device* %call)
  %udev26 = getelementptr inbounds %struct.uvc_device, %struct.uvc_device* %6, i32 0, i32 0
  store %struct.usb_device* %call25, %struct.usb_device** %udev26, align 8, !tbaa !32
  %call27 = call %struct.usb_interface* @usb_get_intf(%struct.usb_interface* %intf)
  %intf28 = getelementptr inbounds %struct.uvc_device, %struct.uvc_device* %6, i32 0, i32 1
  store %struct.usb_interface* %call27, %struct.usb_interface** %intf28, align 8, !tbaa !40
  %cur_altsetting = getelementptr inbounds %struct.usb_interface, %struct.usb_interface* %intf, i32 0, i32 1
  %7 = load %struct.usb_host_interface*, %struct.usb_host_interface** %cur_altsetting, align 8, !tbaa !41
  %desc = getelementptr inbounds %struct.usb_host_interface, %struct.usb_host_interface* %7, i32 0, i32 0
  %bInterfaceNumber = getelementptr inbounds %struct.usb_interface_descriptor, %struct.usb_interface_descriptor* %desc, i32 0, i32 2
  %8 = load i8, i8* %bInterfaceNumber, align 2, !tbaa !56
  %conv29 = zext i8 %8 to i32
  %intfnum = getelementptr inbounds %struct.uvc_device, %struct.uvc_device* %6, i32 0, i32 4
  store i32 %conv29, i32* %intfnum, align 4, !tbaa !57
  %9 = load i32, i32* @uvc_quirks_param, align 4, !tbaa !23
  %cmp30 = icmp eq i32 %9, -1
  br i1 %cmp30, label %cond.true, label %cond.false

cond.true:                                        ; preds = %if.end24
  %driver_info = getelementptr inbounds %struct.usb_device_id, %struct.usb_device_id* %id, i32 0, i32 12
  %10 = load i64, i64* %driver_info, align 8, !tbaa !58
  br label %cond.end

cond.false:                                       ; preds = %if.end24
  %11 = load i32, i32* @uvc_quirks_param, align 4, !tbaa !23
  %conv32 = zext i32 %11 to i64
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i64 [ %10, %cond.true ], [ %conv32, %cond.false ]
  %conv33 = trunc i64 %cond to i32
  %quirks = getelementptr inbounds %struct.uvc_device, %struct.uvc_device* %6, i32 0, i32 3
  store i32 %conv33, i32* %quirks, align 8, !tbaa !59
  %product = getelementptr inbounds %struct.usb_device, %struct.usb_device* %call, i32 0, i32 24
  %12 = load i8*, i8** %product, align 8, !tbaa !60
  %cmp34 = icmp ne i8* %12, null
  %name = getelementptr inbounds %struct.uvc_device, %struct.uvc_device* %6, i32 0, i32 5
  %arraydecay37 = getelementptr inbounds [32 x i8], [32 x i8]* %name, i32 0, i32 0
  br i1 %cmp34, label %if.then36, label %if.else40

if.then36:                                        ; preds = %cond.end
  %product38 = getelementptr inbounds %struct.usb_device, %struct.usb_device* %call, i32 0, i32 24
  %13 = load i8*, i8** %product38, align 8, !tbaa !60
  %call39 = call i64 @strlcpy(i8* %arraydecay37, i8* %13, i64 32)
  br label %if.end49

if.else40:                                        ; preds = %cond.end
  %descriptor = getelementptr inbounds %struct.usb_device, %struct.usb_device* %call, i32 0, i32 12
  %idVendor43 = getelementptr inbounds %struct.usb_device_descriptor, %struct.usb_device_descriptor* %descriptor, i32 0, i32 7
  %14 = load i16, i16* %idVendor43, align 8, !tbaa !64
  %conv44 = zext i16 %14 to i32
  %descriptor45 = getelementptr inbounds %struct.usb_device, %struct.usb_device* %call, i32 0, i32 12
  %idProduct46 = getelementptr inbounds %struct.usb_device_descriptor, %struct.usb_device_descriptor* %descriptor45, i32 0, i32 8
  %15 = load i16, i16* %idProduct46, align 2, !tbaa !65
  %conv47 = zext i16 %15 to i32
  %call48 = call i32 (i8*, i64, i8*, ...) @snprintf(i8* %arraydecay37, i64 32, i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.8, i32 0, i32 0), i32 %conv44, i32 %conv47)
  br label %if.end49

if.end49:                                         ; preds = %if.else40, %if.then36
  %call50 = call i32 @uvc_parse_control(%struct.uvc_device* %6)
  %cmp51 = icmp slt i32 %call50, 0
  br i1 %cmp51, label %do.body54, label %if.end62

do.body54:                                        ; preds = %if.end49
  %16 = load i32, i32* @uvc_trace_param, align 4, !tbaa !23
  %and55 = and i32 %16, 1
  %tobool56 = icmp ne i32 %and55, 0
  br i1 %tobool56, label %if.then57, label %error

if.then57:                                        ; preds = %do.body54
  %call58 = call i32 (i8*, ...) @printk(i8* getelementptr inbounds ([46 x i8], [46 x i8]* @.str.9, i32 0, i32 0))
  br label %error

if.end62:                                         ; preds = %if.end49
  %uvc_version = getelementptr inbounds %struct.uvc_device, %struct.uvc_device* %6, i32 0, i32 10
  %17 = load i16, i16* %uvc_version, align 8, !tbaa !66
  %conv63 = zext i16 %17 to i32
  %shr = ashr i32 %conv63, 8
  %uvc_version64 = getelementptr inbounds %struct.uvc_device, %struct.uvc_device* %6, i32 0, i32 10
  %18 = load i16, i16* %uvc_version64, align 8, !tbaa !66
  %conv65 = zext i16 %18 to i32
  %and66 = and i32 %conv65, 255
  %product67 = getelementptr inbounds %struct.usb_device, %struct.usb_device* %call, i32 0, i32 24
  %19 = load i8*, i8** %product67, align 8, !tbaa !60
  %tobool68 = icmp ne i8* %19, null
  br i1 %tobool68, label %cond.true69, label %cond.end72

cond.true69:                                      ; preds = %if.end62
  %product70 = getelementptr inbounds %struct.usb_device, %struct.usb_device* %call, i32 0, i32 24
  %20 = load i8*, i8** %product70, align 8, !tbaa !60
  br label %cond.end72

cond.end72:                                       ; preds = %if.end62, %cond.true69
  %cond73 = phi i8* [ %20, %cond.true69 ], [ getelementptr inbounds ([10 x i8], [10 x i8]* @.str.11, i32 0, i32 0), %if.end62 ]
  %descriptor74 = getelementptr inbounds %struct.usb_device, %struct.usb_device* %call, i32 0, i32 12
  %idVendor75 = getelementptr inbounds %struct.usb_device_descriptor, %struct.usb_device_descriptor* %descriptor74, i32 0, i32 7
  %21 = load i16, i16* %idVendor75, align 8, !tbaa !64
  %conv76 = zext i16 %21 to i32
  %descriptor77 = getelementptr inbounds %struct.usb_device, %struct.usb_device* %call, i32 0, i32 12
  %idProduct78 = getelementptr inbounds %struct.usb_device_descriptor, %struct.usb_device_descriptor* %descriptor77, i32 0, i32 8
  %22 = load i16, i16* %idProduct78, align 2, !tbaa !65
  %conv79 = zext i16 %22 to i32
  %call80 = call i32 (i8*, ...) @printk(i8* getelementptr inbounds ([53 x i8], [53 x i8]* @.str.10, i32 0, i32 0), i32 %shr, i32 %and66, i8* %cond73, i32 %conv76, i32 %conv79)
  %quirks81 = getelementptr inbounds %struct.uvc_device, %struct.uvc_device* %6, i32 0, i32 3
  %23 = load i32, i32* %quirks81, align 8, !tbaa !59
  %conv82 = zext i32 %23 to i64
  %driver_info83 = getelementptr inbounds %struct.usb_device_id, %struct.usb_device_id* %id, i32 0, i32 12
  %24 = load i64, i64* %driver_info83, align 8, !tbaa !58
  %cmp84 = icmp ne i64 %conv82, %24
  br i1 %cmp84, label %if.then86, label %if.end90

if.then86:                                        ; preds = %cond.end72
  %quirks87 = getelementptr inbounds %struct.uvc_device, %struct.uvc_device* %6, i32 0, i32 3
  %25 = load i32, i32* %quirks87, align 8, !tbaa !59
  %call88 = call i32 (i8*, ...) @printk(i8* getelementptr inbounds ([84 x i8], [84 x i8]* @.str.12, i32 0, i32 0), i32 %25)
  %call89 = call i32 (i8*, ...) @printk(i8* getelementptr inbounds ([80 x i8], [80 x i8]* @.str.13, i32 0, i32 0))
  br label %if.end90

if.end90:                                         ; preds = %if.then86, %cond.end72
  %dev91 = getelementptr inbounds %struct.usb_interface, %struct.usb_interface* %intf, i32 0, i32 7
  %vdev = getelementptr inbounds %struct.uvc_device, %struct.uvc_device* %6, i32 0, i32 9
  %call92 = call i32 @v4l2_device_register(%struct.device* %dev91, %struct.v4l2_device* %vdev)
  %cmp93 = icmp slt i32 %call92, 0
  br i1 %cmp93, label %error, label %if.end96

if.end96:                                         ; preds = %if.end90
  %call97 = call i32 @uvc_ctrl_init_device(%struct.uvc_device* %6)
  %cmp98 = icmp slt i32 %call97, 0
  br i1 %cmp98, label %error, label %if.end101

if.end101:                                        ; preds = %if.end96
  %call102 = call i32 @uvc_scan_device(%struct.uvc_device* %6)
  %cmp103 = icmp slt i32 %call102, 0
  br i1 %cmp103, label %error, label %if.end106

if.end106:                                        ; preds = %if.end101
  %call107 = call i32 @uvc_register_chains(%struct.uvc_device* %6)
  %cmp108 = icmp slt i32 %call107, 0
  br i1 %cmp108, label %error, label %if.end111

if.end111:                                        ; preds = %if.end106
  %26 = bitcast %struct.uvc_device* %6 to i8*
  call void @usb_set_intfdata(%struct.usb_interface* %intf, i8* %26)
  %call112 = call i32 @uvc_status_init(%struct.uvc_device* %6)
  %cmp113 = icmp slt i32 %call112, 0
  br i1 %cmp113, label %if.then115, label %do.body118

if.then115:                                       ; preds = %if.end111
  %call116 = call i32 (i8*, ...) @printk(i8* getelementptr inbounds ([100 x i8], [100 x i8]* @.str.14, i32 0, i32 0), i32 %call112)
  br label %do.body118

do.body118:                                       ; preds = %if.end111, %if.then115
  %27 = load i32, i32* @uvc_trace_param, align 4, !tbaa !23
  %and119 = and i32 %27, 1
  %tobool120 = icmp ne i32 %and119, 0
  br i1 %tobool120, label %if.then121, label %do.end125

if.then121:                                       ; preds = %do.body118
  %call122 = call i32 (i8*, ...) @printk(i8* getelementptr inbounds ([37 x i8], [37 x i8]* @.str.15, i32 0, i32 0))
  br label %do.end125

do.end125:                                        ; preds = %if.then121, %do.body118
  %call126 = call i32 @usb_enable_autosuspend(%struct.usb_device* %call)
  br label %cleanup

error:                                            ; preds = %if.end106, %if.end101, %if.end96, %if.end90, %do.body54, %if.then57
  call void @uvc_unregister_video(%struct.uvc_device* %6)
  br label %cleanup

cleanup:                                          ; preds = %if.end20, %error, %do.end125
  %retval.0 = phi i32 [ -19, %error ], [ 0, %do.end125 ], [ -12, %if.end20 ]
  ret i32 %retval.0
}

; Function Attrs: nounwind uwtable
define internal void @uvc_disconnect(%struct.usb_interface* %intf) #1 {
entry:
  %call = call i8* @usb_get_intfdata(%struct.usb_interface* %intf)
  %0 = bitcast i8* %call to %struct.uvc_device*
  call void @usb_set_intfdata(%struct.usb_interface* %intf, i8* null)
  %cur_altsetting = getelementptr inbounds %struct.usb_interface, %struct.usb_interface* %intf, i32 0, i32 1
  %1 = load %struct.usb_host_interface*, %struct.usb_host_interface** %cur_altsetting, align 8, !tbaa !41
  %desc = getelementptr inbounds %struct.usb_host_interface, %struct.usb_host_interface* %1, i32 0, i32 0
  %bInterfaceSubClass = getelementptr inbounds %struct.usb_interface_descriptor, %struct.usb_interface_descriptor* %desc, i32 0, i32 6
  %2 = load i8, i8* %bInterfaceSubClass, align 2, !tbaa !67
  %conv = zext i8 %2 to i32
  %cmp = icmp eq i32 %conv, 2
  br i1 %cmp, label %cleanup.cont, label %if.end

if.end:                                           ; preds = %entry
  %state = getelementptr inbounds %struct.uvc_device, %struct.uvc_device* %0, i32 0, i32 6
  %3 = load i32, i32* %state, align 8, !tbaa !68
  %or = or i32 %3, 1
  store i32 %or, i32* %state, align 8, !tbaa !68
  call void @uvc_unregister_video(%struct.uvc_device* %0)
  br label %cleanup.cont

cleanup.cont:                                     ; preds = %if.end, %entry
  ret void
}

; Function Attrs: nounwind uwtable
define internal i32 @uvc_suspend(%struct.usb_interface* %intf, i32 %message.coerce) #1 {
entry:
  %message = alloca %struct.pm_message, align 4
  %coerce.dive = getelementptr inbounds %struct.pm_message, %struct.pm_message* %message, i32 0, i32 0
  store i32 %message.coerce, i32* %coerce.dive, align 4
  %call = call i8* @usb_get_intfdata(%struct.usb_interface* %intf)
  %0 = bitcast i8* %call to %struct.uvc_device*
  %1 = load i32, i32* @uvc_trace_param, align 4, !tbaa !23
  %and = and i32 %1, 256
  %tobool = icmp ne i32 %and, 0
  br i1 %tobool, label %if.then, label %do.end

if.then:                                          ; preds = %entry
  %cur_altsetting = getelementptr inbounds %struct.usb_interface, %struct.usb_interface* %intf, i32 0, i32 1
  %2 = load %struct.usb_host_interface*, %struct.usb_host_interface** %cur_altsetting, align 8, !tbaa !41
  %desc = getelementptr inbounds %struct.usb_host_interface, %struct.usb_host_interface* %2, i32 0, i32 0
  %bInterfaceNumber = getelementptr inbounds %struct.usb_interface_descriptor, %struct.usb_interface_descriptor* %desc, i32 0, i32 2
  %3 = load i8, i8* %bInterfaceNumber, align 2, !tbaa !56
  %conv = zext i8 %3 to i32
  %call1 = call i32 (i8*, ...) @printk(i8* getelementptr inbounds ([37 x i8], [37 x i8]* @.str.104, i32 0, i32 0), i32 %conv)
  br label %do.end

do.end:                                           ; preds = %if.then, %entry
  %cur_altsetting2 = getelementptr inbounds %struct.usb_interface, %struct.usb_interface* %intf, i32 0, i32 1
  %4 = load %struct.usb_host_interface*, %struct.usb_host_interface** %cur_altsetting2, align 8, !tbaa !41
  %desc3 = getelementptr inbounds %struct.usb_host_interface, %struct.usb_host_interface* %4, i32 0, i32 0
  %bInterfaceSubClass = getelementptr inbounds %struct.usb_interface_descriptor, %struct.usb_interface_descriptor* %desc3, i32 0, i32 6
  %5 = load i8, i8* %bInterfaceSubClass, align 2, !tbaa !67
  %conv4 = zext i8 %5 to i32
  %cmp = icmp eq i32 %conv4, 1
  br i1 %cmp, label %if.then6, label %if.end8

if.then6:                                         ; preds = %do.end
  %call7 = call i32 @uvc_status_suspend(%struct.uvc_device* %0)
  br label %cleanup

if.end8:                                          ; preds = %do.end
  %streams = getelementptr inbounds %struct.uvc_device, %struct.uvc_device* %0, i32 0, i32 14
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %if.end8
  %list19.sink = phi %struct.list_head* [ %list19, %for.inc ], [ %streams, %if.end8 ]
  %next20 = getelementptr inbounds %struct.list_head, %struct.list_head* %list19.sink, i32 0, i32 0
  %6 = load %struct.list_head*, %struct.list_head** %next20, align 8, !tbaa !24
  %7 = bitcast %struct.list_head* %6 to i8*
  %add.ptr22 = getelementptr inbounds i8, i8* %7, i64 0
  %8 = bitcast i8* %add.ptr22 to %struct.uvc_streaming*
  %list = getelementptr inbounds %struct.uvc_streaming, %struct.uvc_streaming* %8, i32 0, i32 0
  %streams9 = getelementptr inbounds %struct.uvc_device, %struct.uvc_device* %0, i32 0, i32 14
  %cmp10 = icmp ne %struct.list_head* %list, %streams9
  br i1 %cmp10, label %for.body, label %do.body23

for.body:                                         ; preds = %for.cond
  %intf12 = getelementptr inbounds %struct.uvc_streaming, %struct.uvc_streaming* %8, i32 0, i32 5
  %9 = load %struct.usb_interface*, %struct.usb_interface** %intf12, align 8, !tbaa !69
  %cmp13 = icmp eq %struct.usb_interface* %9, %intf
  br i1 %cmp13, label %if.then15, label %for.inc

if.then15:                                        ; preds = %for.body
  %call16 = call i32 @uvc_video_suspend(%struct.uvc_streaming* %8)
  br label %cleanup

for.inc:                                          ; preds = %for.body
  %list19 = getelementptr inbounds %struct.uvc_streaming, %struct.uvc_streaming* %8, i32 0, i32 0
  br label %for.cond

do.body23:                                        ; preds = %for.cond
  %10 = load i32, i32* @uvc_trace_param, align 4, !tbaa !23
  %and24 = and i32 %10, 256
  %tobool25 = icmp ne i32 %and24, 0
  br i1 %tobool25, label %if.then26, label %cleanup

if.then26:                                        ; preds = %do.body23
  %call27 = call i32 (i8*, ...) @printk(i8* getelementptr inbounds ([62 x i8], [62 x i8]* @.str.105, i32 0, i32 0))
  br label %cleanup

cleanup:                                          ; preds = %do.body23, %if.then26, %if.then15, %if.then6
  %retval.0 = phi i32 [ %call7, %if.then6 ], [ %call16, %if.then15 ], [ -22, %if.then26 ], [ -22, %do.body23 ]
  ret i32 %retval.0
}

; Function Attrs: nounwind uwtable
define internal i32 @uvc_resume(%struct.usb_interface* %intf) #1 {
entry:
  %call = call i32 @__uvc_resume(%struct.usb_interface* %intf, i32 0)
  ret i32 %call
}

; Function Attrs: nounwind uwtable
define internal i32 @uvc_reset_resume(%struct.usb_interface* %intf) #1 {
entry:
  %call = call i32 @__uvc_resume(%struct.usb_interface* %intf, i32 1)
  ret i32 %call
}

; Function Attrs: nounwind uwtable
define internal void @uvc_cleanup() #1 section ".exit.text" {
entry:
  call void @usb_deregister(%struct.usb_driver* getelementptr inbounds (%struct.uvc_driver, %struct.uvc_driver* @uvc_driver, i32 0, i32 0))
  call void @uvc_debugfs_cleanup()
  ret void
}

declare void @usb_deregister(%struct.usb_driver*) #4

declare void @uvc_debugfs_cleanup() #4

; Function Attrs: nounwind uwtable
define internal i32 @uvc_init() #1 section ".init.text" {
entry:
  %call = call i32 @uvc_debugfs_init()
  %call1 = call i32 @usb_register_driver(%struct.usb_driver* getelementptr inbounds (%struct.uvc_driver, %struct.uvc_driver* @uvc_driver, i32 0, i32 0), %struct.module* null, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.108, i32 0, i32 0))
  %cmp = icmp slt i32 %call1, 0
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  call void @uvc_debugfs_cleanup()
  br label %cleanup

if.end:                                           ; preds = %entry
  %call2 = call i32 (i8*, ...) @printk(i8* getelementptr inbounds ([34 x i8], [34 x i8]* @.str.109, i32 0, i32 0))
  br label %cleanup

cleanup:                                          ; preds = %if.end, %if.then
  %retval.0 = phi i32 [ %call1, %if.then ], [ 0, %if.end ]
  ret i32 %retval.0
}

declare i8* @__kmalloc(i64, i32) #4

; Function Attrs: nounwind uwtable
define internal i32 @uvc_clock_param_set(i8* %val, %struct.kernel_param* %kp) #1 {
entry:
  %call = call i32 @strncasecmp(i8* %val, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.1, i32 0, i32 0), i64 6)
  %cmp = icmp eq i32 %call, 0
  %add.ptr = getelementptr inbounds i8, i8* %val, i64 6
  %add.ptr.val = select i1 %cmp, i8* %add.ptr, i8* %val
  %call1 = call i32 @strcasecmp(i8* %add.ptr.val, i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.2, i32 0, i32 0))
  %cmp2 = icmp eq i32 %call1, 0
  br i1 %cmp2, label %return.sink.split, label %if.else

if.else:                                          ; preds = %entry
  %call4 = call i32 @strcasecmp(i8* %add.ptr.val, i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.3, i32 0, i32 0))
  %cmp5 = icmp eq i32 %call4, 0
  br i1 %cmp5, label %return.sink.split, label %return

return.sink.split:                                ; preds = %entry, %if.else
  %.sink = phi i32 [ 0, %if.else ], [ 1, %entry ]
  store i32 %.sink, i32* @uvc_clock_param, align 4, !tbaa !23
  br label %return

return:                                           ; preds = %return.sink.split, %if.else
  %retval.0 = phi i32 [ -22, %if.else ], [ 0, %return.sink.split ]
  ret i32 %retval.0
}

; Function Attrs: nounwind uwtable
define internal i32 @uvc_clock_param_get(i8* %buffer, %struct.kernel_param* %kp) #1 {
entry:
  %0 = load i32, i32* @uvc_clock_param, align 4, !tbaa !23
  %cmp = icmp eq i32 %0, 1
  %.sink = select i1 %cmp, i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.4, i32 0, i32 0), i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.5, i32 0, i32 0)
  %call1 = call i32 (i8*, i8*, ...) @sprintf(i8* %buffer, i8* %.sink)
  ret i32 %call1
}

declare i32 @strncasecmp(i8*, i8*, i64) #4

declare i32 @strcasecmp(i8*, i8*) #4

declare i32 @sprintf(i8*, i8*, ...) #4

; Function Attrs: inlinehint nounwind uwtable
define internal %struct.usb_device* @interface_to_usbdev(%struct.usb_interface* %intf) #0 {
entry:
  %dev = getelementptr inbounds %struct.usb_interface, %struct.usb_interface* %intf, i32 0, i32 7
  %parent = getelementptr inbounds %struct.device, %struct.device* %dev, i32 0, i32 0
  %0 = load %struct.device*, %struct.device** %parent, align 8, !tbaa !81
  %1 = bitcast %struct.device* %0 to i8*
  %add.ptr = getelementptr inbounds i8, i8* %1, i64 -136
  %2 = bitcast i8* %add.ptr to %struct.usb_device*
  ret %struct.usb_device* %2
}

declare i32 @printk(i8*, ...) #4

; Function Attrs: inlinehint nounwind uwtable
define internal i8* @kzalloc(i64 %size, i32 %flags) #0 {
entry:
  %or = or i32 %flags, 32768
  %call = call i8* @kmalloc(i64 %size, i32 %or)
  ret i8* %call
}

; Function Attrs: inlinehint nounwind uwtable
define internal void @INIT_LIST_HEAD(%struct.list_head* %list) #0 {
entry:
  %next = getelementptr inbounds %struct.list_head, %struct.list_head* %list, i32 0, i32 0
  store %struct.list_head* %list, %struct.list_head** %next, align 8, !tbaa !82
  %prev = getelementptr inbounds %struct.list_head, %struct.list_head* %list, i32 0, i32 1
  store %struct.list_head* %list, %struct.list_head** %prev, align 8, !tbaa !83
  ret void
}

; Function Attrs: inlinehint nounwind uwtable
define internal void @atomic_set(%struct.atomic_t* %v, i32 %i) #0 {
entry:
  %counter = getelementptr inbounds %struct.atomic_t, %struct.atomic_t* %v, i32 0, i32 0
  store i32 %i, i32* %counter, align 4, !tbaa !84
  ret void
}

declare %struct.usb_device* @usb_get_dev(%struct.usb_device*) #4

declare %struct.usb_interface* @usb_get_intf(%struct.usb_interface*) #4

declare i64 @strlcpy(i8*, i8*, i64) #4

declare i32 @snprintf(i8*, i64, i8*, ...) #4

; Function Attrs: nounwind uwtable
define internal i32 @uvc_parse_control(%struct.uvc_device* %dev) #1 {
entry:
  %intf = getelementptr inbounds %struct.uvc_device, %struct.uvc_device* %dev, i32 0, i32 1
  %0 = load %struct.usb_interface*, %struct.usb_interface** %intf, align 8, !tbaa !40
  %cur_altsetting = getelementptr inbounds %struct.usb_interface, %struct.usb_interface* %0, i32 0, i32 1
  %1 = load %struct.usb_host_interface*, %struct.usb_host_interface** %cur_altsetting, align 8, !tbaa !41
  %extra = getelementptr inbounds %struct.usb_host_interface, %struct.usb_host_interface* %1, i32 0, i32 2
  %2 = load i8*, i8** %extra, align 8, !tbaa !85
  %extralen = getelementptr inbounds %struct.usb_host_interface, %struct.usb_host_interface* %1, i32 0, i32 1
  %3 = load i32, i32* %extralen, align 4, !tbaa !86
  br label %while.cond

while.cond:                                       ; preds = %next_descriptor, %entry
  %buffer.0 = phi i8* [ %2, %entry ], [ %add.ptr, %next_descriptor ]
  %buflen.0 = phi i32 [ %3, %entry ], [ %sub, %next_descriptor ]
  %cmp = icmp sgt i32 %buflen.0, 2
  br i1 %cmp, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %call = call i32 @uvc_parse_vendor_control(%struct.uvc_device* %dev, i8* %buffer.0, i32 %buflen.0)
  %tobool = icmp ne i32 %call, 0
  br i1 %tobool, label %next_descriptor, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %while.body
  %arrayidx = getelementptr inbounds i8, i8* %buffer.0, i64 1
  %4 = load i8, i8* %arrayidx, align 1, !tbaa !87
  %conv = zext i8 %4 to i32
  %cmp1 = icmp ne i32 %conv, 36
  br i1 %cmp1, label %next_descriptor, label %if.end

if.end:                                           ; preds = %lor.lhs.false
  %call3 = call i32 @uvc_parse_standard_control(%struct.uvc_device* %dev, i8* %buffer.0, i32 %buflen.0)
  %cmp4 = icmp slt i32 %call3, 0
  br i1 %cmp4, label %cleanup, label %next_descriptor

next_descriptor:                                  ; preds = %if.end, %while.body, %lor.lhs.false
  %arrayidx8 = getelementptr inbounds i8, i8* %buffer.0, i64 0
  %5 = load i8, i8* %arrayidx8, align 1, !tbaa !87
  %conv9 = zext i8 %5 to i32
  %sub = sub nsw i32 %buflen.0, %conv9
  %arrayidx10 = getelementptr inbounds i8, i8* %buffer.0, i64 0
  %6 = load i8, i8* %arrayidx10, align 1, !tbaa !87
  %conv11 = zext i8 %6 to i32
  %idx.ext = sext i32 %conv11 to i64
  %add.ptr = getelementptr inbounds i8, i8* %buffer.0, i64 %idx.ext
  br label %while.cond

while.end:                                        ; preds = %while.cond
  %desc = getelementptr inbounds %struct.usb_host_interface, %struct.usb_host_interface* %1, i32 0, i32 0
  %bNumEndpoints = getelementptr inbounds %struct.usb_interface_descriptor, %struct.usb_interface_descriptor* %desc, i32 0, i32 4
  %7 = load i8, i8* %bNumEndpoints, align 4, !tbaa !12
  %conv12 = zext i8 %7 to i32
  %cmp13 = icmp eq i32 %conv12, 1
  br i1 %cmp13, label %land.lhs.true, label %cleanup

land.lhs.true:                                    ; preds = %while.end
  %quirks = getelementptr inbounds %struct.uvc_device, %struct.uvc_device* %dev, i32 0, i32 3
  %8 = load i32, i32* %quirks, align 8, !tbaa !59
  %and = and i32 %8, 8
  %tobool15 = icmp ne i32 %and, 0
  br i1 %tobool15, label %cleanup, label %if.then16

if.then16:                                        ; preds = %land.lhs.true
  %endpoint = getelementptr inbounds %struct.usb_host_interface, %struct.usb_host_interface* %1, i32 0, i32 3
  %9 = load %struct.usb_host_endpoint*, %struct.usb_host_endpoint** %endpoint, align 8, !tbaa !16
  %arrayidx17 = getelementptr inbounds %struct.usb_host_endpoint, %struct.usb_host_endpoint* %9, i64 0
  %desc19 = getelementptr inbounds %struct.usb_host_endpoint, %struct.usb_host_endpoint* %arrayidx17, i32 0, i32 0
  %call20 = call i32 @usb_endpoint_is_int_in(%struct.usb_endpoint_descriptor* %desc19)
  %tobool21 = icmp ne i32 %call20, 0
  br i1 %tobool21, label %land.lhs.true22, label %cleanup

land.lhs.true22:                                  ; preds = %if.then16
  %wMaxPacketSize = getelementptr inbounds %struct.usb_endpoint_descriptor, %struct.usb_endpoint_descriptor* %desc19, i32 0, i32 4
  %10 = load i16, i16* %wMaxPacketSize, align 1, !tbaa !88
  %conv23 = zext i16 %10 to i32
  %cmp24 = icmp sge i32 %conv23, 8
  br i1 %cmp24, label %land.lhs.true26, label %cleanup

land.lhs.true26:                                  ; preds = %land.lhs.true22
  %bInterval = getelementptr inbounds %struct.usb_endpoint_descriptor, %struct.usb_endpoint_descriptor* %desc19, i32 0, i32 5
  %11 = load i8, i8* %bInterval, align 1, !tbaa !89
  %conv27 = zext i8 %11 to i32
  %cmp28 = icmp ne i32 %conv27, 0
  br i1 %cmp28, label %do.body, label %cleanup

do.body:                                          ; preds = %land.lhs.true26
  %12 = load i32, i32* @uvc_trace_param, align 4, !tbaa !23
  %and31 = and i32 %12, 2
  %tobool32 = icmp ne i32 %and31, 0
  br i1 %tobool32, label %if.then33, label %do.end

if.then33:                                        ; preds = %do.body
  %bEndpointAddress = getelementptr inbounds %struct.usb_endpoint_descriptor, %struct.usb_endpoint_descriptor* %desc19, i32 0, i32 2
  %13 = load i8, i8* %bEndpointAddress, align 1, !tbaa !90
  %conv34 = zext i8 %13 to i32
  %call35 = call i32 (i8*, ...) @printk(i8* getelementptr inbounds ([50 x i8], [50 x i8]* @.str.16, i32 0, i32 0), i32 %conv34)
  br label %do.end

do.end:                                           ; preds = %if.then33, %do.body
  %int_ep = getelementptr inbounds %struct.uvc_device, %struct.uvc_device* %dev, i32 0, i32 16
  store %struct.usb_host_endpoint* %arrayidx17, %struct.usb_host_endpoint** %int_ep, align 8, !tbaa !91
  br label %cleanup

cleanup:                                          ; preds = %while.end, %land.lhs.true, %do.end, %land.lhs.true26, %land.lhs.true22, %if.then16, %if.end
  %retval.0 = phi i32 [ %call3, %if.end ], [ 0, %if.then16 ], [ 0, %land.lhs.true22 ], [ 0, %land.lhs.true26 ], [ 0, %do.end ], [ 0, %land.lhs.true ], [ 0, %while.end ]
  ret i32 %retval.0
}

declare i32 @v4l2_device_register(%struct.device*, %struct.v4l2_device*) #4

declare i32 @uvc_ctrl_init_device(%struct.uvc_device*) #4

; Function Attrs: nounwind uwtable
define internal i32 @uvc_scan_device(%struct.uvc_device* %dev) #1 {
entry:
  %entities = getelementptr inbounds %struct.uvc_device, %struct.uvc_device* %dev, i32 0, i32 12
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %list37.sink = phi %struct.list_head* [ %list37, %for.inc ], [ %entities, %entry ]
  %next38 = getelementptr inbounds %struct.list_head, %struct.list_head* %list37.sink, i32 0, i32 0
  %0 = load %struct.list_head*, %struct.list_head** %next38, align 8, !tbaa !24
  %1 = bitcast %struct.list_head* %0 to i8*
  %add.ptr40 = getelementptr inbounds i8, i8* %1, i64 0
  %2 = bitcast i8* %add.ptr40 to %struct.uvc_entity*
  %list = getelementptr inbounds %struct.uvc_entity, %struct.uvc_entity* %2, i32 0, i32 0
  %entities1 = getelementptr inbounds %struct.uvc_device, %struct.uvc_device* %dev, i32 0, i32 12
  %cmp = icmp ne %struct.list_head* %list, %entities1
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %type = getelementptr inbounds %struct.uvc_entity, %struct.uvc_entity* %2, i32 0, i32 4
  %3 = load i16, i16* %type, align 2, !tbaa !92
  %conv = zext i16 %3 to i32
  %and = and i32 %conv, 65280
  %cmp2 = icmp ne i32 %and, 0
  br i1 %cmp2, label %land.lhs.true, label %for.inc

land.lhs.true:                                    ; preds = %for.body
  %type4 = getelementptr inbounds %struct.uvc_entity, %struct.uvc_entity* %2, i32 0, i32 4
  %4 = load i16, i16* %type4, align 2, !tbaa !92
  %conv5 = zext i16 %4 to i32
  %and6 = and i32 %conv5, 32768
  %cmp7 = icmp eq i32 %and6, 32768
  br i1 %cmp7, label %if.end, label %for.inc

if.end:                                           ; preds = %land.lhs.true
  %chain9 = getelementptr inbounds %struct.uvc_entity, %struct.uvc_entity* %2, i32 0, i32 1
  %next10 = getelementptr inbounds %struct.list_head, %struct.list_head* %chain9, i32 0, i32 0
  %5 = load %struct.list_head*, %struct.list_head** %next10, align 8, !tbaa !93
  %tobool = icmp ne %struct.list_head* %5, null
  br i1 %tobool, label %for.inc, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %if.end
  %chain11 = getelementptr inbounds %struct.uvc_entity, %struct.uvc_entity* %2, i32 0, i32 1
  %prev = getelementptr inbounds %struct.list_head, %struct.list_head* %chain11, i32 0, i32 1
  %6 = load %struct.list_head*, %struct.list_head** %prev, align 8, !tbaa !94
  %tobool12 = icmp ne %struct.list_head* %6, null
  br i1 %tobool12, label %for.inc, label %if.end14

if.end14:                                         ; preds = %lor.lhs.false
  %call = call i8* @kzalloc(i64 120, i32 208)
  %7 = bitcast i8* %call to %struct.uvc_video_chain*
  %cmp15 = icmp eq %struct.uvc_video_chain* %7, null
  br i1 %cmp15, label %cleanup, label %if.end18

if.end18:                                         ; preds = %if.end14
  %entities19 = getelementptr inbounds %struct.uvc_video_chain, %struct.uvc_video_chain* %7, i32 0, i32 2
  call void @INIT_LIST_HEAD(%struct.list_head* %entities19)
  %ctrl_mutex = getelementptr inbounds %struct.uvc_video_chain, %struct.uvc_video_chain* %7, i32 0, i32 5
  call void @__mutex_init(%struct.mutex* %ctrl_mutex, i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.73, i32 0, i32 0), %struct.lock_class_key* @uvc_scan_device.__key)
  %dev20 = getelementptr inbounds %struct.uvc_video_chain, %struct.uvc_video_chain* %7, i32 0, i32 0
  store %struct.uvc_device* %dev, %struct.uvc_device** %dev20, align 8, !tbaa !95
  %prio = getelementptr inbounds %struct.uvc_video_chain, %struct.uvc_video_chain* %7, i32 0, i32 6
  call void @v4l2_prio_init(%struct.v4l2_prio_state* %prio)
  %flags = getelementptr inbounds %struct.uvc_entity, %struct.uvc_entity* %2, i32 0, i32 2
  %8 = load i32, i32* %flags, align 8, !tbaa !97
  %or = or i32 %8, 1
  store i32 %or, i32* %flags, align 8, !tbaa !97
  %call21 = call i32 @uvc_scan_chain(%struct.uvc_video_chain* %7, %struct.uvc_entity* %2)
  %cmp22 = icmp slt i32 %call21, 0
  br i1 %cmp22, label %if.then24, label %do.body26

if.then24:                                        ; preds = %if.end18
  %9 = bitcast %struct.uvc_video_chain* %7 to i8*
  call void @kfree(i8* %9)
  br label %for.inc

do.body26:                                        ; preds = %if.end18
  %10 = load i32, i32* @uvc_trace_param, align 4, !tbaa !23
  %and27 = and i32 %10, 1
  %tobool28 = icmp ne i32 %and27, 0
  br i1 %tobool28, label %if.then29, label %do.end34

if.then29:                                        ; preds = %do.body26
  %call30 = call i8* @uvc_print_chain(%struct.uvc_video_chain* %7)
  %call31 = call i32 (i8*, ...) @printk(i8* getelementptr inbounds ([45 x i8], [45 x i8]* @.str.74, i32 0, i32 0), i8* %call30)
  br label %do.end34

do.end34:                                         ; preds = %if.then29, %do.body26
  %list35 = getelementptr inbounds %struct.uvc_video_chain, %struct.uvc_video_chain* %7, i32 0, i32 1
  %chains = getelementptr inbounds %struct.uvc_device, %struct.uvc_device* %dev, i32 0, i32 13
  call void @list_add_tail(%struct.list_head* %list35, %struct.list_head* %chains)
  br label %for.inc

for.inc:                                          ; preds = %if.end, %lor.lhs.false, %for.body, %land.lhs.true, %do.end34, %if.then24
  %list37 = getelementptr inbounds %struct.uvc_entity, %struct.uvc_entity* %2, i32 0, i32 0
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %chains41 = getelementptr inbounds %struct.uvc_device, %struct.uvc_device* %dev, i32 0, i32 13
  %call42 = call i32 @list_empty(%struct.list_head* %chains41)
  %tobool43 = icmp ne i32 %call42, 0
  br i1 %tobool43, label %if.then44, label %cleanup

if.then44:                                        ; preds = %for.end
  %call45 = call i32 (i8*, ...) @printk(i8* getelementptr inbounds ([41 x i8], [41 x i8]* @.str.75, i32 0, i32 0))
  br label %cleanup

cleanup:                                          ; preds = %for.end, %if.end14, %if.then44
  %retval.0 = phi i32 [ -1, %if.then44 ], [ -12, %if.end14 ], [ 0, %for.end ]
  ret i32 %retval.0
}

; Function Attrs: nounwind uwtable
define internal i32 @uvc_register_chains(%struct.uvc_device* %dev) #1 {
entry:
  %chains = getelementptr inbounds %struct.uvc_device, %struct.uvc_device* %dev, i32 0, i32 13
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %list4.sink = phi %struct.list_head* [ %list4, %for.inc ], [ %chains, %entry ]
  %next5 = getelementptr inbounds %struct.list_head, %struct.list_head* %list4.sink, i32 0, i32 0
  %0 = load %struct.list_head*, %struct.list_head** %next5, align 8, !tbaa !24
  %1 = bitcast %struct.list_head* %0 to i8*
  %add.ptr7 = getelementptr inbounds i8, i8* %1, i64 -8
  %2 = bitcast i8* %add.ptr7 to %struct.uvc_video_chain*
  %list = getelementptr inbounds %struct.uvc_video_chain, %struct.uvc_video_chain* %2, i32 0, i32 1
  %chains1 = getelementptr inbounds %struct.uvc_device, %struct.uvc_device* %dev, i32 0, i32 13
  %cmp = icmp ne %struct.list_head* %list, %chains1
  br i1 %cmp, label %for.body, label %cleanup

for.body:                                         ; preds = %for.cond
  %call = call i32 @uvc_register_terms(%struct.uvc_device* %dev, %struct.uvc_video_chain* %2)
  %cmp2 = icmp slt i32 %call, 0
  br i1 %cmp2, label %cleanup, label %for.inc

for.inc:                                          ; preds = %for.body
  %list4 = getelementptr inbounds %struct.uvc_video_chain, %struct.uvc_video_chain* %2, i32 0, i32 1
  br label %for.cond

cleanup:                                          ; preds = %for.cond, %for.body
  %retval.0 = phi i32 [ %call, %for.body ], [ 0, %for.cond ]
  ret i32 %retval.0
}

; Function Attrs: inlinehint nounwind uwtable
define internal void @usb_set_intfdata(%struct.usb_interface* %intf, i8* %data) #0 {
entry:
  %dev = getelementptr inbounds %struct.usb_interface, %struct.usb_interface* %intf, i32 0, i32 7
  %call = call i32 @dev_set_drvdata(%struct.device* %dev, i8* %data)
  ret void
}

declare i32 @uvc_status_init(%struct.uvc_device*) #4

; Function Attrs: inlinehint nounwind uwtable
define internal i32 @usb_enable_autosuspend(%struct.usb_device* %udev) #0 {
entry:
  ret i32 0
}

; Function Attrs: nounwind uwtable
define internal void @uvc_unregister_video(%struct.uvc_device* %dev) #1 {
entry:
  %nstreams = getelementptr inbounds %struct.uvc_device, %struct.uvc_device* %dev, i32 0, i32 15
  call void @atomic_inc(%struct.atomic_t* %nstreams)
  %streams = getelementptr inbounds %struct.uvc_device, %struct.uvc_device* %dev, i32 0, i32 14
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %list6.sink = phi %struct.list_head* [ %list6, %for.inc ], [ %streams, %entry ]
  %next7 = getelementptr inbounds %struct.list_head, %struct.list_head* %list6.sink, i32 0, i32 0
  %0 = load %struct.list_head*, %struct.list_head** %next7, align 8, !tbaa !24
  %1 = bitcast %struct.list_head* %0 to i8*
  %add.ptr9 = getelementptr inbounds i8, i8* %1, i64 0
  %2 = bitcast i8* %add.ptr9 to %struct.uvc_streaming*
  %list = getelementptr inbounds %struct.uvc_streaming, %struct.uvc_streaming* %2, i32 0, i32 0
  %streams1 = getelementptr inbounds %struct.uvc_device, %struct.uvc_device* %dev, i32 0, i32 14
  %cmp = icmp ne %struct.list_head* %list, %streams1
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %vdev = getelementptr inbounds %struct.uvc_streaming, %struct.uvc_streaming* %2, i32 0, i32 2
  %3 = load %struct.video_device*, %struct.video_device** %vdev, align 8, !tbaa !98
  %cmp2 = icmp eq %struct.video_device* %3, null
  br i1 %cmp2, label %for.inc, label %if.end

if.end:                                           ; preds = %for.body
  %vdev3 = getelementptr inbounds %struct.uvc_streaming, %struct.uvc_streaming* %2, i32 0, i32 2
  %4 = load %struct.video_device*, %struct.video_device** %vdev3, align 8, !tbaa !98
  call void @video_unregister_device(%struct.video_device* %4)
  %vdev4 = getelementptr inbounds %struct.uvc_streaming, %struct.uvc_streaming* %2, i32 0, i32 2
  store %struct.video_device* null, %struct.video_device** %vdev4, align 8, !tbaa !98
  call void @uvc_debugfs_cleanup_stream(%struct.uvc_streaming* %2)
  br label %for.inc

for.inc:                                          ; preds = %for.body, %if.end
  %list6 = getelementptr inbounds %struct.uvc_streaming, %struct.uvc_streaming* %2, i32 0, i32 0
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %nstreams10 = getelementptr inbounds %struct.uvc_device, %struct.uvc_device* %dev, i32 0, i32 15
  %call = call i32 @atomic_dec_and_test(%struct.atomic_t* %nstreams10)
  %tobool = icmp ne i32 %call, 0
  br i1 %tobool, label %if.then11, label %if.end12

if.then11:                                        ; preds = %for.end
  call void @uvc_delete(%struct.uvc_device* %dev)
  br label %if.end12

if.end12:                                         ; preds = %if.then11, %for.end
  ret void
}

; Function Attrs: nounwind uwtable
define internal i32 @uvc_parse_vendor_control(%struct.uvc_device* %dev, i8* %buffer, i32 %buflen) #1 {
entry:
  %udev1 = getelementptr inbounds %struct.uvc_device, %struct.uvc_device* %dev, i32 0, i32 0
  %0 = load %struct.usb_device*, %struct.usb_device** %udev1, align 8, !tbaa !32
  %intf = getelementptr inbounds %struct.uvc_device, %struct.uvc_device* %dev, i32 0, i32 1
  %1 = load %struct.usb_interface*, %struct.usb_interface** %intf, align 8, !tbaa !40
  %cur_altsetting = getelementptr inbounds %struct.usb_interface, %struct.usb_interface* %1, i32 0, i32 1
  %2 = load %struct.usb_host_interface*, %struct.usb_host_interface** %cur_altsetting, align 8, !tbaa !41
  %udev2 = getelementptr inbounds %struct.uvc_device, %struct.uvc_device* %dev, i32 0, i32 0
  %3 = load %struct.usb_device*, %struct.usb_device** %udev2, align 8, !tbaa !32
  %descriptor = getelementptr inbounds %struct.usb_device, %struct.usb_device* %3, i32 0, i32 12
  %idVendor = getelementptr inbounds %struct.usb_device_descriptor, %struct.usb_device_descriptor* %descriptor, i32 0, i32 7
  %4 = load i16, i16* %idVendor, align 8, !tbaa !64
  %conv = zext i16 %4 to i32
  %cond1 = icmp eq i32 %conv, 1133
  br i1 %cond1, label %sw.bb, label %cleanup

sw.bb:                                            ; preds = %entry
  %arrayidx = getelementptr inbounds i8, i8* %buffer, i64 1
  %5 = load i8, i8* %arrayidx, align 1, !tbaa !87
  %conv3 = zext i8 %5 to i32
  %cmp = icmp ne i32 %conv3, 65
  br i1 %cmp, label %cleanup, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %sw.bb
  %arrayidx5 = getelementptr inbounds i8, i8* %buffer, i64 2
  %6 = load i8, i8* %arrayidx5, align 1, !tbaa !87
  %conv6 = zext i8 %6 to i32
  %cmp7 = icmp ne i32 %conv6, 1
  br i1 %cmp7, label %cleanup, label %if.end

if.end:                                           ; preds = %lor.lhs.false
  %cmp9 = icmp sge i32 %buflen, 22
  br i1 %cmp9, label %cond.true, label %cond.end

cond.true:                                        ; preds = %if.end
  %arrayidx11 = getelementptr inbounds i8, i8* %buffer, i64 21
  %7 = load i8, i8* %arrayidx11, align 1, !tbaa !87
  %conv12 = zext i8 %7 to i32
  br label %cond.end

cond.end:                                         ; preds = %if.end, %cond.true
  %cond = phi i32 [ %conv12, %cond.true ], [ 0, %if.end ]
  %add = add i32 25, %cond
  %cmp13 = icmp uge i32 %buflen, %add
  br i1 %cmp13, label %cond.true15, label %cond.end20

cond.true15:                                      ; preds = %cond.end
  %add16 = add i32 22, %cond
  %idxprom = zext i32 %add16 to i64
  %arrayidx17 = getelementptr inbounds i8, i8* %buffer, i64 %idxprom
  %8 = load i8, i8* %arrayidx17, align 1, !tbaa !87
  %conv18 = zext i8 %8 to i32
  br label %cond.end20

cond.end20:                                       ; preds = %cond.end, %cond.true15
  %cond21 = phi i32 [ %conv18, %cond.true15 ], [ 0, %cond.end ]
  %add22 = add i32 25, %cond
  %mul = mul i32 2, %cond21
  %add23 = add i32 %add22, %mul
  %cmp24 = icmp ult i32 %buflen, %add23
  br i1 %cmp24, label %do.body, label %if.end30

do.body:                                          ; preds = %cond.end20
  %9 = load i32, i32* @uvc_trace_param, align 4, !tbaa !23
  %and = and i32 %9, 2
  %tobool = icmp ne i32 %and, 0
  br i1 %tobool, label %if.then27, label %cleanup

if.then27:                                        ; preds = %do.body
  %devnum = getelementptr inbounds %struct.usb_device, %struct.usb_device* %0, i32 0, i32 0
  %10 = load i32, i32* %devnum, align 8, !tbaa !99
  %desc = getelementptr inbounds %struct.usb_host_interface, %struct.usb_host_interface* %2, i32 0, i32 0
  %bInterfaceNumber = getelementptr inbounds %struct.usb_interface_descriptor, %struct.usb_interface_descriptor* %desc, i32 0, i32 2
  %11 = load i8, i8* %bInterfaceNumber, align 2, !tbaa !56
  %conv28 = zext i8 %11 to i32
  %call = call i32 (i8*, ...) @printk(i8* getelementptr inbounds ([70 x i8], [70 x i8]* @.str.17, i32 0, i32 0), i32 %10, i32 %conv28)
  br label %cleanup

if.end30:                                         ; preds = %cond.end20
  %arrayidx31 = getelementptr inbounds i8, i8* %buffer, i64 3
  %12 = load i8, i8* %arrayidx31, align 1, !tbaa !87
  %add32 = add i32 %cond, 1
  %mul33 = mul i32 2, %cond21
  %call34 = call %struct.uvc_entity* @uvc_alloc_entity(i16 zeroext 6, i8 zeroext %12, i32 %add32, i32 %mul33)
  %cmp35 = icmp eq %struct.uvc_entity* %call34, null
  br i1 %cmp35, label %cleanup, label %if.end38

if.end38:                                         ; preds = %if.end30
  %cmp39 = icmp uge i64 16, 64
  %13 = getelementptr inbounds %struct.uvc_entity, %struct.uvc_entity* %call34, i32 0, i32 11
  %extension = bitcast %union.anon.58* %13 to %struct.anon.64*
  %guidExtensionCode = getelementptr inbounds %struct.anon.64, %struct.anon.64* %extension, i32 0, i32 0
  %arraydecay = getelementptr inbounds [16 x i8], [16 x i8]* %guidExtensionCode, i32 0, i32 0
  %arrayidx42 = getelementptr inbounds i8, i8* %buffer, i64 4
  br i1 %cmp39, label %if.then41, label %if.else

if.then41:                                        ; preds = %if.end38
  %call43 = call i8* @__memcpy(i8* %arraydecay, i8* %arrayidx42, i64 16)
  br label %if.end48

if.else:                                          ; preds = %if.end38
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %arraydecay, i8* %arrayidx42, i64 16, i32 1, i1 false)
  br label %if.end48

if.end48:                                         ; preds = %if.else, %if.then41
  %__ret.0 = phi i8* [ %call43, %if.then41 ], [ %arraydecay, %if.else ]
  %arrayidx49 = getelementptr inbounds i8, i8* %buffer, i64 20
  %14 = load i8, i8* %arrayidx49, align 1, !tbaa !87
  %15 = getelementptr inbounds %struct.uvc_entity, %struct.uvc_entity* %call34, i32 0, i32 11
  %extension50 = bitcast %union.anon.58* %15 to %struct.anon.64*
  %bNumControls = getelementptr inbounds %struct.anon.64, %struct.anon.64* %extension50, i32 0, i32 1
  store i8 %14, i8* %bNumControls, align 8, !tbaa !87
  %conv52 = zext i32 %cond to i64
  %baSourceID = getelementptr inbounds %struct.uvc_entity, %struct.uvc_entity* %call34, i32 0, i32 13
  %16 = load i8*, i8** %baSourceID, align 8, !tbaa !100
  %arrayidx54 = getelementptr inbounds i8, i8* %buffer, i64 22
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %16, i8* %arrayidx54, i64 %conv52, i32 1, i1 false)
  %add56 = add i32 22, %cond
  %idxprom57 = zext i32 %add56 to i64
  %arrayidx58 = getelementptr inbounds i8, i8* %buffer, i64 %idxprom57
  %17 = load i8, i8* %arrayidx58, align 1, !tbaa !87
  %18 = getelementptr inbounds %struct.uvc_entity, %struct.uvc_entity* %call34, i32 0, i32 11
  %extension59 = bitcast %union.anon.58* %18 to %struct.anon.64*
  %bControlSize = getelementptr inbounds %struct.anon.64, %struct.anon.64* %extension59, i32 0, i32 2
  store i8 %17, i8* %bControlSize, align 1, !tbaa !87
  %19 = bitcast %struct.uvc_entity* %call34 to i8*
  %add.ptr = getelementptr inbounds i8, i8* %19, i64 328
  %20 = getelementptr inbounds %struct.uvc_entity, %struct.uvc_entity* %call34, i32 0, i32 11
  %extension60 = bitcast %union.anon.58* %20 to %struct.anon.64*
  %bmControls = getelementptr inbounds %struct.anon.64, %struct.anon.64* %extension60, i32 0, i32 3
  store i8* %add.ptr, i8** %bmControls, align 8, !tbaa !87
  %21 = bitcast %struct.uvc_entity* %call34 to i8*
  %add.ptr61 = getelementptr inbounds i8, i8* %21, i64 328
  %idx.ext = zext i32 %cond21 to i64
  %add.ptr62 = getelementptr inbounds i8, i8* %add.ptr61, i64 %idx.ext
  %22 = getelementptr inbounds %struct.uvc_entity, %struct.uvc_entity* %call34, i32 0, i32 11
  %extension63 = bitcast %union.anon.58* %22 to %struct.anon.64*
  %bmControlsType = getelementptr inbounds %struct.anon.64, %struct.anon.64* %extension63, i32 0, i32 4
  store i8* %add.ptr62, i8** %bmControlsType, align 8, !tbaa !87
  %mul65 = mul i32 2, %cond21
  %conv66 = zext i32 %mul65 to i64
  %23 = getelementptr inbounds %struct.uvc_entity, %struct.uvc_entity* %call34, i32 0, i32 11
  %extension68 = bitcast %union.anon.58* %23 to %struct.anon.64*
  %bmControls69 = getelementptr inbounds %struct.anon.64, %struct.anon.64* %extension68, i32 0, i32 3
  %24 = load i8*, i8** %bmControls69, align 8, !tbaa !87
  %add70 = add i32 23, %cond
  %idxprom71 = zext i32 %add70 to i64
  %arrayidx72 = getelementptr inbounds i8, i8* %buffer, i64 %idxprom71
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %24, i8* %arrayidx72, i64 %conv66, i32 1, i1 false)
  %add74 = add i32 24, %cond
  %mul75 = mul i32 2, %cond21
  %add76 = add i32 %add74, %mul75
  %idxprom77 = zext i32 %add76 to i64
  %arrayidx78 = getelementptr inbounds i8, i8* %buffer, i64 %idxprom77
  %25 = load i8, i8* %arrayidx78, align 1, !tbaa !87
  %conv79 = zext i8 %25 to i32
  %cmp80 = icmp ne i32 %conv79, 0
  br i1 %cmp80, label %if.then82, label %if.else91

if.then82:                                        ; preds = %if.end48
  %add83 = add i32 24, %cond
  %mul84 = mul i32 2, %cond21
  %add85 = add i32 %add83, %mul84
  %idxprom86 = zext i32 %add85 to i64
  %arrayidx87 = getelementptr inbounds i8, i8* %buffer, i64 %idxprom86
  %26 = load i8, i8* %arrayidx87, align 1, !tbaa !87
  %conv88 = zext i8 %26 to i32
  %name = getelementptr inbounds %struct.uvc_entity, %struct.uvc_entity* %call34, i32 0, i32 5
  %arraydecay89 = getelementptr inbounds [64 x i8], [64 x i8]* %name, i32 0, i32 0
  %call90 = call i32 @usb_string(%struct.usb_device* %0, i32 %conv88, i8* %arraydecay89, i64 64)
  br label %if.end97

if.else91:                                        ; preds = %if.end48
  %name92 = getelementptr inbounds %struct.uvc_entity, %struct.uvc_entity* %call34, i32 0, i32 5
  %arraydecay93 = getelementptr inbounds [64 x i8], [64 x i8]* %name92, i32 0, i32 0
  %arrayidx94 = getelementptr inbounds i8, i8* %buffer, i64 3
  %27 = load i8, i8* %arrayidx94, align 1, !tbaa !87
  %conv95 = zext i8 %27 to i32
  %call96 = call i32 (i8*, i8*, ...) @sprintf(i8* %arraydecay93, i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.18, i32 0, i32 0), i32 %conv95)
  br label %if.end97

if.end97:                                         ; preds = %if.else91, %if.then82
  %list = getelementptr inbounds %struct.uvc_entity, %struct.uvc_entity* %call34, i32 0, i32 0
  %entities = getelementptr inbounds %struct.uvc_device, %struct.uvc_device* %dev, i32 0, i32 12
  call void @list_add_tail(%struct.list_head* %list, %struct.list_head* %entities)
  br label %cleanup

cleanup:                                          ; preds = %if.end97, %entry, %lor.lhs.false, %sw.bb, %if.then27, %do.body, %if.end30
  %retval.0 = phi i32 [ -12, %if.end30 ], [ 0, %entry ], [ 1, %if.end97 ], [ 0, %lor.lhs.false ], [ 0, %sw.bb ], [ 0, %if.then27 ], [ 0, %do.body ]
  ret i32 %retval.0
}

; Function Attrs: nounwind uwtable
define internal i32 @uvc_parse_standard_control(%struct.uvc_device* %dev, i8* %buffer, i32 %buflen) #1 {
entry:
  %udev1 = getelementptr inbounds %struct.uvc_device, %struct.uvc_device* %dev, i32 0, i32 0
  %0 = load %struct.usb_device*, %struct.usb_device** %udev1, align 8, !tbaa !32
  %intf2 = getelementptr inbounds %struct.uvc_device, %struct.uvc_device* %dev, i32 0, i32 1
  %1 = load %struct.usb_interface*, %struct.usb_interface** %intf2, align 8, !tbaa !40
  %cur_altsetting = getelementptr inbounds %struct.usb_interface, %struct.usb_interface* %1, i32 0, i32 1
  %2 = load %struct.usb_host_interface*, %struct.usb_host_interface** %cur_altsetting, align 8, !tbaa !41
  %arrayidx = getelementptr inbounds i8, i8* %buffer, i64 2
  %3 = load i8, i8* %arrayidx, align 1, !tbaa !87
  %conv = zext i8 %3 to i32
  br label %NodeBlock10

NodeBlock10:                                      ; preds = %entry
  %Pivot11 = icmp slt i32 %conv, 4
  br i1 %Pivot11, label %NodeBlock2, label %NodeBlock8

NodeBlock8:                                       ; preds = %NodeBlock10
  %Pivot9 = icmp slt i32 %conv, 5
  br i1 %Pivot9, label %sw.bb317, label %NodeBlock6

NodeBlock6:                                       ; preds = %NodeBlock8
  %Pivot7 = icmp slt i32 %conv, 6
  br i1 %Pivot7, label %sw.bb384, label %LeafBlock4

LeafBlock4:                                       ; preds = %NodeBlock6
  %SwitchLeaf5 = icmp eq i32 %conv, 6
  br i1 %SwitchLeaf5, label %sw.bb484, label %NewDefault

NodeBlock2:                                       ; preds = %NodeBlock10
  %Pivot3 = icmp slt i32 %conv, 2
  br i1 %Pivot3, label %LeafBlock, label %NodeBlock

NodeBlock:                                        ; preds = %NodeBlock2
  %Pivot = icmp slt i32 %conv, 3
  br i1 %Pivot, label %sw.bb37, label %sw.bb238

LeafBlock:                                        ; preds = %NodeBlock2
  %SwitchLeaf = icmp eq i32 %conv, 1
  br i1 %SwitchLeaf, label %sw.bb, label %NewDefault

sw.bb:                                            ; preds = %LeafBlock
  %cmp = icmp sge i32 %buflen, 12
  br i1 %cmp, label %cond.true, label %cond.end

cond.true:                                        ; preds = %sw.bb
  %arrayidx4 = getelementptr inbounds i8, i8* %buffer, i64 11
  %4 = load i8, i8* %arrayidx4, align 1, !tbaa !87
  %conv5 = zext i8 %4 to i32
  br label %cond.end

cond.end:                                         ; preds = %sw.bb, %cond.true
  %cond = phi i32 [ %conv5, %cond.true ], [ 0, %sw.bb ]
  %cmp6 = icmp slt i32 %buflen, 12
  %add = add i32 12, %cond
  %cmp8 = icmp ult i32 %buflen, %add
  %or.cond = or i1 %cmp6, %cmp8
  br i1 %or.cond, label %do.body, label %if.end12

do.body:                                          ; preds = %cond.end
  %5 = load i32, i32* @uvc_trace_param, align 4, !tbaa !23
  %and = and i32 %5, 2
  %tobool = icmp ne i32 %and, 0
  br i1 %tobool, label %if.then10, label %cleanup

if.then10:                                        ; preds = %do.body
  %devnum = getelementptr inbounds %struct.usb_device, %struct.usb_device* %0, i32 0, i32 0
  %6 = load i32, i32* %devnum, align 8, !tbaa !99
  %desc = getelementptr inbounds %struct.usb_host_interface, %struct.usb_host_interface* %2, i32 0, i32 0
  %bInterfaceNumber = getelementptr inbounds %struct.usb_interface_descriptor, %struct.usb_interface_descriptor* %desc, i32 0, i32 2
  %7 = load i8, i8* %bInterfaceNumber, align 2, !tbaa !56
  %conv11 = zext i8 %7 to i32
  %call = call i32 (i8*, ...) @printk(i8* getelementptr inbounds ([62 x i8], [62 x i8]* @.str.19, i32 0, i32 0), i32 %6, i32 %conv11)
  br label %cleanup

if.end12:                                         ; preds = %cond.end
  %arrayidx13 = getelementptr inbounds i8, i8* %buffer, i64 3
  %call14 = call zeroext i16 @get_unaligned_le16(i8* %arrayidx13)
  %uvc_version = getelementptr inbounds %struct.uvc_device, %struct.uvc_device* %dev, i32 0, i32 10
  store i16 %call14, i16* %uvc_version, align 8, !tbaa !66
  %arrayidx15 = getelementptr inbounds i8, i8* %buffer, i64 7
  %call16 = call i32 @get_unaligned_le32(i8* %arrayidx15)
  %clock_frequency = getelementptr inbounds %struct.uvc_device, %struct.uvc_device* %dev, i32 0, i32 11
  store i32 %call16, i32* %clock_frequency, align 4, !tbaa !101
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %if.end12
  %i.0 = phi i32 [ 0, %if.end12 ], [ %inc, %for.inc ]
  %cmp17 = icmp ult i32 %i.0, %cond
  br i1 %cmp17, label %for.body, label %cleanup

for.body:                                         ; preds = %for.cond
  %add19 = add i32 12, %i.0
  %idxprom = zext i32 %add19 to i64
  %arrayidx20 = getelementptr inbounds i8, i8* %buffer, i64 %idxprom
  %8 = load i8, i8* %arrayidx20, align 1, !tbaa !87
  %conv21 = zext i8 %8 to i32
  %call22 = call %struct.usb_interface* @usb_ifnum_to_if(%struct.usb_device* %0, i32 %conv21)
  %cmp23 = icmp eq %struct.usb_interface* %call22, null
  br i1 %cmp23, label %do.body26, label %if.end35

do.body26:                                        ; preds = %for.body
  %9 = load i32, i32* @uvc_trace_param, align 4, !tbaa !23
  %and27 = and i32 %9, 2
  %tobool28 = icmp ne i32 %and27, 0
  br i1 %tobool28, label %if.then29, label %for.inc

if.then29:                                        ; preds = %do.body26
  %devnum30 = getelementptr inbounds %struct.usb_device, %struct.usb_device* %0, i32 0, i32 0
  %10 = load i32, i32* %devnum30, align 8, !tbaa !99
  %call31 = call i32 (i8*, ...) @printk(i8* getelementptr inbounds ([51 x i8], [51 x i8]* @.str.20, i32 0, i32 0), i32 %10, i32 %i.0)
  br label %for.inc

if.end35:                                         ; preds = %for.body
  %call36 = call i32 @uvc_parse_streaming(%struct.uvc_device* %dev, %struct.usb_interface* %call22)
  br label %for.inc

for.inc:                                          ; preds = %do.body26, %if.then29, %if.end35
  %inc = add i32 %i.0, 1
  br label %for.cond

sw.bb37:                                          ; preds = %NodeBlock
  %cmp38 = icmp slt i32 %buflen, 8
  br i1 %cmp38, label %do.body41, label %if.end53

do.body41:                                        ; preds = %sw.bb37
  %11 = load i32, i32* @uvc_trace_param, align 4, !tbaa !23
  %and42 = and i32 %11, 2
  %tobool43 = icmp ne i32 %and42, 0
  br i1 %tobool43, label %if.then44, label %cleanup

if.then44:                                        ; preds = %do.body41
  %devnum45 = getelementptr inbounds %struct.usb_device, %struct.usb_device* %0, i32 0, i32 0
  %12 = load i32, i32* %devnum45, align 8, !tbaa !99
  %desc46 = getelementptr inbounds %struct.usb_host_interface, %struct.usb_host_interface* %2, i32 0, i32 0
  %bInterfaceNumber47 = getelementptr inbounds %struct.usb_interface_descriptor, %struct.usb_interface_descriptor* %desc46, i32 0, i32 2
  %13 = load i8, i8* %bInterfaceNumber47, align 2, !tbaa !56
  %conv48 = zext i8 %13 to i32
  %call49 = call i32 (i8*, ...) @printk(i8* getelementptr inbounds ([70 x i8], [70 x i8]* @.str.21, i32 0, i32 0), i32 %12, i32 %conv48)
  br label %cleanup

if.end53:                                         ; preds = %sw.bb37
  %arrayidx54 = getelementptr inbounds i8, i8* %buffer, i64 4
  %call55 = call zeroext i16 @get_unaligned_le16(i8* %arrayidx54)
  %conv56 = zext i16 %call55 to i32
  %and57 = and i32 %conv56, 65280
  %cmp58 = icmp eq i32 %and57, 0
  br i1 %cmp58, label %do.body61, label %if.end76

do.body61:                                        ; preds = %if.end53
  %14 = load i32, i32* @uvc_trace_param, align 4, !tbaa !23
  %and62 = and i32 %14, 2
  %tobool63 = icmp ne i32 %and62, 0
  br i1 %tobool63, label %if.then64, label %cleanup

if.then64:                                        ; preds = %do.body61
  %devnum65 = getelementptr inbounds %struct.usb_device, %struct.usb_device* %0, i32 0, i32 0
  %15 = load i32, i32* %devnum65, align 8, !tbaa !99
  %desc66 = getelementptr inbounds %struct.usb_host_interface, %struct.usb_host_interface* %2, i32 0, i32 0
  %bInterfaceNumber67 = getelementptr inbounds %struct.usb_interface_descriptor, %struct.usb_interface_descriptor* %desc66, i32 0, i32 2
  %16 = load i8, i8* %bInterfaceNumber67, align 2, !tbaa !56
  %conv68 = zext i8 %16 to i32
  %arrayidx69 = getelementptr inbounds i8, i8* %buffer, i64 3
  %17 = load i8, i8* %arrayidx69, align 1, !tbaa !87
  %conv70 = zext i8 %17 to i32
  %conv71 = zext i16 %call55 to i32
  %call72 = call i32 (i8*, ...) @printk(i8* getelementptr inbounds ([101 x i8], [101 x i8]* @.str.22, i32 0, i32 0), i32 %15, i32 %conv68, i32 %conv70, i32 %conv71)
  br label %cleanup

if.end76:                                         ; preds = %if.end53
  %conv77 = zext i16 %call55 to i32
  %cmp78 = icmp eq i32 %conv77, 513
  br i1 %cmp78, label %if.then80, label %if.else

if.then80:                                        ; preds = %if.end76
  %cmp81 = icmp sge i32 %buflen, 15
  br i1 %cmp81, label %cond.true83, label %if.end113

cond.true83:                                      ; preds = %if.then80
  %arrayidx84 = getelementptr inbounds i8, i8* %buffer, i64 14
  %18 = load i8, i8* %arrayidx84, align 1, !tbaa !87
  %conv85 = zext i8 %18 to i32
  br label %if.end113

if.else:                                          ; preds = %if.end76
  %conv89 = zext i16 %call55 to i32
  %cmp90 = icmp eq i32 %conv89, 514
  br i1 %cmp90, label %if.then92, label %if.end113

if.then92:                                        ; preds = %if.else
  %cmp93 = icmp sge i32 %buflen, 9
  br i1 %cmp93, label %cond.true95, label %cond.end99

cond.true95:                                      ; preds = %if.then92
  %arrayidx96 = getelementptr inbounds i8, i8* %buffer, i64 8
  %19 = load i8, i8* %arrayidx96, align 1, !tbaa !87
  %conv97 = zext i8 %19 to i32
  br label %cond.end99

cond.end99:                                       ; preds = %if.then92, %cond.true95
  %cond100 = phi i32 [ %conv97, %cond.true95 ], [ 0, %if.then92 ]
  %add101 = add i32 10, %cond100
  %cmp102 = icmp uge i32 %buflen, %add101
  br i1 %cmp102, label %cond.true104, label %if.end113

cond.true104:                                     ; preds = %cond.end99
  %add105 = add i32 9, %cond100
  %idxprom106 = zext i32 %add105 to i64
  %arrayidx107 = getelementptr inbounds i8, i8* %buffer, i64 %idxprom106
  %20 = load i8, i8* %arrayidx107, align 1, !tbaa !87
  %conv108 = zext i8 %20 to i32
  br label %if.end113

if.end113:                                        ; preds = %if.else, %cond.end99, %cond.true104, %cond.true83, %if.then80
  %p.1 = phi i32 [ 0, %if.then80 ], [ 0, %cond.true83 ], [ 0, %if.else ], [ %conv108, %cond.true104 ], [ 0, %cond.end99 ]
  %n.1 = phi i32 [ %conv85, %cond.true83 ], [ 0, %if.then80 ], [ 0, %if.else ], [ %cond100, %cond.end99 ], [ %cond100, %cond.true104 ]
  %len.1 = phi i32 [ 15, %if.then80 ], [ 15, %cond.true83 ], [ 8, %if.else ], [ 10, %cond.end99 ], [ 10, %cond.true104 ]
  %add114 = add i32 %len.1, %n.1
  %add115 = add i32 %add114, %p.1
  %cmp116 = icmp ult i32 %buflen, %add115
  br i1 %cmp116, label %do.body119, label %if.end131

do.body119:                                       ; preds = %if.end113
  %21 = load i32, i32* @uvc_trace_param, align 4, !tbaa !23
  %and120 = and i32 %21, 2
  %tobool121 = icmp ne i32 %and120, 0
  br i1 %tobool121, label %if.then122, label %cleanup

if.then122:                                       ; preds = %do.body119
  %devnum123 = getelementptr inbounds %struct.usb_device, %struct.usb_device* %0, i32 0, i32 0
  %22 = load i32, i32* %devnum123, align 8, !tbaa !99
  %desc124 = getelementptr inbounds %struct.usb_host_interface, %struct.usb_host_interface* %2, i32 0, i32 0
  %bInterfaceNumber125 = getelementptr inbounds %struct.usb_interface_descriptor, %struct.usb_interface_descriptor* %desc124, i32 0, i32 2
  %23 = load i8, i8* %bInterfaceNumber125, align 2, !tbaa !56
  %conv126 = zext i8 %23 to i32
  %call127 = call i32 (i8*, ...) @printk(i8* getelementptr inbounds ([70 x i8], [70 x i8]* @.str.21, i32 0, i32 0), i32 %22, i32 %conv126)
  br label %cleanup

if.end131:                                        ; preds = %if.end113
  %conv132 = zext i16 %call55 to i32
  %conv133 = trunc i32 %conv132 to i16
  %arrayidx134 = getelementptr inbounds i8, i8* %buffer, i64 3
  %24 = load i8, i8* %arrayidx134, align 1, !tbaa !87
  %add135 = add i32 %n.1, %p.1
  %call136 = call %struct.uvc_entity* @uvc_alloc_entity(i16 zeroext %conv133, i8 zeroext %24, i32 1, i32 %add135)
  %cmp137 = icmp eq %struct.uvc_entity* %call136, null
  br i1 %cmp137, label %cleanup, label %if.end140

if.end140:                                        ; preds = %if.end131
  %type141 = getelementptr inbounds %struct.uvc_entity, %struct.uvc_entity* %call136, i32 0, i32 4
  %25 = load i16, i16* %type141, align 2, !tbaa !92
  %conv142 = zext i16 %25 to i32
  %and143 = and i32 %conv142, 32767
  %cmp144 = icmp eq i32 %and143, 513
  br i1 %cmp144, label %if.then146, label %if.else162

if.then146:                                       ; preds = %if.end140
  %conv147 = trunc i32 %n.1 to i8
  %26 = getelementptr inbounds %struct.uvc_entity, %struct.uvc_entity* %call136, i32 0, i32 11
  %camera = bitcast %union.anon.58* %26 to %struct.anon.59*
  %bControlSize = getelementptr inbounds %struct.anon.59, %struct.anon.59* %camera, i32 0, i32 3
  store i8 %conv147, i8* %bControlSize, align 2, !tbaa !87
  %27 = bitcast %struct.uvc_entity* %call136 to i8*
  %add.ptr = getelementptr inbounds i8, i8* %27, i64 328
  %28 = getelementptr inbounds %struct.uvc_entity, %struct.uvc_entity* %call136, i32 0, i32 11
  %camera148 = bitcast %union.anon.58* %28 to %struct.anon.59*
  %bmControls = getelementptr inbounds %struct.anon.59, %struct.anon.59* %camera148, i32 0, i32 4
  store i8* %add.ptr, i8** %bmControls, align 8, !tbaa !87
  %arrayidx149 = getelementptr inbounds i8, i8* %buffer, i64 8
  %call150 = call zeroext i16 @get_unaligned_le16(i8* %arrayidx149)
  %29 = getelementptr inbounds %struct.uvc_entity, %struct.uvc_entity* %call136, i32 0, i32 11
  %camera151 = bitcast %union.anon.58* %29 to %struct.anon.59*
  %wObjectiveFocalLengthMin = getelementptr inbounds %struct.anon.59, %struct.anon.59* %camera151, i32 0, i32 0
  store i16 %call150, i16* %wObjectiveFocalLengthMin, align 8, !tbaa !87
  %arrayidx152 = getelementptr inbounds i8, i8* %buffer, i64 10
  %call153 = call zeroext i16 @get_unaligned_le16(i8* %arrayidx152)
  %30 = getelementptr inbounds %struct.uvc_entity, %struct.uvc_entity* %call136, i32 0, i32 11
  %camera154 = bitcast %union.anon.58* %30 to %struct.anon.59*
  %wObjectiveFocalLengthMax = getelementptr inbounds %struct.anon.59, %struct.anon.59* %camera154, i32 0, i32 1
  store i16 %call153, i16* %wObjectiveFocalLengthMax, align 2, !tbaa !87
  %arrayidx155 = getelementptr inbounds i8, i8* %buffer, i64 12
  %call156 = call zeroext i16 @get_unaligned_le16(i8* %arrayidx155)
  %31 = getelementptr inbounds %struct.uvc_entity, %struct.uvc_entity* %call136, i32 0, i32 11
  %camera157 = bitcast %union.anon.58* %31 to %struct.anon.59*
  %wOcularFocalLength = getelementptr inbounds %struct.anon.59, %struct.anon.59* %camera157, i32 0, i32 2
  store i16 %call156, i16* %wOcularFocalLength, align 4, !tbaa !87
  %conv158 = zext i32 %n.1 to i64
  %32 = getelementptr inbounds %struct.uvc_entity, %struct.uvc_entity* %call136, i32 0, i32 11
  %camera159 = bitcast %union.anon.58* %32 to %struct.anon.59*
  %bmControls160 = getelementptr inbounds %struct.anon.59, %struct.anon.59* %camera159, i32 0, i32 4
  %33 = load i8*, i8** %bmControls160, align 8, !tbaa !87
  %arrayidx161 = getelementptr inbounds i8, i8* %buffer, i64 15
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %33, i8* %arrayidx161, i64 %conv158, i32 1, i1 false)
  br label %if.end196

if.else162:                                       ; preds = %if.end140
  %type163 = getelementptr inbounds %struct.uvc_entity, %struct.uvc_entity* %call136, i32 0, i32 4
  %34 = load i16, i16* %type163, align 2, !tbaa !92
  %conv164 = zext i16 %34 to i32
  %and165 = and i32 %conv164, 32767
  %cmp166 = icmp eq i32 %and165, 514
  br i1 %cmp166, label %if.then168, label %if.end196

if.then168:                                       ; preds = %if.else162
  %conv169 = trunc i32 %n.1 to i8
  %35 = getelementptr inbounds %struct.uvc_entity, %struct.uvc_entity* %call136, i32 0, i32 11
  %media = bitcast %union.anon.58* %35 to %struct.anon.60*
  %bControlSize170 = getelementptr inbounds %struct.anon.60, %struct.anon.60* %media, i32 0, i32 0
  store i8 %conv169, i8* %bControlSize170, align 8, !tbaa !87
  %36 = bitcast %struct.uvc_entity* %call136 to i8*
  %add.ptr171 = getelementptr inbounds i8, i8* %36, i64 328
  %37 = getelementptr inbounds %struct.uvc_entity, %struct.uvc_entity* %call136, i32 0, i32 11
  %media172 = bitcast %union.anon.58* %37 to %struct.anon.60*
  %bmControls173 = getelementptr inbounds %struct.anon.60, %struct.anon.60* %media172, i32 0, i32 1
  store i8* %add.ptr171, i8** %bmControls173, align 8, !tbaa !87
  %conv174 = trunc i32 %p.1 to i8
  %38 = getelementptr inbounds %struct.uvc_entity, %struct.uvc_entity* %call136, i32 0, i32 11
  %media175 = bitcast %union.anon.58* %38 to %struct.anon.60*
  %bTransportModeSize = getelementptr inbounds %struct.anon.60, %struct.anon.60* %media175, i32 0, i32 2
  store i8 %conv174, i8* %bTransportModeSize, align 8, !tbaa !87
  %39 = bitcast %struct.uvc_entity* %call136 to i8*
  %add.ptr176 = getelementptr inbounds i8, i8* %39, i64 328
  %idx.ext = zext i32 %n.1 to i64
  %add.ptr177 = getelementptr inbounds i8, i8* %add.ptr176, i64 %idx.ext
  %40 = getelementptr inbounds %struct.uvc_entity, %struct.uvc_entity* %call136, i32 0, i32 11
  %media178 = bitcast %union.anon.58* %40 to %struct.anon.60*
  %bmTransportModes = getelementptr inbounds %struct.anon.60, %struct.anon.60* %media178, i32 0, i32 3
  store i8* %add.ptr177, i8** %bmTransportModes, align 8, !tbaa !87
  %conv180 = zext i32 %n.1 to i64
  %41 = getelementptr inbounds %struct.uvc_entity, %struct.uvc_entity* %call136, i32 0, i32 11
  %media182 = bitcast %union.anon.58* %41 to %struct.anon.60*
  %bmControls183 = getelementptr inbounds %struct.anon.60, %struct.anon.60* %media182, i32 0, i32 1
  %42 = load i8*, i8** %bmControls183, align 8, !tbaa !87
  %arrayidx184 = getelementptr inbounds i8, i8* %buffer, i64 9
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %42, i8* %arrayidx184, i64 %conv180, i32 1, i1 false)
  %conv187 = zext i32 %p.1 to i64
  %43 = getelementptr inbounds %struct.uvc_entity, %struct.uvc_entity* %call136, i32 0, i32 11
  %media189 = bitcast %union.anon.58* %43 to %struct.anon.60*
  %bmTransportModes190 = getelementptr inbounds %struct.anon.60, %struct.anon.60* %media189, i32 0, i32 3
  %44 = load i8*, i8** %bmTransportModes190, align 8, !tbaa !87
  %add191 = add i32 10, %n.1
  %idxprom192 = zext i32 %add191 to i64
  %arrayidx193 = getelementptr inbounds i8, i8* %buffer, i64 %idxprom192
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %44, i8* %arrayidx193, i64 %conv187, i32 1, i1 false)
  br label %if.end196

if.end196:                                        ; preds = %if.else162, %if.then168, %if.then146
  %arrayidx197 = getelementptr inbounds i8, i8* %buffer, i64 7
  %45 = load i8, i8* %arrayidx197, align 1, !tbaa !87
  %conv198 = zext i8 %45 to i32
  %cmp199 = icmp ne i32 %conv198, 0
  br i1 %cmp199, label %if.then201, label %if.else205

if.then201:                                       ; preds = %if.end196
  %arrayidx202 = getelementptr inbounds i8, i8* %buffer, i64 7
  %46 = load i8, i8* %arrayidx202, align 1, !tbaa !87
  %conv203 = zext i8 %46 to i32
  %name = getelementptr inbounds %struct.uvc_entity, %struct.uvc_entity* %call136, i32 0, i32 5
  %arraydecay = getelementptr inbounds [64 x i8], [64 x i8]* %name, i32 0, i32 0
  %call204 = call i32 @usb_string(%struct.usb_device* %0, i32 %conv203, i8* %arraydecay, i64 64)
  br label %if.end237

if.else205:                                       ; preds = %if.end196
  %type206 = getelementptr inbounds %struct.uvc_entity, %struct.uvc_entity* %call136, i32 0, i32 4
  %47 = load i16, i16* %type206, align 2, !tbaa !92
  %conv207 = zext i16 %47 to i32
  %and208 = and i32 %conv207, 32767
  %cmp209 = icmp eq i32 %and208, 513
  br i1 %cmp209, label %if.then211, label %if.else217

if.then211:                                       ; preds = %if.else205
  %name212 = getelementptr inbounds %struct.uvc_entity, %struct.uvc_entity* %call136, i32 0, i32 5
  %arraydecay213 = getelementptr inbounds [64 x i8], [64 x i8]* %name212, i32 0, i32 0
  %arrayidx214 = getelementptr inbounds i8, i8* %buffer, i64 3
  %48 = load i8, i8* %arrayidx214, align 1, !tbaa !87
  %conv215 = zext i8 %48 to i32
  %call216 = call i32 (i8*, i8*, ...) @sprintf(i8* %arraydecay213, i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.23, i32 0, i32 0), i32 %conv215)
  br label %if.end237

if.else217:                                       ; preds = %if.else205
  %type218 = getelementptr inbounds %struct.uvc_entity, %struct.uvc_entity* %call136, i32 0, i32 4
  %49 = load i16, i16* %type218, align 2, !tbaa !92
  %conv219 = zext i16 %49 to i32
  %and220 = and i32 %conv219, 32767
  %cmp221 = icmp eq i32 %and220, 514
  %name224 = getelementptr inbounds %struct.uvc_entity, %struct.uvc_entity* %call136, i32 0, i32 5
  %arraydecay225 = getelementptr inbounds [64 x i8], [64 x i8]* %name224, i32 0, i32 0
  %arrayidx226 = getelementptr inbounds i8, i8* %buffer, i64 3
  %50 = load i8, i8* %arrayidx226, align 1, !tbaa !87
  %conv227 = zext i8 %50 to i32
  br i1 %cmp221, label %if.then223, label %if.else229

if.then223:                                       ; preds = %if.else217
  %call228 = call i32 (i8*, i8*, ...) @sprintf(i8* %arraydecay225, i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.24, i32 0, i32 0), i32 %conv227)
  br label %if.end237

if.else229:                                       ; preds = %if.else217
  %call234 = call i32 (i8*, i8*, ...) @sprintf(i8* %arraydecay225, i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.25, i32 0, i32 0), i32 %conv227)
  br label %if.end237

if.end237:                                        ; preds = %if.then211, %if.else229, %if.then223, %if.then201
  %list = getelementptr inbounds %struct.uvc_entity, %struct.uvc_entity* %call136, i32 0, i32 0
  %entities = getelementptr inbounds %struct.uvc_device, %struct.uvc_device* %dev, i32 0, i32 12
  call void @list_add_tail(%struct.list_head* %list, %struct.list_head* %entities)
  br label %cleanup

sw.bb238:                                         ; preds = %NodeBlock
  %cmp239 = icmp slt i32 %buflen, 9
  br i1 %cmp239, label %do.body242, label %if.end254

do.body242:                                       ; preds = %sw.bb238
  %51 = load i32, i32* @uvc_trace_param, align 4, !tbaa !23
  %and243 = and i32 %51, 2
  %tobool244 = icmp ne i32 %and243, 0
  br i1 %tobool244, label %if.then245, label %cleanup

if.then245:                                       ; preds = %do.body242
  %devnum246 = getelementptr inbounds %struct.usb_device, %struct.usb_device* %0, i32 0, i32 0
  %52 = load i32, i32* %devnum246, align 8, !tbaa !99
  %desc247 = getelementptr inbounds %struct.usb_host_interface, %struct.usb_host_interface* %2, i32 0, i32 0
  %bInterfaceNumber248 = getelementptr inbounds %struct.usb_interface_descriptor, %struct.usb_interface_descriptor* %desc247, i32 0, i32 2
  %53 = load i8, i8* %bInterfaceNumber248, align 2, !tbaa !56
  %conv249 = zext i8 %53 to i32
  %call250 = call i32 (i8*, ...) @printk(i8* getelementptr inbounds ([71 x i8], [71 x i8]* @.str.26, i32 0, i32 0), i32 %52, i32 %conv249)
  br label %cleanup

if.end254:                                        ; preds = %sw.bb238
  %arrayidx255 = getelementptr inbounds i8, i8* %buffer, i64 4
  %call256 = call zeroext i16 @get_unaligned_le16(i8* %arrayidx255)
  %conv257 = zext i16 %call256 to i32
  %and258 = and i32 %conv257, 65280
  %cmp259 = icmp eq i32 %and258, 0
  br i1 %cmp259, label %do.body262, label %if.end277

do.body262:                                       ; preds = %if.end254
  %54 = load i32, i32* @uvc_trace_param, align 4, !tbaa !23
  %and263 = and i32 %54, 2
  %tobool264 = icmp ne i32 %and263, 0
  br i1 %tobool264, label %if.then265, label %cleanup

if.then265:                                       ; preds = %do.body262
  %devnum266 = getelementptr inbounds %struct.usb_device, %struct.usb_device* %0, i32 0, i32 0
  %55 = load i32, i32* %devnum266, align 8, !tbaa !99
  %desc267 = getelementptr inbounds %struct.usb_host_interface, %struct.usb_host_interface* %2, i32 0, i32 0
  %bInterfaceNumber268 = getelementptr inbounds %struct.usb_interface_descriptor, %struct.usb_interface_descriptor* %desc267, i32 0, i32 2
  %56 = load i8, i8* %bInterfaceNumber268, align 2, !tbaa !56
  %conv269 = zext i8 %56 to i32
  %arrayidx270 = getelementptr inbounds i8, i8* %buffer, i64 3
  %57 = load i8, i8* %arrayidx270, align 1, !tbaa !87
  %conv271 = zext i8 %57 to i32
  %conv272 = zext i16 %call256 to i32
  %call273 = call i32 (i8*, ...) @printk(i8* getelementptr inbounds ([102 x i8], [102 x i8]* @.str.27, i32 0, i32 0), i32 %55, i32 %conv269, i32 %conv271, i32 %conv272)
  br label %cleanup

if.end277:                                        ; preds = %if.end254
  %conv278 = zext i16 %call256 to i32
  %or = or i32 %conv278, 32768
  %conv279 = trunc i32 %or to i16
  %arrayidx280 = getelementptr inbounds i8, i8* %buffer, i64 3
  %58 = load i8, i8* %arrayidx280, align 1, !tbaa !87
  %call281 = call %struct.uvc_entity* @uvc_alloc_entity(i16 zeroext %conv279, i8 zeroext %58, i32 1, i32 0)
  %cmp282 = icmp eq %struct.uvc_entity* %call281, null
  br i1 %cmp282, label %cleanup, label %if.end285

if.end285:                                        ; preds = %if.end277
  %cmp288 = icmp uge i64 1, 64
  %baSourceID = getelementptr inbounds %struct.uvc_entity, %struct.uvc_entity* %call281, i32 0, i32 13
  %59 = load i8*, i8** %baSourceID, align 8, !tbaa !100
  %arrayidx291 = getelementptr inbounds i8, i8* %buffer, i64 7
  br i1 %cmp288, label %if.then290, label %if.else293

if.then290:                                       ; preds = %if.end285
  %call292 = call i8* @__memcpy(i8* %59, i8* %arrayidx291, i64 1)
  br label %if.end296

if.else293:                                       ; preds = %if.end285
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %59, i8* %arrayidx291, i64 1, i32 1, i1 false)
  br label %if.end296

if.end296:                                        ; preds = %if.else293, %if.then290
  %__ret287.0 = phi i8* [ %call292, %if.then290 ], [ %59, %if.else293 ]
  %arrayidx298 = getelementptr inbounds i8, i8* %buffer, i64 8
  %60 = load i8, i8* %arrayidx298, align 1, !tbaa !87
  %conv299 = zext i8 %60 to i32
  %cmp300 = icmp ne i32 %conv299, 0
  br i1 %cmp300, label %if.then302, label %if.else308

if.then302:                                       ; preds = %if.end296
  %arrayidx303 = getelementptr inbounds i8, i8* %buffer, i64 8
  %61 = load i8, i8* %arrayidx303, align 1, !tbaa !87
  %conv304 = zext i8 %61 to i32
  %name305 = getelementptr inbounds %struct.uvc_entity, %struct.uvc_entity* %call281, i32 0, i32 5
  %arraydecay306 = getelementptr inbounds [64 x i8], [64 x i8]* %name305, i32 0, i32 0
  %call307 = call i32 @usb_string(%struct.usb_device* %0, i32 %conv304, i8* %arraydecay306, i64 64)
  br label %if.end314

if.else308:                                       ; preds = %if.end296
  %name309 = getelementptr inbounds %struct.uvc_entity, %struct.uvc_entity* %call281, i32 0, i32 5
  %arraydecay310 = getelementptr inbounds [64 x i8], [64 x i8]* %name309, i32 0, i32 0
  %arrayidx311 = getelementptr inbounds i8, i8* %buffer, i64 3
  %62 = load i8, i8* %arrayidx311, align 1, !tbaa !87
  %conv312 = zext i8 %62 to i32
  %call313 = call i32 (i8*, i8*, ...) @sprintf(i8* %arraydecay310, i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.28, i32 0, i32 0), i32 %conv312)
  br label %if.end314

if.end314:                                        ; preds = %if.else308, %if.then302
  %list315 = getelementptr inbounds %struct.uvc_entity, %struct.uvc_entity* %call281, i32 0, i32 0
  %entities316 = getelementptr inbounds %struct.uvc_device, %struct.uvc_device* %dev, i32 0, i32 12
  call void @list_add_tail(%struct.list_head* %list315, %struct.list_head* %entities316)
  br label %cleanup

sw.bb317:                                         ; preds = %NodeBlock8
  %cmp318 = icmp sge i32 %buflen, 5
  br i1 %cmp318, label %cond.true320, label %cond.end324

cond.true320:                                     ; preds = %sw.bb317
  %arrayidx321 = getelementptr inbounds i8, i8* %buffer, i64 4
  %63 = load i8, i8* %arrayidx321, align 1, !tbaa !87
  %conv322 = zext i8 %63 to i32
  br label %cond.end324

cond.end324:                                      ; preds = %sw.bb317, %cond.true320
  %cond325 = phi i32 [ %conv322, %cond.true320 ], [ 0, %sw.bb317 ]
  %cmp326 = icmp slt i32 %buflen, 5
  %add329 = add i32 6, %cond325
  %cmp330 = icmp ult i32 %buflen, %add329
  %or.cond1 = or i1 %cmp326, %cmp330
  br i1 %or.cond1, label %do.body333, label %if.end345

do.body333:                                       ; preds = %cond.end324
  %64 = load i32, i32* @uvc_trace_param, align 4, !tbaa !23
  %and334 = and i32 %64, 2
  %tobool335 = icmp ne i32 %and334, 0
  br i1 %tobool335, label %if.then336, label %cleanup

if.then336:                                       ; preds = %do.body333
  %devnum337 = getelementptr inbounds %struct.usb_device, %struct.usb_device* %0, i32 0, i32 0
  %65 = load i32, i32* %devnum337, align 8, !tbaa !99
  %desc338 = getelementptr inbounds %struct.usb_host_interface, %struct.usb_host_interface* %2, i32 0, i32 0
  %bInterfaceNumber339 = getelementptr inbounds %struct.usb_interface_descriptor, %struct.usb_interface_descriptor* %desc338, i32 0, i32 2
  %66 = load i8, i8* %bInterfaceNumber339, align 2, !tbaa !56
  %conv340 = zext i8 %66 to i32
  %call341 = call i32 (i8*, ...) @printk(i8* getelementptr inbounds ([69 x i8], [69 x i8]* @.str.29, i32 0, i32 0), i32 %65, i32 %conv340)
  br label %cleanup

if.end345:                                        ; preds = %cond.end324
  %arrayidx346 = getelementptr inbounds i8, i8* %buffer, i64 2
  %67 = load i8, i8* %arrayidx346, align 1, !tbaa !87
  %conv347 = zext i8 %67 to i16
  %arrayidx348 = getelementptr inbounds i8, i8* %buffer, i64 3
  %68 = load i8, i8* %arrayidx348, align 1, !tbaa !87
  %add349 = add i32 %cond325, 1
  %call350 = call %struct.uvc_entity* @uvc_alloc_entity(i16 zeroext %conv347, i8 zeroext %68, i32 %add349, i32 0)
  %cmp351 = icmp eq %struct.uvc_entity* %call350, null
  br i1 %cmp351, label %cleanup, label %if.end354

if.end354:                                        ; preds = %if.end345
  %conv356 = zext i32 %cond325 to i64
  %baSourceID358 = getelementptr inbounds %struct.uvc_entity, %struct.uvc_entity* %call350, i32 0, i32 13
  %69 = load i8*, i8** %baSourceID358, align 8, !tbaa !100
  %arrayidx359 = getelementptr inbounds i8, i8* %buffer, i64 5
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %69, i8* %arrayidx359, i64 %conv356, i32 1, i1 false)
  %add361 = add i32 5, %cond325
  %idxprom362 = zext i32 %add361 to i64
  %arrayidx363 = getelementptr inbounds i8, i8* %buffer, i64 %idxprom362
  %70 = load i8, i8* %arrayidx363, align 1, !tbaa !87
  %conv364 = zext i8 %70 to i32
  %cmp365 = icmp ne i32 %conv364, 0
  br i1 %cmp365, label %if.then367, label %if.else375

if.then367:                                       ; preds = %if.end354
  %add368 = add i32 5, %cond325
  %idxprom369 = zext i32 %add368 to i64
  %arrayidx370 = getelementptr inbounds i8, i8* %buffer, i64 %idxprom369
  %71 = load i8, i8* %arrayidx370, align 1, !tbaa !87
  %conv371 = zext i8 %71 to i32
  %name372 = getelementptr inbounds %struct.uvc_entity, %struct.uvc_entity* %call350, i32 0, i32 5
  %arraydecay373 = getelementptr inbounds [64 x i8], [64 x i8]* %name372, i32 0, i32 0
  %call374 = call i32 @usb_string(%struct.usb_device* %0, i32 %conv371, i8* %arraydecay373, i64 64)
  br label %if.end381

if.else375:                                       ; preds = %if.end354
  %name376 = getelementptr inbounds %struct.uvc_entity, %struct.uvc_entity* %call350, i32 0, i32 5
  %arraydecay377 = getelementptr inbounds [64 x i8], [64 x i8]* %name376, i32 0, i32 0
  %arrayidx378 = getelementptr inbounds i8, i8* %buffer, i64 3
  %72 = load i8, i8* %arrayidx378, align 1, !tbaa !87
  %conv379 = zext i8 %72 to i32
  %call380 = call i32 (i8*, i8*, ...) @sprintf(i8* %arraydecay377, i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.30, i32 0, i32 0), i32 %conv379)
  br label %if.end381

if.end381:                                        ; preds = %if.else375, %if.then367
  %list382 = getelementptr inbounds %struct.uvc_entity, %struct.uvc_entity* %call350, i32 0, i32 0
  %entities383 = getelementptr inbounds %struct.uvc_device, %struct.uvc_device* %dev, i32 0, i32 12
  call void @list_add_tail(%struct.list_head* %list382, %struct.list_head* %entities383)
  br label %cleanup

sw.bb384:                                         ; preds = %NodeBlock6
  %cmp385 = icmp sge i32 %buflen, 8
  br i1 %cmp385, label %cond.true387, label %cond.end391

cond.true387:                                     ; preds = %sw.bb384
  %arrayidx388 = getelementptr inbounds i8, i8* %buffer, i64 7
  %73 = load i8, i8* %arrayidx388, align 1, !tbaa !87
  %conv389 = zext i8 %73 to i32
  br label %cond.end391

cond.end391:                                      ; preds = %sw.bb384, %cond.true387
  %cond392 = phi i32 [ %conv389, %cond.true387 ], [ 0, %sw.bb384 ]
  %uvc_version393 = getelementptr inbounds %struct.uvc_device, %struct.uvc_device* %dev, i32 0, i32 10
  %74 = load i16, i16* %uvc_version393, align 8, !tbaa !66
  %conv394 = zext i16 %74 to i32
  %cmp395 = icmp sge i32 %conv394, 272
  %75 = zext i1 %cmp395 to i64
  %cond397 = select i1 %cmp395, i32 10, i32 9
  %add398 = add i32 %cond397, %cond392
  %cmp399 = icmp ult i32 %buflen, %add398
  br i1 %cmp399, label %do.body402, label %if.end414

do.body402:                                       ; preds = %cond.end391
  %76 = load i32, i32* @uvc_trace_param, align 4, !tbaa !23
  %and403 = and i32 %76, 2
  %tobool404 = icmp ne i32 %and403, 0
  br i1 %tobool404, label %if.then405, label %cleanup

if.then405:                                       ; preds = %do.body402
  %devnum406 = getelementptr inbounds %struct.usb_device, %struct.usb_device* %0, i32 0, i32 0
  %77 = load i32, i32* %devnum406, align 8, !tbaa !99
  %desc407 = getelementptr inbounds %struct.usb_host_interface, %struct.usb_host_interface* %2, i32 0, i32 0
  %bInterfaceNumber408 = getelementptr inbounds %struct.usb_interface_descriptor, %struct.usb_interface_descriptor* %desc407, i32 0, i32 2
  %78 = load i8, i8* %bInterfaceNumber408, align 2, !tbaa !56
  %conv409 = zext i8 %78 to i32
  %call410 = call i32 (i8*, ...) @printk(i8* getelementptr inbounds ([71 x i8], [71 x i8]* @.str.31, i32 0, i32 0), i32 %77, i32 %conv409)
  br label %cleanup

if.end414:                                        ; preds = %cond.end391
  %arrayidx415 = getelementptr inbounds i8, i8* %buffer, i64 2
  %79 = load i8, i8* %arrayidx415, align 1, !tbaa !87
  %conv416 = zext i8 %79 to i16
  %arrayidx417 = getelementptr inbounds i8, i8* %buffer, i64 3
  %80 = load i8, i8* %arrayidx417, align 1, !tbaa !87
  %call418 = call %struct.uvc_entity* @uvc_alloc_entity(i16 zeroext %conv416, i8 zeroext %80, i32 2, i32 %cond392)
  %cmp419 = icmp eq %struct.uvc_entity* %call418, null
  br i1 %cmp419, label %cleanup, label %if.end422

if.end422:                                        ; preds = %if.end414
  %cmp425 = icmp uge i64 1, 64
  %baSourceID428 = getelementptr inbounds %struct.uvc_entity, %struct.uvc_entity* %call418, i32 0, i32 13
  %81 = load i8*, i8** %baSourceID428, align 8, !tbaa !100
  %arrayidx429 = getelementptr inbounds i8, i8* %buffer, i64 4
  br i1 %cmp425, label %if.then427, label %if.else431

if.then427:                                       ; preds = %if.end422
  %call430 = call i8* @__memcpy(i8* %81, i8* %arrayidx429, i64 1)
  br label %if.end434

if.else431:                                       ; preds = %if.end422
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %81, i8* %arrayidx429, i64 1, i32 1, i1 false)
  br label %if.end434

if.end434:                                        ; preds = %if.else431, %if.then427
  %__ret424.0 = phi i8* [ %call430, %if.then427 ], [ %81, %if.else431 ]
  %arrayidx436 = getelementptr inbounds i8, i8* %buffer, i64 5
  %call437 = call zeroext i16 @get_unaligned_le16(i8* %arrayidx436)
  %82 = getelementptr inbounds %struct.uvc_entity, %struct.uvc_entity* %call418, i32 0, i32 11
  %processing = bitcast %union.anon.58* %82 to %struct.anon.62*
  %wMaxMultiplier = getelementptr inbounds %struct.anon.62, %struct.anon.62* %processing, i32 0, i32 0
  store i16 %call437, i16* %wMaxMultiplier, align 8, !tbaa !87
  %arrayidx438 = getelementptr inbounds i8, i8* %buffer, i64 7
  %83 = load i8, i8* %arrayidx438, align 1, !tbaa !87
  %84 = getelementptr inbounds %struct.uvc_entity, %struct.uvc_entity* %call418, i32 0, i32 11
  %processing439 = bitcast %union.anon.58* %84 to %struct.anon.62*
  %bControlSize440 = getelementptr inbounds %struct.anon.62, %struct.anon.62* %processing439, i32 0, i32 1
  store i8 %83, i8* %bControlSize440, align 2, !tbaa !87
  %85 = bitcast %struct.uvc_entity* %call418 to i8*
  %add.ptr441 = getelementptr inbounds i8, i8* %85, i64 328
  %86 = getelementptr inbounds %struct.uvc_entity, %struct.uvc_entity* %call418, i32 0, i32 11
  %processing442 = bitcast %union.anon.58* %86 to %struct.anon.62*
  %bmControls443 = getelementptr inbounds %struct.anon.62, %struct.anon.62* %processing442, i32 0, i32 2
  store i8* %add.ptr441, i8** %bmControls443, align 8, !tbaa !87
  %conv445 = zext i32 %cond392 to i64
  %87 = getelementptr inbounds %struct.uvc_entity, %struct.uvc_entity* %call418, i32 0, i32 11
  %processing447 = bitcast %union.anon.58* %87 to %struct.anon.62*
  %bmControls448 = getelementptr inbounds %struct.anon.62, %struct.anon.62* %processing447, i32 0, i32 2
  %88 = load i8*, i8** %bmControls448, align 8, !tbaa !87
  %arrayidx449 = getelementptr inbounds i8, i8* %buffer, i64 8
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %88, i8* %arrayidx449, i64 %conv445, i32 1, i1 false)
  %uvc_version451 = getelementptr inbounds %struct.uvc_device, %struct.uvc_device* %dev, i32 0, i32 10
  %89 = load i16, i16* %uvc_version451, align 8, !tbaa !66
  %conv452 = zext i16 %89 to i32
  %cmp453 = icmp sge i32 %conv452, 272
  br i1 %cmp453, label %if.then455, label %if.end460

if.then455:                                       ; preds = %if.end434
  %add456 = add i32 9, %cond392
  %idxprom457 = zext i32 %add456 to i64
  %arrayidx458 = getelementptr inbounds i8, i8* %buffer, i64 %idxprom457
  %90 = load i8, i8* %arrayidx458, align 1, !tbaa !87
  %91 = getelementptr inbounds %struct.uvc_entity, %struct.uvc_entity* %call418, i32 0, i32 11
  %processing459 = bitcast %union.anon.58* %91 to %struct.anon.62*
  %bmVideoStandards = getelementptr inbounds %struct.anon.62, %struct.anon.62* %processing459, i32 0, i32 3
  store i8 %90, i8* %bmVideoStandards, align 8, !tbaa !87
  br label %if.end460

if.end460:                                        ; preds = %if.then455, %if.end434
  %add461 = add i32 8, %cond392
  %idxprom462 = zext i32 %add461 to i64
  %arrayidx463 = getelementptr inbounds i8, i8* %buffer, i64 %idxprom462
  %92 = load i8, i8* %arrayidx463, align 1, !tbaa !87
  %conv464 = zext i8 %92 to i32
  %cmp465 = icmp ne i32 %conv464, 0
  br i1 %cmp465, label %if.then467, label %if.else475

if.then467:                                       ; preds = %if.end460
  %add468 = add i32 8, %cond392
  %idxprom469 = zext i32 %add468 to i64
  %arrayidx470 = getelementptr inbounds i8, i8* %buffer, i64 %idxprom469
  %93 = load i8, i8* %arrayidx470, align 1, !tbaa !87
  %conv471 = zext i8 %93 to i32
  %name472 = getelementptr inbounds %struct.uvc_entity, %struct.uvc_entity* %call418, i32 0, i32 5
  %arraydecay473 = getelementptr inbounds [64 x i8], [64 x i8]* %name472, i32 0, i32 0
  %call474 = call i32 @usb_string(%struct.usb_device* %0, i32 %conv471, i8* %arraydecay473, i64 64)
  br label %if.end481

if.else475:                                       ; preds = %if.end460
  %name476 = getelementptr inbounds %struct.uvc_entity, %struct.uvc_entity* %call418, i32 0, i32 5
  %arraydecay477 = getelementptr inbounds [64 x i8], [64 x i8]* %name476, i32 0, i32 0
  %arrayidx478 = getelementptr inbounds i8, i8* %buffer, i64 3
  %94 = load i8, i8* %arrayidx478, align 1, !tbaa !87
  %conv479 = zext i8 %94 to i32
  %call480 = call i32 (i8*, i8*, ...) @sprintf(i8* %arraydecay477, i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.32, i32 0, i32 0), i32 %conv479)
  br label %if.end481

if.end481:                                        ; preds = %if.else475, %if.then467
  %list482 = getelementptr inbounds %struct.uvc_entity, %struct.uvc_entity* %call418, i32 0, i32 0
  %entities483 = getelementptr inbounds %struct.uvc_device, %struct.uvc_device* %dev, i32 0, i32 12
  call void @list_add_tail(%struct.list_head* %list482, %struct.list_head* %entities483)
  br label %cleanup

sw.bb484:                                         ; preds = %LeafBlock4
  %cmp485 = icmp sge i32 %buflen, 22
  br i1 %cmp485, label %cond.true487, label %cond.end491

cond.true487:                                     ; preds = %sw.bb484
  %arrayidx488 = getelementptr inbounds i8, i8* %buffer, i64 21
  %95 = load i8, i8* %arrayidx488, align 1, !tbaa !87
  %conv489 = zext i8 %95 to i32
  br label %cond.end491

cond.end491:                                      ; preds = %sw.bb484, %cond.true487
  %cond492 = phi i32 [ %conv489, %cond.true487 ], [ 0, %sw.bb484 ]
  %add493 = add i32 24, %cond492
  %cmp494 = icmp uge i32 %buflen, %add493
  br i1 %cmp494, label %cond.true496, label %cond.end502

cond.true496:                                     ; preds = %cond.end491
  %add497 = add i32 22, %cond492
  %idxprom498 = zext i32 %add497 to i64
  %arrayidx499 = getelementptr inbounds i8, i8* %buffer, i64 %idxprom498
  %96 = load i8, i8* %arrayidx499, align 1, !tbaa !87
  %conv500 = zext i8 %96 to i32
  br label %cond.end502

cond.end502:                                      ; preds = %cond.end491, %cond.true496
  %cond503 = phi i32 [ %conv500, %cond.true496 ], [ 0, %cond.end491 ]
  %add504 = add i32 24, %cond492
  %add505 = add i32 %add504, %cond503
  %cmp506 = icmp ult i32 %buflen, %add505
  br i1 %cmp506, label %do.body509, label %if.end521

do.body509:                                       ; preds = %cond.end502
  %97 = load i32, i32* @uvc_trace_param, align 4, !tbaa !23
  %and510 = and i32 %97, 2
  %tobool511 = icmp ne i32 %and510, 0
  br i1 %tobool511, label %if.then512, label %cleanup

if.then512:                                       ; preds = %do.body509
  %devnum513 = getelementptr inbounds %struct.usb_device, %struct.usb_device* %0, i32 0, i32 0
  %98 = load i32, i32* %devnum513, align 8, !tbaa !99
  %desc514 = getelementptr inbounds %struct.usb_host_interface, %struct.usb_host_interface* %2, i32 0, i32 0
  %bInterfaceNumber515 = getelementptr inbounds %struct.usb_interface_descriptor, %struct.usb_interface_descriptor* %desc514, i32 0, i32 2
  %99 = load i8, i8* %bInterfaceNumber515, align 2, !tbaa !56
  %conv516 = zext i8 %99 to i32
  %call517 = call i32 (i8*, ...) @printk(i8* getelementptr inbounds ([70 x i8], [70 x i8]* @.str.17, i32 0, i32 0), i32 %98, i32 %conv516)
  br label %cleanup

if.end521:                                        ; preds = %cond.end502
  %arrayidx522 = getelementptr inbounds i8, i8* %buffer, i64 2
  %100 = load i8, i8* %arrayidx522, align 1, !tbaa !87
  %conv523 = zext i8 %100 to i16
  %arrayidx524 = getelementptr inbounds i8, i8* %buffer, i64 3
  %101 = load i8, i8* %arrayidx524, align 1, !tbaa !87
  %add525 = add i32 %cond492, 1
  %call526 = call %struct.uvc_entity* @uvc_alloc_entity(i16 zeroext %conv523, i8 zeroext %101, i32 %add525, i32 %cond503)
  %cmp527 = icmp eq %struct.uvc_entity* %call526, null
  br i1 %cmp527, label %cleanup, label %if.end530

if.end530:                                        ; preds = %if.end521
  %cmp533 = icmp uge i64 16, 64
  %102 = getelementptr inbounds %struct.uvc_entity, %struct.uvc_entity* %call526, i32 0, i32 11
  %extension = bitcast %union.anon.58* %102 to %struct.anon.64*
  %guidExtensionCode = getelementptr inbounds %struct.anon.64, %struct.anon.64* %extension, i32 0, i32 0
  %arraydecay536 = getelementptr inbounds [16 x i8], [16 x i8]* %guidExtensionCode, i32 0, i32 0
  %arrayidx537 = getelementptr inbounds i8, i8* %buffer, i64 4
  br i1 %cmp533, label %if.then535, label %if.else539

if.then535:                                       ; preds = %if.end530
  %call538 = call i8* @__memcpy(i8* %arraydecay536, i8* %arrayidx537, i64 16)
  br label %if.end544

if.else539:                                       ; preds = %if.end530
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %arraydecay536, i8* %arrayidx537, i64 16, i32 1, i1 false)
  br label %if.end544

if.end544:                                        ; preds = %if.else539, %if.then535
  %__ret532.0 = phi i8* [ %call538, %if.then535 ], [ %arraydecay536, %if.else539 ]
  %arrayidx546 = getelementptr inbounds i8, i8* %buffer, i64 20
  %103 = load i8, i8* %arrayidx546, align 1, !tbaa !87
  %104 = getelementptr inbounds %struct.uvc_entity, %struct.uvc_entity* %call526, i32 0, i32 11
  %extension547 = bitcast %union.anon.58* %104 to %struct.anon.64*
  %bNumControls = getelementptr inbounds %struct.anon.64, %struct.anon.64* %extension547, i32 0, i32 1
  store i8 %103, i8* %bNumControls, align 8, !tbaa !87
  %conv549 = zext i32 %cond492 to i64
  %baSourceID551 = getelementptr inbounds %struct.uvc_entity, %struct.uvc_entity* %call526, i32 0, i32 13
  %105 = load i8*, i8** %baSourceID551, align 8, !tbaa !100
  %arrayidx552 = getelementptr inbounds i8, i8* %buffer, i64 22
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %105, i8* %arrayidx552, i64 %conv549, i32 1, i1 false)
  %add554 = add i32 22, %cond492
  %idxprom555 = zext i32 %add554 to i64
  %arrayidx556 = getelementptr inbounds i8, i8* %buffer, i64 %idxprom555
  %106 = load i8, i8* %arrayidx556, align 1, !tbaa !87
  %107 = getelementptr inbounds %struct.uvc_entity, %struct.uvc_entity* %call526, i32 0, i32 11
  %extension557 = bitcast %union.anon.58* %107 to %struct.anon.64*
  %bControlSize558 = getelementptr inbounds %struct.anon.64, %struct.anon.64* %extension557, i32 0, i32 2
  store i8 %106, i8* %bControlSize558, align 1, !tbaa !87
  %108 = bitcast %struct.uvc_entity* %call526 to i8*
  %add.ptr559 = getelementptr inbounds i8, i8* %108, i64 328
  %109 = getelementptr inbounds %struct.uvc_entity, %struct.uvc_entity* %call526, i32 0, i32 11
  %extension560 = bitcast %union.anon.58* %109 to %struct.anon.64*
  %bmControls561 = getelementptr inbounds %struct.anon.64, %struct.anon.64* %extension560, i32 0, i32 3
  store i8* %add.ptr559, i8** %bmControls561, align 8, !tbaa !87
  %conv563 = zext i32 %cond503 to i64
  %110 = getelementptr inbounds %struct.uvc_entity, %struct.uvc_entity* %call526, i32 0, i32 11
  %extension565 = bitcast %union.anon.58* %110 to %struct.anon.64*
  %bmControls566 = getelementptr inbounds %struct.anon.64, %struct.anon.64* %extension565, i32 0, i32 3
  %111 = load i8*, i8** %bmControls566, align 8, !tbaa !87
  %add567 = add i32 23, %cond492
  %idxprom568 = zext i32 %add567 to i64
  %arrayidx569 = getelementptr inbounds i8, i8* %buffer, i64 %idxprom568
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %111, i8* %arrayidx569, i64 %conv563, i32 1, i1 false)
  %add571 = add i32 23, %cond492
  %add572 = add i32 %add571, %cond503
  %idxprom573 = zext i32 %add572 to i64
  %arrayidx574 = getelementptr inbounds i8, i8* %buffer, i64 %idxprom573
  %112 = load i8, i8* %arrayidx574, align 1, !tbaa !87
  %conv575 = zext i8 %112 to i32
  %cmp576 = icmp ne i32 %conv575, 0
  br i1 %cmp576, label %if.then578, label %if.else587

if.then578:                                       ; preds = %if.end544
  %add579 = add i32 23, %cond492
  %add580 = add i32 %add579, %cond503
  %idxprom581 = zext i32 %add580 to i64
  %arrayidx582 = getelementptr inbounds i8, i8* %buffer, i64 %idxprom581
  %113 = load i8, i8* %arrayidx582, align 1, !tbaa !87
  %conv583 = zext i8 %113 to i32
  %name584 = getelementptr inbounds %struct.uvc_entity, %struct.uvc_entity* %call526, i32 0, i32 5
  %arraydecay585 = getelementptr inbounds [64 x i8], [64 x i8]* %name584, i32 0, i32 0
  %call586 = call i32 @usb_string(%struct.usb_device* %0, i32 %conv583, i8* %arraydecay585, i64 64)
  br label %if.end593

if.else587:                                       ; preds = %if.end544
  %name588 = getelementptr inbounds %struct.uvc_entity, %struct.uvc_entity* %call526, i32 0, i32 5
  %arraydecay589 = getelementptr inbounds [64 x i8], [64 x i8]* %name588, i32 0, i32 0
  %arrayidx590 = getelementptr inbounds i8, i8* %buffer, i64 3
  %114 = load i8, i8* %arrayidx590, align 1, !tbaa !87
  %conv591 = zext i8 %114 to i32
  %call592 = call i32 (i8*, i8*, ...) @sprintf(i8* %arraydecay589, i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.18, i32 0, i32 0), i32 %conv591)
  br label %if.end593

if.end593:                                        ; preds = %if.else587, %if.then578
  %list594 = getelementptr inbounds %struct.uvc_entity, %struct.uvc_entity* %call526, i32 0, i32 0
  %entities595 = getelementptr inbounds %struct.uvc_device, %struct.uvc_device* %dev, i32 0, i32 12
  call void @list_add_tail(%struct.list_head* %list594, %struct.list_head* %entities595)
  br label %cleanup

NewDefault:                                       ; preds = %LeafBlock4, %LeafBlock
  br label %do.body596

do.body596:                                       ; preds = %NewDefault
  %115 = load i32, i32* @uvc_trace_param, align 4, !tbaa !23
  %and597 = and i32 %115, 2
  %tobool598 = icmp ne i32 %and597, 0
  br i1 %tobool598, label %if.then599, label %cleanup

if.then599:                                       ; preds = %do.body596
  %arrayidx600 = getelementptr inbounds i8, i8* %buffer, i64 2
  %116 = load i8, i8* %arrayidx600, align 1, !tbaa !87
  %conv601 = zext i8 %116 to i32
  %call602 = call i32 (i8*, ...) @printk(i8* getelementptr inbounds ([59 x i8], [59 x i8]* @.str.33, i32 0, i32 0), i32 %conv601)
  br label %cleanup

cleanup:                                          ; preds = %if.end237, %if.end314, %if.end381, %if.end481, %if.end593, %for.cond, %if.then599, %do.body596, %if.end521, %do.body509, %if.then512, %if.end414, %do.body402, %if.then405, %if.end345, %do.body333, %if.then336, %if.end277, %do.body262, %if.then265, %do.body242, %if.then245, %if.end131, %do.body119, %if.then122, %do.body61, %if.then64, %do.body41, %if.then44, %do.body, %if.then10
  %retval.0 = phi i32 [ -22, %if.then10 ], [ -22, %do.body ], [ -22, %if.then44 ], [ -22, %do.body41 ], [ 0, %if.then64 ], [ 0, %do.body61 ], [ -22, %if.then122 ], [ -22, %do.body119 ], [ -12, %if.end131 ], [ -22, %if.then245 ], [ -22, %do.body242 ], [ 0, %if.then265 ], [ 0, %do.body262 ], [ -12, %if.end277 ], [ -22, %if.then336 ], [ -22, %do.body333 ], [ -12, %if.end345 ], [ -22, %if.then405 ], [ -22, %do.body402 ], [ -12, %if.end414 ], [ -22, %if.then512 ], [ -22, %do.body509 ], [ -12, %if.end521 ], [ 0, %do.body596 ], [ 0, %if.then599 ], [ 0, %for.cond ], [ 0, %if.end593 ], [ 0, %if.end481 ], [ 0, %if.end381 ], [ 0, %if.end314 ], [ 0, %if.end237 ]
  ret i32 %retval.0
}

; Function Attrs: inlinehint nounwind uwtable
define internal i32 @usb_endpoint_is_int_in(%struct.usb_endpoint_descriptor* %epd) #0 {
entry:
  %call = call i32 @usb_endpoint_xfer_int(%struct.usb_endpoint_descriptor* %epd)
  %tobool = icmp ne i32 %call, 0
  br i1 %tobool, label %land.rhs, label %land.end

land.rhs:                                         ; preds = %entry
  %call1 = call i32 @usb_endpoint_dir_in(%struct.usb_endpoint_descriptor* %epd)
  %tobool2 = icmp ne i32 %call1, 0
  br label %land.end

land.end:                                         ; preds = %land.rhs, %entry
  %0 = phi i1 [ false, %entry ], [ %tobool2, %land.rhs ]
  %land.ext = zext i1 %0 to i32
  ret i32 %land.ext
}

; Function Attrs: nounwind uwtable
define internal %struct.uvc_entity* @uvc_alloc_entity(i16 zeroext %type, i8 zeroext %id, i32 %num_pads, i32 %extra_size) #1 {
entry:
  %add = add i32 %extra_size, 23
  %and = and i32 %add, -24
  %conv = zext i16 %type to i32
  %and1 = and i32 %conv, 32768
  %tobool = icmp ne i32 %and1, 0
  %sub = sub i32 %num_pads, 1
  %cond = select i1 %tobool, i32 %num_pads, i32 %sub
  %conv2 = zext i32 %and to i64
  %add3 = add i64 328, %conv2
  %conv4 = zext i32 %num_pads to i64
  %mul = mul i64 24, %conv4
  %add5 = add i64 %add3, %mul
  %conv6 = zext i32 %cond to i64
  %add7 = add i64 %add5, %conv6
  %conv8 = trunc i64 %add7 to i32
  %conv9 = zext i32 %conv8 to i64
  %call = call i8* @kzalloc(i64 %conv9, i32 208)
  %0 = bitcast i8* %call to %struct.uvc_entity*
  %cmp = icmp eq %struct.uvc_entity* %0, null
  br i1 %cmp, label %cleanup, label %if.end

if.end:                                           ; preds = %entry
  %id11 = getelementptr inbounds %struct.uvc_entity, %struct.uvc_entity* %0, i32 0, i32 3
  store i8 %id, i8* %id11, align 4, !tbaa !25
  %type12 = getelementptr inbounds %struct.uvc_entity, %struct.uvc_entity* %0, i32 0, i32 4
  store i16 %type, i16* %type12, align 2, !tbaa !92
  %num_links = getelementptr inbounds %struct.uvc_entity, %struct.uvc_entity* %0, i32 0, i32 9
  store i32 0, i32* %num_links, align 4, !tbaa !102
  %num_pads13 = getelementptr inbounds %struct.uvc_entity, %struct.uvc_entity* %0, i32 0, i32 8
  store i32 %num_pads, i32* %num_pads13, align 8, !tbaa !103
  %add.ptr = getelementptr inbounds %struct.uvc_entity, %struct.uvc_entity* %0, i64 1
  %1 = bitcast %struct.uvc_entity* %add.ptr to i8*
  %idx.ext = zext i32 %and to i64
  %add.ptr14 = getelementptr i8, i8* %1, i64 %idx.ext
  %2 = bitcast i8* %add.ptr14 to %struct.media_pad*
  %pads = getelementptr inbounds %struct.uvc_entity, %struct.uvc_entity* %0, i32 0, i32 10
  store %struct.media_pad* %2, %struct.media_pad** %pads, align 8, !tbaa !104
  br label %for.cond

for.cond:                                         ; preds = %for.body, %if.end
  %i.0 = phi i32 [ 0, %if.end ], [ %inc, %for.body ]
  %cmp15 = icmp ult i32 %i.0, %cond
  br i1 %cmp15, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %pads17 = getelementptr inbounds %struct.uvc_entity, %struct.uvc_entity* %0, i32 0, i32 10
  %3 = load %struct.media_pad*, %struct.media_pad** %pads17, align 8, !tbaa !104
  %idxprom = zext i32 %i.0 to i64
  %arrayidx = getelementptr inbounds %struct.media_pad, %struct.media_pad* %3, i64 %idxprom
  %flags = getelementptr inbounds %struct.media_pad, %struct.media_pad* %arrayidx, i32 0, i32 2
  store i64 1, i64* %flags, align 8, !tbaa !105
  %inc = add i32 %i.0, 1
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %type18 = getelementptr inbounds %struct.uvc_entity, %struct.uvc_entity* %0, i32 0, i32 4
  %4 = load i16, i16* %type18, align 2, !tbaa !92
  %conv19 = zext i16 %4 to i32
  %and20 = and i32 %conv19, 65280
  %cmp21 = icmp ne i32 %and20, 0
  br i1 %cmp21, label %land.lhs.true, label %if.then28

land.lhs.true:                                    ; preds = %for.end
  %type23 = getelementptr inbounds %struct.uvc_entity, %struct.uvc_entity* %0, i32 0, i32 4
  %5 = load i16, i16* %type23, align 2, !tbaa !92
  %conv24 = zext i16 %5 to i32
  %and25 = and i32 %conv24, 32768
  %cmp26 = icmp eq i32 %and25, 32768
  br i1 %cmp26, label %if.end34, label %if.then28

if.then28:                                        ; preds = %land.lhs.true, %for.end
  %pads29 = getelementptr inbounds %struct.uvc_entity, %struct.uvc_entity* %0, i32 0, i32 10
  %6 = load %struct.media_pad*, %struct.media_pad** %pads29, align 8, !tbaa !104
  %sub30 = sub i32 %num_pads, 1
  %idxprom31 = zext i32 %sub30 to i64
  %arrayidx32 = getelementptr inbounds %struct.media_pad, %struct.media_pad* %6, i64 %idxprom31
  %flags33 = getelementptr inbounds %struct.media_pad, %struct.media_pad* %arrayidx32, i32 0, i32 2
  store i64 2, i64* %flags33, align 8, !tbaa !105
  br label %if.end34

if.end34:                                         ; preds = %if.then28, %land.lhs.true
  %conv35 = trunc i32 %cond to i8
  %bNrInPins = getelementptr inbounds %struct.uvc_entity, %struct.uvc_entity* %0, i32 0, i32 12
  store i8 %conv35, i8* %bNrInPins, align 8, !tbaa !107
  %pads36 = getelementptr inbounds %struct.uvc_entity, %struct.uvc_entity* %0, i32 0, i32 10
  %7 = load %struct.media_pad*, %struct.media_pad** %pads36, align 8, !tbaa !104
  %idxprom37 = zext i32 %num_pads to i64
  %arrayidx38 = getelementptr inbounds %struct.media_pad, %struct.media_pad* %7, i64 %idxprom37
  %8 = bitcast %struct.media_pad* %arrayidx38 to i8*
  %baSourceID = getelementptr inbounds %struct.uvc_entity, %struct.uvc_entity* %0, i32 0, i32 13
  store i8* %8, i8** %baSourceID, align 8, !tbaa !100
  br label %cleanup

cleanup:                                          ; preds = %entry, %if.end34
  %retval.0 = phi %struct.uvc_entity* [ %0, %if.end34 ], [ null, %entry ]
  ret %struct.uvc_entity* %retval.0
}

declare i8* @__memcpy(i8*, i8*, i64) #4

; Function Attrs: argmemonly nounwind
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* nocapture writeonly, i8* nocapture readonly, i64, i32, i1) #2

declare i32 @usb_string(%struct.usb_device*, i32, i8*, i64) #4

; Function Attrs: inlinehint nounwind uwtable
define internal void @list_add_tail(%struct.list_head* %new, %struct.list_head* %head) #0 {
entry:
  %prev = getelementptr inbounds %struct.list_head, %struct.list_head* %head, i32 0, i32 1
  %0 = load %struct.list_head*, %struct.list_head** %prev, align 8, !tbaa !83
  call void @__list_add(%struct.list_head* %new, %struct.list_head* %0, %struct.list_head* %head)
  ret void
}

; Function Attrs: inlinehint nounwind uwtable
define internal void @__list_add(%struct.list_head* %new, %struct.list_head* %prev, %struct.list_head* %next) #0 {
entry:
  %prev1 = getelementptr inbounds %struct.list_head, %struct.list_head* %next, i32 0, i32 1
  store %struct.list_head* %new, %struct.list_head** %prev1, align 8, !tbaa !83
  %next2 = getelementptr inbounds %struct.list_head, %struct.list_head* %new, i32 0, i32 0
  store %struct.list_head* %next, %struct.list_head** %next2, align 8, !tbaa !82
  %prev3 = getelementptr inbounds %struct.list_head, %struct.list_head* %new, i32 0, i32 1
  store %struct.list_head* %prev, %struct.list_head** %prev3, align 8, !tbaa !83
  %next4 = getelementptr inbounds %struct.list_head, %struct.list_head* %prev, i32 0, i32 0
  store %struct.list_head* %new, %struct.list_head** %next4, align 8, !tbaa !82
  ret void
}

; Function Attrs: inlinehint nounwind uwtable
define internal zeroext i16 @get_unaligned_le16(i8* %p) #0 {
entry:
  %0 = bitcast i8* %p to i16*
  %call = call zeroext i16 @__le16_to_cpup(i16* %0)
  ret i16 %call
}

; Function Attrs: inlinehint nounwind uwtable
define internal i32 @get_unaligned_le32(i8* %p) #0 {
entry:
  %0 = bitcast i8* %p to i32*
  %call = call i32 @__le32_to_cpup(i32* %0)
  ret i32 %call
}

declare %struct.usb_interface* @usb_ifnum_to_if(%struct.usb_device*, i32) #4

; Function Attrs: nounwind uwtable
define internal i32 @uvc_parse_streaming(%struct.uvc_device* %dev, %struct.usb_interface* %intf) #1 {
entry:
  %interval = alloca i32*, align 8
  %altsetting = getelementptr inbounds %struct.usb_interface, %struct.usb_interface* %intf, i32 0, i32 0
  %0 = load %struct.usb_host_interface*, %struct.usb_host_interface** %altsetting, align 8, !tbaa !108
  %arrayidx = getelementptr inbounds %struct.usb_host_interface, %struct.usb_host_interface* %0, i64 0
  %extra = getelementptr inbounds %struct.usb_host_interface, %struct.usb_host_interface* %arrayidx, i32 0, i32 2
  %1 = load i8*, i8** %extra, align 8, !tbaa !85
  %extralen = getelementptr inbounds %struct.usb_host_interface, %struct.usb_host_interface* %arrayidx, i32 0, i32 1
  %2 = load i32, i32* %extralen, align 4, !tbaa !86
  %3 = bitcast i32** %interval to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %3) #5
  %cur_altsetting = getelementptr inbounds %struct.usb_interface, %struct.usb_interface* %intf, i32 0, i32 1
  %4 = load %struct.usb_host_interface*, %struct.usb_host_interface** %cur_altsetting, align 8, !tbaa !41
  %desc = getelementptr inbounds %struct.usb_host_interface, %struct.usb_host_interface* %4, i32 0, i32 0
  %bInterfaceSubClass = getelementptr inbounds %struct.usb_interface_descriptor, %struct.usb_interface_descriptor* %desc, i32 0, i32 6
  %5 = load i8, i8* %bInterfaceSubClass, align 2, !tbaa !67
  %conv = zext i8 %5 to i32
  %cmp = icmp ne i32 %conv, 2
  br i1 %cmp, label %do.body, label %if.end7

do.body:                                          ; preds = %entry
  %6 = load i32, i32* @uvc_trace_param, align 4, !tbaa !23
  %and = and i32 %6, 2
  %tobool = icmp ne i32 %and, 0
  br i1 %tobool, label %if.then2, label %cleanup398

if.then2:                                         ; preds = %do.body
  %udev = getelementptr inbounds %struct.uvc_device, %struct.uvc_device* %dev, i32 0, i32 0
  %7 = load %struct.usb_device*, %struct.usb_device** %udev, align 8, !tbaa !32
  %devnum = getelementptr inbounds %struct.usb_device, %struct.usb_device* %7, i32 0, i32 0
  %8 = load i32, i32* %devnum, align 8, !tbaa !99
  %altsetting3 = getelementptr inbounds %struct.usb_interface, %struct.usb_interface* %intf, i32 0, i32 0
  %9 = load %struct.usb_host_interface*, %struct.usb_host_interface** %altsetting3, align 8, !tbaa !108
  %arrayidx4 = getelementptr inbounds %struct.usb_host_interface, %struct.usb_host_interface* %9, i64 0
  %desc5 = getelementptr inbounds %struct.usb_host_interface, %struct.usb_host_interface* %arrayidx4, i32 0, i32 0
  %bInterfaceNumber = getelementptr inbounds %struct.usb_interface_descriptor, %struct.usb_interface_descriptor* %desc5, i32 0, i32 2
  %10 = load i8, i8* %bInterfaceNumber, align 2, !tbaa !56
  %conv6 = zext i8 %10 to i32
  %call = call i32 (i8*, ...) @printk(i8* getelementptr inbounds ([70 x i8], [70 x i8]* @.str.34, i32 0, i32 0), i32 %8, i32 %conv6)
  br label %cleanup398

if.end7:                                          ; preds = %entry
  %11 = bitcast %struct.uvc_device* %dev to i8*
  %call8 = call i32 @usb_driver_claim_interface(%struct.usb_driver* getelementptr inbounds (%struct.uvc_driver, %struct.uvc_driver* @uvc_driver, i32 0, i32 0), %struct.usb_interface* %intf, i8* %11)
  %tobool9 = icmp ne i32 %call8, 0
  br i1 %tobool9, label %do.body11, label %if.end26

do.body11:                                        ; preds = %if.end7
  %12 = load i32, i32* @uvc_trace_param, align 4, !tbaa !23
  %and12 = and i32 %12, 2
  %tobool13 = icmp ne i32 %and12, 0
  br i1 %tobool13, label %if.then14, label %cleanup398

if.then14:                                        ; preds = %do.body11
  %udev15 = getelementptr inbounds %struct.uvc_device, %struct.uvc_device* %dev, i32 0, i32 0
  %13 = load %struct.usb_device*, %struct.usb_device** %udev15, align 8, !tbaa !32
  %devnum16 = getelementptr inbounds %struct.usb_device, %struct.usb_device* %13, i32 0, i32 0
  %14 = load i32, i32* %devnum16, align 8, !tbaa !99
  %altsetting17 = getelementptr inbounds %struct.usb_interface, %struct.usb_interface* %intf, i32 0, i32 0
  %15 = load %struct.usb_host_interface*, %struct.usb_host_interface** %altsetting17, align 8, !tbaa !108
  %arrayidx18 = getelementptr inbounds %struct.usb_host_interface, %struct.usb_host_interface* %15, i64 0
  %desc19 = getelementptr inbounds %struct.usb_host_interface, %struct.usb_host_interface* %arrayidx18, i32 0, i32 0
  %bInterfaceNumber20 = getelementptr inbounds %struct.usb_interface_descriptor, %struct.usb_interface_descriptor* %desc19, i32 0, i32 2
  %16 = load i8, i8* %bInterfaceNumber20, align 2, !tbaa !56
  %conv21 = zext i8 %16 to i32
  %call22 = call i32 (i8*, ...) @printk(i8* getelementptr inbounds ([55 x i8], [55 x i8]* @.str.35, i32 0, i32 0), i32 %14, i32 %conv21)
  br label %cleanup398

if.end26:                                         ; preds = %if.end7
  %call27 = call i8* @kzalloc(i64 1416, i32 208)
  %17 = bitcast i8* %call27 to %struct.uvc_streaming*
  %cmp28 = icmp eq %struct.uvc_streaming* %17, null
  br i1 %cmp28, label %if.then30, label %do.body32

if.then30:                                        ; preds = %if.end26
  call void @usb_driver_release_interface(%struct.usb_driver* getelementptr inbounds (%struct.uvc_driver, %struct.uvc_driver* @uvc_driver, i32 0, i32 0), %struct.usb_interface* %intf)
  br label %cleanup398

do.body32:                                        ; preds = %if.end26
  %mutex = getelementptr inbounds %struct.uvc_streaming, %struct.uvc_streaming* %17, i32 0, i32 16
  call void @__mutex_init(%struct.mutex* %mutex, i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.36, i32 0, i32 0), %struct.lock_class_key* @uvc_parse_streaming.__key)
  %dev35 = getelementptr inbounds %struct.uvc_streaming, %struct.uvc_streaming* %17, i32 0, i32 1
  store %struct.uvc_device* %dev, %struct.uvc_device** %dev35, align 8, !tbaa !109
  %call36 = call %struct.usb_interface* @usb_get_intf(%struct.usb_interface* %intf)
  %intf37 = getelementptr inbounds %struct.uvc_streaming, %struct.uvc_streaming* %17, i32 0, i32 5
  store %struct.usb_interface* %call36, %struct.usb_interface** %intf37, align 8, !tbaa !69
  %cur_altsetting38 = getelementptr inbounds %struct.usb_interface, %struct.usb_interface* %intf, i32 0, i32 1
  %18 = load %struct.usb_host_interface*, %struct.usb_host_interface** %cur_altsetting38, align 8, !tbaa !41
  %desc39 = getelementptr inbounds %struct.usb_host_interface, %struct.usb_host_interface* %18, i32 0, i32 0
  %bInterfaceNumber40 = getelementptr inbounds %struct.usb_interface_descriptor, %struct.usb_interface_descriptor* %desc39, i32 0, i32 2
  %19 = load i8, i8* %bInterfaceNumber40, align 2, !tbaa !56
  %conv41 = zext i8 %19 to i32
  %intfnum = getelementptr inbounds %struct.uvc_streaming, %struct.uvc_streaming* %17, i32 0, i32 6
  store i32 %conv41, i32* %intfnum, align 8, !tbaa !110
  %cmp42 = icmp eq i32 %2, 0
  br i1 %cmp42, label %if.then44, label %if.end81

if.then44:                                        ; preds = %do.body32
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %if.then44
  %i.0 = phi i32 [ 0, %if.then44 ], [ %inc, %for.inc ]
  %buflen.0 = phi i32 [ %2, %if.then44 ], [ %buflen.1, %for.inc ]
  %buffer.0 = phi i8* [ %1, %if.then44 ], [ %buffer.1, %for.inc ]
  %desc45 = getelementptr inbounds %struct.usb_host_interface, %struct.usb_host_interface* %arrayidx, i32 0, i32 0
  %bNumEndpoints = getelementptr inbounds %struct.usb_interface_descriptor, %struct.usb_interface_descriptor* %desc45, i32 0, i32 4
  %20 = load i8, i8* %bNumEndpoints, align 4, !tbaa !12
  %conv46 = zext i8 %20 to i32
  %cmp47 = icmp ult i32 %i.0, %conv46
  br i1 %cmp47, label %for.body, label %if.end81

for.body:                                         ; preds = %for.cond
  %endpoint = getelementptr inbounds %struct.usb_host_interface, %struct.usb_host_interface* %arrayidx, i32 0, i32 3
  %21 = load %struct.usb_host_endpoint*, %struct.usb_host_endpoint** %endpoint, align 8, !tbaa !16
  %idxprom = zext i32 %i.0 to i64
  %arrayidx49 = getelementptr inbounds %struct.usb_host_endpoint, %struct.usb_host_endpoint* %21, i64 %idxprom
  %extralen50 = getelementptr inbounds %struct.usb_host_endpoint, %struct.usb_host_endpoint* %arrayidx49, i32 0, i32 7
  %22 = load i32, i32* %extralen50, align 8, !tbaa !111
  %cmp51 = icmp eq i32 %22, 0
  br i1 %cmp51, label %cleanup, label %if.end54

if.end54:                                         ; preds = %for.body
  %extralen55 = getelementptr inbounds %struct.usb_host_endpoint, %struct.usb_host_endpoint* %arrayidx49, i32 0, i32 7
  %23 = load i32, i32* %extralen55, align 8, !tbaa !111
  %cmp56 = icmp sgt i32 %23, 2
  br i1 %cmp56, label %land.lhs.true, label %cleanup

land.lhs.true:                                    ; preds = %if.end54
  %extra58 = getelementptr inbounds %struct.usb_host_endpoint, %struct.usb_host_endpoint* %arrayidx49, i32 0, i32 6
  %24 = load i8*, i8** %extra58, align 8, !tbaa !112
  %arrayidx59 = getelementptr inbounds i8, i8* %24, i64 1
  %25 = load i8, i8* %arrayidx59, align 1, !tbaa !87
  %conv60 = zext i8 %25 to i32
  %cmp61 = icmp eq i32 %conv60, 36
  br i1 %cmp61, label %do.body64, label %cleanup

do.body64:                                        ; preds = %land.lhs.true
  %26 = load i32, i32* @uvc_trace_param, align 4, !tbaa !23
  %and65 = and i32 %26, 2
  %tobool66 = icmp ne i32 %and65, 0
  br i1 %tobool66, label %if.then67, label %do.end71

if.then67:                                        ; preds = %do.body64
  %call68 = call i32 (i8*, ...) @printk(i8* getelementptr inbounds ([49 x i8], [49 x i8]* @.str.37, i32 0, i32 0), i32 %i.0)
  br label %do.end71

do.end71:                                         ; preds = %if.then67, %do.body64
  %endpoint72 = getelementptr inbounds %struct.usb_host_interface, %struct.usb_host_interface* %arrayidx, i32 0, i32 3
  %27 = load %struct.usb_host_endpoint*, %struct.usb_host_endpoint** %endpoint72, align 8, !tbaa !16
  %idxprom73 = zext i32 %i.0 to i64
  %arrayidx74 = getelementptr inbounds %struct.usb_host_endpoint, %struct.usb_host_endpoint* %27, i64 %idxprom73
  %extra75 = getelementptr inbounds %struct.usb_host_endpoint, %struct.usb_host_endpoint* %arrayidx74, i32 0, i32 6
  %28 = load i8*, i8** %extra75, align 8, !tbaa !112
  %endpoint76 = getelementptr inbounds %struct.usb_host_interface, %struct.usb_host_interface* %arrayidx, i32 0, i32 3
  %29 = load %struct.usb_host_endpoint*, %struct.usb_host_endpoint** %endpoint76, align 8, !tbaa !16
  %idxprom77 = zext i32 %i.0 to i64
  %arrayidx78 = getelementptr inbounds %struct.usb_host_endpoint, %struct.usb_host_endpoint* %29, i64 %idxprom77
  %extralen79 = getelementptr inbounds %struct.usb_host_endpoint, %struct.usb_host_endpoint* %arrayidx78, i32 0, i32 7
  %30 = load i32, i32* %extralen79, align 8, !tbaa !111
  br label %cleanup

cleanup:                                          ; preds = %if.end54, %land.lhs.true, %for.body, %do.end71
  %buflen.1 = phi i32 [ %30, %do.end71 ], [ %buflen.0, %for.body ], [ %buflen.0, %land.lhs.true ], [ %buflen.0, %if.end54 ]
  %buffer.1 = phi i8* [ %28, %do.end71 ], [ %buffer.0, %for.body ], [ %buffer.0, %land.lhs.true ], [ %buffer.0, %if.end54 ]
  %cleanup.dest.slot.0 = phi i32 [ 8, %do.end71 ], [ 10, %for.body ], [ 0, %land.lhs.true ], [ 0, %if.end54 ]
  %cleanup.dest.slot.0.off = add i32 %cleanup.dest.slot.0, -8
  %switch = icmp ult i32 %cleanup.dest.slot.0.off, 1
  br i1 %switch, label %if.end81, label %for.inc

for.inc:                                          ; preds = %cleanup
  %inc = add i32 %i.0, 1
  br label %for.cond

if.end81:                                         ; preds = %cleanup, %for.cond, %do.body32
  %buflen.3 = phi i32 [ %2, %do.body32 ], [ %buflen.1, %cleanup ], [ %buflen.0, %for.cond ]
  %buffer.3 = phi i8* [ %1, %do.body32 ], [ %buffer.1, %cleanup ], [ %buffer.0, %for.cond ]
  br label %while.cond

while.cond:                                       ; preds = %while.body, %if.end81
  %buflen.4 = phi i32 [ %buflen.3, %if.end81 ], [ %sub, %while.body ]
  %buffer.4 = phi i8* [ %buffer.3, %if.end81 ], [ %add.ptr, %while.body ]
  %cmp82 = icmp sgt i32 %buflen.4, 2
  br i1 %cmp82, label %land.rhs, label %while.end

land.rhs:                                         ; preds = %while.cond
  %arrayidx84 = getelementptr inbounds i8, i8* %buffer.4, i64 1
  %31 = load i8, i8* %arrayidx84, align 1, !tbaa !87
  %conv85 = zext i8 %31 to i32
  %cmp86 = icmp ne i32 %conv85, 36
  br i1 %cmp86, label %while.body, label %while.end

while.body:                                       ; preds = %land.rhs
  %arrayidx88 = getelementptr inbounds i8, i8* %buffer.4, i64 0
  %32 = load i8, i8* %arrayidx88, align 1, !tbaa !87
  %conv89 = zext i8 %32 to i32
  %sub = sub nsw i32 %buflen.4, %conv89
  %arrayidx90 = getelementptr inbounds i8, i8* %buffer.4, i64 0
  %33 = load i8, i8* %arrayidx90, align 1, !tbaa !87
  %conv91 = zext i8 %33 to i32
  %idx.ext = sext i32 %conv91 to i64
  %add.ptr = getelementptr inbounds i8, i8* %buffer.4, i64 %idx.ext
  br label %while.cond

while.end:                                        ; preds = %while.cond, %land.rhs
  %cmp92 = icmp sle i32 %buflen.4, 2
  br i1 %cmp92, label %do.body95, label %if.end103

do.body95:                                        ; preds = %while.end
  %34 = load i32, i32* @uvc_trace_param, align 4, !tbaa !23
  %and96 = and i32 %34, 2
  %tobool97 = icmp ne i32 %and96, 0
  br i1 %tobool97, label %if.then98, label %error

if.then98:                                        ; preds = %do.body95
  %call99 = call i32 (i8*, ...) @printk(i8* getelementptr inbounds ([70 x i8], [70 x i8]* @.str.38, i32 0, i32 0))
  br label %error

if.end103:                                        ; preds = %while.end
  %arrayidx104 = getelementptr inbounds i8, i8* %buffer.4, i64 2
  %35 = load i8, i8* %arrayidx104, align 1, !tbaa !87
  %conv105 = zext i8 %35 to i32
  br label %NodeBlock

NodeBlock:                                        ; preds = %if.end103
  %Pivot = icmp slt i32 %conv105, 2
  br i1 %Pivot, label %LeafBlock, label %LeafBlock2

LeafBlock2:                                       ; preds = %NodeBlock
  %SwitchLeaf3 = icmp eq i32 %conv105, 2
  br i1 %SwitchLeaf3, label %sw.bb, label %NewDefault

LeafBlock:                                        ; preds = %NodeBlock
  %SwitchLeaf = icmp eq i32 %conv105, 1
  br i1 %SwitchLeaf, label %sw.epilog, label %NewDefault

sw.bb:                                            ; preds = %LeafBlock2
  br label %sw.epilog

NewDefault:                                       ; preds = %LeafBlock2, %LeafBlock
  br label %do.body108

do.body108:                                       ; preds = %NewDefault
  %36 = load i32, i32* @uvc_trace_param, align 4, !tbaa !23
  %and109 = and i32 %36, 2
  %tobool110 = icmp ne i32 %and109, 0
  br i1 %tobool110, label %if.then111, label %error

if.then111:                                       ; preds = %do.body108
  %udev112 = getelementptr inbounds %struct.uvc_device, %struct.uvc_device* %dev, i32 0, i32 0
  %37 = load %struct.usb_device*, %struct.usb_device** %udev112, align 8, !tbaa !32
  %devnum113 = getelementptr inbounds %struct.usb_device, %struct.usb_device* %37, i32 0, i32 0
  %38 = load i32, i32* %devnum113, align 8, !tbaa !99
  %desc114 = getelementptr inbounds %struct.usb_host_interface, %struct.usb_host_interface* %arrayidx, i32 0, i32 0
  %bInterfaceNumber115 = getelementptr inbounds %struct.usb_interface_descriptor, %struct.usb_interface_descriptor* %desc114, i32 0, i32 2
  %39 = load i8, i8* %bInterfaceNumber115, align 2, !tbaa !56
  %conv116 = zext i8 %39 to i32
  %call117 = call i32 (i8*, ...) @printk(i8* getelementptr inbounds ([80 x i8], [80 x i8]* @.str.39, i32 0, i32 0), i32 %38, i32 %conv116)
  br label %error

sw.epilog:                                        ; preds = %LeafBlock, %sw.bb
  %.sink = phi i32 [ 2, %sw.bb ], [ 1, %LeafBlock ]
  %size.0 = phi i32 [ 9, %sw.bb ], [ 13, %LeafBlock ]
  %type107 = getelementptr inbounds %struct.uvc_streaming, %struct.uvc_streaming* %17, i32 0, i32 9
  store i32 %.sink, i32* %type107, align 8, !tbaa !113
  %cmp121 = icmp sge i32 %buflen.4, 4
  br i1 %cmp121, label %cond.true, label %cond.end

cond.true:                                        ; preds = %sw.epilog
  %arrayidx123 = getelementptr inbounds i8, i8* %buffer.4, i64 3
  %40 = load i8, i8* %arrayidx123, align 1, !tbaa !87
  %conv124 = zext i8 %40 to i32
  br label %cond.end

cond.end:                                         ; preds = %sw.epilog, %cond.true
  %cond = phi i32 [ %conv124, %cond.true ], [ 0, %sw.epilog ]
  %cmp125 = icmp uge i32 %buflen.4, %size.0
  br i1 %cmp125, label %cond.true127, label %cond.end133

cond.true127:                                     ; preds = %cond.end
  %sub128 = sub i32 %size.0, 1
  %idxprom129 = zext i32 %sub128 to i64
  %arrayidx130 = getelementptr inbounds i8, i8* %buffer.4, i64 %idxprom129
  %41 = load i8, i8* %arrayidx130, align 1, !tbaa !87
  %conv131 = zext i8 %41 to i32
  br label %cond.end133

cond.end133:                                      ; preds = %cond.end, %cond.true127
  %cond134 = phi i32 [ %conv131, %cond.true127 ], [ 0, %cond.end ]
  %mul = mul i32 %cond, %cond134
  %add = add i32 %size.0, %mul
  %cmp135 = icmp ult i32 %buflen.4, %add
  br i1 %cmp135, label %do.body138, label %if.end151

do.body138:                                       ; preds = %cond.end133
  %42 = load i32, i32* @uvc_trace_param, align 4, !tbaa !23
  %and139 = and i32 %42, 2
  %tobool140 = icmp ne i32 %and139, 0
  br i1 %tobool140, label %if.then141, label %error

if.then141:                                       ; preds = %do.body138
  %udev142 = getelementptr inbounds %struct.uvc_device, %struct.uvc_device* %dev, i32 0, i32 0
  %43 = load %struct.usb_device*, %struct.usb_device** %udev142, align 8, !tbaa !32
  %devnum143 = getelementptr inbounds %struct.usb_device, %struct.usb_device* %43, i32 0, i32 0
  %44 = load i32, i32* %devnum143, align 8, !tbaa !99
  %desc144 = getelementptr inbounds %struct.usb_host_interface, %struct.usb_host_interface* %arrayidx, i32 0, i32 0
  %bInterfaceNumber145 = getelementptr inbounds %struct.usb_interface_descriptor, %struct.usb_interface_descriptor* %desc144, i32 0, i32 2
  %45 = load i8, i8* %bInterfaceNumber145, align 2, !tbaa !56
  %conv146 = zext i8 %45 to i32
  %call147 = call i32 (i8*, ...) @printk(i8* getelementptr inbounds ([81 x i8], [81 x i8]* @.str.40, i32 0, i32 0), i32 %44, i32 %conv146)
  br label %error

if.end151:                                        ; preds = %cond.end133
  %conv152 = trunc i32 %cond to i8
  %header = getelementptr inbounds %struct.uvc_streaming, %struct.uvc_streaming* %17, i32 0, i32 8
  %bNumFormats = getelementptr inbounds %struct.uvc_streaming_header, %struct.uvc_streaming_header* %header, i32 0, i32 0
  store i8 %conv152, i8* %bNumFormats, align 8, !tbaa !114
  %arrayidx153 = getelementptr inbounds i8, i8* %buffer.4, i64 6
  %46 = load i8, i8* %arrayidx153, align 1, !tbaa !87
  %header154 = getelementptr inbounds %struct.uvc_streaming, %struct.uvc_streaming* %17, i32 0, i32 8
  %bEndpointAddress = getelementptr inbounds %struct.uvc_streaming_header, %struct.uvc_streaming_header* %header154, i32 0, i32 1
  store i8 %46, i8* %bEndpointAddress, align 1, !tbaa !115
  %arrayidx155 = getelementptr inbounds i8, i8* %buffer.4, i64 2
  %47 = load i8, i8* %arrayidx155, align 1, !tbaa !87
  %conv156 = zext i8 %47 to i32
  %cmp157 = icmp eq i32 %conv156, 1
  %arrayidx160 = getelementptr inbounds i8, i8* %buffer.4, i64 7
  %48 = load i8, i8* %arrayidx160, align 1, !tbaa !87
  %header161 = getelementptr inbounds %struct.uvc_streaming, %struct.uvc_streaming* %17, i32 0, i32 8
  br i1 %cmp157, label %if.then159, label %if.else

if.then159:                                       ; preds = %if.end151
  %bmInfo = getelementptr inbounds %struct.uvc_streaming_header, %struct.uvc_streaming_header* %header161, i32 0, i32 5
  store i8 %48, i8* %bmInfo, align 8, !tbaa !116
  %arrayidx162 = getelementptr inbounds i8, i8* %buffer.4, i64 8
  %49 = load i8, i8* %arrayidx162, align 1, !tbaa !87
  %header163 = getelementptr inbounds %struct.uvc_streaming, %struct.uvc_streaming* %17, i32 0, i32 8
  %bTerminalLink = getelementptr inbounds %struct.uvc_streaming_header, %struct.uvc_streaming_header* %header163, i32 0, i32 2
  store i8 %49, i8* %bTerminalLink, align 2, !tbaa !117
  %arrayidx164 = getelementptr inbounds i8, i8* %buffer.4, i64 9
  %50 = load i8, i8* %arrayidx164, align 1, !tbaa !87
  %header165 = getelementptr inbounds %struct.uvc_streaming, %struct.uvc_streaming* %17, i32 0, i32 8
  %bStillCaptureMethod = getelementptr inbounds %struct.uvc_streaming_header, %struct.uvc_streaming_header* %header165, i32 0, i32 6
  store i8 %50, i8* %bStillCaptureMethod, align 1, !tbaa !118
  %arrayidx166 = getelementptr inbounds i8, i8* %buffer.4, i64 10
  %51 = load i8, i8* %arrayidx166, align 1, !tbaa !87
  %header167 = getelementptr inbounds %struct.uvc_streaming, %struct.uvc_streaming* %17, i32 0, i32 8
  %bTriggerSupport = getelementptr inbounds %struct.uvc_streaming_header, %struct.uvc_streaming_header* %header167, i32 0, i32 7
  store i8 %51, i8* %bTriggerSupport, align 2, !tbaa !119
  %arrayidx168 = getelementptr inbounds i8, i8* %buffer.4, i64 11
  %52 = load i8, i8* %arrayidx168, align 1, !tbaa !87
  %header169 = getelementptr inbounds %struct.uvc_streaming, %struct.uvc_streaming* %17, i32 0, i32 8
  %bTriggerUsage = getelementptr inbounds %struct.uvc_streaming_header, %struct.uvc_streaming_header* %header169, i32 0, i32 8
  store i8 %52, i8* %bTriggerUsage, align 1, !tbaa !120
  br label %if.end173

if.else:                                          ; preds = %if.end151
  %bTerminalLink172 = getelementptr inbounds %struct.uvc_streaming_header, %struct.uvc_streaming_header* %header161, i32 0, i32 2
  store i8 %48, i8* %bTerminalLink172, align 2, !tbaa !117
  br label %if.end173

if.end173:                                        ; preds = %if.else, %if.then159
  %conv174 = trunc i32 %cond134 to i8
  %header175 = getelementptr inbounds %struct.uvc_streaming, %struct.uvc_streaming* %17, i32 0, i32 8
  %bControlSize = getelementptr inbounds %struct.uvc_streaming_header, %struct.uvc_streaming_header* %header175, i32 0, i32 3
  store i8 %conv174, i8* %bControlSize, align 1, !tbaa !121
  %idxprom176 = zext i32 %size.0 to i64
  %arrayidx177 = getelementptr inbounds i8, i8* %buffer.4, i64 %idxprom176
  %mul178 = mul i32 %cond, %cond134
  %conv179 = zext i32 %mul178 to i64
  %call180 = call i8* @kmemdup(i8* %arrayidx177, i64 %conv179, i32 208)
  %header181 = getelementptr inbounds %struct.uvc_streaming, %struct.uvc_streaming* %17, i32 0, i32 8
  %bmaControls = getelementptr inbounds %struct.uvc_streaming_header, %struct.uvc_streaming_header* %header181, i32 0, i32 4
  store i8* %call180, i8** %bmaControls, align 8, !tbaa !122
  %header182 = getelementptr inbounds %struct.uvc_streaming, %struct.uvc_streaming* %17, i32 0, i32 8
  %bmaControls183 = getelementptr inbounds %struct.uvc_streaming_header, %struct.uvc_streaming_header* %header182, i32 0, i32 4
  %53 = load i8*, i8** %bmaControls183, align 8, !tbaa !122
  %cmp184 = icmp eq i8* %53, null
  br i1 %cmp184, label %error, label %if.end187

if.end187:                                        ; preds = %if.end173
  %arrayidx188 = getelementptr inbounds i8, i8* %buffer.4, i64 0
  %54 = load i8, i8* %arrayidx188, align 1, !tbaa !87
  %conv189 = zext i8 %54 to i32
  %sub190 = sub nsw i32 %buflen.4, %conv189
  %arrayidx191 = getelementptr inbounds i8, i8* %buffer.4, i64 0
  %55 = load i8, i8* %arrayidx191, align 1, !tbaa !87
  %conv192 = zext i8 %55 to i32
  %idx.ext193 = sext i32 %conv192 to i64
  %add.ptr194 = getelementptr inbounds i8, i8* %buffer.4, i64 %idx.ext193
  br label %while.cond195

while.cond195:                                    ; preds = %sw.epilog261, %if.end187
  %nintervals.0 = phi i32 [ 0, %if.end187 ], [ %nintervals.3, %sw.epilog261 ]
  %nframes.0 = phi i32 [ 0, %if.end187 ], [ %nframes.1, %sw.epilog261 ]
  %nformats.0 = phi i32 [ 0, %if.end187 ], [ %nformats.1, %sw.epilog261 ]
  %_buflen.0 = phi i32 [ %sub190, %if.end187 ], [ %sub264, %sw.epilog261 ]
  %_buffer.0 = phi i8* [ %add.ptr194, %if.end187 ], [ %add.ptr268, %sw.epilog261 ]
  %cmp196 = icmp sgt i32 %_buflen.0, 2
  br i1 %cmp196, label %land.rhs198, label %while.end269

land.rhs198:                                      ; preds = %while.cond195
  %arrayidx199 = getelementptr inbounds i8, i8* %_buffer.0, i64 1
  %56 = load i8, i8* %arrayidx199, align 1, !tbaa !87
  %conv200 = zext i8 %56 to i32
  %cmp201 = icmp eq i32 %conv200, 36
  br i1 %cmp201, label %while.body204, label %while.end269

while.body204:                                    ; preds = %land.rhs198
  %arrayidx205 = getelementptr inbounds i8, i8* %_buffer.0, i64 2
  %57 = load i8, i8* %arrayidx205, align 1, !tbaa !87
  %conv206 = zext i8 %57 to i32
  br label %NodeBlock29

NodeBlock29:                                      ; preds = %while.body204
  %Pivot30 = icmp slt i32 %conv206, 10
  br i1 %Pivot30, label %NodeBlock13, label %NodeBlock27

NodeBlock27:                                      ; preds = %NodeBlock29
  %Pivot28 = icmp slt i32 %conv206, 16
  br i1 %Pivot28, label %NodeBlock19, label %NodeBlock25

NodeBlock25:                                      ; preds = %NodeBlock27
  %Pivot26 = icmp slt i32 %conv206, 17
  br i1 %Pivot26, label %sw.bb207, label %NodeBlock23

NodeBlock23:                                      ; preds = %NodeBlock25
  %Pivot24 = icmp slt i32 %conv206, 18
  br i1 %Pivot24, label %sw.bb245, label %LeafBlock21

LeafBlock21:                                      ; preds = %NodeBlock23
  %SwitchLeaf22 = icmp eq i32 %conv206, 18
  br i1 %SwitchLeaf22, label %do.body214, label %NewDefault4

NodeBlock19:                                      ; preds = %NodeBlock27
  %Pivot20 = icmp slt i32 %conv206, 12
  br i1 %Pivot20, label %LeafBlock15, label %LeafBlock17

LeafBlock17:                                      ; preds = %NodeBlock19
  %SwitchLeaf18 = icmp eq i32 %conv206, 12
  br i1 %SwitchLeaf18, label %sw.bb209, label %NewDefault4

LeafBlock15:                                      ; preds = %NodeBlock19
  %SwitchLeaf16 = icmp eq i32 %conv206, 10
  br i1 %SwitchLeaf16, label %do.body214, label %NewDefault4

NodeBlock13:                                      ; preds = %NodeBlock29
  %Pivot14 = icmp slt i32 %conv206, 6
  br i1 %Pivot14, label %NodeBlock7, label %NodeBlock11

NodeBlock11:                                      ; preds = %NodeBlock13
  %Pivot12 = icmp slt i32 %conv206, 7
  br i1 %Pivot12, label %sw.bb207, label %LeafBlock9

LeafBlock9:                                       ; preds = %NodeBlock11
  %SwitchLeaf10 = icmp eq i32 %conv206, 7
  br i1 %SwitchLeaf10, label %sw.bb229, label %NewDefault4

NodeBlock7:                                       ; preds = %NodeBlock13
  %Pivot8 = icmp slt i32 %conv206, 5
  br i1 %Pivot8, label %LeafBlock5, label %sw.bb229

LeafBlock5:                                       ; preds = %NodeBlock7
  %SwitchLeaf6 = icmp eq i32 %conv206, 4
  br i1 %SwitchLeaf6, label %sw.bb207, label %NewDefault4

sw.bb207:                                         ; preds = %NodeBlock25, %NodeBlock11, %LeafBlock5
  %inc208 = add i32 %nformats.0, 1
  br label %sw.epilog261

sw.bb209:                                         ; preds = %LeafBlock17
  %inc210 = add i32 %nformats.0, 1
  %inc211 = add i32 %nframes.0, 1
  %inc212 = add i32 %nintervals.0, 1
  br label %sw.epilog261

do.body214:                                       ; preds = %LeafBlock21, %LeafBlock15
  %58 = load i32, i32* @uvc_trace_param, align 4, !tbaa !23
  %and215 = and i32 %58, 2
  %tobool216 = icmp ne i32 %and215, 0
  br i1 %tobool216, label %if.then217, label %sw.epilog261

if.then217:                                       ; preds = %do.body214
  %udev218 = getelementptr inbounds %struct.uvc_device, %struct.uvc_device* %dev, i32 0, i32 0
  %59 = load %struct.usb_device*, %struct.usb_device** %udev218, align 8, !tbaa !32
  %devnum219 = getelementptr inbounds %struct.usb_device, %struct.usb_device* %59, i32 0, i32 0
  %60 = load i32, i32* %devnum219, align 8, !tbaa !99
  %desc220 = getelementptr inbounds %struct.usb_host_interface, %struct.usb_host_interface* %arrayidx, i32 0, i32 0
  %bInterfaceNumber221 = getelementptr inbounds %struct.usb_interface_descriptor, %struct.usb_interface_descriptor* %desc220, i32 0, i32 2
  %61 = load i8, i8* %bInterfaceNumber221, align 2, !tbaa !56
  %conv222 = zext i8 %61 to i32
  %arrayidx223 = getelementptr inbounds i8, i8* %_buffer.0, i64 2
  %62 = load i8, i8* %arrayidx223, align 1, !tbaa !87
  %conv224 = zext i8 %62 to i32
  %call225 = call i32 (i8*, ...) @printk(i8* getelementptr inbounds ([79 x i8], [79 x i8]* @.str.41, i32 0, i32 0), i32 %60, i32 %conv222, i32 %conv224)
  br label %sw.epilog261

sw.bb229:                                         ; preds = %LeafBlock9, %NodeBlock7
  %inc230 = add i32 %nframes.0, 1
  %cmp231 = icmp sgt i32 %_buflen.0, 25
  br i1 %cmp231, label %if.then233, label %sw.epilog261

if.then233:                                       ; preds = %sw.bb229
  %arrayidx234 = getelementptr inbounds i8, i8* %_buffer.0, i64 25
  %63 = load i8, i8* %arrayidx234, align 1, !tbaa !87
  %conv235 = zext i8 %63 to i32
  %tobool236 = icmp ne i32 %conv235, 0
  br i1 %tobool236, label %cond.true237, label %cond.end241

cond.true237:                                     ; preds = %if.then233
  %arrayidx238 = getelementptr inbounds i8, i8* %_buffer.0, i64 25
  %64 = load i8, i8* %arrayidx238, align 1, !tbaa !87
  %conv239 = zext i8 %64 to i32
  br label %cond.end241

cond.end241:                                      ; preds = %if.then233, %cond.true237
  %cond242 = phi i32 [ %conv239, %cond.true237 ], [ 3, %if.then233 ]
  %add243 = add i32 %nintervals.0, %cond242
  br label %sw.epilog261

sw.bb245:                                         ; preds = %NodeBlock23
  %inc246 = add i32 %nframes.0, 1
  %cmp247 = icmp sgt i32 %_buflen.0, 21
  br i1 %cmp247, label %if.then249, label %sw.epilog261

if.then249:                                       ; preds = %sw.bb245
  %arrayidx250 = getelementptr inbounds i8, i8* %_buffer.0, i64 21
  %65 = load i8, i8* %arrayidx250, align 1, !tbaa !87
  %conv251 = zext i8 %65 to i32
  %tobool252 = icmp ne i32 %conv251, 0
  br i1 %tobool252, label %cond.true253, label %cond.end257

cond.true253:                                     ; preds = %if.then249
  %arrayidx254 = getelementptr inbounds i8, i8* %_buffer.0, i64 21
  %66 = load i8, i8* %arrayidx254, align 1, !tbaa !87
  %conv255 = zext i8 %66 to i32
  br label %cond.end257

cond.end257:                                      ; preds = %if.then249, %cond.true253
  %cond258 = phi i32 [ %conv255, %cond.true253 ], [ 3, %if.then249 ]
  %add259 = add i32 %nintervals.0, %cond258
  br label %sw.epilog261

NewDefault4:                                      ; preds = %LeafBlock21, %LeafBlock17, %LeafBlock15, %LeafBlock9, %LeafBlock5
  br label %sw.epilog261

sw.epilog261:                                     ; preds = %NewDefault4, %sw.bb245, %cond.end257, %sw.bb229, %cond.end241, %do.body214, %if.then217, %sw.bb209, %sw.bb207
  %nintervals.3 = phi i32 [ %nintervals.0, %NewDefault4 ], [ %inc212, %sw.bb209 ], [ %nintervals.0, %sw.bb207 ], [ %nintervals.0, %if.then217 ], [ %nintervals.0, %do.body214 ], [ %add243, %cond.end241 ], [ %nintervals.0, %sw.bb229 ], [ %add259, %cond.end257 ], [ %nintervals.0, %sw.bb245 ]
  %nframes.1 = phi i32 [ %nframes.0, %NewDefault4 ], [ %inc211, %sw.bb209 ], [ %nframes.0, %sw.bb207 ], [ %nframes.0, %if.then217 ], [ %nframes.0, %do.body214 ], [ %inc230, %cond.end241 ], [ %inc230, %sw.bb229 ], [ %inc246, %cond.end257 ], [ %inc246, %sw.bb245 ]
  %nformats.1 = phi i32 [ %nformats.0, %NewDefault4 ], [ %inc210, %sw.bb209 ], [ %inc208, %sw.bb207 ], [ %nformats.0, %if.then217 ], [ %nformats.0, %do.body214 ], [ %nformats.0, %cond.end241 ], [ %nformats.0, %sw.bb229 ], [ %nformats.0, %cond.end257 ], [ %nformats.0, %sw.bb245 ]
  %arrayidx262 = getelementptr inbounds i8, i8* %_buffer.0, i64 0
  %67 = load i8, i8* %arrayidx262, align 1, !tbaa !87
  %conv263 = zext i8 %67 to i32
  %sub264 = sub nsw i32 %_buflen.0, %conv263
  %arrayidx265 = getelementptr inbounds i8, i8* %_buffer.0, i64 0
  %68 = load i8, i8* %arrayidx265, align 1, !tbaa !87
  %conv266 = zext i8 %68 to i32
  %idx.ext267 = sext i32 %conv266 to i64
  %add.ptr268 = getelementptr inbounds i8, i8* %_buffer.0, i64 %idx.ext267
  br label %while.cond195

while.end269:                                     ; preds = %while.cond195, %land.rhs198
  %cmp270 = icmp eq i32 %nformats.0, 0
  br i1 %cmp270, label %do.body273, label %if.end286

do.body273:                                       ; preds = %while.end269
  %69 = load i32, i32* @uvc_trace_param, align 4, !tbaa !23
  %and274 = and i32 %69, 2
  %tobool275 = icmp ne i32 %and274, 0
  br i1 %tobool275, label %if.then276, label %error

if.then276:                                       ; preds = %do.body273
  %udev277 = getelementptr inbounds %struct.uvc_device, %struct.uvc_device* %dev, i32 0, i32 0
  %70 = load %struct.usb_device*, %struct.usb_device** %udev277, align 8, !tbaa !32
  %devnum278 = getelementptr inbounds %struct.usb_device, %struct.usb_device* %70, i32 0, i32 0
  %71 = load i32, i32* %devnum278, align 8, !tbaa !99
  %desc279 = getelementptr inbounds %struct.usb_host_interface, %struct.usb_host_interface* %arrayidx, i32 0, i32 0
  %bInterfaceNumber280 = getelementptr inbounds %struct.usb_interface_descriptor, %struct.usb_interface_descriptor* %desc279, i32 0, i32 2
  %72 = load i8, i8* %bInterfaceNumber280, align 2, !tbaa !56
  %conv281 = zext i8 %72 to i32
  %call282 = call i32 (i8*, ...) @printk(i8* getelementptr inbounds ([85 x i8], [85 x i8]* @.str.42, i32 0, i32 0), i32 %71, i32 %conv281)
  br label %error

if.end286:                                        ; preds = %while.end269
  %conv287 = zext i32 %nformats.0 to i64
  %mul288 = mul i64 %conv287, 56
  %conv289 = zext i32 %nframes.0 to i64
  %mul290 = mul i64 %conv289, 40
  %add291 = add i64 %mul288, %mul290
  %conv292 = zext i32 %nintervals.0 to i64
  %mul293 = mul i64 %conv292, 4
  %add294 = add i64 %add291, %mul293
  %conv295 = trunc i64 %add294 to i32
  %conv296 = zext i32 %conv295 to i64
  %call297 = call i8* @kzalloc(i64 %conv296, i32 208)
  %73 = bitcast i8* %call297 to %struct.uvc_format*
  %cmp298 = icmp eq %struct.uvc_format* %73, null
  br i1 %cmp298, label %error, label %if.end301

if.end301:                                        ; preds = %if.end286
  %idxprom302 = zext i32 %nformats.0 to i64
  %arrayidx303 = getelementptr inbounds %struct.uvc_format, %struct.uvc_format* %73, i64 %idxprom302
  %74 = bitcast %struct.uvc_format* %arrayidx303 to %struct.uvc_frame*
  %idxprom304 = zext i32 %nframes.0 to i64
  %arrayidx305 = getelementptr inbounds %struct.uvc_frame, %struct.uvc_frame* %74, i64 %idxprom304
  %75 = bitcast %struct.uvc_frame* %arrayidx305 to i32*
  store i32* %75, i32** %interval, align 8, !tbaa !24
  %format306 = getelementptr inbounds %struct.uvc_streaming, %struct.uvc_streaming* %17, i32 0, i32 11
  store %struct.uvc_format* %73, %struct.uvc_format** %format306, align 8, !tbaa !123
  %nformats307 = getelementptr inbounds %struct.uvc_streaming, %struct.uvc_streaming* %17, i32 0, i32 10
  store i32 %nformats.0, i32* %nformats307, align 4, !tbaa !124
  br label %while.cond308.outer

while.cond308.outer:                              ; preds = %if.end326, %if.end301
  %buflen.5.ph = phi i32 [ %sub330, %if.end326 ], [ %sub190, %if.end301 ]
  %buffer.5.ph = phi i8* [ %add.ptr332, %if.end326 ], [ %add.ptr194, %if.end301 ]
  %frame.0.ph = phi %struct.uvc_frame* [ %add.ptr329, %if.end326 ], [ %74, %if.end301 ]
  %format.0.ph = phi %struct.uvc_format* [ %incdec.ptr, %if.end326 ], [ %73, %if.end301 ]
  br label %while.cond308

while.cond308:                                    ; preds = %while.cond308.outer, %sw.epilog334
  %buflen.5 = phi i32 [ %sub337, %sw.epilog334 ], [ %buflen.5.ph, %while.cond308.outer ]
  %buffer.5 = phi i8* [ %add.ptr341, %sw.epilog334 ], [ %buffer.5.ph, %while.cond308.outer ]
  %cmp309 = icmp sgt i32 %buflen.5, 2
  br i1 %cmp309, label %land.rhs311, label %while.end342

land.rhs311:                                      ; preds = %while.cond308
  %arrayidx312 = getelementptr inbounds i8, i8* %buffer.5, i64 1
  %76 = load i8, i8* %arrayidx312, align 1, !tbaa !87
  %conv313 = zext i8 %76 to i32
  %cmp314 = icmp eq i32 %conv313, 36
  br i1 %cmp314, label %while.body317, label %while.end342

while.body317:                                    ; preds = %land.rhs311
  %arrayidx318 = getelementptr inbounds i8, i8* %buffer.5, i64 2
  %77 = load i8, i8* %arrayidx318, align 1, !tbaa !87
  %conv319 = zext i8 %77 to i32
  %78 = sub i32 %conv319, 4
  %79 = lshr i32 %78, 1
  %80 = shl i32 %78, 31
  %81 = or i32 %79, %80
  br label %NodeBlock40

NodeBlock40:                                      ; preds = %while.body317
  %Pivot41 = icmp slt i32 %81, 4
  br i1 %Pivot41, label %LeafBlock32, label %NodeBlock38

NodeBlock38:                                      ; preds = %NodeBlock40
  %Pivot39 = icmp slt i32 %81, 6
  br i1 %Pivot39, label %LeafBlock34, label %LeafBlock36

LeafBlock36:                                      ; preds = %NodeBlock38
  %SwitchLeaf37 = icmp eq i32 %81, 6
  br i1 %SwitchLeaf37, label %sw.bb320, label %NewDefault31

LeafBlock34:                                      ; preds = %NodeBlock38
  %SwitchLeaf35 = icmp eq i32 %81, 4
  br i1 %SwitchLeaf35, label %sw.bb320, label %NewDefault31

LeafBlock32:                                      ; preds = %NodeBlock40
  %SwitchLeaf33 = icmp ule i32 %81, 1
  br i1 %SwitchLeaf33, label %sw.bb320, label %NewDefault31

sw.bb320:                                         ; preds = %LeafBlock36, %LeafBlock34, %LeafBlock32
  %frame321 = getelementptr inbounds %struct.uvc_format, %struct.uvc_format* %format.0.ph, i32 0, i32 8
  store %struct.uvc_frame* %frame.0.ph, %struct.uvc_frame** %frame321, align 8, !tbaa !125
  %call322 = call i32 @uvc_parse_format(%struct.uvc_device* %dev, %struct.uvc_streaming* %17, %struct.uvc_format* %format.0.ph, i32** %interval, i8* %buffer.5, i32 %buflen.5)
  %cmp323 = icmp slt i32 %call322, 0
  br i1 %cmp323, label %error, label %if.end326

if.end326:                                        ; preds = %sw.bb320
  %nframes327 = getelementptr inbounds %struct.uvc_format, %struct.uvc_format* %format.0.ph, i32 0, i32 7
  %82 = load i32, i32* %nframes327, align 4, !tbaa !127
  %idx.ext328 = zext i32 %82 to i64
  %add.ptr329 = getelementptr inbounds %struct.uvc_frame, %struct.uvc_frame* %frame.0.ph, i64 %idx.ext328
  %incdec.ptr = getelementptr inbounds %struct.uvc_format, %struct.uvc_format* %format.0.ph, i32 1
  %sub330 = sub nsw i32 %buflen.5, %call322
  %idx.ext331 = sext i32 %call322 to i64
  %add.ptr332 = getelementptr inbounds i8, i8* %buffer.5, i64 %idx.ext331
  br label %while.cond308.outer

NewDefault31:                                     ; preds = %LeafBlock36, %LeafBlock34, %LeafBlock32
  br label %sw.epilog334

sw.epilog334:                                     ; preds = %NewDefault31
  %arrayidx335 = getelementptr inbounds i8, i8* %buffer.5, i64 0
  %83 = load i8, i8* %arrayidx335, align 1, !tbaa !87
  %conv336 = zext i8 %83 to i32
  %sub337 = sub nsw i32 %buflen.5, %conv336
  %arrayidx338 = getelementptr inbounds i8, i8* %buffer.5, i64 0
  %84 = load i8, i8* %arrayidx338, align 1, !tbaa !87
  %conv339 = zext i8 %84 to i32
  %idx.ext340 = sext i32 %conv339 to i64
  %add.ptr341 = getelementptr inbounds i8, i8* %buffer.5, i64 %idx.ext340
  br label %while.cond308

while.end342:                                     ; preds = %while.cond308, %land.rhs311
  %tobool343 = icmp ne i32 %buflen.5, 0
  br i1 %tobool343, label %do.body345, label %if.end358

do.body345:                                       ; preds = %while.end342
  %85 = load i32, i32* @uvc_trace_param, align 4, !tbaa !23
  %and346 = and i32 %85, 2
  %tobool347 = icmp ne i32 %and346, 0
  br i1 %tobool347, label %if.then348, label %if.end358

if.then348:                                       ; preds = %do.body345
  %udev349 = getelementptr inbounds %struct.uvc_device, %struct.uvc_device* %dev, i32 0, i32 0
  %86 = load %struct.usb_device*, %struct.usb_device** %udev349, align 8, !tbaa !32
  %devnum350 = getelementptr inbounds %struct.usb_device, %struct.usb_device* %86, i32 0, i32 0
  %87 = load i32, i32* %devnum350, align 8, !tbaa !99
  %desc351 = getelementptr inbounds %struct.usb_host_interface, %struct.usb_host_interface* %arrayidx, i32 0, i32 0
  %bInterfaceNumber352 = getelementptr inbounds %struct.usb_interface_descriptor, %struct.usb_interface_descriptor* %desc351, i32 0, i32 2
  %88 = load i8, i8* %bInterfaceNumber352, align 2, !tbaa !56
  %conv353 = zext i8 %88 to i32
  %call354 = call i32 (i8*, ...) @printk(i8* getelementptr inbounds ([96 x i8], [96 x i8]* @.str.43, i32 0, i32 0), i32 %87, i32 %conv353, i32 %buflen.5)
  br label %if.end358

if.end358:                                        ; preds = %do.body345, %if.then348, %while.end342
  br label %for.cond359

for.cond359:                                      ; preds = %for.inc392, %if.end358
  %i.1 = phi i32 [ 0, %if.end358 ], [ %inc393, %for.inc392 ]
  %num_altsetting = getelementptr inbounds %struct.usb_interface, %struct.usb_interface* %intf, i32 0, i32 2
  %89 = load i32, i32* %num_altsetting, align 8, !tbaa !128
  %cmp360 = icmp ult i32 %i.1, %89
  br i1 %cmp360, label %for.body362, label %for.end394

for.body362:                                      ; preds = %for.cond359
  %altsetting364 = getelementptr inbounds %struct.usb_interface, %struct.usb_interface* %intf, i32 0, i32 0
  %90 = load %struct.usb_host_interface*, %struct.usb_host_interface** %altsetting364, align 8, !tbaa !108
  %idxprom365 = zext i32 %i.1 to i64
  %arrayidx366 = getelementptr inbounds %struct.usb_host_interface, %struct.usb_host_interface* %90, i64 %idxprom365
  %header367 = getelementptr inbounds %struct.uvc_streaming, %struct.uvc_streaming* %17, i32 0, i32 8
  %bEndpointAddress368 = getelementptr inbounds %struct.uvc_streaming_header, %struct.uvc_streaming_header* %header367, i32 0, i32 1
  %91 = load i8, i8* %bEndpointAddress368, align 1, !tbaa !115
  %call369 = call %struct.usb_host_endpoint* @uvc_find_endpoint(%struct.usb_host_interface* %arrayidx366, i8 zeroext %91)
  %cmp370 = icmp eq %struct.usb_host_endpoint* %call369, null
  br i1 %cmp370, label %for.inc392, label %if.end373

if.end373:                                        ; preds = %for.body362
  %desc374 = getelementptr inbounds %struct.usb_host_endpoint, %struct.usb_host_endpoint* %call369, i32 0, i32 0
  %wMaxPacketSize = getelementptr inbounds %struct.usb_endpoint_descriptor, %struct.usb_endpoint_descriptor* %desc374, i32 0, i32 4
  %92 = load i16, i16* %wMaxPacketSize, align 4, !tbaa !129
  %conv375 = zext i16 %92 to i32
  %and376 = and i32 %conv375, 2047
  %conv377 = zext i16 %92 to i32
  %shr = ashr i32 %conv377, 11
  %and378 = and i32 %shr, 3
  %add379 = add nsw i32 1, %and378
  %mul380 = mul nsw i32 %and376, %add379
  %conv381 = trunc i32 %mul380 to i16
  %conv382 = zext i16 %conv381 to i32
  %maxpsize = getelementptr inbounds %struct.uvc_streaming, %struct.uvc_streaming* %17, i32 0, i32 7
  %93 = load i16, i16* %maxpsize, align 4, !tbaa !130
  %conv383 = zext i16 %93 to i32
  %cmp384 = icmp sgt i32 %conv382, %conv383
  br i1 %cmp384, label %if.then386, label %for.inc392

if.then386:                                       ; preds = %if.end373
  %maxpsize387 = getelementptr inbounds %struct.uvc_streaming, %struct.uvc_streaming* %17, i32 0, i32 7
  store i16 %conv381, i16* %maxpsize387, align 4, !tbaa !130
  br label %for.inc392

for.inc392:                                       ; preds = %for.body362, %if.then386, %if.end373
  %inc393 = add i32 %i.1, 1
  br label %for.cond359

for.end394:                                       ; preds = %for.cond359
  %list = getelementptr inbounds %struct.uvc_streaming, %struct.uvc_streaming* %17, i32 0, i32 0
  %streams = getelementptr inbounds %struct.uvc_device, %struct.uvc_device* %dev, i32 0, i32 14
  call void @list_add_tail(%struct.list_head* %list, %struct.list_head* %streams)
  br label %cleanup398

error:                                            ; preds = %sw.bb320, %if.end286, %do.body273, %if.then276, %if.end173, %do.body138, %if.then141, %do.body108, %if.then111, %do.body95, %if.then98
  %ret.0 = phi i32 [ -22, %if.then98 ], [ -22, %do.body95 ], [ -22, %if.then111 ], [ -22, %do.body108 ], [ -22, %if.then141 ], [ -22, %do.body138 ], [ -12, %if.end173 ], [ -22, %if.then276 ], [ -22, %do.body273 ], [ -12, %if.end286 ], [ %call322, %sw.bb320 ]
  call void @usb_driver_release_interface(%struct.usb_driver* getelementptr inbounds (%struct.uvc_driver, %struct.uvc_driver* @uvc_driver, i32 0, i32 0), %struct.usb_interface* %intf)
  call void @usb_put_intf(%struct.usb_interface* %intf)
  %format395 = getelementptr inbounds %struct.uvc_streaming, %struct.uvc_streaming* %17, i32 0, i32 11
  %94 = load %struct.uvc_format*, %struct.uvc_format** %format395, align 8, !tbaa !123
  %95 = bitcast %struct.uvc_format* %94 to i8*
  call void @kfree(i8* %95)
  %header396 = getelementptr inbounds %struct.uvc_streaming, %struct.uvc_streaming* %17, i32 0, i32 8
  %bmaControls397 = getelementptr inbounds %struct.uvc_streaming_header, %struct.uvc_streaming_header* %header396, i32 0, i32 4
  %96 = load i8*, i8** %bmaControls397, align 8, !tbaa !122
  call void @kfree(i8* %96)
  %97 = bitcast %struct.uvc_streaming* %17 to i8*
  call void @kfree(i8* %97)
  br label %cleanup398

cleanup398:                                       ; preds = %do.body11, %if.then14, %do.body, %if.then2, %error, %for.end394, %if.then30
  %retval.0 = phi i32 [ -22, %if.then30 ], [ %ret.0, %error ], [ 0, %for.end394 ], [ -22, %if.then2 ], [ -22, %do.body ], [ -22, %if.then14 ], [ -22, %do.body11 ]
  %98 = bitcast i32** %interval to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %98) #5
  ret i32 %retval.0
}

; Function Attrs: inlinehint nounwind uwtable
define internal zeroext i16 @__le16_to_cpup(i16* %p) #0 {
entry:
  %0 = load i16, i16* %p, align 2, !tbaa !131
  ret i16 %0
}

; Function Attrs: inlinehint nounwind uwtable
define internal i32 @__le32_to_cpup(i32* %p) #0 {
entry:
  %0 = load i32, i32* %p, align 4, !tbaa !23
  ret i32 %0
}

declare i32 @usb_driver_claim_interface(%struct.usb_driver*, %struct.usb_interface*, i8*) #4

declare void @usb_driver_release_interface(%struct.usb_driver*, %struct.usb_interface*) #4

declare void @__mutex_init(%struct.mutex*, i8*, %struct.lock_class_key*) #4

declare i8* @kmemdup(i8*, i64, i32) #4

; Function Attrs: nounwind uwtable
define internal i32 @uvc_parse_format(%struct.uvc_device* %dev, %struct.uvc_streaming* %streaming, %struct.uvc_format* %format, i32** %intervals, i8* %buffer, i32 %buflen) #1 {
entry:
  %_min1 = alloca i32, align 4
  %_min2 = alloca i32, align 4
  %_max1 = alloca i32, align 4
  %_max2 = alloca i32, align 4
  %intf1 = getelementptr inbounds %struct.uvc_streaming, %struct.uvc_streaming* %streaming, i32 0, i32 5
  %0 = load %struct.usb_interface*, %struct.usb_interface** %intf1, align 8, !tbaa !69
  %cur_altsetting = getelementptr inbounds %struct.usb_interface, %struct.usb_interface* %0, i32 0, i32 1
  %1 = load %struct.usb_host_interface*, %struct.usb_host_interface** %cur_altsetting, align 8, !tbaa !41
  %arrayidx = getelementptr inbounds i8, i8* %buffer, i64 2
  %2 = load i8, i8* %arrayidx, align 1, !tbaa !87
  %type = getelementptr inbounds %struct.uvc_format, %struct.uvc_format* %format, i32 0, i32 0
  store i8 %2, i8* %type, align 8, !tbaa !132
  %arrayidx2 = getelementptr inbounds i8, i8* %buffer, i64 3
  %3 = load i8, i8* %arrayidx2, align 1, !tbaa !87
  %index = getelementptr inbounds %struct.uvc_format, %struct.uvc_format* %format, i32 0, i32 1
  store i8 %3, i8* %index, align 1, !tbaa !133
  %arrayidx3 = getelementptr inbounds i8, i8* %buffer, i64 2
  %4 = load i8, i8* %arrayidx3, align 1, !tbaa !87
  %conv = zext i8 %4 to i32
  %5 = sub i32 %conv, 4
  %6 = lshr i32 %5, 1
  %7 = shl i32 %5, 31
  %8 = or i32 %6, %7
  br label %NodeBlock17

NodeBlock17:                                      ; preds = %entry
  %Pivot18 = icmp slt i32 %8, 4
  br i1 %Pivot18, label %NodeBlock, label %NodeBlock15

NodeBlock15:                                      ; preds = %NodeBlock17
  %Pivot16 = icmp slt i32 %8, 6
  br i1 %Pivot16, label %LeafBlock11, label %LeafBlock13

LeafBlock13:                                      ; preds = %NodeBlock15
  %SwitchLeaf14 = icmp eq i32 %8, 6
  br i1 %SwitchLeaf14, label %sw.bb, label %NewDefault

LeafBlock11:                                      ; preds = %NodeBlock15
  %SwitchLeaf12 = icmp eq i32 %8, 4
  br i1 %SwitchLeaf12, label %sw.bb64, label %NewDefault

NodeBlock:                                        ; preds = %NodeBlock17
  %Pivot = icmp slt i32 %8, 1
  br i1 %Pivot, label %LeafBlock, label %LeafBlock9

LeafBlock9:                                       ; preds = %NodeBlock
  %SwitchLeaf10 = icmp eq i32 %8, 1
  br i1 %SwitchLeaf10, label %sw.bb40, label %NewDefault

LeafBlock:                                        ; preds = %NodeBlock
  %SwitchLeaf = icmp eq i32 %8, 0
  br i1 %SwitchLeaf, label %sw.bb, label %NewDefault

sw.bb:                                            ; preds = %LeafBlock13, %LeafBlock
  %arrayidx4 = getelementptr inbounds i8, i8* %buffer, i64 2
  %9 = load i8, i8* %arrayidx4, align 1, !tbaa !87
  %conv5 = zext i8 %9 to i32
  %cmp = icmp eq i32 %conv5, 4
  %10 = zext i1 %cmp to i64
  %cond = select i1 %cmp, i32 27, i32 28
  %cmp7 = icmp ult i32 %buflen, %cond
  br i1 %cmp7, label %do.body, label %if.end11

do.body:                                          ; preds = %sw.bb
  %11 = load i32, i32* @uvc_trace_param, align 4, !tbaa !23
  %and = and i32 %11, 2
  %tobool = icmp ne i32 %and, 0
  br i1 %tobool, label %if.then9, label %cleanup

if.then9:                                         ; preds = %do.body
  %udev = getelementptr inbounds %struct.uvc_device, %struct.uvc_device* %dev, i32 0, i32 0
  %12 = load %struct.usb_device*, %struct.usb_device** %udev, align 8, !tbaa !32
  %devnum = getelementptr inbounds %struct.usb_device, %struct.usb_device* %12, i32 0, i32 0
  %13 = load i32, i32* %devnum, align 8, !tbaa !99
  %desc = getelementptr inbounds %struct.usb_host_interface, %struct.usb_host_interface* %1, i32 0, i32 0
  %bInterfaceNumber = getelementptr inbounds %struct.usb_interface_descriptor, %struct.usb_interface_descriptor* %desc, i32 0, i32 2
  %14 = load i8, i8* %bInterfaceNumber, align 2, !tbaa !56
  %conv10 = zext i8 %14 to i32
  %call = call i32 (i8*, ...) @printk(i8* getelementptr inbounds ([64 x i8], [64 x i8]* @.str.44, i32 0, i32 0), i32 %13, i32 %conv10)
  br label %cleanup

if.end11:                                         ; preds = %sw.bb
  %arrayidx12 = getelementptr inbounds i8, i8* %buffer, i64 5
  %call13 = call %struct.uvc_format_desc* @uvc_format_by_guid(i8* %arrayidx12)
  %cmp14 = icmp ne %struct.uvc_format_desc* %call13, null
  br i1 %cmp14, label %if.then16, label %if.else

if.then16:                                        ; preds = %if.end11
  %name = getelementptr inbounds %struct.uvc_format, %struct.uvc_format* %format, i32 0, i32 6
  %arraydecay = getelementptr inbounds [32 x i8], [32 x i8]* %name, i32 0, i32 0
  %name17 = getelementptr inbounds %struct.uvc_format_desc, %struct.uvc_format_desc* %call13, i32 0, i32 0
  %15 = load i8*, i8** %name17, align 8, !tbaa !134
  %call18 = call i64 @strlcpy(i8* %arraydecay, i8* %15, i64 32)
  %fcc = getelementptr inbounds %struct.uvc_format_desc, %struct.uvc_format_desc* %call13, i32 0, i32 2
  %16 = load i32, i32* %fcc, align 8, !tbaa !136
  br label %if.end27

if.else:                                          ; preds = %if.end11
  %arrayidx20 = getelementptr inbounds i8, i8* %buffer, i64 5
  %call21 = call i32 (i8*, ...) @printk(i8* getelementptr inbounds ([39 x i8], [39 x i8]* @.str.45, i32 0, i32 0), i8* %arrayidx20)
  %name22 = getelementptr inbounds %struct.uvc_format, %struct.uvc_format* %format, i32 0, i32 6
  %arraydecay23 = getelementptr inbounds [32 x i8], [32 x i8]* %name22, i32 0, i32 0
  %arrayidx24 = getelementptr inbounds i8, i8* %buffer, i64 5
  %call25 = call i32 (i8*, i64, i8*, ...) @snprintf(i8* %arraydecay23, i64 32, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.46, i32 0, i32 0), i8* %arrayidx24)
  br label %if.end27

if.end27:                                         ; preds = %if.else, %if.then16
  %.sink = phi i32 [ 0, %if.else ], [ %16, %if.then16 ]
  %fcc26 = getelementptr inbounds %struct.uvc_format, %struct.uvc_format* %format, i32 0, i32 4
  store i32 %.sink, i32* %fcc26, align 4, !tbaa !137
  %arrayidx28 = getelementptr inbounds i8, i8* %buffer, i64 21
  %17 = load i8, i8* %arrayidx28, align 1, !tbaa !87
  %bpp = getelementptr inbounds %struct.uvc_format, %struct.uvc_format* %format, i32 0, i32 2
  store i8 %17, i8* %bpp, align 2, !tbaa !138
  %arrayidx29 = getelementptr inbounds i8, i8* %buffer, i64 2
  %18 = load i8, i8* %arrayidx29, align 1, !tbaa !87
  %conv30 = zext i8 %18 to i32
  %cmp31 = icmp eq i32 %conv30, 4
  br i1 %cmp31, label %do.body145, label %if.else34

if.else34:                                        ; preds = %if.end27
  %arrayidx35 = getelementptr inbounds i8, i8* %buffer, i64 27
  %19 = load i8, i8* %arrayidx35, align 1, !tbaa !87
  %tobool36 = icmp ne i8 %19, 0
  br i1 %tobool36, label %if.then37, label %do.body145

if.then37:                                        ; preds = %if.else34
  %flags = getelementptr inbounds %struct.uvc_format, %struct.uvc_format* %format, i32 0, i32 5
  store i32 1, i32* %flags, align 8, !tbaa !139
  br label %do.body145

sw.bb40:                                          ; preds = %LeafBlock9
  %cmp41 = icmp slt i32 %buflen, 11
  br i1 %cmp41, label %do.body44, label %if.end57

do.body44:                                        ; preds = %sw.bb40
  %20 = load i32, i32* @uvc_trace_param, align 4, !tbaa !23
  %and45 = and i32 %20, 2
  %tobool46 = icmp ne i32 %and45, 0
  br i1 %tobool46, label %if.then47, label %cleanup

if.then47:                                        ; preds = %do.body44
  %udev48 = getelementptr inbounds %struct.uvc_device, %struct.uvc_device* %dev, i32 0, i32 0
  %21 = load %struct.usb_device*, %struct.usb_device** %udev48, align 8, !tbaa !32
  %devnum49 = getelementptr inbounds %struct.usb_device, %struct.usb_device* %21, i32 0, i32 0
  %22 = load i32, i32* %devnum49, align 8, !tbaa !99
  %desc50 = getelementptr inbounds %struct.usb_host_interface, %struct.usb_host_interface* %1, i32 0, i32 0
  %bInterfaceNumber51 = getelementptr inbounds %struct.usb_interface_descriptor, %struct.usb_interface_descriptor* %desc50, i32 0, i32 2
  %23 = load i8, i8* %bInterfaceNumber51, align 2, !tbaa !56
  %conv52 = zext i8 %23 to i32
  %call53 = call i32 (i8*, ...) @printk(i8* getelementptr inbounds ([64 x i8], [64 x i8]* @.str.44, i32 0, i32 0), i32 %22, i32 %conv52)
  br label %cleanup

if.end57:                                         ; preds = %sw.bb40
  %name58 = getelementptr inbounds %struct.uvc_format, %struct.uvc_format* %format, i32 0, i32 6
  %arraydecay59 = getelementptr inbounds [32 x i8], [32 x i8]* %name58, i32 0, i32 0
  %call60 = call i64 @strlcpy(i8* %arraydecay59, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.47, i32 0, i32 0), i64 32)
  %fcc61 = getelementptr inbounds %struct.uvc_format, %struct.uvc_format* %format, i32 0, i32 4
  store i32 1196444237, i32* %fcc61, align 4, !tbaa !137
  %flags62 = getelementptr inbounds %struct.uvc_format, %struct.uvc_format* %format, i32 0, i32 5
  store i32 1, i32* %flags62, align 8, !tbaa !139
  %bpp63 = getelementptr inbounds %struct.uvc_format, %struct.uvc_format* %format, i32 0, i32 2
  store i8 0, i8* %bpp63, align 2, !tbaa !138
  br label %do.body145

sw.bb64:                                          ; preds = %LeafBlock11
  %cmp65 = icmp slt i32 %buflen, 9
  br i1 %cmp65, label %do.body68, label %if.end81

do.body68:                                        ; preds = %sw.bb64
  %24 = load i32, i32* @uvc_trace_param, align 4, !tbaa !23
  %and69 = and i32 %24, 2
  %tobool70 = icmp ne i32 %and69, 0
  br i1 %tobool70, label %if.then71, label %cleanup

if.then71:                                        ; preds = %do.body68
  %udev72 = getelementptr inbounds %struct.uvc_device, %struct.uvc_device* %dev, i32 0, i32 0
  %25 = load %struct.usb_device*, %struct.usb_device** %udev72, align 8, !tbaa !32
  %devnum73 = getelementptr inbounds %struct.usb_device, %struct.usb_device* %25, i32 0, i32 0
  %26 = load i32, i32* %devnum73, align 8, !tbaa !99
  %desc74 = getelementptr inbounds %struct.usb_host_interface, %struct.usb_host_interface* %1, i32 0, i32 0
  %bInterfaceNumber75 = getelementptr inbounds %struct.usb_interface_descriptor, %struct.usb_interface_descriptor* %desc74, i32 0, i32 2
  %27 = load i8, i8* %bInterfaceNumber75, align 2, !tbaa !56
  %conv76 = zext i8 %27 to i32
  %call77 = call i32 (i8*, ...) @printk(i8* getelementptr inbounds ([64 x i8], [64 x i8]* @.str.44, i32 0, i32 0), i32 %26, i32 %conv76)
  br label %cleanup

if.end81:                                         ; preds = %sw.bb64
  %arrayidx82 = getelementptr inbounds i8, i8* %buffer, i64 8
  %28 = load i8, i8* %arrayidx82, align 1, !tbaa !87
  %conv83 = zext i8 %28 to i32
  %and84 = and i32 %conv83, 127
  br label %NodeBlock26

NodeBlock26:                                      ; preds = %if.end81
  %Pivot27 = icmp slt i32 %and84, 1
  br i1 %Pivot27, label %LeafBlock20, label %NodeBlock24

NodeBlock24:                                      ; preds = %NodeBlock26
  %Pivot25 = icmp slt i32 %and84, 2
  br i1 %Pivot25, label %sw.bb89, label %LeafBlock22

LeafBlock22:                                      ; preds = %NodeBlock24
  %SwitchLeaf23 = icmp eq i32 %and84, 2
  br i1 %SwitchLeaf23, label %sw.bb93, label %NewDefault19

LeafBlock20:                                      ; preds = %NodeBlock26
  %SwitchLeaf21 = icmp eq i32 %and84, 0
  br i1 %SwitchLeaf21, label %sw.bb85, label %NewDefault19

sw.bb85:                                          ; preds = %LeafBlock20
  %name86 = getelementptr inbounds %struct.uvc_format, %struct.uvc_format* %format, i32 0, i32 6
  %arraydecay87 = getelementptr inbounds [32 x i8], [32 x i8]* %name86, i32 0, i32 0
  %call88 = call i64 @strlcpy(i8* %arraydecay87, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.48, i32 0, i32 0), i64 32)
  br label %sw.epilog

sw.bb89:                                          ; preds = %NodeBlock24
  %name90 = getelementptr inbounds %struct.uvc_format, %struct.uvc_format* %format, i32 0, i32 6
  %arraydecay91 = getelementptr inbounds [32 x i8], [32 x i8]* %name90, i32 0, i32 0
  %call92 = call i64 @strlcpy(i8* %arraydecay91, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.49, i32 0, i32 0), i64 32)
  br label %sw.epilog

sw.bb93:                                          ; preds = %LeafBlock22
  %name94 = getelementptr inbounds %struct.uvc_format, %struct.uvc_format* %format, i32 0, i32 6
  %arraydecay95 = getelementptr inbounds [32 x i8], [32 x i8]* %name94, i32 0, i32 0
  %call96 = call i64 @strlcpy(i8* %arraydecay95, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.50, i32 0, i32 0), i64 32)
  br label %sw.epilog

NewDefault19:                                     ; preds = %LeafBlock22, %LeafBlock20
  br label %do.body97

do.body97:                                        ; preds = %NewDefault19
  %29 = load i32, i32* @uvc_trace_param, align 4, !tbaa !23
  %and98 = and i32 %29, 2
  %tobool99 = icmp ne i32 %and98, 0
  br i1 %tobool99, label %if.then100, label %cleanup

if.then100:                                       ; preds = %do.body97
  %udev101 = getelementptr inbounds %struct.uvc_device, %struct.uvc_device* %dev, i32 0, i32 0
  %30 = load %struct.usb_device*, %struct.usb_device** %udev101, align 8, !tbaa !32
  %devnum102 = getelementptr inbounds %struct.usb_device, %struct.usb_device* %30, i32 0, i32 0
  %31 = load i32, i32* %devnum102, align 8, !tbaa !99
  %desc103 = getelementptr inbounds %struct.usb_host_interface, %struct.usb_host_interface* %1, i32 0, i32 0
  %bInterfaceNumber104 = getelementptr inbounds %struct.usb_interface_descriptor, %struct.usb_interface_descriptor* %desc103, i32 0, i32 2
  %32 = load i8, i8* %bInterfaceNumber104, align 2, !tbaa !56
  %conv105 = zext i8 %32 to i32
  %arrayidx106 = getelementptr inbounds i8, i8* %buffer, i64 8
  %33 = load i8, i8* %arrayidx106, align 1, !tbaa !87
  %conv107 = zext i8 %33 to i32
  %call108 = call i32 (i8*, ...) @printk(i8* getelementptr inbounds ([73 x i8], [73 x i8]* @.str.51, i32 0, i32 0), i32 %31, i32 %conv105, i32 %conv107)
  br label %cleanup

sw.epilog:                                        ; preds = %sw.bb93, %sw.bb89, %sw.bb85
  %name112 = getelementptr inbounds %struct.uvc_format, %struct.uvc_format* %format, i32 0, i32 6
  %arraydecay113 = getelementptr inbounds [32 x i8], [32 x i8]* %name112, i32 0, i32 0
  %arrayidx114 = getelementptr inbounds i8, i8* %buffer, i64 8
  %34 = load i8, i8* %arrayidx114, align 1, !tbaa !87
  %conv115 = zext i8 %34 to i32
  %and116 = and i32 %conv115, 128
  %tobool117 = icmp ne i32 %and116, 0
  %35 = zext i1 %tobool117 to i64
  %cond118 = select i1 %tobool117, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.52, i32 0, i32 0), i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.53, i32 0, i32 0)
  %call119 = call i64 @strlcat(i8* %arraydecay113, i8* %cond118, i64 32)
  %fcc120 = getelementptr inbounds %struct.uvc_format, %struct.uvc_format* %format, i32 0, i32 4
  store i32 1685288548, i32* %fcc120, align 4, !tbaa !137
  %flags121 = getelementptr inbounds %struct.uvc_format, %struct.uvc_format* %format, i32 0, i32 5
  store i32 3, i32* %flags121, align 8, !tbaa !139
  %bpp122 = getelementptr inbounds %struct.uvc_format, %struct.uvc_format* %format, i32 0, i32 2
  store i8 0, i8* %bpp122, align 2, !tbaa !138
  %frame123 = getelementptr inbounds %struct.uvc_format, %struct.uvc_format* %format, i32 0, i32 8
  %36 = load %struct.uvc_frame*, %struct.uvc_frame** %frame123, align 8, !tbaa !125
  %arrayidx124 = getelementptr inbounds %struct.uvc_frame, %struct.uvc_frame* %36, i64 0
  %frame125 = getelementptr inbounds %struct.uvc_format, %struct.uvc_format* %format, i32 0, i32 8
  %37 = load %struct.uvc_frame*, %struct.uvc_frame** %frame125, align 8, !tbaa !125
  %arrayidx126 = getelementptr inbounds %struct.uvc_frame, %struct.uvc_frame* %37, i64 0
  %38 = bitcast %struct.uvc_frame* %arrayidx126 to i8*
  call void @llvm.memset.p0i8.i64(i8* %38, i8 0, i64 40, i32 8, i1 false)
  %bFrameIntervalType = getelementptr inbounds %struct.uvc_frame, %struct.uvc_frame* %arrayidx124, i32 0, i32 7
  store i8 1, i8* %bFrameIntervalType, align 4, !tbaa !140
  %dwDefaultFrameInterval = getelementptr inbounds %struct.uvc_frame, %struct.uvc_frame* %arrayidx124, i32 0, i32 8
  store i32 1, i32* %dwDefaultFrameInterval, align 8, !tbaa !142
  %39 = load i32*, i32** %intervals, align 8, !tbaa !24
  %dwFrameInterval = getelementptr inbounds %struct.uvc_frame, %struct.uvc_frame* %arrayidx124, i32 0, i32 9
  store i32* %39, i32** %dwFrameInterval, align 8, !tbaa !143
  %40 = load i32*, i32** %intervals, align 8, !tbaa !24
  %incdec.ptr = getelementptr inbounds i32, i32* %40, i32 1
  store i32* %incdec.ptr, i32** %intervals, align 8, !tbaa !24
  store i32 1, i32* %40, align 4, !tbaa !23
  %nframes = getelementptr inbounds %struct.uvc_format, %struct.uvc_format* %format, i32 0, i32 7
  store i32 1, i32* %nframes, align 4, !tbaa !127
  br label %do.body145

NewDefault:                                       ; preds = %LeafBlock13, %LeafBlock11, %LeafBlock9, %LeafBlock
  br label %do.body129

do.body129:                                       ; preds = %NewDefault
  %41 = load i32, i32* @uvc_trace_param, align 4, !tbaa !23
  %and130 = and i32 %41, 2
  %tobool131 = icmp ne i32 %and130, 0
  br i1 %tobool131, label %if.then132, label %cleanup

if.then132:                                       ; preds = %do.body129
  %udev133 = getelementptr inbounds %struct.uvc_device, %struct.uvc_device* %dev, i32 0, i32 0
  %42 = load %struct.usb_device*, %struct.usb_device** %udev133, align 8, !tbaa !32
  %devnum134 = getelementptr inbounds %struct.usb_device, %struct.usb_device* %42, i32 0, i32 0
  %43 = load i32, i32* %devnum134, align 8, !tbaa !99
  %desc135 = getelementptr inbounds %struct.usb_host_interface, %struct.usb_host_interface* %1, i32 0, i32 0
  %bInterfaceNumber136 = getelementptr inbounds %struct.usb_interface_descriptor, %struct.usb_interface_descriptor* %desc135, i32 0, i32 2
  %44 = load i8, i8* %bInterfaceNumber136, align 2, !tbaa !56
  %conv137 = zext i8 %44 to i32
  %arrayidx138 = getelementptr inbounds i8, i8* %buffer, i64 2
  %45 = load i8, i8* %arrayidx138, align 1, !tbaa !87
  %conv139 = zext i8 %45 to i32
  %call140 = call i32 (i8*, ...) @printk(i8* getelementptr inbounds ([73 x i8], [73 x i8]* @.str.54, i32 0, i32 0), i32 %43, i32 %conv137, i32 %conv139)
  br label %cleanup

do.body145:                                       ; preds = %if.end57, %sw.epilog, %if.else34, %if.then37, %if.end27
  %ftype.1 = phi i8 [ 0, %sw.epilog ], [ 7, %if.end57 ], [ 5, %if.end27 ], [ 17, %if.then37 ], [ 17, %if.else34 ]
  %46 = load i32, i32* @uvc_trace_param, align 4, !tbaa !23
  %and146 = and i32 %46, 2
  %tobool147 = icmp ne i32 %and146, 0
  br i1 %tobool147, label %if.then148, label %do.end154

if.then148:                                       ; preds = %do.body145
  %name149 = getelementptr inbounds %struct.uvc_format, %struct.uvc_format* %format, i32 0, i32 6
  %arraydecay150 = getelementptr inbounds [32 x i8], [32 x i8]* %name149, i32 0, i32 0
  %call151 = call i32 (i8*, ...) @printk(i8* getelementptr inbounds ([30 x i8], [30 x i8]* @.str.55, i32 0, i32 0), i8* %arraydecay150)
  br label %do.end154

do.end154:                                        ; preds = %if.then148, %do.body145
  br label %while.cond

while.cond:                                       ; preds = %do.end323, %do.end154
  %add.ptr332.sink3 = phi i8* [ %add.ptr332, %do.end323 ], [ %buffer, %do.end154 ]
  %buflen.addr.0.sink = phi i32 [ %sub328, %do.end323 ], [ %buflen, %do.end154 ]
  %arrayidx326 = getelementptr inbounds i8, i8* %add.ptr332.sink3, i64 0
  %47 = load i8, i8* %arrayidx326, align 1, !tbaa !87
  %conv327 = zext i8 %47 to i32
  %sub328 = sub nsw i32 %buflen.addr.0.sink, %conv327
  %arrayidx329 = getelementptr inbounds i8, i8* %add.ptr332.sink3, i64 0
  %48 = load i8, i8* %arrayidx329, align 1, !tbaa !87
  %conv330 = zext i8 %48 to i32
  %idx.ext331 = sext i32 %conv330 to i64
  %add.ptr332 = getelementptr inbounds i8, i8* %add.ptr332.sink3, i64 %idx.ext331
  %cmp159 = icmp sgt i32 %sub328, 2
  br i1 %cmp159, label %land.lhs.true, label %while.end

land.lhs.true:                                    ; preds = %while.cond
  %arrayidx161 = getelementptr inbounds i8, i8* %add.ptr332, i64 1
  %49 = load i8, i8* %arrayidx161, align 1, !tbaa !87
  %conv162 = zext i8 %49 to i32
  %cmp163 = icmp eq i32 %conv162, 36
  br i1 %cmp163, label %land.rhs, label %while.end

land.rhs:                                         ; preds = %land.lhs.true
  %arrayidx165 = getelementptr inbounds i8, i8* %add.ptr332, i64 2
  %50 = load i8, i8* %arrayidx165, align 1, !tbaa !87
  %conv166 = zext i8 %50 to i32
  %conv167 = zext i8 %ftype.1 to i32
  %cmp168 = icmp eq i32 %conv166, %conv167
  br i1 %cmp168, label %while.body, label %while.end

while.body:                                       ; preds = %land.rhs
  %frame170 = getelementptr inbounds %struct.uvc_format, %struct.uvc_format* %format, i32 0, i32 8
  %51 = load %struct.uvc_frame*, %struct.uvc_frame** %frame170, align 8, !tbaa !125
  %nframes171 = getelementptr inbounds %struct.uvc_format, %struct.uvc_format* %format, i32 0, i32 7
  %52 = load i32, i32* %nframes171, align 4, !tbaa !127
  %idxprom = zext i32 %52 to i64
  %arrayidx172 = getelementptr inbounds %struct.uvc_frame, %struct.uvc_frame* %51, i64 %idxprom
  %conv173 = zext i8 %ftype.1 to i32
  %cmp174 = icmp ne i32 %conv173, 17
  br i1 %cmp174, label %if.then176, label %if.else182

if.then176:                                       ; preds = %while.body
  %cmp177 = icmp sgt i32 %sub328, 25
  br i1 %cmp177, label %cond.true, label %if.end191

cond.true:                                        ; preds = %if.then176
  %arrayidx179 = getelementptr inbounds i8, i8* %add.ptr332, i64 25
  %53 = load i8, i8* %arrayidx179, align 1, !tbaa !87
  %conv180 = zext i8 %53 to i32
  br label %if.end191

if.else182:                                       ; preds = %while.body
  %cmp183 = icmp sgt i32 %sub328, 21
  br i1 %cmp183, label %cond.true185, label %if.end191

cond.true185:                                     ; preds = %if.else182
  %arrayidx186 = getelementptr inbounds i8, i8* %add.ptr332, i64 21
  %54 = load i8, i8* %arrayidx186, align 1, !tbaa !87
  %conv187 = zext i8 %54 to i32
  br label %if.end191

if.end191:                                        ; preds = %cond.true185, %if.else182, %cond.true, %if.then176
  %n.0 = phi i32 [ %conv180, %cond.true ], [ 0, %if.then176 ], [ %conv187, %cond.true185 ], [ 0, %if.else182 ]
  %tobool192 = icmp ne i32 %n.0, 0
  %n.0. = select i1 %tobool192, i32 %n.0, i32 3
  %mul = mul i32 4, %n.0.
  %add = add i32 26, %mul
  %cmp197 = icmp ult i32 %sub328, %add
  br i1 %cmp197, label %do.body200, label %if.end213

do.body200:                                       ; preds = %if.end191
  %55 = load i32, i32* @uvc_trace_param, align 4, !tbaa !23
  %and201 = and i32 %55, 2
  %tobool202 = icmp ne i32 %and201, 0
  br i1 %tobool202, label %if.then203, label %cleanup

if.then203:                                       ; preds = %do.body200
  %udev204 = getelementptr inbounds %struct.uvc_device, %struct.uvc_device* %dev, i32 0, i32 0
  %56 = load %struct.usb_device*, %struct.usb_device** %udev204, align 8, !tbaa !32
  %devnum205 = getelementptr inbounds %struct.usb_device, %struct.usb_device* %56, i32 0, i32 0
  %57 = load i32, i32* %devnum205, align 8, !tbaa !99
  %desc206 = getelementptr inbounds %struct.usb_host_interface, %struct.usb_host_interface* %1, i32 0, i32 0
  %bInterfaceNumber207 = getelementptr inbounds %struct.usb_interface_descriptor, %struct.usb_interface_descriptor* %desc206, i32 0, i32 2
  %58 = load i8, i8* %bInterfaceNumber207, align 2, !tbaa !56
  %conv208 = zext i8 %58 to i32
  %call209 = call i32 (i8*, ...) @printk(i8* getelementptr inbounds ([63 x i8], [63 x i8]* @.str.56, i32 0, i32 0), i32 %57, i32 %conv208)
  br label %cleanup

if.end213:                                        ; preds = %if.end191
  %arrayidx214 = getelementptr inbounds i8, i8* %add.ptr332, i64 3
  %59 = load i8, i8* %arrayidx214, align 1, !tbaa !87
  %bFrameIndex = getelementptr inbounds %struct.uvc_frame, %struct.uvc_frame* %arrayidx172, i32 0, i32 0
  store i8 %59, i8* %bFrameIndex, align 8, !tbaa !144
  %arrayidx215 = getelementptr inbounds i8, i8* %add.ptr332, i64 4
  %60 = load i8, i8* %arrayidx215, align 1, !tbaa !87
  %bmCapabilities = getelementptr inbounds %struct.uvc_frame, %struct.uvc_frame* %arrayidx172, i32 0, i32 1
  store i8 %60, i8* %bmCapabilities, align 1, !tbaa !145
  %arrayidx216 = getelementptr inbounds i8, i8* %add.ptr332, i64 5
  %call217 = call zeroext i16 @get_unaligned_le16(i8* %arrayidx216)
  %wWidth = getelementptr inbounds %struct.uvc_frame, %struct.uvc_frame* %arrayidx172, i32 0, i32 2
  store i16 %call217, i16* %wWidth, align 2, !tbaa !146
  %arrayidx218 = getelementptr inbounds i8, i8* %add.ptr332, i64 7
  %call219 = call zeroext i16 @get_unaligned_le16(i8* %arrayidx218)
  %wHeight = getelementptr inbounds %struct.uvc_frame, %struct.uvc_frame* %arrayidx172, i32 0, i32 3
  store i16 %call219, i16* %wHeight, align 4, !tbaa !147
  %arrayidx220 = getelementptr inbounds i8, i8* %add.ptr332, i64 9
  %call221 = call i32 @get_unaligned_le32(i8* %arrayidx220)
  %dwMinBitRate = getelementptr inbounds %struct.uvc_frame, %struct.uvc_frame* %arrayidx172, i32 0, i32 4
  store i32 %call221, i32* %dwMinBitRate, align 8, !tbaa !148
  %arrayidx222 = getelementptr inbounds i8, i8* %add.ptr332, i64 13
  %call223 = call i32 @get_unaligned_le32(i8* %arrayidx222)
  %dwMaxBitRate = getelementptr inbounds %struct.uvc_frame, %struct.uvc_frame* %arrayidx172, i32 0, i32 5
  store i32 %call223, i32* %dwMaxBitRate, align 4, !tbaa !149
  %conv224 = zext i8 %ftype.1 to i32
  %cmp225 = icmp ne i32 %conv224, 17
  br i1 %cmp225, label %if.then227, label %if.end242

if.then227:                                       ; preds = %if.end213
  %arrayidx228 = getelementptr inbounds i8, i8* %add.ptr332, i64 17
  %call229 = call i32 @get_unaligned_le32(i8* %arrayidx228)
  br label %if.end242

if.end242:                                        ; preds = %if.end213, %if.then227
  %.sink8 = phi i32 [ %call229, %if.then227 ], [ 0, %if.end213 ]
  %.sink7 = phi i64 [ 21, %if.then227 ], [ 17, %if.end213 ]
  %.sink6 = phi i64 [ 25, %if.then227 ], [ 21, %if.end213 ]
  %dwMaxVideoFrameBufferSize236 = getelementptr inbounds %struct.uvc_frame, %struct.uvc_frame* %arrayidx172, i32 0, i32 6
  store i32 %.sink8, i32* %dwMaxVideoFrameBufferSize236, align 8, !tbaa !150
  %arrayidx237 = getelementptr inbounds i8, i8* %add.ptr332, i64 %.sink7
  %call238 = call i32 @get_unaligned_le32(i8* %arrayidx237)
  %dwDefaultFrameInterval239 = getelementptr inbounds %struct.uvc_frame, %struct.uvc_frame* %arrayidx172, i32 0, i32 8
  store i32 %call238, i32* %dwDefaultFrameInterval239, align 8, !tbaa !142
  %arrayidx240 = getelementptr inbounds i8, i8* %add.ptr332, i64 %.sink6
  %61 = load i8, i8* %arrayidx240, align 1, !tbaa !87
  %bFrameIntervalType241 = getelementptr inbounds %struct.uvc_frame, %struct.uvc_frame* %arrayidx172, i32 0, i32 7
  store i8 %61, i8* %bFrameIntervalType241, align 4, !tbaa !140
  %62 = load i32*, i32** %intervals, align 8, !tbaa !24
  %dwFrameInterval243 = getelementptr inbounds %struct.uvc_frame, %struct.uvc_frame* %arrayidx172, i32 0, i32 9
  store i32* %62, i32** %dwFrameInterval243, align 8, !tbaa !143
  %flags244 = getelementptr inbounds %struct.uvc_format, %struct.uvc_format* %format, i32 0, i32 5
  %63 = load i32, i32* %flags244, align 8, !tbaa !139
  %and245 = and i32 %63, 1
  %tobool246 = icmp ne i32 %and245, 0
  br i1 %tobool246, label %if.end257, label %if.then247

if.then247:                                       ; preds = %if.end242
  %bpp248 = getelementptr inbounds %struct.uvc_format, %struct.uvc_format* %format, i32 0, i32 2
  %64 = load i8, i8* %bpp248, align 2, !tbaa !138
  %conv249 = zext i8 %64 to i32
  %wWidth250 = getelementptr inbounds %struct.uvc_frame, %struct.uvc_frame* %arrayidx172, i32 0, i32 2
  %65 = load i16, i16* %wWidth250, align 2, !tbaa !146
  %conv251 = zext i16 %65 to i32
  %mul252 = mul nsw i32 %conv249, %conv251
  %wHeight253 = getelementptr inbounds %struct.uvc_frame, %struct.uvc_frame* %arrayidx172, i32 0, i32 3
  %66 = load i16, i16* %wHeight253, align 4, !tbaa !147
  %conv254 = zext i16 %66 to i32
  %mul255 = mul nsw i32 %mul252, %conv254
  %div = sdiv i32 %mul255, 8
  %dwMaxVideoFrameBufferSize256 = getelementptr inbounds %struct.uvc_frame, %struct.uvc_frame* %arrayidx172, i32 0, i32 6
  store i32 %div, i32* %dwMaxVideoFrameBufferSize256, align 8, !tbaa !150
  br label %if.end257

if.end257:                                        ; preds = %if.then247, %if.end242
  br label %for.cond

for.cond:                                         ; preds = %for.body, %if.end257
  %i.0 = phi i32 [ 0, %if.end257 ], [ %inc, %for.body ]
  %cmp258 = icmp ult i32 %i.0, %n.0.
  br i1 %cmp258, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %mul260 = mul i32 4, %i.0
  %add261 = add i32 26, %mul260
  %idxprom262 = zext i32 %add261 to i64
  %arrayidx263 = getelementptr inbounds i8, i8* %add.ptr332, i64 %idxprom262
  %call264 = call i32 @get_unaligned_le32(i8* %arrayidx263)
  %tobool265 = icmp ne i32 %call264, 0
  %call264. = select i1 %tobool265, i32 %call264, i32 1
  %67 = load i32*, i32** %intervals, align 8, !tbaa !24
  %incdec.ptr270 = getelementptr inbounds i32, i32* %67, i32 1
  store i32* %incdec.ptr270, i32** %intervals, align 8, !tbaa !24
  store i32 %call264., i32* %67, align 4, !tbaa !23
  %inc = add i32 %i.0, 1
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %bFrameIntervalType271 = getelementptr inbounds %struct.uvc_frame, %struct.uvc_frame* %arrayidx172, i32 0, i32 7
  %68 = load i8, i8* %bFrameIntervalType271, align 4, !tbaa !140
  %conv272 = zext i8 %68 to i32
  %tobool273 = icmp ne i32 %conv272, 0
  %69 = zext i1 %tobool273 to i64
  %cond274 = select i1 %tobool273, i32 1, i32 2
  %sub275 = sub i32 %n.0., %cond274
  %70 = bitcast i32* %_min1 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* %70) #5
  %dwFrameInterval276 = getelementptr inbounds %struct.uvc_frame, %struct.uvc_frame* %arrayidx172, i32 0, i32 9
  %71 = load i32*, i32** %dwFrameInterval276, align 8, !tbaa !143
  %idxprom277 = zext i32 %sub275 to i64
  %arrayidx278 = getelementptr inbounds i32, i32* %71, i64 %idxprom277
  %72 = load i32, i32* %arrayidx278, align 4, !tbaa !23
  store i32 %72, i32* %_min1, align 4, !tbaa !23
  %73 = bitcast i32* %_min2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* %73) #5
  %74 = bitcast i32* %_max1 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* %74) #5
  %dwFrameInterval279 = getelementptr inbounds %struct.uvc_frame, %struct.uvc_frame* %arrayidx172, i32 0, i32 9
  %75 = load i32*, i32** %dwFrameInterval279, align 8, !tbaa !143
  %arrayidx280 = getelementptr inbounds i32, i32* %75, i64 0
  %76 = load i32, i32* %arrayidx280, align 4, !tbaa !23
  store i32 %76, i32* %_max1, align 4, !tbaa !23
  %77 = bitcast i32* %_max2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* %77) #5
  %dwDefaultFrameInterval281 = getelementptr inbounds %struct.uvc_frame, %struct.uvc_frame* %arrayidx172, i32 0, i32 8
  %78 = load i32, i32* %dwDefaultFrameInterval281, align 8, !tbaa !142
  store i32 %78, i32* %_max2, align 4, !tbaa !23
  %cmp282 = icmp eq i32* %_max1, %_max2
  %conv283 = zext i1 %cmp282 to i32
  %79 = load i32, i32* %_max1, align 4, !tbaa !23
  %80 = load i32, i32* %_max2, align 4, !tbaa !23
  %cmp284 = icmp ugt i32 %79, %80
  %81 = load i32, i32* %_max1, align 4
  %82 = load i32, i32* %_max2, align 4
  %cond289 = select i1 %cmp284, i32 %81, i32 %82
  %83 = bitcast i32* %_max2 to i8*
  call void @llvm.lifetime.end.p0i8(i64 4, i8* %83) #5
  %84 = bitcast i32* %_max1 to i8*
  call void @llvm.lifetime.end.p0i8(i64 4, i8* %84) #5
  store i32 %cond289, i32* %_min2, align 4, !tbaa !23
  %cmp290 = icmp eq i32* %_min1, %_min2
  %conv291 = zext i1 %cmp290 to i32
  %85 = load i32, i32* %_min1, align 4, !tbaa !23
  %86 = load i32, i32* %_min2, align 4, !tbaa !23
  %cmp293 = icmp ult i32 %85, %86
  %87 = load i32, i32* %_min1, align 4
  %88 = load i32, i32* %_min2, align 4
  %cond298 = select i1 %cmp293, i32 %87, i32 %88
  %89 = bitcast i32* %_min2 to i8*
  call void @llvm.lifetime.end.p0i8(i64 4, i8* %89) #5
  %90 = bitcast i32* %_min1 to i8*
  call void @llvm.lifetime.end.p0i8(i64 4, i8* %90) #5
  %dwDefaultFrameInterval299 = getelementptr inbounds %struct.uvc_frame, %struct.uvc_frame* %arrayidx172, i32 0, i32 8
  store i32 %cond298, i32* %dwDefaultFrameInterval299, align 8, !tbaa !142
  %quirks = getelementptr inbounds %struct.uvc_device, %struct.uvc_device* %dev, i32 0, i32 3
  %91 = load i32, i32* %quirks, align 8, !tbaa !59
  %and300 = and i32 %91, 512
  %tobool301 = icmp ne i32 %and300, 0
  br i1 %tobool301, label %if.then302, label %do.body308

if.then302:                                       ; preds = %for.end
  %bFrameIntervalType303 = getelementptr inbounds %struct.uvc_frame, %struct.uvc_frame* %arrayidx172, i32 0, i32 7
  store i8 1, i8* %bFrameIntervalType303, align 4, !tbaa !140
  %dwDefaultFrameInterval304 = getelementptr inbounds %struct.uvc_frame, %struct.uvc_frame* %arrayidx172, i32 0, i32 8
  %92 = load i32, i32* %dwDefaultFrameInterval304, align 8, !tbaa !142
  %dwFrameInterval305 = getelementptr inbounds %struct.uvc_frame, %struct.uvc_frame* %arrayidx172, i32 0, i32 9
  %93 = load i32*, i32** %dwFrameInterval305, align 8, !tbaa !143
  %arrayidx306 = getelementptr inbounds i32, i32* %93, i64 0
  store i32 %92, i32* %arrayidx306, align 4, !tbaa !23
  br label %do.body308

do.body308:                                       ; preds = %for.end, %if.then302
  %94 = load i32, i32* @uvc_trace_param, align 4, !tbaa !23
  %and309 = and i32 %94, 2
  %tobool310 = icmp ne i32 %and309, 0
  br i1 %tobool310, label %if.then311, label %do.end323

if.then311:                                       ; preds = %do.body308
  %wWidth312 = getelementptr inbounds %struct.uvc_frame, %struct.uvc_frame* %arrayidx172, i32 0, i32 2
  %95 = load i16, i16* %wWidth312, align 2, !tbaa !146
  %conv313 = zext i16 %95 to i32
  %wHeight314 = getelementptr inbounds %struct.uvc_frame, %struct.uvc_frame* %arrayidx172, i32 0, i32 3
  %96 = load i16, i16* %wHeight314, align 4, !tbaa !147
  %conv315 = zext i16 %96 to i32
  %dwDefaultFrameInterval316 = getelementptr inbounds %struct.uvc_frame, %struct.uvc_frame* %arrayidx172, i32 0, i32 8
  %97 = load i32, i32* %dwDefaultFrameInterval316, align 8, !tbaa !142
  %div317 = udiv i32 10000000, %97
  %dwDefaultFrameInterval318 = getelementptr inbounds %struct.uvc_frame, %struct.uvc_frame* %arrayidx172, i32 0, i32 8
  %98 = load i32, i32* %dwDefaultFrameInterval318, align 8, !tbaa !142
  %div319 = udiv i32 100000000, %98
  %rem = urem i32 %div319, 10
  %call320 = call i32 (i8*, ...) @printk(i8* getelementptr inbounds ([33 x i8], [33 x i8]* @.str.57, i32 0, i32 0), i32 %conv313, i32 %conv315, i32 %div317, i32 %rem)
  br label %do.end323

do.end323:                                        ; preds = %if.then311, %do.body308
  %nframes324 = getelementptr inbounds %struct.uvc_format, %struct.uvc_format* %format, i32 0, i32 7
  %99 = load i32, i32* %nframes324, align 4, !tbaa !127
  %inc325 = add i32 %99, 1
  store i32 %inc325, i32* %nframes324, align 4, !tbaa !127
  br label %while.cond

while.end:                                        ; preds = %while.cond, %land.lhs.true, %land.rhs
  %cmp333 = icmp sgt i32 %sub328, 2
  br i1 %cmp333, label %land.lhs.true335, label %if.end353

land.lhs.true335:                                 ; preds = %while.end
  %arrayidx336 = getelementptr inbounds i8, i8* %add.ptr332, i64 1
  %100 = load i8, i8* %arrayidx336, align 1, !tbaa !87
  %conv337 = zext i8 %100 to i32
  %cmp338 = icmp eq i32 %conv337, 36
  br i1 %cmp338, label %land.lhs.true340, label %if.end353

land.lhs.true340:                                 ; preds = %land.lhs.true335
  %arrayidx341 = getelementptr inbounds i8, i8* %add.ptr332, i64 2
  %101 = load i8, i8* %arrayidx341, align 1, !tbaa !87
  %conv342 = zext i8 %101 to i32
  %cmp343 = icmp eq i32 %conv342, 3
  br i1 %cmp343, label %if.then345, label %if.end353

if.then345:                                       ; preds = %land.lhs.true340
  %arrayidx346 = getelementptr inbounds i8, i8* %add.ptr332, i64 0
  %102 = load i8, i8* %arrayidx346, align 1, !tbaa !87
  %conv347 = zext i8 %102 to i32
  %sub348 = sub nsw i32 %sub328, %conv347
  %arrayidx349 = getelementptr inbounds i8, i8* %add.ptr332, i64 0
  %103 = load i8, i8* %arrayidx349, align 1, !tbaa !87
  %conv350 = zext i8 %103 to i32
  %idx.ext351 = sext i32 %conv350 to i64
  %add.ptr352 = getelementptr inbounds i8, i8* %add.ptr332, i64 %idx.ext351
  br label %if.end353

if.end353:                                        ; preds = %if.then345, %land.lhs.true340, %land.lhs.true335, %while.end
  %buflen.addr.1 = phi i32 [ %sub348, %if.then345 ], [ %sub328, %land.lhs.true340 ], [ %sub328, %land.lhs.true335 ], [ %sub328, %while.end ]
  %buffer.addr.1 = phi i8* [ %add.ptr352, %if.then345 ], [ %add.ptr332, %land.lhs.true340 ], [ %add.ptr332, %land.lhs.true335 ], [ %add.ptr332, %while.end ]
  %cmp354 = icmp sgt i32 %buflen.addr.1, 2
  br i1 %cmp354, label %land.lhs.true356, label %if.end394

land.lhs.true356:                                 ; preds = %if.end353
  %arrayidx357 = getelementptr inbounds i8, i8* %buffer.addr.1, i64 1
  %104 = load i8, i8* %arrayidx357, align 1, !tbaa !87
  %conv358 = zext i8 %104 to i32
  %cmp359 = icmp eq i32 %conv358, 36
  br i1 %cmp359, label %land.lhs.true361, label %if.end394

land.lhs.true361:                                 ; preds = %land.lhs.true356
  %arrayidx362 = getelementptr inbounds i8, i8* %buffer.addr.1, i64 2
  %105 = load i8, i8* %arrayidx362, align 1, !tbaa !87
  %conv363 = zext i8 %105 to i32
  %cmp364 = icmp eq i32 %conv363, 13
  br i1 %cmp364, label %if.then366, label %if.end394

if.then366:                                       ; preds = %land.lhs.true361
  %cmp367 = icmp slt i32 %buflen.addr.1, 6
  br i1 %cmp367, label %do.body370, label %if.end383

do.body370:                                       ; preds = %if.then366
  %106 = load i32, i32* @uvc_trace_param, align 4, !tbaa !23
  %and371 = and i32 %106, 2
  %tobool372 = icmp ne i32 %and371, 0
  br i1 %tobool372, label %if.then373, label %cleanup

if.then373:                                       ; preds = %do.body370
  %udev374 = getelementptr inbounds %struct.uvc_device, %struct.uvc_device* %dev, i32 0, i32 0
  %107 = load %struct.usb_device*, %struct.usb_device** %udev374, align 8, !tbaa !32
  %devnum375 = getelementptr inbounds %struct.usb_device, %struct.usb_device* %107, i32 0, i32 0
  %108 = load i32, i32* %devnum375, align 8, !tbaa !99
  %desc376 = getelementptr inbounds %struct.usb_host_interface, %struct.usb_host_interface* %1, i32 0, i32 0
  %bInterfaceNumber377 = getelementptr inbounds %struct.usb_interface_descriptor, %struct.usb_interface_descriptor* %desc376, i32 0, i32 2
  %109 = load i8, i8* %bInterfaceNumber377, align 2, !tbaa !56
  %conv378 = zext i8 %109 to i32
  %call379 = call i32 (i8*, ...) @printk(i8* getelementptr inbounds ([69 x i8], [69 x i8]* @.str.58, i32 0, i32 0), i32 %108, i32 %conv378)
  br label %cleanup

if.end383:                                        ; preds = %if.then366
  %arrayidx384 = getelementptr inbounds i8, i8* %buffer.addr.1, i64 3
  %110 = load i8, i8* %arrayidx384, align 1, !tbaa !87
  %call385 = call i32 @uvc_colorspace(i8 zeroext %110)
  %conv386 = trunc i32 %call385 to i8
  %colorspace = getelementptr inbounds %struct.uvc_format, %struct.uvc_format* %format, i32 0, i32 3
  store i8 %conv386, i8* %colorspace, align 1, !tbaa !151
  %arrayidx387 = getelementptr inbounds i8, i8* %buffer.addr.1, i64 0
  %111 = load i8, i8* %arrayidx387, align 1, !tbaa !87
  %conv388 = zext i8 %111 to i32
  %sub389 = sub nsw i32 %buflen.addr.1, %conv388
  %arrayidx390 = getelementptr inbounds i8, i8* %buffer.addr.1, i64 0
  %112 = load i8, i8* %arrayidx390, align 1, !tbaa !87
  %conv391 = zext i8 %112 to i32
  %idx.ext392 = sext i32 %conv391 to i64
  %add.ptr393 = getelementptr inbounds i8, i8* %buffer.addr.1, i64 %idx.ext392
  br label %if.end394

if.end394:                                        ; preds = %if.end383, %land.lhs.true361, %land.lhs.true356, %if.end353
  %buffer.addr.2 = phi i8* [ %add.ptr393, %if.end383 ], [ %buffer.addr.1, %land.lhs.true361 ], [ %buffer.addr.1, %land.lhs.true356 ], [ %buffer.addr.1, %if.end353 ]
  %sub.ptr.lhs.cast = ptrtoint i8* %buffer.addr.2 to i64
  %sub.ptr.rhs.cast = ptrtoint i8* %buffer to i64
  %sub.ptr.sub = sub i64 %sub.ptr.lhs.cast, %sub.ptr.rhs.cast
  %conv395 = trunc i64 %sub.ptr.sub to i32
  br label %cleanup

cleanup:                                          ; preds = %do.body370, %if.then373, %do.body200, %if.then203, %do.body129, %if.then132, %do.body97, %if.then100, %do.body68, %if.then71, %do.body44, %if.then47, %do.body, %if.then9, %if.end394
  %retval.0 = phi i32 [ %conv395, %if.end394 ], [ -22, %if.then9 ], [ -22, %do.body ], [ -22, %if.then47 ], [ -22, %do.body44 ], [ -22, %if.then71 ], [ -22, %do.body68 ], [ -22, %if.then100 ], [ -22, %do.body97 ], [ -22, %if.then132 ], [ -22, %do.body129 ], [ -22, %if.then203 ], [ -22, %do.body200 ], [ -22, %if.then373 ], [ -22, %do.body370 ]
  ret i32 %retval.0
}

declare void @usb_put_intf(%struct.usb_interface*) #4

; Function Attrs: nounwind uwtable
define internal %struct.uvc_format_desc* @uvc_format_by_guid(i8* %guid) #1 {
entry:
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %i.0 = phi i32 [ 0, %entry ], [ %inc, %for.inc ]
  %cmp = icmp ult i32 %i.0, 16
  br i1 %cmp, label %for.body, label %cleanup

for.body:                                         ; preds = %for.cond
  %idxprom = zext i32 %i.0 to i64
  %arrayidx = getelementptr inbounds [16 x %struct.uvc_format_desc], [16 x %struct.uvc_format_desc]* @uvc_fmts, i64 0, i64 %idxprom
  %guid1 = getelementptr inbounds %struct.uvc_format_desc, %struct.uvc_format_desc* %arrayidx, i32 0, i32 1
  %arraydecay = getelementptr inbounds [16 x i8], [16 x i8]* %guid1, i32 0, i32 0
  %call = call i32 @memcmp(i8* %guid, i8* %arraydecay, i64 16)
  %cmp2 = icmp eq i32 %call, 0
  br i1 %cmp2, label %if.then, label %for.inc

if.then:                                          ; preds = %for.body
  %idxprom3 = zext i32 %i.0 to i64
  %arrayidx4 = getelementptr inbounds [16 x %struct.uvc_format_desc], [16 x %struct.uvc_format_desc]* @uvc_fmts, i64 0, i64 %idxprom3
  br label %cleanup

for.inc:                                          ; preds = %for.body
  %inc = add i32 %i.0, 1
  br label %for.cond

cleanup:                                          ; preds = %for.cond, %if.then
  %retval.0 = phi %struct.uvc_format_desc* [ %arrayidx4, %if.then ], [ null, %for.cond ]
  ret %struct.uvc_format_desc* %retval.0
}

declare i64 @strlcat(i8*, i8*, i64) #4

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i32, i1) #2

; Function Attrs: nounwind uwtable
define internal i32 @uvc_colorspace(i8 zeroext %primaries) #1 {
entry:
  %conv = zext i8 %primaries to i64
  %cmp = icmp ult i64 %conv, 6
  br i1 %cmp, label %if.then, label %return

if.then:                                          ; preds = %entry
  %idxprom = zext i8 %primaries to i64
  %arrayidx = getelementptr inbounds [6 x i8], [6 x i8]* @uvc_colorspace.colorprimaries, i64 0, i64 %idxprom
  %0 = load i8, i8* %arrayidx, align 1, !tbaa !87
  %conv2 = zext i8 %0 to i32
  br label %return

return:                                           ; preds = %entry, %if.then
  %retval.0 = phi i32 [ %conv2, %if.then ], [ 0, %entry ]
  ret i32 %retval.0
}

declare i32 @memcmp(i8*, i8*, i64) #4

; Function Attrs: inlinehint nounwind uwtable
define internal i32 @usb_endpoint_xfer_int(%struct.usb_endpoint_descriptor* %epd) #0 {
entry:
  %bmAttributes = getelementptr inbounds %struct.usb_endpoint_descriptor, %struct.usb_endpoint_descriptor* %epd, i32 0, i32 3
  %0 = load i8, i8* %bmAttributes, align 1, !tbaa !152
  %conv = zext i8 %0 to i32
  %and = and i32 %conv, 3
  %cmp = icmp eq i32 %and, 3
  %conv1 = zext i1 %cmp to i32
  ret i32 %conv1
}

; Function Attrs: inlinehint nounwind uwtable
define internal i32 @usb_endpoint_dir_in(%struct.usb_endpoint_descriptor* %epd) #0 {
entry:
  %bEndpointAddress = getelementptr inbounds %struct.usb_endpoint_descriptor, %struct.usb_endpoint_descriptor* %epd, i32 0, i32 2
  %0 = load i8, i8* %bEndpointAddress, align 1, !tbaa !90
  %conv = zext i8 %0 to i32
  %and = and i32 %conv, 128
  %cmp = icmp eq i32 %and, 128
  %conv1 = zext i1 %cmp to i32
  ret i32 %conv1
}

declare void @v4l2_prio_init(%struct.v4l2_prio_state*) #4

; Function Attrs: nounwind uwtable
define internal i32 @uvc_scan_chain(%struct.uvc_video_chain* %chain, %struct.uvc_entity* %term) #1 {
entry:
  %entity = alloca %struct.uvc_entity*, align 8
  %0 = bitcast %struct.uvc_entity** %entity to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %0) #5
  %1 = load i32, i32* @uvc_trace_param, align 4, !tbaa !23
  %and = and i32 %1, 1
  %tobool = icmp ne i32 %and, 0
  br i1 %tobool, label %if.then, label %do.end

if.then:                                          ; preds = %entry
  %call = call i32 (i8*, ...) @printk(i8* getelementptr inbounds ([32 x i8], [32 x i8]* @.str.76, i32 0, i32 0))
  br label %do.end

do.end:                                           ; preds = %if.then, %entry
  store %struct.uvc_entity* %term, %struct.uvc_entity** %entity, align 8, !tbaa !24
  br label %while.cond

while.cond:                                       ; preds = %if.end30, %do.end
  %prev.0 = phi %struct.uvc_entity* [ null, %do.end ], [ %12, %if.end30 ]
  %2 = load %struct.uvc_entity*, %struct.uvc_entity** %entity, align 8, !tbaa !24
  %cmp = icmp ne %struct.uvc_entity* %2, null
  br i1 %cmp, label %while.body, label %cleanup

while.body:                                       ; preds = %while.cond
  %3 = load %struct.uvc_entity*, %struct.uvc_entity** %entity, align 8, !tbaa !24
  %chain1 = getelementptr inbounds %struct.uvc_entity, %struct.uvc_entity* %3, i32 0, i32 1
  %next = getelementptr inbounds %struct.list_head, %struct.list_head* %chain1, i32 0, i32 0
  %4 = load %struct.list_head*, %struct.list_head** %next, align 8, !tbaa !93
  %tobool2 = icmp ne %struct.list_head* %4, null
  br i1 %tobool2, label %do.body7, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %while.body
  %5 = load %struct.uvc_entity*, %struct.uvc_entity** %entity, align 8, !tbaa !24
  %chain3 = getelementptr inbounds %struct.uvc_entity, %struct.uvc_entity* %5, i32 0, i32 1
  %prev4 = getelementptr inbounds %struct.list_head, %struct.list_head* %chain3, i32 0, i32 1
  %6 = load %struct.list_head*, %struct.list_head** %prev4, align 8, !tbaa !94
  %tobool5 = icmp ne %struct.list_head* %6, null
  br i1 %tobool5, label %do.body7, label %if.end15

do.body7:                                         ; preds = %while.body, %lor.lhs.false
  %7 = load i32, i32* @uvc_trace_param, align 4, !tbaa !23
  %and8 = and i32 %7, 2
  %tobool9 = icmp ne i32 %and8, 0
  br i1 %tobool9, label %if.then10, label %cleanup

if.then10:                                        ; preds = %do.body7
  %8 = load %struct.uvc_entity*, %struct.uvc_entity** %entity, align 8, !tbaa !24
  %id = getelementptr inbounds %struct.uvc_entity, %struct.uvc_entity* %8, i32 0, i32 3
  %9 = load i8, i8* %id, align 4, !tbaa !25
  %conv = zext i8 %9 to i32
  %call11 = call i32 (i8*, ...) @printk(i8* getelementptr inbounds ([60 x i8], [60 x i8]* @.str.77, i32 0, i32 0), i32 %conv)
  br label %cleanup

if.end15:                                         ; preds = %lor.lhs.false
  %10 = load %struct.uvc_entity*, %struct.uvc_entity** %entity, align 8, !tbaa !24
  %call16 = call i32 @uvc_scan_chain_entity(%struct.uvc_video_chain* %chain, %struct.uvc_entity* %10)
  %cmp17 = icmp slt i32 %call16, 0
  br i1 %cmp17, label %cleanup, label %if.end20

if.end20:                                         ; preds = %if.end15
  %11 = load %struct.uvc_entity*, %struct.uvc_entity** %entity, align 8, !tbaa !24
  %call21 = call i32 @uvc_scan_chain_forward(%struct.uvc_video_chain* %chain, %struct.uvc_entity* %11, %struct.uvc_entity* %prev.0)
  %cmp22 = icmp slt i32 %call21, 0
  br i1 %cmp22, label %cleanup, label %if.end25

if.end25:                                         ; preds = %if.end20
  %12 = load %struct.uvc_entity*, %struct.uvc_entity** %entity, align 8, !tbaa !24
  %call26 = call i32 @uvc_scan_chain_backward(%struct.uvc_video_chain* %chain, %struct.uvc_entity** %entity)
  %cmp27 = icmp slt i32 %call26, 0
  br i1 %cmp27, label %cleanup, label %if.end30

if.end30:                                         ; preds = %if.end25
  br label %while.cond

cleanup:                                          ; preds = %while.cond, %if.end25, %if.end20, %if.end15, %do.body7, %if.then10
  %retval.0 = phi i32 [ -22, %if.then10 ], [ -22, %do.body7 ], [ -22, %if.end15 ], [ -22, %if.end20 ], [ -22, %if.end25 ], [ 0, %while.cond ]
  %13 = bitcast %struct.uvc_entity** %entity to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %13) #5
  ret i32 %retval.0
}

; Function Attrs: nounwind uwtable
define internal i8* @uvc_print_chain(%struct.uvc_video_chain* %chain) #1 {
entry:
  %entities = getelementptr inbounds %struct.uvc_video_chain, %struct.uvc_video_chain* %chain, i32 0, i32 2
  %call = call i32 @uvc_print_terms(%struct.list_head* %entities, i16 zeroext 0, i8* getelementptr inbounds ([43 x i8], [43 x i8]* @uvc_print_chain.buffer, i32 0, i32 0))
  %idx.ext = zext i32 %call to i64
  %add.ptr = getelementptr inbounds i8, i8* getelementptr inbounds ([43 x i8], [43 x i8]* @uvc_print_chain.buffer, i32 0, i32 0), i64 %idx.ext
  %call1 = call i32 (i8*, i8*, ...) @sprintf(i8* %add.ptr, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.96, i32 0, i32 0))
  %idx.ext2 = sext i32 %call1 to i64
  %add.ptr3 = getelementptr inbounds i8, i8* %add.ptr, i64 %idx.ext2
  %entities4 = getelementptr inbounds %struct.uvc_video_chain, %struct.uvc_video_chain* %chain, i32 0, i32 2
  %call5 = call i32 @uvc_print_terms(%struct.list_head* %entities4, i16 zeroext -32768, i8* %add.ptr3)
  ret i8* getelementptr inbounds ([43 x i8], [43 x i8]* @uvc_print_chain.buffer, i32 0, i32 0)
}

; Function Attrs: inlinehint nounwind uwtable
define internal i32 @list_empty(%struct.list_head* %head) #0 {
entry:
  %next = getelementptr inbounds %struct.list_head, %struct.list_head* %head, i32 0, i32 0
  %0 = load %struct.list_head*, %struct.list_head** %next, align 8, !tbaa !82
  %cmp = icmp eq %struct.list_head* %0, %head
  %conv = zext i1 %cmp to i32
  ret i32 %conv
}

; Function Attrs: nounwind uwtable
define internal i32 @uvc_scan_chain_entity(%struct.uvc_video_chain* %chain, %struct.uvc_entity* %entity) #1 {
entry:
  %type = getelementptr inbounds %struct.uvc_entity, %struct.uvc_entity* %entity, i32 0, i32 4
  %0 = load i16, i16* %type, align 2, !tbaa !92
  %conv = zext i16 %0 to i32
  %and = and i32 %conv, 32767
  br label %NodeBlock16

NodeBlock16:                                      ; preds = %entry
  %Pivot17 = icmp slt i32 %and, 257
  br i1 %Pivot17, label %NodeBlock3, label %NodeBlock14

NodeBlock14:                                      ; preds = %NodeBlock16
  %Pivot15 = icmp slt i32 %and, 512
  br i1 %Pivot15, label %LeafBlock5, label %NodeBlock12

NodeBlock12:                                      ; preds = %NodeBlock14
  %Pivot13 = icmp slt i32 %and, 768
  br i1 %Pivot13, label %LeafBlock7, label %LeafBlock9

LeafBlock9:                                       ; preds = %NodeBlock12
  %and.off10 = add i32 %and, -768
  %SwitchLeaf11 = icmp ule i32 %and.off10, 2
  br i1 %SwitchLeaf11, label %sw.bb68, label %NewDefault

LeafBlock7:                                       ; preds = %NodeBlock12
  %and.off = add i32 %and, -512
  %SwitchLeaf8 = icmp ule i32 %and.off, 2
  br i1 %SwitchLeaf8, label %sw.bb60, label %NewDefault

LeafBlock5:                                       ; preds = %NodeBlock14
  %SwitchLeaf6 = icmp eq i32 %and, 257
  br i1 %SwitchLeaf6, label %sw.bb76, label %NewDefault

NodeBlock3:                                       ; preds = %NodeBlock16
  %Pivot4 = icmp slt i32 %and, 5
  br i1 %Pivot4, label %LeafBlock, label %NodeBlock

NodeBlock:                                        ; preds = %NodeBlock3
  %Pivot = icmp slt i32 %and, 6
  br i1 %Pivot, label %sw.bb14, label %LeafBlock1

LeafBlock1:                                       ; preds = %NodeBlock
  %SwitchLeaf2 = icmp eq i32 %and, 6
  br i1 %SwitchLeaf2, label %sw.bb, label %NewDefault

LeafBlock:                                        ; preds = %NodeBlock3
  %SwitchLeaf = icmp eq i32 %and, 4
  br i1 %SwitchLeaf, label %sw.bb34, label %NewDefault

sw.bb:                                            ; preds = %LeafBlock1
  %1 = load i32, i32* @uvc_trace_param, align 4, !tbaa !23
  %and1 = and i32 %1, 1
  %tobool = icmp ne i32 %and1, 0
  br i1 %tobool, label %if.then, label %if.end

if.then:                                          ; preds = %sw.bb
  %id = getelementptr inbounds %struct.uvc_entity, %struct.uvc_entity* %entity, i32 0, i32 3
  %2 = load i8, i8* %id, align 4, !tbaa !25
  %conv2 = zext i8 %2 to i32
  %call = call i32 (i8*, ...) @printk(i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.78, i32 0, i32 0), i32 %conv2)
  br label %if.end

if.end:                                           ; preds = %if.then, %sw.bb
  %bNrInPins = getelementptr inbounds %struct.uvc_entity, %struct.uvc_entity* %entity, i32 0, i32 12
  %3 = load i8, i8* %bNrInPins, align 8, !tbaa !107
  %conv3 = zext i8 %3 to i32
  %cmp = icmp ne i32 %conv3, 1
  br i1 %cmp, label %do.body, label %sw.epilog

do.body:                                          ; preds = %if.end
  %4 = load i32, i32* @uvc_trace_param, align 4, !tbaa !23
  %and6 = and i32 %4, 2
  %tobool7 = icmp ne i32 %and6, 0
  br i1 %tobool7, label %if.then8, label %return

if.then8:                                         ; preds = %do.body
  %id9 = getelementptr inbounds %struct.uvc_entity, %struct.uvc_entity* %entity, i32 0, i32 3
  %5 = load i8, i8* %id9, align 4, !tbaa !25
  %conv10 = zext i8 %5 to i32
  %call11 = call i32 (i8*, ...) @printk(i8* getelementptr inbounds ([58 x i8], [58 x i8]* @.str.79, i32 0, i32 0), i32 %conv10)
  br label %return

sw.bb14:                                          ; preds = %NodeBlock
  %6 = load i32, i32* @uvc_trace_param, align 4, !tbaa !23
  %and15 = and i32 %6, 1
  %tobool16 = icmp ne i32 %and15, 0
  br i1 %tobool16, label %if.then17, label %if.end21

if.then17:                                        ; preds = %sw.bb14
  %id18 = getelementptr inbounds %struct.uvc_entity, %struct.uvc_entity* %entity, i32 0, i32 3
  %7 = load i8, i8* %id18, align 4, !tbaa !25
  %conv19 = zext i8 %7 to i32
  %call20 = call i32 (i8*, ...) @printk(i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.80, i32 0, i32 0), i32 %conv19)
  br label %if.end21

if.end21:                                         ; preds = %if.then17, %sw.bb14
  %processing = getelementptr inbounds %struct.uvc_video_chain, %struct.uvc_video_chain* %chain, i32 0, i32 3
  %8 = load %struct.uvc_entity*, %struct.uvc_entity** %processing, align 8, !tbaa !153
  %cmp22 = icmp ne %struct.uvc_entity* %8, null
  br i1 %cmp22, label %do.body25, label %if.end32

do.body25:                                        ; preds = %if.end21
  %9 = load i32, i32* @uvc_trace_param, align 4, !tbaa !23
  %and26 = and i32 %9, 2
  %tobool27 = icmp ne i32 %and26, 0
  br i1 %tobool27, label %if.then28, label %return

if.then28:                                        ; preds = %do.body25
  %call29 = call i32 (i8*, ...) @printk(i8* getelementptr inbounds ([55 x i8], [55 x i8]* @.str.81, i32 0, i32 0))
  br label %return

if.end32:                                         ; preds = %if.end21
  %processing33 = getelementptr inbounds %struct.uvc_video_chain, %struct.uvc_video_chain* %chain, i32 0, i32 3
  store %struct.uvc_entity* %entity, %struct.uvc_entity** %processing33, align 8, !tbaa !153
  br label %sw.epilog

sw.bb34:                                          ; preds = %LeafBlock
  %10 = load i32, i32* @uvc_trace_param, align 4, !tbaa !23
  %and35 = and i32 %10, 1
  %tobool36 = icmp ne i32 %and35, 0
  br i1 %tobool36, label %if.then37, label %if.end41

if.then37:                                        ; preds = %sw.bb34
  %id38 = getelementptr inbounds %struct.uvc_entity, %struct.uvc_entity* %entity, i32 0, i32 3
  %11 = load i8, i8* %id38, align 4, !tbaa !25
  %conv39 = zext i8 %11 to i32
  %call40 = call i32 (i8*, ...) @printk(i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.82, i32 0, i32 0), i32 %conv39)
  br label %if.end41

if.end41:                                         ; preds = %if.then37, %sw.bb34
  %bNrInPins42 = getelementptr inbounds %struct.uvc_entity, %struct.uvc_entity* %entity, i32 0, i32 12
  %12 = load i8, i8* %bNrInPins42, align 8, !tbaa !107
  %conv43 = zext i8 %12 to i32
  %cmp44 = icmp eq i32 %conv43, 1
  br i1 %cmp44, label %sw.epilog, label %if.end47

if.end47:                                         ; preds = %if.end41
  %selector = getelementptr inbounds %struct.uvc_video_chain, %struct.uvc_video_chain* %chain, i32 0, i32 4
  %13 = load %struct.uvc_entity*, %struct.uvc_entity** %selector, align 8, !tbaa !154
  %cmp48 = icmp ne %struct.uvc_entity* %13, null
  br i1 %cmp48, label %do.body51, label %if.end58

do.body51:                                        ; preds = %if.end47
  %14 = load i32, i32* @uvc_trace_param, align 4, !tbaa !23
  %and52 = and i32 %14, 2
  %tobool53 = icmp ne i32 %and52, 0
  br i1 %tobool53, label %if.then54, label %return

if.then54:                                        ; preds = %do.body51
  %call55 = call i32 (i8*, ...) @printk(i8* getelementptr inbounds ([53 x i8], [53 x i8]* @.str.83, i32 0, i32 0))
  br label %return

if.end58:                                         ; preds = %if.end47
  %selector59 = getelementptr inbounds %struct.uvc_video_chain, %struct.uvc_video_chain* %chain, i32 0, i32 4
  store %struct.uvc_entity* %entity, %struct.uvc_entity** %selector59, align 8, !tbaa !154
  br label %sw.epilog

sw.bb60:                                          ; preds = %LeafBlock7
  %15 = load i32, i32* @uvc_trace_param, align 4, !tbaa !23
  %and61 = and i32 %15, 1
  %tobool62 = icmp ne i32 %and61, 0
  br i1 %tobool62, label %if.then63, label %sw.epilog

if.then63:                                        ; preds = %sw.bb60
  %id64 = getelementptr inbounds %struct.uvc_entity, %struct.uvc_entity* %entity, i32 0, i32 3
  %16 = load i8, i8* %id64, align 4, !tbaa !25
  %conv65 = zext i8 %16 to i32
  %call66 = call i32 (i8*, ...) @printk(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.84, i32 0, i32 0), i32 %conv65)
  br label %sw.epilog

sw.bb68:                                          ; preds = %LeafBlock9
  %17 = load i32, i32* @uvc_trace_param, align 4, !tbaa !23
  %and69 = and i32 %17, 1
  %tobool70 = icmp ne i32 %and69, 0
  br i1 %tobool70, label %if.then71, label %sw.epilog

if.then71:                                        ; preds = %sw.bb68
  %id72 = getelementptr inbounds %struct.uvc_entity, %struct.uvc_entity* %entity, i32 0, i32 3
  %18 = load i8, i8* %id72, align 4, !tbaa !25
  %conv73 = zext i8 %18 to i32
  %call74 = call i32 (i8*, ...) @printk(i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.85, i32 0, i32 0), i32 %conv73)
  br label %sw.epilog

sw.bb76:                                          ; preds = %LeafBlock5
  %type77 = getelementptr inbounds %struct.uvc_entity, %struct.uvc_entity* %entity, i32 0, i32 4
  %19 = load i16, i16* %type77, align 2, !tbaa !92
  %conv78 = zext i16 %19 to i32
  %and79 = and i32 %conv78, 65280
  %cmp80 = icmp ne i32 %and79, 0
  br i1 %cmp80, label %land.lhs.true, label %if.else

land.lhs.true:                                    ; preds = %sw.bb76
  %type82 = getelementptr inbounds %struct.uvc_entity, %struct.uvc_entity* %entity, i32 0, i32 4
  %20 = load i16, i16* %type82, align 2, !tbaa !92
  %conv83 = zext i16 %20 to i32
  %and84 = and i32 %conv83, 32768
  %cmp85 = icmp eq i32 %and84, 0
  br i1 %cmp85, label %if.then87, label %if.else

if.then87:                                        ; preds = %land.lhs.true
  %21 = load i32, i32* @uvc_trace_param, align 4, !tbaa !23
  %and88 = and i32 %21, 1
  %tobool89 = icmp ne i32 %and88, 0
  br i1 %tobool89, label %if.then90, label %sw.epilog

if.then90:                                        ; preds = %if.then87
  %id91 = getelementptr inbounds %struct.uvc_entity, %struct.uvc_entity* %entity, i32 0, i32 3
  %22 = load i8, i8* %id91, align 4, !tbaa !25
  %conv92 = zext i8 %22 to i32
  %call93 = call i32 (i8*, ...) @printk(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.84, i32 0, i32 0), i32 %conv92)
  br label %sw.epilog

if.else:                                          ; preds = %land.lhs.true, %sw.bb76
  %23 = load i32, i32* @uvc_trace_param, align 4, !tbaa !23
  %and95 = and i32 %23, 1
  %tobool96 = icmp ne i32 %and95, 0
  br i1 %tobool96, label %if.then97, label %sw.epilog

if.then97:                                        ; preds = %if.else
  %id98 = getelementptr inbounds %struct.uvc_entity, %struct.uvc_entity* %entity, i32 0, i32 3
  %24 = load i8, i8* %id98, align 4, !tbaa !25
  %conv99 = zext i8 %24 to i32
  %call100 = call i32 (i8*, ...) @printk(i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.85, i32 0, i32 0), i32 %conv99)
  br label %sw.epilog

NewDefault:                                       ; preds = %LeafBlock9, %LeafBlock7, %LeafBlock5, %LeafBlock1, %LeafBlock
  br label %do.body103

do.body103:                                       ; preds = %NewDefault
  %25 = load i32, i32* @uvc_trace_param, align 4, !tbaa !23
  %and104 = and i32 %25, 2
  %tobool105 = icmp ne i32 %and104, 0
  br i1 %tobool105, label %if.then106, label %return

if.then106:                                       ; preds = %do.body103
  %type107 = getelementptr inbounds %struct.uvc_entity, %struct.uvc_entity* %entity, i32 0, i32 4
  %26 = load i16, i16* %type107, align 2, !tbaa !92
  %conv108 = zext i16 %26 to i32
  %and109 = and i32 %conv108, 32767
  %call110 = call i32 (i8*, ...) @printk(i8* getelementptr inbounds ([60 x i8], [60 x i8]* @.str.86, i32 0, i32 0), i32 %and109)
  br label %return

sw.epilog:                                        ; preds = %if.then90, %if.then87, %if.then97, %if.else, %sw.bb68, %if.then71, %sw.bb60, %if.then63, %if.end41, %if.end, %if.end58, %if.end32
  %chain113 = getelementptr inbounds %struct.uvc_entity, %struct.uvc_entity* %entity, i32 0, i32 1
  %entities = getelementptr inbounds %struct.uvc_video_chain, %struct.uvc_video_chain* %chain, i32 0, i32 2
  call void @list_add_tail(%struct.list_head* %chain113, %struct.list_head* %entities)
  br label %return

return:                                           ; preds = %if.then106, %do.body103, %if.then54, %do.body51, %if.then28, %do.body25, %if.then8, %do.body, %sw.epilog
  %retval.0 = phi i32 [ 0, %sw.epilog ], [ -1, %do.body ], [ -1, %if.then8 ], [ -1, %do.body25 ], [ -1, %if.then28 ], [ -1, %do.body51 ], [ -1, %if.then54 ], [ -1, %do.body103 ], [ -1, %if.then106 ]
  ret i32 %retval.0
}

; Function Attrs: nounwind uwtable
define internal i32 @uvc_scan_chain_forward(%struct.uvc_video_chain* %chain, %struct.uvc_entity* %entity, %struct.uvc_entity* %prev) #1 {
entry:
  br label %while.cond.outer

while.cond.outer:                                 ; preds = %sw.epilog, %entry
  %forward.0.ph = phi %struct.uvc_entity* [ %call, %sw.epilog ], [ null, %entry ]
  %found.0.ph = phi i32 [ %found.3, %sw.epilog ], [ 0, %entry ]
  br label %while.cond

while.cond:                                       ; preds = %while.cond.outer, %if.then4
  %forward.0 = phi %struct.uvc_entity* [ %call, %if.then4 ], [ %forward.0.ph, %while.cond.outer ]
  %dev = getelementptr inbounds %struct.uvc_video_chain, %struct.uvc_video_chain* %chain, i32 0, i32 0
  %0 = load %struct.uvc_device*, %struct.uvc_device** %dev, align 8, !tbaa !95
  %id = getelementptr inbounds %struct.uvc_entity, %struct.uvc_entity* %entity, i32 0, i32 3
  %1 = load i8, i8* %id, align 4, !tbaa !25
  %conv = zext i8 %1 to i32
  %call = call %struct.uvc_entity* @uvc_entity_by_reference(%struct.uvc_device* %0, i32 %conv, %struct.uvc_entity* %forward.0)
  %cmp = icmp eq %struct.uvc_entity* %call, null
  br i1 %cmp, label %while.end, label %if.end

if.end:                                           ; preds = %while.cond
  %cmp2 = icmp eq %struct.uvc_entity* %call, %prev
  br i1 %cmp2, label %if.then4, label %if.end5

if.then4:                                         ; preds = %if.end
  br label %while.cond

if.end5:                                          ; preds = %if.end
  %type = getelementptr inbounds %struct.uvc_entity, %struct.uvc_entity* %call, i32 0, i32 4
  %2 = load i16, i16* %type, align 2, !tbaa !92
  %conv6 = zext i16 %2 to i32
  %and = and i32 %conv6, 32767
  br label %NodeBlock5

NodeBlock5:                                       ; preds = %if.end5
  %Pivot6 = icmp slt i32 %and, 257
  br i1 %Pivot6, label %LeafBlock, label %NodeBlock

NodeBlock:                                        ; preds = %NodeBlock5
  %Pivot = icmp slt i32 %and, 768
  br i1 %Pivot, label %LeafBlock1, label %LeafBlock3

LeafBlock3:                                       ; preds = %NodeBlock
  %and.off = add i32 %and, -768
  %SwitchLeaf4 = icmp ule i32 %and.off, 2
  br i1 %SwitchLeaf4, label %sw.bb30, label %NewDefault

LeafBlock1:                                       ; preds = %NodeBlock
  %SwitchLeaf2 = icmp eq i32 %and, 257
  br i1 %SwitchLeaf2, label %sw.bb30, label %NewDefault

LeafBlock:                                        ; preds = %NodeBlock5
  %SwitchLeaf = icmp eq i32 %and, 6
  br i1 %SwitchLeaf, label %sw.bb, label %NewDefault

sw.bb:                                            ; preds = %LeafBlock
  %bNrInPins = getelementptr inbounds %struct.uvc_entity, %struct.uvc_entity* %call, i32 0, i32 12
  %3 = load i8, i8* %bNrInPins, align 8, !tbaa !107
  %conv7 = zext i8 %3 to i32
  %cmp8 = icmp ne i32 %conv7, 1
  br i1 %cmp8, label %do.body, label %if.end17

do.body:                                          ; preds = %sw.bb
  %4 = load i32, i32* @uvc_trace_param, align 4, !tbaa !23
  %and11 = and i32 %4, 2
  %tobool = icmp ne i32 %and11, 0
  br i1 %tobool, label %if.then12, label %cleanup

if.then12:                                        ; preds = %do.body
  %id13 = getelementptr inbounds %struct.uvc_entity, %struct.uvc_entity* %entity, i32 0, i32 3
  %5 = load i8, i8* %id13, align 4, !tbaa !25
  %conv14 = zext i8 %5 to i32
  %call15 = call i32 (i8*, ...) @printk(i8* getelementptr inbounds ([58 x i8], [58 x i8]* @.str.79, i32 0, i32 0), i32 %conv14)
  br label %cleanup

if.end17:                                         ; preds = %sw.bb
  %chain18 = getelementptr inbounds %struct.uvc_entity, %struct.uvc_entity* %call, i32 0, i32 1
  %entities = getelementptr inbounds %struct.uvc_video_chain, %struct.uvc_video_chain* %chain, i32 0, i32 2
  call void @list_add_tail(%struct.list_head* %chain18, %struct.list_head* %entities)
  %6 = load i32, i32* @uvc_trace_param, align 4, !tbaa !23
  %and19 = and i32 %6, 1
  %tobool20 = icmp ne i32 %and19, 0
  br i1 %tobool20, label %if.then21, label %sw.epilog

if.then21:                                        ; preds = %if.end17
  %tobool22 = icmp ne i32 %found.0.ph, 0
  br i1 %tobool22, label %if.end25, label %if.then23

if.then23:                                        ; preds = %if.then21
  %call24 = call i32 (i8*, ...) @printk(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.87, i32 0, i32 0))
  br label %if.end25

if.end25:                                         ; preds = %if.then23, %if.then21
  %id26 = getelementptr inbounds %struct.uvc_entity, %struct.uvc_entity* %call, i32 0, i32 3
  %7 = load i8, i8* %id26, align 4, !tbaa !25
  %conv27 = zext i8 %7 to i32
  %call28 = call i32 (i8*, ...) @printk(i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.88, i32 0, i32 0), i32 %conv27)
  br label %sw.epilog

sw.bb30:                                          ; preds = %LeafBlock3, %LeafBlock1
  %type31 = getelementptr inbounds %struct.uvc_entity, %struct.uvc_entity* %call, i32 0, i32 4
  %8 = load i16, i16* %type31, align 2, !tbaa !92
  %conv32 = zext i16 %8 to i32
  %and33 = and i32 %conv32, 65280
  %cmp34 = icmp ne i32 %and33, 0
  br i1 %cmp34, label %land.lhs.true, label %if.end52

land.lhs.true:                                    ; preds = %sw.bb30
  %type36 = getelementptr inbounds %struct.uvc_entity, %struct.uvc_entity* %call, i32 0, i32 4
  %9 = load i16, i16* %type36, align 2, !tbaa !92
  %conv37 = zext i16 %9 to i32
  %and38 = and i32 %conv37, 32768
  %cmp39 = icmp eq i32 %and38, 0
  br i1 %cmp39, label %do.body42, label %if.end52

do.body42:                                        ; preds = %land.lhs.true
  %10 = load i32, i32* @uvc_trace_param, align 4, !tbaa !23
  %and43 = and i32 %10, 2
  %tobool44 = icmp ne i32 %and43, 0
  br i1 %tobool44, label %if.then45, label %cleanup

if.then45:                                        ; preds = %do.body42
  %id46 = getelementptr inbounds %struct.uvc_entity, %struct.uvc_entity* %call, i32 0, i32 3
  %11 = load i8, i8* %id46, align 4, !tbaa !25
  %conv47 = zext i8 %11 to i32
  %call48 = call i32 (i8*, ...) @printk(i8* getelementptr inbounds ([44 x i8], [44 x i8]* @.str.89, i32 0, i32 0), i32 %conv47)
  br label %cleanup

if.end52:                                         ; preds = %land.lhs.true, %sw.bb30
  %chain53 = getelementptr inbounds %struct.uvc_entity, %struct.uvc_entity* %call, i32 0, i32 1
  %entities54 = getelementptr inbounds %struct.uvc_video_chain, %struct.uvc_video_chain* %chain, i32 0, i32 2
  call void @list_add_tail(%struct.list_head* %chain53, %struct.list_head* %entities54)
  %12 = load i32, i32* @uvc_trace_param, align 4, !tbaa !23
  %and55 = and i32 %12, 1
  %tobool56 = icmp ne i32 %and55, 0
  br i1 %tobool56, label %if.then57, label %sw.epilog

if.then57:                                        ; preds = %if.end52
  %tobool58 = icmp ne i32 %found.0.ph, 0
  br i1 %tobool58, label %if.end61, label %if.then59

if.then59:                                        ; preds = %if.then57
  %call60 = call i32 (i8*, ...) @printk(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.87, i32 0, i32 0))
  br label %if.end61

if.end61:                                         ; preds = %if.then59, %if.then57
  %id62 = getelementptr inbounds %struct.uvc_entity, %struct.uvc_entity* %call, i32 0, i32 3
  %13 = load i8, i8* %id62, align 4, !tbaa !25
  %conv63 = zext i8 %13 to i32
  %call64 = call i32 (i8*, ...) @printk(i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.85, i32 0, i32 0), i32 %conv63)
  br label %sw.epilog

NewDefault:                                       ; preds = %LeafBlock3, %LeafBlock1, %LeafBlock
  br label %sw.epilog

sw.epilog:                                        ; preds = %NewDefault, %if.end52, %if.end61, %if.end17, %if.end25
  %found.3 = phi i32 [ %found.0.ph, %NewDefault ], [ 1, %if.end25 ], [ %found.0.ph, %if.end17 ], [ 1, %if.end61 ], [ %found.0.ph, %if.end52 ]
  br label %while.cond.outer

while.end:                                        ; preds = %while.cond
  %tobool66 = icmp ne i32 %found.0.ph, 0
  br i1 %tobool66, label %if.then67, label %cleanup

if.then67:                                        ; preds = %while.end
  %call68 = call i32 (i8*, ...) @printk(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.90, i32 0, i32 0))
  br label %cleanup

cleanup:                                          ; preds = %while.end, %if.then67, %do.body42, %if.then45, %do.body, %if.then12
  %retval.0 = phi i32 [ -22, %if.then12 ], [ -22, %do.body ], [ -22, %if.then45 ], [ -22, %do.body42 ], [ 0, %if.then67 ], [ 0, %while.end ]
  ret i32 %retval.0
}

; Function Attrs: nounwind uwtable
define internal i32 @uvc_scan_chain_backward(%struct.uvc_video_chain* %chain, %struct.uvc_entity** %_entity) #1 {
entry:
  %0 = load %struct.uvc_entity*, %struct.uvc_entity** %_entity, align 8, !tbaa !24
  %type = getelementptr inbounds %struct.uvc_entity, %struct.uvc_entity* %0, i32 0, i32 4
  %1 = load i16, i16* %type, align 2, !tbaa !92
  %conv = zext i16 %1 to i32
  %and = and i32 %conv, 32767
  br label %NodeBlock15

NodeBlock15:                                      ; preds = %entry
  %Pivot16 = icmp slt i32 %and, 257
  br i1 %Pivot16, label %NodeBlock, label %NodeBlock13

NodeBlock13:                                      ; preds = %NodeBlock15
  %Pivot14 = icmp slt i32 %and, 512
  br i1 %Pivot14, label %LeafBlock3, label %NodeBlock11

NodeBlock11:                                      ; preds = %NodeBlock13
  %Pivot12 = icmp slt i32 %and, 768
  br i1 %Pivot12, label %LeafBlock5, label %LeafBlock8

LeafBlock8:                                       ; preds = %NodeBlock11
  %and.off9 = add i32 %and, -768
  %SwitchLeaf10 = icmp ule i32 %and.off9, 2
  br i1 %SwitchLeaf10, label %sw.bb54, label %NewDefault

LeafBlock5:                                       ; preds = %NodeBlock11
  %and.off6 = add i32 %and, -512
  %SwitchLeaf7 = icmp ule i32 %and.off6, 2
  br i1 %SwitchLeaf7, label %sw.bb54, label %NewDefault

LeafBlock3:                                       ; preds = %NodeBlock13
  %SwitchLeaf4 = icmp eq i32 %and, 257
  br i1 %SwitchLeaf4, label %sw.bb54, label %NewDefault

NodeBlock:                                        ; preds = %NodeBlock15
  %Pivot = icmp slt i32 %and, 5
  br i1 %Pivot, label %LeafBlock, label %LeafBlock1

LeafBlock1:                                       ; preds = %NodeBlock
  %and.off = add i32 %and, -5
  %SwitchLeaf2 = icmp ule i32 %and.off, 1
  br i1 %SwitchLeaf2, label %sw.bb, label %NewDefault

LeafBlock:                                        ; preds = %NodeBlock
  %SwitchLeaf = icmp eq i32 %and, 4
  br i1 %SwitchLeaf, label %sw.bb2, label %NewDefault

sw.bb:                                            ; preds = %LeafBlock1
  %baSourceID = getelementptr inbounds %struct.uvc_entity, %struct.uvc_entity* %0, i32 0, i32 13
  %2 = load i8*, i8** %baSourceID, align 8, !tbaa !100
  %arrayidx = getelementptr inbounds i8, i8* %2, i64 0
  %3 = load i8, i8* %arrayidx, align 1, !tbaa !87
  %conv1 = zext i8 %3 to i32
  br label %sw.epilog

sw.bb2:                                           ; preds = %LeafBlock
  %bNrInPins = getelementptr inbounds %struct.uvc_entity, %struct.uvc_entity* %0, i32 0, i32 12
  %4 = load i8, i8* %bNrInPins, align 8, !tbaa !107
  %conv3 = zext i8 %4 to i32
  %cmp = icmp eq i32 %conv3, 1
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %sw.bb2
  %baSourceID5 = getelementptr inbounds %struct.uvc_entity, %struct.uvc_entity* %0, i32 0, i32 13
  %5 = load i8*, i8** %baSourceID5, align 8, !tbaa !100
  %arrayidx6 = getelementptr inbounds i8, i8* %5, i64 0
  %6 = load i8, i8* %arrayidx6, align 1, !tbaa !87
  %conv7 = zext i8 %6 to i32
  br label %sw.epilog

if.end:                                           ; preds = %sw.bb2
  %7 = load i32, i32* @uvc_trace_param, align 4, !tbaa !23
  %and8 = and i32 %7, 1
  %tobool = icmp ne i32 %and8, 0
  br i1 %tobool, label %if.then9, label %if.end10

if.then9:                                         ; preds = %if.end
  %call = call i32 (i8*, ...) @printk(i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.91, i32 0, i32 0))
  br label %if.end10

if.end10:                                         ; preds = %if.then9, %if.end
  %selector = getelementptr inbounds %struct.uvc_video_chain, %struct.uvc_video_chain* %chain, i32 0, i32 4
  store %struct.uvc_entity* %0, %struct.uvc_entity** %selector, align 8, !tbaa !154
  br label %for.cond

for.cond:                                         ; preds = %if.end46, %if.end10
  %i.0 = phi i32 [ 0, %if.end10 ], [ %inc, %if.end46 ]
  %bNrInPins11 = getelementptr inbounds %struct.uvc_entity, %struct.uvc_entity* %0, i32 0, i32 12
  %8 = load i8, i8* %bNrInPins11, align 8, !tbaa !107
  %conv12 = zext i8 %8 to i32
  %cmp13 = icmp slt i32 %i.0, %conv12
  br i1 %cmp13, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %baSourceID15 = getelementptr inbounds %struct.uvc_entity, %struct.uvc_entity* %0, i32 0, i32 13
  %9 = load i8*, i8** %baSourceID15, align 8, !tbaa !100
  %idxprom = sext i32 %i.0 to i64
  %arrayidx16 = getelementptr inbounds i8, i8* %9, i64 %idxprom
  %10 = load i8, i8* %arrayidx16, align 1, !tbaa !87
  %conv17 = zext i8 %10 to i32
  %dev = getelementptr inbounds %struct.uvc_video_chain, %struct.uvc_video_chain* %chain, i32 0, i32 0
  %11 = load %struct.uvc_device*, %struct.uvc_device** %dev, align 8, !tbaa !95
  %call18 = call %struct.uvc_entity* @uvc_entity_by_id(%struct.uvc_device* %11, i32 %conv17)
  %cmp19 = icmp eq %struct.uvc_entity* %call18, null
  br i1 %cmp19, label %do.body, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %for.body
  %type21 = getelementptr inbounds %struct.uvc_entity, %struct.uvc_entity* %call18, i32 0, i32 4
  %12 = load i16, i16* %type21, align 2, !tbaa !92
  %conv22 = zext i16 %12 to i32
  %and23 = and i32 %conv22, 65280
  %cmp24 = icmp ne i32 %and23, 0
  br i1 %cmp24, label %land.lhs.true, label %do.body

land.lhs.true:                                    ; preds = %lor.lhs.false
  %type26 = getelementptr inbounds %struct.uvc_entity, %struct.uvc_entity* %call18, i32 0, i32 4
  %13 = load i16, i16* %type26, align 2, !tbaa !92
  %conv27 = zext i16 %13 to i32
  %and28 = and i32 %conv27, 32768
  %cmp29 = icmp eq i32 %and28, 0
  br i1 %cmp29, label %if.end39, label %do.body

do.body:                                          ; preds = %for.body, %lor.lhs.false, %land.lhs.true
  %14 = load i32, i32* @uvc_trace_param, align 4, !tbaa !23
  %and32 = and i32 %14, 2
  %tobool33 = icmp ne i32 %and32, 0
  br i1 %tobool33, label %if.then34, label %cleanup

if.then34:                                        ; preds = %do.body
  %id35 = getelementptr inbounds %struct.uvc_entity, %struct.uvc_entity* %0, i32 0, i32 3
  %15 = load i8, i8* %id35, align 4, !tbaa !25
  %conv36 = zext i8 %15 to i32
  %call37 = call i32 (i8*, ...) @printk(i8* getelementptr inbounds ([76 x i8], [76 x i8]* @.str.92, i32 0, i32 0), i32 %conv36, i32 %i.0)
  br label %cleanup

if.end39:                                         ; preds = %land.lhs.true
  %16 = load i32, i32* @uvc_trace_param, align 4, !tbaa !23
  %and40 = and i32 %16, 1
  %tobool41 = icmp ne i32 %and40, 0
  br i1 %tobool41, label %if.then42, label %if.end46

if.then42:                                        ; preds = %if.end39
  %id43 = getelementptr inbounds %struct.uvc_entity, %struct.uvc_entity* %call18, i32 0, i32 3
  %17 = load i8, i8* %id43, align 4, !tbaa !25
  %conv44 = zext i8 %17 to i32
  %call45 = call i32 (i8*, ...) @printk(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.93, i32 0, i32 0), i32 %conv44)
  br label %if.end46

if.end46:                                         ; preds = %if.then42, %if.end39
  %chain47 = getelementptr inbounds %struct.uvc_entity, %struct.uvc_entity* %call18, i32 0, i32 1
  %entities = getelementptr inbounds %struct.uvc_video_chain, %struct.uvc_video_chain* %chain, i32 0, i32 2
  call void @list_add_tail(%struct.list_head* %chain47, %struct.list_head* %entities)
  %call48 = call i32 @uvc_scan_chain_forward(%struct.uvc_video_chain* %chain, %struct.uvc_entity* %call18, %struct.uvc_entity* %0)
  %inc = add nsw i32 %i.0, 1
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %18 = load i32, i32* @uvc_trace_param, align 4, !tbaa !23
  %and49 = and i32 %18, 1
  %tobool50 = icmp ne i32 %and49, 0
  br i1 %tobool50, label %if.then51, label %sw.epilog

if.then51:                                        ; preds = %for.end
  %call52 = call i32 (i8*, ...) @printk(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.94, i32 0, i32 0))
  br label %sw.epilog

sw.bb54:                                          ; preds = %LeafBlock8, %LeafBlock5, %LeafBlock3
  %type55 = getelementptr inbounds %struct.uvc_entity, %struct.uvc_entity* %0, i32 0, i32 4
  %19 = load i16, i16* %type55, align 2, !tbaa !92
  %conv56 = zext i16 %19 to i32
  %and57 = and i32 %conv56, 65280
  %cmp58 = icmp ne i32 %and57, 0
  br i1 %cmp58, label %land.lhs.true60, label %sw.epilog

land.lhs.true60:                                  ; preds = %sw.bb54
  %type61 = getelementptr inbounds %struct.uvc_entity, %struct.uvc_entity* %0, i32 0, i32 4
  %20 = load i16, i16* %type61, align 2, !tbaa !92
  %conv62 = zext i16 %20 to i32
  %and63 = and i32 %conv62, 32768
  %cmp64 = icmp eq i32 %and63, 32768
  br i1 %cmp64, label %cond.true, label %sw.epilog

cond.true:                                        ; preds = %land.lhs.true60
  %baSourceID66 = getelementptr inbounds %struct.uvc_entity, %struct.uvc_entity* %0, i32 0, i32 13
  %21 = load i8*, i8** %baSourceID66, align 8, !tbaa !100
  %arrayidx67 = getelementptr inbounds i8, i8* %21, i64 0
  %22 = load i8, i8* %arrayidx67, align 1, !tbaa !87
  %conv68 = zext i8 %22 to i32
  br label %sw.epilog

NewDefault:                                       ; preds = %LeafBlock8, %LeafBlock5, %LeafBlock3, %LeafBlock1, %LeafBlock
  br label %sw.epilog

sw.epilog:                                        ; preds = %NewDefault, %cond.true, %land.lhs.true60, %sw.bb54, %for.end, %if.then51, %if.then, %sw.bb
  %id.0 = phi i32 [ -22, %NewDefault ], [ %conv7, %if.then ], [ %conv1, %sw.bb ], [ 0, %if.then51 ], [ 0, %for.end ], [ %conv68, %cond.true ], [ 0, %land.lhs.true60 ], [ 0, %sw.bb54 ]
  %cmp69 = icmp sle i32 %id.0, 0
  br i1 %cmp69, label %if.then71, label %if.end72

if.then71:                                        ; preds = %sw.epilog
  store %struct.uvc_entity* null, %struct.uvc_entity** %_entity, align 8, !tbaa !24
  br label %cleanup

if.end72:                                         ; preds = %sw.epilog
  %dev73 = getelementptr inbounds %struct.uvc_video_chain, %struct.uvc_video_chain* %chain, i32 0, i32 0
  %23 = load %struct.uvc_device*, %struct.uvc_device** %dev73, align 8, !tbaa !95
  %call74 = call %struct.uvc_entity* @uvc_entity_by_id(%struct.uvc_device* %23, i32 %id.0)
  %cmp75 = icmp eq %struct.uvc_entity* %call74, null
  br i1 %cmp75, label %do.body78, label %if.end86

do.body78:                                        ; preds = %if.end72
  %24 = load i32, i32* @uvc_trace_param, align 4, !tbaa !23
  %and79 = and i32 %24, 2
  %tobool80 = icmp ne i32 %and79, 0
  br i1 %tobool80, label %if.then81, label %cleanup

if.then81:                                        ; preds = %do.body78
  %call82 = call i32 (i8*, ...) @printk(i8* getelementptr inbounds ([51 x i8], [51 x i8]* @.str.95, i32 0, i32 0), i32 %id.0)
  br label %cleanup

if.end86:                                         ; preds = %if.end72
  store %struct.uvc_entity* %call74, %struct.uvc_entity** %_entity, align 8, !tbaa !24
  br label %cleanup

cleanup:                                          ; preds = %do.body78, %if.then81, %do.body, %if.then34, %if.end86, %if.then71
  %retval.0 = phi i32 [ %id.0, %if.then71 ], [ 0, %if.end86 ], [ -1, %if.then34 ], [ -1, %do.body ], [ -22, %if.then81 ], [ -22, %do.body78 ]
  ret i32 %retval.0
}

; Function Attrs: nounwind uwtable
define internal %struct.uvc_entity* @uvc_entity_by_reference(%struct.uvc_device* %dev, i32 %id, %struct.uvc_entity* %entity) #1 {
entry:
  %cmp = icmp eq %struct.uvc_entity* %entity, null
  %entities = getelementptr inbounds %struct.uvc_device, %struct.uvc_device* %dev, i32 0, i32 12
  %0 = bitcast %struct.list_head* %entities to i8*
  %add.ptr = getelementptr inbounds i8, i8* %0, i64 0
  %1 = bitcast i8* %add.ptr to %struct.uvc_entity*
  %entity.addr.0 = select i1 %cmp, %struct.uvc_entity* %1, %struct.uvc_entity* %entity
  br label %for.cond

for.cond:                                         ; preds = %for.inc16, %entry
  %.sink = phi %struct.uvc_entity* [ %4, %for.inc16 ], [ %entity.addr.0, %entry ]
  %list18 = getelementptr inbounds %struct.uvc_entity, %struct.uvc_entity* %.sink, i32 0, i32 0
  %next19 = getelementptr inbounds %struct.list_head, %struct.list_head* %list18, i32 0, i32 0
  %2 = load %struct.list_head*, %struct.list_head** %next19, align 8, !tbaa !155
  %3 = bitcast %struct.list_head* %2 to i8*
  %add.ptr21 = getelementptr inbounds i8, i8* %3, i64 0
  %4 = bitcast i8* %add.ptr21 to %struct.uvc_entity*
  %list4 = getelementptr inbounds %struct.uvc_entity, %struct.uvc_entity* %4, i32 0, i32 0
  %entities5 = getelementptr inbounds %struct.uvc_device, %struct.uvc_device* %dev, i32 0, i32 12
  %cmp6 = icmp ne %struct.list_head* %list4, %entities5
  br i1 %cmp6, label %for.body, label %cleanup

for.body:                                         ; preds = %for.cond
  br label %for.cond7

for.cond7:                                        ; preds = %for.inc, %for.body
  %i.0 = phi i32 [ 0, %for.body ], [ %inc, %for.inc ]
  %bNrInPins = getelementptr inbounds %struct.uvc_entity, %struct.uvc_entity* %4, i32 0, i32 12
  %5 = load i8, i8* %bNrInPins, align 8, !tbaa !107
  %conv = zext i8 %5 to i32
  %cmp8 = icmp ult i32 %i.0, %conv
  br i1 %cmp8, label %for.body10, label %for.inc16

for.body10:                                       ; preds = %for.cond7
  %baSourceID = getelementptr inbounds %struct.uvc_entity, %struct.uvc_entity* %4, i32 0, i32 13
  %6 = load i8*, i8** %baSourceID, align 8, !tbaa !100
  %idxprom = zext i32 %i.0 to i64
  %arrayidx = getelementptr inbounds i8, i8* %6, i64 %idxprom
  %7 = load i8, i8* %arrayidx, align 1, !tbaa !87
  %conv11 = zext i8 %7 to i32
  %cmp12 = icmp eq i32 %conv11, %id
  br i1 %cmp12, label %cleanup, label %for.inc

for.inc:                                          ; preds = %for.body10
  %inc = add i32 %i.0, 1
  br label %for.cond7

for.inc16:                                        ; preds = %for.cond7
  br label %for.cond

cleanup:                                          ; preds = %for.cond, %for.body10
  %retval.0 = phi %struct.uvc_entity* [ %4, %for.body10 ], [ null, %for.cond ]
  ret %struct.uvc_entity* %retval.0
}

; Function Attrs: nounwind uwtable
define internal i32 @uvc_print_terms(%struct.list_head* %terms, i16 zeroext %dir, i8* %buffer) #1 {
entry:
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %chain24.sink = phi %struct.list_head* [ %chain24, %for.inc ], [ %terms, %entry ]
  %nterms.0 = phi i32 [ 0, %entry ], [ %nterms.1, %for.inc ]
  %p.0 = phi i8* [ %buffer, %entry ], [ %p.2, %for.inc ]
  %next25 = getelementptr inbounds %struct.list_head, %struct.list_head* %chain24.sink, i32 0, i32 0
  %0 = load %struct.list_head*, %struct.list_head** %next25, align 8, !tbaa !24
  %1 = bitcast %struct.list_head* %0 to i8*
  %add.ptr27 = getelementptr inbounds i8, i8* %1, i64 -16
  %2 = bitcast i8* %add.ptr27 to %struct.uvc_entity*
  %chain = getelementptr inbounds %struct.uvc_entity, %struct.uvc_entity* %2, i32 0, i32 1
  %cmp = icmp ne %struct.list_head* %chain, %terms
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %type = getelementptr inbounds %struct.uvc_entity, %struct.uvc_entity* %2, i32 0, i32 4
  %3 = load i16, i16* %type, align 2, !tbaa !92
  %conv = zext i16 %3 to i32
  %and = and i32 %conv, 65280
  %cmp1 = icmp ne i32 %and, 0
  br i1 %cmp1, label %lor.lhs.false, label %for.inc

lor.lhs.false:                                    ; preds = %for.body
  %type3 = getelementptr inbounds %struct.uvc_entity, %struct.uvc_entity* %2, i32 0, i32 4
  %4 = load i16, i16* %type3, align 2, !tbaa !92
  %conv4 = zext i16 %4 to i32
  %and5 = and i32 %conv4, 32768
  %conv6 = zext i16 %dir to i32
  %cmp7 = icmp ne i32 %and5, %conv6
  br i1 %cmp7, label %for.inc, label %if.end

if.end:                                           ; preds = %lor.lhs.false
  %tobool = icmp ne i32 %nterms.0, 0
  br i1 %tobool, label %if.then9, label %if.end11

if.then9:                                         ; preds = %if.end
  %call = call i32 (i8*, i8*, ...) @sprintf(i8* %p.0, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.97, i32 0, i32 0))
  %idx.ext = sext i32 %call to i64
  %add.ptr10 = getelementptr inbounds i8, i8* %p.0, i64 %idx.ext
  br label %if.end11

if.end11:                                         ; preds = %if.then9, %if.end
  %p.1 = phi i8* [ %add.ptr10, %if.then9 ], [ %p.0, %if.end ]
  %inc = add i32 %nterms.0, 1
  %cmp12 = icmp uge i32 %inc, 4
  br i1 %cmp12, label %if.then14, label %if.end18

if.then14:                                        ; preds = %if.end11
  %call15 = call i32 (i8*, i8*, ...) @sprintf(i8* %p.1, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.98, i32 0, i32 0))
  %idx.ext16 = sext i32 %call15 to i64
  %add.ptr17 = getelementptr inbounds i8, i8* %p.1, i64 %idx.ext16
  br label %for.end

if.end18:                                         ; preds = %if.end11
  %id = getelementptr inbounds %struct.uvc_entity, %struct.uvc_entity* %2, i32 0, i32 3
  %5 = load i8, i8* %id, align 4, !tbaa !25
  %conv19 = zext i8 %5 to i32
  %call20 = call i32 (i8*, i8*, ...) @sprintf(i8* %p.1, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.99, i32 0, i32 0), i32 %conv19)
  %idx.ext21 = sext i32 %call20 to i64
  %add.ptr22 = getelementptr inbounds i8, i8* %p.1, i64 %idx.ext21
  br label %for.inc

for.inc:                                          ; preds = %for.body, %lor.lhs.false, %if.end18
  %nterms.1 = phi i32 [ %inc, %if.end18 ], [ %nterms.0, %lor.lhs.false ], [ %nterms.0, %for.body ]
  %p.2 = phi i8* [ %add.ptr22, %if.end18 ], [ %p.0, %lor.lhs.false ], [ %p.0, %for.body ]
  %chain24 = getelementptr inbounds %struct.uvc_entity, %struct.uvc_entity* %2, i32 0, i32 1
  br label %for.cond

for.end:                                          ; preds = %for.cond, %if.then14
  %p.3 = phi i8* [ %add.ptr17, %if.then14 ], [ %p.0, %for.cond ]
  %sub.ptr.lhs.cast = ptrtoint i8* %p.3 to i64
  %sub.ptr.rhs.cast = ptrtoint i8* %buffer to i64
  %sub.ptr.sub = sub i64 %sub.ptr.lhs.cast, %sub.ptr.rhs.cast
  %conv28 = trunc i64 %sub.ptr.sub to i32
  ret i32 %conv28
}

; Function Attrs: nounwind uwtable
define internal i32 @uvc_register_terms(%struct.uvc_device* %dev, %struct.uvc_video_chain* %chain) #1 {
entry:
  %entities = getelementptr inbounds %struct.uvc_video_chain, %struct.uvc_video_chain* %chain, i32 0, i32 2
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %chain21.sink = phi %struct.list_head* [ %chain21, %for.inc ], [ %entities, %entry ]
  %next22 = getelementptr inbounds %struct.list_head, %struct.list_head* %chain21.sink, i32 0, i32 0
  %0 = load %struct.list_head*, %struct.list_head** %next22, align 8, !tbaa !24
  %1 = bitcast %struct.list_head* %0 to i8*
  %add.ptr24 = getelementptr inbounds i8, i8* %1, i64 -16
  %2 = bitcast i8* %add.ptr24 to %struct.uvc_entity*
  %chain1 = getelementptr inbounds %struct.uvc_entity, %struct.uvc_entity* %2, i32 0, i32 1
  %entities2 = getelementptr inbounds %struct.uvc_video_chain, %struct.uvc_video_chain* %chain, i32 0, i32 2
  %cmp = icmp ne %struct.list_head* %chain1, %entities2
  br i1 %cmp, label %for.body, label %cleanup

for.body:                                         ; preds = %for.cond
  %type = getelementptr inbounds %struct.uvc_entity, %struct.uvc_entity* %2, i32 0, i32 4
  %3 = load i16, i16* %type, align 2, !tbaa !92
  %conv = zext i16 %3 to i32
  %and = and i32 %conv, 32767
  %cmp3 = icmp ne i32 %and, 257
  br i1 %cmp3, label %for.inc, label %if.end

if.end:                                           ; preds = %for.body
  %id = getelementptr inbounds %struct.uvc_entity, %struct.uvc_entity* %2, i32 0, i32 3
  %4 = load i8, i8* %id, align 4, !tbaa !25
  %conv5 = zext i8 %4 to i32
  %call = call %struct.uvc_streaming* @uvc_stream_by_id(%struct.uvc_device* %dev, i32 %conv5)
  %cmp6 = icmp eq %struct.uvc_streaming* %call, null
  br i1 %cmp6, label %if.then8, label %if.end12

if.then8:                                         ; preds = %if.end
  %id9 = getelementptr inbounds %struct.uvc_entity, %struct.uvc_entity* %2, i32 0, i32 3
  %5 = load i8, i8* %id9, align 4, !tbaa !25
  %conv10 = zext i8 %5 to i32
  %call11 = call i32 (i8*, ...) @printk(i8* getelementptr inbounds ([58 x i8], [58 x i8]* @.str.100, i32 0, i32 0), i32 %conv10)
  br label %for.inc

if.end12:                                         ; preds = %if.end
  %chain13 = getelementptr inbounds %struct.uvc_streaming, %struct.uvc_streaming* %call, i32 0, i32 3
  store %struct.uvc_video_chain* %chain, %struct.uvc_video_chain** %chain13, align 8, !tbaa !156
  %call14 = call i32 @uvc_register_video(%struct.uvc_device* %dev, %struct.uvc_streaming* %call)
  %cmp15 = icmp slt i32 %call14, 0
  br i1 %cmp15, label %cleanup, label %if.end18

if.end18:                                         ; preds = %if.end12
  %vdev = getelementptr inbounds %struct.uvc_streaming, %struct.uvc_streaming* %call, i32 0, i32 2
  %6 = load %struct.video_device*, %struct.video_device** %vdev, align 8, !tbaa !98
  %vdev19 = getelementptr inbounds %struct.uvc_entity, %struct.uvc_entity* %2, i32 0, i32 6
  store %struct.video_device* %6, %struct.video_device** %vdev19, align 8, !tbaa !157
  br label %for.inc

for.inc:                                          ; preds = %for.body, %if.end18, %if.then8
  %chain21 = getelementptr inbounds %struct.uvc_entity, %struct.uvc_entity* %2, i32 0, i32 1
  br label %for.cond

cleanup:                                          ; preds = %for.cond, %if.end12
  %retval.0 = phi i32 [ %call14, %if.end12 ], [ 0, %for.cond ]
  ret i32 %retval.0
}

; Function Attrs: nounwind uwtable
define internal %struct.uvc_streaming* @uvc_stream_by_id(%struct.uvc_device* %dev, i32 %id) #1 {
entry:
  %streams = getelementptr inbounds %struct.uvc_device, %struct.uvc_device* %dev, i32 0, i32 14
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %list5.sink = phi %struct.list_head* [ %list5, %for.inc ], [ %streams, %entry ]
  %next6 = getelementptr inbounds %struct.list_head, %struct.list_head* %list5.sink, i32 0, i32 0
  %0 = load %struct.list_head*, %struct.list_head** %next6, align 8, !tbaa !24
  %1 = bitcast %struct.list_head* %0 to i8*
  %add.ptr8 = getelementptr inbounds i8, i8* %1, i64 0
  %2 = bitcast i8* %add.ptr8 to %struct.uvc_streaming*
  %list = getelementptr inbounds %struct.uvc_streaming, %struct.uvc_streaming* %2, i32 0, i32 0
  %streams1 = getelementptr inbounds %struct.uvc_device, %struct.uvc_device* %dev, i32 0, i32 14
  %cmp = icmp ne %struct.list_head* %list, %streams1
  br i1 %cmp, label %for.body, label %cleanup

for.body:                                         ; preds = %for.cond
  %header = getelementptr inbounds %struct.uvc_streaming, %struct.uvc_streaming* %2, i32 0, i32 8
  %bTerminalLink = getelementptr inbounds %struct.uvc_streaming_header, %struct.uvc_streaming_header* %header, i32 0, i32 2
  %3 = load i8, i8* %bTerminalLink, align 2, !tbaa !117
  %conv = zext i8 %3 to i32
  %cmp2 = icmp eq i32 %conv, %id
  br i1 %cmp2, label %cleanup, label %for.inc

for.inc:                                          ; preds = %for.body
  %list5 = getelementptr inbounds %struct.uvc_streaming, %struct.uvc_streaming* %2, i32 0, i32 0
  br label %for.cond

cleanup:                                          ; preds = %for.cond, %for.body
  %retval.0 = phi %struct.uvc_streaming* [ %2, %for.body ], [ null, %for.cond ]
  ret %struct.uvc_streaming* %retval.0
}

; Function Attrs: nounwind uwtable
define internal i32 @uvc_register_video(%struct.uvc_device* %dev, %struct.uvc_streaming* %stream) #1 {
entry:
  %call = call i32 @uvc_video_init(%struct.uvc_streaming* %stream)
  %cmp = icmp slt i32 %call, 0
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %call1 = call i32 (i8*, ...) @printk(i8* getelementptr inbounds ([51 x i8], [51 x i8]* @.str.101, i32 0, i32 0), i32 %call)
  br label %cleanup

if.end:                                           ; preds = %entry
  %call2 = call i32 @uvc_debugfs_init_stream(%struct.uvc_streaming* %stream)
  %call3 = call %struct.video_device* @video_device_alloc()
  %cmp4 = icmp eq %struct.video_device* %call3, null
  br i1 %cmp4, label %if.then5, label %if.end7

if.then5:                                         ; preds = %if.end
  %call6 = call i32 (i8*, ...) @printk(i8* getelementptr inbounds ([51 x i8], [51 x i8]* @.str.102, i32 0, i32 0), i32 %call)
  br label %cleanup

if.end7:                                          ; preds = %if.end
  %vdev8 = getelementptr inbounds %struct.uvc_device, %struct.uvc_device* %dev, i32 0, i32 9
  %v4l2_dev = getelementptr inbounds %struct.video_device, %struct.video_device* %call3, i32 0, i32 4
  store %struct.v4l2_device* %vdev8, %struct.v4l2_device** %v4l2_dev, align 8, !tbaa !158
  %fops = getelementptr inbounds %struct.video_device, %struct.video_device* %call3, i32 0, i32 0
  store %struct.v4l2_file_operations* @uvc_fops, %struct.v4l2_file_operations** %fops, align 8, !tbaa !160
  %release = getelementptr inbounds %struct.video_device, %struct.video_device* %call3, i32 0, i32 20
  store void (%struct.video_device*)* @uvc_release, void (%struct.video_device*)** %release, align 8, !tbaa !161
  %chain = getelementptr inbounds %struct.uvc_streaming, %struct.uvc_streaming* %stream, i32 0, i32 3
  %0 = load %struct.uvc_video_chain*, %struct.uvc_video_chain** %chain, align 8, !tbaa !156
  %prio = getelementptr inbounds %struct.uvc_video_chain, %struct.uvc_video_chain* %0, i32 0, i32 6
  %prio9 = getelementptr inbounds %struct.video_device, %struct.video_device* %call3, i32 0, i32 7
  store %struct.v4l2_prio_state* %prio, %struct.v4l2_prio_state** %prio9, align 8, !tbaa !162
  %flags = getelementptr inbounds %struct.video_device, %struct.video_device* %call3, i32 0, i32 13
  call void @set_bit(i32 2, i64* %flags)
  %type = getelementptr inbounds %struct.uvc_streaming, %struct.uvc_streaming* %stream, i32 0, i32 9
  %1 = load i32, i32* %type, align 8, !tbaa !113
  %cmp10 = icmp eq i32 %1, 2
  br i1 %cmp10, label %if.then11, label %if.end12

if.then11:                                        ; preds = %if.end7
  %vfl_dir = getelementptr inbounds %struct.video_device, %struct.video_device* %call3, i32 0, i32 10
  store i32 1, i32* %vfl_dir, align 4, !tbaa !163
  br label %if.end12

if.end12:                                         ; preds = %if.then11, %if.end7
  %name = getelementptr inbounds %struct.video_device, %struct.video_device* %call3, i32 0, i32 8
  %arraydecay = getelementptr inbounds [32 x i8], [32 x i8]* %name, i32 0, i32 0
  %name13 = getelementptr inbounds %struct.uvc_device, %struct.uvc_device* %dev, i32 0, i32 5
  %arraydecay14 = getelementptr inbounds [32 x i8], [32 x i8]* %name13, i32 0, i32 0
  %call15 = call i64 @strlcpy(i8* %arraydecay, i8* %arraydecay14, i64 32)
  %vdev16 = getelementptr inbounds %struct.uvc_streaming, %struct.uvc_streaming* %stream, i32 0, i32 2
  store %struct.video_device* %call3, %struct.video_device** %vdev16, align 8, !tbaa !98
  %2 = bitcast %struct.uvc_streaming* %stream to i8*
  call void @video_set_drvdata(%struct.video_device* %call3, i8* %2)
  %call17 = call i32 @video_register_device(%struct.video_device* %call3, i32 0, i32 -1)
  %cmp18 = icmp slt i32 %call17, 0
  br i1 %cmp18, label %if.then19, label %if.end22

if.then19:                                        ; preds = %if.end12
  %call20 = call i32 (i8*, ...) @printk(i8* getelementptr inbounds ([51 x i8], [51 x i8]* @.str.103, i32 0, i32 0), i32 %call17)
  %vdev21 = getelementptr inbounds %struct.uvc_streaming, %struct.uvc_streaming* %stream, i32 0, i32 2
  store %struct.video_device* null, %struct.video_device** %vdev21, align 8, !tbaa !98
  call void @video_device_release(%struct.video_device* %call3)
  br label %cleanup

if.end22:                                         ; preds = %if.end12
  %type23 = getelementptr inbounds %struct.uvc_streaming, %struct.uvc_streaming* %stream, i32 0, i32 9
  %3 = load i32, i32* %type23, align 8, !tbaa !113
  %cmp24 = icmp eq i32 %3, 1
  %chain26 = getelementptr inbounds %struct.uvc_streaming, %struct.uvc_streaming* %stream, i32 0, i32 3
  %4 = load %struct.uvc_video_chain*, %struct.uvc_video_chain** %chain26, align 8, !tbaa !156
  %caps = getelementptr inbounds %struct.uvc_video_chain, %struct.uvc_video_chain* %4, i32 0, i32 7
  %5 = load i32, i32* %caps, align 8, !tbaa !164
  %.sink = select i1 %cmp24, i32 1, i32 2
  %or29 = or i32 %5, %.sink
  store i32 %or29, i32* %caps, align 8, !tbaa !164
  %nstreams = getelementptr inbounds %struct.uvc_device, %struct.uvc_device* %dev, i32 0, i32 15
  call void @atomic_inc(%struct.atomic_t* %nstreams)
  br label %cleanup

cleanup:                                          ; preds = %if.end22, %if.then19, %if.then5, %if.then
  %retval.0 = phi i32 [ %call, %if.then ], [ -12, %if.then5 ], [ %call17, %if.then19 ], [ 0, %if.end22 ]
  ret i32 %retval.0
}

declare i32 @uvc_video_init(%struct.uvc_streaming*) #4

declare i32 @uvc_debugfs_init_stream(%struct.uvc_streaming*) #4

declare %struct.video_device* @video_device_alloc() #4

; Function Attrs: nounwind uwtable
define internal void @uvc_release(%struct.video_device* %vdev) #1 {
entry:
  %call = call i8* @video_get_drvdata(%struct.video_device* %vdev)
  %0 = bitcast i8* %call to %struct.uvc_streaming*
  %dev1 = getelementptr inbounds %struct.uvc_streaming, %struct.uvc_streaming* %0, i32 0, i32 1
  %1 = load %struct.uvc_device*, %struct.uvc_device** %dev1, align 8, !tbaa !109
  %nstreams = getelementptr inbounds %struct.uvc_device, %struct.uvc_device* %1, i32 0, i32 15
  %call2 = call i32 @atomic_dec_and_test(%struct.atomic_t* %nstreams)
  %tobool = icmp ne i32 %call2, 0
  br i1 %tobool, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  call void @uvc_delete(%struct.uvc_device* %1)
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  ret void
}

; Function Attrs: alwaysinline nounwind uwtable
define internal void @set_bit(i32 %nr, i64* %addr) #3 {
entry:
  call void asm sideeffect ".pushsection .smp_locks,\22a\22\0A.balign 4\0A.long 671f - .\0A.popsection\0A671:\0A\09lock; bts $1,$0", "=*m,Ir,*m,~{memory},~{dirflag},~{fpsr},~{flags}"(i64* %addr, i32 %nr, i64* %addr) #5, !srcloc !165
  ret void
}

; Function Attrs: inlinehint nounwind uwtable
define internal void @video_set_drvdata(%struct.video_device* %vdev, i8* %data) #0 {
entry:
  %dev = getelementptr inbounds %struct.video_device, %struct.video_device* %vdev, i32 0, i32 1
  %call = call i32 @dev_set_drvdata(%struct.device* %dev, i8* %data)
  ret void
}

; Function Attrs: inlinehint nounwind uwtable
define internal i32 @video_register_device(%struct.video_device* %vdev, i32 %type, i32 %nr) #0 {
entry:
  %fops = getelementptr inbounds %struct.video_device, %struct.video_device* %vdev, i32 0, i32 0
  %0 = load %struct.v4l2_file_operations*, %struct.v4l2_file_operations** %fops, align 8, !tbaa !160
  %owner = getelementptr inbounds %struct.v4l2_file_operations, %struct.v4l2_file_operations* %0, i32 0, i32 0
  %1 = load %struct.module*, %struct.module** %owner, align 8, !tbaa !166
  %call = call i32 @__video_register_device(%struct.video_device* %vdev, i32 %type, i32 %nr, i32 1, %struct.module* %1)
  ret i32 %call
}

declare void @video_device_release(%struct.video_device*) #4

; Function Attrs: inlinehint nounwind uwtable
define internal void @atomic_inc(%struct.atomic_t* %v) #0 {
entry:
  %counter = getelementptr inbounds %struct.atomic_t, %struct.atomic_t* %v, i32 0, i32 0
  call void asm sideeffect ".pushsection .smp_locks,\22a\22\0A.balign 4\0A.long 671f - .\0A.popsection\0A671:\0A\09lock; incl $0", "=*m,*m,~{dirflag},~{fpsr},~{flags}"(i32* %counter, i32* %counter) #5, !srcloc !168
  ret void
}

; Function Attrs: inlinehint nounwind uwtable
define internal i8* @video_get_drvdata(%struct.video_device* %vdev) #0 {
entry:
  %dev = getelementptr inbounds %struct.video_device, %struct.video_device* %vdev, i32 0, i32 1
  %call = call i8* @dev_get_drvdata(%struct.device* %dev)
  ret i8* %call
}

; Function Attrs: inlinehint nounwind uwtable
define internal i32 @atomic_dec_and_test(%struct.atomic_t* %v) #0 {
entry:
  %c = alloca i8, align 1
  call void @llvm.lifetime.start.p0i8(i64 1, i8* %c) #5
  %counter = getelementptr inbounds %struct.atomic_t, %struct.atomic_t* %v, i32 0, i32 0
  call void asm sideeffect ".pushsection .smp_locks,\22a\22\0A.balign 4\0A.long 671f - .\0A.popsection\0A671:\0A\09lock; decl $0; sete $1", "=*m,=*qm,*m,~{memory},~{dirflag},~{fpsr},~{flags}"(i32* %counter, i8* %c, i32* %counter) #5, !srcloc !169
  %0 = load i8, i8* %c, align 1, !tbaa !87
  %conv = zext i8 %0 to i32
  %cmp = icmp ne i32 %conv, 0
  %conv1 = zext i1 %cmp to i32
  call void @llvm.lifetime.end.p0i8(i64 1, i8* %c) #5
  ret i32 %conv1
}

; Function Attrs: nounwind uwtable
define internal void @uvc_delete(%struct.uvc_device* %dev) #1 {
entry:
  %intf = getelementptr inbounds %struct.uvc_device, %struct.uvc_device* %dev, i32 0, i32 1
  %0 = load %struct.usb_interface*, %struct.usb_interface** %intf, align 8, !tbaa !40
  call void @usb_put_intf(%struct.usb_interface* %0)
  %udev = getelementptr inbounds %struct.uvc_device, %struct.uvc_device* %dev, i32 0, i32 0
  %1 = load %struct.usb_device*, %struct.usb_device** %udev, align 8, !tbaa !32
  call void @usb_put_dev(%struct.usb_device* %1)
  call void @uvc_status_cleanup(%struct.uvc_device* %dev)
  call void @uvc_ctrl_cleanup_device(%struct.uvc_device* %dev)
  %vdev = getelementptr inbounds %struct.uvc_device, %struct.uvc_device* %dev, i32 0, i32 9
  %dev1 = getelementptr inbounds %struct.v4l2_device, %struct.v4l2_device* %vdev, i32 0, i32 0
  %2 = load %struct.device*, %struct.device** %dev1, align 8, !tbaa !170
  %tobool = icmp ne %struct.device* %2, null
  br i1 %tobool, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %vdev2 = getelementptr inbounds %struct.uvc_device, %struct.uvc_device* %dev, i32 0, i32 9
  call void @v4l2_device_unregister(%struct.v4l2_device* %vdev2)
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  %chains = getelementptr inbounds %struct.uvc_device, %struct.uvc_device* %dev, i32 0, i32 13
  %next = getelementptr inbounds %struct.list_head, %struct.list_head* %chains, i32 0, i32 0
  %3 = load %struct.list_head*, %struct.list_head** %next, align 8, !tbaa !82
  br label %for.cond

for.cond:                                         ; preds = %for.body, %if.end
  %.sink = phi %struct.list_head* [ %4, %for.body ], [ %3, %if.end ]
  %p.0 = phi %struct.list_head* [ %3, %if.end ], [ %4, %for.body ]
  %next5 = getelementptr inbounds %struct.list_head, %struct.list_head* %.sink, i32 0, i32 0
  %4 = load %struct.list_head*, %struct.list_head** %next5, align 8, !tbaa !82
  %chains4 = getelementptr inbounds %struct.uvc_device, %struct.uvc_device* %dev, i32 0, i32 13
  %cmp = icmp ne %struct.list_head* %p.0, %chains4
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %5 = bitcast %struct.list_head* %p.0 to i8*
  %add.ptr = getelementptr inbounds i8, i8* %5, i64 -8
  %6 = bitcast i8* %add.ptr to %struct.uvc_video_chain*
  %7 = bitcast %struct.uvc_video_chain* %6 to i8*
  call void @kfree(i8* %7)
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %entities = getelementptr inbounds %struct.uvc_device, %struct.uvc_device* %dev, i32 0, i32 12
  %next6 = getelementptr inbounds %struct.list_head, %struct.list_head* %entities, i32 0, i32 0
  %8 = load %struct.list_head*, %struct.list_head** %next6, align 8, !tbaa !82
  br label %for.cond8

for.cond8:                                        ; preds = %if.end20, %for.end
  %.sink1 = phi %struct.list_head* [ %9, %if.end20 ], [ %8, %for.end ]
  %p.1 = phi %struct.list_head* [ %8, %for.end ], [ %9, %if.end20 ]
  %next22 = getelementptr inbounds %struct.list_head, %struct.list_head* %.sink1, i32 0, i32 0
  %9 = load %struct.list_head*, %struct.list_head** %next22, align 8, !tbaa !82
  %entities9 = getelementptr inbounds %struct.uvc_device, %struct.uvc_device* %dev, i32 0, i32 12
  %cmp10 = icmp ne %struct.list_head* %p.1, %entities9
  br i1 %cmp10, label %for.body11, label %for.end23

for.body11:                                       ; preds = %for.cond8
  %10 = bitcast %struct.list_head* %p.1 to i8*
  %add.ptr14 = getelementptr inbounds i8, i8* %10, i64 0
  %11 = bitcast i8* %add.ptr14 to %struct.uvc_entity*
  %vdev15 = getelementptr inbounds %struct.uvc_entity, %struct.uvc_entity* %11, i32 0, i32 6
  %12 = load %struct.video_device*, %struct.video_device** %vdev15, align 8, !tbaa !157
  %tobool16 = icmp ne %struct.video_device* %12, null
  br i1 %tobool16, label %if.then17, label %if.end20

if.then17:                                        ; preds = %for.body11
  %vdev18 = getelementptr inbounds %struct.uvc_entity, %struct.uvc_entity* %11, i32 0, i32 6
  %13 = load %struct.video_device*, %struct.video_device** %vdev18, align 8, !tbaa !157
  call void @video_device_release(%struct.video_device* %13)
  %vdev19 = getelementptr inbounds %struct.uvc_entity, %struct.uvc_entity* %11, i32 0, i32 6
  store %struct.video_device* null, %struct.video_device** %vdev19, align 8, !tbaa !157
  br label %if.end20

if.end20:                                         ; preds = %if.then17, %for.body11
  %14 = bitcast %struct.uvc_entity* %11 to i8*
  call void @kfree(i8* %14)
  br label %for.cond8

for.end23:                                        ; preds = %for.cond8
  %streams = getelementptr inbounds %struct.uvc_device, %struct.uvc_device* %dev, i32 0, i32 14
  %next24 = getelementptr inbounds %struct.list_head, %struct.list_head* %streams, i32 0, i32 0
  %15 = load %struct.list_head*, %struct.list_head** %next24, align 8, !tbaa !82
  br label %for.cond26

for.cond26:                                       ; preds = %for.body29, %for.end23
  %.sink2 = phi %struct.list_head* [ %16, %for.body29 ], [ %15, %for.end23 ]
  %p.2 = phi %struct.list_head* [ %15, %for.end23 ], [ %16, %for.body29 ]
  %next36 = getelementptr inbounds %struct.list_head, %struct.list_head* %.sink2, i32 0, i32 0
  %16 = load %struct.list_head*, %struct.list_head** %next36, align 8, !tbaa !82
  %streams27 = getelementptr inbounds %struct.uvc_device, %struct.uvc_device* %dev, i32 0, i32 14
  %cmp28 = icmp ne %struct.list_head* %p.2, %streams27
  br i1 %cmp28, label %for.body29, label %for.end37

for.body29:                                       ; preds = %for.cond26
  %17 = bitcast %struct.list_head* %p.2 to i8*
  %add.ptr32 = getelementptr inbounds i8, i8* %17, i64 0
  %18 = bitcast i8* %add.ptr32 to %struct.uvc_streaming*
  %intf33 = getelementptr inbounds %struct.uvc_streaming, %struct.uvc_streaming* %18, i32 0, i32 5
  %19 = load %struct.usb_interface*, %struct.usb_interface** %intf33, align 8, !tbaa !69
  call void @usb_driver_release_interface(%struct.usb_driver* getelementptr inbounds (%struct.uvc_driver, %struct.uvc_driver* @uvc_driver, i32 0, i32 0), %struct.usb_interface* %19)
  %intf34 = getelementptr inbounds %struct.uvc_streaming, %struct.uvc_streaming* %18, i32 0, i32 5
  %20 = load %struct.usb_interface*, %struct.usb_interface** %intf34, align 8, !tbaa !69
  call void @usb_put_intf(%struct.usb_interface* %20)
  %format = getelementptr inbounds %struct.uvc_streaming, %struct.uvc_streaming* %18, i32 0, i32 11
  %21 = load %struct.uvc_format*, %struct.uvc_format** %format, align 8, !tbaa !123
  %22 = bitcast %struct.uvc_format* %21 to i8*
  call void @kfree(i8* %22)
  %header = getelementptr inbounds %struct.uvc_streaming, %struct.uvc_streaming* %18, i32 0, i32 8
  %bmaControls = getelementptr inbounds %struct.uvc_streaming_header, %struct.uvc_streaming_header* %header, i32 0, i32 4
  %23 = load i8*, i8** %bmaControls, align 8, !tbaa !122
  call void @kfree(i8* %23)
  %24 = bitcast %struct.uvc_streaming* %18 to i8*
  call void @kfree(i8* %24)
  br label %for.cond26

for.end37:                                        ; preds = %for.cond26
  %25 = bitcast %struct.uvc_device* %dev to i8*
  call void @kfree(i8* %25)
  ret void
}

declare i8* @dev_get_drvdata(%struct.device*) #4

declare void @usb_put_dev(%struct.usb_device*) #4

declare void @uvc_status_cleanup(%struct.uvc_device*) #4

declare void @uvc_ctrl_cleanup_device(%struct.uvc_device*) #4

declare void @v4l2_device_unregister(%struct.v4l2_device*) #4

declare i32 @dev_set_drvdata(%struct.device*, i8*) #4

declare i32 @__video_register_device(%struct.video_device*, i32, i32, i32, %struct.module*) #4

declare void @video_unregister_device(%struct.video_device*) #4

declare void @uvc_debugfs_cleanup_stream(%struct.uvc_streaming*) #4

; Function Attrs: inlinehint nounwind uwtable
define internal i8* @usb_get_intfdata(%struct.usb_interface* %intf) #0 {
entry:
  %dev = getelementptr inbounds %struct.usb_interface, %struct.usb_interface* %intf, i32 0, i32 7
  %call = call i8* @dev_get_drvdata(%struct.device* %dev)
  ret i8* %call
}

declare i32 @uvc_status_suspend(%struct.uvc_device*) #4

declare i32 @uvc_video_suspend(%struct.uvc_streaming*) #4

; Function Attrs: nounwind uwtable
define internal i32 @__uvc_resume(%struct.usb_interface* %intf, i32 %reset) #1 {
entry:
  %call = call i8* @usb_get_intfdata(%struct.usb_interface* %intf)
  %0 = bitcast i8* %call to %struct.uvc_device*
  %1 = load i32, i32* @uvc_trace_param, align 4, !tbaa !23
  %and = and i32 %1, 256
  %tobool = icmp ne i32 %and, 0
  br i1 %tobool, label %if.then, label %do.end

if.then:                                          ; preds = %entry
  %cur_altsetting = getelementptr inbounds %struct.usb_interface, %struct.usb_interface* %intf, i32 0, i32 1
  %2 = load %struct.usb_host_interface*, %struct.usb_host_interface** %cur_altsetting, align 8, !tbaa !41
  %desc = getelementptr inbounds %struct.usb_host_interface, %struct.usb_host_interface* %2, i32 0, i32 0
  %bInterfaceNumber = getelementptr inbounds %struct.usb_interface_descriptor, %struct.usb_interface_descriptor* %desc, i32 0, i32 2
  %3 = load i8, i8* %bInterfaceNumber, align 2, !tbaa !56
  %conv = zext i8 %3 to i32
  %call1 = call i32 (i8*, ...) @printk(i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.106, i32 0, i32 0), i32 %conv)
  br label %do.end

do.end:                                           ; preds = %if.then, %entry
  %cur_altsetting2 = getelementptr inbounds %struct.usb_interface, %struct.usb_interface* %intf, i32 0, i32 1
  %4 = load %struct.usb_host_interface*, %struct.usb_host_interface** %cur_altsetting2, align 8, !tbaa !41
  %desc3 = getelementptr inbounds %struct.usb_host_interface, %struct.usb_host_interface* %4, i32 0, i32 0
  %bInterfaceSubClass = getelementptr inbounds %struct.usb_interface_descriptor, %struct.usb_interface_descriptor* %desc3, i32 0, i32 6
  %5 = load i8, i8* %bInterfaceSubClass, align 2, !tbaa !67
  %conv4 = zext i8 %5 to i32
  %cmp = icmp eq i32 %conv4, 1
  br i1 %cmp, label %if.then6, label %if.end16

if.then6:                                         ; preds = %do.end
  %tobool7 = icmp ne i32 %reset, 0
  br i1 %tobool7, label %if.then8, label %if.end14

if.then8:                                         ; preds = %if.then6
  %call9 = call i32 @uvc_ctrl_resume_device(%struct.uvc_device* %0)
  %cmp10 = icmp slt i32 %call9, 0
  %. = select i1 %cmp10, i32 1, i32 0
  %cond = icmp eq i32 %., 0
  br i1 %cond, label %if.end14, label %cleanup39

if.end14:                                         ; preds = %if.then8, %if.then6
  %call15 = call i32 @uvc_status_resume(%struct.uvc_device* %0)
  br label %cleanup39

if.end16:                                         ; preds = %do.end
  %streams = getelementptr inbounds %struct.uvc_device, %struct.uvc_device* %0, i32 0, i32 14
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %if.end16
  %list27.sink = phi %struct.list_head* [ %list27, %for.inc ], [ %streams, %if.end16 ]
  %next28 = getelementptr inbounds %struct.list_head, %struct.list_head* %list27.sink, i32 0, i32 0
  %6 = load %struct.list_head*, %struct.list_head** %next28, align 8, !tbaa !24
  %7 = bitcast %struct.list_head* %6 to i8*
  %add.ptr30 = getelementptr inbounds i8, i8* %7, i64 0
  %8 = bitcast i8* %add.ptr30 to %struct.uvc_streaming*
  %list = getelementptr inbounds %struct.uvc_streaming, %struct.uvc_streaming* %8, i32 0, i32 0
  %streams17 = getelementptr inbounds %struct.uvc_device, %struct.uvc_device* %0, i32 0, i32 14
  %cmp18 = icmp ne %struct.list_head* %list, %streams17
  br i1 %cmp18, label %for.body, label %do.body31

for.body:                                         ; preds = %for.cond
  %intf20 = getelementptr inbounds %struct.uvc_streaming, %struct.uvc_streaming* %8, i32 0, i32 5
  %9 = load %struct.usb_interface*, %struct.usb_interface** %intf20, align 8, !tbaa !69
  %cmp21 = icmp eq %struct.usb_interface* %9, %intf
  br i1 %cmp21, label %if.then23, label %for.inc

if.then23:                                        ; preds = %for.body
  %call24 = call i32 @uvc_video_resume(%struct.uvc_streaming* %8, i32 %reset)
  br label %cleanup39

for.inc:                                          ; preds = %for.body
  %list27 = getelementptr inbounds %struct.uvc_streaming, %struct.uvc_streaming* %8, i32 0, i32 0
  br label %for.cond

do.body31:                                        ; preds = %for.cond
  %10 = load i32, i32* @uvc_trace_param, align 4, !tbaa !23
  %and32 = and i32 %10, 256
  %tobool33 = icmp ne i32 %and32, 0
  br i1 %tobool33, label %if.then34, label %cleanup39

if.then34:                                        ; preds = %do.body31
  %call35 = call i32 (i8*, ...) @printk(i8* getelementptr inbounds ([61 x i8], [61 x i8]* @.str.107, i32 0, i32 0))
  br label %cleanup39

cleanup39:                                        ; preds = %do.body31, %if.then34, %if.then8, %if.then23, %if.end14
  %retval.1 = phi i32 [ %call9, %if.then8 ], [ %call15, %if.end14 ], [ %call24, %if.then23 ], [ -22, %if.then34 ], [ -22, %do.body31 ]
  ret i32 %retval.1
}

declare i32 @uvc_ctrl_resume_device(%struct.uvc_device*) #4

declare i32 @uvc_status_resume(%struct.uvc_device*) #4

declare i32 @uvc_video_resume(%struct.uvc_streaming*, i32) #4

declare i32 @uvc_debugfs_init() #4

declare i32 @usb_register_driver(%struct.usb_driver*, %struct.module*, i8*) #4

declare i64 @__modver_version_show(%struct.module_attribute*, %struct.module_kobject*, i8*) #4

attributes #0 = { inlinehint nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { argmemonly nounwind }
attributes #3 = { alwaysinline nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { nounwind }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 5.0.1 (tags/RELEASE_500/final)"}
!2 = !{!3, !4, i64 24}
!3 = !{!"smp_ops", !4, i64 0, !4, i64 8, !4, i64 16, !4, i64 24, !4, i64 32, !4, i64 40, !4, i64 48, !4, i64 56, !4, i64 64, !4, i64 72, !4, i64 80}
!4 = !{!"any pointer", !5, i64 0}
!5 = !{!"omnipotent char", !6, i64 0}
!6 = !{!"Simple C/C++ TBAA"}
!7 = !{!3, !4, i64 32}
!8 = !{!3, !4, i64 8}
!9 = !{!3, !4, i64 40}
!10 = !{!3, !4, i64 16}
!11 = !{!3, !4, i64 0}
!12 = !{!13, !5, i64 4}
!13 = !{!"usb_host_interface", !14, i64 0, !15, i64 12, !4, i64 16, !4, i64 24, !4, i64 32}
!14 = !{!"usb_interface_descriptor", !5, i64 0, !5, i64 1, !5, i64 2, !5, i64 3, !5, i64 4, !5, i64 5, !5, i64 6, !5, i64 7, !5, i64 8}
!15 = !{!"int", !5, i64 0}
!16 = !{!13, !4, i64 24}
!17 = !{!18, !5, i64 2}
!18 = !{!"usb_host_endpoint", !19, i64 0, !21, i64 9, !22, i64 16, !4, i64 32, !4, i64 40, !4, i64 48, !15, i64 56, !15, i64 60}
!19 = !{!"usb_endpoint_descriptor", !5, i64 0, !5, i64 1, !5, i64 2, !5, i64 3, !20, i64 4, !5, i64 6, !5, i64 7, !5, i64 8}
!20 = !{!"short", !5, i64 0}
!21 = !{!"usb_ss_ep_comp_descriptor", !5, i64 0, !5, i64 1, !5, i64 2, !5, i64 3, !20, i64 4}
!22 = !{!"list_head", !4, i64 0, !4, i64 8}
!23 = !{!15, !15, i64 0}
!24 = !{!4, !4, i64 0}
!25 = !{!26, !5, i64 36}
!26 = !{!"uvc_entity", !22, i64 0, !22, i64 16, !15, i64 32, !5, i64 36, !20, i64 38, !5, i64 40, !4, i64 104, !27, i64 112, !15, i64 240, !15, i64 244, !4, i64 248, !5, i64 256, !5, i64 296, !4, i64 304, !15, i64 312, !4, i64 320}
!27 = !{!"v4l2_subdev", !22, i64 0, !4, i64 16, !15, i64 24, !4, i64 32, !4, i64 40, !4, i64 48, !4, i64 56, !5, i64 64, !15, i64 96, !4, i64 104, !4, i64 112, !4, i64 120}
!28 = !{!29, !20, i64 2}
!29 = !{!"usb_device_id", !20, i64 0, !20, i64 2, !20, i64 4, !20, i64 6, !20, i64 8, !5, i64 10, !5, i64 11, !5, i64 12, !5, i64 13, !5, i64 14, !5, i64 15, !5, i64 16, !30, i64 24}
!30 = !{!"long", !5, i64 0}
!31 = !{!29, !20, i64 4}
!32 = !{!33, !4, i64 0}
!33 = !{!"uvc_device", !4, i64 0, !4, i64 8, !30, i64 16, !15, i64 24, !15, i64 28, !5, i64 32, !5, i64 64, !34, i64 68, !34, i64 72, !35, i64 80, !20, i64 232, !15, i64 236, !22, i64 240, !22, i64 256, !22, i64 272, !34, i64 288, !4, i64 296, !4, i64 304, !4, i64 312, !4, i64 320, !5, i64 328}
!34 = !{!"", !15, i64 0}
!35 = !{!"v4l2_device", !4, i64 0, !22, i64 8, !36, i64 24, !5, i64 26, !4, i64 64, !4, i64 72, !37, i64 80, !38, i64 96, !39, i64 136, !4, i64 144}
!36 = !{!"spinlock", !5, i64 0}
!37 = !{!"v4l2_prio_state", !5, i64 0}
!38 = !{!"mutex", !34, i64 0, !36, i64 4, !22, i64 8, !4, i64 24, !4, i64 32}
!39 = !{!"kref", !34, i64 0}
!40 = !{!33, !4, i64 8}
!41 = !{!42, !4, i64 8}
!42 = !{!"usb_interface", !4, i64 0, !4, i64 8, !15, i64 16, !4, i64 24, !15, i64 32, !5, i64 36, !15, i64 40, !15, i64 40, !15, i64 40, !15, i64 40, !15, i64 40, !15, i64 40, !15, i64 40, !15, i64 40, !43, i64 48, !4, i64 488, !34, i64 496, !54, i64 504}
!43 = !{!"device", !4, i64 0, !4, i64 8, !44, i64 16, !4, i64 80, !4, i64 88, !38, i64 96, !4, i64 136, !4, i64 144, !4, i64 152, !45, i64 160, !4, i64 248, !15, i64 256, !4, i64 264, !50, i64 272, !4, i64 280, !22, i64 288, !4, i64 304, !51, i64 312, !4, i64 328, !52, i64 336, !15, i64 344, !15, i64 348, !36, i64 352, !22, i64 360, !53, i64 376, !4, i64 408, !4, i64 416, !4, i64 424, !4, i64 432}
!44 = !{!"kobject", !4, i64 0, !22, i64 8, !4, i64 24, !4, i64 32, !4, i64 40, !4, i64 48, !39, i64 56, !15, i64 60, !15, i64 60, !15, i64 60, !15, i64 60, !15, i64 60}
!45 = !{!"dev_pm_info", !46, i64 0, !15, i64 4, !15, i64 4, !47, i64 4, !47, i64 4, !47, i64 4, !47, i64 4, !36, i64 6, !22, i64 8, !48, i64 24, !4, i64 56, !47, i64 64, !47, i64 64, !4, i64 72, !4, i64 80}
!46 = !{!"pm_message", !15, i64 0}
!47 = !{!"_Bool", !5, i64 0}
!48 = !{!"completion", !15, i64 0, !49, i64 8}
!49 = !{!"__wait_queue_head", !36, i64 0, !22, i64 8}
!50 = !{!"long long", !5, i64 0}
!51 = !{!"dev_archdata", !4, i64 0, !4, i64 8}
!52 = !{!"acpi_dev_node", !4, i64 0}
!53 = !{!"klist_node", !4, i64 0, !22, i64 8, !39, i64 24}
!54 = !{!"work_struct", !55, i64 0, !22, i64 8, !4, i64 24}
!55 = !{!"", !30, i64 0}
!56 = !{!13, !5, i64 2}
!57 = !{!33, !15, i64 28}
!58 = !{!29, !30, i64 24}
!59 = !{!33, !15, i64 24}
!60 = !{!61, !4, i64 904}
!61 = !{!"usb_device", !15, i64 0, !5, i64 4, !15, i64 20, !5, i64 24, !5, i64 28, !4, i64 32, !15, i64 40, !5, i64 44, !4, i64 56, !4, i64 64, !18, i64 72, !43, i64 136, !62, i64 576, !4, i64 600, !4, i64 608, !4, i64 616, !5, i64 624, !5, i64 752, !4, i64 880, !20, i64 888, !5, i64 890, !5, i64 891, !15, i64 892, !15, i64 892, !15, i64 892, !15, i64 892, !15, i64 892, !15, i64 892, !15, i64 892, !15, i64 892, !15, i64 893, !15, i64 893, !15, i64 896, !4, i64 904, !4, i64 912, !4, i64 920, !22, i64 928, !15, i64 944, !15, i64 948, !34, i64 952, !30, i64 960, !30, i64 968, !15, i64 976, !15, i64 976, !15, i64 976, !4, i64 984, !15, i64 992, !5, i64 996, !63, i64 1000, !63, i64 1016, !15, i64 1032}
!62 = !{!"usb_device_descriptor", !5, i64 0, !5, i64 1, !20, i64 2, !5, i64 4, !5, i64 5, !5, i64 6, !5, i64 7, !20, i64 8, !20, i64 10, !20, i64 12, !5, i64 14, !5, i64 15, !5, i64 16, !5, i64 17}
!63 = !{!"usb3_lpm_parameters", !15, i64 0, !15, i64 4, !15, i64 8, !15, i64 12}
!64 = !{!61, !20, i64 584}
!65 = !{!61, !20, i64 586}
!66 = !{!33, !20, i64 232}
!67 = !{!13, !5, i64 6}
!68 = !{!33, !5, i64 64}
!69 = !{!70, !4, i64 48}
!70 = !{!"uvc_streaming", !22, i64 0, !4, i64 16, !4, i64 24, !4, i64 32, !34, i64 40, !4, i64 48, !15, i64 56, !20, i64 60, !71, i64 64, !5, i64 88, !15, i64 92, !4, i64 96, !72, i64 104, !4, i64 144, !4, i64 152, !4, i64 160, !38, i64 168, !15, i64 208, !73, i64 216, !4, i64 808, !75, i64 816, !5, i64 1088, !5, i64 1128, !5, i64 1168, !15, i64 1208, !15, i64 1212, !5, i64 1216, !4, i64 1224, !76, i64 1232, !80, i64 1384}
!71 = !{!"uvc_streaming_header", !5, i64 0, !5, i64 1, !5, i64 2, !5, i64 3, !4, i64 8, !5, i64 16, !5, i64 17, !5, i64 18, !5, i64 19}
!72 = !{!"uvc_streaming_control", !20, i64 0, !5, i64 2, !5, i64 3, !15, i64 4, !20, i64 8, !20, i64 10, !20, i64 12, !20, i64 14, !20, i64 16, !15, i64 18, !15, i64 22, !15, i64 26, !5, i64 30, !5, i64 31, !5, i64 32, !5, i64 33}
!73 = !{!"uvc_video_queue", !74, i64 0, !38, i64 520, !15, i64 560, !15, i64 564, !36, i64 568, !22, i64 576}
!74 = !{!"vb2_queue", !5, i64 0, !15, i64 4, !15, i64 8, !4, i64 16, !4, i64 24, !4, i64 32, !4, i64 40, !4, i64 48, !15, i64 56, !15, i64 60, !15, i64 64, !5, i64 68, !5, i64 72, !15, i64 328, !22, i64 336, !34, i64 352, !22, i64 360, !36, i64 376, !49, i64 384, !5, i64 408, !5, i64 472, !15, i64 504, !4, i64 512}
!75 = !{!"", !5, i64 0, !15, i64 256, !15, i64 260, !15, i64 264, !15, i64 268}
!76 = !{!"", !77, i64 0, !78, i64 64}
!77 = !{!"uvc_stats_frame", !15, i64 0, !15, i64 4, !15, i64 8, !15, i64 12, !15, i64 16, !15, i64 20, !15, i64 24, !15, i64 28, !15, i64 32, !47, i64 36, !47, i64 37, !15, i64 40, !15, i64 44, !15, i64 48, !20, i64 52, !15, i64 56}
!78 = !{!"uvc_stats_stream", !79, i64 0, !79, i64 16, !15, i64 32, !15, i64 36, !15, i64 40, !15, i64 44, !15, i64 48, !15, i64 52, !15, i64 56, !15, i64 60, !15, i64 64, !15, i64 68, !15, i64 72, !15, i64 76, !15, i64 80, !15, i64 84}
!79 = !{!"timespec", !30, i64 0, !30, i64 8}
!80 = !{!"uvc_clock", !4, i64 0, !15, i64 8, !15, i64 12, !15, i64 16, !20, i64 20, !20, i64 22, !36, i64 24}
!81 = !{!42, !4, i64 48}
!82 = !{!22, !4, i64 0}
!83 = !{!22, !4, i64 8}
!84 = !{!34, !15, i64 0}
!85 = !{!13, !4, i64 16}
!86 = !{!13, !15, i64 12}
!87 = !{!5, !5, i64 0}
!88 = !{!19, !20, i64 4}
!89 = !{!19, !5, i64 6}
!90 = !{!19, !5, i64 2}
!91 = !{!33, !4, i64 296}
!92 = !{!26, !20, i64 38}
!93 = !{!26, !4, i64 16}
!94 = !{!26, !4, i64 24}
!95 = !{!96, !4, i64 0}
!96 = !{!"uvc_video_chain", !4, i64 0, !22, i64 8, !22, i64 24, !4, i64 40, !4, i64 48, !38, i64 56, !37, i64 96, !15, i64 112}
!97 = !{!26, !15, i64 32}
!98 = !{!70, !4, i64 24}
!99 = !{!61, !15, i64 0}
!100 = !{!26, !4, i64 304}
!101 = !{!33, !15, i64 236}
!102 = !{!26, !15, i64 244}
!103 = !{!26, !15, i64 240}
!104 = !{!26, !4, i64 248}
!105 = !{!106, !30, i64 16}
!106 = !{!"media_pad", !4, i64 0, !20, i64 8, !30, i64 16}
!107 = !{!26, !5, i64 296}
!108 = !{!42, !4, i64 0}
!109 = !{!70, !4, i64 16}
!110 = !{!70, !15, i64 56}
!111 = !{!18, !15, i64 56}
!112 = !{!18, !4, i64 48}
!113 = !{!70, !5, i64 88}
!114 = !{!70, !5, i64 64}
!115 = !{!70, !5, i64 65}
!116 = !{!70, !5, i64 80}
!117 = !{!70, !5, i64 66}
!118 = !{!70, !5, i64 81}
!119 = !{!70, !5, i64 82}
!120 = !{!70, !5, i64 83}
!121 = !{!70, !5, i64 67}
!122 = !{!70, !4, i64 72}
!123 = !{!70, !4, i64 96}
!124 = !{!70, !15, i64 92}
!125 = !{!126, !4, i64 48}
!126 = !{!"uvc_format", !5, i64 0, !5, i64 1, !5, i64 2, !5, i64 3, !15, i64 4, !15, i64 8, !5, i64 12, !15, i64 44, !4, i64 48}
!127 = !{!126, !15, i64 44}
!128 = !{!42, !15, i64 16}
!129 = !{!18, !20, i64 4}
!130 = !{!70, !20, i64 60}
!131 = !{!20, !20, i64 0}
!132 = !{!126, !5, i64 0}
!133 = !{!126, !5, i64 1}
!134 = !{!135, !4, i64 0}
!135 = !{!"uvc_format_desc", !4, i64 0, !5, i64 8, !15, i64 24}
!136 = !{!135, !15, i64 24}
!137 = !{!126, !15, i64 4}
!138 = !{!126, !5, i64 2}
!139 = !{!126, !15, i64 8}
!140 = !{!141, !5, i64 20}
!141 = !{!"uvc_frame", !5, i64 0, !5, i64 1, !20, i64 2, !20, i64 4, !15, i64 8, !15, i64 12, !15, i64 16, !5, i64 20, !15, i64 24, !4, i64 32}
!142 = !{!141, !15, i64 24}
!143 = !{!141, !4, i64 32}
!144 = !{!141, !5, i64 0}
!145 = !{!141, !5, i64 1}
!146 = !{!141, !20, i64 2}
!147 = !{!141, !20, i64 4}
!148 = !{!141, !15, i64 8}
!149 = !{!141, !15, i64 12}
!150 = !{!141, !15, i64 16}
!151 = !{!126, !5, i64 3}
!152 = !{!19, !5, i64 3}
!153 = !{!96, !4, i64 40}
!154 = !{!96, !4, i64 48}
!155 = !{!26, !4, i64 0}
!156 = !{!70, !4, i64 32}
!157 = !{!26, !4, i64 104}
!158 = !{!159, !4, i64 464}
!159 = !{!"video_device", !4, i64 0, !43, i64 8, !4, i64 448, !4, i64 456, !4, i64 464, !4, i64 472, !4, i64 480, !4, i64 488, !5, i64 496, !15, i64 528, !15, i64 532, !15, i64 536, !20, i64 540, !30, i64 544, !15, i64 552, !36, i64 556, !22, i64 560, !15, i64 576, !50, i64 584, !50, i64 592, !4, i64 600, !4, i64 608, !5, i64 616, !5, i64 640, !4, i64 664}
!160 = !{!159, !4, i64 0}
!161 = !{!159, !4, i64 600}
!162 = !{!159, !4, i64 488}
!163 = !{!159, !15, i64 532}
!164 = !{!96, !15, i64 112}
!165 = !{i32 -2147130642, i32 -2147130603, i32 -2147130582, i32 -2147130545, i32 -2147130522, i32 -2147130652}
!166 = !{!167, !4, i64 0}
!167 = !{!"v4l2_file_operations", !4, i64 0, !4, i64 8, !4, i64 16, !4, i64 24, !4, i64 32, !4, i64 40, !4, i64 48, !4, i64 56, !4, i64 64, !4, i64 72, !4, i64 80}
!168 = !{i32 -2146841507, i32 -2146841468, i32 -2146841447, i32 -2146841410, i32 -2146841387, i32 -2146841517}
!169 = !{i32 -2146841083, i32 -2146841044, i32 -2146841023, i32 -2146840986, i32 -2146840963, i32 -2146841093}
!170 = !{!33, !4, i64 80}
