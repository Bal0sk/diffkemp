; ModuleID = 'drivers/i2c/algos/i2c-algo-bit.bc'
source_filename = "drivers/i2c/algos/i2c-algo-bit.c"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%struct.kernel_param_ops = type { i32, i32 (i8*, %struct.kernel_param*)*, i32 (i8*, %struct.kernel_param*)*, void (i8*)* }
%struct.kernel_param = type { i8*, %struct.module*, %struct.kernel_param_ops*, i16, i8, i8, %union.anon.36 }
%struct.module = type { i32, %struct.list_head, [56 x i8], %struct.module_kobject, %struct.module_attribute*, i8*, i8*, %struct.kobject*, %struct.kernel_symbol*, i32*, i32, %struct.mutex, %struct.kernel_param*, i32, i32, %struct.kernel_symbol*, i32*, i8, %struct.kernel_symbol*, i32*, i32, i32, %struct.exception_table_entry*, i32 ()*, [40 x i8], %struct.module_layout, %struct.module_layout, %struct.mod_arch_specific, i64, i32, %struct.list_head, %struct.bug_entry*, %struct.mod_kallsyms*, %struct.mod_kallsyms, %struct.module_sect_attrs*, %struct.module_notes_attrs*, i8*, i8*, i32, i32, %struct.tracepoint**, i32, i8**, %struct.trace_event_call**, i32, %struct.trace_enum_map**, i32, %struct.list_head, %struct.list_head, void ()*, %struct.atomic_t, [12 x i8] }
%struct.module_kobject = type { %struct.kobject, %struct.module*, %struct.kobject*, %struct.module_param_attrs*, %struct.completion* }
%struct.kobject = type { i8*, %struct.list_head, %struct.kobject*, %struct.kset*, %struct.kobj_type*, %struct.kernfs_node*, %struct.kref, i8 }
%struct.kset = type { %struct.list_head, %struct.spinlock, %struct.kobject, %struct.kset_uevent_ops* }
%struct.spinlock = type { %union.anon.1 }
%union.anon.1 = type { %struct.raw_spinlock }
%struct.raw_spinlock = type { %struct.qspinlock }
%struct.qspinlock = type { %struct.atomic_t }
%struct.kset_uevent_ops = type { i32 (%struct.kset*, %struct.kobject*)*, i8* (%struct.kset*, %struct.kobject*)*, i32 (%struct.kset*, %struct.kobject*, %struct.kobj_uevent_env*)* }
%struct.kobj_uevent_env = type { [3 x i8*], [32 x i8*], i32, [2048 x i8], i32 }
%struct.kobj_type = type { void (%struct.kobject*)*, %struct.sysfs_ops*, %struct.attribute**, %struct.kobj_ns_type_operations* (%struct.kobject*)*, i8* (%struct.kobject*)* }
%struct.sysfs_ops = type { i64 (%struct.kobject*, %struct.attribute*, i8*)*, i64 (%struct.kobject*, %struct.attribute*, i8*, i64)* }
%struct.attribute = type { i8*, i16 }
%struct.kobj_ns_type_operations = type { i32, i1 ()*, i8* ()*, i8* (%struct.sock*)*, i8* ()*, void (i8*)* }
%struct.sock = type opaque
%struct.kernfs_node = type { %struct.atomic_t, %struct.atomic_t, %struct.kernfs_node*, i8*, %struct.rb_node, i8*, i32, %union.anon, i8*, i16, i16, i32, %struct.kernfs_iattrs* }
%struct.rb_node = type { i64, %struct.rb_node*, %struct.rb_node* }
%union.anon = type { %struct.kernfs_elem_attr }
%struct.kernfs_elem_attr = type { %struct.kernfs_ops*, %struct.kernfs_open_node*, i64, %struct.kernfs_node* }
%struct.kernfs_ops = type { i32 (%struct.kernfs_open_file*)*, void (%struct.kernfs_open_file*)*, i32 (%struct.seq_file*, i8*)*, i8* (%struct.seq_file*, i64*)*, i8* (%struct.seq_file*, i8*, i64*)*, void (%struct.seq_file*, i8*)*, i64 (%struct.kernfs_open_file*, i8*, i64, i64)*, i64, i8, i64 (%struct.kernfs_open_file*, i8*, i64, i64)*, i32 (%struct.kernfs_open_file*, %struct.vm_area_struct*)* }
%struct.kernfs_open_file = type { %struct.kernfs_node*, %struct.file*, %struct.seq_file*, i8*, %struct.mutex, %struct.mutex, i32, %struct.list_head, i8*, i64, i8, %struct.vm_operations_struct* }
%struct.file = type opaque
%struct.seq_file = type opaque
%struct.vm_operations_struct = type opaque
%struct.vm_area_struct = type { i64, i64, %struct.vm_area_struct*, %struct.vm_area_struct*, %struct.rb_node, i64, %struct.mm_struct*, %struct.pgprot, i64, %struct.anon.35, %struct.list_head, %struct.anon_vma*, %struct.vm_operations_struct*, i64, %struct.file*, i8*, %struct.mempolicy*, %struct.vm_userfaultfd_ctx }
%struct.mm_struct = type { %struct.vm_area_struct*, %struct.rb_root, i32, i64 (%struct.file*, i64, i64, i64, i64)*, i64, i64, i64, i64, i64, i64, %struct.pgd_t*, %struct.atomic_t, %struct.atomic_t, %struct.atomic64_t, %struct.atomic64_t, i32, %struct.spinlock, %struct.rw_semaphore, %struct.list_head, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, [46 x i64], %struct.mm_rss_stat, %struct.linux_binfmt*, [1 x %struct.cpumask], %struct.mm_context_t, i64, %struct.core_state*, %struct.spinlock, %struct.kioctx_table*, %struct.user_namespace*, %struct.file*, %struct.mmu_notifier_mm*, i8, %struct.uprobes_state, %struct.atomic64_t, %struct.work_struct }
%struct.rb_root = type { %struct.rb_node* }
%struct.pgd_t = type { i64 }
%struct.rw_semaphore = type { %struct.atomic64_t, %struct.list_head, %struct.raw_spinlock, %struct.optimistic_spin_queue, %struct.task_struct* }
%struct.optimistic_spin_queue = type { %struct.atomic_t }
%struct.task_struct = type { %struct.thread_info, i64, i8*, %struct.atomic_t, i32, i32, %struct.llist_node, i32, i32, i32, i64, %struct.task_struct*, i32, i32, i32, i32, i32, i32, %struct.sched_class*, [16 x i8], %struct.sched_entity, %struct.sched_rt_entity, %struct.task_group*, %struct.sched_dl_entity, i32, i32, i32, %struct.cpumask, %struct.sched_info, %struct.list_head, %struct.plist_node, %struct.rb_node, %struct.mm_struct*, %struct.mm_struct*, %struct.vmacache, %struct.task_rss_stat, i32, i32, i32, i32, i64, i32, i8, [3 x i8], i8, i64, %struct.restart_block, i32, i32, %struct.task_struct*, %struct.task_struct*, %struct.list_head, %struct.list_head, %struct.task_struct*, %struct.list_head, %struct.list_head, [3 x %struct.pid_link], %struct.list_head, %struct.list_head, %struct.completion*, i32*, i32*, i64, i64, i64, %struct.prev_cputime, i64, i64, i64, i64, i64, i64, %struct.task_cputime, [3 x %struct.list_head], %struct.cred*, %struct.cred*, %struct.cred*, [16 x i8], %struct.nameidata*, %struct.sysv_sem, %struct.sysv_shm, %struct.fs_struct*, %struct.files_struct*, %struct.nsproxy*, %struct.signal_struct*, %struct.sighand_struct*, %struct.sigset_t, %struct.sigset_t, %struct.sigset_t, %struct.sigpending, i64, i64, i32, %struct.callback_head*, %struct.audit_context*, %struct.kuid_t, i32, %struct.seccomp, i32, i32, %struct.spinlock, %struct.raw_spinlock, %struct.wake_q_node, %struct.rb_root, %struct.rb_node*, %struct.task_struct*, %struct.rt_mutex_waiter*, i8*, %struct.bio_list*, %struct.blk_plug*, %struct.reclaim_state*, %struct.backing_dev_info*, %struct.io_context*, i64, %struct.siginfo*, %struct.task_io_accounting, i64, i64, i64, %struct.nodemask_t, %struct.seqcount, i32, i32, %struct.css_set*, %struct.list_head, %struct.robust_list_head*, %struct.compat_robust_list_head*, %struct.list_head, %struct.futex_pi_state*, [2 x %struct.perf_event_context*], %struct.mutex, %struct.list_head, %struct.mempolicy*, i16, i16, %struct.tlbflush_unmap_batch, %struct.callback_head, %struct.pipe_inode_info*, %struct.page_frag, %struct.task_delay_info*, i32, i32, i64, i64, i64, i64, i64, %struct.uprobe_task*, i32, %struct.task_struct*, %struct.vm_struct*, %struct.atomic_t, i8*, %struct.thread_struct }
%struct.thread_info = type { i64 }
%struct.llist_node = type { %struct.llist_node* }
%struct.sched_class = type opaque
%struct.sched_entity = type { %struct.load_weight, %struct.rb_node, %struct.list_head, i32, i64, i64, i64, i64, i64, %struct.sched_statistics, i32, %struct.sched_entity*, %struct.cfs_rq*, %struct.cfs_rq*, [32 x i8], %struct.sched_avg, [24 x i8] }
%struct.load_weight = type { i64, i32 }
%struct.sched_statistics = type { i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64 }
%struct.cfs_rq = type opaque
%struct.sched_avg = type { i64, i64, i32, i32, i64, i64 }
%struct.sched_rt_entity = type { %struct.list_head, i64, i64, i32, i16, i16, %struct.sched_rt_entity* }
%struct.task_group = type opaque
%struct.sched_dl_entity = type { %struct.rb_node, i64, i64, i64, i64, i64, i64, i32, i32, i32, i32, %struct.hrtimer }
%struct.hrtimer = type { %struct.timerqueue_node, i64, i32 (%struct.hrtimer*)*, %struct.hrtimer_clock_base*, i8, i8 }
%struct.timerqueue_node = type { %struct.rb_node, i64 }
%struct.hrtimer_clock_base = type { %struct.hrtimer_cpu_base*, i32, i32, %struct.timerqueue_head, i64 ()*, i64, [16 x i8] }
%struct.hrtimer_cpu_base = type { %struct.raw_spinlock, %struct.seqcount, %struct.hrtimer*, i32, i32, i32, i8, i8, i8, i64, %struct.hrtimer*, i32, i32, i32, i32, [4 x %struct.hrtimer_clock_base] }
%struct.timerqueue_head = type { %struct.rb_root, %struct.timerqueue_node* }
%struct.cpumask = type { [1 x i64] }
%struct.sched_info = type { i64, i64, i64, i64 }
%struct.plist_node = type { i32, %struct.list_head, %struct.list_head }
%struct.vmacache = type { i32, [4 x %struct.vm_area_struct*] }
%struct.task_rss_stat = type { i32, [4 x i32] }
%struct.restart_block = type { i64 (%struct.restart_block*)*, %union.anon.2 }
%union.anon.2 = type { %struct.anon }
%struct.anon = type { i32*, i32, i32, i32, i64, i32* }
%struct.pid_link = type { %struct.hlist_node, %struct.pid* }
%struct.hlist_node = type { %struct.hlist_node*, %struct.hlist_node** }
%struct.pid = type { %struct.atomic_t, i32, [3 x %struct.hlist_head], %struct.callback_head, [1 x %struct.upid] }
%struct.hlist_head = type { %struct.hlist_node* }
%struct.upid = type { i32, %struct.pid_namespace*, %struct.hlist_node }
%struct.pid_namespace = type opaque
%struct.prev_cputime = type { i64, i64, %struct.raw_spinlock }
%struct.task_cputime = type { i64, i64, i64 }
%struct.cred = type opaque
%struct.nameidata = type opaque
%struct.sysv_sem = type { %struct.sem_undo_list* }
%struct.sem_undo_list = type opaque
%struct.sysv_shm = type { %struct.list_head }
%struct.fs_struct = type opaque
%struct.files_struct = type opaque
%struct.nsproxy = type opaque
%struct.signal_struct = type opaque
%struct.sighand_struct = type opaque
%struct.sigset_t = type { [1 x i64] }
%struct.sigpending = type { %struct.list_head, %struct.sigset_t }
%struct.audit_context = type opaque
%struct.kuid_t = type { i32 }
%struct.seccomp = type { i32, %struct.seccomp_filter* }
%struct.seccomp_filter = type opaque
%struct.wake_q_node = type { %struct.wake_q_node* }
%struct.rt_mutex_waiter = type opaque
%struct.bio_list = type opaque
%struct.blk_plug = type opaque
%struct.reclaim_state = type opaque
%struct.backing_dev_info = type opaque
%struct.io_context = type opaque
%struct.siginfo = type { i32, i32, i32, %union.anon.5 }
%union.anon.5 = type { %struct.anon.9, [80 x i8] }
%struct.anon.9 = type { i32, i32, i32, i64, i64 }
%struct.task_io_accounting = type { i64, i64, i64, i64, i64, i64, i64 }
%struct.nodemask_t = type { [1 x i64] }
%struct.seqcount = type { i32 }
%struct.css_set = type opaque
%struct.robust_list_head = type opaque
%struct.compat_robust_list_head = type opaque
%struct.futex_pi_state = type opaque
%struct.perf_event_context = type opaque
%struct.tlbflush_unmap_batch = type { %struct.cpumask, i8, i8 }
%struct.callback_head = type { %struct.callback_head*, void (%struct.callback_head*)* }
%struct.pipe_inode_info = type opaque
%struct.page_frag = type { %struct.page*, i32, i32 }
%struct.page = type { i64, %union.anon.15, %union.anon.16, %union.anon.17, %union.anon.21, %union.anon.24, [8 x i8] }
%union.anon.15 = type { %struct.address_space* }
%struct.address_space = type opaque
%union.anon.16 = type { i64 }
%union.anon.17 = type { i64 }
%union.anon.21 = type { %struct.list_head }
%union.anon.24 = type { i64 }
%struct.task_delay_info = type opaque
%struct.uprobe_task = type { i32, %union.anon.25, %struct.uprobe*, i64, %struct.return_instance*, i32 }
%union.anon.25 = type { %struct.anon.26 }
%struct.anon.26 = type { %struct.arch_uprobe_task, i64 }
%struct.arch_uprobe_task = type { i64, i32, i32 }
%struct.uprobe = type opaque
%struct.return_instance = type { %struct.uprobe*, i64, i64, i64, i8, %struct.return_instance* }
%struct.vm_struct = type opaque
%struct.thread_struct = type { [3 x %struct.desc_struct], i64, i64, i16, i16, i16, i16, i32, i64, i64, [4 x %struct.perf_event*], i64, i64, i64, i64, i64, i64*, i64, i32, %struct.mm_segment_t, i8, [15 x i8], %struct.fpu }
%struct.desc_struct = type { %union.anon.28 }
%union.anon.28 = type { %struct.anon.29 }
%struct.anon.29 = type { i32, i32 }
%struct.perf_event = type opaque
%struct.mm_segment_t = type { i64 }
%struct.fpu = type { i32, i8, i8, [58 x i8], %union.fpregs_state }
%union.fpregs_state = type { %struct.xregs_state, [3520 x i8] }
%struct.xregs_state = type { %struct.fxregs_state, %struct.xstate_header, [0 x i8] }
%struct.fxregs_state = type { i16, i16, i16, i16, %union.anon.31, i32, i32, [32 x i32], [64 x i32], [12 x i32], %union.anon.34 }
%union.anon.31 = type { %struct.anon.32 }
%struct.anon.32 = type { i64, i64 }
%union.anon.34 = type { [12 x i32] }
%struct.xstate_header = type { i64, i64, [6 x i64] }
%struct.mm_rss_stat = type { [4 x %struct.atomic64_t] }
%struct.linux_binfmt = type opaque
%struct.mm_context_t = type { %struct.ldt_struct*, i16, %struct.mutex, i8*, %struct.vdso_image*, %struct.atomic_t, i16, i16 }
%struct.ldt_struct = type opaque
%struct.vdso_image = type { i8*, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64 }
%struct.core_state = type { %struct.atomic_t, %struct.core_thread, %struct.completion }
%struct.core_thread = type { %struct.task_struct*, %struct.core_thread* }
%struct.completion = type { i32, %struct.__wait_queue_head }
%struct.__wait_queue_head = type { %struct.spinlock, %struct.list_head }
%struct.kioctx_table = type opaque
%struct.user_namespace = type opaque
%struct.mmu_notifier_mm = type opaque
%struct.uprobes_state = type { %struct.xol_area* }
%struct.xol_area = type opaque
%struct.atomic64_t = type { i64 }
%struct.work_struct = type { %struct.atomic64_t, %struct.list_head, void (%struct.work_struct*)* }
%struct.pgprot = type { i64 }
%struct.anon.35 = type { %struct.rb_node, i64 }
%struct.anon_vma = type opaque
%struct.mempolicy = type opaque
%struct.vm_userfaultfd_ctx = type {}
%struct.kernfs_open_node = type opaque
%struct.kernfs_iattrs = type opaque
%struct.kref = type { %struct.refcount_struct }
%struct.refcount_struct = type { %struct.atomic_t }
%struct.module_param_attrs = type opaque
%struct.module_attribute = type { %struct.attribute, i64 (%struct.module_attribute*, %struct.module_kobject*, i8*)*, i64 (%struct.module_attribute*, %struct.module_kobject*, i8*, i64)*, void (%struct.module*, i8*)*, i32 (%struct.module*)*, void (%struct.module*)* }
%struct.mutex = type { %struct.atomic64_t, %struct.spinlock, %struct.optimistic_spin_queue, %struct.list_head }
%struct.kernel_symbol = type { i64, i8* }
%struct.exception_table_entry = type opaque
%struct.module_layout = type { i8*, i32, i32, i32, i32, %struct.mod_tree_node }
%struct.mod_tree_node = type { %struct.module*, %struct.latch_tree_node }
%struct.latch_tree_node = type { [2 x %struct.rb_node] }
%struct.mod_arch_specific = type {}
%struct.bug_entry = type { i32, i32, i16, i16 }
%struct.mod_kallsyms = type { %struct.elf64_sym*, i32, i8* }
%struct.elf64_sym = type { i32, i8, i8, i16, i64, i64 }
%struct.module_sect_attrs = type opaque
%struct.module_notes_attrs = type opaque
%struct.tracepoint = type { i8*, %struct.static_key, i32 ()*, void ()*, %struct.tracepoint_func* }
%struct.static_key = type { %struct.atomic_t }
%struct.tracepoint_func = type { i8*, i8*, i32 }
%struct.trace_event_call = type opaque
%struct.trace_enum_map = type opaque
%struct.list_head = type { %struct.list_head*, %struct.list_head* }
%struct.atomic_t = type { i32 }
%union.anon.36 = type { i8* }
%struct.i2c_adapter = type { %struct.module*, i32, %struct.i2c_algorithm*, i8*, %struct.i2c_lock_operations*, %struct.rt_mutex, %struct.rt_mutex, i32, i32, %struct.device, i32, [48 x i8], %struct.completion, %struct.mutex, %struct.list_head, %struct.i2c_bus_recovery_info*, %struct.i2c_adapter_quirks*, %struct.irq_domain* }
%struct.i2c_algorithm = type { {}*, i32 (%struct.i2c_adapter*, i16, i16, i8, i8, i32, %union.i2c_smbus_data*)*, i32 (%struct.i2c_adapter*)* }
%struct.i2c_lock_operations = type { void (%struct.i2c_adapter*, i32)*, i32 (%struct.i2c_adapter*, i32)*, void (%struct.i2c_adapter*, i32)* }
%struct.rt_mutex = type { %struct.raw_spinlock, %struct.rb_root, %struct.rb_node*, %struct.task_struct* }
%struct.device = type { %struct.device*, %struct.device_private*, %struct.kobject, i8*, %struct.device_type*, %struct.mutex, %struct.bus_type*, %struct.device_driver*, i8*, i8*, %struct.dev_links_info, %struct.dev_pm_info, %struct.dev_pm_domain*, %struct.irq_domain*, %struct.list_head, i32, %struct.dma_map_ops*, i64*, i64, i64, %struct.device_dma_parameters*, %struct.list_head, %struct.dma_coherent_mem*, %struct.dev_archdata, %struct.device_node*, %struct.fwnode_handle*, i32, i32, %struct.spinlock, %struct.list_head, %struct.klist_node, %struct.class*, %struct.attribute_group**, void (%struct.device*)*, %struct.iommu_group*, %struct.iommu_fwspec*, i8 }
%struct.device_private = type opaque
%struct.device_type = type { i8*, %struct.attribute_group**, i32 (%struct.device*, %struct.kobj_uevent_env*)*, i8* (%struct.device*, i16*, %struct.kuid_t*, %struct.kgid_t*)*, void (%struct.device*)*, %struct.dev_pm_ops* }
%struct.kgid_t = type { i32 }
%struct.dev_pm_ops = type { i32 (%struct.device*)*, void (%struct.device*)*, i32 (%struct.device*)*, i32 (%struct.device*)*, i32 (%struct.device*)*, i32 (%struct.device*)*, i32 (%struct.device*)*, i32 (%struct.device*)*, i32 (%struct.device*)*, i32 (%struct.device*)*, i32 (%struct.device*)*, i32 (%struct.device*)*, i32 (%struct.device*)*, i32 (%struct.device*)*, i32 (%struct.device*)*, i32 (%struct.device*)*, i32 (%struct.device*)*, i32 (%struct.device*)*, i32 (%struct.device*)*, i32 (%struct.device*)*, i32 (%struct.device*)*, i32 (%struct.device*)*, i32 (%struct.device*)* }
%struct.bus_type = type { i8*, i8*, %struct.device*, %struct.device_attribute*, %struct.attribute_group**, %struct.attribute_group**, %struct.attribute_group**, i32 (%struct.device*, %struct.device_driver*)*, i32 (%struct.device*, %struct.kobj_uevent_env*)*, i32 (%struct.device*)*, i32 (%struct.device*)*, void (%struct.device*)*, i32 (%struct.device*)*, i32 (%struct.device*)*, i32 (%struct.device*, i32)*, i32 (%struct.device*)*, i32 (%struct.device*)*, %struct.dev_pm_ops*, %struct.iommu_ops*, %struct.subsys_private*, %struct.lock_class_key }
%struct.device_attribute = type { %struct.attribute, i64 (%struct.device*, %struct.device_attribute*, i8*)*, i64 (%struct.device*, %struct.device_attribute*, i8*, i64)* }
%struct.iommu_ops = type opaque
%struct.subsys_private = type opaque
%struct.lock_class_key = type {}
%struct.device_driver = type { i8*, %struct.bus_type*, %struct.module*, i8*, i8, i32, %struct.of_device_id*, %struct.acpi_device_id*, i32 (%struct.device*)*, i32 (%struct.device*)*, void (%struct.device*)*, i32 (%struct.device*, i32)*, i32 (%struct.device*)*, %struct.attribute_group**, %struct.dev_pm_ops*, %struct.driver_private* }
%struct.of_device_id = type { [32 x i8], [32 x i8], [128 x i8], i8* }
%struct.acpi_device_id = type { [9 x i8], i64, i32, i32 }
%struct.driver_private = type opaque
%struct.dev_links_info = type { %struct.list_head, %struct.list_head, i32 }
%struct.dev_pm_info = type { %struct.pm_message, i16, %struct.spinlock, %struct.list_head, %struct.completion, %struct.wakeup_source*, i8, %struct.timer_list, i64, %struct.work_struct, %struct.__wait_queue_head, %struct.wake_irq*, %struct.atomic_t, %struct.atomic_t, i16, i32, i32, i32, i32, i32, i64, i64, i64, i64, %struct.pm_subsys_data*, void (%struct.device*, i32)*, %struct.dev_pm_qos* }
%struct.pm_message = type { i32 }
%struct.wakeup_source = type { i8*, %struct.list_head, %struct.spinlock, %struct.wake_irq*, %struct.timer_list, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i8 }
%struct.timer_list = type { %struct.hlist_node, i64, void (i64)*, i64, i32 }
%struct.wake_irq = type opaque
%struct.pm_subsys_data = type { %struct.spinlock, i32, %struct.list_head }
%struct.dev_pm_qos = type opaque
%struct.dev_pm_domain = type { %struct.dev_pm_ops, void (%struct.device*, i1)*, i32 (%struct.device*)*, void (%struct.device*)*, void (%struct.device*)* }
%struct.dma_map_ops = type opaque
%struct.device_dma_parameters = type { i32, i64 }
%struct.dma_coherent_mem = type opaque
%struct.dev_archdata = type { i8* }
%struct.device_node = type { i8*, i8*, i32, i8*, %struct.fwnode_handle, %struct.property*, %struct.property*, %struct.device_node*, %struct.device_node*, %struct.device_node*, %struct.kobject, i64, i8* }
%struct.fwnode_handle = type { i32, %struct.fwnode_handle* }
%struct.property = type { i8*, i32, i8*, %struct.property*, i64, i32, %struct.bin_attribute }
%struct.bin_attribute = type { %struct.attribute, i64, i8*, i64 (%struct.file*, %struct.kobject*, %struct.bin_attribute*, i8*, i64, i64)*, i64 (%struct.file*, %struct.kobject*, %struct.bin_attribute*, i8*, i64, i64)*, i32 (%struct.file*, %struct.kobject*, %struct.bin_attribute*, %struct.vm_area_struct*)* }
%struct.klist_node = type { i8*, %struct.list_head, %struct.kref }
%struct.class = type { i8*, %struct.module*, %struct.class_attribute*, %struct.attribute_group**, %struct.attribute_group**, %struct.kobject*, i32 (%struct.device*, %struct.kobj_uevent_env*)*, i8* (%struct.device*, i16*)*, void (%struct.class*)*, void (%struct.device*)*, i32 (%struct.device*, i32)*, i32 (%struct.device*)*, i32 (%struct.device*)*, %struct.kobj_ns_type_operations*, i8* (%struct.device*)*, %struct.dev_pm_ops*, %struct.subsys_private* }
%struct.class_attribute = type { %struct.attribute, i64 (%struct.class*, %struct.class_attribute*, i8*)*, i64 (%struct.class*, %struct.class_attribute*, i8*, i64)* }
%struct.attribute_group = type { i8*, i16 (%struct.kobject*, %struct.attribute*, i32)*, i16 (%struct.kobject*, %struct.bin_attribute*, i32)*, %struct.attribute**, %struct.bin_attribute** }
%struct.iommu_group = type opaque
%struct.iommu_fwspec = type opaque
%struct.i2c_bus_recovery_info = type { i32 (%struct.i2c_adapter*)*, i32 (%struct.i2c_adapter*)*, void (%struct.i2c_adapter*, i32)*, i32 (%struct.i2c_adapter*)*, void (%struct.i2c_adapter*)*, void (%struct.i2c_adapter*)*, i32, i32 }
%struct.i2c_adapter_quirks = type { i64, i32, i16, i16, i16, i16 }
%struct.irq_domain = type { %struct.list_head, i8*, %struct.irq_domain_ops*, i8*, i32, %struct.fwnode_handle*, i32, %struct.irq_domain_chip_generic*, %struct.irq_domain*, i64, i32, i32, %struct.radix_tree_root, [0 x i32] }
%struct.irq_domain_ops = type { i32 (%struct.irq_domain*, %struct.device_node*, i32)*, i32 (%struct.irq_domain*, %struct.irq_fwspec*, i32)*, i32 (%struct.irq_domain*, i32, i64)*, void (%struct.irq_domain*, i32)*, i32 (%struct.irq_domain*, %struct.device_node*, i32*, i32, i64*, i32*)*, i32 (%struct.irq_domain*, i32, i32, i8*)*, void (%struct.irq_domain*, i32, i32)*, void (%struct.irq_domain*, %struct.irq_data*)*, void (%struct.irq_domain*, %struct.irq_data*)*, i32 (%struct.irq_domain*, %struct.irq_fwspec*, i64*, i32*)* }
%struct.irq_fwspec = type { %struct.fwnode_handle*, i32, [16 x i32] }
%struct.irq_data = type opaque
%struct.irq_domain_chip_generic = type opaque
%struct.radix_tree_root = type { i32, %struct.radix_tree_node* }
%struct.radix_tree_node = type { i8, i8, i8, i8, %struct.radix_tree_node*, %struct.radix_tree_root*, %union.anon.0, [64 x i8*], [3 x [1 x i64]] }
%union.anon.0 = type { %struct.list_head }
%struct.i2c_msg = type { i16, i16, i16, i8* }
%union.i2c_smbus_data = type { i16, [32 x i8] }
%struct.i2c_algo_bit_data = type { i8*, void (i8*, i32)*, void (i8*, i32)*, i32 (i8*)*, i32 (i8*)*, i32 (%struct.i2c_adapter*)*, void (%struct.i2c_adapter*)*, i32, i32 }

@__param_str_bit_test = internal constant [22 x i8] c"i2c_algo_bit.bit_test\00", align 16
@param_ops_int = external constant %struct.kernel_param_ops, align 8
@bit_test = internal global i32 0, align 4
@__param_bit_test = internal constant %struct.kernel_param { i8* getelementptr inbounds ([22 x i8], [22 x i8]* @__param_str_bit_test, i32 0, i32 0), %struct.module* null, %struct.kernel_param_ops* @param_ops_int, i16 292, i8 -1, i8 0, %union.anon.36 { i8* bitcast (i32* @bit_test to i8*) } }, section "__param", align 8
@i2c_bit_algo = constant { i32 (%struct.i2c_adapter*, %struct.i2c_msg*, i32)*, i32 (%struct.i2c_adapter*, i16, i16, i8, i8, i32, %union.i2c_smbus_data*)*, i32 (%struct.i2c_adapter*)* } { i32 (%struct.i2c_adapter*, %struct.i2c_msg*, i32)* @bit_xfer, i32 (%struct.i2c_adapter*, i16, i16, i8, i8, i32, %union.i2c_smbus_data*)* null, i32 (%struct.i2c_adapter*)* @bit_func }, align 8
@__kstrtab_i2c_bit_algo = internal constant [13 x i8] c"i2c_bit_algo\00", section "__ksymtab_strings", align 1
@__ksymtab_i2c_bit_algo = internal constant %struct.kernel_symbol { i64 ptrtoint ({ i32 (%struct.i2c_adapter*, %struct.i2c_msg*, i32)*, i32 (%struct.i2c_adapter*, i16, i16, i8, i8, i32, %union.i2c_smbus_data*)*, i32 (%struct.i2c_adapter*)* }* @i2c_bit_algo to i64), i8* getelementptr inbounds ([13 x i8], [13 x i8]* @__kstrtab_i2c_bit_algo, i32 0, i32 0) }, section "___ksymtab+i2c_bit_algo", align 8
@__kstrtab_i2c_bit_add_bus = internal constant [16 x i8] c"i2c_bit_add_bus\00", section "__ksymtab_strings", align 1
@__ksymtab_i2c_bit_add_bus = internal constant %struct.kernel_symbol { i64 ptrtoint (i32 (%struct.i2c_adapter*)* @i2c_bit_add_bus to i64), i8* getelementptr inbounds ([16 x i8], [16 x i8]* @__kstrtab_i2c_bit_add_bus, i32 0, i32 0) }, section "___ksymtab+i2c_bit_add_bus", align 8
@__kstrtab_i2c_bit_add_numbered_bus = internal constant [25 x i8] c"i2c_bit_add_numbered_bus\00", section "__ksymtab_strings", align 1
@__ksymtab_i2c_bit_add_numbered_bus = internal constant %struct.kernel_symbol { i64 ptrtoint (i32 (%struct.i2c_adapter*)* @i2c_bit_add_numbered_bus to i64), i8* getelementptr inbounds ([25 x i8], [25 x i8]* @__kstrtab_i2c_bit_add_numbered_bus, i32 0, i32 0) }, section "___ksymtab+i2c_bit_add_numbered_bus", align 8
@jiffies = external global i64, align 64
@.str = private unnamed_addr constant [31 x i8] c"died at extended address code\0A\00", align 1
@.str.1 = private unnamed_addr constant [26 x i8] c"died at 2nd address code\0A\00", align 1
@.str.2 = private unnamed_addr constant [31 x i8] c"died at repeated address code\0A\00", align 1
@.str.3 = private unnamed_addr constant [38 x i8] c"readbytes: invalid block length (%d)\0A\00", align 1
@.str.4 = private unnamed_addr constant [28 x i8] c"readbytes: ack/nak timeout\0A\00", align 1
@.str.5 = private unnamed_addr constant [25 x i8] c"sendbytes: NAK bailout.\0A\00", align 1
@.str.6 = private unnamed_addr constant [21 x i8] c"sendbytes: error %d\0A\00", align 1
@i2c_bit_quirk_no_clk_stretch = internal constant %struct.i2c_adapter_quirks { i64 16, i32 0, i16 0, i16 0, i16 0, i16 0 }, align 8
@.str.7 = private unnamed_addr constant [35 x i8] c"Not I2C compliant: can't read SCL\0A\00", align 1
@.str.8 = private unnamed_addr constant [23 x i8] c"Bus may be unreliable\0A\00", align 1
@.str.9 = private unnamed_addr constant [45 x i8] c"\016%s: Testing SDA only, SCL is not readable\0A\00", align 1
@.str.10 = private unnamed_addr constant [45 x i8] c"\014%s: bus seems to be busy (scl=%d, sda=%d)\0A\00", align 1
@.str.11 = private unnamed_addr constant [23 x i8] c"\014%s: SDA stuck high!\0A\00", align 1
@.str.12 = private unnamed_addr constant [49 x i8] c"\014%s: SCL unexpected low while pulling SDA low!\0A\00", align 1
@.str.13 = private unnamed_addr constant [22 x i8] c"\014%s: SDA stuck low!\0A\00", align 1
@.str.14 = private unnamed_addr constant [50 x i8] c"\014%s: SCL unexpected low while pulling SDA high!\0A\00", align 1
@.str.15 = private unnamed_addr constant [23 x i8] c"\014%s: SCL stuck high!\0A\00", align 1
@.str.16 = private unnamed_addr constant [49 x i8] c"\014%s: SDA unexpected low while pulling SCL low!\0A\00", align 1
@.str.17 = private unnamed_addr constant [22 x i8] c"\014%s: SCL stuck low!\0A\00", align 1
@.str.18 = private unnamed_addr constant [50 x i8] c"\014%s: SDA unexpected low while pulling SCL high!\0A\00", align 1
@.str.19 = private unnamed_addr constant [15 x i8] c"\016%s: Test OK\0A\00", align 1
@llvm.used = appending global [4 x i8*] [i8* bitcast (%struct.kernel_param* @__param_bit_test to i8*), i8* bitcast (%struct.kernel_symbol* @__ksymtab_i2c_bit_algo to i8*), i8* bitcast (%struct.kernel_symbol* @__ksymtab_i2c_bit_add_bus to i8*), i8* bitcast (%struct.kernel_symbol* @__ksymtab_i2c_bit_add_numbered_bus to i8*)], section "llvm.metadata"

; Function Attrs: noinline nounwind uwtable
define internal i32 @bit_xfer(%struct.i2c_adapter*, %struct.i2c_msg*, i32) #0 {
  %4 = getelementptr inbounds %struct.i2c_adapter, %struct.i2c_adapter* %0, i32 0, i32 3
  %5 = load i8*, i8** %4, align 8
  %6 = bitcast i8* %5 to %struct.i2c_algo_bit_data*
  %7 = getelementptr inbounds %struct.i2c_algo_bit_data, %struct.i2c_algo_bit_data* %6, i32 0, i32 5
  %8 = load i32 (%struct.i2c_adapter*)*, i32 (%struct.i2c_adapter*)** %7, align 8
  %9 = icmp ne i32 (%struct.i2c_adapter*)* %8, null
  br i1 %9, label %10, label %15

; <label>:10:                                     ; preds = %3
  %11 = getelementptr inbounds %struct.i2c_algo_bit_data, %struct.i2c_algo_bit_data* %6, i32 0, i32 5
  %12 = load i32 (%struct.i2c_adapter*)*, i32 (%struct.i2c_adapter*)** %11, align 8
  %13 = call i32 %12(%struct.i2c_adapter* %0)
  %14 = icmp slt i32 %13, 0
  br i1 %14, label %71, label %15

; <label>:15:                                     ; preds = %10, %3
  call void @i2c_start(%struct.i2c_algo_bit_data* %6)
  br label %16

; <label>:16:                                     ; preds = %62, %15
  %.02 = phi i32 [ 0, %15 ], [ %63, %62 ]
  %17 = icmp slt i32 %.02, %2
  br i1 %17, label %18, label %64

; <label>:18:                                     ; preds = %16
  %19 = sext i32 %.02 to i64
  %20 = getelementptr inbounds %struct.i2c_msg, %struct.i2c_msg* %1, i64 %19
  %21 = getelementptr inbounds %struct.i2c_msg, %struct.i2c_msg* %20, i32 0, i32 1
  %22 = load i16, i16* %21, align 2
  %23 = zext i16 %22 to i32
  %24 = and i32 %23, 4096
  %25 = trunc i32 %24 to i16
  %26 = getelementptr inbounds %struct.i2c_msg, %struct.i2c_msg* %20, i32 0, i32 1
  %27 = load i16, i16* %26, align 2
  %28 = zext i16 %27 to i32
  %29 = and i32 %28, 16384
  %30 = icmp ne i32 %29, 0
  br i1 %30, label %38, label %31

; <label>:31:                                     ; preds = %18
  %32 = icmp ne i32 %.02, 0
  br i1 %32, label %33, label %34

; <label>:33:                                     ; preds = %31
  call void @i2c_repstart(%struct.i2c_algo_bit_data* %6)
  br label %34

; <label>:34:                                     ; preds = %33, %31
  %35 = call i32 @bit_doAddress(%struct.i2c_adapter* %0, %struct.i2c_msg* %20)
  %36 = icmp eq i32 %35, 0
  %37 = icmp ne i16 %25, 0
  %or.cond = or i1 %36, %37
  br i1 %or.cond, label %38, label %64

; <label>:38:                                     ; preds = %34, %18
  %39 = getelementptr inbounds %struct.i2c_msg, %struct.i2c_msg* %20, i32 0, i32 1
  %40 = load i16, i16* %39, align 2
  %41 = zext i16 %40 to i32
  %42 = and i32 %41, 1
  %43 = icmp ne i32 %42, 0
  br i1 %43, label %44, label %53

; <label>:44:                                     ; preds = %38
  %45 = call i32 @readbytes(%struct.i2c_adapter* %0, %struct.i2c_msg* %20)
  %46 = icmp sge i32 %45, 1
  %47 = getelementptr inbounds %struct.i2c_msg, %struct.i2c_msg* %20, i32 0, i32 2
  %48 = load i16, i16* %47, align 4
  %49 = zext i16 %48 to i32
  %50 = icmp slt i32 %45, %49
  br i1 %50, label %51, label %62

; <label>:51:                                     ; preds = %44
  %52 = icmp sge i32 %45, 0
  %. = select i1 %52, i32 -5, i32 %45
  br label %64

; <label>:53:                                     ; preds = %38
  %54 = call i32 @sendbytes(%struct.i2c_adapter* %0, %struct.i2c_msg* %20)
  %55 = icmp sge i32 %54, 1
  %56 = getelementptr inbounds %struct.i2c_msg, %struct.i2c_msg* %20, i32 0, i32 2
  %57 = load i16, i16* %56, align 4
  %58 = zext i16 %57 to i32
  %59 = icmp slt i32 %54, %58
  br i1 %59, label %60, label %62

; <label>:60:                                     ; preds = %53
  %61 = icmp sge i32 %54, 0
  %.3 = select i1 %61, i32 -5, i32 %54
  br label %64

; <label>:62:                                     ; preds = %44, %53
  %63 = add nsw i32 %.02, 1
  br label %16

; <label>:64:                                     ; preds = %16, %34, %60, %51
  %.2 = phi i32 [ %., %51 ], [ %.3, %60 ], [ %35, %34 ], [ %.02, %16 ]
  call void @i2c_stop(%struct.i2c_algo_bit_data* %6)
  %65 = getelementptr inbounds %struct.i2c_algo_bit_data, %struct.i2c_algo_bit_data* %6, i32 0, i32 6
  %66 = load void (%struct.i2c_adapter*)*, void (%struct.i2c_adapter*)** %65, align 8
  %67 = icmp ne void (%struct.i2c_adapter*)* %66, null
  br i1 %67, label %68, label %71

; <label>:68:                                     ; preds = %64
  %69 = getelementptr inbounds %struct.i2c_algo_bit_data, %struct.i2c_algo_bit_data* %6, i32 0, i32 6
  %70 = load void (%struct.i2c_adapter*)*, void (%struct.i2c_adapter*)** %69, align 8
  call void %70(%struct.i2c_adapter* %0)
  br label %71

; <label>:71:                                     ; preds = %64, %68, %10
  %.0 = phi i32 [ %13, %10 ], [ %.2, %68 ], [ %.2, %64 ]
  ret i32 %.0
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @bit_func(%struct.i2c_adapter*) #0 {
  ret i32 268402719
}

; Function Attrs: noinline nounwind uwtable
define i32 @i2c_bit_add_bus(%struct.i2c_adapter*) #0 {
  %2 = call i32 @__i2c_bit_add_bus(%struct.i2c_adapter* %0, i32 (%struct.i2c_adapter*)* @i2c_add_adapter)
  ret i32 %2
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @__i2c_bit_add_bus(%struct.i2c_adapter*, i32 (%struct.i2c_adapter*)*) #0 {
  %3 = getelementptr inbounds %struct.i2c_adapter, %struct.i2c_adapter* %0, i32 0, i32 3
  %4 = load i8*, i8** %3, align 8
  %5 = bitcast i8* %4 to %struct.i2c_algo_bit_data*
  %6 = load i32, i32* @bit_test, align 4
  %7 = icmp ne i32 %6, 0
  br i1 %7, label %8, label %13

; <label>:8:                                      ; preds = %2
  %9 = call i32 @test_bus(%struct.i2c_adapter* %0)
  %10 = load i32, i32* @bit_test, align 4
  %11 = icmp sge i32 %10, 2
  %12 = icmp slt i32 %9, 0
  %or.cond = and i1 %11, %12
  br i1 %or.cond, label %31, label %13

; <label>:13:                                     ; preds = %8, %2
  %14 = getelementptr inbounds %struct.i2c_adapter, %struct.i2c_adapter* %0, i32 0, i32 2
  store %struct.i2c_algorithm* bitcast ({ i32 (%struct.i2c_adapter*, %struct.i2c_msg*, i32)*, i32 (%struct.i2c_adapter*, i16, i16, i8, i8, i32, %union.i2c_smbus_data*)*, i32 (%struct.i2c_adapter*)* }* @i2c_bit_algo to %struct.i2c_algorithm*), %struct.i2c_algorithm** %14, align 8
  %15 = getelementptr inbounds %struct.i2c_adapter, %struct.i2c_adapter* %0, i32 0, i32 8
  store i32 3, i32* %15, align 4
  %16 = getelementptr inbounds %struct.i2c_algo_bit_data, %struct.i2c_algo_bit_data* %5, i32 0, i32 4
  %17 = load i32 (i8*)*, i32 (i8*)** %16, align 8
  %18 = icmp eq i32 (i8*)* %17, null
  br i1 %18, label %19, label %21

; <label>:19:                                     ; preds = %13
  %20 = getelementptr inbounds %struct.i2c_adapter, %struct.i2c_adapter* %0, i32 0, i32 16
  store %struct.i2c_adapter_quirks* @i2c_bit_quirk_no_clk_stretch, %struct.i2c_adapter_quirks** %20, align 8
  br label %21

; <label>:21:                                     ; preds = %19, %13
  %22 = call i32 %1(%struct.i2c_adapter* %0)
  %23 = icmp slt i32 %22, 0
  br i1 %23, label %31, label %24

; <label>:24:                                     ; preds = %21
  %25 = getelementptr inbounds %struct.i2c_algo_bit_data, %struct.i2c_algo_bit_data* %5, i32 0, i32 4
  %26 = load i32 (i8*)*, i32 (i8*)** %25, align 8
  %27 = icmp eq i32 (i8*)* %26, null
  br i1 %27, label %28, label %31

; <label>:28:                                     ; preds = %24
  %29 = getelementptr inbounds %struct.i2c_adapter, %struct.i2c_adapter* %0, i32 0, i32 9
  call void (%struct.device*, i8*, ...) @dev_warn(%struct.device* %29, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.7, i32 0, i32 0))
  %30 = getelementptr inbounds %struct.i2c_adapter, %struct.i2c_adapter* %0, i32 0, i32 9
  call void (%struct.device*, i8*, ...) @dev_warn(%struct.device* %30, i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.8, i32 0, i32 0))
  br label %31

; <label>:31:                                     ; preds = %24, %28, %21, %8
  %.0 = phi i32 [ -19, %8 ], [ %22, %21 ], [ 0, %28 ], [ 0, %24 ]
  ret i32 %.0
}

declare i32 @i2c_add_adapter(%struct.i2c_adapter*) #1

; Function Attrs: noinline nounwind uwtable
define i32 @i2c_bit_add_numbered_bus(%struct.i2c_adapter*) #0 {
  %2 = call i32 @__i2c_bit_add_bus(%struct.i2c_adapter* %0, i32 (%struct.i2c_adapter*)* @i2c_add_numbered_adapter)
  ret i32 %2
}

declare i32 @i2c_add_numbered_adapter(%struct.i2c_adapter*) #1

; Function Attrs: noinline nounwind uwtable
define internal void @i2c_start(%struct.i2c_algo_bit_data*) #0 {
  %2 = getelementptr inbounds %struct.i2c_algo_bit_data, %struct.i2c_algo_bit_data* %0, i32 0, i32 1
  %3 = load void (i8*, i32)*, void (i8*, i32)** %2, align 8
  %4 = getelementptr inbounds %struct.i2c_algo_bit_data, %struct.i2c_algo_bit_data* %0, i32 0, i32 0
  %5 = load i8*, i8** %4, align 8
  call void %3(i8* %5, i32 0)
  %6 = getelementptr inbounds %struct.i2c_algo_bit_data, %struct.i2c_algo_bit_data* %0, i32 0, i32 7
  %7 = load i32, i32* %6, align 8
  %8 = sext i32 %7 to i64
  call void @__udelay(i64 %8)
  call void @scllo(%struct.i2c_algo_bit_data* %0)
  ret void
}

; Function Attrs: noinline nounwind uwtable
define internal void @i2c_repstart(%struct.i2c_algo_bit_data*) #0 {
  call void @sdahi(%struct.i2c_algo_bit_data* %0)
  %2 = call i32 @sclhi(%struct.i2c_algo_bit_data* %0)
  %3 = getelementptr inbounds %struct.i2c_algo_bit_data, %struct.i2c_algo_bit_data* %0, i32 0, i32 1
  %4 = load void (i8*, i32)*, void (i8*, i32)** %3, align 8
  %5 = getelementptr inbounds %struct.i2c_algo_bit_data, %struct.i2c_algo_bit_data* %0, i32 0, i32 0
  %6 = load i8*, i8** %5, align 8
  call void %4(i8* %6, i32 0)
  %7 = getelementptr inbounds %struct.i2c_algo_bit_data, %struct.i2c_algo_bit_data* %0, i32 0, i32 7
  %8 = load i32, i32* %7, align 8
  %9 = sext i32 %8 to i64
  call void @__udelay(i64 %9)
  call void @scllo(%struct.i2c_algo_bit_data* %0)
  ret void
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @bit_doAddress(%struct.i2c_adapter*, %struct.i2c_msg*) #0 {
  %3 = getelementptr inbounds %struct.i2c_msg, %struct.i2c_msg* %1, i32 0, i32 1
  %4 = load i16, i16* %3, align 2
  %5 = getelementptr inbounds %struct.i2c_msg, %struct.i2c_msg* %1, i32 0, i32 1
  %6 = load i16, i16* %5, align 2
  %7 = zext i16 %6 to i32
  %8 = and i32 %7, 4096
  %9 = trunc i32 %8 to i16
  %10 = getelementptr inbounds %struct.i2c_adapter, %struct.i2c_adapter* %0, i32 0, i32 3
  %11 = load i8*, i8** %10, align 8
  %12 = bitcast i8* %11 to %struct.i2c_algo_bit_data*
  %13 = zext i16 %9 to i32
  %14 = icmp ne i32 %13, 0
  br i1 %14, label %18, label %15

; <label>:15:                                     ; preds = %2
  %16 = getelementptr inbounds %struct.i2c_adapter, %struct.i2c_adapter* %0, i32 0, i32 8
  %17 = load i32, i32* %16, align 4
  br label %18

; <label>:18:                                     ; preds = %2, %15
  %19 = phi i32 [ %17, %15 ], [ 0, %2 ]
  %20 = zext i16 %4 to i32
  %21 = and i32 %20, 16
  %22 = icmp ne i32 %21, 0
  %23 = getelementptr inbounds %struct.i2c_msg, %struct.i2c_msg* %1, i32 0, i32 0
  %24 = load i16, i16* %23, align 8
  %25 = zext i16 %24 to i32
  br i1 %22, label %26, label %60

; <label>:26:                                     ; preds = %18
  %27 = ashr i32 %25, 7
  %28 = and i32 %27, 6
  %29 = or i32 240, %28
  %30 = trunc i32 %29 to i8
  %31 = call i32 @try_address(%struct.i2c_adapter* %0, i8 zeroext %30, i32 %19)
  %32 = icmp eq i32 %31, 1
  %33 = icmp ne i16 %9, 0
  %or.cond = or i1 %32, %33
  br i1 %or.cond, label %36, label %34

; <label>:34:                                     ; preds = %26
  %35 = getelementptr inbounds %struct.i2c_adapter, %struct.i2c_adapter* %0, i32 0, i32 9
  call void (%struct.device*, i8*, ...) @dev_err(%struct.device* %35, i8* getelementptr inbounds ([31 x i8], [31 x i8]* @.str, i32 0, i32 0))
  br label %79

; <label>:36:                                     ; preds = %26
  %37 = getelementptr inbounds %struct.i2c_msg, %struct.i2c_msg* %1, i32 0, i32 0
  %38 = load i16, i16* %37, align 8
  %39 = zext i16 %38 to i32
  %40 = and i32 %39, 255
  %41 = trunc i32 %40 to i8
  %42 = call i32 @i2c_outb(%struct.i2c_adapter* %0, i8 zeroext %41)
  %43 = icmp eq i32 %42, 1
  %44 = icmp ne i16 %9, 0
  %or.cond2 = or i1 %43, %44
  br i1 %or.cond2, label %47, label %45

; <label>:45:                                     ; preds = %36
  %46 = getelementptr inbounds %struct.i2c_adapter, %struct.i2c_adapter* %0, i32 0, i32 9
  call void (%struct.device*, i8*, ...) @dev_err(%struct.device* %46, i8* getelementptr inbounds ([26 x i8], [26 x i8]* @.str.1, i32 0, i32 0))
  br label %79

; <label>:47:                                     ; preds = %36
  %48 = zext i16 %4 to i32
  %49 = and i32 %48, 1
  %50 = icmp ne i32 %49, 0
  br i1 %50, label %51, label %78

; <label>:51:                                     ; preds = %47
  call void @i2c_repstart(%struct.i2c_algo_bit_data* %12)
  %52 = zext i8 %30 to i32
  %53 = or i32 %52, 1
  %54 = trunc i32 %53 to i8
  %55 = call i32 @try_address(%struct.i2c_adapter* %0, i8 zeroext %54, i32 %19)
  %56 = icmp eq i32 %55, 1
  %57 = icmp ne i16 %9, 0
  %or.cond3 = or i1 %56, %57
  br i1 %or.cond3, label %78, label %58

; <label>:58:                                     ; preds = %51
  %59 = getelementptr inbounds %struct.i2c_adapter, %struct.i2c_adapter* %0, i32 0, i32 9
  call void (%struct.device*, i8*, ...) @dev_err(%struct.device* %59, i8* getelementptr inbounds ([31 x i8], [31 x i8]* @.str.2, i32 0, i32 0))
  br label %79

; <label>:60:                                     ; preds = %18
  %61 = shl i32 %25, 1
  %62 = trunc i32 %61 to i8
  %63 = zext i16 %4 to i32
  %64 = and i32 %63, 1
  %65 = icmp ne i32 %64, 0
  %66 = zext i8 %62 to i32
  %67 = or i32 %66, 1
  %68 = trunc i32 %67 to i8
  %.01 = select i1 %65, i8 %68, i8 %62
  %69 = zext i16 %4 to i32
  %70 = and i32 %69, 8192
  %71 = icmp ne i32 %70, 0
  %72 = zext i8 %.01 to i32
  %73 = xor i32 %72, 1
  %74 = trunc i32 %73 to i8
  %.1 = select i1 %71, i8 %74, i8 %.01
  %75 = call i32 @try_address(%struct.i2c_adapter* %0, i8 zeroext %.1, i32 %19)
  %76 = icmp eq i32 %75, 1
  %77 = icmp ne i16 %9, 0
  %or.cond4 = or i1 %76, %77
  br i1 %or.cond4, label %78, label %79

; <label>:78:                                     ; preds = %60, %47, %51
  br label %79

; <label>:79:                                     ; preds = %60, %78, %58, %45, %34
  %.0 = phi i32 [ 0, %78 ], [ -5, %58 ], [ -6, %45 ], [ -6, %34 ], [ -6, %60 ]
  ret i32 %.0
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @readbytes(%struct.i2c_adapter*, %struct.i2c_msg*) #0 {
  %3 = getelementptr inbounds %struct.i2c_msg, %struct.i2c_msg* %1, i32 0, i32 3
  %4 = load i8*, i8** %3, align 8
  %5 = getelementptr inbounds %struct.i2c_msg, %struct.i2c_msg* %1, i32 0, i32 2
  %6 = load i16, i16* %5, align 4
  %7 = zext i16 %6 to i32
  %8 = getelementptr inbounds %struct.i2c_msg, %struct.i2c_msg* %1, i32 0, i32 1
  %9 = load i16, i16* %8, align 2
  %10 = zext i16 %9 to i32
  br label %11

; <label>:11:                                     ; preds = %41, %44, %2
  %.03 = phi i32 [ 0, %2 ], [ %18, %44 ], [ %18, %41 ]
  %.02 = phi i8* [ %4, %2 ], [ %19, %44 ], [ %19, %41 ]
  %.01 = phi i32 [ %7, %2 ], [ %.1, %44 ], [ %.1, %41 ]
  %12 = icmp sgt i32 %.01, 0
  br i1 %12, label %13, label %.loopexit

; <label>:13:                                     ; preds = %11
  %14 = call i32 @i2c_inb(%struct.i2c_adapter* %0)
  %15 = icmp sge i32 %14, 0
  br i1 %15, label %16, label %.loopexit

; <label>:16:                                     ; preds = %13
  %17 = trunc i32 %14 to i8
  store i8 %17, i8* %.02, align 1
  %18 = add nsw i32 %.03, 1
  %19 = getelementptr inbounds i8, i8* %.02, i32 1
  %20 = add nsw i32 %.01, -1
  %21 = icmp eq i32 %18, 1
  %22 = and i32 %10, 1024
  %23 = icmp ne i32 %22, 0
  %or.cond = and i1 %21, %23
  br i1 %or.cond, label %24, label %41

; <label>:24:                                     ; preds = %16
  %25 = icmp sle i32 %14, 0
  %26 = icmp sgt i32 %14, 32
  %or.cond5 = or i1 %25, %26
  br i1 %or.cond5, label %27, label %34

; <label>:27:                                     ; preds = %24
  %28 = and i32 %10, 2048
  %29 = icmp ne i32 %28, 0
  br i1 %29, label %32, label %30

; <label>:30:                                     ; preds = %27
  %31 = call i32 @acknak(%struct.i2c_adapter* %0, i32 0)
  br label %32

; <label>:32:                                     ; preds = %30, %27
  %33 = getelementptr inbounds %struct.i2c_adapter, %struct.i2c_adapter* %0, i32 0, i32 9
  call void (%struct.device*, i8*, ...) @dev_err(%struct.device* %33, i8* getelementptr inbounds ([38 x i8], [38 x i8]* @.str.3, i32 0, i32 0), i32 %14)
  br label %.loopexit

; <label>:34:                                     ; preds = %24
  %35 = add nsw i32 %20, %14
  %36 = getelementptr inbounds %struct.i2c_msg, %struct.i2c_msg* %1, i32 0, i32 2
  %37 = load i16, i16* %36, align 4
  %38 = zext i16 %37 to i32
  %39 = add nsw i32 %38, %14
  %40 = trunc i32 %39 to i16
  store i16 %40, i16* %36, align 4
  br label %41

; <label>:41:                                     ; preds = %34, %16
  %.1 = phi i32 [ %35, %34 ], [ %20, %16 ]
  %42 = and i32 %10, 2048
  %43 = icmp ne i32 %42, 0
  br i1 %43, label %11, label %44

; <label>:44:                                     ; preds = %41
  %45 = call i32 @acknak(%struct.i2c_adapter* %0, i32 %.1)
  %46 = icmp slt i32 %45, 0
  br i1 %46, label %.loopexit, label %11

.loopexit:                                        ; preds = %13, %11, %44, %32
  %.0 = phi i32 [ -71, %32 ], [ %45, %44 ], [ %.03, %11 ], [ %.03, %13 ]
  ret i32 %.0
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @sendbytes(%struct.i2c_adapter*, %struct.i2c_msg*) #0 {
  %3 = getelementptr inbounds %struct.i2c_msg, %struct.i2c_msg* %1, i32 0, i32 3
  %4 = load i8*, i8** %3, align 8
  %5 = getelementptr inbounds %struct.i2c_msg, %struct.i2c_msg* %1, i32 0, i32 2
  %6 = load i16, i16* %5, align 4
  %7 = zext i16 %6 to i32
  %8 = getelementptr inbounds %struct.i2c_msg, %struct.i2c_msg* %1, i32 0, i32 1
  %9 = load i16, i16* %8, align 2
  %10 = zext i16 %9 to i32
  %11 = and i32 %10, 4096
  %12 = trunc i32 %11 to i16
  br label %13

; <label>:13:                                     ; preds = %23, %2
  %.03 = phi i8* [ %4, %2 ], [ %25, %23 ]
  %.02 = phi i32 [ %7, %2 ], [ %24, %23 ]
  %.01 = phi i32 [ 0, %2 ], [ %26, %23 ]
  %14 = icmp sgt i32 %.02, 0
  br i1 %14, label %15, label %32

; <label>:15:                                     ; preds = %13
  %16 = load i8, i8* %.03, align 1
  %17 = call i32 @i2c_outb(%struct.i2c_adapter* %0, i8 zeroext %16)
  %18 = icmp sgt i32 %17, 0
  br i1 %18, label %23, label %19

; <label>:19:                                     ; preds = %15
  %20 = zext i16 %12 to i32
  %21 = icmp ne i32 %20, 0
  %22 = icmp eq i32 %17, 0
  %or.cond = and i1 %21, %22
  br i1 %or.cond, label %23, label %27

; <label>:23:                                     ; preds = %19, %15
  %24 = add nsw i32 %.02, -1
  %25 = getelementptr inbounds i8, i8* %.03, i32 1
  %26 = add nsw i32 %.01, 1
  br label %13

; <label>:27:                                     ; preds = %19
  %28 = icmp eq i32 %17, 0
  %29 = getelementptr inbounds %struct.i2c_adapter, %struct.i2c_adapter* %0, i32 0, i32 9
  br i1 %28, label %30, label %31

; <label>:30:                                     ; preds = %27
  call void (%struct.device*, i8*, ...) @dev_err(%struct.device* %29, i8* getelementptr inbounds ([25 x i8], [25 x i8]* @.str.5, i32 0, i32 0))
  br label %32

; <label>:31:                                     ; preds = %27
  call void (%struct.device*, i8*, ...) @dev_err(%struct.device* %29, i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.6, i32 0, i32 0), i32 %17)
  br label %32

; <label>:32:                                     ; preds = %13, %31, %30
  %.0 = phi i32 [ -5, %30 ], [ %17, %31 ], [ %.01, %13 ]
  ret i32 %.0
}

; Function Attrs: noinline nounwind uwtable
define internal void @i2c_stop(%struct.i2c_algo_bit_data*) #0 {
  call void @sdalo(%struct.i2c_algo_bit_data* %0)
  %2 = call i32 @sclhi(%struct.i2c_algo_bit_data* %0)
  %3 = getelementptr inbounds %struct.i2c_algo_bit_data, %struct.i2c_algo_bit_data* %0, i32 0, i32 1
  %4 = load void (i8*, i32)*, void (i8*, i32)** %3, align 8
  %5 = getelementptr inbounds %struct.i2c_algo_bit_data, %struct.i2c_algo_bit_data* %0, i32 0, i32 0
  %6 = load i8*, i8** %5, align 8
  call void %4(i8* %6, i32 1)
  %7 = getelementptr inbounds %struct.i2c_algo_bit_data, %struct.i2c_algo_bit_data* %0, i32 0, i32 7
  %8 = load i32, i32* %7, align 8
  %9 = sext i32 %8 to i64
  call void @__udelay(i64 %9)
  ret void
}

declare void @__udelay(i64) #1

; Function Attrs: noinline nounwind uwtable
define internal void @scllo(%struct.i2c_algo_bit_data*) #0 {
  %2 = getelementptr inbounds %struct.i2c_algo_bit_data, %struct.i2c_algo_bit_data* %0, i32 0, i32 2
  %3 = load void (i8*, i32)*, void (i8*, i32)** %2, align 8
  %4 = getelementptr inbounds %struct.i2c_algo_bit_data, %struct.i2c_algo_bit_data* %0, i32 0, i32 0
  %5 = load i8*, i8** %4, align 8
  call void %3(i8* %5, i32 0)
  %6 = getelementptr inbounds %struct.i2c_algo_bit_data, %struct.i2c_algo_bit_data* %0, i32 0, i32 7
  %7 = load i32, i32* %6, align 8
  %8 = sdiv i32 %7, 2
  %9 = sext i32 %8 to i64
  call void @__udelay(i64 %9)
  ret void
}

; Function Attrs: noinline nounwind uwtable
define internal void @sdahi(%struct.i2c_algo_bit_data*) #0 {
  %2 = getelementptr inbounds %struct.i2c_algo_bit_data, %struct.i2c_algo_bit_data* %0, i32 0, i32 1
  %3 = load void (i8*, i32)*, void (i8*, i32)** %2, align 8
  %4 = getelementptr inbounds %struct.i2c_algo_bit_data, %struct.i2c_algo_bit_data* %0, i32 0, i32 0
  %5 = load i8*, i8** %4, align 8
  call void %3(i8* %5, i32 1)
  %6 = getelementptr inbounds %struct.i2c_algo_bit_data, %struct.i2c_algo_bit_data* %0, i32 0, i32 7
  %7 = load i32, i32* %6, align 8
  %8 = add nsw i32 %7, 1
  %9 = sdiv i32 %8, 2
  %10 = sext i32 %9 to i64
  call void @__udelay(i64 %10)
  ret void
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @sclhi(%struct.i2c_algo_bit_data*) #0 {
  %2 = alloca i64, align 8
  %3 = alloca i64, align 8
  %4 = alloca i64, align 8
  %5 = alloca i64, align 8
  %6 = getelementptr inbounds %struct.i2c_algo_bit_data, %struct.i2c_algo_bit_data* %0, i32 0, i32 2
  %7 = load void (i8*, i32)*, void (i8*, i32)** %6, align 8
  %8 = getelementptr inbounds %struct.i2c_algo_bit_data, %struct.i2c_algo_bit_data* %0, i32 0, i32 0
  %9 = load i8*, i8** %8, align 8
  call void %7(i8* %9, i32 1)
  %10 = getelementptr inbounds %struct.i2c_algo_bit_data, %struct.i2c_algo_bit_data* %0, i32 0, i32 4
  %11 = load i32 (i8*)*, i32 (i8*)** %10, align 8
  %12 = icmp ne i32 (i8*)* %11, null
  br i1 %12, label %13, label %.loopexit

; <label>:13:                                     ; preds = %1
  %14 = load volatile i64, i64* @jiffies, align 64
  br label %15

; <label>:15:                                     ; preds = %44, %13
  %16 = getelementptr inbounds %struct.i2c_algo_bit_data, %struct.i2c_algo_bit_data* %0, i32 0, i32 4
  %17 = load i32 (i8*)*, i32 (i8*)** %16, align 8
  %18 = getelementptr inbounds %struct.i2c_algo_bit_data, %struct.i2c_algo_bit_data* %0, i32 0, i32 0
  %19 = load i8*, i8** %18, align 8
  %20 = call i32 %17(i8* %19)
  %21 = icmp ne i32 %20, 0
  %22 = xor i1 %21, true
  br i1 %22, label %23, label %.loopexit

; <label>:23:                                     ; preds = %15
  %24 = icmp eq i64* %2, %3
  %25 = zext i1 %24 to i32
  %26 = icmp ne i32 1, 0
  br i1 %26, label %27, label %44

; <label>:27:                                     ; preds = %23
  %28 = icmp eq i64* %4, %5
  %29 = zext i1 %28 to i32
  %30 = getelementptr inbounds %struct.i2c_algo_bit_data, %struct.i2c_algo_bit_data* %0, i32 0, i32 8
  %31 = load i32, i32* %30, align 4
  %32 = sext i32 %31 to i64
  %33 = add i64 %14, %32
  %34 = load volatile i64, i64* @jiffies, align 64
  %35 = sub i64 %33, %34
  %36 = icmp slt i64 %35, 0
  br i1 %36, label %37, label %44

; <label>:37:                                     ; preds = %27
  %38 = getelementptr inbounds %struct.i2c_algo_bit_data, %struct.i2c_algo_bit_data* %0, i32 0, i32 4
  %39 = load i32 (i8*)*, i32 (i8*)** %38, align 8
  %40 = getelementptr inbounds %struct.i2c_algo_bit_data, %struct.i2c_algo_bit_data* %0, i32 0, i32 0
  %41 = load i8*, i8** %40, align 8
  %42 = call i32 %39(i8* %41)
  %43 = icmp ne i32 %42, 0
  br i1 %43, label %.loopexit, label %48

; <label>:44:                                     ; preds = %27, %23
  call void asm sideeffect "rep; nop", "~{memory},~{dirflag},~{fpsr},~{flags}"() #2, !srcloc !1
  br label %15

.loopexit:                                        ; preds = %37, %15, %1
  %45 = getelementptr inbounds %struct.i2c_algo_bit_data, %struct.i2c_algo_bit_data* %0, i32 0, i32 7
  %46 = load i32, i32* %45, align 8
  %47 = sext i32 %46 to i64
  call void @__udelay(i64 %47)
  br label %48

; <label>:48:                                     ; preds = %37, %.loopexit
  %.0 = phi i32 [ 0, %.loopexit ], [ -110, %37 ]
  ret i32 %.0
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @try_address(%struct.i2c_adapter*, i8 zeroext, i32) #0 {
  %4 = getelementptr inbounds %struct.i2c_adapter, %struct.i2c_adapter* %0, i32 0, i32 3
  %5 = load i8*, i8** %4, align 8
  %6 = bitcast i8* %5 to %struct.i2c_algo_bit_data*
  br label %7

; <label>:7:                                      ; preds = %13, %3
  %.01 = phi i32 [ 0, %3 ], [ %17, %13 ]
  %.0 = phi i32 [ 0, %3 ], [ %10, %13 ]
  %8 = icmp sle i32 %.01, %2
  br i1 %8, label %9, label %.loopexit

; <label>:9:                                      ; preds = %7
  %10 = call i32 @i2c_outb(%struct.i2c_adapter* %0, i8 zeroext %1)
  %11 = icmp eq i32 %10, 1
  %12 = icmp eq i32 %.01, %2
  %or.cond = or i1 %11, %12
  br i1 %or.cond, label %.loopexit, label %13

; <label>:13:                                     ; preds = %9
  call void @i2c_stop(%struct.i2c_algo_bit_data* %6)
  %14 = getelementptr inbounds %struct.i2c_algo_bit_data, %struct.i2c_algo_bit_data* %6, i32 0, i32 7
  %15 = load i32, i32* %14, align 8
  %16 = sext i32 %15 to i64
  call void @__udelay(i64 %16)
  call void @yield()
  call void @i2c_start(%struct.i2c_algo_bit_data* %6)
  %17 = add nsw i32 %.01, 1
  br label %7

.loopexit:                                        ; preds = %7, %9
  %.1 = phi i32 [ %10, %9 ], [ %.0, %7 ]
  %18 = icmp ne i32 %.01, 0
  %19 = icmp ne i32 %.1, 0
  %or.cond2 = and i1 %18, %19
  ret i32 %.1
}

declare void @dev_err(%struct.device*, i8*, ...) #1

; Function Attrs: noinline nounwind uwtable
define internal i32 @i2c_outb(%struct.i2c_adapter*, i8 zeroext) #0 {
  %3 = getelementptr inbounds %struct.i2c_adapter, %struct.i2c_adapter* %0, i32 0, i32 3
  %4 = load i8*, i8** %3, align 8
  %5 = bitcast i8* %4 to %struct.i2c_algo_bit_data*
  br label %6

; <label>:6:                                      ; preds = %23, %2
  %.01 = phi i32 [ 7, %2 ], [ %24, %23 ]
  %7 = icmp sge i32 %.01, 0
  br i1 %7, label %8, label %25

; <label>:8:                                      ; preds = %6
  %9 = zext i8 %1 to i32
  %10 = ashr i32 %9, %.01
  %11 = and i32 %10, 1
  %12 = getelementptr inbounds %struct.i2c_algo_bit_data, %struct.i2c_algo_bit_data* %5, i32 0, i32 1
  %13 = load void (i8*, i32)*, void (i8*, i32)** %12, align 8
  %14 = getelementptr inbounds %struct.i2c_algo_bit_data, %struct.i2c_algo_bit_data* %5, i32 0, i32 0
  %15 = load i8*, i8** %14, align 8
  call void %13(i8* %15, i32 %11)
  %16 = getelementptr inbounds %struct.i2c_algo_bit_data, %struct.i2c_algo_bit_data* %5, i32 0, i32 7
  %17 = load i32, i32* %16, align 8
  %18 = add nsw i32 %17, 1
  %19 = sdiv i32 %18, 2
  %20 = sext i32 %19 to i64
  call void @__udelay(i64 %20)
  %21 = call i32 @sclhi(%struct.i2c_algo_bit_data* %5)
  %22 = icmp slt i32 %21, 0
  br i1 %22, label %37, label %23

; <label>:23:                                     ; preds = %8
  call void @scllo(%struct.i2c_algo_bit_data* %5)
  %24 = add nsw i32 %.01, -1
  br label %6

; <label>:25:                                     ; preds = %6
  call void @sdahi(%struct.i2c_algo_bit_data* %5)
  %26 = call i32 @sclhi(%struct.i2c_algo_bit_data* %5)
  %27 = icmp slt i32 %26, 0
  br i1 %27, label %37, label %28

; <label>:28:                                     ; preds = %25
  %29 = getelementptr inbounds %struct.i2c_algo_bit_data, %struct.i2c_algo_bit_data* %5, i32 0, i32 3
  %30 = load i32 (i8*)*, i32 (i8*)** %29, align 8
  %31 = getelementptr inbounds %struct.i2c_algo_bit_data, %struct.i2c_algo_bit_data* %5, i32 0, i32 0
  %32 = load i8*, i8** %31, align 8
  %33 = call i32 %30(i8* %32)
  %34 = icmp ne i32 %33, 0
  %35 = xor i1 %34, true
  %36 = zext i1 %35 to i32
  call void @scllo(%struct.i2c_algo_bit_data* %5)
  br label %37

; <label>:37:                                     ; preds = %25, %8, %28
  %.0 = phi i32 [ %36, %28 ], [ -110, %8 ], [ -110, %25 ]
  ret i32 %.0
}

declare void @yield() #1

; Function Attrs: noinline nounwind uwtable
define internal i32 @i2c_inb(%struct.i2c_adapter*) #0 {
  %2 = getelementptr inbounds %struct.i2c_adapter, %struct.i2c_adapter* %0, i32 0, i32 3
  %3 = load i8*, i8** %2, align 8
  %4 = bitcast i8* %3 to %struct.i2c_algo_bit_data*
  call void @sdahi(%struct.i2c_algo_bit_data* %4)
  br label %5

; <label>:5:                                      ; preds = %10, %1
  %.02 = phi i32 [ 0, %1 ], [ %33, %10 ]
  %.01 = phi i8 [ 0, %1 ], [ %.1, %10 ]
  %6 = icmp slt i32 %.02, 8
  br i1 %6, label %7, label %34

; <label>:7:                                      ; preds = %5
  %8 = call i32 @sclhi(%struct.i2c_algo_bit_data* %4)
  %9 = icmp slt i32 %8, 0
  br i1 %9, label %36, label %10

; <label>:10:                                     ; preds = %7
  %11 = zext i8 %.01 to i32
  %12 = mul nsw i32 %11, 2
  %13 = trunc i32 %12 to i8
  %14 = getelementptr inbounds %struct.i2c_algo_bit_data, %struct.i2c_algo_bit_data* %4, i32 0, i32 3
  %15 = load i32 (i8*)*, i32 (i8*)** %14, align 8
  %16 = getelementptr inbounds %struct.i2c_algo_bit_data, %struct.i2c_algo_bit_data* %4, i32 0, i32 0
  %17 = load i8*, i8** %16, align 8
  %18 = call i32 %15(i8* %17)
  %19 = icmp ne i32 %18, 0
  %20 = zext i8 %13 to i32
  %21 = or i32 %20, 1
  %22 = trunc i32 %21 to i8
  %.1 = select i1 %19, i8 %22, i8 %13
  %23 = getelementptr inbounds %struct.i2c_algo_bit_data, %struct.i2c_algo_bit_data* %4, i32 0, i32 2
  %24 = load void (i8*, i32)*, void (i8*, i32)** %23, align 8
  %25 = getelementptr inbounds %struct.i2c_algo_bit_data, %struct.i2c_algo_bit_data* %4, i32 0, i32 0
  %26 = load i8*, i8** %25, align 8
  call void %24(i8* %26, i32 0)
  %27 = icmp eq i32 %.02, 7
  %28 = getelementptr inbounds %struct.i2c_algo_bit_data, %struct.i2c_algo_bit_data* %4, i32 0, i32 7
  %29 = load i32, i32* %28, align 8
  %30 = sdiv i32 %29, 2
  %31 = select i1 %27, i32 %30, i32 %29
  %32 = sext i32 %31 to i64
  call void @__udelay(i64 %32)
  %33 = add nsw i32 %.02, 1
  br label %5

; <label>:34:                                     ; preds = %5
  %35 = zext i8 %.01 to i32
  br label %36

; <label>:36:                                     ; preds = %7, %34
  %.0 = phi i32 [ %35, %34 ], [ -110, %7 ]
  ret i32 %.0
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @acknak(%struct.i2c_adapter*, i32) #0 {
  %3 = getelementptr inbounds %struct.i2c_adapter, %struct.i2c_adapter* %0, i32 0, i32 3
  %4 = load i8*, i8** %3, align 8
  %5 = bitcast i8* %4 to %struct.i2c_algo_bit_data*
  %6 = icmp ne i32 %1, 0
  br i1 %6, label %7, label %12

; <label>:7:                                      ; preds = %2
  %8 = getelementptr inbounds %struct.i2c_algo_bit_data, %struct.i2c_algo_bit_data* %5, i32 0, i32 1
  %9 = load void (i8*, i32)*, void (i8*, i32)** %8, align 8
  %10 = getelementptr inbounds %struct.i2c_algo_bit_data, %struct.i2c_algo_bit_data* %5, i32 0, i32 0
  %11 = load i8*, i8** %10, align 8
  call void %9(i8* %11, i32 0)
  br label %12

; <label>:12:                                     ; preds = %7, %2
  %13 = getelementptr inbounds %struct.i2c_algo_bit_data, %struct.i2c_algo_bit_data* %5, i32 0, i32 7
  %14 = load i32, i32* %13, align 8
  %15 = add nsw i32 %14, 1
  %16 = sdiv i32 %15, 2
  %17 = sext i32 %16 to i64
  call void @__udelay(i64 %17)
  %18 = call i32 @sclhi(%struct.i2c_algo_bit_data* %5)
  %19 = icmp slt i32 %18, 0
  br i1 %19, label %20, label %22

; <label>:20:                                     ; preds = %12
  %21 = getelementptr inbounds %struct.i2c_adapter, %struct.i2c_adapter* %0, i32 0, i32 9
  call void (%struct.device*, i8*, ...) @dev_err(%struct.device* %21, i8* getelementptr inbounds ([28 x i8], [28 x i8]* @.str.4, i32 0, i32 0))
  br label %23

; <label>:22:                                     ; preds = %12
  call void @scllo(%struct.i2c_algo_bit_data* %5)
  br label %23

; <label>:23:                                     ; preds = %22, %20
  %.0 = phi i32 [ -110, %20 ], [ 0, %22 ]
  ret i32 %.0
}

; Function Attrs: noinline nounwind uwtable
define internal void @sdalo(%struct.i2c_algo_bit_data*) #0 {
  %2 = getelementptr inbounds %struct.i2c_algo_bit_data, %struct.i2c_algo_bit_data* %0, i32 0, i32 1
  %3 = load void (i8*, i32)*, void (i8*, i32)** %2, align 8
  %4 = getelementptr inbounds %struct.i2c_algo_bit_data, %struct.i2c_algo_bit_data* %0, i32 0, i32 0
  %5 = load i8*, i8** %4, align 8
  call void %3(i8* %5, i32 0)
  %6 = getelementptr inbounds %struct.i2c_algo_bit_data, %struct.i2c_algo_bit_data* %0, i32 0, i32 7
  %7 = load i32, i32* %6, align 8
  %8 = add nsw i32 %7, 1
  %9 = sdiv i32 %8, 2
  %10 = sext i32 %9 to i64
  call void @__udelay(i64 %10)
  ret void
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @test_bus(%struct.i2c_adapter*) #0 {
  %2 = getelementptr inbounds %struct.i2c_adapter, %struct.i2c_adapter* %0, i32 0, i32 3
  %3 = load i8*, i8** %2, align 8
  %4 = bitcast i8* %3 to %struct.i2c_algo_bit_data*
  %5 = getelementptr inbounds %struct.i2c_adapter, %struct.i2c_adapter* %0, i32 0, i32 11
  %6 = getelementptr inbounds [48 x i8], [48 x i8]* %5, i32 0, i32 0
  %7 = getelementptr inbounds %struct.i2c_algo_bit_data, %struct.i2c_algo_bit_data* %4, i32 0, i32 5
  %8 = load i32 (%struct.i2c_adapter*)*, i32 (%struct.i2c_adapter*)** %7, align 8
  %9 = icmp ne i32 (%struct.i2c_adapter*)* %8, null
  br i1 %9, label %10, label %15

; <label>:10:                                     ; preds = %1
  %11 = getelementptr inbounds %struct.i2c_algo_bit_data, %struct.i2c_algo_bit_data* %4, i32 0, i32 5
  %12 = load i32 (%struct.i2c_adapter*)*, i32 (%struct.i2c_adapter*)** %11, align 8
  %13 = call i32 %12(%struct.i2c_adapter* %0)
  %14 = icmp slt i32 %13, 0
  br i1 %14, label %156, label %15

; <label>:15:                                     ; preds = %10, %1
  %16 = getelementptr inbounds %struct.i2c_algo_bit_data, %struct.i2c_algo_bit_data* %4, i32 0, i32 4
  %17 = load i32 (i8*)*, i32 (i8*)** %16, align 8
  %18 = icmp eq i32 (i8*)* %17, null
  br i1 %18, label %19, label %21

; <label>:19:                                     ; preds = %15
  %20 = call i32 (i8*, ...) @printk(i8* getelementptr inbounds ([45 x i8], [45 x i8]* @.str.9, i32 0, i32 0), i8* %6)
  br label %21

; <label>:21:                                     ; preds = %19, %15
  %22 = getelementptr inbounds %struct.i2c_algo_bit_data, %struct.i2c_algo_bit_data* %4, i32 0, i32 3
  %23 = load i32 (i8*)*, i32 (i8*)** %22, align 8
  %24 = getelementptr inbounds %struct.i2c_algo_bit_data, %struct.i2c_algo_bit_data* %4, i32 0, i32 0
  %25 = load i8*, i8** %24, align 8
  %26 = call i32 %23(i8* %25)
  %27 = getelementptr inbounds %struct.i2c_algo_bit_data, %struct.i2c_algo_bit_data* %4, i32 0, i32 4
  %28 = load i32 (i8*)*, i32 (i8*)** %27, align 8
  %29 = icmp eq i32 (i8*)* %28, null
  br i1 %29, label %36, label %30

; <label>:30:                                     ; preds = %21
  %31 = getelementptr inbounds %struct.i2c_algo_bit_data, %struct.i2c_algo_bit_data* %4, i32 0, i32 4
  %32 = load i32 (i8*)*, i32 (i8*)** %31, align 8
  %33 = getelementptr inbounds %struct.i2c_algo_bit_data, %struct.i2c_algo_bit_data* %4, i32 0, i32 0
  %34 = load i8*, i8** %33, align 8
  %35 = call i32 %32(i8* %34)
  br label %36

; <label>:36:                                     ; preds = %21, %30
  %37 = phi i32 [ %35, %30 ], [ 1, %21 ]
  %38 = icmp ne i32 %37, 0
  %39 = icmp ne i32 %26, 0
  %or.cond = and i1 %38, %39
  br i1 %or.cond, label %42, label %40

; <label>:40:                                     ; preds = %36
  %41 = call i32 (i8*, ...) @printk(i8* getelementptr inbounds ([45 x i8], [45 x i8]* @.str.10, i32 0, i32 0), i8* %6, i32 %37, i32 %26)
  br label %148

; <label>:42:                                     ; preds = %36
  call void @sdalo(%struct.i2c_algo_bit_data* %4)
  %43 = getelementptr inbounds %struct.i2c_algo_bit_data, %struct.i2c_algo_bit_data* %4, i32 0, i32 3
  %44 = load i32 (i8*)*, i32 (i8*)** %43, align 8
  %45 = getelementptr inbounds %struct.i2c_algo_bit_data, %struct.i2c_algo_bit_data* %4, i32 0, i32 0
  %46 = load i8*, i8** %45, align 8
  %47 = call i32 %44(i8* %46)
  %48 = getelementptr inbounds %struct.i2c_algo_bit_data, %struct.i2c_algo_bit_data* %4, i32 0, i32 4
  %49 = load i32 (i8*)*, i32 (i8*)** %48, align 8
  %50 = icmp eq i32 (i8*)* %49, null
  br i1 %50, label %57, label %51

; <label>:51:                                     ; preds = %42
  %52 = getelementptr inbounds %struct.i2c_algo_bit_data, %struct.i2c_algo_bit_data* %4, i32 0, i32 4
  %53 = load i32 (i8*)*, i32 (i8*)** %52, align 8
  %54 = getelementptr inbounds %struct.i2c_algo_bit_data, %struct.i2c_algo_bit_data* %4, i32 0, i32 0
  %55 = load i8*, i8** %54, align 8
  %56 = call i32 %53(i8* %55)
  br label %57

; <label>:57:                                     ; preds = %42, %51
  %58 = phi i32 [ %56, %51 ], [ 1, %42 ]
  %59 = icmp ne i32 %47, 0
  br i1 %59, label %60, label %62

; <label>:60:                                     ; preds = %57
  %61 = call i32 (i8*, ...) @printk(i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.11, i32 0, i32 0), i8* %6)
  br label %148

; <label>:62:                                     ; preds = %57
  %63 = icmp ne i32 %58, 0
  br i1 %63, label %66, label %64

; <label>:64:                                     ; preds = %62
  %65 = call i32 (i8*, ...) @printk(i8* getelementptr inbounds ([49 x i8], [49 x i8]* @.str.12, i32 0, i32 0), i8* %6)
  br label %148

; <label>:66:                                     ; preds = %62
  call void @sdahi(%struct.i2c_algo_bit_data* %4)
  %67 = getelementptr inbounds %struct.i2c_algo_bit_data, %struct.i2c_algo_bit_data* %4, i32 0, i32 3
  %68 = load i32 (i8*)*, i32 (i8*)** %67, align 8
  %69 = getelementptr inbounds %struct.i2c_algo_bit_data, %struct.i2c_algo_bit_data* %4, i32 0, i32 0
  %70 = load i8*, i8** %69, align 8
  %71 = call i32 %68(i8* %70)
  %72 = getelementptr inbounds %struct.i2c_algo_bit_data, %struct.i2c_algo_bit_data* %4, i32 0, i32 4
  %73 = load i32 (i8*)*, i32 (i8*)** %72, align 8
  %74 = icmp eq i32 (i8*)* %73, null
  br i1 %74, label %81, label %75

; <label>:75:                                     ; preds = %66
  %76 = getelementptr inbounds %struct.i2c_algo_bit_data, %struct.i2c_algo_bit_data* %4, i32 0, i32 4
  %77 = load i32 (i8*)*, i32 (i8*)** %76, align 8
  %78 = getelementptr inbounds %struct.i2c_algo_bit_data, %struct.i2c_algo_bit_data* %4, i32 0, i32 0
  %79 = load i8*, i8** %78, align 8
  %80 = call i32 %77(i8* %79)
  br label %81

; <label>:81:                                     ; preds = %66, %75
  %82 = phi i32 [ %80, %75 ], [ 1, %66 ]
  %83 = icmp ne i32 %71, 0
  br i1 %83, label %86, label %84

; <label>:84:                                     ; preds = %81
  %85 = call i32 (i8*, ...) @printk(i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.13, i32 0, i32 0), i8* %6)
  br label %148

; <label>:86:                                     ; preds = %81
  %87 = icmp ne i32 %82, 0
  br i1 %87, label %90, label %88

; <label>:88:                                     ; preds = %86
  %89 = call i32 (i8*, ...) @printk(i8* getelementptr inbounds ([50 x i8], [50 x i8]* @.str.14, i32 0, i32 0), i8* %6)
  br label %148

; <label>:90:                                     ; preds = %86
  call void @scllo(%struct.i2c_algo_bit_data* %4)
  %91 = getelementptr inbounds %struct.i2c_algo_bit_data, %struct.i2c_algo_bit_data* %4, i32 0, i32 3
  %92 = load i32 (i8*)*, i32 (i8*)** %91, align 8
  %93 = getelementptr inbounds %struct.i2c_algo_bit_data, %struct.i2c_algo_bit_data* %4, i32 0, i32 0
  %94 = load i8*, i8** %93, align 8
  %95 = call i32 %92(i8* %94)
  %96 = getelementptr inbounds %struct.i2c_algo_bit_data, %struct.i2c_algo_bit_data* %4, i32 0, i32 4
  %97 = load i32 (i8*)*, i32 (i8*)** %96, align 8
  %98 = icmp eq i32 (i8*)* %97, null
  br i1 %98, label %105, label %99

; <label>:99:                                     ; preds = %90
  %100 = getelementptr inbounds %struct.i2c_algo_bit_data, %struct.i2c_algo_bit_data* %4, i32 0, i32 4
  %101 = load i32 (i8*)*, i32 (i8*)** %100, align 8
  %102 = getelementptr inbounds %struct.i2c_algo_bit_data, %struct.i2c_algo_bit_data* %4, i32 0, i32 0
  %103 = load i8*, i8** %102, align 8
  %104 = call i32 %101(i8* %103)
  br label %105

; <label>:105:                                    ; preds = %90, %99
  %106 = phi i32 [ %104, %99 ], [ 0, %90 ]
  %107 = icmp ne i32 %106, 0
  br i1 %107, label %108, label %110

; <label>:108:                                    ; preds = %105
  %109 = call i32 (i8*, ...) @printk(i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.15, i32 0, i32 0), i8* %6)
  br label %148

; <label>:110:                                    ; preds = %105
  %111 = icmp ne i32 %95, 0
  br i1 %111, label %114, label %112

; <label>:112:                                    ; preds = %110
  %113 = call i32 (i8*, ...) @printk(i8* getelementptr inbounds ([49 x i8], [49 x i8]* @.str.16, i32 0, i32 0), i8* %6)
  br label %148

; <label>:114:                                    ; preds = %110
  %115 = call i32 @sclhi(%struct.i2c_algo_bit_data* %4)
  %116 = getelementptr inbounds %struct.i2c_algo_bit_data, %struct.i2c_algo_bit_data* %4, i32 0, i32 3
  %117 = load i32 (i8*)*, i32 (i8*)** %116, align 8
  %118 = getelementptr inbounds %struct.i2c_algo_bit_data, %struct.i2c_algo_bit_data* %4, i32 0, i32 0
  %119 = load i8*, i8** %118, align 8
  %120 = call i32 %117(i8* %119)
  %121 = getelementptr inbounds %struct.i2c_algo_bit_data, %struct.i2c_algo_bit_data* %4, i32 0, i32 4
  %122 = load i32 (i8*)*, i32 (i8*)** %121, align 8
  %123 = icmp eq i32 (i8*)* %122, null
  br i1 %123, label %130, label %124

; <label>:124:                                    ; preds = %114
  %125 = getelementptr inbounds %struct.i2c_algo_bit_data, %struct.i2c_algo_bit_data* %4, i32 0, i32 4
  %126 = load i32 (i8*)*, i32 (i8*)** %125, align 8
  %127 = getelementptr inbounds %struct.i2c_algo_bit_data, %struct.i2c_algo_bit_data* %4, i32 0, i32 0
  %128 = load i8*, i8** %127, align 8
  %129 = call i32 %126(i8* %128)
  br label %130

; <label>:130:                                    ; preds = %114, %124
  %131 = phi i32 [ %129, %124 ], [ 1, %114 ]
  %132 = icmp ne i32 %131, 0
  br i1 %132, label %135, label %133

; <label>:133:                                    ; preds = %130
  %134 = call i32 (i8*, ...) @printk(i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.17, i32 0, i32 0), i8* %6)
  br label %148

; <label>:135:                                    ; preds = %130
  %136 = icmp ne i32 %120, 0
  br i1 %136, label %139, label %137

; <label>:137:                                    ; preds = %135
  %138 = call i32 (i8*, ...) @printk(i8* getelementptr inbounds ([50 x i8], [50 x i8]* @.str.18, i32 0, i32 0), i8* %6)
  br label %148

; <label>:139:                                    ; preds = %135
  %140 = getelementptr inbounds %struct.i2c_algo_bit_data, %struct.i2c_algo_bit_data* %4, i32 0, i32 6
  %141 = load void (%struct.i2c_adapter*)*, void (%struct.i2c_adapter*)** %140, align 8
  %142 = icmp ne void (%struct.i2c_adapter*)* %141, null
  br i1 %142, label %143, label %146

; <label>:143:                                    ; preds = %139
  %144 = getelementptr inbounds %struct.i2c_algo_bit_data, %struct.i2c_algo_bit_data* %4, i32 0, i32 6
  %145 = load void (%struct.i2c_adapter*)*, void (%struct.i2c_adapter*)** %144, align 8
  call void %145(%struct.i2c_adapter* %0)
  br label %146

; <label>:146:                                    ; preds = %143, %139
  %147 = call i32 (i8*, ...) @printk(i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.19, i32 0, i32 0), i8* %6)
  br label %156

; <label>:148:                                    ; preds = %137, %133, %112, %108, %88, %84, %64, %60, %40
  call void @sdahi(%struct.i2c_algo_bit_data* %4)
  %149 = call i32 @sclhi(%struct.i2c_algo_bit_data* %4)
  %150 = getelementptr inbounds %struct.i2c_algo_bit_data, %struct.i2c_algo_bit_data* %4, i32 0, i32 6
  %151 = load void (%struct.i2c_adapter*)*, void (%struct.i2c_adapter*)** %150, align 8
  %152 = icmp ne void (%struct.i2c_adapter*)* %151, null
  br i1 %152, label %153, label %156

; <label>:153:                                    ; preds = %148
  %154 = getelementptr inbounds %struct.i2c_algo_bit_data, %struct.i2c_algo_bit_data* %4, i32 0, i32 6
  %155 = load void (%struct.i2c_adapter*)*, void (%struct.i2c_adapter*)** %154, align 8
  call void %155(%struct.i2c_adapter* %0)
  br label %156

; <label>:156:                                    ; preds = %148, %153, %10, %146
  %.0 = phi i32 [ 0, %146 ], [ -19, %10 ], [ -19, %153 ], [ -19, %148 ]
  ret i32 %.0
}

declare void @dev_warn(%struct.device*, i8*, ...) #1

declare i32 @printk(i8*, ...) #1

attributes #0 = { noinline nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { nounwind }

!llvm.ident = !{!0}

!0 = !{!"clang version 4.0.1 (tags/RELEASE_401/final)"}
!1 = !{i32 601402}
