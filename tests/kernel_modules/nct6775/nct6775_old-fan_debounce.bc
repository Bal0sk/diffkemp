; ModuleID = 'drivers/hwmon/nct6775.bc'
source_filename = "drivers/hwmon/nct6775.c"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%struct.kernel_param_ops = type { i32 (i8*, %struct.kernel_param*)*, i32 (i8*, %struct.kernel_param*)*, void (i8*)* }
%struct.kernel_param = type { i8*, %struct.kernel_param_ops*, i16, i16, %union.anon.42 }
%union.anon.42 = type { i8* }
%struct.platform_device = type { i8*, i32, i8, %struct.device, i32, %struct.resource*, %struct.platform_device_id*, %struct.mfd_cell*, %struct.pdev_archdata }
%struct.device = type { %struct.device*, %struct.device_private*, %struct.kobject, i8*, %struct.device_type*, %struct.mutex, %struct.bus_type*, %struct.device_driver*, i8*, %struct.dev_pm_info, %struct.dev_pm_domain*, i32, i64*, i64, %struct.device_dma_parameters*, %struct.list_head, %struct.dma_coherent_mem*, %struct.dev_archdata, %struct.device_node*, %struct.acpi_dev_node, i32, i32, %struct.spinlock, %struct.list_head, %struct.klist_node, %struct.class*, %struct.attribute_group**, void (%struct.device*)*, %struct.iommu_group* }
%struct.device_private = type opaque
%struct.kobject = type { i8*, %struct.list_head, %struct.kobject*, %struct.kset*, %struct.kobj_type*, %struct.sysfs_dirent*, %struct.kref, i8 }
%struct.kset = type { %struct.list_head, %struct.spinlock, %struct.kobject, %struct.kset_uevent_ops* }
%struct.kset_uevent_ops = type { i32 (%struct.kset*, %struct.kobject*)*, i8* (%struct.kset*, %struct.kobject*)*, i32 (%struct.kset*, %struct.kobject*, %struct.kobj_uevent_env*)* }
%struct.kobj_uevent_env = type { [32 x i8*], i32, [2048 x i8], i32 }
%struct.kobj_type = type { void (%struct.kobject*)*, %struct.sysfs_ops*, %struct.attribute**, %struct.kobj_ns_type_operations* (%struct.kobject*)*, i8* (%struct.kobject*)* }
%struct.sysfs_ops = type { i64 (%struct.kobject*, %struct.attribute*, i8*)*, i64 (%struct.kobject*, %struct.attribute*, i8*, i64)*, i8* (%struct.kobject*, %struct.attribute*)* }
%struct.attribute = type { i8*, i16 }
%struct.kobj_ns_type_operations = type { i32, i8* ()*, i8* (%struct.sock*)*, i8* ()*, void (i8*)* }
%struct.sock = type opaque
%struct.sysfs_dirent = type opaque
%struct.kref = type { %struct.atomic_t }
%struct.atomic_t = type { i32 }
%struct.device_type = type { i8*, %struct.attribute_group**, i32 (%struct.device*, %struct.kobj_uevent_env*)*, i8* (%struct.device*, i16*, i32*, i32*)*, void (%struct.device*)*, %struct.dev_pm_ops* }
%struct.dev_pm_ops = type { i32 (%struct.device*)*, void (%struct.device*)*, i32 (%struct.device*)*, i32 (%struct.device*)*, i32 (%struct.device*)*, i32 (%struct.device*)*, i32 (%struct.device*)*, i32 (%struct.device*)*, i32 (%struct.device*)*, i32 (%struct.device*)*, i32 (%struct.device*)*, i32 (%struct.device*)*, i32 (%struct.device*)*, i32 (%struct.device*)*, i32 (%struct.device*)*, i32 (%struct.device*)*, i32 (%struct.device*)*, i32 (%struct.device*)*, i32 (%struct.device*)*, i32 (%struct.device*)*, i32 (%struct.device*)*, i32 (%struct.device*)*, i32 (%struct.device*)* }
%struct.mutex = type { %struct.atomic_t, %struct.spinlock, %struct.list_head, %struct.task_struct*, i8* }
%struct.task_struct = type { i64, i8*, %struct.atomic_t, i32, i32, %struct.llist_node, i32, i32, i32, i32, i32, i32, %struct.sched_class*, %struct.sched_entity, %struct.sched_rt_entity, %struct.task_group*, i8, i32, i32, i32, %struct.cpumask, %struct.sched_info, %struct.list_head, %struct.plist_node, %struct.mm_struct*, %struct.mm_struct*, %struct.task_rss_stat, i32, i32, i32, i32, i32, i32, i8, i32, i32, %struct.task_struct*, %struct.task_struct*, %struct.list_head, %struct.list_head, %struct.task_struct*, %struct.list_head, %struct.list_head, [3 x %struct.pid_link], %struct.list_head, %struct.completion*, i32*, i32*, i64, i64, i64, i64, i64, %struct.cputime, i64, i64, %struct.timespec, %struct.timespec, i64, i64, %struct.task_cputime, [3 x %struct.list_head], %struct.cred*, %struct.cred*, [16 x i8], i32, i32, %struct.sysv_sem, %struct.thread_struct, %struct.fs_struct*, %struct.files_struct*, %struct.nsproxy*, %struct.signal_struct*, %struct.sighand_struct*, %struct.sigset_t, %struct.sigset_t, %struct.sigset_t, %struct.sigpending, i64, i64, i32 (i8*)*, i8*, %struct.sigset_t*, %struct.callback_head*, %struct.audit_context*, i32, i32, %struct.seccomp, i32, i32, %struct.spinlock, %struct.raw_spinlock, %struct.plist_head, %struct.rt_mutex_waiter*, i8*, %struct.bio_list*, %struct.blk_plug*, %struct.reclaim_state*, %struct.backing_dev_info*, %struct.io_context*, i64, %struct.siginfo*, %struct.task_io_accounting, i64, i64, i64, %struct.nodemask_t, %struct.seqcount, i32, i32, %struct.css_set*, %struct.list_head, %struct.robust_list_head*, %struct.compat_robust_list_head*, %struct.list_head, %struct.futex_pi_state*, [2 x %struct.perf_event_context*], %struct.mutex, %struct.list_head, %struct.mempolicy*, i16, i16, %struct.callback_head, %struct.pipe_inode_info*, %struct.page_frag, %struct.task_delay_info*, i32, i32, i64, i64, i64, i64, i64, %struct.atomic_t }
%struct.llist_node = type { %struct.llist_node* }
%struct.sched_class = type opaque
%struct.sched_entity = type { %struct.load_weight, %struct.rb_node, %struct.list_head, i32, i64, i64, i64, i64, i64, %struct.sched_statistics, %struct.sched_entity*, %struct.cfs_rq*, %struct.cfs_rq*, %struct.sched_avg }
%struct.load_weight = type { i64, i64 }
%struct.rb_node = type { i64, %struct.rb_node*, %struct.rb_node* }
%struct.sched_statistics = type { i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64 }
%struct.cfs_rq = type opaque
%struct.sched_avg = type { i32, i32, i64, i64, i64 }
%struct.sched_rt_entity = type { %struct.list_head, i64, i64, i32, %struct.sched_rt_entity* }
%struct.task_group = type opaque
%struct.cpumask = type { [1 x i64] }
%struct.sched_info = type { i64, i64, i64, i64 }
%struct.plist_node = type { i32, %struct.list_head, %struct.list_head }
%struct.mm_struct = type { %struct.vm_area_struct*, %struct.rb_root, %struct.vm_area_struct*, i64 (%struct.file*, i64, i64, i64, i64)*, void (%struct.mm_struct*, i64)*, i64, i64, i64, i64, i64, %struct.pgd_t*, %struct.atomic_t, %struct.atomic_t, i32, %struct.spinlock, %struct.rw_semaphore, %struct.list_head, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, [44 x i64], %struct.mm_rss_stat, %struct.linux_binfmt*, [1 x %struct.cpumask], %struct.mm_context_t, i64, %struct.core_state*, %struct.spinlock, %struct.hlist_head, %struct.file*, %struct.uprobes_state }
%struct.rb_root = type { %struct.rb_node* }
%struct.vm_area_struct = type { i64, i64, %struct.vm_area_struct*, %struct.vm_area_struct*, %struct.rb_node, i64, %struct.mm_struct*, %struct.pgprot, i64, %union.anon, %struct.list_head, %struct.anon_vma*, %struct.vm_operations_struct*, i64, %struct.file*, i8*, %struct.mempolicy* }
%struct.pgprot = type { i64 }
%union.anon = type { %struct.anon }
%struct.anon = type { %struct.rb_node, i64 }
%struct.anon_vma = type opaque
%struct.vm_operations_struct = type opaque
%struct.pgd_t = type { i64 }
%struct.rw_semaphore = type { i64, %struct.raw_spinlock, %struct.list_head }
%struct.mm_rss_stat = type { [3 x %struct.atomic64_t] }
%struct.atomic64_t = type { i64 }
%struct.linux_binfmt = type opaque
%struct.mm_context_t = type { i8*, i32, i16, %struct.mutex, i8* }
%struct.core_state = type { %struct.atomic_t, %struct.core_thread, %struct.completion }
%struct.core_thread = type { %struct.task_struct*, %struct.core_thread* }
%struct.completion = type { i32, %struct.__wait_queue_head }
%struct.__wait_queue_head = type { %struct.spinlock, %struct.list_head }
%struct.hlist_head = type { %struct.hlist_node* }
%struct.hlist_node = type { %struct.hlist_node*, %struct.hlist_node** }
%struct.file = type { %union.anon.36, %struct.path, %struct.inode*, %struct.file_operations*, %struct.spinlock, i32, %struct.atomic64_t, i32, i32, i64, %struct.fown_struct, %struct.cred*, %struct.file_ra_state, i64, i8*, i8*, %struct.list_head, %struct.list_head, %struct.address_space* }
%union.anon.36 = type { %struct.list_head }
%struct.path = type { %struct.vfsmount*, %struct.dentry* }
%struct.vfsmount = type opaque
%struct.dentry = type { i32, %struct.seqcount, %struct.hlist_bl_node, %struct.dentry*, %struct.qstr, %struct.inode*, [32 x i8], i32, %struct.spinlock, %struct.dentry_operations*, %struct.super_block*, i64, i8*, %struct.list_head, %union.anon.39, %struct.list_head, %struct.hlist_node }
%struct.hlist_bl_node = type { %struct.hlist_bl_node*, %struct.hlist_bl_node** }
%struct.qstr = type { %union.anon.37, i8* }
%union.anon.37 = type { i64 }
%struct.dentry_operations = type { i32 (%struct.dentry*, i32)*, i32 (%struct.dentry*, i32)*, i32 (%struct.dentry*, %struct.inode*, %struct.qstr*)*, i32 (%struct.dentry*, %struct.inode*, %struct.dentry*, %struct.inode*, i32, i8*, %struct.qstr*)*, i32 (%struct.dentry*)*, void (%struct.dentry*)*, void (%struct.dentry*)*, void (%struct.dentry*, %struct.inode*)*, i8* (%struct.dentry*, i8*, i32)*, %struct.vfsmount* (%struct.path*)*, i32 (%struct.dentry*, i1)*, [40 x i8] }
%struct.super_block = type { %struct.list_head, i32, i8, i64, i64, %struct.file_system_type*, %struct.super_operations*, %struct.dquot_operations*, %struct.quotactl_ops*, %struct.export_operations*, i64, i64, %struct.dentry*, %struct.rw_semaphore, i32, %struct.atomic_t, i8*, %struct.xattr_handler**, %struct.list_head, %struct.hlist_bl_head, %struct.list_head*, %struct.list_head, %struct.list_head, i32, [28 x i8], %struct.spinlock, %struct.list_head, i32, %struct.block_device*, %struct.backing_dev_info*, %struct.mtd_info*, %struct.hlist_node, %struct.quota_info, %struct.sb_writers, [32 x i8], [16 x i8], i8*, i32, i32, i32, %struct.mutex, i8*, i8*, %struct.dentry_operations*, i32, %struct.shrinker, %struct.atomic64_t, i32, [20 x i8] }
%struct.file_system_type = type { i8*, i32, %struct.dentry* (%struct.file_system_type*, i32, i8*, i8*)*, void (%struct.super_block*)*, %struct.module*, %struct.file_system_type*, %struct.hlist_head, %struct.lock_class_key, %struct.lock_class_key, %struct.lock_class_key, [3 x %struct.lock_class_key], %struct.lock_class_key, %struct.lock_class_key, %struct.lock_class_key }
%struct.module = type { i32, %struct.list_head, [56 x i8], %struct.module_kobject, %struct.module_attribute*, i8*, i8*, %struct.kobject*, %struct.kernel_symbol*, i64*, i32, %struct.kernel_param*, i32, i32, %struct.kernel_symbol*, i64*, %struct.kernel_symbol*, i64*, i32, i32, %struct.exception_table_entry*, i32 ()*, i8*, i8*, i32, i32, i32, i32, i32, i32, %struct.mod_arch_specific, i32, i32, %struct.list_head, %struct.bug_entry*, %struct.elf64_sym*, %struct.elf64_sym*, i32, i32, i8*, i8*, %struct.module_sect_attrs*, %struct.module_notes_attrs*, i8*, i8*, i32, i32, %struct.tracepoint**, i32, i8**, %struct.ftrace_event_call**, i32, %struct.list_head, %struct.list_head, %struct.task_struct*, void ()*, %struct.module_ref* }
%struct.module_kobject = type { %struct.kobject, %struct.module*, %struct.kobject*, %struct.module_param_attrs* }
%struct.module_param_attrs = type opaque
%struct.module_attribute = type { %struct.attribute, i64 (%struct.module_attribute*, %struct.module_kobject*, i8*)*, i64 (%struct.module_attribute*, %struct.module_kobject*, i8*, i64)*, void (%struct.module*, i8*)*, i32 (%struct.module*)*, void (%struct.module*)* }
%struct.kernel_symbol = type { i64, i8* }
%struct.exception_table_entry = type opaque
%struct.mod_arch_specific = type {}
%struct.bug_entry = type { i32, i32, i16, i16 }
%struct.elf64_sym = type { i32, i8, i8, i16, i64, i64 }
%struct.module_sect_attrs = type opaque
%struct.module_notes_attrs = type opaque
%struct.tracepoint = type { i8*, %struct.static_key, void ()*, void ()*, %struct.tracepoint_func* }
%struct.static_key = type { %struct.atomic_t }
%struct.tracepoint_func = type { i8*, i8* }
%struct.ftrace_event_call = type opaque
%struct.module_ref = type { i64, i64 }
%struct.lock_class_key = type {}
%struct.super_operations = type { %struct.inode* (%struct.super_block*)*, void (%struct.inode*)*, void (%struct.inode*, i32)*, i32 (%struct.inode*, %struct.writeback_control*)*, i32 (%struct.inode*)*, void (%struct.inode*)*, void (%struct.super_block*)*, i32 (%struct.super_block*, i32)*, i32 (%struct.super_block*)*, i32 (%struct.super_block*)*, i32 (%struct.dentry*, %struct.kstatfs*)*, i32 (%struct.super_block*, i32*, i8*)*, void (%struct.super_block*)*, i32 (%struct.seq_file*, %struct.dentry*)*, i32 (%struct.seq_file*, %struct.dentry*)*, i32 (%struct.seq_file*, %struct.dentry*)*, i32 (%struct.seq_file*, %struct.dentry*)*, i64 (%struct.super_block*, i32, i8*, i64, i64)*, i64 (%struct.super_block*, i32, i8*, i64, i64)*, i32 (%struct.super_block*, %struct.page*, i32)*, i32 (%struct.super_block*)*, void (%struct.super_block*, i32)* }
%struct.writeback_control = type opaque
%struct.kstatfs = type opaque
%struct.seq_file = type opaque
%struct.page = type { i64, %struct.address_space*, %struct.anon.22, %union.anon.28, %union.anon.30, [8 x i8] }
%struct.anon.22 = type { %union.anon.23, %union.anon.24 }
%union.anon.23 = type { i64 }
%union.anon.24 = type { i64 }
%union.anon.28 = type { %struct.list_head }
%union.anon.30 = type { i64 }
%struct.dquot_operations = type { i32 (%struct.dquot*)*, %struct.dquot* (%struct.super_block*, i32)*, void (%struct.dquot*)*, i32 (%struct.dquot*)*, i32 (%struct.dquot*)*, i32 (%struct.dquot*)*, i32 (%struct.super_block*, i32)*, i64* (%struct.inode*)* }
%struct.dquot = type { %struct.hlist_node, %struct.list_head, %struct.list_head, %struct.list_head, %struct.mutex, %struct.atomic_t, %struct.__wait_queue_head, %struct.super_block*, %struct.kqid, i64, i64, %struct.mem_dqblk }
%struct.kqid = type { %union.anon.34, i32 }
%union.anon.34 = type { i32 }
%struct.mem_dqblk = type { i64, i64, i64, i64, i64, i64, i64, i64, i64 }
%struct.quotactl_ops = type { i32 (%struct.super_block*, i32, i32, %struct.path*)*, i32 (%struct.super_block*, i32, i32)*, i32 (%struct.super_block*, i32)*, i32 (%struct.super_block*, i32)*, i32 (%struct.super_block*, i32, %struct.if_dqinfo*)*, i32 (%struct.super_block*, i32, %struct.if_dqinfo*)*, i32 (%struct.super_block*, i64, %struct.fs_disk_quota*)*, i32 (%struct.super_block*, i64, %struct.fs_disk_quota*)*, i32 (%struct.super_block*, %struct.fs_quota_stat*)*, i32 (%struct.super_block*, i32, i32)* }
%struct.if_dqinfo = type { i64, i64, i32, i32 }
%struct.fs_disk_quota = type { i8, i8, i16, i32, i64, i64, i64, i64, i64, i64, i32, i32, i16, i16, i32, i64, i64, i64, i32, i16, i16, [8 x i8] }
%struct.fs_quota_stat = type { i8, i16, i8, %struct.fs_qfilestat, %struct.fs_qfilestat, i32, i32, i32, i32, i16, i16 }
%struct.fs_qfilestat = type { i64, i64, i32 }
%struct.export_operations = type opaque
%struct.xattr_handler = type opaque
%struct.hlist_bl_head = type { %struct.hlist_bl_node* }
%struct.block_device = type { i32, i32, %struct.inode*, %struct.super_block*, %struct.mutex, %struct.list_head, i8*, i8*, i32, i8, %struct.list_head, %struct.block_device*, i32, %struct.hd_struct*, i32, i32, %struct.gendisk*, %struct.request_queue*, %struct.list_head, i64, i32, %struct.mutex }
%struct.hd_struct = type opaque
%struct.gendisk = type opaque
%struct.request_queue = type opaque
%struct.mtd_info = type opaque
%struct.quota_info = type { i32, %struct.mutex, %struct.mutex, %struct.rw_semaphore, [2 x %struct.inode*], [2 x %struct.mem_dqinfo], [2 x %struct.quota_format_ops*] }
%struct.mem_dqinfo = type { %struct.quota_format_type*, i32, %struct.list_head, i64, i32, i32, i64, i64, i8* }
%struct.quota_format_type = type { i32, %struct.quota_format_ops*, %struct.module*, %struct.quota_format_type* }
%struct.quota_format_ops = type { i32 (%struct.super_block*, i32)*, i32 (%struct.super_block*, i32)*, i32 (%struct.super_block*, i32)*, i32 (%struct.super_block*, i32)*, i32 (%struct.dquot*)*, i32 (%struct.dquot*)*, i32 (%struct.dquot*)* }
%struct.sb_writers = type { [3 x %struct.percpu_counter], %struct.__wait_queue_head, i32, %struct.__wait_queue_head }
%struct.percpu_counter = type { %struct.raw_spinlock, i64, %struct.list_head, i32* }
%struct.shrinker = type { i32 (%struct.shrinker*, %struct.shrink_control*)*, i32, i64, %struct.list_head, %struct.atomic64_t }
%struct.shrink_control = type { i32, i64 }
%union.anon.39 = type { %struct.list_head }
%struct.inode = type { i16, i16, i32, i32, i32, %struct.posix_acl*, %struct.posix_acl*, %struct.inode_operations*, %struct.super_block*, %struct.address_space*, i8*, i64, %union.anon.32, i32, i64, %struct.timespec, %struct.timespec, %struct.timespec, %struct.spinlock, i16, i32, i64, i64, %struct.mutex, i64, %struct.hlist_node, %struct.list_head, %struct.list_head, %struct.list_head, %union.anon.33, i64, %struct.atomic_t, %struct.atomic_t, %struct.atomic_t, %struct.file_operations*, %struct.file_lock*, %struct.address_space, [2 x %struct.dquot*], %struct.list_head, %union.anon.35, i32, i32, %struct.hlist_head, i8* }
%struct.posix_acl = type opaque
%struct.inode_operations = type { %struct.dentry* (%struct.inode*, %struct.dentry*, i32)*, i8* (%struct.dentry*, %struct.nameidata*)*, i32 (%struct.inode*, i32)*, %struct.posix_acl* (%struct.inode*, i32)*, i32 (%struct.dentry*, i8*, i32)*, void (%struct.dentry*, %struct.nameidata*, i8*)*, i32 (%struct.inode*, %struct.dentry*, i16, i1)*, i32 (%struct.dentry*, %struct.inode*, %struct.dentry*)*, i32 (%struct.inode*, %struct.dentry*)*, i32 (%struct.inode*, %struct.dentry*, i8*)*, i32 (%struct.inode*, %struct.dentry*, i16)*, i32 (%struct.inode*, %struct.dentry*)*, i32 (%struct.inode*, %struct.dentry*, i16, i32)*, i32 (%struct.inode*, %struct.dentry*, %struct.inode*, %struct.dentry*)*, i32 (%struct.dentry*, %struct.iattr*)*, i32 (%struct.vfsmount*, %struct.dentry*, %struct.kstat*)*, i32 (%struct.dentry*, i8*, i8*, i64, i32)*, i64 (%struct.dentry*, i8*, i8*, i64)*, i64 (%struct.dentry*, i8*, i64)*, i32 (%struct.dentry*, i8*)*, i32 (%struct.inode*, %struct.fiemap_extent_info*, i64, i64)*, i32 (%struct.inode*, %struct.timespec*, i32)*, i32 (%struct.inode*, %struct.dentry*, %struct.file*, i32, i16, i32*)*, [8 x i8] }
%struct.nameidata = type opaque
%struct.iattr = type { i32, i16, i32, i32, i64, %struct.timespec, %struct.timespec, %struct.timespec, %struct.file* }
%struct.kstat = type { i64, i32, i16, i32, i32, i32, i32, i64, %struct.timespec, %struct.timespec, %struct.timespec, i64, i64 }
%struct.fiemap_extent_info = type { i32, i32, i32, %struct.fiemap_extent* }
%struct.fiemap_extent = type { i64, i64, i64, [2 x i64], i32, [3 x i32] }
%union.anon.32 = type { i32 }
%union.anon.33 = type { %struct.callback_head }
%struct.file_lock = type { %struct.file_lock*, %struct.list_head, %struct.list_head, %struct.files_struct*, i32, i8, i32, %struct.pid*, %struct.__wait_queue_head, %struct.file*, i64, i64, %struct.fasync_struct*, i64, i64, %struct.file_lock_operations*, %struct.lock_manager_operations*, %union.anon.40 }
%struct.pid = type { %struct.atomic_t, i32, [3 x %struct.hlist_head], %struct.callback_head, [1 x %struct.upid] }
%struct.upid = type { i32, %struct.pid_namespace*, %struct.hlist_node }
%struct.pid_namespace = type opaque
%struct.fasync_struct = type { %struct.spinlock, i32, i32, %struct.fasync_struct*, %struct.file*, %struct.callback_head }
%struct.file_lock_operations = type { void (%struct.file_lock*, %struct.file_lock*)*, void (%struct.file_lock*)* }
%struct.lock_manager_operations = type { i32 (%struct.file_lock*, %struct.file_lock*)*, void (%struct.file_lock*)*, i32 (%struct.file_lock*, %struct.file_lock*, i32)*, void (%struct.file_lock*)*, i32 (%struct.file_lock**, i32)* }
%union.anon.40 = type { %struct.nfs_lock_info }
%struct.nfs_lock_info = type { i32, %struct.nlm_lockowner*, %struct.list_head }
%struct.nlm_lockowner = type opaque
%struct.address_space = type { %struct.inode*, %struct.radix_tree_root, %struct.spinlock, i32, %struct.rb_root, %struct.list_head, %struct.mutex, i64, i64, %struct.address_space_operations*, i64, %struct.backing_dev_info*, %struct.spinlock, %struct.list_head, i8* }
%struct.radix_tree_root = type { i32, i32, %struct.radix_tree_node* }
%struct.radix_tree_node = type opaque
%struct.address_space_operations = type { i32 (%struct.page*, %struct.writeback_control*)*, i32 (%struct.file*, %struct.page*)*, i32 (%struct.address_space*, %struct.writeback_control*)*, i32 (%struct.page*)*, i32 (%struct.file*, %struct.address_space*, %struct.list_head*, i32)*, i32 (%struct.file*, %struct.address_space*, i64, i32, i32, %struct.page**, i8**)*, i32 (%struct.file*, %struct.address_space*, i64, i32, i32, %struct.page*, i8*)*, i64 (%struct.address_space*, i64)*, void (%struct.page*, i64)*, i32 (%struct.page*, i32)*, void (%struct.page*)*, i64 (i32, %struct.kiocb*, %struct.iovec*, i64, i64)*, i32 (%struct.address_space*, i64, i32, i8**, i64*)*, i32 (%struct.address_space*, %struct.page*, %struct.page*, i32)*, i32 (%struct.page*)*, i32 (%struct.page*, %struct.read_descriptor_t*, i64)*, i32 (%struct.address_space*, %struct.page*)*, i32 (%struct.swap_info_struct*, %struct.file*, i64*)*, void (%struct.file*)* }
%struct.kiocb = type opaque
%struct.iovec = type opaque
%struct.read_descriptor_t = type { i64, i64, %union.anon.31, i32 }
%union.anon.31 = type { i8* }
%struct.swap_info_struct = type opaque
%union.anon.35 = type { %struct.pipe_inode_info* }
%struct.file_operations = type { %struct.module*, i64 (%struct.file*, i64, i32)*, i64 (%struct.file*, i8*, i64, i64*)*, i64 (%struct.file*, i8*, i64, i64*)*, i64 (%struct.kiocb*, %struct.iovec*, i64, i64)*, i64 (%struct.kiocb*, %struct.iovec*, i64, i64)*, i32 (%struct.file*, i8*, i32 (i8*, i8*, i32, i64, i64, i32)*)*, i32 (%struct.file*, %struct.poll_table_struct*)*, i64 (%struct.file*, i32, i64)*, i64 (%struct.file*, i32, i64)*, i32 (%struct.file*, %struct.vm_area_struct*)*, i32 (%struct.inode*, %struct.file*)*, i32 (%struct.file*, %struct.files_struct*)*, i32 (%struct.inode*, %struct.file*)*, i32 (%struct.file*, i64, i64, i32)*, i32 (%struct.kiocb*, i32)*, i32 (i32, %struct.file*, i32)*, i32 (%struct.file*, i32, %struct.file_lock*)*, i64 (%struct.file*, %struct.page*, i32, i64, i64*, i32)*, i64 (%struct.file*, i64, i64, i64, i64)*, i32 (i32)*, i32 (%struct.file*, i32, %struct.file_lock*)*, i64 (%struct.pipe_inode_info*, %struct.file*, i64*, i64, i32)*, i64 (%struct.file*, i64*, %struct.pipe_inode_info*, i64, i32)*, i32 (%struct.file*, i64, %struct.file_lock**)*, i64 (%struct.file*, i32, i64, i64)*, i32 (%struct.seq_file*, %struct.file*)* }
%struct.poll_table_struct = type opaque
%struct.fown_struct = type { %struct.rwlock_t, %struct.pid*, i32, i32, i32, i32 }
%struct.rwlock_t = type { %union.arch_rwlock_t }
%union.arch_rwlock_t = type { i32 }
%struct.file_ra_state = type { i64, i32, i32, i32, i32, i64 }
%struct.uprobes_state = type {}
%struct.task_rss_stat = type { i32, [3 x i32] }
%struct.pid_link = type { %struct.hlist_node, %struct.pid* }
%struct.cputime = type { i64, i64 }
%struct.timespec = type { i64, i64 }
%struct.task_cputime = type { i64, i64, i64 }
%struct.cred = type { %struct.atomic_t, i32, i32, i32, i32, i32, i32, i32, i32, i32, %struct.kernel_cap_struct, %struct.kernel_cap_struct, %struct.kernel_cap_struct, %struct.kernel_cap_struct, i8, %struct.key*, %struct.key*, %struct.key*, %struct.key*, i8*, %struct.user_struct*, %struct.user_namespace*, %struct.group_info*, %struct.callback_head }
%struct.kernel_cap_struct = type { [2 x i32] }
%struct.key = type { %struct.atomic_t, i32, %union.anon.2, %struct.key_type*, %struct.rw_semaphore, %struct.key_user*, i8*, %union.anon.3, i64, i32, i32, i32, i16, i16, i64, i8*, %union.anon.4, %union.anon.5 }
%union.anon.2 = type { %struct.rb_node }
%struct.key_type = type opaque
%struct.key_user = type opaque
%union.anon.3 = type { i64 }
%union.anon.4 = type { %struct.list_head }
%union.anon.5 = type { i64 }
%struct.user_struct = type { %struct.atomic_t, %struct.atomic_t, %struct.atomic_t, %struct.atomic_t, %struct.atomic_t, %struct.atomic_t, %struct.atomic64_t, i64, i64, %struct.key*, %struct.key*, %struct.hlist_node, i32, %struct.atomic64_t }
%struct.user_namespace = type opaque
%struct.group_info = type { %struct.atomic_t, i32, i32, [32 x i32], [0 x i32*] }
%struct.sysv_sem = type { %struct.sem_undo_list* }
%struct.sem_undo_list = type opaque
%struct.thread_struct = type { [3 x %struct.desc_struct], i64, i64, i64, i16, i16, i16, i16, i64, i64, [4 x %struct.perf_event*], i64, i64, i64, i64, i64, %struct.fpu, i64*, i64, i32 }
%struct.desc_struct = type { %union.anon.6 }
%union.anon.6 = type { %struct.anon.7 }
%struct.anon.7 = type { i32, i32 }
%struct.perf_event = type opaque
%struct.fpu = type { i32, i32, %union.thread_xstate* }
%union.thread_xstate = type { %struct.xsave_struct }
%struct.xsave_struct = type { %struct.i387_fxsave_struct, %struct.xsave_hdr_struct, %struct.ymmh_struct }
%struct.i387_fxsave_struct = type { i16, i16, i16, i16, %union.anon.9, i32, i32, [32 x i32], [64 x i32], [12 x i32], %union.anon.12 }
%union.anon.9 = type { %struct.anon.10 }
%struct.anon.10 = type { i64, i64 }
%union.anon.12 = type { [12 x i32] }
%struct.xsave_hdr_struct = type { i64, [2 x i64], [5 x i64] }
%struct.ymmh_struct = type { [64 x i32] }
%struct.fs_struct = type opaque
%struct.files_struct = type opaque
%struct.nsproxy = type opaque
%struct.signal_struct = type { %struct.atomic_t, %struct.atomic_t, i32, %struct.__wait_queue_head, %struct.task_struct*, %struct.sigpending, i32, i32, %struct.task_struct*, i32, i32, i8, i32, %struct.list_head, %struct.hrtimer, %struct.pid*, %union.ktime, [2 x %struct.cpu_itimer], %struct.thread_group_cputimer, %struct.task_cputime, [3 x %struct.list_head], %struct.pid*, i32, %struct.tty_struct*, i64, i64, i64, i64, i64, i64, %struct.cputime, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, %struct.task_io_accounting, i64, [16 x %struct.rlimit], %struct.pacct_struct, %struct.taskstats*, i32, i32, %struct.tty_audit_buf*, %struct.rw_semaphore, i32, i16, i16, %struct.mutex }
%struct.hrtimer = type { %struct.timerqueue_node, %union.ktime, i32 (%struct.hrtimer*)*, %struct.hrtimer_clock_base*, i64, i32, i8*, [16 x i8] }
%struct.timerqueue_node = type { %struct.rb_node, %union.ktime }
%struct.hrtimer_clock_base = type { %struct.hrtimer_cpu_base*, i32, i32, %struct.timerqueue_head, %union.ktime, i64 ()*, %union.ktime, %union.ktime }
%struct.hrtimer_cpu_base = type { %struct.raw_spinlock, i32, i32, %union.ktime, i32, i32, i64, i64, i64, %union.ktime, [4 x %struct.hrtimer_clock_base] }
%struct.timerqueue_head = type { %struct.rb_root, %struct.timerqueue_node* }
%union.ktime = type { i64 }
%struct.cpu_itimer = type { i64, i64, i32, i32 }
%struct.thread_group_cputimer = type { %struct.task_cputime, i32, %struct.raw_spinlock }
%struct.tty_struct = type opaque
%struct.rlimit = type { i64, i64 }
%struct.pacct_struct = type { i32, i64, i64, i64, i64, i64, i64 }
%struct.taskstats = type opaque
%struct.tty_audit_buf = type opaque
%struct.sighand_struct = type { %struct.atomic_t, [64 x %struct.k_sigaction], %struct.spinlock, %struct.__wait_queue_head }
%struct.k_sigaction = type { %struct.sigaction }
%struct.sigaction = type { void (i32)*, i64, void ()*, %struct.sigset_t }
%struct.sigset_t = type { [1 x i64] }
%struct.sigpending = type { %struct.list_head, %struct.sigset_t }
%struct.audit_context = type opaque
%struct.seccomp = type { i32, %struct.seccomp_filter* }
%struct.seccomp_filter = type opaque
%struct.raw_spinlock = type { %struct.arch_spinlock }
%struct.arch_spinlock = type { %union.anon.1 }
%union.anon.1 = type { i16 }
%struct.plist_head = type { %struct.list_head }
%struct.rt_mutex_waiter = type opaque
%struct.bio_list = type opaque
%struct.blk_plug = type opaque
%struct.reclaim_state = type opaque
%struct.backing_dev_info = type opaque
%struct.io_context = type opaque
%struct.siginfo = type { i32, i32, i32, %union.anon.14 }
%union.anon.14 = type { %struct.anon.18, [80 x i8] }
%struct.anon.18 = type { i32, i32, i32, i64, i64 }
%struct.task_io_accounting = type { i64, i64, i64, i64, i64, i64, i64 }
%struct.nodemask_t = type { [1 x i64] }
%struct.seqcount = type { i32 }
%struct.css_set = type opaque
%struct.robust_list_head = type opaque
%struct.compat_robust_list_head = type opaque
%struct.futex_pi_state = type opaque
%struct.perf_event_context = type opaque
%struct.mempolicy = type opaque
%struct.callback_head = type { %struct.callback_head*, void (%struct.callback_head*)* }
%struct.pipe_inode_info = type opaque
%struct.page_frag = type { %struct.page*, i32, i32 }
%struct.task_delay_info = type { %struct.spinlock, i32, %struct.timespec, %struct.timespec, i64, i64, i32, i32, %struct.timespec, %struct.timespec, i64, i32 }
%struct.bus_type = type { i8*, i8*, %struct.device*, %struct.bus_attribute*, %struct.device_attribute*, %struct.driver_attribute*, i32 (%struct.device*, %struct.device_driver*)*, i32 (%struct.device*, %struct.kobj_uevent_env*)*, i32 (%struct.device*)*, i32 (%struct.device*)*, void (%struct.device*)*, i32 (%struct.device*, i32)*, i32 (%struct.device*)*, %struct.dev_pm_ops*, %struct.iommu_ops*, %struct.subsys_private*, %struct.lock_class_key }
%struct.bus_attribute = type { %struct.attribute, i64 (%struct.bus_type*, i8*)*, i64 (%struct.bus_type*, i8*, i64)* }
%struct.device_attribute = type { %struct.attribute, i64 (%struct.device*, %struct.device_attribute*, i8*)*, i64 (%struct.device*, %struct.device_attribute*, i8*, i64)* }
%struct.driver_attribute = type { %struct.attribute, i64 (%struct.device_driver*, i8*)*, i64 (%struct.device_driver*, i8*, i64)* }
%struct.iommu_ops = type opaque
%struct.subsys_private = type opaque
%struct.device_driver = type { i8*, %struct.bus_type*, %struct.module*, i8*, i8, %struct.of_device_id*, %struct.acpi_device_id*, i32 (%struct.device*)*, i32 (%struct.device*)*, void (%struct.device*)*, i32 (%struct.device*, i32)*, i32 (%struct.device*)*, %struct.attribute_group**, %struct.dev_pm_ops*, %struct.driver_private* }
%struct.of_device_id = type { [32 x i8], [32 x i8], [128 x i8], i8* }
%struct.acpi_device_id = type { [9 x i8], i64 }
%struct.driver_private = type opaque
%struct.dev_pm_info = type { %struct.pm_message, i8, %struct.spinlock, %struct.list_head, %struct.completion, %struct.wakeup_source*, i8, %struct.pm_subsys_data*, %struct.dev_pm_qos* }
%struct.pm_message = type { i32 }
%struct.wakeup_source = type { i8*, %struct.list_head, %struct.spinlock, %struct.timer_list, i64, %union.ktime, %union.ktime, %union.ktime, %union.ktime, %union.ktime, i64, i64, i64, i64, i64, i8 }
%struct.timer_list = type { %struct.list_head, i64, %struct.tvec_base*, void (i64)*, i64, i32, i32, i8*, [16 x i8] }
%struct.tvec_base = type opaque
%struct.pm_subsys_data = type { %struct.spinlock, i32 }
%struct.dev_pm_qos = type opaque
%struct.dev_pm_domain = type { %struct.dev_pm_ops }
%struct.device_dma_parameters = type { i32, i64 }
%struct.dma_coherent_mem = type opaque
%struct.dev_archdata = type { %struct.dma_map_ops*, i8* }
%struct.dma_map_ops = type opaque
%struct.device_node = type opaque
%struct.acpi_dev_node = type { i8* }
%struct.spinlock = type { %union.anon.0 }
%union.anon.0 = type { %struct.raw_spinlock }
%struct.list_head = type { %struct.list_head*, %struct.list_head* }
%struct.klist_node = type { i8*, %struct.list_head, %struct.kref }
%struct.class = type { i8*, %struct.module*, %struct.class_attribute*, %struct.device_attribute*, %struct.bin_attribute*, %struct.kobject*, i32 (%struct.device*, %struct.kobj_uevent_env*)*, i8* (%struct.device*, i16*)*, void (%struct.class*)*, void (%struct.device*)*, i32 (%struct.device*, i32)*, i32 (%struct.device*)*, %struct.kobj_ns_type_operations*, i8* (%struct.device*)*, %struct.dev_pm_ops*, %struct.subsys_private* }
%struct.class_attribute = type { %struct.attribute, i64 (%struct.class*, %struct.class_attribute*, i8*)*, i64 (%struct.class*, %struct.class_attribute*, i8*, i64)*, i8* (%struct.class*, %struct.class_attribute*)* }
%struct.bin_attribute = type { %struct.attribute, i64, i8*, i64 (%struct.file*, %struct.kobject*, %struct.bin_attribute*, i8*, i64, i64)*, i64 (%struct.file*, %struct.kobject*, %struct.bin_attribute*, i8*, i64, i64)*, i32 (%struct.file*, %struct.kobject*, %struct.bin_attribute*, %struct.vm_area_struct*)* }
%struct.attribute_group = type { i8*, i16 (%struct.kobject*, %struct.attribute*, i32)*, %struct.attribute** }
%struct.iommu_group = type opaque
%struct.resource = type { i64, i64, i8*, i64, %struct.resource*, %struct.resource*, %struct.resource* }
%struct.platform_device_id = type { [20 x i8], i64 }
%struct.mfd_cell = type opaque
%struct.pdev_archdata = type {}
%struct.platform_driver = type { i32 (%struct.platform_device*)*, i32 (%struct.platform_device*)*, void (%struct.platform_device*)*, i32 (%struct.platform_device*, i32)*, i32 (%struct.platform_device*)*, %struct.device_driver, %struct.platform_device_id* }
%struct.smp_ops = type { void ()*, void (i32)*, void (i32)*, void (i32)*, void (i32)*, i32 (i32, %struct.task_struct*)*, i32 ()*, void (i32)*, void ()*, void (%struct.cpumask*)*, void (i32)* }
%struct.sensor_device_attribute_2 = type { %struct.device_attribute, i8, i8 }
%struct.sensor_device_attribute = type { %struct.device_attribute, i32 }
%struct.kmem_cache = type { %struct.kmem_cache_cpu*, i64, i64, i32, i32, i32, i32, %struct.kmem_cache_order_objects, %struct.kmem_cache_order_objects, %struct.kmem_cache_order_objects, i32, i32, void (i8*)*, i32, i32, i32, i8*, %struct.list_head, %struct.kobject, i32, [64 x %struct.kmem_cache_node*] }
%struct.kmem_cache_cpu = type { i8**, i64, %struct.page*, %struct.page* }
%struct.kmem_cache_order_objects = type { i64 }
%struct.kmem_cache_node = type opaque
%struct.nct6775_sio_data = type { i32, i32 }
%struct.nct6775_data = type { i32, i32, i8*, %struct.device*, [4 x [10 x i16]], [10 x i8], [10 x i16], i8**, i32, i16, i16, i16, i8*, i16*, [2 x i16*], i16*, i16*, i16*, i16*, i16*, [3 x i16*], i16*, i8*, i8*, [7 x i16*], i16*, i16*, i16*, i16*, i16*, i16*, i16*, i16*, [3 x i16*], i16*, i16*, i32 (i16, i32)*, i32 (i16, i32)*, %struct.mutex, i8, i64, i8, i8, [15 x [3 x i8]], [5 x i32], [5 x i16], [5 x i8], [5 x i8], i8, i8, i8, i8, i8, [6 x i8], [6 x i8], [4 x [10 x i16]], i64, i8, [5 x i8], [5 x i32], [7 x [5 x i8]], [5 x i8], i8, [5 x i32], [5 x i32], i8, [2 x [5 x i8]], i8, [3 x [5 x i8]], i32, [5 x [7 x i8]], [5 x [7 x i8]], [5 x i8], [5 x i8], [3 x [5 x i8]], i8, i8, i16, i16, i16, i8, i8, i8 }

@__param_str_force_id = internal constant [17 x i8] c"nct6775.force_id\00", align 16
@param_ops_ushort = external global %struct.kernel_param_ops, align 8
@force_id = internal global i16 0, align 2
@__param_force_id = internal constant %struct.kernel_param { i8* getelementptr inbounds ([17 x i8], [17 x i8]* @__param_str_force_id, i32 0, i32 0), %struct.kernel_param_ops* @param_ops_ushort, i16 0, i16 -1, %union.anon.42 { i8* bitcast (i16* @force_id to i8*) } }, section "__param", align 8
@__param_str_fan_debounce = internal constant [21 x i8] c"nct6775.fan_debounce\00", align 16
@fan_debounce = internal global i16 0, align 2
@__param_fan_debounce = internal constant %struct.kernel_param { i8* getelementptr inbounds ([21 x i8], [21 x i8]* @__param_str_fan_debounce, i32 0, i32 0), %struct.kernel_param_ops* @param_ops_ushort, i16 0, i16 -1, %union.anon.42 { i8* bitcast (i16* @fan_debounce to i8*) } }, section "__param", align 8
@pdev = internal global %struct.platform_device* null, align 8
@nct6775_driver = internal global %struct.platform_driver { i32 (%struct.platform_device*)* @nct6775_probe, i32 (%struct.platform_device*)* @nct6775_remove, void (%struct.platform_device*)* null, i32 (%struct.platform_device*, i32)* null, i32 (%struct.platform_device*)* null, %struct.device_driver { i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str, i32 0, i32 0), %struct.bus_type* null, %struct.module* null, i8* null, i8 0, %struct.of_device_id* null, %struct.acpi_device_id* null, i32 (%struct.device*)* null, i32 (%struct.device*)* null, void (%struct.device*)* null, i32 (%struct.device*, i32)* null, i32 (%struct.device*)* null, %struct.attribute_group** null, %struct.dev_pm_ops* @nct6775_dev_pm_ops, %struct.driver_private* null }, %struct.platform_device_id* null }, align 8
@__initcall_sensors_nct6775_init6 = internal global i32 ()* @sensors_nct6775_init, section ".initcall6.init", align 8
@__exitcall_sensors_nct6775_exit = internal global void ()* @sensors_nct6775_exit, section ".exitcall.exit", align 8
@smp_ops = external global %struct.smp_ops, align 8
@current_task = external global %struct.task_struct*, align 8
@.str = private unnamed_addr constant [8 x i8] c"nct6775\00", align 1
@nct6775_dev_pm_ops = internal constant %struct.dev_pm_ops { i32 (%struct.device*)* null, void (%struct.device*)* null, i32 (%struct.device*)* @nct6775_suspend, i32 (%struct.device*)* @nct6775_resume, i32 (%struct.device*)* null, i32 (%struct.device*)* null, i32 (%struct.device*)* null, i32 (%struct.device*)* null, i32 (%struct.device*)* null, i32 (%struct.device*)* null, i32 (%struct.device*)* null, i32 (%struct.device*)* null, i32 (%struct.device*)* null, i32 (%struct.device*)* null, i32 (%struct.device*)* null, i32 (%struct.device*)* null, i32 (%struct.device*)* null, i32 (%struct.device*)* null, i32 (%struct.device*)* null, i32 (%struct.device*)* null, i32 (%struct.device*)* null, i32 (%struct.device*)* null, i32 (%struct.device*)* null }, align 8
@ioport_resource = external global %struct.resource, align 8
@nct6775_probe.__key = internal global %struct.lock_class_key zeroinitializer, align 1
@.str.1 = private unnamed_addr constant [19 x i8] c"&data->update_lock\00", align 1
@nct6775_device_names = internal constant [3 x i8*] [i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str, i32 0, i32 0), i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.4, i32 0, i32 0), i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.5, i32 0, i32 0)], align 16
@NCT6775_ALARM_BITS = internal constant [32 x i8] c"\00\01\02\03\08\15\14\10\11\FF\FF\FF\FF\FF\FF\FF\06\07\0B\0A\17\FF\FF\FF\04\05\0D\FF\FF\FF\0C\FF", align 16
@nct6775_temp_label = internal constant [21 x i8*] [i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.str.6, i32 0, i32 0), i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.7, i32 0, i32 0), i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.8, i32 0, i32 0), i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.9, i32 0, i32 0), i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.10, i32 0, i32 0), i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.11, i32 0, i32 0), i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.12, i32 0, i32 0), i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.13, i32 0, i32 0), i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.14, i32 0, i32 0), i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.15, i32 0, i32 0), i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.16, i32 0, i32 0), i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.17, i32 0, i32 0), i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.18, i32 0, i32 0), i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.19, i32 0, i32 0), i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.20, i32 0, i32 0), i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.21, i32 0, i32 0), i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.22, i32 0, i32 0), i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.23, i32 0, i32 0), i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.24, i32 0, i32 0), i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.25, i32 0, i32 0), i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.26, i32 0, i32 0)], align 16
@NCT6775_REG_IN = internal constant [10 x i16] [i16 32, i16 33, i16 34, i16 35, i16 36, i16 37, i16 38, i16 1360, i16 1361, i16 1362], align 16
@NCT6775_REG_IN_MIN = internal constant [15 x i16] [i16 44, i16 46, i16 48, i16 50, i16 52, i16 54, i16 56, i16 1365, i16 1367, i16 1369, i16 1371, i16 1373, i16 1375, i16 1377, i16 1379], align 16
@NCT6775_REG_IN_MAX = internal constant [15 x i16] [i16 43, i16 45, i16 47, i16 49, i16 51, i16 53, i16 55, i16 1364, i16 1366, i16 1368, i16 1370, i16 1372, i16 1374, i16 1376, i16 1378], align 16
@NCT6775_REG_TARGET = internal constant [5 x i16] [i16 257, i16 513, i16 769, i16 2049, i16 2305], align 2
@NCT6775_REG_FAN = internal constant [5 x i16] [i16 1584, i16 1586, i16 1588, i16 1590, i16 1592], align 2
@NCT6775_REG_FAN_MODE = internal constant [5 x i16] [i16 258, i16 514, i16 770, i16 2050, i16 2306], align 2
@NCT6775_REG_FAN_MIN = internal constant [3 x i16] [i16 59, i16 60, i16 61], align 2
@NCT6775_REG_FAN_PULSES = internal constant [5 x i16] [i16 1601, i16 1602, i16 1603, i16 1604, i16 0], align 2
@NCT6775_REG_FAN_STOP_TIME = internal constant [5 x i16] [i16 263, i16 519, i16 775, i16 2055, i16 2311], align 2
@NCT6775_REG_FAN_STEP_UP_TIME = internal constant [5 x i16] [i16 260, i16 516, i16 772, i16 2052, i16 2308], align 2
@NCT6775_REG_FAN_STEP_DOWN_TIME = internal constant [5 x i16] [i16 259, i16 515, i16 771, i16 2051, i16 2307], align 2
@NCT6775_REG_PWM = internal constant [5 x i16] [i16 265, i16 521, i16 777, i16 2057, i16 2313], align 2
@NCT6775_REG_FAN_START_OUTPUT = internal constant [5 x i16] [i16 262, i16 518, i16 774, i16 2054, i16 2310], align 2
@NCT6775_REG_FAN_STOP_OUTPUT = internal constant [5 x i16] [i16 261, i16 517, i16 773, i16 2053, i16 2309], align 2
@NCT6775_REG_FAN_MAX_OUTPUT = internal constant [3 x i16] [i16 266, i16 522, i16 778], align 2
@NCT6775_REG_FAN_STEP_OUTPUT = internal constant [3 x i16] [i16 267, i16 523, i16 779], align 2
@NCT6775_REG_WEIGHT_DUTY_STEP = internal constant [5 x i16] [i16 316, i16 572, i16 828, i16 2108, i16 2364], align 2
@NCT6775_REG_PWM_READ = internal constant [5 x i16] [i16 1, i16 3, i16 17, i16 19, i16 21], align 2
@NCT6775_REG_PWM_MODE = internal constant [3 x i8] c"\04\04\12", align 1
@NCT6775_PWM_MODE_MASK = internal constant [3 x i8] c"\01\02\01", align 1
@NCT6775_REG_AUTO_TEMP = internal constant [5 x i16] [i16 289, i16 545, i16 801, i16 2081, i16 2337], align 2
@NCT6775_REG_AUTO_PWM = internal constant [5 x i16] [i16 295, i16 551, i16 807, i16 2087, i16 2343], align 2
@NCT6775_REG_CRITICAL_TEMP = internal constant [5 x i16] [i16 309, i16 565, i16 821, i16 2101, i16 2357], align 2
@NCT6775_REG_CRITICAL_TEMP_TOLERANCE = internal constant [5 x i16] [i16 312, i16 568, i16 824, i16 2104, i16 2360], align 2
@NCT6775_REG_TEMP_OFFSET = internal constant [3 x i16] [i16 1108, i16 1109, i16 1110], align 2
@NCT6775_REG_TEMP_SOURCE = internal constant [6 x i16] [i16 1569, i16 1570, i16 1571, i16 1572, i16 1573, i16 1574], align 2
@NCT6775_REG_TEMP_SEL = internal constant [5 x i16] [i16 256, i16 512, i16 768, i16 2048, i16 2304], align 2
@NCT6775_REG_WEIGHT_TEMP_SEL = internal constant [5 x i16] [i16 313, i16 569, i16 825, i16 2105, i16 2361], align 2
@NCT6775_REG_WEIGHT_TEMP_STEP = internal constant [5 x i16] [i16 314, i16 570, i16 826, i16 2106, i16 2362], align 2
@NCT6775_REG_WEIGHT_TEMP_STEP_TOL = internal constant [5 x i16] [i16 315, i16 571, i16 827, i16 2107, i16 2363], align 2
@NCT6775_REG_WEIGHT_TEMP_BASE = internal constant [5 x i16] [i16 317, i16 573, i16 829, i16 2109, i16 2365], align 2
@NCT6775_REG_ALARM = internal constant [4 x i16] [i16 1113, i16 1114, i16 1115, i16 0], align 2
@NCT6775_REG_TEMP = internal constant [6 x i16] [i16 39, i16 336, i16 592, i16 1579, i16 1580, i16 1581], align 2
@NCT6775_REG_TEMP_OVER = internal constant [6 x i16] [i16 57, i16 341, i16 597, i16 1650, i16 1655, i16 1660], align 2
@NCT6775_REG_TEMP_HYST = internal constant [6 x i16] [i16 58, i16 339, i16 595, i16 1651, i16 1656, i16 1661], align 2
@NCT6775_REG_TEMP_CONFIG = internal constant [6 x i16] [i16 0, i16 338, i16 594, i16 1576, i16 1577, i16 1578], align 2
@NCT6775_REG_TEMP_ALTERNATE = internal constant [20 x i16] [i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 1633, i16 1634, i16 1636, i16 0, i16 0, i16 0, i16 0], align 16
@NCT6775_REG_TEMP_CRIT = internal constant [20 x i16] [i16 0, i16 0, i16 0, i16 0, i16 2560, i16 2561, i16 2562, i16 2563, i16 2564, i16 2565, i16 2566, i16 2567, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0], align 16
@NCT6776_ALARM_BITS = internal constant [32 x i8] c"\00\01\02\03\08\15\14\10\11\FF\FF\FF\FF\FF\FF\FF\06\07\0B\0A\17\FF\FF\FF\04\05\0D\FF\FF\FF\0C\09", align 16
@nct6776_temp_label = internal constant [23 x i8*] [i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.str.6, i32 0, i32 0), i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.7, i32 0, i32 0), i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.8, i32 0, i32 0), i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.9, i32 0, i32 0), i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.27, i32 0, i32 0), i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.28, i32 0, i32 0), i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.29, i32 0, i32 0), i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.30, i32 0, i32 0), i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.31, i32 0, i32 0), i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.32, i32 0, i32 0), i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.33, i32 0, i32 0), i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.34, i32 0, i32 0), i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.11, i32 0, i32 0), i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.12, i32 0, i32 0), i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.19, i32 0, i32 0), i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.20, i32 0, i32 0), i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.21, i32 0, i32 0), i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.22, i32 0, i32 0), i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.23, i32 0, i32 0), i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.24, i32 0, i32 0), i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.25, i32 0, i32 0), i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.26, i32 0, i32 0), i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.35, i32 0, i32 0)], align 16
@NCT6776_REG_FAN_MIN = internal constant [5 x i16] [i16 1594, i16 1596, i16 1598, i16 1600, i16 1602], align 2
@NCT6776_REG_FAN_PULSES = internal constant [5 x i16] [i16 1604, i16 1605, i16 1606, i16 0, i16 0], align 2
@NCT6776_REG_TOLERANCE_H = internal constant [5 x i16] [i16 268, i16 524, i16 780, i16 2060, i16 2316], align 2
@NCT6776_REG_WEIGHT_DUTY_BASE = internal constant [5 x i16] [i16 318, i16 574, i16 830, i16 2110, i16 2366], align 2
@NCT6776_REG_PWM_MODE = internal constant [3 x i8] c"\04\00\00", align 1
@NCT6776_PWM_MODE_MASK = internal constant [3 x i8] c"\01\00\00", align 1
@NCT6776_REG_TEMP_CONFIG = internal constant [6 x i16] [i16 24, i16 338, i16 594, i16 1576, i16 1577, i16 1578], align 2
@NCT6776_REG_TEMP_ALTERNATE = internal constant [22 x i16] [i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 1025, i16 1026, i16 1028, i16 0, i16 0, i16 0, i16 0, i16 0], align 16
@NCT6776_REG_TEMP_CRIT = internal constant [22 x i16] [i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 1801, i16 1802, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0], align 16
@NCT6779_ALARM_BITS = internal constant [32 x i8] c"\00\01\02\03\08\15\14\10\11\18\19\1A\1B\1C\1D\FF\06\07\0B\0A\17\FF\FF\FF\04\05\0D\FF\FF\FF\0C\09", align 16
@nct6779_temp_label = internal constant [27 x i8*] [i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.str.6, i32 0, i32 0), i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.7, i32 0, i32 0), i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.8, i32 0, i32 0), i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.36, i32 0, i32 0), i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.37, i32 0, i32 0), i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.38, i32 0, i32 0), i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.39, i32 0, i32 0), i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.str.6, i32 0, i32 0), i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.27, i32 0, i32 0), i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.28, i32 0, i32 0), i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.29, i32 0, i32 0), i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.30, i32 0, i32 0), i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.31, i32 0, i32 0), i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.32, i32 0, i32 0), i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.33, i32 0, i32 0), i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.34, i32 0, i32 0), i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.11, i32 0, i32 0), i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.12, i32 0, i32 0), i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.19, i32 0, i32 0), i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.20, i32 0, i32 0), i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.21, i32 0, i32 0), i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.22, i32 0, i32 0), i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.23, i32 0, i32 0), i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.24, i32 0, i32 0), i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.25, i32 0, i32 0), i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.26, i32 0, i32 0), i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.35, i32 0, i32 0)], align 16
@NCT6779_REG_IN = internal constant [15 x i16] [i16 1152, i16 1153, i16 1154, i16 1155, i16 1156, i16 1157, i16 1158, i16 1159, i16 1160, i16 1161, i16 1162, i16 1163, i16 1164, i16 1165, i16 1166], align 16
@NCT6779_REG_FAN = internal constant [5 x i16] [i16 1200, i16 1202, i16 1204, i16 1206, i16 1208], align 2
@NCT6779_REG_FAN_PULSES = internal constant [5 x i16] [i16 1604, i16 1605, i16 1606, i16 1607, i16 1608], align 2
@NCT6779_REG_TEMP_OFFSET = internal constant [6 x i16] [i16 1108, i16 1109, i16 1110, i16 1098, i16 1099, i16 1100], align 2
@NCT6779_REG_ALARM = internal constant [4 x i16] [i16 1113, i16 1114, i16 1115, i16 1384], align 2
@NCT6779_REG_TEMP = internal constant [2 x i16] [i16 39, i16 336], align 2
@NCT6779_REG_TEMP_OVER = internal constant [2 x i16] [i16 57, i16 341], align 2
@NCT6779_REG_TEMP_HYST = internal constant [2 x i16] [i16 58, i16 339], align 2
@NCT6779_REG_TEMP_CONFIG = internal constant [2 x i16] [i16 24, i16 338], align 2
@NCT6779_REG_TEMP_ALTERNATE = internal constant [26 x i16] [i16 1168, i16 1169, i16 1170, i16 1171, i16 1172, i16 1173, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 1024, i16 1025, i16 1026, i16 1028, i16 1029, i16 1030, i16 1031, i16 1032, i16 0], align 16
@NCT6779_REG_TEMP_CRIT = internal constant [26 x i16] [i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 1801, i16 1802, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0], align 16
@.str.2 = private unnamed_addr constant [85 x i8] c"Invalid temperature source %d at index %d, source register 0x%x, temp register 0x%x\0A\00", align 1
@.str.3 = private unnamed_addr constant [34 x i8] c"Enabled fan debounce for chip %s\0A\00", align 1
@dev_attr_cpu0_vid = internal global %struct.device_attribute { %struct.attribute { i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.40, i32 0, i32 0), i16 292 }, i64 (%struct.device*, %struct.device_attribute*, i8*)* @show_vid, i64 (%struct.device*, %struct.device_attribute*, i8*, i64)* null }, align 8
@nct6775_group_pwm = internal constant [5 x %struct.attribute_group] [%struct.attribute_group { i8* null, i16 (%struct.kobject*, %struct.attribute*, i32)* null, %struct.attribute** getelementptr inbounds ([5 x [20 x %struct.attribute*]], [5 x [20 x %struct.attribute*]]* @nct6775_attributes_pwm, i32 0, i32 0, i32 0) }, %struct.attribute_group { i8* null, i16 (%struct.kobject*, %struct.attribute*, i32)* null, %struct.attribute** bitcast (i8* getelementptr (i8, i8* bitcast ([5 x [20 x %struct.attribute*]]* @nct6775_attributes_pwm to i8*), i64 160) to %struct.attribute**) }, %struct.attribute_group { i8* null, i16 (%struct.kobject*, %struct.attribute*, i32)* null, %struct.attribute** bitcast (i8* getelementptr (i8, i8* bitcast ([5 x [20 x %struct.attribute*]]* @nct6775_attributes_pwm to i8*), i64 320) to %struct.attribute**) }, %struct.attribute_group { i8* null, i16 (%struct.kobject*, %struct.attribute*, i32)* null, %struct.attribute** bitcast (i8* getelementptr (i8, i8* bitcast ([5 x [20 x %struct.attribute*]]* @nct6775_attributes_pwm to i8*), i64 480) to %struct.attribute**) }, %struct.attribute_group { i8* null, i16 (%struct.kobject*, %struct.attribute*, i32)* null, %struct.attribute** bitcast (i8* getelementptr (i8, i8* bitcast ([5 x [20 x %struct.attribute*]]* @nct6775_attributes_pwm to i8*), i64 640) to %struct.attribute**) }], align 16
@sda_pwm_max = internal global [5 x %struct.sensor_device_attribute_2] [%struct.sensor_device_attribute_2 { %struct.device_attribute { %struct.attribute { i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.139, i32 0, i32 0), i16 420 }, i64 (%struct.device*, %struct.device_attribute*, i8*)* @show_pwm, i64 (%struct.device*, %struct.device_attribute*, i8*, i64)* @store_pwm }, i8 3, i8 0 }, %struct.sensor_device_attribute_2 { %struct.device_attribute { %struct.attribute { i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.140, i32 0, i32 0), i16 420 }, i64 (%struct.device*, %struct.device_attribute*, i8*)* @show_pwm, i64 (%struct.device*, %struct.device_attribute*, i8*, i64)* @store_pwm }, i8 3, i8 1 }, %struct.sensor_device_attribute_2 { %struct.device_attribute { %struct.attribute { i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.141, i32 0, i32 0), i16 420 }, i64 (%struct.device*, %struct.device_attribute*, i8*)* @show_pwm, i64 (%struct.device*, %struct.device_attribute*, i8*, i64)* @store_pwm }, i8 3, i8 2 }, %struct.sensor_device_attribute_2 { %struct.device_attribute { %struct.attribute { i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.142, i32 0, i32 0), i16 420 }, i64 (%struct.device*, %struct.device_attribute*, i8*)* @show_pwm, i64 (%struct.device*, %struct.device_attribute*, i8*, i64)* @store_pwm }, i8 3, i8 3 }, %struct.sensor_device_attribute_2 { %struct.device_attribute { %struct.attribute { i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.143, i32 0, i32 0), i16 420 }, i64 (%struct.device*, %struct.device_attribute*, i8*)* @show_pwm, i64 (%struct.device*, %struct.device_attribute*, i8*, i64)* @store_pwm }, i8 3, i8 4 }], align 16
@sda_pwm_step = internal global [5 x %struct.sensor_device_attribute_2] [%struct.sensor_device_attribute_2 { %struct.device_attribute { %struct.attribute { i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.144, i32 0, i32 0), i16 420 }, i64 (%struct.device*, %struct.device_attribute*, i8*)* @show_pwm, i64 (%struct.device*, %struct.device_attribute*, i8*, i64)* @store_pwm }, i8 4, i8 0 }, %struct.sensor_device_attribute_2 { %struct.device_attribute { %struct.attribute { i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.145, i32 0, i32 0), i16 420 }, i64 (%struct.device*, %struct.device_attribute*, i8*)* @show_pwm, i64 (%struct.device*, %struct.device_attribute*, i8*, i64)* @store_pwm }, i8 4, i8 1 }, %struct.sensor_device_attribute_2 { %struct.device_attribute { %struct.attribute { i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.146, i32 0, i32 0), i16 420 }, i64 (%struct.device*, %struct.device_attribute*, i8*)* @show_pwm, i64 (%struct.device*, %struct.device_attribute*, i8*, i64)* @store_pwm }, i8 4, i8 2 }, %struct.sensor_device_attribute_2 { %struct.device_attribute { %struct.attribute { i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.147, i32 0, i32 0), i16 420 }, i64 (%struct.device*, %struct.device_attribute*, i8*)* @show_pwm, i64 (%struct.device*, %struct.device_attribute*, i8*, i64)* @store_pwm }, i8 4, i8 3 }, %struct.sensor_device_attribute_2 { %struct.device_attribute { %struct.attribute { i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.148, i32 0, i32 0), i16 420 }, i64 (%struct.device*, %struct.device_attribute*, i8*)* @show_pwm, i64 (%struct.device*, %struct.device_attribute*, i8*, i64)* @store_pwm }, i8 4, i8 4 }], align 16
@sda_weight_duty_base = internal global [5 x %struct.sensor_device_attribute_2] [%struct.sensor_device_attribute_2 { %struct.device_attribute { %struct.attribute { i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.149, i32 0, i32 0), i16 420 }, i64 (%struct.device*, %struct.device_attribute*, i8*)* @show_pwm, i64 (%struct.device*, %struct.device_attribute*, i8*, i64)* @store_pwm }, i8 6, i8 0 }, %struct.sensor_device_attribute_2 { %struct.device_attribute { %struct.attribute { i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.150, i32 0, i32 0), i16 420 }, i64 (%struct.device*, %struct.device_attribute*, i8*)* @show_pwm, i64 (%struct.device*, %struct.device_attribute*, i8*, i64)* @store_pwm }, i8 6, i8 1 }, %struct.sensor_device_attribute_2 { %struct.device_attribute { %struct.attribute { i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.151, i32 0, i32 0), i16 420 }, i64 (%struct.device*, %struct.device_attribute*, i8*)* @show_pwm, i64 (%struct.device*, %struct.device_attribute*, i8*, i64)* @store_pwm }, i8 6, i8 2 }, %struct.sensor_device_attribute_2 { %struct.device_attribute { %struct.attribute { i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.152, i32 0, i32 0), i16 420 }, i64 (%struct.device*, %struct.device_attribute*, i8*)* @show_pwm, i64 (%struct.device*, %struct.device_attribute*, i8*, i64)* @store_pwm }, i8 6, i8 3 }, %struct.sensor_device_attribute_2 { %struct.device_attribute { %struct.attribute { i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.153, i32 0, i32 0), i16 420 }, i64 (%struct.device*, %struct.device_attribute*, i8*)* @show_pwm, i64 (%struct.device*, %struct.device_attribute*, i8*, i64)* @store_pwm }, i8 6, i8 4 }], align 16
@sda_auto_pwm_arrays = internal global [70 x %struct.sensor_device_attribute_2] [%struct.sensor_device_attribute_2 { %struct.device_attribute { %struct.attribute { i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.154, i32 0, i32 0), i16 420 }, i64 (%struct.device*, %struct.device_attribute*, i8*)* @show_auto_pwm, i64 (%struct.device*, %struct.device_attribute*, i8*, i64)* @store_auto_pwm }, i8 0, i8 0 }, %struct.sensor_device_attribute_2 { %struct.device_attribute { %struct.attribute { i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.155, i32 0, i32 0), i16 420 }, i64 (%struct.device*, %struct.device_attribute*, i8*)* @show_auto_temp, i64 (%struct.device*, %struct.device_attribute*, i8*, i64)* @store_auto_temp }, i8 0, i8 0 }, %struct.sensor_device_attribute_2 { %struct.device_attribute { %struct.attribute { i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.156, i32 0, i32 0), i16 420 }, i64 (%struct.device*, %struct.device_attribute*, i8*)* @show_auto_pwm, i64 (%struct.device*, %struct.device_attribute*, i8*, i64)* @store_auto_pwm }, i8 1, i8 0 }, %struct.sensor_device_attribute_2 { %struct.device_attribute { %struct.attribute { i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.157, i32 0, i32 0), i16 420 }, i64 (%struct.device*, %struct.device_attribute*, i8*)* @show_auto_temp, i64 (%struct.device*, %struct.device_attribute*, i8*, i64)* @store_auto_temp }, i8 1, i8 0 }, %struct.sensor_device_attribute_2 { %struct.device_attribute { %struct.attribute { i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.158, i32 0, i32 0), i16 420 }, i64 (%struct.device*, %struct.device_attribute*, i8*)* @show_auto_pwm, i64 (%struct.device*, %struct.device_attribute*, i8*, i64)* @store_auto_pwm }, i8 2, i8 0 }, %struct.sensor_device_attribute_2 { %struct.device_attribute { %struct.attribute { i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.159, i32 0, i32 0), i16 420 }, i64 (%struct.device*, %struct.device_attribute*, i8*)* @show_auto_temp, i64 (%struct.device*, %struct.device_attribute*, i8*, i64)* @store_auto_temp }, i8 2, i8 0 }, %struct.sensor_device_attribute_2 { %struct.device_attribute { %struct.attribute { i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.160, i32 0, i32 0), i16 420 }, i64 (%struct.device*, %struct.device_attribute*, i8*)* @show_auto_pwm, i64 (%struct.device*, %struct.device_attribute*, i8*, i64)* @store_auto_pwm }, i8 3, i8 0 }, %struct.sensor_device_attribute_2 { %struct.device_attribute { %struct.attribute { i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.161, i32 0, i32 0), i16 420 }, i64 (%struct.device*, %struct.device_attribute*, i8*)* @show_auto_temp, i64 (%struct.device*, %struct.device_attribute*, i8*, i64)* @store_auto_temp }, i8 3, i8 0 }, %struct.sensor_device_attribute_2 { %struct.device_attribute { %struct.attribute { i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.162, i32 0, i32 0), i16 420 }, i64 (%struct.device*, %struct.device_attribute*, i8*)* @show_auto_pwm, i64 (%struct.device*, %struct.device_attribute*, i8*, i64)* @store_auto_pwm }, i8 4, i8 0 }, %struct.sensor_device_attribute_2 { %struct.device_attribute { %struct.attribute { i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.163, i32 0, i32 0), i16 420 }, i64 (%struct.device*, %struct.device_attribute*, i8*)* @show_auto_temp, i64 (%struct.device*, %struct.device_attribute*, i8*, i64)* @store_auto_temp }, i8 4, i8 0 }, %struct.sensor_device_attribute_2 { %struct.device_attribute { %struct.attribute { i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.164, i32 0, i32 0), i16 420 }, i64 (%struct.device*, %struct.device_attribute*, i8*)* @show_auto_pwm, i64 (%struct.device*, %struct.device_attribute*, i8*, i64)* @store_auto_pwm }, i8 5, i8 0 }, %struct.sensor_device_attribute_2 { %struct.device_attribute { %struct.attribute { i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.165, i32 0, i32 0), i16 420 }, i64 (%struct.device*, %struct.device_attribute*, i8*)* @show_auto_temp, i64 (%struct.device*, %struct.device_attribute*, i8*, i64)* @store_auto_temp }, i8 5, i8 0 }, %struct.sensor_device_attribute_2 { %struct.device_attribute { %struct.attribute { i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.166, i32 0, i32 0), i16 420 }, i64 (%struct.device*, %struct.device_attribute*, i8*)* @show_auto_pwm, i64 (%struct.device*, %struct.device_attribute*, i8*, i64)* @store_auto_pwm }, i8 6, i8 0 }, %struct.sensor_device_attribute_2 { %struct.device_attribute { %struct.attribute { i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.167, i32 0, i32 0), i16 420 }, i64 (%struct.device*, %struct.device_attribute*, i8*)* @show_auto_temp, i64 (%struct.device*, %struct.device_attribute*, i8*, i64)* @store_auto_temp }, i8 6, i8 0 }, %struct.sensor_device_attribute_2 { %struct.device_attribute { %struct.attribute { i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.168, i32 0, i32 0), i16 420 }, i64 (%struct.device*, %struct.device_attribute*, i8*)* @show_auto_pwm, i64 (%struct.device*, %struct.device_attribute*, i8*, i64)* @store_auto_pwm }, i8 0, i8 1 }, %struct.sensor_device_attribute_2 { %struct.device_attribute { %struct.attribute { i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.169, i32 0, i32 0), i16 420 }, i64 (%struct.device*, %struct.device_attribute*, i8*)* @show_auto_temp, i64 (%struct.device*, %struct.device_attribute*, i8*, i64)* @store_auto_temp }, i8 0, i8 1 }, %struct.sensor_device_attribute_2 { %struct.device_attribute { %struct.attribute { i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.170, i32 0, i32 0), i16 420 }, i64 (%struct.device*, %struct.device_attribute*, i8*)* @show_auto_pwm, i64 (%struct.device*, %struct.device_attribute*, i8*, i64)* @store_auto_pwm }, i8 1, i8 1 }, %struct.sensor_device_attribute_2 { %struct.device_attribute { %struct.attribute { i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.171, i32 0, i32 0), i16 420 }, i64 (%struct.device*, %struct.device_attribute*, i8*)* @show_auto_temp, i64 (%struct.device*, %struct.device_attribute*, i8*, i64)* @store_auto_temp }, i8 1, i8 1 }, %struct.sensor_device_attribute_2 { %struct.device_attribute { %struct.attribute { i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.172, i32 0, i32 0), i16 420 }, i64 (%struct.device*, %struct.device_attribute*, i8*)* @show_auto_pwm, i64 (%struct.device*, %struct.device_attribute*, i8*, i64)* @store_auto_pwm }, i8 2, i8 1 }, %struct.sensor_device_attribute_2 { %struct.device_attribute { %struct.attribute { i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.173, i32 0, i32 0), i16 420 }, i64 (%struct.device*, %struct.device_attribute*, i8*)* @show_auto_temp, i64 (%struct.device*, %struct.device_attribute*, i8*, i64)* @store_auto_temp }, i8 2, i8 1 }, %struct.sensor_device_attribute_2 { %struct.device_attribute { %struct.attribute { i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.174, i32 0, i32 0), i16 420 }, i64 (%struct.device*, %struct.device_attribute*, i8*)* @show_auto_pwm, i64 (%struct.device*, %struct.device_attribute*, i8*, i64)* @store_auto_pwm }, i8 3, i8 1 }, %struct.sensor_device_attribute_2 { %struct.device_attribute { %struct.attribute { i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.175, i32 0, i32 0), i16 420 }, i64 (%struct.device*, %struct.device_attribute*, i8*)* @show_auto_temp, i64 (%struct.device*, %struct.device_attribute*, i8*, i64)* @store_auto_temp }, i8 3, i8 1 }, %struct.sensor_device_attribute_2 { %struct.device_attribute { %struct.attribute { i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.176, i32 0, i32 0), i16 420 }, i64 (%struct.device*, %struct.device_attribute*, i8*)* @show_auto_pwm, i64 (%struct.device*, %struct.device_attribute*, i8*, i64)* @store_auto_pwm }, i8 4, i8 1 }, %struct.sensor_device_attribute_2 { %struct.device_attribute { %struct.attribute { i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.177, i32 0, i32 0), i16 420 }, i64 (%struct.device*, %struct.device_attribute*, i8*)* @show_auto_temp, i64 (%struct.device*, %struct.device_attribute*, i8*, i64)* @store_auto_temp }, i8 4, i8 1 }, %struct.sensor_device_attribute_2 { %struct.device_attribute { %struct.attribute { i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.178, i32 0, i32 0), i16 420 }, i64 (%struct.device*, %struct.device_attribute*, i8*)* @show_auto_pwm, i64 (%struct.device*, %struct.device_attribute*, i8*, i64)* @store_auto_pwm }, i8 5, i8 1 }, %struct.sensor_device_attribute_2 { %struct.device_attribute { %struct.attribute { i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.179, i32 0, i32 0), i16 420 }, i64 (%struct.device*, %struct.device_attribute*, i8*)* @show_auto_temp, i64 (%struct.device*, %struct.device_attribute*, i8*, i64)* @store_auto_temp }, i8 5, i8 1 }, %struct.sensor_device_attribute_2 { %struct.device_attribute { %struct.attribute { i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.180, i32 0, i32 0), i16 420 }, i64 (%struct.device*, %struct.device_attribute*, i8*)* @show_auto_pwm, i64 (%struct.device*, %struct.device_attribute*, i8*, i64)* @store_auto_pwm }, i8 6, i8 1 }, %struct.sensor_device_attribute_2 { %struct.device_attribute { %struct.attribute { i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.181, i32 0, i32 0), i16 420 }, i64 (%struct.device*, %struct.device_attribute*, i8*)* @show_auto_temp, i64 (%struct.device*, %struct.device_attribute*, i8*, i64)* @store_auto_temp }, i8 6, i8 1 }, %struct.sensor_device_attribute_2 { %struct.device_attribute { %struct.attribute { i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.182, i32 0, i32 0), i16 420 }, i64 (%struct.device*, %struct.device_attribute*, i8*)* @show_auto_pwm, i64 (%struct.device*, %struct.device_attribute*, i8*, i64)* @store_auto_pwm }, i8 0, i8 2 }, %struct.sensor_device_attribute_2 { %struct.device_attribute { %struct.attribute { i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.183, i32 0, i32 0), i16 420 }, i64 (%struct.device*, %struct.device_attribute*, i8*)* @show_auto_temp, i64 (%struct.device*, %struct.device_attribute*, i8*, i64)* @store_auto_temp }, i8 0, i8 2 }, %struct.sensor_device_attribute_2 { %struct.device_attribute { %struct.attribute { i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.184, i32 0, i32 0), i16 420 }, i64 (%struct.device*, %struct.device_attribute*, i8*)* @show_auto_pwm, i64 (%struct.device*, %struct.device_attribute*, i8*, i64)* @store_auto_pwm }, i8 1, i8 2 }, %struct.sensor_device_attribute_2 { %struct.device_attribute { %struct.attribute { i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.185, i32 0, i32 0), i16 420 }, i64 (%struct.device*, %struct.device_attribute*, i8*)* @show_auto_temp, i64 (%struct.device*, %struct.device_attribute*, i8*, i64)* @store_auto_temp }, i8 1, i8 2 }, %struct.sensor_device_attribute_2 { %struct.device_attribute { %struct.attribute { i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.186, i32 0, i32 0), i16 420 }, i64 (%struct.device*, %struct.device_attribute*, i8*)* @show_auto_pwm, i64 (%struct.device*, %struct.device_attribute*, i8*, i64)* @store_auto_pwm }, i8 2, i8 2 }, %struct.sensor_device_attribute_2 { %struct.device_attribute { %struct.attribute { i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.187, i32 0, i32 0), i16 420 }, i64 (%struct.device*, %struct.device_attribute*, i8*)* @show_auto_temp, i64 (%struct.device*, %struct.device_attribute*, i8*, i64)* @store_auto_temp }, i8 2, i8 2 }, %struct.sensor_device_attribute_2 { %struct.device_attribute { %struct.attribute { i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.188, i32 0, i32 0), i16 420 }, i64 (%struct.device*, %struct.device_attribute*, i8*)* @show_auto_pwm, i64 (%struct.device*, %struct.device_attribute*, i8*, i64)* @store_auto_pwm }, i8 3, i8 2 }, %struct.sensor_device_attribute_2 { %struct.device_attribute { %struct.attribute { i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.189, i32 0, i32 0), i16 420 }, i64 (%struct.device*, %struct.device_attribute*, i8*)* @show_auto_temp, i64 (%struct.device*, %struct.device_attribute*, i8*, i64)* @store_auto_temp }, i8 3, i8 2 }, %struct.sensor_device_attribute_2 { %struct.device_attribute { %struct.attribute { i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.190, i32 0, i32 0), i16 420 }, i64 (%struct.device*, %struct.device_attribute*, i8*)* @show_auto_pwm, i64 (%struct.device*, %struct.device_attribute*, i8*, i64)* @store_auto_pwm }, i8 4, i8 2 }, %struct.sensor_device_attribute_2 { %struct.device_attribute { %struct.attribute { i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.191, i32 0, i32 0), i16 420 }, i64 (%struct.device*, %struct.device_attribute*, i8*)* @show_auto_temp, i64 (%struct.device*, %struct.device_attribute*, i8*, i64)* @store_auto_temp }, i8 4, i8 2 }, %struct.sensor_device_attribute_2 { %struct.device_attribute { %struct.attribute { i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.192, i32 0, i32 0), i16 420 }, i64 (%struct.device*, %struct.device_attribute*, i8*)* @show_auto_pwm, i64 (%struct.device*, %struct.device_attribute*, i8*, i64)* @store_auto_pwm }, i8 5, i8 2 }, %struct.sensor_device_attribute_2 { %struct.device_attribute { %struct.attribute { i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.193, i32 0, i32 0), i16 420 }, i64 (%struct.device*, %struct.device_attribute*, i8*)* @show_auto_temp, i64 (%struct.device*, %struct.device_attribute*, i8*, i64)* @store_auto_temp }, i8 5, i8 2 }, %struct.sensor_device_attribute_2 { %struct.device_attribute { %struct.attribute { i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.194, i32 0, i32 0), i16 420 }, i64 (%struct.device*, %struct.device_attribute*, i8*)* @show_auto_pwm, i64 (%struct.device*, %struct.device_attribute*, i8*, i64)* @store_auto_pwm }, i8 6, i8 2 }, %struct.sensor_device_attribute_2 { %struct.device_attribute { %struct.attribute { i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.195, i32 0, i32 0), i16 420 }, i64 (%struct.device*, %struct.device_attribute*, i8*)* @show_auto_temp, i64 (%struct.device*, %struct.device_attribute*, i8*, i64)* @store_auto_temp }, i8 6, i8 2 }, %struct.sensor_device_attribute_2 { %struct.device_attribute { %struct.attribute { i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.196, i32 0, i32 0), i16 420 }, i64 (%struct.device*, %struct.device_attribute*, i8*)* @show_auto_pwm, i64 (%struct.device*, %struct.device_attribute*, i8*, i64)* @store_auto_pwm }, i8 0, i8 3 }, %struct.sensor_device_attribute_2 { %struct.device_attribute { %struct.attribute { i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.197, i32 0, i32 0), i16 420 }, i64 (%struct.device*, %struct.device_attribute*, i8*)* @show_auto_temp, i64 (%struct.device*, %struct.device_attribute*, i8*, i64)* @store_auto_temp }, i8 0, i8 3 }, %struct.sensor_device_attribute_2 { %struct.device_attribute { %struct.attribute { i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.198, i32 0, i32 0), i16 420 }, i64 (%struct.device*, %struct.device_attribute*, i8*)* @show_auto_pwm, i64 (%struct.device*, %struct.device_attribute*, i8*, i64)* @store_auto_pwm }, i8 1, i8 3 }, %struct.sensor_device_attribute_2 { %struct.device_attribute { %struct.attribute { i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.199, i32 0, i32 0), i16 420 }, i64 (%struct.device*, %struct.device_attribute*, i8*)* @show_auto_temp, i64 (%struct.device*, %struct.device_attribute*, i8*, i64)* @store_auto_temp }, i8 1, i8 3 }, %struct.sensor_device_attribute_2 { %struct.device_attribute { %struct.attribute { i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.200, i32 0, i32 0), i16 420 }, i64 (%struct.device*, %struct.device_attribute*, i8*)* @show_auto_pwm, i64 (%struct.device*, %struct.device_attribute*, i8*, i64)* @store_auto_pwm }, i8 2, i8 3 }, %struct.sensor_device_attribute_2 { %struct.device_attribute { %struct.attribute { i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.201, i32 0, i32 0), i16 420 }, i64 (%struct.device*, %struct.device_attribute*, i8*)* @show_auto_temp, i64 (%struct.device*, %struct.device_attribute*, i8*, i64)* @store_auto_temp }, i8 2, i8 3 }, %struct.sensor_device_attribute_2 { %struct.device_attribute { %struct.attribute { i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.202, i32 0, i32 0), i16 420 }, i64 (%struct.device*, %struct.device_attribute*, i8*)* @show_auto_pwm, i64 (%struct.device*, %struct.device_attribute*, i8*, i64)* @store_auto_pwm }, i8 3, i8 3 }, %struct.sensor_device_attribute_2 { %struct.device_attribute { %struct.attribute { i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.203, i32 0, i32 0), i16 420 }, i64 (%struct.device*, %struct.device_attribute*, i8*)* @show_auto_temp, i64 (%struct.device*, %struct.device_attribute*, i8*, i64)* @store_auto_temp }, i8 3, i8 3 }, %struct.sensor_device_attribute_2 { %struct.device_attribute { %struct.attribute { i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.204, i32 0, i32 0), i16 420 }, i64 (%struct.device*, %struct.device_attribute*, i8*)* @show_auto_pwm, i64 (%struct.device*, %struct.device_attribute*, i8*, i64)* @store_auto_pwm }, i8 4, i8 3 }, %struct.sensor_device_attribute_2 { %struct.device_attribute { %struct.attribute { i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.205, i32 0, i32 0), i16 420 }, i64 (%struct.device*, %struct.device_attribute*, i8*)* @show_auto_temp, i64 (%struct.device*, %struct.device_attribute*, i8*, i64)* @store_auto_temp }, i8 4, i8 3 }, %struct.sensor_device_attribute_2 { %struct.device_attribute { %struct.attribute { i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.206, i32 0, i32 0), i16 420 }, i64 (%struct.device*, %struct.device_attribute*, i8*)* @show_auto_pwm, i64 (%struct.device*, %struct.device_attribute*, i8*, i64)* @store_auto_pwm }, i8 5, i8 3 }, %struct.sensor_device_attribute_2 { %struct.device_attribute { %struct.attribute { i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.207, i32 0, i32 0), i16 420 }, i64 (%struct.device*, %struct.device_attribute*, i8*)* @show_auto_temp, i64 (%struct.device*, %struct.device_attribute*, i8*, i64)* @store_auto_temp }, i8 5, i8 3 }, %struct.sensor_device_attribute_2 { %struct.device_attribute { %struct.attribute { i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.208, i32 0, i32 0), i16 420 }, i64 (%struct.device*, %struct.device_attribute*, i8*)* @show_auto_pwm, i64 (%struct.device*, %struct.device_attribute*, i8*, i64)* @store_auto_pwm }, i8 6, i8 3 }, %struct.sensor_device_attribute_2 { %struct.device_attribute { %struct.attribute { i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.209, i32 0, i32 0), i16 420 }, i64 (%struct.device*, %struct.device_attribute*, i8*)* @show_auto_temp, i64 (%struct.device*, %struct.device_attribute*, i8*, i64)* @store_auto_temp }, i8 6, i8 3 }, %struct.sensor_device_attribute_2 { %struct.device_attribute { %struct.attribute { i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.210, i32 0, i32 0), i16 420 }, i64 (%struct.device*, %struct.device_attribute*, i8*)* @show_auto_pwm, i64 (%struct.device*, %struct.device_attribute*, i8*, i64)* @store_auto_pwm }, i8 0, i8 4 }, %struct.sensor_device_attribute_2 { %struct.device_attribute { %struct.attribute { i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.211, i32 0, i32 0), i16 420 }, i64 (%struct.device*, %struct.device_attribute*, i8*)* @show_auto_temp, i64 (%struct.device*, %struct.device_attribute*, i8*, i64)* @store_auto_temp }, i8 0, i8 4 }, %struct.sensor_device_attribute_2 { %struct.device_attribute { %struct.attribute { i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.212, i32 0, i32 0), i16 420 }, i64 (%struct.device*, %struct.device_attribute*, i8*)* @show_auto_pwm, i64 (%struct.device*, %struct.device_attribute*, i8*, i64)* @store_auto_pwm }, i8 1, i8 4 }, %struct.sensor_device_attribute_2 { %struct.device_attribute { %struct.attribute { i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.213, i32 0, i32 0), i16 420 }, i64 (%struct.device*, %struct.device_attribute*, i8*)* @show_auto_temp, i64 (%struct.device*, %struct.device_attribute*, i8*, i64)* @store_auto_temp }, i8 1, i8 4 }, %struct.sensor_device_attribute_2 { %struct.device_attribute { %struct.attribute { i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.214, i32 0, i32 0), i16 420 }, i64 (%struct.device*, %struct.device_attribute*, i8*)* @show_auto_pwm, i64 (%struct.device*, %struct.device_attribute*, i8*, i64)* @store_auto_pwm }, i8 2, i8 4 }, %struct.sensor_device_attribute_2 { %struct.device_attribute { %struct.attribute { i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.215, i32 0, i32 0), i16 420 }, i64 (%struct.device*, %struct.device_attribute*, i8*)* @show_auto_temp, i64 (%struct.device*, %struct.device_attribute*, i8*, i64)* @store_auto_temp }, i8 2, i8 4 }, %struct.sensor_device_attribute_2 { %struct.device_attribute { %struct.attribute { i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.216, i32 0, i32 0), i16 420 }, i64 (%struct.device*, %struct.device_attribute*, i8*)* @show_auto_pwm, i64 (%struct.device*, %struct.device_attribute*, i8*, i64)* @store_auto_pwm }, i8 3, i8 4 }, %struct.sensor_device_attribute_2 { %struct.device_attribute { %struct.attribute { i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.217, i32 0, i32 0), i16 420 }, i64 (%struct.device*, %struct.device_attribute*, i8*)* @show_auto_temp, i64 (%struct.device*, %struct.device_attribute*, i8*, i64)* @store_auto_temp }, i8 3, i8 4 }, %struct.sensor_device_attribute_2 { %struct.device_attribute { %struct.attribute { i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.218, i32 0, i32 0), i16 420 }, i64 (%struct.device*, %struct.device_attribute*, i8*)* @show_auto_pwm, i64 (%struct.device*, %struct.device_attribute*, i8*, i64)* @store_auto_pwm }, i8 4, i8 4 }, %struct.sensor_device_attribute_2 { %struct.device_attribute { %struct.attribute { i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.219, i32 0, i32 0), i16 420 }, i64 (%struct.device*, %struct.device_attribute*, i8*)* @show_auto_temp, i64 (%struct.device*, %struct.device_attribute*, i8*, i64)* @store_auto_temp }, i8 4, i8 4 }, %struct.sensor_device_attribute_2 { %struct.device_attribute { %struct.attribute { i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.220, i32 0, i32 0), i16 420 }, i64 (%struct.device*, %struct.device_attribute*, i8*)* @show_auto_pwm, i64 (%struct.device*, %struct.device_attribute*, i8*, i64)* @store_auto_pwm }, i8 5, i8 4 }, %struct.sensor_device_attribute_2 { %struct.device_attribute { %struct.attribute { i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.221, i32 0, i32 0), i16 420 }, i64 (%struct.device*, %struct.device_attribute*, i8*)* @show_auto_temp, i64 (%struct.device*, %struct.device_attribute*, i8*, i64)* @store_auto_temp }, i8 5, i8 4 }, %struct.sensor_device_attribute_2 { %struct.device_attribute { %struct.attribute { i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.222, i32 0, i32 0), i16 420 }, i64 (%struct.device*, %struct.device_attribute*, i8*)* @show_auto_pwm, i64 (%struct.device*, %struct.device_attribute*, i8*, i64)* @store_auto_pwm }, i8 6, i8 4 }, %struct.sensor_device_attribute_2 { %struct.device_attribute { %struct.attribute { i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.223, i32 0, i32 0), i16 420 }, i64 (%struct.device*, %struct.device_attribute*, i8*)* @show_auto_temp, i64 (%struct.device*, %struct.device_attribute*, i8*, i64)* @store_auto_temp }, i8 6, i8 4 }], align 16
@nct6775_group_in = internal constant [15 x %struct.attribute_group] [%struct.attribute_group { i8* null, i16 (%struct.kobject*, %struct.attribute*, i32)* null, %struct.attribute** getelementptr inbounds ([15 x [5 x %struct.attribute*]], [15 x [5 x %struct.attribute*]]* @nct6775_attributes_in, i32 0, i32 0, i32 0) }, %struct.attribute_group { i8* null, i16 (%struct.kobject*, %struct.attribute*, i32)* null, %struct.attribute** bitcast (i8* getelementptr (i8, i8* bitcast ([15 x [5 x %struct.attribute*]]* @nct6775_attributes_in to i8*), i64 40) to %struct.attribute**) }, %struct.attribute_group { i8* null, i16 (%struct.kobject*, %struct.attribute*, i32)* null, %struct.attribute** bitcast (i8* getelementptr (i8, i8* bitcast ([15 x [5 x %struct.attribute*]]* @nct6775_attributes_in to i8*), i64 80) to %struct.attribute**) }, %struct.attribute_group { i8* null, i16 (%struct.kobject*, %struct.attribute*, i32)* null, %struct.attribute** bitcast (i8* getelementptr (i8, i8* bitcast ([15 x [5 x %struct.attribute*]]* @nct6775_attributes_in to i8*), i64 120) to %struct.attribute**) }, %struct.attribute_group { i8* null, i16 (%struct.kobject*, %struct.attribute*, i32)* null, %struct.attribute** bitcast (i8* getelementptr (i8, i8* bitcast ([15 x [5 x %struct.attribute*]]* @nct6775_attributes_in to i8*), i64 160) to %struct.attribute**) }, %struct.attribute_group { i8* null, i16 (%struct.kobject*, %struct.attribute*, i32)* null, %struct.attribute** bitcast (i8* getelementptr (i8, i8* bitcast ([15 x [5 x %struct.attribute*]]* @nct6775_attributes_in to i8*), i64 200) to %struct.attribute**) }, %struct.attribute_group { i8* null, i16 (%struct.kobject*, %struct.attribute*, i32)* null, %struct.attribute** bitcast (i8* getelementptr (i8, i8* bitcast ([15 x [5 x %struct.attribute*]]* @nct6775_attributes_in to i8*), i64 240) to %struct.attribute**) }, %struct.attribute_group { i8* null, i16 (%struct.kobject*, %struct.attribute*, i32)* null, %struct.attribute** bitcast (i8* getelementptr (i8, i8* bitcast ([15 x [5 x %struct.attribute*]]* @nct6775_attributes_in to i8*), i64 280) to %struct.attribute**) }, %struct.attribute_group { i8* null, i16 (%struct.kobject*, %struct.attribute*, i32)* null, %struct.attribute** bitcast (i8* getelementptr (i8, i8* bitcast ([15 x [5 x %struct.attribute*]]* @nct6775_attributes_in to i8*), i64 320) to %struct.attribute**) }, %struct.attribute_group { i8* null, i16 (%struct.kobject*, %struct.attribute*, i32)* null, %struct.attribute** bitcast (i8* getelementptr (i8, i8* bitcast ([15 x [5 x %struct.attribute*]]* @nct6775_attributes_in to i8*), i64 360) to %struct.attribute**) }, %struct.attribute_group { i8* null, i16 (%struct.kobject*, %struct.attribute*, i32)* null, %struct.attribute** bitcast (i8* getelementptr (i8, i8* bitcast ([15 x [5 x %struct.attribute*]]* @nct6775_attributes_in to i8*), i64 400) to %struct.attribute**) }, %struct.attribute_group { i8* null, i16 (%struct.kobject*, %struct.attribute*, i32)* null, %struct.attribute** bitcast (i8* getelementptr (i8, i8* bitcast ([15 x [5 x %struct.attribute*]]* @nct6775_attributes_in to i8*), i64 440) to %struct.attribute**) }, %struct.attribute_group { i8* null, i16 (%struct.kobject*, %struct.attribute*, i32)* null, %struct.attribute** bitcast (i8* getelementptr (i8, i8* bitcast ([15 x [5 x %struct.attribute*]]* @nct6775_attributes_in to i8*), i64 480) to %struct.attribute**) }, %struct.attribute_group { i8* null, i16 (%struct.kobject*, %struct.attribute*, i32)* null, %struct.attribute** bitcast (i8* getelementptr (i8, i8* bitcast ([15 x [5 x %struct.attribute*]]* @nct6775_attributes_in to i8*), i64 520) to %struct.attribute**) }, %struct.attribute_group { i8* null, i16 (%struct.kobject*, %struct.attribute*, i32)* null, %struct.attribute** bitcast (i8* getelementptr (i8, i8* bitcast ([15 x [5 x %struct.attribute*]]* @nct6775_attributes_in to i8*), i64 560) to %struct.attribute**) }], align 16
@sda_fan_input = internal global [5 x %struct.sensor_device_attribute] [%struct.sensor_device_attribute { %struct.device_attribute { %struct.attribute { i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.286, i32 0, i32 0), i16 292 }, i64 (%struct.device*, %struct.device_attribute*, i8*)* @show_fan, i64 (%struct.device*, %struct.device_attribute*, i8*, i64)* null }, i32 0 }, %struct.sensor_device_attribute { %struct.device_attribute { %struct.attribute { i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.287, i32 0, i32 0), i16 292 }, i64 (%struct.device*, %struct.device_attribute*, i8*)* @show_fan, i64 (%struct.device*, %struct.device_attribute*, i8*, i64)* null }, i32 1 }, %struct.sensor_device_attribute { %struct.device_attribute { %struct.attribute { i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.288, i32 0, i32 0), i16 292 }, i64 (%struct.device*, %struct.device_attribute*, i8*)* @show_fan, i64 (%struct.device*, %struct.device_attribute*, i8*, i64)* null }, i32 2 }, %struct.sensor_device_attribute { %struct.device_attribute { %struct.attribute { i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.289, i32 0, i32 0), i16 292 }, i64 (%struct.device*, %struct.device_attribute*, i8*)* @show_fan, i64 (%struct.device*, %struct.device_attribute*, i8*, i64)* null }, i32 3 }, %struct.sensor_device_attribute { %struct.device_attribute { %struct.attribute { i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.290, i32 0, i32 0), i16 292 }, i64 (%struct.device*, %struct.device_attribute*, i8*)* @show_fan, i64 (%struct.device*, %struct.device_attribute*, i8*, i64)* null }, i32 4 }], align 16
@sda_fan_alarm = internal global [5 x %struct.sensor_device_attribute] [%struct.sensor_device_attribute { %struct.device_attribute { %struct.attribute { i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.291, i32 0, i32 0), i16 292 }, i64 (%struct.device*, %struct.device_attribute*, i8*)* @show_alarm, i64 (%struct.device*, %struct.device_attribute*, i8*, i64)* null }, i32 16 }, %struct.sensor_device_attribute { %struct.device_attribute { %struct.attribute { i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.292, i32 0, i32 0), i16 292 }, i64 (%struct.device*, %struct.device_attribute*, i8*)* @show_alarm, i64 (%struct.device*, %struct.device_attribute*, i8*, i64)* null }, i32 17 }, %struct.sensor_device_attribute { %struct.device_attribute { %struct.attribute { i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.293, i32 0, i32 0), i16 292 }, i64 (%struct.device*, %struct.device_attribute*, i8*)* @show_alarm, i64 (%struct.device*, %struct.device_attribute*, i8*, i64)* null }, i32 18 }, %struct.sensor_device_attribute { %struct.device_attribute { %struct.attribute { i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.294, i32 0, i32 0), i16 292 }, i64 (%struct.device*, %struct.device_attribute*, i8*)* @show_alarm, i64 (%struct.device*, %struct.device_attribute*, i8*, i64)* null }, i32 19 }, %struct.sensor_device_attribute { %struct.device_attribute { %struct.attribute { i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.295, i32 0, i32 0), i16 292 }, i64 (%struct.device*, %struct.device_attribute*, i8*)* @show_alarm, i64 (%struct.device*, %struct.device_attribute*, i8*, i64)* null }, i32 20 }], align 16
@sda_fan_div = internal global [5 x %struct.sensor_device_attribute] [%struct.sensor_device_attribute { %struct.device_attribute { %struct.attribute { i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.296, i32 0, i32 0), i16 292 }, i64 (%struct.device*, %struct.device_attribute*, i8*)* @show_fan_div, i64 (%struct.device*, %struct.device_attribute*, i8*, i64)* null }, i32 0 }, %struct.sensor_device_attribute { %struct.device_attribute { %struct.attribute { i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.297, i32 0, i32 0), i16 292 }, i64 (%struct.device*, %struct.device_attribute*, i8*)* @show_fan_div, i64 (%struct.device*, %struct.device_attribute*, i8*, i64)* null }, i32 1 }, %struct.sensor_device_attribute { %struct.device_attribute { %struct.attribute { i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.298, i32 0, i32 0), i16 292 }, i64 (%struct.device*, %struct.device_attribute*, i8*)* @show_fan_div, i64 (%struct.device*, %struct.device_attribute*, i8*, i64)* null }, i32 2 }, %struct.sensor_device_attribute { %struct.device_attribute { %struct.attribute { i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.299, i32 0, i32 0), i16 292 }, i64 (%struct.device*, %struct.device_attribute*, i8*)* @show_fan_div, i64 (%struct.device*, %struct.device_attribute*, i8*, i64)* null }, i32 3 }, %struct.sensor_device_attribute { %struct.device_attribute { %struct.attribute { i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.300, i32 0, i32 0), i16 292 }, i64 (%struct.device*, %struct.device_attribute*, i8*)* @show_fan_div, i64 (%struct.device*, %struct.device_attribute*, i8*, i64)* null }, i32 4 }], align 16
@sda_fan_min = internal global [5 x %struct.sensor_device_attribute] [%struct.sensor_device_attribute { %struct.device_attribute { %struct.attribute { i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.301, i32 0, i32 0), i16 420 }, i64 (%struct.device*, %struct.device_attribute*, i8*)* @show_fan_min, i64 (%struct.device*, %struct.device_attribute*, i8*, i64)* @store_fan_min }, i32 0 }, %struct.sensor_device_attribute { %struct.device_attribute { %struct.attribute { i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.302, i32 0, i32 0), i16 420 }, i64 (%struct.device*, %struct.device_attribute*, i8*)* @show_fan_min, i64 (%struct.device*, %struct.device_attribute*, i8*, i64)* @store_fan_min }, i32 1 }, %struct.sensor_device_attribute { %struct.device_attribute { %struct.attribute { i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.303, i32 0, i32 0), i16 420 }, i64 (%struct.device*, %struct.device_attribute*, i8*)* @show_fan_min, i64 (%struct.device*, %struct.device_attribute*, i8*, i64)* @store_fan_min }, i32 2 }, %struct.sensor_device_attribute { %struct.device_attribute { %struct.attribute { i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.304, i32 0, i32 0), i16 420 }, i64 (%struct.device*, %struct.device_attribute*, i8*)* @show_fan_min, i64 (%struct.device*, %struct.device_attribute*, i8*, i64)* @store_fan_min }, i32 3 }, %struct.sensor_device_attribute { %struct.device_attribute { %struct.attribute { i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.305, i32 0, i32 0), i16 420 }, i64 (%struct.device*, %struct.device_attribute*, i8*)* @show_fan_min, i64 (%struct.device*, %struct.device_attribute*, i8*, i64)* @store_fan_min }, i32 4 }], align 16
@sda_fan_pulses = internal global [5 x %struct.sensor_device_attribute] [%struct.sensor_device_attribute { %struct.device_attribute { %struct.attribute { i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.309, i32 0, i32 0), i16 420 }, i64 (%struct.device*, %struct.device_attribute*, i8*)* @show_fan_pulses, i64 (%struct.device*, %struct.device_attribute*, i8*, i64)* @store_fan_pulses }, i32 0 }, %struct.sensor_device_attribute { %struct.device_attribute { %struct.attribute { i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.310, i32 0, i32 0), i16 420 }, i64 (%struct.device*, %struct.device_attribute*, i8*)* @show_fan_pulses, i64 (%struct.device*, %struct.device_attribute*, i8*, i64)* @store_fan_pulses }, i32 1 }, %struct.sensor_device_attribute { %struct.device_attribute { %struct.attribute { i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.311, i32 0, i32 0), i16 420 }, i64 (%struct.device*, %struct.device_attribute*, i8*)* @show_fan_pulses, i64 (%struct.device*, %struct.device_attribute*, i8*, i64)* @store_fan_pulses }, i32 2 }, %struct.sensor_device_attribute { %struct.device_attribute { %struct.attribute { i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.312, i32 0, i32 0), i16 420 }, i64 (%struct.device*, %struct.device_attribute*, i8*)* @show_fan_pulses, i64 (%struct.device*, %struct.device_attribute*, i8*, i64)* @store_fan_pulses }, i32 3 }, %struct.sensor_device_attribute { %struct.device_attribute { %struct.attribute { i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.313, i32 0, i32 0), i16 420 }, i64 (%struct.device*, %struct.device_attribute*, i8*)* @show_fan_pulses, i64 (%struct.device*, %struct.device_attribute*, i8*, i64)* @store_fan_pulses }, i32 4 }], align 16
@sda_temp_input = internal global [10 x %struct.sensor_device_attribute_2] [%struct.sensor_device_attribute_2 { %struct.device_attribute { %struct.attribute { i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.314, i32 0, i32 0), i16 292 }, i64 (%struct.device*, %struct.device_attribute*, i8*)* @show_temp, i64 (%struct.device*, %struct.device_attribute*, i8*, i64)* null }, i8 0, i8 0 }, %struct.sensor_device_attribute_2 { %struct.device_attribute { %struct.attribute { i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.315, i32 0, i32 0), i16 292 }, i64 (%struct.device*, %struct.device_attribute*, i8*)* @show_temp, i64 (%struct.device*, %struct.device_attribute*, i8*, i64)* null }, i8 0, i8 1 }, %struct.sensor_device_attribute_2 { %struct.device_attribute { %struct.attribute { i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.316, i32 0, i32 0), i16 292 }, i64 (%struct.device*, %struct.device_attribute*, i8*)* @show_temp, i64 (%struct.device*, %struct.device_attribute*, i8*, i64)* null }, i8 0, i8 2 }, %struct.sensor_device_attribute_2 { %struct.device_attribute { %struct.attribute { i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.317, i32 0, i32 0), i16 292 }, i64 (%struct.device*, %struct.device_attribute*, i8*)* @show_temp, i64 (%struct.device*, %struct.device_attribute*, i8*, i64)* null }, i8 0, i8 3 }, %struct.sensor_device_attribute_2 { %struct.device_attribute { %struct.attribute { i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.318, i32 0, i32 0), i16 292 }, i64 (%struct.device*, %struct.device_attribute*, i8*)* @show_temp, i64 (%struct.device*, %struct.device_attribute*, i8*, i64)* null }, i8 0, i8 4 }, %struct.sensor_device_attribute_2 { %struct.device_attribute { %struct.attribute { i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.319, i32 0, i32 0), i16 292 }, i64 (%struct.device*, %struct.device_attribute*, i8*)* @show_temp, i64 (%struct.device*, %struct.device_attribute*, i8*, i64)* null }, i8 0, i8 5 }, %struct.sensor_device_attribute_2 { %struct.device_attribute { %struct.attribute { i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.320, i32 0, i32 0), i16 292 }, i64 (%struct.device*, %struct.device_attribute*, i8*)* @show_temp, i64 (%struct.device*, %struct.device_attribute*, i8*, i64)* null }, i8 0, i8 6 }, %struct.sensor_device_attribute_2 { %struct.device_attribute { %struct.attribute { i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.321, i32 0, i32 0), i16 292 }, i64 (%struct.device*, %struct.device_attribute*, i8*)* @show_temp, i64 (%struct.device*, %struct.device_attribute*, i8*, i64)* null }, i8 0, i8 7 }, %struct.sensor_device_attribute_2 { %struct.device_attribute { %struct.attribute { i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.322, i32 0, i32 0), i16 292 }, i64 (%struct.device*, %struct.device_attribute*, i8*)* @show_temp, i64 (%struct.device*, %struct.device_attribute*, i8*, i64)* null }, i8 0, i8 8 }, %struct.sensor_device_attribute_2 { %struct.device_attribute { %struct.attribute { i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.323, i32 0, i32 0), i16 292 }, i64 (%struct.device*, %struct.device_attribute*, i8*)* @show_temp, i64 (%struct.device*, %struct.device_attribute*, i8*, i64)* null }, i8 0, i8 9 }], align 16
@sda_temp_label = internal global [10 x %struct.sensor_device_attribute] [%struct.sensor_device_attribute { %struct.device_attribute { %struct.attribute { i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.324, i32 0, i32 0), i16 292 }, i64 (%struct.device*, %struct.device_attribute*, i8*)* @show_temp_label, i64 (%struct.device*, %struct.device_attribute*, i8*, i64)* null }, i32 0 }, %struct.sensor_device_attribute { %struct.device_attribute { %struct.attribute { i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.325, i32 0, i32 0), i16 292 }, i64 (%struct.device*, %struct.device_attribute*, i8*)* @show_temp_label, i64 (%struct.device*, %struct.device_attribute*, i8*, i64)* null }, i32 1 }, %struct.sensor_device_attribute { %struct.device_attribute { %struct.attribute { i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.326, i32 0, i32 0), i16 292 }, i64 (%struct.device*, %struct.device_attribute*, i8*)* @show_temp_label, i64 (%struct.device*, %struct.device_attribute*, i8*, i64)* null }, i32 2 }, %struct.sensor_device_attribute { %struct.device_attribute { %struct.attribute { i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.327, i32 0, i32 0), i16 292 }, i64 (%struct.device*, %struct.device_attribute*, i8*)* @show_temp_label, i64 (%struct.device*, %struct.device_attribute*, i8*, i64)* null }, i32 3 }, %struct.sensor_device_attribute { %struct.device_attribute { %struct.attribute { i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.328, i32 0, i32 0), i16 292 }, i64 (%struct.device*, %struct.device_attribute*, i8*)* @show_temp_label, i64 (%struct.device*, %struct.device_attribute*, i8*, i64)* null }, i32 4 }, %struct.sensor_device_attribute { %struct.device_attribute { %struct.attribute { i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.329, i32 0, i32 0), i16 292 }, i64 (%struct.device*, %struct.device_attribute*, i8*)* @show_temp_label, i64 (%struct.device*, %struct.device_attribute*, i8*, i64)* null }, i32 5 }, %struct.sensor_device_attribute { %struct.device_attribute { %struct.attribute { i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.330, i32 0, i32 0), i16 292 }, i64 (%struct.device*, %struct.device_attribute*, i8*)* @show_temp_label, i64 (%struct.device*, %struct.device_attribute*, i8*, i64)* null }, i32 6 }, %struct.sensor_device_attribute { %struct.device_attribute { %struct.attribute { i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.331, i32 0, i32 0), i16 292 }, i64 (%struct.device*, %struct.device_attribute*, i8*)* @show_temp_label, i64 (%struct.device*, %struct.device_attribute*, i8*, i64)* null }, i32 7 }, %struct.sensor_device_attribute { %struct.device_attribute { %struct.attribute { i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.332, i32 0, i32 0), i16 292 }, i64 (%struct.device*, %struct.device_attribute*, i8*)* @show_temp_label, i64 (%struct.device*, %struct.device_attribute*, i8*, i64)* null }, i32 8 }, %struct.sensor_device_attribute { %struct.device_attribute { %struct.attribute { i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.333, i32 0, i32 0), i16 292 }, i64 (%struct.device*, %struct.device_attribute*, i8*)* @show_temp_label, i64 (%struct.device*, %struct.device_attribute*, i8*, i64)* null }, i32 9 }], align 16
@sda_temp_max = internal global [10 x %struct.sensor_device_attribute_2] [%struct.sensor_device_attribute_2 { %struct.device_attribute { %struct.attribute { i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.335, i32 0, i32 0), i16 420 }, i64 (%struct.device*, %struct.device_attribute*, i8*)* @show_temp, i64 (%struct.device*, %struct.device_attribute*, i8*, i64)* @store_temp }, i8 1, i8 0 }, %struct.sensor_device_attribute_2 { %struct.device_attribute { %struct.attribute { i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.336, i32 0, i32 0), i16 420 }, i64 (%struct.device*, %struct.device_attribute*, i8*)* @show_temp, i64 (%struct.device*, %struct.device_attribute*, i8*, i64)* @store_temp }, i8 1, i8 1 }, %struct.sensor_device_attribute_2 { %struct.device_attribute { %struct.attribute { i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.337, i32 0, i32 0), i16 420 }, i64 (%struct.device*, %struct.device_attribute*, i8*)* @show_temp, i64 (%struct.device*, %struct.device_attribute*, i8*, i64)* @store_temp }, i8 1, i8 2 }, %struct.sensor_device_attribute_2 { %struct.device_attribute { %struct.attribute { i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.338, i32 0, i32 0), i16 420 }, i64 (%struct.device*, %struct.device_attribute*, i8*)* @show_temp, i64 (%struct.device*, %struct.device_attribute*, i8*, i64)* @store_temp }, i8 1, i8 3 }, %struct.sensor_device_attribute_2 { %struct.device_attribute { %struct.attribute { i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.339, i32 0, i32 0), i16 420 }, i64 (%struct.device*, %struct.device_attribute*, i8*)* @show_temp, i64 (%struct.device*, %struct.device_attribute*, i8*, i64)* @store_temp }, i8 1, i8 4 }, %struct.sensor_device_attribute_2 { %struct.device_attribute { %struct.attribute { i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.340, i32 0, i32 0), i16 420 }, i64 (%struct.device*, %struct.device_attribute*, i8*)* @show_temp, i64 (%struct.device*, %struct.device_attribute*, i8*, i64)* @store_temp }, i8 1, i8 5 }, %struct.sensor_device_attribute_2 { %struct.device_attribute { %struct.attribute { i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.341, i32 0, i32 0), i16 420 }, i64 (%struct.device*, %struct.device_attribute*, i8*)* @show_temp, i64 (%struct.device*, %struct.device_attribute*, i8*, i64)* @store_temp }, i8 1, i8 6 }, %struct.sensor_device_attribute_2 { %struct.device_attribute { %struct.attribute { i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.342, i32 0, i32 0), i16 420 }, i64 (%struct.device*, %struct.device_attribute*, i8*)* @show_temp, i64 (%struct.device*, %struct.device_attribute*, i8*, i64)* @store_temp }, i8 1, i8 7 }, %struct.sensor_device_attribute_2 { %struct.device_attribute { %struct.attribute { i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.343, i32 0, i32 0), i16 420 }, i64 (%struct.device*, %struct.device_attribute*, i8*)* @show_temp, i64 (%struct.device*, %struct.device_attribute*, i8*, i64)* @store_temp }, i8 1, i8 8 }, %struct.sensor_device_attribute_2 { %struct.device_attribute { %struct.attribute { i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.344, i32 0, i32 0), i16 420 }, i64 (%struct.device*, %struct.device_attribute*, i8*)* @show_temp, i64 (%struct.device*, %struct.device_attribute*, i8*, i64)* @store_temp }, i8 1, i8 9 }], align 16
@sda_temp_max_hyst = internal global [10 x %struct.sensor_device_attribute_2] [%struct.sensor_device_attribute_2 { %struct.device_attribute { %struct.attribute { i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.345, i32 0, i32 0), i16 420 }, i64 (%struct.device*, %struct.device_attribute*, i8*)* @show_temp, i64 (%struct.device*, %struct.device_attribute*, i8*, i64)* @store_temp }, i8 2, i8 0 }, %struct.sensor_device_attribute_2 { %struct.device_attribute { %struct.attribute { i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.346, i32 0, i32 0), i16 420 }, i64 (%struct.device*, %struct.device_attribute*, i8*)* @show_temp, i64 (%struct.device*, %struct.device_attribute*, i8*, i64)* @store_temp }, i8 2, i8 1 }, %struct.sensor_device_attribute_2 { %struct.device_attribute { %struct.attribute { i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.347, i32 0, i32 0), i16 420 }, i64 (%struct.device*, %struct.device_attribute*, i8*)* @show_temp, i64 (%struct.device*, %struct.device_attribute*, i8*, i64)* @store_temp }, i8 2, i8 2 }, %struct.sensor_device_attribute_2 { %struct.device_attribute { %struct.attribute { i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.348, i32 0, i32 0), i16 420 }, i64 (%struct.device*, %struct.device_attribute*, i8*)* @show_temp, i64 (%struct.device*, %struct.device_attribute*, i8*, i64)* @store_temp }, i8 2, i8 3 }, %struct.sensor_device_attribute_2 { %struct.device_attribute { %struct.attribute { i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.349, i32 0, i32 0), i16 420 }, i64 (%struct.device*, %struct.device_attribute*, i8*)* @show_temp, i64 (%struct.device*, %struct.device_attribute*, i8*, i64)* @store_temp }, i8 2, i8 4 }, %struct.sensor_device_attribute_2 { %struct.device_attribute { %struct.attribute { i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.350, i32 0, i32 0), i16 420 }, i64 (%struct.device*, %struct.device_attribute*, i8*)* @show_temp, i64 (%struct.device*, %struct.device_attribute*, i8*, i64)* @store_temp }, i8 2, i8 5 }, %struct.sensor_device_attribute_2 { %struct.device_attribute { %struct.attribute { i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.351, i32 0, i32 0), i16 420 }, i64 (%struct.device*, %struct.device_attribute*, i8*)* @show_temp, i64 (%struct.device*, %struct.device_attribute*, i8*, i64)* @store_temp }, i8 2, i8 6 }, %struct.sensor_device_attribute_2 { %struct.device_attribute { %struct.attribute { i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.352, i32 0, i32 0), i16 420 }, i64 (%struct.device*, %struct.device_attribute*, i8*)* @show_temp, i64 (%struct.device*, %struct.device_attribute*, i8*, i64)* @store_temp }, i8 2, i8 7 }, %struct.sensor_device_attribute_2 { %struct.device_attribute { %struct.attribute { i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.353, i32 0, i32 0), i16 420 }, i64 (%struct.device*, %struct.device_attribute*, i8*)* @show_temp, i64 (%struct.device*, %struct.device_attribute*, i8*, i64)* @store_temp }, i8 2, i8 8 }, %struct.sensor_device_attribute_2 { %struct.device_attribute { %struct.attribute { i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.354, i32 0, i32 0), i16 420 }, i64 (%struct.device*, %struct.device_attribute*, i8*)* @show_temp, i64 (%struct.device*, %struct.device_attribute*, i8*, i64)* @store_temp }, i8 2, i8 9 }], align 16
@sda_temp_crit = internal global [10 x %struct.sensor_device_attribute_2] [%struct.sensor_device_attribute_2 { %struct.device_attribute { %struct.attribute { i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.355, i32 0, i32 0), i16 420 }, i64 (%struct.device*, %struct.device_attribute*, i8*)* @show_temp, i64 (%struct.device*, %struct.device_attribute*, i8*, i64)* @store_temp }, i8 3, i8 0 }, %struct.sensor_device_attribute_2 { %struct.device_attribute { %struct.attribute { i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.356, i32 0, i32 0), i16 420 }, i64 (%struct.device*, %struct.device_attribute*, i8*)* @show_temp, i64 (%struct.device*, %struct.device_attribute*, i8*, i64)* @store_temp }, i8 3, i8 1 }, %struct.sensor_device_attribute_2 { %struct.device_attribute { %struct.attribute { i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.357, i32 0, i32 0), i16 420 }, i64 (%struct.device*, %struct.device_attribute*, i8*)* @show_temp, i64 (%struct.device*, %struct.device_attribute*, i8*, i64)* @store_temp }, i8 3, i8 2 }, %struct.sensor_device_attribute_2 { %struct.device_attribute { %struct.attribute { i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.358, i32 0, i32 0), i16 420 }, i64 (%struct.device*, %struct.device_attribute*, i8*)* @show_temp, i64 (%struct.device*, %struct.device_attribute*, i8*, i64)* @store_temp }, i8 3, i8 3 }, %struct.sensor_device_attribute_2 { %struct.device_attribute { %struct.attribute { i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.359, i32 0, i32 0), i16 420 }, i64 (%struct.device*, %struct.device_attribute*, i8*)* @show_temp, i64 (%struct.device*, %struct.device_attribute*, i8*, i64)* @store_temp }, i8 3, i8 4 }, %struct.sensor_device_attribute_2 { %struct.device_attribute { %struct.attribute { i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.360, i32 0, i32 0), i16 420 }, i64 (%struct.device*, %struct.device_attribute*, i8*)* @show_temp, i64 (%struct.device*, %struct.device_attribute*, i8*, i64)* @store_temp }, i8 3, i8 5 }, %struct.sensor_device_attribute_2 { %struct.device_attribute { %struct.attribute { i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.361, i32 0, i32 0), i16 420 }, i64 (%struct.device*, %struct.device_attribute*, i8*)* @show_temp, i64 (%struct.device*, %struct.device_attribute*, i8*, i64)* @store_temp }, i8 3, i8 6 }, %struct.sensor_device_attribute_2 { %struct.device_attribute { %struct.attribute { i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.362, i32 0, i32 0), i16 420 }, i64 (%struct.device*, %struct.device_attribute*, i8*)* @show_temp, i64 (%struct.device*, %struct.device_attribute*, i8*, i64)* @store_temp }, i8 3, i8 7 }, %struct.sensor_device_attribute_2 { %struct.device_attribute { %struct.attribute { i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.363, i32 0, i32 0), i16 420 }, i64 (%struct.device*, %struct.device_attribute*, i8*)* @show_temp, i64 (%struct.device*, %struct.device_attribute*, i8*, i64)* @store_temp }, i8 3, i8 8 }, %struct.sensor_device_attribute_2 { %struct.device_attribute { %struct.attribute { i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.364, i32 0, i32 0), i16 420 }, i64 (%struct.device*, %struct.device_attribute*, i8*)* @show_temp, i64 (%struct.device*, %struct.device_attribute*, i8*, i64)* @store_temp }, i8 3, i8 9 }], align 16
@sda_temp_type = internal global [6 x %struct.sensor_device_attribute] [%struct.sensor_device_attribute { %struct.device_attribute { %struct.attribute { i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.365, i32 0, i32 0), i16 420 }, i64 (%struct.device*, %struct.device_attribute*, i8*)* @show_temp_type, i64 (%struct.device*, %struct.device_attribute*, i8*, i64)* @store_temp_type }, i32 0 }, %struct.sensor_device_attribute { %struct.device_attribute { %struct.attribute { i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.366, i32 0, i32 0), i16 420 }, i64 (%struct.device*, %struct.device_attribute*, i8*)* @show_temp_type, i64 (%struct.device*, %struct.device_attribute*, i8*, i64)* @store_temp_type }, i32 1 }, %struct.sensor_device_attribute { %struct.device_attribute { %struct.attribute { i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.367, i32 0, i32 0), i16 420 }, i64 (%struct.device*, %struct.device_attribute*, i8*)* @show_temp_type, i64 (%struct.device*, %struct.device_attribute*, i8*, i64)* @store_temp_type }, i32 2 }, %struct.sensor_device_attribute { %struct.device_attribute { %struct.attribute { i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.368, i32 0, i32 0), i16 420 }, i64 (%struct.device*, %struct.device_attribute*, i8*)* @show_temp_type, i64 (%struct.device*, %struct.device_attribute*, i8*, i64)* @store_temp_type }, i32 3 }, %struct.sensor_device_attribute { %struct.device_attribute { %struct.attribute { i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.369, i32 0, i32 0), i16 420 }, i64 (%struct.device*, %struct.device_attribute*, i8*)* @show_temp_type, i64 (%struct.device*, %struct.device_attribute*, i8*, i64)* @store_temp_type }, i32 4 }, %struct.sensor_device_attribute { %struct.device_attribute { %struct.attribute { i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.370, i32 0, i32 0), i16 420 }, i64 (%struct.device*, %struct.device_attribute*, i8*)* @show_temp_type, i64 (%struct.device*, %struct.device_attribute*, i8*, i64)* @store_temp_type }, i32 5 }], align 16
@sda_temp_offset = internal global [6 x %struct.sensor_device_attribute] [%struct.sensor_device_attribute { %struct.device_attribute { %struct.attribute { i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.371, i32 0, i32 0), i16 420 }, i64 (%struct.device*, %struct.device_attribute*, i8*)* @show_temp_offset, i64 (%struct.device*, %struct.device_attribute*, i8*, i64)* @store_temp_offset }, i32 0 }, %struct.sensor_device_attribute { %struct.device_attribute { %struct.attribute { i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.372, i32 0, i32 0), i16 420 }, i64 (%struct.device*, %struct.device_attribute*, i8*)* @show_temp_offset, i64 (%struct.device*, %struct.device_attribute*, i8*, i64)* @store_temp_offset }, i32 1 }, %struct.sensor_device_attribute { %struct.device_attribute { %struct.attribute { i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.373, i32 0, i32 0), i16 420 }, i64 (%struct.device*, %struct.device_attribute*, i8*)* @show_temp_offset, i64 (%struct.device*, %struct.device_attribute*, i8*, i64)* @store_temp_offset }, i32 2 }, %struct.sensor_device_attribute { %struct.device_attribute { %struct.attribute { i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.374, i32 0, i32 0), i16 420 }, i64 (%struct.device*, %struct.device_attribute*, i8*)* @show_temp_offset, i64 (%struct.device*, %struct.device_attribute*, i8*, i64)* @store_temp_offset }, i32 3 }, %struct.sensor_device_attribute { %struct.device_attribute { %struct.attribute { i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.375, i32 0, i32 0), i16 420 }, i64 (%struct.device*, %struct.device_attribute*, i8*)* @show_temp_offset, i64 (%struct.device*, %struct.device_attribute*, i8*, i64)* @store_temp_offset }, i32 4 }, %struct.sensor_device_attribute { %struct.device_attribute { %struct.attribute { i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.376, i32 0, i32 0), i16 420 }, i64 (%struct.device*, %struct.device_attribute*, i8*)* @show_temp_offset, i64 (%struct.device*, %struct.device_attribute*, i8*, i64)* @store_temp_offset }, i32 5 }], align 16
@sda_temp_alarm = internal global [6 x %struct.sensor_device_attribute] [%struct.sensor_device_attribute { %struct.device_attribute { %struct.attribute { i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.377, i32 0, i32 0), i16 292 }, i64 (%struct.device*, %struct.device_attribute*, i8*)* @show_alarm, i64 (%struct.device*, %struct.device_attribute*, i8*, i64)* null }, i32 24 }, %struct.sensor_device_attribute { %struct.device_attribute { %struct.attribute { i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.378, i32 0, i32 0), i16 292 }, i64 (%struct.device*, %struct.device_attribute*, i8*)* @show_alarm, i64 (%struct.device*, %struct.device_attribute*, i8*, i64)* null }, i32 25 }, %struct.sensor_device_attribute { %struct.device_attribute { %struct.attribute { i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.379, i32 0, i32 0), i16 292 }, i64 (%struct.device*, %struct.device_attribute*, i8*)* @show_alarm, i64 (%struct.device*, %struct.device_attribute*, i8*, i64)* null }, i32 26 }, %struct.sensor_device_attribute { %struct.device_attribute { %struct.attribute { i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.380, i32 0, i32 0), i16 292 }, i64 (%struct.device*, %struct.device_attribute*, i8*)* @show_alarm, i64 (%struct.device*, %struct.device_attribute*, i8*, i64)* null }, i32 27 }, %struct.sensor_device_attribute { %struct.device_attribute { %struct.attribute { i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.381, i32 0, i32 0), i16 292 }, i64 (%struct.device*, %struct.device_attribute*, i8*)* @show_alarm, i64 (%struct.device*, %struct.device_attribute*, i8*, i64)* null }, i32 28 }, %struct.sensor_device_attribute { %struct.device_attribute { %struct.attribute { i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.382, i32 0, i32 0), i16 292 }, i64 (%struct.device*, %struct.device_attribute*, i8*)* @show_alarm, i64 (%struct.device*, %struct.device_attribute*, i8*, i64)* null }, i32 29 }], align 16
@sda_caseopen = internal global [2 x %struct.sensor_device_attribute] [%struct.sensor_device_attribute { %struct.device_attribute { %struct.attribute { i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.383, i32 0, i32 0), i16 420 }, i64 (%struct.device*, %struct.device_attribute*, i8*)* @show_alarm, i64 (%struct.device*, %struct.device_attribute*, i8*, i64)* @clear_caseopen }, i32 30 }, %struct.sensor_device_attribute { %struct.device_attribute { %struct.attribute { i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.384, i32 0, i32 0), i16 420 }, i64 (%struct.device*, %struct.device_attribute*, i8*)* @show_alarm, i64 (%struct.device*, %struct.device_attribute*, i8*, i64)* @clear_caseopen }, i32 31 }], align 16
@dev_attr_name = internal global %struct.device_attribute { %struct.attribute { i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.385, i32 0, i32 0), i16 292 }, i64 (%struct.device*, %struct.device_attribute*, i8*)* @show_name, i64 (%struct.device*, %struct.device_attribute*, i8*, i64)* null }, align 8
@.str.4 = private unnamed_addr constant [8 x i8] c"nct6776\00", align 1
@.str.5 = private unnamed_addr constant [8 x i8] c"nct6779\00", align 1
@.str.6 = private unnamed_addr constant [1 x i8] zeroinitializer, align 1
@.str.7 = private unnamed_addr constant [7 x i8] c"SYSTIN\00", align 1
@.str.8 = private unnamed_addr constant [7 x i8] c"CPUTIN\00", align 1
@.str.9 = private unnamed_addr constant [7 x i8] c"AUXTIN\00", align 1
@.str.10 = private unnamed_addr constant [11 x i8] c"AMD SB-TSI\00", align 1
@.str.11 = private unnamed_addr constant [13 x i8] c"PECI Agent 0\00", align 1
@.str.12 = private unnamed_addr constant [13 x i8] c"PECI Agent 1\00", align 1
@.str.13 = private unnamed_addr constant [13 x i8] c"PECI Agent 2\00", align 1
@.str.14 = private unnamed_addr constant [13 x i8] c"PECI Agent 3\00", align 1
@.str.15 = private unnamed_addr constant [13 x i8] c"PECI Agent 4\00", align 1
@.str.16 = private unnamed_addr constant [13 x i8] c"PECI Agent 5\00", align 1
@.str.17 = private unnamed_addr constant [13 x i8] c"PECI Agent 6\00", align 1
@.str.18 = private unnamed_addr constant [13 x i8] c"PECI Agent 7\00", align 1
@.str.19 = private unnamed_addr constant [22 x i8] c"PCH_CHIP_CPU_MAX_TEMP\00", align 1
@.str.20 = private unnamed_addr constant [14 x i8] c"PCH_CHIP_TEMP\00", align 1
@.str.21 = private unnamed_addr constant [13 x i8] c"PCH_CPU_TEMP\00", align 1
@.str.22 = private unnamed_addr constant [13 x i8] c"PCH_MCH_TEMP\00", align 1
@.str.23 = private unnamed_addr constant [14 x i8] c"PCH_DIM0_TEMP\00", align 1
@.str.24 = private unnamed_addr constant [14 x i8] c"PCH_DIM1_TEMP\00", align 1
@.str.25 = private unnamed_addr constant [14 x i8] c"PCH_DIM2_TEMP\00", align 1
@.str.26 = private unnamed_addr constant [14 x i8] c"PCH_DIM3_TEMP\00", align 1
@.str.27 = private unnamed_addr constant [14 x i8] c"SMBUSMASTER 0\00", align 1
@.str.28 = private unnamed_addr constant [14 x i8] c"SMBUSMASTER 1\00", align 1
@.str.29 = private unnamed_addr constant [14 x i8] c"SMBUSMASTER 2\00", align 1
@.str.30 = private unnamed_addr constant [14 x i8] c"SMBUSMASTER 3\00", align 1
@.str.31 = private unnamed_addr constant [14 x i8] c"SMBUSMASTER 4\00", align 1
@.str.32 = private unnamed_addr constant [14 x i8] c"SMBUSMASTER 5\00", align 1
@.str.33 = private unnamed_addr constant [14 x i8] c"SMBUSMASTER 6\00", align 1
@.str.34 = private unnamed_addr constant [14 x i8] c"SMBUSMASTER 7\00", align 1
@.str.35 = private unnamed_addr constant [10 x i8] c"BYTE_TEMP\00", align 1
@.str.36 = private unnamed_addr constant [8 x i8] c"AUXTIN0\00", align 1
@.str.37 = private unnamed_addr constant [8 x i8] c"AUXTIN1\00", align 1
@.str.38 = private unnamed_addr constant [8 x i8] c"AUXTIN2\00", align 1
@.str.39 = private unnamed_addr constant [8 x i8] c"AUXTIN3\00", align 1
@.str.40 = private unnamed_addr constant [9 x i8] c"cpu0_vid\00", align 1
@.str.41 = private unnamed_addr constant [4 x i8] c"%d\0A\00", align 1
@nct6775_attributes_pwm = internal global [5 x [20 x %struct.attribute*]] [[20 x %struct.attribute*] [%struct.attribute* getelementptr inbounds (%struct.sensor_device_attribute_2, %struct.sensor_device_attribute_2* @sensor_dev_attr_pwm1, i32 0, i32 0, i32 0), %struct.attribute* getelementptr inbounds (%struct.sensor_device_attribute, %struct.sensor_device_attribute* @sensor_dev_attr_pwm1_mode, i32 0, i32 0, i32 0), %struct.attribute* getelementptr inbounds (%struct.sensor_device_attribute, %struct.sensor_device_attribute* @sensor_dev_attr_pwm1_enable, i32 0, i32 0, i32 0), %struct.attribute* getelementptr inbounds (%struct.sensor_device_attribute, %struct.sensor_device_attribute* @sensor_dev_attr_pwm1_temp_sel, i32 0, i32 0, i32 0), %struct.attribute* getelementptr inbounds (%struct.sensor_device_attribute_2, %struct.sensor_device_attribute_2* @sensor_dev_attr_pwm1_temp_tolerance, i32 0, i32 0, i32 0), %struct.attribute* getelementptr inbounds (%struct.sensor_device_attribute_2, %struct.sensor_device_attribute_2* @sensor_dev_attr_pwm1_crit_temp_tolerance, i32 0, i32 0, i32 0), %struct.attribute* getelementptr inbounds (%struct.sensor_device_attribute, %struct.sensor_device_attribute* @sensor_dev_attr_pwm1_target_temp, i32 0, i32 0, i32 0), %struct.attribute* getelementptr inbounds (%struct.sensor_device_attribute, %struct.sensor_device_attribute* @sensor_dev_attr_fan1_target, i32 0, i32 0, i32 0), %struct.attribute* getelementptr inbounds (%struct.sensor_device_attribute, %struct.sensor_device_attribute* @sensor_dev_attr_fan1_tolerance, i32 0, i32 0, i32 0), %struct.attribute* getelementptr inbounds (%struct.sensor_device_attribute_2, %struct.sensor_device_attribute_2* @sensor_dev_attr_pwm1_stop_time, i32 0, i32 0, i32 0), %struct.attribute* getelementptr inbounds (%struct.sensor_device_attribute_2, %struct.sensor_device_attribute_2* @sensor_dev_attr_pwm1_step_up_time, i32 0, i32 0, i32 0), %struct.attribute* getelementptr inbounds (%struct.sensor_device_attribute_2, %struct.sensor_device_attribute_2* @sensor_dev_attr_pwm1_step_down_time, i32 0, i32 0, i32 0), %struct.attribute* getelementptr inbounds (%struct.sensor_device_attribute_2, %struct.sensor_device_attribute_2* @sensor_dev_attr_pwm1_start, i32 0, i32 0, i32 0), %struct.attribute* getelementptr inbounds (%struct.sensor_device_attribute_2, %struct.sensor_device_attribute_2* @sensor_dev_attr_pwm1_floor, i32 0, i32 0, i32 0), %struct.attribute* getelementptr inbounds (%struct.sensor_device_attribute, %struct.sensor_device_attribute* @sensor_dev_attr_pwm1_weight_temp_sel, i32 0, i32 0, i32 0), %struct.attribute* getelementptr inbounds (%struct.sensor_device_attribute_2, %struct.sensor_device_attribute_2* @sensor_dev_attr_pwm1_weight_temp_step, i32 0, i32 0, i32 0), %struct.attribute* getelementptr inbounds (%struct.sensor_device_attribute_2, %struct.sensor_device_attribute_2* @sensor_dev_attr_pwm1_weight_temp_step_tol, i32 0, i32 0, i32 0), %struct.attribute* getelementptr inbounds (%struct.sensor_device_attribute_2, %struct.sensor_device_attribute_2* @sensor_dev_attr_pwm1_weight_temp_step_base, i32 0, i32 0, i32 0), %struct.attribute* getelementptr inbounds (%struct.sensor_device_attribute_2, %struct.sensor_device_attribute_2* @sensor_dev_attr_pwm1_weight_duty_step, i32 0, i32 0, i32 0), %struct.attribute* null], [20 x %struct.attribute*] [%struct.attribute* getelementptr inbounds (%struct.sensor_device_attribute_2, %struct.sensor_device_attribute_2* @sensor_dev_attr_pwm2, i32 0, i32 0, i32 0), %struct.attribute* getelementptr inbounds (%struct.sensor_device_attribute, %struct.sensor_device_attribute* @sensor_dev_attr_pwm2_mode, i32 0, i32 0, i32 0), %struct.attribute* getelementptr inbounds (%struct.sensor_device_attribute, %struct.sensor_device_attribute* @sensor_dev_attr_pwm2_enable, i32 0, i32 0, i32 0), %struct.attribute* getelementptr inbounds (%struct.sensor_device_attribute, %struct.sensor_device_attribute* @sensor_dev_attr_pwm2_temp_sel, i32 0, i32 0, i32 0), %struct.attribute* getelementptr inbounds (%struct.sensor_device_attribute_2, %struct.sensor_device_attribute_2* @sensor_dev_attr_pwm2_temp_tolerance, i32 0, i32 0, i32 0), %struct.attribute* getelementptr inbounds (%struct.sensor_device_attribute_2, %struct.sensor_device_attribute_2* @sensor_dev_attr_pwm2_crit_temp_tolerance, i32 0, i32 0, i32 0), %struct.attribute* getelementptr inbounds (%struct.sensor_device_attribute, %struct.sensor_device_attribute* @sensor_dev_attr_pwm2_target_temp, i32 0, i32 0, i32 0), %struct.attribute* getelementptr inbounds (%struct.sensor_device_attribute, %struct.sensor_device_attribute* @sensor_dev_attr_fan2_target, i32 0, i32 0, i32 0), %struct.attribute* getelementptr inbounds (%struct.sensor_device_attribute, %struct.sensor_device_attribute* @sensor_dev_attr_fan2_tolerance, i32 0, i32 0, i32 0), %struct.attribute* getelementptr inbounds (%struct.sensor_device_attribute_2, %struct.sensor_device_attribute_2* @sensor_dev_attr_pwm2_stop_time, i32 0, i32 0, i32 0), %struct.attribute* getelementptr inbounds (%struct.sensor_device_attribute_2, %struct.sensor_device_attribute_2* @sensor_dev_attr_pwm2_step_up_time, i32 0, i32 0, i32 0), %struct.attribute* getelementptr inbounds (%struct.sensor_device_attribute_2, %struct.sensor_device_attribute_2* @sensor_dev_attr_pwm2_step_down_time, i32 0, i32 0, i32 0), %struct.attribute* getelementptr inbounds (%struct.sensor_device_attribute_2, %struct.sensor_device_attribute_2* @sensor_dev_attr_pwm2_start, i32 0, i32 0, i32 0), %struct.attribute* getelementptr inbounds (%struct.sensor_device_attribute_2, %struct.sensor_device_attribute_2* @sensor_dev_attr_pwm2_floor, i32 0, i32 0, i32 0), %struct.attribute* getelementptr inbounds (%struct.sensor_device_attribute, %struct.sensor_device_attribute* @sensor_dev_attr_pwm2_weight_temp_sel, i32 0, i32 0, i32 0), %struct.attribute* getelementptr inbounds (%struct.sensor_device_attribute_2, %struct.sensor_device_attribute_2* @sensor_dev_attr_pwm2_weight_temp_step, i32 0, i32 0, i32 0), %struct.attribute* getelementptr inbounds (%struct.sensor_device_attribute_2, %struct.sensor_device_attribute_2* @sensor_dev_attr_pwm2_weight_temp_step_tol, i32 0, i32 0, i32 0), %struct.attribute* getelementptr inbounds (%struct.sensor_device_attribute_2, %struct.sensor_device_attribute_2* @sensor_dev_attr_pwm2_weight_temp_step_base, i32 0, i32 0, i32 0), %struct.attribute* getelementptr inbounds (%struct.sensor_device_attribute_2, %struct.sensor_device_attribute_2* @sensor_dev_attr_pwm2_weight_duty_step, i32 0, i32 0, i32 0), %struct.attribute* null], [20 x %struct.attribute*] [%struct.attribute* getelementptr inbounds (%struct.sensor_device_attribute_2, %struct.sensor_device_attribute_2* @sensor_dev_attr_pwm3, i32 0, i32 0, i32 0), %struct.attribute* getelementptr inbounds (%struct.sensor_device_attribute, %struct.sensor_device_attribute* @sensor_dev_attr_pwm3_mode, i32 0, i32 0, i32 0), %struct.attribute* getelementptr inbounds (%struct.sensor_device_attribute, %struct.sensor_device_attribute* @sensor_dev_attr_pwm3_enable, i32 0, i32 0, i32 0), %struct.attribute* getelementptr inbounds (%struct.sensor_device_attribute, %struct.sensor_device_attribute* @sensor_dev_attr_pwm3_temp_sel, i32 0, i32 0, i32 0), %struct.attribute* getelementptr inbounds (%struct.sensor_device_attribute_2, %struct.sensor_device_attribute_2* @sensor_dev_attr_pwm3_temp_tolerance, i32 0, i32 0, i32 0), %struct.attribute* getelementptr inbounds (%struct.sensor_device_attribute_2, %struct.sensor_device_attribute_2* @sensor_dev_attr_pwm3_crit_temp_tolerance, i32 0, i32 0, i32 0), %struct.attribute* getelementptr inbounds (%struct.sensor_device_attribute, %struct.sensor_device_attribute* @sensor_dev_attr_pwm3_target_temp, i32 0, i32 0, i32 0), %struct.attribute* getelementptr inbounds (%struct.sensor_device_attribute, %struct.sensor_device_attribute* @sensor_dev_attr_fan3_target, i32 0, i32 0, i32 0), %struct.attribute* getelementptr inbounds (%struct.sensor_device_attribute, %struct.sensor_device_attribute* @sensor_dev_attr_fan3_tolerance, i32 0, i32 0, i32 0), %struct.attribute* getelementptr inbounds (%struct.sensor_device_attribute_2, %struct.sensor_device_attribute_2* @sensor_dev_attr_pwm3_stop_time, i32 0, i32 0, i32 0), %struct.attribute* getelementptr inbounds (%struct.sensor_device_attribute_2, %struct.sensor_device_attribute_2* @sensor_dev_attr_pwm3_step_up_time, i32 0, i32 0, i32 0), %struct.attribute* getelementptr inbounds (%struct.sensor_device_attribute_2, %struct.sensor_device_attribute_2* @sensor_dev_attr_pwm3_step_down_time, i32 0, i32 0, i32 0), %struct.attribute* getelementptr inbounds (%struct.sensor_device_attribute_2, %struct.sensor_device_attribute_2* @sensor_dev_attr_pwm3_start, i32 0, i32 0, i32 0), %struct.attribute* getelementptr inbounds (%struct.sensor_device_attribute_2, %struct.sensor_device_attribute_2* @sensor_dev_attr_pwm3_floor, i32 0, i32 0, i32 0), %struct.attribute* getelementptr inbounds (%struct.sensor_device_attribute, %struct.sensor_device_attribute* @sensor_dev_attr_pwm3_weight_temp_sel, i32 0, i32 0, i32 0), %struct.attribute* getelementptr inbounds (%struct.sensor_device_attribute_2, %struct.sensor_device_attribute_2* @sensor_dev_attr_pwm3_weight_temp_step, i32 0, i32 0, i32 0), %struct.attribute* getelementptr inbounds (%struct.sensor_device_attribute_2, %struct.sensor_device_attribute_2* @sensor_dev_attr_pwm3_weight_temp_step_tol, i32 0, i32 0, i32 0), %struct.attribute* getelementptr inbounds (%struct.sensor_device_attribute_2, %struct.sensor_device_attribute_2* @sensor_dev_attr_pwm3_weight_temp_step_base, i32 0, i32 0, i32 0), %struct.attribute* getelementptr inbounds (%struct.sensor_device_attribute_2, %struct.sensor_device_attribute_2* @sensor_dev_attr_pwm3_weight_duty_step, i32 0, i32 0, i32 0), %struct.attribute* null], [20 x %struct.attribute*] [%struct.attribute* getelementptr inbounds (%struct.sensor_device_attribute_2, %struct.sensor_device_attribute_2* @sensor_dev_attr_pwm4, i32 0, i32 0, i32 0), %struct.attribute* getelementptr inbounds (%struct.sensor_device_attribute, %struct.sensor_device_attribute* @sensor_dev_attr_pwm4_mode, i32 0, i32 0, i32 0), %struct.attribute* getelementptr inbounds (%struct.sensor_device_attribute, %struct.sensor_device_attribute* @sensor_dev_attr_pwm4_enable, i32 0, i32 0, i32 0), %struct.attribute* getelementptr inbounds (%struct.sensor_device_attribute, %struct.sensor_device_attribute* @sensor_dev_attr_pwm4_temp_sel, i32 0, i32 0, i32 0), %struct.attribute* getelementptr inbounds (%struct.sensor_device_attribute_2, %struct.sensor_device_attribute_2* @sensor_dev_attr_pwm4_temp_tolerance, i32 0, i32 0, i32 0), %struct.attribute* getelementptr inbounds (%struct.sensor_device_attribute_2, %struct.sensor_device_attribute_2* @sensor_dev_attr_pwm4_crit_temp_tolerance, i32 0, i32 0, i32 0), %struct.attribute* getelementptr inbounds (%struct.sensor_device_attribute, %struct.sensor_device_attribute* @sensor_dev_attr_pwm4_target_temp, i32 0, i32 0, i32 0), %struct.attribute* getelementptr inbounds (%struct.sensor_device_attribute, %struct.sensor_device_attribute* @sensor_dev_attr_fan4_target, i32 0, i32 0, i32 0), %struct.attribute* getelementptr inbounds (%struct.sensor_device_attribute, %struct.sensor_device_attribute* @sensor_dev_attr_fan4_tolerance, i32 0, i32 0, i32 0), %struct.attribute* getelementptr inbounds (%struct.sensor_device_attribute_2, %struct.sensor_device_attribute_2* @sensor_dev_attr_pwm4_stop_time, i32 0, i32 0, i32 0), %struct.attribute* getelementptr inbounds (%struct.sensor_device_attribute_2, %struct.sensor_device_attribute_2* @sensor_dev_attr_pwm4_step_up_time, i32 0, i32 0, i32 0), %struct.attribute* getelementptr inbounds (%struct.sensor_device_attribute_2, %struct.sensor_device_attribute_2* @sensor_dev_attr_pwm4_step_down_time, i32 0, i32 0, i32 0), %struct.attribute* getelementptr inbounds (%struct.sensor_device_attribute_2, %struct.sensor_device_attribute_2* @sensor_dev_attr_pwm4_start, i32 0, i32 0, i32 0), %struct.attribute* getelementptr inbounds (%struct.sensor_device_attribute_2, %struct.sensor_device_attribute_2* @sensor_dev_attr_pwm4_floor, i32 0, i32 0, i32 0), %struct.attribute* getelementptr inbounds (%struct.sensor_device_attribute, %struct.sensor_device_attribute* @sensor_dev_attr_pwm4_weight_temp_sel, i32 0, i32 0, i32 0), %struct.attribute* getelementptr inbounds (%struct.sensor_device_attribute_2, %struct.sensor_device_attribute_2* @sensor_dev_attr_pwm4_weight_temp_step, i32 0, i32 0, i32 0), %struct.attribute* getelementptr inbounds (%struct.sensor_device_attribute_2, %struct.sensor_device_attribute_2* @sensor_dev_attr_pwm4_weight_temp_step_tol, i32 0, i32 0, i32 0), %struct.attribute* getelementptr inbounds (%struct.sensor_device_attribute_2, %struct.sensor_device_attribute_2* @sensor_dev_attr_pwm4_weight_temp_step_base, i32 0, i32 0, i32 0), %struct.attribute* getelementptr inbounds (%struct.sensor_device_attribute_2, %struct.sensor_device_attribute_2* @sensor_dev_attr_pwm4_weight_duty_step, i32 0, i32 0, i32 0), %struct.attribute* null], [20 x %struct.attribute*] [%struct.attribute* getelementptr inbounds (%struct.sensor_device_attribute_2, %struct.sensor_device_attribute_2* @sensor_dev_attr_pwm5, i32 0, i32 0, i32 0), %struct.attribute* getelementptr inbounds (%struct.sensor_device_attribute, %struct.sensor_device_attribute* @sensor_dev_attr_pwm5_mode, i32 0, i32 0, i32 0), %struct.attribute* getelementptr inbounds (%struct.sensor_device_attribute, %struct.sensor_device_attribute* @sensor_dev_attr_pwm5_enable, i32 0, i32 0, i32 0), %struct.attribute* getelementptr inbounds (%struct.sensor_device_attribute, %struct.sensor_device_attribute* @sensor_dev_attr_pwm5_temp_sel, i32 0, i32 0, i32 0), %struct.attribute* getelementptr inbounds (%struct.sensor_device_attribute_2, %struct.sensor_device_attribute_2* @sensor_dev_attr_pwm5_temp_tolerance, i32 0, i32 0, i32 0), %struct.attribute* getelementptr inbounds (%struct.sensor_device_attribute_2, %struct.sensor_device_attribute_2* @sensor_dev_attr_pwm5_crit_temp_tolerance, i32 0, i32 0, i32 0), %struct.attribute* getelementptr inbounds (%struct.sensor_device_attribute, %struct.sensor_device_attribute* @sensor_dev_attr_pwm5_target_temp, i32 0, i32 0, i32 0), %struct.attribute* getelementptr inbounds (%struct.sensor_device_attribute, %struct.sensor_device_attribute* @sensor_dev_attr_fan5_target, i32 0, i32 0, i32 0), %struct.attribute* getelementptr inbounds (%struct.sensor_device_attribute, %struct.sensor_device_attribute* @sensor_dev_attr_fan5_tolerance, i32 0, i32 0, i32 0), %struct.attribute* getelementptr inbounds (%struct.sensor_device_attribute_2, %struct.sensor_device_attribute_2* @sensor_dev_attr_pwm5_stop_time, i32 0, i32 0, i32 0), %struct.attribute* getelementptr inbounds (%struct.sensor_device_attribute_2, %struct.sensor_device_attribute_2* @sensor_dev_attr_pwm5_step_up_time, i32 0, i32 0, i32 0), %struct.attribute* getelementptr inbounds (%struct.sensor_device_attribute_2, %struct.sensor_device_attribute_2* @sensor_dev_attr_pwm5_step_down_time, i32 0, i32 0, i32 0), %struct.attribute* getelementptr inbounds (%struct.sensor_device_attribute_2, %struct.sensor_device_attribute_2* @sensor_dev_attr_pwm5_start, i32 0, i32 0, i32 0), %struct.attribute* getelementptr inbounds (%struct.sensor_device_attribute_2, %struct.sensor_device_attribute_2* @sensor_dev_attr_pwm5_floor, i32 0, i32 0, i32 0), %struct.attribute* getelementptr inbounds (%struct.sensor_device_attribute, %struct.sensor_device_attribute* @sensor_dev_attr_pwm5_weight_temp_sel, i32 0, i32 0, i32 0), %struct.attribute* getelementptr inbounds (%struct.sensor_device_attribute_2, %struct.sensor_device_attribute_2* @sensor_dev_attr_pwm5_weight_temp_step, i32 0, i32 0, i32 0), %struct.attribute* getelementptr inbounds (%struct.sensor_device_attribute_2, %struct.sensor_device_attribute_2* @sensor_dev_attr_pwm5_weight_temp_step_tol, i32 0, i32 0, i32 0), %struct.attribute* getelementptr inbounds (%struct.sensor_device_attribute_2, %struct.sensor_device_attribute_2* @sensor_dev_attr_pwm5_weight_temp_step_base, i32 0, i32 0, i32 0), %struct.attribute* getelementptr inbounds (%struct.sensor_device_attribute_2, %struct.sensor_device_attribute_2* @sensor_dev_attr_pwm5_weight_duty_step, i32 0, i32 0, i32 0), %struct.attribute* null]], align 16
@sensor_dev_attr_pwm1 = internal global %struct.sensor_device_attribute_2 { %struct.device_attribute { %struct.attribute { i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.42, i32 0, i32 0), i16 420 }, i64 (%struct.device*, %struct.device_attribute*, i8*)* @show_pwm, i64 (%struct.device*, %struct.device_attribute*, i8*, i64)* @store_pwm }, i8 0, i8 0 }, align 8
@sensor_dev_attr_pwm1_mode = internal global %struct.sensor_device_attribute { %struct.device_attribute { %struct.attribute { i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.43, i32 0, i32 0), i16 420 }, i64 (%struct.device*, %struct.device_attribute*, i8*)* @show_pwm_mode, i64 (%struct.device*, %struct.device_attribute*, i8*, i64)* @store_pwm_mode }, i32 0 }, align 8
@sensor_dev_attr_pwm1_enable = internal global %struct.sensor_device_attribute { %struct.device_attribute { %struct.attribute { i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.44, i32 0, i32 0), i16 420 }, i64 (%struct.device*, %struct.device_attribute*, i8*)* @show_pwm_enable, i64 (%struct.device*, %struct.device_attribute*, i8*, i64)* @store_pwm_enable }, i32 0 }, align 8
@sensor_dev_attr_pwm1_temp_sel = internal global %struct.sensor_device_attribute { %struct.device_attribute { %struct.attribute { i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.47, i32 0, i32 0), i16 420 }, i64 (%struct.device*, %struct.device_attribute*, i8*)* @show_pwm_temp_sel, i64 (%struct.device*, %struct.device_attribute*, i8*, i64)* @store_pwm_temp_sel }, i32 0 }, align 8
@sensor_dev_attr_pwm1_temp_tolerance = internal global %struct.sensor_device_attribute_2 { %struct.device_attribute { %struct.attribute { i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.48, i32 0, i32 0), i16 420 }, i64 (%struct.device*, %struct.device_attribute*, i8*)* @show_temp_tolerance, i64 (%struct.device*, %struct.device_attribute*, i8*, i64)* @store_temp_tolerance }, i8 0, i8 0 }, align 8
@sensor_dev_attr_pwm1_crit_temp_tolerance = internal global %struct.sensor_device_attribute_2 { %struct.device_attribute { %struct.attribute { i8* getelementptr inbounds ([25 x i8], [25 x i8]* @.str.49, i32 0, i32 0), i16 420 }, i64 (%struct.device*, %struct.device_attribute*, i8*)* @show_temp_tolerance, i64 (%struct.device*, %struct.device_attribute*, i8*, i64)* @store_temp_tolerance }, i8 1, i8 0 }, align 8
@sensor_dev_attr_pwm1_target_temp = internal global %struct.sensor_device_attribute { %struct.device_attribute { %struct.attribute { i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.50, i32 0, i32 0), i16 420 }, i64 (%struct.device*, %struct.device_attribute*, i8*)* @show_target_temp, i64 (%struct.device*, %struct.device_attribute*, i8*, i64)* @store_target_temp }, i32 0 }, align 8
@sensor_dev_attr_fan1_target = internal global %struct.sensor_device_attribute { %struct.device_attribute { %struct.attribute { i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.51, i32 0, i32 0), i16 420 }, i64 (%struct.device*, %struct.device_attribute*, i8*)* @show_target_speed, i64 (%struct.device*, %struct.device_attribute*, i8*, i64)* @store_target_speed }, i32 0 }, align 8
@sensor_dev_attr_fan1_tolerance = internal global %struct.sensor_device_attribute { %struct.device_attribute { %struct.attribute { i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.52, i32 0, i32 0), i16 420 }, i64 (%struct.device*, %struct.device_attribute*, i8*)* @show_speed_tolerance, i64 (%struct.device*, %struct.device_attribute*, i8*, i64)* @store_speed_tolerance }, i32 0 }, align 8
@sensor_dev_attr_pwm1_stop_time = internal global %struct.sensor_device_attribute_2 { %struct.device_attribute { %struct.attribute { i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.53, i32 0, i32 0), i16 420 }, i64 (%struct.device*, %struct.device_attribute*, i8*)* @show_fan_time, i64 (%struct.device*, %struct.device_attribute*, i8*, i64)* @store_fan_time }, i8 0, i8 0 }, align 8
@sensor_dev_attr_pwm1_step_up_time = internal global %struct.sensor_device_attribute_2 { %struct.device_attribute { %struct.attribute { i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.54, i32 0, i32 0), i16 420 }, i64 (%struct.device*, %struct.device_attribute*, i8*)* @show_fan_time, i64 (%struct.device*, %struct.device_attribute*, i8*, i64)* @store_fan_time }, i8 1, i8 0 }, align 8
@sensor_dev_attr_pwm1_step_down_time = internal global %struct.sensor_device_attribute_2 { %struct.device_attribute { %struct.attribute { i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.55, i32 0, i32 0), i16 420 }, i64 (%struct.device*, %struct.device_attribute*, i8*)* @show_fan_time, i64 (%struct.device*, %struct.device_attribute*, i8*, i64)* @store_fan_time }, i8 2, i8 0 }, align 8
@sensor_dev_attr_pwm1_start = internal global %struct.sensor_device_attribute_2 { %struct.device_attribute { %struct.attribute { i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.56, i32 0, i32 0), i16 420 }, i64 (%struct.device*, %struct.device_attribute*, i8*)* @show_pwm, i64 (%struct.device*, %struct.device_attribute*, i8*, i64)* @store_pwm }, i8 1, i8 0 }, align 8
@sensor_dev_attr_pwm1_floor = internal global %struct.sensor_device_attribute_2 { %struct.device_attribute { %struct.attribute { i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.57, i32 0, i32 0), i16 420 }, i64 (%struct.device*, %struct.device_attribute*, i8*)* @show_pwm, i64 (%struct.device*, %struct.device_attribute*, i8*, i64)* @store_pwm }, i8 2, i8 0 }, align 8
@sensor_dev_attr_pwm1_weight_temp_sel = internal global %struct.sensor_device_attribute { %struct.device_attribute { %struct.attribute { i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.58, i32 0, i32 0), i16 420 }, i64 (%struct.device*, %struct.device_attribute*, i8*)* @show_pwm_weight_temp_sel, i64 (%struct.device*, %struct.device_attribute*, i8*, i64)* @store_pwm_weight_temp_sel }, i32 0 }, align 8
@sensor_dev_attr_pwm1_weight_temp_step = internal global %struct.sensor_device_attribute_2 { %struct.device_attribute { %struct.attribute { i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.59, i32 0, i32 0), i16 420 }, i64 (%struct.device*, %struct.device_attribute*, i8*)* @show_weight_temp, i64 (%struct.device*, %struct.device_attribute*, i8*, i64)* @store_weight_temp }, i8 0, i8 0 }, align 8
@sensor_dev_attr_pwm1_weight_temp_step_tol = internal global %struct.sensor_device_attribute_2 { %struct.device_attribute { %struct.attribute { i8* getelementptr inbounds ([26 x i8], [26 x i8]* @.str.60, i32 0, i32 0), i16 420 }, i64 (%struct.device*, %struct.device_attribute*, i8*)* @show_weight_temp, i64 (%struct.device*, %struct.device_attribute*, i8*, i64)* @store_weight_temp }, i8 1, i8 0 }, align 8
@sensor_dev_attr_pwm1_weight_temp_step_base = internal global %struct.sensor_device_attribute_2 { %struct.device_attribute { %struct.attribute { i8* getelementptr inbounds ([27 x i8], [27 x i8]* @.str.61, i32 0, i32 0), i16 420 }, i64 (%struct.device*, %struct.device_attribute*, i8*)* @show_weight_temp, i64 (%struct.device*, %struct.device_attribute*, i8*, i64)* @store_weight_temp }, i8 2, i8 0 }, align 8
@sensor_dev_attr_pwm1_weight_duty_step = internal global %struct.sensor_device_attribute_2 { %struct.device_attribute { %struct.attribute { i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.62, i32 0, i32 0), i16 420 }, i64 (%struct.device*, %struct.device_attribute*, i8*)* @show_pwm, i64 (%struct.device*, %struct.device_attribute*, i8*, i64)* @store_pwm }, i8 5, i8 0 }, align 8
@sensor_dev_attr_pwm2 = internal global %struct.sensor_device_attribute_2 { %struct.device_attribute { %struct.attribute { i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.63, i32 0, i32 0), i16 420 }, i64 (%struct.device*, %struct.device_attribute*, i8*)* @show_pwm, i64 (%struct.device*, %struct.device_attribute*, i8*, i64)* @store_pwm }, i8 0, i8 1 }, align 8
@sensor_dev_attr_pwm2_mode = internal global %struct.sensor_device_attribute { %struct.device_attribute { %struct.attribute { i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.64, i32 0, i32 0), i16 420 }, i64 (%struct.device*, %struct.device_attribute*, i8*)* @show_pwm_mode, i64 (%struct.device*, %struct.device_attribute*, i8*, i64)* @store_pwm_mode }, i32 1 }, align 8
@sensor_dev_attr_pwm2_enable = internal global %struct.sensor_device_attribute { %struct.device_attribute { %struct.attribute { i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.65, i32 0, i32 0), i16 420 }, i64 (%struct.device*, %struct.device_attribute*, i8*)* @show_pwm_enable, i64 (%struct.device*, %struct.device_attribute*, i8*, i64)* @store_pwm_enable }, i32 1 }, align 8
@sensor_dev_attr_pwm2_temp_sel = internal global %struct.sensor_device_attribute { %struct.device_attribute { %struct.attribute { i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.66, i32 0, i32 0), i16 420 }, i64 (%struct.device*, %struct.device_attribute*, i8*)* @show_pwm_temp_sel, i64 (%struct.device*, %struct.device_attribute*, i8*, i64)* @store_pwm_temp_sel }, i32 1 }, align 8
@sensor_dev_attr_pwm2_temp_tolerance = internal global %struct.sensor_device_attribute_2 { %struct.device_attribute { %struct.attribute { i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.67, i32 0, i32 0), i16 420 }, i64 (%struct.device*, %struct.device_attribute*, i8*)* @show_temp_tolerance, i64 (%struct.device*, %struct.device_attribute*, i8*, i64)* @store_temp_tolerance }, i8 0, i8 1 }, align 8
@sensor_dev_attr_pwm2_crit_temp_tolerance = internal global %struct.sensor_device_attribute_2 { %struct.device_attribute { %struct.attribute { i8* getelementptr inbounds ([25 x i8], [25 x i8]* @.str.68, i32 0, i32 0), i16 420 }, i64 (%struct.device*, %struct.device_attribute*, i8*)* @show_temp_tolerance, i64 (%struct.device*, %struct.device_attribute*, i8*, i64)* @store_temp_tolerance }, i8 1, i8 1 }, align 8
@sensor_dev_attr_pwm2_target_temp = internal global %struct.sensor_device_attribute { %struct.device_attribute { %struct.attribute { i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.69, i32 0, i32 0), i16 420 }, i64 (%struct.device*, %struct.device_attribute*, i8*)* @show_target_temp, i64 (%struct.device*, %struct.device_attribute*, i8*, i64)* @store_target_temp }, i32 1 }, align 8
@sensor_dev_attr_fan2_target = internal global %struct.sensor_device_attribute { %struct.device_attribute { %struct.attribute { i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.70, i32 0, i32 0), i16 420 }, i64 (%struct.device*, %struct.device_attribute*, i8*)* @show_target_speed, i64 (%struct.device*, %struct.device_attribute*, i8*, i64)* @store_target_speed }, i32 1 }, align 8
@sensor_dev_attr_fan2_tolerance = internal global %struct.sensor_device_attribute { %struct.device_attribute { %struct.attribute { i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.71, i32 0, i32 0), i16 420 }, i64 (%struct.device*, %struct.device_attribute*, i8*)* @show_speed_tolerance, i64 (%struct.device*, %struct.device_attribute*, i8*, i64)* @store_speed_tolerance }, i32 1 }, align 8
@sensor_dev_attr_pwm2_stop_time = internal global %struct.sensor_device_attribute_2 { %struct.device_attribute { %struct.attribute { i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.72, i32 0, i32 0), i16 420 }, i64 (%struct.device*, %struct.device_attribute*, i8*)* @show_fan_time, i64 (%struct.device*, %struct.device_attribute*, i8*, i64)* @store_fan_time }, i8 0, i8 1 }, align 8
@sensor_dev_attr_pwm2_step_up_time = internal global %struct.sensor_device_attribute_2 { %struct.device_attribute { %struct.attribute { i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.73, i32 0, i32 0), i16 420 }, i64 (%struct.device*, %struct.device_attribute*, i8*)* @show_fan_time, i64 (%struct.device*, %struct.device_attribute*, i8*, i64)* @store_fan_time }, i8 1, i8 1 }, align 8
@sensor_dev_attr_pwm2_step_down_time = internal global %struct.sensor_device_attribute_2 { %struct.device_attribute { %struct.attribute { i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.74, i32 0, i32 0), i16 420 }, i64 (%struct.device*, %struct.device_attribute*, i8*)* @show_fan_time, i64 (%struct.device*, %struct.device_attribute*, i8*, i64)* @store_fan_time }, i8 2, i8 1 }, align 8
@sensor_dev_attr_pwm2_start = internal global %struct.sensor_device_attribute_2 { %struct.device_attribute { %struct.attribute { i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.75, i32 0, i32 0), i16 420 }, i64 (%struct.device*, %struct.device_attribute*, i8*)* @show_pwm, i64 (%struct.device*, %struct.device_attribute*, i8*, i64)* @store_pwm }, i8 1, i8 1 }, align 8
@sensor_dev_attr_pwm2_floor = internal global %struct.sensor_device_attribute_2 { %struct.device_attribute { %struct.attribute { i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.76, i32 0, i32 0), i16 420 }, i64 (%struct.device*, %struct.device_attribute*, i8*)* @show_pwm, i64 (%struct.device*, %struct.device_attribute*, i8*, i64)* @store_pwm }, i8 2, i8 1 }, align 8
@sensor_dev_attr_pwm2_weight_temp_sel = internal global %struct.sensor_device_attribute { %struct.device_attribute { %struct.attribute { i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.77, i32 0, i32 0), i16 420 }, i64 (%struct.device*, %struct.device_attribute*, i8*)* @show_pwm_weight_temp_sel, i64 (%struct.device*, %struct.device_attribute*, i8*, i64)* @store_pwm_weight_temp_sel }, i32 1 }, align 8
@sensor_dev_attr_pwm2_weight_temp_step = internal global %struct.sensor_device_attribute_2 { %struct.device_attribute { %struct.attribute { i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.78, i32 0, i32 0), i16 420 }, i64 (%struct.device*, %struct.device_attribute*, i8*)* @show_weight_temp, i64 (%struct.device*, %struct.device_attribute*, i8*, i64)* @store_weight_temp }, i8 0, i8 1 }, align 8
@sensor_dev_attr_pwm2_weight_temp_step_tol = internal global %struct.sensor_device_attribute_2 { %struct.device_attribute { %struct.attribute { i8* getelementptr inbounds ([26 x i8], [26 x i8]* @.str.79, i32 0, i32 0), i16 420 }, i64 (%struct.device*, %struct.device_attribute*, i8*)* @show_weight_temp, i64 (%struct.device*, %struct.device_attribute*, i8*, i64)* @store_weight_temp }, i8 1, i8 1 }, align 8
@sensor_dev_attr_pwm2_weight_temp_step_base = internal global %struct.sensor_device_attribute_2 { %struct.device_attribute { %struct.attribute { i8* getelementptr inbounds ([27 x i8], [27 x i8]* @.str.80, i32 0, i32 0), i16 420 }, i64 (%struct.device*, %struct.device_attribute*, i8*)* @show_weight_temp, i64 (%struct.device*, %struct.device_attribute*, i8*, i64)* @store_weight_temp }, i8 2, i8 1 }, align 8
@sensor_dev_attr_pwm2_weight_duty_step = internal global %struct.sensor_device_attribute_2 { %struct.device_attribute { %struct.attribute { i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.81, i32 0, i32 0), i16 420 }, i64 (%struct.device*, %struct.device_attribute*, i8*)* @show_pwm, i64 (%struct.device*, %struct.device_attribute*, i8*, i64)* @store_pwm }, i8 5, i8 1 }, align 8
@sensor_dev_attr_pwm3 = internal global %struct.sensor_device_attribute_2 { %struct.device_attribute { %struct.attribute { i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.82, i32 0, i32 0), i16 420 }, i64 (%struct.device*, %struct.device_attribute*, i8*)* @show_pwm, i64 (%struct.device*, %struct.device_attribute*, i8*, i64)* @store_pwm }, i8 0, i8 2 }, align 8
@sensor_dev_attr_pwm3_mode = internal global %struct.sensor_device_attribute { %struct.device_attribute { %struct.attribute { i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.83, i32 0, i32 0), i16 420 }, i64 (%struct.device*, %struct.device_attribute*, i8*)* @show_pwm_mode, i64 (%struct.device*, %struct.device_attribute*, i8*, i64)* @store_pwm_mode }, i32 2 }, align 8
@sensor_dev_attr_pwm3_enable = internal global %struct.sensor_device_attribute { %struct.device_attribute { %struct.attribute { i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.84, i32 0, i32 0), i16 420 }, i64 (%struct.device*, %struct.device_attribute*, i8*)* @show_pwm_enable, i64 (%struct.device*, %struct.device_attribute*, i8*, i64)* @store_pwm_enable }, i32 2 }, align 8
@sensor_dev_attr_pwm3_temp_sel = internal global %struct.sensor_device_attribute { %struct.device_attribute { %struct.attribute { i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.85, i32 0, i32 0), i16 420 }, i64 (%struct.device*, %struct.device_attribute*, i8*)* @show_pwm_temp_sel, i64 (%struct.device*, %struct.device_attribute*, i8*, i64)* @store_pwm_temp_sel }, i32 2 }, align 8
@sensor_dev_attr_pwm3_temp_tolerance = internal global %struct.sensor_device_attribute_2 { %struct.device_attribute { %struct.attribute { i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.86, i32 0, i32 0), i16 420 }, i64 (%struct.device*, %struct.device_attribute*, i8*)* @show_temp_tolerance, i64 (%struct.device*, %struct.device_attribute*, i8*, i64)* @store_temp_tolerance }, i8 0, i8 2 }, align 8
@sensor_dev_attr_pwm3_crit_temp_tolerance = internal global %struct.sensor_device_attribute_2 { %struct.device_attribute { %struct.attribute { i8* getelementptr inbounds ([25 x i8], [25 x i8]* @.str.87, i32 0, i32 0), i16 420 }, i64 (%struct.device*, %struct.device_attribute*, i8*)* @show_temp_tolerance, i64 (%struct.device*, %struct.device_attribute*, i8*, i64)* @store_temp_tolerance }, i8 1, i8 2 }, align 8
@sensor_dev_attr_pwm3_target_temp = internal global %struct.sensor_device_attribute { %struct.device_attribute { %struct.attribute { i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.88, i32 0, i32 0), i16 420 }, i64 (%struct.device*, %struct.device_attribute*, i8*)* @show_target_temp, i64 (%struct.device*, %struct.device_attribute*, i8*, i64)* @store_target_temp }, i32 2 }, align 8
@sensor_dev_attr_fan3_target = internal global %struct.sensor_device_attribute { %struct.device_attribute { %struct.attribute { i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.89, i32 0, i32 0), i16 420 }, i64 (%struct.device*, %struct.device_attribute*, i8*)* @show_target_speed, i64 (%struct.device*, %struct.device_attribute*, i8*, i64)* @store_target_speed }, i32 2 }, align 8
@sensor_dev_attr_fan3_tolerance = internal global %struct.sensor_device_attribute { %struct.device_attribute { %struct.attribute { i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.90, i32 0, i32 0), i16 420 }, i64 (%struct.device*, %struct.device_attribute*, i8*)* @show_speed_tolerance, i64 (%struct.device*, %struct.device_attribute*, i8*, i64)* @store_speed_tolerance }, i32 2 }, align 8
@sensor_dev_attr_pwm3_stop_time = internal global %struct.sensor_device_attribute_2 { %struct.device_attribute { %struct.attribute { i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.91, i32 0, i32 0), i16 420 }, i64 (%struct.device*, %struct.device_attribute*, i8*)* @show_fan_time, i64 (%struct.device*, %struct.device_attribute*, i8*, i64)* @store_fan_time }, i8 0, i8 2 }, align 8
@sensor_dev_attr_pwm3_step_up_time = internal global %struct.sensor_device_attribute_2 { %struct.device_attribute { %struct.attribute { i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.92, i32 0, i32 0), i16 420 }, i64 (%struct.device*, %struct.device_attribute*, i8*)* @show_fan_time, i64 (%struct.device*, %struct.device_attribute*, i8*, i64)* @store_fan_time }, i8 1, i8 2 }, align 8
@sensor_dev_attr_pwm3_step_down_time = internal global %struct.sensor_device_attribute_2 { %struct.device_attribute { %struct.attribute { i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.93, i32 0, i32 0), i16 420 }, i64 (%struct.device*, %struct.device_attribute*, i8*)* @show_fan_time, i64 (%struct.device*, %struct.device_attribute*, i8*, i64)* @store_fan_time }, i8 2, i8 2 }, align 8
@sensor_dev_attr_pwm3_start = internal global %struct.sensor_device_attribute_2 { %struct.device_attribute { %struct.attribute { i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.94, i32 0, i32 0), i16 420 }, i64 (%struct.device*, %struct.device_attribute*, i8*)* @show_pwm, i64 (%struct.device*, %struct.device_attribute*, i8*, i64)* @store_pwm }, i8 1, i8 2 }, align 8
@sensor_dev_attr_pwm3_floor = internal global %struct.sensor_device_attribute_2 { %struct.device_attribute { %struct.attribute { i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.95, i32 0, i32 0), i16 420 }, i64 (%struct.device*, %struct.device_attribute*, i8*)* @show_pwm, i64 (%struct.device*, %struct.device_attribute*, i8*, i64)* @store_pwm }, i8 2, i8 2 }, align 8
@sensor_dev_attr_pwm3_weight_temp_sel = internal global %struct.sensor_device_attribute { %struct.device_attribute { %struct.attribute { i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.96, i32 0, i32 0), i16 420 }, i64 (%struct.device*, %struct.device_attribute*, i8*)* @show_pwm_weight_temp_sel, i64 (%struct.device*, %struct.device_attribute*, i8*, i64)* @store_pwm_weight_temp_sel }, i32 2 }, align 8
@sensor_dev_attr_pwm3_weight_temp_step = internal global %struct.sensor_device_attribute_2 { %struct.device_attribute { %struct.attribute { i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.97, i32 0, i32 0), i16 420 }, i64 (%struct.device*, %struct.device_attribute*, i8*)* @show_weight_temp, i64 (%struct.device*, %struct.device_attribute*, i8*, i64)* @store_weight_temp }, i8 0, i8 2 }, align 8
@sensor_dev_attr_pwm3_weight_temp_step_tol = internal global %struct.sensor_device_attribute_2 { %struct.device_attribute { %struct.attribute { i8* getelementptr inbounds ([26 x i8], [26 x i8]* @.str.98, i32 0, i32 0), i16 420 }, i64 (%struct.device*, %struct.device_attribute*, i8*)* @show_weight_temp, i64 (%struct.device*, %struct.device_attribute*, i8*, i64)* @store_weight_temp }, i8 1, i8 2 }, align 8
@sensor_dev_attr_pwm3_weight_temp_step_base = internal global %struct.sensor_device_attribute_2 { %struct.device_attribute { %struct.attribute { i8* getelementptr inbounds ([27 x i8], [27 x i8]* @.str.99, i32 0, i32 0), i16 420 }, i64 (%struct.device*, %struct.device_attribute*, i8*)* @show_weight_temp, i64 (%struct.device*, %struct.device_attribute*, i8*, i64)* @store_weight_temp }, i8 2, i8 2 }, align 8
@sensor_dev_attr_pwm3_weight_duty_step = internal global %struct.sensor_device_attribute_2 { %struct.device_attribute { %struct.attribute { i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.100, i32 0, i32 0), i16 420 }, i64 (%struct.device*, %struct.device_attribute*, i8*)* @show_pwm, i64 (%struct.device*, %struct.device_attribute*, i8*, i64)* @store_pwm }, i8 5, i8 2 }, align 8
@sensor_dev_attr_pwm4 = internal global %struct.sensor_device_attribute_2 { %struct.device_attribute { %struct.attribute { i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.101, i32 0, i32 0), i16 420 }, i64 (%struct.device*, %struct.device_attribute*, i8*)* @show_pwm, i64 (%struct.device*, %struct.device_attribute*, i8*, i64)* @store_pwm }, i8 0, i8 3 }, align 8
@sensor_dev_attr_pwm4_mode = internal global %struct.sensor_device_attribute { %struct.device_attribute { %struct.attribute { i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.102, i32 0, i32 0), i16 420 }, i64 (%struct.device*, %struct.device_attribute*, i8*)* @show_pwm_mode, i64 (%struct.device*, %struct.device_attribute*, i8*, i64)* @store_pwm_mode }, i32 3 }, align 8
@sensor_dev_attr_pwm4_enable = internal global %struct.sensor_device_attribute { %struct.device_attribute { %struct.attribute { i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.103, i32 0, i32 0), i16 420 }, i64 (%struct.device*, %struct.device_attribute*, i8*)* @show_pwm_enable, i64 (%struct.device*, %struct.device_attribute*, i8*, i64)* @store_pwm_enable }, i32 3 }, align 8
@sensor_dev_attr_pwm4_temp_sel = internal global %struct.sensor_device_attribute { %struct.device_attribute { %struct.attribute { i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.104, i32 0, i32 0), i16 420 }, i64 (%struct.device*, %struct.device_attribute*, i8*)* @show_pwm_temp_sel, i64 (%struct.device*, %struct.device_attribute*, i8*, i64)* @store_pwm_temp_sel }, i32 3 }, align 8
@sensor_dev_attr_pwm4_temp_tolerance = internal global %struct.sensor_device_attribute_2 { %struct.device_attribute { %struct.attribute { i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.105, i32 0, i32 0), i16 420 }, i64 (%struct.device*, %struct.device_attribute*, i8*)* @show_temp_tolerance, i64 (%struct.device*, %struct.device_attribute*, i8*, i64)* @store_temp_tolerance }, i8 0, i8 3 }, align 8
@sensor_dev_attr_pwm4_crit_temp_tolerance = internal global %struct.sensor_device_attribute_2 { %struct.device_attribute { %struct.attribute { i8* getelementptr inbounds ([25 x i8], [25 x i8]* @.str.106, i32 0, i32 0), i16 420 }, i64 (%struct.device*, %struct.device_attribute*, i8*)* @show_temp_tolerance, i64 (%struct.device*, %struct.device_attribute*, i8*, i64)* @store_temp_tolerance }, i8 1, i8 3 }, align 8
@sensor_dev_attr_pwm4_target_temp = internal global %struct.sensor_device_attribute { %struct.device_attribute { %struct.attribute { i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.107, i32 0, i32 0), i16 420 }, i64 (%struct.device*, %struct.device_attribute*, i8*)* @show_target_temp, i64 (%struct.device*, %struct.device_attribute*, i8*, i64)* @store_target_temp }, i32 3 }, align 8
@sensor_dev_attr_fan4_target = internal global %struct.sensor_device_attribute { %struct.device_attribute { %struct.attribute { i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.108, i32 0, i32 0), i16 420 }, i64 (%struct.device*, %struct.device_attribute*, i8*)* @show_target_speed, i64 (%struct.device*, %struct.device_attribute*, i8*, i64)* @store_target_speed }, i32 3 }, align 8
@sensor_dev_attr_fan4_tolerance = internal global %struct.sensor_device_attribute { %struct.device_attribute { %struct.attribute { i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.109, i32 0, i32 0), i16 420 }, i64 (%struct.device*, %struct.device_attribute*, i8*)* @show_speed_tolerance, i64 (%struct.device*, %struct.device_attribute*, i8*, i64)* @store_speed_tolerance }, i32 3 }, align 8
@sensor_dev_attr_pwm4_stop_time = internal global %struct.sensor_device_attribute_2 { %struct.device_attribute { %struct.attribute { i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.110, i32 0, i32 0), i16 420 }, i64 (%struct.device*, %struct.device_attribute*, i8*)* @show_fan_time, i64 (%struct.device*, %struct.device_attribute*, i8*, i64)* @store_fan_time }, i8 0, i8 3 }, align 8
@sensor_dev_attr_pwm4_step_up_time = internal global %struct.sensor_device_attribute_2 { %struct.device_attribute { %struct.attribute { i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.111, i32 0, i32 0), i16 420 }, i64 (%struct.device*, %struct.device_attribute*, i8*)* @show_fan_time, i64 (%struct.device*, %struct.device_attribute*, i8*, i64)* @store_fan_time }, i8 1, i8 3 }, align 8
@sensor_dev_attr_pwm4_step_down_time = internal global %struct.sensor_device_attribute_2 { %struct.device_attribute { %struct.attribute { i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.112, i32 0, i32 0), i16 420 }, i64 (%struct.device*, %struct.device_attribute*, i8*)* @show_fan_time, i64 (%struct.device*, %struct.device_attribute*, i8*, i64)* @store_fan_time }, i8 2, i8 3 }, align 8
@sensor_dev_attr_pwm4_start = internal global %struct.sensor_device_attribute_2 { %struct.device_attribute { %struct.attribute { i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.113, i32 0, i32 0), i16 420 }, i64 (%struct.device*, %struct.device_attribute*, i8*)* @show_pwm, i64 (%struct.device*, %struct.device_attribute*, i8*, i64)* @store_pwm }, i8 1, i8 3 }, align 8
@sensor_dev_attr_pwm4_floor = internal global %struct.sensor_device_attribute_2 { %struct.device_attribute { %struct.attribute { i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.114, i32 0, i32 0), i16 420 }, i64 (%struct.device*, %struct.device_attribute*, i8*)* @show_pwm, i64 (%struct.device*, %struct.device_attribute*, i8*, i64)* @store_pwm }, i8 2, i8 3 }, align 8
@sensor_dev_attr_pwm4_weight_temp_sel = internal global %struct.sensor_device_attribute { %struct.device_attribute { %struct.attribute { i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.115, i32 0, i32 0), i16 420 }, i64 (%struct.device*, %struct.device_attribute*, i8*)* @show_pwm_weight_temp_sel, i64 (%struct.device*, %struct.device_attribute*, i8*, i64)* @store_pwm_weight_temp_sel }, i32 3 }, align 8
@sensor_dev_attr_pwm4_weight_temp_step = internal global %struct.sensor_device_attribute_2 { %struct.device_attribute { %struct.attribute { i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.116, i32 0, i32 0), i16 420 }, i64 (%struct.device*, %struct.device_attribute*, i8*)* @show_weight_temp, i64 (%struct.device*, %struct.device_attribute*, i8*, i64)* @store_weight_temp }, i8 0, i8 3 }, align 8
@sensor_dev_attr_pwm4_weight_temp_step_tol = internal global %struct.sensor_device_attribute_2 { %struct.device_attribute { %struct.attribute { i8* getelementptr inbounds ([26 x i8], [26 x i8]* @.str.117, i32 0, i32 0), i16 420 }, i64 (%struct.device*, %struct.device_attribute*, i8*)* @show_weight_temp, i64 (%struct.device*, %struct.device_attribute*, i8*, i64)* @store_weight_temp }, i8 1, i8 3 }, align 8
@sensor_dev_attr_pwm4_weight_temp_step_base = internal global %struct.sensor_device_attribute_2 { %struct.device_attribute { %struct.attribute { i8* getelementptr inbounds ([27 x i8], [27 x i8]* @.str.118, i32 0, i32 0), i16 420 }, i64 (%struct.device*, %struct.device_attribute*, i8*)* @show_weight_temp, i64 (%struct.device*, %struct.device_attribute*, i8*, i64)* @store_weight_temp }, i8 2, i8 3 }, align 8
@sensor_dev_attr_pwm4_weight_duty_step = internal global %struct.sensor_device_attribute_2 { %struct.device_attribute { %struct.attribute { i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.119, i32 0, i32 0), i16 420 }, i64 (%struct.device*, %struct.device_attribute*, i8*)* @show_pwm, i64 (%struct.device*, %struct.device_attribute*, i8*, i64)* @store_pwm }, i8 5, i8 3 }, align 8
@sensor_dev_attr_pwm5 = internal global %struct.sensor_device_attribute_2 { %struct.device_attribute { %struct.attribute { i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.120, i32 0, i32 0), i16 420 }, i64 (%struct.device*, %struct.device_attribute*, i8*)* @show_pwm, i64 (%struct.device*, %struct.device_attribute*, i8*, i64)* @store_pwm }, i8 0, i8 4 }, align 8
@sensor_dev_attr_pwm5_mode = internal global %struct.sensor_device_attribute { %struct.device_attribute { %struct.attribute { i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.121, i32 0, i32 0), i16 420 }, i64 (%struct.device*, %struct.device_attribute*, i8*)* @show_pwm_mode, i64 (%struct.device*, %struct.device_attribute*, i8*, i64)* @store_pwm_mode }, i32 4 }, align 8
@sensor_dev_attr_pwm5_enable = internal global %struct.sensor_device_attribute { %struct.device_attribute { %struct.attribute { i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.122, i32 0, i32 0), i16 420 }, i64 (%struct.device*, %struct.device_attribute*, i8*)* @show_pwm_enable, i64 (%struct.device*, %struct.device_attribute*, i8*, i64)* @store_pwm_enable }, i32 4 }, align 8
@sensor_dev_attr_pwm5_temp_sel = internal global %struct.sensor_device_attribute { %struct.device_attribute { %struct.attribute { i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.123, i32 0, i32 0), i16 420 }, i64 (%struct.device*, %struct.device_attribute*, i8*)* @show_pwm_temp_sel, i64 (%struct.device*, %struct.device_attribute*, i8*, i64)* @store_pwm_temp_sel }, i32 4 }, align 8
@sensor_dev_attr_pwm5_temp_tolerance = internal global %struct.sensor_device_attribute_2 { %struct.device_attribute { %struct.attribute { i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.124, i32 0, i32 0), i16 420 }, i64 (%struct.device*, %struct.device_attribute*, i8*)* @show_temp_tolerance, i64 (%struct.device*, %struct.device_attribute*, i8*, i64)* @store_temp_tolerance }, i8 0, i8 4 }, align 8
@sensor_dev_attr_pwm5_crit_temp_tolerance = internal global %struct.sensor_device_attribute_2 { %struct.device_attribute { %struct.attribute { i8* getelementptr inbounds ([25 x i8], [25 x i8]* @.str.125, i32 0, i32 0), i16 420 }, i64 (%struct.device*, %struct.device_attribute*, i8*)* @show_temp_tolerance, i64 (%struct.device*, %struct.device_attribute*, i8*, i64)* @store_temp_tolerance }, i8 1, i8 4 }, align 8
@sensor_dev_attr_pwm5_target_temp = internal global %struct.sensor_device_attribute { %struct.device_attribute { %struct.attribute { i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.126, i32 0, i32 0), i16 420 }, i64 (%struct.device*, %struct.device_attribute*, i8*)* @show_target_temp, i64 (%struct.device*, %struct.device_attribute*, i8*, i64)* @store_target_temp }, i32 4 }, align 8
@sensor_dev_attr_fan5_target = internal global %struct.sensor_device_attribute { %struct.device_attribute { %struct.attribute { i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.127, i32 0, i32 0), i16 420 }, i64 (%struct.device*, %struct.device_attribute*, i8*)* @show_target_speed, i64 (%struct.device*, %struct.device_attribute*, i8*, i64)* @store_target_speed }, i32 4 }, align 8
@sensor_dev_attr_fan5_tolerance = internal global %struct.sensor_device_attribute { %struct.device_attribute { %struct.attribute { i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.128, i32 0, i32 0), i16 420 }, i64 (%struct.device*, %struct.device_attribute*, i8*)* @show_speed_tolerance, i64 (%struct.device*, %struct.device_attribute*, i8*, i64)* @store_speed_tolerance }, i32 4 }, align 8
@sensor_dev_attr_pwm5_stop_time = internal global %struct.sensor_device_attribute_2 { %struct.device_attribute { %struct.attribute { i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.129, i32 0, i32 0), i16 420 }, i64 (%struct.device*, %struct.device_attribute*, i8*)* @show_fan_time, i64 (%struct.device*, %struct.device_attribute*, i8*, i64)* @store_fan_time }, i8 0, i8 4 }, align 8
@sensor_dev_attr_pwm5_step_up_time = internal global %struct.sensor_device_attribute_2 { %struct.device_attribute { %struct.attribute { i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.130, i32 0, i32 0), i16 420 }, i64 (%struct.device*, %struct.device_attribute*, i8*)* @show_fan_time, i64 (%struct.device*, %struct.device_attribute*, i8*, i64)* @store_fan_time }, i8 1, i8 4 }, align 8
@sensor_dev_attr_pwm5_step_down_time = internal global %struct.sensor_device_attribute_2 { %struct.device_attribute { %struct.attribute { i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.131, i32 0, i32 0), i16 420 }, i64 (%struct.device*, %struct.device_attribute*, i8*)* @show_fan_time, i64 (%struct.device*, %struct.device_attribute*, i8*, i64)* @store_fan_time }, i8 2, i8 4 }, align 8
@sensor_dev_attr_pwm5_start = internal global %struct.sensor_device_attribute_2 { %struct.device_attribute { %struct.attribute { i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.132, i32 0, i32 0), i16 420 }, i64 (%struct.device*, %struct.device_attribute*, i8*)* @show_pwm, i64 (%struct.device*, %struct.device_attribute*, i8*, i64)* @store_pwm }, i8 1, i8 4 }, align 8
@sensor_dev_attr_pwm5_floor = internal global %struct.sensor_device_attribute_2 { %struct.device_attribute { %struct.attribute { i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.133, i32 0, i32 0), i16 420 }, i64 (%struct.device*, %struct.device_attribute*, i8*)* @show_pwm, i64 (%struct.device*, %struct.device_attribute*, i8*, i64)* @store_pwm }, i8 2, i8 4 }, align 8
@sensor_dev_attr_pwm5_weight_temp_sel = internal global %struct.sensor_device_attribute { %struct.device_attribute { %struct.attribute { i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.134, i32 0, i32 0), i16 420 }, i64 (%struct.device*, %struct.device_attribute*, i8*)* @show_pwm_weight_temp_sel, i64 (%struct.device*, %struct.device_attribute*, i8*, i64)* @store_pwm_weight_temp_sel }, i32 4 }, align 8
@sensor_dev_attr_pwm5_weight_temp_step = internal global %struct.sensor_device_attribute_2 { %struct.device_attribute { %struct.attribute { i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.135, i32 0, i32 0), i16 420 }, i64 (%struct.device*, %struct.device_attribute*, i8*)* @show_weight_temp, i64 (%struct.device*, %struct.device_attribute*, i8*, i64)* @store_weight_temp }, i8 0, i8 4 }, align 8
@sensor_dev_attr_pwm5_weight_temp_step_tol = internal global %struct.sensor_device_attribute_2 { %struct.device_attribute { %struct.attribute { i8* getelementptr inbounds ([26 x i8], [26 x i8]* @.str.136, i32 0, i32 0), i16 420 }, i64 (%struct.device*, %struct.device_attribute*, i8*)* @show_weight_temp, i64 (%struct.device*, %struct.device_attribute*, i8*, i64)* @store_weight_temp }, i8 1, i8 4 }, align 8
@sensor_dev_attr_pwm5_weight_temp_step_base = internal global %struct.sensor_device_attribute_2 { %struct.device_attribute { %struct.attribute { i8* getelementptr inbounds ([27 x i8], [27 x i8]* @.str.137, i32 0, i32 0), i16 420 }, i64 (%struct.device*, %struct.device_attribute*, i8*)* @show_weight_temp, i64 (%struct.device*, %struct.device_attribute*, i8*, i64)* @store_weight_temp }, i8 2, i8 4 }, align 8
@sensor_dev_attr_pwm5_weight_duty_step = internal global %struct.sensor_device_attribute_2 { %struct.device_attribute { %struct.attribute { i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.138, i32 0, i32 0), i16 420 }, i64 (%struct.device*, %struct.device_attribute*, i8*)* @show_pwm, i64 (%struct.device*, %struct.device_attribute*, i8*, i64)* @store_pwm }, i8 5, i8 4 }, align 8
@.str.42 = private unnamed_addr constant [5 x i8] c"pwm1\00", align 1
@jiffies = external global i64, align 8
@NCT6775_REG_CRITICAL_ENAB = internal constant [3 x i16] [i16 308, i16 564, i16 820], align 2
@NCT6779_REG_CRITICAL_PWM_ENABLE = internal constant [5 x i16] [i16 310, i16 566, i16 822, i16 2102, i16 2358], align 2
@NCT6779_REG_CRITICAL_PWM = internal constant [5 x i16] [i16 311, i16 567, i16 823, i16 2103, i16 2359], align 2
@.str.43 = private unnamed_addr constant [10 x i8] c"pwm1_mode\00", align 1
@.str.44 = private unnamed_addr constant [12 x i8] c"pwm1_enable\00", align 1
@.str.45 = private unnamed_addr constant [61 x i8] c"Inconsistent trip points, not switching to SmartFan IV mode\0A\00", align 1
@.str.46 = private unnamed_addr constant [34 x i8] c"Adjust trip points and try again\0A\00", align 1
@.str.47 = private unnamed_addr constant [14 x i8] c"pwm1_temp_sel\00", align 1
@.str.48 = private unnamed_addr constant [20 x i8] c"pwm1_temp_tolerance\00", align 1
@.str.49 = private unnamed_addr constant [25 x i8] c"pwm1_crit_temp_tolerance\00", align 1
@.str.50 = private unnamed_addr constant [17 x i8] c"pwm1_target_temp\00", align 1
@.str.51 = private unnamed_addr constant [12 x i8] c"fan1_target\00", align 1
@.str.52 = private unnamed_addr constant [15 x i8] c"fan1_tolerance\00", align 1
@.str.53 = private unnamed_addr constant [15 x i8] c"pwm1_stop_time\00", align 1
@.str.54 = private unnamed_addr constant [18 x i8] c"pwm1_step_up_time\00", align 1
@.str.55 = private unnamed_addr constant [20 x i8] c"pwm1_step_down_time\00", align 1
@.str.56 = private unnamed_addr constant [11 x i8] c"pwm1_start\00", align 1
@.str.57 = private unnamed_addr constant [11 x i8] c"pwm1_floor\00", align 1
@.str.58 = private unnamed_addr constant [21 x i8] c"pwm1_weight_temp_sel\00", align 1
@.str.59 = private unnamed_addr constant [22 x i8] c"pwm1_weight_temp_step\00", align 1
@.str.60 = private unnamed_addr constant [26 x i8] c"pwm1_weight_temp_step_tol\00", align 1
@.str.61 = private unnamed_addr constant [27 x i8] c"pwm1_weight_temp_step_base\00", align 1
@.str.62 = private unnamed_addr constant [22 x i8] c"pwm1_weight_duty_step\00", align 1
@.str.63 = private unnamed_addr constant [5 x i8] c"pwm2\00", align 1
@.str.64 = private unnamed_addr constant [10 x i8] c"pwm2_mode\00", align 1
@.str.65 = private unnamed_addr constant [12 x i8] c"pwm2_enable\00", align 1
@.str.66 = private unnamed_addr constant [14 x i8] c"pwm2_temp_sel\00", align 1
@.str.67 = private unnamed_addr constant [20 x i8] c"pwm2_temp_tolerance\00", align 1
@.str.68 = private unnamed_addr constant [25 x i8] c"pwm2_crit_temp_tolerance\00", align 1
@.str.69 = private unnamed_addr constant [17 x i8] c"pwm2_target_temp\00", align 1
@.str.70 = private unnamed_addr constant [12 x i8] c"fan2_target\00", align 1
@.str.71 = private unnamed_addr constant [15 x i8] c"fan2_tolerance\00", align 1
@.str.72 = private unnamed_addr constant [15 x i8] c"pwm2_stop_time\00", align 1
@.str.73 = private unnamed_addr constant [18 x i8] c"pwm2_step_up_time\00", align 1
@.str.74 = private unnamed_addr constant [20 x i8] c"pwm2_step_down_time\00", align 1
@.str.75 = private unnamed_addr constant [11 x i8] c"pwm2_start\00", align 1
@.str.76 = private unnamed_addr constant [11 x i8] c"pwm2_floor\00", align 1
@.str.77 = private unnamed_addr constant [21 x i8] c"pwm2_weight_temp_sel\00", align 1
@.str.78 = private unnamed_addr constant [22 x i8] c"pwm2_weight_temp_step\00", align 1
@.str.79 = private unnamed_addr constant [26 x i8] c"pwm2_weight_temp_step_tol\00", align 1
@.str.80 = private unnamed_addr constant [27 x i8] c"pwm2_weight_temp_step_base\00", align 1
@.str.81 = private unnamed_addr constant [22 x i8] c"pwm2_weight_duty_step\00", align 1
@.str.82 = private unnamed_addr constant [5 x i8] c"pwm3\00", align 1
@.str.83 = private unnamed_addr constant [10 x i8] c"pwm3_mode\00", align 1
@.str.84 = private unnamed_addr constant [12 x i8] c"pwm3_enable\00", align 1
@.str.85 = private unnamed_addr constant [14 x i8] c"pwm3_temp_sel\00", align 1
@.str.86 = private unnamed_addr constant [20 x i8] c"pwm3_temp_tolerance\00", align 1
@.str.87 = private unnamed_addr constant [25 x i8] c"pwm3_crit_temp_tolerance\00", align 1
@.str.88 = private unnamed_addr constant [17 x i8] c"pwm3_target_temp\00", align 1
@.str.89 = private unnamed_addr constant [12 x i8] c"fan3_target\00", align 1
@.str.90 = private unnamed_addr constant [15 x i8] c"fan3_tolerance\00", align 1
@.str.91 = private unnamed_addr constant [15 x i8] c"pwm3_stop_time\00", align 1
@.str.92 = private unnamed_addr constant [18 x i8] c"pwm3_step_up_time\00", align 1
@.str.93 = private unnamed_addr constant [20 x i8] c"pwm3_step_down_time\00", align 1
@.str.94 = private unnamed_addr constant [11 x i8] c"pwm3_start\00", align 1
@.str.95 = private unnamed_addr constant [11 x i8] c"pwm3_floor\00", align 1
@.str.96 = private unnamed_addr constant [21 x i8] c"pwm3_weight_temp_sel\00", align 1
@.str.97 = private unnamed_addr constant [22 x i8] c"pwm3_weight_temp_step\00", align 1
@.str.98 = private unnamed_addr constant [26 x i8] c"pwm3_weight_temp_step_tol\00", align 1
@.str.99 = private unnamed_addr constant [27 x i8] c"pwm3_weight_temp_step_base\00", align 1
@.str.100 = private unnamed_addr constant [22 x i8] c"pwm3_weight_duty_step\00", align 1
@.str.101 = private unnamed_addr constant [5 x i8] c"pwm4\00", align 1
@.str.102 = private unnamed_addr constant [10 x i8] c"pwm4_mode\00", align 1
@.str.103 = private unnamed_addr constant [12 x i8] c"pwm4_enable\00", align 1
@.str.104 = private unnamed_addr constant [14 x i8] c"pwm4_temp_sel\00", align 1
@.str.105 = private unnamed_addr constant [20 x i8] c"pwm4_temp_tolerance\00", align 1
@.str.106 = private unnamed_addr constant [25 x i8] c"pwm4_crit_temp_tolerance\00", align 1
@.str.107 = private unnamed_addr constant [17 x i8] c"pwm4_target_temp\00", align 1
@.str.108 = private unnamed_addr constant [12 x i8] c"fan4_target\00", align 1
@.str.109 = private unnamed_addr constant [15 x i8] c"fan4_tolerance\00", align 1
@.str.110 = private unnamed_addr constant [15 x i8] c"pwm4_stop_time\00", align 1
@.str.111 = private unnamed_addr constant [18 x i8] c"pwm4_step_up_time\00", align 1
@.str.112 = private unnamed_addr constant [20 x i8] c"pwm4_step_down_time\00", align 1
@.str.113 = private unnamed_addr constant [11 x i8] c"pwm4_start\00", align 1
@.str.114 = private unnamed_addr constant [11 x i8] c"pwm4_floor\00", align 1
@.str.115 = private unnamed_addr constant [21 x i8] c"pwm4_weight_temp_sel\00", align 1
@.str.116 = private unnamed_addr constant [22 x i8] c"pwm4_weight_temp_step\00", align 1
@.str.117 = private unnamed_addr constant [26 x i8] c"pwm4_weight_temp_step_tol\00", align 1
@.str.118 = private unnamed_addr constant [27 x i8] c"pwm4_weight_temp_step_base\00", align 1
@.str.119 = private unnamed_addr constant [22 x i8] c"pwm4_weight_duty_step\00", align 1
@.str.120 = private unnamed_addr constant [5 x i8] c"pwm5\00", align 1
@.str.121 = private unnamed_addr constant [10 x i8] c"pwm5_mode\00", align 1
@.str.122 = private unnamed_addr constant [12 x i8] c"pwm5_enable\00", align 1
@.str.123 = private unnamed_addr constant [14 x i8] c"pwm5_temp_sel\00", align 1
@.str.124 = private unnamed_addr constant [20 x i8] c"pwm5_temp_tolerance\00", align 1
@.str.125 = private unnamed_addr constant [25 x i8] c"pwm5_crit_temp_tolerance\00", align 1
@.str.126 = private unnamed_addr constant [17 x i8] c"pwm5_target_temp\00", align 1
@.str.127 = private unnamed_addr constant [12 x i8] c"fan5_target\00", align 1
@.str.128 = private unnamed_addr constant [15 x i8] c"fan5_tolerance\00", align 1
@.str.129 = private unnamed_addr constant [15 x i8] c"pwm5_stop_time\00", align 1
@.str.130 = private unnamed_addr constant [18 x i8] c"pwm5_step_up_time\00", align 1
@.str.131 = private unnamed_addr constant [20 x i8] c"pwm5_step_down_time\00", align 1
@.str.132 = private unnamed_addr constant [11 x i8] c"pwm5_start\00", align 1
@.str.133 = private unnamed_addr constant [11 x i8] c"pwm5_floor\00", align 1
@.str.134 = private unnamed_addr constant [21 x i8] c"pwm5_weight_temp_sel\00", align 1
@.str.135 = private unnamed_addr constant [22 x i8] c"pwm5_weight_temp_step\00", align 1
@.str.136 = private unnamed_addr constant [26 x i8] c"pwm5_weight_temp_step_tol\00", align 1
@.str.137 = private unnamed_addr constant [27 x i8] c"pwm5_weight_temp_step_base\00", align 1
@.str.138 = private unnamed_addr constant [22 x i8] c"pwm5_weight_duty_step\00", align 1
@.str.139 = private unnamed_addr constant [9 x i8] c"pwm1_max\00", align 1
@.str.140 = private unnamed_addr constant [9 x i8] c"pwm2_max\00", align 1
@.str.141 = private unnamed_addr constant [9 x i8] c"pwm3_max\00", align 1
@.str.142 = private unnamed_addr constant [9 x i8] c"pwm4_max\00", align 1
@.str.143 = private unnamed_addr constant [9 x i8] c"pwm5_max\00", align 1
@.str.144 = private unnamed_addr constant [10 x i8] c"pwm1_step\00", align 1
@.str.145 = private unnamed_addr constant [10 x i8] c"pwm2_step\00", align 1
@.str.146 = private unnamed_addr constant [10 x i8] c"pwm3_step\00", align 1
@.str.147 = private unnamed_addr constant [10 x i8] c"pwm4_step\00", align 1
@.str.148 = private unnamed_addr constant [10 x i8] c"pwm5_step\00", align 1
@.str.149 = private unnamed_addr constant [22 x i8] c"pwm1_weight_duty_base\00", align 1
@.str.150 = private unnamed_addr constant [22 x i8] c"pwm2_weight_duty_base\00", align 1
@.str.151 = private unnamed_addr constant [22 x i8] c"pwm3_weight_duty_base\00", align 1
@.str.152 = private unnamed_addr constant [22 x i8] c"pwm4_weight_duty_base\00", align 1
@.str.153 = private unnamed_addr constant [22 x i8] c"pwm5_weight_duty_base\00", align 1
@.str.154 = private unnamed_addr constant [21 x i8] c"pwm1_auto_point1_pwm\00", align 1
@.str.155 = private unnamed_addr constant [22 x i8] c"pwm1_auto_point1_temp\00", align 1
@.str.156 = private unnamed_addr constant [21 x i8] c"pwm1_auto_point2_pwm\00", align 1
@.str.157 = private unnamed_addr constant [22 x i8] c"pwm1_auto_point2_temp\00", align 1
@.str.158 = private unnamed_addr constant [21 x i8] c"pwm1_auto_point3_pwm\00", align 1
@.str.159 = private unnamed_addr constant [22 x i8] c"pwm1_auto_point3_temp\00", align 1
@.str.160 = private unnamed_addr constant [21 x i8] c"pwm1_auto_point4_pwm\00", align 1
@.str.161 = private unnamed_addr constant [22 x i8] c"pwm1_auto_point4_temp\00", align 1
@.str.162 = private unnamed_addr constant [21 x i8] c"pwm1_auto_point5_pwm\00", align 1
@.str.163 = private unnamed_addr constant [22 x i8] c"pwm1_auto_point5_temp\00", align 1
@.str.164 = private unnamed_addr constant [21 x i8] c"pwm1_auto_point6_pwm\00", align 1
@.str.165 = private unnamed_addr constant [22 x i8] c"pwm1_auto_point6_temp\00", align 1
@.str.166 = private unnamed_addr constant [21 x i8] c"pwm1_auto_point7_pwm\00", align 1
@.str.167 = private unnamed_addr constant [22 x i8] c"pwm1_auto_point7_temp\00", align 1
@.str.168 = private unnamed_addr constant [21 x i8] c"pwm2_auto_point1_pwm\00", align 1
@.str.169 = private unnamed_addr constant [22 x i8] c"pwm2_auto_point1_temp\00", align 1
@.str.170 = private unnamed_addr constant [21 x i8] c"pwm2_auto_point2_pwm\00", align 1
@.str.171 = private unnamed_addr constant [22 x i8] c"pwm2_auto_point2_temp\00", align 1
@.str.172 = private unnamed_addr constant [21 x i8] c"pwm2_auto_point3_pwm\00", align 1
@.str.173 = private unnamed_addr constant [22 x i8] c"pwm2_auto_point3_temp\00", align 1
@.str.174 = private unnamed_addr constant [21 x i8] c"pwm2_auto_point4_pwm\00", align 1
@.str.175 = private unnamed_addr constant [22 x i8] c"pwm2_auto_point4_temp\00", align 1
@.str.176 = private unnamed_addr constant [21 x i8] c"pwm2_auto_point5_pwm\00", align 1
@.str.177 = private unnamed_addr constant [22 x i8] c"pwm2_auto_point5_temp\00", align 1
@.str.178 = private unnamed_addr constant [21 x i8] c"pwm2_auto_point6_pwm\00", align 1
@.str.179 = private unnamed_addr constant [22 x i8] c"pwm2_auto_point6_temp\00", align 1
@.str.180 = private unnamed_addr constant [21 x i8] c"pwm2_auto_point7_pwm\00", align 1
@.str.181 = private unnamed_addr constant [22 x i8] c"pwm2_auto_point7_temp\00", align 1
@.str.182 = private unnamed_addr constant [21 x i8] c"pwm3_auto_point1_pwm\00", align 1
@.str.183 = private unnamed_addr constant [22 x i8] c"pwm3_auto_point1_temp\00", align 1
@.str.184 = private unnamed_addr constant [21 x i8] c"pwm3_auto_point2_pwm\00", align 1
@.str.185 = private unnamed_addr constant [22 x i8] c"pwm3_auto_point2_temp\00", align 1
@.str.186 = private unnamed_addr constant [21 x i8] c"pwm3_auto_point3_pwm\00", align 1
@.str.187 = private unnamed_addr constant [22 x i8] c"pwm3_auto_point3_temp\00", align 1
@.str.188 = private unnamed_addr constant [21 x i8] c"pwm3_auto_point4_pwm\00", align 1
@.str.189 = private unnamed_addr constant [22 x i8] c"pwm3_auto_point4_temp\00", align 1
@.str.190 = private unnamed_addr constant [21 x i8] c"pwm3_auto_point5_pwm\00", align 1
@.str.191 = private unnamed_addr constant [22 x i8] c"pwm3_auto_point5_temp\00", align 1
@.str.192 = private unnamed_addr constant [21 x i8] c"pwm3_auto_point6_pwm\00", align 1
@.str.193 = private unnamed_addr constant [22 x i8] c"pwm3_auto_point6_temp\00", align 1
@.str.194 = private unnamed_addr constant [21 x i8] c"pwm3_auto_point7_pwm\00", align 1
@.str.195 = private unnamed_addr constant [22 x i8] c"pwm3_auto_point7_temp\00", align 1
@.str.196 = private unnamed_addr constant [21 x i8] c"pwm4_auto_point1_pwm\00", align 1
@.str.197 = private unnamed_addr constant [22 x i8] c"pwm4_auto_point1_temp\00", align 1
@.str.198 = private unnamed_addr constant [21 x i8] c"pwm4_auto_point2_pwm\00", align 1
@.str.199 = private unnamed_addr constant [22 x i8] c"pwm4_auto_point2_temp\00", align 1
@.str.200 = private unnamed_addr constant [21 x i8] c"pwm4_auto_point3_pwm\00", align 1
@.str.201 = private unnamed_addr constant [22 x i8] c"pwm4_auto_point3_temp\00", align 1
@.str.202 = private unnamed_addr constant [21 x i8] c"pwm4_auto_point4_pwm\00", align 1
@.str.203 = private unnamed_addr constant [22 x i8] c"pwm4_auto_point4_temp\00", align 1
@.str.204 = private unnamed_addr constant [21 x i8] c"pwm4_auto_point5_pwm\00", align 1
@.str.205 = private unnamed_addr constant [22 x i8] c"pwm4_auto_point5_temp\00", align 1
@.str.206 = private unnamed_addr constant [21 x i8] c"pwm4_auto_point6_pwm\00", align 1
@.str.207 = private unnamed_addr constant [22 x i8] c"pwm4_auto_point6_temp\00", align 1
@.str.208 = private unnamed_addr constant [21 x i8] c"pwm4_auto_point7_pwm\00", align 1
@.str.209 = private unnamed_addr constant [22 x i8] c"pwm4_auto_point7_temp\00", align 1
@.str.210 = private unnamed_addr constant [21 x i8] c"pwm5_auto_point1_pwm\00", align 1
@.str.211 = private unnamed_addr constant [22 x i8] c"pwm5_auto_point1_temp\00", align 1
@.str.212 = private unnamed_addr constant [21 x i8] c"pwm5_auto_point2_pwm\00", align 1
@.str.213 = private unnamed_addr constant [22 x i8] c"pwm5_auto_point2_temp\00", align 1
@.str.214 = private unnamed_addr constant [21 x i8] c"pwm5_auto_point3_pwm\00", align 1
@.str.215 = private unnamed_addr constant [22 x i8] c"pwm5_auto_point3_temp\00", align 1
@.str.216 = private unnamed_addr constant [21 x i8] c"pwm5_auto_point4_pwm\00", align 1
@.str.217 = private unnamed_addr constant [22 x i8] c"pwm5_auto_point4_temp\00", align 1
@.str.218 = private unnamed_addr constant [21 x i8] c"pwm5_auto_point5_pwm\00", align 1
@.str.219 = private unnamed_addr constant [22 x i8] c"pwm5_auto_point5_temp\00", align 1
@.str.220 = private unnamed_addr constant [21 x i8] c"pwm5_auto_point6_pwm\00", align 1
@.str.221 = private unnamed_addr constant [22 x i8] c"pwm5_auto_point6_temp\00", align 1
@.str.222 = private unnamed_addr constant [21 x i8] c"pwm5_auto_point7_pwm\00", align 1
@.str.223 = private unnamed_addr constant [22 x i8] c"pwm5_auto_point7_temp\00", align 1
@nct6775_attributes_in = internal global [15 x [5 x %struct.attribute*]] [[5 x %struct.attribute*] [%struct.attribute* getelementptr inbounds (%struct.sensor_device_attribute_2, %struct.sensor_device_attribute_2* @sensor_dev_attr_in0_input, i32 0, i32 0, i32 0), %struct.attribute* getelementptr inbounds (%struct.sensor_device_attribute_2, %struct.sensor_device_attribute_2* @sensor_dev_attr_in0_min, i32 0, i32 0, i32 0), %struct.attribute* getelementptr inbounds (%struct.sensor_device_attribute_2, %struct.sensor_device_attribute_2* @sensor_dev_attr_in0_max, i32 0, i32 0, i32 0), %struct.attribute* getelementptr inbounds (%struct.sensor_device_attribute, %struct.sensor_device_attribute* @sensor_dev_attr_in0_alarm, i32 0, i32 0, i32 0), %struct.attribute* null], [5 x %struct.attribute*] [%struct.attribute* getelementptr inbounds (%struct.sensor_device_attribute_2, %struct.sensor_device_attribute_2* @sensor_dev_attr_in1_input, i32 0, i32 0, i32 0), %struct.attribute* getelementptr inbounds (%struct.sensor_device_attribute_2, %struct.sensor_device_attribute_2* @sensor_dev_attr_in1_min, i32 0, i32 0, i32 0), %struct.attribute* getelementptr inbounds (%struct.sensor_device_attribute_2, %struct.sensor_device_attribute_2* @sensor_dev_attr_in1_max, i32 0, i32 0, i32 0), %struct.attribute* getelementptr inbounds (%struct.sensor_device_attribute, %struct.sensor_device_attribute* @sensor_dev_attr_in1_alarm, i32 0, i32 0, i32 0), %struct.attribute* null], [5 x %struct.attribute*] [%struct.attribute* getelementptr inbounds (%struct.sensor_device_attribute_2, %struct.sensor_device_attribute_2* @sensor_dev_attr_in2_input, i32 0, i32 0, i32 0), %struct.attribute* getelementptr inbounds (%struct.sensor_device_attribute_2, %struct.sensor_device_attribute_2* @sensor_dev_attr_in2_min, i32 0, i32 0, i32 0), %struct.attribute* getelementptr inbounds (%struct.sensor_device_attribute_2, %struct.sensor_device_attribute_2* @sensor_dev_attr_in2_max, i32 0, i32 0, i32 0), %struct.attribute* getelementptr inbounds (%struct.sensor_device_attribute, %struct.sensor_device_attribute* @sensor_dev_attr_in2_alarm, i32 0, i32 0, i32 0), %struct.attribute* null], [5 x %struct.attribute*] [%struct.attribute* getelementptr inbounds (%struct.sensor_device_attribute_2, %struct.sensor_device_attribute_2* @sensor_dev_attr_in3_input, i32 0, i32 0, i32 0), %struct.attribute* getelementptr inbounds (%struct.sensor_device_attribute_2, %struct.sensor_device_attribute_2* @sensor_dev_attr_in3_min, i32 0, i32 0, i32 0), %struct.attribute* getelementptr inbounds (%struct.sensor_device_attribute_2, %struct.sensor_device_attribute_2* @sensor_dev_attr_in3_max, i32 0, i32 0, i32 0), %struct.attribute* getelementptr inbounds (%struct.sensor_device_attribute, %struct.sensor_device_attribute* @sensor_dev_attr_in3_alarm, i32 0, i32 0, i32 0), %struct.attribute* null], [5 x %struct.attribute*] [%struct.attribute* getelementptr inbounds (%struct.sensor_device_attribute_2, %struct.sensor_device_attribute_2* @sensor_dev_attr_in4_input, i32 0, i32 0, i32 0), %struct.attribute* getelementptr inbounds (%struct.sensor_device_attribute_2, %struct.sensor_device_attribute_2* @sensor_dev_attr_in4_min, i32 0, i32 0, i32 0), %struct.attribute* getelementptr inbounds (%struct.sensor_device_attribute_2, %struct.sensor_device_attribute_2* @sensor_dev_attr_in4_max, i32 0, i32 0, i32 0), %struct.attribute* getelementptr inbounds (%struct.sensor_device_attribute, %struct.sensor_device_attribute* @sensor_dev_attr_in4_alarm, i32 0, i32 0, i32 0), %struct.attribute* null], [5 x %struct.attribute*] [%struct.attribute* getelementptr inbounds (%struct.sensor_device_attribute_2, %struct.sensor_device_attribute_2* @sensor_dev_attr_in5_input, i32 0, i32 0, i32 0), %struct.attribute* getelementptr inbounds (%struct.sensor_device_attribute_2, %struct.sensor_device_attribute_2* @sensor_dev_attr_in5_min, i32 0, i32 0, i32 0), %struct.attribute* getelementptr inbounds (%struct.sensor_device_attribute_2, %struct.sensor_device_attribute_2* @sensor_dev_attr_in5_max, i32 0, i32 0, i32 0), %struct.attribute* getelementptr inbounds (%struct.sensor_device_attribute, %struct.sensor_device_attribute* @sensor_dev_attr_in5_alarm, i32 0, i32 0, i32 0), %struct.attribute* null], [5 x %struct.attribute*] [%struct.attribute* getelementptr inbounds (%struct.sensor_device_attribute_2, %struct.sensor_device_attribute_2* @sensor_dev_attr_in6_input, i32 0, i32 0, i32 0), %struct.attribute* getelementptr inbounds (%struct.sensor_device_attribute_2, %struct.sensor_device_attribute_2* @sensor_dev_attr_in6_min, i32 0, i32 0, i32 0), %struct.attribute* getelementptr inbounds (%struct.sensor_device_attribute_2, %struct.sensor_device_attribute_2* @sensor_dev_attr_in6_max, i32 0, i32 0, i32 0), %struct.attribute* getelementptr inbounds (%struct.sensor_device_attribute, %struct.sensor_device_attribute* @sensor_dev_attr_in6_alarm, i32 0, i32 0, i32 0), %struct.attribute* null], [5 x %struct.attribute*] [%struct.attribute* getelementptr inbounds (%struct.sensor_device_attribute_2, %struct.sensor_device_attribute_2* @sensor_dev_attr_in7_input, i32 0, i32 0, i32 0), %struct.attribute* getelementptr inbounds (%struct.sensor_device_attribute_2, %struct.sensor_device_attribute_2* @sensor_dev_attr_in7_min, i32 0, i32 0, i32 0), %struct.attribute* getelementptr inbounds (%struct.sensor_device_attribute_2, %struct.sensor_device_attribute_2* @sensor_dev_attr_in7_max, i32 0, i32 0, i32 0), %struct.attribute* getelementptr inbounds (%struct.sensor_device_attribute, %struct.sensor_device_attribute* @sensor_dev_attr_in7_alarm, i32 0, i32 0, i32 0), %struct.attribute* null], [5 x %struct.attribute*] [%struct.attribute* getelementptr inbounds (%struct.sensor_device_attribute_2, %struct.sensor_device_attribute_2* @sensor_dev_attr_in8_input, i32 0, i32 0, i32 0), %struct.attribute* getelementptr inbounds (%struct.sensor_device_attribute_2, %struct.sensor_device_attribute_2* @sensor_dev_attr_in8_min, i32 0, i32 0, i32 0), %struct.attribute* getelementptr inbounds (%struct.sensor_device_attribute_2, %struct.sensor_device_attribute_2* @sensor_dev_attr_in8_max, i32 0, i32 0, i32 0), %struct.attribute* getelementptr inbounds (%struct.sensor_device_attribute, %struct.sensor_device_attribute* @sensor_dev_attr_in8_alarm, i32 0, i32 0, i32 0), %struct.attribute* null], [5 x %struct.attribute*] [%struct.attribute* getelementptr inbounds (%struct.sensor_device_attribute_2, %struct.sensor_device_attribute_2* @sensor_dev_attr_in9_input, i32 0, i32 0, i32 0), %struct.attribute* getelementptr inbounds (%struct.sensor_device_attribute_2, %struct.sensor_device_attribute_2* @sensor_dev_attr_in9_min, i32 0, i32 0, i32 0), %struct.attribute* getelementptr inbounds (%struct.sensor_device_attribute_2, %struct.sensor_device_attribute_2* @sensor_dev_attr_in9_max, i32 0, i32 0, i32 0), %struct.attribute* getelementptr inbounds (%struct.sensor_device_attribute, %struct.sensor_device_attribute* @sensor_dev_attr_in9_alarm, i32 0, i32 0, i32 0), %struct.attribute* null], [5 x %struct.attribute*] [%struct.attribute* getelementptr inbounds (%struct.sensor_device_attribute_2, %struct.sensor_device_attribute_2* @sensor_dev_attr_in10_input, i32 0, i32 0, i32 0), %struct.attribute* getelementptr inbounds (%struct.sensor_device_attribute_2, %struct.sensor_device_attribute_2* @sensor_dev_attr_in10_min, i32 0, i32 0, i32 0), %struct.attribute* getelementptr inbounds (%struct.sensor_device_attribute_2, %struct.sensor_device_attribute_2* @sensor_dev_attr_in10_max, i32 0, i32 0, i32 0), %struct.attribute* getelementptr inbounds (%struct.sensor_device_attribute, %struct.sensor_device_attribute* @sensor_dev_attr_in10_alarm, i32 0, i32 0, i32 0), %struct.attribute* null], [5 x %struct.attribute*] [%struct.attribute* getelementptr inbounds (%struct.sensor_device_attribute_2, %struct.sensor_device_attribute_2* @sensor_dev_attr_in11_input, i32 0, i32 0, i32 0), %struct.attribute* getelementptr inbounds (%struct.sensor_device_attribute_2, %struct.sensor_device_attribute_2* @sensor_dev_attr_in11_min, i32 0, i32 0, i32 0), %struct.attribute* getelementptr inbounds (%struct.sensor_device_attribute_2, %struct.sensor_device_attribute_2* @sensor_dev_attr_in11_max, i32 0, i32 0, i32 0), %struct.attribute* getelementptr inbounds (%struct.sensor_device_attribute, %struct.sensor_device_attribute* @sensor_dev_attr_in11_alarm, i32 0, i32 0, i32 0), %struct.attribute* null], [5 x %struct.attribute*] [%struct.attribute* getelementptr inbounds (%struct.sensor_device_attribute_2, %struct.sensor_device_attribute_2* @sensor_dev_attr_in12_input, i32 0, i32 0, i32 0), %struct.attribute* getelementptr inbounds (%struct.sensor_device_attribute_2, %struct.sensor_device_attribute_2* @sensor_dev_attr_in12_min, i32 0, i32 0, i32 0), %struct.attribute* getelementptr inbounds (%struct.sensor_device_attribute_2, %struct.sensor_device_attribute_2* @sensor_dev_attr_in12_max, i32 0, i32 0, i32 0), %struct.attribute* getelementptr inbounds (%struct.sensor_device_attribute, %struct.sensor_device_attribute* @sensor_dev_attr_in12_alarm, i32 0, i32 0, i32 0), %struct.attribute* null], [5 x %struct.attribute*] [%struct.attribute* getelementptr inbounds (%struct.sensor_device_attribute_2, %struct.sensor_device_attribute_2* @sensor_dev_attr_in13_input, i32 0, i32 0, i32 0), %struct.attribute* getelementptr inbounds (%struct.sensor_device_attribute_2, %struct.sensor_device_attribute_2* @sensor_dev_attr_in13_min, i32 0, i32 0, i32 0), %struct.attribute* getelementptr inbounds (%struct.sensor_device_attribute_2, %struct.sensor_device_attribute_2* @sensor_dev_attr_in13_max, i32 0, i32 0, i32 0), %struct.attribute* getelementptr inbounds (%struct.sensor_device_attribute, %struct.sensor_device_attribute* @sensor_dev_attr_in13_alarm, i32 0, i32 0, i32 0), %struct.attribute* null], [5 x %struct.attribute*] [%struct.attribute* getelementptr inbounds (%struct.sensor_device_attribute_2, %struct.sensor_device_attribute_2* @sensor_dev_attr_in14_input, i32 0, i32 0, i32 0), %struct.attribute* getelementptr inbounds (%struct.sensor_device_attribute_2, %struct.sensor_device_attribute_2* @sensor_dev_attr_in14_min, i32 0, i32 0, i32 0), %struct.attribute* getelementptr inbounds (%struct.sensor_device_attribute_2, %struct.sensor_device_attribute_2* @sensor_dev_attr_in14_max, i32 0, i32 0, i32 0), %struct.attribute* getelementptr inbounds (%struct.sensor_device_attribute, %struct.sensor_device_attribute* @sensor_dev_attr_in14_alarm, i32 0, i32 0, i32 0), %struct.attribute* null]], align 16
@sensor_dev_attr_in0_input = internal global %struct.sensor_device_attribute_2 { %struct.device_attribute { %struct.attribute { i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.224, i32 0, i32 0), i16 292 }, i64 (%struct.device*, %struct.device_attribute*, i8*)* @show_in_reg, i64 (%struct.device*, %struct.device_attribute*, i8*, i64)* null }, i8 0, i8 0 }, align 8
@sensor_dev_attr_in0_min = internal global %struct.sensor_device_attribute_2 { %struct.device_attribute { %struct.attribute { i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.226, i32 0, i32 0), i16 420 }, i64 (%struct.device*, %struct.device_attribute*, i8*)* @show_in_reg, i64 (%struct.device*, %struct.device_attribute*, i8*, i64)* @store_in_reg }, i8 1, i8 0 }, align 8
@sensor_dev_attr_in0_max = internal global %struct.sensor_device_attribute_2 { %struct.device_attribute { %struct.attribute { i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.227, i32 0, i32 0), i16 420 }, i64 (%struct.device*, %struct.device_attribute*, i8*)* @show_in_reg, i64 (%struct.device*, %struct.device_attribute*, i8*, i64)* @store_in_reg }, i8 2, i8 0 }, align 8
@sensor_dev_attr_in0_alarm = internal global %struct.sensor_device_attribute { %struct.device_attribute { %struct.attribute { i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.228, i32 0, i32 0), i16 292 }, i64 (%struct.device*, %struct.device_attribute*, i8*)* @show_alarm, i64 (%struct.device*, %struct.device_attribute*, i8*, i64)* null }, i32 0 }, align 8
@sensor_dev_attr_in1_input = internal global %struct.sensor_device_attribute_2 { %struct.device_attribute { %struct.attribute { i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.230, i32 0, i32 0), i16 292 }, i64 (%struct.device*, %struct.device_attribute*, i8*)* @show_in_reg, i64 (%struct.device*, %struct.device_attribute*, i8*, i64)* null }, i8 0, i8 1 }, align 8
@sensor_dev_attr_in1_min = internal global %struct.sensor_device_attribute_2 { %struct.device_attribute { %struct.attribute { i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.231, i32 0, i32 0), i16 420 }, i64 (%struct.device*, %struct.device_attribute*, i8*)* @show_in_reg, i64 (%struct.device*, %struct.device_attribute*, i8*, i64)* @store_in_reg }, i8 1, i8 1 }, align 8
@sensor_dev_attr_in1_max = internal global %struct.sensor_device_attribute_2 { %struct.device_attribute { %struct.attribute { i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.232, i32 0, i32 0), i16 420 }, i64 (%struct.device*, %struct.device_attribute*, i8*)* @show_in_reg, i64 (%struct.device*, %struct.device_attribute*, i8*, i64)* @store_in_reg }, i8 2, i8 1 }, align 8
@sensor_dev_attr_in1_alarm = internal global %struct.sensor_device_attribute { %struct.device_attribute { %struct.attribute { i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.233, i32 0, i32 0), i16 292 }, i64 (%struct.device*, %struct.device_attribute*, i8*)* @show_alarm, i64 (%struct.device*, %struct.device_attribute*, i8*, i64)* null }, i32 1 }, align 8
@sensor_dev_attr_in2_input = internal global %struct.sensor_device_attribute_2 { %struct.device_attribute { %struct.attribute { i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.234, i32 0, i32 0), i16 292 }, i64 (%struct.device*, %struct.device_attribute*, i8*)* @show_in_reg, i64 (%struct.device*, %struct.device_attribute*, i8*, i64)* null }, i8 0, i8 2 }, align 8
@sensor_dev_attr_in2_min = internal global %struct.sensor_device_attribute_2 { %struct.device_attribute { %struct.attribute { i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.235, i32 0, i32 0), i16 420 }, i64 (%struct.device*, %struct.device_attribute*, i8*)* @show_in_reg, i64 (%struct.device*, %struct.device_attribute*, i8*, i64)* @store_in_reg }, i8 1, i8 2 }, align 8
@sensor_dev_attr_in2_max = internal global %struct.sensor_device_attribute_2 { %struct.device_attribute { %struct.attribute { i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.236, i32 0, i32 0), i16 420 }, i64 (%struct.device*, %struct.device_attribute*, i8*)* @show_in_reg, i64 (%struct.device*, %struct.device_attribute*, i8*, i64)* @store_in_reg }, i8 2, i8 2 }, align 8
@sensor_dev_attr_in2_alarm = internal global %struct.sensor_device_attribute { %struct.device_attribute { %struct.attribute { i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.237, i32 0, i32 0), i16 292 }, i64 (%struct.device*, %struct.device_attribute*, i8*)* @show_alarm, i64 (%struct.device*, %struct.device_attribute*, i8*, i64)* null }, i32 2 }, align 8
@sensor_dev_attr_in3_input = internal global %struct.sensor_device_attribute_2 { %struct.device_attribute { %struct.attribute { i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.238, i32 0, i32 0), i16 292 }, i64 (%struct.device*, %struct.device_attribute*, i8*)* @show_in_reg, i64 (%struct.device*, %struct.device_attribute*, i8*, i64)* null }, i8 0, i8 3 }, align 8
@sensor_dev_attr_in3_min = internal global %struct.sensor_device_attribute_2 { %struct.device_attribute { %struct.attribute { i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.239, i32 0, i32 0), i16 420 }, i64 (%struct.device*, %struct.device_attribute*, i8*)* @show_in_reg, i64 (%struct.device*, %struct.device_attribute*, i8*, i64)* @store_in_reg }, i8 1, i8 3 }, align 8
@sensor_dev_attr_in3_max = internal global %struct.sensor_device_attribute_2 { %struct.device_attribute { %struct.attribute { i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.240, i32 0, i32 0), i16 420 }, i64 (%struct.device*, %struct.device_attribute*, i8*)* @show_in_reg, i64 (%struct.device*, %struct.device_attribute*, i8*, i64)* @store_in_reg }, i8 2, i8 3 }, align 8
@sensor_dev_attr_in3_alarm = internal global %struct.sensor_device_attribute { %struct.device_attribute { %struct.attribute { i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.241, i32 0, i32 0), i16 292 }, i64 (%struct.device*, %struct.device_attribute*, i8*)* @show_alarm, i64 (%struct.device*, %struct.device_attribute*, i8*, i64)* null }, i32 3 }, align 8
@sensor_dev_attr_in4_input = internal global %struct.sensor_device_attribute_2 { %struct.device_attribute { %struct.attribute { i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.242, i32 0, i32 0), i16 292 }, i64 (%struct.device*, %struct.device_attribute*, i8*)* @show_in_reg, i64 (%struct.device*, %struct.device_attribute*, i8*, i64)* null }, i8 0, i8 4 }, align 8
@sensor_dev_attr_in4_min = internal global %struct.sensor_device_attribute_2 { %struct.device_attribute { %struct.attribute { i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.243, i32 0, i32 0), i16 420 }, i64 (%struct.device*, %struct.device_attribute*, i8*)* @show_in_reg, i64 (%struct.device*, %struct.device_attribute*, i8*, i64)* @store_in_reg }, i8 1, i8 4 }, align 8
@sensor_dev_attr_in4_max = internal global %struct.sensor_device_attribute_2 { %struct.device_attribute { %struct.attribute { i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.244, i32 0, i32 0), i16 420 }, i64 (%struct.device*, %struct.device_attribute*, i8*)* @show_in_reg, i64 (%struct.device*, %struct.device_attribute*, i8*, i64)* @store_in_reg }, i8 2, i8 4 }, align 8
@sensor_dev_attr_in4_alarm = internal global %struct.sensor_device_attribute { %struct.device_attribute { %struct.attribute { i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.245, i32 0, i32 0), i16 292 }, i64 (%struct.device*, %struct.device_attribute*, i8*)* @show_alarm, i64 (%struct.device*, %struct.device_attribute*, i8*, i64)* null }, i32 4 }, align 8
@sensor_dev_attr_in5_input = internal global %struct.sensor_device_attribute_2 { %struct.device_attribute { %struct.attribute { i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.246, i32 0, i32 0), i16 292 }, i64 (%struct.device*, %struct.device_attribute*, i8*)* @show_in_reg, i64 (%struct.device*, %struct.device_attribute*, i8*, i64)* null }, i8 0, i8 5 }, align 8
@sensor_dev_attr_in5_min = internal global %struct.sensor_device_attribute_2 { %struct.device_attribute { %struct.attribute { i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.247, i32 0, i32 0), i16 420 }, i64 (%struct.device*, %struct.device_attribute*, i8*)* @show_in_reg, i64 (%struct.device*, %struct.device_attribute*, i8*, i64)* @store_in_reg }, i8 1, i8 5 }, align 8
@sensor_dev_attr_in5_max = internal global %struct.sensor_device_attribute_2 { %struct.device_attribute { %struct.attribute { i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.248, i32 0, i32 0), i16 420 }, i64 (%struct.device*, %struct.device_attribute*, i8*)* @show_in_reg, i64 (%struct.device*, %struct.device_attribute*, i8*, i64)* @store_in_reg }, i8 2, i8 5 }, align 8
@sensor_dev_attr_in5_alarm = internal global %struct.sensor_device_attribute { %struct.device_attribute { %struct.attribute { i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.249, i32 0, i32 0), i16 292 }, i64 (%struct.device*, %struct.device_attribute*, i8*)* @show_alarm, i64 (%struct.device*, %struct.device_attribute*, i8*, i64)* null }, i32 5 }, align 8
@sensor_dev_attr_in6_input = internal global %struct.sensor_device_attribute_2 { %struct.device_attribute { %struct.attribute { i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.250, i32 0, i32 0), i16 292 }, i64 (%struct.device*, %struct.device_attribute*, i8*)* @show_in_reg, i64 (%struct.device*, %struct.device_attribute*, i8*, i64)* null }, i8 0, i8 6 }, align 8
@sensor_dev_attr_in6_min = internal global %struct.sensor_device_attribute_2 { %struct.device_attribute { %struct.attribute { i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.251, i32 0, i32 0), i16 420 }, i64 (%struct.device*, %struct.device_attribute*, i8*)* @show_in_reg, i64 (%struct.device*, %struct.device_attribute*, i8*, i64)* @store_in_reg }, i8 1, i8 6 }, align 8
@sensor_dev_attr_in6_max = internal global %struct.sensor_device_attribute_2 { %struct.device_attribute { %struct.attribute { i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.252, i32 0, i32 0), i16 420 }, i64 (%struct.device*, %struct.device_attribute*, i8*)* @show_in_reg, i64 (%struct.device*, %struct.device_attribute*, i8*, i64)* @store_in_reg }, i8 2, i8 6 }, align 8
@sensor_dev_attr_in6_alarm = internal global %struct.sensor_device_attribute { %struct.device_attribute { %struct.attribute { i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.253, i32 0, i32 0), i16 292 }, i64 (%struct.device*, %struct.device_attribute*, i8*)* @show_alarm, i64 (%struct.device*, %struct.device_attribute*, i8*, i64)* null }, i32 6 }, align 8
@sensor_dev_attr_in7_input = internal global %struct.sensor_device_attribute_2 { %struct.device_attribute { %struct.attribute { i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.254, i32 0, i32 0), i16 292 }, i64 (%struct.device*, %struct.device_attribute*, i8*)* @show_in_reg, i64 (%struct.device*, %struct.device_attribute*, i8*, i64)* null }, i8 0, i8 7 }, align 8
@sensor_dev_attr_in7_min = internal global %struct.sensor_device_attribute_2 { %struct.device_attribute { %struct.attribute { i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.255, i32 0, i32 0), i16 420 }, i64 (%struct.device*, %struct.device_attribute*, i8*)* @show_in_reg, i64 (%struct.device*, %struct.device_attribute*, i8*, i64)* @store_in_reg }, i8 1, i8 7 }, align 8
@sensor_dev_attr_in7_max = internal global %struct.sensor_device_attribute_2 { %struct.device_attribute { %struct.attribute { i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.256, i32 0, i32 0), i16 420 }, i64 (%struct.device*, %struct.device_attribute*, i8*)* @show_in_reg, i64 (%struct.device*, %struct.device_attribute*, i8*, i64)* @store_in_reg }, i8 2, i8 7 }, align 8
@sensor_dev_attr_in7_alarm = internal global %struct.sensor_device_attribute { %struct.device_attribute { %struct.attribute { i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.257, i32 0, i32 0), i16 292 }, i64 (%struct.device*, %struct.device_attribute*, i8*)* @show_alarm, i64 (%struct.device*, %struct.device_attribute*, i8*, i64)* null }, i32 7 }, align 8
@sensor_dev_attr_in8_input = internal global %struct.sensor_device_attribute_2 { %struct.device_attribute { %struct.attribute { i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.258, i32 0, i32 0), i16 292 }, i64 (%struct.device*, %struct.device_attribute*, i8*)* @show_in_reg, i64 (%struct.device*, %struct.device_attribute*, i8*, i64)* null }, i8 0, i8 8 }, align 8
@sensor_dev_attr_in8_min = internal global %struct.sensor_device_attribute_2 { %struct.device_attribute { %struct.attribute { i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.259, i32 0, i32 0), i16 420 }, i64 (%struct.device*, %struct.device_attribute*, i8*)* @show_in_reg, i64 (%struct.device*, %struct.device_attribute*, i8*, i64)* @store_in_reg }, i8 1, i8 8 }, align 8
@sensor_dev_attr_in8_max = internal global %struct.sensor_device_attribute_2 { %struct.device_attribute { %struct.attribute { i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.260, i32 0, i32 0), i16 420 }, i64 (%struct.device*, %struct.device_attribute*, i8*)* @show_in_reg, i64 (%struct.device*, %struct.device_attribute*, i8*, i64)* @store_in_reg }, i8 2, i8 8 }, align 8
@sensor_dev_attr_in8_alarm = internal global %struct.sensor_device_attribute { %struct.device_attribute { %struct.attribute { i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.261, i32 0, i32 0), i16 292 }, i64 (%struct.device*, %struct.device_attribute*, i8*)* @show_alarm, i64 (%struct.device*, %struct.device_attribute*, i8*, i64)* null }, i32 8 }, align 8
@sensor_dev_attr_in9_input = internal global %struct.sensor_device_attribute_2 { %struct.device_attribute { %struct.attribute { i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.262, i32 0, i32 0), i16 292 }, i64 (%struct.device*, %struct.device_attribute*, i8*)* @show_in_reg, i64 (%struct.device*, %struct.device_attribute*, i8*, i64)* null }, i8 0, i8 9 }, align 8
@sensor_dev_attr_in9_min = internal global %struct.sensor_device_attribute_2 { %struct.device_attribute { %struct.attribute { i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.263, i32 0, i32 0), i16 420 }, i64 (%struct.device*, %struct.device_attribute*, i8*)* @show_in_reg, i64 (%struct.device*, %struct.device_attribute*, i8*, i64)* @store_in_reg }, i8 1, i8 9 }, align 8
@sensor_dev_attr_in9_max = internal global %struct.sensor_device_attribute_2 { %struct.device_attribute { %struct.attribute { i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.264, i32 0, i32 0), i16 420 }, i64 (%struct.device*, %struct.device_attribute*, i8*)* @show_in_reg, i64 (%struct.device*, %struct.device_attribute*, i8*, i64)* @store_in_reg }, i8 2, i8 9 }, align 8
@sensor_dev_attr_in9_alarm = internal global %struct.sensor_device_attribute { %struct.device_attribute { %struct.attribute { i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.265, i32 0, i32 0), i16 292 }, i64 (%struct.device*, %struct.device_attribute*, i8*)* @show_alarm, i64 (%struct.device*, %struct.device_attribute*, i8*, i64)* null }, i32 9 }, align 8
@sensor_dev_attr_in10_input = internal global %struct.sensor_device_attribute_2 { %struct.device_attribute { %struct.attribute { i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.266, i32 0, i32 0), i16 292 }, i64 (%struct.device*, %struct.device_attribute*, i8*)* @show_in_reg, i64 (%struct.device*, %struct.device_attribute*, i8*, i64)* null }, i8 0, i8 10 }, align 8
@sensor_dev_attr_in10_min = internal global %struct.sensor_device_attribute_2 { %struct.device_attribute { %struct.attribute { i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.267, i32 0, i32 0), i16 420 }, i64 (%struct.device*, %struct.device_attribute*, i8*)* @show_in_reg, i64 (%struct.device*, %struct.device_attribute*, i8*, i64)* @store_in_reg }, i8 1, i8 10 }, align 8
@sensor_dev_attr_in10_max = internal global %struct.sensor_device_attribute_2 { %struct.device_attribute { %struct.attribute { i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.268, i32 0, i32 0), i16 420 }, i64 (%struct.device*, %struct.device_attribute*, i8*)* @show_in_reg, i64 (%struct.device*, %struct.device_attribute*, i8*, i64)* @store_in_reg }, i8 2, i8 10 }, align 8
@sensor_dev_attr_in10_alarm = internal global %struct.sensor_device_attribute { %struct.device_attribute { %struct.attribute { i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.269, i32 0, i32 0), i16 292 }, i64 (%struct.device*, %struct.device_attribute*, i8*)* @show_alarm, i64 (%struct.device*, %struct.device_attribute*, i8*, i64)* null }, i32 10 }, align 8
@sensor_dev_attr_in11_input = internal global %struct.sensor_device_attribute_2 { %struct.device_attribute { %struct.attribute { i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.270, i32 0, i32 0), i16 292 }, i64 (%struct.device*, %struct.device_attribute*, i8*)* @show_in_reg, i64 (%struct.device*, %struct.device_attribute*, i8*, i64)* null }, i8 0, i8 11 }, align 8
@sensor_dev_attr_in11_min = internal global %struct.sensor_device_attribute_2 { %struct.device_attribute { %struct.attribute { i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.271, i32 0, i32 0), i16 420 }, i64 (%struct.device*, %struct.device_attribute*, i8*)* @show_in_reg, i64 (%struct.device*, %struct.device_attribute*, i8*, i64)* @store_in_reg }, i8 1, i8 11 }, align 8
@sensor_dev_attr_in11_max = internal global %struct.sensor_device_attribute_2 { %struct.device_attribute { %struct.attribute { i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.272, i32 0, i32 0), i16 420 }, i64 (%struct.device*, %struct.device_attribute*, i8*)* @show_in_reg, i64 (%struct.device*, %struct.device_attribute*, i8*, i64)* @store_in_reg }, i8 2, i8 11 }, align 8
@sensor_dev_attr_in11_alarm = internal global %struct.sensor_device_attribute { %struct.device_attribute { %struct.attribute { i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.273, i32 0, i32 0), i16 292 }, i64 (%struct.device*, %struct.device_attribute*, i8*)* @show_alarm, i64 (%struct.device*, %struct.device_attribute*, i8*, i64)* null }, i32 11 }, align 8
@sensor_dev_attr_in12_input = internal global %struct.sensor_device_attribute_2 { %struct.device_attribute { %struct.attribute { i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.274, i32 0, i32 0), i16 292 }, i64 (%struct.device*, %struct.device_attribute*, i8*)* @show_in_reg, i64 (%struct.device*, %struct.device_attribute*, i8*, i64)* null }, i8 0, i8 12 }, align 8
@sensor_dev_attr_in12_min = internal global %struct.sensor_device_attribute_2 { %struct.device_attribute { %struct.attribute { i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.275, i32 0, i32 0), i16 420 }, i64 (%struct.device*, %struct.device_attribute*, i8*)* @show_in_reg, i64 (%struct.device*, %struct.device_attribute*, i8*, i64)* @store_in_reg }, i8 1, i8 12 }, align 8
@sensor_dev_attr_in12_max = internal global %struct.sensor_device_attribute_2 { %struct.device_attribute { %struct.attribute { i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.276, i32 0, i32 0), i16 420 }, i64 (%struct.device*, %struct.device_attribute*, i8*)* @show_in_reg, i64 (%struct.device*, %struct.device_attribute*, i8*, i64)* @store_in_reg }, i8 2, i8 12 }, align 8
@sensor_dev_attr_in12_alarm = internal global %struct.sensor_device_attribute { %struct.device_attribute { %struct.attribute { i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.277, i32 0, i32 0), i16 292 }, i64 (%struct.device*, %struct.device_attribute*, i8*)* @show_alarm, i64 (%struct.device*, %struct.device_attribute*, i8*, i64)* null }, i32 12 }, align 8
@sensor_dev_attr_in13_input = internal global %struct.sensor_device_attribute_2 { %struct.device_attribute { %struct.attribute { i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.278, i32 0, i32 0), i16 292 }, i64 (%struct.device*, %struct.device_attribute*, i8*)* @show_in_reg, i64 (%struct.device*, %struct.device_attribute*, i8*, i64)* null }, i8 0, i8 13 }, align 8
@sensor_dev_attr_in13_min = internal global %struct.sensor_device_attribute_2 { %struct.device_attribute { %struct.attribute { i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.279, i32 0, i32 0), i16 420 }, i64 (%struct.device*, %struct.device_attribute*, i8*)* @show_in_reg, i64 (%struct.device*, %struct.device_attribute*, i8*, i64)* @store_in_reg }, i8 1, i8 13 }, align 8
@sensor_dev_attr_in13_max = internal global %struct.sensor_device_attribute_2 { %struct.device_attribute { %struct.attribute { i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.280, i32 0, i32 0), i16 420 }, i64 (%struct.device*, %struct.device_attribute*, i8*)* @show_in_reg, i64 (%struct.device*, %struct.device_attribute*, i8*, i64)* @store_in_reg }, i8 2, i8 13 }, align 8
@sensor_dev_attr_in13_alarm = internal global %struct.sensor_device_attribute { %struct.device_attribute { %struct.attribute { i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.281, i32 0, i32 0), i16 292 }, i64 (%struct.device*, %struct.device_attribute*, i8*)* @show_alarm, i64 (%struct.device*, %struct.device_attribute*, i8*, i64)* null }, i32 13 }, align 8
@sensor_dev_attr_in14_input = internal global %struct.sensor_device_attribute_2 { %struct.device_attribute { %struct.attribute { i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.282, i32 0, i32 0), i16 292 }, i64 (%struct.device*, %struct.device_attribute*, i8*)* @show_in_reg, i64 (%struct.device*, %struct.device_attribute*, i8*, i64)* null }, i8 0, i8 14 }, align 8
@sensor_dev_attr_in14_min = internal global %struct.sensor_device_attribute_2 { %struct.device_attribute { %struct.attribute { i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.283, i32 0, i32 0), i16 420 }, i64 (%struct.device*, %struct.device_attribute*, i8*)* @show_in_reg, i64 (%struct.device*, %struct.device_attribute*, i8*, i64)* @store_in_reg }, i8 1, i8 14 }, align 8
@sensor_dev_attr_in14_max = internal global %struct.sensor_device_attribute_2 { %struct.device_attribute { %struct.attribute { i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.284, i32 0, i32 0), i16 420 }, i64 (%struct.device*, %struct.device_attribute*, i8*)* @show_in_reg, i64 (%struct.device*, %struct.device_attribute*, i8*, i64)* @store_in_reg }, i8 2, i8 14 }, align 8
@sensor_dev_attr_in14_alarm = internal global %struct.sensor_device_attribute { %struct.device_attribute { %struct.attribute { i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.285, i32 0, i32 0), i16 292 }, i64 (%struct.device*, %struct.device_attribute*, i8*)* @show_alarm, i64 (%struct.device*, %struct.device_attribute*, i8*, i64)* null }, i32 14 }, align 8
@.str.224 = private unnamed_addr constant [10 x i8] c"in0_input\00", align 1
@.str.225 = private unnamed_addr constant [5 x i8] c"%ld\0A\00", align 1
@scale_in = internal constant [15 x i16] [i16 800, i16 800, i16 1600, i16 1600, i16 800, i16 800, i16 800, i16 1600, i16 1600, i16 800, i16 800, i16 800, i16 800, i16 800, i16 800], align 16
@.str.226 = private unnamed_addr constant [8 x i8] c"in0_min\00", align 1
@.str.227 = private unnamed_addr constant [8 x i8] c"in0_max\00", align 1
@.str.228 = private unnamed_addr constant [10 x i8] c"in0_alarm\00", align 1
@.str.229 = private unnamed_addr constant [4 x i8] c"%u\0A\00", align 1
@.str.230 = private unnamed_addr constant [10 x i8] c"in1_input\00", align 1
@.str.231 = private unnamed_addr constant [8 x i8] c"in1_min\00", align 1
@.str.232 = private unnamed_addr constant [8 x i8] c"in1_max\00", align 1
@.str.233 = private unnamed_addr constant [10 x i8] c"in1_alarm\00", align 1
@.str.234 = private unnamed_addr constant [10 x i8] c"in2_input\00", align 1
@.str.235 = private unnamed_addr constant [8 x i8] c"in2_min\00", align 1
@.str.236 = private unnamed_addr constant [8 x i8] c"in2_max\00", align 1
@.str.237 = private unnamed_addr constant [10 x i8] c"in2_alarm\00", align 1
@.str.238 = private unnamed_addr constant [10 x i8] c"in3_input\00", align 1
@.str.239 = private unnamed_addr constant [8 x i8] c"in3_min\00", align 1
@.str.240 = private unnamed_addr constant [8 x i8] c"in3_max\00", align 1
@.str.241 = private unnamed_addr constant [10 x i8] c"in3_alarm\00", align 1
@.str.242 = private unnamed_addr constant [10 x i8] c"in4_input\00", align 1
@.str.243 = private unnamed_addr constant [8 x i8] c"in4_min\00", align 1
@.str.244 = private unnamed_addr constant [8 x i8] c"in4_max\00", align 1
@.str.245 = private unnamed_addr constant [10 x i8] c"in4_alarm\00", align 1
@.str.246 = private unnamed_addr constant [10 x i8] c"in5_input\00", align 1
@.str.247 = private unnamed_addr constant [8 x i8] c"in5_min\00", align 1
@.str.248 = private unnamed_addr constant [8 x i8] c"in5_max\00", align 1
@.str.249 = private unnamed_addr constant [10 x i8] c"in5_alarm\00", align 1
@.str.250 = private unnamed_addr constant [10 x i8] c"in6_input\00", align 1
@.str.251 = private unnamed_addr constant [8 x i8] c"in6_min\00", align 1
@.str.252 = private unnamed_addr constant [8 x i8] c"in6_max\00", align 1
@.str.253 = private unnamed_addr constant [10 x i8] c"in6_alarm\00", align 1
@.str.254 = private unnamed_addr constant [10 x i8] c"in7_input\00", align 1
@.str.255 = private unnamed_addr constant [8 x i8] c"in7_min\00", align 1
@.str.256 = private unnamed_addr constant [8 x i8] c"in7_max\00", align 1
@.str.257 = private unnamed_addr constant [10 x i8] c"in7_alarm\00", align 1
@.str.258 = private unnamed_addr constant [10 x i8] c"in8_input\00", align 1
@.str.259 = private unnamed_addr constant [8 x i8] c"in8_min\00", align 1
@.str.260 = private unnamed_addr constant [8 x i8] c"in8_max\00", align 1
@.str.261 = private unnamed_addr constant [10 x i8] c"in8_alarm\00", align 1
@.str.262 = private unnamed_addr constant [10 x i8] c"in9_input\00", align 1
@.str.263 = private unnamed_addr constant [8 x i8] c"in9_min\00", align 1
@.str.264 = private unnamed_addr constant [8 x i8] c"in9_max\00", align 1
@.str.265 = private unnamed_addr constant [10 x i8] c"in9_alarm\00", align 1
@.str.266 = private unnamed_addr constant [11 x i8] c"in10_input\00", align 1
@.str.267 = private unnamed_addr constant [9 x i8] c"in10_min\00", align 1
@.str.268 = private unnamed_addr constant [9 x i8] c"in10_max\00", align 1
@.str.269 = private unnamed_addr constant [11 x i8] c"in10_alarm\00", align 1
@.str.270 = private unnamed_addr constant [11 x i8] c"in11_input\00", align 1
@.str.271 = private unnamed_addr constant [9 x i8] c"in11_min\00", align 1
@.str.272 = private unnamed_addr constant [9 x i8] c"in11_max\00", align 1
@.str.273 = private unnamed_addr constant [11 x i8] c"in11_alarm\00", align 1
@.str.274 = private unnamed_addr constant [11 x i8] c"in12_input\00", align 1
@.str.275 = private unnamed_addr constant [9 x i8] c"in12_min\00", align 1
@.str.276 = private unnamed_addr constant [9 x i8] c"in12_max\00", align 1
@.str.277 = private unnamed_addr constant [11 x i8] c"in12_alarm\00", align 1
@.str.278 = private unnamed_addr constant [11 x i8] c"in13_input\00", align 1
@.str.279 = private unnamed_addr constant [9 x i8] c"in13_min\00", align 1
@.str.280 = private unnamed_addr constant [9 x i8] c"in13_max\00", align 1
@.str.281 = private unnamed_addr constant [11 x i8] c"in13_alarm\00", align 1
@.str.282 = private unnamed_addr constant [11 x i8] c"in14_input\00", align 1
@.str.283 = private unnamed_addr constant [9 x i8] c"in14_min\00", align 1
@.str.284 = private unnamed_addr constant [9 x i8] c"in14_max\00", align 1
@.str.285 = private unnamed_addr constant [11 x i8] c"in14_alarm\00", align 1
@.str.286 = private unnamed_addr constant [11 x i8] c"fan1_input\00", align 1
@.str.287 = private unnamed_addr constant [11 x i8] c"fan2_input\00", align 1
@.str.288 = private unnamed_addr constant [11 x i8] c"fan3_input\00", align 1
@.str.289 = private unnamed_addr constant [11 x i8] c"fan4_input\00", align 1
@.str.290 = private unnamed_addr constant [11 x i8] c"fan5_input\00", align 1
@.str.291 = private unnamed_addr constant [11 x i8] c"fan1_alarm\00", align 1
@.str.292 = private unnamed_addr constant [11 x i8] c"fan2_alarm\00", align 1
@.str.293 = private unnamed_addr constant [11 x i8] c"fan3_alarm\00", align 1
@.str.294 = private unnamed_addr constant [11 x i8] c"fan4_alarm\00", align 1
@.str.295 = private unnamed_addr constant [11 x i8] c"fan5_alarm\00", align 1
@.str.296 = private unnamed_addr constant [9 x i8] c"fan1_div\00", align 1
@.str.297 = private unnamed_addr constant [9 x i8] c"fan2_div\00", align 1
@.str.298 = private unnamed_addr constant [9 x i8] c"fan3_div\00", align 1
@.str.299 = private unnamed_addr constant [9 x i8] c"fan4_div\00", align 1
@.str.300 = private unnamed_addr constant [9 x i8] c"fan5_div\00", align 1
@.str.301 = private unnamed_addr constant [9 x i8] c"fan1_min\00", align 1
@.str.302 = private unnamed_addr constant [9 x i8] c"fan2_min\00", align 1
@.str.303 = private unnamed_addr constant [9 x i8] c"fan3_min\00", align 1
@.str.304 = private unnamed_addr constant [9 x i8] c"fan4_min\00", align 1
@.str.305 = private unnamed_addr constant [9 x i8] c"fan5_min\00", align 1
@.str.306 = private unnamed_addr constant [36 x i8] c"fan%u low limit and alarm disabled\0A\00", align 1
@.str.307 = private unnamed_addr constant [54 x i8] c"fan%u low limit %lu below minimum %u, set to minimum\0A\00", align 1
@.str.308 = private unnamed_addr constant [54 x i8] c"fan%u low limit %lu above maximum %u, set to maximum\0A\00", align 1
@.str.309 = private unnamed_addr constant [12 x i8] c"fan1_pulses\00", align 1
@.str.310 = private unnamed_addr constant [12 x i8] c"fan2_pulses\00", align 1
@.str.311 = private unnamed_addr constant [12 x i8] c"fan3_pulses\00", align 1
@.str.312 = private unnamed_addr constant [12 x i8] c"fan4_pulses\00", align 1
@.str.313 = private unnamed_addr constant [12 x i8] c"fan5_pulses\00", align 1
@.str.314 = private unnamed_addr constant [12 x i8] c"temp1_input\00", align 1
@.str.315 = private unnamed_addr constant [12 x i8] c"temp2_input\00", align 1
@.str.316 = private unnamed_addr constant [12 x i8] c"temp3_input\00", align 1
@.str.317 = private unnamed_addr constant [12 x i8] c"temp4_input\00", align 1
@.str.318 = private unnamed_addr constant [12 x i8] c"temp5_input\00", align 1
@.str.319 = private unnamed_addr constant [12 x i8] c"temp6_input\00", align 1
@.str.320 = private unnamed_addr constant [12 x i8] c"temp7_input\00", align 1
@.str.321 = private unnamed_addr constant [12 x i8] c"temp8_input\00", align 1
@.str.322 = private unnamed_addr constant [12 x i8] c"temp9_input\00", align 1
@.str.323 = private unnamed_addr constant [13 x i8] c"temp10_input\00", align 1
@.str.324 = private unnamed_addr constant [12 x i8] c"temp1_label\00", align 1
@.str.325 = private unnamed_addr constant [12 x i8] c"temp2_label\00", align 1
@.str.326 = private unnamed_addr constant [12 x i8] c"temp3_label\00", align 1
@.str.327 = private unnamed_addr constant [12 x i8] c"temp4_label\00", align 1
@.str.328 = private unnamed_addr constant [12 x i8] c"temp5_label\00", align 1
@.str.329 = private unnamed_addr constant [12 x i8] c"temp6_label\00", align 1
@.str.330 = private unnamed_addr constant [12 x i8] c"temp7_label\00", align 1
@.str.331 = private unnamed_addr constant [12 x i8] c"temp8_label\00", align 1
@.str.332 = private unnamed_addr constant [12 x i8] c"temp9_label\00", align 1
@.str.333 = private unnamed_addr constant [13 x i8] c"temp10_label\00", align 1
@.str.334 = private unnamed_addr constant [4 x i8] c"%s\0A\00", align 1
@.str.335 = private unnamed_addr constant [10 x i8] c"temp1_max\00", align 1
@.str.336 = private unnamed_addr constant [10 x i8] c"temp2_max\00", align 1
@.str.337 = private unnamed_addr constant [10 x i8] c"temp3_max\00", align 1
@.str.338 = private unnamed_addr constant [10 x i8] c"temp4_max\00", align 1
@.str.339 = private unnamed_addr constant [10 x i8] c"temp5_max\00", align 1
@.str.340 = private unnamed_addr constant [10 x i8] c"temp6_max\00", align 1
@.str.341 = private unnamed_addr constant [10 x i8] c"temp7_max\00", align 1
@.str.342 = private unnamed_addr constant [10 x i8] c"temp8_max\00", align 1
@.str.343 = private unnamed_addr constant [10 x i8] c"temp9_max\00", align 1
@.str.344 = private unnamed_addr constant [11 x i8] c"temp10_max\00", align 1
@.str.345 = private unnamed_addr constant [15 x i8] c"temp1_max_hyst\00", align 1
@.str.346 = private unnamed_addr constant [15 x i8] c"temp2_max_hyst\00", align 1
@.str.347 = private unnamed_addr constant [15 x i8] c"temp3_max_hyst\00", align 1
@.str.348 = private unnamed_addr constant [15 x i8] c"temp4_max_hyst\00", align 1
@.str.349 = private unnamed_addr constant [15 x i8] c"temp5_max_hyst\00", align 1
@.str.350 = private unnamed_addr constant [15 x i8] c"temp6_max_hyst\00", align 1
@.str.351 = private unnamed_addr constant [15 x i8] c"temp7_max_hyst\00", align 1
@.str.352 = private unnamed_addr constant [15 x i8] c"temp8_max_hyst\00", align 1
@.str.353 = private unnamed_addr constant [15 x i8] c"temp9_max_hyst\00", align 1
@.str.354 = private unnamed_addr constant [16 x i8] c"temp10_max_hyst\00", align 1
@.str.355 = private unnamed_addr constant [11 x i8] c"temp1_crit\00", align 1
@.str.356 = private unnamed_addr constant [11 x i8] c"temp2_crit\00", align 1
@.str.357 = private unnamed_addr constant [11 x i8] c"temp3_crit\00", align 1
@.str.358 = private unnamed_addr constant [11 x i8] c"temp4_crit\00", align 1
@.str.359 = private unnamed_addr constant [11 x i8] c"temp5_crit\00", align 1
@.str.360 = private unnamed_addr constant [11 x i8] c"temp6_crit\00", align 1
@.str.361 = private unnamed_addr constant [11 x i8] c"temp7_crit\00", align 1
@.str.362 = private unnamed_addr constant [11 x i8] c"temp8_crit\00", align 1
@.str.363 = private unnamed_addr constant [11 x i8] c"temp9_crit\00", align 1
@.str.364 = private unnamed_addr constant [12 x i8] c"temp10_crit\00", align 1
@.str.365 = private unnamed_addr constant [11 x i8] c"temp1_type\00", align 1
@.str.366 = private unnamed_addr constant [11 x i8] c"temp2_type\00", align 1
@.str.367 = private unnamed_addr constant [11 x i8] c"temp3_type\00", align 1
@.str.368 = private unnamed_addr constant [11 x i8] c"temp4_type\00", align 1
@.str.369 = private unnamed_addr constant [11 x i8] c"temp5_type\00", align 1
@.str.370 = private unnamed_addr constant [11 x i8] c"temp6_type\00", align 1
@.str.371 = private unnamed_addr constant [13 x i8] c"temp1_offset\00", align 1
@.str.372 = private unnamed_addr constant [13 x i8] c"temp2_offset\00", align 1
@.str.373 = private unnamed_addr constant [13 x i8] c"temp3_offset\00", align 1
@.str.374 = private unnamed_addr constant [13 x i8] c"temp4_offset\00", align 1
@.str.375 = private unnamed_addr constant [13 x i8] c"temp5_offset\00", align 1
@.str.376 = private unnamed_addr constant [13 x i8] c"temp6_offset\00", align 1
@.str.377 = private unnamed_addr constant [12 x i8] c"temp1_alarm\00", align 1
@.str.378 = private unnamed_addr constant [12 x i8] c"temp2_alarm\00", align 1
@.str.379 = private unnamed_addr constant [12 x i8] c"temp3_alarm\00", align 1
@.str.380 = private unnamed_addr constant [12 x i8] c"temp4_alarm\00", align 1
@.str.381 = private unnamed_addr constant [12 x i8] c"temp5_alarm\00", align 1
@.str.382 = private unnamed_addr constant [12 x i8] c"temp6_alarm\00", align 1
@.str.383 = private unnamed_addr constant [17 x i8] c"intrusion0_alarm\00", align 1
@.str.384 = private unnamed_addr constant [17 x i8] c"intrusion1_alarm\00", align 1
@NCT6775_REG_CR_CASEOPEN_CLR = internal constant [2 x i8] c"\E6\EE", align 1
@NCT6775_CR_CASEOPEN_CLR_MASK = internal constant [2 x i8] c" \01", align 1
@.str.385 = private unnamed_addr constant [5 x i8] c"name\00", align 1
@.str.386 = private unnamed_addr constant [37 x i8] c"\013nct6775: Device allocation failed\0A\00", align 1
@.str.387 = private unnamed_addr constant [44 x i8] c"\013nct6775: Platform data allocation failed\0A\00", align 1
@.str.388 = private unnamed_addr constant [49 x i8] c"\013nct6775: Device resource addition failed (%d)\0A\00", align 1
@.str.389 = private unnamed_addr constant [40 x i8] c"\013nct6775: Device addition failed (%d)\0A\00", align 1
@.str.390 = private unnamed_addr constant [40 x i8] c"\017nct6775: unsupported chip ID: 0x%04x\0A\00", align 1
@.str.391 = private unnamed_addr constant [73 x i8] c"\013nct6775: Refusing to enable a Super-I/O device with a base I/O port 0\0A\00", align 1
@.str.392 = private unnamed_addr constant [70 x i8] c"\014nct6775: Forcibly enabling Super-I/O. Sensor is probably unusable.\0A\00", align 1
@.str.393 = private unnamed_addr constant [47 x i8] c"\016nct6775: Found %s or compatible chip at %#x\0A\00", align 1
@nct6775_sio_names = internal constant [3 x i8*] [i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.394, i32 0, i32 0), i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.395, i32 0, i32 0), i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.396, i32 0, i32 0)], section ".init.rodata", align 16
@.str.394 = private unnamed_addr constant [9 x i8] c"NCT6775F\00", align 1
@.str.395 = private unnamed_addr constant [11 x i8] c"NCT6776D/F\00", align 1
@.str.396 = private unnamed_addr constant [9 x i8] c"NCT6779D\00", align 1
@llvm.used = appending global [5 x i8*] [i8* bitcast (%struct.kernel_param* @__param_force_id to i8*), i8* bitcast (%struct.kernel_param* @__param_fan_debounce to i8*), i8* bitcast (void ()* @sensors_nct6775_exit to i8*), i8* bitcast (i32 ()** @__initcall_sensors_nct6775_init6 to i8*), i8* bitcast (void ()** @__exitcall_sensors_nct6775_exit to i8*)], section "llvm.metadata"

; Function Attrs: inlinehint nounwind uwtable
define internal void @smp_send_stop() #0 {
entry:
  %0 = load void (i32)*, void (i32)** getelementptr inbounds (%struct.smp_ops, %struct.smp_ops* @smp_ops, i32 0, i32 3), align 8, !tbaa !2
  call void %0(i32 0)
  ret void
}

; Function Attrs: inlinehint nounwind uwtable
define internal void @smp_send_reschedule(i32 %cpu) #0 {
entry:
  %0 = load void (i32)*, void (i32)** getelementptr inbounds (%struct.smp_ops, %struct.smp_ops* @smp_ops, i32 0, i32 4), align 8, !tbaa !7
  call void %0(i32 %cpu)
  ret void
}

; Function Attrs: inlinehint nounwind uwtable
define internal void @smp_prepare_cpus(i32 %max_cpus) #0 {
entry:
  %0 = load void (i32)*, void (i32)** getelementptr inbounds (%struct.smp_ops, %struct.smp_ops* @smp_ops, i32 0, i32 1), align 8, !tbaa !8
  call void %0(i32 %max_cpus)
  ret void
}

; Function Attrs: inlinehint nounwind uwtable
define internal i32 @__cpu_up(i32 %cpu, %struct.task_struct* %tidle) #0 {
entry:
  %0 = load i32 (i32, %struct.task_struct*)*, i32 (i32, %struct.task_struct*)** getelementptr inbounds (%struct.smp_ops, %struct.smp_ops* @smp_ops, i32 0, i32 5), align 8, !tbaa !9
  %call = call i32 %0(i32 %cpu, %struct.task_struct* %tidle)
  ret i32 %call
}

; Function Attrs: inlinehint nounwind uwtable
define internal void @smp_cpus_done(i32 %max_cpus) #0 {
entry:
  %0 = load void (i32)*, void (i32)** getelementptr inbounds (%struct.smp_ops, %struct.smp_ops* @smp_ops, i32 0, i32 2), align 8, !tbaa !10
  call void %0(i32 %max_cpus)
  ret void
}

; Function Attrs: inlinehint nounwind uwtable
define internal void @smp_prepare_boot_cpu() #0 {
entry:
  %0 = load void ()*, void ()** getelementptr inbounds (%struct.smp_ops, %struct.smp_ops* @smp_ops, i32 0, i32 0), align 8, !tbaa !11
  call void %0()
  ret void
}

; Function Attrs: inlinehint nounwind uwtable
define internal i8* @acpi_os_allocate(i64 %size) #0 {
entry:
  %__dummy = alloca i64, align 8
  %__dummy2 = alloca i64, align 8
  %__dummy3 = alloca i64, align 8
  %__dummy24 = alloca i64, align 8
  %0 = bitcast i64* %__dummy to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %0) #6
  %1 = bitcast i64* %__dummy2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %1) #6
  %cmp = icmp eq i64* %__dummy, %__dummy2
  %conv = zext i1 %cmp to i32
  %2 = bitcast i64* %__dummy2 to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %2) #6
  %3 = bitcast i64* %__dummy to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %3) #6
  %call = call i64 @arch_local_save_flags()
  %4 = bitcast i64* %__dummy3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %4) #6
  %5 = bitcast i64* %__dummy24 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %5) #6
  %cmp5 = icmp eq i64* %__dummy3, %__dummy24
  %conv6 = zext i1 %cmp5 to i32
  %6 = bitcast i64* %__dummy24 to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %6) #6
  %7 = bitcast i64* %__dummy3 to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %7) #6
  %call9 = call i32 @arch_irqs_disabled_flags(i64 %call)
  %tobool = icmp ne i32 %call9, 0
  %8 = zext i1 %tobool to i64
  %cond = select i1 %tobool, i32 32, i32 208
  %call10 = call i8* @kmalloc(i64 %size, i32 %cond)
  ret i8* %call10
}

; Function Attrs: inlinehint nounwind uwtable
define internal i8* @acpi_os_acquire_object(%struct.kmem_cache* %cache) #0 {
entry:
  %__dummy = alloca i64, align 8
  %__dummy2 = alloca i64, align 8
  %__dummy3 = alloca i64, align 8
  %__dummy24 = alloca i64, align 8
  %0 = bitcast i64* %__dummy to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %0) #6
  %1 = bitcast i64* %__dummy2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %1) #6
  %cmp = icmp eq i64* %__dummy, %__dummy2
  %conv = zext i1 %cmp to i32
  %2 = bitcast i64* %__dummy2 to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %2) #6
  %3 = bitcast i64* %__dummy to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %3) #6
  %call = call i64 @arch_local_save_flags()
  %4 = bitcast i64* %__dummy3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %4) #6
  %5 = bitcast i64* %__dummy24 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %5) #6
  %cmp5 = icmp eq i64* %__dummy3, %__dummy24
  %conv6 = zext i1 %cmp5 to i32
  %6 = bitcast i64* %__dummy24 to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %6) #6
  %7 = bitcast i64* %__dummy3 to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %7) #6
  %call9 = call i32 @arch_irqs_disabled_flags(i64 %call)
  %tobool = icmp ne i32 %call9, 0
  %8 = zext i1 %tobool to i64
  %cond = select i1 %tobool, i32 32, i32 208
  %call10 = call i8* @kmem_cache_zalloc(%struct.kmem_cache* %cache, i32 %cond)
  ret i8* %call10
}

; Function Attrs: inlinehint nounwind uwtable
define internal i64 @acpi_os_get_thread_id() #0 {
entry:
  %call = call %struct.task_struct* @get_current()
  %0 = ptrtoint %struct.task_struct* %call to i64
  ret i64 %0
}

; Function Attrs: nounwind uwtable
define internal void @sensors_nct6775_exit() #1 section ".exit.text" {
entry:
  %0 = load %struct.platform_device*, %struct.platform_device** @pdev, align 8, !tbaa !12
  call void @platform_device_unregister(%struct.platform_device* %0)
  call void @platform_driver_unregister(%struct.platform_driver* @nct6775_driver)
  ret void
}

declare void @platform_device_unregister(%struct.platform_device*) #2

declare void @platform_driver_unregister(%struct.platform_driver*) #2

; Function Attrs: nounwind uwtable
define internal i32 @sensors_nct6775_init() #1 section ".init.text" {
entry:
  %address = alloca i16, align 2
  %res = alloca %struct.resource, align 8
  %sio_data = alloca %struct.nct6775_sio_data, align 4
  %0 = bitcast i16* %address to i8*
  call void @llvm.lifetime.start.p0i8(i64 2, i8* %0) #6
  %1 = bitcast %struct.resource* %res to i8*
  call void @llvm.lifetime.start.p0i8(i64 56, i8* %1) #6
  %2 = bitcast %struct.nct6775_sio_data* %sio_data to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %2) #6
  %call = call i32 @nct6775_find(i32 46, i16* %address, %struct.nct6775_sio_data* %sio_data)
  %tobool = icmp ne i32 %call, 0
  br i1 %tobool, label %land.lhs.true, label %if.end

land.lhs.true:                                    ; preds = %entry
  %call1 = call i32 @nct6775_find(i32 78, i16* %address, %struct.nct6775_sio_data* %sio_data)
  %tobool2 = icmp ne i32 %call1, 0
  br i1 %tobool2, label %cleanup, label %if.end

if.end:                                           ; preds = %land.lhs.true, %entry
  %call3 = call i32 @platform_driver_register(%struct.platform_driver* @nct6775_driver)
  %tobool4 = icmp ne i32 %call3, 0
  br i1 %tobool4, label %cleanup, label %if.end6

if.end6:                                          ; preds = %if.end
  %3 = load i16, i16* %address, align 2, !tbaa !13
  %conv = zext i16 %3 to i32
  %call7 = call %struct.platform_device* @platform_device_alloc(i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str, i32 0, i32 0), i32 %conv)
  store %struct.platform_device* %call7, %struct.platform_device** @pdev, align 8, !tbaa !12
  %4 = load %struct.platform_device*, %struct.platform_device** @pdev, align 8, !tbaa !12
  %tobool8 = icmp ne %struct.platform_device* %4, null
  br i1 %tobool8, label %if.end11, label %if.then9

if.then9:                                         ; preds = %if.end6
  %call10 = call i32 (i8*, ...) @printk(i8* getelementptr inbounds ([37 x i8], [37 x i8]* @.str.386, i32 0, i32 0))
  br label %exit_unregister

if.end11:                                         ; preds = %if.end6
  %5 = load %struct.platform_device*, %struct.platform_device** @pdev, align 8, !tbaa !12
  %6 = bitcast %struct.nct6775_sio_data* %sio_data to i8*
  %call12 = call i32 @platform_device_add_data(%struct.platform_device* %5, i8* %6, i64 8)
  %tobool13 = icmp ne i32 %call12, 0
  br i1 %tobool13, label %if.then14, label %if.end16

if.then14:                                        ; preds = %if.end11
  %call15 = call i32 (i8*, ...) @printk(i8* getelementptr inbounds ([44 x i8], [44 x i8]* @.str.387, i32 0, i32 0))
  br label %exit_device_put

if.end16:                                         ; preds = %if.end11
  %7 = bitcast %struct.resource* %res to i8*
  call void @llvm.memset.p0i8.i64(i8* %7, i8 0, i64 56, i32 8, i1 false)
  %name = getelementptr inbounds %struct.resource, %struct.resource* %res, i32 0, i32 2
  store i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str, i32 0, i32 0), i8** %name, align 8, !tbaa !15
  %8 = load i16, i16* %address, align 2, !tbaa !13
  %conv17 = zext i16 %8 to i32
  %add = add nsw i32 %conv17, 5
  %conv18 = sext i32 %add to i64
  %start = getelementptr inbounds %struct.resource, %struct.resource* %res, i32 0, i32 0
  store i64 %conv18, i64* %start, align 8, !tbaa !19
  %9 = load i16, i16* %address, align 2, !tbaa !13
  %conv19 = zext i16 %9 to i32
  %add20 = add nsw i32 %conv19, 5
  %add21 = add nsw i32 %add20, 2
  %sub = sub nsw i32 %add21, 1
  %conv22 = sext i32 %sub to i64
  %end = getelementptr inbounds %struct.resource, %struct.resource* %res, i32 0, i32 1
  store i64 %conv22, i64* %end, align 8, !tbaa !20
  %flags = getelementptr inbounds %struct.resource, %struct.resource* %res, i32 0, i32 3
  store i64 256, i64* %flags, align 8, !tbaa !21
  %call23 = call i32 @acpi_check_resource_conflict(%struct.resource* %res)
  %tobool24 = icmp ne i32 %call23, 0
  br i1 %tobool24, label %exit_device_put, label %if.end26

if.end26:                                         ; preds = %if.end16
  %10 = load %struct.platform_device*, %struct.platform_device** @pdev, align 8, !tbaa !12
  %call27 = call i32 @platform_device_add_resources(%struct.platform_device* %10, %struct.resource* %res, i32 1)
  %tobool28 = icmp ne i32 %call27, 0
  br i1 %tobool28, label %if.then29, label %if.end31

if.then29:                                        ; preds = %if.end26
  %call30 = call i32 (i8*, ...) @printk(i8* getelementptr inbounds ([49 x i8], [49 x i8]* @.str.388, i32 0, i32 0), i32 %call27)
  br label %exit_device_put

if.end31:                                         ; preds = %if.end26
  %11 = load %struct.platform_device*, %struct.platform_device** @pdev, align 8, !tbaa !12
  %call32 = call i32 @platform_device_add(%struct.platform_device* %11)
  %tobool33 = icmp ne i32 %call32, 0
  br i1 %tobool33, label %if.then34, label %cleanup

if.then34:                                        ; preds = %if.end31
  %call35 = call i32 (i8*, ...) @printk(i8* getelementptr inbounds ([40 x i8], [40 x i8]* @.str.389, i32 0, i32 0), i32 %call32)
  br label %exit_device_put

exit_device_put:                                  ; preds = %if.end16, %if.then34, %if.then29, %if.then14
  %err.0 = phi i32 [ %call12, %if.then14 ], [ %call27, %if.then29 ], [ %call32, %if.then34 ], [ %call23, %if.end16 ]
  %12 = load %struct.platform_device*, %struct.platform_device** @pdev, align 8, !tbaa !12
  call void @platform_device_put(%struct.platform_device* %12)
  br label %exit_unregister

exit_unregister:                                  ; preds = %exit_device_put, %if.then9
  %err.1 = phi i32 [ %err.0, %exit_device_put ], [ -12, %if.then9 ]
  call void @platform_driver_unregister(%struct.platform_driver* @nct6775_driver)
  br label %cleanup

cleanup:                                          ; preds = %exit_unregister, %if.end, %if.end31, %land.lhs.true
  %retval.0 = phi i32 [ -19, %land.lhs.true ], [ 0, %if.end31 ], [ %err.1, %exit_unregister ], [ %call3, %if.end ]
  %13 = bitcast %struct.nct6775_sio_data* %sio_data to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %13) #6
  %14 = bitcast %struct.resource* %res to i8*
  call void @llvm.lifetime.end.p0i8(i64 56, i8* %14) #6
  %15 = bitcast i16* %address to i8*
  call void @llvm.lifetime.end.p0i8(i64 2, i8* %15) #6
  ret i32 %retval.0
}

; Function Attrs: alwaysinline nounwind uwtable
define internal i8* @kmalloc(i64 %size, i32 %flags) #3 {
entry:
  %call = call i8* @__kmalloc(i64 %size, i32 %flags)
  ret i8* %call
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64, i8* nocapture) #4

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64, i8* nocapture) #4

; Function Attrs: inlinehint nounwind uwtable
define internal i64 @arch_local_save_flags() #0 {
entry:
  %call = call i64 @native_save_fl()
  ret i64 %call
}

; Function Attrs: inlinehint nounwind uwtable
define internal i32 @arch_irqs_disabled_flags(i64 %flags) #0 {
entry:
  %and = and i64 %flags, 512
  %tobool = icmp ne i64 %and, 0
  %lnot = xor i1 %tobool, true
  %lnot.ext = zext i1 %lnot to i32
  ret i32 %lnot.ext
}

declare i8* @__kmalloc(i64, i32) #2

; Function Attrs: inlinehint nounwind uwtable
define internal i64 @native_save_fl() #0 {
entry:
  %flags = alloca i64, align 8
  %0 = bitcast i64* %flags to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %0) #6
  call void asm sideeffect "# __raw_save_flags\0A\09pushf ; pop $0", "=*rm,~{memory},~{dirflag},~{fpsr},~{flags}"(i64* %flags) #6, !srcloc !22
  %1 = load i64, i64* %flags, align 8, !tbaa !23
  %2 = bitcast i64* %flags to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %2) #6
  ret i64 %1
}

; Function Attrs: inlinehint nounwind uwtable
define internal i8* @kmem_cache_zalloc(%struct.kmem_cache* %k, i32 %flags) #0 {
entry:
  %or = or i32 %flags, 32768
  %call = call i8* @kmem_cache_alloc(%struct.kmem_cache* %k, i32 %or)
  ret i8* %call
}

declare i8* @kmem_cache_alloc(%struct.kmem_cache*, i32) #2

; Function Attrs: alwaysinline nounwind uwtable
define internal %struct.task_struct* @get_current() #3 {
entry:
  %0 = call %struct.task_struct* asm "movq %gs:${1:P},$0", "=r,im,~{dirflag},~{fpsr},~{flags}"(%struct.task_struct** @current_task) #5, !srcloc !24
  ret %struct.task_struct* %0
}

; Function Attrs: nounwind uwtable
define internal i32 @nct6775_probe(%struct.platform_device* %pdev) #1 {
entry:
  %mask = alloca i32, align 4
  %available = alloca i32, align 4
  %dev1 = getelementptr inbounds %struct.platform_device, %struct.platform_device* %pdev, i32 0, i32 3
  %platform_data = getelementptr inbounds %struct.device, %struct.device* %dev1, i32 0, i32 8
  %0 = load i8*, i8** %platform_data, align 8, !tbaa !25
  %1 = bitcast i8* %0 to %struct.nct6775_sio_data*
  %2 = bitcast i32* %mask to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* %2) #6
  %3 = bitcast i32* %available to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* %3) #6
  %call = call %struct.resource* @platform_get_resource(%struct.platform_device* %pdev, i32 256, i32 0)
  %dev2 = getelementptr inbounds %struct.platform_device, %struct.platform_device* %pdev, i32 0, i32 3
  %start = getelementptr inbounds %struct.resource, %struct.resource* %call, i32 0, i32 0
  %4 = load i64, i64* %start, align 8, !tbaa !19
  %call3 = call %struct.resource* @__devm_request_region(%struct.device* %dev2, %struct.resource* @ioport_resource, i64 %4, i64 2, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str, i32 0, i32 0))
  %tobool = icmp ne %struct.resource* %call3, null
  br i1 %tobool, label %if.end, label %cleanup806

if.end:                                           ; preds = %entry
  %dev4 = getelementptr inbounds %struct.platform_device, %struct.platform_device* %pdev, i32 0, i32 3
  %call5 = call i8* @devm_kzalloc(%struct.device* %dev4, i64 968, i32 208)
  %5 = bitcast i8* %call5 to %struct.nct6775_data*
  %tobool6 = icmp ne %struct.nct6775_data* %5, null
  br i1 %tobool6, label %if.end8, label %cleanup806

if.end8:                                          ; preds = %if.end
  %kind = getelementptr inbounds %struct.nct6775_sio_data, %struct.nct6775_sio_data* %1, i32 0, i32 1
  %6 = load i32, i32* %kind, align 4, !tbaa !42
  %kind9 = getelementptr inbounds %struct.nct6775_data, %struct.nct6775_data* %5, i32 0, i32 1
  store i32 %6, i32* %kind9, align 4, !tbaa !44
  %start10 = getelementptr inbounds %struct.resource, %struct.resource* %call, i32 0, i32 0
  %7 = load i64, i64* %start10, align 8, !tbaa !19
  %conv = trunc i64 %7 to i32
  %addr = getelementptr inbounds %struct.nct6775_data, %struct.nct6775_data* %5, i32 0, i32 0
  store i32 %conv, i32* %addr, align 8, !tbaa !46
  %update_lock = getelementptr inbounds %struct.nct6775_data, %struct.nct6775_data* %5, i32 0, i32 38
  call void @__mutex_init(%struct.mutex* %update_lock, i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.1, i32 0, i32 0), %struct.lock_class_key* @nct6775_probe.__key)
  %kind11 = getelementptr inbounds %struct.nct6775_data, %struct.nct6775_data* %5, i32 0, i32 1
  %8 = load i32, i32* %kind11, align 4, !tbaa !44
  %idxprom = zext i32 %8 to i64
  %arrayidx = getelementptr inbounds [3 x i8*], [3 x i8*]* @nct6775_device_names, i64 0, i64 %idxprom
  %9 = load i8*, i8** %arrayidx, align 8, !tbaa !12
  %name = getelementptr inbounds %struct.nct6775_data, %struct.nct6775_data* %5, i32 0, i32 2
  store i8* %9, i8** %name, align 8, !tbaa !47
  %bank = getelementptr inbounds %struct.nct6775_data, %struct.nct6775_data* %5, i32 0, i32 41
  store i8 -1, i8* %bank, align 8, !tbaa !48
  %10 = bitcast %struct.nct6775_data* %5 to i8*
  call void @platform_set_drvdata(%struct.platform_device* %pdev, i8* %10)
  %kind12 = getelementptr inbounds %struct.nct6775_data, %struct.nct6775_data* %5, i32 0, i32 1
  %11 = load i32, i32* %kind12, align 4, !tbaa !44
  br label %NodeBlock16

NodeBlock16:                                      ; preds = %if.end8
  %Pivot17 = icmp slt i32 %11, 1
  br i1 %Pivot17, label %LeafBlock, label %NodeBlock

NodeBlock:                                        ; preds = %NodeBlock16
  %Pivot = icmp slt i32 %11, 2
  br i1 %Pivot, label %sw.bb37, label %LeafBlock14

LeafBlock14:                                      ; preds = %NodeBlock
  %SwitchLeaf15 = icmp eq i32 %11, 2
  br i1 %SwitchLeaf15, label %sw.bb98, label %NewDefault

LeafBlock:                                        ; preds = %NodeBlock16
  %SwitchLeaf = icmp eq i32 %11, 0
  br i1 %SwitchLeaf, label %sw.bb, label %NewDefault

sw.bb:                                            ; preds = %LeafBlock
  %in_num = getelementptr inbounds %struct.nct6775_data, %struct.nct6775_data* %5, i32 0, i32 42
  store i8 9, i8* %in_num, align 1, !tbaa !49
  %pwm_num = getelementptr inbounds %struct.nct6775_data, %struct.nct6775_data* %5, i32 0, i32 57
  store i8 3, i8* %pwm_num, align 8, !tbaa !50
  %auto_pwm_num = getelementptr inbounds %struct.nct6775_data, %struct.nct6775_data* %5, i32 0, i32 69
  store i32 6, i32* %auto_pwm_num, align 4, !tbaa !51
  %has_fan_div = getelementptr inbounds %struct.nct6775_data, %struct.nct6775_data* %5, i32 0, i32 51
  store i8 1, i8* %has_fan_div, align 1, !tbaa !52
  %temp_fixed_num = getelementptr inbounds %struct.nct6775_data, %struct.nct6775_data* %5, i32 0, i32 52
  store i8 3, i8* %temp_fixed_num, align 4, !tbaa !53
  %ALARM_BITS = getelementptr inbounds %struct.nct6775_data, %struct.nct6775_data* %5, i32 0, i32 12
  store i8* getelementptr inbounds ([32 x i8], [32 x i8]* @NCT6775_ALARM_BITS, i32 0, i32 0), i8** %ALARM_BITS, align 8, !tbaa !54
  %fan_from_reg = getelementptr inbounds %struct.nct6775_data, %struct.nct6775_data* %5, i32 0, i32 36
  store i32 (i16, i32)* @fan_from_reg16, i32 (i16, i32)** %fan_from_reg, align 8, !tbaa !55
  %fan_from_reg_min = getelementptr inbounds %struct.nct6775_data, %struct.nct6775_data* %5, i32 0, i32 37
  store i32 (i16, i32)* @fan_from_reg8, i32 (i16, i32)** %fan_from_reg_min, align 8, !tbaa !56
  %target_temp_mask = getelementptr inbounds %struct.nct6775_data, %struct.nct6775_data* %5, i32 0, i32 62
  store i8 127, i8* %target_temp_mask, align 4, !tbaa !57
  %tolerance_mask = getelementptr inbounds %struct.nct6775_data, %struct.nct6775_data* %5, i32 0, i32 67
  store i8 15, i8* %tolerance_mask, align 1, !tbaa !58
  %speed_tolerance_limit = getelementptr inbounds %struct.nct6775_data, %struct.nct6775_data* %5, i32 0, i32 65
  store i8 15, i8* %speed_tolerance_limit, align 8, !tbaa !59
  %temp_label = getelementptr inbounds %struct.nct6775_data, %struct.nct6775_data* %5, i32 0, i32 7
  store i8** getelementptr inbounds ([21 x i8*], [21 x i8*]* @nct6775_temp_label, i32 0, i32 0), i8*** %temp_label, align 8, !tbaa !60
  %temp_label_num = getelementptr inbounds %struct.nct6775_data, %struct.nct6775_data* %5, i32 0, i32 8
  store i32 21, i32* %temp_label_num, align 8, !tbaa !61
  %REG_CONFIG = getelementptr inbounds %struct.nct6775_data, %struct.nct6775_data* %5, i32 0, i32 9
  store i16 64, i16* %REG_CONFIG, align 4, !tbaa !62
  %REG_VBAT = getelementptr inbounds %struct.nct6775_data, %struct.nct6775_data* %5, i32 0, i32 10
  store i16 93, i16* %REG_VBAT, align 2, !tbaa !63
  %REG_DIODE = getelementptr inbounds %struct.nct6775_data, %struct.nct6775_data* %5, i32 0, i32 11
  store i16 94, i16* %REG_DIODE, align 8, !tbaa !64
  %REG_VIN = getelementptr inbounds %struct.nct6775_data, %struct.nct6775_data* %5, i32 0, i32 13
  store i16* getelementptr inbounds ([10 x i16], [10 x i16]* @NCT6775_REG_IN, i32 0, i32 0), i16** %REG_VIN, align 8, !tbaa !65
  %REG_IN_MINMAX = getelementptr inbounds %struct.nct6775_data, %struct.nct6775_data* %5, i32 0, i32 14
  %arrayidx13 = getelementptr inbounds [2 x i16*], [2 x i16*]* %REG_IN_MINMAX, i64 0, i64 0
  store i16* getelementptr inbounds ([15 x i16], [15 x i16]* @NCT6775_REG_IN_MIN, i32 0, i32 0), i16** %arrayidx13, align 8, !tbaa !12
  %REG_IN_MINMAX14 = getelementptr inbounds %struct.nct6775_data, %struct.nct6775_data* %5, i32 0, i32 14
  %arrayidx15 = getelementptr inbounds [2 x i16*], [2 x i16*]* %REG_IN_MINMAX14, i64 0, i64 1
  store i16* getelementptr inbounds ([15 x i16], [15 x i16]* @NCT6775_REG_IN_MAX, i32 0, i32 0), i16** %arrayidx15, align 8, !tbaa !12
  %REG_TARGET = getelementptr inbounds %struct.nct6775_data, %struct.nct6775_data* %5, i32 0, i32 15
  store i16* getelementptr inbounds ([5 x i16], [5 x i16]* @NCT6775_REG_TARGET, i32 0, i32 0), i16** %REG_TARGET, align 8, !tbaa !66
  %REG_FAN = getelementptr inbounds %struct.nct6775_data, %struct.nct6775_data* %5, i32 0, i32 16
  store i16* getelementptr inbounds ([5 x i16], [5 x i16]* @NCT6775_REG_FAN, i32 0, i32 0), i16** %REG_FAN, align 8, !tbaa !67
  %REG_FAN_MODE = getelementptr inbounds %struct.nct6775_data, %struct.nct6775_data* %5, i32 0, i32 17
  store i16* getelementptr inbounds ([5 x i16], [5 x i16]* @NCT6775_REG_FAN_MODE, i32 0, i32 0), i16** %REG_FAN_MODE, align 8, !tbaa !68
  %REG_FAN_MIN = getelementptr inbounds %struct.nct6775_data, %struct.nct6775_data* %5, i32 0, i32 18
  store i16* getelementptr inbounds ([3 x i16], [3 x i16]* @NCT6775_REG_FAN_MIN, i32 0, i32 0), i16** %REG_FAN_MIN, align 8, !tbaa !69
  %REG_FAN_PULSES = getelementptr inbounds %struct.nct6775_data, %struct.nct6775_data* %5, i32 0, i32 19
  store i16* getelementptr inbounds ([5 x i16], [5 x i16]* @NCT6775_REG_FAN_PULSES, i32 0, i32 0), i16** %REG_FAN_PULSES, align 8, !tbaa !70
  %REG_FAN_TIME = getelementptr inbounds %struct.nct6775_data, %struct.nct6775_data* %5, i32 0, i32 20
  %arrayidx16 = getelementptr inbounds [3 x i16*], [3 x i16*]* %REG_FAN_TIME, i64 0, i64 0
  store i16* getelementptr inbounds ([5 x i16], [5 x i16]* @NCT6775_REG_FAN_STOP_TIME, i32 0, i32 0), i16** %arrayidx16, align 8, !tbaa !12
  %REG_FAN_TIME17 = getelementptr inbounds %struct.nct6775_data, %struct.nct6775_data* %5, i32 0, i32 20
  %arrayidx18 = getelementptr inbounds [3 x i16*], [3 x i16*]* %REG_FAN_TIME17, i64 0, i64 1
  store i16* getelementptr inbounds ([5 x i16], [5 x i16]* @NCT6775_REG_FAN_STEP_UP_TIME, i32 0, i32 0), i16** %arrayidx18, align 8, !tbaa !12
  %REG_FAN_TIME19 = getelementptr inbounds %struct.nct6775_data, %struct.nct6775_data* %5, i32 0, i32 20
  %arrayidx20 = getelementptr inbounds [3 x i16*], [3 x i16*]* %REG_FAN_TIME19, i64 0, i64 2
  store i16* getelementptr inbounds ([5 x i16], [5 x i16]* @NCT6775_REG_FAN_STEP_DOWN_TIME, i32 0, i32 0), i16** %arrayidx20, align 8, !tbaa !12
  %REG_PWM = getelementptr inbounds %struct.nct6775_data, %struct.nct6775_data* %5, i32 0, i32 24
  %arrayidx21 = getelementptr inbounds [7 x i16*], [7 x i16*]* %REG_PWM, i64 0, i64 0
  store i16* getelementptr inbounds ([5 x i16], [5 x i16]* @NCT6775_REG_PWM, i32 0, i32 0), i16** %arrayidx21, align 8, !tbaa !12
  br label %sw.epilog

sw.bb37:                                          ; preds = %NodeBlock
  %in_num38 = getelementptr inbounds %struct.nct6775_data, %struct.nct6775_data* %5, i32 0, i32 42
  store i8 9, i8* %in_num38, align 1, !tbaa !49
  %pwm_num39 = getelementptr inbounds %struct.nct6775_data, %struct.nct6775_data* %5, i32 0, i32 57
  store i8 3, i8* %pwm_num39, align 8, !tbaa !50
  %auto_pwm_num40 = getelementptr inbounds %struct.nct6775_data, %struct.nct6775_data* %5, i32 0, i32 69
  store i32 4, i32* %auto_pwm_num40, align 4, !tbaa !51
  %has_fan_div41 = getelementptr inbounds %struct.nct6775_data, %struct.nct6775_data* %5, i32 0, i32 51
  store i8 0, i8* %has_fan_div41, align 1, !tbaa !52
  %temp_fixed_num42 = getelementptr inbounds %struct.nct6775_data, %struct.nct6775_data* %5, i32 0, i32 52
  store i8 3, i8* %temp_fixed_num42, align 4, !tbaa !53
  %ALARM_BITS43 = getelementptr inbounds %struct.nct6775_data, %struct.nct6775_data* %5, i32 0, i32 12
  store i8* getelementptr inbounds ([32 x i8], [32 x i8]* @NCT6776_ALARM_BITS, i32 0, i32 0), i8** %ALARM_BITS43, align 8, !tbaa !54
  %fan_from_reg44 = getelementptr inbounds %struct.nct6775_data, %struct.nct6775_data* %5, i32 0, i32 36
  store i32 (i16, i32)* @fan_from_reg13, i32 (i16, i32)** %fan_from_reg44, align 8, !tbaa !55
  %fan_from_reg_min45 = getelementptr inbounds %struct.nct6775_data, %struct.nct6775_data* %5, i32 0, i32 37
  store i32 (i16, i32)* @fan_from_reg13, i32 (i16, i32)** %fan_from_reg_min45, align 8, !tbaa !56
  %target_temp_mask46 = getelementptr inbounds %struct.nct6775_data, %struct.nct6775_data* %5, i32 0, i32 62
  store i8 -1, i8* %target_temp_mask46, align 4, !tbaa !57
  %tolerance_mask47 = getelementptr inbounds %struct.nct6775_data, %struct.nct6775_data* %5, i32 0, i32 67
  store i8 7, i8* %tolerance_mask47, align 1, !tbaa !58
  %speed_tolerance_limit48 = getelementptr inbounds %struct.nct6775_data, %struct.nct6775_data* %5, i32 0, i32 65
  store i8 63, i8* %speed_tolerance_limit48, align 8, !tbaa !59
  %temp_label49 = getelementptr inbounds %struct.nct6775_data, %struct.nct6775_data* %5, i32 0, i32 7
  store i8** getelementptr inbounds ([23 x i8*], [23 x i8*]* @nct6776_temp_label, i32 0, i32 0), i8*** %temp_label49, align 8, !tbaa !60
  %temp_label_num50 = getelementptr inbounds %struct.nct6775_data, %struct.nct6775_data* %5, i32 0, i32 8
  store i32 23, i32* %temp_label_num50, align 8, !tbaa !61
  %REG_CONFIG51 = getelementptr inbounds %struct.nct6775_data, %struct.nct6775_data* %5, i32 0, i32 9
  store i16 64, i16* %REG_CONFIG51, align 4, !tbaa !62
  %REG_VBAT52 = getelementptr inbounds %struct.nct6775_data, %struct.nct6775_data* %5, i32 0, i32 10
  store i16 93, i16* %REG_VBAT52, align 2, !tbaa !63
  %REG_DIODE53 = getelementptr inbounds %struct.nct6775_data, %struct.nct6775_data* %5, i32 0, i32 11
  store i16 94, i16* %REG_DIODE53, align 8, !tbaa !64
  %REG_VIN54 = getelementptr inbounds %struct.nct6775_data, %struct.nct6775_data* %5, i32 0, i32 13
  store i16* getelementptr inbounds ([10 x i16], [10 x i16]* @NCT6775_REG_IN, i32 0, i32 0), i16** %REG_VIN54, align 8, !tbaa !65
  %REG_IN_MINMAX55 = getelementptr inbounds %struct.nct6775_data, %struct.nct6775_data* %5, i32 0, i32 14
  %arrayidx56 = getelementptr inbounds [2 x i16*], [2 x i16*]* %REG_IN_MINMAX55, i64 0, i64 0
  store i16* getelementptr inbounds ([15 x i16], [15 x i16]* @NCT6775_REG_IN_MIN, i32 0, i32 0), i16** %arrayidx56, align 8, !tbaa !12
  %REG_IN_MINMAX57 = getelementptr inbounds %struct.nct6775_data, %struct.nct6775_data* %5, i32 0, i32 14
  %arrayidx58 = getelementptr inbounds [2 x i16*], [2 x i16*]* %REG_IN_MINMAX57, i64 0, i64 1
  store i16* getelementptr inbounds ([15 x i16], [15 x i16]* @NCT6775_REG_IN_MAX, i32 0, i32 0), i16** %arrayidx58, align 8, !tbaa !12
  %REG_TARGET59 = getelementptr inbounds %struct.nct6775_data, %struct.nct6775_data* %5, i32 0, i32 15
  store i16* getelementptr inbounds ([5 x i16], [5 x i16]* @NCT6775_REG_TARGET, i32 0, i32 0), i16** %REG_TARGET59, align 8, !tbaa !66
  %REG_FAN60 = getelementptr inbounds %struct.nct6775_data, %struct.nct6775_data* %5, i32 0, i32 16
  store i16* getelementptr inbounds ([5 x i16], [5 x i16]* @NCT6775_REG_FAN, i32 0, i32 0), i16** %REG_FAN60, align 8, !tbaa !67
  %REG_FAN_MODE61 = getelementptr inbounds %struct.nct6775_data, %struct.nct6775_data* %5, i32 0, i32 17
  store i16* getelementptr inbounds ([5 x i16], [5 x i16]* @NCT6775_REG_FAN_MODE, i32 0, i32 0), i16** %REG_FAN_MODE61, align 8, !tbaa !68
  %REG_FAN_MIN62 = getelementptr inbounds %struct.nct6775_data, %struct.nct6775_data* %5, i32 0, i32 18
  store i16* getelementptr inbounds ([5 x i16], [5 x i16]* @NCT6776_REG_FAN_MIN, i32 0, i32 0), i16** %REG_FAN_MIN62, align 8, !tbaa !69
  %REG_FAN_PULSES63 = getelementptr inbounds %struct.nct6775_data, %struct.nct6775_data* %5, i32 0, i32 19
  store i16* getelementptr inbounds ([5 x i16], [5 x i16]* @NCT6776_REG_FAN_PULSES, i32 0, i32 0), i16** %REG_FAN_PULSES63, align 8, !tbaa !70
  %REG_FAN_TIME64 = getelementptr inbounds %struct.nct6775_data, %struct.nct6775_data* %5, i32 0, i32 20
  %arrayidx65 = getelementptr inbounds [3 x i16*], [3 x i16*]* %REG_FAN_TIME64, i64 0, i64 0
  store i16* getelementptr inbounds ([5 x i16], [5 x i16]* @NCT6775_REG_FAN_STOP_TIME, i32 0, i32 0), i16** %arrayidx65, align 8, !tbaa !12
  %REG_FAN_TIME66 = getelementptr inbounds %struct.nct6775_data, %struct.nct6775_data* %5, i32 0, i32 20
  %arrayidx67 = getelementptr inbounds [3 x i16*], [3 x i16*]* %REG_FAN_TIME66, i64 0, i64 1
  store i16* getelementptr inbounds ([5 x i16], [5 x i16]* @NCT6775_REG_FAN_STEP_UP_TIME, i32 0, i32 0), i16** %arrayidx67, align 8, !tbaa !12
  %REG_FAN_TIME68 = getelementptr inbounds %struct.nct6775_data, %struct.nct6775_data* %5, i32 0, i32 20
  %arrayidx69 = getelementptr inbounds [3 x i16*], [3 x i16*]* %REG_FAN_TIME68, i64 0, i64 2
  store i16* getelementptr inbounds ([5 x i16], [5 x i16]* @NCT6775_REG_FAN_STEP_DOWN_TIME, i32 0, i32 0), i16** %arrayidx69, align 8, !tbaa !12
  %REG_TOLERANCE_H = getelementptr inbounds %struct.nct6775_data, %struct.nct6775_data* %5, i32 0, i32 21
  store i16* getelementptr inbounds ([5 x i16], [5 x i16]* @NCT6776_REG_TOLERANCE_H, i32 0, i32 0), i16** %REG_TOLERANCE_H, align 8, !tbaa !71
  br label %sw.epilog

sw.bb98:                                          ; preds = %LeafBlock14
  %in_num99 = getelementptr inbounds %struct.nct6775_data, %struct.nct6775_data* %5, i32 0, i32 42
  store i8 15, i8* %in_num99, align 1, !tbaa !49
  %pwm_num100 = getelementptr inbounds %struct.nct6775_data, %struct.nct6775_data* %5, i32 0, i32 57
  store i8 5, i8* %pwm_num100, align 8, !tbaa !50
  %auto_pwm_num101 = getelementptr inbounds %struct.nct6775_data, %struct.nct6775_data* %5, i32 0, i32 69
  store i32 4, i32* %auto_pwm_num101, align 4, !tbaa !51
  %has_fan_div102 = getelementptr inbounds %struct.nct6775_data, %struct.nct6775_data* %5, i32 0, i32 51
  store i8 0, i8* %has_fan_div102, align 1, !tbaa !52
  %temp_fixed_num103 = getelementptr inbounds %struct.nct6775_data, %struct.nct6775_data* %5, i32 0, i32 52
  store i8 6, i8* %temp_fixed_num103, align 4, !tbaa !53
  %ALARM_BITS104 = getelementptr inbounds %struct.nct6775_data, %struct.nct6775_data* %5, i32 0, i32 12
  store i8* getelementptr inbounds ([32 x i8], [32 x i8]* @NCT6779_ALARM_BITS, i32 0, i32 0), i8** %ALARM_BITS104, align 8, !tbaa !54
  %fan_from_reg105 = getelementptr inbounds %struct.nct6775_data, %struct.nct6775_data* %5, i32 0, i32 36
  store i32 (i16, i32)* @fan_from_reg13, i32 (i16, i32)** %fan_from_reg105, align 8, !tbaa !55
  %fan_from_reg_min106 = getelementptr inbounds %struct.nct6775_data, %struct.nct6775_data* %5, i32 0, i32 37
  store i32 (i16, i32)* @fan_from_reg13, i32 (i16, i32)** %fan_from_reg_min106, align 8, !tbaa !56
  %target_temp_mask107 = getelementptr inbounds %struct.nct6775_data, %struct.nct6775_data* %5, i32 0, i32 62
  store i8 -1, i8* %target_temp_mask107, align 4, !tbaa !57
  %tolerance_mask108 = getelementptr inbounds %struct.nct6775_data, %struct.nct6775_data* %5, i32 0, i32 67
  store i8 7, i8* %tolerance_mask108, align 1, !tbaa !58
  %speed_tolerance_limit109 = getelementptr inbounds %struct.nct6775_data, %struct.nct6775_data* %5, i32 0, i32 65
  store i8 63, i8* %speed_tolerance_limit109, align 8, !tbaa !59
  %temp_label110 = getelementptr inbounds %struct.nct6775_data, %struct.nct6775_data* %5, i32 0, i32 7
  store i8** getelementptr inbounds ([27 x i8*], [27 x i8*]* @nct6779_temp_label, i32 0, i32 0), i8*** %temp_label110, align 8, !tbaa !60
  %temp_label_num111 = getelementptr inbounds %struct.nct6775_data, %struct.nct6775_data* %5, i32 0, i32 8
  store i32 27, i32* %temp_label_num111, align 8, !tbaa !61
  %REG_CONFIG112 = getelementptr inbounds %struct.nct6775_data, %struct.nct6775_data* %5, i32 0, i32 9
  store i16 64, i16* %REG_CONFIG112, align 4, !tbaa !62
  %REG_VBAT113 = getelementptr inbounds %struct.nct6775_data, %struct.nct6775_data* %5, i32 0, i32 10
  store i16 93, i16* %REG_VBAT113, align 2, !tbaa !63
  %REG_DIODE114 = getelementptr inbounds %struct.nct6775_data, %struct.nct6775_data* %5, i32 0, i32 11
  store i16 94, i16* %REG_DIODE114, align 8, !tbaa !64
  %REG_VIN115 = getelementptr inbounds %struct.nct6775_data, %struct.nct6775_data* %5, i32 0, i32 13
  store i16* getelementptr inbounds ([15 x i16], [15 x i16]* @NCT6779_REG_IN, i32 0, i32 0), i16** %REG_VIN115, align 8, !tbaa !65
  %REG_IN_MINMAX116 = getelementptr inbounds %struct.nct6775_data, %struct.nct6775_data* %5, i32 0, i32 14
  %arrayidx117 = getelementptr inbounds [2 x i16*], [2 x i16*]* %REG_IN_MINMAX116, i64 0, i64 0
  store i16* getelementptr inbounds ([15 x i16], [15 x i16]* @NCT6775_REG_IN_MIN, i32 0, i32 0), i16** %arrayidx117, align 8, !tbaa !12
  %REG_IN_MINMAX118 = getelementptr inbounds %struct.nct6775_data, %struct.nct6775_data* %5, i32 0, i32 14
  %arrayidx119 = getelementptr inbounds [2 x i16*], [2 x i16*]* %REG_IN_MINMAX118, i64 0, i64 1
  store i16* getelementptr inbounds ([15 x i16], [15 x i16]* @NCT6775_REG_IN_MAX, i32 0, i32 0), i16** %arrayidx119, align 8, !tbaa !12
  %REG_TARGET120 = getelementptr inbounds %struct.nct6775_data, %struct.nct6775_data* %5, i32 0, i32 15
  store i16* getelementptr inbounds ([5 x i16], [5 x i16]* @NCT6775_REG_TARGET, i32 0, i32 0), i16** %REG_TARGET120, align 8, !tbaa !66
  %REG_FAN121 = getelementptr inbounds %struct.nct6775_data, %struct.nct6775_data* %5, i32 0, i32 16
  store i16* getelementptr inbounds ([5 x i16], [5 x i16]* @NCT6779_REG_FAN, i32 0, i32 0), i16** %REG_FAN121, align 8, !tbaa !67
  %REG_FAN_MODE122 = getelementptr inbounds %struct.nct6775_data, %struct.nct6775_data* %5, i32 0, i32 17
  store i16* getelementptr inbounds ([5 x i16], [5 x i16]* @NCT6775_REG_FAN_MODE, i32 0, i32 0), i16** %REG_FAN_MODE122, align 8, !tbaa !68
  %REG_FAN_MIN123 = getelementptr inbounds %struct.nct6775_data, %struct.nct6775_data* %5, i32 0, i32 18
  store i16* getelementptr inbounds ([5 x i16], [5 x i16]* @NCT6776_REG_FAN_MIN, i32 0, i32 0), i16** %REG_FAN_MIN123, align 8, !tbaa !69
  %REG_FAN_PULSES124 = getelementptr inbounds %struct.nct6775_data, %struct.nct6775_data* %5, i32 0, i32 19
  store i16* getelementptr inbounds ([5 x i16], [5 x i16]* @NCT6779_REG_FAN_PULSES, i32 0, i32 0), i16** %REG_FAN_PULSES124, align 8, !tbaa !70
  %REG_FAN_TIME125 = getelementptr inbounds %struct.nct6775_data, %struct.nct6775_data* %5, i32 0, i32 20
  %arrayidx126 = getelementptr inbounds [3 x i16*], [3 x i16*]* %REG_FAN_TIME125, i64 0, i64 0
  store i16* getelementptr inbounds ([5 x i16], [5 x i16]* @NCT6775_REG_FAN_STOP_TIME, i32 0, i32 0), i16** %arrayidx126, align 8, !tbaa !12
  %REG_FAN_TIME127 = getelementptr inbounds %struct.nct6775_data, %struct.nct6775_data* %5, i32 0, i32 20
  %arrayidx128 = getelementptr inbounds [3 x i16*], [3 x i16*]* %REG_FAN_TIME127, i64 0, i64 1
  store i16* getelementptr inbounds ([5 x i16], [5 x i16]* @NCT6775_REG_FAN_STEP_UP_TIME, i32 0, i32 0), i16** %arrayidx128, align 8, !tbaa !12
  %REG_FAN_TIME129 = getelementptr inbounds %struct.nct6775_data, %struct.nct6775_data* %5, i32 0, i32 20
  %arrayidx130 = getelementptr inbounds [3 x i16*], [3 x i16*]* %REG_FAN_TIME129, i64 0, i64 2
  store i16* getelementptr inbounds ([5 x i16], [5 x i16]* @NCT6775_REG_FAN_STEP_DOWN_TIME, i32 0, i32 0), i16** %arrayidx130, align 8, !tbaa !12
  %REG_TOLERANCE_H131 = getelementptr inbounds %struct.nct6775_data, %struct.nct6775_data* %5, i32 0, i32 21
  store i16* getelementptr inbounds ([5 x i16], [5 x i16]* @NCT6776_REG_TOLERANCE_H, i32 0, i32 0), i16** %REG_TOLERANCE_H131, align 8, !tbaa !71
  br label %sw.epilog

sw.epilog:                                        ; preds = %sw.bb98, %sw.bb37, %sw.bb
  %.sink13 = phi i64 [ 0, %sw.bb98 ], [ 0, %sw.bb37 ], [ 1, %sw.bb ]
  %.sink12 = phi i16* [ getelementptr inbounds ([5 x i16], [5 x i16]* @NCT6775_REG_PWM, i32 0, i32 0), %sw.bb98 ], [ getelementptr inbounds ([5 x i16], [5 x i16]* @NCT6775_REG_PWM, i32 0, i32 0), %sw.bb37 ], [ getelementptr inbounds ([5 x i16], [5 x i16]* @NCT6775_REG_FAN_START_OUTPUT, i32 0, i32 0), %sw.bb ]
  %.sink11 = phi i64 [ 1, %sw.bb98 ], [ 1, %sw.bb37 ], [ 2, %sw.bb ]
  %.sink10 = phi i16* [ getelementptr inbounds ([5 x i16], [5 x i16]* @NCT6775_REG_FAN_START_OUTPUT, i32 0, i32 0), %sw.bb98 ], [ getelementptr inbounds ([5 x i16], [5 x i16]* @NCT6775_REG_FAN_START_OUTPUT, i32 0, i32 0), %sw.bb37 ], [ getelementptr inbounds ([5 x i16], [5 x i16]* @NCT6775_REG_FAN_STOP_OUTPUT, i32 0, i32 0), %sw.bb ]
  %.sink9 = phi i64 [ 2, %sw.bb98 ], [ 2, %sw.bb37 ], [ 3, %sw.bb ]
  %.sink8 = phi i16* [ getelementptr inbounds ([5 x i16], [5 x i16]* @NCT6775_REG_FAN_STOP_OUTPUT, i32 0, i32 0), %sw.bb98 ], [ getelementptr inbounds ([5 x i16], [5 x i16]* @NCT6775_REG_FAN_STOP_OUTPUT, i32 0, i32 0), %sw.bb37 ], [ getelementptr inbounds ([3 x i16], [3 x i16]* @NCT6775_REG_FAN_MAX_OUTPUT, i32 0, i32 0), %sw.bb ]
  %.sink7 = phi i64 [ 5, %sw.bb98 ], [ 5, %sw.bb37 ], [ 4, %sw.bb ]
  %.sink6 = phi i16* [ getelementptr inbounds ([5 x i16], [5 x i16]* @NCT6775_REG_WEIGHT_DUTY_STEP, i32 0, i32 0), %sw.bb98 ], [ getelementptr inbounds ([5 x i16], [5 x i16]* @NCT6775_REG_WEIGHT_DUTY_STEP, i32 0, i32 0), %sw.bb37 ], [ getelementptr inbounds ([3 x i16], [3 x i16]* @NCT6775_REG_FAN_STEP_OUTPUT, i32 0, i32 0), %sw.bb ]
  %.sink5 = phi i64 [ 6, %sw.bb98 ], [ 6, %sw.bb37 ], [ 5, %sw.bb ]
  %.sink4 = phi i16* [ getelementptr inbounds ([5 x i16], [5 x i16]* @NCT6776_REG_WEIGHT_DUTY_BASE, i32 0, i32 0), %sw.bb98 ], [ getelementptr inbounds ([5 x i16], [5 x i16]* @NCT6776_REG_WEIGHT_DUTY_BASE, i32 0, i32 0), %sw.bb37 ], [ getelementptr inbounds ([5 x i16], [5 x i16]* @NCT6775_REG_WEIGHT_DUTY_STEP, i32 0, i32 0), %sw.bb ]
  %.sink3 = phi i8* [ getelementptr inbounds ([3 x i8], [3 x i8]* @NCT6776_REG_PWM_MODE, i32 0, i32 0), %sw.bb98 ], [ getelementptr inbounds ([3 x i8], [3 x i8]* @NCT6776_REG_PWM_MODE, i32 0, i32 0), %sw.bb37 ], [ getelementptr inbounds ([3 x i8], [3 x i8]* @NCT6775_REG_PWM_MODE, i32 0, i32 0), %sw.bb ]
  %.sink2 = phi i8* [ getelementptr inbounds ([3 x i8], [3 x i8]* @NCT6776_PWM_MODE_MASK, i32 0, i32 0), %sw.bb98 ], [ getelementptr inbounds ([3 x i8], [3 x i8]* @NCT6776_PWM_MODE_MASK, i32 0, i32 0), %sw.bb37 ], [ getelementptr inbounds ([3 x i8], [3 x i8]* @NCT6775_PWM_MODE_MASK, i32 0, i32 0), %sw.bb ]
  %.sink1 = phi i16* [ getelementptr inbounds ([6 x i16], [6 x i16]* @NCT6779_REG_TEMP_OFFSET, i32 0, i32 0), %sw.bb98 ], [ getelementptr inbounds ([3 x i16], [3 x i16]* @NCT6775_REG_TEMP_OFFSET, i32 0, i32 0), %sw.bb37 ], [ getelementptr inbounds ([3 x i16], [3 x i16]* @NCT6775_REG_TEMP_OFFSET, i32 0, i32 0), %sw.bb ]
  %.sink = phi i16* [ getelementptr inbounds ([4 x i16], [4 x i16]* @NCT6779_REG_ALARM, i32 0, i32 0), %sw.bb98 ], [ getelementptr inbounds ([4 x i16], [4 x i16]* @NCT6775_REG_ALARM, i32 0, i32 0), %sw.bb37 ], [ getelementptr inbounds ([4 x i16], [4 x i16]* @NCT6775_REG_ALARM, i32 0, i32 0), %sw.bb ]
  %reg_temp_alternate.0 = phi i16* [ getelementptr inbounds ([26 x i16], [26 x i16]* @NCT6779_REG_TEMP_ALTERNATE, i32 0, i32 0), %sw.bb98 ], [ getelementptr inbounds ([22 x i16], [22 x i16]* @NCT6776_REG_TEMP_ALTERNATE, i32 0, i32 0), %sw.bb37 ], [ getelementptr inbounds ([20 x i16], [20 x i16]* @NCT6775_REG_TEMP_ALTERNATE, i32 0, i32 0), %sw.bb ]
  %reg_temp_config.0 = phi i16* [ getelementptr inbounds ([2 x i16], [2 x i16]* @NCT6779_REG_TEMP_CONFIG, i32 0, i32 0), %sw.bb98 ], [ getelementptr inbounds ([6 x i16], [6 x i16]* @NCT6776_REG_TEMP_CONFIG, i32 0, i32 0), %sw.bb37 ], [ getelementptr inbounds ([6 x i16], [6 x i16]* @NCT6775_REG_TEMP_CONFIG, i32 0, i32 0), %sw.bb ]
  %reg_temp_hyst.0 = phi i16* [ getelementptr inbounds ([2 x i16], [2 x i16]* @NCT6779_REG_TEMP_HYST, i32 0, i32 0), %sw.bb98 ], [ getelementptr inbounds ([6 x i16], [6 x i16]* @NCT6775_REG_TEMP_HYST, i32 0, i32 0), %sw.bb37 ], [ getelementptr inbounds ([6 x i16], [6 x i16]* @NCT6775_REG_TEMP_HYST, i32 0, i32 0), %sw.bb ]
  %reg_temp_over.0 = phi i16* [ getelementptr inbounds ([2 x i16], [2 x i16]* @NCT6779_REG_TEMP_OVER, i32 0, i32 0), %sw.bb98 ], [ getelementptr inbounds ([6 x i16], [6 x i16]* @NCT6775_REG_TEMP_OVER, i32 0, i32 0), %sw.bb37 ], [ getelementptr inbounds ([6 x i16], [6 x i16]* @NCT6775_REG_TEMP_OVER, i32 0, i32 0), %sw.bb ]
  %reg_temp.0 = phi i16* [ getelementptr inbounds ([2 x i16], [2 x i16]* @NCT6779_REG_TEMP, i32 0, i32 0), %sw.bb98 ], [ getelementptr inbounds ([6 x i16], [6 x i16]* @NCT6775_REG_TEMP, i32 0, i32 0), %sw.bb37 ], [ getelementptr inbounds ([6 x i16], [6 x i16]* @NCT6775_REG_TEMP, i32 0, i32 0), %sw.bb ]
  %reg_temp_crit.0 = phi i16* [ getelementptr inbounds ([26 x i16], [26 x i16]* @NCT6779_REG_TEMP_CRIT, i32 0, i32 0), %sw.bb98 ], [ getelementptr inbounds ([22 x i16], [22 x i16]* @NCT6776_REG_TEMP_CRIT, i32 0, i32 0), %sw.bb37 ], [ getelementptr inbounds ([20 x i16], [20 x i16]* @NCT6775_REG_TEMP_CRIT, i32 0, i32 0), %sw.bb ]
  %num_reg_temp.0 = phi i32 [ 2, %sw.bb98 ], [ 6, %sw.bb37 ], [ 6, %sw.bb ]
  %REG_PWM132 = getelementptr inbounds %struct.nct6775_data, %struct.nct6775_data* %5, i32 0, i32 24
  %arrayidx133 = getelementptr inbounds [7 x i16*], [7 x i16*]* %REG_PWM132, i64 0, i64 %.sink13
  store i16* %.sink12, i16** %arrayidx133, align 8, !tbaa !12
  %REG_PWM134 = getelementptr inbounds %struct.nct6775_data, %struct.nct6775_data* %5, i32 0, i32 24
  %arrayidx135 = getelementptr inbounds [7 x i16*], [7 x i16*]* %REG_PWM134, i64 0, i64 %.sink11
  store i16* %.sink10, i16** %arrayidx135, align 8, !tbaa !12
  %REG_PWM136 = getelementptr inbounds %struct.nct6775_data, %struct.nct6775_data* %5, i32 0, i32 24
  %arrayidx137 = getelementptr inbounds [7 x i16*], [7 x i16*]* %REG_PWM136, i64 0, i64 %.sink9
  store i16* %.sink8, i16** %arrayidx137, align 8, !tbaa !12
  %REG_PWM138 = getelementptr inbounds %struct.nct6775_data, %struct.nct6775_data* %5, i32 0, i32 24
  %arrayidx139 = getelementptr inbounds [7 x i16*], [7 x i16*]* %REG_PWM138, i64 0, i64 %.sink7
  store i16* %.sink6, i16** %arrayidx139, align 8, !tbaa !12
  %REG_PWM140 = getelementptr inbounds %struct.nct6775_data, %struct.nct6775_data* %5, i32 0, i32 24
  %arrayidx141 = getelementptr inbounds [7 x i16*], [7 x i16*]* %REG_PWM140, i64 0, i64 %.sink5
  store i16* %.sink4, i16** %arrayidx141, align 8, !tbaa !12
  %REG_PWM_READ142 = getelementptr inbounds %struct.nct6775_data, %struct.nct6775_data* %5, i32 0, i32 25
  store i16* getelementptr inbounds ([5 x i16], [5 x i16]* @NCT6775_REG_PWM_READ, i32 0, i32 0), i16** %REG_PWM_READ142, align 8, !tbaa !72
  %REG_PWM_MODE143 = getelementptr inbounds %struct.nct6775_data, %struct.nct6775_data* %5, i32 0, i32 22
  store i8* %.sink3, i8** %REG_PWM_MODE143, align 8, !tbaa !73
  %PWM_MODE_MASK144 = getelementptr inbounds %struct.nct6775_data, %struct.nct6775_data* %5, i32 0, i32 23
  store i8* %.sink2, i8** %PWM_MODE_MASK144, align 8, !tbaa !74
  %REG_AUTO_TEMP145 = getelementptr inbounds %struct.nct6775_data, %struct.nct6775_data* %5, i32 0, i32 26
  store i16* getelementptr inbounds ([5 x i16], [5 x i16]* @NCT6775_REG_AUTO_TEMP, i32 0, i32 0), i16** %REG_AUTO_TEMP145, align 8, !tbaa !75
  %REG_AUTO_PWM146 = getelementptr inbounds %struct.nct6775_data, %struct.nct6775_data* %5, i32 0, i32 27
  store i16* getelementptr inbounds ([5 x i16], [5 x i16]* @NCT6775_REG_AUTO_PWM, i32 0, i32 0), i16** %REG_AUTO_PWM146, align 8, !tbaa !76
  %REG_CRITICAL_TEMP147 = getelementptr inbounds %struct.nct6775_data, %struct.nct6775_data* %5, i32 0, i32 28
  store i16* getelementptr inbounds ([5 x i16], [5 x i16]* @NCT6775_REG_CRITICAL_TEMP, i32 0, i32 0), i16** %REG_CRITICAL_TEMP147, align 8, !tbaa !77
  %REG_CRITICAL_TEMP_TOLERANCE148 = getelementptr inbounds %struct.nct6775_data, %struct.nct6775_data* %5, i32 0, i32 29
  store i16* getelementptr inbounds ([5 x i16], [5 x i16]* @NCT6775_REG_CRITICAL_TEMP_TOLERANCE, i32 0, i32 0), i16** %REG_CRITICAL_TEMP_TOLERANCE148, align 8, !tbaa !78
  %REG_TEMP_OFFSET149 = getelementptr inbounds %struct.nct6775_data, %struct.nct6775_data* %5, i32 0, i32 34
  store i16* %.sink1, i16** %REG_TEMP_OFFSET149, align 8, !tbaa !79
  %REG_TEMP_SOURCE150 = getelementptr inbounds %struct.nct6775_data, %struct.nct6775_data* %5, i32 0, i32 30
  store i16* getelementptr inbounds ([6 x i16], [6 x i16]* @NCT6775_REG_TEMP_SOURCE, i32 0, i32 0), i16** %REG_TEMP_SOURCE150, align 8, !tbaa !80
  %REG_TEMP_SEL151 = getelementptr inbounds %struct.nct6775_data, %struct.nct6775_data* %5, i32 0, i32 31
  store i16* getelementptr inbounds ([5 x i16], [5 x i16]* @NCT6775_REG_TEMP_SEL, i32 0, i32 0), i16** %REG_TEMP_SEL151, align 8, !tbaa !81
  %REG_WEIGHT_TEMP_SEL152 = getelementptr inbounds %struct.nct6775_data, %struct.nct6775_data* %5, i32 0, i32 32
  store i16* getelementptr inbounds ([5 x i16], [5 x i16]* @NCT6775_REG_WEIGHT_TEMP_SEL, i32 0, i32 0), i16** %REG_WEIGHT_TEMP_SEL152, align 8, !tbaa !82
  %REG_WEIGHT_TEMP153 = getelementptr inbounds %struct.nct6775_data, %struct.nct6775_data* %5, i32 0, i32 33
  %arrayidx154 = getelementptr inbounds [3 x i16*], [3 x i16*]* %REG_WEIGHT_TEMP153, i64 0, i64 0
  store i16* getelementptr inbounds ([5 x i16], [5 x i16]* @NCT6775_REG_WEIGHT_TEMP_STEP, i32 0, i32 0), i16** %arrayidx154, align 8, !tbaa !12
  %REG_WEIGHT_TEMP155 = getelementptr inbounds %struct.nct6775_data, %struct.nct6775_data* %5, i32 0, i32 33
  %arrayidx156 = getelementptr inbounds [3 x i16*], [3 x i16*]* %REG_WEIGHT_TEMP155, i64 0, i64 1
  store i16* getelementptr inbounds ([5 x i16], [5 x i16]* @NCT6775_REG_WEIGHT_TEMP_STEP_TOL, i32 0, i32 0), i16** %arrayidx156, align 8, !tbaa !12
  %REG_WEIGHT_TEMP157 = getelementptr inbounds %struct.nct6775_data, %struct.nct6775_data* %5, i32 0, i32 33
  %arrayidx158 = getelementptr inbounds [3 x i16*], [3 x i16*]* %REG_WEIGHT_TEMP157, i64 0, i64 2
  store i16* getelementptr inbounds ([5 x i16], [5 x i16]* @NCT6775_REG_WEIGHT_TEMP_BASE, i32 0, i32 0), i16** %arrayidx158, align 8, !tbaa !12
  %REG_ALARM159 = getelementptr inbounds %struct.nct6775_data, %struct.nct6775_data* %5, i32 0, i32 35
  store i16* %.sink, i16** %REG_ALARM159, align 8, !tbaa !83
  %in_num160 = getelementptr inbounds %struct.nct6775_data, %struct.nct6775_data* %5, i32 0, i32 42
  %12 = load i8, i8* %in_num160, align 1, !tbaa !49
  %conv161 = zext i8 %12 to i32
  %shl = shl i32 1, %conv161
  %sub = sub nsw i32 %shl, 1
  %conv162 = trunc i32 %sub to i16
  %have_in = getelementptr inbounds %struct.nct6775_data, %struct.nct6775_data* %5, i32 0, i32 79
  store i16 %conv162, i16* %have_in, align 2, !tbaa !84
  %have_temp = getelementptr inbounds %struct.nct6775_data, %struct.nct6775_data* %5, i32 0, i32 77
  store i16 0, i16* %have_temp, align 2, !tbaa !85
  store i32 0, i32* %mask, align 4, !tbaa !86
  store i32 0, i32* %available, align 4, !tbaa !86
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %sw.epilog
  %i.0 = phi i32 [ 0, %sw.epilog ], [ %inc, %for.inc ]
  %cmp = icmp slt i32 %i.0, %num_reg_temp.0
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %idxprom164 = sext i32 %i.0 to i64
  %arrayidx165 = getelementptr inbounds i16, i16* %reg_temp.0, i64 %idxprom164
  %13 = load i16, i16* %arrayidx165, align 2, !tbaa !13
  %conv166 = zext i16 %13 to i32
  %cmp167 = icmp eq i32 %conv166, 0
  br i1 %cmp167, label %for.inc, label %if.end170

if.end170:                                        ; preds = %for.body
  %REG_TEMP_SOURCE171 = getelementptr inbounds %struct.nct6775_data, %struct.nct6775_data* %5, i32 0, i32 30
  %14 = load i16*, i16** %REG_TEMP_SOURCE171, align 8, !tbaa !80
  %idxprom172 = sext i32 %i.0 to i64
  %arrayidx173 = getelementptr inbounds i16, i16* %14, i64 %idxprom172
  %15 = load i16, i16* %arrayidx173, align 2, !tbaa !13
  %call174 = call zeroext i16 @nct6775_read_value(%struct.nct6775_data* %5, i16 zeroext %15)
  %conv175 = zext i16 %call174 to i32
  %and = and i32 %conv175, 31
  %tobool176 = icmp ne i32 %and, 0
  br i1 %tobool176, label %lor.lhs.false, label %if.then180

lor.lhs.false:                                    ; preds = %if.end170
  %16 = load i32, i32* %mask, align 4, !tbaa !86
  %shl177 = shl i32 1, %and
  %and178 = and i32 %16, %shl177
  %tobool179 = icmp ne i32 %and178, 0
  br i1 %tobool179, label %if.then180, label %if.end182

if.then180:                                       ; preds = %lor.lhs.false, %if.end170
  %shl181 = shl i32 1, %i.0
  %17 = load i32, i32* %available, align 4, !tbaa !86
  %or = or i32 %17, %shl181
  store i32 %or, i32* %available, align 4, !tbaa !86
  br label %if.end182

if.end182:                                        ; preds = %if.then180, %lor.lhs.false
  %shl183 = shl i32 1, %and
  %18 = load i32, i32* %mask, align 4, !tbaa !86
  %or184 = or i32 %18, %shl183
  store i32 %or184, i32* %mask, align 4, !tbaa !86
  br label %for.inc

for.inc:                                          ; preds = %for.body, %if.end182
  %inc = add nsw i32 %i.0, 1
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %REG_TEMP_SEL185 = getelementptr inbounds %struct.nct6775_data, %struct.nct6775_data* %5, i32 0, i32 31
  %19 = load i16*, i16** %REG_TEMP_SEL185, align 8, !tbaa !81
  call void @add_temp_sensors(%struct.nct6775_data* %5, i16* %19, i32* %available, i32* %mask)
  %REG_WEIGHT_TEMP_SEL186 = getelementptr inbounds %struct.nct6775_data, %struct.nct6775_data* %5, i32 0, i32 32
  %20 = load i16*, i16** %REG_WEIGHT_TEMP_SEL186, align 8, !tbaa !82
  call void @add_temp_sensors(%struct.nct6775_data* %5, i16* %20, i32* %available, i32* %mask)
  store i32 0, i32* %mask, align 4, !tbaa !86
  br label %for.cond187

for.cond187:                                      ; preds = %for.inc330, %for.end
  %s.0 = phi i32 [ 6, %for.end ], [ %s.1, %for.inc330 ]
  %i.1 = phi i32 [ 0, %for.end ], [ %inc331, %for.inc330 ]
  %cmp188 = icmp slt i32 %i.1, %num_reg_temp.0
  br i1 %cmp188, label %for.body190, label %for.end332

for.body190:                                      ; preds = %for.cond187
  %idxprom191 = sext i32 %i.1 to i64
  %arrayidx192 = getelementptr inbounds i16, i16* %reg_temp.0, i64 %idxprom191
  %21 = load i16, i16* %arrayidx192, align 2, !tbaa !13
  %conv193 = zext i16 %21 to i32
  %cmp194 = icmp eq i32 %conv193, 0
  br i1 %cmp194, label %for.inc330, label %if.end197

if.end197:                                        ; preds = %for.body190
  %REG_TEMP_SOURCE198 = getelementptr inbounds %struct.nct6775_data, %struct.nct6775_data* %5, i32 0, i32 30
  %22 = load i16*, i16** %REG_TEMP_SOURCE198, align 8, !tbaa !80
  %idxprom199 = sext i32 %i.1 to i64
  %arrayidx200 = getelementptr inbounds i16, i16* %22, i64 %idxprom199
  %23 = load i16, i16* %arrayidx200, align 2, !tbaa !13
  %call201 = call zeroext i16 @nct6775_read_value(%struct.nct6775_data* %5, i16 zeroext %23)
  %conv202 = zext i16 %call201 to i32
  %and203 = and i32 %conv202, 31
  %tobool204 = icmp ne i32 %and203, 0
  br i1 %tobool204, label %lor.lhs.false205, label %for.inc330

lor.lhs.false205:                                 ; preds = %if.end197
  %24 = load i32, i32* %mask, align 4, !tbaa !86
  %shl206 = shl i32 1, %and203
  %and207 = and i32 %24, %shl206
  %tobool208 = icmp ne i32 %and207, 0
  br i1 %tobool208, label %for.inc330, label %if.end210

if.end210:                                        ; preds = %lor.lhs.false205
  %temp_label_num211 = getelementptr inbounds %struct.nct6775_data, %struct.nct6775_data* %5, i32 0, i32 8
  %25 = load i32, i32* %temp_label_num211, align 8, !tbaa !61
  %cmp212 = icmp sge i32 %and203, %25
  br i1 %cmp212, label %if.then220, label %lor.lhs.false214

lor.lhs.false214:                                 ; preds = %if.end210
  %temp_label215 = getelementptr inbounds %struct.nct6775_data, %struct.nct6775_data* %5, i32 0, i32 7
  %26 = load i8**, i8*** %temp_label215, align 8, !tbaa !60
  %idxprom216 = sext i32 %and203 to i64
  %arrayidx217 = getelementptr inbounds i8*, i8** %26, i64 %idxprom216
  %27 = load i8*, i8** %arrayidx217, align 8, !tbaa !12
  %call218 = call i64 @strlen(i8* %27)
  %tobool219 = icmp ne i64 %call218, 0
  br i1 %tobool219, label %if.end229, label %if.then220

if.then220:                                       ; preds = %lor.lhs.false214, %if.end210
  %REG_TEMP_SOURCE221 = getelementptr inbounds %struct.nct6775_data, %struct.nct6775_data* %5, i32 0, i32 30
  %28 = load i16*, i16** %REG_TEMP_SOURCE221, align 8, !tbaa !80
  %idxprom222 = sext i32 %i.1 to i64
  %arrayidx223 = getelementptr inbounds i16, i16* %28, i64 %idxprom222
  %29 = load i16, i16* %arrayidx223, align 2, !tbaa !13
  %conv224 = zext i16 %29 to i32
  %idxprom225 = sext i32 %i.1 to i64
  %arrayidx226 = getelementptr inbounds i16, i16* %reg_temp.0, i64 %idxprom225
  %30 = load i16, i16* %arrayidx226, align 2, !tbaa !13
  %conv227 = zext i16 %30 to i32
  %call228 = call i32 (%struct.device*, i8*, ...) @_dev_info(%struct.device* %dev1, i8* getelementptr inbounds ([85 x i8], [85 x i8]* @.str.2, i32 0, i32 0), i32 %and203, i32 %i.1, i32 %conv224, i32 %conv227)
  br label %for.inc330

if.end229:                                        ; preds = %lor.lhs.false214
  %shl230 = shl i32 1, %and203
  %31 = load i32, i32* %mask, align 4, !tbaa !86
  %or231 = or i32 %31, %shl230
  store i32 %or231, i32* %mask, align 4, !tbaa !86
  %temp_fixed_num232 = getelementptr inbounds %struct.nct6775_data, %struct.nct6775_data* %5, i32 0, i32 52
  %32 = load i8, i8* %temp_fixed_num232, align 4, !tbaa !53
  %conv233 = zext i8 %32 to i32
  %cmp234 = icmp sle i32 %and203, %conv233
  br i1 %cmp234, label %if.then236, label %if.end279

if.then236:                                       ; preds = %if.end229
  %sub237 = sub nsw i32 %and203, 1
  %shl238 = shl i32 1, %sub237
  %have_temp239 = getelementptr inbounds %struct.nct6775_data, %struct.nct6775_data* %5, i32 0, i32 77
  %33 = load i16, i16* %have_temp239, align 2, !tbaa !85
  %conv240 = zext i16 %33 to i32
  %or241 = or i32 %conv240, %shl238
  %conv242 = trunc i32 %or241 to i16
  store i16 %conv242, i16* %have_temp239, align 2, !tbaa !85
  %sub243 = sub nsw i32 %and203, 1
  %shl244 = shl i32 1, %sub243
  %have_temp_fixed = getelementptr inbounds %struct.nct6775_data, %struct.nct6775_data* %5, i32 0, i32 78
  %34 = load i16, i16* %have_temp_fixed, align 4, !tbaa !87
  %conv245 = zext i16 %34 to i32
  %or246 = or i32 %conv245, %shl244
  %conv247 = trunc i32 %or246 to i16
  store i16 %conv247, i16* %have_temp_fixed, align 4, !tbaa !87
  %idxprom248 = sext i32 %i.1 to i64
  %arrayidx249 = getelementptr inbounds i16, i16* %reg_temp.0, i64 %idxprom248
  %35 = load i16, i16* %arrayidx249, align 2, !tbaa !13
  %reg_temp250 = getelementptr inbounds %struct.nct6775_data, %struct.nct6775_data* %5, i32 0, i32 4
  %arrayidx251 = getelementptr inbounds [4 x [10 x i16]], [4 x [10 x i16]]* %reg_temp250, i64 0, i64 0
  %sub252 = sub nsw i32 %and203, 1
  %idxprom253 = sext i32 %sub252 to i64
  %arrayidx254 = getelementptr inbounds [10 x i16], [10 x i16]* %arrayidx251, i64 0, i64 %idxprom253
  store i16 %35, i16* %arrayidx254, align 2, !tbaa !13
  %idxprom255 = sext i32 %i.1 to i64
  %arrayidx256 = getelementptr inbounds i16, i16* %reg_temp_over.0, i64 %idxprom255
  %36 = load i16, i16* %arrayidx256, align 2, !tbaa !13
  %reg_temp257 = getelementptr inbounds %struct.nct6775_data, %struct.nct6775_data* %5, i32 0, i32 4
  %arrayidx258 = getelementptr inbounds [4 x [10 x i16]], [4 x [10 x i16]]* %reg_temp257, i64 0, i64 1
  %sub259 = sub nsw i32 %and203, 1
  %idxprom260 = sext i32 %sub259 to i64
  %arrayidx261 = getelementptr inbounds [10 x i16], [10 x i16]* %arrayidx258, i64 0, i64 %idxprom260
  store i16 %36, i16* %arrayidx261, align 2, !tbaa !13
  %idxprom262 = sext i32 %i.1 to i64
  %arrayidx263 = getelementptr inbounds i16, i16* %reg_temp_hyst.0, i64 %idxprom262
  %37 = load i16, i16* %arrayidx263, align 2, !tbaa !13
  %reg_temp264 = getelementptr inbounds %struct.nct6775_data, %struct.nct6775_data* %5, i32 0, i32 4
  %arrayidx265 = getelementptr inbounds [4 x [10 x i16]], [4 x [10 x i16]]* %reg_temp264, i64 0, i64 2
  %sub266 = sub nsw i32 %and203, 1
  %idxprom267 = sext i32 %sub266 to i64
  %arrayidx268 = getelementptr inbounds [10 x i16], [10 x i16]* %arrayidx265, i64 0, i64 %idxprom267
  store i16 %37, i16* %arrayidx268, align 2, !tbaa !13
  %idxprom269 = sext i32 %i.1 to i64
  %arrayidx270 = getelementptr inbounds i16, i16* %reg_temp_config.0, i64 %idxprom269
  %38 = load i16, i16* %arrayidx270, align 2, !tbaa !13
  %reg_temp_config271 = getelementptr inbounds %struct.nct6775_data, %struct.nct6775_data* %5, i32 0, i32 6
  %sub272 = sub nsw i32 %and203, 1
  %idxprom273 = sext i32 %sub272 to i64
  %arrayidx274 = getelementptr inbounds [10 x i16], [10 x i16]* %reg_temp_config271, i64 0, i64 %idxprom273
  store i16 %38, i16* %arrayidx274, align 2, !tbaa !13
  %conv275 = trunc i32 %and203 to i8
  %temp_src = getelementptr inbounds %struct.nct6775_data, %struct.nct6775_data* %5, i32 0, i32 5
  %sub276 = sub nsw i32 %and203, 1
  %idxprom277 = sext i32 %sub276 to i64
  %arrayidx278 = getelementptr inbounds [10 x i8], [10 x i8]* %temp_src, i64 0, i64 %idxprom277
  store i8 %conv275, i8* %arrayidx278, align 1, !tbaa !88
  br label %for.inc330

if.end279:                                        ; preds = %if.end229
  %cmp280 = icmp sge i32 %s.0, 10
  br i1 %cmp280, label %for.inc330, label %if.end283

if.end283:                                        ; preds = %if.end279
  %shl284 = shl i32 1, %s.0
  %have_temp285 = getelementptr inbounds %struct.nct6775_data, %struct.nct6775_data* %5, i32 0, i32 77
  %39 = load i16, i16* %have_temp285, align 2, !tbaa !85
  %conv286 = zext i16 %39 to i32
  %or287 = or i32 %conv286, %shl284
  %conv288 = trunc i32 %or287 to i16
  store i16 %conv288, i16* %have_temp285, align 2, !tbaa !85
  %idxprom289 = sext i32 %i.1 to i64
  %arrayidx290 = getelementptr inbounds i16, i16* %reg_temp.0, i64 %idxprom289
  %40 = load i16, i16* %arrayidx290, align 2, !tbaa !13
  %reg_temp291 = getelementptr inbounds %struct.nct6775_data, %struct.nct6775_data* %5, i32 0, i32 4
  %arrayidx292 = getelementptr inbounds [4 x [10 x i16]], [4 x [10 x i16]]* %reg_temp291, i64 0, i64 0
  %idxprom293 = sext i32 %s.0 to i64
  %arrayidx294 = getelementptr inbounds [10 x i16], [10 x i16]* %arrayidx292, i64 0, i64 %idxprom293
  store i16 %40, i16* %arrayidx294, align 2, !tbaa !13
  %idxprom295 = sext i32 %i.1 to i64
  %arrayidx296 = getelementptr inbounds i16, i16* %reg_temp_over.0, i64 %idxprom295
  %41 = load i16, i16* %arrayidx296, align 2, !tbaa !13
  %reg_temp297 = getelementptr inbounds %struct.nct6775_data, %struct.nct6775_data* %5, i32 0, i32 4
  %arrayidx298 = getelementptr inbounds [4 x [10 x i16]], [4 x [10 x i16]]* %reg_temp297, i64 0, i64 1
  %idxprom299 = sext i32 %s.0 to i64
  %arrayidx300 = getelementptr inbounds [10 x i16], [10 x i16]* %arrayidx298, i64 0, i64 %idxprom299
  store i16 %41, i16* %arrayidx300, align 2, !tbaa !13
  %idxprom301 = sext i32 %i.1 to i64
  %arrayidx302 = getelementptr inbounds i16, i16* %reg_temp_hyst.0, i64 %idxprom301
  %42 = load i16, i16* %arrayidx302, align 2, !tbaa !13
  %reg_temp303 = getelementptr inbounds %struct.nct6775_data, %struct.nct6775_data* %5, i32 0, i32 4
  %arrayidx304 = getelementptr inbounds [4 x [10 x i16]], [4 x [10 x i16]]* %reg_temp303, i64 0, i64 2
  %idxprom305 = sext i32 %s.0 to i64
  %arrayidx306 = getelementptr inbounds [10 x i16], [10 x i16]* %arrayidx304, i64 0, i64 %idxprom305
  store i16 %42, i16* %arrayidx306, align 2, !tbaa !13
  %idxprom307 = sext i32 %i.1 to i64
  %arrayidx308 = getelementptr inbounds i16, i16* %reg_temp_config.0, i64 %idxprom307
  %43 = load i16, i16* %arrayidx308, align 2, !tbaa !13
  %reg_temp_config309 = getelementptr inbounds %struct.nct6775_data, %struct.nct6775_data* %5, i32 0, i32 6
  %idxprom310 = sext i32 %s.0 to i64
  %arrayidx311 = getelementptr inbounds [10 x i16], [10 x i16]* %reg_temp_config309, i64 0, i64 %idxprom310
  store i16 %43, i16* %arrayidx311, align 2, !tbaa !13
  %sub312 = sub nsw i32 %and203, 1
  %idxprom313 = sext i32 %sub312 to i64
  %arrayidx314 = getelementptr inbounds i16, i16* %reg_temp_crit.0, i64 %idxprom313
  %44 = load i16, i16* %arrayidx314, align 2, !tbaa !13
  %tobool315 = icmp ne i16 %44, 0
  br i1 %tobool315, label %if.then316, label %if.end324

if.then316:                                       ; preds = %if.end283
  %idxprom318 = sext i32 %sub312 to i64
  %arrayidx319 = getelementptr inbounds i16, i16* %reg_temp_crit.0, i64 %idxprom318
  %45 = load i16, i16* %arrayidx319, align 2, !tbaa !13
  %reg_temp320 = getelementptr inbounds %struct.nct6775_data, %struct.nct6775_data* %5, i32 0, i32 4
  %arrayidx321 = getelementptr inbounds [4 x [10 x i16]], [4 x [10 x i16]]* %reg_temp320, i64 0, i64 3
  %idxprom322 = sext i32 %s.0 to i64
  %arrayidx323 = getelementptr inbounds [10 x i16], [10 x i16]* %arrayidx321, i64 0, i64 %idxprom322
  store i16 %45, i16* %arrayidx323, align 2, !tbaa !13
  br label %if.end324

if.end324:                                        ; preds = %if.then316, %if.end283
  %conv325 = trunc i32 %and203 to i8
  %temp_src326 = getelementptr inbounds %struct.nct6775_data, %struct.nct6775_data* %5, i32 0, i32 5
  %idxprom327 = sext i32 %s.0 to i64
  %arrayidx328 = getelementptr inbounds [10 x i8], [10 x i8]* %temp_src326, i64 0, i64 %idxprom327
  store i8 %conv325, i8* %arrayidx328, align 1, !tbaa !88
  %inc329 = add nsw i32 %s.0, 1
  br label %for.inc330

for.inc330:                                       ; preds = %if.end279, %if.end197, %lor.lhs.false205, %for.body190, %if.end324, %if.then236, %if.then220
  %s.1 = phi i32 [ %s.0, %if.then220 ], [ %s.0, %if.then236 ], [ %inc329, %if.end324 ], [ %s.0, %for.body190 ], [ %s.0, %lor.lhs.false205 ], [ %s.0, %if.end197 ], [ %s.0, %if.end279 ]
  %inc331 = add nsw i32 %i.1, 1
  br label %for.cond187

for.end332:                                       ; preds = %for.cond187
  br label %for.cond333

for.cond333:                                      ; preds = %for.inc420, %for.end332
  %s.2 = phi i32 [ %s.0, %for.end332 ], [ %s.3, %for.inc420 ]
  %i.2 = phi i32 [ 0, %for.end332 ], [ %inc421, %for.inc420 ]
  %temp_label_num334 = getelementptr inbounds %struct.nct6775_data, %struct.nct6775_data* %5, i32 0, i32 8
  %46 = load i32, i32* %temp_label_num334, align 8, !tbaa !61
  %sub335 = sub nsw i32 %46, 1
  %cmp336 = icmp slt i32 %i.2, %sub335
  br i1 %cmp336, label %for.body338, label %for.end422

for.body338:                                      ; preds = %for.cond333
  %idxprom339 = sext i32 %i.2 to i64
  %arrayidx340 = getelementptr inbounds i16, i16* %reg_temp_alternate.0, i64 %idxprom339
  %47 = load i16, i16* %arrayidx340, align 2, !tbaa !13
  %tobool341 = icmp ne i16 %47, 0
  br i1 %tobool341, label %if.end343, label %for.inc420

if.end343:                                        ; preds = %for.body338
  %48 = load i32, i32* %mask, align 4, !tbaa !86
  %add = add nsw i32 %i.2, 1
  %shl344 = shl i32 1, %add
  %and345 = and i32 %48, %shl344
  %tobool346 = icmp ne i32 %and345, 0
  br i1 %tobool346, label %for.inc420, label %if.end348

if.end348:                                        ; preds = %if.end343
  %temp_fixed_num349 = getelementptr inbounds %struct.nct6775_data, %struct.nct6775_data* %5, i32 0, i32 52
  %49 = load i8, i8* %temp_fixed_num349, align 4, !tbaa !53
  %conv350 = zext i8 %49 to i32
  %cmp351 = icmp slt i32 %i.2, %conv350
  br i1 %cmp351, label %if.then353, label %if.end398

if.then353:                                       ; preds = %if.end348
  %have_temp354 = getelementptr inbounds %struct.nct6775_data, %struct.nct6775_data* %5, i32 0, i32 77
  %50 = load i16, i16* %have_temp354, align 2, !tbaa !85
  %conv355 = zext i16 %50 to i32
  %shl356 = shl i32 1, %i.2
  %and357 = and i32 %conv355, %shl356
  %tobool358 = icmp ne i32 %and357, 0
  br i1 %tobool358, label %for.inc420, label %if.end360

if.end360:                                        ; preds = %if.then353
  %shl361 = shl i32 1, %i.2
  %have_temp362 = getelementptr inbounds %struct.nct6775_data, %struct.nct6775_data* %5, i32 0, i32 77
  %51 = load i16, i16* %have_temp362, align 2, !tbaa !85
  %conv363 = zext i16 %51 to i32
  %or364 = or i32 %conv363, %shl361
  %conv365 = trunc i32 %or364 to i16
  store i16 %conv365, i16* %have_temp362, align 2, !tbaa !85
  %shl366 = shl i32 1, %i.2
  %have_temp_fixed367 = getelementptr inbounds %struct.nct6775_data, %struct.nct6775_data* %5, i32 0, i32 78
  %52 = load i16, i16* %have_temp_fixed367, align 4, !tbaa !87
  %conv368 = zext i16 %52 to i32
  %or369 = or i32 %conv368, %shl366
  %conv370 = trunc i32 %or369 to i16
  store i16 %conv370, i16* %have_temp_fixed367, align 4, !tbaa !87
  %idxprom371 = sext i32 %i.2 to i64
  %arrayidx372 = getelementptr inbounds i16, i16* %reg_temp_alternate.0, i64 %idxprom371
  %53 = load i16, i16* %arrayidx372, align 2, !tbaa !13
  %reg_temp373 = getelementptr inbounds %struct.nct6775_data, %struct.nct6775_data* %5, i32 0, i32 4
  %arrayidx374 = getelementptr inbounds [4 x [10 x i16]], [4 x [10 x i16]]* %reg_temp373, i64 0, i64 0
  %idxprom375 = sext i32 %i.2 to i64
  %arrayidx376 = getelementptr inbounds [10 x i16], [10 x i16]* %arrayidx374, i64 0, i64 %idxprom375
  store i16 %53, i16* %arrayidx376, align 2, !tbaa !13
  %cmp377 = icmp slt i32 %i.2, %num_reg_temp.0
  br i1 %cmp377, label %if.then379, label %if.end392

if.then379:                                       ; preds = %if.end360
  %idxprom380 = sext i32 %i.2 to i64
  %arrayidx381 = getelementptr inbounds i16, i16* %reg_temp_over.0, i64 %idxprom380
  %54 = load i16, i16* %arrayidx381, align 2, !tbaa !13
  %reg_temp382 = getelementptr inbounds %struct.nct6775_data, %struct.nct6775_data* %5, i32 0, i32 4
  %arrayidx383 = getelementptr inbounds [4 x [10 x i16]], [4 x [10 x i16]]* %reg_temp382, i64 0, i64 1
  %idxprom384 = sext i32 %i.2 to i64
  %arrayidx385 = getelementptr inbounds [10 x i16], [10 x i16]* %arrayidx383, i64 0, i64 %idxprom384
  store i16 %54, i16* %arrayidx385, align 2, !tbaa !13
  %idxprom386 = sext i32 %i.2 to i64
  %arrayidx387 = getelementptr inbounds i16, i16* %reg_temp_hyst.0, i64 %idxprom386
  %55 = load i16, i16* %arrayidx387, align 2, !tbaa !13
  %reg_temp388 = getelementptr inbounds %struct.nct6775_data, %struct.nct6775_data* %5, i32 0, i32 4
  %arrayidx389 = getelementptr inbounds [4 x [10 x i16]], [4 x [10 x i16]]* %reg_temp388, i64 0, i64 2
  %idxprom390 = sext i32 %i.2 to i64
  %arrayidx391 = getelementptr inbounds [10 x i16], [10 x i16]* %arrayidx389, i64 0, i64 %idxprom390
  store i16 %55, i16* %arrayidx391, align 2, !tbaa !13
  br label %if.end392

if.end392:                                        ; preds = %if.then379, %if.end360
  %add393 = add nsw i32 %i.2, 1
  %conv394 = trunc i32 %add393 to i8
  %temp_src395 = getelementptr inbounds %struct.nct6775_data, %struct.nct6775_data* %5, i32 0, i32 5
  %idxprom396 = sext i32 %i.2 to i64
  %arrayidx397 = getelementptr inbounds [10 x i8], [10 x i8]* %temp_src395, i64 0, i64 %idxprom396
  store i8 %conv394, i8* %arrayidx397, align 1, !tbaa !88
  br label %for.inc420

if.end398:                                        ; preds = %if.end348
  %cmp399 = icmp sge i32 %s.2, 10
  br i1 %cmp399, label %for.end422, label %if.end402

if.end402:                                        ; preds = %if.end398
  %shl403 = shl i32 1, %s.2
  %have_temp404 = getelementptr inbounds %struct.nct6775_data, %struct.nct6775_data* %5, i32 0, i32 77
  %56 = load i16, i16* %have_temp404, align 2, !tbaa !85
  %conv405 = zext i16 %56 to i32
  %or406 = or i32 %conv405, %shl403
  %conv407 = trunc i32 %or406 to i16
  store i16 %conv407, i16* %have_temp404, align 2, !tbaa !85
  %idxprom408 = sext i32 %i.2 to i64
  %arrayidx409 = getelementptr inbounds i16, i16* %reg_temp_alternate.0, i64 %idxprom408
  %57 = load i16, i16* %arrayidx409, align 2, !tbaa !13
  %reg_temp410 = getelementptr inbounds %struct.nct6775_data, %struct.nct6775_data* %5, i32 0, i32 4
  %arrayidx411 = getelementptr inbounds [4 x [10 x i16]], [4 x [10 x i16]]* %reg_temp410, i64 0, i64 0
  %idxprom412 = sext i32 %s.2 to i64
  %arrayidx413 = getelementptr inbounds [10 x i16], [10 x i16]* %arrayidx411, i64 0, i64 %idxprom412
  store i16 %57, i16* %arrayidx413, align 2, !tbaa !13
  %add414 = add nsw i32 %i.2, 1
  %conv415 = trunc i32 %add414 to i8
  %temp_src416 = getelementptr inbounds %struct.nct6775_data, %struct.nct6775_data* %5, i32 0, i32 5
  %idxprom417 = sext i32 %s.2 to i64
  %arrayidx418 = getelementptr inbounds [10 x i8], [10 x i8]* %temp_src416, i64 0, i64 %idxprom417
  store i8 %conv415, i8* %arrayidx418, align 1, !tbaa !88
  %inc419 = add nsw i32 %s.2, 1
  br label %for.inc420

for.inc420:                                       ; preds = %if.then353, %if.end343, %for.body338, %if.end402, %if.end392
  %s.3 = phi i32 [ %s.2, %if.end392 ], [ %inc419, %if.end402 ], [ %s.2, %for.body338 ], [ %s.2, %if.end343 ], [ %s.2, %if.then353 ]
  %inc421 = add nsw i32 %i.2, 1
  br label %for.cond333

for.end422:                                       ; preds = %for.cond333, %if.end398
  call void @nct6775_init_device(%struct.nct6775_data* %5)
  %sioreg = getelementptr inbounds %struct.nct6775_sio_data, %struct.nct6775_sio_data* %1, i32 0, i32 0
  %58 = load i32, i32* %sioreg, align 4, !tbaa !89
  %call423 = call i32 @superio_enter(i32 %58)
  %tobool424 = icmp ne i32 %call423, 0
  br i1 %tobool424, label %cleanup806, label %if.end426

if.end426:                                        ; preds = %for.end422
  %sioreg427 = getelementptr inbounds %struct.nct6775_sio_data, %struct.nct6775_sio_data* %1, i32 0, i32 0
  %59 = load i32, i32* %sioreg427, align 4, !tbaa !89
  %call428 = call i32 @superio_inb(i32 %59, i32 42)
  %conv429 = trunc i32 %call428 to i8
  %kind430 = getelementptr inbounds %struct.nct6775_data, %struct.nct6775_data* %5, i32 0, i32 1
  %60 = load i32, i32* %kind430, align 4, !tbaa !44
  br label %NodeBlock23

NodeBlock23:                                      ; preds = %if.end426
  %Pivot24 = icmp slt i32 %60, 1
  br i1 %Pivot24, label %LeafBlock19, label %LeafBlock21

LeafBlock21:                                      ; preds = %NodeBlock23
  %SwitchLeaf22 = icmp eq i32 %60, 1
  br i1 %SwitchLeaf22, label %sw.bb435, label %NewDefault18

LeafBlock19:                                      ; preds = %NodeBlock23
  %SwitchLeaf20 = icmp eq i32 %60, 0
  br i1 %SwitchLeaf20, label %sw.bb431, label %NewDefault18

sw.bb431:                                         ; preds = %LeafBlock19
  %conv432 = zext i8 %conv429 to i32
  %and433 = and i32 %conv432, 64
  %tobool434 = icmp ne i32 %and433, 0
  %frombool = zext i1 %tobool434 to i8
  br label %sw.epilog441

sw.bb435:                                         ; preds = %LeafBlock21
  %conv436 = zext i8 %conv429 to i32
  %and437 = and i32 %conv436, 96
  %cmp438 = icmp eq i32 %and437, 64
  %frombool440 = zext i1 %cmp438 to i8
  br label %sw.epilog441

NewDefault18:                                     ; preds = %LeafBlock21, %LeafBlock19
  br label %sw.epilog441

sw.epilog441:                                     ; preds = %NewDefault18, %sw.bb435, %sw.bb431
  %have_vid.0 = phi i8 [ 0, %NewDefault18 ], [ %frombool440, %sw.bb435 ], [ %frombool, %sw.bb431 ]
  %tobool442 = trunc i8 %have_vid.0 to i1
  br i1 %tobool442, label %if.then443, label %if.end449

if.then443:                                       ; preds = %sw.epilog441
  %sioreg444 = getelementptr inbounds %struct.nct6775_sio_data, %struct.nct6775_sio_data* %1, i32 0, i32 0
  %61 = load i32, i32* %sioreg444, align 4, !tbaa !89
  call void @superio_select(i32 %61, i32 13)
  %sioreg445 = getelementptr inbounds %struct.nct6775_sio_data, %struct.nct6775_sio_data* %1, i32 0, i32 0
  %62 = load i32, i32* %sioreg445, align 4, !tbaa !89
  %call446 = call i32 @superio_inb(i32 %62, i32 227)
  %conv447 = trunc i32 %call446 to i8
  %vid = getelementptr inbounds %struct.nct6775_data, %struct.nct6775_data* %5, i32 0, i32 75
  store i8 %conv447, i8* %vid, align 1, !tbaa !90
  %call448 = call zeroext i8 @vid_which_vrm()
  %vrm = getelementptr inbounds %struct.nct6775_data, %struct.nct6775_data* %5, i32 0, i32 76
  store i8 %call448, i8* %vrm, align 8, !tbaa !91
  br label %if.end449

if.end449:                                        ; preds = %if.then443, %sw.epilog441
  %63 = load i16, i16* @fan_debounce, align 2, !tbaa !13
  %tobool450 = icmp ne i16 %63, 0
  br i1 %tobool450, label %if.then451, label %if.end471

if.then451:                                       ; preds = %if.end449
  %sioreg452 = getelementptr inbounds %struct.nct6775_sio_data, %struct.nct6775_sio_data* %1, i32 0, i32 0
  %64 = load i32, i32* %sioreg452, align 4, !tbaa !89
  call void @superio_select(i32 %64, i32 11)
  %sioreg453 = getelementptr inbounds %struct.nct6775_sio_data, %struct.nct6775_sio_data* %1, i32 0, i32 0
  %65 = load i32, i32* %sioreg453, align 4, !tbaa !89
  %call454 = call i32 @superio_inb(i32 %65, i32 240)
  %conv455 = trunc i32 %call454 to i8
  %kind456 = getelementptr inbounds %struct.nct6775_data, %struct.nct6775_data* %5, i32 0, i32 1
  %66 = load i32, i32* %kind456, align 4, !tbaa !44
  br label %NodeBlock30

NodeBlock30:                                      ; preds = %if.then451
  %Pivot31 = icmp slt i32 %66, 1
  br i1 %Pivot31, label %LeafBlock26, label %LeafBlock28

LeafBlock28:                                      ; preds = %NodeBlock30
  %.off = add i32 %66, -1
  %SwitchLeaf29 = icmp ule i32 %.off, 1
  br i1 %SwitchLeaf29, label %sw.bb461, label %NewDefault25

LeafBlock26:                                      ; preds = %NodeBlock30
  %SwitchLeaf27 = icmp eq i32 %66, 0
  br i1 %SwitchLeaf27, label %sw.bb457, label %NewDefault25

sw.bb457:                                         ; preds = %LeafBlock26
  %conv458 = zext i8 %conv455 to i32
  %or459 = or i32 %conv458, 30
  %conv460 = trunc i32 %or459 to i8
  br label %sw.epilog465

sw.bb461:                                         ; preds = %LeafBlock28
  %conv462 = zext i8 %conv455 to i32
  %or463 = or i32 %conv462, 62
  %conv464 = trunc i32 %or463 to i8
  br label %sw.epilog465

NewDefault25:                                     ; preds = %LeafBlock28, %LeafBlock26
  br label %sw.epilog465

sw.epilog465:                                     ; preds = %NewDefault25, %sw.bb461, %sw.bb457
  %tmp.0 = phi i8 [ %conv455, %NewDefault25 ], [ %conv464, %sw.bb461 ], [ %conv460, %sw.bb457 ]
  %sioreg466 = getelementptr inbounds %struct.nct6775_sio_data, %struct.nct6775_sio_data* %1, i32 0, i32 0
  %67 = load i32, i32* %sioreg466, align 4, !tbaa !89
  %conv467 = zext i8 %tmp.0 to i32
  call void @superio_outb(i32 %67, i32 240, i32 %conv467)
  %dev468 = getelementptr inbounds %struct.platform_device, %struct.platform_device* %pdev, i32 0, i32 3
  %name469 = getelementptr inbounds %struct.nct6775_data, %struct.nct6775_data* %5, i32 0, i32 2
  %68 = load i8*, i8** %name469, align 8, !tbaa !47
  %call470 = call i32 (%struct.device*, i8*, ...) @_dev_info(%struct.device* %dev468, i8* getelementptr inbounds ([34 x i8], [34 x i8]* @.str.3, i32 0, i32 0), i8* %68)
  br label %if.end471

if.end471:                                        ; preds = %sw.epilog465, %if.end449
  %sioreg472 = getelementptr inbounds %struct.nct6775_sio_data, %struct.nct6775_sio_data* %1, i32 0, i32 0
  %69 = load i32, i32* %sioreg472, align 4, !tbaa !89
  call void @superio_exit(i32 %69)
  %tobool473 = trunc i8 %have_vid.0 to i1
  br i1 %tobool473, label %if.then474, label %if.end479

if.then474:                                       ; preds = %if.end471
  %call475 = call i32 @device_create_file(%struct.device* %dev1, %struct.device_attribute* @dev_attr_cpu0_vid)
  %tobool476 = icmp ne i32 %call475, 0
  br i1 %tobool476, label %cleanup806, label %if.end479

if.end479:                                        ; preds = %if.then474, %if.end471
  %call480 = call i32 @nct6775_check_fan_inputs(%struct.nct6775_sio_data* %1, %struct.nct6775_data* %5)
  %tobool481 = icmp ne i32 %call480, 0
  br i1 %tobool481, label %exit_remove, label %if.end483

if.end483:                                        ; preds = %if.end479
  call void @nct6775_init_fan_common(%struct.device* %dev1, %struct.nct6775_data* %5)
  br label %for.cond484

for.cond484:                                      ; preds = %for.inc537, %if.end483
  %err.0 = phi i32 [ %call480, %if.end483 ], [ %err.4, %for.inc537 ]
  %i.3 = phi i32 [ 0, %if.end483 ], [ %inc538, %for.inc537 ]
  %pwm_num485 = getelementptr inbounds %struct.nct6775_data, %struct.nct6775_data* %5, i32 0, i32 57
  %70 = load i8, i8* %pwm_num485, align 8, !tbaa !50
  %conv486 = zext i8 %70 to i32
  %cmp487 = icmp slt i32 %i.3, %conv486
  br i1 %cmp487, label %for.body489, label %for.end539

for.body489:                                      ; preds = %for.cond484
  %has_pwm = getelementptr inbounds %struct.nct6775_data, %struct.nct6775_data* %5, i32 0, i32 48
  %71 = load i8, i8* %has_pwm, align 8, !tbaa !92
  %conv490 = zext i8 %71 to i32
  %shl491 = shl i32 1, %i.3
  %and492 = and i32 %conv490, %shl491
  %tobool493 = icmp ne i32 %and492, 0
  br i1 %tobool493, label %if.end495, label %for.inc537

if.end495:                                        ; preds = %for.body489
  %kobj = getelementptr inbounds %struct.device, %struct.device* %dev1, i32 0, i32 2
  %idxprom496 = sext i32 %i.3 to i64
  %arrayidx497 = getelementptr inbounds [5 x %struct.attribute_group], [5 x %struct.attribute_group]* @nct6775_group_pwm, i64 0, i64 %idxprom496
  %call498 = call i32 @sysfs_create_group(%struct.kobject* %kobj, %struct.attribute_group* %arrayidx497)
  %tobool499 = icmp ne i32 %call498, 0
  br i1 %tobool499, label %exit_remove, label %if.end501

if.end501:                                        ; preds = %if.end495
  %REG_PWM502 = getelementptr inbounds %struct.nct6775_data, %struct.nct6775_data* %5, i32 0, i32 24
  %arrayidx503 = getelementptr inbounds [7 x i16*], [7 x i16*]* %REG_PWM502, i64 0, i64 3
  %72 = load i16*, i16** %arrayidx503, align 8, !tbaa !12
  %tobool504 = icmp ne i16* %72, null
  br i1 %tobool504, label %if.then505, label %if.end512

if.then505:                                       ; preds = %if.end501
  %idxprom506 = sext i32 %i.3 to i64
  %arrayidx507 = getelementptr inbounds [5 x %struct.sensor_device_attribute_2], [5 x %struct.sensor_device_attribute_2]* @sda_pwm_max, i64 0, i64 %idxprom506
  %dev_attr = getelementptr inbounds %struct.sensor_device_attribute_2, %struct.sensor_device_attribute_2* %arrayidx507, i32 0, i32 0
  %call508 = call i32 @device_create_file(%struct.device* %dev1, %struct.device_attribute* %dev_attr)
  %tobool509 = icmp ne i32 %call508, 0
  br i1 %tobool509, label %exit_remove, label %if.end512

if.end512:                                        ; preds = %if.then505, %if.end501
  %err.1 = phi i32 [ %call498, %if.end501 ], [ %call508, %if.then505 ]
  %REG_PWM513 = getelementptr inbounds %struct.nct6775_data, %struct.nct6775_data* %5, i32 0, i32 24
  %arrayidx514 = getelementptr inbounds [7 x i16*], [7 x i16*]* %REG_PWM513, i64 0, i64 4
  %73 = load i16*, i16** %arrayidx514, align 8, !tbaa !12
  %tobool515 = icmp ne i16* %73, null
  br i1 %tobool515, label %if.then516, label %if.end524

if.then516:                                       ; preds = %if.end512
  %idxprom517 = sext i32 %i.3 to i64
  %arrayidx518 = getelementptr inbounds [5 x %struct.sensor_device_attribute_2], [5 x %struct.sensor_device_attribute_2]* @sda_pwm_step, i64 0, i64 %idxprom517
  %dev_attr519 = getelementptr inbounds %struct.sensor_device_attribute_2, %struct.sensor_device_attribute_2* %arrayidx518, i32 0, i32 0
  %call520 = call i32 @device_create_file(%struct.device* %dev1, %struct.device_attribute* %dev_attr519)
  %tobool521 = icmp ne i32 %call520, 0
  br i1 %tobool521, label %exit_remove, label %if.end524

if.end524:                                        ; preds = %if.then516, %if.end512
  %err.2 = phi i32 [ %err.1, %if.end512 ], [ %call520, %if.then516 ]
  %REG_PWM525 = getelementptr inbounds %struct.nct6775_data, %struct.nct6775_data* %5, i32 0, i32 24
  %arrayidx526 = getelementptr inbounds [7 x i16*], [7 x i16*]* %REG_PWM525, i64 0, i64 6
  %74 = load i16*, i16** %arrayidx526, align 8, !tbaa !12
  %tobool527 = icmp ne i16* %74, null
  br i1 %tobool527, label %if.then528, label %for.inc537

if.then528:                                       ; preds = %if.end524
  %idxprom529 = sext i32 %i.3 to i64
  %arrayidx530 = getelementptr inbounds [5 x %struct.sensor_device_attribute_2], [5 x %struct.sensor_device_attribute_2]* @sda_weight_duty_base, i64 0, i64 %idxprom529
  %dev_attr531 = getelementptr inbounds %struct.sensor_device_attribute_2, %struct.sensor_device_attribute_2* %arrayidx530, i32 0, i32 0
  %call532 = call i32 @device_create_file(%struct.device* %dev1, %struct.device_attribute* %dev_attr531)
  %tobool533 = icmp ne i32 %call532, 0
  br i1 %tobool533, label %exit_remove, label %for.inc537

for.inc537:                                       ; preds = %if.end524, %if.then528, %for.body489
  %err.4 = phi i32 [ %err.0, %for.body489 ], [ %err.2, %if.end524 ], [ %call532, %if.then528 ]
  %inc538 = add nsw i32 %i.3, 1
  br label %for.cond484

for.end539:                                       ; preds = %for.cond484
  br label %for.cond540

for.cond540:                                      ; preds = %for.inc566, %for.end539
  %err.5 = phi i32 [ %err.0, %for.end539 ], [ %err.6, %for.inc566 ]
  %i.4 = phi i32 [ 0, %for.end539 ], [ %inc567, %for.inc566 ]
  %conv541 = sext i32 %i.4 to i64
  %cmp542 = icmp ult i64 %conv541, 70
  br i1 %cmp542, label %for.body544, label %for.end568

for.body544:                                      ; preds = %for.cond540
  %idxprom545 = sext i32 %i.4 to i64
  %arrayidx546 = getelementptr inbounds [70 x %struct.sensor_device_attribute_2], [70 x %struct.sensor_device_attribute_2]* @sda_auto_pwm_arrays, i64 0, i64 %idxprom545
  %has_pwm547 = getelementptr inbounds %struct.nct6775_data, %struct.nct6775_data* %5, i32 0, i32 48
  %75 = load i8, i8* %has_pwm547, align 8, !tbaa !92
  %conv548 = zext i8 %75 to i32
  %nr = getelementptr inbounds %struct.sensor_device_attribute_2, %struct.sensor_device_attribute_2* %arrayidx546, i32 0, i32 2
  %76 = load i8, i8* %nr, align 1, !tbaa !93
  %conv549 = zext i8 %76 to i32
  %shl550 = shl i32 1, %conv549
  %and551 = and i32 %conv548, %shl550
  %tobool552 = icmp ne i32 %and551, 0
  br i1 %tobool552, label %if.end554, label %cleanup

if.end554:                                        ; preds = %for.body544
  %index = getelementptr inbounds %struct.sensor_device_attribute_2, %struct.sensor_device_attribute_2* %arrayidx546, i32 0, i32 1
  %77 = load i8, i8* %index, align 8, !tbaa !97
  %conv555 = zext i8 %77 to i32
  %auto_pwm_num556 = getelementptr inbounds %struct.nct6775_data, %struct.nct6775_data* %5, i32 0, i32 69
  %78 = load i32, i32* %auto_pwm_num556, align 4, !tbaa !51
  %cmp557 = icmp sgt i32 %conv555, %78
  br i1 %cmp557, label %cleanup, label %if.end560

if.end560:                                        ; preds = %if.end554
  %dev_attr561 = getelementptr inbounds %struct.sensor_device_attribute_2, %struct.sensor_device_attribute_2* %arrayidx546, i32 0, i32 0
  %call562 = call i32 @device_create_file(%struct.device* %dev1, %struct.device_attribute* %dev_attr561)
  %tobool563 = icmp ne i32 %call562, 0
  %. = select i1 %tobool563, i32 16, i32 0
  br label %cleanup

cleanup:                                          ; preds = %if.end560, %if.end554, %for.body544
  %err.6 = phi i32 [ %err.5, %for.body544 ], [ %err.5, %if.end554 ], [ %call562, %if.end560 ]
  %cleanup.dest.slot.0 = phi i32 [ 22, %for.body544 ], [ 22, %if.end554 ], [ %., %if.end560 ]
  br label %NodeBlock41

NodeBlock41:                                      ; preds = %cleanup
  %Pivot42 = icmp slt i32 %cleanup.dest.slot.0, 16
  br i1 %Pivot42, label %LeafBlock33, label %NodeBlock39

NodeBlock39:                                      ; preds = %NodeBlock41
  %Pivot40 = icmp slt i32 %cleanup.dest.slot.0, 22
  br i1 %Pivot40, label %LeafBlock35, label %LeafBlock37

LeafBlock37:                                      ; preds = %NodeBlock39
  %SwitchLeaf38 = icmp eq i32 %cleanup.dest.slot.0, 22
  br i1 %SwitchLeaf38, label %for.inc566, label %NewDefault32

LeafBlock35:                                      ; preds = %NodeBlock39
  %SwitchLeaf36 = icmp eq i32 %cleanup.dest.slot.0, 16
  br i1 %SwitchLeaf36, label %exit_remove, label %NewDefault32

LeafBlock33:                                      ; preds = %NodeBlock41
  %SwitchLeaf34 = icmp eq i32 %cleanup.dest.slot.0, 0
  br i1 %SwitchLeaf34, label %for.inc566, label %NewDefault32

for.inc566:                                       ; preds = %LeafBlock37, %LeafBlock33
  %inc567 = add nsw i32 %i.4, 1
  br label %for.cond540

for.end568:                                       ; preds = %for.cond540
  br label %for.cond569

for.cond569:                                      ; preds = %for.inc589, %for.end568
  %i.5 = phi i32 [ 0, %for.end568 ], [ %inc590, %for.inc589 ]
  %in_num570 = getelementptr inbounds %struct.nct6775_data, %struct.nct6775_data* %5, i32 0, i32 42
  %79 = load i8, i8* %in_num570, align 1, !tbaa !49
  %conv571 = zext i8 %79 to i32
  %cmp572 = icmp slt i32 %i.5, %conv571
  br i1 %cmp572, label %for.body574, label %for.end591

for.body574:                                      ; preds = %for.cond569
  %have_in575 = getelementptr inbounds %struct.nct6775_data, %struct.nct6775_data* %5, i32 0, i32 79
  %80 = load i16, i16* %have_in575, align 2, !tbaa !84
  %conv576 = zext i16 %80 to i32
  %shl577 = shl i32 1, %i.5
  %and578 = and i32 %conv576, %shl577
  %tobool579 = icmp ne i32 %and578, 0
  br i1 %tobool579, label %if.end581, label %for.inc589

if.end581:                                        ; preds = %for.body574
  %kobj582 = getelementptr inbounds %struct.device, %struct.device* %dev1, i32 0, i32 2
  %idxprom583 = sext i32 %i.5 to i64
  %arrayidx584 = getelementptr inbounds [15 x %struct.attribute_group], [15 x %struct.attribute_group]* @nct6775_group_in, i64 0, i64 %idxprom583
  %call585 = call i32 @sysfs_create_group(%struct.kobject* %kobj582, %struct.attribute_group* %arrayidx584)
  %tobool586 = icmp ne i32 %call585, 0
  br i1 %tobool586, label %exit_remove, label %for.inc589

for.inc589:                                       ; preds = %if.end581, %for.body574
  %inc590 = add nsw i32 %i.5, 1
  br label %for.cond569

for.end591:                                       ; preds = %for.cond569
  br label %for.cond592

for.cond592:                                      ; preds = %for.inc651, %for.end591
  %i.6 = phi i32 [ 0, %for.end591 ], [ %inc652, %for.inc651 ]
  %cmp593 = icmp slt i32 %i.6, 5
  br i1 %cmp593, label %for.body595, label %for.end653

for.body595:                                      ; preds = %for.cond592
  %has_fan = getelementptr inbounds %struct.nct6775_data, %struct.nct6775_data* %5, i32 0, i32 49
  %81 = load i8, i8* %has_fan, align 1, !tbaa !98
  %conv596 = zext i8 %81 to i32
  %shl597 = shl i32 1, %i.6
  %and598 = and i32 %conv596, %shl597
  %tobool599 = icmp ne i32 %and598, 0
  br i1 %tobool599, label %if.then600, label %for.inc651

if.then600:                                       ; preds = %for.body595
  %idxprom601 = sext i32 %i.6 to i64
  %arrayidx602 = getelementptr inbounds [5 x %struct.sensor_device_attribute], [5 x %struct.sensor_device_attribute]* @sda_fan_input, i64 0, i64 %idxprom601
  %dev_attr603 = getelementptr inbounds %struct.sensor_device_attribute, %struct.sensor_device_attribute* %arrayidx602, i32 0, i32 0
  %call604 = call i32 @device_create_file(%struct.device* %dev1, %struct.device_attribute* %dev_attr603)
  %tobool605 = icmp ne i32 %call604, 0
  br i1 %tobool605, label %exit_remove, label %if.end607

if.end607:                                        ; preds = %if.then600
  %idxprom608 = sext i32 %i.6 to i64
  %arrayidx609 = getelementptr inbounds [5 x %struct.sensor_device_attribute], [5 x %struct.sensor_device_attribute]* @sda_fan_alarm, i64 0, i64 %idxprom608
  %dev_attr610 = getelementptr inbounds %struct.sensor_device_attribute, %struct.sensor_device_attribute* %arrayidx609, i32 0, i32 0
  %call611 = call i32 @device_create_file(%struct.device* %dev1, %struct.device_attribute* %dev_attr610)
  %tobool612 = icmp ne i32 %call611, 0
  br i1 %tobool612, label %exit_remove, label %if.end614

if.end614:                                        ; preds = %if.end607
  %kind615 = getelementptr inbounds %struct.nct6775_data, %struct.nct6775_data* %5, i32 0, i32 1
  %82 = load i32, i32* %kind615, align 4, !tbaa !44
  %cmp616 = icmp ne i32 %82, 1
  br i1 %cmp616, label %land.lhs.true, label %if.end629

land.lhs.true:                                    ; preds = %if.end614
  %kind618 = getelementptr inbounds %struct.nct6775_data, %struct.nct6775_data* %5, i32 0, i32 1
  %83 = load i32, i32* %kind618, align 4, !tbaa !44
  %cmp619 = icmp ne i32 %83, 2
  br i1 %cmp619, label %if.then621, label %if.end629

if.then621:                                       ; preds = %land.lhs.true
  %idxprom622 = sext i32 %i.6 to i64
  %arrayidx623 = getelementptr inbounds [5 x %struct.sensor_device_attribute], [5 x %struct.sensor_device_attribute]* @sda_fan_div, i64 0, i64 %idxprom622
  %dev_attr624 = getelementptr inbounds %struct.sensor_device_attribute, %struct.sensor_device_attribute* %arrayidx623, i32 0, i32 0
  %call625 = call i32 @device_create_file(%struct.device* %dev1, %struct.device_attribute* %dev_attr624)
  %tobool626 = icmp ne i32 %call625, 0
  br i1 %tobool626, label %exit_remove, label %if.end629

if.end629:                                        ; preds = %if.then621, %land.lhs.true, %if.end614
  %has_fan_min = getelementptr inbounds %struct.nct6775_data, %struct.nct6775_data* %5, i32 0, i32 50
  %84 = load i8, i8* %has_fan_min, align 2, !tbaa !99
  %conv630 = zext i8 %84 to i32
  %shl631 = shl i32 1, %i.6
  %and632 = and i32 %conv630, %shl631
  %tobool633 = icmp ne i32 %and632, 0
  br i1 %tobool633, label %if.then634, label %if.end642

if.then634:                                       ; preds = %if.end629
  %idxprom635 = sext i32 %i.6 to i64
  %arrayidx636 = getelementptr inbounds [5 x %struct.sensor_device_attribute], [5 x %struct.sensor_device_attribute]* @sda_fan_min, i64 0, i64 %idxprom635
  %dev_attr637 = getelementptr inbounds %struct.sensor_device_attribute, %struct.sensor_device_attribute* %arrayidx636, i32 0, i32 0
  %call638 = call i32 @device_create_file(%struct.device* %dev1, %struct.device_attribute* %dev_attr637)
  %tobool639 = icmp ne i32 %call638, 0
  br i1 %tobool639, label %exit_remove, label %if.end642

if.end642:                                        ; preds = %if.then634, %if.end629
  %idxprom643 = sext i32 %i.6 to i64
  %arrayidx644 = getelementptr inbounds [5 x %struct.sensor_device_attribute], [5 x %struct.sensor_device_attribute]* @sda_fan_pulses, i64 0, i64 %idxprom643
  %dev_attr645 = getelementptr inbounds %struct.sensor_device_attribute, %struct.sensor_device_attribute* %arrayidx644, i32 0, i32 0
  %call646 = call i32 @device_create_file(%struct.device* %dev1, %struct.device_attribute* %dev_attr645)
  %tobool647 = icmp ne i32 %call646, 0
  br i1 %tobool647, label %exit_remove, label %for.inc651

for.inc651:                                       ; preds = %for.body595, %if.end642
  %inc652 = add nsw i32 %i.6, 1
  br label %for.cond592

for.end653:                                       ; preds = %for.cond592
  br label %for.cond654

for.cond654:                                      ; preds = %for.inc766, %for.end653
  %i.7 = phi i32 [ 0, %for.end653 ], [ %inc767, %for.inc766 ]
  %cmp655 = icmp slt i32 %i.7, 10
  br i1 %cmp655, label %for.body657, label %for.end768

for.body657:                                      ; preds = %for.cond654
  %have_temp658 = getelementptr inbounds %struct.nct6775_data, %struct.nct6775_data* %5, i32 0, i32 77
  %85 = load i16, i16* %have_temp658, align 2, !tbaa !85
  %conv659 = zext i16 %85 to i32
  %shl660 = shl i32 1, %i.7
  %and661 = and i32 %conv659, %shl660
  %tobool662 = icmp ne i32 %and661, 0
  br i1 %tobool662, label %if.end664, label %for.inc766

if.end664:                                        ; preds = %for.body657
  %idxprom665 = sext i32 %i.7 to i64
  %arrayidx666 = getelementptr inbounds [10 x %struct.sensor_device_attribute_2], [10 x %struct.sensor_device_attribute_2]* @sda_temp_input, i64 0, i64 %idxprom665
  %dev_attr667 = getelementptr inbounds %struct.sensor_device_attribute_2, %struct.sensor_device_attribute_2* %arrayidx666, i32 0, i32 0
  %call668 = call i32 @device_create_file(%struct.device* %dev1, %struct.device_attribute* %dev_attr667)
  %tobool669 = icmp ne i32 %call668, 0
  br i1 %tobool669, label %exit_remove, label %if.end671

if.end671:                                        ; preds = %if.end664
  %temp_label672 = getelementptr inbounds %struct.nct6775_data, %struct.nct6775_data* %5, i32 0, i32 7
  %86 = load i8**, i8*** %temp_label672, align 8, !tbaa !60
  %tobool673 = icmp ne i8** %86, null
  br i1 %tobool673, label %if.then674, label %if.end682

if.then674:                                       ; preds = %if.end671
  %idxprom675 = sext i32 %i.7 to i64
  %arrayidx676 = getelementptr inbounds [10 x %struct.sensor_device_attribute], [10 x %struct.sensor_device_attribute]* @sda_temp_label, i64 0, i64 %idxprom675
  %dev_attr677 = getelementptr inbounds %struct.sensor_device_attribute, %struct.sensor_device_attribute* %arrayidx676, i32 0, i32 0
  %call678 = call i32 @device_create_file(%struct.device* %dev1, %struct.device_attribute* %dev_attr677)
  %tobool679 = icmp ne i32 %call678, 0
  br i1 %tobool679, label %exit_remove, label %if.end682

if.end682:                                        ; preds = %if.then674, %if.end671
  %reg_temp683 = getelementptr inbounds %struct.nct6775_data, %struct.nct6775_data* %5, i32 0, i32 4
  %arrayidx684 = getelementptr inbounds [4 x [10 x i16]], [4 x [10 x i16]]* %reg_temp683, i64 0, i64 1
  %idxprom685 = sext i32 %i.7 to i64
  %arrayidx686 = getelementptr inbounds [10 x i16], [10 x i16]* %arrayidx684, i64 0, i64 %idxprom685
  %87 = load i16, i16* %arrayidx686, align 2, !tbaa !13
  %tobool687 = icmp ne i16 %87, 0
  br i1 %tobool687, label %if.then688, label %if.end696

if.then688:                                       ; preds = %if.end682
  %idxprom689 = sext i32 %i.7 to i64
  %arrayidx690 = getelementptr inbounds [10 x %struct.sensor_device_attribute_2], [10 x %struct.sensor_device_attribute_2]* @sda_temp_max, i64 0, i64 %idxprom689
  %dev_attr691 = getelementptr inbounds %struct.sensor_device_attribute_2, %struct.sensor_device_attribute_2* %arrayidx690, i32 0, i32 0
  %call692 = call i32 @device_create_file(%struct.device* %dev1, %struct.device_attribute* %dev_attr691)
  %tobool693 = icmp ne i32 %call692, 0
  br i1 %tobool693, label %exit_remove, label %if.end696

if.end696:                                        ; preds = %if.then688, %if.end682
  %reg_temp697 = getelementptr inbounds %struct.nct6775_data, %struct.nct6775_data* %5, i32 0, i32 4
  %arrayidx698 = getelementptr inbounds [4 x [10 x i16]], [4 x [10 x i16]]* %reg_temp697, i64 0, i64 2
  %idxprom699 = sext i32 %i.7 to i64
  %arrayidx700 = getelementptr inbounds [10 x i16], [10 x i16]* %arrayidx698, i64 0, i64 %idxprom699
  %88 = load i16, i16* %arrayidx700, align 2, !tbaa !13
  %tobool701 = icmp ne i16 %88, 0
  br i1 %tobool701, label %if.then702, label %if.end710

if.then702:                                       ; preds = %if.end696
  %idxprom703 = sext i32 %i.7 to i64
  %arrayidx704 = getelementptr inbounds [10 x %struct.sensor_device_attribute_2], [10 x %struct.sensor_device_attribute_2]* @sda_temp_max_hyst, i64 0, i64 %idxprom703
  %dev_attr705 = getelementptr inbounds %struct.sensor_device_attribute_2, %struct.sensor_device_attribute_2* %arrayidx704, i32 0, i32 0
  %call706 = call i32 @device_create_file(%struct.device* %dev1, %struct.device_attribute* %dev_attr705)
  %tobool707 = icmp ne i32 %call706, 0
  br i1 %tobool707, label %exit_remove, label %if.end710

if.end710:                                        ; preds = %if.then702, %if.end696
  %reg_temp711 = getelementptr inbounds %struct.nct6775_data, %struct.nct6775_data* %5, i32 0, i32 4
  %arrayidx712 = getelementptr inbounds [4 x [10 x i16]], [4 x [10 x i16]]* %reg_temp711, i64 0, i64 3
  %idxprom713 = sext i32 %i.7 to i64
  %arrayidx714 = getelementptr inbounds [10 x i16], [10 x i16]* %arrayidx712, i64 0, i64 %idxprom713
  %89 = load i16, i16* %arrayidx714, align 2, !tbaa !13
  %tobool715 = icmp ne i16 %89, 0
  br i1 %tobool715, label %if.then716, label %if.end724

if.then716:                                       ; preds = %if.end710
  %idxprom717 = sext i32 %i.7 to i64
  %arrayidx718 = getelementptr inbounds [10 x %struct.sensor_device_attribute_2], [10 x %struct.sensor_device_attribute_2]* @sda_temp_crit, i64 0, i64 %idxprom717
  %dev_attr719 = getelementptr inbounds %struct.sensor_device_attribute_2, %struct.sensor_device_attribute_2* %arrayidx718, i32 0, i32 0
  %call720 = call i32 @device_create_file(%struct.device* %dev1, %struct.device_attribute* %dev_attr719)
  %tobool721 = icmp ne i32 %call720, 0
  br i1 %tobool721, label %exit_remove, label %if.end724

if.end724:                                        ; preds = %if.then716, %if.end710
  %have_temp_fixed725 = getelementptr inbounds %struct.nct6775_data, %struct.nct6775_data* %5, i32 0, i32 78
  %90 = load i16, i16* %have_temp_fixed725, align 4, !tbaa !87
  %conv726 = zext i16 %90 to i32
  %shl727 = shl i32 1, %i.7
  %and728 = and i32 %conv726, %shl727
  %tobool729 = icmp ne i32 %and728, 0
  br i1 %tobool729, label %if.end731, label %for.inc766

if.end731:                                        ; preds = %if.end724
  %idxprom732 = sext i32 %i.7 to i64
  %arrayidx733 = getelementptr inbounds [6 x %struct.sensor_device_attribute], [6 x %struct.sensor_device_attribute]* @sda_temp_type, i64 0, i64 %idxprom732
  %dev_attr734 = getelementptr inbounds %struct.sensor_device_attribute, %struct.sensor_device_attribute* %arrayidx733, i32 0, i32 0
  %call735 = call i32 @device_create_file(%struct.device* %dev1, %struct.device_attribute* %dev_attr734)
  %tobool736 = icmp ne i32 %call735, 0
  br i1 %tobool736, label %exit_remove, label %if.end738

if.end738:                                        ; preds = %if.end731
  %idxprom739 = sext i32 %i.7 to i64
  %arrayidx740 = getelementptr inbounds [6 x %struct.sensor_device_attribute], [6 x %struct.sensor_device_attribute]* @sda_temp_offset, i64 0, i64 %idxprom739
  %dev_attr741 = getelementptr inbounds %struct.sensor_device_attribute, %struct.sensor_device_attribute* %arrayidx740, i32 0, i32 0
  %call742 = call i32 @device_create_file(%struct.device* %dev1, %struct.device_attribute* %dev_attr741)
  %tobool743 = icmp ne i32 %call742, 0
  br i1 %tobool743, label %exit_remove, label %if.end745

if.end745:                                        ; preds = %if.end738
  %conv746 = sext i32 %i.7 to i64
  %cmp747 = icmp uge i64 %conv746, 6
  br i1 %cmp747, label %for.inc766, label %lor.lhs.false749

lor.lhs.false749:                                 ; preds = %if.end745
  %ALARM_BITS750 = getelementptr inbounds %struct.nct6775_data, %struct.nct6775_data* %5, i32 0, i32 12
  %91 = load i8*, i8** %ALARM_BITS750, align 8, !tbaa !54
  %add751 = add nsw i32 24, %i.7
  %idxprom752 = sext i32 %add751 to i64
  %arrayidx753 = getelementptr inbounds i8, i8* %91, i64 %idxprom752
  %92 = load i8, i8* %arrayidx753, align 1, !tbaa !88
  %conv754 = sext i8 %92 to i32
  %cmp755 = icmp slt i32 %conv754, 0
  br i1 %cmp755, label %for.inc766, label %if.end758

if.end758:                                        ; preds = %lor.lhs.false749
  %idxprom759 = sext i32 %i.7 to i64
  %arrayidx760 = getelementptr inbounds [6 x %struct.sensor_device_attribute], [6 x %struct.sensor_device_attribute]* @sda_temp_alarm, i64 0, i64 %idxprom759
  %dev_attr761 = getelementptr inbounds %struct.sensor_device_attribute, %struct.sensor_device_attribute* %arrayidx760, i32 0, i32 0
  %call762 = call i32 @device_create_file(%struct.device* %dev1, %struct.device_attribute* %dev_attr761)
  %tobool763 = icmp ne i32 %call762, 0
  br i1 %tobool763, label %exit_remove, label %for.inc766

for.inc766:                                       ; preds = %if.end758, %if.end745, %lor.lhs.false749, %if.end724, %for.body657
  %inc767 = add nsw i32 %i.7, 1
  br label %for.cond654

for.end768:                                       ; preds = %for.cond654
  br label %for.cond769

for.cond769:                                      ; preds = %for.inc790, %for.end768
  %i.8 = phi i32 [ 0, %for.end768 ], [ %inc791, %for.inc790 ]
  %conv770 = sext i32 %i.8 to i64
  %cmp771 = icmp ult i64 %conv770, 2
  br i1 %cmp771, label %for.body773, label %for.end792

for.body773:                                      ; preds = %for.cond769
  %ALARM_BITS774 = getelementptr inbounds %struct.nct6775_data, %struct.nct6775_data* %5, i32 0, i32 12
  %93 = load i8*, i8** %ALARM_BITS774, align 8, !tbaa !54
  %add775 = add nsw i32 30, %i.8
  %idxprom776 = sext i32 %add775 to i64
  %arrayidx777 = getelementptr inbounds i8, i8* %93, i64 %idxprom776
  %94 = load i8, i8* %arrayidx777, align 1, !tbaa !88
  %conv778 = sext i8 %94 to i32
  %cmp779 = icmp slt i32 %conv778, 0
  br i1 %cmp779, label %for.inc790, label %if.end782

if.end782:                                        ; preds = %for.body773
  %idxprom783 = sext i32 %i.8 to i64
  %arrayidx784 = getelementptr inbounds [2 x %struct.sensor_device_attribute], [2 x %struct.sensor_device_attribute]* @sda_caseopen, i64 0, i64 %idxprom783
  %dev_attr785 = getelementptr inbounds %struct.sensor_device_attribute, %struct.sensor_device_attribute* %arrayidx784, i32 0, i32 0
  %call786 = call i32 @device_create_file(%struct.device* %dev1, %struct.device_attribute* %dev_attr785)
  %tobool787 = icmp ne i32 %call786, 0
  br i1 %tobool787, label %exit_remove, label %for.inc790

for.inc790:                                       ; preds = %if.end782, %for.body773
  %inc791 = add nsw i32 %i.8, 1
  br label %for.cond769

for.end792:                                       ; preds = %for.cond769
  %call793 = call i32 @device_create_file(%struct.device* %dev1, %struct.device_attribute* @dev_attr_name)
  %tobool794 = icmp ne i32 %call793, 0
  br i1 %tobool794, label %exit_remove, label %if.end796

if.end796:                                        ; preds = %for.end792
  %call797 = call %struct.device* @hwmon_device_register(%struct.device* %dev1)
  %hwmon_dev = getelementptr inbounds %struct.nct6775_data, %struct.nct6775_data* %5, i32 0, i32 3
  store %struct.device* %call797, %struct.device** %hwmon_dev, align 8, !tbaa !100
  %hwmon_dev798 = getelementptr inbounds %struct.nct6775_data, %struct.nct6775_data* %5, i32 0, i32 3
  %95 = load %struct.device*, %struct.device** %hwmon_dev798, align 8, !tbaa !100
  %96 = bitcast %struct.device* %95 to i8*
  %call799 = call i64 @IS_ERR(i8* %96)
  %tobool800 = icmp ne i64 %call799, 0
  br i1 %tobool800, label %if.then801, label %cleanup806

if.then801:                                       ; preds = %if.end796
  %hwmon_dev802 = getelementptr inbounds %struct.nct6775_data, %struct.nct6775_data* %5, i32 0, i32 3
  %97 = load %struct.device*, %struct.device** %hwmon_dev802, align 8, !tbaa !100
  %98 = bitcast %struct.device* %97 to i8*
  %call803 = call i64 @PTR_ERR(i8* %98)
  %conv804 = trunc i64 %call803 to i32
  br label %exit_remove

exit_remove:                                      ; preds = %LeafBlock35, %for.end792, %if.end782, %if.end758, %if.end738, %if.end731, %if.then716, %if.then702, %if.then688, %if.then674, %if.end664, %if.end642, %if.then634, %if.then621, %if.end607, %if.then600, %if.end581, %if.then528, %if.then516, %if.then505, %if.end495, %if.end479, %if.then801
  %err.7 = phi i32 [ %conv804, %if.then801 ], [ %call480, %if.end479 ], [ %call498, %if.end495 ], [ %call508, %if.then505 ], [ %call520, %if.then516 ], [ %call532, %if.then528 ], [ %call585, %if.end581 ], [ %call604, %if.then600 ], [ %call611, %if.end607 ], [ %call625, %if.then621 ], [ %call638, %if.then634 ], [ %call646, %if.end642 ], [ %call668, %if.end664 ], [ %call678, %if.then674 ], [ %call692, %if.then688 ], [ %call706, %if.then702 ], [ %call720, %if.then716 ], [ %call735, %if.end731 ], [ %call742, %if.end738 ], [ %call762, %if.end758 ], [ %call786, %if.end782 ], [ %call793, %for.end792 ], [ %err.6, %LeafBlock35 ]
  call void @nct6775_device_remove_files(%struct.device* %dev1)
  br label %cleanup806

NewDefault:                                       ; preds = %LeafBlock14, %LeafBlock
  br label %cleanup806

NewDefault32:                                     ; preds = %LeafBlock37, %LeafBlock35, %LeafBlock33
  br label %cleanup806

cleanup806:                                       ; preds = %NewDefault32, %NewDefault, %if.end796, %if.then474, %for.end422, %if.end, %entry, %exit_remove
  %retval.0 = phi i32 [ %err.7, %exit_remove ], [ -16, %entry ], [ -12, %if.end ], [ -19, %NewDefault ], [ %call423, %for.end422 ], [ %call475, %if.then474 ], [ 0, %if.end796 ], [ undef, %NewDefault32 ]
  %99 = bitcast i32* %available to i8*
  call void @llvm.lifetime.end.p0i8(i64 4, i8* %99) #6
  %100 = bitcast i32* %mask to i8*
  call void @llvm.lifetime.end.p0i8(i64 4, i8* %100) #6
  ret i32 %retval.0
}

; Function Attrs: nounwind uwtable
define internal i32 @nct6775_remove(%struct.platform_device* %pdev) #1 {
entry:
  %call = call i8* @platform_get_drvdata(%struct.platform_device* %pdev)
  %0 = bitcast i8* %call to %struct.nct6775_data*
  %hwmon_dev = getelementptr inbounds %struct.nct6775_data, %struct.nct6775_data* %0, i32 0, i32 3
  %1 = load %struct.device*, %struct.device** %hwmon_dev, align 8, !tbaa !100
  call void @hwmon_device_unregister(%struct.device* %1)
  %dev = getelementptr inbounds %struct.platform_device, %struct.platform_device* %pdev, i32 0, i32 3
  call void @nct6775_device_remove_files(%struct.device* %dev)
  ret i32 0
}

declare %struct.resource* @platform_get_resource(%struct.platform_device*, i32, i32) #2

declare %struct.resource* @__devm_request_region(%struct.device*, %struct.resource*, i64, i64, i8*) #2

declare i8* @devm_kzalloc(%struct.device*, i64, i32) #2

declare void @__mutex_init(%struct.mutex*, i8*, %struct.lock_class_key*) #2

; Function Attrs: inlinehint nounwind uwtable
define internal void @platform_set_drvdata(%struct.platform_device* %pdev, i8* %data) #0 {
entry:
  %dev = getelementptr inbounds %struct.platform_device, %struct.platform_device* %pdev, i32 0, i32 3
  %call = call i32 @dev_set_drvdata(%struct.device* %dev, i8* %data)
  ret void
}

; Function Attrs: nounwind uwtable
define internal i32 @fan_from_reg16(i16 zeroext %reg, i32 %divreg) #1 {
entry:
  %conv = zext i16 %reg to i32
  %cmp = icmp eq i32 %conv, 0
  %conv2 = zext i16 %reg to i32
  %cmp3 = icmp eq i32 %conv2, 65535
  %or.cond = or i1 %cmp, %cmp3
  br i1 %or.cond, label %return, label %if.end

if.end:                                           ; preds = %entry
  %conv5 = zext i16 %reg to i32
  %shl = shl i32 %conv5, %divreg
  %div = udiv i32 1350000, %shl
  br label %return

return:                                           ; preds = %entry, %if.end
  %retval.0 = phi i32 [ %div, %if.end ], [ 0, %entry ]
  ret i32 %retval.0
}

; Function Attrs: nounwind uwtable
define internal i32 @fan_from_reg8(i16 zeroext %reg, i32 %divreg) #1 {
entry:
  %conv = zext i16 %reg to i32
  %cmp = icmp eq i32 %conv, 0
  %conv2 = zext i16 %reg to i32
  %cmp3 = icmp eq i32 %conv2, 255
  %or.cond = or i1 %cmp, %cmp3
  br i1 %or.cond, label %return, label %if.end

if.end:                                           ; preds = %entry
  %conv5 = zext i16 %reg to i32
  %shl = shl i32 %conv5, %divreg
  %div = udiv i32 1350000, %shl
  br label %return

return:                                           ; preds = %entry, %if.end
  %retval.0 = phi i32 [ %div, %if.end ], [ 0, %entry ]
  ret i32 %retval.0
}

; Function Attrs: nounwind uwtable
define internal i32 @fan_from_reg13(i16 zeroext %reg, i32 %divreg) #1 {
entry:
  %conv = zext i16 %reg to i32
  %and = and i32 %conv, 65311
  %cmp = icmp eq i32 %and, 65311
  br i1 %cmp, label %return, label %if.end

if.end:                                           ; preds = %entry
  %conv2 = zext i16 %reg to i32
  %and3 = and i32 %conv2, 31
  %conv4 = zext i16 %reg to i32
  %and5 = and i32 %conv4, 65280
  %shr = ashr i32 %and5, 3
  %or = or i32 %and3, %shr
  %conv6 = trunc i32 %or to i16
  %conv7 = zext i16 %conv6 to i32
  %cmp8 = icmp eq i32 %conv7, 0
  br i1 %cmp8, label %return, label %if.end11

if.end11:                                         ; preds = %if.end
  %conv12 = zext i16 %conv6 to i32
  %div = udiv i32 1350000, %conv12
  br label %return

return:                                           ; preds = %if.end, %entry, %if.end11
  %retval.0 = phi i32 [ %div, %if.end11 ], [ 0, %entry ], [ 0, %if.end ]
  ret i32 %retval.0
}

; Function Attrs: nounwind uwtable
define internal zeroext i16 @nct6775_read_value(%struct.nct6775_data* %data, i16 zeroext %reg) #1 {
entry:
  %call = call zeroext i1 @is_word_sized(%struct.nct6775_data* %data, i16 zeroext %reg)
  %conv = zext i1 %call to i32
  call void @nct6775_set_bank(%struct.nct6775_data* %data, i16 zeroext %reg)
  %conv1 = zext i16 %reg to i32
  %and = and i32 %conv1, 255
  %conv2 = trunc i32 %and to i8
  %addr = getelementptr inbounds %struct.nct6775_data, %struct.nct6775_data* %data, i32 0, i32 0
  %0 = load i32, i32* %addr, align 8, !tbaa !46
  %add = add nsw i32 %0, 0
  call void @outb_p(i8 zeroext %conv2, i32 %add)
  %addr3 = getelementptr inbounds %struct.nct6775_data, %struct.nct6775_data* %data, i32 0, i32 0
  %1 = load i32, i32* %addr3, align 8, !tbaa !46
  %add4 = add nsw i32 %1, 1
  %call5 = call zeroext i8 @inb_p(i32 %add4)
  %conv6 = zext i8 %call5 to i32
  %tobool = icmp ne i32 %conv, 0
  br i1 %tobool, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %conv7 = zext i16 %reg to i32
  %and8 = and i32 %conv7, 255
  %add9 = add nsw i32 %and8, 1
  %conv10 = trunc i32 %add9 to i8
  %addr11 = getelementptr inbounds %struct.nct6775_data, %struct.nct6775_data* %data, i32 0, i32 0
  %2 = load i32, i32* %addr11, align 8, !tbaa !46
  %add12 = add nsw i32 %2, 0
  call void @outb_p(i8 zeroext %conv10, i32 %add12)
  %shl = shl i32 %conv6, 8
  %addr13 = getelementptr inbounds %struct.nct6775_data, %struct.nct6775_data* %data, i32 0, i32 0
  %3 = load i32, i32* %addr13, align 8, !tbaa !46
  %add14 = add nsw i32 %3, 1
  %call15 = call zeroext i8 @inb_p(i32 %add14)
  %conv16 = zext i8 %call15 to i32
  %add17 = add nsw i32 %shl, %conv16
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  %res.0 = phi i32 [ %add17, %if.then ], [ %conv6, %entry ]
  %conv18 = trunc i32 %res.0 to i16
  ret i16 %conv18
}

; Function Attrs: nounwind uwtable
define internal void @add_temp_sensors(%struct.nct6775_data* %data, i16* %regp, i32* %available, i32* %mask) #1 {
entry:
  br label %for.cond

for.cond:                                         ; preds = %cleanup, %entry
  %i.0 = phi i32 [ 0, %entry ], [ %inc, %cleanup ]
  %pwm_num = getelementptr inbounds %struct.nct6775_data, %struct.nct6775_data* %data, i32 0, i32 57
  %0 = load i8, i8* %pwm_num, align 8, !tbaa !50
  %conv = zext i8 %0 to i32
  %cmp = icmp slt i32 %i.0, %conv
  br i1 %cmp, label %land.rhs, label %for.end

land.rhs:                                         ; preds = %for.cond
  %1 = load i32, i32* %available, align 4, !tbaa !86
  %tobool = icmp ne i32 %1, 0
  br i1 %tobool, label %for.body, label %for.end

for.body:                                         ; preds = %land.rhs
  %idxprom = sext i32 %i.0 to i64
  %arrayidx = getelementptr inbounds i16, i16* %regp, i64 %idxprom
  %2 = load i16, i16* %arrayidx, align 2, !tbaa !13
  %tobool2 = icmp ne i16 %2, 0
  br i1 %tobool2, label %if.end, label %cleanup

if.end:                                           ; preds = %for.body
  %idxprom3 = sext i32 %i.0 to i64
  %arrayidx4 = getelementptr inbounds i16, i16* %regp, i64 %idxprom3
  %3 = load i16, i16* %arrayidx4, align 2, !tbaa !13
  %call = call zeroext i16 @nct6775_read_value(%struct.nct6775_data* %data, i16 zeroext %3)
  %conv5 = trunc i16 %call to i8
  %conv6 = zext i8 %conv5 to i32
  %and = and i32 %conv6, 31
  %conv7 = trunc i32 %and to i8
  %tobool8 = icmp ne i8 %conv7, 0
  br i1 %tobool8, label %lor.lhs.false, label %cleanup

lor.lhs.false:                                    ; preds = %if.end
  %4 = load i32, i32* %mask, align 4, !tbaa !86
  %conv9 = zext i8 %conv7 to i32
  %shl = shl i32 1, %conv9
  %and10 = and i32 %4, %shl
  %tobool11 = icmp ne i32 %and10, 0
  br i1 %tobool11, label %cleanup, label %if.end13

if.end13:                                         ; preds = %lor.lhs.false
  %conv14 = zext i8 %conv7 to i32
  %temp_label_num = getelementptr inbounds %struct.nct6775_data, %struct.nct6775_data* %data, i32 0, i32 8
  %5 = load i32, i32* %temp_label_num, align 8, !tbaa !61
  %cmp15 = icmp sge i32 %conv14, %5
  br i1 %cmp15, label %cleanup, label %lor.lhs.false17

lor.lhs.false17:                                  ; preds = %if.end13
  %temp_label = getelementptr inbounds %struct.nct6775_data, %struct.nct6775_data* %data, i32 0, i32 7
  %6 = load i8**, i8*** %temp_label, align 8, !tbaa !60
  %idxprom18 = zext i8 %conv7 to i64
  %arrayidx19 = getelementptr inbounds i8*, i8** %6, i64 %idxprom18
  %7 = load i8*, i8** %arrayidx19, align 8, !tbaa !12
  %call20 = call i64 @strlen(i8* %7)
  %tobool21 = icmp ne i64 %call20, 0
  br i1 %tobool21, label %if.end23, label %cleanup

if.end23:                                         ; preds = %lor.lhs.false17
  %8 = load i32, i32* %available, align 4, !tbaa !86
  %conv24 = sext i32 %8 to i64
  %call25 = call i64 @__ffs(i64 %conv24)
  %conv26 = trunc i64 %call25 to i32
  %REG_TEMP_SOURCE = getelementptr inbounds %struct.nct6775_data, %struct.nct6775_data* %data, i32 0, i32 30
  %9 = load i16*, i16** %REG_TEMP_SOURCE, align 8, !tbaa !80
  %idxprom27 = sext i32 %conv26 to i64
  %arrayidx28 = getelementptr inbounds i16, i16* %9, i64 %idxprom27
  %10 = load i16, i16* %arrayidx28, align 2, !tbaa !13
  %conv29 = zext i8 %conv7 to i16
  %call30 = call i32 @nct6775_write_value(%struct.nct6775_data* %data, i16 zeroext %10, i16 zeroext %conv29)
  %shl31 = shl i32 1, %conv26
  %neg = xor i32 %shl31, -1
  %11 = load i32, i32* %available, align 4, !tbaa !86
  %and32 = and i32 %11, %neg
  store i32 %and32, i32* %available, align 4, !tbaa !86
  %conv33 = zext i8 %conv7 to i32
  %shl34 = shl i32 1, %conv33
  %12 = load i32, i32* %mask, align 4, !tbaa !86
  %or = or i32 %12, %shl34
  store i32 %or, i32* %mask, align 4, !tbaa !86
  br label %cleanup

cleanup:                                          ; preds = %if.end13, %lor.lhs.false17, %if.end, %lor.lhs.false, %for.body, %if.end23
  %cleanup.dest.slot.0 = phi i32 [ 0, %if.end23 ], [ 4, %for.body ], [ 4, %lor.lhs.false ], [ 4, %if.end ], [ 4, %lor.lhs.false17 ], [ 4, %if.end13 ]
  %switch = icmp ult i32 %cleanup.dest.slot.0, 1
  %inc = add nsw i32 %i.0, 1
  br label %for.cond

for.end:                                          ; preds = %for.cond, %land.rhs
  ret void
}

declare i64 @strlen(i8*) #2

declare i32 @_dev_info(%struct.device*, i8*, ...) #2

; Function Attrs: inlinehint nounwind uwtable
define internal void @nct6775_init_device(%struct.nct6775_data* %data) #0 {
entry:
  %REG_CONFIG = getelementptr inbounds %struct.nct6775_data, %struct.nct6775_data* %data, i32 0, i32 9
  %0 = load i16, i16* %REG_CONFIG, align 4, !tbaa !62
  %tobool = icmp ne i16 %0, 0
  br i1 %tobool, label %if.then, label %if.end9

if.then:                                          ; preds = %entry
  %REG_CONFIG1 = getelementptr inbounds %struct.nct6775_data, %struct.nct6775_data* %data, i32 0, i32 9
  %1 = load i16, i16* %REG_CONFIG1, align 4, !tbaa !62
  %call = call zeroext i16 @nct6775_read_value(%struct.nct6775_data* %data, i16 zeroext %1)
  %conv = trunc i16 %call to i8
  %conv2 = zext i8 %conv to i32
  %and = and i32 %conv2, 1
  %tobool3 = icmp ne i32 %and, 0
  br i1 %tobool3, label %if.end9, label %if.then4

if.then4:                                         ; preds = %if.then
  %REG_CONFIG5 = getelementptr inbounds %struct.nct6775_data, %struct.nct6775_data* %data, i32 0, i32 9
  %2 = load i16, i16* %REG_CONFIG5, align 4, !tbaa !62
  %conv6 = zext i8 %conv to i32
  %or = or i32 %conv6, 1
  %conv7 = trunc i32 %or to i16
  %call8 = call i32 @nct6775_write_value(%struct.nct6775_data* %data, i16 zeroext %2, i16 zeroext %conv7)
  br label %if.end9

if.end9:                                          ; preds = %if.then, %if.then4, %entry
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %if.end9
  %i.0 = phi i32 [ 0, %if.end9 ], [ %inc, %for.inc ]
  %cmp = icmp slt i32 %i.0, 10
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %have_temp = getelementptr inbounds %struct.nct6775_data, %struct.nct6775_data* %data, i32 0, i32 77
  %3 = load i16, i16* %have_temp, align 2, !tbaa !85
  %conv11 = zext i16 %3 to i32
  %shl = shl i32 1, %i.0
  %and12 = and i32 %conv11, %shl
  %tobool13 = icmp ne i32 %and12, 0
  br i1 %tobool13, label %if.end15, label %for.inc

if.end15:                                         ; preds = %for.body
  %reg_temp_config = getelementptr inbounds %struct.nct6775_data, %struct.nct6775_data* %data, i32 0, i32 6
  %idxprom = sext i32 %i.0 to i64
  %arrayidx = getelementptr inbounds [10 x i16], [10 x i16]* %reg_temp_config, i64 0, i64 %idxprom
  %4 = load i16, i16* %arrayidx, align 2, !tbaa !13
  %tobool16 = icmp ne i16 %4, 0
  br i1 %tobool16, label %if.end18, label %for.inc

if.end18:                                         ; preds = %if.end15
  %reg_temp_config19 = getelementptr inbounds %struct.nct6775_data, %struct.nct6775_data* %data, i32 0, i32 6
  %idxprom20 = sext i32 %i.0 to i64
  %arrayidx21 = getelementptr inbounds [10 x i16], [10 x i16]* %reg_temp_config19, i64 0, i64 %idxprom20
  %5 = load i16, i16* %arrayidx21, align 2, !tbaa !13
  %call22 = call zeroext i16 @nct6775_read_value(%struct.nct6775_data* %data, i16 zeroext %5)
  %conv23 = trunc i16 %call22 to i8
  %conv24 = zext i8 %conv23 to i32
  %and25 = and i32 %conv24, 1
  %tobool26 = icmp ne i32 %and25, 0
  br i1 %tobool26, label %if.then27, label %for.inc

if.then27:                                        ; preds = %if.end18
  %reg_temp_config28 = getelementptr inbounds %struct.nct6775_data, %struct.nct6775_data* %data, i32 0, i32 6
  %idxprom29 = sext i32 %i.0 to i64
  %arrayidx30 = getelementptr inbounds [10 x i16], [10 x i16]* %reg_temp_config28, i64 0, i64 %idxprom29
  %6 = load i16, i16* %arrayidx30, align 2, !tbaa !13
  %conv31 = zext i8 %conv23 to i32
  %and32 = and i32 %conv31, 254
  %conv33 = trunc i32 %and32 to i16
  %call34 = call i32 @nct6775_write_value(%struct.nct6775_data* %data, i16 zeroext %6, i16 zeroext %conv33)
  br label %for.inc

for.inc:                                          ; preds = %if.end18, %if.then27, %if.end15, %for.body
  %inc = add nsw i32 %i.0, 1
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %REG_VBAT = getelementptr inbounds %struct.nct6775_data, %struct.nct6775_data* %data, i32 0, i32 10
  %7 = load i16, i16* %REG_VBAT, align 2, !tbaa !63
  %call36 = call zeroext i16 @nct6775_read_value(%struct.nct6775_data* %data, i16 zeroext %7)
  %conv37 = trunc i16 %call36 to i8
  %conv38 = zext i8 %conv37 to i32
  %and39 = and i32 %conv38, 1
  %tobool40 = icmp ne i32 %and39, 0
  br i1 %tobool40, label %if.end47, label %if.then41

if.then41:                                        ; preds = %for.end
  %REG_VBAT42 = getelementptr inbounds %struct.nct6775_data, %struct.nct6775_data* %data, i32 0, i32 10
  %8 = load i16, i16* %REG_VBAT42, align 2, !tbaa !63
  %conv43 = zext i8 %conv37 to i32
  %or44 = or i32 %conv43, 1
  %conv45 = trunc i32 %or44 to i16
  %call46 = call i32 @nct6775_write_value(%struct.nct6775_data* %data, i16 zeroext %8, i16 zeroext %conv45)
  br label %if.end47

if.end47:                                         ; preds = %if.then41, %for.end
  %REG_DIODE = getelementptr inbounds %struct.nct6775_data, %struct.nct6775_data* %data, i32 0, i32 11
  %9 = load i16, i16* %REG_DIODE, align 8, !tbaa !64
  %call48 = call zeroext i16 @nct6775_read_value(%struct.nct6775_data* %data, i16 zeroext %9)
  %conv49 = trunc i16 %call48 to i8
  br label %for.cond50

for.cond50:                                       ; preds = %for.inc75, %if.end47
  %i.1 = phi i32 [ 0, %if.end47 ], [ %inc76, %for.inc75 ]
  %temp_fixed_num = getelementptr inbounds %struct.nct6775_data, %struct.nct6775_data* %data, i32 0, i32 52
  %10 = load i8, i8* %temp_fixed_num, align 4, !tbaa !53
  %conv51 = zext i8 %10 to i32
  %cmp52 = icmp slt i32 %i.1, %conv51
  br i1 %cmp52, label %for.body54, label %for.end77

for.body54:                                       ; preds = %for.cond50
  %have_temp_fixed = getelementptr inbounds %struct.nct6775_data, %struct.nct6775_data* %data, i32 0, i32 78
  %11 = load i16, i16* %have_temp_fixed, align 4, !tbaa !87
  %conv55 = zext i16 %11 to i32
  %shl56 = shl i32 1, %i.1
  %and57 = and i32 %conv55, %shl56
  %tobool58 = icmp ne i32 %and57, 0
  br i1 %tobool58, label %if.end60, label %for.inc75

if.end60:                                         ; preds = %for.body54
  %conv61 = zext i8 %conv37 to i32
  %shl62 = shl i32 2, %i.1
  %and63 = and i32 %conv61, %shl62
  %tobool64 = icmp ne i32 %and63, 0
  br i1 %tobool64, label %if.then65, label %if.end74

if.then65:                                        ; preds = %if.end60
  %conv66 = zext i8 %conv49 to i32
  %shr = ashr i32 %conv66, %i.1
  %and67 = and i32 %shr, 2
  %sub = sub nsw i32 3, %and67
  %conv68 = trunc i32 %sub to i8
  br label %if.end74

if.end74:                                         ; preds = %if.end60, %if.then65
  %.sink = phi i8 [ %conv68, %if.then65 ], [ 4, %if.end60 ]
  %temp_type71 = getelementptr inbounds %struct.nct6775_data, %struct.nct6775_data* %data, i32 0, i32 53
  %idxprom72 = sext i32 %i.1 to i64
  %arrayidx73 = getelementptr inbounds [6 x i8], [6 x i8]* %temp_type71, i64 0, i64 %idxprom72
  store i8 %.sink, i8* %arrayidx73, align 1, !tbaa !88
  br label %for.inc75

for.inc75:                                        ; preds = %for.body54, %if.end74
  %inc76 = add nsw i32 %i.1, 1
  br label %for.cond50

for.end77:                                        ; preds = %for.cond50
  ret void
}

; Function Attrs: inlinehint nounwind uwtable
define internal i32 @superio_enter(i32 %ioreg) #0 {
entry:
  %conv = sext i32 %ioreg to i64
  %call = call %struct.resource* @__request_region(%struct.resource* @ioport_resource, i64 %conv, i64 2, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str, i32 0, i32 0), i32 4194304)
  %tobool = icmp ne %struct.resource* %call, null
  br i1 %tobool, label %if.end, label %return

if.end:                                           ; preds = %entry
  call void @outb(i8 zeroext -121, i32 %ioreg)
  call void @outb(i8 zeroext -121, i32 %ioreg)
  br label %return

return:                                           ; preds = %entry, %if.end
  %retval.0 = phi i32 [ 0, %if.end ], [ -16, %entry ]
  ret i32 %retval.0
}

; Function Attrs: inlinehint nounwind uwtable
define internal i32 @superio_inb(i32 %ioreg, i32 %reg) #0 {
entry:
  %conv = trunc i32 %reg to i8
  call void @outb(i8 zeroext %conv, i32 %ioreg)
  %add = add nsw i32 %ioreg, 1
  %call = call zeroext i8 @inb(i32 %add)
  %conv1 = zext i8 %call to i32
  ret i32 %conv1
}

; Function Attrs: inlinehint nounwind uwtable
define internal void @superio_select(i32 %ioreg, i32 %ld) #0 {
entry:
  call void @outb(i8 zeroext 7, i32 %ioreg)
  %conv = trunc i32 %ld to i8
  %add = add nsw i32 %ioreg, 1
  call void @outb(i8 zeroext %conv, i32 %add)
  ret void
}

declare zeroext i8 @vid_which_vrm() #2

; Function Attrs: inlinehint nounwind uwtable
define internal void @superio_outb(i32 %ioreg, i32 %reg, i32 %val) #0 {
entry:
  %conv = trunc i32 %reg to i8
  call void @outb(i8 zeroext %conv, i32 %ioreg)
  %conv1 = trunc i32 %val to i8
  %add = add nsw i32 %ioreg, 1
  call void @outb(i8 zeroext %conv1, i32 %add)
  ret void
}

; Function Attrs: inlinehint nounwind uwtable
define internal void @superio_exit(i32 %ioreg) #0 {
entry:
  call void @outb(i8 zeroext -86, i32 %ioreg)
  call void @outb(i8 zeroext 2, i32 %ioreg)
  %add = add nsw i32 %ioreg, 1
  call void @outb(i8 zeroext 2, i32 %add)
  %conv = sext i32 %ioreg to i64
  call void @__release_region(%struct.resource* @ioport_resource, i64 %conv, i64 2)
  ret void
}

declare i32 @device_create_file(%struct.device*, %struct.device_attribute*) #2

; Function Attrs: nounwind uwtable
define internal i32 @nct6775_check_fan_inputs(%struct.nct6775_sio_data* %sio_data, %struct.nct6775_data* %data) #1 {
entry:
  %sioreg = getelementptr inbounds %struct.nct6775_sio_data, %struct.nct6775_sio_data* %sio_data, i32 0, i32 0
  %0 = load i32, i32* %sioreg, align 4, !tbaa !89
  %call = call i32 @superio_enter(i32 %0)
  %tobool = icmp ne i32 %call, 0
  br i1 %tobool, label %cleanup, label %if.end

if.end:                                           ; preds = %entry
  %kind = getelementptr inbounds %struct.nct6775_data, %struct.nct6775_data* %data, i32 0, i32 1
  %1 = load i32, i32* %kind, align 4, !tbaa !44
  %cmp = icmp eq i32 %1, 0
  br i1 %cmp, label %if.then1, label %if.else

if.then1:                                         ; preds = %if.end
  %sioreg2 = getelementptr inbounds %struct.nct6775_sio_data, %struct.nct6775_sio_data* %sio_data, i32 0, i32 0
  %2 = load i32, i32* %sioreg2, align 4, !tbaa !89
  %call3 = call i32 @superio_inb(i32 %2, i32 44)
  %and = and i32 %call3, 64
  %tobool4 = icmp ne i32 %and, 0
  %frombool = zext i1 %tobool4 to i8
  %tobool5 = trunc i8 %frombool to i1
  %frombool6 = zext i1 %tobool5 to i8
  %and7 = and i32 %call3, 128
  %tobool8 = icmp ne i32 %and7, 0
  %frombool9 = zext i1 %tobool8 to i8
  %sioreg10 = getelementptr inbounds %struct.nct6775_sio_data, %struct.nct6775_sio_data* %sio_data, i32 0, i32 0
  %3 = load i32, i32* %sioreg10, align 4, !tbaa !89
  %call11 = call i32 @superio_inb(i32 %3, i32 42)
  %and12 = and i32 %call11, 128
  %tobool13 = icmp ne i32 %and12, 0
  %lnot = xor i1 %tobool13, true
  %frombool14 = zext i1 %lnot to i8
  br label %if.end101

if.else:                                          ; preds = %if.end
  %kind15 = getelementptr inbounds %struct.nct6775_data, %struct.nct6775_data* %data, i32 0, i32 1
  %4 = load i32, i32* %kind15, align 4, !tbaa !44
  %cmp16 = icmp eq i32 %4, 1
  %sioreg18 = getelementptr inbounds %struct.nct6775_sio_data, %struct.nct6775_sio_data* %sio_data, i32 0, i32 0
  %5 = load i32, i32* %sioreg18, align 4, !tbaa !89
  br i1 %cmp16, label %if.then17, label %if.else69

if.then17:                                        ; preds = %if.else
  %call19 = call i32 @superio_inb(i32 %5, i32 39)
  %and20 = and i32 %call19, 128
  %tobool21 = icmp ne i32 %and20, 0
  %frombool22 = zext i1 %tobool21 to i8
  %sioreg23 = getelementptr inbounds %struct.nct6775_sio_data, %struct.nct6775_sio_data* %sio_data, i32 0, i32 0
  %6 = load i32, i32* %sioreg23, align 4, !tbaa !89
  call void @superio_select(i32 %6, i32 11)
  %sioreg24 = getelementptr inbounds %struct.nct6775_sio_data, %struct.nct6775_sio_data* %sio_data, i32 0, i32 0
  %7 = load i32, i32* %sioreg24, align 4, !tbaa !89
  %call25 = call i32 @superio_inb(i32 %7, i32 48)
  %and26 = and i32 %call25, 128
  %tobool27 = icmp ne i32 %and26, 0
  br i1 %tobool27, label %if.then28, label %if.else31

if.then28:                                        ; preds = %if.then17
  %tobool29 = trunc i8 %frombool22 to i1
  br label %if.end38

if.else31:                                        ; preds = %if.then17
  %sioreg32 = getelementptr inbounds %struct.nct6775_sio_data, %struct.nct6775_sio_data* %sio_data, i32 0, i32 0
  %8 = load i32, i32* %sioreg32, align 4, !tbaa !89
  %call33 = call i32 @superio_inb(i32 %8, i32 36)
  %and34 = and i32 %call33, 64
  %tobool35 = icmp ne i32 %and34, 0
  %lnot36 = xor i1 %tobool35, true
  br label %if.end38

if.end38:                                         ; preds = %if.else31, %if.then28
  %lnot36.sink = phi i1 [ %lnot36, %if.else31 ], [ %tobool29, %if.then28 ]
  %frombool37 = zext i1 %lnot36.sink to i8
  %and39 = and i32 %call25, 64
  %tobool40 = icmp ne i32 %and39, 0
  br i1 %tobool40, label %if.then41, label %if.else44

if.then41:                                        ; preds = %if.end38
  %tobool42 = trunc i8 %frombool22 to i1
  br label %if.end50

if.else44:                                        ; preds = %if.end38
  %sioreg45 = getelementptr inbounds %struct.nct6775_sio_data, %struct.nct6775_sio_data* %sio_data, i32 0, i32 0
  %9 = load i32, i32* %sioreg45, align 4, !tbaa !89
  %call46 = call i32 @superio_inb(i32 %9, i32 28)
  %and47 = and i32 %call46, 1
  %tobool48 = icmp ne i32 %and47, 0
  br label %if.end50

if.end50:                                         ; preds = %if.else44, %if.then41
  %tobool48.sink = phi i1 [ %tobool48, %if.else44 ], [ %tobool42, %if.then41 ]
  %frombool49 = zext i1 %tobool48.sink to i8
  %and51 = and i32 %call25, 32
  %tobool52 = icmp ne i32 %and51, 0
  br i1 %tobool52, label %if.then53, label %if.else56

if.then53:                                        ; preds = %if.end50
  %tobool54 = trunc i8 %frombool22 to i1
  br label %if.end62

if.else56:                                        ; preds = %if.end50
  %sioreg57 = getelementptr inbounds %struct.nct6775_sio_data, %struct.nct6775_sio_data* %sio_data, i32 0, i32 0
  %10 = load i32, i32* %sioreg57, align 4, !tbaa !89
  %call58 = call i32 @superio_inb(i32 %10, i32 28)
  %and59 = and i32 %call58, 2
  %tobool60 = icmp ne i32 %and59, 0
  br label %if.end62

if.end62:                                         ; preds = %if.else56, %if.then53
  %tobool60.sink = phi i1 [ %tobool60, %if.else56 ], [ %tobool54, %if.then53 ]
  %frombool61 = zext i1 %tobool60.sink to i8
  %tobool63 = trunc i8 %frombool49 to i1
  %frombool64 = zext i1 %tobool63 to i8
  %tobool65 = trunc i8 %frombool37 to i1
  %frombool66 = zext i1 %tobool65 to i8
  %tobool67 = trunc i8 %frombool37 to i1
  %frombool68 = zext i1 %tobool67 to i8
  br label %if.end101

if.else69:                                        ; preds = %if.else
  %call71 = call i32 @superio_inb(i32 %5, i32 28)
  %and72 = and i32 %call71, 32
  %tobool73 = icmp ne i32 %and72, 0
  %lnot74 = xor i1 %tobool73, true
  %frombool75 = zext i1 %lnot74 to i8
  %and76 = and i32 %call71, 64
  %tobool77 = icmp ne i32 %and76, 0
  %lnot78 = xor i1 %tobool77, true
  %frombool79 = zext i1 %lnot78 to i8
  %and80 = and i32 %call71, 128
  %tobool81 = icmp ne i32 %and80, 0
  %lnot82 = xor i1 %tobool81, true
  %frombool83 = zext i1 %lnot82 to i8
  %and84 = and i32 %call71, 1
  %tobool85 = icmp ne i32 %and84, 0
  %lnot86 = xor i1 %tobool85, true
  %frombool87 = zext i1 %lnot86 to i8
  %and88 = and i32 %call71, 2
  %tobool89 = icmp ne i32 %and88, 0
  %lnot90 = xor i1 %tobool89, true
  %frombool91 = zext i1 %lnot90 to i8
  %and92 = and i32 %call71, 4
  %tobool93 = icmp ne i32 %and92, 0
  %lnot94 = xor i1 %tobool93, true
  %frombool95 = zext i1 %lnot94 to i8
  %tobool96 = trunc i8 %frombool75 to i1
  %frombool97 = zext i1 %tobool96 to i8
  %tobool98 = trunc i8 %frombool79 to i1
  %frombool99 = zext i1 %tobool98 to i8
  br label %if.end101

if.end101:                                        ; preds = %if.end62, %if.else69, %if.then1
  %pwm4pin.1 = phi i8 [ 0, %if.then1 ], [ 0, %if.end62 ], [ %frombool91, %if.else69 ]
  %pwm3pin.1 = phi i8 [ %frombool9, %if.then1 ], [ %frombool68, %if.end62 ], [ %frombool87, %if.else69 ]
  %fan5pin.2 = phi i8 [ 0, %if.then1 ], [ %frombool61, %if.end62 ], [ %frombool83, %if.else69 ]
  %fan4min.1 = phi i8 [ 0, %if.then1 ], [ %frombool64, %if.end62 ], [ %frombool99, %if.else69 ]
  %fan4pin.2 = phi i8 [ %frombool14, %if.then1 ], [ %frombool49, %if.end62 ], [ %frombool79, %if.else69 ]
  %fan3min.1 = phi i8 [ %frombool6, %if.then1 ], [ %frombool66, %if.end62 ], [ %frombool97, %if.else69 ]
  %fan3pin.2 = phi i8 [ %frombool, %if.then1 ], [ %frombool37, %if.end62 ], [ %frombool75, %if.else69 ]
  %pwm5pin.1 = phi i8 [ 0, %if.then1 ], [ 0, %if.end62 ], [ %frombool95, %if.else69 ]
  %sioreg102 = getelementptr inbounds %struct.nct6775_sio_data, %struct.nct6775_sio_data* %sio_data, i32 0, i32 0
  %11 = load i32, i32* %sioreg102, align 4, !tbaa !89
  call void @superio_exit(i32 %11)
  %has_fan_min = getelementptr inbounds %struct.nct6775_data, %struct.nct6775_data* %data, i32 0, i32 50
  store i8 3, i8* %has_fan_min, align 2, !tbaa !99
  %has_fan = getelementptr inbounds %struct.nct6775_data, %struct.nct6775_data* %data, i32 0, i32 49
  store i8 3, i8* %has_fan, align 1, !tbaa !98
  %tobool103 = trunc i8 %fan3pin.2 to i1
  %conv = zext i1 %tobool103 to i32
  %shl = shl i32 %conv, 2
  %has_fan104 = getelementptr inbounds %struct.nct6775_data, %struct.nct6775_data* %data, i32 0, i32 49
  %12 = load i8, i8* %has_fan104, align 1, !tbaa !98
  %conv105 = zext i8 %12 to i32
  %or = or i32 %conv105, %shl
  %conv106 = trunc i32 %or to i8
  store i8 %conv106, i8* %has_fan104, align 1, !tbaa !98
  %tobool107 = trunc i8 %fan3min.1 to i1
  %conv108 = zext i1 %tobool107 to i32
  %shl109 = shl i32 %conv108, 2
  %has_fan_min110 = getelementptr inbounds %struct.nct6775_data, %struct.nct6775_data* %data, i32 0, i32 50
  %13 = load i8, i8* %has_fan_min110, align 2, !tbaa !99
  %conv111 = zext i8 %13 to i32
  %or112 = or i32 %conv111, %shl109
  %conv113 = trunc i32 %or112 to i8
  store i8 %conv113, i8* %has_fan_min110, align 2, !tbaa !99
  %tobool114 = trunc i8 %fan4pin.2 to i1
  %conv115 = zext i1 %tobool114 to i32
  %shl116 = shl i32 %conv115, 3
  %tobool117 = trunc i8 %fan5pin.2 to i1
  %conv118 = zext i1 %tobool117 to i32
  %shl119 = shl i32 %conv118, 4
  %or120 = or i32 %shl116, %shl119
  %has_fan121 = getelementptr inbounds %struct.nct6775_data, %struct.nct6775_data* %data, i32 0, i32 49
  %14 = load i8, i8* %has_fan121, align 1, !tbaa !98
  %conv122 = zext i8 %14 to i32
  %or123 = or i32 %conv122, %or120
  %conv124 = trunc i32 %or123 to i8
  store i8 %conv124, i8* %has_fan121, align 1, !tbaa !98
  %tobool125 = trunc i8 %fan4min.1 to i1
  %conv126 = zext i1 %tobool125 to i32
  %shl127 = shl i32 %conv126, 3
  %tobool128 = trunc i8 %fan5pin.2 to i1
  %conv129 = zext i1 %tobool128 to i32
  %shl130 = shl i32 %conv129, 4
  %or131 = or i32 %shl127, %shl130
  %has_fan_min132 = getelementptr inbounds %struct.nct6775_data, %struct.nct6775_data* %data, i32 0, i32 50
  %15 = load i8, i8* %has_fan_min132, align 2, !tbaa !99
  %conv133 = zext i8 %15 to i32
  %or134 = or i32 %conv133, %or131
  %conv135 = trunc i32 %or134 to i8
  store i8 %conv135, i8* %has_fan_min132, align 2, !tbaa !99
  %tobool136 = trunc i8 %pwm3pin.1 to i1
  %conv137 = zext i1 %tobool136 to i32
  %shl138 = shl i32 %conv137, 2
  %or139 = or i32 3, %shl138
  %tobool140 = trunc i8 %pwm4pin.1 to i1
  %conv141 = zext i1 %tobool140 to i32
  %shl142 = shl i32 %conv141, 3
  %or143 = or i32 %or139, %shl142
  %tobool144 = trunc i8 %pwm5pin.1 to i1
  %conv145 = zext i1 %tobool144 to i32
  %shl146 = shl i32 %conv145, 4
  %or147 = or i32 %or143, %shl146
  %conv148 = trunc i32 %or147 to i8
  %has_pwm = getelementptr inbounds %struct.nct6775_data, %struct.nct6775_data* %data, i32 0, i32 48
  store i8 %conv148, i8* %has_pwm, align 8, !tbaa !92
  br label %cleanup

cleanup:                                          ; preds = %entry, %if.end101
  %retval.0 = phi i32 [ 0, %if.end101 ], [ %call, %entry ]
  ret i32 %retval.0
}

; Function Attrs: nounwind uwtable
define internal void @nct6775_init_fan_common(%struct.device* %dev, %struct.nct6775_data* %data) #1 {
entry:
  %has_fan_div = getelementptr inbounds %struct.nct6775_data, %struct.nct6775_data* %data, i32 0, i32 51
  %0 = load i8, i8* %has_fan_div, align 1, !tbaa !52, !range !101
  %tobool = trunc i8 %0 to i1
  br i1 %tobool, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  call void @nct6775_init_fan_div(%struct.nct6775_data* %data)
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %if.end
  %i.0 = phi i32 [ 0, %if.end ], [ %inc, %for.inc ]
  %conv = sext i32 %i.0 to i64
  %cmp = icmp ult i64 %conv, 5
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %has_fan_min = getelementptr inbounds %struct.nct6775_data, %struct.nct6775_data* %data, i32 0, i32 50
  %1 = load i8, i8* %has_fan_min, align 2, !tbaa !99
  %conv2 = zext i8 %1 to i32
  %shl = shl i32 1, %i.0
  %and = and i32 %conv2, %shl
  %tobool3 = icmp ne i32 %and, 0
  br i1 %tobool3, label %if.then4, label %for.inc

if.then4:                                         ; preds = %for.body
  %REG_FAN_MIN = getelementptr inbounds %struct.nct6775_data, %struct.nct6775_data* %data, i32 0, i32 18
  %2 = load i16*, i16** %REG_FAN_MIN, align 8, !tbaa !69
  %idxprom = sext i32 %i.0 to i64
  %arrayidx = getelementptr inbounds i16, i16* %2, i64 %idxprom
  %3 = load i16, i16* %arrayidx, align 2, !tbaa !13
  %call = call zeroext i16 @nct6775_read_value(%struct.nct6775_data* %data, i16 zeroext %3)
  %conv5 = trunc i16 %call to i8
  %tobool6 = icmp ne i8 %conv5, 0
  br i1 %tobool6, label %for.inc, label %if.then7

if.then7:                                         ; preds = %if.then4
  %REG_FAN_MIN8 = getelementptr inbounds %struct.nct6775_data, %struct.nct6775_data* %data, i32 0, i32 18
  %4 = load i16*, i16** %REG_FAN_MIN8, align 8, !tbaa !69
  %idxprom9 = sext i32 %i.0 to i64
  %arrayidx10 = getelementptr inbounds i16, i16* %4, i64 %idxprom9
  %5 = load i16, i16* %arrayidx10, align 2, !tbaa !13
  %has_fan_div11 = getelementptr inbounds %struct.nct6775_data, %struct.nct6775_data* %data, i32 0, i32 51
  %6 = load i8, i8* %has_fan_div11, align 1, !tbaa !52, !range !101
  %tobool12 = trunc i8 %6 to i1
  %7 = zext i1 %tobool12 to i64
  %cond = select i1 %tobool12, i32 255, i32 65311
  %conv14 = trunc i32 %cond to i16
  %call15 = call i32 @nct6775_write_value(%struct.nct6775_data* %data, i16 zeroext %5, i16 zeroext %conv14)
  br label %for.inc

for.inc:                                          ; preds = %for.body, %if.then7, %if.then4
  %inc = add nsw i32 %i.0, 1
  br label %for.cond

for.end:                                          ; preds = %for.cond
  ret void
}

declare i32 @sysfs_create_group(%struct.kobject*, %struct.attribute_group*) #2

declare %struct.device* @hwmon_device_register(%struct.device*) #2

; Function Attrs: inlinehint nounwind uwtable
define internal i64 @IS_ERR(i8* %ptr) #0 {
entry:
  %0 = ptrtoint i8* %ptr to i64
  %cmp = icmp uge i64 %0, -4095
  %lnot = xor i1 %cmp, true
  %lnot1 = xor i1 %lnot, true
  %lnot.ext = zext i1 %lnot1 to i32
  %conv = sext i32 %lnot.ext to i64
  %expval = call i64 @llvm.expect.i64(i64 %conv, i64 0)
  ret i64 %expval
}

; Function Attrs: inlinehint nounwind uwtable
define internal i64 @PTR_ERR(i8* %ptr) #0 {
entry:
  %0 = ptrtoint i8* %ptr to i64
  ret i64 %0
}

; Function Attrs: nounwind uwtable
define internal void @nct6775_device_remove_files(%struct.device* %dev) #1 {
entry:
  %call = call i8* @dev_get_drvdata(%struct.device* %dev)
  %0 = bitcast i8* %call to %struct.nct6775_data*
  br label %for.cond

for.cond:                                         ; preds = %for.body, %entry
  %i.0 = phi i32 [ 0, %entry ], [ %inc, %for.body ]
  %pwm_num = getelementptr inbounds %struct.nct6775_data, %struct.nct6775_data* %0, i32 0, i32 57
  %1 = load i8, i8* %pwm_num, align 8, !tbaa !50
  %conv = zext i8 %1 to i32
  %cmp = icmp slt i32 %i.0, %conv
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %kobj = getelementptr inbounds %struct.device, %struct.device* %dev, i32 0, i32 2
  %idxprom = sext i32 %i.0 to i64
  %arrayidx = getelementptr inbounds [5 x %struct.attribute_group], [5 x %struct.attribute_group]* @nct6775_group_pwm, i64 0, i64 %idxprom
  call void @sysfs_remove_group(%struct.kobject* %kobj, %struct.attribute_group* %arrayidx)
  %inc = add nsw i32 %i.0, 1
  br label %for.cond

for.end:                                          ; preds = %for.cond
  br label %for.cond2

for.cond2:                                        ; preds = %for.body6, %for.end
  %i.1 = phi i32 [ 0, %for.end ], [ %inc10, %for.body6 ]
  %conv3 = sext i32 %i.1 to i64
  %cmp4 = icmp ult i64 %conv3, 5
  br i1 %cmp4, label %for.body6, label %for.end11

for.body6:                                        ; preds = %for.cond2
  %idxprom7 = sext i32 %i.1 to i64
  %arrayidx8 = getelementptr inbounds [5 x %struct.sensor_device_attribute_2], [5 x %struct.sensor_device_attribute_2]* @sda_pwm_max, i64 0, i64 %idxprom7
  %dev_attr = getelementptr inbounds %struct.sensor_device_attribute_2, %struct.sensor_device_attribute_2* %arrayidx8, i32 0, i32 0
  call void @device_remove_file(%struct.device* %dev, %struct.device_attribute* %dev_attr)
  %inc10 = add nsw i32 %i.1, 1
  br label %for.cond2

for.end11:                                        ; preds = %for.cond2
  br label %for.cond12

for.cond12:                                       ; preds = %for.body16, %for.end11
  %i.2 = phi i32 [ 0, %for.end11 ], [ %inc21, %for.body16 ]
  %conv13 = sext i32 %i.2 to i64
  %cmp14 = icmp ult i64 %conv13, 5
  br i1 %cmp14, label %for.body16, label %for.end22

for.body16:                                       ; preds = %for.cond12
  %idxprom17 = sext i32 %i.2 to i64
  %arrayidx18 = getelementptr inbounds [5 x %struct.sensor_device_attribute_2], [5 x %struct.sensor_device_attribute_2]* @sda_pwm_step, i64 0, i64 %idxprom17
  %dev_attr19 = getelementptr inbounds %struct.sensor_device_attribute_2, %struct.sensor_device_attribute_2* %arrayidx18, i32 0, i32 0
  call void @device_remove_file(%struct.device* %dev, %struct.device_attribute* %dev_attr19)
  %inc21 = add nsw i32 %i.2, 1
  br label %for.cond12

for.end22:                                        ; preds = %for.cond12
  br label %for.cond23

for.cond23:                                       ; preds = %for.body27, %for.end22
  %i.3 = phi i32 [ 0, %for.end22 ], [ %inc32, %for.body27 ]
  %conv24 = sext i32 %i.3 to i64
  %cmp25 = icmp ult i64 %conv24, 5
  br i1 %cmp25, label %for.body27, label %for.end33

for.body27:                                       ; preds = %for.cond23
  %idxprom28 = sext i32 %i.3 to i64
  %arrayidx29 = getelementptr inbounds [5 x %struct.sensor_device_attribute_2], [5 x %struct.sensor_device_attribute_2]* @sda_weight_duty_base, i64 0, i64 %idxprom28
  %dev_attr30 = getelementptr inbounds %struct.sensor_device_attribute_2, %struct.sensor_device_attribute_2* %arrayidx29, i32 0, i32 0
  call void @device_remove_file(%struct.device* %dev, %struct.device_attribute* %dev_attr30)
  %inc32 = add nsw i32 %i.3, 1
  br label %for.cond23

for.end33:                                        ; preds = %for.cond23
  br label %for.cond34

for.cond34:                                       ; preds = %for.body38, %for.end33
  %i.4 = phi i32 [ 0, %for.end33 ], [ %inc43, %for.body38 ]
  %conv35 = sext i32 %i.4 to i64
  %cmp36 = icmp ult i64 %conv35, 70
  br i1 %cmp36, label %for.body38, label %for.end44

for.body38:                                       ; preds = %for.cond34
  %idxprom39 = sext i32 %i.4 to i64
  %arrayidx40 = getelementptr inbounds [70 x %struct.sensor_device_attribute_2], [70 x %struct.sensor_device_attribute_2]* @sda_auto_pwm_arrays, i64 0, i64 %idxprom39
  %dev_attr41 = getelementptr inbounds %struct.sensor_device_attribute_2, %struct.sensor_device_attribute_2* %arrayidx40, i32 0, i32 0
  call void @device_remove_file(%struct.device* %dev, %struct.device_attribute* %dev_attr41)
  %inc43 = add nsw i32 %i.4, 1
  br label %for.cond34

for.end44:                                        ; preds = %for.cond34
  br label %for.cond45

for.cond45:                                       ; preds = %for.body49, %for.end44
  %i.5 = phi i32 [ 0, %for.end44 ], [ %inc54, %for.body49 ]
  %in_num = getelementptr inbounds %struct.nct6775_data, %struct.nct6775_data* %0, i32 0, i32 42
  %2 = load i8, i8* %in_num, align 1, !tbaa !49
  %conv46 = zext i8 %2 to i32
  %cmp47 = icmp slt i32 %i.5, %conv46
  br i1 %cmp47, label %for.body49, label %for.end55

for.body49:                                       ; preds = %for.cond45
  %kobj50 = getelementptr inbounds %struct.device, %struct.device* %dev, i32 0, i32 2
  %idxprom51 = sext i32 %i.5 to i64
  %arrayidx52 = getelementptr inbounds [15 x %struct.attribute_group], [15 x %struct.attribute_group]* @nct6775_group_in, i64 0, i64 %idxprom51
  call void @sysfs_remove_group(%struct.kobject* %kobj50, %struct.attribute_group* %arrayidx52)
  %inc54 = add nsw i32 %i.5, 1
  br label %for.cond45

for.end55:                                        ; preds = %for.cond45
  br label %for.cond56

for.cond56:                                       ; preds = %for.body59, %for.end55
  %i.6 = phi i32 [ 0, %for.end55 ], [ %inc76, %for.body59 ]
  %cmp57 = icmp slt i32 %i.6, 5
  br i1 %cmp57, label %for.body59, label %for.end77

for.body59:                                       ; preds = %for.cond56
  %idxprom60 = sext i32 %i.6 to i64
  %arrayidx61 = getelementptr inbounds [5 x %struct.sensor_device_attribute], [5 x %struct.sensor_device_attribute]* @sda_fan_input, i64 0, i64 %idxprom60
  %dev_attr62 = getelementptr inbounds %struct.sensor_device_attribute, %struct.sensor_device_attribute* %arrayidx61, i32 0, i32 0
  call void @device_remove_file(%struct.device* %dev, %struct.device_attribute* %dev_attr62)
  %idxprom63 = sext i32 %i.6 to i64
  %arrayidx64 = getelementptr inbounds [5 x %struct.sensor_device_attribute], [5 x %struct.sensor_device_attribute]* @sda_fan_alarm, i64 0, i64 %idxprom63
  %dev_attr65 = getelementptr inbounds %struct.sensor_device_attribute, %struct.sensor_device_attribute* %arrayidx64, i32 0, i32 0
  call void @device_remove_file(%struct.device* %dev, %struct.device_attribute* %dev_attr65)
  %idxprom66 = sext i32 %i.6 to i64
  %arrayidx67 = getelementptr inbounds [5 x %struct.sensor_device_attribute], [5 x %struct.sensor_device_attribute]* @sda_fan_div, i64 0, i64 %idxprom66
  %dev_attr68 = getelementptr inbounds %struct.sensor_device_attribute, %struct.sensor_device_attribute* %arrayidx67, i32 0, i32 0
  call void @device_remove_file(%struct.device* %dev, %struct.device_attribute* %dev_attr68)
  %idxprom69 = sext i32 %i.6 to i64
  %arrayidx70 = getelementptr inbounds [5 x %struct.sensor_device_attribute], [5 x %struct.sensor_device_attribute]* @sda_fan_min, i64 0, i64 %idxprom69
  %dev_attr71 = getelementptr inbounds %struct.sensor_device_attribute, %struct.sensor_device_attribute* %arrayidx70, i32 0, i32 0
  call void @device_remove_file(%struct.device* %dev, %struct.device_attribute* %dev_attr71)
  %idxprom72 = sext i32 %i.6 to i64
  %arrayidx73 = getelementptr inbounds [5 x %struct.sensor_device_attribute], [5 x %struct.sensor_device_attribute]* @sda_fan_pulses, i64 0, i64 %idxprom72
  %dev_attr74 = getelementptr inbounds %struct.sensor_device_attribute, %struct.sensor_device_attribute* %arrayidx73, i32 0, i32 0
  call void @device_remove_file(%struct.device* %dev, %struct.device_attribute* %dev_attr74)
  %inc76 = add nsw i32 %i.6, 1
  br label %for.cond56

for.end77:                                        ; preds = %for.cond56
  br label %for.cond78

for.cond78:                                       ; preds = %for.inc118, %for.end77
  %i.7 = phi i32 [ 0, %for.end77 ], [ %inc119, %for.inc118 ]
  %cmp79 = icmp slt i32 %i.7, 10
  br i1 %cmp79, label %for.body81, label %for.end120

for.body81:                                       ; preds = %for.cond78
  %have_temp = getelementptr inbounds %struct.nct6775_data, %struct.nct6775_data* %0, i32 0, i32 77
  %3 = load i16, i16* %have_temp, align 2, !tbaa !85
  %conv82 = zext i16 %3 to i32
  %shl = shl i32 1, %i.7
  %and = and i32 %conv82, %shl
  %tobool = icmp ne i32 %and, 0
  br i1 %tobool, label %if.end, label %for.inc118

if.end:                                           ; preds = %for.body81
  %idxprom83 = sext i32 %i.7 to i64
  %arrayidx84 = getelementptr inbounds [10 x %struct.sensor_device_attribute_2], [10 x %struct.sensor_device_attribute_2]* @sda_temp_input, i64 0, i64 %idxprom83
  %dev_attr85 = getelementptr inbounds %struct.sensor_device_attribute_2, %struct.sensor_device_attribute_2* %arrayidx84, i32 0, i32 0
  call void @device_remove_file(%struct.device* %dev, %struct.device_attribute* %dev_attr85)
  %idxprom86 = sext i32 %i.7 to i64
  %arrayidx87 = getelementptr inbounds [10 x %struct.sensor_device_attribute], [10 x %struct.sensor_device_attribute]* @sda_temp_label, i64 0, i64 %idxprom86
  %dev_attr88 = getelementptr inbounds %struct.sensor_device_attribute, %struct.sensor_device_attribute* %arrayidx87, i32 0, i32 0
  call void @device_remove_file(%struct.device* %dev, %struct.device_attribute* %dev_attr88)
  %idxprom89 = sext i32 %i.7 to i64
  %arrayidx90 = getelementptr inbounds [10 x %struct.sensor_device_attribute_2], [10 x %struct.sensor_device_attribute_2]* @sda_temp_max, i64 0, i64 %idxprom89
  %dev_attr91 = getelementptr inbounds %struct.sensor_device_attribute_2, %struct.sensor_device_attribute_2* %arrayidx90, i32 0, i32 0
  call void @device_remove_file(%struct.device* %dev, %struct.device_attribute* %dev_attr91)
  %idxprom92 = sext i32 %i.7 to i64
  %arrayidx93 = getelementptr inbounds [10 x %struct.sensor_device_attribute_2], [10 x %struct.sensor_device_attribute_2]* @sda_temp_max_hyst, i64 0, i64 %idxprom92
  %dev_attr94 = getelementptr inbounds %struct.sensor_device_attribute_2, %struct.sensor_device_attribute_2* %arrayidx93, i32 0, i32 0
  call void @device_remove_file(%struct.device* %dev, %struct.device_attribute* %dev_attr94)
  %idxprom95 = sext i32 %i.7 to i64
  %arrayidx96 = getelementptr inbounds [10 x %struct.sensor_device_attribute_2], [10 x %struct.sensor_device_attribute_2]* @sda_temp_crit, i64 0, i64 %idxprom95
  %dev_attr97 = getelementptr inbounds %struct.sensor_device_attribute_2, %struct.sensor_device_attribute_2* %arrayidx96, i32 0, i32 0
  call void @device_remove_file(%struct.device* %dev, %struct.device_attribute* %dev_attr97)
  %have_temp_fixed = getelementptr inbounds %struct.nct6775_data, %struct.nct6775_data* %0, i32 0, i32 78
  %4 = load i16, i16* %have_temp_fixed, align 4, !tbaa !87
  %conv98 = zext i16 %4 to i32
  %shl99 = shl i32 1, %i.7
  %and100 = and i32 %conv98, %shl99
  %tobool101 = icmp ne i32 %and100, 0
  br i1 %tobool101, label %if.end103, label %for.inc118

if.end103:                                        ; preds = %if.end
  %idxprom104 = sext i32 %i.7 to i64
  %arrayidx105 = getelementptr inbounds [6 x %struct.sensor_device_attribute], [6 x %struct.sensor_device_attribute]* @sda_temp_type, i64 0, i64 %idxprom104
  %dev_attr106 = getelementptr inbounds %struct.sensor_device_attribute, %struct.sensor_device_attribute* %arrayidx105, i32 0, i32 0
  call void @device_remove_file(%struct.device* %dev, %struct.device_attribute* %dev_attr106)
  %idxprom107 = sext i32 %i.7 to i64
  %arrayidx108 = getelementptr inbounds [6 x %struct.sensor_device_attribute], [6 x %struct.sensor_device_attribute]* @sda_temp_offset, i64 0, i64 %idxprom107
  %dev_attr109 = getelementptr inbounds %struct.sensor_device_attribute, %struct.sensor_device_attribute* %arrayidx108, i32 0, i32 0
  call void @device_remove_file(%struct.device* %dev, %struct.device_attribute* %dev_attr109)
  %conv110 = sext i32 %i.7 to i64
  %cmp111 = icmp uge i64 %conv110, 6
  br i1 %cmp111, label %for.inc118, label %if.end114

if.end114:                                        ; preds = %if.end103
  %idxprom115 = sext i32 %i.7 to i64
  %arrayidx116 = getelementptr inbounds [6 x %struct.sensor_device_attribute], [6 x %struct.sensor_device_attribute]* @sda_temp_alarm, i64 0, i64 %idxprom115
  %dev_attr117 = getelementptr inbounds %struct.sensor_device_attribute, %struct.sensor_device_attribute* %arrayidx116, i32 0, i32 0
  call void @device_remove_file(%struct.device* %dev, %struct.device_attribute* %dev_attr117)
  br label %for.inc118

for.inc118:                                       ; preds = %if.end103, %if.end, %for.body81, %if.end114
  %inc119 = add nsw i32 %i.7, 1
  br label %for.cond78

for.end120:                                       ; preds = %for.cond78
  call void @device_remove_file(%struct.device* %dev, %struct.device_attribute* getelementptr inbounds ([2 x %struct.sensor_device_attribute], [2 x %struct.sensor_device_attribute]* @sda_caseopen, i64 0, i64 0, i32 0))
  call void @device_remove_file(%struct.device* %dev, %struct.device_attribute* getelementptr inbounds ([2 x %struct.sensor_device_attribute], [2 x %struct.sensor_device_attribute]* @sda_caseopen, i64 0, i64 1, i32 0))
  call void @device_remove_file(%struct.device* %dev, %struct.device_attribute* @dev_attr_name)
  call void @device_remove_file(%struct.device* %dev, %struct.device_attribute* @dev_attr_cpu0_vid)
  ret void
}

declare i32 @dev_set_drvdata(%struct.device*, i8*) #2

; Function Attrs: nounwind uwtable
define internal zeroext i1 @is_word_sized(%struct.nct6775_data* %data, i16 zeroext %reg) #1 {
entry:
  %kind = getelementptr inbounds %struct.nct6775_data, %struct.nct6775_data* %data, i32 0, i32 1
  %0 = load i32, i32* %kind, align 4, !tbaa !44
  br label %NodeBlock64

NodeBlock64:                                      ; preds = %entry
  %Pivot65 = icmp slt i32 %0, 1
  br i1 %Pivot65, label %LeafBlock, label %NodeBlock

NodeBlock:                                        ; preds = %NodeBlock64
  %Pivot = icmp slt i32 %0, 2
  br i1 %Pivot, label %sw.bb58, label %LeafBlock62

LeafBlock62:                                      ; preds = %NodeBlock
  %SwitchLeaf63 = icmp eq i32 %0, 2
  br i1 %SwitchLeaf63, label %sw.bb123, label %NewDefault

LeafBlock:                                        ; preds = %NodeBlock64
  %SwitchLeaf = icmp eq i32 %0, 0
  br i1 %SwitchLeaf, label %sw.bb, label %NewDefault

sw.bb:                                            ; preds = %LeafBlock
  %conv = zext i16 %reg to i32
  %and = and i32 %conv, 65280
  %cmp = icmp eq i32 %and, 256
  br i1 %cmp, label %land.lhs.true, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %sw.bb
  %conv2 = zext i16 %reg to i32
  %and3 = and i32 %conv2, 65280
  %cmp4 = icmp eq i32 %and3, 512
  br i1 %cmp4, label %land.lhs.true, label %lor.lhs.false20

land.lhs.true:                                    ; preds = %lor.lhs.false, %sw.bb
  %conv6 = zext i16 %reg to i32
  %and7 = and i32 %conv6, 255
  %cmp8 = icmp eq i32 %and7, 80
  br i1 %cmp8, label %return, label %lor.lhs.false10

lor.lhs.false10:                                  ; preds = %land.lhs.true
  %conv11 = zext i16 %reg to i32
  %and12 = and i32 %conv11, 255
  %cmp13 = icmp eq i32 %and12, 83
  br i1 %cmp13, label %return, label %lor.lhs.false15

lor.lhs.false15:                                  ; preds = %lor.lhs.false10
  %conv16 = zext i16 %reg to i32
  %and17 = and i32 %conv16, 255
  %cmp18 = icmp eq i32 %and17, 85
  br i1 %cmp18, label %return, label %lor.lhs.false20

lor.lhs.false20:                                  ; preds = %lor.lhs.false15, %lor.lhs.false
  %conv21 = zext i16 %reg to i32
  %and22 = and i32 %conv21, 65520
  %cmp23 = icmp eq i32 %and22, 1584
  %conv26 = zext i16 %reg to i32
  %cmp27 = icmp eq i32 %conv26, 1600
  %or.cond = or i1 %cmp23, %cmp27
  %conv30 = zext i16 %reg to i32
  %cmp31 = icmp eq i32 %conv30, 1602
  %or.cond1 = or i1 %or.cond, %cmp31
  %conv34 = zext i16 %reg to i32
  %cmp35 = icmp eq i32 %conv34, 1634
  %or.cond2 = or i1 %or.cond1, %cmp35
  br i1 %or.cond2, label %return, label %lor.lhs.false37

lor.lhs.false37:                                  ; preds = %lor.lhs.false20
  %conv38 = zext i16 %reg to i32
  %and39 = and i32 %conv38, 65520
  %cmp40 = icmp eq i32 %and39, 1616
  %conv43 = zext i16 %reg to i32
  br i1 %cmp40, label %land.lhs.true42, label %lor.lhs.false47

land.lhs.true42:                                  ; preds = %lor.lhs.false37
  %and44 = and i32 %conv43, 15
  %cmp45 = icmp sge i32 %and44, 6
  %conv48 = zext i16 %reg to i32
  %cmp49 = icmp eq i32 %conv48, 115
  %or.cond3 = or i1 %cmp45, %cmp49
  %conv52 = zext i16 %reg to i32
  %cmp53 = icmp eq i32 %conv52, 117
  %or.cond5 = or i1 %or.cond3, %cmp53
  br i1 %or.cond5, label %return, label %lor.rhs

lor.lhs.false47:                                  ; preds = %lor.lhs.false37
  %cmp49.old = icmp eq i32 %conv43, 115
  %.old4 = zext i16 %reg to i32
  %cmp53.old = icmp eq i32 %.old4, 117
  %or.cond7 = or i1 %cmp49.old, %cmp53.old
  br i1 %or.cond7, label %return, label %lor.rhs

lor.rhs:                                          ; preds = %lor.lhs.false47, %land.lhs.true42
  %conv55 = zext i16 %reg to i32
  %cmp56 = icmp eq i32 %conv55, 119
  br label %return

sw.bb58:                                          ; preds = %NodeBlock
  %conv59 = zext i16 %reg to i32
  %and60 = and i32 %conv59, 65280
  %cmp61 = icmp eq i32 %and60, 256
  br i1 %cmp61, label %land.lhs.true68, label %lor.lhs.false63

lor.lhs.false63:                                  ; preds = %sw.bb58
  %conv64 = zext i16 %reg to i32
  %and65 = and i32 %conv64, 65280
  %cmp66 = icmp eq i32 %and65, 512
  br i1 %cmp66, label %land.lhs.true68, label %lor.lhs.false83

land.lhs.true68:                                  ; preds = %lor.lhs.false63, %sw.bb58
  %conv69 = zext i16 %reg to i32
  %and70 = and i32 %conv69, 255
  %cmp71 = icmp eq i32 %and70, 80
  br i1 %cmp71, label %return, label %lor.lhs.false73

lor.lhs.false73:                                  ; preds = %land.lhs.true68
  %conv74 = zext i16 %reg to i32
  %and75 = and i32 %conv74, 255
  %cmp76 = icmp eq i32 %and75, 83
  br i1 %cmp76, label %return, label %lor.lhs.false78

lor.lhs.false78:                                  ; preds = %lor.lhs.false73
  %conv79 = zext i16 %reg to i32
  %and80 = and i32 %conv79, 255
  %cmp81 = icmp eq i32 %and80, 85
  br i1 %cmp81, label %return, label %lor.lhs.false83

lor.lhs.false83:                                  ; preds = %lor.lhs.false78, %lor.lhs.false63
  %conv84 = zext i16 %reg to i32
  %and85 = and i32 %conv84, 65520
  %cmp86 = icmp eq i32 %and85, 1584
  %conv89 = zext i16 %reg to i32
  %cmp90 = icmp eq i32 %conv89, 1026
  %or.cond9 = or i1 %cmp86, %cmp90
  %conv93 = zext i16 %reg to i32
  %cmp94 = icmp eq i32 %conv93, 1600
  %or.cond11 = or i1 %or.cond9, %cmp94
  %conv97 = zext i16 %reg to i32
  %cmp98 = icmp eq i32 %conv97, 1602
  %or.cond13 = or i1 %or.cond11, %cmp98
  br i1 %or.cond13, label %return, label %lor.lhs.false100

lor.lhs.false100:                                 ; preds = %lor.lhs.false83
  %conv101 = zext i16 %reg to i32
  %and102 = and i32 %conv101, 65520
  %cmp103 = icmp eq i32 %and102, 1616
  %conv106 = zext i16 %reg to i32
  br i1 %cmp103, label %land.lhs.true105, label %lor.lhs.false110

land.lhs.true105:                                 ; preds = %lor.lhs.false100
  %and107 = and i32 %conv106, 15
  %cmp108 = icmp sge i32 %and107, 6
  %conv111 = zext i16 %reg to i32
  %cmp112 = icmp eq i32 %conv111, 115
  %or.cond15 = or i1 %cmp108, %cmp112
  %conv115 = zext i16 %reg to i32
  %cmp116 = icmp eq i32 %conv115, 117
  %or.cond17 = or i1 %or.cond15, %cmp116
  br i1 %or.cond17, label %return, label %lor.rhs118

lor.lhs.false110:                                 ; preds = %lor.lhs.false100
  %cmp112.old = icmp eq i32 %conv106, 115
  %.old16 = zext i16 %reg to i32
  %cmp116.old = icmp eq i32 %.old16, 117
  %or.cond19 = or i1 %cmp112.old, %cmp116.old
  br i1 %or.cond19, label %return, label %lor.rhs118

lor.rhs118:                                       ; preds = %lor.lhs.false110, %land.lhs.true105
  %conv119 = zext i16 %reg to i32
  %cmp120 = icmp eq i32 %conv119, 119
  br label %return

sw.bb123:                                         ; preds = %LeafBlock62
  %conv124 = zext i16 %reg to i32
  %cmp125 = icmp eq i32 %conv124, 336
  %conv128 = zext i16 %reg to i32
  %cmp129 = icmp eq i32 %conv128, 339
  %or.cond21 = or i1 %cmp125, %cmp129
  %conv132 = zext i16 %reg to i32
  %cmp133 = icmp eq i32 %conv132, 341
  %or.cond23 = or i1 %or.cond21, %cmp133
  br i1 %or.cond23, label %return, label %lor.lhs.false135

lor.lhs.false135:                                 ; preds = %sw.bb123
  %conv136 = zext i16 %reg to i32
  %and137 = and i32 %conv136, 65520
  %cmp138 = icmp eq i32 %and137, 1200
  %conv141 = zext i16 %reg to i32
  br i1 %cmp138, label %land.lhs.true140, label %lor.lhs.false145

land.lhs.true140:                                 ; preds = %lor.lhs.false135
  %and142 = and i32 %conv141, 15
  %cmp143 = icmp slt i32 %and142, 9
  %conv146 = zext i16 %reg to i32
  %cmp147 = icmp eq i32 %conv146, 1026
  %or.cond25 = or i1 %cmp143, %cmp147
  %conv150 = zext i16 %reg to i32
  %cmp151 = icmp eq i32 %conv150, 1594
  %or.cond27 = or i1 %or.cond25, %cmp151
  %.old30 = zext i16 %reg to i32
  %cmp155.old = icmp eq i32 %.old30, 1596
  %or.cond33 = or i1 %or.cond27, %cmp155.old
  %conv158 = zext i16 %reg to i32
  %cmp159 = icmp eq i32 %conv158, 1598
  %or.cond35 = or i1 %or.cond33, %cmp159
  %.old38 = zext i16 %reg to i32
  %cmp163.old = icmp eq i32 %.old38, 1600
  %or.cond41 = or i1 %or.cond35, %cmp163.old
  %conv166 = zext i16 %reg to i32
  %cmp167 = icmp eq i32 %conv166, 1602
  %or.cond43 = or i1 %or.cond41, %cmp167
  %.old46 = zext i16 %reg to i32
  %cmp171.old = icmp eq i32 %.old46, 115
  %or.cond49 = or i1 %or.cond43, %cmp171.old
  %conv174 = zext i16 %reg to i32
  %cmp175 = icmp eq i32 %conv174, 117
  %or.cond51 = or i1 %or.cond49, %cmp175
  %.old54 = zext i16 %reg to i32
  %cmp179.old = icmp eq i32 %.old54, 119
  %or.cond57 = or i1 %or.cond51, %cmp179.old
  %conv182 = zext i16 %reg to i32
  %cmp183 = icmp eq i32 %conv182, 121
  %or.cond59 = or i1 %or.cond57, %cmp183
  br i1 %or.cond59, label %return, label %lor.rhs185

lor.lhs.false145:                                 ; preds = %lor.lhs.false135
  %cmp147.old = icmp eq i32 %conv141, 1026
  %.old26 = zext i16 %reg to i32
  %cmp151.old = icmp eq i32 %.old26, 1594
  %or.cond29 = or i1 %cmp147.old, %cmp151.old
  %conv154 = zext i16 %reg to i32
  %cmp155 = icmp eq i32 %conv154, 1596
  %or.cond31 = or i1 %or.cond29, %cmp155
  %.old34 = zext i16 %reg to i32
  %cmp159.old = icmp eq i32 %.old34, 1598
  %or.cond37 = or i1 %or.cond31, %cmp159.old
  %conv162 = zext i16 %reg to i32
  %cmp163 = icmp eq i32 %conv162, 1600
  %or.cond39 = or i1 %or.cond37, %cmp163
  %.old42 = zext i16 %reg to i32
  %cmp167.old = icmp eq i32 %.old42, 1602
  %or.cond45 = or i1 %or.cond39, %cmp167.old
  %conv170 = zext i16 %reg to i32
  %cmp171 = icmp eq i32 %conv170, 115
  %or.cond47 = or i1 %or.cond45, %cmp171
  %.old50 = zext i16 %reg to i32
  %cmp175.old = icmp eq i32 %.old50, 117
  %or.cond53 = or i1 %or.cond47, %cmp175.old
  %conv178 = zext i16 %reg to i32
  %cmp179 = icmp eq i32 %conv178, 119
  %or.cond55 = or i1 %or.cond53, %cmp179
  %.old58 = zext i16 %reg to i32
  %cmp183.old = icmp eq i32 %.old58, 121
  %or.cond61 = or i1 %or.cond55, %cmp183.old
  br i1 %or.cond61, label %return, label %lor.rhs185

lor.rhs185:                                       ; preds = %lor.lhs.false145, %land.lhs.true140
  %conv186 = zext i16 %reg to i32
  %cmp187 = icmp eq i32 %conv186, 123
  br label %return

NewDefault:                                       ; preds = %LeafBlock62, %LeafBlock
  br label %return

return:                                           ; preds = %NewDefault, %sw.bb123, %land.lhs.true140, %lor.lhs.false145, %lor.rhs185, %land.lhs.true68, %lor.lhs.false73, %lor.lhs.false78, %lor.lhs.false83, %land.lhs.true105, %lor.lhs.false110, %lor.rhs118, %land.lhs.true, %lor.lhs.false10, %lor.lhs.false15, %lor.lhs.false20, %land.lhs.true42, %lor.lhs.false47, %lor.rhs
  %retval.0 = phi i1 [ true, %lor.lhs.false47 ], [ true, %land.lhs.true42 ], [ true, %lor.lhs.false20 ], [ true, %lor.lhs.false15 ], [ true, %lor.lhs.false10 ], [ true, %land.lhs.true ], [ %cmp56, %lor.rhs ], [ true, %lor.lhs.false110 ], [ true, %land.lhs.true105 ], [ true, %lor.lhs.false83 ], [ true, %lor.lhs.false78 ], [ true, %lor.lhs.false73 ], [ true, %land.lhs.true68 ], [ %cmp120, %lor.rhs118 ], [ true, %lor.lhs.false145 ], [ true, %land.lhs.true140 ], [ true, %sw.bb123 ], [ %cmp187, %lor.rhs185 ], [ false, %NewDefault ]
  ret i1 %retval.0
}

; Function Attrs: inlinehint nounwind uwtable
define internal void @nct6775_set_bank(%struct.nct6775_data* %data, i16 zeroext %reg) #0 {
entry:
  %conv = zext i16 %reg to i32
  %shr = ashr i32 %conv, 8
  %conv1 = trunc i32 %shr to i8
  %bank2 = getelementptr inbounds %struct.nct6775_data, %struct.nct6775_data* %data, i32 0, i32 41
  %0 = load i8, i8* %bank2, align 8, !tbaa !48
  %conv3 = zext i8 %0 to i32
  %conv4 = zext i8 %conv1 to i32
  %cmp = icmp ne i32 %conv3, %conv4
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %addr = getelementptr inbounds %struct.nct6775_data, %struct.nct6775_data* %data, i32 0, i32 0
  %1 = load i32, i32* %addr, align 8, !tbaa !46
  %add = add nsw i32 %1, 0
  call void @outb_p(i8 zeroext 78, i32 %add)
  %addr6 = getelementptr inbounds %struct.nct6775_data, %struct.nct6775_data* %data, i32 0, i32 0
  %2 = load i32, i32* %addr6, align 8, !tbaa !46
  %add7 = add nsw i32 %2, 1
  call void @outb_p(i8 zeroext %conv1, i32 %add7)
  %bank8 = getelementptr inbounds %struct.nct6775_data, %struct.nct6775_data* %data, i32 0, i32 41
  store i8 %conv1, i8* %bank8, align 8, !tbaa !48
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  ret void
}

; Function Attrs: inlinehint nounwind uwtable
define internal void @outb_p(i8 zeroext %value, i32 %port) #0 {
entry:
  call void @outb(i8 zeroext %value, i32 %port)
  call void @slow_down_io()
  ret void
}

; Function Attrs: inlinehint nounwind uwtable
define internal zeroext i8 @inb_p(i32 %port) #0 {
entry:
  %call = call zeroext i8 @inb(i32 %port)
  call void @slow_down_io()
  ret i8 %call
}

; Function Attrs: inlinehint nounwind uwtable
define internal void @outb(i8 zeroext %value, i32 %port) #0 {
entry:
  call void asm sideeffect "outb ${0:b}, ${1:w}", "{ax},N{dx},~{dirflag},~{fpsr},~{flags}"(i8 %value, i32 %port) #6, !srcloc !102
  ret void
}

; Function Attrs: inlinehint nounwind uwtable
define internal void @slow_down_io() #0 {
entry:
  call void @native_io_delay()
  ret void
}

declare void @native_io_delay() #2

; Function Attrs: inlinehint nounwind uwtable
define internal zeroext i8 @inb(i32 %port) #0 {
entry:
  %0 = call i8 asm sideeffect "inb ${1:w}, ${0:b}", "={ax},N{dx},~{dirflag},~{fpsr},~{flags}"(i32 %port) #6, !srcloc !103
  ret i8 %0
}

; Function Attrs: inlinehint nounwind uwtable
define internal i64 @__ffs(i64 %word) #0 {
entry:
  %0 = call i64 asm "rep; bsf $1,$0", "=r,rm,~{dirflag},~{fpsr},~{flags}"(i64 %word) #7, !srcloc !104
  ret i64 %0
}

; Function Attrs: nounwind uwtable
define internal i32 @nct6775_write_value(%struct.nct6775_data* %data, i16 zeroext %reg, i16 zeroext %value) #1 {
entry:
  %call = call zeroext i1 @is_word_sized(%struct.nct6775_data* %data, i16 zeroext %reg)
  %conv = zext i1 %call to i32
  call void @nct6775_set_bank(%struct.nct6775_data* %data, i16 zeroext %reg)
  %conv1 = zext i16 %reg to i32
  %and = and i32 %conv1, 255
  %conv2 = trunc i32 %and to i8
  %addr = getelementptr inbounds %struct.nct6775_data, %struct.nct6775_data* %data, i32 0, i32 0
  %0 = load i32, i32* %addr, align 8, !tbaa !46
  %add = add nsw i32 %0, 0
  call void @outb_p(i8 zeroext %conv2, i32 %add)
  %tobool = icmp ne i32 %conv, 0
  br i1 %tobool, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %conv3 = zext i16 %value to i32
  %shr = ashr i32 %conv3, 8
  %conv4 = trunc i32 %shr to i8
  %addr5 = getelementptr inbounds %struct.nct6775_data, %struct.nct6775_data* %data, i32 0, i32 0
  %1 = load i32, i32* %addr5, align 8, !tbaa !46
  %add6 = add nsw i32 %1, 1
  call void @outb_p(i8 zeroext %conv4, i32 %add6)
  %conv7 = zext i16 %reg to i32
  %and8 = and i32 %conv7, 255
  %add9 = add nsw i32 %and8, 1
  %conv10 = trunc i32 %add9 to i8
  %addr11 = getelementptr inbounds %struct.nct6775_data, %struct.nct6775_data* %data, i32 0, i32 0
  %2 = load i32, i32* %addr11, align 8, !tbaa !46
  %add12 = add nsw i32 %2, 0
  call void @outb_p(i8 zeroext %conv10, i32 %add12)
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  %conv13 = zext i16 %value to i32
  %and14 = and i32 %conv13, 255
  %conv15 = trunc i32 %and14 to i8
  %addr16 = getelementptr inbounds %struct.nct6775_data, %struct.nct6775_data* %data, i32 0, i32 0
  %3 = load i32, i32* %addr16, align 8, !tbaa !46
  %add17 = add nsw i32 %3, 1
  call void @outb_p(i8 zeroext %conv15, i32 %add17)
  ret i32 0
}

declare %struct.resource* @__request_region(%struct.resource*, i64, i64, i8*, i32) #2

declare void @__release_region(%struct.resource*, i64, i64) #2

; Function Attrs: nounwind uwtable
define internal i64 @show_vid(%struct.device* %dev, %struct.device_attribute* %attr, i8* %buf) #1 {
entry:
  %call = call i8* @dev_get_drvdata(%struct.device* %dev)
  %0 = bitcast i8* %call to %struct.nct6775_data*
  %vid = getelementptr inbounds %struct.nct6775_data, %struct.nct6775_data* %0, i32 0, i32 75
  %1 = load i8, i8* %vid, align 1, !tbaa !90
  %conv = zext i8 %1 to i32
  %vrm = getelementptr inbounds %struct.nct6775_data, %struct.nct6775_data* %0, i32 0, i32 76
  %2 = load i8, i8* %vrm, align 8, !tbaa !91
  %call1 = call i32 @vid_from_reg(i32 %conv, i8 zeroext %2)
  %call2 = call i32 (i8*, i8*, ...) @sprintf(i8* %buf, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.41, i32 0, i32 0), i32 %call1)
  %conv3 = sext i32 %call2 to i64
  ret i64 %conv3
}

declare i8* @dev_get_drvdata(%struct.device*) #2

declare i32 @sprintf(i8*, i8*, ...) #2

declare i32 @vid_from_reg(i32, i8 zeroext) #2

; Function Attrs: nounwind uwtable
define internal void @nct6775_init_fan_div(%struct.nct6775_data* %data) #1 {
entry:
  call void @nct6775_update_fan_div_common(%struct.nct6775_data* %data)
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %i.0 = phi i32 [ 0, %entry ], [ %inc, %for.inc ]
  %conv = sext i32 %i.0 to i64
  %cmp = icmp ult i64 %conv, 5
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %has_fan = getelementptr inbounds %struct.nct6775_data, %struct.nct6775_data* %data, i32 0, i32 49
  %0 = load i8, i8* %has_fan, align 1, !tbaa !98
  %conv2 = zext i8 %0 to i32
  %shl = shl i32 1, %i.0
  %and = and i32 %conv2, %shl
  %tobool = icmp ne i32 %and, 0
  br i1 %tobool, label %if.end, label %for.inc

if.end:                                           ; preds = %for.body
  %fan_div = getelementptr inbounds %struct.nct6775_data, %struct.nct6775_data* %data, i32 0, i32 47
  %idxprom = sext i32 %i.0 to i64
  %arrayidx = getelementptr inbounds [5 x i8], [5 x i8]* %fan_div, i64 0, i64 %idxprom
  %1 = load i8, i8* %arrayidx, align 1, !tbaa !88
  %conv3 = zext i8 %1 to i32
  %cmp4 = icmp eq i32 %conv3, 0
  br i1 %cmp4, label %if.then6, label %for.inc

if.then6:                                         ; preds = %if.end
  %fan_div7 = getelementptr inbounds %struct.nct6775_data, %struct.nct6775_data* %data, i32 0, i32 47
  %idxprom8 = sext i32 %i.0 to i64
  %arrayidx9 = getelementptr inbounds [5 x i8], [5 x i8]* %fan_div7, i64 0, i64 %idxprom8
  store i8 7, i8* %arrayidx9, align 1, !tbaa !88
  call void @nct6775_write_fan_div_common(%struct.nct6775_data* %data, i32 %i.0)
  br label %for.inc

for.inc:                                          ; preds = %if.end, %if.then6, %for.body
  %inc = add nsw i32 %i.0, 1
  br label %for.cond

for.end:                                          ; preds = %for.cond
  ret void
}

; Function Attrs: nounwind uwtable
define internal void @nct6775_update_fan_div_common(%struct.nct6775_data* %data) #1 {
entry:
  %kind = getelementptr inbounds %struct.nct6775_data, %struct.nct6775_data* %data, i32 0, i32 1
  %0 = load i32, i32* %kind, align 4, !tbaa !44
  %cmp = icmp eq i32 %0, 0
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  call void @nct6775_update_fan_div(%struct.nct6775_data* %data)
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  ret void
}

; Function Attrs: nounwind uwtable
define internal void @nct6775_write_fan_div_common(%struct.nct6775_data* %data, i32 %nr) #1 {
entry:
  %kind = getelementptr inbounds %struct.nct6775_data, %struct.nct6775_data* %data, i32 0, i32 1
  %0 = load i32, i32* %kind, align 4, !tbaa !44
  %cmp = icmp eq i32 %0, 0
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  call void @nct6775_write_fan_div(%struct.nct6775_data* %data, i32 %nr)
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  ret void
}

; Function Attrs: nounwind uwtable
define internal void @nct6775_update_fan_div(%struct.nct6775_data* %data) #1 {
entry:
  %call = call zeroext i16 @nct6775_read_value(%struct.nct6775_data* %data, i16 zeroext 1286)
  %conv = trunc i16 %call to i8
  %conv1 = zext i8 %conv to i32
  %and = and i32 %conv1, 7
  %conv2 = trunc i32 %and to i8
  %fan_div = getelementptr inbounds %struct.nct6775_data, %struct.nct6775_data* %data, i32 0, i32 47
  %arrayidx = getelementptr inbounds [5 x i8], [5 x i8]* %fan_div, i64 0, i64 0
  store i8 %conv2, i8* %arrayidx, align 1, !tbaa !88
  %conv3 = zext i8 %conv to i32
  %and4 = and i32 %conv3, 112
  %shr = ashr i32 %and4, 4
  %conv5 = trunc i32 %shr to i8
  %fan_div6 = getelementptr inbounds %struct.nct6775_data, %struct.nct6775_data* %data, i32 0, i32 47
  %arrayidx7 = getelementptr inbounds [5 x i8], [5 x i8]* %fan_div6, i64 0, i64 1
  store i8 %conv5, i8* %arrayidx7, align 1, !tbaa !88
  %call8 = call zeroext i16 @nct6775_read_value(%struct.nct6775_data* %data, i16 zeroext 1287)
  %conv9 = trunc i16 %call8 to i8
  %conv10 = zext i8 %conv9 to i32
  %and11 = and i32 %conv10, 7
  %conv12 = trunc i32 %and11 to i8
  %fan_div13 = getelementptr inbounds %struct.nct6775_data, %struct.nct6775_data* %data, i32 0, i32 47
  %arrayidx14 = getelementptr inbounds [5 x i8], [5 x i8]* %fan_div13, i64 0, i64 2
  store i8 %conv12, i8* %arrayidx14, align 1, !tbaa !88
  %has_fan = getelementptr inbounds %struct.nct6775_data, %struct.nct6775_data* %data, i32 0, i32 49
  %0 = load i8, i8* %has_fan, align 1, !tbaa !98
  %conv15 = zext i8 %0 to i32
  %and16 = and i32 %conv15, 8
  %tobool = icmp ne i32 %and16, 0
  br i1 %tobool, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %conv17 = zext i8 %conv9 to i32
  %and18 = and i32 %conv17, 112
  %shr19 = ashr i32 %and18, 4
  %conv20 = trunc i32 %shr19 to i8
  %fan_div21 = getelementptr inbounds %struct.nct6775_data, %struct.nct6775_data* %data, i32 0, i32 47
  %arrayidx22 = getelementptr inbounds [5 x i8], [5 x i8]* %fan_div21, i64 0, i64 3
  store i8 %conv20, i8* %arrayidx22, align 1, !tbaa !88
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  ret void
}

; Function Attrs: nounwind uwtable
define internal void @nct6775_write_fan_div(%struct.nct6775_data* %data, i32 %nr) #1 {
entry:
  br label %NodeBlock5

NodeBlock5:                                       ; preds = %entry
  %Pivot6 = icmp slt i32 %nr, 2
  br i1 %Pivot6, label %NodeBlock, label %NodeBlock3

NodeBlock3:                                       ; preds = %NodeBlock5
  %Pivot4 = icmp slt i32 %nr, 3
  br i1 %Pivot4, label %sw.bb18, label %LeafBlock1

LeafBlock1:                                       ; preds = %NodeBlock3
  %SwitchLeaf2 = icmp eq i32 %nr, 3
  br i1 %SwitchLeaf2, label %sw.bb30, label %NewDefault

NodeBlock:                                        ; preds = %NodeBlock5
  %Pivot = icmp slt i32 %nr, 1
  br i1 %Pivot, label %LeafBlock, label %sw.bb6

LeafBlock:                                        ; preds = %NodeBlock
  %SwitchLeaf = icmp eq i32 %nr, 0
  br i1 %SwitchLeaf, label %sw.bb, label %NewDefault

sw.bb:                                            ; preds = %LeafBlock
  %call = call zeroext i16 @nct6775_read_value(%struct.nct6775_data* %data, i16 zeroext 1286)
  %conv = zext i16 %call to i32
  %and = and i32 %conv, 112
  %fan_div = getelementptr inbounds %struct.nct6775_data, %struct.nct6775_data* %data, i32 0, i32 47
  %arrayidx = getelementptr inbounds [5 x i8], [5 x i8]* %fan_div, i64 0, i64 0
  %0 = load i8, i8* %arrayidx, align 1, !tbaa !88
  %conv1 = zext i8 %0 to i32
  %and2 = and i32 %conv1, 7
  %or = or i32 %and, %and2
  %conv3 = trunc i32 %or to i8
  %conv4 = zext i8 %conv3 to i16
  %call5 = call i32 @nct6775_write_value(%struct.nct6775_data* %data, i16 zeroext 1286, i16 zeroext %conv4)
  br label %sw.epilog

sw.bb6:                                           ; preds = %NodeBlock
  %call7 = call zeroext i16 @nct6775_read_value(%struct.nct6775_data* %data, i16 zeroext 1286)
  %conv8 = zext i16 %call7 to i32
  %and9 = and i32 %conv8, 7
  %fan_div10 = getelementptr inbounds %struct.nct6775_data, %struct.nct6775_data* %data, i32 0, i32 47
  %arrayidx11 = getelementptr inbounds [5 x i8], [5 x i8]* %fan_div10, i64 0, i64 1
  %1 = load i8, i8* %arrayidx11, align 1, !tbaa !88
  %conv12 = zext i8 %1 to i32
  %shl = shl i32 %conv12, 4
  %and13 = and i32 %shl, 112
  %or14 = or i32 %and9, %and13
  %conv15 = trunc i32 %or14 to i8
  %conv16 = zext i8 %conv15 to i16
  %call17 = call i32 @nct6775_write_value(%struct.nct6775_data* %data, i16 zeroext 1286, i16 zeroext %conv16)
  br label %sw.epilog

sw.bb18:                                          ; preds = %NodeBlock3
  %call19 = call zeroext i16 @nct6775_read_value(%struct.nct6775_data* %data, i16 zeroext 1287)
  %conv20 = zext i16 %call19 to i32
  %and21 = and i32 %conv20, 112
  %fan_div22 = getelementptr inbounds %struct.nct6775_data, %struct.nct6775_data* %data, i32 0, i32 47
  %arrayidx23 = getelementptr inbounds [5 x i8], [5 x i8]* %fan_div22, i64 0, i64 2
  %2 = load i8, i8* %arrayidx23, align 1, !tbaa !88
  %conv24 = zext i8 %2 to i32
  %and25 = and i32 %conv24, 7
  %or26 = or i32 %and21, %and25
  %conv27 = trunc i32 %or26 to i8
  %conv28 = zext i8 %conv27 to i16
  %call29 = call i32 @nct6775_write_value(%struct.nct6775_data* %data, i16 zeroext 1287, i16 zeroext %conv28)
  br label %sw.epilog

sw.bb30:                                          ; preds = %LeafBlock1
  %call31 = call zeroext i16 @nct6775_read_value(%struct.nct6775_data* %data, i16 zeroext 1287)
  %conv32 = zext i16 %call31 to i32
  %and33 = and i32 %conv32, 7
  %fan_div34 = getelementptr inbounds %struct.nct6775_data, %struct.nct6775_data* %data, i32 0, i32 47
  %arrayidx35 = getelementptr inbounds [5 x i8], [5 x i8]* %fan_div34, i64 0, i64 3
  %3 = load i8, i8* %arrayidx35, align 1, !tbaa !88
  %conv36 = zext i8 %3 to i32
  %shl37 = shl i32 %conv36, 4
  %and38 = and i32 %shl37, 112
  %or39 = or i32 %and33, %and38
  %conv40 = trunc i32 %or39 to i8
  %conv41 = zext i8 %conv40 to i16
  %call42 = call i32 @nct6775_write_value(%struct.nct6775_data* %data, i16 zeroext 1287, i16 zeroext %conv41)
  br label %sw.epilog

NewDefault:                                       ; preds = %LeafBlock1, %LeafBlock
  br label %sw.epilog

sw.epilog:                                        ; preds = %NewDefault, %sw.bb30, %sw.bb18, %sw.bb6, %sw.bb
  ret void
}

; Function Attrs: nounwind uwtable
define internal i64 @show_pwm(%struct.device* %dev, %struct.device_attribute* %attr, i8* %buf) #1 {
entry:
  %call = call %struct.nct6775_data* @nct6775_update_device(%struct.device* %dev)
  %0 = bitcast %struct.device_attribute* %attr to i8*
  %add.ptr = getelementptr inbounds i8, i8* %0, i64 0
  %1 = bitcast i8* %add.ptr to %struct.sensor_device_attribute_2*
  %nr1 = getelementptr inbounds %struct.sensor_device_attribute_2, %struct.sensor_device_attribute_2* %1, i32 0, i32 2
  %2 = load i8, i8* %nr1, align 1, !tbaa !93
  %conv = zext i8 %2 to i32
  %index2 = getelementptr inbounds %struct.sensor_device_attribute_2, %struct.sensor_device_attribute_2* %1, i32 0, i32 1
  %3 = load i8, i8* %index2, align 8, !tbaa !97
  %conv3 = zext i8 %3 to i32
  %cmp = icmp eq i32 %conv3, 0
  br i1 %cmp, label %land.lhs.true, label %if.else

land.lhs.true:                                    ; preds = %entry
  %pwm_enable = getelementptr inbounds %struct.nct6775_data, %struct.nct6775_data* %call, i32 0, i32 59
  %idxprom = sext i32 %conv to i64
  %arrayidx = getelementptr inbounds [5 x i32], [5 x i32]* %pwm_enable, i64 0, i64 %idxprom
  %4 = load i32, i32* %arrayidx, align 4, !tbaa !88
  %cmp5 = icmp ugt i32 %4, 1
  br i1 %cmp5, label %if.then, label %if.else

if.then:                                          ; preds = %land.lhs.true
  %REG_PWM_READ = getelementptr inbounds %struct.nct6775_data, %struct.nct6775_data* %call, i32 0, i32 25
  %5 = load i16*, i16** %REG_PWM_READ, align 8, !tbaa !72
  %idxprom7 = sext i32 %conv to i64
  %arrayidx8 = getelementptr inbounds i16, i16* %5, i64 %idxprom7
  %6 = load i16, i16* %arrayidx8, align 2, !tbaa !13
  %call9 = call zeroext i16 @nct6775_read_value(%struct.nct6775_data* %call, i16 zeroext %6)
  %conv10 = zext i16 %call9 to i32
  br label %if.end

if.else:                                          ; preds = %land.lhs.true, %entry
  %pwm11 = getelementptr inbounds %struct.nct6775_data, %struct.nct6775_data* %call, i32 0, i32 60
  %idxprom12 = sext i32 %conv3 to i64
  %arrayidx13 = getelementptr inbounds [7 x [5 x i8]], [7 x [5 x i8]]* %pwm11, i64 0, i64 %idxprom12
  %idxprom14 = sext i32 %conv to i64
  %arrayidx15 = getelementptr inbounds [5 x i8], [5 x i8]* %arrayidx13, i64 0, i64 %idxprom14
  %7 = load i8, i8* %arrayidx15, align 1, !tbaa !88
  %conv16 = zext i8 %7 to i32
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then
  %pwm.0 = phi i32 [ %conv10, %if.then ], [ %conv16, %if.else ]
  %call17 = call i32 (i8*, i8*, ...) @sprintf(i8* %buf, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.41, i32 0, i32 0), i32 %pwm.0)
  %conv18 = sext i32 %call17 to i64
  ret i64 %conv18
}

; Function Attrs: nounwind uwtable
define internal i64 @store_pwm(%struct.device* %dev, %struct.device_attribute* %attr, i8* %buf, i64 %count) #1 {
entry:
  %val = alloca i64, align 8
  %minval = alloca [7 x i32], align 16
  %maxval = alloca [7 x i32], align 16
  %call = call i8* @dev_get_drvdata(%struct.device* %dev)
  %0 = bitcast i8* %call to %struct.nct6775_data*
  %1 = bitcast %struct.device_attribute* %attr to i8*
  %add.ptr = getelementptr inbounds i8, i8* %1, i64 0
  %2 = bitcast i8* %add.ptr to %struct.sensor_device_attribute_2*
  %nr1 = getelementptr inbounds %struct.sensor_device_attribute_2, %struct.sensor_device_attribute_2* %2, i32 0, i32 2
  %3 = load i8, i8* %nr1, align 1, !tbaa !93
  %conv = zext i8 %3 to i32
  %index2 = getelementptr inbounds %struct.sensor_device_attribute_2, %struct.sensor_device_attribute_2* %2, i32 0, i32 1
  %4 = load i8, i8* %index2, align 8, !tbaa !97
  %conv3 = zext i8 %4 to i32
  %5 = bitcast i64* %val to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %5) #6
  %6 = bitcast [7 x i32]* %minval to i8*
  call void @llvm.lifetime.start.p0i8(i64 28, i8* %6) #6
  %arrayinit.begin = getelementptr inbounds [7 x i32], [7 x i32]* %minval, i64 0, i64 0
  store i32 0, i32* %arrayinit.begin, align 4, !tbaa !86
  %arrayinit.element = getelementptr inbounds i32, i32* %arrayinit.begin, i64 1
  store i32 1, i32* %arrayinit.element, align 4, !tbaa !86
  %arrayinit.element4 = getelementptr inbounds i32, i32* %arrayinit.element, i64 1
  store i32 1, i32* %arrayinit.element4, align 4, !tbaa !86
  %arrayinit.element5 = getelementptr inbounds i32, i32* %arrayinit.element4, i64 1
  %pwm = getelementptr inbounds %struct.nct6775_data, %struct.nct6775_data* %0, i32 0, i32 60
  %arrayidx = getelementptr inbounds [7 x [5 x i8]], [7 x [5 x i8]]* %pwm, i64 0, i64 2
  %idxprom = sext i32 %conv to i64
  %arrayidx6 = getelementptr inbounds [5 x i8], [5 x i8]* %arrayidx, i64 0, i64 %idxprom
  %7 = load i8, i8* %arrayidx6, align 1, !tbaa !88
  %conv7 = zext i8 %7 to i32
  store i32 %conv7, i32* %arrayinit.element5, align 4, !tbaa !86
  %arrayinit.element8 = getelementptr inbounds i32, i32* %arrayinit.element5, i64 1
  store i32 0, i32* %arrayinit.element8, align 4, !tbaa !86
  %arrayinit.element9 = getelementptr inbounds i32, i32* %arrayinit.element8, i64 1
  store i32 0, i32* %arrayinit.element9, align 4, !tbaa !86
  %arrayinit.element10 = getelementptr inbounds i32, i32* %arrayinit.element9, i64 1
  store i32 0, i32* %arrayinit.element10, align 4, !tbaa !86
  %8 = bitcast [7 x i32]* %maxval to i8*
  call void @llvm.lifetime.start.p0i8(i64 28, i8* %8) #6
  %arrayinit.begin11 = getelementptr inbounds [7 x i32], [7 x i32]* %maxval, i64 0, i64 0
  store i32 255, i32* %arrayinit.begin11, align 4, !tbaa !86
  %arrayinit.element12 = getelementptr inbounds i32, i32* %arrayinit.begin11, i64 1
  store i32 255, i32* %arrayinit.element12, align 4, !tbaa !86
  %arrayinit.element13 = getelementptr inbounds i32, i32* %arrayinit.element12, i64 1
  %pwm14 = getelementptr inbounds %struct.nct6775_data, %struct.nct6775_data* %0, i32 0, i32 60
  %arrayidx15 = getelementptr inbounds [7 x [5 x i8]], [7 x [5 x i8]]* %pwm14, i64 0, i64 3
  %idxprom16 = sext i32 %conv to i64
  %arrayidx17 = getelementptr inbounds [5 x i8], [5 x i8]* %arrayidx15, i64 0, i64 %idxprom16
  %9 = load i8, i8* %arrayidx17, align 1, !tbaa !88
  %conv18 = zext i8 %9 to i32
  %tobool = icmp ne i32 %conv18, 0
  %conv18. = select i1 %tobool, i32 %conv18, i32 255
  store i32 %conv18., i32* %arrayinit.element13, align 4, !tbaa !86
  %arrayinit.element19 = getelementptr inbounds i32, i32* %arrayinit.element13, i64 1
  store i32 255, i32* %arrayinit.element19, align 4, !tbaa !86
  %arrayinit.element20 = getelementptr inbounds i32, i32* %arrayinit.element19, i64 1
  store i32 255, i32* %arrayinit.element20, align 4, !tbaa !86
  %arrayinit.element21 = getelementptr inbounds i32, i32* %arrayinit.element20, i64 1
  store i32 255, i32* %arrayinit.element21, align 4, !tbaa !86
  %arrayinit.element22 = getelementptr inbounds i32, i32* %arrayinit.element21, i64 1
  store i32 255, i32* %arrayinit.element22, align 4, !tbaa !86
  %call23 = call i32 @kstrtoul(i8* %buf, i32 10, i64* %val)
  %cmp = icmp slt i32 %call23, 0
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %conv25 = sext i32 %call23 to i64
  br label %cleanup

if.end:                                           ; preds = %entry
  %10 = load i64, i64* %val, align 8, !tbaa !23
  %idxprom26 = sext i32 %conv3 to i64
  %arrayidx27 = getelementptr inbounds [7 x i32], [7 x i32]* %minval, i64 0, i64 %idxprom26
  %11 = load i32, i32* %arrayidx27, align 4, !tbaa !86
  %conv28 = sext i32 %11 to i64
  %idxprom29 = sext i32 %conv3 to i64
  %arrayidx30 = getelementptr inbounds [7 x i32], [7 x i32]* %maxval, i64 0, i64 %idxprom29
  %12 = load i32, i32* %arrayidx30, align 4, !tbaa !86
  %conv31 = sext i32 %12 to i64
  %cmp32 = icmp ult i64 %10, %conv28
  %conv28. = select i1 %cmp32, i64 %conv28, i64 %10
  %cmp39 = icmp ugt i64 %conv28., %conv31
  %cond44 = select i1 %cmp39, i64 %conv31, i64 %conv28.
  store i64 %cond44, i64* %val, align 8, !tbaa !23
  %update_lock = getelementptr inbounds %struct.nct6775_data, %struct.nct6775_data* %0, i32 0, i32 38
  call void @mutex_lock(%struct.mutex* %update_lock)
  %13 = load i64, i64* %val, align 8, !tbaa !23
  %conv45 = trunc i64 %13 to i8
  %pwm46 = getelementptr inbounds %struct.nct6775_data, %struct.nct6775_data* %0, i32 0, i32 60
  %idxprom47 = sext i32 %conv3 to i64
  %arrayidx48 = getelementptr inbounds [7 x [5 x i8]], [7 x [5 x i8]]* %pwm46, i64 0, i64 %idxprom47
  %idxprom49 = sext i32 %conv to i64
  %arrayidx50 = getelementptr inbounds [5 x i8], [5 x i8]* %arrayidx48, i64 0, i64 %idxprom49
  store i8 %conv45, i8* %arrayidx50, align 1, !tbaa !88
  %REG_PWM = getelementptr inbounds %struct.nct6775_data, %struct.nct6775_data* %0, i32 0, i32 24
  %idxprom51 = sext i32 %conv3 to i64
  %arrayidx52 = getelementptr inbounds [7 x i16*], [7 x i16*]* %REG_PWM, i64 0, i64 %idxprom51
  %14 = load i16*, i16** %arrayidx52, align 8, !tbaa !12
  %idxprom53 = sext i32 %conv to i64
  %arrayidx54 = getelementptr inbounds i16, i16* %14, i64 %idxprom53
  %15 = load i16, i16* %arrayidx54, align 2, !tbaa !13
  %16 = load i64, i64* %val, align 8, !tbaa !23
  %conv55 = trunc i64 %16 to i16
  %call56 = call i32 @nct6775_write_value(%struct.nct6775_data* %0, i16 zeroext %15, i16 zeroext %conv55)
  %cmp57 = icmp eq i32 %conv3, 2
  br i1 %cmp57, label %if.then59, label %if.end76

if.then59:                                        ; preds = %if.end
  %REG_TEMP_SEL = getelementptr inbounds %struct.nct6775_data, %struct.nct6775_data* %0, i32 0, i32 31
  %17 = load i16*, i16** %REG_TEMP_SEL, align 8, !tbaa !81
  %idxprom60 = sext i32 %conv to i64
  %arrayidx61 = getelementptr inbounds i16, i16* %17, i64 %idxprom60
  %18 = load i16, i16* %arrayidx61, align 2, !tbaa !13
  %call62 = call zeroext i16 @nct6775_read_value(%struct.nct6775_data* %0, i16 zeroext %18)
  %conv63 = trunc i16 %call62 to i8
  %conv64 = zext i8 %conv63 to i32
  %and = and i32 %conv64, 127
  %conv65 = trunc i32 %and to i8
  %19 = load i64, i64* %val, align 8, !tbaa !23
  %tobool66 = icmp ne i64 %19, 0
  %conv68 = zext i8 %conv65 to i32
  %or = or i32 %conv68, 128
  %conv69 = trunc i32 %or to i8
  %reg.0 = select i1 %tobool66, i8 %conv69, i8 %conv65
  %REG_TEMP_SEL71 = getelementptr inbounds %struct.nct6775_data, %struct.nct6775_data* %0, i32 0, i32 31
  %20 = load i16*, i16** %REG_TEMP_SEL71, align 8, !tbaa !81
  %idxprom72 = sext i32 %conv to i64
  %arrayidx73 = getelementptr inbounds i16, i16* %20, i64 %idxprom72
  %21 = load i16, i16* %arrayidx73, align 2, !tbaa !13
  %conv74 = zext i8 %reg.0 to i16
  %call75 = call i32 @nct6775_write_value(%struct.nct6775_data* %0, i16 zeroext %21, i16 zeroext %conv74)
  br label %if.end76

if.end76:                                         ; preds = %if.then59, %if.end
  %update_lock77 = getelementptr inbounds %struct.nct6775_data, %struct.nct6775_data* %0, i32 0, i32 38
  call void @mutex_unlock(%struct.mutex* %update_lock77)
  br label %cleanup

cleanup:                                          ; preds = %if.end76, %if.then
  %retval.0 = phi i64 [ %conv25, %if.then ], [ %count, %if.end76 ]
  %22 = bitcast [7 x i32]* %maxval to i8*
  call void @llvm.lifetime.end.p0i8(i64 28, i8* %22) #6
  %23 = bitcast [7 x i32]* %minval to i8*
  call void @llvm.lifetime.end.p0i8(i64 28, i8* %23) #6
  %24 = bitcast i64* %val to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %24) #6
  ret i64 %retval.0
}

; Function Attrs: nounwind uwtable
define internal %struct.nct6775_data* @nct6775_update_device(%struct.device* %dev) #1 {
entry:
  %__dummy = alloca i64, align 8
  %__dummy2 = alloca i64, align 8
  %__dummy1 = alloca i64, align 8
  %__dummy22 = alloca i64, align 8
  %call = call i8* @dev_get_drvdata(%struct.device* %dev)
  %0 = bitcast i8* %call to %struct.nct6775_data*
  %update_lock = getelementptr inbounds %struct.nct6775_data, %struct.nct6775_data* %0, i32 0, i32 38
  call void @mutex_lock(%struct.mutex* %update_lock)
  %1 = bitcast i64* %__dummy to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %1) #6
  %2 = bitcast i64* %__dummy2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %2) #6
  %cmp = icmp eq i64* %__dummy, %__dummy2
  %conv = zext i1 %cmp to i32
  %3 = bitcast i64* %__dummy2 to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %3) #6
  %4 = bitcast i64* %__dummy to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %4) #6
  %tobool = icmp ne i32 1, 0
  br i1 %tobool, label %land.lhs.true, label %lor.lhs.false

land.lhs.true:                                    ; preds = %entry
  %5 = bitcast i64* %__dummy1 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %5) #6
  %6 = bitcast i64* %__dummy22 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %6) #6
  %cmp3 = icmp eq i64* %__dummy1, %__dummy22
  %conv4 = zext i1 %cmp3 to i32
  %7 = bitcast i64* %__dummy22 to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %7) #6
  %8 = bitcast i64* %__dummy1 to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %8) #6
  %last_updated = getelementptr inbounds %struct.nct6775_data, %struct.nct6775_data* %0, i32 0, i32 40
  %9 = load i64, i64* %last_updated, align 8, !tbaa !105
  %add = add i64 %9, 1000
  %add8 = add i64 %add, 500
  %10 = load volatile i64, i64* @jiffies, align 8, !tbaa !23
  %sub = sub nsw i64 %add8, %10
  %cmp9 = icmp slt i64 %sub, 0
  br i1 %cmp9, label %if.then, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %land.lhs.true, %entry
  %valid = getelementptr inbounds %struct.nct6775_data, %struct.nct6775_data* %0, i32 0, i32 39
  %11 = load i8, i8* %valid, align 8, !tbaa !106, !range !101
  %tobool11 = trunc i8 %11 to i1
  br i1 %tobool11, label %if.end158, label %if.then

if.then:                                          ; preds = %lor.lhs.false, %land.lhs.true
  call void @nct6775_update_fan_div_common(%struct.nct6775_data* %0)
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %if.then
  %i.0 = phi i32 [ 0, %if.then ], [ %inc, %for.inc ]
  %in_num = getelementptr inbounds %struct.nct6775_data, %struct.nct6775_data* %0, i32 0, i32 42
  %12 = load i8, i8* %in_num, align 1, !tbaa !49
  %conv12 = zext i8 %12 to i32
  %cmp13 = icmp slt i32 %i.0, %conv12
  br i1 %cmp13, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %have_in = getelementptr inbounds %struct.nct6775_data, %struct.nct6775_data* %0, i32 0, i32 79
  %13 = load i16, i16* %have_in, align 2, !tbaa !84
  %conv15 = zext i16 %13 to i32
  %shl = shl i32 1, %i.0
  %and = and i32 %conv15, %shl
  %tobool16 = icmp ne i32 %and, 0
  br i1 %tobool16, label %if.end, label %for.inc

if.end:                                           ; preds = %for.body
  %REG_VIN = getelementptr inbounds %struct.nct6775_data, %struct.nct6775_data* %0, i32 0, i32 13
  %14 = load i16*, i16** %REG_VIN, align 8, !tbaa !65
  %idxprom = sext i32 %i.0 to i64
  %arrayidx = getelementptr inbounds i16, i16* %14, i64 %idxprom
  %15 = load i16, i16* %arrayidx, align 2, !tbaa !13
  %call18 = call zeroext i16 @nct6775_read_value(%struct.nct6775_data* %0, i16 zeroext %15)
  %conv19 = trunc i16 %call18 to i8
  %in = getelementptr inbounds %struct.nct6775_data, %struct.nct6775_data* %0, i32 0, i32 43
  %idxprom20 = sext i32 %i.0 to i64
  %arrayidx21 = getelementptr inbounds [15 x [3 x i8]], [15 x [3 x i8]]* %in, i64 0, i64 %idxprom20
  %arrayidx22 = getelementptr inbounds [3 x i8], [3 x i8]* %arrayidx21, i64 0, i64 0
  store i8 %conv19, i8* %arrayidx22, align 1, !tbaa !88
  %REG_IN_MINMAX = getelementptr inbounds %struct.nct6775_data, %struct.nct6775_data* %0, i32 0, i32 14
  %arrayidx23 = getelementptr inbounds [2 x i16*], [2 x i16*]* %REG_IN_MINMAX, i64 0, i64 0
  %16 = load i16*, i16** %arrayidx23, align 8, !tbaa !12
  %idxprom24 = sext i32 %i.0 to i64
  %arrayidx25 = getelementptr inbounds i16, i16* %16, i64 %idxprom24
  %17 = load i16, i16* %arrayidx25, align 2, !tbaa !13
  %call26 = call zeroext i16 @nct6775_read_value(%struct.nct6775_data* %0, i16 zeroext %17)
  %conv27 = trunc i16 %call26 to i8
  %in28 = getelementptr inbounds %struct.nct6775_data, %struct.nct6775_data* %0, i32 0, i32 43
  %idxprom29 = sext i32 %i.0 to i64
  %arrayidx30 = getelementptr inbounds [15 x [3 x i8]], [15 x [3 x i8]]* %in28, i64 0, i64 %idxprom29
  %arrayidx31 = getelementptr inbounds [3 x i8], [3 x i8]* %arrayidx30, i64 0, i64 1
  store i8 %conv27, i8* %arrayidx31, align 1, !tbaa !88
  %REG_IN_MINMAX32 = getelementptr inbounds %struct.nct6775_data, %struct.nct6775_data* %0, i32 0, i32 14
  %arrayidx33 = getelementptr inbounds [2 x i16*], [2 x i16*]* %REG_IN_MINMAX32, i64 0, i64 1
  %18 = load i16*, i16** %arrayidx33, align 8, !tbaa !12
  %idxprom34 = sext i32 %i.0 to i64
  %arrayidx35 = getelementptr inbounds i16, i16* %18, i64 %idxprom34
  %19 = load i16, i16* %arrayidx35, align 2, !tbaa !13
  %call36 = call zeroext i16 @nct6775_read_value(%struct.nct6775_data* %0, i16 zeroext %19)
  %conv37 = trunc i16 %call36 to i8
  %in38 = getelementptr inbounds %struct.nct6775_data, %struct.nct6775_data* %0, i32 0, i32 43
  %idxprom39 = sext i32 %i.0 to i64
  %arrayidx40 = getelementptr inbounds [15 x [3 x i8]], [15 x [3 x i8]]* %in38, i64 0, i64 %idxprom39
  %arrayidx41 = getelementptr inbounds [3 x i8], [3 x i8]* %arrayidx40, i64 0, i64 2
  store i8 %conv37, i8* %arrayidx41, align 1, !tbaa !88
  br label %for.inc

for.inc:                                          ; preds = %for.body, %if.end
  %inc = add nsw i32 %i.0, 1
  br label %for.cond

for.end:                                          ; preds = %for.cond
  br label %for.cond42

for.cond42:                                       ; preds = %for.inc79, %for.end
  %i.1 = phi i32 [ 0, %for.end ], [ %inc80, %for.inc79 ]
  %conv43 = sext i32 %i.1 to i64
  %cmp44 = icmp ult i64 %conv43, 5
  br i1 %cmp44, label %for.body46, label %for.end81

for.body46:                                       ; preds = %for.cond42
  %has_fan = getelementptr inbounds %struct.nct6775_data, %struct.nct6775_data* %0, i32 0, i32 49
  %20 = load i8, i8* %has_fan, align 1, !tbaa !98
  %conv47 = zext i8 %20 to i32
  %shl48 = shl i32 1, %i.1
  %and49 = and i32 %conv47, %shl48
  %tobool50 = icmp ne i32 %and49, 0
  br i1 %tobool50, label %if.end52, label %for.inc79

if.end52:                                         ; preds = %for.body46
  %REG_FAN = getelementptr inbounds %struct.nct6775_data, %struct.nct6775_data* %0, i32 0, i32 16
  %21 = load i16*, i16** %REG_FAN, align 8, !tbaa !67
  %idxprom53 = sext i32 %i.1 to i64
  %arrayidx54 = getelementptr inbounds i16, i16* %21, i64 %idxprom53
  %22 = load i16, i16* %arrayidx54, align 2, !tbaa !13
  %call55 = call zeroext i16 @nct6775_read_value(%struct.nct6775_data* %0, i16 zeroext %22)
  %fan_from_reg = getelementptr inbounds %struct.nct6775_data, %struct.nct6775_data* %0, i32 0, i32 36
  %23 = load i32 (i16, i32)*, i32 (i16, i32)** %fan_from_reg, align 8, !tbaa !55
  %fan_div = getelementptr inbounds %struct.nct6775_data, %struct.nct6775_data* %0, i32 0, i32 47
  %idxprom56 = sext i32 %i.1 to i64
  %arrayidx57 = getelementptr inbounds [5 x i8], [5 x i8]* %fan_div, i64 0, i64 %idxprom56
  %24 = load i8, i8* %arrayidx57, align 1, !tbaa !88
  %conv58 = zext i8 %24 to i32
  %call59 = call i32 %23(i16 zeroext %call55, i32 %conv58)
  %rpm = getelementptr inbounds %struct.nct6775_data, %struct.nct6775_data* %0, i32 0, i32 44
  %idxprom60 = sext i32 %i.1 to i64
  %arrayidx61 = getelementptr inbounds [5 x i32], [5 x i32]* %rpm, i64 0, i64 %idxprom60
  store i32 %call59, i32* %arrayidx61, align 4, !tbaa !86
  %has_fan_min = getelementptr inbounds %struct.nct6775_data, %struct.nct6775_data* %0, i32 0, i32 50
  %25 = load i8, i8* %has_fan_min, align 2, !tbaa !99
  %conv62 = zext i8 %25 to i32
  %shl63 = shl i32 1, %i.1
  %and64 = and i32 %conv62, %shl63
  %tobool65 = icmp ne i32 %and64, 0
  br i1 %tobool65, label %if.then66, label %if.end72

if.then66:                                        ; preds = %if.end52
  %REG_FAN_MIN = getelementptr inbounds %struct.nct6775_data, %struct.nct6775_data* %0, i32 0, i32 18
  %26 = load i16*, i16** %REG_FAN_MIN, align 8, !tbaa !69
  %idxprom67 = sext i32 %i.1 to i64
  %arrayidx68 = getelementptr inbounds i16, i16* %26, i64 %idxprom67
  %27 = load i16, i16* %arrayidx68, align 2, !tbaa !13
  %call69 = call zeroext i16 @nct6775_read_value(%struct.nct6775_data* %0, i16 zeroext %27)
  %fan_min = getelementptr inbounds %struct.nct6775_data, %struct.nct6775_data* %0, i32 0, i32 45
  %idxprom70 = sext i32 %i.1 to i64
  %arrayidx71 = getelementptr inbounds [5 x i16], [5 x i16]* %fan_min, i64 0, i64 %idxprom70
  store i16 %call69, i16* %arrayidx71, align 2, !tbaa !13
  br label %if.end72

if.end72:                                         ; preds = %if.then66, %if.end52
  %REG_FAN_PULSES = getelementptr inbounds %struct.nct6775_data, %struct.nct6775_data* %0, i32 0, i32 19
  %28 = load i16*, i16** %REG_FAN_PULSES, align 8, !tbaa !70
  %idxprom73 = sext i32 %i.1 to i64
  %arrayidx74 = getelementptr inbounds i16, i16* %28, i64 %idxprom73
  %29 = load i16, i16* %arrayidx74, align 2, !tbaa !13
  %call75 = call zeroext i16 @nct6775_read_value(%struct.nct6775_data* %0, i16 zeroext %29)
  %conv76 = trunc i16 %call75 to i8
  %fan_pulses = getelementptr inbounds %struct.nct6775_data, %struct.nct6775_data* %0, i32 0, i32 46
  %idxprom77 = sext i32 %i.1 to i64
  %arrayidx78 = getelementptr inbounds [5 x i8], [5 x i8]* %fan_pulses, i64 0, i64 %idxprom77
  store i8 %conv76, i8* %arrayidx78, align 1, !tbaa !88
  call void @nct6775_select_fan_div(%struct.device* %dev, %struct.nct6775_data* %0, i32 %i.1, i16 zeroext %call55)
  br label %for.inc79

for.inc79:                                        ; preds = %if.end72, %for.body46
  %inc80 = add nsw i32 %i.1, 1
  br label %for.cond42

for.end81:                                        ; preds = %for.cond42
  call void @nct6775_update_pwm(%struct.device* %dev)
  call void @nct6775_update_pwm_limits(%struct.device* %dev)
  br label %for.cond82

for.cond82:                                       ; preds = %for.inc129, %for.end81
  %i.2 = phi i32 [ 0, %for.end81 ], [ %inc130, %for.inc129 ]
  %cmp83 = icmp slt i32 %i.2, 10
  br i1 %cmp83, label %for.body85, label %for.end131

for.body85:                                       ; preds = %for.cond82
  %have_temp = getelementptr inbounds %struct.nct6775_data, %struct.nct6775_data* %0, i32 0, i32 77
  %30 = load i16, i16* %have_temp, align 2, !tbaa !85
  %conv86 = zext i16 %30 to i32
  %shl87 = shl i32 1, %i.2
  %and88 = and i32 %conv86, %shl87
  %tobool89 = icmp ne i32 %and88, 0
  br i1 %tobool89, label %if.end91, label %for.inc129

if.end91:                                         ; preds = %for.body85
  br label %for.cond92

for.cond92:                                       ; preds = %for.inc114, %if.end91
  %j.0 = phi i32 [ 0, %if.end91 ], [ %inc115, %for.inc114 ]
  %conv93 = sext i32 %j.0 to i64
  %cmp94 = icmp ult i64 %conv93, 4
  br i1 %cmp94, label %for.body96, label %for.end116

for.body96:                                       ; preds = %for.cond92
  %reg_temp = getelementptr inbounds %struct.nct6775_data, %struct.nct6775_data* %0, i32 0, i32 4
  %idxprom97 = sext i32 %j.0 to i64
  %arrayidx98 = getelementptr inbounds [4 x [10 x i16]], [4 x [10 x i16]]* %reg_temp, i64 0, i64 %idxprom97
  %idxprom99 = sext i32 %i.2 to i64
  %arrayidx100 = getelementptr inbounds [10 x i16], [10 x i16]* %arrayidx98, i64 0, i64 %idxprom99
  %31 = load i16, i16* %arrayidx100, align 2, !tbaa !13
  %tobool101 = icmp ne i16 %31, 0
  br i1 %tobool101, label %if.then102, label %for.inc114

if.then102:                                       ; preds = %for.body96
  %reg_temp103 = getelementptr inbounds %struct.nct6775_data, %struct.nct6775_data* %0, i32 0, i32 4
  %idxprom104 = sext i32 %j.0 to i64
  %arrayidx105 = getelementptr inbounds [4 x [10 x i16]], [4 x [10 x i16]]* %reg_temp103, i64 0, i64 %idxprom104
  %idxprom106 = sext i32 %i.2 to i64
  %arrayidx107 = getelementptr inbounds [10 x i16], [10 x i16]* %arrayidx105, i64 0, i64 %idxprom106
  %32 = load i16, i16* %arrayidx107, align 2, !tbaa !13
  %call108 = call zeroext i16 @nct6775_read_temp(%struct.nct6775_data* %0, i16 zeroext %32)
  %temp = getelementptr inbounds %struct.nct6775_data, %struct.nct6775_data* %0, i32 0, i32 55
  %idxprom109 = sext i32 %j.0 to i64
  %arrayidx110 = getelementptr inbounds [4 x [10 x i16]], [4 x [10 x i16]]* %temp, i64 0, i64 %idxprom109
  %idxprom111 = sext i32 %i.2 to i64
  %arrayidx112 = getelementptr inbounds [10 x i16], [10 x i16]* %arrayidx110, i64 0, i64 %idxprom111
  store i16 %call108, i16* %arrayidx112, align 2, !tbaa !13
  br label %for.inc114

for.inc114:                                       ; preds = %for.body96, %if.then102
  %inc115 = add nsw i32 %j.0, 1
  br label %for.cond92

for.end116:                                       ; preds = %for.cond92
  %have_temp_fixed = getelementptr inbounds %struct.nct6775_data, %struct.nct6775_data* %0, i32 0, i32 78
  %33 = load i16, i16* %have_temp_fixed, align 4, !tbaa !87
  %conv117 = zext i16 %33 to i32
  %shl118 = shl i32 1, %i.2
  %and119 = and i32 %conv117, %shl118
  %tobool120 = icmp ne i32 %and119, 0
  br i1 %tobool120, label %if.end122, label %for.inc129

if.end122:                                        ; preds = %for.end116
  %REG_TEMP_OFFSET = getelementptr inbounds %struct.nct6775_data, %struct.nct6775_data* %0, i32 0, i32 34
  %34 = load i16*, i16** %REG_TEMP_OFFSET, align 8, !tbaa !79
  %idxprom123 = sext i32 %i.2 to i64
  %arrayidx124 = getelementptr inbounds i16, i16* %34, i64 %idxprom123
  %35 = load i16, i16* %arrayidx124, align 2, !tbaa !13
  %call125 = call zeroext i16 @nct6775_read_value(%struct.nct6775_data* %0, i16 zeroext %35)
  %conv126 = trunc i16 %call125 to i8
  %temp_offset = getelementptr inbounds %struct.nct6775_data, %struct.nct6775_data* %0, i32 0, i32 54
  %idxprom127 = sext i32 %i.2 to i64
  %arrayidx128 = getelementptr inbounds [6 x i8], [6 x i8]* %temp_offset, i64 0, i64 %idxprom127
  store i8 %conv126, i8* %arrayidx128, align 1, !tbaa !88
  br label %for.inc129

for.inc129:                                       ; preds = %for.end116, %for.body85, %if.end122
  %inc130 = add nsw i32 %i.2, 1
  br label %for.cond82

for.end131:                                       ; preds = %for.cond82
  %alarms = getelementptr inbounds %struct.nct6775_data, %struct.nct6775_data* %0, i32 0, i32 56
  store i64 0, i64* %alarms, align 8, !tbaa !107
  br label %for.cond132

for.cond132:                                      ; preds = %cleanup150, %for.end131
  %i.3 = phi i32 [ 0, %for.end131 ], [ %inc154, %cleanup150 ]
  %cmp133 = icmp slt i32 %i.3, 4
  br i1 %cmp133, label %for.body135, label %for.end155

for.body135:                                      ; preds = %for.cond132
  %REG_ALARM = getelementptr inbounds %struct.nct6775_data, %struct.nct6775_data* %0, i32 0, i32 35
  %36 = load i16*, i16** %REG_ALARM, align 8, !tbaa !83
  %idxprom136 = sext i32 %i.3 to i64
  %arrayidx137 = getelementptr inbounds i16, i16* %36, i64 %idxprom136
  %37 = load i16, i16* %arrayidx137, align 2, !tbaa !13
  %tobool138 = icmp ne i16 %37, 0
  br i1 %tobool138, label %if.end140, label %cleanup150

if.end140:                                        ; preds = %for.body135
  %REG_ALARM141 = getelementptr inbounds %struct.nct6775_data, %struct.nct6775_data* %0, i32 0, i32 35
  %38 = load i16*, i16** %REG_ALARM141, align 8, !tbaa !83
  %idxprom142 = sext i32 %i.3 to i64
  %arrayidx143 = getelementptr inbounds i16, i16* %38, i64 %idxprom142
  %39 = load i16, i16* %arrayidx143, align 2, !tbaa !13
  %call144 = call zeroext i16 @nct6775_read_value(%struct.nct6775_data* %0, i16 zeroext %39)
  %conv145 = trunc i16 %call144 to i8
  %conv146 = zext i8 %conv145 to i64
  %shl147 = shl i32 %i.3, 3
  %sh_prom = zext i32 %shl147 to i64
  %shl148 = shl i64 %conv146, %sh_prom
  %alarms149 = getelementptr inbounds %struct.nct6775_data, %struct.nct6775_data* %0, i32 0, i32 56
  %40 = load i64, i64* %alarms149, align 8, !tbaa !107
  %or = or i64 %40, %shl148
  store i64 %or, i64* %alarms149, align 8, !tbaa !107
  br label %cleanup150

cleanup150:                                       ; preds = %for.body135, %if.end140
  %cleanup.dest.slot.1 = phi i32 [ 0, %if.end140 ], [ 16, %for.body135 ]
  %switch = icmp ult i32 %cleanup.dest.slot.1, 1
  %inc154 = add nsw i32 %i.3, 1
  br label %for.cond132

for.end155:                                       ; preds = %for.cond132
  %41 = load volatile i64, i64* @jiffies, align 8, !tbaa !23
  %last_updated156 = getelementptr inbounds %struct.nct6775_data, %struct.nct6775_data* %0, i32 0, i32 40
  store i64 %41, i64* %last_updated156, align 8, !tbaa !105
  %valid157 = getelementptr inbounds %struct.nct6775_data, %struct.nct6775_data* %0, i32 0, i32 39
  store i8 1, i8* %valid157, align 8, !tbaa !106
  br label %if.end158

if.end158:                                        ; preds = %for.end155, %lor.lhs.false
  %update_lock159 = getelementptr inbounds %struct.nct6775_data, %struct.nct6775_data* %0, i32 0, i32 38
  call void @mutex_unlock(%struct.mutex* %update_lock159)
  ret %struct.nct6775_data* %0
}

declare void @mutex_lock(%struct.mutex*) #2

; Function Attrs: nounwind uwtable
define internal void @nct6775_select_fan_div(%struct.device* %dev, %struct.nct6775_data* %data, i32 %nr, i16 zeroext %reg) #1 {
entry:
  %fan_div1 = getelementptr inbounds %struct.nct6775_data, %struct.nct6775_data* %data, i32 0, i32 47
  %idxprom = sext i32 %nr to i64
  %arrayidx = getelementptr inbounds [5 x i8], [5 x i8]* %fan_div1, i64 0, i64 %idxprom
  %0 = load i8, i8* %arrayidx, align 1, !tbaa !88
  %has_fan_div = getelementptr inbounds %struct.nct6775_data, %struct.nct6775_data* %data, i32 0, i32 51
  %1 = load i8, i8* %has_fan_div, align 1, !tbaa !52, !range !101
  %tobool = trunc i8 %1 to i1
  br i1 %tobool, label %if.end, label %cleanup.cont

if.end:                                           ; preds = %entry
  %conv = zext i16 %reg to i32
  %cmp = icmp eq i32 %conv, 0
  %conv3 = zext i8 %0 to i32
  %cmp4 = icmp slt i32 %conv3, 7
  %or.cond = and i1 %cmp, %cmp4
  br i1 %or.cond, label %if.then6, label %if.else

if.then6:                                         ; preds = %if.end
  %inc = add i8 %0, 1
  br label %if.end20

if.else:                                          ; preds = %if.end
  %conv7 = zext i16 %reg to i32
  %cmp8 = icmp ne i32 %conv7, 0
  %conv11 = zext i16 %reg to i32
  %cmp12 = icmp slt i32 %conv11, 48
  %or.cond1 = and i1 %cmp8, %cmp12
  %conv15 = zext i8 %0 to i32
  %cmp16 = icmp sgt i32 %conv15, 0
  %or.cond2 = and i1 %or.cond1, %cmp16
  %dec = add i8 %0, -1
  %fan_div.0 = select i1 %or.cond2, i8 %dec, i8 %0
  br label %if.end20

if.end20:                                         ; preds = %if.else, %if.then6
  %fan_div.1 = phi i8 [ %inc, %if.then6 ], [ %fan_div.0, %if.else ]
  %conv21 = zext i8 %fan_div.1 to i32
  %fan_div22 = getelementptr inbounds %struct.nct6775_data, %struct.nct6775_data* %data, i32 0, i32 47
  %idxprom23 = sext i32 %nr to i64
  %arrayidx24 = getelementptr inbounds [5 x i8], [5 x i8]* %fan_div22, i64 0, i64 %idxprom23
  %2 = load i8, i8* %arrayidx24, align 1, !tbaa !88
  %conv25 = zext i8 %2 to i32
  %cmp26 = icmp ne i32 %conv21, %conv25
  br i1 %cmp26, label %if.then28, label %cleanup.cont

if.then28:                                        ; preds = %if.end20
  %has_fan_min = getelementptr inbounds %struct.nct6775_data, %struct.nct6775_data* %data, i32 0, i32 50
  %3 = load i8, i8* %has_fan_min, align 2, !tbaa !99
  %conv29 = zext i8 %3 to i32
  %shl = shl i32 1, %nr
  %and = and i32 %conv29, %shl
  %tobool30 = icmp ne i32 %and, 0
  br i1 %tobool30, label %if.then31, label %if.end83

if.then31:                                        ; preds = %if.then28
  %fan_min32 = getelementptr inbounds %struct.nct6775_data, %struct.nct6775_data* %data, i32 0, i32 45
  %idxprom33 = sext i32 %nr to i64
  %arrayidx34 = getelementptr inbounds [5 x i16], [5 x i16]* %fan_min32, i64 0, i64 %idxprom33
  %4 = load i16, i16* %arrayidx34, align 2, !tbaa !13
  %conv35 = zext i8 %fan_div.1 to i32
  %fan_div36 = getelementptr inbounds %struct.nct6775_data, %struct.nct6775_data* %data, i32 0, i32 47
  %idxprom37 = sext i32 %nr to i64
  %arrayidx38 = getelementptr inbounds [5 x i8], [5 x i8]* %fan_div36, i64 0, i64 %idxprom37
  %5 = load i8, i8* %arrayidx38, align 1, !tbaa !88
  %conv39 = zext i8 %5 to i32
  %cmp40 = icmp sgt i32 %conv35, %conv39
  %conv43 = zext i16 %4 to i32
  %cmp44 = icmp ne i32 %conv43, 255
  br i1 %cmp40, label %if.then42, label %if.else54

if.then42:                                        ; preds = %if.then31
  %conv47 = zext i16 %4 to i32
  %cmp48 = icmp sgt i32 %conv47, 1
  %or.cond3 = and i1 %cmp44, %cmp48
  %conv51 = zext i16 %4 to i32
  %shr = ashr i32 %conv51, 1
  %conv52 = trunc i32 %shr to i16
  %fan_min.0 = select i1 %or.cond3, i16 %conv52, i16 %4
  br label %if.end68

if.else54:                                        ; preds = %if.then31
  br i1 %cmp44, label %if.then58, label %if.end68

if.then58:                                        ; preds = %if.else54
  %conv59 = zext i16 %4 to i32
  %shl60 = shl i32 %conv59, 1
  %conv61 = trunc i32 %shl60 to i16
  %conv62 = zext i16 %conv61 to i32
  %cmp63 = icmp sgt i32 %conv62, 254
  %.conv61 = select i1 %cmp63, i16 254, i16 %conv61
  br label %if.end68

if.end68:                                         ; preds = %if.else54, %if.then58, %if.then42
  %fan_min.3 = phi i16 [ %fan_min.0, %if.then42 ], [ %.conv61, %if.then58 ], [ %4, %if.else54 ]
  %conv69 = zext i16 %fan_min.3 to i32
  %fan_min70 = getelementptr inbounds %struct.nct6775_data, %struct.nct6775_data* %data, i32 0, i32 45
  %idxprom71 = sext i32 %nr to i64
  %arrayidx72 = getelementptr inbounds [5 x i16], [5 x i16]* %fan_min70, i64 0, i64 %idxprom71
  %6 = load i16, i16* %arrayidx72, align 2, !tbaa !13
  %conv73 = zext i16 %6 to i32
  %cmp74 = icmp ne i32 %conv69, %conv73
  br i1 %cmp74, label %if.then76, label %if.end83

if.then76:                                        ; preds = %if.end68
  %fan_min77 = getelementptr inbounds %struct.nct6775_data, %struct.nct6775_data* %data, i32 0, i32 45
  %idxprom78 = sext i32 %nr to i64
  %arrayidx79 = getelementptr inbounds [5 x i16], [5 x i16]* %fan_min77, i64 0, i64 %idxprom78
  store i16 %fan_min.3, i16* %arrayidx79, align 2, !tbaa !13
  %REG_FAN_MIN = getelementptr inbounds %struct.nct6775_data, %struct.nct6775_data* %data, i32 0, i32 18
  %7 = load i16*, i16** %REG_FAN_MIN, align 8, !tbaa !69
  %idxprom80 = sext i32 %nr to i64
  %arrayidx81 = getelementptr inbounds i16, i16* %7, i64 %idxprom80
  %8 = load i16, i16* %arrayidx81, align 2, !tbaa !13
  %call = call i32 @nct6775_write_value(%struct.nct6775_data* %data, i16 zeroext %8, i16 zeroext %fan_min.3)
  br label %if.end83

if.end83:                                         ; preds = %if.end68, %if.then76, %if.then28
  %fan_div84 = getelementptr inbounds %struct.nct6775_data, %struct.nct6775_data* %data, i32 0, i32 47
  %idxprom85 = sext i32 %nr to i64
  %arrayidx86 = getelementptr inbounds [5 x i8], [5 x i8]* %fan_div84, i64 0, i64 %idxprom85
  store i8 %fan_div.1, i8* %arrayidx86, align 1, !tbaa !88
  call void @nct6775_write_fan_div_common(%struct.nct6775_data* %data, i32 %nr)
  br label %cleanup.cont

cleanup.cont:                                     ; preds = %entry, %if.end83, %if.end20
  ret void
}

; Function Attrs: nounwind uwtable
define internal void @nct6775_update_pwm(%struct.device* %dev) #1 {
entry:
  %call = call i8* @dev_get_drvdata(%struct.device* %dev)
  %0 = bitcast i8* %call to %struct.nct6775_data*
  br label %for.cond

for.cond:                                         ; preds = %for.inc167, %entry
  %i.0 = phi i32 [ 0, %entry ], [ %inc168, %for.inc167 ]
  %pwm_num = getelementptr inbounds %struct.nct6775_data, %struct.nct6775_data* %0, i32 0, i32 57
  %1 = load i8, i8* %pwm_num, align 8, !tbaa !50
  %conv = zext i8 %1 to i32
  %cmp = icmp slt i32 %i.0, %conv
  br i1 %cmp, label %for.body, label %for.end169

for.body:                                         ; preds = %for.cond
  %has_pwm = getelementptr inbounds %struct.nct6775_data, %struct.nct6775_data* %0, i32 0, i32 48
  %2 = load i8, i8* %has_pwm, align 8, !tbaa !92
  %conv2 = zext i8 %2 to i32
  %shl = shl i32 1, %i.0
  %and = and i32 %conv2, %shl
  %tobool = icmp ne i32 %and, 0
  br i1 %tobool, label %if.end, label %for.inc167

if.end:                                           ; preds = %for.body
  %REG_PWM_MODE = getelementptr inbounds %struct.nct6775_data, %struct.nct6775_data* %0, i32 0, i32 22
  %3 = load i8*, i8** %REG_PWM_MODE, align 8, !tbaa !73
  %idxprom = sext i32 %i.0 to i64
  %arrayidx = getelementptr inbounds i8, i8* %3, i64 %idxprom
  %4 = load i8, i8* %arrayidx, align 1, !tbaa !88
  %conv3 = zext i8 %4 to i32
  %tobool4 = icmp ne i32 %conv3, 0
  br i1 %tobool4, label %land.rhs, label %land.end

land.rhs:                                         ; preds = %if.end
  %REG_PWM_MODE5 = getelementptr inbounds %struct.nct6775_data, %struct.nct6775_data* %0, i32 0, i32 22
  %5 = load i8*, i8** %REG_PWM_MODE5, align 8, !tbaa !73
  %idxprom6 = sext i32 %i.0 to i64
  %arrayidx7 = getelementptr inbounds i8, i8* %5, i64 %idxprom6
  %6 = load i8, i8* %arrayidx7, align 1, !tbaa !88
  %conv8 = zext i8 %6 to i16
  %call9 = call zeroext i16 @nct6775_read_value(%struct.nct6775_data* %0, i16 zeroext %conv8)
  %conv10 = zext i16 %call9 to i32
  %PWM_MODE_MASK = getelementptr inbounds %struct.nct6775_data, %struct.nct6775_data* %0, i32 0, i32 23
  %7 = load i8*, i8** %PWM_MODE_MASK, align 8, !tbaa !74
  %idxprom11 = sext i32 %i.0 to i64
  %arrayidx12 = getelementptr inbounds i8, i8* %7, i64 %idxprom11
  %8 = load i8, i8* %arrayidx12, align 1, !tbaa !88
  %conv13 = zext i8 %8 to i32
  %and14 = and i32 %conv10, %conv13
  %tobool15 = icmp ne i32 %and14, 0
  br label %land.end

land.end:                                         ; preds = %land.rhs, %if.end
  %9 = phi i1 [ false, %if.end ], [ %tobool15, %land.rhs ]
  %frombool = zext i1 %9 to i8
  %tobool16 = trunc i8 %frombool to i1
  %conv17 = zext i1 %tobool16 to i8
  %pwm_mode = getelementptr inbounds %struct.nct6775_data, %struct.nct6775_data* %0, i32 0, i32 58
  %idxprom18 = sext i32 %i.0 to i64
  %arrayidx19 = getelementptr inbounds [5 x i8], [5 x i8]* %pwm_mode, i64 0, i64 %idxprom18
  store i8 %conv17, i8* %arrayidx19, align 1, !tbaa !88
  %REG_FAN_MODE = getelementptr inbounds %struct.nct6775_data, %struct.nct6775_data* %0, i32 0, i32 17
  %10 = load i16*, i16** %REG_FAN_MODE, align 8, !tbaa !68
  %idxprom20 = sext i32 %i.0 to i64
  %arrayidx21 = getelementptr inbounds i16, i16* %10, i64 %idxprom20
  %11 = load i16, i16* %arrayidx21, align 2, !tbaa !13
  %call22 = call zeroext i16 @nct6775_read_value(%struct.nct6775_data* %0, i16 zeroext %11)
  %conv23 = zext i16 %call22 to i32
  br label %for.cond24

for.cond24:                                       ; preds = %for.inc, %land.end
  %j.0 = phi i32 [ 0, %land.end ], [ %inc, %for.inc ]
  %conv25 = sext i32 %j.0 to i64
  %cmp26 = icmp ult i64 %conv25, 7
  br i1 %cmp26, label %for.body28, label %for.end

for.body28:                                       ; preds = %for.cond24
  %REG_PWM = getelementptr inbounds %struct.nct6775_data, %struct.nct6775_data* %0, i32 0, i32 24
  %idxprom29 = sext i32 %j.0 to i64
  %arrayidx30 = getelementptr inbounds [7 x i16*], [7 x i16*]* %REG_PWM, i64 0, i64 %idxprom29
  %12 = load i16*, i16** %arrayidx30, align 8, !tbaa !12
  %tobool31 = icmp ne i16* %12, null
  br i1 %tobool31, label %land.lhs.true, label %for.inc

land.lhs.true:                                    ; preds = %for.body28
  %REG_PWM32 = getelementptr inbounds %struct.nct6775_data, %struct.nct6775_data* %0, i32 0, i32 24
  %idxprom33 = sext i32 %j.0 to i64
  %arrayidx34 = getelementptr inbounds [7 x i16*], [7 x i16*]* %REG_PWM32, i64 0, i64 %idxprom33
  %13 = load i16*, i16** %arrayidx34, align 8, !tbaa !12
  %idxprom35 = sext i32 %i.0 to i64
  %arrayidx36 = getelementptr inbounds i16, i16* %13, i64 %idxprom35
  %14 = load i16, i16* %arrayidx36, align 2, !tbaa !13
  %conv37 = zext i16 %14 to i32
  %tobool38 = icmp ne i32 %conv37, 0
  br i1 %tobool38, label %if.then39, label %for.inc

if.then39:                                        ; preds = %land.lhs.true
  %REG_PWM40 = getelementptr inbounds %struct.nct6775_data, %struct.nct6775_data* %0, i32 0, i32 24
  %idxprom41 = sext i32 %j.0 to i64
  %arrayidx42 = getelementptr inbounds [7 x i16*], [7 x i16*]* %REG_PWM40, i64 0, i64 %idxprom41
  %15 = load i16*, i16** %arrayidx42, align 8, !tbaa !12
  %idxprom43 = sext i32 %i.0 to i64
  %arrayidx44 = getelementptr inbounds i16, i16* %15, i64 %idxprom43
  %16 = load i16, i16* %arrayidx44, align 2, !tbaa !13
  %call45 = call zeroext i16 @nct6775_read_value(%struct.nct6775_data* %0, i16 zeroext %16)
  %conv46 = trunc i16 %call45 to i8
  %pwm = getelementptr inbounds %struct.nct6775_data, %struct.nct6775_data* %0, i32 0, i32 60
  %idxprom47 = sext i32 %j.0 to i64
  %arrayidx48 = getelementptr inbounds [7 x [5 x i8]], [7 x [5 x i8]]* %pwm, i64 0, i64 %idxprom47
  %idxprom49 = sext i32 %i.0 to i64
  %arrayidx50 = getelementptr inbounds [5 x i8], [5 x i8]* %arrayidx48, i64 0, i64 %idxprom49
  store i8 %conv46, i8* %arrayidx50, align 1, !tbaa !88
  br label %for.inc

for.inc:                                          ; preds = %for.body28, %land.lhs.true, %if.then39
  %inc = add nsw i32 %j.0, 1
  br label %for.cond24

for.end:                                          ; preds = %for.cond24
  %pwm52 = getelementptr inbounds %struct.nct6775_data, %struct.nct6775_data* %0, i32 0, i32 60
  %arrayidx53 = getelementptr inbounds [7 x [5 x i8]], [7 x [5 x i8]]* %pwm52, i64 0, i64 0
  %idxprom54 = sext i32 %i.0 to i64
  %arrayidx55 = getelementptr inbounds [5 x i8], [5 x i8]* %arrayidx53, i64 0, i64 %idxprom54
  %17 = load i8, i8* %arrayidx55, align 1, !tbaa !88
  %conv56 = zext i8 %17 to i32
  %shr = ashr i32 %conv23, 4
  %and57 = and i32 %shr, 7
  %call58 = call i32 @reg_to_pwm_enable(i32 %conv56, i32 %and57)
  %pwm_enable = getelementptr inbounds %struct.nct6775_data, %struct.nct6775_data* %0, i32 0, i32 59
  %idxprom59 = sext i32 %i.0 to i64
  %arrayidx60 = getelementptr inbounds [5 x i32], [5 x i32]* %pwm_enable, i64 0, i64 %idxprom59
  store i32 %call58, i32* %arrayidx60, align 4, !tbaa !88
  %temp_tolerance = getelementptr inbounds %struct.nct6775_data, %struct.nct6775_data* %0, i32 0, i32 66
  %arrayidx61 = getelementptr inbounds [2 x [5 x i8]], [2 x [5 x i8]]* %temp_tolerance, i64 0, i64 0
  %idxprom62 = sext i32 %i.0 to i64
  %arrayidx63 = getelementptr inbounds [5 x i8], [5 x i8]* %arrayidx61, i64 0, i64 %idxprom62
  %18 = load i8, i8* %arrayidx63, align 1, !tbaa !88
  %tobool64 = icmp ne i8 %18, 0
  br i1 %tobool64, label %lor.lhs.false, label %if.then70

lor.lhs.false:                                    ; preds = %for.end
  %pwm_enable65 = getelementptr inbounds %struct.nct6775_data, %struct.nct6775_data* %0, i32 0, i32 59
  %idxprom66 = sext i32 %i.0 to i64
  %arrayidx67 = getelementptr inbounds [5 x i32], [5 x i32]* %pwm_enable65, i64 0, i64 %idxprom66
  %19 = load i32, i32* %arrayidx67, align 4, !tbaa !88
  %cmp68 = icmp ne i32 %19, 3
  br i1 %cmp68, label %if.then70, label %if.end77

if.then70:                                        ; preds = %lor.lhs.false, %for.end
  %and71 = and i32 %conv23, 15
  %conv72 = trunc i32 %and71 to i8
  %temp_tolerance73 = getelementptr inbounds %struct.nct6775_data, %struct.nct6775_data* %0, i32 0, i32 66
  %arrayidx74 = getelementptr inbounds [2 x [5 x i8]], [2 x [5 x i8]]* %temp_tolerance73, i64 0, i64 0
  %idxprom75 = sext i32 %i.0 to i64
  %arrayidx76 = getelementptr inbounds [5 x i8], [5 x i8]* %arrayidx74, i64 0, i64 %idxprom75
  store i8 %conv72, i8* %arrayidx76, align 1, !tbaa !88
  br label %if.end77

if.end77:                                         ; preds = %if.then70, %lor.lhs.false
  %target_speed_tolerance = getelementptr inbounds %struct.nct6775_data, %struct.nct6775_data* %0, i32 0, i32 64
  %idxprom78 = sext i32 %i.0 to i64
  %arrayidx79 = getelementptr inbounds [5 x i32], [5 x i32]* %target_speed_tolerance, i64 0, i64 %idxprom78
  %20 = load i32, i32* %arrayidx79, align 4, !tbaa !86
  %tobool80 = icmp ne i32 %20, 0
  br i1 %tobool80, label %lor.lhs.false81, label %if.then87

lor.lhs.false81:                                  ; preds = %if.end77
  %pwm_enable82 = getelementptr inbounds %struct.nct6775_data, %struct.nct6775_data* %0, i32 0, i32 59
  %idxprom83 = sext i32 %i.0 to i64
  %arrayidx84 = getelementptr inbounds [5 x i32], [5 x i32]* %pwm_enable82, i64 0, i64 %idxprom83
  %21 = load i32, i32* %arrayidx84, align 4, !tbaa !88
  %cmp85 = icmp eq i32 %21, 3
  br i1 %cmp85, label %if.then87, label %if.end106

if.then87:                                        ; preds = %lor.lhs.false81, %if.end77
  %and88 = and i32 %conv23, 15
  %conv89 = trunc i32 %and88 to i8
  %REG_TOLERANCE_H = getelementptr inbounds %struct.nct6775_data, %struct.nct6775_data* %0, i32 0, i32 21
  %22 = load i16*, i16** %REG_TOLERANCE_H, align 8, !tbaa !71
  %tobool90 = icmp ne i16* %22, null
  br i1 %tobool90, label %if.then91, label %if.end101

if.then91:                                        ; preds = %if.then87
  %REG_TOLERANCE_H92 = getelementptr inbounds %struct.nct6775_data, %struct.nct6775_data* %0, i32 0, i32 21
  %23 = load i16*, i16** %REG_TOLERANCE_H92, align 8, !tbaa !71
  %idxprom93 = sext i32 %i.0 to i64
  %arrayidx94 = getelementptr inbounds i16, i16* %23, i64 %idxprom93
  %24 = load i16, i16* %arrayidx94, align 2, !tbaa !13
  %call95 = call zeroext i16 @nct6775_read_value(%struct.nct6775_data* %0, i16 zeroext %24)
  %conv96 = zext i16 %call95 to i32
  %and97 = and i32 %conv96, 112
  %shr98 = ashr i32 %and97, 1
  %conv99 = zext i8 %conv89 to i32
  %or = or i32 %conv99, %shr98
  %conv100 = trunc i32 %or to i8
  br label %if.end101

if.end101:                                        ; preds = %if.then91, %if.then87
  %t.0 = phi i8 [ %conv100, %if.then91 ], [ %conv89, %if.then87 ]
  %conv102 = zext i8 %t.0 to i32
  %target_speed_tolerance103 = getelementptr inbounds %struct.nct6775_data, %struct.nct6775_data* %0, i32 0, i32 64
  %idxprom104 = sext i32 %i.0 to i64
  %arrayidx105 = getelementptr inbounds [5 x i32], [5 x i32]* %target_speed_tolerance103, i64 0, i64 %idxprom104
  store i32 %conv102, i32* %arrayidx105, align 4, !tbaa !86
  br label %if.end106

if.end106:                                        ; preds = %if.end101, %lor.lhs.false81
  %REG_CRITICAL_TEMP_TOLERANCE = getelementptr inbounds %struct.nct6775_data, %struct.nct6775_data* %0, i32 0, i32 29
  %25 = load i16*, i16** %REG_CRITICAL_TEMP_TOLERANCE, align 8, !tbaa !78
  %idxprom107 = sext i32 %i.0 to i64
  %arrayidx108 = getelementptr inbounds i16, i16* %25, i64 %idxprom107
  %26 = load i16, i16* %arrayidx108, align 2, !tbaa !13
  %call109 = call zeroext i16 @nct6775_read_value(%struct.nct6775_data* %0, i16 zeroext %26)
  %conv110 = trunc i16 %call109 to i8
  %temp_tolerance111 = getelementptr inbounds %struct.nct6775_data, %struct.nct6775_data* %0, i32 0, i32 66
  %arrayidx112 = getelementptr inbounds [2 x [5 x i8]], [2 x [5 x i8]]* %temp_tolerance111, i64 0, i64 1
  %idxprom113 = sext i32 %i.0 to i64
  %arrayidx114 = getelementptr inbounds [5 x i8], [5 x i8]* %arrayidx112, i64 0, i64 %idxprom113
  store i8 %conv110, i8* %arrayidx114, align 1, !tbaa !88
  %REG_TEMP_SEL = getelementptr inbounds %struct.nct6775_data, %struct.nct6775_data* %0, i32 0, i32 31
  %27 = load i16*, i16** %REG_TEMP_SEL, align 8, !tbaa !81
  %idxprom115 = sext i32 %i.0 to i64
  %arrayidx116 = getelementptr inbounds i16, i16* %27, i64 %idxprom115
  %28 = load i16, i16* %arrayidx116, align 2, !tbaa !13
  %call117 = call zeroext i16 @nct6775_read_value(%struct.nct6775_data* %0, i16 zeroext %28)
  %conv118 = zext i16 %call117 to i32
  %and119 = and i32 %conv118, 31
  %conv120 = trunc i32 %and119 to i8
  %pwm_temp_sel = getelementptr inbounds %struct.nct6775_data, %struct.nct6775_data* %0, i32 0, i32 72
  %idxprom121 = sext i32 %i.0 to i64
  %arrayidx122 = getelementptr inbounds [5 x i8], [5 x i8]* %pwm_temp_sel, i64 0, i64 %idxprom121
  store i8 %conv120, i8* %arrayidx122, align 1, !tbaa !88
  %and123 = and i32 %conv118, 128
  %tobool124 = icmp ne i32 %and123, 0
  br i1 %tobool124, label %if.then125, label %if.end130

if.then125:                                       ; preds = %if.end106
  %pwm126 = getelementptr inbounds %struct.nct6775_data, %struct.nct6775_data* %0, i32 0, i32 60
  %arrayidx127 = getelementptr inbounds [7 x [5 x i8]], [7 x [5 x i8]]* %pwm126, i64 0, i64 2
  %idxprom128 = sext i32 %i.0 to i64
  %arrayidx129 = getelementptr inbounds [5 x i8], [5 x i8]* %arrayidx127, i64 0, i64 %idxprom128
  store i8 0, i8* %arrayidx129, align 1, !tbaa !88
  br label %if.end130

if.end130:                                        ; preds = %if.then125, %if.end106
  %REG_WEIGHT_TEMP_SEL = getelementptr inbounds %struct.nct6775_data, %struct.nct6775_data* %0, i32 0, i32 32
  %29 = load i16*, i16** %REG_WEIGHT_TEMP_SEL, align 8, !tbaa !82
  %idxprom131 = sext i32 %i.0 to i64
  %arrayidx132 = getelementptr inbounds i16, i16* %29, i64 %idxprom131
  %30 = load i16, i16* %arrayidx132, align 2, !tbaa !13
  %call133 = call zeroext i16 @nct6775_read_value(%struct.nct6775_data* %0, i16 zeroext %30)
  %conv134 = zext i16 %call133 to i32
  %and135 = and i32 %conv134, 31
  %conv136 = trunc i32 %and135 to i8
  %pwm_weight_temp_sel = getelementptr inbounds %struct.nct6775_data, %struct.nct6775_data* %0, i32 0, i32 73
  %idxprom137 = sext i32 %i.0 to i64
  %arrayidx138 = getelementptr inbounds [5 x i8], [5 x i8]* %pwm_weight_temp_sel, i64 0, i64 %idxprom137
  store i8 %conv136, i8* %arrayidx138, align 1, !tbaa !88
  %cmp139 = icmp ne i32 %j.0, 1
  %and142 = and i32 %conv134, 128
  %tobool143 = icmp ne i32 %and142, 0
  %or.cond = or i1 %cmp139, %tobool143
  br i1 %or.cond, label %if.end148, label %if.then144

if.then144:                                       ; preds = %if.end130
  %pwm_weight_temp_sel145 = getelementptr inbounds %struct.nct6775_data, %struct.nct6775_data* %0, i32 0, i32 73
  %idxprom146 = sext i32 %i.0 to i64
  %arrayidx147 = getelementptr inbounds [5 x i8], [5 x i8]* %pwm_weight_temp_sel145, i64 0, i64 %idxprom146
  store i8 0, i8* %arrayidx147, align 1, !tbaa !88
  br label %if.end148

if.end148:                                        ; preds = %if.end130, %if.then144
  br label %for.cond149

for.cond149:                                      ; preds = %for.body153, %if.end148
  %j.1 = phi i32 [ 0, %if.end148 ], [ %inc165, %for.body153 ]
  %conv150 = sext i32 %j.1 to i64
  %cmp151 = icmp ult i64 %conv150, 3
  br i1 %cmp151, label %for.body153, label %for.inc167

for.body153:                                      ; preds = %for.cond149
  %REG_WEIGHT_TEMP = getelementptr inbounds %struct.nct6775_data, %struct.nct6775_data* %0, i32 0, i32 33
  %idxprom154 = sext i32 %j.1 to i64
  %arrayidx155 = getelementptr inbounds [3 x i16*], [3 x i16*]* %REG_WEIGHT_TEMP, i64 0, i64 %idxprom154
  %31 = load i16*, i16** %arrayidx155, align 8, !tbaa !12
  %idxprom156 = sext i32 %i.0 to i64
  %arrayidx157 = getelementptr inbounds i16, i16* %31, i64 %idxprom156
  %32 = load i16, i16* %arrayidx157, align 2, !tbaa !13
  %call158 = call zeroext i16 @nct6775_read_value(%struct.nct6775_data* %0, i16 zeroext %32)
  %conv159 = trunc i16 %call158 to i8
  %weight_temp = getelementptr inbounds %struct.nct6775_data, %struct.nct6775_data* %0, i32 0, i32 74
  %idxprom160 = sext i32 %j.1 to i64
  %arrayidx161 = getelementptr inbounds [3 x [5 x i8]], [3 x [5 x i8]]* %weight_temp, i64 0, i64 %idxprom160
  %idxprom162 = sext i32 %i.0 to i64
  %arrayidx163 = getelementptr inbounds [5 x i8], [5 x i8]* %arrayidx161, i64 0, i64 %idxprom162
  store i8 %conv159, i8* %arrayidx163, align 1, !tbaa !88
  %inc165 = add nsw i32 %j.1, 1
  br label %for.cond149

for.inc167:                                       ; preds = %for.cond149, %for.body
  %inc168 = add nsw i32 %i.0, 1
  br label %for.cond

for.end169:                                       ; preds = %for.cond
  ret void
}

; Function Attrs: nounwind uwtable
define internal void @nct6775_update_pwm_limits(%struct.device* %dev) #1 {
entry:
  %call = call i8* @dev_get_drvdata(%struct.device* %dev)
  %0 = bitcast i8* %call to %struct.nct6775_data*
  br label %for.cond

for.cond:                                         ; preds = %for.inc147, %entry
  %i.0 = phi i32 [ 0, %entry ], [ %inc148, %for.inc147 ]
  %pwm_num = getelementptr inbounds %struct.nct6775_data, %struct.nct6775_data* %0, i32 0, i32 57
  %1 = load i8, i8* %pwm_num, align 8, !tbaa !50
  %conv = zext i8 %1 to i32
  %cmp = icmp slt i32 %i.0, %conv
  br i1 %cmp, label %for.body, label %for.end149

for.body:                                         ; preds = %for.cond
  %has_pwm = getelementptr inbounds %struct.nct6775_data, %struct.nct6775_data* %0, i32 0, i32 48
  %2 = load i8, i8* %has_pwm, align 8, !tbaa !92
  %conv2 = zext i8 %2 to i32
  %shl = shl i32 1, %i.0
  %and = and i32 %conv2, %shl
  %tobool = icmp ne i32 %and, 0
  br i1 %tobool, label %if.end, label %for.inc147

if.end:                                           ; preds = %for.body
  br label %for.cond3

for.cond3:                                        ; preds = %for.body7, %if.end
  %j.0 = phi i32 [ 0, %if.end ], [ %inc, %for.body7 ]
  %conv4 = sext i32 %j.0 to i64
  %cmp5 = icmp ult i64 %conv4, 3
  br i1 %cmp5, label %for.body7, label %for.end

for.body7:                                        ; preds = %for.cond3
  %REG_FAN_TIME = getelementptr inbounds %struct.nct6775_data, %struct.nct6775_data* %0, i32 0, i32 20
  %idxprom = sext i32 %j.0 to i64
  %arrayidx = getelementptr inbounds [3 x i16*], [3 x i16*]* %REG_FAN_TIME, i64 0, i64 %idxprom
  %3 = load i16*, i16** %arrayidx, align 8, !tbaa !12
  %idxprom8 = sext i32 %i.0 to i64
  %arrayidx9 = getelementptr inbounds i16, i16* %3, i64 %idxprom8
  %4 = load i16, i16* %arrayidx9, align 2, !tbaa !13
  %call10 = call zeroext i16 @nct6775_read_value(%struct.nct6775_data* %0, i16 zeroext %4)
  %conv11 = trunc i16 %call10 to i8
  %fan_time = getelementptr inbounds %struct.nct6775_data, %struct.nct6775_data* %0, i32 0, i32 68
  %idxprom12 = sext i32 %j.0 to i64
  %arrayidx13 = getelementptr inbounds [3 x [5 x i8]], [3 x [5 x i8]]* %fan_time, i64 0, i64 %idxprom12
  %idxprom14 = sext i32 %i.0 to i64
  %arrayidx15 = getelementptr inbounds [5 x i8], [5 x i8]* %arrayidx13, i64 0, i64 %idxprom14
  store i8 %conv11, i8* %arrayidx15, align 1, !tbaa !88
  %inc = add nsw i32 %j.0, 1
  br label %for.cond3

for.end:                                          ; preds = %for.cond3
  %REG_TARGET = getelementptr inbounds %struct.nct6775_data, %struct.nct6775_data* %0, i32 0, i32 15
  %5 = load i16*, i16** %REG_TARGET, align 8, !tbaa !66
  %idxprom16 = sext i32 %i.0 to i64
  %arrayidx17 = getelementptr inbounds i16, i16* %5, i64 %idxprom16
  %6 = load i16, i16* %arrayidx17, align 2, !tbaa !13
  %call18 = call zeroext i16 @nct6775_read_value(%struct.nct6775_data* %0, i16 zeroext %6)
  %target_temp = getelementptr inbounds %struct.nct6775_data, %struct.nct6775_data* %0, i32 0, i32 61
  %idxprom19 = sext i32 %i.0 to i64
  %arrayidx20 = getelementptr inbounds [5 x i8], [5 x i8]* %target_temp, i64 0, i64 %idxprom19
  %7 = load i8, i8* %arrayidx20, align 1, !tbaa !88
  %tobool21 = icmp ne i8 %7, 0
  br i1 %tobool21, label %lor.lhs.false, label %if.then26

lor.lhs.false:                                    ; preds = %for.end
  %pwm_enable = getelementptr inbounds %struct.nct6775_data, %struct.nct6775_data* %0, i32 0, i32 59
  %idxprom22 = sext i32 %i.0 to i64
  %arrayidx23 = getelementptr inbounds [5 x i32], [5 x i32]* %pwm_enable, i64 0, i64 %idxprom22
  %8 = load i32, i32* %arrayidx23, align 4, !tbaa !88
  %cmp24 = icmp eq i32 %8, 2
  br i1 %cmp24, label %if.then26, label %if.end34

if.then26:                                        ; preds = %lor.lhs.false, %for.end
  %conv27 = zext i16 %call18 to i32
  %target_temp_mask = getelementptr inbounds %struct.nct6775_data, %struct.nct6775_data* %0, i32 0, i32 62
  %9 = load i8, i8* %target_temp_mask, align 4, !tbaa !57
  %conv28 = zext i8 %9 to i32
  %and29 = and i32 %conv27, %conv28
  %conv30 = trunc i32 %and29 to i8
  %target_temp31 = getelementptr inbounds %struct.nct6775_data, %struct.nct6775_data* %0, i32 0, i32 61
  %idxprom32 = sext i32 %i.0 to i64
  %arrayidx33 = getelementptr inbounds [5 x i8], [5 x i8]* %target_temp31, i64 0, i64 %idxprom32
  store i8 %conv30, i8* %arrayidx33, align 1, !tbaa !88
  br label %if.end34

if.end34:                                         ; preds = %if.then26, %lor.lhs.false
  %target_speed = getelementptr inbounds %struct.nct6775_data, %struct.nct6775_data* %0, i32 0, i32 63
  %idxprom35 = sext i32 %i.0 to i64
  %arrayidx36 = getelementptr inbounds [5 x i32], [5 x i32]* %target_speed, i64 0, i64 %idxprom35
  %10 = load i32, i32* %arrayidx36, align 4, !tbaa !86
  %tobool37 = icmp ne i32 %10, 0
  br i1 %tobool37, label %lor.lhs.false38, label %if.then44

lor.lhs.false38:                                  ; preds = %if.end34
  %pwm_enable39 = getelementptr inbounds %struct.nct6775_data, %struct.nct6775_data* %0, i32 0, i32 59
  %idxprom40 = sext i32 %i.0 to i64
  %arrayidx41 = getelementptr inbounds [5 x i32], [5 x i32]* %pwm_enable39, i64 0, i64 %idxprom40
  %11 = load i32, i32* %arrayidx41, align 4, !tbaa !88
  %cmp42 = icmp eq i32 %11, 3
  br i1 %cmp42, label %if.then44, label %if.end61

if.then44:                                        ; preds = %lor.lhs.false38, %if.end34
  %REG_TOLERANCE_H = getelementptr inbounds %struct.nct6775_data, %struct.nct6775_data* %0, i32 0, i32 21
  %12 = load i16*, i16** %REG_TOLERANCE_H, align 8, !tbaa !71
  %tobool45 = icmp ne i16* %12, null
  br i1 %tobool45, label %if.then46, label %if.end56

if.then46:                                        ; preds = %if.then44
  %REG_TOLERANCE_H47 = getelementptr inbounds %struct.nct6775_data, %struct.nct6775_data* %0, i32 0, i32 21
  %13 = load i16*, i16** %REG_TOLERANCE_H47, align 8, !tbaa !71
  %idxprom48 = sext i32 %i.0 to i64
  %arrayidx49 = getelementptr inbounds i16, i16* %13, i64 %idxprom48
  %14 = load i16, i16* %arrayidx49, align 2, !tbaa !13
  %call50 = call zeroext i16 @nct6775_read_value(%struct.nct6775_data* %0, i16 zeroext %14)
  %conv51 = zext i16 %call50 to i32
  %and52 = and i32 %conv51, 15
  %shl53 = shl i32 %and52, 8
  %conv54 = zext i16 %call18 to i32
  %or = or i32 %conv54, %shl53
  %conv55 = trunc i32 %or to i16
  br label %if.end56

if.end56:                                         ; preds = %if.then46, %if.then44
  %reg_t.0 = phi i16 [ %conv55, %if.then46 ], [ %call18, %if.then44 ]
  %conv57 = zext i16 %reg_t.0 to i32
  %target_speed58 = getelementptr inbounds %struct.nct6775_data, %struct.nct6775_data* %0, i32 0, i32 63
  %idxprom59 = sext i32 %i.0 to i64
  %arrayidx60 = getelementptr inbounds [5 x i32], [5 x i32]* %target_speed58, i64 0, i64 %idxprom59
  store i32 %conv57, i32* %arrayidx60, align 4, !tbaa !86
  br label %if.end61

if.end61:                                         ; preds = %if.end56, %lor.lhs.false38
  br label %for.cond62

for.cond62:                                       ; preds = %for.body65, %if.end61
  %j.1 = phi i32 [ 0, %if.end61 ], [ %inc88, %for.body65 ]
  %auto_pwm_num = getelementptr inbounds %struct.nct6775_data, %struct.nct6775_data* %0, i32 0, i32 69
  %15 = load i32, i32* %auto_pwm_num, align 4, !tbaa !51
  %cmp63 = icmp slt i32 %j.1, %15
  br i1 %cmp63, label %for.body65, label %for.end89

for.body65:                                       ; preds = %for.cond62
  %REG_AUTO_PWM = getelementptr inbounds %struct.nct6775_data, %struct.nct6775_data* %0, i32 0, i32 27
  %16 = load i16*, i16** %REG_AUTO_PWM, align 8, !tbaa !76
  %idxprom66 = sext i32 %i.0 to i64
  %arrayidx67 = getelementptr inbounds i16, i16* %16, i64 %idxprom66
  %17 = load i16, i16* %arrayidx67, align 2, !tbaa !13
  %conv68 = zext i16 %17 to i32
  %add = add nsw i32 %conv68, %j.1
  %conv69 = trunc i32 %add to i16
  %call70 = call zeroext i16 @nct6775_read_value(%struct.nct6775_data* %0, i16 zeroext %conv69)
  %conv71 = trunc i16 %call70 to i8
  %auto_pwm = getelementptr inbounds %struct.nct6775_data, %struct.nct6775_data* %0, i32 0, i32 70
  %idxprom72 = sext i32 %i.0 to i64
  %arrayidx73 = getelementptr inbounds [5 x [7 x i8]], [5 x [7 x i8]]* %auto_pwm, i64 0, i64 %idxprom72
  %idxprom74 = sext i32 %j.1 to i64
  %arrayidx75 = getelementptr inbounds [7 x i8], [7 x i8]* %arrayidx73, i64 0, i64 %idxprom74
  store i8 %conv71, i8* %arrayidx75, align 1, !tbaa !88
  %REG_AUTO_TEMP = getelementptr inbounds %struct.nct6775_data, %struct.nct6775_data* %0, i32 0, i32 26
  %18 = load i16*, i16** %REG_AUTO_TEMP, align 8, !tbaa !75
  %idxprom76 = sext i32 %i.0 to i64
  %arrayidx77 = getelementptr inbounds i16, i16* %18, i64 %idxprom76
  %19 = load i16, i16* %arrayidx77, align 2, !tbaa !13
  %conv78 = zext i16 %19 to i32
  %add79 = add nsw i32 %conv78, %j.1
  %conv80 = trunc i32 %add79 to i16
  %call81 = call zeroext i16 @nct6775_read_value(%struct.nct6775_data* %0, i16 zeroext %conv80)
  %conv82 = trunc i16 %call81 to i8
  %auto_temp = getelementptr inbounds %struct.nct6775_data, %struct.nct6775_data* %0, i32 0, i32 71
  %idxprom83 = sext i32 %i.0 to i64
  %arrayidx84 = getelementptr inbounds [5 x [7 x i8]], [5 x [7 x i8]]* %auto_temp, i64 0, i64 %idxprom83
  %idxprom85 = sext i32 %j.1 to i64
  %arrayidx86 = getelementptr inbounds [7 x i8], [7 x i8]* %arrayidx84, i64 0, i64 %idxprom85
  store i8 %conv82, i8* %arrayidx86, align 1, !tbaa !88
  %inc88 = add nsw i32 %j.1, 1
  br label %for.cond62

for.end89:                                        ; preds = %for.cond62
  %REG_CRITICAL_TEMP = getelementptr inbounds %struct.nct6775_data, %struct.nct6775_data* %0, i32 0, i32 28
  %20 = load i16*, i16** %REG_CRITICAL_TEMP, align 8, !tbaa !77
  %idxprom90 = sext i32 %i.0 to i64
  %arrayidx91 = getelementptr inbounds i16, i16* %20, i64 %idxprom90
  %21 = load i16, i16* %arrayidx91, align 2, !tbaa !13
  %call92 = call zeroext i16 @nct6775_read_value(%struct.nct6775_data* %0, i16 zeroext %21)
  %conv93 = trunc i16 %call92 to i8
  %auto_temp94 = getelementptr inbounds %struct.nct6775_data, %struct.nct6775_data* %0, i32 0, i32 71
  %idxprom95 = sext i32 %i.0 to i64
  %arrayidx96 = getelementptr inbounds [5 x [7 x i8]], [5 x [7 x i8]]* %auto_temp94, i64 0, i64 %idxprom95
  %auto_pwm_num97 = getelementptr inbounds %struct.nct6775_data, %struct.nct6775_data* %0, i32 0, i32 69
  %22 = load i32, i32* %auto_pwm_num97, align 4, !tbaa !51
  %idxprom98 = sext i32 %22 to i64
  %arrayidx99 = getelementptr inbounds [7 x i8], [7 x i8]* %arrayidx96, i64 0, i64 %idxprom98
  store i8 %conv93, i8* %arrayidx99, align 1, !tbaa !88
  %kind = getelementptr inbounds %struct.nct6775_data, %struct.nct6775_data* %0, i32 0, i32 1
  %23 = load i32, i32* %kind, align 4, !tbaa !44
  br label %NodeBlock5

NodeBlock5:                                       ; preds = %for.end89
  %Pivot6 = icmp slt i32 %23, 1
  br i1 %Pivot6, label %LeafBlock, label %NodeBlock

NodeBlock:                                        ; preds = %NodeBlock5
  %Pivot = icmp slt i32 %23, 2
  br i1 %Pivot, label %sw.epilog.sink.split, label %LeafBlock3

LeafBlock3:                                       ; preds = %NodeBlock
  %SwitchLeaf4 = icmp eq i32 %23, 2
  br i1 %SwitchLeaf4, label %sw.bb121, label %NewDefault

LeafBlock:                                        ; preds = %NodeBlock5
  %SwitchLeaf = icmp eq i32 %23, 0
  br i1 %SwitchLeaf, label %sw.bb, label %NewDefault

sw.bb:                                            ; preds = %LeafBlock
  %idxprom100 = sext i32 %i.0 to i64
  %arrayidx101 = getelementptr inbounds [3 x i16], [3 x i16]* @NCT6775_REG_CRITICAL_ENAB, i64 0, i64 %idxprom100
  %24 = load i16, i16* %arrayidx101, align 2, !tbaa !13
  %call102 = call zeroext i16 @nct6775_read_value(%struct.nct6775_data* %0, i16 zeroext %24)
  %conv103 = trunc i16 %call102 to i8
  %conv104 = zext i8 %conv103 to i32
  %and105 = and i32 %conv104, 2
  %tobool106 = icmp ne i32 %and105, 0
  %25 = zext i1 %tobool106 to i64
  %cond = select i1 %tobool106, i32 255, i32 0
  %conv107 = trunc i32 %cond to i8
  br label %sw.epilog.sink.split

sw.bb121:                                         ; preds = %LeafBlock3
  %idxprom122 = sext i32 %i.0 to i64
  %arrayidx123 = getelementptr inbounds [5 x i16], [5 x i16]* @NCT6779_REG_CRITICAL_PWM_ENABLE, i64 0, i64 %idxprom122
  %26 = load i16, i16* %arrayidx123, align 2, !tbaa !13
  %call124 = call zeroext i16 @nct6775_read_value(%struct.nct6775_data* %0, i16 zeroext %26)
  %conv125 = trunc i16 %call124 to i8
  %conv126 = zext i8 %conv125 to i32
  %and127 = and i32 %conv126, 1
  %tobool128 = icmp ne i32 %and127, 0
  br i1 %tobool128, label %if.then129, label %sw.epilog.sink.split

if.then129:                                       ; preds = %sw.bb121
  %idxprom130 = sext i32 %i.0 to i64
  %arrayidx131 = getelementptr inbounds [5 x i16], [5 x i16]* @NCT6779_REG_CRITICAL_PWM, i64 0, i64 %idxprom130
  %27 = load i16, i16* %arrayidx131, align 2, !tbaa !13
  %call132 = call zeroext i16 @nct6775_read_value(%struct.nct6775_data* %0, i16 zeroext %27)
  %conv133 = trunc i16 %call132 to i8
  br label %sw.epilog.sink.split

sw.epilog.sink.split:                             ; preds = %NodeBlock, %if.then129, %sw.bb121, %sw.bb
  %.sink.sink = phi i8 [ %conv107, %sw.bb ], [ -1, %NodeBlock ], [ %conv133, %if.then129 ], [ -1, %sw.bb121 ]
  %auto_pwm140 = getelementptr inbounds %struct.nct6775_data, %struct.nct6775_data* %0, i32 0, i32 70
  %idxprom141 = sext i32 %i.0 to i64
  %arrayidx142 = getelementptr inbounds [5 x [7 x i8]], [5 x [7 x i8]]* %auto_pwm140, i64 0, i64 %idxprom141
  %auto_pwm_num143 = getelementptr inbounds %struct.nct6775_data, %struct.nct6775_data* %0, i32 0, i32 69
  %28 = load i32, i32* %auto_pwm_num143, align 4, !tbaa !51
  %idxprom144 = sext i32 %28 to i64
  %arrayidx145 = getelementptr inbounds [7 x i8], [7 x i8]* %arrayidx142, i64 0, i64 %idxprom144
  store i8 %.sink.sink, i8* %arrayidx145, align 1, !tbaa !88
  br label %for.inc147

NewDefault:                                       ; preds = %LeafBlock3, %LeafBlock
  br label %for.inc147

for.inc147:                                       ; preds = %NewDefault, %sw.epilog.sink.split, %for.body
  %inc148 = add nsw i32 %i.0, 1
  br label %for.cond

for.end149:                                       ; preds = %for.cond
  ret void
}

; Function Attrs: nounwind uwtable
define internal zeroext i16 @nct6775_read_temp(%struct.nct6775_data* %data, i16 zeroext %reg) #1 {
entry:
  %call = call zeroext i16 @nct6775_read_value(%struct.nct6775_data* %data, i16 zeroext %reg)
  %call1 = call zeroext i1 @is_word_sized(%struct.nct6775_data* %data, i16 zeroext %reg)
  %conv = zext i16 %call to i32
  %shl = shl i32 %conv, 8
  %conv2 = trunc i32 %shl to i16
  %res.0 = select i1 %call1, i16 %call, i16 %conv2
  ret i16 %res.0
}

declare void @mutex_unlock(%struct.mutex*) #2

; Function Attrs: nounwind uwtable
define internal i32 @reg_to_pwm_enable(i32 %pwm, i32 %mode) #1 {
entry:
  %cmp = icmp eq i32 %mode, 0
  %cmp1 = icmp eq i32 %pwm, 255
  %or.cond = and i1 %cmp, %cmp1
  %add = add nsw i32 %mode, 1
  %retval.0 = select i1 %or.cond, i32 0, i32 %add
  ret i32 %retval.0
}

; Function Attrs: inlinehint nounwind uwtable
define internal i32 @kstrtoul(i8* %s, i32 %base, i64* %res) #0 {
entry:
  %call = call i32 @kstrtoull(i8* %s, i32 %base, i64* %res)
  ret i32 %call
}

declare i32 @kstrtoull(i8*, i32, i64*) #2

; Function Attrs: nounwind uwtable
define internal i64 @show_pwm_mode(%struct.device* %dev, %struct.device_attribute* %attr, i8* %buf) #1 {
entry:
  %call = call %struct.nct6775_data* @nct6775_update_device(%struct.device* %dev)
  %0 = bitcast %struct.device_attribute* %attr to i8*
  %add.ptr = getelementptr inbounds i8, i8* %0, i64 0
  %1 = bitcast i8* %add.ptr to %struct.sensor_device_attribute*
  %pwm_mode = getelementptr inbounds %struct.nct6775_data, %struct.nct6775_data* %call, i32 0, i32 58
  %index = getelementptr inbounds %struct.sensor_device_attribute, %struct.sensor_device_attribute* %1, i32 0, i32 1
  %2 = load i32, i32* %index, align 8, !tbaa !108
  %idxprom = sext i32 %2 to i64
  %arrayidx = getelementptr inbounds [5 x i8], [5 x i8]* %pwm_mode, i64 0, i64 %idxprom
  %3 = load i8, i8* %arrayidx, align 1, !tbaa !88
  %tobool = icmp ne i8 %3, 0
  %lnot = xor i1 %tobool, true
  %lnot.ext = zext i1 %lnot to i32
  %call1 = call i32 (i8*, i8*, ...) @sprintf(i8* %buf, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.41, i32 0, i32 0), i32 %lnot.ext)
  %conv = sext i32 %call1 to i64
  ret i64 %conv
}

; Function Attrs: nounwind uwtable
define internal i64 @store_pwm_mode(%struct.device* %dev, %struct.device_attribute* %attr, i8* %buf, i64 %count) #1 {
entry:
  %val = alloca i64, align 8
  %call = call i8* @dev_get_drvdata(%struct.device* %dev)
  %0 = bitcast i8* %call to %struct.nct6775_data*
  %1 = bitcast %struct.device_attribute* %attr to i8*
  %add.ptr = getelementptr inbounds i8, i8* %1, i64 0
  %2 = bitcast i8* %add.ptr to %struct.sensor_device_attribute*
  %index = getelementptr inbounds %struct.sensor_device_attribute, %struct.sensor_device_attribute* %2, i32 0, i32 1
  %3 = load i32, i32* %index, align 8, !tbaa !108
  %4 = bitcast i64* %val to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %4) #6
  %call1 = call i32 @kstrtoul(i8* %buf, i32 10, i64* %val)
  %cmp = icmp slt i32 %call1, 0
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %conv = sext i32 %call1 to i64
  br label %cleanup

if.end:                                           ; preds = %entry
  %5 = load i64, i64* %val, align 8, !tbaa !23
  %cmp2 = icmp ugt i64 %5, 1
  br i1 %cmp2, label %cleanup, label %if.end5

if.end5:                                          ; preds = %if.end
  %REG_PWM_MODE = getelementptr inbounds %struct.nct6775_data, %struct.nct6775_data* %0, i32 0, i32 22
  %6 = load i8*, i8** %REG_PWM_MODE, align 8, !tbaa !73
  %idxprom = sext i32 %3 to i64
  %arrayidx = getelementptr inbounds i8, i8* %6, i64 %idxprom
  %7 = load i8, i8* %arrayidx, align 1, !tbaa !88
  %conv6 = zext i8 %7 to i32
  %cmp7 = icmp eq i32 %conv6, 0
  br i1 %cmp7, label %if.then9, label %if.end12

if.then9:                                         ; preds = %if.end5
  %8 = load i64, i64* %val, align 8, !tbaa !23
  %tobool = icmp ne i64 %8, 0
  %.count = select i1 %tobool, i64 -22, i64 %count
  br label %cleanup

if.end12:                                         ; preds = %if.end5
  %update_lock = getelementptr inbounds %struct.nct6775_data, %struct.nct6775_data* %0, i32 0, i32 38
  call void @mutex_lock(%struct.mutex* %update_lock)
  %9 = load i64, i64* %val, align 8, !tbaa !23
  %conv13 = trunc i64 %9 to i8
  %pwm_mode = getelementptr inbounds %struct.nct6775_data, %struct.nct6775_data* %0, i32 0, i32 58
  %idxprom14 = sext i32 %3 to i64
  %arrayidx15 = getelementptr inbounds [5 x i8], [5 x i8]* %pwm_mode, i64 0, i64 %idxprom14
  store i8 %conv13, i8* %arrayidx15, align 1, !tbaa !88
  %REG_PWM_MODE16 = getelementptr inbounds %struct.nct6775_data, %struct.nct6775_data* %0, i32 0, i32 22
  %10 = load i8*, i8** %REG_PWM_MODE16, align 8, !tbaa !73
  %idxprom17 = sext i32 %3 to i64
  %arrayidx18 = getelementptr inbounds i8, i8* %10, i64 %idxprom17
  %11 = load i8, i8* %arrayidx18, align 1, !tbaa !88
  %conv19 = zext i8 %11 to i16
  %call20 = call zeroext i16 @nct6775_read_value(%struct.nct6775_data* %0, i16 zeroext %conv19)
  %conv21 = trunc i16 %call20 to i8
  %PWM_MODE_MASK = getelementptr inbounds %struct.nct6775_data, %struct.nct6775_data* %0, i32 0, i32 23
  %12 = load i8*, i8** %PWM_MODE_MASK, align 8, !tbaa !74
  %idxprom22 = sext i32 %3 to i64
  %arrayidx23 = getelementptr inbounds i8, i8* %12, i64 %idxprom22
  %13 = load i8, i8* %arrayidx23, align 1, !tbaa !88
  %conv24 = zext i8 %13 to i32
  %neg = xor i32 %conv24, -1
  %conv25 = zext i8 %conv21 to i32
  %and = and i32 %conv25, %neg
  %conv26 = trunc i32 %and to i8
  %14 = load i64, i64* %val, align 8, !tbaa !23
  %tobool27 = icmp ne i64 %14, 0
  br i1 %tobool27, label %if.then28, label %if.end35

if.then28:                                        ; preds = %if.end12
  %PWM_MODE_MASK29 = getelementptr inbounds %struct.nct6775_data, %struct.nct6775_data* %0, i32 0, i32 23
  %15 = load i8*, i8** %PWM_MODE_MASK29, align 8, !tbaa !74
  %idxprom30 = sext i32 %3 to i64
  %arrayidx31 = getelementptr inbounds i8, i8* %15, i64 %idxprom30
  %16 = load i8, i8* %arrayidx31, align 1, !tbaa !88
  %conv32 = zext i8 %16 to i32
  %conv33 = zext i8 %conv26 to i32
  %or = or i32 %conv33, %conv32
  %conv34 = trunc i32 %or to i8
  br label %if.end35

if.end35:                                         ; preds = %if.then28, %if.end12
  %reg.0 = phi i8 [ %conv34, %if.then28 ], [ %conv26, %if.end12 ]
  %REG_PWM_MODE36 = getelementptr inbounds %struct.nct6775_data, %struct.nct6775_data* %0, i32 0, i32 22
  %17 = load i8*, i8** %REG_PWM_MODE36, align 8, !tbaa !73
  %idxprom37 = sext i32 %3 to i64
  %arrayidx38 = getelementptr inbounds i8, i8* %17, i64 %idxprom37
  %18 = load i8, i8* %arrayidx38, align 1, !tbaa !88
  %conv39 = zext i8 %18 to i16
  %conv40 = zext i8 %reg.0 to i16
  %call41 = call i32 @nct6775_write_value(%struct.nct6775_data* %0, i16 zeroext %conv39, i16 zeroext %conv40)
  %update_lock42 = getelementptr inbounds %struct.nct6775_data, %struct.nct6775_data* %0, i32 0, i32 38
  call void @mutex_unlock(%struct.mutex* %update_lock42)
  br label %cleanup

cleanup:                                          ; preds = %if.then9, %if.end, %if.end35, %if.then
  %retval.0 = phi i64 [ %conv, %if.then ], [ %count, %if.end35 ], [ -22, %if.end ], [ %.count, %if.then9 ]
  %19 = bitcast i64* %val to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %19) #6
  ret i64 %retval.0
}

; Function Attrs: nounwind uwtable
define internal i64 @show_pwm_enable(%struct.device* %dev, %struct.device_attribute* %attr, i8* %buf) #1 {
entry:
  %call = call %struct.nct6775_data* @nct6775_update_device(%struct.device* %dev)
  %0 = bitcast %struct.device_attribute* %attr to i8*
  %add.ptr = getelementptr inbounds i8, i8* %0, i64 0
  %1 = bitcast i8* %add.ptr to %struct.sensor_device_attribute*
  %pwm_enable = getelementptr inbounds %struct.nct6775_data, %struct.nct6775_data* %call, i32 0, i32 59
  %index = getelementptr inbounds %struct.sensor_device_attribute, %struct.sensor_device_attribute* %1, i32 0, i32 1
  %2 = load i32, i32* %index, align 8, !tbaa !108
  %idxprom = sext i32 %2 to i64
  %arrayidx = getelementptr inbounds [5 x i32], [5 x i32]* %pwm_enable, i64 0, i64 %idxprom
  %3 = load i32, i32* %arrayidx, align 4, !tbaa !88
  %call1 = call i32 (i8*, i8*, ...) @sprintf(i8* %buf, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.41, i32 0, i32 0), i32 %3)
  %conv = sext i32 %call1 to i64
  ret i64 %conv
}

; Function Attrs: nounwind uwtable
define internal i64 @store_pwm_enable(%struct.device* %dev, %struct.device_attribute* %attr, i8* %buf, i64 %count) #1 {
entry:
  %val = alloca i64, align 8
  %call = call i8* @dev_get_drvdata(%struct.device* %dev)
  %0 = bitcast i8* %call to %struct.nct6775_data*
  %1 = bitcast %struct.device_attribute* %attr to i8*
  %add.ptr = getelementptr inbounds i8, i8* %1, i64 0
  %2 = bitcast i8* %add.ptr to %struct.sensor_device_attribute*
  %index = getelementptr inbounds %struct.sensor_device_attribute, %struct.sensor_device_attribute* %2, i32 0, i32 1
  %3 = load i32, i32* %index, align 8, !tbaa !108
  %4 = bitcast i64* %val to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %4) #6
  %call1 = call i32 @kstrtoul(i8* %buf, i32 10, i64* %val)
  %cmp = icmp slt i32 %call1, 0
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %conv = sext i32 %call1 to i64
  br label %cleanup

if.end:                                           ; preds = %entry
  %5 = load i64, i64* %val, align 8, !tbaa !23
  %cmp2 = icmp ugt i64 %5, 5
  br i1 %cmp2, label %cleanup, label %if.end5

if.end5:                                          ; preds = %if.end
  %6 = load i64, i64* %val, align 8, !tbaa !23
  %cmp6 = icmp eq i64 %6, 4
  br i1 %cmp6, label %land.lhs.true, label %if.end11

land.lhs.true:                                    ; preds = %if.end5
  %kind = getelementptr inbounds %struct.nct6775_data, %struct.nct6775_data* %0, i32 0, i32 1
  %7 = load i32, i32* %kind, align 4, !tbaa !44
  %cmp8 = icmp ne i32 %7, 0
  br i1 %cmp8, label %cleanup, label %if.end11

if.end11:                                         ; preds = %land.lhs.true, %if.end5
  %8 = load i64, i64* %val, align 8, !tbaa !23
  %cmp12 = icmp eq i64 %8, 5
  br i1 %cmp12, label %land.lhs.true14, label %if.end19

land.lhs.true14:                                  ; preds = %if.end11
  %call15 = call i32 @check_trip_points(%struct.nct6775_data* %0, i32 %3)
  %tobool = icmp ne i32 %call15, 0
  br i1 %tobool, label %if.then16, label %if.end19

if.then16:                                        ; preds = %land.lhs.true14
  %call17 = call i32 (%struct.device*, i8*, ...) @dev_err(%struct.device* %dev, i8* getelementptr inbounds ([61 x i8], [61 x i8]* @.str.45, i32 0, i32 0))
  %call18 = call i32 (%struct.device*, i8*, ...) @dev_err(%struct.device* %dev, i8* getelementptr inbounds ([34 x i8], [34 x i8]* @.str.46, i32 0, i32 0))
  br label %cleanup

if.end19:                                         ; preds = %land.lhs.true14, %if.end11
  %update_lock = getelementptr inbounds %struct.nct6775_data, %struct.nct6775_data* %0, i32 0, i32 38
  call void @mutex_lock(%struct.mutex* %update_lock)
  %9 = load i64, i64* %val, align 8, !tbaa !23
  %conv20 = trunc i64 %9 to i32
  %pwm_enable = getelementptr inbounds %struct.nct6775_data, %struct.nct6775_data* %0, i32 0, i32 59
  %idxprom = sext i32 %3 to i64
  %arrayidx = getelementptr inbounds [5 x i32], [5 x i32]* %pwm_enable, i64 0, i64 %idxprom
  store i32 %conv20, i32* %arrayidx, align 4, !tbaa !88
  %10 = load i64, i64* %val, align 8, !tbaa !23
  %cmp21 = icmp eq i64 %10, 0
  br i1 %cmp21, label %if.then23, label %if.end31

if.then23:                                        ; preds = %if.end19
  %pwm = getelementptr inbounds %struct.nct6775_data, %struct.nct6775_data* %0, i32 0, i32 60
  %arrayidx24 = getelementptr inbounds [7 x [5 x i8]], [7 x [5 x i8]]* %pwm, i64 0, i64 0
  %idxprom25 = sext i32 %3 to i64
  %arrayidx26 = getelementptr inbounds [5 x i8], [5 x i8]* %arrayidx24, i64 0, i64 %idxprom25
  store i8 -1, i8* %arrayidx26, align 1, !tbaa !88
  %REG_PWM = getelementptr inbounds %struct.nct6775_data, %struct.nct6775_data* %0, i32 0, i32 24
  %arrayidx27 = getelementptr inbounds [7 x i16*], [7 x i16*]* %REG_PWM, i64 0, i64 0
  %11 = load i16*, i16** %arrayidx27, align 8, !tbaa !12
  %idxprom28 = sext i32 %3 to i64
  %arrayidx29 = getelementptr inbounds i16, i16* %11, i64 %idxprom28
  %12 = load i16, i16* %arrayidx29, align 2, !tbaa !13
  %call30 = call i32 @nct6775_write_value(%struct.nct6775_data* %0, i16 zeroext %12, i16 zeroext 255)
  br label %if.end31

if.end31:                                         ; preds = %if.then23, %if.end19
  call void @pwm_update_registers(%struct.nct6775_data* %0, i32 %3)
  %REG_FAN_MODE = getelementptr inbounds %struct.nct6775_data, %struct.nct6775_data* %0, i32 0, i32 17
  %13 = load i16*, i16** %REG_FAN_MODE, align 8, !tbaa !68
  %idxprom32 = sext i32 %3 to i64
  %arrayidx33 = getelementptr inbounds i16, i16* %13, i64 %idxprom32
  %14 = load i16, i16* %arrayidx33, align 2, !tbaa !13
  %call34 = call zeroext i16 @nct6775_read_value(%struct.nct6775_data* %0, i16 zeroext %14)
  %conv35 = zext i16 %call34 to i32
  %and = and i32 %conv35, 15
  %conv36 = trunc i32 %and to i16
  %15 = load i64, i64* %val, align 8, !tbaa !23
  %conv37 = trunc i64 %15 to i32
  %call38 = call i32 @pwm_enable_to_reg(i32 %conv37)
  %shl = shl i32 %call38, 4
  %conv39 = zext i16 %conv36 to i32
  %or = or i32 %conv39, %shl
  %conv40 = trunc i32 %or to i16
  %REG_FAN_MODE41 = getelementptr inbounds %struct.nct6775_data, %struct.nct6775_data* %0, i32 0, i32 17
  %16 = load i16*, i16** %REG_FAN_MODE41, align 8, !tbaa !68
  %idxprom42 = sext i32 %3 to i64
  %arrayidx43 = getelementptr inbounds i16, i16* %16, i64 %idxprom42
  %17 = load i16, i16* %arrayidx43, align 2, !tbaa !13
  %call44 = call i32 @nct6775_write_value(%struct.nct6775_data* %0, i16 zeroext %17, i16 zeroext %conv40)
  %update_lock45 = getelementptr inbounds %struct.nct6775_data, %struct.nct6775_data* %0, i32 0, i32 38
  call void @mutex_unlock(%struct.mutex* %update_lock45)
  br label %cleanup

cleanup:                                          ; preds = %land.lhs.true, %if.end, %if.end31, %if.then16, %if.then
  %retval.0 = phi i64 [ %conv, %if.then ], [ -22, %if.then16 ], [ %count, %if.end31 ], [ -22, %if.end ], [ -22, %land.lhs.true ]
  %18 = bitcast i64* %val to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %18) #6
  ret i64 %retval.0
}

; Function Attrs: nounwind uwtable
define internal i32 @check_trip_points(%struct.nct6775_data* %data, i32 %nr) #1 {
entry:
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %i.0 = phi i32 [ 0, %entry ], [ %inc, %for.inc ]
  %auto_pwm_num = getelementptr inbounds %struct.nct6775_data, %struct.nct6775_data* %data, i32 0, i32 69
  %0 = load i32, i32* %auto_pwm_num, align 4, !tbaa !51
  %sub = sub nsw i32 %0, 1
  %cmp = icmp slt i32 %i.0, %sub
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %auto_temp = getelementptr inbounds %struct.nct6775_data, %struct.nct6775_data* %data, i32 0, i32 71
  %idxprom = sext i32 %nr to i64
  %arrayidx = getelementptr inbounds [5 x [7 x i8]], [5 x [7 x i8]]* %auto_temp, i64 0, i64 %idxprom
  %idxprom1 = sext i32 %i.0 to i64
  %arrayidx2 = getelementptr inbounds [7 x i8], [7 x i8]* %arrayidx, i64 0, i64 %idxprom1
  %1 = load i8, i8* %arrayidx2, align 1, !tbaa !88
  %conv = zext i8 %1 to i32
  %auto_temp3 = getelementptr inbounds %struct.nct6775_data, %struct.nct6775_data* %data, i32 0, i32 71
  %idxprom4 = sext i32 %nr to i64
  %arrayidx5 = getelementptr inbounds [5 x [7 x i8]], [5 x [7 x i8]]* %auto_temp3, i64 0, i64 %idxprom4
  %add = add nsw i32 %i.0, 1
  %idxprom6 = sext i32 %add to i64
  %arrayidx7 = getelementptr inbounds [7 x i8], [7 x i8]* %arrayidx5, i64 0, i64 %idxprom6
  %2 = load i8, i8* %arrayidx7, align 1, !tbaa !88
  %conv8 = zext i8 %2 to i32
  %cmp9 = icmp sgt i32 %conv, %conv8
  br i1 %cmp9, label %cleanup, label %for.inc

for.inc:                                          ; preds = %for.body
  %inc = add nsw i32 %i.0, 1
  br label %for.cond

for.end:                                          ; preds = %for.cond
  br label %for.cond11

for.cond11:                                       ; preds = %for.inc33, %for.end
  %i.1 = phi i32 [ 0, %for.end ], [ %inc34, %for.inc33 ]
  %auto_pwm_num12 = getelementptr inbounds %struct.nct6775_data, %struct.nct6775_data* %data, i32 0, i32 69
  %3 = load i32, i32* %auto_pwm_num12, align 4, !tbaa !51
  %sub13 = sub nsw i32 %3, 1
  %cmp14 = icmp slt i32 %i.1, %sub13
  %auto_pwm = getelementptr inbounds %struct.nct6775_data, %struct.nct6775_data* %data, i32 0, i32 70
  %idxprom17 = sext i32 %nr to i64
  %arrayidx18 = getelementptr inbounds [5 x [7 x i8]], [5 x [7 x i8]]* %auto_pwm, i64 0, i64 %idxprom17
  br i1 %cmp14, label %for.body16, label %for.end35

for.body16:                                       ; preds = %for.cond11
  %idxprom19 = sext i32 %i.1 to i64
  %arrayidx20 = getelementptr inbounds [7 x i8], [7 x i8]* %arrayidx18, i64 0, i64 %idxprom19
  %4 = load i8, i8* %arrayidx20, align 1, !tbaa !88
  %conv21 = zext i8 %4 to i32
  %auto_pwm22 = getelementptr inbounds %struct.nct6775_data, %struct.nct6775_data* %data, i32 0, i32 70
  %idxprom23 = sext i32 %nr to i64
  %arrayidx24 = getelementptr inbounds [5 x [7 x i8]], [5 x [7 x i8]]* %auto_pwm22, i64 0, i64 %idxprom23
  %add25 = add nsw i32 %i.1, 1
  %idxprom26 = sext i32 %add25 to i64
  %arrayidx27 = getelementptr inbounds [7 x i8], [7 x i8]* %arrayidx24, i64 0, i64 %idxprom26
  %5 = load i8, i8* %arrayidx27, align 1, !tbaa !88
  %conv28 = zext i8 %5 to i32
  %cmp29 = icmp sgt i32 %conv21, %conv28
  br i1 %cmp29, label %cleanup, label %for.inc33

for.inc33:                                        ; preds = %for.body16
  %inc34 = add nsw i32 %i.1, 1
  br label %for.cond11

for.end35:                                        ; preds = %for.cond11
  %auto_pwm_num39 = getelementptr inbounds %struct.nct6775_data, %struct.nct6775_data* %data, i32 0, i32 69
  %6 = load i32, i32* %auto_pwm_num39, align 4, !tbaa !51
  %idxprom40 = sext i32 %6 to i64
  %arrayidx41 = getelementptr inbounds [7 x i8], [7 x i8]* %arrayidx18, i64 0, i64 %idxprom40
  %7 = load i8, i8* %arrayidx41, align 1, !tbaa !88
  %tobool = icmp ne i8 %7, 0
  br i1 %tobool, label %if.then42, label %if.end79

if.then42:                                        ; preds = %for.end35
  %auto_temp43 = getelementptr inbounds %struct.nct6775_data, %struct.nct6775_data* %data, i32 0, i32 71
  %idxprom44 = sext i32 %nr to i64
  %arrayidx45 = getelementptr inbounds [5 x [7 x i8]], [5 x [7 x i8]]* %auto_temp43, i64 0, i64 %idxprom44
  %auto_pwm_num46 = getelementptr inbounds %struct.nct6775_data, %struct.nct6775_data* %data, i32 0, i32 69
  %8 = load i32, i32* %auto_pwm_num46, align 4, !tbaa !51
  %sub47 = sub nsw i32 %8, 1
  %idxprom48 = sext i32 %sub47 to i64
  %arrayidx49 = getelementptr inbounds [7 x i8], [7 x i8]* %arrayidx45, i64 0, i64 %idxprom48
  %9 = load i8, i8* %arrayidx49, align 1, !tbaa !88
  %conv50 = zext i8 %9 to i32
  %auto_temp51 = getelementptr inbounds %struct.nct6775_data, %struct.nct6775_data* %data, i32 0, i32 71
  %idxprom52 = sext i32 %nr to i64
  %arrayidx53 = getelementptr inbounds [5 x [7 x i8]], [5 x [7 x i8]]* %auto_temp51, i64 0, i64 %idxprom52
  %auto_pwm_num54 = getelementptr inbounds %struct.nct6775_data, %struct.nct6775_data* %data, i32 0, i32 69
  %10 = load i32, i32* %auto_pwm_num54, align 4, !tbaa !51
  %idxprom55 = sext i32 %10 to i64
  %arrayidx56 = getelementptr inbounds [7 x i8], [7 x i8]* %arrayidx53, i64 0, i64 %idxprom55
  %11 = load i8, i8* %arrayidx56, align 1, !tbaa !88
  %conv57 = zext i8 %11 to i32
  %cmp58 = icmp sgt i32 %conv50, %conv57
  br i1 %cmp58, label %cleanup, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %if.then42
  %auto_pwm60 = getelementptr inbounds %struct.nct6775_data, %struct.nct6775_data* %data, i32 0, i32 70
  %idxprom61 = sext i32 %nr to i64
  %arrayidx62 = getelementptr inbounds [5 x [7 x i8]], [5 x [7 x i8]]* %auto_pwm60, i64 0, i64 %idxprom61
  %auto_pwm_num63 = getelementptr inbounds %struct.nct6775_data, %struct.nct6775_data* %data, i32 0, i32 69
  %12 = load i32, i32* %auto_pwm_num63, align 4, !tbaa !51
  %sub64 = sub nsw i32 %12, 1
  %idxprom65 = sext i32 %sub64 to i64
  %arrayidx66 = getelementptr inbounds [7 x i8], [7 x i8]* %arrayidx62, i64 0, i64 %idxprom65
  %13 = load i8, i8* %arrayidx66, align 1, !tbaa !88
  %conv67 = zext i8 %13 to i32
  %auto_pwm68 = getelementptr inbounds %struct.nct6775_data, %struct.nct6775_data* %data, i32 0, i32 70
  %idxprom69 = sext i32 %nr to i64
  %arrayidx70 = getelementptr inbounds [5 x [7 x i8]], [5 x [7 x i8]]* %auto_pwm68, i64 0, i64 %idxprom69
  %auto_pwm_num71 = getelementptr inbounds %struct.nct6775_data, %struct.nct6775_data* %data, i32 0, i32 69
  %14 = load i32, i32* %auto_pwm_num71, align 4, !tbaa !51
  %idxprom72 = sext i32 %14 to i64
  %arrayidx73 = getelementptr inbounds [7 x i8], [7 x i8]* %arrayidx70, i64 0, i64 %idxprom72
  %15 = load i8, i8* %arrayidx73, align 1, !tbaa !88
  %conv74 = zext i8 %15 to i32
  %cmp75 = icmp sgt i32 %conv67, %conv74
  br i1 %cmp75, label %cleanup, label %if.end79

if.end79:                                         ; preds = %lor.lhs.false, %for.end35
  br label %cleanup

cleanup:                                          ; preds = %if.then42, %lor.lhs.false, %for.body16, %for.body, %if.end79
  %retval.0 = phi i32 [ 0, %if.end79 ], [ -22, %for.body ], [ -22, %for.body16 ], [ -22, %lor.lhs.false ], [ -22, %if.then42 ]
  ret i32 %retval.0
}

declare i32 @dev_err(%struct.device*, i8*, ...) #2

; Function Attrs: nounwind uwtable
define internal void @pwm_update_registers(%struct.nct6775_data* %data, i32 %nr) #1 {
entry:
  %pwm_enable = getelementptr inbounds %struct.nct6775_data, %struct.nct6775_data* %data, i32 0, i32 59
  %idxprom = sext i32 %nr to i64
  %arrayidx = getelementptr inbounds [5 x i32], [5 x i32]* %pwm_enable, i64 0, i64 %idxprom
  %0 = load i32, i32* %arrayidx, align 4, !tbaa !88
  br label %NodeBlock3

NodeBlock3:                                       ; preds = %entry
  %Pivot4 = icmp slt i32 %0, 2
  br i1 %Pivot4, label %LeafBlock, label %NodeBlock

NodeBlock:                                        ; preds = %NodeBlock3
  %Pivot = icmp slt i32 %0, 3
  br i1 %Pivot, label %sw.bb41, label %LeafBlock1

LeafBlock1:                                       ; preds = %NodeBlock
  %SwitchLeaf2 = icmp eq i32 %0, 3
  br i1 %SwitchLeaf2, label %sw.bb1, label %NewDefault

LeafBlock:                                        ; preds = %NodeBlock3
  %SwitchLeaf = icmp ule i32 %0, 1
  br i1 %SwitchLeaf, label %sw.epilog, label %NewDefault

sw.bb1:                                           ; preds = %LeafBlock1
  %REG_FAN_MODE = getelementptr inbounds %struct.nct6775_data, %struct.nct6775_data* %data, i32 0, i32 17
  %1 = load i16*, i16** %REG_FAN_MODE, align 8, !tbaa !68
  %idxprom2 = sext i32 %nr to i64
  %arrayidx3 = getelementptr inbounds i16, i16* %1, i64 %idxprom2
  %2 = load i16, i16* %arrayidx3, align 2, !tbaa !13
  %call = call zeroext i16 @nct6775_read_value(%struct.nct6775_data* %data, i16 zeroext %2)
  %conv = trunc i16 %call to i8
  %conv4 = zext i8 %conv to i32
  %tolerance_mask = getelementptr inbounds %struct.nct6775_data, %struct.nct6775_data* %data, i32 0, i32 67
  %3 = load i8, i8* %tolerance_mask, align 1, !tbaa !58
  %conv5 = zext i8 %3 to i32
  %neg = xor i32 %conv5, -1
  %and = and i32 %conv4, %neg
  %target_speed_tolerance = getelementptr inbounds %struct.nct6775_data, %struct.nct6775_data* %data, i32 0, i32 64
  %idxprom6 = sext i32 %nr to i64
  %arrayidx7 = getelementptr inbounds [5 x i32], [5 x i32]* %target_speed_tolerance, i64 0, i64 %idxprom6
  %4 = load i32, i32* %arrayidx7, align 4, !tbaa !86
  %tolerance_mask8 = getelementptr inbounds %struct.nct6775_data, %struct.nct6775_data* %data, i32 0, i32 67
  %5 = load i8, i8* %tolerance_mask8, align 1, !tbaa !58
  %conv9 = zext i8 %5 to i32
  %and10 = and i32 %4, %conv9
  %or = or i32 %and, %and10
  %conv11 = trunc i32 %or to i8
  %REG_FAN_MODE12 = getelementptr inbounds %struct.nct6775_data, %struct.nct6775_data* %data, i32 0, i32 17
  %6 = load i16*, i16** %REG_FAN_MODE12, align 8, !tbaa !68
  %idxprom13 = sext i32 %nr to i64
  %arrayidx14 = getelementptr inbounds i16, i16* %6, i64 %idxprom13
  %7 = load i16, i16* %arrayidx14, align 2, !tbaa !13
  %conv15 = zext i8 %conv11 to i16
  %call16 = call i32 @nct6775_write_value(%struct.nct6775_data* %data, i16 zeroext %7, i16 zeroext %conv15)
  %REG_TARGET = getelementptr inbounds %struct.nct6775_data, %struct.nct6775_data* %data, i32 0, i32 15
  %8 = load i16*, i16** %REG_TARGET, align 8, !tbaa !66
  %idxprom17 = sext i32 %nr to i64
  %arrayidx18 = getelementptr inbounds i16, i16* %8, i64 %idxprom17
  %9 = load i16, i16* %arrayidx18, align 2, !tbaa !13
  %target_speed = getelementptr inbounds %struct.nct6775_data, %struct.nct6775_data* %data, i32 0, i32 63
  %idxprom19 = sext i32 %nr to i64
  %arrayidx20 = getelementptr inbounds [5 x i32], [5 x i32]* %target_speed, i64 0, i64 %idxprom19
  %10 = load i32, i32* %arrayidx20, align 4, !tbaa !86
  %and21 = and i32 %10, 255
  %conv22 = trunc i32 %and21 to i16
  %call23 = call i32 @nct6775_write_value(%struct.nct6775_data* %data, i16 zeroext %9, i16 zeroext %conv22)
  %REG_TOLERANCE_H = getelementptr inbounds %struct.nct6775_data, %struct.nct6775_data* %data, i32 0, i32 21
  %11 = load i16*, i16** %REG_TOLERANCE_H, align 8, !tbaa !71
  %tobool = icmp ne i16* %11, null
  br i1 %tobool, label %if.then, label %sw.epilog

if.then:                                          ; preds = %sw.bb1
  %target_speed24 = getelementptr inbounds %struct.nct6775_data, %struct.nct6775_data* %data, i32 0, i32 63
  %idxprom25 = sext i32 %nr to i64
  %arrayidx26 = getelementptr inbounds [5 x i32], [5 x i32]* %target_speed24, i64 0, i64 %idxprom25
  %12 = load i32, i32* %arrayidx26, align 4, !tbaa !86
  %shr = lshr i32 %12, 8
  %and27 = and i32 %shr, 15
  %conv28 = trunc i32 %and27 to i8
  %target_speed_tolerance29 = getelementptr inbounds %struct.nct6775_data, %struct.nct6775_data* %data, i32 0, i32 64
  %idxprom30 = sext i32 %nr to i64
  %arrayidx31 = getelementptr inbounds [5 x i32], [5 x i32]* %target_speed_tolerance29, i64 0, i64 %idxprom30
  %13 = load i32, i32* %arrayidx31, align 4, !tbaa !86
  %and32 = and i32 %13, 56
  %shl = shl i32 %and32, 1
  %conv33 = zext i8 %conv28 to i32
  %or34 = or i32 %conv33, %shl
  %conv35 = trunc i32 %or34 to i8
  %REG_TOLERANCE_H36 = getelementptr inbounds %struct.nct6775_data, %struct.nct6775_data* %data, i32 0, i32 21
  %14 = load i16*, i16** %REG_TOLERANCE_H36, align 8, !tbaa !71
  %idxprom37 = sext i32 %nr to i64
  %arrayidx38 = getelementptr inbounds i16, i16* %14, i64 %idxprom37
  %15 = load i16, i16* %arrayidx38, align 2, !tbaa !13
  %conv39 = zext i8 %conv35 to i16
  %call40 = call i32 @nct6775_write_value(%struct.nct6775_data* %data, i16 zeroext %15, i16 zeroext %conv39)
  br label %sw.epilog

sw.bb41:                                          ; preds = %NodeBlock
  %REG_TARGET42 = getelementptr inbounds %struct.nct6775_data, %struct.nct6775_data* %data, i32 0, i32 15
  %16 = load i16*, i16** %REG_TARGET42, align 8, !tbaa !66
  %idxprom43 = sext i32 %nr to i64
  %arrayidx44 = getelementptr inbounds i16, i16* %16, i64 %idxprom43
  %17 = load i16, i16* %arrayidx44, align 2, !tbaa !13
  %target_temp = getelementptr inbounds %struct.nct6775_data, %struct.nct6775_data* %data, i32 0, i32 61
  %idxprom45 = sext i32 %nr to i64
  %arrayidx46 = getelementptr inbounds [5 x i8], [5 x i8]* %target_temp, i64 0, i64 %idxprom45
  %18 = load i8, i8* %arrayidx46, align 1, !tbaa !88
  %conv47 = zext i8 %18 to i16
  %call48 = call i32 @nct6775_write_value(%struct.nct6775_data* %data, i16 zeroext %17, i16 zeroext %conv47)
  br label %sw.default

NewDefault:                                       ; preds = %LeafBlock1, %LeafBlock
  br label %sw.default

sw.default:                                       ; preds = %NewDefault, %sw.bb41
  %REG_FAN_MODE49 = getelementptr inbounds %struct.nct6775_data, %struct.nct6775_data* %data, i32 0, i32 17
  %19 = load i16*, i16** %REG_FAN_MODE49, align 8, !tbaa !68
  %idxprom50 = sext i32 %nr to i64
  %arrayidx51 = getelementptr inbounds i16, i16* %19, i64 %idxprom50
  %20 = load i16, i16* %arrayidx51, align 2, !tbaa !13
  %call52 = call zeroext i16 @nct6775_read_value(%struct.nct6775_data* %data, i16 zeroext %20)
  %conv53 = trunc i16 %call52 to i8
  %conv54 = zext i8 %conv53 to i32
  %tolerance_mask55 = getelementptr inbounds %struct.nct6775_data, %struct.nct6775_data* %data, i32 0, i32 67
  %21 = load i8, i8* %tolerance_mask55, align 1, !tbaa !58
  %conv56 = zext i8 %21 to i32
  %neg57 = xor i32 %conv56, -1
  %and58 = and i32 %conv54, %neg57
  %temp_tolerance = getelementptr inbounds %struct.nct6775_data, %struct.nct6775_data* %data, i32 0, i32 66
  %arrayidx59 = getelementptr inbounds [2 x [5 x i8]], [2 x [5 x i8]]* %temp_tolerance, i64 0, i64 0
  %idxprom60 = sext i32 %nr to i64
  %arrayidx61 = getelementptr inbounds [5 x i8], [5 x i8]* %arrayidx59, i64 0, i64 %idxprom60
  %22 = load i8, i8* %arrayidx61, align 1, !tbaa !88
  %conv62 = zext i8 %22 to i32
  %or63 = or i32 %and58, %conv62
  %conv64 = trunc i32 %or63 to i8
  %REG_FAN_MODE65 = getelementptr inbounds %struct.nct6775_data, %struct.nct6775_data* %data, i32 0, i32 17
  %23 = load i16*, i16** %REG_FAN_MODE65, align 8, !tbaa !68
  %idxprom66 = sext i32 %nr to i64
  %arrayidx67 = getelementptr inbounds i16, i16* %23, i64 %idxprom66
  %24 = load i16, i16* %arrayidx67, align 2, !tbaa !13
  %conv68 = zext i8 %conv64 to i16
  %call69 = call i32 @nct6775_write_value(%struct.nct6775_data* %data, i16 zeroext %24, i16 zeroext %conv68)
  br label %sw.epilog

sw.epilog:                                        ; preds = %LeafBlock, %sw.bb1, %if.then, %sw.default
  ret void
}

; Function Attrs: nounwind uwtable
define internal i32 @pwm_enable_to_reg(i32 %mode) #1 {
entry:
  %cmp = icmp eq i32 %mode, 0
  %sub = sub i32 %mode, 1
  %retval.0 = select i1 %cmp, i32 0, i32 %sub
  ret i32 %retval.0
}

; Function Attrs: nounwind uwtable
define internal i64 @show_pwm_temp_sel(%struct.device* %dev, %struct.device_attribute* %attr, i8* %buf) #1 {
entry:
  %call = call %struct.nct6775_data* @nct6775_update_device(%struct.device* %dev)
  %0 = bitcast %struct.device_attribute* %attr to i8*
  %add.ptr = getelementptr inbounds i8, i8* %0, i64 0
  %1 = bitcast i8* %add.ptr to %struct.sensor_device_attribute*
  %index1 = getelementptr inbounds %struct.sensor_device_attribute, %struct.sensor_device_attribute* %1, i32 0, i32 1
  %2 = load i32, i32* %index1, align 8, !tbaa !108
  %pwm_temp_sel = getelementptr inbounds %struct.nct6775_data, %struct.nct6775_data* %call, i32 0, i32 72
  %idxprom = sext i32 %2 to i64
  %arrayidx = getelementptr inbounds [5 x i8], [5 x i8]* %pwm_temp_sel, i64 0, i64 %idxprom
  %3 = load i8, i8* %arrayidx, align 1, !tbaa !88
  %conv = zext i8 %3 to i32
  %call2 = call i64 @show_pwm_temp_sel_common(%struct.nct6775_data* %call, i8* %buf, i32 %conv)
  ret i64 %call2
}

; Function Attrs: nounwind uwtable
define internal i64 @store_pwm_temp_sel(%struct.device* %dev, %struct.device_attribute* %attr, i8* %buf, i64 %count) #1 {
entry:
  %val = alloca i64, align 8
  %call = call %struct.nct6775_data* @nct6775_update_device(%struct.device* %dev)
  %0 = bitcast %struct.device_attribute* %attr to i8*
  %add.ptr = getelementptr inbounds i8, i8* %0, i64 0
  %1 = bitcast i8* %add.ptr to %struct.sensor_device_attribute*
  %index = getelementptr inbounds %struct.sensor_device_attribute, %struct.sensor_device_attribute* %1, i32 0, i32 1
  %2 = load i32, i32* %index, align 8, !tbaa !108
  %3 = bitcast i64* %val to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %3) #6
  %call1 = call i32 @kstrtoul(i8* %buf, i32 10, i64* %val)
  %cmp = icmp slt i32 %call1, 0
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %conv = sext i32 %call1 to i64
  br label %cleanup

if.end:                                           ; preds = %entry
  %4 = load i64, i64* %val, align 8, !tbaa !23
  %cmp2 = icmp eq i64 %4, 0
  %5 = load i64, i64* %val, align 8
  %cmp4 = icmp ugt i64 %5, 10
  %or.cond = or i1 %cmp2, %cmp4
  br i1 %or.cond, label %cleanup, label %if.end7

if.end7:                                          ; preds = %if.end
  %have_temp = getelementptr inbounds %struct.nct6775_data, %struct.nct6775_data* %call, i32 0, i32 77
  %6 = load i16, i16* %have_temp, align 2, !tbaa !85
  %conv8 = zext i16 %6 to i32
  %7 = load i64, i64* %val, align 8, !tbaa !23
  %sub = sub i64 %7, 1
  %sh_prom = trunc i64 %sub to i32
  %shl = shl i32 1, %sh_prom
  %and = and i32 %conv8, %shl
  %tobool = icmp ne i32 %and, 0
  br i1 %tobool, label %lor.lhs.false9, label %cleanup

lor.lhs.false9:                                   ; preds = %if.end7
  %temp_src = getelementptr inbounds %struct.nct6775_data, %struct.nct6775_data* %call, i32 0, i32 5
  %8 = load i64, i64* %val, align 8, !tbaa !23
  %sub10 = sub i64 %8, 1
  %arrayidx = getelementptr inbounds [10 x i8], [10 x i8]* %temp_src, i64 0, i64 %sub10
  %9 = load i8, i8* %arrayidx, align 1, !tbaa !88
  %tobool11 = icmp ne i8 %9, 0
  br i1 %tobool11, label %if.end13, label %cleanup

if.end13:                                         ; preds = %lor.lhs.false9
  %update_lock = getelementptr inbounds %struct.nct6775_data, %struct.nct6775_data* %call, i32 0, i32 38
  call void @mutex_lock(%struct.mutex* %update_lock)
  %temp_src14 = getelementptr inbounds %struct.nct6775_data, %struct.nct6775_data* %call, i32 0, i32 5
  %10 = load i64, i64* %val, align 8, !tbaa !23
  %sub15 = sub i64 %10, 1
  %arrayidx16 = getelementptr inbounds [10 x i8], [10 x i8]* %temp_src14, i64 0, i64 %sub15
  %11 = load i8, i8* %arrayidx16, align 1, !tbaa !88
  %conv17 = zext i8 %11 to i32
  %conv18 = trunc i32 %conv17 to i8
  %pwm_temp_sel = getelementptr inbounds %struct.nct6775_data, %struct.nct6775_data* %call, i32 0, i32 72
  %idxprom = sext i32 %2 to i64
  %arrayidx19 = getelementptr inbounds [5 x i8], [5 x i8]* %pwm_temp_sel, i64 0, i64 %idxprom
  store i8 %conv18, i8* %arrayidx19, align 1, !tbaa !88
  %REG_TEMP_SEL = getelementptr inbounds %struct.nct6775_data, %struct.nct6775_data* %call, i32 0, i32 31
  %12 = load i16*, i16** %REG_TEMP_SEL, align 8, !tbaa !81
  %idxprom20 = sext i32 %2 to i64
  %arrayidx21 = getelementptr inbounds i16, i16* %12, i64 %idxprom20
  %13 = load i16, i16* %arrayidx21, align 2, !tbaa !13
  %call22 = call zeroext i16 @nct6775_read_value(%struct.nct6775_data* %call, i16 zeroext %13)
  %conv23 = zext i16 %call22 to i32
  %and24 = and i32 %conv23, 224
  %or = or i32 %and24, %conv17
  %REG_TEMP_SEL25 = getelementptr inbounds %struct.nct6775_data, %struct.nct6775_data* %call, i32 0, i32 31
  %14 = load i16*, i16** %REG_TEMP_SEL25, align 8, !tbaa !81
  %idxprom26 = sext i32 %2 to i64
  %arrayidx27 = getelementptr inbounds i16, i16* %14, i64 %idxprom26
  %15 = load i16, i16* %arrayidx27, align 2, !tbaa !13
  %conv28 = trunc i32 %or to i16
  %call29 = call i32 @nct6775_write_value(%struct.nct6775_data* %call, i16 zeroext %15, i16 zeroext %conv28)
  %update_lock30 = getelementptr inbounds %struct.nct6775_data, %struct.nct6775_data* %call, i32 0, i32 38
  call void @mutex_unlock(%struct.mutex* %update_lock30)
  br label %cleanup

cleanup:                                          ; preds = %if.end7, %lor.lhs.false9, %if.end, %if.end13, %if.then
  %retval.0 = phi i64 [ %conv, %if.then ], [ %count, %if.end13 ], [ -22, %if.end ], [ -22, %lor.lhs.false9 ], [ -22, %if.end7 ]
  %16 = bitcast i64* %val to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %16) #6
  ret i64 %retval.0
}

; Function Attrs: nounwind uwtable
define internal i64 @show_pwm_temp_sel_common(%struct.nct6775_data* %data, i8* %buf, i32 %src) #1 {
entry:
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %i.0 = phi i32 [ 0, %entry ], [ %inc, %for.inc ]
  %cmp = icmp slt i32 %i.0, 10
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %have_temp = getelementptr inbounds %struct.nct6775_data, %struct.nct6775_data* %data, i32 0, i32 77
  %0 = load i16, i16* %have_temp, align 2, !tbaa !85
  %conv = zext i16 %0 to i32
  %shl = shl i32 1, %i.0
  %and = and i32 %conv, %shl
  %tobool = icmp ne i32 %and, 0
  br i1 %tobool, label %if.end, label %for.inc

if.end:                                           ; preds = %for.body
  %temp_src = getelementptr inbounds %struct.nct6775_data, %struct.nct6775_data* %data, i32 0, i32 5
  %idxprom = sext i32 %i.0 to i64
  %arrayidx = getelementptr inbounds [10 x i8], [10 x i8]* %temp_src, i64 0, i64 %idxprom
  %1 = load i8, i8* %arrayidx, align 1, !tbaa !88
  %conv1 = zext i8 %1 to i32
  %cmp2 = icmp eq i32 %src, %conv1
  br i1 %cmp2, label %if.then4, label %for.inc

if.then4:                                         ; preds = %if.end
  %add = add nsw i32 %i.0, 1
  br label %for.end

for.inc:                                          ; preds = %if.end, %for.body
  %inc = add nsw i32 %i.0, 1
  br label %for.cond

for.end:                                          ; preds = %for.cond, %if.then4
  %sel.0 = phi i32 [ %add, %if.then4 ], [ 0, %for.cond ]
  %call = call i32 (i8*, i8*, ...) @sprintf(i8* %buf, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.41, i32 0, i32 0), i32 %sel.0)
  %conv6 = sext i32 %call to i64
  ret i64 %conv6
}

; Function Attrs: nounwind uwtable
define internal i64 @show_temp_tolerance(%struct.device* %dev, %struct.device_attribute* %attr, i8* %buf) #1 {
entry:
  %call = call %struct.nct6775_data* @nct6775_update_device(%struct.device* %dev)
  %0 = bitcast %struct.device_attribute* %attr to i8*
  %add.ptr = getelementptr inbounds i8, i8* %0, i64 0
  %1 = bitcast i8* %add.ptr to %struct.sensor_device_attribute_2*
  %nr1 = getelementptr inbounds %struct.sensor_device_attribute_2, %struct.sensor_device_attribute_2* %1, i32 0, i32 2
  %2 = load i8, i8* %nr1, align 1, !tbaa !93
  %conv = zext i8 %2 to i32
  %index2 = getelementptr inbounds %struct.sensor_device_attribute_2, %struct.sensor_device_attribute_2* %1, i32 0, i32 1
  %3 = load i8, i8* %index2, align 8, !tbaa !97
  %conv3 = zext i8 %3 to i32
  %temp_tolerance = getelementptr inbounds %struct.nct6775_data, %struct.nct6775_data* %call, i32 0, i32 66
  %idxprom = sext i32 %conv3 to i64
  %arrayidx = getelementptr inbounds [2 x [5 x i8]], [2 x [5 x i8]]* %temp_tolerance, i64 0, i64 %idxprom
  %idxprom4 = sext i32 %conv to i64
  %arrayidx5 = getelementptr inbounds [5 x i8], [5 x i8]* %arrayidx, i64 0, i64 %idxprom4
  %4 = load i8, i8* %arrayidx5, align 1, !tbaa !88
  %conv6 = zext i8 %4 to i32
  %mul = mul nsw i32 %conv6, 1000
  %call7 = call i32 (i8*, i8*, ...) @sprintf(i8* %buf, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.41, i32 0, i32 0), i32 %mul)
  %conv8 = sext i32 %call7 to i64
  ret i64 %conv8
}

; Function Attrs: nounwind uwtable
define internal i64 @store_temp_tolerance(%struct.device* %dev, %struct.device_attribute* %attr, i8* %buf, i64 %count) #1 {
entry:
  %val = alloca i64, align 8
  %call = call i8* @dev_get_drvdata(%struct.device* %dev)
  %0 = bitcast i8* %call to %struct.nct6775_data*
  %1 = bitcast %struct.device_attribute* %attr to i8*
  %add.ptr = getelementptr inbounds i8, i8* %1, i64 0
  %2 = bitcast i8* %add.ptr to %struct.sensor_device_attribute_2*
  %nr1 = getelementptr inbounds %struct.sensor_device_attribute_2, %struct.sensor_device_attribute_2* %2, i32 0, i32 2
  %3 = load i8, i8* %nr1, align 1, !tbaa !93
  %conv = zext i8 %3 to i32
  %index2 = getelementptr inbounds %struct.sensor_device_attribute_2, %struct.sensor_device_attribute_2* %2, i32 0, i32 1
  %4 = load i8, i8* %index2, align 8, !tbaa !97
  %conv3 = zext i8 %4 to i32
  %5 = bitcast i64* %val to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %5) #6
  %call4 = call i32 @kstrtoul(i8* %buf, i32 10, i64* %val)
  %cmp = icmp slt i32 %call4, 0
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %conv6 = sext i32 %call4 to i64
  br label %cleanup

if.end:                                           ; preds = %entry
  %6 = load i64, i64* %val, align 8, !tbaa !23
  %div = sdiv i32 1000, 2
  %conv8 = sext i32 %div to i64
  %add = add i64 %6, %conv8
  %conv9 = sext i32 1000 to i64
  %div10 = udiv i64 %add, %conv9
  %tolerance_mask = getelementptr inbounds %struct.nct6775_data, %struct.nct6775_data* %0, i32 0, i32 67
  %7 = load i8, i8* %tolerance_mask, align 1, !tbaa !58
  %conv11 = zext i8 %7 to i64
  %cmp12 = icmp ult i64 %div10, 0
  %.div10 = select i1 %cmp12, i64 0, i64 %div10
  %cmp15 = icmp ugt i64 %.div10, %conv11
  %cond20 = select i1 %cmp15, i64 %conv11, i64 %.div10
  store i64 %cond20, i64* %val, align 8, !tbaa !23
  %update_lock = getelementptr inbounds %struct.nct6775_data, %struct.nct6775_data* %0, i32 0, i32 38
  call void @mutex_lock(%struct.mutex* %update_lock)
  %8 = load i64, i64* %val, align 8, !tbaa !23
  %conv21 = trunc i64 %8 to i8
  %temp_tolerance = getelementptr inbounds %struct.nct6775_data, %struct.nct6775_data* %0, i32 0, i32 66
  %idxprom = sext i32 %conv3 to i64
  %arrayidx = getelementptr inbounds [2 x [5 x i8]], [2 x [5 x i8]]* %temp_tolerance, i64 0, i64 %idxprom
  %idxprom22 = sext i32 %conv to i64
  %arrayidx23 = getelementptr inbounds [5 x i8], [5 x i8]* %arrayidx, i64 0, i64 %idxprom22
  store i8 %conv21, i8* %arrayidx23, align 1, !tbaa !88
  %tobool = icmp ne i32 %conv3, 0
  br i1 %tobool, label %if.then24, label %if.else

if.then24:                                        ; preds = %if.end
  call void @pwm_update_registers(%struct.nct6775_data* %0, i32 %conv)
  br label %if.end29

if.else:                                          ; preds = %if.end
  %REG_CRITICAL_TEMP_TOLERANCE = getelementptr inbounds %struct.nct6775_data, %struct.nct6775_data* %0, i32 0, i32 29
  %9 = load i16*, i16** %REG_CRITICAL_TEMP_TOLERANCE, align 8, !tbaa !78
  %idxprom25 = sext i32 %conv to i64
  %arrayidx26 = getelementptr inbounds i16, i16* %9, i64 %idxprom25
  %10 = load i16, i16* %arrayidx26, align 2, !tbaa !13
  %11 = load i64, i64* %val, align 8, !tbaa !23
  %conv27 = trunc i64 %11 to i16
  %call28 = call i32 @nct6775_write_value(%struct.nct6775_data* %0, i16 zeroext %10, i16 zeroext %conv27)
  br label %if.end29

if.end29:                                         ; preds = %if.else, %if.then24
  %update_lock30 = getelementptr inbounds %struct.nct6775_data, %struct.nct6775_data* %0, i32 0, i32 38
  call void @mutex_unlock(%struct.mutex* %update_lock30)
  br label %cleanup

cleanup:                                          ; preds = %if.end29, %if.then
  %retval.0 = phi i64 [ %conv6, %if.then ], [ %count, %if.end29 ]
  %12 = bitcast i64* %val to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %12) #6
  ret i64 %retval.0
}

; Function Attrs: nounwind uwtable
define internal i64 @show_target_temp(%struct.device* %dev, %struct.device_attribute* %attr, i8* %buf) #1 {
entry:
  %call = call %struct.nct6775_data* @nct6775_update_device(%struct.device* %dev)
  %0 = bitcast %struct.device_attribute* %attr to i8*
  %add.ptr = getelementptr inbounds i8, i8* %0, i64 0
  %1 = bitcast i8* %add.ptr to %struct.sensor_device_attribute*
  %target_temp = getelementptr inbounds %struct.nct6775_data, %struct.nct6775_data* %call, i32 0, i32 61
  %index = getelementptr inbounds %struct.sensor_device_attribute, %struct.sensor_device_attribute* %1, i32 0, i32 1
  %2 = load i32, i32* %index, align 8, !tbaa !108
  %idxprom = sext i32 %2 to i64
  %arrayidx = getelementptr inbounds [5 x i8], [5 x i8]* %target_temp, i64 0, i64 %idxprom
  %3 = load i8, i8* %arrayidx, align 1, !tbaa !88
  %conv = zext i8 %3 to i32
  %mul = mul nsw i32 %conv, 1000
  %call1 = call i32 (i8*, i8*, ...) @sprintf(i8* %buf, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.41, i32 0, i32 0), i32 %mul)
  %conv2 = sext i32 %call1 to i64
  ret i64 %conv2
}

; Function Attrs: nounwind uwtable
define internal i64 @store_target_temp(%struct.device* %dev, %struct.device_attribute* %attr, i8* %buf, i64 %count) #1 {
entry:
  %val = alloca i64, align 8
  %call = call i8* @dev_get_drvdata(%struct.device* %dev)
  %0 = bitcast i8* %call to %struct.nct6775_data*
  %1 = bitcast %struct.device_attribute* %attr to i8*
  %add.ptr = getelementptr inbounds i8, i8* %1, i64 0
  %2 = bitcast i8* %add.ptr to %struct.sensor_device_attribute*
  %index = getelementptr inbounds %struct.sensor_device_attribute, %struct.sensor_device_attribute* %2, i32 0, i32 1
  %3 = load i32, i32* %index, align 8, !tbaa !108
  %4 = bitcast i64* %val to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %4) #6
  %call1 = call i32 @kstrtoul(i8* %buf, i32 10, i64* %val)
  %cmp = icmp slt i32 %call1, 0
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %conv = sext i32 %call1 to i64
  br label %cleanup

if.end:                                           ; preds = %entry
  %5 = load i64, i64* %val, align 8, !tbaa !23
  %div = sdiv i32 1000, 2
  %conv3 = sext i32 %div to i64
  %add = add i64 %5, %conv3
  %conv4 = sext i32 1000 to i64
  %div5 = udiv i64 %add, %conv4
  %target_temp_mask = getelementptr inbounds %struct.nct6775_data, %struct.nct6775_data* %0, i32 0, i32 62
  %6 = load i8, i8* %target_temp_mask, align 4, !tbaa !57
  %conv6 = zext i8 %6 to i64
  %cmp7 = icmp ult i64 %div5, 0
  %.div5 = select i1 %cmp7, i64 0, i64 %div5
  %cmp10 = icmp ugt i64 %.div5, %conv6
  %cond15 = select i1 %cmp10, i64 %conv6, i64 %.div5
  store i64 %cond15, i64* %val, align 8, !tbaa !23
  %update_lock = getelementptr inbounds %struct.nct6775_data, %struct.nct6775_data* %0, i32 0, i32 38
  call void @mutex_lock(%struct.mutex* %update_lock)
  %7 = load i64, i64* %val, align 8, !tbaa !23
  %conv16 = trunc i64 %7 to i8
  %target_temp = getelementptr inbounds %struct.nct6775_data, %struct.nct6775_data* %0, i32 0, i32 61
  %idxprom = sext i32 %3 to i64
  %arrayidx = getelementptr inbounds [5 x i8], [5 x i8]* %target_temp, i64 0, i64 %idxprom
  store i8 %conv16, i8* %arrayidx, align 1, !tbaa !88
  call void @pwm_update_registers(%struct.nct6775_data* %0, i32 %3)
  %update_lock17 = getelementptr inbounds %struct.nct6775_data, %struct.nct6775_data* %0, i32 0, i32 38
  call void @mutex_unlock(%struct.mutex* %update_lock17)
  br label %cleanup

cleanup:                                          ; preds = %if.end, %if.then
  %retval.0 = phi i64 [ %conv, %if.then ], [ %count, %if.end ]
  %8 = bitcast i64* %val to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %8) #6
  ret i64 %retval.0
}

; Function Attrs: nounwind uwtable
define internal i64 @show_target_speed(%struct.device* %dev, %struct.device_attribute* %attr, i8* %buf) #1 {
entry:
  %call = call %struct.nct6775_data* @nct6775_update_device(%struct.device* %dev)
  %0 = bitcast %struct.device_attribute* %attr to i8*
  %add.ptr = getelementptr inbounds i8, i8* %0, i64 0
  %1 = bitcast i8* %add.ptr to %struct.sensor_device_attribute*
  %index = getelementptr inbounds %struct.sensor_device_attribute, %struct.sensor_device_attribute* %1, i32 0, i32 1
  %2 = load i32, i32* %index, align 8, !tbaa !108
  %target_speed = getelementptr inbounds %struct.nct6775_data, %struct.nct6775_data* %call, i32 0, i32 63
  %idxprom = sext i32 %2 to i64
  %arrayidx = getelementptr inbounds [5 x i32], [5 x i32]* %target_speed, i64 0, i64 %idxprom
  %3 = load i32, i32* %arrayidx, align 4, !tbaa !86
  %conv = trunc i32 %3 to i16
  %fan_div = getelementptr inbounds %struct.nct6775_data, %struct.nct6775_data* %call, i32 0, i32 47
  %idxprom1 = sext i32 %2 to i64
  %arrayidx2 = getelementptr inbounds [5 x i8], [5 x i8]* %fan_div, i64 0, i64 %idxprom1
  %4 = load i8, i8* %arrayidx2, align 1, !tbaa !88
  %conv3 = zext i8 %4 to i32
  %call4 = call i32 @fan_from_reg16(i16 zeroext %conv, i32 %conv3)
  %call5 = call i32 (i8*, i8*, ...) @sprintf(i8* %buf, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.41, i32 0, i32 0), i32 %call4)
  %conv6 = sext i32 %call5 to i64
  ret i64 %conv6
}

; Function Attrs: nounwind uwtable
define internal i64 @store_target_speed(%struct.device* %dev, %struct.device_attribute* %attr, i8* %buf, i64 %count) #1 {
entry:
  %val = alloca i64, align 8
  %call = call i8* @dev_get_drvdata(%struct.device* %dev)
  %0 = bitcast i8* %call to %struct.nct6775_data*
  %1 = bitcast %struct.device_attribute* %attr to i8*
  %add.ptr = getelementptr inbounds i8, i8* %1, i64 0
  %2 = bitcast i8* %add.ptr to %struct.sensor_device_attribute*
  %index = getelementptr inbounds %struct.sensor_device_attribute, %struct.sensor_device_attribute* %2, i32 0, i32 1
  %3 = load i32, i32* %index, align 8, !tbaa !108
  %4 = bitcast i64* %val to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %4) #6
  %call1 = call i32 @kstrtoul(i8* %buf, i32 10, i64* %val)
  %cmp = icmp slt i32 %call1, 0
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %conv = sext i32 %call1 to i64
  br label %cleanup

if.end:                                           ; preds = %entry
  %5 = load i64, i64* %val, align 8, !tbaa !23
  %cmp2 = icmp ult i64 %5, 0
  %. = select i1 %cmp2, i64 0, i64 %5
  %cmp5 = icmp ugt i64 %., 1350000
  %cond10 = select i1 %cmp5, i64 1350000, i64 %.
  store i64 %cond10, i64* %val, align 8, !tbaa !23
  %6 = load i64, i64* %val, align 8, !tbaa !23
  %conv11 = trunc i64 %6 to i32
  %fan_div = getelementptr inbounds %struct.nct6775_data, %struct.nct6775_data* %0, i32 0, i32 47
  %idxprom = sext i32 %3 to i64
  %arrayidx = getelementptr inbounds [5 x i8], [5 x i8]* %fan_div, i64 0, i64 %idxprom
  %7 = load i8, i8* %arrayidx, align 1, !tbaa !88
  %conv12 = zext i8 %7 to i32
  %call13 = call zeroext i16 @fan_to_reg(i32 %conv11, i32 %conv12)
  %update_lock = getelementptr inbounds %struct.nct6775_data, %struct.nct6775_data* %0, i32 0, i32 38
  call void @mutex_lock(%struct.mutex* %update_lock)
  %conv14 = zext i16 %call13 to i32
  %target_speed = getelementptr inbounds %struct.nct6775_data, %struct.nct6775_data* %0, i32 0, i32 63
  %idxprom15 = sext i32 %3 to i64
  %arrayidx16 = getelementptr inbounds [5 x i32], [5 x i32]* %target_speed, i64 0, i64 %idxprom15
  store i32 %conv14, i32* %arrayidx16, align 4, !tbaa !86
  call void @pwm_update_registers(%struct.nct6775_data* %0, i32 %3)
  %update_lock17 = getelementptr inbounds %struct.nct6775_data, %struct.nct6775_data* %0, i32 0, i32 38
  call void @mutex_unlock(%struct.mutex* %update_lock17)
  br label %cleanup

cleanup:                                          ; preds = %if.end, %if.then
  %retval.0 = phi i64 [ %conv, %if.then ], [ %count, %if.end ]
  %8 = bitcast i64* %val to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %8) #6
  ret i64 %retval.0
}

; Function Attrs: nounwind uwtable
define internal zeroext i16 @fan_to_reg(i32 %fan, i32 %divreg) #1 {
entry:
  %tobool = icmp ne i32 %fan, 0
  br i1 %tobool, label %if.end, label %return

if.end:                                           ; preds = %entry
  %div = udiv i32 1350000, %fan
  %shr = lshr i32 %div, %divreg
  %conv = trunc i32 %shr to i16
  br label %return

return:                                           ; preds = %entry, %if.end
  %retval.0 = phi i16 [ %conv, %if.end ], [ 0, %entry ]
  ret i16 %retval.0
}

; Function Attrs: nounwind uwtable
define internal i64 @show_speed_tolerance(%struct.device* %dev, %struct.device_attribute* %attr, i8* %buf) #1 {
entry:
  %call = call %struct.nct6775_data* @nct6775_update_device(%struct.device* %dev)
  %0 = bitcast %struct.device_attribute* %attr to i8*
  %add.ptr = getelementptr inbounds i8, i8* %0, i64 0
  %1 = bitcast i8* %add.ptr to %struct.sensor_device_attribute*
  %index = getelementptr inbounds %struct.sensor_device_attribute, %struct.sensor_device_attribute* %1, i32 0, i32 1
  %2 = load i32, i32* %index, align 8, !tbaa !108
  %target_speed = getelementptr inbounds %struct.nct6775_data, %struct.nct6775_data* %call, i32 0, i32 63
  %idxprom = sext i32 %2 to i64
  %arrayidx = getelementptr inbounds [5 x i32], [5 x i32]* %target_speed, i64 0, i64 %idxprom
  %3 = load i32, i32* %arrayidx, align 4, !tbaa !86
  %target_speed_tolerance = getelementptr inbounds %struct.nct6775_data, %struct.nct6775_data* %call, i32 0, i32 64
  %idxprom1 = sext i32 %2 to i64
  %arrayidx2 = getelementptr inbounds [5 x i32], [5 x i32]* %target_speed_tolerance, i64 0, i64 %idxprom1
  %4 = load i32, i32* %arrayidx2, align 4, !tbaa !86
  %sub = sub i32 %3, %4
  %target_speed3 = getelementptr inbounds %struct.nct6775_data, %struct.nct6775_data* %call, i32 0, i32 63
  %idxprom4 = sext i32 %2 to i64
  %arrayidx5 = getelementptr inbounds [5 x i32], [5 x i32]* %target_speed3, i64 0, i64 %idxprom4
  %5 = load i32, i32* %arrayidx5, align 4, !tbaa !86
  %target_speed_tolerance6 = getelementptr inbounds %struct.nct6775_data, %struct.nct6775_data* %call, i32 0, i32 64
  %idxprom7 = sext i32 %2 to i64
  %arrayidx8 = getelementptr inbounds [5 x i32], [5 x i32]* %target_speed_tolerance6, i64 0, i64 %idxprom7
  %6 = load i32, i32* %arrayidx8, align 4, !tbaa !86
  %add = add i32 %5, %6
  %cmp = icmp sle i32 %sub, 0
  %.sub = select i1 %cmp, i32 1, i32 %sub
  %cmp9 = icmp sgt i32 %add, 65535
  %high.0 = select i1 %cmp9, i32 65535, i32 %add
  %cmp12 = icmp slt i32 %high.0, %.sub
  %.sub.high.0 = select i1 %cmp12, i32 %.sub, i32 %high.0
  %conv = trunc i32 %.sub to i16
  %fan_div = getelementptr inbounds %struct.nct6775_data, %struct.nct6775_data* %call, i32 0, i32 47
  %idxprom15 = sext i32 %2 to i64
  %arrayidx16 = getelementptr inbounds [5 x i8], [5 x i8]* %fan_div, i64 0, i64 %idxprom15
  %7 = load i8, i8* %arrayidx16, align 1, !tbaa !88
  %conv17 = zext i8 %7 to i32
  %call18 = call i32 @fan_from_reg16(i16 zeroext %conv, i32 %conv17)
  %conv19 = trunc i32 %.sub.high.0 to i16
  %fan_div20 = getelementptr inbounds %struct.nct6775_data, %struct.nct6775_data* %call, i32 0, i32 47
  %idxprom21 = sext i32 %2 to i64
  %arrayidx22 = getelementptr inbounds [5 x i8], [5 x i8]* %fan_div20, i64 0, i64 %idxprom21
  %8 = load i8, i8* %arrayidx22, align 1, !tbaa !88
  %conv23 = zext i8 %8 to i32
  %call24 = call i32 @fan_from_reg16(i16 zeroext %conv19, i32 %conv23)
  %sub25 = sub i32 %call18, %call24
  %div = udiv i32 %sub25, 2
  %call26 = call i32 (i8*, i8*, ...) @sprintf(i8* %buf, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.41, i32 0, i32 0), i32 %div)
  %conv27 = sext i32 %call26 to i64
  ret i64 %conv27
}

; Function Attrs: nounwind uwtable
define internal i64 @store_speed_tolerance(%struct.device* %dev, %struct.device_attribute* %attr, i8* %buf, i64 %count) #1 {
entry:
  %val = alloca i64, align 8
  %call = call i8* @dev_get_drvdata(%struct.device* %dev)
  %0 = bitcast i8* %call to %struct.nct6775_data*
  %1 = bitcast %struct.device_attribute* %attr to i8*
  %add.ptr = getelementptr inbounds i8, i8* %1, i64 0
  %2 = bitcast i8* %add.ptr to %struct.sensor_device_attribute*
  %index = getelementptr inbounds %struct.sensor_device_attribute, %struct.sensor_device_attribute* %2, i32 0, i32 1
  %3 = load i32, i32* %index, align 8, !tbaa !108
  %4 = bitcast i64* %val to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %4) #6
  %call1 = call i32 @kstrtoul(i8* %buf, i32 10, i64* %val)
  %cmp = icmp slt i32 %call1, 0
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %conv = sext i32 %call1 to i64
  br label %cleanup

if.end:                                           ; preds = %entry
  %target_speed = getelementptr inbounds %struct.nct6775_data, %struct.nct6775_data* %0, i32 0, i32 63
  %idxprom = sext i32 %3 to i64
  %arrayidx = getelementptr inbounds [5 x i32], [5 x i32]* %target_speed, i64 0, i64 %idxprom
  %5 = load i32, i32* %arrayidx, align 4, !tbaa !86
  %conv2 = trunc i32 %5 to i16
  %fan_div = getelementptr inbounds %struct.nct6775_data, %struct.nct6775_data* %0, i32 0, i32 47
  %idxprom3 = sext i32 %3 to i64
  %arrayidx4 = getelementptr inbounds [5 x i8], [5 x i8]* %fan_div, i64 0, i64 %idxprom3
  %6 = load i8, i8* %arrayidx4, align 1, !tbaa !88
  %conv5 = zext i8 %6 to i32
  %call6 = call i32 @fan_from_reg16(i16 zeroext %conv2, i32 %conv5)
  %conv7 = zext i32 %call6 to i64
  %7 = load i64, i64* %val, align 8, !tbaa !23
  %add = add i64 %conv7, %7
  %conv8 = trunc i64 %add to i32
  %target_speed9 = getelementptr inbounds %struct.nct6775_data, %struct.nct6775_data* %0, i32 0, i32 63
  %idxprom10 = sext i32 %3 to i64
  %arrayidx11 = getelementptr inbounds [5 x i32], [5 x i32]* %target_speed9, i64 0, i64 %idxprom10
  %8 = load i32, i32* %arrayidx11, align 4, !tbaa !86
  %conv12 = trunc i32 %8 to i16
  %fan_div13 = getelementptr inbounds %struct.nct6775_data, %struct.nct6775_data* %0, i32 0, i32 47
  %idxprom14 = sext i32 %3 to i64
  %arrayidx15 = getelementptr inbounds [5 x i8], [5 x i8]* %fan_div13, i64 0, i64 %idxprom14
  %9 = load i8, i8* %arrayidx15, align 1, !tbaa !88
  %conv16 = zext i8 %9 to i32
  %call17 = call i32 @fan_from_reg16(i16 zeroext %conv12, i32 %conv16)
  %conv18 = zext i32 %call17 to i64
  %10 = load i64, i64* %val, align 8, !tbaa !23
  %sub = sub i64 %conv18, %10
  %conv19 = trunc i64 %sub to i32
  %cmp20 = icmp sle i32 %conv19, 0
  %.conv19 = select i1 %cmp20, i32 1, i32 %conv19
  %cmp24 = icmp slt i32 %conv8, %.conv19
  %high.0 = select i1 %cmp24, i32 %.conv19, i32 %conv8
  %fan_div28 = getelementptr inbounds %struct.nct6775_data, %struct.nct6775_data* %0, i32 0, i32 47
  %idxprom29 = sext i32 %3 to i64
  %arrayidx30 = getelementptr inbounds [5 x i8], [5 x i8]* %fan_div28, i64 0, i64 %idxprom29
  %11 = load i8, i8* %arrayidx30, align 1, !tbaa !88
  %conv31 = zext i8 %11 to i32
  %call32 = call zeroext i16 @fan_to_reg(i32 %.conv19, i32 %conv31)
  %conv33 = zext i16 %call32 to i32
  %fan_div34 = getelementptr inbounds %struct.nct6775_data, %struct.nct6775_data* %0, i32 0, i32 47
  %idxprom35 = sext i32 %3 to i64
  %arrayidx36 = getelementptr inbounds [5 x i8], [5 x i8]* %fan_div34, i64 0, i64 %idxprom35
  %12 = load i8, i8* %arrayidx36, align 1, !tbaa !88
  %conv37 = zext i8 %12 to i32
  %call38 = call zeroext i16 @fan_to_reg(i32 %high.0, i32 %conv37)
  %conv39 = zext i16 %call38 to i32
  %sub40 = sub nsw i32 %conv33, %conv39
  %div = sdiv i32 %sub40, 2
  %conv41 = sext i32 %div to i64
  store i64 %conv41, i64* %val, align 8, !tbaa !23
  %13 = load i64, i64* %val, align 8, !tbaa !23
  %speed_tolerance_limit = getelementptr inbounds %struct.nct6775_data, %struct.nct6775_data* %0, i32 0, i32 65
  %14 = load i8, i8* %speed_tolerance_limit, align 8, !tbaa !59
  %conv42 = zext i8 %14 to i64
  %cmp43 = icmp ult i64 %13, 0
  %. = select i1 %cmp43, i64 0, i64 %13
  %cmp46 = icmp ugt i64 %., %conv42
  %cond51 = select i1 %cmp46, i64 %conv42, i64 %.
  store i64 %cond51, i64* %val, align 8, !tbaa !23
  %update_lock = getelementptr inbounds %struct.nct6775_data, %struct.nct6775_data* %0, i32 0, i32 38
  call void @mutex_lock(%struct.mutex* %update_lock)
  %15 = load i64, i64* %val, align 8, !tbaa !23
  %conv52 = trunc i64 %15 to i32
  %target_speed_tolerance = getelementptr inbounds %struct.nct6775_data, %struct.nct6775_data* %0, i32 0, i32 64
  %idxprom53 = sext i32 %3 to i64
  %arrayidx54 = getelementptr inbounds [5 x i32], [5 x i32]* %target_speed_tolerance, i64 0, i64 %idxprom53
  store i32 %conv52, i32* %arrayidx54, align 4, !tbaa !86
  call void @pwm_update_registers(%struct.nct6775_data* %0, i32 %3)
  %update_lock55 = getelementptr inbounds %struct.nct6775_data, %struct.nct6775_data* %0, i32 0, i32 38
  call void @mutex_unlock(%struct.mutex* %update_lock55)
  br label %cleanup

cleanup:                                          ; preds = %if.end, %if.then
  %retval.0 = phi i64 [ %conv, %if.then ], [ %count, %if.end ]
  %16 = bitcast i64* %val to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %16) #6
  ret i64 %retval.0
}

; Function Attrs: nounwind uwtable
define internal i64 @show_fan_time(%struct.device* %dev, %struct.device_attribute* %attr, i8* %buf) #1 {
entry:
  %call = call %struct.nct6775_data* @nct6775_update_device(%struct.device* %dev)
  %0 = bitcast %struct.device_attribute* %attr to i8*
  %add.ptr = getelementptr inbounds i8, i8* %0, i64 0
  %1 = bitcast i8* %add.ptr to %struct.sensor_device_attribute_2*
  %nr1 = getelementptr inbounds %struct.sensor_device_attribute_2, %struct.sensor_device_attribute_2* %1, i32 0, i32 2
  %2 = load i8, i8* %nr1, align 1, !tbaa !93
  %conv = zext i8 %2 to i32
  %index2 = getelementptr inbounds %struct.sensor_device_attribute_2, %struct.sensor_device_attribute_2* %1, i32 0, i32 1
  %3 = load i8, i8* %index2, align 8, !tbaa !97
  %conv3 = zext i8 %3 to i32
  %fan_time = getelementptr inbounds %struct.nct6775_data, %struct.nct6775_data* %call, i32 0, i32 68
  %idxprom = sext i32 %conv3 to i64
  %arrayidx = getelementptr inbounds [3 x [5 x i8]], [3 x [5 x i8]]* %fan_time, i64 0, i64 %idxprom
  %idxprom4 = sext i32 %conv to i64
  %arrayidx5 = getelementptr inbounds [5 x i8], [5 x i8]* %arrayidx, i64 0, i64 %idxprom4
  %4 = load i8, i8* %arrayidx5, align 1, !tbaa !88
  %pwm_mode = getelementptr inbounds %struct.nct6775_data, %struct.nct6775_data* %call, i32 0, i32 58
  %idxprom6 = sext i32 %conv to i64
  %arrayidx7 = getelementptr inbounds [5 x i8], [5 x i8]* %pwm_mode, i64 0, i64 %idxprom6
  %5 = load i8, i8* %arrayidx7, align 1, !tbaa !88
  %call8 = call i32 @step_time_from_reg(i8 zeroext %4, i8 zeroext %5)
  %call9 = call i32 (i8*, i8*, ...) @sprintf(i8* %buf, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.41, i32 0, i32 0), i32 %call8)
  %conv10 = sext i32 %call9 to i64
  ret i64 %conv10
}

; Function Attrs: nounwind uwtable
define internal i64 @store_fan_time(%struct.device* %dev, %struct.device_attribute* %attr, i8* %buf, i64 %count) #1 {
entry:
  %val = alloca i64, align 8
  %call = call i8* @dev_get_drvdata(%struct.device* %dev)
  %0 = bitcast i8* %call to %struct.nct6775_data*
  %1 = bitcast %struct.device_attribute* %attr to i8*
  %add.ptr = getelementptr inbounds i8, i8* %1, i64 0
  %2 = bitcast i8* %add.ptr to %struct.sensor_device_attribute_2*
  %nr1 = getelementptr inbounds %struct.sensor_device_attribute_2, %struct.sensor_device_attribute_2* %2, i32 0, i32 2
  %3 = load i8, i8* %nr1, align 1, !tbaa !93
  %conv = zext i8 %3 to i32
  %index2 = getelementptr inbounds %struct.sensor_device_attribute_2, %struct.sensor_device_attribute_2* %2, i32 0, i32 1
  %4 = load i8, i8* %index2, align 8, !tbaa !97
  %conv3 = zext i8 %4 to i32
  %5 = bitcast i64* %val to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %5) #6
  %call4 = call i32 @kstrtoul(i8* %buf, i32 10, i64* %val)
  %cmp = icmp slt i32 %call4, 0
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %conv6 = sext i32 %call4 to i64
  br label %cleanup

if.end:                                           ; preds = %entry
  %6 = load i64, i64* %val, align 8, !tbaa !23
  %conv7 = trunc i64 %6 to i32
  %pwm_mode = getelementptr inbounds %struct.nct6775_data, %struct.nct6775_data* %0, i32 0, i32 58
  %idxprom = sext i32 %conv to i64
  %arrayidx = getelementptr inbounds [5 x i8], [5 x i8]* %pwm_mode, i64 0, i64 %idxprom
  %7 = load i8, i8* %arrayidx, align 1, !tbaa !88
  %call8 = call zeroext i8 @step_time_to_reg(i32 %conv7, i8 zeroext %7)
  %conv9 = zext i8 %call8 to i64
  store i64 %conv9, i64* %val, align 8, !tbaa !23
  %update_lock = getelementptr inbounds %struct.nct6775_data, %struct.nct6775_data* %0, i32 0, i32 38
  call void @mutex_lock(%struct.mutex* %update_lock)
  %8 = load i64, i64* %val, align 8, !tbaa !23
  %conv10 = trunc i64 %8 to i8
  %fan_time = getelementptr inbounds %struct.nct6775_data, %struct.nct6775_data* %0, i32 0, i32 68
  %idxprom11 = sext i32 %conv3 to i64
  %arrayidx12 = getelementptr inbounds [3 x [5 x i8]], [3 x [5 x i8]]* %fan_time, i64 0, i64 %idxprom11
  %idxprom13 = sext i32 %conv to i64
  %arrayidx14 = getelementptr inbounds [5 x i8], [5 x i8]* %arrayidx12, i64 0, i64 %idxprom13
  store i8 %conv10, i8* %arrayidx14, align 1, !tbaa !88
  %REG_FAN_TIME = getelementptr inbounds %struct.nct6775_data, %struct.nct6775_data* %0, i32 0, i32 20
  %idxprom15 = sext i32 %conv3 to i64
  %arrayidx16 = getelementptr inbounds [3 x i16*], [3 x i16*]* %REG_FAN_TIME, i64 0, i64 %idxprom15
  %9 = load i16*, i16** %arrayidx16, align 8, !tbaa !12
  %idxprom17 = sext i32 %conv to i64
  %arrayidx18 = getelementptr inbounds i16, i16* %9, i64 %idxprom17
  %10 = load i16, i16* %arrayidx18, align 2, !tbaa !13
  %11 = load i64, i64* %val, align 8, !tbaa !23
  %conv19 = trunc i64 %11 to i16
  %call20 = call i32 @nct6775_write_value(%struct.nct6775_data* %0, i16 zeroext %10, i16 zeroext %conv19)
  %update_lock21 = getelementptr inbounds %struct.nct6775_data, %struct.nct6775_data* %0, i32 0, i32 38
  call void @mutex_unlock(%struct.mutex* %update_lock21)
  br label %cleanup

cleanup:                                          ; preds = %if.end, %if.then
  %retval.0 = phi i64 [ %conv6, %if.then ], [ %count, %if.end ]
  %12 = bitcast i64* %val to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %12) #6
  ret i64 %retval.0
}

; Function Attrs: nounwind uwtable
define internal i32 @step_time_from_reg(i8 zeroext %reg, i8 zeroext %mode) #1 {
entry:
  %conv = zext i8 %mode to i32
  %tobool = icmp ne i32 %conv, 0
  %conv1 = zext i8 %reg to i32
  %.sink = select i1 %tobool, i32 400, i32 100
  %mul3 = mul nsw i32 %.sink, %conv1
  ret i32 %mul3
}

; Function Attrs: nounwind uwtable
define internal zeroext i8 @step_time_to_reg(i32 %msec, i8 zeroext %mode) #1 {
entry:
  %conv = zext i8 %mode to i32
  %tobool = icmp ne i32 %conv, 0
  %.sink1 = select i1 %tobool, i32 200, i32 50
  %.sink = select i1 %tobool, i32 400, i32 100
  %add1 = add i32 %msec, %.sink1
  %div2 = udiv i32 %add1, %.sink
  %cmp = icmp ult i32 %div2, 1
  %.div2 = select i1 %cmp, i32 1, i32 %div2
  %cmp8 = icmp ugt i32 %.div2, 255
  %cond13 = select i1 %cmp8, i32 255, i32 %.div2
  %conv14 = trunc i32 %cond13 to i8
  ret i8 %conv14
}

; Function Attrs: nounwind uwtable
define internal i64 @show_pwm_weight_temp_sel(%struct.device* %dev, %struct.device_attribute* %attr, i8* %buf) #1 {
entry:
  %call = call %struct.nct6775_data* @nct6775_update_device(%struct.device* %dev)
  %0 = bitcast %struct.device_attribute* %attr to i8*
  %add.ptr = getelementptr inbounds i8, i8* %0, i64 0
  %1 = bitcast i8* %add.ptr to %struct.sensor_device_attribute*
  %index1 = getelementptr inbounds %struct.sensor_device_attribute, %struct.sensor_device_attribute* %1, i32 0, i32 1
  %2 = load i32, i32* %index1, align 8, !tbaa !108
  %pwm_weight_temp_sel = getelementptr inbounds %struct.nct6775_data, %struct.nct6775_data* %call, i32 0, i32 73
  %idxprom = sext i32 %2 to i64
  %arrayidx = getelementptr inbounds [5 x i8], [5 x i8]* %pwm_weight_temp_sel, i64 0, i64 %idxprom
  %3 = load i8, i8* %arrayidx, align 1, !tbaa !88
  %conv = zext i8 %3 to i32
  %call2 = call i64 @show_pwm_temp_sel_common(%struct.nct6775_data* %call, i8* %buf, i32 %conv)
  ret i64 %call2
}

; Function Attrs: nounwind uwtable
define internal i64 @store_pwm_weight_temp_sel(%struct.device* %dev, %struct.device_attribute* %attr, i8* %buf, i64 %count) #1 {
entry:
  %val = alloca i64, align 8
  %call = call %struct.nct6775_data* @nct6775_update_device(%struct.device* %dev)
  %0 = bitcast %struct.device_attribute* %attr to i8*
  %add.ptr = getelementptr inbounds i8, i8* %0, i64 0
  %1 = bitcast i8* %add.ptr to %struct.sensor_device_attribute*
  %index = getelementptr inbounds %struct.sensor_device_attribute, %struct.sensor_device_attribute* %1, i32 0, i32 1
  %2 = load i32, i32* %index, align 8, !tbaa !108
  %3 = bitcast i64* %val to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %3) #6
  %call1 = call i32 @kstrtoul(i8* %buf, i32 10, i64* %val)
  %cmp = icmp slt i32 %call1, 0
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %conv = sext i32 %call1 to i64
  br label %cleanup

if.end:                                           ; preds = %entry
  %4 = load i64, i64* %val, align 8, !tbaa !23
  %cmp2 = icmp ugt i64 %4, 10
  br i1 %cmp2, label %cleanup, label %if.end5

if.end5:                                          ; preds = %if.end
  %5 = load i64, i64* %val, align 8, !tbaa !23
  %tobool = icmp ne i64 %5, 0
  br i1 %tobool, label %land.lhs.true, label %if.end11

land.lhs.true:                                    ; preds = %if.end5
  %have_temp = getelementptr inbounds %struct.nct6775_data, %struct.nct6775_data* %call, i32 0, i32 77
  %6 = load i16, i16* %have_temp, align 2, !tbaa !85
  %conv6 = zext i16 %6 to i32
  %7 = load i64, i64* %val, align 8, !tbaa !23
  %sub = sub i64 %7, 1
  %sh_prom = trunc i64 %sub to i32
  %shl = shl i32 1, %sh_prom
  %and = and i32 %conv6, %shl
  %tobool7 = icmp ne i32 %and, 0
  br i1 %tobool7, label %lor.lhs.false, label %cleanup

lor.lhs.false:                                    ; preds = %land.lhs.true
  %temp_src = getelementptr inbounds %struct.nct6775_data, %struct.nct6775_data* %call, i32 0, i32 5
  %8 = load i64, i64* %val, align 8, !tbaa !23
  %sub8 = sub i64 %8, 1
  %arrayidx = getelementptr inbounds [10 x i8], [10 x i8]* %temp_src, i64 0, i64 %sub8
  %9 = load i8, i8* %arrayidx, align 1, !tbaa !88
  %tobool9 = icmp ne i8 %9, 0
  br i1 %tobool9, label %if.end11, label %cleanup

if.end11:                                         ; preds = %lor.lhs.false, %if.end5
  %update_lock = getelementptr inbounds %struct.nct6775_data, %struct.nct6775_data* %call, i32 0, i32 38
  call void @mutex_lock(%struct.mutex* %update_lock)
  %10 = load i64, i64* %val, align 8, !tbaa !23
  %tobool12 = icmp ne i64 %10, 0
  br i1 %tobool12, label %if.then13, label %if.else

if.then13:                                        ; preds = %if.end11
  %temp_src14 = getelementptr inbounds %struct.nct6775_data, %struct.nct6775_data* %call, i32 0, i32 5
  %11 = load i64, i64* %val, align 8, !tbaa !23
  %sub15 = sub i64 %11, 1
  %arrayidx16 = getelementptr inbounds [10 x i8], [10 x i8]* %temp_src14, i64 0, i64 %sub15
  %12 = load i8, i8* %arrayidx16, align 1, !tbaa !88
  %conv17 = zext i8 %12 to i32
  %conv18 = trunc i32 %conv17 to i8
  %pwm_weight_temp_sel = getelementptr inbounds %struct.nct6775_data, %struct.nct6775_data* %call, i32 0, i32 73
  %idxprom = sext i32 %2 to i64
  %arrayidx19 = getelementptr inbounds [5 x i8], [5 x i8]* %pwm_weight_temp_sel, i64 0, i64 %idxprom
  store i8 %conv18, i8* %arrayidx19, align 1, !tbaa !88
  %REG_WEIGHT_TEMP_SEL = getelementptr inbounds %struct.nct6775_data, %struct.nct6775_data* %call, i32 0, i32 32
  %13 = load i16*, i16** %REG_WEIGHT_TEMP_SEL, align 8, !tbaa !82
  %idxprom20 = sext i32 %2 to i64
  %arrayidx21 = getelementptr inbounds i16, i16* %13, i64 %idxprom20
  %14 = load i16, i16* %arrayidx21, align 2, !tbaa !13
  %call22 = call zeroext i16 @nct6775_read_value(%struct.nct6775_data* %call, i16 zeroext %14)
  %conv23 = zext i16 %call22 to i32
  %and24 = and i32 %conv23, 224
  %or = or i32 %conv17, 128
  %or25 = or i32 %and24, %or
  %REG_WEIGHT_TEMP_SEL26 = getelementptr inbounds %struct.nct6775_data, %struct.nct6775_data* %call, i32 0, i32 32
  %15 = load i16*, i16** %REG_WEIGHT_TEMP_SEL26, align 8, !tbaa !82
  %idxprom27 = sext i32 %2 to i64
  %arrayidx28 = getelementptr inbounds i16, i16* %15, i64 %idxprom27
  %16 = load i16, i16* %arrayidx28, align 2, !tbaa !13
  %conv29 = trunc i32 %or25 to i16
  %call30 = call i32 @nct6775_write_value(%struct.nct6775_data* %call, i16 zeroext %16, i16 zeroext %conv29)
  br label %if.end45

if.else:                                          ; preds = %if.end11
  %pwm_weight_temp_sel31 = getelementptr inbounds %struct.nct6775_data, %struct.nct6775_data* %call, i32 0, i32 73
  %idxprom32 = sext i32 %2 to i64
  %arrayidx33 = getelementptr inbounds [5 x i8], [5 x i8]* %pwm_weight_temp_sel31, i64 0, i64 %idxprom32
  store i8 0, i8* %arrayidx33, align 1, !tbaa !88
  %REG_WEIGHT_TEMP_SEL34 = getelementptr inbounds %struct.nct6775_data, %struct.nct6775_data* %call, i32 0, i32 32
  %17 = load i16*, i16** %REG_WEIGHT_TEMP_SEL34, align 8, !tbaa !82
  %idxprom35 = sext i32 %2 to i64
  %arrayidx36 = getelementptr inbounds i16, i16* %17, i64 %idxprom35
  %18 = load i16, i16* %arrayidx36, align 2, !tbaa !13
  %call37 = call zeroext i16 @nct6775_read_value(%struct.nct6775_data* %call, i16 zeroext %18)
  %conv38 = zext i16 %call37 to i32
  %and39 = and i32 %conv38, 127
  %REG_WEIGHT_TEMP_SEL40 = getelementptr inbounds %struct.nct6775_data, %struct.nct6775_data* %call, i32 0, i32 32
  %19 = load i16*, i16** %REG_WEIGHT_TEMP_SEL40, align 8, !tbaa !82
  %idxprom41 = sext i32 %2 to i64
  %arrayidx42 = getelementptr inbounds i16, i16* %19, i64 %idxprom41
  %20 = load i16, i16* %arrayidx42, align 2, !tbaa !13
  %conv43 = trunc i32 %and39 to i16
  %call44 = call i32 @nct6775_write_value(%struct.nct6775_data* %call, i16 zeroext %20, i16 zeroext %conv43)
  br label %if.end45

if.end45:                                         ; preds = %if.else, %if.then13
  %update_lock46 = getelementptr inbounds %struct.nct6775_data, %struct.nct6775_data* %call, i32 0, i32 38
  call void @mutex_unlock(%struct.mutex* %update_lock46)
  br label %cleanup

cleanup:                                          ; preds = %land.lhs.true, %lor.lhs.false, %if.end, %if.end45, %if.then
  %retval.0 = phi i64 [ %conv, %if.then ], [ %count, %if.end45 ], [ -22, %if.end ], [ -22, %lor.lhs.false ], [ -22, %land.lhs.true ]
  %21 = bitcast i64* %val to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %21) #6
  ret i64 %retval.0
}

; Function Attrs: nounwind uwtable
define internal i64 @show_weight_temp(%struct.device* %dev, %struct.device_attribute* %attr, i8* %buf) #1 {
entry:
  %call = call %struct.nct6775_data* @nct6775_update_device(%struct.device* %dev)
  %0 = bitcast %struct.device_attribute* %attr to i8*
  %add.ptr = getelementptr inbounds i8, i8* %0, i64 0
  %1 = bitcast i8* %add.ptr to %struct.sensor_device_attribute_2*
  %nr1 = getelementptr inbounds %struct.sensor_device_attribute_2, %struct.sensor_device_attribute_2* %1, i32 0, i32 2
  %2 = load i8, i8* %nr1, align 1, !tbaa !93
  %conv = zext i8 %2 to i32
  %index2 = getelementptr inbounds %struct.sensor_device_attribute_2, %struct.sensor_device_attribute_2* %1, i32 0, i32 1
  %3 = load i8, i8* %index2, align 8, !tbaa !97
  %conv3 = zext i8 %3 to i32
  %weight_temp = getelementptr inbounds %struct.nct6775_data, %struct.nct6775_data* %call, i32 0, i32 74
  %idxprom = sext i32 %conv3 to i64
  %arrayidx = getelementptr inbounds [3 x [5 x i8]], [3 x [5 x i8]]* %weight_temp, i64 0, i64 %idxprom
  %idxprom4 = sext i32 %conv to i64
  %arrayidx5 = getelementptr inbounds [5 x i8], [5 x i8]* %arrayidx, i64 0, i64 %idxprom4
  %4 = load i8, i8* %arrayidx5, align 1, !tbaa !88
  %conv6 = zext i8 %4 to i32
  %mul = mul nsw i32 %conv6, 1000
  %call7 = call i32 (i8*, i8*, ...) @sprintf(i8* %buf, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.41, i32 0, i32 0), i32 %mul)
  %conv8 = sext i32 %call7 to i64
  ret i64 %conv8
}

; Function Attrs: nounwind uwtable
define internal i64 @store_weight_temp(%struct.device* %dev, %struct.device_attribute* %attr, i8* %buf, i64 %count) #1 {
entry:
  %val = alloca i64, align 8
  %call = call i8* @dev_get_drvdata(%struct.device* %dev)
  %0 = bitcast i8* %call to %struct.nct6775_data*
  %1 = bitcast %struct.device_attribute* %attr to i8*
  %add.ptr = getelementptr inbounds i8, i8* %1, i64 0
  %2 = bitcast i8* %add.ptr to %struct.sensor_device_attribute_2*
  %nr1 = getelementptr inbounds %struct.sensor_device_attribute_2, %struct.sensor_device_attribute_2* %2, i32 0, i32 2
  %3 = load i8, i8* %nr1, align 1, !tbaa !93
  %conv = zext i8 %3 to i32
  %index2 = getelementptr inbounds %struct.sensor_device_attribute_2, %struct.sensor_device_attribute_2* %2, i32 0, i32 1
  %4 = load i8, i8* %index2, align 8, !tbaa !97
  %conv3 = zext i8 %4 to i32
  %5 = bitcast i64* %val to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %5) #6
  %call4 = call i32 @kstrtoul(i8* %buf, i32 10, i64* %val)
  %cmp = icmp slt i32 %call4, 0
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %conv6 = sext i32 %call4 to i64
  br label %cleanup

if.end:                                           ; preds = %entry
  %6 = load i64, i64* %val, align 8, !tbaa !23
  %div = sdiv i32 1000, 2
  %conv8 = sext i32 %div to i64
  %add = add i64 %6, %conv8
  %conv9 = sext i32 1000 to i64
  %div10 = udiv i64 %add, %conv9
  %cmp11 = icmp ult i64 %div10, 0
  %.div10 = select i1 %cmp11, i64 0, i64 %div10
  %cmp14 = icmp ugt i64 %.div10, 255
  %cond19 = select i1 %cmp14, i64 255, i64 %.div10
  store i64 %cond19, i64* %val, align 8, !tbaa !23
  %update_lock = getelementptr inbounds %struct.nct6775_data, %struct.nct6775_data* %0, i32 0, i32 38
  call void @mutex_lock(%struct.mutex* %update_lock)
  %7 = load i64, i64* %val, align 8, !tbaa !23
  %conv20 = trunc i64 %7 to i8
  %weight_temp = getelementptr inbounds %struct.nct6775_data, %struct.nct6775_data* %0, i32 0, i32 74
  %idxprom = sext i32 %conv3 to i64
  %arrayidx = getelementptr inbounds [3 x [5 x i8]], [3 x [5 x i8]]* %weight_temp, i64 0, i64 %idxprom
  %idxprom21 = sext i32 %conv to i64
  %arrayidx22 = getelementptr inbounds [5 x i8], [5 x i8]* %arrayidx, i64 0, i64 %idxprom21
  store i8 %conv20, i8* %arrayidx22, align 1, !tbaa !88
  %REG_WEIGHT_TEMP = getelementptr inbounds %struct.nct6775_data, %struct.nct6775_data* %0, i32 0, i32 33
  %idxprom23 = sext i32 %conv3 to i64
  %arrayidx24 = getelementptr inbounds [3 x i16*], [3 x i16*]* %REG_WEIGHT_TEMP, i64 0, i64 %idxprom23
  %8 = load i16*, i16** %arrayidx24, align 8, !tbaa !12
  %idxprom25 = sext i32 %conv to i64
  %arrayidx26 = getelementptr inbounds i16, i16* %8, i64 %idxprom25
  %9 = load i16, i16* %arrayidx26, align 2, !tbaa !13
  %10 = load i64, i64* %val, align 8, !tbaa !23
  %conv27 = trunc i64 %10 to i16
  %call28 = call i32 @nct6775_write_value(%struct.nct6775_data* %0, i16 zeroext %9, i16 zeroext %conv27)
  %update_lock29 = getelementptr inbounds %struct.nct6775_data, %struct.nct6775_data* %0, i32 0, i32 38
  call void @mutex_unlock(%struct.mutex* %update_lock29)
  br label %cleanup

cleanup:                                          ; preds = %if.end, %if.then
  %retval.0 = phi i64 [ %conv6, %if.then ], [ %count, %if.end ]
  %11 = bitcast i64* %val to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %11) #6
  ret i64 %retval.0
}

; Function Attrs: nounwind uwtable
define internal i64 @show_auto_pwm(%struct.device* %dev, %struct.device_attribute* %attr, i8* %buf) #1 {
entry:
  %call = call %struct.nct6775_data* @nct6775_update_device(%struct.device* %dev)
  %0 = bitcast %struct.device_attribute* %attr to i8*
  %add.ptr = getelementptr inbounds i8, i8* %0, i64 0
  %1 = bitcast i8* %add.ptr to %struct.sensor_device_attribute_2*
  %auto_pwm = getelementptr inbounds %struct.nct6775_data, %struct.nct6775_data* %call, i32 0, i32 70
  %nr = getelementptr inbounds %struct.sensor_device_attribute_2, %struct.sensor_device_attribute_2* %1, i32 0, i32 2
  %2 = load i8, i8* %nr, align 1, !tbaa !93
  %idxprom = zext i8 %2 to i64
  %arrayidx = getelementptr inbounds [5 x [7 x i8]], [5 x [7 x i8]]* %auto_pwm, i64 0, i64 %idxprom
  %index = getelementptr inbounds %struct.sensor_device_attribute_2, %struct.sensor_device_attribute_2* %1, i32 0, i32 1
  %3 = load i8, i8* %index, align 8, !tbaa !97
  %idxprom1 = zext i8 %3 to i64
  %arrayidx2 = getelementptr inbounds [7 x i8], [7 x i8]* %arrayidx, i64 0, i64 %idxprom1
  %4 = load i8, i8* %arrayidx2, align 1, !tbaa !88
  %conv = zext i8 %4 to i32
  %call3 = call i32 (i8*, i8*, ...) @sprintf(i8* %buf, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.41, i32 0, i32 0), i32 %conv)
  %conv4 = sext i32 %call3 to i64
  ret i64 %conv4
}

; Function Attrs: nounwind uwtable
define internal i64 @store_auto_pwm(%struct.device* %dev, %struct.device_attribute* %attr, i8* %buf, i64 %count) #1 {
entry:
  %val = alloca i64, align 8
  %call = call i8* @dev_get_drvdata(%struct.device* %dev)
  %0 = bitcast i8* %call to %struct.nct6775_data*
  %1 = bitcast %struct.device_attribute* %attr to i8*
  %add.ptr = getelementptr inbounds i8, i8* %1, i64 0
  %2 = bitcast i8* %add.ptr to %struct.sensor_device_attribute_2*
  %nr1 = getelementptr inbounds %struct.sensor_device_attribute_2, %struct.sensor_device_attribute_2* %2, i32 0, i32 2
  %3 = load i8, i8* %nr1, align 1, !tbaa !93
  %conv = zext i8 %3 to i32
  %index = getelementptr inbounds %struct.sensor_device_attribute_2, %struct.sensor_device_attribute_2* %2, i32 0, i32 1
  %4 = load i8, i8* %index, align 8, !tbaa !97
  %conv2 = zext i8 %4 to i32
  %5 = bitcast i64* %val to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %5) #6
  %call3 = call i32 @kstrtoul(i8* %buf, i32 10, i64* %val)
  %cmp = icmp slt i32 %call3, 0
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %conv5 = sext i32 %call3 to i64
  br label %cleanup

if.end:                                           ; preds = %entry
  %6 = load i64, i64* %val, align 8, !tbaa !23
  %cmp6 = icmp ugt i64 %6, 255
  br i1 %cmp6, label %cleanup, label %if.end9

if.end9:                                          ; preds = %if.end
  %auto_pwm_num = getelementptr inbounds %struct.nct6775_data, %struct.nct6775_data* %0, i32 0, i32 69
  %7 = load i32, i32* %auto_pwm_num, align 4, !tbaa !51
  %cmp10 = icmp eq i32 %conv2, %7
  br i1 %cmp10, label %if.then12, label %if.end24

if.then12:                                        ; preds = %if.end9
  %kind = getelementptr inbounds %struct.nct6775_data, %struct.nct6775_data* %0, i32 0, i32 1
  %8 = load i32, i32* %kind, align 4, !tbaa !44
  %cmp13 = icmp eq i32 %8, 0
  %9 = load i64, i64* %val, align 8
  %tobool = icmp ne i64 %9, 0
  %or.cond = or i1 %cmp13, %tobool
  br i1 %or.cond, label %if.end16, label %cleanup

if.end16:                                         ; preds = %if.then12
  %kind17 = getelementptr inbounds %struct.nct6775_data, %struct.nct6775_data* %0, i32 0, i32 1
  %10 = load i32, i32* %kind17, align 4, !tbaa !44
  %cmp18 = icmp ne i32 %10, 2
  %11 = load i64, i64* %val, align 8
  %tobool21 = icmp ne i64 %11, 0
  %or.cond1 = and i1 %cmp18, %tobool21
  br i1 %or.cond1, label %if.then22, label %if.end24

if.then22:                                        ; preds = %if.end16
  store i64 255, i64* %val, align 8, !tbaa !23
  br label %if.end24

if.end24:                                         ; preds = %if.end16, %if.then22, %if.end9
  %update_lock = getelementptr inbounds %struct.nct6775_data, %struct.nct6775_data* %0, i32 0, i32 38
  call void @mutex_lock(%struct.mutex* %update_lock)
  %12 = load i64, i64* %val, align 8, !tbaa !23
  %conv25 = trunc i64 %12 to i8
  %auto_pwm = getelementptr inbounds %struct.nct6775_data, %struct.nct6775_data* %0, i32 0, i32 70
  %idxprom = sext i32 %conv to i64
  %arrayidx = getelementptr inbounds [5 x [7 x i8]], [5 x [7 x i8]]* %auto_pwm, i64 0, i64 %idxprom
  %idxprom26 = sext i32 %conv2 to i64
  %arrayidx27 = getelementptr inbounds [7 x i8], [7 x i8]* %arrayidx, i64 0, i64 %idxprom26
  store i8 %conv25, i8* %arrayidx27, align 1, !tbaa !88
  %auto_pwm_num28 = getelementptr inbounds %struct.nct6775_data, %struct.nct6775_data* %0, i32 0, i32 69
  %13 = load i32, i32* %auto_pwm_num28, align 4, !tbaa !51
  %cmp29 = icmp slt i32 %conv2, %13
  br i1 %cmp29, label %if.then31, label %if.else

if.then31:                                        ; preds = %if.end24
  %REG_AUTO_PWM = getelementptr inbounds %struct.nct6775_data, %struct.nct6775_data* %0, i32 0, i32 27
  %14 = load i16*, i16** %REG_AUTO_PWM, align 8, !tbaa !76
  %idxprom32 = sext i32 %conv to i64
  %arrayidx33 = getelementptr inbounds i16, i16* %14, i64 %idxprom32
  %15 = load i16, i16* %arrayidx33, align 2, !tbaa !13
  %conv34 = zext i16 %15 to i32
  %add = add nsw i32 %conv34, %conv2
  %conv35 = trunc i32 %add to i16
  %auto_pwm36 = getelementptr inbounds %struct.nct6775_data, %struct.nct6775_data* %0, i32 0, i32 70
  %idxprom37 = sext i32 %conv to i64
  %arrayidx38 = getelementptr inbounds [5 x [7 x i8]], [5 x [7 x i8]]* %auto_pwm36, i64 0, i64 %idxprom37
  %idxprom39 = sext i32 %conv2 to i64
  %arrayidx40 = getelementptr inbounds [7 x i8], [7 x i8]* %arrayidx38, i64 0, i64 %idxprom39
  %16 = load i8, i8* %arrayidx40, align 1, !tbaa !88
  %conv41 = zext i8 %16 to i16
  %call42 = call i32 @nct6775_write_value(%struct.nct6775_data* %0, i16 zeroext %conv35, i16 zeroext %conv41)
  br label %if.end84

if.else:                                          ; preds = %if.end24
  %kind43 = getelementptr inbounds %struct.nct6775_data, %struct.nct6775_data* %0, i32 0, i32 1
  %17 = load i32, i32* %kind43, align 4, !tbaa !44
  br label %NodeBlock

NodeBlock:                                        ; preds = %if.else
  %Pivot = icmp slt i32 %17, 2
  br i1 %Pivot, label %LeafBlock, label %LeafBlock2

LeafBlock2:                                       ; preds = %NodeBlock
  %SwitchLeaf3 = icmp eq i32 %17, 2
  br i1 %SwitchLeaf3, label %sw.bb60, label %NewDefault

LeafBlock:                                        ; preds = %NodeBlock
  %SwitchLeaf = icmp eq i32 %17, 0
  br i1 %SwitchLeaf, label %sw.bb, label %NewDefault

sw.bb:                                            ; preds = %LeafBlock
  %idxprom44 = sext i32 %conv to i64
  %arrayidx45 = getelementptr inbounds [3 x i16], [3 x i16]* @NCT6775_REG_CRITICAL_ENAB, i64 0, i64 %idxprom44
  %18 = load i16, i16* %arrayidx45, align 2, !tbaa !13
  %call46 = call zeroext i16 @nct6775_read_value(%struct.nct6775_data* %0, i16 zeroext %18)
  %conv47 = trunc i16 %call46 to i8
  %19 = load i64, i64* %val, align 8, !tbaa !23
  %tobool48 = icmp ne i64 %19, 0
  %conv50 = zext i8 %conv47 to i32
  %and = and i32 %conv50, -3
  %or = or i32 %conv50, 2
  %and.sink = select i1 %tobool48, i32 %or, i32 %and
  %conv54 = trunc i32 %and.sink to i8
  %idxprom56 = sext i32 %conv to i64
  %arrayidx57 = getelementptr inbounds [3 x i16], [3 x i16]* @NCT6775_REG_CRITICAL_ENAB, i64 0, i64 %idxprom56
  %20 = load i16, i16* %arrayidx57, align 2, !tbaa !13
  %conv58 = zext i8 %conv54 to i16
  %call59 = call i32 @nct6775_write_value(%struct.nct6775_data* %0, i16 zeroext %20, i16 zeroext %conv58)
  br label %if.end84

sw.bb60:                                          ; preds = %LeafBlock2
  %idxprom61 = sext i32 %conv to i64
  %arrayidx62 = getelementptr inbounds [5 x i16], [5 x i16]* @NCT6779_REG_CRITICAL_PWM, i64 0, i64 %idxprom61
  %21 = load i16, i16* %arrayidx62, align 2, !tbaa !13
  %22 = load i64, i64* %val, align 8, !tbaa !23
  %conv63 = trunc i64 %22 to i16
  %call64 = call i32 @nct6775_write_value(%struct.nct6775_data* %0, i16 zeroext %21, i16 zeroext %conv63)
  %idxprom65 = sext i32 %conv to i64
  %arrayidx66 = getelementptr inbounds [5 x i16], [5 x i16]* @NCT6779_REG_CRITICAL_PWM_ENABLE, i64 0, i64 %idxprom65
  %23 = load i16, i16* %arrayidx66, align 2, !tbaa !13
  %call67 = call zeroext i16 @nct6775_read_value(%struct.nct6775_data* %0, i16 zeroext %23)
  %conv68 = trunc i16 %call67 to i8
  %24 = load i64, i64* %val, align 8, !tbaa !23
  %cmp69 = icmp eq i64 %24, 255
  %conv72 = zext i8 %conv68 to i32
  %or77 = or i32 %conv72, 1
  %and73 = and i32 %conv72, -2
  %or77.sink = select i1 %cmp69, i32 %and73, i32 %or77
  %conv78 = trunc i32 %or77.sink to i8
  %idxprom80 = sext i32 %conv to i64
  %arrayidx81 = getelementptr inbounds [5 x i16], [5 x i16]* @NCT6779_REG_CRITICAL_PWM_ENABLE, i64 0, i64 %idxprom80
  %25 = load i16, i16* %arrayidx81, align 2, !tbaa !13
  %conv82 = zext i8 %conv78 to i16
  %call83 = call i32 @nct6775_write_value(%struct.nct6775_data* %0, i16 zeroext %25, i16 zeroext %conv82)
  br label %if.end84

NewDefault:                                       ; preds = %LeafBlock2, %LeafBlock
  br label %if.end84

if.end84:                                         ; preds = %NewDefault, %sw.bb, %sw.bb60, %if.then31
  %update_lock85 = getelementptr inbounds %struct.nct6775_data, %struct.nct6775_data* %0, i32 0, i32 38
  call void @mutex_unlock(%struct.mutex* %update_lock85)
  br label %cleanup

cleanup:                                          ; preds = %if.then12, %if.end, %if.end84, %if.then
  %retval.0 = phi i64 [ %conv5, %if.then ], [ %count, %if.end84 ], [ -22, %if.end ], [ -22, %if.then12 ]
  %26 = bitcast i64* %val to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %26) #6
  ret i64 %retval.0
}

; Function Attrs: nounwind uwtable
define internal i64 @show_auto_temp(%struct.device* %dev, %struct.device_attribute* %attr, i8* %buf) #1 {
entry:
  %call = call %struct.nct6775_data* @nct6775_update_device(%struct.device* %dev)
  %0 = bitcast %struct.device_attribute* %attr to i8*
  %add.ptr = getelementptr inbounds i8, i8* %0, i64 0
  %1 = bitcast i8* %add.ptr to %struct.sensor_device_attribute_2*
  %nr1 = getelementptr inbounds %struct.sensor_device_attribute_2, %struct.sensor_device_attribute_2* %1, i32 0, i32 2
  %2 = load i8, i8* %nr1, align 1, !tbaa !93
  %conv = zext i8 %2 to i32
  %index = getelementptr inbounds %struct.sensor_device_attribute_2, %struct.sensor_device_attribute_2* %1, i32 0, i32 1
  %3 = load i8, i8* %index, align 8, !tbaa !97
  %conv2 = zext i8 %3 to i32
  %auto_temp = getelementptr inbounds %struct.nct6775_data, %struct.nct6775_data* %call, i32 0, i32 71
  %idxprom = sext i32 %conv to i64
  %arrayidx = getelementptr inbounds [5 x [7 x i8]], [5 x [7 x i8]]* %auto_temp, i64 0, i64 %idxprom
  %idxprom3 = sext i32 %conv2 to i64
  %arrayidx4 = getelementptr inbounds [7 x i8], [7 x i8]* %arrayidx, i64 0, i64 %idxprom3
  %4 = load i8, i8* %arrayidx4, align 1, !tbaa !88
  %conv5 = zext i8 %4 to i32
  %mul = mul nsw i32 %conv5, 1000
  %call6 = call i32 (i8*, i8*, ...) @sprintf(i8* %buf, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.41, i32 0, i32 0), i32 %mul)
  %conv7 = sext i32 %call6 to i64
  ret i64 %conv7
}

; Function Attrs: nounwind uwtable
define internal i64 @store_auto_temp(%struct.device* %dev, %struct.device_attribute* %attr, i8* %buf, i64 %count) #1 {
entry:
  %val = alloca i64, align 8
  %call = call i8* @dev_get_drvdata(%struct.device* %dev)
  %0 = bitcast i8* %call to %struct.nct6775_data*
  %1 = bitcast %struct.device_attribute* %attr to i8*
  %add.ptr = getelementptr inbounds i8, i8* %1, i64 0
  %2 = bitcast i8* %add.ptr to %struct.sensor_device_attribute_2*
  %nr1 = getelementptr inbounds %struct.sensor_device_attribute_2, %struct.sensor_device_attribute_2* %2, i32 0, i32 2
  %3 = load i8, i8* %nr1, align 1, !tbaa !93
  %conv = zext i8 %3 to i32
  %index = getelementptr inbounds %struct.sensor_device_attribute_2, %struct.sensor_device_attribute_2* %2, i32 0, i32 1
  %4 = load i8, i8* %index, align 8, !tbaa !97
  %conv2 = zext i8 %4 to i32
  %5 = bitcast i64* %val to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %5) #6
  %call3 = call i32 @kstrtoul(i8* %buf, i32 10, i64* %val)
  %tobool = icmp ne i32 %call3, 0
  br i1 %tobool, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %conv4 = sext i32 %call3 to i64
  br label %cleanup

if.end:                                           ; preds = %entry
  %6 = load i64, i64* %val, align 8, !tbaa !23
  %cmp = icmp ugt i64 %6, 255000
  br i1 %cmp, label %cleanup, label %if.end7

if.end7:                                          ; preds = %if.end
  %update_lock = getelementptr inbounds %struct.nct6775_data, %struct.nct6775_data* %0, i32 0, i32 38
  call void @mutex_lock(%struct.mutex* %update_lock)
  %7 = load i64, i64* %val, align 8, !tbaa !23
  %div = sdiv i32 1000, 2
  %conv9 = sext i32 %div to i64
  %add = add i64 %7, %conv9
  %conv10 = sext i32 1000 to i64
  %div11 = udiv i64 %add, %conv10
  %conv12 = trunc i64 %div11 to i8
  %auto_temp = getelementptr inbounds %struct.nct6775_data, %struct.nct6775_data* %0, i32 0, i32 71
  %idxprom = sext i32 %conv to i64
  %arrayidx = getelementptr inbounds [5 x [7 x i8]], [5 x [7 x i8]]* %auto_temp, i64 0, i64 %idxprom
  %idxprom13 = sext i32 %conv2 to i64
  %arrayidx14 = getelementptr inbounds [7 x i8], [7 x i8]* %arrayidx, i64 0, i64 %idxprom13
  store i8 %conv12, i8* %arrayidx14, align 1, !tbaa !88
  %auto_pwm_num = getelementptr inbounds %struct.nct6775_data, %struct.nct6775_data* %0, i32 0, i32 69
  %8 = load i32, i32* %auto_pwm_num, align 4, !tbaa !51
  %cmp15 = icmp slt i32 %conv2, %8
  br i1 %cmp15, label %if.then17, label %if.else

if.then17:                                        ; preds = %if.end7
  %REG_AUTO_TEMP = getelementptr inbounds %struct.nct6775_data, %struct.nct6775_data* %0, i32 0, i32 26
  %9 = load i16*, i16** %REG_AUTO_TEMP, align 8, !tbaa !75
  %idxprom18 = sext i32 %conv to i64
  %arrayidx19 = getelementptr inbounds i16, i16* %9, i64 %idxprom18
  %10 = load i16, i16* %arrayidx19, align 2, !tbaa !13
  %conv20 = zext i16 %10 to i32
  %add21 = add nsw i32 %conv20, %conv2
  %conv22 = trunc i32 %add21 to i16
  %auto_temp23 = getelementptr inbounds %struct.nct6775_data, %struct.nct6775_data* %0, i32 0, i32 71
  %idxprom24 = sext i32 %conv to i64
  %arrayidx25 = getelementptr inbounds [5 x [7 x i8]], [5 x [7 x i8]]* %auto_temp23, i64 0, i64 %idxprom24
  %idxprom26 = sext i32 %conv2 to i64
  %arrayidx27 = getelementptr inbounds [7 x i8], [7 x i8]* %arrayidx25, i64 0, i64 %idxprom26
  %11 = load i8, i8* %arrayidx27, align 1, !tbaa !88
  %conv28 = zext i8 %11 to i16
  %call29 = call i32 @nct6775_write_value(%struct.nct6775_data* %0, i16 zeroext %conv22, i16 zeroext %conv28)
  br label %if.end39

if.else:                                          ; preds = %if.end7
  %REG_CRITICAL_TEMP = getelementptr inbounds %struct.nct6775_data, %struct.nct6775_data* %0, i32 0, i32 28
  %12 = load i16*, i16** %REG_CRITICAL_TEMP, align 8, !tbaa !77
  %idxprom30 = sext i32 %conv to i64
  %arrayidx31 = getelementptr inbounds i16, i16* %12, i64 %idxprom30
  %13 = load i16, i16* %arrayidx31, align 2, !tbaa !13
  %auto_temp32 = getelementptr inbounds %struct.nct6775_data, %struct.nct6775_data* %0, i32 0, i32 71
  %idxprom33 = sext i32 %conv to i64
  %arrayidx34 = getelementptr inbounds [5 x [7 x i8]], [5 x [7 x i8]]* %auto_temp32, i64 0, i64 %idxprom33
  %idxprom35 = sext i32 %conv2 to i64
  %arrayidx36 = getelementptr inbounds [7 x i8], [7 x i8]* %arrayidx34, i64 0, i64 %idxprom35
  %14 = load i8, i8* %arrayidx36, align 1, !tbaa !88
  %conv37 = zext i8 %14 to i16
  %call38 = call i32 @nct6775_write_value(%struct.nct6775_data* %0, i16 zeroext %13, i16 zeroext %conv37)
  br label %if.end39

if.end39:                                         ; preds = %if.else, %if.then17
  %update_lock40 = getelementptr inbounds %struct.nct6775_data, %struct.nct6775_data* %0, i32 0, i32 38
  call void @mutex_unlock(%struct.mutex* %update_lock40)
  br label %cleanup

cleanup:                                          ; preds = %if.end, %if.end39, %if.then
  %retval.0 = phi i64 [ %conv4, %if.then ], [ %count, %if.end39 ], [ -22, %if.end ]
  %15 = bitcast i64* %val to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %15) #6
  ret i64 %retval.0
}

; Function Attrs: nounwind uwtable
define internal i64 @show_in_reg(%struct.device* %dev, %struct.device_attribute* %attr, i8* %buf) #1 {
entry:
  %call = call %struct.nct6775_data* @nct6775_update_device(%struct.device* %dev)
  %0 = bitcast %struct.device_attribute* %attr to i8*
  %add.ptr = getelementptr inbounds i8, i8* %0, i64 0
  %1 = bitcast i8* %add.ptr to %struct.sensor_device_attribute_2*
  %nr1 = getelementptr inbounds %struct.sensor_device_attribute_2, %struct.sensor_device_attribute_2* %1, i32 0, i32 2
  %2 = load i8, i8* %nr1, align 1, !tbaa !93
  %conv = zext i8 %2 to i32
  %index2 = getelementptr inbounds %struct.sensor_device_attribute_2, %struct.sensor_device_attribute_2* %1, i32 0, i32 1
  %3 = load i8, i8* %index2, align 8, !tbaa !97
  %conv3 = zext i8 %3 to i32
  %in = getelementptr inbounds %struct.nct6775_data, %struct.nct6775_data* %call, i32 0, i32 43
  %idxprom = sext i32 %conv to i64
  %arrayidx = getelementptr inbounds [15 x [3 x i8]], [15 x [3 x i8]]* %in, i64 0, i64 %idxprom
  %idxprom4 = sext i32 %conv3 to i64
  %arrayidx5 = getelementptr inbounds [3 x i8], [3 x i8]* %arrayidx, i64 0, i64 %idxprom4
  %4 = load i8, i8* %arrayidx5, align 1, !tbaa !88
  %conv6 = trunc i32 %conv to i8
  %call7 = call i64 @in_from_reg(i8 zeroext %4, i8 zeroext %conv6)
  %call8 = call i32 (i8*, i8*, ...) @sprintf(i8* %buf, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.225, i32 0, i32 0), i64 %call7)
  %conv9 = sext i32 %call8 to i64
  ret i64 %conv9
}

; Function Attrs: inlinehint nounwind uwtable
define internal i64 @in_from_reg(i8 zeroext %reg, i8 zeroext %nr) #0 {
entry:
  %conv = zext i8 %reg to i32
  %idxprom = zext i8 %nr to i64
  %arrayidx = getelementptr inbounds [15 x i16], [15 x i16]* @scale_in, i64 0, i64 %idxprom
  %0 = load i16, i16* %arrayidx, align 2, !tbaa !13
  %conv1 = zext i16 %0 to i32
  %mul = mul nsw i32 %conv, %conv1
  %cmp = icmp sgt i32 %mul, 0
  %div = sdiv i32 100, 2
  %sub = sub nsw i32 %mul, %div
  %add = add nsw i32 %mul, %div
  %sub.sink = select i1 %cmp, i32 %add, i32 %sub
  %div5 = sdiv i32 %sub.sink, 100
  %conv6 = sext i32 %div5 to i64
  ret i64 %conv6
}

; Function Attrs: nounwind uwtable
define internal i64 @store_in_reg(%struct.device* %dev, %struct.device_attribute* %attr, i8* %buf, i64 %count) #1 {
entry:
  %val = alloca i64, align 8
  %call = call i8* @dev_get_drvdata(%struct.device* %dev)
  %0 = bitcast i8* %call to %struct.nct6775_data*
  %1 = bitcast %struct.device_attribute* %attr to i8*
  %add.ptr = getelementptr inbounds i8, i8* %1, i64 0
  %2 = bitcast i8* %add.ptr to %struct.sensor_device_attribute_2*
  %nr1 = getelementptr inbounds %struct.sensor_device_attribute_2, %struct.sensor_device_attribute_2* %2, i32 0, i32 2
  %3 = load i8, i8* %nr1, align 1, !tbaa !93
  %conv = zext i8 %3 to i32
  %index2 = getelementptr inbounds %struct.sensor_device_attribute_2, %struct.sensor_device_attribute_2* %2, i32 0, i32 1
  %4 = load i8, i8* %index2, align 8, !tbaa !97
  %conv3 = zext i8 %4 to i32
  %5 = bitcast i64* %val to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %5) #6
  %call4 = call i32 @kstrtoul(i8* %buf, i32 10, i64* %val)
  %cmp = icmp slt i32 %call4, 0
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %conv6 = sext i32 %call4 to i64
  br label %cleanup

if.end:                                           ; preds = %entry
  %update_lock = getelementptr inbounds %struct.nct6775_data, %struct.nct6775_data* %0, i32 0, i32 38
  call void @mutex_lock(%struct.mutex* %update_lock)
  %6 = load i64, i64* %val, align 8, !tbaa !23
  %conv7 = trunc i64 %6 to i32
  %conv8 = trunc i32 %conv to i8
  %call9 = call zeroext i8 @in_to_reg(i32 %conv7, i8 zeroext %conv8)
  %in = getelementptr inbounds %struct.nct6775_data, %struct.nct6775_data* %0, i32 0, i32 43
  %idxprom = sext i32 %conv to i64
  %arrayidx = getelementptr inbounds [15 x [3 x i8]], [15 x [3 x i8]]* %in, i64 0, i64 %idxprom
  %idxprom10 = sext i32 %conv3 to i64
  %arrayidx11 = getelementptr inbounds [3 x i8], [3 x i8]* %arrayidx, i64 0, i64 %idxprom10
  store i8 %call9, i8* %arrayidx11, align 1, !tbaa !88
  %REG_IN_MINMAX = getelementptr inbounds %struct.nct6775_data, %struct.nct6775_data* %0, i32 0, i32 14
  %sub = sub nsw i32 %conv3, 1
  %idxprom12 = sext i32 %sub to i64
  %arrayidx13 = getelementptr inbounds [2 x i16*], [2 x i16*]* %REG_IN_MINMAX, i64 0, i64 %idxprom12
  %7 = load i16*, i16** %arrayidx13, align 8, !tbaa !12
  %idxprom14 = sext i32 %conv to i64
  %arrayidx15 = getelementptr inbounds i16, i16* %7, i64 %idxprom14
  %8 = load i16, i16* %arrayidx15, align 2, !tbaa !13
  %in16 = getelementptr inbounds %struct.nct6775_data, %struct.nct6775_data* %0, i32 0, i32 43
  %idxprom17 = sext i32 %conv to i64
  %arrayidx18 = getelementptr inbounds [15 x [3 x i8]], [15 x [3 x i8]]* %in16, i64 0, i64 %idxprom17
  %idxprom19 = sext i32 %conv3 to i64
  %arrayidx20 = getelementptr inbounds [3 x i8], [3 x i8]* %arrayidx18, i64 0, i64 %idxprom19
  %9 = load i8, i8* %arrayidx20, align 1, !tbaa !88
  %conv21 = zext i8 %9 to i16
  %call22 = call i32 @nct6775_write_value(%struct.nct6775_data* %0, i16 zeroext %8, i16 zeroext %conv21)
  %update_lock23 = getelementptr inbounds %struct.nct6775_data, %struct.nct6775_data* %0, i32 0, i32 38
  call void @mutex_unlock(%struct.mutex* %update_lock23)
  br label %cleanup

cleanup:                                          ; preds = %if.end, %if.then
  %retval.0 = phi i64 [ %conv6, %if.then ], [ %count, %if.end ]
  %10 = bitcast i64* %val to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %10) #6
  ret i64 %retval.0
}

; Function Attrs: inlinehint nounwind uwtable
define internal zeroext i8 @in_to_reg(i32 %val, i8 zeroext %nr) #0 {
entry:
  %mul = mul i32 %val, 100
  %idxprom = zext i8 %nr to i64
  %arrayidx = getelementptr inbounds [15 x i16], [15 x i16]* @scale_in, i64 0, i64 %idxprom
  %0 = load i16, i16* %arrayidx, align 2, !tbaa !13
  %conv = zext i16 %0 to i32
  %div = sdiv i32 %conv, 2
  %add = add i32 %mul, %div
  %conv1 = zext i16 %0 to i32
  %div2 = udiv i32 %add, %conv1
  %cmp = icmp ult i32 %div2, 0
  %.div2 = select i1 %cmp, i32 0, i32 %div2
  %cmp5 = icmp ugt i32 %.div2, 255
  %cond10 = select i1 %cmp5, i32 255, i32 %.div2
  %conv11 = trunc i32 %cond10 to i8
  ret i8 %conv11
}

; Function Attrs: nounwind uwtable
define internal i64 @show_alarm(%struct.device* %dev, %struct.device_attribute* %attr, i8* %buf) #1 {
entry:
  %call = call %struct.nct6775_data* @nct6775_update_device(%struct.device* %dev)
  %0 = bitcast %struct.device_attribute* %attr to i8*
  %add.ptr = getelementptr inbounds i8, i8* %0, i64 0
  %1 = bitcast i8* %add.ptr to %struct.sensor_device_attribute*
  %ALARM_BITS = getelementptr inbounds %struct.nct6775_data, %struct.nct6775_data* %call, i32 0, i32 12
  %2 = load i8*, i8** %ALARM_BITS, align 8, !tbaa !54
  %index = getelementptr inbounds %struct.sensor_device_attribute, %struct.sensor_device_attribute* %1, i32 0, i32 1
  %3 = load i32, i32* %index, align 8, !tbaa !108
  %idxprom = sext i32 %3 to i64
  %arrayidx = getelementptr inbounds i8, i8* %2, i64 %idxprom
  %4 = load i8, i8* %arrayidx, align 1, !tbaa !88
  %conv = sext i8 %4 to i32
  %alarms = getelementptr inbounds %struct.nct6775_data, %struct.nct6775_data* %call, i32 0, i32 56
  %5 = load i64, i64* %alarms, align 8, !tbaa !107
  %sh_prom = zext i32 %conv to i64
  %shr = lshr i64 %5, %sh_prom
  %and = and i64 %shr, 1
  %conv1 = trunc i64 %and to i32
  %call2 = call i32 (i8*, i8*, ...) @sprintf(i8* %buf, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.229, i32 0, i32 0), i32 %conv1)
  %conv3 = sext i32 %call2 to i64
  ret i64 %conv3
}

; Function Attrs: nounwind uwtable
define internal i64 @show_fan(%struct.device* %dev, %struct.device_attribute* %attr, i8* %buf) #1 {
entry:
  %call = call %struct.nct6775_data* @nct6775_update_device(%struct.device* %dev)
  %0 = bitcast %struct.device_attribute* %attr to i8*
  %add.ptr = getelementptr inbounds i8, i8* %0, i64 0
  %1 = bitcast i8* %add.ptr to %struct.sensor_device_attribute*
  %index = getelementptr inbounds %struct.sensor_device_attribute, %struct.sensor_device_attribute* %1, i32 0, i32 1
  %2 = load i32, i32* %index, align 8, !tbaa !108
  %rpm = getelementptr inbounds %struct.nct6775_data, %struct.nct6775_data* %call, i32 0, i32 44
  %idxprom = sext i32 %2 to i64
  %arrayidx = getelementptr inbounds [5 x i32], [5 x i32]* %rpm, i64 0, i64 %idxprom
  %3 = load i32, i32* %arrayidx, align 4, !tbaa !86
  %call1 = call i32 (i8*, i8*, ...) @sprintf(i8* %buf, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.41, i32 0, i32 0), i32 %3)
  %conv = sext i32 %call1 to i64
  ret i64 %conv
}

; Function Attrs: nounwind uwtable
define internal i64 @show_fan_div(%struct.device* %dev, %struct.device_attribute* %attr, i8* %buf) #1 {
entry:
  %call = call %struct.nct6775_data* @nct6775_update_device(%struct.device* %dev)
  %0 = bitcast %struct.device_attribute* %attr to i8*
  %add.ptr = getelementptr inbounds i8, i8* %0, i64 0
  %1 = bitcast i8* %add.ptr to %struct.sensor_device_attribute*
  %index = getelementptr inbounds %struct.sensor_device_attribute, %struct.sensor_device_attribute* %1, i32 0, i32 1
  %2 = load i32, i32* %index, align 8, !tbaa !108
  %fan_div = getelementptr inbounds %struct.nct6775_data, %struct.nct6775_data* %call, i32 0, i32 47
  %idxprom = sext i32 %2 to i64
  %arrayidx = getelementptr inbounds [5 x i8], [5 x i8]* %fan_div, i64 0, i64 %idxprom
  %3 = load i8, i8* %arrayidx, align 1, !tbaa !88
  %call1 = call i32 @div_from_reg(i8 zeroext %3)
  %call2 = call i32 (i8*, i8*, ...) @sprintf(i8* %buf, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.229, i32 0, i32 0), i32 %call1)
  %conv = sext i32 %call2 to i64
  ret i64 %conv
}

; Function Attrs: inlinehint nounwind uwtable
define internal i32 @div_from_reg(i8 zeroext %reg) #0 {
entry:
  %conv = zext i8 %reg to i32
  %shl = shl i32 1, %conv
  ret i32 %shl
}

; Function Attrs: nounwind uwtable
define internal i64 @show_fan_min(%struct.device* %dev, %struct.device_attribute* %attr, i8* %buf) #1 {
entry:
  %call = call %struct.nct6775_data* @nct6775_update_device(%struct.device* %dev)
  %0 = bitcast %struct.device_attribute* %attr to i8*
  %add.ptr = getelementptr inbounds i8, i8* %0, i64 0
  %1 = bitcast i8* %add.ptr to %struct.sensor_device_attribute*
  %index = getelementptr inbounds %struct.sensor_device_attribute, %struct.sensor_device_attribute* %1, i32 0, i32 1
  %2 = load i32, i32* %index, align 8, !tbaa !108
  %fan_from_reg_min = getelementptr inbounds %struct.nct6775_data, %struct.nct6775_data* %call, i32 0, i32 37
  %3 = load i32 (i16, i32)*, i32 (i16, i32)** %fan_from_reg_min, align 8, !tbaa !56
  %fan_min = getelementptr inbounds %struct.nct6775_data, %struct.nct6775_data* %call, i32 0, i32 45
  %idxprom = sext i32 %2 to i64
  %arrayidx = getelementptr inbounds [5 x i16], [5 x i16]* %fan_min, i64 0, i64 %idxprom
  %4 = load i16, i16* %arrayidx, align 2, !tbaa !13
  %fan_div = getelementptr inbounds %struct.nct6775_data, %struct.nct6775_data* %call, i32 0, i32 47
  %idxprom1 = sext i32 %2 to i64
  %arrayidx2 = getelementptr inbounds [5 x i8], [5 x i8]* %fan_div, i64 0, i64 %idxprom1
  %5 = load i8, i8* %arrayidx2, align 1, !tbaa !88
  %conv = zext i8 %5 to i32
  %call3 = call i32 %3(i16 zeroext %4, i32 %conv)
  %call4 = call i32 (i8*, i8*, ...) @sprintf(i8* %buf, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.41, i32 0, i32 0), i32 %call3)
  %conv5 = sext i32 %call4 to i64
  ret i64 %conv5
}

; Function Attrs: nounwind uwtable
define internal i64 @store_fan_min(%struct.device* %dev, %struct.device_attribute* %attr, i8* %buf, i64 %count) #1 {
entry:
  %val = alloca i64, align 8
  %call = call i8* @dev_get_drvdata(%struct.device* %dev)
  %0 = bitcast i8* %call to %struct.nct6775_data*
  %1 = bitcast %struct.device_attribute* %attr to i8*
  %add.ptr = getelementptr inbounds i8, i8* %1, i64 0
  %2 = bitcast i8* %add.ptr to %struct.sensor_device_attribute*
  %index = getelementptr inbounds %struct.sensor_device_attribute, %struct.sensor_device_attribute* %2, i32 0, i32 1
  %3 = load i32, i32* %index, align 8, !tbaa !108
  %4 = bitcast i64* %val to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %4) #6
  %call1 = call i32 @kstrtoul(i8* %buf, i32 10, i64* %val)
  %cmp = icmp slt i32 %call1, 0
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %conv = sext i32 %call1 to i64
  br label %cleanup

if.end:                                           ; preds = %entry
  %update_lock = getelementptr inbounds %struct.nct6775_data, %struct.nct6775_data* %0, i32 0, i32 38
  call void @mutex_lock(%struct.mutex* %update_lock)
  %has_fan_div = getelementptr inbounds %struct.nct6775_data, %struct.nct6775_data* %0, i32 0, i32 51
  %5 = load i8, i8* %has_fan_div, align 1, !tbaa !52, !range !101
  %tobool = trunc i8 %5 to i1
  %6 = load i64, i64* %val, align 8, !tbaa !23
  %tobool13 = icmp ne i64 %6, 0
  br i1 %tobool, label %if.end12, label %if.then2

if.then2:                                         ; preds = %if.end
  br i1 %tobool13, label %if.else, label %if.then4

if.then4:                                         ; preds = %if.then2
  store i64 65311, i64* %val, align 8, !tbaa !23
  br label %if.end10

if.else:                                          ; preds = %if.then2
  %7 = load i64, i64* %val, align 8, !tbaa !23
  %cmp5 = icmp ugt i64 %7, 1350000
  br i1 %cmp5, label %if.then7, label %if.end8

if.then7:                                         ; preds = %if.else
  store i64 135000, i64* %val, align 8, !tbaa !23
  br label %if.end8

if.end8:                                          ; preds = %if.then7, %if.else
  %8 = load i64, i64* %val, align 8, !tbaa !23
  %div = udiv i64 1350000, %8
  store i64 %div, i64* %val, align 8, !tbaa !23
  %9 = load i64, i64* %val, align 8, !tbaa !23
  %and = and i64 %9, 31
  %10 = load i64, i64* %val, align 8, !tbaa !23
  %shl = shl i64 %10, 3
  %and9 = and i64 %shl, 65280
  %or = or i64 %and, %and9
  store i64 %or, i64* %val, align 8, !tbaa !23
  br label %if.end10

if.end10:                                         ; preds = %if.end8, %if.then4
  %11 = load i64, i64* %val, align 8, !tbaa !23
  %conv11 = trunc i64 %11 to i16
  %fan_min = getelementptr inbounds %struct.nct6775_data, %struct.nct6775_data* %0, i32 0, i32 45
  %idxprom = sext i32 %3 to i64
  %arrayidx = getelementptr inbounds [5 x i16], [5 x i16]* %fan_min, i64 0, i64 %idxprom
  store i16 %conv11, i16* %arrayidx, align 2, !tbaa !13
  br label %write_min

if.end12:                                         ; preds = %if.end
  br i1 %tobool13, label %if.end21, label %if.then14

if.then14:                                        ; preds = %if.end12
  %fan_min15 = getelementptr inbounds %struct.nct6775_data, %struct.nct6775_data* %0, i32 0, i32 45
  %idxprom16 = sext i32 %3 to i64
  %arrayidx17 = getelementptr inbounds [5 x i16], [5 x i16]* %fan_min15, i64 0, i64 %idxprom16
  store i16 255, i16* %arrayidx17, align 2, !tbaa !13
  %fan_div = getelementptr inbounds %struct.nct6775_data, %struct.nct6775_data* %0, i32 0, i32 47
  %idxprom18 = sext i32 %3 to i64
  %arrayidx19 = getelementptr inbounds [5 x i8], [5 x i8]* %fan_div, i64 0, i64 %idxprom18
  %12 = load i8, i8* %arrayidx19, align 1, !tbaa !88
  %add = add nsw i32 %3, 1
  %call20 = call i32 (%struct.device*, i8*, ...) @_dev_info(%struct.device* %dev, i8* getelementptr inbounds ([36 x i8], [36 x i8]* @.str.306, i32 0, i32 0), i32 %add)
  br label %write_div

if.end21:                                         ; preds = %if.end12
  %13 = load i64, i64* %val, align 8, !tbaa !23
  %div22 = udiv i64 1350000, %13
  %conv23 = trunc i64 %div22 to i32
  %cmp24 = icmp uge i32 %conv23, 32640
  br i1 %cmp24, label %if.then26, label %if.else33

if.then26:                                        ; preds = %if.end21
  %fan_min27 = getelementptr inbounds %struct.nct6775_data, %struct.nct6775_data* %0, i32 0, i32 45
  %idxprom28 = sext i32 %3 to i64
  %arrayidx29 = getelementptr inbounds [5 x i16], [5 x i16]* %fan_min27, i64 0, i64 %idxprom28
  store i16 254, i16* %arrayidx29, align 2, !tbaa !13
  %add30 = add nsw i32 %3, 1
  %14 = load i64, i64* %val, align 8, !tbaa !23
  %fan_from_reg_min = getelementptr inbounds %struct.nct6775_data, %struct.nct6775_data* %0, i32 0, i32 37
  %15 = load i32 (i16, i32)*, i32 (i16, i32)** %fan_from_reg_min, align 8, !tbaa !56
  %call31 = call i32 %15(i16 zeroext 254, i32 7)
  %call32 = call i32 (%struct.device*, i8*, ...) @dev_warn(%struct.device* %dev, i8* getelementptr inbounds ([54 x i8], [54 x i8]* @.str.307, i32 0, i32 0), i32 %add30, i64 %14, i32 %call31)
  br label %write_div

if.else33:                                        ; preds = %if.end21
  %tobool34 = icmp ne i32 %conv23, 0
  br i1 %tobool34, label %if.else43, label %if.then35

if.then35:                                        ; preds = %if.else33
  %fan_min36 = getelementptr inbounds %struct.nct6775_data, %struct.nct6775_data* %0, i32 0, i32 45
  %idxprom37 = sext i32 %3 to i64
  %arrayidx38 = getelementptr inbounds [5 x i16], [5 x i16]* %fan_min36, i64 0, i64 %idxprom37
  store i16 1, i16* %arrayidx38, align 2, !tbaa !13
  %add39 = add nsw i32 %3, 1
  %16 = load i64, i64* %val, align 8, !tbaa !23
  %fan_from_reg_min40 = getelementptr inbounds %struct.nct6775_data, %struct.nct6775_data* %0, i32 0, i32 37
  %17 = load i32 (i16, i32)*, i32 (i16, i32)** %fan_from_reg_min40, align 8, !tbaa !56
  %call41 = call i32 %17(i16 zeroext 1, i32 0)
  %call42 = call i32 (%struct.device*, i8*, ...) @dev_warn(%struct.device* %dev, i8* getelementptr inbounds ([54 x i8], [54 x i8]* @.str.308, i32 0, i32 0), i32 %add39, i64 %16, i32 %call41)
  br label %write_div

if.else43:                                        ; preds = %if.else33
  br label %while.cond

while.cond:                                       ; preds = %while.body, %if.else43
  %reg.0 = phi i32 [ %conv23, %if.else43 ], [ %shr, %while.body ]
  %new_div.0 = phi i8 [ 0, %if.else43 ], [ %inc, %while.body ]
  %cmp44 = icmp ugt i32 %reg.0, 192
  %conv46 = zext i8 %new_div.0 to i32
  %cmp47 = icmp slt i32 %conv46, 7
  %18 = select i1 %cmp44, i1 %cmp47, i1 false
  br i1 %18, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %shr = lshr i32 %reg.0, 1
  %inc = add i8 %new_div.0, 1
  br label %while.cond

while.end:                                        ; preds = %while.cond
  %conv49 = trunc i32 %reg.0 to i16
  %fan_min50 = getelementptr inbounds %struct.nct6775_data, %struct.nct6775_data* %0, i32 0, i32 45
  %idxprom51 = sext i32 %3 to i64
  %arrayidx52 = getelementptr inbounds [5 x i16], [5 x i16]* %fan_min50, i64 0, i64 %idxprom51
  store i16 %conv49, i16* %arrayidx52, align 2, !tbaa !13
  br label %write_div

write_div:                                        ; preds = %if.then26, %while.end, %if.then35, %if.then14
  %new_div.3 = phi i8 [ %12, %if.then14 ], [ 7, %if.then26 ], [ %new_div.0, %while.end ], [ 0, %if.then35 ]
  %conv55 = zext i8 %new_div.3 to i32
  %fan_div56 = getelementptr inbounds %struct.nct6775_data, %struct.nct6775_data* %0, i32 0, i32 47
  %idxprom57 = sext i32 %3 to i64
  %arrayidx58 = getelementptr inbounds [5 x i8], [5 x i8]* %fan_div56, i64 0, i64 %idxprom57
  %19 = load i8, i8* %arrayidx58, align 1, !tbaa !88
  %conv59 = zext i8 %19 to i32
  %cmp60 = icmp ne i32 %conv55, %conv59
  br i1 %cmp60, label %if.then62, label %write_min

if.then62:                                        ; preds = %write_div
  %fan_div64 = getelementptr inbounds %struct.nct6775_data, %struct.nct6775_data* %0, i32 0, i32 47
  %idxprom65 = sext i32 %3 to i64
  %arrayidx66 = getelementptr inbounds [5 x i8], [5 x i8]* %fan_div64, i64 0, i64 %idxprom65
  store i8 %new_div.3, i8* %arrayidx66, align 1, !tbaa !88
  call void @nct6775_write_fan_div_common(%struct.nct6775_data* %0, i32 %3)
  %20 = load volatile i64, i64* @jiffies, align 8, !tbaa !23
  %last_updated = getelementptr inbounds %struct.nct6775_data, %struct.nct6775_data* %0, i32 0, i32 40
  store i64 %20, i64* %last_updated, align 8, !tbaa !105
  br label %write_min

write_min:                                        ; preds = %write_div, %if.then62, %if.end10
  %REG_FAN_MIN = getelementptr inbounds %struct.nct6775_data, %struct.nct6775_data* %0, i32 0, i32 18
  %21 = load i16*, i16** %REG_FAN_MIN, align 8, !tbaa !69
  %idxprom68 = sext i32 %3 to i64
  %arrayidx69 = getelementptr inbounds i16, i16* %21, i64 %idxprom68
  %22 = load i16, i16* %arrayidx69, align 2, !tbaa !13
  %fan_min70 = getelementptr inbounds %struct.nct6775_data, %struct.nct6775_data* %0, i32 0, i32 45
  %idxprom71 = sext i32 %3 to i64
  %arrayidx72 = getelementptr inbounds [5 x i16], [5 x i16]* %fan_min70, i64 0, i64 %idxprom71
  %23 = load i16, i16* %arrayidx72, align 2, !tbaa !13
  %call73 = call i32 @nct6775_write_value(%struct.nct6775_data* %0, i16 zeroext %22, i16 zeroext %23)
  %update_lock74 = getelementptr inbounds %struct.nct6775_data, %struct.nct6775_data* %0, i32 0, i32 38
  call void @mutex_unlock(%struct.mutex* %update_lock74)
  br label %cleanup

cleanup:                                          ; preds = %write_min, %if.then
  %retval.0 = phi i64 [ %conv, %if.then ], [ %count, %write_min ]
  %24 = bitcast i64* %val to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %24) #6
  ret i64 %retval.0
}

declare i32 @dev_warn(%struct.device*, i8*, ...) #2

; Function Attrs: nounwind uwtable
define internal i64 @show_fan_pulses(%struct.device* %dev, %struct.device_attribute* %attr, i8* %buf) #1 {
entry:
  %call = call %struct.nct6775_data* @nct6775_update_device(%struct.device* %dev)
  %0 = bitcast %struct.device_attribute* %attr to i8*
  %add.ptr = getelementptr inbounds i8, i8* %0, i64 0
  %1 = bitcast i8* %add.ptr to %struct.sensor_device_attribute*
  %fan_pulses = getelementptr inbounds %struct.nct6775_data, %struct.nct6775_data* %call, i32 0, i32 46
  %index = getelementptr inbounds %struct.sensor_device_attribute, %struct.sensor_device_attribute* %1, i32 0, i32 1
  %2 = load i32, i32* %index, align 8, !tbaa !108
  %idxprom = sext i32 %2 to i64
  %arrayidx = getelementptr inbounds [5 x i8], [5 x i8]* %fan_pulses, i64 0, i64 %idxprom
  %3 = load i8, i8* %arrayidx, align 1, !tbaa !88
  %conv = zext i8 %3 to i32
  %tobool = icmp ne i32 %conv, 0
  %conv. = select i1 %tobool, i32 %conv, i32 4
  %call1 = call i32 (i8*, i8*, ...) @sprintf(i8* %buf, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.41, i32 0, i32 0), i32 %conv.)
  %conv2 = sext i32 %call1 to i64
  ret i64 %conv2
}

; Function Attrs: nounwind uwtable
define internal i64 @store_fan_pulses(%struct.device* %dev, %struct.device_attribute* %attr, i8* %buf, i64 %count) #1 {
entry:
  %val = alloca i64, align 8
  %call = call i8* @dev_get_drvdata(%struct.device* %dev)
  %0 = bitcast i8* %call to %struct.nct6775_data*
  %1 = bitcast %struct.device_attribute* %attr to i8*
  %add.ptr = getelementptr inbounds i8, i8* %1, i64 0
  %2 = bitcast i8* %add.ptr to %struct.sensor_device_attribute*
  %index = getelementptr inbounds %struct.sensor_device_attribute, %struct.sensor_device_attribute* %2, i32 0, i32 1
  %3 = load i32, i32* %index, align 8, !tbaa !108
  %4 = bitcast i64* %val to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %4) #6
  %call1 = call i32 @kstrtoul(i8* %buf, i32 10, i64* %val)
  %cmp = icmp slt i32 %call1, 0
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %conv = sext i32 %call1 to i64
  br label %cleanup

if.end:                                           ; preds = %entry
  %5 = load i64, i64* %val, align 8, !tbaa !23
  %cmp2 = icmp ugt i64 %5, 4
  br i1 %cmp2, label %cleanup, label %if.end5

if.end5:                                          ; preds = %if.end
  %update_lock = getelementptr inbounds %struct.nct6775_data, %struct.nct6775_data* %0, i32 0, i32 38
  call void @mutex_lock(%struct.mutex* %update_lock)
  %6 = load i64, i64* %val, align 8, !tbaa !23
  %and = and i64 %6, 3
  %conv6 = trunc i64 %and to i8
  %fan_pulses = getelementptr inbounds %struct.nct6775_data, %struct.nct6775_data* %0, i32 0, i32 46
  %idxprom = sext i32 %3 to i64
  %arrayidx = getelementptr inbounds [5 x i8], [5 x i8]* %fan_pulses, i64 0, i64 %idxprom
  store i8 %conv6, i8* %arrayidx, align 1, !tbaa !88
  %REG_FAN_PULSES = getelementptr inbounds %struct.nct6775_data, %struct.nct6775_data* %0, i32 0, i32 19
  %7 = load i16*, i16** %REG_FAN_PULSES, align 8, !tbaa !70
  %idxprom7 = sext i32 %3 to i64
  %arrayidx8 = getelementptr inbounds i16, i16* %7, i64 %idxprom7
  %8 = load i16, i16* %arrayidx8, align 2, !tbaa !13
  %9 = load i64, i64* %val, align 8, !tbaa !23
  %and9 = and i64 %9, 3
  %conv10 = trunc i64 %and9 to i16
  %call11 = call i32 @nct6775_write_value(%struct.nct6775_data* %0, i16 zeroext %8, i16 zeroext %conv10)
  %update_lock12 = getelementptr inbounds %struct.nct6775_data, %struct.nct6775_data* %0, i32 0, i32 38
  call void @mutex_unlock(%struct.mutex* %update_lock12)
  br label %cleanup

cleanup:                                          ; preds = %if.end, %if.end5, %if.then
  %retval.0 = phi i64 [ %conv, %if.then ], [ %count, %if.end5 ], [ -22, %if.end ]
  %10 = bitcast i64* %val to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %10) #6
  ret i64 %retval.0
}

; Function Attrs: nounwind uwtable
define internal i64 @show_temp(%struct.device* %dev, %struct.device_attribute* %attr, i8* %buf) #1 {
entry:
  %call = call %struct.nct6775_data* @nct6775_update_device(%struct.device* %dev)
  %0 = bitcast %struct.device_attribute* %attr to i8*
  %add.ptr = getelementptr inbounds i8, i8* %0, i64 0
  %1 = bitcast i8* %add.ptr to %struct.sensor_device_attribute_2*
  %nr1 = getelementptr inbounds %struct.sensor_device_attribute_2, %struct.sensor_device_attribute_2* %1, i32 0, i32 2
  %2 = load i8, i8* %nr1, align 1, !tbaa !93
  %conv = zext i8 %2 to i32
  %index2 = getelementptr inbounds %struct.sensor_device_attribute_2, %struct.sensor_device_attribute_2* %1, i32 0, i32 1
  %3 = load i8, i8* %index2, align 8, !tbaa !97
  %conv3 = zext i8 %3 to i32
  %temp = getelementptr inbounds %struct.nct6775_data, %struct.nct6775_data* %call, i32 0, i32 55
  %idxprom = sext i32 %conv3 to i64
  %arrayidx = getelementptr inbounds [4 x [10 x i16]], [4 x [10 x i16]]* %temp, i64 0, i64 %idxprom
  %idxprom4 = sext i32 %conv to i64
  %arrayidx5 = getelementptr inbounds [10 x i16], [10 x i16]* %arrayidx, i64 0, i64 %idxprom4
  %4 = load i16, i16* %arrayidx5, align 2, !tbaa !13
  %call6 = call i32 @LM75_TEMP_FROM_REG(i16 zeroext %4)
  %call7 = call i32 (i8*, i8*, ...) @sprintf(i8* %buf, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.41, i32 0, i32 0), i32 %call6)
  %conv8 = sext i32 %call7 to i64
  ret i64 %conv8
}

; Function Attrs: inlinehint nounwind uwtable
define internal i32 @LM75_TEMP_FROM_REG(i16 zeroext %reg) #0 {
entry:
  %conv = sext i16 %reg to i32
  %div = sdiv i32 %conv, 128
  %mul = mul nsw i32 %div, 500
  ret i32 %mul
}

; Function Attrs: nounwind uwtable
define internal i64 @show_temp_label(%struct.device* %dev, %struct.device_attribute* %attr, i8* %buf) #1 {
entry:
  %call = call %struct.nct6775_data* @nct6775_update_device(%struct.device* %dev)
  %0 = bitcast %struct.device_attribute* %attr to i8*
  %add.ptr = getelementptr inbounds i8, i8* %0, i64 0
  %1 = bitcast i8* %add.ptr to %struct.sensor_device_attribute*
  %index = getelementptr inbounds %struct.sensor_device_attribute, %struct.sensor_device_attribute* %1, i32 0, i32 1
  %2 = load i32, i32* %index, align 8, !tbaa !108
  %temp_label = getelementptr inbounds %struct.nct6775_data, %struct.nct6775_data* %call, i32 0, i32 7
  %3 = load i8**, i8*** %temp_label, align 8, !tbaa !60
  %temp_src = getelementptr inbounds %struct.nct6775_data, %struct.nct6775_data* %call, i32 0, i32 5
  %idxprom = sext i32 %2 to i64
  %arrayidx = getelementptr inbounds [10 x i8], [10 x i8]* %temp_src, i64 0, i64 %idxprom
  %4 = load i8, i8* %arrayidx, align 1, !tbaa !88
  %idxprom1 = zext i8 %4 to i64
  %arrayidx2 = getelementptr inbounds i8*, i8** %3, i64 %idxprom1
  %5 = load i8*, i8** %arrayidx2, align 8, !tbaa !12
  %call3 = call i32 (i8*, i8*, ...) @sprintf(i8* %buf, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.334, i32 0, i32 0), i8* %5)
  %conv = sext i32 %call3 to i64
  ret i64 %conv
}

; Function Attrs: nounwind uwtable
define internal i64 @store_temp(%struct.device* %dev, %struct.device_attribute* %attr, i8* %buf, i64 %count) #1 {
entry:
  %val = alloca i64, align 8
  %call = call i8* @dev_get_drvdata(%struct.device* %dev)
  %0 = bitcast i8* %call to %struct.nct6775_data*
  %1 = bitcast %struct.device_attribute* %attr to i8*
  %add.ptr = getelementptr inbounds i8, i8* %1, i64 0
  %2 = bitcast i8* %add.ptr to %struct.sensor_device_attribute_2*
  %nr1 = getelementptr inbounds %struct.sensor_device_attribute_2, %struct.sensor_device_attribute_2* %2, i32 0, i32 2
  %3 = load i8, i8* %nr1, align 1, !tbaa !93
  %conv = zext i8 %3 to i32
  %index2 = getelementptr inbounds %struct.sensor_device_attribute_2, %struct.sensor_device_attribute_2* %2, i32 0, i32 1
  %4 = load i8, i8* %index2, align 8, !tbaa !97
  %conv3 = zext i8 %4 to i32
  %5 = bitcast i64* %val to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %5) #6
  %call4 = call i32 @kstrtol(i8* %buf, i32 10, i64* %val)
  %cmp = icmp slt i32 %call4, 0
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %conv6 = sext i32 %call4 to i64
  br label %cleanup

if.end:                                           ; preds = %entry
  %update_lock = getelementptr inbounds %struct.nct6775_data, %struct.nct6775_data* %0, i32 0, i32 38
  call void @mutex_lock(%struct.mutex* %update_lock)
  %6 = load i64, i64* %val, align 8, !tbaa !23
  %call7 = call zeroext i16 @LM75_TEMP_TO_REG(i64 %6)
  %temp = getelementptr inbounds %struct.nct6775_data, %struct.nct6775_data* %0, i32 0, i32 55
  %idxprom = sext i32 %conv3 to i64
  %arrayidx = getelementptr inbounds [4 x [10 x i16]], [4 x [10 x i16]]* %temp, i64 0, i64 %idxprom
  %idxprom8 = sext i32 %conv to i64
  %arrayidx9 = getelementptr inbounds [10 x i16], [10 x i16]* %arrayidx, i64 0, i64 %idxprom8
  store i16 %call7, i16* %arrayidx9, align 2, !tbaa !13
  %reg_temp = getelementptr inbounds %struct.nct6775_data, %struct.nct6775_data* %0, i32 0, i32 4
  %idxprom10 = sext i32 %conv3 to i64
  %arrayidx11 = getelementptr inbounds [4 x [10 x i16]], [4 x [10 x i16]]* %reg_temp, i64 0, i64 %idxprom10
  %idxprom12 = sext i32 %conv to i64
  %arrayidx13 = getelementptr inbounds [10 x i16], [10 x i16]* %arrayidx11, i64 0, i64 %idxprom12
  %7 = load i16, i16* %arrayidx13, align 2, !tbaa !13
  %temp14 = getelementptr inbounds %struct.nct6775_data, %struct.nct6775_data* %0, i32 0, i32 55
  %idxprom15 = sext i32 %conv3 to i64
  %arrayidx16 = getelementptr inbounds [4 x [10 x i16]], [4 x [10 x i16]]* %temp14, i64 0, i64 %idxprom15
  %idxprom17 = sext i32 %conv to i64
  %arrayidx18 = getelementptr inbounds [10 x i16], [10 x i16]* %arrayidx16, i64 0, i64 %idxprom17
  %8 = load i16, i16* %arrayidx18, align 2, !tbaa !13
  %call19 = call i32 @nct6775_write_temp(%struct.nct6775_data* %0, i16 zeroext %7, i16 zeroext %8)
  %update_lock20 = getelementptr inbounds %struct.nct6775_data, %struct.nct6775_data* %0, i32 0, i32 38
  call void @mutex_unlock(%struct.mutex* %update_lock20)
  br label %cleanup

cleanup:                                          ; preds = %if.end, %if.then
  %retval.0 = phi i64 [ %conv6, %if.then ], [ %count, %if.end ]
  %9 = bitcast i64* %val to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %9) #6
  ret i64 %retval.0
}

; Function Attrs: inlinehint nounwind uwtable
define internal i32 @kstrtol(i8* %s, i32 %base, i64* %res) #0 {
entry:
  %call = call i32 @kstrtoll(i8* %s, i32 %base, i64* %res)
  ret i32 %call
}

; Function Attrs: inlinehint nounwind uwtable
define internal zeroext i16 @LM75_TEMP_TO_REG(i64 %temp) #0 {
entry:
  %cmp = icmp slt i64 %temp, -55000
  %.temp = select i1 %cmp, i64 -55000, i64 %temp
  %cmp1 = icmp sgt i64 %.temp, 125000
  %cond5 = select i1 %cmp1, i64 125000, i64 %.temp
  %conv = trunc i64 %cond5 to i32
  %cmp6 = icmp slt i32 %conv, 0
  %0 = zext i1 %cmp6 to i64
  %cond8 = select i1 %cmp6, i32 -250, i32 250
  %add = add nsw i32 %conv, %cond8
  %div = sdiv i32 %add, 500
  %shl = shl i32 %div, 7
  %conv9 = trunc i32 %shl to i16
  ret i16 %conv9
}

; Function Attrs: nounwind uwtable
define internal i32 @nct6775_write_temp(%struct.nct6775_data* %data, i16 zeroext %reg, i16 zeroext %value) #1 {
entry:
  %call = call zeroext i1 @is_word_sized(%struct.nct6775_data* %data, i16 zeroext %reg)
  %conv = zext i16 %value to i32
  %shr = ashr i32 %conv, 8
  %conv1 = trunc i32 %shr to i16
  %value.addr.0 = select i1 %call, i16 %value, i16 %conv1
  %call2 = call i32 @nct6775_write_value(%struct.nct6775_data* %data, i16 zeroext %reg, i16 zeroext %value.addr.0)
  ret i32 %call2
}

declare i32 @kstrtoll(i8*, i32, i64*) #2

; Function Attrs: nounwind uwtable
define internal i64 @show_temp_type(%struct.device* %dev, %struct.device_attribute* %attr, i8* %buf) #1 {
entry:
  %call = call %struct.nct6775_data* @nct6775_update_device(%struct.device* %dev)
  %0 = bitcast %struct.device_attribute* %attr to i8*
  %add.ptr = getelementptr inbounds i8, i8* %0, i64 0
  %1 = bitcast i8* %add.ptr to %struct.sensor_device_attribute*
  %index = getelementptr inbounds %struct.sensor_device_attribute, %struct.sensor_device_attribute* %1, i32 0, i32 1
  %2 = load i32, i32* %index, align 8, !tbaa !108
  %temp_type = getelementptr inbounds %struct.nct6775_data, %struct.nct6775_data* %call, i32 0, i32 53
  %idxprom = sext i32 %2 to i64
  %arrayidx = getelementptr inbounds [6 x i8], [6 x i8]* %temp_type, i64 0, i64 %idxprom
  %3 = load i8, i8* %arrayidx, align 1, !tbaa !88
  %conv = zext i8 %3 to i32
  %call1 = call i32 (i8*, i8*, ...) @sprintf(i8* %buf, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.41, i32 0, i32 0), i32 %conv)
  %conv2 = sext i32 %call1 to i64
  ret i64 %conv2
}

; Function Attrs: nounwind uwtable
define internal i64 @store_temp_type(%struct.device* %dev, %struct.device_attribute* %attr, i8* %buf, i64 %count) #1 {
entry:
  %val = alloca i64, align 8
  %call = call %struct.nct6775_data* @nct6775_update_device(%struct.device* %dev)
  %0 = bitcast %struct.device_attribute* %attr to i8*
  %add.ptr = getelementptr inbounds i8, i8* %0, i64 0
  %1 = bitcast i8* %add.ptr to %struct.sensor_device_attribute*
  %index = getelementptr inbounds %struct.sensor_device_attribute, %struct.sensor_device_attribute* %1, i32 0, i32 1
  %2 = load i32, i32* %index, align 8, !tbaa !108
  %3 = bitcast i64* %val to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %3) #6
  %call1 = call i32 @kstrtoul(i8* %buf, i32 10, i64* %val)
  %cmp = icmp slt i32 %call1, 0
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %conv = sext i32 %call1 to i64
  br label %cleanup

if.end:                                           ; preds = %entry
  %4 = load i64, i64* %val, align 8, !tbaa !23
  %cmp2 = icmp ne i64 %4, 1
  %5 = load i64, i64* %val, align 8
  %cmp4 = icmp ne i64 %5, 3
  %or.cond = and i1 %cmp2, %cmp4
  %6 = load i64, i64* %val, align 8
  %cmp7 = icmp ne i64 %6, 4
  %or.cond1 = and i1 %or.cond, %cmp7
  br i1 %or.cond1, label %cleanup, label %if.end10

if.end10:                                         ; preds = %if.end
  %update_lock = getelementptr inbounds %struct.nct6775_data, %struct.nct6775_data* %call, i32 0, i32 38
  call void @mutex_lock(%struct.mutex* %update_lock)
  %7 = load i64, i64* %val, align 8, !tbaa !23
  %conv11 = trunc i64 %7 to i8
  %temp_type = getelementptr inbounds %struct.nct6775_data, %struct.nct6775_data* %call, i32 0, i32 53
  %idxprom = sext i32 %2 to i64
  %arrayidx = getelementptr inbounds [6 x i8], [6 x i8]* %temp_type, i64 0, i64 %idxprom
  store i8 %conv11, i8* %arrayidx, align 1, !tbaa !88
  %REG_VBAT = getelementptr inbounds %struct.nct6775_data, %struct.nct6775_data* %call, i32 0, i32 10
  %8 = load i16, i16* %REG_VBAT, align 2, !tbaa !63
  %call12 = call zeroext i16 @nct6775_read_value(%struct.nct6775_data* %call, i16 zeroext %8)
  %conv13 = zext i16 %call12 to i32
  %shl = shl i32 2, %2
  %neg = xor i32 %shl, -1
  %and = and i32 %conv13, %neg
  %conv14 = trunc i32 %and to i8
  %REG_DIODE = getelementptr inbounds %struct.nct6775_data, %struct.nct6775_data* %call, i32 0, i32 11
  %9 = load i16, i16* %REG_DIODE, align 8, !tbaa !64
  %call15 = call zeroext i16 @nct6775_read_value(%struct.nct6775_data* %call, i16 zeroext %9)
  %conv16 = zext i16 %call15 to i32
  %shl17 = shl i32 2, %2
  %neg18 = xor i32 %shl17, -1
  %and19 = and i32 %conv16, %neg18
  %conv20 = trunc i32 %and19 to i8
  %shl21 = shl i32 2, %2
  %conv22 = trunc i32 %shl21 to i8
  %10 = load i64, i64* %val, align 8, !tbaa !23
  br label %NodeBlock

NodeBlock:                                        ; preds = %if.end10
  %Pivot = icmp slt i64 %10, 3
  br i1 %Pivot, label %LeafBlock, label %LeafBlock2

LeafBlock2:                                       ; preds = %NodeBlock
  %SwitchLeaf3 = icmp eq i64 %10, 3
  br i1 %SwitchLeaf3, label %sw.bb30, label %NewDefault

LeafBlock:                                        ; preds = %NodeBlock
  %SwitchLeaf = icmp eq i64 %10, 1
  br i1 %SwitchLeaf, label %sw.bb, label %NewDefault

sw.bb:                                            ; preds = %LeafBlock
  %conv23 = zext i8 %conv22 to i32
  %conv24 = zext i8 %conv14 to i32
  %or = or i32 %conv24, %conv23
  %conv25 = trunc i32 %or to i8
  %conv26 = zext i8 %conv22 to i32
  %conv27 = zext i8 %conv20 to i32
  %or28 = or i32 %conv27, %conv26
  %conv29 = trunc i32 %or28 to i8
  br label %sw.epilog

sw.bb30:                                          ; preds = %LeafBlock2
  %conv31 = zext i8 %conv22 to i32
  %conv32 = zext i8 %conv14 to i32
  %or33 = or i32 %conv32, %conv31
  %conv34 = trunc i32 %or33 to i8
  br label %sw.epilog

NewDefault:                                       ; preds = %LeafBlock2, %LeafBlock
  br label %sw.epilog

sw.epilog:                                        ; preds = %NewDefault, %sw.bb30, %sw.bb
  %vbat.0 = phi i8 [ %conv14, %NewDefault ], [ %conv34, %sw.bb30 ], [ %conv25, %sw.bb ]
  %diode.0 = phi i8 [ %conv20, %NewDefault ], [ %conv20, %sw.bb30 ], [ %conv29, %sw.bb ]
  %REG_VBAT35 = getelementptr inbounds %struct.nct6775_data, %struct.nct6775_data* %call, i32 0, i32 10
  %11 = load i16, i16* %REG_VBAT35, align 2, !tbaa !63
  %conv36 = zext i8 %vbat.0 to i16
  %call37 = call i32 @nct6775_write_value(%struct.nct6775_data* %call, i16 zeroext %11, i16 zeroext %conv36)
  %REG_DIODE38 = getelementptr inbounds %struct.nct6775_data, %struct.nct6775_data* %call, i32 0, i32 11
  %12 = load i16, i16* %REG_DIODE38, align 8, !tbaa !64
  %conv39 = zext i8 %diode.0 to i16
  %call40 = call i32 @nct6775_write_value(%struct.nct6775_data* %call, i16 zeroext %12, i16 zeroext %conv39)
  %update_lock41 = getelementptr inbounds %struct.nct6775_data, %struct.nct6775_data* %call, i32 0, i32 38
  call void @mutex_unlock(%struct.mutex* %update_lock41)
  br label %cleanup

cleanup:                                          ; preds = %if.end, %sw.epilog, %if.then
  %retval.0 = phi i64 [ %conv, %if.then ], [ %count, %sw.epilog ], [ -22, %if.end ]
  %13 = bitcast i64* %val to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %13) #6
  ret i64 %retval.0
}

; Function Attrs: nounwind uwtable
define internal i64 @show_temp_offset(%struct.device* %dev, %struct.device_attribute* %attr, i8* %buf) #1 {
entry:
  %call = call %struct.nct6775_data* @nct6775_update_device(%struct.device* %dev)
  %0 = bitcast %struct.device_attribute* %attr to i8*
  %add.ptr = getelementptr inbounds i8, i8* %0, i64 0
  %1 = bitcast i8* %add.ptr to %struct.sensor_device_attribute*
  %temp_offset = getelementptr inbounds %struct.nct6775_data, %struct.nct6775_data* %call, i32 0, i32 54
  %index = getelementptr inbounds %struct.sensor_device_attribute, %struct.sensor_device_attribute* %1, i32 0, i32 1
  %2 = load i32, i32* %index, align 8, !tbaa !108
  %idxprom = sext i32 %2 to i64
  %arrayidx = getelementptr inbounds [6 x i8], [6 x i8]* %temp_offset, i64 0, i64 %idxprom
  %3 = load i8, i8* %arrayidx, align 1, !tbaa !88
  %conv = sext i8 %3 to i32
  %mul = mul nsw i32 %conv, 1000
  %call1 = call i32 (i8*, i8*, ...) @sprintf(i8* %buf, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.41, i32 0, i32 0), i32 %mul)
  %conv2 = sext i32 %call1 to i64
  ret i64 %conv2
}

; Function Attrs: nounwind uwtable
define internal i64 @store_temp_offset(%struct.device* %dev, %struct.device_attribute* %attr, i8* %buf, i64 %count) #1 {
entry:
  %val = alloca i64, align 8
  %call = call i8* @dev_get_drvdata(%struct.device* %dev)
  %0 = bitcast i8* %call to %struct.nct6775_data*
  %1 = bitcast %struct.device_attribute* %attr to i8*
  %add.ptr = getelementptr inbounds i8, i8* %1, i64 0
  %2 = bitcast i8* %add.ptr to %struct.sensor_device_attribute*
  %index = getelementptr inbounds %struct.sensor_device_attribute, %struct.sensor_device_attribute* %2, i32 0, i32 1
  %3 = load i32, i32* %index, align 8, !tbaa !108
  %4 = bitcast i64* %val to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %4) #6
  %call1 = call i32 @kstrtol(i8* %buf, i32 10, i64* %val)
  %cmp = icmp slt i32 %call1, 0
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %conv = sext i32 %call1 to i64
  br label %cleanup

if.end:                                           ; preds = %entry
  %5 = load i64, i64* %val, align 8, !tbaa !23
  %cmp3 = icmp sgt i64 %5, 0
  %div = sdiv i32 1000, 2
  %conv5 = sext i32 %div to i64
  %sub = sub nsw i64 %5, %conv5
  %add = add nsw i64 %5, %conv5
  %sub.sink = select i1 %cmp3, i64 %add, i64 %sub
  %conv10 = sext i32 1000 to i64
  %div11 = sdiv i64 %sub.sink, %conv10
  %cmp12 = icmp slt i64 %div11, -128
  %.div11 = select i1 %cmp12, i64 -128, i64 %div11
  %cmp19 = icmp sgt i64 %.div11, 127
  %cond24 = select i1 %cmp19, i64 127, i64 %.div11
  store i64 %cond24, i64* %val, align 8, !tbaa !23
  %update_lock = getelementptr inbounds %struct.nct6775_data, %struct.nct6775_data* %0, i32 0, i32 38
  call void @mutex_lock(%struct.mutex* %update_lock)
  %6 = load i64, i64* %val, align 8, !tbaa !23
  %conv25 = trunc i64 %6 to i8
  %temp_offset = getelementptr inbounds %struct.nct6775_data, %struct.nct6775_data* %0, i32 0, i32 54
  %idxprom = sext i32 %3 to i64
  %arrayidx = getelementptr inbounds [6 x i8], [6 x i8]* %temp_offset, i64 0, i64 %idxprom
  store i8 %conv25, i8* %arrayidx, align 1, !tbaa !88
  %REG_TEMP_OFFSET = getelementptr inbounds %struct.nct6775_data, %struct.nct6775_data* %0, i32 0, i32 34
  %7 = load i16*, i16** %REG_TEMP_OFFSET, align 8, !tbaa !79
  %idxprom26 = sext i32 %3 to i64
  %arrayidx27 = getelementptr inbounds i16, i16* %7, i64 %idxprom26
  %8 = load i16, i16* %arrayidx27, align 2, !tbaa !13
  %9 = load i64, i64* %val, align 8, !tbaa !23
  %conv28 = trunc i64 %9 to i16
  %call29 = call i32 @nct6775_write_value(%struct.nct6775_data* %0, i16 zeroext %8, i16 zeroext %conv28)
  %update_lock30 = getelementptr inbounds %struct.nct6775_data, %struct.nct6775_data* %0, i32 0, i32 38
  call void @mutex_unlock(%struct.mutex* %update_lock30)
  br label %cleanup

cleanup:                                          ; preds = %if.end, %if.then
  %retval.0 = phi i64 [ %conv, %if.then ], [ %count, %if.end ]
  %10 = bitcast i64* %val to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %10) #6
  ret i64 %retval.0
}

; Function Attrs: nounwind uwtable
define internal i64 @clear_caseopen(%struct.device* %dev, %struct.device_attribute* %attr, i8* %buf, i64 %count) #1 {
entry:
  %val = alloca i64, align 8
  %call = call i8* @dev_get_drvdata(%struct.device* %dev)
  %0 = bitcast i8* %call to %struct.nct6775_data*
  %platform_data = getelementptr inbounds %struct.device, %struct.device* %dev, i32 0, i32 8
  %1 = load i8*, i8** %platform_data, align 8, !tbaa !25
  %2 = bitcast i8* %1 to %struct.nct6775_sio_data*
  %3 = bitcast %struct.device_attribute* %attr to i8*
  %add.ptr = getelementptr inbounds i8, i8* %3, i64 0
  %4 = bitcast i8* %add.ptr to %struct.sensor_device_attribute*
  %index = getelementptr inbounds %struct.sensor_device_attribute, %struct.sensor_device_attribute* %4, i32 0, i32 1
  %5 = load i32, i32* %index, align 8, !tbaa !108
  %sub = sub nsw i32 %5, 30
  %6 = bitcast i64* %val to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %6) #6
  %call1 = call i32 @kstrtoul(i8* %buf, i32 10, i64* %val)
  %tobool = icmp ne i32 %call1, 0
  %7 = load i64, i64* %val, align 8
  %cmp = icmp ne i64 %7, 0
  %or.cond = or i1 %tobool, %cmp
  br i1 %or.cond, label %cleanup, label %if.end

if.end:                                           ; preds = %entry
  %update_lock = getelementptr inbounds %struct.nct6775_data, %struct.nct6775_data* %0, i32 0, i32 38
  call void @mutex_lock(%struct.mutex* %update_lock)
  %sioreg = getelementptr inbounds %struct.nct6775_sio_data, %struct.nct6775_sio_data* %2, i32 0, i32 0
  %8 = load i32, i32* %sioreg, align 4, !tbaa !89
  %call2 = call i32 @superio_enter(i32 %8)
  %tobool3 = icmp ne i32 %call2, 0
  br i1 %tobool3, label %if.then4, label %if.end5

if.then4:                                         ; preds = %if.end
  %conv = sext i32 %call2 to i64
  br label %error

if.end5:                                          ; preds = %if.end
  %sioreg6 = getelementptr inbounds %struct.nct6775_sio_data, %struct.nct6775_sio_data* %2, i32 0, i32 0
  %9 = load i32, i32* %sioreg6, align 4, !tbaa !89
  call void @superio_select(i32 %9, i32 10)
  %sioreg7 = getelementptr inbounds %struct.nct6775_sio_data, %struct.nct6775_sio_data* %2, i32 0, i32 0
  %10 = load i32, i32* %sioreg7, align 4, !tbaa !89
  %idxprom = sext i32 %sub to i64
  %arrayidx = getelementptr inbounds [2 x i8], [2 x i8]* @NCT6775_REG_CR_CASEOPEN_CLR, i64 0, i64 %idxprom
  %11 = load i8, i8* %arrayidx, align 1, !tbaa !88
  %conv8 = zext i8 %11 to i32
  %call9 = call i32 @superio_inb(i32 %10, i32 %conv8)
  %conv10 = trunc i32 %call9 to i8
  %idxprom11 = sext i32 %sub to i64
  %arrayidx12 = getelementptr inbounds [2 x i8], [2 x i8]* @NCT6775_CR_CASEOPEN_CLR_MASK, i64 0, i64 %idxprom11
  %12 = load i8, i8* %arrayidx12, align 1, !tbaa !88
  %conv13 = zext i8 %12 to i32
  %conv14 = zext i8 %conv10 to i32
  %or = or i32 %conv14, %conv13
  %conv15 = trunc i32 %or to i8
  %sioreg16 = getelementptr inbounds %struct.nct6775_sio_data, %struct.nct6775_sio_data* %2, i32 0, i32 0
  %13 = load i32, i32* %sioreg16, align 4, !tbaa !89
  %idxprom17 = sext i32 %sub to i64
  %arrayidx18 = getelementptr inbounds [2 x i8], [2 x i8]* @NCT6775_REG_CR_CASEOPEN_CLR, i64 0, i64 %idxprom17
  %14 = load i8, i8* %arrayidx18, align 1, !tbaa !88
  %conv19 = zext i8 %14 to i32
  %conv20 = zext i8 %conv15 to i32
  call void @superio_outb(i32 %13, i32 %conv19, i32 %conv20)
  %idxprom21 = sext i32 %sub to i64
  %arrayidx22 = getelementptr inbounds [2 x i8], [2 x i8]* @NCT6775_CR_CASEOPEN_CLR_MASK, i64 0, i64 %idxprom21
  %15 = load i8, i8* %arrayidx22, align 1, !tbaa !88
  %conv23 = zext i8 %15 to i32
  %neg = xor i32 %conv23, -1
  %conv24 = zext i8 %conv15 to i32
  %and = and i32 %conv24, %neg
  %conv25 = trunc i32 %and to i8
  %sioreg26 = getelementptr inbounds %struct.nct6775_sio_data, %struct.nct6775_sio_data* %2, i32 0, i32 0
  %16 = load i32, i32* %sioreg26, align 4, !tbaa !89
  %idxprom27 = sext i32 %sub to i64
  %arrayidx28 = getelementptr inbounds [2 x i8], [2 x i8]* @NCT6775_REG_CR_CASEOPEN_CLR, i64 0, i64 %idxprom27
  %17 = load i8, i8* %arrayidx28, align 1, !tbaa !88
  %conv29 = zext i8 %17 to i32
  %conv30 = zext i8 %conv25 to i32
  call void @superio_outb(i32 %16, i32 %conv29, i32 %conv30)
  %sioreg31 = getelementptr inbounds %struct.nct6775_sio_data, %struct.nct6775_sio_data* %2, i32 0, i32 0
  %18 = load i32, i32* %sioreg31, align 4, !tbaa !89
  call void @superio_exit(i32 %18)
  %valid = getelementptr inbounds %struct.nct6775_data, %struct.nct6775_data* %0, i32 0, i32 39
  store i8 0, i8* %valid, align 8, !tbaa !106
  br label %error

error:                                            ; preds = %if.end5, %if.then4
  %count.addr.0 = phi i64 [ %conv, %if.then4 ], [ %count, %if.end5 ]
  %update_lock32 = getelementptr inbounds %struct.nct6775_data, %struct.nct6775_data* %0, i32 0, i32 38
  call void @mutex_unlock(%struct.mutex* %update_lock32)
  br label %cleanup

cleanup:                                          ; preds = %entry, %error
  %retval.0 = phi i64 [ %count.addr.0, %error ], [ -22, %entry ]
  %19 = bitcast i64* %val to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %19) #6
  ret i64 %retval.0
}

; Function Attrs: nounwind uwtable
define internal i64 @show_name(%struct.device* %dev, %struct.device_attribute* %attr, i8* %buf) #1 {
entry:
  %call = call i8* @dev_get_drvdata(%struct.device* %dev)
  %0 = bitcast i8* %call to %struct.nct6775_data*
  %name = getelementptr inbounds %struct.nct6775_data, %struct.nct6775_data* %0, i32 0, i32 2
  %1 = load i8*, i8** %name, align 8, !tbaa !47
  %call1 = call i32 (i8*, i8*, ...) @sprintf(i8* %buf, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.334, i32 0, i32 0), i8* %1)
  %conv = sext i32 %call1 to i64
  ret i64 %conv
}

; Function Attrs: nounwind readnone
declare i64 @llvm.expect.i64(i64, i64) #5

declare void @sysfs_remove_group(%struct.kobject*, %struct.attribute_group*) #2

declare void @device_remove_file(%struct.device*, %struct.device_attribute*) #2

; Function Attrs: inlinehint nounwind uwtable
define internal i8* @platform_get_drvdata(%struct.platform_device* %pdev) #0 {
entry:
  %dev = getelementptr inbounds %struct.platform_device, %struct.platform_device* %pdev, i32 0, i32 3
  %call = call i8* @dev_get_drvdata(%struct.device* %dev)
  ret i8* %call
}

declare void @hwmon_device_unregister(%struct.device*) #2

; Function Attrs: nounwind uwtable
define internal i32 @nct6775_suspend(%struct.device* %dev) #1 {
entry:
  %call = call %struct.nct6775_data* @nct6775_update_device(%struct.device* %dev)
  %platform_data = getelementptr inbounds %struct.device, %struct.device* %dev, i32 0, i32 8
  %0 = load i8*, i8** %platform_data, align 8, !tbaa !25
  %1 = bitcast i8* %0 to %struct.nct6775_sio_data*
  %update_lock = getelementptr inbounds %struct.nct6775_data, %struct.nct6775_data* %call, i32 0, i32 38
  call void @mutex_lock(%struct.mutex* %update_lock)
  %REG_VBAT = getelementptr inbounds %struct.nct6775_data, %struct.nct6775_data* %call, i32 0, i32 10
  %2 = load i16, i16* %REG_VBAT, align 2, !tbaa !63
  %call1 = call zeroext i16 @nct6775_read_value(%struct.nct6775_data* %call, i16 zeroext %2)
  %conv = trunc i16 %call1 to i8
  %vbat = getelementptr inbounds %struct.nct6775_data, %struct.nct6775_data* %call, i32 0, i32 80
  store i8 %conv, i8* %vbat, align 8, !tbaa !110
  %kind = getelementptr inbounds %struct.nct6775_sio_data, %struct.nct6775_sio_data* %1, i32 0, i32 1
  %3 = load i32, i32* %kind, align 4, !tbaa !42
  %cmp = icmp eq i32 %3, 0
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %call3 = call zeroext i16 @nct6775_read_value(%struct.nct6775_data* %call, i16 zeroext 1286)
  %conv4 = trunc i16 %call3 to i8
  %fandiv1 = getelementptr inbounds %struct.nct6775_data, %struct.nct6775_data* %call, i32 0, i32 81
  store i8 %conv4, i8* %fandiv1, align 1, !tbaa !111
  %call5 = call zeroext i16 @nct6775_read_value(%struct.nct6775_data* %call, i16 zeroext 1287)
  %conv6 = trunc i16 %call5 to i8
  %fandiv2 = getelementptr inbounds %struct.nct6775_data, %struct.nct6775_data* %call, i32 0, i32 82
  store i8 %conv6, i8* %fandiv2, align 2, !tbaa !112
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  %update_lock7 = getelementptr inbounds %struct.nct6775_data, %struct.nct6775_data* %call, i32 0, i32 38
  call void @mutex_unlock(%struct.mutex* %update_lock7)
  ret i32 0
}

; Function Attrs: nounwind uwtable
define internal i32 @nct6775_resume(%struct.device* %dev) #1 {
entry:
  %call = call i8* @dev_get_drvdata(%struct.device* %dev)
  %0 = bitcast i8* %call to %struct.nct6775_data*
  %platform_data = getelementptr inbounds %struct.device, %struct.device* %dev, i32 0, i32 8
  %1 = load i8*, i8** %platform_data, align 8, !tbaa !25
  %2 = bitcast i8* %1 to %struct.nct6775_sio_data*
  %update_lock = getelementptr inbounds %struct.nct6775_data, %struct.nct6775_data* %0, i32 0, i32 38
  call void @mutex_lock(%struct.mutex* %update_lock)
  %bank = getelementptr inbounds %struct.nct6775_data, %struct.nct6775_data* %0, i32 0, i32 41
  store i8 -1, i8* %bank, align 8, !tbaa !48
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %i.0 = phi i32 [ 0, %entry ], [ %inc, %for.inc ]
  %in_num = getelementptr inbounds %struct.nct6775_data, %struct.nct6775_data* %0, i32 0, i32 42
  %3 = load i8, i8* %in_num, align 1, !tbaa !49
  %conv = zext i8 %3 to i32
  %cmp = icmp slt i32 %i.0, %conv
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %have_in = getelementptr inbounds %struct.nct6775_data, %struct.nct6775_data* %0, i32 0, i32 79
  %4 = load i16, i16* %have_in, align 2, !tbaa !84
  %conv2 = zext i16 %4 to i32
  %shl = shl i32 1, %i.0
  %and = and i32 %conv2, %shl
  %tobool = icmp ne i32 %and, 0
  br i1 %tobool, label %if.end, label %for.inc

if.end:                                           ; preds = %for.body
  %REG_IN_MINMAX = getelementptr inbounds %struct.nct6775_data, %struct.nct6775_data* %0, i32 0, i32 14
  %arrayidx = getelementptr inbounds [2 x i16*], [2 x i16*]* %REG_IN_MINMAX, i64 0, i64 0
  %5 = load i16*, i16** %arrayidx, align 8, !tbaa !12
  %idxprom = sext i32 %i.0 to i64
  %arrayidx3 = getelementptr inbounds i16, i16* %5, i64 %idxprom
  %6 = load i16, i16* %arrayidx3, align 2, !tbaa !13
  %in = getelementptr inbounds %struct.nct6775_data, %struct.nct6775_data* %0, i32 0, i32 43
  %idxprom4 = sext i32 %i.0 to i64
  %arrayidx5 = getelementptr inbounds [15 x [3 x i8]], [15 x [3 x i8]]* %in, i64 0, i64 %idxprom4
  %arrayidx6 = getelementptr inbounds [3 x i8], [3 x i8]* %arrayidx5, i64 0, i64 1
  %7 = load i8, i8* %arrayidx6, align 1, !tbaa !88
  %conv7 = zext i8 %7 to i16
  %call8 = call i32 @nct6775_write_value(%struct.nct6775_data* %0, i16 zeroext %6, i16 zeroext %conv7)
  %REG_IN_MINMAX9 = getelementptr inbounds %struct.nct6775_data, %struct.nct6775_data* %0, i32 0, i32 14
  %arrayidx10 = getelementptr inbounds [2 x i16*], [2 x i16*]* %REG_IN_MINMAX9, i64 0, i64 1
  %8 = load i16*, i16** %arrayidx10, align 8, !tbaa !12
  %idxprom11 = sext i32 %i.0 to i64
  %arrayidx12 = getelementptr inbounds i16, i16* %8, i64 %idxprom11
  %9 = load i16, i16* %arrayidx12, align 2, !tbaa !13
  %in13 = getelementptr inbounds %struct.nct6775_data, %struct.nct6775_data* %0, i32 0, i32 43
  %idxprom14 = sext i32 %i.0 to i64
  %arrayidx15 = getelementptr inbounds [15 x [3 x i8]], [15 x [3 x i8]]* %in13, i64 0, i64 %idxprom14
  %arrayidx16 = getelementptr inbounds [3 x i8], [3 x i8]* %arrayidx15, i64 0, i64 2
  %10 = load i8, i8* %arrayidx16, align 1, !tbaa !88
  %conv17 = zext i8 %10 to i16
  %call18 = call i32 @nct6775_write_value(%struct.nct6775_data* %0, i16 zeroext %9, i16 zeroext %conv17)
  br label %for.inc

for.inc:                                          ; preds = %for.body, %if.end
  %inc = add nsw i32 %i.0, 1
  br label %for.cond

for.end:                                          ; preds = %for.cond
  br label %for.cond19

for.cond19:                                       ; preds = %for.inc35, %for.end
  %i.1 = phi i32 [ 0, %for.end ], [ %inc36, %for.inc35 ]
  %conv20 = sext i32 %i.1 to i64
  %cmp21 = icmp ult i64 %conv20, 5
  br i1 %cmp21, label %for.body23, label %for.end37

for.body23:                                       ; preds = %for.cond19
  %has_fan_min = getelementptr inbounds %struct.nct6775_data, %struct.nct6775_data* %0, i32 0, i32 50
  %11 = load i8, i8* %has_fan_min, align 2, !tbaa !99
  %conv24 = zext i8 %11 to i32
  %shl25 = shl i32 1, %i.1
  %and26 = and i32 %conv24, %shl25
  %tobool27 = icmp ne i32 %and26, 0
  br i1 %tobool27, label %if.end29, label %for.inc35

if.end29:                                         ; preds = %for.body23
  %REG_FAN_MIN = getelementptr inbounds %struct.nct6775_data, %struct.nct6775_data* %0, i32 0, i32 18
  %12 = load i16*, i16** %REG_FAN_MIN, align 8, !tbaa !69
  %idxprom30 = sext i32 %i.1 to i64
  %arrayidx31 = getelementptr inbounds i16, i16* %12, i64 %idxprom30
  %13 = load i16, i16* %arrayidx31, align 2, !tbaa !13
  %fan_min = getelementptr inbounds %struct.nct6775_data, %struct.nct6775_data* %0, i32 0, i32 45
  %idxprom32 = sext i32 %i.1 to i64
  %arrayidx33 = getelementptr inbounds [5 x i16], [5 x i16]* %fan_min, i64 0, i64 %idxprom32
  %14 = load i16, i16* %arrayidx33, align 2, !tbaa !13
  %call34 = call i32 @nct6775_write_value(%struct.nct6775_data* %0, i16 zeroext %13, i16 zeroext %14)
  br label %for.inc35

for.inc35:                                        ; preds = %for.body23, %if.end29
  %inc36 = add nsw i32 %i.1, 1
  br label %for.cond19

for.end37:                                        ; preds = %for.cond19
  br label %for.cond38

for.cond38:                                       ; preds = %for.inc73, %for.end37
  %i.2 = phi i32 [ 0, %for.end37 ], [ %inc74, %for.inc73 ]
  %cmp39 = icmp slt i32 %i.2, 10
  br i1 %cmp39, label %for.body41, label %for.end75

for.body41:                                       ; preds = %for.cond38
  %have_temp = getelementptr inbounds %struct.nct6775_data, %struct.nct6775_data* %0, i32 0, i32 77
  %15 = load i16, i16* %have_temp, align 2, !tbaa !85
  %conv42 = zext i16 %15 to i32
  %shl43 = shl i32 1, %i.2
  %and44 = and i32 %conv42, %shl43
  %tobool45 = icmp ne i32 %and44, 0
  br i1 %tobool45, label %if.end47, label %for.inc73

if.end47:                                         ; preds = %for.body41
  br label %for.cond48

for.cond48:                                       ; preds = %for.inc70, %if.end47
  %j.0 = phi i32 [ 1, %if.end47 ], [ %inc71, %for.inc70 ]
  %conv49 = sext i32 %j.0 to i64
  %cmp50 = icmp ult i64 %conv49, 4
  br i1 %cmp50, label %for.body52, label %for.inc73

for.body52:                                       ; preds = %for.cond48
  %reg_temp = getelementptr inbounds %struct.nct6775_data, %struct.nct6775_data* %0, i32 0, i32 4
  %idxprom53 = sext i32 %j.0 to i64
  %arrayidx54 = getelementptr inbounds [4 x [10 x i16]], [4 x [10 x i16]]* %reg_temp, i64 0, i64 %idxprom53
  %idxprom55 = sext i32 %i.2 to i64
  %arrayidx56 = getelementptr inbounds [10 x i16], [10 x i16]* %arrayidx54, i64 0, i64 %idxprom55
  %16 = load i16, i16* %arrayidx56, align 2, !tbaa !13
  %tobool57 = icmp ne i16 %16, 0
  br i1 %tobool57, label %if.then58, label %for.inc70

if.then58:                                        ; preds = %for.body52
  %reg_temp59 = getelementptr inbounds %struct.nct6775_data, %struct.nct6775_data* %0, i32 0, i32 4
  %idxprom60 = sext i32 %j.0 to i64
  %arrayidx61 = getelementptr inbounds [4 x [10 x i16]], [4 x [10 x i16]]* %reg_temp59, i64 0, i64 %idxprom60
  %idxprom62 = sext i32 %i.2 to i64
  %arrayidx63 = getelementptr inbounds [10 x i16], [10 x i16]* %arrayidx61, i64 0, i64 %idxprom62
  %17 = load i16, i16* %arrayidx63, align 2, !tbaa !13
  %temp = getelementptr inbounds %struct.nct6775_data, %struct.nct6775_data* %0, i32 0, i32 55
  %idxprom64 = sext i32 %j.0 to i64
  %arrayidx65 = getelementptr inbounds [4 x [10 x i16]], [4 x [10 x i16]]* %temp, i64 0, i64 %idxprom64
  %idxprom66 = sext i32 %i.2 to i64
  %arrayidx67 = getelementptr inbounds [10 x i16], [10 x i16]* %arrayidx65, i64 0, i64 %idxprom66
  %18 = load i16, i16* %arrayidx67, align 2, !tbaa !13
  %call68 = call i32 @nct6775_write_temp(%struct.nct6775_data* %0, i16 zeroext %17, i16 zeroext %18)
  br label %for.inc70

for.inc70:                                        ; preds = %for.body52, %if.then58
  %inc71 = add nsw i32 %j.0, 1
  br label %for.cond48

for.inc73:                                        ; preds = %for.cond48, %for.body41
  %inc74 = add nsw i32 %i.2, 1
  br label %for.cond38

for.end75:                                        ; preds = %for.cond38
  %REG_VBAT = getelementptr inbounds %struct.nct6775_data, %struct.nct6775_data* %0, i32 0, i32 10
  %19 = load i16, i16* %REG_VBAT, align 2, !tbaa !63
  %vbat = getelementptr inbounds %struct.nct6775_data, %struct.nct6775_data* %0, i32 0, i32 80
  %20 = load i8, i8* %vbat, align 8, !tbaa !110
  %conv76 = zext i8 %20 to i16
  %call77 = call i32 @nct6775_write_value(%struct.nct6775_data* %0, i16 zeroext %19, i16 zeroext %conv76)
  %kind = getelementptr inbounds %struct.nct6775_sio_data, %struct.nct6775_sio_data* %2, i32 0, i32 1
  %21 = load i32, i32* %kind, align 4, !tbaa !42
  %cmp78 = icmp eq i32 %21, 0
  br i1 %cmp78, label %if.then80, label %if.end85

if.then80:                                        ; preds = %for.end75
  %fandiv1 = getelementptr inbounds %struct.nct6775_data, %struct.nct6775_data* %0, i32 0, i32 81
  %22 = load i8, i8* %fandiv1, align 1, !tbaa !111
  %conv81 = zext i8 %22 to i16
  %call82 = call i32 @nct6775_write_value(%struct.nct6775_data* %0, i16 zeroext 1286, i16 zeroext %conv81)
  %fandiv2 = getelementptr inbounds %struct.nct6775_data, %struct.nct6775_data* %0, i32 0, i32 82
  %23 = load i8, i8* %fandiv2, align 2, !tbaa !112
  %conv83 = zext i8 %23 to i16
  %call84 = call i32 @nct6775_write_value(%struct.nct6775_data* %0, i16 zeroext 1287, i16 zeroext %conv83)
  br label %if.end85

if.end85:                                         ; preds = %if.then80, %for.end75
  %valid = getelementptr inbounds %struct.nct6775_data, %struct.nct6775_data* %0, i32 0, i32 39
  store i8 0, i8* %valid, align 8, !tbaa !106
  %update_lock86 = getelementptr inbounds %struct.nct6775_data, %struct.nct6775_data* %0, i32 0, i32 38
  call void @mutex_unlock(%struct.mutex* %update_lock86)
  ret i32 0
}

; Function Attrs: nounwind uwtable
define internal i32 @nct6775_find(i32 %sioaddr, i16* %addr, %struct.nct6775_sio_data* %sio_data) #1 section ".init.text" {
entry:
  %call = call i32 @superio_enter(i32 %sioaddr)
  %tobool = icmp ne i32 %call, 0
  br i1 %tobool, label %cleanup, label %if.end

if.end:                                           ; preds = %entry
  %0 = load i16, i16* @force_id, align 2, !tbaa !13
  %tobool1 = icmp ne i16 %0, 0
  br i1 %tobool1, label %if.then2, label %if.else

if.then2:                                         ; preds = %if.end
  %1 = load i16, i16* @force_id, align 2, !tbaa !13
  br label %if.end5

if.else:                                          ; preds = %if.end
  %call3 = call i32 @superio_inb(i32 %sioaddr, i32 32)
  %shl = shl i32 %call3, 8
  %call4 = call i32 @superio_inb(i32 %sioaddr, i32 33)
  %or = or i32 %shl, %call4
  %conv = trunc i32 %or to i16
  br label %if.end5

if.end5:                                          ; preds = %if.else, %if.then2
  %val.0 = phi i16 [ %1, %if.then2 ], [ %conv, %if.else ]
  %conv6 = zext i16 %val.0 to i32
  %and = and i32 %conv6, 65520
  br label %NodeBlock5

NodeBlock5:                                       ; preds = %if.end5
  %Pivot6 = icmp slt i32 %and, 49968
  br i1 %Pivot6, label %LeafBlock, label %NodeBlock

NodeBlock:                                        ; preds = %NodeBlock5
  %Pivot = icmp slt i32 %and, 50528
  br i1 %Pivot, label %LeafBlock1, label %LeafBlock3

LeafBlock3:                                       ; preds = %NodeBlock
  %SwitchLeaf4 = icmp eq i32 %and, 50528
  br i1 %SwitchLeaf4, label %sw.bb9, label %NewDefault

LeafBlock1:                                       ; preds = %NodeBlock
  %SwitchLeaf2 = icmp eq i32 %and, 49968
  br i1 %SwitchLeaf2, label %sw.epilog, label %NewDefault

LeafBlock:                                        ; preds = %NodeBlock5
  %SwitchLeaf = icmp eq i32 %and, 46192
  br i1 %SwitchLeaf, label %sw.bb, label %NewDefault

sw.bb:                                            ; preds = %LeafBlock
  br label %sw.epilog

sw.bb9:                                           ; preds = %LeafBlock3
  br label %sw.epilog

NewDefault:                                       ; preds = %LeafBlock3, %LeafBlock1, %LeafBlock
  br label %sw.default

sw.default:                                       ; preds = %NewDefault
  %conv11 = zext i16 %val.0 to i32
  %cmp = icmp ne i32 %conv11, 65535
  br i1 %cmp, label %if.then13, label %if.end16

if.then13:                                        ; preds = %sw.default
  %conv14 = zext i16 %val.0 to i32
  %call15 = call i32 (i8*, ...) @no_printk(i8* getelementptr inbounds ([40 x i8], [40 x i8]* @.str.390, i32 0, i32 0), i32 %conv14)
  br label %if.end16

if.end16:                                         ; preds = %if.then13, %sw.default
  call void @superio_exit(i32 %sioaddr)
  br label %cleanup

sw.epilog:                                        ; preds = %LeafBlock1, %sw.bb9, %sw.bb
  %.sink = phi i32 [ 2, %sw.bb9 ], [ 0, %sw.bb ], [ 1, %LeafBlock1 ]
  %kind10 = getelementptr inbounds %struct.nct6775_sio_data, %struct.nct6775_sio_data* %sio_data, i32 0, i32 1
  store i32 %.sink, i32* %kind10, align 4, !tbaa !42
  call void @superio_select(i32 %sioaddr, i32 11)
  %call17 = call i32 @superio_inb(i32 %sioaddr, i32 96)
  %shl18 = shl i32 %call17, 8
  %call19 = call i32 @superio_inb(i32 %sioaddr, i32 97)
  %or20 = or i32 %shl18, %call19
  %conv21 = trunc i32 %or20 to i16
  %conv22 = zext i16 %conv21 to i32
  %and23 = and i32 %conv22, -8
  %conv24 = trunc i32 %and23 to i16
  store i16 %conv24, i16* %addr, align 2, !tbaa !13
  %2 = load i16, i16* %addr, align 2, !tbaa !13
  %conv25 = zext i16 %2 to i32
  %cmp26 = icmp eq i32 %conv25, 0
  br i1 %cmp26, label %if.then28, label %if.end30

if.then28:                                        ; preds = %sw.epilog
  %call29 = call i32 (i8*, ...) @printk(i8* getelementptr inbounds ([73 x i8], [73 x i8]* @.str.391, i32 0, i32 0))
  call void @superio_exit(i32 %sioaddr)
  br label %cleanup

if.end30:                                         ; preds = %sw.epilog
  %call31 = call i32 @superio_inb(i32 %sioaddr, i32 48)
  %conv32 = trunc i32 %call31 to i16
  %conv33 = zext i16 %conv32 to i32
  %and34 = and i32 %conv33, 1
  %tobool35 = icmp ne i32 %and34, 0
  br i1 %tobool35, label %if.end40, label %if.then36

if.then36:                                        ; preds = %if.end30
  %call37 = call i32 (i8*, ...) @printk(i8* getelementptr inbounds ([70 x i8], [70 x i8]* @.str.392, i32 0, i32 0))
  %conv38 = zext i16 %conv32 to i32
  %or39 = or i32 %conv38, 1
  call void @superio_outb(i32 %sioaddr, i32 48, i32 %or39)
  br label %if.end40

if.end40:                                         ; preds = %if.then36, %if.end30
  call void @superio_exit(i32 %sioaddr)
  %kind41 = getelementptr inbounds %struct.nct6775_sio_data, %struct.nct6775_sio_data* %sio_data, i32 0, i32 1
  %3 = load i32, i32* %kind41, align 4, !tbaa !42
  %idxprom = zext i32 %3 to i64
  %arrayidx = getelementptr inbounds [3 x i8*], [3 x i8*]* @nct6775_sio_names, i64 0, i64 %idxprom
  %4 = load i8*, i8** %arrayidx, align 8, !tbaa !12
  %5 = load i16, i16* %addr, align 2, !tbaa !13
  %conv42 = zext i16 %5 to i32
  %call43 = call i32 (i8*, ...) @printk(i8* getelementptr inbounds ([47 x i8], [47 x i8]* @.str.393, i32 0, i32 0), i8* %4, i32 %conv42)
  %sioreg = getelementptr inbounds %struct.nct6775_sio_data, %struct.nct6775_sio_data* %sio_data, i32 0, i32 0
  store i32 %sioaddr, i32* %sioreg, align 4, !tbaa !89
  br label %cleanup

cleanup:                                          ; preds = %entry, %if.end40, %if.then28, %if.end16
  %retval.0 = phi i32 [ -19, %if.end16 ], [ -19, %if.then28 ], [ 0, %if.end40 ], [ %call, %entry ]
  ret i32 %retval.0
}

declare i32 @platform_driver_register(%struct.platform_driver*) #2

declare %struct.platform_device* @platform_device_alloc(i8*, i32) #2

declare i32 @printk(i8*, ...) #2

declare i32 @platform_device_add_data(%struct.platform_device*, i8*, i64) #2

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i32, i1) #4

declare i32 @acpi_check_resource_conflict(%struct.resource*) #2

declare i32 @platform_device_add_resources(%struct.platform_device*, %struct.resource*, i32) #2

declare i32 @platform_device_add(%struct.platform_device*) #2

declare void @platform_device_put(%struct.platform_device*) #2

; Function Attrs: inlinehint nounwind uwtable
define internal i32 @no_printk(i8* %fmt, ...) #0 {
entry:
  ret i32 0
}

attributes #0 = { inlinehint nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { alwaysinline nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { argmemonly nounwind }
attributes #5 = { nounwind readnone }
attributes #6 = { nounwind }
attributes #7 = { nounwind readonly }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 5.0.1 (tags/RELEASE_500/final)"}
!2 = !{!3, !4, i64 24}
!3 = !{!"smp_ops", !4, i64 0, !4, i64 8, !4, i64 16, !4, i64 24, !4, i64 32, !4, i64 40, !4, i64 48, !4, i64 56, !4, i64 64, !4, i64 72, !4, i64 80}
!4 = !{!"any pointer", !5, i64 0}
!5 = !{!"omnipotent char", !6, i64 0}
!6 = !{!"Simple C/C++ TBAA"}
!7 = !{!3, !4, i64 32}
!8 = !{!3, !4, i64 8}
!9 = !{!3, !4, i64 40}
!10 = !{!3, !4, i64 16}
!11 = !{!3, !4, i64 0}
!12 = !{!4, !4, i64 0}
!13 = !{!14, !14, i64 0}
!14 = !{!"short", !5, i64 0}
!15 = !{!16, !4, i64 16}
!16 = !{!"resource", !17, i64 0, !17, i64 8, !4, i64 16, !18, i64 24, !4, i64 32, !4, i64 40, !4, i64 48}
!17 = !{!"long long", !5, i64 0}
!18 = !{!"long", !5, i64 0}
!19 = !{!16, !17, i64 0}
!20 = !{!16, !17, i64 8}
!21 = !{!16, !18, i64 24}
!22 = !{i32 765405, i32 765426}
!23 = !{!18, !18, i64 0}
!24 = !{i32 -2146845057}
!25 = !{!26, !4, i64 152}
!26 = !{!"device", !4, i64 0, !4, i64 8, !27, i64 16, !4, i64 80, !4, i64 88, !32, i64 96, !4, i64 136, !4, i64 144, !4, i64 152, !34, i64 160, !4, i64 248, !31, i64 256, !4, i64 264, !17, i64 272, !4, i64 280, !28, i64 288, !4, i64 304, !39, i64 312, !4, i64 328, !40, i64 336, !31, i64 344, !31, i64 348, !33, i64 352, !28, i64 360, !41, i64 376, !4, i64 408, !4, i64 416, !4, i64 424, !4, i64 432}
!27 = !{!"kobject", !4, i64 0, !28, i64 8, !4, i64 24, !4, i64 32, !4, i64 40, !4, i64 48, !29, i64 56, !31, i64 60, !31, i64 60, !31, i64 60, !31, i64 60, !31, i64 60}
!28 = !{!"list_head", !4, i64 0, !4, i64 8}
!29 = !{!"kref", !30, i64 0}
!30 = !{!"", !31, i64 0}
!31 = !{!"int", !5, i64 0}
!32 = !{!"mutex", !30, i64 0, !33, i64 4, !28, i64 8, !4, i64 24, !4, i64 32}
!33 = !{!"spinlock", !5, i64 0}
!34 = !{!"dev_pm_info", !35, i64 0, !31, i64 4, !31, i64 4, !36, i64 4, !36, i64 4, !36, i64 4, !36, i64 4, !33, i64 6, !28, i64 8, !37, i64 24, !4, i64 56, !36, i64 64, !36, i64 64, !4, i64 72, !4, i64 80}
!35 = !{!"pm_message", !31, i64 0}
!36 = !{!"_Bool", !5, i64 0}
!37 = !{!"completion", !31, i64 0, !38, i64 8}
!38 = !{!"__wait_queue_head", !33, i64 0, !28, i64 8}
!39 = !{!"dev_archdata", !4, i64 0, !4, i64 8}
!40 = !{!"acpi_dev_node", !4, i64 0}
!41 = !{!"klist_node", !4, i64 0, !28, i64 8, !29, i64 24}
!42 = !{!43, !5, i64 4}
!43 = !{!"nct6775_sio_data", !31, i64 0, !5, i64 4}
!44 = !{!45, !5, i64 4}
!45 = !{!"nct6775_data", !31, i64 0, !5, i64 4, !4, i64 8, !4, i64 16, !5, i64 24, !5, i64 104, !5, i64 114, !4, i64 136, !31, i64 144, !14, i64 148, !14, i64 150, !14, i64 152, !4, i64 160, !4, i64 168, !5, i64 176, !4, i64 192, !4, i64 200, !4, i64 208, !4, i64 216, !4, i64 224, !5, i64 232, !4, i64 256, !4, i64 264, !4, i64 272, !5, i64 280, !4, i64 336, !4, i64 344, !4, i64 352, !4, i64 360, !4, i64 368, !4, i64 376, !4, i64 384, !4, i64 392, !5, i64 400, !4, i64 424, !4, i64 432, !4, i64 440, !4, i64 448, !32, i64 456, !36, i64 496, !18, i64 504, !5, i64 512, !5, i64 513, !5, i64 514, !5, i64 560, !5, i64 580, !5, i64 590, !5, i64 595, !5, i64 600, !5, i64 601, !5, i64 602, !36, i64 603, !5, i64 604, !5, i64 605, !5, i64 611, !5, i64 618, !17, i64 704, !5, i64 712, !5, i64 713, !5, i64 720, !5, i64 740, !5, i64 775, !5, i64 780, !5, i64 784, !5, i64 804, !5, i64 824, !5, i64 825, !5, i64 835, !5, i64 836, !31, i64 852, !5, i64 856, !5, i64 891, !5, i64 926, !5, i64 931, !5, i64 936, !5, i64 951, !5, i64 952, !14, i64 954, !14, i64 956, !14, i64 958, !5, i64 960, !5, i64 961, !5, i64 962}
!46 = !{!45, !31, i64 0}
!47 = !{!45, !4, i64 8}
!48 = !{!45, !5, i64 512}
!49 = !{!45, !5, i64 513}
!50 = !{!45, !5, i64 712}
!51 = !{!45, !31, i64 852}
!52 = !{!45, !36, i64 603}
!53 = !{!45, !5, i64 604}
!54 = !{!45, !4, i64 160}
!55 = !{!45, !4, i64 440}
!56 = !{!45, !4, i64 448}
!57 = !{!45, !5, i64 780}
!58 = !{!45, !5, i64 835}
!59 = !{!45, !5, i64 824}
!60 = !{!45, !4, i64 136}
!61 = !{!45, !31, i64 144}
!62 = !{!45, !14, i64 148}
!63 = !{!45, !14, i64 150}
!64 = !{!45, !14, i64 152}
!65 = !{!45, !4, i64 168}
!66 = !{!45, !4, i64 192}
!67 = !{!45, !4, i64 200}
!68 = !{!45, !4, i64 208}
!69 = !{!45, !4, i64 216}
!70 = !{!45, !4, i64 224}
!71 = !{!45, !4, i64 256}
!72 = !{!45, !4, i64 336}
!73 = !{!45, !4, i64 264}
!74 = !{!45, !4, i64 272}
!75 = !{!45, !4, i64 344}
!76 = !{!45, !4, i64 352}
!77 = !{!45, !4, i64 360}
!78 = !{!45, !4, i64 368}
!79 = !{!45, !4, i64 424}
!80 = !{!45, !4, i64 376}
!81 = !{!45, !4, i64 384}
!82 = !{!45, !4, i64 392}
!83 = !{!45, !4, i64 432}
!84 = !{!45, !14, i64 958}
!85 = !{!45, !14, i64 954}
!86 = !{!31, !31, i64 0}
!87 = !{!45, !14, i64 956}
!88 = !{!5, !5, i64 0}
!89 = !{!43, !31, i64 0}
!90 = !{!45, !5, i64 951}
!91 = !{!45, !5, i64 952}
!92 = !{!45, !5, i64 600}
!93 = !{!94, !5, i64 33}
!94 = !{!"sensor_device_attribute_2", !95, i64 0, !5, i64 32, !5, i64 33}
!95 = !{!"device_attribute", !96, i64 0, !4, i64 16, !4, i64 24}
!96 = !{!"attribute", !4, i64 0, !14, i64 8}
!97 = !{!94, !5, i64 32}
!98 = !{!45, !5, i64 601}
!99 = !{!45, !5, i64 602}
!100 = !{!45, !4, i64 16}
!101 = !{i8 0, i8 2}
!102 = !{i32 -2146037052}
!103 = !{i32 -2146036850}
!104 = !{i32 326217}
!105 = !{!45, !18, i64 504}
!106 = !{!45, !36, i64 496}
!107 = !{!45, !17, i64 704}
!108 = !{!109, !31, i64 32}
!109 = !{!"sensor_device_attribute", !95, i64 0, !31, i64 32}
!110 = !{!45, !5, i64 960}
!111 = !{!45, !5, i64 961}
!112 = !{!45, !5, i64 962}
