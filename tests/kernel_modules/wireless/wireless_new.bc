; ModuleID = 'net/wireless/core.bc'
source_filename = "net/wireless/core.c"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%struct.list_head = type { %struct.list_head*, %struct.list_head* }
%struct.kernel_param_ops = type { i32, i32 (i8*, %struct.kernel_param*)*, i32 (i8*, %struct.kernel_param*)*, void (i8*)* }
%struct.kernel_param = type { i8*, %struct.module*, %struct.kernel_param_ops*, i16, i8, i8, %union.anon.62 }
%struct.module = type { i32, %struct.list_head, [56 x i8], %struct.module_kobject, %struct.module_attribute*, i8*, i8*, %struct.kobject*, %struct.kernel_symbol*, i32*, i32, %struct.mutex, %struct.kernel_param*, i32, i32, %struct.kernel_symbol*, i32*, i8, %struct.kernel_symbol*, i32*, i32, i32, %struct.exception_table_entry*, i32 ()*, [40 x i8], %struct.module_layout, %struct.module_layout, %struct.mod_arch_specific, i64, i32, %struct.list_head, %struct.bug_entry*, %struct.mod_kallsyms*, %struct.mod_kallsyms, %struct.module_sect_attrs*, %struct.module_notes_attrs*, i8*, i8*, i32, i32, %struct.tracepoint**, i32, i8**, %struct.trace_event_call**, i32, %struct.trace_enum_map**, i32, %struct.list_head, %struct.list_head, void ()*, %struct.atomic_t, [12 x i8] }
%struct.module_kobject = type { %struct.kobject, %struct.module*, %struct.kobject*, %struct.module_param_attrs*, %struct.completion* }
%struct.kobject = type { i8*, %struct.list_head, %struct.kobject*, %struct.kset*, %struct.kobj_type*, %struct.kernfs_node*, %struct.kref, i8 }
%struct.kset = type { %struct.list_head, %struct.spinlock, %struct.kobject, %struct.kset_uevent_ops* }
%struct.spinlock = type { %union.anon.1 }
%union.anon.1 = type { %struct.raw_spinlock }
%struct.raw_spinlock = type { %struct.qspinlock }
%struct.qspinlock = type { %struct.atomic_t }
%struct.kset_uevent_ops = type { i32 (%struct.kset*, %struct.kobject*)*, i8* (%struct.kset*, %struct.kobject*)*, i32 (%struct.kset*, %struct.kobject*, %struct.kobj_uevent_env*)* }
%struct.kobj_uevent_env = type { [3 x i8*], [32 x i8*], i32, [2048 x i8], i32 }
%struct.kobj_type = type { void (%struct.kobject*)*, %struct.sysfs_ops*, %struct.attribute**, %struct.kobj_ns_type_operations* (%struct.kobject*)*, i8* (%struct.kobject*)* }
%struct.sysfs_ops = type { i64 (%struct.kobject*, %struct.attribute*, i8*)*, i64 (%struct.kobject*, %struct.attribute*, i8*, i64)* }
%struct.attribute = type { i8*, i16 }
%struct.kobj_ns_type_operations = type { i32, i1 ()*, i8* ()*, i8* (%struct.sock*)*, i8* ()*, void (i8*)* }
%struct.sock = type opaque
%struct.kernfs_node = type { %struct.atomic_t, %struct.atomic_t, %struct.kernfs_node*, i8*, %struct.rb_node, i8*, i32, %union.anon, i8*, i16, i16, i32, %struct.kernfs_iattrs* }
%struct.rb_node = type { i64, %struct.rb_node*, %struct.rb_node* }
%union.anon = type { %struct.kernfs_elem_attr }
%struct.kernfs_elem_attr = type { %struct.kernfs_ops*, %struct.kernfs_open_node*, i64, %struct.kernfs_node* }
%struct.kernfs_ops = type { i32 (%struct.kernfs_open_file*)*, void (%struct.kernfs_open_file*)*, i32 (%struct.seq_file*, i8*)*, i8* (%struct.seq_file*, i64*)*, i8* (%struct.seq_file*, i8*, i64*)*, void (%struct.seq_file*, i8*)*, i64 (%struct.kernfs_open_file*, i8*, i64, i64)*, i64, i8, i64 (%struct.kernfs_open_file*, i8*, i64, i64)*, i32 (%struct.kernfs_open_file*, %struct.vm_area_struct*)* }
%struct.kernfs_open_file = type { %struct.kernfs_node*, %struct.file*, %struct.seq_file*, i8*, %struct.mutex, %struct.mutex, i32, %struct.list_head, i8*, i64, i8, %struct.vm_operations_struct* }
%struct.file = type { %union.anon.2, %struct.path, %struct.inode*, %struct.file_operations*, %struct.spinlock, %struct.atomic64_t, i32, i32, %struct.mutex, i64, %struct.fown_struct, %struct.cred*, %struct.file_ra_state, i64, i8*, i8*, %struct.list_head, %struct.list_head, %struct.address_space* }
%union.anon.2 = type { %struct.callback_head }
%struct.callback_head = type { %struct.callback_head*, void (%struct.callback_head*)* }
%struct.path = type { %struct.vfsmount*, %struct.dentry* }
%struct.vfsmount = type opaque
%struct.dentry = type { i32, %struct.seqcount, %struct.hlist_bl_node, %struct.dentry*, %struct.qstr, %struct.inode*, [32 x i8], %struct.lockref, %struct.dentry_operations*, %struct.super_block*, i64, i8*, %union.anon.60, %struct.list_head, %struct.list_head, %union.anon.61 }
%struct.seqcount = type { i32 }
%struct.hlist_bl_node = type { %struct.hlist_bl_node*, %struct.hlist_bl_node** }
%struct.qstr = type { %union.anon.3, i8* }
%union.anon.3 = type { i64 }
%struct.lockref = type { %union.anon.58 }
%union.anon.58 = type { i64 }
%struct.dentry_operations = type { i32 (%struct.dentry*, i32)*, i32 (%struct.dentry*, i32)*, i32 (%struct.dentry*, %struct.qstr*)*, i32 (%struct.dentry*, i32, i8*, %struct.qstr*)*, i32 (%struct.dentry*)*, i32 (%struct.dentry*)*, void (%struct.dentry*)*, void (%struct.dentry*)*, void (%struct.dentry*, %struct.inode*)*, i8* (%struct.dentry*, i8*, i32)*, %struct.vfsmount* (%struct.path*)*, i32 (%struct.path*, i1)*, %struct.dentry* (%struct.dentry*, %struct.inode*, i32)*, [24 x i8] }
%struct.super_block = type { %struct.list_head, i32, i8, i64, i64, %struct.file_system_type*, %struct.super_operations*, %struct.dquot_operations*, %struct.quotactl_ops*, %struct.export_operations*, i64, i64, i64, %struct.dentry*, %struct.rw_semaphore, i32, %struct.atomic_t, i8*, %struct.xattr_handler**, %struct.fscrypt_operations*, %struct.hlist_bl_head, %struct.list_head, %struct.block_device*, %struct.backing_dev_info*, %struct.mtd_info*, %struct.hlist_node, i32, %struct.quota_info, %struct.sb_writers, [32 x i8], [16 x i8], i8*, i32, i32, i32, %struct.mutex, i8*, i8*, %struct.dentry_operations*, i32, %struct.shrinker, %struct.atomic64_t, i32, %struct.workqueue_struct*, %struct.hlist_head, %struct.user_namespace*, %struct.list_lru, [56 x i8], %struct.list_lru, %struct.callback_head, %struct.work_struct, %struct.mutex, i32, [36 x i8], %struct.spinlock, %struct.list_head, %struct.spinlock, %struct.list_head, [16 x i8] }
%struct.file_system_type = type { i8*, i32, %struct.dentry* (%struct.file_system_type*, i32, i8*, i8*)*, void (%struct.super_block*)*, %struct.module*, %struct.file_system_type*, %struct.hlist_head, %struct.lock_class_key, %struct.lock_class_key, %struct.lock_class_key, [3 x %struct.lock_class_key], %struct.lock_class_key, %struct.lock_class_key, %struct.lock_class_key }
%struct.lock_class_key = type {}
%struct.super_operations = type { %struct.inode* (%struct.super_block*)*, void (%struct.inode*)*, void (%struct.inode*, i32)*, i32 (%struct.inode*, %struct.writeback_control*)*, i32 (%struct.inode*)*, void (%struct.inode*)*, void (%struct.super_block*)*, i32 (%struct.super_block*, i32)*, i32 (%struct.super_block*)*, i32 (%struct.super_block*)*, i32 (%struct.super_block*)*, i32 (%struct.super_block*)*, i32 (%struct.dentry*, %struct.kstatfs*)*, i32 (%struct.super_block*, i32*, i8*)*, void (%struct.super_block*)*, i32 (%struct.seq_file*, %struct.dentry*)*, i32 (%struct.seq_file*, %struct.dentry*)*, i32 (%struct.seq_file*, %struct.dentry*)*, i32 (%struct.seq_file*, %struct.dentry*)*, i64 (%struct.super_block*, i32, i8*, i64, i64)*, i64 (%struct.super_block*, i32, i8*, i64, i64)*, %struct.dquot** (%struct.inode*)*, i32 (%struct.super_block*, %struct.page*, i32)*, i64 (%struct.super_block*, %struct.shrink_control*)*, i64 (%struct.super_block*, %struct.shrink_control*)* }
%struct.writeback_control = type opaque
%struct.kstatfs = type opaque
%struct.dquot = type { %struct.hlist_node, %struct.list_head, %struct.list_head, %struct.list_head, %struct.mutex, %struct.atomic_t, %struct.__wait_queue_head, %struct.super_block*, %struct.kqid, i64, i64, %struct.mem_dqblk }
%struct.__wait_queue_head = type { %struct.spinlock, %struct.list_head }
%struct.kqid = type { %union.anon.4, i32 }
%union.anon.4 = type { %struct.kuid_t }
%struct.kuid_t = type { i32 }
%struct.mem_dqblk = type { i64, i64, i64, i64, i64, i64, i64, i64, i64 }
%struct.page = type { i64, %union.anon.5, %union.anon.44, %union.anon.45, %union.anon.49, %union.anon.52, [8 x i8] }
%union.anon.5 = type { %struct.address_space* }
%union.anon.44 = type { i64 }
%union.anon.45 = type { i64 }
%union.anon.49 = type { %struct.list_head }
%union.anon.52 = type { i64 }
%struct.shrink_control = type { i32, i64, i32, %struct.mem_cgroup* }
%struct.mem_cgroup = type opaque
%struct.dquot_operations = type { i32 (%struct.dquot*)*, %struct.dquot* (%struct.super_block*, i32)*, void (%struct.dquot*)*, i32 (%struct.dquot*)*, i32 (%struct.dquot*)*, i32 (%struct.dquot*)*, i32 (%struct.super_block*, i32)*, i64* (%struct.inode*)*, i32 (%struct.inode*, %struct.kprojid_t*)*, i32 (%struct.super_block*, %struct.kqid*)* }
%struct.kprojid_t = type { i32 }
%struct.quotactl_ops = type { i32 (%struct.super_block*, i32, i32, %struct.path*)*, i32 (%struct.super_block*, i32)*, i32 (%struct.super_block*, i32)*, i32 (%struct.super_block*, i32)*, i32 (%struct.super_block*, i32)*, i32 (%struct.super_block*, i32, %struct.qc_info*)*, i32 (%struct.super_block*, i64, %struct.qc_dqblk*)*, i32 (%struct.super_block*, %struct.kqid*, %struct.qc_dqblk*)*, i32 (%struct.super_block*, i64, %struct.qc_dqblk*)*, i32 (%struct.super_block*, %struct.qc_state*)*, i32 (%struct.super_block*, i32)* }
%struct.qc_info = type { i32, i32, i32, i32, i32, i32, i32, i32 }
%struct.qc_dqblk = type { i32, i64, i64, i64, i64, i64, i64, i64, i64, i32, i32, i64, i64, i64, i64, i32 }
%struct.qc_state = type { i32, [3 x %struct.qc_type_state] }
%struct.qc_type_state = type { i32, i32, i32, i32, i32, i32, i32, i64, i64, i64 }
%struct.export_operations = type opaque
%struct.rw_semaphore = type { %struct.atomic64_t, %struct.list_head, %struct.raw_spinlock, %struct.optimistic_spin_queue, %struct.task_struct* }
%struct.optimistic_spin_queue = type { %struct.atomic_t }
%struct.task_struct = type { %struct.thread_info, i64, i8*, %struct.atomic_t, i32, i32, %struct.llist_node, i32, i32, i32, i64, %struct.task_struct*, i32, i32, i32, i32, i32, i32, %struct.sched_class*, [16 x i8], %struct.sched_entity, %struct.sched_rt_entity, %struct.task_group*, %struct.sched_dl_entity, i32, i32, i32, %struct.cpumask, %struct.sched_info, %struct.list_head, %struct.plist_node, %struct.rb_node, %struct.mm_struct*, %struct.mm_struct*, %struct.vmacache, %struct.task_rss_stat, i32, i32, i32, i32, i64, i32, i8, [3 x i8], i8, i64, %struct.restart_block, i32, i32, %struct.task_struct*, %struct.task_struct*, %struct.list_head, %struct.list_head, %struct.task_struct*, %struct.list_head, %struct.list_head, [3 x %struct.pid_link], %struct.list_head, %struct.list_head, %struct.completion*, i32*, i32*, i64, i64, i64, %struct.prev_cputime, i64, i64, i64, i64, i64, i64, %struct.task_cputime, [3 x %struct.list_head], %struct.cred*, %struct.cred*, %struct.cred*, [16 x i8], %struct.nameidata*, %struct.sysv_sem, %struct.sysv_shm, %struct.fs_struct*, %struct.files_struct*, %struct.nsproxy*, %struct.signal_struct*, %struct.sighand_struct*, %struct.sigset_t, %struct.sigset_t, %struct.sigset_t, %struct.sigpending, i64, i64, i32, %struct.callback_head*, %struct.audit_context*, %struct.kuid_t, i32, %struct.seccomp, i32, i32, %struct.spinlock, %struct.raw_spinlock, %struct.wake_q_node, %struct.rb_root, %struct.rb_node*, %struct.rt_mutex_waiter*, i8*, %struct.bio_list*, %struct.blk_plug*, %struct.reclaim_state*, %struct.backing_dev_info*, %struct.io_context*, i64, %struct.siginfo*, %struct.task_io_accounting, i64, i64, i64, %struct.nodemask_t, %struct.seqcount, i32, i32, %struct.css_set*, %struct.list_head, %struct.robust_list_head*, %struct.compat_robust_list_head*, %struct.list_head, %struct.futex_pi_state*, [2 x %struct.perf_event_context*], %struct.mutex, %struct.list_head, %struct.mempolicy*, i16, i16, %struct.tlbflush_unmap_batch, %struct.callback_head, %struct.pipe_inode_info*, %struct.page_frag, %struct.task_delay_info*, i32, i32, i64, i64, i64, i64, i64, i32, %struct.task_struct*, %struct.vm_struct*, %struct.atomic_t, [28 x i8], %struct.thread_struct }
%struct.thread_info = type { i64 }
%struct.llist_node = type { %struct.llist_node* }
%struct.sched_class = type opaque
%struct.sched_entity = type { %struct.load_weight, %struct.rb_node, %struct.list_head, i32, i64, i64, i64, i64, i64, %struct.sched_statistics, i32, %struct.sched_entity*, %struct.cfs_rq*, %struct.cfs_rq*, [32 x i8], %struct.sched_avg, [24 x i8] }
%struct.load_weight = type { i64, i32 }
%struct.sched_statistics = type { i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64 }
%struct.cfs_rq = type opaque
%struct.sched_avg = type { i64, i64, i32, i32, i64, i64 }
%struct.sched_rt_entity = type { %struct.list_head, i64, i64, i32, i16, i16, %struct.sched_rt_entity* }
%struct.task_group = type opaque
%struct.sched_dl_entity = type { %struct.rb_node, i64, i64, i64, i64, i64, i64, i32, i32, i32, i32, %struct.hrtimer }
%struct.hrtimer = type { %struct.timerqueue_node, i64, i32 (%struct.hrtimer*)*, %struct.hrtimer_clock_base*, i8, i8 }
%struct.timerqueue_node = type { %struct.rb_node, i64 }
%struct.hrtimer_clock_base = type { %struct.hrtimer_cpu_base*, i32, i32, %struct.timerqueue_head, i64 ()*, i64, [16 x i8] }
%struct.hrtimer_cpu_base = type { %struct.raw_spinlock, %struct.seqcount, %struct.hrtimer*, i32, i32, i32, i8, i8, i8, i64, %struct.hrtimer*, i32, i32, i32, i32, [4 x %struct.hrtimer_clock_base] }
%struct.timerqueue_head = type { %struct.rb_root, %struct.timerqueue_node* }
%struct.cpumask = type { [1 x i64] }
%struct.sched_info = type { i64, i64, i64, i64 }
%struct.plist_node = type { i32, %struct.list_head, %struct.list_head }
%struct.mm_struct = type { %struct.vm_area_struct*, %struct.rb_root, i32, i64 (%struct.file*, i64, i64, i64, i64)*, i64, i64, i64, i64, %struct.pgd_t*, %struct.atomic_t, %struct.atomic_t, %struct.atomic64_t, %struct.atomic64_t, i32, %struct.spinlock, %struct.rw_semaphore, %struct.list_head, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, [46 x i64], %struct.mm_rss_stat, %struct.linux_binfmt*, [1 x %struct.cpumask], %struct.mm_context_t, i64, %struct.core_state*, %struct.spinlock, %struct.kioctx_table*, %struct.user_namespace*, %struct.file*, %struct.mmu_notifier_mm*, i8, %struct.uprobes_state, %struct.atomic64_t, %struct.work_struct }
%struct.vm_area_struct = type { i64, i64, %struct.vm_area_struct*, %struct.vm_area_struct*, %struct.rb_node, i64, %struct.mm_struct*, %struct.pgprot, i64, %struct.anon.6, %struct.list_head, %struct.anon_vma*, %struct.vm_operations_struct*, i64, %struct.file*, i8*, %struct.mempolicy*, %struct.vm_userfaultfd_ctx }
%struct.pgprot = type { i64 }
%struct.anon.6 = type { %struct.rb_node, i64 }
%struct.anon_vma = type opaque
%struct.vm_userfaultfd_ctx = type {}
%struct.pgd_t = type { i64 }
%struct.mm_rss_stat = type { [4 x %struct.atomic64_t] }
%struct.linux_binfmt = type opaque
%struct.mm_context_t = type { %struct.ldt_struct*, i16, %struct.mutex, i8*, %struct.vdso_image*, %struct.atomic_t, i16, i16 }
%struct.ldt_struct = type opaque
%struct.vdso_image = type { i8*, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64 }
%struct.core_state = type { %struct.atomic_t, %struct.core_thread, %struct.completion }
%struct.core_thread = type { %struct.task_struct*, %struct.core_thread* }
%struct.completion = type { i32, %struct.__wait_queue_head }
%struct.kioctx_table = type opaque
%struct.mmu_notifier_mm = type opaque
%struct.uprobes_state = type {}
%struct.vmacache = type { i32, [4 x %struct.vm_area_struct*] }
%struct.task_rss_stat = type { i32, [4 x i32] }
%struct.restart_block = type { i64 (%struct.restart_block*)*, %union.anon.7 }
%union.anon.7 = type { %struct.anon.8 }
%struct.anon.8 = type { i32*, i32, i32, i32, i64, i32* }
%struct.pid_link = type { %struct.hlist_node, %struct.pid* }
%struct.pid = type { %struct.atomic_t, i32, [3 x %struct.hlist_head], %struct.callback_head, [1 x %struct.upid] }
%struct.upid = type { i32, %struct.pid_namespace*, %struct.hlist_node }
%struct.pid_namespace = type opaque
%struct.prev_cputime = type { i64, i64, %struct.raw_spinlock }
%struct.task_cputime = type { i64, i64, i64 }
%struct.nameidata = type opaque
%struct.sysv_sem = type { %struct.sem_undo_list* }
%struct.sem_undo_list = type opaque
%struct.sysv_shm = type { %struct.list_head }
%struct.fs_struct = type opaque
%struct.files_struct = type opaque
%struct.nsproxy = type { %struct.atomic_t, %struct.uts_namespace*, %struct.ipc_namespace*, %struct.mnt_namespace*, %struct.pid_namespace*, %struct.net*, %struct.cgroup_namespace* }
%struct.uts_namespace = type opaque
%struct.ipc_namespace = type opaque
%struct.mnt_namespace = type opaque
%struct.net = type { %struct.atomic_t, %struct.atomic_t, %struct.spinlock, %struct.atomic64_t, %struct.list_head, %struct.list_head, %struct.list_head, %struct.user_namespace*, %struct.ucounts*, %struct.spinlock, %struct.idr, %struct.ns_common, %struct.proc_dir_entry*, %struct.proc_dir_entry*, %struct.ctl_table_set, %struct.sock*, %struct.sock*, %struct.list_head, %struct.hlist_head*, %struct.hlist_head*, i32, i32, i32, %struct.list_head, %struct.net_device*, %struct.netns_core, %struct.netns_mib, %struct.netns_packet, %struct.netns_unix, [40 x i8], %struct.netns_ipv4, %struct.netns_ipv6, %struct.netns_nf, %struct.netns_xt, %struct.netns_ct, [16 x i8], %struct.netns_nf_frag, %struct.sock*, %struct.sock*, %struct.net_generic*, [40 x i8], %struct.netns_xfrm, %struct.sock*, %struct.atomic_t, [52 x i8] }
%struct.ucounts = type { %struct.hlist_node, %struct.user_namespace*, %struct.kuid_t, i32, [9 x %struct.atomic_t] }
%struct.idr = type { %struct.radix_tree_root, i32 }
%struct.radix_tree_root = type { i32, %struct.radix_tree_node* }
%struct.radix_tree_node = type { i8, i8, i8, i8, %struct.radix_tree_node*, %struct.radix_tree_root*, %union.anon.0, [64 x i8*], [3 x [1 x i64]] }
%union.anon.0 = type { %struct.list_head }
%struct.ns_common = type { %struct.atomic64_t, %struct.proc_ns_operations*, i32 }
%struct.proc_ns_operations = type opaque
%struct.proc_dir_entry = type opaque
%struct.ctl_table_set = type { i32 (%struct.ctl_table_set*)*, %struct.ctl_dir }
%struct.ctl_dir = type { %struct.ctl_table_header, %struct.rb_root }
%struct.ctl_table_header = type { %union.anon.11, %struct.completion*, %struct.ctl_table*, %struct.ctl_table_root*, %struct.ctl_table_set*, %struct.ctl_dir*, %struct.ctl_node*, %struct.list_head }
%union.anon.11 = type { %struct.anon.12 }
%struct.anon.12 = type { %struct.ctl_table*, i32, i32, i32 }
%struct.ctl_table = type { i8*, i8*, i32, i16, %struct.ctl_table*, i32 (%struct.ctl_table*, i32, i8*, i64*, i64*)*, %struct.ctl_table_poll*, i8*, i8* }
%struct.ctl_table_poll = type { %struct.atomic_t, %struct.__wait_queue_head }
%struct.ctl_table_root = type { %struct.ctl_table_set, %struct.ctl_table_set* (%struct.ctl_table_root*)*, void (%struct.ctl_table_header*, %struct.ctl_table*, %struct.kuid_t*, %struct.kgid_t*)*, i32 (%struct.ctl_table_header*, %struct.ctl_table*)* }
%struct.kgid_t = type { i32 }
%struct.ctl_node = type { %struct.rb_node, %struct.ctl_table_header* }
%struct.net_device = type { [16 x i8], %struct.hlist_node, i8*, i64, i64, i64, i32, %struct.atomic_t, i64, %struct.list_head, %struct.list_head, %struct.list_head, %struct.list_head, %struct.list_head, %struct.list_head, %struct.anon.63, i64, i64, i64, i64, i64, i64, i64, i32, i32, %struct.net_device_stats, %struct.atomic64_t, %struct.atomic64_t, %struct.atomic64_t, %struct.net_device_ops*, %struct.ethtool_ops*, %struct.ndisc_ops*, %struct.header_ops*, i32, i32, i16, i16, i8, i8, i8, i8, i32, i32, i32, i16, i16, i16, i16, i16, [32 x i8], i8, i8, i16, i16, i16, %struct.spinlock, i8, i8, %struct.netdev_hw_addr_list, %struct.netdev_hw_addr_list, %struct.netdev_hw_addr_list, %struct.kset*, i32, i32, i8*, %struct.in_device*, %struct.dn_dev*, %struct.inet6_dev*, i8*, %struct.wireless_dev*, %struct.wpan_dev*, i8*, %struct.netdev_rx_queue*, i32, i32, i64, i32 (%struct.sk_buff**)*, i8*, %struct.tcf_proto*, %struct.netdev_queue*, %struct.nf_hook_entry*, [32 x i8], %struct.cpu_rmap*, %struct.hlist_node, [24 x i8], %struct.netdev_queue*, i32, i32, %struct.Qdisc*, [16 x %struct.hlist_head], i64, %struct.spinlock, i32, %struct.xps_dev_maps*, %struct.tcf_proto*, %struct.timer_list, i32*, %struct.list_head, %struct.list_head, i8, i8, i16, void (%struct.net_device*)*, %struct.netpoll_info*, %struct.possible_net_t, %union.anon.71, %struct.device, [4 x %struct.attribute_group*], %struct.attribute_group*, %struct.rtnl_link_ops*, i32, i16, i8, [16 x %struct.netdev_tc_txq], [16 x i8], %struct.phy_device*, %struct.lock_class_key*, %struct.lock_class_key*, i8, [15 x i8] }
%struct.anon.63 = type { %struct.list_head, %struct.list_head }
%struct.net_device_stats = type { i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64 }
%struct.net_device_ops = type { i32 (%struct.net_device*)*, void (%struct.net_device*)*, i32 (%struct.net_device*)*, i32 (%struct.net_device*)*, i32 (%struct.sk_buff*, %struct.net_device*)*, i64 (%struct.sk_buff*, %struct.net_device*, i64)*, i16 (%struct.net_device*, %struct.sk_buff*, i8*, i16 (%struct.net_device*, %struct.sk_buff*)*)*, void (%struct.net_device*, i32)*, void (%struct.net_device*)*, i32 (%struct.net_device*, i8*)*, i32 (%struct.net_device*)*, i32 (%struct.net_device*, %struct.ifreq*, i32)*, i32 (%struct.net_device*, %struct.ifmap*)*, i32 (%struct.net_device*, i32)*, i32 (%struct.net_device*, %struct.neigh_parms*)*, void (%struct.net_device*)*, void (%struct.net_device*, %struct.rtnl_link_stats64*)*, i1 (%struct.net_device*, i32)*, i32 (i32, %struct.net_device*, i8*)*, %struct.net_device_stats* (%struct.net_device*)*, i32 (%struct.net_device*, i16, i16)*, i32 (%struct.net_device*, i16, i16)*, void (%struct.net_device*)*, i32 (%struct.net_device*, %struct.netpoll_info*)*, void (%struct.net_device*)*, i32 (%struct.net_device*, i32, i8*)*, i32 (%struct.net_device*, i32, i16, i8, i16)*, i32 (%struct.net_device*, i32, i32, i32)*, i32 (%struct.net_device*, i32, i1)*, i32 (%struct.net_device*, i32, i1)*, i32 (%struct.net_device*, i32, %struct.ifla_vf_info*)*, i32 (%struct.net_device*, i32, i32)*, i32 (%struct.net_device*, i32, %struct.ifla_vf_stats*)*, i32 (%struct.net_device*, i32, %struct.nlattr**)*, i32 (%struct.net_device*, i32, %struct.sk_buff*)*, i32 (%struct.net_device*, i32, i64, i32)*, i32 (%struct.net_device*, i32, i1)*, i32 (%struct.net_device*, i32, i16, %struct.tc_to_netdev*)*, i32 (%struct.net_device*, %struct.sk_buff*, i16, i32)*, i32 (%struct.net_device*, %struct.net_device*)*, i32 (%struct.net_device*, %struct.net_device*)*, i64 (%struct.net_device*, i64)*, i32 (%struct.net_device*, i64)*, i32 (%struct.net_device*, %struct.neighbour*)*, void (%struct.net_device*, %struct.neighbour*)*, i32 (%struct.ndmsg*, %struct.nlattr**, %struct.net_device*, i8*, i16, i16)*, i32 (%struct.ndmsg*, %struct.nlattr**, %struct.net_device*, i8*, i16)*, i32 (%struct.sk_buff*, %struct.netlink_callback*, %struct.net_device*, %struct.net_device*, i32*)*, i32 (%struct.net_device*, %struct.nlmsghdr*, i16)*, i32 (%struct.sk_buff*, i32, i32, %struct.net_device*, i32, i32)*, i32 (%struct.net_device*, %struct.nlmsghdr*, i16)*, i32 (%struct.net_device*, i1)*, i32 (%struct.net_device*, %struct.netdev_phys_item_id*)*, i32 (%struct.net_device*, i8*, i64)*, void (%struct.net_device*, %struct.udp_tunnel_info*)*, void (%struct.net_device*, %struct.udp_tunnel_info*)*, i8* (%struct.net_device*, %struct.net_device*)*, void (%struct.net_device*, i8*)*, i32 (%struct.sk_buff*, %struct.net_device*, i8*)*, i32 (%struct.net_device*)*, i32 (%struct.net_device*, i32, i32)*, i32 (%struct.net_device*)*, i32 (%struct.net_device*, i1)*, i32 (%struct.net_device*, %struct.sk_buff*)*, void (%struct.net_device*, i32)*, i32 (%struct.net_device*, %struct.netdev_xdp*)* }
%struct.sk_buff = type { %union.anon.13, %struct.sock*, %union.anon.18, [48 x i8], i64, {}*, %struct.sec_path*, i64, i32, i32, i16, i16, i16, [0 x i8], i8, [0 x i32], [0 x i8], i32, i16, %union.anon.19, i32, i32, i32, i16, i16, %union.anon.21, i32, %union.anon.22, %union.anon.23, i16, i16, i16, i16, i16, i16, i16, [0 x i32], i32, i32, i8*, i8*, i32, %struct.atomic_t }
%union.anon.13 = type { %struct.anon.14 }
%struct.anon.14 = type { %struct.sk_buff*, %struct.sk_buff*, %union.anon.15 }
%union.anon.15 = type { i64 }
%union.anon.18 = type { %struct.net_device* }
%struct.sec_path = type opaque
%union.anon.19 = type { i32 }
%union.anon.21 = type { i32 }
%union.anon.22 = type { i32 }
%union.anon.23 = type { i16 }
%struct.ifreq = type { %union.anon.64, %union.anon.65 }
%union.anon.64 = type { [16 x i8] }
%union.anon.65 = type { %struct.ifmap }
%struct.ifmap = type { i64, i64, i16, i8, i8, i8 }
%struct.neigh_parms = type opaque
%struct.rtnl_link_stats64 = type { i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64 }
%struct.ifla_vf_info = type { i32, [32 x i8], i32, i32, i32, i32, i32, i32, i32, i32, i16 }
%struct.ifla_vf_stats = type { i64, i64, i64, i64, i64, i64 }
%struct.nlattr = type { i16, i16 }
%struct.tc_to_netdev = type { i32, %union.anon.67, i8 }
%union.anon.67 = type { %struct.tc_cls_u32_offload* }
%struct.tc_cls_u32_offload = type opaque
%struct.neighbour = type opaque
%struct.ndmsg = type { i8, i8, i16, i32, i16, i8, i8 }
%struct.netlink_callback = type { %struct.sk_buff*, %struct.nlmsghdr*, i32 (%struct.netlink_callback*)*, i32 (%struct.sk_buff*, %struct.netlink_callback*)*, i32 (%struct.netlink_callback*)*, i8*, %struct.module*, i16, i16, i32, i32, [6 x i64] }
%struct.nlmsghdr = type { i32, i16, i16, i32, i32 }
%struct.netdev_phys_item_id = type { [32 x i8], i8 }
%struct.udp_tunnel_info = type opaque
%struct.netdev_xdp = type { i32, %union.anon.68 }
%union.anon.68 = type { %struct.bpf_prog* }
%struct.bpf_prog = type opaque
%struct.ethtool_ops = type { i32 (%struct.net_device*, %struct.ethtool_cmd*)*, i32 (%struct.net_device*, %struct.ethtool_cmd*)*, void (%struct.net_device*, %struct.ethtool_drvinfo*)*, i32 (%struct.net_device*)*, void (%struct.net_device*, %struct.ethtool_regs*, i8*)*, void (%struct.net_device*, %struct.ethtool_wolinfo*)*, i32 (%struct.net_device*, %struct.ethtool_wolinfo*)*, i32 (%struct.net_device*)*, void (%struct.net_device*, i32)*, i32 (%struct.net_device*)*, i32 (%struct.net_device*)*, i32 (%struct.net_device*)*, i32 (%struct.net_device*, %struct.ethtool_eeprom*, i8*)*, i32 (%struct.net_device*, %struct.ethtool_eeprom*, i8*)*, i32 (%struct.net_device*, %struct.ethtool_coalesce*)*, i32 (%struct.net_device*, %struct.ethtool_coalesce*)*, void (%struct.net_device*, %struct.ethtool_ringparam*)*, i32 (%struct.net_device*, %struct.ethtool_ringparam*)*, void (%struct.net_device*, %struct.ethtool_pauseparam*)*, i32 (%struct.net_device*, %struct.ethtool_pauseparam*)*, void (%struct.net_device*, %struct.ethtool_test*, i64*)*, void (%struct.net_device*, i32, i8*)*, i32 (%struct.net_device*, i32)*, void (%struct.net_device*, %struct.ethtool_stats*, i64*)*, i32 (%struct.net_device*)*, void (%struct.net_device*)*, i32 (%struct.net_device*)*, i32 (%struct.net_device*, i32)*, i32 (%struct.net_device*, i32)*, i32 (%struct.net_device*, %struct.ethtool_rxnfc*, i32*)*, i32 (%struct.net_device*, %struct.ethtool_rxnfc*)*, i32 (%struct.net_device*, %struct.ethtool_flash*)*, i32 (%struct.net_device*, i32*)*, i32 (%struct.net_device*)*, i32 (%struct.net_device*)*, i32 (%struct.net_device*, i32*, i8*, i8*)*, i32 (%struct.net_device*, i32*, i8*, i8)*, void (%struct.net_device*, %struct.ethtool_channels*)*, i32 (%struct.net_device*, %struct.ethtool_channels*)*, i32 (%struct.net_device*, %struct.ethtool_dump*)*, i32 (%struct.net_device*, %struct.ethtool_dump*, i8*)*, i32 (%struct.net_device*, %struct.ethtool_dump*)*, i32 (%struct.net_device*, %struct.ethtool_ts_info*)*, i32 (%struct.net_device*, %struct.ethtool_modinfo*)*, i32 (%struct.net_device*, %struct.ethtool_eeprom*, i8*)*, i32 (%struct.net_device*, %struct.ethtool_eee*)*, i32 (%struct.net_device*, %struct.ethtool_eee*)*, i32 (%struct.net_device*, %struct.ethtool_tunable*, i8*)*, i32 (%struct.net_device*, %struct.ethtool_tunable*, i8*)*, i32 (%struct.net_device*, i32, %struct.ethtool_coalesce*)*, i32 (%struct.net_device*, i32, %struct.ethtool_coalesce*)*, i32 (%struct.net_device*, %struct.ethtool_link_ksettings*)*, i32 (%struct.net_device*, %struct.ethtool_link_ksettings*)* }
%struct.ethtool_cmd = type { i32, i32, i32, i16, i8, i8, i8, i8, i8, i8, i32, i32, i16, i8, i8, i32, [2 x i32] }
%struct.ethtool_drvinfo = type { i32, [32 x i8], [32 x i8], [32 x i8], [32 x i8], [32 x i8], [12 x i8], i32, i32, i32, i32, i32 }
%struct.ethtool_regs = type { i32, i32, i32, [0 x i8] }
%struct.ethtool_wolinfo = type { i32, i32, i32, [6 x i8] }
%struct.ethtool_coalesce = type { i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32 }
%struct.ethtool_ringparam = type { i32, i32, i32, i32, i32, i32, i32, i32, i32 }
%struct.ethtool_pauseparam = type { i32, i32, i32, i32 }
%struct.ethtool_test = type { i32, i32, i32, i32, [0 x i64] }
%struct.ethtool_stats = type { i32, i32, [0 x i64] }
%struct.ethtool_rxnfc = type { i32, i32, i64, %struct.ethtool_rx_flow_spec, i32, [0 x i32] }
%struct.ethtool_rx_flow_spec = type { i32, %union.ethtool_flow_union, %struct.ethtool_flow_ext, %union.ethtool_flow_union, %struct.ethtool_flow_ext, i64, i32 }
%union.ethtool_flow_union = type { %struct.ethtool_tcpip6_spec, [12 x i8] }
%struct.ethtool_tcpip6_spec = type { [4 x i32], [4 x i32], i16, i16, i8 }
%struct.ethtool_flow_ext = type { [2 x i8], [6 x i8], i16, i16, [2 x i32] }
%struct.ethtool_flash = type { i32, i32, [128 x i8] }
%struct.ethtool_channels = type { i32, i32, i32, i32, i32, i32, i32, i32, i32 }
%struct.ethtool_dump = type { i32, i32, i32, i32, [0 x i8] }
%struct.ethtool_ts_info = type { i32, i32, i32, i32, [3 x i32], i32, [3 x i32] }
%struct.ethtool_modinfo = type { i32, i32, i32, [8 x i32] }
%struct.ethtool_eeprom = type { i32, i32, i32, i32, [0 x i8] }
%struct.ethtool_eee = type { i32, i32, i32, i32, i32, i32, i32, i32, [2 x i32] }
%struct.ethtool_tunable = type { i32, i32, i32, i32, [0 x i8*] }
%struct.ethtool_link_ksettings = type { %struct.ethtool_link_settings, %struct.anon.69 }
%struct.ethtool_link_settings = type { i32, i32, i8, i8, i8, i8, i8, i8, i8, i8, [8 x i32], [0 x i32] }
%struct.anon.69 = type { [1 x i64], [1 x i64], [1 x i64] }
%struct.ndisc_ops = type opaque
%struct.header_ops = type { i32 (%struct.sk_buff*, %struct.net_device*, i16, i8*, i8*, i32)*, i32 (%struct.sk_buff*, i8*)*, i32 (%struct.neighbour*, %struct.hh_cache*, i16)*, void (%struct.hh_cache*, %struct.net_device*, i8*)*, i1 (i8*, i32)* }
%struct.hh_cache = type { i16, i16, %struct.seqlock_t, [12 x i64] }
%struct.seqlock_t = type { %struct.seqcount, %struct.spinlock }
%struct.netdev_hw_addr_list = type { %struct.list_head, i32 }
%struct.in_device = type opaque
%struct.dn_dev = type opaque
%struct.inet6_dev = type opaque
%struct.wireless_dev = type { %struct.wiphy*, i32, %struct.list_head, %struct.net_device*, i32, %struct.list_head, %struct.spinlock, %struct.mutex, i8, i8, [6 x i8], [32 x i8], i8, i8, i8, %struct.cfg80211_conn*, %struct.cfg80211_cached_keys*, i32, i32, %struct.work_struct, [6 x i8], %struct.list_head, %struct.spinlock, %struct.cfg80211_internal_bss*, %struct.cfg80211_chan_def, %struct.cfg80211_chan_def, i8, i8, i8, i32, i32, i32, i8, i64, i32, i32 }
%struct.wiphy = type { [6 x i8], [6 x i8], %struct.mac_address*, %struct.ieee80211_txrx_stypes*, %struct.ieee80211_iface_combination*, i32, i16, i16, i16, i16, i32, i32, i32, [2 x i8], i32, i32, i32, i8, i8, i8, i16, i16, i32, i32, i32, i32, i32*, i8, i8, i32, i32, i8, [32 x i8], i32, %struct.wiphy_wowlan_support*, %struct.cfg80211_wowlan*, i16, i8, i32, i32, i32, i8*, i8*, i8, %struct.wiphy_iftype_ext_capab*, i32, i8*, [3 x %struct.ieee80211_supported_band*], void (%struct.wiphy*, %struct.regulatory_request*)*, %struct.ieee80211_regdomain*, %struct.device, i8, %struct.dentry*, %struct.ieee80211_ht_cap*, %struct.ieee80211_vht_cap*, %struct.list_head, %struct.possible_net_t, %struct.wiphy_coalesce_support*, %struct.wiphy_vendor_command*, %struct.nl80211_vendor_cmd_info*, i32, i32, i16, i8, i8, i32, i64, i8, [31 x i8], [0 x i8] }
%struct.mac_address = type { [6 x i8] }
%struct.ieee80211_txrx_stypes = type { i16, i16 }
%struct.ieee80211_iface_combination = type { %struct.ieee80211_iface_limit*, i32, i16, i8, i8, i8, i8, i32 }
%struct.ieee80211_iface_limit = type { i16, i16 }
%struct.wiphy_wowlan_support = type { i32, i32, i32, i32, i32, i32, %struct.wiphy_wowlan_tcp_support* }
%struct.wiphy_wowlan_tcp_support = type { %struct.nl80211_wowlan_tcp_data_token_feature*, i32, i32, i32, i8 }
%struct.nl80211_wowlan_tcp_data_token_feature = type { i32, i32, i32 }
%struct.cfg80211_wowlan = type { i8, i8, i8, i8, i8, i8, i8, %struct.cfg80211_pkt_pattern*, %struct.cfg80211_wowlan_tcp*, i32, %struct.cfg80211_sched_scan_request* }
%struct.cfg80211_pkt_pattern = type { i8*, i8*, i32, i32 }
%struct.cfg80211_wowlan_tcp = type { %struct.socket*, i32, i32, i16, i16, [6 x i8], i32, i8*, %struct.nl80211_wowlan_tcp_data_seq, i32, i32, i8*, i8*, i32, %struct.nl80211_wowlan_tcp_data_token }
%struct.socket = type { i32, i16, i64, %struct.socket_wq*, %struct.file*, %struct.sock*, %struct.proto_ops* }
%struct.socket_wq = type { %struct.__wait_queue_head, %struct.fasync_struct*, i64, %struct.callback_head, [8 x i8] }
%struct.fasync_struct = type { %struct.spinlock, i32, i32, %struct.fasync_struct*, %struct.file*, %struct.callback_head }
%struct.proto_ops = type { i32, %struct.module*, i32 (%struct.socket*)*, i32 (%struct.socket*, %struct.sockaddr*, i32)*, i32 (%struct.socket*, %struct.sockaddr*, i32, i32)*, i32 (%struct.socket*, %struct.socket*)*, i32 (%struct.socket*, %struct.socket*, i32, i1)*, i32 (%struct.socket*, %struct.sockaddr*, i32*, i32)*, i32 (%struct.file*, %struct.socket*, %struct.poll_table_struct*)*, i32 (%struct.socket*, i32, i64)*, i32 (%struct.socket*, i32, i64)*, i32 (%struct.socket*, i32)*, i32 (%struct.socket*, i32)*, i32 (%struct.socket*, i32, i32, i8*, i32)*, i32 (%struct.socket*, i32, i32, i8*, i32*)*, i32 (%struct.socket*, i32, i32, i8*, i32)*, i32 (%struct.socket*, i32, i32, i8*, i32*)*, i32 (%struct.socket*, %struct.msghdr*, i64)*, i32 (%struct.socket*, %struct.msghdr*, i64, i32)*, i32 (%struct.file*, %struct.socket*, %struct.vm_area_struct*)*, i64 (%struct.socket*, %struct.page*, i32, i64, i32)*, i64 (%struct.socket*, i64*, %struct.pipe_inode_info*, i64, i32)*, i32 (%struct.sock*, i32)*, i32 (%struct.socket*)*, i32 (%struct.sock*, %struct.read_descriptor_t*, i32 (%struct.read_descriptor_t*, %struct.sk_buff*, i32, i64)*)* }
%struct.sockaddr = type { i16, [14 x i8] }
%struct.poll_table_struct = type opaque
%struct.msghdr = type { i8*, i32, %struct.iov_iter, i8*, i64, i32, %struct.kiocb* }
%struct.iov_iter = type { i32, i64, i64, %union.anon.41, %union.anon.42 }
%union.anon.41 = type { %struct.iovec* }
%struct.iovec = type { i8*, i64 }
%union.anon.42 = type { i64 }
%struct.kiocb = type { %struct.file*, i64, void (%struct.kiocb*, i64, i64)*, i8*, i32 }
%struct.read_descriptor_t = type { i64, i64, %union.anon.70, i32 }
%union.anon.70 = type { i8* }
%struct.nl80211_wowlan_tcp_data_seq = type { i32, i32, i32 }
%struct.nl80211_wowlan_tcp_data_token = type { i32, i32, [0 x i8] }
%struct.cfg80211_sched_scan_request = type { %struct.cfg80211_ssid*, i32, i32, i32, i8*, i64, i32, %struct.cfg80211_match_set*, i32, i32, i32, %struct.cfg80211_sched_scan_plan*, i32, [6 x i8], [6 x i8], i8, i8, %struct.cfg80211_bss_select_adjust, %struct.wiphy*, %struct.net_device*, i64, %struct.callback_head, i32, [0 x %struct.ieee80211_channel*] }
%struct.cfg80211_ssid = type { [32 x i8], i8 }
%struct.cfg80211_match_set = type { %struct.cfg80211_ssid, i32 }
%struct.cfg80211_sched_scan_plan = type { i32, i32 }
%struct.cfg80211_bss_select_adjust = type { i32, i8 }
%struct.ieee80211_channel = type { i32, i16, i16, i32, i32, i32, i32, i8, i32, i32, i32, i32, i64, i32 }
%struct.wiphy_iftype_ext_capab = type { i32, i8*, i8*, i8 }
%struct.ieee80211_supported_band = type { %struct.ieee80211_channel*, %struct.ieee80211_rate*, i32, i32, i32, %struct.ieee80211_sta_ht_cap, %struct.ieee80211_sta_vht_cap }
%struct.ieee80211_rate = type { i32, i16, i16, i16 }
%struct.ieee80211_sta_ht_cap = type <{ i16, i8, i8, i8, %struct.ieee80211_mcs_info, i8 }>
%struct.ieee80211_mcs_info = type { [10 x i8], i16, i8, [3 x i8] }
%struct.ieee80211_sta_vht_cap = type { i8, i32, %struct.ieee80211_vht_mcs_info }
%struct.ieee80211_vht_mcs_info = type { i16, i16, i16, i16 }
%struct.regulatory_request = type { %struct.callback_head, i32, i32, i32, [2 x i8], i32, i8, i8, i32, %struct.list_head }
%struct.ieee80211_regdomain = type { %struct.callback_head, i32, [3 x i8], i32, [0 x %struct.ieee80211_reg_rule] }
%struct.ieee80211_reg_rule = type { %struct.ieee80211_freq_range, %struct.ieee80211_power_rule, i32, i32 }
%struct.ieee80211_freq_range = type { i32, i32, i32 }
%struct.ieee80211_power_rule = type { i32, i32 }
%struct.ieee80211_ht_cap = type <{ i16, i8, %struct.ieee80211_mcs_info, i16, i32, i8 }>
%struct.ieee80211_vht_cap = type { i32, %struct.ieee80211_vht_mcs_info }
%struct.wiphy_coalesce_support = type { i32, i32, i32, i32, i32, i32 }
%struct.wiphy_vendor_command = type { %struct.nl80211_vendor_cmd_info, i32, i32 (%struct.wiphy*, %struct.wireless_dev*, i8*, i32)*, i32 (%struct.wiphy*, %struct.wireless_dev*, %struct.sk_buff*, i8*, i32, i64*)* }
%struct.nl80211_vendor_cmd_info = type { i32, i32 }
%struct.cfg80211_conn = type opaque
%struct.cfg80211_cached_keys = type { [4 x %struct.key_params], [4 x [13 x i8]], i32 }
%struct.key_params = type { i8*, i8*, i32, i32, i32 }
%struct.cfg80211_internal_bss = type { %struct.list_head, %struct.list_head, %struct.rb_node, i64, i64, i64, %struct.atomic_t, i64, [6 x i8], %struct.cfg80211_bss }
%struct.cfg80211_bss = type { %struct.ieee80211_channel*, i32, %struct.cfg80211_bss_ies*, %struct.cfg80211_bss_ies*, %struct.cfg80211_bss_ies*, %struct.cfg80211_bss*, i32, i16, i16, [6 x i8], [2 x i8], [0 x i8] }
%struct.cfg80211_bss_ies = type { i64, %struct.callback_head, i32, i8, [0 x i8] }
%struct.cfg80211_chan_def = type { %struct.ieee80211_channel*, i32, i32, i32 }
%struct.wpan_dev = type opaque
%struct.netdev_rx_queue = type { %struct.rps_map*, %struct.rps_dev_flow_table*, %struct.kobject, %struct.net_device*, [40 x i8] }
%struct.rps_map = type { i32, %struct.callback_head, [0 x i16] }
%struct.rps_dev_flow_table = type { i32, %struct.callback_head, [0 x %struct.rps_dev_flow] }
%struct.rps_dev_flow = type { i16, i16, i32 }
%struct.nf_hook_entry = type opaque
%struct.cpu_rmap = type opaque
%struct.netdev_queue = type { %struct.net_device*, %struct.Qdisc*, %struct.Qdisc*, %struct.kobject, i32, i64, i64, [16 x i8], %struct.spinlock, i32, i64, i64, [40 x i8], %struct.dql }
%struct.dql = type { i32, i32, i32, [52 x i8], i32, i32, i32, i32, i32, i32, i64, i32, i32, i32, [20 x i8] }
%struct.Qdisc = type opaque
%struct.xps_dev_maps = type { %struct.callback_head, [0 x %struct.xps_map*] }
%struct.xps_map = type { i32, i32, %struct.callback_head, [0 x i16] }
%struct.tcf_proto = type opaque
%struct.timer_list = type { %struct.hlist_node, i64, void (i64)*, i64, i32 }
%struct.netpoll_info = type opaque
%struct.possible_net_t = type { %struct.net* }
%union.anon.71 = type { i8* }
%struct.device = type { %struct.device*, %struct.device_private*, %struct.kobject, i8*, %struct.device_type*, %struct.mutex, %struct.bus_type*, %struct.device_driver*, i8*, i8*, %struct.dev_links_info, %struct.dev_pm_info, %struct.dev_pm_domain*, %struct.irq_domain*, %struct.list_head, i32, %struct.dma_map_ops*, i64*, i64, i64, %struct.device_dma_parameters*, %struct.list_head, %struct.dma_coherent_mem*, %struct.dev_archdata, %struct.device_node*, %struct.fwnode_handle*, i32, i32, %struct.spinlock, %struct.list_head, %struct.klist_node, %struct.class*, %struct.attribute_group**, void (%struct.device*)*, %struct.iommu_group*, %struct.iommu_fwspec*, i8 }
%struct.device_private = type opaque
%struct.device_type = type { i8*, %struct.attribute_group**, i32 (%struct.device*, %struct.kobj_uevent_env*)*, i8* (%struct.device*, i16*, %struct.kuid_t*, %struct.kgid_t*)*, void (%struct.device*)*, %struct.dev_pm_ops* }
%struct.dev_pm_ops = type { i32 (%struct.device*)*, void (%struct.device*)*, i32 (%struct.device*)*, i32 (%struct.device*)*, i32 (%struct.device*)*, i32 (%struct.device*)*, i32 (%struct.device*)*, i32 (%struct.device*)*, i32 (%struct.device*)*, i32 (%struct.device*)*, i32 (%struct.device*)*, i32 (%struct.device*)*, i32 (%struct.device*)*, i32 (%struct.device*)*, i32 (%struct.device*)*, i32 (%struct.device*)*, i32 (%struct.device*)*, i32 (%struct.device*)*, i32 (%struct.device*)*, i32 (%struct.device*)*, i32 (%struct.device*)*, i32 (%struct.device*)*, i32 (%struct.device*)* }
%struct.bus_type = type { i8*, i8*, %struct.device*, %struct.device_attribute*, %struct.attribute_group**, %struct.attribute_group**, %struct.attribute_group**, i32 (%struct.device*, %struct.device_driver*)*, i32 (%struct.device*, %struct.kobj_uevent_env*)*, i32 (%struct.device*)*, i32 (%struct.device*)*, void (%struct.device*)*, i32 (%struct.device*)*, i32 (%struct.device*)*, i32 (%struct.device*, i32)*, i32 (%struct.device*)*, i32 (%struct.device*)*, %struct.dev_pm_ops*, %struct.iommu_ops*, %struct.subsys_private*, %struct.lock_class_key }
%struct.device_attribute = type { %struct.attribute, i64 (%struct.device*, %struct.device_attribute*, i8*)*, i64 (%struct.device*, %struct.device_attribute*, i8*, i64)* }
%struct.iommu_ops = type opaque
%struct.subsys_private = type opaque
%struct.device_driver = type { i8*, %struct.bus_type*, %struct.module*, i8*, i8, i32, %struct.of_device_id*, %struct.acpi_device_id*, i32 (%struct.device*)*, i32 (%struct.device*)*, void (%struct.device*)*, i32 (%struct.device*, i32)*, i32 (%struct.device*)*, %struct.attribute_group**, %struct.dev_pm_ops*, %struct.driver_private* }
%struct.of_device_id = type { [32 x i8], [32 x i8], [128 x i8], i8* }
%struct.acpi_device_id = type { [9 x i8], i64, i32, i32 }
%struct.driver_private = type opaque
%struct.dev_links_info = type { %struct.list_head, %struct.list_head, i32 }
%struct.dev_pm_info = type { %struct.pm_message, i16, %struct.spinlock, %struct.list_head, %struct.completion, %struct.wakeup_source*, i8, %struct.timer_list, i64, %struct.work_struct, %struct.__wait_queue_head, %struct.wake_irq*, %struct.atomic_t, %struct.atomic_t, i16, i32, i32, i32, i32, i32, i64, i64, i64, i64, %struct.pm_subsys_data*, void (%struct.device*, i32)*, %struct.dev_pm_qos* }
%struct.pm_message = type { i32 }
%struct.wakeup_source = type { i8*, %struct.list_head, %struct.spinlock, %struct.wake_irq*, %struct.timer_list, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i8 }
%struct.wake_irq = type opaque
%struct.pm_subsys_data = type { %struct.spinlock, i32, %struct.list_head }
%struct.dev_pm_qos = type opaque
%struct.dev_pm_domain = type { %struct.dev_pm_ops, void (%struct.device*, i1)*, i32 (%struct.device*)*, void (%struct.device*)*, void (%struct.device*)* }
%struct.irq_domain = type opaque
%struct.dma_map_ops = type { i8* (%struct.device*, i64, i64*, i32, i64)*, void (%struct.device*, i64, i8*, i64, i64)*, i32 (%struct.device*, %struct.vm_area_struct*, i8*, i64, i64, i64)*, i32 (%struct.device*, %struct.sg_table*, i8*, i64, i64, i64)*, i64 (%struct.device*, %struct.page*, i64, i64, i32, i64)*, void (%struct.device*, i64, i64, i32, i64)*, i32 (%struct.device*, %struct.scatterlist*, i32, i32, i64)*, void (%struct.device*, %struct.scatterlist*, i32, i32, i64)*, i64 (%struct.device*, i64, i64, i32, i64)*, void (%struct.device*, i64, i64, i32, i64)*, void (%struct.device*, i64, i64, i32)*, void (%struct.device*, i64, i64, i32)*, void (%struct.device*, %struct.scatterlist*, i32, i32)*, void (%struct.device*, %struct.scatterlist*, i32, i32)*, i32 (%struct.device*, i64)*, i32 (%struct.device*, i64)*, i32 (%struct.device*, i64)*, i32 }
%struct.sg_table = type { %struct.scatterlist*, i32, i32 }
%struct.scatterlist = type { i64, i32, i32, i64, i32 }
%struct.device_dma_parameters = type { i32, i64 }
%struct.dma_coherent_mem = type opaque
%struct.dev_archdata = type { i8* }
%struct.device_node = type { i8*, i8*, i32, i8*, %struct.fwnode_handle, %struct.property*, %struct.property*, %struct.device_node*, %struct.device_node*, %struct.device_node*, %struct.kobject, i64, i8* }
%struct.fwnode_handle = type { i32, %struct.fwnode_handle* }
%struct.property = type { i8*, i32, i8*, %struct.property*, i64, i32, %struct.bin_attribute }
%struct.bin_attribute = type { %struct.attribute, i64, i8*, i64 (%struct.file*, %struct.kobject*, %struct.bin_attribute*, i8*, i64, i64)*, i64 (%struct.file*, %struct.kobject*, %struct.bin_attribute*, i8*, i64, i64)*, i32 (%struct.file*, %struct.kobject*, %struct.bin_attribute*, %struct.vm_area_struct*)* }
%struct.klist_node = type { i8*, %struct.list_head, %struct.kref }
%struct.class = type { i8*, %struct.module*, %struct.class_attribute*, %struct.attribute_group**, %struct.attribute_group**, %struct.kobject*, i32 (%struct.device*, %struct.kobj_uevent_env*)*, i8* (%struct.device*, i16*)*, void (%struct.class*)*, void (%struct.device*)*, i32 (%struct.device*, i32)*, i32 (%struct.device*)*, %struct.kobj_ns_type_operations*, i8* (%struct.device*)*, %struct.dev_pm_ops*, %struct.subsys_private* }
%struct.class_attribute = type { %struct.attribute, i64 (%struct.class*, %struct.class_attribute*, i8*)*, i64 (%struct.class*, %struct.class_attribute*, i8*, i64)* }
%struct.iommu_group = type opaque
%struct.iommu_fwspec = type opaque
%struct.attribute_group = type { i8*, i16 (%struct.kobject*, %struct.attribute*, i32)*, i16 (%struct.kobject*, %struct.bin_attribute*, i32)*, %struct.attribute**, %struct.bin_attribute** }
%struct.rtnl_link_ops = type opaque
%struct.netdev_tc_txq = type { i16, i16 }
%struct.phy_device = type opaque
%struct.netns_core = type { %struct.ctl_table_header*, i32, %struct.prot_inuse* }
%struct.prot_inuse = type opaque
%struct.netns_mib = type { %struct.tcp_mib*, %struct.ipstats_mib*, %struct.linux_mib*, %struct.udp_mib*, %struct.udp_mib*, %struct.icmp_mib*, %struct.icmpmsg_mib*, %struct.proc_dir_entry*, %struct.udp_mib*, %struct.udp_mib*, %struct.ipstats_mib*, %struct.icmpv6_mib*, %struct.icmpv6msg_mib* }
%struct.tcp_mib = type { [16 x i64] }
%struct.linux_mib = type { [119 x i64] }
%struct.icmp_mib = type { [28 x i64] }
%struct.icmpmsg_mib = type { [512 x %struct.atomic64_t] }
%struct.udp_mib = type { [9 x i64] }
%struct.ipstats_mib = type { [36 x i64], %struct.u64_stats_sync }
%struct.u64_stats_sync = type {}
%struct.icmpv6_mib = type { [6 x i64] }
%struct.icmpv6msg_mib = type { [512 x %struct.atomic64_t] }
%struct.netns_packet = type { %struct.mutex, %struct.hlist_head }
%struct.netns_unix = type { i32, %struct.ctl_table_header* }
%struct.netns_ipv4 = type { %struct.ctl_table_header*, %struct.ctl_table_header*, %struct.ctl_table_header*, %struct.ctl_table_header*, %struct.ctl_table_header*, %struct.ipv4_devconf*, %struct.ipv4_devconf*, %struct.fib_rules_ops*, i8, %struct.fib_table*, %struct.fib_table*, %struct.hlist_head*, i8, %struct.sock*, %struct.sock**, %struct.sock*, %struct.inet_peer_base*, %struct.sock**, [48 x i8], %struct.netns_frags, %struct.xt_table*, %struct.xt_table*, %struct.xt_table*, %struct.xt_table*, %struct.xt_table*, %struct.xt_table*, i32, i32, i32, i32, i32, i32, %struct.local_ports, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, [56 x i8], %struct.inet_timewait_death_row, i32, i32, i32, i32, i32, %struct.ping_group_range, %struct.atomic_t, i64*, i32, %struct.mr_table*, i32, i32, %struct.atomic_t, [52 x i8] }
%struct.ipv4_devconf = type opaque
%struct.fib_rules_ops = type opaque
%struct.fib_table = type opaque
%struct.inet_peer_base = type opaque
%struct.netns_frags = type { %struct.percpu_counter, i32, i32, i32, i32, [8 x i8] }
%struct.percpu_counter = type { %struct.raw_spinlock, i64, %struct.list_head, i32* }
%struct.xt_table = type opaque
%struct.local_ports = type { %struct.seqlock_t, [2 x i32], i8 }
%struct.inet_timewait_death_row = type { %struct.atomic_t, [60 x i8], %struct.inet_hashinfo*, i32, i32, [48 x i8] }
%struct.inet_hashinfo = type opaque
%struct.ping_group_range = type { %struct.seqlock_t, [2 x %struct.kgid_t] }
%struct.mr_table = type opaque
%struct.netns_ipv6 = type { %struct.netns_sysctl_ipv6, %struct.ipv6_devconf*, %struct.ipv6_devconf*, %struct.inet_peer_base*, [56 x i8], %struct.netns_frags, %struct.xt_table*, %struct.xt_table*, %struct.xt_table*, %struct.xt_table*, %struct.xt_table*, %struct.rt6_info*, %struct.rt6_statistics*, %struct.timer_list, %struct.hlist_head*, %struct.fib6_table*, %struct.list_head, [56 x i8], %struct.dst_ops, %struct.rwlock_t, %struct.spinlock, i32, i64, %struct.sock**, %struct.sock*, %struct.sock*, %struct.sock*, %struct.sock*, %struct.atomic_t, %struct.atomic_t, %struct.seg6_pernet_data*, [48 x i8] }
%struct.netns_sysctl_ipv6 = type { %struct.ctl_table_header*, %struct.ctl_table_header*, %struct.ctl_table_header*, %struct.ctl_table_header*, %struct.ctl_table_header*, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32 }
%struct.ipv6_devconf = type opaque
%struct.rt6_info = type opaque
%struct.rt6_statistics = type opaque
%struct.fib6_table = type opaque
%struct.dst_ops = type { i16, i32, i32 (%struct.dst_ops*)*, %struct.dst_entry* (%struct.dst_entry*, i32)*, i32 (%struct.dst_entry*)*, i32 (%struct.dst_entry*)*, i32* (%struct.dst_entry*, i64)*, void (%struct.dst_entry*)*, void (%struct.dst_entry*, %struct.net_device*, i32)*, %struct.dst_entry* (%struct.dst_entry*)*, void (%struct.sk_buff*)*, void (%struct.dst_entry*, %struct.sock*, %struct.sk_buff*, i32)*, void (%struct.dst_entry*, %struct.sock*, %struct.sk_buff*)*, i32 (%struct.net*, %struct.sock*, %struct.sk_buff*)*, %struct.neighbour* (%struct.dst_entry*, %struct.sk_buff*, i8*)*, void (%struct.dst_entry*, i8*)*, %struct.kmem_cache*, %struct.percpu_counter, [24 x i8] }
%struct.dst_entry = type opaque
%struct.kmem_cache = type opaque
%struct.rwlock_t = type { %struct.qrwlock }
%struct.qrwlock = type { %struct.atomic_t, %struct.qspinlock }
%struct.seg6_pernet_data = type opaque
%struct.netns_nf = type { %struct.proc_dir_entry*, %struct.nf_queue_handler*, [13 x %struct.nf_logger*], %struct.ctl_table_header*, [13 x [8 x %struct.nf_hook_entry*]], i8, i8 }
%struct.nf_queue_handler = type opaque
%struct.nf_logger = type opaque
%struct.netns_xt = type { [13 x %struct.list_head], i8, i8 }
%struct.netns_ct = type { %struct.atomic_t, i32, %struct.ctl_table_header*, %struct.ctl_table_header*, %struct.ctl_table_header*, %struct.ctl_table_header*, %struct.ctl_table_header*, i32, i32, i32, i32, i8, i32, i32, %struct.ct_pcpu*, %struct.ip_conntrack_stat*, %struct.nf_ct_event_notifier*, %struct.nf_exp_event_notifier*, %struct.nf_ip_net }
%struct.ct_pcpu = type { %struct.spinlock, %struct.hlist_nulls_head, %struct.hlist_nulls_head }
%struct.hlist_nulls_head = type { %struct.hlist_nulls_node* }
%struct.hlist_nulls_node = type { %struct.hlist_nulls_node*, %struct.hlist_nulls_node** }
%struct.ip_conntrack_stat = type opaque
%struct.nf_ct_event_notifier = type opaque
%struct.nf_exp_event_notifier = type opaque
%struct.nf_ip_net = type { %struct.nf_generic_net, %struct.nf_tcp_net, %struct.nf_udp_net, %struct.nf_icmp_net, %struct.nf_icmp_net }
%struct.nf_generic_net = type { %struct.nf_proto_net, i32 }
%struct.nf_proto_net = type { %struct.ctl_table_header*, %struct.ctl_table*, i32 }
%struct.nf_tcp_net = type { %struct.nf_proto_net, [14 x i32], i32, i32, i32 }
%struct.nf_udp_net = type { %struct.nf_proto_net, [2 x i32] }
%struct.nf_icmp_net = type { %struct.nf_proto_net, i32 }
%struct.netns_nf_frag = type { %struct.netns_sysctl_ipv6, [16 x i8], %struct.netns_frags }
%struct.net_generic = type opaque
%struct.netns_xfrm = type { %struct.list_head, %struct.hlist_head*, %struct.hlist_head*, %struct.hlist_head*, i32, i32, %struct.work_struct, %struct.list_head, %struct.hlist_head*, i32, [3 x %struct.hlist_head], [3 x %struct.xfrm_policy_hash], [6 x i32], %struct.work_struct, %struct.xfrm_policy_hthresh, %struct.sock*, %struct.sock*, i32, i32, i32, i32, %struct.ctl_table_header*, [56 x i8], %struct.dst_ops, %struct.dst_ops, %struct.spinlock, %struct.spinlock, %struct.mutex, %struct.flow_cache, %struct.atomic_t, %struct.list_head, %struct.atomic_t, %struct.spinlock, %struct.work_struct, %struct.work_struct, %struct.mutex }
%struct.xfrm_policy_hash = type { %struct.hlist_head*, i32, i8, i8, i8, i8 }
%struct.xfrm_policy_hthresh = type { %struct.work_struct, %struct.seqlock_t, i8, i8, i8, i8 }
%struct.flow_cache = type { i32, %struct.flow_cache_percpu*, %struct.hlist_node, i32, i32, %struct.timer_list }
%struct.flow_cache_percpu = type { %struct.hlist_head*, i32, i32, i32, %struct.tasklet_struct }
%struct.tasklet_struct = type { %struct.tasklet_struct*, i64, %struct.atomic_t, void (i64)*, i64 }
%struct.cgroup_namespace = type { %struct.atomic_t, %struct.ns_common, %struct.user_namespace*, %struct.ucounts*, %struct.css_set* }
%struct.signal_struct = type opaque
%struct.sighand_struct = type opaque
%struct.sigset_t = type { [1 x i64] }
%struct.sigpending = type { %struct.list_head, %struct.sigset_t }
%struct.audit_context = type opaque
%struct.seccomp = type { i32, %struct.seccomp_filter* }
%struct.seccomp_filter = type opaque
%struct.wake_q_node = type { %struct.wake_q_node* }
%struct.rb_root = type { %struct.rb_node* }
%struct.rt_mutex_waiter = type opaque
%struct.bio_list = type opaque
%struct.blk_plug = type opaque
%struct.reclaim_state = type opaque
%struct.io_context = type opaque
%struct.siginfo = type { i32, i32, i32, %union.anon.24 }
%union.anon.24 = type { %struct.anon.28, [80 x i8] }
%struct.anon.28 = type { i32, i32, i32, i64, i64 }
%struct.task_io_accounting = type { i64, i64, i64, i64, i64, i64, i64 }
%struct.nodemask_t = type { [1 x i64] }
%struct.css_set = type { [4 x %struct.cgroup_subsys_state*], %struct.atomic_t, %struct.cgroup*, %struct.list_head, %struct.list_head, %struct.list_head, [4 x %struct.list_head], %struct.hlist_node, %struct.list_head, %struct.list_head, %struct.list_head, %struct.cgroup*, %struct.cgroup*, %struct.css_set*, i8, %struct.callback_head }
%struct.cgroup_subsys_state = type { %struct.cgroup*, %struct.cgroup_subsys*, %struct.percpu_ref, %struct.cgroup_subsys_state*, %struct.list_head, %struct.list_head, i32, i32, i64, %struct.atomic_t, %struct.callback_head, %struct.work_struct }
%struct.cgroup_subsys = type { %struct.cgroup_subsys_state* (%struct.cgroup_subsys_state*)*, i32 (%struct.cgroup_subsys_state*)*, void (%struct.cgroup_subsys_state*)*, void (%struct.cgroup_subsys_state*)*, void (%struct.cgroup_subsys_state*)*, void (%struct.cgroup_subsys_state*)*, i32 (%struct.cgroup_taskset*)*, void (%struct.cgroup_taskset*)*, void (%struct.cgroup_taskset*)*, void ()*, i32 (%struct.task_struct*)*, void (%struct.task_struct*)*, void (%struct.task_struct*)*, void (%struct.task_struct*)*, void (%struct.task_struct*)*, void (%struct.cgroup_subsys_state*)*, i8, i32, i8*, i8*, %struct.cgroup_root*, %struct.idr, %struct.list_head, %struct.cftype*, %struct.cftype*, i32 }
%struct.cgroup_taskset = type opaque
%struct.cgroup_root = type { %struct.kernfs_root*, i32, i32, %struct.cgroup, i32, %struct.atomic_t, %struct.list_head, i32, %struct.idr, [4096 x i8], [64 x i8] }
%struct.kernfs_root = type { %struct.kernfs_node*, i32, %struct.ida, %struct.kernfs_syscall_ops*, %struct.list_head, %struct.__wait_queue_head }
%struct.ida = type { %struct.radix_tree_root }
%struct.kernfs_syscall_ops = type { i32 (%struct.kernfs_root*, i32*, i8*)*, i32 (%struct.seq_file*, %struct.kernfs_root*)*, i32 (%struct.kernfs_node*, i8*, i16)*, i32 (%struct.kernfs_node*)*, i32 (%struct.kernfs_node*, %struct.kernfs_node*, i8*)*, i32 (%struct.seq_file*, %struct.kernfs_node*, %struct.kernfs_root*)* }
%struct.cgroup = type { %struct.cgroup_subsys_state, i64, i32, i32, i32, %struct.kernfs_node*, %struct.cgroup_file, %struct.cgroup_file, i16, i16, i16, i16, [4 x %struct.cgroup_subsys_state*], %struct.cgroup_root*, %struct.list_head, [4 x %struct.list_head], %struct.list_head, %struct.mutex, %struct.__wait_queue_head, %struct.work_struct, %struct.cgroup_bpf, [0 x i32] }
%struct.cgroup_file = type { %struct.kernfs_node* }
%struct.cgroup_bpf = type {}
%struct.cftype = type { [64 x i8], i64, i64, i32, i32, %struct.cgroup_subsys*, %struct.list_head, %struct.kernfs_ops*, i32 (%struct.kernfs_open_file*)*, void (%struct.kernfs_open_file*)*, i64 (%struct.cgroup_subsys_state*, %struct.cftype*)*, i64 (%struct.cgroup_subsys_state*, %struct.cftype*)*, i32 (%struct.seq_file*, i8*)*, i8* (%struct.seq_file*, i64*)*, i8* (%struct.seq_file*, i8*, i64*)*, void (%struct.seq_file*, i8*)*, i32 (%struct.cgroup_subsys_state*, %struct.cftype*, i64)*, i32 (%struct.cgroup_subsys_state*, %struct.cftype*, i64)*, i64 (%struct.kernfs_open_file*, i8*, i64, i64)* }
%struct.percpu_ref = type { %struct.atomic64_t, i64, void (%struct.percpu_ref*)*, void (%struct.percpu_ref*)*, i8, %struct.callback_head }
%struct.robust_list_head = type opaque
%struct.compat_robust_list_head = type { %struct.compat_robust_list, i32, i32 }
%struct.compat_robust_list = type { i32 }
%struct.futex_pi_state = type opaque
%struct.perf_event_context = type opaque
%struct.mempolicy = type opaque
%struct.tlbflush_unmap_batch = type { %struct.cpumask, i8, i8 }
%struct.pipe_inode_info = type { %struct.mutex, %struct.__wait_queue_head, i32, i32, i32, i32, i32, i32, i32, i32, i32, %struct.page*, %struct.fasync_struct*, %struct.fasync_struct*, %struct.pipe_buffer*, %struct.user_struct* }
%struct.pipe_buffer = type { %struct.page*, i32, i32, %struct.pipe_buf_operations*, i32, i64 }
%struct.pipe_buf_operations = type { i32, i32 (%struct.pipe_inode_info*, %struct.pipe_buffer*)*, void (%struct.pipe_inode_info*, %struct.pipe_buffer*)*, i32 (%struct.pipe_inode_info*, %struct.pipe_buffer*)*, void (%struct.pipe_inode_info*, %struct.pipe_buffer*)* }
%struct.user_struct = type { %struct.atomic_t, %struct.atomic_t, %struct.atomic_t, %struct.atomic64_t, i64, i64, i64, %struct.atomic64_t, %struct.key*, %struct.key*, %struct.hlist_node, %struct.kuid_t, %struct.atomic64_t }
%struct.key = type { %struct.atomic_t, i32, %union.anon.72, %struct.rw_semaphore, %struct.key_user*, i8*, %union.anon.73, i64, %struct.kuid_t, %struct.kgid_t, i32, i16, i16, i64, %union.anon.74, %union.anon.76, i32 (%struct.key*, %struct.key_type*, %union.key_payload*)* }
%union.anon.72 = type { %struct.rb_node }
%struct.key_user = type opaque
%union.anon.73 = type { i64 }
%union.anon.74 = type { %struct.keyring_index_key }
%struct.keyring_index_key = type { %struct.key_type*, i8*, i64 }
%struct.key_type = type opaque
%union.anon.76 = type { %union.key_payload }
%union.key_payload = type { [4 x i8*] }
%struct.page_frag = type { %struct.page*, i32, i32 }
%struct.task_delay_info = type opaque
%struct.vm_struct = type opaque
%struct.thread_struct = type { [3 x %struct.desc_struct], i64, i64, i16, i16, i16, i16, i32, i64, i64, [4 x %struct.perf_event*], i64, i64, i64, i64, i64, i64*, i64, i32, %struct.mm_segment_t, i8, [15 x i8], %struct.fpu }
%struct.desc_struct = type { %union.anon.34 }
%union.anon.34 = type { %struct.anon.35 }
%struct.anon.35 = type { i32, i32 }
%struct.perf_event = type opaque
%struct.mm_segment_t = type { i64 }
%struct.fpu = type { i32, i8, i8, [58 x i8], %union.fpregs_state }
%union.fpregs_state = type { %struct.xregs_state, [3520 x i8] }
%struct.xregs_state = type { %struct.fxregs_state, %struct.xstate_header, [0 x i8] }
%struct.fxregs_state = type { i16, i16, i16, i16, %union.anon.37, i32, i32, [32 x i32], [64 x i32], [12 x i32], %union.anon.40 }
%union.anon.37 = type { %struct.anon.38 }
%struct.anon.38 = type { i64, i64 }
%union.anon.40 = type { [12 x i32] }
%struct.xstate_header = type { i64, i64, [6 x i64] }
%struct.xattr_handler = type opaque
%struct.fscrypt_operations = type opaque
%struct.hlist_bl_head = type { %struct.hlist_bl_node* }
%struct.block_device = type { i32, i32, %struct.inode*, %struct.super_block*, %struct.mutex, i8*, i8*, i32, i8, %struct.list_head, %struct.block_device*, i32, %struct.hd_struct*, i32, i32, %struct.gendisk*, %struct.request_queue*, %struct.backing_dev_info*, %struct.list_head, i64, i32, %struct.mutex }
%struct.hd_struct = type opaque
%struct.gendisk = type opaque
%struct.request_queue = type opaque
%struct.backing_dev_info = type opaque
%struct.mtd_info = type opaque
%struct.hlist_node = type { %struct.hlist_node*, %struct.hlist_node** }
%struct.quota_info = type { i32, %struct.mutex, [3 x %struct.inode*], [3 x %struct.mem_dqinfo], [3 x %struct.quota_format_ops*] }
%struct.mem_dqinfo = type { %struct.quota_format_type*, i32, %struct.list_head, i64, i32, i32, i64, i64, i8* }
%struct.quota_format_type = type { i32, %struct.quota_format_ops*, %struct.module*, %struct.quota_format_type* }
%struct.quota_format_ops = type { i32 (%struct.super_block*, i32)*, i32 (%struct.super_block*, i32)*, i32 (%struct.super_block*, i32)*, i32 (%struct.super_block*, i32)*, i32 (%struct.dquot*)*, i32 (%struct.dquot*)*, i32 (%struct.dquot*)*, i32 (%struct.super_block*, %struct.kqid*)* }
%struct.sb_writers = type { i32, %struct.__wait_queue_head, [3 x %struct.percpu_rw_semaphore] }
%struct.percpu_rw_semaphore = type { %struct.rcu_sync, i32*, %struct.rw_semaphore, %struct.rcuwait, i32 }
%struct.rcu_sync = type { i32, i32, %struct.__wait_queue_head, i32, %struct.callback_head, i32 }
%struct.rcuwait = type { %struct.task_struct* }
%struct.shrinker = type { i64 (%struct.shrinker*, %struct.shrink_control*)*, i64 (%struct.shrinker*, %struct.shrink_control*)*, i32, i64, i64, %struct.list_head, %struct.atomic64_t* }
%struct.workqueue_struct = type opaque
%struct.hlist_head = type { %struct.hlist_node* }
%struct.user_namespace = type { %struct.uid_gid_map, %struct.uid_gid_map, %struct.uid_gid_map, %struct.atomic_t, %struct.user_namespace*, i32, %struct.kuid_t, %struct.kgid_t, %struct.ns_common, i64, %struct.work_struct, %struct.ctl_table_set, %struct.ctl_table_header*, %struct.ucounts*, [9 x i32] }
%struct.uid_gid_map = type { i32, [5 x %struct.uid_gid_extent] }
%struct.uid_gid_extent = type { i32, i32, i32 }
%struct.list_lru = type { %struct.list_lru_node* }
%struct.list_lru_node = type { %struct.spinlock, %struct.list_lru_one, [32 x i8] }
%struct.list_lru_one = type { %struct.list_head, i64 }
%struct.work_struct = type { %struct.atomic64_t, %struct.list_head, void (%struct.work_struct*)* }
%union.anon.60 = type { %struct.list_head }
%union.anon.61 = type { %struct.hlist_node }
%struct.inode = type { i16, i16, %struct.kuid_t, %struct.kgid_t, i32, %struct.posix_acl*, %struct.posix_acl*, %struct.inode_operations*, %struct.super_block*, %struct.address_space*, i8*, i64, %union.anon.53, i32, i64, %struct.timespec, %struct.timespec, %struct.timespec, %struct.spinlock, i16, i32, i64, i64, %struct.rw_semaphore, i64, i64, %struct.hlist_node, %struct.list_head, %struct.list_head, %struct.list_head, %struct.list_head, %union.anon.54, i64, %struct.atomic_t, %struct.atomic_t, %struct.atomic_t, %struct.file_operations*, %struct.file_lock_context*, %struct.address_space, %struct.list_head, %union.anon.57, i32, i32, %struct.hlist_head, i8* }
%struct.posix_acl = type opaque
%struct.inode_operations = type { %struct.dentry* (%struct.inode*, %struct.dentry*, i32)*, i8* (%struct.dentry*, %struct.inode*, %struct.delayed_call*)*, i32 (%struct.inode*, i32)*, %struct.posix_acl* (%struct.inode*, i32)*, i32 (%struct.dentry*, i8*, i32)*, i32 (%struct.inode*, %struct.dentry*, i16, i1)*, i32 (%struct.dentry*, %struct.inode*, %struct.dentry*)*, i32 (%struct.inode*, %struct.dentry*)*, i32 (%struct.inode*, %struct.dentry*, i8*)*, i32 (%struct.inode*, %struct.dentry*, i16)*, i32 (%struct.inode*, %struct.dentry*)*, i32 (%struct.inode*, %struct.dentry*, i16, i32)*, i32 (%struct.inode*, %struct.dentry*, %struct.inode*, %struct.dentry*, i32)*, i32 (%struct.dentry*, %struct.iattr*)*, i32 (%struct.path*, %struct.kstat*, i32, i32)*, i64 (%struct.dentry*, i8*, i64)*, i32 (%struct.inode*, %struct.fiemap_extent_info*, i64, i64)*, i32 (%struct.inode*, %struct.timespec*, i32)*, i32 (%struct.inode*, %struct.dentry*, %struct.file*, i32, i16, i32*)*, i32 (%struct.inode*, %struct.dentry*, i16)*, i32 (%struct.inode*, %struct.posix_acl*, i32)*, [24 x i8] }
%struct.delayed_call = type { void (i8*)*, i8* }
%struct.iattr = type { i32, i16, %struct.kuid_t, %struct.kgid_t, i64, %struct.timespec, %struct.timespec, %struct.timespec, %struct.file* }
%struct.kstat = type { i32, i16, i32, i32, i64, i64, i64, i32, i32, %struct.kuid_t, %struct.kgid_t, i64, %struct.timespec, %struct.timespec, %struct.timespec, %struct.timespec, i64 }
%struct.fiemap_extent_info = type { i32, i32, i32, %struct.fiemap_extent* }
%struct.fiemap_extent = type { i64, i64, i64, [2 x i64], i32, [3 x i32] }
%union.anon.53 = type { i32 }
%struct.timespec = type { i64, i64 }
%union.anon.54 = type { %struct.callback_head }
%struct.file_lock_context = type { %struct.spinlock, %struct.list_head, %struct.list_head, %struct.list_head }
%struct.address_space = type { %struct.inode*, %struct.radix_tree_root, %struct.spinlock, %struct.atomic_t, %struct.rb_root, %struct.rw_semaphore, i64, i64, i64, %struct.address_space_operations*, i64, %struct.spinlock, i32, %struct.list_head, i8* }
%struct.address_space_operations = type { i32 (%struct.page*, %struct.writeback_control*)*, i32 (%struct.file*, %struct.page*)*, i32 (%struct.address_space*, %struct.writeback_control*)*, i32 (%struct.page*)*, i32 (%struct.file*, %struct.address_space*, %struct.list_head*, i32)*, i32 (%struct.file*, %struct.address_space*, i64, i32, i32, %struct.page**, i8**)*, i32 (%struct.file*, %struct.address_space*, i64, i32, i32, %struct.page*, i8*)*, i64 (%struct.address_space*, i64)*, void (%struct.page*, i32, i32)*, i32 (%struct.page*, i32)*, void (%struct.page*)*, i64 (%struct.kiocb*, %struct.iov_iter*)*, i32 (%struct.address_space*, %struct.page*, %struct.page*, i32)*, i1 (%struct.page*, i32)*, void (%struct.page*)*, i32 (%struct.page*)*, i32 (%struct.page*, i64, i64)*, void (%struct.page*, i8*, i8*)*, i32 (%struct.address_space*, %struct.page*)*, i32 (%struct.swap_info_struct*, %struct.file*, i64*)*, void (%struct.file*)* }
%struct.swap_info_struct = type opaque
%union.anon.57 = type { %struct.pipe_inode_info* }
%struct.file_operations = type { %struct.module*, i64 (%struct.file*, i64, i32)*, i64 (%struct.file*, i8*, i64, i64*)*, i64 (%struct.file*, i8*, i64, i64*)*, i64 (%struct.kiocb*, %struct.iov_iter*)*, i64 (%struct.kiocb*, %struct.iov_iter*)*, i32 (%struct.file*, %struct.dir_context*)*, i32 (%struct.file*, %struct.dir_context*)*, i32 (%struct.file*, %struct.poll_table_struct*)*, i64 (%struct.file*, i32, i64)*, i64 (%struct.file*, i32, i64)*, i32 (%struct.file*, %struct.vm_area_struct*)*, i32 (%struct.inode*, %struct.file*)*, i32 (%struct.file*, i8*)*, i32 (%struct.inode*, %struct.file*)*, i32 (%struct.file*, i64, i64, i32)*, i32 (i32, %struct.file*, i32)*, i32 (%struct.file*, i32, %struct.file_lock*)*, i64 (%struct.file*, %struct.page*, i32, i64, i64*, i32)*, i64 (%struct.file*, i64, i64, i64, i64)*, i32 (i32)*, i32 (%struct.file*, i32, %struct.file_lock*)*, i64 (%struct.pipe_inode_info*, %struct.file*, i64*, i64, i32)*, i64 (%struct.file*, i64*, %struct.pipe_inode_info*, i64, i32)*, i32 (%struct.file*, i64, %struct.file_lock**, i8**)*, i64 (%struct.file*, i32, i64, i64)*, void (%struct.seq_file*, %struct.file*)*, i64 (%struct.file*, i64, %struct.file*, i64, i64, i32)*, i32 (%struct.file*, i64, %struct.file*, i64, i64)*, i64 (%struct.file*, i64, i64, %struct.file*, i64)* }
%struct.dir_context = type { i32 (%struct.dir_context*, i8*, i32, i64, i64, i32)*, i64 }
%struct.file_lock = type { %struct.file_lock*, %struct.list_head, %struct.hlist_node, %struct.list_head, i8*, i32, i8, i32, i32, %struct.pid*, %struct.__wait_queue_head, %struct.file*, i64, i64, %struct.fasync_struct*, i64, i64, %struct.file_lock_operations*, %struct.lock_manager_operations*, %union.anon.55 }
%struct.file_lock_operations = type { void (%struct.file_lock*, %struct.file_lock*)*, void (%struct.file_lock*)* }
%struct.lock_manager_operations = type { i32 (%struct.file_lock*, %struct.file_lock*)*, i64 (%struct.file_lock*)*, i8* (i8*)*, void (i8*)*, void (%struct.file_lock*)*, i32 (%struct.file_lock*, i32)*, i1 (%struct.file_lock*)*, i32 (%struct.file_lock*, i32, %struct.list_head*)*, void (%struct.file_lock*, i8**)* }
%union.anon.55 = type { %struct.nfs_lock_info }
%struct.nfs_lock_info = type { i32, %struct.nlm_lockowner*, %struct.list_head }
%struct.nlm_lockowner = type opaque
%struct.atomic64_t = type { i64 }
%struct.fown_struct = type { %struct.rwlock_t, %struct.pid*, i32, %struct.kuid_t, %struct.kuid_t, i32 }
%struct.cred = type { %struct.atomic_t, %struct.kuid_t, %struct.kgid_t, %struct.kuid_t, %struct.kgid_t, %struct.kuid_t, %struct.kgid_t, %struct.kuid_t, %struct.kgid_t, i32, %struct.kernel_cap_struct, %struct.kernel_cap_struct, %struct.kernel_cap_struct, %struct.kernel_cap_struct, %struct.kernel_cap_struct, i8, %struct.key*, %struct.key*, %struct.key*, %struct.key*, i8*, %struct.user_struct*, %struct.user_namespace*, %struct.group_info*, %struct.callback_head }
%struct.kernel_cap_struct = type { [2 x i32] }
%struct.group_info = type { %struct.atomic_t, i32, [0 x %struct.kgid_t] }
%struct.file_ra_state = type { i64, i32, i32, i32, i32, i64 }
%struct.seq_file = type { i8*, i64, i64, i64, i64, i64, i64, i64, %struct.mutex, %struct.seq_operations*, i32, %struct.file*, i8* }
%struct.seq_operations = type { i8* (%struct.seq_file*, i64*)*, void (%struct.seq_file*, i8*)*, i8* (%struct.seq_file*, i8*, i64*)*, i32 (%struct.seq_file*, i8*)* }
%struct.vm_operations_struct = type { void (%struct.vm_area_struct*)*, void (%struct.vm_area_struct*)*, i32 (%struct.vm_area_struct*)*, i32 (%struct.vm_fault*)*, i32 (%struct.vm_fault*, i32)*, void (%struct.vm_fault*, i64, i64)*, i32 (%struct.vm_fault*)*, i32 (%struct.vm_fault*)*, i32 (%struct.vm_area_struct*, i64, i8*, i32, i32)*, i8* (%struct.vm_area_struct*)*, i32 (%struct.vm_area_struct*, %struct.mempolicy*)*, %struct.mempolicy* (%struct.vm_area_struct*, i64)*, %struct.page* (%struct.vm_area_struct*, i64)* }
%struct.vm_fault = type { %struct.vm_area_struct*, i32, i32, i64, i64, %struct.pmd_t*, %struct.pud_t*, %struct.pte_t, %struct.page*, %struct.mem_cgroup*, %struct.page*, %struct.pte_t*, %struct.spinlock*, %struct.page* }
%struct.pmd_t = type { i64 }
%struct.pud_t = type { i64 }
%struct.pte_t = type { i64 }
%struct.kernfs_open_node = type opaque
%struct.kernfs_iattrs = type opaque
%struct.kref = type { %struct.refcount_struct }
%struct.refcount_struct = type { %struct.atomic_t }
%struct.module_param_attrs = type opaque
%struct.module_attribute = type { %struct.attribute, i64 (%struct.module_attribute*, %struct.module_kobject*, i8*)*, i64 (%struct.module_attribute*, %struct.module_kobject*, i8*, i64)*, void (%struct.module*, i8*)*, i32 (%struct.module*)*, void (%struct.module*)* }
%struct.mutex = type { %struct.atomic64_t, %struct.spinlock, %struct.optimistic_spin_queue, %struct.list_head }
%struct.kernel_symbol = type { i64, i8* }
%struct.exception_table_entry = type { i32, i32, i32 }
%struct.module_layout = type { i8*, i32, i32, i32, i32, %struct.mod_tree_node }
%struct.mod_tree_node = type { %struct.module*, %struct.latch_tree_node }
%struct.latch_tree_node = type { [2 x %struct.rb_node] }
%struct.mod_arch_specific = type {}
%struct.bug_entry = type { i32, i32, i16, i16 }
%struct.mod_kallsyms = type { %struct.elf64_sym*, i32, i8* }
%struct.elf64_sym = type { i32, i8, i8, i16, i64, i64 }
%struct.module_sect_attrs = type opaque
%struct.module_notes_attrs = type opaque
%struct.tracepoint = type { i8*, %struct.static_key, i32 ()*, void ()*, %struct.tracepoint_func* }
%struct.static_key = type { %struct.atomic_t }
%struct.tracepoint_func = type { i8*, i8*, i32 }
%struct.trace_event_call = type opaque
%struct.trace_enum_map = type { i8*, i8*, i64 }
%struct.atomic_t = type { i32 }
%union.anon.62 = type { i8* }
%struct.notifier_block = type { i32 (%struct.notifier_block*, i64, i8*)*, %struct.notifier_block*, i32 }
%struct.pernet_operations = type { %struct.list_head, i32 (%struct.net*)*, void (%struct.net*)*, void (%struct.list_head*)*, i32*, i64 }
%struct.cfg80211_registered_device = type { %struct.cfg80211_ops*, %struct.list_head, %struct.rfkill_ops, %struct.rfkill*, %struct.work_struct, [2 x i8], %struct.ieee80211_regdomain*, i32, i32, i32, i32, i32, %struct.__wait_queue_head, %struct.list_head, %struct.spinlock, %struct.list_head, %struct.spinlock, %struct.work_struct, i32, i32, %struct.spinlock, %struct.list_head, %struct.rb_root, i32, i32, %struct.cfg80211_scan_request*, %struct.sk_buff*, %struct.cfg80211_sched_scan_request*, i64, %struct.work_struct, %struct.work_struct, %struct.genl_info*, %struct.work_struct, %struct.work_struct, %struct.delayed_work, i32, %struct.cfg80211_coalesce*, %struct.spinlock, %struct.list_head, %struct.work_struct, %struct.work_struct, [24 x i8], %struct.wiphy }
%struct.cfg80211_ops = type { i32 (%struct.wiphy*, %struct.cfg80211_wowlan*)*, i32 (%struct.wiphy*)*, void (%struct.wiphy*, i1)*, %struct.wireless_dev* (%struct.wiphy*, i8*, i8, i32, i32*, %struct.vif_params*)*, i32 (%struct.wiphy*, %struct.wireless_dev*)*, i32 (%struct.wiphy*, %struct.net_device*, i32, i32*, %struct.vif_params*)*, i32 (%struct.wiphy*, %struct.net_device*, i8, i1, i8*, %struct.key_params*)*, i32 (%struct.wiphy*, %struct.net_device*, i8, i1, i8*, i8*, void (i8*, %struct.key_params*)*)*, i32 (%struct.wiphy*, %struct.net_device*, i8, i1, i8*)*, i32 (%struct.wiphy*, %struct.net_device*, i8, i1, i1)*, i32 (%struct.wiphy*, %struct.net_device*, i8)*, i32 (%struct.wiphy*, %struct.net_device*, %struct.cfg80211_ap_settings*)*, i32 (%struct.wiphy*, %struct.net_device*, %struct.cfg80211_beacon_data*)*, i32 (%struct.wiphy*, %struct.net_device*)*, i32 (%struct.wiphy*, %struct.net_device*, i8*, %struct.station_parameters*)*, i32 (%struct.wiphy*, %struct.net_device*, %struct.station_del_parameters*)*, i32 (%struct.wiphy*, %struct.net_device*, i8*, %struct.station_parameters*)*, i32 (%struct.wiphy*, %struct.net_device*, i8*, %struct.station_info*)*, i32 (%struct.wiphy*, %struct.net_device*, i32, i8*, %struct.station_info*)*, i32 (%struct.wiphy*, %struct.net_device*, i8*, i8*)*, i32 (%struct.wiphy*, %struct.net_device*, i8*)*, i32 (%struct.wiphy*, %struct.net_device*, i8*, i8*)*, i32 (%struct.wiphy*, %struct.net_device*, i8*, i8*, %struct.mpath_info*)*, i32 (%struct.wiphy*, %struct.net_device*, i32, i8*, i8*, %struct.mpath_info*)*, i32 (%struct.wiphy*, %struct.net_device*, i8*, i8*, %struct.mpath_info*)*, i32 (%struct.wiphy*, %struct.net_device*, i32, i8*, i8*, %struct.mpath_info*)*, i32 (%struct.wiphy*, %struct.net_device*, %struct.mesh_config*)*, i32 (%struct.wiphy*, %struct.net_device*, i32, %struct.mesh_config*)*, i32 (%struct.wiphy*, %struct.net_device*, %struct.mesh_config*, %struct.mesh_setup*)*, i32 (%struct.wiphy*, %struct.net_device*)*, i32 (%struct.wiphy*, %struct.net_device*, %struct.ocb_setup*)*, i32 (%struct.wiphy*, %struct.net_device*)*, i32 (%struct.wiphy*, %struct.net_device*, %struct.bss_parameters*)*, i32 (%struct.wiphy*, %struct.net_device*, %struct.ieee80211_txq_params*)*, i32 (%struct.wiphy*, %struct.net_device*, %struct.ieee80211_channel*)*, i32 (%struct.wiphy*, %struct.cfg80211_chan_def*)*, i32 (%struct.wiphy*, %struct.cfg80211_scan_request*)*, void (%struct.wiphy*, %struct.wireless_dev*)*, i32 (%struct.wiphy*, %struct.net_device*, %struct.cfg80211_auth_request*)*, i32 (%struct.wiphy*, %struct.net_device*, %struct.cfg80211_assoc_request*)*, i32 (%struct.wiphy*, %struct.net_device*, %struct.cfg80211_deauth_request*)*, i32 (%struct.wiphy*, %struct.net_device*, %struct.cfg80211_disassoc_request*)*, i32 (%struct.wiphy*, %struct.net_device*, %struct.cfg80211_connect_params*)*, i32 (%struct.wiphy*, %struct.net_device*, %struct.cfg80211_connect_params*, i32)*, i32 (%struct.wiphy*, %struct.net_device*, i16)*, i32 (%struct.wiphy*, %struct.net_device*, %struct.cfg80211_ibss_params*)*, i32 (%struct.wiphy*, %struct.net_device*)*, i32 (%struct.wiphy*, %struct.net_device*, i32*)*, i32 (%struct.wiphy*, i32)*, i32 (%struct.wiphy*, %struct.wireless_dev*, i32, i32)*, i32 (%struct.wiphy*, %struct.wireless_dev*, i32*)*, i32 (%struct.wiphy*, %struct.net_device*, i8*)*, void (%struct.wiphy*)*, i32 (%struct.wiphy*, %struct.net_device*, i8*, %struct.cfg80211_bitrate_mask*)*, i32 (%struct.wiphy*, %struct.net_device*, i32, %struct.survey_info*)*, i32 (%struct.wiphy*, %struct.net_device*, %struct.cfg80211_pmksa*)*, i32 (%struct.wiphy*, %struct.net_device*, %struct.cfg80211_pmksa*)*, i32 (%struct.wiphy*, %struct.net_device*)*, i32 (%struct.wiphy*, %struct.wireless_dev*, %struct.ieee80211_channel*, i32, i64*)*, i32 (%struct.wiphy*, %struct.wireless_dev*, i64)*, i32 (%struct.wiphy*, %struct.wireless_dev*, %struct.cfg80211_mgmt_tx_params*, i64*)*, i32 (%struct.wiphy*, %struct.wireless_dev*, i64)*, i32 (%struct.wiphy*, %struct.net_device*, i1, i32)*, i32 (%struct.wiphy*, %struct.net_device*, i32, i32)*, i32 (%struct.wiphy*, %struct.net_device*, i32, i32, i32)*, void (%struct.wiphy*, %struct.wireless_dev*, i16, i1)*, i32 (%struct.wiphy*, i32, i32)*, i32 (%struct.wiphy*, i32*, i32*)*, i32 (%struct.wiphy*, %struct.net_device*, %struct.cfg80211_sched_scan_request*)*, i32 (%struct.wiphy*, %struct.net_device*)*, i32 (%struct.wiphy*, %struct.net_device*, %struct.cfg80211_gtk_rekey_data*)*, i32 (%struct.wiphy*, %struct.net_device*, i8*, i8, i8, i16, i32, i1, i8*, i64)*, i32 (%struct.wiphy*, %struct.net_device*, i8*, i32)*, i32 (%struct.wiphy*, %struct.net_device*, i8*, i64*)*, i32 (%struct.wiphy*, %struct.net_device*, i16)*, i32 (%struct.wiphy*, %struct.wireless_dev*, %struct.cfg80211_chan_def*)*, i32 (%struct.wiphy*, %struct.wireless_dev*)*, void (%struct.wiphy*, %struct.wireless_dev*)*, i32 (%struct.wiphy*, %struct.net_device*, %struct.cfg80211_acl_data*)*, i32 (%struct.wiphy*, %struct.net_device*, %struct.cfg80211_chan_def*, i32)*, i32 (%struct.wiphy*, %struct.net_device*, %struct.cfg80211_update_ft_ies_params*)*, i32 (%struct.wiphy*, %struct.wireless_dev*, i32, i16)*, void (%struct.wiphy*, %struct.wireless_dev*)*, i32 (%struct.wiphy*, %struct.cfg80211_coalesce*)*, i32 (%struct.wiphy*, %struct.net_device*, %struct.cfg80211_csa_settings*)*, i32 (%struct.wiphy*, %struct.net_device*, %struct.cfg80211_qos_map*)*, i32 (%struct.wiphy*, %struct.net_device*, %struct.cfg80211_chan_def*)*, i32 (%struct.wiphy*, %struct.net_device*, i8, i8*, i8, i16)*, i32 (%struct.wiphy*, %struct.net_device*, i8, i8*)*, i32 (%struct.wiphy*, %struct.net_device*, i8*, i8, %struct.cfg80211_chan_def*)*, void (%struct.wiphy*, %struct.net_device*, i8*)*, i32 (%struct.wiphy*, %struct.wireless_dev*, %struct.cfg80211_nan_conf*)*, void (%struct.wiphy*, %struct.wireless_dev*)*, i32 (%struct.wiphy*, %struct.wireless_dev*, %struct.cfg80211_nan_func*)*, void (%struct.wiphy*, %struct.wireless_dev*, i64)*, i32 (%struct.wiphy*, %struct.wireless_dev*, %struct.cfg80211_nan_conf*, i32)*, i32 (%struct.wiphy*, %struct.net_device*, i1)* }
%struct.vif_params = type { i32, [6 x i8], [24 x i8] }
%struct.cfg80211_ap_settings = type { %struct.cfg80211_chan_def, %struct.cfg80211_beacon_data, i32, i32, i8*, i64, i32, %struct.cfg80211_crypto_settings, i8, i32, i32, i32, i8, i8, %struct.cfg80211_acl_data*, i8, %struct.cfg80211_bitrate_mask, %struct.ieee80211_ht_cap*, %struct.ieee80211_vht_cap*, i8, i8 }
%struct.cfg80211_beacon_data = type { i8*, i8*, i8*, i8*, i8*, i8*, i64, i64, i64, i64, i64, i64 }
%struct.cfg80211_crypto_settings = type { i32, i32, i32, [5 x i32], i32, [2 x i32], i8, i16, i8, %struct.key_params*, i32 }
%struct.cfg80211_acl_data = type { i32, i32, [0 x %struct.mac_address] }
%struct.cfg80211_bitrate_mask = type { [3 x %struct.anon.78] }
%struct.anon.78 = type { i32, [10 x i8], [8 x i16], i32 }
%struct.station_del_parameters = type { i8*, i8, i16 }
%struct.station_parameters = type { i8*, %struct.net_device*, i32, i32, i32, i32, i16, i16, i8, i8, i8, %struct.ieee80211_ht_cap*, %struct.ieee80211_vht_cap*, i8, i8, i32, i16, i8*, i8, i8*, i8, i8*, i8, i8, i8, i32 }
%struct.station_info = type { i64, i32, i32, i64, i64, i16, i16, i8, i8, i8, i8, [4 x i8], [4 x i8], %struct.rate_info, %struct.rate_info, i32, i32, i32, i32, i32, %struct.sta_bss_parameters, %struct.nl80211_sta_flag_update, i32, i8*, i64, i32, i64, i32, i32, i32, i32, i64, i64, i8, [17 x %struct.cfg80211_tid_stats] }
%struct.rate_info = type { i8, i8, i16, i8, i8 }
%struct.sta_bss_parameters = type { i8, i8, i16 }
%struct.nl80211_sta_flag_update = type { i32, i32 }
%struct.cfg80211_tid_stats = type { i32, i64, i64, i64, i64 }
%struct.mpath_info = type { i32, i32, i32, i32, i32, i32, i8, i8, i32 }
%struct.mesh_config = type { i16, i16, i16, i16, i8, i8, i8, i8, i32, i8, i32, i16, i32, i16, i16, i16, i8, i16, i8, i8, i32, i16, i32, i16, i16, i32, i16, i32 }
%struct.mesh_setup = type { %struct.cfg80211_chan_def, i8*, i8, i8, i8, i8, i8, i8*, i8, i8, i8, i8, i8, i16, [3 x i32], i32, %struct.cfg80211_bitrate_mask }
%struct.ocb_setup = type { %struct.cfg80211_chan_def }
%struct.bss_parameters = type { i32, i32, i32, i8*, i8, i32, i32, i8, i8 }
%struct.ieee80211_txq_params = type { i32, i16, i16, i16, i8 }
%struct.cfg80211_auth_request = type { %struct.cfg80211_bss*, i8*, i64, i32, i8*, i8, i8, i8*, i64 }
%struct.cfg80211_assoc_request = type { %struct.cfg80211_bss*, i8*, i8*, i64, %struct.cfg80211_crypto_settings, i8, i32, %struct.ieee80211_ht_cap, %struct.ieee80211_ht_cap, %struct.ieee80211_vht_cap, %struct.ieee80211_vht_cap, i8*, i64, i8* }
%struct.cfg80211_deauth_request = type { i8*, i8*, i64, i16, i8 }
%struct.cfg80211_disassoc_request = type { %struct.cfg80211_bss*, i8*, i64, i16, i8 }
%struct.cfg80211_connect_params = type { %struct.ieee80211_channel*, %struct.ieee80211_channel*, i8*, i8*, i8*, i64, i32, i8*, i64, i8, i32, %struct.cfg80211_crypto_settings, i8*, i8, i8, i32, i32, %struct.ieee80211_ht_cap, %struct.ieee80211_ht_cap, %struct.ieee80211_vht_cap, %struct.ieee80211_vht_cap, i8, %struct.cfg80211_bss_selection, i8* }
%struct.cfg80211_bss_selection = type { i32, %union.anon.79 }
%union.anon.79 = type { %struct.cfg80211_bss_select_adjust }
%struct.cfg80211_ibss_params = type { i8*, i8*, %struct.cfg80211_chan_def, i8*, i8, i8, i16, i32, i8, i8, i8, i8, [3 x i32], %struct.ieee80211_ht_cap, %struct.ieee80211_ht_cap }
%struct.survey_info = type { %struct.ieee80211_channel*, i64, i64, i64, i64, i64, i64, i32, i8 }
%struct.cfg80211_pmksa = type { i8*, i8* }
%struct.cfg80211_mgmt_tx_params = type { %struct.ieee80211_channel*, i8, i32, i8*, i64, i8, i8, i32, i16* }
%struct.cfg80211_gtk_rekey_data = type { i8*, i8*, i8* }
%struct.cfg80211_update_ft_ies_params = type { i16, i8*, i64 }
%struct.cfg80211_csa_settings = type { %struct.cfg80211_chan_def, %struct.cfg80211_beacon_data, i16*, i16*, i32, i32, %struct.cfg80211_beacon_data, i8, i8, i8 }
%struct.cfg80211_qos_map = type { i8, [21 x %struct.cfg80211_dscp_exception], [8 x %struct.cfg80211_dscp_range] }
%struct.cfg80211_dscp_exception = type { i8, i8 }
%struct.cfg80211_dscp_range = type { i8, i8 }
%struct.cfg80211_nan_conf = type { i8, i8 }
%struct.cfg80211_nan_func = type { i32, [6 x i8], i8, i8, i8, i8, i8, i8, %struct.mac_address, i32, i8*, i8, i8, i8*, i8, i8, %struct.mac_address*, i32, %struct.cfg80211_nan_func_filter*, %struct.cfg80211_nan_func_filter*, i8, i8, i8, i64 }
%struct.cfg80211_nan_func_filter = type { i8*, i8 }
%struct.rfkill_ops = type { void (%struct.rfkill*, i8*)*, void (%struct.rfkill*, i8*)*, i32 (i8*, i1)* }
%struct.rfkill = type opaque
%struct.cfg80211_scan_request = type { %struct.cfg80211_ssid*, i32, i32, i32, i8*, i64, i16, i8, i32, [3 x i32], %struct.wireless_dev*, [6 x i8], [6 x i8], [6 x i8], %struct.wiphy*, i64, %struct.cfg80211_scan_info, i8, i8, [0 x %struct.ieee80211_channel*] }
%struct.cfg80211_scan_info = type { i64, [6 x i8], i8 }
%struct.genl_info = type { i32, i32, %struct.nlmsghdr*, %struct.genlmsghdr*, i8*, %struct.nlattr**, %struct.possible_net_t, [2 x i8*] }
%struct.genlmsghdr = type { i8, i8, i16 }
%struct.delayed_work = type { %struct.work_struct, %struct.timer_list, %struct.workqueue_struct*, i32 }
%struct.cfg80211_coalesce = type { %struct.cfg80211_coalesce_rules*, i32 }
%struct.cfg80211_coalesce_rules = type { i32, i32, %struct.cfg80211_pkt_pattern*, i32 }
%struct.cfg80211_iface_destroy = type { %struct.list_head, i32 }
%union.anon.80 = type { %struct.list_head* }
%union.anon.94 = type { %struct.list_head* }
%struct.__wait_queue = type { i32, i8*, i32 (%struct.__wait_queue*, i32, i32, i8*)*, %struct.list_head }
%union.anon.97 = type { %struct.list_head* }
%struct.cfg80211_beacon_registration = type { %struct.list_head, i32 }
%struct.cfg80211_event = type { %struct.list_head, i32, %union.anon.81 }
%union.anon.81 = type { %struct.anon.82 }
%struct.anon.82 = type { [6 x i8], i8*, i8*, i64, i64, %struct.cfg80211_bss*, i32, i32 }
%union.anon.99 = type { %struct.tracepoint_func* }
%union.anon.86 = type { %struct.tracepoint_func* }
%union.anon.88 = type { %struct.tracepoint_func* }
%union.anon.87 = type { i32 }
%union.anon.89 = type { %struct.tracepoint_func* }
%union.anon.90 = type { %struct.list_head* }
%union.anon.91 = type { i8 }
%union.anon.92 = type { %struct.tracepoint_func* }
%union.anon.93 = type { %struct.tracepoint_func* }
%union.anon.95 = type { %struct.list_head* }
%union.anon.96 = type { %struct.tracepoint_func* }
%union.anon.98 = type { %struct.tracepoint_func* }
%union.anon.100 = type { %struct.list_head* }
%struct.netdev_notifier_info = type { %struct.net_device* }
%union.anon.101 = type { %struct.tracepoint_func* }

@cfg80211_rdev_list = global %struct.list_head { %struct.list_head* @cfg80211_rdev_list, %struct.list_head* @cfg80211_rdev_list }, align 8
@__param_str_cfg80211_disable_40mhz_24ghz = internal constant [38 x i8] c"cfg80211.cfg80211_disable_40mhz_24ghz\00", align 16
@param_ops_bool = external constant %struct.kernel_param_ops, align 8
@cfg80211_disable_40mhz_24ghz = internal global i8 0, align 1
@__param_cfg80211_disable_40mhz_24ghz = internal constant %struct.kernel_param { i8* getelementptr inbounds ([38 x i8], [38 x i8]* @__param_str_cfg80211_disable_40mhz_24ghz, i32 0, i32 0), %struct.module* null, %struct.kernel_param_ops* @param_ops_bool, i16 420, i8 -1, i8 0, %union.anon.62 { i8* @cfg80211_disable_40mhz_24ghz } }, section "__param", align 8
@.str = private unnamed_addr constant [37 x i8] c"\013RTNL: assertion failed at %s (%d)\0A\00", align 1
@.str.1 = private unnamed_addr constant [20 x i8] c"net/wireless/core.c\00", align 1
@.str.2 = private unnamed_addr constant [49 x i8] c"\013cfg80211: failed to rename debugfs dir to %s!\0A\00", align 1
@.str.3 = private unnamed_addr constant [7 x i8] c"wlan%d\00", align 1
@__kstrtab_cfg80211_shutdown_all_interfaces = internal constant [33 x i8] c"cfg80211_shutdown_all_interfaces\00", section "__ksymtab_strings", align 1
@__ksymtab_cfg80211_shutdown_all_interfaces = internal constant %struct.kernel_symbol { i64 ptrtoint (void (%struct.wiphy*)* @cfg80211_shutdown_all_interfaces to i64), i8* getelementptr inbounds ([33 x i8], [33 x i8]* @__kstrtab_cfg80211_shutdown_all_interfaces, i32 0, i32 0) }, section "___ksymtab_gpl+cfg80211_shutdown_all_interfaces", align 8
@wiphy_new_nm.wiphy_counter = internal global %struct.atomic_t zeroinitializer, align 4
@.str.4 = private unnamed_addr constant [3 x i8] c"%s\00", align 1
@.str.5 = private unnamed_addr constant [6 x i8] c"phy%d\00", align 1
@ieee80211_class = external global %struct.class, align 8
@init_net = external global %struct.net, align 64
@wiphy_new_nm.__key = internal global %struct.lock_class_key zeroinitializer, align 1
@.str.6 = private unnamed_addr constant [16 x i8] c"&rdev->dev_wait\00", align 1
@__kstrtab_wiphy_new_nm = internal constant [13 x i8] c"wiphy_new_nm\00", section "__ksymtab_strings", align 1
@__ksymtab_wiphy_new_nm = internal constant %struct.kernel_symbol { i64 ptrtoint (%struct.wiphy* (%struct.cfg80211_ops*, i32, i8*)* @wiphy_new_nm to i64), i8* getelementptr inbounds ([13 x i8], [13 x i8]* @__kstrtab_wiphy_new_nm, i32 0, i32 0) }, section "___ksymtab+wiphy_new_nm", align 8
@cfg80211_rdev_list_generation = common global i32 0, align 4
@ieee80211_debugfs_dir = internal global %struct.dentry* null, align 8
@__kstrtab_wiphy_register = internal constant [15 x i8] c"wiphy_register\00", section "__ksymtab_strings", align 1
@__ksymtab_wiphy_register = internal constant %struct.kernel_symbol { i64 ptrtoint (i32 (%struct.wiphy*)* @wiphy_register to i64), i8* getelementptr inbounds ([15 x i8], [15 x i8]* @__kstrtab_wiphy_register, i32 0, i32 0) }, section "___ksymtab+wiphy_register", align 8
@__kstrtab_wiphy_rfkill_start_polling = internal constant [27 x i8] c"wiphy_rfkill_start_polling\00", section "__ksymtab_strings", align 1
@__ksymtab_wiphy_rfkill_start_polling = internal constant %struct.kernel_symbol { i64 ptrtoint (void (%struct.wiphy*)* @wiphy_rfkill_start_polling to i64), i8* getelementptr inbounds ([27 x i8], [27 x i8]* @__kstrtab_wiphy_rfkill_start_polling, i32 0, i32 0) }, section "___ksymtab+wiphy_rfkill_start_polling", align 8
@__kstrtab_wiphy_rfkill_stop_polling = internal constant [26 x i8] c"wiphy_rfkill_stop_polling\00", section "__ksymtab_strings", align 1
@__ksymtab_wiphy_rfkill_stop_polling = internal constant %struct.kernel_symbol { i64 ptrtoint (void (%struct.wiphy*)* @wiphy_rfkill_stop_polling to i64), i8* getelementptr inbounds ([26 x i8], [26 x i8]* @__kstrtab_wiphy_rfkill_stop_polling, i32 0, i32 0) }, section "___ksymtab+wiphy_rfkill_stop_polling", align 8
@__kstrtab_wiphy_unregister = internal constant [17 x i8] c"wiphy_unregister\00", section "__ksymtab_strings", align 1
@__ksymtab_wiphy_unregister = internal constant %struct.kernel_symbol { i64 ptrtoint (void (%struct.wiphy*)* @wiphy_unregister to i64), i8* getelementptr inbounds ([17 x i8], [17 x i8]* @__kstrtab_wiphy_unregister, i32 0, i32 0) }, section "___ksymtab+wiphy_unregister", align 8
@__kstrtab_wiphy_free = internal constant [11 x i8] c"wiphy_free\00", section "__ksymtab_strings", align 1
@__ksymtab_wiphy_free = internal constant %struct.kernel_symbol { i64 ptrtoint (void (%struct.wiphy*)* @wiphy_free to i64), i8* getelementptr inbounds ([11 x i8], [11 x i8]* @__kstrtab_wiphy_free, i32 0, i32 0) }, section "___ksymtab+wiphy_free", align 8
@__kstrtab_wiphy_rfkill_set_hw_state = internal constant [26 x i8] c"wiphy_rfkill_set_hw_state\00", section "__ksymtab_strings", align 1
@__ksymtab_wiphy_rfkill_set_hw_state = internal constant %struct.kernel_symbol { i64 ptrtoint (void (%struct.wiphy*, i1)* @wiphy_rfkill_set_hw_state to i64), i8* getelementptr inbounds ([26 x i8], [26 x i8]* @__kstrtab_wiphy_rfkill_set_hw_state, i32 0, i32 0) }, section "___ksymtab+wiphy_rfkill_set_hw_state", align 8
@cfg80211_unregister_wdev.__warned = internal global i8 0, section ".data.unlikely", align 1
@__kstrtab_cfg80211_unregister_wdev = internal constant [25 x i8] c"cfg80211_unregister_wdev\00", section "__ksymtab_strings", align 1
@__ksymtab_cfg80211_unregister_wdev = internal constant %struct.kernel_symbol { i64 ptrtoint (void (%struct.wireless_dev*)* @cfg80211_unregister_wdev to i64), i8* getelementptr inbounds ([25 x i8], [25 x i8]* @__kstrtab_cfg80211_unregister_wdev, i32 0, i32 0) }, section "___ksymtab+cfg80211_unregister_wdev", align 8
@cfg80211_wq = common global %struct.workqueue_struct* null, align 8
@__kstrtab_cfg80211_stop_iface = internal constant [20 x i8] c"cfg80211_stop_iface\00", section "__ksymtab_strings", align 1
@__ksymtab_cfg80211_stop_iface = internal constant %struct.kernel_symbol { i64 ptrtoint (void (%struct.wiphy*, %struct.wireless_dev*, i32)* @cfg80211_stop_iface to i64), i8* getelementptr inbounds ([20 x i8], [20 x i8]* @__kstrtab_cfg80211_stop_iface, i32 0, i32 0) }, section "___ksymtab+cfg80211_stop_iface", align 8
@__initcall_cfg80211_init4 = internal global i32 ()* @cfg80211_init, section ".initcall4.init", align 8
@cfg80211_netdev_notifier = internal global %struct.notifier_block { i32 (%struct.notifier_block*, i64, i8*)* @cfg80211_netdev_notifier_call, %struct.notifier_block* null, i32 0 }, align 8
@cfg80211_pernet_ops = internal global %struct.pernet_operations { %struct.list_head zeroinitializer, i32 (%struct.net*)* null, void (%struct.net*)* @cfg80211_pernet_exit, void (%struct.list_head*)* null, i32* null, i64 0 }, align 8
@__exitcall_cfg80211_exit = internal global void ()* @cfg80211_exit, section ".exitcall.exit", align 8
@.str.7 = private unnamed_addr constant [20 x i8] c"net/wireless/core.h\00", align 1
@.str.8 = private unnamed_addr constant [8 x i8] c"phy%d%n\00", align 1
@__tracepoint_rdev_stop_p2p_device = external global %struct.tracepoint, align 8
@cpu_number = external global i32, align 4
@__cpu_online_mask = external global %struct.cpumask, align 8
@__tracepoint_rdev_return_void = external global %struct.tracepoint, align 8
@__tracepoint_rdev_stop_nan = external global %struct.tracepoint, align 8
@__tracepoint_rdev_del_virtual_intf = external global %struct.tracepoint, align 8
@__tracepoint_rdev_return_int = external global %struct.tracepoint, align 8
@__tracepoint_rdev_rfkill_poll = external global %struct.tracepoint, align 8
@__tracepoint_rdev_set_wakeup = external global %struct.tracepoint, align 8
@system_wq = external global %struct.workqueue_struct*, align 8
@__tracepoint_cfg80211_stop_iface = external global %struct.tracepoint, align 8
@.str.9 = private unnamed_addr constant [10 x i8] c"ieee80211\00", align 1
@.str.10 = private unnamed_addr constant [9 x i8] c"cfg80211\00", align 1
@wiphy_type = internal constant %struct.device_type { i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.14, i32 0, i32 0), %struct.attribute_group** null, i32 (%struct.device*, %struct.kobj_uevent_env*)* null, i8* (%struct.device*, i16*, %struct.kuid_t*, %struct.kgid_t*)* null, void (%struct.device*)* null, %struct.dev_pm_ops* null }, align 8
@cfg80211_netdev_notifier_call.__key = internal global %struct.lock_class_key zeroinitializer, align 1
@.str.11 = private unnamed_addr constant [11 x i8] c"&wdev->mtx\00", align 1
@.str.12 = private unnamed_addr constant [9 x i8] c"phy80211\00", align 1
@.str.13 = private unnamed_addr constant [55 x i8] c"\013cfg80211: failed to add phy80211 symlink to netdev!\0A\00", align 1
@.str.14 = private unnamed_addr constant [5 x i8] c"wlan\00", align 1
@__tracepoint_rdev_set_power_mgmt = external global %struct.tracepoint, align 8
@llvm.used = appending global [14 x i8*] [i8* bitcast (%struct.kernel_param* @__param_cfg80211_disable_40mhz_24ghz to i8*), i8* bitcast (%struct.kernel_symbol* @__ksymtab_cfg80211_shutdown_all_interfaces to i8*), i8* bitcast (%struct.kernel_symbol* @__ksymtab_wiphy_new_nm to i8*), i8* bitcast (%struct.kernel_symbol* @__ksymtab_wiphy_register to i8*), i8* bitcast (%struct.kernel_symbol* @__ksymtab_wiphy_rfkill_start_polling to i8*), i8* bitcast (%struct.kernel_symbol* @__ksymtab_wiphy_rfkill_stop_polling to i8*), i8* bitcast (%struct.kernel_symbol* @__ksymtab_wiphy_unregister to i8*), i8* bitcast (%struct.kernel_symbol* @__ksymtab_wiphy_free to i8*), i8* bitcast (%struct.kernel_symbol* @__ksymtab_wiphy_rfkill_set_hw_state to i8*), i8* bitcast (%struct.kernel_symbol* @__ksymtab_cfg80211_unregister_wdev to i8*), i8* bitcast (%struct.kernel_symbol* @__ksymtab_cfg80211_stop_iface to i8*), i8* bitcast (i32 ()** @__initcall_cfg80211_init4 to i8*), i8* bitcast (void ()* @cfg80211_exit to i8*), i8* bitcast (void ()** @__exitcall_cfg80211_exit to i8*)], section "llvm.metadata"

; Function Attrs: noinline nounwind optnone uwtable
define %struct.cfg80211_registered_device* @cfg80211_rdev_by_wiphy_idx(i32 %wiphy_idx) #0 {
entry:
  %wiphy_idx.addr = alloca i32, align 4
  %result = alloca %struct.cfg80211_registered_device*, align 8
  %rdev = alloca %struct.cfg80211_registered_device*, align 8
  %__mptr = alloca %struct.list_head*, align 8
  %tmp = alloca %struct.cfg80211_registered_device*, align 8
  %__mptr11 = alloca %struct.list_head*, align 8
  %tmp13 = alloca %struct.cfg80211_registered_device*, align 8
  store i32 %wiphy_idx, i32* %wiphy_idx.addr, align 4
  store %struct.cfg80211_registered_device* null, %struct.cfg80211_registered_device** %result, align 8
  br label %do.body

do.body:                                          ; preds = %entry
  %call = call i32 @rtnl_is_locked()
  %tobool = icmp ne i32 %call, 0
  %lnot = xor i1 %tobool, true
  %lnot1 = xor i1 %lnot, true
  %lnot2 = xor i1 %lnot1, true
  %lnot.ext = zext i1 %lnot2 to i32
  %conv = sext i32 %lnot.ext to i64
  %tobool3 = icmp ne i64 %conv, 0
  br i1 %tobool3, label %if.then, label %if.end

if.then:                                          ; preds = %do.body
  %call4 = call i32 (i8*, ...) @printk(i8* getelementptr inbounds ([37 x i8], [37 x i8]* @.str, i32 0, i32 0), i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.1, i32 0, i32 0), i32 59)
  call void @dump_stack()
  br label %if.end

if.end:                                           ; preds = %if.then, %do.body
  br label %do.end

do.end:                                           ; preds = %if.end
  %0 = load %struct.list_head*, %struct.list_head** getelementptr inbounds (%struct.list_head, %struct.list_head* @cfg80211_rdev_list, i32 0, i32 0), align 8
  store %struct.list_head* %0, %struct.list_head** %__mptr, align 8
  %1 = load %struct.list_head*, %struct.list_head** %__mptr, align 8
  %2 = bitcast %struct.list_head* %1 to i8*
  %add.ptr = getelementptr inbounds i8, i8* %2, i64 -8
  %3 = bitcast i8* %add.ptr to %struct.cfg80211_registered_device*
  store %struct.cfg80211_registered_device* %3, %struct.cfg80211_registered_device** %tmp, align 8
  %4 = load %struct.cfg80211_registered_device*, %struct.cfg80211_registered_device** %tmp, align 8
  store %struct.cfg80211_registered_device* %4, %struct.cfg80211_registered_device** %rdev, align 8
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %do.end
  %5 = load %struct.cfg80211_registered_device*, %struct.cfg80211_registered_device** %rdev, align 8
  %list = getelementptr inbounds %struct.cfg80211_registered_device, %struct.cfg80211_registered_device* %5, i32 0, i32 1
  %cmp = icmp ne %struct.list_head* %list, @cfg80211_rdev_list
  br i1 %cmp, label %for.body, label %for.end.loopexit

for.body:                                         ; preds = %for.cond
  %6 = load %struct.cfg80211_registered_device*, %struct.cfg80211_registered_device** %rdev, align 8
  %wiphy_idx6 = getelementptr inbounds %struct.cfg80211_registered_device, %struct.cfg80211_registered_device* %6, i32 0, i32 8
  %7 = load i32, i32* %wiphy_idx6, align 4
  %8 = load i32, i32* %wiphy_idx.addr, align 4
  %cmp7 = icmp eq i32 %7, %8
  br i1 %cmp7, label %if.then9, label %if.end10

if.then9:                                         ; preds = %for.body
  %9 = load %struct.cfg80211_registered_device*, %struct.cfg80211_registered_device** %rdev, align 8
  store %struct.cfg80211_registered_device* %9, %struct.cfg80211_registered_device** %result, align 8
  br label %for.end

if.end10:                                         ; preds = %for.body
  br label %for.inc

for.inc:                                          ; preds = %if.end10
  %10 = load %struct.cfg80211_registered_device*, %struct.cfg80211_registered_device** %rdev, align 8
  %list12 = getelementptr inbounds %struct.cfg80211_registered_device, %struct.cfg80211_registered_device* %10, i32 0, i32 1
  %next = getelementptr inbounds %struct.list_head, %struct.list_head* %list12, i32 0, i32 0
  %11 = load %struct.list_head*, %struct.list_head** %next, align 8
  store %struct.list_head* %11, %struct.list_head** %__mptr11, align 8
  %12 = load %struct.list_head*, %struct.list_head** %__mptr11, align 8
  %13 = bitcast %struct.list_head* %12 to i8*
  %add.ptr14 = getelementptr inbounds i8, i8* %13, i64 -8
  %14 = bitcast i8* %add.ptr14 to %struct.cfg80211_registered_device*
  store %struct.cfg80211_registered_device* %14, %struct.cfg80211_registered_device** %tmp13, align 8
  %15 = load %struct.cfg80211_registered_device*, %struct.cfg80211_registered_device** %tmp13, align 8
  store %struct.cfg80211_registered_device* %15, %struct.cfg80211_registered_device** %rdev, align 8
  br label %for.cond

for.end.loopexit:                                 ; preds = %for.cond
  br label %for.end

for.end:                                          ; preds = %for.end.loopexit, %if.then9
  %16 = load %struct.cfg80211_registered_device*, %struct.cfg80211_registered_device** %result, align 8
  ret %struct.cfg80211_registered_device* %16
}

declare i32 @rtnl_is_locked() #1

declare i32 @printk(i8*, ...) #1

declare void @dump_stack() #1

; Function Attrs: noinline nounwind optnone uwtable
define i32 @get_wiphy_idx(%struct.wiphy* %wiphy) #0 {
entry:
  %wiphy.addr = alloca %struct.wiphy*, align 8
  %rdev = alloca %struct.cfg80211_registered_device*, align 8
  store %struct.wiphy* %wiphy, %struct.wiphy** %wiphy.addr, align 8
  %0 = load %struct.wiphy*, %struct.wiphy** %wiphy.addr, align 8
  %call = call %struct.cfg80211_registered_device* @wiphy_to_rdev(%struct.wiphy* %0)
  store %struct.cfg80211_registered_device* %call, %struct.cfg80211_registered_device** %rdev, align 8
  %1 = load %struct.cfg80211_registered_device*, %struct.cfg80211_registered_device** %rdev, align 8
  %wiphy_idx = getelementptr inbounds %struct.cfg80211_registered_device, %struct.cfg80211_registered_device* %1, i32 0, i32 8
  %2 = load i32, i32* %wiphy_idx, align 4
  ret i32 %2
}

; Function Attrs: noinline nounwind optnone uwtable
define internal %struct.cfg80211_registered_device* @wiphy_to_rdev(%struct.wiphy* %wiphy) #0 {
entry:
  %wiphy.addr = alloca %struct.wiphy*, align 8
  %__mptr = alloca %struct.wiphy*, align 8
  %tmp = alloca %struct.cfg80211_registered_device*, align 8
  store %struct.wiphy* %wiphy, %struct.wiphy** %wiphy.addr, align 8
  br label %do.body

do.body:                                          ; preds = %entry
  %0 = load %struct.wiphy*, %struct.wiphy** %wiphy.addr, align 8
  %tobool = icmp ne %struct.wiphy* %0, null
  %lnot = xor i1 %tobool, true
  %lnot1 = xor i1 %lnot, true
  %lnot2 = xor i1 %lnot1, true
  %lnot.ext = zext i1 %lnot2 to i32
  %conv = sext i32 %lnot.ext to i64
  %tobool3 = icmp ne i64 %conv, 0
  br i1 %tobool3, label %if.then, label %if.end

if.then:                                          ; preds = %do.body
  br label %do.body4

do.body4:                                         ; preds = %if.then
  call void asm sideeffect "1:\09ud2\0A.pushsection __bug_table,\22a\22\0A2:\09.long 1b - 2b, ${0:c} - 2b\0A\09.word ${1:c}, 0\0A\09.org 2b+${2:c}\0A.popsection", "i,i,i,~{dirflag},~{fpsr},~{flags}"(i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.7, i32 0, i32 0), i32 108, i64 12) #3, !srcloc !2
  br label %do.body5

do.body5:                                         ; preds = %do.cond, %do.body4
  br label %do.cond

do.cond:                                          ; preds = %do.body5
  br i1 true, label %do.body5, label %do.end

do.end:                                           ; preds = %do.cond
  br label %do.end7

do.end7:                                          ; preds = %do.end
  br label %if.end

if.end:                                           ; preds = %do.end7, %do.body
  br label %do.end9

do.end9:                                          ; preds = %if.end
  %1 = load %struct.wiphy*, %struct.wiphy** %wiphy.addr, align 8
  store %struct.wiphy* %1, %struct.wiphy** %__mptr, align 8
  %2 = load %struct.wiphy*, %struct.wiphy** %__mptr, align 8
  %3 = bitcast %struct.wiphy* %2 to i8*
  %add.ptr = getelementptr inbounds i8, i8* %3, i64 -672
  %4 = bitcast i8* %add.ptr to %struct.cfg80211_registered_device*
  store %struct.cfg80211_registered_device* %4, %struct.cfg80211_registered_device** %tmp, align 8
  %5 = load %struct.cfg80211_registered_device*, %struct.cfg80211_registered_device** %tmp, align 8
  ret %struct.cfg80211_registered_device* %5
}

; Function Attrs: noinline nounwind optnone uwtable
define %struct.wiphy* @wiphy_idx_to_wiphy(i32 %wiphy_idx) #0 {
entry:
  %retval = alloca %struct.wiphy*, align 8
  %wiphy_idx.addr = alloca i32, align 4
  %rdev = alloca %struct.cfg80211_registered_device*, align 8
  store i32 %wiphy_idx, i32* %wiphy_idx.addr, align 4
  br label %do.body

do.body:                                          ; preds = %entry
  %call = call i32 @rtnl_is_locked()
  %tobool = icmp ne i32 %call, 0
  %lnot = xor i1 %tobool, true
  %lnot1 = xor i1 %lnot, true
  %lnot2 = xor i1 %lnot1, true
  %lnot.ext = zext i1 %lnot2 to i32
  %conv = sext i32 %lnot.ext to i64
  %tobool3 = icmp ne i64 %conv, 0
  br i1 %tobool3, label %if.then, label %if.end

if.then:                                          ; preds = %do.body
  %call4 = call i32 (i8*, ...) @printk(i8* getelementptr inbounds ([37 x i8], [37 x i8]* @.str, i32 0, i32 0), i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.1, i32 0, i32 0), i32 82)
  call void @dump_stack()
  br label %if.end

if.end:                                           ; preds = %if.then, %do.body
  br label %do.end

do.end:                                           ; preds = %if.end
  %0 = load i32, i32* %wiphy_idx.addr, align 4
  %call5 = call %struct.cfg80211_registered_device* @cfg80211_rdev_by_wiphy_idx(i32 %0)
  store %struct.cfg80211_registered_device* %call5, %struct.cfg80211_registered_device** %rdev, align 8
  %1 = load %struct.cfg80211_registered_device*, %struct.cfg80211_registered_device** %rdev, align 8
  %tobool6 = icmp ne %struct.cfg80211_registered_device* %1, null
  br i1 %tobool6, label %if.end8, label %if.then7

if.then7:                                         ; preds = %do.end
  store %struct.wiphy* null, %struct.wiphy** %retval, align 8
  br label %return

if.end8:                                          ; preds = %do.end
  %2 = load %struct.cfg80211_registered_device*, %struct.cfg80211_registered_device** %rdev, align 8
  %wiphy = getelementptr inbounds %struct.cfg80211_registered_device, %struct.cfg80211_registered_device* %2, i32 0, i32 42
  store %struct.wiphy* %wiphy, %struct.wiphy** %retval, align 8
  br label %return

return:                                           ; preds = %if.end8, %if.then7
  %3 = load %struct.wiphy*, %struct.wiphy** %retval, align 8
  ret %struct.wiphy* %3
}

; Function Attrs: noinline nounwind optnone uwtable
define i32 @cfg80211_dev_rename(%struct.cfg80211_registered_device* %rdev, i8* %newname) #0 {
entry:
  %retval = alloca i32, align 4
  %rdev.addr = alloca %struct.cfg80211_registered_device*, align 8
  %newname.addr = alloca i8*, align 8
  %result = alloca i32, align 4
  store %struct.cfg80211_registered_device* %rdev, %struct.cfg80211_registered_device** %rdev.addr, align 8
  store i8* %newname, i8** %newname.addr, align 8
  br label %do.body

do.body:                                          ; preds = %entry
  %call = call i32 @rtnl_is_locked()
  %tobool = icmp ne i32 %call, 0
  %lnot = xor i1 %tobool, true
  %lnot1 = xor i1 %lnot, true
  %lnot2 = xor i1 %lnot1, true
  %lnot.ext = zext i1 %lnot2 to i32
  %conv = sext i32 %lnot.ext to i64
  %tobool3 = icmp ne i64 %conv, 0
  br i1 %tobool3, label %if.then, label %if.end

if.then:                                          ; preds = %do.body
  %call4 = call i32 (i8*, ...) @printk(i8* getelementptr inbounds ([37 x i8], [37 x i8]* @.str, i32 0, i32 0), i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.1, i32 0, i32 0), i32 126)
  call void @dump_stack()
  br label %if.end

if.end:                                           ; preds = %if.then, %do.body
  br label %do.end

do.end:                                           ; preds = %if.end
  %0 = load i8*, i8** %newname.addr, align 8
  %1 = load %struct.cfg80211_registered_device*, %struct.cfg80211_registered_device** %rdev.addr, align 8
  %wiphy = getelementptr inbounds %struct.cfg80211_registered_device, %struct.cfg80211_registered_device* %1, i32 0, i32 42
  %call5 = call i8* @wiphy_name(%struct.wiphy* %wiphy)
  %call6 = call i32 @strcmp(i8* %0, i8* %call5)
  %cmp = icmp eq i32 %call6, 0
  br i1 %cmp, label %if.then8, label %if.end9

if.then8:                                         ; preds = %do.end
  store i32 0, i32* %retval, align 4
  br label %return

if.end9:                                          ; preds = %do.end
  %2 = load %struct.cfg80211_registered_device*, %struct.cfg80211_registered_device** %rdev.addr, align 8
  %3 = load i8*, i8** %newname.addr, align 8
  %call10 = call i32 @cfg80211_dev_check_name(%struct.cfg80211_registered_device* %2, i8* %3)
  store i32 %call10, i32* %result, align 4
  %4 = load i32, i32* %result, align 4
  %cmp11 = icmp slt i32 %4, 0
  br i1 %cmp11, label %if.then13, label %if.end14

if.then13:                                        ; preds = %if.end9
  %5 = load i32, i32* %result, align 4
  store i32 %5, i32* %retval, align 4
  br label %return

if.end14:                                         ; preds = %if.end9
  %6 = load %struct.cfg80211_registered_device*, %struct.cfg80211_registered_device** %rdev.addr, align 8
  %wiphy15 = getelementptr inbounds %struct.cfg80211_registered_device, %struct.cfg80211_registered_device* %6, i32 0, i32 42
  %dev = getelementptr inbounds %struct.wiphy, %struct.wiphy* %wiphy15, i32 0, i32 50
  %7 = load i8*, i8** %newname.addr, align 8
  %call16 = call i32 @device_rename(%struct.device* %dev, i8* %7)
  store i32 %call16, i32* %result, align 4
  %8 = load i32, i32* %result, align 4
  %tobool17 = icmp ne i32 %8, 0
  br i1 %tobool17, label %if.then18, label %if.end19

if.then18:                                        ; preds = %if.end14
  %9 = load i32, i32* %result, align 4
  store i32 %9, i32* %retval, align 4
  br label %return

if.end19:                                         ; preds = %if.end14
  %10 = load %struct.cfg80211_registered_device*, %struct.cfg80211_registered_device** %rdev.addr, align 8
  %wiphy20 = getelementptr inbounds %struct.cfg80211_registered_device, %struct.cfg80211_registered_device* %10, i32 0, i32 42
  %debugfsdir = getelementptr inbounds %struct.wiphy, %struct.wiphy* %wiphy20, i32 0, i32 52
  %11 = load %struct.dentry*, %struct.dentry** %debugfsdir, align 32
  %tobool21 = icmp ne %struct.dentry* %11, null
  br i1 %tobool21, label %land.lhs.true, label %if.end33

land.lhs.true:                                    ; preds = %if.end19
  %12 = load %struct.cfg80211_registered_device*, %struct.cfg80211_registered_device** %rdev.addr, align 8
  %wiphy22 = getelementptr inbounds %struct.cfg80211_registered_device, %struct.cfg80211_registered_device* %12, i32 0, i32 42
  %debugfsdir23 = getelementptr inbounds %struct.wiphy, %struct.wiphy* %wiphy22, i32 0, i32 52
  %13 = load %struct.dentry*, %struct.dentry** %debugfsdir23, align 32
  %d_parent = getelementptr inbounds %struct.dentry, %struct.dentry* %13, i32 0, i32 3
  %14 = load %struct.dentry*, %struct.dentry** %d_parent, align 8
  %15 = load %struct.cfg80211_registered_device*, %struct.cfg80211_registered_device** %rdev.addr, align 8
  %wiphy24 = getelementptr inbounds %struct.cfg80211_registered_device, %struct.cfg80211_registered_device* %15, i32 0, i32 42
  %debugfsdir25 = getelementptr inbounds %struct.wiphy, %struct.wiphy* %wiphy24, i32 0, i32 52
  %16 = load %struct.dentry*, %struct.dentry** %debugfsdir25, align 32
  %17 = load %struct.cfg80211_registered_device*, %struct.cfg80211_registered_device** %rdev.addr, align 8
  %wiphy26 = getelementptr inbounds %struct.cfg80211_registered_device, %struct.cfg80211_registered_device* %17, i32 0, i32 42
  %debugfsdir27 = getelementptr inbounds %struct.wiphy, %struct.wiphy* %wiphy26, i32 0, i32 52
  %18 = load %struct.dentry*, %struct.dentry** %debugfsdir27, align 32
  %d_parent28 = getelementptr inbounds %struct.dentry, %struct.dentry* %18, i32 0, i32 3
  %19 = load %struct.dentry*, %struct.dentry** %d_parent28, align 8
  %20 = load i8*, i8** %newname.addr, align 8
  %call29 = call %struct.dentry* @debugfs_rename(%struct.dentry* %14, %struct.dentry* %16, %struct.dentry* %19, i8* %20)
  %tobool30 = icmp ne %struct.dentry* %call29, null
  br i1 %tobool30, label %if.end33, label %if.then31

if.then31:                                        ; preds = %land.lhs.true
  %21 = load i8*, i8** %newname.addr, align 8
  %call32 = call i32 (i8*, ...) @printk(i8* getelementptr inbounds ([49 x i8], [49 x i8]* @.str.2, i32 0, i32 0), i8* %21)
  br label %if.end33

if.end33:                                         ; preds = %if.then31, %land.lhs.true, %if.end19
  %22 = load %struct.cfg80211_registered_device*, %struct.cfg80211_registered_device** %rdev.addr, align 8
  call void @nl80211_notify_wiphy(%struct.cfg80211_registered_device* %22, i32 3)
  store i32 0, i32* %retval, align 4
  br label %return

return:                                           ; preds = %if.end33, %if.then18, %if.then13, %if.then8
  %23 = load i32, i32* %retval, align 4
  ret i32 %23
}

declare i32 @strcmp(i8*, i8*) #1

; Function Attrs: noinline nounwind optnone uwtable
define internal i8* @wiphy_name(%struct.wiphy* %wiphy) #0 {
entry:
  %wiphy.addr = alloca %struct.wiphy*, align 8
  store %struct.wiphy* %wiphy, %struct.wiphy** %wiphy.addr, align 8
  %0 = load %struct.wiphy*, %struct.wiphy** %wiphy.addr, align 8
  %dev = getelementptr inbounds %struct.wiphy, %struct.wiphy* %0, i32 0, i32 50
  %call = call i8* @dev_name(%struct.device* %dev)
  ret i8* %call
}

; Function Attrs: noinline nounwind optnone uwtable
define internal i32 @cfg80211_dev_check_name(%struct.cfg80211_registered_device* %rdev, i8* %newname) #0 {
entry:
  %retval = alloca i32, align 4
  %rdev.addr = alloca %struct.cfg80211_registered_device*, align 8
  %newname.addr = alloca i8*, align 8
  %rdev2 = alloca %struct.cfg80211_registered_device*, align 8
  %wiphy_idx = alloca i32, align 4
  %taken = alloca i32, align 4
  %digits = alloca i32, align 4
  %__mptr = alloca %struct.list_head*, align 8
  %tmp = alloca %struct.cfg80211_registered_device*, align 8
  %__mptr29 = alloca %struct.list_head*, align 8
  %tmp31 = alloca %struct.cfg80211_registered_device*, align 8
  store %struct.cfg80211_registered_device* %rdev, %struct.cfg80211_registered_device** %rdev.addr, align 8
  store i8* %newname, i8** %newname.addr, align 8
  store i32 -1, i32* %taken, align 4
  br label %do.body

do.body:                                          ; preds = %entry
  %call = call i32 @rtnl_is_locked()
  %tobool = icmp ne i32 %call, 0
  %lnot = xor i1 %tobool, true
  %lnot1 = xor i1 %lnot, true
  %lnot2 = xor i1 %lnot1, true
  %lnot.ext = zext i1 %lnot2 to i32
  %conv = sext i32 %lnot.ext to i64
  %tobool3 = icmp ne i64 %conv, 0
  br i1 %tobool3, label %if.then, label %if.end

if.then:                                          ; preds = %do.body
  %call4 = call i32 (i8*, ...) @printk(i8* getelementptr inbounds ([37 x i8], [37 x i8]* @.str, i32 0, i32 0), i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.1, i32 0, i32 0), i32 96)
  call void @dump_stack()
  br label %if.end

if.end:                                           ; preds = %if.then, %do.body
  br label %do.end

do.end:                                           ; preds = %if.end
  %0 = load i8*, i8** %newname.addr, align 8
  %call5 = call i32 (i8*, i8*, ...) @sscanf(i8* %0, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.8, i32 0, i32 0), i32* %wiphy_idx, i32* %taken)
  %1 = load i32, i32* %taken, align 4
  %conv6 = sext i32 %1 to i64
  %2 = load i8*, i8** %newname.addr, align 8
  %call7 = call i64 @strlen(i8* %2)
  %cmp = icmp eq i64 %conv6, %call7
  br i1 %cmp, label %land.lhs.true, label %if.end20

land.lhs.true:                                    ; preds = %do.end
  %3 = load i32, i32* %wiphy_idx, align 4
  %4 = load %struct.cfg80211_registered_device*, %struct.cfg80211_registered_device** %rdev.addr, align 8
  %wiphy_idx9 = getelementptr inbounds %struct.cfg80211_registered_device, %struct.cfg80211_registered_device* %4, i32 0, i32 8
  %5 = load i32, i32* %wiphy_idx9, align 4
  %cmp10 = icmp ne i32 %3, %5
  br i1 %cmp10, label %if.then12, label %if.end20

if.then12:                                        ; preds = %land.lhs.true
  store i32 1, i32* %digits, align 4
  br label %while.cond

while.cond:                                       ; preds = %while.body, %if.then12
  %6 = load i32, i32* %wiphy_idx, align 4
  %div = sdiv i32 %6, 10
  store i32 %div, i32* %wiphy_idx, align 4
  %tobool13 = icmp ne i32 %div, 0
  br i1 %tobool13, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %7 = load i32, i32* %digits, align 4
  %inc = add nsw i32 %7, 1
  store i32 %inc, i32* %digits, align 4
  br label %while.cond

while.end:                                        ; preds = %while.cond
  %8 = load i32, i32* %taken, align 4
  %conv14 = sext i32 %8 to i64
  %9 = load i32, i32* %digits, align 4
  %conv15 = sext i32 %9 to i64
  %add = add i64 3, %conv15
  %cmp16 = icmp eq i64 %conv14, %add
  br i1 %cmp16, label %if.then18, label %if.end19

if.then18:                                        ; preds = %while.end
  store i32 -22, i32* %retval, align 4
  br label %return

if.end19:                                         ; preds = %while.end
  br label %if.end20

if.end20:                                         ; preds = %if.end19, %land.lhs.true, %do.end
  %10 = load %struct.list_head*, %struct.list_head** getelementptr inbounds (%struct.list_head, %struct.list_head* @cfg80211_rdev_list, i32 0, i32 0), align 8
  store %struct.list_head* %10, %struct.list_head** %__mptr, align 8
  %11 = load %struct.list_head*, %struct.list_head** %__mptr, align 8
  %12 = bitcast %struct.list_head* %11 to i8*
  %add.ptr = getelementptr inbounds i8, i8* %12, i64 -8
  %13 = bitcast i8* %add.ptr to %struct.cfg80211_registered_device*
  store %struct.cfg80211_registered_device* %13, %struct.cfg80211_registered_device** %tmp, align 8
  %14 = load %struct.cfg80211_registered_device*, %struct.cfg80211_registered_device** %tmp, align 8
  store %struct.cfg80211_registered_device* %14, %struct.cfg80211_registered_device** %rdev2, align 8
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %if.end20
  %15 = load %struct.cfg80211_registered_device*, %struct.cfg80211_registered_device** %rdev2, align 8
  %list = getelementptr inbounds %struct.cfg80211_registered_device, %struct.cfg80211_registered_device* %15, i32 0, i32 1
  %cmp21 = icmp ne %struct.list_head* %list, @cfg80211_rdev_list
  br i1 %cmp21, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %16 = load i8*, i8** %newname.addr, align 8
  %17 = load %struct.cfg80211_registered_device*, %struct.cfg80211_registered_device** %rdev2, align 8
  %wiphy = getelementptr inbounds %struct.cfg80211_registered_device, %struct.cfg80211_registered_device* %17, i32 0, i32 42
  %call23 = call i8* @wiphy_name(%struct.wiphy* %wiphy)
  %call24 = call i32 @strcmp(i8* %16, i8* %call23)
  %cmp25 = icmp eq i32 %call24, 0
  br i1 %cmp25, label %if.then27, label %if.end28

if.then27:                                        ; preds = %for.body
  store i32 -22, i32* %retval, align 4
  br label %return

if.end28:                                         ; preds = %for.body
  br label %for.inc

for.inc:                                          ; preds = %if.end28
  %18 = load %struct.cfg80211_registered_device*, %struct.cfg80211_registered_device** %rdev2, align 8
  %list30 = getelementptr inbounds %struct.cfg80211_registered_device, %struct.cfg80211_registered_device* %18, i32 0, i32 1
  %next = getelementptr inbounds %struct.list_head, %struct.list_head* %list30, i32 0, i32 0
  %19 = load %struct.list_head*, %struct.list_head** %next, align 8
  store %struct.list_head* %19, %struct.list_head** %__mptr29, align 8
  %20 = load %struct.list_head*, %struct.list_head** %__mptr29, align 8
  %21 = bitcast %struct.list_head* %20 to i8*
  %add.ptr32 = getelementptr inbounds i8, i8* %21, i64 -8
  %22 = bitcast i8* %add.ptr32 to %struct.cfg80211_registered_device*
  store %struct.cfg80211_registered_device* %22, %struct.cfg80211_registered_device** %tmp31, align 8
  %23 = load %struct.cfg80211_registered_device*, %struct.cfg80211_registered_device** %tmp31, align 8
  store %struct.cfg80211_registered_device* %23, %struct.cfg80211_registered_device** %rdev2, align 8
  br label %for.cond

for.end:                                          ; preds = %for.cond
  store i32 0, i32* %retval, align 4
  br label %return

return:                                           ; preds = %for.end, %if.then27, %if.then18
  %24 = load i32, i32* %retval, align 4
  ret i32 %24
}

declare i32 @device_rename(%struct.device*, i8*) #1

declare %struct.dentry* @debugfs_rename(%struct.dentry*, %struct.dentry*, %struct.dentry*, i8*) #1

declare void @nl80211_notify_wiphy(%struct.cfg80211_registered_device*, i32) #1

; Function Attrs: noinline nounwind optnone uwtable
define i32 @cfg80211_switch_netns(%struct.cfg80211_registered_device* %rdev, %struct.net* %net) #0 {
entry:
  %retval = alloca i32, align 4
  %rdev.addr = alloca %struct.cfg80211_registered_device*, align 8
  %net.addr = alloca %struct.net*, align 8
  %wdev = alloca %struct.wireless_dev*, align 8
  %err = alloca i32, align 4
  %__mptr = alloca %struct.list_head*, align 8
  %tmp = alloca %struct.wireless_dev*, align 8
  %__mptr15 = alloca %struct.list_head*, align 8
  %tmp18 = alloca %struct.wireless_dev*, align 8
  %__mptr24 = alloca %struct.list_head*, align 8
  %tmp26 = alloca %struct.wireless_dev*, align 8
  %__ret_warn_on = alloca i32, align 4
  %tmp53 = alloca i64, align 8
  %__mptr64 = alloca %struct.list_head*, align 8
  %tmp67 = alloca %struct.wireless_dev*, align 8
  %__ret_warn_on77 = alloca i32, align 4
  %tmp92 = alloca i64, align 8
  store %struct.cfg80211_registered_device* %rdev, %struct.cfg80211_registered_device** %rdev.addr, align 8
  store %struct.net* %net, %struct.net** %net.addr, align 8
  store i32 0, i32* %err, align 4
  %0 = load %struct.cfg80211_registered_device*, %struct.cfg80211_registered_device** %rdev.addr, align 8
  %wiphy = getelementptr inbounds %struct.cfg80211_registered_device, %struct.cfg80211_registered_device* %0, i32 0, i32 42
  %flags = getelementptr inbounds %struct.wiphy, %struct.wiphy* %wiphy, i32 0, i32 10
  %1 = load i32, i32* %flags, align 4
  %and = and i32 %1, 8
  %tobool = icmp ne i32 %and, 0
  br i1 %tobool, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  store i32 -95, i32* %retval, align 4
  br label %return

if.end:                                           ; preds = %entry
  %2 = load %struct.cfg80211_registered_device*, %struct.cfg80211_registered_device** %rdev.addr, align 8
  %wiphy1 = getelementptr inbounds %struct.cfg80211_registered_device, %struct.cfg80211_registered_device* %2, i32 0, i32 42
  %wdev_list = getelementptr inbounds %struct.wiphy, %struct.wiphy* %wiphy1, i32 0, i32 55
  %next = getelementptr inbounds %struct.list_head, %struct.list_head* %wdev_list, i32 0, i32 0
  %3 = load %struct.list_head*, %struct.list_head** %next, align 8
  store %struct.list_head* %3, %struct.list_head** %__mptr, align 8
  %4 = load %struct.list_head*, %struct.list_head** %__mptr, align 8
  %5 = bitcast %struct.list_head* %4 to i8*
  %add.ptr = getelementptr inbounds i8, i8* %5, i64 -16
  %6 = bitcast i8* %add.ptr to %struct.wireless_dev*
  store %struct.wireless_dev* %6, %struct.wireless_dev** %tmp, align 8
  %7 = load %struct.wireless_dev*, %struct.wireless_dev** %tmp, align 8
  store %struct.wireless_dev* %7, %struct.wireless_dev** %wdev, align 8
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %if.end
  %8 = load %struct.wireless_dev*, %struct.wireless_dev** %wdev, align 8
  %list = getelementptr inbounds %struct.wireless_dev, %struct.wireless_dev* %8, i32 0, i32 2
  %9 = load %struct.cfg80211_registered_device*, %struct.cfg80211_registered_device** %rdev.addr, align 8
  %wiphy2 = getelementptr inbounds %struct.cfg80211_registered_device, %struct.cfg80211_registered_device* %9, i32 0, i32 42
  %wdev_list3 = getelementptr inbounds %struct.wiphy, %struct.wiphy* %wiphy2, i32 0, i32 55
  %cmp = icmp ne %struct.list_head* %list, %wdev_list3
  br i1 %cmp, label %for.body, label %for.end.loopexit

for.body:                                         ; preds = %for.cond
  %10 = load %struct.wireless_dev*, %struct.wireless_dev** %wdev, align 8
  %netdev = getelementptr inbounds %struct.wireless_dev, %struct.wireless_dev* %10, i32 0, i32 3
  %11 = load %struct.net_device*, %struct.net_device** %netdev, align 8
  %tobool4 = icmp ne %struct.net_device* %11, null
  br i1 %tobool4, label %if.end6, label %if.then5

if.then5:                                         ; preds = %for.body
  br label %for.inc

if.end6:                                          ; preds = %for.body
  %12 = load %struct.wireless_dev*, %struct.wireless_dev** %wdev, align 8
  %netdev7 = getelementptr inbounds %struct.wireless_dev, %struct.wireless_dev* %12, i32 0, i32 3
  %13 = load %struct.net_device*, %struct.net_device** %netdev7, align 8
  %features = getelementptr inbounds %struct.net_device, %struct.net_device* %13, i32 0, i32 16
  %14 = load i64, i64* %features, align 16
  %and8 = and i64 %14, -8193
  store i64 %and8, i64* %features, align 16
  %15 = load %struct.wireless_dev*, %struct.wireless_dev** %wdev, align 8
  %netdev9 = getelementptr inbounds %struct.wireless_dev, %struct.wireless_dev* %15, i32 0, i32 3
  %16 = load %struct.net_device*, %struct.net_device** %netdev9, align 8
  %17 = load %struct.net*, %struct.net** %net.addr, align 8
  %call = call i32 @dev_change_net_namespace(%struct.net_device* %16, %struct.net* %17, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.3, i32 0, i32 0))
  store i32 %call, i32* %err, align 4
  %18 = load i32, i32* %err, align 4
  %tobool10 = icmp ne i32 %18, 0
  br i1 %tobool10, label %if.then11, label %if.end12

if.then11:                                        ; preds = %if.end6
  br label %for.end

if.end12:                                         ; preds = %if.end6
  %19 = load %struct.wireless_dev*, %struct.wireless_dev** %wdev, align 8
  %netdev13 = getelementptr inbounds %struct.wireless_dev, %struct.wireless_dev* %19, i32 0, i32 3
  %20 = load %struct.net_device*, %struct.net_device** %netdev13, align 8
  %features14 = getelementptr inbounds %struct.net_device, %struct.net_device* %20, i32 0, i32 16
  %21 = load i64, i64* %features14, align 16
  %or = or i64 %21, 8192
  store i64 %or, i64* %features14, align 16
  br label %for.inc

for.inc:                                          ; preds = %if.end12, %if.then5
  %22 = load %struct.wireless_dev*, %struct.wireless_dev** %wdev, align 8
  %list16 = getelementptr inbounds %struct.wireless_dev, %struct.wireless_dev* %22, i32 0, i32 2
  %next17 = getelementptr inbounds %struct.list_head, %struct.list_head* %list16, i32 0, i32 0
  %23 = load %struct.list_head*, %struct.list_head** %next17, align 8
  store %struct.list_head* %23, %struct.list_head** %__mptr15, align 8
  %24 = load %struct.list_head*, %struct.list_head** %__mptr15, align 8
  %25 = bitcast %struct.list_head* %24 to i8*
  %add.ptr19 = getelementptr inbounds i8, i8* %25, i64 -16
  %26 = bitcast i8* %add.ptr19 to %struct.wireless_dev*
  store %struct.wireless_dev* %26, %struct.wireless_dev** %tmp18, align 8
  %27 = load %struct.wireless_dev*, %struct.wireless_dev** %tmp18, align 8
  store %struct.wireless_dev* %27, %struct.wireless_dev** %wdev, align 8
  br label %for.cond

for.end.loopexit:                                 ; preds = %for.cond
  br label %for.end

for.end:                                          ; preds = %for.end.loopexit, %if.then11
  %28 = load i32, i32* %err, align 4
  %tobool20 = icmp ne i32 %28, 0
  br i1 %tobool20, label %if.then21, label %if.end70

if.then21:                                        ; preds = %for.end
  %29 = load %struct.cfg80211_registered_device*, %struct.cfg80211_registered_device** %rdev.addr, align 8
  %wiphy22 = getelementptr inbounds %struct.cfg80211_registered_device, %struct.cfg80211_registered_device* %29, i32 0, i32 42
  %call23 = call %struct.net* @wiphy_net(%struct.wiphy* %wiphy22)
  store %struct.net* %call23, %struct.net** %net.addr, align 8
  %30 = load %struct.wireless_dev*, %struct.wireless_dev** %wdev, align 8
  %list25 = getelementptr inbounds %struct.wireless_dev, %struct.wireless_dev* %30, i32 0, i32 2
  %prev = getelementptr inbounds %struct.list_head, %struct.list_head* %list25, i32 0, i32 1
  %31 = load %struct.list_head*, %struct.list_head** %prev, align 8
  store %struct.list_head* %31, %struct.list_head** %__mptr24, align 8
  %32 = load %struct.list_head*, %struct.list_head** %__mptr24, align 8
  %33 = bitcast %struct.list_head* %32 to i8*
  %add.ptr27 = getelementptr inbounds i8, i8* %33, i64 -16
  %34 = bitcast i8* %add.ptr27 to %struct.wireless_dev*
  store %struct.wireless_dev* %34, %struct.wireless_dev** %tmp26, align 8
  %35 = load %struct.wireless_dev*, %struct.wireless_dev** %tmp26, align 8
  store %struct.wireless_dev* %35, %struct.wireless_dev** %wdev, align 8
  br label %for.cond28

for.cond28:                                       ; preds = %for.inc63, %if.then21
  %36 = load %struct.wireless_dev*, %struct.wireless_dev** %wdev, align 8
  %list29 = getelementptr inbounds %struct.wireless_dev, %struct.wireless_dev* %36, i32 0, i32 2
  %37 = load %struct.cfg80211_registered_device*, %struct.cfg80211_registered_device** %rdev.addr, align 8
  %wiphy30 = getelementptr inbounds %struct.cfg80211_registered_device, %struct.cfg80211_registered_device* %37, i32 0, i32 42
  %wdev_list31 = getelementptr inbounds %struct.wiphy, %struct.wiphy* %wiphy30, i32 0, i32 55
  %cmp32 = icmp ne %struct.list_head* %list29, %wdev_list31
  br i1 %cmp32, label %for.body33, label %for.end69

for.body33:                                       ; preds = %for.cond28
  %38 = load %struct.wireless_dev*, %struct.wireless_dev** %wdev, align 8
  %netdev34 = getelementptr inbounds %struct.wireless_dev, %struct.wireless_dev* %38, i32 0, i32 3
  %39 = load %struct.net_device*, %struct.net_device** %netdev34, align 8
  %tobool35 = icmp ne %struct.net_device* %39, null
  br i1 %tobool35, label %if.end37, label %if.then36

if.then36:                                        ; preds = %for.body33
  br label %for.inc63

if.end37:                                         ; preds = %for.body33
  %40 = load %struct.wireless_dev*, %struct.wireless_dev** %wdev, align 8
  %netdev38 = getelementptr inbounds %struct.wireless_dev, %struct.wireless_dev* %40, i32 0, i32 3
  %41 = load %struct.net_device*, %struct.net_device** %netdev38, align 8
  %features39 = getelementptr inbounds %struct.net_device, %struct.net_device* %41, i32 0, i32 16
  %42 = load i64, i64* %features39, align 16
  %and40 = and i64 %42, -8193
  store i64 %and40, i64* %features39, align 16
  %43 = load %struct.wireless_dev*, %struct.wireless_dev** %wdev, align 8
  %netdev41 = getelementptr inbounds %struct.wireless_dev, %struct.wireless_dev* %43, i32 0, i32 3
  %44 = load %struct.net_device*, %struct.net_device** %netdev41, align 8
  %45 = load %struct.net*, %struct.net** %net.addr, align 8
  %call42 = call i32 @dev_change_net_namespace(%struct.net_device* %44, %struct.net* %45, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.3, i32 0, i32 0))
  store i32 %call42, i32* %err, align 4
  %46 = load i32, i32* %err, align 4
  %tobool43 = icmp ne i32 %46, 0
  %lnot = xor i1 %tobool43, true
  %lnot44 = xor i1 %lnot, true
  %lnot.ext = zext i1 %lnot44 to i32
  store i32 %lnot.ext, i32* %__ret_warn_on, align 4
  %47 = load i32, i32* %__ret_warn_on, align 4
  %tobool45 = icmp ne i32 %47, 0
  %lnot46 = xor i1 %tobool45, true
  %lnot48 = xor i1 %lnot46, true
  %lnot.ext49 = zext i1 %lnot48 to i32
  %conv = sext i32 %lnot.ext49 to i64
  %tobool50 = icmp ne i64 %conv, 0
  br i1 %tobool50, label %if.then51, label %if.end52

if.then51:                                        ; preds = %if.end37
  call void @warn_slowpath_null(i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.1, i32 0, i32 0), i32 183)
  br label %if.end52

if.end52:                                         ; preds = %if.then51, %if.end37
  %48 = load i32, i32* %__ret_warn_on, align 4
  %tobool54 = icmp ne i32 %48, 0
  %lnot55 = xor i1 %tobool54, true
  %lnot57 = xor i1 %lnot55, true
  %lnot.ext58 = zext i1 %lnot57 to i32
  %conv59 = sext i32 %lnot.ext58 to i64
  store i64 %conv59, i64* %tmp53, align 8
  %49 = load i64, i64* %tmp53, align 8
  %50 = load %struct.wireless_dev*, %struct.wireless_dev** %wdev, align 8
  %netdev60 = getelementptr inbounds %struct.wireless_dev, %struct.wireless_dev* %50, i32 0, i32 3
  %51 = load %struct.net_device*, %struct.net_device** %netdev60, align 8
  %features61 = getelementptr inbounds %struct.net_device, %struct.net_device* %51, i32 0, i32 16
  %52 = load i64, i64* %features61, align 16
  %or62 = or i64 %52, 8192
  store i64 %or62, i64* %features61, align 16
  br label %for.inc63

for.inc63:                                        ; preds = %if.end52, %if.then36
  %53 = load %struct.wireless_dev*, %struct.wireless_dev** %wdev, align 8
  %list65 = getelementptr inbounds %struct.wireless_dev, %struct.wireless_dev* %53, i32 0, i32 2
  %prev66 = getelementptr inbounds %struct.list_head, %struct.list_head* %list65, i32 0, i32 1
  %54 = load %struct.list_head*, %struct.list_head** %prev66, align 8
  store %struct.list_head* %54, %struct.list_head** %__mptr64, align 8
  %55 = load %struct.list_head*, %struct.list_head** %__mptr64, align 8
  %56 = bitcast %struct.list_head* %55 to i8*
  %add.ptr68 = getelementptr inbounds i8, i8* %56, i64 -16
  %57 = bitcast i8* %add.ptr68 to %struct.wireless_dev*
  store %struct.wireless_dev* %57, %struct.wireless_dev** %tmp67, align 8
  %58 = load %struct.wireless_dev*, %struct.wireless_dev** %tmp67, align 8
  store %struct.wireless_dev* %58, %struct.wireless_dev** %wdev, align 8
  br label %for.cond28

for.end69:                                        ; preds = %for.cond28
  %59 = load i32, i32* %err, align 4
  store i32 %59, i32* %retval, align 4
  br label %return

if.end70:                                         ; preds = %for.end
  %60 = load %struct.cfg80211_registered_device*, %struct.cfg80211_registered_device** %rdev.addr, align 8
  %wiphy71 = getelementptr inbounds %struct.cfg80211_registered_device, %struct.cfg80211_registered_device* %60, i32 0, i32 42
  %61 = load %struct.net*, %struct.net** %net.addr, align 8
  call void @wiphy_net_set(%struct.wiphy* %wiphy71, %struct.net* %61)
  %62 = load %struct.cfg80211_registered_device*, %struct.cfg80211_registered_device** %rdev.addr, align 8
  %wiphy72 = getelementptr inbounds %struct.cfg80211_registered_device, %struct.cfg80211_registered_device* %62, i32 0, i32 42
  %dev = getelementptr inbounds %struct.wiphy, %struct.wiphy* %wiphy72, i32 0, i32 50
  %63 = load %struct.cfg80211_registered_device*, %struct.cfg80211_registered_device** %rdev.addr, align 8
  %wiphy73 = getelementptr inbounds %struct.cfg80211_registered_device, %struct.cfg80211_registered_device* %63, i32 0, i32 42
  %dev74 = getelementptr inbounds %struct.wiphy, %struct.wiphy* %wiphy73, i32 0, i32 50
  %call75 = call i8* @dev_name(%struct.device* %dev74)
  %call76 = call i32 @device_rename(%struct.device* %dev, i8* %call75)
  store i32 %call76, i32* %err, align 4
  %64 = load i32, i32* %err, align 4
  %tobool78 = icmp ne i32 %64, 0
  %lnot79 = xor i1 %tobool78, true
  %lnot81 = xor i1 %lnot79, true
  %lnot.ext82 = zext i1 %lnot81 to i32
  store i32 %lnot.ext82, i32* %__ret_warn_on77, align 4
  %65 = load i32, i32* %__ret_warn_on77, align 4
  %tobool83 = icmp ne i32 %65, 0
  %lnot84 = xor i1 %tobool83, true
  %lnot86 = xor i1 %lnot84, true
  %lnot.ext87 = zext i1 %lnot86 to i32
  %conv88 = sext i32 %lnot.ext87 to i64
  %tobool89 = icmp ne i64 %conv88, 0
  br i1 %tobool89, label %if.then90, label %if.end91

if.then90:                                        ; preds = %if.end70
  call void @warn_slowpath_null(i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.1, i32 0, i32 0), i32 193)
  br label %if.end91

if.end91:                                         ; preds = %if.then90, %if.end70
  %66 = load i32, i32* %__ret_warn_on77, align 4
  %tobool93 = icmp ne i32 %66, 0
  %lnot94 = xor i1 %tobool93, true
  %lnot96 = xor i1 %lnot94, true
  %lnot.ext97 = zext i1 %lnot96 to i32
  %conv98 = sext i32 %lnot.ext97 to i64
  store i64 %conv98, i64* %tmp92, align 8
  %67 = load i64, i64* %tmp92, align 8
  store i32 0, i32* %retval, align 4
  br label %return

return:                                           ; preds = %if.end91, %for.end69, %if.then
  %68 = load i32, i32* %retval, align 4
  ret i32 %68
}

declare i32 @dev_change_net_namespace(%struct.net_device*, %struct.net*, i8*) #1

; Function Attrs: noinline nounwind optnone uwtable
define internal %struct.net* @wiphy_net(%struct.wiphy* %wiphy) #0 {
entry:
  %wiphy.addr = alloca %struct.wiphy*, align 8
  store %struct.wiphy* %wiphy, %struct.wiphy** %wiphy.addr, align 8
  %0 = load %struct.wiphy*, %struct.wiphy** %wiphy.addr, align 8
  %_net = getelementptr inbounds %struct.wiphy, %struct.wiphy* %0, i32 0, i32 56
  %call = call %struct.net* @read_pnet(%struct.possible_net_t* %_net)
  ret %struct.net* %call
}

declare void @warn_slowpath_null(i8*, i32) #1

; Function Attrs: noinline nounwind optnone uwtable
define internal void @wiphy_net_set(%struct.wiphy* %wiphy, %struct.net* %net) #0 {
entry:
  %wiphy.addr = alloca %struct.wiphy*, align 8
  %net.addr = alloca %struct.net*, align 8
  store %struct.wiphy* %wiphy, %struct.wiphy** %wiphy.addr, align 8
  store %struct.net* %net, %struct.net** %net.addr, align 8
  %0 = load %struct.wiphy*, %struct.wiphy** %wiphy.addr, align 8
  %_net = getelementptr inbounds %struct.wiphy, %struct.wiphy* %0, i32 0, i32 56
  %1 = load %struct.net*, %struct.net** %net.addr, align 8
  call void @write_pnet(%struct.possible_net_t* %_net, %struct.net* %1)
  ret void
}

; Function Attrs: noinline nounwind optnone uwtable
define internal i8* @dev_name(%struct.device* %dev) #0 {
entry:
  %retval = alloca i8*, align 8
  %dev.addr = alloca %struct.device*, align 8
  store %struct.device* %dev, %struct.device** %dev.addr, align 8
  %0 = load %struct.device*, %struct.device** %dev.addr, align 8
  %init_name = getelementptr inbounds %struct.device, %struct.device* %0, i32 0, i32 3
  %1 = load i8*, i8** %init_name, align 8
  %tobool = icmp ne i8* %1, null
  br i1 %tobool, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %2 = load %struct.device*, %struct.device** %dev.addr, align 8
  %init_name1 = getelementptr inbounds %struct.device, %struct.device* %2, i32 0, i32 3
  %3 = load i8*, i8** %init_name1, align 8
  store i8* %3, i8** %retval, align 8
  br label %return

if.end:                                           ; preds = %entry
  %4 = load %struct.device*, %struct.device** %dev.addr, align 8
  %kobj = getelementptr inbounds %struct.device, %struct.device* %4, i32 0, i32 2
  %call = call i8* @kobject_name(%struct.kobject* %kobj)
  store i8* %call, i8** %retval, align 8
  br label %return

return:                                           ; preds = %if.end, %if.then
  %5 = load i8*, i8** %retval, align 8
  ret i8* %5
}

; Function Attrs: noinline nounwind optnone uwtable
define void @cfg80211_stop_p2p_device(%struct.cfg80211_registered_device* %rdev, %struct.wireless_dev* %wdev) #0 {
entry:
  %rdev.addr = alloca %struct.cfg80211_registered_device*, align 8
  %wdev.addr = alloca %struct.wireless_dev*, align 8
  %__ret_warn_on = alloca i32, align 4
  %tmp = alloca i64, align 8
  %__ret_warn_on37 = alloca i32, align 4
  %tmp55 = alloca i64, align 8
  store %struct.cfg80211_registered_device* %rdev, %struct.cfg80211_registered_device** %rdev.addr, align 8
  store %struct.wireless_dev* %wdev, %struct.wireless_dev** %wdev.addr, align 8
  br label %do.body

do.body:                                          ; preds = %entry
  %call = call i32 @rtnl_is_locked()
  %tobool = icmp ne i32 %call, 0
  %lnot = xor i1 %tobool, true
  %lnot1 = xor i1 %lnot, true
  %lnot2 = xor i1 %lnot1, true
  %lnot.ext = zext i1 %lnot2 to i32
  %conv = sext i32 %lnot.ext to i64
  %tobool3 = icmp ne i64 %conv, 0
  br i1 %tobool3, label %if.then, label %if.end

if.then:                                          ; preds = %do.body
  %call4 = call i32 (i8*, ...) @printk(i8* getelementptr inbounds ([37 x i8], [37 x i8]* @.str, i32 0, i32 0), i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.1, i32 0, i32 0), i32 208)
  call void @dump_stack()
  br label %if.end

if.end:                                           ; preds = %if.then, %do.body
  br label %do.end

do.end:                                           ; preds = %if.end
  %0 = load %struct.wireless_dev*, %struct.wireless_dev** %wdev.addr, align 8
  %iftype = getelementptr inbounds %struct.wireless_dev, %struct.wireless_dev* %0, i32 0, i32 1
  %1 = load i32, i32* %iftype, align 8
  %cmp = icmp ne i32 %1, 10
  %lnot6 = xor i1 %cmp, true
  %lnot8 = xor i1 %lnot6, true
  %lnot.ext9 = zext i1 %lnot8 to i32
  store i32 %lnot.ext9, i32* %__ret_warn_on, align 4
  %2 = load i32, i32* %__ret_warn_on, align 4
  %tobool10 = icmp ne i32 %2, 0
  %lnot11 = xor i1 %tobool10, true
  %lnot13 = xor i1 %lnot11, true
  %lnot.ext14 = zext i1 %lnot13 to i32
  %conv15 = sext i32 %lnot.ext14 to i64
  %tobool16 = icmp ne i64 %conv15, 0
  br i1 %tobool16, label %if.then17, label %if.end18

if.then17:                                        ; preds = %do.end
  call void @warn_slowpath_null(i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.1, i32 0, i32 0), i32 210)
  br label %if.end18

if.end18:                                         ; preds = %if.then17, %do.end
  %3 = load i32, i32* %__ret_warn_on, align 4
  %tobool19 = icmp ne i32 %3, 0
  %lnot20 = xor i1 %tobool19, true
  %lnot22 = xor i1 %lnot20, true
  %lnot.ext23 = zext i1 %lnot22 to i32
  %conv24 = sext i32 %lnot.ext23 to i64
  store i64 %conv24, i64* %tmp, align 8
  %4 = load i64, i64* %tmp, align 8
  %tobool25 = icmp ne i64 %4, 0
  br i1 %tobool25, label %if.then26, label %if.end27

if.then26:                                        ; preds = %if.end18
  br label %if.end66

if.end27:                                         ; preds = %if.end18
  %5 = load %struct.wireless_dev*, %struct.wireless_dev** %wdev.addr, align 8
  %call28 = call zeroext i1 @wdev_running(%struct.wireless_dev* %5)
  br i1 %call28, label %if.end30, label %if.then29

if.then29:                                        ; preds = %if.end27
  br label %if.end66

if.end30:                                         ; preds = %if.end27
  %6 = load %struct.cfg80211_registered_device*, %struct.cfg80211_registered_device** %rdev.addr, align 8
  %7 = load %struct.wireless_dev*, %struct.wireless_dev** %wdev.addr, align 8
  call void @rdev_stop_p2p_device(%struct.cfg80211_registered_device* %6, %struct.wireless_dev* %7)
  %8 = load %struct.wireless_dev*, %struct.wireless_dev** %wdev.addr, align 8
  %is_running = getelementptr inbounds %struct.wireless_dev, %struct.wireless_dev* %8, i32 0, i32 9
  store i8 0, i8* %is_running, align 1
  %9 = load %struct.cfg80211_registered_device*, %struct.cfg80211_registered_device** %rdev.addr, align 8
  %opencount = getelementptr inbounds %struct.cfg80211_registered_device, %struct.cfg80211_registered_device* %9, i32 0, i32 11
  %10 = load i32, i32* %opencount, align 8
  %dec = add nsw i32 %10, -1
  store i32 %dec, i32* %opencount, align 8
  %11 = load %struct.cfg80211_registered_device*, %struct.cfg80211_registered_device** %rdev.addr, align 8
  %scan_req = getelementptr inbounds %struct.cfg80211_registered_device, %struct.cfg80211_registered_device* %11, i32 0, i32 25
  %12 = load %struct.cfg80211_scan_request*, %struct.cfg80211_scan_request** %scan_req, align 8
  %tobool31 = icmp ne %struct.cfg80211_scan_request* %12, null
  br i1 %tobool31, label %land.lhs.true, label %if.end66

land.lhs.true:                                    ; preds = %if.end30
  %13 = load %struct.cfg80211_registered_device*, %struct.cfg80211_registered_device** %rdev.addr, align 8
  %scan_req32 = getelementptr inbounds %struct.cfg80211_registered_device, %struct.cfg80211_registered_device* %13, i32 0, i32 25
  %14 = load %struct.cfg80211_scan_request*, %struct.cfg80211_scan_request** %scan_req32, align 8
  %wdev33 = getelementptr inbounds %struct.cfg80211_scan_request, %struct.cfg80211_scan_request* %14, i32 0, i32 10
  %15 = load %struct.wireless_dev*, %struct.wireless_dev** %wdev33, align 8
  %16 = load %struct.wireless_dev*, %struct.wireless_dev** %wdev.addr, align 8
  %cmp34 = icmp eq %struct.wireless_dev* %15, %16
  br i1 %cmp34, label %if.then36, label %if.end66

if.then36:                                        ; preds = %land.lhs.true
  %17 = load %struct.cfg80211_registered_device*, %struct.cfg80211_registered_device** %rdev.addr, align 8
  %scan_req38 = getelementptr inbounds %struct.cfg80211_registered_device, %struct.cfg80211_registered_device* %17, i32 0, i32 25
  %18 = load %struct.cfg80211_scan_request*, %struct.cfg80211_scan_request** %scan_req38, align 8
  %notified = getelementptr inbounds %struct.cfg80211_scan_request, %struct.cfg80211_scan_request* %18, i32 0, i32 17
  %19 = load i8, i8* %notified, align 8
  %tobool39 = trunc i8 %19 to i1
  %lnot40 = xor i1 %tobool39, true
  %lnot42 = xor i1 %lnot40, true
  %lnot44 = xor i1 %lnot42, true
  %lnot.ext45 = zext i1 %lnot44 to i32
  store i32 %lnot.ext45, i32* %__ret_warn_on37, align 4
  %20 = load i32, i32* %__ret_warn_on37, align 4
  %tobool46 = icmp ne i32 %20, 0
  %lnot47 = xor i1 %tobool46, true
  %lnot49 = xor i1 %lnot47, true
  %lnot.ext50 = zext i1 %lnot49 to i32
  %conv51 = sext i32 %lnot.ext50 to i64
  %tobool52 = icmp ne i64 %conv51, 0
  br i1 %tobool52, label %if.then53, label %if.end54

if.then53:                                        ; preds = %if.then36
  call void @warn_slowpath_null(i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.1, i32 0, i32 0), i32 222)
  br label %if.end54

if.end54:                                         ; preds = %if.then53, %if.then36
  %21 = load i32, i32* %__ret_warn_on37, align 4
  %tobool56 = icmp ne i32 %21, 0
  %lnot57 = xor i1 %tobool56, true
  %lnot59 = xor i1 %lnot57, true
  %lnot.ext60 = zext i1 %lnot59 to i32
  %conv61 = sext i32 %lnot.ext60 to i64
  store i64 %conv61, i64* %tmp55, align 8
  %22 = load i64, i64* %tmp55, align 8
  %tobool62 = icmp ne i64 %22, 0
  br i1 %tobool62, label %if.then63, label %if.end65

if.then63:                                        ; preds = %if.end54
  %23 = load %struct.cfg80211_registered_device*, %struct.cfg80211_registered_device** %rdev.addr, align 8
  %scan_req64 = getelementptr inbounds %struct.cfg80211_registered_device, %struct.cfg80211_registered_device* %23, i32 0, i32 25
  %24 = load %struct.cfg80211_scan_request*, %struct.cfg80211_scan_request** %scan_req64, align 8
  %info = getelementptr inbounds %struct.cfg80211_scan_request, %struct.cfg80211_scan_request* %24, i32 0, i32 16
  %aborted = getelementptr inbounds %struct.cfg80211_scan_info, %struct.cfg80211_scan_info* %info, i32 0, i32 2
  store i8 1, i8* %aborted, align 2
  br label %if.end65

if.end65:                                         ; preds = %if.then63, %if.end54
  %25 = load %struct.cfg80211_registered_device*, %struct.cfg80211_registered_device** %rdev.addr, align 8
  call void @___cfg80211_scan_done(%struct.cfg80211_registered_device* %25, i1 zeroext false)
  br label %if.end66

if.end66:                                         ; preds = %if.end65, %land.lhs.true, %if.end30, %if.then29, %if.then26
  ret void
}

; Function Attrs: noinline nounwind optnone uwtable
define internal zeroext i1 @wdev_running(%struct.wireless_dev* %wdev) #0 {
entry:
  %retval = alloca i1, align 1
  %wdev.addr = alloca %struct.wireless_dev*, align 8
  store %struct.wireless_dev* %wdev, %struct.wireless_dev** %wdev.addr, align 8
  %0 = load %struct.wireless_dev*, %struct.wireless_dev** %wdev.addr, align 8
  %netdev = getelementptr inbounds %struct.wireless_dev, %struct.wireless_dev* %0, i32 0, i32 3
  %1 = load %struct.net_device*, %struct.net_device** %netdev, align 8
  %tobool = icmp ne %struct.net_device* %1, null
  br i1 %tobool, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %2 = load %struct.wireless_dev*, %struct.wireless_dev** %wdev.addr, align 8
  %netdev1 = getelementptr inbounds %struct.wireless_dev, %struct.wireless_dev* %2, i32 0, i32 3
  %3 = load %struct.net_device*, %struct.net_device** %netdev1, align 8
  %call = call zeroext i1 @netif_running(%struct.net_device* %3)
  store i1 %call, i1* %retval, align 1
  br label %return

if.end:                                           ; preds = %entry
  %4 = load %struct.wireless_dev*, %struct.wireless_dev** %wdev.addr, align 8
  %is_running = getelementptr inbounds %struct.wireless_dev, %struct.wireless_dev* %4, i32 0, i32 9
  %5 = load i8, i8* %is_running, align 1
  %tobool2 = trunc i8 %5 to i1
  store i1 %tobool2, i1* %retval, align 1
  br label %return

return:                                           ; preds = %if.end, %if.then
  %6 = load i1, i1* %retval, align 1
  ret i1 %6
}

; Function Attrs: noinline nounwind optnone uwtable
define internal void @rdev_stop_p2p_device(%struct.cfg80211_registered_device* %rdev, %struct.wireless_dev* %wdev) #0 {
entry:
  %rdev.addr = alloca %struct.cfg80211_registered_device*, align 8
  %wdev.addr = alloca %struct.wireless_dev*, align 8
  store %struct.cfg80211_registered_device* %rdev, %struct.cfg80211_registered_device** %rdev.addr, align 8
  store %struct.wireless_dev* %wdev, %struct.wireless_dev** %wdev.addr, align 8
  %0 = load %struct.cfg80211_registered_device*, %struct.cfg80211_registered_device** %rdev.addr, align 8
  %wiphy = getelementptr inbounds %struct.cfg80211_registered_device, %struct.cfg80211_registered_device* %0, i32 0, i32 42
  %1 = load %struct.wireless_dev*, %struct.wireless_dev** %wdev.addr, align 8
  call void @trace_rdev_stop_p2p_device(%struct.wiphy* %wiphy, %struct.wireless_dev* %1)
  %2 = load %struct.cfg80211_registered_device*, %struct.cfg80211_registered_device** %rdev.addr, align 8
  %ops = getelementptr inbounds %struct.cfg80211_registered_device, %struct.cfg80211_registered_device* %2, i32 0, i32 0
  %3 = load %struct.cfg80211_ops*, %struct.cfg80211_ops** %ops, align 32
  %stop_p2p_device = getelementptr inbounds %struct.cfg80211_ops, %struct.cfg80211_ops* %3, i32 0, i32 77
  %4 = load void (%struct.wiphy*, %struct.wireless_dev*)*, void (%struct.wiphy*, %struct.wireless_dev*)** %stop_p2p_device, align 8
  %5 = load %struct.cfg80211_registered_device*, %struct.cfg80211_registered_device** %rdev.addr, align 8
  %wiphy1 = getelementptr inbounds %struct.cfg80211_registered_device, %struct.cfg80211_registered_device* %5, i32 0, i32 42
  %6 = load %struct.wireless_dev*, %struct.wireless_dev** %wdev.addr, align 8
  call void %4(%struct.wiphy* %wiphy1, %struct.wireless_dev* %6)
  %7 = load %struct.cfg80211_registered_device*, %struct.cfg80211_registered_device** %rdev.addr, align 8
  %wiphy2 = getelementptr inbounds %struct.cfg80211_registered_device, %struct.cfg80211_registered_device* %7, i32 0, i32 42
  call void @trace_rdev_return_void(%struct.wiphy* %wiphy2)
  ret void
}

declare void @___cfg80211_scan_done(%struct.cfg80211_registered_device*, i1 zeroext) #1

; Function Attrs: noinline nounwind optnone uwtable
define void @cfg80211_stop_nan(%struct.cfg80211_registered_device* %rdev, %struct.wireless_dev* %wdev) #0 {
entry:
  %rdev.addr = alloca %struct.cfg80211_registered_device*, align 8
  %wdev.addr = alloca %struct.wireless_dev*, align 8
  %__ret_warn_on = alloca i32, align 4
  %tmp = alloca i64, align 8
  store %struct.cfg80211_registered_device* %rdev, %struct.cfg80211_registered_device** %rdev.addr, align 8
  store %struct.wireless_dev* %wdev, %struct.wireless_dev** %wdev.addr, align 8
  br label %do.body

do.body:                                          ; preds = %entry
  %call = call i32 @rtnl_is_locked()
  %tobool = icmp ne i32 %call, 0
  %lnot = xor i1 %tobool, true
  %lnot1 = xor i1 %lnot, true
  %lnot2 = xor i1 %lnot1, true
  %lnot.ext = zext i1 %lnot2 to i32
  %conv = sext i32 %lnot.ext to i64
  %tobool3 = icmp ne i64 %conv, 0
  br i1 %tobool3, label %if.then, label %if.end

if.then:                                          ; preds = %do.body
  %call4 = call i32 (i8*, ...) @printk(i8* getelementptr inbounds ([37 x i8], [37 x i8]* @.str, i32 0, i32 0), i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.1, i32 0, i32 0), i32 231)
  call void @dump_stack()
  br label %if.end

if.end:                                           ; preds = %if.then, %do.body
  br label %do.end

do.end:                                           ; preds = %if.end
  %0 = load %struct.wireless_dev*, %struct.wireless_dev** %wdev.addr, align 8
  %iftype = getelementptr inbounds %struct.wireless_dev, %struct.wireless_dev* %0, i32 0, i32 1
  %1 = load i32, i32* %iftype, align 8
  %cmp = icmp ne i32 %1, 12
  %lnot6 = xor i1 %cmp, true
  %lnot8 = xor i1 %lnot6, true
  %lnot.ext9 = zext i1 %lnot8 to i32
  store i32 %lnot.ext9, i32* %__ret_warn_on, align 4
  %2 = load i32, i32* %__ret_warn_on, align 4
  %tobool10 = icmp ne i32 %2, 0
  %lnot11 = xor i1 %tobool10, true
  %lnot13 = xor i1 %lnot11, true
  %lnot.ext14 = zext i1 %lnot13 to i32
  %conv15 = sext i32 %lnot.ext14 to i64
  %tobool16 = icmp ne i64 %conv15, 0
  br i1 %tobool16, label %if.then17, label %if.end18

if.then17:                                        ; preds = %do.end
  call void @warn_slowpath_null(i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.1, i32 0, i32 0), i32 233)
  br label %if.end18

if.end18:                                         ; preds = %if.then17, %do.end
  %3 = load i32, i32* %__ret_warn_on, align 4
  %tobool19 = icmp ne i32 %3, 0
  %lnot20 = xor i1 %tobool19, true
  %lnot22 = xor i1 %lnot20, true
  %lnot.ext23 = zext i1 %lnot22 to i32
  %conv24 = sext i32 %lnot.ext23 to i64
  store i64 %conv24, i64* %tmp, align 8
  %4 = load i64, i64* %tmp, align 8
  %tobool25 = icmp ne i64 %4, 0
  br i1 %tobool25, label %if.then26, label %if.end27

if.then26:                                        ; preds = %if.end18
  br label %return

if.end27:                                         ; preds = %if.end18
  %5 = load %struct.wireless_dev*, %struct.wireless_dev** %wdev.addr, align 8
  %call28 = call zeroext i1 @wdev_running(%struct.wireless_dev* %5)
  br i1 %call28, label %if.end30, label %if.then29

if.then29:                                        ; preds = %if.end27
  br label %return

if.end30:                                         ; preds = %if.end27
  %6 = load %struct.cfg80211_registered_device*, %struct.cfg80211_registered_device** %rdev.addr, align 8
  %7 = load %struct.wireless_dev*, %struct.wireless_dev** %wdev.addr, align 8
  call void @rdev_stop_nan(%struct.cfg80211_registered_device* %6, %struct.wireless_dev* %7)
  %8 = load %struct.wireless_dev*, %struct.wireless_dev** %wdev.addr, align 8
  %is_running = getelementptr inbounds %struct.wireless_dev, %struct.wireless_dev* %8, i32 0, i32 9
  store i8 0, i8* %is_running, align 1
  %9 = load %struct.cfg80211_registered_device*, %struct.cfg80211_registered_device** %rdev.addr, align 8
  %opencount = getelementptr inbounds %struct.cfg80211_registered_device, %struct.cfg80211_registered_device* %9, i32 0, i32 11
  %10 = load i32, i32* %opencount, align 8
  %dec = add nsw i32 %10, -1
  store i32 %dec, i32* %opencount, align 8
  br label %return

return:                                           ; preds = %if.end30, %if.then29, %if.then26
  ret void
}

; Function Attrs: noinline nounwind optnone uwtable
define internal void @rdev_stop_nan(%struct.cfg80211_registered_device* %rdev, %struct.wireless_dev* %wdev) #0 {
entry:
  %rdev.addr = alloca %struct.cfg80211_registered_device*, align 8
  %wdev.addr = alloca %struct.wireless_dev*, align 8
  store %struct.cfg80211_registered_device* %rdev, %struct.cfg80211_registered_device** %rdev.addr, align 8
  store %struct.wireless_dev* %wdev, %struct.wireless_dev** %wdev.addr, align 8
  %0 = load %struct.cfg80211_registered_device*, %struct.cfg80211_registered_device** %rdev.addr, align 8
  %wiphy = getelementptr inbounds %struct.cfg80211_registered_device, %struct.cfg80211_registered_device* %0, i32 0, i32 42
  %1 = load %struct.wireless_dev*, %struct.wireless_dev** %wdev.addr, align 8
  call void @trace_rdev_stop_nan(%struct.wiphy* %wiphy, %struct.wireless_dev* %1)
  %2 = load %struct.cfg80211_registered_device*, %struct.cfg80211_registered_device** %rdev.addr, align 8
  %ops = getelementptr inbounds %struct.cfg80211_registered_device, %struct.cfg80211_registered_device* %2, i32 0, i32 0
  %3 = load %struct.cfg80211_ops*, %struct.cfg80211_ops** %ops, align 32
  %stop_nan = getelementptr inbounds %struct.cfg80211_ops, %struct.cfg80211_ops* %3, i32 0, i32 92
  %4 = load void (%struct.wiphy*, %struct.wireless_dev*)*, void (%struct.wiphy*, %struct.wireless_dev*)** %stop_nan, align 8
  %5 = load %struct.cfg80211_registered_device*, %struct.cfg80211_registered_device** %rdev.addr, align 8
  %wiphy1 = getelementptr inbounds %struct.cfg80211_registered_device, %struct.cfg80211_registered_device* %5, i32 0, i32 42
  %6 = load %struct.wireless_dev*, %struct.wireless_dev** %wdev.addr, align 8
  call void %4(%struct.wiphy* %wiphy1, %struct.wireless_dev* %6)
  %7 = load %struct.cfg80211_registered_device*, %struct.cfg80211_registered_device** %rdev.addr, align 8
  %wiphy2 = getelementptr inbounds %struct.cfg80211_registered_device, %struct.cfg80211_registered_device* %7, i32 0, i32 42
  call void @trace_rdev_return_void(%struct.wiphy* %wiphy2)
  ret void
}

; Function Attrs: noinline nounwind optnone uwtable
define void @cfg80211_shutdown_all_interfaces(%struct.wiphy* %wiphy) #0 {
entry:
  %wiphy.addr = alloca %struct.wiphy*, align 8
  %rdev = alloca %struct.cfg80211_registered_device*, align 8
  %wdev = alloca %struct.wireless_dev*, align 8
  %__mptr = alloca %struct.list_head*, align 8
  %tmp = alloca %struct.wireless_dev*, align 8
  %__mptr16 = alloca %struct.list_head*, align 8
  %tmp19 = alloca %struct.wireless_dev*, align 8
  store %struct.wiphy* %wiphy, %struct.wiphy** %wiphy.addr, align 8
  %0 = load %struct.wiphy*, %struct.wiphy** %wiphy.addr, align 8
  %call = call %struct.cfg80211_registered_device* @wiphy_to_rdev(%struct.wiphy* %0)
  store %struct.cfg80211_registered_device* %call, %struct.cfg80211_registered_device** %rdev, align 8
  br label %do.body

do.body:                                          ; preds = %entry
  %call1 = call i32 @rtnl_is_locked()
  %tobool = icmp ne i32 %call1, 0
  %lnot = xor i1 %tobool, true
  %lnot2 = xor i1 %lnot, true
  %lnot3 = xor i1 %lnot2, true
  %lnot.ext = zext i1 %lnot3 to i32
  %conv = sext i32 %lnot.ext to i64
  %tobool4 = icmp ne i64 %conv, 0
  br i1 %tobool4, label %if.then, label %if.end

if.then:                                          ; preds = %do.body
  %call5 = call i32 (i8*, ...) @printk(i8* getelementptr inbounds ([37 x i8], [37 x i8]* @.str, i32 0, i32 0), i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.1, i32 0, i32 0), i32 250)
  call void @dump_stack()
  br label %if.end

if.end:                                           ; preds = %if.then, %do.body
  br label %do.end

do.end:                                           ; preds = %if.end
  %1 = load %struct.cfg80211_registered_device*, %struct.cfg80211_registered_device** %rdev, align 8
  %wiphy6 = getelementptr inbounds %struct.cfg80211_registered_device, %struct.cfg80211_registered_device* %1, i32 0, i32 42
  %wdev_list = getelementptr inbounds %struct.wiphy, %struct.wiphy* %wiphy6, i32 0, i32 55
  %next = getelementptr inbounds %struct.list_head, %struct.list_head* %wdev_list, i32 0, i32 0
  %2 = load %struct.list_head*, %struct.list_head** %next, align 8
  store %struct.list_head* %2, %struct.list_head** %__mptr, align 8
  %3 = load %struct.list_head*, %struct.list_head** %__mptr, align 8
  %4 = bitcast %struct.list_head* %3 to i8*
  %add.ptr = getelementptr inbounds i8, i8* %4, i64 -16
  %5 = bitcast i8* %add.ptr to %struct.wireless_dev*
  store %struct.wireless_dev* %5, %struct.wireless_dev** %tmp, align 8
  %6 = load %struct.wireless_dev*, %struct.wireless_dev** %tmp, align 8
  store %struct.wireless_dev* %6, %struct.wireless_dev** %wdev, align 8
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %do.end
  %7 = load %struct.wireless_dev*, %struct.wireless_dev** %wdev, align 8
  %list = getelementptr inbounds %struct.wireless_dev, %struct.wireless_dev* %7, i32 0, i32 2
  %8 = load %struct.cfg80211_registered_device*, %struct.cfg80211_registered_device** %rdev, align 8
  %wiphy7 = getelementptr inbounds %struct.cfg80211_registered_device, %struct.cfg80211_registered_device* %8, i32 0, i32 42
  %wdev_list8 = getelementptr inbounds %struct.wiphy, %struct.wiphy* %wiphy7, i32 0, i32 55
  %cmp = icmp ne %struct.list_head* %list, %wdev_list8
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %9 = load %struct.wireless_dev*, %struct.wireless_dev** %wdev, align 8
  %netdev = getelementptr inbounds %struct.wireless_dev, %struct.wireless_dev* %9, i32 0, i32 3
  %10 = load %struct.net_device*, %struct.net_device** %netdev, align 8
  %tobool10 = icmp ne %struct.net_device* %10, null
  br i1 %tobool10, label %if.then11, label %if.end14

if.then11:                                        ; preds = %for.body
  %11 = load %struct.wireless_dev*, %struct.wireless_dev** %wdev, align 8
  %netdev12 = getelementptr inbounds %struct.wireless_dev, %struct.wireless_dev* %11, i32 0, i32 3
  %12 = load %struct.net_device*, %struct.net_device** %netdev12, align 8
  %call13 = call i32 @dev_close(%struct.net_device* %12)
  br label %for.inc

if.end14:                                         ; preds = %for.body
  %13 = load %struct.wireless_dev*, %struct.wireless_dev** %wdev, align 8
  %iftype = getelementptr inbounds %struct.wireless_dev, %struct.wireless_dev* %13, i32 0, i32 1
  %14 = load i32, i32* %iftype, align 8
  br label %NodeBlock

NodeBlock:                                        ; preds = %if.end14
  %Pivot = icmp slt i32 %14, 12
  br i1 %Pivot, label %LeafBlock, label %LeafBlock1

LeafBlock1:                                       ; preds = %NodeBlock
  %SwitchLeaf2 = icmp eq i32 %14, 12
  br i1 %SwitchLeaf2, label %sw.bb15, label %NewDefault

LeafBlock:                                        ; preds = %NodeBlock
  %SwitchLeaf = icmp eq i32 %14, 10
  br i1 %SwitchLeaf, label %sw.bb, label %NewDefault

sw.bb:                                            ; preds = %LeafBlock
  %15 = load %struct.cfg80211_registered_device*, %struct.cfg80211_registered_device** %rdev, align 8
  %16 = load %struct.wireless_dev*, %struct.wireless_dev** %wdev, align 8
  call void @cfg80211_stop_p2p_device(%struct.cfg80211_registered_device* %15, %struct.wireless_dev* %16)
  br label %sw.epilog

sw.bb15:                                          ; preds = %LeafBlock1
  %17 = load %struct.cfg80211_registered_device*, %struct.cfg80211_registered_device** %rdev, align 8
  %18 = load %struct.wireless_dev*, %struct.wireless_dev** %wdev, align 8
  call void @cfg80211_stop_nan(%struct.cfg80211_registered_device* %17, %struct.wireless_dev* %18)
  br label %sw.epilog

NewDefault:                                       ; preds = %LeafBlock1, %LeafBlock
  br label %sw.default

sw.default:                                       ; preds = %NewDefault
  br label %sw.epilog

sw.epilog:                                        ; preds = %sw.default, %sw.bb15, %sw.bb
  br label %for.inc

for.inc:                                          ; preds = %sw.epilog, %if.then11
  %19 = load %struct.wireless_dev*, %struct.wireless_dev** %wdev, align 8
  %list17 = getelementptr inbounds %struct.wireless_dev, %struct.wireless_dev* %19, i32 0, i32 2
  %next18 = getelementptr inbounds %struct.list_head, %struct.list_head* %list17, i32 0, i32 0
  %20 = load %struct.list_head*, %struct.list_head** %next18, align 8
  store %struct.list_head* %20, %struct.list_head** %__mptr16, align 8
  %21 = load %struct.list_head*, %struct.list_head** %__mptr16, align 8
  %22 = bitcast %struct.list_head* %21 to i8*
  %add.ptr20 = getelementptr inbounds i8, i8* %22, i64 -16
  %23 = bitcast i8* %add.ptr20 to %struct.wireless_dev*
  store %struct.wireless_dev* %23, %struct.wireless_dev** %tmp19, align 8
  %24 = load %struct.wireless_dev*, %struct.wireless_dev** %tmp19, align 8
  store %struct.wireless_dev* %24, %struct.wireless_dev** %wdev, align 8
  br label %for.cond

for.end:                                          ; preds = %for.cond
  ret void
}

declare i32 @dev_close(%struct.net_device*) #1

; Function Attrs: noinline nounwind optnone uwtable
define void @cfg80211_destroy_ifaces(%struct.cfg80211_registered_device* %rdev) #0 {
entry:
  %lock.addr.i42 = alloca %struct.spinlock*, align 8
  %lock.addr.i40 = alloca %struct.spinlock*, align 8
  %lock.addr.i38 = alloca %struct.spinlock*, align 8
  %p.addr.i = alloca i8*, align 8
  %res.addr.i = alloca i8*, align 8
  %size.addr.i = alloca i32, align 4
  %lock.addr.i = alloca %struct.spinlock*, align 8
  %rdev.addr = alloca %struct.cfg80211_registered_device*, align 8
  %item = alloca %struct.cfg80211_iface_destroy*, align 8
  %head__ = alloca %struct.list_head*, align 8
  %pos__ = alloca %struct.list_head*, align 8
  %__u = alloca %union.anon.80, align 8
  %tmp = alloca %struct.list_head*, align 8
  %tmp5 = alloca %struct.cfg80211_iface_destroy*, align 8
  %__mptr = alloca %struct.list_head*, align 8
  %tmp7 = alloca %struct.cfg80211_iface_destroy*, align 8
  %wdev = alloca %struct.wireless_dev*, align 8
  %tmp9 = alloca %struct.wireless_dev*, align 8
  %nlportid = alloca i32, align 4
  %__mptr12 = alloca %struct.list_head*, align 8
  %tmp14 = alloca %struct.wireless_dev*, align 8
  %__mptr16 = alloca %struct.list_head*, align 8
  %tmp19 = alloca %struct.wireless_dev*, align 8
  %__mptr31 = alloca %struct.list_head*, align 8
  %tmp34 = alloca %struct.wireless_dev*, align 8
  store %struct.cfg80211_registered_device* %rdev, %struct.cfg80211_registered_device** %rdev.addr, align 8
  br label %do.body

do.body:                                          ; preds = %entry
  %call = call i32 @rtnl_is_locked()
  %tobool = icmp ne i32 %call, 0
  %lnot = xor i1 %tobool, true
  %lnot1 = xor i1 %lnot, true
  %lnot2 = xor i1 %lnot1, true
  %lnot.ext = zext i1 %lnot2 to i32
  %conv = sext i32 %lnot.ext to i64
  %tobool3 = icmp ne i64 %conv, 0
  br i1 %tobool3, label %if.then, label %if.end

if.then:                                          ; preds = %do.body
  %call4 = call i32 (i8*, ...) @printk(i8* getelementptr inbounds ([37 x i8], [37 x i8]* @.str, i32 0, i32 0), i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.1, i32 0, i32 0), i32 310)
  call void @dump_stack()
  br label %if.end

if.end:                                           ; preds = %if.then, %do.body
  br label %do.end

do.end:                                           ; preds = %if.end
  %0 = load %struct.cfg80211_registered_device*, %struct.cfg80211_registered_device** %rdev.addr, align 8
  %destroy_list_lock = getelementptr inbounds %struct.cfg80211_registered_device, %struct.cfg80211_registered_device* %0, i32 0, i32 37
  store %struct.spinlock* %destroy_list_lock, %struct.spinlock** %lock.addr.i, align 8
  %1 = load %struct.spinlock*, %struct.spinlock** %lock.addr.i, align 8
  %2 = getelementptr inbounds %struct.spinlock, %struct.spinlock* %1, i32 0, i32 0
  %rlock.i = bitcast %union.anon.1* %2 to %struct.raw_spinlock*
  call void @_raw_spin_lock_irq(%struct.raw_spinlock* %rlock.i) #3
  br label %while.cond

while.cond:                                       ; preds = %for.end, %do.end
  %3 = load %struct.cfg80211_registered_device*, %struct.cfg80211_registered_device** %rdev.addr, align 8
  %destroy_list = getelementptr inbounds %struct.cfg80211_registered_device, %struct.cfg80211_registered_device* %3, i32 0, i32 38
  store %struct.list_head* %destroy_list, %struct.list_head** %head__, align 8
  %4 = load %struct.list_head*, %struct.list_head** %head__, align 8
  %next = getelementptr inbounds %struct.list_head, %struct.list_head* %4, i32 0, i32 0
  %5 = bitcast %struct.list_head** %next to i8*
  %__c = bitcast %union.anon.80* %__u to [1 x i8]*
  %arraydecay = getelementptr inbounds [1 x i8], [1 x i8]* %__c, i32 0, i32 0
  store i8* %5, i8** %p.addr.i, align 8
  store i8* %arraydecay, i8** %res.addr.i, align 8
  store i32 8, i32* %size.addr.i, align 4
  %6 = load i32, i32* %size.addr.i, align 4
  br label %NodeBlock9

NodeBlock9:                                       ; preds = %while.cond
  %Pivot10 = icmp slt i32 %6, 4
  br i1 %Pivot10, label %NodeBlock, label %NodeBlock7

NodeBlock7:                                       ; preds = %NodeBlock9
  %Pivot8 = icmp slt i32 %6, 8
  br i1 %Pivot8, label %LeafBlock3, label %LeafBlock5

LeafBlock5:                                       ; preds = %NodeBlock7
  %SwitchLeaf6 = icmp eq i32 %6, 8
  br i1 %SwitchLeaf6, label %sw.bb3.i, label %NewDefault

LeafBlock3:                                       ; preds = %NodeBlock7
  %SwitchLeaf4 = icmp eq i32 %6, 4
  br i1 %SwitchLeaf4, label %sw.bb2.i, label %NewDefault

NodeBlock:                                        ; preds = %NodeBlock9
  %Pivot = icmp slt i32 %6, 2
  br i1 %Pivot, label %LeafBlock, label %LeafBlock1

LeafBlock1:                                       ; preds = %NodeBlock
  %SwitchLeaf2 = icmp eq i32 %6, 2
  br i1 %SwitchLeaf2, label %sw.bb1.i, label %NewDefault

LeafBlock:                                        ; preds = %NodeBlock
  %SwitchLeaf = icmp eq i32 %6, 1
  br i1 %SwitchLeaf, label %sw.bb.i, label %NewDefault

sw.bb.i:                                          ; preds = %LeafBlock
  %7 = load i8*, i8** %p.addr.i, align 8
  %8 = load volatile i8, i8* %7, align 1
  %9 = load i8*, i8** %res.addr.i, align 8
  store i8 %8, i8* %9, align 1
  br label %__read_once_size.exit

sw.bb1.i:                                         ; preds = %LeafBlock1
  %10 = load i8*, i8** %p.addr.i, align 8
  %11 = bitcast i8* %10 to i16*
  %12 = load volatile i16, i16* %11, align 2
  %13 = load i8*, i8** %res.addr.i, align 8
  %14 = bitcast i8* %13 to i16*
  store i16 %12, i16* %14, align 2
  br label %__read_once_size.exit

sw.bb2.i:                                         ; preds = %LeafBlock3
  %15 = load i8*, i8** %p.addr.i, align 8
  %16 = bitcast i8* %15 to i32*
  %17 = load volatile i32, i32* %16, align 4
  %18 = load i8*, i8** %res.addr.i, align 8
  %19 = bitcast i8* %18 to i32*
  store i32 %17, i32* %19, align 4
  br label %__read_once_size.exit

sw.bb3.i:                                         ; preds = %LeafBlock5
  %20 = load i8*, i8** %p.addr.i, align 8
  %21 = bitcast i8* %20 to i64*
  %22 = load volatile i64, i64* %21, align 8
  %23 = load i8*, i8** %res.addr.i, align 8
  %24 = bitcast i8* %23 to i64*
  store i64 %22, i64* %24, align 8
  br label %__read_once_size.exit

NewDefault:                                       ; preds = %LeafBlock5, %LeafBlock3, %LeafBlock1, %LeafBlock
  br label %sw.default.i

sw.default.i:                                     ; preds = %NewDefault
  call void asm sideeffect "", "~{memory},~{dirflag},~{fpsr},~{flags}"() #3, !srcloc !3
  %25 = load i8*, i8** %res.addr.i, align 8
  %26 = load i8*, i8** %p.addr.i, align 8
  %27 = load i32, i32* %size.addr.i, align 4
  %conv.i = sext i32 %27 to i64
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %25, i8* %26, i64 %conv.i, i32 1, i1 false) #3
  call void asm sideeffect "", "~{memory},~{dirflag},~{fpsr},~{flags}"() #3, !srcloc !4
  br label %__read_once_size.exit

__read_once_size.exit:                            ; preds = %sw.default.i, %sw.bb3.i, %sw.bb2.i, %sw.bb1.i, %sw.bb.i
  %__val = bitcast %union.anon.80* %__u to %struct.list_head**
  %28 = load %struct.list_head*, %struct.list_head** %__val, align 8
  store %struct.list_head* %28, %struct.list_head** %tmp, align 8
  %29 = load %struct.list_head*, %struct.list_head** %tmp, align 8
  store %struct.list_head* %29, %struct.list_head** %pos__, align 8
  %30 = load %struct.list_head*, %struct.list_head** %pos__, align 8
  %31 = load %struct.list_head*, %struct.list_head** %head__, align 8
  %cmp = icmp ne %struct.list_head* %30, %31
  br i1 %cmp, label %cond.true, label %cond.false

cond.true:                                        ; preds = %__read_once_size.exit
  %32 = load %struct.list_head*, %struct.list_head** %pos__, align 8
  store %struct.list_head* %32, %struct.list_head** %__mptr, align 8
  %33 = load %struct.list_head*, %struct.list_head** %__mptr, align 8
  %34 = bitcast %struct.list_head* %33 to i8*
  %add.ptr = getelementptr inbounds i8, i8* %34, i64 0
  %35 = bitcast i8* %add.ptr to %struct.cfg80211_iface_destroy*
  store %struct.cfg80211_iface_destroy* %35, %struct.cfg80211_iface_destroy** %tmp7, align 8
  %36 = load %struct.cfg80211_iface_destroy*, %struct.cfg80211_iface_destroy** %tmp7, align 8
  br label %cond.end

cond.false:                                       ; preds = %__read_once_size.exit
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.cfg80211_iface_destroy* [ %36, %cond.true ], [ null, %cond.false ]
  store %struct.cfg80211_iface_destroy* %cond, %struct.cfg80211_iface_destroy** %tmp5, align 8
  %37 = load %struct.cfg80211_iface_destroy*, %struct.cfg80211_iface_destroy** %tmp5, align 8
  store %struct.cfg80211_iface_destroy* %37, %struct.cfg80211_iface_destroy** %item, align 8
  %tobool8 = icmp ne %struct.cfg80211_iface_destroy* %37, null
  br i1 %tobool8, label %while.body, label %while.end

while.body:                                       ; preds = %cond.end
  %38 = load %struct.cfg80211_iface_destroy*, %struct.cfg80211_iface_destroy** %item, align 8
  %nlportid10 = getelementptr inbounds %struct.cfg80211_iface_destroy, %struct.cfg80211_iface_destroy* %38, i32 0, i32 1
  %39 = load i32, i32* %nlportid10, align 8
  store i32 %39, i32* %nlportid, align 4
  %40 = load %struct.cfg80211_iface_destroy*, %struct.cfg80211_iface_destroy** %item, align 8
  %list = getelementptr inbounds %struct.cfg80211_iface_destroy, %struct.cfg80211_iface_destroy* %40, i32 0, i32 0
  call void @list_del(%struct.list_head* %list)
  %41 = load %struct.cfg80211_iface_destroy*, %struct.cfg80211_iface_destroy** %item, align 8
  %42 = bitcast %struct.cfg80211_iface_destroy* %41 to i8*
  call void @kfree(i8* %42)
  %43 = load %struct.cfg80211_registered_device*, %struct.cfg80211_registered_device** %rdev.addr, align 8
  %destroy_list_lock11 = getelementptr inbounds %struct.cfg80211_registered_device, %struct.cfg80211_registered_device* %43, i32 0, i32 37
  store %struct.spinlock* %destroy_list_lock11, %struct.spinlock** %lock.addr.i38, align 8
  %44 = load %struct.spinlock*, %struct.spinlock** %lock.addr.i38, align 8
  %45 = getelementptr inbounds %struct.spinlock, %struct.spinlock* %44, i32 0, i32 0
  %rlock.i39 = bitcast %union.anon.1* %45 to %struct.raw_spinlock*
  call void @__raw_spin_unlock_irq(%struct.raw_spinlock* %rlock.i39) #3
  %46 = load %struct.cfg80211_registered_device*, %struct.cfg80211_registered_device** %rdev.addr, align 8
  %wiphy = getelementptr inbounds %struct.cfg80211_registered_device, %struct.cfg80211_registered_device* %46, i32 0, i32 42
  %wdev_list = getelementptr inbounds %struct.wiphy, %struct.wiphy* %wiphy, i32 0, i32 55
  %next13 = getelementptr inbounds %struct.list_head, %struct.list_head* %wdev_list, i32 0, i32 0
  %47 = load %struct.list_head*, %struct.list_head** %next13, align 8
  store %struct.list_head* %47, %struct.list_head** %__mptr12, align 8
  %48 = load %struct.list_head*, %struct.list_head** %__mptr12, align 8
  %49 = bitcast %struct.list_head* %48 to i8*
  %add.ptr15 = getelementptr inbounds i8, i8* %49, i64 -16
  %50 = bitcast i8* %add.ptr15 to %struct.wireless_dev*
  store %struct.wireless_dev* %50, %struct.wireless_dev** %tmp14, align 8
  %51 = load %struct.wireless_dev*, %struct.wireless_dev** %tmp14, align 8
  store %struct.wireless_dev* %51, %struct.wireless_dev** %wdev, align 8
  %52 = load %struct.wireless_dev*, %struct.wireless_dev** %wdev, align 8
  %list17 = getelementptr inbounds %struct.wireless_dev, %struct.wireless_dev* %52, i32 0, i32 2
  %next18 = getelementptr inbounds %struct.list_head, %struct.list_head* %list17, i32 0, i32 0
  %53 = load %struct.list_head*, %struct.list_head** %next18, align 8
  store %struct.list_head* %53, %struct.list_head** %__mptr16, align 8
  %54 = load %struct.list_head*, %struct.list_head** %__mptr16, align 8
  %55 = bitcast %struct.list_head* %54 to i8*
  %add.ptr20 = getelementptr inbounds i8, i8* %55, i64 -16
  %56 = bitcast i8* %add.ptr20 to %struct.wireless_dev*
  store %struct.wireless_dev* %56, %struct.wireless_dev** %tmp19, align 8
  %57 = load %struct.wireless_dev*, %struct.wireless_dev** %tmp19, align 8
  store %struct.wireless_dev* %57, %struct.wireless_dev** %tmp9, align 8
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %while.body
  %58 = load %struct.wireless_dev*, %struct.wireless_dev** %wdev, align 8
  %list21 = getelementptr inbounds %struct.wireless_dev, %struct.wireless_dev* %58, i32 0, i32 2
  %59 = load %struct.cfg80211_registered_device*, %struct.cfg80211_registered_device** %rdev.addr, align 8
  %wiphy22 = getelementptr inbounds %struct.cfg80211_registered_device, %struct.cfg80211_registered_device* %59, i32 0, i32 42
  %wdev_list23 = getelementptr inbounds %struct.wiphy, %struct.wiphy* %wiphy22, i32 0, i32 55
  %cmp24 = icmp ne %struct.list_head* %list21, %wdev_list23
  br i1 %cmp24, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %60 = load i32, i32* %nlportid, align 4
  %61 = load %struct.wireless_dev*, %struct.wireless_dev** %wdev, align 8
  %owner_nlportid = getelementptr inbounds %struct.wireless_dev, %struct.wireless_dev* %61, i32 0, i32 35
  %62 = load i32, i32* %owner_nlportid, align 4
  %cmp26 = icmp eq i32 %60, %62
  br i1 %cmp26, label %if.then28, label %if.end30

if.then28:                                        ; preds = %for.body
  %63 = load %struct.cfg80211_registered_device*, %struct.cfg80211_registered_device** %rdev.addr, align 8
  %64 = load %struct.wireless_dev*, %struct.wireless_dev** %wdev, align 8
  %call29 = call i32 @rdev_del_virtual_intf(%struct.cfg80211_registered_device* %63, %struct.wireless_dev* %64)
  br label %if.end30

if.end30:                                         ; preds = %if.then28, %for.body
  br label %for.inc

for.inc:                                          ; preds = %if.end30
  %65 = load %struct.wireless_dev*, %struct.wireless_dev** %tmp9, align 8
  store %struct.wireless_dev* %65, %struct.wireless_dev** %wdev, align 8
  %66 = load %struct.wireless_dev*, %struct.wireless_dev** %tmp9, align 8
  %list32 = getelementptr inbounds %struct.wireless_dev, %struct.wireless_dev* %66, i32 0, i32 2
  %next33 = getelementptr inbounds %struct.list_head, %struct.list_head* %list32, i32 0, i32 0
  %67 = load %struct.list_head*, %struct.list_head** %next33, align 8
  store %struct.list_head* %67, %struct.list_head** %__mptr31, align 8
  %68 = load %struct.list_head*, %struct.list_head** %__mptr31, align 8
  %69 = bitcast %struct.list_head* %68 to i8*
  %add.ptr35 = getelementptr inbounds i8, i8* %69, i64 -16
  %70 = bitcast i8* %add.ptr35 to %struct.wireless_dev*
  store %struct.wireless_dev* %70, %struct.wireless_dev** %tmp34, align 8
  %71 = load %struct.wireless_dev*, %struct.wireless_dev** %tmp34, align 8
  store %struct.wireless_dev* %71, %struct.wireless_dev** %tmp9, align 8
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %72 = load %struct.cfg80211_registered_device*, %struct.cfg80211_registered_device** %rdev.addr, align 8
  %destroy_list_lock36 = getelementptr inbounds %struct.cfg80211_registered_device, %struct.cfg80211_registered_device* %72, i32 0, i32 37
  store %struct.spinlock* %destroy_list_lock36, %struct.spinlock** %lock.addr.i40, align 8
  %73 = load %struct.spinlock*, %struct.spinlock** %lock.addr.i40, align 8
  %74 = getelementptr inbounds %struct.spinlock, %struct.spinlock* %73, i32 0, i32 0
  %rlock.i41 = bitcast %union.anon.1* %74 to %struct.raw_spinlock*
  call void @_raw_spin_lock_irq(%struct.raw_spinlock* %rlock.i41) #3
  br label %while.cond

while.end:                                        ; preds = %cond.end
  %75 = load %struct.cfg80211_registered_device*, %struct.cfg80211_registered_device** %rdev.addr, align 8
  %destroy_list_lock37 = getelementptr inbounds %struct.cfg80211_registered_device, %struct.cfg80211_registered_device* %75, i32 0, i32 37
  store %struct.spinlock* %destroy_list_lock37, %struct.spinlock** %lock.addr.i42, align 8
  %76 = load %struct.spinlock*, %struct.spinlock** %lock.addr.i42, align 8
  %77 = getelementptr inbounds %struct.spinlock, %struct.spinlock* %76, i32 0, i32 0
  %rlock.i43 = bitcast %union.anon.1* %77 to %struct.raw_spinlock*
  call void @__raw_spin_unlock_irq(%struct.raw_spinlock* %rlock.i43) #3
  ret void
}

; Function Attrs: noinline nounwind optnone uwtable
define internal void @list_del(%struct.list_head* %entry1) #0 {
entry:
  %entry.addr = alloca %struct.list_head*, align 8
  store %struct.list_head* %entry1, %struct.list_head** %entry.addr, align 8
  %0 = load %struct.list_head*, %struct.list_head** %entry.addr, align 8
  call void @__list_del_entry(%struct.list_head* %0)
  %1 = load %struct.list_head*, %struct.list_head** %entry.addr, align 8
  %next = getelementptr inbounds %struct.list_head, %struct.list_head* %1, i32 0, i32 0
  store %struct.list_head* bitcast (i8* getelementptr (i8, i8* inttoptr (i64 256 to i8*), i64 -2401263026318606336) to %struct.list_head*), %struct.list_head** %next, align 8
  %2 = load %struct.list_head*, %struct.list_head** %entry.addr, align 8
  %prev = getelementptr inbounds %struct.list_head, %struct.list_head* %2, i32 0, i32 1
  store %struct.list_head* bitcast (i8* getelementptr (i8, i8* inttoptr (i64 512 to i8*), i64 -2401263026318606336) to %struct.list_head*), %struct.list_head** %prev, align 8
  ret void
}

declare void @kfree(i8*) #1

; Function Attrs: noinline nounwind optnone uwtable
define internal i32 @rdev_del_virtual_intf(%struct.cfg80211_registered_device* %rdev, %struct.wireless_dev* %wdev) #0 {
entry:
  %rdev.addr = alloca %struct.cfg80211_registered_device*, align 8
  %wdev.addr = alloca %struct.wireless_dev*, align 8
  %ret = alloca i32, align 4
  store %struct.cfg80211_registered_device* %rdev, %struct.cfg80211_registered_device** %rdev.addr, align 8
  store %struct.wireless_dev* %wdev, %struct.wireless_dev** %wdev.addr, align 8
  %0 = load %struct.cfg80211_registered_device*, %struct.cfg80211_registered_device** %rdev.addr, align 8
  %wiphy = getelementptr inbounds %struct.cfg80211_registered_device, %struct.cfg80211_registered_device* %0, i32 0, i32 42
  %1 = load %struct.wireless_dev*, %struct.wireless_dev** %wdev.addr, align 8
  call void @trace_rdev_del_virtual_intf(%struct.wiphy* %wiphy, %struct.wireless_dev* %1)
  %2 = load %struct.cfg80211_registered_device*, %struct.cfg80211_registered_device** %rdev.addr, align 8
  %ops = getelementptr inbounds %struct.cfg80211_registered_device, %struct.cfg80211_registered_device* %2, i32 0, i32 0
  %3 = load %struct.cfg80211_ops*, %struct.cfg80211_ops** %ops, align 32
  %del_virtual_intf = getelementptr inbounds %struct.cfg80211_ops, %struct.cfg80211_ops* %3, i32 0, i32 4
  %4 = load i32 (%struct.wiphy*, %struct.wireless_dev*)*, i32 (%struct.wiphy*, %struct.wireless_dev*)** %del_virtual_intf, align 8
  %5 = load %struct.cfg80211_registered_device*, %struct.cfg80211_registered_device** %rdev.addr, align 8
  %wiphy1 = getelementptr inbounds %struct.cfg80211_registered_device, %struct.cfg80211_registered_device* %5, i32 0, i32 42
  %6 = load %struct.wireless_dev*, %struct.wireless_dev** %wdev.addr, align 8
  %call = call i32 %4(%struct.wiphy* %wiphy1, %struct.wireless_dev* %6)
  store i32 %call, i32* %ret, align 4
  %7 = load %struct.cfg80211_registered_device*, %struct.cfg80211_registered_device** %rdev.addr, align 8
  %wiphy2 = getelementptr inbounds %struct.cfg80211_registered_device, %struct.cfg80211_registered_device* %7, i32 0, i32 42
  %8 = load i32, i32* %ret, align 4
  call void @trace_rdev_return_int(%struct.wiphy* %wiphy2, i32 %8)
  %9 = load i32, i32* %ret, align 4
  ret i32 %9
}

; Function Attrs: noinline nounwind optnone uwtable
define %struct.wiphy* @wiphy_new_nm(%struct.cfg80211_ops* %ops, i32 %sizeof_priv, i8* %requested_name) #0 {
entry:
  %lock.addr.i641 = alloca %struct.spinlock*, align 8
  %lock.addr.i639 = alloca %struct.spinlock*, align 8
  %lock.addr.i637 = alloca %struct.spinlock*, align 8
  %lock.addr.i = alloca %struct.spinlock*, align 8
  %v.addr.i635 = alloca %struct.atomic_t*, align 8
  %i.addr.i = alloca i32, align 4
  %v.addr.i = alloca %struct.atomic_t*, align 8
  %__ret.i = alloca i32, align 4
  %tmp.i = alloca i32, align 4
  %retval = alloca %struct.wiphy*, align 8
  %ops.addr = alloca %struct.cfg80211_ops*, align 8
  %sizeof_priv.addr = alloca i32, align 4
  %requested_name.addr = alloca i8*, align 8
  %rdev = alloca %struct.cfg80211_registered_device*, align 8
  %alloc_size = alloca i32, align 4
  %__ret_warn_on = alloca i32, align 4
  %tmp = alloca i64, align 8
  %__ret_warn_on17 = alloca i32, align 4
  %tmp41 = alloca i64, align 8
  %__ret_warn_on48 = alloca i32, align 4
  %tmp68 = alloca i64, align 8
  %__ret_warn_on75 = alloca i32, align 4
  %tmp95 = alloca i64, align 8
  %__ret_warn_on102 = alloca i32, align 4
  %tmp122 = alloca i64, align 8
  %__ret_warn_on129 = alloca i32, align 4
  %tmp149 = alloca i64, align 8
  %__ret_warn_on156 = alloca i32, align 4
  %tmp176 = alloca i64, align 8
  %__ret_warn_on183 = alloca i32, align 4
  %tmp203 = alloca i64, align 8
  %__ret_warn_on210 = alloca i32, align 4
  %tmp230 = alloca i64, align 8
  %__ret_warn_on237 = alloca i32, align 4
  %tmp257 = alloca i64, align 8
  %__ret_warn_on264 = alloca i32, align 4
  %tmp284 = alloca i64, align 8
  %__ret_warn_on291 = alloca i32, align 4
  %tmp311 = alloca i64, align 8
  %__ret_warn_on318 = alloca i32, align 4
  %tmp338 = alloca i64, align 8
  %__ret_warn_on345 = alloca i32, align 4
  %tmp365 = alloca i64, align 8
  %__ret_warn_on372 = alloca i32, align 4
  %tmp392 = alloca i64, align 8
  %__ret_warn_on399 = alloca i32, align 4
  %tmp419 = alloca i64, align 8
  %rv = alloca i32, align 4
  %.compoundliteral = alloca %struct.raw_spinlock, align 4
  %.compoundliteral473 = alloca %struct.raw_spinlock, align 4
  %.compoundliteral481 = alloca %struct.atomic64_t, align 8
  %.compoundliteral490 = alloca %struct.atomic64_t, align 8
  %.compoundliteral502 = alloca %struct.raw_spinlock, align 4
  %.compoundliteral511 = alloca %struct.atomic64_t, align 8
  %.compoundliteral523 = alloca %struct.atomic64_t, align 8
  %.compoundliteral555 = alloca %struct.raw_spinlock, align 4
  %.compoundliteral564 = alloca %struct.atomic64_t, align 8
  %.compoundliteral574 = alloca %struct.atomic64_t, align 8
  %.compoundliteral597 = alloca %struct.atomic64_t, align 8
  %.compoundliteral607 = alloca %struct.atomic64_t, align 8
  %.compoundliteral617 = alloca %struct.atomic64_t, align 8
  store %struct.cfg80211_ops* %ops, %struct.cfg80211_ops** %ops.addr, align 8
  store i32 %sizeof_priv, i32* %sizeof_priv.addr, align 4
  store i8* %requested_name, i8** %requested_name.addr, align 8
  %0 = load %struct.cfg80211_ops*, %struct.cfg80211_ops** %ops.addr, align 8
  %add_key = getelementptr inbounds %struct.cfg80211_ops, %struct.cfg80211_ops* %0, i32 0, i32 6
  %1 = load i32 (%struct.wiphy*, %struct.net_device*, i8, i1, i8*, %struct.key_params*)*, i32 (%struct.wiphy*, %struct.net_device*, i8, i1, i8*, %struct.key_params*)** %add_key, align 8
  %tobool = icmp ne i32 (%struct.wiphy*, %struct.net_device*, i8, i1, i8*, %struct.key_params*)* %1, null
  br i1 %tobool, label %land.rhs, label %land.end

land.rhs:                                         ; preds = %entry
  %2 = load %struct.cfg80211_ops*, %struct.cfg80211_ops** %ops.addr, align 8
  %del_key = getelementptr inbounds %struct.cfg80211_ops, %struct.cfg80211_ops* %2, i32 0, i32 8
  %3 = load i32 (%struct.wiphy*, %struct.net_device*, i8, i1, i8*)*, i32 (%struct.wiphy*, %struct.net_device*, i8, i1, i8*)** %del_key, align 8
  %tobool1 = icmp ne i32 (%struct.wiphy*, %struct.net_device*, i8, i1, i8*)* %3, null
  br i1 %tobool1, label %lor.rhs, label %lor.end

lor.rhs:                                          ; preds = %land.rhs
  %4 = load %struct.cfg80211_ops*, %struct.cfg80211_ops** %ops.addr, align 8
  %set_default_key = getelementptr inbounds %struct.cfg80211_ops, %struct.cfg80211_ops* %4, i32 0, i32 9
  %5 = load i32 (%struct.wiphy*, %struct.net_device*, i8, i1, i1)*, i32 (%struct.wiphy*, %struct.net_device*, i8, i1, i1)** %set_default_key, align 8
  %tobool2 = icmp ne i32 (%struct.wiphy*, %struct.net_device*, i8, i1, i1)* %5, null
  %lnot = xor i1 %tobool2, true
  br label %lor.end

lor.end:                                          ; preds = %lor.rhs, %land.rhs
  %6 = phi i1 [ true, %land.rhs ], [ %lnot, %lor.rhs ]
  br label %land.end

land.end:                                         ; preds = %lor.end, %entry
  %7 = phi i1 [ false, %entry ], [ %6, %lor.end ]
  %lnot3 = xor i1 %7, true
  %lnot4 = xor i1 %lnot3, true
  %lnot.ext = zext i1 %lnot4 to i32
  store i32 %lnot.ext, i32* %__ret_warn_on, align 4
  %8 = load i32, i32* %__ret_warn_on, align 4
  %tobool5 = icmp ne i32 %8, 0
  %lnot6 = xor i1 %tobool5, true
  %lnot8 = xor i1 %lnot6, true
  %lnot.ext9 = zext i1 %lnot8 to i32
  %conv = sext i32 %lnot.ext9 to i64
  %tobool10 = icmp ne i64 %conv, 0
  br i1 %tobool10, label %if.then, label %if.end

if.then:                                          ; preds = %land.end
  call void @warn_slowpath_null(i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.1, i32 0, i32 0), i32 370)
  br label %if.end

if.end:                                           ; preds = %if.then, %land.end
  %9 = load i32, i32* %__ret_warn_on, align 4
  %tobool11 = icmp ne i32 %9, 0
  %lnot12 = xor i1 %tobool11, true
  %lnot14 = xor i1 %lnot12, true
  %lnot.ext15 = zext i1 %lnot14 to i32
  %conv16 = sext i32 %lnot.ext15 to i64
  store i64 %conv16, i64* %tmp, align 8
  %10 = load i64, i64* %tmp, align 8
  %11 = load %struct.cfg80211_ops*, %struct.cfg80211_ops** %ops.addr, align 8
  %auth = getelementptr inbounds %struct.cfg80211_ops, %struct.cfg80211_ops* %11, i32 0, i32 38
  %12 = load i32 (%struct.wiphy*, %struct.net_device*, %struct.cfg80211_auth_request*)*, i32 (%struct.wiphy*, %struct.net_device*, %struct.cfg80211_auth_request*)** %auth, align 8
  %tobool18 = icmp ne i32 (%struct.wiphy*, %struct.net_device*, %struct.cfg80211_auth_request*)* %12, null
  br i1 %tobool18, label %land.rhs19, label %land.end27

land.rhs19:                                       ; preds = %if.end
  %13 = load %struct.cfg80211_ops*, %struct.cfg80211_ops** %ops.addr, align 8
  %assoc = getelementptr inbounds %struct.cfg80211_ops, %struct.cfg80211_ops* %13, i32 0, i32 39
  %14 = load i32 (%struct.wiphy*, %struct.net_device*, %struct.cfg80211_assoc_request*)*, i32 (%struct.wiphy*, %struct.net_device*, %struct.cfg80211_assoc_request*)** %assoc, align 8
  %tobool20 = icmp ne i32 (%struct.wiphy*, %struct.net_device*, %struct.cfg80211_assoc_request*)* %14, null
  br i1 %tobool20, label %lor.lhs.false, label %lor.end26

lor.lhs.false:                                    ; preds = %land.rhs19
  %15 = load %struct.cfg80211_ops*, %struct.cfg80211_ops** %ops.addr, align 8
  %deauth = getelementptr inbounds %struct.cfg80211_ops, %struct.cfg80211_ops* %15, i32 0, i32 40
  %16 = load i32 (%struct.wiphy*, %struct.net_device*, %struct.cfg80211_deauth_request*)*, i32 (%struct.wiphy*, %struct.net_device*, %struct.cfg80211_deauth_request*)** %deauth, align 8
  %tobool21 = icmp ne i32 (%struct.wiphy*, %struct.net_device*, %struct.cfg80211_deauth_request*)* %16, null
  br i1 %tobool21, label %lor.rhs22, label %lor.end26

lor.rhs22:                                        ; preds = %lor.lhs.false
  %17 = load %struct.cfg80211_ops*, %struct.cfg80211_ops** %ops.addr, align 8
  %disassoc = getelementptr inbounds %struct.cfg80211_ops, %struct.cfg80211_ops* %17, i32 0, i32 41
  %18 = load i32 (%struct.wiphy*, %struct.net_device*, %struct.cfg80211_disassoc_request*)*, i32 (%struct.wiphy*, %struct.net_device*, %struct.cfg80211_disassoc_request*)** %disassoc, align 8
  %tobool23 = icmp ne i32 (%struct.wiphy*, %struct.net_device*, %struct.cfg80211_disassoc_request*)* %18, null
  %lnot24 = xor i1 %tobool23, true
  br label %lor.end26

lor.end26:                                        ; preds = %lor.rhs22, %lor.lhs.false, %land.rhs19
  %19 = phi i1 [ true, %lor.lhs.false ], [ true, %land.rhs19 ], [ %lnot24, %lor.rhs22 ]
  br label %land.end27

land.end27:                                       ; preds = %lor.end26, %if.end
  %20 = phi i1 [ false, %if.end ], [ %19, %lor.end26 ]
  %lnot28 = xor i1 %20, true
  %lnot30 = xor i1 %lnot28, true
  %lnot.ext31 = zext i1 %lnot30 to i32
  store i32 %lnot.ext31, i32* %__ret_warn_on17, align 4
  %21 = load i32, i32* %__ret_warn_on17, align 4
  %tobool32 = icmp ne i32 %21, 0
  %lnot33 = xor i1 %tobool32, true
  %lnot35 = xor i1 %lnot33, true
  %lnot.ext36 = zext i1 %lnot35 to i32
  %conv37 = sext i32 %lnot.ext36 to i64
  %tobool38 = icmp ne i64 %conv37, 0
  br i1 %tobool38, label %if.then39, label %if.end40

if.then39:                                        ; preds = %land.end27
  call void @warn_slowpath_null(i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.1, i32 0, i32 0), i32 371)
  br label %if.end40

if.end40:                                         ; preds = %if.then39, %land.end27
  %22 = load i32, i32* %__ret_warn_on17, align 4
  %tobool42 = icmp ne i32 %22, 0
  %lnot43 = xor i1 %tobool42, true
  %lnot45 = xor i1 %lnot43, true
  %lnot.ext46 = zext i1 %lnot45 to i32
  %conv47 = sext i32 %lnot.ext46 to i64
  store i64 %conv47, i64* %tmp41, align 8
  %23 = load i64, i64* %tmp41, align 8
  %24 = load %struct.cfg80211_ops*, %struct.cfg80211_ops** %ops.addr, align 8
  %connect = getelementptr inbounds %struct.cfg80211_ops, %struct.cfg80211_ops* %24, i32 0, i32 42
  %25 = load i32 (%struct.wiphy*, %struct.net_device*, %struct.cfg80211_connect_params*)*, i32 (%struct.wiphy*, %struct.net_device*, %struct.cfg80211_connect_params*)** %connect, align 8
  %tobool49 = icmp ne i32 (%struct.wiphy*, %struct.net_device*, %struct.cfg80211_connect_params*)* %25, null
  br i1 %tobool49, label %land.rhs50, label %land.end54

land.rhs50:                                       ; preds = %if.end40
  %26 = load %struct.cfg80211_ops*, %struct.cfg80211_ops** %ops.addr, align 8
  %disconnect = getelementptr inbounds %struct.cfg80211_ops, %struct.cfg80211_ops* %26, i32 0, i32 44
  %27 = load i32 (%struct.wiphy*, %struct.net_device*, i16)*, i32 (%struct.wiphy*, %struct.net_device*, i16)** %disconnect, align 8
  %tobool51 = icmp ne i32 (%struct.wiphy*, %struct.net_device*, i16)* %27, null
  %lnot52 = xor i1 %tobool51, true
  br label %land.end54

land.end54:                                       ; preds = %land.rhs50, %if.end40
  %28 = phi i1 [ false, %if.end40 ], [ %lnot52, %land.rhs50 ]
  %lnot55 = xor i1 %28, true
  %lnot57 = xor i1 %lnot55, true
  %lnot.ext58 = zext i1 %lnot57 to i32
  store i32 %lnot.ext58, i32* %__ret_warn_on48, align 4
  %29 = load i32, i32* %__ret_warn_on48, align 4
  %tobool59 = icmp ne i32 %29, 0
  %lnot60 = xor i1 %tobool59, true
  %lnot62 = xor i1 %lnot60, true
  %lnot.ext63 = zext i1 %lnot62 to i32
  %conv64 = sext i32 %lnot.ext63 to i64
  %tobool65 = icmp ne i64 %conv64, 0
  br i1 %tobool65, label %if.then66, label %if.end67

if.then66:                                        ; preds = %land.end54
  call void @warn_slowpath_null(i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.1, i32 0, i32 0), i32 372)
  br label %if.end67

if.end67:                                         ; preds = %if.then66, %land.end54
  %30 = load i32, i32* %__ret_warn_on48, align 4
  %tobool69 = icmp ne i32 %30, 0
  %lnot70 = xor i1 %tobool69, true
  %lnot72 = xor i1 %lnot70, true
  %lnot.ext73 = zext i1 %lnot72 to i32
  %conv74 = sext i32 %lnot.ext73 to i64
  store i64 %conv74, i64* %tmp68, align 8
  %31 = load i64, i64* %tmp68, align 8
  %32 = load %struct.cfg80211_ops*, %struct.cfg80211_ops** %ops.addr, align 8
  %join_ibss = getelementptr inbounds %struct.cfg80211_ops, %struct.cfg80211_ops* %32, i32 0, i32 45
  %33 = load i32 (%struct.wiphy*, %struct.net_device*, %struct.cfg80211_ibss_params*)*, i32 (%struct.wiphy*, %struct.net_device*, %struct.cfg80211_ibss_params*)** %join_ibss, align 8
  %tobool76 = icmp ne i32 (%struct.wiphy*, %struct.net_device*, %struct.cfg80211_ibss_params*)* %33, null
  br i1 %tobool76, label %land.rhs77, label %land.end81

land.rhs77:                                       ; preds = %if.end67
  %34 = load %struct.cfg80211_ops*, %struct.cfg80211_ops** %ops.addr, align 8
  %leave_ibss = getelementptr inbounds %struct.cfg80211_ops, %struct.cfg80211_ops* %34, i32 0, i32 46
  %35 = load i32 (%struct.wiphy*, %struct.net_device*)*, i32 (%struct.wiphy*, %struct.net_device*)** %leave_ibss, align 8
  %tobool78 = icmp ne i32 (%struct.wiphy*, %struct.net_device*)* %35, null
  %lnot79 = xor i1 %tobool78, true
  br label %land.end81

land.end81:                                       ; preds = %land.rhs77, %if.end67
  %36 = phi i1 [ false, %if.end67 ], [ %lnot79, %land.rhs77 ]
  %lnot82 = xor i1 %36, true
  %lnot84 = xor i1 %lnot82, true
  %lnot.ext85 = zext i1 %lnot84 to i32
  store i32 %lnot.ext85, i32* %__ret_warn_on75, align 4
  %37 = load i32, i32* %__ret_warn_on75, align 4
  %tobool86 = icmp ne i32 %37, 0
  %lnot87 = xor i1 %tobool86, true
  %lnot89 = xor i1 %lnot87, true
  %lnot.ext90 = zext i1 %lnot89 to i32
  %conv91 = sext i32 %lnot.ext90 to i64
  %tobool92 = icmp ne i64 %conv91, 0
  br i1 %tobool92, label %if.then93, label %if.end94

if.then93:                                        ; preds = %land.end81
  call void @warn_slowpath_null(i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.1, i32 0, i32 0), i32 373)
  br label %if.end94

if.end94:                                         ; preds = %if.then93, %land.end81
  %38 = load i32, i32* %__ret_warn_on75, align 4
  %tobool96 = icmp ne i32 %38, 0
  %lnot97 = xor i1 %tobool96, true
  %lnot99 = xor i1 %lnot97, true
  %lnot.ext100 = zext i1 %lnot99 to i32
  %conv101 = sext i32 %lnot.ext100 to i64
  store i64 %conv101, i64* %tmp95, align 8
  %39 = load i64, i64* %tmp95, align 8
  %40 = load %struct.cfg80211_ops*, %struct.cfg80211_ops** %ops.addr, align 8
  %add_virtual_intf = getelementptr inbounds %struct.cfg80211_ops, %struct.cfg80211_ops* %40, i32 0, i32 3
  %41 = load %struct.wireless_dev* (%struct.wiphy*, i8*, i8, i32, i32*, %struct.vif_params*)*, %struct.wireless_dev* (%struct.wiphy*, i8*, i8, i32, i32*, %struct.vif_params*)** %add_virtual_intf, align 8
  %tobool103 = icmp ne %struct.wireless_dev* (%struct.wiphy*, i8*, i8, i32, i32*, %struct.vif_params*)* %41, null
  br i1 %tobool103, label %land.rhs104, label %land.end108

land.rhs104:                                      ; preds = %if.end94
  %42 = load %struct.cfg80211_ops*, %struct.cfg80211_ops** %ops.addr, align 8
  %del_virtual_intf = getelementptr inbounds %struct.cfg80211_ops, %struct.cfg80211_ops* %42, i32 0, i32 4
  %43 = load i32 (%struct.wiphy*, %struct.wireless_dev*)*, i32 (%struct.wiphy*, %struct.wireless_dev*)** %del_virtual_intf, align 8
  %tobool105 = icmp ne i32 (%struct.wiphy*, %struct.wireless_dev*)* %43, null
  %lnot106 = xor i1 %tobool105, true
  br label %land.end108

land.end108:                                      ; preds = %land.rhs104, %if.end94
  %44 = phi i1 [ false, %if.end94 ], [ %lnot106, %land.rhs104 ]
  %lnot109 = xor i1 %44, true
  %lnot111 = xor i1 %lnot109, true
  %lnot.ext112 = zext i1 %lnot111 to i32
  store i32 %lnot.ext112, i32* %__ret_warn_on102, align 4
  %45 = load i32, i32* %__ret_warn_on102, align 4
  %tobool113 = icmp ne i32 %45, 0
  %lnot114 = xor i1 %tobool113, true
  %lnot116 = xor i1 %lnot114, true
  %lnot.ext117 = zext i1 %lnot116 to i32
  %conv118 = sext i32 %lnot.ext117 to i64
  %tobool119 = icmp ne i64 %conv118, 0
  br i1 %tobool119, label %if.then120, label %if.end121

if.then120:                                       ; preds = %land.end108
  call void @warn_slowpath_null(i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.1, i32 0, i32 0), i32 374)
  br label %if.end121

if.end121:                                        ; preds = %if.then120, %land.end108
  %46 = load i32, i32* %__ret_warn_on102, align 4
  %tobool123 = icmp ne i32 %46, 0
  %lnot124 = xor i1 %tobool123, true
  %lnot126 = xor i1 %lnot124, true
  %lnot.ext127 = zext i1 %lnot126 to i32
  %conv128 = sext i32 %lnot.ext127 to i64
  store i64 %conv128, i64* %tmp122, align 8
  %47 = load i64, i64* %tmp122, align 8
  %48 = load %struct.cfg80211_ops*, %struct.cfg80211_ops** %ops.addr, align 8
  %add_station = getelementptr inbounds %struct.cfg80211_ops, %struct.cfg80211_ops* %48, i32 0, i32 14
  %49 = load i32 (%struct.wiphy*, %struct.net_device*, i8*, %struct.station_parameters*)*, i32 (%struct.wiphy*, %struct.net_device*, i8*, %struct.station_parameters*)** %add_station, align 8
  %tobool130 = icmp ne i32 (%struct.wiphy*, %struct.net_device*, i8*, %struct.station_parameters*)* %49, null
  br i1 %tobool130, label %land.rhs131, label %land.end135

land.rhs131:                                      ; preds = %if.end121
  %50 = load %struct.cfg80211_ops*, %struct.cfg80211_ops** %ops.addr, align 8
  %del_station = getelementptr inbounds %struct.cfg80211_ops, %struct.cfg80211_ops* %50, i32 0, i32 15
  %51 = load i32 (%struct.wiphy*, %struct.net_device*, %struct.station_del_parameters*)*, i32 (%struct.wiphy*, %struct.net_device*, %struct.station_del_parameters*)** %del_station, align 8
  %tobool132 = icmp ne i32 (%struct.wiphy*, %struct.net_device*, %struct.station_del_parameters*)* %51, null
  %lnot133 = xor i1 %tobool132, true
  br label %land.end135

land.end135:                                      ; preds = %land.rhs131, %if.end121
  %52 = phi i1 [ false, %if.end121 ], [ %lnot133, %land.rhs131 ]
  %lnot136 = xor i1 %52, true
  %lnot138 = xor i1 %lnot136, true
  %lnot.ext139 = zext i1 %lnot138 to i32
  store i32 %lnot.ext139, i32* %__ret_warn_on129, align 4
  %53 = load i32, i32* %__ret_warn_on129, align 4
  %tobool140 = icmp ne i32 %53, 0
  %lnot141 = xor i1 %tobool140, true
  %lnot143 = xor i1 %lnot141, true
  %lnot.ext144 = zext i1 %lnot143 to i32
  %conv145 = sext i32 %lnot.ext144 to i64
  %tobool146 = icmp ne i64 %conv145, 0
  br i1 %tobool146, label %if.then147, label %if.end148

if.then147:                                       ; preds = %land.end135
  call void @warn_slowpath_null(i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.1, i32 0, i32 0), i32 375)
  br label %if.end148

if.end148:                                        ; preds = %if.then147, %land.end135
  %54 = load i32, i32* %__ret_warn_on129, align 4
  %tobool150 = icmp ne i32 %54, 0
  %lnot151 = xor i1 %tobool150, true
  %lnot153 = xor i1 %lnot151, true
  %lnot.ext154 = zext i1 %lnot153 to i32
  %conv155 = sext i32 %lnot.ext154 to i64
  store i64 %conv155, i64* %tmp149, align 8
  %55 = load i64, i64* %tmp149, align 8
  %56 = load %struct.cfg80211_ops*, %struct.cfg80211_ops** %ops.addr, align 8
  %add_mpath = getelementptr inbounds %struct.cfg80211_ops, %struct.cfg80211_ops* %56, i32 0, i32 19
  %57 = load i32 (%struct.wiphy*, %struct.net_device*, i8*, i8*)*, i32 (%struct.wiphy*, %struct.net_device*, i8*, i8*)** %add_mpath, align 8
  %tobool157 = icmp ne i32 (%struct.wiphy*, %struct.net_device*, i8*, i8*)* %57, null
  br i1 %tobool157, label %land.rhs158, label %land.end162

land.rhs158:                                      ; preds = %if.end148
  %58 = load %struct.cfg80211_ops*, %struct.cfg80211_ops** %ops.addr, align 8
  %del_mpath = getelementptr inbounds %struct.cfg80211_ops, %struct.cfg80211_ops* %58, i32 0, i32 20
  %59 = load i32 (%struct.wiphy*, %struct.net_device*, i8*)*, i32 (%struct.wiphy*, %struct.net_device*, i8*)** %del_mpath, align 8
  %tobool159 = icmp ne i32 (%struct.wiphy*, %struct.net_device*, i8*)* %59, null
  %lnot160 = xor i1 %tobool159, true
  br label %land.end162

land.end162:                                      ; preds = %land.rhs158, %if.end148
  %60 = phi i1 [ false, %if.end148 ], [ %lnot160, %land.rhs158 ]
  %lnot163 = xor i1 %60, true
  %lnot165 = xor i1 %lnot163, true
  %lnot.ext166 = zext i1 %lnot165 to i32
  store i32 %lnot.ext166, i32* %__ret_warn_on156, align 4
  %61 = load i32, i32* %__ret_warn_on156, align 4
  %tobool167 = icmp ne i32 %61, 0
  %lnot168 = xor i1 %tobool167, true
  %lnot170 = xor i1 %lnot168, true
  %lnot.ext171 = zext i1 %lnot170 to i32
  %conv172 = sext i32 %lnot.ext171 to i64
  %tobool173 = icmp ne i64 %conv172, 0
  br i1 %tobool173, label %if.then174, label %if.end175

if.then174:                                       ; preds = %land.end162
  call void @warn_slowpath_null(i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.1, i32 0, i32 0), i32 376)
  br label %if.end175

if.end175:                                        ; preds = %if.then174, %land.end162
  %62 = load i32, i32* %__ret_warn_on156, align 4
  %tobool177 = icmp ne i32 %62, 0
  %lnot178 = xor i1 %tobool177, true
  %lnot180 = xor i1 %lnot178, true
  %lnot.ext181 = zext i1 %lnot180 to i32
  %conv182 = sext i32 %lnot.ext181 to i64
  store i64 %conv182, i64* %tmp176, align 8
  %63 = load i64, i64* %tmp176, align 8
  %64 = load %struct.cfg80211_ops*, %struct.cfg80211_ops** %ops.addr, align 8
  %join_mesh = getelementptr inbounds %struct.cfg80211_ops, %struct.cfg80211_ops* %64, i32 0, i32 28
  %65 = load i32 (%struct.wiphy*, %struct.net_device*, %struct.mesh_config*, %struct.mesh_setup*)*, i32 (%struct.wiphy*, %struct.net_device*, %struct.mesh_config*, %struct.mesh_setup*)** %join_mesh, align 8
  %tobool184 = icmp ne i32 (%struct.wiphy*, %struct.net_device*, %struct.mesh_config*, %struct.mesh_setup*)* %65, null
  br i1 %tobool184, label %land.rhs185, label %land.end189

land.rhs185:                                      ; preds = %if.end175
  %66 = load %struct.cfg80211_ops*, %struct.cfg80211_ops** %ops.addr, align 8
  %leave_mesh = getelementptr inbounds %struct.cfg80211_ops, %struct.cfg80211_ops* %66, i32 0, i32 29
  %67 = load i32 (%struct.wiphy*, %struct.net_device*)*, i32 (%struct.wiphy*, %struct.net_device*)** %leave_mesh, align 8
  %tobool186 = icmp ne i32 (%struct.wiphy*, %struct.net_device*)* %67, null
  %lnot187 = xor i1 %tobool186, true
  br label %land.end189

land.end189:                                      ; preds = %land.rhs185, %if.end175
  %68 = phi i1 [ false, %if.end175 ], [ %lnot187, %land.rhs185 ]
  %lnot190 = xor i1 %68, true
  %lnot192 = xor i1 %lnot190, true
  %lnot.ext193 = zext i1 %lnot192 to i32
  store i32 %lnot.ext193, i32* %__ret_warn_on183, align 4
  %69 = load i32, i32* %__ret_warn_on183, align 4
  %tobool194 = icmp ne i32 %69, 0
  %lnot195 = xor i1 %tobool194, true
  %lnot197 = xor i1 %lnot195, true
  %lnot.ext198 = zext i1 %lnot197 to i32
  %conv199 = sext i32 %lnot.ext198 to i64
  %tobool200 = icmp ne i64 %conv199, 0
  br i1 %tobool200, label %if.then201, label %if.end202

if.then201:                                       ; preds = %land.end189
  call void @warn_slowpath_null(i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.1, i32 0, i32 0), i32 377)
  br label %if.end202

if.end202:                                        ; preds = %if.then201, %land.end189
  %70 = load i32, i32* %__ret_warn_on183, align 4
  %tobool204 = icmp ne i32 %70, 0
  %lnot205 = xor i1 %tobool204, true
  %lnot207 = xor i1 %lnot205, true
  %lnot.ext208 = zext i1 %lnot207 to i32
  %conv209 = sext i32 %lnot.ext208 to i64
  store i64 %conv209, i64* %tmp203, align 8
  %71 = load i64, i64* %tmp203, align 8
  %72 = load %struct.cfg80211_ops*, %struct.cfg80211_ops** %ops.addr, align 8
  %start_p2p_device = getelementptr inbounds %struct.cfg80211_ops, %struct.cfg80211_ops* %72, i32 0, i32 76
  %73 = load i32 (%struct.wiphy*, %struct.wireless_dev*)*, i32 (%struct.wiphy*, %struct.wireless_dev*)** %start_p2p_device, align 8
  %tobool211 = icmp ne i32 (%struct.wiphy*, %struct.wireless_dev*)* %73, null
  br i1 %tobool211, label %land.rhs212, label %land.end216

land.rhs212:                                      ; preds = %if.end202
  %74 = load %struct.cfg80211_ops*, %struct.cfg80211_ops** %ops.addr, align 8
  %stop_p2p_device = getelementptr inbounds %struct.cfg80211_ops, %struct.cfg80211_ops* %74, i32 0, i32 77
  %75 = load void (%struct.wiphy*, %struct.wireless_dev*)*, void (%struct.wiphy*, %struct.wireless_dev*)** %stop_p2p_device, align 8
  %tobool213 = icmp ne void (%struct.wiphy*, %struct.wireless_dev*)* %75, null
  %lnot214 = xor i1 %tobool213, true
  br label %land.end216

land.end216:                                      ; preds = %land.rhs212, %if.end202
  %76 = phi i1 [ false, %if.end202 ], [ %lnot214, %land.rhs212 ]
  %lnot217 = xor i1 %76, true
  %lnot219 = xor i1 %lnot217, true
  %lnot.ext220 = zext i1 %lnot219 to i32
  store i32 %lnot.ext220, i32* %__ret_warn_on210, align 4
  %77 = load i32, i32* %__ret_warn_on210, align 4
  %tobool221 = icmp ne i32 %77, 0
  %lnot222 = xor i1 %tobool221, true
  %lnot224 = xor i1 %lnot222, true
  %lnot.ext225 = zext i1 %lnot224 to i32
  %conv226 = sext i32 %lnot.ext225 to i64
  %tobool227 = icmp ne i64 %conv226, 0
  br i1 %tobool227, label %if.then228, label %if.end229

if.then228:                                       ; preds = %land.end216
  call void @warn_slowpath_null(i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.1, i32 0, i32 0), i32 378)
  br label %if.end229

if.end229:                                        ; preds = %if.then228, %land.end216
  %78 = load i32, i32* %__ret_warn_on210, align 4
  %tobool231 = icmp ne i32 %78, 0
  %lnot232 = xor i1 %tobool231, true
  %lnot234 = xor i1 %lnot232, true
  %lnot.ext235 = zext i1 %lnot234 to i32
  %conv236 = sext i32 %lnot.ext235 to i64
  store i64 %conv236, i64* %tmp230, align 8
  %79 = load i64, i64* %tmp230, align 8
  %80 = load %struct.cfg80211_ops*, %struct.cfg80211_ops** %ops.addr, align 8
  %start_ap = getelementptr inbounds %struct.cfg80211_ops, %struct.cfg80211_ops* %80, i32 0, i32 11
  %81 = load i32 (%struct.wiphy*, %struct.net_device*, %struct.cfg80211_ap_settings*)*, i32 (%struct.wiphy*, %struct.net_device*, %struct.cfg80211_ap_settings*)** %start_ap, align 8
  %tobool238 = icmp ne i32 (%struct.wiphy*, %struct.net_device*, %struct.cfg80211_ap_settings*)* %81, null
  br i1 %tobool238, label %land.rhs239, label %land.end243

land.rhs239:                                      ; preds = %if.end229
  %82 = load %struct.cfg80211_ops*, %struct.cfg80211_ops** %ops.addr, align 8
  %stop_ap = getelementptr inbounds %struct.cfg80211_ops, %struct.cfg80211_ops* %82, i32 0, i32 13
  %83 = load i32 (%struct.wiphy*, %struct.net_device*)*, i32 (%struct.wiphy*, %struct.net_device*)** %stop_ap, align 8
  %tobool240 = icmp ne i32 (%struct.wiphy*, %struct.net_device*)* %83, null
  %lnot241 = xor i1 %tobool240, true
  br label %land.end243

land.end243:                                      ; preds = %land.rhs239, %if.end229
  %84 = phi i1 [ false, %if.end229 ], [ %lnot241, %land.rhs239 ]
  %lnot244 = xor i1 %84, true
  %lnot246 = xor i1 %lnot244, true
  %lnot.ext247 = zext i1 %lnot246 to i32
  store i32 %lnot.ext247, i32* %__ret_warn_on237, align 4
  %85 = load i32, i32* %__ret_warn_on237, align 4
  %tobool248 = icmp ne i32 %85, 0
  %lnot249 = xor i1 %tobool248, true
  %lnot251 = xor i1 %lnot249, true
  %lnot.ext252 = zext i1 %lnot251 to i32
  %conv253 = sext i32 %lnot.ext252 to i64
  %tobool254 = icmp ne i64 %conv253, 0
  br i1 %tobool254, label %if.then255, label %if.end256

if.then255:                                       ; preds = %land.end243
  call void @warn_slowpath_null(i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.1, i32 0, i32 0), i32 379)
  br label %if.end256

if.end256:                                        ; preds = %if.then255, %land.end243
  %86 = load i32, i32* %__ret_warn_on237, align 4
  %tobool258 = icmp ne i32 %86, 0
  %lnot259 = xor i1 %tobool258, true
  %lnot261 = xor i1 %lnot259, true
  %lnot.ext262 = zext i1 %lnot261 to i32
  %conv263 = sext i32 %lnot.ext262 to i64
  store i64 %conv263, i64* %tmp257, align 8
  %87 = load i64, i64* %tmp257, align 8
  %88 = load %struct.cfg80211_ops*, %struct.cfg80211_ops** %ops.addr, align 8
  %join_ocb = getelementptr inbounds %struct.cfg80211_ops, %struct.cfg80211_ops* %88, i32 0, i32 30
  %89 = load i32 (%struct.wiphy*, %struct.net_device*, %struct.ocb_setup*)*, i32 (%struct.wiphy*, %struct.net_device*, %struct.ocb_setup*)** %join_ocb, align 8
  %tobool265 = icmp ne i32 (%struct.wiphy*, %struct.net_device*, %struct.ocb_setup*)* %89, null
  br i1 %tobool265, label %land.rhs266, label %land.end270

land.rhs266:                                      ; preds = %if.end256
  %90 = load %struct.cfg80211_ops*, %struct.cfg80211_ops** %ops.addr, align 8
  %leave_ocb = getelementptr inbounds %struct.cfg80211_ops, %struct.cfg80211_ops* %90, i32 0, i32 31
  %91 = load i32 (%struct.wiphy*, %struct.net_device*)*, i32 (%struct.wiphy*, %struct.net_device*)** %leave_ocb, align 8
  %tobool267 = icmp ne i32 (%struct.wiphy*, %struct.net_device*)* %91, null
  %lnot268 = xor i1 %tobool267, true
  br label %land.end270

land.end270:                                      ; preds = %land.rhs266, %if.end256
  %92 = phi i1 [ false, %if.end256 ], [ %lnot268, %land.rhs266 ]
  %lnot271 = xor i1 %92, true
  %lnot273 = xor i1 %lnot271, true
  %lnot.ext274 = zext i1 %lnot273 to i32
  store i32 %lnot.ext274, i32* %__ret_warn_on264, align 4
  %93 = load i32, i32* %__ret_warn_on264, align 4
  %tobool275 = icmp ne i32 %93, 0
  %lnot276 = xor i1 %tobool275, true
  %lnot278 = xor i1 %lnot276, true
  %lnot.ext279 = zext i1 %lnot278 to i32
  %conv280 = sext i32 %lnot.ext279 to i64
  %tobool281 = icmp ne i64 %conv280, 0
  br i1 %tobool281, label %if.then282, label %if.end283

if.then282:                                       ; preds = %land.end270
  call void @warn_slowpath_null(i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.1, i32 0, i32 0), i32 380)
  br label %if.end283

if.end283:                                        ; preds = %if.then282, %land.end270
  %94 = load i32, i32* %__ret_warn_on264, align 4
  %tobool285 = icmp ne i32 %94, 0
  %lnot286 = xor i1 %tobool285, true
  %lnot288 = xor i1 %lnot286, true
  %lnot.ext289 = zext i1 %lnot288 to i32
  %conv290 = sext i32 %lnot.ext289 to i64
  store i64 %conv290, i64* %tmp284, align 8
  %95 = load i64, i64* %tmp284, align 8
  %96 = load %struct.cfg80211_ops*, %struct.cfg80211_ops** %ops.addr, align 8
  %suspend = getelementptr inbounds %struct.cfg80211_ops, %struct.cfg80211_ops* %96, i32 0, i32 0
  %97 = load i32 (%struct.wiphy*, %struct.cfg80211_wowlan*)*, i32 (%struct.wiphy*, %struct.cfg80211_wowlan*)** %suspend, align 8
  %tobool292 = icmp ne i32 (%struct.wiphy*, %struct.cfg80211_wowlan*)* %97, null
  br i1 %tobool292, label %land.rhs293, label %land.end297

land.rhs293:                                      ; preds = %if.end283
  %98 = load %struct.cfg80211_ops*, %struct.cfg80211_ops** %ops.addr, align 8
  %resume = getelementptr inbounds %struct.cfg80211_ops, %struct.cfg80211_ops* %98, i32 0, i32 1
  %99 = load i32 (%struct.wiphy*)*, i32 (%struct.wiphy*)** %resume, align 8
  %tobool294 = icmp ne i32 (%struct.wiphy*)* %99, null
  %lnot295 = xor i1 %tobool294, true
  br label %land.end297

land.end297:                                      ; preds = %land.rhs293, %if.end283
  %100 = phi i1 [ false, %if.end283 ], [ %lnot295, %land.rhs293 ]
  %lnot298 = xor i1 %100, true
  %lnot300 = xor i1 %lnot298, true
  %lnot.ext301 = zext i1 %lnot300 to i32
  store i32 %lnot.ext301, i32* %__ret_warn_on291, align 4
  %101 = load i32, i32* %__ret_warn_on291, align 4
  %tobool302 = icmp ne i32 %101, 0
  %lnot303 = xor i1 %tobool302, true
  %lnot305 = xor i1 %lnot303, true
  %lnot.ext306 = zext i1 %lnot305 to i32
  %conv307 = sext i32 %lnot.ext306 to i64
  %tobool308 = icmp ne i64 %conv307, 0
  br i1 %tobool308, label %if.then309, label %if.end310

if.then309:                                       ; preds = %land.end297
  call void @warn_slowpath_null(i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.1, i32 0, i32 0), i32 381)
  br label %if.end310

if.end310:                                        ; preds = %if.then309, %land.end297
  %102 = load i32, i32* %__ret_warn_on291, align 4
  %tobool312 = icmp ne i32 %102, 0
  %lnot313 = xor i1 %tobool312, true
  %lnot315 = xor i1 %lnot313, true
  %lnot.ext316 = zext i1 %lnot315 to i32
  %conv317 = sext i32 %lnot.ext316 to i64
  store i64 %conv317, i64* %tmp311, align 8
  %103 = load i64, i64* %tmp311, align 8
  %104 = load %struct.cfg80211_ops*, %struct.cfg80211_ops** %ops.addr, align 8
  %sched_scan_start = getelementptr inbounds %struct.cfg80211_ops, %struct.cfg80211_ops* %104, i32 0, i32 68
  %105 = load i32 (%struct.wiphy*, %struct.net_device*, %struct.cfg80211_sched_scan_request*)*, i32 (%struct.wiphy*, %struct.net_device*, %struct.cfg80211_sched_scan_request*)** %sched_scan_start, align 8
  %tobool319 = icmp ne i32 (%struct.wiphy*, %struct.net_device*, %struct.cfg80211_sched_scan_request*)* %105, null
  br i1 %tobool319, label %land.rhs320, label %land.end324

land.rhs320:                                      ; preds = %if.end310
  %106 = load %struct.cfg80211_ops*, %struct.cfg80211_ops** %ops.addr, align 8
  %sched_scan_stop = getelementptr inbounds %struct.cfg80211_ops, %struct.cfg80211_ops* %106, i32 0, i32 69
  %107 = load i32 (%struct.wiphy*, %struct.net_device*)*, i32 (%struct.wiphy*, %struct.net_device*)** %sched_scan_stop, align 8
  %tobool321 = icmp ne i32 (%struct.wiphy*, %struct.net_device*)* %107, null
  %lnot322 = xor i1 %tobool321, true
  br label %land.end324

land.end324:                                      ; preds = %land.rhs320, %if.end310
  %108 = phi i1 [ false, %if.end310 ], [ %lnot322, %land.rhs320 ]
  %lnot325 = xor i1 %108, true
  %lnot327 = xor i1 %lnot325, true
  %lnot.ext328 = zext i1 %lnot327 to i32
  store i32 %lnot.ext328, i32* %__ret_warn_on318, align 4
  %109 = load i32, i32* %__ret_warn_on318, align 4
  %tobool329 = icmp ne i32 %109, 0
  %lnot330 = xor i1 %tobool329, true
  %lnot332 = xor i1 %lnot330, true
  %lnot.ext333 = zext i1 %lnot332 to i32
  %conv334 = sext i32 %lnot.ext333 to i64
  %tobool335 = icmp ne i64 %conv334, 0
  br i1 %tobool335, label %if.then336, label %if.end337

if.then336:                                       ; preds = %land.end324
  call void @warn_slowpath_null(i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.1, i32 0, i32 0), i32 382)
  br label %if.end337

if.end337:                                        ; preds = %if.then336, %land.end324
  %110 = load i32, i32* %__ret_warn_on318, align 4
  %tobool339 = icmp ne i32 %110, 0
  %lnot340 = xor i1 %tobool339, true
  %lnot342 = xor i1 %lnot340, true
  %lnot.ext343 = zext i1 %lnot342 to i32
  %conv344 = sext i32 %lnot.ext343 to i64
  store i64 %conv344, i64* %tmp338, align 8
  %111 = load i64, i64* %tmp338, align 8
  %112 = load %struct.cfg80211_ops*, %struct.cfg80211_ops** %ops.addr, align 8
  %remain_on_channel = getelementptr inbounds %struct.cfg80211_ops, %struct.cfg80211_ops* %112, i32 0, i32 58
  %113 = load i32 (%struct.wiphy*, %struct.wireless_dev*, %struct.ieee80211_channel*, i32, i64*)*, i32 (%struct.wiphy*, %struct.wireless_dev*, %struct.ieee80211_channel*, i32, i64*)** %remain_on_channel, align 8
  %tobool346 = icmp ne i32 (%struct.wiphy*, %struct.wireless_dev*, %struct.ieee80211_channel*, i32, i64*)* %113, null
  br i1 %tobool346, label %land.rhs347, label %land.end351

land.rhs347:                                      ; preds = %if.end337
  %114 = load %struct.cfg80211_ops*, %struct.cfg80211_ops** %ops.addr, align 8
  %cancel_remain_on_channel = getelementptr inbounds %struct.cfg80211_ops, %struct.cfg80211_ops* %114, i32 0, i32 59
  %115 = load i32 (%struct.wiphy*, %struct.wireless_dev*, i64)*, i32 (%struct.wiphy*, %struct.wireless_dev*, i64)** %cancel_remain_on_channel, align 8
  %tobool348 = icmp ne i32 (%struct.wiphy*, %struct.wireless_dev*, i64)* %115, null
  %lnot349 = xor i1 %tobool348, true
  br label %land.end351

land.end351:                                      ; preds = %land.rhs347, %if.end337
  %116 = phi i1 [ false, %if.end337 ], [ %lnot349, %land.rhs347 ]
  %lnot352 = xor i1 %116, true
  %lnot354 = xor i1 %lnot352, true
  %lnot.ext355 = zext i1 %lnot354 to i32
  store i32 %lnot.ext355, i32* %__ret_warn_on345, align 4
  %117 = load i32, i32* %__ret_warn_on345, align 4
  %tobool356 = icmp ne i32 %117, 0
  %lnot357 = xor i1 %tobool356, true
  %lnot359 = xor i1 %lnot357, true
  %lnot.ext360 = zext i1 %lnot359 to i32
  %conv361 = sext i32 %lnot.ext360 to i64
  %tobool362 = icmp ne i64 %conv361, 0
  br i1 %tobool362, label %if.then363, label %if.end364

if.then363:                                       ; preds = %land.end351
  call void @warn_slowpath_null(i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.1, i32 0, i32 0), i32 383)
  br label %if.end364

if.end364:                                        ; preds = %if.then363, %land.end351
  %118 = load i32, i32* %__ret_warn_on345, align 4
  %tobool366 = icmp ne i32 %118, 0
  %lnot367 = xor i1 %tobool366, true
  %lnot369 = xor i1 %lnot367, true
  %lnot.ext370 = zext i1 %lnot369 to i32
  %conv371 = sext i32 %lnot.ext370 to i64
  store i64 %conv371, i64* %tmp365, align 8
  %119 = load i64, i64* %tmp365, align 8
  %120 = load %struct.cfg80211_ops*, %struct.cfg80211_ops** %ops.addr, align 8
  %tdls_channel_switch = getelementptr inbounds %struct.cfg80211_ops, %struct.cfg80211_ops* %120, i32 0, i32 89
  %121 = load i32 (%struct.wiphy*, %struct.net_device*, i8*, i8, %struct.cfg80211_chan_def*)*, i32 (%struct.wiphy*, %struct.net_device*, i8*, i8, %struct.cfg80211_chan_def*)** %tdls_channel_switch, align 8
  %tobool373 = icmp ne i32 (%struct.wiphy*, %struct.net_device*, i8*, i8, %struct.cfg80211_chan_def*)* %121, null
  br i1 %tobool373, label %land.rhs374, label %land.end378

land.rhs374:                                      ; preds = %if.end364
  %122 = load %struct.cfg80211_ops*, %struct.cfg80211_ops** %ops.addr, align 8
  %tdls_cancel_channel_switch = getelementptr inbounds %struct.cfg80211_ops, %struct.cfg80211_ops* %122, i32 0, i32 90
  %123 = load void (%struct.wiphy*, %struct.net_device*, i8*)*, void (%struct.wiphy*, %struct.net_device*, i8*)** %tdls_cancel_channel_switch, align 8
  %tobool375 = icmp ne void (%struct.wiphy*, %struct.net_device*, i8*)* %123, null
  %lnot376 = xor i1 %tobool375, true
  br label %land.end378

land.end378:                                      ; preds = %land.rhs374, %if.end364
  %124 = phi i1 [ false, %if.end364 ], [ %lnot376, %land.rhs374 ]
  %lnot379 = xor i1 %124, true
  %lnot381 = xor i1 %lnot379, true
  %lnot.ext382 = zext i1 %lnot381 to i32
  store i32 %lnot.ext382, i32* %__ret_warn_on372, align 4
  %125 = load i32, i32* %__ret_warn_on372, align 4
  %tobool383 = icmp ne i32 %125, 0
  %lnot384 = xor i1 %tobool383, true
  %lnot386 = xor i1 %lnot384, true
  %lnot.ext387 = zext i1 %lnot386 to i32
  %conv388 = sext i32 %lnot.ext387 to i64
  %tobool389 = icmp ne i64 %conv388, 0
  br i1 %tobool389, label %if.then390, label %if.end391

if.then390:                                       ; preds = %land.end378
  call void @warn_slowpath_null(i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.1, i32 0, i32 0), i32 384)
  br label %if.end391

if.end391:                                        ; preds = %if.then390, %land.end378
  %126 = load i32, i32* %__ret_warn_on372, align 4
  %tobool393 = icmp ne i32 %126, 0
  %lnot394 = xor i1 %tobool393, true
  %lnot396 = xor i1 %lnot394, true
  %lnot.ext397 = zext i1 %lnot396 to i32
  %conv398 = sext i32 %lnot.ext397 to i64
  store i64 %conv398, i64* %tmp392, align 8
  %127 = load i64, i64* %tmp392, align 8
  %128 = load %struct.cfg80211_ops*, %struct.cfg80211_ops** %ops.addr, align 8
  %add_tx_ts = getelementptr inbounds %struct.cfg80211_ops, %struct.cfg80211_ops* %128, i32 0, i32 87
  %129 = load i32 (%struct.wiphy*, %struct.net_device*, i8, i8*, i8, i16)*, i32 (%struct.wiphy*, %struct.net_device*, i8, i8*, i8, i16)** %add_tx_ts, align 8
  %tobool400 = icmp ne i32 (%struct.wiphy*, %struct.net_device*, i8, i8*, i8, i16)* %129, null
  br i1 %tobool400, label %land.rhs401, label %land.end405

land.rhs401:                                      ; preds = %if.end391
  %130 = load %struct.cfg80211_ops*, %struct.cfg80211_ops** %ops.addr, align 8
  %del_tx_ts = getelementptr inbounds %struct.cfg80211_ops, %struct.cfg80211_ops* %130, i32 0, i32 88
  %131 = load i32 (%struct.wiphy*, %struct.net_device*, i8, i8*)*, i32 (%struct.wiphy*, %struct.net_device*, i8, i8*)** %del_tx_ts, align 8
  %tobool402 = icmp ne i32 (%struct.wiphy*, %struct.net_device*, i8, i8*)* %131, null
  %lnot403 = xor i1 %tobool402, true
  br label %land.end405

land.end405:                                      ; preds = %land.rhs401, %if.end391
  %132 = phi i1 [ false, %if.end391 ], [ %lnot403, %land.rhs401 ]
  %lnot406 = xor i1 %132, true
  %lnot408 = xor i1 %lnot406, true
  %lnot.ext409 = zext i1 %lnot408 to i32
  store i32 %lnot.ext409, i32* %__ret_warn_on399, align 4
  %133 = load i32, i32* %__ret_warn_on399, align 4
  %tobool410 = icmp ne i32 %133, 0
  %lnot411 = xor i1 %tobool410, true
  %lnot413 = xor i1 %lnot411, true
  %lnot.ext414 = zext i1 %lnot413 to i32
  %conv415 = sext i32 %lnot.ext414 to i64
  %tobool416 = icmp ne i64 %conv415, 0
  br i1 %tobool416, label %if.then417, label %if.end418

if.then417:                                       ; preds = %land.end405
  call void @warn_slowpath_null(i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.1, i32 0, i32 0), i32 385)
  br label %if.end418

if.end418:                                        ; preds = %if.then417, %land.end405
  %134 = load i32, i32* %__ret_warn_on399, align 4
  %tobool420 = icmp ne i32 %134, 0
  %lnot421 = xor i1 %tobool420, true
  %lnot423 = xor i1 %lnot421, true
  %lnot.ext424 = zext i1 %lnot423 to i32
  %conv425 = sext i32 %lnot.ext424 to i64
  store i64 %conv425, i64* %tmp419, align 8
  %135 = load i64, i64* %tmp419, align 8
  %136 = load i32, i32* %sizeof_priv.addr, align 4
  %conv426 = sext i32 %136 to i64
  %add = add i64 1824, %conv426
  %conv427 = trunc i64 %add to i32
  store i32 %conv427, i32* %alloc_size, align 4
  %137 = load i32, i32* %alloc_size, align 4
  %conv428 = sext i32 %137 to i64
  %call = call i8* @kzalloc(i64 %conv428, i32 20971712)
  %138 = bitcast i8* %call to %struct.cfg80211_registered_device*
  store %struct.cfg80211_registered_device* %138, %struct.cfg80211_registered_device** %rdev, align 8
  %139 = load %struct.cfg80211_registered_device*, %struct.cfg80211_registered_device** %rdev, align 8
  %tobool429 = icmp ne %struct.cfg80211_registered_device* %139, null
  br i1 %tobool429, label %if.end431, label %if.then430

if.then430:                                       ; preds = %if.end418
  store %struct.wiphy* null, %struct.wiphy** %retval, align 8
  br label %return

if.end431:                                        ; preds = %if.end418
  %140 = load %struct.cfg80211_ops*, %struct.cfg80211_ops** %ops.addr, align 8
  %141 = load %struct.cfg80211_registered_device*, %struct.cfg80211_registered_device** %rdev, align 8
  %ops432 = getelementptr inbounds %struct.cfg80211_registered_device, %struct.cfg80211_registered_device* %141, i32 0, i32 0
  store %struct.cfg80211_ops* %140, %struct.cfg80211_ops** %ops432, align 32
  store i32 1, i32* %i.addr.i, align 4
  store %struct.atomic_t* @wiphy_new_nm.wiphy_counter, %struct.atomic_t** %v.addr.i, align 8
  %142 = load i32, i32* %i.addr.i, align 4
  %143 = load i32, i32* %i.addr.i, align 4
  store i32 %143, i32* %__ret.i, align 4
  %144 = load i32, i32* %__ret.i, align 4
  %145 = load %struct.atomic_t*, %struct.atomic_t** %v.addr.i, align 8
  %counter.i = getelementptr inbounds %struct.atomic_t, %struct.atomic_t* %145, i32 0, i32 0
  %146 = call i32 asm sideeffect ".pushsection .smp_locks,\22a\22\0A.balign 4\0A.long 671f - .\0A.popsection\0A671:\0A\09lock; xaddl $0, $1\0A", "=r,=*m,0,*m,~{memory},~{cc},~{dirflag},~{fpsr},~{flags}"(i32* %counter.i, i32 %144, i32* %counter.i) #3, !srcloc !5
  store i32 %146, i32* %__ret.i, align 4
  %147 = load i32, i32* %__ret.i, align 4
  store i32 %147, i32* %tmp.i, align 4
  %148 = load i32, i32* %tmp.i, align 4
  %add.i = add nsw i32 %142, %148
  %149 = load %struct.cfg80211_registered_device*, %struct.cfg80211_registered_device** %rdev, align 8
  %wiphy_idx = getelementptr inbounds %struct.cfg80211_registered_device, %struct.cfg80211_registered_device* %149, i32 0, i32 8
  store i32 %add.i, i32* %wiphy_idx, align 4
  %150 = load %struct.cfg80211_registered_device*, %struct.cfg80211_registered_device** %rdev, align 8
  %wiphy_idx434 = getelementptr inbounds %struct.cfg80211_registered_device, %struct.cfg80211_registered_device* %150, i32 0, i32 8
  %151 = load i32, i32* %wiphy_idx434, align 4
  %cmp = icmp slt i32 %151, 0
  %lnot436 = xor i1 %cmp, true
  %lnot438 = xor i1 %lnot436, true
  %lnot.ext439 = zext i1 %lnot438 to i32
  %conv440 = sext i32 %lnot.ext439 to i64
  %tobool441 = icmp ne i64 %conv440, 0
  br i1 %tobool441, label %if.then442, label %if.end443

if.then442:                                       ; preds = %if.end431
  store %struct.atomic_t* @wiphy_new_nm.wiphy_counter, %struct.atomic_t** %v.addr.i635, align 8
  %152 = load %struct.atomic_t*, %struct.atomic_t** %v.addr.i635, align 8
  %counter.i636 = getelementptr inbounds %struct.atomic_t, %struct.atomic_t* %152, i32 0, i32 0
  call void asm sideeffect ".pushsection .smp_locks,\22a\22\0A.balign 4\0A.long 671f - .\0A.popsection\0A671:\0A\09lock; decl $0", "=*m,*m,~{dirflag},~{fpsr},~{flags}"(i32* %counter.i636, i32* %counter.i636) #3, !srcloc !6
  %153 = load %struct.cfg80211_registered_device*, %struct.cfg80211_registered_device** %rdev, align 8
  %154 = bitcast %struct.cfg80211_registered_device* %153 to i8*
  call void @kfree(i8* %154)
  store %struct.wiphy* null, %struct.wiphy** %retval, align 8
  br label %return

if.end443:                                        ; preds = %if.end431
  %155 = load %struct.cfg80211_registered_device*, %struct.cfg80211_registered_device** %rdev, align 8
  %wiphy_idx444 = getelementptr inbounds %struct.cfg80211_registered_device, %struct.cfg80211_registered_device* %155, i32 0, i32 8
  %156 = load i32, i32* %wiphy_idx444, align 4
  %dec = add nsw i32 %156, -1
  store i32 %dec, i32* %wiphy_idx444, align 4
  %157 = load i8*, i8** %requested_name.addr, align 8
  %tobool445 = icmp ne i8* %157, null
  br i1 %tobool445, label %land.lhs.true, label %if.else

land.lhs.true:                                    ; preds = %if.end443
  %158 = load i8*, i8** %requested_name.addr, align 8
  %arrayidx = getelementptr inbounds i8, i8* %158, i64 0
  %159 = load i8, i8* %arrayidx, align 1
  %conv446 = sext i8 %159 to i32
  %tobool447 = icmp ne i32 %conv446, 0
  br i1 %tobool447, label %if.then448, label %if.else

if.then448:                                       ; preds = %land.lhs.true
  call void @rtnl_lock()
  %160 = load %struct.cfg80211_registered_device*, %struct.cfg80211_registered_device** %rdev, align 8
  %161 = load i8*, i8** %requested_name.addr, align 8
  %call449 = call i32 @cfg80211_dev_check_name(%struct.cfg80211_registered_device* %160, i8* %161)
  store i32 %call449, i32* %rv, align 4
  %162 = load i32, i32* %rv, align 4
  %cmp450 = icmp slt i32 %162, 0
  br i1 %cmp450, label %if.then452, label %if.end453

if.then452:                                       ; preds = %if.then448
  call void @rtnl_unlock()
  br label %use_default_name

if.end453:                                        ; preds = %if.then448
  %163 = load %struct.cfg80211_registered_device*, %struct.cfg80211_registered_device** %rdev, align 8
  %wiphy = getelementptr inbounds %struct.cfg80211_registered_device, %struct.cfg80211_registered_device* %163, i32 0, i32 42
  %dev = getelementptr inbounds %struct.wiphy, %struct.wiphy* %wiphy, i32 0, i32 50
  %164 = load i8*, i8** %requested_name.addr, align 8
  %call454 = call i32 (%struct.device*, i8*, ...) @dev_set_name(%struct.device* %dev, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.4, i32 0, i32 0), i8* %164)
  store i32 %call454, i32* %rv, align 4
  call void @rtnl_unlock()
  %165 = load i32, i32* %rv, align 4
  %tobool455 = icmp ne i32 %165, 0
  br i1 %tobool455, label %if.then456, label %if.end457

if.then456:                                       ; preds = %if.end453
  br label %use_default_name

if.end457:                                        ; preds = %if.end453
  br label %if.end462

if.else:                                          ; preds = %land.lhs.true, %if.end443
  br label %use_default_name

use_default_name:                                 ; preds = %if.else, %if.then456, %if.then452
  %166 = load %struct.cfg80211_registered_device*, %struct.cfg80211_registered_device** %rdev, align 8
  %wiphy458 = getelementptr inbounds %struct.cfg80211_registered_device, %struct.cfg80211_registered_device* %166, i32 0, i32 42
  %dev459 = getelementptr inbounds %struct.wiphy, %struct.wiphy* %wiphy458, i32 0, i32 50
  %167 = load %struct.cfg80211_registered_device*, %struct.cfg80211_registered_device** %rdev, align 8
  %wiphy_idx460 = getelementptr inbounds %struct.cfg80211_registered_device, %struct.cfg80211_registered_device* %167, i32 0, i32 8
  %168 = load i32, i32* %wiphy_idx460, align 4
  %call461 = call i32 (%struct.device*, i8*, ...) @dev_set_name(%struct.device* %dev459, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.5, i32 0, i32 0), i32 %168)
  br label %if.end462

if.end462:                                        ; preds = %use_default_name, %if.end457
  %169 = load %struct.cfg80211_registered_device*, %struct.cfg80211_registered_device** %rdev, align 8
  %wiphy463 = getelementptr inbounds %struct.cfg80211_registered_device, %struct.cfg80211_registered_device* %169, i32 0, i32 42
  %wdev_list = getelementptr inbounds %struct.wiphy, %struct.wiphy* %wiphy463, i32 0, i32 55
  call void @INIT_LIST_HEAD(%struct.list_head* %wdev_list)
  %170 = load %struct.cfg80211_registered_device*, %struct.cfg80211_registered_device** %rdev, align 8
  %beacon_registrations = getelementptr inbounds %struct.cfg80211_registered_device, %struct.cfg80211_registered_device* %170, i32 0, i32 13
  call void @INIT_LIST_HEAD(%struct.list_head* %beacon_registrations)
  br label %do.body

do.body:                                          ; preds = %if.end462
  %171 = load %struct.cfg80211_registered_device*, %struct.cfg80211_registered_device** %rdev, align 8
  %beacon_registrations_lock = getelementptr inbounds %struct.cfg80211_registered_device, %struct.cfg80211_registered_device* %171, i32 0, i32 14
  store %struct.spinlock* %beacon_registrations_lock, %struct.spinlock** %lock.addr.i, align 8
  %172 = load %struct.spinlock*, %struct.spinlock** %lock.addr.i, align 8
  %173 = getelementptr inbounds %struct.spinlock, %struct.spinlock* %172, i32 0, i32 0
  %rlock.i = bitcast %union.anon.1* %173 to %struct.raw_spinlock*
  br label %do.body465

do.body465:                                       ; preds = %do.body
  %174 = load %struct.cfg80211_registered_device*, %struct.cfg80211_registered_device** %rdev, align 8
  %beacon_registrations_lock466 = getelementptr inbounds %struct.cfg80211_registered_device, %struct.cfg80211_registered_device* %174, i32 0, i32 14
  %175 = getelementptr inbounds %struct.spinlock, %struct.spinlock* %beacon_registrations_lock466, i32 0, i32 0
  %rlock = bitcast %union.anon.1* %175 to %struct.raw_spinlock*
  %raw_lock = getelementptr inbounds %struct.raw_spinlock, %struct.raw_spinlock* %.compoundliteral, i32 0, i32 0
  %val = getelementptr inbounds %struct.qspinlock, %struct.qspinlock* %raw_lock, i32 0, i32 0
  %counter = getelementptr inbounds %struct.atomic_t, %struct.atomic_t* %val, i32 0, i32 0
  store i32 0, i32* %counter, align 4
  %176 = bitcast %struct.raw_spinlock* %rlock to i8*
  %177 = bitcast %struct.raw_spinlock* %.compoundliteral to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %176, i8* %177, i64 4, i32 4, i1 false)
  br label %do.end

do.end:                                           ; preds = %do.body465
  br label %do.end467

do.end467:                                        ; preds = %do.end
  br label %do.body468

do.body468:                                       ; preds = %do.end467
  %178 = load %struct.cfg80211_registered_device*, %struct.cfg80211_registered_device** %rdev, align 8
  %bss_lock = getelementptr inbounds %struct.cfg80211_registered_device, %struct.cfg80211_registered_device* %178, i32 0, i32 20
  store %struct.spinlock* %bss_lock, %struct.spinlock** %lock.addr.i637, align 8
  %179 = load %struct.spinlock*, %struct.spinlock** %lock.addr.i637, align 8
  %180 = getelementptr inbounds %struct.spinlock, %struct.spinlock* %179, i32 0, i32 0
  %rlock.i638 = bitcast %union.anon.1* %180 to %struct.raw_spinlock*
  br label %do.body470

do.body470:                                       ; preds = %do.body468
  %181 = load %struct.cfg80211_registered_device*, %struct.cfg80211_registered_device** %rdev, align 8
  %bss_lock471 = getelementptr inbounds %struct.cfg80211_registered_device, %struct.cfg80211_registered_device* %181, i32 0, i32 20
  %182 = getelementptr inbounds %struct.spinlock, %struct.spinlock* %bss_lock471, i32 0, i32 0
  %rlock472 = bitcast %union.anon.1* %182 to %struct.raw_spinlock*
  %raw_lock474 = getelementptr inbounds %struct.raw_spinlock, %struct.raw_spinlock* %.compoundliteral473, i32 0, i32 0
  %val475 = getelementptr inbounds %struct.qspinlock, %struct.qspinlock* %raw_lock474, i32 0, i32 0
  %counter476 = getelementptr inbounds %struct.atomic_t, %struct.atomic_t* %val475, i32 0, i32 0
  store i32 0, i32* %counter476, align 4
  %183 = bitcast %struct.raw_spinlock* %rlock472 to i8*
  %184 = bitcast %struct.raw_spinlock* %.compoundliteral473 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %183, i8* %184, i64 4, i32 4, i1 false)
  br label %do.end477

do.end477:                                        ; preds = %do.body470
  br label %do.end478

do.end478:                                        ; preds = %do.end477
  %185 = load %struct.cfg80211_registered_device*, %struct.cfg80211_registered_device** %rdev, align 8
  %bss_list = getelementptr inbounds %struct.cfg80211_registered_device, %struct.cfg80211_registered_device* %185, i32 0, i32 21
  call void @INIT_LIST_HEAD(%struct.list_head* %bss_list)
  br label %do.body479

do.body479:                                       ; preds = %do.end478
  %186 = load %struct.cfg80211_registered_device*, %struct.cfg80211_registered_device** %rdev, align 8
  %scan_done_wk = getelementptr inbounds %struct.cfg80211_registered_device, %struct.cfg80211_registered_device* %186, i32 0, i32 29
  call void @__init_work(%struct.work_struct* %scan_done_wk, i32 0)
  %187 = load %struct.cfg80211_registered_device*, %struct.cfg80211_registered_device** %rdev, align 8
  %scan_done_wk480 = getelementptr inbounds %struct.cfg80211_registered_device, %struct.cfg80211_registered_device* %187, i32 0, i32 29
  %data = getelementptr inbounds %struct.work_struct, %struct.work_struct* %scan_done_wk480, i32 0, i32 0
  %counter482 = getelementptr inbounds %struct.atomic64_t, %struct.atomic64_t* %.compoundliteral481, i32 0, i32 0
  store i64 68719476704, i64* %counter482, align 8
  %188 = bitcast %struct.atomic64_t* %data to i8*
  %189 = bitcast %struct.atomic64_t* %.compoundliteral481 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %188, i8* %189, i64 8, i32 8, i1 false)
  %190 = load %struct.cfg80211_registered_device*, %struct.cfg80211_registered_device** %rdev, align 8
  %scan_done_wk483 = getelementptr inbounds %struct.cfg80211_registered_device, %struct.cfg80211_registered_device* %190, i32 0, i32 29
  %entry484 = getelementptr inbounds %struct.work_struct, %struct.work_struct* %scan_done_wk483, i32 0, i32 1
  call void @INIT_LIST_HEAD(%struct.list_head* %entry484)
  %191 = load %struct.cfg80211_registered_device*, %struct.cfg80211_registered_device** %rdev, align 8
  %scan_done_wk485 = getelementptr inbounds %struct.cfg80211_registered_device, %struct.cfg80211_registered_device* %191, i32 0, i32 29
  %func = getelementptr inbounds %struct.work_struct, %struct.work_struct* %scan_done_wk485, i32 0, i32 2
  store void (%struct.work_struct*)* @__cfg80211_scan_done, void (%struct.work_struct*)** %func, align 8
  br label %do.end486

do.end486:                                        ; preds = %do.body479
  br label %do.body487

do.body487:                                       ; preds = %do.end486
  %192 = load %struct.cfg80211_registered_device*, %struct.cfg80211_registered_device** %rdev, align 8
  %sched_scan_results_wk = getelementptr inbounds %struct.cfg80211_registered_device, %struct.cfg80211_registered_device* %192, i32 0, i32 30
  call void @__init_work(%struct.work_struct* %sched_scan_results_wk, i32 0)
  %193 = load %struct.cfg80211_registered_device*, %struct.cfg80211_registered_device** %rdev, align 8
  %sched_scan_results_wk488 = getelementptr inbounds %struct.cfg80211_registered_device, %struct.cfg80211_registered_device* %193, i32 0, i32 30
  %data489 = getelementptr inbounds %struct.work_struct, %struct.work_struct* %sched_scan_results_wk488, i32 0, i32 0
  %counter491 = getelementptr inbounds %struct.atomic64_t, %struct.atomic64_t* %.compoundliteral490, i32 0, i32 0
  store i64 68719476704, i64* %counter491, align 8
  %194 = bitcast %struct.atomic64_t* %data489 to i8*
  %195 = bitcast %struct.atomic64_t* %.compoundliteral490 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %194, i8* %195, i64 8, i32 8, i1 false)
  %196 = load %struct.cfg80211_registered_device*, %struct.cfg80211_registered_device** %rdev, align 8
  %sched_scan_results_wk492 = getelementptr inbounds %struct.cfg80211_registered_device, %struct.cfg80211_registered_device* %196, i32 0, i32 30
  %entry493 = getelementptr inbounds %struct.work_struct, %struct.work_struct* %sched_scan_results_wk492, i32 0, i32 1
  call void @INIT_LIST_HEAD(%struct.list_head* %entry493)
  %197 = load %struct.cfg80211_registered_device*, %struct.cfg80211_registered_device** %rdev, align 8
  %sched_scan_results_wk494 = getelementptr inbounds %struct.cfg80211_registered_device, %struct.cfg80211_registered_device* %197, i32 0, i32 30
  %func495 = getelementptr inbounds %struct.work_struct, %struct.work_struct* %sched_scan_results_wk494, i32 0, i32 2
  store void (%struct.work_struct*)* @__cfg80211_sched_scan_results, void (%struct.work_struct*)** %func495, align 8
  br label %do.end496

do.end496:                                        ; preds = %do.body487
  %198 = load %struct.cfg80211_registered_device*, %struct.cfg80211_registered_device** %rdev, align 8
  %mlme_unreg = getelementptr inbounds %struct.cfg80211_registered_device, %struct.cfg80211_registered_device* %198, i32 0, i32 15
  call void @INIT_LIST_HEAD(%struct.list_head* %mlme_unreg)
  br label %do.body497

do.body497:                                       ; preds = %do.end496
  %199 = load %struct.cfg80211_registered_device*, %struct.cfg80211_registered_device** %rdev, align 8
  %mlme_unreg_lock = getelementptr inbounds %struct.cfg80211_registered_device, %struct.cfg80211_registered_device* %199, i32 0, i32 16
  store %struct.spinlock* %mlme_unreg_lock, %struct.spinlock** %lock.addr.i639, align 8
  %200 = load %struct.spinlock*, %struct.spinlock** %lock.addr.i639, align 8
  %201 = getelementptr inbounds %struct.spinlock, %struct.spinlock* %200, i32 0, i32 0
  %rlock.i640 = bitcast %union.anon.1* %201 to %struct.raw_spinlock*
  br label %do.body499

do.body499:                                       ; preds = %do.body497
  %202 = load %struct.cfg80211_registered_device*, %struct.cfg80211_registered_device** %rdev, align 8
  %mlme_unreg_lock500 = getelementptr inbounds %struct.cfg80211_registered_device, %struct.cfg80211_registered_device* %202, i32 0, i32 16
  %203 = getelementptr inbounds %struct.spinlock, %struct.spinlock* %mlme_unreg_lock500, i32 0, i32 0
  %rlock501 = bitcast %union.anon.1* %203 to %struct.raw_spinlock*
  %raw_lock503 = getelementptr inbounds %struct.raw_spinlock, %struct.raw_spinlock* %.compoundliteral502, i32 0, i32 0
  %val504 = getelementptr inbounds %struct.qspinlock, %struct.qspinlock* %raw_lock503, i32 0, i32 0
  %counter505 = getelementptr inbounds %struct.atomic_t, %struct.atomic_t* %val504, i32 0, i32 0
  store i32 0, i32* %counter505, align 4
  %204 = bitcast %struct.raw_spinlock* %rlock501 to i8*
  %205 = bitcast %struct.raw_spinlock* %.compoundliteral502 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %204, i8* %205, i64 4, i32 4, i1 false)
  br label %do.end506

do.end506:                                        ; preds = %do.body499
  br label %do.end507

do.end507:                                        ; preds = %do.end506
  br label %do.body508

do.body508:                                       ; preds = %do.end507
  %206 = load %struct.cfg80211_registered_device*, %struct.cfg80211_registered_device** %rdev, align 8
  %mlme_unreg_wk = getelementptr inbounds %struct.cfg80211_registered_device, %struct.cfg80211_registered_device* %206, i32 0, i32 17
  call void @__init_work(%struct.work_struct* %mlme_unreg_wk, i32 0)
  %207 = load %struct.cfg80211_registered_device*, %struct.cfg80211_registered_device** %rdev, align 8
  %mlme_unreg_wk509 = getelementptr inbounds %struct.cfg80211_registered_device, %struct.cfg80211_registered_device* %207, i32 0, i32 17
  %data510 = getelementptr inbounds %struct.work_struct, %struct.work_struct* %mlme_unreg_wk509, i32 0, i32 0
  %counter512 = getelementptr inbounds %struct.atomic64_t, %struct.atomic64_t* %.compoundliteral511, i32 0, i32 0
  store i64 68719476704, i64* %counter512, align 8
  %208 = bitcast %struct.atomic64_t* %data510 to i8*
  %209 = bitcast %struct.atomic64_t* %.compoundliteral511 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %208, i8* %209, i64 8, i32 8, i1 false)
  %210 = load %struct.cfg80211_registered_device*, %struct.cfg80211_registered_device** %rdev, align 8
  %mlme_unreg_wk513 = getelementptr inbounds %struct.cfg80211_registered_device, %struct.cfg80211_registered_device* %210, i32 0, i32 17
  %entry514 = getelementptr inbounds %struct.work_struct, %struct.work_struct* %mlme_unreg_wk513, i32 0, i32 1
  call void @INIT_LIST_HEAD(%struct.list_head* %entry514)
  %211 = load %struct.cfg80211_registered_device*, %struct.cfg80211_registered_device** %rdev, align 8
  %mlme_unreg_wk515 = getelementptr inbounds %struct.cfg80211_registered_device, %struct.cfg80211_registered_device* %211, i32 0, i32 17
  %func516 = getelementptr inbounds %struct.work_struct, %struct.work_struct* %mlme_unreg_wk515, i32 0, i32 2
  store void (%struct.work_struct*)* @cfg80211_mlme_unreg_wk, void (%struct.work_struct*)** %func516, align 8
  br label %do.end517

do.end517:                                        ; preds = %do.body508
  br label %do.body518

do.body518:                                       ; preds = %do.end517
  br label %do.body519

do.body519:                                       ; preds = %do.body518
  %212 = load %struct.cfg80211_registered_device*, %struct.cfg80211_registered_device** %rdev, align 8
  %dfs_update_channels_wk = getelementptr inbounds %struct.cfg80211_registered_device, %struct.cfg80211_registered_device* %212, i32 0, i32 34
  %work = getelementptr inbounds %struct.delayed_work, %struct.delayed_work* %dfs_update_channels_wk, i32 0, i32 0
  call void @__init_work(%struct.work_struct* %work, i32 0)
  %213 = load %struct.cfg80211_registered_device*, %struct.cfg80211_registered_device** %rdev, align 8
  %dfs_update_channels_wk520 = getelementptr inbounds %struct.cfg80211_registered_device, %struct.cfg80211_registered_device* %213, i32 0, i32 34
  %work521 = getelementptr inbounds %struct.delayed_work, %struct.delayed_work* %dfs_update_channels_wk520, i32 0, i32 0
  %data522 = getelementptr inbounds %struct.work_struct, %struct.work_struct* %work521, i32 0, i32 0
  %counter524 = getelementptr inbounds %struct.atomic64_t, %struct.atomic64_t* %.compoundliteral523, i32 0, i32 0
  store i64 68719476704, i64* %counter524, align 8
  %214 = bitcast %struct.atomic64_t* %data522 to i8*
  %215 = bitcast %struct.atomic64_t* %.compoundliteral523 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %214, i8* %215, i64 8, i32 8, i1 false)
  %216 = load %struct.cfg80211_registered_device*, %struct.cfg80211_registered_device** %rdev, align 8
  %dfs_update_channels_wk525 = getelementptr inbounds %struct.cfg80211_registered_device, %struct.cfg80211_registered_device* %216, i32 0, i32 34
  %work526 = getelementptr inbounds %struct.delayed_work, %struct.delayed_work* %dfs_update_channels_wk525, i32 0, i32 0
  %entry527 = getelementptr inbounds %struct.work_struct, %struct.work_struct* %work526, i32 0, i32 1
  call void @INIT_LIST_HEAD(%struct.list_head* %entry527)
  %217 = load %struct.cfg80211_registered_device*, %struct.cfg80211_registered_device** %rdev, align 8
  %dfs_update_channels_wk528 = getelementptr inbounds %struct.cfg80211_registered_device, %struct.cfg80211_registered_device* %217, i32 0, i32 34
  %work529 = getelementptr inbounds %struct.delayed_work, %struct.delayed_work* %dfs_update_channels_wk528, i32 0, i32 0
  %func530 = getelementptr inbounds %struct.work_struct, %struct.work_struct* %work529, i32 0, i32 2
  store void (%struct.work_struct*)* @cfg80211_dfs_channels_update_work, void (%struct.work_struct*)** %func530, align 8
  br label %do.end531

do.end531:                                        ; preds = %do.body519
  br label %do.body532

do.body532:                                       ; preds = %do.end531
  %218 = load %struct.cfg80211_registered_device*, %struct.cfg80211_registered_device** %rdev, align 8
  %dfs_update_channels_wk533 = getelementptr inbounds %struct.cfg80211_registered_device, %struct.cfg80211_registered_device* %218, i32 0, i32 34
  %timer = getelementptr inbounds %struct.delayed_work, %struct.delayed_work* %dfs_update_channels_wk533, i32 0, i32 1
  call void @init_timer_key(%struct.timer_list* %timer, i32 2097152, i8* null, %struct.lock_class_key* null)
  %219 = load %struct.cfg80211_registered_device*, %struct.cfg80211_registered_device** %rdev, align 8
  %dfs_update_channels_wk534 = getelementptr inbounds %struct.cfg80211_registered_device, %struct.cfg80211_registered_device* %219, i32 0, i32 34
  %timer535 = getelementptr inbounds %struct.delayed_work, %struct.delayed_work* %dfs_update_channels_wk534, i32 0, i32 1
  %function = getelementptr inbounds %struct.timer_list, %struct.timer_list* %timer535, i32 0, i32 2
  store void (i64)* @delayed_work_timer_fn, void (i64)** %function, align 8
  %220 = load %struct.cfg80211_registered_device*, %struct.cfg80211_registered_device** %rdev, align 8
  %dfs_update_channels_wk536 = getelementptr inbounds %struct.cfg80211_registered_device, %struct.cfg80211_registered_device* %220, i32 0, i32 34
  %221 = ptrtoint %struct.delayed_work* %dfs_update_channels_wk536 to i64
  %222 = load %struct.cfg80211_registered_device*, %struct.cfg80211_registered_device** %rdev, align 8
  %dfs_update_channels_wk537 = getelementptr inbounds %struct.cfg80211_registered_device, %struct.cfg80211_registered_device* %222, i32 0, i32 34
  %timer538 = getelementptr inbounds %struct.delayed_work, %struct.delayed_work* %dfs_update_channels_wk537, i32 0, i32 1
  %data539 = getelementptr inbounds %struct.timer_list, %struct.timer_list* %timer538, i32 0, i32 3
  store i64 %221, i64* %data539, align 32
  br label %do.end540

do.end540:                                        ; preds = %do.body532
  br label %do.end541

do.end541:                                        ; preds = %do.end540
  %223 = load %struct.cfg80211_registered_device*, %struct.cfg80211_registered_device** %rdev, align 8
  %wiphy542 = getelementptr inbounds %struct.cfg80211_registered_device, %struct.cfg80211_registered_device* %223, i32 0, i32 42
  %dev543 = getelementptr inbounds %struct.wiphy, %struct.wiphy* %wiphy542, i32 0, i32 50
  call void @device_initialize(%struct.device* %dev543)
  %224 = load %struct.cfg80211_registered_device*, %struct.cfg80211_registered_device** %rdev, align 8
  %wiphy544 = getelementptr inbounds %struct.cfg80211_registered_device, %struct.cfg80211_registered_device* %224, i32 0, i32 42
  %dev545 = getelementptr inbounds %struct.wiphy, %struct.wiphy* %wiphy544, i32 0, i32 50
  %class = getelementptr inbounds %struct.device, %struct.device* %dev545, i32 0, i32 31
  store %struct.class* @ieee80211_class, %struct.class** %class, align 8
  %225 = load %struct.cfg80211_registered_device*, %struct.cfg80211_registered_device** %rdev, align 8
  %226 = bitcast %struct.cfg80211_registered_device* %225 to i8*
  %227 = load %struct.cfg80211_registered_device*, %struct.cfg80211_registered_device** %rdev, align 8
  %wiphy546 = getelementptr inbounds %struct.cfg80211_registered_device, %struct.cfg80211_registered_device* %227, i32 0, i32 42
  %dev547 = getelementptr inbounds %struct.wiphy, %struct.wiphy* %wiphy546, i32 0, i32 50
  %platform_data = getelementptr inbounds %struct.device, %struct.device* %dev547, i32 0, i32 8
  store i8* %226, i8** %platform_data, align 16
  %228 = load %struct.cfg80211_registered_device*, %struct.cfg80211_registered_device** %rdev, align 8
  %wiphy548 = getelementptr inbounds %struct.cfg80211_registered_device, %struct.cfg80211_registered_device* %228, i32 0, i32 42
  %dev549 = getelementptr inbounds %struct.wiphy, %struct.wiphy* %wiphy548, i32 0, i32 50
  call void @device_enable_async_suspend(%struct.device* %dev549)
  %229 = load %struct.cfg80211_registered_device*, %struct.cfg80211_registered_device** %rdev, align 8
  %destroy_list = getelementptr inbounds %struct.cfg80211_registered_device, %struct.cfg80211_registered_device* %229, i32 0, i32 38
  call void @INIT_LIST_HEAD(%struct.list_head* %destroy_list)
  br label %do.body550

do.body550:                                       ; preds = %do.end541
  %230 = load %struct.cfg80211_registered_device*, %struct.cfg80211_registered_device** %rdev, align 8
  %destroy_list_lock = getelementptr inbounds %struct.cfg80211_registered_device, %struct.cfg80211_registered_device* %230, i32 0, i32 37
  store %struct.spinlock* %destroy_list_lock, %struct.spinlock** %lock.addr.i641, align 8
  %231 = load %struct.spinlock*, %struct.spinlock** %lock.addr.i641, align 8
  %232 = getelementptr inbounds %struct.spinlock, %struct.spinlock* %231, i32 0, i32 0
  %rlock.i642 = bitcast %union.anon.1* %232 to %struct.raw_spinlock*
  br label %do.body552

do.body552:                                       ; preds = %do.body550
  %233 = load %struct.cfg80211_registered_device*, %struct.cfg80211_registered_device** %rdev, align 8
  %destroy_list_lock553 = getelementptr inbounds %struct.cfg80211_registered_device, %struct.cfg80211_registered_device* %233, i32 0, i32 37
  %234 = getelementptr inbounds %struct.spinlock, %struct.spinlock* %destroy_list_lock553, i32 0, i32 0
  %rlock554 = bitcast %union.anon.1* %234 to %struct.raw_spinlock*
  %raw_lock556 = getelementptr inbounds %struct.raw_spinlock, %struct.raw_spinlock* %.compoundliteral555, i32 0, i32 0
  %val557 = getelementptr inbounds %struct.qspinlock, %struct.qspinlock* %raw_lock556, i32 0, i32 0
  %counter558 = getelementptr inbounds %struct.atomic_t, %struct.atomic_t* %val557, i32 0, i32 0
  store i32 0, i32* %counter558, align 4
  %235 = bitcast %struct.raw_spinlock* %rlock554 to i8*
  %236 = bitcast %struct.raw_spinlock* %.compoundliteral555 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %235, i8* %236, i64 4, i32 4, i1 false)
  br label %do.end559

do.end559:                                        ; preds = %do.body552
  br label %do.end560

do.end560:                                        ; preds = %do.end559
  br label %do.body561

do.body561:                                       ; preds = %do.end560
  %237 = load %struct.cfg80211_registered_device*, %struct.cfg80211_registered_device** %rdev, align 8
  %destroy_work = getelementptr inbounds %struct.cfg80211_registered_device, %struct.cfg80211_registered_device* %237, i32 0, i32 39
  call void @__init_work(%struct.work_struct* %destroy_work, i32 0)
  %238 = load %struct.cfg80211_registered_device*, %struct.cfg80211_registered_device** %rdev, align 8
  %destroy_work562 = getelementptr inbounds %struct.cfg80211_registered_device, %struct.cfg80211_registered_device* %238, i32 0, i32 39
  %data563 = getelementptr inbounds %struct.work_struct, %struct.work_struct* %destroy_work562, i32 0, i32 0
  %counter565 = getelementptr inbounds %struct.atomic64_t, %struct.atomic64_t* %.compoundliteral564, i32 0, i32 0
  store i64 68719476704, i64* %counter565, align 8
  %239 = bitcast %struct.atomic64_t* %data563 to i8*
  %240 = bitcast %struct.atomic64_t* %.compoundliteral564 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %239, i8* %240, i64 8, i32 8, i1 false)
  %241 = load %struct.cfg80211_registered_device*, %struct.cfg80211_registered_device** %rdev, align 8
  %destroy_work566 = getelementptr inbounds %struct.cfg80211_registered_device, %struct.cfg80211_registered_device* %241, i32 0, i32 39
  %entry567 = getelementptr inbounds %struct.work_struct, %struct.work_struct* %destroy_work566, i32 0, i32 1
  call void @INIT_LIST_HEAD(%struct.list_head* %entry567)
  %242 = load %struct.cfg80211_registered_device*, %struct.cfg80211_registered_device** %rdev, align 8
  %destroy_work568 = getelementptr inbounds %struct.cfg80211_registered_device, %struct.cfg80211_registered_device* %242, i32 0, i32 39
  %func569 = getelementptr inbounds %struct.work_struct, %struct.work_struct* %destroy_work568, i32 0, i32 2
  store void (%struct.work_struct*)* @cfg80211_destroy_iface_wk, void (%struct.work_struct*)** %func569, align 8
  br label %do.end570

do.end570:                                        ; preds = %do.body561
  br label %do.body571

do.body571:                                       ; preds = %do.end570
  %243 = load %struct.cfg80211_registered_device*, %struct.cfg80211_registered_device** %rdev, align 8
  %sched_scan_stop_wk = getelementptr inbounds %struct.cfg80211_registered_device, %struct.cfg80211_registered_device* %243, i32 0, i32 40
  call void @__init_work(%struct.work_struct* %sched_scan_stop_wk, i32 0)
  %244 = load %struct.cfg80211_registered_device*, %struct.cfg80211_registered_device** %rdev, align 8
  %sched_scan_stop_wk572 = getelementptr inbounds %struct.cfg80211_registered_device, %struct.cfg80211_registered_device* %244, i32 0, i32 40
  %data573 = getelementptr inbounds %struct.work_struct, %struct.work_struct* %sched_scan_stop_wk572, i32 0, i32 0
  %counter575 = getelementptr inbounds %struct.atomic64_t, %struct.atomic64_t* %.compoundliteral574, i32 0, i32 0
  store i64 68719476704, i64* %counter575, align 8
  %245 = bitcast %struct.atomic64_t* %data573 to i8*
  %246 = bitcast %struct.atomic64_t* %.compoundliteral574 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %245, i8* %246, i64 8, i32 8, i1 false)
  %247 = load %struct.cfg80211_registered_device*, %struct.cfg80211_registered_device** %rdev, align 8
  %sched_scan_stop_wk576 = getelementptr inbounds %struct.cfg80211_registered_device, %struct.cfg80211_registered_device* %247, i32 0, i32 40
  %entry577 = getelementptr inbounds %struct.work_struct, %struct.work_struct* %sched_scan_stop_wk576, i32 0, i32 1
  call void @INIT_LIST_HEAD(%struct.list_head* %entry577)
  %248 = load %struct.cfg80211_registered_device*, %struct.cfg80211_registered_device** %rdev, align 8
  %sched_scan_stop_wk578 = getelementptr inbounds %struct.cfg80211_registered_device, %struct.cfg80211_registered_device* %248, i32 0, i32 40
  %func579 = getelementptr inbounds %struct.work_struct, %struct.work_struct* %sched_scan_stop_wk578, i32 0, i32 2
  store void (%struct.work_struct*)* @cfg80211_sched_scan_stop_wk, void (%struct.work_struct*)** %func579, align 8
  br label %do.end580

do.end580:                                        ; preds = %do.body571
  %249 = load %struct.cfg80211_registered_device*, %struct.cfg80211_registered_device** %rdev, align 8
  %wiphy581 = getelementptr inbounds %struct.cfg80211_registered_device, %struct.cfg80211_registered_device* %249, i32 0, i32 42
  %flags = getelementptr inbounds %struct.wiphy, %struct.wiphy* %wiphy581, i32 0, i32 10
  %250 = load i32, i32* %flags, align 4
  %or = or i32 %250, 16
  store i32 %or, i32* %flags, align 4
  %251 = load %struct.cfg80211_registered_device*, %struct.cfg80211_registered_device** %rdev, align 8
  %wiphy582 = getelementptr inbounds %struct.cfg80211_registered_device, %struct.cfg80211_registered_device* %251, i32 0, i32 42
  call void @wiphy_net_set(%struct.wiphy* %wiphy582, %struct.net* @init_net)
  %252 = load %struct.cfg80211_registered_device*, %struct.cfg80211_registered_device** %rdev, align 8
  %rfkill_ops = getelementptr inbounds %struct.cfg80211_registered_device, %struct.cfg80211_registered_device* %252, i32 0, i32 2
  %set_block = getelementptr inbounds %struct.rfkill_ops, %struct.rfkill_ops* %rfkill_ops, i32 0, i32 2
  store i32 (i8*, i1)* @cfg80211_rfkill_set_block, i32 (i8*, i1)** %set_block, align 8
  %253 = load %struct.cfg80211_registered_device*, %struct.cfg80211_registered_device** %rdev, align 8
  %wiphy583 = getelementptr inbounds %struct.cfg80211_registered_device, %struct.cfg80211_registered_device* %253, i32 0, i32 42
  %dev584 = getelementptr inbounds %struct.wiphy, %struct.wiphy* %wiphy583, i32 0, i32 50
  %call585 = call i8* @dev_name(%struct.device* %dev584)
  %254 = load %struct.cfg80211_registered_device*, %struct.cfg80211_registered_device** %rdev, align 8
  %wiphy586 = getelementptr inbounds %struct.cfg80211_registered_device, %struct.cfg80211_registered_device* %254, i32 0, i32 42
  %dev587 = getelementptr inbounds %struct.wiphy, %struct.wiphy* %wiphy586, i32 0, i32 50
  %255 = load %struct.cfg80211_registered_device*, %struct.cfg80211_registered_device** %rdev, align 8
  %rfkill_ops588 = getelementptr inbounds %struct.cfg80211_registered_device, %struct.cfg80211_registered_device* %255, i32 0, i32 2
  %256 = load %struct.cfg80211_registered_device*, %struct.cfg80211_registered_device** %rdev, align 8
  %257 = bitcast %struct.cfg80211_registered_device* %256 to i8*
  %call589 = call %struct.rfkill* @rfkill_alloc(i8* %call585, %struct.device* %dev587, i32 1, %struct.rfkill_ops* %rfkill_ops588, i8* %257)
  %258 = load %struct.cfg80211_registered_device*, %struct.cfg80211_registered_device** %rdev, align 8
  %rfkill = getelementptr inbounds %struct.cfg80211_registered_device, %struct.cfg80211_registered_device* %258, i32 0, i32 3
  store %struct.rfkill* %call589, %struct.rfkill** %rfkill, align 16
  %259 = load %struct.cfg80211_registered_device*, %struct.cfg80211_registered_device** %rdev, align 8
  %rfkill590 = getelementptr inbounds %struct.cfg80211_registered_device, %struct.cfg80211_registered_device* %259, i32 0, i32 3
  %260 = load %struct.rfkill*, %struct.rfkill** %rfkill590, align 16
  %tobool591 = icmp ne %struct.rfkill* %260, null
  br i1 %tobool591, label %if.end593, label %if.then592

if.then592:                                       ; preds = %do.end580
  %261 = load %struct.cfg80211_registered_device*, %struct.cfg80211_registered_device** %rdev, align 8
  %262 = bitcast %struct.cfg80211_registered_device* %261 to i8*
  call void @kfree(i8* %262)
  store %struct.wiphy* null, %struct.wiphy** %retval, align 8
  br label %return

if.end593:                                        ; preds = %do.end580
  br label %do.body594

do.body594:                                       ; preds = %if.end593
  %263 = load %struct.cfg80211_registered_device*, %struct.cfg80211_registered_device** %rdev, align 8
  %rfkill_sync = getelementptr inbounds %struct.cfg80211_registered_device, %struct.cfg80211_registered_device* %263, i32 0, i32 4
  call void @__init_work(%struct.work_struct* %rfkill_sync, i32 0)
  %264 = load %struct.cfg80211_registered_device*, %struct.cfg80211_registered_device** %rdev, align 8
  %rfkill_sync595 = getelementptr inbounds %struct.cfg80211_registered_device, %struct.cfg80211_registered_device* %264, i32 0, i32 4
  %data596 = getelementptr inbounds %struct.work_struct, %struct.work_struct* %rfkill_sync595, i32 0, i32 0
  %counter598 = getelementptr inbounds %struct.atomic64_t, %struct.atomic64_t* %.compoundliteral597, i32 0, i32 0
  store i64 68719476704, i64* %counter598, align 8
  %265 = bitcast %struct.atomic64_t* %data596 to i8*
  %266 = bitcast %struct.atomic64_t* %.compoundliteral597 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %265, i8* %266, i64 8, i32 8, i1 false)
  %267 = load %struct.cfg80211_registered_device*, %struct.cfg80211_registered_device** %rdev, align 8
  %rfkill_sync599 = getelementptr inbounds %struct.cfg80211_registered_device, %struct.cfg80211_registered_device* %267, i32 0, i32 4
  %entry600 = getelementptr inbounds %struct.work_struct, %struct.work_struct* %rfkill_sync599, i32 0, i32 1
  call void @INIT_LIST_HEAD(%struct.list_head* %entry600)
  %268 = load %struct.cfg80211_registered_device*, %struct.cfg80211_registered_device** %rdev, align 8
  %rfkill_sync601 = getelementptr inbounds %struct.cfg80211_registered_device, %struct.cfg80211_registered_device* %268, i32 0, i32 4
  %func602 = getelementptr inbounds %struct.work_struct, %struct.work_struct* %rfkill_sync601, i32 0, i32 2
  store void (%struct.work_struct*)* @cfg80211_rfkill_sync_work, void (%struct.work_struct*)** %func602, align 8
  br label %do.end603

do.end603:                                        ; preds = %do.body594
  br label %do.body604

do.body604:                                       ; preds = %do.end603
  %269 = load %struct.cfg80211_registered_device*, %struct.cfg80211_registered_device** %rdev, align 8
  %conn_work = getelementptr inbounds %struct.cfg80211_registered_device, %struct.cfg80211_registered_device* %269, i32 0, i32 32
  call void @__init_work(%struct.work_struct* %conn_work, i32 0)
  %270 = load %struct.cfg80211_registered_device*, %struct.cfg80211_registered_device** %rdev, align 8
  %conn_work605 = getelementptr inbounds %struct.cfg80211_registered_device, %struct.cfg80211_registered_device* %270, i32 0, i32 32
  %data606 = getelementptr inbounds %struct.work_struct, %struct.work_struct* %conn_work605, i32 0, i32 0
  %counter608 = getelementptr inbounds %struct.atomic64_t, %struct.atomic64_t* %.compoundliteral607, i32 0, i32 0
  store i64 68719476704, i64* %counter608, align 8
  %271 = bitcast %struct.atomic64_t* %data606 to i8*
  %272 = bitcast %struct.atomic64_t* %.compoundliteral607 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %271, i8* %272, i64 8, i32 8, i1 false)
  %273 = load %struct.cfg80211_registered_device*, %struct.cfg80211_registered_device** %rdev, align 8
  %conn_work609 = getelementptr inbounds %struct.cfg80211_registered_device, %struct.cfg80211_registered_device* %273, i32 0, i32 32
  %entry610 = getelementptr inbounds %struct.work_struct, %struct.work_struct* %conn_work609, i32 0, i32 1
  call void @INIT_LIST_HEAD(%struct.list_head* %entry610)
  %274 = load %struct.cfg80211_registered_device*, %struct.cfg80211_registered_device** %rdev, align 8
  %conn_work611 = getelementptr inbounds %struct.cfg80211_registered_device, %struct.cfg80211_registered_device* %274, i32 0, i32 32
  %func612 = getelementptr inbounds %struct.work_struct, %struct.work_struct* %conn_work611, i32 0, i32 2
  store void (%struct.work_struct*)* @cfg80211_conn_work, void (%struct.work_struct*)** %func612, align 8
  br label %do.end613

do.end613:                                        ; preds = %do.body604
  br label %do.body614

do.body614:                                       ; preds = %do.end613
  %275 = load %struct.cfg80211_registered_device*, %struct.cfg80211_registered_device** %rdev, align 8
  %event_work = getelementptr inbounds %struct.cfg80211_registered_device, %struct.cfg80211_registered_device* %275, i32 0, i32 33
  call void @__init_work(%struct.work_struct* %event_work, i32 0)
  %276 = load %struct.cfg80211_registered_device*, %struct.cfg80211_registered_device** %rdev, align 8
  %event_work615 = getelementptr inbounds %struct.cfg80211_registered_device, %struct.cfg80211_registered_device* %276, i32 0, i32 33
  %data616 = getelementptr inbounds %struct.work_struct, %struct.work_struct* %event_work615, i32 0, i32 0
  %counter618 = getelementptr inbounds %struct.atomic64_t, %struct.atomic64_t* %.compoundliteral617, i32 0, i32 0
  store i64 68719476704, i64* %counter618, align 8
  %277 = bitcast %struct.atomic64_t* %data616 to i8*
  %278 = bitcast %struct.atomic64_t* %.compoundliteral617 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %277, i8* %278, i64 8, i32 8, i1 false)
  %279 = load %struct.cfg80211_registered_device*, %struct.cfg80211_registered_device** %rdev, align 8
  %event_work619 = getelementptr inbounds %struct.cfg80211_registered_device, %struct.cfg80211_registered_device* %279, i32 0, i32 33
  %entry620 = getelementptr inbounds %struct.work_struct, %struct.work_struct* %event_work619, i32 0, i32 1
  call void @INIT_LIST_HEAD(%struct.list_head* %entry620)
  %280 = load %struct.cfg80211_registered_device*, %struct.cfg80211_registered_device** %rdev, align 8
  %event_work621 = getelementptr inbounds %struct.cfg80211_registered_device, %struct.cfg80211_registered_device* %280, i32 0, i32 33
  %func622 = getelementptr inbounds %struct.work_struct, %struct.work_struct* %event_work621, i32 0, i32 2
  store void (%struct.work_struct*)* @cfg80211_event_work, void (%struct.work_struct*)** %func622, align 8
  br label %do.end623

do.end623:                                        ; preds = %do.body614
  br label %do.body624

do.body624:                                       ; preds = %do.end623
  %281 = load %struct.cfg80211_registered_device*, %struct.cfg80211_registered_device** %rdev, align 8
  %dev_wait = getelementptr inbounds %struct.cfg80211_registered_device, %struct.cfg80211_registered_device* %281, i32 0, i32 12
  call void @__init_waitqueue_head(%struct.__wait_queue_head* %dev_wait, i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.6, i32 0, i32 0), %struct.lock_class_key* @wiphy_new_nm.__key)
  br label %do.end625

do.end625:                                        ; preds = %do.body624
  %282 = load %struct.cfg80211_registered_device*, %struct.cfg80211_registered_device** %rdev, align 8
  %wiphy626 = getelementptr inbounds %struct.cfg80211_registered_device, %struct.cfg80211_registered_device* %282, i32 0, i32 42
  %retry_short = getelementptr inbounds %struct.wiphy, %struct.wiphy* %wiphy626, i32 0, i32 27
  store i8 7, i8* %retry_short, align 16
  %283 = load %struct.cfg80211_registered_device*, %struct.cfg80211_registered_device** %rdev, align 8
  %wiphy627 = getelementptr inbounds %struct.cfg80211_registered_device, %struct.cfg80211_registered_device* %283, i32 0, i32 42
  %retry_long = getelementptr inbounds %struct.wiphy, %struct.wiphy* %wiphy627, i32 0, i32 28
  store i8 4, i8* %retry_long, align 1
  %284 = load %struct.cfg80211_registered_device*, %struct.cfg80211_registered_device** %rdev, align 8
  %wiphy628 = getelementptr inbounds %struct.cfg80211_registered_device, %struct.cfg80211_registered_device* %284, i32 0, i32 42
  %frag_threshold = getelementptr inbounds %struct.wiphy, %struct.wiphy* %wiphy628, i32 0, i32 29
  store i32 -1, i32* %frag_threshold, align 4
  %285 = load %struct.cfg80211_registered_device*, %struct.cfg80211_registered_device** %rdev, align 8
  %wiphy629 = getelementptr inbounds %struct.cfg80211_registered_device, %struct.cfg80211_registered_device* %285, i32 0, i32 42
  %rts_threshold = getelementptr inbounds %struct.wiphy, %struct.wiphy* %wiphy629, i32 0, i32 30
  store i32 -1, i32* %rts_threshold, align 8
  %286 = load %struct.cfg80211_registered_device*, %struct.cfg80211_registered_device** %rdev, align 8
  %wiphy630 = getelementptr inbounds %struct.cfg80211_registered_device, %struct.cfg80211_registered_device* %286, i32 0, i32 42
  %coverage_class = getelementptr inbounds %struct.wiphy, %struct.wiphy* %wiphy630, i32 0, i32 31
  store i8 0, i8* %coverage_class, align 4
  %287 = load %struct.cfg80211_registered_device*, %struct.cfg80211_registered_device** %rdev, align 8
  %wiphy631 = getelementptr inbounds %struct.cfg80211_registered_device, %struct.cfg80211_registered_device* %287, i32 0, i32 42
  %max_num_csa_counters = getelementptr inbounds %struct.wiphy, %struct.wiphy* %wiphy631, i32 0, i32 63
  store i8 1, i8* %max_num_csa_counters, align 2
  %288 = load %struct.cfg80211_registered_device*, %struct.cfg80211_registered_device** %rdev, align 8
  %wiphy632 = getelementptr inbounds %struct.cfg80211_registered_device, %struct.cfg80211_registered_device* %288, i32 0, i32 42
  %max_sched_scan_plans = getelementptr inbounds %struct.wiphy, %struct.wiphy* %wiphy632, i32 0, i32 22
  store i32 1, i32* %max_sched_scan_plans, align 8
  %289 = load %struct.cfg80211_registered_device*, %struct.cfg80211_registered_device** %rdev, align 8
  %wiphy633 = getelementptr inbounds %struct.cfg80211_registered_device, %struct.cfg80211_registered_device* %289, i32 0, i32 42
  %max_sched_scan_plan_interval = getelementptr inbounds %struct.wiphy, %struct.wiphy* %wiphy633, i32 0, i32 23
  store i32 -1, i32* %max_sched_scan_plan_interval, align 4
  %290 = load %struct.cfg80211_registered_device*, %struct.cfg80211_registered_device** %rdev, align 8
  %wiphy634 = getelementptr inbounds %struct.cfg80211_registered_device, %struct.cfg80211_registered_device* %290, i32 0, i32 42
  store %struct.wiphy* %wiphy634, %struct.wiphy** %retval, align 8
  br label %return

return:                                           ; preds = %do.end625, %if.then592, %if.then442, %if.then430
  %291 = load %struct.wiphy*, %struct.wiphy** %retval, align 8
  ret %struct.wiphy* %291
}

; Function Attrs: noinline nounwind optnone uwtable
define internal i8* @kzalloc(i64 %size, i32 %flags) #0 {
entry:
  %size.addr.i = alloca i64, align 8
  %flags.addr.i = alloca i32, align 4
  %size.addr = alloca i64, align 8
  %flags.addr = alloca i32, align 4
  store i64 %size, i64* %size.addr, align 8
  store i32 %flags, i32* %flags.addr, align 4
  %0 = load i64, i64* %size.addr, align 8
  %1 = load i32, i32* %flags.addr, align 4
  %or = or i32 %1, 32768
  store i64 %0, i64* %size.addr.i, align 8
  store i32 %or, i32* %flags.addr.i, align 4
  %2 = load i64, i64* %size.addr.i, align 8
  %3 = load i32, i32* %flags.addr.i, align 4
  %call.i = call noalias i8* @__kmalloc(i64 %2, i32 %3) #3
  ret i8* %call.i
}

declare void @rtnl_lock() #1

declare void @rtnl_unlock() #1

declare i32 @dev_set_name(%struct.device*, i8*, ...) #1

; Function Attrs: noinline nounwind optnone uwtable
define internal void @INIT_LIST_HEAD(%struct.list_head* %list) #0 {
entry:
  %p.addr.i = alloca i8*, align 8
  %res.addr.i = alloca i8*, align 8
  %size.addr.i = alloca i32, align 4
  %list.addr = alloca %struct.list_head*, align 8
  %__u = alloca %union.anon.94, align 8
  %tmp = alloca %struct.list_head*, align 8
  store %struct.list_head* %list, %struct.list_head** %list.addr, align 8
  %__val = bitcast %union.anon.94* %__u to %struct.list_head**
  %0 = load %struct.list_head*, %struct.list_head** %list.addr, align 8
  store %struct.list_head* %0, %struct.list_head** %__val, align 8
  %1 = load %struct.list_head*, %struct.list_head** %list.addr, align 8
  %next = getelementptr inbounds %struct.list_head, %struct.list_head* %1, i32 0, i32 0
  %2 = bitcast %struct.list_head** %next to i8*
  %__c = bitcast %union.anon.94* %__u to [1 x i8]*
  %arraydecay = getelementptr inbounds [1 x i8], [1 x i8]* %__c, i32 0, i32 0
  store i8* %2, i8** %p.addr.i, align 8
  store i8* %arraydecay, i8** %res.addr.i, align 8
  store i32 8, i32* %size.addr.i, align 4
  %3 = load i32, i32* %size.addr.i, align 4
  br label %NodeBlock9

NodeBlock9:                                       ; preds = %entry
  %Pivot10 = icmp slt i32 %3, 4
  br i1 %Pivot10, label %NodeBlock, label %NodeBlock7

NodeBlock7:                                       ; preds = %NodeBlock9
  %Pivot8 = icmp slt i32 %3, 8
  br i1 %Pivot8, label %LeafBlock3, label %LeafBlock5

LeafBlock5:                                       ; preds = %NodeBlock7
  %SwitchLeaf6 = icmp eq i32 %3, 8
  br i1 %SwitchLeaf6, label %sw.bb3.i, label %NewDefault

LeafBlock3:                                       ; preds = %NodeBlock7
  %SwitchLeaf4 = icmp eq i32 %3, 4
  br i1 %SwitchLeaf4, label %sw.bb2.i, label %NewDefault

NodeBlock:                                        ; preds = %NodeBlock9
  %Pivot = icmp slt i32 %3, 2
  br i1 %Pivot, label %LeafBlock, label %LeafBlock1

LeafBlock1:                                       ; preds = %NodeBlock
  %SwitchLeaf2 = icmp eq i32 %3, 2
  br i1 %SwitchLeaf2, label %sw.bb1.i, label %NewDefault

LeafBlock:                                        ; preds = %NodeBlock
  %SwitchLeaf = icmp eq i32 %3, 1
  br i1 %SwitchLeaf, label %sw.bb.i, label %NewDefault

sw.bb.i:                                          ; preds = %LeafBlock
  %4 = load i8*, i8** %res.addr.i, align 8
  %5 = load i8, i8* %4, align 1
  %6 = load i8*, i8** %p.addr.i, align 8
  store volatile i8 %5, i8* %6, align 1
  br label %__write_once_size.exit

sw.bb1.i:                                         ; preds = %LeafBlock1
  %7 = load i8*, i8** %res.addr.i, align 8
  %8 = bitcast i8* %7 to i16*
  %9 = load i16, i16* %8, align 2
  %10 = load i8*, i8** %p.addr.i, align 8
  %11 = bitcast i8* %10 to i16*
  store volatile i16 %9, i16* %11, align 2
  br label %__write_once_size.exit

sw.bb2.i:                                         ; preds = %LeafBlock3
  %12 = load i8*, i8** %res.addr.i, align 8
  %13 = bitcast i8* %12 to i32*
  %14 = load i32, i32* %13, align 4
  %15 = load i8*, i8** %p.addr.i, align 8
  %16 = bitcast i8* %15 to i32*
  store volatile i32 %14, i32* %16, align 4
  br label %__write_once_size.exit

sw.bb3.i:                                         ; preds = %LeafBlock5
  %17 = load i8*, i8** %res.addr.i, align 8
  %18 = bitcast i8* %17 to i64*
  %19 = load i64, i64* %18, align 8
  %20 = load i8*, i8** %p.addr.i, align 8
  %21 = bitcast i8* %20 to i64*
  store volatile i64 %19, i64* %21, align 8
  br label %__write_once_size.exit

NewDefault:                                       ; preds = %LeafBlock5, %LeafBlock3, %LeafBlock1, %LeafBlock
  br label %sw.default.i

sw.default.i:                                     ; preds = %NewDefault
  call void asm sideeffect "", "~{memory},~{dirflag},~{fpsr},~{flags}"() #3, !srcloc !7
  %22 = load i8*, i8** %p.addr.i, align 8
  %23 = load i8*, i8** %res.addr.i, align 8
  %24 = load i32, i32* %size.addr.i, align 4
  %conv.i = sext i32 %24 to i64
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %22, i8* %23, i64 %conv.i, i32 1, i1 false) #3
  call void asm sideeffect "", "~{memory},~{dirflag},~{fpsr},~{flags}"() #3, !srcloc !8
  br label %__write_once_size.exit

__write_once_size.exit:                           ; preds = %sw.default.i, %sw.bb3.i, %sw.bb2.i, %sw.bb1.i, %sw.bb.i
  %__val1 = bitcast %union.anon.94* %__u to %struct.list_head**
  %25 = load %struct.list_head*, %struct.list_head** %__val1, align 8
  store %struct.list_head* %25, %struct.list_head** %tmp, align 8
  %26 = load %struct.list_head*, %struct.list_head** %tmp, align 8
  %27 = load %struct.list_head*, %struct.list_head** %list.addr, align 8
  %28 = load %struct.list_head*, %struct.list_head** %list.addr, align 8
  %prev = getelementptr inbounds %struct.list_head, %struct.list_head* %28, i32 0, i32 1
  store %struct.list_head* %27, %struct.list_head** %prev, align 8
  ret void
}

; Function Attrs: argmemonly nounwind
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* nocapture writeonly, i8* nocapture readonly, i64, i32, i1) #2

; Function Attrs: noinline nounwind optnone uwtable
define internal void @__init_work(%struct.work_struct* %work, i32 %onstack) #0 {
entry:
  %work.addr = alloca %struct.work_struct*, align 8
  %onstack.addr = alloca i32, align 4
  store %struct.work_struct* %work, %struct.work_struct** %work.addr, align 8
  store i32 %onstack, i32* %onstack.addr, align 4
  ret void
}

declare void @__cfg80211_scan_done(%struct.work_struct*) #1

declare void @__cfg80211_sched_scan_results(%struct.work_struct*) #1

declare void @cfg80211_mlme_unreg_wk(%struct.work_struct*) #1

declare void @cfg80211_dfs_channels_update_work(%struct.work_struct*) #1

declare void @init_timer_key(%struct.timer_list*, i32, i8*, %struct.lock_class_key*) #1

declare void @delayed_work_timer_fn(i64) #1

declare void @device_initialize(%struct.device*) #1

; Function Attrs: noinline nounwind optnone uwtable
define internal void @device_enable_async_suspend(%struct.device* %dev) #0 {
entry:
  %dev.addr = alloca %struct.device*, align 8
  store %struct.device* %dev, %struct.device** %dev.addr, align 8
  %0 = load %struct.device*, %struct.device** %dev.addr, align 8
  %power = getelementptr inbounds %struct.device, %struct.device* %0, i32 0, i32 11
  %is_prepared = getelementptr inbounds %struct.dev_pm_info, %struct.dev_pm_info* %power, i32 0, i32 1
  %bf.load = load i16, i16* %is_prepared, align 4
  %bf.lshr = lshr i16 %bf.load, 3
  %bf.clear = and i16 %bf.lshr, 1
  %bf.cast = trunc i16 %bf.clear to i1
  br i1 %bf.cast, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  %1 = load %struct.device*, %struct.device** %dev.addr, align 8
  %power1 = getelementptr inbounds %struct.device, %struct.device* %1, i32 0, i32 11
  %async_suspend = getelementptr inbounds %struct.dev_pm_info, %struct.dev_pm_info* %power1, i32 0, i32 1
  %bf.load2 = load i16, i16* %async_suspend, align 4
  %bf.clear3 = and i16 %bf.load2, -3
  %bf.set = or i16 %bf.clear3, 2
  store i16 %bf.set, i16* %async_suspend, align 4
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  ret void
}

; Function Attrs: noinline nounwind optnone uwtable
define internal void @cfg80211_destroy_iface_wk(%struct.work_struct* %work) #0 {
entry:
  %work.addr = alloca %struct.work_struct*, align 8
  %rdev = alloca %struct.cfg80211_registered_device*, align 8
  %__mptr = alloca %struct.work_struct*, align 8
  %tmp = alloca %struct.cfg80211_registered_device*, align 8
  store %struct.work_struct* %work, %struct.work_struct** %work.addr, align 8
  %0 = load %struct.work_struct*, %struct.work_struct** %work.addr, align 8
  store %struct.work_struct* %0, %struct.work_struct** %__mptr, align 8
  %1 = load %struct.work_struct*, %struct.work_struct** %__mptr, align 8
  %2 = bitcast %struct.work_struct* %1 to i8*
  %add.ptr = getelementptr inbounds i8, i8* %2, i64 -584
  %3 = bitcast i8* %add.ptr to %struct.cfg80211_registered_device*
  store %struct.cfg80211_registered_device* %3, %struct.cfg80211_registered_device** %tmp, align 8
  %4 = load %struct.cfg80211_registered_device*, %struct.cfg80211_registered_device** %tmp, align 8
  store %struct.cfg80211_registered_device* %4, %struct.cfg80211_registered_device** %rdev, align 8
  call void @rtnl_lock()
  %5 = load %struct.cfg80211_registered_device*, %struct.cfg80211_registered_device** %rdev, align 8
  call void @cfg80211_destroy_ifaces(%struct.cfg80211_registered_device* %5)
  call void @rtnl_unlock()
  ret void
}

; Function Attrs: noinline nounwind optnone uwtable
define internal void @cfg80211_sched_scan_stop_wk(%struct.work_struct* %work) #0 {
entry:
  %work.addr = alloca %struct.work_struct*, align 8
  %rdev = alloca %struct.cfg80211_registered_device*, align 8
  %__mptr = alloca %struct.work_struct*, align 8
  %tmp = alloca %struct.cfg80211_registered_device*, align 8
  store %struct.work_struct* %work, %struct.work_struct** %work.addr, align 8
  %0 = load %struct.work_struct*, %struct.work_struct** %work.addr, align 8
  store %struct.work_struct* %0, %struct.work_struct** %__mptr, align 8
  %1 = load %struct.work_struct*, %struct.work_struct** %__mptr, align 8
  %2 = bitcast %struct.work_struct* %1 to i8*
  %add.ptr = getelementptr inbounds i8, i8* %2, i64 -616
  %3 = bitcast i8* %add.ptr to %struct.cfg80211_registered_device*
  store %struct.cfg80211_registered_device* %3, %struct.cfg80211_registered_device** %tmp, align 8
  %4 = load %struct.cfg80211_registered_device*, %struct.cfg80211_registered_device** %tmp, align 8
  store %struct.cfg80211_registered_device* %4, %struct.cfg80211_registered_device** %rdev, align 8
  call void @rtnl_lock()
  %5 = load %struct.cfg80211_registered_device*, %struct.cfg80211_registered_device** %rdev, align 8
  %call = call i32 @__cfg80211_stop_sched_scan(%struct.cfg80211_registered_device* %5, i1 zeroext false)
  call void @rtnl_unlock()
  ret void
}

; Function Attrs: noinline nounwind optnone uwtable
define internal i32 @cfg80211_rfkill_set_block(i8* %data, i1 zeroext %blocked) #0 {
entry:
  %retval = alloca i32, align 4
  %data.addr = alloca i8*, align 8
  %blocked.addr = alloca i8, align 1
  %rdev = alloca %struct.cfg80211_registered_device*, align 8
  store i8* %data, i8** %data.addr, align 8
  %frombool = zext i1 %blocked to i8
  store i8 %frombool, i8* %blocked.addr, align 1
  %0 = load i8*, i8** %data.addr, align 8
  %1 = bitcast i8* %0 to %struct.cfg80211_registered_device*
  store %struct.cfg80211_registered_device* %1, %struct.cfg80211_registered_device** %rdev, align 8
  %2 = load i8, i8* %blocked.addr, align 1
  %tobool = trunc i8 %2 to i1
  br i1 %tobool, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  store i32 0, i32* %retval, align 4
  br label %return

if.end:                                           ; preds = %entry
  call void @rtnl_lock()
  %3 = load %struct.cfg80211_registered_device*, %struct.cfg80211_registered_device** %rdev, align 8
  %wiphy = getelementptr inbounds %struct.cfg80211_registered_device, %struct.cfg80211_registered_device* %3, i32 0, i32 42
  call void @cfg80211_shutdown_all_interfaces(%struct.wiphy* %wiphy)
  call void @rtnl_unlock()
  store i32 0, i32* %retval, align 4
  br label %return

return:                                           ; preds = %if.end, %if.then
  %4 = load i32, i32* %retval, align 4
  ret i32 %4
}

declare %struct.rfkill* @rfkill_alloc(i8*, %struct.device*, i32, %struct.rfkill_ops*, i8*) #1

; Function Attrs: noinline nounwind optnone uwtable
define internal void @cfg80211_rfkill_sync_work(%struct.work_struct* %work) #0 {
entry:
  %work.addr = alloca %struct.work_struct*, align 8
  %rdev = alloca %struct.cfg80211_registered_device*, align 8
  %__mptr = alloca %struct.work_struct*, align 8
  %tmp = alloca %struct.cfg80211_registered_device*, align 8
  store %struct.work_struct* %work, %struct.work_struct** %work.addr, align 8
  %0 = load %struct.work_struct*, %struct.work_struct** %work.addr, align 8
  store %struct.work_struct* %0, %struct.work_struct** %__mptr, align 8
  %1 = load %struct.work_struct*, %struct.work_struct** %__mptr, align 8
  %2 = bitcast %struct.work_struct* %1 to i8*
  %add.ptr = getelementptr inbounds i8, i8* %2, i64 -56
  %3 = bitcast i8* %add.ptr to %struct.cfg80211_registered_device*
  store %struct.cfg80211_registered_device* %3, %struct.cfg80211_registered_device** %tmp, align 8
  %4 = load %struct.cfg80211_registered_device*, %struct.cfg80211_registered_device** %tmp, align 8
  store %struct.cfg80211_registered_device* %4, %struct.cfg80211_registered_device** %rdev, align 8
  %5 = load %struct.cfg80211_registered_device*, %struct.cfg80211_registered_device** %rdev, align 8
  %6 = bitcast %struct.cfg80211_registered_device* %5 to i8*
  %7 = load %struct.cfg80211_registered_device*, %struct.cfg80211_registered_device** %rdev, align 8
  %rfkill = getelementptr inbounds %struct.cfg80211_registered_device, %struct.cfg80211_registered_device* %7, i32 0, i32 3
  %8 = load %struct.rfkill*, %struct.rfkill** %rfkill, align 16
  %call = call zeroext i1 @rfkill_blocked(%struct.rfkill* %8)
  %call1 = call i32 @cfg80211_rfkill_set_block(i8* %6, i1 zeroext %call)
  ret void
}

declare void @cfg80211_conn_work(%struct.work_struct*) #1

; Function Attrs: noinline nounwind optnone uwtable
define internal void @cfg80211_event_work(%struct.work_struct* %work) #0 {
entry:
  %work.addr = alloca %struct.work_struct*, align 8
  %rdev = alloca %struct.cfg80211_registered_device*, align 8
  %__mptr = alloca %struct.work_struct*, align 8
  %tmp = alloca %struct.cfg80211_registered_device*, align 8
  store %struct.work_struct* %work, %struct.work_struct** %work.addr, align 8
  %0 = load %struct.work_struct*, %struct.work_struct** %work.addr, align 8
  store %struct.work_struct* %0, %struct.work_struct** %__mptr, align 8
  %1 = load %struct.work_struct*, %struct.work_struct** %__mptr, align 8
  %2 = bitcast %struct.work_struct* %1 to i8*
  %add.ptr = getelementptr inbounds i8, i8* %2, i64 -416
  %3 = bitcast i8* %add.ptr to %struct.cfg80211_registered_device*
  store %struct.cfg80211_registered_device* %3, %struct.cfg80211_registered_device** %tmp, align 8
  %4 = load %struct.cfg80211_registered_device*, %struct.cfg80211_registered_device** %tmp, align 8
  store %struct.cfg80211_registered_device* %4, %struct.cfg80211_registered_device** %rdev, align 8
  call void @rtnl_lock()
  %5 = load %struct.cfg80211_registered_device*, %struct.cfg80211_registered_device** %rdev, align 8
  call void @cfg80211_process_rdev_events(%struct.cfg80211_registered_device* %5)
  call void @rtnl_unlock()
  ret void
}

declare void @__init_waitqueue_head(%struct.__wait_queue_head*, i8*, %struct.lock_class_key*) #1

; Function Attrs: noinline nounwind optnone uwtable
define i32 @wiphy_register(%struct.wiphy* %wiphy) #0 {
entry:
  %retval = alloca i32, align 4
  %wiphy.addr = alloca %struct.wiphy*, align 8
  %rdev = alloca %struct.cfg80211_registered_device*, align 8
  %res = alloca i32, align 4
  %band = alloca i32, align 4
  %sband = alloca %struct.ieee80211_supported_band*, align 8
  %have_band = alloca i8, align 1
  %i = alloca i32, align 4
  %ifmodes = alloca i16, align 2
  %__ret_warn_on = alloca i32, align 4
  %tmp = alloca i64, align 8
  %__ret_warn_on24 = alloca i32, align 4
  %tmp53 = alloca i64, align 8
  %__ret_warn_on63 = alloca i32, align 4
  %tmp86 = alloca i64, align 8
  %__ret_warn_on96 = alloca i32, align 4
  %tmp133 = alloca i64, align 8
  %__ret_warn_on143 = alloca i32, align 4
  %tmp161 = alloca i64, align 8
  %__ret_warn_on177 = alloca i32, align 4
  %tmp199 = alloca i64, align 8
  %__ret_warn_on209 = alloca i32, align 4
  %tmp241 = alloca i64, align 8
  %__ret_warn_on251 = alloca i32, align 4
  %tmp273 = alloca i64, align 8
  %__ret_warn_on283 = alloca i32, align 4
  %tmp303 = alloca i64, align 8
  %__ret_warn_on313 = alloca i32, align 4
  %tmp339 = alloca i64, align 8
  %__ret_warn_on349 = alloca i32, align 4
  %tmp376 = alloca i64, align 8
  %__ret_warn_on386 = alloca i32, align 4
  %tmp407 = alloca i64, align 8
  %__len = alloca i64, align 8
  %__ret = alloca i8*, align 8
  %tmp437 = alloca i8*, align 8
  %__ret_warn_on439 = alloca i32, align 4
  %tmp456 = alloca i64, align 8
  %__ret_warn_on466 = alloca i32, align 4
  %tmp485 = alloca i64, align 8
  %__ret_warn_on507 = alloca i32, align 4
  %tmp524 = alloca i64, align 8
  %__ret_warn_on534 = alloca i32, align 4
  %tmp555 = alloca i64, align 8
  %__ret_warn_on584 = alloca i32, align 4
  %tmp601 = alloca i64, align 8
  %__ret_warn_on640 = alloca i32, align 4
  %tmp650 = alloca i64, align 8
  %__ret_warn_on658 = alloca i32, align 4
  %tmp696 = alloca i64, align 8
  %request = alloca %struct.regulatory_request, align 8
  %supported_on_all = alloca i8, align 1
  %j = alloca i8, align 1
  %capab = alloca %struct.wiphy_iftype_ext_capab*, align 8
  %__ret_warn_on788 = alloca i32, align 4
  %tmp809 = alloca i64, align 8
  store %struct.wiphy* %wiphy, %struct.wiphy** %wiphy.addr, align 8
  %0 = load %struct.wiphy*, %struct.wiphy** %wiphy.addr, align 8
  %call = call %struct.cfg80211_registered_device* @wiphy_to_rdev(%struct.wiphy* %0)
  store %struct.cfg80211_registered_device* %call, %struct.cfg80211_registered_device** %rdev, align 8
  store i8 0, i8* %have_band, align 1
  %1 = load %struct.wiphy*, %struct.wiphy** %wiphy.addr, align 8
  %interface_modes = getelementptr inbounds %struct.wiphy, %struct.wiphy* %1, i32 0, i32 8
  %2 = load i16, i16* %interface_modes, align 16
  store i16 %2, i16* %ifmodes, align 2
  %3 = load %struct.wiphy*, %struct.wiphy** %wiphy.addr, align 8
  %wowlan = getelementptr inbounds %struct.wiphy, %struct.wiphy* %3, i32 0, i32 34
  %4 = load %struct.wiphy_wowlan_support*, %struct.wiphy_wowlan_support** %wowlan, align 8
  %tobool = icmp ne %struct.wiphy_wowlan_support* %4, null
  br i1 %tobool, label %land.lhs.true, label %land.end

land.lhs.true:                                    ; preds = %entry
  %5 = load %struct.wiphy*, %struct.wiphy** %wiphy.addr, align 8
  %wowlan1 = getelementptr inbounds %struct.wiphy, %struct.wiphy* %5, i32 0, i32 34
  %6 = load %struct.wiphy_wowlan_support*, %struct.wiphy_wowlan_support** %wowlan1, align 8
  %flags = getelementptr inbounds %struct.wiphy_wowlan_support, %struct.wiphy_wowlan_support* %6, i32 0, i32 0
  %7 = load i32, i32* %flags, align 8
  %and = and i32 %7, 16
  %tobool2 = icmp ne i32 %and, 0
  br i1 %tobool2, label %land.rhs, label %land.end

land.rhs:                                         ; preds = %land.lhs.true
  %8 = load %struct.wiphy*, %struct.wiphy** %wiphy.addr, align 8
  %wowlan3 = getelementptr inbounds %struct.wiphy, %struct.wiphy* %8, i32 0, i32 34
  %9 = load %struct.wiphy_wowlan_support*, %struct.wiphy_wowlan_support** %wowlan3, align 8
  %flags4 = getelementptr inbounds %struct.wiphy_wowlan_support, %struct.wiphy_wowlan_support* %9, i32 0, i32 0
  %10 = load i32, i32* %flags4, align 8
  %and5 = and i32 %10, 8
  %tobool6 = icmp ne i32 %and5, 0
  %lnot = xor i1 %tobool6, true
  br label %land.end

land.end:                                         ; preds = %land.rhs, %land.lhs.true, %entry
  %11 = phi i1 [ false, %land.lhs.true ], [ false, %entry ], [ %lnot, %land.rhs ]
  %lnot7 = xor i1 %11, true
  %lnot8 = xor i1 %lnot7, true
  %lnot.ext = zext i1 %lnot8 to i32
  store i32 %lnot.ext, i32* %__ret_warn_on, align 4
  %12 = load i32, i32* %__ret_warn_on, align 4
  %tobool9 = icmp ne i32 %12, 0
  %lnot10 = xor i1 %tobool9, true
  %lnot12 = xor i1 %lnot10, true
  %lnot.ext13 = zext i1 %lnot12 to i32
  %conv = sext i32 %lnot.ext13 to i64
  %tobool14 = icmp ne i64 %conv, 0
  br i1 %tobool14, label %if.then, label %if.end

if.then:                                          ; preds = %land.end
  call void @warn_slowpath_null(i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.1, i32 0, i32 0), i32 615)
  br label %if.end

if.end:                                           ; preds = %if.then, %land.end
  %13 = load i32, i32* %__ret_warn_on, align 4
  %tobool15 = icmp ne i32 %13, 0
  %lnot16 = xor i1 %tobool15, true
  %lnot18 = xor i1 %lnot16, true
  %lnot.ext19 = zext i1 %lnot18 to i32
  %conv20 = sext i32 %lnot.ext19 to i64
  store i64 %conv20, i64* %tmp, align 8
  %14 = load i64, i64* %tmp, align 8
  %tobool21 = icmp ne i64 %14, 0
  br i1 %tobool21, label %if.then22, label %if.end23

if.then22:                                        ; preds = %if.end
  store i32 -22, i32* %retval, align 4
  br label %return

if.end23:                                         ; preds = %if.end
  %15 = load %struct.wiphy*, %struct.wiphy** %wiphy.addr, align 8
  %wowlan25 = getelementptr inbounds %struct.wiphy, %struct.wiphy* %15, i32 0, i32 34
  %16 = load %struct.wiphy_wowlan_support*, %struct.wiphy_wowlan_support** %wowlan25, align 8
  %tobool26 = icmp ne %struct.wiphy_wowlan_support* %16, null
  br i1 %tobool26, label %land.lhs.true27, label %land.end39

land.lhs.true27:                                  ; preds = %if.end23
  %17 = load %struct.wiphy*, %struct.wiphy** %wiphy.addr, align 8
  %wowlan28 = getelementptr inbounds %struct.wiphy, %struct.wiphy* %17, i32 0, i32 34
  %18 = load %struct.wiphy_wowlan_support*, %struct.wiphy_wowlan_support** %wowlan28, align 8
  %flags29 = getelementptr inbounds %struct.wiphy_wowlan_support, %struct.wiphy_wowlan_support* %18, i32 0, i32 0
  %19 = load i32, i32* %flags29, align 8
  %tobool30 = icmp ne i32 %19, 0
  br i1 %tobool30, label %land.end39, label %land.lhs.true31

land.lhs.true31:                                  ; preds = %land.lhs.true27
  %20 = load %struct.wiphy*, %struct.wiphy** %wiphy.addr, align 8
  %wowlan32 = getelementptr inbounds %struct.wiphy, %struct.wiphy* %20, i32 0, i32 34
  %21 = load %struct.wiphy_wowlan_support*, %struct.wiphy_wowlan_support** %wowlan32, align 8
  %n_patterns = getelementptr inbounds %struct.wiphy_wowlan_support, %struct.wiphy_wowlan_support* %21, i32 0, i32 1
  %22 = load i32, i32* %n_patterns, align 4
  %tobool33 = icmp ne i32 %22, 0
  br i1 %tobool33, label %land.end39, label %land.rhs34

land.rhs34:                                       ; preds = %land.lhs.true31
  %23 = load %struct.wiphy*, %struct.wiphy** %wiphy.addr, align 8
  %wowlan35 = getelementptr inbounds %struct.wiphy, %struct.wiphy* %23, i32 0, i32 34
  %24 = load %struct.wiphy_wowlan_support*, %struct.wiphy_wowlan_support** %wowlan35, align 8
  %tcp = getelementptr inbounds %struct.wiphy_wowlan_support, %struct.wiphy_wowlan_support* %24, i32 0, i32 6
  %25 = load %struct.wiphy_wowlan_tcp_support*, %struct.wiphy_wowlan_tcp_support** %tcp, align 8
  %tobool36 = icmp ne %struct.wiphy_wowlan_tcp_support* %25, null
  %lnot37 = xor i1 %tobool36, true
  br label %land.end39

land.end39:                                       ; preds = %land.rhs34, %land.lhs.true31, %land.lhs.true27, %if.end23
  %26 = phi i1 [ false, %land.lhs.true31 ], [ false, %land.lhs.true27 ], [ false, %if.end23 ], [ %lnot37, %land.rhs34 ]
  %lnot40 = xor i1 %26, true
  %lnot42 = xor i1 %lnot40, true
  %lnot.ext43 = zext i1 %lnot42 to i32
  store i32 %lnot.ext43, i32* %__ret_warn_on24, align 4
  %27 = load i32, i32* %__ret_warn_on24, align 4
  %tobool44 = icmp ne i32 %27, 0
  %lnot45 = xor i1 %tobool44, true
  %lnot47 = xor i1 %lnot45, true
  %lnot.ext48 = zext i1 %lnot47 to i32
  %conv49 = sext i32 %lnot.ext48 to i64
  %tobool50 = icmp ne i64 %conv49, 0
  br i1 %tobool50, label %if.then51, label %if.end52

if.then51:                                        ; preds = %land.end39
  call void @warn_slowpath_null(i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.1, i32 0, i32 0), i32 619)
  br label %if.end52

if.end52:                                         ; preds = %if.then51, %land.end39
  %28 = load i32, i32* %__ret_warn_on24, align 4
  %tobool54 = icmp ne i32 %28, 0
  %lnot55 = xor i1 %tobool54, true
  %lnot57 = xor i1 %lnot55, true
  %lnot.ext58 = zext i1 %lnot57 to i32
  %conv59 = sext i32 %lnot.ext58 to i64
  store i64 %conv59, i64* %tmp53, align 8
  %29 = load i64, i64* %tmp53, align 8
  %tobool60 = icmp ne i64 %29, 0
  br i1 %tobool60, label %if.then61, label %if.end62

if.then61:                                        ; preds = %if.end52
  store i32 -22, i32* %retval, align 4
  br label %return

if.end62:                                         ; preds = %if.end52
  %30 = load %struct.wiphy*, %struct.wiphy** %wiphy.addr, align 8
  %features = getelementptr inbounds %struct.wiphy, %struct.wiphy* %30, i32 0, i32 12
  %31 = load i32, i32* %features, align 4
  %and64 = and i32 %31, 268435456
  %tobool65 = icmp ne i32 %and64, 0
  br i1 %tobool65, label %land.rhs66, label %land.end72

land.rhs66:                                       ; preds = %if.end62
  %32 = load %struct.cfg80211_registered_device*, %struct.cfg80211_registered_device** %rdev, align 8
  %ops = getelementptr inbounds %struct.cfg80211_registered_device, %struct.cfg80211_registered_device* %32, i32 0, i32 0
  %33 = load %struct.cfg80211_ops*, %struct.cfg80211_ops** %ops, align 32
  %tdls_channel_switch = getelementptr inbounds %struct.cfg80211_ops, %struct.cfg80211_ops* %33, i32 0, i32 89
  %34 = load i32 (%struct.wiphy*, %struct.net_device*, i8*, i8, %struct.cfg80211_chan_def*)*, i32 (%struct.wiphy*, %struct.net_device*, i8*, i8, %struct.cfg80211_chan_def*)** %tdls_channel_switch, align 8
  %tobool67 = icmp ne i32 (%struct.wiphy*, %struct.net_device*, i8*, i8, %struct.cfg80211_chan_def*)* %34, null
  br i1 %tobool67, label %lor.rhs, label %lor.end

lor.rhs:                                          ; preds = %land.rhs66
  %35 = load %struct.cfg80211_registered_device*, %struct.cfg80211_registered_device** %rdev, align 8
  %ops68 = getelementptr inbounds %struct.cfg80211_registered_device, %struct.cfg80211_registered_device* %35, i32 0, i32 0
  %36 = load %struct.cfg80211_ops*, %struct.cfg80211_ops** %ops68, align 32
  %tdls_cancel_channel_switch = getelementptr inbounds %struct.cfg80211_ops, %struct.cfg80211_ops* %36, i32 0, i32 90
  %37 = load void (%struct.wiphy*, %struct.net_device*, i8*)*, void (%struct.wiphy*, %struct.net_device*, i8*)** %tdls_cancel_channel_switch, align 8
  %tobool69 = icmp ne void (%struct.wiphy*, %struct.net_device*, i8*)* %37, null
  %lnot70 = xor i1 %tobool69, true
  br label %lor.end

lor.end:                                          ; preds = %lor.rhs, %land.rhs66
  %38 = phi i1 [ true, %land.rhs66 ], [ %lnot70, %lor.rhs ]
  br label %land.end72

land.end72:                                       ; preds = %lor.end, %if.end62
  %39 = phi i1 [ false, %if.end62 ], [ %38, %lor.end ]
  %lnot73 = xor i1 %39, true
  %lnot75 = xor i1 %lnot73, true
  %lnot.ext76 = zext i1 %lnot75 to i32
  store i32 %lnot.ext76, i32* %__ret_warn_on63, align 4
  %40 = load i32, i32* %__ret_warn_on63, align 4
  %tobool77 = icmp ne i32 %40, 0
  %lnot78 = xor i1 %tobool77, true
  %lnot80 = xor i1 %lnot78, true
  %lnot.ext81 = zext i1 %lnot80 to i32
  %conv82 = sext i32 %lnot.ext81 to i64
  %tobool83 = icmp ne i64 %conv82, 0
  br i1 %tobool83, label %if.then84, label %if.end85

if.then84:                                        ; preds = %land.end72
  call void @warn_slowpath_null(i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.1, i32 0, i32 0), i32 624)
  br label %if.end85

if.end85:                                         ; preds = %if.then84, %land.end72
  %41 = load i32, i32* %__ret_warn_on63, align 4
  %tobool87 = icmp ne i32 %41, 0
  %lnot88 = xor i1 %tobool87, true
  %lnot90 = xor i1 %lnot88, true
  %lnot.ext91 = zext i1 %lnot90 to i32
  %conv92 = sext i32 %lnot.ext91 to i64
  store i64 %conv92, i64* %tmp86, align 8
  %42 = load i64, i64* %tmp86, align 8
  %tobool93 = icmp ne i64 %42, 0
  br i1 %tobool93, label %if.then94, label %if.end95

if.then94:                                        ; preds = %if.end85
  store i32 -22, i32* %retval, align 4
  br label %return

if.end95:                                         ; preds = %if.end85
  %43 = load %struct.wiphy*, %struct.wiphy** %wiphy.addr, align 8
  %interface_modes97 = getelementptr inbounds %struct.wiphy, %struct.wiphy* %43, i32 0, i32 8
  %44 = load i16, i16* %interface_modes97, align 16
  %conv98 = zext i16 %44 to i64
  %and99 = and i64 %conv98, 4096
  %tobool100 = icmp ne i64 %and99, 0
  br i1 %tobool100, label %land.rhs101, label %land.end119

land.rhs101:                                      ; preds = %if.end95
  %45 = load %struct.cfg80211_registered_device*, %struct.cfg80211_registered_device** %rdev, align 8
  %ops102 = getelementptr inbounds %struct.cfg80211_registered_device, %struct.cfg80211_registered_device* %45, i32 0, i32 0
  %46 = load %struct.cfg80211_ops*, %struct.cfg80211_ops** %ops102, align 32
  %start_nan = getelementptr inbounds %struct.cfg80211_ops, %struct.cfg80211_ops* %46, i32 0, i32 91
  %47 = load i32 (%struct.wiphy*, %struct.wireless_dev*, %struct.cfg80211_nan_conf*)*, i32 (%struct.wiphy*, %struct.wireless_dev*, %struct.cfg80211_nan_conf*)** %start_nan, align 8
  %tobool103 = icmp ne i32 (%struct.wiphy*, %struct.wireless_dev*, %struct.cfg80211_nan_conf*)* %47, null
  br i1 %tobool103, label %lor.lhs.false, label %lor.end118

lor.lhs.false:                                    ; preds = %land.rhs101
  %48 = load %struct.cfg80211_registered_device*, %struct.cfg80211_registered_device** %rdev, align 8
  %ops104 = getelementptr inbounds %struct.cfg80211_registered_device, %struct.cfg80211_registered_device* %48, i32 0, i32 0
  %49 = load %struct.cfg80211_ops*, %struct.cfg80211_ops** %ops104, align 32
  %stop_nan = getelementptr inbounds %struct.cfg80211_ops, %struct.cfg80211_ops* %49, i32 0, i32 92
  %50 = load void (%struct.wiphy*, %struct.wireless_dev*)*, void (%struct.wiphy*, %struct.wireless_dev*)** %stop_nan, align 8
  %tobool105 = icmp ne void (%struct.wiphy*, %struct.wireless_dev*)* %50, null
  br i1 %tobool105, label %lor.lhs.false106, label %lor.end118

lor.lhs.false106:                                 ; preds = %lor.lhs.false
  %51 = load %struct.cfg80211_registered_device*, %struct.cfg80211_registered_device** %rdev, align 8
  %ops107 = getelementptr inbounds %struct.cfg80211_registered_device, %struct.cfg80211_registered_device* %51, i32 0, i32 0
  %52 = load %struct.cfg80211_ops*, %struct.cfg80211_ops** %ops107, align 32
  %add_nan_func = getelementptr inbounds %struct.cfg80211_ops, %struct.cfg80211_ops* %52, i32 0, i32 93
  %53 = load i32 (%struct.wiphy*, %struct.wireless_dev*, %struct.cfg80211_nan_func*)*, i32 (%struct.wiphy*, %struct.wireless_dev*, %struct.cfg80211_nan_func*)** %add_nan_func, align 8
  %tobool108 = icmp ne i32 (%struct.wiphy*, %struct.wireless_dev*, %struct.cfg80211_nan_func*)* %53, null
  br i1 %tobool108, label %lor.lhs.false109, label %lor.end118

lor.lhs.false109:                                 ; preds = %lor.lhs.false106
  %54 = load %struct.cfg80211_registered_device*, %struct.cfg80211_registered_device** %rdev, align 8
  %ops110 = getelementptr inbounds %struct.cfg80211_registered_device, %struct.cfg80211_registered_device* %54, i32 0, i32 0
  %55 = load %struct.cfg80211_ops*, %struct.cfg80211_ops** %ops110, align 32
  %del_nan_func = getelementptr inbounds %struct.cfg80211_ops, %struct.cfg80211_ops* %55, i32 0, i32 94
  %56 = load void (%struct.wiphy*, %struct.wireless_dev*, i64)*, void (%struct.wiphy*, %struct.wireless_dev*, i64)** %del_nan_func, align 8
  %tobool111 = icmp ne void (%struct.wiphy*, %struct.wireless_dev*, i64)* %56, null
  br i1 %tobool111, label %lor.rhs112, label %lor.end118

lor.rhs112:                                       ; preds = %lor.lhs.false109
  %57 = load %struct.wiphy*, %struct.wiphy** %wiphy.addr, align 8
  %nan_supported_bands = getelementptr inbounds %struct.wiphy, %struct.wiphy* %57, i32 0, i32 67
  %58 = load i8, i8* %nan_supported_bands, align 32
  %conv113 = zext i8 %58 to i64
  %and114 = and i64 %conv113, 1
  %tobool115 = icmp ne i64 %and114, 0
  %lnot116 = xor i1 %tobool115, true
  br label %lor.end118

lor.end118:                                       ; preds = %lor.rhs112, %lor.lhs.false109, %lor.lhs.false106, %lor.lhs.false, %land.rhs101
  %59 = phi i1 [ true, %lor.lhs.false109 ], [ true, %lor.lhs.false106 ], [ true, %lor.lhs.false ], [ true, %land.rhs101 ], [ %lnot116, %lor.rhs112 ]
  br label %land.end119

land.end119:                                      ; preds = %lor.end118, %if.end95
  %60 = phi i1 [ false, %if.end95 ], [ %59, %lor.end118 ]
  %lnot120 = xor i1 %60, true
  %lnot122 = xor i1 %lnot120, true
  %lnot.ext123 = zext i1 %lnot122 to i32
  store i32 %lnot.ext123, i32* %__ret_warn_on96, align 4
  %61 = load i32, i32* %__ret_warn_on96, align 4
  %tobool124 = icmp ne i32 %61, 0
  %lnot125 = xor i1 %tobool124, true
  %lnot127 = xor i1 %lnot125, true
  %lnot.ext128 = zext i1 %lnot127 to i32
  %conv129 = sext i32 %lnot.ext128 to i64
  %tobool130 = icmp ne i64 %conv129, 0
  br i1 %tobool130, label %if.then131, label %if.end132

if.then131:                                       ; preds = %land.end119
  call void @warn_slowpath_null(i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.1, i32 0, i32 0), i32 630)
  br label %if.end132

if.end132:                                        ; preds = %if.then131, %land.end119
  %62 = load i32, i32* %__ret_warn_on96, align 4
  %tobool134 = icmp ne i32 %62, 0
  %lnot135 = xor i1 %tobool134, true
  %lnot137 = xor i1 %lnot135, true
  %lnot.ext138 = zext i1 %lnot137 to i32
  %conv139 = sext i32 %lnot.ext138 to i64
  store i64 %conv139, i64* %tmp133, align 8
  %63 = load i64, i64* %tmp133, align 8
  %tobool140 = icmp ne i64 %63, 0
  br i1 %tobool140, label %if.then141, label %if.end142

if.then141:                                       ; preds = %if.end132
  store i32 -22, i32* %retval, align 4
  br label %return

if.end142:                                        ; preds = %if.end132
  %64 = load %struct.wiphy*, %struct.wiphy** %wiphy.addr, align 8
  %interface_modes144 = getelementptr inbounds %struct.wiphy, %struct.wiphy* %64, i32 0, i32 8
  %65 = load i16, i16* %interface_modes144, align 16
  %conv145 = zext i16 %65 to i64
  %and146 = and i64 %conv145, 32
  %tobool147 = icmp ne i64 %and146, 0
  %lnot148 = xor i1 %tobool147, true
  %lnot150 = xor i1 %lnot148, true
  %lnot.ext151 = zext i1 %lnot150 to i32
  store i32 %lnot.ext151, i32* %__ret_warn_on143, align 4
  %66 = load i32, i32* %__ret_warn_on143, align 4
  %tobool152 = icmp ne i32 %66, 0
  %lnot153 = xor i1 %tobool152, true
  %lnot155 = xor i1 %lnot153, true
  %lnot.ext156 = zext i1 %lnot155 to i32
  %conv157 = sext i32 %lnot.ext156 to i64
  %tobool158 = icmp ne i64 %conv157, 0
  br i1 %tobool158, label %if.then159, label %if.end160

if.then159:                                       ; preds = %if.end142
  call void @warn_slowpath_null(i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.1, i32 0, i32 0), i32 634)
  br label %if.end160

if.end160:                                        ; preds = %if.then159, %if.end142
  %67 = load i32, i32* %__ret_warn_on143, align 4
  %tobool162 = icmp ne i32 %67, 0
  %lnot163 = xor i1 %tobool162, true
  %lnot165 = xor i1 %lnot163, true
  %lnot.ext166 = zext i1 %lnot165 to i32
  %conv167 = sext i32 %lnot.ext166 to i64
  store i64 %conv167, i64* %tmp161, align 8
  %68 = load i64, i64* %tmp161, align 8
  %tobool168 = icmp ne i64 %68, 0
  br i1 %tobool168, label %if.then169, label %if.end170

if.then169:                                       ; preds = %if.end160
  store i32 -22, i32* %retval, align 4
  br label %return

if.end170:                                        ; preds = %if.end160
  %69 = load %struct.wiphy*, %struct.wiphy** %wiphy.addr, align 8
  %interface_modes171 = getelementptr inbounds %struct.wiphy, %struct.wiphy* %69, i32 0, i32 8
  %70 = load i16, i16* %interface_modes171, align 16
  %conv172 = zext i16 %70 to i64
  %and173 = and i64 %conv172, -5983
  %tobool174 = icmp ne i64 %and173, 0
  br i1 %tobool174, label %if.then175, label %if.end176

if.then175:                                       ; preds = %if.end170
  %71 = load %struct.wiphy*, %struct.wiphy** %wiphy.addr, align 8
  %regulatory_flags = getelementptr inbounds %struct.wiphy, %struct.wiphy* %71, i32 0, i32 11
  %72 = load i32, i32* %regulatory_flags, align 8
  %or = or i32 %72, 64
  store i32 %or, i32* %regulatory_flags, align 8
  br label %if.end176

if.end176:                                        ; preds = %if.then175, %if.end170
  %73 = load %struct.wiphy*, %struct.wiphy** %wiphy.addr, align 8
  %regulatory_flags178 = getelementptr inbounds %struct.wiphy, %struct.wiphy* %73, i32 0, i32 11
  %74 = load i32, i32* %regulatory_flags178, align 8
  %and179 = and i32 %74, 128
  %tobool180 = icmp ne i32 %and179, 0
  br i1 %tobool180, label %land.rhs181, label %land.end185

land.rhs181:                                      ; preds = %if.end176
  %75 = load %struct.wiphy*, %struct.wiphy** %wiphy.addr, align 8
  %regulatory_flags182 = getelementptr inbounds %struct.wiphy, %struct.wiphy* %75, i32 0, i32 11
  %76 = load i32, i32* %regulatory_flags182, align 8
  %and183 = and i32 %76, 27
  %tobool184 = icmp ne i32 %and183, 0
  br label %land.end185

land.end185:                                      ; preds = %land.rhs181, %if.end176
  %77 = phi i1 [ false, %if.end176 ], [ %tobool184, %land.rhs181 ]
  %lnot186 = xor i1 %77, true
  %lnot188 = xor i1 %lnot186, true
  %lnot.ext189 = zext i1 %lnot188 to i32
  store i32 %lnot.ext189, i32* %__ret_warn_on177, align 4
  %78 = load i32, i32* %__ret_warn_on177, align 4
  %tobool190 = icmp ne i32 %78, 0
  %lnot191 = xor i1 %tobool190, true
  %lnot193 = xor i1 %lnot191, true
  %lnot.ext194 = zext i1 %lnot193 to i32
  %conv195 = sext i32 %lnot.ext194 to i64
  %tobool196 = icmp ne i64 %conv195, 0
  br i1 %tobool196, label %if.then197, label %if.end198

if.then197:                                       ; preds = %land.end185
  call void @warn_slowpath_null(i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.1, i32 0, i32 0), i32 658)
  br label %if.end198

if.end198:                                        ; preds = %if.then197, %land.end185
  %79 = load i32, i32* %__ret_warn_on177, align 4
  %tobool200 = icmp ne i32 %79, 0
  %lnot201 = xor i1 %tobool200, true
  %lnot203 = xor i1 %lnot201, true
  %lnot.ext204 = zext i1 %lnot203 to i32
  %conv205 = sext i32 %lnot.ext204 to i64
  store i64 %conv205, i64* %tmp199, align 8
  %80 = load i64, i64* %tmp199, align 8
  %tobool206 = icmp ne i64 %80, 0
  br i1 %tobool206, label %if.then207, label %if.end208

if.then207:                                       ; preds = %if.end198
  store i32 -22, i32* %retval, align 4
  br label %return

if.end208:                                        ; preds = %if.end198
  %81 = load %struct.wiphy*, %struct.wiphy** %wiphy.addr, align 8
  %coalesce = getelementptr inbounds %struct.wiphy, %struct.wiphy* %81, i32 0, i32 57
  %82 = load %struct.wiphy_coalesce_support*, %struct.wiphy_coalesce_support** %coalesce, align 16
  %tobool210 = icmp ne %struct.wiphy_coalesce_support* %82, null
  br i1 %tobool210, label %land.lhs.true211, label %land.end227

land.lhs.true211:                                 ; preds = %if.end208
  %83 = load %struct.wiphy*, %struct.wiphy** %wiphy.addr, align 8
  %coalesce212 = getelementptr inbounds %struct.wiphy, %struct.wiphy* %83, i32 0, i32 57
  %84 = load %struct.wiphy_coalesce_support*, %struct.wiphy_coalesce_support** %coalesce212, align 16
  %n_rules = getelementptr inbounds %struct.wiphy_coalesce_support, %struct.wiphy_coalesce_support* %84, i32 0, i32 0
  %85 = load i32, i32* %n_rules, align 4
  %tobool213 = icmp ne i32 %85, 0
  br i1 %tobool213, label %lor.lhs.false214, label %land.rhs218

lor.lhs.false214:                                 ; preds = %land.lhs.true211
  %86 = load %struct.wiphy*, %struct.wiphy** %wiphy.addr, align 8
  %coalesce215 = getelementptr inbounds %struct.wiphy, %struct.wiphy* %86, i32 0, i32 57
  %87 = load %struct.wiphy_coalesce_support*, %struct.wiphy_coalesce_support** %coalesce215, align 16
  %n_patterns216 = getelementptr inbounds %struct.wiphy_coalesce_support, %struct.wiphy_coalesce_support* %87, i32 0, i32 2
  %88 = load i32, i32* %n_patterns216, align 4
  %tobool217 = icmp ne i32 %88, 0
  br i1 %tobool217, label %land.end227, label %land.rhs218

land.rhs218:                                      ; preds = %lor.lhs.false214, %land.lhs.true211
  %89 = load %struct.wiphy*, %struct.wiphy** %wiphy.addr, align 8
  %coalesce219 = getelementptr inbounds %struct.wiphy, %struct.wiphy* %89, i32 0, i32 57
  %90 = load %struct.wiphy_coalesce_support*, %struct.wiphy_coalesce_support** %coalesce219, align 16
  %pattern_min_len = getelementptr inbounds %struct.wiphy_coalesce_support, %struct.wiphy_coalesce_support* %90, i32 0, i32 4
  %91 = load i32, i32* %pattern_min_len, align 4
  %tobool220 = icmp ne i32 %91, 0
  br i1 %tobool220, label %lor.rhs221, label %lor.end226

lor.rhs221:                                       ; preds = %land.rhs218
  %92 = load %struct.wiphy*, %struct.wiphy** %wiphy.addr, align 8
  %coalesce222 = getelementptr inbounds %struct.wiphy, %struct.wiphy* %92, i32 0, i32 57
  %93 = load %struct.wiphy_coalesce_support*, %struct.wiphy_coalesce_support** %coalesce222, align 16
  %pattern_min_len223 = getelementptr inbounds %struct.wiphy_coalesce_support, %struct.wiphy_coalesce_support* %93, i32 0, i32 4
  %94 = load i32, i32* %pattern_min_len223, align 4
  %95 = load %struct.wiphy*, %struct.wiphy** %wiphy.addr, align 8
  %coalesce224 = getelementptr inbounds %struct.wiphy, %struct.wiphy* %95, i32 0, i32 57
  %96 = load %struct.wiphy_coalesce_support*, %struct.wiphy_coalesce_support** %coalesce224, align 16
  %pattern_max_len = getelementptr inbounds %struct.wiphy_coalesce_support, %struct.wiphy_coalesce_support* %96, i32 0, i32 3
  %97 = load i32, i32* %pattern_max_len, align 4
  %cmp = icmp sgt i32 %94, %97
  br label %lor.end226

lor.end226:                                       ; preds = %lor.rhs221, %land.rhs218
  %98 = phi i1 [ true, %land.rhs218 ], [ %cmp, %lor.rhs221 ]
  br label %land.end227

land.end227:                                      ; preds = %lor.end226, %lor.lhs.false214, %if.end208
  %99 = phi i1 [ false, %lor.lhs.false214 ], [ false, %if.end208 ], [ %98, %lor.end226 ]
  %lnot228 = xor i1 %99, true
  %lnot230 = xor i1 %lnot228, true
  %lnot.ext231 = zext i1 %lnot230 to i32
  store i32 %lnot.ext231, i32* %__ret_warn_on209, align 4
  %100 = load i32, i32* %__ret_warn_on209, align 4
  %tobool232 = icmp ne i32 %100, 0
  %lnot233 = xor i1 %tobool232, true
  %lnot235 = xor i1 %lnot233, true
  %lnot.ext236 = zext i1 %lnot235 to i32
  %conv237 = sext i32 %lnot.ext236 to i64
  %tobool238 = icmp ne i64 %conv237, 0
  br i1 %tobool238, label %if.then239, label %if.end240

if.then239:                                       ; preds = %land.end227
  call void @warn_slowpath_null(i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.1, i32 0, i32 0), i32 666)
  br label %if.end240

if.end240:                                        ; preds = %if.then239, %land.end227
  %101 = load i32, i32* %__ret_warn_on209, align 4
  %tobool242 = icmp ne i32 %101, 0
  %lnot243 = xor i1 %tobool242, true
  %lnot245 = xor i1 %lnot243, true
  %lnot.ext246 = zext i1 %lnot245 to i32
  %conv247 = sext i32 %lnot.ext246 to i64
  store i64 %conv247, i64* %tmp241, align 8
  %102 = load i64, i64* %tmp241, align 8
  %tobool248 = icmp ne i64 %102, 0
  br i1 %tobool248, label %if.then249, label %if.end250

if.then249:                                       ; preds = %if.end240
  store i32 -22, i32* %retval, align 4
  br label %return

if.end250:                                        ; preds = %if.end240
  %103 = load %struct.wiphy*, %struct.wiphy** %wiphy.addr, align 8
  %ap_sme_capa = getelementptr inbounds %struct.wiphy, %struct.wiphy* %103, i32 0, i32 14
  %104 = load i32, i32* %ap_sme_capa, align 4
  %tobool252 = icmp ne i32 %104, 0
  br i1 %tobool252, label %land.rhs253, label %land.end259

land.rhs253:                                      ; preds = %if.end250
  %105 = load %struct.wiphy*, %struct.wiphy** %wiphy.addr, align 8
  %flags254 = getelementptr inbounds %struct.wiphy, %struct.wiphy* %105, i32 0, i32 10
  %106 = load i32, i32* %flags254, align 4
  %and255 = and i32 %106, 131072
  %tobool256 = icmp ne i32 %and255, 0
  %lnot257 = xor i1 %tobool256, true
  br label %land.end259

land.end259:                                      ; preds = %land.rhs253, %if.end250
  %107 = phi i1 [ false, %if.end250 ], [ %lnot257, %land.rhs253 ]
  %lnot260 = xor i1 %107, true
  %lnot262 = xor i1 %lnot260, true
  %lnot.ext263 = zext i1 %lnot262 to i32
  store i32 %lnot.ext263, i32* %__ret_warn_on251, align 4
  %108 = load i32, i32* %__ret_warn_on251, align 4
  %tobool264 = icmp ne i32 %108, 0
  %lnot265 = xor i1 %tobool264, true
  %lnot267 = xor i1 %lnot265, true
  %lnot.ext268 = zext i1 %lnot267 to i32
  %conv269 = sext i32 %lnot.ext268 to i64
  %tobool270 = icmp ne i64 %conv269, 0
  br i1 %tobool270, label %if.then271, label %if.end272

if.then271:                                       ; preds = %land.end259
  call void @warn_slowpath_null(i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.1, i32 0, i32 0), i32 670)
  br label %if.end272

if.end272:                                        ; preds = %if.then271, %land.end259
  %109 = load i32, i32* %__ret_warn_on251, align 4
  %tobool274 = icmp ne i32 %109, 0
  %lnot275 = xor i1 %tobool274, true
  %lnot277 = xor i1 %lnot275, true
  %lnot.ext278 = zext i1 %lnot277 to i32
  %conv279 = sext i32 %lnot.ext278 to i64
  store i64 %conv279, i64* %tmp273, align 8
  %110 = load i64, i64* %tmp273, align 8
  %tobool280 = icmp ne i64 %110, 0
  br i1 %tobool280, label %if.then281, label %if.end282

if.then281:                                       ; preds = %if.end272
  store i32 -22, i32* %retval, align 4
  br label %return

if.end282:                                        ; preds = %if.end272
  %111 = load %struct.wiphy*, %struct.wiphy** %wiphy.addr, align 8
  %addresses = getelementptr inbounds %struct.wiphy, %struct.wiphy* %111, i32 0, i32 2
  %112 = load %struct.mac_address*, %struct.mac_address** %addresses, align 16
  %tobool284 = icmp ne %struct.mac_address* %112, null
  br i1 %tobool284, label %land.rhs285, label %land.end289

land.rhs285:                                      ; preds = %if.end282
  %113 = load %struct.wiphy*, %struct.wiphy** %wiphy.addr, align 8
  %n_addresses = getelementptr inbounds %struct.wiphy, %struct.wiphy* %113, i32 0, i32 7
  %114 = load i16, i16* %n_addresses, align 2
  %tobool286 = icmp ne i16 %114, 0
  %lnot287 = xor i1 %tobool286, true
  br label %land.end289

land.end289:                                      ; preds = %land.rhs285, %if.end282
  %115 = phi i1 [ false, %if.end282 ], [ %lnot287, %land.rhs285 ]
  %lnot290 = xor i1 %115, true
  %lnot292 = xor i1 %lnot290, true
  %lnot.ext293 = zext i1 %lnot292 to i32
  store i32 %lnot.ext293, i32* %__ret_warn_on283, align 4
  %116 = load i32, i32* %__ret_warn_on283, align 4
  %tobool294 = icmp ne i32 %116, 0
  %lnot295 = xor i1 %tobool294, true
  %lnot297 = xor i1 %lnot295, true
  %lnot.ext298 = zext i1 %lnot297 to i32
  %conv299 = sext i32 %lnot.ext298 to i64
  %tobool300 = icmp ne i64 %conv299, 0
  br i1 %tobool300, label %if.then301, label %if.end302

if.then301:                                       ; preds = %land.end289
  call void @warn_slowpath_null(i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.1, i32 0, i32 0), i32 673)
  br label %if.end302

if.end302:                                        ; preds = %if.then301, %land.end289
  %117 = load i32, i32* %__ret_warn_on283, align 4
  %tobool304 = icmp ne i32 %117, 0
  %lnot305 = xor i1 %tobool304, true
  %lnot307 = xor i1 %lnot305, true
  %lnot.ext308 = zext i1 %lnot307 to i32
  %conv309 = sext i32 %lnot.ext308 to i64
  store i64 %conv309, i64* %tmp303, align 8
  %118 = load i64, i64* %tmp303, align 8
  %tobool310 = icmp ne i64 %118, 0
  br i1 %tobool310, label %if.then311, label %if.end312

if.then311:                                       ; preds = %if.end302
  store i32 -22, i32* %retval, align 4
  br label %return

if.end312:                                        ; preds = %if.end302
  %119 = load %struct.wiphy*, %struct.wiphy** %wiphy.addr, align 8
  %addresses314 = getelementptr inbounds %struct.wiphy, %struct.wiphy* %119, i32 0, i32 2
  %120 = load %struct.mac_address*, %struct.mac_address** %addresses314, align 16
  %tobool315 = icmp ne %struct.mac_address* %120, null
  br i1 %tobool315, label %land.lhs.true316, label %land.end325

land.lhs.true316:                                 ; preds = %if.end312
  %121 = load %struct.wiphy*, %struct.wiphy** %wiphy.addr, align 8
  %perm_addr = getelementptr inbounds %struct.wiphy, %struct.wiphy* %121, i32 0, i32 0
  %arraydecay = getelementptr inbounds [6 x i8], [6 x i8]* %perm_addr, i32 0, i32 0
  %call317 = call zeroext i1 @is_zero_ether_addr(i8* %arraydecay)
  br i1 %call317, label %land.end325, label %land.rhs318

land.rhs318:                                      ; preds = %land.lhs.true316
  %122 = load %struct.wiphy*, %struct.wiphy** %wiphy.addr, align 8
  %perm_addr319 = getelementptr inbounds %struct.wiphy, %struct.wiphy* %122, i32 0, i32 0
  %arraydecay320 = getelementptr inbounds [6 x i8], [6 x i8]* %perm_addr319, i32 0, i32 0
  %123 = load %struct.wiphy*, %struct.wiphy** %wiphy.addr, align 8
  %addresses321 = getelementptr inbounds %struct.wiphy, %struct.wiphy* %123, i32 0, i32 2
  %124 = load %struct.mac_address*, %struct.mac_address** %addresses321, align 16
  %arrayidx = getelementptr inbounds %struct.mac_address, %struct.mac_address* %124, i64 0
  %addr = getelementptr inbounds %struct.mac_address, %struct.mac_address* %arrayidx, i32 0, i32 0
  %arraydecay322 = getelementptr inbounds [6 x i8], [6 x i8]* %addr, i32 0, i32 0
  %call323 = call i32 @memcmp(i8* %arraydecay320, i8* %arraydecay322, i64 6)
  %tobool324 = icmp ne i32 %call323, 0
  br label %land.end325

land.end325:                                      ; preds = %land.rhs318, %land.lhs.true316, %if.end312
  %125 = phi i1 [ false, %land.lhs.true316 ], [ false, %if.end312 ], [ %tobool324, %land.rhs318 ]
  %lnot326 = xor i1 %125, true
  %lnot328 = xor i1 %lnot326, true
  %lnot.ext329 = zext i1 %lnot328 to i32
  store i32 %lnot.ext329, i32* %__ret_warn_on313, align 4
  %126 = load i32, i32* %__ret_warn_on313, align 4
  %tobool330 = icmp ne i32 %126, 0
  %lnot331 = xor i1 %tobool330, true
  %lnot333 = xor i1 %lnot331, true
  %lnot.ext334 = zext i1 %lnot333 to i32
  %conv335 = sext i32 %lnot.ext334 to i64
  %tobool336 = icmp ne i64 %conv335, 0
  br i1 %tobool336, label %if.then337, label %if.end338

if.then337:                                       ; preds = %land.end325
  call void @warn_slowpath_null(i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.1, i32 0, i32 0), i32 679)
  br label %if.end338

if.end338:                                        ; preds = %if.then337, %land.end325
  %127 = load i32, i32* %__ret_warn_on313, align 4
  %tobool340 = icmp ne i32 %127, 0
  %lnot341 = xor i1 %tobool340, true
  %lnot343 = xor i1 %lnot341, true
  %lnot.ext344 = zext i1 %lnot343 to i32
  %conv345 = sext i32 %lnot.ext344 to i64
  store i64 %conv345, i64* %tmp339, align 8
  %128 = load i64, i64* %tmp339, align 8
  %tobool346 = icmp ne i64 %128, 0
  br i1 %tobool346, label %if.then347, label %if.end348

if.then347:                                       ; preds = %if.end338
  store i32 -22, i32* %retval, align 4
  br label %return

if.end348:                                        ; preds = %if.end338
  %129 = load %struct.wiphy*, %struct.wiphy** %wiphy.addr, align 8
  %max_acl_mac_addrs = getelementptr inbounds %struct.wiphy, %struct.wiphy* %129, i32 0, i32 9
  %130 = load i16, i16* %max_acl_mac_addrs, align 2
  %conv350 = zext i16 %130 to i32
  %tobool351 = icmp ne i32 %conv350, 0
  br i1 %tobool351, label %land.rhs352, label %land.end362

land.rhs352:                                      ; preds = %if.end348
  %131 = load %struct.wiphy*, %struct.wiphy** %wiphy.addr, align 8
  %flags353 = getelementptr inbounds %struct.wiphy, %struct.wiphy* %131, i32 0, i32 10
  %132 = load i32, i32* %flags353, align 4
  %and354 = and i32 %132, 131072
  %tobool355 = icmp ne i32 %and354, 0
  br i1 %tobool355, label %lor.rhs356, label %lor.end361

lor.rhs356:                                       ; preds = %land.rhs352
  %133 = load %struct.cfg80211_registered_device*, %struct.cfg80211_registered_device** %rdev, align 8
  %ops357 = getelementptr inbounds %struct.cfg80211_registered_device, %struct.cfg80211_registered_device* %133, i32 0, i32 0
  %134 = load %struct.cfg80211_ops*, %struct.cfg80211_ops** %ops357, align 32
  %set_mac_acl = getelementptr inbounds %struct.cfg80211_ops, %struct.cfg80211_ops* %134, i32 0, i32 78
  %135 = load i32 (%struct.wiphy*, %struct.net_device*, %struct.cfg80211_acl_data*)*, i32 (%struct.wiphy*, %struct.net_device*, %struct.cfg80211_acl_data*)** %set_mac_acl, align 8
  %tobool358 = icmp ne i32 (%struct.wiphy*, %struct.net_device*, %struct.cfg80211_acl_data*)* %135, null
  %lnot359 = xor i1 %tobool358, true
  br label %lor.end361

lor.end361:                                       ; preds = %lor.rhs356, %land.rhs352
  %136 = phi i1 [ true, %land.rhs352 ], [ %lnot359, %lor.rhs356 ]
  br label %land.end362

land.end362:                                      ; preds = %lor.end361, %if.end348
  %137 = phi i1 [ false, %if.end348 ], [ %136, %lor.end361 ]
  %lnot363 = xor i1 %137, true
  %lnot365 = xor i1 %lnot363, true
  %lnot.ext366 = zext i1 %lnot365 to i32
  store i32 %lnot.ext366, i32* %__ret_warn_on349, align 4
  %138 = load i32, i32* %__ret_warn_on349, align 4
  %tobool367 = icmp ne i32 %138, 0
  %lnot368 = xor i1 %tobool367, true
  %lnot370 = xor i1 %lnot368, true
  %lnot.ext371 = zext i1 %lnot370 to i32
  %conv372 = sext i32 %lnot.ext371 to i64
  %tobool373 = icmp ne i64 %conv372, 0
  br i1 %tobool373, label %if.then374, label %if.end375

if.then374:                                       ; preds = %land.end362
  call void @warn_slowpath_null(i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.1, i32 0, i32 0), i32 684)
  br label %if.end375

if.end375:                                        ; preds = %if.then374, %land.end362
  %139 = load i32, i32* %__ret_warn_on349, align 4
  %tobool377 = icmp ne i32 %139, 0
  %lnot378 = xor i1 %tobool377, true
  %lnot380 = xor i1 %lnot378, true
  %lnot.ext381 = zext i1 %lnot380 to i32
  %conv382 = sext i32 %lnot.ext381 to i64
  store i64 %conv382, i64* %tmp376, align 8
  %140 = load i64, i64* %tmp376, align 8
  %tobool383 = icmp ne i64 %140, 0
  br i1 %tobool383, label %if.then384, label %if.end385

if.then384:                                       ; preds = %if.end375
  store i32 -22, i32* %retval, align 4
  br label %return

if.end385:                                        ; preds = %if.end375
  %141 = load %struct.wiphy*, %struct.wiphy** %wiphy.addr, align 8
  %bss_select_support = getelementptr inbounds %struct.wiphy, %struct.wiphy* %141, i32 0, i32 65
  %142 = load i32, i32* %bss_select_support, align 4
  %tobool387 = icmp ne i32 %142, 0
  br i1 %tobool387, label %land.rhs388, label %land.end393

land.rhs388:                                      ; preds = %if.end385
  %143 = load %struct.wiphy*, %struct.wiphy** %wiphy.addr, align 8
  %bss_select_support389 = getelementptr inbounds %struct.wiphy, %struct.wiphy* %143, i32 0, i32 65
  %144 = load i32, i32* %bss_select_support389, align 4
  %conv390 = zext i32 %144 to i64
  %and391 = and i64 %conv390, -15
  %tobool392 = icmp ne i64 %and391, 0
  br label %land.end393

land.end393:                                      ; preds = %land.rhs388, %if.end385
  %145 = phi i1 [ false, %if.end385 ], [ %tobool392, %land.rhs388 ]
  %lnot394 = xor i1 %145, true
  %lnot396 = xor i1 %lnot394, true
  %lnot.ext397 = zext i1 %lnot396 to i32
  store i32 %lnot.ext397, i32* %__ret_warn_on386, align 4
  %146 = load i32, i32* %__ret_warn_on386, align 4
  %tobool398 = icmp ne i32 %146, 0
  %lnot399 = xor i1 %tobool398, true
  %lnot401 = xor i1 %lnot399, true
  %lnot.ext402 = zext i1 %lnot401 to i32
  %conv403 = sext i32 %lnot.ext402 to i64
  %tobool404 = icmp ne i64 %conv403, 0
  br i1 %tobool404, label %if.then405, label %if.end406

if.then405:                                       ; preds = %land.end393
  call void @warn_slowpath_null(i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.1, i32 0, i32 0), i32 691)
  br label %if.end406

if.end406:                                        ; preds = %if.then405, %land.end393
  %147 = load i32, i32* %__ret_warn_on386, align 4
  %tobool408 = icmp ne i32 %147, 0
  %lnot409 = xor i1 %tobool408, true
  %lnot411 = xor i1 %lnot409, true
  %lnot.ext412 = zext i1 %lnot411 to i32
  %conv413 = sext i32 %lnot.ext412 to i64
  store i64 %conv413, i64* %tmp407, align 8
  %148 = load i64, i64* %tmp407, align 8
  %tobool414 = icmp ne i64 %148, 0
  br i1 %tobool414, label %if.then415, label %if.end416

if.then415:                                       ; preds = %if.end406
  store i32 -22, i32* %retval, align 4
  br label %return

if.end416:                                        ; preds = %if.end406
  %149 = load %struct.wiphy*, %struct.wiphy** %wiphy.addr, align 8
  %addresses417 = getelementptr inbounds %struct.wiphy, %struct.wiphy* %149, i32 0, i32 2
  %150 = load %struct.mac_address*, %struct.mac_address** %addresses417, align 16
  %tobool418 = icmp ne %struct.mac_address* %150, null
  br i1 %tobool418, label %if.then419, label %if.end438

if.then419:                                       ; preds = %if.end416
  store i64 6, i64* %__len, align 8
  %151 = load i64, i64* %__len, align 8
  %cmp420 = icmp uge i64 %151, 64
  br i1 %cmp420, label %if.then422, label %if.else

if.then422:                                       ; preds = %if.then419
  %152 = load %struct.wiphy*, %struct.wiphy** %wiphy.addr, align 8
  %perm_addr423 = getelementptr inbounds %struct.wiphy, %struct.wiphy* %152, i32 0, i32 0
  %arraydecay424 = getelementptr inbounds [6 x i8], [6 x i8]* %perm_addr423, i32 0, i32 0
  %153 = load %struct.wiphy*, %struct.wiphy** %wiphy.addr, align 8
  %addresses425 = getelementptr inbounds %struct.wiphy, %struct.wiphy* %153, i32 0, i32 2
  %154 = load %struct.mac_address*, %struct.mac_address** %addresses425, align 16
  %arrayidx426 = getelementptr inbounds %struct.mac_address, %struct.mac_address* %154, i64 0
  %addr427 = getelementptr inbounds %struct.mac_address, %struct.mac_address* %arrayidx426, i32 0, i32 0
  %arraydecay428 = getelementptr inbounds [6 x i8], [6 x i8]* %addr427, i32 0, i32 0
  %155 = load i64, i64* %__len, align 8
  %call429 = call i8* @__memcpy(i8* %arraydecay424, i8* %arraydecay428, i64 %155)
  store i8* %call429, i8** %__ret, align 8
  br label %if.end436

if.else:                                          ; preds = %if.then419
  %156 = load %struct.wiphy*, %struct.wiphy** %wiphy.addr, align 8
  %perm_addr430 = getelementptr inbounds %struct.wiphy, %struct.wiphy* %156, i32 0, i32 0
  %arraydecay431 = getelementptr inbounds [6 x i8], [6 x i8]* %perm_addr430, i32 0, i32 0
  %157 = load %struct.wiphy*, %struct.wiphy** %wiphy.addr, align 8
  %addresses432 = getelementptr inbounds %struct.wiphy, %struct.wiphy* %157, i32 0, i32 2
  %158 = load %struct.mac_address*, %struct.mac_address** %addresses432, align 16
  %arrayidx433 = getelementptr inbounds %struct.mac_address, %struct.mac_address* %158, i64 0
  %addr434 = getelementptr inbounds %struct.mac_address, %struct.mac_address* %arrayidx433, i32 0, i32 0
  %arraydecay435 = getelementptr inbounds [6 x i8], [6 x i8]* %addr434, i32 0, i32 0
  %159 = load i64, i64* %__len, align 8
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %arraydecay431, i8* %arraydecay435, i64 %159, i32 1, i1 false)
  store i8* %arraydecay431, i8** %__ret, align 8
  br label %if.end436

if.end436:                                        ; preds = %if.else, %if.then422
  %160 = load i8*, i8** %__ret, align 8
  store i8* %160, i8** %tmp437, align 8
  %161 = load i8*, i8** %tmp437, align 8
  br label %if.end438

if.end438:                                        ; preds = %if.end436, %if.end416
  %162 = load i16, i16* %ifmodes, align 2
  %tobool440 = icmp ne i16 %162, 0
  %lnot441 = xor i1 %tobool440, true
  %lnot443 = xor i1 %lnot441, true
  %lnot445 = xor i1 %lnot443, true
  %lnot.ext446 = zext i1 %lnot445 to i32
  store i32 %lnot.ext446, i32* %__ret_warn_on439, align 4
  %163 = load i32, i32* %__ret_warn_on439, align 4
  %tobool447 = icmp ne i32 %163, 0
  %lnot448 = xor i1 %tobool447, true
  %lnot450 = xor i1 %lnot448, true
  %lnot.ext451 = zext i1 %lnot450 to i32
  %conv452 = sext i32 %lnot.ext451 to i64
  %tobool453 = icmp ne i64 %conv452, 0
  br i1 %tobool453, label %if.then454, label %if.end455

if.then454:                                       ; preds = %if.end438
  call void @warn_slowpath_null(i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.1, i32 0, i32 0), i32 698)
  br label %if.end455

if.end455:                                        ; preds = %if.then454, %if.end438
  %164 = load i32, i32* %__ret_warn_on439, align 4
  %tobool457 = icmp ne i32 %164, 0
  %lnot458 = xor i1 %tobool457, true
  %lnot460 = xor i1 %lnot458, true
  %lnot.ext461 = zext i1 %lnot460 to i32
  %conv462 = sext i32 %lnot.ext461 to i64
  store i64 %conv462, i64* %tmp456, align 8
  %165 = load i64, i64* %tmp456, align 8
  %166 = load i16, i16* %ifmodes, align 2
  %conv463 = zext i16 %166 to i32
  %and464 = and i32 %conv463, 8190
  %conv465 = trunc i32 %and464 to i16
  store i16 %conv465, i16* %ifmodes, align 2
  %167 = load i16, i16* %ifmodes, align 2
  %conv467 = zext i16 %167 to i32
  %168 = load %struct.wiphy*, %struct.wiphy** %wiphy.addr, align 8
  %interface_modes468 = getelementptr inbounds %struct.wiphy, %struct.wiphy* %168, i32 0, i32 8
  %169 = load i16, i16* %interface_modes468, align 16
  %conv469 = zext i16 %169 to i32
  %cmp470 = icmp ne i32 %conv467, %conv469
  %lnot472 = xor i1 %cmp470, true
  %lnot474 = xor i1 %lnot472, true
  %lnot.ext475 = zext i1 %lnot474 to i32
  store i32 %lnot.ext475, i32* %__ret_warn_on466, align 4
  %170 = load i32, i32* %__ret_warn_on466, align 4
  %tobool476 = icmp ne i32 %170, 0
  %lnot477 = xor i1 %tobool476, true
  %lnot479 = xor i1 %lnot477, true
  %lnot.ext480 = zext i1 %lnot479 to i32
  %conv481 = sext i32 %lnot.ext480 to i64
  %tobool482 = icmp ne i64 %conv481, 0
  br i1 %tobool482, label %if.then483, label %if.end484

if.then483:                                       ; preds = %if.end455
  call void @warn_slowpath_null(i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.1, i32 0, i32 0), i32 700)
  br label %if.end484

if.end484:                                        ; preds = %if.then483, %if.end455
  %171 = load i32, i32* %__ret_warn_on466, align 4
  %tobool486 = icmp ne i32 %171, 0
  %lnot487 = xor i1 %tobool486, true
  %lnot489 = xor i1 %lnot487, true
  %lnot.ext490 = zext i1 %lnot489 to i32
  %conv491 = sext i32 %lnot.ext490 to i64
  store i64 %conv491, i64* %tmp485, align 8
  %172 = load i64, i64* %tmp485, align 8
  %tobool492 = icmp ne i64 %172, 0
  br i1 %tobool492, label %if.then493, label %if.end495

if.then493:                                       ; preds = %if.end484
  %173 = load i16, i16* %ifmodes, align 2
  %174 = load %struct.wiphy*, %struct.wiphy** %wiphy.addr, align 8
  %interface_modes494 = getelementptr inbounds %struct.wiphy, %struct.wiphy* %174, i32 0, i32 8
  store i16 %173, i16* %interface_modes494, align 16
  br label %if.end495

if.end495:                                        ; preds = %if.then493, %if.end484
  %175 = load %struct.wiphy*, %struct.wiphy** %wiphy.addr, align 8
  %call496 = call i32 @wiphy_verify_combinations(%struct.wiphy* %175)
  store i32 %call496, i32* %res, align 4
  %176 = load i32, i32* %res, align 4
  %tobool497 = icmp ne i32 %176, 0
  br i1 %tobool497, label %if.then498, label %if.end499

if.then498:                                       ; preds = %if.end495
  %177 = load i32, i32* %res, align 4
  store i32 %177, i32* %retval, align 4
  br label %return

if.end499:                                        ; preds = %if.end495
  store i32 0, i32* %band, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc635, %if.end499
  %178 = load i32, i32* %band, align 4
  %cmp500 = icmp ult i32 %178, 3
  br i1 %cmp500, label %for.body, label %for.end637

for.body:                                         ; preds = %for.cond
  %179 = load %struct.wiphy*, %struct.wiphy** %wiphy.addr, align 8
  %bands = getelementptr inbounds %struct.wiphy, %struct.wiphy* %179, i32 0, i32 47
  %180 = load i32, i32* %band, align 4
  %idxprom = zext i32 %180 to i64
  %arrayidx502 = getelementptr inbounds [3 x %struct.ieee80211_supported_band*], [3 x %struct.ieee80211_supported_band*]* %bands, i64 0, i64 %idxprom
  %181 = load %struct.ieee80211_supported_band*, %struct.ieee80211_supported_band** %arrayidx502, align 8
  store %struct.ieee80211_supported_band* %181, %struct.ieee80211_supported_band** %sband, align 8
  %182 = load %struct.ieee80211_supported_band*, %struct.ieee80211_supported_band** %sband, align 8
  %tobool503 = icmp ne %struct.ieee80211_supported_band* %182, null
  br i1 %tobool503, label %if.end505, label %if.then504

if.then504:                                       ; preds = %for.body
  br label %for.inc635

if.end505:                                        ; preds = %for.body
  %183 = load i32, i32* %band, align 4
  %184 = load %struct.ieee80211_supported_band*, %struct.ieee80211_supported_band** %sband, align 8
  %band506 = getelementptr inbounds %struct.ieee80211_supported_band, %struct.ieee80211_supported_band* %184, i32 0, i32 2
  store i32 %183, i32* %band506, align 8
  %185 = load %struct.ieee80211_supported_band*, %struct.ieee80211_supported_band** %sband, align 8
  %n_channels = getelementptr inbounds %struct.ieee80211_supported_band, %struct.ieee80211_supported_band* %185, i32 0, i32 3
  %186 = load i32, i32* %n_channels, align 4
  %tobool508 = icmp ne i32 %186, 0
  %lnot509 = xor i1 %tobool508, true
  %lnot511 = xor i1 %lnot509, true
  %lnot513 = xor i1 %lnot511, true
  %lnot.ext514 = zext i1 %lnot513 to i32
  store i32 %lnot.ext514, i32* %__ret_warn_on507, align 4
  %187 = load i32, i32* %__ret_warn_on507, align 4
  %tobool515 = icmp ne i32 %187, 0
  %lnot516 = xor i1 %tobool515, true
  %lnot518 = xor i1 %lnot516, true
  %lnot.ext519 = zext i1 %lnot518 to i32
  %conv520 = sext i32 %lnot.ext519 to i64
  %tobool521 = icmp ne i64 %conv520, 0
  br i1 %tobool521, label %if.then522, label %if.end523

if.then522:                                       ; preds = %if.end505
  call void @warn_slowpath_null(i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.1, i32 0, i32 0), i32 714)
  br label %if.end523

if.end523:                                        ; preds = %if.then522, %if.end505
  %188 = load i32, i32* %__ret_warn_on507, align 4
  %tobool525 = icmp ne i32 %188, 0
  %lnot526 = xor i1 %tobool525, true
  %lnot528 = xor i1 %lnot526, true
  %lnot.ext529 = zext i1 %lnot528 to i32
  %conv530 = sext i32 %lnot.ext529 to i64
  store i64 %conv530, i64* %tmp524, align 8
  %189 = load i64, i64* %tmp524, align 8
  %tobool531 = icmp ne i64 %189, 0
  br i1 %tobool531, label %if.then532, label %if.end533

if.then532:                                       ; preds = %if.end523
  store i32 -22, i32* %retval, align 4
  br label %return

if.end533:                                        ; preds = %if.end523
  %190 = load i32, i32* %band, align 4
  %cmp535 = icmp ne i32 %190, 2
  br i1 %cmp535, label %land.rhs537, label %land.end541

land.rhs537:                                      ; preds = %if.end533
  %191 = load %struct.ieee80211_supported_band*, %struct.ieee80211_supported_band** %sband, align 8
  %n_bitrates = getelementptr inbounds %struct.ieee80211_supported_band, %struct.ieee80211_supported_band* %191, i32 0, i32 4
  %192 = load i32, i32* %n_bitrates, align 8
  %tobool538 = icmp ne i32 %192, 0
  %lnot539 = xor i1 %tobool538, true
  br label %land.end541

land.end541:                                      ; preds = %land.rhs537, %if.end533
  %193 = phi i1 [ false, %if.end533 ], [ %lnot539, %land.rhs537 ]
  %lnot542 = xor i1 %193, true
  %lnot544 = xor i1 %lnot542, true
  %lnot.ext545 = zext i1 %lnot544 to i32
  store i32 %lnot.ext545, i32* %__ret_warn_on534, align 4
  %194 = load i32, i32* %__ret_warn_on534, align 4
  %tobool546 = icmp ne i32 %194, 0
  %lnot547 = xor i1 %tobool546, true
  %lnot549 = xor i1 %lnot547, true
  %lnot.ext550 = zext i1 %lnot549 to i32
  %conv551 = sext i32 %lnot.ext550 to i64
  %tobool552 = icmp ne i64 %conv551, 0
  br i1 %tobool552, label %if.then553, label %if.end554

if.then553:                                       ; preds = %land.end541
  call void @warn_slowpath_null(i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.1, i32 0, i32 0), i32 721)
  br label %if.end554

if.end554:                                        ; preds = %if.then553, %land.end541
  %195 = load i32, i32* %__ret_warn_on534, align 4
  %tobool556 = icmp ne i32 %195, 0
  %lnot557 = xor i1 %tobool556, true
  %lnot559 = xor i1 %lnot557, true
  %lnot.ext560 = zext i1 %lnot559 to i32
  %conv561 = sext i32 %lnot.ext560 to i64
  store i64 %conv561, i64* %tmp555, align 8
  %196 = load i64, i64* %tmp555, align 8
  %tobool562 = icmp ne i64 %196, 0
  br i1 %tobool562, label %if.then563, label %if.end564

if.then563:                                       ; preds = %if.end554
  store i32 -22, i32* %retval, align 4
  br label %return

if.end564:                                        ; preds = %if.end554
  %197 = load i8, i8* @cfg80211_disable_40mhz_24ghz, align 1
  %tobool565 = trunc i8 %197 to i1
  br i1 %tobool565, label %land.lhs.true567, label %if.end583

land.lhs.true567:                                 ; preds = %if.end564
  %198 = load i32, i32* %band, align 4
  %cmp568 = icmp eq i32 %198, 0
  br i1 %cmp568, label %land.lhs.true570, label %if.end583

land.lhs.true570:                                 ; preds = %land.lhs.true567
  %199 = load %struct.ieee80211_supported_band*, %struct.ieee80211_supported_band** %sband, align 8
  %ht_cap = getelementptr inbounds %struct.ieee80211_supported_band, %struct.ieee80211_supported_band* %199, i32 0, i32 5
  %ht_supported = getelementptr inbounds %struct.ieee80211_sta_ht_cap, %struct.ieee80211_sta_ht_cap* %ht_cap, i32 0, i32 1
  %200 = load i8, i8* %ht_supported, align 2
  %tobool571 = trunc i8 %200 to i1
  br i1 %tobool571, label %if.then573, label %if.end583

if.then573:                                       ; preds = %land.lhs.true570
  %201 = load %struct.ieee80211_supported_band*, %struct.ieee80211_supported_band** %sband, align 8
  %ht_cap574 = getelementptr inbounds %struct.ieee80211_supported_band, %struct.ieee80211_supported_band* %201, i32 0, i32 5
  %cap = getelementptr inbounds %struct.ieee80211_sta_ht_cap, %struct.ieee80211_sta_ht_cap* %ht_cap574, i32 0, i32 0
  %202 = load i16, i16* %cap, align 4
  %conv575 = zext i16 %202 to i32
  %and576 = and i32 %conv575, -3
  %conv577 = trunc i32 %and576 to i16
  store i16 %conv577, i16* %cap, align 4
  %203 = load %struct.ieee80211_supported_band*, %struct.ieee80211_supported_band** %sband, align 8
  %ht_cap578 = getelementptr inbounds %struct.ieee80211_supported_band, %struct.ieee80211_supported_band* %203, i32 0, i32 5
  %cap579 = getelementptr inbounds %struct.ieee80211_sta_ht_cap, %struct.ieee80211_sta_ht_cap* %ht_cap578, i32 0, i32 0
  %204 = load i16, i16* %cap579, align 4
  %conv580 = zext i16 %204 to i32
  %and581 = and i32 %conv580, -65
  %conv582 = trunc i32 %and581 to i16
  store i16 %conv582, i16* %cap579, align 4
  br label %if.end583

if.end583:                                        ; preds = %if.then573, %land.lhs.true570, %land.lhs.true567, %if.end564
  %205 = load %struct.ieee80211_supported_band*, %struct.ieee80211_supported_band** %sband, align 8
  %n_bitrates585 = getelementptr inbounds %struct.ieee80211_supported_band, %struct.ieee80211_supported_band* %205, i32 0, i32 4
  %206 = load i32, i32* %n_bitrates585, align 8
  %cmp586 = icmp sgt i32 %206, 32
  %lnot588 = xor i1 %cmp586, true
  %lnot590 = xor i1 %lnot588, true
  %lnot.ext591 = zext i1 %lnot590 to i32
  store i32 %lnot.ext591, i32* %__ret_warn_on584, align 4
  %207 = load i32, i32* %__ret_warn_on584, align 4
  %tobool592 = icmp ne i32 %207, 0
  %lnot593 = xor i1 %tobool592, true
  %lnot595 = xor i1 %lnot593, true
  %lnot.ext596 = zext i1 %lnot595 to i32
  %conv597 = sext i32 %lnot.ext596 to i64
  %tobool598 = icmp ne i64 %conv597, 0
  br i1 %tobool598, label %if.then599, label %if.end600

if.then599:                                       ; preds = %if.end583
  call void @warn_slowpath_null(i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.1, i32 0, i32 0), i32 741)
  br label %if.end600

if.end600:                                        ; preds = %if.then599, %if.end583
  %208 = load i32, i32* %__ret_warn_on584, align 4
  %tobool602 = icmp ne i32 %208, 0
  %lnot603 = xor i1 %tobool602, true
  %lnot605 = xor i1 %lnot603, true
  %lnot.ext606 = zext i1 %lnot605 to i32
  %conv607 = sext i32 %lnot.ext606 to i64
  store i64 %conv607, i64* %tmp601, align 8
  %209 = load i64, i64* %tmp601, align 8
  %tobool608 = icmp ne i64 %209, 0
  br i1 %tobool608, label %if.then609, label %if.end610

if.then609:                                       ; preds = %if.end600
  store i32 -22, i32* %retval, align 4
  br label %return

if.end610:                                        ; preds = %if.end600
  store i32 0, i32* %i, align 4
  br label %for.cond611

for.cond611:                                      ; preds = %for.inc, %if.end610
  %210 = load i32, i32* %i, align 4
  %211 = load %struct.ieee80211_supported_band*, %struct.ieee80211_supported_band** %sband, align 8
  %n_channels612 = getelementptr inbounds %struct.ieee80211_supported_band, %struct.ieee80211_supported_band* %211, i32 0, i32 3
  %212 = load i32, i32* %n_channels612, align 4
  %cmp613 = icmp slt i32 %210, %212
  br i1 %cmp613, label %for.body615, label %for.end

for.body615:                                      ; preds = %for.cond611
  %213 = load %struct.ieee80211_supported_band*, %struct.ieee80211_supported_band** %sband, align 8
  %channels = getelementptr inbounds %struct.ieee80211_supported_band, %struct.ieee80211_supported_band* %213, i32 0, i32 0
  %214 = load %struct.ieee80211_channel*, %struct.ieee80211_channel** %channels, align 8
  %215 = load i32, i32* %i, align 4
  %idxprom616 = sext i32 %215 to i64
  %arrayidx617 = getelementptr inbounds %struct.ieee80211_channel, %struct.ieee80211_channel* %214, i64 %idxprom616
  %flags618 = getelementptr inbounds %struct.ieee80211_channel, %struct.ieee80211_channel* %arrayidx617, i32 0, i32 3
  %216 = load i32, i32* %flags618, align 8
  %217 = load %struct.ieee80211_supported_band*, %struct.ieee80211_supported_band** %sband, align 8
  %channels619 = getelementptr inbounds %struct.ieee80211_supported_band, %struct.ieee80211_supported_band* %217, i32 0, i32 0
  %218 = load %struct.ieee80211_channel*, %struct.ieee80211_channel** %channels619, align 8
  %219 = load i32, i32* %i, align 4
  %idxprom620 = sext i32 %219 to i64
  %arrayidx621 = getelementptr inbounds %struct.ieee80211_channel, %struct.ieee80211_channel* %218, i64 %idxprom620
  %orig_flags = getelementptr inbounds %struct.ieee80211_channel, %struct.ieee80211_channel* %arrayidx621, i32 0, i32 8
  store i32 %216, i32* %orig_flags, align 4
  %220 = load %struct.ieee80211_supported_band*, %struct.ieee80211_supported_band** %sband, align 8
  %channels622 = getelementptr inbounds %struct.ieee80211_supported_band, %struct.ieee80211_supported_band* %220, i32 0, i32 0
  %221 = load %struct.ieee80211_channel*, %struct.ieee80211_channel** %channels622, align 8
  %222 = load i32, i32* %i, align 4
  %idxprom623 = sext i32 %222 to i64
  %arrayidx624 = getelementptr inbounds %struct.ieee80211_channel, %struct.ieee80211_channel* %221, i64 %idxprom623
  %orig_mag = getelementptr inbounds %struct.ieee80211_channel, %struct.ieee80211_channel* %arrayidx624, i32 0, i32 9
  store i32 2147483647, i32* %orig_mag, align 8
  %223 = load %struct.ieee80211_supported_band*, %struct.ieee80211_supported_band** %sband, align 8
  %channels625 = getelementptr inbounds %struct.ieee80211_supported_band, %struct.ieee80211_supported_band* %223, i32 0, i32 0
  %224 = load %struct.ieee80211_channel*, %struct.ieee80211_channel** %channels625, align 8
  %225 = load i32, i32* %i, align 4
  %idxprom626 = sext i32 %225 to i64
  %arrayidx627 = getelementptr inbounds %struct.ieee80211_channel, %struct.ieee80211_channel* %224, i64 %idxprom626
  %max_power = getelementptr inbounds %struct.ieee80211_channel, %struct.ieee80211_channel* %arrayidx627, i32 0, i32 5
  %226 = load i32, i32* %max_power, align 8
  %227 = load %struct.ieee80211_supported_band*, %struct.ieee80211_supported_band** %sband, align 8
  %channels628 = getelementptr inbounds %struct.ieee80211_supported_band, %struct.ieee80211_supported_band* %227, i32 0, i32 0
  %228 = load %struct.ieee80211_channel*, %struct.ieee80211_channel** %channels628, align 8
  %229 = load i32, i32* %i, align 4
  %idxprom629 = sext i32 %229 to i64
  %arrayidx630 = getelementptr inbounds %struct.ieee80211_channel, %struct.ieee80211_channel* %228, i64 %idxprom629
  %orig_mpwr = getelementptr inbounds %struct.ieee80211_channel, %struct.ieee80211_channel* %arrayidx630, i32 0, i32 10
  store i32 %226, i32* %orig_mpwr, align 4
  %230 = load i32, i32* %band, align 4
  %231 = load %struct.ieee80211_supported_band*, %struct.ieee80211_supported_band** %sband, align 8
  %channels631 = getelementptr inbounds %struct.ieee80211_supported_band, %struct.ieee80211_supported_band* %231, i32 0, i32 0
  %232 = load %struct.ieee80211_channel*, %struct.ieee80211_channel** %channels631, align 8
  %233 = load i32, i32* %i, align 4
  %idxprom632 = sext i32 %233 to i64
  %arrayidx633 = getelementptr inbounds %struct.ieee80211_channel, %struct.ieee80211_channel* %232, i64 %idxprom632
  %band634 = getelementptr inbounds %struct.ieee80211_channel, %struct.ieee80211_channel* %arrayidx633, i32 0, i32 0
  store i32 %230, i32* %band634, align 8
  br label %for.inc

for.inc:                                          ; preds = %for.body615
  %234 = load i32, i32* %i, align 4
  %inc = add nsw i32 %234, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond611

for.end:                                          ; preds = %for.cond611
  store i8 1, i8* %have_band, align 1
  br label %for.inc635

for.inc635:                                       ; preds = %for.end, %if.then504
  %235 = load i32, i32* %band, align 4
  %inc636 = add i32 %235, 1
  store i32 %inc636, i32* %band, align 4
  br label %for.cond

for.end637:                                       ; preds = %for.cond
  %236 = load i8, i8* %have_band, align 1
  %tobool638 = trunc i8 %236 to i1
  br i1 %tobool638, label %if.end657, label %if.then639

if.then639:                                       ; preds = %for.end637
  store i32 1, i32* %__ret_warn_on640, align 4
  %237 = load i32, i32* %__ret_warn_on640, align 4
  %tobool641 = icmp ne i32 %237, 0
  %lnot642 = xor i1 %tobool641, true
  %lnot644 = xor i1 %lnot642, true
  %lnot.ext645 = zext i1 %lnot644 to i32
  %conv646 = sext i32 %lnot.ext645 to i64
  %tobool647 = icmp ne i64 %conv646, 0
  br i1 %tobool647, label %if.then648, label %if.end649

if.then648:                                       ; preds = %if.then639
  call void @warn_slowpath_null(i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.1, i32 0, i32 0), i32 757)
  br label %if.end649

if.end649:                                        ; preds = %if.then648, %if.then639
  %238 = load i32, i32* %__ret_warn_on640, align 4
  %tobool651 = icmp ne i32 %238, 0
  %lnot652 = xor i1 %tobool651, true
  %lnot654 = xor i1 %lnot652, true
  %lnot.ext655 = zext i1 %lnot654 to i32
  %conv656 = sext i32 %lnot.ext655 to i64
  store i64 %conv656, i64* %tmp650, align 8
  %239 = load i64, i64* %tmp650, align 8
  store i32 -22, i32* %retval, align 4
  br label %return

if.end657:                                        ; preds = %for.end637
  %240 = load %struct.cfg80211_registered_device*, %struct.cfg80211_registered_device** %rdev, align 8
  %wiphy659 = getelementptr inbounds %struct.cfg80211_registered_device, %struct.cfg80211_registered_device* %240, i32 0, i32 42
  %wowlan660 = getelementptr inbounds %struct.wiphy, %struct.wiphy* %wiphy659, i32 0, i32 34
  %241 = load %struct.wiphy_wowlan_support*, %struct.wiphy_wowlan_support** %wowlan660, align 8
  %tobool661 = icmp ne %struct.wiphy_wowlan_support* %241, null
  br i1 %tobool661, label %land.lhs.true662, label %land.end682

land.lhs.true662:                                 ; preds = %if.end657
  %242 = load %struct.cfg80211_registered_device*, %struct.cfg80211_registered_device** %rdev, align 8
  %wiphy663 = getelementptr inbounds %struct.cfg80211_registered_device, %struct.cfg80211_registered_device* %242, i32 0, i32 42
  %wowlan664 = getelementptr inbounds %struct.wiphy, %struct.wiphy* %wiphy663, i32 0, i32 34
  %243 = load %struct.wiphy_wowlan_support*, %struct.wiphy_wowlan_support** %wowlan664, align 8
  %n_patterns665 = getelementptr inbounds %struct.wiphy_wowlan_support, %struct.wiphy_wowlan_support* %243, i32 0, i32 1
  %244 = load i32, i32* %n_patterns665, align 4
  %tobool666 = icmp ne i32 %244, 0
  br i1 %tobool666, label %land.rhs667, label %land.end682

land.rhs667:                                      ; preds = %land.lhs.true662
  %245 = load %struct.cfg80211_registered_device*, %struct.cfg80211_registered_device** %rdev, align 8
  %wiphy668 = getelementptr inbounds %struct.cfg80211_registered_device, %struct.cfg80211_registered_device* %245, i32 0, i32 42
  %wowlan669 = getelementptr inbounds %struct.wiphy, %struct.wiphy* %wiphy668, i32 0, i32 34
  %246 = load %struct.wiphy_wowlan_support*, %struct.wiphy_wowlan_support** %wowlan669, align 8
  %pattern_min_len670 = getelementptr inbounds %struct.wiphy_wowlan_support, %struct.wiphy_wowlan_support* %246, i32 0, i32 3
  %247 = load i32, i32* %pattern_min_len670, align 4
  %tobool671 = icmp ne i32 %247, 0
  br i1 %tobool671, label %lor.rhs672, label %lor.end681

lor.rhs672:                                       ; preds = %land.rhs667
  %248 = load %struct.cfg80211_registered_device*, %struct.cfg80211_registered_device** %rdev, align 8
  %wiphy673 = getelementptr inbounds %struct.cfg80211_registered_device, %struct.cfg80211_registered_device* %248, i32 0, i32 42
  %wowlan674 = getelementptr inbounds %struct.wiphy, %struct.wiphy* %wiphy673, i32 0, i32 34
  %249 = load %struct.wiphy_wowlan_support*, %struct.wiphy_wowlan_support** %wowlan674, align 8
  %pattern_min_len675 = getelementptr inbounds %struct.wiphy_wowlan_support, %struct.wiphy_wowlan_support* %249, i32 0, i32 3
  %250 = load i32, i32* %pattern_min_len675, align 4
  %251 = load %struct.cfg80211_registered_device*, %struct.cfg80211_registered_device** %rdev, align 8
  %wiphy676 = getelementptr inbounds %struct.cfg80211_registered_device, %struct.cfg80211_registered_device* %251, i32 0, i32 42
  %wowlan677 = getelementptr inbounds %struct.wiphy, %struct.wiphy* %wiphy676, i32 0, i32 34
  %252 = load %struct.wiphy_wowlan_support*, %struct.wiphy_wowlan_support** %wowlan677, align 8
  %pattern_max_len678 = getelementptr inbounds %struct.wiphy_wowlan_support, %struct.wiphy_wowlan_support* %252, i32 0, i32 2
  %253 = load i32, i32* %pattern_max_len678, align 8
  %cmp679 = icmp sgt i32 %250, %253
  br label %lor.end681

lor.end681:                                       ; preds = %lor.rhs672, %land.rhs667
  %254 = phi i1 [ true, %land.rhs667 ], [ %cmp679, %lor.rhs672 ]
  br label %land.end682

land.end682:                                      ; preds = %lor.end681, %land.lhs.true662, %if.end657
  %255 = phi i1 [ false, %land.lhs.true662 ], [ false, %if.end657 ], [ %254, %lor.end681 ]
  %lnot683 = xor i1 %255, true
  %lnot685 = xor i1 %lnot683, true
  %lnot.ext686 = zext i1 %lnot685 to i32
  store i32 %lnot.ext686, i32* %__ret_warn_on658, align 4
  %256 = load i32, i32* %__ret_warn_on658, align 4
  %tobool687 = icmp ne i32 %256, 0
  %lnot688 = xor i1 %tobool687, true
  %lnot690 = xor i1 %lnot688, true
  %lnot.ext691 = zext i1 %lnot690 to i32
  %conv692 = sext i32 %lnot.ext691 to i64
  %tobool693 = icmp ne i64 %conv692, 0
  br i1 %tobool693, label %if.then694, label %if.end695

if.then694:                                       ; preds = %land.end682
  call void @warn_slowpath_null(i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.1, i32 0, i32 0), i32 765)
  br label %if.end695

if.end695:                                        ; preds = %if.then694, %land.end682
  %257 = load i32, i32* %__ret_warn_on658, align 4
  %tobool697 = icmp ne i32 %257, 0
  %lnot698 = xor i1 %tobool697, true
  %lnot700 = xor i1 %lnot698, true
  %lnot.ext701 = zext i1 %lnot700 to i32
  %conv702 = sext i32 %lnot.ext701 to i64
  store i64 %conv702, i64* %tmp696, align 8
  %258 = load i64, i64* %tmp696, align 8
  %tobool703 = icmp ne i64 %258, 0
  br i1 %tobool703, label %if.then704, label %if.end705

if.then704:                                       ; preds = %if.end695
  store i32 -22, i32* %retval, align 4
  br label %return

if.end705:                                        ; preds = %if.end695
  %259 = load %struct.wiphy*, %struct.wiphy** %wiphy.addr, align 8
  call void @ieee80211_set_bitrate_flags(%struct.wiphy* %259)
  %260 = load %struct.cfg80211_registered_device*, %struct.cfg80211_registered_device** %rdev, align 8
  %wiphy706 = getelementptr inbounds %struct.cfg80211_registered_device, %struct.cfg80211_registered_device* %260, i32 0, i32 42
  %features707 = getelementptr inbounds %struct.wiphy, %struct.wiphy* %wiphy706, i32 0, i32 12
  %261 = load i32, i32* %features707, align 4
  %or708 = or i32 %261, 128
  store i32 %or708, i32* %features707, align 4
  call void @rtnl_lock()
  %262 = load %struct.cfg80211_registered_device*, %struct.cfg80211_registered_device** %rdev, align 8
  %wiphy709 = getelementptr inbounds %struct.cfg80211_registered_device, %struct.cfg80211_registered_device* %262, i32 0, i32 42
  %dev = getelementptr inbounds %struct.wiphy, %struct.wiphy* %wiphy709, i32 0, i32 50
  %call710 = call i32 @device_add(%struct.device* %dev)
  store i32 %call710, i32* %res, align 4
  %263 = load i32, i32* %res, align 4
  %tobool711 = icmp ne i32 %263, 0
  br i1 %tobool711, label %if.then712, label %if.end713

if.then712:                                       ; preds = %if.end705
  call void @rtnl_unlock()
  %264 = load i32, i32* %res, align 4
  store i32 %264, i32* %retval, align 4
  br label %return

if.end713:                                        ; preds = %if.end705
  %265 = load %struct.wiphy*, %struct.wiphy** %wiphy.addr, align 8
  call void @wiphy_regulatory_register(%struct.wiphy* %265)
  %266 = load %struct.cfg80211_registered_device*, %struct.cfg80211_registered_device** %rdev, align 8
  %list = getelementptr inbounds %struct.cfg80211_registered_device, %struct.cfg80211_registered_device* %266, i32 0, i32 1
  call void @list_add_rcu(%struct.list_head* %list, %struct.list_head* @cfg80211_rdev_list)
  %267 = load i32, i32* @cfg80211_rdev_list_generation, align 4
  %inc714 = add nsw i32 %267, 1
  store i32 %inc714, i32* @cfg80211_rdev_list_generation, align 4
  %268 = load %struct.cfg80211_registered_device*, %struct.cfg80211_registered_device** %rdev, align 8
  %wiphy715 = getelementptr inbounds %struct.cfg80211_registered_device, %struct.cfg80211_registered_device* %268, i32 0, i32 42
  %call716 = call i8* @wiphy_name(%struct.wiphy* %wiphy715)
  %269 = load %struct.dentry*, %struct.dentry** @ieee80211_debugfs_dir, align 8
  %call717 = call %struct.dentry* @debugfs_create_dir(i8* %call716, %struct.dentry* %269)
  %270 = load %struct.cfg80211_registered_device*, %struct.cfg80211_registered_device** %rdev, align 8
  %wiphy718 = getelementptr inbounds %struct.cfg80211_registered_device, %struct.cfg80211_registered_device* %270, i32 0, i32 42
  %debugfsdir = getelementptr inbounds %struct.wiphy, %struct.wiphy* %wiphy718, i32 0, i32 52
  store %struct.dentry* %call717, %struct.dentry** %debugfsdir, align 32
  %271 = load %struct.cfg80211_registered_device*, %struct.cfg80211_registered_device** %rdev, align 8
  %wiphy719 = getelementptr inbounds %struct.cfg80211_registered_device, %struct.cfg80211_registered_device* %271, i32 0, i32 42
  %debugfsdir720 = getelementptr inbounds %struct.wiphy, %struct.wiphy* %wiphy719, i32 0, i32 52
  %272 = load %struct.dentry*, %struct.dentry** %debugfsdir720, align 32
  %273 = bitcast %struct.dentry* %272 to i8*
  %call721 = call zeroext i1 @IS_ERR(i8* %273)
  br i1 %call721, label %if.then722, label %if.end725

if.then722:                                       ; preds = %if.end713
  %274 = load %struct.cfg80211_registered_device*, %struct.cfg80211_registered_device** %rdev, align 8
  %wiphy723 = getelementptr inbounds %struct.cfg80211_registered_device, %struct.cfg80211_registered_device* %274, i32 0, i32 42
  %debugfsdir724 = getelementptr inbounds %struct.wiphy, %struct.wiphy* %wiphy723, i32 0, i32 52
  store %struct.dentry* null, %struct.dentry** %debugfsdir724, align 32
  br label %if.end725

if.end725:                                        ; preds = %if.then722, %if.end713
  %275 = load %struct.cfg80211_registered_device*, %struct.cfg80211_registered_device** %rdev, align 8
  call void @cfg80211_debugfs_rdev_add(%struct.cfg80211_registered_device* %275)
  %276 = load %struct.cfg80211_registered_device*, %struct.cfg80211_registered_device** %rdev, align 8
  call void @nl80211_notify_wiphy(%struct.cfg80211_registered_device* %276, i32 3)
  %277 = load %struct.wiphy*, %struct.wiphy** %wiphy.addr, align 8
  %regulatory_flags726 = getelementptr inbounds %struct.wiphy, %struct.wiphy* %277, i32 0, i32 11
  %278 = load i32, i32* %regulatory_flags726, align 8
  %and727 = and i32 %278, 1
  %tobool728 = icmp ne i32 %and727, 0
  br i1 %tobool728, label %if.then729, label %if.end734

if.then729:                                       ; preds = %if.end725
  %279 = load %struct.wiphy*, %struct.wiphy** %wiphy.addr, align 8
  %call730 = call i32 @get_wiphy_idx(%struct.wiphy* %279)
  %wiphy_idx = getelementptr inbounds %struct.regulatory_request, %struct.regulatory_request* %request, i32 0, i32 1
  store i32 %call730, i32* %wiphy_idx, align 8
  %initiator = getelementptr inbounds %struct.regulatory_request, %struct.regulatory_request* %request, i32 0, i32 2
  store i32 2, i32* %initiator, align 4
  %alpha2 = getelementptr inbounds %struct.regulatory_request, %struct.regulatory_request* %request, i32 0, i32 4
  %arrayidx731 = getelementptr inbounds [2 x i8], [2 x i8]* %alpha2, i64 0, i64 0
  store i8 57, i8* %arrayidx731, align 4
  %alpha2732 = getelementptr inbounds %struct.regulatory_request, %struct.regulatory_request* %request, i32 0, i32 4
  %arrayidx733 = getelementptr inbounds [2 x i8], [2 x i8]* %alpha2732, i64 0, i64 1
  store i8 57, i8* %arrayidx733, align 1
  call void @nl80211_send_reg_change_event(%struct.regulatory_request* %request)
  br label %if.end734

if.end734:                                        ; preds = %if.then729, %if.end725
  %280 = load %struct.wiphy*, %struct.wiphy** %wiphy.addr, align 8
  %extended_capabilities_len = getelementptr inbounds %struct.wiphy, %struct.wiphy* %280, i32 0, i32 43
  %281 = load i8, i8* %extended_capabilities_len, align 8
  %conv735 = zext i8 %281 to i32
  %tobool736 = icmp ne i32 %conv735, 0
  br i1 %tobool736, label %land.lhs.true737, label %if.end822

land.lhs.true737:                                 ; preds = %if.end734
  %282 = load %struct.wiphy*, %struct.wiphy** %wiphy.addr, align 8
  %num_iftype_ext_capab = getelementptr inbounds %struct.wiphy, %struct.wiphy* %282, i32 0, i32 45
  %283 = load i32, i32* %num_iftype_ext_capab, align 8
  %tobool738 = icmp ne i32 %283, 0
  br i1 %tobool738, label %land.lhs.true739, label %if.end822

land.lhs.true739:                                 ; preds = %land.lhs.true737
  %284 = load %struct.wiphy*, %struct.wiphy** %wiphy.addr, align 8
  %iftype_ext_capab = getelementptr inbounds %struct.wiphy, %struct.wiphy* %284, i32 0, i32 44
  %285 = load %struct.wiphy_iftype_ext_capab*, %struct.wiphy_iftype_ext_capab** %iftype_ext_capab, align 32
  %tobool740 = icmp ne %struct.wiphy_iftype_ext_capab* %285, null
  br i1 %tobool740, label %if.then741, label %if.end822

if.then741:                                       ; preds = %land.lhs.true739
  %286 = load %struct.wiphy*, %struct.wiphy** %wiphy.addr, align 8
  %iftype_ext_capab742 = getelementptr inbounds %struct.wiphy, %struct.wiphy* %286, i32 0, i32 44
  %287 = load %struct.wiphy_iftype_ext_capab*, %struct.wiphy_iftype_ext_capab** %iftype_ext_capab742, align 32
  store %struct.wiphy_iftype_ext_capab* %287, %struct.wiphy_iftype_ext_capab** %capab, align 8
  store i8 0, i8* %j, align 1
  br label %for.cond743

for.cond743:                                      ; preds = %for.inc819, %if.then741
  %288 = load i8, i8* %j, align 1
  %conv744 = zext i8 %288 to i32
  %289 = load %struct.wiphy*, %struct.wiphy** %wiphy.addr, align 8
  %extended_capabilities_len745 = getelementptr inbounds %struct.wiphy, %struct.wiphy* %289, i32 0, i32 43
  %290 = load i8, i8* %extended_capabilities_len745, align 8
  %conv746 = zext i8 %290 to i32
  %cmp747 = icmp slt i32 %conv744, %conv746
  br i1 %cmp747, label %for.body749, label %for.end821.loopexit

for.body749:                                      ; preds = %for.cond743
  %291 = load %struct.wiphy_iftype_ext_capab*, %struct.wiphy_iftype_ext_capab** %capab, align 8
  %arrayidx750 = getelementptr inbounds %struct.wiphy_iftype_ext_capab, %struct.wiphy_iftype_ext_capab* %291, i64 0
  %extended_capabilities_len751 = getelementptr inbounds %struct.wiphy_iftype_ext_capab, %struct.wiphy_iftype_ext_capab* %arrayidx750, i32 0, i32 3
  %292 = load i8, i8* %extended_capabilities_len751, align 8
  %conv752 = zext i8 %292 to i32
  %293 = load i8, i8* %j, align 1
  %conv753 = zext i8 %293 to i32
  %cmp754 = icmp sgt i32 %conv752, %conv753
  br i1 %cmp754, label %if.then756, label %if.else760

if.then756:                                       ; preds = %for.body749
  %294 = load %struct.wiphy_iftype_ext_capab*, %struct.wiphy_iftype_ext_capab** %capab, align 8
  %arrayidx757 = getelementptr inbounds %struct.wiphy_iftype_ext_capab, %struct.wiphy_iftype_ext_capab* %294, i64 0
  %extended_capabilities = getelementptr inbounds %struct.wiphy_iftype_ext_capab, %struct.wiphy_iftype_ext_capab* %arrayidx757, i32 0, i32 1
  %295 = load i8*, i8** %extended_capabilities, align 8
  %296 = load i8, i8* %j, align 1
  %idxprom758 = zext i8 %296 to i64
  %arrayidx759 = getelementptr inbounds i8, i8* %295, i64 %idxprom758
  %297 = load i8, i8* %arrayidx759, align 1
  store i8 %297, i8* %supported_on_all, align 1
  br label %if.end761

if.else760:                                       ; preds = %for.body749
  store i8 0, i8* %supported_on_all, align 1
  br label %if.end761

if.end761:                                        ; preds = %if.else760, %if.then756
  store i32 1, i32* %i, align 4
  br label %for.cond762

for.cond762:                                      ; preds = %for.inc785, %if.end761
  %298 = load i32, i32* %i, align 4
  %299 = load %struct.wiphy*, %struct.wiphy** %wiphy.addr, align 8
  %num_iftype_ext_capab763 = getelementptr inbounds %struct.wiphy, %struct.wiphy* %299, i32 0, i32 45
  %300 = load i32, i32* %num_iftype_ext_capab763, align 8
  %cmp764 = icmp ult i32 %298, %300
  br i1 %cmp764, label %for.body766, label %for.end787.loopexit

for.body766:                                      ; preds = %for.cond762
  %301 = load i8, i8* %j, align 1
  %conv767 = zext i8 %301 to i32
  %302 = load %struct.wiphy_iftype_ext_capab*, %struct.wiphy_iftype_ext_capab** %capab, align 8
  %303 = load i32, i32* %i, align 4
  %idxprom768 = sext i32 %303 to i64
  %arrayidx769 = getelementptr inbounds %struct.wiphy_iftype_ext_capab, %struct.wiphy_iftype_ext_capab* %302, i64 %idxprom768
  %extended_capabilities_len770 = getelementptr inbounds %struct.wiphy_iftype_ext_capab, %struct.wiphy_iftype_ext_capab* %arrayidx769, i32 0, i32 3
  %304 = load i8, i8* %extended_capabilities_len770, align 8
  %conv771 = zext i8 %304 to i32
  %cmp772 = icmp sge i32 %conv767, %conv771
  br i1 %cmp772, label %if.then774, label %if.end775

if.then774:                                       ; preds = %for.body766
  store i8 0, i8* %supported_on_all, align 1
  br label %for.end787

if.end775:                                        ; preds = %for.body766
  %305 = load %struct.wiphy_iftype_ext_capab*, %struct.wiphy_iftype_ext_capab** %capab, align 8
  %306 = load i32, i32* %i, align 4
  %idxprom776 = sext i32 %306 to i64
  %arrayidx777 = getelementptr inbounds %struct.wiphy_iftype_ext_capab, %struct.wiphy_iftype_ext_capab* %305, i64 %idxprom776
  %extended_capabilities778 = getelementptr inbounds %struct.wiphy_iftype_ext_capab, %struct.wiphy_iftype_ext_capab* %arrayidx777, i32 0, i32 1
  %307 = load i8*, i8** %extended_capabilities778, align 8
  %308 = load i8, i8* %j, align 1
  %idxprom779 = zext i8 %308 to i64
  %arrayidx780 = getelementptr inbounds i8, i8* %307, i64 %idxprom779
  %309 = load i8, i8* %arrayidx780, align 1
  %conv781 = zext i8 %309 to i32
  %310 = load i8, i8* %supported_on_all, align 1
  %conv782 = zext i8 %310 to i32
  %and783 = and i32 %conv782, %conv781
  %conv784 = trunc i32 %and783 to i8
  store i8 %conv784, i8* %supported_on_all, align 1
  br label %for.inc785

for.inc785:                                       ; preds = %if.end775
  %311 = load i32, i32* %i, align 4
  %inc786 = add nsw i32 %311, 1
  store i32 %inc786, i32* %i, align 4
  br label %for.cond762

for.end787.loopexit:                              ; preds = %for.cond762
  br label %for.end787

for.end787:                                       ; preds = %for.end787.loopexit, %if.then774
  %312 = load %struct.wiphy*, %struct.wiphy** %wiphy.addr, align 8
  %extended_capabilities789 = getelementptr inbounds %struct.wiphy, %struct.wiphy* %312, i32 0, i32 41
  %313 = load i8*, i8** %extended_capabilities789, align 8
  %314 = load i8, i8* %j, align 1
  %idxprom790 = zext i8 %314 to i64
  %arrayidx791 = getelementptr inbounds i8, i8* %313, i64 %idxprom790
  %315 = load i8, i8* %arrayidx791, align 1
  %conv792 = zext i8 %315 to i32
  %316 = load i8, i8* %supported_on_all, align 1
  %conv793 = zext i8 %316 to i32
  %neg = xor i32 %conv793, -1
  %and794 = and i32 %conv792, %neg
  %tobool795 = icmp ne i32 %and794, 0
  %lnot796 = xor i1 %tobool795, true
  %lnot798 = xor i1 %lnot796, true
  %lnot.ext799 = zext i1 %lnot798 to i32
  store i32 %lnot.ext799, i32* %__ret_warn_on788, align 4
  %317 = load i32, i32* %__ret_warn_on788, align 4
  %tobool800 = icmp ne i32 %317, 0
  %lnot801 = xor i1 %tobool800, true
  %lnot803 = xor i1 %lnot801, true
  %lnot.ext804 = zext i1 %lnot803 to i32
  %conv805 = sext i32 %lnot.ext804 to i64
  %tobool806 = icmp ne i64 %conv805, 0
  br i1 %tobool806, label %if.then807, label %if.end808

if.then807:                                       ; preds = %for.end787
  call void @warn_slowpath_null(i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.1, i32 0, i32 0), i32 833)
  br label %if.end808

if.end808:                                        ; preds = %if.then807, %for.end787
  %318 = load i32, i32* %__ret_warn_on788, align 4
  %tobool810 = icmp ne i32 %318, 0
  %lnot811 = xor i1 %tobool810, true
  %lnot813 = xor i1 %lnot811, true
  %lnot.ext814 = zext i1 %lnot813 to i32
  %conv815 = sext i32 %lnot.ext814 to i64
  store i64 %conv815, i64* %tmp809, align 8
  %319 = load i64, i64* %tmp809, align 8
  %tobool816 = icmp ne i64 %319, 0
  br i1 %tobool816, label %if.then817, label %if.end818

if.then817:                                       ; preds = %if.end808
  br label %for.end821

if.end818:                                        ; preds = %if.end808
  br label %for.inc819

for.inc819:                                       ; preds = %if.end818
  %320 = load i8, i8* %j, align 1
  %inc820 = add i8 %320, 1
  store i8 %inc820, i8* %j, align 1
  br label %for.cond743

for.end821.loopexit:                              ; preds = %for.cond743
  br label %for.end821

for.end821:                                       ; preds = %for.end821.loopexit, %if.then817
  br label %if.end822

if.end822:                                        ; preds = %for.end821, %land.lhs.true739, %land.lhs.true737, %if.end734
  %321 = load %struct.cfg80211_registered_device*, %struct.cfg80211_registered_device** %rdev, align 8
  %wiphy823 = getelementptr inbounds %struct.cfg80211_registered_device, %struct.cfg80211_registered_device* %321, i32 0, i32 42
  %registered = getelementptr inbounds %struct.wiphy, %struct.wiphy* %wiphy823, i32 0, i32 51
  store i8 1, i8* %registered, align 8
  call void @rtnl_unlock()
  %322 = load %struct.cfg80211_registered_device*, %struct.cfg80211_registered_device** %rdev, align 8
  %rfkill = getelementptr inbounds %struct.cfg80211_registered_device, %struct.cfg80211_registered_device* %322, i32 0, i32 3
  %323 = load %struct.rfkill*, %struct.rfkill** %rfkill, align 16
  %call824 = call i32 @rfkill_register(%struct.rfkill* %323)
  store i32 %call824, i32* %res, align 4
  %324 = load i32, i32* %res, align 4
  %tobool825 = icmp ne i32 %324, 0
  br i1 %tobool825, label %if.then826, label %if.end830

if.then826:                                       ; preds = %if.end822
  %325 = load %struct.cfg80211_registered_device*, %struct.cfg80211_registered_device** %rdev, align 8
  %rfkill827 = getelementptr inbounds %struct.cfg80211_registered_device, %struct.cfg80211_registered_device* %325, i32 0, i32 3
  %326 = load %struct.rfkill*, %struct.rfkill** %rfkill827, align 16
  call void @rfkill_destroy(%struct.rfkill* %326)
  %327 = load %struct.cfg80211_registered_device*, %struct.cfg80211_registered_device** %rdev, align 8
  %rfkill828 = getelementptr inbounds %struct.cfg80211_registered_device, %struct.cfg80211_registered_device* %327, i32 0, i32 3
  store %struct.rfkill* null, %struct.rfkill** %rfkill828, align 16
  %328 = load %struct.cfg80211_registered_device*, %struct.cfg80211_registered_device** %rdev, align 8
  %wiphy829 = getelementptr inbounds %struct.cfg80211_registered_device, %struct.cfg80211_registered_device* %328, i32 0, i32 42
  call void @wiphy_unregister(%struct.wiphy* %wiphy829)
  %329 = load i32, i32* %res, align 4
  store i32 %329, i32* %retval, align 4
  br label %return

if.end830:                                        ; preds = %if.end822
  store i32 0, i32* %retval, align 4
  br label %return

return:                                           ; preds = %if.end830, %if.then826, %if.then712, %if.then704, %if.end649, %if.then609, %if.then563, %if.then532, %if.then498, %if.then415, %if.then384, %if.then347, %if.then311, %if.then281, %if.then249, %if.then207, %if.then169, %if.then141, %if.then94, %if.then61, %if.then22
  %330 = load i32, i32* %retval, align 4
  ret i32 %330
}

; Function Attrs: noinline nounwind optnone uwtable
define internal zeroext i1 @is_zero_ether_addr(i8* %addr) #0 {
entry:
  %addr.addr = alloca i8*, align 8
  store i8* %addr, i8** %addr.addr, align 8
  %0 = load i8*, i8** %addr.addr, align 8
  %1 = bitcast i8* %0 to i32*
  %2 = load i32, i32* %1, align 4
  %3 = load i8*, i8** %addr.addr, align 8
  %add.ptr = getelementptr inbounds i8, i8* %3, i64 4
  %4 = bitcast i8* %add.ptr to i16*
  %5 = load i16, i16* %4, align 2
  %conv = zext i16 %5 to i32
  %or = or i32 %2, %conv
  %cmp = icmp eq i32 %or, 0
  ret i1 %cmp
}

declare i32 @memcmp(i8*, i8*, i64) #1

declare i8* @__memcpy(i8*, i8*, i64) #1

; Function Attrs: noinline nounwind optnone uwtable
define internal i32 @wiphy_verify_combinations(%struct.wiphy* %wiphy) #0 {
entry:
  %retval = alloca i32, align 4
  %wiphy.addr = alloca %struct.wiphy*, align 8
  %c = alloca %struct.ieee80211_iface_combination*, align 8
  %i = alloca i32, align 4
  %j = alloca i32, align 4
  %cnt = alloca i32, align 4
  %all_iftypes = alloca i16, align 2
  %__ret_warn_on = alloca i32, align 4
  %tmp = alloca i64, align 8
  %__ret_warn_on21 = alloca i32, align 4
  %tmp38 = alloca i64, align 8
  %__ret_warn_on48 = alloca i32, align 4
  %tmp65 = alloca i64, align 8
  %__ret_warn_on75 = alloca i32, align 4
  %tmp97 = alloca i64, align 8
  %__ret_warn_on107 = alloca i32, align 4
  %tmp124 = alloca i64, align 8
  %types = alloca i16, align 2
  %__ret_warn_on143 = alloca i32, align 4
  %tmp160 = alloca i64, align 8
  %__ret_warn_on173 = alloca i32, align 4
  %tmp193 = alloca i64, align 8
  %__ret_warn_on203 = alloca i32, align 4
  %tmp221 = alloca i64, align 8
  %__ret_warn_on231 = alloca i32, align 4
  %tmp257 = alloca i64, align 8
  %__ret_warn_on267 = alloca i32, align 4
  %tmp293 = alloca i64, align 8
  %__ret_warn_on303 = alloca i32, align 4
  %tmp323 = alloca i64, align 8
  %__ret_warn_on338 = alloca i32, align 4
  %tmp358 = alloca i64, align 8
  %__ret_warn_on368 = alloca i32, align 4
  %tmp385 = alloca i64, align 8
  %__ret_warn_on395 = alloca i32, align 4
  %tmp413 = alloca i64, align 8
  store %struct.wiphy* %wiphy, %struct.wiphy** %wiphy.addr, align 8
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc423, %entry
  %0 = load i32, i32* %i, align 4
  %1 = load %struct.wiphy*, %struct.wiphy** %wiphy.addr, align 8
  %n_iface_combinations = getelementptr inbounds %struct.wiphy, %struct.wiphy* %1, i32 0, i32 5
  %2 = load i32, i32* %n_iface_combinations, align 8
  %cmp = icmp slt i32 %0, %2
  br i1 %cmp, label %for.body, label %for.end425

for.body:                                         ; preds = %for.cond
  store i32 0, i32* %cnt, align 4
  store i16 0, i16* %all_iftypes, align 2
  %3 = load %struct.wiphy*, %struct.wiphy** %wiphy.addr, align 8
  %iface_combinations = getelementptr inbounds %struct.wiphy, %struct.wiphy* %3, i32 0, i32 4
  %4 = load %struct.ieee80211_iface_combination*, %struct.ieee80211_iface_combination** %iface_combinations, align 32
  %5 = load i32, i32* %i, align 4
  %idxprom = sext i32 %5 to i64
  %arrayidx = getelementptr inbounds %struct.ieee80211_iface_combination, %struct.ieee80211_iface_combination* %4, i64 %idxprom
  store %struct.ieee80211_iface_combination* %arrayidx, %struct.ieee80211_iface_combination** %c, align 8
  %6 = load %struct.ieee80211_iface_combination*, %struct.ieee80211_iface_combination** %c, align 8
  %max_interfaces = getelementptr inbounds %struct.ieee80211_iface_combination, %struct.ieee80211_iface_combination* %6, i32 0, i32 2
  %7 = load i16, i16* %max_interfaces, align 4
  %conv = zext i16 %7 to i32
  %cmp1 = icmp slt i32 %conv, 2
  br i1 %cmp1, label %land.rhs, label %land.end

land.rhs:                                         ; preds = %for.body
  %8 = load %struct.ieee80211_iface_combination*, %struct.ieee80211_iface_combination** %c, align 8
  %radar_detect_widths = getelementptr inbounds %struct.ieee80211_iface_combination, %struct.ieee80211_iface_combination* %8, i32 0, i32 5
  %9 = load i8, i8* %radar_detect_widths, align 8
  %tobool = icmp ne i8 %9, 0
  %lnot = xor i1 %tobool, true
  br label %land.end

land.end:                                         ; preds = %land.rhs, %for.body
  %10 = phi i1 [ false, %for.body ], [ %lnot, %land.rhs ]
  %lnot3 = xor i1 %10, true
  %lnot4 = xor i1 %lnot3, true
  %lnot.ext = zext i1 %lnot4 to i32
  store i32 %lnot.ext, i32* %__ret_warn_on, align 4
  %11 = load i32, i32* %__ret_warn_on, align 4
  %tobool5 = icmp ne i32 %11, 0
  %lnot6 = xor i1 %tobool5, true
  %lnot8 = xor i1 %lnot6, true
  %lnot.ext9 = zext i1 %lnot8 to i32
  %conv10 = sext i32 %lnot.ext9 to i64
  %tobool11 = icmp ne i64 %conv10, 0
  br i1 %tobool11, label %if.then, label %if.end

if.then:                                          ; preds = %land.end
  call void @warn_slowpath_null(i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.1, i32 0, i32 0), i32 517)
  br label %if.end

if.end:                                           ; preds = %if.then, %land.end
  %12 = load i32, i32* %__ret_warn_on, align 4
  %tobool12 = icmp ne i32 %12, 0
  %lnot13 = xor i1 %tobool12, true
  %lnot15 = xor i1 %lnot13, true
  %lnot.ext16 = zext i1 %lnot15 to i32
  %conv17 = sext i32 %lnot.ext16 to i64
  store i64 %conv17, i64* %tmp, align 8
  %13 = load i64, i64* %tmp, align 8
  %tobool18 = icmp ne i64 %13, 0
  br i1 %tobool18, label %if.then19, label %if.end20

if.then19:                                        ; preds = %if.end
  store i32 -22, i32* %retval, align 4
  br label %return

if.end20:                                         ; preds = %if.end
  %14 = load %struct.ieee80211_iface_combination*, %struct.ieee80211_iface_combination** %c, align 8
  %num_different_channels = getelementptr inbounds %struct.ieee80211_iface_combination, %struct.ieee80211_iface_combination* %14, i32 0, i32 1
  %15 = load i32, i32* %num_different_channels, align 8
  %tobool22 = icmp ne i32 %15, 0
  %lnot23 = xor i1 %tobool22, true
  %lnot25 = xor i1 %lnot23, true
  %lnot27 = xor i1 %lnot25, true
  %lnot.ext28 = zext i1 %lnot27 to i32
  store i32 %lnot.ext28, i32* %__ret_warn_on21, align 4
  %16 = load i32, i32* %__ret_warn_on21, align 4
  %tobool29 = icmp ne i32 %16, 0
  %lnot30 = xor i1 %tobool29, true
  %lnot32 = xor i1 %lnot30, true
  %lnot.ext33 = zext i1 %lnot32 to i32
  %conv34 = sext i32 %lnot.ext33 to i64
  %tobool35 = icmp ne i64 %conv34, 0
  br i1 %tobool35, label %if.then36, label %if.end37

if.then36:                                        ; preds = %if.end20
  call void @warn_slowpath_null(i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.1, i32 0, i32 0), i32 521)
  br label %if.end37

if.end37:                                         ; preds = %if.then36, %if.end20
  %17 = load i32, i32* %__ret_warn_on21, align 4
  %tobool39 = icmp ne i32 %17, 0
  %lnot40 = xor i1 %tobool39, true
  %lnot42 = xor i1 %lnot40, true
  %lnot.ext43 = zext i1 %lnot42 to i32
  %conv44 = sext i32 %lnot.ext43 to i64
  store i64 %conv44, i64* %tmp38, align 8
  %18 = load i64, i64* %tmp38, align 8
  %tobool45 = icmp ne i64 %18, 0
  br i1 %tobool45, label %if.then46, label %if.end47

if.then46:                                        ; preds = %if.end37
  store i32 -22, i32* %retval, align 4
  br label %return

if.end47:                                         ; preds = %if.end37
  %19 = load %struct.ieee80211_iface_combination*, %struct.ieee80211_iface_combination** %c, align 8
  %num_different_channels49 = getelementptr inbounds %struct.ieee80211_iface_combination, %struct.ieee80211_iface_combination* %19, i32 0, i32 1
  %20 = load i32, i32* %num_different_channels49, align 8
  %cmp50 = icmp ugt i32 %20, 10
  %lnot52 = xor i1 %cmp50, true
  %lnot54 = xor i1 %lnot52, true
  %lnot.ext55 = zext i1 %lnot54 to i32
  store i32 %lnot.ext55, i32* %__ret_warn_on48, align 4
  %21 = load i32, i32* %__ret_warn_on48, align 4
  %tobool56 = icmp ne i32 %21, 0
  %lnot57 = xor i1 %tobool56, true
  %lnot59 = xor i1 %lnot57, true
  %lnot.ext60 = zext i1 %lnot59 to i32
  %conv61 = sext i32 %lnot.ext60 to i64
  %tobool62 = icmp ne i64 %conv61, 0
  br i1 %tobool62, label %if.then63, label %if.end64

if.then63:                                        ; preds = %if.end47
  call void @warn_slowpath_null(i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.1, i32 0, i32 0), i32 529)
  br label %if.end64

if.end64:                                         ; preds = %if.then63, %if.end47
  %22 = load i32, i32* %__ret_warn_on48, align 4
  %tobool66 = icmp ne i32 %22, 0
  %lnot67 = xor i1 %tobool66, true
  %lnot69 = xor i1 %lnot67, true
  %lnot.ext70 = zext i1 %lnot69 to i32
  %conv71 = sext i32 %lnot.ext70 to i64
  store i64 %conv71, i64* %tmp65, align 8
  %23 = load i64, i64* %tmp65, align 8
  %tobool72 = icmp ne i64 %23, 0
  br i1 %tobool72, label %if.then73, label %if.end74

if.then73:                                        ; preds = %if.end64
  store i32 -22, i32* %retval, align 4
  br label %return

if.end74:                                         ; preds = %if.end64
  %24 = load %struct.ieee80211_iface_combination*, %struct.ieee80211_iface_combination** %c, align 8
  %radar_detect_widths76 = getelementptr inbounds %struct.ieee80211_iface_combination, %struct.ieee80211_iface_combination* %24, i32 0, i32 5
  %25 = load i8, i8* %radar_detect_widths76, align 8
  %conv77 = zext i8 %25 to i32
  %tobool78 = icmp ne i32 %conv77, 0
  br i1 %tobool78, label %land.rhs79, label %land.end83

land.rhs79:                                       ; preds = %if.end74
  %26 = load %struct.ieee80211_iface_combination*, %struct.ieee80211_iface_combination** %c, align 8
  %num_different_channels80 = getelementptr inbounds %struct.ieee80211_iface_combination, %struct.ieee80211_iface_combination* %26, i32 0, i32 1
  %27 = load i32, i32* %num_different_channels80, align 8
  %cmp81 = icmp ugt i32 %27, 1
  br label %land.end83

land.end83:                                       ; preds = %land.rhs79, %if.end74
  %28 = phi i1 [ false, %if.end74 ], [ %cmp81, %land.rhs79 ]
  %lnot84 = xor i1 %28, true
  %lnot86 = xor i1 %lnot84, true
  %lnot.ext87 = zext i1 %lnot86 to i32
  store i32 %lnot.ext87, i32* %__ret_warn_on75, align 4
  %29 = load i32, i32* %__ret_warn_on75, align 4
  %tobool88 = icmp ne i32 %29, 0
  %lnot89 = xor i1 %tobool88, true
  %lnot91 = xor i1 %lnot89, true
  %lnot.ext92 = zext i1 %lnot91 to i32
  %conv93 = sext i32 %lnot.ext92 to i64
  %tobool94 = icmp ne i64 %conv93, 0
  br i1 %tobool94, label %if.then95, label %if.end96

if.then95:                                        ; preds = %land.end83
  call void @warn_slowpath_null(i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.1, i32 0, i32 0), i32 534)
  br label %if.end96

if.end96:                                         ; preds = %if.then95, %land.end83
  %30 = load i32, i32* %__ret_warn_on75, align 4
  %tobool98 = icmp ne i32 %30, 0
  %lnot99 = xor i1 %tobool98, true
  %lnot101 = xor i1 %lnot99, true
  %lnot.ext102 = zext i1 %lnot101 to i32
  %conv103 = sext i32 %lnot.ext102 to i64
  store i64 %conv103, i64* %tmp97, align 8
  %31 = load i64, i64* %tmp97, align 8
  %tobool104 = icmp ne i64 %31, 0
  br i1 %tobool104, label %if.then105, label %if.end106

if.then105:                                       ; preds = %if.end96
  store i32 -22, i32* %retval, align 4
  br label %return

if.end106:                                        ; preds = %if.end96
  %32 = load %struct.ieee80211_iface_combination*, %struct.ieee80211_iface_combination** %c, align 8
  %n_limits = getelementptr inbounds %struct.ieee80211_iface_combination, %struct.ieee80211_iface_combination* %32, i32 0, i32 3
  %33 = load i8, i8* %n_limits, align 2
  %tobool108 = icmp ne i8 %33, 0
  %lnot109 = xor i1 %tobool108, true
  %lnot111 = xor i1 %lnot109, true
  %lnot113 = xor i1 %lnot111, true
  %lnot.ext114 = zext i1 %lnot113 to i32
  store i32 %lnot.ext114, i32* %__ret_warn_on107, align 4
  %34 = load i32, i32* %__ret_warn_on107, align 4
  %tobool115 = icmp ne i32 %34, 0
  %lnot116 = xor i1 %tobool115, true
  %lnot118 = xor i1 %lnot116, true
  %lnot.ext119 = zext i1 %lnot118 to i32
  %conv120 = sext i32 %lnot.ext119 to i64
  %tobool121 = icmp ne i64 %conv120, 0
  br i1 %tobool121, label %if.then122, label %if.end123

if.then122:                                       ; preds = %if.end106
  call void @warn_slowpath_null(i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.1, i32 0, i32 0), i32 537)
  br label %if.end123

if.end123:                                        ; preds = %if.then122, %if.end106
  %35 = load i32, i32* %__ret_warn_on107, align 4
  %tobool125 = icmp ne i32 %35, 0
  %lnot126 = xor i1 %tobool125, true
  %lnot128 = xor i1 %lnot126, true
  %lnot.ext129 = zext i1 %lnot128 to i32
  %conv130 = sext i32 %lnot.ext129 to i64
  store i64 %conv130, i64* %tmp124, align 8
  %36 = load i64, i64* %tmp124, align 8
  %tobool131 = icmp ne i64 %36, 0
  br i1 %tobool131, label %if.then132, label %if.end133

if.then132:                                       ; preds = %if.end123
  store i32 -22, i32* %retval, align 4
  br label %return

if.end133:                                        ; preds = %if.end123
  store i32 0, i32* %j, align 4
  br label %for.cond134

for.cond134:                                      ; preds = %for.inc, %if.end133
  %37 = load i32, i32* %j, align 4
  %38 = load %struct.ieee80211_iface_combination*, %struct.ieee80211_iface_combination** %c, align 8
  %n_limits135 = getelementptr inbounds %struct.ieee80211_iface_combination, %struct.ieee80211_iface_combination* %38, i32 0, i32 3
  %39 = load i8, i8* %n_limits135, align 2
  %conv136 = zext i8 %39 to i32
  %cmp137 = icmp slt i32 %37, %conv136
  br i1 %cmp137, label %for.body139, label %for.end

for.body139:                                      ; preds = %for.cond134
  %40 = load %struct.ieee80211_iface_combination*, %struct.ieee80211_iface_combination** %c, align 8
  %limits = getelementptr inbounds %struct.ieee80211_iface_combination, %struct.ieee80211_iface_combination* %40, i32 0, i32 0
  %41 = load %struct.ieee80211_iface_limit*, %struct.ieee80211_iface_limit** %limits, align 8
  %42 = load i32, i32* %j, align 4
  %idxprom140 = sext i32 %42 to i64
  %arrayidx141 = getelementptr inbounds %struct.ieee80211_iface_limit, %struct.ieee80211_iface_limit* %41, i64 %idxprom140
  %types142 = getelementptr inbounds %struct.ieee80211_iface_limit, %struct.ieee80211_iface_limit* %arrayidx141, i32 0, i32 1
  %43 = load i16, i16* %types142, align 2
  store i16 %43, i16* %types, align 2
  %44 = load i16, i16* %types, align 2
  %conv144 = zext i16 %44 to i32
  %45 = load i16, i16* %all_iftypes, align 2
  %conv145 = zext i16 %45 to i32
  %and = and i32 %conv144, %conv145
  %tobool146 = icmp ne i32 %and, 0
  %lnot147 = xor i1 %tobool146, true
  %lnot149 = xor i1 %lnot147, true
  %lnot.ext150 = zext i1 %lnot149 to i32
  store i32 %lnot.ext150, i32* %__ret_warn_on143, align 4
  %46 = load i32, i32* %__ret_warn_on143, align 4
  %tobool151 = icmp ne i32 %46, 0
  %lnot152 = xor i1 %tobool151, true
  %lnot154 = xor i1 %lnot152, true
  %lnot.ext155 = zext i1 %lnot154 to i32
  %conv156 = sext i32 %lnot.ext155 to i64
  %tobool157 = icmp ne i64 %conv156, 0
  br i1 %tobool157, label %if.then158, label %if.end159

if.then158:                                       ; preds = %for.body139
  call void @warn_slowpath_null(i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.1, i32 0, i32 0), i32 544)
  br label %if.end159

if.end159:                                        ; preds = %if.then158, %for.body139
  %47 = load i32, i32* %__ret_warn_on143, align 4
  %tobool161 = icmp ne i32 %47, 0
  %lnot162 = xor i1 %tobool161, true
  %lnot164 = xor i1 %lnot162, true
  %lnot.ext165 = zext i1 %lnot164 to i32
  %conv166 = sext i32 %lnot.ext165 to i64
  store i64 %conv166, i64* %tmp160, align 8
  %48 = load i64, i64* %tmp160, align 8
  %tobool167 = icmp ne i64 %48, 0
  br i1 %tobool167, label %if.then168, label %if.end169

if.then168:                                       ; preds = %if.end159
  store i32 -22, i32* %retval, align 4
  br label %return

if.end169:                                        ; preds = %if.end159
  %49 = load i16, i16* %types, align 2
  %conv170 = zext i16 %49 to i32
  %50 = load i16, i16* %all_iftypes, align 2
  %conv171 = zext i16 %50 to i32
  %or = or i32 %conv171, %conv170
  %conv172 = trunc i32 %or to i16
  store i16 %conv172, i16* %all_iftypes, align 2
  %51 = load %struct.ieee80211_iface_combination*, %struct.ieee80211_iface_combination** %c, align 8
  %limits174 = getelementptr inbounds %struct.ieee80211_iface_combination, %struct.ieee80211_iface_combination* %51, i32 0, i32 0
  %52 = load %struct.ieee80211_iface_limit*, %struct.ieee80211_iface_limit** %limits174, align 8
  %53 = load i32, i32* %j, align 4
  %idxprom175 = sext i32 %53 to i64
  %arrayidx176 = getelementptr inbounds %struct.ieee80211_iface_limit, %struct.ieee80211_iface_limit* %52, i64 %idxprom175
  %max = getelementptr inbounds %struct.ieee80211_iface_limit, %struct.ieee80211_iface_limit* %arrayidx176, i32 0, i32 0
  %54 = load i16, i16* %max, align 2
  %tobool177 = icmp ne i16 %54, 0
  %lnot178 = xor i1 %tobool177, true
  %lnot180 = xor i1 %lnot178, true
  %lnot182 = xor i1 %lnot180, true
  %lnot.ext183 = zext i1 %lnot182 to i32
  store i32 %lnot.ext183, i32* %__ret_warn_on173, align 4
  %55 = load i32, i32* %__ret_warn_on173, align 4
  %tobool184 = icmp ne i32 %55, 0
  %lnot185 = xor i1 %tobool184, true
  %lnot187 = xor i1 %lnot185, true
  %lnot.ext188 = zext i1 %lnot187 to i32
  %conv189 = sext i32 %lnot.ext188 to i64
  %tobool190 = icmp ne i64 %conv189, 0
  br i1 %tobool190, label %if.then191, label %if.end192

if.then191:                                       ; preds = %if.end169
  call void @warn_slowpath_null(i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.1, i32 0, i32 0), i32 548)
  br label %if.end192

if.end192:                                        ; preds = %if.then191, %if.end169
  %56 = load i32, i32* %__ret_warn_on173, align 4
  %tobool194 = icmp ne i32 %56, 0
  %lnot195 = xor i1 %tobool194, true
  %lnot197 = xor i1 %lnot195, true
  %lnot.ext198 = zext i1 %lnot197 to i32
  %conv199 = sext i32 %lnot.ext198 to i64
  store i64 %conv199, i64* %tmp193, align 8
  %57 = load i64, i64* %tmp193, align 8
  %tobool200 = icmp ne i64 %57, 0
  br i1 %tobool200, label %if.then201, label %if.end202

if.then201:                                       ; preds = %if.end192
  store i32 -22, i32* %retval, align 4
  br label %return

if.end202:                                        ; preds = %if.end192
  %58 = load %struct.wiphy*, %struct.wiphy** %wiphy.addr, align 8
  %software_iftypes = getelementptr inbounds %struct.wiphy, %struct.wiphy* %58, i32 0, i32 6
  %59 = load i16, i16* %software_iftypes, align 4
  %conv204 = zext i16 %59 to i32
  %60 = load i16, i16* %types, align 2
  %conv205 = zext i16 %60 to i32
  %and206 = and i32 %conv204, %conv205
  %tobool207 = icmp ne i32 %and206, 0
  %lnot208 = xor i1 %tobool207, true
  %lnot210 = xor i1 %lnot208, true
  %lnot.ext211 = zext i1 %lnot210 to i32
  store i32 %lnot.ext211, i32* %__ret_warn_on203, align 4
  %61 = load i32, i32* %__ret_warn_on203, align 4
  %tobool212 = icmp ne i32 %61, 0
  %lnot213 = xor i1 %tobool212, true
  %lnot215 = xor i1 %lnot213, true
  %lnot.ext216 = zext i1 %lnot215 to i32
  %conv217 = sext i32 %lnot.ext216 to i64
  %tobool218 = icmp ne i64 %conv217, 0
  br i1 %tobool218, label %if.then219, label %if.end220

if.then219:                                       ; preds = %if.end202
  call void @warn_slowpath_null(i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.1, i32 0, i32 0), i32 552)
  br label %if.end220

if.end220:                                        ; preds = %if.then219, %if.end202
  %62 = load i32, i32* %__ret_warn_on203, align 4
  %tobool222 = icmp ne i32 %62, 0
  %lnot223 = xor i1 %tobool222, true
  %lnot225 = xor i1 %lnot223, true
  %lnot.ext226 = zext i1 %lnot225 to i32
  %conv227 = sext i32 %lnot.ext226 to i64
  store i64 %conv227, i64* %tmp221, align 8
  %63 = load i64, i64* %tmp221, align 8
  %tobool228 = icmp ne i64 %63, 0
  br i1 %tobool228, label %if.then229, label %if.end230

if.then229:                                       ; preds = %if.end220
  store i32 -22, i32* %retval, align 4
  br label %return

if.end230:                                        ; preds = %if.end220
  %64 = load i16, i16* %types, align 2
  %conv232 = zext i16 %64 to i64
  %and233 = and i64 %conv232, 1024
  %tobool234 = icmp ne i64 %and233, 0
  br i1 %tobool234, label %land.rhs235, label %land.end243

land.rhs235:                                      ; preds = %if.end230
  %65 = load %struct.ieee80211_iface_combination*, %struct.ieee80211_iface_combination** %c, align 8
  %limits236 = getelementptr inbounds %struct.ieee80211_iface_combination, %struct.ieee80211_iface_combination* %65, i32 0, i32 0
  %66 = load %struct.ieee80211_iface_limit*, %struct.ieee80211_iface_limit** %limits236, align 8
  %67 = load i32, i32* %j, align 4
  %idxprom237 = sext i32 %67 to i64
  %arrayidx238 = getelementptr inbounds %struct.ieee80211_iface_limit, %struct.ieee80211_iface_limit* %66, i64 %idxprom237
  %max239 = getelementptr inbounds %struct.ieee80211_iface_limit, %struct.ieee80211_iface_limit* %arrayidx238, i32 0, i32 0
  %68 = load i16, i16* %max239, align 2
  %conv240 = zext i16 %68 to i32
  %cmp241 = icmp sgt i32 %conv240, 1
  br label %land.end243

land.end243:                                      ; preds = %land.rhs235, %if.end230
  %69 = phi i1 [ false, %if.end230 ], [ %cmp241, %land.rhs235 ]
  %lnot244 = xor i1 %69, true
  %lnot246 = xor i1 %lnot244, true
  %lnot.ext247 = zext i1 %lnot246 to i32
  store i32 %lnot.ext247, i32* %__ret_warn_on231, align 4
  %70 = load i32, i32* %__ret_warn_on231, align 4
  %tobool248 = icmp ne i32 %70, 0
  %lnot249 = xor i1 %tobool248, true
  %lnot251 = xor i1 %lnot249, true
  %lnot.ext252 = zext i1 %lnot251 to i32
  %conv253 = sext i32 %lnot.ext252 to i64
  %tobool254 = icmp ne i64 %conv253, 0
  br i1 %tobool254, label %if.then255, label %if.end256

if.then255:                                       ; preds = %land.end243
  call void @warn_slowpath_null(i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.1, i32 0, i32 0), i32 557)
  br label %if.end256

if.end256:                                        ; preds = %if.then255, %land.end243
  %71 = load i32, i32* %__ret_warn_on231, align 4
  %tobool258 = icmp ne i32 %71, 0
  %lnot259 = xor i1 %tobool258, true
  %lnot261 = xor i1 %lnot259, true
  %lnot.ext262 = zext i1 %lnot261 to i32
  %conv263 = sext i32 %lnot.ext262 to i64
  store i64 %conv263, i64* %tmp257, align 8
  %72 = load i64, i64* %tmp257, align 8
  %tobool264 = icmp ne i64 %72, 0
  br i1 %tobool264, label %if.then265, label %if.end266

if.then265:                                       ; preds = %if.end256
  store i32 -22, i32* %retval, align 4
  br label %return

if.end266:                                        ; preds = %if.end256
  %73 = load i16, i16* %types, align 2
  %conv268 = zext i16 %73 to i64
  %and269 = and i64 %conv268, 4096
  %tobool270 = icmp ne i64 %and269, 0
  br i1 %tobool270, label %land.rhs271, label %land.end279

land.rhs271:                                      ; preds = %if.end266
  %74 = load %struct.ieee80211_iface_combination*, %struct.ieee80211_iface_combination** %c, align 8
  %limits272 = getelementptr inbounds %struct.ieee80211_iface_combination, %struct.ieee80211_iface_combination* %74, i32 0, i32 0
  %75 = load %struct.ieee80211_iface_limit*, %struct.ieee80211_iface_limit** %limits272, align 8
  %76 = load i32, i32* %j, align 4
  %idxprom273 = sext i32 %76 to i64
  %arrayidx274 = getelementptr inbounds %struct.ieee80211_iface_limit, %struct.ieee80211_iface_limit* %75, i64 %idxprom273
  %max275 = getelementptr inbounds %struct.ieee80211_iface_limit, %struct.ieee80211_iface_limit* %arrayidx274, i32 0, i32 0
  %77 = load i16, i16* %max275, align 2
  %conv276 = zext i16 %77 to i32
  %cmp277 = icmp sgt i32 %conv276, 1
  br label %land.end279

land.end279:                                      ; preds = %land.rhs271, %if.end266
  %78 = phi i1 [ false, %if.end266 ], [ %cmp277, %land.rhs271 ]
  %lnot280 = xor i1 %78, true
  %lnot282 = xor i1 %lnot280, true
  %lnot.ext283 = zext i1 %lnot282 to i32
  store i32 %lnot.ext283, i32* %__ret_warn_on267, align 4
  %79 = load i32, i32* %__ret_warn_on267, align 4
  %tobool284 = icmp ne i32 %79, 0
  %lnot285 = xor i1 %tobool284, true
  %lnot287 = xor i1 %lnot285, true
  %lnot.ext288 = zext i1 %lnot287 to i32
  %conv289 = sext i32 %lnot.ext288 to i64
  %tobool290 = icmp ne i64 %conv289, 0
  br i1 %tobool290, label %if.then291, label %if.end292

if.then291:                                       ; preds = %land.end279
  call void @warn_slowpath_null(i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.1, i32 0, i32 0), i32 562)
  br label %if.end292

if.end292:                                        ; preds = %if.then291, %land.end279
  %80 = load i32, i32* %__ret_warn_on267, align 4
  %tobool294 = icmp ne i32 %80, 0
  %lnot295 = xor i1 %tobool294, true
  %lnot297 = xor i1 %lnot295, true
  %lnot.ext298 = zext i1 %lnot297 to i32
  %conv299 = sext i32 %lnot.ext298 to i64
  store i64 %conv299, i64* %tmp293, align 8
  %81 = load i64, i64* %tmp293, align 8
  %tobool300 = icmp ne i64 %81, 0
  br i1 %tobool300, label %if.then301, label %if.end302

if.then301:                                       ; preds = %if.end292
  store i32 -22, i32* %retval, align 4
  br label %return

if.end302:                                        ; preds = %if.end292
  %82 = load i16, i16* %types, align 2
  %conv304 = zext i16 %82 to i64
  %and305 = and i64 %conv304, 2
  %tobool306 = icmp ne i64 %and305, 0
  br i1 %tobool306, label %land.rhs307, label %land.end309

land.rhs307:                                      ; preds = %if.end302
  %83 = load %struct.ieee80211_iface_combination*, %struct.ieee80211_iface_combination** %c, align 8
  %beacon_int_min_gcd = getelementptr inbounds %struct.ieee80211_iface_combination, %struct.ieee80211_iface_combination* %83, i32 0, i32 7
  %84 = load i32, i32* %beacon_int_min_gcd, align 4
  %tobool308 = icmp ne i32 %84, 0
  br label %land.end309

land.end309:                                      ; preds = %land.rhs307, %if.end302
  %85 = phi i1 [ false, %if.end302 ], [ %tobool308, %land.rhs307 ]
  %lnot310 = xor i1 %85, true
  %lnot312 = xor i1 %lnot310, true
  %lnot.ext313 = zext i1 %lnot312 to i32
  store i32 %lnot.ext313, i32* %__ret_warn_on303, align 4
  %86 = load i32, i32* %__ret_warn_on303, align 4
  %tobool314 = icmp ne i32 %86, 0
  %lnot315 = xor i1 %tobool314, true
  %lnot317 = xor i1 %lnot315, true
  %lnot.ext318 = zext i1 %lnot317 to i32
  %conv319 = sext i32 %lnot.ext318 to i64
  %tobool320 = icmp ne i64 %conv319, 0
  br i1 %tobool320, label %if.then321, label %if.end322

if.then321:                                       ; preds = %land.end309
  call void @warn_slowpath_null(i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.1, i32 0, i32 0), i32 576)
  br label %if.end322

if.end322:                                        ; preds = %if.then321, %land.end309
  %87 = load i32, i32* %__ret_warn_on303, align 4
  %tobool324 = icmp ne i32 %87, 0
  %lnot325 = xor i1 %tobool324, true
  %lnot327 = xor i1 %lnot325, true
  %lnot.ext328 = zext i1 %lnot327 to i32
  %conv329 = sext i32 %lnot.ext328 to i64
  store i64 %conv329, i64* %tmp323, align 8
  %88 = load i64, i64* %tmp323, align 8
  %tobool330 = icmp ne i64 %88, 0
  br i1 %tobool330, label %if.then331, label %if.end332

if.then331:                                       ; preds = %if.end322
  store i32 -22, i32* %retval, align 4
  br label %return

if.end332:                                        ; preds = %if.end322
  %89 = load %struct.ieee80211_iface_combination*, %struct.ieee80211_iface_combination** %c, align 8
  %limits333 = getelementptr inbounds %struct.ieee80211_iface_combination, %struct.ieee80211_iface_combination* %89, i32 0, i32 0
  %90 = load %struct.ieee80211_iface_limit*, %struct.ieee80211_iface_limit** %limits333, align 8
  %91 = load i32, i32* %j, align 4
  %idxprom334 = sext i32 %91 to i64
  %arrayidx335 = getelementptr inbounds %struct.ieee80211_iface_limit, %struct.ieee80211_iface_limit* %90, i64 %idxprom334
  %max336 = getelementptr inbounds %struct.ieee80211_iface_limit, %struct.ieee80211_iface_limit* %arrayidx335, i32 0, i32 0
  %92 = load i16, i16* %max336, align 2
  %conv337 = zext i16 %92 to i32
  %93 = load i32, i32* %cnt, align 4
  %add = add i32 %93, %conv337
  store i32 %add, i32* %cnt, align 4
  %94 = load %struct.wiphy*, %struct.wiphy** %wiphy.addr, align 8
  %interface_modes = getelementptr inbounds %struct.wiphy, %struct.wiphy* %94, i32 0, i32 8
  %95 = load i16, i16* %interface_modes, align 16
  %conv339 = zext i16 %95 to i32
  %96 = load i16, i16* %types, align 2
  %conv340 = zext i16 %96 to i32
  %and341 = and i32 %conv339, %conv340
  %97 = load i16, i16* %types, align 2
  %conv342 = zext i16 %97 to i32
  %cmp343 = icmp ne i32 %and341, %conv342
  %lnot345 = xor i1 %cmp343, true
  %lnot347 = xor i1 %lnot345, true
  %lnot.ext348 = zext i1 %lnot347 to i32
  store i32 %lnot.ext348, i32* %__ret_warn_on338, align 4
  %98 = load i32, i32* %__ret_warn_on338, align 4
  %tobool349 = icmp ne i32 %98, 0
  %lnot350 = xor i1 %tobool349, true
  %lnot352 = xor i1 %lnot350, true
  %lnot.ext353 = zext i1 %lnot352 to i32
  %conv354 = sext i32 %lnot.ext353 to i64
  %tobool355 = icmp ne i64 %conv354, 0
  br i1 %tobool355, label %if.then356, label %if.end357

if.then356:                                       ; preds = %if.end332
  call void @warn_slowpath_null(i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.1, i32 0, i32 0), i32 585)
  br label %if.end357

if.end357:                                        ; preds = %if.then356, %if.end332
  %99 = load i32, i32* %__ret_warn_on338, align 4
  %tobool359 = icmp ne i32 %99, 0
  %lnot360 = xor i1 %tobool359, true
  %lnot362 = xor i1 %lnot360, true
  %lnot.ext363 = zext i1 %lnot362 to i32
  %conv364 = sext i32 %lnot.ext363 to i64
  store i64 %conv364, i64* %tmp358, align 8
  %100 = load i64, i64* %tmp358, align 8
  %tobool365 = icmp ne i64 %100, 0
  br i1 %tobool365, label %if.then366, label %if.end367

if.then366:                                       ; preds = %if.end357
  store i32 -22, i32* %retval, align 4
  br label %return

if.end367:                                        ; preds = %if.end357
  br label %for.inc

for.inc:                                          ; preds = %if.end367
  %101 = load i32, i32* %j, align 4
  %inc = add nsw i32 %101, 1
  store i32 %inc, i32* %j, align 4
  br label %for.cond134

for.end:                                          ; preds = %for.cond134
  %102 = load i16, i16* %all_iftypes, align 2
  %conv369 = zext i16 %102 to i64
  %and370 = and i64 %conv369, 32
  %tobool371 = icmp ne i64 %and370, 0
  %lnot372 = xor i1 %tobool371, true
  %lnot374 = xor i1 %lnot372, true
  %lnot.ext375 = zext i1 %lnot374 to i32
  store i32 %lnot.ext375, i32* %__ret_warn_on368, align 4
  %103 = load i32, i32* %__ret_warn_on368, align 4
  %tobool376 = icmp ne i32 %103, 0
  %lnot377 = xor i1 %tobool376, true
  %lnot379 = xor i1 %lnot377, true
  %lnot.ext380 = zext i1 %lnot379 to i32
  %conv381 = sext i32 %lnot.ext380 to i64
  %tobool382 = icmp ne i64 %conv381, 0
  br i1 %tobool382, label %if.then383, label %if.end384

if.then383:                                       ; preds = %for.end
  call void @warn_slowpath_null(i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.1, i32 0, i32 0), i32 590)
  br label %if.end384

if.end384:                                        ; preds = %if.then383, %for.end
  %104 = load i32, i32* %__ret_warn_on368, align 4
  %tobool386 = icmp ne i32 %104, 0
  %lnot387 = xor i1 %tobool386, true
  %lnot389 = xor i1 %lnot387, true
  %lnot.ext390 = zext i1 %lnot389 to i32
  %conv391 = sext i32 %lnot.ext390 to i64
  store i64 %conv391, i64* %tmp385, align 8
  %105 = load i64, i64* %tmp385, align 8
  %tobool392 = icmp ne i64 %105, 0
  br i1 %tobool392, label %if.then393, label %if.end394

if.then393:                                       ; preds = %if.end384
  store i32 -22, i32* %retval, align 4
  br label %return

if.end394:                                        ; preds = %if.end384
  %106 = load i32, i32* %cnt, align 4
  %107 = load %struct.ieee80211_iface_combination*, %struct.ieee80211_iface_combination** %c, align 8
  %max_interfaces396 = getelementptr inbounds %struct.ieee80211_iface_combination, %struct.ieee80211_iface_combination* %107, i32 0, i32 2
  %108 = load i16, i16* %max_interfaces396, align 4
  %conv397 = zext i16 %108 to i32
  %cmp398 = icmp ult i32 %106, %conv397
  %lnot400 = xor i1 %cmp398, true
  %lnot402 = xor i1 %lnot400, true
  %lnot.ext403 = zext i1 %lnot402 to i32
  store i32 %lnot.ext403, i32* %__ret_warn_on395, align 4
  %109 = load i32, i32* %__ret_warn_on395, align 4
  %tobool404 = icmp ne i32 %109, 0
  %lnot405 = xor i1 %tobool404, true
  %lnot407 = xor i1 %lnot405, true
  %lnot.ext408 = zext i1 %lnot407 to i32
  %conv409 = sext i32 %lnot.ext408 to i64
  %tobool410 = icmp ne i64 %conv409, 0
  br i1 %tobool410, label %if.then411, label %if.end412

if.then411:                                       ; preds = %if.end394
  call void @warn_slowpath_null(i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.1, i32 0, i32 0), i32 595)
  br label %if.end412

if.end412:                                        ; preds = %if.then411, %if.end394
  %110 = load i32, i32* %__ret_warn_on395, align 4
  %tobool414 = icmp ne i32 %110, 0
  %lnot415 = xor i1 %tobool414, true
  %lnot417 = xor i1 %lnot415, true
  %lnot.ext418 = zext i1 %lnot417 to i32
  %conv419 = sext i32 %lnot.ext418 to i64
  store i64 %conv419, i64* %tmp413, align 8
  %111 = load i64, i64* %tmp413, align 8
  %tobool420 = icmp ne i64 %111, 0
  br i1 %tobool420, label %if.then421, label %if.end422

if.then421:                                       ; preds = %if.end412
  store i32 -22, i32* %retval, align 4
  br label %return

if.end422:                                        ; preds = %if.end412
  br label %for.inc423

for.inc423:                                       ; preds = %if.end422
  %112 = load i32, i32* %i, align 4
  %inc424 = add nsw i32 %112, 1
  store i32 %inc424, i32* %i, align 4
  br label %for.cond

for.end425:                                       ; preds = %for.cond
  store i32 0, i32* %retval, align 4
  br label %return

return:                                           ; preds = %for.end425, %if.then421, %if.then393, %if.then366, %if.then331, %if.then301, %if.then265, %if.then229, %if.then201, %if.then168, %if.then132, %if.then105, %if.then73, %if.then46, %if.then19
  %113 = load i32, i32* %retval, align 4
  ret i32 %113
}

declare void @ieee80211_set_bitrate_flags(%struct.wiphy*) #1

declare i32 @device_add(%struct.device*) #1

declare void @wiphy_regulatory_register(%struct.wiphy*) #1

; Function Attrs: noinline nounwind optnone uwtable
define internal void @list_add_rcu(%struct.list_head* %new, %struct.list_head* %head) #0 {
entry:
  %new.addr = alloca %struct.list_head*, align 8
  %head.addr = alloca %struct.list_head*, align 8
  store %struct.list_head* %new, %struct.list_head** %new.addr, align 8
  store %struct.list_head* %head, %struct.list_head** %head.addr, align 8
  %0 = load %struct.list_head*, %struct.list_head** %new.addr, align 8
  %1 = load %struct.list_head*, %struct.list_head** %head.addr, align 8
  %2 = load %struct.list_head*, %struct.list_head** %head.addr, align 8
  %next = getelementptr inbounds %struct.list_head, %struct.list_head* %2, i32 0, i32 0
  %3 = load %struct.list_head*, %struct.list_head** %next, align 8
  call void @__list_add_rcu(%struct.list_head* %0, %struct.list_head* %1, %struct.list_head* %3)
  ret void
}

declare %struct.dentry* @debugfs_create_dir(i8*, %struct.dentry*) #1

; Function Attrs: noinline nounwind optnone uwtable
define internal zeroext i1 @IS_ERR(i8* %ptr) #0 {
entry:
  %ptr.addr = alloca i8*, align 8
  store i8* %ptr, i8** %ptr.addr, align 8
  %0 = load i8*, i8** %ptr.addr, align 8
  %1 = ptrtoint i8* %0 to i64
  %2 = inttoptr i64 %1 to i8*
  %3 = ptrtoint i8* %2 to i64
  %cmp = icmp uge i64 %3, -4095
  %lnot = xor i1 %cmp, true
  %lnot1 = xor i1 %lnot, true
  %lnot.ext = zext i1 %lnot1 to i32
  %conv = sext i32 %lnot.ext to i64
  %tobool = icmp ne i64 %conv, 0
  ret i1 %tobool
}

; Function Attrs: noinline nounwind optnone uwtable
define internal void @cfg80211_debugfs_rdev_add(%struct.cfg80211_registered_device* %rdev) #0 {
entry:
  %rdev.addr = alloca %struct.cfg80211_registered_device*, align 8
  store %struct.cfg80211_registered_device* %rdev, %struct.cfg80211_registered_device** %rdev.addr, align 8
  ret void
}

; Function Attrs: noinline nounwind optnone uwtable
define internal void @nl80211_send_reg_change_event(%struct.regulatory_request* %request) #0 {
entry:
  %request.addr = alloca %struct.regulatory_request*, align 8
  store %struct.regulatory_request* %request, %struct.regulatory_request** %request.addr, align 8
  %0 = load %struct.regulatory_request*, %struct.regulatory_request** %request.addr, align 8
  call void @nl80211_common_reg_change_event(i32 36, %struct.regulatory_request* %0)
  ret void
}

declare i32 @rfkill_register(%struct.rfkill*) #1

declare void @rfkill_destroy(%struct.rfkill*) #1

; Function Attrs: noinline nounwind optnone uwtable
define void @wiphy_unregister(%struct.wiphy* %wiphy) #0 {
entry:
  %wiphy.addr = alloca %struct.wiphy*, align 8
  %rdev = alloca %struct.cfg80211_registered_device*, align 8
  %__count = alloca i32, align 4
  %tmp = alloca i32, align 4
  %__wait = alloca %struct.__wait_queue, align 8
  %__ret = alloca i64, align 8
  %__int = alloca i64, align 8
  %__count4 = alloca i32, align 4
  %tmp6 = alloca i32, align 4
  %tmp13 = alloca i64, align 8
  %__ret_warn_on = alloca i32, align 4
  %tmp34 = alloca i64, align 8
  store %struct.wiphy* %wiphy, %struct.wiphy** %wiphy.addr, align 8
  %0 = load %struct.wiphy*, %struct.wiphy** %wiphy.addr, align 8
  %call = call %struct.cfg80211_registered_device* @wiphy_to_rdev(%struct.wiphy* %0)
  store %struct.cfg80211_registered_device* %call, %struct.cfg80211_registered_device** %rdev, align 8
  br label %do.body

do.body:                                          ; preds = %entry
  br label %do.body1

do.body1:                                         ; preds = %do.body
  %call2 = call i32 @_cond_resched()
  br label %do.end

do.end:                                           ; preds = %do.body1
  call void @rtnl_lock()
  %1 = load %struct.cfg80211_registered_device*, %struct.cfg80211_registered_device** %rdev, align 8
  %opencount = getelementptr inbounds %struct.cfg80211_registered_device, %struct.cfg80211_registered_device* %1, i32 0, i32 11
  %2 = load i32, i32* %opencount, align 8
  store i32 %2, i32* %__count, align 4
  call void @rtnl_unlock()
  %3 = load i32, i32* %__count, align 4
  %cmp = icmp eq i32 %3, 0
  %conv = zext i1 %cmp to i32
  store i32 %conv, i32* %tmp, align 4
  %4 = load i32, i32* %tmp, align 4
  %tobool = icmp ne i32 %4, 0
  br i1 %tobool, label %if.then, label %if.end

if.then:                                          ; preds = %do.end
  br label %do.end14

if.end:                                           ; preds = %do.end
  store i64 0, i64* %__ret, align 8
  call void @init_wait_entry(%struct.__wait_queue* %__wait, i32 0)
  br label %for.cond

for.cond:                                         ; preds = %if.end11, %if.end
  %5 = load %struct.cfg80211_registered_device*, %struct.cfg80211_registered_device** %rdev, align 8
  %dev_wait = getelementptr inbounds %struct.cfg80211_registered_device, %struct.cfg80211_registered_device* %5, i32 0, i32 12
  %call3 = call i64 @prepare_to_wait_event(%struct.__wait_queue_head* %dev_wait, %struct.__wait_queue* %__wait, i32 2)
  store i64 %call3, i64* %__int, align 8
  call void @rtnl_lock()
  %6 = load %struct.cfg80211_registered_device*, %struct.cfg80211_registered_device** %rdev, align 8
  %opencount5 = getelementptr inbounds %struct.cfg80211_registered_device, %struct.cfg80211_registered_device* %6, i32 0, i32 11
  %7 = load i32, i32* %opencount5, align 8
  store i32 %7, i32* %__count4, align 4
  call void @rtnl_unlock()
  %8 = load i32, i32* %__count4, align 4
  %cmp7 = icmp eq i32 %8, 0
  %conv8 = zext i1 %cmp7 to i32
  store i32 %conv8, i32* %tmp6, align 4
  %9 = load i32, i32* %tmp6, align 4
  %tobool9 = icmp ne i32 %9, 0
  br i1 %tobool9, label %if.then10, label %if.end11

if.then10:                                        ; preds = %for.cond
  br label %for.end

if.end11:                                         ; preds = %for.cond
  call void @schedule()
  br label %for.cond

for.end:                                          ; preds = %if.then10
  %10 = load %struct.cfg80211_registered_device*, %struct.cfg80211_registered_device** %rdev, align 8
  %dev_wait12 = getelementptr inbounds %struct.cfg80211_registered_device, %struct.cfg80211_registered_device* %10, i32 0, i32 12
  call void @finish_wait(%struct.__wait_queue_head* %dev_wait12, %struct.__wait_queue* %__wait)
  br label %__out

__out:                                            ; preds = %for.end
  %11 = load i64, i64* %__ret, align 8
  store i64 %11, i64* %tmp13, align 8
  %12 = load i64, i64* %tmp13, align 8
  br label %do.end14

do.end14:                                         ; preds = %__out, %if.then
  %13 = load %struct.cfg80211_registered_device*, %struct.cfg80211_registered_device** %rdev, align 8
  %rfkill = getelementptr inbounds %struct.cfg80211_registered_device, %struct.cfg80211_registered_device* %13, i32 0, i32 3
  %14 = load %struct.rfkill*, %struct.rfkill** %rfkill, align 16
  %tobool15 = icmp ne %struct.rfkill* %14, null
  br i1 %tobool15, label %if.then16, label %if.end18

if.then16:                                        ; preds = %do.end14
  %15 = load %struct.cfg80211_registered_device*, %struct.cfg80211_registered_device** %rdev, align 8
  %rfkill17 = getelementptr inbounds %struct.cfg80211_registered_device, %struct.cfg80211_registered_device* %15, i32 0, i32 3
  %16 = load %struct.rfkill*, %struct.rfkill** %rfkill17, align 16
  call void @rfkill_unregister(%struct.rfkill* %16)
  br label %if.end18

if.end18:                                         ; preds = %if.then16, %do.end14
  call void @rtnl_lock()
  %17 = load %struct.cfg80211_registered_device*, %struct.cfg80211_registered_device** %rdev, align 8
  call void @nl80211_notify_wiphy(%struct.cfg80211_registered_device* %17, i32 4)
  %18 = load %struct.cfg80211_registered_device*, %struct.cfg80211_registered_device** %rdev, align 8
  %wiphy19 = getelementptr inbounds %struct.cfg80211_registered_device, %struct.cfg80211_registered_device* %18, i32 0, i32 42
  %registered = getelementptr inbounds %struct.wiphy, %struct.wiphy* %wiphy19, i32 0, i32 51
  store i8 0, i8* %registered, align 8
  %19 = load %struct.cfg80211_registered_device*, %struct.cfg80211_registered_device** %rdev, align 8
  %wiphy20 = getelementptr inbounds %struct.cfg80211_registered_device, %struct.cfg80211_registered_device* %19, i32 0, i32 42
  %wdev_list = getelementptr inbounds %struct.wiphy, %struct.wiphy* %wiphy20, i32 0, i32 55
  %call21 = call i32 @list_empty(%struct.list_head* %wdev_list)
  %tobool22 = icmp ne i32 %call21, 0
  %lnot = xor i1 %tobool22, true
  %lnot23 = xor i1 %lnot, true
  %lnot24 = xor i1 %lnot23, true
  %lnot.ext = zext i1 %lnot24 to i32
  store i32 %lnot.ext, i32* %__ret_warn_on, align 4
  %20 = load i32, i32* %__ret_warn_on, align 4
  %tobool25 = icmp ne i32 %20, 0
  %lnot26 = xor i1 %tobool25, true
  %lnot28 = xor i1 %lnot26, true
  %lnot.ext29 = zext i1 %lnot28 to i32
  %conv30 = sext i32 %lnot.ext29 to i64
  %tobool31 = icmp ne i64 %conv30, 0
  br i1 %tobool31, label %if.then32, label %if.end33

if.then32:                                        ; preds = %if.end18
  call void @warn_slowpath_null(i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.1, i32 0, i32 0), i32 890)
  br label %if.end33

if.end33:                                         ; preds = %if.then32, %if.end18
  %21 = load i32, i32* %__ret_warn_on, align 4
  %tobool35 = icmp ne i32 %21, 0
  %lnot36 = xor i1 %tobool35, true
  %lnot38 = xor i1 %lnot36, true
  %lnot.ext39 = zext i1 %lnot38 to i32
  %conv40 = sext i32 %lnot.ext39 to i64
  store i64 %conv40, i64* %tmp34, align 8
  %22 = load i64, i64* %tmp34, align 8
  %23 = load %struct.cfg80211_registered_device*, %struct.cfg80211_registered_device** %rdev, align 8
  %wiphy41 = getelementptr inbounds %struct.cfg80211_registered_device, %struct.cfg80211_registered_device* %23, i32 0, i32 42
  %debugfsdir = getelementptr inbounds %struct.wiphy, %struct.wiphy* %wiphy41, i32 0, i32 52
  %24 = load %struct.dentry*, %struct.dentry** %debugfsdir, align 32
  call void @debugfs_remove_recursive(%struct.dentry* %24)
  %25 = load %struct.cfg80211_registered_device*, %struct.cfg80211_registered_device** %rdev, align 8
  %list = getelementptr inbounds %struct.cfg80211_registered_device, %struct.cfg80211_registered_device* %25, i32 0, i32 1
  call void @list_del_rcu(%struct.list_head* %list)
  call void @synchronize_rcu()
  %26 = load %struct.wiphy*, %struct.wiphy** %wiphy.addr, align 8
  call void @wiphy_regulatory_deregister(%struct.wiphy* %26)
  %27 = load i32, i32* @cfg80211_rdev_list_generation, align 4
  %inc = add nsw i32 %27, 1
  store i32 %inc, i32* @cfg80211_rdev_list_generation, align 4
  %28 = load %struct.cfg80211_registered_device*, %struct.cfg80211_registered_device** %rdev, align 8
  %wiphy42 = getelementptr inbounds %struct.cfg80211_registered_device, %struct.cfg80211_registered_device* %28, i32 0, i32 42
  %dev = getelementptr inbounds %struct.wiphy, %struct.wiphy* %wiphy42, i32 0, i32 50
  call void @device_del(%struct.device* %dev)
  call void @rtnl_unlock()
  %29 = load %struct.cfg80211_registered_device*, %struct.cfg80211_registered_device** %rdev, align 8
  %scan_done_wk = getelementptr inbounds %struct.cfg80211_registered_device, %struct.cfg80211_registered_device* %29, i32 0, i32 29
  %call43 = call zeroext i1 @flush_work(%struct.work_struct* %scan_done_wk)
  %30 = load %struct.cfg80211_registered_device*, %struct.cfg80211_registered_device** %rdev, align 8
  %conn_work = getelementptr inbounds %struct.cfg80211_registered_device, %struct.cfg80211_registered_device* %30, i32 0, i32 32
  %call44 = call zeroext i1 @cancel_work_sync(%struct.work_struct* %conn_work)
  %31 = load %struct.cfg80211_registered_device*, %struct.cfg80211_registered_device** %rdev, align 8
  %event_work = getelementptr inbounds %struct.cfg80211_registered_device, %struct.cfg80211_registered_device* %31, i32 0, i32 33
  %call45 = call zeroext i1 @flush_work(%struct.work_struct* %event_work)
  %32 = load %struct.cfg80211_registered_device*, %struct.cfg80211_registered_device** %rdev, align 8
  %dfs_update_channels_wk = getelementptr inbounds %struct.cfg80211_registered_device, %struct.cfg80211_registered_device* %32, i32 0, i32 34
  %call46 = call zeroext i1 @cancel_delayed_work_sync(%struct.delayed_work* %dfs_update_channels_wk)
  %33 = load %struct.cfg80211_registered_device*, %struct.cfg80211_registered_device** %rdev, align 8
  %destroy_work = getelementptr inbounds %struct.cfg80211_registered_device, %struct.cfg80211_registered_device* %33, i32 0, i32 39
  %call47 = call zeroext i1 @flush_work(%struct.work_struct* %destroy_work)
  %34 = load %struct.cfg80211_registered_device*, %struct.cfg80211_registered_device** %rdev, align 8
  %sched_scan_stop_wk = getelementptr inbounds %struct.cfg80211_registered_device, %struct.cfg80211_registered_device* %34, i32 0, i32 40
  %call48 = call zeroext i1 @flush_work(%struct.work_struct* %sched_scan_stop_wk)
  %35 = load %struct.cfg80211_registered_device*, %struct.cfg80211_registered_device** %rdev, align 8
  %mlme_unreg_wk = getelementptr inbounds %struct.cfg80211_registered_device, %struct.cfg80211_registered_device* %35, i32 0, i32 17
  %call49 = call zeroext i1 @flush_work(%struct.work_struct* %mlme_unreg_wk)
  %36 = load %struct.cfg80211_registered_device*, %struct.cfg80211_registered_device** %rdev, align 8
  %wiphy50 = getelementptr inbounds %struct.cfg80211_registered_device, %struct.cfg80211_registered_device* %36, i32 0, i32 42
  %wowlan_config = getelementptr inbounds %struct.wiphy, %struct.wiphy* %wiphy50, i32 0, i32 35
  %37 = load %struct.cfg80211_wowlan*, %struct.cfg80211_wowlan** %wowlan_config, align 16
  %tobool51 = icmp ne %struct.cfg80211_wowlan* %37, null
  br i1 %tobool51, label %land.lhs.true, label %if.end54

land.lhs.true:                                    ; preds = %if.end33
  %38 = load %struct.cfg80211_registered_device*, %struct.cfg80211_registered_device** %rdev, align 8
  %ops = getelementptr inbounds %struct.cfg80211_registered_device, %struct.cfg80211_registered_device* %38, i32 0, i32 0
  %39 = load %struct.cfg80211_ops*, %struct.cfg80211_ops** %ops, align 32
  %set_wakeup = getelementptr inbounds %struct.cfg80211_ops, %struct.cfg80211_ops* %39, i32 0, i32 2
  %40 = load void (%struct.wiphy*, i1)*, void (%struct.wiphy*, i1)** %set_wakeup, align 8
  %tobool52 = icmp ne void (%struct.wiphy*, i1)* %40, null
  br i1 %tobool52, label %if.then53, label %if.end54

if.then53:                                        ; preds = %land.lhs.true
  %41 = load %struct.cfg80211_registered_device*, %struct.cfg80211_registered_device** %rdev, align 8
  call void @rdev_set_wakeup(%struct.cfg80211_registered_device* %41, i1 zeroext false)
  br label %if.end54

if.end54:                                         ; preds = %if.then53, %land.lhs.true, %if.end33
  %42 = load %struct.cfg80211_registered_device*, %struct.cfg80211_registered_device** %rdev, align 8
  call void @cfg80211_rdev_free_wowlan(%struct.cfg80211_registered_device* %42)
  %43 = load %struct.cfg80211_registered_device*, %struct.cfg80211_registered_device** %rdev, align 8
  call void @cfg80211_rdev_free_coalesce(%struct.cfg80211_registered_device* %43)
  ret void
}

; Function Attrs: noinline nounwind optnone uwtable
define void @wiphy_rfkill_start_polling(%struct.wiphy* %wiphy) #0 {
entry:
  %wiphy.addr = alloca %struct.wiphy*, align 8
  %rdev = alloca %struct.cfg80211_registered_device*, align 8
  store %struct.wiphy* %wiphy, %struct.wiphy** %wiphy.addr, align 8
  %0 = load %struct.wiphy*, %struct.wiphy** %wiphy.addr, align 8
  %call = call %struct.cfg80211_registered_device* @wiphy_to_rdev(%struct.wiphy* %0)
  store %struct.cfg80211_registered_device* %call, %struct.cfg80211_registered_device** %rdev, align 8
  %1 = load %struct.cfg80211_registered_device*, %struct.cfg80211_registered_device** %rdev, align 8
  %ops = getelementptr inbounds %struct.cfg80211_registered_device, %struct.cfg80211_registered_device* %1, i32 0, i32 0
  %2 = load %struct.cfg80211_ops*, %struct.cfg80211_ops** %ops, align 32
  %rfkill_poll = getelementptr inbounds %struct.cfg80211_ops, %struct.cfg80211_ops* %2, i32 0, i32 52
  %3 = load void (%struct.wiphy*)*, void (%struct.wiphy*)** %rfkill_poll, align 8
  %tobool = icmp ne void (%struct.wiphy*)* %3, null
  br i1 %tobool, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  br label %return

if.end:                                           ; preds = %entry
  %4 = load %struct.cfg80211_registered_device*, %struct.cfg80211_registered_device** %rdev, align 8
  %rfkill_ops = getelementptr inbounds %struct.cfg80211_registered_device, %struct.cfg80211_registered_device* %4, i32 0, i32 2
  %poll = getelementptr inbounds %struct.rfkill_ops, %struct.rfkill_ops* %rfkill_ops, i32 0, i32 0
  store void (%struct.rfkill*, i8*)* @cfg80211_rfkill_poll, void (%struct.rfkill*, i8*)** %poll, align 8
  %5 = load %struct.cfg80211_registered_device*, %struct.cfg80211_registered_device** %rdev, align 8
  %rfkill = getelementptr inbounds %struct.cfg80211_registered_device, %struct.cfg80211_registered_device* %5, i32 0, i32 3
  %6 = load %struct.rfkill*, %struct.rfkill** %rfkill, align 16
  call void @rfkill_resume_polling(%struct.rfkill* %6)
  br label %return

return:                                           ; preds = %if.end, %if.then
  ret void
}

; Function Attrs: noinline nounwind optnone uwtable
define internal void @cfg80211_rfkill_poll(%struct.rfkill* %rfkill, i8* %data) #0 {
entry:
  %rfkill.addr = alloca %struct.rfkill*, align 8
  %data.addr = alloca i8*, align 8
  %rdev = alloca %struct.cfg80211_registered_device*, align 8
  store %struct.rfkill* %rfkill, %struct.rfkill** %rfkill.addr, align 8
  store i8* %data, i8** %data.addr, align 8
  %0 = load i8*, i8** %data.addr, align 8
  %1 = bitcast i8* %0 to %struct.cfg80211_registered_device*
  store %struct.cfg80211_registered_device* %1, %struct.cfg80211_registered_device** %rdev, align 8
  %2 = load %struct.cfg80211_registered_device*, %struct.cfg80211_registered_device** %rdev, align 8
  call void @rdev_rfkill_poll(%struct.cfg80211_registered_device* %2)
  ret void
}

declare void @rfkill_resume_polling(%struct.rfkill*) #1

; Function Attrs: noinline nounwind optnone uwtable
define void @wiphy_rfkill_stop_polling(%struct.wiphy* %wiphy) #0 {
entry:
  %wiphy.addr = alloca %struct.wiphy*, align 8
  %rdev = alloca %struct.cfg80211_registered_device*, align 8
  store %struct.wiphy* %wiphy, %struct.wiphy** %wiphy.addr, align 8
  %0 = load %struct.wiphy*, %struct.wiphy** %wiphy.addr, align 8
  %call = call %struct.cfg80211_registered_device* @wiphy_to_rdev(%struct.wiphy* %0)
  store %struct.cfg80211_registered_device* %call, %struct.cfg80211_registered_device** %rdev, align 8
  %1 = load %struct.cfg80211_registered_device*, %struct.cfg80211_registered_device** %rdev, align 8
  %rfkill = getelementptr inbounds %struct.cfg80211_registered_device, %struct.cfg80211_registered_device* %1, i32 0, i32 3
  %2 = load %struct.rfkill*, %struct.rfkill** %rfkill, align 16
  call void @rfkill_pause_polling(%struct.rfkill* %2)
  ret void
}

declare void @rfkill_pause_polling(%struct.rfkill*) #1

declare i32 @_cond_resched() #1

declare void @init_wait_entry(%struct.__wait_queue*, i32) #1

declare i64 @prepare_to_wait_event(%struct.__wait_queue_head*, %struct.__wait_queue*, i32) #1

declare void @schedule() #1

declare void @finish_wait(%struct.__wait_queue_head*, %struct.__wait_queue*) #1

declare void @rfkill_unregister(%struct.rfkill*) #1

; Function Attrs: noinline nounwind optnone uwtable
define internal i32 @list_empty(%struct.list_head* %head) #0 {
entry:
  %p.addr.i = alloca i8*, align 8
  %res.addr.i = alloca i8*, align 8
  %size.addr.i = alloca i32, align 4
  %head.addr = alloca %struct.list_head*, align 8
  %__u = alloca %union.anon.97, align 8
  %tmp = alloca %struct.list_head*, align 8
  store %struct.list_head* %head, %struct.list_head** %head.addr, align 8
  %0 = load %struct.list_head*, %struct.list_head** %head.addr, align 8
  %next = getelementptr inbounds %struct.list_head, %struct.list_head* %0, i32 0, i32 0
  %1 = bitcast %struct.list_head** %next to i8*
  %__c = bitcast %union.anon.97* %__u to [1 x i8]*
  %arraydecay = getelementptr inbounds [1 x i8], [1 x i8]* %__c, i32 0, i32 0
  store i8* %1, i8** %p.addr.i, align 8
  store i8* %arraydecay, i8** %res.addr.i, align 8
  store i32 8, i32* %size.addr.i, align 4
  %2 = load i32, i32* %size.addr.i, align 4
  br label %NodeBlock9

NodeBlock9:                                       ; preds = %entry
  %Pivot10 = icmp slt i32 %2, 4
  br i1 %Pivot10, label %NodeBlock, label %NodeBlock7

NodeBlock7:                                       ; preds = %NodeBlock9
  %Pivot8 = icmp slt i32 %2, 8
  br i1 %Pivot8, label %LeafBlock3, label %LeafBlock5

LeafBlock5:                                       ; preds = %NodeBlock7
  %SwitchLeaf6 = icmp eq i32 %2, 8
  br i1 %SwitchLeaf6, label %sw.bb3.i, label %NewDefault

LeafBlock3:                                       ; preds = %NodeBlock7
  %SwitchLeaf4 = icmp eq i32 %2, 4
  br i1 %SwitchLeaf4, label %sw.bb2.i, label %NewDefault

NodeBlock:                                        ; preds = %NodeBlock9
  %Pivot = icmp slt i32 %2, 2
  br i1 %Pivot, label %LeafBlock, label %LeafBlock1

LeafBlock1:                                       ; preds = %NodeBlock
  %SwitchLeaf2 = icmp eq i32 %2, 2
  br i1 %SwitchLeaf2, label %sw.bb1.i, label %NewDefault

LeafBlock:                                        ; preds = %NodeBlock
  %SwitchLeaf = icmp eq i32 %2, 1
  br i1 %SwitchLeaf, label %sw.bb.i, label %NewDefault

sw.bb.i:                                          ; preds = %LeafBlock
  %3 = load i8*, i8** %p.addr.i, align 8
  %4 = load volatile i8, i8* %3, align 1
  %5 = load i8*, i8** %res.addr.i, align 8
  store i8 %4, i8* %5, align 1
  br label %__read_once_size.exit

sw.bb1.i:                                         ; preds = %LeafBlock1
  %6 = load i8*, i8** %p.addr.i, align 8
  %7 = bitcast i8* %6 to i16*
  %8 = load volatile i16, i16* %7, align 2
  %9 = load i8*, i8** %res.addr.i, align 8
  %10 = bitcast i8* %9 to i16*
  store i16 %8, i16* %10, align 2
  br label %__read_once_size.exit

sw.bb2.i:                                         ; preds = %LeafBlock3
  %11 = load i8*, i8** %p.addr.i, align 8
  %12 = bitcast i8* %11 to i32*
  %13 = load volatile i32, i32* %12, align 4
  %14 = load i8*, i8** %res.addr.i, align 8
  %15 = bitcast i8* %14 to i32*
  store i32 %13, i32* %15, align 4
  br label %__read_once_size.exit

sw.bb3.i:                                         ; preds = %LeafBlock5
  %16 = load i8*, i8** %p.addr.i, align 8
  %17 = bitcast i8* %16 to i64*
  %18 = load volatile i64, i64* %17, align 8
  %19 = load i8*, i8** %res.addr.i, align 8
  %20 = bitcast i8* %19 to i64*
  store i64 %18, i64* %20, align 8
  br label %__read_once_size.exit

NewDefault:                                       ; preds = %LeafBlock5, %LeafBlock3, %LeafBlock1, %LeafBlock
  br label %sw.default.i

sw.default.i:                                     ; preds = %NewDefault
  call void asm sideeffect "", "~{memory},~{dirflag},~{fpsr},~{flags}"() #3, !srcloc !3
  %21 = load i8*, i8** %res.addr.i, align 8
  %22 = load i8*, i8** %p.addr.i, align 8
  %23 = load i32, i32* %size.addr.i, align 4
  %conv.i = sext i32 %23 to i64
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %21, i8* %22, i64 %conv.i, i32 1, i1 false) #3
  call void asm sideeffect "", "~{memory},~{dirflag},~{fpsr},~{flags}"() #3, !srcloc !4
  br label %__read_once_size.exit

__read_once_size.exit:                            ; preds = %sw.default.i, %sw.bb3.i, %sw.bb2.i, %sw.bb1.i, %sw.bb.i
  %__val = bitcast %union.anon.97* %__u to %struct.list_head**
  %24 = load %struct.list_head*, %struct.list_head** %__val, align 8
  store %struct.list_head* %24, %struct.list_head** %tmp, align 8
  %25 = load %struct.list_head*, %struct.list_head** %tmp, align 8
  %26 = load %struct.list_head*, %struct.list_head** %head.addr, align 8
  %cmp = icmp eq %struct.list_head* %25, %26
  %conv = zext i1 %cmp to i32
  ret i32 %conv
}

declare void @debugfs_remove_recursive(%struct.dentry*) #1

; Function Attrs: noinline nounwind optnone uwtable
define internal void @list_del_rcu(%struct.list_head* %entry1) #0 {
entry:
  %entry.addr = alloca %struct.list_head*, align 8
  store %struct.list_head* %entry1, %struct.list_head** %entry.addr, align 8
  %0 = load %struct.list_head*, %struct.list_head** %entry.addr, align 8
  call void @__list_del_entry(%struct.list_head* %0)
  %1 = load %struct.list_head*, %struct.list_head** %entry.addr, align 8
  %prev = getelementptr inbounds %struct.list_head, %struct.list_head* %1, i32 0, i32 1
  store %struct.list_head* bitcast (i8* getelementptr (i8, i8* inttoptr (i64 512 to i8*), i64 -2401263026318606336) to %struct.list_head*), %struct.list_head** %prev, align 8
  ret void
}

; Function Attrs: noinline nounwind optnone uwtable
define internal void @synchronize_rcu() #0 {
entry:
  call void @synchronize_sched()
  ret void
}

declare void @wiphy_regulatory_deregister(%struct.wiphy*) #1

declare void @device_del(%struct.device*) #1

declare zeroext i1 @flush_work(%struct.work_struct*) #1

declare zeroext i1 @cancel_work_sync(%struct.work_struct*) #1

declare zeroext i1 @cancel_delayed_work_sync(%struct.delayed_work*) #1

; Function Attrs: noinline nounwind optnone uwtable
define internal void @rdev_set_wakeup(%struct.cfg80211_registered_device* %rdev, i1 zeroext %enabled) #0 {
entry:
  %rdev.addr = alloca %struct.cfg80211_registered_device*, align 8
  %enabled.addr = alloca i8, align 1
  store %struct.cfg80211_registered_device* %rdev, %struct.cfg80211_registered_device** %rdev.addr, align 8
  %frombool = zext i1 %enabled to i8
  store i8 %frombool, i8* %enabled.addr, align 1
  %0 = load %struct.cfg80211_registered_device*, %struct.cfg80211_registered_device** %rdev.addr, align 8
  %wiphy = getelementptr inbounds %struct.cfg80211_registered_device, %struct.cfg80211_registered_device* %0, i32 0, i32 42
  %1 = load i8, i8* %enabled.addr, align 1
  %tobool = trunc i8 %1 to i1
  call void @trace_rdev_set_wakeup(%struct.wiphy* %wiphy, i1 zeroext %tobool)
  %2 = load %struct.cfg80211_registered_device*, %struct.cfg80211_registered_device** %rdev.addr, align 8
  %ops = getelementptr inbounds %struct.cfg80211_registered_device, %struct.cfg80211_registered_device* %2, i32 0, i32 0
  %3 = load %struct.cfg80211_ops*, %struct.cfg80211_ops** %ops, align 32
  %set_wakeup = getelementptr inbounds %struct.cfg80211_ops, %struct.cfg80211_ops* %3, i32 0, i32 2
  %4 = load void (%struct.wiphy*, i1)*, void (%struct.wiphy*, i1)** %set_wakeup, align 8
  %5 = load %struct.cfg80211_registered_device*, %struct.cfg80211_registered_device** %rdev.addr, align 8
  %wiphy1 = getelementptr inbounds %struct.cfg80211_registered_device, %struct.cfg80211_registered_device* %5, i32 0, i32 42
  %6 = load i8, i8* %enabled.addr, align 1
  %tobool2 = trunc i8 %6 to i1
  call void %4(%struct.wiphy* %wiphy1, i1 zeroext %tobool2)
  %7 = load %struct.cfg80211_registered_device*, %struct.cfg80211_registered_device** %rdev.addr, align 8
  %wiphy3 = getelementptr inbounds %struct.cfg80211_registered_device, %struct.cfg80211_registered_device* %7, i32 0, i32 42
  call void @trace_rdev_return_void(%struct.wiphy* %wiphy3)
  ret void
}

; Function Attrs: noinline nounwind optnone uwtable
define internal void @cfg80211_rdev_free_wowlan(%struct.cfg80211_registered_device* %rdev) #0 {
entry:
  %rdev.addr = alloca %struct.cfg80211_registered_device*, align 8
  %i = alloca i32, align 4
  store %struct.cfg80211_registered_device* %rdev, %struct.cfg80211_registered_device** %rdev.addr, align 8
  %0 = load %struct.cfg80211_registered_device*, %struct.cfg80211_registered_device** %rdev.addr, align 8
  %wiphy = getelementptr inbounds %struct.cfg80211_registered_device, %struct.cfg80211_registered_device* %0, i32 0, i32 42
  %wowlan_config = getelementptr inbounds %struct.wiphy, %struct.wiphy* %wiphy, i32 0, i32 35
  %1 = load %struct.cfg80211_wowlan*, %struct.cfg80211_wowlan** %wowlan_config, align 16
  %tobool = icmp ne %struct.cfg80211_wowlan* %1, null
  br i1 %tobool, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  br label %return

if.end:                                           ; preds = %entry
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %if.end
  %2 = load i32, i32* %i, align 4
  %3 = load %struct.cfg80211_registered_device*, %struct.cfg80211_registered_device** %rdev.addr, align 8
  %wiphy1 = getelementptr inbounds %struct.cfg80211_registered_device, %struct.cfg80211_registered_device* %3, i32 0, i32 42
  %wowlan_config2 = getelementptr inbounds %struct.wiphy, %struct.wiphy* %wiphy1, i32 0, i32 35
  %4 = load %struct.cfg80211_wowlan*, %struct.cfg80211_wowlan** %wowlan_config2, align 16
  %n_patterns = getelementptr inbounds %struct.cfg80211_wowlan, %struct.cfg80211_wowlan* %4, i32 0, i32 9
  %5 = load i32, i32* %n_patterns, align 8
  %cmp = icmp slt i32 %2, %5
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %6 = load %struct.cfg80211_registered_device*, %struct.cfg80211_registered_device** %rdev.addr, align 8
  %wiphy3 = getelementptr inbounds %struct.cfg80211_registered_device, %struct.cfg80211_registered_device* %6, i32 0, i32 42
  %wowlan_config4 = getelementptr inbounds %struct.wiphy, %struct.wiphy* %wiphy3, i32 0, i32 35
  %7 = load %struct.cfg80211_wowlan*, %struct.cfg80211_wowlan** %wowlan_config4, align 16
  %patterns = getelementptr inbounds %struct.cfg80211_wowlan, %struct.cfg80211_wowlan* %7, i32 0, i32 7
  %8 = load %struct.cfg80211_pkt_pattern*, %struct.cfg80211_pkt_pattern** %patterns, align 8
  %9 = load i32, i32* %i, align 4
  %idxprom = sext i32 %9 to i64
  %arrayidx = getelementptr inbounds %struct.cfg80211_pkt_pattern, %struct.cfg80211_pkt_pattern* %8, i64 %idxprom
  %mask = getelementptr inbounds %struct.cfg80211_pkt_pattern, %struct.cfg80211_pkt_pattern* %arrayidx, i32 0, i32 0
  %10 = load i8*, i8** %mask, align 8
  call void @kfree(i8* %10)
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %11 = load i32, i32* %i, align 4
  %inc = add nsw i32 %11, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %12 = load %struct.cfg80211_registered_device*, %struct.cfg80211_registered_device** %rdev.addr, align 8
  %wiphy5 = getelementptr inbounds %struct.cfg80211_registered_device, %struct.cfg80211_registered_device* %12, i32 0, i32 42
  %wowlan_config6 = getelementptr inbounds %struct.wiphy, %struct.wiphy* %wiphy5, i32 0, i32 35
  %13 = load %struct.cfg80211_wowlan*, %struct.cfg80211_wowlan** %wowlan_config6, align 16
  %patterns7 = getelementptr inbounds %struct.cfg80211_wowlan, %struct.cfg80211_wowlan* %13, i32 0, i32 7
  %14 = load %struct.cfg80211_pkt_pattern*, %struct.cfg80211_pkt_pattern** %patterns7, align 8
  %15 = bitcast %struct.cfg80211_pkt_pattern* %14 to i8*
  call void @kfree(i8* %15)
  %16 = load %struct.cfg80211_registered_device*, %struct.cfg80211_registered_device** %rdev.addr, align 8
  %wiphy8 = getelementptr inbounds %struct.cfg80211_registered_device, %struct.cfg80211_registered_device* %16, i32 0, i32 42
  %wowlan_config9 = getelementptr inbounds %struct.wiphy, %struct.wiphy* %wiphy8, i32 0, i32 35
  %17 = load %struct.cfg80211_wowlan*, %struct.cfg80211_wowlan** %wowlan_config9, align 16
  %tcp = getelementptr inbounds %struct.cfg80211_wowlan, %struct.cfg80211_wowlan* %17, i32 0, i32 8
  %18 = load %struct.cfg80211_wowlan_tcp*, %struct.cfg80211_wowlan_tcp** %tcp, align 8
  %tobool10 = icmp ne %struct.cfg80211_wowlan_tcp* %18, null
  br i1 %tobool10, label %land.lhs.true, label %if.end20

land.lhs.true:                                    ; preds = %for.end
  %19 = load %struct.cfg80211_registered_device*, %struct.cfg80211_registered_device** %rdev.addr, align 8
  %wiphy11 = getelementptr inbounds %struct.cfg80211_registered_device, %struct.cfg80211_registered_device* %19, i32 0, i32 42
  %wowlan_config12 = getelementptr inbounds %struct.wiphy, %struct.wiphy* %wiphy11, i32 0, i32 35
  %20 = load %struct.cfg80211_wowlan*, %struct.cfg80211_wowlan** %wowlan_config12, align 16
  %tcp13 = getelementptr inbounds %struct.cfg80211_wowlan, %struct.cfg80211_wowlan* %20, i32 0, i32 8
  %21 = load %struct.cfg80211_wowlan_tcp*, %struct.cfg80211_wowlan_tcp** %tcp13, align 8
  %sock = getelementptr inbounds %struct.cfg80211_wowlan_tcp, %struct.cfg80211_wowlan_tcp* %21, i32 0, i32 0
  %22 = load %struct.socket*, %struct.socket** %sock, align 8
  %tobool14 = icmp ne %struct.socket* %22, null
  br i1 %tobool14, label %if.then15, label %if.end20

if.then15:                                        ; preds = %land.lhs.true
  %23 = load %struct.cfg80211_registered_device*, %struct.cfg80211_registered_device** %rdev.addr, align 8
  %wiphy16 = getelementptr inbounds %struct.cfg80211_registered_device, %struct.cfg80211_registered_device* %23, i32 0, i32 42
  %wowlan_config17 = getelementptr inbounds %struct.wiphy, %struct.wiphy* %wiphy16, i32 0, i32 35
  %24 = load %struct.cfg80211_wowlan*, %struct.cfg80211_wowlan** %wowlan_config17, align 16
  %tcp18 = getelementptr inbounds %struct.cfg80211_wowlan, %struct.cfg80211_wowlan* %24, i32 0, i32 8
  %25 = load %struct.cfg80211_wowlan_tcp*, %struct.cfg80211_wowlan_tcp** %tcp18, align 8
  %sock19 = getelementptr inbounds %struct.cfg80211_wowlan_tcp, %struct.cfg80211_wowlan_tcp* %25, i32 0, i32 0
  %26 = load %struct.socket*, %struct.socket** %sock19, align 8
  call void @sock_release(%struct.socket* %26)
  br label %if.end20

if.end20:                                         ; preds = %if.then15, %land.lhs.true, %for.end
  %27 = load %struct.cfg80211_registered_device*, %struct.cfg80211_registered_device** %rdev.addr, align 8
  %wiphy21 = getelementptr inbounds %struct.cfg80211_registered_device, %struct.cfg80211_registered_device* %27, i32 0, i32 42
  %wowlan_config22 = getelementptr inbounds %struct.wiphy, %struct.wiphy* %wiphy21, i32 0, i32 35
  %28 = load %struct.cfg80211_wowlan*, %struct.cfg80211_wowlan** %wowlan_config22, align 16
  %tcp23 = getelementptr inbounds %struct.cfg80211_wowlan, %struct.cfg80211_wowlan* %28, i32 0, i32 8
  %29 = load %struct.cfg80211_wowlan_tcp*, %struct.cfg80211_wowlan_tcp** %tcp23, align 8
  %30 = bitcast %struct.cfg80211_wowlan_tcp* %29 to i8*
  call void @kfree(i8* %30)
  %31 = load %struct.cfg80211_registered_device*, %struct.cfg80211_registered_device** %rdev.addr, align 8
  %wiphy24 = getelementptr inbounds %struct.cfg80211_registered_device, %struct.cfg80211_registered_device* %31, i32 0, i32 42
  %wowlan_config25 = getelementptr inbounds %struct.wiphy, %struct.wiphy* %wiphy24, i32 0, i32 35
  %32 = load %struct.cfg80211_wowlan*, %struct.cfg80211_wowlan** %wowlan_config25, align 16
  %nd_config = getelementptr inbounds %struct.cfg80211_wowlan, %struct.cfg80211_wowlan* %32, i32 0, i32 10
  %33 = load %struct.cfg80211_sched_scan_request*, %struct.cfg80211_sched_scan_request** %nd_config, align 8
  %34 = bitcast %struct.cfg80211_sched_scan_request* %33 to i8*
  call void @kfree(i8* %34)
  %35 = load %struct.cfg80211_registered_device*, %struct.cfg80211_registered_device** %rdev.addr, align 8
  %wiphy26 = getelementptr inbounds %struct.cfg80211_registered_device, %struct.cfg80211_registered_device* %35, i32 0, i32 42
  %wowlan_config27 = getelementptr inbounds %struct.wiphy, %struct.wiphy* %wiphy26, i32 0, i32 35
  %36 = load %struct.cfg80211_wowlan*, %struct.cfg80211_wowlan** %wowlan_config27, align 16
  %37 = bitcast %struct.cfg80211_wowlan* %36 to i8*
  call void @kfree(i8* %37)
  br label %return

return:                                           ; preds = %if.end20, %if.then
  ret void
}

declare void @cfg80211_rdev_free_coalesce(%struct.cfg80211_registered_device*) #1

; Function Attrs: noinline nounwind optnone uwtable
define void @cfg80211_dev_free(%struct.cfg80211_registered_device* %rdev) #0 {
entry:
  %rdev.addr = alloca %struct.cfg80211_registered_device*, align 8
  %scan = alloca %struct.cfg80211_internal_bss*, align 8
  %tmp = alloca %struct.cfg80211_internal_bss*, align 8
  %reg = alloca %struct.cfg80211_beacon_registration*, align 8
  %treg = alloca %struct.cfg80211_beacon_registration*, align 8
  %__mptr = alloca %struct.list_head*, align 8
  %tmp1 = alloca %struct.cfg80211_beacon_registration*, align 8
  %__mptr2 = alloca %struct.list_head*, align 8
  %tmp4 = alloca %struct.cfg80211_beacon_registration*, align 8
  %__mptr9 = alloca %struct.list_head*, align 8
  %tmp12 = alloca %struct.cfg80211_beacon_registration*, align 8
  %__mptr14 = alloca %struct.list_head*, align 8
  %tmp16 = alloca %struct.cfg80211_internal_bss*, align 8
  %__mptr18 = alloca %struct.list_head*, align 8
  %tmp21 = alloca %struct.cfg80211_internal_bss*, align 8
  %__mptr29 = alloca %struct.list_head*, align 8
  %tmp32 = alloca %struct.cfg80211_internal_bss*, align 8
  store %struct.cfg80211_registered_device* %rdev, %struct.cfg80211_registered_device** %rdev.addr, align 8
  %0 = load %struct.cfg80211_registered_device*, %struct.cfg80211_registered_device** %rdev.addr, align 8
  %rfkill = getelementptr inbounds %struct.cfg80211_registered_device, %struct.cfg80211_registered_device* %0, i32 0, i32 3
  %1 = load %struct.rfkill*, %struct.rfkill** %rfkill, align 16
  call void @rfkill_destroy(%struct.rfkill* %1)
  %2 = load %struct.cfg80211_registered_device*, %struct.cfg80211_registered_device** %rdev.addr, align 8
  %beacon_registrations = getelementptr inbounds %struct.cfg80211_registered_device, %struct.cfg80211_registered_device* %2, i32 0, i32 13
  %next = getelementptr inbounds %struct.list_head, %struct.list_head* %beacon_registrations, i32 0, i32 0
  %3 = load %struct.list_head*, %struct.list_head** %next, align 8
  store %struct.list_head* %3, %struct.list_head** %__mptr, align 8
  %4 = load %struct.list_head*, %struct.list_head** %__mptr, align 8
  %5 = bitcast %struct.list_head* %4 to i8*
  %add.ptr = getelementptr inbounds i8, i8* %5, i64 0
  %6 = bitcast i8* %add.ptr to %struct.cfg80211_beacon_registration*
  store %struct.cfg80211_beacon_registration* %6, %struct.cfg80211_beacon_registration** %tmp1, align 8
  %7 = load %struct.cfg80211_beacon_registration*, %struct.cfg80211_beacon_registration** %tmp1, align 8
  store %struct.cfg80211_beacon_registration* %7, %struct.cfg80211_beacon_registration** %reg, align 8
  %8 = load %struct.cfg80211_beacon_registration*, %struct.cfg80211_beacon_registration** %reg, align 8
  %list = getelementptr inbounds %struct.cfg80211_beacon_registration, %struct.cfg80211_beacon_registration* %8, i32 0, i32 0
  %next3 = getelementptr inbounds %struct.list_head, %struct.list_head* %list, i32 0, i32 0
  %9 = load %struct.list_head*, %struct.list_head** %next3, align 8
  store %struct.list_head* %9, %struct.list_head** %__mptr2, align 8
  %10 = load %struct.list_head*, %struct.list_head** %__mptr2, align 8
  %11 = bitcast %struct.list_head* %10 to i8*
  %add.ptr5 = getelementptr inbounds i8, i8* %11, i64 0
  %12 = bitcast i8* %add.ptr5 to %struct.cfg80211_beacon_registration*
  store %struct.cfg80211_beacon_registration* %12, %struct.cfg80211_beacon_registration** %tmp4, align 8
  %13 = load %struct.cfg80211_beacon_registration*, %struct.cfg80211_beacon_registration** %tmp4, align 8
  store %struct.cfg80211_beacon_registration* %13, %struct.cfg80211_beacon_registration** %treg, align 8
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %14 = load %struct.cfg80211_beacon_registration*, %struct.cfg80211_beacon_registration** %reg, align 8
  %list6 = getelementptr inbounds %struct.cfg80211_beacon_registration, %struct.cfg80211_beacon_registration* %14, i32 0, i32 0
  %15 = load %struct.cfg80211_registered_device*, %struct.cfg80211_registered_device** %rdev.addr, align 8
  %beacon_registrations7 = getelementptr inbounds %struct.cfg80211_registered_device, %struct.cfg80211_registered_device* %15, i32 0, i32 13
  %cmp = icmp ne %struct.list_head* %list6, %beacon_registrations7
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %16 = load %struct.cfg80211_beacon_registration*, %struct.cfg80211_beacon_registration** %reg, align 8
  %list8 = getelementptr inbounds %struct.cfg80211_beacon_registration, %struct.cfg80211_beacon_registration* %16, i32 0, i32 0
  call void @list_del(%struct.list_head* %list8)
  %17 = load %struct.cfg80211_beacon_registration*, %struct.cfg80211_beacon_registration** %reg, align 8
  %18 = bitcast %struct.cfg80211_beacon_registration* %17 to i8*
  call void @kfree(i8* %18)
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %19 = load %struct.cfg80211_beacon_registration*, %struct.cfg80211_beacon_registration** %treg, align 8
  store %struct.cfg80211_beacon_registration* %19, %struct.cfg80211_beacon_registration** %reg, align 8
  %20 = load %struct.cfg80211_beacon_registration*, %struct.cfg80211_beacon_registration** %treg, align 8
  %list10 = getelementptr inbounds %struct.cfg80211_beacon_registration, %struct.cfg80211_beacon_registration* %20, i32 0, i32 0
  %next11 = getelementptr inbounds %struct.list_head, %struct.list_head* %list10, i32 0, i32 0
  %21 = load %struct.list_head*, %struct.list_head** %next11, align 8
  store %struct.list_head* %21, %struct.list_head** %__mptr9, align 8
  %22 = load %struct.list_head*, %struct.list_head** %__mptr9, align 8
  %23 = bitcast %struct.list_head* %22 to i8*
  %add.ptr13 = getelementptr inbounds i8, i8* %23, i64 0
  %24 = bitcast i8* %add.ptr13 to %struct.cfg80211_beacon_registration*
  store %struct.cfg80211_beacon_registration* %24, %struct.cfg80211_beacon_registration** %tmp12, align 8
  %25 = load %struct.cfg80211_beacon_registration*, %struct.cfg80211_beacon_registration** %tmp12, align 8
  store %struct.cfg80211_beacon_registration* %25, %struct.cfg80211_beacon_registration** %treg, align 8
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %26 = load %struct.cfg80211_registered_device*, %struct.cfg80211_registered_device** %rdev.addr, align 8
  %bss_list = getelementptr inbounds %struct.cfg80211_registered_device, %struct.cfg80211_registered_device* %26, i32 0, i32 21
  %next15 = getelementptr inbounds %struct.list_head, %struct.list_head* %bss_list, i32 0, i32 0
  %27 = load %struct.list_head*, %struct.list_head** %next15, align 8
  store %struct.list_head* %27, %struct.list_head** %__mptr14, align 8
  %28 = load %struct.list_head*, %struct.list_head** %__mptr14, align 8
  %29 = bitcast %struct.list_head* %28 to i8*
  %add.ptr17 = getelementptr inbounds i8, i8* %29, i64 0
  %30 = bitcast i8* %add.ptr17 to %struct.cfg80211_internal_bss*
  store %struct.cfg80211_internal_bss* %30, %struct.cfg80211_internal_bss** %tmp16, align 8
  %31 = load %struct.cfg80211_internal_bss*, %struct.cfg80211_internal_bss** %tmp16, align 8
  store %struct.cfg80211_internal_bss* %31, %struct.cfg80211_internal_bss** %scan, align 8
  %32 = load %struct.cfg80211_internal_bss*, %struct.cfg80211_internal_bss** %scan, align 8
  %list19 = getelementptr inbounds %struct.cfg80211_internal_bss, %struct.cfg80211_internal_bss* %32, i32 0, i32 0
  %next20 = getelementptr inbounds %struct.list_head, %struct.list_head* %list19, i32 0, i32 0
  %33 = load %struct.list_head*, %struct.list_head** %next20, align 8
  store %struct.list_head* %33, %struct.list_head** %__mptr18, align 8
  %34 = load %struct.list_head*, %struct.list_head** %__mptr18, align 8
  %35 = bitcast %struct.list_head* %34 to i8*
  %add.ptr22 = getelementptr inbounds i8, i8* %35, i64 0
  %36 = bitcast i8* %add.ptr22 to %struct.cfg80211_internal_bss*
  store %struct.cfg80211_internal_bss* %36, %struct.cfg80211_internal_bss** %tmp21, align 8
  %37 = load %struct.cfg80211_internal_bss*, %struct.cfg80211_internal_bss** %tmp21, align 8
  store %struct.cfg80211_internal_bss* %37, %struct.cfg80211_internal_bss** %tmp, align 8
  br label %for.cond23

for.cond23:                                       ; preds = %for.inc28, %for.end
  %38 = load %struct.cfg80211_internal_bss*, %struct.cfg80211_internal_bss** %scan, align 8
  %list24 = getelementptr inbounds %struct.cfg80211_internal_bss, %struct.cfg80211_internal_bss* %38, i32 0, i32 0
  %39 = load %struct.cfg80211_registered_device*, %struct.cfg80211_registered_device** %rdev.addr, align 8
  %bss_list25 = getelementptr inbounds %struct.cfg80211_registered_device, %struct.cfg80211_registered_device* %39, i32 0, i32 21
  %cmp26 = icmp ne %struct.list_head* %list24, %bss_list25
  br i1 %cmp26, label %for.body27, label %for.end34

for.body27:                                       ; preds = %for.cond23
  %40 = load %struct.cfg80211_registered_device*, %struct.cfg80211_registered_device** %rdev.addr, align 8
  %wiphy = getelementptr inbounds %struct.cfg80211_registered_device, %struct.cfg80211_registered_device* %40, i32 0, i32 42
  %41 = load %struct.cfg80211_internal_bss*, %struct.cfg80211_internal_bss** %scan, align 8
  %pub = getelementptr inbounds %struct.cfg80211_internal_bss, %struct.cfg80211_internal_bss* %41, i32 0, i32 9
  call void @cfg80211_put_bss(%struct.wiphy* %wiphy, %struct.cfg80211_bss* %pub)
  br label %for.inc28

for.inc28:                                        ; preds = %for.body27
  %42 = load %struct.cfg80211_internal_bss*, %struct.cfg80211_internal_bss** %tmp, align 8
  store %struct.cfg80211_internal_bss* %42, %struct.cfg80211_internal_bss** %scan, align 8
  %43 = load %struct.cfg80211_internal_bss*, %struct.cfg80211_internal_bss** %tmp, align 8
  %list30 = getelementptr inbounds %struct.cfg80211_internal_bss, %struct.cfg80211_internal_bss* %43, i32 0, i32 0
  %next31 = getelementptr inbounds %struct.list_head, %struct.list_head* %list30, i32 0, i32 0
  %44 = load %struct.list_head*, %struct.list_head** %next31, align 8
  store %struct.list_head* %44, %struct.list_head** %__mptr29, align 8
  %45 = load %struct.list_head*, %struct.list_head** %__mptr29, align 8
  %46 = bitcast %struct.list_head* %45 to i8*
  %add.ptr33 = getelementptr inbounds i8, i8* %46, i64 0
  %47 = bitcast i8* %add.ptr33 to %struct.cfg80211_internal_bss*
  store %struct.cfg80211_internal_bss* %47, %struct.cfg80211_internal_bss** %tmp32, align 8
  %48 = load %struct.cfg80211_internal_bss*, %struct.cfg80211_internal_bss** %tmp32, align 8
  store %struct.cfg80211_internal_bss* %48, %struct.cfg80211_internal_bss** %tmp, align 8
  br label %for.cond23

for.end34:                                        ; preds = %for.cond23
  %49 = load %struct.cfg80211_registered_device*, %struct.cfg80211_registered_device** %rdev.addr, align 8
  %50 = bitcast %struct.cfg80211_registered_device* %49 to i8*
  call void @kfree(i8* %50)
  ret void
}

declare void @cfg80211_put_bss(%struct.wiphy*, %struct.cfg80211_bss*) #1

; Function Attrs: noinline nounwind optnone uwtable
define void @wiphy_free(%struct.wiphy* %wiphy) #0 {
entry:
  %wiphy.addr = alloca %struct.wiphy*, align 8
  store %struct.wiphy* %wiphy, %struct.wiphy** %wiphy.addr, align 8
  %0 = load %struct.wiphy*, %struct.wiphy** %wiphy.addr, align 8
  %dev = getelementptr inbounds %struct.wiphy, %struct.wiphy* %0, i32 0, i32 50
  call void @put_device(%struct.device* %dev)
  ret void
}

declare void @put_device(%struct.device*) #1

; Function Attrs: noinline nounwind optnone uwtable
define void @wiphy_rfkill_set_hw_state(%struct.wiphy* %wiphy, i1 zeroext %blocked) #0 {
entry:
  %wiphy.addr = alloca %struct.wiphy*, align 8
  %blocked.addr = alloca i8, align 1
  %rdev = alloca %struct.cfg80211_registered_device*, align 8
  store %struct.wiphy* %wiphy, %struct.wiphy** %wiphy.addr, align 8
  %frombool = zext i1 %blocked to i8
  store i8 %frombool, i8* %blocked.addr, align 1
  %0 = load %struct.wiphy*, %struct.wiphy** %wiphy.addr, align 8
  %call = call %struct.cfg80211_registered_device* @wiphy_to_rdev(%struct.wiphy* %0)
  store %struct.cfg80211_registered_device* %call, %struct.cfg80211_registered_device** %rdev, align 8
  %1 = load %struct.cfg80211_registered_device*, %struct.cfg80211_registered_device** %rdev, align 8
  %rfkill = getelementptr inbounds %struct.cfg80211_registered_device, %struct.cfg80211_registered_device* %1, i32 0, i32 3
  %2 = load %struct.rfkill*, %struct.rfkill** %rfkill, align 16
  %3 = load i8, i8* %blocked.addr, align 1
  %tobool = trunc i8 %3 to i1
  %call1 = call zeroext i1 @rfkill_set_hw_state(%struct.rfkill* %2, i1 zeroext %tobool)
  br i1 %call1, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %4 = load %struct.cfg80211_registered_device*, %struct.cfg80211_registered_device** %rdev, align 8
  %rfkill_sync = getelementptr inbounds %struct.cfg80211_registered_device, %struct.cfg80211_registered_device* %4, i32 0, i32 4
  %call2 = call zeroext i1 @schedule_work(%struct.work_struct* %rfkill_sync)
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  ret void
}

declare zeroext i1 @rfkill_set_hw_state(%struct.rfkill*, i1 zeroext) #1

; Function Attrs: noinline nounwind optnone uwtable
define internal zeroext i1 @schedule_work(%struct.work_struct* %work) #0 {
entry:
  %work.addr = alloca %struct.work_struct*, align 8
  store %struct.work_struct* %work, %struct.work_struct** %work.addr, align 8
  %0 = load %struct.workqueue_struct*, %struct.workqueue_struct** @system_wq, align 8
  %1 = load %struct.work_struct*, %struct.work_struct** %work.addr, align 8
  %call = call zeroext i1 @queue_work(%struct.workqueue_struct* %0, %struct.work_struct* %1)
  ret i1 %call
}

; Function Attrs: noinline nounwind optnone uwtable
define void @cfg80211_unregister_wdev(%struct.wireless_dev* %wdev) #0 {
entry:
  %wdev.addr = alloca %struct.wireless_dev*, align 8
  %rdev = alloca %struct.cfg80211_registered_device*, align 8
  %__ret_warn_on = alloca i32, align 4
  %tmp = alloca i64, align 8
  %__ret_warn_once = alloca i32, align 4
  %__ret_warn_on41 = alloca i32, align 4
  %tmp51 = alloca i64, align 8
  %tmp59 = alloca i64, align 8
  store %struct.wireless_dev* %wdev, %struct.wireless_dev** %wdev.addr, align 8
  %0 = load %struct.wireless_dev*, %struct.wireless_dev** %wdev.addr, align 8
  %wiphy = getelementptr inbounds %struct.wireless_dev, %struct.wireless_dev* %0, i32 0, i32 0
  %1 = load %struct.wiphy*, %struct.wiphy** %wiphy, align 8
  %call = call %struct.cfg80211_registered_device* @wiphy_to_rdev(%struct.wiphy* %1)
  store %struct.cfg80211_registered_device* %call, %struct.cfg80211_registered_device** %rdev, align 8
  br label %do.body

do.body:                                          ; preds = %entry
  %call1 = call i32 @rtnl_is_locked()
  %tobool = icmp ne i32 %call1, 0
  %lnot = xor i1 %tobool, true
  %lnot2 = xor i1 %lnot, true
  %lnot3 = xor i1 %lnot2, true
  %lnot.ext = zext i1 %lnot3 to i32
  %conv = sext i32 %lnot.ext to i64
  %tobool4 = icmp ne i64 %conv, 0
  br i1 %tobool4, label %if.then, label %if.end

if.then:                                          ; preds = %do.body
  %call5 = call i32 (i8*, ...) @printk(i8* getelementptr inbounds ([37 x i8], [37 x i8]* @.str, i32 0, i32 0), i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.1, i32 0, i32 0), i32 961)
  call void @dump_stack()
  br label %if.end

if.end:                                           ; preds = %if.then, %do.body
  br label %do.end

do.end:                                           ; preds = %if.end
  %2 = load %struct.wireless_dev*, %struct.wireless_dev** %wdev.addr, align 8
  %netdev = getelementptr inbounds %struct.wireless_dev, %struct.wireless_dev* %2, i32 0, i32 3
  %3 = load %struct.net_device*, %struct.net_device** %netdev, align 8
  %tobool6 = icmp ne %struct.net_device* %3, null
  %lnot7 = xor i1 %tobool6, true
  %lnot9 = xor i1 %lnot7, true
  %lnot.ext10 = zext i1 %lnot9 to i32
  store i32 %lnot.ext10, i32* %__ret_warn_on, align 4
  %4 = load i32, i32* %__ret_warn_on, align 4
  %tobool11 = icmp ne i32 %4, 0
  %lnot12 = xor i1 %tobool11, true
  %lnot14 = xor i1 %lnot12, true
  %lnot.ext15 = zext i1 %lnot14 to i32
  %conv16 = sext i32 %lnot.ext15 to i64
  %tobool17 = icmp ne i64 %conv16, 0
  br i1 %tobool17, label %if.then18, label %if.end19

if.then18:                                        ; preds = %do.end
  call void @warn_slowpath_null(i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.1, i32 0, i32 0), i32 963)
  br label %if.end19

if.end19:                                         ; preds = %if.then18, %do.end
  %5 = load i32, i32* %__ret_warn_on, align 4
  %tobool20 = icmp ne i32 %5, 0
  %lnot21 = xor i1 %tobool20, true
  %lnot23 = xor i1 %lnot21, true
  %lnot.ext24 = zext i1 %lnot23 to i32
  %conv25 = sext i32 %lnot.ext24 to i64
  store i64 %conv25, i64* %tmp, align 8
  %6 = load i64, i64* %tmp, align 8
  %tobool26 = icmp ne i64 %6, 0
  br i1 %tobool26, label %if.then27, label %if.end28

if.then27:                                        ; preds = %if.end19
  br label %sw.epilog

if.end28:                                         ; preds = %if.end19
  %7 = load %struct.cfg80211_registered_device*, %struct.cfg80211_registered_device** %rdev, align 8
  %8 = load %struct.wireless_dev*, %struct.wireless_dev** %wdev.addr, align 8
  call void @nl80211_notify_iface(%struct.cfg80211_registered_device* %7, %struct.wireless_dev* %8, i32 8)
  %9 = load %struct.wireless_dev*, %struct.wireless_dev** %wdev.addr, align 8
  %list = getelementptr inbounds %struct.wireless_dev, %struct.wireless_dev* %9, i32 0, i32 2
  call void @list_del_rcu(%struct.list_head* %list)
  %10 = load %struct.cfg80211_registered_device*, %struct.cfg80211_registered_device** %rdev, align 8
  %devlist_generation = getelementptr inbounds %struct.cfg80211_registered_device, %struct.cfg80211_registered_device* %10, i32 0, i32 9
  %11 = load i32, i32* %devlist_generation, align 16
  %inc = add nsw i32 %11, 1
  store i32 %inc, i32* %devlist_generation, align 16
  %12 = load %struct.wireless_dev*, %struct.wireless_dev** %wdev.addr, align 8
  %iftype = getelementptr inbounds %struct.wireless_dev, %struct.wireless_dev* %12, i32 0, i32 1
  %13 = load i32, i32* %iftype, align 8
  br label %NodeBlock

NodeBlock:                                        ; preds = %if.end28
  %Pivot = icmp slt i32 %13, 12
  br i1 %Pivot, label %LeafBlock, label %LeafBlock1

LeafBlock1:                                       ; preds = %NodeBlock
  %SwitchLeaf2 = icmp eq i32 %13, 12
  br i1 %SwitchLeaf2, label %sw.bb29, label %NewDefault

LeafBlock:                                        ; preds = %NodeBlock
  %SwitchLeaf = icmp eq i32 %13, 10
  br i1 %SwitchLeaf, label %sw.bb, label %NewDefault

sw.bb:                                            ; preds = %LeafBlock
  %14 = load %struct.wireless_dev*, %struct.wireless_dev** %wdev.addr, align 8
  call void @cfg80211_mlme_purge_registrations(%struct.wireless_dev* %14)
  %15 = load %struct.cfg80211_registered_device*, %struct.cfg80211_registered_device** %rdev, align 8
  %16 = load %struct.wireless_dev*, %struct.wireless_dev** %wdev.addr, align 8
  call void @cfg80211_stop_p2p_device(%struct.cfg80211_registered_device* %15, %struct.wireless_dev* %16)
  br label %sw.epilog

sw.bb29:                                          ; preds = %LeafBlock1
  %17 = load %struct.cfg80211_registered_device*, %struct.cfg80211_registered_device** %rdev, align 8
  %18 = load %struct.wireless_dev*, %struct.wireless_dev** %wdev.addr, align 8
  call void @cfg80211_stop_nan(%struct.cfg80211_registered_device* %17, %struct.wireless_dev* %18)
  br label %sw.epilog

NewDefault:                                       ; preds = %LeafBlock1, %LeafBlock
  br label %sw.default

sw.default:                                       ; preds = %NewDefault
  store i32 1, i32* %__ret_warn_once, align 4
  %19 = load i32, i32* %__ret_warn_once, align 4
  %tobool30 = icmp ne i32 %19, 0
  br i1 %tobool30, label %land.rhs, label %land.end

land.rhs:                                         ; preds = %sw.default
  %20 = load i8, i8* @cfg80211_unregister_wdev.__warned, align 1
  %tobool31 = trunc i8 %20 to i1
  %lnot32 = xor i1 %tobool31, true
  br label %land.end

land.end:                                         ; preds = %land.rhs, %sw.default
  %21 = phi i1 [ false, %sw.default ], [ %lnot32, %land.rhs ]
  %lnot34 = xor i1 %21, true
  %lnot36 = xor i1 %lnot34, true
  %lnot.ext37 = zext i1 %lnot36 to i32
  %conv38 = sext i32 %lnot.ext37 to i64
  %tobool39 = icmp ne i64 %conv38, 0
  br i1 %tobool39, label %if.then40, label %if.end58

if.then40:                                        ; preds = %land.end
  store i8 1, i8* @cfg80211_unregister_wdev.__warned, align 1
  store i32 1, i32* %__ret_warn_on41, align 4
  %22 = load i32, i32* %__ret_warn_on41, align 4
  %tobool42 = icmp ne i32 %22, 0
  %lnot43 = xor i1 %tobool42, true
  %lnot45 = xor i1 %lnot43, true
  %lnot.ext46 = zext i1 %lnot45 to i32
  %conv47 = sext i32 %lnot.ext46 to i64
  %tobool48 = icmp ne i64 %conv47, 0
  br i1 %tobool48, label %if.then49, label %if.end50

if.then49:                                        ; preds = %if.then40
  call void @warn_slowpath_null(i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.1, i32 0, i32 0), i32 980)
  br label %if.end50

if.end50:                                         ; preds = %if.then49, %if.then40
  %23 = load i32, i32* %__ret_warn_on41, align 4
  %tobool52 = icmp ne i32 %23, 0
  %lnot53 = xor i1 %tobool52, true
  %lnot55 = xor i1 %lnot53, true
  %lnot.ext56 = zext i1 %lnot55 to i32
  %conv57 = sext i32 %lnot.ext56 to i64
  store i64 %conv57, i64* %tmp51, align 8
  %24 = load i64, i64* %tmp51, align 8
  br label %if.end58

if.end58:                                         ; preds = %if.end50, %land.end
  %25 = load i32, i32* %__ret_warn_once, align 4
  %tobool60 = icmp ne i32 %25, 0
  %lnot61 = xor i1 %tobool60, true
  %lnot63 = xor i1 %lnot61, true
  %lnot.ext64 = zext i1 %lnot63 to i32
  %conv65 = sext i32 %lnot.ext64 to i64
  store i64 %conv65, i64* %tmp59, align 8
  %26 = load i64, i64* %tmp59, align 8
  br label %sw.epilog

sw.epilog:                                        ; preds = %if.end58, %sw.bb29, %sw.bb, %if.then27
  ret void
}

declare void @nl80211_notify_iface(%struct.cfg80211_registered_device*, %struct.wireless_dev*, i32) #1

declare void @cfg80211_mlme_purge_registrations(%struct.wireless_dev*) #1

; Function Attrs: noinline nounwind optnone uwtable
define void @cfg80211_update_iface_num(%struct.cfg80211_registered_device* %rdev, i32 %iftype, i32 %num) #0 {
entry:
  %rdev.addr = alloca %struct.cfg80211_registered_device*, align 8
  %iftype.addr = alloca i32, align 4
  %num.addr = alloca i32, align 4
  store %struct.cfg80211_registered_device* %rdev, %struct.cfg80211_registered_device** %rdev.addr, align 8
  store i32 %iftype, i32* %iftype.addr, align 4
  store i32 %num, i32* %num.addr, align 4
  br label %do.body

do.body:                                          ; preds = %entry
  %call = call i32 @rtnl_is_locked()
  %tobool = icmp ne i32 %call, 0
  %lnot = xor i1 %tobool, true
  %lnot1 = xor i1 %lnot, true
  %lnot2 = xor i1 %lnot1, true
  %lnot.ext = zext i1 %lnot2 to i32
  %conv = sext i32 %lnot.ext to i64
  %tobool3 = icmp ne i64 %conv, 0
  br i1 %tobool3, label %if.then, label %if.end

if.then:                                          ; preds = %do.body
  %call4 = call i32 (i8*, ...) @printk(i8* getelementptr inbounds ([37 x i8], [37 x i8]* @.str, i32 0, i32 0), i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.1, i32 0, i32 0), i32 993)
  call void @dump_stack()
  br label %if.end

if.end:                                           ; preds = %if.then, %do.body
  br label %do.end

do.end:                                           ; preds = %if.end
  %0 = load i32, i32* %num.addr, align 4
  %1 = load %struct.cfg80211_registered_device*, %struct.cfg80211_registered_device** %rdev.addr, align 8
  %num_running_ifaces = getelementptr inbounds %struct.cfg80211_registered_device, %struct.cfg80211_registered_device* %1, i32 0, i32 18
  %2 = load i32, i32* %num_running_ifaces, align 8
  %add = add nsw i32 %2, %0
  store i32 %add, i32* %num_running_ifaces, align 8
  %3 = load i32, i32* %iftype.addr, align 4
  %cmp = icmp eq i32 %3, 6
  br i1 %cmp, label %if.then6, label %if.end8

if.then6:                                         ; preds = %do.end
  %4 = load i32, i32* %num.addr, align 4
  %5 = load %struct.cfg80211_registered_device*, %struct.cfg80211_registered_device** %rdev.addr, align 8
  %num_running_monitor_ifaces = getelementptr inbounds %struct.cfg80211_registered_device, %struct.cfg80211_registered_device* %5, i32 0, i32 19
  %6 = load i32, i32* %num_running_monitor_ifaces, align 4
  %add7 = add nsw i32 %6, %4
  store i32 %add7, i32* %num_running_monitor_ifaces, align 4
  br label %if.end8

if.end8:                                          ; preds = %if.then6, %do.end
  ret void
}

; Function Attrs: noinline nounwind optnone uwtable
define void @__cfg80211_leave(%struct.cfg80211_registered_device* %rdev, %struct.wireless_dev* %wdev) #0 {
entry:
  %rdev.addr = alloca %struct.cfg80211_registered_device*, align 8
  %wdev.addr = alloca %struct.wireless_dev*, align 8
  %dev = alloca %struct.net_device*, align 8
  %sched_scan_req = alloca %struct.cfg80211_sched_scan_request*, align 8
  %tmp = alloca %struct.cfg80211_sched_scan_request*, align 8
  store %struct.cfg80211_registered_device* %rdev, %struct.cfg80211_registered_device** %rdev.addr, align 8
  store %struct.wireless_dev* %wdev, %struct.wireless_dev** %wdev.addr, align 8
  %0 = load %struct.wireless_dev*, %struct.wireless_dev** %wdev.addr, align 8
  %netdev = getelementptr inbounds %struct.wireless_dev, %struct.wireless_dev* %0, i32 0, i32 3
  %1 = load %struct.net_device*, %struct.net_device** %netdev, align 8
  store %struct.net_device* %1, %struct.net_device** %dev, align 8
  br label %do.body

do.body:                                          ; preds = %entry
  %call = call i32 @rtnl_is_locked()
  %tobool = icmp ne i32 %call, 0
  %lnot = xor i1 %tobool, true
  %lnot1 = xor i1 %lnot, true
  %lnot2 = xor i1 %lnot1, true
  %lnot.ext = zext i1 %lnot2 to i32
  %conv = sext i32 %lnot.ext to i64
  %tobool3 = icmp ne i64 %conv, 0
  br i1 %tobool3, label %if.then, label %if.end

if.then:                                          ; preds = %do.body
  %call4 = call i32 (i8*, ...) @printk(i8* getelementptr inbounds ([37 x i8], [37 x i8]* @.str, i32 0, i32 0), i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.1, i32 0, i32 0), i32 1006)
  call void @dump_stack()
  br label %if.end

if.end:                                           ; preds = %if.then, %do.body
  br label %do.end

do.end:                                           ; preds = %if.end
  br label %do.body5

do.body5:                                         ; preds = %do.end
  %2 = load %struct.wireless_dev*, %struct.wireless_dev** %wdev.addr, align 8
  %mtx = getelementptr inbounds %struct.wireless_dev, %struct.wireless_dev* %2, i32 0, i32 7
  br label %do.end6

do.end6:                                          ; preds = %do.body5
  %3 = load %struct.wireless_dev*, %struct.wireless_dev** %wdev.addr, align 8
  %iftype = getelementptr inbounds %struct.wireless_dev, %struct.wireless_dev* %3, i32 0, i32 1
  %4 = load i32, i32* %iftype, align 8
  br label %NodeBlock25

NodeBlock25:                                      ; preds = %do.end6
  %Pivot26 = icmp slt i32 %4, 7
  br i1 %Pivot26, label %NodeBlock9, label %NodeBlock23

NodeBlock23:                                      ; preds = %NodeBlock25
  %Pivot24 = icmp slt i32 %4, 10
  br i1 %Pivot24, label %NodeBlock13, label %NodeBlock21

NodeBlock21:                                      ; preds = %NodeBlock23
  %Pivot22 = icmp slt i32 %4, 12
  br i1 %Pivot22, label %NodeBlock15, label %NodeBlock19

NodeBlock19:                                      ; preds = %NodeBlock21
  %Pivot20 = icmp slt i32 %4, 13
  br i1 %Pivot20, label %sw.bb26, label %LeafBlock17

LeafBlock17:                                      ; preds = %NodeBlock19
  %SwitchLeaf18 = icmp eq i32 %4, 13
  br i1 %SwitchLeaf18, label %sw.bb28, label %NewDefault

NodeBlock15:                                      ; preds = %NodeBlock21
  %Pivot16 = icmp slt i32 %4, 11
  br i1 %Pivot16, label %sw.bb26, label %sw.bb23

NodeBlock13:                                      ; preds = %NodeBlock23
  %Pivot14 = icmp slt i32 %4, 8
  br i1 %Pivot14, label %sw.bb19, label %NodeBlock11

NodeBlock11:                                      ; preds = %NodeBlock13
  %Pivot12 = icmp slt i32 %4, 9
  br i1 %Pivot12, label %sw.bb8, label %sw.bb21

NodeBlock9:                                       ; preds = %NodeBlock25
  %Pivot10 = icmp slt i32 %4, 3
  br i1 %Pivot10, label %NodeBlock1, label %NodeBlock7

NodeBlock7:                                       ; preds = %NodeBlock9
  %Pivot8 = icmp slt i32 %4, 5
  br i1 %Pivot8, label %NodeBlock3, label %NodeBlock5

NodeBlock5:                                       ; preds = %NodeBlock7
  %Pivot6 = icmp slt i32 %4, 6
  br i1 %Pivot6, label %sw.bb25, label %sw.bb27

NodeBlock3:                                       ; preds = %NodeBlock7
  %Pivot4 = icmp slt i32 %4, 4
  br i1 %Pivot4, label %sw.bb21, label %sw.bb27

NodeBlock1:                                       ; preds = %NodeBlock9
  %Pivot2 = icmp slt i32 %4, 1
  br i1 %Pivot2, label %LeafBlock, label %NodeBlock

NodeBlock:                                        ; preds = %NodeBlock1
  %Pivot = icmp slt i32 %4, 2
  br i1 %Pivot, label %sw.bb, label %sw.bb8

LeafBlock:                                        ; preds = %NodeBlock1
  %SwitchLeaf = icmp eq i32 %4, 0
  br i1 %SwitchLeaf, label %sw.bb28, label %NewDefault

sw.bb:                                            ; preds = %NodeBlock
  %5 = load %struct.cfg80211_registered_device*, %struct.cfg80211_registered_device** %rdev.addr, align 8
  %6 = load %struct.net_device*, %struct.net_device** %dev, align 8
  %call7 = call i32 @__cfg80211_leave_ibss(%struct.cfg80211_registered_device* %5, %struct.net_device* %6, i1 zeroext true)
  br label %sw.epilog

sw.bb8:                                           ; preds = %NodeBlock11, %NodeBlock
  br label %do.body9

do.body9:                                         ; preds = %sw.bb8
  br label %do.end10

do.end10:                                         ; preds = %do.body9
  %7 = load %struct.cfg80211_registered_device*, %struct.cfg80211_registered_device** %rdev.addr, align 8
  %sched_scan_req11 = getelementptr inbounds %struct.cfg80211_registered_device, %struct.cfg80211_registered_device* %7, i32 0, i32 27
  %8 = load %struct.cfg80211_sched_scan_request*, %struct.cfg80211_sched_scan_request** %sched_scan_req11, align 8
  store %struct.cfg80211_sched_scan_request* %8, %struct.cfg80211_sched_scan_request** %tmp, align 8
  %9 = load %struct.cfg80211_sched_scan_request*, %struct.cfg80211_sched_scan_request** %tmp, align 8
  store %struct.cfg80211_sched_scan_request* %9, %struct.cfg80211_sched_scan_request** %sched_scan_req, align 8
  %10 = load %struct.cfg80211_sched_scan_request*, %struct.cfg80211_sched_scan_request** %sched_scan_req, align 8
  %tobool12 = icmp ne %struct.cfg80211_sched_scan_request* %10, null
  br i1 %tobool12, label %land.lhs.true, label %if.end17

land.lhs.true:                                    ; preds = %do.end10
  %11 = load %struct.net_device*, %struct.net_device** %dev, align 8
  %12 = load %struct.cfg80211_sched_scan_request*, %struct.cfg80211_sched_scan_request** %sched_scan_req, align 8
  %dev13 = getelementptr inbounds %struct.cfg80211_sched_scan_request, %struct.cfg80211_sched_scan_request* %12, i32 0, i32 19
  %13 = load %struct.net_device*, %struct.net_device** %dev13, align 8
  %cmp = icmp eq %struct.net_device* %11, %13
  br i1 %cmp, label %if.then15, label %if.end17

if.then15:                                        ; preds = %land.lhs.true
  %14 = load %struct.cfg80211_registered_device*, %struct.cfg80211_registered_device** %rdev.addr, align 8
  %call16 = call i32 @__cfg80211_stop_sched_scan(%struct.cfg80211_registered_device* %14, i1 zeroext false)
  br label %if.end17

if.end17:                                         ; preds = %if.then15, %land.lhs.true, %do.end10
  %15 = load %struct.cfg80211_registered_device*, %struct.cfg80211_registered_device** %rdev.addr, align 8
  %16 = load %struct.net_device*, %struct.net_device** %dev, align 8
  %call18 = call i32 @cfg80211_disconnect(%struct.cfg80211_registered_device* %15, %struct.net_device* %16, i16 zeroext 3, i1 zeroext true)
  br label %sw.epilog

sw.bb19:                                          ; preds = %NodeBlock13
  %17 = load %struct.cfg80211_registered_device*, %struct.cfg80211_registered_device** %rdev.addr, align 8
  %18 = load %struct.net_device*, %struct.net_device** %dev, align 8
  %call20 = call i32 @__cfg80211_leave_mesh(%struct.cfg80211_registered_device* %17, %struct.net_device* %18)
  br label %sw.epilog

sw.bb21:                                          ; preds = %NodeBlock11, %NodeBlock3
  %19 = load %struct.cfg80211_registered_device*, %struct.cfg80211_registered_device** %rdev.addr, align 8
  %20 = load %struct.net_device*, %struct.net_device** %dev, align 8
  %call22 = call i32 @__cfg80211_stop_ap(%struct.cfg80211_registered_device* %19, %struct.net_device* %20, i1 zeroext true)
  br label %sw.epilog

sw.bb23:                                          ; preds = %NodeBlock15
  %21 = load %struct.cfg80211_registered_device*, %struct.cfg80211_registered_device** %rdev.addr, align 8
  %22 = load %struct.net_device*, %struct.net_device** %dev, align 8
  %call24 = call i32 @__cfg80211_leave_ocb(%struct.cfg80211_registered_device* %21, %struct.net_device* %22)
  br label %sw.epilog

sw.bb25:                                          ; preds = %NodeBlock5
  br label %sw.epilog

sw.bb26:                                          ; preds = %NodeBlock19, %NodeBlock15
  br label %sw.epilog

sw.bb27:                                          ; preds = %NodeBlock5, %NodeBlock3
  br label %sw.epilog

sw.bb28:                                          ; preds = %LeafBlock17, %LeafBlock
  br label %sw.epilog

NewDefault:                                       ; preds = %LeafBlock17, %LeafBlock
  br label %sw.epilog

sw.epilog:                                        ; preds = %NewDefault, %sw.bb28, %sw.bb27, %sw.bb26, %sw.bb25, %sw.bb23, %sw.bb21, %sw.bb19, %if.end17, %sw.bb
  ret void
}

declare i32 @__cfg80211_leave_ibss(%struct.cfg80211_registered_device*, %struct.net_device*, i1 zeroext) #1

declare i32 @__cfg80211_stop_sched_scan(%struct.cfg80211_registered_device*, i1 zeroext) #1

declare i32 @cfg80211_disconnect(%struct.cfg80211_registered_device*, %struct.net_device*, i16 zeroext, i1 zeroext) #1

declare i32 @__cfg80211_leave_mesh(%struct.cfg80211_registered_device*, %struct.net_device*) #1

declare i32 @__cfg80211_stop_ap(%struct.cfg80211_registered_device*, %struct.net_device*, i1 zeroext) #1

declare i32 @__cfg80211_leave_ocb(%struct.cfg80211_registered_device*, %struct.net_device*) #1

; Function Attrs: noinline nounwind optnone uwtable
define void @cfg80211_leave(%struct.cfg80211_registered_device* %rdev, %struct.wireless_dev* %wdev) #0 {
entry:
  %rdev.addr = alloca %struct.cfg80211_registered_device*, align 8
  %wdev.addr = alloca %struct.wireless_dev*, align 8
  store %struct.cfg80211_registered_device* %rdev, %struct.cfg80211_registered_device** %rdev.addr, align 8
  store %struct.wireless_dev* %wdev, %struct.wireless_dev** %wdev.addr, align 8
  %0 = load %struct.wireless_dev*, %struct.wireless_dev** %wdev.addr, align 8
  call void @wdev_lock(%struct.wireless_dev* %0)
  %1 = load %struct.cfg80211_registered_device*, %struct.cfg80211_registered_device** %rdev.addr, align 8
  %2 = load %struct.wireless_dev*, %struct.wireless_dev** %wdev.addr, align 8
  call void @__cfg80211_leave(%struct.cfg80211_registered_device* %1, %struct.wireless_dev* %2)
  %3 = load %struct.wireless_dev*, %struct.wireless_dev** %wdev.addr, align 8
  call void @wdev_unlock(%struct.wireless_dev* %3)
  ret void
}

; Function Attrs: noinline nounwind optnone uwtable
define internal void @wdev_lock(%struct.wireless_dev* %wdev) #0 {
entry:
  %wdev.addr = alloca %struct.wireless_dev*, align 8
  store %struct.wireless_dev* %wdev, %struct.wireless_dev** %wdev.addr, align 8
  %0 = load %struct.wireless_dev*, %struct.wireless_dev** %wdev.addr, align 8
  %mtx = getelementptr inbounds %struct.wireless_dev, %struct.wireless_dev* %0, i32 0, i32 7
  call void @mutex_lock(%struct.mutex* %mtx)
  ret void
}

; Function Attrs: noinline nounwind optnone uwtable
define internal void @wdev_unlock(%struct.wireless_dev* %wdev) #0 {
entry:
  %wdev.addr = alloca %struct.wireless_dev*, align 8
  store %struct.wireless_dev* %wdev, %struct.wireless_dev** %wdev.addr, align 8
  %0 = load %struct.wireless_dev*, %struct.wireless_dev** %wdev.addr, align 8
  %mtx = getelementptr inbounds %struct.wireless_dev, %struct.wireless_dev* %0, i32 0, i32 7
  call void @mutex_unlock(%struct.mutex* %mtx)
  ret void
}

; Function Attrs: noinline nounwind optnone uwtable
define void @cfg80211_stop_iface(%struct.wiphy* %wiphy, %struct.wireless_dev* %wdev, i32 %gfp) #0 {
entry:
  %lock.addr.i8 = alloca %struct.spinlock*, align 8
  %flags.addr.i = alloca i64, align 8
  %__dummy.i = alloca i64, align 8
  %__dummy2.i = alloca i64, align 8
  %tmp.i = alloca i32, align 4
  %lock.addr.i = alloca %struct.spinlock*, align 8
  %wiphy.addr = alloca %struct.wiphy*, align 8
  %wdev.addr = alloca %struct.wireless_dev*, align 8
  %gfp.addr = alloca i32, align 4
  %rdev = alloca %struct.cfg80211_registered_device*, align 8
  %ev = alloca %struct.cfg80211_event*, align 8
  %flags = alloca i64, align 8
  %__dummy = alloca i64, align 8
  %__dummy2 = alloca i64, align 8
  %tmp = alloca i32, align 4
  store %struct.wiphy* %wiphy, %struct.wiphy** %wiphy.addr, align 8
  store %struct.wireless_dev* %wdev, %struct.wireless_dev** %wdev.addr, align 8
  store i32 %gfp, i32* %gfp.addr, align 4
  %0 = load %struct.wiphy*, %struct.wiphy** %wiphy.addr, align 8
  %call = call %struct.cfg80211_registered_device* @wiphy_to_rdev(%struct.wiphy* %0)
  store %struct.cfg80211_registered_device* %call, %struct.cfg80211_registered_device** %rdev, align 8
  %1 = load %struct.wiphy*, %struct.wiphy** %wiphy.addr, align 8
  %2 = load %struct.wireless_dev*, %struct.wireless_dev** %wdev.addr, align 8
  call void @trace_cfg80211_stop_iface(%struct.wiphy* %1, %struct.wireless_dev* %2)
  %3 = load i32, i32* %gfp.addr, align 4
  %call1 = call i8* @kzalloc(i64 80, i32 %3)
  %4 = bitcast i8* %call1 to %struct.cfg80211_event*
  store %struct.cfg80211_event* %4, %struct.cfg80211_event** %ev, align 8
  %5 = load %struct.cfg80211_event*, %struct.cfg80211_event** %ev, align 8
  %tobool = icmp ne %struct.cfg80211_event* %5, null
  br i1 %tobool, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  br label %return

if.end:                                           ; preds = %entry
  %6 = load %struct.cfg80211_event*, %struct.cfg80211_event** %ev, align 8
  %type = getelementptr inbounds %struct.cfg80211_event, %struct.cfg80211_event* %6, i32 0, i32 1
  store i32 4, i32* %type, align 8
  br label %do.body

do.body:                                          ; preds = %if.end
  br label %do.body2

do.body2:                                         ; preds = %do.body
  %cmp = icmp eq i64* %__dummy, %__dummy2
  %conv = zext i1 %cmp to i32
  store i32 1, i32* %tmp, align 4
  %7 = load i32, i32* %tmp, align 4
  %8 = load %struct.wireless_dev*, %struct.wireless_dev** %wdev.addr, align 8
  %event_lock = getelementptr inbounds %struct.wireless_dev, %struct.wireless_dev* %8, i32 0, i32 22
  store %struct.spinlock* %event_lock, %struct.spinlock** %lock.addr.i, align 8
  %9 = load %struct.spinlock*, %struct.spinlock** %lock.addr.i, align 8
  %10 = getelementptr inbounds %struct.spinlock, %struct.spinlock* %9, i32 0, i32 0
  %rlock.i = bitcast %union.anon.1* %10 to %struct.raw_spinlock*
  %call4 = call i64 @_raw_spin_lock_irqsave(%struct.raw_spinlock* %rlock.i)
  store i64 %call4, i64* %flags, align 8
  br label %do.end

do.end:                                           ; preds = %do.body2
  br label %do.end5

do.end5:                                          ; preds = %do.end
  %11 = load %struct.cfg80211_event*, %struct.cfg80211_event** %ev, align 8
  %list = getelementptr inbounds %struct.cfg80211_event, %struct.cfg80211_event* %11, i32 0, i32 0
  %12 = load %struct.wireless_dev*, %struct.wireless_dev** %wdev.addr, align 8
  %event_list = getelementptr inbounds %struct.wireless_dev, %struct.wireless_dev* %12, i32 0, i32 21
  call void @list_add_tail(%struct.list_head* %list, %struct.list_head* %event_list)
  %13 = load %struct.wireless_dev*, %struct.wireless_dev** %wdev.addr, align 8
  %event_lock6 = getelementptr inbounds %struct.wireless_dev, %struct.wireless_dev* %13, i32 0, i32 22
  %14 = load i64, i64* %flags, align 8
  store %struct.spinlock* %event_lock6, %struct.spinlock** %lock.addr.i8, align 8
  store i64 %14, i64* %flags.addr.i, align 8
  store i32 1, i32* %tmp.i, align 4
  %15 = load i32, i32* %tmp.i, align 4
  %16 = load %struct.spinlock*, %struct.spinlock** %lock.addr.i8, align 8
  %17 = getelementptr inbounds %struct.spinlock, %struct.spinlock* %16, i32 0, i32 0
  %rlock.i9 = bitcast %union.anon.1* %17 to %struct.raw_spinlock*
  %18 = load i64, i64* %flags.addr.i, align 8
  call void @_raw_spin_unlock_irqrestore(%struct.raw_spinlock* %rlock.i9, i64 %18) #3
  %19 = load %struct.workqueue_struct*, %struct.workqueue_struct** @cfg80211_wq, align 8
  %20 = load %struct.cfg80211_registered_device*, %struct.cfg80211_registered_device** %rdev, align 8
  %event_work = getelementptr inbounds %struct.cfg80211_registered_device, %struct.cfg80211_registered_device* %20, i32 0, i32 33
  %call7 = call zeroext i1 @queue_work(%struct.workqueue_struct* %19, %struct.work_struct* %event_work)
  br label %return

return:                                           ; preds = %do.end5, %if.then
  ret void
}

; Function Attrs: noinline nounwind optnone uwtable
define internal void @trace_cfg80211_stop_iface(%struct.wiphy* %wiphy, %struct.wireless_dev* %wdev) #0 {
entry:
  %p.addr.i = alloca i8*, align 8
  %res.addr.i = alloca i8*, align 8
  %size.addr.i = alloca i32, align 4
  %retval.i = alloca i1, align 1
  %key.addr.i = alloca %struct.static_key*, align 8
  %wiphy.addr = alloca %struct.wiphy*, align 8
  %wdev.addr = alloca %struct.wireless_dev*, align 8
  %it_func_ptr = alloca %struct.tracepoint_func*, align 8
  %it_func = alloca i8*, align 8
  %__data = alloca i8*, align 8
  %pscr_ret__ = alloca i32, align 4
  %__vpp_verify = alloca i8*, align 8
  %pfo_ret__ = alloca i32, align 4
  %tmp = alloca i32, align 4
  %tmp2 = alloca i32, align 4
  %________p1 = alloca %struct.tracepoint_func*, align 8
  %_________p1 = alloca %struct.tracepoint_func*, align 8
  %__u = alloca %union.anon.99, align 8
  %tmp5 = alloca %struct.tracepoint_func*, align 8
  %___typecheck_p = alloca %struct.tracepoint_func*, align 8
  %tmp8 = alloca %struct.tracepoint_func*, align 8
  %tmp11 = alloca %struct.tracepoint_func*, align 8
  store %struct.wiphy* %wiphy, %struct.wiphy** %wiphy.addr, align 8
  store %struct.wireless_dev* %wdev, %struct.wireless_dev** %wdev.addr, align 8
  store %struct.static_key* getelementptr inbounds (%struct.tracepoint, %struct.tracepoint* @__tracepoint_cfg80211_stop_iface, i32 0, i32 1), %struct.static_key** %key.addr.i, align 8
  %0 = load %struct.static_key*, %struct.static_key** %key.addr.i, align 8
  %call.i = call i32 @static_key_count(%struct.static_key* %0) #3
  %cmp.i = icmp sgt i32 %call.i, 0
  %lnot.i = xor i1 %cmp.i, true
  %lnot.ext.i = zext i1 %cmp.i to i32
  %conv.i = sext i32 %lnot.ext.i to i64
  br i1 %cmp.i, label %if.then.i, label %if.end.i

if.then.i:                                        ; preds = %entry
  store i1 true, i1* %retval.i, align 1
  br label %static_key_false.exit

if.end.i:                                         ; preds = %entry
  store i1 false, i1* %retval.i, align 1
  br label %static_key_false.exit

static_key_false.exit:                            ; preds = %if.end.i, %if.then.i
  %1 = load i1, i1* %retval.i, align 1
  br i1 %1, label %if.then, label %if.end21

if.then:                                          ; preds = %static_key_false.exit
  br label %do.body

do.body:                                          ; preds = %if.then
  br label %do.body1

do.body1:                                         ; preds = %do.body
  store i8* null, i8** %__vpp_verify, align 8
  %2 = load i8*, i8** %__vpp_verify, align 8
  br label %do.end

do.end:                                           ; preds = %do.body1
  %3 = call i32 asm "movl %gs:$1,$0", "=r,*m,~{dirflag},~{fpsr},~{flags}"(i32* @cpu_number) #4, !srcloc !9
  store i32 %3, i32* %pfo_ret__, align 4
  %4 = load i32, i32* %pfo_ret__, align 4
  store i32 %4, i32* %tmp, align 4
  %5 = load i32, i32* %tmp, align 4
  store i32 %5, i32* %pscr_ret__, align 4
  %6 = load i32, i32* %pscr_ret__, align 4
  store i32 %6, i32* %tmp2, align 4
  %7 = load i32, i32* %tmp2, align 4
  %call3 = call i32 @cpumask_test_cpu(i32 %7, %struct.cpumask* @__cpu_online_mask)
  %tobool = icmp ne i32 %call3, 0
  br i1 %tobool, label %if.end, label %if.then4

if.then4:                                         ; preds = %do.end
  br label %if.end21

if.end:                                           ; preds = %do.end
  call void @rcu_read_lock_sched_notrace()
  %__c = bitcast %union.anon.99* %__u to [1 x i8]*
  %arraydecay = getelementptr inbounds [1 x i8], [1 x i8]* %__c, i32 0, i32 0
  store i8* bitcast (%struct.tracepoint_func** getelementptr inbounds (%struct.tracepoint, %struct.tracepoint* @__tracepoint_cfg80211_stop_iface, i32 0, i32 4) to i8*), i8** %p.addr.i, align 8
  store i8* %arraydecay, i8** %res.addr.i, align 8
  store i32 8, i32* %size.addr.i, align 4
  %8 = load i32, i32* %size.addr.i, align 4
  br label %NodeBlock9

NodeBlock9:                                       ; preds = %if.end
  %Pivot10 = icmp slt i32 %8, 4
  br i1 %Pivot10, label %NodeBlock, label %NodeBlock7

NodeBlock7:                                       ; preds = %NodeBlock9
  %Pivot8 = icmp slt i32 %8, 8
  br i1 %Pivot8, label %LeafBlock3, label %LeafBlock5

LeafBlock5:                                       ; preds = %NodeBlock7
  %SwitchLeaf6 = icmp eq i32 %8, 8
  br i1 %SwitchLeaf6, label %sw.bb3.i, label %NewDefault

LeafBlock3:                                       ; preds = %NodeBlock7
  %SwitchLeaf4 = icmp eq i32 %8, 4
  br i1 %SwitchLeaf4, label %sw.bb2.i, label %NewDefault

NodeBlock:                                        ; preds = %NodeBlock9
  %Pivot = icmp slt i32 %8, 2
  br i1 %Pivot, label %LeafBlock, label %LeafBlock1

LeafBlock1:                                       ; preds = %NodeBlock
  %SwitchLeaf2 = icmp eq i32 %8, 2
  br i1 %SwitchLeaf2, label %sw.bb1.i, label %NewDefault

LeafBlock:                                        ; preds = %NodeBlock
  %SwitchLeaf = icmp eq i32 %8, 1
  br i1 %SwitchLeaf, label %sw.bb.i, label %NewDefault

sw.bb.i:                                          ; preds = %LeafBlock
  %9 = load i8*, i8** %p.addr.i, align 8
  %10 = load volatile i8, i8* %9, align 1
  %11 = load i8*, i8** %res.addr.i, align 8
  store i8 %10, i8* %11, align 1
  br label %__read_once_size.exit

sw.bb1.i:                                         ; preds = %LeafBlock1
  %12 = load i8*, i8** %p.addr.i, align 8
  %13 = bitcast i8* %12 to i16*
  %14 = load volatile i16, i16* %13, align 2
  %15 = load i8*, i8** %res.addr.i, align 8
  %16 = bitcast i8* %15 to i16*
  store i16 %14, i16* %16, align 2
  br label %__read_once_size.exit

sw.bb2.i:                                         ; preds = %LeafBlock3
  %17 = load i8*, i8** %p.addr.i, align 8
  %18 = bitcast i8* %17 to i32*
  %19 = load volatile i32, i32* %18, align 4
  %20 = load i8*, i8** %res.addr.i, align 8
  %21 = bitcast i8* %20 to i32*
  store i32 %19, i32* %21, align 4
  br label %__read_once_size.exit

sw.bb3.i:                                         ; preds = %LeafBlock5
  %22 = load i8*, i8** %p.addr.i, align 8
  %23 = bitcast i8* %22 to i64*
  %24 = load volatile i64, i64* %23, align 8
  %25 = load i8*, i8** %res.addr.i, align 8
  %26 = bitcast i8* %25 to i64*
  store i64 %24, i64* %26, align 8
  br label %__read_once_size.exit

NewDefault:                                       ; preds = %LeafBlock5, %LeafBlock3, %LeafBlock1, %LeafBlock
  br label %sw.default.i

sw.default.i:                                     ; preds = %NewDefault
  call void asm sideeffect "", "~{memory},~{dirflag},~{fpsr},~{flags}"() #3, !srcloc !3
  %27 = load i8*, i8** %res.addr.i, align 8
  %28 = load i8*, i8** %p.addr.i, align 8
  %29 = load i32, i32* %size.addr.i, align 4
  %conv.i22 = sext i32 %29 to i64
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %27, i8* %28, i64 %conv.i22, i32 1, i1 false) #3
  call void asm sideeffect "", "~{memory},~{dirflag},~{fpsr},~{flags}"() #3, !srcloc !4
  br label %__read_once_size.exit

__read_once_size.exit:                            ; preds = %sw.default.i, %sw.bb3.i, %sw.bb2.i, %sw.bb1.i, %sw.bb.i
  %__val = bitcast %union.anon.99* %__u to %struct.tracepoint_func**
  %30 = load %struct.tracepoint_func*, %struct.tracepoint_func** %__val, align 8
  store %struct.tracepoint_func* %30, %struct.tracepoint_func** %tmp5, align 8
  %31 = load %struct.tracepoint_func*, %struct.tracepoint_func** %tmp5, align 8
  store %struct.tracepoint_func* %31, %struct.tracepoint_func** %_________p1, align 8
  br label %do.body6

do.body6:                                         ; preds = %__read_once_size.exit
  br label %do.end7

do.end7:                                          ; preds = %do.body6
  %32 = load %struct.tracepoint_func*, %struct.tracepoint_func** %_________p1, align 8
  store %struct.tracepoint_func* %32, %struct.tracepoint_func** %tmp8, align 8
  %33 = load %struct.tracepoint_func*, %struct.tracepoint_func** %tmp8, align 8
  store %struct.tracepoint_func* %33, %struct.tracepoint_func** %________p1, align 8
  br label %do.body9

do.body9:                                         ; preds = %do.end7
  br label %do.end10

do.end10:                                         ; preds = %do.body9
  %34 = load %struct.tracepoint_func*, %struct.tracepoint_func** %________p1, align 8
  store %struct.tracepoint_func* %34, %struct.tracepoint_func** %tmp11, align 8
  %35 = load %struct.tracepoint_func*, %struct.tracepoint_func** %tmp11, align 8
  store %struct.tracepoint_func* %35, %struct.tracepoint_func** %it_func_ptr, align 8
  %36 = load %struct.tracepoint_func*, %struct.tracepoint_func** %it_func_ptr, align 8
  %tobool12 = icmp ne %struct.tracepoint_func* %36, null
  br i1 %tobool12, label %if.then13, label %if.end18

if.then13:                                        ; preds = %do.end10
  br label %do.body14

do.body14:                                        ; preds = %do.cond, %if.then13
  %37 = load %struct.tracepoint_func*, %struct.tracepoint_func** %it_func_ptr, align 8
  %func = getelementptr inbounds %struct.tracepoint_func, %struct.tracepoint_func* %37, i32 0, i32 0
  %38 = load i8*, i8** %func, align 8
  store i8* %38, i8** %it_func, align 8
  %39 = load %struct.tracepoint_func*, %struct.tracepoint_func** %it_func_ptr, align 8
  %data = getelementptr inbounds %struct.tracepoint_func, %struct.tracepoint_func* %39, i32 0, i32 1
  %40 = load i8*, i8** %data, align 8
  store i8* %40, i8** %__data, align 8
  %41 = load i8*, i8** %it_func, align 8
  %42 = bitcast i8* %41 to void (i8*, %struct.wiphy*, %struct.wireless_dev*)*
  %43 = load i8*, i8** %__data, align 8
  %44 = load %struct.wiphy*, %struct.wiphy** %wiphy.addr, align 8
  %45 = load %struct.wireless_dev*, %struct.wireless_dev** %wdev.addr, align 8
  call void %42(i8* %43, %struct.wiphy* %44, %struct.wireless_dev* %45)
  br label %do.cond

do.cond:                                          ; preds = %do.body14
  %46 = load %struct.tracepoint_func*, %struct.tracepoint_func** %it_func_ptr, align 8
  %incdec.ptr = getelementptr inbounds %struct.tracepoint_func, %struct.tracepoint_func* %46, i32 1
  store %struct.tracepoint_func* %incdec.ptr, %struct.tracepoint_func** %it_func_ptr, align 8
  %func15 = getelementptr inbounds %struct.tracepoint_func, %struct.tracepoint_func* %incdec.ptr, i32 0, i32 0
  %47 = load i8*, i8** %func15, align 8
  %tobool16 = icmp ne i8* %47, null
  br i1 %tobool16, label %do.body14, label %do.end17

do.end17:                                         ; preds = %do.cond
  br label %if.end18

if.end18:                                         ; preds = %do.end17, %do.end10
  call void @rcu_read_unlock_sched_notrace()
  br label %do.end20

do.end20:                                         ; preds = %if.end18
  br label %if.end21

if.end21:                                         ; preds = %do.end20, %if.then4, %static_key_false.exit
  ret void
}

declare i64 @_raw_spin_lock_irqsave(%struct.raw_spinlock*) #1 section ".spinlock.text"

; Function Attrs: noinline nounwind optnone uwtable
define internal void @list_add_tail(%struct.list_head* %new, %struct.list_head* %head) #0 {
entry:
  %new.addr = alloca %struct.list_head*, align 8
  %head.addr = alloca %struct.list_head*, align 8
  store %struct.list_head* %new, %struct.list_head** %new.addr, align 8
  store %struct.list_head* %head, %struct.list_head** %head.addr, align 8
  %0 = load %struct.list_head*, %struct.list_head** %new.addr, align 8
  %1 = load %struct.list_head*, %struct.list_head** %head.addr, align 8
  %prev = getelementptr inbounds %struct.list_head, %struct.list_head* %1, i32 0, i32 1
  %2 = load %struct.list_head*, %struct.list_head** %prev, align 8
  %3 = load %struct.list_head*, %struct.list_head** %head.addr, align 8
  call void @__list_add(%struct.list_head* %0, %struct.list_head* %2, %struct.list_head* %3)
  ret void
}

; Function Attrs: noinline nounwind optnone uwtable
define internal zeroext i1 @queue_work(%struct.workqueue_struct* %wq, %struct.work_struct* %work) #0 {
entry:
  %wq.addr = alloca %struct.workqueue_struct*, align 8
  %work.addr = alloca %struct.work_struct*, align 8
  store %struct.workqueue_struct* %wq, %struct.workqueue_struct** %wq.addr, align 8
  store %struct.work_struct* %work, %struct.work_struct** %work.addr, align 8
  %0 = load %struct.workqueue_struct*, %struct.workqueue_struct** %wq.addr, align 8
  %1 = load %struct.work_struct*, %struct.work_struct** %work.addr, align 8
  %call = call zeroext i1 @queue_work_on(i32 64, %struct.workqueue_struct* %0, %struct.work_struct* %1)
  ret i1 %call
}

; Function Attrs: noinline nounwind optnone uwtable
define internal i32 @cfg80211_init() #0 section ".init.text" {
entry:
  %retval = alloca i32, align 4
  %err = alloca i32, align 4
  %call = call i32 @register_pernet_device(%struct.pernet_operations* @cfg80211_pernet_ops)
  store i32 %call, i32* %err, align 4
  %0 = load i32, i32* %err, align 4
  %tobool = icmp ne i32 %0, 0
  br i1 %tobool, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  br label %out_fail_pernet

if.end:                                           ; preds = %entry
  %call1 = call i32 @wiphy_sysfs_init()
  store i32 %call1, i32* %err, align 4
  %1 = load i32, i32* %err, align 4
  %tobool2 = icmp ne i32 %1, 0
  br i1 %tobool2, label %if.then3, label %if.end4

if.then3:                                         ; preds = %if.end
  br label %out_fail_sysfs

if.end4:                                          ; preds = %if.end
  %call5 = call i32 @register_netdevice_notifier(%struct.notifier_block* @cfg80211_netdev_notifier)
  store i32 %call5, i32* %err, align 4
  %2 = load i32, i32* %err, align 4
  %tobool6 = icmp ne i32 %2, 0
  br i1 %tobool6, label %if.then7, label %if.end8

if.then7:                                         ; preds = %if.end4
  br label %out_fail_notifier

if.end8:                                          ; preds = %if.end4
  %call9 = call i32 @nl80211_init()
  store i32 %call9, i32* %err, align 4
  %3 = load i32, i32* %err, align 4
  %tobool10 = icmp ne i32 %3, 0
  br i1 %tobool10, label %if.then11, label %if.end12

if.then11:                                        ; preds = %if.end8
  br label %out_fail_nl80211

if.end12:                                         ; preds = %if.end8
  %call13 = call %struct.dentry* @debugfs_create_dir(i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.9, i32 0, i32 0), %struct.dentry* null)
  store %struct.dentry* %call13, %struct.dentry** @ieee80211_debugfs_dir, align 8
  %call14 = call i32 @regulatory_init()
  store i32 %call14, i32* %err, align 4
  %4 = load i32, i32* %err, align 4
  %tobool15 = icmp ne i32 %4, 0
  br i1 %tobool15, label %if.then16, label %if.end17

if.then16:                                        ; preds = %if.end12
  br label %out_fail_reg

if.end17:                                         ; preds = %if.end12
  %call18 = call %struct.workqueue_struct* (i8*, i32, i32, %struct.lock_class_key*, i8*, ...) @__alloc_workqueue_key(i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.10, i32 0, i32 0), i32 131082, i32 1, %struct.lock_class_key* null, i8* null)
  store %struct.workqueue_struct* %call18, %struct.workqueue_struct** @cfg80211_wq, align 8
  %5 = load %struct.workqueue_struct*, %struct.workqueue_struct** @cfg80211_wq, align 8
  %tobool19 = icmp ne %struct.workqueue_struct* %5, null
  br i1 %tobool19, label %if.end21, label %if.then20

if.then20:                                        ; preds = %if.end17
  store i32 -12, i32* %err, align 4
  br label %out_fail_wq

if.end21:                                         ; preds = %if.end17
  store i32 0, i32* %retval, align 4
  br label %return

out_fail_wq:                                      ; preds = %if.then20
  call void @regulatory_exit()
  br label %out_fail_reg

out_fail_reg:                                     ; preds = %out_fail_wq, %if.then16
  %6 = load %struct.dentry*, %struct.dentry** @ieee80211_debugfs_dir, align 8
  call void @debugfs_remove(%struct.dentry* %6)
  call void @nl80211_exit()
  br label %out_fail_nl80211

out_fail_nl80211:                                 ; preds = %out_fail_reg, %if.then11
  %call22 = call i32 @unregister_netdevice_notifier(%struct.notifier_block* @cfg80211_netdev_notifier)
  br label %out_fail_notifier

out_fail_notifier:                                ; preds = %out_fail_nl80211, %if.then7
  call void @wiphy_sysfs_exit()
  br label %out_fail_sysfs

out_fail_sysfs:                                   ; preds = %out_fail_notifier, %if.then3
  call void @unregister_pernet_device(%struct.pernet_operations* @cfg80211_pernet_ops)
  br label %out_fail_pernet

out_fail_pernet:                                  ; preds = %out_fail_sysfs, %if.then
  %7 = load i32, i32* %err, align 4
  store i32 %7, i32* %retval, align 4
  br label %return

return:                                           ; preds = %out_fail_pernet, %if.end21
  %8 = load i32, i32* %retval, align 4
  ret i32 %8
}

; Function Attrs: noinline nounwind optnone uwtable
define internal void @cfg80211_exit() #0 section ".exit.text" {
entry:
  %0 = load %struct.dentry*, %struct.dentry** @ieee80211_debugfs_dir, align 8
  call void @debugfs_remove(%struct.dentry* %0)
  call void @nl80211_exit()
  %call = call i32 @unregister_netdevice_notifier(%struct.notifier_block* @cfg80211_netdev_notifier)
  call void @wiphy_sysfs_exit()
  call void @regulatory_exit()
  call void @unregister_pernet_device(%struct.pernet_operations* @cfg80211_pernet_ops)
  %1 = load %struct.workqueue_struct*, %struct.workqueue_struct** @cfg80211_wq, align 8
  call void @destroy_workqueue(%struct.workqueue_struct* %1)
  ret void
}

declare void @debugfs_remove(%struct.dentry*) #1

declare void @nl80211_exit() #1

declare i32 @unregister_netdevice_notifier(%struct.notifier_block*) #1

declare void @wiphy_sysfs_exit() #1

declare void @regulatory_exit() #1

declare void @unregister_pernet_device(%struct.pernet_operations*) #1

declare void @destroy_workqueue(%struct.workqueue_struct*) #1

declare i32 @sscanf(i8*, i8*, ...) #1

declare i64 @strlen(i8*) #1

; Function Attrs: noinline nounwind optnone uwtable
define internal %struct.net* @read_pnet(%struct.possible_net_t* %pnet) #0 {
entry:
  %pnet.addr = alloca %struct.possible_net_t*, align 8
  store %struct.possible_net_t* %pnet, %struct.possible_net_t** %pnet.addr, align 8
  %0 = load %struct.possible_net_t*, %struct.possible_net_t** %pnet.addr, align 8
  %net = getelementptr inbounds %struct.possible_net_t, %struct.possible_net_t* %0, i32 0, i32 0
  %1 = load %struct.net*, %struct.net** %net, align 8
  ret %struct.net* %1
}

; Function Attrs: noinline nounwind optnone uwtable
define internal void @write_pnet(%struct.possible_net_t* %pnet, %struct.net* %net) #0 {
entry:
  %pnet.addr = alloca %struct.possible_net_t*, align 8
  %net.addr = alloca %struct.net*, align 8
  store %struct.possible_net_t* %pnet, %struct.possible_net_t** %pnet.addr, align 8
  store %struct.net* %net, %struct.net** %net.addr, align 8
  %0 = load %struct.net*, %struct.net** %net.addr, align 8
  %1 = load %struct.possible_net_t*, %struct.possible_net_t** %pnet.addr, align 8
  %net1 = getelementptr inbounds %struct.possible_net_t, %struct.possible_net_t* %1, i32 0, i32 0
  store %struct.net* %0, %struct.net** %net1, align 8
  ret void
}

; Function Attrs: noinline nounwind optnone uwtable
define internal i8* @kobject_name(%struct.kobject* %kobj) #0 {
entry:
  %kobj.addr = alloca %struct.kobject*, align 8
  store %struct.kobject* %kobj, %struct.kobject** %kobj.addr, align 8
  %0 = load %struct.kobject*, %struct.kobject** %kobj.addr, align 8
  %name = getelementptr inbounds %struct.kobject, %struct.kobject* %0, i32 0, i32 0
  %1 = load i8*, i8** %name, align 8
  ret i8* %1
}

; Function Attrs: noinline nounwind optnone uwtable
define internal zeroext i1 @netif_running(%struct.net_device* %dev) #0 {
entry:
  %nr.addr.i = alloca i64, align 8
  %addr.addr.i = alloca i64*, align 8
  %dev.addr = alloca %struct.net_device*, align 8
  store %struct.net_device* %dev, %struct.net_device** %dev.addr, align 8
  %0 = load %struct.net_device*, %struct.net_device** %dev.addr, align 8
  %state = getelementptr inbounds %struct.net_device, %struct.net_device* %0, i32 0, i32 8
  store i64 0, i64* %nr.addr.i, align 8
  store i64* %state, i64** %addr.addr.i, align 8
  %1 = load i64, i64* %nr.addr.i, align 8
  %and.i = and i64 %1, 63
  %shl.i = shl i64 1, %and.i
  %2 = load i64*, i64** %addr.addr.i, align 8
  %3 = load i64, i64* %nr.addr.i, align 8
  %shr.i = ashr i64 %3, 6
  %arrayidx.i = getelementptr inbounds i64, i64* %2, i64 %shr.i
  %4 = load volatile i64, i64* %arrayidx.i, align 8
  %and1.i = and i64 %shl.i, %4
  %cmp.i = icmp ne i64 %and1.i, 0
  ret i1 %cmp.i
}

; Function Attrs: noinline nounwind optnone uwtable
define internal void @trace_rdev_stop_p2p_device(%struct.wiphy* %wiphy, %struct.wireless_dev* %wdev) #0 {
entry:
  %p.addr.i = alloca i8*, align 8
  %res.addr.i = alloca i8*, align 8
  %size.addr.i = alloca i32, align 4
  %retval.i = alloca i1, align 1
  %key.addr.i = alloca %struct.static_key*, align 8
  %wiphy.addr = alloca %struct.wiphy*, align 8
  %wdev.addr = alloca %struct.wireless_dev*, align 8
  %it_func_ptr = alloca %struct.tracepoint_func*, align 8
  %it_func = alloca i8*, align 8
  %__data = alloca i8*, align 8
  %pscr_ret__ = alloca i32, align 4
  %__vpp_verify = alloca i8*, align 8
  %pfo_ret__ = alloca i32, align 4
  %tmp = alloca i32, align 4
  %tmp2 = alloca i32, align 4
  %________p1 = alloca %struct.tracepoint_func*, align 8
  %_________p1 = alloca %struct.tracepoint_func*, align 8
  %__u = alloca %union.anon.86, align 8
  %tmp5 = alloca %struct.tracepoint_func*, align 8
  %___typecheck_p = alloca %struct.tracepoint_func*, align 8
  %tmp8 = alloca %struct.tracepoint_func*, align 8
  %tmp11 = alloca %struct.tracepoint_func*, align 8
  store %struct.wiphy* %wiphy, %struct.wiphy** %wiphy.addr, align 8
  store %struct.wireless_dev* %wdev, %struct.wireless_dev** %wdev.addr, align 8
  store %struct.static_key* getelementptr inbounds (%struct.tracepoint, %struct.tracepoint* @__tracepoint_rdev_stop_p2p_device, i32 0, i32 1), %struct.static_key** %key.addr.i, align 8
  %0 = load %struct.static_key*, %struct.static_key** %key.addr.i, align 8
  %call.i = call i32 @static_key_count(%struct.static_key* %0) #3
  %cmp.i = icmp sgt i32 %call.i, 0
  %lnot.i = xor i1 %cmp.i, true
  %lnot.ext.i = zext i1 %cmp.i to i32
  %conv.i = sext i32 %lnot.ext.i to i64
  br i1 %cmp.i, label %if.then.i, label %if.end.i

if.then.i:                                        ; preds = %entry
  store i1 true, i1* %retval.i, align 1
  br label %static_key_false.exit

if.end.i:                                         ; preds = %entry
  store i1 false, i1* %retval.i, align 1
  br label %static_key_false.exit

static_key_false.exit:                            ; preds = %if.end.i, %if.then.i
  %1 = load i1, i1* %retval.i, align 1
  br i1 %1, label %if.then, label %if.end21

if.then:                                          ; preds = %static_key_false.exit
  br label %do.body

do.body:                                          ; preds = %if.then
  br label %do.body1

do.body1:                                         ; preds = %do.body
  store i8* null, i8** %__vpp_verify, align 8
  %2 = load i8*, i8** %__vpp_verify, align 8
  br label %do.end

do.end:                                           ; preds = %do.body1
  %3 = call i32 asm "movl %gs:$1,$0", "=r,*m,~{dirflag},~{fpsr},~{flags}"(i32* @cpu_number) #4, !srcloc !10
  store i32 %3, i32* %pfo_ret__, align 4
  %4 = load i32, i32* %pfo_ret__, align 4
  store i32 %4, i32* %tmp, align 4
  %5 = load i32, i32* %tmp, align 4
  store i32 %5, i32* %pscr_ret__, align 4
  %6 = load i32, i32* %pscr_ret__, align 4
  store i32 %6, i32* %tmp2, align 4
  %7 = load i32, i32* %tmp2, align 4
  %call3 = call i32 @cpumask_test_cpu(i32 %7, %struct.cpumask* @__cpu_online_mask)
  %tobool = icmp ne i32 %call3, 0
  br i1 %tobool, label %if.end, label %if.then4

if.then4:                                         ; preds = %do.end
  br label %if.end21

if.end:                                           ; preds = %do.end
  call void @rcu_read_lock_sched_notrace()
  %__c = bitcast %union.anon.86* %__u to [1 x i8]*
  %arraydecay = getelementptr inbounds [1 x i8], [1 x i8]* %__c, i32 0, i32 0
  store i8* bitcast (%struct.tracepoint_func** getelementptr inbounds (%struct.tracepoint, %struct.tracepoint* @__tracepoint_rdev_stop_p2p_device, i32 0, i32 4) to i8*), i8** %p.addr.i, align 8
  store i8* %arraydecay, i8** %res.addr.i, align 8
  store i32 8, i32* %size.addr.i, align 4
  %8 = load i32, i32* %size.addr.i, align 4
  br label %NodeBlock9

NodeBlock9:                                       ; preds = %if.end
  %Pivot10 = icmp slt i32 %8, 4
  br i1 %Pivot10, label %NodeBlock, label %NodeBlock7

NodeBlock7:                                       ; preds = %NodeBlock9
  %Pivot8 = icmp slt i32 %8, 8
  br i1 %Pivot8, label %LeafBlock3, label %LeafBlock5

LeafBlock5:                                       ; preds = %NodeBlock7
  %SwitchLeaf6 = icmp eq i32 %8, 8
  br i1 %SwitchLeaf6, label %sw.bb3.i, label %NewDefault

LeafBlock3:                                       ; preds = %NodeBlock7
  %SwitchLeaf4 = icmp eq i32 %8, 4
  br i1 %SwitchLeaf4, label %sw.bb2.i, label %NewDefault

NodeBlock:                                        ; preds = %NodeBlock9
  %Pivot = icmp slt i32 %8, 2
  br i1 %Pivot, label %LeafBlock, label %LeafBlock1

LeafBlock1:                                       ; preds = %NodeBlock
  %SwitchLeaf2 = icmp eq i32 %8, 2
  br i1 %SwitchLeaf2, label %sw.bb1.i, label %NewDefault

LeafBlock:                                        ; preds = %NodeBlock
  %SwitchLeaf = icmp eq i32 %8, 1
  br i1 %SwitchLeaf, label %sw.bb.i, label %NewDefault

sw.bb.i:                                          ; preds = %LeafBlock
  %9 = load i8*, i8** %p.addr.i, align 8
  %10 = load volatile i8, i8* %9, align 1
  %11 = load i8*, i8** %res.addr.i, align 8
  store i8 %10, i8* %11, align 1
  br label %__read_once_size.exit

sw.bb1.i:                                         ; preds = %LeafBlock1
  %12 = load i8*, i8** %p.addr.i, align 8
  %13 = bitcast i8* %12 to i16*
  %14 = load volatile i16, i16* %13, align 2
  %15 = load i8*, i8** %res.addr.i, align 8
  %16 = bitcast i8* %15 to i16*
  store i16 %14, i16* %16, align 2
  br label %__read_once_size.exit

sw.bb2.i:                                         ; preds = %LeafBlock3
  %17 = load i8*, i8** %p.addr.i, align 8
  %18 = bitcast i8* %17 to i32*
  %19 = load volatile i32, i32* %18, align 4
  %20 = load i8*, i8** %res.addr.i, align 8
  %21 = bitcast i8* %20 to i32*
  store i32 %19, i32* %21, align 4
  br label %__read_once_size.exit

sw.bb3.i:                                         ; preds = %LeafBlock5
  %22 = load i8*, i8** %p.addr.i, align 8
  %23 = bitcast i8* %22 to i64*
  %24 = load volatile i64, i64* %23, align 8
  %25 = load i8*, i8** %res.addr.i, align 8
  %26 = bitcast i8* %25 to i64*
  store i64 %24, i64* %26, align 8
  br label %__read_once_size.exit

NewDefault:                                       ; preds = %LeafBlock5, %LeafBlock3, %LeafBlock1, %LeafBlock
  br label %sw.default.i

sw.default.i:                                     ; preds = %NewDefault
  call void asm sideeffect "", "~{memory},~{dirflag},~{fpsr},~{flags}"() #3, !srcloc !3
  %27 = load i8*, i8** %res.addr.i, align 8
  %28 = load i8*, i8** %p.addr.i, align 8
  %29 = load i32, i32* %size.addr.i, align 4
  %conv.i22 = sext i32 %29 to i64
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %27, i8* %28, i64 %conv.i22, i32 1, i1 false) #3
  call void asm sideeffect "", "~{memory},~{dirflag},~{fpsr},~{flags}"() #3, !srcloc !4
  br label %__read_once_size.exit

__read_once_size.exit:                            ; preds = %sw.default.i, %sw.bb3.i, %sw.bb2.i, %sw.bb1.i, %sw.bb.i
  %__val = bitcast %union.anon.86* %__u to %struct.tracepoint_func**
  %30 = load %struct.tracepoint_func*, %struct.tracepoint_func** %__val, align 8
  store %struct.tracepoint_func* %30, %struct.tracepoint_func** %tmp5, align 8
  %31 = load %struct.tracepoint_func*, %struct.tracepoint_func** %tmp5, align 8
  store %struct.tracepoint_func* %31, %struct.tracepoint_func** %_________p1, align 8
  br label %do.body6

do.body6:                                         ; preds = %__read_once_size.exit
  br label %do.end7

do.end7:                                          ; preds = %do.body6
  %32 = load %struct.tracepoint_func*, %struct.tracepoint_func** %_________p1, align 8
  store %struct.tracepoint_func* %32, %struct.tracepoint_func** %tmp8, align 8
  %33 = load %struct.tracepoint_func*, %struct.tracepoint_func** %tmp8, align 8
  store %struct.tracepoint_func* %33, %struct.tracepoint_func** %________p1, align 8
  br label %do.body9

do.body9:                                         ; preds = %do.end7
  br label %do.end10

do.end10:                                         ; preds = %do.body9
  %34 = load %struct.tracepoint_func*, %struct.tracepoint_func** %________p1, align 8
  store %struct.tracepoint_func* %34, %struct.tracepoint_func** %tmp11, align 8
  %35 = load %struct.tracepoint_func*, %struct.tracepoint_func** %tmp11, align 8
  store %struct.tracepoint_func* %35, %struct.tracepoint_func** %it_func_ptr, align 8
  %36 = load %struct.tracepoint_func*, %struct.tracepoint_func** %it_func_ptr, align 8
  %tobool12 = icmp ne %struct.tracepoint_func* %36, null
  br i1 %tobool12, label %if.then13, label %if.end18

if.then13:                                        ; preds = %do.end10
  br label %do.body14

do.body14:                                        ; preds = %do.cond, %if.then13
  %37 = load %struct.tracepoint_func*, %struct.tracepoint_func** %it_func_ptr, align 8
  %func = getelementptr inbounds %struct.tracepoint_func, %struct.tracepoint_func* %37, i32 0, i32 0
  %38 = load i8*, i8** %func, align 8
  store i8* %38, i8** %it_func, align 8
  %39 = load %struct.tracepoint_func*, %struct.tracepoint_func** %it_func_ptr, align 8
  %data = getelementptr inbounds %struct.tracepoint_func, %struct.tracepoint_func* %39, i32 0, i32 1
  %40 = load i8*, i8** %data, align 8
  store i8* %40, i8** %__data, align 8
  %41 = load i8*, i8** %it_func, align 8
  %42 = bitcast i8* %41 to void (i8*, %struct.wiphy*, %struct.wireless_dev*)*
  %43 = load i8*, i8** %__data, align 8
  %44 = load %struct.wiphy*, %struct.wiphy** %wiphy.addr, align 8
  %45 = load %struct.wireless_dev*, %struct.wireless_dev** %wdev.addr, align 8
  call void %42(i8* %43, %struct.wiphy* %44, %struct.wireless_dev* %45)
  br label %do.cond

do.cond:                                          ; preds = %do.body14
  %46 = load %struct.tracepoint_func*, %struct.tracepoint_func** %it_func_ptr, align 8
  %incdec.ptr = getelementptr inbounds %struct.tracepoint_func, %struct.tracepoint_func* %46, i32 1
  store %struct.tracepoint_func* %incdec.ptr, %struct.tracepoint_func** %it_func_ptr, align 8
  %func15 = getelementptr inbounds %struct.tracepoint_func, %struct.tracepoint_func* %incdec.ptr, i32 0, i32 0
  %47 = load i8*, i8** %func15, align 8
  %tobool16 = icmp ne i8* %47, null
  br i1 %tobool16, label %do.body14, label %do.end17

do.end17:                                         ; preds = %do.cond
  br label %if.end18

if.end18:                                         ; preds = %do.end17, %do.end10
  call void @rcu_read_unlock_sched_notrace()
  br label %do.end20

do.end20:                                         ; preds = %if.end18
  br label %if.end21

if.end21:                                         ; preds = %do.end20, %if.then4, %static_key_false.exit
  ret void
}

; Function Attrs: noinline nounwind optnone uwtable
define internal void @trace_rdev_return_void(%struct.wiphy* %wiphy) #0 {
entry:
  %p.addr.i = alloca i8*, align 8
  %res.addr.i = alloca i8*, align 8
  %size.addr.i = alloca i32, align 4
  %retval.i = alloca i1, align 1
  %key.addr.i = alloca %struct.static_key*, align 8
  %wiphy.addr = alloca %struct.wiphy*, align 8
  %it_func_ptr = alloca %struct.tracepoint_func*, align 8
  %it_func = alloca i8*, align 8
  %__data = alloca i8*, align 8
  %pscr_ret__ = alloca i32, align 4
  %__vpp_verify = alloca i8*, align 8
  %pfo_ret__ = alloca i32, align 4
  %tmp = alloca i32, align 4
  %tmp2 = alloca i32, align 4
  %________p1 = alloca %struct.tracepoint_func*, align 8
  %_________p1 = alloca %struct.tracepoint_func*, align 8
  %__u = alloca %union.anon.88, align 8
  %tmp5 = alloca %struct.tracepoint_func*, align 8
  %___typecheck_p = alloca %struct.tracepoint_func*, align 8
  %tmp8 = alloca %struct.tracepoint_func*, align 8
  %tmp11 = alloca %struct.tracepoint_func*, align 8
  store %struct.wiphy* %wiphy, %struct.wiphy** %wiphy.addr, align 8
  store %struct.static_key* getelementptr inbounds (%struct.tracepoint, %struct.tracepoint* @__tracepoint_rdev_return_void, i32 0, i32 1), %struct.static_key** %key.addr.i, align 8
  %0 = load %struct.static_key*, %struct.static_key** %key.addr.i, align 8
  %call.i = call i32 @static_key_count(%struct.static_key* %0) #3
  %cmp.i = icmp sgt i32 %call.i, 0
  %lnot.i = xor i1 %cmp.i, true
  %lnot.ext.i = zext i1 %cmp.i to i32
  %conv.i = sext i32 %lnot.ext.i to i64
  br i1 %cmp.i, label %if.then.i, label %if.end.i

if.then.i:                                        ; preds = %entry
  store i1 true, i1* %retval.i, align 1
  br label %static_key_false.exit

if.end.i:                                         ; preds = %entry
  store i1 false, i1* %retval.i, align 1
  br label %static_key_false.exit

static_key_false.exit:                            ; preds = %if.end.i, %if.then.i
  %1 = load i1, i1* %retval.i, align 1
  br i1 %1, label %if.then, label %if.end21

if.then:                                          ; preds = %static_key_false.exit
  br label %do.body

do.body:                                          ; preds = %if.then
  br label %do.body1

do.body1:                                         ; preds = %do.body
  store i8* null, i8** %__vpp_verify, align 8
  %2 = load i8*, i8** %__vpp_verify, align 8
  br label %do.end

do.end:                                           ; preds = %do.body1
  %3 = call i32 asm "movl %gs:$1,$0", "=r,*m,~{dirflag},~{fpsr},~{flags}"(i32* @cpu_number) #4, !srcloc !11
  store i32 %3, i32* %pfo_ret__, align 4
  %4 = load i32, i32* %pfo_ret__, align 4
  store i32 %4, i32* %tmp, align 4
  %5 = load i32, i32* %tmp, align 4
  store i32 %5, i32* %pscr_ret__, align 4
  %6 = load i32, i32* %pscr_ret__, align 4
  store i32 %6, i32* %tmp2, align 4
  %7 = load i32, i32* %tmp2, align 4
  %call3 = call i32 @cpumask_test_cpu(i32 %7, %struct.cpumask* @__cpu_online_mask)
  %tobool = icmp ne i32 %call3, 0
  br i1 %tobool, label %if.end, label %if.then4

if.then4:                                         ; preds = %do.end
  br label %if.end21

if.end:                                           ; preds = %do.end
  call void @rcu_read_lock_sched_notrace()
  %__c = bitcast %union.anon.88* %__u to [1 x i8]*
  %arraydecay = getelementptr inbounds [1 x i8], [1 x i8]* %__c, i32 0, i32 0
  store i8* bitcast (%struct.tracepoint_func** getelementptr inbounds (%struct.tracepoint, %struct.tracepoint* @__tracepoint_rdev_return_void, i32 0, i32 4) to i8*), i8** %p.addr.i, align 8
  store i8* %arraydecay, i8** %res.addr.i, align 8
  store i32 8, i32* %size.addr.i, align 4
  %8 = load i32, i32* %size.addr.i, align 4
  br label %NodeBlock9

NodeBlock9:                                       ; preds = %if.end
  %Pivot10 = icmp slt i32 %8, 4
  br i1 %Pivot10, label %NodeBlock, label %NodeBlock7

NodeBlock7:                                       ; preds = %NodeBlock9
  %Pivot8 = icmp slt i32 %8, 8
  br i1 %Pivot8, label %LeafBlock3, label %LeafBlock5

LeafBlock5:                                       ; preds = %NodeBlock7
  %SwitchLeaf6 = icmp eq i32 %8, 8
  br i1 %SwitchLeaf6, label %sw.bb3.i, label %NewDefault

LeafBlock3:                                       ; preds = %NodeBlock7
  %SwitchLeaf4 = icmp eq i32 %8, 4
  br i1 %SwitchLeaf4, label %sw.bb2.i, label %NewDefault

NodeBlock:                                        ; preds = %NodeBlock9
  %Pivot = icmp slt i32 %8, 2
  br i1 %Pivot, label %LeafBlock, label %LeafBlock1

LeafBlock1:                                       ; preds = %NodeBlock
  %SwitchLeaf2 = icmp eq i32 %8, 2
  br i1 %SwitchLeaf2, label %sw.bb1.i, label %NewDefault

LeafBlock:                                        ; preds = %NodeBlock
  %SwitchLeaf = icmp eq i32 %8, 1
  br i1 %SwitchLeaf, label %sw.bb.i, label %NewDefault

sw.bb.i:                                          ; preds = %LeafBlock
  %9 = load i8*, i8** %p.addr.i, align 8
  %10 = load volatile i8, i8* %9, align 1
  %11 = load i8*, i8** %res.addr.i, align 8
  store i8 %10, i8* %11, align 1
  br label %__read_once_size.exit

sw.bb1.i:                                         ; preds = %LeafBlock1
  %12 = load i8*, i8** %p.addr.i, align 8
  %13 = bitcast i8* %12 to i16*
  %14 = load volatile i16, i16* %13, align 2
  %15 = load i8*, i8** %res.addr.i, align 8
  %16 = bitcast i8* %15 to i16*
  store i16 %14, i16* %16, align 2
  br label %__read_once_size.exit

sw.bb2.i:                                         ; preds = %LeafBlock3
  %17 = load i8*, i8** %p.addr.i, align 8
  %18 = bitcast i8* %17 to i32*
  %19 = load volatile i32, i32* %18, align 4
  %20 = load i8*, i8** %res.addr.i, align 8
  %21 = bitcast i8* %20 to i32*
  store i32 %19, i32* %21, align 4
  br label %__read_once_size.exit

sw.bb3.i:                                         ; preds = %LeafBlock5
  %22 = load i8*, i8** %p.addr.i, align 8
  %23 = bitcast i8* %22 to i64*
  %24 = load volatile i64, i64* %23, align 8
  %25 = load i8*, i8** %res.addr.i, align 8
  %26 = bitcast i8* %25 to i64*
  store i64 %24, i64* %26, align 8
  br label %__read_once_size.exit

NewDefault:                                       ; preds = %LeafBlock5, %LeafBlock3, %LeafBlock1, %LeafBlock
  br label %sw.default.i

sw.default.i:                                     ; preds = %NewDefault
  call void asm sideeffect "", "~{memory},~{dirflag},~{fpsr},~{flags}"() #3, !srcloc !3
  %27 = load i8*, i8** %res.addr.i, align 8
  %28 = load i8*, i8** %p.addr.i, align 8
  %29 = load i32, i32* %size.addr.i, align 4
  %conv.i22 = sext i32 %29 to i64
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %27, i8* %28, i64 %conv.i22, i32 1, i1 false) #3
  call void asm sideeffect "", "~{memory},~{dirflag},~{fpsr},~{flags}"() #3, !srcloc !4
  br label %__read_once_size.exit

__read_once_size.exit:                            ; preds = %sw.default.i, %sw.bb3.i, %sw.bb2.i, %sw.bb1.i, %sw.bb.i
  %__val = bitcast %union.anon.88* %__u to %struct.tracepoint_func**
  %30 = load %struct.tracepoint_func*, %struct.tracepoint_func** %__val, align 8
  store %struct.tracepoint_func* %30, %struct.tracepoint_func** %tmp5, align 8
  %31 = load %struct.tracepoint_func*, %struct.tracepoint_func** %tmp5, align 8
  store %struct.tracepoint_func* %31, %struct.tracepoint_func** %_________p1, align 8
  br label %do.body6

do.body6:                                         ; preds = %__read_once_size.exit
  br label %do.end7

do.end7:                                          ; preds = %do.body6
  %32 = load %struct.tracepoint_func*, %struct.tracepoint_func** %_________p1, align 8
  store %struct.tracepoint_func* %32, %struct.tracepoint_func** %tmp8, align 8
  %33 = load %struct.tracepoint_func*, %struct.tracepoint_func** %tmp8, align 8
  store %struct.tracepoint_func* %33, %struct.tracepoint_func** %________p1, align 8
  br label %do.body9

do.body9:                                         ; preds = %do.end7
  br label %do.end10

do.end10:                                         ; preds = %do.body9
  %34 = load %struct.tracepoint_func*, %struct.tracepoint_func** %________p1, align 8
  store %struct.tracepoint_func* %34, %struct.tracepoint_func** %tmp11, align 8
  %35 = load %struct.tracepoint_func*, %struct.tracepoint_func** %tmp11, align 8
  store %struct.tracepoint_func* %35, %struct.tracepoint_func** %it_func_ptr, align 8
  %36 = load %struct.tracepoint_func*, %struct.tracepoint_func** %it_func_ptr, align 8
  %tobool12 = icmp ne %struct.tracepoint_func* %36, null
  br i1 %tobool12, label %if.then13, label %if.end18

if.then13:                                        ; preds = %do.end10
  br label %do.body14

do.body14:                                        ; preds = %do.cond, %if.then13
  %37 = load %struct.tracepoint_func*, %struct.tracepoint_func** %it_func_ptr, align 8
  %func = getelementptr inbounds %struct.tracepoint_func, %struct.tracepoint_func* %37, i32 0, i32 0
  %38 = load i8*, i8** %func, align 8
  store i8* %38, i8** %it_func, align 8
  %39 = load %struct.tracepoint_func*, %struct.tracepoint_func** %it_func_ptr, align 8
  %data = getelementptr inbounds %struct.tracepoint_func, %struct.tracepoint_func* %39, i32 0, i32 1
  %40 = load i8*, i8** %data, align 8
  store i8* %40, i8** %__data, align 8
  %41 = load i8*, i8** %it_func, align 8
  %42 = bitcast i8* %41 to void (i8*, %struct.wiphy*)*
  %43 = load i8*, i8** %__data, align 8
  %44 = load %struct.wiphy*, %struct.wiphy** %wiphy.addr, align 8
  call void %42(i8* %43, %struct.wiphy* %44)
  br label %do.cond

do.cond:                                          ; preds = %do.body14
  %45 = load %struct.tracepoint_func*, %struct.tracepoint_func** %it_func_ptr, align 8
  %incdec.ptr = getelementptr inbounds %struct.tracepoint_func, %struct.tracepoint_func* %45, i32 1
  store %struct.tracepoint_func* %incdec.ptr, %struct.tracepoint_func** %it_func_ptr, align 8
  %func15 = getelementptr inbounds %struct.tracepoint_func, %struct.tracepoint_func* %incdec.ptr, i32 0, i32 0
  %46 = load i8*, i8** %func15, align 8
  %tobool16 = icmp ne i8* %46, null
  br i1 %tobool16, label %do.body14, label %do.end17

do.end17:                                         ; preds = %do.cond
  br label %if.end18

if.end18:                                         ; preds = %do.end17, %do.end10
  call void @rcu_read_unlock_sched_notrace()
  br label %do.end20

do.end20:                                         ; preds = %if.end18
  br label %if.end21

if.end21:                                         ; preds = %do.end20, %if.then4, %static_key_false.exit
  ret void
}

; Function Attrs: noinline nounwind optnone uwtable
define internal i32 @cpumask_test_cpu(i32 %cpu, %struct.cpumask* %cpumask) #0 {
entry:
  %nr.addr.i = alloca i64, align 8
  %addr.addr.i = alloca i64*, align 8
  %oldbit.i = alloca i8, align 1
  %cpu.addr = alloca i32, align 4
  %cpumask.addr = alloca %struct.cpumask*, align 8
  store i32 %cpu, i32* %cpu.addr, align 4
  store %struct.cpumask* %cpumask, %struct.cpumask** %cpumask.addr, align 8
  %0 = load i32, i32* %cpu.addr, align 4
  %call = call i32 @cpumask_check(i32 %0)
  %conv = zext i32 %call to i64
  %1 = load %struct.cpumask*, %struct.cpumask** %cpumask.addr, align 8
  %bits = getelementptr inbounds %struct.cpumask, %struct.cpumask* %1, i32 0, i32 0
  %arraydecay = getelementptr inbounds [1 x i64], [1 x i64]* %bits, i32 0, i32 0
  store i64 %conv, i64* %nr.addr.i, align 8
  store i64* %arraydecay, i64** %addr.addr.i, align 8
  %2 = load i64*, i64** %addr.addr.i, align 8
  %3 = load i64, i64* %nr.addr.i, align 8
  call void asm sideeffect "bt $2,$1\0A\09\0A\09setc $0\0A", "=*qm,*m,Ir,~{dirflag},~{fpsr},~{flags}"(i8* %oldbit.i, i64* %2, i64 %3) #3, !srcloc !12
  %4 = load i8, i8* %oldbit.i, align 1
  %tobool.i = trunc i8 %4 to i1
  %conv2 = zext i1 %tobool.i to i32
  ret i32 %conv2
}

; Function Attrs: noinline nounwind optnone uwtable
define internal void @rcu_read_lock_sched_notrace() #0 {
entry:
  call void asm sideeffect "", "~{memory},~{dirflag},~{fpsr},~{flags}"() #3, !srcloc !13
  ret void
}

; Function Attrs: noinline nounwind optnone uwtable
define internal void @rcu_read_unlock_sched_notrace() #0 {
entry:
  call void asm sideeffect "", "~{memory},~{dirflag},~{fpsr},~{flags}"() #3, !srcloc !14
  ret void
}

; Function Attrs: noinline nounwind optnone uwtable
define internal i32 @static_key_count(%struct.static_key* %key) #0 {
entry:
  %p.addr.i.i = alloca i8*, align 8
  %res.addr.i.i = alloca i8*, align 8
  %size.addr.i.i = alloca i32, align 4
  %v.addr.i = alloca %struct.atomic_t*, align 8
  %__u.i = alloca %union.anon.87, align 4
  %tmp.i = alloca i32, align 4
  %key.addr = alloca %struct.static_key*, align 8
  store %struct.static_key* %key, %struct.static_key** %key.addr, align 8
  %0 = load %struct.static_key*, %struct.static_key** %key.addr, align 8
  %enabled = getelementptr inbounds %struct.static_key, %struct.static_key* %0, i32 0, i32 0
  store %struct.atomic_t* %enabled, %struct.atomic_t** %v.addr.i, align 8
  %1 = load %struct.atomic_t*, %struct.atomic_t** %v.addr.i, align 8
  %counter.i = getelementptr inbounds %struct.atomic_t, %struct.atomic_t* %1, i32 0, i32 0
  %2 = bitcast i32* %counter.i to i8*
  %__c.i = bitcast %union.anon.87* %__u.i to [1 x i8]*
  %arraydecay.i = getelementptr inbounds [1 x i8], [1 x i8]* %__c.i, i32 0, i32 0
  store i8* %2, i8** %p.addr.i.i, align 8
  store i8* %arraydecay.i, i8** %res.addr.i.i, align 8
  store i32 4, i32* %size.addr.i.i, align 4
  %3 = load i32, i32* %size.addr.i.i, align 4
  br label %NodeBlock9

NodeBlock9:                                       ; preds = %entry
  %Pivot10 = icmp slt i32 %3, 4
  br i1 %Pivot10, label %NodeBlock, label %NodeBlock7

NodeBlock7:                                       ; preds = %NodeBlock9
  %Pivot8 = icmp slt i32 %3, 8
  br i1 %Pivot8, label %LeafBlock3, label %LeafBlock5

LeafBlock5:                                       ; preds = %NodeBlock7
  %SwitchLeaf6 = icmp eq i32 %3, 8
  br i1 %SwitchLeaf6, label %sw.bb3.i.i, label %NewDefault

LeafBlock3:                                       ; preds = %NodeBlock7
  %SwitchLeaf4 = icmp eq i32 %3, 4
  br i1 %SwitchLeaf4, label %sw.bb2.i.i, label %NewDefault

NodeBlock:                                        ; preds = %NodeBlock9
  %Pivot = icmp slt i32 %3, 2
  br i1 %Pivot, label %LeafBlock, label %LeafBlock1

LeafBlock1:                                       ; preds = %NodeBlock
  %SwitchLeaf2 = icmp eq i32 %3, 2
  br i1 %SwitchLeaf2, label %sw.bb1.i.i, label %NewDefault

LeafBlock:                                        ; preds = %NodeBlock
  %SwitchLeaf = icmp eq i32 %3, 1
  br i1 %SwitchLeaf, label %sw.bb.i.i, label %NewDefault

sw.bb.i.i:                                        ; preds = %LeafBlock
  %4 = load i8*, i8** %p.addr.i.i, align 8
  %5 = load volatile i8, i8* %4, align 1
  %6 = load i8*, i8** %res.addr.i.i, align 8
  store i8 %5, i8* %6, align 1
  br label %atomic_read.exit

sw.bb1.i.i:                                       ; preds = %LeafBlock1
  %7 = load i8*, i8** %p.addr.i.i, align 8
  %8 = bitcast i8* %7 to i16*
  %9 = load volatile i16, i16* %8, align 2
  %10 = load i8*, i8** %res.addr.i.i, align 8
  %11 = bitcast i8* %10 to i16*
  store i16 %9, i16* %11, align 2
  br label %atomic_read.exit

sw.bb2.i.i:                                       ; preds = %LeafBlock3
  %12 = load i8*, i8** %p.addr.i.i, align 8
  %13 = bitcast i8* %12 to i32*
  %14 = load volatile i32, i32* %13, align 4
  %15 = load i8*, i8** %res.addr.i.i, align 8
  %16 = bitcast i8* %15 to i32*
  store i32 %14, i32* %16, align 4
  br label %atomic_read.exit

sw.bb3.i.i:                                       ; preds = %LeafBlock5
  %17 = load i8*, i8** %p.addr.i.i, align 8
  %18 = bitcast i8* %17 to i64*
  %19 = load volatile i64, i64* %18, align 8
  %20 = load i8*, i8** %res.addr.i.i, align 8
  %21 = bitcast i8* %20 to i64*
  store i64 %19, i64* %21, align 8
  br label %atomic_read.exit

NewDefault:                                       ; preds = %LeafBlock5, %LeafBlock3, %LeafBlock1, %LeafBlock
  br label %sw.default.i.i

sw.default.i.i:                                   ; preds = %NewDefault
  call void asm sideeffect "", "~{memory},~{dirflag},~{fpsr},~{flags}"() #3, !srcloc !3
  %22 = load i8*, i8** %res.addr.i.i, align 8
  %23 = load i8*, i8** %p.addr.i.i, align 8
  %24 = load i32, i32* %size.addr.i.i, align 4
  %conv.i.i = sext i32 %24 to i64
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %22, i8* %23, i64 %conv.i.i, i32 1, i1 false) #3
  call void asm sideeffect "", "~{memory},~{dirflag},~{fpsr},~{flags}"() #3, !srcloc !4
  br label %atomic_read.exit

atomic_read.exit:                                 ; preds = %sw.default.i.i, %sw.bb3.i.i, %sw.bb2.i.i, %sw.bb1.i.i, %sw.bb.i.i
  %__val.i = bitcast %union.anon.87* %__u.i to i32*
  %25 = load i32, i32* %__val.i, align 4
  store i32 %25, i32* %tmp.i, align 4
  %26 = load i32, i32* %tmp.i, align 4
  ret i32 %26
}

; Function Attrs: noinline nounwind optnone uwtable
define internal i32 @cpumask_check(i32 %cpu) #0 {
entry:
  %cpu.addr = alloca i32, align 4
  store i32 %cpu, i32* %cpu.addr, align 4
  %0 = load i32, i32* %cpu.addr, align 4
  ret i32 %0
}

; Function Attrs: noinline nounwind optnone uwtable
define internal void @trace_rdev_stop_nan(%struct.wiphy* %wiphy, %struct.wireless_dev* %wdev) #0 {
entry:
  %p.addr.i = alloca i8*, align 8
  %res.addr.i = alloca i8*, align 8
  %size.addr.i = alloca i32, align 4
  %retval.i = alloca i1, align 1
  %key.addr.i = alloca %struct.static_key*, align 8
  %wiphy.addr = alloca %struct.wiphy*, align 8
  %wdev.addr = alloca %struct.wireless_dev*, align 8
  %it_func_ptr = alloca %struct.tracepoint_func*, align 8
  %it_func = alloca i8*, align 8
  %__data = alloca i8*, align 8
  %pscr_ret__ = alloca i32, align 4
  %__vpp_verify = alloca i8*, align 8
  %pfo_ret__ = alloca i32, align 4
  %tmp = alloca i32, align 4
  %tmp2 = alloca i32, align 4
  %________p1 = alloca %struct.tracepoint_func*, align 8
  %_________p1 = alloca %struct.tracepoint_func*, align 8
  %__u = alloca %union.anon.89, align 8
  %tmp5 = alloca %struct.tracepoint_func*, align 8
  %___typecheck_p = alloca %struct.tracepoint_func*, align 8
  %tmp8 = alloca %struct.tracepoint_func*, align 8
  %tmp11 = alloca %struct.tracepoint_func*, align 8
  store %struct.wiphy* %wiphy, %struct.wiphy** %wiphy.addr, align 8
  store %struct.wireless_dev* %wdev, %struct.wireless_dev** %wdev.addr, align 8
  store %struct.static_key* getelementptr inbounds (%struct.tracepoint, %struct.tracepoint* @__tracepoint_rdev_stop_nan, i32 0, i32 1), %struct.static_key** %key.addr.i, align 8
  %0 = load %struct.static_key*, %struct.static_key** %key.addr.i, align 8
  %call.i = call i32 @static_key_count(%struct.static_key* %0) #3
  %cmp.i = icmp sgt i32 %call.i, 0
  %lnot.i = xor i1 %cmp.i, true
  %lnot.ext.i = zext i1 %cmp.i to i32
  %conv.i = sext i32 %lnot.ext.i to i64
  br i1 %cmp.i, label %if.then.i, label %if.end.i

if.then.i:                                        ; preds = %entry
  store i1 true, i1* %retval.i, align 1
  br label %static_key_false.exit

if.end.i:                                         ; preds = %entry
  store i1 false, i1* %retval.i, align 1
  br label %static_key_false.exit

static_key_false.exit:                            ; preds = %if.end.i, %if.then.i
  %1 = load i1, i1* %retval.i, align 1
  br i1 %1, label %if.then, label %if.end21

if.then:                                          ; preds = %static_key_false.exit
  br label %do.body

do.body:                                          ; preds = %if.then
  br label %do.body1

do.body1:                                         ; preds = %do.body
  store i8* null, i8** %__vpp_verify, align 8
  %2 = load i8*, i8** %__vpp_verify, align 8
  br label %do.end

do.end:                                           ; preds = %do.body1
  %3 = call i32 asm "movl %gs:$1,$0", "=r,*m,~{dirflag},~{fpsr},~{flags}"(i32* @cpu_number) #4, !srcloc !15
  store i32 %3, i32* %pfo_ret__, align 4
  %4 = load i32, i32* %pfo_ret__, align 4
  store i32 %4, i32* %tmp, align 4
  %5 = load i32, i32* %tmp, align 4
  store i32 %5, i32* %pscr_ret__, align 4
  %6 = load i32, i32* %pscr_ret__, align 4
  store i32 %6, i32* %tmp2, align 4
  %7 = load i32, i32* %tmp2, align 4
  %call3 = call i32 @cpumask_test_cpu(i32 %7, %struct.cpumask* @__cpu_online_mask)
  %tobool = icmp ne i32 %call3, 0
  br i1 %tobool, label %if.end, label %if.then4

if.then4:                                         ; preds = %do.end
  br label %if.end21

if.end:                                           ; preds = %do.end
  call void @rcu_read_lock_sched_notrace()
  %__c = bitcast %union.anon.89* %__u to [1 x i8]*
  %arraydecay = getelementptr inbounds [1 x i8], [1 x i8]* %__c, i32 0, i32 0
  store i8* bitcast (%struct.tracepoint_func** getelementptr inbounds (%struct.tracepoint, %struct.tracepoint* @__tracepoint_rdev_stop_nan, i32 0, i32 4) to i8*), i8** %p.addr.i, align 8
  store i8* %arraydecay, i8** %res.addr.i, align 8
  store i32 8, i32* %size.addr.i, align 4
  %8 = load i32, i32* %size.addr.i, align 4
  br label %NodeBlock9

NodeBlock9:                                       ; preds = %if.end
  %Pivot10 = icmp slt i32 %8, 4
  br i1 %Pivot10, label %NodeBlock, label %NodeBlock7

NodeBlock7:                                       ; preds = %NodeBlock9
  %Pivot8 = icmp slt i32 %8, 8
  br i1 %Pivot8, label %LeafBlock3, label %LeafBlock5

LeafBlock5:                                       ; preds = %NodeBlock7
  %SwitchLeaf6 = icmp eq i32 %8, 8
  br i1 %SwitchLeaf6, label %sw.bb3.i, label %NewDefault

LeafBlock3:                                       ; preds = %NodeBlock7
  %SwitchLeaf4 = icmp eq i32 %8, 4
  br i1 %SwitchLeaf4, label %sw.bb2.i, label %NewDefault

NodeBlock:                                        ; preds = %NodeBlock9
  %Pivot = icmp slt i32 %8, 2
  br i1 %Pivot, label %LeafBlock, label %LeafBlock1

LeafBlock1:                                       ; preds = %NodeBlock
  %SwitchLeaf2 = icmp eq i32 %8, 2
  br i1 %SwitchLeaf2, label %sw.bb1.i, label %NewDefault

LeafBlock:                                        ; preds = %NodeBlock
  %SwitchLeaf = icmp eq i32 %8, 1
  br i1 %SwitchLeaf, label %sw.bb.i, label %NewDefault

sw.bb.i:                                          ; preds = %LeafBlock
  %9 = load i8*, i8** %p.addr.i, align 8
  %10 = load volatile i8, i8* %9, align 1
  %11 = load i8*, i8** %res.addr.i, align 8
  store i8 %10, i8* %11, align 1
  br label %__read_once_size.exit

sw.bb1.i:                                         ; preds = %LeafBlock1
  %12 = load i8*, i8** %p.addr.i, align 8
  %13 = bitcast i8* %12 to i16*
  %14 = load volatile i16, i16* %13, align 2
  %15 = load i8*, i8** %res.addr.i, align 8
  %16 = bitcast i8* %15 to i16*
  store i16 %14, i16* %16, align 2
  br label %__read_once_size.exit

sw.bb2.i:                                         ; preds = %LeafBlock3
  %17 = load i8*, i8** %p.addr.i, align 8
  %18 = bitcast i8* %17 to i32*
  %19 = load volatile i32, i32* %18, align 4
  %20 = load i8*, i8** %res.addr.i, align 8
  %21 = bitcast i8* %20 to i32*
  store i32 %19, i32* %21, align 4
  br label %__read_once_size.exit

sw.bb3.i:                                         ; preds = %LeafBlock5
  %22 = load i8*, i8** %p.addr.i, align 8
  %23 = bitcast i8* %22 to i64*
  %24 = load volatile i64, i64* %23, align 8
  %25 = load i8*, i8** %res.addr.i, align 8
  %26 = bitcast i8* %25 to i64*
  store i64 %24, i64* %26, align 8
  br label %__read_once_size.exit

NewDefault:                                       ; preds = %LeafBlock5, %LeafBlock3, %LeafBlock1, %LeafBlock
  br label %sw.default.i

sw.default.i:                                     ; preds = %NewDefault
  call void asm sideeffect "", "~{memory},~{dirflag},~{fpsr},~{flags}"() #3, !srcloc !3
  %27 = load i8*, i8** %res.addr.i, align 8
  %28 = load i8*, i8** %p.addr.i, align 8
  %29 = load i32, i32* %size.addr.i, align 4
  %conv.i22 = sext i32 %29 to i64
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %27, i8* %28, i64 %conv.i22, i32 1, i1 false) #3
  call void asm sideeffect "", "~{memory},~{dirflag},~{fpsr},~{flags}"() #3, !srcloc !4
  br label %__read_once_size.exit

__read_once_size.exit:                            ; preds = %sw.default.i, %sw.bb3.i, %sw.bb2.i, %sw.bb1.i, %sw.bb.i
  %__val = bitcast %union.anon.89* %__u to %struct.tracepoint_func**
  %30 = load %struct.tracepoint_func*, %struct.tracepoint_func** %__val, align 8
  store %struct.tracepoint_func* %30, %struct.tracepoint_func** %tmp5, align 8
  %31 = load %struct.tracepoint_func*, %struct.tracepoint_func** %tmp5, align 8
  store %struct.tracepoint_func* %31, %struct.tracepoint_func** %_________p1, align 8
  br label %do.body6

do.body6:                                         ; preds = %__read_once_size.exit
  br label %do.end7

do.end7:                                          ; preds = %do.body6
  %32 = load %struct.tracepoint_func*, %struct.tracepoint_func** %_________p1, align 8
  store %struct.tracepoint_func* %32, %struct.tracepoint_func** %tmp8, align 8
  %33 = load %struct.tracepoint_func*, %struct.tracepoint_func** %tmp8, align 8
  store %struct.tracepoint_func* %33, %struct.tracepoint_func** %________p1, align 8
  br label %do.body9

do.body9:                                         ; preds = %do.end7
  br label %do.end10

do.end10:                                         ; preds = %do.body9
  %34 = load %struct.tracepoint_func*, %struct.tracepoint_func** %________p1, align 8
  store %struct.tracepoint_func* %34, %struct.tracepoint_func** %tmp11, align 8
  %35 = load %struct.tracepoint_func*, %struct.tracepoint_func** %tmp11, align 8
  store %struct.tracepoint_func* %35, %struct.tracepoint_func** %it_func_ptr, align 8
  %36 = load %struct.tracepoint_func*, %struct.tracepoint_func** %it_func_ptr, align 8
  %tobool12 = icmp ne %struct.tracepoint_func* %36, null
  br i1 %tobool12, label %if.then13, label %if.end18

if.then13:                                        ; preds = %do.end10
  br label %do.body14

do.body14:                                        ; preds = %do.cond, %if.then13
  %37 = load %struct.tracepoint_func*, %struct.tracepoint_func** %it_func_ptr, align 8
  %func = getelementptr inbounds %struct.tracepoint_func, %struct.tracepoint_func* %37, i32 0, i32 0
  %38 = load i8*, i8** %func, align 8
  store i8* %38, i8** %it_func, align 8
  %39 = load %struct.tracepoint_func*, %struct.tracepoint_func** %it_func_ptr, align 8
  %data = getelementptr inbounds %struct.tracepoint_func, %struct.tracepoint_func* %39, i32 0, i32 1
  %40 = load i8*, i8** %data, align 8
  store i8* %40, i8** %__data, align 8
  %41 = load i8*, i8** %it_func, align 8
  %42 = bitcast i8* %41 to void (i8*, %struct.wiphy*, %struct.wireless_dev*)*
  %43 = load i8*, i8** %__data, align 8
  %44 = load %struct.wiphy*, %struct.wiphy** %wiphy.addr, align 8
  %45 = load %struct.wireless_dev*, %struct.wireless_dev** %wdev.addr, align 8
  call void %42(i8* %43, %struct.wiphy* %44, %struct.wireless_dev* %45)
  br label %do.cond

do.cond:                                          ; preds = %do.body14
  %46 = load %struct.tracepoint_func*, %struct.tracepoint_func** %it_func_ptr, align 8
  %incdec.ptr = getelementptr inbounds %struct.tracepoint_func, %struct.tracepoint_func* %46, i32 1
  store %struct.tracepoint_func* %incdec.ptr, %struct.tracepoint_func** %it_func_ptr, align 8
  %func15 = getelementptr inbounds %struct.tracepoint_func, %struct.tracepoint_func* %incdec.ptr, i32 0, i32 0
  %47 = load i8*, i8** %func15, align 8
  %tobool16 = icmp ne i8* %47, null
  br i1 %tobool16, label %do.body14, label %do.end17

do.end17:                                         ; preds = %do.cond
  br label %if.end18

if.end18:                                         ; preds = %do.end17, %do.end10
  call void @rcu_read_unlock_sched_notrace()
  br label %do.end20

do.end20:                                         ; preds = %if.end18
  br label %if.end21

if.end21:                                         ; preds = %do.end20, %if.then4, %static_key_false.exit
  ret void
}

declare void @_raw_spin_lock_irq(%struct.raw_spinlock*) #1 section ".spinlock.text"

; Function Attrs: noinline nounwind optnone uwtable
define internal void @__list_del_entry(%struct.list_head* %entry1) #0 {
entry:
  %entry.addr = alloca %struct.list_head*, align 8
  store %struct.list_head* %entry1, %struct.list_head** %entry.addr, align 8
  %0 = load %struct.list_head*, %struct.list_head** %entry.addr, align 8
  %call = call zeroext i1 @__list_del_entry_valid(%struct.list_head* %0)
  br i1 %call, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  br label %return

if.end:                                           ; preds = %entry
  %1 = load %struct.list_head*, %struct.list_head** %entry.addr, align 8
  %prev = getelementptr inbounds %struct.list_head, %struct.list_head* %1, i32 0, i32 1
  %2 = load %struct.list_head*, %struct.list_head** %prev, align 8
  %3 = load %struct.list_head*, %struct.list_head** %entry.addr, align 8
  %next = getelementptr inbounds %struct.list_head, %struct.list_head* %3, i32 0, i32 0
  %4 = load %struct.list_head*, %struct.list_head** %next, align 8
  call void @__list_del(%struct.list_head* %2, %struct.list_head* %4)
  br label %return

return:                                           ; preds = %if.end, %if.then
  ret void
}

; Function Attrs: noinline nounwind optnone uwtable
define internal zeroext i1 @__list_del_entry_valid(%struct.list_head* %entry1) #0 {
entry:
  %entry.addr = alloca %struct.list_head*, align 8
  store %struct.list_head* %entry1, %struct.list_head** %entry.addr, align 8
  ret i1 true
}

; Function Attrs: noinline nounwind optnone uwtable
define internal void @__list_del(%struct.list_head* %prev, %struct.list_head* %next) #0 {
entry:
  %p.addr.i = alloca i8*, align 8
  %res.addr.i = alloca i8*, align 8
  %size.addr.i = alloca i32, align 4
  %prev.addr = alloca %struct.list_head*, align 8
  %next.addr = alloca %struct.list_head*, align 8
  %__u = alloca %union.anon.90, align 8
  %tmp = alloca %struct.list_head*, align 8
  store %struct.list_head* %prev, %struct.list_head** %prev.addr, align 8
  store %struct.list_head* %next, %struct.list_head** %next.addr, align 8
  %0 = load %struct.list_head*, %struct.list_head** %prev.addr, align 8
  %1 = load %struct.list_head*, %struct.list_head** %next.addr, align 8
  %prev1 = getelementptr inbounds %struct.list_head, %struct.list_head* %1, i32 0, i32 1
  store %struct.list_head* %0, %struct.list_head** %prev1, align 8
  %__val = bitcast %union.anon.90* %__u to %struct.list_head**
  %2 = load %struct.list_head*, %struct.list_head** %next.addr, align 8
  store %struct.list_head* %2, %struct.list_head** %__val, align 8
  %3 = load %struct.list_head*, %struct.list_head** %prev.addr, align 8
  %next2 = getelementptr inbounds %struct.list_head, %struct.list_head* %3, i32 0, i32 0
  %4 = bitcast %struct.list_head** %next2 to i8*
  %__c = bitcast %union.anon.90* %__u to [1 x i8]*
  %arraydecay = getelementptr inbounds [1 x i8], [1 x i8]* %__c, i32 0, i32 0
  store i8* %4, i8** %p.addr.i, align 8
  store i8* %arraydecay, i8** %res.addr.i, align 8
  store i32 8, i32* %size.addr.i, align 4
  %5 = load i32, i32* %size.addr.i, align 4
  br label %NodeBlock9

NodeBlock9:                                       ; preds = %entry
  %Pivot10 = icmp slt i32 %5, 4
  br i1 %Pivot10, label %NodeBlock, label %NodeBlock7

NodeBlock7:                                       ; preds = %NodeBlock9
  %Pivot8 = icmp slt i32 %5, 8
  br i1 %Pivot8, label %LeafBlock3, label %LeafBlock5

LeafBlock5:                                       ; preds = %NodeBlock7
  %SwitchLeaf6 = icmp eq i32 %5, 8
  br i1 %SwitchLeaf6, label %sw.bb3.i, label %NewDefault

LeafBlock3:                                       ; preds = %NodeBlock7
  %SwitchLeaf4 = icmp eq i32 %5, 4
  br i1 %SwitchLeaf4, label %sw.bb2.i, label %NewDefault

NodeBlock:                                        ; preds = %NodeBlock9
  %Pivot = icmp slt i32 %5, 2
  br i1 %Pivot, label %LeafBlock, label %LeafBlock1

LeafBlock1:                                       ; preds = %NodeBlock
  %SwitchLeaf2 = icmp eq i32 %5, 2
  br i1 %SwitchLeaf2, label %sw.bb1.i, label %NewDefault

LeafBlock:                                        ; preds = %NodeBlock
  %SwitchLeaf = icmp eq i32 %5, 1
  br i1 %SwitchLeaf, label %sw.bb.i, label %NewDefault

sw.bb.i:                                          ; preds = %LeafBlock
  %6 = load i8*, i8** %res.addr.i, align 8
  %7 = load i8, i8* %6, align 1
  %8 = load i8*, i8** %p.addr.i, align 8
  store volatile i8 %7, i8* %8, align 1
  br label %__write_once_size.exit

sw.bb1.i:                                         ; preds = %LeafBlock1
  %9 = load i8*, i8** %res.addr.i, align 8
  %10 = bitcast i8* %9 to i16*
  %11 = load i16, i16* %10, align 2
  %12 = load i8*, i8** %p.addr.i, align 8
  %13 = bitcast i8* %12 to i16*
  store volatile i16 %11, i16* %13, align 2
  br label %__write_once_size.exit

sw.bb2.i:                                         ; preds = %LeafBlock3
  %14 = load i8*, i8** %res.addr.i, align 8
  %15 = bitcast i8* %14 to i32*
  %16 = load i32, i32* %15, align 4
  %17 = load i8*, i8** %p.addr.i, align 8
  %18 = bitcast i8* %17 to i32*
  store volatile i32 %16, i32* %18, align 4
  br label %__write_once_size.exit

sw.bb3.i:                                         ; preds = %LeafBlock5
  %19 = load i8*, i8** %res.addr.i, align 8
  %20 = bitcast i8* %19 to i64*
  %21 = load i64, i64* %20, align 8
  %22 = load i8*, i8** %p.addr.i, align 8
  %23 = bitcast i8* %22 to i64*
  store volatile i64 %21, i64* %23, align 8
  br label %__write_once_size.exit

NewDefault:                                       ; preds = %LeafBlock5, %LeafBlock3, %LeafBlock1, %LeafBlock
  br label %sw.default.i

sw.default.i:                                     ; preds = %NewDefault
  call void asm sideeffect "", "~{memory},~{dirflag},~{fpsr},~{flags}"() #3, !srcloc !7
  %24 = load i8*, i8** %p.addr.i, align 8
  %25 = load i8*, i8** %res.addr.i, align 8
  %26 = load i32, i32* %size.addr.i, align 4
  %conv.i = sext i32 %26 to i64
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %24, i8* %25, i64 %conv.i, i32 1, i1 false) #3
  call void asm sideeffect "", "~{memory},~{dirflag},~{fpsr},~{flags}"() #3, !srcloc !8
  br label %__write_once_size.exit

__write_once_size.exit:                           ; preds = %sw.default.i, %sw.bb3.i, %sw.bb2.i, %sw.bb1.i, %sw.bb.i
  %__val3 = bitcast %union.anon.90* %__u to %struct.list_head**
  %27 = load %struct.list_head*, %struct.list_head** %__val3, align 8
  store %struct.list_head* %27, %struct.list_head** %tmp, align 8
  %28 = load %struct.list_head*, %struct.list_head** %tmp, align 8
  ret void
}

; Function Attrs: noinline nounwind optnone uwtable
define internal void @__raw_spin_unlock_irq(%struct.raw_spinlock* %lock) #0 {
entry:
  %lock.addr = alloca %struct.raw_spinlock*, align 8
  store %struct.raw_spinlock* %lock, %struct.raw_spinlock** %lock.addr, align 8
  br label %do.body

do.body:                                          ; preds = %entry
  br label %do.end

do.end:                                           ; preds = %do.body
  %0 = load %struct.raw_spinlock*, %struct.raw_spinlock** %lock.addr, align 8
  call void @do_raw_spin_unlock(%struct.raw_spinlock* %0)
  br label %do.body1

do.body1:                                         ; preds = %do.end
  call void @arch_local_irq_enable()
  br label %do.end2

do.end2:                                          ; preds = %do.body1
  call void asm sideeffect "", "~{memory},~{dirflag},~{fpsr},~{flags}"() #3, !srcloc !16
  ret void
}

; Function Attrs: noinline nounwind optnone uwtable
define internal void @do_raw_spin_unlock(%struct.raw_spinlock* %lock) #0 {
entry:
  %lock.addr = alloca %struct.raw_spinlock*, align 8
  store %struct.raw_spinlock* %lock, %struct.raw_spinlock** %lock.addr, align 8
  %0 = load %struct.raw_spinlock*, %struct.raw_spinlock** %lock.addr, align 8
  %raw_lock = getelementptr inbounds %struct.raw_spinlock, %struct.raw_spinlock* %0, i32 0, i32 0
  call void @queued_spin_unlock(%struct.qspinlock* %raw_lock)
  ret void
}

; Function Attrs: noinline nounwind optnone uwtable
define internal void @arch_local_irq_enable() #0 {
entry:
  call void @native_irq_enable()
  ret void
}

; Function Attrs: noinline nounwind optnone uwtable
define internal void @queued_spin_unlock(%struct.qspinlock* %lock) #0 {
entry:
  %lock.addr = alloca %struct.qspinlock*, align 8
  store %struct.qspinlock* %lock, %struct.qspinlock** %lock.addr, align 8
  %0 = load %struct.qspinlock*, %struct.qspinlock** %lock.addr, align 8
  call void @native_queued_spin_unlock(%struct.qspinlock* %0)
  ret void
}

; Function Attrs: noinline nounwind optnone uwtable
define internal void @native_queued_spin_unlock(%struct.qspinlock* %lock) #0 {
entry:
  %p.addr.i = alloca i8*, align 8
  %res.addr.i = alloca i8*, align 8
  %size.addr.i = alloca i32, align 4
  %lock.addr = alloca %struct.qspinlock*, align 8
  %__cond = alloca i8, align 1
  %__u = alloca %union.anon.91, align 1
  %tmp = alloca i8, align 1
  store %struct.qspinlock* %lock, %struct.qspinlock** %lock.addr, align 8
  br label %do.body

do.body:                                          ; preds = %entry
  br label %do.body1

do.body1:                                         ; preds = %do.body
  store i8 0, i8* %__cond, align 1
  %0 = load i8, i8* %__cond, align 1
  %tobool = trunc i8 %0 to i1
  br i1 %tobool, label %if.then, label %if.end

if.then:                                          ; preds = %do.body1
  call void @__compiletime_assert_17()
  br label %if.end

if.end:                                           ; preds = %if.then, %do.body1
  br label %do.body2

do.body2:                                         ; preds = %if.end
  %1 = load i8, i8* %__cond, align 1
  %tobool3 = trunc i8 %1 to i1
  %conv = zext i1 %tobool3 to i32
  %mul = mul nsw i32 2, %conv
  %sub = sub nsw i32 1, %mul
  %2 = zext i32 %sub to i64
  br label %do.end

do.end:                                           ; preds = %do.body2
  br label %do.end4

do.end4:                                          ; preds = %do.end
  call void asm sideeffect "", "~{memory},~{dirflag},~{fpsr},~{flags}"() #3, !srcloc !17
  %3 = bitcast %union.anon.91* %__u to i8*
  call void @llvm.memset.p0i8.i64(i8* %3, i8 0, i64 1, i32 1, i1 false)
  %4 = load %struct.qspinlock*, %struct.qspinlock** %lock.addr, align 8
  %5 = bitcast %struct.qspinlock* %4 to i8*
  %__c = bitcast %union.anon.91* %__u to [1 x i8]*
  %arraydecay = getelementptr inbounds [1 x i8], [1 x i8]* %__c, i32 0, i32 0
  store i8* %5, i8** %p.addr.i, align 8
  store i8* %arraydecay, i8** %res.addr.i, align 8
  store i32 1, i32* %size.addr.i, align 4
  %6 = load i32, i32* %size.addr.i, align 4
  br label %NodeBlock9

NodeBlock9:                                       ; preds = %do.end4
  %Pivot10 = icmp slt i32 %6, 4
  br i1 %Pivot10, label %NodeBlock, label %NodeBlock7

NodeBlock7:                                       ; preds = %NodeBlock9
  %Pivot8 = icmp slt i32 %6, 8
  br i1 %Pivot8, label %LeafBlock3, label %LeafBlock5

LeafBlock5:                                       ; preds = %NodeBlock7
  %SwitchLeaf6 = icmp eq i32 %6, 8
  br i1 %SwitchLeaf6, label %sw.bb3.i, label %NewDefault

LeafBlock3:                                       ; preds = %NodeBlock7
  %SwitchLeaf4 = icmp eq i32 %6, 4
  br i1 %SwitchLeaf4, label %sw.bb2.i, label %NewDefault

NodeBlock:                                        ; preds = %NodeBlock9
  %Pivot = icmp slt i32 %6, 2
  br i1 %Pivot, label %LeafBlock, label %LeafBlock1

LeafBlock1:                                       ; preds = %NodeBlock
  %SwitchLeaf2 = icmp eq i32 %6, 2
  br i1 %SwitchLeaf2, label %sw.bb1.i, label %NewDefault

LeafBlock:                                        ; preds = %NodeBlock
  %SwitchLeaf = icmp eq i32 %6, 1
  br i1 %SwitchLeaf, label %sw.bb.i, label %NewDefault

sw.bb.i:                                          ; preds = %LeafBlock
  %7 = load i8*, i8** %res.addr.i, align 8
  %8 = load i8, i8* %7, align 1
  %9 = load i8*, i8** %p.addr.i, align 8
  store volatile i8 %8, i8* %9, align 1
  br label %__write_once_size.exit

sw.bb1.i:                                         ; preds = %LeafBlock1
  %10 = load i8*, i8** %res.addr.i, align 8
  %11 = bitcast i8* %10 to i16*
  %12 = load i16, i16* %11, align 2
  %13 = load i8*, i8** %p.addr.i, align 8
  %14 = bitcast i8* %13 to i16*
  store volatile i16 %12, i16* %14, align 2
  br label %__write_once_size.exit

sw.bb2.i:                                         ; preds = %LeafBlock3
  %15 = load i8*, i8** %res.addr.i, align 8
  %16 = bitcast i8* %15 to i32*
  %17 = load i32, i32* %16, align 4
  %18 = load i8*, i8** %p.addr.i, align 8
  %19 = bitcast i8* %18 to i32*
  store volatile i32 %17, i32* %19, align 4
  br label %__write_once_size.exit

sw.bb3.i:                                         ; preds = %LeafBlock5
  %20 = load i8*, i8** %res.addr.i, align 8
  %21 = bitcast i8* %20 to i64*
  %22 = load i64, i64* %21, align 8
  %23 = load i8*, i8** %p.addr.i, align 8
  %24 = bitcast i8* %23 to i64*
  store volatile i64 %22, i64* %24, align 8
  br label %__write_once_size.exit

NewDefault:                                       ; preds = %LeafBlock5, %LeafBlock3, %LeafBlock1, %LeafBlock
  br label %sw.default.i

sw.default.i:                                     ; preds = %NewDefault
  call void asm sideeffect "", "~{memory},~{dirflag},~{fpsr},~{flags}"() #3, !srcloc !7
  %25 = load i8*, i8** %p.addr.i, align 8
  %26 = load i8*, i8** %res.addr.i, align 8
  %27 = load i32, i32* %size.addr.i, align 4
  %conv.i = sext i32 %27 to i64
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %25, i8* %26, i64 %conv.i, i32 1, i1 false) #3
  call void asm sideeffect "", "~{memory},~{dirflag},~{fpsr},~{flags}"() #3, !srcloc !8
  br label %__write_once_size.exit

__write_once_size.exit:                           ; preds = %sw.default.i, %sw.bb3.i, %sw.bb2.i, %sw.bb1.i, %sw.bb.i
  %__val = bitcast %union.anon.91* %__u to i8*
  %28 = load i8, i8* %__val, align 1
  store i8 %28, i8* %tmp, align 1
  %29 = load i8, i8* %tmp, align 1
  br label %do.end5

do.end5:                                          ; preds = %__write_once_size.exit
  ret void
}

declare void @__compiletime_assert_17() #1

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i32, i1) #2

; Function Attrs: noinline nounwind optnone uwtable
define internal void @native_irq_enable() #0 {
entry:
  call void asm sideeffect "sti", "~{memory},~{dirflag},~{fpsr},~{flags}"() #3, !srcloc !18
  ret void
}

; Function Attrs: noinline nounwind optnone uwtable
define internal void @trace_rdev_del_virtual_intf(%struct.wiphy* %wiphy, %struct.wireless_dev* %wdev) #0 {
entry:
  %p.addr.i = alloca i8*, align 8
  %res.addr.i = alloca i8*, align 8
  %size.addr.i = alloca i32, align 4
  %retval.i = alloca i1, align 1
  %key.addr.i = alloca %struct.static_key*, align 8
  %wiphy.addr = alloca %struct.wiphy*, align 8
  %wdev.addr = alloca %struct.wireless_dev*, align 8
  %it_func_ptr = alloca %struct.tracepoint_func*, align 8
  %it_func = alloca i8*, align 8
  %__data = alloca i8*, align 8
  %pscr_ret__ = alloca i32, align 4
  %__vpp_verify = alloca i8*, align 8
  %pfo_ret__ = alloca i32, align 4
  %tmp = alloca i32, align 4
  %tmp2 = alloca i32, align 4
  %________p1 = alloca %struct.tracepoint_func*, align 8
  %_________p1 = alloca %struct.tracepoint_func*, align 8
  %__u = alloca %union.anon.92, align 8
  %tmp5 = alloca %struct.tracepoint_func*, align 8
  %___typecheck_p = alloca %struct.tracepoint_func*, align 8
  %tmp8 = alloca %struct.tracepoint_func*, align 8
  %tmp11 = alloca %struct.tracepoint_func*, align 8
  store %struct.wiphy* %wiphy, %struct.wiphy** %wiphy.addr, align 8
  store %struct.wireless_dev* %wdev, %struct.wireless_dev** %wdev.addr, align 8
  store %struct.static_key* getelementptr inbounds (%struct.tracepoint, %struct.tracepoint* @__tracepoint_rdev_del_virtual_intf, i32 0, i32 1), %struct.static_key** %key.addr.i, align 8
  %0 = load %struct.static_key*, %struct.static_key** %key.addr.i, align 8
  %call.i = call i32 @static_key_count(%struct.static_key* %0) #3
  %cmp.i = icmp sgt i32 %call.i, 0
  %lnot.i = xor i1 %cmp.i, true
  %lnot.ext.i = zext i1 %cmp.i to i32
  %conv.i = sext i32 %lnot.ext.i to i64
  br i1 %cmp.i, label %if.then.i, label %if.end.i

if.then.i:                                        ; preds = %entry
  store i1 true, i1* %retval.i, align 1
  br label %static_key_false.exit

if.end.i:                                         ; preds = %entry
  store i1 false, i1* %retval.i, align 1
  br label %static_key_false.exit

static_key_false.exit:                            ; preds = %if.end.i, %if.then.i
  %1 = load i1, i1* %retval.i, align 1
  br i1 %1, label %if.then, label %if.end21

if.then:                                          ; preds = %static_key_false.exit
  br label %do.body

do.body:                                          ; preds = %if.then
  br label %do.body1

do.body1:                                         ; preds = %do.body
  store i8* null, i8** %__vpp_verify, align 8
  %2 = load i8*, i8** %__vpp_verify, align 8
  br label %do.end

do.end:                                           ; preds = %do.body1
  %3 = call i32 asm "movl %gs:$1,$0", "=r,*m,~{dirflag},~{fpsr},~{flags}"(i32* @cpu_number) #4, !srcloc !19
  store i32 %3, i32* %pfo_ret__, align 4
  %4 = load i32, i32* %pfo_ret__, align 4
  store i32 %4, i32* %tmp, align 4
  %5 = load i32, i32* %tmp, align 4
  store i32 %5, i32* %pscr_ret__, align 4
  %6 = load i32, i32* %pscr_ret__, align 4
  store i32 %6, i32* %tmp2, align 4
  %7 = load i32, i32* %tmp2, align 4
  %call3 = call i32 @cpumask_test_cpu(i32 %7, %struct.cpumask* @__cpu_online_mask)
  %tobool = icmp ne i32 %call3, 0
  br i1 %tobool, label %if.end, label %if.then4

if.then4:                                         ; preds = %do.end
  br label %if.end21

if.end:                                           ; preds = %do.end
  call void @rcu_read_lock_sched_notrace()
  %__c = bitcast %union.anon.92* %__u to [1 x i8]*
  %arraydecay = getelementptr inbounds [1 x i8], [1 x i8]* %__c, i32 0, i32 0
  store i8* bitcast (%struct.tracepoint_func** getelementptr inbounds (%struct.tracepoint, %struct.tracepoint* @__tracepoint_rdev_del_virtual_intf, i32 0, i32 4) to i8*), i8** %p.addr.i, align 8
  store i8* %arraydecay, i8** %res.addr.i, align 8
  store i32 8, i32* %size.addr.i, align 4
  %8 = load i32, i32* %size.addr.i, align 4
  br label %NodeBlock9

NodeBlock9:                                       ; preds = %if.end
  %Pivot10 = icmp slt i32 %8, 4
  br i1 %Pivot10, label %NodeBlock, label %NodeBlock7

NodeBlock7:                                       ; preds = %NodeBlock9
  %Pivot8 = icmp slt i32 %8, 8
  br i1 %Pivot8, label %LeafBlock3, label %LeafBlock5

LeafBlock5:                                       ; preds = %NodeBlock7
  %SwitchLeaf6 = icmp eq i32 %8, 8
  br i1 %SwitchLeaf6, label %sw.bb3.i, label %NewDefault

LeafBlock3:                                       ; preds = %NodeBlock7
  %SwitchLeaf4 = icmp eq i32 %8, 4
  br i1 %SwitchLeaf4, label %sw.bb2.i, label %NewDefault

NodeBlock:                                        ; preds = %NodeBlock9
  %Pivot = icmp slt i32 %8, 2
  br i1 %Pivot, label %LeafBlock, label %LeafBlock1

LeafBlock1:                                       ; preds = %NodeBlock
  %SwitchLeaf2 = icmp eq i32 %8, 2
  br i1 %SwitchLeaf2, label %sw.bb1.i, label %NewDefault

LeafBlock:                                        ; preds = %NodeBlock
  %SwitchLeaf = icmp eq i32 %8, 1
  br i1 %SwitchLeaf, label %sw.bb.i, label %NewDefault

sw.bb.i:                                          ; preds = %LeafBlock
  %9 = load i8*, i8** %p.addr.i, align 8
  %10 = load volatile i8, i8* %9, align 1
  %11 = load i8*, i8** %res.addr.i, align 8
  store i8 %10, i8* %11, align 1
  br label %__read_once_size.exit

sw.bb1.i:                                         ; preds = %LeafBlock1
  %12 = load i8*, i8** %p.addr.i, align 8
  %13 = bitcast i8* %12 to i16*
  %14 = load volatile i16, i16* %13, align 2
  %15 = load i8*, i8** %res.addr.i, align 8
  %16 = bitcast i8* %15 to i16*
  store i16 %14, i16* %16, align 2
  br label %__read_once_size.exit

sw.bb2.i:                                         ; preds = %LeafBlock3
  %17 = load i8*, i8** %p.addr.i, align 8
  %18 = bitcast i8* %17 to i32*
  %19 = load volatile i32, i32* %18, align 4
  %20 = load i8*, i8** %res.addr.i, align 8
  %21 = bitcast i8* %20 to i32*
  store i32 %19, i32* %21, align 4
  br label %__read_once_size.exit

sw.bb3.i:                                         ; preds = %LeafBlock5
  %22 = load i8*, i8** %p.addr.i, align 8
  %23 = bitcast i8* %22 to i64*
  %24 = load volatile i64, i64* %23, align 8
  %25 = load i8*, i8** %res.addr.i, align 8
  %26 = bitcast i8* %25 to i64*
  store i64 %24, i64* %26, align 8
  br label %__read_once_size.exit

NewDefault:                                       ; preds = %LeafBlock5, %LeafBlock3, %LeafBlock1, %LeafBlock
  br label %sw.default.i

sw.default.i:                                     ; preds = %NewDefault
  call void asm sideeffect "", "~{memory},~{dirflag},~{fpsr},~{flags}"() #3, !srcloc !3
  %27 = load i8*, i8** %res.addr.i, align 8
  %28 = load i8*, i8** %p.addr.i, align 8
  %29 = load i32, i32* %size.addr.i, align 4
  %conv.i22 = sext i32 %29 to i64
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %27, i8* %28, i64 %conv.i22, i32 1, i1 false) #3
  call void asm sideeffect "", "~{memory},~{dirflag},~{fpsr},~{flags}"() #3, !srcloc !4
  br label %__read_once_size.exit

__read_once_size.exit:                            ; preds = %sw.default.i, %sw.bb3.i, %sw.bb2.i, %sw.bb1.i, %sw.bb.i
  %__val = bitcast %union.anon.92* %__u to %struct.tracepoint_func**
  %30 = load %struct.tracepoint_func*, %struct.tracepoint_func** %__val, align 8
  store %struct.tracepoint_func* %30, %struct.tracepoint_func** %tmp5, align 8
  %31 = load %struct.tracepoint_func*, %struct.tracepoint_func** %tmp5, align 8
  store %struct.tracepoint_func* %31, %struct.tracepoint_func** %_________p1, align 8
  br label %do.body6

do.body6:                                         ; preds = %__read_once_size.exit
  br label %do.end7

do.end7:                                          ; preds = %do.body6
  %32 = load %struct.tracepoint_func*, %struct.tracepoint_func** %_________p1, align 8
  store %struct.tracepoint_func* %32, %struct.tracepoint_func** %tmp8, align 8
  %33 = load %struct.tracepoint_func*, %struct.tracepoint_func** %tmp8, align 8
  store %struct.tracepoint_func* %33, %struct.tracepoint_func** %________p1, align 8
  br label %do.body9

do.body9:                                         ; preds = %do.end7
  br label %do.end10

do.end10:                                         ; preds = %do.body9
  %34 = load %struct.tracepoint_func*, %struct.tracepoint_func** %________p1, align 8
  store %struct.tracepoint_func* %34, %struct.tracepoint_func** %tmp11, align 8
  %35 = load %struct.tracepoint_func*, %struct.tracepoint_func** %tmp11, align 8
  store %struct.tracepoint_func* %35, %struct.tracepoint_func** %it_func_ptr, align 8
  %36 = load %struct.tracepoint_func*, %struct.tracepoint_func** %it_func_ptr, align 8
  %tobool12 = icmp ne %struct.tracepoint_func* %36, null
  br i1 %tobool12, label %if.then13, label %if.end18

if.then13:                                        ; preds = %do.end10
  br label %do.body14

do.body14:                                        ; preds = %do.cond, %if.then13
  %37 = load %struct.tracepoint_func*, %struct.tracepoint_func** %it_func_ptr, align 8
  %func = getelementptr inbounds %struct.tracepoint_func, %struct.tracepoint_func* %37, i32 0, i32 0
  %38 = load i8*, i8** %func, align 8
  store i8* %38, i8** %it_func, align 8
  %39 = load %struct.tracepoint_func*, %struct.tracepoint_func** %it_func_ptr, align 8
  %data = getelementptr inbounds %struct.tracepoint_func, %struct.tracepoint_func* %39, i32 0, i32 1
  %40 = load i8*, i8** %data, align 8
  store i8* %40, i8** %__data, align 8
  %41 = load i8*, i8** %it_func, align 8
  %42 = bitcast i8* %41 to void (i8*, %struct.wiphy*, %struct.wireless_dev*)*
  %43 = load i8*, i8** %__data, align 8
  %44 = load %struct.wiphy*, %struct.wiphy** %wiphy.addr, align 8
  %45 = load %struct.wireless_dev*, %struct.wireless_dev** %wdev.addr, align 8
  call void %42(i8* %43, %struct.wiphy* %44, %struct.wireless_dev* %45)
  br label %do.cond

do.cond:                                          ; preds = %do.body14
  %46 = load %struct.tracepoint_func*, %struct.tracepoint_func** %it_func_ptr, align 8
  %incdec.ptr = getelementptr inbounds %struct.tracepoint_func, %struct.tracepoint_func* %46, i32 1
  store %struct.tracepoint_func* %incdec.ptr, %struct.tracepoint_func** %it_func_ptr, align 8
  %func15 = getelementptr inbounds %struct.tracepoint_func, %struct.tracepoint_func* %incdec.ptr, i32 0, i32 0
  %47 = load i8*, i8** %func15, align 8
  %tobool16 = icmp ne i8* %47, null
  br i1 %tobool16, label %do.body14, label %do.end17

do.end17:                                         ; preds = %do.cond
  br label %if.end18

if.end18:                                         ; preds = %do.end17, %do.end10
  call void @rcu_read_unlock_sched_notrace()
  br label %do.end20

do.end20:                                         ; preds = %if.end18
  br label %if.end21

if.end21:                                         ; preds = %do.end20, %if.then4, %static_key_false.exit
  ret void
}

; Function Attrs: noinline nounwind optnone uwtable
define internal void @trace_rdev_return_int(%struct.wiphy* %wiphy, i32 %ret) #0 {
entry:
  %p.addr.i = alloca i8*, align 8
  %res.addr.i = alloca i8*, align 8
  %size.addr.i = alloca i32, align 4
  %retval.i = alloca i1, align 1
  %key.addr.i = alloca %struct.static_key*, align 8
  %wiphy.addr = alloca %struct.wiphy*, align 8
  %ret.addr = alloca i32, align 4
  %it_func_ptr = alloca %struct.tracepoint_func*, align 8
  %it_func = alloca i8*, align 8
  %__data = alloca i8*, align 8
  %pscr_ret__ = alloca i32, align 4
  %__vpp_verify = alloca i8*, align 8
  %pfo_ret__ = alloca i32, align 4
  %tmp = alloca i32, align 4
  %tmp2 = alloca i32, align 4
  %________p1 = alloca %struct.tracepoint_func*, align 8
  %_________p1 = alloca %struct.tracepoint_func*, align 8
  %__u = alloca %union.anon.93, align 8
  %tmp5 = alloca %struct.tracepoint_func*, align 8
  %___typecheck_p = alloca %struct.tracepoint_func*, align 8
  %tmp8 = alloca %struct.tracepoint_func*, align 8
  %tmp11 = alloca %struct.tracepoint_func*, align 8
  store %struct.wiphy* %wiphy, %struct.wiphy** %wiphy.addr, align 8
  store i32 %ret, i32* %ret.addr, align 4
  store %struct.static_key* getelementptr inbounds (%struct.tracepoint, %struct.tracepoint* @__tracepoint_rdev_return_int, i32 0, i32 1), %struct.static_key** %key.addr.i, align 8
  %0 = load %struct.static_key*, %struct.static_key** %key.addr.i, align 8
  %call.i = call i32 @static_key_count(%struct.static_key* %0) #3
  %cmp.i = icmp sgt i32 %call.i, 0
  %lnot.i = xor i1 %cmp.i, true
  %lnot.ext.i = zext i1 %cmp.i to i32
  %conv.i = sext i32 %lnot.ext.i to i64
  br i1 %cmp.i, label %if.then.i, label %if.end.i

if.then.i:                                        ; preds = %entry
  store i1 true, i1* %retval.i, align 1
  br label %static_key_false.exit

if.end.i:                                         ; preds = %entry
  store i1 false, i1* %retval.i, align 1
  br label %static_key_false.exit

static_key_false.exit:                            ; preds = %if.end.i, %if.then.i
  %1 = load i1, i1* %retval.i, align 1
  br i1 %1, label %if.then, label %if.end21

if.then:                                          ; preds = %static_key_false.exit
  br label %do.body

do.body:                                          ; preds = %if.then
  br label %do.body1

do.body1:                                         ; preds = %do.body
  store i8* null, i8** %__vpp_verify, align 8
  %2 = load i8*, i8** %__vpp_verify, align 8
  br label %do.end

do.end:                                           ; preds = %do.body1
  %3 = call i32 asm "movl %gs:$1,$0", "=r,*m,~{dirflag},~{fpsr},~{flags}"(i32* @cpu_number) #4, !srcloc !20
  store i32 %3, i32* %pfo_ret__, align 4
  %4 = load i32, i32* %pfo_ret__, align 4
  store i32 %4, i32* %tmp, align 4
  %5 = load i32, i32* %tmp, align 4
  store i32 %5, i32* %pscr_ret__, align 4
  %6 = load i32, i32* %pscr_ret__, align 4
  store i32 %6, i32* %tmp2, align 4
  %7 = load i32, i32* %tmp2, align 4
  %call3 = call i32 @cpumask_test_cpu(i32 %7, %struct.cpumask* @__cpu_online_mask)
  %tobool = icmp ne i32 %call3, 0
  br i1 %tobool, label %if.end, label %if.then4

if.then4:                                         ; preds = %do.end
  br label %if.end21

if.end:                                           ; preds = %do.end
  call void @rcu_read_lock_sched_notrace()
  %__c = bitcast %union.anon.93* %__u to [1 x i8]*
  %arraydecay = getelementptr inbounds [1 x i8], [1 x i8]* %__c, i32 0, i32 0
  store i8* bitcast (%struct.tracepoint_func** getelementptr inbounds (%struct.tracepoint, %struct.tracepoint* @__tracepoint_rdev_return_int, i32 0, i32 4) to i8*), i8** %p.addr.i, align 8
  store i8* %arraydecay, i8** %res.addr.i, align 8
  store i32 8, i32* %size.addr.i, align 4
  %8 = load i32, i32* %size.addr.i, align 4
  br label %NodeBlock9

NodeBlock9:                                       ; preds = %if.end
  %Pivot10 = icmp slt i32 %8, 4
  br i1 %Pivot10, label %NodeBlock, label %NodeBlock7

NodeBlock7:                                       ; preds = %NodeBlock9
  %Pivot8 = icmp slt i32 %8, 8
  br i1 %Pivot8, label %LeafBlock3, label %LeafBlock5

LeafBlock5:                                       ; preds = %NodeBlock7
  %SwitchLeaf6 = icmp eq i32 %8, 8
  br i1 %SwitchLeaf6, label %sw.bb3.i, label %NewDefault

LeafBlock3:                                       ; preds = %NodeBlock7
  %SwitchLeaf4 = icmp eq i32 %8, 4
  br i1 %SwitchLeaf4, label %sw.bb2.i, label %NewDefault

NodeBlock:                                        ; preds = %NodeBlock9
  %Pivot = icmp slt i32 %8, 2
  br i1 %Pivot, label %LeafBlock, label %LeafBlock1

LeafBlock1:                                       ; preds = %NodeBlock
  %SwitchLeaf2 = icmp eq i32 %8, 2
  br i1 %SwitchLeaf2, label %sw.bb1.i, label %NewDefault

LeafBlock:                                        ; preds = %NodeBlock
  %SwitchLeaf = icmp eq i32 %8, 1
  br i1 %SwitchLeaf, label %sw.bb.i, label %NewDefault

sw.bb.i:                                          ; preds = %LeafBlock
  %9 = load i8*, i8** %p.addr.i, align 8
  %10 = load volatile i8, i8* %9, align 1
  %11 = load i8*, i8** %res.addr.i, align 8
  store i8 %10, i8* %11, align 1
  br label %__read_once_size.exit

sw.bb1.i:                                         ; preds = %LeafBlock1
  %12 = load i8*, i8** %p.addr.i, align 8
  %13 = bitcast i8* %12 to i16*
  %14 = load volatile i16, i16* %13, align 2
  %15 = load i8*, i8** %res.addr.i, align 8
  %16 = bitcast i8* %15 to i16*
  store i16 %14, i16* %16, align 2
  br label %__read_once_size.exit

sw.bb2.i:                                         ; preds = %LeafBlock3
  %17 = load i8*, i8** %p.addr.i, align 8
  %18 = bitcast i8* %17 to i32*
  %19 = load volatile i32, i32* %18, align 4
  %20 = load i8*, i8** %res.addr.i, align 8
  %21 = bitcast i8* %20 to i32*
  store i32 %19, i32* %21, align 4
  br label %__read_once_size.exit

sw.bb3.i:                                         ; preds = %LeafBlock5
  %22 = load i8*, i8** %p.addr.i, align 8
  %23 = bitcast i8* %22 to i64*
  %24 = load volatile i64, i64* %23, align 8
  %25 = load i8*, i8** %res.addr.i, align 8
  %26 = bitcast i8* %25 to i64*
  store i64 %24, i64* %26, align 8
  br label %__read_once_size.exit

NewDefault:                                       ; preds = %LeafBlock5, %LeafBlock3, %LeafBlock1, %LeafBlock
  br label %sw.default.i

sw.default.i:                                     ; preds = %NewDefault
  call void asm sideeffect "", "~{memory},~{dirflag},~{fpsr},~{flags}"() #3, !srcloc !3
  %27 = load i8*, i8** %res.addr.i, align 8
  %28 = load i8*, i8** %p.addr.i, align 8
  %29 = load i32, i32* %size.addr.i, align 4
  %conv.i22 = sext i32 %29 to i64
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %27, i8* %28, i64 %conv.i22, i32 1, i1 false) #3
  call void asm sideeffect "", "~{memory},~{dirflag},~{fpsr},~{flags}"() #3, !srcloc !4
  br label %__read_once_size.exit

__read_once_size.exit:                            ; preds = %sw.default.i, %sw.bb3.i, %sw.bb2.i, %sw.bb1.i, %sw.bb.i
  %__val = bitcast %union.anon.93* %__u to %struct.tracepoint_func**
  %30 = load %struct.tracepoint_func*, %struct.tracepoint_func** %__val, align 8
  store %struct.tracepoint_func* %30, %struct.tracepoint_func** %tmp5, align 8
  %31 = load %struct.tracepoint_func*, %struct.tracepoint_func** %tmp5, align 8
  store %struct.tracepoint_func* %31, %struct.tracepoint_func** %_________p1, align 8
  br label %do.body6

do.body6:                                         ; preds = %__read_once_size.exit
  br label %do.end7

do.end7:                                          ; preds = %do.body6
  %32 = load %struct.tracepoint_func*, %struct.tracepoint_func** %_________p1, align 8
  store %struct.tracepoint_func* %32, %struct.tracepoint_func** %tmp8, align 8
  %33 = load %struct.tracepoint_func*, %struct.tracepoint_func** %tmp8, align 8
  store %struct.tracepoint_func* %33, %struct.tracepoint_func** %________p1, align 8
  br label %do.body9

do.body9:                                         ; preds = %do.end7
  br label %do.end10

do.end10:                                         ; preds = %do.body9
  %34 = load %struct.tracepoint_func*, %struct.tracepoint_func** %________p1, align 8
  store %struct.tracepoint_func* %34, %struct.tracepoint_func** %tmp11, align 8
  %35 = load %struct.tracepoint_func*, %struct.tracepoint_func** %tmp11, align 8
  store %struct.tracepoint_func* %35, %struct.tracepoint_func** %it_func_ptr, align 8
  %36 = load %struct.tracepoint_func*, %struct.tracepoint_func** %it_func_ptr, align 8
  %tobool12 = icmp ne %struct.tracepoint_func* %36, null
  br i1 %tobool12, label %if.then13, label %if.end18

if.then13:                                        ; preds = %do.end10
  br label %do.body14

do.body14:                                        ; preds = %do.cond, %if.then13
  %37 = load %struct.tracepoint_func*, %struct.tracepoint_func** %it_func_ptr, align 8
  %func = getelementptr inbounds %struct.tracepoint_func, %struct.tracepoint_func* %37, i32 0, i32 0
  %38 = load i8*, i8** %func, align 8
  store i8* %38, i8** %it_func, align 8
  %39 = load %struct.tracepoint_func*, %struct.tracepoint_func** %it_func_ptr, align 8
  %data = getelementptr inbounds %struct.tracepoint_func, %struct.tracepoint_func* %39, i32 0, i32 1
  %40 = load i8*, i8** %data, align 8
  store i8* %40, i8** %__data, align 8
  %41 = load i8*, i8** %it_func, align 8
  %42 = bitcast i8* %41 to void (i8*, %struct.wiphy*, i32)*
  %43 = load i8*, i8** %__data, align 8
  %44 = load %struct.wiphy*, %struct.wiphy** %wiphy.addr, align 8
  %45 = load i32, i32* %ret.addr, align 4
  call void %42(i8* %43, %struct.wiphy* %44, i32 %45)
  br label %do.cond

do.cond:                                          ; preds = %do.body14
  %46 = load %struct.tracepoint_func*, %struct.tracepoint_func** %it_func_ptr, align 8
  %incdec.ptr = getelementptr inbounds %struct.tracepoint_func, %struct.tracepoint_func* %46, i32 1
  store %struct.tracepoint_func* %incdec.ptr, %struct.tracepoint_func** %it_func_ptr, align 8
  %func15 = getelementptr inbounds %struct.tracepoint_func, %struct.tracepoint_func* %incdec.ptr, i32 0, i32 0
  %47 = load i8*, i8** %func15, align 8
  %tobool16 = icmp ne i8* %47, null
  br i1 %tobool16, label %do.body14, label %do.end17

do.end17:                                         ; preds = %do.cond
  br label %if.end18

if.end18:                                         ; preds = %do.end17, %do.end10
  call void @rcu_read_unlock_sched_notrace()
  br label %do.end20

do.end20:                                         ; preds = %if.end18
  br label %if.end21

if.end21:                                         ; preds = %do.end20, %if.then4, %static_key_false.exit
  ret void
}

declare noalias i8* @__kmalloc(i64, i32) #1

declare zeroext i1 @rfkill_blocked(%struct.rfkill*) #1

declare void @cfg80211_process_rdev_events(%struct.cfg80211_registered_device*) #1

; Function Attrs: noinline nounwind optnone uwtable
define internal void @__list_add_rcu(%struct.list_head* %new, %struct.list_head* %prev, %struct.list_head* %next) #0 {
entry:
  %p.addr.i = alloca i8*, align 8
  %res.addr.i = alloca i8*, align 8
  %size.addr.i = alloca i32, align 4
  %new.addr = alloca %struct.list_head*, align 8
  %prev.addr = alloca %struct.list_head*, align 8
  %next.addr = alloca %struct.list_head*, align 8
  %_r_a_p__v = alloca i64, align 8
  %__cond = alloca i8, align 1
  %__u = alloca %union.anon.95, align 8
  %tmp = alloca %struct.list_head*, align 8
  %tmp12 = alloca i64, align 8
  store %struct.list_head* %new, %struct.list_head** %new.addr, align 8
  store %struct.list_head* %prev, %struct.list_head** %prev.addr, align 8
  store %struct.list_head* %next, %struct.list_head** %next.addr, align 8
  %0 = load %struct.list_head*, %struct.list_head** %new.addr, align 8
  %1 = load %struct.list_head*, %struct.list_head** %prev.addr, align 8
  %2 = load %struct.list_head*, %struct.list_head** %next.addr, align 8
  %call = call zeroext i1 @__list_add_valid(%struct.list_head* %0, %struct.list_head* %1, %struct.list_head* %2)
  br i1 %call, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  br label %return

if.end:                                           ; preds = %entry
  %3 = load %struct.list_head*, %struct.list_head** %next.addr, align 8
  %4 = load %struct.list_head*, %struct.list_head** %new.addr, align 8
  %next1 = getelementptr inbounds %struct.list_head, %struct.list_head* %4, i32 0, i32 0
  store %struct.list_head* %3, %struct.list_head** %next1, align 8
  %5 = load %struct.list_head*, %struct.list_head** %prev.addr, align 8
  %6 = load %struct.list_head*, %struct.list_head** %new.addr, align 8
  %prev2 = getelementptr inbounds %struct.list_head, %struct.list_head* %6, i32 0, i32 1
  store %struct.list_head* %5, %struct.list_head** %prev2, align 8
  %7 = load %struct.list_head*, %struct.list_head** %new.addr, align 8
  %8 = ptrtoint %struct.list_head* %7 to i64
  store i64 %8, i64* %_r_a_p__v, align 8
  br label %do.body

do.body:                                          ; preds = %if.end
  br label %do.body3

do.body3:                                         ; preds = %do.body
  store i8 0, i8* %__cond, align 1
  %9 = load i8, i8* %__cond, align 1
  %tobool = trunc i8 %9 to i1
  br i1 %tobool, label %if.then4, label %if.end5

if.then4:                                         ; preds = %do.body3
  call void @__compiletime_assert_56()
  br label %if.end5

if.end5:                                          ; preds = %if.then4, %do.body3
  br label %do.body6

do.body6:                                         ; preds = %if.end5
  %10 = load i8, i8* %__cond, align 1
  %tobool7 = trunc i8 %10 to i1
  %conv = zext i1 %tobool7 to i32
  %mul = mul nsw i32 2, %conv
  %sub = sub nsw i32 1, %mul
  %11 = zext i32 %sub to i64
  br label %do.end

do.end:                                           ; preds = %do.body6
  br label %do.end8

do.end8:                                          ; preds = %do.end
  call void asm sideeffect "", "~{memory},~{dirflag},~{fpsr},~{flags}"() #3, !srcloc !21
  %__val = bitcast %union.anon.95* %__u to %struct.list_head**
  %12 = load i64, i64* %_r_a_p__v, align 8
  %13 = inttoptr i64 %12 to %struct.list_head*
  store %struct.list_head* %13, %struct.list_head** %__val, align 8
  %14 = load %struct.list_head*, %struct.list_head** %prev.addr, align 8
  %next9 = getelementptr inbounds %struct.list_head, %struct.list_head* %14, i32 0, i32 0
  %15 = bitcast %struct.list_head** %next9 to i8*
  %__c = bitcast %union.anon.95* %__u to [1 x i8]*
  %arraydecay = getelementptr inbounds [1 x i8], [1 x i8]* %__c, i32 0, i32 0
  store i8* %15, i8** %p.addr.i, align 8
  store i8* %arraydecay, i8** %res.addr.i, align 8
  store i32 8, i32* %size.addr.i, align 4
  %16 = load i32, i32* %size.addr.i, align 4
  br label %NodeBlock9

NodeBlock9:                                       ; preds = %do.end8
  %Pivot10 = icmp slt i32 %16, 4
  br i1 %Pivot10, label %NodeBlock, label %NodeBlock7

NodeBlock7:                                       ; preds = %NodeBlock9
  %Pivot8 = icmp slt i32 %16, 8
  br i1 %Pivot8, label %LeafBlock3, label %LeafBlock5

LeafBlock5:                                       ; preds = %NodeBlock7
  %SwitchLeaf6 = icmp eq i32 %16, 8
  br i1 %SwitchLeaf6, label %sw.bb3.i, label %NewDefault

LeafBlock3:                                       ; preds = %NodeBlock7
  %SwitchLeaf4 = icmp eq i32 %16, 4
  br i1 %SwitchLeaf4, label %sw.bb2.i, label %NewDefault

NodeBlock:                                        ; preds = %NodeBlock9
  %Pivot = icmp slt i32 %16, 2
  br i1 %Pivot, label %LeafBlock, label %LeafBlock1

LeafBlock1:                                       ; preds = %NodeBlock
  %SwitchLeaf2 = icmp eq i32 %16, 2
  br i1 %SwitchLeaf2, label %sw.bb1.i, label %NewDefault

LeafBlock:                                        ; preds = %NodeBlock
  %SwitchLeaf = icmp eq i32 %16, 1
  br i1 %SwitchLeaf, label %sw.bb.i, label %NewDefault

sw.bb.i:                                          ; preds = %LeafBlock
  %17 = load i8*, i8** %res.addr.i, align 8
  %18 = load i8, i8* %17, align 1
  %19 = load i8*, i8** %p.addr.i, align 8
  store volatile i8 %18, i8* %19, align 1
  br label %__write_once_size.exit

sw.bb1.i:                                         ; preds = %LeafBlock1
  %20 = load i8*, i8** %res.addr.i, align 8
  %21 = bitcast i8* %20 to i16*
  %22 = load i16, i16* %21, align 2
  %23 = load i8*, i8** %p.addr.i, align 8
  %24 = bitcast i8* %23 to i16*
  store volatile i16 %22, i16* %24, align 2
  br label %__write_once_size.exit

sw.bb2.i:                                         ; preds = %LeafBlock3
  %25 = load i8*, i8** %res.addr.i, align 8
  %26 = bitcast i8* %25 to i32*
  %27 = load i32, i32* %26, align 4
  %28 = load i8*, i8** %p.addr.i, align 8
  %29 = bitcast i8* %28 to i32*
  store volatile i32 %27, i32* %29, align 4
  br label %__write_once_size.exit

sw.bb3.i:                                         ; preds = %LeafBlock5
  %30 = load i8*, i8** %res.addr.i, align 8
  %31 = bitcast i8* %30 to i64*
  %32 = load i64, i64* %31, align 8
  %33 = load i8*, i8** %p.addr.i, align 8
  %34 = bitcast i8* %33 to i64*
  store volatile i64 %32, i64* %34, align 8
  br label %__write_once_size.exit

NewDefault:                                       ; preds = %LeafBlock5, %LeafBlock3, %LeafBlock1, %LeafBlock
  br label %sw.default.i

sw.default.i:                                     ; preds = %NewDefault
  call void asm sideeffect "", "~{memory},~{dirflag},~{fpsr},~{flags}"() #3, !srcloc !7
  %35 = load i8*, i8** %p.addr.i, align 8
  %36 = load i8*, i8** %res.addr.i, align 8
  %37 = load i32, i32* %size.addr.i, align 4
  %conv.i = sext i32 %37 to i64
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %35, i8* %36, i64 %conv.i, i32 1, i1 false) #3
  call void asm sideeffect "", "~{memory},~{dirflag},~{fpsr},~{flags}"() #3, !srcloc !8
  br label %__write_once_size.exit

__write_once_size.exit:                           ; preds = %sw.default.i, %sw.bb3.i, %sw.bb2.i, %sw.bb1.i, %sw.bb.i
  %__val10 = bitcast %union.anon.95* %__u to %struct.list_head**
  %38 = load %struct.list_head*, %struct.list_head** %__val10, align 8
  store %struct.list_head* %38, %struct.list_head** %tmp, align 8
  %39 = load %struct.list_head*, %struct.list_head** %tmp, align 8
  br label %do.end11

do.end11:                                         ; preds = %__write_once_size.exit
  %40 = load i64, i64* %_r_a_p__v, align 8
  store i64 %40, i64* %tmp12, align 8
  %41 = load i64, i64* %tmp12, align 8
  %42 = load %struct.list_head*, %struct.list_head** %new.addr, align 8
  %43 = load %struct.list_head*, %struct.list_head** %next.addr, align 8
  %prev13 = getelementptr inbounds %struct.list_head, %struct.list_head* %43, i32 0, i32 1
  store %struct.list_head* %42, %struct.list_head** %prev13, align 8
  br label %return

return:                                           ; preds = %do.end11, %if.then
  ret void
}

; Function Attrs: noinline nounwind optnone uwtable
define internal zeroext i1 @__list_add_valid(%struct.list_head* %new, %struct.list_head* %prev, %struct.list_head* %next) #0 {
entry:
  %new.addr = alloca %struct.list_head*, align 8
  %prev.addr = alloca %struct.list_head*, align 8
  %next.addr = alloca %struct.list_head*, align 8
  store %struct.list_head* %new, %struct.list_head** %new.addr, align 8
  store %struct.list_head* %prev, %struct.list_head** %prev.addr, align 8
  store %struct.list_head* %next, %struct.list_head** %next.addr, align 8
  ret i1 true
}

declare void @__compiletime_assert_56() #1

declare void @nl80211_common_reg_change_event(i32, %struct.regulatory_request*) #1

; Function Attrs: noinline nounwind optnone uwtable
define internal void @rdev_rfkill_poll(%struct.cfg80211_registered_device* %rdev) #0 {
entry:
  %rdev.addr = alloca %struct.cfg80211_registered_device*, align 8
  store %struct.cfg80211_registered_device* %rdev, %struct.cfg80211_registered_device** %rdev.addr, align 8
  %0 = load %struct.cfg80211_registered_device*, %struct.cfg80211_registered_device** %rdev.addr, align 8
  %wiphy = getelementptr inbounds %struct.cfg80211_registered_device, %struct.cfg80211_registered_device* %0, i32 0, i32 42
  call void @trace_rdev_rfkill_poll(%struct.wiphy* %wiphy)
  %1 = load %struct.cfg80211_registered_device*, %struct.cfg80211_registered_device** %rdev.addr, align 8
  %ops = getelementptr inbounds %struct.cfg80211_registered_device, %struct.cfg80211_registered_device* %1, i32 0, i32 0
  %2 = load %struct.cfg80211_ops*, %struct.cfg80211_ops** %ops, align 32
  %rfkill_poll = getelementptr inbounds %struct.cfg80211_ops, %struct.cfg80211_ops* %2, i32 0, i32 52
  %3 = load void (%struct.wiphy*)*, void (%struct.wiphy*)** %rfkill_poll, align 8
  %4 = load %struct.cfg80211_registered_device*, %struct.cfg80211_registered_device** %rdev.addr, align 8
  %wiphy1 = getelementptr inbounds %struct.cfg80211_registered_device, %struct.cfg80211_registered_device* %4, i32 0, i32 42
  call void %3(%struct.wiphy* %wiphy1)
  %5 = load %struct.cfg80211_registered_device*, %struct.cfg80211_registered_device** %rdev.addr, align 8
  %wiphy2 = getelementptr inbounds %struct.cfg80211_registered_device, %struct.cfg80211_registered_device* %5, i32 0, i32 42
  call void @trace_rdev_return_void(%struct.wiphy* %wiphy2)
  ret void
}

; Function Attrs: noinline nounwind optnone uwtable
define internal void @trace_rdev_rfkill_poll(%struct.wiphy* %wiphy) #0 {
entry:
  %p.addr.i = alloca i8*, align 8
  %res.addr.i = alloca i8*, align 8
  %size.addr.i = alloca i32, align 4
  %retval.i = alloca i1, align 1
  %key.addr.i = alloca %struct.static_key*, align 8
  %wiphy.addr = alloca %struct.wiphy*, align 8
  %it_func_ptr = alloca %struct.tracepoint_func*, align 8
  %it_func = alloca i8*, align 8
  %__data = alloca i8*, align 8
  %pscr_ret__ = alloca i32, align 4
  %__vpp_verify = alloca i8*, align 8
  %pfo_ret__ = alloca i32, align 4
  %tmp = alloca i32, align 4
  %tmp2 = alloca i32, align 4
  %________p1 = alloca %struct.tracepoint_func*, align 8
  %_________p1 = alloca %struct.tracepoint_func*, align 8
  %__u = alloca %union.anon.96, align 8
  %tmp5 = alloca %struct.tracepoint_func*, align 8
  %___typecheck_p = alloca %struct.tracepoint_func*, align 8
  %tmp8 = alloca %struct.tracepoint_func*, align 8
  %tmp11 = alloca %struct.tracepoint_func*, align 8
  store %struct.wiphy* %wiphy, %struct.wiphy** %wiphy.addr, align 8
  store %struct.static_key* getelementptr inbounds (%struct.tracepoint, %struct.tracepoint* @__tracepoint_rdev_rfkill_poll, i32 0, i32 1), %struct.static_key** %key.addr.i, align 8
  %0 = load %struct.static_key*, %struct.static_key** %key.addr.i, align 8
  %call.i = call i32 @static_key_count(%struct.static_key* %0) #3
  %cmp.i = icmp sgt i32 %call.i, 0
  %lnot.i = xor i1 %cmp.i, true
  %lnot.ext.i = zext i1 %cmp.i to i32
  %conv.i = sext i32 %lnot.ext.i to i64
  br i1 %cmp.i, label %if.then.i, label %if.end.i

if.then.i:                                        ; preds = %entry
  store i1 true, i1* %retval.i, align 1
  br label %static_key_false.exit

if.end.i:                                         ; preds = %entry
  store i1 false, i1* %retval.i, align 1
  br label %static_key_false.exit

static_key_false.exit:                            ; preds = %if.end.i, %if.then.i
  %1 = load i1, i1* %retval.i, align 1
  br i1 %1, label %if.then, label %if.end21

if.then:                                          ; preds = %static_key_false.exit
  br label %do.body

do.body:                                          ; preds = %if.then
  br label %do.body1

do.body1:                                         ; preds = %do.body
  store i8* null, i8** %__vpp_verify, align 8
  %2 = load i8*, i8** %__vpp_verify, align 8
  br label %do.end

do.end:                                           ; preds = %do.body1
  %3 = call i32 asm "movl %gs:$1,$0", "=r,*m,~{dirflag},~{fpsr},~{flags}"(i32* @cpu_number) #4, !srcloc !22
  store i32 %3, i32* %pfo_ret__, align 4
  %4 = load i32, i32* %pfo_ret__, align 4
  store i32 %4, i32* %tmp, align 4
  %5 = load i32, i32* %tmp, align 4
  store i32 %5, i32* %pscr_ret__, align 4
  %6 = load i32, i32* %pscr_ret__, align 4
  store i32 %6, i32* %tmp2, align 4
  %7 = load i32, i32* %tmp2, align 4
  %call3 = call i32 @cpumask_test_cpu(i32 %7, %struct.cpumask* @__cpu_online_mask)
  %tobool = icmp ne i32 %call3, 0
  br i1 %tobool, label %if.end, label %if.then4

if.then4:                                         ; preds = %do.end
  br label %if.end21

if.end:                                           ; preds = %do.end
  call void @rcu_read_lock_sched_notrace()
  %__c = bitcast %union.anon.96* %__u to [1 x i8]*
  %arraydecay = getelementptr inbounds [1 x i8], [1 x i8]* %__c, i32 0, i32 0
  store i8* bitcast (%struct.tracepoint_func** getelementptr inbounds (%struct.tracepoint, %struct.tracepoint* @__tracepoint_rdev_rfkill_poll, i32 0, i32 4) to i8*), i8** %p.addr.i, align 8
  store i8* %arraydecay, i8** %res.addr.i, align 8
  store i32 8, i32* %size.addr.i, align 4
  %8 = load i32, i32* %size.addr.i, align 4
  br label %NodeBlock9

NodeBlock9:                                       ; preds = %if.end
  %Pivot10 = icmp slt i32 %8, 4
  br i1 %Pivot10, label %NodeBlock, label %NodeBlock7

NodeBlock7:                                       ; preds = %NodeBlock9
  %Pivot8 = icmp slt i32 %8, 8
  br i1 %Pivot8, label %LeafBlock3, label %LeafBlock5

LeafBlock5:                                       ; preds = %NodeBlock7
  %SwitchLeaf6 = icmp eq i32 %8, 8
  br i1 %SwitchLeaf6, label %sw.bb3.i, label %NewDefault

LeafBlock3:                                       ; preds = %NodeBlock7
  %SwitchLeaf4 = icmp eq i32 %8, 4
  br i1 %SwitchLeaf4, label %sw.bb2.i, label %NewDefault

NodeBlock:                                        ; preds = %NodeBlock9
  %Pivot = icmp slt i32 %8, 2
  br i1 %Pivot, label %LeafBlock, label %LeafBlock1

LeafBlock1:                                       ; preds = %NodeBlock
  %SwitchLeaf2 = icmp eq i32 %8, 2
  br i1 %SwitchLeaf2, label %sw.bb1.i, label %NewDefault

LeafBlock:                                        ; preds = %NodeBlock
  %SwitchLeaf = icmp eq i32 %8, 1
  br i1 %SwitchLeaf, label %sw.bb.i, label %NewDefault

sw.bb.i:                                          ; preds = %LeafBlock
  %9 = load i8*, i8** %p.addr.i, align 8
  %10 = load volatile i8, i8* %9, align 1
  %11 = load i8*, i8** %res.addr.i, align 8
  store i8 %10, i8* %11, align 1
  br label %__read_once_size.exit

sw.bb1.i:                                         ; preds = %LeafBlock1
  %12 = load i8*, i8** %p.addr.i, align 8
  %13 = bitcast i8* %12 to i16*
  %14 = load volatile i16, i16* %13, align 2
  %15 = load i8*, i8** %res.addr.i, align 8
  %16 = bitcast i8* %15 to i16*
  store i16 %14, i16* %16, align 2
  br label %__read_once_size.exit

sw.bb2.i:                                         ; preds = %LeafBlock3
  %17 = load i8*, i8** %p.addr.i, align 8
  %18 = bitcast i8* %17 to i32*
  %19 = load volatile i32, i32* %18, align 4
  %20 = load i8*, i8** %res.addr.i, align 8
  %21 = bitcast i8* %20 to i32*
  store i32 %19, i32* %21, align 4
  br label %__read_once_size.exit

sw.bb3.i:                                         ; preds = %LeafBlock5
  %22 = load i8*, i8** %p.addr.i, align 8
  %23 = bitcast i8* %22 to i64*
  %24 = load volatile i64, i64* %23, align 8
  %25 = load i8*, i8** %res.addr.i, align 8
  %26 = bitcast i8* %25 to i64*
  store i64 %24, i64* %26, align 8
  br label %__read_once_size.exit

NewDefault:                                       ; preds = %LeafBlock5, %LeafBlock3, %LeafBlock1, %LeafBlock
  br label %sw.default.i

sw.default.i:                                     ; preds = %NewDefault
  call void asm sideeffect "", "~{memory},~{dirflag},~{fpsr},~{flags}"() #3, !srcloc !3
  %27 = load i8*, i8** %res.addr.i, align 8
  %28 = load i8*, i8** %p.addr.i, align 8
  %29 = load i32, i32* %size.addr.i, align 4
  %conv.i22 = sext i32 %29 to i64
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %27, i8* %28, i64 %conv.i22, i32 1, i1 false) #3
  call void asm sideeffect "", "~{memory},~{dirflag},~{fpsr},~{flags}"() #3, !srcloc !4
  br label %__read_once_size.exit

__read_once_size.exit:                            ; preds = %sw.default.i, %sw.bb3.i, %sw.bb2.i, %sw.bb1.i, %sw.bb.i
  %__val = bitcast %union.anon.96* %__u to %struct.tracepoint_func**
  %30 = load %struct.tracepoint_func*, %struct.tracepoint_func** %__val, align 8
  store %struct.tracepoint_func* %30, %struct.tracepoint_func** %tmp5, align 8
  %31 = load %struct.tracepoint_func*, %struct.tracepoint_func** %tmp5, align 8
  store %struct.tracepoint_func* %31, %struct.tracepoint_func** %_________p1, align 8
  br label %do.body6

do.body6:                                         ; preds = %__read_once_size.exit
  br label %do.end7

do.end7:                                          ; preds = %do.body6
  %32 = load %struct.tracepoint_func*, %struct.tracepoint_func** %_________p1, align 8
  store %struct.tracepoint_func* %32, %struct.tracepoint_func** %tmp8, align 8
  %33 = load %struct.tracepoint_func*, %struct.tracepoint_func** %tmp8, align 8
  store %struct.tracepoint_func* %33, %struct.tracepoint_func** %________p1, align 8
  br label %do.body9

do.body9:                                         ; preds = %do.end7
  br label %do.end10

do.end10:                                         ; preds = %do.body9
  %34 = load %struct.tracepoint_func*, %struct.tracepoint_func** %________p1, align 8
  store %struct.tracepoint_func* %34, %struct.tracepoint_func** %tmp11, align 8
  %35 = load %struct.tracepoint_func*, %struct.tracepoint_func** %tmp11, align 8
  store %struct.tracepoint_func* %35, %struct.tracepoint_func** %it_func_ptr, align 8
  %36 = load %struct.tracepoint_func*, %struct.tracepoint_func** %it_func_ptr, align 8
  %tobool12 = icmp ne %struct.tracepoint_func* %36, null
  br i1 %tobool12, label %if.then13, label %if.end18

if.then13:                                        ; preds = %do.end10
  br label %do.body14

do.body14:                                        ; preds = %do.cond, %if.then13
  %37 = load %struct.tracepoint_func*, %struct.tracepoint_func** %it_func_ptr, align 8
  %func = getelementptr inbounds %struct.tracepoint_func, %struct.tracepoint_func* %37, i32 0, i32 0
  %38 = load i8*, i8** %func, align 8
  store i8* %38, i8** %it_func, align 8
  %39 = load %struct.tracepoint_func*, %struct.tracepoint_func** %it_func_ptr, align 8
  %data = getelementptr inbounds %struct.tracepoint_func, %struct.tracepoint_func* %39, i32 0, i32 1
  %40 = load i8*, i8** %data, align 8
  store i8* %40, i8** %__data, align 8
  %41 = load i8*, i8** %it_func, align 8
  %42 = bitcast i8* %41 to void (i8*, %struct.wiphy*)*
  %43 = load i8*, i8** %__data, align 8
  %44 = load %struct.wiphy*, %struct.wiphy** %wiphy.addr, align 8
  call void %42(i8* %43, %struct.wiphy* %44)
  br label %do.cond

do.cond:                                          ; preds = %do.body14
  %45 = load %struct.tracepoint_func*, %struct.tracepoint_func** %it_func_ptr, align 8
  %incdec.ptr = getelementptr inbounds %struct.tracepoint_func, %struct.tracepoint_func* %45, i32 1
  store %struct.tracepoint_func* %incdec.ptr, %struct.tracepoint_func** %it_func_ptr, align 8
  %func15 = getelementptr inbounds %struct.tracepoint_func, %struct.tracepoint_func* %incdec.ptr, i32 0, i32 0
  %46 = load i8*, i8** %func15, align 8
  %tobool16 = icmp ne i8* %46, null
  br i1 %tobool16, label %do.body14, label %do.end17

do.end17:                                         ; preds = %do.cond
  br label %if.end18

if.end18:                                         ; preds = %do.end17, %do.end10
  call void @rcu_read_unlock_sched_notrace()
  br label %do.end20

do.end20:                                         ; preds = %if.end18
  br label %if.end21

if.end21:                                         ; preds = %do.end20, %if.then4, %static_key_false.exit
  ret void
}

declare void @synchronize_sched() #1

; Function Attrs: noinline nounwind optnone uwtable
define internal void @trace_rdev_set_wakeup(%struct.wiphy* %wiphy, i1 zeroext %enabled) #0 {
entry:
  %p.addr.i = alloca i8*, align 8
  %res.addr.i = alloca i8*, align 8
  %size.addr.i = alloca i32, align 4
  %retval.i = alloca i1, align 1
  %key.addr.i = alloca %struct.static_key*, align 8
  %wiphy.addr = alloca %struct.wiphy*, align 8
  %enabled.addr = alloca i8, align 1
  %it_func_ptr = alloca %struct.tracepoint_func*, align 8
  %it_func = alloca i8*, align 8
  %__data = alloca i8*, align 8
  %pscr_ret__ = alloca i32, align 4
  %__vpp_verify = alloca i8*, align 8
  %pfo_ret__ = alloca i32, align 4
  %tmp = alloca i32, align 4
  %tmp2 = alloca i32, align 4
  %________p1 = alloca %struct.tracepoint_func*, align 8
  %_________p1 = alloca %struct.tracepoint_func*, align 8
  %__u = alloca %union.anon.98, align 8
  %tmp5 = alloca %struct.tracepoint_func*, align 8
  %___typecheck_p = alloca %struct.tracepoint_func*, align 8
  %tmp8 = alloca %struct.tracepoint_func*, align 8
  %tmp11 = alloca %struct.tracepoint_func*, align 8
  store %struct.wiphy* %wiphy, %struct.wiphy** %wiphy.addr, align 8
  %frombool = zext i1 %enabled to i8
  store i8 %frombool, i8* %enabled.addr, align 1
  store %struct.static_key* getelementptr inbounds (%struct.tracepoint, %struct.tracepoint* @__tracepoint_rdev_set_wakeup, i32 0, i32 1), %struct.static_key** %key.addr.i, align 8
  %0 = load %struct.static_key*, %struct.static_key** %key.addr.i, align 8
  %call.i = call i32 @static_key_count(%struct.static_key* %0) #3
  %cmp.i = icmp sgt i32 %call.i, 0
  %lnot.i = xor i1 %cmp.i, true
  %lnot.ext.i = zext i1 %cmp.i to i32
  %conv.i = sext i32 %lnot.ext.i to i64
  br i1 %cmp.i, label %if.then.i, label %if.end.i

if.then.i:                                        ; preds = %entry
  store i1 true, i1* %retval.i, align 1
  br label %static_key_false.exit

if.end.i:                                         ; preds = %entry
  store i1 false, i1* %retval.i, align 1
  br label %static_key_false.exit

static_key_false.exit:                            ; preds = %if.end.i, %if.then.i
  %1 = load i1, i1* %retval.i, align 1
  br i1 %1, label %if.then, label %if.end22

if.then:                                          ; preds = %static_key_false.exit
  br label %do.body

do.body:                                          ; preds = %if.then
  br label %do.body1

do.body1:                                         ; preds = %do.body
  store i8* null, i8** %__vpp_verify, align 8
  %2 = load i8*, i8** %__vpp_verify, align 8
  br label %do.end

do.end:                                           ; preds = %do.body1
  %3 = call i32 asm "movl %gs:$1,$0", "=r,*m,~{dirflag},~{fpsr},~{flags}"(i32* @cpu_number) #4, !srcloc !23
  store i32 %3, i32* %pfo_ret__, align 4
  %4 = load i32, i32* %pfo_ret__, align 4
  store i32 %4, i32* %tmp, align 4
  %5 = load i32, i32* %tmp, align 4
  store i32 %5, i32* %pscr_ret__, align 4
  %6 = load i32, i32* %pscr_ret__, align 4
  store i32 %6, i32* %tmp2, align 4
  %7 = load i32, i32* %tmp2, align 4
  %call3 = call i32 @cpumask_test_cpu(i32 %7, %struct.cpumask* @__cpu_online_mask)
  %tobool = icmp ne i32 %call3, 0
  br i1 %tobool, label %if.end, label %if.then4

if.then4:                                         ; preds = %do.end
  br label %if.end22

if.end:                                           ; preds = %do.end
  call void @rcu_read_lock_sched_notrace()
  %__c = bitcast %union.anon.98* %__u to [1 x i8]*
  %arraydecay = getelementptr inbounds [1 x i8], [1 x i8]* %__c, i32 0, i32 0
  store i8* bitcast (%struct.tracepoint_func** getelementptr inbounds (%struct.tracepoint, %struct.tracepoint* @__tracepoint_rdev_set_wakeup, i32 0, i32 4) to i8*), i8** %p.addr.i, align 8
  store i8* %arraydecay, i8** %res.addr.i, align 8
  store i32 8, i32* %size.addr.i, align 4
  %8 = load i32, i32* %size.addr.i, align 4
  br label %NodeBlock9

NodeBlock9:                                       ; preds = %if.end
  %Pivot10 = icmp slt i32 %8, 4
  br i1 %Pivot10, label %NodeBlock, label %NodeBlock7

NodeBlock7:                                       ; preds = %NodeBlock9
  %Pivot8 = icmp slt i32 %8, 8
  br i1 %Pivot8, label %LeafBlock3, label %LeafBlock5

LeafBlock5:                                       ; preds = %NodeBlock7
  %SwitchLeaf6 = icmp eq i32 %8, 8
  br i1 %SwitchLeaf6, label %sw.bb3.i, label %NewDefault

LeafBlock3:                                       ; preds = %NodeBlock7
  %SwitchLeaf4 = icmp eq i32 %8, 4
  br i1 %SwitchLeaf4, label %sw.bb2.i, label %NewDefault

NodeBlock:                                        ; preds = %NodeBlock9
  %Pivot = icmp slt i32 %8, 2
  br i1 %Pivot, label %LeafBlock, label %LeafBlock1

LeafBlock1:                                       ; preds = %NodeBlock
  %SwitchLeaf2 = icmp eq i32 %8, 2
  br i1 %SwitchLeaf2, label %sw.bb1.i, label %NewDefault

LeafBlock:                                        ; preds = %NodeBlock
  %SwitchLeaf = icmp eq i32 %8, 1
  br i1 %SwitchLeaf, label %sw.bb.i, label %NewDefault

sw.bb.i:                                          ; preds = %LeafBlock
  %9 = load i8*, i8** %p.addr.i, align 8
  %10 = load volatile i8, i8* %9, align 1
  %11 = load i8*, i8** %res.addr.i, align 8
  store i8 %10, i8* %11, align 1
  br label %__read_once_size.exit

sw.bb1.i:                                         ; preds = %LeafBlock1
  %12 = load i8*, i8** %p.addr.i, align 8
  %13 = bitcast i8* %12 to i16*
  %14 = load volatile i16, i16* %13, align 2
  %15 = load i8*, i8** %res.addr.i, align 8
  %16 = bitcast i8* %15 to i16*
  store i16 %14, i16* %16, align 2
  br label %__read_once_size.exit

sw.bb2.i:                                         ; preds = %LeafBlock3
  %17 = load i8*, i8** %p.addr.i, align 8
  %18 = bitcast i8* %17 to i32*
  %19 = load volatile i32, i32* %18, align 4
  %20 = load i8*, i8** %res.addr.i, align 8
  %21 = bitcast i8* %20 to i32*
  store i32 %19, i32* %21, align 4
  br label %__read_once_size.exit

sw.bb3.i:                                         ; preds = %LeafBlock5
  %22 = load i8*, i8** %p.addr.i, align 8
  %23 = bitcast i8* %22 to i64*
  %24 = load volatile i64, i64* %23, align 8
  %25 = load i8*, i8** %res.addr.i, align 8
  %26 = bitcast i8* %25 to i64*
  store i64 %24, i64* %26, align 8
  br label %__read_once_size.exit

NewDefault:                                       ; preds = %LeafBlock5, %LeafBlock3, %LeafBlock1, %LeafBlock
  br label %sw.default.i

sw.default.i:                                     ; preds = %NewDefault
  call void asm sideeffect "", "~{memory},~{dirflag},~{fpsr},~{flags}"() #3, !srcloc !3
  %27 = load i8*, i8** %res.addr.i, align 8
  %28 = load i8*, i8** %p.addr.i, align 8
  %29 = load i32, i32* %size.addr.i, align 4
  %conv.i23 = sext i32 %29 to i64
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %27, i8* %28, i64 %conv.i23, i32 1, i1 false) #3
  call void asm sideeffect "", "~{memory},~{dirflag},~{fpsr},~{flags}"() #3, !srcloc !4
  br label %__read_once_size.exit

__read_once_size.exit:                            ; preds = %sw.default.i, %sw.bb3.i, %sw.bb2.i, %sw.bb1.i, %sw.bb.i
  %__val = bitcast %union.anon.98* %__u to %struct.tracepoint_func**
  %30 = load %struct.tracepoint_func*, %struct.tracepoint_func** %__val, align 8
  store %struct.tracepoint_func* %30, %struct.tracepoint_func** %tmp5, align 8
  %31 = load %struct.tracepoint_func*, %struct.tracepoint_func** %tmp5, align 8
  store %struct.tracepoint_func* %31, %struct.tracepoint_func** %_________p1, align 8
  br label %do.body6

do.body6:                                         ; preds = %__read_once_size.exit
  br label %do.end7

do.end7:                                          ; preds = %do.body6
  %32 = load %struct.tracepoint_func*, %struct.tracepoint_func** %_________p1, align 8
  store %struct.tracepoint_func* %32, %struct.tracepoint_func** %tmp8, align 8
  %33 = load %struct.tracepoint_func*, %struct.tracepoint_func** %tmp8, align 8
  store %struct.tracepoint_func* %33, %struct.tracepoint_func** %________p1, align 8
  br label %do.body9

do.body9:                                         ; preds = %do.end7
  br label %do.end10

do.end10:                                         ; preds = %do.body9
  %34 = load %struct.tracepoint_func*, %struct.tracepoint_func** %________p1, align 8
  store %struct.tracepoint_func* %34, %struct.tracepoint_func** %tmp11, align 8
  %35 = load %struct.tracepoint_func*, %struct.tracepoint_func** %tmp11, align 8
  store %struct.tracepoint_func* %35, %struct.tracepoint_func** %it_func_ptr, align 8
  %36 = load %struct.tracepoint_func*, %struct.tracepoint_func** %it_func_ptr, align 8
  %tobool12 = icmp ne %struct.tracepoint_func* %36, null
  br i1 %tobool12, label %if.then13, label %if.end19

if.then13:                                        ; preds = %do.end10
  br label %do.body14

do.body14:                                        ; preds = %do.cond, %if.then13
  %37 = load %struct.tracepoint_func*, %struct.tracepoint_func** %it_func_ptr, align 8
  %func = getelementptr inbounds %struct.tracepoint_func, %struct.tracepoint_func* %37, i32 0, i32 0
  %38 = load i8*, i8** %func, align 8
  store i8* %38, i8** %it_func, align 8
  %39 = load %struct.tracepoint_func*, %struct.tracepoint_func** %it_func_ptr, align 8
  %data = getelementptr inbounds %struct.tracepoint_func, %struct.tracepoint_func* %39, i32 0, i32 1
  %40 = load i8*, i8** %data, align 8
  store i8* %40, i8** %__data, align 8
  %41 = load i8*, i8** %it_func, align 8
  %42 = bitcast i8* %41 to void (i8*, %struct.wiphy*, i1)*
  %43 = load i8*, i8** %__data, align 8
  %44 = load %struct.wiphy*, %struct.wiphy** %wiphy.addr, align 8
  %45 = load i8, i8* %enabled.addr, align 1
  %tobool15 = trunc i8 %45 to i1
  call void %42(i8* %43, %struct.wiphy* %44, i1 zeroext %tobool15)
  br label %do.cond

do.cond:                                          ; preds = %do.body14
  %46 = load %struct.tracepoint_func*, %struct.tracepoint_func** %it_func_ptr, align 8
  %incdec.ptr = getelementptr inbounds %struct.tracepoint_func, %struct.tracepoint_func* %46, i32 1
  store %struct.tracepoint_func* %incdec.ptr, %struct.tracepoint_func** %it_func_ptr, align 8
  %func16 = getelementptr inbounds %struct.tracepoint_func, %struct.tracepoint_func* %incdec.ptr, i32 0, i32 0
  %47 = load i8*, i8** %func16, align 8
  %tobool17 = icmp ne i8* %47, null
  br i1 %tobool17, label %do.body14, label %do.end18

do.end18:                                         ; preds = %do.cond
  br label %if.end19

if.end19:                                         ; preds = %do.end18, %do.end10
  call void @rcu_read_unlock_sched_notrace()
  br label %do.end21

do.end21:                                         ; preds = %if.end19
  br label %if.end22

if.end22:                                         ; preds = %do.end21, %if.then4, %static_key_false.exit
  ret void
}

declare void @sock_release(%struct.socket*) #1

declare void @mutex_lock(%struct.mutex*) #1

declare void @mutex_unlock(%struct.mutex*) #1

; Function Attrs: noinline nounwind optnone uwtable
define internal void @__list_add(%struct.list_head* %new, %struct.list_head* %prev, %struct.list_head* %next) #0 {
entry:
  %p.addr.i = alloca i8*, align 8
  %res.addr.i = alloca i8*, align 8
  %size.addr.i = alloca i32, align 4
  %new.addr = alloca %struct.list_head*, align 8
  %prev.addr = alloca %struct.list_head*, align 8
  %next.addr = alloca %struct.list_head*, align 8
  %__u = alloca %union.anon.100, align 8
  %tmp = alloca %struct.list_head*, align 8
  store %struct.list_head* %new, %struct.list_head** %new.addr, align 8
  store %struct.list_head* %prev, %struct.list_head** %prev.addr, align 8
  store %struct.list_head* %next, %struct.list_head** %next.addr, align 8
  %0 = load %struct.list_head*, %struct.list_head** %new.addr, align 8
  %1 = load %struct.list_head*, %struct.list_head** %prev.addr, align 8
  %2 = load %struct.list_head*, %struct.list_head** %next.addr, align 8
  %call = call zeroext i1 @__list_add_valid(%struct.list_head* %0, %struct.list_head* %1, %struct.list_head* %2)
  br i1 %call, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  br label %return

if.end:                                           ; preds = %entry
  %3 = load %struct.list_head*, %struct.list_head** %new.addr, align 8
  %4 = load %struct.list_head*, %struct.list_head** %next.addr, align 8
  %prev1 = getelementptr inbounds %struct.list_head, %struct.list_head* %4, i32 0, i32 1
  store %struct.list_head* %3, %struct.list_head** %prev1, align 8
  %5 = load %struct.list_head*, %struct.list_head** %next.addr, align 8
  %6 = load %struct.list_head*, %struct.list_head** %new.addr, align 8
  %next2 = getelementptr inbounds %struct.list_head, %struct.list_head* %6, i32 0, i32 0
  store %struct.list_head* %5, %struct.list_head** %next2, align 8
  %7 = load %struct.list_head*, %struct.list_head** %prev.addr, align 8
  %8 = load %struct.list_head*, %struct.list_head** %new.addr, align 8
  %prev3 = getelementptr inbounds %struct.list_head, %struct.list_head* %8, i32 0, i32 1
  store %struct.list_head* %7, %struct.list_head** %prev3, align 8
  %__val = bitcast %union.anon.100* %__u to %struct.list_head**
  %9 = load %struct.list_head*, %struct.list_head** %new.addr, align 8
  store %struct.list_head* %9, %struct.list_head** %__val, align 8
  %10 = load %struct.list_head*, %struct.list_head** %prev.addr, align 8
  %next4 = getelementptr inbounds %struct.list_head, %struct.list_head* %10, i32 0, i32 0
  %11 = bitcast %struct.list_head** %next4 to i8*
  %__c = bitcast %union.anon.100* %__u to [1 x i8]*
  %arraydecay = getelementptr inbounds [1 x i8], [1 x i8]* %__c, i32 0, i32 0
  store i8* %11, i8** %p.addr.i, align 8
  store i8* %arraydecay, i8** %res.addr.i, align 8
  store i32 8, i32* %size.addr.i, align 4
  %12 = load i32, i32* %size.addr.i, align 4
  br label %NodeBlock9

NodeBlock9:                                       ; preds = %if.end
  %Pivot10 = icmp slt i32 %12, 4
  br i1 %Pivot10, label %NodeBlock, label %NodeBlock7

NodeBlock7:                                       ; preds = %NodeBlock9
  %Pivot8 = icmp slt i32 %12, 8
  br i1 %Pivot8, label %LeafBlock3, label %LeafBlock5

LeafBlock5:                                       ; preds = %NodeBlock7
  %SwitchLeaf6 = icmp eq i32 %12, 8
  br i1 %SwitchLeaf6, label %sw.bb3.i, label %NewDefault

LeafBlock3:                                       ; preds = %NodeBlock7
  %SwitchLeaf4 = icmp eq i32 %12, 4
  br i1 %SwitchLeaf4, label %sw.bb2.i, label %NewDefault

NodeBlock:                                        ; preds = %NodeBlock9
  %Pivot = icmp slt i32 %12, 2
  br i1 %Pivot, label %LeafBlock, label %LeafBlock1

LeafBlock1:                                       ; preds = %NodeBlock
  %SwitchLeaf2 = icmp eq i32 %12, 2
  br i1 %SwitchLeaf2, label %sw.bb1.i, label %NewDefault

LeafBlock:                                        ; preds = %NodeBlock
  %SwitchLeaf = icmp eq i32 %12, 1
  br i1 %SwitchLeaf, label %sw.bb.i, label %NewDefault

sw.bb.i:                                          ; preds = %LeafBlock
  %13 = load i8*, i8** %res.addr.i, align 8
  %14 = load i8, i8* %13, align 1
  %15 = load i8*, i8** %p.addr.i, align 8
  store volatile i8 %14, i8* %15, align 1
  br label %__write_once_size.exit

sw.bb1.i:                                         ; preds = %LeafBlock1
  %16 = load i8*, i8** %res.addr.i, align 8
  %17 = bitcast i8* %16 to i16*
  %18 = load i16, i16* %17, align 2
  %19 = load i8*, i8** %p.addr.i, align 8
  %20 = bitcast i8* %19 to i16*
  store volatile i16 %18, i16* %20, align 2
  br label %__write_once_size.exit

sw.bb2.i:                                         ; preds = %LeafBlock3
  %21 = load i8*, i8** %res.addr.i, align 8
  %22 = bitcast i8* %21 to i32*
  %23 = load i32, i32* %22, align 4
  %24 = load i8*, i8** %p.addr.i, align 8
  %25 = bitcast i8* %24 to i32*
  store volatile i32 %23, i32* %25, align 4
  br label %__write_once_size.exit

sw.bb3.i:                                         ; preds = %LeafBlock5
  %26 = load i8*, i8** %res.addr.i, align 8
  %27 = bitcast i8* %26 to i64*
  %28 = load i64, i64* %27, align 8
  %29 = load i8*, i8** %p.addr.i, align 8
  %30 = bitcast i8* %29 to i64*
  store volatile i64 %28, i64* %30, align 8
  br label %__write_once_size.exit

NewDefault:                                       ; preds = %LeafBlock5, %LeafBlock3, %LeafBlock1, %LeafBlock
  br label %sw.default.i

sw.default.i:                                     ; preds = %NewDefault
  call void asm sideeffect "", "~{memory},~{dirflag},~{fpsr},~{flags}"() #3, !srcloc !7
  %31 = load i8*, i8** %p.addr.i, align 8
  %32 = load i8*, i8** %res.addr.i, align 8
  %33 = load i32, i32* %size.addr.i, align 4
  %conv.i = sext i32 %33 to i64
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %31, i8* %32, i64 %conv.i, i32 1, i1 false) #3
  call void asm sideeffect "", "~{memory},~{dirflag},~{fpsr},~{flags}"() #3, !srcloc !8
  br label %__write_once_size.exit

__write_once_size.exit:                           ; preds = %sw.default.i, %sw.bb3.i, %sw.bb2.i, %sw.bb1.i, %sw.bb.i
  %__val5 = bitcast %union.anon.100* %__u to %struct.list_head**
  %34 = load %struct.list_head*, %struct.list_head** %__val5, align 8
  store %struct.list_head* %34, %struct.list_head** %tmp, align 8
  %35 = load %struct.list_head*, %struct.list_head** %tmp, align 8
  br label %return

return:                                           ; preds = %__write_once_size.exit, %if.then
  ret void
}

declare void @_raw_spin_unlock_irqrestore(%struct.raw_spinlock*, i64) #1 section ".spinlock.text"

declare zeroext i1 @queue_work_on(i32, %struct.workqueue_struct*, %struct.work_struct*) #1

declare i32 @register_pernet_device(%struct.pernet_operations*) #1

declare i32 @wiphy_sysfs_init() #1

declare i32 @register_netdevice_notifier(%struct.notifier_block*) #1

declare i32 @nl80211_init() #1

declare i32 @regulatory_init() #1 section ".init.text"

declare %struct.workqueue_struct* @__alloc_workqueue_key(i8*, i32, i32, %struct.lock_class_key*, i8*, ...) #1

; Function Attrs: noinline nounwind optnone uwtable
define internal i32 @cfg80211_netdev_notifier_call(%struct.notifier_block* %nb, i64 %state, i8* %ptr) #0 {
entry:
  %lock.addr.i230 = alloca %struct.spinlock*, align 8
  %lock.addr.i = alloca %struct.spinlock*, align 8
  %retval = alloca i32, align 4
  %nb.addr = alloca %struct.notifier_block*, align 8
  %state.addr = alloca i64, align 8
  %ptr.addr = alloca i8*, align 8
  %dev = alloca %struct.net_device*, align 8
  %wdev = alloca %struct.wireless_dev*, align 8
  %rdev = alloca %struct.cfg80211_registered_device*, align 8
  %sched_scan_req = alloca %struct.cfg80211_sched_scan_request*, align 8
  %__ret_warn_on = alloca i32, align 4
  %tmp = alloca i64, align 8
  %.compoundliteral = alloca %struct.raw_spinlock, align 4
  %.compoundliteral30 = alloca %struct.raw_spinlock, align 4
  %.compoundliteral68 = alloca %struct.atomic64_t, align 8
  %__ret_warn_on84 = alloca i32, align 4
  %tmp102 = alloca i64, align 8
  %tmp116 = alloca %struct.cfg80211_sched_scan_request*, align 8
  %__ret_warn_on118 = alloca i32, align 4
  %tmp137 = alloca i64, align 8
  %__ret_warn_on186 = alloca i32, align 4
  %tmp201 = alloca i64, align 8
  store %struct.notifier_block* %nb, %struct.notifier_block** %nb.addr, align 8
  store i64 %state, i64* %state.addr, align 8
  store i8* %ptr, i8** %ptr.addr, align 8
  %0 = load i8*, i8** %ptr.addr, align 8
  %1 = bitcast i8* %0 to %struct.netdev_notifier_info*
  %call = call %struct.net_device* @netdev_notifier_info_to_dev(%struct.netdev_notifier_info* %1)
  store %struct.net_device* %call, %struct.net_device** %dev, align 8
  %2 = load %struct.net_device*, %struct.net_device** %dev, align 8
  %ieee80211_ptr = getelementptr inbounds %struct.net_device, %struct.net_device* %2, i32 0, i32 69
  %3 = load %struct.wireless_dev*, %struct.wireless_dev** %ieee80211_ptr, align 8
  store %struct.wireless_dev* %3, %struct.wireless_dev** %wdev, align 8
  %4 = load %struct.wireless_dev*, %struct.wireless_dev** %wdev, align 8
  %tobool = icmp ne %struct.wireless_dev* %4, null
  br i1 %tobool, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  store i32 0, i32* %retval, align 4
  br label %return

if.end:                                           ; preds = %entry
  %5 = load %struct.wireless_dev*, %struct.wireless_dev** %wdev, align 8
  %wiphy = getelementptr inbounds %struct.wireless_dev, %struct.wireless_dev* %5, i32 0, i32 0
  %6 = load %struct.wiphy*, %struct.wiphy** %wiphy, align 8
  %call1 = call %struct.cfg80211_registered_device* @wiphy_to_rdev(%struct.wiphy* %6)
  store %struct.cfg80211_registered_device* %call1, %struct.cfg80211_registered_device** %rdev, align 8
  %7 = load %struct.wireless_dev*, %struct.wireless_dev** %wdev, align 8
  %iftype = getelementptr inbounds %struct.wireless_dev, %struct.wireless_dev* %7, i32 0, i32 1
  %8 = load i32, i32* %iftype, align 8
  %cmp = icmp eq i32 %8, 0
  %lnot = xor i1 %cmp, true
  %lnot2 = xor i1 %lnot, true
  %lnot.ext = zext i1 %lnot2 to i32
  store i32 %lnot.ext, i32* %__ret_warn_on, align 4
  %9 = load i32, i32* %__ret_warn_on, align 4
  %tobool3 = icmp ne i32 %9, 0
  %lnot4 = xor i1 %tobool3, true
  %lnot6 = xor i1 %lnot4, true
  %lnot.ext7 = zext i1 %lnot6 to i32
  %conv = sext i32 %lnot.ext7 to i64
  %tobool8 = icmp ne i64 %conv, 0
  br i1 %tobool8, label %if.then9, label %if.end10

if.then9:                                         ; preds = %if.end
  call void @warn_slowpath_null(i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.1, i32 0, i32 0), i32 1099)
  br label %if.end10

if.end10:                                         ; preds = %if.then9, %if.end
  %10 = load i32, i32* %__ret_warn_on, align 4
  %tobool11 = icmp ne i32 %10, 0
  %lnot12 = xor i1 %tobool11, true
  %lnot14 = xor i1 %lnot12, true
  %lnot.ext15 = zext i1 %lnot14 to i32
  %conv16 = sext i32 %lnot.ext15 to i64
  store i64 %conv16, i64* %tmp, align 8
  %11 = load i64, i64* %tmp, align 8
  %12 = load i64, i64* %state.addr, align 8
  br label %NodeBlock19

NodeBlock19:                                      ; preds = %if.end10
  %Pivot20 = icmp slt i64 %12, 6
  br i1 %Pivot20, label %NodeBlock3, label %NodeBlock17

NodeBlock17:                                      ; preds = %NodeBlock19
  %Pivot18 = icmp slt i64 %12, 13
  br i1 %Pivot18, label %NodeBlock9, label %NodeBlock15

NodeBlock15:                                      ; preds = %NodeBlock17
  %Pivot16 = icmp slt i64 %12, 16
  br i1 %Pivot16, label %LeafBlock11, label %LeafBlock13

LeafBlock13:                                      ; preds = %NodeBlock15
  %SwitchLeaf14 = icmp eq i64 %12, 16
  br i1 %SwitchLeaf14, label %sw.bb, label %NewDefault

LeafBlock11:                                      ; preds = %NodeBlock15
  %SwitchLeaf12 = icmp eq i64 %12, 13
  br i1 %SwitchLeaf12, label %sw.bb215, label %NewDefault

NodeBlock9:                                       ; preds = %NodeBlock17
  %Pivot10 = icmp slt i64 %12, 9
  br i1 %Pivot10, label %LeafBlock5, label %LeafBlock7

LeafBlock7:                                       ; preds = %NodeBlock9
  %SwitchLeaf8 = icmp eq i64 %12, 9
  br i1 %SwitchLeaf8, label %sw.bb74, label %NewDefault

LeafBlock5:                                       ; preds = %NodeBlock9
  %SwitchLeaf6 = icmp eq i64 %12, 6
  br i1 %SwitchLeaf6, label %sw.bb172, label %NewDefault

NodeBlock3:                                       ; preds = %NodeBlock19
  %Pivot4 = icmp slt i64 %12, 2
  br i1 %Pivot4, label %LeafBlock, label %NodeBlock

NodeBlock:                                        ; preds = %NodeBlock3
  %Pivot = icmp slt i64 %12, 5
  br i1 %Pivot, label %LeafBlock1, label %sw.bb18

LeafBlock1:                                       ; preds = %NodeBlock
  %SwitchLeaf2 = icmp eq i64 %12, 2
  br i1 %SwitchLeaf2, label %sw.bb75, label %NewDefault

LeafBlock:                                        ; preds = %NodeBlock3
  %SwitchLeaf = icmp eq i64 %12, 1
  br i1 %SwitchLeaf, label %sw.bb148, label %NewDefault

sw.bb:                                            ; preds = %LeafBlock13
  %13 = load %struct.net_device*, %struct.net_device** %dev, align 8
  %dev17 = getelementptr inbounds %struct.net_device, %struct.net_device* %13, i32 0, i32 106
  %type = getelementptr inbounds %struct.device, %struct.device* %dev17, i32 0, i32 4
  store %struct.device_type* @wiphy_type, %struct.device_type** %type, align 8
  br label %sw.epilog229

sw.bb18:                                          ; preds = %NodeBlock
  br label %do.body

do.body:                                          ; preds = %sw.bb18
  %14 = load %struct.wireless_dev*, %struct.wireless_dev** %wdev, align 8
  %mtx = getelementptr inbounds %struct.wireless_dev, %struct.wireless_dev* %14, i32 0, i32 7
  call void @__mutex_init(%struct.mutex* %mtx, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.11, i32 0, i32 0), %struct.lock_class_key* @cfg80211_netdev_notifier_call.__key)
  br label %do.end

do.end:                                           ; preds = %do.body
  %15 = load %struct.wireless_dev*, %struct.wireless_dev** %wdev, align 8
  %event_list = getelementptr inbounds %struct.wireless_dev, %struct.wireless_dev* %15, i32 0, i32 21
  call void @INIT_LIST_HEAD(%struct.list_head* %event_list)
  br label %do.body19

do.body19:                                        ; preds = %do.end
  %16 = load %struct.wireless_dev*, %struct.wireless_dev** %wdev, align 8
  %event_lock = getelementptr inbounds %struct.wireless_dev, %struct.wireless_dev* %16, i32 0, i32 22
  store %struct.spinlock* %event_lock, %struct.spinlock** %lock.addr.i, align 8
  %17 = load %struct.spinlock*, %struct.spinlock** %lock.addr.i, align 8
  %18 = getelementptr inbounds %struct.spinlock, %struct.spinlock* %17, i32 0, i32 0
  %rlock.i = bitcast %union.anon.1* %18 to %struct.raw_spinlock*
  br label %do.body21

do.body21:                                        ; preds = %do.body19
  %19 = load %struct.wireless_dev*, %struct.wireless_dev** %wdev, align 8
  %event_lock22 = getelementptr inbounds %struct.wireless_dev, %struct.wireless_dev* %19, i32 0, i32 22
  %20 = getelementptr inbounds %struct.spinlock, %struct.spinlock* %event_lock22, i32 0, i32 0
  %rlock = bitcast %union.anon.1* %20 to %struct.raw_spinlock*
  %raw_lock = getelementptr inbounds %struct.raw_spinlock, %struct.raw_spinlock* %.compoundliteral, i32 0, i32 0
  %val = getelementptr inbounds %struct.qspinlock, %struct.qspinlock* %raw_lock, i32 0, i32 0
  %counter = getelementptr inbounds %struct.atomic_t, %struct.atomic_t* %val, i32 0, i32 0
  store i32 0, i32* %counter, align 4
  %21 = bitcast %struct.raw_spinlock* %rlock to i8*
  %22 = bitcast %struct.raw_spinlock* %.compoundliteral to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %21, i8* %22, i64 4, i32 4, i1 false)
  br label %do.end23

do.end23:                                         ; preds = %do.body21
  br label %do.end24

do.end24:                                         ; preds = %do.end23
  %23 = load %struct.wireless_dev*, %struct.wireless_dev** %wdev, align 8
  %mgmt_registrations = getelementptr inbounds %struct.wireless_dev, %struct.wireless_dev* %23, i32 0, i32 5
  call void @INIT_LIST_HEAD(%struct.list_head* %mgmt_registrations)
  br label %do.body25

do.body25:                                        ; preds = %do.end24
  %24 = load %struct.wireless_dev*, %struct.wireless_dev** %wdev, align 8
  %mgmt_registrations_lock = getelementptr inbounds %struct.wireless_dev, %struct.wireless_dev* %24, i32 0, i32 6
  store %struct.spinlock* %mgmt_registrations_lock, %struct.spinlock** %lock.addr.i230, align 8
  %25 = load %struct.spinlock*, %struct.spinlock** %lock.addr.i230, align 8
  %26 = getelementptr inbounds %struct.spinlock, %struct.spinlock* %25, i32 0, i32 0
  %rlock.i231 = bitcast %union.anon.1* %26 to %struct.raw_spinlock*
  br label %do.body27

do.body27:                                        ; preds = %do.body25
  %27 = load %struct.wireless_dev*, %struct.wireless_dev** %wdev, align 8
  %mgmt_registrations_lock28 = getelementptr inbounds %struct.wireless_dev, %struct.wireless_dev* %27, i32 0, i32 6
  %28 = getelementptr inbounds %struct.spinlock, %struct.spinlock* %mgmt_registrations_lock28, i32 0, i32 0
  %rlock29 = bitcast %union.anon.1* %28 to %struct.raw_spinlock*
  %raw_lock31 = getelementptr inbounds %struct.raw_spinlock, %struct.raw_spinlock* %.compoundliteral30, i32 0, i32 0
  %val32 = getelementptr inbounds %struct.qspinlock, %struct.qspinlock* %raw_lock31, i32 0, i32 0
  %counter33 = getelementptr inbounds %struct.atomic_t, %struct.atomic_t* %val32, i32 0, i32 0
  store i32 0, i32* %counter33, align 4
  %29 = bitcast %struct.raw_spinlock* %rlock29 to i8*
  %30 = bitcast %struct.raw_spinlock* %.compoundliteral30 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %29, i8* %30, i64 4, i32 4, i1 false)
  br label %do.end34

do.end34:                                         ; preds = %do.body27
  br label %do.end35

do.end35:                                         ; preds = %do.end34
  %31 = load %struct.cfg80211_registered_device*, %struct.cfg80211_registered_device** %rdev, align 8
  %wdev_id = getelementptr inbounds %struct.cfg80211_registered_device, %struct.cfg80211_registered_device* %31, i32 0, i32 10
  %32 = load i32, i32* %wdev_id, align 4
  %inc = add nsw i32 %32, 1
  store i32 %inc, i32* %wdev_id, align 4
  %33 = load %struct.wireless_dev*, %struct.wireless_dev** %wdev, align 8
  %identifier = getelementptr inbounds %struct.wireless_dev, %struct.wireless_dev* %33, i32 0, i32 4
  store i32 %inc, i32* %identifier, align 8
  %34 = load %struct.wireless_dev*, %struct.wireless_dev** %wdev, align 8
  %list = getelementptr inbounds %struct.wireless_dev, %struct.wireless_dev* %34, i32 0, i32 2
  %35 = load %struct.cfg80211_registered_device*, %struct.cfg80211_registered_device** %rdev, align 8
  %wiphy36 = getelementptr inbounds %struct.cfg80211_registered_device, %struct.cfg80211_registered_device* %35, i32 0, i32 42
  %wdev_list = getelementptr inbounds %struct.wiphy, %struct.wiphy* %wiphy36, i32 0, i32 55
  call void @list_add_rcu(%struct.list_head* %list, %struct.list_head* %wdev_list)
  %36 = load %struct.cfg80211_registered_device*, %struct.cfg80211_registered_device** %rdev, align 8
  %devlist_generation = getelementptr inbounds %struct.cfg80211_registered_device, %struct.cfg80211_registered_device* %36, i32 0, i32 9
  %37 = load i32, i32* %devlist_generation, align 16
  %inc37 = add nsw i32 %37, 1
  store i32 %inc37, i32* %devlist_generation, align 16
  %38 = load %struct.net_device*, %struct.net_device** %dev, align 8
  %features = getelementptr inbounds %struct.net_device, %struct.net_device* %38, i32 0, i32 16
  %39 = load i64, i64* %features, align 16
  %or = or i64 %39, 8192
  store i64 %or, i64* %features, align 16
  %40 = load %struct.net_device*, %struct.net_device** %dev, align 8
  %dev38 = getelementptr inbounds %struct.net_device, %struct.net_device* %40, i32 0, i32 106
  %kobj = getelementptr inbounds %struct.device, %struct.device* %dev38, i32 0, i32 2
  %41 = load %struct.cfg80211_registered_device*, %struct.cfg80211_registered_device** %rdev, align 8
  %wiphy39 = getelementptr inbounds %struct.cfg80211_registered_device, %struct.cfg80211_registered_device* %41, i32 0, i32 42
  %dev40 = getelementptr inbounds %struct.wiphy, %struct.wiphy* %wiphy39, i32 0, i32 50
  %kobj41 = getelementptr inbounds %struct.device, %struct.device* %dev40, i32 0, i32 2
  %call42 = call i32 @sysfs_create_link(%struct.kobject* %kobj, %struct.kobject* %kobj41, i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.12, i32 0, i32 0))
  %tobool43 = icmp ne i32 %call42, 0
  br i1 %tobool43, label %if.then44, label %if.end46

if.then44:                                        ; preds = %do.end35
  %call45 = call i32 (i8*, ...) @printk(i8* getelementptr inbounds ([55 x i8], [55 x i8]* @.str.13, i32 0, i32 0))
  br label %if.end46

if.end46:                                         ; preds = %if.then44, %do.end35
  %42 = load %struct.net_device*, %struct.net_device** %dev, align 8
  %43 = load %struct.wireless_dev*, %struct.wireless_dev** %wdev, align 8
  %netdev = getelementptr inbounds %struct.wireless_dev, %struct.wireless_dev* %43, i32 0, i32 3
  store %struct.net_device* %42, %struct.net_device** %netdev, align 8
  %44 = load %struct.wireless_dev*, %struct.wireless_dev** %wdev, align 8
  %wiphy47 = getelementptr inbounds %struct.wireless_dev, %struct.wireless_dev* %44, i32 0, i32 0
  %45 = load %struct.wiphy*, %struct.wiphy** %wiphy47, align 8
  %flags = getelementptr inbounds %struct.wiphy, %struct.wiphy* %45, i32 0, i32 10
  %46 = load i32, i32* %flags, align 4
  %and = and i32 %46, 16
  %tobool48 = icmp ne i32 %and, 0
  br i1 %tobool48, label %if.then49, label %if.else

if.then49:                                        ; preds = %if.end46
  %47 = load %struct.wireless_dev*, %struct.wireless_dev** %wdev, align 8
  %ps = getelementptr inbounds %struct.wireless_dev, %struct.wireless_dev* %47, i32 0, i32 28
  store i8 1, i8* %ps, align 2
  br label %if.end51

if.else:                                          ; preds = %if.end46
  %48 = load %struct.wireless_dev*, %struct.wireless_dev** %wdev, align 8
  %ps50 = getelementptr inbounds %struct.wireless_dev, %struct.wireless_dev* %48, i32 0, i32 28
  store i8 0, i8* %ps50, align 2
  br label %if.end51

if.end51:                                         ; preds = %if.else, %if.then49
  %49 = load %struct.wireless_dev*, %struct.wireless_dev** %wdev, align 8
  %ps_timeout = getelementptr inbounds %struct.wireless_dev, %struct.wireless_dev* %49, i32 0, i32 29
  store i32 -1, i32* %ps_timeout, align 4
  %50 = load %struct.wireless_dev*, %struct.wireless_dev** %wdev, align 8
  %iftype52 = getelementptr inbounds %struct.wireless_dev, %struct.wireless_dev* %50, i32 0, i32 1
  %51 = load i32, i32* %iftype52, align 8
  %cmp53 = icmp eq i32 %51, 2
  br i1 %cmp53, label %land.lhs.true, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %if.end51
  %52 = load %struct.wireless_dev*, %struct.wireless_dev** %wdev, align 8
  %iftype55 = getelementptr inbounds %struct.wireless_dev, %struct.wireless_dev* %52, i32 0, i32 1
  %53 = load i32, i32* %iftype55, align 8
  %cmp56 = icmp eq i32 %53, 8
  br i1 %cmp56, label %land.lhs.true, label %lor.lhs.false58

lor.lhs.false58:                                  ; preds = %lor.lhs.false
  %54 = load %struct.wireless_dev*, %struct.wireless_dev** %wdev, align 8
  %iftype59 = getelementptr inbounds %struct.wireless_dev, %struct.wireless_dev* %54, i32 0, i32 1
  %55 = load i32, i32* %iftype59, align 8
  %cmp60 = icmp eq i32 %55, 1
  br i1 %cmp60, label %land.lhs.true, label %if.end65

land.lhs.true:                                    ; preds = %lor.lhs.false58, %lor.lhs.false, %if.end51
  %56 = load %struct.wireless_dev*, %struct.wireless_dev** %wdev, align 8
  %use_4addr = getelementptr inbounds %struct.wireless_dev, %struct.wireless_dev* %56, i32 0, i32 8
  %57 = load i8, i8* %use_4addr, align 8
  %tobool62 = trunc i8 %57 to i1
  br i1 %tobool62, label %if.end65, label %if.then63

if.then63:                                        ; preds = %land.lhs.true
  %58 = load %struct.net_device*, %struct.net_device** %dev, align 8
  %priv_flags = getelementptr inbounds %struct.net_device, %struct.net_device* %58, i32 0, i32 34
  %59 = load i32, i32* %priv_flags, align 4
  %or64 = or i32 %59, 64
  store i32 %or64, i32* %priv_flags, align 4
  br label %if.end65

if.end65:                                         ; preds = %if.then63, %land.lhs.true, %lor.lhs.false58
  br label %do.body66

do.body66:                                        ; preds = %if.end65
  %60 = load %struct.wireless_dev*, %struct.wireless_dev** %wdev, align 8
  %disconnect_wk = getelementptr inbounds %struct.wireless_dev, %struct.wireless_dev* %60, i32 0, i32 19
  call void @__init_work(%struct.work_struct* %disconnect_wk, i32 0)
  %61 = load %struct.wireless_dev*, %struct.wireless_dev** %wdev, align 8
  %disconnect_wk67 = getelementptr inbounds %struct.wireless_dev, %struct.wireless_dev* %61, i32 0, i32 19
  %data = getelementptr inbounds %struct.work_struct, %struct.work_struct* %disconnect_wk67, i32 0, i32 0
  %counter69 = getelementptr inbounds %struct.atomic64_t, %struct.atomic64_t* %.compoundliteral68, i32 0, i32 0
  store i64 68719476704, i64* %counter69, align 8
  %62 = bitcast %struct.atomic64_t* %data to i8*
  %63 = bitcast %struct.atomic64_t* %.compoundliteral68 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %62, i8* %63, i64 8, i32 8, i1 false)
  %64 = load %struct.wireless_dev*, %struct.wireless_dev** %wdev, align 8
  %disconnect_wk70 = getelementptr inbounds %struct.wireless_dev, %struct.wireless_dev* %64, i32 0, i32 19
  %entry71 = getelementptr inbounds %struct.work_struct, %struct.work_struct* %disconnect_wk70, i32 0, i32 1
  call void @INIT_LIST_HEAD(%struct.list_head* %entry71)
  %65 = load %struct.wireless_dev*, %struct.wireless_dev** %wdev, align 8
  %disconnect_wk72 = getelementptr inbounds %struct.wireless_dev, %struct.wireless_dev* %65, i32 0, i32 19
  %func = getelementptr inbounds %struct.work_struct, %struct.work_struct* %disconnect_wk72, i32 0, i32 2
  store void (%struct.work_struct*)* @cfg80211_autodisconnect_wk, void (%struct.work_struct*)** %func, align 8
  br label %do.end73

do.end73:                                         ; preds = %do.body66
  %66 = load %struct.cfg80211_registered_device*, %struct.cfg80211_registered_device** %rdev, align 8
  %67 = load %struct.wireless_dev*, %struct.wireless_dev** %wdev, align 8
  call void @nl80211_notify_iface(%struct.cfg80211_registered_device* %66, %struct.wireless_dev* %67, i32 7)
  br label %sw.epilog229

sw.bb74:                                          ; preds = %LeafBlock7
  %68 = load %struct.cfg80211_registered_device*, %struct.cfg80211_registered_device** %rdev, align 8
  %69 = load %struct.wireless_dev*, %struct.wireless_dev** %wdev, align 8
  call void @cfg80211_leave(%struct.cfg80211_registered_device* %68, %struct.wireless_dev* %69)
  br label %sw.epilog229

sw.bb75:                                          ; preds = %LeafBlock1
  %70 = load %struct.cfg80211_registered_device*, %struct.cfg80211_registered_device** %rdev, align 8
  %71 = load %struct.wireless_dev*, %struct.wireless_dev** %wdev, align 8
  %iftype76 = getelementptr inbounds %struct.wireless_dev, %struct.wireless_dev* %71, i32 0, i32 1
  %72 = load i32, i32* %iftype76, align 8
  call void @cfg80211_update_iface_num(%struct.cfg80211_registered_device* %70, i32 %72, i32 -1)
  %73 = load %struct.cfg80211_registered_device*, %struct.cfg80211_registered_device** %rdev, align 8
  %scan_req = getelementptr inbounds %struct.cfg80211_registered_device, %struct.cfg80211_registered_device* %73, i32 0, i32 25
  %74 = load %struct.cfg80211_scan_request*, %struct.cfg80211_scan_request** %scan_req, align 8
  %tobool77 = icmp ne %struct.cfg80211_scan_request* %74, null
  br i1 %tobool77, label %land.lhs.true78, label %if.end113

land.lhs.true78:                                  ; preds = %sw.bb75
  %75 = load %struct.cfg80211_registered_device*, %struct.cfg80211_registered_device** %rdev, align 8
  %scan_req79 = getelementptr inbounds %struct.cfg80211_registered_device, %struct.cfg80211_registered_device* %75, i32 0, i32 25
  %76 = load %struct.cfg80211_scan_request*, %struct.cfg80211_scan_request** %scan_req79, align 8
  %wdev80 = getelementptr inbounds %struct.cfg80211_scan_request, %struct.cfg80211_scan_request* %76, i32 0, i32 10
  %77 = load %struct.wireless_dev*, %struct.wireless_dev** %wdev80, align 8
  %78 = load %struct.wireless_dev*, %struct.wireless_dev** %wdev, align 8
  %cmp81 = icmp eq %struct.wireless_dev* %77, %78
  br i1 %cmp81, label %if.then83, label %if.end113

if.then83:                                        ; preds = %land.lhs.true78
  %79 = load %struct.cfg80211_registered_device*, %struct.cfg80211_registered_device** %rdev, align 8
  %scan_req85 = getelementptr inbounds %struct.cfg80211_registered_device, %struct.cfg80211_registered_device* %79, i32 0, i32 25
  %80 = load %struct.cfg80211_scan_request*, %struct.cfg80211_scan_request** %scan_req85, align 8
  %notified = getelementptr inbounds %struct.cfg80211_scan_request, %struct.cfg80211_scan_request* %80, i32 0, i32 17
  %81 = load i8, i8* %notified, align 8
  %tobool86 = trunc i8 %81 to i1
  %lnot87 = xor i1 %tobool86, true
  %lnot89 = xor i1 %lnot87, true
  %lnot91 = xor i1 %lnot89, true
  %lnot.ext92 = zext i1 %lnot91 to i32
  store i32 %lnot.ext92, i32* %__ret_warn_on84, align 4
  %82 = load i32, i32* %__ret_warn_on84, align 4
  %tobool93 = icmp ne i32 %82, 0
  %lnot94 = xor i1 %tobool93, true
  %lnot96 = xor i1 %lnot94, true
  %lnot.ext97 = zext i1 %lnot96 to i32
  %conv98 = sext i32 %lnot.ext97 to i64
  %tobool99 = icmp ne i64 %conv98, 0
  br i1 %tobool99, label %if.then100, label %if.end101

if.then100:                                       ; preds = %if.then83
  call void @warn_slowpath_null(i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.1, i32 0, i32 0), i32 1156)
  br label %if.end101

if.end101:                                        ; preds = %if.then100, %if.then83
  %83 = load i32, i32* %__ret_warn_on84, align 4
  %tobool103 = icmp ne i32 %83, 0
  %lnot104 = xor i1 %tobool103, true
  %lnot106 = xor i1 %lnot104, true
  %lnot.ext107 = zext i1 %lnot106 to i32
  %conv108 = sext i32 %lnot.ext107 to i64
  store i64 %conv108, i64* %tmp102, align 8
  %84 = load i64, i64* %tmp102, align 8
  %tobool109 = icmp ne i64 %84, 0
  br i1 %tobool109, label %if.then110, label %if.end112

if.then110:                                       ; preds = %if.end101
  %85 = load %struct.cfg80211_registered_device*, %struct.cfg80211_registered_device** %rdev, align 8
  %scan_req111 = getelementptr inbounds %struct.cfg80211_registered_device, %struct.cfg80211_registered_device* %85, i32 0, i32 25
  %86 = load %struct.cfg80211_scan_request*, %struct.cfg80211_scan_request** %scan_req111, align 8
  %info = getelementptr inbounds %struct.cfg80211_scan_request, %struct.cfg80211_scan_request* %86, i32 0, i32 16
  %aborted = getelementptr inbounds %struct.cfg80211_scan_info, %struct.cfg80211_scan_info* %info, i32 0, i32 2
  store i8 1, i8* %aborted, align 2
  br label %if.end112

if.end112:                                        ; preds = %if.then110, %if.end101
  %87 = load %struct.cfg80211_registered_device*, %struct.cfg80211_registered_device** %rdev, align 8
  call void @___cfg80211_scan_done(%struct.cfg80211_registered_device* %87, i1 zeroext false)
  br label %if.end113

if.end113:                                        ; preds = %if.end112, %land.lhs.true78, %sw.bb75
  br label %do.body114

do.body114:                                       ; preds = %if.end113
  br label %do.end115

do.end115:                                        ; preds = %do.body114
  %88 = load %struct.cfg80211_registered_device*, %struct.cfg80211_registered_device** %rdev, align 8
  %sched_scan_req117 = getelementptr inbounds %struct.cfg80211_registered_device, %struct.cfg80211_registered_device* %88, i32 0, i32 27
  %89 = load %struct.cfg80211_sched_scan_request*, %struct.cfg80211_sched_scan_request** %sched_scan_req117, align 8
  store %struct.cfg80211_sched_scan_request* %89, %struct.cfg80211_sched_scan_request** %tmp116, align 8
  %90 = load %struct.cfg80211_sched_scan_request*, %struct.cfg80211_sched_scan_request** %tmp116, align 8
  store %struct.cfg80211_sched_scan_request* %90, %struct.cfg80211_sched_scan_request** %sched_scan_req, align 8
  %91 = load %struct.cfg80211_sched_scan_request*, %struct.cfg80211_sched_scan_request** %sched_scan_req, align 8
  %tobool119 = icmp ne %struct.cfg80211_sched_scan_request* %91, null
  br i1 %tobool119, label %land.rhs, label %land.end

land.rhs:                                         ; preds = %do.end115
  %92 = load %struct.cfg80211_sched_scan_request*, %struct.cfg80211_sched_scan_request** %sched_scan_req, align 8
  %dev120 = getelementptr inbounds %struct.cfg80211_sched_scan_request, %struct.cfg80211_sched_scan_request* %92, i32 0, i32 19
  %93 = load %struct.net_device*, %struct.net_device** %dev120, align 8
  %94 = load %struct.wireless_dev*, %struct.wireless_dev** %wdev, align 8
  %netdev121 = getelementptr inbounds %struct.wireless_dev, %struct.wireless_dev* %94, i32 0, i32 3
  %95 = load %struct.net_device*, %struct.net_device** %netdev121, align 8
  %cmp122 = icmp eq %struct.net_device* %93, %95
  br label %land.end

land.end:                                         ; preds = %land.rhs, %do.end115
  %96 = phi i1 [ false, %do.end115 ], [ %cmp122, %land.rhs ]
  %lnot124 = xor i1 %96, true
  %lnot126 = xor i1 %lnot124, true
  %lnot.ext127 = zext i1 %lnot126 to i32
  store i32 %lnot.ext127, i32* %__ret_warn_on118, align 4
  %97 = load i32, i32* %__ret_warn_on118, align 4
  %tobool128 = icmp ne i32 %97, 0
  %lnot129 = xor i1 %tobool128, true
  %lnot131 = xor i1 %lnot129, true
  %lnot.ext132 = zext i1 %lnot131 to i32
  %conv133 = sext i32 %lnot.ext132 to i64
  %tobool134 = icmp ne i64 %conv133, 0
  br i1 %tobool134, label %if.then135, label %if.end136

if.then135:                                       ; preds = %land.end
  call void @warn_slowpath_null(i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.1, i32 0, i32 0), i32 1163)
  br label %if.end136

if.end136:                                        ; preds = %if.then135, %land.end
  %98 = load i32, i32* %__ret_warn_on118, align 4
  %tobool138 = icmp ne i32 %98, 0
  %lnot139 = xor i1 %tobool138, true
  %lnot141 = xor i1 %lnot139, true
  %lnot.ext142 = zext i1 %lnot141 to i32
  %conv143 = sext i32 %lnot.ext142 to i64
  store i64 %conv143, i64* %tmp137, align 8
  %99 = load i64, i64* %tmp137, align 8
  %tobool144 = icmp ne i64 %99, 0
  br i1 %tobool144, label %if.then145, label %if.end147

if.then145:                                       ; preds = %if.end136
  %100 = load %struct.cfg80211_registered_device*, %struct.cfg80211_registered_device** %rdev, align 8
  %call146 = call i32 @__cfg80211_stop_sched_scan(%struct.cfg80211_registered_device* %100, i1 zeroext false)
  br label %if.end147

if.end147:                                        ; preds = %if.then145, %if.end136
  %101 = load %struct.cfg80211_registered_device*, %struct.cfg80211_registered_device** %rdev, align 8
  %opencount = getelementptr inbounds %struct.cfg80211_registered_device, %struct.cfg80211_registered_device* %101, i32 0, i32 11
  %102 = load i32, i32* %opencount, align 8
  %dec = add nsw i32 %102, -1
  store i32 %dec, i32* %opencount, align 8
  %103 = load %struct.cfg80211_registered_device*, %struct.cfg80211_registered_device** %rdev, align 8
  %dev_wait = getelementptr inbounds %struct.cfg80211_registered_device, %struct.cfg80211_registered_device* %103, i32 0, i32 12
  call void @__wake_up(%struct.__wait_queue_head* %dev_wait, i32 3, i32 1, i8* null)
  br label %sw.epilog229

sw.bb148:                                         ; preds = %LeafBlock
  %104 = load %struct.cfg80211_registered_device*, %struct.cfg80211_registered_device** %rdev, align 8
  %105 = load %struct.wireless_dev*, %struct.wireless_dev** %wdev, align 8
  %iftype149 = getelementptr inbounds %struct.wireless_dev, %struct.wireless_dev* %105, i32 0, i32 1
  %106 = load i32, i32* %iftype149, align 8
  call void @cfg80211_update_iface_num(%struct.cfg80211_registered_device* %104, i32 %106, i32 1)
  %107 = load %struct.wireless_dev*, %struct.wireless_dev** %wdev, align 8
  call void @wdev_lock(%struct.wireless_dev* %107)
  %108 = load %struct.wireless_dev*, %struct.wireless_dev** %wdev, align 8
  %iftype150 = getelementptr inbounds %struct.wireless_dev, %struct.wireless_dev* %108, i32 0, i32 1
  %109 = load i32, i32* %iftype150, align 8
  br label %sw.default

sw.default:                                       ; preds = %sw.bb148
  br label %sw.epilog

sw.epilog:                                        ; preds = %sw.default
  %110 = load %struct.wireless_dev*, %struct.wireless_dev** %wdev, align 8
  call void @wdev_unlock(%struct.wireless_dev* %110)
  %111 = load %struct.cfg80211_registered_device*, %struct.cfg80211_registered_device** %rdev, align 8
  %opencount151 = getelementptr inbounds %struct.cfg80211_registered_device, %struct.cfg80211_registered_device* %111, i32 0, i32 11
  %112 = load i32, i32* %opencount151, align 8
  %inc152 = add nsw i32 %112, 1
  store i32 %inc152, i32* %opencount151, align 8
  %113 = load %struct.wireless_dev*, %struct.wireless_dev** %wdev, align 8
  %iftype153 = getelementptr inbounds %struct.wireless_dev, %struct.wireless_dev* %113, i32 0, i32 1
  %114 = load i32, i32* %iftype153, align 8
  %cmp154 = icmp eq i32 %114, 2
  br i1 %cmp154, label %land.lhs.true160, label %lor.lhs.false156

lor.lhs.false156:                                 ; preds = %sw.epilog
  %115 = load %struct.wireless_dev*, %struct.wireless_dev** %wdev, align 8
  %iftype157 = getelementptr inbounds %struct.wireless_dev, %struct.wireless_dev* %115, i32 0, i32 1
  %116 = load i32, i32* %iftype157, align 8
  %cmp158 = icmp eq i32 %116, 8
  br i1 %cmp158, label %land.lhs.true160, label %if.end171

land.lhs.true160:                                 ; preds = %lor.lhs.false156, %sw.epilog
  %117 = load %struct.cfg80211_registered_device*, %struct.cfg80211_registered_device** %rdev, align 8
  %ops = getelementptr inbounds %struct.cfg80211_registered_device, %struct.cfg80211_registered_device* %117, i32 0, i32 0
  %118 = load %struct.cfg80211_ops*, %struct.cfg80211_ops** %ops, align 32
  %set_power_mgmt = getelementptr inbounds %struct.cfg80211_ops, %struct.cfg80211_ops* %118, i32 0, i32 62
  %119 = load i32 (%struct.wiphy*, %struct.net_device*, i1, i32)*, i32 (%struct.wiphy*, %struct.net_device*, i1, i32)** %set_power_mgmt, align 8
  %tobool161 = icmp ne i32 (%struct.wiphy*, %struct.net_device*, i1, i32)* %119, null
  br i1 %tobool161, label %if.then162, label %if.end171

if.then162:                                       ; preds = %land.lhs.true160
  %120 = load %struct.cfg80211_registered_device*, %struct.cfg80211_registered_device** %rdev, align 8
  %121 = load %struct.net_device*, %struct.net_device** %dev, align 8
  %122 = load %struct.wireless_dev*, %struct.wireless_dev** %wdev, align 8
  %ps163 = getelementptr inbounds %struct.wireless_dev, %struct.wireless_dev* %122, i32 0, i32 28
  %123 = load i8, i8* %ps163, align 2
  %tobool164 = trunc i8 %123 to i1
  %124 = load %struct.wireless_dev*, %struct.wireless_dev** %wdev, align 8
  %ps_timeout165 = getelementptr inbounds %struct.wireless_dev, %struct.wireless_dev* %124, i32 0, i32 29
  %125 = load i32, i32* %ps_timeout165, align 4
  %call166 = call i32 @rdev_set_power_mgmt(%struct.cfg80211_registered_device* %120, %struct.net_device* %121, i1 zeroext %tobool164, i32 %125)
  %tobool167 = icmp ne i32 %call166, 0
  br i1 %tobool167, label %if.then168, label %if.end170

if.then168:                                       ; preds = %if.then162
  %126 = load %struct.wireless_dev*, %struct.wireless_dev** %wdev, align 8
  %ps169 = getelementptr inbounds %struct.wireless_dev, %struct.wireless_dev* %126, i32 0, i32 28
  store i8 0, i8* %ps169, align 2
  br label %if.end170

if.end170:                                        ; preds = %if.then168, %if.then162
  br label %if.end171

if.end171:                                        ; preds = %if.end170, %land.lhs.true160, %lor.lhs.false156
  br label %sw.epilog229

sw.bb172:                                         ; preds = %LeafBlock5
  %127 = load %struct.wireless_dev*, %struct.wireless_dev** %wdev, align 8
  %list173 = getelementptr inbounds %struct.wireless_dev, %struct.wireless_dev* %127, i32 0, i32 2
  %call174 = call i32 @list_empty(%struct.list_head* %list173)
  %tobool175 = icmp ne i32 %call174, 0
  br i1 %tobool175, label %if.end184, label %if.then176

if.then176:                                       ; preds = %sw.bb172
  %128 = load %struct.cfg80211_registered_device*, %struct.cfg80211_registered_device** %rdev, align 8
  %129 = load %struct.wireless_dev*, %struct.wireless_dev** %wdev, align 8
  call void @nl80211_notify_iface(%struct.cfg80211_registered_device* %128, %struct.wireless_dev* %129, i32 8)
  %130 = load %struct.net_device*, %struct.net_device** %dev, align 8
  %dev177 = getelementptr inbounds %struct.net_device, %struct.net_device* %130, i32 0, i32 106
  %kobj178 = getelementptr inbounds %struct.device, %struct.device* %dev177, i32 0, i32 2
  call void @sysfs_remove_link(%struct.kobject* %kobj178, i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.12, i32 0, i32 0))
  %131 = load %struct.wireless_dev*, %struct.wireless_dev** %wdev, align 8
  %list179 = getelementptr inbounds %struct.wireless_dev, %struct.wireless_dev* %131, i32 0, i32 2
  call void @list_del_rcu(%struct.list_head* %list179)
  %132 = load %struct.cfg80211_registered_device*, %struct.cfg80211_registered_device** %rdev, align 8
  %devlist_generation180 = getelementptr inbounds %struct.cfg80211_registered_device, %struct.cfg80211_registered_device* %132, i32 0, i32 9
  %133 = load i32, i32* %devlist_generation180, align 16
  %inc181 = add nsw i32 %133, 1
  store i32 %inc181, i32* %devlist_generation180, align 16
  %134 = load %struct.wireless_dev*, %struct.wireless_dev** %wdev, align 8
  call void @cfg80211_mlme_purge_registrations(%struct.wireless_dev* %134)
  %135 = load %struct.wireless_dev*, %struct.wireless_dev** %wdev, align 8
  %disconnect_wk182 = getelementptr inbounds %struct.wireless_dev, %struct.wireless_dev* %135, i32 0, i32 19
  %call183 = call zeroext i1 @flush_work(%struct.work_struct* %disconnect_wk182)
  br label %if.end184

if.end184:                                        ; preds = %if.then176, %sw.bb172
  call void @synchronize_rcu()
  %136 = load %struct.wireless_dev*, %struct.wireless_dev** %wdev, align 8
  %list185 = getelementptr inbounds %struct.wireless_dev, %struct.wireless_dev* %136, i32 0, i32 2
  call void @INIT_LIST_HEAD(%struct.list_head* %list185)
  %137 = load %struct.wireless_dev*, %struct.wireless_dev** %wdev, align 8
  call void @cfg80211_process_wdev_events(%struct.wireless_dev* %137)
  %138 = load %struct.wireless_dev*, %struct.wireless_dev** %wdev, align 8
  %current_bss = getelementptr inbounds %struct.wireless_dev, %struct.wireless_dev* %138, i32 0, i32 23
  %139 = load %struct.cfg80211_internal_bss*, %struct.cfg80211_internal_bss** %current_bss, align 8
  %tobool187 = icmp ne %struct.cfg80211_internal_bss* %139, null
  %lnot188 = xor i1 %tobool187, true
  %lnot190 = xor i1 %lnot188, true
  %lnot.ext191 = zext i1 %lnot190 to i32
  store i32 %lnot.ext191, i32* %__ret_warn_on186, align 4
  %140 = load i32, i32* %__ret_warn_on186, align 4
  %tobool192 = icmp ne i32 %140, 0
  %lnot193 = xor i1 %tobool192, true
  %lnot195 = xor i1 %lnot193, true
  %lnot.ext196 = zext i1 %lnot195 to i32
  %conv197 = sext i32 %lnot.ext196 to i64
  %tobool198 = icmp ne i64 %conv197, 0
  br i1 %tobool198, label %if.then199, label %if.end200

if.then199:                                       ; preds = %if.end184
  call void @warn_slowpath_null(i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.1, i32 0, i32 0), i32 1252)
  br label %if.end200

if.end200:                                        ; preds = %if.then199, %if.end184
  %141 = load i32, i32* %__ret_warn_on186, align 4
  %tobool202 = icmp ne i32 %141, 0
  %lnot203 = xor i1 %tobool202, true
  %lnot205 = xor i1 %lnot203, true
  %lnot.ext206 = zext i1 %lnot205 to i32
  %conv207 = sext i32 %lnot.ext206 to i64
  store i64 %conv207, i64* %tmp201, align 8
  %142 = load i64, i64* %tmp201, align 8
  %tobool208 = icmp ne i64 %142, 0
  br i1 %tobool208, label %if.then209, label %if.end214

if.then209:                                       ; preds = %if.end200
  %143 = load %struct.wireless_dev*, %struct.wireless_dev** %wdev, align 8
  %current_bss210 = getelementptr inbounds %struct.wireless_dev, %struct.wireless_dev* %143, i32 0, i32 23
  %144 = load %struct.cfg80211_internal_bss*, %struct.cfg80211_internal_bss** %current_bss210, align 8
  call void @cfg80211_unhold_bss(%struct.cfg80211_internal_bss* %144)
  %145 = load %struct.wireless_dev*, %struct.wireless_dev** %wdev, align 8
  %wiphy211 = getelementptr inbounds %struct.wireless_dev, %struct.wireless_dev* %145, i32 0, i32 0
  %146 = load %struct.wiphy*, %struct.wiphy** %wiphy211, align 8
  %147 = load %struct.wireless_dev*, %struct.wireless_dev** %wdev, align 8
  %current_bss212 = getelementptr inbounds %struct.wireless_dev, %struct.wireless_dev* %147, i32 0, i32 23
  %148 = load %struct.cfg80211_internal_bss*, %struct.cfg80211_internal_bss** %current_bss212, align 8
  %pub = getelementptr inbounds %struct.cfg80211_internal_bss, %struct.cfg80211_internal_bss* %148, i32 0, i32 9
  call void @cfg80211_put_bss(%struct.wiphy* %146, %struct.cfg80211_bss* %pub)
  %149 = load %struct.wireless_dev*, %struct.wireless_dev** %wdev, align 8
  %current_bss213 = getelementptr inbounds %struct.wireless_dev, %struct.wireless_dev* %149, i32 0, i32 23
  store %struct.cfg80211_internal_bss* null, %struct.cfg80211_internal_bss** %current_bss213, align 8
  br label %if.end214

if.end214:                                        ; preds = %if.then209, %if.end200
  br label %sw.epilog229

sw.bb215:                                         ; preds = %LeafBlock11
  %150 = load %struct.wireless_dev*, %struct.wireless_dev** %wdev, align 8
  %wiphy216 = getelementptr inbounds %struct.wireless_dev, %struct.wireless_dev* %150, i32 0, i32 0
  %151 = load %struct.wiphy*, %struct.wiphy** %wiphy216, align 8
  %interface_modes = getelementptr inbounds %struct.wiphy, %struct.wiphy* %151, i32 0, i32 8
  %152 = load i16, i16* %interface_modes, align 16
  %conv217 = zext i16 %152 to i64
  %153 = load %struct.wireless_dev*, %struct.wireless_dev** %wdev, align 8
  %iftype218 = getelementptr inbounds %struct.wireless_dev, %struct.wireless_dev* %153, i32 0, i32 1
  %154 = load i32, i32* %iftype218, align 8
  %sh_prom = zext i32 %154 to i64
  %shl = shl i64 1, %sh_prom
  %and219 = and i64 %conv217, %shl
  %tobool220 = icmp ne i64 %and219, 0
  br i1 %tobool220, label %if.end223, label %if.then221

if.then221:                                       ; preds = %sw.bb215
  %call222 = call i32 @notifier_from_errno(i32 -95)
  store i32 %call222, i32* %retval, align 4
  br label %return

if.end223:                                        ; preds = %sw.bb215
  %155 = load %struct.cfg80211_registered_device*, %struct.cfg80211_registered_device** %rdev, align 8
  %rfkill = getelementptr inbounds %struct.cfg80211_registered_device, %struct.cfg80211_registered_device* %155, i32 0, i32 3
  %156 = load %struct.rfkill*, %struct.rfkill** %rfkill, align 16
  %call224 = call zeroext i1 @rfkill_blocked(%struct.rfkill* %156)
  br i1 %call224, label %if.then225, label %if.end227

if.then225:                                       ; preds = %if.end223
  %call226 = call i32 @notifier_from_errno(i32 -132)
  store i32 %call226, i32* %retval, align 4
  br label %return

if.end227:                                        ; preds = %if.end223
  br label %sw.epilog229

NewDefault:                                       ; preds = %LeafBlock13, %LeafBlock11, %LeafBlock7, %LeafBlock5, %LeafBlock1, %LeafBlock
  br label %sw.default228

sw.default228:                                    ; preds = %NewDefault
  store i32 0, i32* %retval, align 4
  br label %return

sw.epilog229:                                     ; preds = %if.end227, %if.end214, %if.end171, %if.end147, %sw.bb74, %do.end73, %sw.bb
  call void @wireless_nlevent_flush()
  store i32 1, i32* %retval, align 4
  br label %return

return:                                           ; preds = %sw.epilog229, %sw.default228, %if.then225, %if.then221, %if.then
  %157 = load i32, i32* %retval, align 4
  ret i32 %157
}

; Function Attrs: noinline nounwind optnone uwtable
define internal %struct.net_device* @netdev_notifier_info_to_dev(%struct.netdev_notifier_info* %info) #0 {
entry:
  %info.addr = alloca %struct.netdev_notifier_info*, align 8
  store %struct.netdev_notifier_info* %info, %struct.netdev_notifier_info** %info.addr, align 8
  %0 = load %struct.netdev_notifier_info*, %struct.netdev_notifier_info** %info.addr, align 8
  %dev = getelementptr inbounds %struct.netdev_notifier_info, %struct.netdev_notifier_info* %0, i32 0, i32 0
  %1 = load %struct.net_device*, %struct.net_device** %dev, align 8
  ret %struct.net_device* %1
}

declare void @__mutex_init(%struct.mutex*, i8*, %struct.lock_class_key*) #1

declare i32 @sysfs_create_link(%struct.kobject*, %struct.kobject*, i8*) #1

declare void @cfg80211_autodisconnect_wk(%struct.work_struct*) #1

declare void @__wake_up(%struct.__wait_queue_head*, i32, i32, i8*) #1

; Function Attrs: noinline nounwind optnone uwtable
define internal i32 @rdev_set_power_mgmt(%struct.cfg80211_registered_device* %rdev, %struct.net_device* %dev, i1 zeroext %enabled, i32 %timeout) #0 {
entry:
  %rdev.addr = alloca %struct.cfg80211_registered_device*, align 8
  %dev.addr = alloca %struct.net_device*, align 8
  %enabled.addr = alloca i8, align 1
  %timeout.addr = alloca i32, align 4
  %ret = alloca i32, align 4
  store %struct.cfg80211_registered_device* %rdev, %struct.cfg80211_registered_device** %rdev.addr, align 8
  store %struct.net_device* %dev, %struct.net_device** %dev.addr, align 8
  %frombool = zext i1 %enabled to i8
  store i8 %frombool, i8* %enabled.addr, align 1
  store i32 %timeout, i32* %timeout.addr, align 4
  %0 = load %struct.cfg80211_registered_device*, %struct.cfg80211_registered_device** %rdev.addr, align 8
  %wiphy = getelementptr inbounds %struct.cfg80211_registered_device, %struct.cfg80211_registered_device* %0, i32 0, i32 42
  %1 = load %struct.net_device*, %struct.net_device** %dev.addr, align 8
  %2 = load i8, i8* %enabled.addr, align 1
  %tobool = trunc i8 %2 to i1
  %3 = load i32, i32* %timeout.addr, align 4
  call void @trace_rdev_set_power_mgmt(%struct.wiphy* %wiphy, %struct.net_device* %1, i1 zeroext %tobool, i32 %3)
  %4 = load %struct.cfg80211_registered_device*, %struct.cfg80211_registered_device** %rdev.addr, align 8
  %ops = getelementptr inbounds %struct.cfg80211_registered_device, %struct.cfg80211_registered_device* %4, i32 0, i32 0
  %5 = load %struct.cfg80211_ops*, %struct.cfg80211_ops** %ops, align 32
  %set_power_mgmt = getelementptr inbounds %struct.cfg80211_ops, %struct.cfg80211_ops* %5, i32 0, i32 62
  %6 = load i32 (%struct.wiphy*, %struct.net_device*, i1, i32)*, i32 (%struct.wiphy*, %struct.net_device*, i1, i32)** %set_power_mgmt, align 8
  %7 = load %struct.cfg80211_registered_device*, %struct.cfg80211_registered_device** %rdev.addr, align 8
  %wiphy1 = getelementptr inbounds %struct.cfg80211_registered_device, %struct.cfg80211_registered_device* %7, i32 0, i32 42
  %8 = load %struct.net_device*, %struct.net_device** %dev.addr, align 8
  %9 = load i8, i8* %enabled.addr, align 1
  %tobool2 = trunc i8 %9 to i1
  %10 = load i32, i32* %timeout.addr, align 4
  %call = call i32 %6(%struct.wiphy* %wiphy1, %struct.net_device* %8, i1 zeroext %tobool2, i32 %10)
  store i32 %call, i32* %ret, align 4
  %11 = load %struct.cfg80211_registered_device*, %struct.cfg80211_registered_device** %rdev.addr, align 8
  %wiphy3 = getelementptr inbounds %struct.cfg80211_registered_device, %struct.cfg80211_registered_device* %11, i32 0, i32 42
  %12 = load i32, i32* %ret, align 4
  call void @trace_rdev_return_int(%struct.wiphy* %wiphy3, i32 %12)
  %13 = load i32, i32* %ret, align 4
  ret i32 %13
}

declare void @sysfs_remove_link(%struct.kobject*, i8*) #1

declare void @cfg80211_process_wdev_events(%struct.wireless_dev*) #1

; Function Attrs: noinline nounwind optnone uwtable
define internal void @cfg80211_unhold_bss(%struct.cfg80211_internal_bss* %bss) #0 {
entry:
  %i.addr.i.i = alloca i32, align 4
  %v.addr.i.i = alloca %struct.atomic_t*, align 8
  %__ret.i.i = alloca i32, align 4
  %tmp.i.i = alloca i32, align 4
  %i.addr.i = alloca i32, align 4
  %v.addr.i = alloca %struct.atomic_t*, align 8
  %bss.addr = alloca %struct.cfg80211_internal_bss*, align 8
  %r = alloca i32, align 4
  %__ret_warn_on = alloca i32, align 4
  %tmp = alloca i64, align 8
  store %struct.cfg80211_internal_bss* %bss, %struct.cfg80211_internal_bss** %bss.addr, align 8
  %0 = load %struct.cfg80211_internal_bss*, %struct.cfg80211_internal_bss** %bss.addr, align 8
  %hold = getelementptr inbounds %struct.cfg80211_internal_bss, %struct.cfg80211_internal_bss* %0, i32 0, i32 6
  store i32 1, i32* %i.addr.i, align 4
  store %struct.atomic_t* %hold, %struct.atomic_t** %v.addr.i, align 8
  %1 = load i32, i32* %i.addr.i, align 4
  %sub.i = sub nsw i32 0, %1
  %2 = load %struct.atomic_t*, %struct.atomic_t** %v.addr.i, align 8
  store i32 %sub.i, i32* %i.addr.i.i, align 4
  store %struct.atomic_t* %2, %struct.atomic_t** %v.addr.i.i, align 8
  %3 = load i32, i32* %i.addr.i.i, align 4
  %4 = load i32, i32* %i.addr.i.i, align 4
  store i32 %4, i32* %__ret.i.i, align 4
  %5 = load i32, i32* %__ret.i.i, align 4
  %6 = load %struct.atomic_t*, %struct.atomic_t** %v.addr.i.i, align 8
  %counter.i.i = getelementptr inbounds %struct.atomic_t, %struct.atomic_t* %6, i32 0, i32 0
  %7 = call i32 asm sideeffect ".pushsection .smp_locks,\22a\22\0A.balign 4\0A.long 671f - .\0A.popsection\0A671:\0A\09lock; xaddl $0, $1\0A", "=r,=*m,0,*m,~{memory},~{cc},~{dirflag},~{fpsr},~{flags}"(i32* %counter.i.i, i32 %5, i32* %counter.i.i) #3, !srcloc !5
  store i32 %7, i32* %__ret.i.i, align 4
  %8 = load i32, i32* %__ret.i.i, align 4
  store i32 %8, i32* %tmp.i.i, align 4
  %9 = load i32, i32* %tmp.i.i, align 4
  %add.i.i = add nsw i32 %3, %9
  store i32 %add.i.i, i32* %r, align 4
  %10 = load i32, i32* %r, align 4
  %cmp = icmp slt i32 %10, 0
  %lnot = xor i1 %cmp, true
  %lnot1 = xor i1 %lnot, true
  %lnot.ext = zext i1 %lnot1 to i32
  store i32 %lnot.ext, i32* %__ret_warn_on, align 4
  %11 = load i32, i32* %__ret_warn_on, align 4
  %tobool = icmp ne i32 %11, 0
  %lnot2 = xor i1 %tobool, true
  %lnot4 = xor i1 %lnot2, true
  %lnot.ext5 = zext i1 %lnot4 to i32
  %conv = sext i32 %lnot.ext5 to i64
  %tobool6 = icmp ne i64 %conv, 0
  br i1 %tobool6, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  call void @warn_slowpath_null(i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.7, i32 0, i32 0), i32 174)
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  %12 = load i32, i32* %__ret_warn_on, align 4
  %tobool7 = icmp ne i32 %12, 0
  %lnot8 = xor i1 %tobool7, true
  %lnot10 = xor i1 %lnot8, true
  %lnot.ext11 = zext i1 %lnot10 to i32
  %conv12 = sext i32 %lnot.ext11 to i64
  store i64 %conv12, i64* %tmp, align 8
  %13 = load i64, i64* %tmp, align 8
  ret void
}

; Function Attrs: noinline nounwind optnone uwtable
define internal i32 @notifier_from_errno(i32 %err) #0 {
entry:
  %retval = alloca i32, align 4
  %err.addr = alloca i32, align 4
  store i32 %err, i32* %err.addr, align 4
  %0 = load i32, i32* %err.addr, align 4
  %tobool = icmp ne i32 %0, 0
  br i1 %tobool, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %1 = load i32, i32* %err.addr, align 4
  %sub = sub nsw i32 1, %1
  %or = or i32 32768, %sub
  store i32 %or, i32* %retval, align 4
  br label %return

if.end:                                           ; preds = %entry
  store i32 1, i32* %retval, align 4
  br label %return

return:                                           ; preds = %if.end, %if.then
  %2 = load i32, i32* %retval, align 4
  ret i32 %2
}

; Function Attrs: noinline nounwind optnone uwtable
define internal void @wireless_nlevent_flush() #0 {
entry:
  ret void
}

; Function Attrs: noinline nounwind optnone uwtable
define internal void @trace_rdev_set_power_mgmt(%struct.wiphy* %wiphy, %struct.net_device* %netdev, i1 zeroext %enabled, i32 %timeout) #0 {
entry:
  %p.addr.i = alloca i8*, align 8
  %res.addr.i = alloca i8*, align 8
  %size.addr.i = alloca i32, align 4
  %retval.i = alloca i1, align 1
  %key.addr.i = alloca %struct.static_key*, align 8
  %wiphy.addr = alloca %struct.wiphy*, align 8
  %netdev.addr = alloca %struct.net_device*, align 8
  %enabled.addr = alloca i8, align 1
  %timeout.addr = alloca i32, align 4
  %it_func_ptr = alloca %struct.tracepoint_func*, align 8
  %it_func = alloca i8*, align 8
  %__data = alloca i8*, align 8
  %pscr_ret__ = alloca i32, align 4
  %__vpp_verify = alloca i8*, align 8
  %pfo_ret__ = alloca i32, align 4
  %tmp = alloca i32, align 4
  %tmp2 = alloca i32, align 4
  %________p1 = alloca %struct.tracepoint_func*, align 8
  %_________p1 = alloca %struct.tracepoint_func*, align 8
  %__u = alloca %union.anon.101, align 8
  %tmp5 = alloca %struct.tracepoint_func*, align 8
  %___typecheck_p = alloca %struct.tracepoint_func*, align 8
  %tmp8 = alloca %struct.tracepoint_func*, align 8
  %tmp11 = alloca %struct.tracepoint_func*, align 8
  store %struct.wiphy* %wiphy, %struct.wiphy** %wiphy.addr, align 8
  store %struct.net_device* %netdev, %struct.net_device** %netdev.addr, align 8
  %frombool = zext i1 %enabled to i8
  store i8 %frombool, i8* %enabled.addr, align 1
  store i32 %timeout, i32* %timeout.addr, align 4
  store %struct.static_key* getelementptr inbounds (%struct.tracepoint, %struct.tracepoint* @__tracepoint_rdev_set_power_mgmt, i32 0, i32 1), %struct.static_key** %key.addr.i, align 8
  %0 = load %struct.static_key*, %struct.static_key** %key.addr.i, align 8
  %call.i = call i32 @static_key_count(%struct.static_key* %0) #3
  %cmp.i = icmp sgt i32 %call.i, 0
  %lnot.i = xor i1 %cmp.i, true
  %lnot.ext.i = zext i1 %cmp.i to i32
  %conv.i = sext i32 %lnot.ext.i to i64
  br i1 %cmp.i, label %if.then.i, label %if.end.i

if.then.i:                                        ; preds = %entry
  store i1 true, i1* %retval.i, align 1
  br label %static_key_false.exit

if.end.i:                                         ; preds = %entry
  store i1 false, i1* %retval.i, align 1
  br label %static_key_false.exit

static_key_false.exit:                            ; preds = %if.end.i, %if.then.i
  %1 = load i1, i1* %retval.i, align 1
  br i1 %1, label %if.then, label %if.end22

if.then:                                          ; preds = %static_key_false.exit
  br label %do.body

do.body:                                          ; preds = %if.then
  br label %do.body1

do.body1:                                         ; preds = %do.body
  store i8* null, i8** %__vpp_verify, align 8
  %2 = load i8*, i8** %__vpp_verify, align 8
  br label %do.end

do.end:                                           ; preds = %do.body1
  %3 = call i32 asm "movl %gs:$1,$0", "=r,*m,~{dirflag},~{fpsr},~{flags}"(i32* @cpu_number) #4, !srcloc !24
  store i32 %3, i32* %pfo_ret__, align 4
  %4 = load i32, i32* %pfo_ret__, align 4
  store i32 %4, i32* %tmp, align 4
  %5 = load i32, i32* %tmp, align 4
  store i32 %5, i32* %pscr_ret__, align 4
  %6 = load i32, i32* %pscr_ret__, align 4
  store i32 %6, i32* %tmp2, align 4
  %7 = load i32, i32* %tmp2, align 4
  %call3 = call i32 @cpumask_test_cpu(i32 %7, %struct.cpumask* @__cpu_online_mask)
  %tobool = icmp ne i32 %call3, 0
  br i1 %tobool, label %if.end, label %if.then4

if.then4:                                         ; preds = %do.end
  br label %if.end22

if.end:                                           ; preds = %do.end
  call void @rcu_read_lock_sched_notrace()
  %__c = bitcast %union.anon.101* %__u to [1 x i8]*
  %arraydecay = getelementptr inbounds [1 x i8], [1 x i8]* %__c, i32 0, i32 0
  store i8* bitcast (%struct.tracepoint_func** getelementptr inbounds (%struct.tracepoint, %struct.tracepoint* @__tracepoint_rdev_set_power_mgmt, i32 0, i32 4) to i8*), i8** %p.addr.i, align 8
  store i8* %arraydecay, i8** %res.addr.i, align 8
  store i32 8, i32* %size.addr.i, align 4
  %8 = load i32, i32* %size.addr.i, align 4
  br label %NodeBlock9

NodeBlock9:                                       ; preds = %if.end
  %Pivot10 = icmp slt i32 %8, 4
  br i1 %Pivot10, label %NodeBlock, label %NodeBlock7

NodeBlock7:                                       ; preds = %NodeBlock9
  %Pivot8 = icmp slt i32 %8, 8
  br i1 %Pivot8, label %LeafBlock3, label %LeafBlock5

LeafBlock5:                                       ; preds = %NodeBlock7
  %SwitchLeaf6 = icmp eq i32 %8, 8
  br i1 %SwitchLeaf6, label %sw.bb3.i, label %NewDefault

LeafBlock3:                                       ; preds = %NodeBlock7
  %SwitchLeaf4 = icmp eq i32 %8, 4
  br i1 %SwitchLeaf4, label %sw.bb2.i, label %NewDefault

NodeBlock:                                        ; preds = %NodeBlock9
  %Pivot = icmp slt i32 %8, 2
  br i1 %Pivot, label %LeafBlock, label %LeafBlock1

LeafBlock1:                                       ; preds = %NodeBlock
  %SwitchLeaf2 = icmp eq i32 %8, 2
  br i1 %SwitchLeaf2, label %sw.bb1.i, label %NewDefault

LeafBlock:                                        ; preds = %NodeBlock
  %SwitchLeaf = icmp eq i32 %8, 1
  br i1 %SwitchLeaf, label %sw.bb.i, label %NewDefault

sw.bb.i:                                          ; preds = %LeafBlock
  %9 = load i8*, i8** %p.addr.i, align 8
  %10 = load volatile i8, i8* %9, align 1
  %11 = load i8*, i8** %res.addr.i, align 8
  store i8 %10, i8* %11, align 1
  br label %__read_once_size.exit

sw.bb1.i:                                         ; preds = %LeafBlock1
  %12 = load i8*, i8** %p.addr.i, align 8
  %13 = bitcast i8* %12 to i16*
  %14 = load volatile i16, i16* %13, align 2
  %15 = load i8*, i8** %res.addr.i, align 8
  %16 = bitcast i8* %15 to i16*
  store i16 %14, i16* %16, align 2
  br label %__read_once_size.exit

sw.bb2.i:                                         ; preds = %LeafBlock3
  %17 = load i8*, i8** %p.addr.i, align 8
  %18 = bitcast i8* %17 to i32*
  %19 = load volatile i32, i32* %18, align 4
  %20 = load i8*, i8** %res.addr.i, align 8
  %21 = bitcast i8* %20 to i32*
  store i32 %19, i32* %21, align 4
  br label %__read_once_size.exit

sw.bb3.i:                                         ; preds = %LeafBlock5
  %22 = load i8*, i8** %p.addr.i, align 8
  %23 = bitcast i8* %22 to i64*
  %24 = load volatile i64, i64* %23, align 8
  %25 = load i8*, i8** %res.addr.i, align 8
  %26 = bitcast i8* %25 to i64*
  store i64 %24, i64* %26, align 8
  br label %__read_once_size.exit

NewDefault:                                       ; preds = %LeafBlock5, %LeafBlock3, %LeafBlock1, %LeafBlock
  br label %sw.default.i

sw.default.i:                                     ; preds = %NewDefault
  call void asm sideeffect "", "~{memory},~{dirflag},~{fpsr},~{flags}"() #3, !srcloc !3
  %27 = load i8*, i8** %res.addr.i, align 8
  %28 = load i8*, i8** %p.addr.i, align 8
  %29 = load i32, i32* %size.addr.i, align 4
  %conv.i23 = sext i32 %29 to i64
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %27, i8* %28, i64 %conv.i23, i32 1, i1 false) #3
  call void asm sideeffect "", "~{memory},~{dirflag},~{fpsr},~{flags}"() #3, !srcloc !4
  br label %__read_once_size.exit

__read_once_size.exit:                            ; preds = %sw.default.i, %sw.bb3.i, %sw.bb2.i, %sw.bb1.i, %sw.bb.i
  %__val = bitcast %union.anon.101* %__u to %struct.tracepoint_func**
  %30 = load %struct.tracepoint_func*, %struct.tracepoint_func** %__val, align 8
  store %struct.tracepoint_func* %30, %struct.tracepoint_func** %tmp5, align 8
  %31 = load %struct.tracepoint_func*, %struct.tracepoint_func** %tmp5, align 8
  store %struct.tracepoint_func* %31, %struct.tracepoint_func** %_________p1, align 8
  br label %do.body6

do.body6:                                         ; preds = %__read_once_size.exit
  br label %do.end7

do.end7:                                          ; preds = %do.body6
  %32 = load %struct.tracepoint_func*, %struct.tracepoint_func** %_________p1, align 8
  store %struct.tracepoint_func* %32, %struct.tracepoint_func** %tmp8, align 8
  %33 = load %struct.tracepoint_func*, %struct.tracepoint_func** %tmp8, align 8
  store %struct.tracepoint_func* %33, %struct.tracepoint_func** %________p1, align 8
  br label %do.body9

do.body9:                                         ; preds = %do.end7
  br label %do.end10

do.end10:                                         ; preds = %do.body9
  %34 = load %struct.tracepoint_func*, %struct.tracepoint_func** %________p1, align 8
  store %struct.tracepoint_func* %34, %struct.tracepoint_func** %tmp11, align 8
  %35 = load %struct.tracepoint_func*, %struct.tracepoint_func** %tmp11, align 8
  store %struct.tracepoint_func* %35, %struct.tracepoint_func** %it_func_ptr, align 8
  %36 = load %struct.tracepoint_func*, %struct.tracepoint_func** %it_func_ptr, align 8
  %tobool12 = icmp ne %struct.tracepoint_func* %36, null
  br i1 %tobool12, label %if.then13, label %if.end19

if.then13:                                        ; preds = %do.end10
  br label %do.body14

do.body14:                                        ; preds = %do.cond, %if.then13
  %37 = load %struct.tracepoint_func*, %struct.tracepoint_func** %it_func_ptr, align 8
  %func = getelementptr inbounds %struct.tracepoint_func, %struct.tracepoint_func* %37, i32 0, i32 0
  %38 = load i8*, i8** %func, align 8
  store i8* %38, i8** %it_func, align 8
  %39 = load %struct.tracepoint_func*, %struct.tracepoint_func** %it_func_ptr, align 8
  %data = getelementptr inbounds %struct.tracepoint_func, %struct.tracepoint_func* %39, i32 0, i32 1
  %40 = load i8*, i8** %data, align 8
  store i8* %40, i8** %__data, align 8
  %41 = load i8*, i8** %it_func, align 8
  %42 = bitcast i8* %41 to void (i8*, %struct.wiphy*, %struct.net_device*, i1, i32)*
  %43 = load i8*, i8** %__data, align 8
  %44 = load %struct.wiphy*, %struct.wiphy** %wiphy.addr, align 8
  %45 = load %struct.net_device*, %struct.net_device** %netdev.addr, align 8
  %46 = load i8, i8* %enabled.addr, align 1
  %tobool15 = trunc i8 %46 to i1
  %47 = load i32, i32* %timeout.addr, align 4
  call void %42(i8* %43, %struct.wiphy* %44, %struct.net_device* %45, i1 zeroext %tobool15, i32 %47)
  br label %do.cond

do.cond:                                          ; preds = %do.body14
  %48 = load %struct.tracepoint_func*, %struct.tracepoint_func** %it_func_ptr, align 8
  %incdec.ptr = getelementptr inbounds %struct.tracepoint_func, %struct.tracepoint_func* %48, i32 1
  store %struct.tracepoint_func* %incdec.ptr, %struct.tracepoint_func** %it_func_ptr, align 8
  %func16 = getelementptr inbounds %struct.tracepoint_func, %struct.tracepoint_func* %incdec.ptr, i32 0, i32 0
  %49 = load i8*, i8** %func16, align 8
  %tobool17 = icmp ne i8* %49, null
  br i1 %tobool17, label %do.body14, label %do.end18

do.end18:                                         ; preds = %do.cond
  br label %if.end19

if.end19:                                         ; preds = %do.end18, %do.end10
  call void @rcu_read_unlock_sched_notrace()
  br label %do.end21

do.end21:                                         ; preds = %if.end19
  br label %if.end22

if.end22:                                         ; preds = %do.end21, %if.then4, %static_key_false.exit
  ret void
}

; Function Attrs: noinline nounwind optnone uwtable
define internal void @cfg80211_pernet_exit(%struct.net* %net) #0 {
entry:
  %net.addr = alloca %struct.net*, align 8
  %rdev = alloca %struct.cfg80211_registered_device*, align 8
  %__mptr = alloca %struct.list_head*, align 8
  %tmp = alloca %struct.cfg80211_registered_device*, align 8
  %__ret_warn_on = alloca i32, align 4
  %tmp12 = alloca i64, align 8
  %__mptr20 = alloca %struct.list_head*, align 8
  %tmp22 = alloca %struct.cfg80211_registered_device*, align 8
  store %struct.net* %net, %struct.net** %net.addr, align 8
  call void @rtnl_lock()
  %0 = load %struct.list_head*, %struct.list_head** getelementptr inbounds (%struct.list_head, %struct.list_head* @cfg80211_rdev_list, i32 0, i32 0), align 8
  store %struct.list_head* %0, %struct.list_head** %__mptr, align 8
  %1 = load %struct.list_head*, %struct.list_head** %__mptr, align 8
  %2 = bitcast %struct.list_head* %1 to i8*
  %add.ptr = getelementptr inbounds i8, i8* %2, i64 -8
  %3 = bitcast i8* %add.ptr to %struct.cfg80211_registered_device*
  store %struct.cfg80211_registered_device* %3, %struct.cfg80211_registered_device** %tmp, align 8
  %4 = load %struct.cfg80211_registered_device*, %struct.cfg80211_registered_device** %tmp, align 8
  store %struct.cfg80211_registered_device* %4, %struct.cfg80211_registered_device** %rdev, align 8
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %5 = load %struct.cfg80211_registered_device*, %struct.cfg80211_registered_device** %rdev, align 8
  %list = getelementptr inbounds %struct.cfg80211_registered_device, %struct.cfg80211_registered_device* %5, i32 0, i32 1
  %cmp = icmp ne %struct.list_head* %list, @cfg80211_rdev_list
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %6 = load %struct.cfg80211_registered_device*, %struct.cfg80211_registered_device** %rdev, align 8
  %wiphy = getelementptr inbounds %struct.cfg80211_registered_device, %struct.cfg80211_registered_device* %6, i32 0, i32 42
  %call = call %struct.net* @wiphy_net(%struct.wiphy* %wiphy)
  %7 = load %struct.net*, %struct.net** %net.addr, align 8
  %call1 = call i32 @net_eq(%struct.net* %call, %struct.net* %7)
  %tobool = icmp ne i32 %call1, 0
  br i1 %tobool, label %if.then, label %if.end19

if.then:                                          ; preds = %for.body
  %8 = load %struct.cfg80211_registered_device*, %struct.cfg80211_registered_device** %rdev, align 8
  %call2 = call i32 @cfg80211_switch_netns(%struct.cfg80211_registered_device* %8, %struct.net* @init_net)
  %tobool3 = icmp ne i32 %call2, 0
  %lnot = xor i1 %tobool3, true
  %lnot4 = xor i1 %lnot, true
  %lnot.ext = zext i1 %lnot4 to i32
  store i32 %lnot.ext, i32* %__ret_warn_on, align 4
  %9 = load i32, i32* %__ret_warn_on, align 4
  %tobool5 = icmp ne i32 %9, 0
  %lnot6 = xor i1 %tobool5, true
  %lnot8 = xor i1 %lnot6, true
  %lnot.ext9 = zext i1 %lnot8 to i32
  %conv = sext i32 %lnot.ext9 to i64
  %tobool10 = icmp ne i64 %conv, 0
  br i1 %tobool10, label %if.then11, label %if.end

if.then11:                                        ; preds = %if.then
  call void @warn_slowpath_null(i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.1, i32 0, i32 0), i32 1284)
  br label %if.end

if.end:                                           ; preds = %if.then11, %if.then
  %10 = load i32, i32* %__ret_warn_on, align 4
  %tobool13 = icmp ne i32 %10, 0
  %lnot14 = xor i1 %tobool13, true
  %lnot16 = xor i1 %lnot14, true
  %lnot.ext17 = zext i1 %lnot16 to i32
  %conv18 = sext i32 %lnot.ext17 to i64
  store i64 %conv18, i64* %tmp12, align 8
  %11 = load i64, i64* %tmp12, align 8
  br label %if.end19

if.end19:                                         ; preds = %if.end, %for.body
  br label %for.inc

for.inc:                                          ; preds = %if.end19
  %12 = load %struct.cfg80211_registered_device*, %struct.cfg80211_registered_device** %rdev, align 8
  %list21 = getelementptr inbounds %struct.cfg80211_registered_device, %struct.cfg80211_registered_device* %12, i32 0, i32 1
  %next = getelementptr inbounds %struct.list_head, %struct.list_head* %list21, i32 0, i32 0
  %13 = load %struct.list_head*, %struct.list_head** %next, align 8
  store %struct.list_head* %13, %struct.list_head** %__mptr20, align 8
  %14 = load %struct.list_head*, %struct.list_head** %__mptr20, align 8
  %15 = bitcast %struct.list_head* %14 to i8*
  %add.ptr23 = getelementptr inbounds i8, i8* %15, i64 -8
  %16 = bitcast i8* %add.ptr23 to %struct.cfg80211_registered_device*
  store %struct.cfg80211_registered_device* %16, %struct.cfg80211_registered_device** %tmp22, align 8
  %17 = load %struct.cfg80211_registered_device*, %struct.cfg80211_registered_device** %tmp22, align 8
  store %struct.cfg80211_registered_device* %17, %struct.cfg80211_registered_device** %rdev, align 8
  br label %for.cond

for.end:                                          ; preds = %for.cond
  call void @rtnl_unlock()
  ret void
}

; Function Attrs: noinline nounwind optnone uwtable
define internal i32 @net_eq(%struct.net* %net1, %struct.net* %net2) #0 {
entry:
  %net1.addr = alloca %struct.net*, align 8
  %net2.addr = alloca %struct.net*, align 8
  store %struct.net* %net1, %struct.net** %net1.addr, align 8
  store %struct.net* %net2, %struct.net** %net2.addr, align 8
  %0 = load %struct.net*, %struct.net** %net1.addr, align 8
  %1 = load %struct.net*, %struct.net** %net2.addr, align 8
  %cmp = icmp eq %struct.net* %0, %1
  %conv = zext i1 %cmp to i32
  ret i32 %conv
}

attributes #0 = { noinline nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { argmemonly nounwind }
attributes #3 = { nounwind }
attributes #4 = { nounwind readonly }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 5.0.1 (tags/RELEASE_500/final)"}
!2 = !{i32 -2141891472, i32 -2141891447, i32 -2141891177, i32 -2141891380, i32 -2141891349, i32 -2141891319}
!3 = !{i32 -2147330617}
!4 = !{i32 -2147330579}
!5 = !{i32 -2146618858, i32 -2146618819, i32 -2146618798, i32 -2146618761, i32 -2146618738, i32 -2146618729}
!6 = !{i32 -2146623295, i32 -2146623256, i32 -2146623235, i32 -2146623198, i32 -2146623175, i32 -2146623305}
!7 = !{i32 -2147329880}
!8 = !{i32 -2147329842}
!9 = !{i32 -2133830805}
!10 = !{i32 -2137004570}
!11 = !{i32 -2141446660}
!12 = !{i32 240223, i32 240234, i32 -2147202923}
!13 = !{i32 -2145954312}
!14 = !{i32 -2145954006}
!15 = !{i32 -2136847102}
!16 = !{i32 -2146342250}
!17 = !{i32 -2146371052}
!18 = !{i32 1024225}
!19 = !{i32 -2141129977}
!20 = !{i32 -2141599390}
!21 = !{i32 -2144976787}
!22 = !{i32 -2141340801}
!23 = !{i32 -2141289623}
!24 = !{i32 -2138779143}
