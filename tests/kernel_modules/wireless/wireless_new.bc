; ModuleID = 'net/wireless/core.bc'
source_filename = "net/wireless/core.c"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%struct.list_head = type { %struct.list_head*, %struct.list_head* }
%struct.kernel_param_ops = type { i32, i32 (i8*, %struct.kernel_param*)*, i32 (i8*, %struct.kernel_param*)*, void (i8*)* }
%struct.kernel_param = type { i8*, %struct.module*, %struct.kernel_param_ops*, i16, i8, i8, %union.anon.62 }
%struct.module = type { i32, %struct.list_head, [56 x i8], %struct.module_kobject, %struct.module_attribute*, i8*, i8*, %struct.kobject*, %struct.kernel_symbol*, i32*, i32, %struct.mutex, %struct.kernel_param*, i32, i32, %struct.kernel_symbol*, i32*, i8, %struct.kernel_symbol*, i32*, i32, i32, %struct.exception_table_entry*, i32 ()*, [40 x i8], %struct.module_layout, %struct.module_layout, %struct.mod_arch_specific, i64, i32, %struct.list_head, %struct.bug_entry*, %struct.mod_kallsyms*, %struct.mod_kallsyms, %struct.module_sect_attrs*, %struct.module_notes_attrs*, i8*, i8*, i32, i32, %struct.tracepoint**, i32, i8**, %struct.trace_event_call**, i32, %struct.trace_enum_map**, i32, %struct.list_head, %struct.list_head, void ()*, %struct.atomic_t, [12 x i8] }
%struct.module_kobject = type { %struct.kobject, %struct.module*, %struct.kobject*, %struct.module_param_attrs*, %struct.completion* }
%struct.kobject = type { i8*, %struct.list_head, %struct.kobject*, %struct.kset*, %struct.kobj_type*, %struct.kernfs_node*, %struct.kref, i8 }
%struct.kset = type { %struct.list_head, %struct.spinlock, %struct.kobject, %struct.kset_uevent_ops* }
%struct.spinlock = type { %union.anon.1 }
%union.anon.1 = type { %struct.raw_spinlock }
%struct.raw_spinlock = type { %struct.qspinlock }
%struct.qspinlock = type { %struct.atomic_t }
%struct.kset_uevent_ops = type { i32 (%struct.kset*, %struct.kobject*)*, i8* (%struct.kset*, %struct.kobject*)*, i32 (%struct.kset*, %struct.kobject*, %struct.kobj_uevent_env*)* }
%struct.kobj_uevent_env = type { [3 x i8*], [32 x i8*], i32, [2048 x i8], i32 }
%struct.kobj_type = type { void (%struct.kobject*)*, %struct.sysfs_ops*, %struct.attribute**, %struct.kobj_ns_type_operations* (%struct.kobject*)*, i8* (%struct.kobject*)* }
%struct.sysfs_ops = type { i64 (%struct.kobject*, %struct.attribute*, i8*)*, i64 (%struct.kobject*, %struct.attribute*, i8*, i64)* }
%struct.attribute = type { i8*, i16 }
%struct.kobj_ns_type_operations = type { i32, i1 ()*, i8* ()*, i8* (%struct.sock*)*, i8* ()*, void (i8*)* }
%struct.sock = type opaque
%struct.kernfs_node = type { %struct.atomic_t, %struct.atomic_t, %struct.kernfs_node*, i8*, %struct.rb_node, i8*, i32, %union.anon, i8*, i16, i16, i32, %struct.kernfs_iattrs* }
%struct.rb_node = type { i64, %struct.rb_node*, %struct.rb_node* }
%union.anon = type { %struct.kernfs_elem_attr }
%struct.kernfs_elem_attr = type { %struct.kernfs_ops*, %struct.kernfs_open_node*, i64, %struct.kernfs_node* }
%struct.kernfs_ops = type { i32 (%struct.kernfs_open_file*)*, void (%struct.kernfs_open_file*)*, i32 (%struct.seq_file*, i8*)*, i8* (%struct.seq_file*, i64*)*, i8* (%struct.seq_file*, i8*, i64*)*, void (%struct.seq_file*, i8*)*, i64 (%struct.kernfs_open_file*, i8*, i64, i64)*, i64, i8, i64 (%struct.kernfs_open_file*, i8*, i64, i64)*, i32 (%struct.kernfs_open_file*, %struct.vm_area_struct*)* }
%struct.kernfs_open_file = type { %struct.kernfs_node*, %struct.file*, %struct.seq_file*, i8*, %struct.mutex, %struct.mutex, i32, %struct.list_head, i8*, i64, i8, %struct.vm_operations_struct* }
%struct.file = type { %union.anon.2, %struct.path, %struct.inode*, %struct.file_operations*, %struct.spinlock, %struct.atomic64_t, i32, i32, %struct.mutex, i64, %struct.fown_struct, %struct.cred*, %struct.file_ra_state, i64, i8*, i8*, %struct.list_head, %struct.list_head, %struct.address_space* }
%union.anon.2 = type { %struct.callback_head }
%struct.callback_head = type { %struct.callback_head*, void (%struct.callback_head*)* }
%struct.path = type { %struct.vfsmount*, %struct.dentry* }
%struct.vfsmount = type opaque
%struct.dentry = type { i32, %struct.seqcount, %struct.hlist_bl_node, %struct.dentry*, %struct.qstr, %struct.inode*, [32 x i8], %struct.lockref, %struct.dentry_operations*, %struct.super_block*, i64, i8*, %union.anon.60, %struct.list_head, %struct.list_head, %union.anon.61 }
%struct.seqcount = type { i32 }
%struct.hlist_bl_node = type { %struct.hlist_bl_node*, %struct.hlist_bl_node** }
%struct.qstr = type { %union.anon.3, i8* }
%union.anon.3 = type { i64 }
%struct.lockref = type { %union.anon.58 }
%union.anon.58 = type { i64 }
%struct.dentry_operations = type { i32 (%struct.dentry*, i32)*, i32 (%struct.dentry*, i32)*, i32 (%struct.dentry*, %struct.qstr*)*, i32 (%struct.dentry*, i32, i8*, %struct.qstr*)*, i32 (%struct.dentry*)*, i32 (%struct.dentry*)*, void (%struct.dentry*)*, void (%struct.dentry*)*, void (%struct.dentry*, %struct.inode*)*, i8* (%struct.dentry*, i8*, i32)*, %struct.vfsmount* (%struct.path*)*, i32 (%struct.path*, i1)*, %struct.dentry* (%struct.dentry*, %struct.inode*, i32)*, [24 x i8] }
%struct.super_block = type { %struct.list_head, i32, i8, i64, i64, %struct.file_system_type*, %struct.super_operations*, %struct.dquot_operations*, %struct.quotactl_ops*, %struct.export_operations*, i64, i64, i64, %struct.dentry*, %struct.rw_semaphore, i32, %struct.atomic_t, i8*, %struct.xattr_handler**, %struct.fscrypt_operations*, %struct.hlist_bl_head, %struct.list_head, %struct.block_device*, %struct.backing_dev_info*, %struct.mtd_info*, %struct.hlist_node, i32, %struct.quota_info, %struct.sb_writers, [32 x i8], [16 x i8], i8*, i32, i32, i32, %struct.mutex, i8*, i8*, %struct.dentry_operations*, i32, %struct.shrinker, %struct.atomic64_t, i32, %struct.workqueue_struct*, %struct.hlist_head, %struct.user_namespace*, %struct.list_lru, [56 x i8], %struct.list_lru, %struct.callback_head, %struct.work_struct, %struct.mutex, i32, [36 x i8], %struct.spinlock, %struct.list_head, %struct.spinlock, %struct.list_head, [16 x i8] }
%struct.file_system_type = type { i8*, i32, %struct.dentry* (%struct.file_system_type*, i32, i8*, i8*)*, void (%struct.super_block*)*, %struct.module*, %struct.file_system_type*, %struct.hlist_head, %struct.lock_class_key, %struct.lock_class_key, %struct.lock_class_key, [3 x %struct.lock_class_key], %struct.lock_class_key, %struct.lock_class_key, %struct.lock_class_key }
%struct.lock_class_key = type {}
%struct.super_operations = type { %struct.inode* (%struct.super_block*)*, void (%struct.inode*)*, void (%struct.inode*, i32)*, i32 (%struct.inode*, %struct.writeback_control*)*, i32 (%struct.inode*)*, void (%struct.inode*)*, void (%struct.super_block*)*, i32 (%struct.super_block*, i32)*, i32 (%struct.super_block*)*, i32 (%struct.super_block*)*, i32 (%struct.super_block*)*, i32 (%struct.super_block*)*, i32 (%struct.dentry*, %struct.kstatfs*)*, i32 (%struct.super_block*, i32*, i8*)*, void (%struct.super_block*)*, i32 (%struct.seq_file*, %struct.dentry*)*, i32 (%struct.seq_file*, %struct.dentry*)*, i32 (%struct.seq_file*, %struct.dentry*)*, i32 (%struct.seq_file*, %struct.dentry*)*, i64 (%struct.super_block*, i32, i8*, i64, i64)*, i64 (%struct.super_block*, i32, i8*, i64, i64)*, %struct.dquot** (%struct.inode*)*, i32 (%struct.super_block*, %struct.page*, i32)*, i64 (%struct.super_block*, %struct.shrink_control*)*, i64 (%struct.super_block*, %struct.shrink_control*)* }
%struct.writeback_control = type opaque
%struct.kstatfs = type opaque
%struct.dquot = type { %struct.hlist_node, %struct.list_head, %struct.list_head, %struct.list_head, %struct.mutex, %struct.atomic_t, %struct.__wait_queue_head, %struct.super_block*, %struct.kqid, i64, i64, %struct.mem_dqblk }
%struct.__wait_queue_head = type { %struct.spinlock, %struct.list_head }
%struct.kqid = type { %union.anon.4, i32 }
%union.anon.4 = type { %struct.kuid_t }
%struct.kuid_t = type { i32 }
%struct.mem_dqblk = type { i64, i64, i64, i64, i64, i64, i64, i64, i64 }
%struct.page = type { i64, %union.anon.5, %union.anon.44, %union.anon.45, %union.anon.49, %union.anon.52, [8 x i8] }
%union.anon.5 = type { %struct.address_space* }
%union.anon.44 = type { i64 }
%union.anon.45 = type { i64 }
%union.anon.49 = type { %struct.list_head }
%union.anon.52 = type { i64 }
%struct.shrink_control = type { i32, i64, i32, %struct.mem_cgroup* }
%struct.mem_cgroup = type opaque
%struct.dquot_operations = type { i32 (%struct.dquot*)*, %struct.dquot* (%struct.super_block*, i32)*, void (%struct.dquot*)*, i32 (%struct.dquot*)*, i32 (%struct.dquot*)*, i32 (%struct.dquot*)*, i32 (%struct.super_block*, i32)*, i64* (%struct.inode*)*, i32 (%struct.inode*, %struct.kprojid_t*)*, i32 (%struct.super_block*, %struct.kqid*)* }
%struct.kprojid_t = type { i32 }
%struct.quotactl_ops = type { i32 (%struct.super_block*, i32, i32, %struct.path*)*, i32 (%struct.super_block*, i32)*, i32 (%struct.super_block*, i32)*, i32 (%struct.super_block*, i32)*, i32 (%struct.super_block*, i32)*, i32 (%struct.super_block*, i32, %struct.qc_info*)*, i32 (%struct.super_block*, i64, %struct.qc_dqblk*)*, i32 (%struct.super_block*, %struct.kqid*, %struct.qc_dqblk*)*, i32 (%struct.super_block*, i64, %struct.qc_dqblk*)*, i32 (%struct.super_block*, %struct.qc_state*)*, i32 (%struct.super_block*, i32)* }
%struct.qc_info = type { i32, i32, i32, i32, i32, i32, i32, i32 }
%struct.qc_dqblk = type { i32, i64, i64, i64, i64, i64, i64, i64, i64, i32, i32, i64, i64, i64, i64, i32 }
%struct.qc_state = type { i32, [3 x %struct.qc_type_state] }
%struct.qc_type_state = type { i32, i32, i32, i32, i32, i32, i32, i64, i64, i64 }
%struct.export_operations = type opaque
%struct.rw_semaphore = type { %struct.atomic64_t, %struct.list_head, %struct.raw_spinlock, %struct.optimistic_spin_queue, %struct.task_struct* }
%struct.optimistic_spin_queue = type { %struct.atomic_t }
%struct.task_struct = type { %struct.thread_info, i64, i8*, %struct.atomic_t, i32, i32, %struct.llist_node, i32, i32, i32, i64, %struct.task_struct*, i32, i32, i32, i32, i32, i32, %struct.sched_class*, [16 x i8], %struct.sched_entity, %struct.sched_rt_entity, %struct.task_group*, %struct.sched_dl_entity, i32, i32, i32, %struct.cpumask, %struct.sched_info, %struct.list_head, %struct.plist_node, %struct.rb_node, %struct.mm_struct*, %struct.mm_struct*, %struct.vmacache, %struct.task_rss_stat, i32, i32, i32, i32, i64, i32, i8, [3 x i8], i8, i64, %struct.restart_block, i32, i32, %struct.task_struct*, %struct.task_struct*, %struct.list_head, %struct.list_head, %struct.task_struct*, %struct.list_head, %struct.list_head, [3 x %struct.pid_link], %struct.list_head, %struct.list_head, %struct.completion*, i32*, i32*, i64, i64, i64, %struct.prev_cputime, i64, i64, i64, i64, i64, i64, %struct.task_cputime, [3 x %struct.list_head], %struct.cred*, %struct.cred*, %struct.cred*, [16 x i8], %struct.nameidata*, %struct.sysv_sem, %struct.sysv_shm, %struct.fs_struct*, %struct.files_struct*, %struct.nsproxy*, %struct.signal_struct*, %struct.sighand_struct*, %struct.sigset_t, %struct.sigset_t, %struct.sigset_t, %struct.sigpending, i64, i64, i32, %struct.callback_head*, %struct.audit_context*, %struct.kuid_t, i32, %struct.seccomp, i32, i32, %struct.spinlock, %struct.raw_spinlock, %struct.wake_q_node, %struct.rb_root, %struct.rb_node*, %struct.rt_mutex_waiter*, i8*, %struct.bio_list*, %struct.blk_plug*, %struct.reclaim_state*, %struct.backing_dev_info*, %struct.io_context*, i64, %struct.siginfo*, %struct.task_io_accounting, i64, i64, i64, %struct.nodemask_t, %struct.seqcount, i32, i32, %struct.css_set*, %struct.list_head, %struct.robust_list_head*, %struct.compat_robust_list_head*, %struct.list_head, %struct.futex_pi_state*, [2 x %struct.perf_event_context*], %struct.mutex, %struct.list_head, %struct.mempolicy*, i16, i16, %struct.tlbflush_unmap_batch, %struct.callback_head, %struct.pipe_inode_info*, %struct.page_frag, %struct.task_delay_info*, i32, i32, i64, i64, i64, i64, i64, i32, %struct.task_struct*, %struct.vm_struct*, %struct.atomic_t, [28 x i8], %struct.thread_struct }
%struct.thread_info = type { i64 }
%struct.llist_node = type { %struct.llist_node* }
%struct.sched_class = type opaque
%struct.sched_entity = type { %struct.load_weight, %struct.rb_node, %struct.list_head, i32, i64, i64, i64, i64, i64, %struct.sched_statistics, i32, %struct.sched_entity*, %struct.cfs_rq*, %struct.cfs_rq*, [32 x i8], %struct.sched_avg, [24 x i8] }
%struct.load_weight = type { i64, i32 }
%struct.sched_statistics = type { i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64 }
%struct.cfs_rq = type opaque
%struct.sched_avg = type { i64, i64, i32, i32, i64, i64 }
%struct.sched_rt_entity = type { %struct.list_head, i64, i64, i32, i16, i16, %struct.sched_rt_entity* }
%struct.task_group = type opaque
%struct.sched_dl_entity = type { %struct.rb_node, i64, i64, i64, i64, i64, i64, i32, i32, i32, i32, %struct.hrtimer }
%struct.hrtimer = type { %struct.timerqueue_node, i64, i32 (%struct.hrtimer*)*, %struct.hrtimer_clock_base*, i8, i8 }
%struct.timerqueue_node = type { %struct.rb_node, i64 }
%struct.hrtimer_clock_base = type { %struct.hrtimer_cpu_base*, i32, i32, %struct.timerqueue_head, i64 ()*, i64, [16 x i8] }
%struct.hrtimer_cpu_base = type { %struct.raw_spinlock, %struct.seqcount, %struct.hrtimer*, i32, i32, i32, i8, i8, i8, i64, %struct.hrtimer*, i32, i32, i32, i32, [4 x %struct.hrtimer_clock_base] }
%struct.timerqueue_head = type { %struct.rb_root, %struct.timerqueue_node* }
%struct.cpumask = type { [1 x i64] }
%struct.sched_info = type { i64, i64, i64, i64 }
%struct.plist_node = type { i32, %struct.list_head, %struct.list_head }
%struct.mm_struct = type { %struct.vm_area_struct*, %struct.rb_root, i32, i64 (%struct.file*, i64, i64, i64, i64)*, i64, i64, i64, i64, %struct.pgd_t*, %struct.atomic_t, %struct.atomic_t, %struct.atomic64_t, %struct.atomic64_t, i32, %struct.spinlock, %struct.rw_semaphore, %struct.list_head, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, [46 x i64], %struct.mm_rss_stat, %struct.linux_binfmt*, [1 x %struct.cpumask], %struct.mm_context_t, i64, %struct.core_state*, %struct.spinlock, %struct.kioctx_table*, %struct.user_namespace*, %struct.file*, %struct.mmu_notifier_mm*, i8, %struct.uprobes_state, %struct.atomic64_t, %struct.work_struct }
%struct.vm_area_struct = type { i64, i64, %struct.vm_area_struct*, %struct.vm_area_struct*, %struct.rb_node, i64, %struct.mm_struct*, %struct.pgprot, i64, %struct.anon.6, %struct.list_head, %struct.anon_vma*, %struct.vm_operations_struct*, i64, %struct.file*, i8*, %struct.mempolicy*, %struct.vm_userfaultfd_ctx }
%struct.pgprot = type { i64 }
%struct.anon.6 = type { %struct.rb_node, i64 }
%struct.anon_vma = type opaque
%struct.vm_userfaultfd_ctx = type {}
%struct.pgd_t = type { i64 }
%struct.mm_rss_stat = type { [4 x %struct.atomic64_t] }
%struct.linux_binfmt = type opaque
%struct.mm_context_t = type { %struct.ldt_struct*, i16, %struct.mutex, i8*, %struct.vdso_image*, %struct.atomic_t, i16, i16 }
%struct.ldt_struct = type opaque
%struct.vdso_image = type { i8*, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64 }
%struct.core_state = type { %struct.atomic_t, %struct.core_thread, %struct.completion }
%struct.core_thread = type { %struct.task_struct*, %struct.core_thread* }
%struct.completion = type { i32, %struct.__wait_queue_head }
%struct.kioctx_table = type opaque
%struct.mmu_notifier_mm = type opaque
%struct.uprobes_state = type {}
%struct.vmacache = type { i32, [4 x %struct.vm_area_struct*] }
%struct.task_rss_stat = type { i32, [4 x i32] }
%struct.restart_block = type { i64 (%struct.restart_block*)*, %union.anon.7 }
%union.anon.7 = type { %struct.anon.8 }
%struct.anon.8 = type { i32*, i32, i32, i32, i64, i32* }
%struct.pid_link = type { %struct.hlist_node, %struct.pid* }
%struct.pid = type { %struct.atomic_t, i32, [3 x %struct.hlist_head], %struct.callback_head, [1 x %struct.upid] }
%struct.upid = type { i32, %struct.pid_namespace*, %struct.hlist_node }
%struct.pid_namespace = type opaque
%struct.prev_cputime = type { i64, i64, %struct.raw_spinlock }
%struct.task_cputime = type { i64, i64, i64 }
%struct.nameidata = type opaque
%struct.sysv_sem = type { %struct.sem_undo_list* }
%struct.sem_undo_list = type opaque
%struct.sysv_shm = type { %struct.list_head }
%struct.fs_struct = type opaque
%struct.files_struct = type opaque
%struct.nsproxy = type { %struct.atomic_t, %struct.uts_namespace*, %struct.ipc_namespace*, %struct.mnt_namespace*, %struct.pid_namespace*, %struct.net*, %struct.cgroup_namespace* }
%struct.uts_namespace = type opaque
%struct.ipc_namespace = type opaque
%struct.mnt_namespace = type opaque
%struct.net = type { %struct.atomic_t, %struct.atomic_t, %struct.spinlock, %struct.atomic64_t, %struct.list_head, %struct.list_head, %struct.list_head, %struct.user_namespace*, %struct.ucounts*, %struct.spinlock, %struct.idr, %struct.ns_common, %struct.proc_dir_entry*, %struct.proc_dir_entry*, %struct.ctl_table_set, %struct.sock*, %struct.sock*, %struct.list_head, %struct.hlist_head*, %struct.hlist_head*, i32, i32, i32, %struct.list_head, %struct.net_device*, %struct.netns_core, %struct.netns_mib, %struct.netns_packet, %struct.netns_unix, [40 x i8], %struct.netns_ipv4, %struct.netns_ipv6, %struct.netns_nf, %struct.netns_xt, %struct.netns_ct, [16 x i8], %struct.netns_nf_frag, %struct.sock*, %struct.sock*, %struct.net_generic*, [40 x i8], %struct.netns_xfrm, %struct.sock*, %struct.atomic_t, [52 x i8] }
%struct.ucounts = type { %struct.hlist_node, %struct.user_namespace*, %struct.kuid_t, i32, [9 x %struct.atomic_t] }
%struct.idr = type { %struct.radix_tree_root, i32 }
%struct.radix_tree_root = type { i32, %struct.radix_tree_node* }
%struct.radix_tree_node = type { i8, i8, i8, i8, %struct.radix_tree_node*, %struct.radix_tree_root*, %union.anon.0, [64 x i8*], [3 x [1 x i64]] }
%union.anon.0 = type { %struct.list_head }
%struct.ns_common = type { %struct.atomic64_t, %struct.proc_ns_operations*, i32 }
%struct.proc_ns_operations = type opaque
%struct.proc_dir_entry = type opaque
%struct.ctl_table_set = type { i32 (%struct.ctl_table_set*)*, %struct.ctl_dir }
%struct.ctl_dir = type { %struct.ctl_table_header, %struct.rb_root }
%struct.ctl_table_header = type { %union.anon.11, %struct.completion*, %struct.ctl_table*, %struct.ctl_table_root*, %struct.ctl_table_set*, %struct.ctl_dir*, %struct.ctl_node*, %struct.list_head }
%union.anon.11 = type { %struct.anon.12 }
%struct.anon.12 = type { %struct.ctl_table*, i32, i32, i32 }
%struct.ctl_table = type { i8*, i8*, i32, i16, %struct.ctl_table*, i32 (%struct.ctl_table*, i32, i8*, i64*, i64*)*, %struct.ctl_table_poll*, i8*, i8* }
%struct.ctl_table_poll = type { %struct.atomic_t, %struct.__wait_queue_head }
%struct.ctl_table_root = type { %struct.ctl_table_set, %struct.ctl_table_set* (%struct.ctl_table_root*)*, void (%struct.ctl_table_header*, %struct.ctl_table*, %struct.kuid_t*, %struct.kgid_t*)*, i32 (%struct.ctl_table_header*, %struct.ctl_table*)* }
%struct.kgid_t = type { i32 }
%struct.ctl_node = type { %struct.rb_node, %struct.ctl_table_header* }
%struct.net_device = type { [16 x i8], %struct.hlist_node, i8*, i64, i64, i64, i32, %struct.atomic_t, i64, %struct.list_head, %struct.list_head, %struct.list_head, %struct.list_head, %struct.list_head, %struct.list_head, %struct.anon.63, i64, i64, i64, i64, i64, i64, i64, i32, i32, %struct.net_device_stats, %struct.atomic64_t, %struct.atomic64_t, %struct.atomic64_t, %struct.net_device_ops*, %struct.ethtool_ops*, %struct.ndisc_ops*, %struct.header_ops*, i32, i32, i16, i16, i8, i8, i8, i8, i32, i32, i32, i16, i16, i16, i16, i16, [32 x i8], i8, i8, i16, i16, i16, %struct.spinlock, i8, i8, %struct.netdev_hw_addr_list, %struct.netdev_hw_addr_list, %struct.netdev_hw_addr_list, %struct.kset*, i32, i32, i8*, %struct.in_device*, %struct.dn_dev*, %struct.inet6_dev*, i8*, %struct.wireless_dev*, %struct.wpan_dev*, i8*, %struct.netdev_rx_queue*, i32, i32, i64, i32 (%struct.sk_buff**)*, i8*, %struct.tcf_proto*, %struct.netdev_queue*, %struct.nf_hook_entry*, [32 x i8], %struct.cpu_rmap*, %struct.hlist_node, [24 x i8], %struct.netdev_queue*, i32, i32, %struct.Qdisc*, [16 x %struct.hlist_head], i64, %struct.spinlock, i32, %struct.xps_dev_maps*, %struct.tcf_proto*, %struct.timer_list, i32*, %struct.list_head, %struct.list_head, i8, i8, i16, void (%struct.net_device*)*, %struct.netpoll_info*, %struct.possible_net_t, %union.anon.71, %struct.device, [4 x %struct.attribute_group*], %struct.attribute_group*, %struct.rtnl_link_ops*, i32, i16, i8, [16 x %struct.netdev_tc_txq], [16 x i8], %struct.phy_device*, %struct.lock_class_key*, %struct.lock_class_key*, i8, [15 x i8] }
%struct.anon.63 = type { %struct.list_head, %struct.list_head }
%struct.net_device_stats = type { i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64 }
%struct.net_device_ops = type { i32 (%struct.net_device*)*, void (%struct.net_device*)*, i32 (%struct.net_device*)*, i32 (%struct.net_device*)*, i32 (%struct.sk_buff*, %struct.net_device*)*, i64 (%struct.sk_buff*, %struct.net_device*, i64)*, i16 (%struct.net_device*, %struct.sk_buff*, i8*, i16 (%struct.net_device*, %struct.sk_buff*)*)*, void (%struct.net_device*, i32)*, void (%struct.net_device*)*, i32 (%struct.net_device*, i8*)*, i32 (%struct.net_device*)*, i32 (%struct.net_device*, %struct.ifreq*, i32)*, i32 (%struct.net_device*, %struct.ifmap*)*, i32 (%struct.net_device*, i32)*, i32 (%struct.net_device*, %struct.neigh_parms*)*, void (%struct.net_device*)*, void (%struct.net_device*, %struct.rtnl_link_stats64*)*, i1 (%struct.net_device*, i32)*, i32 (i32, %struct.net_device*, i8*)*, %struct.net_device_stats* (%struct.net_device*)*, i32 (%struct.net_device*, i16, i16)*, i32 (%struct.net_device*, i16, i16)*, void (%struct.net_device*)*, i32 (%struct.net_device*, %struct.netpoll_info*)*, void (%struct.net_device*)*, i32 (%struct.net_device*, i32, i8*)*, i32 (%struct.net_device*, i32, i16, i8, i16)*, i32 (%struct.net_device*, i32, i32, i32)*, i32 (%struct.net_device*, i32, i1)*, i32 (%struct.net_device*, i32, i1)*, i32 (%struct.net_device*, i32, %struct.ifla_vf_info*)*, i32 (%struct.net_device*, i32, i32)*, i32 (%struct.net_device*, i32, %struct.ifla_vf_stats*)*, i32 (%struct.net_device*, i32, %struct.nlattr**)*, i32 (%struct.net_device*, i32, %struct.sk_buff*)*, i32 (%struct.net_device*, i32, i64, i32)*, i32 (%struct.net_device*, i32, i1)*, i32 (%struct.net_device*, i32, i16, %struct.tc_to_netdev*)*, i32 (%struct.net_device*, %struct.sk_buff*, i16, i32)*, i32 (%struct.net_device*, %struct.net_device*)*, i32 (%struct.net_device*, %struct.net_device*)*, i64 (%struct.net_device*, i64)*, i32 (%struct.net_device*, i64)*, i32 (%struct.net_device*, %struct.neighbour*)*, void (%struct.net_device*, %struct.neighbour*)*, i32 (%struct.ndmsg*, %struct.nlattr**, %struct.net_device*, i8*, i16, i16)*, i32 (%struct.ndmsg*, %struct.nlattr**, %struct.net_device*, i8*, i16)*, i32 (%struct.sk_buff*, %struct.netlink_callback*, %struct.net_device*, %struct.net_device*, i32*)*, i32 (%struct.net_device*, %struct.nlmsghdr*, i16)*, i32 (%struct.sk_buff*, i32, i32, %struct.net_device*, i32, i32)*, i32 (%struct.net_device*, %struct.nlmsghdr*, i16)*, i32 (%struct.net_device*, i1)*, i32 (%struct.net_device*, %struct.netdev_phys_item_id*)*, i32 (%struct.net_device*, i8*, i64)*, void (%struct.net_device*, %struct.udp_tunnel_info*)*, void (%struct.net_device*, %struct.udp_tunnel_info*)*, i8* (%struct.net_device*, %struct.net_device*)*, void (%struct.net_device*, i8*)*, i32 (%struct.sk_buff*, %struct.net_device*, i8*)*, i32 (%struct.net_device*)*, i32 (%struct.net_device*, i32, i32)*, i32 (%struct.net_device*)*, i32 (%struct.net_device*, i1)*, i32 (%struct.net_device*, %struct.sk_buff*)*, void (%struct.net_device*, i32)*, i32 (%struct.net_device*, %struct.netdev_xdp*)* }
%struct.sk_buff = type { %union.anon.13, %struct.sock*, %union.anon.18, [48 x i8], i64, {}*, %struct.sec_path*, i64, i32, i32, i16, i16, i16, [0 x i8], i8, [0 x i32], [0 x i8], i32, i16, %union.anon.19, i32, i32, i32, i16, i16, %union.anon.21, i32, %union.anon.22, %union.anon.23, i16, i16, i16, i16, i16, i16, i16, [0 x i32], i32, i32, i8*, i8*, i32, %struct.atomic_t }
%union.anon.13 = type { %struct.anon.14 }
%struct.anon.14 = type { %struct.sk_buff*, %struct.sk_buff*, %union.anon.15 }
%union.anon.15 = type { i64 }
%union.anon.18 = type { %struct.net_device* }
%struct.sec_path = type opaque
%union.anon.19 = type { i32 }
%union.anon.21 = type { i32 }
%union.anon.22 = type { i32 }
%union.anon.23 = type { i16 }
%struct.ifreq = type { %union.anon.64, %union.anon.65 }
%union.anon.64 = type { [16 x i8] }
%union.anon.65 = type { %struct.ifmap }
%struct.ifmap = type { i64, i64, i16, i8, i8, i8 }
%struct.neigh_parms = type opaque
%struct.rtnl_link_stats64 = type { i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64 }
%struct.ifla_vf_info = type { i32, [32 x i8], i32, i32, i32, i32, i32, i32, i32, i32, i16 }
%struct.ifla_vf_stats = type { i64, i64, i64, i64, i64, i64 }
%struct.nlattr = type { i16, i16 }
%struct.tc_to_netdev = type { i32, %union.anon.67, i8 }
%union.anon.67 = type { %struct.tc_cls_u32_offload* }
%struct.tc_cls_u32_offload = type opaque
%struct.neighbour = type opaque
%struct.ndmsg = type { i8, i8, i16, i32, i16, i8, i8 }
%struct.netlink_callback = type { %struct.sk_buff*, %struct.nlmsghdr*, i32 (%struct.netlink_callback*)*, i32 (%struct.sk_buff*, %struct.netlink_callback*)*, i32 (%struct.netlink_callback*)*, i8*, %struct.module*, i16, i16, i32, i32, [6 x i64] }
%struct.nlmsghdr = type { i32, i16, i16, i32, i32 }
%struct.netdev_phys_item_id = type { [32 x i8], i8 }
%struct.udp_tunnel_info = type opaque
%struct.netdev_xdp = type { i32, %union.anon.68 }
%union.anon.68 = type { %struct.bpf_prog* }
%struct.bpf_prog = type opaque
%struct.ethtool_ops = type { i32 (%struct.net_device*, %struct.ethtool_cmd*)*, i32 (%struct.net_device*, %struct.ethtool_cmd*)*, void (%struct.net_device*, %struct.ethtool_drvinfo*)*, i32 (%struct.net_device*)*, void (%struct.net_device*, %struct.ethtool_regs*, i8*)*, void (%struct.net_device*, %struct.ethtool_wolinfo*)*, i32 (%struct.net_device*, %struct.ethtool_wolinfo*)*, i32 (%struct.net_device*)*, void (%struct.net_device*, i32)*, i32 (%struct.net_device*)*, i32 (%struct.net_device*)*, i32 (%struct.net_device*)*, i32 (%struct.net_device*, %struct.ethtool_eeprom*, i8*)*, i32 (%struct.net_device*, %struct.ethtool_eeprom*, i8*)*, i32 (%struct.net_device*, %struct.ethtool_coalesce*)*, i32 (%struct.net_device*, %struct.ethtool_coalesce*)*, void (%struct.net_device*, %struct.ethtool_ringparam*)*, i32 (%struct.net_device*, %struct.ethtool_ringparam*)*, void (%struct.net_device*, %struct.ethtool_pauseparam*)*, i32 (%struct.net_device*, %struct.ethtool_pauseparam*)*, void (%struct.net_device*, %struct.ethtool_test*, i64*)*, void (%struct.net_device*, i32, i8*)*, i32 (%struct.net_device*, i32)*, void (%struct.net_device*, %struct.ethtool_stats*, i64*)*, i32 (%struct.net_device*)*, void (%struct.net_device*)*, i32 (%struct.net_device*)*, i32 (%struct.net_device*, i32)*, i32 (%struct.net_device*, i32)*, i32 (%struct.net_device*, %struct.ethtool_rxnfc*, i32*)*, i32 (%struct.net_device*, %struct.ethtool_rxnfc*)*, i32 (%struct.net_device*, %struct.ethtool_flash*)*, i32 (%struct.net_device*, i32*)*, i32 (%struct.net_device*)*, i32 (%struct.net_device*)*, i32 (%struct.net_device*, i32*, i8*, i8*)*, i32 (%struct.net_device*, i32*, i8*, i8)*, void (%struct.net_device*, %struct.ethtool_channels*)*, i32 (%struct.net_device*, %struct.ethtool_channels*)*, i32 (%struct.net_device*, %struct.ethtool_dump*)*, i32 (%struct.net_device*, %struct.ethtool_dump*, i8*)*, i32 (%struct.net_device*, %struct.ethtool_dump*)*, i32 (%struct.net_device*, %struct.ethtool_ts_info*)*, i32 (%struct.net_device*, %struct.ethtool_modinfo*)*, i32 (%struct.net_device*, %struct.ethtool_eeprom*, i8*)*, i32 (%struct.net_device*, %struct.ethtool_eee*)*, i32 (%struct.net_device*, %struct.ethtool_eee*)*, i32 (%struct.net_device*, %struct.ethtool_tunable*, i8*)*, i32 (%struct.net_device*, %struct.ethtool_tunable*, i8*)*, i32 (%struct.net_device*, i32, %struct.ethtool_coalesce*)*, i32 (%struct.net_device*, i32, %struct.ethtool_coalesce*)*, i32 (%struct.net_device*, %struct.ethtool_link_ksettings*)*, i32 (%struct.net_device*, %struct.ethtool_link_ksettings*)* }
%struct.ethtool_cmd = type { i32, i32, i32, i16, i8, i8, i8, i8, i8, i8, i32, i32, i16, i8, i8, i32, [2 x i32] }
%struct.ethtool_drvinfo = type { i32, [32 x i8], [32 x i8], [32 x i8], [32 x i8], [32 x i8], [12 x i8], i32, i32, i32, i32, i32 }
%struct.ethtool_regs = type { i32, i32, i32, [0 x i8] }
%struct.ethtool_wolinfo = type { i32, i32, i32, [6 x i8] }
%struct.ethtool_coalesce = type { i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32 }
%struct.ethtool_ringparam = type { i32, i32, i32, i32, i32, i32, i32, i32, i32 }
%struct.ethtool_pauseparam = type { i32, i32, i32, i32 }
%struct.ethtool_test = type { i32, i32, i32, i32, [0 x i64] }
%struct.ethtool_stats = type { i32, i32, [0 x i64] }
%struct.ethtool_rxnfc = type { i32, i32, i64, %struct.ethtool_rx_flow_spec, i32, [0 x i32] }
%struct.ethtool_rx_flow_spec = type { i32, %union.ethtool_flow_union, %struct.ethtool_flow_ext, %union.ethtool_flow_union, %struct.ethtool_flow_ext, i64, i32 }
%union.ethtool_flow_union = type { %struct.ethtool_tcpip6_spec, [12 x i8] }
%struct.ethtool_tcpip6_spec = type { [4 x i32], [4 x i32], i16, i16, i8 }
%struct.ethtool_flow_ext = type { [2 x i8], [6 x i8], i16, i16, [2 x i32] }
%struct.ethtool_flash = type { i32, i32, [128 x i8] }
%struct.ethtool_channels = type { i32, i32, i32, i32, i32, i32, i32, i32, i32 }
%struct.ethtool_dump = type { i32, i32, i32, i32, [0 x i8] }
%struct.ethtool_ts_info = type { i32, i32, i32, i32, [3 x i32], i32, [3 x i32] }
%struct.ethtool_modinfo = type { i32, i32, i32, [8 x i32] }
%struct.ethtool_eeprom = type { i32, i32, i32, i32, [0 x i8] }
%struct.ethtool_eee = type { i32, i32, i32, i32, i32, i32, i32, i32, [2 x i32] }
%struct.ethtool_tunable = type { i32, i32, i32, i32, [0 x i8*] }
%struct.ethtool_link_ksettings = type { %struct.ethtool_link_settings, %struct.anon.69 }
%struct.ethtool_link_settings = type { i32, i32, i8, i8, i8, i8, i8, i8, i8, i8, [8 x i32], [0 x i32] }
%struct.anon.69 = type { [1 x i64], [1 x i64], [1 x i64] }
%struct.ndisc_ops = type opaque
%struct.header_ops = type { i32 (%struct.sk_buff*, %struct.net_device*, i16, i8*, i8*, i32)*, i32 (%struct.sk_buff*, i8*)*, i32 (%struct.neighbour*, %struct.hh_cache*, i16)*, void (%struct.hh_cache*, %struct.net_device*, i8*)*, i1 (i8*, i32)* }
%struct.hh_cache = type { i16, i16, %struct.seqlock_t, [12 x i64] }
%struct.seqlock_t = type { %struct.seqcount, %struct.spinlock }
%struct.netdev_hw_addr_list = type { %struct.list_head, i32 }
%struct.in_device = type opaque
%struct.dn_dev = type opaque
%struct.inet6_dev = type opaque
%struct.wireless_dev = type { %struct.wiphy*, i32, %struct.list_head, %struct.net_device*, i32, %struct.list_head, %struct.spinlock, %struct.mutex, i8, i8, [6 x i8], [32 x i8], i8, i8, i8, %struct.cfg80211_conn*, %struct.cfg80211_cached_keys*, i32, i32, %struct.work_struct, [6 x i8], %struct.list_head, %struct.spinlock, %struct.cfg80211_internal_bss*, %struct.cfg80211_chan_def, %struct.cfg80211_chan_def, i8, i8, i8, i32, i32, i32, i8, i64, i32, i32 }
%struct.wiphy = type { [6 x i8], [6 x i8], %struct.mac_address*, %struct.ieee80211_txrx_stypes*, %struct.ieee80211_iface_combination*, i32, i16, i16, i16, i16, i32, i32, i32, [2 x i8], i32, i32, i32, i8, i8, i8, i16, i16, i32, i32, i32, i32, i32*, i8, i8, i32, i32, i8, [32 x i8], i32, %struct.wiphy_wowlan_support*, %struct.cfg80211_wowlan*, i16, i8, i32, i32, i32, i8*, i8*, i8, %struct.wiphy_iftype_ext_capab*, i32, i8*, [3 x %struct.ieee80211_supported_band*], void (%struct.wiphy*, %struct.regulatory_request*)*, %struct.ieee80211_regdomain*, %struct.device, i8, %struct.dentry*, %struct.ieee80211_ht_cap*, %struct.ieee80211_vht_cap*, %struct.list_head, %struct.possible_net_t, %struct.wiphy_coalesce_support*, %struct.wiphy_vendor_command*, %struct.nl80211_vendor_cmd_info*, i32, i32, i16, i8, i8, i32, i64, i8, [31 x i8], [0 x i8] }
%struct.mac_address = type { [6 x i8] }
%struct.ieee80211_txrx_stypes = type { i16, i16 }
%struct.ieee80211_iface_combination = type { %struct.ieee80211_iface_limit*, i32, i16, i8, i8, i8, i8, i32 }
%struct.ieee80211_iface_limit = type { i16, i16 }
%struct.wiphy_wowlan_support = type { i32, i32, i32, i32, i32, i32, %struct.wiphy_wowlan_tcp_support* }
%struct.wiphy_wowlan_tcp_support = type { %struct.nl80211_wowlan_tcp_data_token_feature*, i32, i32, i32, i8 }
%struct.nl80211_wowlan_tcp_data_token_feature = type { i32, i32, i32 }
%struct.cfg80211_wowlan = type { i8, i8, i8, i8, i8, i8, i8, %struct.cfg80211_pkt_pattern*, %struct.cfg80211_wowlan_tcp*, i32, %struct.cfg80211_sched_scan_request* }
%struct.cfg80211_pkt_pattern = type { i8*, i8*, i32, i32 }
%struct.cfg80211_wowlan_tcp = type { %struct.socket*, i32, i32, i16, i16, [6 x i8], i32, i8*, %struct.nl80211_wowlan_tcp_data_seq, i32, i32, i8*, i8*, i32, %struct.nl80211_wowlan_tcp_data_token }
%struct.socket = type { i32, i16, i64, %struct.socket_wq*, %struct.file*, %struct.sock*, %struct.proto_ops* }
%struct.socket_wq = type { %struct.__wait_queue_head, %struct.fasync_struct*, i64, %struct.callback_head, [8 x i8] }
%struct.fasync_struct = type { %struct.spinlock, i32, i32, %struct.fasync_struct*, %struct.file*, %struct.callback_head }
%struct.proto_ops = type { i32, %struct.module*, i32 (%struct.socket*)*, i32 (%struct.socket*, %struct.sockaddr*, i32)*, i32 (%struct.socket*, %struct.sockaddr*, i32, i32)*, i32 (%struct.socket*, %struct.socket*)*, i32 (%struct.socket*, %struct.socket*, i32, i1)*, i32 (%struct.socket*, %struct.sockaddr*, i32*, i32)*, i32 (%struct.file*, %struct.socket*, %struct.poll_table_struct*)*, i32 (%struct.socket*, i32, i64)*, i32 (%struct.socket*, i32, i64)*, i32 (%struct.socket*, i32)*, i32 (%struct.socket*, i32)*, i32 (%struct.socket*, i32, i32, i8*, i32)*, i32 (%struct.socket*, i32, i32, i8*, i32*)*, i32 (%struct.socket*, i32, i32, i8*, i32)*, i32 (%struct.socket*, i32, i32, i8*, i32*)*, i32 (%struct.socket*, %struct.msghdr*, i64)*, i32 (%struct.socket*, %struct.msghdr*, i64, i32)*, i32 (%struct.file*, %struct.socket*, %struct.vm_area_struct*)*, i64 (%struct.socket*, %struct.page*, i32, i64, i32)*, i64 (%struct.socket*, i64*, %struct.pipe_inode_info*, i64, i32)*, i32 (%struct.sock*, i32)*, i32 (%struct.socket*)*, i32 (%struct.sock*, %struct.read_descriptor_t*, i32 (%struct.read_descriptor_t*, %struct.sk_buff*, i32, i64)*)* }
%struct.sockaddr = type { i16, [14 x i8] }
%struct.poll_table_struct = type opaque
%struct.msghdr = type { i8*, i32, %struct.iov_iter, i8*, i64, i32, %struct.kiocb* }
%struct.iov_iter = type { i32, i64, i64, %union.anon.41, %union.anon.42 }
%union.anon.41 = type { %struct.iovec* }
%struct.iovec = type { i8*, i64 }
%union.anon.42 = type { i64 }
%struct.kiocb = type { %struct.file*, i64, void (%struct.kiocb*, i64, i64)*, i8*, i32 }
%struct.read_descriptor_t = type { i64, i64, %union.anon.70, i32 }
%union.anon.70 = type { i8* }
%struct.nl80211_wowlan_tcp_data_seq = type { i32, i32, i32 }
%struct.nl80211_wowlan_tcp_data_token = type { i32, i32, [0 x i8] }
%struct.cfg80211_sched_scan_request = type { %struct.cfg80211_ssid*, i32, i32, i32, i8*, i64, i32, %struct.cfg80211_match_set*, i32, i32, i32, %struct.cfg80211_sched_scan_plan*, i32, [6 x i8], [6 x i8], i8, i8, %struct.cfg80211_bss_select_adjust, %struct.wiphy*, %struct.net_device*, i64, %struct.callback_head, i32, [0 x %struct.ieee80211_channel*] }
%struct.cfg80211_ssid = type { [32 x i8], i8 }
%struct.cfg80211_match_set = type { %struct.cfg80211_ssid, i32 }
%struct.cfg80211_sched_scan_plan = type { i32, i32 }
%struct.cfg80211_bss_select_adjust = type { i32, i8 }
%struct.ieee80211_channel = type { i32, i16, i16, i32, i32, i32, i32, i8, i32, i32, i32, i32, i64, i32 }
%struct.wiphy_iftype_ext_capab = type { i32, i8*, i8*, i8 }
%struct.ieee80211_supported_band = type { %struct.ieee80211_channel*, %struct.ieee80211_rate*, i32, i32, i32, %struct.ieee80211_sta_ht_cap, %struct.ieee80211_sta_vht_cap }
%struct.ieee80211_rate = type { i32, i16, i16, i16 }
%struct.ieee80211_sta_ht_cap = type <{ i16, i8, i8, i8, %struct.ieee80211_mcs_info, i8 }>
%struct.ieee80211_mcs_info = type { [10 x i8], i16, i8, [3 x i8] }
%struct.ieee80211_sta_vht_cap = type { i8, i32, %struct.ieee80211_vht_mcs_info }
%struct.ieee80211_vht_mcs_info = type { i16, i16, i16, i16 }
%struct.regulatory_request = type { %struct.callback_head, i32, i32, i32, [2 x i8], i32, i8, i8, i32, %struct.list_head }
%struct.ieee80211_regdomain = type { %struct.callback_head, i32, [3 x i8], i32, [0 x %struct.ieee80211_reg_rule] }
%struct.ieee80211_reg_rule = type { %struct.ieee80211_freq_range, %struct.ieee80211_power_rule, i32, i32 }
%struct.ieee80211_freq_range = type { i32, i32, i32 }
%struct.ieee80211_power_rule = type { i32, i32 }
%struct.ieee80211_ht_cap = type <{ i16, i8, %struct.ieee80211_mcs_info, i16, i32, i8 }>
%struct.ieee80211_vht_cap = type { i32, %struct.ieee80211_vht_mcs_info }
%struct.wiphy_coalesce_support = type { i32, i32, i32, i32, i32, i32 }
%struct.wiphy_vendor_command = type { %struct.nl80211_vendor_cmd_info, i32, i32 (%struct.wiphy*, %struct.wireless_dev*, i8*, i32)*, i32 (%struct.wiphy*, %struct.wireless_dev*, %struct.sk_buff*, i8*, i32, i64*)* }
%struct.nl80211_vendor_cmd_info = type { i32, i32 }
%struct.cfg80211_conn = type opaque
%struct.cfg80211_cached_keys = type { [4 x %struct.key_params], [4 x [13 x i8]], i32 }
%struct.key_params = type { i8*, i8*, i32, i32, i32 }
%struct.cfg80211_internal_bss = type { %struct.list_head, %struct.list_head, %struct.rb_node, i64, i64, i64, %struct.atomic_t, i64, [6 x i8], %struct.cfg80211_bss }
%struct.cfg80211_bss = type { %struct.ieee80211_channel*, i32, %struct.cfg80211_bss_ies*, %struct.cfg80211_bss_ies*, %struct.cfg80211_bss_ies*, %struct.cfg80211_bss*, i32, i16, i16, [6 x i8], [2 x i8], [0 x i8] }
%struct.cfg80211_bss_ies = type { i64, %struct.callback_head, i32, i8, [0 x i8] }
%struct.cfg80211_chan_def = type { %struct.ieee80211_channel*, i32, i32, i32 }
%struct.wpan_dev = type opaque
%struct.netdev_rx_queue = type { %struct.rps_map*, %struct.rps_dev_flow_table*, %struct.kobject, %struct.net_device*, [40 x i8] }
%struct.rps_map = type { i32, %struct.callback_head, [0 x i16] }
%struct.rps_dev_flow_table = type { i32, %struct.callback_head, [0 x %struct.rps_dev_flow] }
%struct.rps_dev_flow = type { i16, i16, i32 }
%struct.nf_hook_entry = type opaque
%struct.cpu_rmap = type opaque
%struct.netdev_queue = type { %struct.net_device*, %struct.Qdisc*, %struct.Qdisc*, %struct.kobject, i32, i64, i64, [16 x i8], %struct.spinlock, i32, i64, i64, [40 x i8], %struct.dql }
%struct.dql = type { i32, i32, i32, [52 x i8], i32, i32, i32, i32, i32, i32, i64, i32, i32, i32, [20 x i8] }
%struct.Qdisc = type opaque
%struct.xps_dev_maps = type { %struct.callback_head, [0 x %struct.xps_map*] }
%struct.xps_map = type { i32, i32, %struct.callback_head, [0 x i16] }
%struct.tcf_proto = type opaque
%struct.timer_list = type { %struct.hlist_node, i64, void (i64)*, i64, i32 }
%struct.netpoll_info = type opaque
%struct.possible_net_t = type { %struct.net* }
%union.anon.71 = type { i8* }
%struct.device = type { %struct.device*, %struct.device_private*, %struct.kobject, i8*, %struct.device_type*, %struct.mutex, %struct.bus_type*, %struct.device_driver*, i8*, i8*, %struct.dev_links_info, %struct.dev_pm_info, %struct.dev_pm_domain*, %struct.irq_domain*, %struct.list_head, i32, %struct.dma_map_ops*, i64*, i64, i64, %struct.device_dma_parameters*, %struct.list_head, %struct.dma_coherent_mem*, %struct.dev_archdata, %struct.device_node*, %struct.fwnode_handle*, i32, i32, %struct.spinlock, %struct.list_head, %struct.klist_node, %struct.class*, %struct.attribute_group**, void (%struct.device*)*, %struct.iommu_group*, %struct.iommu_fwspec*, i8 }
%struct.device_private = type opaque
%struct.device_type = type { i8*, %struct.attribute_group**, i32 (%struct.device*, %struct.kobj_uevent_env*)*, i8* (%struct.device*, i16*, %struct.kuid_t*, %struct.kgid_t*)*, void (%struct.device*)*, %struct.dev_pm_ops* }
%struct.dev_pm_ops = type { i32 (%struct.device*)*, void (%struct.device*)*, i32 (%struct.device*)*, i32 (%struct.device*)*, i32 (%struct.device*)*, i32 (%struct.device*)*, i32 (%struct.device*)*, i32 (%struct.device*)*, i32 (%struct.device*)*, i32 (%struct.device*)*, i32 (%struct.device*)*, i32 (%struct.device*)*, i32 (%struct.device*)*, i32 (%struct.device*)*, i32 (%struct.device*)*, i32 (%struct.device*)*, i32 (%struct.device*)*, i32 (%struct.device*)*, i32 (%struct.device*)*, i32 (%struct.device*)*, i32 (%struct.device*)*, i32 (%struct.device*)*, i32 (%struct.device*)* }
%struct.bus_type = type { i8*, i8*, %struct.device*, %struct.device_attribute*, %struct.attribute_group**, %struct.attribute_group**, %struct.attribute_group**, i32 (%struct.device*, %struct.device_driver*)*, i32 (%struct.device*, %struct.kobj_uevent_env*)*, i32 (%struct.device*)*, i32 (%struct.device*)*, void (%struct.device*)*, i32 (%struct.device*)*, i32 (%struct.device*)*, i32 (%struct.device*, i32)*, i32 (%struct.device*)*, i32 (%struct.device*)*, %struct.dev_pm_ops*, %struct.iommu_ops*, %struct.subsys_private*, %struct.lock_class_key }
%struct.device_attribute = type { %struct.attribute, i64 (%struct.device*, %struct.device_attribute*, i8*)*, i64 (%struct.device*, %struct.device_attribute*, i8*, i64)* }
%struct.iommu_ops = type opaque
%struct.subsys_private = type opaque
%struct.device_driver = type { i8*, %struct.bus_type*, %struct.module*, i8*, i8, i32, %struct.of_device_id*, %struct.acpi_device_id*, i32 (%struct.device*)*, i32 (%struct.device*)*, void (%struct.device*)*, i32 (%struct.device*, i32)*, i32 (%struct.device*)*, %struct.attribute_group**, %struct.dev_pm_ops*, %struct.driver_private* }
%struct.of_device_id = type { [32 x i8], [32 x i8], [128 x i8], i8* }
%struct.acpi_device_id = type { [9 x i8], i64, i32, i32 }
%struct.driver_private = type opaque
%struct.dev_links_info = type { %struct.list_head, %struct.list_head, i32 }
%struct.dev_pm_info = type { %struct.pm_message, i16, %struct.spinlock, %struct.list_head, %struct.completion, %struct.wakeup_source*, i8, %struct.timer_list, i64, %struct.work_struct, %struct.__wait_queue_head, %struct.wake_irq*, %struct.atomic_t, %struct.atomic_t, i16, i32, i32, i32, i32, i32, i64, i64, i64, i64, %struct.pm_subsys_data*, void (%struct.device*, i32)*, %struct.dev_pm_qos* }
%struct.pm_message = type { i32 }
%struct.wakeup_source = type { i8*, %struct.list_head, %struct.spinlock, %struct.wake_irq*, %struct.timer_list, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i8 }
%struct.wake_irq = type opaque
%struct.pm_subsys_data = type { %struct.spinlock, i32, %struct.list_head }
%struct.dev_pm_qos = type opaque
%struct.dev_pm_domain = type { %struct.dev_pm_ops, void (%struct.device*, i1)*, i32 (%struct.device*)*, void (%struct.device*)*, void (%struct.device*)* }
%struct.irq_domain = type opaque
%struct.dma_map_ops = type { i8* (%struct.device*, i64, i64*, i32, i64)*, void (%struct.device*, i64, i8*, i64, i64)*, i32 (%struct.device*, %struct.vm_area_struct*, i8*, i64, i64, i64)*, i32 (%struct.device*, %struct.sg_table*, i8*, i64, i64, i64)*, i64 (%struct.device*, %struct.page*, i64, i64, i32, i64)*, void (%struct.device*, i64, i64, i32, i64)*, i32 (%struct.device*, %struct.scatterlist*, i32, i32, i64)*, void (%struct.device*, %struct.scatterlist*, i32, i32, i64)*, i64 (%struct.device*, i64, i64, i32, i64)*, void (%struct.device*, i64, i64, i32, i64)*, void (%struct.device*, i64, i64, i32)*, void (%struct.device*, i64, i64, i32)*, void (%struct.device*, %struct.scatterlist*, i32, i32)*, void (%struct.device*, %struct.scatterlist*, i32, i32)*, i32 (%struct.device*, i64)*, i32 (%struct.device*, i64)*, i32 (%struct.device*, i64)*, i32 }
%struct.sg_table = type { %struct.scatterlist*, i32, i32 }
%struct.scatterlist = type { i64, i32, i32, i64, i32 }
%struct.device_dma_parameters = type { i32, i64 }
%struct.dma_coherent_mem = type opaque
%struct.dev_archdata = type { i8* }
%struct.device_node = type { i8*, i8*, i32, i8*, %struct.fwnode_handle, %struct.property*, %struct.property*, %struct.device_node*, %struct.device_node*, %struct.device_node*, %struct.kobject, i64, i8* }
%struct.fwnode_handle = type { i32, %struct.fwnode_handle* }
%struct.property = type { i8*, i32, i8*, %struct.property*, i64, i32, %struct.bin_attribute }
%struct.bin_attribute = type { %struct.attribute, i64, i8*, i64 (%struct.file*, %struct.kobject*, %struct.bin_attribute*, i8*, i64, i64)*, i64 (%struct.file*, %struct.kobject*, %struct.bin_attribute*, i8*, i64, i64)*, i32 (%struct.file*, %struct.kobject*, %struct.bin_attribute*, %struct.vm_area_struct*)* }
%struct.klist_node = type { i8*, %struct.list_head, %struct.kref }
%struct.class = type { i8*, %struct.module*, %struct.class_attribute*, %struct.attribute_group**, %struct.attribute_group**, %struct.kobject*, i32 (%struct.device*, %struct.kobj_uevent_env*)*, i8* (%struct.device*, i16*)*, void (%struct.class*)*, void (%struct.device*)*, i32 (%struct.device*, i32)*, i32 (%struct.device*)*, %struct.kobj_ns_type_operations*, i8* (%struct.device*)*, %struct.dev_pm_ops*, %struct.subsys_private* }
%struct.class_attribute = type { %struct.attribute, i64 (%struct.class*, %struct.class_attribute*, i8*)*, i64 (%struct.class*, %struct.class_attribute*, i8*, i64)* }
%struct.iommu_group = type opaque
%struct.iommu_fwspec = type opaque
%struct.attribute_group = type { i8*, i16 (%struct.kobject*, %struct.attribute*, i32)*, i16 (%struct.kobject*, %struct.bin_attribute*, i32)*, %struct.attribute**, %struct.bin_attribute** }
%struct.rtnl_link_ops = type opaque
%struct.netdev_tc_txq = type { i16, i16 }
%struct.phy_device = type opaque
%struct.netns_core = type { %struct.ctl_table_header*, i32, %struct.prot_inuse* }
%struct.prot_inuse = type opaque
%struct.netns_mib = type { %struct.tcp_mib*, %struct.ipstats_mib*, %struct.linux_mib*, %struct.udp_mib*, %struct.udp_mib*, %struct.icmp_mib*, %struct.icmpmsg_mib*, %struct.proc_dir_entry*, %struct.udp_mib*, %struct.udp_mib*, %struct.ipstats_mib*, %struct.icmpv6_mib*, %struct.icmpv6msg_mib* }
%struct.tcp_mib = type { [16 x i64] }
%struct.linux_mib = type { [119 x i64] }
%struct.icmp_mib = type { [28 x i64] }
%struct.icmpmsg_mib = type { [512 x %struct.atomic64_t] }
%struct.udp_mib = type { [9 x i64] }
%struct.ipstats_mib = type { [36 x i64], %struct.u64_stats_sync }
%struct.u64_stats_sync = type {}
%struct.icmpv6_mib = type { [6 x i64] }
%struct.icmpv6msg_mib = type { [512 x %struct.atomic64_t] }
%struct.netns_packet = type { %struct.mutex, %struct.hlist_head }
%struct.netns_unix = type { i32, %struct.ctl_table_header* }
%struct.netns_ipv4 = type { %struct.ctl_table_header*, %struct.ctl_table_header*, %struct.ctl_table_header*, %struct.ctl_table_header*, %struct.ctl_table_header*, %struct.ipv4_devconf*, %struct.ipv4_devconf*, %struct.fib_rules_ops*, i8, %struct.fib_table*, %struct.fib_table*, %struct.hlist_head*, i8, %struct.sock*, %struct.sock**, %struct.sock*, %struct.inet_peer_base*, %struct.sock**, [48 x i8], %struct.netns_frags, %struct.xt_table*, %struct.xt_table*, %struct.xt_table*, %struct.xt_table*, %struct.xt_table*, %struct.xt_table*, i32, i32, i32, i32, i32, i32, %struct.local_ports, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, [56 x i8], %struct.inet_timewait_death_row, i32, i32, i32, i32, i32, %struct.ping_group_range, %struct.atomic_t, i64*, i32, %struct.mr_table*, i32, i32, %struct.atomic_t, [52 x i8] }
%struct.ipv4_devconf = type opaque
%struct.fib_rules_ops = type opaque
%struct.fib_table = type opaque
%struct.inet_peer_base = type opaque
%struct.netns_frags = type { %struct.percpu_counter, i32, i32, i32, i32, [8 x i8] }
%struct.percpu_counter = type { %struct.raw_spinlock, i64, %struct.list_head, i32* }
%struct.xt_table = type opaque
%struct.local_ports = type { %struct.seqlock_t, [2 x i32], i8 }
%struct.inet_timewait_death_row = type { %struct.atomic_t, [60 x i8], %struct.inet_hashinfo*, i32, i32, [48 x i8] }
%struct.inet_hashinfo = type opaque
%struct.ping_group_range = type { %struct.seqlock_t, [2 x %struct.kgid_t] }
%struct.mr_table = type opaque
%struct.netns_ipv6 = type { %struct.netns_sysctl_ipv6, %struct.ipv6_devconf*, %struct.ipv6_devconf*, %struct.inet_peer_base*, [56 x i8], %struct.netns_frags, %struct.xt_table*, %struct.xt_table*, %struct.xt_table*, %struct.xt_table*, %struct.xt_table*, %struct.rt6_info*, %struct.rt6_statistics*, %struct.timer_list, %struct.hlist_head*, %struct.fib6_table*, %struct.list_head, [56 x i8], %struct.dst_ops, %struct.rwlock_t, %struct.spinlock, i32, i64, %struct.sock**, %struct.sock*, %struct.sock*, %struct.sock*, %struct.sock*, %struct.atomic_t, %struct.atomic_t, %struct.seg6_pernet_data*, [48 x i8] }
%struct.netns_sysctl_ipv6 = type { %struct.ctl_table_header*, %struct.ctl_table_header*, %struct.ctl_table_header*, %struct.ctl_table_header*, %struct.ctl_table_header*, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32 }
%struct.ipv6_devconf = type opaque
%struct.rt6_info = type opaque
%struct.rt6_statistics = type opaque
%struct.fib6_table = type opaque
%struct.dst_ops = type { i16, i32, i32 (%struct.dst_ops*)*, %struct.dst_entry* (%struct.dst_entry*, i32)*, i32 (%struct.dst_entry*)*, i32 (%struct.dst_entry*)*, i32* (%struct.dst_entry*, i64)*, void (%struct.dst_entry*)*, void (%struct.dst_entry*, %struct.net_device*, i32)*, %struct.dst_entry* (%struct.dst_entry*)*, void (%struct.sk_buff*)*, void (%struct.dst_entry*, %struct.sock*, %struct.sk_buff*, i32)*, void (%struct.dst_entry*, %struct.sock*, %struct.sk_buff*)*, i32 (%struct.net*, %struct.sock*, %struct.sk_buff*)*, %struct.neighbour* (%struct.dst_entry*, %struct.sk_buff*, i8*)*, void (%struct.dst_entry*, i8*)*, %struct.kmem_cache*, %struct.percpu_counter, [24 x i8] }
%struct.dst_entry = type opaque
%struct.kmem_cache = type opaque
%struct.rwlock_t = type { %struct.qrwlock }
%struct.qrwlock = type { %struct.atomic_t, %struct.qspinlock }
%struct.seg6_pernet_data = type opaque
%struct.netns_nf = type { %struct.proc_dir_entry*, %struct.nf_queue_handler*, [13 x %struct.nf_logger*], %struct.ctl_table_header*, [13 x [8 x %struct.nf_hook_entry*]], i8, i8 }
%struct.nf_queue_handler = type opaque
%struct.nf_logger = type opaque
%struct.netns_xt = type { [13 x %struct.list_head], i8, i8 }
%struct.netns_ct = type { %struct.atomic_t, i32, %struct.ctl_table_header*, %struct.ctl_table_header*, %struct.ctl_table_header*, %struct.ctl_table_header*, %struct.ctl_table_header*, i32, i32, i32, i32, i8, i32, i32, %struct.ct_pcpu*, %struct.ip_conntrack_stat*, %struct.nf_ct_event_notifier*, %struct.nf_exp_event_notifier*, %struct.nf_ip_net }
%struct.ct_pcpu = type { %struct.spinlock, %struct.hlist_nulls_head, %struct.hlist_nulls_head }
%struct.hlist_nulls_head = type { %struct.hlist_nulls_node* }
%struct.hlist_nulls_node = type { %struct.hlist_nulls_node*, %struct.hlist_nulls_node** }
%struct.ip_conntrack_stat = type opaque
%struct.nf_ct_event_notifier = type opaque
%struct.nf_exp_event_notifier = type opaque
%struct.nf_ip_net = type { %struct.nf_generic_net, %struct.nf_tcp_net, %struct.nf_udp_net, %struct.nf_icmp_net, %struct.nf_icmp_net }
%struct.nf_generic_net = type { %struct.nf_proto_net, i32 }
%struct.nf_proto_net = type { %struct.ctl_table_header*, %struct.ctl_table*, i32 }
%struct.nf_tcp_net = type { %struct.nf_proto_net, [14 x i32], i32, i32, i32 }
%struct.nf_udp_net = type { %struct.nf_proto_net, [2 x i32] }
%struct.nf_icmp_net = type { %struct.nf_proto_net, i32 }
%struct.netns_nf_frag = type { %struct.netns_sysctl_ipv6, [16 x i8], %struct.netns_frags }
%struct.net_generic = type opaque
%struct.netns_xfrm = type { %struct.list_head, %struct.hlist_head*, %struct.hlist_head*, %struct.hlist_head*, i32, i32, %struct.work_struct, %struct.list_head, %struct.hlist_head*, i32, [3 x %struct.hlist_head], [3 x %struct.xfrm_policy_hash], [6 x i32], %struct.work_struct, %struct.xfrm_policy_hthresh, %struct.sock*, %struct.sock*, i32, i32, i32, i32, %struct.ctl_table_header*, [56 x i8], %struct.dst_ops, %struct.dst_ops, %struct.spinlock, %struct.spinlock, %struct.mutex, %struct.flow_cache, %struct.atomic_t, %struct.list_head, %struct.atomic_t, %struct.spinlock, %struct.work_struct, %struct.work_struct, %struct.mutex }
%struct.xfrm_policy_hash = type { %struct.hlist_head*, i32, i8, i8, i8, i8 }
%struct.xfrm_policy_hthresh = type { %struct.work_struct, %struct.seqlock_t, i8, i8, i8, i8 }
%struct.flow_cache = type { i32, %struct.flow_cache_percpu*, %struct.hlist_node, i32, i32, %struct.timer_list }
%struct.flow_cache_percpu = type { %struct.hlist_head*, i32, i32, i32, %struct.tasklet_struct }
%struct.tasklet_struct = type { %struct.tasklet_struct*, i64, %struct.atomic_t, void (i64)*, i64 }
%struct.cgroup_namespace = type { %struct.atomic_t, %struct.ns_common, %struct.user_namespace*, %struct.ucounts*, %struct.css_set* }
%struct.signal_struct = type opaque
%struct.sighand_struct = type opaque
%struct.sigset_t = type { [1 x i64] }
%struct.sigpending = type { %struct.list_head, %struct.sigset_t }
%struct.audit_context = type opaque
%struct.seccomp = type { i32, %struct.seccomp_filter* }
%struct.seccomp_filter = type opaque
%struct.wake_q_node = type { %struct.wake_q_node* }
%struct.rb_root = type { %struct.rb_node* }
%struct.rt_mutex_waiter = type opaque
%struct.bio_list = type opaque
%struct.blk_plug = type opaque
%struct.reclaim_state = type opaque
%struct.io_context = type opaque
%struct.siginfo = type { i32, i32, i32, %union.anon.24 }
%union.anon.24 = type { %struct.anon.28, [80 x i8] }
%struct.anon.28 = type { i32, i32, i32, i64, i64 }
%struct.task_io_accounting = type { i64, i64, i64, i64, i64, i64, i64 }
%struct.nodemask_t = type { [1 x i64] }
%struct.css_set = type { [4 x %struct.cgroup_subsys_state*], %struct.atomic_t, %struct.cgroup*, %struct.list_head, %struct.list_head, %struct.list_head, [4 x %struct.list_head], %struct.hlist_node, %struct.list_head, %struct.list_head, %struct.list_head, %struct.cgroup*, %struct.cgroup*, %struct.css_set*, i8, %struct.callback_head }
%struct.cgroup_subsys_state = type { %struct.cgroup*, %struct.cgroup_subsys*, %struct.percpu_ref, %struct.cgroup_subsys_state*, %struct.list_head, %struct.list_head, i32, i32, i64, %struct.atomic_t, %struct.callback_head, %struct.work_struct }
%struct.cgroup_subsys = type { %struct.cgroup_subsys_state* (%struct.cgroup_subsys_state*)*, i32 (%struct.cgroup_subsys_state*)*, void (%struct.cgroup_subsys_state*)*, void (%struct.cgroup_subsys_state*)*, void (%struct.cgroup_subsys_state*)*, void (%struct.cgroup_subsys_state*)*, i32 (%struct.cgroup_taskset*)*, void (%struct.cgroup_taskset*)*, void (%struct.cgroup_taskset*)*, void ()*, i32 (%struct.task_struct*)*, void (%struct.task_struct*)*, void (%struct.task_struct*)*, void (%struct.task_struct*)*, void (%struct.task_struct*)*, void (%struct.cgroup_subsys_state*)*, i8, i32, i8*, i8*, %struct.cgroup_root*, %struct.idr, %struct.list_head, %struct.cftype*, %struct.cftype*, i32 }
%struct.cgroup_taskset = type opaque
%struct.cgroup_root = type { %struct.kernfs_root*, i32, i32, %struct.cgroup, i32, %struct.atomic_t, %struct.list_head, i32, %struct.idr, [4096 x i8], [64 x i8] }
%struct.kernfs_root = type { %struct.kernfs_node*, i32, %struct.ida, %struct.kernfs_syscall_ops*, %struct.list_head, %struct.__wait_queue_head }
%struct.ida = type { %struct.radix_tree_root }
%struct.kernfs_syscall_ops = type { i32 (%struct.kernfs_root*, i32*, i8*)*, i32 (%struct.seq_file*, %struct.kernfs_root*)*, i32 (%struct.kernfs_node*, i8*, i16)*, i32 (%struct.kernfs_node*)*, i32 (%struct.kernfs_node*, %struct.kernfs_node*, i8*)*, i32 (%struct.seq_file*, %struct.kernfs_node*, %struct.kernfs_root*)* }
%struct.cgroup = type { %struct.cgroup_subsys_state, i64, i32, i32, i32, %struct.kernfs_node*, %struct.cgroup_file, %struct.cgroup_file, i16, i16, i16, i16, [4 x %struct.cgroup_subsys_state*], %struct.cgroup_root*, %struct.list_head, [4 x %struct.list_head], %struct.list_head, %struct.mutex, %struct.__wait_queue_head, %struct.work_struct, %struct.cgroup_bpf, [0 x i32] }
%struct.cgroup_file = type { %struct.kernfs_node* }
%struct.cgroup_bpf = type {}
%struct.cftype = type { [64 x i8], i64, i64, i32, i32, %struct.cgroup_subsys*, %struct.list_head, %struct.kernfs_ops*, i32 (%struct.kernfs_open_file*)*, void (%struct.kernfs_open_file*)*, i64 (%struct.cgroup_subsys_state*, %struct.cftype*)*, i64 (%struct.cgroup_subsys_state*, %struct.cftype*)*, i32 (%struct.seq_file*, i8*)*, i8* (%struct.seq_file*, i64*)*, i8* (%struct.seq_file*, i8*, i64*)*, void (%struct.seq_file*, i8*)*, i32 (%struct.cgroup_subsys_state*, %struct.cftype*, i64)*, i32 (%struct.cgroup_subsys_state*, %struct.cftype*, i64)*, i64 (%struct.kernfs_open_file*, i8*, i64, i64)* }
%struct.percpu_ref = type { %struct.atomic64_t, i64, void (%struct.percpu_ref*)*, void (%struct.percpu_ref*)*, i8, %struct.callback_head }
%struct.robust_list_head = type opaque
%struct.compat_robust_list_head = type { %struct.compat_robust_list, i32, i32 }
%struct.compat_robust_list = type { i32 }
%struct.futex_pi_state = type opaque
%struct.perf_event_context = type opaque
%struct.mempolicy = type opaque
%struct.tlbflush_unmap_batch = type { %struct.cpumask, i8, i8 }
%struct.pipe_inode_info = type { %struct.mutex, %struct.__wait_queue_head, i32, i32, i32, i32, i32, i32, i32, i32, i32, %struct.page*, %struct.fasync_struct*, %struct.fasync_struct*, %struct.pipe_buffer*, %struct.user_struct* }
%struct.pipe_buffer = type { %struct.page*, i32, i32, %struct.pipe_buf_operations*, i32, i64 }
%struct.pipe_buf_operations = type { i32, i32 (%struct.pipe_inode_info*, %struct.pipe_buffer*)*, void (%struct.pipe_inode_info*, %struct.pipe_buffer*)*, i32 (%struct.pipe_inode_info*, %struct.pipe_buffer*)*, void (%struct.pipe_inode_info*, %struct.pipe_buffer*)* }
%struct.user_struct = type { %struct.atomic_t, %struct.atomic_t, %struct.atomic_t, %struct.atomic64_t, i64, i64, i64, %struct.atomic64_t, %struct.key*, %struct.key*, %struct.hlist_node, %struct.kuid_t, %struct.atomic64_t }
%struct.key = type { %struct.atomic_t, i32, %union.anon.72, %struct.rw_semaphore, %struct.key_user*, i8*, %union.anon.73, i64, %struct.kuid_t, %struct.kgid_t, i32, i16, i16, i64, %union.anon.74, %union.anon.76, i32 (%struct.key*, %struct.key_type*, %union.key_payload*)* }
%union.anon.72 = type { %struct.rb_node }
%struct.key_user = type opaque
%union.anon.73 = type { i64 }
%union.anon.74 = type { %struct.keyring_index_key }
%struct.keyring_index_key = type { %struct.key_type*, i8*, i64 }
%struct.key_type = type opaque
%union.anon.76 = type { %union.key_payload }
%union.key_payload = type { [4 x i8*] }
%struct.page_frag = type { %struct.page*, i32, i32 }
%struct.task_delay_info = type opaque
%struct.vm_struct = type opaque
%struct.thread_struct = type { [3 x %struct.desc_struct], i64, i64, i16, i16, i16, i16, i32, i64, i64, [4 x %struct.perf_event*], i64, i64, i64, i64, i64, i64*, i64, i32, %struct.mm_segment_t, i8, [15 x i8], %struct.fpu }
%struct.desc_struct = type { %union.anon.34 }
%union.anon.34 = type { %struct.anon.35 }
%struct.anon.35 = type { i32, i32 }
%struct.perf_event = type opaque
%struct.mm_segment_t = type { i64 }
%struct.fpu = type { i32, i8, i8, [58 x i8], %union.fpregs_state }
%union.fpregs_state = type { %struct.xregs_state, [3520 x i8] }
%struct.xregs_state = type { %struct.fxregs_state, %struct.xstate_header, [0 x i8] }
%struct.fxregs_state = type { i16, i16, i16, i16, %union.anon.37, i32, i32, [32 x i32], [64 x i32], [12 x i32], %union.anon.40 }
%union.anon.37 = type { %struct.anon.38 }
%struct.anon.38 = type { i64, i64 }
%union.anon.40 = type { [12 x i32] }
%struct.xstate_header = type { i64, i64, [6 x i64] }
%struct.xattr_handler = type opaque
%struct.fscrypt_operations = type opaque
%struct.hlist_bl_head = type { %struct.hlist_bl_node* }
%struct.block_device = type { i32, i32, %struct.inode*, %struct.super_block*, %struct.mutex, i8*, i8*, i32, i8, %struct.list_head, %struct.block_device*, i32, %struct.hd_struct*, i32, i32, %struct.gendisk*, %struct.request_queue*, %struct.backing_dev_info*, %struct.list_head, i64, i32, %struct.mutex }
%struct.hd_struct = type opaque
%struct.gendisk = type opaque
%struct.request_queue = type opaque
%struct.backing_dev_info = type opaque
%struct.mtd_info = type opaque
%struct.hlist_node = type { %struct.hlist_node*, %struct.hlist_node** }
%struct.quota_info = type { i32, %struct.mutex, [3 x %struct.inode*], [3 x %struct.mem_dqinfo], [3 x %struct.quota_format_ops*] }
%struct.mem_dqinfo = type { %struct.quota_format_type*, i32, %struct.list_head, i64, i32, i32, i64, i64, i8* }
%struct.quota_format_type = type { i32, %struct.quota_format_ops*, %struct.module*, %struct.quota_format_type* }
%struct.quota_format_ops = type { i32 (%struct.super_block*, i32)*, i32 (%struct.super_block*, i32)*, i32 (%struct.super_block*, i32)*, i32 (%struct.super_block*, i32)*, i32 (%struct.dquot*)*, i32 (%struct.dquot*)*, i32 (%struct.dquot*)*, i32 (%struct.super_block*, %struct.kqid*)* }
%struct.sb_writers = type { i32, %struct.__wait_queue_head, [3 x %struct.percpu_rw_semaphore] }
%struct.percpu_rw_semaphore = type { %struct.rcu_sync, i32*, %struct.rw_semaphore, %struct.rcuwait, i32 }
%struct.rcu_sync = type { i32, i32, %struct.__wait_queue_head, i32, %struct.callback_head, i32 }
%struct.rcuwait = type { %struct.task_struct* }
%struct.shrinker = type { i64 (%struct.shrinker*, %struct.shrink_control*)*, i64 (%struct.shrinker*, %struct.shrink_control*)*, i32, i64, i64, %struct.list_head, %struct.atomic64_t* }
%struct.workqueue_struct = type opaque
%struct.hlist_head = type { %struct.hlist_node* }
%struct.user_namespace = type { %struct.uid_gid_map, %struct.uid_gid_map, %struct.uid_gid_map, %struct.atomic_t, %struct.user_namespace*, i32, %struct.kuid_t, %struct.kgid_t, %struct.ns_common, i64, %struct.work_struct, %struct.ctl_table_set, %struct.ctl_table_header*, %struct.ucounts*, [9 x i32] }
%struct.uid_gid_map = type { i32, [5 x %struct.uid_gid_extent] }
%struct.uid_gid_extent = type { i32, i32, i32 }
%struct.list_lru = type { %struct.list_lru_node* }
%struct.list_lru_node = type { %struct.spinlock, %struct.list_lru_one, [32 x i8] }
%struct.list_lru_one = type { %struct.list_head, i64 }
%struct.work_struct = type { %struct.atomic64_t, %struct.list_head, void (%struct.work_struct*)* }
%union.anon.60 = type { %struct.list_head }
%union.anon.61 = type { %struct.hlist_node }
%struct.inode = type { i16, i16, %struct.kuid_t, %struct.kgid_t, i32, %struct.posix_acl*, %struct.posix_acl*, %struct.inode_operations*, %struct.super_block*, %struct.address_space*, i8*, i64, %union.anon.53, i32, i64, %struct.timespec, %struct.timespec, %struct.timespec, %struct.spinlock, i16, i32, i64, i64, %struct.rw_semaphore, i64, i64, %struct.hlist_node, %struct.list_head, %struct.list_head, %struct.list_head, %struct.list_head, %union.anon.54, i64, %struct.atomic_t, %struct.atomic_t, %struct.atomic_t, %struct.file_operations*, %struct.file_lock_context*, %struct.address_space, %struct.list_head, %union.anon.57, i32, i32, %struct.hlist_head, i8* }
%struct.posix_acl = type opaque
%struct.inode_operations = type { %struct.dentry* (%struct.inode*, %struct.dentry*, i32)*, i8* (%struct.dentry*, %struct.inode*, %struct.delayed_call*)*, i32 (%struct.inode*, i32)*, %struct.posix_acl* (%struct.inode*, i32)*, i32 (%struct.dentry*, i8*, i32)*, i32 (%struct.inode*, %struct.dentry*, i16, i1)*, i32 (%struct.dentry*, %struct.inode*, %struct.dentry*)*, i32 (%struct.inode*, %struct.dentry*)*, i32 (%struct.inode*, %struct.dentry*, i8*)*, i32 (%struct.inode*, %struct.dentry*, i16)*, i32 (%struct.inode*, %struct.dentry*)*, i32 (%struct.inode*, %struct.dentry*, i16, i32)*, i32 (%struct.inode*, %struct.dentry*, %struct.inode*, %struct.dentry*, i32)*, i32 (%struct.dentry*, %struct.iattr*)*, i32 (%struct.path*, %struct.kstat*, i32, i32)*, i64 (%struct.dentry*, i8*, i64)*, i32 (%struct.inode*, %struct.fiemap_extent_info*, i64, i64)*, i32 (%struct.inode*, %struct.timespec*, i32)*, i32 (%struct.inode*, %struct.dentry*, %struct.file*, i32, i16, i32*)*, i32 (%struct.inode*, %struct.dentry*, i16)*, i32 (%struct.inode*, %struct.posix_acl*, i32)*, [24 x i8] }
%struct.delayed_call = type { void (i8*)*, i8* }
%struct.iattr = type { i32, i16, %struct.kuid_t, %struct.kgid_t, i64, %struct.timespec, %struct.timespec, %struct.timespec, %struct.file* }
%struct.kstat = type { i32, i16, i32, i32, i64, i64, i64, i32, i32, %struct.kuid_t, %struct.kgid_t, i64, %struct.timespec, %struct.timespec, %struct.timespec, %struct.timespec, i64 }
%struct.fiemap_extent_info = type { i32, i32, i32, %struct.fiemap_extent* }
%struct.fiemap_extent = type { i64, i64, i64, [2 x i64], i32, [3 x i32] }
%union.anon.53 = type { i32 }
%struct.timespec = type { i64, i64 }
%union.anon.54 = type { %struct.callback_head }
%struct.file_lock_context = type { %struct.spinlock, %struct.list_head, %struct.list_head, %struct.list_head }
%struct.address_space = type { %struct.inode*, %struct.radix_tree_root, %struct.spinlock, %struct.atomic_t, %struct.rb_root, %struct.rw_semaphore, i64, i64, i64, %struct.address_space_operations*, i64, %struct.spinlock, i32, %struct.list_head, i8* }
%struct.address_space_operations = type { i32 (%struct.page*, %struct.writeback_control*)*, i32 (%struct.file*, %struct.page*)*, i32 (%struct.address_space*, %struct.writeback_control*)*, i32 (%struct.page*)*, i32 (%struct.file*, %struct.address_space*, %struct.list_head*, i32)*, i32 (%struct.file*, %struct.address_space*, i64, i32, i32, %struct.page**, i8**)*, i32 (%struct.file*, %struct.address_space*, i64, i32, i32, %struct.page*, i8*)*, i64 (%struct.address_space*, i64)*, void (%struct.page*, i32, i32)*, i32 (%struct.page*, i32)*, void (%struct.page*)*, i64 (%struct.kiocb*, %struct.iov_iter*)*, i32 (%struct.address_space*, %struct.page*, %struct.page*, i32)*, i1 (%struct.page*, i32)*, void (%struct.page*)*, i32 (%struct.page*)*, i32 (%struct.page*, i64, i64)*, void (%struct.page*, i8*, i8*)*, i32 (%struct.address_space*, %struct.page*)*, i32 (%struct.swap_info_struct*, %struct.file*, i64*)*, void (%struct.file*)* }
%struct.swap_info_struct = type opaque
%union.anon.57 = type { %struct.pipe_inode_info* }
%struct.file_operations = type { %struct.module*, i64 (%struct.file*, i64, i32)*, i64 (%struct.file*, i8*, i64, i64*)*, i64 (%struct.file*, i8*, i64, i64*)*, i64 (%struct.kiocb*, %struct.iov_iter*)*, i64 (%struct.kiocb*, %struct.iov_iter*)*, i32 (%struct.file*, %struct.dir_context*)*, i32 (%struct.file*, %struct.dir_context*)*, i32 (%struct.file*, %struct.poll_table_struct*)*, i64 (%struct.file*, i32, i64)*, i64 (%struct.file*, i32, i64)*, i32 (%struct.file*, %struct.vm_area_struct*)*, i32 (%struct.inode*, %struct.file*)*, i32 (%struct.file*, i8*)*, i32 (%struct.inode*, %struct.file*)*, i32 (%struct.file*, i64, i64, i32)*, i32 (i32, %struct.file*, i32)*, i32 (%struct.file*, i32, %struct.file_lock*)*, i64 (%struct.file*, %struct.page*, i32, i64, i64*, i32)*, i64 (%struct.file*, i64, i64, i64, i64)*, i32 (i32)*, i32 (%struct.file*, i32, %struct.file_lock*)*, i64 (%struct.pipe_inode_info*, %struct.file*, i64*, i64, i32)*, i64 (%struct.file*, i64*, %struct.pipe_inode_info*, i64, i32)*, i32 (%struct.file*, i64, %struct.file_lock**, i8**)*, i64 (%struct.file*, i32, i64, i64)*, void (%struct.seq_file*, %struct.file*)*, i64 (%struct.file*, i64, %struct.file*, i64, i64, i32)*, i32 (%struct.file*, i64, %struct.file*, i64, i64)*, i64 (%struct.file*, i64, i64, %struct.file*, i64)* }
%struct.dir_context = type { i32 (%struct.dir_context*, i8*, i32, i64, i64, i32)*, i64 }
%struct.file_lock = type { %struct.file_lock*, %struct.list_head, %struct.hlist_node, %struct.list_head, i8*, i32, i8, i32, i32, %struct.pid*, %struct.__wait_queue_head, %struct.file*, i64, i64, %struct.fasync_struct*, i64, i64, %struct.file_lock_operations*, %struct.lock_manager_operations*, %union.anon.55 }
%struct.file_lock_operations = type { void (%struct.file_lock*, %struct.file_lock*)*, void (%struct.file_lock*)* }
%struct.lock_manager_operations = type { i32 (%struct.file_lock*, %struct.file_lock*)*, i64 (%struct.file_lock*)*, i8* (i8*)*, void (i8*)*, void (%struct.file_lock*)*, i32 (%struct.file_lock*, i32)*, i1 (%struct.file_lock*)*, i32 (%struct.file_lock*, i32, %struct.list_head*)*, void (%struct.file_lock*, i8**)* }
%union.anon.55 = type { %struct.nfs_lock_info }
%struct.nfs_lock_info = type { i32, %struct.nlm_lockowner*, %struct.list_head }
%struct.nlm_lockowner = type opaque
%struct.atomic64_t = type { i64 }
%struct.fown_struct = type { %struct.rwlock_t, %struct.pid*, i32, %struct.kuid_t, %struct.kuid_t, i32 }
%struct.cred = type { %struct.atomic_t, %struct.kuid_t, %struct.kgid_t, %struct.kuid_t, %struct.kgid_t, %struct.kuid_t, %struct.kgid_t, %struct.kuid_t, %struct.kgid_t, i32, %struct.kernel_cap_struct, %struct.kernel_cap_struct, %struct.kernel_cap_struct, %struct.kernel_cap_struct, %struct.kernel_cap_struct, i8, %struct.key*, %struct.key*, %struct.key*, %struct.key*, i8*, %struct.user_struct*, %struct.user_namespace*, %struct.group_info*, %struct.callback_head }
%struct.kernel_cap_struct = type { [2 x i32] }
%struct.group_info = type { %struct.atomic_t, i32, [0 x %struct.kgid_t] }
%struct.file_ra_state = type { i64, i32, i32, i32, i32, i64 }
%struct.seq_file = type { i8*, i64, i64, i64, i64, i64, i64, i64, %struct.mutex, %struct.seq_operations*, i32, %struct.file*, i8* }
%struct.seq_operations = type { i8* (%struct.seq_file*, i64*)*, void (%struct.seq_file*, i8*)*, i8* (%struct.seq_file*, i8*, i64*)*, i32 (%struct.seq_file*, i8*)* }
%struct.vm_operations_struct = type { void (%struct.vm_area_struct*)*, void (%struct.vm_area_struct*)*, i32 (%struct.vm_area_struct*)*, i32 (%struct.vm_fault*)*, i32 (%struct.vm_fault*, i32)*, void (%struct.vm_fault*, i64, i64)*, i32 (%struct.vm_fault*)*, i32 (%struct.vm_fault*)*, i32 (%struct.vm_area_struct*, i64, i8*, i32, i32)*, i8* (%struct.vm_area_struct*)*, i32 (%struct.vm_area_struct*, %struct.mempolicy*)*, %struct.mempolicy* (%struct.vm_area_struct*, i64)*, %struct.page* (%struct.vm_area_struct*, i64)* }
%struct.vm_fault = type { %struct.vm_area_struct*, i32, i32, i64, i64, %struct.pmd_t*, %struct.pud_t*, %struct.pte_t, %struct.page*, %struct.mem_cgroup*, %struct.page*, %struct.pte_t*, %struct.spinlock*, %struct.page* }
%struct.pmd_t = type { i64 }
%struct.pud_t = type { i64 }
%struct.pte_t = type { i64 }
%struct.kernfs_open_node = type opaque
%struct.kernfs_iattrs = type opaque
%struct.kref = type { %struct.refcount_struct }
%struct.refcount_struct = type { %struct.atomic_t }
%struct.module_param_attrs = type opaque
%struct.module_attribute = type { %struct.attribute, i64 (%struct.module_attribute*, %struct.module_kobject*, i8*)*, i64 (%struct.module_attribute*, %struct.module_kobject*, i8*, i64)*, void (%struct.module*, i8*)*, i32 (%struct.module*)*, void (%struct.module*)* }
%struct.mutex = type { %struct.atomic64_t, %struct.spinlock, %struct.optimistic_spin_queue, %struct.list_head }
%struct.kernel_symbol = type { i64, i8* }
%struct.exception_table_entry = type { i32, i32, i32 }
%struct.module_layout = type { i8*, i32, i32, i32, i32, %struct.mod_tree_node }
%struct.mod_tree_node = type { %struct.module*, %struct.latch_tree_node }
%struct.latch_tree_node = type { [2 x %struct.rb_node] }
%struct.mod_arch_specific = type {}
%struct.bug_entry = type { i32, i32, i16, i16 }
%struct.mod_kallsyms = type { %struct.elf64_sym*, i32, i8* }
%struct.elf64_sym = type { i32, i8, i8, i16, i64, i64 }
%struct.module_sect_attrs = type opaque
%struct.module_notes_attrs = type opaque
%struct.tracepoint = type { i8*, %struct.static_key, i32 ()*, void ()*, %struct.tracepoint_func* }
%struct.static_key = type { %struct.atomic_t }
%struct.tracepoint_func = type { i8*, i8*, i32 }
%struct.trace_event_call = type opaque
%struct.trace_enum_map = type { i8*, i8*, i64 }
%struct.atomic_t = type { i32 }
%union.anon.62 = type { i8* }
%struct.notifier_block = type { i32 (%struct.notifier_block*, i64, i8*)*, %struct.notifier_block*, i32 }
%struct.pernet_operations = type { %struct.list_head, i32 (%struct.net*)*, void (%struct.net*)*, void (%struct.list_head*)*, i32*, i64 }
%struct.cfg80211_registered_device = type { %struct.cfg80211_ops*, %struct.list_head, %struct.rfkill_ops, %struct.rfkill*, %struct.work_struct, [2 x i8], %struct.ieee80211_regdomain*, i32, i32, i32, i32, i32, %struct.__wait_queue_head, %struct.list_head, %struct.spinlock, %struct.list_head, %struct.spinlock, %struct.work_struct, i32, i32, %struct.spinlock, %struct.list_head, %struct.rb_root, i32, i32, %struct.cfg80211_scan_request*, %struct.sk_buff*, %struct.cfg80211_sched_scan_request*, i64, %struct.work_struct, %struct.work_struct, %struct.genl_info*, %struct.work_struct, %struct.work_struct, %struct.delayed_work, i32, %struct.cfg80211_coalesce*, %struct.spinlock, %struct.list_head, %struct.work_struct, %struct.work_struct, [24 x i8], %struct.wiphy }
%struct.cfg80211_ops = type { i32 (%struct.wiphy*, %struct.cfg80211_wowlan*)*, i32 (%struct.wiphy*)*, void (%struct.wiphy*, i1)*, %struct.wireless_dev* (%struct.wiphy*, i8*, i8, i32, i32*, %struct.vif_params*)*, i32 (%struct.wiphy*, %struct.wireless_dev*)*, i32 (%struct.wiphy*, %struct.net_device*, i32, i32*, %struct.vif_params*)*, i32 (%struct.wiphy*, %struct.net_device*, i8, i1, i8*, %struct.key_params*)*, i32 (%struct.wiphy*, %struct.net_device*, i8, i1, i8*, i8*, void (i8*, %struct.key_params*)*)*, i32 (%struct.wiphy*, %struct.net_device*, i8, i1, i8*)*, i32 (%struct.wiphy*, %struct.net_device*, i8, i1, i1)*, i32 (%struct.wiphy*, %struct.net_device*, i8)*, i32 (%struct.wiphy*, %struct.net_device*, %struct.cfg80211_ap_settings*)*, i32 (%struct.wiphy*, %struct.net_device*, %struct.cfg80211_beacon_data*)*, i32 (%struct.wiphy*, %struct.net_device*)*, i32 (%struct.wiphy*, %struct.net_device*, i8*, %struct.station_parameters*)*, i32 (%struct.wiphy*, %struct.net_device*, %struct.station_del_parameters*)*, i32 (%struct.wiphy*, %struct.net_device*, i8*, %struct.station_parameters*)*, i32 (%struct.wiphy*, %struct.net_device*, i8*, %struct.station_info*)*, i32 (%struct.wiphy*, %struct.net_device*, i32, i8*, %struct.station_info*)*, i32 (%struct.wiphy*, %struct.net_device*, i8*, i8*)*, i32 (%struct.wiphy*, %struct.net_device*, i8*)*, i32 (%struct.wiphy*, %struct.net_device*, i8*, i8*)*, i32 (%struct.wiphy*, %struct.net_device*, i8*, i8*, %struct.mpath_info*)*, i32 (%struct.wiphy*, %struct.net_device*, i32, i8*, i8*, %struct.mpath_info*)*, i32 (%struct.wiphy*, %struct.net_device*, i8*, i8*, %struct.mpath_info*)*, i32 (%struct.wiphy*, %struct.net_device*, i32, i8*, i8*, %struct.mpath_info*)*, i32 (%struct.wiphy*, %struct.net_device*, %struct.mesh_config*)*, i32 (%struct.wiphy*, %struct.net_device*, i32, %struct.mesh_config*)*, i32 (%struct.wiphy*, %struct.net_device*, %struct.mesh_config*, %struct.mesh_setup*)*, i32 (%struct.wiphy*, %struct.net_device*)*, i32 (%struct.wiphy*, %struct.net_device*, %struct.ocb_setup*)*, i32 (%struct.wiphy*, %struct.net_device*)*, i32 (%struct.wiphy*, %struct.net_device*, %struct.bss_parameters*)*, i32 (%struct.wiphy*, %struct.net_device*, %struct.ieee80211_txq_params*)*, i32 (%struct.wiphy*, %struct.net_device*, %struct.ieee80211_channel*)*, i32 (%struct.wiphy*, %struct.cfg80211_chan_def*)*, i32 (%struct.wiphy*, %struct.cfg80211_scan_request*)*, void (%struct.wiphy*, %struct.wireless_dev*)*, i32 (%struct.wiphy*, %struct.net_device*, %struct.cfg80211_auth_request*)*, i32 (%struct.wiphy*, %struct.net_device*, %struct.cfg80211_assoc_request*)*, i32 (%struct.wiphy*, %struct.net_device*, %struct.cfg80211_deauth_request*)*, i32 (%struct.wiphy*, %struct.net_device*, %struct.cfg80211_disassoc_request*)*, i32 (%struct.wiphy*, %struct.net_device*, %struct.cfg80211_connect_params*)*, i32 (%struct.wiphy*, %struct.net_device*, %struct.cfg80211_connect_params*, i32)*, i32 (%struct.wiphy*, %struct.net_device*, i16)*, i32 (%struct.wiphy*, %struct.net_device*, %struct.cfg80211_ibss_params*)*, i32 (%struct.wiphy*, %struct.net_device*)*, i32 (%struct.wiphy*, %struct.net_device*, i32*)*, i32 (%struct.wiphy*, i32)*, i32 (%struct.wiphy*, %struct.wireless_dev*, i32, i32)*, i32 (%struct.wiphy*, %struct.wireless_dev*, i32*)*, i32 (%struct.wiphy*, %struct.net_device*, i8*)*, void (%struct.wiphy*)*, i32 (%struct.wiphy*, %struct.net_device*, i8*, %struct.cfg80211_bitrate_mask*)*, i32 (%struct.wiphy*, %struct.net_device*, i32, %struct.survey_info*)*, i32 (%struct.wiphy*, %struct.net_device*, %struct.cfg80211_pmksa*)*, i32 (%struct.wiphy*, %struct.net_device*, %struct.cfg80211_pmksa*)*, i32 (%struct.wiphy*, %struct.net_device*)*, i32 (%struct.wiphy*, %struct.wireless_dev*, %struct.ieee80211_channel*, i32, i64*)*, i32 (%struct.wiphy*, %struct.wireless_dev*, i64)*, i32 (%struct.wiphy*, %struct.wireless_dev*, %struct.cfg80211_mgmt_tx_params*, i64*)*, i32 (%struct.wiphy*, %struct.wireless_dev*, i64)*, i32 (%struct.wiphy*, %struct.net_device*, i1, i32)*, i32 (%struct.wiphy*, %struct.net_device*, i32, i32)*, i32 (%struct.wiphy*, %struct.net_device*, i32, i32, i32)*, void (%struct.wiphy*, %struct.wireless_dev*, i16, i1)*, i32 (%struct.wiphy*, i32, i32)*, i32 (%struct.wiphy*, i32*, i32*)*, i32 (%struct.wiphy*, %struct.net_device*, %struct.cfg80211_sched_scan_request*)*, i32 (%struct.wiphy*, %struct.net_device*)*, i32 (%struct.wiphy*, %struct.net_device*, %struct.cfg80211_gtk_rekey_data*)*, i32 (%struct.wiphy*, %struct.net_device*, i8*, i8, i8, i16, i32, i1, i8*, i64)*, i32 (%struct.wiphy*, %struct.net_device*, i8*, i32)*, i32 (%struct.wiphy*, %struct.net_device*, i8*, i64*)*, i32 (%struct.wiphy*, %struct.net_device*, i16)*, i32 (%struct.wiphy*, %struct.wireless_dev*, %struct.cfg80211_chan_def*)*, i32 (%struct.wiphy*, %struct.wireless_dev*)*, void (%struct.wiphy*, %struct.wireless_dev*)*, i32 (%struct.wiphy*, %struct.net_device*, %struct.cfg80211_acl_data*)*, i32 (%struct.wiphy*, %struct.net_device*, %struct.cfg80211_chan_def*, i32)*, i32 (%struct.wiphy*, %struct.net_device*, %struct.cfg80211_update_ft_ies_params*)*, i32 (%struct.wiphy*, %struct.wireless_dev*, i32, i16)*, void (%struct.wiphy*, %struct.wireless_dev*)*, i32 (%struct.wiphy*, %struct.cfg80211_coalesce*)*, i32 (%struct.wiphy*, %struct.net_device*, %struct.cfg80211_csa_settings*)*, i32 (%struct.wiphy*, %struct.net_device*, %struct.cfg80211_qos_map*)*, i32 (%struct.wiphy*, %struct.net_device*, %struct.cfg80211_chan_def*)*, i32 (%struct.wiphy*, %struct.net_device*, i8, i8*, i8, i16)*, i32 (%struct.wiphy*, %struct.net_device*, i8, i8*)*, i32 (%struct.wiphy*, %struct.net_device*, i8*, i8, %struct.cfg80211_chan_def*)*, void (%struct.wiphy*, %struct.net_device*, i8*)*, i32 (%struct.wiphy*, %struct.wireless_dev*, %struct.cfg80211_nan_conf*)*, void (%struct.wiphy*, %struct.wireless_dev*)*, i32 (%struct.wiphy*, %struct.wireless_dev*, %struct.cfg80211_nan_func*)*, void (%struct.wiphy*, %struct.wireless_dev*, i64)*, i32 (%struct.wiphy*, %struct.wireless_dev*, %struct.cfg80211_nan_conf*, i32)*, i32 (%struct.wiphy*, %struct.net_device*, i1)* }
%struct.vif_params = type { i32, [6 x i8], [24 x i8] }
%struct.cfg80211_ap_settings = type { %struct.cfg80211_chan_def, %struct.cfg80211_beacon_data, i32, i32, i8*, i64, i32, %struct.cfg80211_crypto_settings, i8, i32, i32, i32, i8, i8, %struct.cfg80211_acl_data*, i8, %struct.cfg80211_bitrate_mask, %struct.ieee80211_ht_cap*, %struct.ieee80211_vht_cap*, i8, i8 }
%struct.cfg80211_beacon_data = type { i8*, i8*, i8*, i8*, i8*, i8*, i64, i64, i64, i64, i64, i64 }
%struct.cfg80211_crypto_settings = type { i32, i32, i32, [5 x i32], i32, [2 x i32], i8, i16, i8, %struct.key_params*, i32 }
%struct.cfg80211_acl_data = type { i32, i32, [0 x %struct.mac_address] }
%struct.cfg80211_bitrate_mask = type { [3 x %struct.anon.78] }
%struct.anon.78 = type { i32, [10 x i8], [8 x i16], i32 }
%struct.station_del_parameters = type { i8*, i8, i16 }
%struct.station_parameters = type { i8*, %struct.net_device*, i32, i32, i32, i32, i16, i16, i8, i8, i8, %struct.ieee80211_ht_cap*, %struct.ieee80211_vht_cap*, i8, i8, i32, i16, i8*, i8, i8*, i8, i8*, i8, i8, i8, i32 }
%struct.station_info = type { i64, i32, i32, i64, i64, i16, i16, i8, i8, i8, i8, [4 x i8], [4 x i8], %struct.rate_info, %struct.rate_info, i32, i32, i32, i32, i32, %struct.sta_bss_parameters, %struct.nl80211_sta_flag_update, i32, i8*, i64, i32, i64, i32, i32, i32, i32, i64, i64, i8, [17 x %struct.cfg80211_tid_stats] }
%struct.rate_info = type { i8, i8, i16, i8, i8 }
%struct.sta_bss_parameters = type { i8, i8, i16 }
%struct.nl80211_sta_flag_update = type { i32, i32 }
%struct.cfg80211_tid_stats = type { i32, i64, i64, i64, i64 }
%struct.mpath_info = type { i32, i32, i32, i32, i32, i32, i8, i8, i32 }
%struct.mesh_config = type { i16, i16, i16, i16, i8, i8, i8, i8, i32, i8, i32, i16, i32, i16, i16, i16, i8, i16, i8, i8, i32, i16, i32, i16, i16, i32, i16, i32 }
%struct.mesh_setup = type { %struct.cfg80211_chan_def, i8*, i8, i8, i8, i8, i8, i8*, i8, i8, i8, i8, i8, i16, [3 x i32], i32, %struct.cfg80211_bitrate_mask }
%struct.ocb_setup = type { %struct.cfg80211_chan_def }
%struct.bss_parameters = type { i32, i32, i32, i8*, i8, i32, i32, i8, i8 }
%struct.ieee80211_txq_params = type { i32, i16, i16, i16, i8 }
%struct.cfg80211_auth_request = type { %struct.cfg80211_bss*, i8*, i64, i32, i8*, i8, i8, i8*, i64 }
%struct.cfg80211_assoc_request = type { %struct.cfg80211_bss*, i8*, i8*, i64, %struct.cfg80211_crypto_settings, i8, i32, %struct.ieee80211_ht_cap, %struct.ieee80211_ht_cap, %struct.ieee80211_vht_cap, %struct.ieee80211_vht_cap, i8*, i64, i8* }
%struct.cfg80211_deauth_request = type { i8*, i8*, i64, i16, i8 }
%struct.cfg80211_disassoc_request = type { %struct.cfg80211_bss*, i8*, i64, i16, i8 }
%struct.cfg80211_connect_params = type { %struct.ieee80211_channel*, %struct.ieee80211_channel*, i8*, i8*, i8*, i64, i32, i8*, i64, i8, i32, %struct.cfg80211_crypto_settings, i8*, i8, i8, i32, i32, %struct.ieee80211_ht_cap, %struct.ieee80211_ht_cap, %struct.ieee80211_vht_cap, %struct.ieee80211_vht_cap, i8, %struct.cfg80211_bss_selection, i8* }
%struct.cfg80211_bss_selection = type { i32, %union.anon.79 }
%union.anon.79 = type { %struct.cfg80211_bss_select_adjust }
%struct.cfg80211_ibss_params = type { i8*, i8*, %struct.cfg80211_chan_def, i8*, i8, i8, i16, i32, i8, i8, i8, i8, [3 x i32], %struct.ieee80211_ht_cap, %struct.ieee80211_ht_cap }
%struct.survey_info = type { %struct.ieee80211_channel*, i64, i64, i64, i64, i64, i64, i32, i8 }
%struct.cfg80211_pmksa = type { i8*, i8* }
%struct.cfg80211_mgmt_tx_params = type { %struct.ieee80211_channel*, i8, i32, i8*, i64, i8, i8, i32, i16* }
%struct.cfg80211_gtk_rekey_data = type { i8*, i8*, i8* }
%struct.cfg80211_update_ft_ies_params = type { i16, i8*, i64 }
%struct.cfg80211_csa_settings = type { %struct.cfg80211_chan_def, %struct.cfg80211_beacon_data, i16*, i16*, i32, i32, %struct.cfg80211_beacon_data, i8, i8, i8 }
%struct.cfg80211_qos_map = type { i8, [21 x %struct.cfg80211_dscp_exception], [8 x %struct.cfg80211_dscp_range] }
%struct.cfg80211_dscp_exception = type { i8, i8 }
%struct.cfg80211_dscp_range = type { i8, i8 }
%struct.cfg80211_nan_conf = type { i8, i8 }
%struct.cfg80211_nan_func = type { i32, [6 x i8], i8, i8, i8, i8, i8, i8, %struct.mac_address, i32, i8*, i8, i8, i8*, i8, i8, %struct.mac_address*, i32, %struct.cfg80211_nan_func_filter*, %struct.cfg80211_nan_func_filter*, i8, i8, i8, i64 }
%struct.cfg80211_nan_func_filter = type { i8*, i8 }
%struct.rfkill_ops = type { void (%struct.rfkill*, i8*)*, void (%struct.rfkill*, i8*)*, i32 (i8*, i1)* }
%struct.rfkill = type opaque
%struct.cfg80211_scan_request = type { %struct.cfg80211_ssid*, i32, i32, i32, i8*, i64, i16, i8, i32, [3 x i32], %struct.wireless_dev*, [6 x i8], [6 x i8], [6 x i8], %struct.wiphy*, i64, %struct.cfg80211_scan_info, i8, i8, [0 x %struct.ieee80211_channel*] }
%struct.cfg80211_scan_info = type { i64, [6 x i8], i8 }
%struct.genl_info = type { i32, i32, %struct.nlmsghdr*, %struct.genlmsghdr*, i8*, %struct.nlattr**, %struct.possible_net_t, [2 x i8*] }
%struct.genlmsghdr = type { i8, i8, i16 }
%struct.delayed_work = type { %struct.work_struct, %struct.timer_list, %struct.workqueue_struct*, i32 }
%struct.cfg80211_coalesce = type { %struct.cfg80211_coalesce_rules*, i32 }
%struct.cfg80211_coalesce_rules = type { i32, i32, %struct.cfg80211_pkt_pattern*, i32 }
%union.anon.80 = type { %struct.list_head* }
%struct.cfg80211_iface_destroy = type { %struct.list_head, i32 }
%union.anon.94 = type { %struct.list_head* }
%struct.__wait_queue = type { i32, i8*, i32 (%struct.__wait_queue*, i32, i32, i8*)*, %struct.list_head }
%union.anon.97 = type { %struct.list_head* }
%struct.cfg80211_beacon_registration = type { %struct.list_head, i32 }
%struct.cfg80211_event = type { %struct.list_head, i32, %union.anon.81 }
%union.anon.81 = type { %struct.anon.82 }
%struct.anon.82 = type { [6 x i8], i8*, i8*, i64, i64, %struct.cfg80211_bss*, i32, i32 }
%union.anon.99 = type { %struct.tracepoint_func* }
%union.anon.86 = type { %struct.tracepoint_func* }
%union.anon.88 = type { %struct.tracepoint_func* }
%union.anon.87 = type { i32 }
%union.anon.89 = type { %struct.tracepoint_func* }
%union.anon.90 = type { %struct.list_head* }
%union.anon.91 = type { i8 }
%union.anon.92 = type { %struct.tracepoint_func* }
%union.anon.93 = type { %struct.tracepoint_func* }
%union.anon.95 = type { %struct.list_head* }
%union.anon.96 = type { %struct.tracepoint_func* }
%union.anon.98 = type { %struct.tracepoint_func* }
%union.anon.100 = type { %struct.list_head* }
%struct.netdev_notifier_info = type { %struct.net_device* }
%union.anon.101 = type { %struct.tracepoint_func* }

@cfg80211_rdev_list = global %struct.list_head { %struct.list_head* @cfg80211_rdev_list, %struct.list_head* @cfg80211_rdev_list }, align 8
@__param_str_cfg80211_disable_40mhz_24ghz = internal constant [38 x i8] c"cfg80211.cfg80211_disable_40mhz_24ghz\00", align 16
@param_ops_bool = external constant %struct.kernel_param_ops, align 8
@cfg80211_disable_40mhz_24ghz = internal global i8 0, align 1
@__param_cfg80211_disable_40mhz_24ghz = internal constant %struct.kernel_param { i8* getelementptr inbounds ([38 x i8], [38 x i8]* @__param_str_cfg80211_disable_40mhz_24ghz, i32 0, i32 0), %struct.module* null, %struct.kernel_param_ops* @param_ops_bool, i16 420, i8 -1, i8 0, %union.anon.62 { i8* @cfg80211_disable_40mhz_24ghz } }, section "__param", align 8
@.str = private unnamed_addr constant [37 x i8] c"\013RTNL: assertion failed at %s (%d)\0A\00", align 1
@.str.1 = private unnamed_addr constant [20 x i8] c"net/wireless/core.c\00", align 1
@.str.2 = private unnamed_addr constant [49 x i8] c"\013cfg80211: failed to rename debugfs dir to %s!\0A\00", align 1
@.str.3 = private unnamed_addr constant [7 x i8] c"wlan%d\00", align 1
@__kstrtab_cfg80211_shutdown_all_interfaces = internal constant [33 x i8] c"cfg80211_shutdown_all_interfaces\00", section "__ksymtab_strings", align 1
@__ksymtab_cfg80211_shutdown_all_interfaces = internal constant %struct.kernel_symbol { i64 ptrtoint (void (%struct.wiphy*)* @cfg80211_shutdown_all_interfaces to i64), i8* getelementptr inbounds ([33 x i8], [33 x i8]* @__kstrtab_cfg80211_shutdown_all_interfaces, i32 0, i32 0) }, section "___ksymtab_gpl+cfg80211_shutdown_all_interfaces", align 8
@wiphy_new_nm.wiphy_counter = internal global %struct.atomic_t zeroinitializer, align 4
@.str.4 = private unnamed_addr constant [3 x i8] c"%s\00", align 1
@.str.5 = private unnamed_addr constant [6 x i8] c"phy%d\00", align 1
@ieee80211_class = external global %struct.class, align 8
@init_net = external global %struct.net, align 64
@wiphy_new_nm.__key = internal global %struct.lock_class_key zeroinitializer, align 1
@.str.6 = private unnamed_addr constant [16 x i8] c"&rdev->dev_wait\00", align 1
@__kstrtab_wiphy_new_nm = internal constant [13 x i8] c"wiphy_new_nm\00", section "__ksymtab_strings", align 1
@__ksymtab_wiphy_new_nm = internal constant %struct.kernel_symbol { i64 ptrtoint (%struct.wiphy* (%struct.cfg80211_ops*, i32, i8*)* @wiphy_new_nm to i64), i8* getelementptr inbounds ([13 x i8], [13 x i8]* @__kstrtab_wiphy_new_nm, i32 0, i32 0) }, section "___ksymtab+wiphy_new_nm", align 8
@cfg80211_rdev_list_generation = common global i32 0, align 4
@ieee80211_debugfs_dir = internal global %struct.dentry* null, align 8
@__kstrtab_wiphy_register = internal constant [15 x i8] c"wiphy_register\00", section "__ksymtab_strings", align 1
@__ksymtab_wiphy_register = internal constant %struct.kernel_symbol { i64 ptrtoint (i32 (%struct.wiphy*)* @wiphy_register to i64), i8* getelementptr inbounds ([15 x i8], [15 x i8]* @__kstrtab_wiphy_register, i32 0, i32 0) }, section "___ksymtab+wiphy_register", align 8
@__kstrtab_wiphy_rfkill_start_polling = internal constant [27 x i8] c"wiphy_rfkill_start_polling\00", section "__ksymtab_strings", align 1
@__ksymtab_wiphy_rfkill_start_polling = internal constant %struct.kernel_symbol { i64 ptrtoint (void (%struct.wiphy*)* @wiphy_rfkill_start_polling to i64), i8* getelementptr inbounds ([27 x i8], [27 x i8]* @__kstrtab_wiphy_rfkill_start_polling, i32 0, i32 0) }, section "___ksymtab+wiphy_rfkill_start_polling", align 8
@__kstrtab_wiphy_rfkill_stop_polling = internal constant [26 x i8] c"wiphy_rfkill_stop_polling\00", section "__ksymtab_strings", align 1
@__ksymtab_wiphy_rfkill_stop_polling = internal constant %struct.kernel_symbol { i64 ptrtoint (void (%struct.wiphy*)* @wiphy_rfkill_stop_polling to i64), i8* getelementptr inbounds ([26 x i8], [26 x i8]* @__kstrtab_wiphy_rfkill_stop_polling, i32 0, i32 0) }, section "___ksymtab+wiphy_rfkill_stop_polling", align 8
@__kstrtab_wiphy_unregister = internal constant [17 x i8] c"wiphy_unregister\00", section "__ksymtab_strings", align 1
@__ksymtab_wiphy_unregister = internal constant %struct.kernel_symbol { i64 ptrtoint (void (%struct.wiphy*)* @wiphy_unregister to i64), i8* getelementptr inbounds ([17 x i8], [17 x i8]* @__kstrtab_wiphy_unregister, i32 0, i32 0) }, section "___ksymtab+wiphy_unregister", align 8
@__kstrtab_wiphy_free = internal constant [11 x i8] c"wiphy_free\00", section "__ksymtab_strings", align 1
@__ksymtab_wiphy_free = internal constant %struct.kernel_symbol { i64 ptrtoint (void (%struct.wiphy*)* @wiphy_free to i64), i8* getelementptr inbounds ([11 x i8], [11 x i8]* @__kstrtab_wiphy_free, i32 0, i32 0) }, section "___ksymtab+wiphy_free", align 8
@__kstrtab_wiphy_rfkill_set_hw_state = internal constant [26 x i8] c"wiphy_rfkill_set_hw_state\00", section "__ksymtab_strings", align 1
@__ksymtab_wiphy_rfkill_set_hw_state = internal constant %struct.kernel_symbol { i64 ptrtoint (void (%struct.wiphy*, i1)* @wiphy_rfkill_set_hw_state to i64), i8* getelementptr inbounds ([26 x i8], [26 x i8]* @__kstrtab_wiphy_rfkill_set_hw_state, i32 0, i32 0) }, section "___ksymtab+wiphy_rfkill_set_hw_state", align 8
@cfg80211_unregister_wdev.__warned = internal global i8 0, section ".data.unlikely", align 1
@__kstrtab_cfg80211_unregister_wdev = internal constant [25 x i8] c"cfg80211_unregister_wdev\00", section "__ksymtab_strings", align 1
@__ksymtab_cfg80211_unregister_wdev = internal constant %struct.kernel_symbol { i64 ptrtoint (void (%struct.wireless_dev*)* @cfg80211_unregister_wdev to i64), i8* getelementptr inbounds ([25 x i8], [25 x i8]* @__kstrtab_cfg80211_unregister_wdev, i32 0, i32 0) }, section "___ksymtab+cfg80211_unregister_wdev", align 8
@cfg80211_wq = common global %struct.workqueue_struct* null, align 8
@__kstrtab_cfg80211_stop_iface = internal constant [20 x i8] c"cfg80211_stop_iface\00", section "__ksymtab_strings", align 1
@__ksymtab_cfg80211_stop_iface = internal constant %struct.kernel_symbol { i64 ptrtoint (void (%struct.wiphy*, %struct.wireless_dev*, i32)* @cfg80211_stop_iface to i64), i8* getelementptr inbounds ([20 x i8], [20 x i8]* @__kstrtab_cfg80211_stop_iface, i32 0, i32 0) }, section "___ksymtab+cfg80211_stop_iface", align 8
@__initcall_cfg80211_init4 = internal global i32 ()* @cfg80211_init, section ".initcall4.init", align 8
@cfg80211_netdev_notifier = internal global %struct.notifier_block { i32 (%struct.notifier_block*, i64, i8*)* @cfg80211_netdev_notifier_call, %struct.notifier_block* null, i32 0 }, align 8
@cfg80211_pernet_ops = internal global %struct.pernet_operations { %struct.list_head zeroinitializer, i32 (%struct.net*)* null, void (%struct.net*)* @cfg80211_pernet_exit, void (%struct.list_head*)* null, i32* null, i64 0 }, align 8
@__exitcall_cfg80211_exit = internal global void ()* @cfg80211_exit, section ".exitcall.exit", align 8
@.str.7 = private unnamed_addr constant [20 x i8] c"net/wireless/core.h\00", align 1
@.str.8 = private unnamed_addr constant [8 x i8] c"phy%d%n\00", align 1
@__tracepoint_rdev_stop_p2p_device = external global %struct.tracepoint, align 8
@cpu_number = external global i32, align 4
@__cpu_online_mask = external global %struct.cpumask, align 8
@__tracepoint_rdev_return_void = external global %struct.tracepoint, align 8
@__tracepoint_rdev_stop_nan = external global %struct.tracepoint, align 8
@__tracepoint_rdev_del_virtual_intf = external global %struct.tracepoint, align 8
@__tracepoint_rdev_return_int = external global %struct.tracepoint, align 8
@__tracepoint_rdev_rfkill_poll = external global %struct.tracepoint, align 8
@__tracepoint_rdev_set_wakeup = external global %struct.tracepoint, align 8
@system_wq = external global %struct.workqueue_struct*, align 8
@__tracepoint_cfg80211_stop_iface = external global %struct.tracepoint, align 8
@.str.9 = private unnamed_addr constant [10 x i8] c"ieee80211\00", align 1
@.str.10 = private unnamed_addr constant [9 x i8] c"cfg80211\00", align 1
@wiphy_type = internal constant %struct.device_type { i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.14, i32 0, i32 0), %struct.attribute_group** null, i32 (%struct.device*, %struct.kobj_uevent_env*)* null, i8* (%struct.device*, i16*, %struct.kuid_t*, %struct.kgid_t*)* null, void (%struct.device*)* null, %struct.dev_pm_ops* null }, align 8
@cfg80211_netdev_notifier_call.__key = internal global %struct.lock_class_key zeroinitializer, align 1
@.str.11 = private unnamed_addr constant [11 x i8] c"&wdev->mtx\00", align 1
@.str.12 = private unnamed_addr constant [9 x i8] c"phy80211\00", align 1
@.str.13 = private unnamed_addr constant [55 x i8] c"\013cfg80211: failed to add phy80211 symlink to netdev!\0A\00", align 1
@.str.14 = private unnamed_addr constant [5 x i8] c"wlan\00", align 1
@__tracepoint_rdev_set_power_mgmt = external global %struct.tracepoint, align 8
@llvm.used = appending global [14 x i8*] [i8* bitcast (%struct.kernel_param* @__param_cfg80211_disable_40mhz_24ghz to i8*), i8* bitcast (%struct.kernel_symbol* @__ksymtab_cfg80211_shutdown_all_interfaces to i8*), i8* bitcast (%struct.kernel_symbol* @__ksymtab_wiphy_new_nm to i8*), i8* bitcast (%struct.kernel_symbol* @__ksymtab_wiphy_register to i8*), i8* bitcast (%struct.kernel_symbol* @__ksymtab_wiphy_rfkill_start_polling to i8*), i8* bitcast (%struct.kernel_symbol* @__ksymtab_wiphy_rfkill_stop_polling to i8*), i8* bitcast (%struct.kernel_symbol* @__ksymtab_wiphy_unregister to i8*), i8* bitcast (%struct.kernel_symbol* @__ksymtab_wiphy_free to i8*), i8* bitcast (%struct.kernel_symbol* @__ksymtab_wiphy_rfkill_set_hw_state to i8*), i8* bitcast (%struct.kernel_symbol* @__ksymtab_cfg80211_unregister_wdev to i8*), i8* bitcast (%struct.kernel_symbol* @__ksymtab_cfg80211_stop_iface to i8*), i8* bitcast (i32 ()** @__initcall_cfg80211_init4 to i8*), i8* bitcast (void ()* @cfg80211_exit to i8*), i8* bitcast (void ()** @__exitcall_cfg80211_exit to i8*)], section "llvm.metadata"

; Function Attrs: noinline nounwind uwtable
define %struct.cfg80211_registered_device* @cfg80211_rdev_by_wiphy_idx(i32) #0 {
  %2 = call i32 @rtnl_is_locked()
  %3 = icmp ne i32 %2, 0
  %4 = xor i1 %3, true
  %5 = xor i1 %4, true
  %6 = xor i1 %5, true
  %7 = zext i1 %6 to i32
  %8 = sext i32 %7 to i64
  %9 = icmp ne i64 %8, 0
  br i1 %9, label %10, label %12

; <label>:10:                                     ; preds = %1
  %11 = call i32 (i8*, ...) @printk(i8* getelementptr inbounds ([37 x i8], [37 x i8]* @.str, i32 0, i32 0), i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.1, i32 0, i32 0), i32 59)
  call void @dump_stack()
  br label %12

; <label>:12:                                     ; preds = %10, %1, %23
  %.sink3 = phi %struct.list_head** [ %25, %23 ], [ getelementptr inbounds (%struct.list_head, %struct.list_head* @cfg80211_rdev_list, i32 0, i32 0), %1 ], [ getelementptr inbounds (%struct.list_head, %struct.list_head* @cfg80211_rdev_list, i32 0, i32 0), %10 ]
  %13 = load %struct.list_head*, %struct.list_head** %.sink3, align 8
  %14 = bitcast %struct.list_head* %13 to i8*
  %15 = getelementptr inbounds i8, i8* %14, i64 -8
  %16 = bitcast i8* %15 to %struct.cfg80211_registered_device*
  %17 = getelementptr inbounds %struct.cfg80211_registered_device, %struct.cfg80211_registered_device* %16, i32 0, i32 1
  %18 = icmp ne %struct.list_head* %17, @cfg80211_rdev_list
  br i1 %18, label %19, label %.loopexit

; <label>:19:                                     ; preds = %12
  %20 = getelementptr inbounds %struct.cfg80211_registered_device, %struct.cfg80211_registered_device* %16, i32 0, i32 8
  %21 = load i32, i32* %20, align 4
  %22 = icmp eq i32 %21, %0
  br i1 %22, label %.loopexit, label %23

; <label>:23:                                     ; preds = %19
  %24 = getelementptr inbounds %struct.cfg80211_registered_device, %struct.cfg80211_registered_device* %16, i32 0, i32 1
  %25 = getelementptr inbounds %struct.list_head, %struct.list_head* %24, i32 0, i32 0
  br label %12

.loopexit:                                        ; preds = %12, %19
  %.01 = phi %struct.cfg80211_registered_device* [ %16, %19 ], [ null, %12 ]
  ret %struct.cfg80211_registered_device* %.01
}

declare i32 @rtnl_is_locked() #1

declare i32 @printk(i8*, ...) #1

declare void @dump_stack() #1

; Function Attrs: noinline nounwind uwtable
define i32 @get_wiphy_idx(%struct.wiphy*) #0 {
  %2 = call %struct.cfg80211_registered_device* @wiphy_to_rdev(%struct.wiphy* %0)
  %3 = getelementptr inbounds %struct.cfg80211_registered_device, %struct.cfg80211_registered_device* %2, i32 0, i32 8
  %4 = load i32, i32* %3, align 4
  ret i32 %4
}

; Function Attrs: noinline nounwind uwtable
define internal %struct.cfg80211_registered_device* @wiphy_to_rdev(%struct.wiphy*) #0 {
  %2 = icmp ne %struct.wiphy* %0, null
  %3 = xor i1 %2, true
  %4 = xor i1 %3, true
  %5 = xor i1 %4, true
  %6 = zext i1 %5 to i32
  %7 = sext i32 %6 to i64
  %8 = icmp ne i64 %7, 0
  br i1 %8, label %9, label %11

; <label>:9:                                      ; preds = %1
  call void asm sideeffect "1:\09ud2\0A.pushsection __bug_table,\22a\22\0A2:\09.long 1b - 2b, ${0:c} - 2b\0A\09.word ${1:c}, 0\0A\09.org 2b+${2:c}\0A.popsection", "i,i,i,~{dirflag},~{fpsr},~{flags}"(i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.7, i32 0, i32 0), i32 108, i64 12) #3, !srcloc !1
  br label %10

; <label>:10:                                     ; preds = %10, %9
  br label %10

; <label>:11:                                     ; preds = %1
  %12 = bitcast %struct.wiphy* %0 to i8*
  %13 = getelementptr inbounds i8, i8* %12, i64 -672
  %14 = bitcast i8* %13 to %struct.cfg80211_registered_device*
  ret %struct.cfg80211_registered_device* %14
}

; Function Attrs: noinline nounwind uwtable
define %struct.wiphy* @wiphy_idx_to_wiphy(i32) #0 {
  %2 = call i32 @rtnl_is_locked()
  %3 = icmp ne i32 %2, 0
  %4 = xor i1 %3, true
  %5 = xor i1 %4, true
  %6 = xor i1 %5, true
  %7 = zext i1 %6 to i32
  %8 = sext i32 %7 to i64
  %9 = icmp ne i64 %8, 0
  br i1 %9, label %10, label %12

; <label>:10:                                     ; preds = %1
  %11 = call i32 (i8*, ...) @printk(i8* getelementptr inbounds ([37 x i8], [37 x i8]* @.str, i32 0, i32 0), i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.1, i32 0, i32 0), i32 82)
  call void @dump_stack()
  br label %12

; <label>:12:                                     ; preds = %1, %10
  %13 = call %struct.cfg80211_registered_device* @cfg80211_rdev_by_wiphy_idx(i32 %0)
  %14 = icmp ne %struct.cfg80211_registered_device* %13, null
  %15 = getelementptr inbounds %struct.cfg80211_registered_device, %struct.cfg80211_registered_device* %13, i32 0, i32 42
  %.0 = select i1 %14, %struct.wiphy* %15, %struct.wiphy* null
  ret %struct.wiphy* %.0
}

; Function Attrs: noinline nounwind uwtable
define i32 @cfg80211_dev_rename(%struct.cfg80211_registered_device*, i8*) #0 {
  %3 = call i32 @rtnl_is_locked()
  %4 = icmp ne i32 %3, 0
  %5 = xor i1 %4, true
  %6 = xor i1 %5, true
  %7 = xor i1 %6, true
  %8 = zext i1 %7 to i32
  %9 = sext i32 %8 to i64
  %10 = icmp ne i64 %9, 0
  br i1 %10, label %11, label %13

; <label>:11:                                     ; preds = %2
  %12 = call i32 (i8*, ...) @printk(i8* getelementptr inbounds ([37 x i8], [37 x i8]* @.str, i32 0, i32 0), i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.1, i32 0, i32 0), i32 126)
  call void @dump_stack()
  br label %13

; <label>:13:                                     ; preds = %2, %11
  %14 = getelementptr inbounds %struct.cfg80211_registered_device, %struct.cfg80211_registered_device* %0, i32 0, i32 42
  %15 = call i8* @wiphy_name(%struct.wiphy* %14)
  %16 = call i32 @strcmp(i8* %1, i8* %15)
  %17 = icmp eq i32 %16, 0
  br i1 %17, label %50, label %18

; <label>:18:                                     ; preds = %13
  %19 = call i32 @cfg80211_dev_check_name(%struct.cfg80211_registered_device* %0, i8* %1)
  %20 = icmp slt i32 %19, 0
  br i1 %20, label %50, label %21

; <label>:21:                                     ; preds = %18
  %22 = getelementptr inbounds %struct.cfg80211_registered_device, %struct.cfg80211_registered_device* %0, i32 0, i32 42
  %23 = getelementptr inbounds %struct.wiphy, %struct.wiphy* %22, i32 0, i32 50
  %24 = call i32 @device_rename(%struct.device* %23, i8* %1)
  %25 = icmp ne i32 %24, 0
  br i1 %25, label %50, label %26

; <label>:26:                                     ; preds = %21
  %27 = getelementptr inbounds %struct.cfg80211_registered_device, %struct.cfg80211_registered_device* %0, i32 0, i32 42
  %28 = getelementptr inbounds %struct.wiphy, %struct.wiphy* %27, i32 0, i32 52
  %29 = load %struct.dentry*, %struct.dentry** %28, align 32
  %30 = icmp ne %struct.dentry* %29, null
  br i1 %30, label %31, label %49

; <label>:31:                                     ; preds = %26
  %32 = getelementptr inbounds %struct.cfg80211_registered_device, %struct.cfg80211_registered_device* %0, i32 0, i32 42
  %33 = getelementptr inbounds %struct.wiphy, %struct.wiphy* %32, i32 0, i32 52
  %34 = load %struct.dentry*, %struct.dentry** %33, align 32
  %35 = getelementptr inbounds %struct.dentry, %struct.dentry* %34, i32 0, i32 3
  %36 = load %struct.dentry*, %struct.dentry** %35, align 8
  %37 = getelementptr inbounds %struct.cfg80211_registered_device, %struct.cfg80211_registered_device* %0, i32 0, i32 42
  %38 = getelementptr inbounds %struct.wiphy, %struct.wiphy* %37, i32 0, i32 52
  %39 = load %struct.dentry*, %struct.dentry** %38, align 32
  %40 = getelementptr inbounds %struct.cfg80211_registered_device, %struct.cfg80211_registered_device* %0, i32 0, i32 42
  %41 = getelementptr inbounds %struct.wiphy, %struct.wiphy* %40, i32 0, i32 52
  %42 = load %struct.dentry*, %struct.dentry** %41, align 32
  %43 = getelementptr inbounds %struct.dentry, %struct.dentry* %42, i32 0, i32 3
  %44 = load %struct.dentry*, %struct.dentry** %43, align 8
  %45 = call %struct.dentry* @debugfs_rename(%struct.dentry* %36, %struct.dentry* %39, %struct.dentry* %44, i8* %1)
  %46 = icmp ne %struct.dentry* %45, null
  br i1 %46, label %49, label %47

; <label>:47:                                     ; preds = %31
  %48 = call i32 (i8*, ...) @printk(i8* getelementptr inbounds ([49 x i8], [49 x i8]* @.str.2, i32 0, i32 0), i8* %1)
  br label %49

; <label>:49:                                     ; preds = %47, %31, %26
  call void @nl80211_notify_wiphy(%struct.cfg80211_registered_device* %0, i32 3)
  br label %50

; <label>:50:                                     ; preds = %21, %18, %13, %49
  %.0 = phi i32 [ 0, %49 ], [ 0, %13 ], [ %19, %18 ], [ %24, %21 ]
  ret i32 %.0
}

declare i32 @strcmp(i8*, i8*) #1

; Function Attrs: noinline nounwind uwtable
define internal i8* @wiphy_name(%struct.wiphy*) #0 {
  %2 = getelementptr inbounds %struct.wiphy, %struct.wiphy* %0, i32 0, i32 50
  %3 = call i8* @dev_name(%struct.device* %2)
  ret i8* %3
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @cfg80211_dev_check_name(%struct.cfg80211_registered_device*, i8*) #0 {
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  store i32 -1, i32* %4, align 4
  %5 = call i32 @rtnl_is_locked()
  %6 = icmp ne i32 %5, 0
  %7 = xor i1 %6, true
  %8 = xor i1 %7, true
  %9 = xor i1 %8, true
  %10 = zext i1 %9 to i32
  %11 = sext i32 %10 to i64
  %12 = icmp ne i64 %11, 0
  br i1 %12, label %13, label %15

; <label>:13:                                     ; preds = %2
  %14 = call i32 (i8*, ...) @printk(i8* getelementptr inbounds ([37 x i8], [37 x i8]* @.str, i32 0, i32 0), i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.1, i32 0, i32 0), i32 96)
  call void @dump_stack()
  br label %15

; <label>:15:                                     ; preds = %2, %13
  %16 = call i32 (i8*, i8*, ...) @sscanf(i8* %1, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.8, i32 0, i32 0), i32* %3, i32* %4)
  %17 = load i32, i32* %4, align 4
  %18 = sext i32 %17 to i64
  %19 = call i64 @strlen(i8* %1)
  %20 = icmp eq i64 %18, %19
  br i1 %20, label %21, label %38

; <label>:21:                                     ; preds = %15
  %22 = load i32, i32* %3, align 4
  %23 = getelementptr inbounds %struct.cfg80211_registered_device, %struct.cfg80211_registered_device* %0, i32 0, i32 8
  %24 = load i32, i32* %23, align 4
  %25 = icmp ne i32 %22, %24
  br i1 %25, label %26, label %38

; <label>:26:                                     ; preds = %21, %30
  %.01 = phi i32 [ %31, %30 ], [ 1, %21 ]
  %27 = load i32, i32* %3, align 4
  %28 = sdiv i32 %27, 10
  store i32 %28, i32* %3, align 4
  %29 = icmp ne i32 %28, 0
  br i1 %29, label %30, label %32

; <label>:30:                                     ; preds = %26
  %31 = add nsw i32 %.01, 1
  br label %26

; <label>:32:                                     ; preds = %26
  %33 = load i32, i32* %4, align 4
  %34 = sext i32 %33 to i64
  %35 = sext i32 %.01 to i64
  %36 = add i64 3, %35
  %37 = icmp eq i64 %34, %36
  br i1 %37, label %53, label %38

; <label>:38:                                     ; preds = %15, %21, %32, %50
  %.sink4 = phi %struct.list_head** [ %52, %50 ], [ getelementptr inbounds (%struct.list_head, %struct.list_head* @cfg80211_rdev_list, i32 0, i32 0), %32 ], [ getelementptr inbounds (%struct.list_head, %struct.list_head* @cfg80211_rdev_list, i32 0, i32 0), %21 ], [ getelementptr inbounds (%struct.list_head, %struct.list_head* @cfg80211_rdev_list, i32 0, i32 0), %15 ]
  %39 = load %struct.list_head*, %struct.list_head** %.sink4, align 8
  %40 = bitcast %struct.list_head* %39 to i8*
  %41 = getelementptr inbounds i8, i8* %40, i64 -8
  %42 = bitcast i8* %41 to %struct.cfg80211_registered_device*
  %43 = getelementptr inbounds %struct.cfg80211_registered_device, %struct.cfg80211_registered_device* %42, i32 0, i32 1
  %44 = icmp ne %struct.list_head* %43, @cfg80211_rdev_list
  br i1 %44, label %45, label %53

; <label>:45:                                     ; preds = %38
  %46 = getelementptr inbounds %struct.cfg80211_registered_device, %struct.cfg80211_registered_device* %42, i32 0, i32 42
  %47 = call i8* @wiphy_name(%struct.wiphy* %46)
  %48 = call i32 @strcmp(i8* %1, i8* %47)
  %49 = icmp eq i32 %48, 0
  br i1 %49, label %53, label %50

; <label>:50:                                     ; preds = %45
  %51 = getelementptr inbounds %struct.cfg80211_registered_device, %struct.cfg80211_registered_device* %42, i32 0, i32 1
  %52 = getelementptr inbounds %struct.list_head, %struct.list_head* %51, i32 0, i32 0
  br label %38

; <label>:53:                                     ; preds = %38, %45, %32
  %.0 = phi i32 [ -22, %32 ], [ -22, %45 ], [ 0, %38 ]
  ret i32 %.0
}

declare i32 @device_rename(%struct.device*, i8*) #1

declare %struct.dentry* @debugfs_rename(%struct.dentry*, %struct.dentry*, %struct.dentry*, i8*) #1

declare void @nl80211_notify_wiphy(%struct.cfg80211_registered_device*, i32) #1

; Function Attrs: noinline nounwind uwtable
define i32 @cfg80211_switch_netns(%struct.cfg80211_registered_device*, %struct.net*) #0 {
  %3 = getelementptr inbounds %struct.cfg80211_registered_device, %struct.cfg80211_registered_device* %0, i32 0, i32 42
  %4 = getelementptr inbounds %struct.wiphy, %struct.wiphy* %3, i32 0, i32 10
  %5 = load i32, i32* %4, align 4
  %6 = and i32 %5, 8
  %7 = icmp ne i32 %6, 0
  br i1 %7, label %8, label %117

; <label>:8:                                      ; preds = %2
  %9 = getelementptr inbounds %struct.cfg80211_registered_device, %struct.cfg80211_registered_device* %0, i32 0, i32 42
  %10 = getelementptr inbounds %struct.wiphy, %struct.wiphy* %9, i32 0, i32 55
  br label %11

; <label>:11:                                     ; preds = %41, %8
  %.sink = phi %struct.list_head* [ %42, %41 ], [ %10, %8 ]
  %.01 = phi i32 [ 0, %8 ], [ %.1, %41 ]
  %12 = getelementptr inbounds %struct.list_head, %struct.list_head* %.sink, i32 0, i32 0
  %13 = load %struct.list_head*, %struct.list_head** %12, align 8
  %14 = bitcast %struct.list_head* %13 to i8*
  %15 = getelementptr inbounds i8, i8* %14, i64 -16
  %16 = bitcast i8* %15 to %struct.wireless_dev*
  %17 = getelementptr inbounds %struct.wireless_dev, %struct.wireless_dev* %16, i32 0, i32 2
  %18 = getelementptr inbounds %struct.cfg80211_registered_device, %struct.cfg80211_registered_device* %0, i32 0, i32 42
  %19 = getelementptr inbounds %struct.wiphy, %struct.wiphy* %18, i32 0, i32 55
  %20 = icmp ne %struct.list_head* %17, %19
  br i1 %20, label %21, label %.loopexit

; <label>:21:                                     ; preds = %11
  %22 = getelementptr inbounds %struct.wireless_dev, %struct.wireless_dev* %16, i32 0, i32 3
  %23 = load %struct.net_device*, %struct.net_device** %22, align 8
  %24 = icmp ne %struct.net_device* %23, null
  br i1 %24, label %25, label %41

; <label>:25:                                     ; preds = %21
  %26 = getelementptr inbounds %struct.wireless_dev, %struct.wireless_dev* %16, i32 0, i32 3
  %27 = load %struct.net_device*, %struct.net_device** %26, align 8
  %28 = getelementptr inbounds %struct.net_device, %struct.net_device* %27, i32 0, i32 16
  %29 = load i64, i64* %28, align 16
  %30 = and i64 %29, -8193
  store i64 %30, i64* %28, align 16
  %31 = getelementptr inbounds %struct.wireless_dev, %struct.wireless_dev* %16, i32 0, i32 3
  %32 = load %struct.net_device*, %struct.net_device** %31, align 8
  %33 = call i32 @dev_change_net_namespace(%struct.net_device* %32, %struct.net* %1, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.3, i32 0, i32 0))
  %34 = icmp ne i32 %33, 0
  br i1 %34, label %.loopexit, label %35

; <label>:35:                                     ; preds = %25
  %36 = getelementptr inbounds %struct.wireless_dev, %struct.wireless_dev* %16, i32 0, i32 3
  %37 = load %struct.net_device*, %struct.net_device** %36, align 8
  %38 = getelementptr inbounds %struct.net_device, %struct.net_device* %37, i32 0, i32 16
  %39 = load i64, i64* %38, align 16
  %40 = or i64 %39, 8192
  store i64 %40, i64* %38, align 16
  br label %41

; <label>:41:                                     ; preds = %21, %35
  %.1 = phi i32 [ %33, %35 ], [ %.01, %21 ]
  %42 = getelementptr inbounds %struct.wireless_dev, %struct.wireless_dev* %16, i32 0, i32 2
  br label %11

.loopexit:                                        ; preds = %11, %25
  %.2 = phi i32 [ %33, %25 ], [ %.01, %11 ]
  %43 = icmp ne i32 %.2, 0
  %44 = getelementptr inbounds %struct.cfg80211_registered_device, %struct.cfg80211_registered_device* %0, i32 0, i32 42
  br i1 %43, label %45, label %93

; <label>:45:                                     ; preds = %.loopexit
  %46 = call %struct.net* @wiphy_net(%struct.wiphy* %44)
  br label %47

; <label>:47:                                     ; preds = %82, %58, %45
  %.sink11 = phi %struct.wireless_dev* [ %16, %45 ], [ %53, %58 ], [ %53, %82 ]
  %.3 = phi i32 [ %.2, %45 ], [ %70, %82 ], [ %.3, %58 ]
  %48 = getelementptr inbounds %struct.wireless_dev, %struct.wireless_dev* %.sink11, i32 0, i32 2
  %49 = getelementptr inbounds %struct.list_head, %struct.list_head* %48, i32 0, i32 1
  %50 = load %struct.list_head*, %struct.list_head** %49, align 8
  %51 = bitcast %struct.list_head* %50 to i8*
  %52 = getelementptr inbounds i8, i8* %51, i64 -16
  %53 = bitcast i8* %52 to %struct.wireless_dev*
  %54 = getelementptr inbounds %struct.wireless_dev, %struct.wireless_dev* %53, i32 0, i32 2
  %55 = getelementptr inbounds %struct.cfg80211_registered_device, %struct.cfg80211_registered_device* %0, i32 0, i32 42
  %56 = getelementptr inbounds %struct.wiphy, %struct.wiphy* %55, i32 0, i32 55
  %57 = icmp ne %struct.list_head* %54, %56
  br i1 %57, label %58, label %117

; <label>:58:                                     ; preds = %47
  %59 = getelementptr inbounds %struct.wireless_dev, %struct.wireless_dev* %53, i32 0, i32 3
  %60 = load %struct.net_device*, %struct.net_device** %59, align 8
  %61 = icmp ne %struct.net_device* %60, null
  br i1 %61, label %62, label %47

; <label>:62:                                     ; preds = %58
  %63 = getelementptr inbounds %struct.wireless_dev, %struct.wireless_dev* %53, i32 0, i32 3
  %64 = load %struct.net_device*, %struct.net_device** %63, align 8
  %65 = getelementptr inbounds %struct.net_device, %struct.net_device* %64, i32 0, i32 16
  %66 = load i64, i64* %65, align 16
  %67 = and i64 %66, -8193
  store i64 %67, i64* %65, align 16
  %68 = getelementptr inbounds %struct.wireless_dev, %struct.wireless_dev* %53, i32 0, i32 3
  %69 = load %struct.net_device*, %struct.net_device** %68, align 8
  %70 = call i32 @dev_change_net_namespace(%struct.net_device* %69, %struct.net* %46, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.3, i32 0, i32 0))
  %71 = icmp ne i32 %70, 0
  %72 = xor i1 %71, true
  %73 = xor i1 %72, true
  %74 = zext i1 %73 to i32
  %75 = icmp ne i32 %74, 0
  %76 = xor i1 %75, true
  %77 = xor i1 %76, true
  %78 = zext i1 %77 to i32
  %79 = sext i32 %78 to i64
  %80 = icmp ne i64 %79, 0
  br i1 %80, label %81, label %82

; <label>:81:                                     ; preds = %62
  call void @warn_slowpath_null(i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.1, i32 0, i32 0), i32 183)
  br label %82

; <label>:82:                                     ; preds = %81, %62
  %83 = icmp ne i32 %74, 0
  %84 = xor i1 %83, true
  %85 = xor i1 %84, true
  %86 = zext i1 %85 to i32
  %87 = sext i32 %86 to i64
  %88 = getelementptr inbounds %struct.wireless_dev, %struct.wireless_dev* %53, i32 0, i32 3
  %89 = load %struct.net_device*, %struct.net_device** %88, align 8
  %90 = getelementptr inbounds %struct.net_device, %struct.net_device* %89, i32 0, i32 16
  %91 = load i64, i64* %90, align 16
  %92 = or i64 %91, 8192
  store i64 %92, i64* %90, align 16
  br label %47

; <label>:93:                                     ; preds = %.loopexit
  call void @wiphy_net_set(%struct.wiphy* %44, %struct.net* %1)
  %94 = getelementptr inbounds %struct.cfg80211_registered_device, %struct.cfg80211_registered_device* %0, i32 0, i32 42
  %95 = getelementptr inbounds %struct.wiphy, %struct.wiphy* %94, i32 0, i32 50
  %96 = getelementptr inbounds %struct.cfg80211_registered_device, %struct.cfg80211_registered_device* %0, i32 0, i32 42
  %97 = getelementptr inbounds %struct.wiphy, %struct.wiphy* %96, i32 0, i32 50
  %98 = call i8* @dev_name(%struct.device* %97)
  %99 = call i32 @device_rename(%struct.device* %95, i8* %98)
  %100 = icmp ne i32 %99, 0
  %101 = xor i1 %100, true
  %102 = xor i1 %101, true
  %103 = zext i1 %102 to i32
  %104 = icmp ne i32 %103, 0
  %105 = xor i1 %104, true
  %106 = xor i1 %105, true
  %107 = zext i1 %106 to i32
  %108 = sext i32 %107 to i64
  %109 = icmp ne i64 %108, 0
  br i1 %109, label %110, label %111

; <label>:110:                                    ; preds = %93
  call void @warn_slowpath_null(i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.1, i32 0, i32 0), i32 193)
  br label %111

; <label>:111:                                    ; preds = %110, %93
  %112 = icmp ne i32 %103, 0
  %113 = xor i1 %112, true
  %114 = xor i1 %113, true
  %115 = zext i1 %114 to i32
  %116 = sext i32 %115 to i64
  br label %117

; <label>:117:                                    ; preds = %47, %2, %111
  %.0 = phi i32 [ 0, %111 ], [ -95, %2 ], [ %.3, %47 ]
  ret i32 %.0
}

declare i32 @dev_change_net_namespace(%struct.net_device*, %struct.net*, i8*) #1

; Function Attrs: noinline nounwind uwtable
define internal %struct.net* @wiphy_net(%struct.wiphy*) #0 {
  %2 = getelementptr inbounds %struct.wiphy, %struct.wiphy* %0, i32 0, i32 56
  %3 = call %struct.net* @read_pnet(%struct.possible_net_t* %2)
  ret %struct.net* %3
}

declare void @warn_slowpath_null(i8*, i32) #1

; Function Attrs: noinline nounwind uwtable
define internal void @wiphy_net_set(%struct.wiphy*, %struct.net*) #0 {
  %3 = getelementptr inbounds %struct.wiphy, %struct.wiphy* %0, i32 0, i32 56
  call void @write_pnet(%struct.possible_net_t* %3, %struct.net* %1)
  ret void
}

; Function Attrs: noinline nounwind uwtable
define internal i8* @dev_name(%struct.device*) #0 {
  %2 = getelementptr inbounds %struct.device, %struct.device* %0, i32 0, i32 3
  %3 = load i8*, i8** %2, align 8
  %4 = icmp ne i8* %3, null
  br i1 %4, label %5, label %8

; <label>:5:                                      ; preds = %1
  %6 = getelementptr inbounds %struct.device, %struct.device* %0, i32 0, i32 3
  %7 = load i8*, i8** %6, align 8
  br label %11

; <label>:8:                                      ; preds = %1
  %9 = getelementptr inbounds %struct.device, %struct.device* %0, i32 0, i32 2
  %10 = call i8* @kobject_name(%struct.kobject* %9)
  br label %11

; <label>:11:                                     ; preds = %8, %5
  %.0 = phi i8* [ %7, %5 ], [ %10, %8 ]
  ret i8* %.0
}

; Function Attrs: noinline nounwind uwtable
define void @cfg80211_stop_p2p_device(%struct.cfg80211_registered_device*, %struct.wireless_dev*) #0 {
  %3 = call i32 @rtnl_is_locked()
  %4 = icmp ne i32 %3, 0
  %5 = xor i1 %4, true
  %6 = xor i1 %5, true
  %7 = xor i1 %6, true
  %8 = zext i1 %7 to i32
  %9 = sext i32 %8 to i64
  %10 = icmp ne i64 %9, 0
  br i1 %10, label %11, label %13

; <label>:11:                                     ; preds = %2
  %12 = call i32 (i8*, ...) @printk(i8* getelementptr inbounds ([37 x i8], [37 x i8]* @.str, i32 0, i32 0), i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.1, i32 0, i32 0), i32 208)
  call void @dump_stack()
  br label %13

; <label>:13:                                     ; preds = %2, %11
  %14 = getelementptr inbounds %struct.wireless_dev, %struct.wireless_dev* %1, i32 0, i32 1
  %15 = load i32, i32* %14, align 8
  %16 = icmp ne i32 %15, 10
  %17 = xor i1 %16, true
  %18 = xor i1 %17, true
  %19 = zext i1 %18 to i32
  %20 = icmp ne i32 %19, 0
  %21 = xor i1 %20, true
  %22 = xor i1 %21, true
  %23 = zext i1 %22 to i32
  %24 = sext i32 %23 to i64
  %25 = icmp ne i64 %24, 0
  br i1 %25, label %26, label %27

; <label>:26:                                     ; preds = %13
  call void @warn_slowpath_null(i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.1, i32 0, i32 0), i32 210)
  br label %27

; <label>:27:                                     ; preds = %26, %13
  %28 = icmp ne i32 %19, 0
  %29 = xor i1 %28, true
  %30 = xor i1 %29, true
  %31 = zext i1 %30 to i32
  %32 = sext i32 %31 to i64
  %33 = icmp ne i64 %32, 0
  br i1 %33, label %80, label %34

; <label>:34:                                     ; preds = %27
  %35 = call zeroext i1 @wdev_running(%struct.wireless_dev* %1)
  br i1 %35, label %36, label %80

; <label>:36:                                     ; preds = %34
  call void @rdev_stop_p2p_device(%struct.cfg80211_registered_device* %0, %struct.wireless_dev* %1)
  %37 = getelementptr inbounds %struct.wireless_dev, %struct.wireless_dev* %1, i32 0, i32 9
  store i8 0, i8* %37, align 1
  %38 = getelementptr inbounds %struct.cfg80211_registered_device, %struct.cfg80211_registered_device* %0, i32 0, i32 11
  %39 = load i32, i32* %38, align 8
  %40 = add nsw i32 %39, -1
  store i32 %40, i32* %38, align 8
  %41 = getelementptr inbounds %struct.cfg80211_registered_device, %struct.cfg80211_registered_device* %0, i32 0, i32 25
  %42 = load %struct.cfg80211_scan_request*, %struct.cfg80211_scan_request** %41, align 8
  %43 = icmp ne %struct.cfg80211_scan_request* %42, null
  br i1 %43, label %44, label %80

; <label>:44:                                     ; preds = %36
  %45 = getelementptr inbounds %struct.cfg80211_registered_device, %struct.cfg80211_registered_device* %0, i32 0, i32 25
  %46 = load %struct.cfg80211_scan_request*, %struct.cfg80211_scan_request** %45, align 8
  %47 = getelementptr inbounds %struct.cfg80211_scan_request, %struct.cfg80211_scan_request* %46, i32 0, i32 10
  %48 = load %struct.wireless_dev*, %struct.wireless_dev** %47, align 8
  %49 = icmp eq %struct.wireless_dev* %48, %1
  br i1 %49, label %50, label %80

; <label>:50:                                     ; preds = %44
  %51 = getelementptr inbounds %struct.cfg80211_registered_device, %struct.cfg80211_registered_device* %0, i32 0, i32 25
  %52 = load %struct.cfg80211_scan_request*, %struct.cfg80211_scan_request** %51, align 8
  %53 = getelementptr inbounds %struct.cfg80211_scan_request, %struct.cfg80211_scan_request* %52, i32 0, i32 17
  %54 = load i8, i8* %53, align 8
  %55 = trunc i8 %54 to i1
  %56 = xor i1 %55, true
  %57 = xor i1 %56, true
  %58 = xor i1 %57, true
  %59 = zext i1 %58 to i32
  %60 = icmp ne i32 %59, 0
  %61 = xor i1 %60, true
  %62 = xor i1 %61, true
  %63 = zext i1 %62 to i32
  %64 = sext i32 %63 to i64
  %65 = icmp ne i64 %64, 0
  br i1 %65, label %66, label %67

; <label>:66:                                     ; preds = %50
  call void @warn_slowpath_null(i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.1, i32 0, i32 0), i32 222)
  br label %67

; <label>:67:                                     ; preds = %66, %50
  %68 = icmp ne i32 %59, 0
  %69 = xor i1 %68, true
  %70 = xor i1 %69, true
  %71 = zext i1 %70 to i32
  %72 = sext i32 %71 to i64
  %73 = icmp ne i64 %72, 0
  br i1 %73, label %74, label %79

; <label>:74:                                     ; preds = %67
  %75 = getelementptr inbounds %struct.cfg80211_registered_device, %struct.cfg80211_registered_device* %0, i32 0, i32 25
  %76 = load %struct.cfg80211_scan_request*, %struct.cfg80211_scan_request** %75, align 8
  %77 = getelementptr inbounds %struct.cfg80211_scan_request, %struct.cfg80211_scan_request* %76, i32 0, i32 16
  %78 = getelementptr inbounds %struct.cfg80211_scan_info, %struct.cfg80211_scan_info* %77, i32 0, i32 2
  store i8 1, i8* %78, align 2
  br label %79

; <label>:79:                                     ; preds = %74, %67
  call void @___cfg80211_scan_done(%struct.cfg80211_registered_device* %0, i1 zeroext false)
  br label %80

; <label>:80:                                     ; preds = %34, %27, %79, %44, %36
  ret void
}

; Function Attrs: noinline nounwind uwtable
define internal zeroext i1 @wdev_running(%struct.wireless_dev*) #0 {
  %2 = getelementptr inbounds %struct.wireless_dev, %struct.wireless_dev* %0, i32 0, i32 3
  %3 = load %struct.net_device*, %struct.net_device** %2, align 8
  %4 = icmp ne %struct.net_device* %3, null
  br i1 %4, label %5, label %9

; <label>:5:                                      ; preds = %1
  %6 = getelementptr inbounds %struct.wireless_dev, %struct.wireless_dev* %0, i32 0, i32 3
  %7 = load %struct.net_device*, %struct.net_device** %6, align 8
  %8 = call zeroext i1 @netif_running(%struct.net_device* %7)
  br label %13

; <label>:9:                                      ; preds = %1
  %10 = getelementptr inbounds %struct.wireless_dev, %struct.wireless_dev* %0, i32 0, i32 9
  %11 = load i8, i8* %10, align 1
  %12 = trunc i8 %11 to i1
  br label %13

; <label>:13:                                     ; preds = %9, %5
  %.0 = phi i1 [ %8, %5 ], [ %12, %9 ]
  ret i1 %.0
}

; Function Attrs: noinline nounwind uwtable
define internal void @rdev_stop_p2p_device(%struct.cfg80211_registered_device*, %struct.wireless_dev*) #0 {
  %3 = getelementptr inbounds %struct.cfg80211_registered_device, %struct.cfg80211_registered_device* %0, i32 0, i32 42
  call void @trace_rdev_stop_p2p_device(%struct.wiphy* %3, %struct.wireless_dev* %1)
  %4 = getelementptr inbounds %struct.cfg80211_registered_device, %struct.cfg80211_registered_device* %0, i32 0, i32 0
  %5 = load %struct.cfg80211_ops*, %struct.cfg80211_ops** %4, align 32
  %6 = getelementptr inbounds %struct.cfg80211_ops, %struct.cfg80211_ops* %5, i32 0, i32 77
  %7 = load void (%struct.wiphy*, %struct.wireless_dev*)*, void (%struct.wiphy*, %struct.wireless_dev*)** %6, align 8
  %8 = getelementptr inbounds %struct.cfg80211_registered_device, %struct.cfg80211_registered_device* %0, i32 0, i32 42
  call void %7(%struct.wiphy* %8, %struct.wireless_dev* %1)
  %9 = getelementptr inbounds %struct.cfg80211_registered_device, %struct.cfg80211_registered_device* %0, i32 0, i32 42
  call void @trace_rdev_return_void(%struct.wiphy* %9)
  ret void
}

declare void @___cfg80211_scan_done(%struct.cfg80211_registered_device*, i1 zeroext) #1

; Function Attrs: noinline nounwind uwtable
define void @cfg80211_stop_nan(%struct.cfg80211_registered_device*, %struct.wireless_dev*) #0 {
  %3 = call i32 @rtnl_is_locked()
  %4 = icmp ne i32 %3, 0
  %5 = xor i1 %4, true
  %6 = xor i1 %5, true
  %7 = xor i1 %6, true
  %8 = zext i1 %7 to i32
  %9 = sext i32 %8 to i64
  %10 = icmp ne i64 %9, 0
  br i1 %10, label %11, label %13

; <label>:11:                                     ; preds = %2
  %12 = call i32 (i8*, ...) @printk(i8* getelementptr inbounds ([37 x i8], [37 x i8]* @.str, i32 0, i32 0), i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.1, i32 0, i32 0), i32 231)
  call void @dump_stack()
  br label %13

; <label>:13:                                     ; preds = %2, %11
  %14 = getelementptr inbounds %struct.wireless_dev, %struct.wireless_dev* %1, i32 0, i32 1
  %15 = load i32, i32* %14, align 8
  %16 = icmp ne i32 %15, 12
  %17 = xor i1 %16, true
  %18 = xor i1 %17, true
  %19 = zext i1 %18 to i32
  %20 = icmp ne i32 %19, 0
  %21 = xor i1 %20, true
  %22 = xor i1 %21, true
  %23 = zext i1 %22 to i32
  %24 = sext i32 %23 to i64
  %25 = icmp ne i64 %24, 0
  br i1 %25, label %26, label %27

; <label>:26:                                     ; preds = %13
  call void @warn_slowpath_null(i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.1, i32 0, i32 0), i32 233)
  br label %27

; <label>:27:                                     ; preds = %26, %13
  %28 = icmp ne i32 %19, 0
  %29 = xor i1 %28, true
  %30 = xor i1 %29, true
  %31 = zext i1 %30 to i32
  %32 = sext i32 %31 to i64
  %33 = icmp ne i64 %32, 0
  br i1 %33, label %41, label %34

; <label>:34:                                     ; preds = %27
  %35 = call zeroext i1 @wdev_running(%struct.wireless_dev* %1)
  br i1 %35, label %36, label %41

; <label>:36:                                     ; preds = %34
  call void @rdev_stop_nan(%struct.cfg80211_registered_device* %0, %struct.wireless_dev* %1)
  %37 = getelementptr inbounds %struct.wireless_dev, %struct.wireless_dev* %1, i32 0, i32 9
  store i8 0, i8* %37, align 1
  %38 = getelementptr inbounds %struct.cfg80211_registered_device, %struct.cfg80211_registered_device* %0, i32 0, i32 11
  %39 = load i32, i32* %38, align 8
  %40 = add nsw i32 %39, -1
  store i32 %40, i32* %38, align 8
  br label %41

; <label>:41:                                     ; preds = %34, %27, %36
  ret void
}

; Function Attrs: noinline nounwind uwtable
define internal void @rdev_stop_nan(%struct.cfg80211_registered_device*, %struct.wireless_dev*) #0 {
  %3 = getelementptr inbounds %struct.cfg80211_registered_device, %struct.cfg80211_registered_device* %0, i32 0, i32 42
  call void @trace_rdev_stop_nan(%struct.wiphy* %3, %struct.wireless_dev* %1)
  %4 = getelementptr inbounds %struct.cfg80211_registered_device, %struct.cfg80211_registered_device* %0, i32 0, i32 0
  %5 = load %struct.cfg80211_ops*, %struct.cfg80211_ops** %4, align 32
  %6 = getelementptr inbounds %struct.cfg80211_ops, %struct.cfg80211_ops* %5, i32 0, i32 92
  %7 = load void (%struct.wiphy*, %struct.wireless_dev*)*, void (%struct.wiphy*, %struct.wireless_dev*)** %6, align 8
  %8 = getelementptr inbounds %struct.cfg80211_registered_device, %struct.cfg80211_registered_device* %0, i32 0, i32 42
  call void %7(%struct.wiphy* %8, %struct.wireless_dev* %1)
  %9 = getelementptr inbounds %struct.cfg80211_registered_device, %struct.cfg80211_registered_device* %0, i32 0, i32 42
  call void @trace_rdev_return_void(%struct.wiphy* %9)
  ret void
}

; Function Attrs: noinline nounwind uwtable
define void @cfg80211_shutdown_all_interfaces(%struct.wiphy*) #0 {
  %2 = call %struct.cfg80211_registered_device* @wiphy_to_rdev(%struct.wiphy* %0)
  %3 = call i32 @rtnl_is_locked()
  %4 = icmp ne i32 %3, 0
  %5 = xor i1 %4, true
  %6 = xor i1 %5, true
  %7 = xor i1 %6, true
  %8 = zext i1 %7 to i32
  %9 = sext i32 %8 to i64
  %10 = icmp ne i64 %9, 0
  br i1 %10, label %11, label %13

; <label>:11:                                     ; preds = %1
  %12 = call i32 (i8*, ...) @printk(i8* getelementptr inbounds ([37 x i8], [37 x i8]* @.str, i32 0, i32 0), i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.1, i32 0, i32 0), i32 250)
  call void @dump_stack()
  br label %13

; <label>:13:                                     ; preds = %1, %11
  %14 = getelementptr inbounds %struct.cfg80211_registered_device, %struct.cfg80211_registered_device* %2, i32 0, i32 42
  %15 = getelementptr inbounds %struct.wiphy, %struct.wiphy* %14, i32 0, i32 55
  br label %16

; <label>:16:                                     ; preds = %39, %13
  %.sink = phi %struct.list_head* [ %40, %39 ], [ %15, %13 ]
  %17 = getelementptr inbounds %struct.list_head, %struct.list_head* %.sink, i32 0, i32 0
  %18 = load %struct.list_head*, %struct.list_head** %17, align 8
  %19 = bitcast %struct.list_head* %18 to i8*
  %20 = getelementptr inbounds i8, i8* %19, i64 -16
  %21 = bitcast i8* %20 to %struct.wireless_dev*
  %22 = getelementptr inbounds %struct.wireless_dev, %struct.wireless_dev* %21, i32 0, i32 2
  %23 = getelementptr inbounds %struct.cfg80211_registered_device, %struct.cfg80211_registered_device* %2, i32 0, i32 42
  %24 = getelementptr inbounds %struct.wiphy, %struct.wiphy* %23, i32 0, i32 55
  %25 = icmp ne %struct.list_head* %22, %24
  br i1 %25, label %26, label %41

; <label>:26:                                     ; preds = %16
  %27 = getelementptr inbounds %struct.wireless_dev, %struct.wireless_dev* %21, i32 0, i32 3
  %28 = load %struct.net_device*, %struct.net_device** %27, align 8
  %29 = icmp ne %struct.net_device* %28, null
  br i1 %29, label %30, label %34

; <label>:30:                                     ; preds = %26
  %31 = getelementptr inbounds %struct.wireless_dev, %struct.wireless_dev* %21, i32 0, i32 3
  %32 = load %struct.net_device*, %struct.net_device** %31, align 8
  %33 = call i32 @dev_close(%struct.net_device* %32)
  br label %39

; <label>:34:                                     ; preds = %26
  %35 = getelementptr inbounds %struct.wireless_dev, %struct.wireless_dev* %21, i32 0, i32 1
  %36 = load i32, i32* %35, align 8
  switch i32 %36, label %39 [
    i32 10, label %37
    i32 12, label %38
  ]

; <label>:37:                                     ; preds = %34
  call void @cfg80211_stop_p2p_device(%struct.cfg80211_registered_device* %2, %struct.wireless_dev* %21)
  br label %39

; <label>:38:                                     ; preds = %34
  call void @cfg80211_stop_nan(%struct.cfg80211_registered_device* %2, %struct.wireless_dev* %21)
  br label %39

; <label>:39:                                     ; preds = %37, %38, %34, %30
  %40 = getelementptr inbounds %struct.wireless_dev, %struct.wireless_dev* %21, i32 0, i32 2
  br label %16

; <label>:41:                                     ; preds = %16
  ret void
}

declare i32 @dev_close(%struct.net_device*) #1

; Function Attrs: noinline nounwind uwtable
define void @cfg80211_destroy_ifaces(%struct.cfg80211_registered_device*) #0 {
  %2 = alloca %union.anon.80, align 8
  %3 = call i32 @rtnl_is_locked()
  %4 = icmp ne i32 %3, 0
  %5 = xor i1 %4, true
  %6 = xor i1 %5, true
  %7 = xor i1 %6, true
  %8 = zext i1 %7 to i32
  %9 = sext i32 %8 to i64
  %10 = icmp ne i64 %9, 0
  br i1 %10, label %11, label %13

; <label>:11:                                     ; preds = %1
  %12 = call i32 (i8*, ...) @printk(i8* getelementptr inbounds ([37 x i8], [37 x i8]* @.str, i32 0, i32 0), i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.1, i32 0, i32 0), i32 310)
  call void @dump_stack()
  br label %13

; <label>:13:                                     ; preds = %1, %11
  %14 = getelementptr inbounds %struct.cfg80211_registered_device, %struct.cfg80211_registered_device* %0, i32 0, i32 37
  %15 = getelementptr inbounds %struct.spinlock, %struct.spinlock* %14, i32 0, i32 0
  %16 = bitcast %union.anon.1* %15 to %struct.raw_spinlock*
  call void @_raw_spin_lock_irq(%struct.raw_spinlock* %16) #3
  br label %17

; <label>:17:                                     ; preds = %66, %13
  %18 = getelementptr inbounds %struct.cfg80211_registered_device, %struct.cfg80211_registered_device* %0, i32 0, i32 38
  %19 = getelementptr inbounds %struct.list_head, %struct.list_head* %18, i32 0, i32 0
  %20 = bitcast %struct.list_head** %19 to i8*
  %21 = bitcast %union.anon.80* %2 to [1 x i8]*
  %22 = getelementptr inbounds [1 x i8], [1 x i8]* %21, i32 0, i32 0
  %23 = bitcast i8* %20 to i64*
  %24 = load volatile i64, i64* %23, align 8
  %25 = bitcast i8* %22 to i64*
  store i64 %24, i64* %25, align 8
  %26 = bitcast %union.anon.80* %2 to %struct.list_head**
  %27 = load %struct.list_head*, %struct.list_head** %26, align 8
  %28 = icmp ne %struct.list_head* %27, %18
  %29 = bitcast %struct.list_head* %27 to i8*
  %30 = getelementptr inbounds i8, i8* %29, i64 0
  %31 = bitcast i8* %30 to %struct.cfg80211_iface_destroy*
  %32 = select i1 %28, %struct.cfg80211_iface_destroy* %31, %struct.cfg80211_iface_destroy* null
  %33 = icmp ne %struct.cfg80211_iface_destroy* %32, null
  br i1 %33, label %34, label %70

; <label>:34:                                     ; preds = %17
  %35 = getelementptr inbounds %struct.cfg80211_iface_destroy, %struct.cfg80211_iface_destroy* %32, i32 0, i32 1
  %36 = load i32, i32* %35, align 8
  %37 = getelementptr inbounds %struct.cfg80211_iface_destroy, %struct.cfg80211_iface_destroy* %32, i32 0, i32 0
  call void @list_del(%struct.list_head* %37)
  %38 = bitcast %struct.cfg80211_iface_destroy* %32 to i8*
  call void @kfree(i8* %38)
  %39 = getelementptr inbounds %struct.cfg80211_registered_device, %struct.cfg80211_registered_device* %0, i32 0, i32 37
  %40 = getelementptr inbounds %struct.spinlock, %struct.spinlock* %39, i32 0, i32 0
  %41 = bitcast %union.anon.1* %40 to %struct.raw_spinlock*
  call void @__raw_spin_unlock_irq(%struct.raw_spinlock* %41) #3
  %42 = getelementptr inbounds %struct.cfg80211_registered_device, %struct.cfg80211_registered_device* %0, i32 0, i32 42
  %43 = getelementptr inbounds %struct.wiphy, %struct.wiphy* %42, i32 0, i32 55
  %44 = getelementptr inbounds %struct.list_head, %struct.list_head* %43, i32 0, i32 0
  %45 = load %struct.list_head*, %struct.list_head** %44, align 8
  %46 = bitcast %struct.list_head* %45 to i8*
  %47 = getelementptr inbounds i8, i8* %46, i64 -16
  %48 = bitcast i8* %47 to %struct.wireless_dev*
  br label %49

; <label>:49:                                     ; preds = %64, %60, %34
  %.sink4 = phi %struct.wireless_dev* [ %48, %34 ], [ %55, %60 ], [ %55, %64 ]
  %50 = getelementptr inbounds %struct.wireless_dev, %struct.wireless_dev* %.sink4, i32 0, i32 2
  %51 = getelementptr inbounds %struct.list_head, %struct.list_head* %50, i32 0, i32 0
  %52 = load %struct.list_head*, %struct.list_head** %51, align 8
  %53 = bitcast %struct.list_head* %52 to i8*
  %54 = getelementptr inbounds i8, i8* %53, i64 -16
  %55 = bitcast i8* %54 to %struct.wireless_dev*
  %56 = getelementptr inbounds %struct.wireless_dev, %struct.wireless_dev* %.sink4, i32 0, i32 2
  %57 = getelementptr inbounds %struct.cfg80211_registered_device, %struct.cfg80211_registered_device* %0, i32 0, i32 42
  %58 = getelementptr inbounds %struct.wiphy, %struct.wiphy* %57, i32 0, i32 55
  %59 = icmp ne %struct.list_head* %56, %58
  br i1 %59, label %60, label %66

; <label>:60:                                     ; preds = %49
  %61 = getelementptr inbounds %struct.wireless_dev, %struct.wireless_dev* %.sink4, i32 0, i32 35
  %62 = load i32, i32* %61, align 4
  %63 = icmp eq i32 %36, %62
  br i1 %63, label %64, label %49

; <label>:64:                                     ; preds = %60
  %65 = call i32 @rdev_del_virtual_intf(%struct.cfg80211_registered_device* %0, %struct.wireless_dev* %.sink4)
  br label %49

; <label>:66:                                     ; preds = %49
  %67 = getelementptr inbounds %struct.cfg80211_registered_device, %struct.cfg80211_registered_device* %0, i32 0, i32 37
  %68 = getelementptr inbounds %struct.spinlock, %struct.spinlock* %67, i32 0, i32 0
  %69 = bitcast %union.anon.1* %68 to %struct.raw_spinlock*
  call void @_raw_spin_lock_irq(%struct.raw_spinlock* %69) #3
  br label %17

; <label>:70:                                     ; preds = %17
  %71 = getelementptr inbounds %struct.cfg80211_registered_device, %struct.cfg80211_registered_device* %0, i32 0, i32 37
  %72 = getelementptr inbounds %struct.spinlock, %struct.spinlock* %71, i32 0, i32 0
  %73 = bitcast %union.anon.1* %72 to %struct.raw_spinlock*
  call void @__raw_spin_unlock_irq(%struct.raw_spinlock* %73) #3
  ret void
}

; Function Attrs: noinline nounwind uwtable
define internal void @list_del(%struct.list_head*) #0 {
  call void @__list_del_entry(%struct.list_head* %0)
  %2 = getelementptr inbounds %struct.list_head, %struct.list_head* %0, i32 0, i32 0
  store %struct.list_head* bitcast (i8* getelementptr (i8, i8* inttoptr (i64 256 to i8*), i64 -2401263026318606336) to %struct.list_head*), %struct.list_head** %2, align 8
  %3 = getelementptr inbounds %struct.list_head, %struct.list_head* %0, i32 0, i32 1
  store %struct.list_head* bitcast (i8* getelementptr (i8, i8* inttoptr (i64 512 to i8*), i64 -2401263026318606336) to %struct.list_head*), %struct.list_head** %3, align 8
  ret void
}

declare void @kfree(i8*) #1

; Function Attrs: noinline nounwind uwtable
define internal i32 @rdev_del_virtual_intf(%struct.cfg80211_registered_device*, %struct.wireless_dev*) #0 {
  %3 = getelementptr inbounds %struct.cfg80211_registered_device, %struct.cfg80211_registered_device* %0, i32 0, i32 42
  call void @trace_rdev_del_virtual_intf(%struct.wiphy* %3, %struct.wireless_dev* %1)
  %4 = getelementptr inbounds %struct.cfg80211_registered_device, %struct.cfg80211_registered_device* %0, i32 0, i32 0
  %5 = load %struct.cfg80211_ops*, %struct.cfg80211_ops** %4, align 32
  %6 = getelementptr inbounds %struct.cfg80211_ops, %struct.cfg80211_ops* %5, i32 0, i32 4
  %7 = load i32 (%struct.wiphy*, %struct.wireless_dev*)*, i32 (%struct.wiphy*, %struct.wireless_dev*)** %6, align 8
  %8 = getelementptr inbounds %struct.cfg80211_registered_device, %struct.cfg80211_registered_device* %0, i32 0, i32 42
  %9 = call i32 %7(%struct.wiphy* %8, %struct.wireless_dev* %1)
  %10 = getelementptr inbounds %struct.cfg80211_registered_device, %struct.cfg80211_registered_device* %0, i32 0, i32 42
  call void @trace_rdev_return_int(%struct.wiphy* %10, i32 %9)
  ret i32 %9
}

; Function Attrs: noinline nounwind uwtable
define %struct.wiphy* @wiphy_new_nm(%struct.cfg80211_ops*, i32, i8*) #0 {
  %4 = alloca %struct.raw_spinlock, align 4
  %5 = alloca %struct.raw_spinlock, align 4
  %6 = alloca %struct.atomic64_t, align 8
  %7 = alloca %struct.atomic64_t, align 8
  %8 = alloca %struct.raw_spinlock, align 4
  %9 = alloca %struct.atomic64_t, align 8
  %10 = alloca %struct.atomic64_t, align 8
  %11 = alloca %struct.raw_spinlock, align 4
  %12 = alloca %struct.atomic64_t, align 8
  %13 = alloca %struct.atomic64_t, align 8
  %14 = alloca %struct.atomic64_t, align 8
  %15 = alloca %struct.atomic64_t, align 8
  %16 = alloca %struct.atomic64_t, align 8
  %17 = getelementptr inbounds %struct.cfg80211_ops, %struct.cfg80211_ops* %0, i32 0, i32 6
  %18 = load i32 (%struct.wiphy*, %struct.net_device*, i8, i1, i8*, %struct.key_params*)*, i32 (%struct.wiphy*, %struct.net_device*, i8, i1, i8*, %struct.key_params*)** %17, align 8
  %19 = icmp ne i32 (%struct.wiphy*, %struct.net_device*, i8, i1, i8*, %struct.key_params*)* %18, null
  br i1 %19, label %20, label %29

; <label>:20:                                     ; preds = %3
  %21 = getelementptr inbounds %struct.cfg80211_ops, %struct.cfg80211_ops* %0, i32 0, i32 8
  %22 = load i32 (%struct.wiphy*, %struct.net_device*, i8, i1, i8*)*, i32 (%struct.wiphy*, %struct.net_device*, i8, i1, i8*)** %21, align 8
  %23 = icmp ne i32 (%struct.wiphy*, %struct.net_device*, i8, i1, i8*)* %22, null
  br i1 %23, label %24, label %29

; <label>:24:                                     ; preds = %20
  %25 = getelementptr inbounds %struct.cfg80211_ops, %struct.cfg80211_ops* %0, i32 0, i32 9
  %26 = load i32 (%struct.wiphy*, %struct.net_device*, i8, i1, i1)*, i32 (%struct.wiphy*, %struct.net_device*, i8, i1, i1)** %25, align 8
  %27 = icmp ne i32 (%struct.wiphy*, %struct.net_device*, i8, i1, i1)* %26, null
  %28 = xor i1 %27, true
  br label %29

; <label>:29:                                     ; preds = %20, %24, %3
  %30 = phi i1 [ false, %3 ], [ true, %20 ], [ %28, %24 ]
  %31 = xor i1 %30, true
  %32 = xor i1 %31, true
  %33 = zext i1 %32 to i32
  %34 = icmp ne i32 %33, 0
  %35 = xor i1 %34, true
  %36 = xor i1 %35, true
  %37 = zext i1 %36 to i32
  %38 = sext i32 %37 to i64
  %39 = icmp ne i64 %38, 0
  br i1 %39, label %40, label %41

; <label>:40:                                     ; preds = %29
  call void @warn_slowpath_null(i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.1, i32 0, i32 0), i32 370)
  br label %41

; <label>:41:                                     ; preds = %40, %29
  %42 = icmp ne i32 %33, 0
  %43 = xor i1 %42, true
  %44 = xor i1 %43, true
  %45 = zext i1 %44 to i32
  %46 = sext i32 %45 to i64
  %47 = getelementptr inbounds %struct.cfg80211_ops, %struct.cfg80211_ops* %0, i32 0, i32 38
  %48 = load i32 (%struct.wiphy*, %struct.net_device*, %struct.cfg80211_auth_request*)*, i32 (%struct.wiphy*, %struct.net_device*, %struct.cfg80211_auth_request*)** %47, align 8
  %49 = icmp ne i32 (%struct.wiphy*, %struct.net_device*, %struct.cfg80211_auth_request*)* %48, null
  br i1 %49, label %50, label %63

; <label>:50:                                     ; preds = %41
  %51 = getelementptr inbounds %struct.cfg80211_ops, %struct.cfg80211_ops* %0, i32 0, i32 39
  %52 = load i32 (%struct.wiphy*, %struct.net_device*, %struct.cfg80211_assoc_request*)*, i32 (%struct.wiphy*, %struct.net_device*, %struct.cfg80211_assoc_request*)** %51, align 8
  %53 = icmp ne i32 (%struct.wiphy*, %struct.net_device*, %struct.cfg80211_assoc_request*)* %52, null
  br i1 %53, label %54, label %63

; <label>:54:                                     ; preds = %50
  %55 = getelementptr inbounds %struct.cfg80211_ops, %struct.cfg80211_ops* %0, i32 0, i32 40
  %56 = load i32 (%struct.wiphy*, %struct.net_device*, %struct.cfg80211_deauth_request*)*, i32 (%struct.wiphy*, %struct.net_device*, %struct.cfg80211_deauth_request*)** %55, align 8
  %57 = icmp ne i32 (%struct.wiphy*, %struct.net_device*, %struct.cfg80211_deauth_request*)* %56, null
  br i1 %57, label %58, label %63

; <label>:58:                                     ; preds = %54
  %59 = getelementptr inbounds %struct.cfg80211_ops, %struct.cfg80211_ops* %0, i32 0, i32 41
  %60 = load i32 (%struct.wiphy*, %struct.net_device*, %struct.cfg80211_disassoc_request*)*, i32 (%struct.wiphy*, %struct.net_device*, %struct.cfg80211_disassoc_request*)** %59, align 8
  %61 = icmp ne i32 (%struct.wiphy*, %struct.net_device*, %struct.cfg80211_disassoc_request*)* %60, null
  %62 = xor i1 %61, true
  br label %63

; <label>:63:                                     ; preds = %50, %54, %58, %41
  %64 = phi i1 [ false, %41 ], [ true, %54 ], [ true, %50 ], [ %62, %58 ]
  %65 = xor i1 %64, true
  %66 = xor i1 %65, true
  %67 = zext i1 %66 to i32
  %68 = icmp ne i32 %67, 0
  %69 = xor i1 %68, true
  %70 = xor i1 %69, true
  %71 = zext i1 %70 to i32
  %72 = sext i32 %71 to i64
  %73 = icmp ne i64 %72, 0
  br i1 %73, label %74, label %75

; <label>:74:                                     ; preds = %63
  call void @warn_slowpath_null(i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.1, i32 0, i32 0), i32 371)
  br label %75

; <label>:75:                                     ; preds = %74, %63
  %76 = icmp ne i32 %67, 0
  %77 = xor i1 %76, true
  %78 = xor i1 %77, true
  %79 = zext i1 %78 to i32
  %80 = sext i32 %79 to i64
  %81 = getelementptr inbounds %struct.cfg80211_ops, %struct.cfg80211_ops* %0, i32 0, i32 42
  %82 = load i32 (%struct.wiphy*, %struct.net_device*, %struct.cfg80211_connect_params*)*, i32 (%struct.wiphy*, %struct.net_device*, %struct.cfg80211_connect_params*)** %81, align 8
  %83 = icmp ne i32 (%struct.wiphy*, %struct.net_device*, %struct.cfg80211_connect_params*)* %82, null
  br i1 %83, label %84, label %89

; <label>:84:                                     ; preds = %75
  %85 = getelementptr inbounds %struct.cfg80211_ops, %struct.cfg80211_ops* %0, i32 0, i32 44
  %86 = load i32 (%struct.wiphy*, %struct.net_device*, i16)*, i32 (%struct.wiphy*, %struct.net_device*, i16)** %85, align 8
  %87 = icmp ne i32 (%struct.wiphy*, %struct.net_device*, i16)* %86, null
  %88 = xor i1 %87, true
  br label %89

; <label>:89:                                     ; preds = %84, %75
  %90 = phi i1 [ false, %75 ], [ %88, %84 ]
  %91 = xor i1 %90, true
  %92 = xor i1 %91, true
  %93 = zext i1 %92 to i32
  %94 = icmp ne i32 %93, 0
  %95 = xor i1 %94, true
  %96 = xor i1 %95, true
  %97 = zext i1 %96 to i32
  %98 = sext i32 %97 to i64
  %99 = icmp ne i64 %98, 0
  br i1 %99, label %100, label %101

; <label>:100:                                    ; preds = %89
  call void @warn_slowpath_null(i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.1, i32 0, i32 0), i32 372)
  br label %101

; <label>:101:                                    ; preds = %100, %89
  %102 = icmp ne i32 %93, 0
  %103 = xor i1 %102, true
  %104 = xor i1 %103, true
  %105 = zext i1 %104 to i32
  %106 = sext i32 %105 to i64
  %107 = getelementptr inbounds %struct.cfg80211_ops, %struct.cfg80211_ops* %0, i32 0, i32 45
  %108 = load i32 (%struct.wiphy*, %struct.net_device*, %struct.cfg80211_ibss_params*)*, i32 (%struct.wiphy*, %struct.net_device*, %struct.cfg80211_ibss_params*)** %107, align 8
  %109 = icmp ne i32 (%struct.wiphy*, %struct.net_device*, %struct.cfg80211_ibss_params*)* %108, null
  br i1 %109, label %110, label %115

; <label>:110:                                    ; preds = %101
  %111 = getelementptr inbounds %struct.cfg80211_ops, %struct.cfg80211_ops* %0, i32 0, i32 46
  %112 = load i32 (%struct.wiphy*, %struct.net_device*)*, i32 (%struct.wiphy*, %struct.net_device*)** %111, align 8
  %113 = icmp ne i32 (%struct.wiphy*, %struct.net_device*)* %112, null
  %114 = xor i1 %113, true
  br label %115

; <label>:115:                                    ; preds = %110, %101
  %116 = phi i1 [ false, %101 ], [ %114, %110 ]
  %117 = xor i1 %116, true
  %118 = xor i1 %117, true
  %119 = zext i1 %118 to i32
  %120 = icmp ne i32 %119, 0
  %121 = xor i1 %120, true
  %122 = xor i1 %121, true
  %123 = zext i1 %122 to i32
  %124 = sext i32 %123 to i64
  %125 = icmp ne i64 %124, 0
  br i1 %125, label %126, label %127

; <label>:126:                                    ; preds = %115
  call void @warn_slowpath_null(i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.1, i32 0, i32 0), i32 373)
  br label %127

; <label>:127:                                    ; preds = %126, %115
  %128 = icmp ne i32 %119, 0
  %129 = xor i1 %128, true
  %130 = xor i1 %129, true
  %131 = zext i1 %130 to i32
  %132 = sext i32 %131 to i64
  %133 = getelementptr inbounds %struct.cfg80211_ops, %struct.cfg80211_ops* %0, i32 0, i32 3
  %134 = load %struct.wireless_dev* (%struct.wiphy*, i8*, i8, i32, i32*, %struct.vif_params*)*, %struct.wireless_dev* (%struct.wiphy*, i8*, i8, i32, i32*, %struct.vif_params*)** %133, align 8
  %135 = icmp ne %struct.wireless_dev* (%struct.wiphy*, i8*, i8, i32, i32*, %struct.vif_params*)* %134, null
  br i1 %135, label %136, label %141

; <label>:136:                                    ; preds = %127
  %137 = getelementptr inbounds %struct.cfg80211_ops, %struct.cfg80211_ops* %0, i32 0, i32 4
  %138 = load i32 (%struct.wiphy*, %struct.wireless_dev*)*, i32 (%struct.wiphy*, %struct.wireless_dev*)** %137, align 8
  %139 = icmp ne i32 (%struct.wiphy*, %struct.wireless_dev*)* %138, null
  %140 = xor i1 %139, true
  br label %141

; <label>:141:                                    ; preds = %136, %127
  %142 = phi i1 [ false, %127 ], [ %140, %136 ]
  %143 = xor i1 %142, true
  %144 = xor i1 %143, true
  %145 = zext i1 %144 to i32
  %146 = icmp ne i32 %145, 0
  %147 = xor i1 %146, true
  %148 = xor i1 %147, true
  %149 = zext i1 %148 to i32
  %150 = sext i32 %149 to i64
  %151 = icmp ne i64 %150, 0
  br i1 %151, label %152, label %153

; <label>:152:                                    ; preds = %141
  call void @warn_slowpath_null(i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.1, i32 0, i32 0), i32 374)
  br label %153

; <label>:153:                                    ; preds = %152, %141
  %154 = icmp ne i32 %145, 0
  %155 = xor i1 %154, true
  %156 = xor i1 %155, true
  %157 = zext i1 %156 to i32
  %158 = sext i32 %157 to i64
  %159 = getelementptr inbounds %struct.cfg80211_ops, %struct.cfg80211_ops* %0, i32 0, i32 14
  %160 = load i32 (%struct.wiphy*, %struct.net_device*, i8*, %struct.station_parameters*)*, i32 (%struct.wiphy*, %struct.net_device*, i8*, %struct.station_parameters*)** %159, align 8
  %161 = icmp ne i32 (%struct.wiphy*, %struct.net_device*, i8*, %struct.station_parameters*)* %160, null
  br i1 %161, label %162, label %167

; <label>:162:                                    ; preds = %153
  %163 = getelementptr inbounds %struct.cfg80211_ops, %struct.cfg80211_ops* %0, i32 0, i32 15
  %164 = load i32 (%struct.wiphy*, %struct.net_device*, %struct.station_del_parameters*)*, i32 (%struct.wiphy*, %struct.net_device*, %struct.station_del_parameters*)** %163, align 8
  %165 = icmp ne i32 (%struct.wiphy*, %struct.net_device*, %struct.station_del_parameters*)* %164, null
  %166 = xor i1 %165, true
  br label %167

; <label>:167:                                    ; preds = %162, %153
  %168 = phi i1 [ false, %153 ], [ %166, %162 ]
  %169 = xor i1 %168, true
  %170 = xor i1 %169, true
  %171 = zext i1 %170 to i32
  %172 = icmp ne i32 %171, 0
  %173 = xor i1 %172, true
  %174 = xor i1 %173, true
  %175 = zext i1 %174 to i32
  %176 = sext i32 %175 to i64
  %177 = icmp ne i64 %176, 0
  br i1 %177, label %178, label %179

; <label>:178:                                    ; preds = %167
  call void @warn_slowpath_null(i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.1, i32 0, i32 0), i32 375)
  br label %179

; <label>:179:                                    ; preds = %178, %167
  %180 = icmp ne i32 %171, 0
  %181 = xor i1 %180, true
  %182 = xor i1 %181, true
  %183 = zext i1 %182 to i32
  %184 = sext i32 %183 to i64
  %185 = getelementptr inbounds %struct.cfg80211_ops, %struct.cfg80211_ops* %0, i32 0, i32 19
  %186 = load i32 (%struct.wiphy*, %struct.net_device*, i8*, i8*)*, i32 (%struct.wiphy*, %struct.net_device*, i8*, i8*)** %185, align 8
  %187 = icmp ne i32 (%struct.wiphy*, %struct.net_device*, i8*, i8*)* %186, null
  br i1 %187, label %188, label %193

; <label>:188:                                    ; preds = %179
  %189 = getelementptr inbounds %struct.cfg80211_ops, %struct.cfg80211_ops* %0, i32 0, i32 20
  %190 = load i32 (%struct.wiphy*, %struct.net_device*, i8*)*, i32 (%struct.wiphy*, %struct.net_device*, i8*)** %189, align 8
  %191 = icmp ne i32 (%struct.wiphy*, %struct.net_device*, i8*)* %190, null
  %192 = xor i1 %191, true
  br label %193

; <label>:193:                                    ; preds = %188, %179
  %194 = phi i1 [ false, %179 ], [ %192, %188 ]
  %195 = xor i1 %194, true
  %196 = xor i1 %195, true
  %197 = zext i1 %196 to i32
  %198 = icmp ne i32 %197, 0
  %199 = xor i1 %198, true
  %200 = xor i1 %199, true
  %201 = zext i1 %200 to i32
  %202 = sext i32 %201 to i64
  %203 = icmp ne i64 %202, 0
  br i1 %203, label %204, label %205

; <label>:204:                                    ; preds = %193
  call void @warn_slowpath_null(i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.1, i32 0, i32 0), i32 376)
  br label %205

; <label>:205:                                    ; preds = %204, %193
  %206 = icmp ne i32 %197, 0
  %207 = xor i1 %206, true
  %208 = xor i1 %207, true
  %209 = zext i1 %208 to i32
  %210 = sext i32 %209 to i64
  %211 = getelementptr inbounds %struct.cfg80211_ops, %struct.cfg80211_ops* %0, i32 0, i32 28
  %212 = load i32 (%struct.wiphy*, %struct.net_device*, %struct.mesh_config*, %struct.mesh_setup*)*, i32 (%struct.wiphy*, %struct.net_device*, %struct.mesh_config*, %struct.mesh_setup*)** %211, align 8
  %213 = icmp ne i32 (%struct.wiphy*, %struct.net_device*, %struct.mesh_config*, %struct.mesh_setup*)* %212, null
  br i1 %213, label %214, label %219

; <label>:214:                                    ; preds = %205
  %215 = getelementptr inbounds %struct.cfg80211_ops, %struct.cfg80211_ops* %0, i32 0, i32 29
  %216 = load i32 (%struct.wiphy*, %struct.net_device*)*, i32 (%struct.wiphy*, %struct.net_device*)** %215, align 8
  %217 = icmp ne i32 (%struct.wiphy*, %struct.net_device*)* %216, null
  %218 = xor i1 %217, true
  br label %219

; <label>:219:                                    ; preds = %214, %205
  %220 = phi i1 [ false, %205 ], [ %218, %214 ]
  %221 = xor i1 %220, true
  %222 = xor i1 %221, true
  %223 = zext i1 %222 to i32
  %224 = icmp ne i32 %223, 0
  %225 = xor i1 %224, true
  %226 = xor i1 %225, true
  %227 = zext i1 %226 to i32
  %228 = sext i32 %227 to i64
  %229 = icmp ne i64 %228, 0
  br i1 %229, label %230, label %231

; <label>:230:                                    ; preds = %219
  call void @warn_slowpath_null(i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.1, i32 0, i32 0), i32 377)
  br label %231

; <label>:231:                                    ; preds = %230, %219
  %232 = icmp ne i32 %223, 0
  %233 = xor i1 %232, true
  %234 = xor i1 %233, true
  %235 = zext i1 %234 to i32
  %236 = sext i32 %235 to i64
  %237 = getelementptr inbounds %struct.cfg80211_ops, %struct.cfg80211_ops* %0, i32 0, i32 76
  %238 = load i32 (%struct.wiphy*, %struct.wireless_dev*)*, i32 (%struct.wiphy*, %struct.wireless_dev*)** %237, align 8
  %239 = icmp ne i32 (%struct.wiphy*, %struct.wireless_dev*)* %238, null
  br i1 %239, label %240, label %245

; <label>:240:                                    ; preds = %231
  %241 = getelementptr inbounds %struct.cfg80211_ops, %struct.cfg80211_ops* %0, i32 0, i32 77
  %242 = load void (%struct.wiphy*, %struct.wireless_dev*)*, void (%struct.wiphy*, %struct.wireless_dev*)** %241, align 8
  %243 = icmp ne void (%struct.wiphy*, %struct.wireless_dev*)* %242, null
  %244 = xor i1 %243, true
  br label %245

; <label>:245:                                    ; preds = %240, %231
  %246 = phi i1 [ false, %231 ], [ %244, %240 ]
  %247 = xor i1 %246, true
  %248 = xor i1 %247, true
  %249 = zext i1 %248 to i32
  %250 = icmp ne i32 %249, 0
  %251 = xor i1 %250, true
  %252 = xor i1 %251, true
  %253 = zext i1 %252 to i32
  %254 = sext i32 %253 to i64
  %255 = icmp ne i64 %254, 0
  br i1 %255, label %256, label %257

; <label>:256:                                    ; preds = %245
  call void @warn_slowpath_null(i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.1, i32 0, i32 0), i32 378)
  br label %257

; <label>:257:                                    ; preds = %256, %245
  %258 = icmp ne i32 %249, 0
  %259 = xor i1 %258, true
  %260 = xor i1 %259, true
  %261 = zext i1 %260 to i32
  %262 = sext i32 %261 to i64
  %263 = getelementptr inbounds %struct.cfg80211_ops, %struct.cfg80211_ops* %0, i32 0, i32 11
  %264 = load i32 (%struct.wiphy*, %struct.net_device*, %struct.cfg80211_ap_settings*)*, i32 (%struct.wiphy*, %struct.net_device*, %struct.cfg80211_ap_settings*)** %263, align 8
  %265 = icmp ne i32 (%struct.wiphy*, %struct.net_device*, %struct.cfg80211_ap_settings*)* %264, null
  br i1 %265, label %266, label %271

; <label>:266:                                    ; preds = %257
  %267 = getelementptr inbounds %struct.cfg80211_ops, %struct.cfg80211_ops* %0, i32 0, i32 13
  %268 = load i32 (%struct.wiphy*, %struct.net_device*)*, i32 (%struct.wiphy*, %struct.net_device*)** %267, align 8
  %269 = icmp ne i32 (%struct.wiphy*, %struct.net_device*)* %268, null
  %270 = xor i1 %269, true
  br label %271

; <label>:271:                                    ; preds = %266, %257
  %272 = phi i1 [ false, %257 ], [ %270, %266 ]
  %273 = xor i1 %272, true
  %274 = xor i1 %273, true
  %275 = zext i1 %274 to i32
  %276 = icmp ne i32 %275, 0
  %277 = xor i1 %276, true
  %278 = xor i1 %277, true
  %279 = zext i1 %278 to i32
  %280 = sext i32 %279 to i64
  %281 = icmp ne i64 %280, 0
  br i1 %281, label %282, label %283

; <label>:282:                                    ; preds = %271
  call void @warn_slowpath_null(i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.1, i32 0, i32 0), i32 379)
  br label %283

; <label>:283:                                    ; preds = %282, %271
  %284 = icmp ne i32 %275, 0
  %285 = xor i1 %284, true
  %286 = xor i1 %285, true
  %287 = zext i1 %286 to i32
  %288 = sext i32 %287 to i64
  %289 = getelementptr inbounds %struct.cfg80211_ops, %struct.cfg80211_ops* %0, i32 0, i32 30
  %290 = load i32 (%struct.wiphy*, %struct.net_device*, %struct.ocb_setup*)*, i32 (%struct.wiphy*, %struct.net_device*, %struct.ocb_setup*)** %289, align 8
  %291 = icmp ne i32 (%struct.wiphy*, %struct.net_device*, %struct.ocb_setup*)* %290, null
  br i1 %291, label %292, label %297

; <label>:292:                                    ; preds = %283
  %293 = getelementptr inbounds %struct.cfg80211_ops, %struct.cfg80211_ops* %0, i32 0, i32 31
  %294 = load i32 (%struct.wiphy*, %struct.net_device*)*, i32 (%struct.wiphy*, %struct.net_device*)** %293, align 8
  %295 = icmp ne i32 (%struct.wiphy*, %struct.net_device*)* %294, null
  %296 = xor i1 %295, true
  br label %297

; <label>:297:                                    ; preds = %292, %283
  %298 = phi i1 [ false, %283 ], [ %296, %292 ]
  %299 = xor i1 %298, true
  %300 = xor i1 %299, true
  %301 = zext i1 %300 to i32
  %302 = icmp ne i32 %301, 0
  %303 = xor i1 %302, true
  %304 = xor i1 %303, true
  %305 = zext i1 %304 to i32
  %306 = sext i32 %305 to i64
  %307 = icmp ne i64 %306, 0
  br i1 %307, label %308, label %309

; <label>:308:                                    ; preds = %297
  call void @warn_slowpath_null(i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.1, i32 0, i32 0), i32 380)
  br label %309

; <label>:309:                                    ; preds = %308, %297
  %310 = icmp ne i32 %301, 0
  %311 = xor i1 %310, true
  %312 = xor i1 %311, true
  %313 = zext i1 %312 to i32
  %314 = sext i32 %313 to i64
  %315 = getelementptr inbounds %struct.cfg80211_ops, %struct.cfg80211_ops* %0, i32 0, i32 0
  %316 = load i32 (%struct.wiphy*, %struct.cfg80211_wowlan*)*, i32 (%struct.wiphy*, %struct.cfg80211_wowlan*)** %315, align 8
  %317 = icmp ne i32 (%struct.wiphy*, %struct.cfg80211_wowlan*)* %316, null
  br i1 %317, label %318, label %323

; <label>:318:                                    ; preds = %309
  %319 = getelementptr inbounds %struct.cfg80211_ops, %struct.cfg80211_ops* %0, i32 0, i32 1
  %320 = load i32 (%struct.wiphy*)*, i32 (%struct.wiphy*)** %319, align 8
  %321 = icmp ne i32 (%struct.wiphy*)* %320, null
  %322 = xor i1 %321, true
  br label %323

; <label>:323:                                    ; preds = %318, %309
  %324 = phi i1 [ false, %309 ], [ %322, %318 ]
  %325 = xor i1 %324, true
  %326 = xor i1 %325, true
  %327 = zext i1 %326 to i32
  %328 = icmp ne i32 %327, 0
  %329 = xor i1 %328, true
  %330 = xor i1 %329, true
  %331 = zext i1 %330 to i32
  %332 = sext i32 %331 to i64
  %333 = icmp ne i64 %332, 0
  br i1 %333, label %334, label %335

; <label>:334:                                    ; preds = %323
  call void @warn_slowpath_null(i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.1, i32 0, i32 0), i32 381)
  br label %335

; <label>:335:                                    ; preds = %334, %323
  %336 = icmp ne i32 %327, 0
  %337 = xor i1 %336, true
  %338 = xor i1 %337, true
  %339 = zext i1 %338 to i32
  %340 = sext i32 %339 to i64
  %341 = getelementptr inbounds %struct.cfg80211_ops, %struct.cfg80211_ops* %0, i32 0, i32 68
  %342 = load i32 (%struct.wiphy*, %struct.net_device*, %struct.cfg80211_sched_scan_request*)*, i32 (%struct.wiphy*, %struct.net_device*, %struct.cfg80211_sched_scan_request*)** %341, align 8
  %343 = icmp ne i32 (%struct.wiphy*, %struct.net_device*, %struct.cfg80211_sched_scan_request*)* %342, null
  br i1 %343, label %344, label %349

; <label>:344:                                    ; preds = %335
  %345 = getelementptr inbounds %struct.cfg80211_ops, %struct.cfg80211_ops* %0, i32 0, i32 69
  %346 = load i32 (%struct.wiphy*, %struct.net_device*)*, i32 (%struct.wiphy*, %struct.net_device*)** %345, align 8
  %347 = icmp ne i32 (%struct.wiphy*, %struct.net_device*)* %346, null
  %348 = xor i1 %347, true
  br label %349

; <label>:349:                                    ; preds = %344, %335
  %350 = phi i1 [ false, %335 ], [ %348, %344 ]
  %351 = xor i1 %350, true
  %352 = xor i1 %351, true
  %353 = zext i1 %352 to i32
  %354 = icmp ne i32 %353, 0
  %355 = xor i1 %354, true
  %356 = xor i1 %355, true
  %357 = zext i1 %356 to i32
  %358 = sext i32 %357 to i64
  %359 = icmp ne i64 %358, 0
  br i1 %359, label %360, label %361

; <label>:360:                                    ; preds = %349
  call void @warn_slowpath_null(i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.1, i32 0, i32 0), i32 382)
  br label %361

; <label>:361:                                    ; preds = %360, %349
  %362 = icmp ne i32 %353, 0
  %363 = xor i1 %362, true
  %364 = xor i1 %363, true
  %365 = zext i1 %364 to i32
  %366 = sext i32 %365 to i64
  %367 = getelementptr inbounds %struct.cfg80211_ops, %struct.cfg80211_ops* %0, i32 0, i32 58
  %368 = load i32 (%struct.wiphy*, %struct.wireless_dev*, %struct.ieee80211_channel*, i32, i64*)*, i32 (%struct.wiphy*, %struct.wireless_dev*, %struct.ieee80211_channel*, i32, i64*)** %367, align 8
  %369 = icmp ne i32 (%struct.wiphy*, %struct.wireless_dev*, %struct.ieee80211_channel*, i32, i64*)* %368, null
  br i1 %369, label %370, label %375

; <label>:370:                                    ; preds = %361
  %371 = getelementptr inbounds %struct.cfg80211_ops, %struct.cfg80211_ops* %0, i32 0, i32 59
  %372 = load i32 (%struct.wiphy*, %struct.wireless_dev*, i64)*, i32 (%struct.wiphy*, %struct.wireless_dev*, i64)** %371, align 8
  %373 = icmp ne i32 (%struct.wiphy*, %struct.wireless_dev*, i64)* %372, null
  %374 = xor i1 %373, true
  br label %375

; <label>:375:                                    ; preds = %370, %361
  %376 = phi i1 [ false, %361 ], [ %374, %370 ]
  %377 = xor i1 %376, true
  %378 = xor i1 %377, true
  %379 = zext i1 %378 to i32
  %380 = icmp ne i32 %379, 0
  %381 = xor i1 %380, true
  %382 = xor i1 %381, true
  %383 = zext i1 %382 to i32
  %384 = sext i32 %383 to i64
  %385 = icmp ne i64 %384, 0
  br i1 %385, label %386, label %387

; <label>:386:                                    ; preds = %375
  call void @warn_slowpath_null(i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.1, i32 0, i32 0), i32 383)
  br label %387

; <label>:387:                                    ; preds = %386, %375
  %388 = icmp ne i32 %379, 0
  %389 = xor i1 %388, true
  %390 = xor i1 %389, true
  %391 = zext i1 %390 to i32
  %392 = sext i32 %391 to i64
  %393 = getelementptr inbounds %struct.cfg80211_ops, %struct.cfg80211_ops* %0, i32 0, i32 89
  %394 = load i32 (%struct.wiphy*, %struct.net_device*, i8*, i8, %struct.cfg80211_chan_def*)*, i32 (%struct.wiphy*, %struct.net_device*, i8*, i8, %struct.cfg80211_chan_def*)** %393, align 8
  %395 = icmp ne i32 (%struct.wiphy*, %struct.net_device*, i8*, i8, %struct.cfg80211_chan_def*)* %394, null
  br i1 %395, label %396, label %401

; <label>:396:                                    ; preds = %387
  %397 = getelementptr inbounds %struct.cfg80211_ops, %struct.cfg80211_ops* %0, i32 0, i32 90
  %398 = load void (%struct.wiphy*, %struct.net_device*, i8*)*, void (%struct.wiphy*, %struct.net_device*, i8*)** %397, align 8
  %399 = icmp ne void (%struct.wiphy*, %struct.net_device*, i8*)* %398, null
  %400 = xor i1 %399, true
  br label %401

; <label>:401:                                    ; preds = %396, %387
  %402 = phi i1 [ false, %387 ], [ %400, %396 ]
  %403 = xor i1 %402, true
  %404 = xor i1 %403, true
  %405 = zext i1 %404 to i32
  %406 = icmp ne i32 %405, 0
  %407 = xor i1 %406, true
  %408 = xor i1 %407, true
  %409 = zext i1 %408 to i32
  %410 = sext i32 %409 to i64
  %411 = icmp ne i64 %410, 0
  br i1 %411, label %412, label %413

; <label>:412:                                    ; preds = %401
  call void @warn_slowpath_null(i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.1, i32 0, i32 0), i32 384)
  br label %413

; <label>:413:                                    ; preds = %412, %401
  %414 = icmp ne i32 %405, 0
  %415 = xor i1 %414, true
  %416 = xor i1 %415, true
  %417 = zext i1 %416 to i32
  %418 = sext i32 %417 to i64
  %419 = getelementptr inbounds %struct.cfg80211_ops, %struct.cfg80211_ops* %0, i32 0, i32 87
  %420 = load i32 (%struct.wiphy*, %struct.net_device*, i8, i8*, i8, i16)*, i32 (%struct.wiphy*, %struct.net_device*, i8, i8*, i8, i16)** %419, align 8
  %421 = icmp ne i32 (%struct.wiphy*, %struct.net_device*, i8, i8*, i8, i16)* %420, null
  br i1 %421, label %422, label %427

; <label>:422:                                    ; preds = %413
  %423 = getelementptr inbounds %struct.cfg80211_ops, %struct.cfg80211_ops* %0, i32 0, i32 88
  %424 = load i32 (%struct.wiphy*, %struct.net_device*, i8, i8*)*, i32 (%struct.wiphy*, %struct.net_device*, i8, i8*)** %423, align 8
  %425 = icmp ne i32 (%struct.wiphy*, %struct.net_device*, i8, i8*)* %424, null
  %426 = xor i1 %425, true
  br label %427

; <label>:427:                                    ; preds = %422, %413
  %428 = phi i1 [ false, %413 ], [ %426, %422 ]
  %429 = xor i1 %428, true
  %430 = xor i1 %429, true
  %431 = zext i1 %430 to i32
  %432 = icmp ne i32 %431, 0
  %433 = xor i1 %432, true
  %434 = xor i1 %433, true
  %435 = zext i1 %434 to i32
  %436 = sext i32 %435 to i64
  %437 = icmp ne i64 %436, 0
  br i1 %437, label %438, label %439

; <label>:438:                                    ; preds = %427
  call void @warn_slowpath_null(i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.1, i32 0, i32 0), i32 385)
  br label %439

; <label>:439:                                    ; preds = %438, %427
  %440 = icmp ne i32 %431, 0
  %441 = xor i1 %440, true
  %442 = xor i1 %441, true
  %443 = zext i1 %442 to i32
  %444 = sext i32 %443 to i64
  %445 = sext i32 %1 to i64
  %446 = add i64 1824, %445
  %447 = trunc i64 %446 to i32
  %448 = sext i32 %447 to i64
  %449 = call i8* @kzalloc(i64 %448, i32 20971712)
  %450 = bitcast i8* %449 to %struct.cfg80211_registered_device*
  %451 = icmp ne %struct.cfg80211_registered_device* %450, null
  br i1 %451, label %452, label %700

; <label>:452:                                    ; preds = %439
  %453 = getelementptr inbounds %struct.cfg80211_registered_device, %struct.cfg80211_registered_device* %450, i32 0, i32 0
  store %struct.cfg80211_ops* %0, %struct.cfg80211_ops** %453, align 32
  %454 = getelementptr inbounds %struct.atomic_t, %struct.atomic_t* @wiphy_new_nm.wiphy_counter, i32 0, i32 0
  %455 = call i32 asm sideeffect ".pushsection .smp_locks,\22a\22\0A.balign 4\0A.long 671f - .\0A.popsection\0A671:\0A\09lock; xaddl $0, $1\0A", "=r,=*m,0,*m,~{memory},~{cc},~{dirflag},~{fpsr},~{flags}"(i32* %454, i32 1, i32* %454) #3, !srcloc !2
  %456 = add nsw i32 1, %455
  %457 = getelementptr inbounds %struct.cfg80211_registered_device, %struct.cfg80211_registered_device* %450, i32 0, i32 8
  store i32 %456, i32* %457, align 4
  %458 = getelementptr inbounds %struct.cfg80211_registered_device, %struct.cfg80211_registered_device* %450, i32 0, i32 8
  %459 = load i32, i32* %458, align 4
  %460 = icmp slt i32 %459, 0
  %461 = xor i1 %460, true
  %462 = xor i1 %461, true
  %463 = zext i1 %462 to i32
  %464 = sext i32 %463 to i64
  %465 = icmp ne i64 %464, 0
  br i1 %465, label %466, label %469

; <label>:466:                                    ; preds = %452
  %467 = getelementptr inbounds %struct.atomic_t, %struct.atomic_t* @wiphy_new_nm.wiphy_counter, i32 0, i32 0
  call void asm sideeffect ".pushsection .smp_locks,\22a\22\0A.balign 4\0A.long 671f - .\0A.popsection\0A671:\0A\09lock; decl $0", "=*m,*m,~{dirflag},~{fpsr},~{flags}"(i32* %467, i32* %467) #3, !srcloc !3
  %468 = bitcast %struct.cfg80211_registered_device* %450 to i8*
  call void @kfree(i8* %468)
  br label %700

; <label>:469:                                    ; preds = %452
  %470 = getelementptr inbounds %struct.cfg80211_registered_device, %struct.cfg80211_registered_device* %450, i32 0, i32 8
  %471 = load i32, i32* %470, align 4
  %472 = add nsw i32 %471, -1
  store i32 %472, i32* %470, align 4
  %473 = icmp ne i8* %2, null
  br i1 %473, label %474, label %488

; <label>:474:                                    ; preds = %469
  %475 = getelementptr inbounds i8, i8* %2, i64 0
  %476 = load i8, i8* %475, align 1
  %477 = sext i8 %476 to i32
  %478 = icmp ne i32 %477, 0
  br i1 %478, label %479, label %488

; <label>:479:                                    ; preds = %474
  call void @rtnl_lock()
  %480 = call i32 @cfg80211_dev_check_name(%struct.cfg80211_registered_device* %450, i8* %2)
  %481 = icmp slt i32 %480, 0
  br i1 %481, label %482, label %483

; <label>:482:                                    ; preds = %479
  call void @rtnl_unlock()
  br label %488

; <label>:483:                                    ; preds = %479
  %484 = getelementptr inbounds %struct.cfg80211_registered_device, %struct.cfg80211_registered_device* %450, i32 0, i32 42
  %485 = getelementptr inbounds %struct.wiphy, %struct.wiphy* %484, i32 0, i32 50
  %486 = call i32 (%struct.device*, i8*, ...) @dev_set_name(%struct.device* %485, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.4, i32 0, i32 0), i8* %2)
  call void @rtnl_unlock()
  %487 = icmp ne i32 %486, 0
  br i1 %487, label %488, label %494

; <label>:488:                                    ; preds = %469, %474, %483, %482
  %489 = getelementptr inbounds %struct.cfg80211_registered_device, %struct.cfg80211_registered_device* %450, i32 0, i32 42
  %490 = getelementptr inbounds %struct.wiphy, %struct.wiphy* %489, i32 0, i32 50
  %491 = getelementptr inbounds %struct.cfg80211_registered_device, %struct.cfg80211_registered_device* %450, i32 0, i32 8
  %492 = load i32, i32* %491, align 4
  %493 = call i32 (%struct.device*, i8*, ...) @dev_set_name(%struct.device* %490, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.5, i32 0, i32 0), i32 %492)
  br label %494

; <label>:494:                                    ; preds = %483, %488
  %495 = getelementptr inbounds %struct.cfg80211_registered_device, %struct.cfg80211_registered_device* %450, i32 0, i32 42
  %496 = getelementptr inbounds %struct.wiphy, %struct.wiphy* %495, i32 0, i32 55
  call void @INIT_LIST_HEAD(%struct.list_head* %496)
  %497 = getelementptr inbounds %struct.cfg80211_registered_device, %struct.cfg80211_registered_device* %450, i32 0, i32 13
  call void @INIT_LIST_HEAD(%struct.list_head* %497)
  %498 = getelementptr inbounds %struct.cfg80211_registered_device, %struct.cfg80211_registered_device* %450, i32 0, i32 14
  %499 = getelementptr inbounds %struct.spinlock, %struct.spinlock* %498, i32 0, i32 0
  %500 = bitcast %union.anon.1* %499 to %struct.raw_spinlock*
  %501 = getelementptr inbounds %struct.cfg80211_registered_device, %struct.cfg80211_registered_device* %450, i32 0, i32 14
  %502 = getelementptr inbounds %struct.spinlock, %struct.spinlock* %501, i32 0, i32 0
  %503 = bitcast %union.anon.1* %502 to %struct.raw_spinlock*
  %504 = getelementptr inbounds %struct.raw_spinlock, %struct.raw_spinlock* %4, i32 0, i32 0
  %505 = getelementptr inbounds %struct.qspinlock, %struct.qspinlock* %504, i32 0, i32 0
  %506 = getelementptr inbounds %struct.atomic_t, %struct.atomic_t* %505, i32 0, i32 0
  store i32 0, i32* %506, align 4
  %507 = bitcast %struct.raw_spinlock* %503 to i8*
  %508 = bitcast %struct.raw_spinlock* %4 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %507, i8* %508, i64 4, i32 4, i1 false)
  %509 = getelementptr inbounds %struct.cfg80211_registered_device, %struct.cfg80211_registered_device* %450, i32 0, i32 20
  %510 = getelementptr inbounds %struct.spinlock, %struct.spinlock* %509, i32 0, i32 0
  %511 = bitcast %union.anon.1* %510 to %struct.raw_spinlock*
  %512 = getelementptr inbounds %struct.cfg80211_registered_device, %struct.cfg80211_registered_device* %450, i32 0, i32 20
  %513 = getelementptr inbounds %struct.spinlock, %struct.spinlock* %512, i32 0, i32 0
  %514 = bitcast %union.anon.1* %513 to %struct.raw_spinlock*
  %515 = getelementptr inbounds %struct.raw_spinlock, %struct.raw_spinlock* %5, i32 0, i32 0
  %516 = getelementptr inbounds %struct.qspinlock, %struct.qspinlock* %515, i32 0, i32 0
  %517 = getelementptr inbounds %struct.atomic_t, %struct.atomic_t* %516, i32 0, i32 0
  store i32 0, i32* %517, align 4
  %518 = bitcast %struct.raw_spinlock* %514 to i8*
  %519 = bitcast %struct.raw_spinlock* %5 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %518, i8* %519, i64 4, i32 4, i1 false)
  %520 = getelementptr inbounds %struct.cfg80211_registered_device, %struct.cfg80211_registered_device* %450, i32 0, i32 21
  call void @INIT_LIST_HEAD(%struct.list_head* %520)
  %521 = getelementptr inbounds %struct.cfg80211_registered_device, %struct.cfg80211_registered_device* %450, i32 0, i32 29
  call void @__init_work(%struct.work_struct* %521, i32 0)
  %522 = getelementptr inbounds %struct.cfg80211_registered_device, %struct.cfg80211_registered_device* %450, i32 0, i32 29
  %523 = getelementptr inbounds %struct.work_struct, %struct.work_struct* %522, i32 0, i32 0
  %524 = getelementptr inbounds %struct.atomic64_t, %struct.atomic64_t* %6, i32 0, i32 0
  store i64 68719476704, i64* %524, align 8
  %525 = bitcast %struct.atomic64_t* %523 to i8*
  %526 = bitcast %struct.atomic64_t* %6 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %525, i8* %526, i64 8, i32 8, i1 false)
  %527 = getelementptr inbounds %struct.cfg80211_registered_device, %struct.cfg80211_registered_device* %450, i32 0, i32 29
  %528 = getelementptr inbounds %struct.work_struct, %struct.work_struct* %527, i32 0, i32 1
  call void @INIT_LIST_HEAD(%struct.list_head* %528)
  %529 = getelementptr inbounds %struct.cfg80211_registered_device, %struct.cfg80211_registered_device* %450, i32 0, i32 29
  %530 = getelementptr inbounds %struct.work_struct, %struct.work_struct* %529, i32 0, i32 2
  store void (%struct.work_struct*)* @__cfg80211_scan_done, void (%struct.work_struct*)** %530, align 8
  %531 = getelementptr inbounds %struct.cfg80211_registered_device, %struct.cfg80211_registered_device* %450, i32 0, i32 30
  call void @__init_work(%struct.work_struct* %531, i32 0)
  %532 = getelementptr inbounds %struct.cfg80211_registered_device, %struct.cfg80211_registered_device* %450, i32 0, i32 30
  %533 = getelementptr inbounds %struct.work_struct, %struct.work_struct* %532, i32 0, i32 0
  %534 = getelementptr inbounds %struct.atomic64_t, %struct.atomic64_t* %7, i32 0, i32 0
  store i64 68719476704, i64* %534, align 8
  %535 = bitcast %struct.atomic64_t* %533 to i8*
  %536 = bitcast %struct.atomic64_t* %7 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %535, i8* %536, i64 8, i32 8, i1 false)
  %537 = getelementptr inbounds %struct.cfg80211_registered_device, %struct.cfg80211_registered_device* %450, i32 0, i32 30
  %538 = getelementptr inbounds %struct.work_struct, %struct.work_struct* %537, i32 0, i32 1
  call void @INIT_LIST_HEAD(%struct.list_head* %538)
  %539 = getelementptr inbounds %struct.cfg80211_registered_device, %struct.cfg80211_registered_device* %450, i32 0, i32 30
  %540 = getelementptr inbounds %struct.work_struct, %struct.work_struct* %539, i32 0, i32 2
  store void (%struct.work_struct*)* @__cfg80211_sched_scan_results, void (%struct.work_struct*)** %540, align 8
  %541 = getelementptr inbounds %struct.cfg80211_registered_device, %struct.cfg80211_registered_device* %450, i32 0, i32 15
  call void @INIT_LIST_HEAD(%struct.list_head* %541)
  %542 = getelementptr inbounds %struct.cfg80211_registered_device, %struct.cfg80211_registered_device* %450, i32 0, i32 16
  %543 = getelementptr inbounds %struct.spinlock, %struct.spinlock* %542, i32 0, i32 0
  %544 = bitcast %union.anon.1* %543 to %struct.raw_spinlock*
  %545 = getelementptr inbounds %struct.cfg80211_registered_device, %struct.cfg80211_registered_device* %450, i32 0, i32 16
  %546 = getelementptr inbounds %struct.spinlock, %struct.spinlock* %545, i32 0, i32 0
  %547 = bitcast %union.anon.1* %546 to %struct.raw_spinlock*
  %548 = getelementptr inbounds %struct.raw_spinlock, %struct.raw_spinlock* %8, i32 0, i32 0
  %549 = getelementptr inbounds %struct.qspinlock, %struct.qspinlock* %548, i32 0, i32 0
  %550 = getelementptr inbounds %struct.atomic_t, %struct.atomic_t* %549, i32 0, i32 0
  store i32 0, i32* %550, align 4
  %551 = bitcast %struct.raw_spinlock* %547 to i8*
  %552 = bitcast %struct.raw_spinlock* %8 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %551, i8* %552, i64 4, i32 4, i1 false)
  %553 = getelementptr inbounds %struct.cfg80211_registered_device, %struct.cfg80211_registered_device* %450, i32 0, i32 17
  call void @__init_work(%struct.work_struct* %553, i32 0)
  %554 = getelementptr inbounds %struct.cfg80211_registered_device, %struct.cfg80211_registered_device* %450, i32 0, i32 17
  %555 = getelementptr inbounds %struct.work_struct, %struct.work_struct* %554, i32 0, i32 0
  %556 = getelementptr inbounds %struct.atomic64_t, %struct.atomic64_t* %9, i32 0, i32 0
  store i64 68719476704, i64* %556, align 8
  %557 = bitcast %struct.atomic64_t* %555 to i8*
  %558 = bitcast %struct.atomic64_t* %9 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %557, i8* %558, i64 8, i32 8, i1 false)
  %559 = getelementptr inbounds %struct.cfg80211_registered_device, %struct.cfg80211_registered_device* %450, i32 0, i32 17
  %560 = getelementptr inbounds %struct.work_struct, %struct.work_struct* %559, i32 0, i32 1
  call void @INIT_LIST_HEAD(%struct.list_head* %560)
  %561 = getelementptr inbounds %struct.cfg80211_registered_device, %struct.cfg80211_registered_device* %450, i32 0, i32 17
  %562 = getelementptr inbounds %struct.work_struct, %struct.work_struct* %561, i32 0, i32 2
  store void (%struct.work_struct*)* @cfg80211_mlme_unreg_wk, void (%struct.work_struct*)** %562, align 8
  %563 = getelementptr inbounds %struct.cfg80211_registered_device, %struct.cfg80211_registered_device* %450, i32 0, i32 34
  %564 = getelementptr inbounds %struct.delayed_work, %struct.delayed_work* %563, i32 0, i32 0
  call void @__init_work(%struct.work_struct* %564, i32 0)
  %565 = getelementptr inbounds %struct.cfg80211_registered_device, %struct.cfg80211_registered_device* %450, i32 0, i32 34
  %566 = getelementptr inbounds %struct.delayed_work, %struct.delayed_work* %565, i32 0, i32 0
  %567 = getelementptr inbounds %struct.work_struct, %struct.work_struct* %566, i32 0, i32 0
  %568 = getelementptr inbounds %struct.atomic64_t, %struct.atomic64_t* %10, i32 0, i32 0
  store i64 68719476704, i64* %568, align 8
  %569 = bitcast %struct.atomic64_t* %567 to i8*
  %570 = bitcast %struct.atomic64_t* %10 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %569, i8* %570, i64 8, i32 8, i1 false)
  %571 = getelementptr inbounds %struct.cfg80211_registered_device, %struct.cfg80211_registered_device* %450, i32 0, i32 34
  %572 = getelementptr inbounds %struct.delayed_work, %struct.delayed_work* %571, i32 0, i32 0
  %573 = getelementptr inbounds %struct.work_struct, %struct.work_struct* %572, i32 0, i32 1
  call void @INIT_LIST_HEAD(%struct.list_head* %573)
  %574 = getelementptr inbounds %struct.cfg80211_registered_device, %struct.cfg80211_registered_device* %450, i32 0, i32 34
  %575 = getelementptr inbounds %struct.delayed_work, %struct.delayed_work* %574, i32 0, i32 0
  %576 = getelementptr inbounds %struct.work_struct, %struct.work_struct* %575, i32 0, i32 2
  store void (%struct.work_struct*)* @cfg80211_dfs_channels_update_work, void (%struct.work_struct*)** %576, align 8
  %577 = getelementptr inbounds %struct.cfg80211_registered_device, %struct.cfg80211_registered_device* %450, i32 0, i32 34
  %578 = getelementptr inbounds %struct.delayed_work, %struct.delayed_work* %577, i32 0, i32 1
  call void @init_timer_key(%struct.timer_list* %578, i32 2097152, i8* null, %struct.lock_class_key* null)
  %579 = getelementptr inbounds %struct.cfg80211_registered_device, %struct.cfg80211_registered_device* %450, i32 0, i32 34
  %580 = getelementptr inbounds %struct.delayed_work, %struct.delayed_work* %579, i32 0, i32 1
  %581 = getelementptr inbounds %struct.timer_list, %struct.timer_list* %580, i32 0, i32 2
  store void (i64)* @delayed_work_timer_fn, void (i64)** %581, align 8
  %582 = getelementptr inbounds %struct.cfg80211_registered_device, %struct.cfg80211_registered_device* %450, i32 0, i32 34
  %583 = ptrtoint %struct.delayed_work* %582 to i64
  %584 = getelementptr inbounds %struct.cfg80211_registered_device, %struct.cfg80211_registered_device* %450, i32 0, i32 34
  %585 = getelementptr inbounds %struct.delayed_work, %struct.delayed_work* %584, i32 0, i32 1
  %586 = getelementptr inbounds %struct.timer_list, %struct.timer_list* %585, i32 0, i32 3
  store i64 %583, i64* %586, align 32
  %587 = getelementptr inbounds %struct.cfg80211_registered_device, %struct.cfg80211_registered_device* %450, i32 0, i32 42
  %588 = getelementptr inbounds %struct.wiphy, %struct.wiphy* %587, i32 0, i32 50
  call void @device_initialize(%struct.device* %588)
  %589 = getelementptr inbounds %struct.cfg80211_registered_device, %struct.cfg80211_registered_device* %450, i32 0, i32 42
  %590 = getelementptr inbounds %struct.wiphy, %struct.wiphy* %589, i32 0, i32 50
  %591 = getelementptr inbounds %struct.device, %struct.device* %590, i32 0, i32 31
  store %struct.class* @ieee80211_class, %struct.class** %591, align 8
  %592 = bitcast %struct.cfg80211_registered_device* %450 to i8*
  %593 = getelementptr inbounds %struct.cfg80211_registered_device, %struct.cfg80211_registered_device* %450, i32 0, i32 42
  %594 = getelementptr inbounds %struct.wiphy, %struct.wiphy* %593, i32 0, i32 50
  %595 = getelementptr inbounds %struct.device, %struct.device* %594, i32 0, i32 8
  store i8* %592, i8** %595, align 16
  %596 = getelementptr inbounds %struct.cfg80211_registered_device, %struct.cfg80211_registered_device* %450, i32 0, i32 42
  %597 = getelementptr inbounds %struct.wiphy, %struct.wiphy* %596, i32 0, i32 50
  call void @device_enable_async_suspend(%struct.device* %597)
  %598 = getelementptr inbounds %struct.cfg80211_registered_device, %struct.cfg80211_registered_device* %450, i32 0, i32 38
  call void @INIT_LIST_HEAD(%struct.list_head* %598)
  %599 = getelementptr inbounds %struct.cfg80211_registered_device, %struct.cfg80211_registered_device* %450, i32 0, i32 37
  %600 = getelementptr inbounds %struct.spinlock, %struct.spinlock* %599, i32 0, i32 0
  %601 = bitcast %union.anon.1* %600 to %struct.raw_spinlock*
  %602 = getelementptr inbounds %struct.cfg80211_registered_device, %struct.cfg80211_registered_device* %450, i32 0, i32 37
  %603 = getelementptr inbounds %struct.spinlock, %struct.spinlock* %602, i32 0, i32 0
  %604 = bitcast %union.anon.1* %603 to %struct.raw_spinlock*
  %605 = getelementptr inbounds %struct.raw_spinlock, %struct.raw_spinlock* %11, i32 0, i32 0
  %606 = getelementptr inbounds %struct.qspinlock, %struct.qspinlock* %605, i32 0, i32 0
  %607 = getelementptr inbounds %struct.atomic_t, %struct.atomic_t* %606, i32 0, i32 0
  store i32 0, i32* %607, align 4
  %608 = bitcast %struct.raw_spinlock* %604 to i8*
  %609 = bitcast %struct.raw_spinlock* %11 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %608, i8* %609, i64 4, i32 4, i1 false)
  %610 = getelementptr inbounds %struct.cfg80211_registered_device, %struct.cfg80211_registered_device* %450, i32 0, i32 39
  call void @__init_work(%struct.work_struct* %610, i32 0)
  %611 = getelementptr inbounds %struct.cfg80211_registered_device, %struct.cfg80211_registered_device* %450, i32 0, i32 39
  %612 = getelementptr inbounds %struct.work_struct, %struct.work_struct* %611, i32 0, i32 0
  %613 = getelementptr inbounds %struct.atomic64_t, %struct.atomic64_t* %12, i32 0, i32 0
  store i64 68719476704, i64* %613, align 8
  %614 = bitcast %struct.atomic64_t* %612 to i8*
  %615 = bitcast %struct.atomic64_t* %12 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %614, i8* %615, i64 8, i32 8, i1 false)
  %616 = getelementptr inbounds %struct.cfg80211_registered_device, %struct.cfg80211_registered_device* %450, i32 0, i32 39
  %617 = getelementptr inbounds %struct.work_struct, %struct.work_struct* %616, i32 0, i32 1
  call void @INIT_LIST_HEAD(%struct.list_head* %617)
  %618 = getelementptr inbounds %struct.cfg80211_registered_device, %struct.cfg80211_registered_device* %450, i32 0, i32 39
  %619 = getelementptr inbounds %struct.work_struct, %struct.work_struct* %618, i32 0, i32 2
  store void (%struct.work_struct*)* @cfg80211_destroy_iface_wk, void (%struct.work_struct*)** %619, align 8
  %620 = getelementptr inbounds %struct.cfg80211_registered_device, %struct.cfg80211_registered_device* %450, i32 0, i32 40
  call void @__init_work(%struct.work_struct* %620, i32 0)
  %621 = getelementptr inbounds %struct.cfg80211_registered_device, %struct.cfg80211_registered_device* %450, i32 0, i32 40
  %622 = getelementptr inbounds %struct.work_struct, %struct.work_struct* %621, i32 0, i32 0
  %623 = getelementptr inbounds %struct.atomic64_t, %struct.atomic64_t* %13, i32 0, i32 0
  store i64 68719476704, i64* %623, align 8
  %624 = bitcast %struct.atomic64_t* %622 to i8*
  %625 = bitcast %struct.atomic64_t* %13 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %624, i8* %625, i64 8, i32 8, i1 false)
  %626 = getelementptr inbounds %struct.cfg80211_registered_device, %struct.cfg80211_registered_device* %450, i32 0, i32 40
  %627 = getelementptr inbounds %struct.work_struct, %struct.work_struct* %626, i32 0, i32 1
  call void @INIT_LIST_HEAD(%struct.list_head* %627)
  %628 = getelementptr inbounds %struct.cfg80211_registered_device, %struct.cfg80211_registered_device* %450, i32 0, i32 40
  %629 = getelementptr inbounds %struct.work_struct, %struct.work_struct* %628, i32 0, i32 2
  store void (%struct.work_struct*)* @cfg80211_sched_scan_stop_wk, void (%struct.work_struct*)** %629, align 8
  %630 = getelementptr inbounds %struct.cfg80211_registered_device, %struct.cfg80211_registered_device* %450, i32 0, i32 42
  %631 = getelementptr inbounds %struct.wiphy, %struct.wiphy* %630, i32 0, i32 10
  %632 = load i32, i32* %631, align 4
  %633 = or i32 %632, 16
  store i32 %633, i32* %631, align 4
  %634 = getelementptr inbounds %struct.cfg80211_registered_device, %struct.cfg80211_registered_device* %450, i32 0, i32 42
  call void @wiphy_net_set(%struct.wiphy* %634, %struct.net* @init_net)
  %635 = getelementptr inbounds %struct.cfg80211_registered_device, %struct.cfg80211_registered_device* %450, i32 0, i32 2
  %636 = getelementptr inbounds %struct.rfkill_ops, %struct.rfkill_ops* %635, i32 0, i32 2
  store i32 (i8*, i1)* @cfg80211_rfkill_set_block, i32 (i8*, i1)** %636, align 8
  %637 = getelementptr inbounds %struct.cfg80211_registered_device, %struct.cfg80211_registered_device* %450, i32 0, i32 42
  %638 = getelementptr inbounds %struct.wiphy, %struct.wiphy* %637, i32 0, i32 50
  %639 = call i8* @dev_name(%struct.device* %638)
  %640 = getelementptr inbounds %struct.cfg80211_registered_device, %struct.cfg80211_registered_device* %450, i32 0, i32 42
  %641 = getelementptr inbounds %struct.wiphy, %struct.wiphy* %640, i32 0, i32 50
  %642 = getelementptr inbounds %struct.cfg80211_registered_device, %struct.cfg80211_registered_device* %450, i32 0, i32 2
  %643 = bitcast %struct.cfg80211_registered_device* %450 to i8*
  %644 = call %struct.rfkill* @rfkill_alloc(i8* %639, %struct.device* %641, i32 1, %struct.rfkill_ops* %642, i8* %643)
  %645 = getelementptr inbounds %struct.cfg80211_registered_device, %struct.cfg80211_registered_device* %450, i32 0, i32 3
  store %struct.rfkill* %644, %struct.rfkill** %645, align 16
  %646 = getelementptr inbounds %struct.cfg80211_registered_device, %struct.cfg80211_registered_device* %450, i32 0, i32 3
  %647 = load %struct.rfkill*, %struct.rfkill** %646, align 16
  %648 = icmp ne %struct.rfkill* %647, null
  br i1 %648, label %651, label %649

; <label>:649:                                    ; preds = %494
  %650 = bitcast %struct.cfg80211_registered_device* %450 to i8*
  call void @kfree(i8* %650)
  br label %700

; <label>:651:                                    ; preds = %494
  %652 = getelementptr inbounds %struct.cfg80211_registered_device, %struct.cfg80211_registered_device* %450, i32 0, i32 4
  call void @__init_work(%struct.work_struct* %652, i32 0)
  %653 = getelementptr inbounds %struct.cfg80211_registered_device, %struct.cfg80211_registered_device* %450, i32 0, i32 4
  %654 = getelementptr inbounds %struct.work_struct, %struct.work_struct* %653, i32 0, i32 0
  %655 = getelementptr inbounds %struct.atomic64_t, %struct.atomic64_t* %14, i32 0, i32 0
  store i64 68719476704, i64* %655, align 8
  %656 = bitcast %struct.atomic64_t* %654 to i8*
  %657 = bitcast %struct.atomic64_t* %14 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %656, i8* %657, i64 8, i32 8, i1 false)
  %658 = getelementptr inbounds %struct.cfg80211_registered_device, %struct.cfg80211_registered_device* %450, i32 0, i32 4
  %659 = getelementptr inbounds %struct.work_struct, %struct.work_struct* %658, i32 0, i32 1
  call void @INIT_LIST_HEAD(%struct.list_head* %659)
  %660 = getelementptr inbounds %struct.cfg80211_registered_device, %struct.cfg80211_registered_device* %450, i32 0, i32 4
  %661 = getelementptr inbounds %struct.work_struct, %struct.work_struct* %660, i32 0, i32 2
  store void (%struct.work_struct*)* @cfg80211_rfkill_sync_work, void (%struct.work_struct*)** %661, align 8
  %662 = getelementptr inbounds %struct.cfg80211_registered_device, %struct.cfg80211_registered_device* %450, i32 0, i32 32
  call void @__init_work(%struct.work_struct* %662, i32 0)
  %663 = getelementptr inbounds %struct.cfg80211_registered_device, %struct.cfg80211_registered_device* %450, i32 0, i32 32
  %664 = getelementptr inbounds %struct.work_struct, %struct.work_struct* %663, i32 0, i32 0
  %665 = getelementptr inbounds %struct.atomic64_t, %struct.atomic64_t* %15, i32 0, i32 0
  store i64 68719476704, i64* %665, align 8
  %666 = bitcast %struct.atomic64_t* %664 to i8*
  %667 = bitcast %struct.atomic64_t* %15 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %666, i8* %667, i64 8, i32 8, i1 false)
  %668 = getelementptr inbounds %struct.cfg80211_registered_device, %struct.cfg80211_registered_device* %450, i32 0, i32 32
  %669 = getelementptr inbounds %struct.work_struct, %struct.work_struct* %668, i32 0, i32 1
  call void @INIT_LIST_HEAD(%struct.list_head* %669)
  %670 = getelementptr inbounds %struct.cfg80211_registered_device, %struct.cfg80211_registered_device* %450, i32 0, i32 32
  %671 = getelementptr inbounds %struct.work_struct, %struct.work_struct* %670, i32 0, i32 2
  store void (%struct.work_struct*)* @cfg80211_conn_work, void (%struct.work_struct*)** %671, align 8
  %672 = getelementptr inbounds %struct.cfg80211_registered_device, %struct.cfg80211_registered_device* %450, i32 0, i32 33
  call void @__init_work(%struct.work_struct* %672, i32 0)
  %673 = getelementptr inbounds %struct.cfg80211_registered_device, %struct.cfg80211_registered_device* %450, i32 0, i32 33
  %674 = getelementptr inbounds %struct.work_struct, %struct.work_struct* %673, i32 0, i32 0
  %675 = getelementptr inbounds %struct.atomic64_t, %struct.atomic64_t* %16, i32 0, i32 0
  store i64 68719476704, i64* %675, align 8
  %676 = bitcast %struct.atomic64_t* %674 to i8*
  %677 = bitcast %struct.atomic64_t* %16 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %676, i8* %677, i64 8, i32 8, i1 false)
  %678 = getelementptr inbounds %struct.cfg80211_registered_device, %struct.cfg80211_registered_device* %450, i32 0, i32 33
  %679 = getelementptr inbounds %struct.work_struct, %struct.work_struct* %678, i32 0, i32 1
  call void @INIT_LIST_HEAD(%struct.list_head* %679)
  %680 = getelementptr inbounds %struct.cfg80211_registered_device, %struct.cfg80211_registered_device* %450, i32 0, i32 33
  %681 = getelementptr inbounds %struct.work_struct, %struct.work_struct* %680, i32 0, i32 2
  store void (%struct.work_struct*)* @cfg80211_event_work, void (%struct.work_struct*)** %681, align 8
  %682 = getelementptr inbounds %struct.cfg80211_registered_device, %struct.cfg80211_registered_device* %450, i32 0, i32 12
  call void @__init_waitqueue_head(%struct.__wait_queue_head* %682, i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.6, i32 0, i32 0), %struct.lock_class_key* @wiphy_new_nm.__key)
  %683 = getelementptr inbounds %struct.cfg80211_registered_device, %struct.cfg80211_registered_device* %450, i32 0, i32 42
  %684 = getelementptr inbounds %struct.wiphy, %struct.wiphy* %683, i32 0, i32 27
  store i8 7, i8* %684, align 16
  %685 = getelementptr inbounds %struct.cfg80211_registered_device, %struct.cfg80211_registered_device* %450, i32 0, i32 42
  %686 = getelementptr inbounds %struct.wiphy, %struct.wiphy* %685, i32 0, i32 28
  store i8 4, i8* %686, align 1
  %687 = getelementptr inbounds %struct.cfg80211_registered_device, %struct.cfg80211_registered_device* %450, i32 0, i32 42
  %688 = getelementptr inbounds %struct.wiphy, %struct.wiphy* %687, i32 0, i32 29
  store i32 -1, i32* %688, align 4
  %689 = getelementptr inbounds %struct.cfg80211_registered_device, %struct.cfg80211_registered_device* %450, i32 0, i32 42
  %690 = getelementptr inbounds %struct.wiphy, %struct.wiphy* %689, i32 0, i32 30
  store i32 -1, i32* %690, align 8
  %691 = getelementptr inbounds %struct.cfg80211_registered_device, %struct.cfg80211_registered_device* %450, i32 0, i32 42
  %692 = getelementptr inbounds %struct.wiphy, %struct.wiphy* %691, i32 0, i32 31
  store i8 0, i8* %692, align 4
  %693 = getelementptr inbounds %struct.cfg80211_registered_device, %struct.cfg80211_registered_device* %450, i32 0, i32 42
  %694 = getelementptr inbounds %struct.wiphy, %struct.wiphy* %693, i32 0, i32 63
  store i8 1, i8* %694, align 2
  %695 = getelementptr inbounds %struct.cfg80211_registered_device, %struct.cfg80211_registered_device* %450, i32 0, i32 42
  %696 = getelementptr inbounds %struct.wiphy, %struct.wiphy* %695, i32 0, i32 22
  store i32 1, i32* %696, align 8
  %697 = getelementptr inbounds %struct.cfg80211_registered_device, %struct.cfg80211_registered_device* %450, i32 0, i32 42
  %698 = getelementptr inbounds %struct.wiphy, %struct.wiphy* %697, i32 0, i32 23
  store i32 -1, i32* %698, align 4
  %699 = getelementptr inbounds %struct.cfg80211_registered_device, %struct.cfg80211_registered_device* %450, i32 0, i32 42
  br label %700

; <label>:700:                                    ; preds = %439, %651, %649, %466
  %.0 = phi %struct.wiphy* [ null, %466 ], [ %699, %651 ], [ null, %649 ], [ null, %439 ]
  ret %struct.wiphy* %.0
}

; Function Attrs: noinline nounwind uwtable
define internal i8* @kzalloc(i64, i32) #0 {
  %3 = or i32 %1, 32768
  %4 = call noalias i8* @__kmalloc(i64 %0, i32 %3) #3
  ret i8* %4
}

declare void @rtnl_lock() #1

declare void @rtnl_unlock() #1

declare i32 @dev_set_name(%struct.device*, i8*, ...) #1

; Function Attrs: noinline nounwind uwtable
define internal void @INIT_LIST_HEAD(%struct.list_head*) #0 {
  %2 = alloca %union.anon.94, align 8
  %3 = bitcast %union.anon.94* %2 to %struct.list_head**
  store %struct.list_head* %0, %struct.list_head** %3, align 8
  %4 = getelementptr inbounds %struct.list_head, %struct.list_head* %0, i32 0, i32 0
  %5 = bitcast %struct.list_head** %4 to i8*
  %6 = bitcast %union.anon.94* %2 to [1 x i8]*
  %7 = getelementptr inbounds [1 x i8], [1 x i8]* %6, i32 0, i32 0
  %8 = bitcast i8* %7 to i64*
  %9 = load i64, i64* %8, align 8
  %10 = bitcast i8* %5 to i64*
  store volatile i64 %9, i64* %10, align 8
  %11 = bitcast %union.anon.94* %2 to %struct.list_head**
  %12 = load %struct.list_head*, %struct.list_head** %11, align 8
  %13 = getelementptr inbounds %struct.list_head, %struct.list_head* %0, i32 0, i32 1
  store %struct.list_head* %0, %struct.list_head** %13, align 8
  ret void
}

; Function Attrs: argmemonly nounwind
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* nocapture writeonly, i8* nocapture readonly, i64, i32, i1) #2

; Function Attrs: noinline nounwind uwtable
define internal void @__init_work(%struct.work_struct*, i32) #0 {
  ret void
}

declare void @__cfg80211_scan_done(%struct.work_struct*) #1

declare void @__cfg80211_sched_scan_results(%struct.work_struct*) #1

declare void @cfg80211_mlme_unreg_wk(%struct.work_struct*) #1

declare void @cfg80211_dfs_channels_update_work(%struct.work_struct*) #1

declare void @init_timer_key(%struct.timer_list*, i32, i8*, %struct.lock_class_key*) #1

declare void @delayed_work_timer_fn(i64) #1

declare void @device_initialize(%struct.device*) #1

; Function Attrs: noinline nounwind uwtable
define internal void @device_enable_async_suspend(%struct.device*) #0 {
  %2 = getelementptr inbounds %struct.device, %struct.device* %0, i32 0, i32 11
  %3 = getelementptr inbounds %struct.dev_pm_info, %struct.dev_pm_info* %2, i32 0, i32 1
  %4 = load i16, i16* %3, align 4
  %5 = lshr i16 %4, 3
  %6 = and i16 %5, 1
  %7 = trunc i16 %6 to i1
  br i1 %7, label %14, label %8

; <label>:8:                                      ; preds = %1
  %9 = getelementptr inbounds %struct.device, %struct.device* %0, i32 0, i32 11
  %10 = getelementptr inbounds %struct.dev_pm_info, %struct.dev_pm_info* %9, i32 0, i32 1
  %11 = load i16, i16* %10, align 4
  %12 = and i16 %11, -3
  %13 = or i16 %12, 2
  store i16 %13, i16* %10, align 4
  br label %14

; <label>:14:                                     ; preds = %8, %1
  ret void
}

; Function Attrs: noinline nounwind uwtable
define internal void @cfg80211_destroy_iface_wk(%struct.work_struct*) #0 {
  %2 = bitcast %struct.work_struct* %0 to i8*
  %3 = getelementptr inbounds i8, i8* %2, i64 -584
  %4 = bitcast i8* %3 to %struct.cfg80211_registered_device*
  call void @rtnl_lock()
  call void @cfg80211_destroy_ifaces(%struct.cfg80211_registered_device* %4)
  call void @rtnl_unlock()
  ret void
}

; Function Attrs: noinline nounwind uwtable
define internal void @cfg80211_sched_scan_stop_wk(%struct.work_struct*) #0 {
  %2 = bitcast %struct.work_struct* %0 to i8*
  %3 = getelementptr inbounds i8, i8* %2, i64 -616
  %4 = bitcast i8* %3 to %struct.cfg80211_registered_device*
  call void @rtnl_lock()
  %5 = call i32 @__cfg80211_stop_sched_scan(%struct.cfg80211_registered_device* %4, i1 zeroext false)
  call void @rtnl_unlock()
  ret void
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @cfg80211_rfkill_set_block(i8*, i1 zeroext) #0 {
  %3 = zext i1 %1 to i8
  %4 = bitcast i8* %0 to %struct.cfg80211_registered_device*
  %5 = trunc i8 %3 to i1
  br i1 %5, label %6, label %8

; <label>:6:                                      ; preds = %2
  call void @rtnl_lock()
  %7 = getelementptr inbounds %struct.cfg80211_registered_device, %struct.cfg80211_registered_device* %4, i32 0, i32 42
  call void @cfg80211_shutdown_all_interfaces(%struct.wiphy* %7)
  call void @rtnl_unlock()
  br label %8

; <label>:8:                                      ; preds = %2, %6
  ret i32 0
}

declare %struct.rfkill* @rfkill_alloc(i8*, %struct.device*, i32, %struct.rfkill_ops*, i8*) #1

; Function Attrs: noinline nounwind uwtable
define internal void @cfg80211_rfkill_sync_work(%struct.work_struct*) #0 {
  %2 = bitcast %struct.work_struct* %0 to i8*
  %3 = getelementptr inbounds i8, i8* %2, i64 -56
  %4 = bitcast i8* %3 to %struct.cfg80211_registered_device*
  %5 = bitcast %struct.cfg80211_registered_device* %4 to i8*
  %6 = getelementptr inbounds %struct.cfg80211_registered_device, %struct.cfg80211_registered_device* %4, i32 0, i32 3
  %7 = load %struct.rfkill*, %struct.rfkill** %6, align 16
  %8 = call zeroext i1 @rfkill_blocked(%struct.rfkill* %7)
  %9 = call i32 @cfg80211_rfkill_set_block(i8* %5, i1 zeroext %8)
  ret void
}

declare void @cfg80211_conn_work(%struct.work_struct*) #1

; Function Attrs: noinline nounwind uwtable
define internal void @cfg80211_event_work(%struct.work_struct*) #0 {
  %2 = bitcast %struct.work_struct* %0 to i8*
  %3 = getelementptr inbounds i8, i8* %2, i64 -416
  %4 = bitcast i8* %3 to %struct.cfg80211_registered_device*
  call void @rtnl_lock()
  call void @cfg80211_process_rdev_events(%struct.cfg80211_registered_device* %4)
  call void @rtnl_unlock()
  ret void
}

declare void @__init_waitqueue_head(%struct.__wait_queue_head*, i8*, %struct.lock_class_key*) #1

; Function Attrs: noinline nounwind uwtable
define i32 @wiphy_register(%struct.wiphy*) #0 {
  %2 = alloca %struct.regulatory_request, align 8
  %3 = call %struct.cfg80211_registered_device* @wiphy_to_rdev(%struct.wiphy* %0)
  %4 = getelementptr inbounds %struct.wiphy, %struct.wiphy* %0, i32 0, i32 8
  %5 = load i16, i16* %4, align 16
  %6 = getelementptr inbounds %struct.wiphy, %struct.wiphy* %0, i32 0, i32 34
  %7 = load %struct.wiphy_wowlan_support*, %struct.wiphy_wowlan_support** %6, align 8
  %8 = icmp ne %struct.wiphy_wowlan_support* %7, null
  br i1 %8, label %9, label %24

; <label>:9:                                      ; preds = %1
  %10 = getelementptr inbounds %struct.wiphy, %struct.wiphy* %0, i32 0, i32 34
  %11 = load %struct.wiphy_wowlan_support*, %struct.wiphy_wowlan_support** %10, align 8
  %12 = getelementptr inbounds %struct.wiphy_wowlan_support, %struct.wiphy_wowlan_support* %11, i32 0, i32 0
  %13 = load i32, i32* %12, align 8
  %14 = and i32 %13, 16
  %15 = icmp ne i32 %14, 0
  br i1 %15, label %16, label %24

; <label>:16:                                     ; preds = %9
  %17 = getelementptr inbounds %struct.wiphy, %struct.wiphy* %0, i32 0, i32 34
  %18 = load %struct.wiphy_wowlan_support*, %struct.wiphy_wowlan_support** %17, align 8
  %19 = getelementptr inbounds %struct.wiphy_wowlan_support, %struct.wiphy_wowlan_support* %18, i32 0, i32 0
  %20 = load i32, i32* %19, align 8
  %21 = and i32 %20, 8
  %22 = icmp ne i32 %21, 0
  %23 = xor i1 %22, true
  br label %24

; <label>:24:                                     ; preds = %16, %9, %1
  %25 = phi i1 [ false, %9 ], [ false, %1 ], [ %23, %16 ]
  %26 = xor i1 %25, true
  %27 = xor i1 %26, true
  %28 = zext i1 %27 to i32
  %29 = icmp ne i32 %28, 0
  %30 = xor i1 %29, true
  %31 = xor i1 %30, true
  %32 = zext i1 %31 to i32
  %33 = sext i32 %32 to i64
  %34 = icmp ne i64 %33, 0
  br i1 %34, label %35, label %36

; <label>:35:                                     ; preds = %24
  call void @warn_slowpath_null(i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.1, i32 0, i32 0), i32 615)
  br label %36

; <label>:36:                                     ; preds = %35, %24
  %37 = icmp ne i32 %28, 0
  %38 = xor i1 %37, true
  %39 = xor i1 %38, true
  %40 = zext i1 %39 to i32
  %41 = sext i32 %40 to i64
  %42 = icmp ne i64 %41, 0
  br i1 %42, label %863, label %43

; <label>:43:                                     ; preds = %36
  %44 = getelementptr inbounds %struct.wiphy, %struct.wiphy* %0, i32 0, i32 34
  %45 = load %struct.wiphy_wowlan_support*, %struct.wiphy_wowlan_support** %44, align 8
  %46 = icmp ne %struct.wiphy_wowlan_support* %45, null
  br i1 %46, label %47, label %66

; <label>:47:                                     ; preds = %43
  %48 = getelementptr inbounds %struct.wiphy, %struct.wiphy* %0, i32 0, i32 34
  %49 = load %struct.wiphy_wowlan_support*, %struct.wiphy_wowlan_support** %48, align 8
  %50 = getelementptr inbounds %struct.wiphy_wowlan_support, %struct.wiphy_wowlan_support* %49, i32 0, i32 0
  %51 = load i32, i32* %50, align 8
  %52 = icmp ne i32 %51, 0
  br i1 %52, label %66, label %53

; <label>:53:                                     ; preds = %47
  %54 = getelementptr inbounds %struct.wiphy, %struct.wiphy* %0, i32 0, i32 34
  %55 = load %struct.wiphy_wowlan_support*, %struct.wiphy_wowlan_support** %54, align 8
  %56 = getelementptr inbounds %struct.wiphy_wowlan_support, %struct.wiphy_wowlan_support* %55, i32 0, i32 1
  %57 = load i32, i32* %56, align 4
  %58 = icmp ne i32 %57, 0
  br i1 %58, label %66, label %59

; <label>:59:                                     ; preds = %53
  %60 = getelementptr inbounds %struct.wiphy, %struct.wiphy* %0, i32 0, i32 34
  %61 = load %struct.wiphy_wowlan_support*, %struct.wiphy_wowlan_support** %60, align 8
  %62 = getelementptr inbounds %struct.wiphy_wowlan_support, %struct.wiphy_wowlan_support* %61, i32 0, i32 6
  %63 = load %struct.wiphy_wowlan_tcp_support*, %struct.wiphy_wowlan_tcp_support** %62, align 8
  %64 = icmp ne %struct.wiphy_wowlan_tcp_support* %63, null
  %65 = xor i1 %64, true
  br label %66

; <label>:66:                                     ; preds = %59, %53, %47, %43
  %67 = phi i1 [ false, %53 ], [ false, %47 ], [ false, %43 ], [ %65, %59 ]
  %68 = xor i1 %67, true
  %69 = xor i1 %68, true
  %70 = zext i1 %69 to i32
  %71 = icmp ne i32 %70, 0
  %72 = xor i1 %71, true
  %73 = xor i1 %72, true
  %74 = zext i1 %73 to i32
  %75 = sext i32 %74 to i64
  %76 = icmp ne i64 %75, 0
  br i1 %76, label %77, label %78

; <label>:77:                                     ; preds = %66
  call void @warn_slowpath_null(i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.1, i32 0, i32 0), i32 619)
  br label %78

; <label>:78:                                     ; preds = %77, %66
  %79 = icmp ne i32 %70, 0
  %80 = xor i1 %79, true
  %81 = xor i1 %80, true
  %82 = zext i1 %81 to i32
  %83 = sext i32 %82 to i64
  %84 = icmp ne i64 %83, 0
  br i1 %84, label %863, label %85

; <label>:85:                                     ; preds = %78
  %86 = getelementptr inbounds %struct.wiphy, %struct.wiphy* %0, i32 0, i32 12
  %87 = load i32, i32* %86, align 4
  %88 = and i32 %87, 268435456
  %89 = icmp ne i32 %88, 0
  br i1 %89, label %90, label %103

; <label>:90:                                     ; preds = %85
  %91 = getelementptr inbounds %struct.cfg80211_registered_device, %struct.cfg80211_registered_device* %3, i32 0, i32 0
  %92 = load %struct.cfg80211_ops*, %struct.cfg80211_ops** %91, align 32
  %93 = getelementptr inbounds %struct.cfg80211_ops, %struct.cfg80211_ops* %92, i32 0, i32 89
  %94 = load i32 (%struct.wiphy*, %struct.net_device*, i8*, i8, %struct.cfg80211_chan_def*)*, i32 (%struct.wiphy*, %struct.net_device*, i8*, i8, %struct.cfg80211_chan_def*)** %93, align 8
  %95 = icmp ne i32 (%struct.wiphy*, %struct.net_device*, i8*, i8, %struct.cfg80211_chan_def*)* %94, null
  br i1 %95, label %96, label %103

; <label>:96:                                     ; preds = %90
  %97 = getelementptr inbounds %struct.cfg80211_registered_device, %struct.cfg80211_registered_device* %3, i32 0, i32 0
  %98 = load %struct.cfg80211_ops*, %struct.cfg80211_ops** %97, align 32
  %99 = getelementptr inbounds %struct.cfg80211_ops, %struct.cfg80211_ops* %98, i32 0, i32 90
  %100 = load void (%struct.wiphy*, %struct.net_device*, i8*)*, void (%struct.wiphy*, %struct.net_device*, i8*)** %99, align 8
  %101 = icmp ne void (%struct.wiphy*, %struct.net_device*, i8*)* %100, null
  %102 = xor i1 %101, true
  br label %103

; <label>:103:                                    ; preds = %90, %96, %85
  %104 = phi i1 [ false, %85 ], [ true, %90 ], [ %102, %96 ]
  %105 = xor i1 %104, true
  %106 = xor i1 %105, true
  %107 = zext i1 %106 to i32
  %108 = icmp ne i32 %107, 0
  %109 = xor i1 %108, true
  %110 = xor i1 %109, true
  %111 = zext i1 %110 to i32
  %112 = sext i32 %111 to i64
  %113 = icmp ne i64 %112, 0
  br i1 %113, label %114, label %115

; <label>:114:                                    ; preds = %103
  call void @warn_slowpath_null(i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.1, i32 0, i32 0), i32 624)
  br label %115

; <label>:115:                                    ; preds = %114, %103
  %116 = icmp ne i32 %107, 0
  %117 = xor i1 %116, true
  %118 = xor i1 %117, true
  %119 = zext i1 %118 to i32
  %120 = sext i32 %119 to i64
  %121 = icmp ne i64 %120, 0
  br i1 %121, label %863, label %122

; <label>:122:                                    ; preds = %115
  %123 = getelementptr inbounds %struct.wiphy, %struct.wiphy* %0, i32 0, i32 8
  %124 = load i16, i16* %123, align 16
  %125 = zext i16 %124 to i64
  %126 = and i64 %125, 4096
  %127 = icmp ne i64 %126, 0
  br i1 %127, label %128, label %159

; <label>:128:                                    ; preds = %122
  %129 = getelementptr inbounds %struct.cfg80211_registered_device, %struct.cfg80211_registered_device* %3, i32 0, i32 0
  %130 = load %struct.cfg80211_ops*, %struct.cfg80211_ops** %129, align 32
  %131 = getelementptr inbounds %struct.cfg80211_ops, %struct.cfg80211_ops* %130, i32 0, i32 91
  %132 = load i32 (%struct.wiphy*, %struct.wireless_dev*, %struct.cfg80211_nan_conf*)*, i32 (%struct.wiphy*, %struct.wireless_dev*, %struct.cfg80211_nan_conf*)** %131, align 8
  %133 = icmp ne i32 (%struct.wiphy*, %struct.wireless_dev*, %struct.cfg80211_nan_conf*)* %132, null
  br i1 %133, label %134, label %159

; <label>:134:                                    ; preds = %128
  %135 = getelementptr inbounds %struct.cfg80211_registered_device, %struct.cfg80211_registered_device* %3, i32 0, i32 0
  %136 = load %struct.cfg80211_ops*, %struct.cfg80211_ops** %135, align 32
  %137 = getelementptr inbounds %struct.cfg80211_ops, %struct.cfg80211_ops* %136, i32 0, i32 92
  %138 = load void (%struct.wiphy*, %struct.wireless_dev*)*, void (%struct.wiphy*, %struct.wireless_dev*)** %137, align 8
  %139 = icmp ne void (%struct.wiphy*, %struct.wireless_dev*)* %138, null
  br i1 %139, label %140, label %159

; <label>:140:                                    ; preds = %134
  %141 = getelementptr inbounds %struct.cfg80211_registered_device, %struct.cfg80211_registered_device* %3, i32 0, i32 0
  %142 = load %struct.cfg80211_ops*, %struct.cfg80211_ops** %141, align 32
  %143 = getelementptr inbounds %struct.cfg80211_ops, %struct.cfg80211_ops* %142, i32 0, i32 93
  %144 = load i32 (%struct.wiphy*, %struct.wireless_dev*, %struct.cfg80211_nan_func*)*, i32 (%struct.wiphy*, %struct.wireless_dev*, %struct.cfg80211_nan_func*)** %143, align 8
  %145 = icmp ne i32 (%struct.wiphy*, %struct.wireless_dev*, %struct.cfg80211_nan_func*)* %144, null
  br i1 %145, label %146, label %159

; <label>:146:                                    ; preds = %140
  %147 = getelementptr inbounds %struct.cfg80211_registered_device, %struct.cfg80211_registered_device* %3, i32 0, i32 0
  %148 = load %struct.cfg80211_ops*, %struct.cfg80211_ops** %147, align 32
  %149 = getelementptr inbounds %struct.cfg80211_ops, %struct.cfg80211_ops* %148, i32 0, i32 94
  %150 = load void (%struct.wiphy*, %struct.wireless_dev*, i64)*, void (%struct.wiphy*, %struct.wireless_dev*, i64)** %149, align 8
  %151 = icmp ne void (%struct.wiphy*, %struct.wireless_dev*, i64)* %150, null
  br i1 %151, label %152, label %159

; <label>:152:                                    ; preds = %146
  %153 = getelementptr inbounds %struct.wiphy, %struct.wiphy* %0, i32 0, i32 67
  %154 = load i8, i8* %153, align 32
  %155 = zext i8 %154 to i64
  %156 = and i64 %155, 1
  %157 = icmp ne i64 %156, 0
  %158 = xor i1 %157, true
  br label %159

; <label>:159:                                    ; preds = %128, %134, %140, %146, %152, %122
  %160 = phi i1 [ false, %122 ], [ true, %146 ], [ true, %140 ], [ true, %134 ], [ true, %128 ], [ %158, %152 ]
  %161 = xor i1 %160, true
  %162 = xor i1 %161, true
  %163 = zext i1 %162 to i32
  %164 = icmp ne i32 %163, 0
  %165 = xor i1 %164, true
  %166 = xor i1 %165, true
  %167 = zext i1 %166 to i32
  %168 = sext i32 %167 to i64
  %169 = icmp ne i64 %168, 0
  br i1 %169, label %170, label %171

; <label>:170:                                    ; preds = %159
  call void @warn_slowpath_null(i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.1, i32 0, i32 0), i32 630)
  br label %171

; <label>:171:                                    ; preds = %170, %159
  %172 = icmp ne i32 %163, 0
  %173 = xor i1 %172, true
  %174 = xor i1 %173, true
  %175 = zext i1 %174 to i32
  %176 = sext i32 %175 to i64
  %177 = icmp ne i64 %176, 0
  br i1 %177, label %863, label %178

; <label>:178:                                    ; preds = %171
  %179 = getelementptr inbounds %struct.wiphy, %struct.wiphy* %0, i32 0, i32 8
  %180 = load i16, i16* %179, align 16
  %181 = zext i16 %180 to i64
  %182 = and i64 %181, 32
  %183 = icmp ne i64 %182, 0
  %184 = xor i1 %183, true
  %185 = xor i1 %184, true
  %186 = zext i1 %185 to i32
  %187 = icmp ne i32 %186, 0
  %188 = xor i1 %187, true
  %189 = xor i1 %188, true
  %190 = zext i1 %189 to i32
  %191 = sext i32 %190 to i64
  %192 = icmp ne i64 %191, 0
  br i1 %192, label %193, label %194

; <label>:193:                                    ; preds = %178
  call void @warn_slowpath_null(i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.1, i32 0, i32 0), i32 634)
  br label %194

; <label>:194:                                    ; preds = %193, %178
  %195 = icmp ne i32 %186, 0
  %196 = xor i1 %195, true
  %197 = xor i1 %196, true
  %198 = zext i1 %197 to i32
  %199 = sext i32 %198 to i64
  %200 = icmp ne i64 %199, 0
  br i1 %200, label %863, label %201

; <label>:201:                                    ; preds = %194
  %202 = getelementptr inbounds %struct.wiphy, %struct.wiphy* %0, i32 0, i32 8
  %203 = load i16, i16* %202, align 16
  %204 = zext i16 %203 to i64
  %205 = and i64 %204, -5983
  %206 = icmp ne i64 %205, 0
  br i1 %206, label %207, label %211

; <label>:207:                                    ; preds = %201
  %208 = getelementptr inbounds %struct.wiphy, %struct.wiphy* %0, i32 0, i32 11
  %209 = load i32, i32* %208, align 8
  %210 = or i32 %209, 64
  store i32 %210, i32* %208, align 8
  br label %211

; <label>:211:                                    ; preds = %207, %201
  %212 = getelementptr inbounds %struct.wiphy, %struct.wiphy* %0, i32 0, i32 11
  %213 = load i32, i32* %212, align 8
  %214 = and i32 %213, 128
  %215 = icmp ne i32 %214, 0
  br i1 %215, label %216, label %221

; <label>:216:                                    ; preds = %211
  %217 = getelementptr inbounds %struct.wiphy, %struct.wiphy* %0, i32 0, i32 11
  %218 = load i32, i32* %217, align 8
  %219 = and i32 %218, 27
  %220 = icmp ne i32 %219, 0
  br label %221

; <label>:221:                                    ; preds = %216, %211
  %222 = phi i1 [ false, %211 ], [ %220, %216 ]
  %223 = xor i1 %222, true
  %224 = xor i1 %223, true
  %225 = zext i1 %224 to i32
  %226 = icmp ne i32 %225, 0
  %227 = xor i1 %226, true
  %228 = xor i1 %227, true
  %229 = zext i1 %228 to i32
  %230 = sext i32 %229 to i64
  %231 = icmp ne i64 %230, 0
  br i1 %231, label %232, label %233

; <label>:232:                                    ; preds = %221
  call void @warn_slowpath_null(i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.1, i32 0, i32 0), i32 658)
  br label %233

; <label>:233:                                    ; preds = %232, %221
  %234 = icmp ne i32 %225, 0
  %235 = xor i1 %234, true
  %236 = xor i1 %235, true
  %237 = zext i1 %236 to i32
  %238 = sext i32 %237 to i64
  %239 = icmp ne i64 %238, 0
  br i1 %239, label %863, label %240

; <label>:240:                                    ; preds = %233
  %241 = getelementptr inbounds %struct.wiphy, %struct.wiphy* %0, i32 0, i32 57
  %242 = load %struct.wiphy_coalesce_support*, %struct.wiphy_coalesce_support** %241, align 16
  %243 = icmp ne %struct.wiphy_coalesce_support* %242, null
  br i1 %243, label %244, label %272

; <label>:244:                                    ; preds = %240
  %245 = getelementptr inbounds %struct.wiphy, %struct.wiphy* %0, i32 0, i32 57
  %246 = load %struct.wiphy_coalesce_support*, %struct.wiphy_coalesce_support** %245, align 16
  %247 = getelementptr inbounds %struct.wiphy_coalesce_support, %struct.wiphy_coalesce_support* %246, i32 0, i32 0
  %248 = load i32, i32* %247, align 4
  %249 = icmp ne i32 %248, 0
  br i1 %249, label %250, label %256

; <label>:250:                                    ; preds = %244
  %251 = getelementptr inbounds %struct.wiphy, %struct.wiphy* %0, i32 0, i32 57
  %252 = load %struct.wiphy_coalesce_support*, %struct.wiphy_coalesce_support** %251, align 16
  %253 = getelementptr inbounds %struct.wiphy_coalesce_support, %struct.wiphy_coalesce_support* %252, i32 0, i32 2
  %254 = load i32, i32* %253, align 4
  %255 = icmp ne i32 %254, 0
  br i1 %255, label %272, label %256

; <label>:256:                                    ; preds = %250, %244
  %257 = getelementptr inbounds %struct.wiphy, %struct.wiphy* %0, i32 0, i32 57
  %258 = load %struct.wiphy_coalesce_support*, %struct.wiphy_coalesce_support** %257, align 16
  %259 = getelementptr inbounds %struct.wiphy_coalesce_support, %struct.wiphy_coalesce_support* %258, i32 0, i32 4
  %260 = load i32, i32* %259, align 4
  %261 = icmp ne i32 %260, 0
  br i1 %261, label %262, label %272

; <label>:262:                                    ; preds = %256
  %263 = getelementptr inbounds %struct.wiphy, %struct.wiphy* %0, i32 0, i32 57
  %264 = load %struct.wiphy_coalesce_support*, %struct.wiphy_coalesce_support** %263, align 16
  %265 = getelementptr inbounds %struct.wiphy_coalesce_support, %struct.wiphy_coalesce_support* %264, i32 0, i32 4
  %266 = load i32, i32* %265, align 4
  %267 = getelementptr inbounds %struct.wiphy, %struct.wiphy* %0, i32 0, i32 57
  %268 = load %struct.wiphy_coalesce_support*, %struct.wiphy_coalesce_support** %267, align 16
  %269 = getelementptr inbounds %struct.wiphy_coalesce_support, %struct.wiphy_coalesce_support* %268, i32 0, i32 3
  %270 = load i32, i32* %269, align 4
  %271 = icmp sgt i32 %266, %270
  br label %272

; <label>:272:                                    ; preds = %256, %262, %250, %240
  %273 = phi i1 [ false, %250 ], [ false, %240 ], [ true, %256 ], [ %271, %262 ]
  %274 = xor i1 %273, true
  %275 = xor i1 %274, true
  %276 = zext i1 %275 to i32
  %277 = icmp ne i32 %276, 0
  %278 = xor i1 %277, true
  %279 = xor i1 %278, true
  %280 = zext i1 %279 to i32
  %281 = sext i32 %280 to i64
  %282 = icmp ne i64 %281, 0
  br i1 %282, label %283, label %284

; <label>:283:                                    ; preds = %272
  call void @warn_slowpath_null(i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.1, i32 0, i32 0), i32 666)
  br label %284

; <label>:284:                                    ; preds = %283, %272
  %285 = icmp ne i32 %276, 0
  %286 = xor i1 %285, true
  %287 = xor i1 %286, true
  %288 = zext i1 %287 to i32
  %289 = sext i32 %288 to i64
  %290 = icmp ne i64 %289, 0
  br i1 %290, label %863, label %291

; <label>:291:                                    ; preds = %284
  %292 = getelementptr inbounds %struct.wiphy, %struct.wiphy* %0, i32 0, i32 14
  %293 = load i32, i32* %292, align 4
  %294 = icmp ne i32 %293, 0
  br i1 %294, label %295, label %301

; <label>:295:                                    ; preds = %291
  %296 = getelementptr inbounds %struct.wiphy, %struct.wiphy* %0, i32 0, i32 10
  %297 = load i32, i32* %296, align 4
  %298 = and i32 %297, 131072
  %299 = icmp ne i32 %298, 0
  %300 = xor i1 %299, true
  br label %301

; <label>:301:                                    ; preds = %295, %291
  %302 = phi i1 [ false, %291 ], [ %300, %295 ]
  %303 = xor i1 %302, true
  %304 = xor i1 %303, true
  %305 = zext i1 %304 to i32
  %306 = icmp ne i32 %305, 0
  %307 = xor i1 %306, true
  %308 = xor i1 %307, true
  %309 = zext i1 %308 to i32
  %310 = sext i32 %309 to i64
  %311 = icmp ne i64 %310, 0
  br i1 %311, label %312, label %313

; <label>:312:                                    ; preds = %301
  call void @warn_slowpath_null(i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.1, i32 0, i32 0), i32 670)
  br label %313

; <label>:313:                                    ; preds = %312, %301
  %314 = icmp ne i32 %305, 0
  %315 = xor i1 %314, true
  %316 = xor i1 %315, true
  %317 = zext i1 %316 to i32
  %318 = sext i32 %317 to i64
  %319 = icmp ne i64 %318, 0
  br i1 %319, label %863, label %320

; <label>:320:                                    ; preds = %313
  %321 = getelementptr inbounds %struct.wiphy, %struct.wiphy* %0, i32 0, i32 2
  %322 = load %struct.mac_address*, %struct.mac_address** %321, align 16
  %323 = icmp ne %struct.mac_address* %322, null
  br i1 %323, label %324, label %329

; <label>:324:                                    ; preds = %320
  %325 = getelementptr inbounds %struct.wiphy, %struct.wiphy* %0, i32 0, i32 7
  %326 = load i16, i16* %325, align 2
  %327 = icmp ne i16 %326, 0
  %328 = xor i1 %327, true
  br label %329

; <label>:329:                                    ; preds = %324, %320
  %330 = phi i1 [ false, %320 ], [ %328, %324 ]
  %331 = xor i1 %330, true
  %332 = xor i1 %331, true
  %333 = zext i1 %332 to i32
  %334 = icmp ne i32 %333, 0
  %335 = xor i1 %334, true
  %336 = xor i1 %335, true
  %337 = zext i1 %336 to i32
  %338 = sext i32 %337 to i64
  %339 = icmp ne i64 %338, 0
  br i1 %339, label %340, label %341

; <label>:340:                                    ; preds = %329
  call void @warn_slowpath_null(i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.1, i32 0, i32 0), i32 673)
  br label %341

; <label>:341:                                    ; preds = %340, %329
  %342 = icmp ne i32 %333, 0
  %343 = xor i1 %342, true
  %344 = xor i1 %343, true
  %345 = zext i1 %344 to i32
  %346 = sext i32 %345 to i64
  %347 = icmp ne i64 %346, 0
  br i1 %347, label %863, label %348

; <label>:348:                                    ; preds = %341
  %349 = getelementptr inbounds %struct.wiphy, %struct.wiphy* %0, i32 0, i32 2
  %350 = load %struct.mac_address*, %struct.mac_address** %349, align 16
  %351 = icmp ne %struct.mac_address* %350, null
  br i1 %351, label %352, label %366

; <label>:352:                                    ; preds = %348
  %353 = getelementptr inbounds %struct.wiphy, %struct.wiphy* %0, i32 0, i32 0
  %354 = getelementptr inbounds [6 x i8], [6 x i8]* %353, i32 0, i32 0
  %355 = call zeroext i1 @is_zero_ether_addr(i8* %354)
  br i1 %355, label %366, label %356

; <label>:356:                                    ; preds = %352
  %357 = getelementptr inbounds %struct.wiphy, %struct.wiphy* %0, i32 0, i32 0
  %358 = getelementptr inbounds [6 x i8], [6 x i8]* %357, i32 0, i32 0
  %359 = getelementptr inbounds %struct.wiphy, %struct.wiphy* %0, i32 0, i32 2
  %360 = load %struct.mac_address*, %struct.mac_address** %359, align 16
  %361 = getelementptr inbounds %struct.mac_address, %struct.mac_address* %360, i64 0
  %362 = getelementptr inbounds %struct.mac_address, %struct.mac_address* %361, i32 0, i32 0
  %363 = getelementptr inbounds [6 x i8], [6 x i8]* %362, i32 0, i32 0
  %364 = call i32 @memcmp(i8* %358, i8* %363, i64 6)
  %365 = icmp ne i32 %364, 0
  br label %366

; <label>:366:                                    ; preds = %356, %352, %348
  %367 = phi i1 [ false, %352 ], [ false, %348 ], [ %365, %356 ]
  %368 = xor i1 %367, true
  %369 = xor i1 %368, true
  %370 = zext i1 %369 to i32
  %371 = icmp ne i32 %370, 0
  %372 = xor i1 %371, true
  %373 = xor i1 %372, true
  %374 = zext i1 %373 to i32
  %375 = sext i32 %374 to i64
  %376 = icmp ne i64 %375, 0
  br i1 %376, label %377, label %378

; <label>:377:                                    ; preds = %366
  call void @warn_slowpath_null(i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.1, i32 0, i32 0), i32 679)
  br label %378

; <label>:378:                                    ; preds = %377, %366
  %379 = icmp ne i32 %370, 0
  %380 = xor i1 %379, true
  %381 = xor i1 %380, true
  %382 = zext i1 %381 to i32
  %383 = sext i32 %382 to i64
  %384 = icmp ne i64 %383, 0
  br i1 %384, label %863, label %385

; <label>:385:                                    ; preds = %378
  %386 = getelementptr inbounds %struct.wiphy, %struct.wiphy* %0, i32 0, i32 9
  %387 = load i16, i16* %386, align 2
  %388 = zext i16 %387 to i32
  %389 = icmp ne i32 %388, 0
  br i1 %389, label %390, label %402

; <label>:390:                                    ; preds = %385
  %391 = getelementptr inbounds %struct.wiphy, %struct.wiphy* %0, i32 0, i32 10
  %392 = load i32, i32* %391, align 4
  %393 = and i32 %392, 131072
  %394 = icmp ne i32 %393, 0
  br i1 %394, label %395, label %402

; <label>:395:                                    ; preds = %390
  %396 = getelementptr inbounds %struct.cfg80211_registered_device, %struct.cfg80211_registered_device* %3, i32 0, i32 0
  %397 = load %struct.cfg80211_ops*, %struct.cfg80211_ops** %396, align 32
  %398 = getelementptr inbounds %struct.cfg80211_ops, %struct.cfg80211_ops* %397, i32 0, i32 78
  %399 = load i32 (%struct.wiphy*, %struct.net_device*, %struct.cfg80211_acl_data*)*, i32 (%struct.wiphy*, %struct.net_device*, %struct.cfg80211_acl_data*)** %398, align 8
  %400 = icmp ne i32 (%struct.wiphy*, %struct.net_device*, %struct.cfg80211_acl_data*)* %399, null
  %401 = xor i1 %400, true
  br label %402

; <label>:402:                                    ; preds = %390, %395, %385
  %403 = phi i1 [ false, %385 ], [ true, %390 ], [ %401, %395 ]
  %404 = xor i1 %403, true
  %405 = xor i1 %404, true
  %406 = zext i1 %405 to i32
  %407 = icmp ne i32 %406, 0
  %408 = xor i1 %407, true
  %409 = xor i1 %408, true
  %410 = zext i1 %409 to i32
  %411 = sext i32 %410 to i64
  %412 = icmp ne i64 %411, 0
  br i1 %412, label %413, label %414

; <label>:413:                                    ; preds = %402
  call void @warn_slowpath_null(i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.1, i32 0, i32 0), i32 684)
  br label %414

; <label>:414:                                    ; preds = %413, %402
  %415 = icmp ne i32 %406, 0
  %416 = xor i1 %415, true
  %417 = xor i1 %416, true
  %418 = zext i1 %417 to i32
  %419 = sext i32 %418 to i64
  %420 = icmp ne i64 %419, 0
  br i1 %420, label %863, label %421

; <label>:421:                                    ; preds = %414
  %422 = getelementptr inbounds %struct.wiphy, %struct.wiphy* %0, i32 0, i32 65
  %423 = load i32, i32* %422, align 4
  %424 = icmp ne i32 %423, 0
  br i1 %424, label %425, label %431

; <label>:425:                                    ; preds = %421
  %426 = getelementptr inbounds %struct.wiphy, %struct.wiphy* %0, i32 0, i32 65
  %427 = load i32, i32* %426, align 4
  %428 = zext i32 %427 to i64
  %429 = and i64 %428, -15
  %430 = icmp ne i64 %429, 0
  br label %431

; <label>:431:                                    ; preds = %425, %421
  %432 = phi i1 [ false, %421 ], [ %430, %425 ]
  %433 = xor i1 %432, true
  %434 = xor i1 %433, true
  %435 = zext i1 %434 to i32
  %436 = icmp ne i32 %435, 0
  %437 = xor i1 %436, true
  %438 = xor i1 %437, true
  %439 = zext i1 %438 to i32
  %440 = sext i32 %439 to i64
  %441 = icmp ne i64 %440, 0
  br i1 %441, label %442, label %443

; <label>:442:                                    ; preds = %431
  call void @warn_slowpath_null(i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.1, i32 0, i32 0), i32 691)
  br label %443

; <label>:443:                                    ; preds = %442, %431
  %444 = icmp ne i32 %435, 0
  %445 = xor i1 %444, true
  %446 = xor i1 %445, true
  %447 = zext i1 %446 to i32
  %448 = sext i32 %447 to i64
  %449 = icmp ne i64 %448, 0
  br i1 %449, label %863, label %450

; <label>:450:                                    ; preds = %443
  %451 = getelementptr inbounds %struct.wiphy, %struct.wiphy* %0, i32 0, i32 2
  %452 = load %struct.mac_address*, %struct.mac_address** %451, align 16
  %453 = icmp ne %struct.mac_address* %452, null
  br i1 %453, label %454, label %466

; <label>:454:                                    ; preds = %450
  %455 = icmp uge i64 6, 64
  %456 = getelementptr inbounds %struct.wiphy, %struct.wiphy* %0, i32 0, i32 0
  %457 = getelementptr inbounds [6 x i8], [6 x i8]* %456, i32 0, i32 0
  %458 = getelementptr inbounds %struct.wiphy, %struct.wiphy* %0, i32 0, i32 2
  %459 = load %struct.mac_address*, %struct.mac_address** %458, align 16
  %460 = getelementptr inbounds %struct.mac_address, %struct.mac_address* %459, i64 0
  %461 = getelementptr inbounds %struct.mac_address, %struct.mac_address* %460, i32 0, i32 0
  %462 = getelementptr inbounds [6 x i8], [6 x i8]* %461, i32 0, i32 0
  br i1 %455, label %463, label %465

; <label>:463:                                    ; preds = %454
  %464 = call i8* @__memcpy(i8* %457, i8* %462, i64 6)
  br label %466

; <label>:465:                                    ; preds = %454
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %457, i8* %462, i64 6, i32 1, i1 false)
  br label %466

; <label>:466:                                    ; preds = %463, %465, %450
  %467 = icmp ne i16 %5, 0
  %468 = xor i1 %467, true
  %469 = xor i1 %468, true
  %470 = xor i1 %469, true
  %471 = zext i1 %470 to i32
  %472 = icmp ne i32 %471, 0
  %473 = xor i1 %472, true
  %474 = xor i1 %473, true
  %475 = zext i1 %474 to i32
  %476 = sext i32 %475 to i64
  %477 = icmp ne i64 %476, 0
  br i1 %477, label %478, label %479

; <label>:478:                                    ; preds = %466
  call void @warn_slowpath_null(i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.1, i32 0, i32 0), i32 698)
  br label %479

; <label>:479:                                    ; preds = %478, %466
  %480 = icmp ne i32 %471, 0
  %481 = xor i1 %480, true
  %482 = xor i1 %481, true
  %483 = zext i1 %482 to i32
  %484 = sext i32 %483 to i64
  %485 = zext i16 %5 to i32
  %486 = and i32 %485, 8190
  %487 = trunc i32 %486 to i16
  %488 = zext i16 %487 to i32
  %489 = getelementptr inbounds %struct.wiphy, %struct.wiphy* %0, i32 0, i32 8
  %490 = load i16, i16* %489, align 16
  %491 = zext i16 %490 to i32
  %492 = icmp ne i32 %488, %491
  %493 = xor i1 %492, true
  %494 = xor i1 %493, true
  %495 = zext i1 %494 to i32
  %496 = icmp ne i32 %495, 0
  %497 = xor i1 %496, true
  %498 = xor i1 %497, true
  %499 = zext i1 %498 to i32
  %500 = sext i32 %499 to i64
  %501 = icmp ne i64 %500, 0
  br i1 %501, label %502, label %503

; <label>:502:                                    ; preds = %479
  call void @warn_slowpath_null(i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.1, i32 0, i32 0), i32 700)
  br label %503

; <label>:503:                                    ; preds = %502, %479
  %504 = icmp ne i32 %495, 0
  %505 = xor i1 %504, true
  %506 = xor i1 %505, true
  %507 = zext i1 %506 to i32
  %508 = sext i32 %507 to i64
  %509 = icmp ne i64 %508, 0
  br i1 %509, label %510, label %512

; <label>:510:                                    ; preds = %503
  %511 = getelementptr inbounds %struct.wiphy, %struct.wiphy* %0, i32 0, i32 8
  store i16 %487, i16* %511, align 16
  br label %512

; <label>:512:                                    ; preds = %510, %503
  %513 = call i32 @wiphy_verify_combinations(%struct.wiphy* %0)
  %514 = icmp ne i32 %513, 0
  br i1 %514, label %863, label %515

; <label>:515:                                    ; preds = %512, %653
  %.05 = phi i8 [ %.16, %653 ], [ 0, %512 ]
  %.03 = phi i32 [ %654, %653 ], [ 0, %512 ]
  %516 = icmp ult i32 %.03, 3
  br i1 %516, label %517, label %655

; <label>:517:                                    ; preds = %515
  %518 = getelementptr inbounds %struct.wiphy, %struct.wiphy* %0, i32 0, i32 47
  %519 = zext i32 %.03 to i64
  %520 = getelementptr inbounds [3 x %struct.ieee80211_supported_band*], [3 x %struct.ieee80211_supported_band*]* %518, i64 0, i64 %519
  %521 = load %struct.ieee80211_supported_band*, %struct.ieee80211_supported_band** %520, align 8
  %522 = icmp ne %struct.ieee80211_supported_band* %521, null
  br i1 %522, label %523, label %653

; <label>:523:                                    ; preds = %517
  %524 = getelementptr inbounds %struct.ieee80211_supported_band, %struct.ieee80211_supported_band* %521, i32 0, i32 2
  store i32 %.03, i32* %524, align 8
  %525 = getelementptr inbounds %struct.ieee80211_supported_band, %struct.ieee80211_supported_band* %521, i32 0, i32 3
  %526 = load i32, i32* %525, align 4
  %527 = icmp ne i32 %526, 0
  %528 = xor i1 %527, true
  %529 = xor i1 %528, true
  %530 = xor i1 %529, true
  %531 = zext i1 %530 to i32
  %532 = icmp ne i32 %531, 0
  %533 = xor i1 %532, true
  %534 = xor i1 %533, true
  %535 = zext i1 %534 to i32
  %536 = sext i32 %535 to i64
  %537 = icmp ne i64 %536, 0
  br i1 %537, label %538, label %539

; <label>:538:                                    ; preds = %523
  call void @warn_slowpath_null(i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.1, i32 0, i32 0), i32 714)
  br label %539

; <label>:539:                                    ; preds = %538, %523
  %540 = icmp ne i32 %531, 0
  %541 = xor i1 %540, true
  %542 = xor i1 %541, true
  %543 = zext i1 %542 to i32
  %544 = sext i32 %543 to i64
  %545 = icmp ne i64 %544, 0
  br i1 %545, label %863, label %546

; <label>:546:                                    ; preds = %539
  %547 = icmp ne i32 %.03, 2
  br i1 %547, label %548, label %553

; <label>:548:                                    ; preds = %546
  %549 = getelementptr inbounds %struct.ieee80211_supported_band, %struct.ieee80211_supported_band* %521, i32 0, i32 4
  %550 = load i32, i32* %549, align 8
  %551 = icmp ne i32 %550, 0
  %552 = xor i1 %551, true
  br label %553

; <label>:553:                                    ; preds = %548, %546
  %554 = phi i1 [ false, %546 ], [ %552, %548 ]
  %555 = xor i1 %554, true
  %556 = xor i1 %555, true
  %557 = zext i1 %556 to i32
  %558 = icmp ne i32 %557, 0
  %559 = xor i1 %558, true
  %560 = xor i1 %559, true
  %561 = zext i1 %560 to i32
  %562 = sext i32 %561 to i64
  %563 = icmp ne i64 %562, 0
  br i1 %563, label %564, label %565

; <label>:564:                                    ; preds = %553
  call void @warn_slowpath_null(i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.1, i32 0, i32 0), i32 721)
  br label %565

; <label>:565:                                    ; preds = %564, %553
  %566 = icmp ne i32 %557, 0
  %567 = xor i1 %566, true
  %568 = xor i1 %567, true
  %569 = zext i1 %568 to i32
  %570 = sext i32 %569 to i64
  %571 = icmp ne i64 %570, 0
  br i1 %571, label %863, label %572

; <label>:572:                                    ; preds = %565
  %573 = load i8, i8* @cfg80211_disable_40mhz_24ghz, align 1
  %574 = trunc i8 %573 to i1
  %575 = icmp eq i32 %.03, 0
  %or.cond = and i1 %574, %575
  br i1 %or.cond, label %576, label %594

; <label>:576:                                    ; preds = %572
  %577 = getelementptr inbounds %struct.ieee80211_supported_band, %struct.ieee80211_supported_band* %521, i32 0, i32 5
  %578 = getelementptr inbounds %struct.ieee80211_sta_ht_cap, %struct.ieee80211_sta_ht_cap* %577, i32 0, i32 1
  %579 = load i8, i8* %578, align 2
  %580 = trunc i8 %579 to i1
  br i1 %580, label %581, label %594

; <label>:581:                                    ; preds = %576
  %582 = getelementptr inbounds %struct.ieee80211_supported_band, %struct.ieee80211_supported_band* %521, i32 0, i32 5
  %583 = getelementptr inbounds %struct.ieee80211_sta_ht_cap, %struct.ieee80211_sta_ht_cap* %582, i32 0, i32 0
  %584 = load i16, i16* %583, align 4
  %585 = zext i16 %584 to i32
  %586 = and i32 %585, -3
  %587 = trunc i32 %586 to i16
  store i16 %587, i16* %583, align 4
  %588 = getelementptr inbounds %struct.ieee80211_supported_band, %struct.ieee80211_supported_band* %521, i32 0, i32 5
  %589 = getelementptr inbounds %struct.ieee80211_sta_ht_cap, %struct.ieee80211_sta_ht_cap* %588, i32 0, i32 0
  %590 = load i16, i16* %589, align 4
  %591 = zext i16 %590 to i32
  %592 = and i32 %591, -65
  %593 = trunc i32 %592 to i16
  store i16 %593, i16* %589, align 4
  br label %594

; <label>:594:                                    ; preds = %581, %576, %572
  %595 = getelementptr inbounds %struct.ieee80211_supported_band, %struct.ieee80211_supported_band* %521, i32 0, i32 4
  %596 = load i32, i32* %595, align 8
  %597 = icmp sgt i32 %596, 32
  %598 = xor i1 %597, true
  %599 = xor i1 %598, true
  %600 = zext i1 %599 to i32
  %601 = icmp ne i32 %600, 0
  %602 = xor i1 %601, true
  %603 = xor i1 %602, true
  %604 = zext i1 %603 to i32
  %605 = sext i32 %604 to i64
  %606 = icmp ne i64 %605, 0
  br i1 %606, label %607, label %608

; <label>:607:                                    ; preds = %594
  call void @warn_slowpath_null(i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.1, i32 0, i32 0), i32 741)
  br label %608

; <label>:608:                                    ; preds = %607, %594
  %609 = icmp ne i32 %600, 0
  %610 = xor i1 %609, true
  %611 = xor i1 %610, true
  %612 = zext i1 %611 to i32
  %613 = sext i32 %612 to i64
  %614 = icmp ne i64 %613, 0
  br i1 %614, label %863, label %615

; <label>:615:                                    ; preds = %608, %619
  %.07 = phi i32 [ %652, %619 ], [ 0, %608 ]
  %616 = getelementptr inbounds %struct.ieee80211_supported_band, %struct.ieee80211_supported_band* %521, i32 0, i32 3
  %617 = load i32, i32* %616, align 4
  %618 = icmp slt i32 %.07, %617
  br i1 %618, label %619, label %653

; <label>:619:                                    ; preds = %615
  %620 = getelementptr inbounds %struct.ieee80211_supported_band, %struct.ieee80211_supported_band* %521, i32 0, i32 0
  %621 = load %struct.ieee80211_channel*, %struct.ieee80211_channel** %620, align 8
  %622 = sext i32 %.07 to i64
  %623 = getelementptr inbounds %struct.ieee80211_channel, %struct.ieee80211_channel* %621, i64 %622
  %624 = getelementptr inbounds %struct.ieee80211_channel, %struct.ieee80211_channel* %623, i32 0, i32 3
  %625 = load i32, i32* %624, align 8
  %626 = getelementptr inbounds %struct.ieee80211_supported_band, %struct.ieee80211_supported_band* %521, i32 0, i32 0
  %627 = load %struct.ieee80211_channel*, %struct.ieee80211_channel** %626, align 8
  %628 = sext i32 %.07 to i64
  %629 = getelementptr inbounds %struct.ieee80211_channel, %struct.ieee80211_channel* %627, i64 %628
  %630 = getelementptr inbounds %struct.ieee80211_channel, %struct.ieee80211_channel* %629, i32 0, i32 8
  store i32 %625, i32* %630, align 4
  %631 = getelementptr inbounds %struct.ieee80211_supported_band, %struct.ieee80211_supported_band* %521, i32 0, i32 0
  %632 = load %struct.ieee80211_channel*, %struct.ieee80211_channel** %631, align 8
  %633 = sext i32 %.07 to i64
  %634 = getelementptr inbounds %struct.ieee80211_channel, %struct.ieee80211_channel* %632, i64 %633
  %635 = getelementptr inbounds %struct.ieee80211_channel, %struct.ieee80211_channel* %634, i32 0, i32 9
  store i32 2147483647, i32* %635, align 8
  %636 = getelementptr inbounds %struct.ieee80211_supported_band, %struct.ieee80211_supported_band* %521, i32 0, i32 0
  %637 = load %struct.ieee80211_channel*, %struct.ieee80211_channel** %636, align 8
  %638 = sext i32 %.07 to i64
  %639 = getelementptr inbounds %struct.ieee80211_channel, %struct.ieee80211_channel* %637, i64 %638
  %640 = getelementptr inbounds %struct.ieee80211_channel, %struct.ieee80211_channel* %639, i32 0, i32 5
  %641 = load i32, i32* %640, align 8
  %642 = getelementptr inbounds %struct.ieee80211_supported_band, %struct.ieee80211_supported_band* %521, i32 0, i32 0
  %643 = load %struct.ieee80211_channel*, %struct.ieee80211_channel** %642, align 8
  %644 = sext i32 %.07 to i64
  %645 = getelementptr inbounds %struct.ieee80211_channel, %struct.ieee80211_channel* %643, i64 %644
  %646 = getelementptr inbounds %struct.ieee80211_channel, %struct.ieee80211_channel* %645, i32 0, i32 10
  store i32 %641, i32* %646, align 4
  %647 = getelementptr inbounds %struct.ieee80211_supported_band, %struct.ieee80211_supported_band* %521, i32 0, i32 0
  %648 = load %struct.ieee80211_channel*, %struct.ieee80211_channel** %647, align 8
  %649 = sext i32 %.07 to i64
  %650 = getelementptr inbounds %struct.ieee80211_channel, %struct.ieee80211_channel* %648, i64 %649
  %651 = getelementptr inbounds %struct.ieee80211_channel, %struct.ieee80211_channel* %650, i32 0, i32 0
  store i32 %.03, i32* %651, align 8
  %652 = add nsw i32 %.07, 1
  br label %615

; <label>:653:                                    ; preds = %615, %517
  %.16 = phi i8 [ %.05, %517 ], [ 1, %615 ]
  %654 = add i32 %.03, 1
  br label %515

; <label>:655:                                    ; preds = %515
  %656 = trunc i8 %.05 to i1
  br i1 %656, label %671, label %657

; <label>:657:                                    ; preds = %655
  %658 = icmp ne i32 1, 0
  %659 = xor i1 %658, true
  %660 = xor i1 %659, true
  %661 = zext i1 %660 to i32
  %662 = sext i32 %661 to i64
  %663 = icmp ne i64 %662, 0
  br i1 %663, label %664, label %665

; <label>:664:                                    ; preds = %657
  call void @warn_slowpath_null(i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.1, i32 0, i32 0), i32 757)
  br label %665

; <label>:665:                                    ; preds = %664, %657
  %666 = icmp ne i32 1, 0
  %667 = xor i1 %666, true
  %668 = xor i1 %667, true
  %669 = zext i1 %668 to i32
  %670 = sext i32 %669 to i64
  br label %863

; <label>:671:                                    ; preds = %655
  %672 = getelementptr inbounds %struct.cfg80211_registered_device, %struct.cfg80211_registered_device* %3, i32 0, i32 42
  %673 = getelementptr inbounds %struct.wiphy, %struct.wiphy* %672, i32 0, i32 34
  %674 = load %struct.wiphy_wowlan_support*, %struct.wiphy_wowlan_support** %673, align 8
  %675 = icmp ne %struct.wiphy_wowlan_support* %674, null
  br i1 %675, label %676, label %702

; <label>:676:                                    ; preds = %671
  %677 = getelementptr inbounds %struct.cfg80211_registered_device, %struct.cfg80211_registered_device* %3, i32 0, i32 42
  %678 = getelementptr inbounds %struct.wiphy, %struct.wiphy* %677, i32 0, i32 34
  %679 = load %struct.wiphy_wowlan_support*, %struct.wiphy_wowlan_support** %678, align 8
  %680 = getelementptr inbounds %struct.wiphy_wowlan_support, %struct.wiphy_wowlan_support* %679, i32 0, i32 1
  %681 = load i32, i32* %680, align 4
  %682 = icmp ne i32 %681, 0
  br i1 %682, label %683, label %702

; <label>:683:                                    ; preds = %676
  %684 = getelementptr inbounds %struct.cfg80211_registered_device, %struct.cfg80211_registered_device* %3, i32 0, i32 42
  %685 = getelementptr inbounds %struct.wiphy, %struct.wiphy* %684, i32 0, i32 34
  %686 = load %struct.wiphy_wowlan_support*, %struct.wiphy_wowlan_support** %685, align 8
  %687 = getelementptr inbounds %struct.wiphy_wowlan_support, %struct.wiphy_wowlan_support* %686, i32 0, i32 3
  %688 = load i32, i32* %687, align 4
  %689 = icmp ne i32 %688, 0
  br i1 %689, label %690, label %702

; <label>:690:                                    ; preds = %683
  %691 = getelementptr inbounds %struct.cfg80211_registered_device, %struct.cfg80211_registered_device* %3, i32 0, i32 42
  %692 = getelementptr inbounds %struct.wiphy, %struct.wiphy* %691, i32 0, i32 34
  %693 = load %struct.wiphy_wowlan_support*, %struct.wiphy_wowlan_support** %692, align 8
  %694 = getelementptr inbounds %struct.wiphy_wowlan_support, %struct.wiphy_wowlan_support* %693, i32 0, i32 3
  %695 = load i32, i32* %694, align 4
  %696 = getelementptr inbounds %struct.cfg80211_registered_device, %struct.cfg80211_registered_device* %3, i32 0, i32 42
  %697 = getelementptr inbounds %struct.wiphy, %struct.wiphy* %696, i32 0, i32 34
  %698 = load %struct.wiphy_wowlan_support*, %struct.wiphy_wowlan_support** %697, align 8
  %699 = getelementptr inbounds %struct.wiphy_wowlan_support, %struct.wiphy_wowlan_support* %698, i32 0, i32 2
  %700 = load i32, i32* %699, align 8
  %701 = icmp sgt i32 %695, %700
  br label %702

; <label>:702:                                    ; preds = %683, %690, %676, %671
  %703 = phi i1 [ false, %676 ], [ false, %671 ], [ true, %683 ], [ %701, %690 ]
  %704 = xor i1 %703, true
  %705 = xor i1 %704, true
  %706 = zext i1 %705 to i32
  %707 = icmp ne i32 %706, 0
  %708 = xor i1 %707, true
  %709 = xor i1 %708, true
  %710 = zext i1 %709 to i32
  %711 = sext i32 %710 to i64
  %712 = icmp ne i64 %711, 0
  br i1 %712, label %713, label %714

; <label>:713:                                    ; preds = %702
  call void @warn_slowpath_null(i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.1, i32 0, i32 0), i32 765)
  br label %714

; <label>:714:                                    ; preds = %713, %702
  %715 = icmp ne i32 %706, 0
  %716 = xor i1 %715, true
  %717 = xor i1 %716, true
  %718 = zext i1 %717 to i32
  %719 = sext i32 %718 to i64
  %720 = icmp ne i64 %719, 0
  br i1 %720, label %863, label %721

; <label>:721:                                    ; preds = %714
  call void @ieee80211_set_bitrate_flags(%struct.wiphy* %0)
  %722 = getelementptr inbounds %struct.cfg80211_registered_device, %struct.cfg80211_registered_device* %3, i32 0, i32 42
  %723 = getelementptr inbounds %struct.wiphy, %struct.wiphy* %722, i32 0, i32 12
  %724 = load i32, i32* %723, align 4
  %725 = or i32 %724, 128
  store i32 %725, i32* %723, align 4
  call void @rtnl_lock()
  %726 = getelementptr inbounds %struct.cfg80211_registered_device, %struct.cfg80211_registered_device* %3, i32 0, i32 42
  %727 = getelementptr inbounds %struct.wiphy, %struct.wiphy* %726, i32 0, i32 50
  %728 = call i32 @device_add(%struct.device* %727)
  %729 = icmp ne i32 %728, 0
  br i1 %729, label %730, label %731

; <label>:730:                                    ; preds = %721
  call void @rtnl_unlock()
  br label %863

; <label>:731:                                    ; preds = %721
  call void @wiphy_regulatory_register(%struct.wiphy* %0)
  %732 = getelementptr inbounds %struct.cfg80211_registered_device, %struct.cfg80211_registered_device* %3, i32 0, i32 1
  call void @list_add_rcu(%struct.list_head* %732, %struct.list_head* @cfg80211_rdev_list)
  %733 = load i32, i32* @cfg80211_rdev_list_generation, align 4
  %734 = add nsw i32 %733, 1
  store i32 %734, i32* @cfg80211_rdev_list_generation, align 4
  %735 = getelementptr inbounds %struct.cfg80211_registered_device, %struct.cfg80211_registered_device* %3, i32 0, i32 42
  %736 = call i8* @wiphy_name(%struct.wiphy* %735)
  %737 = load %struct.dentry*, %struct.dentry** @ieee80211_debugfs_dir, align 8
  %738 = call %struct.dentry* @debugfs_create_dir(i8* %736, %struct.dentry* %737)
  %739 = getelementptr inbounds %struct.cfg80211_registered_device, %struct.cfg80211_registered_device* %3, i32 0, i32 42
  %740 = getelementptr inbounds %struct.wiphy, %struct.wiphy* %739, i32 0, i32 52
  store %struct.dentry* %738, %struct.dentry** %740, align 32
  %741 = getelementptr inbounds %struct.cfg80211_registered_device, %struct.cfg80211_registered_device* %3, i32 0, i32 42
  %742 = getelementptr inbounds %struct.wiphy, %struct.wiphy* %741, i32 0, i32 52
  %743 = load %struct.dentry*, %struct.dentry** %742, align 32
  %744 = bitcast %struct.dentry* %743 to i8*
  %745 = call zeroext i1 @IS_ERR(i8* %744)
  br i1 %745, label %746, label %749

; <label>:746:                                    ; preds = %731
  %747 = getelementptr inbounds %struct.cfg80211_registered_device, %struct.cfg80211_registered_device* %3, i32 0, i32 42
  %748 = getelementptr inbounds %struct.wiphy, %struct.wiphy* %747, i32 0, i32 52
  store %struct.dentry* null, %struct.dentry** %748, align 32
  br label %749

; <label>:749:                                    ; preds = %746, %731
  call void @cfg80211_debugfs_rdev_add(%struct.cfg80211_registered_device* %3)
  call void @nl80211_notify_wiphy(%struct.cfg80211_registered_device* %3, i32 3)
  %750 = getelementptr inbounds %struct.wiphy, %struct.wiphy* %0, i32 0, i32 11
  %751 = load i32, i32* %750, align 8
  %752 = and i32 %751, 1
  %753 = icmp ne i32 %752, 0
  br i1 %753, label %754, label %762

; <label>:754:                                    ; preds = %749
  %755 = call i32 @get_wiphy_idx(%struct.wiphy* %0)
  %756 = getelementptr inbounds %struct.regulatory_request, %struct.regulatory_request* %2, i32 0, i32 1
  store i32 %755, i32* %756, align 8
  %757 = getelementptr inbounds %struct.regulatory_request, %struct.regulatory_request* %2, i32 0, i32 2
  store i32 2, i32* %757, align 4
  %758 = getelementptr inbounds %struct.regulatory_request, %struct.regulatory_request* %2, i32 0, i32 4
  %759 = getelementptr inbounds [2 x i8], [2 x i8]* %758, i64 0, i64 0
  store i8 57, i8* %759, align 4
  %760 = getelementptr inbounds %struct.regulatory_request, %struct.regulatory_request* %2, i32 0, i32 4
  %761 = getelementptr inbounds [2 x i8], [2 x i8]* %760, i64 0, i64 1
  store i8 57, i8* %761, align 1
  call void @nl80211_send_reg_change_event(%struct.regulatory_request* %2)
  br label %762

; <label>:762:                                    ; preds = %754, %749
  %763 = getelementptr inbounds %struct.wiphy, %struct.wiphy* %0, i32 0, i32 43
  %764 = load i8, i8* %763, align 8
  %765 = zext i8 %764 to i32
  %766 = icmp ne i32 %765, 0
  br i1 %766, label %767, label %.loopexit9

; <label>:767:                                    ; preds = %762
  %768 = getelementptr inbounds %struct.wiphy, %struct.wiphy* %0, i32 0, i32 45
  %769 = load i32, i32* %768, align 8
  %770 = icmp ne i32 %769, 0
  br i1 %770, label %771, label %.loopexit9

; <label>:771:                                    ; preds = %767
  %772 = getelementptr inbounds %struct.wiphy, %struct.wiphy* %0, i32 0, i32 44
  %773 = load %struct.wiphy_iftype_ext_capab*, %struct.wiphy_iftype_ext_capab** %772, align 32
  %774 = icmp ne %struct.wiphy_iftype_ext_capab* %773, null
  br i1 %774, label %775, label %.loopexit9

; <label>:775:                                    ; preds = %771
  %776 = getelementptr inbounds %struct.wiphy, %struct.wiphy* %0, i32 0, i32 44
  %777 = load %struct.wiphy_iftype_ext_capab*, %struct.wiphy_iftype_ext_capab** %776, align 32
  br label %778

; <label>:778:                                    ; preds = %850, %775
  %.01 = phi i8 [ 0, %775 ], [ %851, %850 ]
  %779 = zext i8 %.01 to i32
  %780 = getelementptr inbounds %struct.wiphy, %struct.wiphy* %0, i32 0, i32 43
  %781 = load i8, i8* %780, align 8
  %782 = zext i8 %781 to i32
  %783 = icmp slt i32 %779, %782
  br i1 %783, label %784, label %.loopexit9

; <label>:784:                                    ; preds = %778
  %785 = getelementptr inbounds %struct.wiphy_iftype_ext_capab, %struct.wiphy_iftype_ext_capab* %777, i64 0
  %786 = getelementptr inbounds %struct.wiphy_iftype_ext_capab, %struct.wiphy_iftype_ext_capab* %785, i32 0, i32 3
  %787 = load i8, i8* %786, align 8
  %788 = zext i8 %787 to i32
  %789 = zext i8 %.01 to i32
  %790 = icmp sgt i32 %788, %789
  br i1 %790, label %791, label %798

; <label>:791:                                    ; preds = %784
  %792 = getelementptr inbounds %struct.wiphy_iftype_ext_capab, %struct.wiphy_iftype_ext_capab* %777, i64 0
  %793 = getelementptr inbounds %struct.wiphy_iftype_ext_capab, %struct.wiphy_iftype_ext_capab* %792, i32 0, i32 1
  %794 = load i8*, i8** %793, align 8
  %795 = zext i8 %.01 to i64
  %796 = getelementptr inbounds i8, i8* %794, i64 %795
  %797 = load i8, i8* %796, align 1
  br label %798

; <label>:798:                                    ; preds = %791, %784, %810
  %.18 = phi i32 [ %822, %810 ], [ 1, %784 ], [ 1, %791 ]
  %.1 = phi i8 [ %821, %810 ], [ %797, %791 ], [ 0, %784 ]
  %799 = getelementptr inbounds %struct.wiphy, %struct.wiphy* %0, i32 0, i32 45
  %800 = load i32, i32* %799, align 8
  %801 = icmp ult i32 %.18, %800
  br i1 %801, label %802, label %.loopexit

; <label>:802:                                    ; preds = %798
  %803 = zext i8 %.01 to i32
  %804 = sext i32 %.18 to i64
  %805 = getelementptr inbounds %struct.wiphy_iftype_ext_capab, %struct.wiphy_iftype_ext_capab* %777, i64 %804
  %806 = getelementptr inbounds %struct.wiphy_iftype_ext_capab, %struct.wiphy_iftype_ext_capab* %805, i32 0, i32 3
  %807 = load i8, i8* %806, align 8
  %808 = zext i8 %807 to i32
  %809 = icmp sge i32 %803, %808
  br i1 %809, label %.loopexit, label %810

; <label>:810:                                    ; preds = %802
  %811 = sext i32 %.18 to i64
  %812 = getelementptr inbounds %struct.wiphy_iftype_ext_capab, %struct.wiphy_iftype_ext_capab* %777, i64 %811
  %813 = getelementptr inbounds %struct.wiphy_iftype_ext_capab, %struct.wiphy_iftype_ext_capab* %812, i32 0, i32 1
  %814 = load i8*, i8** %813, align 8
  %815 = zext i8 %.01 to i64
  %816 = getelementptr inbounds i8, i8* %814, i64 %815
  %817 = load i8, i8* %816, align 1
  %818 = zext i8 %817 to i32
  %819 = zext i8 %.1 to i32
  %820 = and i32 %819, %818
  %821 = trunc i32 %820 to i8
  %822 = add nsw i32 %.18, 1
  br label %798

.loopexit:                                        ; preds = %798, %802
  %.2 = phi i8 [ 0, %802 ], [ %.1, %798 ]
  %823 = getelementptr inbounds %struct.wiphy, %struct.wiphy* %0, i32 0, i32 41
  %824 = load i8*, i8** %823, align 8
  %825 = zext i8 %.01 to i64
  %826 = getelementptr inbounds i8, i8* %824, i64 %825
  %827 = load i8, i8* %826, align 1
  %828 = zext i8 %827 to i32
  %829 = zext i8 %.2 to i32
  %830 = xor i32 %829, -1
  %831 = and i32 %828, %830
  %832 = icmp ne i32 %831, 0
  %833 = xor i1 %832, true
  %834 = xor i1 %833, true
  %835 = zext i1 %834 to i32
  %836 = icmp ne i32 %835, 0
  %837 = xor i1 %836, true
  %838 = xor i1 %837, true
  %839 = zext i1 %838 to i32
  %840 = sext i32 %839 to i64
  %841 = icmp ne i64 %840, 0
  br i1 %841, label %842, label %843

; <label>:842:                                    ; preds = %.loopexit
  call void @warn_slowpath_null(i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.1, i32 0, i32 0), i32 833)
  br label %843

; <label>:843:                                    ; preds = %842, %.loopexit
  %844 = icmp ne i32 %835, 0
  %845 = xor i1 %844, true
  %846 = xor i1 %845, true
  %847 = zext i1 %846 to i32
  %848 = sext i32 %847 to i64
  %849 = icmp ne i64 %848, 0
  br i1 %849, label %.loopexit9, label %850

; <label>:850:                                    ; preds = %843
  %851 = add i8 %.01, 1
  br label %778

.loopexit9:                                       ; preds = %843, %778, %771, %767, %762
  %852 = getelementptr inbounds %struct.cfg80211_registered_device, %struct.cfg80211_registered_device* %3, i32 0, i32 42
  %853 = getelementptr inbounds %struct.wiphy, %struct.wiphy* %852, i32 0, i32 51
  store i8 1, i8* %853, align 8
  call void @rtnl_unlock()
  %854 = getelementptr inbounds %struct.cfg80211_registered_device, %struct.cfg80211_registered_device* %3, i32 0, i32 3
  %855 = load %struct.rfkill*, %struct.rfkill** %854, align 16
  %856 = call i32 @rfkill_register(%struct.rfkill* %855)
  %857 = icmp ne i32 %856, 0
  br i1 %857, label %858, label %863

; <label>:858:                                    ; preds = %.loopexit9
  %859 = getelementptr inbounds %struct.cfg80211_registered_device, %struct.cfg80211_registered_device* %3, i32 0, i32 3
  %860 = load %struct.rfkill*, %struct.rfkill** %859, align 16
  call void @rfkill_destroy(%struct.rfkill* %860)
  %861 = getelementptr inbounds %struct.cfg80211_registered_device, %struct.cfg80211_registered_device* %3, i32 0, i32 3
  store %struct.rfkill* null, %struct.rfkill** %861, align 16
  %862 = getelementptr inbounds %struct.cfg80211_registered_device, %struct.cfg80211_registered_device* %3, i32 0, i32 42
  call void @wiphy_unregister(%struct.wiphy* %862)
  br label %863

; <label>:863:                                    ; preds = %.loopexit9, %714, %608, %565, %539, %512, %443, %414, %378, %341, %313, %284, %233, %194, %171, %115, %78, %36, %858, %730, %665
  %.0 = phi i32 [ %728, %730 ], [ %856, %858 ], [ -22, %665 ], [ -22, %36 ], [ -22, %78 ], [ -22, %115 ], [ -22, %171 ], [ -22, %194 ], [ -22, %233 ], [ -22, %284 ], [ -22, %313 ], [ -22, %341 ], [ -22, %378 ], [ -22, %414 ], [ -22, %443 ], [ %513, %512 ], [ -22, %539 ], [ -22, %565 ], [ -22, %608 ], [ -22, %714 ], [ 0, %.loopexit9 ]
  ret i32 %.0
}

; Function Attrs: noinline nounwind uwtable
define internal zeroext i1 @is_zero_ether_addr(i8*) #0 {
  %2 = bitcast i8* %0 to i32*
  %3 = load i32, i32* %2, align 4
  %4 = getelementptr inbounds i8, i8* %0, i64 4
  %5 = bitcast i8* %4 to i16*
  %6 = load i16, i16* %5, align 2
  %7 = zext i16 %6 to i32
  %8 = or i32 %3, %7
  %9 = icmp eq i32 %8, 0
  ret i1 %9
}

declare i32 @memcmp(i8*, i8*, i64) #1

declare i8* @__memcpy(i8*, i8*, i64) #1

; Function Attrs: noinline nounwind uwtable
define internal i32 @wiphy_verify_combinations(%struct.wiphy*) #0 {
  br label %2

; <label>:2:                                      ; preds = %388, %1
  %.03 = phi i32 [ 0, %1 ], [ %389, %388 ]
  %3 = getelementptr inbounds %struct.wiphy, %struct.wiphy* %0, i32 0, i32 5
  %4 = load i32, i32* %3, align 8
  %5 = icmp slt i32 %.03, %4
  br i1 %5, label %6, label %390

; <label>:6:                                      ; preds = %2
  %7 = getelementptr inbounds %struct.wiphy, %struct.wiphy* %0, i32 0, i32 4
  %8 = load %struct.ieee80211_iface_combination*, %struct.ieee80211_iface_combination** %7, align 32
  %9 = sext i32 %.03 to i64
  %10 = getelementptr inbounds %struct.ieee80211_iface_combination, %struct.ieee80211_iface_combination* %8, i64 %9
  %11 = getelementptr inbounds %struct.ieee80211_iface_combination, %struct.ieee80211_iface_combination* %10, i32 0, i32 2
  %12 = load i16, i16* %11, align 4
  %13 = zext i16 %12 to i32
  %14 = icmp slt i32 %13, 2
  br i1 %14, label %15, label %20

; <label>:15:                                     ; preds = %6
  %16 = getelementptr inbounds %struct.ieee80211_iface_combination, %struct.ieee80211_iface_combination* %10, i32 0, i32 5
  %17 = load i8, i8* %16, align 8
  %18 = icmp ne i8 %17, 0
  %19 = xor i1 %18, true
  br label %20

; <label>:20:                                     ; preds = %15, %6
  %21 = phi i1 [ false, %6 ], [ %19, %15 ]
  %22 = xor i1 %21, true
  %23 = xor i1 %22, true
  %24 = zext i1 %23 to i32
  %25 = icmp ne i32 %24, 0
  %26 = xor i1 %25, true
  %27 = xor i1 %26, true
  %28 = zext i1 %27 to i32
  %29 = sext i32 %28 to i64
  %30 = icmp ne i64 %29, 0
  br i1 %30, label %31, label %32

; <label>:31:                                     ; preds = %20
  call void @warn_slowpath_null(i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.1, i32 0, i32 0), i32 517)
  br label %32

; <label>:32:                                     ; preds = %31, %20
  %33 = icmp ne i32 %24, 0
  %34 = xor i1 %33, true
  %35 = xor i1 %34, true
  %36 = zext i1 %35 to i32
  %37 = sext i32 %36 to i64
  %38 = icmp ne i64 %37, 0
  br i1 %38, label %390, label %39

; <label>:39:                                     ; preds = %32
  %40 = getelementptr inbounds %struct.ieee80211_iface_combination, %struct.ieee80211_iface_combination* %10, i32 0, i32 1
  %41 = load i32, i32* %40, align 8
  %42 = icmp ne i32 %41, 0
  %43 = xor i1 %42, true
  %44 = xor i1 %43, true
  %45 = xor i1 %44, true
  %46 = zext i1 %45 to i32
  %47 = icmp ne i32 %46, 0
  %48 = xor i1 %47, true
  %49 = xor i1 %48, true
  %50 = zext i1 %49 to i32
  %51 = sext i32 %50 to i64
  %52 = icmp ne i64 %51, 0
  br i1 %52, label %53, label %54

; <label>:53:                                     ; preds = %39
  call void @warn_slowpath_null(i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.1, i32 0, i32 0), i32 521)
  br label %54

; <label>:54:                                     ; preds = %53, %39
  %55 = icmp ne i32 %46, 0
  %56 = xor i1 %55, true
  %57 = xor i1 %56, true
  %58 = zext i1 %57 to i32
  %59 = sext i32 %58 to i64
  %60 = icmp ne i64 %59, 0
  br i1 %60, label %390, label %61

; <label>:61:                                     ; preds = %54
  %62 = getelementptr inbounds %struct.ieee80211_iface_combination, %struct.ieee80211_iface_combination* %10, i32 0, i32 1
  %63 = load i32, i32* %62, align 8
  %64 = icmp ugt i32 %63, 10
  %65 = xor i1 %64, true
  %66 = xor i1 %65, true
  %67 = zext i1 %66 to i32
  %68 = icmp ne i32 %67, 0
  %69 = xor i1 %68, true
  %70 = xor i1 %69, true
  %71 = zext i1 %70 to i32
  %72 = sext i32 %71 to i64
  %73 = icmp ne i64 %72, 0
  br i1 %73, label %74, label %75

; <label>:74:                                     ; preds = %61
  call void @warn_slowpath_null(i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.1, i32 0, i32 0), i32 529)
  br label %75

; <label>:75:                                     ; preds = %74, %61
  %76 = icmp ne i32 %67, 0
  %77 = xor i1 %76, true
  %78 = xor i1 %77, true
  %79 = zext i1 %78 to i32
  %80 = sext i32 %79 to i64
  %81 = icmp ne i64 %80, 0
  br i1 %81, label %390, label %82

; <label>:82:                                     ; preds = %75
  %83 = getelementptr inbounds %struct.ieee80211_iface_combination, %struct.ieee80211_iface_combination* %10, i32 0, i32 5
  %84 = load i8, i8* %83, align 8
  %85 = zext i8 %84 to i32
  %86 = icmp ne i32 %85, 0
  br i1 %86, label %87, label %91

; <label>:87:                                     ; preds = %82
  %88 = getelementptr inbounds %struct.ieee80211_iface_combination, %struct.ieee80211_iface_combination* %10, i32 0, i32 1
  %89 = load i32, i32* %88, align 8
  %90 = icmp ugt i32 %89, 1
  br label %91

; <label>:91:                                     ; preds = %87, %82
  %92 = phi i1 [ false, %82 ], [ %90, %87 ]
  %93 = xor i1 %92, true
  %94 = xor i1 %93, true
  %95 = zext i1 %94 to i32
  %96 = icmp ne i32 %95, 0
  %97 = xor i1 %96, true
  %98 = xor i1 %97, true
  %99 = zext i1 %98 to i32
  %100 = sext i32 %99 to i64
  %101 = icmp ne i64 %100, 0
  br i1 %101, label %102, label %103

; <label>:102:                                    ; preds = %91
  call void @warn_slowpath_null(i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.1, i32 0, i32 0), i32 534)
  br label %103

; <label>:103:                                    ; preds = %102, %91
  %104 = icmp ne i32 %95, 0
  %105 = xor i1 %104, true
  %106 = xor i1 %105, true
  %107 = zext i1 %106 to i32
  %108 = sext i32 %107 to i64
  %109 = icmp ne i64 %108, 0
  br i1 %109, label %390, label %110

; <label>:110:                                    ; preds = %103
  %111 = getelementptr inbounds %struct.ieee80211_iface_combination, %struct.ieee80211_iface_combination* %10, i32 0, i32 3
  %112 = load i8, i8* %111, align 2
  %113 = icmp ne i8 %112, 0
  %114 = xor i1 %113, true
  %115 = xor i1 %114, true
  %116 = xor i1 %115, true
  %117 = zext i1 %116 to i32
  %118 = icmp ne i32 %117, 0
  %119 = xor i1 %118, true
  %120 = xor i1 %119, true
  %121 = zext i1 %120 to i32
  %122 = sext i32 %121 to i64
  %123 = icmp ne i64 %122, 0
  br i1 %123, label %124, label %125

; <label>:124:                                    ; preds = %110
  call void @warn_slowpath_null(i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.1, i32 0, i32 0), i32 537)
  br label %125

; <label>:125:                                    ; preds = %124, %110
  %126 = icmp ne i32 %117, 0
  %127 = xor i1 %126, true
  %128 = xor i1 %127, true
  %129 = zext i1 %128 to i32
  %130 = sext i32 %129 to i64
  %131 = icmp ne i64 %130, 0
  br i1 %131, label %390, label %132

; <label>:132:                                    ; preds = %125, %343
  %.04 = phi i32 [ %344, %343 ], [ 0, %125 ]
  %.02 = phi i32 [ %318, %343 ], [ 0, %125 ]
  %.01 = phi i16 [ %169, %343 ], [ 0, %125 ]
  %133 = getelementptr inbounds %struct.ieee80211_iface_combination, %struct.ieee80211_iface_combination* %10, i32 0, i32 3
  %134 = load i8, i8* %133, align 2
  %135 = zext i8 %134 to i32
  %136 = icmp slt i32 %.04, %135
  br i1 %136, label %137, label %345

; <label>:137:                                    ; preds = %132
  %138 = getelementptr inbounds %struct.ieee80211_iface_combination, %struct.ieee80211_iface_combination* %10, i32 0, i32 0
  %139 = load %struct.ieee80211_iface_limit*, %struct.ieee80211_iface_limit** %138, align 8
  %140 = sext i32 %.04 to i64
  %141 = getelementptr inbounds %struct.ieee80211_iface_limit, %struct.ieee80211_iface_limit* %139, i64 %140
  %142 = getelementptr inbounds %struct.ieee80211_iface_limit, %struct.ieee80211_iface_limit* %141, i32 0, i32 1
  %143 = load i16, i16* %142, align 2
  %144 = zext i16 %143 to i32
  %145 = zext i16 %.01 to i32
  %146 = and i32 %144, %145
  %147 = icmp ne i32 %146, 0
  %148 = xor i1 %147, true
  %149 = xor i1 %148, true
  %150 = zext i1 %149 to i32
  %151 = icmp ne i32 %150, 0
  %152 = xor i1 %151, true
  %153 = xor i1 %152, true
  %154 = zext i1 %153 to i32
  %155 = sext i32 %154 to i64
  %156 = icmp ne i64 %155, 0
  br i1 %156, label %157, label %158

; <label>:157:                                    ; preds = %137
  call void @warn_slowpath_null(i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.1, i32 0, i32 0), i32 544)
  br label %158

; <label>:158:                                    ; preds = %157, %137
  %159 = icmp ne i32 %150, 0
  %160 = xor i1 %159, true
  %161 = xor i1 %160, true
  %162 = zext i1 %161 to i32
  %163 = sext i32 %162 to i64
  %164 = icmp ne i64 %163, 0
  br i1 %164, label %390, label %165

; <label>:165:                                    ; preds = %158
  %166 = zext i16 %143 to i32
  %167 = zext i16 %.01 to i32
  %168 = or i32 %167, %166
  %169 = trunc i32 %168 to i16
  %170 = getelementptr inbounds %struct.ieee80211_iface_combination, %struct.ieee80211_iface_combination* %10, i32 0, i32 0
  %171 = load %struct.ieee80211_iface_limit*, %struct.ieee80211_iface_limit** %170, align 8
  %172 = sext i32 %.04 to i64
  %173 = getelementptr inbounds %struct.ieee80211_iface_limit, %struct.ieee80211_iface_limit* %171, i64 %172
  %174 = getelementptr inbounds %struct.ieee80211_iface_limit, %struct.ieee80211_iface_limit* %173, i32 0, i32 0
  %175 = load i16, i16* %174, align 2
  %176 = icmp ne i16 %175, 0
  %177 = xor i1 %176, true
  %178 = xor i1 %177, true
  %179 = xor i1 %178, true
  %180 = zext i1 %179 to i32
  %181 = icmp ne i32 %180, 0
  %182 = xor i1 %181, true
  %183 = xor i1 %182, true
  %184 = zext i1 %183 to i32
  %185 = sext i32 %184 to i64
  %186 = icmp ne i64 %185, 0
  br i1 %186, label %187, label %188

; <label>:187:                                    ; preds = %165
  call void @warn_slowpath_null(i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.1, i32 0, i32 0), i32 548)
  br label %188

; <label>:188:                                    ; preds = %187, %165
  %189 = icmp ne i32 %180, 0
  %190 = xor i1 %189, true
  %191 = xor i1 %190, true
  %192 = zext i1 %191 to i32
  %193 = sext i32 %192 to i64
  %194 = icmp ne i64 %193, 0
  br i1 %194, label %390, label %195

; <label>:195:                                    ; preds = %188
  %196 = getelementptr inbounds %struct.wiphy, %struct.wiphy* %0, i32 0, i32 6
  %197 = load i16, i16* %196, align 4
  %198 = zext i16 %197 to i32
  %199 = zext i16 %143 to i32
  %200 = and i32 %198, %199
  %201 = icmp ne i32 %200, 0
  %202 = xor i1 %201, true
  %203 = xor i1 %202, true
  %204 = zext i1 %203 to i32
  %205 = icmp ne i32 %204, 0
  %206 = xor i1 %205, true
  %207 = xor i1 %206, true
  %208 = zext i1 %207 to i32
  %209 = sext i32 %208 to i64
  %210 = icmp ne i64 %209, 0
  br i1 %210, label %211, label %212

; <label>:211:                                    ; preds = %195
  call void @warn_slowpath_null(i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.1, i32 0, i32 0), i32 552)
  br label %212

; <label>:212:                                    ; preds = %211, %195
  %213 = icmp ne i32 %204, 0
  %214 = xor i1 %213, true
  %215 = xor i1 %214, true
  %216 = zext i1 %215 to i32
  %217 = sext i32 %216 to i64
  %218 = icmp ne i64 %217, 0
  br i1 %218, label %390, label %219

; <label>:219:                                    ; preds = %212
  %220 = zext i16 %143 to i64
  %221 = and i64 %220, 1024
  %222 = icmp ne i64 %221, 0
  br i1 %222, label %223, label %232

; <label>:223:                                    ; preds = %219
  %224 = getelementptr inbounds %struct.ieee80211_iface_combination, %struct.ieee80211_iface_combination* %10, i32 0, i32 0
  %225 = load %struct.ieee80211_iface_limit*, %struct.ieee80211_iface_limit** %224, align 8
  %226 = sext i32 %.04 to i64
  %227 = getelementptr inbounds %struct.ieee80211_iface_limit, %struct.ieee80211_iface_limit* %225, i64 %226
  %228 = getelementptr inbounds %struct.ieee80211_iface_limit, %struct.ieee80211_iface_limit* %227, i32 0, i32 0
  %229 = load i16, i16* %228, align 2
  %230 = zext i16 %229 to i32
  %231 = icmp sgt i32 %230, 1
  br label %232

; <label>:232:                                    ; preds = %223, %219
  %233 = phi i1 [ false, %219 ], [ %231, %223 ]
  %234 = xor i1 %233, true
  %235 = xor i1 %234, true
  %236 = zext i1 %235 to i32
  %237 = icmp ne i32 %236, 0
  %238 = xor i1 %237, true
  %239 = xor i1 %238, true
  %240 = zext i1 %239 to i32
  %241 = sext i32 %240 to i64
  %242 = icmp ne i64 %241, 0
  br i1 %242, label %243, label %244

; <label>:243:                                    ; preds = %232
  call void @warn_slowpath_null(i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.1, i32 0, i32 0), i32 557)
  br label %244

; <label>:244:                                    ; preds = %243, %232
  %245 = icmp ne i32 %236, 0
  %246 = xor i1 %245, true
  %247 = xor i1 %246, true
  %248 = zext i1 %247 to i32
  %249 = sext i32 %248 to i64
  %250 = icmp ne i64 %249, 0
  br i1 %250, label %390, label %251

; <label>:251:                                    ; preds = %244
  %252 = zext i16 %143 to i64
  %253 = and i64 %252, 4096
  %254 = icmp ne i64 %253, 0
  br i1 %254, label %255, label %264

; <label>:255:                                    ; preds = %251
  %256 = getelementptr inbounds %struct.ieee80211_iface_combination, %struct.ieee80211_iface_combination* %10, i32 0, i32 0
  %257 = load %struct.ieee80211_iface_limit*, %struct.ieee80211_iface_limit** %256, align 8
  %258 = sext i32 %.04 to i64
  %259 = getelementptr inbounds %struct.ieee80211_iface_limit, %struct.ieee80211_iface_limit* %257, i64 %258
  %260 = getelementptr inbounds %struct.ieee80211_iface_limit, %struct.ieee80211_iface_limit* %259, i32 0, i32 0
  %261 = load i16, i16* %260, align 2
  %262 = zext i16 %261 to i32
  %263 = icmp sgt i32 %262, 1
  br label %264

; <label>:264:                                    ; preds = %255, %251
  %265 = phi i1 [ false, %251 ], [ %263, %255 ]
  %266 = xor i1 %265, true
  %267 = xor i1 %266, true
  %268 = zext i1 %267 to i32
  %269 = icmp ne i32 %268, 0
  %270 = xor i1 %269, true
  %271 = xor i1 %270, true
  %272 = zext i1 %271 to i32
  %273 = sext i32 %272 to i64
  %274 = icmp ne i64 %273, 0
  br i1 %274, label %275, label %276

; <label>:275:                                    ; preds = %264
  call void @warn_slowpath_null(i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.1, i32 0, i32 0), i32 562)
  br label %276

; <label>:276:                                    ; preds = %275, %264
  %277 = icmp ne i32 %268, 0
  %278 = xor i1 %277, true
  %279 = xor i1 %278, true
  %280 = zext i1 %279 to i32
  %281 = sext i32 %280 to i64
  %282 = icmp ne i64 %281, 0
  br i1 %282, label %390, label %283

; <label>:283:                                    ; preds = %276
  %284 = zext i16 %143 to i64
  %285 = and i64 %284, 2
  %286 = icmp ne i64 %285, 0
  br i1 %286, label %287, label %291

; <label>:287:                                    ; preds = %283
  %288 = getelementptr inbounds %struct.ieee80211_iface_combination, %struct.ieee80211_iface_combination* %10, i32 0, i32 7
  %289 = load i32, i32* %288, align 4
  %290 = icmp ne i32 %289, 0
  br label %291

; <label>:291:                                    ; preds = %287, %283
  %292 = phi i1 [ false, %283 ], [ %290, %287 ]
  %293 = xor i1 %292, true
  %294 = xor i1 %293, true
  %295 = zext i1 %294 to i32
  %296 = icmp ne i32 %295, 0
  %297 = xor i1 %296, true
  %298 = xor i1 %297, true
  %299 = zext i1 %298 to i32
  %300 = sext i32 %299 to i64
  %301 = icmp ne i64 %300, 0
  br i1 %301, label %302, label %303

; <label>:302:                                    ; preds = %291
  call void @warn_slowpath_null(i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.1, i32 0, i32 0), i32 576)
  br label %303

; <label>:303:                                    ; preds = %302, %291
  %304 = icmp ne i32 %295, 0
  %305 = xor i1 %304, true
  %306 = xor i1 %305, true
  %307 = zext i1 %306 to i32
  %308 = sext i32 %307 to i64
  %309 = icmp ne i64 %308, 0
  br i1 %309, label %390, label %310

; <label>:310:                                    ; preds = %303
  %311 = getelementptr inbounds %struct.ieee80211_iface_combination, %struct.ieee80211_iface_combination* %10, i32 0, i32 0
  %312 = load %struct.ieee80211_iface_limit*, %struct.ieee80211_iface_limit** %311, align 8
  %313 = sext i32 %.04 to i64
  %314 = getelementptr inbounds %struct.ieee80211_iface_limit, %struct.ieee80211_iface_limit* %312, i64 %313
  %315 = getelementptr inbounds %struct.ieee80211_iface_limit, %struct.ieee80211_iface_limit* %314, i32 0, i32 0
  %316 = load i16, i16* %315, align 2
  %317 = zext i16 %316 to i32
  %318 = add i32 %.02, %317
  %319 = getelementptr inbounds %struct.wiphy, %struct.wiphy* %0, i32 0, i32 8
  %320 = load i16, i16* %319, align 16
  %321 = zext i16 %320 to i32
  %322 = zext i16 %143 to i32
  %323 = and i32 %321, %322
  %324 = zext i16 %143 to i32
  %325 = icmp ne i32 %323, %324
  %326 = xor i1 %325, true
  %327 = xor i1 %326, true
  %328 = zext i1 %327 to i32
  %329 = icmp ne i32 %328, 0
  %330 = xor i1 %329, true
  %331 = xor i1 %330, true
  %332 = zext i1 %331 to i32
  %333 = sext i32 %332 to i64
  %334 = icmp ne i64 %333, 0
  br i1 %334, label %335, label %336

; <label>:335:                                    ; preds = %310
  call void @warn_slowpath_null(i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.1, i32 0, i32 0), i32 585)
  br label %336

; <label>:336:                                    ; preds = %335, %310
  %337 = icmp ne i32 %328, 0
  %338 = xor i1 %337, true
  %339 = xor i1 %338, true
  %340 = zext i1 %339 to i32
  %341 = sext i32 %340 to i64
  %342 = icmp ne i64 %341, 0
  br i1 %342, label %390, label %343

; <label>:343:                                    ; preds = %336
  %344 = add nsw i32 %.04, 1
  br label %132

; <label>:345:                                    ; preds = %132
  %346 = zext i16 %.01 to i64
  %347 = and i64 %346, 32
  %348 = icmp ne i64 %347, 0
  %349 = xor i1 %348, true
  %350 = xor i1 %349, true
  %351 = zext i1 %350 to i32
  %352 = icmp ne i32 %351, 0
  %353 = xor i1 %352, true
  %354 = xor i1 %353, true
  %355 = zext i1 %354 to i32
  %356 = sext i32 %355 to i64
  %357 = icmp ne i64 %356, 0
  br i1 %357, label %358, label %359

; <label>:358:                                    ; preds = %345
  call void @warn_slowpath_null(i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.1, i32 0, i32 0), i32 590)
  br label %359

; <label>:359:                                    ; preds = %358, %345
  %360 = icmp ne i32 %351, 0
  %361 = xor i1 %360, true
  %362 = xor i1 %361, true
  %363 = zext i1 %362 to i32
  %364 = sext i32 %363 to i64
  %365 = icmp ne i64 %364, 0
  br i1 %365, label %390, label %366

; <label>:366:                                    ; preds = %359
  %367 = getelementptr inbounds %struct.ieee80211_iface_combination, %struct.ieee80211_iface_combination* %10, i32 0, i32 2
  %368 = load i16, i16* %367, align 4
  %369 = zext i16 %368 to i32
  %370 = icmp ult i32 %.02, %369
  %371 = xor i1 %370, true
  %372 = xor i1 %371, true
  %373 = zext i1 %372 to i32
  %374 = icmp ne i32 %373, 0
  %375 = xor i1 %374, true
  %376 = xor i1 %375, true
  %377 = zext i1 %376 to i32
  %378 = sext i32 %377 to i64
  %379 = icmp ne i64 %378, 0
  br i1 %379, label %380, label %381

; <label>:380:                                    ; preds = %366
  call void @warn_slowpath_null(i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.1, i32 0, i32 0), i32 595)
  br label %381

; <label>:381:                                    ; preds = %380, %366
  %382 = icmp ne i32 %373, 0
  %383 = xor i1 %382, true
  %384 = xor i1 %383, true
  %385 = zext i1 %384 to i32
  %386 = sext i32 %385 to i64
  %387 = icmp ne i64 %386, 0
  br i1 %387, label %390, label %388

; <label>:388:                                    ; preds = %381
  %389 = add nsw i32 %.03, 1
  br label %2

; <label>:390:                                    ; preds = %2, %381, %359, %336, %303, %276, %244, %212, %188, %158, %125, %103, %75, %54, %32
  %.0 = phi i32 [ -22, %32 ], [ -22, %54 ], [ -22, %75 ], [ -22, %103 ], [ -22, %125 ], [ -22, %158 ], [ -22, %188 ], [ -22, %212 ], [ -22, %244 ], [ -22, %276 ], [ -22, %303 ], [ -22, %336 ], [ -22, %359 ], [ -22, %381 ], [ 0, %2 ]
  ret i32 %.0
}

declare void @ieee80211_set_bitrate_flags(%struct.wiphy*) #1

declare i32 @device_add(%struct.device*) #1

declare void @wiphy_regulatory_register(%struct.wiphy*) #1

; Function Attrs: noinline nounwind uwtable
define internal void @list_add_rcu(%struct.list_head*, %struct.list_head*) #0 {
  %3 = getelementptr inbounds %struct.list_head, %struct.list_head* %1, i32 0, i32 0
  %4 = load %struct.list_head*, %struct.list_head** %3, align 8
  call void @__list_add_rcu(%struct.list_head* %0, %struct.list_head* %1, %struct.list_head* %4)
  ret void
}

declare %struct.dentry* @debugfs_create_dir(i8*, %struct.dentry*) #1

; Function Attrs: noinline nounwind uwtable
define internal zeroext i1 @IS_ERR(i8*) #0 {
  %2 = ptrtoint i8* %0 to i64
  %3 = inttoptr i64 %2 to i8*
  %4 = ptrtoint i8* %3 to i64
  %5 = icmp uge i64 %4, -4095
  %6 = xor i1 %5, true
  %7 = xor i1 %6, true
  %8 = zext i1 %7 to i32
  %9 = sext i32 %8 to i64
  %10 = icmp ne i64 %9, 0
  ret i1 %10
}

; Function Attrs: noinline nounwind uwtable
define internal void @cfg80211_debugfs_rdev_add(%struct.cfg80211_registered_device*) #0 {
  ret void
}

; Function Attrs: noinline nounwind uwtable
define internal void @nl80211_send_reg_change_event(%struct.regulatory_request*) #0 {
  call void @nl80211_common_reg_change_event(i32 36, %struct.regulatory_request* %0)
  ret void
}

declare i32 @rfkill_register(%struct.rfkill*) #1

declare void @rfkill_destroy(%struct.rfkill*) #1

; Function Attrs: noinline nounwind uwtable
define void @wiphy_unregister(%struct.wiphy*) #0 {
  %2 = alloca %struct.__wait_queue, align 8
  %3 = call %struct.cfg80211_registered_device* @wiphy_to_rdev(%struct.wiphy* %0)
  %4 = call i32 @_cond_resched()
  call void @rtnl_lock()
  %5 = getelementptr inbounds %struct.cfg80211_registered_device, %struct.cfg80211_registered_device* %3, i32 0, i32 11
  %6 = load i32, i32* %5, align 8
  call void @rtnl_unlock()
  %7 = icmp eq i32 %6, 0
  %8 = zext i1 %7 to i32
  %9 = icmp ne i32 %8, 0
  br i1 %9, label %22, label %10

; <label>:10:                                     ; preds = %1
  call void @init_wait_entry(%struct.__wait_queue* %2, i32 0)
  br label %11

; <label>:11:                                     ; preds = %19, %10
  %12 = getelementptr inbounds %struct.cfg80211_registered_device, %struct.cfg80211_registered_device* %3, i32 0, i32 12
  %13 = call i64 @prepare_to_wait_event(%struct.__wait_queue_head* %12, %struct.__wait_queue* %2, i32 2)
  call void @rtnl_lock()
  %14 = getelementptr inbounds %struct.cfg80211_registered_device, %struct.cfg80211_registered_device* %3, i32 0, i32 11
  %15 = load i32, i32* %14, align 8
  call void @rtnl_unlock()
  %16 = icmp eq i32 %15, 0
  %17 = zext i1 %16 to i32
  %18 = icmp ne i32 %17, 0
  br i1 %18, label %20, label %19

; <label>:19:                                     ; preds = %11
  call void @schedule()
  br label %11

; <label>:20:                                     ; preds = %11
  %21 = getelementptr inbounds %struct.cfg80211_registered_device, %struct.cfg80211_registered_device* %3, i32 0, i32 12
  call void @finish_wait(%struct.__wait_queue_head* %21, %struct.__wait_queue* %2)
  br label %22

; <label>:22:                                     ; preds = %1, %20
  %23 = getelementptr inbounds %struct.cfg80211_registered_device, %struct.cfg80211_registered_device* %3, i32 0, i32 3
  %24 = load %struct.rfkill*, %struct.rfkill** %23, align 16
  %25 = icmp ne %struct.rfkill* %24, null
  br i1 %25, label %26, label %29

; <label>:26:                                     ; preds = %22
  %27 = getelementptr inbounds %struct.cfg80211_registered_device, %struct.cfg80211_registered_device* %3, i32 0, i32 3
  %28 = load %struct.rfkill*, %struct.rfkill** %27, align 16
  call void @rfkill_unregister(%struct.rfkill* %28)
  br label %29

; <label>:29:                                     ; preds = %26, %22
  call void @rtnl_lock()
  call void @nl80211_notify_wiphy(%struct.cfg80211_registered_device* %3, i32 4)
  %30 = getelementptr inbounds %struct.cfg80211_registered_device, %struct.cfg80211_registered_device* %3, i32 0, i32 42
  %31 = getelementptr inbounds %struct.wiphy, %struct.wiphy* %30, i32 0, i32 51
  store i8 0, i8* %31, align 8
  %32 = getelementptr inbounds %struct.cfg80211_registered_device, %struct.cfg80211_registered_device* %3, i32 0, i32 42
  %33 = getelementptr inbounds %struct.wiphy, %struct.wiphy* %32, i32 0, i32 55
  %34 = call i32 @list_empty(%struct.list_head* %33)
  %35 = icmp ne i32 %34, 0
  %36 = xor i1 %35, true
  %37 = xor i1 %36, true
  %38 = xor i1 %37, true
  %39 = zext i1 %38 to i32
  %40 = icmp ne i32 %39, 0
  %41 = xor i1 %40, true
  %42 = xor i1 %41, true
  %43 = zext i1 %42 to i32
  %44 = sext i32 %43 to i64
  %45 = icmp ne i64 %44, 0
  br i1 %45, label %46, label %47

; <label>:46:                                     ; preds = %29
  call void @warn_slowpath_null(i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.1, i32 0, i32 0), i32 890)
  br label %47

; <label>:47:                                     ; preds = %46, %29
  %48 = icmp ne i32 %39, 0
  %49 = xor i1 %48, true
  %50 = xor i1 %49, true
  %51 = zext i1 %50 to i32
  %52 = sext i32 %51 to i64
  %53 = getelementptr inbounds %struct.cfg80211_registered_device, %struct.cfg80211_registered_device* %3, i32 0, i32 42
  %54 = getelementptr inbounds %struct.wiphy, %struct.wiphy* %53, i32 0, i32 52
  %55 = load %struct.dentry*, %struct.dentry** %54, align 32
  call void @debugfs_remove_recursive(%struct.dentry* %55)
  %56 = getelementptr inbounds %struct.cfg80211_registered_device, %struct.cfg80211_registered_device* %3, i32 0, i32 1
  call void @list_del_rcu(%struct.list_head* %56)
  call void @synchronize_rcu()
  call void @wiphy_regulatory_deregister(%struct.wiphy* %0)
  %57 = load i32, i32* @cfg80211_rdev_list_generation, align 4
  %58 = add nsw i32 %57, 1
  store i32 %58, i32* @cfg80211_rdev_list_generation, align 4
  %59 = getelementptr inbounds %struct.cfg80211_registered_device, %struct.cfg80211_registered_device* %3, i32 0, i32 42
  %60 = getelementptr inbounds %struct.wiphy, %struct.wiphy* %59, i32 0, i32 50
  call void @device_del(%struct.device* %60)
  call void @rtnl_unlock()
  %61 = getelementptr inbounds %struct.cfg80211_registered_device, %struct.cfg80211_registered_device* %3, i32 0, i32 29
  %62 = call zeroext i1 @flush_work(%struct.work_struct* %61)
  %63 = getelementptr inbounds %struct.cfg80211_registered_device, %struct.cfg80211_registered_device* %3, i32 0, i32 32
  %64 = call zeroext i1 @cancel_work_sync(%struct.work_struct* %63)
  %65 = getelementptr inbounds %struct.cfg80211_registered_device, %struct.cfg80211_registered_device* %3, i32 0, i32 33
  %66 = call zeroext i1 @flush_work(%struct.work_struct* %65)
  %67 = getelementptr inbounds %struct.cfg80211_registered_device, %struct.cfg80211_registered_device* %3, i32 0, i32 34
  %68 = call zeroext i1 @cancel_delayed_work_sync(%struct.delayed_work* %67)
  %69 = getelementptr inbounds %struct.cfg80211_registered_device, %struct.cfg80211_registered_device* %3, i32 0, i32 39
  %70 = call zeroext i1 @flush_work(%struct.work_struct* %69)
  %71 = getelementptr inbounds %struct.cfg80211_registered_device, %struct.cfg80211_registered_device* %3, i32 0, i32 40
  %72 = call zeroext i1 @flush_work(%struct.work_struct* %71)
  %73 = getelementptr inbounds %struct.cfg80211_registered_device, %struct.cfg80211_registered_device* %3, i32 0, i32 17
  %74 = call zeroext i1 @flush_work(%struct.work_struct* %73)
  %75 = getelementptr inbounds %struct.cfg80211_registered_device, %struct.cfg80211_registered_device* %3, i32 0, i32 42
  %76 = getelementptr inbounds %struct.wiphy, %struct.wiphy* %75, i32 0, i32 35
  %77 = load %struct.cfg80211_wowlan*, %struct.cfg80211_wowlan** %76, align 16
  %78 = icmp ne %struct.cfg80211_wowlan* %77, null
  br i1 %78, label %79, label %86

; <label>:79:                                     ; preds = %47
  %80 = getelementptr inbounds %struct.cfg80211_registered_device, %struct.cfg80211_registered_device* %3, i32 0, i32 0
  %81 = load %struct.cfg80211_ops*, %struct.cfg80211_ops** %80, align 32
  %82 = getelementptr inbounds %struct.cfg80211_ops, %struct.cfg80211_ops* %81, i32 0, i32 2
  %83 = load void (%struct.wiphy*, i1)*, void (%struct.wiphy*, i1)** %82, align 8
  %84 = icmp ne void (%struct.wiphy*, i1)* %83, null
  br i1 %84, label %85, label %86

; <label>:85:                                     ; preds = %79
  call void @rdev_set_wakeup(%struct.cfg80211_registered_device* %3, i1 zeroext false)
  br label %86

; <label>:86:                                     ; preds = %85, %79, %47
  call void @cfg80211_rdev_free_wowlan(%struct.cfg80211_registered_device* %3)
  call void @cfg80211_rdev_free_coalesce(%struct.cfg80211_registered_device* %3)
  ret void
}

; Function Attrs: noinline nounwind uwtable
define void @wiphy_rfkill_start_polling(%struct.wiphy*) #0 {
  %2 = call %struct.cfg80211_registered_device* @wiphy_to_rdev(%struct.wiphy* %0)
  %3 = getelementptr inbounds %struct.cfg80211_registered_device, %struct.cfg80211_registered_device* %2, i32 0, i32 0
  %4 = load %struct.cfg80211_ops*, %struct.cfg80211_ops** %3, align 32
  %5 = getelementptr inbounds %struct.cfg80211_ops, %struct.cfg80211_ops* %4, i32 0, i32 52
  %6 = load void (%struct.wiphy*)*, void (%struct.wiphy*)** %5, align 8
  %7 = icmp ne void (%struct.wiphy*)* %6, null
  br i1 %7, label %8, label %13

; <label>:8:                                      ; preds = %1
  %9 = getelementptr inbounds %struct.cfg80211_registered_device, %struct.cfg80211_registered_device* %2, i32 0, i32 2
  %10 = getelementptr inbounds %struct.rfkill_ops, %struct.rfkill_ops* %9, i32 0, i32 0
  store void (%struct.rfkill*, i8*)* @cfg80211_rfkill_poll, void (%struct.rfkill*, i8*)** %10, align 8
  %11 = getelementptr inbounds %struct.cfg80211_registered_device, %struct.cfg80211_registered_device* %2, i32 0, i32 3
  %12 = load %struct.rfkill*, %struct.rfkill** %11, align 16
  call void @rfkill_resume_polling(%struct.rfkill* %12)
  br label %13

; <label>:13:                                     ; preds = %1, %8
  ret void
}

; Function Attrs: noinline nounwind uwtable
define internal void @cfg80211_rfkill_poll(%struct.rfkill*, i8*) #0 {
  %3 = bitcast i8* %1 to %struct.cfg80211_registered_device*
  call void @rdev_rfkill_poll(%struct.cfg80211_registered_device* %3)
  ret void
}

declare void @rfkill_resume_polling(%struct.rfkill*) #1

; Function Attrs: noinline nounwind uwtable
define void @wiphy_rfkill_stop_polling(%struct.wiphy*) #0 {
  %2 = call %struct.cfg80211_registered_device* @wiphy_to_rdev(%struct.wiphy* %0)
  %3 = getelementptr inbounds %struct.cfg80211_registered_device, %struct.cfg80211_registered_device* %2, i32 0, i32 3
  %4 = load %struct.rfkill*, %struct.rfkill** %3, align 16
  call void @rfkill_pause_polling(%struct.rfkill* %4)
  ret void
}

declare void @rfkill_pause_polling(%struct.rfkill*) #1

declare i32 @_cond_resched() #1

declare void @init_wait_entry(%struct.__wait_queue*, i32) #1

declare i64 @prepare_to_wait_event(%struct.__wait_queue_head*, %struct.__wait_queue*, i32) #1

declare void @schedule() #1

declare void @finish_wait(%struct.__wait_queue_head*, %struct.__wait_queue*) #1

declare void @rfkill_unregister(%struct.rfkill*) #1

; Function Attrs: noinline nounwind uwtable
define internal i32 @list_empty(%struct.list_head*) #0 {
  %2 = alloca %union.anon.97, align 8
  %3 = getelementptr inbounds %struct.list_head, %struct.list_head* %0, i32 0, i32 0
  %4 = bitcast %struct.list_head** %3 to i8*
  %5 = bitcast %union.anon.97* %2 to [1 x i8]*
  %6 = getelementptr inbounds [1 x i8], [1 x i8]* %5, i32 0, i32 0
  %7 = bitcast i8* %4 to i64*
  %8 = load volatile i64, i64* %7, align 8
  %9 = bitcast i8* %6 to i64*
  store i64 %8, i64* %9, align 8
  %10 = bitcast %union.anon.97* %2 to %struct.list_head**
  %11 = load %struct.list_head*, %struct.list_head** %10, align 8
  %12 = icmp eq %struct.list_head* %11, %0
  %13 = zext i1 %12 to i32
  ret i32 %13
}

declare void @debugfs_remove_recursive(%struct.dentry*) #1

; Function Attrs: noinline nounwind uwtable
define internal void @list_del_rcu(%struct.list_head*) #0 {
  call void @__list_del_entry(%struct.list_head* %0)
  %2 = getelementptr inbounds %struct.list_head, %struct.list_head* %0, i32 0, i32 1
  store %struct.list_head* bitcast (i8* getelementptr (i8, i8* inttoptr (i64 512 to i8*), i64 -2401263026318606336) to %struct.list_head*), %struct.list_head** %2, align 8
  ret void
}

; Function Attrs: noinline nounwind uwtable
define internal void @synchronize_rcu() #0 {
  call void @synchronize_sched()
  ret void
}

declare void @wiphy_regulatory_deregister(%struct.wiphy*) #1

declare void @device_del(%struct.device*) #1

declare zeroext i1 @flush_work(%struct.work_struct*) #1

declare zeroext i1 @cancel_work_sync(%struct.work_struct*) #1

declare zeroext i1 @cancel_delayed_work_sync(%struct.delayed_work*) #1

; Function Attrs: noinline nounwind uwtable
define internal void @rdev_set_wakeup(%struct.cfg80211_registered_device*, i1 zeroext) #0 {
  %3 = zext i1 %1 to i8
  %4 = getelementptr inbounds %struct.cfg80211_registered_device, %struct.cfg80211_registered_device* %0, i32 0, i32 42
  %5 = trunc i8 %3 to i1
  call void @trace_rdev_set_wakeup(%struct.wiphy* %4, i1 zeroext %5)
  %6 = getelementptr inbounds %struct.cfg80211_registered_device, %struct.cfg80211_registered_device* %0, i32 0, i32 0
  %7 = load %struct.cfg80211_ops*, %struct.cfg80211_ops** %6, align 32
  %8 = getelementptr inbounds %struct.cfg80211_ops, %struct.cfg80211_ops* %7, i32 0, i32 2
  %9 = load void (%struct.wiphy*, i1)*, void (%struct.wiphy*, i1)** %8, align 8
  %10 = getelementptr inbounds %struct.cfg80211_registered_device, %struct.cfg80211_registered_device* %0, i32 0, i32 42
  %11 = trunc i8 %3 to i1
  call void %9(%struct.wiphy* %10, i1 zeroext %11)
  %12 = getelementptr inbounds %struct.cfg80211_registered_device, %struct.cfg80211_registered_device* %0, i32 0, i32 42
  call void @trace_rdev_return_void(%struct.wiphy* %12)
  ret void
}

; Function Attrs: noinline nounwind uwtable
define internal void @cfg80211_rdev_free_wowlan(%struct.cfg80211_registered_device*) #0 {
  %2 = getelementptr inbounds %struct.cfg80211_registered_device, %struct.cfg80211_registered_device* %0, i32 0, i32 42
  %3 = getelementptr inbounds %struct.wiphy, %struct.wiphy* %2, i32 0, i32 35
  %4 = load %struct.cfg80211_wowlan*, %struct.cfg80211_wowlan** %3, align 16
  %5 = icmp ne %struct.cfg80211_wowlan* %4, null
  br i1 %5, label %6, label %66

; <label>:6:                                      ; preds = %1, %18
  %.0 = phi i32 [ %23, %18 ], [ 0, %1 ]
  %7 = getelementptr inbounds %struct.cfg80211_registered_device, %struct.cfg80211_registered_device* %0, i32 0, i32 42
  %8 = getelementptr inbounds %struct.wiphy, %struct.wiphy* %7, i32 0, i32 35
  %9 = load %struct.cfg80211_wowlan*, %struct.cfg80211_wowlan** %8, align 16
  %10 = getelementptr inbounds %struct.cfg80211_wowlan, %struct.cfg80211_wowlan* %9, i32 0, i32 9
  %11 = load i32, i32* %10, align 8
  %12 = icmp slt i32 %.0, %11
  %13 = getelementptr inbounds %struct.cfg80211_registered_device, %struct.cfg80211_registered_device* %0, i32 0, i32 42
  %14 = getelementptr inbounds %struct.wiphy, %struct.wiphy* %13, i32 0, i32 35
  %15 = load %struct.cfg80211_wowlan*, %struct.cfg80211_wowlan** %14, align 16
  %16 = getelementptr inbounds %struct.cfg80211_wowlan, %struct.cfg80211_wowlan* %15, i32 0, i32 7
  %17 = load %struct.cfg80211_pkt_pattern*, %struct.cfg80211_pkt_pattern** %16, align 8
  br i1 %12, label %18, label %24

; <label>:18:                                     ; preds = %6
  %19 = sext i32 %.0 to i64
  %20 = getelementptr inbounds %struct.cfg80211_pkt_pattern, %struct.cfg80211_pkt_pattern* %17, i64 %19
  %21 = getelementptr inbounds %struct.cfg80211_pkt_pattern, %struct.cfg80211_pkt_pattern* %20, i32 0, i32 0
  %22 = load i8*, i8** %21, align 8
  call void @kfree(i8* %22)
  %23 = add nsw i32 %.0, 1
  br label %6

; <label>:24:                                     ; preds = %6
  %25 = bitcast %struct.cfg80211_pkt_pattern* %17 to i8*
  call void @kfree(i8* %25)
  %26 = getelementptr inbounds %struct.cfg80211_registered_device, %struct.cfg80211_registered_device* %0, i32 0, i32 42
  %27 = getelementptr inbounds %struct.wiphy, %struct.wiphy* %26, i32 0, i32 35
  %28 = load %struct.cfg80211_wowlan*, %struct.cfg80211_wowlan** %27, align 16
  %29 = getelementptr inbounds %struct.cfg80211_wowlan, %struct.cfg80211_wowlan* %28, i32 0, i32 8
  %30 = load %struct.cfg80211_wowlan_tcp*, %struct.cfg80211_wowlan_tcp** %29, align 8
  %31 = icmp ne %struct.cfg80211_wowlan_tcp* %30, null
  br i1 %31, label %32, label %49

; <label>:32:                                     ; preds = %24
  %33 = getelementptr inbounds %struct.cfg80211_registered_device, %struct.cfg80211_registered_device* %0, i32 0, i32 42
  %34 = getelementptr inbounds %struct.wiphy, %struct.wiphy* %33, i32 0, i32 35
  %35 = load %struct.cfg80211_wowlan*, %struct.cfg80211_wowlan** %34, align 16
  %36 = getelementptr inbounds %struct.cfg80211_wowlan, %struct.cfg80211_wowlan* %35, i32 0, i32 8
  %37 = load %struct.cfg80211_wowlan_tcp*, %struct.cfg80211_wowlan_tcp** %36, align 8
  %38 = getelementptr inbounds %struct.cfg80211_wowlan_tcp, %struct.cfg80211_wowlan_tcp* %37, i32 0, i32 0
  %39 = load %struct.socket*, %struct.socket** %38, align 8
  %40 = icmp ne %struct.socket* %39, null
  br i1 %40, label %41, label %49

; <label>:41:                                     ; preds = %32
  %42 = getelementptr inbounds %struct.cfg80211_registered_device, %struct.cfg80211_registered_device* %0, i32 0, i32 42
  %43 = getelementptr inbounds %struct.wiphy, %struct.wiphy* %42, i32 0, i32 35
  %44 = load %struct.cfg80211_wowlan*, %struct.cfg80211_wowlan** %43, align 16
  %45 = getelementptr inbounds %struct.cfg80211_wowlan, %struct.cfg80211_wowlan* %44, i32 0, i32 8
  %46 = load %struct.cfg80211_wowlan_tcp*, %struct.cfg80211_wowlan_tcp** %45, align 8
  %47 = getelementptr inbounds %struct.cfg80211_wowlan_tcp, %struct.cfg80211_wowlan_tcp* %46, i32 0, i32 0
  %48 = load %struct.socket*, %struct.socket** %47, align 8
  call void @sock_release(%struct.socket* %48)
  br label %49

; <label>:49:                                     ; preds = %41, %32, %24
  %50 = getelementptr inbounds %struct.cfg80211_registered_device, %struct.cfg80211_registered_device* %0, i32 0, i32 42
  %51 = getelementptr inbounds %struct.wiphy, %struct.wiphy* %50, i32 0, i32 35
  %52 = load %struct.cfg80211_wowlan*, %struct.cfg80211_wowlan** %51, align 16
  %53 = getelementptr inbounds %struct.cfg80211_wowlan, %struct.cfg80211_wowlan* %52, i32 0, i32 8
  %54 = load %struct.cfg80211_wowlan_tcp*, %struct.cfg80211_wowlan_tcp** %53, align 8
  %55 = bitcast %struct.cfg80211_wowlan_tcp* %54 to i8*
  call void @kfree(i8* %55)
  %56 = getelementptr inbounds %struct.cfg80211_registered_device, %struct.cfg80211_registered_device* %0, i32 0, i32 42
  %57 = getelementptr inbounds %struct.wiphy, %struct.wiphy* %56, i32 0, i32 35
  %58 = load %struct.cfg80211_wowlan*, %struct.cfg80211_wowlan** %57, align 16
  %59 = getelementptr inbounds %struct.cfg80211_wowlan, %struct.cfg80211_wowlan* %58, i32 0, i32 10
  %60 = load %struct.cfg80211_sched_scan_request*, %struct.cfg80211_sched_scan_request** %59, align 8
  %61 = bitcast %struct.cfg80211_sched_scan_request* %60 to i8*
  call void @kfree(i8* %61)
  %62 = getelementptr inbounds %struct.cfg80211_registered_device, %struct.cfg80211_registered_device* %0, i32 0, i32 42
  %63 = getelementptr inbounds %struct.wiphy, %struct.wiphy* %62, i32 0, i32 35
  %64 = load %struct.cfg80211_wowlan*, %struct.cfg80211_wowlan** %63, align 16
  %65 = bitcast %struct.cfg80211_wowlan* %64 to i8*
  call void @kfree(i8* %65)
  br label %66

; <label>:66:                                     ; preds = %1, %49
  ret void
}

declare void @cfg80211_rdev_free_coalesce(%struct.cfg80211_registered_device*) #1

; Function Attrs: noinline nounwind uwtable
define void @cfg80211_dev_free(%struct.cfg80211_registered_device*) #0 {
  %2 = getelementptr inbounds %struct.cfg80211_registered_device, %struct.cfg80211_registered_device* %0, i32 0, i32 3
  %3 = load %struct.rfkill*, %struct.rfkill** %2, align 16
  call void @rfkill_destroy(%struct.rfkill* %3)
  %4 = getelementptr inbounds %struct.cfg80211_registered_device, %struct.cfg80211_registered_device* %0, i32 0, i32 13
  %5 = getelementptr inbounds %struct.list_head, %struct.list_head* %4, i32 0, i32 0
  %6 = load %struct.list_head*, %struct.list_head** %5, align 8
  %7 = bitcast %struct.list_head* %6 to i8*
  %8 = getelementptr inbounds i8, i8* %7, i64 0
  %9 = bitcast i8* %8 to %struct.cfg80211_beacon_registration*
  br label %10

; <label>:10:                                     ; preds = %20, %1
  %.sink6 = phi %struct.cfg80211_beacon_registration* [ %16, %20 ], [ %9, %1 ]
  %.03 = phi %struct.cfg80211_beacon_registration* [ %9, %1 ], [ %16, %20 ]
  %11 = getelementptr inbounds %struct.cfg80211_beacon_registration, %struct.cfg80211_beacon_registration* %.sink6, i32 0, i32 0
  %12 = getelementptr inbounds %struct.list_head, %struct.list_head* %11, i32 0, i32 0
  %13 = load %struct.list_head*, %struct.list_head** %12, align 8
  %14 = bitcast %struct.list_head* %13 to i8*
  %15 = getelementptr inbounds i8, i8* %14, i64 0
  %16 = bitcast i8* %15 to %struct.cfg80211_beacon_registration*
  %17 = getelementptr inbounds %struct.cfg80211_beacon_registration, %struct.cfg80211_beacon_registration* %.03, i32 0, i32 0
  %18 = getelementptr inbounds %struct.cfg80211_registered_device, %struct.cfg80211_registered_device* %0, i32 0, i32 13
  %19 = icmp ne %struct.list_head* %17, %18
  br i1 %19, label %20, label %23

; <label>:20:                                     ; preds = %10
  %21 = getelementptr inbounds %struct.cfg80211_beacon_registration, %struct.cfg80211_beacon_registration* %.03, i32 0, i32 0
  call void @list_del(%struct.list_head* %21)
  %22 = bitcast %struct.cfg80211_beacon_registration* %.03 to i8*
  call void @kfree(i8* %22)
  br label %10

; <label>:23:                                     ; preds = %10
  %24 = getelementptr inbounds %struct.cfg80211_registered_device, %struct.cfg80211_registered_device* %0, i32 0, i32 21
  %25 = getelementptr inbounds %struct.list_head, %struct.list_head* %24, i32 0, i32 0
  %26 = load %struct.list_head*, %struct.list_head** %25, align 8
  %27 = bitcast %struct.list_head* %26 to i8*
  %28 = getelementptr inbounds i8, i8* %27, i64 0
  %29 = bitcast i8* %28 to %struct.cfg80211_internal_bss*
  br label %30

; <label>:30:                                     ; preds = %40, %23
  %.sink9 = phi %struct.cfg80211_internal_bss* [ %36, %40 ], [ %29, %23 ]
  %.01 = phi %struct.cfg80211_internal_bss* [ %29, %23 ], [ %36, %40 ]
  %31 = getelementptr inbounds %struct.cfg80211_internal_bss, %struct.cfg80211_internal_bss* %.sink9, i32 0, i32 0
  %32 = getelementptr inbounds %struct.list_head, %struct.list_head* %31, i32 0, i32 0
  %33 = load %struct.list_head*, %struct.list_head** %32, align 8
  %34 = bitcast %struct.list_head* %33 to i8*
  %35 = getelementptr inbounds i8, i8* %34, i64 0
  %36 = bitcast i8* %35 to %struct.cfg80211_internal_bss*
  %37 = getelementptr inbounds %struct.cfg80211_internal_bss, %struct.cfg80211_internal_bss* %.01, i32 0, i32 0
  %38 = getelementptr inbounds %struct.cfg80211_registered_device, %struct.cfg80211_registered_device* %0, i32 0, i32 21
  %39 = icmp ne %struct.list_head* %37, %38
  br i1 %39, label %40, label %43

; <label>:40:                                     ; preds = %30
  %41 = getelementptr inbounds %struct.cfg80211_registered_device, %struct.cfg80211_registered_device* %0, i32 0, i32 42
  %42 = getelementptr inbounds %struct.cfg80211_internal_bss, %struct.cfg80211_internal_bss* %.01, i32 0, i32 9
  call void @cfg80211_put_bss(%struct.wiphy* %41, %struct.cfg80211_bss* %42)
  br label %30

; <label>:43:                                     ; preds = %30
  %44 = bitcast %struct.cfg80211_registered_device* %0 to i8*
  call void @kfree(i8* %44)
  ret void
}

declare void @cfg80211_put_bss(%struct.wiphy*, %struct.cfg80211_bss*) #1

; Function Attrs: noinline nounwind uwtable
define void @wiphy_free(%struct.wiphy*) #0 {
  %2 = getelementptr inbounds %struct.wiphy, %struct.wiphy* %0, i32 0, i32 50
  call void @put_device(%struct.device* %2)
  ret void
}

declare void @put_device(%struct.device*) #1

; Function Attrs: noinline nounwind uwtable
define void @wiphy_rfkill_set_hw_state(%struct.wiphy*, i1 zeroext) #0 {
  %3 = zext i1 %1 to i8
  %4 = call %struct.cfg80211_registered_device* @wiphy_to_rdev(%struct.wiphy* %0)
  %5 = getelementptr inbounds %struct.cfg80211_registered_device, %struct.cfg80211_registered_device* %4, i32 0, i32 3
  %6 = load %struct.rfkill*, %struct.rfkill** %5, align 16
  %7 = trunc i8 %3 to i1
  %8 = call zeroext i1 @rfkill_set_hw_state(%struct.rfkill* %6, i1 zeroext %7)
  br i1 %8, label %9, label %12

; <label>:9:                                      ; preds = %2
  %10 = getelementptr inbounds %struct.cfg80211_registered_device, %struct.cfg80211_registered_device* %4, i32 0, i32 4
  %11 = call zeroext i1 @schedule_work(%struct.work_struct* %10)
  br label %12

; <label>:12:                                     ; preds = %9, %2
  ret void
}

declare zeroext i1 @rfkill_set_hw_state(%struct.rfkill*, i1 zeroext) #1

; Function Attrs: noinline nounwind uwtable
define internal zeroext i1 @schedule_work(%struct.work_struct*) #0 {
  %2 = load %struct.workqueue_struct*, %struct.workqueue_struct** @system_wq, align 8
  %3 = call zeroext i1 @queue_work(%struct.workqueue_struct* %2, %struct.work_struct* %0)
  ret i1 %3
}

; Function Attrs: noinline nounwind uwtable
define void @cfg80211_unregister_wdev(%struct.wireless_dev*) #0 {
  %2 = getelementptr inbounds %struct.wireless_dev, %struct.wireless_dev* %0, i32 0, i32 0
  %3 = load %struct.wiphy*, %struct.wiphy** %2, align 8
  %4 = call %struct.cfg80211_registered_device* @wiphy_to_rdev(%struct.wiphy* %3)
  %5 = call i32 @rtnl_is_locked()
  %6 = icmp ne i32 %5, 0
  %7 = xor i1 %6, true
  %8 = xor i1 %7, true
  %9 = xor i1 %8, true
  %10 = zext i1 %9 to i32
  %11 = sext i32 %10 to i64
  %12 = icmp ne i64 %11, 0
  br i1 %12, label %13, label %15

; <label>:13:                                     ; preds = %1
  %14 = call i32 (i8*, ...) @printk(i8* getelementptr inbounds ([37 x i8], [37 x i8]* @.str, i32 0, i32 0), i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.1, i32 0, i32 0), i32 961)
  call void @dump_stack()
  br label %15

; <label>:15:                                     ; preds = %1, %13
  %16 = getelementptr inbounds %struct.wireless_dev, %struct.wireless_dev* %0, i32 0, i32 3
  %17 = load %struct.net_device*, %struct.net_device** %16, align 8
  %18 = icmp ne %struct.net_device* %17, null
  %19 = xor i1 %18, true
  %20 = xor i1 %19, true
  %21 = zext i1 %20 to i32
  %22 = icmp ne i32 %21, 0
  %23 = xor i1 %22, true
  %24 = xor i1 %23, true
  %25 = zext i1 %24 to i32
  %26 = sext i32 %25 to i64
  %27 = icmp ne i64 %26, 0
  br i1 %27, label %28, label %29

; <label>:28:                                     ; preds = %15
  call void @warn_slowpath_null(i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.1, i32 0, i32 0), i32 963)
  br label %29

; <label>:29:                                     ; preds = %28, %15
  %30 = icmp ne i32 %21, 0
  %31 = xor i1 %30, true
  %32 = xor i1 %31, true
  %33 = zext i1 %32 to i32
  %34 = sext i32 %33 to i64
  %35 = icmp ne i64 %34, 0
  br i1 %35, label %78, label %36

; <label>:36:                                     ; preds = %29
  call void @nl80211_notify_iface(%struct.cfg80211_registered_device* %4, %struct.wireless_dev* %0, i32 8)
  %37 = getelementptr inbounds %struct.wireless_dev, %struct.wireless_dev* %0, i32 0, i32 2
  call void @list_del_rcu(%struct.list_head* %37)
  %38 = getelementptr inbounds %struct.cfg80211_registered_device, %struct.cfg80211_registered_device* %4, i32 0, i32 9
  %39 = load i32, i32* %38, align 16
  %40 = add nsw i32 %39, 1
  store i32 %40, i32* %38, align 16
  %41 = getelementptr inbounds %struct.wireless_dev, %struct.wireless_dev* %0, i32 0, i32 1
  %42 = load i32, i32* %41, align 8
  switch i32 %42, label %45 [
    i32 10, label %43
    i32 12, label %44
  ]

; <label>:43:                                     ; preds = %36
  call void @cfg80211_mlme_purge_registrations(%struct.wireless_dev* %0)
  call void @cfg80211_stop_p2p_device(%struct.cfg80211_registered_device* %4, %struct.wireless_dev* %0)
  br label %78

; <label>:44:                                     ; preds = %36
  call void @cfg80211_stop_nan(%struct.cfg80211_registered_device* %4, %struct.wireless_dev* %0)
  br label %78

; <label>:45:                                     ; preds = %36
  %46 = icmp ne i32 1, 0
  br i1 %46, label %47, label %51

; <label>:47:                                     ; preds = %45
  %48 = load i8, i8* @cfg80211_unregister_wdev.__warned, align 1
  %49 = trunc i8 %48 to i1
  %50 = xor i1 %49, true
  br label %51

; <label>:51:                                     ; preds = %47, %45
  %52 = phi i1 [ false, %45 ], [ %50, %47 ]
  %53 = xor i1 %52, true
  %54 = xor i1 %53, true
  %55 = zext i1 %54 to i32
  %56 = sext i32 %55 to i64
  %57 = icmp ne i64 %56, 0
  br i1 %57, label %58, label %72

; <label>:58:                                     ; preds = %51
  store i8 1, i8* @cfg80211_unregister_wdev.__warned, align 1
  %59 = icmp ne i32 1, 0
  %60 = xor i1 %59, true
  %61 = xor i1 %60, true
  %62 = zext i1 %61 to i32
  %63 = sext i32 %62 to i64
  %64 = icmp ne i64 %63, 0
  br i1 %64, label %65, label %66

; <label>:65:                                     ; preds = %58
  call void @warn_slowpath_null(i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.1, i32 0, i32 0), i32 980)
  br label %66

; <label>:66:                                     ; preds = %65, %58
  %67 = icmp ne i32 1, 0
  %68 = xor i1 %67, true
  %69 = xor i1 %68, true
  %70 = zext i1 %69 to i32
  %71 = sext i32 %70 to i64
  br label %72

; <label>:72:                                     ; preds = %66, %51
  %73 = icmp ne i32 1, 0
  %74 = xor i1 %73, true
  %75 = xor i1 %74, true
  %76 = zext i1 %75 to i32
  %77 = sext i32 %76 to i64
  br label %78

; <label>:78:                                     ; preds = %29, %72, %44, %43
  ret void
}

declare void @nl80211_notify_iface(%struct.cfg80211_registered_device*, %struct.wireless_dev*, i32) #1

declare void @cfg80211_mlme_purge_registrations(%struct.wireless_dev*) #1

; Function Attrs: noinline nounwind uwtable
define void @cfg80211_update_iface_num(%struct.cfg80211_registered_device*, i32, i32) #0 {
  %4 = call i32 @rtnl_is_locked()
  %5 = icmp ne i32 %4, 0
  %6 = xor i1 %5, true
  %7 = xor i1 %6, true
  %8 = xor i1 %7, true
  %9 = zext i1 %8 to i32
  %10 = sext i32 %9 to i64
  %11 = icmp ne i64 %10, 0
  br i1 %11, label %12, label %14

; <label>:12:                                     ; preds = %3
  %13 = call i32 (i8*, ...) @printk(i8* getelementptr inbounds ([37 x i8], [37 x i8]* @.str, i32 0, i32 0), i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.1, i32 0, i32 0), i32 993)
  call void @dump_stack()
  br label %14

; <label>:14:                                     ; preds = %3, %12
  %15 = getelementptr inbounds %struct.cfg80211_registered_device, %struct.cfg80211_registered_device* %0, i32 0, i32 18
  %16 = load i32, i32* %15, align 8
  %17 = add nsw i32 %16, %2
  store i32 %17, i32* %15, align 8
  %18 = icmp eq i32 %1, 6
  br i1 %18, label %19, label %23

; <label>:19:                                     ; preds = %14
  %20 = getelementptr inbounds %struct.cfg80211_registered_device, %struct.cfg80211_registered_device* %0, i32 0, i32 19
  %21 = load i32, i32* %20, align 4
  %22 = add nsw i32 %21, %2
  store i32 %22, i32* %20, align 4
  br label %23

; <label>:23:                                     ; preds = %19, %14
  ret void
}

; Function Attrs: noinline nounwind uwtable
define void @__cfg80211_leave(%struct.cfg80211_registered_device*, %struct.wireless_dev*) #0 {
  %3 = getelementptr inbounds %struct.wireless_dev, %struct.wireless_dev* %1, i32 0, i32 3
  %4 = load %struct.net_device*, %struct.net_device** %3, align 8
  %5 = call i32 @rtnl_is_locked()
  %6 = icmp ne i32 %5, 0
  %7 = xor i1 %6, true
  %8 = xor i1 %7, true
  %9 = xor i1 %8, true
  %10 = zext i1 %9 to i32
  %11 = sext i32 %10 to i64
  %12 = icmp ne i64 %11, 0
  br i1 %12, label %13, label %15

; <label>:13:                                     ; preds = %2
  %14 = call i32 (i8*, ...) @printk(i8* getelementptr inbounds ([37 x i8], [37 x i8]* @.str, i32 0, i32 0), i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.1, i32 0, i32 0), i32 1006)
  call void @dump_stack()
  br label %15

; <label>:15:                                     ; preds = %13, %2
  %16 = getelementptr inbounds %struct.wireless_dev, %struct.wireless_dev* %1, i32 0, i32 7
  %17 = getelementptr inbounds %struct.wireless_dev, %struct.wireless_dev* %1, i32 0, i32 1
  %18 = load i32, i32* %17, align 8
  switch i32 %18, label %39 [
    i32 1, label %19
    i32 8, label %21
    i32 2, label %21
    i32 7, label %33
    i32 3, label %35
    i32 9, label %35
    i32 11, label %37
  ]

; <label>:19:                                     ; preds = %15
  %20 = call i32 @__cfg80211_leave_ibss(%struct.cfg80211_registered_device* %0, %struct.net_device* %4, i1 zeroext true)
  br label %39

; <label>:21:                                     ; preds = %15, %15
  %22 = getelementptr inbounds %struct.cfg80211_registered_device, %struct.cfg80211_registered_device* %0, i32 0, i32 27
  %23 = load %struct.cfg80211_sched_scan_request*, %struct.cfg80211_sched_scan_request** %22, align 8
  %24 = icmp ne %struct.cfg80211_sched_scan_request* %23, null
  br i1 %24, label %25, label %31

; <label>:25:                                     ; preds = %21
  %26 = getelementptr inbounds %struct.cfg80211_sched_scan_request, %struct.cfg80211_sched_scan_request* %23, i32 0, i32 19
  %27 = load %struct.net_device*, %struct.net_device** %26, align 8
  %28 = icmp eq %struct.net_device* %4, %27
  br i1 %28, label %29, label %31

; <label>:29:                                     ; preds = %25
  %30 = call i32 @__cfg80211_stop_sched_scan(%struct.cfg80211_registered_device* %0, i1 zeroext false)
  br label %31

; <label>:31:                                     ; preds = %29, %25, %21
  %32 = call i32 @cfg80211_disconnect(%struct.cfg80211_registered_device* %0, %struct.net_device* %4, i16 zeroext 3, i1 zeroext true)
  br label %39

; <label>:33:                                     ; preds = %15
  %34 = call i32 @__cfg80211_leave_mesh(%struct.cfg80211_registered_device* %0, %struct.net_device* %4)
  br label %39

; <label>:35:                                     ; preds = %15, %15
  %36 = call i32 @__cfg80211_stop_ap(%struct.cfg80211_registered_device* %0, %struct.net_device* %4, i1 zeroext true)
  br label %39

; <label>:37:                                     ; preds = %15
  %38 = call i32 @__cfg80211_leave_ocb(%struct.cfg80211_registered_device* %0, %struct.net_device* %4)
  br label %39

; <label>:39:                                     ; preds = %37, %35, %33, %31, %19, %15
  ret void
}

declare i32 @__cfg80211_leave_ibss(%struct.cfg80211_registered_device*, %struct.net_device*, i1 zeroext) #1

declare i32 @__cfg80211_stop_sched_scan(%struct.cfg80211_registered_device*, i1 zeroext) #1

declare i32 @cfg80211_disconnect(%struct.cfg80211_registered_device*, %struct.net_device*, i16 zeroext, i1 zeroext) #1

declare i32 @__cfg80211_leave_mesh(%struct.cfg80211_registered_device*, %struct.net_device*) #1

declare i32 @__cfg80211_stop_ap(%struct.cfg80211_registered_device*, %struct.net_device*, i1 zeroext) #1

declare i32 @__cfg80211_leave_ocb(%struct.cfg80211_registered_device*, %struct.net_device*) #1

; Function Attrs: noinline nounwind uwtable
define void @cfg80211_leave(%struct.cfg80211_registered_device*, %struct.wireless_dev*) #0 {
  call void @wdev_lock(%struct.wireless_dev* %1)
  call void @__cfg80211_leave(%struct.cfg80211_registered_device* %0, %struct.wireless_dev* %1)
  call void @wdev_unlock(%struct.wireless_dev* %1)
  ret void
}

; Function Attrs: noinline nounwind uwtable
define internal void @wdev_lock(%struct.wireless_dev*) #0 {
  %2 = getelementptr inbounds %struct.wireless_dev, %struct.wireless_dev* %0, i32 0, i32 7
  call void @mutex_lock(%struct.mutex* %2)
  ret void
}

; Function Attrs: noinline nounwind uwtable
define internal void @wdev_unlock(%struct.wireless_dev*) #0 {
  %2 = getelementptr inbounds %struct.wireless_dev, %struct.wireless_dev* %0, i32 0, i32 7
  call void @mutex_unlock(%struct.mutex* %2)
  ret void
}

; Function Attrs: noinline nounwind uwtable
define void @cfg80211_stop_iface(%struct.wiphy*, %struct.wireless_dev*, i32) #0 {
  %4 = alloca i64, align 8
  %5 = alloca i64, align 8
  %6 = call %struct.cfg80211_registered_device* @wiphy_to_rdev(%struct.wiphy* %0)
  call void @trace_cfg80211_stop_iface(%struct.wiphy* %0, %struct.wireless_dev* %1)
  %7 = call i8* @kzalloc(i64 80, i32 %2)
  %8 = bitcast i8* %7 to %struct.cfg80211_event*
  %9 = icmp ne %struct.cfg80211_event* %8, null
  br i1 %9, label %10, label %26

; <label>:10:                                     ; preds = %3
  %11 = getelementptr inbounds %struct.cfg80211_event, %struct.cfg80211_event* %8, i32 0, i32 1
  store i32 4, i32* %11, align 8
  %12 = icmp eq i64* %4, %5
  %13 = zext i1 %12 to i32
  %14 = getelementptr inbounds %struct.wireless_dev, %struct.wireless_dev* %1, i32 0, i32 22
  %15 = getelementptr inbounds %struct.spinlock, %struct.spinlock* %14, i32 0, i32 0
  %16 = bitcast %union.anon.1* %15 to %struct.raw_spinlock*
  %17 = call i64 @_raw_spin_lock_irqsave(%struct.raw_spinlock* %16)
  %18 = getelementptr inbounds %struct.cfg80211_event, %struct.cfg80211_event* %8, i32 0, i32 0
  %19 = getelementptr inbounds %struct.wireless_dev, %struct.wireless_dev* %1, i32 0, i32 21
  call void @list_add_tail(%struct.list_head* %18, %struct.list_head* %19)
  %20 = getelementptr inbounds %struct.wireless_dev, %struct.wireless_dev* %1, i32 0, i32 22
  %21 = getelementptr inbounds %struct.spinlock, %struct.spinlock* %20, i32 0, i32 0
  %22 = bitcast %union.anon.1* %21 to %struct.raw_spinlock*
  call void @_raw_spin_unlock_irqrestore(%struct.raw_spinlock* %22, i64 %17) #3
  %23 = load %struct.workqueue_struct*, %struct.workqueue_struct** @cfg80211_wq, align 8
  %24 = getelementptr inbounds %struct.cfg80211_registered_device, %struct.cfg80211_registered_device* %6, i32 0, i32 33
  %25 = call zeroext i1 @queue_work(%struct.workqueue_struct* %23, %struct.work_struct* %24)
  br label %26

; <label>:26:                                     ; preds = %3, %10
  ret void
}

; Function Attrs: noinline nounwind uwtable
define internal void @trace_cfg80211_stop_iface(%struct.wiphy*, %struct.wireless_dev*) #0 {
  %3 = alloca %union.anon.99, align 8
  %4 = call i32 @static_key_count(%struct.static_key* getelementptr inbounds (%struct.tracepoint, %struct.tracepoint* @__tracepoint_cfg80211_stop_iface, i32 0, i32 1)) #3
  %5 = icmp sgt i32 %4, 0
  %6 = xor i1 %5, true
  %7 = zext i1 %5 to i32
  %8 = sext i32 %7 to i64
  %. = select i1 %5, i1 true, i1 false
  br i1 %., label %9, label %33

; <label>:9:                                      ; preds = %2
  %10 = call i32 asm "movl %gs:$1,$0", "=r,*m,~{dirflag},~{fpsr},~{flags}"(i32* @cpu_number) #4, !srcloc !4
  %11 = call i32 @cpumask_test_cpu(i32 %10, %struct.cpumask* @__cpu_online_mask)
  %12 = icmp ne i32 %11, 0
  br i1 %12, label %13, label %33

; <label>:13:                                     ; preds = %9
  call void @rcu_read_lock_sched_notrace()
  %14 = bitcast %union.anon.99* %3 to [1 x i8]*
  %15 = getelementptr inbounds [1 x i8], [1 x i8]* %14, i32 0, i32 0
  %16 = bitcast i8* bitcast (%struct.tracepoint_func** getelementptr inbounds (%struct.tracepoint, %struct.tracepoint* @__tracepoint_cfg80211_stop_iface, i32 0, i32 4) to i8*) to i64*
  %17 = load volatile i64, i64* %16, align 8
  %18 = bitcast i8* %15 to i64*
  store i64 %17, i64* %18, align 8
  %19 = bitcast %union.anon.99* %3 to %struct.tracepoint_func**
  %20 = load %struct.tracepoint_func*, %struct.tracepoint_func** %19, align 8
  %21 = icmp ne %struct.tracepoint_func* %20, null
  br i1 %21, label %22, label %32

; <label>:22:                                     ; preds = %13, %22
  %.0 = phi %struct.tracepoint_func* [ %28, %22 ], [ %20, %13 ]
  %23 = getelementptr inbounds %struct.tracepoint_func, %struct.tracepoint_func* %.0, i32 0, i32 0
  %24 = load i8*, i8** %23, align 8
  %25 = getelementptr inbounds %struct.tracepoint_func, %struct.tracepoint_func* %.0, i32 0, i32 1
  %26 = load i8*, i8** %25, align 8
  %27 = bitcast i8* %24 to void (i8*, %struct.wiphy*, %struct.wireless_dev*)*
  call void %27(i8* %26, %struct.wiphy* %0, %struct.wireless_dev* %1)
  %28 = getelementptr inbounds %struct.tracepoint_func, %struct.tracepoint_func* %.0, i32 1
  %29 = getelementptr inbounds %struct.tracepoint_func, %struct.tracepoint_func* %28, i32 0, i32 0
  %30 = load i8*, i8** %29, align 8
  %31 = icmp ne i8* %30, null
  br i1 %31, label %22, label %32

; <label>:32:                                     ; preds = %22, %13
  call void @rcu_read_unlock_sched_notrace()
  br label %33

; <label>:33:                                     ; preds = %9, %32, %2
  ret void
}

declare i64 @_raw_spin_lock_irqsave(%struct.raw_spinlock*) #1 section ".spinlock.text"

; Function Attrs: noinline nounwind uwtable
define internal void @list_add_tail(%struct.list_head*, %struct.list_head*) #0 {
  %3 = getelementptr inbounds %struct.list_head, %struct.list_head* %1, i32 0, i32 1
  %4 = load %struct.list_head*, %struct.list_head** %3, align 8
  call void @__list_add(%struct.list_head* %0, %struct.list_head* %4, %struct.list_head* %1)
  ret void
}

; Function Attrs: noinline nounwind uwtable
define internal zeroext i1 @queue_work(%struct.workqueue_struct*, %struct.work_struct*) #0 {
  %3 = call zeroext i1 @queue_work_on(i32 64, %struct.workqueue_struct* %0, %struct.work_struct* %1)
  ret i1 %3
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @cfg80211_init() #0 section ".init.text" {
  %1 = call i32 @register_pernet_device(%struct.pernet_operations* @cfg80211_pernet_ops)
  %2 = icmp ne i32 %1, 0
  br i1 %2, label %27, label %3

; <label>:3:                                      ; preds = %0
  %4 = call i32 @wiphy_sysfs_init()
  %5 = icmp ne i32 %4, 0
  br i1 %5, label %26, label %6

; <label>:6:                                      ; preds = %3
  %7 = call i32 @register_netdevice_notifier(%struct.notifier_block* @cfg80211_netdev_notifier)
  %8 = icmp ne i32 %7, 0
  br i1 %8, label %25, label %9

; <label>:9:                                      ; preds = %6
  %10 = call i32 @nl80211_init()
  %11 = icmp ne i32 %10, 0
  br i1 %11, label %23, label %12

; <label>:12:                                     ; preds = %9
  %13 = call %struct.dentry* @debugfs_create_dir(i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.9, i32 0, i32 0), %struct.dentry* null)
  store %struct.dentry* %13, %struct.dentry** @ieee80211_debugfs_dir, align 8
  %14 = call i32 @regulatory_init()
  %15 = icmp ne i32 %14, 0
  br i1 %15, label %21, label %16

; <label>:16:                                     ; preds = %12
  %17 = call %struct.workqueue_struct* (i8*, i32, i32, %struct.lock_class_key*, i8*, ...) @__alloc_workqueue_key(i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.10, i32 0, i32 0), i32 131082, i32 1, %struct.lock_class_key* null, i8* null)
  store %struct.workqueue_struct* %17, %struct.workqueue_struct** @cfg80211_wq, align 8
  %18 = load %struct.workqueue_struct*, %struct.workqueue_struct** @cfg80211_wq, align 8
  %19 = icmp ne %struct.workqueue_struct* %18, null
  br i1 %19, label %27, label %20

; <label>:20:                                     ; preds = %16
  call void @regulatory_exit()
  br label %21

; <label>:21:                                     ; preds = %12, %20
  %.01 = phi i32 [ -12, %20 ], [ %14, %12 ]
  %22 = load %struct.dentry*, %struct.dentry** @ieee80211_debugfs_dir, align 8
  call void @debugfs_remove(%struct.dentry* %22)
  call void @nl80211_exit()
  br label %23

; <label>:23:                                     ; preds = %9, %21
  %.1 = phi i32 [ %.01, %21 ], [ %10, %9 ]
  %24 = call i32 @unregister_netdevice_notifier(%struct.notifier_block* @cfg80211_netdev_notifier)
  br label %25

; <label>:25:                                     ; preds = %6, %23
  %.2 = phi i32 [ %.1, %23 ], [ %7, %6 ]
  call void @wiphy_sysfs_exit()
  br label %26

; <label>:26:                                     ; preds = %3, %25
  %.3 = phi i32 [ %.2, %25 ], [ %4, %3 ]
  call void @unregister_pernet_device(%struct.pernet_operations* @cfg80211_pernet_ops)
  br label %27

; <label>:27:                                     ; preds = %26, %0, %16
  %.0 = phi i32 [ 0, %16 ], [ %.3, %26 ], [ %1, %0 ]
  ret i32 %.0
}

; Function Attrs: noinline nounwind uwtable
define internal void @cfg80211_exit() #0 section ".exit.text" {
  %1 = load %struct.dentry*, %struct.dentry** @ieee80211_debugfs_dir, align 8
  call void @debugfs_remove(%struct.dentry* %1)
  call void @nl80211_exit()
  %2 = call i32 @unregister_netdevice_notifier(%struct.notifier_block* @cfg80211_netdev_notifier)
  call void @wiphy_sysfs_exit()
  call void @regulatory_exit()
  call void @unregister_pernet_device(%struct.pernet_operations* @cfg80211_pernet_ops)
  %3 = load %struct.workqueue_struct*, %struct.workqueue_struct** @cfg80211_wq, align 8
  call void @destroy_workqueue(%struct.workqueue_struct* %3)
  ret void
}

declare void @debugfs_remove(%struct.dentry*) #1

declare void @nl80211_exit() #1

declare i32 @unregister_netdevice_notifier(%struct.notifier_block*) #1

declare void @wiphy_sysfs_exit() #1

declare void @regulatory_exit() #1

declare void @unregister_pernet_device(%struct.pernet_operations*) #1

declare void @destroy_workqueue(%struct.workqueue_struct*) #1

declare i32 @sscanf(i8*, i8*, ...) #1

declare i64 @strlen(i8*) #1

; Function Attrs: noinline nounwind uwtable
define internal %struct.net* @read_pnet(%struct.possible_net_t*) #0 {
  %2 = getelementptr inbounds %struct.possible_net_t, %struct.possible_net_t* %0, i32 0, i32 0
  %3 = load %struct.net*, %struct.net** %2, align 8
  ret %struct.net* %3
}

; Function Attrs: noinline nounwind uwtable
define internal void @write_pnet(%struct.possible_net_t*, %struct.net*) #0 {
  %3 = getelementptr inbounds %struct.possible_net_t, %struct.possible_net_t* %0, i32 0, i32 0
  store %struct.net* %1, %struct.net** %3, align 8
  ret void
}

; Function Attrs: noinline nounwind uwtable
define internal i8* @kobject_name(%struct.kobject*) #0 {
  %2 = getelementptr inbounds %struct.kobject, %struct.kobject* %0, i32 0, i32 0
  %3 = load i8*, i8** %2, align 8
  ret i8* %3
}

; Function Attrs: noinline nounwind uwtable
define internal zeroext i1 @netif_running(%struct.net_device*) #0 {
  %2 = getelementptr inbounds %struct.net_device, %struct.net_device* %0, i32 0, i32 8
  %3 = and i64 0, 63
  %4 = shl i64 1, %3
  %5 = ashr i64 0, 6
  %6 = getelementptr inbounds i64, i64* %2, i64 %5
  %7 = load volatile i64, i64* %6, align 8
  %8 = and i64 %4, %7
  %9 = icmp ne i64 %8, 0
  ret i1 %9
}

; Function Attrs: noinline nounwind uwtable
define internal void @trace_rdev_stop_p2p_device(%struct.wiphy*, %struct.wireless_dev*) #0 {
  %3 = alloca %union.anon.86, align 8
  %4 = call i32 @static_key_count(%struct.static_key* getelementptr inbounds (%struct.tracepoint, %struct.tracepoint* @__tracepoint_rdev_stop_p2p_device, i32 0, i32 1)) #3
  %5 = icmp sgt i32 %4, 0
  %6 = xor i1 %5, true
  %7 = zext i1 %5 to i32
  %8 = sext i32 %7 to i64
  %. = select i1 %5, i1 true, i1 false
  br i1 %., label %9, label %33

; <label>:9:                                      ; preds = %2
  %10 = call i32 asm "movl %gs:$1,$0", "=r,*m,~{dirflag},~{fpsr},~{flags}"(i32* @cpu_number) #4, !srcloc !5
  %11 = call i32 @cpumask_test_cpu(i32 %10, %struct.cpumask* @__cpu_online_mask)
  %12 = icmp ne i32 %11, 0
  br i1 %12, label %13, label %33

; <label>:13:                                     ; preds = %9
  call void @rcu_read_lock_sched_notrace()
  %14 = bitcast %union.anon.86* %3 to [1 x i8]*
  %15 = getelementptr inbounds [1 x i8], [1 x i8]* %14, i32 0, i32 0
  %16 = bitcast i8* bitcast (%struct.tracepoint_func** getelementptr inbounds (%struct.tracepoint, %struct.tracepoint* @__tracepoint_rdev_stop_p2p_device, i32 0, i32 4) to i8*) to i64*
  %17 = load volatile i64, i64* %16, align 8
  %18 = bitcast i8* %15 to i64*
  store i64 %17, i64* %18, align 8
  %19 = bitcast %union.anon.86* %3 to %struct.tracepoint_func**
  %20 = load %struct.tracepoint_func*, %struct.tracepoint_func** %19, align 8
  %21 = icmp ne %struct.tracepoint_func* %20, null
  br i1 %21, label %22, label %32

; <label>:22:                                     ; preds = %13, %22
  %.0 = phi %struct.tracepoint_func* [ %28, %22 ], [ %20, %13 ]
  %23 = getelementptr inbounds %struct.tracepoint_func, %struct.tracepoint_func* %.0, i32 0, i32 0
  %24 = load i8*, i8** %23, align 8
  %25 = getelementptr inbounds %struct.tracepoint_func, %struct.tracepoint_func* %.0, i32 0, i32 1
  %26 = load i8*, i8** %25, align 8
  %27 = bitcast i8* %24 to void (i8*, %struct.wiphy*, %struct.wireless_dev*)*
  call void %27(i8* %26, %struct.wiphy* %0, %struct.wireless_dev* %1)
  %28 = getelementptr inbounds %struct.tracepoint_func, %struct.tracepoint_func* %.0, i32 1
  %29 = getelementptr inbounds %struct.tracepoint_func, %struct.tracepoint_func* %28, i32 0, i32 0
  %30 = load i8*, i8** %29, align 8
  %31 = icmp ne i8* %30, null
  br i1 %31, label %22, label %32

; <label>:32:                                     ; preds = %22, %13
  call void @rcu_read_unlock_sched_notrace()
  br label %33

; <label>:33:                                     ; preds = %9, %32, %2
  ret void
}

; Function Attrs: noinline nounwind uwtable
define internal void @trace_rdev_return_void(%struct.wiphy*) #0 {
  %2 = alloca %union.anon.88, align 8
  %3 = call i32 @static_key_count(%struct.static_key* getelementptr inbounds (%struct.tracepoint, %struct.tracepoint* @__tracepoint_rdev_return_void, i32 0, i32 1)) #3
  %4 = icmp sgt i32 %3, 0
  %5 = xor i1 %4, true
  %6 = zext i1 %4 to i32
  %7 = sext i32 %6 to i64
  %. = select i1 %4, i1 true, i1 false
  br i1 %., label %8, label %32

; <label>:8:                                      ; preds = %1
  %9 = call i32 asm "movl %gs:$1,$0", "=r,*m,~{dirflag},~{fpsr},~{flags}"(i32* @cpu_number) #4, !srcloc !6
  %10 = call i32 @cpumask_test_cpu(i32 %9, %struct.cpumask* @__cpu_online_mask)
  %11 = icmp ne i32 %10, 0
  br i1 %11, label %12, label %32

; <label>:12:                                     ; preds = %8
  call void @rcu_read_lock_sched_notrace()
  %13 = bitcast %union.anon.88* %2 to [1 x i8]*
  %14 = getelementptr inbounds [1 x i8], [1 x i8]* %13, i32 0, i32 0
  %15 = bitcast i8* bitcast (%struct.tracepoint_func** getelementptr inbounds (%struct.tracepoint, %struct.tracepoint* @__tracepoint_rdev_return_void, i32 0, i32 4) to i8*) to i64*
  %16 = load volatile i64, i64* %15, align 8
  %17 = bitcast i8* %14 to i64*
  store i64 %16, i64* %17, align 8
  %18 = bitcast %union.anon.88* %2 to %struct.tracepoint_func**
  %19 = load %struct.tracepoint_func*, %struct.tracepoint_func** %18, align 8
  %20 = icmp ne %struct.tracepoint_func* %19, null
  br i1 %20, label %21, label %31

; <label>:21:                                     ; preds = %12, %21
  %.0 = phi %struct.tracepoint_func* [ %27, %21 ], [ %19, %12 ]
  %22 = getelementptr inbounds %struct.tracepoint_func, %struct.tracepoint_func* %.0, i32 0, i32 0
  %23 = load i8*, i8** %22, align 8
  %24 = getelementptr inbounds %struct.tracepoint_func, %struct.tracepoint_func* %.0, i32 0, i32 1
  %25 = load i8*, i8** %24, align 8
  %26 = bitcast i8* %23 to void (i8*, %struct.wiphy*)*
  call void %26(i8* %25, %struct.wiphy* %0)
  %27 = getelementptr inbounds %struct.tracepoint_func, %struct.tracepoint_func* %.0, i32 1
  %28 = getelementptr inbounds %struct.tracepoint_func, %struct.tracepoint_func* %27, i32 0, i32 0
  %29 = load i8*, i8** %28, align 8
  %30 = icmp ne i8* %29, null
  br i1 %30, label %21, label %31

; <label>:31:                                     ; preds = %21, %12
  call void @rcu_read_unlock_sched_notrace()
  br label %32

; <label>:32:                                     ; preds = %8, %31, %1
  ret void
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @cpumask_test_cpu(i32, %struct.cpumask*) #0 {
  %3 = alloca i8, align 1
  %4 = call i32 @cpumask_check(i32 %0)
  %5 = zext i32 %4 to i64
  %6 = getelementptr inbounds %struct.cpumask, %struct.cpumask* %1, i32 0, i32 0
  %7 = getelementptr inbounds [1 x i64], [1 x i64]* %6, i32 0, i32 0
  call void asm sideeffect "bt $2,$1\0A\09\0A\09setc $0\0A", "=*qm,*m,Ir,~{dirflag},~{fpsr},~{flags}"(i8* %3, i64* %7, i64 %5) #3, !srcloc !7
  %8 = load i8, i8* %3, align 1
  %9 = trunc i8 %8 to i1
  %10 = zext i1 %9 to i32
  ret i32 %10
}

; Function Attrs: noinline nounwind uwtable
define internal void @rcu_read_lock_sched_notrace() #0 {
  call void asm sideeffect "", "~{memory},~{dirflag},~{fpsr},~{flags}"() #3, !srcloc !8
  ret void
}

; Function Attrs: noinline nounwind uwtable
define internal void @rcu_read_unlock_sched_notrace() #0 {
  call void asm sideeffect "", "~{memory},~{dirflag},~{fpsr},~{flags}"() #3, !srcloc !9
  ret void
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @static_key_count(%struct.static_key*) #0 {
  %2 = alloca %union.anon.87, align 4
  %3 = getelementptr inbounds %struct.static_key, %struct.static_key* %0, i32 0, i32 0
  %4 = getelementptr inbounds %struct.atomic_t, %struct.atomic_t* %3, i32 0, i32 0
  %5 = bitcast i32* %4 to i8*
  %6 = bitcast %union.anon.87* %2 to [1 x i8]*
  %7 = getelementptr inbounds [1 x i8], [1 x i8]* %6, i32 0, i32 0
  %8 = bitcast i8* %5 to i32*
  %9 = load volatile i32, i32* %8, align 4
  %10 = bitcast i8* %7 to i32*
  store i32 %9, i32* %10, align 4
  %11 = bitcast %union.anon.87* %2 to i32*
  %12 = load i32, i32* %11, align 4
  ret i32 %12
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @cpumask_check(i32) #0 {
  ret i32 %0
}

; Function Attrs: noinline nounwind uwtable
define internal void @trace_rdev_stop_nan(%struct.wiphy*, %struct.wireless_dev*) #0 {
  %3 = alloca %union.anon.89, align 8
  %4 = call i32 @static_key_count(%struct.static_key* getelementptr inbounds (%struct.tracepoint, %struct.tracepoint* @__tracepoint_rdev_stop_nan, i32 0, i32 1)) #3
  %5 = icmp sgt i32 %4, 0
  %6 = xor i1 %5, true
  %7 = zext i1 %5 to i32
  %8 = sext i32 %7 to i64
  %. = select i1 %5, i1 true, i1 false
  br i1 %., label %9, label %33

; <label>:9:                                      ; preds = %2
  %10 = call i32 asm "movl %gs:$1,$0", "=r,*m,~{dirflag},~{fpsr},~{flags}"(i32* @cpu_number) #4, !srcloc !10
  %11 = call i32 @cpumask_test_cpu(i32 %10, %struct.cpumask* @__cpu_online_mask)
  %12 = icmp ne i32 %11, 0
  br i1 %12, label %13, label %33

; <label>:13:                                     ; preds = %9
  call void @rcu_read_lock_sched_notrace()
  %14 = bitcast %union.anon.89* %3 to [1 x i8]*
  %15 = getelementptr inbounds [1 x i8], [1 x i8]* %14, i32 0, i32 0
  %16 = bitcast i8* bitcast (%struct.tracepoint_func** getelementptr inbounds (%struct.tracepoint, %struct.tracepoint* @__tracepoint_rdev_stop_nan, i32 0, i32 4) to i8*) to i64*
  %17 = load volatile i64, i64* %16, align 8
  %18 = bitcast i8* %15 to i64*
  store i64 %17, i64* %18, align 8
  %19 = bitcast %union.anon.89* %3 to %struct.tracepoint_func**
  %20 = load %struct.tracepoint_func*, %struct.tracepoint_func** %19, align 8
  %21 = icmp ne %struct.tracepoint_func* %20, null
  br i1 %21, label %22, label %32

; <label>:22:                                     ; preds = %13, %22
  %.0 = phi %struct.tracepoint_func* [ %28, %22 ], [ %20, %13 ]
  %23 = getelementptr inbounds %struct.tracepoint_func, %struct.tracepoint_func* %.0, i32 0, i32 0
  %24 = load i8*, i8** %23, align 8
  %25 = getelementptr inbounds %struct.tracepoint_func, %struct.tracepoint_func* %.0, i32 0, i32 1
  %26 = load i8*, i8** %25, align 8
  %27 = bitcast i8* %24 to void (i8*, %struct.wiphy*, %struct.wireless_dev*)*
  call void %27(i8* %26, %struct.wiphy* %0, %struct.wireless_dev* %1)
  %28 = getelementptr inbounds %struct.tracepoint_func, %struct.tracepoint_func* %.0, i32 1
  %29 = getelementptr inbounds %struct.tracepoint_func, %struct.tracepoint_func* %28, i32 0, i32 0
  %30 = load i8*, i8** %29, align 8
  %31 = icmp ne i8* %30, null
  br i1 %31, label %22, label %32

; <label>:32:                                     ; preds = %22, %13
  call void @rcu_read_unlock_sched_notrace()
  br label %33

; <label>:33:                                     ; preds = %9, %32, %2
  ret void
}

declare void @_raw_spin_lock_irq(%struct.raw_spinlock*) #1 section ".spinlock.text"

; Function Attrs: noinline nounwind uwtable
define internal void @__list_del_entry(%struct.list_head*) #0 {
  %2 = call zeroext i1 @__list_del_entry_valid(%struct.list_head* %0)
  br i1 %2, label %3, label %8

; <label>:3:                                      ; preds = %1
  %4 = getelementptr inbounds %struct.list_head, %struct.list_head* %0, i32 0, i32 1
  %5 = load %struct.list_head*, %struct.list_head** %4, align 8
  %6 = getelementptr inbounds %struct.list_head, %struct.list_head* %0, i32 0, i32 0
  %7 = load %struct.list_head*, %struct.list_head** %6, align 8
  call void @__list_del(%struct.list_head* %5, %struct.list_head* %7)
  br label %8

; <label>:8:                                      ; preds = %1, %3
  ret void
}

; Function Attrs: noinline nounwind uwtable
define internal zeroext i1 @__list_del_entry_valid(%struct.list_head*) #0 {
  ret i1 true
}

; Function Attrs: noinline nounwind uwtable
define internal void @__list_del(%struct.list_head*, %struct.list_head*) #0 {
  %3 = alloca %union.anon.90, align 8
  %4 = getelementptr inbounds %struct.list_head, %struct.list_head* %1, i32 0, i32 1
  store %struct.list_head* %0, %struct.list_head** %4, align 8
  %5 = bitcast %union.anon.90* %3 to %struct.list_head**
  store %struct.list_head* %1, %struct.list_head** %5, align 8
  %6 = getelementptr inbounds %struct.list_head, %struct.list_head* %0, i32 0, i32 0
  %7 = bitcast %struct.list_head** %6 to i8*
  %8 = bitcast %union.anon.90* %3 to [1 x i8]*
  %9 = getelementptr inbounds [1 x i8], [1 x i8]* %8, i32 0, i32 0
  %10 = bitcast i8* %9 to i64*
  %11 = load i64, i64* %10, align 8
  %12 = bitcast i8* %7 to i64*
  store volatile i64 %11, i64* %12, align 8
  %13 = bitcast %union.anon.90* %3 to %struct.list_head**
  %14 = load %struct.list_head*, %struct.list_head** %13, align 8
  ret void
}

; Function Attrs: noinline nounwind uwtable
define internal void @__raw_spin_unlock_irq(%struct.raw_spinlock*) #0 {
  call void @do_raw_spin_unlock(%struct.raw_spinlock* %0)
  call void @arch_local_irq_enable()
  call void asm sideeffect "", "~{memory},~{dirflag},~{fpsr},~{flags}"() #3, !srcloc !11
  ret void
}

; Function Attrs: noinline nounwind uwtable
define internal void @do_raw_spin_unlock(%struct.raw_spinlock*) #0 {
  %2 = getelementptr inbounds %struct.raw_spinlock, %struct.raw_spinlock* %0, i32 0, i32 0
  call void @queued_spin_unlock(%struct.qspinlock* %2)
  ret void
}

; Function Attrs: noinline nounwind uwtable
define internal void @arch_local_irq_enable() #0 {
  call void @native_irq_enable()
  ret void
}

; Function Attrs: noinline nounwind uwtable
define internal void @queued_spin_unlock(%struct.qspinlock*) #0 {
  call void @native_queued_spin_unlock(%struct.qspinlock* %0)
  ret void
}

; Function Attrs: noinline nounwind uwtable
define internal void @native_queued_spin_unlock(%struct.qspinlock*) #0 {
  %2 = alloca %union.anon.91, align 1
  %3 = trunc i8 0 to i1
  br i1 %3, label %4, label %5

; <label>:4:                                      ; preds = %1
  call void @__compiletime_assert_17()
  br label %5

; <label>:5:                                      ; preds = %1, %4
  %6 = trunc i8 0 to i1
  %7 = zext i1 %6 to i32
  %8 = mul nsw i32 2, %7
  %9 = sub nsw i32 1, %8
  %10 = zext i32 %9 to i64
  call void asm sideeffect "", "~{memory},~{dirflag},~{fpsr},~{flags}"() #3, !srcloc !12
  %11 = bitcast %union.anon.91* %2 to i8*
  call void @llvm.memset.p0i8.i64(i8* %11, i8 0, i64 1, i32 1, i1 false)
  %12 = bitcast %struct.qspinlock* %0 to i8*
  %13 = bitcast %union.anon.91* %2 to [1 x i8]*
  %14 = getelementptr inbounds [1 x i8], [1 x i8]* %13, i32 0, i32 0
  %15 = load i8, i8* %14, align 1
  store volatile i8 %15, i8* %12, align 1
  %16 = bitcast %union.anon.91* %2 to i8*
  %17 = load i8, i8* %16, align 1
  ret void
}

declare void @__compiletime_assert_17() #1

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i32, i1) #2

; Function Attrs: noinline nounwind uwtable
define internal void @native_irq_enable() #0 {
  call void asm sideeffect "sti", "~{memory},~{dirflag},~{fpsr},~{flags}"() #3, !srcloc !13
  ret void
}

; Function Attrs: noinline nounwind uwtable
define internal void @trace_rdev_del_virtual_intf(%struct.wiphy*, %struct.wireless_dev*) #0 {
  %3 = alloca %union.anon.92, align 8
  %4 = call i32 @static_key_count(%struct.static_key* getelementptr inbounds (%struct.tracepoint, %struct.tracepoint* @__tracepoint_rdev_del_virtual_intf, i32 0, i32 1)) #3
  %5 = icmp sgt i32 %4, 0
  %6 = xor i1 %5, true
  %7 = zext i1 %5 to i32
  %8 = sext i32 %7 to i64
  %. = select i1 %5, i1 true, i1 false
  br i1 %., label %9, label %33

; <label>:9:                                      ; preds = %2
  %10 = call i32 asm "movl %gs:$1,$0", "=r,*m,~{dirflag},~{fpsr},~{flags}"(i32* @cpu_number) #4, !srcloc !14
  %11 = call i32 @cpumask_test_cpu(i32 %10, %struct.cpumask* @__cpu_online_mask)
  %12 = icmp ne i32 %11, 0
  br i1 %12, label %13, label %33

; <label>:13:                                     ; preds = %9
  call void @rcu_read_lock_sched_notrace()
  %14 = bitcast %union.anon.92* %3 to [1 x i8]*
  %15 = getelementptr inbounds [1 x i8], [1 x i8]* %14, i32 0, i32 0
  %16 = bitcast i8* bitcast (%struct.tracepoint_func** getelementptr inbounds (%struct.tracepoint, %struct.tracepoint* @__tracepoint_rdev_del_virtual_intf, i32 0, i32 4) to i8*) to i64*
  %17 = load volatile i64, i64* %16, align 8
  %18 = bitcast i8* %15 to i64*
  store i64 %17, i64* %18, align 8
  %19 = bitcast %union.anon.92* %3 to %struct.tracepoint_func**
  %20 = load %struct.tracepoint_func*, %struct.tracepoint_func** %19, align 8
  %21 = icmp ne %struct.tracepoint_func* %20, null
  br i1 %21, label %22, label %32

; <label>:22:                                     ; preds = %13, %22
  %.0 = phi %struct.tracepoint_func* [ %28, %22 ], [ %20, %13 ]
  %23 = getelementptr inbounds %struct.tracepoint_func, %struct.tracepoint_func* %.0, i32 0, i32 0
  %24 = load i8*, i8** %23, align 8
  %25 = getelementptr inbounds %struct.tracepoint_func, %struct.tracepoint_func* %.0, i32 0, i32 1
  %26 = load i8*, i8** %25, align 8
  %27 = bitcast i8* %24 to void (i8*, %struct.wiphy*, %struct.wireless_dev*)*
  call void %27(i8* %26, %struct.wiphy* %0, %struct.wireless_dev* %1)
  %28 = getelementptr inbounds %struct.tracepoint_func, %struct.tracepoint_func* %.0, i32 1
  %29 = getelementptr inbounds %struct.tracepoint_func, %struct.tracepoint_func* %28, i32 0, i32 0
  %30 = load i8*, i8** %29, align 8
  %31 = icmp ne i8* %30, null
  br i1 %31, label %22, label %32

; <label>:32:                                     ; preds = %22, %13
  call void @rcu_read_unlock_sched_notrace()
  br label %33

; <label>:33:                                     ; preds = %9, %32, %2
  ret void
}

; Function Attrs: noinline nounwind uwtable
define internal void @trace_rdev_return_int(%struct.wiphy*, i32) #0 {
  %3 = alloca %union.anon.93, align 8
  %4 = call i32 @static_key_count(%struct.static_key* getelementptr inbounds (%struct.tracepoint, %struct.tracepoint* @__tracepoint_rdev_return_int, i32 0, i32 1)) #3
  %5 = icmp sgt i32 %4, 0
  %6 = xor i1 %5, true
  %7 = zext i1 %5 to i32
  %8 = sext i32 %7 to i64
  %. = select i1 %5, i1 true, i1 false
  br i1 %., label %9, label %33

; <label>:9:                                      ; preds = %2
  %10 = call i32 asm "movl %gs:$1,$0", "=r,*m,~{dirflag},~{fpsr},~{flags}"(i32* @cpu_number) #4, !srcloc !15
  %11 = call i32 @cpumask_test_cpu(i32 %10, %struct.cpumask* @__cpu_online_mask)
  %12 = icmp ne i32 %11, 0
  br i1 %12, label %13, label %33

; <label>:13:                                     ; preds = %9
  call void @rcu_read_lock_sched_notrace()
  %14 = bitcast %union.anon.93* %3 to [1 x i8]*
  %15 = getelementptr inbounds [1 x i8], [1 x i8]* %14, i32 0, i32 0
  %16 = bitcast i8* bitcast (%struct.tracepoint_func** getelementptr inbounds (%struct.tracepoint, %struct.tracepoint* @__tracepoint_rdev_return_int, i32 0, i32 4) to i8*) to i64*
  %17 = load volatile i64, i64* %16, align 8
  %18 = bitcast i8* %15 to i64*
  store i64 %17, i64* %18, align 8
  %19 = bitcast %union.anon.93* %3 to %struct.tracepoint_func**
  %20 = load %struct.tracepoint_func*, %struct.tracepoint_func** %19, align 8
  %21 = icmp ne %struct.tracepoint_func* %20, null
  br i1 %21, label %22, label %32

; <label>:22:                                     ; preds = %13, %22
  %.0 = phi %struct.tracepoint_func* [ %28, %22 ], [ %20, %13 ]
  %23 = getelementptr inbounds %struct.tracepoint_func, %struct.tracepoint_func* %.0, i32 0, i32 0
  %24 = load i8*, i8** %23, align 8
  %25 = getelementptr inbounds %struct.tracepoint_func, %struct.tracepoint_func* %.0, i32 0, i32 1
  %26 = load i8*, i8** %25, align 8
  %27 = bitcast i8* %24 to void (i8*, %struct.wiphy*, i32)*
  call void %27(i8* %26, %struct.wiphy* %0, i32 %1)
  %28 = getelementptr inbounds %struct.tracepoint_func, %struct.tracepoint_func* %.0, i32 1
  %29 = getelementptr inbounds %struct.tracepoint_func, %struct.tracepoint_func* %28, i32 0, i32 0
  %30 = load i8*, i8** %29, align 8
  %31 = icmp ne i8* %30, null
  br i1 %31, label %22, label %32

; <label>:32:                                     ; preds = %22, %13
  call void @rcu_read_unlock_sched_notrace()
  br label %33

; <label>:33:                                     ; preds = %9, %32, %2
  ret void
}

declare noalias i8* @__kmalloc(i64, i32) #1

declare zeroext i1 @rfkill_blocked(%struct.rfkill*) #1

declare void @cfg80211_process_rdev_events(%struct.cfg80211_registered_device*) #1

; Function Attrs: noinline nounwind uwtable
define internal void @__list_add_rcu(%struct.list_head*, %struct.list_head*, %struct.list_head*) #0 {
  %4 = alloca %union.anon.95, align 8
  %5 = call zeroext i1 @__list_add_valid(%struct.list_head* %0, %struct.list_head* %1, %struct.list_head* %2)
  br i1 %5, label %6, label %30

; <label>:6:                                      ; preds = %3
  %7 = getelementptr inbounds %struct.list_head, %struct.list_head* %0, i32 0, i32 0
  store %struct.list_head* %2, %struct.list_head** %7, align 8
  %8 = getelementptr inbounds %struct.list_head, %struct.list_head* %0, i32 0, i32 1
  store %struct.list_head* %1, %struct.list_head** %8, align 8
  %9 = ptrtoint %struct.list_head* %0 to i64
  %10 = trunc i8 0 to i1
  br i1 %10, label %11, label %12

; <label>:11:                                     ; preds = %6
  call void @__compiletime_assert_56()
  br label %12

; <label>:12:                                     ; preds = %6, %11
  %13 = trunc i8 0 to i1
  %14 = zext i1 %13 to i32
  %15 = mul nsw i32 2, %14
  %16 = sub nsw i32 1, %15
  %17 = zext i32 %16 to i64
  call void asm sideeffect "", "~{memory},~{dirflag},~{fpsr},~{flags}"() #3, !srcloc !16
  %18 = bitcast %union.anon.95* %4 to %struct.list_head**
  %19 = inttoptr i64 %9 to %struct.list_head*
  store %struct.list_head* %19, %struct.list_head** %18, align 8
  %20 = getelementptr inbounds %struct.list_head, %struct.list_head* %1, i32 0, i32 0
  %21 = bitcast %struct.list_head** %20 to i8*
  %22 = bitcast %union.anon.95* %4 to [1 x i8]*
  %23 = getelementptr inbounds [1 x i8], [1 x i8]* %22, i32 0, i32 0
  %24 = bitcast i8* %23 to i64*
  %25 = load i64, i64* %24, align 8
  %26 = bitcast i8* %21 to i64*
  store volatile i64 %25, i64* %26, align 8
  %27 = bitcast %union.anon.95* %4 to %struct.list_head**
  %28 = load %struct.list_head*, %struct.list_head** %27, align 8
  %29 = getelementptr inbounds %struct.list_head, %struct.list_head* %2, i32 0, i32 1
  store %struct.list_head* %0, %struct.list_head** %29, align 8
  br label %30

; <label>:30:                                     ; preds = %3, %12
  ret void
}

; Function Attrs: noinline nounwind uwtable
define internal zeroext i1 @__list_add_valid(%struct.list_head*, %struct.list_head*, %struct.list_head*) #0 {
  ret i1 true
}

declare void @__compiletime_assert_56() #1

declare void @nl80211_common_reg_change_event(i32, %struct.regulatory_request*) #1

; Function Attrs: noinline nounwind uwtable
define internal void @rdev_rfkill_poll(%struct.cfg80211_registered_device*) #0 {
  %2 = getelementptr inbounds %struct.cfg80211_registered_device, %struct.cfg80211_registered_device* %0, i32 0, i32 42
  call void @trace_rdev_rfkill_poll(%struct.wiphy* %2)
  %3 = getelementptr inbounds %struct.cfg80211_registered_device, %struct.cfg80211_registered_device* %0, i32 0, i32 0
  %4 = load %struct.cfg80211_ops*, %struct.cfg80211_ops** %3, align 32
  %5 = getelementptr inbounds %struct.cfg80211_ops, %struct.cfg80211_ops* %4, i32 0, i32 52
  %6 = load void (%struct.wiphy*)*, void (%struct.wiphy*)** %5, align 8
  %7 = getelementptr inbounds %struct.cfg80211_registered_device, %struct.cfg80211_registered_device* %0, i32 0, i32 42
  call void %6(%struct.wiphy* %7)
  %8 = getelementptr inbounds %struct.cfg80211_registered_device, %struct.cfg80211_registered_device* %0, i32 0, i32 42
  call void @trace_rdev_return_void(%struct.wiphy* %8)
  ret void
}

; Function Attrs: noinline nounwind uwtable
define internal void @trace_rdev_rfkill_poll(%struct.wiphy*) #0 {
  %2 = alloca %union.anon.96, align 8
  %3 = call i32 @static_key_count(%struct.static_key* getelementptr inbounds (%struct.tracepoint, %struct.tracepoint* @__tracepoint_rdev_rfkill_poll, i32 0, i32 1)) #3
  %4 = icmp sgt i32 %3, 0
  %5 = xor i1 %4, true
  %6 = zext i1 %4 to i32
  %7 = sext i32 %6 to i64
  %. = select i1 %4, i1 true, i1 false
  br i1 %., label %8, label %32

; <label>:8:                                      ; preds = %1
  %9 = call i32 asm "movl %gs:$1,$0", "=r,*m,~{dirflag},~{fpsr},~{flags}"(i32* @cpu_number) #4, !srcloc !17
  %10 = call i32 @cpumask_test_cpu(i32 %9, %struct.cpumask* @__cpu_online_mask)
  %11 = icmp ne i32 %10, 0
  br i1 %11, label %12, label %32

; <label>:12:                                     ; preds = %8
  call void @rcu_read_lock_sched_notrace()
  %13 = bitcast %union.anon.96* %2 to [1 x i8]*
  %14 = getelementptr inbounds [1 x i8], [1 x i8]* %13, i32 0, i32 0
  %15 = bitcast i8* bitcast (%struct.tracepoint_func** getelementptr inbounds (%struct.tracepoint, %struct.tracepoint* @__tracepoint_rdev_rfkill_poll, i32 0, i32 4) to i8*) to i64*
  %16 = load volatile i64, i64* %15, align 8
  %17 = bitcast i8* %14 to i64*
  store i64 %16, i64* %17, align 8
  %18 = bitcast %union.anon.96* %2 to %struct.tracepoint_func**
  %19 = load %struct.tracepoint_func*, %struct.tracepoint_func** %18, align 8
  %20 = icmp ne %struct.tracepoint_func* %19, null
  br i1 %20, label %21, label %31

; <label>:21:                                     ; preds = %12, %21
  %.0 = phi %struct.tracepoint_func* [ %27, %21 ], [ %19, %12 ]
  %22 = getelementptr inbounds %struct.tracepoint_func, %struct.tracepoint_func* %.0, i32 0, i32 0
  %23 = load i8*, i8** %22, align 8
  %24 = getelementptr inbounds %struct.tracepoint_func, %struct.tracepoint_func* %.0, i32 0, i32 1
  %25 = load i8*, i8** %24, align 8
  %26 = bitcast i8* %23 to void (i8*, %struct.wiphy*)*
  call void %26(i8* %25, %struct.wiphy* %0)
  %27 = getelementptr inbounds %struct.tracepoint_func, %struct.tracepoint_func* %.0, i32 1
  %28 = getelementptr inbounds %struct.tracepoint_func, %struct.tracepoint_func* %27, i32 0, i32 0
  %29 = load i8*, i8** %28, align 8
  %30 = icmp ne i8* %29, null
  br i1 %30, label %21, label %31

; <label>:31:                                     ; preds = %21, %12
  call void @rcu_read_unlock_sched_notrace()
  br label %32

; <label>:32:                                     ; preds = %8, %31, %1
  ret void
}

declare void @synchronize_sched() #1

; Function Attrs: noinline nounwind uwtable
define internal void @trace_rdev_set_wakeup(%struct.wiphy*, i1 zeroext) #0 {
  %3 = alloca %union.anon.98, align 8
  %4 = zext i1 %1 to i8
  %5 = call i32 @static_key_count(%struct.static_key* getelementptr inbounds (%struct.tracepoint, %struct.tracepoint* @__tracepoint_rdev_set_wakeup, i32 0, i32 1)) #3
  %6 = icmp sgt i32 %5, 0
  %7 = xor i1 %6, true
  %8 = zext i1 %6 to i32
  %9 = sext i32 %8 to i64
  %. = select i1 %6, i1 true, i1 false
  br i1 %., label %10, label %35

; <label>:10:                                     ; preds = %2
  %11 = call i32 asm "movl %gs:$1,$0", "=r,*m,~{dirflag},~{fpsr},~{flags}"(i32* @cpu_number) #4, !srcloc !18
  %12 = call i32 @cpumask_test_cpu(i32 %11, %struct.cpumask* @__cpu_online_mask)
  %13 = icmp ne i32 %12, 0
  br i1 %13, label %14, label %35

; <label>:14:                                     ; preds = %10
  call void @rcu_read_lock_sched_notrace()
  %15 = bitcast %union.anon.98* %3 to [1 x i8]*
  %16 = getelementptr inbounds [1 x i8], [1 x i8]* %15, i32 0, i32 0
  %17 = bitcast i8* bitcast (%struct.tracepoint_func** getelementptr inbounds (%struct.tracepoint, %struct.tracepoint* @__tracepoint_rdev_set_wakeup, i32 0, i32 4) to i8*) to i64*
  %18 = load volatile i64, i64* %17, align 8
  %19 = bitcast i8* %16 to i64*
  store i64 %18, i64* %19, align 8
  %20 = bitcast %union.anon.98* %3 to %struct.tracepoint_func**
  %21 = load %struct.tracepoint_func*, %struct.tracepoint_func** %20, align 8
  %22 = icmp ne %struct.tracepoint_func* %21, null
  br i1 %22, label %23, label %34

; <label>:23:                                     ; preds = %14, %23
  %.0 = phi %struct.tracepoint_func* [ %30, %23 ], [ %21, %14 ]
  %24 = getelementptr inbounds %struct.tracepoint_func, %struct.tracepoint_func* %.0, i32 0, i32 0
  %25 = load i8*, i8** %24, align 8
  %26 = getelementptr inbounds %struct.tracepoint_func, %struct.tracepoint_func* %.0, i32 0, i32 1
  %27 = load i8*, i8** %26, align 8
  %28 = bitcast i8* %25 to void (i8*, %struct.wiphy*, i1)*
  %29 = trunc i8 %4 to i1
  call void %28(i8* %27, %struct.wiphy* %0, i1 zeroext %29)
  %30 = getelementptr inbounds %struct.tracepoint_func, %struct.tracepoint_func* %.0, i32 1
  %31 = getelementptr inbounds %struct.tracepoint_func, %struct.tracepoint_func* %30, i32 0, i32 0
  %32 = load i8*, i8** %31, align 8
  %33 = icmp ne i8* %32, null
  br i1 %33, label %23, label %34

; <label>:34:                                     ; preds = %23, %14
  call void @rcu_read_unlock_sched_notrace()
  br label %35

; <label>:35:                                     ; preds = %10, %34, %2
  ret void
}

declare void @sock_release(%struct.socket*) #1

declare void @mutex_lock(%struct.mutex*) #1

declare void @mutex_unlock(%struct.mutex*) #1

; Function Attrs: noinline nounwind uwtable
define internal void @__list_add(%struct.list_head*, %struct.list_head*, %struct.list_head*) #0 {
  %4 = alloca %union.anon.100, align 8
  %5 = call zeroext i1 @__list_add_valid(%struct.list_head* %0, %struct.list_head* %1, %struct.list_head* %2)
  br i1 %5, label %6, label %20

; <label>:6:                                      ; preds = %3
  %7 = getelementptr inbounds %struct.list_head, %struct.list_head* %2, i32 0, i32 1
  store %struct.list_head* %0, %struct.list_head** %7, align 8
  %8 = getelementptr inbounds %struct.list_head, %struct.list_head* %0, i32 0, i32 0
  store %struct.list_head* %2, %struct.list_head** %8, align 8
  %9 = getelementptr inbounds %struct.list_head, %struct.list_head* %0, i32 0, i32 1
  store %struct.list_head* %1, %struct.list_head** %9, align 8
  %10 = bitcast %union.anon.100* %4 to %struct.list_head**
  store %struct.list_head* %0, %struct.list_head** %10, align 8
  %11 = getelementptr inbounds %struct.list_head, %struct.list_head* %1, i32 0, i32 0
  %12 = bitcast %struct.list_head** %11 to i8*
  %13 = bitcast %union.anon.100* %4 to [1 x i8]*
  %14 = getelementptr inbounds [1 x i8], [1 x i8]* %13, i32 0, i32 0
  %15 = bitcast i8* %14 to i64*
  %16 = load i64, i64* %15, align 8
  %17 = bitcast i8* %12 to i64*
  store volatile i64 %16, i64* %17, align 8
  %18 = bitcast %union.anon.100* %4 to %struct.list_head**
  %19 = load %struct.list_head*, %struct.list_head** %18, align 8
  br label %20

; <label>:20:                                     ; preds = %3, %6
  ret void
}

declare void @_raw_spin_unlock_irqrestore(%struct.raw_spinlock*, i64) #1 section ".spinlock.text"

declare zeroext i1 @queue_work_on(i32, %struct.workqueue_struct*, %struct.work_struct*) #1

declare i32 @register_pernet_device(%struct.pernet_operations*) #1

declare i32 @wiphy_sysfs_init() #1

declare i32 @register_netdevice_notifier(%struct.notifier_block*) #1

declare i32 @nl80211_init() #1

declare i32 @regulatory_init() #1 section ".init.text"

declare %struct.workqueue_struct* @__alloc_workqueue_key(i8*, i32, i32, %struct.lock_class_key*, i8*, ...) #1

; Function Attrs: noinline nounwind uwtable
define internal i32 @cfg80211_netdev_notifier_call(%struct.notifier_block*, i64, i8*) #0 {
  %4 = alloca %struct.raw_spinlock, align 4
  %5 = alloca %struct.raw_spinlock, align 4
  %6 = alloca %struct.atomic64_t, align 8
  %7 = bitcast i8* %2 to %struct.netdev_notifier_info*
  %8 = call %struct.net_device* @netdev_notifier_info_to_dev(%struct.netdev_notifier_info* %7)
  %9 = getelementptr inbounds %struct.net_device, %struct.net_device* %8, i32 0, i32 69
  %10 = load %struct.wireless_dev*, %struct.wireless_dev** %9, align 8
  %11 = icmp ne %struct.wireless_dev* %10, null
  br i1 %11, label %12, label %299

; <label>:12:                                     ; preds = %3
  %13 = getelementptr inbounds %struct.wireless_dev, %struct.wireless_dev* %10, i32 0, i32 0
  %14 = load %struct.wiphy*, %struct.wiphy** %13, align 8
  %15 = call %struct.cfg80211_registered_device* @wiphy_to_rdev(%struct.wiphy* %14)
  %16 = getelementptr inbounds %struct.wireless_dev, %struct.wireless_dev* %10, i32 0, i32 1
  %17 = load i32, i32* %16, align 8
  %18 = icmp eq i32 %17, 0
  %19 = xor i1 %18, true
  %20 = xor i1 %19, true
  %21 = zext i1 %20 to i32
  %22 = icmp ne i32 %21, 0
  %23 = xor i1 %22, true
  %24 = xor i1 %23, true
  %25 = zext i1 %24 to i32
  %26 = sext i32 %25 to i64
  %27 = icmp ne i64 %26, 0
  br i1 %27, label %28, label %29

; <label>:28:                                     ; preds = %12
  call void @warn_slowpath_null(i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.1, i32 0, i32 0), i32 1099)
  br label %29

; <label>:29:                                     ; preds = %28, %12
  %30 = icmp ne i32 %21, 0
  %31 = xor i1 %30, true
  %32 = xor i1 %31, true
  %33 = zext i1 %32 to i32
  %34 = sext i32 %33 to i64
  switch i64 %1, label %299 [
    i64 16, label %35
    i64 5, label %38
    i64 9, label %126
    i64 2, label %127
    i64 1, label %205
    i64 6, label %234
    i64 13, label %278
  ]

; <label>:35:                                     ; preds = %29
  %36 = getelementptr inbounds %struct.net_device, %struct.net_device* %8, i32 0, i32 106
  %37 = getelementptr inbounds %struct.device, %struct.device* %36, i32 0, i32 4
  store %struct.device_type* @wiphy_type, %struct.device_type** %37, align 8
  br label %298

; <label>:38:                                     ; preds = %29
  %39 = getelementptr inbounds %struct.wireless_dev, %struct.wireless_dev* %10, i32 0, i32 7
  call void @__mutex_init(%struct.mutex* %39, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.11, i32 0, i32 0), %struct.lock_class_key* @cfg80211_netdev_notifier_call.__key)
  %40 = getelementptr inbounds %struct.wireless_dev, %struct.wireless_dev* %10, i32 0, i32 21
  call void @INIT_LIST_HEAD(%struct.list_head* %40)
  %41 = getelementptr inbounds %struct.wireless_dev, %struct.wireless_dev* %10, i32 0, i32 22
  %42 = getelementptr inbounds %struct.spinlock, %struct.spinlock* %41, i32 0, i32 0
  %43 = bitcast %union.anon.1* %42 to %struct.raw_spinlock*
  %44 = getelementptr inbounds %struct.wireless_dev, %struct.wireless_dev* %10, i32 0, i32 22
  %45 = getelementptr inbounds %struct.spinlock, %struct.spinlock* %44, i32 0, i32 0
  %46 = bitcast %union.anon.1* %45 to %struct.raw_spinlock*
  %47 = getelementptr inbounds %struct.raw_spinlock, %struct.raw_spinlock* %4, i32 0, i32 0
  %48 = getelementptr inbounds %struct.qspinlock, %struct.qspinlock* %47, i32 0, i32 0
  %49 = getelementptr inbounds %struct.atomic_t, %struct.atomic_t* %48, i32 0, i32 0
  store i32 0, i32* %49, align 4
  %50 = bitcast %struct.raw_spinlock* %46 to i8*
  %51 = bitcast %struct.raw_spinlock* %4 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %50, i8* %51, i64 4, i32 4, i1 false)
  %52 = getelementptr inbounds %struct.wireless_dev, %struct.wireless_dev* %10, i32 0, i32 5
  call void @INIT_LIST_HEAD(%struct.list_head* %52)
  %53 = getelementptr inbounds %struct.wireless_dev, %struct.wireless_dev* %10, i32 0, i32 6
  %54 = getelementptr inbounds %struct.spinlock, %struct.spinlock* %53, i32 0, i32 0
  %55 = bitcast %union.anon.1* %54 to %struct.raw_spinlock*
  %56 = getelementptr inbounds %struct.wireless_dev, %struct.wireless_dev* %10, i32 0, i32 6
  %57 = getelementptr inbounds %struct.spinlock, %struct.spinlock* %56, i32 0, i32 0
  %58 = bitcast %union.anon.1* %57 to %struct.raw_spinlock*
  %59 = getelementptr inbounds %struct.raw_spinlock, %struct.raw_spinlock* %5, i32 0, i32 0
  %60 = getelementptr inbounds %struct.qspinlock, %struct.qspinlock* %59, i32 0, i32 0
  %61 = getelementptr inbounds %struct.atomic_t, %struct.atomic_t* %60, i32 0, i32 0
  store i32 0, i32* %61, align 4
  %62 = bitcast %struct.raw_spinlock* %58 to i8*
  %63 = bitcast %struct.raw_spinlock* %5 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %62, i8* %63, i64 4, i32 4, i1 false)
  %64 = getelementptr inbounds %struct.cfg80211_registered_device, %struct.cfg80211_registered_device* %15, i32 0, i32 10
  %65 = load i32, i32* %64, align 4
  %66 = add nsw i32 %65, 1
  store i32 %66, i32* %64, align 4
  %67 = getelementptr inbounds %struct.wireless_dev, %struct.wireless_dev* %10, i32 0, i32 4
  store i32 %66, i32* %67, align 8
  %68 = getelementptr inbounds %struct.wireless_dev, %struct.wireless_dev* %10, i32 0, i32 2
  %69 = getelementptr inbounds %struct.cfg80211_registered_device, %struct.cfg80211_registered_device* %15, i32 0, i32 42
  %70 = getelementptr inbounds %struct.wiphy, %struct.wiphy* %69, i32 0, i32 55
  call void @list_add_rcu(%struct.list_head* %68, %struct.list_head* %70)
  %71 = getelementptr inbounds %struct.cfg80211_registered_device, %struct.cfg80211_registered_device* %15, i32 0, i32 9
  %72 = load i32, i32* %71, align 16
  %73 = add nsw i32 %72, 1
  store i32 %73, i32* %71, align 16
  %74 = getelementptr inbounds %struct.net_device, %struct.net_device* %8, i32 0, i32 16
  %75 = load i64, i64* %74, align 16
  %76 = or i64 %75, 8192
  store i64 %76, i64* %74, align 16
  %77 = getelementptr inbounds %struct.net_device, %struct.net_device* %8, i32 0, i32 106
  %78 = getelementptr inbounds %struct.device, %struct.device* %77, i32 0, i32 2
  %79 = getelementptr inbounds %struct.cfg80211_registered_device, %struct.cfg80211_registered_device* %15, i32 0, i32 42
  %80 = getelementptr inbounds %struct.wiphy, %struct.wiphy* %79, i32 0, i32 50
  %81 = getelementptr inbounds %struct.device, %struct.device* %80, i32 0, i32 2
  %82 = call i32 @sysfs_create_link(%struct.kobject* %78, %struct.kobject* %81, i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.12, i32 0, i32 0))
  %83 = icmp ne i32 %82, 0
  br i1 %83, label %84, label %86

; <label>:84:                                     ; preds = %38
  %85 = call i32 (i8*, ...) @printk(i8* getelementptr inbounds ([55 x i8], [55 x i8]* @.str.13, i32 0, i32 0))
  br label %86

; <label>:86:                                     ; preds = %84, %38
  %87 = getelementptr inbounds %struct.wireless_dev, %struct.wireless_dev* %10, i32 0, i32 3
  store %struct.net_device* %8, %struct.net_device** %87, align 8
  %88 = getelementptr inbounds %struct.wireless_dev, %struct.wireless_dev* %10, i32 0, i32 0
  %89 = load %struct.wiphy*, %struct.wiphy** %88, align 8
  %90 = getelementptr inbounds %struct.wiphy, %struct.wiphy* %89, i32 0, i32 10
  %91 = load i32, i32* %90, align 4
  %92 = and i32 %91, 16
  %93 = icmp ne i32 %92, 0
  %94 = getelementptr inbounds %struct.wireless_dev, %struct.wireless_dev* %10, i32 0, i32 28
  %.sink = select i1 %93, i8 1, i8 0
  store i8 %.sink, i8* %94, align 2
  %95 = getelementptr inbounds %struct.wireless_dev, %struct.wireless_dev* %10, i32 0, i32 29
  store i32 -1, i32* %95, align 4
  %96 = getelementptr inbounds %struct.wireless_dev, %struct.wireless_dev* %10, i32 0, i32 1
  %97 = load i32, i32* %96, align 8
  %98 = icmp eq i32 %97, 2
  br i1 %98, label %107, label %99

; <label>:99:                                     ; preds = %86
  %100 = getelementptr inbounds %struct.wireless_dev, %struct.wireless_dev* %10, i32 0, i32 1
  %101 = load i32, i32* %100, align 8
  %102 = icmp eq i32 %101, 8
  br i1 %102, label %107, label %103

; <label>:103:                                    ; preds = %99
  %104 = getelementptr inbounds %struct.wireless_dev, %struct.wireless_dev* %10, i32 0, i32 1
  %105 = load i32, i32* %104, align 8
  %106 = icmp eq i32 %105, 1
  br i1 %106, label %107, label %115

; <label>:107:                                    ; preds = %103, %99, %86
  %108 = getelementptr inbounds %struct.wireless_dev, %struct.wireless_dev* %10, i32 0, i32 8
  %109 = load i8, i8* %108, align 8
  %110 = trunc i8 %109 to i1
  br i1 %110, label %115, label %111

; <label>:111:                                    ; preds = %107
  %112 = getelementptr inbounds %struct.net_device, %struct.net_device* %8, i32 0, i32 34
  %113 = load i32, i32* %112, align 4
  %114 = or i32 %113, 64
  store i32 %114, i32* %112, align 4
  br label %115

; <label>:115:                                    ; preds = %103, %107, %111
  %116 = getelementptr inbounds %struct.wireless_dev, %struct.wireless_dev* %10, i32 0, i32 19
  call void @__init_work(%struct.work_struct* %116, i32 0)
  %117 = getelementptr inbounds %struct.wireless_dev, %struct.wireless_dev* %10, i32 0, i32 19
  %118 = getelementptr inbounds %struct.work_struct, %struct.work_struct* %117, i32 0, i32 0
  %119 = getelementptr inbounds %struct.atomic64_t, %struct.atomic64_t* %6, i32 0, i32 0
  store i64 68719476704, i64* %119, align 8
  %120 = bitcast %struct.atomic64_t* %118 to i8*
  %121 = bitcast %struct.atomic64_t* %6 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %120, i8* %121, i64 8, i32 8, i1 false)
  %122 = getelementptr inbounds %struct.wireless_dev, %struct.wireless_dev* %10, i32 0, i32 19
  %123 = getelementptr inbounds %struct.work_struct, %struct.work_struct* %122, i32 0, i32 1
  call void @INIT_LIST_HEAD(%struct.list_head* %123)
  %124 = getelementptr inbounds %struct.wireless_dev, %struct.wireless_dev* %10, i32 0, i32 19
  %125 = getelementptr inbounds %struct.work_struct, %struct.work_struct* %124, i32 0, i32 2
  store void (%struct.work_struct*)* @cfg80211_autodisconnect_wk, void (%struct.work_struct*)** %125, align 8
  call void @nl80211_notify_iface(%struct.cfg80211_registered_device* %15, %struct.wireless_dev* %10, i32 7)
  br label %298

; <label>:126:                                    ; preds = %29
  call void @cfg80211_leave(%struct.cfg80211_registered_device* %15, %struct.wireless_dev* %10)
  br label %298

; <label>:127:                                    ; preds = %29
  %128 = getelementptr inbounds %struct.wireless_dev, %struct.wireless_dev* %10, i32 0, i32 1
  %129 = load i32, i32* %128, align 8
  call void @cfg80211_update_iface_num(%struct.cfg80211_registered_device* %15, i32 %129, i32 -1)
  %130 = getelementptr inbounds %struct.cfg80211_registered_device, %struct.cfg80211_registered_device* %15, i32 0, i32 25
  %131 = load %struct.cfg80211_scan_request*, %struct.cfg80211_scan_request** %130, align 8
  %132 = icmp ne %struct.cfg80211_scan_request* %131, null
  br i1 %132, label %133, label %169

; <label>:133:                                    ; preds = %127
  %134 = getelementptr inbounds %struct.cfg80211_registered_device, %struct.cfg80211_registered_device* %15, i32 0, i32 25
  %135 = load %struct.cfg80211_scan_request*, %struct.cfg80211_scan_request** %134, align 8
  %136 = getelementptr inbounds %struct.cfg80211_scan_request, %struct.cfg80211_scan_request* %135, i32 0, i32 10
  %137 = load %struct.wireless_dev*, %struct.wireless_dev** %136, align 8
  %138 = icmp eq %struct.wireless_dev* %137, %10
  br i1 %138, label %139, label %169

; <label>:139:                                    ; preds = %133
  %140 = getelementptr inbounds %struct.cfg80211_registered_device, %struct.cfg80211_registered_device* %15, i32 0, i32 25
  %141 = load %struct.cfg80211_scan_request*, %struct.cfg80211_scan_request** %140, align 8
  %142 = getelementptr inbounds %struct.cfg80211_scan_request, %struct.cfg80211_scan_request* %141, i32 0, i32 17
  %143 = load i8, i8* %142, align 8
  %144 = trunc i8 %143 to i1
  %145 = xor i1 %144, true
  %146 = xor i1 %145, true
  %147 = xor i1 %146, true
  %148 = zext i1 %147 to i32
  %149 = icmp ne i32 %148, 0
  %150 = xor i1 %149, true
  %151 = xor i1 %150, true
  %152 = zext i1 %151 to i32
  %153 = sext i32 %152 to i64
  %154 = icmp ne i64 %153, 0
  br i1 %154, label %155, label %156

; <label>:155:                                    ; preds = %139
  call void @warn_slowpath_null(i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.1, i32 0, i32 0), i32 1156)
  br label %156

; <label>:156:                                    ; preds = %155, %139
  %157 = icmp ne i32 %148, 0
  %158 = xor i1 %157, true
  %159 = xor i1 %158, true
  %160 = zext i1 %159 to i32
  %161 = sext i32 %160 to i64
  %162 = icmp ne i64 %161, 0
  br i1 %162, label %163, label %168

; <label>:163:                                    ; preds = %156
  %164 = getelementptr inbounds %struct.cfg80211_registered_device, %struct.cfg80211_registered_device* %15, i32 0, i32 25
  %165 = load %struct.cfg80211_scan_request*, %struct.cfg80211_scan_request** %164, align 8
  %166 = getelementptr inbounds %struct.cfg80211_scan_request, %struct.cfg80211_scan_request* %165, i32 0, i32 16
  %167 = getelementptr inbounds %struct.cfg80211_scan_info, %struct.cfg80211_scan_info* %166, i32 0, i32 2
  store i8 1, i8* %167, align 2
  br label %168

; <label>:168:                                    ; preds = %163, %156
  call void @___cfg80211_scan_done(%struct.cfg80211_registered_device* %15, i1 zeroext false)
  br label %169

; <label>:169:                                    ; preds = %168, %133, %127
  %170 = getelementptr inbounds %struct.cfg80211_registered_device, %struct.cfg80211_registered_device* %15, i32 0, i32 27
  %171 = load %struct.cfg80211_sched_scan_request*, %struct.cfg80211_sched_scan_request** %170, align 8
  %172 = icmp ne %struct.cfg80211_sched_scan_request* %171, null
  br i1 %172, label %173, label %179

; <label>:173:                                    ; preds = %169
  %174 = getelementptr inbounds %struct.cfg80211_sched_scan_request, %struct.cfg80211_sched_scan_request* %171, i32 0, i32 19
  %175 = load %struct.net_device*, %struct.net_device** %174, align 8
  %176 = getelementptr inbounds %struct.wireless_dev, %struct.wireless_dev* %10, i32 0, i32 3
  %177 = load %struct.net_device*, %struct.net_device** %176, align 8
  %178 = icmp eq %struct.net_device* %175, %177
  br label %179

; <label>:179:                                    ; preds = %173, %169
  %180 = phi i1 [ false, %169 ], [ %178, %173 ]
  %181 = xor i1 %180, true
  %182 = xor i1 %181, true
  %183 = zext i1 %182 to i32
  %184 = icmp ne i32 %183, 0
  %185 = xor i1 %184, true
  %186 = xor i1 %185, true
  %187 = zext i1 %186 to i32
  %188 = sext i32 %187 to i64
  %189 = icmp ne i64 %188, 0
  br i1 %189, label %190, label %191

; <label>:190:                                    ; preds = %179
  call void @warn_slowpath_null(i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.1, i32 0, i32 0), i32 1163)
  br label %191

; <label>:191:                                    ; preds = %190, %179
  %192 = icmp ne i32 %183, 0
  %193 = xor i1 %192, true
  %194 = xor i1 %193, true
  %195 = zext i1 %194 to i32
  %196 = sext i32 %195 to i64
  %197 = icmp ne i64 %196, 0
  br i1 %197, label %198, label %200

; <label>:198:                                    ; preds = %191
  %199 = call i32 @__cfg80211_stop_sched_scan(%struct.cfg80211_registered_device* %15, i1 zeroext false)
  br label %200

; <label>:200:                                    ; preds = %198, %191
  %201 = getelementptr inbounds %struct.cfg80211_registered_device, %struct.cfg80211_registered_device* %15, i32 0, i32 11
  %202 = load i32, i32* %201, align 8
  %203 = add nsw i32 %202, -1
  store i32 %203, i32* %201, align 8
  %204 = getelementptr inbounds %struct.cfg80211_registered_device, %struct.cfg80211_registered_device* %15, i32 0, i32 12
  call void @__wake_up(%struct.__wait_queue_head* %204, i32 3, i32 1, i8* null)
  br label %298

; <label>:205:                                    ; preds = %29
  %206 = getelementptr inbounds %struct.wireless_dev, %struct.wireless_dev* %10, i32 0, i32 1
  %207 = load i32, i32* %206, align 8
  call void @cfg80211_update_iface_num(%struct.cfg80211_registered_device* %15, i32 %207, i32 1)
  call void @wdev_lock(%struct.wireless_dev* %10)
  call void @wdev_unlock(%struct.wireless_dev* %10)
  %208 = getelementptr inbounds %struct.cfg80211_registered_device, %struct.cfg80211_registered_device* %15, i32 0, i32 11
  %209 = load i32, i32* %208, align 8
  %210 = add nsw i32 %209, 1
  store i32 %210, i32* %208, align 8
  %211 = getelementptr inbounds %struct.wireless_dev, %struct.wireless_dev* %10, i32 0, i32 1
  %212 = load i32, i32* %211, align 8
  %213 = icmp eq i32 %212, 2
  br i1 %213, label %218, label %214

; <label>:214:                                    ; preds = %205
  %215 = getelementptr inbounds %struct.wireless_dev, %struct.wireless_dev* %10, i32 0, i32 1
  %216 = load i32, i32* %215, align 8
  %217 = icmp eq i32 %216, 8
  br i1 %217, label %218, label %298

; <label>:218:                                    ; preds = %214, %205
  %219 = getelementptr inbounds %struct.cfg80211_registered_device, %struct.cfg80211_registered_device* %15, i32 0, i32 0
  %220 = load %struct.cfg80211_ops*, %struct.cfg80211_ops** %219, align 32
  %221 = getelementptr inbounds %struct.cfg80211_ops, %struct.cfg80211_ops* %220, i32 0, i32 62
  %222 = load i32 (%struct.wiphy*, %struct.net_device*, i1, i32)*, i32 (%struct.wiphy*, %struct.net_device*, i1, i32)** %221, align 8
  %223 = icmp ne i32 (%struct.wiphy*, %struct.net_device*, i1, i32)* %222, null
  br i1 %223, label %224, label %298

; <label>:224:                                    ; preds = %218
  %225 = getelementptr inbounds %struct.wireless_dev, %struct.wireless_dev* %10, i32 0, i32 28
  %226 = load i8, i8* %225, align 2
  %227 = trunc i8 %226 to i1
  %228 = getelementptr inbounds %struct.wireless_dev, %struct.wireless_dev* %10, i32 0, i32 29
  %229 = load i32, i32* %228, align 4
  %230 = call i32 @rdev_set_power_mgmt(%struct.cfg80211_registered_device* %15, %struct.net_device* %8, i1 zeroext %227, i32 %229)
  %231 = icmp ne i32 %230, 0
  br i1 %231, label %232, label %298

; <label>:232:                                    ; preds = %224
  %233 = getelementptr inbounds %struct.wireless_dev, %struct.wireless_dev* %10, i32 0, i32 28
  store i8 0, i8* %233, align 2
  br label %298

; <label>:234:                                    ; preds = %29
  %235 = getelementptr inbounds %struct.wireless_dev, %struct.wireless_dev* %10, i32 0, i32 2
  %236 = call i32 @list_empty(%struct.list_head* %235)
  %237 = icmp ne i32 %236, 0
  br i1 %237, label %247, label %238

; <label>:238:                                    ; preds = %234
  call void @nl80211_notify_iface(%struct.cfg80211_registered_device* %15, %struct.wireless_dev* %10, i32 8)
  %239 = getelementptr inbounds %struct.net_device, %struct.net_device* %8, i32 0, i32 106
  %240 = getelementptr inbounds %struct.device, %struct.device* %239, i32 0, i32 2
  call void @sysfs_remove_link(%struct.kobject* %240, i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.12, i32 0, i32 0))
  %241 = getelementptr inbounds %struct.wireless_dev, %struct.wireless_dev* %10, i32 0, i32 2
  call void @list_del_rcu(%struct.list_head* %241)
  %242 = getelementptr inbounds %struct.cfg80211_registered_device, %struct.cfg80211_registered_device* %15, i32 0, i32 9
  %243 = load i32, i32* %242, align 16
  %244 = add nsw i32 %243, 1
  store i32 %244, i32* %242, align 16
  call void @cfg80211_mlme_purge_registrations(%struct.wireless_dev* %10)
  %245 = getelementptr inbounds %struct.wireless_dev, %struct.wireless_dev* %10, i32 0, i32 19
  %246 = call zeroext i1 @flush_work(%struct.work_struct* %245)
  br label %247

; <label>:247:                                    ; preds = %238, %234
  call void @synchronize_rcu()
  %248 = getelementptr inbounds %struct.wireless_dev, %struct.wireless_dev* %10, i32 0, i32 2
  call void @INIT_LIST_HEAD(%struct.list_head* %248)
  call void @cfg80211_process_wdev_events(%struct.wireless_dev* %10)
  %249 = getelementptr inbounds %struct.wireless_dev, %struct.wireless_dev* %10, i32 0, i32 23
  %250 = load %struct.cfg80211_internal_bss*, %struct.cfg80211_internal_bss** %249, align 8
  %251 = icmp ne %struct.cfg80211_internal_bss* %250, null
  %252 = xor i1 %251, true
  %253 = xor i1 %252, true
  %254 = zext i1 %253 to i32
  %255 = icmp ne i32 %254, 0
  %256 = xor i1 %255, true
  %257 = xor i1 %256, true
  %258 = zext i1 %257 to i32
  %259 = sext i32 %258 to i64
  %260 = icmp ne i64 %259, 0
  br i1 %260, label %261, label %262

; <label>:261:                                    ; preds = %247
  call void @warn_slowpath_null(i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.1, i32 0, i32 0), i32 1252)
  br label %262

; <label>:262:                                    ; preds = %261, %247
  %263 = icmp ne i32 %254, 0
  %264 = xor i1 %263, true
  %265 = xor i1 %264, true
  %266 = zext i1 %265 to i32
  %267 = sext i32 %266 to i64
  %268 = icmp ne i64 %267, 0
  br i1 %268, label %269, label %298

; <label>:269:                                    ; preds = %262
  %270 = getelementptr inbounds %struct.wireless_dev, %struct.wireless_dev* %10, i32 0, i32 23
  %271 = load %struct.cfg80211_internal_bss*, %struct.cfg80211_internal_bss** %270, align 8
  call void @cfg80211_unhold_bss(%struct.cfg80211_internal_bss* %271)
  %272 = getelementptr inbounds %struct.wireless_dev, %struct.wireless_dev* %10, i32 0, i32 0
  %273 = load %struct.wiphy*, %struct.wiphy** %272, align 8
  %274 = getelementptr inbounds %struct.wireless_dev, %struct.wireless_dev* %10, i32 0, i32 23
  %275 = load %struct.cfg80211_internal_bss*, %struct.cfg80211_internal_bss** %274, align 8
  %276 = getelementptr inbounds %struct.cfg80211_internal_bss, %struct.cfg80211_internal_bss* %275, i32 0, i32 9
  call void @cfg80211_put_bss(%struct.wiphy* %273, %struct.cfg80211_bss* %276)
  %277 = getelementptr inbounds %struct.wireless_dev, %struct.wireless_dev* %10, i32 0, i32 23
  store %struct.cfg80211_internal_bss* null, %struct.cfg80211_internal_bss** %277, align 8
  br label %298

; <label>:278:                                    ; preds = %29
  %279 = getelementptr inbounds %struct.wireless_dev, %struct.wireless_dev* %10, i32 0, i32 0
  %280 = load %struct.wiphy*, %struct.wiphy** %279, align 8
  %281 = getelementptr inbounds %struct.wiphy, %struct.wiphy* %280, i32 0, i32 8
  %282 = load i16, i16* %281, align 16
  %283 = zext i16 %282 to i64
  %284 = getelementptr inbounds %struct.wireless_dev, %struct.wireless_dev* %10, i32 0, i32 1
  %285 = load i32, i32* %284, align 8
  %286 = zext i32 %285 to i64
  %287 = shl i64 1, %286
  %288 = and i64 %283, %287
  %289 = icmp ne i64 %288, 0
  br i1 %289, label %292, label %290

; <label>:290:                                    ; preds = %278
  %291 = call i32 @notifier_from_errno(i32 -95)
  br label %299

; <label>:292:                                    ; preds = %278
  %293 = getelementptr inbounds %struct.cfg80211_registered_device, %struct.cfg80211_registered_device* %15, i32 0, i32 3
  %294 = load %struct.rfkill*, %struct.rfkill** %293, align 16
  %295 = call zeroext i1 @rfkill_blocked(%struct.rfkill* %294)
  br i1 %295, label %296, label %298

; <label>:296:                                    ; preds = %292
  %297 = call i32 @notifier_from_errno(i32 -132)
  br label %299

; <label>:298:                                    ; preds = %292, %262, %269, %214, %218, %232, %224, %200, %126, %115, %35
  call void @wireless_nlevent_flush()
  br label %299

; <label>:299:                                    ; preds = %29, %3, %298, %296, %290
  %.0 = phi i32 [ %297, %296 ], [ 1, %298 ], [ %291, %290 ], [ 0, %3 ], [ 0, %29 ]
  ret i32 %.0
}

; Function Attrs: noinline nounwind uwtable
define internal %struct.net_device* @netdev_notifier_info_to_dev(%struct.netdev_notifier_info*) #0 {
  %2 = getelementptr inbounds %struct.netdev_notifier_info, %struct.netdev_notifier_info* %0, i32 0, i32 0
  %3 = load %struct.net_device*, %struct.net_device** %2, align 8
  ret %struct.net_device* %3
}

declare void @__mutex_init(%struct.mutex*, i8*, %struct.lock_class_key*) #1

declare i32 @sysfs_create_link(%struct.kobject*, %struct.kobject*, i8*) #1

declare void @cfg80211_autodisconnect_wk(%struct.work_struct*) #1

declare void @__wake_up(%struct.__wait_queue_head*, i32, i32, i8*) #1

; Function Attrs: noinline nounwind uwtable
define internal i32 @rdev_set_power_mgmt(%struct.cfg80211_registered_device*, %struct.net_device*, i1 zeroext, i32) #0 {
  %5 = zext i1 %2 to i8
  %6 = getelementptr inbounds %struct.cfg80211_registered_device, %struct.cfg80211_registered_device* %0, i32 0, i32 42
  %7 = trunc i8 %5 to i1
  call void @trace_rdev_set_power_mgmt(%struct.wiphy* %6, %struct.net_device* %1, i1 zeroext %7, i32 %3)
  %8 = getelementptr inbounds %struct.cfg80211_registered_device, %struct.cfg80211_registered_device* %0, i32 0, i32 0
  %9 = load %struct.cfg80211_ops*, %struct.cfg80211_ops** %8, align 32
  %10 = getelementptr inbounds %struct.cfg80211_ops, %struct.cfg80211_ops* %9, i32 0, i32 62
  %11 = load i32 (%struct.wiphy*, %struct.net_device*, i1, i32)*, i32 (%struct.wiphy*, %struct.net_device*, i1, i32)** %10, align 8
  %12 = getelementptr inbounds %struct.cfg80211_registered_device, %struct.cfg80211_registered_device* %0, i32 0, i32 42
  %13 = trunc i8 %5 to i1
  %14 = call i32 %11(%struct.wiphy* %12, %struct.net_device* %1, i1 zeroext %13, i32 %3)
  %15 = getelementptr inbounds %struct.cfg80211_registered_device, %struct.cfg80211_registered_device* %0, i32 0, i32 42
  call void @trace_rdev_return_int(%struct.wiphy* %15, i32 %14)
  ret i32 %14
}

declare void @sysfs_remove_link(%struct.kobject*, i8*) #1

declare void @cfg80211_process_wdev_events(%struct.wireless_dev*) #1

; Function Attrs: noinline nounwind uwtable
define internal void @cfg80211_unhold_bss(%struct.cfg80211_internal_bss*) #0 {
  %2 = getelementptr inbounds %struct.cfg80211_internal_bss, %struct.cfg80211_internal_bss* %0, i32 0, i32 6
  %3 = sub nsw i32 0, 1
  %4 = getelementptr inbounds %struct.atomic_t, %struct.atomic_t* %2, i32 0, i32 0
  %5 = call i32 asm sideeffect ".pushsection .smp_locks,\22a\22\0A.balign 4\0A.long 671f - .\0A.popsection\0A671:\0A\09lock; xaddl $0, $1\0A", "=r,=*m,0,*m,~{memory},~{cc},~{dirflag},~{fpsr},~{flags}"(i32* %4, i32 %3, i32* %4) #3, !srcloc !2
  %6 = add nsw i32 %3, %5
  %7 = icmp slt i32 %6, 0
  %8 = xor i1 %7, true
  %9 = xor i1 %8, true
  %10 = zext i1 %9 to i32
  %11 = icmp ne i32 %10, 0
  %12 = xor i1 %11, true
  %13 = xor i1 %12, true
  %14 = zext i1 %13 to i32
  %15 = sext i32 %14 to i64
  %16 = icmp ne i64 %15, 0
  br i1 %16, label %17, label %18

; <label>:17:                                     ; preds = %1
  call void @warn_slowpath_null(i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.7, i32 0, i32 0), i32 174)
  br label %18

; <label>:18:                                     ; preds = %17, %1
  %19 = icmp ne i32 %10, 0
  %20 = xor i1 %19, true
  %21 = xor i1 %20, true
  %22 = zext i1 %21 to i32
  %23 = sext i32 %22 to i64
  ret void
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @notifier_from_errno(i32) #0 {
  %2 = icmp ne i32 %0, 0
  %3 = sub nsw i32 1, %0
  %4 = or i32 32768, %3
  %.0 = select i1 %2, i32 %4, i32 1
  ret i32 %.0
}

; Function Attrs: noinline nounwind uwtable
define internal void @wireless_nlevent_flush() #0 {
  ret void
}

; Function Attrs: noinline nounwind uwtable
define internal void @trace_rdev_set_power_mgmt(%struct.wiphy*, %struct.net_device*, i1 zeroext, i32) #0 {
  %5 = alloca %union.anon.101, align 8
  %6 = zext i1 %2 to i8
  %7 = call i32 @static_key_count(%struct.static_key* getelementptr inbounds (%struct.tracepoint, %struct.tracepoint* @__tracepoint_rdev_set_power_mgmt, i32 0, i32 1)) #3
  %8 = icmp sgt i32 %7, 0
  %9 = xor i1 %8, true
  %10 = zext i1 %8 to i32
  %11 = sext i32 %10 to i64
  %. = select i1 %8, i1 true, i1 false
  br i1 %., label %12, label %37

; <label>:12:                                     ; preds = %4
  %13 = call i32 asm "movl %gs:$1,$0", "=r,*m,~{dirflag},~{fpsr},~{flags}"(i32* @cpu_number) #4, !srcloc !19
  %14 = call i32 @cpumask_test_cpu(i32 %13, %struct.cpumask* @__cpu_online_mask)
  %15 = icmp ne i32 %14, 0
  br i1 %15, label %16, label %37

; <label>:16:                                     ; preds = %12
  call void @rcu_read_lock_sched_notrace()
  %17 = bitcast %union.anon.101* %5 to [1 x i8]*
  %18 = getelementptr inbounds [1 x i8], [1 x i8]* %17, i32 0, i32 0
  %19 = bitcast i8* bitcast (%struct.tracepoint_func** getelementptr inbounds (%struct.tracepoint, %struct.tracepoint* @__tracepoint_rdev_set_power_mgmt, i32 0, i32 4) to i8*) to i64*
  %20 = load volatile i64, i64* %19, align 8
  %21 = bitcast i8* %18 to i64*
  store i64 %20, i64* %21, align 8
  %22 = bitcast %union.anon.101* %5 to %struct.tracepoint_func**
  %23 = load %struct.tracepoint_func*, %struct.tracepoint_func** %22, align 8
  %24 = icmp ne %struct.tracepoint_func* %23, null
  br i1 %24, label %25, label %36

; <label>:25:                                     ; preds = %16, %25
  %.0 = phi %struct.tracepoint_func* [ %32, %25 ], [ %23, %16 ]
  %26 = getelementptr inbounds %struct.tracepoint_func, %struct.tracepoint_func* %.0, i32 0, i32 0
  %27 = load i8*, i8** %26, align 8
  %28 = getelementptr inbounds %struct.tracepoint_func, %struct.tracepoint_func* %.0, i32 0, i32 1
  %29 = load i8*, i8** %28, align 8
  %30 = bitcast i8* %27 to void (i8*, %struct.wiphy*, %struct.net_device*, i1, i32)*
  %31 = trunc i8 %6 to i1
  call void %30(i8* %29, %struct.wiphy* %0, %struct.net_device* %1, i1 zeroext %31, i32 %3)
  %32 = getelementptr inbounds %struct.tracepoint_func, %struct.tracepoint_func* %.0, i32 1
  %33 = getelementptr inbounds %struct.tracepoint_func, %struct.tracepoint_func* %32, i32 0, i32 0
  %34 = load i8*, i8** %33, align 8
  %35 = icmp ne i8* %34, null
  br i1 %35, label %25, label %36

; <label>:36:                                     ; preds = %25, %16
  call void @rcu_read_unlock_sched_notrace()
  br label %37

; <label>:37:                                     ; preds = %12, %36, %4
  ret void
}

; Function Attrs: noinline nounwind uwtable
define internal void @cfg80211_pernet_exit(%struct.net*) #0 {
  call void @rtnl_lock()
  br label %2

; <label>:2:                                      ; preds = %33, %1
  %.sink2 = phi %struct.list_head** [ %35, %33 ], [ getelementptr inbounds (%struct.list_head, %struct.list_head* @cfg80211_rdev_list, i32 0, i32 0), %1 ]
  %3 = load %struct.list_head*, %struct.list_head** %.sink2, align 8
  %4 = bitcast %struct.list_head* %3 to i8*
  %5 = getelementptr inbounds i8, i8* %4, i64 -8
  %6 = bitcast i8* %5 to %struct.cfg80211_registered_device*
  %7 = getelementptr inbounds %struct.cfg80211_registered_device, %struct.cfg80211_registered_device* %6, i32 0, i32 1
  %8 = icmp ne %struct.list_head* %7, @cfg80211_rdev_list
  br i1 %8, label %9, label %36

; <label>:9:                                      ; preds = %2
  %10 = getelementptr inbounds %struct.cfg80211_registered_device, %struct.cfg80211_registered_device* %6, i32 0, i32 42
  %11 = call %struct.net* @wiphy_net(%struct.wiphy* %10)
  %12 = call i32 @net_eq(%struct.net* %11, %struct.net* %0)
  %13 = icmp ne i32 %12, 0
  br i1 %13, label %14, label %33

; <label>:14:                                     ; preds = %9
  %15 = call i32 @cfg80211_switch_netns(%struct.cfg80211_registered_device* %6, %struct.net* @init_net)
  %16 = icmp ne i32 %15, 0
  %17 = xor i1 %16, true
  %18 = xor i1 %17, true
  %19 = zext i1 %18 to i32
  %20 = icmp ne i32 %19, 0
  %21 = xor i1 %20, true
  %22 = xor i1 %21, true
  %23 = zext i1 %22 to i32
  %24 = sext i32 %23 to i64
  %25 = icmp ne i64 %24, 0
  br i1 %25, label %26, label %27

; <label>:26:                                     ; preds = %14
  call void @warn_slowpath_null(i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.1, i32 0, i32 0), i32 1284)
  br label %27

; <label>:27:                                     ; preds = %26, %14
  %28 = icmp ne i32 %19, 0
  %29 = xor i1 %28, true
  %30 = xor i1 %29, true
  %31 = zext i1 %30 to i32
  %32 = sext i32 %31 to i64
  br label %33

; <label>:33:                                     ; preds = %9, %27
  %34 = getelementptr inbounds %struct.cfg80211_registered_device, %struct.cfg80211_registered_device* %6, i32 0, i32 1
  %35 = getelementptr inbounds %struct.list_head, %struct.list_head* %34, i32 0, i32 0
  br label %2

; <label>:36:                                     ; preds = %2
  call void @rtnl_unlock()
  ret void
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @net_eq(%struct.net*, %struct.net*) #0 {
  %3 = icmp eq %struct.net* %0, %1
  %4 = zext i1 %3 to i32
  ret i32 %4
}

attributes #0 = { noinline nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { argmemonly nounwind }
attributes #3 = { nounwind }
attributes #4 = { nounwind readonly }

!llvm.ident = !{!0}

!0 = !{!"clang version 4.0.1 (tags/RELEASE_401/final)"}
!1 = !{i32 -2141893926, i32 -2141893901, i32 -2141893631, i32 -2141893834, i32 -2141893803, i32 -2141893773}
!2 = !{i32 -2146621312, i32 -2146621273, i32 -2146621252, i32 -2146621215, i32 -2146621192, i32 -2146621183}
!3 = !{i32 -2146625749, i32 -2146625710, i32 -2146625689, i32 -2146625652, i32 -2146625629, i32 -2146625759}
!4 = !{i32 -2133833259}
!5 = !{i32 -2137007024}
!6 = !{i32 -2141449114}
!7 = !{i32 237769, i32 237780, i32 -2147205377}
!8 = !{i32 -2145956766}
!9 = !{i32 -2145956460}
!10 = !{i32 -2136849556}
!11 = !{i32 -2146344704}
!12 = !{i32 -2146373506}
!13 = !{i32 1021771}
!14 = !{i32 -2141132431}
!15 = !{i32 -2141601844}
!16 = !{i32 -2144979241}
!17 = !{i32 -2141343255}
!18 = !{i32 -2141292077}
!19 = !{i32 -2138781597}
