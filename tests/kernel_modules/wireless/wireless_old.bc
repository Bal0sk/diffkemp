; ModuleID = 'net/wireless/core.bc'
source_filename = "net/wireless/core.c"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%struct.list_head = type { %struct.list_head*, %struct.list_head* }
%struct.mutex = type { %struct.atomic_t, %struct.spinlock, %struct.list_head, %struct.task_struct*, i8* }
%struct.atomic_t = type { i32 }
%struct.spinlock = type { %union.anon.0 }
%union.anon.0 = type { %struct.raw_spinlock }
%struct.raw_spinlock = type { %struct.arch_spinlock }
%struct.arch_spinlock = type { %union.anon.1 }
%union.anon.1 = type { i16 }
%struct.task_struct = type { i64, i8*, %struct.atomic_t, i32, i32, %struct.llist_node, i32, i32, i32, i32, i32, i32, %struct.sched_class*, %struct.sched_entity, %struct.sched_rt_entity, %struct.task_group*, i8, i32, i32, i32, %struct.cpumask, %struct.sched_info, %struct.list_head, %struct.plist_node, %struct.mm_struct*, %struct.mm_struct*, %struct.task_rss_stat, i32, i32, i32, i32, i32, i32, i8, i32, i32, %struct.task_struct*, %struct.task_struct*, %struct.list_head, %struct.list_head, %struct.task_struct*, %struct.list_head, %struct.list_head, [3 x %struct.pid_link], %struct.list_head, %struct.completion*, i32*, i32*, i64, i64, i64, i64, i64, %struct.cputime, i64, i64, %struct.timespec, %struct.timespec, i64, i64, %struct.task_cputime, [3 x %struct.list_head], %struct.cred*, %struct.cred*, [16 x i8], i32, i32, %struct.sysv_sem, %struct.thread_struct, %struct.fs_struct*, %struct.files_struct*, %struct.nsproxy*, %struct.signal_struct*, %struct.sighand_struct*, %struct.sigset_t, %struct.sigset_t, %struct.sigset_t, %struct.sigpending, i64, i64, i32 (i8*)*, i8*, %struct.sigset_t*, %struct.callback_head*, %struct.audit_context*, i32, i32, %struct.seccomp, i32, i32, %struct.spinlock, %struct.raw_spinlock, %struct.plist_head, %struct.rt_mutex_waiter*, i8*, %struct.bio_list*, %struct.blk_plug*, %struct.reclaim_state*, %struct.backing_dev_info*, %struct.io_context*, i64, %struct.siginfo*, %struct.task_io_accounting, i64, i64, i64, %struct.nodemask_t, %struct.seqcount, i32, i32, %struct.css_set*, %struct.list_head, %struct.robust_list_head*, %struct.compat_robust_list_head*, %struct.list_head, %struct.futex_pi_state*, [2 x %struct.perf_event_context*], %struct.mutex, %struct.list_head, %struct.mempolicy*, i16, i16, %struct.callback_head, %struct.pipe_inode_info*, %struct.page_frag, %struct.task_delay_info*, i32, i32, i64, i64, i64, i64, i64, %struct.atomic_t }
%struct.llist_node = type { %struct.llist_node* }
%struct.sched_class = type opaque
%struct.sched_entity = type { %struct.load_weight, %struct.rb_node, %struct.list_head, i32, i64, i64, i64, i64, i64, %struct.sched_statistics, %struct.sched_entity*, %struct.cfs_rq*, %struct.cfs_rq*, %struct.sched_avg }
%struct.load_weight = type { i64, i64 }
%struct.rb_node = type { i64, %struct.rb_node*, %struct.rb_node* }
%struct.sched_statistics = type { i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64 }
%struct.cfs_rq = type opaque
%struct.sched_avg = type { i32, i32, i64, i64, i64 }
%struct.sched_rt_entity = type { %struct.list_head, i64, i64, i32, %struct.sched_rt_entity* }
%struct.task_group = type opaque
%struct.cpumask = type { [1 x i64] }
%struct.sched_info = type { i64, i64, i64, i64 }
%struct.plist_node = type { i32, %struct.list_head, %struct.list_head }
%struct.mm_struct = type { %struct.vm_area_struct*, %struct.rb_root, %struct.vm_area_struct*, i64 (%struct.file*, i64, i64, i64, i64)*, void (%struct.mm_struct*, i64)*, i64, i64, i64, i64, i64, %struct.pgd_t*, %struct.atomic_t, %struct.atomic_t, i32, %struct.spinlock, %struct.rw_semaphore, %struct.list_head, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, [44 x i64], %struct.mm_rss_stat, %struct.linux_binfmt*, [1 x %struct.cpumask], %struct.mm_context_t, i64, %struct.core_state*, %struct.spinlock, %struct.hlist_head, %struct.file*, %struct.uprobes_state }
%struct.rb_root = type { %struct.rb_node* }
%struct.vm_area_struct = type { i64, i64, %struct.vm_area_struct*, %struct.vm_area_struct*, %struct.rb_node, i64, %struct.mm_struct*, %struct.pgprot, i64, %union.anon, %struct.list_head, %struct.anon_vma*, %struct.vm_operations_struct*, i64, %struct.file*, i8*, %struct.mempolicy* }
%struct.pgprot = type { i64 }
%union.anon = type { %struct.anon }
%struct.anon = type { %struct.rb_node, i64 }
%struct.anon_vma = type opaque
%struct.vm_operations_struct = type { void (%struct.vm_area_struct*)*, void (%struct.vm_area_struct*)*, i32 (%struct.vm_area_struct*, %struct.vm_fault*)*, i32 (%struct.vm_area_struct*, %struct.vm_fault*)*, i32 (%struct.vm_area_struct*, i64, i8*, i32, i32)*, i32 (%struct.vm_area_struct*, %struct.mempolicy*)*, %struct.mempolicy* (%struct.vm_area_struct*, i64)*, i32 (%struct.vm_area_struct*, %struct.nodemask_t*, %struct.nodemask_t*, i64)*, i32 (%struct.vm_area_struct*, i64, i64, i64)* }
%struct.vm_fault = type { i32, i64, i8*, %struct.page* }
%struct.page = type { i64, %struct.address_space*, %struct.anon.15, %union.anon.21, %union.anon.23, [8 x i8] }
%struct.address_space = type { %struct.inode*, %struct.radix_tree_root, %struct.spinlock, i32, %struct.rb_root, %struct.list_head, %struct.mutex, i64, i64, %struct.address_space_operations*, i64, %struct.backing_dev_info*, %struct.spinlock, %struct.list_head, i8* }
%struct.inode = type { i16, i16, i32, i32, i32, %struct.posix_acl*, %struct.posix_acl*, %struct.inode_operations*, %struct.super_block*, %struct.address_space*, i8*, i64, %union.anon.40, i32, i64, %struct.timespec, %struct.timespec, %struct.timespec, %struct.spinlock, i16, i32, i64, i64, %struct.mutex, i64, %struct.hlist_node, %struct.list_head, %struct.list_head, %struct.list_head, %union.anon.41, i64, %struct.atomic_t, %struct.atomic_t, %struct.atomic_t, %struct.file_operations*, %struct.file_lock*, %struct.address_space, [2 x %struct.dquot*], %struct.list_head, %union.anon.42, i32, i32, %struct.hlist_head, i8* }
%struct.posix_acl = type opaque
%struct.inode_operations = type { %struct.dentry* (%struct.inode*, %struct.dentry*, i32)*, i8* (%struct.dentry*, %struct.nameidata*)*, i32 (%struct.inode*, i32)*, %struct.posix_acl* (%struct.inode*, i32)*, i32 (%struct.dentry*, i8*, i32)*, void (%struct.dentry*, %struct.nameidata*, i8*)*, i32 (%struct.inode*, %struct.dentry*, i16, i1)*, i32 (%struct.dentry*, %struct.inode*, %struct.dentry*)*, i32 (%struct.inode*, %struct.dentry*)*, i32 (%struct.inode*, %struct.dentry*, i8*)*, i32 (%struct.inode*, %struct.dentry*, i16)*, i32 (%struct.inode*, %struct.dentry*)*, i32 (%struct.inode*, %struct.dentry*, i16, i32)*, i32 (%struct.inode*, %struct.dentry*, %struct.inode*, %struct.dentry*)*, i32 (%struct.dentry*, %struct.iattr*)*, i32 (%struct.vfsmount*, %struct.dentry*, %struct.kstat*)*, i32 (%struct.dentry*, i8*, i8*, i64, i32)*, i64 (%struct.dentry*, i8*, i8*, i64)*, i64 (%struct.dentry*, i8*, i64)*, i32 (%struct.dentry*, i8*)*, i32 (%struct.inode*, %struct.fiemap_extent_info*, i64, i64)*, i32 (%struct.inode*, %struct.timespec*, i32)*, i32 (%struct.inode*, %struct.dentry*, %struct.file*, i32, i16, i32*)*, [8 x i8] }
%struct.dentry = type { i32, %struct.seqcount, %struct.hlist_bl_node, %struct.dentry*, %struct.qstr, %struct.inode*, [32 x i8], i32, %struct.spinlock, %struct.dentry_operations*, %struct.super_block*, i64, i8*, %struct.list_head, %union.anon.7, %struct.list_head, %struct.hlist_node }
%struct.hlist_bl_node = type { %struct.hlist_bl_node*, %struct.hlist_bl_node** }
%struct.qstr = type { %union.anon.3, i8* }
%union.anon.3 = type { i64 }
%struct.dentry_operations = type { i32 (%struct.dentry*, i32)*, i32 (%struct.dentry*, i32)*, i32 (%struct.dentry*, %struct.inode*, %struct.qstr*)*, i32 (%struct.dentry*, %struct.inode*, %struct.dentry*, %struct.inode*, i32, i8*, %struct.qstr*)*, i32 (%struct.dentry*)*, void (%struct.dentry*)*, void (%struct.dentry*)*, void (%struct.dentry*, %struct.inode*)*, i8* (%struct.dentry*, i8*, i32)*, %struct.vfsmount* (%struct.path*)*, i32 (%struct.dentry*, i1)*, [40 x i8] }
%struct.vfsmount = type opaque
%struct.path = type { %struct.vfsmount*, %struct.dentry* }
%union.anon.7 = type { %struct.list_head }
%struct.nameidata = type opaque
%struct.iattr = type { i32, i16, i32, i32, i64, %struct.timespec, %struct.timespec, %struct.timespec, %struct.file* }
%struct.kstat = type { i64, i32, i16, i32, i32, i32, i32, i64, %struct.timespec, %struct.timespec, %struct.timespec, i64, i64 }
%struct.fiemap_extent_info = type { i32, i32, i32, %struct.fiemap_extent* }
%struct.fiemap_extent = type { i64, i64, i64, [2 x i64], i32, [3 x i32] }
%struct.super_block = type { %struct.list_head, i32, i8, i64, i64, %struct.file_system_type*, %struct.super_operations*, %struct.dquot_operations*, %struct.quotactl_ops*, %struct.export_operations*, i64, i64, %struct.dentry*, %struct.rw_semaphore, i32, %struct.atomic_t, i8*, %struct.xattr_handler**, %struct.list_head, %struct.hlist_bl_head, %struct.list_head*, %struct.list_head, %struct.list_head, i32, [28 x i8], %struct.spinlock, %struct.list_head, i32, %struct.block_device*, %struct.backing_dev_info*, %struct.mtd_info*, %struct.hlist_node, %struct.quota_info, %struct.sb_writers, [32 x i8], [16 x i8], i8*, i32, i32, i32, %struct.mutex, i8*, i8*, %struct.dentry_operations*, i32, %struct.shrinker, %struct.atomic64_t, i32, [20 x i8] }
%struct.file_system_type = type { i8*, i32, %struct.dentry* (%struct.file_system_type*, i32, i8*, i8*)*, void (%struct.super_block*)*, %struct.module*, %struct.file_system_type*, %struct.hlist_head, %struct.lock_class_key, %struct.lock_class_key, %struct.lock_class_key, [3 x %struct.lock_class_key], %struct.lock_class_key, %struct.lock_class_key, %struct.lock_class_key }
%struct.module = type { i32, %struct.list_head, [56 x i8], %struct.module_kobject, %struct.module_attribute*, i8*, i8*, %struct.kobject*, %struct.kernel_symbol*, i64*, i32, %struct.kernel_param*, i32, i32, %struct.kernel_symbol*, i64*, %struct.kernel_symbol*, i64*, i32, i32, %struct.exception_table_entry*, i32 ()*, i8*, i8*, i32, i32, i32, i32, i32, i32, %struct.mod_arch_specific, i32, i32, %struct.list_head, %struct.bug_entry*, %struct.elf64_sym*, %struct.elf64_sym*, i32, i32, i8*, i8*, %struct.module_sect_attrs*, %struct.module_notes_attrs*, i8*, i8*, i32, i32, %struct.tracepoint**, i32, i8**, %struct.ftrace_event_call**, i32, %struct.list_head, %struct.list_head, %struct.task_struct*, void ()*, %struct.module_ref* }
%struct.module_kobject = type { %struct.kobject, %struct.module*, %struct.kobject*, %struct.module_param_attrs* }
%struct.kobject = type { i8*, %struct.list_head, %struct.kobject*, %struct.kset*, %struct.kobj_type*, %struct.sysfs_dirent*, %struct.kref, i8 }
%struct.kset = type { %struct.list_head, %struct.spinlock, %struct.kobject, %struct.kset_uevent_ops* }
%struct.kset_uevent_ops = type { i32 (%struct.kset*, %struct.kobject*)*, i8* (%struct.kset*, %struct.kobject*)*, i32 (%struct.kset*, %struct.kobject*, %struct.kobj_uevent_env*)* }
%struct.kobj_uevent_env = type { [32 x i8*], i32, [2048 x i8], i32 }
%struct.kobj_type = type { void (%struct.kobject*)*, %struct.sysfs_ops*, %struct.attribute**, %struct.kobj_ns_type_operations* (%struct.kobject*)*, i8* (%struct.kobject*)* }
%struct.sysfs_ops = type { i64 (%struct.kobject*, %struct.attribute*, i8*)*, i64 (%struct.kobject*, %struct.attribute*, i8*, i64)*, i8* (%struct.kobject*, %struct.attribute*)* }
%struct.attribute = type { i8*, i16 }
%struct.kobj_ns_type_operations = type { i32, i8* ()*, i8* (%struct.sock*)*, i8* ()*, void (i8*)* }
%struct.sock = type opaque
%struct.sysfs_dirent = type opaque
%struct.kref = type { %struct.atomic_t }
%struct.module_param_attrs = type opaque
%struct.module_attribute = type { %struct.attribute, i64 (%struct.module_attribute*, %struct.module_kobject*, i8*)*, i64 (%struct.module_attribute*, %struct.module_kobject*, i8*, i64)*, void (%struct.module*, i8*)*, i32 (%struct.module*)*, void (%struct.module*)* }
%struct.kernel_param = type { i8*, %struct.kernel_param_ops*, i16, i16, %union.anon.5 }
%struct.kernel_param_ops = type { i32 (i8*, %struct.kernel_param*)*, i32 (i8*, %struct.kernel_param*)*, void (i8*)* }
%union.anon.5 = type { i8* }
%struct.kernel_symbol = type { i64, i8* }
%struct.exception_table_entry = type { i32, i32 }
%struct.mod_arch_specific = type {}
%struct.bug_entry = type { i32, i32, i16, i16 }
%struct.elf64_sym = type { i32, i8, i8, i16, i64, i64 }
%struct.module_sect_attrs = type opaque
%struct.module_notes_attrs = type opaque
%struct.tracepoint = type { i8*, %struct.static_key, void ()*, void ()*, %struct.tracepoint_func* }
%struct.static_key = type { %struct.atomic_t }
%struct.tracepoint_func = type { i8*, i8* }
%struct.ftrace_event_call = type opaque
%struct.module_ref = type { i64, i64 }
%struct.lock_class_key = type {}
%struct.super_operations = type { %struct.inode* (%struct.super_block*)*, void (%struct.inode*)*, void (%struct.inode*, i32)*, i32 (%struct.inode*, %struct.writeback_control*)*, i32 (%struct.inode*)*, void (%struct.inode*)*, void (%struct.super_block*)*, i32 (%struct.super_block*, i32)*, i32 (%struct.super_block*)*, i32 (%struct.super_block*)*, i32 (%struct.dentry*, %struct.kstatfs*)*, i32 (%struct.super_block*, i32*, i8*)*, void (%struct.super_block*)*, i32 (%struct.seq_file*, %struct.dentry*)*, i32 (%struct.seq_file*, %struct.dentry*)*, i32 (%struct.seq_file*, %struct.dentry*)*, i32 (%struct.seq_file*, %struct.dentry*)*, i64 (%struct.super_block*, i32, i8*, i64, i64)*, i64 (%struct.super_block*, i32, i8*, i64, i64)*, i32 (%struct.super_block*, %struct.page*, i32)*, i32 (%struct.super_block*)*, void (%struct.super_block*, i32)* }
%struct.writeback_control = type opaque
%struct.kstatfs = type opaque
%struct.seq_file = type { i8*, i64, i64, i64, i64, i64, i64, %struct.mutex, %struct.seq_operations*, i32, i8* }
%struct.seq_operations = type { i8* (%struct.seq_file*, i64*)*, void (%struct.seq_file*, i8*)*, i8* (%struct.seq_file*, i8*, i64*)*, i32 (%struct.seq_file*, i8*)* }
%struct.dquot_operations = type { i32 (%struct.dquot*)*, %struct.dquot* (%struct.super_block*, i32)*, void (%struct.dquot*)*, i32 (%struct.dquot*)*, i32 (%struct.dquot*)*, i32 (%struct.dquot*)*, i32 (%struct.super_block*, i32)*, i64* (%struct.inode*)* }
%struct.dquot = type { %struct.hlist_node, %struct.list_head, %struct.list_head, %struct.list_head, %struct.mutex, %struct.atomic_t, %struct.__wait_queue_head, %struct.super_block*, %struct.kqid, i64, i64, %struct.mem_dqblk }
%struct.__wait_queue_head = type { %struct.spinlock, %struct.list_head }
%struct.kqid = type { %union.anon.6, i32 }
%union.anon.6 = type { i32 }
%struct.mem_dqblk = type { i64, i64, i64, i64, i64, i64, i64, i64, i64 }
%struct.quotactl_ops = type { i32 (%struct.super_block*, i32, i32, %struct.path*)*, i32 (%struct.super_block*, i32, i32)*, i32 (%struct.super_block*, i32)*, i32 (%struct.super_block*, i32)*, i32 (%struct.super_block*, i32, %struct.if_dqinfo*)*, i32 (%struct.super_block*, i32, %struct.if_dqinfo*)*, i32 (%struct.super_block*, i64, %struct.fs_disk_quota*)*, i32 (%struct.super_block*, i64, %struct.fs_disk_quota*)*, i32 (%struct.super_block*, %struct.fs_quota_stat*)*, i32 (%struct.super_block*, i32, i32)* }
%struct.if_dqinfo = type { i64, i64, i32, i32 }
%struct.fs_disk_quota = type { i8, i8, i16, i32, i64, i64, i64, i64, i64, i64, i32, i32, i16, i16, i32, i64, i64, i64, i32, i16, i16, [8 x i8] }
%struct.fs_quota_stat = type { i8, i16, i8, %struct.fs_qfilestat, %struct.fs_qfilestat, i32, i32, i32, i32, i16, i16 }
%struct.fs_qfilestat = type { i64, i64, i32 }
%struct.export_operations = type opaque
%struct.xattr_handler = type { i8*, i32, i64 (%struct.dentry*, i8*, i64, i8*, i64, i32)*, i32 (%struct.dentry*, i8*, i8*, i64, i32)*, i32 (%struct.dentry*, i8*, i8*, i64, i32, i32)* }
%struct.hlist_bl_head = type { %struct.hlist_bl_node* }
%struct.block_device = type { i32, i32, %struct.inode*, %struct.super_block*, %struct.mutex, %struct.list_head, i8*, i8*, i32, i8, %struct.list_head, %struct.block_device*, i32, %struct.hd_struct*, i32, i32, %struct.gendisk*, %struct.request_queue*, %struct.list_head, i64, i32, %struct.mutex }
%struct.hd_struct = type opaque
%struct.gendisk = type opaque
%struct.request_queue = type opaque
%struct.mtd_info = type opaque
%struct.quota_info = type { i32, %struct.mutex, %struct.mutex, %struct.rw_semaphore, [2 x %struct.inode*], [2 x %struct.mem_dqinfo], [2 x %struct.quota_format_ops*] }
%struct.mem_dqinfo = type { %struct.quota_format_type*, i32, %struct.list_head, i64, i32, i32, i64, i64, i8* }
%struct.quota_format_type = type { i32, %struct.quota_format_ops*, %struct.module*, %struct.quota_format_type* }
%struct.quota_format_ops = type { i32 (%struct.super_block*, i32)*, i32 (%struct.super_block*, i32)*, i32 (%struct.super_block*, i32)*, i32 (%struct.super_block*, i32)*, i32 (%struct.dquot*)*, i32 (%struct.dquot*)*, i32 (%struct.dquot*)* }
%struct.sb_writers = type { [3 x %struct.percpu_counter], %struct.__wait_queue_head, i32, %struct.__wait_queue_head }
%struct.percpu_counter = type { %struct.raw_spinlock, i64, %struct.list_head, i32* }
%struct.shrinker = type { i32 (%struct.shrinker*, %struct.shrink_control*)*, i32, i64, %struct.list_head, %struct.atomic64_t }
%struct.shrink_control = type { i32, i64 }
%struct.atomic64_t = type { i64 }
%union.anon.40 = type { i32 }
%struct.hlist_node = type { %struct.hlist_node*, %struct.hlist_node** }
%union.anon.41 = type { %struct.callback_head }
%struct.file_operations = type { %struct.module*, i64 (%struct.file*, i64, i32)*, i64 (%struct.file*, i8*, i64, i64*)*, i64 (%struct.file*, i8*, i64, i64*)*, i64 (%struct.kiocb*, %struct.iovec*, i64, i64)*, i64 (%struct.kiocb*, %struct.iovec*, i64, i64)*, i32 (%struct.file*, i8*, i32 (i8*, i8*, i32, i64, i64, i32)*)*, i32 (%struct.file*, %struct.poll_table_struct*)*, i64 (%struct.file*, i32, i64)*, i64 (%struct.file*, i32, i64)*, i32 (%struct.file*, %struct.vm_area_struct*)*, i32 (%struct.inode*, %struct.file*)*, i32 (%struct.file*, %struct.files_struct*)*, i32 (%struct.inode*, %struct.file*)*, i32 (%struct.file*, i64, i64, i32)*, i32 (%struct.kiocb*, i32)*, i32 (i32, %struct.file*, i32)*, i32 (%struct.file*, i32, %struct.file_lock*)*, i64 (%struct.file*, %struct.page*, i32, i64, i64*, i32)*, i64 (%struct.file*, i64, i64, i64, i64)*, i32 (i32)*, i32 (%struct.file*, i32, %struct.file_lock*)*, i64 (%struct.pipe_inode_info*, %struct.file*, i64*, i64, i32)*, i64 (%struct.file*, i64*, %struct.pipe_inode_info*, i64, i32)*, i32 (%struct.file*, i64, %struct.file_lock**)*, i64 (%struct.file*, i32, i64, i64)*, i32 (%struct.seq_file*, %struct.file*)* }
%struct.kiocb = type opaque
%struct.iovec = type { i8*, i64 }
%struct.poll_table_struct = type opaque
%struct.file_lock = type { %struct.file_lock*, %struct.list_head, %struct.list_head, %struct.files_struct*, i32, i8, i32, %struct.pid*, %struct.__wait_queue_head, %struct.file*, i64, i64, %struct.fasync_struct*, i64, i64, %struct.file_lock_operations*, %struct.lock_manager_operations*, %union.anon.8 }
%struct.pid = type { %struct.atomic_t, i32, [3 x %struct.hlist_head], %struct.callback_head, [1 x %struct.upid] }
%struct.upid = type { i32, %struct.pid_namespace*, %struct.hlist_node }
%struct.pid_namespace = type opaque
%struct.fasync_struct = type { %struct.spinlock, i32, i32, %struct.fasync_struct*, %struct.file*, %struct.callback_head }
%struct.file_lock_operations = type { void (%struct.file_lock*, %struct.file_lock*)*, void (%struct.file_lock*)* }
%struct.lock_manager_operations = type { i32 (%struct.file_lock*, %struct.file_lock*)*, void (%struct.file_lock*)*, i32 (%struct.file_lock*, %struct.file_lock*, i32)*, void (%struct.file_lock*)*, i32 (%struct.file_lock**, i32)* }
%union.anon.8 = type { %struct.nfs_lock_info }
%struct.nfs_lock_info = type { i32, %struct.nlm_lockowner*, %struct.list_head }
%struct.nlm_lockowner = type opaque
%union.anon.42 = type { %struct.pipe_inode_info* }
%struct.radix_tree_root = type { i32, i32, %struct.radix_tree_node* }
%struct.radix_tree_node = type opaque
%struct.address_space_operations = type { i32 (%struct.page*, %struct.writeback_control*)*, i32 (%struct.file*, %struct.page*)*, i32 (%struct.address_space*, %struct.writeback_control*)*, i32 (%struct.page*)*, i32 (%struct.file*, %struct.address_space*, %struct.list_head*, i32)*, i32 (%struct.file*, %struct.address_space*, i64, i32, i32, %struct.page**, i8**)*, i32 (%struct.file*, %struct.address_space*, i64, i32, i32, %struct.page*, i8*)*, i64 (%struct.address_space*, i64)*, void (%struct.page*, i64)*, i32 (%struct.page*, i32)*, void (%struct.page*)*, i64 (i32, %struct.kiocb*, %struct.iovec*, i64, i64)*, i32 (%struct.address_space*, i64, i32, i8**, i64*)*, i32 (%struct.address_space*, %struct.page*, %struct.page*, i32)*, i32 (%struct.page*)*, i32 (%struct.page*, %struct.read_descriptor_t*, i64)*, i32 (%struct.address_space*, %struct.page*)*, i32 (%struct.swap_info_struct*, %struct.file*, i64*)*, void (%struct.file*)* }
%struct.read_descriptor_t = type { i64, i64, %union.anon.14, i32 }
%union.anon.14 = type { i8* }
%struct.swap_info_struct = type opaque
%struct.anon.15 = type { %union.anon.16, %union.anon.17 }
%union.anon.16 = type { i64 }
%union.anon.17 = type { i64 }
%union.anon.21 = type { %struct.list_head }
%union.anon.23 = type { i64 }
%struct.pgd_t = type { i64 }
%struct.rw_semaphore = type { i64, %struct.raw_spinlock, %struct.list_head }
%struct.mm_rss_stat = type { [3 x %struct.atomic64_t] }
%struct.linux_binfmt = type opaque
%struct.mm_context_t = type { i8*, i32, i16, %struct.mutex, i8* }
%struct.core_state = type { %struct.atomic_t, %struct.core_thread, %struct.completion }
%struct.core_thread = type { %struct.task_struct*, %struct.core_thread* }
%struct.completion = type { i32, %struct.__wait_queue_head }
%struct.hlist_head = type { %struct.hlist_node* }
%struct.file = type { %union.anon.2, %struct.path, %struct.inode*, %struct.file_operations*, %struct.spinlock, i32, %struct.atomic64_t, i32, i32, i64, %struct.fown_struct, %struct.cred*, %struct.file_ra_state, i64, i8*, i8*, %struct.list_head, %struct.list_head, %struct.address_space* }
%union.anon.2 = type { %struct.list_head }
%struct.fown_struct = type { %struct.rwlock_t, %struct.pid*, i32, i32, i32, i32 }
%struct.rwlock_t = type { %union.arch_rwlock_t }
%union.arch_rwlock_t = type { i32 }
%struct.file_ra_state = type { i64, i32, i32, i32, i32, i64 }
%struct.uprobes_state = type {}
%struct.task_rss_stat = type { i32, [3 x i32] }
%struct.pid_link = type { %struct.hlist_node, %struct.pid* }
%struct.cputime = type { i64, i64 }
%struct.timespec = type { i64, i64 }
%struct.task_cputime = type { i64, i64, i64 }
%struct.cred = type { %struct.atomic_t, i32, i32, i32, i32, i32, i32, i32, i32, i32, %struct.kernel_cap_struct, %struct.kernel_cap_struct, %struct.kernel_cap_struct, %struct.kernel_cap_struct, i8, %struct.key*, %struct.key*, %struct.key*, %struct.key*, i8*, %struct.user_struct*, %struct.user_namespace*, %struct.group_info*, %struct.callback_head }
%struct.kernel_cap_struct = type { [2 x i32] }
%struct.key = type { %struct.atomic_t, i32, %union.anon.10, %struct.key_type*, %struct.rw_semaphore, %struct.key_user*, i8*, %union.anon.11, i64, i32, i32, i32, i16, i16, i64, i8*, %union.anon.12, %union.anon.13 }
%union.anon.10 = type { %struct.rb_node }
%struct.key_type = type opaque
%struct.key_user = type opaque
%union.anon.11 = type { i64 }
%union.anon.12 = type { %struct.list_head }
%union.anon.13 = type { i64 }
%struct.user_struct = type { %struct.atomic_t, %struct.atomic_t, %struct.atomic_t, %struct.atomic_t, %struct.atomic_t, %struct.atomic_t, %struct.atomic64_t, i64, i64, %struct.key*, %struct.key*, %struct.hlist_node, i32, %struct.atomic64_t }
%struct.user_namespace = type opaque
%struct.group_info = type { %struct.atomic_t, i32, i32, [32 x i32], [0 x i32*] }
%struct.sysv_sem = type { %struct.sem_undo_list* }
%struct.sem_undo_list = type opaque
%struct.thread_struct = type { [3 x %struct.desc_struct], i64, i64, i64, i16, i16, i16, i16, i64, i64, [4 x %struct.perf_event*], i64, i64, i64, i64, i64, %struct.fpu, i64*, i64, i32 }
%struct.desc_struct = type { %union.anon.24 }
%union.anon.24 = type { %struct.anon.25 }
%struct.anon.25 = type { i32, i32 }
%struct.perf_event = type opaque
%struct.fpu = type { i32, i32, %union.thread_xstate* }
%union.thread_xstate = type { %struct.xsave_struct }
%struct.xsave_struct = type { %struct.i387_fxsave_struct, %struct.xsave_hdr_struct, %struct.ymmh_struct }
%struct.i387_fxsave_struct = type { i16, i16, i16, i16, %union.anon.27, i32, i32, [32 x i32], [64 x i32], [12 x i32], %union.anon.30 }
%union.anon.27 = type { %struct.anon.28 }
%struct.anon.28 = type { i64, i64 }
%union.anon.30 = type { [12 x i32] }
%struct.xsave_hdr_struct = type { i64, [2 x i64], [5 x i64] }
%struct.ymmh_struct = type { [64 x i32] }
%struct.fs_struct = type opaque
%struct.files_struct = type opaque
%struct.nsproxy = type { %struct.atomic_t, %struct.uts_namespace*, %struct.ipc_namespace*, %struct.mnt_namespace*, %struct.pid_namespace*, %struct.net* }
%struct.uts_namespace = type opaque
%struct.ipc_namespace = type opaque
%struct.mnt_namespace = type opaque
%struct.net = type { %struct.atomic_t, %struct.atomic_t, %struct.spinlock, %struct.list_head, %struct.list_head, %struct.list_head, %struct.user_namespace*, i32, %struct.proc_dir_entry*, %struct.proc_dir_entry*, %struct.ctl_table_set, %struct.sock*, %struct.sock*, %struct.list_head, %struct.hlist_head*, %struct.hlist_head*, i32, i32, %struct.list_head, %struct.net_device*, %struct.netns_core, %struct.netns_mib, %struct.netns_packet, %struct.netns_unix, [56 x i8], %struct.netns_ipv4, %struct.netns_ipv6, %struct.netns_nf, %struct.netns_xt, %struct.netns_ct, [56 x i8], %struct.netns_nf_frag, %struct.sock*, %struct.sock*, %struct.net_generic*, [40 x i8], %struct.netns_xfrm, %struct.netns_ipvs*, %struct.sock*, %struct.atomic_t, [44 x i8] }
%struct.proc_dir_entry = type opaque
%struct.ctl_table_set = type { i32 (%struct.ctl_table_set*)*, %struct.ctl_dir }
%struct.ctl_dir = type { %struct.ctl_table_header, %struct.rb_root }
%struct.ctl_table_header = type { %union.anon.43, %struct.completion*, %struct.ctl_table*, %struct.ctl_table_root*, %struct.ctl_table_set*, %struct.ctl_dir*, %struct.ctl_node* }
%union.anon.43 = type { %struct.anon.44 }
%struct.anon.44 = type { %struct.ctl_table*, i32, i32, i32 }
%struct.ctl_table = type { i8*, i8*, i32, i16, %struct.ctl_table*, i32 (%struct.ctl_table*, i32, i8*, i64*, i64*)*, %struct.ctl_table_poll*, i8*, i8* }
%struct.ctl_table_poll = type { %struct.atomic_t, %struct.__wait_queue_head }
%struct.ctl_table_root = type { %struct.ctl_table_set, %struct.ctl_table_set* (%struct.ctl_table_root*, %struct.nsproxy*)*, i32 (%struct.ctl_table_header*, %struct.ctl_table*)* }
%struct.ctl_node = type { %struct.rb_node, %struct.ctl_table_header* }
%struct.net_device = type { [16 x i8], %struct.hlist_node, i8*, i64, i64, i64, i32, i64, %struct.list_head, %struct.list_head, %struct.list_head, %struct.list_head, i64, i64, i64, i64, i64, i32, i32, %struct.net_device_stats, %struct.atomic64_t, %struct.net_device_ops*, %struct.ethtool_ops*, %struct.header_ops*, i32, i32, i16, i16, i8, i8, i8, i8, i32, i16, i16, i16, i16, [32 x i8], i8, i8, i8, i16, %struct.spinlock, %struct.netdev_hw_addr_list, %struct.netdev_hw_addr_list, %struct.netdev_hw_addr_list, %struct.kset*, i8, i32, i32, i8*, %struct.in_device*, %struct.dn_dev*, %struct.inet6_dev*, i8*, %struct.wireless_dev*, i64, i8*, %struct.netdev_rx_queue*, i32, i32, i32 (%struct.sk_buff**)*, i8*, %struct.netdev_queue*, [32 x i8], [56 x i8], %struct.netdev_queue*, i32, i32, %struct.Qdisc*, i64, %struct.spinlock, %struct.xps_dev_maps*, %struct.cpu_rmap*, i64, i32, %struct.timer_list, i32*, %struct.list_head, %struct.hlist_node, %struct.list_head, i8, i8, i16, void (%struct.net_device*)*, %struct.netpoll_info*, %struct.net*, %union.anon.51, %struct.garp_port*, %struct.mrp_port*, %struct.device, [4 x %struct.attribute_group*], %struct.rtnl_link_ops*, i32, i16, i8, [16 x %struct.netdev_tc_txq], [16 x i8], %struct.phy_device*, %struct.lock_class_key*, i32, %struct.pm_qos_request, [56 x i8] }
%struct.net_device_stats = type { i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64 }
%struct.net_device_ops = type { i32 (%struct.net_device*)*, void (%struct.net_device*)*, i32 (%struct.net_device*)*, i32 (%struct.net_device*)*, i32 (%struct.sk_buff*, %struct.net_device*)*, i16 (%struct.net_device*, %struct.sk_buff*)*, void (%struct.net_device*, i32)*, void (%struct.net_device*)*, i32 (%struct.net_device*, i8*)*, i32 (%struct.net_device*)*, i32 (%struct.net_device*, %struct.ifreq*, i32)*, i32 (%struct.net_device*, %struct.ifmap*)*, i32 (%struct.net_device*, i32)*, i32 (%struct.net_device*, %struct.neigh_parms*)*, void (%struct.net_device*)*, %struct.rtnl_link_stats64* (%struct.net_device*, %struct.rtnl_link_stats64*)*, %struct.net_device_stats* (%struct.net_device*)*, i32 (%struct.net_device*, i16, i16)*, i32 (%struct.net_device*, i16, i16)*, void (%struct.net_device*)*, i32 (%struct.net_device*, %struct.netpoll_info*, i32)*, void (%struct.net_device*)*, i32 (%struct.net_device*, i32, i8*)*, i32 (%struct.net_device*, i32, i16, i8)*, i32 (%struct.net_device*, i32, i32)*, i32 (%struct.net_device*, i32, i1)*, i32 (%struct.net_device*, i32, %struct.ifla_vf_info*)*, i32 (%struct.net_device*, i32, %struct.nlattr**)*, i32 (%struct.net_device*, i32, %struct.sk_buff*)*, i32 (%struct.net_device*, i8)*, i32 (%struct.net_device*, %struct.sk_buff*, i16, i32)*, i32 (%struct.net_device*, %struct.net_device*)*, i32 (%struct.net_device*, %struct.net_device*)*, i64 (%struct.net_device*, i64)*, i32 (%struct.net_device*, i64)*, i32 (%struct.neighbour*)*, void (%struct.neighbour*)*, i32 (%struct.ndmsg*, %struct.nlattr**, %struct.net_device*, i8*, i16)*, i32 (%struct.ndmsg*, %struct.nlattr**, %struct.net_device*, i8*)*, i32 (%struct.sk_buff*, %struct.netlink_callback*, %struct.net_device*, i32)*, i32 (%struct.net_device*, %struct.nlmsghdr*)*, i32 (%struct.sk_buff*, i32, i32, %struct.net_device*, i32)*, i32 (%struct.net_device*, %struct.nlmsghdr*)*, i32 (%struct.net_device*, i1)* }
%struct.sk_buff = type { %struct.sk_buff*, %struct.sk_buff*, %union.ktime, %struct.sock*, %struct.net_device*, [48 x i8], i64, %struct.sec_path*, i32, i32, i16, i16, %union.anon.45, i32, i16, i16, {}*, %struct.nf_conntrack*, %struct.sk_buff*, i32, i32, i16, i16, i16, i16, i16, i16, i32, %union.anon.47, i32, i32, i32, i32, i32, i32, i32, i32, i8*, i8*, i32, %struct.atomic_t }
%union.ktime = type { i64 }
%struct.sec_path = type opaque
%union.anon.45 = type { i32 }
%struct.nf_conntrack = type { %struct.atomic_t }
%union.anon.47 = type { i32 }
%struct.ifreq = type { %union.anon.48, %union.anon.49 }
%union.anon.48 = type { [16 x i8] }
%union.anon.49 = type { %struct.ifmap }
%struct.ifmap = type { i64, i64, i16, i8, i8, i8 }
%struct.neigh_parms = type opaque
%struct.rtnl_link_stats64 = type { i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64 }
%struct.ifla_vf_info = type { i32, [32 x i8], i32, i32, i32, i32 }
%struct.nlattr = type { i16, i16 }
%struct.neighbour = type opaque
%struct.ndmsg = type { i8, i8, i16, i32, i16, i8, i8 }
%struct.netlink_callback = type { %struct.sk_buff*, %struct.nlmsghdr*, i32 (%struct.sk_buff*, %struct.netlink_callback*)*, i32 (%struct.netlink_callback*)*, i8*, %struct.module*, i16, i16, i32, i32, [6 x i64] }
%struct.nlmsghdr = type { i32, i16, i16, i32, i32 }
%struct.ethtool_ops = type { i32 (%struct.net_device*, %struct.ethtool_cmd*)*, i32 (%struct.net_device*, %struct.ethtool_cmd*)*, void (%struct.net_device*, %struct.ethtool_drvinfo*)*, i32 (%struct.net_device*)*, void (%struct.net_device*, %struct.ethtool_regs*, i8*)*, void (%struct.net_device*, %struct.ethtool_wolinfo*)*, i32 (%struct.net_device*, %struct.ethtool_wolinfo*)*, i32 (%struct.net_device*)*, void (%struct.net_device*, i32)*, i32 (%struct.net_device*)*, i32 (%struct.net_device*)*, i32 (%struct.net_device*)*, i32 (%struct.net_device*, %struct.ethtool_eeprom*, i8*)*, i32 (%struct.net_device*, %struct.ethtool_eeprom*, i8*)*, i32 (%struct.net_device*, %struct.ethtool_coalesce*)*, i32 (%struct.net_device*, %struct.ethtool_coalesce*)*, void (%struct.net_device*, %struct.ethtool_ringparam*)*, i32 (%struct.net_device*, %struct.ethtool_ringparam*)*, void (%struct.net_device*, %struct.ethtool_pauseparam*)*, i32 (%struct.net_device*, %struct.ethtool_pauseparam*)*, void (%struct.net_device*, %struct.ethtool_test*, i64*)*, void (%struct.net_device*, i32, i8*)*, i32 (%struct.net_device*, i32)*, void (%struct.net_device*, %struct.ethtool_stats*, i64*)*, i32 (%struct.net_device*)*, void (%struct.net_device*)*, i32 (%struct.net_device*)*, i32 (%struct.net_device*, i32)*, i32 (%struct.net_device*, i32)*, i32 (%struct.net_device*, %struct.ethtool_rxnfc*, i32*)*, i32 (%struct.net_device*, %struct.ethtool_rxnfc*)*, i32 (%struct.net_device*, %struct.ethtool_flash*)*, i32 (%struct.net_device*, i32*)*, i32 (%struct.net_device*)*, i32 (%struct.net_device*, i32*)*, i32 (%struct.net_device*, i32*)*, void (%struct.net_device*, %struct.ethtool_channels*)*, i32 (%struct.net_device*, %struct.ethtool_channels*)*, i32 (%struct.net_device*, %struct.ethtool_dump*)*, i32 (%struct.net_device*, %struct.ethtool_dump*, i8*)*, i32 (%struct.net_device*, %struct.ethtool_dump*)*, i32 (%struct.net_device*, %struct.ethtool_ts_info*)*, i32 (%struct.net_device*, %struct.ethtool_modinfo*)*, i32 (%struct.net_device*, %struct.ethtool_eeprom*, i8*)*, i32 (%struct.net_device*, %struct.ethtool_eee*)*, i32 (%struct.net_device*, %struct.ethtool_eee*)* }
%struct.ethtool_cmd = type { i32, i32, i32, i16, i8, i8, i8, i8, i8, i8, i32, i32, i16, i8, i8, i32, [2 x i32] }
%struct.ethtool_drvinfo = type { i32, [32 x i8], [32 x i8], [32 x i8], [32 x i8], [32 x i8], [12 x i8], i32, i32, i32, i32, i32 }
%struct.ethtool_regs = type { i32, i32, i32, [0 x i8] }
%struct.ethtool_wolinfo = type { i32, i32, i32, [6 x i8] }
%struct.ethtool_coalesce = type { i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32 }
%struct.ethtool_ringparam = type { i32, i32, i32, i32, i32, i32, i32, i32, i32 }
%struct.ethtool_pauseparam = type { i32, i32, i32, i32 }
%struct.ethtool_test = type { i32, i32, i32, i32, [0 x i64] }
%struct.ethtool_stats = type { i32, i32, [0 x i64] }
%struct.ethtool_rxnfc = type { i32, i32, i64, %struct.ethtool_rx_flow_spec, i32, [0 x i32] }
%struct.ethtool_rx_flow_spec = type { i32, %union.ethtool_flow_union, %struct.ethtool_flow_ext, %union.ethtool_flow_union, %struct.ethtool_flow_ext, i64, i32 }
%union.ethtool_flow_union = type { %struct.ethtool_tcpip4_spec, [36 x i8] }
%struct.ethtool_tcpip4_spec = type { i32, i32, i16, i16, i8 }
%struct.ethtool_flow_ext = type { [2 x i8], [6 x i8], i16, i16, [2 x i32] }
%struct.ethtool_flash = type { i32, i32, [128 x i8] }
%struct.ethtool_channels = type { i32, i32, i32, i32, i32, i32, i32, i32, i32 }
%struct.ethtool_dump = type { i32, i32, i32, i32, [0 x i8] }
%struct.ethtool_ts_info = type { i32, i32, i32, i32, [3 x i32], i32, [3 x i32] }
%struct.ethtool_modinfo = type { i32, i32, i32, [8 x i32] }
%struct.ethtool_eeprom = type { i32, i32, i32, i32, [0 x i8] }
%struct.ethtool_eee = type { i32, i32, i32, i32, i32, i32, i32, i32, [2 x i32] }
%struct.header_ops = type { i32 (%struct.sk_buff*, %struct.net_device*, i16, i8*, i8*, i32)*, i32 (%struct.sk_buff*, i8*)*, i32 (%struct.sk_buff*)*, i32 (%struct.neighbour*, %struct.hh_cache*, i16)*, void (%struct.hh_cache*, %struct.net_device*, i8*)* }
%struct.hh_cache = type { i16, i16, %struct.seqlock_t, [12 x i64] }
%struct.seqlock_t = type { %struct.seqcount, %struct.spinlock }
%struct.netdev_hw_addr_list = type { %struct.list_head, i32 }
%struct.in_device = type opaque
%struct.dn_dev = type opaque
%struct.inet6_dev = type opaque
%struct.wireless_dev = type { %struct.wiphy*, i32, %struct.list_head, %struct.net_device*, i32, %struct.list_head, %struct.spinlock, %struct.mutex, %struct.work_struct, i8, i8, [6 x i8], [32 x i8], i8, i8, i8, i32, %struct.cfg80211_conn*, %struct.cfg80211_cached_keys*, %struct.list_head, %struct.spinlock, %struct.cfg80211_internal_bss*, %struct.cfg80211_chan_def, %struct.ieee80211_channel*, i8, i8, i32, i32, i32, i8, i64 }
%struct.wiphy = type { [6 x i8], [6 x i8], %struct.mac_address*, %struct.ieee80211_txrx_stypes*, %struct.ieee80211_iface_combination*, i32, i16, i16, i16, i16, i32, i32, i32, i32, i32, i8, i8, i8, i16, i16, i32, i32*, i8, i8, i32, i32, i8, [32 x i8], i32, %struct.wiphy_wowlan_support, i16, i8, i32, i32, i32, i8*, i8*, i8, i8*, [3 x %struct.ieee80211_supported_band*], void (%struct.wiphy*, %struct.regulatory_request*)*, %struct.ieee80211_regdomain*, %struct.device, i8, %struct.dentry*, %struct.ieee80211_ht_cap*, %struct.ieee80211_vht_cap*, %struct.net*, [16 x i8], [0 x i8] }
%struct.mac_address = type { [6 x i8] }
%struct.ieee80211_txrx_stypes = type { i16, i16 }
%struct.ieee80211_iface_combination = type { %struct.ieee80211_iface_limit*, i32, i16, i8, i8, i8 }
%struct.ieee80211_iface_limit = type { i16, i16 }
%struct.wiphy_wowlan_support = type { i32, i32, i32, i32, i32, %struct.wiphy_wowlan_tcp_support* }
%struct.wiphy_wowlan_tcp_support = type { %struct.nl80211_wowlan_tcp_data_token_feature*, i32, i32, i32, i8 }
%struct.nl80211_wowlan_tcp_data_token_feature = type { i32, i32, i32 }
%struct.ieee80211_supported_band = type { %struct.ieee80211_channel*, %struct.ieee80211_rate*, i32, i32, i32, %struct.ieee80211_sta_ht_cap, %struct.ieee80211_sta_vht_cap }
%struct.ieee80211_rate = type { i32, i16, i16, i16 }
%struct.ieee80211_sta_ht_cap = type <{ i16, i8, i8, i8, %struct.ieee80211_mcs_info, i8 }>
%struct.ieee80211_mcs_info = type { [10 x i8], i16, i8, [3 x i8] }
%struct.ieee80211_sta_vht_cap = type { i8, i32, %struct.ieee80211_vht_mcs_info }
%struct.ieee80211_vht_mcs_info = type { i16, i16, i16, i16 }
%struct.regulatory_request = type { %struct.callback_head, i32, i32, i32, [2 x i8], i8, i8, i8, i32, %struct.list_head }
%struct.ieee80211_regdomain = type { %struct.callback_head, i32, [2 x i8], i8, [0 x %struct.ieee80211_reg_rule] }
%struct.ieee80211_reg_rule = type { %struct.ieee80211_freq_range, %struct.ieee80211_power_rule, i32 }
%struct.ieee80211_freq_range = type { i32, i32, i32 }
%struct.ieee80211_power_rule = type { i32, i32 }
%struct.ieee80211_ht_cap = type <{ i16, i8, %struct.ieee80211_mcs_info, i16, i32, i8 }>
%struct.ieee80211_vht_cap = type { i32, %struct.ieee80211_vht_mcs_info }
%struct.work_struct = type { %struct.atomic64_t, %struct.list_head, void (%struct.work_struct*)* }
%struct.cfg80211_conn = type opaque
%struct.cfg80211_cached_keys = type { [6 x %struct.key_params], [6 x [32 x i8]], i32, i32 }
%struct.key_params = type { i8*, i8*, i32, i32, i32 }
%struct.cfg80211_internal_bss = type { %struct.list_head, %struct.list_head, %struct.rb_node, i64, i64, %struct.atomic_t, %struct.cfg80211_bss }
%struct.cfg80211_bss = type { %struct.ieee80211_channel*, %struct.cfg80211_bss_ies*, %struct.cfg80211_bss_ies*, %struct.cfg80211_bss_ies*, %struct.cfg80211_bss*, i32, i16, i16, [6 x i8], [2 x i8], [0 x i8] }
%struct.cfg80211_bss_ies = type { i64, %struct.callback_head, i32, [0 x i8] }
%struct.cfg80211_chan_def = type { %struct.ieee80211_channel*, i32, i32, i32 }
%struct.ieee80211_channel = type { i32, i16, i16, i32, i32, i32, i32, i8, i32, i32, i32, i32, i64 }
%struct.netdev_rx_queue = type { %struct.rps_map*, %struct.rps_dev_flow_table*, %struct.kobject, %struct.net_device*, [40 x i8] }
%struct.rps_map = type { i32, %struct.callback_head, [0 x i16] }
%struct.rps_dev_flow_table = type { i32, %struct.callback_head, [0 x %struct.rps_dev_flow] }
%struct.rps_dev_flow = type { i16, i16, i32 }
%struct.netdev_queue = type { %struct.net_device*, %struct.Qdisc*, %struct.Qdisc*, %struct.kobject, i32, [36 x i8], %struct.spinlock, i32, i64, i64, i64, [32 x i8], %struct.dql }
%struct.dql = type { i32, i32, i32, [52 x i8], i32, i32, i32, i32, i32, i32, i64, i32, i32, i32, [20 x i8] }
%struct.Qdisc = type opaque
%struct.xps_dev_maps = type { %struct.callback_head, [0 x %struct.xps_map*] }
%struct.xps_map = type { i32, i32, %struct.callback_head, [0 x i16] }
%struct.cpu_rmap = type opaque
%struct.timer_list = type { %struct.list_head, i64, %struct.tvec_base*, void (i64)*, i64, i32, i32, i8*, [16 x i8] }
%struct.tvec_base = type opaque
%struct.netpoll_info = type opaque
%union.anon.51 = type { i8* }
%struct.garp_port = type opaque
%struct.mrp_port = type opaque
%struct.device = type { %struct.device*, %struct.device_private*, %struct.kobject, i8*, %struct.device_type*, %struct.mutex, %struct.bus_type*, %struct.device_driver*, i8*, %struct.dev_pm_info, %struct.dev_pm_domain*, i32, i64*, i64, %struct.device_dma_parameters*, %struct.list_head, %struct.dma_coherent_mem*, %struct.dev_archdata, %struct.device_node*, %struct.acpi_dev_node, i32, i32, %struct.spinlock, %struct.list_head, %struct.klist_node, %struct.class*, %struct.attribute_group**, void (%struct.device*)*, %struct.iommu_group* }
%struct.device_private = type opaque
%struct.device_type = type { i8*, %struct.attribute_group**, i32 (%struct.device*, %struct.kobj_uevent_env*)*, i8* (%struct.device*, i16*, i32*, i32*)*, void (%struct.device*)*, %struct.dev_pm_ops* }
%struct.dev_pm_ops = type { i32 (%struct.device*)*, void (%struct.device*)*, i32 (%struct.device*)*, i32 (%struct.device*)*, i32 (%struct.device*)*, i32 (%struct.device*)*, i32 (%struct.device*)*, i32 (%struct.device*)*, i32 (%struct.device*)*, i32 (%struct.device*)*, i32 (%struct.device*)*, i32 (%struct.device*)*, i32 (%struct.device*)*, i32 (%struct.device*)*, i32 (%struct.device*)*, i32 (%struct.device*)*, i32 (%struct.device*)*, i32 (%struct.device*)*, i32 (%struct.device*)*, i32 (%struct.device*)*, i32 (%struct.device*)*, i32 (%struct.device*)*, i32 (%struct.device*)* }
%struct.bus_type = type { i8*, i8*, %struct.device*, %struct.bus_attribute*, %struct.device_attribute*, %struct.driver_attribute*, i32 (%struct.device*, %struct.device_driver*)*, i32 (%struct.device*, %struct.kobj_uevent_env*)*, i32 (%struct.device*)*, i32 (%struct.device*)*, void (%struct.device*)*, i32 (%struct.device*, i32)*, i32 (%struct.device*)*, %struct.dev_pm_ops*, %struct.iommu_ops*, %struct.subsys_private*, %struct.lock_class_key }
%struct.bus_attribute = type { %struct.attribute, i64 (%struct.bus_type*, i8*)*, i64 (%struct.bus_type*, i8*, i64)* }
%struct.device_attribute = type { %struct.attribute, i64 (%struct.device*, %struct.device_attribute*, i8*)*, i64 (%struct.device*, %struct.device_attribute*, i8*, i64)* }
%struct.driver_attribute = type { %struct.attribute, i64 (%struct.device_driver*, i8*)*, i64 (%struct.device_driver*, i8*, i64)* }
%struct.iommu_ops = type opaque
%struct.subsys_private = type opaque
%struct.device_driver = type { i8*, %struct.bus_type*, %struct.module*, i8*, i8, %struct.of_device_id*, %struct.acpi_device_id*, i32 (%struct.device*)*, i32 (%struct.device*)*, void (%struct.device*)*, i32 (%struct.device*, i32)*, i32 (%struct.device*)*, %struct.attribute_group**, %struct.dev_pm_ops*, %struct.driver_private* }
%struct.of_device_id = type opaque
%struct.acpi_device_id = type opaque
%struct.driver_private = type opaque
%struct.dev_pm_info = type { %struct.pm_message, i8, %struct.spinlock, %struct.list_head, %struct.completion, %struct.wakeup_source*, i8, %struct.pm_subsys_data*, %struct.dev_pm_qos* }
%struct.pm_message = type { i32 }
%struct.wakeup_source = type { i8*, %struct.list_head, %struct.spinlock, %struct.timer_list, i64, %union.ktime, %union.ktime, %union.ktime, %union.ktime, %union.ktime, i64, i64, i64, i64, i64, i8 }
%struct.pm_subsys_data = type { %struct.spinlock, i32 }
%struct.dev_pm_qos = type { %struct.pm_qos_constraints, %struct.pm_qos_flags, %struct.dev_pm_qos_request*, %struct.dev_pm_qos_request* }
%struct.pm_qos_constraints = type { %struct.plist_head, i32, i32, i32, %struct.blocking_notifier_head* }
%struct.blocking_notifier_head = type { %struct.rw_semaphore, %struct.notifier_block* }
%struct.notifier_block = type { i32 (%struct.notifier_block*, i64, i8*)*, %struct.notifier_block*, i32 }
%struct.pm_qos_flags = type { %struct.list_head, i32 }
%struct.dev_pm_qos_request = type { i32, %union.anon.52, %struct.device* }
%union.anon.52 = type { %struct.plist_node }
%struct.dev_pm_domain = type { %struct.dev_pm_ops }
%struct.device_dma_parameters = type { i32, i64 }
%struct.dma_coherent_mem = type opaque
%struct.dev_archdata = type { %struct.dma_map_ops*, i8* }
%struct.dma_map_ops = type { i8* (%struct.device*, i64, i64*, i32, %struct.dma_attrs*)*, void (%struct.device*, i64, i8*, i64, %struct.dma_attrs*)*, i32 (%struct.device*, %struct.vm_area_struct*, i8*, i64, i64, %struct.dma_attrs*)*, i32 (%struct.device*, %struct.sg_table*, i8*, i64, i64, %struct.dma_attrs*)*, i64 (%struct.device*, %struct.page*, i64, i64, i32, %struct.dma_attrs*)*, void (%struct.device*, i64, i64, i32, %struct.dma_attrs*)*, i32 (%struct.device*, %struct.scatterlist*, i32, i32, %struct.dma_attrs*)*, void (%struct.device*, %struct.scatterlist*, i32, i32, %struct.dma_attrs*)*, void (%struct.device*, i64, i64, i32)*, void (%struct.device*, i64, i64, i32)*, void (%struct.device*, %struct.scatterlist*, i32, i32)*, void (%struct.device*, %struct.scatterlist*, i32, i32)*, i32 (%struct.device*, i64)*, i32 (%struct.device*, i64)*, i32 (%struct.device*, i64)*, i32 }
%struct.dma_attrs = type { [1 x i64] }
%struct.sg_table = type { %struct.scatterlist*, i32, i32 }
%struct.scatterlist = type { i64, i32, i32, i64, i32 }
%struct.device_node = type opaque
%struct.acpi_dev_node = type { i8* }
%struct.klist_node = type { i8*, %struct.list_head, %struct.kref }
%struct.class = type { i8*, %struct.module*, %struct.class_attribute*, %struct.device_attribute*, %struct.bin_attribute*, %struct.kobject*, i32 (%struct.device*, %struct.kobj_uevent_env*)*, i8* (%struct.device*, i16*)*, void (%struct.class*)*, void (%struct.device*)*, i32 (%struct.device*, i32)*, i32 (%struct.device*)*, %struct.kobj_ns_type_operations*, i8* (%struct.device*)*, %struct.dev_pm_ops*, %struct.subsys_private* }
%struct.class_attribute = type { %struct.attribute, i64 (%struct.class*, %struct.class_attribute*, i8*)*, i64 (%struct.class*, %struct.class_attribute*, i8*, i64)*, i8* (%struct.class*, %struct.class_attribute*)* }
%struct.bin_attribute = type { %struct.attribute, i64, i8*, i64 (%struct.file*, %struct.kobject*, %struct.bin_attribute*, i8*, i64, i64)*, i64 (%struct.file*, %struct.kobject*, %struct.bin_attribute*, i8*, i64, i64)*, i32 (%struct.file*, %struct.kobject*, %struct.bin_attribute*, %struct.vm_area_struct*)* }
%struct.attribute_group = type { i8*, i16 (%struct.kobject*, %struct.attribute*, i32)*, %struct.attribute** }
%struct.iommu_group = type opaque
%struct.rtnl_link_ops = type opaque
%struct.netdev_tc_txq = type { i16, i16 }
%struct.phy_device = type opaque
%struct.pm_qos_request = type { %struct.plist_node, i32, %struct.delayed_work }
%struct.delayed_work = type { %struct.work_struct, %struct.timer_list, %struct.workqueue_struct*, i32 }
%struct.workqueue_struct = type opaque
%struct.netns_core = type { %struct.ctl_table_header*, i32, %struct.prot_inuse* }
%struct.prot_inuse = type opaque
%struct.netns_mib = type { [1 x %struct.tcp_mib*], [1 x %struct.ipstats_mib*], [1 x %struct.linux_mib*], [1 x %struct.udp_mib*], [1 x %struct.udp_mib*], [1 x %struct.icmp_mib*], %struct.icmpmsg_mib*, %struct.proc_dir_entry*, [1 x %struct.udp_mib*], [1 x %struct.udp_mib*], [1 x %struct.ipstats_mib*], [1 x %struct.icmpv6_mib*], %struct.icmpv6msg_mib* }
%struct.tcp_mib = type { [16 x i64] }
%struct.linux_mib = type { [95 x i64] }
%struct.icmp_mib = type { [28 x i64] }
%struct.icmpmsg_mib = type { [512 x %struct.atomic64_t] }
%struct.udp_mib = type { [8 x i64] }
%struct.ipstats_mib = type { [32 x i64], %struct.u64_stats_sync }
%struct.u64_stats_sync = type {}
%struct.icmpv6_mib = type { [6 x i64] }
%struct.icmpv6msg_mib = type { [512 x %struct.atomic64_t] }
%struct.netns_packet = type { %struct.mutex, %struct.hlist_head }
%struct.netns_unix = type { i32, %struct.ctl_table_header* }
%struct.netns_ipv4 = type { %struct.ctl_table_header*, %struct.ctl_table_header*, %struct.ctl_table_header*, %struct.ctl_table_header*, %struct.ctl_table_header*, %struct.ipv4_devconf*, %struct.ipv4_devconf*, %struct.fib_rules_ops*, i8, %struct.fib_table*, %struct.fib_table*, %struct.fib_table*, %struct.hlist_head*, %struct.sock*, %struct.sock**, %struct.inet_peer_base*, %struct.tcpm_hash_bucket*, i32, [52 x i8], %struct.netns_frags, %struct.xt_table*, %struct.xt_table*, %struct.xt_table*, %struct.xt_table*, %struct.xt_table*, %struct.xt_table*, i32, i32, i32, i32, i32, i32, i32, [2 x i32], [3 x i64], %struct.atomic_t, %struct.mr_table* }
%struct.ipv4_devconf = type opaque
%struct.fib_rules_ops = type opaque
%struct.fib_table = type opaque
%struct.inet_peer_base = type opaque
%struct.tcpm_hash_bucket = type opaque
%struct.netns_frags = type { i32, %struct.list_head, %struct.spinlock, [38 x i8], %struct.percpu_counter, i32, i32, i32, [12 x i8] }
%struct.xt_table = type opaque
%struct.mr_table = type opaque
%struct.netns_ipv6 = type { %struct.netns_sysctl_ipv6, %struct.ipv6_devconf*, %struct.ipv6_devconf*, %struct.inet_peer_base*, [24 x i8], %struct.netns_frags, %struct.xt_table*, %struct.xt_table*, %struct.xt_table*, %struct.xt_table*, %struct.xt_table*, %struct.rt6_info*, %struct.rt6_statistics*, %struct.timer_list, %struct.hlist_head*, %struct.fib6_table*, [40 x i8], %struct.dst_ops, i32, i64, %struct.sock**, %struct.sock*, %struct.sock*, %struct.sock*, %struct.atomic_t, [12 x i8] }
%struct.netns_sysctl_ipv6 = type { %struct.ctl_table_header*, %struct.ctl_table_header*, %struct.ctl_table_header*, %struct.ctl_table_header*, %struct.ctl_table_header*, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32 }
%struct.ipv6_devconf = type opaque
%struct.rt6_info = type opaque
%struct.rt6_statistics = type opaque
%struct.fib6_table = type opaque
%struct.dst_ops = type { i16, i16, i32, i32 (%struct.dst_ops*)*, %struct.dst_entry* (%struct.dst_entry*, i32)*, i32 (%struct.dst_entry*)*, i32 (%struct.dst_entry*)*, i32* (%struct.dst_entry*, i64)*, void (%struct.dst_entry*)*, void (%struct.dst_entry*, %struct.net_device*, i32)*, %struct.dst_entry* (%struct.dst_entry*)*, void (%struct.sk_buff*)*, void (%struct.dst_entry*, %struct.sock*, %struct.sk_buff*, i32)*, void (%struct.dst_entry*, %struct.sock*, %struct.sk_buff*)*, i32 (%struct.sk_buff*)*, %struct.neighbour* (%struct.dst_entry*, %struct.sk_buff*, i8*)*, %struct.kmem_cache*, [8 x i8], %struct.percpu_counter, [24 x i8] }
%struct.dst_entry = type opaque
%struct.kmem_cache = type { %struct.kmem_cache_cpu*, i64, i64, i32, i32, i32, i32, %struct.kmem_cache_order_objects, %struct.kmem_cache_order_objects, %struct.kmem_cache_order_objects, i32, i32, void (i8*)*, i32, i32, i32, i8*, %struct.list_head, %struct.kobject, i32, [64 x %struct.kmem_cache_node*] }
%struct.kmem_cache_cpu = type { i8**, i64, %struct.page*, %struct.page* }
%struct.kmem_cache_order_objects = type { i64 }
%struct.kmem_cache_node = type opaque
%struct.netns_nf = type { %struct.proc_dir_entry*, [13 x %struct.nf_logger*], %struct.ctl_table_header* }
%struct.nf_logger = type opaque
%struct.netns_xt = type { [13 x %struct.list_head], i8 }
%struct.netns_ct = type { %struct.atomic_t, i32, i32, %struct.kmem_cache*, %struct.hlist_nulls_head*, %struct.hlist_head*, %struct.hlist_nulls_head, %struct.hlist_nulls_head, %struct.hlist_nulls_head, %struct.ip_conntrack_stat*, %struct.nf_ct_event_notifier*, %struct.nf_exp_event_notifier*, i32, i32, i32, i32, i32, i32, i32, i8, %struct.nf_ip_net, %struct.hlist_head*, i32, %struct.ctl_table_header*, %struct.ctl_table_header*, %struct.ctl_table_header*, %struct.ctl_table_header*, %struct.ctl_table_header*, i8* }
%struct.hlist_nulls_head = type { %struct.hlist_nulls_node* }
%struct.hlist_nulls_node = type { %struct.hlist_nulls_node*, %struct.hlist_nulls_node** }
%struct.ip_conntrack_stat = type opaque
%struct.nf_ct_event_notifier = type opaque
%struct.nf_exp_event_notifier = type opaque
%struct.nf_ip_net = type { %struct.nf_generic_net, %struct.nf_tcp_net, %struct.nf_udp_net, %struct.nf_icmp_net, %struct.nf_icmp_net, %struct.ctl_table_header*, %struct.ctl_table* }
%struct.nf_generic_net = type { %struct.nf_proto_net, i32 }
%struct.nf_proto_net = type { %struct.ctl_table_header*, %struct.ctl_table*, %struct.ctl_table_header*, %struct.ctl_table*, i32 }
%struct.nf_tcp_net = type { %struct.nf_proto_net, [14 x i32], i32, i32, i32 }
%struct.nf_udp_net = type { %struct.nf_proto_net, [2 x i32] }
%struct.nf_icmp_net = type { %struct.nf_proto_net, i32 }
%struct.netns_nf_frag = type { %struct.netns_sysctl_ipv6, [48 x i8], %struct.netns_frags }
%struct.net_generic = type opaque
%struct.netns_xfrm = type { %struct.list_head, %struct.hlist_head*, %struct.hlist_head*, %struct.hlist_head*, i32, i32, %struct.work_struct, %struct.hlist_head, %struct.work_struct, %struct.__wait_queue_head, %struct.list_head, %struct.hlist_head*, i32, [6 x %struct.hlist_head], [6 x %struct.xfrm_policy_hash], [6 x i32], %struct.work_struct, %struct.sock*, %struct.sock*, i32, i32, i32, i32, %struct.ctl_table_header*, [32 x i8], %struct.dst_ops, %struct.dst_ops }
%struct.xfrm_policy_hash = type { %struct.hlist_head*, i32 }
%struct.netns_ipvs = type opaque
%struct.signal_struct = type { %struct.atomic_t, %struct.atomic_t, i32, %struct.__wait_queue_head, %struct.task_struct*, %struct.sigpending, i32, i32, %struct.task_struct*, i32, i32, i8, i32, %struct.list_head, %struct.hrtimer, %struct.pid*, %union.ktime, [2 x %struct.cpu_itimer], %struct.thread_group_cputimer, %struct.task_cputime, [3 x %struct.list_head], %struct.pid*, i32, %struct.tty_struct*, i64, i64, i64, i64, i64, i64, %struct.cputime, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, %struct.task_io_accounting, i64, [16 x %struct.rlimit], %struct.pacct_struct, %struct.taskstats*, i32, i32, %struct.tty_audit_buf*, %struct.rw_semaphore, i32, i16, i16, %struct.mutex }
%struct.hrtimer = type { %struct.timerqueue_node, %union.ktime, i32 (%struct.hrtimer*)*, %struct.hrtimer_clock_base*, i64, i32, i8*, [16 x i8] }
%struct.timerqueue_node = type { %struct.rb_node, %union.ktime }
%struct.hrtimer_clock_base = type { %struct.hrtimer_cpu_base*, i32, i32, %struct.timerqueue_head, %union.ktime, i64 ()*, %union.ktime, %union.ktime }
%struct.hrtimer_cpu_base = type { %struct.raw_spinlock, i32, i32, %union.ktime, i32, i32, i64, i64, i64, %union.ktime, [4 x %struct.hrtimer_clock_base] }
%struct.timerqueue_head = type { %struct.rb_root, %struct.timerqueue_node* }
%struct.cpu_itimer = type { i64, i64, i32, i32 }
%struct.thread_group_cputimer = type { %struct.task_cputime, i32, %struct.raw_spinlock }
%struct.tty_struct = type opaque
%struct.rlimit = type { i64, i64 }
%struct.pacct_struct = type { i32, i64, i64, i64, i64, i64, i64 }
%struct.taskstats = type { i16, i32, i8, i8, i64, i64, i64, i64, i64, i64, i64, i64, [32 x i8], i8, [3 x i8], [4 x i8], i32, i32, i32, i32, i32, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64 }
%struct.tty_audit_buf = type opaque
%struct.sighand_struct = type { %struct.atomic_t, [64 x %struct.k_sigaction], %struct.spinlock, %struct.__wait_queue_head }
%struct.k_sigaction = type { %struct.sigaction }
%struct.sigaction = type { void (i32)*, i64, void ()*, %struct.sigset_t }
%struct.sigset_t = type { [1 x i64] }
%struct.sigpending = type { %struct.list_head, %struct.sigset_t }
%struct.audit_context = type opaque
%struct.seccomp = type { i32, %struct.seccomp_filter* }
%struct.seccomp_filter = type opaque
%struct.plist_head = type { %struct.list_head }
%struct.rt_mutex_waiter = type opaque
%struct.bio_list = type opaque
%struct.blk_plug = type opaque
%struct.reclaim_state = type opaque
%struct.backing_dev_info = type opaque
%struct.io_context = type opaque
%struct.siginfo = type { i32, i32, i32, %union.anon.32 }
%union.anon.32 = type { %struct.anon.36, [80 x i8] }
%struct.anon.36 = type { i32, i32, i32, i64, i64 }
%struct.task_io_accounting = type { i64, i64, i64, i64, i64, i64, i64 }
%struct.nodemask_t = type { [1 x i64] }
%struct.seqcount = type { i32 }
%struct.css_set = type { %struct.atomic_t, %struct.hlist_node, %struct.list_head, %struct.list_head, [4 x %struct.cgroup_subsys_state*], %struct.callback_head }
%struct.cgroup_subsys_state = type { %struct.cgroup*, %struct.atomic_t, i64, %struct.css_id*, %struct.work_struct }
%struct.cgroup = type { i64, %struct.atomic_t, i32, %struct.list_head, %struct.list_head, %struct.list_head, %struct.cgroup*, %struct.dentry*, %struct.cgroup_name*, [4 x %struct.cgroup_subsys_state*], %struct.cgroupfs_root*, %struct.list_head, %struct.list_head, %struct.list_head, %struct.list_head, %struct.list_head, %struct.mutex, %struct.callback_head, %struct.work_struct, %struct.list_head, %struct.spinlock, %struct.simple_xattrs }
%struct.cgroup_name = type { %struct.callback_head, [0 x i8] }
%struct.cgroupfs_root = type { %struct.super_block*, i64, i32, i64, %struct.list_head, %struct.cgroup, i32, %struct.list_head, %struct.list_head, i64, %struct.ida, [4096 x i8], [64 x i8] }
%struct.ida = type { %struct.idr, %struct.ida_bitmap* }
%struct.idr = type { %struct.idr_layer*, %struct.idr_layer*, %struct.idr_layer*, i32, i32, i32, %struct.spinlock }
%struct.idr_layer = type { i32, [4 x i64], [256 x %struct.idr_layer*], i32, i32, %struct.callback_head }
%struct.ida_bitmap = type { i64, [15 x i64] }
%struct.simple_xattrs = type { %struct.list_head, %struct.spinlock }
%struct.css_id = type opaque
%struct.robust_list_head = type opaque
%struct.compat_robust_list_head = type { %struct.compat_robust_list, i32, i32 }
%struct.compat_robust_list = type { i32 }
%struct.futex_pi_state = type opaque
%struct.perf_event_context = type opaque
%struct.mempolicy = type opaque
%struct.callback_head = type { %struct.callback_head*, void (%struct.callback_head*)* }
%struct.pipe_inode_info = type opaque
%struct.page_frag = type { %struct.page*, i32, i32 }
%struct.task_delay_info = type { %struct.spinlock, i32, %struct.timespec, %struct.timespec, i64, i64, i32, i32, %struct.timespec, %struct.timespec, i64, i32 }
%struct.pernet_operations = type { %struct.list_head, i32 (%struct.net*)*, void (%struct.net*)*, void (%struct.list_head*)*, i32*, i64 }
%struct.smp_ops = type { void ()*, void (i32)*, void (i32)*, void (i32)*, void (i32)*, i32 (i32, %struct.task_struct*)*, i32 ()*, void (i32)*, void ()*, void (%struct.cpumask*)*, void (i32)* }
%struct.cfg80211_registered_device = type { %struct.cfg80211_ops*, %struct.list_head, %struct.mutex, %struct.rfkill_ops, %struct.rfkill*, %struct.work_struct, [2 x i8], i32, i32, %struct.mutex, %struct.list_head, i32, i32, i32, %struct.__wait_queue_head, %struct.list_head, %struct.spinlock, i32, i32, %struct.spinlock, %struct.list_head, %struct.rb_root, i32, %struct.cfg80211_scan_request*, %struct.cfg80211_sched_scan_request*, i64, %struct.work_struct, %struct.work_struct, %struct.mutex, %struct.work_struct, %struct.work_struct, %struct.cfg80211_wowlan*, %struct.delayed_work, i32, %struct.wiphy }
%struct.cfg80211_ops = type { i32 (%struct.wiphy*, %struct.cfg80211_wowlan*)*, i32 (%struct.wiphy*)*, void (%struct.wiphy*, i1)*, %struct.wireless_dev* (%struct.wiphy*, i8*, i32, i32*, %struct.vif_params*)*, i32 (%struct.wiphy*, %struct.wireless_dev*)*, i32 (%struct.wiphy*, %struct.net_device*, i32, i32*, %struct.vif_params*)*, i32 (%struct.wiphy*, %struct.net_device*, i8, i1, i8*, %struct.key_params*)*, i32 (%struct.wiphy*, %struct.net_device*, i8, i1, i8*, i8*, void (i8*, %struct.key_params*)*)*, i32 (%struct.wiphy*, %struct.net_device*, i8, i1, i8*)*, i32 (%struct.wiphy*, %struct.net_device*, i8, i1, i1)*, i32 (%struct.wiphy*, %struct.net_device*, i8)*, i32 (%struct.wiphy*, %struct.net_device*, %struct.cfg80211_ap_settings*)*, i32 (%struct.wiphy*, %struct.net_device*, %struct.cfg80211_beacon_data*)*, i32 (%struct.wiphy*, %struct.net_device*)*, i32 (%struct.wiphy*, %struct.net_device*, i8*, %struct.station_parameters*)*, i32 (%struct.wiphy*, %struct.net_device*, i8*)*, i32 (%struct.wiphy*, %struct.net_device*, i8*, %struct.station_parameters*)*, i32 (%struct.wiphy*, %struct.net_device*, i8*, %struct.station_info*)*, i32 (%struct.wiphy*, %struct.net_device*, i32, i8*, %struct.station_info*)*, i32 (%struct.wiphy*, %struct.net_device*, i8*, i8*)*, i32 (%struct.wiphy*, %struct.net_device*, i8*)*, i32 (%struct.wiphy*, %struct.net_device*, i8*, i8*)*, i32 (%struct.wiphy*, %struct.net_device*, i8*, i8*, %struct.mpath_info*)*, i32 (%struct.wiphy*, %struct.net_device*, i32, i8*, i8*, %struct.mpath_info*)*, i32 (%struct.wiphy*, %struct.net_device*, %struct.mesh_config*)*, i32 (%struct.wiphy*, %struct.net_device*, i32, %struct.mesh_config*)*, i32 (%struct.wiphy*, %struct.net_device*, %struct.mesh_config*, %struct.mesh_setup*)*, i32 (%struct.wiphy*, %struct.net_device*)*, i32 (%struct.wiphy*, %struct.net_device*, %struct.bss_parameters*)*, i32 (%struct.wiphy*, %struct.net_device*, %struct.ieee80211_txq_params*)*, i32 (%struct.wiphy*, %struct.net_device*, %struct.ieee80211_channel*)*, i32 (%struct.wiphy*, %struct.cfg80211_chan_def*)*, i32 (%struct.wiphy*, %struct.cfg80211_scan_request*)*, i32 (%struct.wiphy*, %struct.net_device*, %struct.cfg80211_auth_request*)*, i32 (%struct.wiphy*, %struct.net_device*, %struct.cfg80211_assoc_request*)*, i32 (%struct.wiphy*, %struct.net_device*, %struct.cfg80211_deauth_request*)*, i32 (%struct.wiphy*, %struct.net_device*, %struct.cfg80211_disassoc_request*)*, i32 (%struct.wiphy*, %struct.net_device*, %struct.cfg80211_connect_params*)*, i32 (%struct.wiphy*, %struct.net_device*, i16)*, i32 (%struct.wiphy*, %struct.net_device*, %struct.cfg80211_ibss_params*)*, i32 (%struct.wiphy*, %struct.net_device*)*, i32 (%struct.wiphy*, %struct.net_device*, i32*)*, i32 (%struct.wiphy*, i32)*, i32 (%struct.wiphy*, %struct.wireless_dev*, i32, i32)*, i32 (%struct.wiphy*, %struct.wireless_dev*, i32*)*, i32 (%struct.wiphy*, %struct.net_device*, i8*)*, void (%struct.wiphy*)*, i32 (%struct.wiphy*, %struct.net_device*, i8*, %struct.cfg80211_bitrate_mask*)*, i32 (%struct.wiphy*, %struct.net_device*, i32, %struct.survey_info*)*, i32 (%struct.wiphy*, %struct.net_device*, %struct.cfg80211_pmksa*)*, i32 (%struct.wiphy*, %struct.net_device*, %struct.cfg80211_pmksa*)*, i32 (%struct.wiphy*, %struct.net_device*)*, i32 (%struct.wiphy*, %struct.wireless_dev*, %struct.ieee80211_channel*, i32, i64*)*, i32 (%struct.wiphy*, %struct.wireless_dev*, i64)*, i32 (%struct.wiphy*, %struct.wireless_dev*, %struct.ieee80211_channel*, i1, i32, i8*, i64, i1, i1, i64*)*, i32 (%struct.wiphy*, %struct.wireless_dev*, i64)*, i32 (%struct.wiphy*, %struct.net_device*, i1, i32)*, i32 (%struct.wiphy*, %struct.net_device*, i32, i32)*, i32 (%struct.wiphy*, %struct.net_device*, i32, i32, i32)*, void (%struct.wiphy*, %struct.wireless_dev*, i16, i1)*, i32 (%struct.wiphy*, i32, i32)*, i32 (%struct.wiphy*, i32*, i32*)*, i32 (%struct.wiphy*, i32, i32)*, void (%struct.wiphy*, i32*, i32*, i32*, i32*)*, i32 (%struct.wiphy*, %struct.net_device*, %struct.cfg80211_sched_scan_request*)*, i32 (%struct.wiphy*, %struct.net_device*)*, i32 (%struct.wiphy*, %struct.net_device*, %struct.cfg80211_gtk_rekey_data*)*, i32 (%struct.wiphy*, %struct.net_device*, i8*, i8, i8, i16, i8*, i64)*, i32 (%struct.wiphy*, %struct.net_device*, i8*, i32)*, i32 (%struct.wiphy*, %struct.net_device*, i8*, i64*)*, i32 (%struct.wiphy*, %struct.net_device*, i16)*, i32 (%struct.wiphy*, %struct.net_device*, i32)*, void (%struct.wiphy*, %struct.net_device*, %struct.ethtool_stats*, i64*)*, void (%struct.wiphy*, %struct.net_device*, i32, i8*)*, i32 (%struct.wiphy*, %struct.wireless_dev*, %struct.cfg80211_chan_def*)*, i32 (%struct.wiphy*, %struct.wireless_dev*)*, void (%struct.wiphy*, %struct.wireless_dev*)*, i32 (%struct.wiphy*, %struct.net_device*, %struct.cfg80211_acl_data*)*, i32 (%struct.wiphy*, %struct.net_device*, %struct.cfg80211_chan_def*)*, i32 (%struct.wiphy*, %struct.net_device*, %struct.cfg80211_update_ft_ies_params*)*, i32 (%struct.wiphy*, %struct.wireless_dev*, i32, i16)*, void (%struct.wiphy*, %struct.wireless_dev*)* }
%struct.vif_params = type { i32, [6 x i8] }
%struct.cfg80211_ap_settings = type { %struct.cfg80211_chan_def, %struct.cfg80211_beacon_data, i32, i32, i8*, i64, i32, %struct.cfg80211_crypto_settings, i8, i32, i32, i8, i8, %struct.cfg80211_acl_data*, i8 }
%struct.cfg80211_beacon_data = type { i8*, i8*, i8*, i8*, i8*, i8*, i64, i64, i64, i64, i64, i64 }
%struct.cfg80211_crypto_settings = type { i32, i32, i32, [5 x i32], i32, [2 x i32], i8, i16, i8 }
%struct.cfg80211_acl_data = type { i32, i32, [0 x %struct.mac_address] }
%struct.station_parameters = type { i8*, %struct.net_device*, i32, i32, i32, i32, i16, i8, i8, i8, %struct.ieee80211_ht_cap*, %struct.ieee80211_vht_cap*, i8, i8, i32, i16, i8*, i8 }
%struct.station_info = type { i32, i32, i32, i64, i64, i16, i16, i8, i8, i8, %struct.rate_info, %struct.rate_info, i32, i32, i32, i32, i32, %struct.sta_bss_parameters, %struct.nl80211_sta_flag_update, i32, i8*, i64, i32, i64, i32, i32, i32 }
%struct.rate_info = type { i8, i8, i16, i8 }
%struct.sta_bss_parameters = type { i8, i8, i16 }
%struct.nl80211_sta_flag_update = type { i32, i32 }
%struct.mpath_info = type { i32, i32, i32, i32, i32, i32, i8, i8, i32 }
%struct.mesh_config = type { i16, i16, i16, i16, i8, i8, i8, i8, i32, i8, i32, i16, i32, i16, i16, i16, i8, i16, i8, i8, i32, i16, i32, i16, i16, i32, i16 }
%struct.mesh_setup = type { %struct.cfg80211_chan_def, i8*, i8, i8, i8, i8, i8*, i8, i8, i8, i8, i8, i16, [3 x i32] }
%struct.bss_parameters = type { i32, i32, i32, i8*, i8, i32, i32, i8, i8 }
%struct.ieee80211_txq_params = type { i32, i16, i16, i16, i8 }
%struct.cfg80211_auth_request = type { %struct.cfg80211_bss*, i8*, i64, i32, i8*, i8, i8, i8*, i64 }
%struct.cfg80211_assoc_request = type { %struct.cfg80211_bss*, i8*, i8*, i64, %struct.cfg80211_crypto_settings, i8, i32, %struct.ieee80211_ht_cap, %struct.ieee80211_ht_cap, %struct.ieee80211_vht_cap, %struct.ieee80211_vht_cap }
%struct.cfg80211_deauth_request = type { i8*, i8*, i64, i16, i8 }
%struct.cfg80211_disassoc_request = type { %struct.cfg80211_bss*, i8*, i64, i16, i8 }
%struct.cfg80211_connect_params = type { %struct.ieee80211_channel*, i8*, i8*, i64, i32, i8*, i64, i8, i32, %struct.cfg80211_crypto_settings, i8*, i8, i8, i32, i32, %struct.ieee80211_ht_cap, %struct.ieee80211_ht_cap, %struct.ieee80211_vht_cap, %struct.ieee80211_vht_cap }
%struct.cfg80211_ibss_params = type { i8*, i8*, %struct.cfg80211_chan_def, i8*, i8, i8, i16, i32, i8, i8, i8, [3 x i32] }
%struct.cfg80211_bitrate_mask = type { [3 x %struct.anon.53] }
%struct.anon.53 = type { i32, [10 x i8] }
%struct.survey_info = type { %struct.ieee80211_channel*, i64, i64, i64, i64, i64, i32, i8 }
%struct.cfg80211_pmksa = type { i8*, i8* }
%struct.cfg80211_gtk_rekey_data = type { [16 x i8], [16 x i8], [8 x i8] }
%struct.cfg80211_update_ft_ies_params = type { i16, i8*, i64 }
%struct.rfkill_ops = type { void (%struct.rfkill*, i8*)*, void (%struct.rfkill*, i8*)*, i32 (i8*, i1)* }
%struct.rfkill = type opaque
%struct.cfg80211_scan_request = type { %struct.cfg80211_ssid*, i32, i32, i8*, i64, i32, [3 x i32], %struct.wireless_dev*, %struct.wiphy*, i64, i8, i8, [0 x %struct.ieee80211_channel*] }
%struct.cfg80211_ssid = type { [32 x i8], i8 }
%struct.cfg80211_sched_scan_request = type { %struct.cfg80211_ssid*, i32, i32, i32, i8*, i64, i32, %struct.cfg80211_match_set*, i32, i32, %struct.wiphy*, %struct.net_device*, i64, [0 x %struct.ieee80211_channel*] }
%struct.cfg80211_match_set = type { %struct.cfg80211_ssid }
%struct.cfg80211_wowlan = type { i8, i8, i8, i8, i8, i8, i8, %struct.cfg80211_wowlan_trig_pkt_pattern*, %struct.cfg80211_wowlan_tcp*, i32 }
%struct.cfg80211_wowlan_trig_pkt_pattern = type { i8*, i8*, i32, i32 }
%struct.cfg80211_wowlan_tcp = type { %struct.socket*, i32, i32, i16, i16, [6 x i8], i32, i8*, %struct.nl80211_wowlan_tcp_data_seq, i32, i32, i8*, i8*, i32, %struct.nl80211_wowlan_tcp_data_token }
%struct.socket = type { i32, i16, i64, %struct.socket_wq*, %struct.file*, %struct.sock*, %struct.proto_ops* }
%struct.socket_wq = type { %struct.__wait_queue_head, %struct.fasync_struct*, %struct.callback_head, [16 x i8] }
%struct.proto_ops = type { i32, %struct.module*, i32 (%struct.socket*)*, i32 (%struct.socket*, %struct.sockaddr*, i32)*, i32 (%struct.socket*, %struct.sockaddr*, i32, i32)*, i32 (%struct.socket*, %struct.socket*)*, i32 (%struct.socket*, %struct.socket*, i32)*, i32 (%struct.socket*, %struct.sockaddr*, i32*, i32)*, i32 (%struct.file*, %struct.socket*, %struct.poll_table_struct*)*, i32 (%struct.socket*, i32, i64)*, i32 (%struct.socket*, i32, i64)*, i32 (%struct.socket*, i32)*, i32 (%struct.socket*, i32)*, i32 (%struct.socket*, i32, i32, i8*, i32)*, i32 (%struct.socket*, i32, i32, i8*, i32*)*, i32 (%struct.socket*, i32, i32, i8*, i32)*, i32 (%struct.socket*, i32, i32, i8*, i32*)*, i32 (%struct.kiocb*, %struct.socket*, %struct.msghdr*, i64)*, i32 (%struct.kiocb*, %struct.socket*, %struct.msghdr*, i64, i32)*, i32 (%struct.file*, %struct.socket*, %struct.vm_area_struct*)*, i64 (%struct.socket*, %struct.page*, i32, i64, i32)*, i64 (%struct.socket*, i64*, %struct.pipe_inode_info*, i64, i32)*, void (%struct.sock*, i32)* }
%struct.sockaddr = type { i16, [14 x i8] }
%struct.msghdr = type { i8*, i32, %struct.iovec*, i64, i8*, i64, i32 }
%struct.nl80211_wowlan_tcp_data_seq = type { i32, i32, i32 }
%struct.nl80211_wowlan_tcp_data_token = type { i32, i32, [0 x i8] }
%struct.__wait_queue = type { i32, i8*, i32 (%struct.__wait_queue*, i32, i32, i8*)*, %struct.list_head }
%struct.cfg80211_beacon_registration = type { %struct.list_head, i32 }

@cfg80211_rdev_list = global %struct.list_head { %struct.list_head* @cfg80211_rdev_list, %struct.list_head* @cfg80211_rdev_list }, align 8
@cfg80211_mutex = global %struct.mutex { %struct.atomic_t { i32 1 }, %struct.spinlock zeroinitializer, %struct.list_head { %struct.list_head* bitcast (i8* getelementptr (i8, i8* bitcast (%struct.mutex* @cfg80211_mutex to i8*), i64 8) to %struct.list_head*), %struct.list_head* bitcast (i8* getelementptr (i8, i8* bitcast (%struct.mutex* @cfg80211_mutex to i8*), i64 8) to %struct.list_head*) }, %struct.task_struct* null, i8* null }, align 8
@__param_str_cfg80211_disable_40mhz_24ghz = internal constant [38 x i8] c"cfg80211.cfg80211_disable_40mhz_24ghz\00", align 16
@param_ops_bool = external global %struct.kernel_param_ops, align 8
@cfg80211_disable_40mhz_24ghz = internal global i8 0, align 1
@__param_cfg80211_disable_40mhz_24ghz = internal constant %struct.kernel_param { i8* getelementptr inbounds ([38 x i8], [38 x i8]* @__param_str_cfg80211_disable_40mhz_24ghz, i32 0, i32 0), %struct.kernel_param_ops* @param_ops_bool, i16 420, i16 -1, %union.anon.5 { i8* @cfg80211_disable_40mhz_24ghz } }, section "__param", align 8
@.str = private unnamed_addr constant [8 x i8] c"phy%d%n\00", align 1
@.str.1 = private unnamed_addr constant [49 x i8] c"\013cfg80211: failed to rename debugfs dir to %s!\0A\00", align 1
@.str.2 = private unnamed_addr constant [7 x i8] c"wlan%d\00", align 1
@.str.3 = private unnamed_addr constant [20 x i8] c"net/wireless/core.c\00", align 1
@wiphy_new.wiphy_counter = internal global i32 0, align 4
@.str.4 = private unnamed_addr constant [6 x i8] c"phy%d\00", align 1
@wiphy_new.__key = internal global %struct.lock_class_key zeroinitializer, align 1
@.str.5 = private unnamed_addr constant [11 x i8] c"&rdev->mtx\00", align 1
@wiphy_new.__key.6 = internal global %struct.lock_class_key zeroinitializer, align 1
@.str.7 = private unnamed_addr constant [19 x i8] c"&rdev->devlist_mtx\00", align 1
@wiphy_new.__key.8 = internal global %struct.lock_class_key zeroinitializer, align 1
@.str.9 = private unnamed_addr constant [22 x i8] c"&rdev->sched_scan_mtx\00", align 1
@ieee80211_class = external global %struct.class, align 8
@init_net = external global %struct.net, align 64
@wiphy_new.__key.10 = internal global %struct.lock_class_key zeroinitializer, align 1
@.str.11 = private unnamed_addr constant [16 x i8] c"&rdev->dev_wait\00", align 1
@__kstrtab_wiphy_new = internal constant [10 x i8] c"wiphy_new\00", section "__ksymtab_strings", align 1
@__ksymtab_wiphy_new = internal constant %struct.kernel_symbol { i64 ptrtoint (%struct.wiphy* (%struct.cfg80211_ops*, i32)* @wiphy_new to i64), i8* getelementptr inbounds ([10 x i8], [10 x i8]* @__kstrtab_wiphy_new, i32 0, i32 0) }, section "___ksymtab+wiphy_new", align 8
@cfg80211_rdev_list_generation = common global i32 0, align 4
@ieee80211_debugfs_dir = internal global %struct.dentry* null, align 8
@__kstrtab_wiphy_register = internal constant [15 x i8] c"wiphy_register\00", section "__ksymtab_strings", align 1
@__ksymtab_wiphy_register = internal constant %struct.kernel_symbol { i64 ptrtoint (i32 (%struct.wiphy*)* @wiphy_register to i64), i8* getelementptr inbounds ([15 x i8], [15 x i8]* @__kstrtab_wiphy_register, i32 0, i32 0) }, section "___ksymtab+wiphy_register", align 8
@__kstrtab_wiphy_rfkill_start_polling = internal constant [27 x i8] c"wiphy_rfkill_start_polling\00", section "__ksymtab_strings", align 1
@__ksymtab_wiphy_rfkill_start_polling = internal constant %struct.kernel_symbol { i64 ptrtoint (void (%struct.wiphy*)* @wiphy_rfkill_start_polling to i64), i8* getelementptr inbounds ([27 x i8], [27 x i8]* @__kstrtab_wiphy_rfkill_start_polling, i32 0, i32 0) }, section "___ksymtab+wiphy_rfkill_start_polling", align 8
@__kstrtab_wiphy_rfkill_stop_polling = internal constant [26 x i8] c"wiphy_rfkill_stop_polling\00", section "__ksymtab_strings", align 1
@__ksymtab_wiphy_rfkill_stop_polling = internal constant %struct.kernel_symbol { i64 ptrtoint (void (%struct.wiphy*)* @wiphy_rfkill_stop_polling to i64), i8* getelementptr inbounds ([26 x i8], [26 x i8]* @__kstrtab_wiphy_rfkill_stop_polling, i32 0, i32 0) }, section "___ksymtab+wiphy_rfkill_stop_polling", align 8
@__kstrtab_wiphy_unregister = internal constant [17 x i8] c"wiphy_unregister\00", section "__ksymtab_strings", align 1
@__ksymtab_wiphy_unregister = internal constant %struct.kernel_symbol { i64 ptrtoint (void (%struct.wiphy*)* @wiphy_unregister to i64), i8* getelementptr inbounds ([17 x i8], [17 x i8]* @__kstrtab_wiphy_unregister, i32 0, i32 0) }, section "___ksymtab+wiphy_unregister", align 8
@__kstrtab_wiphy_free = internal constant [11 x i8] c"wiphy_free\00", section "__ksymtab_strings", align 1
@__ksymtab_wiphy_free = internal constant %struct.kernel_symbol { i64 ptrtoint (void (%struct.wiphy*)* @wiphy_free to i64), i8* getelementptr inbounds ([11 x i8], [11 x i8]* @__kstrtab_wiphy_free, i32 0, i32 0) }, section "___ksymtab+wiphy_free", align 8
@__kstrtab_wiphy_rfkill_set_hw_state = internal constant [26 x i8] c"wiphy_rfkill_set_hw_state\00", section "__ksymtab_strings", align 1
@__ksymtab_wiphy_rfkill_set_hw_state = internal constant %struct.kernel_symbol { i64 ptrtoint (void (%struct.wiphy*, i1)* @wiphy_rfkill_set_hw_state to i64), i8* getelementptr inbounds ([26 x i8], [26 x i8]* @__kstrtab_wiphy_rfkill_set_hw_state, i32 0, i32 0) }, section "___ksymtab+wiphy_rfkill_set_hw_state", align 8
@.str.12 = private unnamed_addr constant [37 x i8] c"\013RTNL: assertion failed at %s (%d)\0A\00", align 1
@cfg80211_unregister_wdev.__warned = internal global i8 0, section ".data.unlikely", align 1
@__kstrtab_cfg80211_unregister_wdev = internal constant [25 x i8] c"cfg80211_unregister_wdev\00", section "__ksymtab_strings", align 1
@__ksymtab_cfg80211_unregister_wdev = internal constant %struct.kernel_symbol { i64 ptrtoint (void (%struct.wireless_dev*)* @cfg80211_unregister_wdev to i64), i8* getelementptr inbounds ([25 x i8], [25 x i8]* @__kstrtab_cfg80211_unregister_wdev, i32 0, i32 0) }, section "___ksymtab+cfg80211_unregister_wdev", align 8
@__initcall_cfg80211_init4 = internal global i32 ()* @cfg80211_init, section ".initcall4.init", align 8
@cfg80211_netdev_notifier = internal global %struct.notifier_block { i32 (%struct.notifier_block*, i64, i8*)* @cfg80211_netdev_notifier_call, %struct.notifier_block* null, i32 0 }, align 8
@cfg80211_pernet_ops = internal global %struct.pernet_operations { %struct.list_head zeroinitializer, i32 (%struct.net*)* null, void (%struct.net*)* @cfg80211_pernet_exit, void (%struct.list_head*)* null, i32* null, i64 0 }, align 8
@cfg80211_wq = common global %struct.workqueue_struct* null, align 8
@__exitcall_cfg80211_exit = internal global void ()* @cfg80211_exit, section ".exitcall.exit", align 8
@smp_ops = external global %struct.smp_ops, align 8
@.str.13 = private unnamed_addr constant [20 x i8] c"net/wireless/core.h\00", align 1
@__tracepoint_rdev_stop_p2p_device = external global %struct.tracepoint, align 8
@__tracepoint_rdev_return_void = external global %struct.tracepoint, align 8
@__tracepoint_rdev_rfkill_poll = external global %struct.tracepoint, align 8
@current_task = external global %struct.task_struct*, align 8
@__tracepoint_rdev_set_wakeup = external global %struct.tracepoint, align 8
@system_wq = external global %struct.workqueue_struct*, align 8
@.str.14 = private unnamed_addr constant [10 x i8] c"ieee80211\00", align 1
@.str.15 = private unnamed_addr constant [9 x i8] c"cfg80211\00", align 1
@wiphy_type = internal global %struct.device_type { i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.19, i32 0, i32 0), %struct.attribute_group** null, i32 (%struct.device*, %struct.kobj_uevent_env*)* null, i8* (%struct.device*, i16*, i32*, i32*)* null, void (%struct.device*)* null, %struct.dev_pm_ops* null }, align 8
@cfg80211_netdev_notifier_call.__key = internal global %struct.lock_class_key zeroinitializer, align 1
@.str.16 = private unnamed_addr constant [11 x i8] c"&wdev->mtx\00", align 1
@.str.17 = private unnamed_addr constant [9 x i8] c"phy80211\00", align 1
@.str.18 = private unnamed_addr constant [55 x i8] c"\013cfg80211: failed to add phy80211 symlink to netdev!\0A\00", align 1
@cfg80211_ethtool_ops = external constant %struct.ethtool_ops, align 8
@.str.19 = private unnamed_addr constant [5 x i8] c"wlan\00", align 1
@__tracepoint_rdev_set_power_mgmt = external global %struct.tracepoint, align 8
@__tracepoint_rdev_return_int = external global %struct.tracepoint, align 8
@llvm.used = appending global [12 x i8*] [i8* bitcast (%struct.kernel_param* @__param_cfg80211_disable_40mhz_24ghz to i8*), i8* bitcast (%struct.kernel_symbol* @__ksymtab_wiphy_new to i8*), i8* bitcast (%struct.kernel_symbol* @__ksymtab_wiphy_register to i8*), i8* bitcast (%struct.kernel_symbol* @__ksymtab_wiphy_rfkill_start_polling to i8*), i8* bitcast (%struct.kernel_symbol* @__ksymtab_wiphy_rfkill_stop_polling to i8*), i8* bitcast (%struct.kernel_symbol* @__ksymtab_wiphy_unregister to i8*), i8* bitcast (%struct.kernel_symbol* @__ksymtab_wiphy_free to i8*), i8* bitcast (%struct.kernel_symbol* @__ksymtab_wiphy_rfkill_set_hw_state to i8*), i8* bitcast (%struct.kernel_symbol* @__ksymtab_cfg80211_unregister_wdev to i8*), i8* bitcast (i32 ()** @__initcall_cfg80211_init4 to i8*), i8* bitcast (void ()* @cfg80211_exit to i8*), i8* bitcast (void ()** @__exitcall_cfg80211_exit to i8*)], section "llvm.metadata"

; Function Attrs: noinline nounwind uwtable
define internal void @smp_send_stop() #0 {
  %1 = load void (i32)*, void (i32)** getelementptr inbounds (%struct.smp_ops, %struct.smp_ops* @smp_ops, i32 0, i32 3), align 8
  call void %1(i32 0)
  ret void
}

; Function Attrs: noinline nounwind uwtable
define internal void @smp_send_reschedule(i32) #0 {
  %2 = load void (i32)*, void (i32)** getelementptr inbounds (%struct.smp_ops, %struct.smp_ops* @smp_ops, i32 0, i32 4), align 8
  call void %2(i32 %0)
  ret void
}

; Function Attrs: noinline nounwind uwtable
define internal void @smp_prepare_cpus(i32) #0 {
  %2 = load void (i32)*, void (i32)** getelementptr inbounds (%struct.smp_ops, %struct.smp_ops* @smp_ops, i32 0, i32 1), align 8
  call void %2(i32 %0)
  ret void
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @__cpu_up(i32, %struct.task_struct*) #0 {
  %3 = load i32 (i32, %struct.task_struct*)*, i32 (i32, %struct.task_struct*)** getelementptr inbounds (%struct.smp_ops, %struct.smp_ops* @smp_ops, i32 0, i32 5), align 8
  %4 = call i32 %3(i32 %0, %struct.task_struct* %1)
  ret i32 %4
}

; Function Attrs: noinline nounwind uwtable
define internal void @smp_cpus_done(i32) #0 {
  %2 = load void (i32)*, void (i32)** getelementptr inbounds (%struct.smp_ops, %struct.smp_ops* @smp_ops, i32 0, i32 2), align 8
  call void %2(i32 %0)
  ret void
}

; Function Attrs: noinline nounwind uwtable
define internal void @smp_prepare_boot_cpu() #0 {
  %1 = load void ()*, void ()** getelementptr inbounds (%struct.smp_ops, %struct.smp_ops* @smp_ops, i32 0, i32 0), align 8
  call void %1()
  ret void
}

; Function Attrs: noinline nounwind uwtable
define %struct.cfg80211_registered_device* @cfg80211_rdev_by_wiphy_idx(i32) #0 {
  call void @assert_cfg80211_lock()
  br label %2

; <label>:2:                                      ; preds = %13, %1
  %.sink3 = phi %struct.list_head** [ %15, %13 ], [ getelementptr inbounds (%struct.list_head, %struct.list_head* @cfg80211_rdev_list, i32 0, i32 0), %1 ]
  %3 = load %struct.list_head*, %struct.list_head** %.sink3, align 8
  %4 = bitcast %struct.list_head* %3 to i8*
  %5 = getelementptr inbounds i8, i8* %4, i64 -8
  %6 = bitcast i8* %5 to %struct.cfg80211_registered_device*
  %7 = getelementptr inbounds %struct.cfg80211_registered_device, %struct.cfg80211_registered_device* %6, i32 0, i32 1
  %8 = icmp ne %struct.list_head* %7, @cfg80211_rdev_list
  br i1 %8, label %9, label %.loopexit

; <label>:9:                                      ; preds = %2
  %10 = getelementptr inbounds %struct.cfg80211_registered_device, %struct.cfg80211_registered_device* %6, i32 0, i32 8
  %11 = load i32, i32* %10, align 8
  %12 = icmp eq i32 %11, %0
  br i1 %12, label %.loopexit, label %13

; <label>:13:                                     ; preds = %9
  %14 = getelementptr inbounds %struct.cfg80211_registered_device, %struct.cfg80211_registered_device* %6, i32 0, i32 1
  %15 = getelementptr inbounds %struct.list_head, %struct.list_head* %14, i32 0, i32 0
  br label %2

.loopexit:                                        ; preds = %2, %9
  %.01 = phi %struct.cfg80211_registered_device* [ %6, %9 ], [ null, %2 ]
  ret %struct.cfg80211_registered_device* %.01
}

; Function Attrs: noinline nounwind uwtable
define internal void @assert_cfg80211_lock() #0 {
  ret void
}

; Function Attrs: noinline nounwind uwtable
define i32 @get_wiphy_idx(%struct.wiphy*) #0 {
  %2 = call %struct.cfg80211_registered_device* @wiphy_to_dev(%struct.wiphy* %0)
  %3 = getelementptr inbounds %struct.cfg80211_registered_device, %struct.cfg80211_registered_device* %2, i32 0, i32 8
  %4 = load i32, i32* %3, align 8
  ret i32 %4
}

; Function Attrs: noinline nounwind uwtable
define internal %struct.cfg80211_registered_device* @wiphy_to_dev(%struct.wiphy*) #0 {
  %2 = icmp ne %struct.wiphy* %0, null
  %3 = xor i1 %2, true
  %4 = xor i1 %3, true
  %5 = xor i1 %4, true
  %6 = zext i1 %5 to i32
  %7 = sext i32 %6 to i64
  %8 = icmp ne i64 %7, 0
  br i1 %8, label %9, label %11

; <label>:9:                                      ; preds = %1
  call void asm sideeffect "1:\09ud2\0A.pushsection __bug_table,\22a\22\0A2:\09.long 1b - 2b, ${0:c} - 2b\0A\09.word ${1:c}, 0\0A\09.org 2b+${2:c}\0A.popsection", "i,i,i,~{dirflag},~{fpsr},~{flags}"(i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.13, i32 0, i32 0), i32 102, i64 12) #3, !srcloc !1
  br label %10

; <label>:10:                                     ; preds = %10, %9
  br label %10

; <label>:11:                                     ; preds = %1
  %12 = bitcast %struct.wiphy* %0 to i8*
  %13 = getelementptr inbounds i8, i8* %12, i64 -640
  %14 = bitcast i8* %13 to %struct.cfg80211_registered_device*
  ret %struct.cfg80211_registered_device* %14
}

; Function Attrs: noinline nounwind uwtable
define %struct.wiphy* @wiphy_idx_to_wiphy(i32) #0 {
  call void @assert_cfg80211_lock()
  %2 = call %struct.cfg80211_registered_device* @cfg80211_rdev_by_wiphy_idx(i32 %0)
  %3 = icmp ne %struct.cfg80211_registered_device* %2, null
  %4 = getelementptr inbounds %struct.cfg80211_registered_device, %struct.cfg80211_registered_device* %2, i32 0, i32 34
  %.0 = select i1 %3, %struct.wiphy* %4, %struct.wiphy* null
  ret %struct.wiphy* %.0
}

; Function Attrs: noinline nounwind uwtable
define %struct.cfg80211_registered_device* @cfg80211_get_dev_from_ifindex(%struct.net*, i32) #0 {
  %3 = call i8* @ERR_PTR(i64 -19)
  %4 = bitcast i8* %3 to %struct.cfg80211_registered_device*
  call void @mutex_lock(%struct.mutex* @cfg80211_mutex)
  %5 = call %struct.net_device* @dev_get_by_index(%struct.net* %0, i32 %1)
  %6 = icmp ne %struct.net_device* %5, null
  br i1 %6, label %7, label %22

; <label>:7:                                      ; preds = %2
  %8 = getelementptr inbounds %struct.net_device, %struct.net_device* %5, i32 0, i32 55
  %9 = load %struct.wireless_dev*, %struct.wireless_dev** %8, align 8
  %10 = icmp ne %struct.wireless_dev* %9, null
  br i1 %10, label %11, label %18

; <label>:11:                                     ; preds = %7
  %12 = getelementptr inbounds %struct.net_device, %struct.net_device* %5, i32 0, i32 55
  %13 = load %struct.wireless_dev*, %struct.wireless_dev** %12, align 8
  %14 = getelementptr inbounds %struct.wireless_dev, %struct.wireless_dev* %13, i32 0, i32 0
  %15 = load %struct.wiphy*, %struct.wiphy** %14, align 8
  %16 = call %struct.cfg80211_registered_device* @wiphy_to_dev(%struct.wiphy* %15)
  %17 = getelementptr inbounds %struct.cfg80211_registered_device, %struct.cfg80211_registered_device* %16, i32 0, i32 2
  call void @mutex_lock(%struct.mutex* %17)
  br label %21

; <label>:18:                                     ; preds = %7
  %19 = call i8* @ERR_PTR(i64 -19)
  %20 = bitcast i8* %19 to %struct.cfg80211_registered_device*
  br label %21

; <label>:21:                                     ; preds = %18, %11
  %.0 = phi %struct.cfg80211_registered_device* [ %16, %11 ], [ %20, %18 ]
  call void @dev_put(%struct.net_device* %5)
  br label %22

; <label>:22:                                     ; preds = %2, %21
  %.1 = phi %struct.cfg80211_registered_device* [ %.0, %21 ], [ %4, %2 ]
  call void @mutex_unlock(%struct.mutex* @cfg80211_mutex)
  ret %struct.cfg80211_registered_device* %.1
}

; Function Attrs: noinline nounwind uwtable
define internal i8* @ERR_PTR(i64) #0 {
  %2 = inttoptr i64 %0 to i8*
  ret i8* %2
}

declare void @mutex_lock(%struct.mutex*) #1

declare %struct.net_device* @dev_get_by_index(%struct.net*, i32) #1

; Function Attrs: noinline nounwind uwtable
define internal void @dev_put(%struct.net_device*) #0 {
  %2 = getelementptr inbounds %struct.net_device, %struct.net_device* %0, i32 0, i32 77
  %3 = load i32*, i32** %2, align 8
  call void asm "decl %gs:${0:P}", "=*m,*m,~{dirflag},~{fpsr},~{flags}"(i32* %3, i32* %3) #3, !srcloc !2
  ret void
}

declare void @mutex_unlock(%struct.mutex*) #1

; Function Attrs: noinline nounwind uwtable
define i32 @cfg80211_dev_rename(%struct.cfg80211_registered_device*, i8*) #0 {
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  store i32 -1, i32* %4, align 4
  call void @assert_cfg80211_lock()
  %5 = call i32 (i8*, i8*, ...) @sscanf(i8* %1, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str, i32 0, i32 0), i32* %3, i32* %4)
  %6 = load i32, i32* %4, align 4
  %7 = sext i32 %6 to i64
  %8 = call i64 @strlen(i8* %1)
  %9 = icmp eq i64 %7, %8
  br i1 %9, label %10, label %27

; <label>:10:                                     ; preds = %2
  %11 = load i32, i32* %3, align 4
  %12 = getelementptr inbounds %struct.cfg80211_registered_device, %struct.cfg80211_registered_device* %0, i32 0, i32 8
  %13 = load i32, i32* %12, align 8
  %14 = icmp ne i32 %11, %13
  br i1 %14, label %15, label %27

; <label>:15:                                     ; preds = %10, %19
  %.01 = phi i32 [ %20, %19 ], [ 1, %10 ]
  %16 = load i32, i32* %3, align 4
  %17 = sdiv i32 %16, 10
  store i32 %17, i32* %3, align 4
  %18 = icmp ne i32 %17, 0
  br i1 %18, label %19, label %21

; <label>:19:                                     ; preds = %15
  %20 = add nsw i32 %.01, 1
  br label %15

; <label>:21:                                     ; preds = %15
  %22 = load i32, i32* %4, align 4
  %23 = sext i32 %22 to i64
  %24 = sext i32 %.01 to i64
  %25 = add i64 3, %24
  %26 = icmp eq i64 %23, %25
  br i1 %26, label %78, label %27

; <label>:27:                                     ; preds = %21, %10, %2
  %28 = getelementptr inbounds %struct.cfg80211_registered_device, %struct.cfg80211_registered_device* %0, i32 0, i32 34
  %29 = getelementptr inbounds %struct.wiphy, %struct.wiphy* %28, i32 0, i32 42
  %30 = call i8* @dev_name(%struct.device* %29)
  %31 = call i32 @strcmp(i8* %1, i8* %30)
  %32 = icmp eq i32 %31, 0
  br i1 %32, label %78, label %33

; <label>:33:                                     ; preds = %27, %46
  %.sink4 = phi %struct.list_head** [ %48, %46 ], [ getelementptr inbounds (%struct.list_head, %struct.list_head* @cfg80211_rdev_list, i32 0, i32 0), %27 ]
  %34 = load %struct.list_head*, %struct.list_head** %.sink4, align 8
  %35 = bitcast %struct.list_head* %34 to i8*
  %36 = getelementptr inbounds i8, i8* %35, i64 -8
  %37 = bitcast i8* %36 to %struct.cfg80211_registered_device*
  %38 = getelementptr inbounds %struct.cfg80211_registered_device, %struct.cfg80211_registered_device* %37, i32 0, i32 1
  %39 = icmp ne %struct.list_head* %38, @cfg80211_rdev_list
  br i1 %39, label %40, label %49

; <label>:40:                                     ; preds = %33
  %41 = getelementptr inbounds %struct.cfg80211_registered_device, %struct.cfg80211_registered_device* %37, i32 0, i32 34
  %42 = getelementptr inbounds %struct.wiphy, %struct.wiphy* %41, i32 0, i32 42
  %43 = call i8* @dev_name(%struct.device* %42)
  %44 = call i32 @strcmp(i8* %1, i8* %43)
  %45 = icmp eq i32 %44, 0
  br i1 %45, label %78, label %46

; <label>:46:                                     ; preds = %40
  %47 = getelementptr inbounds %struct.cfg80211_registered_device, %struct.cfg80211_registered_device* %37, i32 0, i32 1
  %48 = getelementptr inbounds %struct.list_head, %struct.list_head* %47, i32 0, i32 0
  br label %33

; <label>:49:                                     ; preds = %33
  %50 = getelementptr inbounds %struct.cfg80211_registered_device, %struct.cfg80211_registered_device* %0, i32 0, i32 34
  %51 = getelementptr inbounds %struct.wiphy, %struct.wiphy* %50, i32 0, i32 42
  %52 = call i32 @device_rename(%struct.device* %51, i8* %1)
  %53 = icmp ne i32 %52, 0
  br i1 %53, label %78, label %54

; <label>:54:                                     ; preds = %49
  %55 = getelementptr inbounds %struct.cfg80211_registered_device, %struct.cfg80211_registered_device* %0, i32 0, i32 34
  %56 = getelementptr inbounds %struct.wiphy, %struct.wiphy* %55, i32 0, i32 44
  %57 = load %struct.dentry*, %struct.dentry** %56, align 16
  %58 = icmp ne %struct.dentry* %57, null
  br i1 %58, label %59, label %77

; <label>:59:                                     ; preds = %54
  %60 = getelementptr inbounds %struct.cfg80211_registered_device, %struct.cfg80211_registered_device* %0, i32 0, i32 34
  %61 = getelementptr inbounds %struct.wiphy, %struct.wiphy* %60, i32 0, i32 44
  %62 = load %struct.dentry*, %struct.dentry** %61, align 16
  %63 = getelementptr inbounds %struct.dentry, %struct.dentry* %62, i32 0, i32 3
  %64 = load %struct.dentry*, %struct.dentry** %63, align 8
  %65 = getelementptr inbounds %struct.cfg80211_registered_device, %struct.cfg80211_registered_device* %0, i32 0, i32 34
  %66 = getelementptr inbounds %struct.wiphy, %struct.wiphy* %65, i32 0, i32 44
  %67 = load %struct.dentry*, %struct.dentry** %66, align 16
  %68 = getelementptr inbounds %struct.cfg80211_registered_device, %struct.cfg80211_registered_device* %0, i32 0, i32 34
  %69 = getelementptr inbounds %struct.wiphy, %struct.wiphy* %68, i32 0, i32 44
  %70 = load %struct.dentry*, %struct.dentry** %69, align 16
  %71 = getelementptr inbounds %struct.dentry, %struct.dentry* %70, i32 0, i32 3
  %72 = load %struct.dentry*, %struct.dentry** %71, align 8
  %73 = call %struct.dentry* @debugfs_rename(%struct.dentry* %64, %struct.dentry* %67, %struct.dentry* %72, i8* %1)
  %74 = icmp ne %struct.dentry* %73, null
  br i1 %74, label %77, label %75

; <label>:75:                                     ; preds = %59
  %76 = call i32 (i8*, ...) @printk(i8* getelementptr inbounds ([49 x i8], [49 x i8]* @.str.1, i32 0, i32 0), i8* %1)
  br label %77

; <label>:77:                                     ; preds = %75, %59, %54
  call void @nl80211_notify_dev_rename(%struct.cfg80211_registered_device* %0)
  br label %78

; <label>:78:                                     ; preds = %49, %40, %27, %21, %77
  %.0 = phi i32 [ 0, %77 ], [ -22, %21 ], [ 0, %27 ], [ -22, %40 ], [ %52, %49 ]
  ret i32 %.0
}

declare i32 @sscanf(i8*, i8*, ...) #1

declare i64 @strlen(i8*) #1

declare i32 @strcmp(i8*, i8*) #1

; Function Attrs: noinline nounwind uwtable
define internal i8* @dev_name(%struct.device*) #0 {
  %2 = getelementptr inbounds %struct.device, %struct.device* %0, i32 0, i32 3
  %3 = load i8*, i8** %2, align 8
  %4 = icmp ne i8* %3, null
  br i1 %4, label %5, label %8

; <label>:5:                                      ; preds = %1
  %6 = getelementptr inbounds %struct.device, %struct.device* %0, i32 0, i32 3
  %7 = load i8*, i8** %6, align 8
  br label %11

; <label>:8:                                      ; preds = %1
  %9 = getelementptr inbounds %struct.device, %struct.device* %0, i32 0, i32 2
  %10 = call i8* @kobject_name(%struct.kobject* %9)
  br label %11

; <label>:11:                                     ; preds = %8, %5
  %.0 = phi i8* [ %7, %5 ], [ %10, %8 ]
  ret i8* %.0
}

declare i32 @device_rename(%struct.device*, i8*) #1

declare %struct.dentry* @debugfs_rename(%struct.dentry*, %struct.dentry*, %struct.dentry*, i8*) #1

declare i32 @printk(i8*, ...) #1

declare void @nl80211_notify_dev_rename(%struct.cfg80211_registered_device*) #1

; Function Attrs: noinline nounwind uwtable
define i32 @cfg80211_switch_netns(%struct.cfg80211_registered_device*, %struct.net*) #0 {
  %3 = getelementptr inbounds %struct.cfg80211_registered_device, %struct.cfg80211_registered_device* %0, i32 0, i32 34
  %4 = getelementptr inbounds %struct.wiphy, %struct.wiphy* %3, i32 0, i32 10
  %5 = load i32, i32* %4, align 4
  %6 = and i32 %5, 8
  %7 = icmp ne i32 %6, 0
  br i1 %7, label %8, label %114

; <label>:8:                                      ; preds = %2
  %9 = getelementptr inbounds %struct.cfg80211_registered_device, %struct.cfg80211_registered_device* %0, i32 0, i32 10
  br label %10

; <label>:10:                                     ; preds = %39, %8
  %.sink = phi %struct.list_head* [ %40, %39 ], [ %9, %8 ]
  %.01 = phi i32 [ 0, %8 ], [ %.1, %39 ]
  %11 = getelementptr inbounds %struct.list_head, %struct.list_head* %.sink, i32 0, i32 0
  %12 = load %struct.list_head*, %struct.list_head** %11, align 8
  %13 = bitcast %struct.list_head* %12 to i8*
  %14 = getelementptr inbounds i8, i8* %13, i64 -16
  %15 = bitcast i8* %14 to %struct.wireless_dev*
  %16 = getelementptr inbounds %struct.wireless_dev, %struct.wireless_dev* %15, i32 0, i32 2
  %17 = getelementptr inbounds %struct.cfg80211_registered_device, %struct.cfg80211_registered_device* %0, i32 0, i32 10
  %18 = icmp ne %struct.list_head* %16, %17
  br i1 %18, label %19, label %.loopexit

; <label>:19:                                     ; preds = %10
  %20 = getelementptr inbounds %struct.wireless_dev, %struct.wireless_dev* %15, i32 0, i32 3
  %21 = load %struct.net_device*, %struct.net_device** %20, align 8
  %22 = icmp ne %struct.net_device* %21, null
  br i1 %22, label %23, label %39

; <label>:23:                                     ; preds = %19
  %24 = getelementptr inbounds %struct.wireless_dev, %struct.wireless_dev* %15, i32 0, i32 3
  %25 = load %struct.net_device*, %struct.net_device** %24, align 8
  %26 = getelementptr inbounds %struct.net_device, %struct.net_device* %25, i32 0, i32 12
  %27 = load i64, i64* %26, align 16
  %28 = and i64 %27, -8193
  store i64 %28, i64* %26, align 16
  %29 = getelementptr inbounds %struct.wireless_dev, %struct.wireless_dev* %15, i32 0, i32 3
  %30 = load %struct.net_device*, %struct.net_device** %29, align 8
  %31 = call i32 @dev_change_net_namespace(%struct.net_device* %30, %struct.net* %1, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.2, i32 0, i32 0))
  %32 = icmp ne i32 %31, 0
  br i1 %32, label %.loopexit, label %33

; <label>:33:                                     ; preds = %23
  %34 = getelementptr inbounds %struct.wireless_dev, %struct.wireless_dev* %15, i32 0, i32 3
  %35 = load %struct.net_device*, %struct.net_device** %34, align 8
  %36 = getelementptr inbounds %struct.net_device, %struct.net_device* %35, i32 0, i32 12
  %37 = load i64, i64* %36, align 16
  %38 = or i64 %37, 8192
  store i64 %38, i64* %36, align 16
  br label %39

; <label>:39:                                     ; preds = %19, %33
  %.1 = phi i32 [ %31, %33 ], [ %.01, %19 ]
  %40 = getelementptr inbounds %struct.wireless_dev, %struct.wireless_dev* %15, i32 0, i32 2
  br label %10

.loopexit:                                        ; preds = %10, %23
  %.2 = phi i32 [ %31, %23 ], [ %.01, %10 ]
  %41 = icmp ne i32 %.2, 0
  %42 = getelementptr inbounds %struct.cfg80211_registered_device, %struct.cfg80211_registered_device* %0, i32 0, i32 34
  br i1 %41, label %43, label %90

; <label>:43:                                     ; preds = %.loopexit
  %44 = call %struct.net* @wiphy_net(%struct.wiphy* %42)
  br label %45

; <label>:45:                                     ; preds = %79, %55, %43
  %.sink11 = phi %struct.wireless_dev* [ %15, %43 ], [ %51, %55 ], [ %51, %79 ]
  %.3 = phi i32 [ %.2, %43 ], [ %67, %79 ], [ %.3, %55 ]
  %46 = getelementptr inbounds %struct.wireless_dev, %struct.wireless_dev* %.sink11, i32 0, i32 2
  %47 = getelementptr inbounds %struct.list_head, %struct.list_head* %46, i32 0, i32 1
  %48 = load %struct.list_head*, %struct.list_head** %47, align 8
  %49 = bitcast %struct.list_head* %48 to i8*
  %50 = getelementptr inbounds i8, i8* %49, i64 -16
  %51 = bitcast i8* %50 to %struct.wireless_dev*
  %52 = getelementptr inbounds %struct.wireless_dev, %struct.wireless_dev* %51, i32 0, i32 2
  %53 = getelementptr inbounds %struct.cfg80211_registered_device, %struct.cfg80211_registered_device* %0, i32 0, i32 10
  %54 = icmp ne %struct.list_head* %52, %53
  br i1 %54, label %55, label %114

; <label>:55:                                     ; preds = %45
  %56 = getelementptr inbounds %struct.wireless_dev, %struct.wireless_dev* %51, i32 0, i32 3
  %57 = load %struct.net_device*, %struct.net_device** %56, align 8
  %58 = icmp ne %struct.net_device* %57, null
  br i1 %58, label %59, label %45

; <label>:59:                                     ; preds = %55
  %60 = getelementptr inbounds %struct.wireless_dev, %struct.wireless_dev* %51, i32 0, i32 3
  %61 = load %struct.net_device*, %struct.net_device** %60, align 8
  %62 = getelementptr inbounds %struct.net_device, %struct.net_device* %61, i32 0, i32 12
  %63 = load i64, i64* %62, align 16
  %64 = and i64 %63, -8193
  store i64 %64, i64* %62, align 16
  %65 = getelementptr inbounds %struct.wireless_dev, %struct.wireless_dev* %51, i32 0, i32 3
  %66 = load %struct.net_device*, %struct.net_device** %65, align 8
  %67 = call i32 @dev_change_net_namespace(%struct.net_device* %66, %struct.net* %44, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.2, i32 0, i32 0))
  %68 = icmp ne i32 %67, 0
  %69 = xor i1 %68, true
  %70 = xor i1 %69, true
  %71 = zext i1 %70 to i32
  %72 = icmp ne i32 %71, 0
  %73 = xor i1 %72, true
  %74 = xor i1 %73, true
  %75 = zext i1 %74 to i32
  %76 = sext i32 %75 to i64
  %77 = icmp ne i64 %76, 0
  br i1 %77, label %78, label %79

; <label>:78:                                     ; preds = %59
  call void @warn_slowpath_null(i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.3, i32 0, i32 0), i32 193)
  br label %79

; <label>:79:                                     ; preds = %78, %59
  %80 = icmp ne i32 %71, 0
  %81 = xor i1 %80, true
  %82 = xor i1 %81, true
  %83 = zext i1 %82 to i32
  %84 = sext i32 %83 to i64
  %85 = getelementptr inbounds %struct.wireless_dev, %struct.wireless_dev* %51, i32 0, i32 3
  %86 = load %struct.net_device*, %struct.net_device** %85, align 8
  %87 = getelementptr inbounds %struct.net_device, %struct.net_device* %86, i32 0, i32 12
  %88 = load i64, i64* %87, align 16
  %89 = or i64 %88, 8192
  store i64 %89, i64* %87, align 16
  br label %45

; <label>:90:                                     ; preds = %.loopexit
  call void @wiphy_net_set(%struct.wiphy* %42, %struct.net* %1)
  %91 = getelementptr inbounds %struct.cfg80211_registered_device, %struct.cfg80211_registered_device* %0, i32 0, i32 34
  %92 = getelementptr inbounds %struct.wiphy, %struct.wiphy* %91, i32 0, i32 42
  %93 = getelementptr inbounds %struct.cfg80211_registered_device, %struct.cfg80211_registered_device* %0, i32 0, i32 34
  %94 = getelementptr inbounds %struct.wiphy, %struct.wiphy* %93, i32 0, i32 42
  %95 = call i8* @dev_name(%struct.device* %94)
  %96 = call i32 @device_rename(%struct.device* %92, i8* %95)
  %97 = icmp ne i32 %96, 0
  %98 = xor i1 %97, true
  %99 = xor i1 %98, true
  %100 = zext i1 %99 to i32
  %101 = icmp ne i32 %100, 0
  %102 = xor i1 %101, true
  %103 = xor i1 %102, true
  %104 = zext i1 %103 to i32
  %105 = sext i32 %104 to i64
  %106 = icmp ne i64 %105, 0
  br i1 %106, label %107, label %108

; <label>:107:                                    ; preds = %90
  call void @warn_slowpath_null(i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.3, i32 0, i32 0), i32 203)
  br label %108

; <label>:108:                                    ; preds = %107, %90
  %109 = icmp ne i32 %100, 0
  %110 = xor i1 %109, true
  %111 = xor i1 %110, true
  %112 = zext i1 %111 to i32
  %113 = sext i32 %112 to i64
  br label %114

; <label>:114:                                    ; preds = %45, %2, %108
  %.0 = phi i32 [ 0, %108 ], [ -95, %2 ], [ %.3, %45 ]
  ret i32 %.0
}

declare i32 @dev_change_net_namespace(%struct.net_device*, %struct.net*, i8*) #1

; Function Attrs: noinline nounwind uwtable
define internal %struct.net* @wiphy_net(%struct.wiphy*) #0 {
  %2 = getelementptr inbounds %struct.wiphy, %struct.wiphy* %0, i32 0, i32 47
  %3 = call %struct.net* @read_pnet(%struct.net** %2)
  ret %struct.net* %3
}

declare void @warn_slowpath_null(i8*, i32) #1

; Function Attrs: noinline nounwind uwtable
define internal void @wiphy_net_set(%struct.wiphy*, %struct.net*) #0 {
  %3 = getelementptr inbounds %struct.wiphy, %struct.wiphy* %0, i32 0, i32 47
  call void @write_pnet(%struct.net** %3, %struct.net* %1)
  ret void
}

; Function Attrs: noinline nounwind uwtable
define void @cfg80211_stop_p2p_device(%struct.cfg80211_registered_device*, %struct.wireless_dev*) #0 {
  %3 = getelementptr inbounds %struct.cfg80211_registered_device, %struct.cfg80211_registered_device* %0, i32 0, i32 9
  %4 = getelementptr inbounds %struct.cfg80211_registered_device, %struct.cfg80211_registered_device* %0, i32 0, i32 28
  %5 = getelementptr inbounds %struct.wireless_dev, %struct.wireless_dev* %1, i32 0, i32 1
  %6 = load i32, i32* %5, align 8
  %7 = icmp ne i32 %6, 10
  %8 = xor i1 %7, true
  %9 = xor i1 %8, true
  %10 = zext i1 %9 to i32
  %11 = icmp ne i32 %10, 0
  %12 = xor i1 %11, true
  %13 = xor i1 %12, true
  %14 = zext i1 %13 to i32
  %15 = sext i32 %14 to i64
  %16 = icmp ne i64 %15, 0
  br i1 %16, label %17, label %18

; <label>:17:                                     ; preds = %2
  call void @warn_slowpath_null(i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.3, i32 0, i32 0), i32 221)
  br label %18

; <label>:18:                                     ; preds = %17, %2
  %19 = icmp ne i32 %10, 0
  %20 = xor i1 %19, true
  %21 = xor i1 %20, true
  %22 = zext i1 %21 to i32
  %23 = sext i32 %22 to i64
  %24 = icmp ne i64 %23, 0
  br i1 %24, label %71, label %25

; <label>:25:                                     ; preds = %18
  %26 = getelementptr inbounds %struct.wireless_dev, %struct.wireless_dev* %1, i32 0, i32 10
  %27 = load i8, i8* %26, align 1
  %28 = trunc i8 %27 to i1
  br i1 %28, label %29, label %71

; <label>:29:                                     ; preds = %25
  call void @rdev_stop_p2p_device(%struct.cfg80211_registered_device* %0, %struct.wireless_dev* %1)
  %30 = getelementptr inbounds %struct.wireless_dev, %struct.wireless_dev* %1, i32 0, i32 10
  store i8 0, i8* %30, align 1
  %31 = getelementptr inbounds %struct.cfg80211_registered_device, %struct.cfg80211_registered_device* %0, i32 0, i32 13
  %32 = load i32, i32* %31, align 16
  %33 = add nsw i32 %32, -1
  store i32 %33, i32* %31, align 16
  %34 = getelementptr inbounds %struct.cfg80211_registered_device, %struct.cfg80211_registered_device* %0, i32 0, i32 23
  %35 = load %struct.cfg80211_scan_request*, %struct.cfg80211_scan_request** %34, align 16
  %36 = icmp ne %struct.cfg80211_scan_request* %35, null
  br i1 %36, label %37, label %71

; <label>:37:                                     ; preds = %29
  %38 = getelementptr inbounds %struct.cfg80211_registered_device, %struct.cfg80211_registered_device* %0, i32 0, i32 23
  %39 = load %struct.cfg80211_scan_request*, %struct.cfg80211_scan_request** %38, align 16
  %40 = getelementptr inbounds %struct.cfg80211_scan_request, %struct.cfg80211_scan_request* %39, i32 0, i32 7
  %41 = load %struct.wireless_dev*, %struct.wireless_dev** %40, align 8
  %42 = icmp eq %struct.wireless_dev* %41, %1
  br i1 %42, label %43, label %71

; <label>:43:                                     ; preds = %37
  %44 = getelementptr inbounds %struct.cfg80211_registered_device, %struct.cfg80211_registered_device* %0, i32 0, i32 26
  %45 = call i32 @work_busy(%struct.work_struct* %44)
  %46 = icmp ne i32 %45, 0
  %47 = zext i1 %46 to i8
  %48 = trunc i8 %47 to i1
  %49 = xor i1 %48, true
  %50 = xor i1 %49, true
  %51 = xor i1 %50, true
  %52 = zext i1 %51 to i32
  %53 = icmp ne i32 %52, 0
  %54 = xor i1 %53, true
  %55 = xor i1 %54, true
  %56 = zext i1 %55 to i32
  %57 = sext i32 %56 to i64
  %58 = icmp ne i64 %57, 0
  br i1 %58, label %59, label %60

; <label>:59:                                     ; preds = %43
  call void @warn_slowpath_null(i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.3, i32 0, i32 0), i32 241)
  br label %60

; <label>:60:                                     ; preds = %59, %43
  %61 = icmp ne i32 %52, 0
  %62 = xor i1 %61, true
  %63 = xor i1 %62, true
  %64 = zext i1 %63 to i32
  %65 = sext i32 %64 to i64
  %66 = getelementptr inbounds %struct.cfg80211_registered_device, %struct.cfg80211_registered_device* %0, i32 0, i32 23
  %67 = load %struct.cfg80211_scan_request*, %struct.cfg80211_scan_request** %66, align 16
  %68 = getelementptr inbounds %struct.cfg80211_scan_request, %struct.cfg80211_scan_request* %67, i32 0, i32 10
  store i8 1, i8* %68, align 8
  %69 = trunc i8 %47 to i1
  %70 = xor i1 %69, true
  call void @___cfg80211_scan_done(%struct.cfg80211_registered_device* %0, i1 zeroext %70)
  br label %71

; <label>:71:                                     ; preds = %25, %18, %60, %37, %29
  ret void
}

; Function Attrs: noinline nounwind uwtable
define internal void @rdev_stop_p2p_device(%struct.cfg80211_registered_device*, %struct.wireless_dev*) #0 {
  %3 = getelementptr inbounds %struct.cfg80211_registered_device, %struct.cfg80211_registered_device* %0, i32 0, i32 34
  call void @trace_rdev_stop_p2p_device(%struct.wiphy* %3, %struct.wireless_dev* %1)
  %4 = getelementptr inbounds %struct.cfg80211_registered_device, %struct.cfg80211_registered_device* %0, i32 0, i32 0
  %5 = load %struct.cfg80211_ops*, %struct.cfg80211_ops** %4, align 32
  %6 = getelementptr inbounds %struct.cfg80211_ops, %struct.cfg80211_ops* %5, i32 0, i32 76
  %7 = load void (%struct.wiphy*, %struct.wireless_dev*)*, void (%struct.wiphy*, %struct.wireless_dev*)** %6, align 8
  %8 = getelementptr inbounds %struct.cfg80211_registered_device, %struct.cfg80211_registered_device* %0, i32 0, i32 34
  call void %7(%struct.wiphy* %8, %struct.wireless_dev* %1)
  %9 = getelementptr inbounds %struct.cfg80211_registered_device, %struct.cfg80211_registered_device* %0, i32 0, i32 34
  call void @trace_rdev_return_void(%struct.wiphy* %9)
  ret void
}

declare i32 @work_busy(%struct.work_struct*) #1

declare void @___cfg80211_scan_done(%struct.cfg80211_registered_device*, i1 zeroext) #1

; Function Attrs: noinline nounwind uwtable
define %struct.wiphy* @wiphy_new(%struct.cfg80211_ops*, i32) #0 {
  %3 = alloca %struct.raw_spinlock, align 2
  %4 = alloca %struct.raw_spinlock, align 2
  %5 = alloca %struct.atomic64_t, align 8
  %6 = alloca %struct.atomic64_t, align 8
  %7 = alloca %struct.atomic64_t, align 8
  %8 = alloca %struct.atomic64_t, align 8
  %9 = alloca %struct.atomic64_t, align 8
  %10 = alloca %struct.atomic64_t, align 8
  %11 = getelementptr inbounds %struct.cfg80211_ops, %struct.cfg80211_ops* %0, i32 0, i32 6
  %12 = load i32 (%struct.wiphy*, %struct.net_device*, i8, i1, i8*, %struct.key_params*)*, i32 (%struct.wiphy*, %struct.net_device*, i8, i1, i8*, %struct.key_params*)** %11, align 8
  %13 = icmp ne i32 (%struct.wiphy*, %struct.net_device*, i8, i1, i8*, %struct.key_params*)* %12, null
  br i1 %13, label %14, label %23

; <label>:14:                                     ; preds = %2
  %15 = getelementptr inbounds %struct.cfg80211_ops, %struct.cfg80211_ops* %0, i32 0, i32 8
  %16 = load i32 (%struct.wiphy*, %struct.net_device*, i8, i1, i8*)*, i32 (%struct.wiphy*, %struct.net_device*, i8, i1, i8*)** %15, align 8
  %17 = icmp ne i32 (%struct.wiphy*, %struct.net_device*, i8, i1, i8*)* %16, null
  br i1 %17, label %18, label %23

; <label>:18:                                     ; preds = %14
  %19 = getelementptr inbounds %struct.cfg80211_ops, %struct.cfg80211_ops* %0, i32 0, i32 9
  %20 = load i32 (%struct.wiphy*, %struct.net_device*, i8, i1, i1)*, i32 (%struct.wiphy*, %struct.net_device*, i8, i1, i1)** %19, align 8
  %21 = icmp ne i32 (%struct.wiphy*, %struct.net_device*, i8, i1, i1)* %20, null
  %22 = xor i1 %21, true
  br label %23

; <label>:23:                                     ; preds = %14, %18, %2
  %24 = phi i1 [ false, %2 ], [ true, %14 ], [ %22, %18 ]
  %25 = xor i1 %24, true
  %26 = xor i1 %25, true
  %27 = zext i1 %26 to i32
  %28 = icmp ne i32 %27, 0
  %29 = xor i1 %28, true
  %30 = xor i1 %29, true
  %31 = zext i1 %30 to i32
  %32 = sext i32 %31 to i64
  %33 = icmp ne i64 %32, 0
  br i1 %33, label %34, label %35

; <label>:34:                                     ; preds = %23
  call void @warn_slowpath_null(i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.3, i32 0, i32 0), i32 317)
  br label %35

; <label>:35:                                     ; preds = %34, %23
  %36 = icmp ne i32 %27, 0
  %37 = xor i1 %36, true
  %38 = xor i1 %37, true
  %39 = zext i1 %38 to i32
  %40 = sext i32 %39 to i64
  %41 = getelementptr inbounds %struct.cfg80211_ops, %struct.cfg80211_ops* %0, i32 0, i32 33
  %42 = load i32 (%struct.wiphy*, %struct.net_device*, %struct.cfg80211_auth_request*)*, i32 (%struct.wiphy*, %struct.net_device*, %struct.cfg80211_auth_request*)** %41, align 8
  %43 = icmp ne i32 (%struct.wiphy*, %struct.net_device*, %struct.cfg80211_auth_request*)* %42, null
  br i1 %43, label %44, label %57

; <label>:44:                                     ; preds = %35
  %45 = getelementptr inbounds %struct.cfg80211_ops, %struct.cfg80211_ops* %0, i32 0, i32 34
  %46 = load i32 (%struct.wiphy*, %struct.net_device*, %struct.cfg80211_assoc_request*)*, i32 (%struct.wiphy*, %struct.net_device*, %struct.cfg80211_assoc_request*)** %45, align 8
  %47 = icmp ne i32 (%struct.wiphy*, %struct.net_device*, %struct.cfg80211_assoc_request*)* %46, null
  br i1 %47, label %48, label %57

; <label>:48:                                     ; preds = %44
  %49 = getelementptr inbounds %struct.cfg80211_ops, %struct.cfg80211_ops* %0, i32 0, i32 35
  %50 = load i32 (%struct.wiphy*, %struct.net_device*, %struct.cfg80211_deauth_request*)*, i32 (%struct.wiphy*, %struct.net_device*, %struct.cfg80211_deauth_request*)** %49, align 8
  %51 = icmp ne i32 (%struct.wiphy*, %struct.net_device*, %struct.cfg80211_deauth_request*)* %50, null
  br i1 %51, label %52, label %57

; <label>:52:                                     ; preds = %48
  %53 = getelementptr inbounds %struct.cfg80211_ops, %struct.cfg80211_ops* %0, i32 0, i32 36
  %54 = load i32 (%struct.wiphy*, %struct.net_device*, %struct.cfg80211_disassoc_request*)*, i32 (%struct.wiphy*, %struct.net_device*, %struct.cfg80211_disassoc_request*)** %53, align 8
  %55 = icmp ne i32 (%struct.wiphy*, %struct.net_device*, %struct.cfg80211_disassoc_request*)* %54, null
  %56 = xor i1 %55, true
  br label %57

; <label>:57:                                     ; preds = %44, %48, %52, %35
  %58 = phi i1 [ false, %35 ], [ true, %48 ], [ true, %44 ], [ %56, %52 ]
  %59 = xor i1 %58, true
  %60 = xor i1 %59, true
  %61 = zext i1 %60 to i32
  %62 = icmp ne i32 %61, 0
  %63 = xor i1 %62, true
  %64 = xor i1 %63, true
  %65 = zext i1 %64 to i32
  %66 = sext i32 %65 to i64
  %67 = icmp ne i64 %66, 0
  br i1 %67, label %68, label %69

; <label>:68:                                     ; preds = %57
  call void @warn_slowpath_null(i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.3, i32 0, i32 0), i32 318)
  br label %69

; <label>:69:                                     ; preds = %68, %57
  %70 = icmp ne i32 %61, 0
  %71 = xor i1 %70, true
  %72 = xor i1 %71, true
  %73 = zext i1 %72 to i32
  %74 = sext i32 %73 to i64
  %75 = getelementptr inbounds %struct.cfg80211_ops, %struct.cfg80211_ops* %0, i32 0, i32 37
  %76 = load i32 (%struct.wiphy*, %struct.net_device*, %struct.cfg80211_connect_params*)*, i32 (%struct.wiphy*, %struct.net_device*, %struct.cfg80211_connect_params*)** %75, align 8
  %77 = icmp ne i32 (%struct.wiphy*, %struct.net_device*, %struct.cfg80211_connect_params*)* %76, null
  br i1 %77, label %78, label %83

; <label>:78:                                     ; preds = %69
  %79 = getelementptr inbounds %struct.cfg80211_ops, %struct.cfg80211_ops* %0, i32 0, i32 38
  %80 = load i32 (%struct.wiphy*, %struct.net_device*, i16)*, i32 (%struct.wiphy*, %struct.net_device*, i16)** %79, align 8
  %81 = icmp ne i32 (%struct.wiphy*, %struct.net_device*, i16)* %80, null
  %82 = xor i1 %81, true
  br label %83

; <label>:83:                                     ; preds = %78, %69
  %84 = phi i1 [ false, %69 ], [ %82, %78 ]
  %85 = xor i1 %84, true
  %86 = xor i1 %85, true
  %87 = zext i1 %86 to i32
  %88 = icmp ne i32 %87, 0
  %89 = xor i1 %88, true
  %90 = xor i1 %89, true
  %91 = zext i1 %90 to i32
  %92 = sext i32 %91 to i64
  %93 = icmp ne i64 %92, 0
  br i1 %93, label %94, label %95

; <label>:94:                                     ; preds = %83
  call void @warn_slowpath_null(i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.3, i32 0, i32 0), i32 319)
  br label %95

; <label>:95:                                     ; preds = %94, %83
  %96 = icmp ne i32 %87, 0
  %97 = xor i1 %96, true
  %98 = xor i1 %97, true
  %99 = zext i1 %98 to i32
  %100 = sext i32 %99 to i64
  %101 = getelementptr inbounds %struct.cfg80211_ops, %struct.cfg80211_ops* %0, i32 0, i32 39
  %102 = load i32 (%struct.wiphy*, %struct.net_device*, %struct.cfg80211_ibss_params*)*, i32 (%struct.wiphy*, %struct.net_device*, %struct.cfg80211_ibss_params*)** %101, align 8
  %103 = icmp ne i32 (%struct.wiphy*, %struct.net_device*, %struct.cfg80211_ibss_params*)* %102, null
  br i1 %103, label %104, label %109

; <label>:104:                                    ; preds = %95
  %105 = getelementptr inbounds %struct.cfg80211_ops, %struct.cfg80211_ops* %0, i32 0, i32 40
  %106 = load i32 (%struct.wiphy*, %struct.net_device*)*, i32 (%struct.wiphy*, %struct.net_device*)** %105, align 8
  %107 = icmp ne i32 (%struct.wiphy*, %struct.net_device*)* %106, null
  %108 = xor i1 %107, true
  br label %109

; <label>:109:                                    ; preds = %104, %95
  %110 = phi i1 [ false, %95 ], [ %108, %104 ]
  %111 = xor i1 %110, true
  %112 = xor i1 %111, true
  %113 = zext i1 %112 to i32
  %114 = icmp ne i32 %113, 0
  %115 = xor i1 %114, true
  %116 = xor i1 %115, true
  %117 = zext i1 %116 to i32
  %118 = sext i32 %117 to i64
  %119 = icmp ne i64 %118, 0
  br i1 %119, label %120, label %121

; <label>:120:                                    ; preds = %109
  call void @warn_slowpath_null(i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.3, i32 0, i32 0), i32 320)
  br label %121

; <label>:121:                                    ; preds = %120, %109
  %122 = icmp ne i32 %113, 0
  %123 = xor i1 %122, true
  %124 = xor i1 %123, true
  %125 = zext i1 %124 to i32
  %126 = sext i32 %125 to i64
  %127 = getelementptr inbounds %struct.cfg80211_ops, %struct.cfg80211_ops* %0, i32 0, i32 3
  %128 = load %struct.wireless_dev* (%struct.wiphy*, i8*, i32, i32*, %struct.vif_params*)*, %struct.wireless_dev* (%struct.wiphy*, i8*, i32, i32*, %struct.vif_params*)** %127, align 8
  %129 = icmp ne %struct.wireless_dev* (%struct.wiphy*, i8*, i32, i32*, %struct.vif_params*)* %128, null
  br i1 %129, label %130, label %135

; <label>:130:                                    ; preds = %121
  %131 = getelementptr inbounds %struct.cfg80211_ops, %struct.cfg80211_ops* %0, i32 0, i32 4
  %132 = load i32 (%struct.wiphy*, %struct.wireless_dev*)*, i32 (%struct.wiphy*, %struct.wireless_dev*)** %131, align 8
  %133 = icmp ne i32 (%struct.wiphy*, %struct.wireless_dev*)* %132, null
  %134 = xor i1 %133, true
  br label %135

; <label>:135:                                    ; preds = %130, %121
  %136 = phi i1 [ false, %121 ], [ %134, %130 ]
  %137 = xor i1 %136, true
  %138 = xor i1 %137, true
  %139 = zext i1 %138 to i32
  %140 = icmp ne i32 %139, 0
  %141 = xor i1 %140, true
  %142 = xor i1 %141, true
  %143 = zext i1 %142 to i32
  %144 = sext i32 %143 to i64
  %145 = icmp ne i64 %144, 0
  br i1 %145, label %146, label %147

; <label>:146:                                    ; preds = %135
  call void @warn_slowpath_null(i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.3, i32 0, i32 0), i32 321)
  br label %147

; <label>:147:                                    ; preds = %146, %135
  %148 = icmp ne i32 %139, 0
  %149 = xor i1 %148, true
  %150 = xor i1 %149, true
  %151 = zext i1 %150 to i32
  %152 = sext i32 %151 to i64
  %153 = getelementptr inbounds %struct.cfg80211_ops, %struct.cfg80211_ops* %0, i32 0, i32 14
  %154 = load i32 (%struct.wiphy*, %struct.net_device*, i8*, %struct.station_parameters*)*, i32 (%struct.wiphy*, %struct.net_device*, i8*, %struct.station_parameters*)** %153, align 8
  %155 = icmp ne i32 (%struct.wiphy*, %struct.net_device*, i8*, %struct.station_parameters*)* %154, null
  br i1 %155, label %156, label %161

; <label>:156:                                    ; preds = %147
  %157 = getelementptr inbounds %struct.cfg80211_ops, %struct.cfg80211_ops* %0, i32 0, i32 15
  %158 = load i32 (%struct.wiphy*, %struct.net_device*, i8*)*, i32 (%struct.wiphy*, %struct.net_device*, i8*)** %157, align 8
  %159 = icmp ne i32 (%struct.wiphy*, %struct.net_device*, i8*)* %158, null
  %160 = xor i1 %159, true
  br label %161

; <label>:161:                                    ; preds = %156, %147
  %162 = phi i1 [ false, %147 ], [ %160, %156 ]
  %163 = xor i1 %162, true
  %164 = xor i1 %163, true
  %165 = zext i1 %164 to i32
  %166 = icmp ne i32 %165, 0
  %167 = xor i1 %166, true
  %168 = xor i1 %167, true
  %169 = zext i1 %168 to i32
  %170 = sext i32 %169 to i64
  %171 = icmp ne i64 %170, 0
  br i1 %171, label %172, label %173

; <label>:172:                                    ; preds = %161
  call void @warn_slowpath_null(i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.3, i32 0, i32 0), i32 322)
  br label %173

; <label>:173:                                    ; preds = %172, %161
  %174 = icmp ne i32 %165, 0
  %175 = xor i1 %174, true
  %176 = xor i1 %175, true
  %177 = zext i1 %176 to i32
  %178 = sext i32 %177 to i64
  %179 = getelementptr inbounds %struct.cfg80211_ops, %struct.cfg80211_ops* %0, i32 0, i32 19
  %180 = load i32 (%struct.wiphy*, %struct.net_device*, i8*, i8*)*, i32 (%struct.wiphy*, %struct.net_device*, i8*, i8*)** %179, align 8
  %181 = icmp ne i32 (%struct.wiphy*, %struct.net_device*, i8*, i8*)* %180, null
  br i1 %181, label %182, label %187

; <label>:182:                                    ; preds = %173
  %183 = getelementptr inbounds %struct.cfg80211_ops, %struct.cfg80211_ops* %0, i32 0, i32 20
  %184 = load i32 (%struct.wiphy*, %struct.net_device*, i8*)*, i32 (%struct.wiphy*, %struct.net_device*, i8*)** %183, align 8
  %185 = icmp ne i32 (%struct.wiphy*, %struct.net_device*, i8*)* %184, null
  %186 = xor i1 %185, true
  br label %187

; <label>:187:                                    ; preds = %182, %173
  %188 = phi i1 [ false, %173 ], [ %186, %182 ]
  %189 = xor i1 %188, true
  %190 = xor i1 %189, true
  %191 = zext i1 %190 to i32
  %192 = icmp ne i32 %191, 0
  %193 = xor i1 %192, true
  %194 = xor i1 %193, true
  %195 = zext i1 %194 to i32
  %196 = sext i32 %195 to i64
  %197 = icmp ne i64 %196, 0
  br i1 %197, label %198, label %199

; <label>:198:                                    ; preds = %187
  call void @warn_slowpath_null(i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.3, i32 0, i32 0), i32 323)
  br label %199

; <label>:199:                                    ; preds = %198, %187
  %200 = icmp ne i32 %191, 0
  %201 = xor i1 %200, true
  %202 = xor i1 %201, true
  %203 = zext i1 %202 to i32
  %204 = sext i32 %203 to i64
  %205 = getelementptr inbounds %struct.cfg80211_ops, %struct.cfg80211_ops* %0, i32 0, i32 26
  %206 = load i32 (%struct.wiphy*, %struct.net_device*, %struct.mesh_config*, %struct.mesh_setup*)*, i32 (%struct.wiphy*, %struct.net_device*, %struct.mesh_config*, %struct.mesh_setup*)** %205, align 8
  %207 = icmp ne i32 (%struct.wiphy*, %struct.net_device*, %struct.mesh_config*, %struct.mesh_setup*)* %206, null
  br i1 %207, label %208, label %213

; <label>:208:                                    ; preds = %199
  %209 = getelementptr inbounds %struct.cfg80211_ops, %struct.cfg80211_ops* %0, i32 0, i32 27
  %210 = load i32 (%struct.wiphy*, %struct.net_device*)*, i32 (%struct.wiphy*, %struct.net_device*)** %209, align 8
  %211 = icmp ne i32 (%struct.wiphy*, %struct.net_device*)* %210, null
  %212 = xor i1 %211, true
  br label %213

; <label>:213:                                    ; preds = %208, %199
  %214 = phi i1 [ false, %199 ], [ %212, %208 ]
  %215 = xor i1 %214, true
  %216 = xor i1 %215, true
  %217 = zext i1 %216 to i32
  %218 = icmp ne i32 %217, 0
  %219 = xor i1 %218, true
  %220 = xor i1 %219, true
  %221 = zext i1 %220 to i32
  %222 = sext i32 %221 to i64
  %223 = icmp ne i64 %222, 0
  br i1 %223, label %224, label %225

; <label>:224:                                    ; preds = %213
  call void @warn_slowpath_null(i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.3, i32 0, i32 0), i32 324)
  br label %225

; <label>:225:                                    ; preds = %224, %213
  %226 = icmp ne i32 %217, 0
  %227 = xor i1 %226, true
  %228 = xor i1 %227, true
  %229 = zext i1 %228 to i32
  %230 = sext i32 %229 to i64
  %231 = sext i32 %1 to i64
  %232 = add i64 1408, %231
  %233 = trunc i64 %232 to i32
  %234 = sext i32 %233 to i64
  %235 = call i8* @kzalloc(i64 %234, i32 208)
  %236 = bitcast i8* %235 to %struct.cfg80211_registered_device*
  %237 = icmp ne %struct.cfg80211_registered_device* %236, null
  br i1 %237, label %238, label %406

; <label>:238:                                    ; preds = %225
  %239 = getelementptr inbounds %struct.cfg80211_registered_device, %struct.cfg80211_registered_device* %236, i32 0, i32 0
  store %struct.cfg80211_ops* %0, %struct.cfg80211_ops** %239, align 32
  call void @mutex_lock(%struct.mutex* @cfg80211_mutex)
  %240 = load i32, i32* @wiphy_new.wiphy_counter, align 4
  %241 = add nsw i32 %240, 1
  store i32 %241, i32* @wiphy_new.wiphy_counter, align 4
  %242 = getelementptr inbounds %struct.cfg80211_registered_device, %struct.cfg80211_registered_device* %236, i32 0, i32 8
  store i32 %240, i32* %242, align 8
  %243 = getelementptr inbounds %struct.cfg80211_registered_device, %struct.cfg80211_registered_device* %236, i32 0, i32 8
  %244 = load i32, i32* %243, align 8
  %245 = icmp slt i32 %244, 0
  %246 = xor i1 %245, true
  %247 = xor i1 %246, true
  %248 = zext i1 %247 to i32
  %249 = sext i32 %248 to i64
  %250 = icmp ne i64 %249, 0
  br i1 %250, label %251, label %255

; <label>:251:                                    ; preds = %238
  %252 = load i32, i32* @wiphy_new.wiphy_counter, align 4
  %253 = add nsw i32 %252, -1
  store i32 %253, i32* @wiphy_new.wiphy_counter, align 4
  call void @mutex_unlock(%struct.mutex* @cfg80211_mutex)
  %254 = bitcast %struct.cfg80211_registered_device* %236 to i8*
  call void @kfree(i8* %254)
  br label %406

; <label>:255:                                    ; preds = %238
  call void @mutex_unlock(%struct.mutex* @cfg80211_mutex)
  %256 = getelementptr inbounds %struct.cfg80211_registered_device, %struct.cfg80211_registered_device* %236, i32 0, i32 34
  %257 = getelementptr inbounds %struct.wiphy, %struct.wiphy* %256, i32 0, i32 42
  %258 = getelementptr inbounds %struct.cfg80211_registered_device, %struct.cfg80211_registered_device* %236, i32 0, i32 8
  %259 = load i32, i32* %258, align 8
  %260 = call i32 (%struct.device*, i8*, ...) @dev_set_name(%struct.device* %257, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.4, i32 0, i32 0), i32 %259)
  %261 = getelementptr inbounds %struct.cfg80211_registered_device, %struct.cfg80211_registered_device* %236, i32 0, i32 2
  call void @__mutex_init(%struct.mutex* %261, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.5, i32 0, i32 0), %struct.lock_class_key* @wiphy_new.__key)
  %262 = getelementptr inbounds %struct.cfg80211_registered_device, %struct.cfg80211_registered_device* %236, i32 0, i32 9
  call void @__mutex_init(%struct.mutex* %262, i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.7, i32 0, i32 0), %struct.lock_class_key* @wiphy_new.__key.6)
  %263 = getelementptr inbounds %struct.cfg80211_registered_device, %struct.cfg80211_registered_device* %236, i32 0, i32 28
  call void @__mutex_init(%struct.mutex* %263, i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.9, i32 0, i32 0), %struct.lock_class_key* @wiphy_new.__key.8)
  %264 = getelementptr inbounds %struct.cfg80211_registered_device, %struct.cfg80211_registered_device* %236, i32 0, i32 10
  call void @INIT_LIST_HEAD(%struct.list_head* %264)
  %265 = getelementptr inbounds %struct.cfg80211_registered_device, %struct.cfg80211_registered_device* %236, i32 0, i32 15
  call void @INIT_LIST_HEAD(%struct.list_head* %265)
  %266 = getelementptr inbounds %struct.cfg80211_registered_device, %struct.cfg80211_registered_device* %236, i32 0, i32 16
  %267 = call %struct.raw_spinlock* @spinlock_check(%struct.spinlock* %266)
  %268 = getelementptr inbounds %struct.cfg80211_registered_device, %struct.cfg80211_registered_device* %236, i32 0, i32 16
  %269 = getelementptr inbounds %struct.spinlock, %struct.spinlock* %268, i32 0, i32 0
  %270 = bitcast %union.anon.0* %269 to %struct.raw_spinlock*
  %271 = getelementptr inbounds %struct.raw_spinlock, %struct.raw_spinlock* %3, i32 0, i32 0
  %272 = getelementptr inbounds %struct.arch_spinlock, %struct.arch_spinlock* %271, i32 0, i32 0
  %273 = bitcast %union.anon.1* %272 to i16*
  store i16 0, i16* %273, align 2
  %274 = bitcast %struct.raw_spinlock* %270 to i8*
  %275 = bitcast %struct.raw_spinlock* %3 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %274, i8* %275, i64 2, i32 2, i1 false)
  %276 = getelementptr inbounds %struct.cfg80211_registered_device, %struct.cfg80211_registered_device* %236, i32 0, i32 19
  %277 = call %struct.raw_spinlock* @spinlock_check(%struct.spinlock* %276)
  %278 = getelementptr inbounds %struct.cfg80211_registered_device, %struct.cfg80211_registered_device* %236, i32 0, i32 19
  %279 = getelementptr inbounds %struct.spinlock, %struct.spinlock* %278, i32 0, i32 0
  %280 = bitcast %union.anon.0* %279 to %struct.raw_spinlock*
  %281 = getelementptr inbounds %struct.raw_spinlock, %struct.raw_spinlock* %4, i32 0, i32 0
  %282 = getelementptr inbounds %struct.arch_spinlock, %struct.arch_spinlock* %281, i32 0, i32 0
  %283 = bitcast %union.anon.1* %282 to i16*
  store i16 0, i16* %283, align 2
  %284 = bitcast %struct.raw_spinlock* %280 to i8*
  %285 = bitcast %struct.raw_spinlock* %4 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %284, i8* %285, i64 2, i32 2, i1 false)
  %286 = getelementptr inbounds %struct.cfg80211_registered_device, %struct.cfg80211_registered_device* %236, i32 0, i32 20
  call void @INIT_LIST_HEAD(%struct.list_head* %286)
  %287 = getelementptr inbounds %struct.cfg80211_registered_device, %struct.cfg80211_registered_device* %236, i32 0, i32 26
  call void @__init_work(%struct.work_struct* %287, i32 0)
  %288 = getelementptr inbounds %struct.cfg80211_registered_device, %struct.cfg80211_registered_device* %236, i32 0, i32 26
  %289 = getelementptr inbounds %struct.work_struct, %struct.work_struct* %288, i32 0, i32 0
  %290 = getelementptr inbounds %struct.atomic64_t, %struct.atomic64_t* %5, i32 0, i32 0
  store i64 68719476704, i64* %290, align 8
  %291 = bitcast %struct.atomic64_t* %289 to i8*
  %292 = bitcast %struct.atomic64_t* %5 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %291, i8* %292, i64 8, i32 8, i1 false)
  %293 = getelementptr inbounds %struct.cfg80211_registered_device, %struct.cfg80211_registered_device* %236, i32 0, i32 26
  %294 = getelementptr inbounds %struct.work_struct, %struct.work_struct* %293, i32 0, i32 1
  call void @INIT_LIST_HEAD(%struct.list_head* %294)
  %295 = getelementptr inbounds %struct.cfg80211_registered_device, %struct.cfg80211_registered_device* %236, i32 0, i32 26
  %296 = getelementptr inbounds %struct.work_struct, %struct.work_struct* %295, i32 0, i32 2
  store void (%struct.work_struct*)* @__cfg80211_scan_done, void (%struct.work_struct*)** %296, align 8
  %297 = getelementptr inbounds %struct.cfg80211_registered_device, %struct.cfg80211_registered_device* %236, i32 0, i32 27
  call void @__init_work(%struct.work_struct* %297, i32 0)
  %298 = getelementptr inbounds %struct.cfg80211_registered_device, %struct.cfg80211_registered_device* %236, i32 0, i32 27
  %299 = getelementptr inbounds %struct.work_struct, %struct.work_struct* %298, i32 0, i32 0
  %300 = getelementptr inbounds %struct.atomic64_t, %struct.atomic64_t* %6, i32 0, i32 0
  store i64 68719476704, i64* %300, align 8
  %301 = bitcast %struct.atomic64_t* %299 to i8*
  %302 = bitcast %struct.atomic64_t* %6 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %301, i8* %302, i64 8, i32 8, i1 false)
  %303 = getelementptr inbounds %struct.cfg80211_registered_device, %struct.cfg80211_registered_device* %236, i32 0, i32 27
  %304 = getelementptr inbounds %struct.work_struct, %struct.work_struct* %303, i32 0, i32 1
  call void @INIT_LIST_HEAD(%struct.list_head* %304)
  %305 = getelementptr inbounds %struct.cfg80211_registered_device, %struct.cfg80211_registered_device* %236, i32 0, i32 27
  %306 = getelementptr inbounds %struct.work_struct, %struct.work_struct* %305, i32 0, i32 2
  store void (%struct.work_struct*)* @__cfg80211_sched_scan_results, void (%struct.work_struct*)** %306, align 8
  %307 = getelementptr inbounds %struct.cfg80211_registered_device, %struct.cfg80211_registered_device* %236, i32 0, i32 32
  %308 = getelementptr inbounds %struct.delayed_work, %struct.delayed_work* %307, i32 0, i32 0
  call void @__init_work(%struct.work_struct* %308, i32 0)
  %309 = getelementptr inbounds %struct.cfg80211_registered_device, %struct.cfg80211_registered_device* %236, i32 0, i32 32
  %310 = getelementptr inbounds %struct.delayed_work, %struct.delayed_work* %309, i32 0, i32 0
  %311 = getelementptr inbounds %struct.work_struct, %struct.work_struct* %310, i32 0, i32 0
  %312 = getelementptr inbounds %struct.atomic64_t, %struct.atomic64_t* %7, i32 0, i32 0
  store i64 68719476704, i64* %312, align 8
  %313 = bitcast %struct.atomic64_t* %311 to i8*
  %314 = bitcast %struct.atomic64_t* %7 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %313, i8* %314, i64 8, i32 8, i1 false)
  %315 = getelementptr inbounds %struct.cfg80211_registered_device, %struct.cfg80211_registered_device* %236, i32 0, i32 32
  %316 = getelementptr inbounds %struct.delayed_work, %struct.delayed_work* %315, i32 0, i32 0
  %317 = getelementptr inbounds %struct.work_struct, %struct.work_struct* %316, i32 0, i32 1
  call void @INIT_LIST_HEAD(%struct.list_head* %317)
  %318 = getelementptr inbounds %struct.cfg80211_registered_device, %struct.cfg80211_registered_device* %236, i32 0, i32 32
  %319 = getelementptr inbounds %struct.delayed_work, %struct.delayed_work* %318, i32 0, i32 0
  %320 = getelementptr inbounds %struct.work_struct, %struct.work_struct* %319, i32 0, i32 2
  store void (%struct.work_struct*)* @cfg80211_dfs_channels_update_work, void (%struct.work_struct*)** %320, align 8
  %321 = getelementptr inbounds %struct.cfg80211_registered_device, %struct.cfg80211_registered_device* %236, i32 0, i32 32
  %322 = getelementptr inbounds %struct.delayed_work, %struct.delayed_work* %321, i32 0, i32 1
  call void @init_timer_key(%struct.timer_list* %322, i32 2, i8* null, %struct.lock_class_key* null)
  %323 = getelementptr inbounds %struct.cfg80211_registered_device, %struct.cfg80211_registered_device* %236, i32 0, i32 32
  %324 = getelementptr inbounds %struct.delayed_work, %struct.delayed_work* %323, i32 0, i32 1
  %325 = getelementptr inbounds %struct.timer_list, %struct.timer_list* %324, i32 0, i32 3
  store void (i64)* @delayed_work_timer_fn, void (i64)** %325, align 8
  %326 = getelementptr inbounds %struct.cfg80211_registered_device, %struct.cfg80211_registered_device* %236, i32 0, i32 32
  %327 = ptrtoint %struct.delayed_work* %326 to i64
  %328 = getelementptr inbounds %struct.cfg80211_registered_device, %struct.cfg80211_registered_device* %236, i32 0, i32 32
  %329 = getelementptr inbounds %struct.delayed_work, %struct.delayed_work* %328, i32 0, i32 1
  %330 = getelementptr inbounds %struct.timer_list, %struct.timer_list* %329, i32 0, i32 4
  store i64 %327, i64* %330, align 8
  %331 = getelementptr inbounds %struct.cfg80211_registered_device, %struct.cfg80211_registered_device* %236, i32 0, i32 34
  %332 = getelementptr inbounds %struct.wiphy, %struct.wiphy* %331, i32 0, i32 42
  call void @device_initialize(%struct.device* %332)
  %333 = getelementptr inbounds %struct.cfg80211_registered_device, %struct.cfg80211_registered_device* %236, i32 0, i32 34
  %334 = getelementptr inbounds %struct.wiphy, %struct.wiphy* %333, i32 0, i32 42
  %335 = getelementptr inbounds %struct.device, %struct.device* %334, i32 0, i32 25
  store %struct.class* @ieee80211_class, %struct.class** %335, align 8
  %336 = bitcast %struct.cfg80211_registered_device* %236 to i8*
  %337 = getelementptr inbounds %struct.cfg80211_registered_device, %struct.cfg80211_registered_device* %236, i32 0, i32 34
  %338 = getelementptr inbounds %struct.wiphy, %struct.wiphy* %337, i32 0, i32 42
  %339 = getelementptr inbounds %struct.device, %struct.device* %338, i32 0, i32 8
  store i8* %336, i8** %339, align 8
  %340 = getelementptr inbounds %struct.cfg80211_registered_device, %struct.cfg80211_registered_device* %236, i32 0, i32 34
  %341 = getelementptr inbounds %struct.wiphy, %struct.wiphy* %340, i32 0, i32 10
  %342 = load i32, i32* %341, align 4
  %343 = or i32 %342, 16
  store i32 %343, i32* %341, align 4
  %344 = getelementptr inbounds %struct.cfg80211_registered_device, %struct.cfg80211_registered_device* %236, i32 0, i32 34
  call void @wiphy_net_set(%struct.wiphy* %344, %struct.net* @init_net)
  %345 = getelementptr inbounds %struct.cfg80211_registered_device, %struct.cfg80211_registered_device* %236, i32 0, i32 3
  %346 = getelementptr inbounds %struct.rfkill_ops, %struct.rfkill_ops* %345, i32 0, i32 2
  store i32 (i8*, i1)* @cfg80211_rfkill_set_block, i32 (i8*, i1)** %346, align 16
  %347 = getelementptr inbounds %struct.cfg80211_registered_device, %struct.cfg80211_registered_device* %236, i32 0, i32 34
  %348 = getelementptr inbounds %struct.wiphy, %struct.wiphy* %347, i32 0, i32 42
  %349 = call i8* @dev_name(%struct.device* %348)
  %350 = getelementptr inbounds %struct.cfg80211_registered_device, %struct.cfg80211_registered_device* %236, i32 0, i32 34
  %351 = getelementptr inbounds %struct.wiphy, %struct.wiphy* %350, i32 0, i32 42
  %352 = getelementptr inbounds %struct.cfg80211_registered_device, %struct.cfg80211_registered_device* %236, i32 0, i32 3
  %353 = bitcast %struct.cfg80211_registered_device* %236 to i8*
  %354 = call %struct.rfkill* @rfkill_alloc(i8* %349, %struct.device* %351, i32 1, %struct.rfkill_ops* %352, i8* %353)
  %355 = getelementptr inbounds %struct.cfg80211_registered_device, %struct.cfg80211_registered_device* %236, i32 0, i32 4
  store %struct.rfkill* %354, %struct.rfkill** %355, align 8
  %356 = getelementptr inbounds %struct.cfg80211_registered_device, %struct.cfg80211_registered_device* %236, i32 0, i32 4
  %357 = load %struct.rfkill*, %struct.rfkill** %356, align 8
  %358 = icmp ne %struct.rfkill* %357, null
  br i1 %358, label %361, label %359

; <label>:359:                                    ; preds = %255
  %360 = bitcast %struct.cfg80211_registered_device* %236 to i8*
  call void @kfree(i8* %360)
  br label %406

; <label>:361:                                    ; preds = %255
  %362 = getelementptr inbounds %struct.cfg80211_registered_device, %struct.cfg80211_registered_device* %236, i32 0, i32 5
  call void @__init_work(%struct.work_struct* %362, i32 0)
  %363 = getelementptr inbounds %struct.cfg80211_registered_device, %struct.cfg80211_registered_device* %236, i32 0, i32 5
  %364 = getelementptr inbounds %struct.work_struct, %struct.work_struct* %363, i32 0, i32 0
  %365 = getelementptr inbounds %struct.atomic64_t, %struct.atomic64_t* %8, i32 0, i32 0
  store i64 68719476704, i64* %365, align 8
  %366 = bitcast %struct.atomic64_t* %364 to i8*
  %367 = bitcast %struct.atomic64_t* %8 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %366, i8* %367, i64 8, i32 8, i1 false)
  %368 = getelementptr inbounds %struct.cfg80211_registered_device, %struct.cfg80211_registered_device* %236, i32 0, i32 5
  %369 = getelementptr inbounds %struct.work_struct, %struct.work_struct* %368, i32 0, i32 1
  call void @INIT_LIST_HEAD(%struct.list_head* %369)
  %370 = getelementptr inbounds %struct.cfg80211_registered_device, %struct.cfg80211_registered_device* %236, i32 0, i32 5
  %371 = getelementptr inbounds %struct.work_struct, %struct.work_struct* %370, i32 0, i32 2
  store void (%struct.work_struct*)* @cfg80211_rfkill_sync_work, void (%struct.work_struct*)** %371, align 8
  %372 = getelementptr inbounds %struct.cfg80211_registered_device, %struct.cfg80211_registered_device* %236, i32 0, i32 29
  call void @__init_work(%struct.work_struct* %372, i32 0)
  %373 = getelementptr inbounds %struct.cfg80211_registered_device, %struct.cfg80211_registered_device* %236, i32 0, i32 29
  %374 = getelementptr inbounds %struct.work_struct, %struct.work_struct* %373, i32 0, i32 0
  %375 = getelementptr inbounds %struct.atomic64_t, %struct.atomic64_t* %9, i32 0, i32 0
  store i64 68719476704, i64* %375, align 8
  %376 = bitcast %struct.atomic64_t* %374 to i8*
  %377 = bitcast %struct.atomic64_t* %9 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %376, i8* %377, i64 8, i32 8, i1 false)
  %378 = getelementptr inbounds %struct.cfg80211_registered_device, %struct.cfg80211_registered_device* %236, i32 0, i32 29
  %379 = getelementptr inbounds %struct.work_struct, %struct.work_struct* %378, i32 0, i32 1
  call void @INIT_LIST_HEAD(%struct.list_head* %379)
  %380 = getelementptr inbounds %struct.cfg80211_registered_device, %struct.cfg80211_registered_device* %236, i32 0, i32 29
  %381 = getelementptr inbounds %struct.work_struct, %struct.work_struct* %380, i32 0, i32 2
  store void (%struct.work_struct*)* @cfg80211_conn_work, void (%struct.work_struct*)** %381, align 8
  %382 = getelementptr inbounds %struct.cfg80211_registered_device, %struct.cfg80211_registered_device* %236, i32 0, i32 30
  call void @__init_work(%struct.work_struct* %382, i32 0)
  %383 = getelementptr inbounds %struct.cfg80211_registered_device, %struct.cfg80211_registered_device* %236, i32 0, i32 30
  %384 = getelementptr inbounds %struct.work_struct, %struct.work_struct* %383, i32 0, i32 0
  %385 = getelementptr inbounds %struct.atomic64_t, %struct.atomic64_t* %10, i32 0, i32 0
  store i64 68719476704, i64* %385, align 8
  %386 = bitcast %struct.atomic64_t* %384 to i8*
  %387 = bitcast %struct.atomic64_t* %10 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %386, i8* %387, i64 8, i32 8, i1 false)
  %388 = getelementptr inbounds %struct.cfg80211_registered_device, %struct.cfg80211_registered_device* %236, i32 0, i32 30
  %389 = getelementptr inbounds %struct.work_struct, %struct.work_struct* %388, i32 0, i32 1
  call void @INIT_LIST_HEAD(%struct.list_head* %389)
  %390 = getelementptr inbounds %struct.cfg80211_registered_device, %struct.cfg80211_registered_device* %236, i32 0, i32 30
  %391 = getelementptr inbounds %struct.work_struct, %struct.work_struct* %390, i32 0, i32 2
  store void (%struct.work_struct*)* @cfg80211_event_work, void (%struct.work_struct*)** %391, align 8
  %392 = getelementptr inbounds %struct.cfg80211_registered_device, %struct.cfg80211_registered_device* %236, i32 0, i32 14
  call void @__init_waitqueue_head(%struct.__wait_queue_head* %392, i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.11, i32 0, i32 0), %struct.lock_class_key* @wiphy_new.__key.10)
  %393 = getelementptr inbounds %struct.cfg80211_registered_device, %struct.cfg80211_registered_device* %236, i32 0, i32 34
  %394 = getelementptr inbounds %struct.wiphy, %struct.wiphy* %393, i32 0, i32 22
  store i8 7, i8* %394, align 32
  %395 = getelementptr inbounds %struct.cfg80211_registered_device, %struct.cfg80211_registered_device* %236, i32 0, i32 34
  %396 = getelementptr inbounds %struct.wiphy, %struct.wiphy* %395, i32 0, i32 23
  store i8 4, i8* %396, align 1
  %397 = getelementptr inbounds %struct.cfg80211_registered_device, %struct.cfg80211_registered_device* %236, i32 0, i32 34
  %398 = getelementptr inbounds %struct.wiphy, %struct.wiphy* %397, i32 0, i32 24
  store i32 -1, i32* %398, align 4
  %399 = getelementptr inbounds %struct.cfg80211_registered_device, %struct.cfg80211_registered_device* %236, i32 0, i32 34
  %400 = getelementptr inbounds %struct.wiphy, %struct.wiphy* %399, i32 0, i32 25
  store i32 -1, i32* %400, align 8
  %401 = getelementptr inbounds %struct.cfg80211_registered_device, %struct.cfg80211_registered_device* %236, i32 0, i32 34
  %402 = getelementptr inbounds %struct.wiphy, %struct.wiphy* %401, i32 0, i32 26
  store i8 0, i8* %402, align 4
  %403 = getelementptr inbounds %struct.cfg80211_registered_device, %struct.cfg80211_registered_device* %236, i32 0, i32 34
  %404 = getelementptr inbounds %struct.wiphy, %struct.wiphy* %403, i32 0, i32 11
  store i32 128, i32* %404, align 8
  %405 = getelementptr inbounds %struct.cfg80211_registered_device, %struct.cfg80211_registered_device* %236, i32 0, i32 34
  br label %406

; <label>:406:                                    ; preds = %225, %361, %359, %251
  %.0 = phi %struct.wiphy* [ null, %251 ], [ %405, %361 ], [ null, %359 ], [ null, %225 ]
  ret %struct.wiphy* %.0
}

; Function Attrs: noinline nounwind uwtable
define internal i8* @kzalloc(i64, i32) #0 {
  %3 = or i32 %1, 32768
  %4 = call i8* @__kmalloc(i64 %0, i32 %3) #3
  ret i8* %4
}

declare void @kfree(i8*) #1

declare i32 @dev_set_name(%struct.device*, i8*, ...) #1

declare void @__mutex_init(%struct.mutex*, i8*, %struct.lock_class_key*) #1

; Function Attrs: noinline nounwind uwtable
define internal void @INIT_LIST_HEAD(%struct.list_head*) #0 {
  %2 = getelementptr inbounds %struct.list_head, %struct.list_head* %0, i32 0, i32 0
  store %struct.list_head* %0, %struct.list_head** %2, align 8
  %3 = getelementptr inbounds %struct.list_head, %struct.list_head* %0, i32 0, i32 1
  store %struct.list_head* %0, %struct.list_head** %3, align 8
  ret void
}

; Function Attrs: noinline nounwind uwtable
define internal %struct.raw_spinlock* @spinlock_check(%struct.spinlock*) #0 {
  %2 = getelementptr inbounds %struct.spinlock, %struct.spinlock* %0, i32 0, i32 0
  %3 = bitcast %union.anon.0* %2 to %struct.raw_spinlock*
  ret %struct.raw_spinlock* %3
}

; Function Attrs: argmemonly nounwind
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* nocapture writeonly, i8* nocapture readonly, i64, i32, i1) #2

; Function Attrs: noinline nounwind uwtable
define internal void @__init_work(%struct.work_struct*, i32) #0 {
  ret void
}

declare void @__cfg80211_scan_done(%struct.work_struct*) #1

declare void @__cfg80211_sched_scan_results(%struct.work_struct*) #1

declare void @cfg80211_dfs_channels_update_work(%struct.work_struct*) #1

declare void @init_timer_key(%struct.timer_list*, i32, i8*, %struct.lock_class_key*) #1

declare void @delayed_work_timer_fn(i64) #1

declare void @device_initialize(%struct.device*) #1

; Function Attrs: noinline nounwind uwtable
define internal i32 @cfg80211_rfkill_set_block(i8*, i1 zeroext) #0 {
  %3 = zext i1 %1 to i8
  %4 = bitcast i8* %0 to %struct.cfg80211_registered_device*
  %5 = trunc i8 %3 to i1
  br i1 %5, label %6, label %36

; <label>:6:                                      ; preds = %2
  call void @rtnl_lock()
  %7 = getelementptr inbounds %struct.cfg80211_registered_device, %struct.cfg80211_registered_device* %4, i32 0, i32 10
  br label %8

; <label>:8:                                      ; preds = %33, %6
  %.sink = phi %struct.list_head* [ %34, %33 ], [ %7, %6 ]
  %9 = getelementptr inbounds %struct.list_head, %struct.list_head* %.sink, i32 0, i32 0
  %10 = load %struct.list_head*, %struct.list_head** %9, align 8
  %11 = bitcast %struct.list_head* %10 to i8*
  %12 = getelementptr inbounds i8, i8* %11, i64 -16
  %13 = bitcast i8* %12 to %struct.wireless_dev*
  %14 = getelementptr inbounds %struct.wireless_dev, %struct.wireless_dev* %13, i32 0, i32 2
  %15 = getelementptr inbounds %struct.cfg80211_registered_device, %struct.cfg80211_registered_device* %4, i32 0, i32 10
  %16 = icmp ne %struct.list_head* %14, %15
  br i1 %16, label %17, label %35

; <label>:17:                                     ; preds = %8
  %18 = getelementptr inbounds %struct.wireless_dev, %struct.wireless_dev* %13, i32 0, i32 3
  %19 = load %struct.net_device*, %struct.net_device** %18, align 8
  %20 = icmp ne %struct.net_device* %19, null
  br i1 %20, label %21, label %25

; <label>:21:                                     ; preds = %17
  %22 = getelementptr inbounds %struct.wireless_dev, %struct.wireless_dev* %13, i32 0, i32 3
  %23 = load %struct.net_device*, %struct.net_device** %22, align 8
  %24 = call i32 @dev_close(%struct.net_device* %23)
  br label %33

; <label>:25:                                     ; preds = %17
  %26 = getelementptr inbounds %struct.wireless_dev, %struct.wireless_dev* %13, i32 0, i32 1
  %27 = load i32, i32* %26, align 8
  %cond = icmp eq i32 %27, 10
  br i1 %cond, label %28, label %33

; <label>:28:                                     ; preds = %25
  %29 = getelementptr inbounds %struct.cfg80211_registered_device, %struct.cfg80211_registered_device* %4, i32 0, i32 9
  call void @mutex_lock(%struct.mutex* %29)
  %30 = getelementptr inbounds %struct.cfg80211_registered_device, %struct.cfg80211_registered_device* %4, i32 0, i32 28
  call void @mutex_lock(%struct.mutex* %30)
  call void @cfg80211_stop_p2p_device(%struct.cfg80211_registered_device* %4, %struct.wireless_dev* %13)
  %31 = getelementptr inbounds %struct.cfg80211_registered_device, %struct.cfg80211_registered_device* %4, i32 0, i32 28
  call void @mutex_unlock(%struct.mutex* %31)
  %32 = getelementptr inbounds %struct.cfg80211_registered_device, %struct.cfg80211_registered_device* %4, i32 0, i32 9
  call void @mutex_unlock(%struct.mutex* %32)
  br label %33

; <label>:33:                                     ; preds = %28, %25, %21
  %34 = getelementptr inbounds %struct.wireless_dev, %struct.wireless_dev* %13, i32 0, i32 2
  br label %8

; <label>:35:                                     ; preds = %8
  call void @rtnl_unlock()
  br label %36

; <label>:36:                                     ; preds = %2, %35
  ret i32 0
}

declare %struct.rfkill* @rfkill_alloc(i8*, %struct.device*, i32, %struct.rfkill_ops*, i8*) #1

; Function Attrs: noinline nounwind uwtable
define internal void @cfg80211_rfkill_sync_work(%struct.work_struct*) #0 {
  %2 = bitcast %struct.work_struct* %0 to i8*
  %3 = getelementptr inbounds i8, i8* %2, i64 -96
  %4 = bitcast i8* %3 to %struct.cfg80211_registered_device*
  %5 = bitcast %struct.cfg80211_registered_device* %4 to i8*
  %6 = getelementptr inbounds %struct.cfg80211_registered_device, %struct.cfg80211_registered_device* %4, i32 0, i32 4
  %7 = load %struct.rfkill*, %struct.rfkill** %6, align 8
  %8 = call zeroext i1 @rfkill_blocked(%struct.rfkill* %7)
  %9 = call i32 @cfg80211_rfkill_set_block(i8* %5, i1 zeroext %8)
  ret void
}

declare void @cfg80211_conn_work(%struct.work_struct*) #1

; Function Attrs: noinline nounwind uwtable
define internal void @cfg80211_event_work(%struct.work_struct*) #0 {
  %2 = bitcast %struct.work_struct* %0 to i8*
  %3 = getelementptr inbounds i8, i8* %2, i64 -464
  %4 = bitcast i8* %3 to %struct.cfg80211_registered_device*
  call void @rtnl_lock()
  call void @cfg80211_lock_rdev(%struct.cfg80211_registered_device* %4)
  call void @cfg80211_process_rdev_events(%struct.cfg80211_registered_device* %4)
  call void @cfg80211_unlock_rdev(%struct.cfg80211_registered_device* %4)
  call void @rtnl_unlock()
  ret void
}

declare void @__init_waitqueue_head(%struct.__wait_queue_head*, i8*, %struct.lock_class_key*) #1

; Function Attrs: noinline nounwind uwtable
define i32 @wiphy_register(%struct.wiphy*) #0 {
  %2 = alloca %struct.regulatory_request, align 8
  %3 = call %struct.cfg80211_registered_device* @wiphy_to_dev(%struct.wiphy* %0)
  %4 = getelementptr inbounds %struct.wiphy, %struct.wiphy* %0, i32 0, i32 8
  %5 = load i16, i16* %4, align 16
  %6 = getelementptr inbounds %struct.wiphy, %struct.wiphy* %0, i32 0, i32 29
  %7 = getelementptr inbounds %struct.wiphy_wowlan_support, %struct.wiphy_wowlan_support* %6, i32 0, i32 0
  %8 = load i32, i32* %7, align 8
  %9 = and i32 %8, 16
  %10 = icmp ne i32 %9, 0
  br i1 %10, label %11, label %18

; <label>:11:                                     ; preds = %1
  %12 = getelementptr inbounds %struct.wiphy, %struct.wiphy* %0, i32 0, i32 29
  %13 = getelementptr inbounds %struct.wiphy_wowlan_support, %struct.wiphy_wowlan_support* %12, i32 0, i32 0
  %14 = load i32, i32* %13, align 8
  %15 = and i32 %14, 8
  %16 = icmp ne i32 %15, 0
  %17 = xor i1 %16, true
  br label %18

; <label>:18:                                     ; preds = %11, %1
  %19 = phi i1 [ false, %1 ], [ %17, %11 ]
  %20 = xor i1 %19, true
  %21 = xor i1 %20, true
  %22 = zext i1 %21 to i32
  %23 = icmp ne i32 %22, 0
  %24 = xor i1 %23, true
  %25 = xor i1 %24, true
  %26 = zext i1 %25 to i32
  %27 = sext i32 %26 to i64
  %28 = icmp ne i64 %27, 0
  br i1 %28, label %29, label %30

; <label>:29:                                     ; preds = %18
  call void @warn_slowpath_null(i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.3, i32 0, i32 0), i32 500)
  br label %30

; <label>:30:                                     ; preds = %29, %18
  %31 = icmp ne i32 %22, 0
  %32 = xor i1 %31, true
  %33 = xor i1 %32, true
  %34 = zext i1 %33 to i32
  %35 = sext i32 %34 to i64
  %36 = icmp ne i64 %35, 0
  br i1 %36, label %482, label %37

; <label>:37:                                     ; preds = %30
  %38 = getelementptr inbounds %struct.wiphy, %struct.wiphy* %0, i32 0, i32 12
  %39 = load i32, i32* %38, align 4
  %40 = icmp ne i32 %39, 0
  br i1 %40, label %41, label %47

; <label>:41:                                     ; preds = %37
  %42 = getelementptr inbounds %struct.wiphy, %struct.wiphy* %0, i32 0, i32 10
  %43 = load i32, i32* %42, align 4
  %44 = and i32 %43, 131072
  %45 = icmp ne i32 %44, 0
  %46 = xor i1 %45, true
  br label %47

; <label>:47:                                     ; preds = %41, %37
  %48 = phi i1 [ false, %37 ], [ %46, %41 ]
  %49 = xor i1 %48, true
  %50 = xor i1 %49, true
  %51 = zext i1 %50 to i32
  %52 = icmp ne i32 %51, 0
  %53 = xor i1 %52, true
  %54 = xor i1 %53, true
  %55 = zext i1 %54 to i32
  %56 = sext i32 %55 to i64
  %57 = icmp ne i64 %56, 0
  br i1 %57, label %58, label %59

; <label>:58:                                     ; preds = %47
  call void @warn_slowpath_null(i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.3, i32 0, i32 0), i32 505)
  br label %59

; <label>:59:                                     ; preds = %58, %47
  %60 = icmp ne i32 %51, 0
  %61 = xor i1 %60, true
  %62 = xor i1 %61, true
  %63 = zext i1 %62 to i32
  %64 = sext i32 %63 to i64
  %65 = icmp ne i64 %64, 0
  br i1 %65, label %482, label %66

; <label>:66:                                     ; preds = %59
  %67 = getelementptr inbounds %struct.wiphy, %struct.wiphy* %0, i32 0, i32 2
  %68 = load %struct.mac_address*, %struct.mac_address** %67, align 16
  %69 = icmp ne %struct.mac_address* %68, null
  br i1 %69, label %70, label %75

; <label>:70:                                     ; preds = %66
  %71 = getelementptr inbounds %struct.wiphy, %struct.wiphy* %0, i32 0, i32 7
  %72 = load i16, i16* %71, align 2
  %73 = icmp ne i16 %72, 0
  %74 = xor i1 %73, true
  br label %75

; <label>:75:                                     ; preds = %70, %66
  %76 = phi i1 [ false, %66 ], [ %74, %70 ]
  %77 = xor i1 %76, true
  %78 = xor i1 %77, true
  %79 = zext i1 %78 to i32
  %80 = icmp ne i32 %79, 0
  %81 = xor i1 %80, true
  %82 = xor i1 %81, true
  %83 = zext i1 %82 to i32
  %84 = sext i32 %83 to i64
  %85 = icmp ne i64 %84, 0
  br i1 %85, label %86, label %87

; <label>:86:                                     ; preds = %75
  call void @warn_slowpath_null(i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.3, i32 0, i32 0), i32 508)
  br label %87

; <label>:87:                                     ; preds = %86, %75
  %88 = icmp ne i32 %79, 0
  %89 = xor i1 %88, true
  %90 = xor i1 %89, true
  %91 = zext i1 %90 to i32
  %92 = sext i32 %91 to i64
  %93 = icmp ne i64 %92, 0
  br i1 %93, label %482, label %94

; <label>:94:                                     ; preds = %87
  %95 = getelementptr inbounds %struct.wiphy, %struct.wiphy* %0, i32 0, i32 2
  %96 = load %struct.mac_address*, %struct.mac_address** %95, align 16
  %97 = icmp ne %struct.mac_address* %96, null
  br i1 %97, label %98, label %112

; <label>:98:                                     ; preds = %94
  %99 = getelementptr inbounds %struct.wiphy, %struct.wiphy* %0, i32 0, i32 0
  %100 = getelementptr inbounds [6 x i8], [6 x i8]* %99, i32 0, i32 0
  %101 = call zeroext i1 @is_zero_ether_addr(i8* %100)
  br i1 %101, label %112, label %102

; <label>:102:                                    ; preds = %98
  %103 = getelementptr inbounds %struct.wiphy, %struct.wiphy* %0, i32 0, i32 0
  %104 = getelementptr inbounds [6 x i8], [6 x i8]* %103, i32 0, i32 0
  %105 = getelementptr inbounds %struct.wiphy, %struct.wiphy* %0, i32 0, i32 2
  %106 = load %struct.mac_address*, %struct.mac_address** %105, align 16
  %107 = getelementptr inbounds %struct.mac_address, %struct.mac_address* %106, i64 0
  %108 = getelementptr inbounds %struct.mac_address, %struct.mac_address* %107, i32 0, i32 0
  %109 = getelementptr inbounds [6 x i8], [6 x i8]* %108, i32 0, i32 0
  %110 = call i32 @memcmp(i8* %104, i8* %109, i64 6)
  %111 = icmp ne i32 %110, 0
  br label %112

; <label>:112:                                    ; preds = %102, %98, %94
  %113 = phi i1 [ false, %98 ], [ false, %94 ], [ %111, %102 ]
  %114 = xor i1 %113, true
  %115 = xor i1 %114, true
  %116 = zext i1 %115 to i32
  %117 = icmp ne i32 %116, 0
  %118 = xor i1 %117, true
  %119 = xor i1 %118, true
  %120 = zext i1 %119 to i32
  %121 = sext i32 %120 to i64
  %122 = icmp ne i64 %121, 0
  br i1 %122, label %123, label %124

; <label>:123:                                    ; preds = %112
  call void @warn_slowpath_null(i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.3, i32 0, i32 0), i32 514)
  br label %124

; <label>:124:                                    ; preds = %123, %112
  %125 = icmp ne i32 %116, 0
  %126 = xor i1 %125, true
  %127 = xor i1 %126, true
  %128 = zext i1 %127 to i32
  %129 = sext i32 %128 to i64
  %130 = icmp ne i64 %129, 0
  br i1 %130, label %482, label %131

; <label>:131:                                    ; preds = %124
  %132 = getelementptr inbounds %struct.wiphy, %struct.wiphy* %0, i32 0, i32 9
  %133 = load i16, i16* %132, align 2
  %134 = zext i16 %133 to i32
  %135 = icmp ne i32 %134, 0
  br i1 %135, label %136, label %148

; <label>:136:                                    ; preds = %131
  %137 = getelementptr inbounds %struct.wiphy, %struct.wiphy* %0, i32 0, i32 10
  %138 = load i32, i32* %137, align 4
  %139 = and i32 %138, 131072
  %140 = icmp ne i32 %139, 0
  br i1 %140, label %141, label %148

; <label>:141:                                    ; preds = %136
  %142 = getelementptr inbounds %struct.cfg80211_registered_device, %struct.cfg80211_registered_device* %3, i32 0, i32 0
  %143 = load %struct.cfg80211_ops*, %struct.cfg80211_ops** %142, align 32
  %144 = getelementptr inbounds %struct.cfg80211_ops, %struct.cfg80211_ops* %143, i32 0, i32 77
  %145 = load i32 (%struct.wiphy*, %struct.net_device*, %struct.cfg80211_acl_data*)*, i32 (%struct.wiphy*, %struct.net_device*, %struct.cfg80211_acl_data*)** %144, align 8
  %146 = icmp ne i32 (%struct.wiphy*, %struct.net_device*, %struct.cfg80211_acl_data*)* %145, null
  %147 = xor i1 %146, true
  br label %148

; <label>:148:                                    ; preds = %136, %141, %131
  %149 = phi i1 [ false, %131 ], [ true, %136 ], [ %147, %141 ]
  %150 = xor i1 %149, true
  %151 = xor i1 %150, true
  %152 = zext i1 %151 to i32
  %153 = icmp ne i32 %152, 0
  %154 = xor i1 %153, true
  %155 = xor i1 %154, true
  %156 = zext i1 %155 to i32
  %157 = sext i32 %156 to i64
  %158 = icmp ne i64 %157, 0
  br i1 %158, label %159, label %160

; <label>:159:                                    ; preds = %148
  call void @warn_slowpath_null(i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.3, i32 0, i32 0), i32 519)
  br label %160

; <label>:160:                                    ; preds = %159, %148
  %161 = icmp ne i32 %152, 0
  %162 = xor i1 %161, true
  %163 = xor i1 %162, true
  %164 = zext i1 %163 to i32
  %165 = sext i32 %164 to i64
  %166 = icmp ne i64 %165, 0
  br i1 %166, label %482, label %167

; <label>:167:                                    ; preds = %160
  %168 = getelementptr inbounds %struct.wiphy, %struct.wiphy* %0, i32 0, i32 2
  %169 = load %struct.mac_address*, %struct.mac_address** %168, align 16
  %170 = icmp ne %struct.mac_address* %169, null
  br i1 %170, label %171, label %183

; <label>:171:                                    ; preds = %167
  %172 = icmp uge i64 6, 64
  %173 = getelementptr inbounds %struct.wiphy, %struct.wiphy* %0, i32 0, i32 0
  %174 = getelementptr inbounds [6 x i8], [6 x i8]* %173, i32 0, i32 0
  %175 = getelementptr inbounds %struct.wiphy, %struct.wiphy* %0, i32 0, i32 2
  %176 = load %struct.mac_address*, %struct.mac_address** %175, align 16
  %177 = getelementptr inbounds %struct.mac_address, %struct.mac_address* %176, i64 0
  %178 = getelementptr inbounds %struct.mac_address, %struct.mac_address* %177, i32 0, i32 0
  %179 = getelementptr inbounds [6 x i8], [6 x i8]* %178, i32 0, i32 0
  br i1 %172, label %180, label %182

; <label>:180:                                    ; preds = %171
  %181 = call i8* @__memcpy(i8* %174, i8* %179, i64 6)
  br label %183

; <label>:182:                                    ; preds = %171
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %174, i8* %179, i64 6, i32 1, i1 false)
  br label %183

; <label>:183:                                    ; preds = %180, %182, %167
  %184 = icmp ne i16 %5, 0
  %185 = xor i1 %184, true
  %186 = xor i1 %185, true
  %187 = xor i1 %186, true
  %188 = zext i1 %187 to i32
  %189 = icmp ne i32 %188, 0
  %190 = xor i1 %189, true
  %191 = xor i1 %190, true
  %192 = zext i1 %191 to i32
  %193 = sext i32 %192 to i64
  %194 = icmp ne i64 %193, 0
  br i1 %194, label %195, label %196

; <label>:195:                                    ; preds = %183
  call void @warn_slowpath_null(i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.3, i32 0, i32 0), i32 526)
  br label %196

; <label>:196:                                    ; preds = %195, %183
  %197 = icmp ne i32 %188, 0
  %198 = xor i1 %197, true
  %199 = xor i1 %198, true
  %200 = zext i1 %199 to i32
  %201 = sext i32 %200 to i64
  %202 = zext i16 %5 to i32
  %203 = and i32 %202, 2046
  %204 = trunc i32 %203 to i16
  %205 = zext i16 %204 to i32
  %206 = getelementptr inbounds %struct.wiphy, %struct.wiphy* %0, i32 0, i32 8
  %207 = load i16, i16* %206, align 16
  %208 = zext i16 %207 to i32
  %209 = icmp ne i32 %205, %208
  %210 = xor i1 %209, true
  %211 = xor i1 %210, true
  %212 = zext i1 %211 to i32
  %213 = icmp ne i32 %212, 0
  %214 = xor i1 %213, true
  %215 = xor i1 %214, true
  %216 = zext i1 %215 to i32
  %217 = sext i32 %216 to i64
  %218 = icmp ne i64 %217, 0
  br i1 %218, label %219, label %220

; <label>:219:                                    ; preds = %196
  call void @warn_slowpath_null(i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.3, i32 0, i32 0), i32 528)
  br label %220

; <label>:220:                                    ; preds = %219, %196
  %221 = icmp ne i32 %212, 0
  %222 = xor i1 %221, true
  %223 = xor i1 %222, true
  %224 = zext i1 %223 to i32
  %225 = sext i32 %224 to i64
  %226 = icmp ne i64 %225, 0
  br i1 %226, label %227, label %229

; <label>:227:                                    ; preds = %220
  %228 = getelementptr inbounds %struct.wiphy, %struct.wiphy* %0, i32 0, i32 8
  store i16 %204, i16* %228, align 16
  br label %229

; <label>:229:                                    ; preds = %227, %220
  %230 = call i32 @wiphy_verify_combinations(%struct.wiphy* %0)
  %231 = icmp ne i32 %230, 0
  br i1 %231, label %482, label %232

; <label>:232:                                    ; preds = %229, %370
  %.04 = phi i8 [ %.1, %370 ], [ 0, %229 ]
  %.02 = phi i32 [ %371, %370 ], [ 0, %229 ]
  %233 = icmp ult i32 %.02, 3
  br i1 %233, label %234, label %372

; <label>:234:                                    ; preds = %232
  %235 = getelementptr inbounds %struct.wiphy, %struct.wiphy* %0, i32 0, i32 39
  %236 = zext i32 %.02 to i64
  %237 = getelementptr inbounds [3 x %struct.ieee80211_supported_band*], [3 x %struct.ieee80211_supported_band*]* %235, i64 0, i64 %236
  %238 = load %struct.ieee80211_supported_band*, %struct.ieee80211_supported_band** %237, align 8
  %239 = icmp ne %struct.ieee80211_supported_band* %238, null
  br i1 %239, label %240, label %370

; <label>:240:                                    ; preds = %234
  %241 = getelementptr inbounds %struct.ieee80211_supported_band, %struct.ieee80211_supported_band* %238, i32 0, i32 2
  store i32 %.02, i32* %241, align 8
  %242 = getelementptr inbounds %struct.ieee80211_supported_band, %struct.ieee80211_supported_band* %238, i32 0, i32 3
  %243 = load i32, i32* %242, align 4
  %244 = icmp ne i32 %243, 0
  %245 = xor i1 %244, true
  %246 = xor i1 %245, true
  %247 = xor i1 %246, true
  %248 = zext i1 %247 to i32
  %249 = icmp ne i32 %248, 0
  %250 = xor i1 %249, true
  %251 = xor i1 %250, true
  %252 = zext i1 %251 to i32
  %253 = sext i32 %252 to i64
  %254 = icmp ne i64 %253, 0
  br i1 %254, label %255, label %256

; <label>:255:                                    ; preds = %240
  call void @warn_slowpath_null(i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.3, i32 0, i32 0), i32 542)
  br label %256

; <label>:256:                                    ; preds = %255, %240
  %257 = icmp ne i32 %248, 0
  %258 = xor i1 %257, true
  %259 = xor i1 %258, true
  %260 = zext i1 %259 to i32
  %261 = sext i32 %260 to i64
  %262 = icmp ne i64 %261, 0
  br i1 %262, label %482, label %263

; <label>:263:                                    ; preds = %256
  %264 = icmp ne i32 %.02, 2
  br i1 %264, label %265, label %270

; <label>:265:                                    ; preds = %263
  %266 = getelementptr inbounds %struct.ieee80211_supported_band, %struct.ieee80211_supported_band* %238, i32 0, i32 4
  %267 = load i32, i32* %266, align 8
  %268 = icmp ne i32 %267, 0
  %269 = xor i1 %268, true
  br label %270

; <label>:270:                                    ; preds = %265, %263
  %271 = phi i1 [ false, %263 ], [ %269, %265 ]
  %272 = xor i1 %271, true
  %273 = xor i1 %272, true
  %274 = zext i1 %273 to i32
  %275 = icmp ne i32 %274, 0
  %276 = xor i1 %275, true
  %277 = xor i1 %276, true
  %278 = zext i1 %277 to i32
  %279 = sext i32 %278 to i64
  %280 = icmp ne i64 %279, 0
  br i1 %280, label %281, label %282

; <label>:281:                                    ; preds = %270
  call void @warn_slowpath_null(i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.3, i32 0, i32 0), i32 549)
  br label %282

; <label>:282:                                    ; preds = %281, %270
  %283 = icmp ne i32 %274, 0
  %284 = xor i1 %283, true
  %285 = xor i1 %284, true
  %286 = zext i1 %285 to i32
  %287 = sext i32 %286 to i64
  %288 = icmp ne i64 %287, 0
  br i1 %288, label %482, label %289

; <label>:289:                                    ; preds = %282
  %290 = load i8, i8* @cfg80211_disable_40mhz_24ghz, align 1
  %291 = trunc i8 %290 to i1
  %292 = icmp eq i32 %.02, 0
  %or.cond = and i1 %291, %292
  br i1 %or.cond, label %293, label %311

; <label>:293:                                    ; preds = %289
  %294 = getelementptr inbounds %struct.ieee80211_supported_band, %struct.ieee80211_supported_band* %238, i32 0, i32 5
  %295 = getelementptr inbounds %struct.ieee80211_sta_ht_cap, %struct.ieee80211_sta_ht_cap* %294, i32 0, i32 1
  %296 = load i8, i8* %295, align 2
  %297 = trunc i8 %296 to i1
  br i1 %297, label %298, label %311

; <label>:298:                                    ; preds = %293
  %299 = getelementptr inbounds %struct.ieee80211_supported_band, %struct.ieee80211_supported_band* %238, i32 0, i32 5
  %300 = getelementptr inbounds %struct.ieee80211_sta_ht_cap, %struct.ieee80211_sta_ht_cap* %299, i32 0, i32 0
  %301 = load i16, i16* %300, align 4
  %302 = zext i16 %301 to i32
  %303 = and i32 %302, -3
  %304 = trunc i32 %303 to i16
  store i16 %304, i16* %300, align 4
  %305 = getelementptr inbounds %struct.ieee80211_supported_band, %struct.ieee80211_supported_band* %238, i32 0, i32 5
  %306 = getelementptr inbounds %struct.ieee80211_sta_ht_cap, %struct.ieee80211_sta_ht_cap* %305, i32 0, i32 0
  %307 = load i16, i16* %306, align 4
  %308 = zext i16 %307 to i32
  %309 = and i32 %308, -65
  %310 = trunc i32 %309 to i16
  store i16 %310, i16* %306, align 4
  br label %311

; <label>:311:                                    ; preds = %298, %293, %289
  %312 = getelementptr inbounds %struct.ieee80211_supported_band, %struct.ieee80211_supported_band* %238, i32 0, i32 4
  %313 = load i32, i32* %312, align 8
  %314 = icmp sgt i32 %313, 32
  %315 = xor i1 %314, true
  %316 = xor i1 %315, true
  %317 = zext i1 %316 to i32
  %318 = icmp ne i32 %317, 0
  %319 = xor i1 %318, true
  %320 = xor i1 %319, true
  %321 = zext i1 %320 to i32
  %322 = sext i32 %321 to i64
  %323 = icmp ne i64 %322, 0
  br i1 %323, label %324, label %325

; <label>:324:                                    ; preds = %311
  call void @warn_slowpath_null(i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.3, i32 0, i32 0), i32 569)
  br label %325

; <label>:325:                                    ; preds = %324, %311
  %326 = icmp ne i32 %317, 0
  %327 = xor i1 %326, true
  %328 = xor i1 %327, true
  %329 = zext i1 %328 to i32
  %330 = sext i32 %329 to i64
  %331 = icmp ne i64 %330, 0
  br i1 %331, label %482, label %332

; <label>:332:                                    ; preds = %325, %336
  %.03 = phi i32 [ %369, %336 ], [ 0, %325 ]
  %333 = getelementptr inbounds %struct.ieee80211_supported_band, %struct.ieee80211_supported_band* %238, i32 0, i32 3
  %334 = load i32, i32* %333, align 4
  %335 = icmp slt i32 %.03, %334
  br i1 %335, label %336, label %370

; <label>:336:                                    ; preds = %332
  %337 = getelementptr inbounds %struct.ieee80211_supported_band, %struct.ieee80211_supported_band* %238, i32 0, i32 0
  %338 = load %struct.ieee80211_channel*, %struct.ieee80211_channel** %337, align 8
  %339 = sext i32 %.03 to i64
  %340 = getelementptr inbounds %struct.ieee80211_channel, %struct.ieee80211_channel* %338, i64 %339
  %341 = getelementptr inbounds %struct.ieee80211_channel, %struct.ieee80211_channel* %340, i32 0, i32 3
  %342 = load i32, i32* %341, align 8
  %343 = getelementptr inbounds %struct.ieee80211_supported_band, %struct.ieee80211_supported_band* %238, i32 0, i32 0
  %344 = load %struct.ieee80211_channel*, %struct.ieee80211_channel** %343, align 8
  %345 = sext i32 %.03 to i64
  %346 = getelementptr inbounds %struct.ieee80211_channel, %struct.ieee80211_channel* %344, i64 %345
  %347 = getelementptr inbounds %struct.ieee80211_channel, %struct.ieee80211_channel* %346, i32 0, i32 8
  store i32 %342, i32* %347, align 4
  %348 = getelementptr inbounds %struct.ieee80211_supported_band, %struct.ieee80211_supported_band* %238, i32 0, i32 0
  %349 = load %struct.ieee80211_channel*, %struct.ieee80211_channel** %348, align 8
  %350 = sext i32 %.03 to i64
  %351 = getelementptr inbounds %struct.ieee80211_channel, %struct.ieee80211_channel* %349, i64 %350
  %352 = getelementptr inbounds %struct.ieee80211_channel, %struct.ieee80211_channel* %351, i32 0, i32 9
  store i32 2147483647, i32* %352, align 8
  %353 = getelementptr inbounds %struct.ieee80211_supported_band, %struct.ieee80211_supported_band* %238, i32 0, i32 0
  %354 = load %struct.ieee80211_channel*, %struct.ieee80211_channel** %353, align 8
  %355 = sext i32 %.03 to i64
  %356 = getelementptr inbounds %struct.ieee80211_channel, %struct.ieee80211_channel* %354, i64 %355
  %357 = getelementptr inbounds %struct.ieee80211_channel, %struct.ieee80211_channel* %356, i32 0, i32 5
  %358 = load i32, i32* %357, align 8
  %359 = getelementptr inbounds %struct.ieee80211_supported_band, %struct.ieee80211_supported_band* %238, i32 0, i32 0
  %360 = load %struct.ieee80211_channel*, %struct.ieee80211_channel** %359, align 8
  %361 = sext i32 %.03 to i64
  %362 = getelementptr inbounds %struct.ieee80211_channel, %struct.ieee80211_channel* %360, i64 %361
  %363 = getelementptr inbounds %struct.ieee80211_channel, %struct.ieee80211_channel* %362, i32 0, i32 10
  store i32 %358, i32* %363, align 4
  %364 = getelementptr inbounds %struct.ieee80211_supported_band, %struct.ieee80211_supported_band* %238, i32 0, i32 0
  %365 = load %struct.ieee80211_channel*, %struct.ieee80211_channel** %364, align 8
  %366 = sext i32 %.03 to i64
  %367 = getelementptr inbounds %struct.ieee80211_channel, %struct.ieee80211_channel* %365, i64 %366
  %368 = getelementptr inbounds %struct.ieee80211_channel, %struct.ieee80211_channel* %367, i32 0, i32 0
  store i32 %.02, i32* %368, align 8
  %369 = add nsw i32 %.03, 1
  br label %332

; <label>:370:                                    ; preds = %332, %234
  %.1 = phi i8 [ %.04, %234 ], [ 1, %332 ]
  %371 = add i32 %.02, 1
  br label %232

; <label>:372:                                    ; preds = %232
  %373 = trunc i8 %.04 to i1
  br i1 %373, label %388, label %374

; <label>:374:                                    ; preds = %372
  %375 = icmp ne i32 1, 0
  %376 = xor i1 %375, true
  %377 = xor i1 %376, true
  %378 = zext i1 %377 to i32
  %379 = sext i32 %378 to i64
  %380 = icmp ne i64 %379, 0
  br i1 %380, label %381, label %382

; <label>:381:                                    ; preds = %374
  call void @warn_slowpath_null(i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.3, i32 0, i32 0), i32 585)
  br label %382

; <label>:382:                                    ; preds = %381, %374
  %383 = icmp ne i32 1, 0
  %384 = xor i1 %383, true
  %385 = xor i1 %384, true
  %386 = zext i1 %385 to i32
  %387 = sext i32 %386 to i64
  br label %482

; <label>:388:                                    ; preds = %372
  %389 = getelementptr inbounds %struct.cfg80211_registered_device, %struct.cfg80211_registered_device* %3, i32 0, i32 34
  %390 = getelementptr inbounds %struct.wiphy, %struct.wiphy* %389, i32 0, i32 29
  %391 = getelementptr inbounds %struct.wiphy_wowlan_support, %struct.wiphy_wowlan_support* %390, i32 0, i32 1
  %392 = load i32, i32* %391, align 4
  %393 = icmp ne i32 %392, 0
  br i1 %393, label %394, label %429

; <label>:394:                                    ; preds = %388
  %395 = getelementptr inbounds %struct.cfg80211_registered_device, %struct.cfg80211_registered_device* %3, i32 0, i32 34
  %396 = getelementptr inbounds %struct.wiphy, %struct.wiphy* %395, i32 0, i32 29
  %397 = getelementptr inbounds %struct.wiphy_wowlan_support, %struct.wiphy_wowlan_support* %396, i32 0, i32 3
  %398 = load i32, i32* %397, align 4
  %399 = icmp ne i32 %398, 0
  br i1 %399, label %400, label %410

; <label>:400:                                    ; preds = %394
  %401 = getelementptr inbounds %struct.cfg80211_registered_device, %struct.cfg80211_registered_device* %3, i32 0, i32 34
  %402 = getelementptr inbounds %struct.wiphy, %struct.wiphy* %401, i32 0, i32 29
  %403 = getelementptr inbounds %struct.wiphy_wowlan_support, %struct.wiphy_wowlan_support* %402, i32 0, i32 3
  %404 = load i32, i32* %403, align 4
  %405 = getelementptr inbounds %struct.cfg80211_registered_device, %struct.cfg80211_registered_device* %3, i32 0, i32 34
  %406 = getelementptr inbounds %struct.wiphy, %struct.wiphy* %405, i32 0, i32 29
  %407 = getelementptr inbounds %struct.wiphy_wowlan_support, %struct.wiphy_wowlan_support* %406, i32 0, i32 2
  %408 = load i32, i32* %407, align 8
  %409 = icmp sgt i32 %404, %408
  br label %410

; <label>:410:                                    ; preds = %400, %394
  %411 = phi i1 [ true, %394 ], [ %409, %400 ]
  %412 = xor i1 %411, true
  %413 = xor i1 %412, true
  %414 = zext i1 %413 to i32
  %415 = icmp ne i32 %414, 0
  %416 = xor i1 %415, true
  %417 = xor i1 %416, true
  %418 = zext i1 %417 to i32
  %419 = sext i32 %418 to i64
  %420 = icmp ne i64 %419, 0
  br i1 %420, label %421, label %422

; <label>:421:                                    ; preds = %410
  call void @warn_slowpath_null(i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.3, i32 0, i32 0), i32 593)
  br label %422

; <label>:422:                                    ; preds = %421, %410
  %423 = icmp ne i32 %414, 0
  %424 = xor i1 %423, true
  %425 = xor i1 %424, true
  %426 = zext i1 %425 to i32
  %427 = sext i32 %426 to i64
  %428 = icmp ne i64 %427, 0
  br i1 %428, label %482, label %429

; <label>:429:                                    ; preds = %422, %388
  call void @ieee80211_set_bitrate_flags(%struct.wiphy* %0)
  call void @mutex_lock(%struct.mutex* @cfg80211_mutex)
  %430 = getelementptr inbounds %struct.cfg80211_registered_device, %struct.cfg80211_registered_device* %3, i32 0, i32 34
  %431 = getelementptr inbounds %struct.wiphy, %struct.wiphy* %430, i32 0, i32 42
  %432 = call i32 @device_add(%struct.device* %431)
  %433 = icmp ne i32 %432, 0
  br i1 %433, label %434, label %435

; <label>:434:                                    ; preds = %429
  call void @mutex_unlock(%struct.mutex* @cfg80211_mutex)
  br label %482

; <label>:435:                                    ; preds = %429
  call void @wiphy_regulatory_register(%struct.wiphy* %0)
  %436 = getelementptr inbounds %struct.cfg80211_registered_device, %struct.cfg80211_registered_device* %3, i32 0, i32 1
  call void @list_add_rcu(%struct.list_head* %436, %struct.list_head* @cfg80211_rdev_list)
  %437 = load i32, i32* @cfg80211_rdev_list_generation, align 4
  %438 = add nsw i32 %437, 1
  store i32 %438, i32* @cfg80211_rdev_list_generation, align 4
  %439 = getelementptr inbounds %struct.cfg80211_registered_device, %struct.cfg80211_registered_device* %3, i32 0, i32 34
  %440 = call i8* @wiphy_name(%struct.wiphy* %439)
  %441 = load %struct.dentry*, %struct.dentry** @ieee80211_debugfs_dir, align 8
  %442 = call %struct.dentry* @debugfs_create_dir(i8* %440, %struct.dentry* %441)
  %443 = getelementptr inbounds %struct.cfg80211_registered_device, %struct.cfg80211_registered_device* %3, i32 0, i32 34
  %444 = getelementptr inbounds %struct.wiphy, %struct.wiphy* %443, i32 0, i32 44
  store %struct.dentry* %442, %struct.dentry** %444, align 16
  %445 = getelementptr inbounds %struct.cfg80211_registered_device, %struct.cfg80211_registered_device* %3, i32 0, i32 34
  %446 = getelementptr inbounds %struct.wiphy, %struct.wiphy* %445, i32 0, i32 44
  %447 = load %struct.dentry*, %struct.dentry** %446, align 16
  %448 = bitcast %struct.dentry* %447 to i8*
  %449 = call i64 @IS_ERR(i8* %448)
  %450 = icmp ne i64 %449, 0
  br i1 %450, label %451, label %454

; <label>:451:                                    ; preds = %435
  %452 = getelementptr inbounds %struct.cfg80211_registered_device, %struct.cfg80211_registered_device* %3, i32 0, i32 34
  %453 = getelementptr inbounds %struct.wiphy, %struct.wiphy* %452, i32 0, i32 44
  store %struct.dentry* null, %struct.dentry** %453, align 16
  br label %454

; <label>:454:                                    ; preds = %451, %435
  %455 = getelementptr inbounds %struct.wiphy, %struct.wiphy* %0, i32 0, i32 10
  %456 = load i32, i32* %455, align 4
  %457 = and i32 %456, 1
  %458 = icmp ne i32 %457, 0
  br i1 %458, label %459, label %467

; <label>:459:                                    ; preds = %454
  %460 = call i32 @get_wiphy_idx(%struct.wiphy* %0)
  %461 = getelementptr inbounds %struct.regulatory_request, %struct.regulatory_request* %2, i32 0, i32 1
  store i32 %460, i32* %461, align 8
  %462 = getelementptr inbounds %struct.regulatory_request, %struct.regulatory_request* %2, i32 0, i32 2
  store i32 2, i32* %462, align 4
  %463 = getelementptr inbounds %struct.regulatory_request, %struct.regulatory_request* %2, i32 0, i32 4
  %464 = getelementptr inbounds [2 x i8], [2 x i8]* %463, i64 0, i64 0
  store i8 57, i8* %464, align 4
  %465 = getelementptr inbounds %struct.regulatory_request, %struct.regulatory_request* %2, i32 0, i32 4
  %466 = getelementptr inbounds [2 x i8], [2 x i8]* %465, i64 0, i64 1
  store i8 57, i8* %466, align 1
  call void @nl80211_send_reg_change_event(%struct.regulatory_request* %2)
  br label %467

; <label>:467:                                    ; preds = %459, %454
  call void @cfg80211_debugfs_rdev_add(%struct.cfg80211_registered_device* %3)
  call void @mutex_unlock(%struct.mutex* @cfg80211_mutex)
  %468 = getelementptr inbounds %struct.cfg80211_registered_device, %struct.cfg80211_registered_device* %3, i32 0, i32 4
  %469 = load %struct.rfkill*, %struct.rfkill** %468, align 8
  %470 = call i32 @rfkill_register(%struct.rfkill* %469)
  %471 = icmp ne i32 %470, 0
  br i1 %471, label %472, label %479

; <label>:472:                                    ; preds = %467
  %473 = getelementptr inbounds %struct.cfg80211_registered_device, %struct.cfg80211_registered_device* %3, i32 0, i32 34
  %474 = getelementptr inbounds %struct.wiphy, %struct.wiphy* %473, i32 0, i32 42
  call void @device_del(%struct.device* %474)
  call void @mutex_lock(%struct.mutex* @cfg80211_mutex)
  %475 = getelementptr inbounds %struct.cfg80211_registered_device, %struct.cfg80211_registered_device* %3, i32 0, i32 34
  %476 = getelementptr inbounds %struct.wiphy, %struct.wiphy* %475, i32 0, i32 44
  %477 = load %struct.dentry*, %struct.dentry** %476, align 16
  call void @debugfs_remove_recursive(%struct.dentry* %477)
  %478 = getelementptr inbounds %struct.cfg80211_registered_device, %struct.cfg80211_registered_device* %3, i32 0, i32 1
  call void @list_del_rcu(%struct.list_head* %478)
  call void @wiphy_regulatory_deregister(%struct.wiphy* %0)
  call void @mutex_unlock(%struct.mutex* @cfg80211_mutex)
  br label %482

; <label>:479:                                    ; preds = %467
  call void @rtnl_lock()
  %480 = getelementptr inbounds %struct.cfg80211_registered_device, %struct.cfg80211_registered_device* %3, i32 0, i32 34
  %481 = getelementptr inbounds %struct.wiphy, %struct.wiphy* %480, i32 0, i32 43
  store i8 1, i8* %481, align 8
  call void @rtnl_unlock()
  br label %482

; <label>:482:                                    ; preds = %422, %325, %282, %256, %229, %160, %124, %87, %59, %30, %479, %472, %434, %382
  %.0 = phi i32 [ %432, %434 ], [ %470, %472 ], [ 0, %479 ], [ -22, %382 ], [ -22, %30 ], [ -22, %59 ], [ -22, %87 ], [ -22, %124 ], [ -22, %160 ], [ %230, %229 ], [ -22, %256 ], [ -22, %282 ], [ -22, %325 ], [ -22, %422 ]
  ret i32 %.0
}

; Function Attrs: noinline nounwind uwtable
define internal zeroext i1 @is_zero_ether_addr(i8*) #0 {
  %2 = getelementptr inbounds i8, i8* %0, i64 0
  %3 = load i8, i8* %2, align 1
  %4 = zext i8 %3 to i32
  %5 = getelementptr inbounds i8, i8* %0, i64 1
  %6 = load i8, i8* %5, align 1
  %7 = zext i8 %6 to i32
  %8 = or i32 %4, %7
  %9 = getelementptr inbounds i8, i8* %0, i64 2
  %10 = load i8, i8* %9, align 1
  %11 = zext i8 %10 to i32
  %12 = or i32 %8, %11
  %13 = getelementptr inbounds i8, i8* %0, i64 3
  %14 = load i8, i8* %13, align 1
  %15 = zext i8 %14 to i32
  %16 = or i32 %12, %15
  %17 = getelementptr inbounds i8, i8* %0, i64 4
  %18 = load i8, i8* %17, align 1
  %19 = zext i8 %18 to i32
  %20 = or i32 %16, %19
  %21 = getelementptr inbounds i8, i8* %0, i64 5
  %22 = load i8, i8* %21, align 1
  %23 = zext i8 %22 to i32
  %24 = or i32 %20, %23
  %25 = icmp ne i32 %24, 0
  %26 = xor i1 %25, true
  ret i1 %26
}

declare i32 @memcmp(i8*, i8*, i64) #1

declare i8* @__memcpy(i8*, i8*, i64) #1

; Function Attrs: noinline nounwind uwtable
define internal i32 @wiphy_verify_combinations(%struct.wiphy*) #0 {
  br label %2

; <label>:2:                                      ; preds = %308, %1
  %.03 = phi i32 [ 0, %1 ], [ %309, %308 ]
  %3 = getelementptr inbounds %struct.wiphy, %struct.wiphy* %0, i32 0, i32 5
  %4 = load i32, i32* %3, align 8
  %5 = icmp slt i32 %.03, %4
  br i1 %5, label %6, label %310

; <label>:6:                                      ; preds = %2
  %7 = getelementptr inbounds %struct.wiphy, %struct.wiphy* %0, i32 0, i32 4
  %8 = load %struct.ieee80211_iface_combination*, %struct.ieee80211_iface_combination** %7, align 32
  %9 = sext i32 %.03 to i64
  %10 = getelementptr inbounds %struct.ieee80211_iface_combination, %struct.ieee80211_iface_combination* %8, i64 %9
  %11 = getelementptr inbounds %struct.ieee80211_iface_combination, %struct.ieee80211_iface_combination* %10, i32 0, i32 2
  %12 = load i16, i16* %11, align 4
  %13 = zext i16 %12 to i32
  %14 = icmp slt i32 %13, 2
  br i1 %14, label %15, label %20

; <label>:15:                                     ; preds = %6
  %16 = getelementptr inbounds %struct.ieee80211_iface_combination, %struct.ieee80211_iface_combination* %10, i32 0, i32 5
  %17 = load i8, i8* %16, align 8
  %18 = icmp ne i8 %17, 0
  %19 = xor i1 %18, true
  br label %20

; <label>:20:                                     ; preds = %15, %6
  %21 = phi i1 [ false, %6 ], [ %19, %15 ]
  %22 = xor i1 %21, true
  %23 = xor i1 %22, true
  %24 = zext i1 %23 to i32
  %25 = icmp ne i32 %24, 0
  %26 = xor i1 %25, true
  %27 = xor i1 %26, true
  %28 = zext i1 %27 to i32
  %29 = sext i32 %28 to i64
  %30 = icmp ne i64 %29, 0
  br i1 %30, label %31, label %32

; <label>:31:                                     ; preds = %20
  call void @warn_slowpath_null(i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.3, i32 0, i32 0), i32 425)
  br label %32

; <label>:32:                                     ; preds = %31, %20
  %33 = icmp ne i32 %24, 0
  %34 = xor i1 %33, true
  %35 = xor i1 %34, true
  %36 = zext i1 %35 to i32
  %37 = sext i32 %36 to i64
  %38 = icmp ne i64 %37, 0
  br i1 %38, label %310, label %39

; <label>:39:                                     ; preds = %32
  %40 = getelementptr inbounds %struct.ieee80211_iface_combination, %struct.ieee80211_iface_combination* %10, i32 0, i32 1
  %41 = load i32, i32* %40, align 8
  %42 = icmp ne i32 %41, 0
  %43 = xor i1 %42, true
  %44 = xor i1 %43, true
  %45 = xor i1 %44, true
  %46 = zext i1 %45 to i32
  %47 = icmp ne i32 %46, 0
  %48 = xor i1 %47, true
  %49 = xor i1 %48, true
  %50 = zext i1 %49 to i32
  %51 = sext i32 %50 to i64
  %52 = icmp ne i64 %51, 0
  br i1 %52, label %53, label %54

; <label>:53:                                     ; preds = %39
  call void @warn_slowpath_null(i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.3, i32 0, i32 0), i32 429)
  br label %54

; <label>:54:                                     ; preds = %53, %39
  %55 = icmp ne i32 %46, 0
  %56 = xor i1 %55, true
  %57 = xor i1 %56, true
  %58 = zext i1 %57 to i32
  %59 = sext i32 %58 to i64
  %60 = icmp ne i64 %59, 0
  br i1 %60, label %310, label %61

; <label>:61:                                     ; preds = %54
  %62 = getelementptr inbounds %struct.ieee80211_iface_combination, %struct.ieee80211_iface_combination* %10, i32 0, i32 1
  %63 = load i32, i32* %62, align 8
  %64 = icmp ugt i32 %63, 10
  %65 = xor i1 %64, true
  %66 = xor i1 %65, true
  %67 = zext i1 %66 to i32
  %68 = icmp ne i32 %67, 0
  %69 = xor i1 %68, true
  %70 = xor i1 %69, true
  %71 = zext i1 %70 to i32
  %72 = sext i32 %71 to i64
  %73 = icmp ne i64 %72, 0
  br i1 %73, label %74, label %75

; <label>:74:                                     ; preds = %61
  call void @warn_slowpath_null(i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.3, i32 0, i32 0), i32 437)
  br label %75

; <label>:75:                                     ; preds = %74, %61
  %76 = icmp ne i32 %67, 0
  %77 = xor i1 %76, true
  %78 = xor i1 %77, true
  %79 = zext i1 %78 to i32
  %80 = sext i32 %79 to i64
  %81 = icmp ne i64 %80, 0
  br i1 %81, label %310, label %82

; <label>:82:                                     ; preds = %75
  %83 = getelementptr inbounds %struct.ieee80211_iface_combination, %struct.ieee80211_iface_combination* %10, i32 0, i32 5
  %84 = load i8, i8* %83, align 8
  %85 = zext i8 %84 to i32
  %86 = icmp ne i32 %85, 0
  br i1 %86, label %87, label %91

; <label>:87:                                     ; preds = %82
  %88 = getelementptr inbounds %struct.ieee80211_iface_combination, %struct.ieee80211_iface_combination* %10, i32 0, i32 1
  %89 = load i32, i32* %88, align 8
  %90 = icmp ugt i32 %89, 1
  br label %91

; <label>:91:                                     ; preds = %87, %82
  %92 = phi i1 [ false, %82 ], [ %90, %87 ]
  %93 = xor i1 %92, true
  %94 = xor i1 %93, true
  %95 = zext i1 %94 to i32
  %96 = icmp ne i32 %95, 0
  %97 = xor i1 %96, true
  %98 = xor i1 %97, true
  %99 = zext i1 %98 to i32
  %100 = sext i32 %99 to i64
  %101 = icmp ne i64 %100, 0
  br i1 %101, label %102, label %103

; <label>:102:                                    ; preds = %91
  call void @warn_slowpath_null(i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.3, i32 0, i32 0), i32 442)
  br label %103

; <label>:103:                                    ; preds = %102, %91
  %104 = icmp ne i32 %95, 0
  %105 = xor i1 %104, true
  %106 = xor i1 %105, true
  %107 = zext i1 %106 to i32
  %108 = sext i32 %107 to i64
  %109 = icmp ne i64 %108, 0
  br i1 %109, label %310, label %110

; <label>:110:                                    ; preds = %103
  %111 = getelementptr inbounds %struct.ieee80211_iface_combination, %struct.ieee80211_iface_combination* %10, i32 0, i32 3
  %112 = load i8, i8* %111, align 2
  %113 = icmp ne i8 %112, 0
  %114 = xor i1 %113, true
  %115 = xor i1 %114, true
  %116 = xor i1 %115, true
  %117 = zext i1 %116 to i32
  %118 = icmp ne i32 %117, 0
  %119 = xor i1 %118, true
  %120 = xor i1 %119, true
  %121 = zext i1 %120 to i32
  %122 = sext i32 %121 to i64
  %123 = icmp ne i64 %122, 0
  br i1 %123, label %124, label %125

; <label>:124:                                    ; preds = %110
  call void @warn_slowpath_null(i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.3, i32 0, i32 0), i32 445)
  br label %125

; <label>:125:                                    ; preds = %124, %110
  %126 = icmp ne i32 %117, 0
  %127 = xor i1 %126, true
  %128 = xor i1 %127, true
  %129 = zext i1 %128 to i32
  %130 = sext i32 %129 to i64
  %131 = icmp ne i64 %130, 0
  br i1 %131, label %310, label %132

; <label>:132:                                    ; preds = %125, %284
  %.04 = phi i32 [ %285, %284 ], [ 0, %125 ]
  %.02 = phi i32 [ %259, %284 ], [ 0, %125 ]
  %.01 = phi i16 [ %169, %284 ], [ 0, %125 ]
  %133 = getelementptr inbounds %struct.ieee80211_iface_combination, %struct.ieee80211_iface_combination* %10, i32 0, i32 3
  %134 = load i8, i8* %133, align 2
  %135 = zext i8 %134 to i32
  %136 = icmp slt i32 %.04, %135
  br i1 %136, label %137, label %286

; <label>:137:                                    ; preds = %132
  %138 = getelementptr inbounds %struct.ieee80211_iface_combination, %struct.ieee80211_iface_combination* %10, i32 0, i32 0
  %139 = load %struct.ieee80211_iface_limit*, %struct.ieee80211_iface_limit** %138, align 8
  %140 = sext i32 %.04 to i64
  %141 = getelementptr inbounds %struct.ieee80211_iface_limit, %struct.ieee80211_iface_limit* %139, i64 %140
  %142 = getelementptr inbounds %struct.ieee80211_iface_limit, %struct.ieee80211_iface_limit* %141, i32 0, i32 1
  %143 = load i16, i16* %142, align 2
  %144 = zext i16 %143 to i32
  %145 = zext i16 %.01 to i32
  %146 = and i32 %144, %145
  %147 = icmp ne i32 %146, 0
  %148 = xor i1 %147, true
  %149 = xor i1 %148, true
  %150 = zext i1 %149 to i32
  %151 = icmp ne i32 %150, 0
  %152 = xor i1 %151, true
  %153 = xor i1 %152, true
  %154 = zext i1 %153 to i32
  %155 = sext i32 %154 to i64
  %156 = icmp ne i64 %155, 0
  br i1 %156, label %157, label %158

; <label>:157:                                    ; preds = %137
  call void @warn_slowpath_null(i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.3, i32 0, i32 0), i32 455)
  br label %158

; <label>:158:                                    ; preds = %157, %137
  %159 = icmp ne i32 %150, 0
  %160 = xor i1 %159, true
  %161 = xor i1 %160, true
  %162 = zext i1 %161 to i32
  %163 = sext i32 %162 to i64
  %164 = icmp ne i64 %163, 0
  br i1 %164, label %310, label %165

; <label>:165:                                    ; preds = %158
  %166 = zext i16 %143 to i32
  %167 = zext i16 %.01 to i32
  %168 = or i32 %167, %166
  %169 = trunc i32 %168 to i16
  %170 = getelementptr inbounds %struct.ieee80211_iface_combination, %struct.ieee80211_iface_combination* %10, i32 0, i32 0
  %171 = load %struct.ieee80211_iface_limit*, %struct.ieee80211_iface_limit** %170, align 8
  %172 = sext i32 %.04 to i64
  %173 = getelementptr inbounds %struct.ieee80211_iface_limit, %struct.ieee80211_iface_limit* %171, i64 %172
  %174 = getelementptr inbounds %struct.ieee80211_iface_limit, %struct.ieee80211_iface_limit* %173, i32 0, i32 0
  %175 = load i16, i16* %174, align 2
  %176 = icmp ne i16 %175, 0
  %177 = xor i1 %176, true
  %178 = xor i1 %177, true
  %179 = xor i1 %178, true
  %180 = zext i1 %179 to i32
  %181 = icmp ne i32 %180, 0
  %182 = xor i1 %181, true
  %183 = xor i1 %182, true
  %184 = zext i1 %183 to i32
  %185 = sext i32 %184 to i64
  %186 = icmp ne i64 %185, 0
  br i1 %186, label %187, label %188

; <label>:187:                                    ; preds = %165
  call void @warn_slowpath_null(i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.3, i32 0, i32 0), i32 459)
  br label %188

; <label>:188:                                    ; preds = %187, %165
  %189 = icmp ne i32 %180, 0
  %190 = xor i1 %189, true
  %191 = xor i1 %190, true
  %192 = zext i1 %191 to i32
  %193 = sext i32 %192 to i64
  %194 = icmp ne i64 %193, 0
  br i1 %194, label %310, label %195

; <label>:195:                                    ; preds = %188
  %196 = getelementptr inbounds %struct.wiphy, %struct.wiphy* %0, i32 0, i32 6
  %197 = load i16, i16* %196, align 4
  %198 = zext i16 %197 to i32
  %199 = zext i16 %143 to i32
  %200 = and i32 %198, %199
  %201 = icmp ne i32 %200, 0
  %202 = xor i1 %201, true
  %203 = xor i1 %202, true
  %204 = zext i1 %203 to i32
  %205 = icmp ne i32 %204, 0
  %206 = xor i1 %205, true
  %207 = xor i1 %206, true
  %208 = zext i1 %207 to i32
  %209 = sext i32 %208 to i64
  %210 = icmp ne i64 %209, 0
  br i1 %210, label %211, label %212

; <label>:211:                                    ; preds = %195
  call void @warn_slowpath_null(i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.3, i32 0, i32 0), i32 463)
  br label %212

; <label>:212:                                    ; preds = %211, %195
  %213 = icmp ne i32 %204, 0
  %214 = xor i1 %213, true
  %215 = xor i1 %214, true
  %216 = zext i1 %215 to i32
  %217 = sext i32 %216 to i64
  %218 = icmp ne i64 %217, 0
  br i1 %218, label %310, label %219

; <label>:219:                                    ; preds = %212
  %220 = zext i16 %143 to i64
  %221 = and i64 %220, 1024
  %222 = icmp ne i64 %221, 0
  br i1 %222, label %223, label %232

; <label>:223:                                    ; preds = %219
  %224 = getelementptr inbounds %struct.ieee80211_iface_combination, %struct.ieee80211_iface_combination* %10, i32 0, i32 0
  %225 = load %struct.ieee80211_iface_limit*, %struct.ieee80211_iface_limit** %224, align 8
  %226 = sext i32 %.04 to i64
  %227 = getelementptr inbounds %struct.ieee80211_iface_limit, %struct.ieee80211_iface_limit* %225, i64 %226
  %228 = getelementptr inbounds %struct.ieee80211_iface_limit, %struct.ieee80211_iface_limit* %227, i32 0, i32 0
  %229 = load i16, i16* %228, align 2
  %230 = zext i16 %229 to i32
  %231 = icmp sgt i32 %230, 1
  br label %232

; <label>:232:                                    ; preds = %223, %219
  %233 = phi i1 [ false, %219 ], [ %231, %223 ]
  %234 = xor i1 %233, true
  %235 = xor i1 %234, true
  %236 = zext i1 %235 to i32
  %237 = icmp ne i32 %236, 0
  %238 = xor i1 %237, true
  %239 = xor i1 %238, true
  %240 = zext i1 %239 to i32
  %241 = sext i32 %240 to i64
  %242 = icmp ne i64 %241, 0
  br i1 %242, label %243, label %244

; <label>:243:                                    ; preds = %232
  call void @warn_slowpath_null(i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.3, i32 0, i32 0), i32 468)
  br label %244

; <label>:244:                                    ; preds = %243, %232
  %245 = icmp ne i32 %236, 0
  %246 = xor i1 %245, true
  %247 = xor i1 %246, true
  %248 = zext i1 %247 to i32
  %249 = sext i32 %248 to i64
  %250 = icmp ne i64 %249, 0
  br i1 %250, label %310, label %251

; <label>:251:                                    ; preds = %244
  %252 = getelementptr inbounds %struct.ieee80211_iface_combination, %struct.ieee80211_iface_combination* %10, i32 0, i32 0
  %253 = load %struct.ieee80211_iface_limit*, %struct.ieee80211_iface_limit** %252, align 8
  %254 = sext i32 %.04 to i64
  %255 = getelementptr inbounds %struct.ieee80211_iface_limit, %struct.ieee80211_iface_limit* %253, i64 %254
  %256 = getelementptr inbounds %struct.ieee80211_iface_limit, %struct.ieee80211_iface_limit* %255, i32 0, i32 0
  %257 = load i16, i16* %256, align 2
  %258 = zext i16 %257 to i32
  %259 = add i32 %.02, %258
  %260 = getelementptr inbounds %struct.wiphy, %struct.wiphy* %0, i32 0, i32 8
  %261 = load i16, i16* %260, align 16
  %262 = zext i16 %261 to i32
  %263 = zext i16 %143 to i32
  %264 = and i32 %262, %263
  %265 = zext i16 %143 to i32
  %266 = icmp ne i32 %264, %265
  %267 = xor i1 %266, true
  %268 = xor i1 %267, true
  %269 = zext i1 %268 to i32
  %270 = icmp ne i32 %269, 0
  %271 = xor i1 %270, true
  %272 = xor i1 %271, true
  %273 = zext i1 %272 to i32
  %274 = sext i32 %273 to i64
  %275 = icmp ne i64 %274, 0
  br i1 %275, label %276, label %277

; <label>:276:                                    ; preds = %251
  call void @warn_slowpath_null(i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.3, i32 0, i32 0), i32 476)
  br label %277

; <label>:277:                                    ; preds = %276, %251
  %278 = icmp ne i32 %269, 0
  %279 = xor i1 %278, true
  %280 = xor i1 %279, true
  %281 = zext i1 %280 to i32
  %282 = sext i32 %281 to i64
  %283 = icmp ne i64 %282, 0
  br i1 %283, label %310, label %284

; <label>:284:                                    ; preds = %277
  %285 = add nsw i32 %.04, 1
  br label %132

; <label>:286:                                    ; preds = %132
  %287 = getelementptr inbounds %struct.ieee80211_iface_combination, %struct.ieee80211_iface_combination* %10, i32 0, i32 2
  %288 = load i16, i16* %287, align 4
  %289 = zext i16 %288 to i32
  %290 = icmp ult i32 %.02, %289
  %291 = xor i1 %290, true
  %292 = xor i1 %291, true
  %293 = zext i1 %292 to i32
  %294 = icmp ne i32 %293, 0
  %295 = xor i1 %294, true
  %296 = xor i1 %295, true
  %297 = zext i1 %296 to i32
  %298 = sext i32 %297 to i64
  %299 = icmp ne i64 %298, 0
  br i1 %299, label %300, label %301

; <label>:300:                                    ; preds = %286
  call void @warn_slowpath_null(i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.3, i32 0, i32 0), i32 481)
  br label %301

; <label>:301:                                    ; preds = %300, %286
  %302 = icmp ne i32 %293, 0
  %303 = xor i1 %302, true
  %304 = xor i1 %303, true
  %305 = zext i1 %304 to i32
  %306 = sext i32 %305 to i64
  %307 = icmp ne i64 %306, 0
  br i1 %307, label %310, label %308

; <label>:308:                                    ; preds = %301
  %309 = add nsw i32 %.03, 1
  br label %2

; <label>:310:                                    ; preds = %2, %301, %277, %244, %212, %188, %158, %125, %103, %75, %54, %32
  %.0 = phi i32 [ -22, %32 ], [ -22, %54 ], [ -22, %75 ], [ -22, %103 ], [ -22, %125 ], [ -22, %158 ], [ -22, %188 ], [ -22, %212 ], [ -22, %244 ], [ -22, %277 ], [ -22, %301 ], [ 0, %2 ]
  ret i32 %.0
}

declare void @ieee80211_set_bitrate_flags(%struct.wiphy*) #1

declare i32 @device_add(%struct.device*) #1

declare void @wiphy_regulatory_register(%struct.wiphy*) #1

; Function Attrs: noinline nounwind uwtable
define internal void @list_add_rcu(%struct.list_head*, %struct.list_head*) #0 {
  %3 = getelementptr inbounds %struct.list_head, %struct.list_head* %1, i32 0, i32 0
  %4 = load %struct.list_head*, %struct.list_head** %3, align 8
  call void @__list_add_rcu(%struct.list_head* %0, %struct.list_head* %1, %struct.list_head* %4)
  ret void
}

declare %struct.dentry* @debugfs_create_dir(i8*, %struct.dentry*) #1

; Function Attrs: noinline nounwind uwtable
define internal i8* @wiphy_name(%struct.wiphy*) #0 {
  %2 = getelementptr inbounds %struct.wiphy, %struct.wiphy* %0, i32 0, i32 42
  %3 = call i8* @dev_name(%struct.device* %2)
  ret i8* %3
}

; Function Attrs: noinline nounwind uwtable
define internal i64 @IS_ERR(i8*) #0 {
  %2 = ptrtoint i8* %0 to i64
  %3 = icmp uge i64 %2, -4095
  %4 = xor i1 %3, true
  %5 = xor i1 %4, true
  %6 = zext i1 %5 to i32
  %7 = sext i32 %6 to i64
  ret i64 %7
}

declare void @nl80211_send_reg_change_event(%struct.regulatory_request*) #1

; Function Attrs: noinline nounwind uwtable
define internal void @cfg80211_debugfs_rdev_add(%struct.cfg80211_registered_device*) #0 {
  ret void
}

declare i32 @rfkill_register(%struct.rfkill*) #1

declare void @device_del(%struct.device*) #1

declare void @debugfs_remove_recursive(%struct.dentry*) #1

; Function Attrs: noinline nounwind uwtable
define internal void @list_del_rcu(%struct.list_head*) #0 {
  call void @__list_del_entry(%struct.list_head* %0)
  %2 = getelementptr inbounds %struct.list_head, %struct.list_head* %0, i32 0, i32 1
  store %struct.list_head* bitcast (i8* getelementptr (i8, i8* inttoptr (i64 2097664 to i8*), i64 -2401263026318606336) to %struct.list_head*), %struct.list_head** %2, align 8
  ret void
}

declare void @wiphy_regulatory_deregister(%struct.wiphy*) #1

declare void @rtnl_lock() #1

declare void @rtnl_unlock() #1

; Function Attrs: noinline nounwind uwtable
define void @wiphy_rfkill_start_polling(%struct.wiphy*) #0 {
  %2 = call %struct.cfg80211_registered_device* @wiphy_to_dev(%struct.wiphy* %0)
  %3 = getelementptr inbounds %struct.cfg80211_registered_device, %struct.cfg80211_registered_device* %2, i32 0, i32 0
  %4 = load %struct.cfg80211_ops*, %struct.cfg80211_ops** %3, align 32
  %5 = getelementptr inbounds %struct.cfg80211_ops, %struct.cfg80211_ops* %4, i32 0, i32 46
  %6 = load void (%struct.wiphy*)*, void (%struct.wiphy*)** %5, align 8
  %7 = icmp ne void (%struct.wiphy*)* %6, null
  br i1 %7, label %8, label %13

; <label>:8:                                      ; preds = %1
  %9 = getelementptr inbounds %struct.cfg80211_registered_device, %struct.cfg80211_registered_device* %2, i32 0, i32 3
  %10 = getelementptr inbounds %struct.rfkill_ops, %struct.rfkill_ops* %9, i32 0, i32 0
  store void (%struct.rfkill*, i8*)* @cfg80211_rfkill_poll, void (%struct.rfkill*, i8*)** %10, align 32
  %11 = getelementptr inbounds %struct.cfg80211_registered_device, %struct.cfg80211_registered_device* %2, i32 0, i32 4
  %12 = load %struct.rfkill*, %struct.rfkill** %11, align 8
  call void @rfkill_resume_polling(%struct.rfkill* %12)
  br label %13

; <label>:13:                                     ; preds = %1, %8
  ret void
}

; Function Attrs: noinline nounwind uwtable
define internal void @cfg80211_rfkill_poll(%struct.rfkill*, i8*) #0 {
  %3 = bitcast i8* %1 to %struct.cfg80211_registered_device*
  call void @rdev_rfkill_poll(%struct.cfg80211_registered_device* %3)
  ret void
}

declare void @rfkill_resume_polling(%struct.rfkill*) #1

; Function Attrs: noinline nounwind uwtable
define void @wiphy_rfkill_stop_polling(%struct.wiphy*) #0 {
  %2 = call %struct.cfg80211_registered_device* @wiphy_to_dev(%struct.wiphy* %0)
  %3 = getelementptr inbounds %struct.cfg80211_registered_device, %struct.cfg80211_registered_device* %2, i32 0, i32 4
  %4 = load %struct.rfkill*, %struct.rfkill** %3, align 8
  call void @rfkill_pause_polling(%struct.rfkill* %4)
  ret void
}

declare void @rfkill_pause_polling(%struct.rfkill*) #1

; Function Attrs: noinline nounwind uwtable
define void @wiphy_unregister(%struct.wiphy*) #0 {
  %2 = alloca %struct.__wait_queue, align 8
  %3 = call %struct.cfg80211_registered_device* @wiphy_to_dev(%struct.wiphy* %0)
  call void @rtnl_lock()
  %4 = getelementptr inbounds %struct.cfg80211_registered_device, %struct.cfg80211_registered_device* %3, i32 0, i32 34
  %5 = getelementptr inbounds %struct.wiphy, %struct.wiphy* %4, i32 0, i32 43
  store i8 0, i8* %5, align 8
  call void @rtnl_unlock()
  %6 = getelementptr inbounds %struct.cfg80211_registered_device, %struct.cfg80211_registered_device* %3, i32 0, i32 4
  %7 = load %struct.rfkill*, %struct.rfkill** %6, align 8
  call void @rfkill_unregister(%struct.rfkill* %7)
  call void @mutex_lock(%struct.mutex* @cfg80211_mutex)
  %8 = getelementptr inbounds %struct.cfg80211_registered_device, %struct.cfg80211_registered_device* %3, i32 0, i32 9
  call void @mutex_lock(%struct.mutex* %8)
  %9 = getelementptr inbounds %struct.cfg80211_registered_device, %struct.cfg80211_registered_device* %3, i32 0, i32 13
  %10 = load i32, i32* %9, align 16
  %11 = getelementptr inbounds %struct.cfg80211_registered_device, %struct.cfg80211_registered_device* %3, i32 0, i32 9
  call void @mutex_unlock(%struct.mutex* %11)
  %12 = icmp eq i32 %10, 0
  %13 = zext i1 %12 to i32
  %14 = icmp ne i32 %13, 0
  br i1 %14, label %38, label %15

; <label>:15:                                     ; preds = %1
  %16 = getelementptr inbounds %struct.__wait_queue, %struct.__wait_queue* %2, i32 0, i32 0
  store i32 0, i32* %16, align 8
  %17 = getelementptr inbounds %struct.__wait_queue, %struct.__wait_queue* %2, i32 0, i32 1
  %18 = call %struct.task_struct* asm "movq %gs:${1:P},$0", "=r,im,~{dirflag},~{fpsr},~{flags}"(%struct.task_struct** @current_task) #4, !srcloc !3
  %19 = bitcast %struct.task_struct* %18 to i8*
  store i8* %19, i8** %17, align 8
  %20 = getelementptr inbounds %struct.__wait_queue, %struct.__wait_queue* %2, i32 0, i32 2
  store i32 (%struct.__wait_queue*, i32, i32, i8*)* @autoremove_wake_function, i32 (%struct.__wait_queue*, i32, i32, i8*)** %20, align 8
  %21 = getelementptr inbounds %struct.__wait_queue, %struct.__wait_queue* %2, i32 0, i32 3
  %22 = getelementptr inbounds %struct.list_head, %struct.list_head* %21, i32 0, i32 0
  %23 = getelementptr inbounds %struct.__wait_queue, %struct.__wait_queue* %2, i32 0, i32 3
  store %struct.list_head* %23, %struct.list_head** %22, align 8
  %24 = getelementptr inbounds %struct.list_head, %struct.list_head* %21, i32 0, i32 1
  %25 = getelementptr inbounds %struct.__wait_queue, %struct.__wait_queue* %2, i32 0, i32 3
  store %struct.list_head* %25, %struct.list_head** %24, align 8
  br label %26

; <label>:26:                                     ; preds = %35, %15
  %27 = getelementptr inbounds %struct.cfg80211_registered_device, %struct.cfg80211_registered_device* %3, i32 0, i32 14
  call void @prepare_to_wait(%struct.__wait_queue_head* %27, %struct.__wait_queue* %2, i32 2)
  %28 = getelementptr inbounds %struct.cfg80211_registered_device, %struct.cfg80211_registered_device* %3, i32 0, i32 9
  call void @mutex_lock(%struct.mutex* %28)
  %29 = getelementptr inbounds %struct.cfg80211_registered_device, %struct.cfg80211_registered_device* %3, i32 0, i32 13
  %30 = load i32, i32* %29, align 16
  %31 = getelementptr inbounds %struct.cfg80211_registered_device, %struct.cfg80211_registered_device* %3, i32 0, i32 9
  call void @mutex_unlock(%struct.mutex* %31)
  %32 = icmp eq i32 %30, 0
  %33 = zext i1 %32 to i32
  %34 = icmp ne i32 %33, 0
  br i1 %34, label %36, label %35

; <label>:35:                                     ; preds = %26
  call void @schedule()
  br label %26

; <label>:36:                                     ; preds = %26
  %37 = getelementptr inbounds %struct.cfg80211_registered_device, %struct.cfg80211_registered_device* %3, i32 0, i32 14
  call void @finish_wait(%struct.__wait_queue_head* %37, %struct.__wait_queue* %2)
  br label %38

; <label>:38:                                     ; preds = %1, %36
  %39 = getelementptr inbounds %struct.cfg80211_registered_device, %struct.cfg80211_registered_device* %3, i32 0, i32 9
  call void @mutex_lock(%struct.mutex* %39)
  %40 = getelementptr inbounds %struct.cfg80211_registered_device, %struct.cfg80211_registered_device* %3, i32 0, i32 10
  %41 = call i32 @list_empty(%struct.list_head* %40)
  %42 = icmp ne i32 %41, 0
  %43 = xor i1 %42, true
  %44 = xor i1 %43, true
  %45 = xor i1 %44, true
  %46 = zext i1 %45 to i32
  %47 = sext i32 %46 to i64
  %48 = icmp ne i64 %47, 0
  br i1 %48, label %49, label %51

; <label>:49:                                     ; preds = %38
  call void asm sideeffect "1:\09ud2\0A.pushsection __bug_table,\22a\22\0A2:\09.long 1b - 2b, ${0:c} - 2b\0A\09.word ${1:c}, 0\0A\09.org 2b+${2:c}\0A.popsection", "i,i,i,~{dirflag},~{fpsr},~{flags}"(i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.3, i32 0, i32 0), i32 699, i64 12) #3, !srcloc !4
  br label %50

; <label>:50:                                     ; preds = %50, %49
  br label %50

; <label>:51:                                     ; preds = %38
  %52 = getelementptr inbounds %struct.cfg80211_registered_device, %struct.cfg80211_registered_device* %3, i32 0, i32 9
  call void @mutex_unlock(%struct.mutex* %52)
  %53 = getelementptr inbounds %struct.cfg80211_registered_device, %struct.cfg80211_registered_device* %3, i32 0, i32 34
  %54 = getelementptr inbounds %struct.wiphy, %struct.wiphy* %53, i32 0, i32 44
  %55 = load %struct.dentry*, %struct.dentry** %54, align 16
  call void @debugfs_remove_recursive(%struct.dentry* %55)
  %56 = getelementptr inbounds %struct.cfg80211_registered_device, %struct.cfg80211_registered_device* %3, i32 0, i32 1
  call void @list_del_rcu(%struct.list_head* %56)
  call void @synchronize_rcu()
  call void @cfg80211_lock_rdev(%struct.cfg80211_registered_device* %3)
  call void @cfg80211_unlock_rdev(%struct.cfg80211_registered_device* %3)
  call void @wiphy_regulatory_deregister(%struct.wiphy* %0)
  %57 = load i32, i32* @cfg80211_rdev_list_generation, align 4
  %58 = add nsw i32 %57, 1
  store i32 %58, i32* @cfg80211_rdev_list_generation, align 4
  %59 = getelementptr inbounds %struct.cfg80211_registered_device, %struct.cfg80211_registered_device* %3, i32 0, i32 34
  %60 = getelementptr inbounds %struct.wiphy, %struct.wiphy* %59, i32 0, i32 42
  call void @device_del(%struct.device* %60)
  call void @mutex_unlock(%struct.mutex* @cfg80211_mutex)
  %61 = getelementptr inbounds %struct.cfg80211_registered_device, %struct.cfg80211_registered_device* %3, i32 0, i32 26
  %62 = call zeroext i1 @flush_work(%struct.work_struct* %61)
  %63 = getelementptr inbounds %struct.cfg80211_registered_device, %struct.cfg80211_registered_device* %3, i32 0, i32 29
  %64 = call zeroext i1 @cancel_work_sync(%struct.work_struct* %63)
  %65 = getelementptr inbounds %struct.cfg80211_registered_device, %struct.cfg80211_registered_device* %3, i32 0, i32 30
  %66 = call zeroext i1 @flush_work(%struct.work_struct* %65)
  %67 = getelementptr inbounds %struct.cfg80211_registered_device, %struct.cfg80211_registered_device* %3, i32 0, i32 32
  %68 = call zeroext i1 @cancel_delayed_work_sync(%struct.delayed_work* %67)
  %69 = getelementptr inbounds %struct.cfg80211_registered_device, %struct.cfg80211_registered_device* %3, i32 0, i32 31
  %70 = load %struct.cfg80211_wowlan*, %struct.cfg80211_wowlan** %69, align 16
  %71 = icmp ne %struct.cfg80211_wowlan* %70, null
  br i1 %71, label %72, label %79

; <label>:72:                                     ; preds = %51
  %73 = getelementptr inbounds %struct.cfg80211_registered_device, %struct.cfg80211_registered_device* %3, i32 0, i32 0
  %74 = load %struct.cfg80211_ops*, %struct.cfg80211_ops** %73, align 32
  %75 = getelementptr inbounds %struct.cfg80211_ops, %struct.cfg80211_ops* %74, i32 0, i32 2
  %76 = load void (%struct.wiphy*, i1)*, void (%struct.wiphy*, i1)** %75, align 8
  %77 = icmp ne void (%struct.wiphy*, i1)* %76, null
  br i1 %77, label %78, label %79

; <label>:78:                                     ; preds = %72
  call void @rdev_set_wakeup(%struct.cfg80211_registered_device* %3, i1 zeroext false)
  br label %79

; <label>:79:                                     ; preds = %78, %72, %51
  call void @cfg80211_rdev_free_wowlan(%struct.cfg80211_registered_device* %3)
  ret void
}

declare void @rfkill_unregister(%struct.rfkill*) #1

declare i32 @autoremove_wake_function(%struct.__wait_queue*, i32, i32, i8*) #1

declare void @prepare_to_wait(%struct.__wait_queue_head*, %struct.__wait_queue*, i32) #1

declare void @schedule() #1

declare void @finish_wait(%struct.__wait_queue_head*, %struct.__wait_queue*) #1

; Function Attrs: noinline nounwind uwtable
define internal i32 @list_empty(%struct.list_head*) #0 {
  %2 = getelementptr inbounds %struct.list_head, %struct.list_head* %0, i32 0, i32 0
  %3 = load %struct.list_head*, %struct.list_head** %2, align 8
  %4 = icmp eq %struct.list_head* %3, %0
  %5 = zext i1 %4 to i32
  ret i32 %5
}

; Function Attrs: noinline nounwind uwtable
define internal void @synchronize_rcu() #0 {
  call void @synchronize_sched()
  ret void
}

; Function Attrs: noinline nounwind uwtable
define internal void @cfg80211_lock_rdev(%struct.cfg80211_registered_device*) #0 {
  %2 = getelementptr inbounds %struct.cfg80211_registered_device, %struct.cfg80211_registered_device* %0, i32 0, i32 2
  call void @mutex_lock(%struct.mutex* %2)
  ret void
}

; Function Attrs: noinline nounwind uwtable
define internal void @cfg80211_unlock_rdev(%struct.cfg80211_registered_device*) #0 {
  %2 = bitcast %struct.cfg80211_registered_device* %0 to i8*
  %3 = call i64 @IS_ERR(i8* %2)
  %4 = icmp ne i64 %3, 0
  br i1 %4, label %8, label %5

; <label>:5:                                      ; preds = %1
  %6 = icmp ne %struct.cfg80211_registered_device* %0, null
  %7 = xor i1 %6, true
  br label %8

; <label>:8:                                      ; preds = %5, %1
  %9 = phi i1 [ true, %1 ], [ %7, %5 ]
  %10 = xor i1 %9, true
  %11 = xor i1 %10, true
  %12 = zext i1 %11 to i32
  %13 = sext i32 %12 to i64
  %14 = icmp ne i64 %13, 0
  br i1 %14, label %15, label %17

; <label>:15:                                     ; preds = %8
  call void asm sideeffect "1:\09ud2\0A.pushsection __bug_table,\22a\22\0A2:\09.long 1b - 2b, ${0:c} - 2b\0A\09.word ${1:c}, 0\0A\09.org 2b+${2:c}\0A.popsection", "i,i,i,~{dirflag},~{fpsr},~{flags}"(i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.13, i32 0, i32 0), i32 181, i64 12) #3, !srcloc !5
  br label %16

; <label>:16:                                     ; preds = %16, %15
  br label %16

; <label>:17:                                     ; preds = %8
  %18 = getelementptr inbounds %struct.cfg80211_registered_device, %struct.cfg80211_registered_device* %0, i32 0, i32 2
  call void @mutex_unlock(%struct.mutex* %18)
  ret void
}

declare zeroext i1 @flush_work(%struct.work_struct*) #1

declare zeroext i1 @cancel_work_sync(%struct.work_struct*) #1

declare zeroext i1 @cancel_delayed_work_sync(%struct.delayed_work*) #1

; Function Attrs: noinline nounwind uwtable
define internal void @rdev_set_wakeup(%struct.cfg80211_registered_device*, i1 zeroext) #0 {
  %3 = zext i1 %1 to i8
  %4 = getelementptr inbounds %struct.cfg80211_registered_device, %struct.cfg80211_registered_device* %0, i32 0, i32 34
  %5 = trunc i8 %3 to i1
  call void @trace_rdev_set_wakeup(%struct.wiphy* %4, i1 zeroext %5)
  %6 = getelementptr inbounds %struct.cfg80211_registered_device, %struct.cfg80211_registered_device* %0, i32 0, i32 0
  %7 = load %struct.cfg80211_ops*, %struct.cfg80211_ops** %6, align 32
  %8 = getelementptr inbounds %struct.cfg80211_ops, %struct.cfg80211_ops* %7, i32 0, i32 2
  %9 = load void (%struct.wiphy*, i1)*, void (%struct.wiphy*, i1)** %8, align 8
  %10 = getelementptr inbounds %struct.cfg80211_registered_device, %struct.cfg80211_registered_device* %0, i32 0, i32 34
  %11 = trunc i8 %3 to i1
  call void %9(%struct.wiphy* %10, i1 zeroext %11)
  %12 = getelementptr inbounds %struct.cfg80211_registered_device, %struct.cfg80211_registered_device* %0, i32 0, i32 34
  call void @trace_rdev_return_void(%struct.wiphy* %12)
  ret void
}

; Function Attrs: noinline nounwind uwtable
define internal void @cfg80211_rdev_free_wowlan(%struct.cfg80211_registered_device*) #0 {
  %2 = getelementptr inbounds %struct.cfg80211_registered_device, %struct.cfg80211_registered_device* %0, i32 0, i32 31
  %3 = load %struct.cfg80211_wowlan*, %struct.cfg80211_wowlan** %2, align 16
  %4 = icmp ne %struct.cfg80211_wowlan* %3, null
  br i1 %4, label %5, label %52

; <label>:5:                                      ; preds = %1, %15
  %.0 = phi i32 [ %20, %15 ], [ 0, %1 ]
  %6 = getelementptr inbounds %struct.cfg80211_registered_device, %struct.cfg80211_registered_device* %0, i32 0, i32 31
  %7 = load %struct.cfg80211_wowlan*, %struct.cfg80211_wowlan** %6, align 16
  %8 = getelementptr inbounds %struct.cfg80211_wowlan, %struct.cfg80211_wowlan* %7, i32 0, i32 9
  %9 = load i32, i32* %8, align 8
  %10 = icmp slt i32 %.0, %9
  %11 = getelementptr inbounds %struct.cfg80211_registered_device, %struct.cfg80211_registered_device* %0, i32 0, i32 31
  %12 = load %struct.cfg80211_wowlan*, %struct.cfg80211_wowlan** %11, align 16
  %13 = getelementptr inbounds %struct.cfg80211_wowlan, %struct.cfg80211_wowlan* %12, i32 0, i32 7
  %14 = load %struct.cfg80211_wowlan_trig_pkt_pattern*, %struct.cfg80211_wowlan_trig_pkt_pattern** %13, align 8
  br i1 %10, label %15, label %21

; <label>:15:                                     ; preds = %5
  %16 = sext i32 %.0 to i64
  %17 = getelementptr inbounds %struct.cfg80211_wowlan_trig_pkt_pattern, %struct.cfg80211_wowlan_trig_pkt_pattern* %14, i64 %16
  %18 = getelementptr inbounds %struct.cfg80211_wowlan_trig_pkt_pattern, %struct.cfg80211_wowlan_trig_pkt_pattern* %17, i32 0, i32 0
  %19 = load i8*, i8** %18, align 8
  call void @kfree(i8* %19)
  %20 = add nsw i32 %.0, 1
  br label %5

; <label>:21:                                     ; preds = %5
  %22 = bitcast %struct.cfg80211_wowlan_trig_pkt_pattern* %14 to i8*
  call void @kfree(i8* %22)
  %23 = getelementptr inbounds %struct.cfg80211_registered_device, %struct.cfg80211_registered_device* %0, i32 0, i32 31
  %24 = load %struct.cfg80211_wowlan*, %struct.cfg80211_wowlan** %23, align 16
  %25 = getelementptr inbounds %struct.cfg80211_wowlan, %struct.cfg80211_wowlan* %24, i32 0, i32 8
  %26 = load %struct.cfg80211_wowlan_tcp*, %struct.cfg80211_wowlan_tcp** %25, align 8
  %27 = icmp ne %struct.cfg80211_wowlan_tcp* %26, null
  br i1 %27, label %28, label %43

; <label>:28:                                     ; preds = %21
  %29 = getelementptr inbounds %struct.cfg80211_registered_device, %struct.cfg80211_registered_device* %0, i32 0, i32 31
  %30 = load %struct.cfg80211_wowlan*, %struct.cfg80211_wowlan** %29, align 16
  %31 = getelementptr inbounds %struct.cfg80211_wowlan, %struct.cfg80211_wowlan* %30, i32 0, i32 8
  %32 = load %struct.cfg80211_wowlan_tcp*, %struct.cfg80211_wowlan_tcp** %31, align 8
  %33 = getelementptr inbounds %struct.cfg80211_wowlan_tcp, %struct.cfg80211_wowlan_tcp* %32, i32 0, i32 0
  %34 = load %struct.socket*, %struct.socket** %33, align 8
  %35 = icmp ne %struct.socket* %34, null
  br i1 %35, label %36, label %43

; <label>:36:                                     ; preds = %28
  %37 = getelementptr inbounds %struct.cfg80211_registered_device, %struct.cfg80211_registered_device* %0, i32 0, i32 31
  %38 = load %struct.cfg80211_wowlan*, %struct.cfg80211_wowlan** %37, align 16
  %39 = getelementptr inbounds %struct.cfg80211_wowlan, %struct.cfg80211_wowlan* %38, i32 0, i32 8
  %40 = load %struct.cfg80211_wowlan_tcp*, %struct.cfg80211_wowlan_tcp** %39, align 8
  %41 = getelementptr inbounds %struct.cfg80211_wowlan_tcp, %struct.cfg80211_wowlan_tcp* %40, i32 0, i32 0
  %42 = load %struct.socket*, %struct.socket** %41, align 8
  call void @sock_release(%struct.socket* %42)
  br label %43

; <label>:43:                                     ; preds = %36, %28, %21
  %44 = getelementptr inbounds %struct.cfg80211_registered_device, %struct.cfg80211_registered_device* %0, i32 0, i32 31
  %45 = load %struct.cfg80211_wowlan*, %struct.cfg80211_wowlan** %44, align 16
  %46 = getelementptr inbounds %struct.cfg80211_wowlan, %struct.cfg80211_wowlan* %45, i32 0, i32 8
  %47 = load %struct.cfg80211_wowlan_tcp*, %struct.cfg80211_wowlan_tcp** %46, align 8
  %48 = bitcast %struct.cfg80211_wowlan_tcp* %47 to i8*
  call void @kfree(i8* %48)
  %49 = getelementptr inbounds %struct.cfg80211_registered_device, %struct.cfg80211_registered_device* %0, i32 0, i32 31
  %50 = load %struct.cfg80211_wowlan*, %struct.cfg80211_wowlan** %49, align 16
  %51 = bitcast %struct.cfg80211_wowlan* %50 to i8*
  call void @kfree(i8* %51)
  br label %52

; <label>:52:                                     ; preds = %1, %43
  ret void
}

; Function Attrs: noinline nounwind uwtable
define void @cfg80211_dev_free(%struct.cfg80211_registered_device*) #0 {
  %2 = getelementptr inbounds %struct.cfg80211_registered_device, %struct.cfg80211_registered_device* %0, i32 0, i32 4
  %3 = load %struct.rfkill*, %struct.rfkill** %2, align 8
  call void @rfkill_destroy(%struct.rfkill* %3)
  %4 = getelementptr inbounds %struct.cfg80211_registered_device, %struct.cfg80211_registered_device* %0, i32 0, i32 2
  call void @mutex_destroy(%struct.mutex* %4)
  %5 = getelementptr inbounds %struct.cfg80211_registered_device, %struct.cfg80211_registered_device* %0, i32 0, i32 9
  call void @mutex_destroy(%struct.mutex* %5)
  %6 = getelementptr inbounds %struct.cfg80211_registered_device, %struct.cfg80211_registered_device* %0, i32 0, i32 28
  call void @mutex_destroy(%struct.mutex* %6)
  %7 = getelementptr inbounds %struct.cfg80211_registered_device, %struct.cfg80211_registered_device* %0, i32 0, i32 15
  %8 = getelementptr inbounds %struct.list_head, %struct.list_head* %7, i32 0, i32 0
  %9 = load %struct.list_head*, %struct.list_head** %8, align 16
  %10 = bitcast %struct.list_head* %9 to i8*
  %11 = getelementptr inbounds i8, i8* %10, i64 0
  %12 = bitcast i8* %11 to %struct.cfg80211_beacon_registration*
  br label %13

; <label>:13:                                     ; preds = %23, %1
  %.sink6 = phi %struct.cfg80211_beacon_registration* [ %19, %23 ], [ %12, %1 ]
  %.03 = phi %struct.cfg80211_beacon_registration* [ %12, %1 ], [ %19, %23 ]
  %14 = getelementptr inbounds %struct.cfg80211_beacon_registration, %struct.cfg80211_beacon_registration* %.sink6, i32 0, i32 0
  %15 = getelementptr inbounds %struct.list_head, %struct.list_head* %14, i32 0, i32 0
  %16 = load %struct.list_head*, %struct.list_head** %15, align 8
  %17 = bitcast %struct.list_head* %16 to i8*
  %18 = getelementptr inbounds i8, i8* %17, i64 0
  %19 = bitcast i8* %18 to %struct.cfg80211_beacon_registration*
  %20 = getelementptr inbounds %struct.cfg80211_beacon_registration, %struct.cfg80211_beacon_registration* %.03, i32 0, i32 0
  %21 = getelementptr inbounds %struct.cfg80211_registered_device, %struct.cfg80211_registered_device* %0, i32 0, i32 15
  %22 = icmp ne %struct.list_head* %20, %21
  br i1 %22, label %23, label %26

; <label>:23:                                     ; preds = %13
  %24 = getelementptr inbounds %struct.cfg80211_beacon_registration, %struct.cfg80211_beacon_registration* %.03, i32 0, i32 0
  call void @list_del(%struct.list_head* %24)
  %25 = bitcast %struct.cfg80211_beacon_registration* %.03 to i8*
  call void @kfree(i8* %25)
  br label %13

; <label>:26:                                     ; preds = %13
  %27 = getelementptr inbounds %struct.cfg80211_registered_device, %struct.cfg80211_registered_device* %0, i32 0, i32 20
  %28 = getelementptr inbounds %struct.list_head, %struct.list_head* %27, i32 0, i32 0
  %29 = load %struct.list_head*, %struct.list_head** %28, align 16
  %30 = bitcast %struct.list_head* %29 to i8*
  %31 = getelementptr inbounds i8, i8* %30, i64 0
  %32 = bitcast i8* %31 to %struct.cfg80211_internal_bss*
  br label %33

; <label>:33:                                     ; preds = %43, %26
  %.sink9 = phi %struct.cfg80211_internal_bss* [ %39, %43 ], [ %32, %26 ]
  %.01 = phi %struct.cfg80211_internal_bss* [ %32, %26 ], [ %39, %43 ]
  %34 = getelementptr inbounds %struct.cfg80211_internal_bss, %struct.cfg80211_internal_bss* %.sink9, i32 0, i32 0
  %35 = getelementptr inbounds %struct.list_head, %struct.list_head* %34, i32 0, i32 0
  %36 = load %struct.list_head*, %struct.list_head** %35, align 8
  %37 = bitcast %struct.list_head* %36 to i8*
  %38 = getelementptr inbounds i8, i8* %37, i64 0
  %39 = bitcast i8* %38 to %struct.cfg80211_internal_bss*
  %40 = getelementptr inbounds %struct.cfg80211_internal_bss, %struct.cfg80211_internal_bss* %.01, i32 0, i32 0
  %41 = getelementptr inbounds %struct.cfg80211_registered_device, %struct.cfg80211_registered_device* %0, i32 0, i32 20
  %42 = icmp ne %struct.list_head* %40, %41
  br i1 %42, label %43, label %46

; <label>:43:                                     ; preds = %33
  %44 = getelementptr inbounds %struct.cfg80211_registered_device, %struct.cfg80211_registered_device* %0, i32 0, i32 34
  %45 = getelementptr inbounds %struct.cfg80211_internal_bss, %struct.cfg80211_internal_bss* %.01, i32 0, i32 6
  call void @cfg80211_put_bss(%struct.wiphy* %44, %struct.cfg80211_bss* %45)
  br label %33

; <label>:46:                                     ; preds = %33
  %47 = bitcast %struct.cfg80211_registered_device* %0 to i8*
  call void @kfree(i8* %47)
  ret void
}

declare void @rfkill_destroy(%struct.rfkill*) #1

; Function Attrs: noinline nounwind uwtable
define internal void @mutex_destroy(%struct.mutex*) #0 {
  ret void
}

; Function Attrs: noinline nounwind uwtable
define internal void @list_del(%struct.list_head*) #0 {
  %2 = getelementptr inbounds %struct.list_head, %struct.list_head* %0, i32 0, i32 1
  %3 = load %struct.list_head*, %struct.list_head** %2, align 8
  %4 = getelementptr inbounds %struct.list_head, %struct.list_head* %0, i32 0, i32 0
  %5 = load %struct.list_head*, %struct.list_head** %4, align 8
  call void @__list_del(%struct.list_head* %3, %struct.list_head* %5)
  %6 = getelementptr inbounds %struct.list_head, %struct.list_head* %0, i32 0, i32 0
  store %struct.list_head* bitcast (i8* getelementptr (i8, i8* inttoptr (i64 1048832 to i8*), i64 -2401263026318606336) to %struct.list_head*), %struct.list_head** %6, align 8
  %7 = getelementptr inbounds %struct.list_head, %struct.list_head* %0, i32 0, i32 1
  store %struct.list_head* bitcast (i8* getelementptr (i8, i8* inttoptr (i64 2097664 to i8*), i64 -2401263026318606336) to %struct.list_head*), %struct.list_head** %7, align 8
  ret void
}

declare void @cfg80211_put_bss(%struct.wiphy*, %struct.cfg80211_bss*) #1

; Function Attrs: noinline nounwind uwtable
define void @wiphy_free(%struct.wiphy*) #0 {
  %2 = getelementptr inbounds %struct.wiphy, %struct.wiphy* %0, i32 0, i32 42
  call void @put_device(%struct.device* %2)
  ret void
}

declare void @put_device(%struct.device*) #1

; Function Attrs: noinline nounwind uwtable
define void @wiphy_rfkill_set_hw_state(%struct.wiphy*, i1 zeroext) #0 {
  %3 = zext i1 %1 to i8
  %4 = call %struct.cfg80211_registered_device* @wiphy_to_dev(%struct.wiphy* %0)
  %5 = getelementptr inbounds %struct.cfg80211_registered_device, %struct.cfg80211_registered_device* %4, i32 0, i32 4
  %6 = load %struct.rfkill*, %struct.rfkill** %5, align 8
  %7 = trunc i8 %3 to i1
  %8 = call zeroext i1 @rfkill_set_hw_state(%struct.rfkill* %6, i1 zeroext %7)
  br i1 %8, label %9, label %12

; <label>:9:                                      ; preds = %2
  %10 = getelementptr inbounds %struct.cfg80211_registered_device, %struct.cfg80211_registered_device* %4, i32 0, i32 5
  %11 = call zeroext i1 @schedule_work(%struct.work_struct* %10)
  br label %12

; <label>:12:                                     ; preds = %9, %2
  ret void
}

declare zeroext i1 @rfkill_set_hw_state(%struct.rfkill*, i1 zeroext) #1

; Function Attrs: noinline nounwind uwtable
define internal zeroext i1 @schedule_work(%struct.work_struct*) #0 {
  %2 = load %struct.workqueue_struct*, %struct.workqueue_struct** @system_wq, align 8
  %3 = call zeroext i1 @queue_work(%struct.workqueue_struct* %2, %struct.work_struct* %0)
  ret i1 %3
}

; Function Attrs: noinline nounwind uwtable
define void @cfg80211_unregister_wdev(%struct.wireless_dev*) #0 {
  %2 = getelementptr inbounds %struct.wireless_dev, %struct.wireless_dev* %0, i32 0, i32 0
  %3 = load %struct.wiphy*, %struct.wiphy** %2, align 8
  %4 = call %struct.cfg80211_registered_device* @wiphy_to_dev(%struct.wiphy* %3)
  %5 = call i32 @rtnl_is_locked()
  %6 = icmp ne i32 %5, 0
  %7 = xor i1 %6, true
  %8 = xor i1 %7, true
  %9 = xor i1 %8, true
  %10 = zext i1 %9 to i32
  %11 = sext i32 %10 to i64
  %12 = icmp ne i64 %11, 0
  br i1 %12, label %13, label %15

; <label>:13:                                     ; preds = %1
  %14 = call i32 (i8*, ...) @printk(i8* getelementptr inbounds ([37 x i8], [37 x i8]* @.str.12, i32 0, i32 0), i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.3, i32 0, i32 0), i32 812)
  call void @dump_stack()
  br label %15

; <label>:15:                                     ; preds = %1, %13
  %16 = getelementptr inbounds %struct.wireless_dev, %struct.wireless_dev* %0, i32 0, i32 3
  %17 = load %struct.net_device*, %struct.net_device** %16, align 8
  %18 = icmp ne %struct.net_device* %17, null
  %19 = xor i1 %18, true
  %20 = xor i1 %19, true
  %21 = zext i1 %20 to i32
  %22 = icmp ne i32 %21, 0
  %23 = xor i1 %22, true
  %24 = xor i1 %23, true
  %25 = zext i1 %24 to i32
  %26 = sext i32 %25 to i64
  %27 = icmp ne i64 %26, 0
  br i1 %27, label %28, label %29

; <label>:28:                                     ; preds = %15
  call void @warn_slowpath_null(i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.3, i32 0, i32 0), i32 814)
  br label %29

; <label>:29:                                     ; preds = %28, %15
  %30 = icmp ne i32 %21, 0
  %31 = xor i1 %30, true
  %32 = xor i1 %31, true
  %33 = zext i1 %32 to i32
  %34 = sext i32 %33 to i64
  %35 = icmp ne i64 %34, 0
  br i1 %35, label %84, label %36

; <label>:36:                                     ; preds = %29
  %37 = getelementptr inbounds %struct.cfg80211_registered_device, %struct.cfg80211_registered_device* %4, i32 0, i32 9
  call void @mutex_lock(%struct.mutex* %37)
  %38 = getelementptr inbounds %struct.cfg80211_registered_device, %struct.cfg80211_registered_device* %4, i32 0, i32 28
  call void @mutex_lock(%struct.mutex* %38)
  %39 = getelementptr inbounds %struct.wireless_dev, %struct.wireless_dev* %0, i32 0, i32 2
  call void @list_del_rcu(%struct.list_head* %39)
  %40 = getelementptr inbounds %struct.cfg80211_registered_device, %struct.cfg80211_registered_device* %4, i32 0, i32 11
  %41 = load i32, i32* %40, align 8
  %42 = add nsw i32 %41, 1
  store i32 %42, i32* %40, align 8
  %43 = getelementptr inbounds %struct.wireless_dev, %struct.wireless_dev* %0, i32 0, i32 1
  %44 = load i32, i32* %43, align 8
  %cond = icmp eq i32 %44, 10
  br i1 %cond, label %45, label %46

; <label>:45:                                     ; preds = %36
  call void @cfg80211_stop_p2p_device(%struct.cfg80211_registered_device* %4, %struct.wireless_dev* %0)
  br label %81

; <label>:46:                                     ; preds = %36
  %47 = icmp ne i32 1, 0
  %48 = xor i1 %47, true
  %49 = xor i1 %48, true
  %50 = zext i1 %49 to i32
  %51 = sext i32 %50 to i64
  %52 = icmp ne i64 %51, 0
  br i1 %52, label %53, label %75

; <label>:53:                                     ; preds = %46
  %54 = load i8, i8* @cfg80211_unregister_wdev.__warned, align 1
  %55 = trunc i8 %54 to i1
  %56 = xor i1 %55, true
  %57 = xor i1 %56, true
  %58 = xor i1 %57, true
  %59 = zext i1 %58 to i32
  %60 = icmp ne i32 %59, 0
  %61 = xor i1 %60, true
  %62 = xor i1 %61, true
  %63 = zext i1 %62 to i32
  %64 = sext i32 %63 to i64
  %65 = icmp ne i64 %64, 0
  br i1 %65, label %66, label %67

; <label>:66:                                     ; preds = %53
  call void @warn_slowpath_null(i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.3, i32 0, i32 0), i32 827)
  br label %67

; <label>:67:                                     ; preds = %66, %53
  %68 = icmp ne i32 %59, 0
  %69 = xor i1 %68, true
  %70 = xor i1 %69, true
  %71 = zext i1 %70 to i32
  %72 = sext i32 %71 to i64
  %73 = icmp ne i64 %72, 0
  br i1 %73, label %74, label %75

; <label>:74:                                     ; preds = %67
  store i8 1, i8* @cfg80211_unregister_wdev.__warned, align 1
  br label %75

; <label>:75:                                     ; preds = %67, %74, %46
  %76 = icmp ne i32 1, 0
  %77 = xor i1 %76, true
  %78 = xor i1 %77, true
  %79 = zext i1 %78 to i32
  %80 = sext i32 %79 to i64
  br label %81

; <label>:81:                                     ; preds = %75, %45
  %82 = getelementptr inbounds %struct.cfg80211_registered_device, %struct.cfg80211_registered_device* %4, i32 0, i32 28
  call void @mutex_unlock(%struct.mutex* %82)
  %83 = getelementptr inbounds %struct.cfg80211_registered_device, %struct.cfg80211_registered_device* %4, i32 0, i32 9
  call void @mutex_unlock(%struct.mutex* %83)
  br label %84

; <label>:84:                                     ; preds = %29, %81
  ret void
}

declare i32 @rtnl_is_locked() #1

declare void @dump_stack() #1

; Function Attrs: noinline nounwind uwtable
define void @cfg80211_update_iface_num(%struct.cfg80211_registered_device*, i32, i32) #0 {
  %4 = call i32 @rtnl_is_locked()
  %5 = icmp ne i32 %4, 0
  %6 = xor i1 %5, true
  %7 = xor i1 %6, true
  %8 = xor i1 %7, true
  %9 = zext i1 %8 to i32
  %10 = sext i32 %9 to i64
  %11 = icmp ne i64 %10, 0
  br i1 %11, label %12, label %14

; <label>:12:                                     ; preds = %3
  %13 = call i32 (i8*, ...) @printk(i8* getelementptr inbounds ([37 x i8], [37 x i8]* @.str.12, i32 0, i32 0), i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.3, i32 0, i32 0), i32 842)
  call void @dump_stack()
  br label %14

; <label>:14:                                     ; preds = %3, %12
  %15 = getelementptr inbounds %struct.cfg80211_registered_device, %struct.cfg80211_registered_device* %0, i32 0, i32 17
  %16 = load i32, i32* %15, align 4
  %17 = add nsw i32 %16, %2
  store i32 %17, i32* %15, align 4
  %18 = icmp eq i32 %1, 6
  br i1 %18, label %19, label %23

; <label>:19:                                     ; preds = %14
  %20 = getelementptr inbounds %struct.cfg80211_registered_device, %struct.cfg80211_registered_device* %0, i32 0, i32 18
  %21 = load i32, i32* %20, align 8
  %22 = add nsw i32 %21, %2
  store i32 %22, i32* %20, align 8
  br label %23

; <label>:23:                                     ; preds = %19, %14
  ret void
}

; Function Attrs: noinline nounwind uwtable
define void @cfg80211_leave(%struct.cfg80211_registered_device*, %struct.wireless_dev*) #0 {
  %3 = getelementptr inbounds %struct.wireless_dev, %struct.wireless_dev* %1, i32 0, i32 3
  %4 = load %struct.net_device*, %struct.net_device** %3, align 8
  %5 = getelementptr inbounds %struct.wireless_dev, %struct.wireless_dev* %1, i32 0, i32 1
  %6 = load i32, i32* %5, align 8
  switch i32 %6, label %18 [
    i32 1, label %7
    i32 8, label %9
    i32 2, label %9
    i32 7, label %14
    i32 3, label %16
  ]

; <label>:7:                                      ; preds = %2
  %8 = call i32 @cfg80211_leave_ibss(%struct.cfg80211_registered_device* %0, %struct.net_device* %4, i1 zeroext true)
  br label %18

; <label>:9:                                      ; preds = %2, %2
  %10 = getelementptr inbounds %struct.cfg80211_registered_device, %struct.cfg80211_registered_device* %0, i32 0, i32 28
  call void @mutex_lock(%struct.mutex* %10)
  %11 = call i32 @__cfg80211_stop_sched_scan(%struct.cfg80211_registered_device* %0, i1 zeroext false)
  %12 = getelementptr inbounds %struct.cfg80211_registered_device, %struct.cfg80211_registered_device* %0, i32 0, i32 28
  call void @mutex_unlock(%struct.mutex* %12)
  call void @wdev_lock(%struct.wireless_dev* %1)
  %13 = call i32 @__cfg80211_disconnect(%struct.cfg80211_registered_device* %0, %struct.net_device* %4, i16 zeroext 3, i1 zeroext true)
  call void @wdev_unlock(%struct.wireless_dev* %1)
  br label %18

; <label>:14:                                     ; preds = %2
  %15 = call i32 @cfg80211_leave_mesh(%struct.cfg80211_registered_device* %0, %struct.net_device* %4)
  br label %18

; <label>:16:                                     ; preds = %2
  %17 = call i32 @cfg80211_stop_ap(%struct.cfg80211_registered_device* %0, %struct.net_device* %4)
  br label %18

; <label>:18:                                     ; preds = %2, %16, %14, %9, %7
  %19 = getelementptr inbounds %struct.wireless_dev, %struct.wireless_dev* %1, i32 0, i32 27
  store i32 0, i32* %19, align 8
  ret void
}

declare i32 @cfg80211_leave_ibss(%struct.cfg80211_registered_device*, %struct.net_device*, i1 zeroext) #1

declare i32 @__cfg80211_stop_sched_scan(%struct.cfg80211_registered_device*, i1 zeroext) #1

; Function Attrs: noinline nounwind uwtable
define internal void @wdev_lock(%struct.wireless_dev*) #0 {
  %2 = getelementptr inbounds %struct.wireless_dev, %struct.wireless_dev* %0, i32 0, i32 7
  call void @mutex_lock(%struct.mutex* %2)
  ret void
}

declare i32 @__cfg80211_disconnect(%struct.cfg80211_registered_device*, %struct.net_device*, i16 zeroext, i1 zeroext) #1

; Function Attrs: noinline nounwind uwtable
define internal void @wdev_unlock(%struct.wireless_dev*) #0 {
  %2 = getelementptr inbounds %struct.wireless_dev, %struct.wireless_dev* %0, i32 0, i32 7
  call void @mutex_unlock(%struct.mutex* %2)
  ret void
}

declare i32 @cfg80211_leave_mesh(%struct.cfg80211_registered_device*, %struct.net_device*) #1

declare i32 @cfg80211_stop_ap(%struct.cfg80211_registered_device*, %struct.net_device*) #1

; Function Attrs: noinline nounwind uwtable
define internal i32 @cfg80211_init() #0 section ".init.text" {
  %1 = call i32 @register_pernet_device(%struct.pernet_operations* @cfg80211_pernet_ops)
  %2 = icmp ne i32 %1, 0
  br i1 %2, label %27, label %3

; <label>:3:                                      ; preds = %0
  %4 = call i32 @wiphy_sysfs_init()
  %5 = icmp ne i32 %4, 0
  br i1 %5, label %26, label %6

; <label>:6:                                      ; preds = %3
  %7 = call i32 @register_netdevice_notifier(%struct.notifier_block* @cfg80211_netdev_notifier)
  %8 = icmp ne i32 %7, 0
  br i1 %8, label %25, label %9

; <label>:9:                                      ; preds = %6
  %10 = call i32 @nl80211_init()
  %11 = icmp ne i32 %10, 0
  br i1 %11, label %23, label %12

; <label>:12:                                     ; preds = %9
  %13 = call %struct.dentry* @debugfs_create_dir(i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.14, i32 0, i32 0), %struct.dentry* null)
  store %struct.dentry* %13, %struct.dentry** @ieee80211_debugfs_dir, align 8
  %14 = call i32 @regulatory_init()
  %15 = icmp ne i32 %14, 0
  br i1 %15, label %21, label %16

; <label>:16:                                     ; preds = %12
  %17 = call %struct.workqueue_struct* (i8*, i32, i32, %struct.lock_class_key*, i8*, ...) @__alloc_workqueue_key(i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.15, i32 0, i32 0), i32 10, i32 1, %struct.lock_class_key* null, i8* null)
  store %struct.workqueue_struct* %17, %struct.workqueue_struct** @cfg80211_wq, align 8
  %18 = load %struct.workqueue_struct*, %struct.workqueue_struct** @cfg80211_wq, align 8
  %19 = icmp ne %struct.workqueue_struct* %18, null
  br i1 %19, label %27, label %20

; <label>:20:                                     ; preds = %16
  call void @regulatory_exit()
  br label %21

; <label>:21:                                     ; preds = %12, %20
  %.01 = phi i32 [ -12, %20 ], [ %14, %12 ]
  %22 = load %struct.dentry*, %struct.dentry** @ieee80211_debugfs_dir, align 8
  call void @debugfs_remove(%struct.dentry* %22)
  br label %23

; <label>:23:                                     ; preds = %9, %21
  %.1 = phi i32 [ %.01, %21 ], [ %10, %9 ]
  %24 = call i32 @unregister_netdevice_notifier(%struct.notifier_block* @cfg80211_netdev_notifier)
  br label %25

; <label>:25:                                     ; preds = %6, %23
  %.2 = phi i32 [ %.1, %23 ], [ %7, %6 ]
  call void @wiphy_sysfs_exit()
  br label %26

; <label>:26:                                     ; preds = %3, %25
  %.3 = phi i32 [ %.2, %25 ], [ %4, %3 ]
  call void @unregister_pernet_device(%struct.pernet_operations* @cfg80211_pernet_ops)
  br label %27

; <label>:27:                                     ; preds = %26, %0, %16
  %.0 = phi i32 [ 0, %16 ], [ %.3, %26 ], [ %1, %0 ]
  ret i32 %.0
}

; Function Attrs: noinline nounwind uwtable
define internal void @cfg80211_exit() #0 section ".exit.text" {
  %1 = load %struct.dentry*, %struct.dentry** @ieee80211_debugfs_dir, align 8
  call void @debugfs_remove(%struct.dentry* %1)
  call void @nl80211_exit()
  %2 = call i32 @unregister_netdevice_notifier(%struct.notifier_block* @cfg80211_netdev_notifier)
  call void @wiphy_sysfs_exit()
  call void @regulatory_exit()
  call void @unregister_pernet_device(%struct.pernet_operations* @cfg80211_pernet_ops)
  %3 = load %struct.workqueue_struct*, %struct.workqueue_struct** @cfg80211_wq, align 8
  call void @destroy_workqueue(%struct.workqueue_struct* %3)
  ret void
}

declare void @debugfs_remove(%struct.dentry*) #1

declare void @nl80211_exit() #1

declare i32 @unregister_netdevice_notifier(%struct.notifier_block*) #1

declare void @wiphy_sysfs_exit() #1

declare void @regulatory_exit() #1

declare void @unregister_pernet_device(%struct.pernet_operations*) #1

declare void @destroy_workqueue(%struct.workqueue_struct*) #1

; Function Attrs: noinline nounwind uwtable
define internal i8* @kobject_name(%struct.kobject*) #0 {
  %2 = getelementptr inbounds %struct.kobject, %struct.kobject* %0, i32 0, i32 0
  %3 = load i8*, i8** %2, align 8
  ret i8* %3
}

; Function Attrs: noinline nounwind uwtable
define internal %struct.net* @read_pnet(%struct.net**) #0 {
  %2 = load %struct.net*, %struct.net** %0, align 8
  ret %struct.net* %2
}

; Function Attrs: noinline nounwind uwtable
define internal void @write_pnet(%struct.net**, %struct.net*) #0 {
  store %struct.net* %1, %struct.net** %0, align 8
  ret void
}

; Function Attrs: noinline nounwind uwtable
define internal void @trace_rdev_stop_p2p_device(%struct.wiphy*, %struct.wireless_dev*) #0 {
  %3 = getelementptr inbounds %struct.static_key, %struct.static_key* getelementptr inbounds (%struct.tracepoint, %struct.tracepoint* @__tracepoint_rdev_stop_p2p_device, i32 0, i32 1), i32 0, i32 0
  %4 = call i32 @atomic_read(%struct.atomic_t* %3) #3
  %5 = icmp ne i32 %4, 0
  %6 = xor i1 %5, true
  %7 = zext i1 %5 to i32
  %8 = sext i32 %7 to i64
  %. = select i1 %5, i1 true, i1 false
  br i1 %., label %9, label %23

; <label>:9:                                      ; preds = %2
  call void @rcu_read_lock_sched_notrace()
  %10 = load volatile %struct.tracepoint_func*, %struct.tracepoint_func** getelementptr inbounds (%struct.tracepoint, %struct.tracepoint* @__tracepoint_rdev_stop_p2p_device, i32 0, i32 4), align 8
  %11 = icmp ne %struct.tracepoint_func* %10, null
  br i1 %11, label %12, label %22

; <label>:12:                                     ; preds = %9, %12
  %.01 = phi %struct.tracepoint_func* [ %18, %12 ], [ %10, %9 ]
  %13 = getelementptr inbounds %struct.tracepoint_func, %struct.tracepoint_func* %.01, i32 0, i32 0
  %14 = load i8*, i8** %13, align 8
  %15 = getelementptr inbounds %struct.tracepoint_func, %struct.tracepoint_func* %.01, i32 0, i32 1
  %16 = load i8*, i8** %15, align 8
  %17 = bitcast i8* %14 to void (i8*, %struct.wiphy*, %struct.wireless_dev*)*
  call void %17(i8* %16, %struct.wiphy* %0, %struct.wireless_dev* %1)
  %18 = getelementptr inbounds %struct.tracepoint_func, %struct.tracepoint_func* %.01, i32 1
  %19 = getelementptr inbounds %struct.tracepoint_func, %struct.tracepoint_func* %18, i32 0, i32 0
  %20 = load i8*, i8** %19, align 8
  %21 = icmp ne i8* %20, null
  br i1 %21, label %12, label %22

; <label>:22:                                     ; preds = %12, %9
  call void @rcu_read_unlock_sched_notrace()
  br label %23

; <label>:23:                                     ; preds = %22, %2
  ret void
}

; Function Attrs: noinline nounwind uwtable
define internal void @trace_rdev_return_void(%struct.wiphy*) #0 {
  %2 = getelementptr inbounds %struct.static_key, %struct.static_key* getelementptr inbounds (%struct.tracepoint, %struct.tracepoint* @__tracepoint_rdev_return_void, i32 0, i32 1), i32 0, i32 0
  %3 = call i32 @atomic_read(%struct.atomic_t* %2) #3
  %4 = icmp ne i32 %3, 0
  %5 = xor i1 %4, true
  %6 = zext i1 %4 to i32
  %7 = sext i32 %6 to i64
  %. = select i1 %4, i1 true, i1 false
  br i1 %., label %8, label %22

; <label>:8:                                      ; preds = %1
  call void @rcu_read_lock_sched_notrace()
  %9 = load volatile %struct.tracepoint_func*, %struct.tracepoint_func** getelementptr inbounds (%struct.tracepoint, %struct.tracepoint* @__tracepoint_rdev_return_void, i32 0, i32 4), align 8
  %10 = icmp ne %struct.tracepoint_func* %9, null
  br i1 %10, label %11, label %21

; <label>:11:                                     ; preds = %8, %11
  %.01 = phi %struct.tracepoint_func* [ %17, %11 ], [ %9, %8 ]
  %12 = getelementptr inbounds %struct.tracepoint_func, %struct.tracepoint_func* %.01, i32 0, i32 0
  %13 = load i8*, i8** %12, align 8
  %14 = getelementptr inbounds %struct.tracepoint_func, %struct.tracepoint_func* %.01, i32 0, i32 1
  %15 = load i8*, i8** %14, align 8
  %16 = bitcast i8* %13 to void (i8*, %struct.wiphy*)*
  call void %16(i8* %15, %struct.wiphy* %0)
  %17 = getelementptr inbounds %struct.tracepoint_func, %struct.tracepoint_func* %.01, i32 1
  %18 = getelementptr inbounds %struct.tracepoint_func, %struct.tracepoint_func* %17, i32 0, i32 0
  %19 = load i8*, i8** %18, align 8
  %20 = icmp ne i8* %19, null
  br i1 %20, label %11, label %21

; <label>:21:                                     ; preds = %11, %8
  call void @rcu_read_unlock_sched_notrace()
  br label %22

; <label>:22:                                     ; preds = %21, %1
  ret void
}

; Function Attrs: noinline nounwind uwtable
define internal void @rcu_read_lock_sched_notrace() #0 {
  call void asm sideeffect "", "~{memory},~{dirflag},~{fpsr},~{flags}"() #3, !srcloc !6
  ret void
}

; Function Attrs: noinline nounwind uwtable
define internal void @rcu_read_unlock_sched_notrace() #0 {
  call void asm sideeffect "", "~{memory},~{dirflag},~{fpsr},~{flags}"() #3, !srcloc !7
  ret void
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @atomic_read(%struct.atomic_t*) #0 {
  %2 = getelementptr inbounds %struct.atomic_t, %struct.atomic_t* %0, i32 0, i32 0
  %3 = load volatile i32, i32* %2, align 4
  ret i32 %3
}

declare i8* @__kmalloc(i64, i32) #1

declare i32 @dev_close(%struct.net_device*) #1

declare zeroext i1 @rfkill_blocked(%struct.rfkill*) #1

declare void @cfg80211_process_rdev_events(%struct.cfg80211_registered_device*) #1

; Function Attrs: noinline nounwind uwtable
define internal void @__list_add_rcu(%struct.list_head*, %struct.list_head*, %struct.list_head*) #0 {
  %4 = getelementptr inbounds %struct.list_head, %struct.list_head* %0, i32 0, i32 0
  store %struct.list_head* %2, %struct.list_head** %4, align 8
  %5 = getelementptr inbounds %struct.list_head, %struct.list_head* %0, i32 0, i32 1
  store %struct.list_head* %1, %struct.list_head** %5, align 8
  call void asm sideeffect "", "~{memory},~{dirflag},~{fpsr},~{flags}"() #3, !srcloc !8
  %6 = getelementptr inbounds %struct.list_head, %struct.list_head* %1, i32 0, i32 0
  store %struct.list_head* %0, %struct.list_head** %6, align 8
  %7 = getelementptr inbounds %struct.list_head, %struct.list_head* %2, i32 0, i32 1
  store %struct.list_head* %0, %struct.list_head** %7, align 8
  ret void
}

; Function Attrs: noinline nounwind uwtable
define internal void @__list_del_entry(%struct.list_head*) #0 {
  %2 = getelementptr inbounds %struct.list_head, %struct.list_head* %0, i32 0, i32 1
  %3 = load %struct.list_head*, %struct.list_head** %2, align 8
  %4 = getelementptr inbounds %struct.list_head, %struct.list_head* %0, i32 0, i32 0
  %5 = load %struct.list_head*, %struct.list_head** %4, align 8
  call void @__list_del(%struct.list_head* %3, %struct.list_head* %5)
  ret void
}

; Function Attrs: noinline nounwind uwtable
define internal void @__list_del(%struct.list_head*, %struct.list_head*) #0 {
  %3 = getelementptr inbounds %struct.list_head, %struct.list_head* %1, i32 0, i32 1
  store %struct.list_head* %0, %struct.list_head** %3, align 8
  %4 = getelementptr inbounds %struct.list_head, %struct.list_head* %0, i32 0, i32 0
  store %struct.list_head* %1, %struct.list_head** %4, align 8
  ret void
}

; Function Attrs: noinline nounwind uwtable
define internal void @rdev_rfkill_poll(%struct.cfg80211_registered_device*) #0 {
  %2 = getelementptr inbounds %struct.cfg80211_registered_device, %struct.cfg80211_registered_device* %0, i32 0, i32 34
  call void @trace_rdev_rfkill_poll(%struct.wiphy* %2)
  %3 = getelementptr inbounds %struct.cfg80211_registered_device, %struct.cfg80211_registered_device* %0, i32 0, i32 0
  %4 = load %struct.cfg80211_ops*, %struct.cfg80211_ops** %3, align 32
  %5 = getelementptr inbounds %struct.cfg80211_ops, %struct.cfg80211_ops* %4, i32 0, i32 46
  %6 = load void (%struct.wiphy*)*, void (%struct.wiphy*)** %5, align 8
  %7 = getelementptr inbounds %struct.cfg80211_registered_device, %struct.cfg80211_registered_device* %0, i32 0, i32 34
  call void %6(%struct.wiphy* %7)
  %8 = getelementptr inbounds %struct.cfg80211_registered_device, %struct.cfg80211_registered_device* %0, i32 0, i32 34
  call void @trace_rdev_return_void(%struct.wiphy* %8)
  ret void
}

; Function Attrs: noinline nounwind uwtable
define internal void @trace_rdev_rfkill_poll(%struct.wiphy*) #0 {
  %2 = getelementptr inbounds %struct.static_key, %struct.static_key* getelementptr inbounds (%struct.tracepoint, %struct.tracepoint* @__tracepoint_rdev_rfkill_poll, i32 0, i32 1), i32 0, i32 0
  %3 = call i32 @atomic_read(%struct.atomic_t* %2) #3
  %4 = icmp ne i32 %3, 0
  %5 = xor i1 %4, true
  %6 = zext i1 %4 to i32
  %7 = sext i32 %6 to i64
  %. = select i1 %4, i1 true, i1 false
  br i1 %., label %8, label %22

; <label>:8:                                      ; preds = %1
  call void @rcu_read_lock_sched_notrace()
  %9 = load volatile %struct.tracepoint_func*, %struct.tracepoint_func** getelementptr inbounds (%struct.tracepoint, %struct.tracepoint* @__tracepoint_rdev_rfkill_poll, i32 0, i32 4), align 8
  %10 = icmp ne %struct.tracepoint_func* %9, null
  br i1 %10, label %11, label %21

; <label>:11:                                     ; preds = %8, %11
  %.01 = phi %struct.tracepoint_func* [ %17, %11 ], [ %9, %8 ]
  %12 = getelementptr inbounds %struct.tracepoint_func, %struct.tracepoint_func* %.01, i32 0, i32 0
  %13 = load i8*, i8** %12, align 8
  %14 = getelementptr inbounds %struct.tracepoint_func, %struct.tracepoint_func* %.01, i32 0, i32 1
  %15 = load i8*, i8** %14, align 8
  %16 = bitcast i8* %13 to void (i8*, %struct.wiphy*)*
  call void %16(i8* %15, %struct.wiphy* %0)
  %17 = getelementptr inbounds %struct.tracepoint_func, %struct.tracepoint_func* %.01, i32 1
  %18 = getelementptr inbounds %struct.tracepoint_func, %struct.tracepoint_func* %17, i32 0, i32 0
  %19 = load i8*, i8** %18, align 8
  %20 = icmp ne i8* %19, null
  br i1 %20, label %11, label %21

; <label>:21:                                     ; preds = %11, %8
  call void @rcu_read_unlock_sched_notrace()
  br label %22

; <label>:22:                                     ; preds = %21, %1
  ret void
}

declare void @synchronize_sched() #1

; Function Attrs: noinline nounwind uwtable
define internal void @trace_rdev_set_wakeup(%struct.wiphy*, i1 zeroext) #0 {
  %3 = zext i1 %1 to i8
  %4 = getelementptr inbounds %struct.static_key, %struct.static_key* getelementptr inbounds (%struct.tracepoint, %struct.tracepoint* @__tracepoint_rdev_set_wakeup, i32 0, i32 1), i32 0, i32 0
  %5 = call i32 @atomic_read(%struct.atomic_t* %4) #3
  %6 = icmp ne i32 %5, 0
  %7 = xor i1 %6, true
  %8 = zext i1 %6 to i32
  %9 = sext i32 %8 to i64
  %. = select i1 %6, i1 true, i1 false
  br i1 %., label %10, label %25

; <label>:10:                                     ; preds = %2
  call void @rcu_read_lock_sched_notrace()
  %11 = load volatile %struct.tracepoint_func*, %struct.tracepoint_func** getelementptr inbounds (%struct.tracepoint, %struct.tracepoint* @__tracepoint_rdev_set_wakeup, i32 0, i32 4), align 8
  %12 = icmp ne %struct.tracepoint_func* %11, null
  br i1 %12, label %13, label %24

; <label>:13:                                     ; preds = %10, %13
  %.01 = phi %struct.tracepoint_func* [ %20, %13 ], [ %11, %10 ]
  %14 = getelementptr inbounds %struct.tracepoint_func, %struct.tracepoint_func* %.01, i32 0, i32 0
  %15 = load i8*, i8** %14, align 8
  %16 = getelementptr inbounds %struct.tracepoint_func, %struct.tracepoint_func* %.01, i32 0, i32 1
  %17 = load i8*, i8** %16, align 8
  %18 = bitcast i8* %15 to void (i8*, %struct.wiphy*, i1)*
  %19 = trunc i8 %3 to i1
  call void %18(i8* %17, %struct.wiphy* %0, i1 zeroext %19)
  %20 = getelementptr inbounds %struct.tracepoint_func, %struct.tracepoint_func* %.01, i32 1
  %21 = getelementptr inbounds %struct.tracepoint_func, %struct.tracepoint_func* %20, i32 0, i32 0
  %22 = load i8*, i8** %21, align 8
  %23 = icmp ne i8* %22, null
  br i1 %23, label %13, label %24

; <label>:24:                                     ; preds = %13, %10
  call void @rcu_read_unlock_sched_notrace()
  br label %25

; <label>:25:                                     ; preds = %24, %2
  ret void
}

declare void @sock_release(%struct.socket*) #1

; Function Attrs: noinline nounwind uwtable
define internal zeroext i1 @queue_work(%struct.workqueue_struct*, %struct.work_struct*) #0 {
  %3 = call zeroext i1 @queue_work_on(i32 64, %struct.workqueue_struct* %0, %struct.work_struct* %1)
  ret i1 %3
}

declare zeroext i1 @queue_work_on(i32, %struct.workqueue_struct*, %struct.work_struct*) #1

declare i32 @register_pernet_device(%struct.pernet_operations*) #1

declare i32 @wiphy_sysfs_init() #1

declare i32 @register_netdevice_notifier(%struct.notifier_block*) #1

declare i32 @nl80211_init() #1

declare i32 @regulatory_init() #1 section ".init.text"

declare %struct.workqueue_struct* @__alloc_workqueue_key(i8*, i32, i32, %struct.lock_class_key*, i8*, ...) #1

; Function Attrs: noinline nounwind uwtable
define internal i32 @cfg80211_netdev_notifier_call(%struct.notifier_block*, i64, i8*) #0 {
  %4 = alloca %struct.atomic64_t, align 8
  %5 = alloca %struct.raw_spinlock, align 2
  %6 = alloca %struct.raw_spinlock, align 2
  %7 = bitcast i8* %2 to %struct.net_device*
  %8 = getelementptr inbounds %struct.net_device, %struct.net_device* %7, i32 0, i32 55
  %9 = load %struct.wireless_dev*, %struct.wireless_dev** %8, align 8
  %10 = icmp ne %struct.wireless_dev* %9, null
  br i1 %10, label %11, label %217

; <label>:11:                                     ; preds = %3
  %12 = getelementptr inbounds %struct.wireless_dev, %struct.wireless_dev* %9, i32 0, i32 0
  %13 = load %struct.wiphy*, %struct.wiphy** %12, align 8
  %14 = call %struct.cfg80211_registered_device* @wiphy_to_dev(%struct.wiphy* %13)
  %15 = getelementptr inbounds %struct.wireless_dev, %struct.wireless_dev* %9, i32 0, i32 1
  %16 = load i32, i32* %15, align 8
  %17 = icmp eq i32 %16, 0
  %18 = xor i1 %17, true
  %19 = xor i1 %18, true
  %20 = zext i1 %19 to i32
  %21 = icmp ne i32 %20, 0
  %22 = xor i1 %21, true
  %23 = xor i1 %22, true
  %24 = zext i1 %23 to i32
  %25 = sext i32 %24 to i64
  %26 = icmp ne i64 %25, 0
  br i1 %26, label %27, label %28

; <label>:27:                                     ; preds = %11
  call void @warn_slowpath_null(i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.3, i32 0, i32 0), i32 902)
  br label %28

; <label>:28:                                     ; preds = %27, %11
  %29 = icmp ne i32 %20, 0
  %30 = xor i1 %29, true
  %31 = xor i1 %30, true
  %32 = zext i1 %31 to i32
  %33 = sext i32 %32 to i64
  switch i64 %1, label %217 [
    i64 16, label %34
    i64 5, label %37
    i64 9, label %124
    i64 2, label %125
    i64 1, label %131
    i64 6, label %173
    i64 13, label %188
  ]

; <label>:34:                                     ; preds = %28
  %35 = getelementptr inbounds %struct.net_device, %struct.net_device* %7, i32 0, i32 90
  %36 = getelementptr inbounds %struct.device, %struct.device* %35, i32 0, i32 4
  store %struct.device_type* @wiphy_type, %struct.device_type** %36, align 8
  br label %217

; <label>:37:                                     ; preds = %28
  %38 = getelementptr inbounds %struct.wireless_dev, %struct.wireless_dev* %9, i32 0, i32 7
  call void @__mutex_init(%struct.mutex* %38, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.16, i32 0, i32 0), %struct.lock_class_key* @cfg80211_netdev_notifier_call.__key)
  %39 = getelementptr inbounds %struct.wireless_dev, %struct.wireless_dev* %9, i32 0, i32 8
  call void @__init_work(%struct.work_struct* %39, i32 0)
  %40 = getelementptr inbounds %struct.wireless_dev, %struct.wireless_dev* %9, i32 0, i32 8
  %41 = getelementptr inbounds %struct.work_struct, %struct.work_struct* %40, i32 0, i32 0
  %42 = getelementptr inbounds %struct.atomic64_t, %struct.atomic64_t* %4, i32 0, i32 0
  store i64 68719476704, i64* %42, align 8
  %43 = bitcast %struct.atomic64_t* %41 to i8*
  %44 = bitcast %struct.atomic64_t* %4 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %43, i8* %44, i64 8, i32 8, i1 false)
  %45 = getelementptr inbounds %struct.wireless_dev, %struct.wireless_dev* %9, i32 0, i32 8
  %46 = getelementptr inbounds %struct.work_struct, %struct.work_struct* %45, i32 0, i32 1
  call void @INIT_LIST_HEAD(%struct.list_head* %46)
  %47 = getelementptr inbounds %struct.wireless_dev, %struct.wireless_dev* %9, i32 0, i32 8
  %48 = getelementptr inbounds %struct.work_struct, %struct.work_struct* %47, i32 0, i32 2
  store void (%struct.work_struct*)* @wdev_cleanup_work, void (%struct.work_struct*)** %48, align 8
  %49 = getelementptr inbounds %struct.wireless_dev, %struct.wireless_dev* %9, i32 0, i32 19
  call void @INIT_LIST_HEAD(%struct.list_head* %49)
  %50 = getelementptr inbounds %struct.wireless_dev, %struct.wireless_dev* %9, i32 0, i32 20
  %51 = call %struct.raw_spinlock* @spinlock_check(%struct.spinlock* %50)
  %52 = getelementptr inbounds %struct.wireless_dev, %struct.wireless_dev* %9, i32 0, i32 20
  %53 = getelementptr inbounds %struct.spinlock, %struct.spinlock* %52, i32 0, i32 0
  %54 = bitcast %union.anon.0* %53 to %struct.raw_spinlock*
  %55 = getelementptr inbounds %struct.raw_spinlock, %struct.raw_spinlock* %5, i32 0, i32 0
  %56 = getelementptr inbounds %struct.arch_spinlock, %struct.arch_spinlock* %55, i32 0, i32 0
  %57 = bitcast %union.anon.1* %56 to i16*
  store i16 0, i16* %57, align 2
  %58 = bitcast %struct.raw_spinlock* %54 to i8*
  %59 = bitcast %struct.raw_spinlock* %5 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %58, i8* %59, i64 2, i32 2, i1 false)
  %60 = getelementptr inbounds %struct.wireless_dev, %struct.wireless_dev* %9, i32 0, i32 5
  call void @INIT_LIST_HEAD(%struct.list_head* %60)
  %61 = getelementptr inbounds %struct.wireless_dev, %struct.wireless_dev* %9, i32 0, i32 6
  %62 = call %struct.raw_spinlock* @spinlock_check(%struct.spinlock* %61)
  %63 = getelementptr inbounds %struct.wireless_dev, %struct.wireless_dev* %9, i32 0, i32 6
  %64 = getelementptr inbounds %struct.spinlock, %struct.spinlock* %63, i32 0, i32 0
  %65 = bitcast %union.anon.0* %64 to %struct.raw_spinlock*
  %66 = getelementptr inbounds %struct.raw_spinlock, %struct.raw_spinlock* %6, i32 0, i32 0
  %67 = getelementptr inbounds %struct.arch_spinlock, %struct.arch_spinlock* %66, i32 0, i32 0
  %68 = bitcast %union.anon.1* %67 to i16*
  store i16 0, i16* %68, align 2
  %69 = bitcast %struct.raw_spinlock* %65 to i8*
  %70 = bitcast %struct.raw_spinlock* %6 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %69, i8* %70, i64 2, i32 2, i1 false)
  %71 = getelementptr inbounds %struct.cfg80211_registered_device, %struct.cfg80211_registered_device* %14, i32 0, i32 9
  call void @mutex_lock(%struct.mutex* %71)
  %72 = getelementptr inbounds %struct.cfg80211_registered_device, %struct.cfg80211_registered_device* %14, i32 0, i32 12
  %73 = load i32, i32* %72, align 4
  %74 = add nsw i32 %73, 1
  store i32 %74, i32* %72, align 4
  %75 = getelementptr inbounds %struct.wireless_dev, %struct.wireless_dev* %9, i32 0, i32 4
  store i32 %74, i32* %75, align 8
  %76 = getelementptr inbounds %struct.wireless_dev, %struct.wireless_dev* %9, i32 0, i32 2
  %77 = getelementptr inbounds %struct.cfg80211_registered_device, %struct.cfg80211_registered_device* %14, i32 0, i32 10
  call void @list_add_rcu(%struct.list_head* %76, %struct.list_head* %77)
  %78 = getelementptr inbounds %struct.cfg80211_registered_device, %struct.cfg80211_registered_device* %14, i32 0, i32 11
  %79 = load i32, i32* %78, align 8
  %80 = add nsw i32 %79, 1
  store i32 %80, i32* %78, align 8
  %81 = getelementptr inbounds %struct.net_device, %struct.net_device* %7, i32 0, i32 12
  %82 = load i64, i64* %81, align 16
  %83 = or i64 %82, 8192
  store i64 %83, i64* %81, align 16
  %84 = getelementptr inbounds %struct.net_device, %struct.net_device* %7, i32 0, i32 90
  %85 = getelementptr inbounds %struct.device, %struct.device* %84, i32 0, i32 2
  %86 = getelementptr inbounds %struct.cfg80211_registered_device, %struct.cfg80211_registered_device* %14, i32 0, i32 34
  %87 = getelementptr inbounds %struct.wiphy, %struct.wiphy* %86, i32 0, i32 42
  %88 = getelementptr inbounds %struct.device, %struct.device* %87, i32 0, i32 2
  %89 = call i32 @sysfs_create_link(%struct.kobject* %85, %struct.kobject* %88, i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.17, i32 0, i32 0))
  %90 = icmp ne i32 %89, 0
  br i1 %90, label %91, label %93

; <label>:91:                                     ; preds = %37
  %92 = call i32 (i8*, ...) @printk(i8* getelementptr inbounds ([55 x i8], [55 x i8]* @.str.18, i32 0, i32 0))
  br label %93

; <label>:93:                                     ; preds = %91, %37
  %94 = getelementptr inbounds %struct.wireless_dev, %struct.wireless_dev* %9, i32 0, i32 3
  store %struct.net_device* %7, %struct.net_device** %94, align 8
  %95 = getelementptr inbounds %struct.wireless_dev, %struct.wireless_dev* %9, i32 0, i32 16
  store i32 0, i32* %95, align 4
  %96 = getelementptr inbounds %struct.cfg80211_registered_device, %struct.cfg80211_registered_device* %14, i32 0, i32 9
  call void @mutex_unlock(%struct.mutex* %96)
  %97 = getelementptr inbounds %struct.wireless_dev, %struct.wireless_dev* %9, i32 0, i32 0
  %98 = load %struct.wiphy*, %struct.wiphy** %97, align 8
  %99 = getelementptr inbounds %struct.wiphy, %struct.wiphy* %98, i32 0, i32 10
  %100 = load i32, i32* %99, align 4
  %101 = and i32 %100, 16
  %102 = icmp ne i32 %101, 0
  %103 = getelementptr inbounds %struct.wireless_dev, %struct.wireless_dev* %9, i32 0, i32 25
  %.sink = select i1 %102, i8 1, i8 0
  store i8 %.sink, i8* %103, align 1
  %104 = getelementptr inbounds %struct.wireless_dev, %struct.wireless_dev* %9, i32 0, i32 26
  store i32 -1, i32* %104, align 4
  call void @netdev_set_default_ethtool_ops(%struct.net_device* %7, %struct.ethtool_ops* @cfg80211_ethtool_ops)
  %105 = getelementptr inbounds %struct.wireless_dev, %struct.wireless_dev* %9, i32 0, i32 1
  %106 = load i32, i32* %105, align 8
  %107 = icmp eq i32 %106, 2
  br i1 %107, label %116, label %108

; <label>:108:                                    ; preds = %93
  %109 = getelementptr inbounds %struct.wireless_dev, %struct.wireless_dev* %9, i32 0, i32 1
  %110 = load i32, i32* %109, align 8
  %111 = icmp eq i32 %110, 8
  br i1 %111, label %116, label %112

; <label>:112:                                    ; preds = %108
  %113 = getelementptr inbounds %struct.wireless_dev, %struct.wireless_dev* %9, i32 0, i32 1
  %114 = load i32, i32* %113, align 8
  %115 = icmp eq i32 %114, 1
  br i1 %115, label %116, label %217

; <label>:116:                                    ; preds = %112, %108, %93
  %117 = getelementptr inbounds %struct.wireless_dev, %struct.wireless_dev* %9, i32 0, i32 9
  %118 = load i8, i8* %117, align 8
  %119 = trunc i8 %118 to i1
  br i1 %119, label %217, label %120

; <label>:120:                                    ; preds = %116
  %121 = getelementptr inbounds %struct.net_device, %struct.net_device* %7, i32 0, i32 25
  %122 = load i32, i32* %121, align 4
  %123 = or i32 %122, 2048
  store i32 %123, i32* %121, align 4
  br label %217

; <label>:124:                                    ; preds = %28
  call void @cfg80211_leave(%struct.cfg80211_registered_device* %14, %struct.wireless_dev* %9)
  br label %217

; <label>:125:                                    ; preds = %28
  %126 = getelementptr inbounds %struct.wireless_dev, %struct.wireless_dev* %9, i32 0, i32 1
  %127 = load i32, i32* %126, align 8
  call void @cfg80211_update_iface_num(%struct.cfg80211_registered_device* %14, i32 %127, i32 -1)
  call void @dev_hold(%struct.net_device* %7)
  %128 = load %struct.workqueue_struct*, %struct.workqueue_struct** @cfg80211_wq, align 8
  %129 = getelementptr inbounds %struct.wireless_dev, %struct.wireless_dev* %9, i32 0, i32 8
  %130 = call zeroext i1 @queue_work(%struct.workqueue_struct* %128, %struct.work_struct* %129)
  br label %217

; <label>:131:                                    ; preds = %28
  %132 = getelementptr inbounds %struct.wireless_dev, %struct.wireless_dev* %9, i32 0, i32 8
  %133 = call zeroext i1 @cancel_work_sync(%struct.work_struct* %132)
  br i1 %133, label %134, label %140

; <label>:134:                                    ; preds = %131
  %135 = getelementptr inbounds %struct.cfg80211_registered_device, %struct.cfg80211_registered_device* %14, i32 0, i32 9
  call void @mutex_lock(%struct.mutex* %135)
  %136 = getelementptr inbounds %struct.cfg80211_registered_device, %struct.cfg80211_registered_device* %14, i32 0, i32 13
  %137 = load i32, i32* %136, align 16
  %138 = add nsw i32 %137, -1
  store i32 %138, i32* %136, align 16
  %139 = getelementptr inbounds %struct.cfg80211_registered_device, %struct.cfg80211_registered_device* %14, i32 0, i32 9
  call void @mutex_unlock(%struct.mutex* %139)
  call void @dev_put(%struct.net_device* %7)
  br label %140

; <label>:140:                                    ; preds = %134, %131
  %141 = getelementptr inbounds %struct.wireless_dev, %struct.wireless_dev* %9, i32 0, i32 1
  %142 = load i32, i32* %141, align 8
  call void @cfg80211_update_iface_num(%struct.cfg80211_registered_device* %14, i32 %142, i32 1)
  call void @cfg80211_lock_rdev(%struct.cfg80211_registered_device* %14)
  %143 = getelementptr inbounds %struct.cfg80211_registered_device, %struct.cfg80211_registered_device* %14, i32 0, i32 9
  call void @mutex_lock(%struct.mutex* %143)
  %144 = getelementptr inbounds %struct.cfg80211_registered_device, %struct.cfg80211_registered_device* %14, i32 0, i32 28
  call void @mutex_lock(%struct.mutex* %144)
  call void @wdev_lock(%struct.wireless_dev* %9)
  call void @wdev_unlock(%struct.wireless_dev* %9)
  %145 = getelementptr inbounds %struct.cfg80211_registered_device, %struct.cfg80211_registered_device* %14, i32 0, i32 28
  call void @mutex_unlock(%struct.mutex* %145)
  %146 = getelementptr inbounds %struct.cfg80211_registered_device, %struct.cfg80211_registered_device* %14, i32 0, i32 13
  %147 = load i32, i32* %146, align 16
  %148 = add nsw i32 %147, 1
  store i32 %148, i32* %146, align 16
  %149 = getelementptr inbounds %struct.cfg80211_registered_device, %struct.cfg80211_registered_device* %14, i32 0, i32 9
  call void @mutex_unlock(%struct.mutex* %149)
  call void @cfg80211_unlock_rdev(%struct.cfg80211_registered_device* %14)
  %150 = getelementptr inbounds %struct.wireless_dev, %struct.wireless_dev* %9, i32 0, i32 1
  %151 = load i32, i32* %150, align 8
  %152 = icmp eq i32 %151, 2
  br i1 %152, label %157, label %153

; <label>:153:                                    ; preds = %140
  %154 = getelementptr inbounds %struct.wireless_dev, %struct.wireless_dev* %9, i32 0, i32 1
  %155 = load i32, i32* %154, align 8
  %156 = icmp eq i32 %155, 8
  br i1 %156, label %157, label %217

; <label>:157:                                    ; preds = %153, %140
  %158 = getelementptr inbounds %struct.cfg80211_registered_device, %struct.cfg80211_registered_device* %14, i32 0, i32 0
  %159 = load %struct.cfg80211_ops*, %struct.cfg80211_ops** %158, align 32
  %160 = getelementptr inbounds %struct.cfg80211_ops, %struct.cfg80211_ops* %159, i32 0, i32 56
  %161 = load i32 (%struct.wiphy*, %struct.net_device*, i1, i32)*, i32 (%struct.wiphy*, %struct.net_device*, i1, i32)** %160, align 8
  %162 = icmp ne i32 (%struct.wiphy*, %struct.net_device*, i1, i32)* %161, null
  br i1 %162, label %163, label %217

; <label>:163:                                    ; preds = %157
  %164 = getelementptr inbounds %struct.wireless_dev, %struct.wireless_dev* %9, i32 0, i32 25
  %165 = load i8, i8* %164, align 1
  %166 = trunc i8 %165 to i1
  %167 = getelementptr inbounds %struct.wireless_dev, %struct.wireless_dev* %9, i32 0, i32 26
  %168 = load i32, i32* %167, align 4
  %169 = call i32 @rdev_set_power_mgmt(%struct.cfg80211_registered_device* %14, %struct.net_device* %7, i1 zeroext %166, i32 %168)
  %170 = icmp ne i32 %169, 0
  br i1 %170, label %171, label %217

; <label>:171:                                    ; preds = %163
  %172 = getelementptr inbounds %struct.wireless_dev, %struct.wireless_dev* %9, i32 0, i32 25
  store i8 0, i8* %172, align 1
  br label %217

; <label>:173:                                    ; preds = %28
  %174 = getelementptr inbounds %struct.cfg80211_registered_device, %struct.cfg80211_registered_device* %14, i32 0, i32 9
  call void @mutex_lock(%struct.mutex* %174)
  %175 = getelementptr inbounds %struct.wireless_dev, %struct.wireless_dev* %9, i32 0, i32 2
  %176 = call i32 @list_empty(%struct.list_head* %175)
  %177 = icmp ne i32 %176, 0
  br i1 %177, label %185, label %178

; <label>:178:                                    ; preds = %173
  %179 = getelementptr inbounds %struct.net_device, %struct.net_device* %7, i32 0, i32 90
  %180 = getelementptr inbounds %struct.device, %struct.device* %179, i32 0, i32 2
  call void @sysfs_remove_link(%struct.kobject* %180, i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.17, i32 0, i32 0))
  %181 = getelementptr inbounds %struct.wireless_dev, %struct.wireless_dev* %9, i32 0, i32 2
  call void @list_del_rcu(%struct.list_head* %181)
  %182 = getelementptr inbounds %struct.cfg80211_registered_device, %struct.cfg80211_registered_device* %14, i32 0, i32 11
  %183 = load i32, i32* %182, align 8
  %184 = add nsw i32 %183, 1
  store i32 %184, i32* %182, align 8
  call void @cfg80211_mlme_purge_registrations(%struct.wireless_dev* %9)
  br label %185

; <label>:185:                                    ; preds = %178, %173
  %186 = getelementptr inbounds %struct.cfg80211_registered_device, %struct.cfg80211_registered_device* %14, i32 0, i32 9
  call void @mutex_unlock(%struct.mutex* %186)
  call void @synchronize_rcu()
  %187 = getelementptr inbounds %struct.wireless_dev, %struct.wireless_dev* %9, i32 0, i32 2
  call void @INIT_LIST_HEAD(%struct.list_head* %187)
  call void @cfg80211_process_wdev_events(%struct.wireless_dev* %9)
  br label %217

; <label>:188:                                    ; preds = %28
  %189 = getelementptr inbounds %struct.wireless_dev, %struct.wireless_dev* %9, i32 0, i32 0
  %190 = load %struct.wiphy*, %struct.wiphy** %189, align 8
  %191 = getelementptr inbounds %struct.wiphy, %struct.wiphy* %190, i32 0, i32 8
  %192 = load i16, i16* %191, align 16
  %193 = zext i16 %192 to i64
  %194 = getelementptr inbounds %struct.wireless_dev, %struct.wireless_dev* %9, i32 0, i32 1
  %195 = load i32, i32* %194, align 8
  %196 = zext i32 %195 to i64
  %197 = shl i64 1, %196
  %198 = and i64 %193, %197
  %199 = icmp ne i64 %198, 0
  br i1 %199, label %202, label %200

; <label>:200:                                    ; preds = %188
  %201 = call i32 @notifier_from_errno(i32 -95)
  br label %217

; <label>:202:                                    ; preds = %188
  %203 = getelementptr inbounds %struct.cfg80211_registered_device, %struct.cfg80211_registered_device* %14, i32 0, i32 4
  %204 = load %struct.rfkill*, %struct.rfkill** %203, align 8
  %205 = call zeroext i1 @rfkill_blocked(%struct.rfkill* %204)
  br i1 %205, label %206, label %208

; <label>:206:                                    ; preds = %202
  %207 = call i32 @notifier_from_errno(i32 -132)
  br label %217

; <label>:208:                                    ; preds = %202
  %209 = getelementptr inbounds %struct.cfg80211_registered_device, %struct.cfg80211_registered_device* %14, i32 0, i32 9
  call void @mutex_lock(%struct.mutex* %209)
  %210 = getelementptr inbounds %struct.wireless_dev, %struct.wireless_dev* %9, i32 0, i32 1
  %211 = load i32, i32* %210, align 8
  %212 = call i32 @cfg80211_can_add_interface(%struct.cfg80211_registered_device* %14, i32 %211)
  %213 = getelementptr inbounds %struct.cfg80211_registered_device, %struct.cfg80211_registered_device* %14, i32 0, i32 9
  call void @mutex_unlock(%struct.mutex* %213)
  %214 = icmp ne i32 %212, 0
  br i1 %214, label %215, label %217

; <label>:215:                                    ; preds = %208
  %216 = call i32 @notifier_from_errno(i32 %212)
  br label %217

; <label>:217:                                    ; preds = %28, %34, %124, %125, %185, %120, %116, %112, %163, %171, %157, %153, %208, %3, %215, %206, %200
  %.0 = phi i32 [ %207, %206 ], [ %216, %215 ], [ %201, %200 ], [ 0, %3 ], [ 0, %208 ], [ 0, %153 ], [ 0, %157 ], [ 0, %171 ], [ 0, %163 ], [ 0, %112 ], [ 0, %116 ], [ 0, %120 ], [ 0, %185 ], [ 0, %125 ], [ 0, %124 ], [ 0, %34 ], [ 0, %28 ]
  ret i32 %.0
}

; Function Attrs: noinline nounwind uwtable
define internal void @wdev_cleanup_work(%struct.work_struct*) #0 {
  %2 = bitcast %struct.work_struct* %0 to i8*
  %3 = getelementptr inbounds i8, i8* %2, i64 -112
  %4 = bitcast i8* %3 to %struct.wireless_dev*
  %5 = getelementptr inbounds %struct.wireless_dev, %struct.wireless_dev* %4, i32 0, i32 0
  %6 = load %struct.wiphy*, %struct.wiphy** %5, align 8
  %7 = call %struct.cfg80211_registered_device* @wiphy_to_dev(%struct.wiphy* %6)
  %8 = getelementptr inbounds %struct.cfg80211_registered_device, %struct.cfg80211_registered_device* %7, i32 0, i32 28
  call void @mutex_lock(%struct.mutex* %8)
  %9 = getelementptr inbounds %struct.cfg80211_registered_device, %struct.cfg80211_registered_device* %7, i32 0, i32 23
  %10 = load %struct.cfg80211_scan_request*, %struct.cfg80211_scan_request** %9, align 16
  %11 = icmp ne %struct.cfg80211_scan_request* %10, null
  br i1 %11, label %12, label %18

; <label>:12:                                     ; preds = %1
  %13 = getelementptr inbounds %struct.cfg80211_registered_device, %struct.cfg80211_registered_device* %7, i32 0, i32 23
  %14 = load %struct.cfg80211_scan_request*, %struct.cfg80211_scan_request** %13, align 16
  %15 = getelementptr inbounds %struct.cfg80211_scan_request, %struct.cfg80211_scan_request* %14, i32 0, i32 7
  %16 = load %struct.wireless_dev*, %struct.wireless_dev** %15, align 8
  %17 = icmp eq %struct.wireless_dev* %16, %4
  br label %18

; <label>:18:                                     ; preds = %12, %1
  %19 = phi i1 [ false, %1 ], [ %17, %12 ]
  %20 = xor i1 %19, true
  %21 = xor i1 %20, true
  %22 = zext i1 %21 to i32
  %23 = icmp ne i32 %22, 0
  %24 = xor i1 %23, true
  %25 = xor i1 %24, true
  %26 = zext i1 %25 to i32
  %27 = sext i32 %26 to i64
  %28 = icmp ne i64 %27, 0
  br i1 %28, label %29, label %30

; <label>:29:                                     ; preds = %18
  call void @warn_slowpath_null(i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.3, i32 0, i32 0), i32 788)
  br label %30

; <label>:30:                                     ; preds = %29, %18
  %31 = icmp ne i32 %22, 0
  %32 = xor i1 %31, true
  %33 = xor i1 %32, true
  %34 = zext i1 %33 to i32
  %35 = sext i32 %34 to i64
  %36 = icmp ne i64 %35, 0
  br i1 %36, label %37, label %41

; <label>:37:                                     ; preds = %30
  %38 = getelementptr inbounds %struct.cfg80211_registered_device, %struct.cfg80211_registered_device* %7, i32 0, i32 23
  %39 = load %struct.cfg80211_scan_request*, %struct.cfg80211_scan_request** %38, align 16
  %40 = getelementptr inbounds %struct.cfg80211_scan_request, %struct.cfg80211_scan_request* %39, i32 0, i32 10
  store i8 1, i8* %40, align 8
  call void @___cfg80211_scan_done(%struct.cfg80211_registered_device* %7, i1 zeroext true)
  br label %41

; <label>:41:                                     ; preds = %37, %30
  %42 = getelementptr inbounds %struct.cfg80211_registered_device, %struct.cfg80211_registered_device* %7, i32 0, i32 24
  %43 = load %struct.cfg80211_sched_scan_request*, %struct.cfg80211_sched_scan_request** %42, align 8
  %44 = icmp ne %struct.cfg80211_sched_scan_request* %43, null
  br i1 %44, label %45, label %53

; <label>:45:                                     ; preds = %41
  %46 = getelementptr inbounds %struct.cfg80211_registered_device, %struct.cfg80211_registered_device* %7, i32 0, i32 24
  %47 = load %struct.cfg80211_sched_scan_request*, %struct.cfg80211_sched_scan_request** %46, align 8
  %48 = getelementptr inbounds %struct.cfg80211_sched_scan_request, %struct.cfg80211_sched_scan_request* %47, i32 0, i32 11
  %49 = load %struct.net_device*, %struct.net_device** %48, align 8
  %50 = getelementptr inbounds %struct.wireless_dev, %struct.wireless_dev* %4, i32 0, i32 3
  %51 = load %struct.net_device*, %struct.net_device** %50, align 8
  %52 = icmp eq %struct.net_device* %49, %51
  br label %53

; <label>:53:                                     ; preds = %45, %41
  %54 = phi i1 [ false, %41 ], [ %52, %45 ]
  %55 = xor i1 %54, true
  %56 = xor i1 %55, true
  %57 = zext i1 %56 to i32
  %58 = icmp ne i32 %57, 0
  %59 = xor i1 %58, true
  %60 = xor i1 %59, true
  %61 = zext i1 %60 to i32
  %62 = sext i32 %61 to i64
  %63 = icmp ne i64 %62, 0
  br i1 %63, label %64, label %65

; <label>:64:                                     ; preds = %53
  call void @warn_slowpath_null(i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.3, i32 0, i32 0), i32 794)
  br label %65

; <label>:65:                                     ; preds = %64, %53
  %66 = icmp ne i32 %57, 0
  %67 = xor i1 %66, true
  %68 = xor i1 %67, true
  %69 = zext i1 %68 to i32
  %70 = sext i32 %69 to i64
  %71 = icmp ne i64 %70, 0
  br i1 %71, label %72, label %74

; <label>:72:                                     ; preds = %65
  %73 = call i32 @__cfg80211_stop_sched_scan(%struct.cfg80211_registered_device* %7, i1 zeroext false)
  br label %74

; <label>:74:                                     ; preds = %72, %65
  %75 = getelementptr inbounds %struct.cfg80211_registered_device, %struct.cfg80211_registered_device* %7, i32 0, i32 28
  call void @mutex_unlock(%struct.mutex* %75)
  %76 = getelementptr inbounds %struct.cfg80211_registered_device, %struct.cfg80211_registered_device* %7, i32 0, i32 9
  call void @mutex_lock(%struct.mutex* %76)
  %77 = getelementptr inbounds %struct.cfg80211_registered_device, %struct.cfg80211_registered_device* %7, i32 0, i32 13
  %78 = load i32, i32* %77, align 16
  %79 = add nsw i32 %78, -1
  store i32 %79, i32* %77, align 16
  %80 = getelementptr inbounds %struct.cfg80211_registered_device, %struct.cfg80211_registered_device* %7, i32 0, i32 9
  call void @mutex_unlock(%struct.mutex* %80)
  %81 = getelementptr inbounds %struct.cfg80211_registered_device, %struct.cfg80211_registered_device* %7, i32 0, i32 14
  call void @__wake_up(%struct.__wait_queue_head* %81, i32 3, i32 1, i8* null)
  %82 = getelementptr inbounds %struct.wireless_dev, %struct.wireless_dev* %4, i32 0, i32 3
  %83 = load %struct.net_device*, %struct.net_device** %82, align 8
  call void @dev_put(%struct.net_device* %83)
  ret void
}

declare i32 @sysfs_create_link(%struct.kobject*, %struct.kobject*, i8*) #1

declare void @netdev_set_default_ethtool_ops(%struct.net_device*, %struct.ethtool_ops*) #1

; Function Attrs: noinline nounwind uwtable
define internal void @dev_hold(%struct.net_device*) #0 {
  %2 = getelementptr inbounds %struct.net_device, %struct.net_device* %0, i32 0, i32 77
  %3 = load i32*, i32** %2, align 8
  call void asm "incl %gs:${0:P}", "=*m,*m,~{dirflag},~{fpsr},~{flags}"(i32* %3, i32* %3) #3, !srcloc !9
  ret void
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @rdev_set_power_mgmt(%struct.cfg80211_registered_device*, %struct.net_device*, i1 zeroext, i32) #0 {
  %5 = zext i1 %2 to i8
  %6 = getelementptr inbounds %struct.cfg80211_registered_device, %struct.cfg80211_registered_device* %0, i32 0, i32 34
  %7 = trunc i8 %5 to i1
  call void @trace_rdev_set_power_mgmt(%struct.wiphy* %6, %struct.net_device* %1, i1 zeroext %7, i32 %3)
  %8 = getelementptr inbounds %struct.cfg80211_registered_device, %struct.cfg80211_registered_device* %0, i32 0, i32 0
  %9 = load %struct.cfg80211_ops*, %struct.cfg80211_ops** %8, align 32
  %10 = getelementptr inbounds %struct.cfg80211_ops, %struct.cfg80211_ops* %9, i32 0, i32 56
  %11 = load i32 (%struct.wiphy*, %struct.net_device*, i1, i32)*, i32 (%struct.wiphy*, %struct.net_device*, i1, i32)** %10, align 8
  %12 = getelementptr inbounds %struct.cfg80211_registered_device, %struct.cfg80211_registered_device* %0, i32 0, i32 34
  %13 = trunc i8 %5 to i1
  %14 = call i32 %11(%struct.wiphy* %12, %struct.net_device* %1, i1 zeroext %13, i32 %3)
  %15 = getelementptr inbounds %struct.cfg80211_registered_device, %struct.cfg80211_registered_device* %0, i32 0, i32 34
  call void @trace_rdev_return_int(%struct.wiphy* %15, i32 %14)
  ret i32 %14
}

declare void @sysfs_remove_link(%struct.kobject*, i8*) #1

declare void @cfg80211_mlme_purge_registrations(%struct.wireless_dev*) #1

declare void @cfg80211_process_wdev_events(%struct.wireless_dev*) #1

; Function Attrs: noinline nounwind uwtable
define internal i32 @notifier_from_errno(i32) #0 {
  %2 = icmp ne i32 %0, 0
  %3 = sub nsw i32 1, %0
  %4 = or i32 32768, %3
  %.0 = select i1 %2, i32 %4, i32 1
  ret i32 %.0
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @cfg80211_can_add_interface(%struct.cfg80211_registered_device*, i32) #0 {
  %3 = call i32 @cfg80211_can_change_interface(%struct.cfg80211_registered_device* %0, %struct.wireless_dev* null, i32 %1)
  ret i32 %3
}

declare void @__wake_up(%struct.__wait_queue_head*, i32, i32, i8*) #1

; Function Attrs: noinline nounwind uwtable
define internal void @trace_rdev_set_power_mgmt(%struct.wiphy*, %struct.net_device*, i1 zeroext, i32) #0 {
  %5 = zext i1 %2 to i8
  %6 = getelementptr inbounds %struct.static_key, %struct.static_key* getelementptr inbounds (%struct.tracepoint, %struct.tracepoint* @__tracepoint_rdev_set_power_mgmt, i32 0, i32 1), i32 0, i32 0
  %7 = call i32 @atomic_read(%struct.atomic_t* %6) #3
  %8 = icmp ne i32 %7, 0
  %9 = xor i1 %8, true
  %10 = zext i1 %8 to i32
  %11 = sext i32 %10 to i64
  %. = select i1 %8, i1 true, i1 false
  br i1 %., label %12, label %27

; <label>:12:                                     ; preds = %4
  call void @rcu_read_lock_sched_notrace()
  %13 = load volatile %struct.tracepoint_func*, %struct.tracepoint_func** getelementptr inbounds (%struct.tracepoint, %struct.tracepoint* @__tracepoint_rdev_set_power_mgmt, i32 0, i32 4), align 8
  %14 = icmp ne %struct.tracepoint_func* %13, null
  br i1 %14, label %15, label %26

; <label>:15:                                     ; preds = %12, %15
  %.01 = phi %struct.tracepoint_func* [ %22, %15 ], [ %13, %12 ]
  %16 = getelementptr inbounds %struct.tracepoint_func, %struct.tracepoint_func* %.01, i32 0, i32 0
  %17 = load i8*, i8** %16, align 8
  %18 = getelementptr inbounds %struct.tracepoint_func, %struct.tracepoint_func* %.01, i32 0, i32 1
  %19 = load i8*, i8** %18, align 8
  %20 = bitcast i8* %17 to void (i8*, %struct.wiphy*, %struct.net_device*, i1, i32)*
  %21 = trunc i8 %5 to i1
  call void %20(i8* %19, %struct.wiphy* %0, %struct.net_device* %1, i1 zeroext %21, i32 %3)
  %22 = getelementptr inbounds %struct.tracepoint_func, %struct.tracepoint_func* %.01, i32 1
  %23 = getelementptr inbounds %struct.tracepoint_func, %struct.tracepoint_func* %22, i32 0, i32 0
  %24 = load i8*, i8** %23, align 8
  %25 = icmp ne i8* %24, null
  br i1 %25, label %15, label %26

; <label>:26:                                     ; preds = %15, %12
  call void @rcu_read_unlock_sched_notrace()
  br label %27

; <label>:27:                                     ; preds = %26, %4
  ret void
}

; Function Attrs: noinline nounwind uwtable
define internal void @trace_rdev_return_int(%struct.wiphy*, i32) #0 {
  %3 = getelementptr inbounds %struct.static_key, %struct.static_key* getelementptr inbounds (%struct.tracepoint, %struct.tracepoint* @__tracepoint_rdev_return_int, i32 0, i32 1), i32 0, i32 0
  %4 = call i32 @atomic_read(%struct.atomic_t* %3) #3
  %5 = icmp ne i32 %4, 0
  %6 = xor i1 %5, true
  %7 = zext i1 %5 to i32
  %8 = sext i32 %7 to i64
  %. = select i1 %5, i1 true, i1 false
  br i1 %., label %9, label %23

; <label>:9:                                      ; preds = %2
  call void @rcu_read_lock_sched_notrace()
  %10 = load volatile %struct.tracepoint_func*, %struct.tracepoint_func** getelementptr inbounds (%struct.tracepoint, %struct.tracepoint* @__tracepoint_rdev_return_int, i32 0, i32 4), align 8
  %11 = icmp ne %struct.tracepoint_func* %10, null
  br i1 %11, label %12, label %22

; <label>:12:                                     ; preds = %9, %12
  %.01 = phi %struct.tracepoint_func* [ %18, %12 ], [ %10, %9 ]
  %13 = getelementptr inbounds %struct.tracepoint_func, %struct.tracepoint_func* %.01, i32 0, i32 0
  %14 = load i8*, i8** %13, align 8
  %15 = getelementptr inbounds %struct.tracepoint_func, %struct.tracepoint_func* %.01, i32 0, i32 1
  %16 = load i8*, i8** %15, align 8
  %17 = bitcast i8* %14 to void (i8*, %struct.wiphy*, i32)*
  call void %17(i8* %16, %struct.wiphy* %0, i32 %1)
  %18 = getelementptr inbounds %struct.tracepoint_func, %struct.tracepoint_func* %.01, i32 1
  %19 = getelementptr inbounds %struct.tracepoint_func, %struct.tracepoint_func* %18, i32 0, i32 0
  %20 = load i8*, i8** %19, align 8
  %21 = icmp ne i8* %20, null
  br i1 %21, label %12, label %22

; <label>:22:                                     ; preds = %12, %9
  call void @rcu_read_unlock_sched_notrace()
  br label %23

; <label>:23:                                     ; preds = %22, %2
  ret void
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @cfg80211_can_change_interface(%struct.cfg80211_registered_device*, %struct.wireless_dev*, i32) #0 {
  %4 = call i32 @cfg80211_can_use_iftype_chan(%struct.cfg80211_registered_device* %0, %struct.wireless_dev* %1, i32 %2, %struct.ieee80211_channel* null, i32 0, i8 zeroext 0)
  ret i32 %4
}

declare i32 @cfg80211_can_use_iftype_chan(%struct.cfg80211_registered_device*, %struct.wireless_dev*, i32, %struct.ieee80211_channel*, i32, i8 zeroext) #1

; Function Attrs: noinline nounwind uwtable
define internal void @cfg80211_pernet_exit(%struct.net*) #0 {
  call void @rtnl_lock()
  call void @mutex_lock(%struct.mutex* @cfg80211_mutex)
  br label %2

; <label>:2:                                      ; preds = %33, %1
  %.sink2 = phi %struct.list_head** [ %35, %33 ], [ getelementptr inbounds (%struct.list_head, %struct.list_head* @cfg80211_rdev_list, i32 0, i32 0), %1 ]
  %3 = load %struct.list_head*, %struct.list_head** %.sink2, align 8
  %4 = bitcast %struct.list_head* %3 to i8*
  %5 = getelementptr inbounds i8, i8* %4, i64 -8
  %6 = bitcast i8* %5 to %struct.cfg80211_registered_device*
  %7 = getelementptr inbounds %struct.cfg80211_registered_device, %struct.cfg80211_registered_device* %6, i32 0, i32 1
  %8 = icmp ne %struct.list_head* %7, @cfg80211_rdev_list
  br i1 %8, label %9, label %36

; <label>:9:                                      ; preds = %2
  %10 = getelementptr inbounds %struct.cfg80211_registered_device, %struct.cfg80211_registered_device* %6, i32 0, i32 34
  %11 = call %struct.net* @wiphy_net(%struct.wiphy* %10)
  %12 = call i32 @net_eq(%struct.net* %11, %struct.net* %0)
  %13 = icmp ne i32 %12, 0
  br i1 %13, label %14, label %33

; <label>:14:                                     ; preds = %9
  %15 = call i32 @cfg80211_switch_netns(%struct.cfg80211_registered_device* %6, %struct.net* @init_net)
  %16 = icmp ne i32 %15, 0
  %17 = xor i1 %16, true
  %18 = xor i1 %17, true
  %19 = zext i1 %18 to i32
  %20 = icmp ne i32 %19, 0
  %21 = xor i1 %20, true
  %22 = xor i1 %21, true
  %23 = zext i1 %22 to i32
  %24 = sext i32 %23 to i64
  %25 = icmp ne i64 %24, 0
  br i1 %25, label %26, label %27

; <label>:26:                                     ; preds = %14
  call void @warn_slowpath_null(i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.3, i32 0, i32 0), i32 1095)
  br label %27

; <label>:27:                                     ; preds = %26, %14
  %28 = icmp ne i32 %19, 0
  %29 = xor i1 %28, true
  %30 = xor i1 %29, true
  %31 = zext i1 %30 to i32
  %32 = sext i32 %31 to i64
  br label %33

; <label>:33:                                     ; preds = %9, %27
  %34 = getelementptr inbounds %struct.cfg80211_registered_device, %struct.cfg80211_registered_device* %6, i32 0, i32 1
  %35 = getelementptr inbounds %struct.list_head, %struct.list_head* %34, i32 0, i32 0
  br label %2

; <label>:36:                                     ; preds = %2
  call void @mutex_unlock(%struct.mutex* @cfg80211_mutex)
  call void @rtnl_unlock()
  ret void
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @net_eq(%struct.net*, %struct.net*) #0 {
  %3 = icmp eq %struct.net* %0, %1
  %4 = zext i1 %3 to i32
  ret i32 %4
}

attributes #0 = { noinline nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { argmemonly nounwind }
attributes #3 = { nounwind }
attributes #4 = { nounwind readnone }

!llvm.ident = !{!0}

!0 = !{!"clang version 4.0.1 (tags/RELEASE_401/final)"}
!1 = !{i32 -2143188023, i32 -2143187998, i32 -2143187728, i32 -2143187931, i32 -2143187900, i32 -2143187870}
!2 = !{i32 -2143610745}
!3 = !{i32 -2146915470}
!4 = !{i32 -2141898378, i32 -2141898353, i32 -2141898083, i32 -2141898286, i32 -2141898255, i32 -2141898225}
!5 = !{i32 -2143186023, i32 -2143185998, i32 -2143185728, i32 -2143185931, i32 -2143185900, i32 -2143185870}
!6 = !{i32 -2146353872}
!7 = !{i32 -2146353566}
!8 = !{i32 -2145521827}
!9 = !{i32 -2143596779}
