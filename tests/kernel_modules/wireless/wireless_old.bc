; ModuleID = 'net/wireless/core.bc'
source_filename = "net/wireless/core.c"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%struct.list_head = type { %struct.list_head*, %struct.list_head* }
%struct.mutex = type { %struct.atomic_t, %struct.spinlock, %struct.list_head, %struct.task_struct*, i8* }
%struct.atomic_t = type { i32 }
%struct.spinlock = type { %union.anon.0 }
%union.anon.0 = type { %struct.raw_spinlock }
%struct.raw_spinlock = type { %struct.arch_spinlock }
%struct.arch_spinlock = type { %union.anon.1 }
%union.anon.1 = type { i16 }
%struct.task_struct = type { i64, i8*, %struct.atomic_t, i32, i32, %struct.llist_node, i32, i32, i32, i32, i32, i32, %struct.sched_class*, %struct.sched_entity, %struct.sched_rt_entity, %struct.task_group*, i8, i32, i32, i32, %struct.cpumask, %struct.sched_info, %struct.list_head, %struct.plist_node, %struct.mm_struct*, %struct.mm_struct*, %struct.task_rss_stat, i32, i32, i32, i32, i32, i32, i8, i32, i32, %struct.task_struct*, %struct.task_struct*, %struct.list_head, %struct.list_head, %struct.task_struct*, %struct.list_head, %struct.list_head, [3 x %struct.pid_link], %struct.list_head, %struct.completion*, i32*, i32*, i64, i64, i64, i64, i64, %struct.cputime, i64, i64, %struct.timespec, %struct.timespec, i64, i64, %struct.task_cputime, [3 x %struct.list_head], %struct.cred*, %struct.cred*, [16 x i8], i32, i32, %struct.sysv_sem, %struct.thread_struct, %struct.fs_struct*, %struct.files_struct*, %struct.nsproxy*, %struct.signal_struct*, %struct.sighand_struct*, %struct.sigset_t, %struct.sigset_t, %struct.sigset_t, %struct.sigpending, i64, i64, i32 (i8*)*, i8*, %struct.sigset_t*, %struct.callback_head*, %struct.audit_context*, i32, i32, %struct.seccomp, i32, i32, %struct.spinlock, %struct.raw_spinlock, %struct.plist_head, %struct.rt_mutex_waiter*, i8*, %struct.bio_list*, %struct.blk_plug*, %struct.reclaim_state*, %struct.backing_dev_info*, %struct.io_context*, i64, %struct.siginfo*, %struct.task_io_accounting, i64, i64, i64, %struct.nodemask_t, %struct.seqcount, i32, i32, %struct.css_set*, %struct.list_head, %struct.robust_list_head*, %struct.compat_robust_list_head*, %struct.list_head, %struct.futex_pi_state*, [2 x %struct.perf_event_context*], %struct.mutex, %struct.list_head, %struct.mempolicy*, i16, i16, %struct.callback_head, %struct.pipe_inode_info*, %struct.page_frag, %struct.task_delay_info*, i32, i32, i64, i64, i64, i64, i64, %struct.atomic_t }
%struct.llist_node = type { %struct.llist_node* }
%struct.sched_class = type opaque
%struct.sched_entity = type { %struct.load_weight, %struct.rb_node, %struct.list_head, i32, i64, i64, i64, i64, i64, %struct.sched_statistics, %struct.sched_entity*, %struct.cfs_rq*, %struct.cfs_rq*, %struct.sched_avg }
%struct.load_weight = type { i64, i64 }
%struct.rb_node = type { i64, %struct.rb_node*, %struct.rb_node* }
%struct.sched_statistics = type { i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64 }
%struct.cfs_rq = type opaque
%struct.sched_avg = type { i32, i32, i64, i64, i64 }
%struct.sched_rt_entity = type { %struct.list_head, i64, i64, i32, %struct.sched_rt_entity* }
%struct.task_group = type opaque
%struct.cpumask = type { [1 x i64] }
%struct.sched_info = type { i64, i64, i64, i64 }
%struct.plist_node = type { i32, %struct.list_head, %struct.list_head }
%struct.mm_struct = type { %struct.vm_area_struct*, %struct.rb_root, %struct.vm_area_struct*, i64 (%struct.file*, i64, i64, i64, i64)*, void (%struct.mm_struct*, i64)*, i64, i64, i64, i64, i64, %struct.pgd_t*, %struct.atomic_t, %struct.atomic_t, i32, %struct.spinlock, %struct.rw_semaphore, %struct.list_head, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, [44 x i64], %struct.mm_rss_stat, %struct.linux_binfmt*, [1 x %struct.cpumask], %struct.mm_context_t, i64, %struct.core_state*, %struct.spinlock, %struct.hlist_head, %struct.file*, %struct.uprobes_state }
%struct.rb_root = type { %struct.rb_node* }
%struct.vm_area_struct = type { i64, i64, %struct.vm_area_struct*, %struct.vm_area_struct*, %struct.rb_node, i64, %struct.mm_struct*, %struct.pgprot, i64, %union.anon, %struct.list_head, %struct.anon_vma*, %struct.vm_operations_struct*, i64, %struct.file*, i8*, %struct.mempolicy* }
%struct.pgprot = type { i64 }
%union.anon = type { %struct.anon }
%struct.anon = type { %struct.rb_node, i64 }
%struct.anon_vma = type opaque
%struct.vm_operations_struct = type { void (%struct.vm_area_struct*)*, void (%struct.vm_area_struct*)*, i32 (%struct.vm_area_struct*, %struct.vm_fault*)*, i32 (%struct.vm_area_struct*, %struct.vm_fault*)*, i32 (%struct.vm_area_struct*, i64, i8*, i32, i32)*, i32 (%struct.vm_area_struct*, %struct.mempolicy*)*, %struct.mempolicy* (%struct.vm_area_struct*, i64)*, i32 (%struct.vm_area_struct*, %struct.nodemask_t*, %struct.nodemask_t*, i64)*, i32 (%struct.vm_area_struct*, i64, i64, i64)* }
%struct.vm_fault = type { i32, i64, i8*, %struct.page* }
%struct.page = type { i64, %struct.address_space*, %struct.anon.15, %union.anon.21, %union.anon.23, [8 x i8] }
%struct.address_space = type { %struct.inode*, %struct.radix_tree_root, %struct.spinlock, i32, %struct.rb_root, %struct.list_head, %struct.mutex, i64, i64, %struct.address_space_operations*, i64, %struct.backing_dev_info*, %struct.spinlock, %struct.list_head, i8* }
%struct.inode = type { i16, i16, i32, i32, i32, %struct.posix_acl*, %struct.posix_acl*, %struct.inode_operations*, %struct.super_block*, %struct.address_space*, i8*, i64, %union.anon.40, i32, i64, %struct.timespec, %struct.timespec, %struct.timespec, %struct.spinlock, i16, i32, i64, i64, %struct.mutex, i64, %struct.hlist_node, %struct.list_head, %struct.list_head, %struct.list_head, %union.anon.41, i64, %struct.atomic_t, %struct.atomic_t, %struct.atomic_t, %struct.file_operations*, %struct.file_lock*, %struct.address_space, [2 x %struct.dquot*], %struct.list_head, %union.anon.42, i32, i32, %struct.hlist_head, i8* }
%struct.posix_acl = type opaque
%struct.inode_operations = type { %struct.dentry* (%struct.inode*, %struct.dentry*, i32)*, i8* (%struct.dentry*, %struct.nameidata*)*, i32 (%struct.inode*, i32)*, %struct.posix_acl* (%struct.inode*, i32)*, i32 (%struct.dentry*, i8*, i32)*, void (%struct.dentry*, %struct.nameidata*, i8*)*, i32 (%struct.inode*, %struct.dentry*, i16, i1)*, i32 (%struct.dentry*, %struct.inode*, %struct.dentry*)*, i32 (%struct.inode*, %struct.dentry*)*, i32 (%struct.inode*, %struct.dentry*, i8*)*, i32 (%struct.inode*, %struct.dentry*, i16)*, i32 (%struct.inode*, %struct.dentry*)*, i32 (%struct.inode*, %struct.dentry*, i16, i32)*, i32 (%struct.inode*, %struct.dentry*, %struct.inode*, %struct.dentry*)*, i32 (%struct.dentry*, %struct.iattr*)*, i32 (%struct.vfsmount*, %struct.dentry*, %struct.kstat*)*, i32 (%struct.dentry*, i8*, i8*, i64, i32)*, i64 (%struct.dentry*, i8*, i8*, i64)*, i64 (%struct.dentry*, i8*, i64)*, i32 (%struct.dentry*, i8*)*, i32 (%struct.inode*, %struct.fiemap_extent_info*, i64, i64)*, i32 (%struct.inode*, %struct.timespec*, i32)*, i32 (%struct.inode*, %struct.dentry*, %struct.file*, i32, i16, i32*)*, [8 x i8] }
%struct.dentry = type { i32, %struct.seqcount, %struct.hlist_bl_node, %struct.dentry*, %struct.qstr, %struct.inode*, [32 x i8], i32, %struct.spinlock, %struct.dentry_operations*, %struct.super_block*, i64, i8*, %struct.list_head, %union.anon.7, %struct.list_head, %struct.hlist_node }
%struct.hlist_bl_node = type { %struct.hlist_bl_node*, %struct.hlist_bl_node** }
%struct.qstr = type { %union.anon.3, i8* }
%union.anon.3 = type { i64 }
%struct.dentry_operations = type { i32 (%struct.dentry*, i32)*, i32 (%struct.dentry*, i32)*, i32 (%struct.dentry*, %struct.inode*, %struct.qstr*)*, i32 (%struct.dentry*, %struct.inode*, %struct.dentry*, %struct.inode*, i32, i8*, %struct.qstr*)*, i32 (%struct.dentry*)*, void (%struct.dentry*)*, void (%struct.dentry*)*, void (%struct.dentry*, %struct.inode*)*, i8* (%struct.dentry*, i8*, i32)*, %struct.vfsmount* (%struct.path*)*, i32 (%struct.dentry*, i1)*, [40 x i8] }
%struct.vfsmount = type opaque
%struct.path = type { %struct.vfsmount*, %struct.dentry* }
%union.anon.7 = type { %struct.list_head }
%struct.nameidata = type opaque
%struct.iattr = type { i32, i16, i32, i32, i64, %struct.timespec, %struct.timespec, %struct.timespec, %struct.file* }
%struct.kstat = type { i64, i32, i16, i32, i32, i32, i32, i64, %struct.timespec, %struct.timespec, %struct.timespec, i64, i64 }
%struct.fiemap_extent_info = type { i32, i32, i32, %struct.fiemap_extent* }
%struct.fiemap_extent = type { i64, i64, i64, [2 x i64], i32, [3 x i32] }
%struct.super_block = type { %struct.list_head, i32, i8, i64, i64, %struct.file_system_type*, %struct.super_operations*, %struct.dquot_operations*, %struct.quotactl_ops*, %struct.export_operations*, i64, i64, %struct.dentry*, %struct.rw_semaphore, i32, %struct.atomic_t, i8*, %struct.xattr_handler**, %struct.list_head, %struct.hlist_bl_head, %struct.list_head*, %struct.list_head, %struct.list_head, i32, [28 x i8], %struct.spinlock, %struct.list_head, i32, %struct.block_device*, %struct.backing_dev_info*, %struct.mtd_info*, %struct.hlist_node, %struct.quota_info, %struct.sb_writers, [32 x i8], [16 x i8], i8*, i32, i32, i32, %struct.mutex, i8*, i8*, %struct.dentry_operations*, i32, %struct.shrinker, %struct.atomic64_t, i32, [20 x i8] }
%struct.file_system_type = type { i8*, i32, %struct.dentry* (%struct.file_system_type*, i32, i8*, i8*)*, void (%struct.super_block*)*, %struct.module*, %struct.file_system_type*, %struct.hlist_head, %struct.lock_class_key, %struct.lock_class_key, %struct.lock_class_key, [3 x %struct.lock_class_key], %struct.lock_class_key, %struct.lock_class_key, %struct.lock_class_key }
%struct.module = type { i32, %struct.list_head, [56 x i8], %struct.module_kobject, %struct.module_attribute*, i8*, i8*, %struct.kobject*, %struct.kernel_symbol*, i64*, i32, %struct.kernel_param*, i32, i32, %struct.kernel_symbol*, i64*, %struct.kernel_symbol*, i64*, i32, i32, %struct.exception_table_entry*, i32 ()*, i8*, i8*, i32, i32, i32, i32, i32, i32, %struct.mod_arch_specific, i32, i32, %struct.list_head, %struct.bug_entry*, %struct.elf64_sym*, %struct.elf64_sym*, i32, i32, i8*, i8*, %struct.module_sect_attrs*, %struct.module_notes_attrs*, i8*, i8*, i32, i32, %struct.tracepoint**, i32, i8**, %struct.ftrace_event_call**, i32, %struct.list_head, %struct.list_head, %struct.task_struct*, void ()*, %struct.module_ref* }
%struct.module_kobject = type { %struct.kobject, %struct.module*, %struct.kobject*, %struct.module_param_attrs* }
%struct.kobject = type { i8*, %struct.list_head, %struct.kobject*, %struct.kset*, %struct.kobj_type*, %struct.sysfs_dirent*, %struct.kref, i8 }
%struct.kset = type { %struct.list_head, %struct.spinlock, %struct.kobject, %struct.kset_uevent_ops* }
%struct.kset_uevent_ops = type { i32 (%struct.kset*, %struct.kobject*)*, i8* (%struct.kset*, %struct.kobject*)*, i32 (%struct.kset*, %struct.kobject*, %struct.kobj_uevent_env*)* }
%struct.kobj_uevent_env = type { [32 x i8*], i32, [2048 x i8], i32 }
%struct.kobj_type = type { void (%struct.kobject*)*, %struct.sysfs_ops*, %struct.attribute**, %struct.kobj_ns_type_operations* (%struct.kobject*)*, i8* (%struct.kobject*)* }
%struct.sysfs_ops = type { i64 (%struct.kobject*, %struct.attribute*, i8*)*, i64 (%struct.kobject*, %struct.attribute*, i8*, i64)*, i8* (%struct.kobject*, %struct.attribute*)* }
%struct.attribute = type { i8*, i16 }
%struct.kobj_ns_type_operations = type { i32, i8* ()*, i8* (%struct.sock*)*, i8* ()*, void (i8*)* }
%struct.sock = type opaque
%struct.sysfs_dirent = type opaque
%struct.kref = type { %struct.atomic_t }
%struct.module_param_attrs = type opaque
%struct.module_attribute = type { %struct.attribute, i64 (%struct.module_attribute*, %struct.module_kobject*, i8*)*, i64 (%struct.module_attribute*, %struct.module_kobject*, i8*, i64)*, void (%struct.module*, i8*)*, i32 (%struct.module*)*, void (%struct.module*)* }
%struct.kernel_param = type { i8*, %struct.kernel_param_ops*, i16, i16, %union.anon.5 }
%struct.kernel_param_ops = type { i32 (i8*, %struct.kernel_param*)*, i32 (i8*, %struct.kernel_param*)*, void (i8*)* }
%union.anon.5 = type { i8* }
%struct.kernel_symbol = type { i64, i8* }
%struct.exception_table_entry = type { i32, i32 }
%struct.mod_arch_specific = type {}
%struct.bug_entry = type { i32, i32, i16, i16 }
%struct.elf64_sym = type { i32, i8, i8, i16, i64, i64 }
%struct.module_sect_attrs = type opaque
%struct.module_notes_attrs = type opaque
%struct.tracepoint = type { i8*, %struct.static_key, void ()*, void ()*, %struct.tracepoint_func* }
%struct.static_key = type { %struct.atomic_t }
%struct.tracepoint_func = type { i8*, i8* }
%struct.ftrace_event_call = type opaque
%struct.module_ref = type { i64, i64 }
%struct.lock_class_key = type {}
%struct.super_operations = type { %struct.inode* (%struct.super_block*)*, void (%struct.inode*)*, void (%struct.inode*, i32)*, i32 (%struct.inode*, %struct.writeback_control*)*, i32 (%struct.inode*)*, void (%struct.inode*)*, void (%struct.super_block*)*, i32 (%struct.super_block*, i32)*, i32 (%struct.super_block*)*, i32 (%struct.super_block*)*, i32 (%struct.dentry*, %struct.kstatfs*)*, i32 (%struct.super_block*, i32*, i8*)*, void (%struct.super_block*)*, i32 (%struct.seq_file*, %struct.dentry*)*, i32 (%struct.seq_file*, %struct.dentry*)*, i32 (%struct.seq_file*, %struct.dentry*)*, i32 (%struct.seq_file*, %struct.dentry*)*, i64 (%struct.super_block*, i32, i8*, i64, i64)*, i64 (%struct.super_block*, i32, i8*, i64, i64)*, i32 (%struct.super_block*, %struct.page*, i32)*, i32 (%struct.super_block*)*, void (%struct.super_block*, i32)* }
%struct.writeback_control = type opaque
%struct.kstatfs = type opaque
%struct.seq_file = type { i8*, i64, i64, i64, i64, i64, i64, %struct.mutex, %struct.seq_operations*, i32, i8* }
%struct.seq_operations = type { i8* (%struct.seq_file*, i64*)*, void (%struct.seq_file*, i8*)*, i8* (%struct.seq_file*, i8*, i64*)*, i32 (%struct.seq_file*, i8*)* }
%struct.dquot_operations = type { i32 (%struct.dquot*)*, %struct.dquot* (%struct.super_block*, i32)*, void (%struct.dquot*)*, i32 (%struct.dquot*)*, i32 (%struct.dquot*)*, i32 (%struct.dquot*)*, i32 (%struct.super_block*, i32)*, i64* (%struct.inode*)* }
%struct.dquot = type { %struct.hlist_node, %struct.list_head, %struct.list_head, %struct.list_head, %struct.mutex, %struct.atomic_t, %struct.__wait_queue_head, %struct.super_block*, %struct.kqid, i64, i64, %struct.mem_dqblk }
%struct.__wait_queue_head = type { %struct.spinlock, %struct.list_head }
%struct.kqid = type { %union.anon.6, i32 }
%union.anon.6 = type { i32 }
%struct.mem_dqblk = type { i64, i64, i64, i64, i64, i64, i64, i64, i64 }
%struct.quotactl_ops = type { i32 (%struct.super_block*, i32, i32, %struct.path*)*, i32 (%struct.super_block*, i32, i32)*, i32 (%struct.super_block*, i32)*, i32 (%struct.super_block*, i32)*, i32 (%struct.super_block*, i32, %struct.if_dqinfo*)*, i32 (%struct.super_block*, i32, %struct.if_dqinfo*)*, i32 (%struct.super_block*, i64, %struct.fs_disk_quota*)*, i32 (%struct.super_block*, i64, %struct.fs_disk_quota*)*, i32 (%struct.super_block*, %struct.fs_quota_stat*)*, i32 (%struct.super_block*, i32, i32)* }
%struct.if_dqinfo = type { i64, i64, i32, i32 }
%struct.fs_disk_quota = type { i8, i8, i16, i32, i64, i64, i64, i64, i64, i64, i32, i32, i16, i16, i32, i64, i64, i64, i32, i16, i16, [8 x i8] }
%struct.fs_quota_stat = type { i8, i16, i8, %struct.fs_qfilestat, %struct.fs_qfilestat, i32, i32, i32, i32, i16, i16 }
%struct.fs_qfilestat = type { i64, i64, i32 }
%struct.export_operations = type opaque
%struct.xattr_handler = type { i8*, i32, i64 (%struct.dentry*, i8*, i64, i8*, i64, i32)*, i32 (%struct.dentry*, i8*, i8*, i64, i32)*, i32 (%struct.dentry*, i8*, i8*, i64, i32, i32)* }
%struct.hlist_bl_head = type { %struct.hlist_bl_node* }
%struct.block_device = type { i32, i32, %struct.inode*, %struct.super_block*, %struct.mutex, %struct.list_head, i8*, i8*, i32, i8, %struct.list_head, %struct.block_device*, i32, %struct.hd_struct*, i32, i32, %struct.gendisk*, %struct.request_queue*, %struct.list_head, i64, i32, %struct.mutex }
%struct.hd_struct = type opaque
%struct.gendisk = type opaque
%struct.request_queue = type opaque
%struct.mtd_info = type opaque
%struct.quota_info = type { i32, %struct.mutex, %struct.mutex, %struct.rw_semaphore, [2 x %struct.inode*], [2 x %struct.mem_dqinfo], [2 x %struct.quota_format_ops*] }
%struct.mem_dqinfo = type { %struct.quota_format_type*, i32, %struct.list_head, i64, i32, i32, i64, i64, i8* }
%struct.quota_format_type = type { i32, %struct.quota_format_ops*, %struct.module*, %struct.quota_format_type* }
%struct.quota_format_ops = type { i32 (%struct.super_block*, i32)*, i32 (%struct.super_block*, i32)*, i32 (%struct.super_block*, i32)*, i32 (%struct.super_block*, i32)*, i32 (%struct.dquot*)*, i32 (%struct.dquot*)*, i32 (%struct.dquot*)* }
%struct.sb_writers = type { [3 x %struct.percpu_counter], %struct.__wait_queue_head, i32, %struct.__wait_queue_head }
%struct.percpu_counter = type { %struct.raw_spinlock, i64, %struct.list_head, i32* }
%struct.shrinker = type { i32 (%struct.shrinker*, %struct.shrink_control*)*, i32, i64, %struct.list_head, %struct.atomic64_t }
%struct.shrink_control = type { i32, i64 }
%struct.atomic64_t = type { i64 }
%union.anon.40 = type { i32 }
%struct.hlist_node = type { %struct.hlist_node*, %struct.hlist_node** }
%union.anon.41 = type { %struct.callback_head }
%struct.file_operations = type { %struct.module*, i64 (%struct.file*, i64, i32)*, i64 (%struct.file*, i8*, i64, i64*)*, i64 (%struct.file*, i8*, i64, i64*)*, i64 (%struct.kiocb*, %struct.iovec*, i64, i64)*, i64 (%struct.kiocb*, %struct.iovec*, i64, i64)*, i32 (%struct.file*, i8*, i32 (i8*, i8*, i32, i64, i64, i32)*)*, i32 (%struct.file*, %struct.poll_table_struct*)*, i64 (%struct.file*, i32, i64)*, i64 (%struct.file*, i32, i64)*, i32 (%struct.file*, %struct.vm_area_struct*)*, i32 (%struct.inode*, %struct.file*)*, i32 (%struct.file*, %struct.files_struct*)*, i32 (%struct.inode*, %struct.file*)*, i32 (%struct.file*, i64, i64, i32)*, i32 (%struct.kiocb*, i32)*, i32 (i32, %struct.file*, i32)*, i32 (%struct.file*, i32, %struct.file_lock*)*, i64 (%struct.file*, %struct.page*, i32, i64, i64*, i32)*, i64 (%struct.file*, i64, i64, i64, i64)*, i32 (i32)*, i32 (%struct.file*, i32, %struct.file_lock*)*, i64 (%struct.pipe_inode_info*, %struct.file*, i64*, i64, i32)*, i64 (%struct.file*, i64*, %struct.pipe_inode_info*, i64, i32)*, i32 (%struct.file*, i64, %struct.file_lock**)*, i64 (%struct.file*, i32, i64, i64)*, i32 (%struct.seq_file*, %struct.file*)* }
%struct.kiocb = type opaque
%struct.iovec = type { i8*, i64 }
%struct.poll_table_struct = type opaque
%struct.file_lock = type { %struct.file_lock*, %struct.list_head, %struct.list_head, %struct.files_struct*, i32, i8, i32, %struct.pid*, %struct.__wait_queue_head, %struct.file*, i64, i64, %struct.fasync_struct*, i64, i64, %struct.file_lock_operations*, %struct.lock_manager_operations*, %union.anon.8 }
%struct.pid = type { %struct.atomic_t, i32, [3 x %struct.hlist_head], %struct.callback_head, [1 x %struct.upid] }
%struct.upid = type { i32, %struct.pid_namespace*, %struct.hlist_node }
%struct.pid_namespace = type opaque
%struct.fasync_struct = type { %struct.spinlock, i32, i32, %struct.fasync_struct*, %struct.file*, %struct.callback_head }
%struct.file_lock_operations = type { void (%struct.file_lock*, %struct.file_lock*)*, void (%struct.file_lock*)* }
%struct.lock_manager_operations = type { i32 (%struct.file_lock*, %struct.file_lock*)*, void (%struct.file_lock*)*, i32 (%struct.file_lock*, %struct.file_lock*, i32)*, void (%struct.file_lock*)*, i32 (%struct.file_lock**, i32)* }
%union.anon.8 = type { %struct.nfs_lock_info }
%struct.nfs_lock_info = type { i32, %struct.nlm_lockowner*, %struct.list_head }
%struct.nlm_lockowner = type opaque
%union.anon.42 = type { %struct.pipe_inode_info* }
%struct.radix_tree_root = type { i32, i32, %struct.radix_tree_node* }
%struct.radix_tree_node = type opaque
%struct.address_space_operations = type { i32 (%struct.page*, %struct.writeback_control*)*, i32 (%struct.file*, %struct.page*)*, i32 (%struct.address_space*, %struct.writeback_control*)*, i32 (%struct.page*)*, i32 (%struct.file*, %struct.address_space*, %struct.list_head*, i32)*, i32 (%struct.file*, %struct.address_space*, i64, i32, i32, %struct.page**, i8**)*, i32 (%struct.file*, %struct.address_space*, i64, i32, i32, %struct.page*, i8*)*, i64 (%struct.address_space*, i64)*, void (%struct.page*, i64)*, i32 (%struct.page*, i32)*, void (%struct.page*)*, i64 (i32, %struct.kiocb*, %struct.iovec*, i64, i64)*, i32 (%struct.address_space*, i64, i32, i8**, i64*)*, i32 (%struct.address_space*, %struct.page*, %struct.page*, i32)*, i32 (%struct.page*)*, i32 (%struct.page*, %struct.read_descriptor_t*, i64)*, i32 (%struct.address_space*, %struct.page*)*, i32 (%struct.swap_info_struct*, %struct.file*, i64*)*, void (%struct.file*)* }
%struct.read_descriptor_t = type { i64, i64, %union.anon.14, i32 }
%union.anon.14 = type { i8* }
%struct.swap_info_struct = type opaque
%struct.anon.15 = type { %union.anon.16, %union.anon.17 }
%union.anon.16 = type { i64 }
%union.anon.17 = type { i64 }
%union.anon.21 = type { %struct.list_head }
%union.anon.23 = type { i64 }
%struct.pgd_t = type { i64 }
%struct.rw_semaphore = type { i64, %struct.raw_spinlock, %struct.list_head }
%struct.mm_rss_stat = type { [3 x %struct.atomic64_t] }
%struct.linux_binfmt = type opaque
%struct.mm_context_t = type { i8*, i32, i16, %struct.mutex, i8* }
%struct.core_state = type { %struct.atomic_t, %struct.core_thread, %struct.completion }
%struct.core_thread = type { %struct.task_struct*, %struct.core_thread* }
%struct.completion = type { i32, %struct.__wait_queue_head }
%struct.hlist_head = type { %struct.hlist_node* }
%struct.file = type { %union.anon.2, %struct.path, %struct.inode*, %struct.file_operations*, %struct.spinlock, i32, %struct.atomic64_t, i32, i32, i64, %struct.fown_struct, %struct.cred*, %struct.file_ra_state, i64, i8*, i8*, %struct.list_head, %struct.list_head, %struct.address_space* }
%union.anon.2 = type { %struct.list_head }
%struct.fown_struct = type { %struct.rwlock_t, %struct.pid*, i32, i32, i32, i32 }
%struct.rwlock_t = type { %union.arch_rwlock_t }
%union.arch_rwlock_t = type { i32 }
%struct.file_ra_state = type { i64, i32, i32, i32, i32, i64 }
%struct.uprobes_state = type {}
%struct.task_rss_stat = type { i32, [3 x i32] }
%struct.pid_link = type { %struct.hlist_node, %struct.pid* }
%struct.cputime = type { i64, i64 }
%struct.timespec = type { i64, i64 }
%struct.task_cputime = type { i64, i64, i64 }
%struct.cred = type { %struct.atomic_t, i32, i32, i32, i32, i32, i32, i32, i32, i32, %struct.kernel_cap_struct, %struct.kernel_cap_struct, %struct.kernel_cap_struct, %struct.kernel_cap_struct, i8, %struct.key*, %struct.key*, %struct.key*, %struct.key*, i8*, %struct.user_struct*, %struct.user_namespace*, %struct.group_info*, %struct.callback_head }
%struct.kernel_cap_struct = type { [2 x i32] }
%struct.key = type { %struct.atomic_t, i32, %union.anon.10, %struct.key_type*, %struct.rw_semaphore, %struct.key_user*, i8*, %union.anon.11, i64, i32, i32, i32, i16, i16, i64, i8*, %union.anon.12, %union.anon.13 }
%union.anon.10 = type { %struct.rb_node }
%struct.key_type = type opaque
%struct.key_user = type opaque
%union.anon.11 = type { i64 }
%union.anon.12 = type { %struct.list_head }
%union.anon.13 = type { i64 }
%struct.user_struct = type { %struct.atomic_t, %struct.atomic_t, %struct.atomic_t, %struct.atomic_t, %struct.atomic_t, %struct.atomic_t, %struct.atomic64_t, i64, i64, %struct.key*, %struct.key*, %struct.hlist_node, i32, %struct.atomic64_t }
%struct.user_namespace = type opaque
%struct.group_info = type { %struct.atomic_t, i32, i32, [32 x i32], [0 x i32*] }
%struct.sysv_sem = type { %struct.sem_undo_list* }
%struct.sem_undo_list = type opaque
%struct.thread_struct = type { [3 x %struct.desc_struct], i64, i64, i64, i16, i16, i16, i16, i64, i64, [4 x %struct.perf_event*], i64, i64, i64, i64, i64, %struct.fpu, i64*, i64, i32 }
%struct.desc_struct = type { %union.anon.24 }
%union.anon.24 = type { %struct.anon.25 }
%struct.anon.25 = type { i32, i32 }
%struct.perf_event = type opaque
%struct.fpu = type { i32, i32, %union.thread_xstate* }
%union.thread_xstate = type { %struct.xsave_struct }
%struct.xsave_struct = type { %struct.i387_fxsave_struct, %struct.xsave_hdr_struct, %struct.ymmh_struct }
%struct.i387_fxsave_struct = type { i16, i16, i16, i16, %union.anon.27, i32, i32, [32 x i32], [64 x i32], [12 x i32], %union.anon.30 }
%union.anon.27 = type { %struct.anon.28 }
%struct.anon.28 = type { i64, i64 }
%union.anon.30 = type { [12 x i32] }
%struct.xsave_hdr_struct = type { i64, [2 x i64], [5 x i64] }
%struct.ymmh_struct = type { [64 x i32] }
%struct.fs_struct = type opaque
%struct.files_struct = type opaque
%struct.nsproxy = type { %struct.atomic_t, %struct.uts_namespace*, %struct.ipc_namespace*, %struct.mnt_namespace*, %struct.pid_namespace*, %struct.net* }
%struct.uts_namespace = type opaque
%struct.ipc_namespace = type opaque
%struct.mnt_namespace = type opaque
%struct.net = type { %struct.atomic_t, %struct.atomic_t, %struct.spinlock, %struct.list_head, %struct.list_head, %struct.list_head, %struct.user_namespace*, i32, %struct.proc_dir_entry*, %struct.proc_dir_entry*, %struct.ctl_table_set, %struct.sock*, %struct.sock*, %struct.list_head, %struct.hlist_head*, %struct.hlist_head*, i32, i32, %struct.list_head, %struct.net_device*, %struct.netns_core, %struct.netns_mib, %struct.netns_packet, %struct.netns_unix, [56 x i8], %struct.netns_ipv4, %struct.netns_ipv6, %struct.netns_nf, %struct.netns_xt, %struct.netns_ct, [56 x i8], %struct.netns_nf_frag, %struct.sock*, %struct.sock*, %struct.net_generic*, [40 x i8], %struct.netns_xfrm, %struct.netns_ipvs*, %struct.sock*, %struct.atomic_t, [44 x i8] }
%struct.proc_dir_entry = type opaque
%struct.ctl_table_set = type { i32 (%struct.ctl_table_set*)*, %struct.ctl_dir }
%struct.ctl_dir = type { %struct.ctl_table_header, %struct.rb_root }
%struct.ctl_table_header = type { %union.anon.43, %struct.completion*, %struct.ctl_table*, %struct.ctl_table_root*, %struct.ctl_table_set*, %struct.ctl_dir*, %struct.ctl_node* }
%union.anon.43 = type { %struct.anon.44 }
%struct.anon.44 = type { %struct.ctl_table*, i32, i32, i32 }
%struct.ctl_table = type { i8*, i8*, i32, i16, %struct.ctl_table*, i32 (%struct.ctl_table*, i32, i8*, i64*, i64*)*, %struct.ctl_table_poll*, i8*, i8* }
%struct.ctl_table_poll = type { %struct.atomic_t, %struct.__wait_queue_head }
%struct.ctl_table_root = type { %struct.ctl_table_set, %struct.ctl_table_set* (%struct.ctl_table_root*, %struct.nsproxy*)*, i32 (%struct.ctl_table_header*, %struct.ctl_table*)* }
%struct.ctl_node = type { %struct.rb_node, %struct.ctl_table_header* }
%struct.net_device = type { [16 x i8], %struct.hlist_node, i8*, i64, i64, i64, i32, i64, %struct.list_head, %struct.list_head, %struct.list_head, %struct.list_head, i64, i64, i64, i64, i64, i32, i32, %struct.net_device_stats, %struct.atomic64_t, %struct.net_device_ops*, %struct.ethtool_ops*, %struct.header_ops*, i32, i32, i16, i16, i8, i8, i8, i8, i32, i16, i16, i16, i16, [32 x i8], i8, i8, i8, i16, %struct.spinlock, %struct.netdev_hw_addr_list, %struct.netdev_hw_addr_list, %struct.netdev_hw_addr_list, %struct.kset*, i8, i32, i32, i8*, %struct.in_device*, %struct.dn_dev*, %struct.inet6_dev*, i8*, %struct.wireless_dev*, i64, i8*, %struct.netdev_rx_queue*, i32, i32, i32 (%struct.sk_buff**)*, i8*, %struct.netdev_queue*, [32 x i8], [56 x i8], %struct.netdev_queue*, i32, i32, %struct.Qdisc*, i64, %struct.spinlock, %struct.xps_dev_maps*, %struct.cpu_rmap*, i64, i32, %struct.timer_list, i32*, %struct.list_head, %struct.hlist_node, %struct.list_head, i8, i8, i16, void (%struct.net_device*)*, %struct.netpoll_info*, %struct.net*, %union.anon.51, %struct.garp_port*, %struct.mrp_port*, %struct.device, [4 x %struct.attribute_group*], %struct.rtnl_link_ops*, i32, i16, i8, [16 x %struct.netdev_tc_txq], [16 x i8], %struct.phy_device*, %struct.lock_class_key*, i32, %struct.pm_qos_request, [56 x i8] }
%struct.net_device_stats = type { i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64 }
%struct.net_device_ops = type { i32 (%struct.net_device*)*, void (%struct.net_device*)*, i32 (%struct.net_device*)*, i32 (%struct.net_device*)*, i32 (%struct.sk_buff*, %struct.net_device*)*, i16 (%struct.net_device*, %struct.sk_buff*)*, void (%struct.net_device*, i32)*, void (%struct.net_device*)*, i32 (%struct.net_device*, i8*)*, i32 (%struct.net_device*)*, i32 (%struct.net_device*, %struct.ifreq*, i32)*, i32 (%struct.net_device*, %struct.ifmap*)*, i32 (%struct.net_device*, i32)*, i32 (%struct.net_device*, %struct.neigh_parms*)*, void (%struct.net_device*)*, %struct.rtnl_link_stats64* (%struct.net_device*, %struct.rtnl_link_stats64*)*, %struct.net_device_stats* (%struct.net_device*)*, i32 (%struct.net_device*, i16, i16)*, i32 (%struct.net_device*, i16, i16)*, void (%struct.net_device*)*, i32 (%struct.net_device*, %struct.netpoll_info*, i32)*, void (%struct.net_device*)*, i32 (%struct.net_device*, i32, i8*)*, i32 (%struct.net_device*, i32, i16, i8)*, i32 (%struct.net_device*, i32, i32)*, i32 (%struct.net_device*, i32, i1)*, i32 (%struct.net_device*, i32, %struct.ifla_vf_info*)*, i32 (%struct.net_device*, i32, %struct.nlattr**)*, i32 (%struct.net_device*, i32, %struct.sk_buff*)*, i32 (%struct.net_device*, i8)*, i32 (%struct.net_device*, %struct.sk_buff*, i16, i32)*, i32 (%struct.net_device*, %struct.net_device*)*, i32 (%struct.net_device*, %struct.net_device*)*, i64 (%struct.net_device*, i64)*, i32 (%struct.net_device*, i64)*, i32 (%struct.neighbour*)*, void (%struct.neighbour*)*, i32 (%struct.ndmsg*, %struct.nlattr**, %struct.net_device*, i8*, i16)*, i32 (%struct.ndmsg*, %struct.nlattr**, %struct.net_device*, i8*)*, i32 (%struct.sk_buff*, %struct.netlink_callback*, %struct.net_device*, i32)*, i32 (%struct.net_device*, %struct.nlmsghdr*)*, i32 (%struct.sk_buff*, i32, i32, %struct.net_device*, i32)*, i32 (%struct.net_device*, %struct.nlmsghdr*)*, i32 (%struct.net_device*, i1)* }
%struct.sk_buff = type { %struct.sk_buff*, %struct.sk_buff*, %union.ktime, %struct.sock*, %struct.net_device*, [48 x i8], i64, %struct.sec_path*, i32, i32, i16, i16, %union.anon.45, i32, i16, i16, {}*, %struct.nf_conntrack*, %struct.sk_buff*, i32, i32, i16, i16, i16, i16, i16, i16, i32, %union.anon.47, i32, i32, i32, i32, i32, i32, i32, i32, i8*, i8*, i32, %struct.atomic_t }
%union.ktime = type { i64 }
%struct.sec_path = type opaque
%union.anon.45 = type { i32 }
%struct.nf_conntrack = type { %struct.atomic_t }
%union.anon.47 = type { i32 }
%struct.ifreq = type { %union.anon.48, %union.anon.49 }
%union.anon.48 = type { [16 x i8] }
%union.anon.49 = type { %struct.ifmap }
%struct.ifmap = type { i64, i64, i16, i8, i8, i8 }
%struct.neigh_parms = type opaque
%struct.rtnl_link_stats64 = type { i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64 }
%struct.ifla_vf_info = type { i32, [32 x i8], i32, i32, i32, i32 }
%struct.nlattr = type { i16, i16 }
%struct.neighbour = type opaque
%struct.ndmsg = type { i8, i8, i16, i32, i16, i8, i8 }
%struct.netlink_callback = type { %struct.sk_buff*, %struct.nlmsghdr*, i32 (%struct.sk_buff*, %struct.netlink_callback*)*, i32 (%struct.netlink_callback*)*, i8*, %struct.module*, i16, i16, i32, i32, [6 x i64] }
%struct.nlmsghdr = type { i32, i16, i16, i32, i32 }
%struct.ethtool_ops = type { i32 (%struct.net_device*, %struct.ethtool_cmd*)*, i32 (%struct.net_device*, %struct.ethtool_cmd*)*, void (%struct.net_device*, %struct.ethtool_drvinfo*)*, i32 (%struct.net_device*)*, void (%struct.net_device*, %struct.ethtool_regs*, i8*)*, void (%struct.net_device*, %struct.ethtool_wolinfo*)*, i32 (%struct.net_device*, %struct.ethtool_wolinfo*)*, i32 (%struct.net_device*)*, void (%struct.net_device*, i32)*, i32 (%struct.net_device*)*, i32 (%struct.net_device*)*, i32 (%struct.net_device*)*, i32 (%struct.net_device*, %struct.ethtool_eeprom*, i8*)*, i32 (%struct.net_device*, %struct.ethtool_eeprom*, i8*)*, i32 (%struct.net_device*, %struct.ethtool_coalesce*)*, i32 (%struct.net_device*, %struct.ethtool_coalesce*)*, void (%struct.net_device*, %struct.ethtool_ringparam*)*, i32 (%struct.net_device*, %struct.ethtool_ringparam*)*, void (%struct.net_device*, %struct.ethtool_pauseparam*)*, i32 (%struct.net_device*, %struct.ethtool_pauseparam*)*, void (%struct.net_device*, %struct.ethtool_test*, i64*)*, void (%struct.net_device*, i32, i8*)*, i32 (%struct.net_device*, i32)*, void (%struct.net_device*, %struct.ethtool_stats*, i64*)*, i32 (%struct.net_device*)*, void (%struct.net_device*)*, i32 (%struct.net_device*)*, i32 (%struct.net_device*, i32)*, i32 (%struct.net_device*, i32)*, i32 (%struct.net_device*, %struct.ethtool_rxnfc*, i32*)*, i32 (%struct.net_device*, %struct.ethtool_rxnfc*)*, i32 (%struct.net_device*, %struct.ethtool_flash*)*, i32 (%struct.net_device*, i32*)*, i32 (%struct.net_device*)*, i32 (%struct.net_device*, i32*)*, i32 (%struct.net_device*, i32*)*, void (%struct.net_device*, %struct.ethtool_channels*)*, i32 (%struct.net_device*, %struct.ethtool_channels*)*, i32 (%struct.net_device*, %struct.ethtool_dump*)*, i32 (%struct.net_device*, %struct.ethtool_dump*, i8*)*, i32 (%struct.net_device*, %struct.ethtool_dump*)*, i32 (%struct.net_device*, %struct.ethtool_ts_info*)*, i32 (%struct.net_device*, %struct.ethtool_modinfo*)*, i32 (%struct.net_device*, %struct.ethtool_eeprom*, i8*)*, i32 (%struct.net_device*, %struct.ethtool_eee*)*, i32 (%struct.net_device*, %struct.ethtool_eee*)* }
%struct.ethtool_cmd = type { i32, i32, i32, i16, i8, i8, i8, i8, i8, i8, i32, i32, i16, i8, i8, i32, [2 x i32] }
%struct.ethtool_drvinfo = type { i32, [32 x i8], [32 x i8], [32 x i8], [32 x i8], [32 x i8], [12 x i8], i32, i32, i32, i32, i32 }
%struct.ethtool_regs = type { i32, i32, i32, [0 x i8] }
%struct.ethtool_wolinfo = type { i32, i32, i32, [6 x i8] }
%struct.ethtool_coalesce = type { i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32 }
%struct.ethtool_ringparam = type { i32, i32, i32, i32, i32, i32, i32, i32, i32 }
%struct.ethtool_pauseparam = type { i32, i32, i32, i32 }
%struct.ethtool_test = type { i32, i32, i32, i32, [0 x i64] }
%struct.ethtool_stats = type { i32, i32, [0 x i64] }
%struct.ethtool_rxnfc = type { i32, i32, i64, %struct.ethtool_rx_flow_spec, i32, [0 x i32] }
%struct.ethtool_rx_flow_spec = type { i32, %union.ethtool_flow_union, %struct.ethtool_flow_ext, %union.ethtool_flow_union, %struct.ethtool_flow_ext, i64, i32 }
%union.ethtool_flow_union = type { %struct.ethtool_tcpip4_spec, [36 x i8] }
%struct.ethtool_tcpip4_spec = type { i32, i32, i16, i16, i8 }
%struct.ethtool_flow_ext = type { [2 x i8], [6 x i8], i16, i16, [2 x i32] }
%struct.ethtool_flash = type { i32, i32, [128 x i8] }
%struct.ethtool_channels = type { i32, i32, i32, i32, i32, i32, i32, i32, i32 }
%struct.ethtool_dump = type { i32, i32, i32, i32, [0 x i8] }
%struct.ethtool_ts_info = type { i32, i32, i32, i32, [3 x i32], i32, [3 x i32] }
%struct.ethtool_modinfo = type { i32, i32, i32, [8 x i32] }
%struct.ethtool_eeprom = type { i32, i32, i32, i32, [0 x i8] }
%struct.ethtool_eee = type { i32, i32, i32, i32, i32, i32, i32, i32, [2 x i32] }
%struct.header_ops = type { i32 (%struct.sk_buff*, %struct.net_device*, i16, i8*, i8*, i32)*, i32 (%struct.sk_buff*, i8*)*, i32 (%struct.sk_buff*)*, i32 (%struct.neighbour*, %struct.hh_cache*, i16)*, void (%struct.hh_cache*, %struct.net_device*, i8*)* }
%struct.hh_cache = type { i16, i16, %struct.seqlock_t, [12 x i64] }
%struct.seqlock_t = type { %struct.seqcount, %struct.spinlock }
%struct.netdev_hw_addr_list = type { %struct.list_head, i32 }
%struct.in_device = type opaque
%struct.dn_dev = type opaque
%struct.inet6_dev = type opaque
%struct.wireless_dev = type { %struct.wiphy*, i32, %struct.list_head, %struct.net_device*, i32, %struct.list_head, %struct.spinlock, %struct.mutex, %struct.work_struct, i8, i8, [6 x i8], [32 x i8], i8, i8, i8, i32, %struct.cfg80211_conn*, %struct.cfg80211_cached_keys*, %struct.list_head, %struct.spinlock, %struct.cfg80211_internal_bss*, %struct.cfg80211_chan_def, %struct.ieee80211_channel*, i8, i8, i32, i32, i32, i8, i64 }
%struct.wiphy = type { [6 x i8], [6 x i8], %struct.mac_address*, %struct.ieee80211_txrx_stypes*, %struct.ieee80211_iface_combination*, i32, i16, i16, i16, i16, i32, i32, i32, i32, i32, i8, i8, i8, i16, i16, i32, i32*, i8, i8, i32, i32, i8, [32 x i8], i32, %struct.wiphy_wowlan_support, i16, i8, i32, i32, i32, i8*, i8*, i8, i8*, [3 x %struct.ieee80211_supported_band*], void (%struct.wiphy*, %struct.regulatory_request*)*, %struct.ieee80211_regdomain*, %struct.device, i8, %struct.dentry*, %struct.ieee80211_ht_cap*, %struct.ieee80211_vht_cap*, %struct.net*, [16 x i8], [0 x i8] }
%struct.mac_address = type { [6 x i8] }
%struct.ieee80211_txrx_stypes = type { i16, i16 }
%struct.ieee80211_iface_combination = type { %struct.ieee80211_iface_limit*, i32, i16, i8, i8, i8 }
%struct.ieee80211_iface_limit = type { i16, i16 }
%struct.wiphy_wowlan_support = type { i32, i32, i32, i32, i32, %struct.wiphy_wowlan_tcp_support* }
%struct.wiphy_wowlan_tcp_support = type { %struct.nl80211_wowlan_tcp_data_token_feature*, i32, i32, i32, i8 }
%struct.nl80211_wowlan_tcp_data_token_feature = type { i32, i32, i32 }
%struct.ieee80211_supported_band = type { %struct.ieee80211_channel*, %struct.ieee80211_rate*, i32, i32, i32, %struct.ieee80211_sta_ht_cap, %struct.ieee80211_sta_vht_cap }
%struct.ieee80211_rate = type { i32, i16, i16, i16 }
%struct.ieee80211_sta_ht_cap = type <{ i16, i8, i8, i8, %struct.ieee80211_mcs_info, i8 }>
%struct.ieee80211_mcs_info = type { [10 x i8], i16, i8, [3 x i8] }
%struct.ieee80211_sta_vht_cap = type { i8, i32, %struct.ieee80211_vht_mcs_info }
%struct.ieee80211_vht_mcs_info = type { i16, i16, i16, i16 }
%struct.regulatory_request = type { %struct.callback_head, i32, i32, i32, [2 x i8], i8, i8, i8, i32, %struct.list_head }
%struct.ieee80211_regdomain = type { %struct.callback_head, i32, [2 x i8], i8, [0 x %struct.ieee80211_reg_rule] }
%struct.ieee80211_reg_rule = type { %struct.ieee80211_freq_range, %struct.ieee80211_power_rule, i32 }
%struct.ieee80211_freq_range = type { i32, i32, i32 }
%struct.ieee80211_power_rule = type { i32, i32 }
%struct.ieee80211_ht_cap = type <{ i16, i8, %struct.ieee80211_mcs_info, i16, i32, i8 }>
%struct.ieee80211_vht_cap = type { i32, %struct.ieee80211_vht_mcs_info }
%struct.work_struct = type { %struct.atomic64_t, %struct.list_head, void (%struct.work_struct*)* }
%struct.cfg80211_conn = type opaque
%struct.cfg80211_cached_keys = type { [6 x %struct.key_params], [6 x [32 x i8]], i32, i32 }
%struct.key_params = type { i8*, i8*, i32, i32, i32 }
%struct.cfg80211_internal_bss = type { %struct.list_head, %struct.list_head, %struct.rb_node, i64, i64, %struct.atomic_t, %struct.cfg80211_bss }
%struct.cfg80211_bss = type { %struct.ieee80211_channel*, %struct.cfg80211_bss_ies*, %struct.cfg80211_bss_ies*, %struct.cfg80211_bss_ies*, %struct.cfg80211_bss*, i32, i16, i16, [6 x i8], [2 x i8], [0 x i8] }
%struct.cfg80211_bss_ies = type { i64, %struct.callback_head, i32, [0 x i8] }
%struct.cfg80211_chan_def = type { %struct.ieee80211_channel*, i32, i32, i32 }
%struct.ieee80211_channel = type { i32, i16, i16, i32, i32, i32, i32, i8, i32, i32, i32, i32, i64 }
%struct.netdev_rx_queue = type { %struct.rps_map*, %struct.rps_dev_flow_table*, %struct.kobject, %struct.net_device*, [40 x i8] }
%struct.rps_map = type { i32, %struct.callback_head, [0 x i16] }
%struct.rps_dev_flow_table = type { i32, %struct.callback_head, [0 x %struct.rps_dev_flow] }
%struct.rps_dev_flow = type { i16, i16, i32 }
%struct.netdev_queue = type { %struct.net_device*, %struct.Qdisc*, %struct.Qdisc*, %struct.kobject, i32, [36 x i8], %struct.spinlock, i32, i64, i64, i64, [32 x i8], %struct.dql }
%struct.dql = type { i32, i32, i32, [52 x i8], i32, i32, i32, i32, i32, i32, i64, i32, i32, i32, [20 x i8] }
%struct.Qdisc = type opaque
%struct.xps_dev_maps = type { %struct.callback_head, [0 x %struct.xps_map*] }
%struct.xps_map = type { i32, i32, %struct.callback_head, [0 x i16] }
%struct.cpu_rmap = type opaque
%struct.timer_list = type { %struct.list_head, i64, %struct.tvec_base*, void (i64)*, i64, i32, i32, i8*, [16 x i8] }
%struct.tvec_base = type opaque
%struct.netpoll_info = type opaque
%union.anon.51 = type { i8* }
%struct.garp_port = type opaque
%struct.mrp_port = type opaque
%struct.device = type { %struct.device*, %struct.device_private*, %struct.kobject, i8*, %struct.device_type*, %struct.mutex, %struct.bus_type*, %struct.device_driver*, i8*, %struct.dev_pm_info, %struct.dev_pm_domain*, i32, i64*, i64, %struct.device_dma_parameters*, %struct.list_head, %struct.dma_coherent_mem*, %struct.dev_archdata, %struct.device_node*, %struct.acpi_dev_node, i32, i32, %struct.spinlock, %struct.list_head, %struct.klist_node, %struct.class*, %struct.attribute_group**, void (%struct.device*)*, %struct.iommu_group* }
%struct.device_private = type opaque
%struct.device_type = type { i8*, %struct.attribute_group**, i32 (%struct.device*, %struct.kobj_uevent_env*)*, i8* (%struct.device*, i16*, i32*, i32*)*, void (%struct.device*)*, %struct.dev_pm_ops* }
%struct.dev_pm_ops = type { i32 (%struct.device*)*, void (%struct.device*)*, i32 (%struct.device*)*, i32 (%struct.device*)*, i32 (%struct.device*)*, i32 (%struct.device*)*, i32 (%struct.device*)*, i32 (%struct.device*)*, i32 (%struct.device*)*, i32 (%struct.device*)*, i32 (%struct.device*)*, i32 (%struct.device*)*, i32 (%struct.device*)*, i32 (%struct.device*)*, i32 (%struct.device*)*, i32 (%struct.device*)*, i32 (%struct.device*)*, i32 (%struct.device*)*, i32 (%struct.device*)*, i32 (%struct.device*)*, i32 (%struct.device*)*, i32 (%struct.device*)*, i32 (%struct.device*)* }
%struct.bus_type = type { i8*, i8*, %struct.device*, %struct.bus_attribute*, %struct.device_attribute*, %struct.driver_attribute*, i32 (%struct.device*, %struct.device_driver*)*, i32 (%struct.device*, %struct.kobj_uevent_env*)*, i32 (%struct.device*)*, i32 (%struct.device*)*, void (%struct.device*)*, i32 (%struct.device*, i32)*, i32 (%struct.device*)*, %struct.dev_pm_ops*, %struct.iommu_ops*, %struct.subsys_private*, %struct.lock_class_key }
%struct.bus_attribute = type { %struct.attribute, i64 (%struct.bus_type*, i8*)*, i64 (%struct.bus_type*, i8*, i64)* }
%struct.device_attribute = type { %struct.attribute, i64 (%struct.device*, %struct.device_attribute*, i8*)*, i64 (%struct.device*, %struct.device_attribute*, i8*, i64)* }
%struct.driver_attribute = type { %struct.attribute, i64 (%struct.device_driver*, i8*)*, i64 (%struct.device_driver*, i8*, i64)* }
%struct.iommu_ops = type opaque
%struct.subsys_private = type opaque
%struct.device_driver = type { i8*, %struct.bus_type*, %struct.module*, i8*, i8, %struct.of_device_id*, %struct.acpi_device_id*, i32 (%struct.device*)*, i32 (%struct.device*)*, void (%struct.device*)*, i32 (%struct.device*, i32)*, i32 (%struct.device*)*, %struct.attribute_group**, %struct.dev_pm_ops*, %struct.driver_private* }
%struct.of_device_id = type opaque
%struct.acpi_device_id = type opaque
%struct.driver_private = type opaque
%struct.dev_pm_info = type { %struct.pm_message, i8, %struct.spinlock, %struct.list_head, %struct.completion, %struct.wakeup_source*, i8, %struct.pm_subsys_data*, %struct.dev_pm_qos* }
%struct.pm_message = type { i32 }
%struct.wakeup_source = type { i8*, %struct.list_head, %struct.spinlock, %struct.timer_list, i64, %union.ktime, %union.ktime, %union.ktime, %union.ktime, %union.ktime, i64, i64, i64, i64, i64, i8 }
%struct.pm_subsys_data = type { %struct.spinlock, i32 }
%struct.dev_pm_qos = type { %struct.pm_qos_constraints, %struct.pm_qos_flags, %struct.dev_pm_qos_request*, %struct.dev_pm_qos_request* }
%struct.pm_qos_constraints = type { %struct.plist_head, i32, i32, i32, %struct.blocking_notifier_head* }
%struct.blocking_notifier_head = type { %struct.rw_semaphore, %struct.notifier_block* }
%struct.notifier_block = type { i32 (%struct.notifier_block*, i64, i8*)*, %struct.notifier_block*, i32 }
%struct.pm_qos_flags = type { %struct.list_head, i32 }
%struct.dev_pm_qos_request = type { i32, %union.anon.52, %struct.device* }
%union.anon.52 = type { %struct.plist_node }
%struct.dev_pm_domain = type { %struct.dev_pm_ops }
%struct.device_dma_parameters = type { i32, i64 }
%struct.dma_coherent_mem = type opaque
%struct.dev_archdata = type { %struct.dma_map_ops*, i8* }
%struct.dma_map_ops = type { i8* (%struct.device*, i64, i64*, i32, %struct.dma_attrs*)*, void (%struct.device*, i64, i8*, i64, %struct.dma_attrs*)*, i32 (%struct.device*, %struct.vm_area_struct*, i8*, i64, i64, %struct.dma_attrs*)*, i32 (%struct.device*, %struct.sg_table*, i8*, i64, i64, %struct.dma_attrs*)*, i64 (%struct.device*, %struct.page*, i64, i64, i32, %struct.dma_attrs*)*, void (%struct.device*, i64, i64, i32, %struct.dma_attrs*)*, i32 (%struct.device*, %struct.scatterlist*, i32, i32, %struct.dma_attrs*)*, void (%struct.device*, %struct.scatterlist*, i32, i32, %struct.dma_attrs*)*, void (%struct.device*, i64, i64, i32)*, void (%struct.device*, i64, i64, i32)*, void (%struct.device*, %struct.scatterlist*, i32, i32)*, void (%struct.device*, %struct.scatterlist*, i32, i32)*, i32 (%struct.device*, i64)*, i32 (%struct.device*, i64)*, i32 (%struct.device*, i64)*, i32 }
%struct.dma_attrs = type { [1 x i64] }
%struct.sg_table = type { %struct.scatterlist*, i32, i32 }
%struct.scatterlist = type { i64, i32, i32, i64, i32 }
%struct.device_node = type opaque
%struct.acpi_dev_node = type { i8* }
%struct.klist_node = type { i8*, %struct.list_head, %struct.kref }
%struct.class = type { i8*, %struct.module*, %struct.class_attribute*, %struct.device_attribute*, %struct.bin_attribute*, %struct.kobject*, i32 (%struct.device*, %struct.kobj_uevent_env*)*, i8* (%struct.device*, i16*)*, void (%struct.class*)*, void (%struct.device*)*, i32 (%struct.device*, i32)*, i32 (%struct.device*)*, %struct.kobj_ns_type_operations*, i8* (%struct.device*)*, %struct.dev_pm_ops*, %struct.subsys_private* }
%struct.class_attribute = type { %struct.attribute, i64 (%struct.class*, %struct.class_attribute*, i8*)*, i64 (%struct.class*, %struct.class_attribute*, i8*, i64)*, i8* (%struct.class*, %struct.class_attribute*)* }
%struct.bin_attribute = type { %struct.attribute, i64, i8*, i64 (%struct.file*, %struct.kobject*, %struct.bin_attribute*, i8*, i64, i64)*, i64 (%struct.file*, %struct.kobject*, %struct.bin_attribute*, i8*, i64, i64)*, i32 (%struct.file*, %struct.kobject*, %struct.bin_attribute*, %struct.vm_area_struct*)* }
%struct.attribute_group = type { i8*, i16 (%struct.kobject*, %struct.attribute*, i32)*, %struct.attribute** }
%struct.iommu_group = type opaque
%struct.rtnl_link_ops = type opaque
%struct.netdev_tc_txq = type { i16, i16 }
%struct.phy_device = type opaque
%struct.pm_qos_request = type { %struct.plist_node, i32, %struct.delayed_work }
%struct.delayed_work = type { %struct.work_struct, %struct.timer_list, %struct.workqueue_struct*, i32 }
%struct.workqueue_struct = type opaque
%struct.netns_core = type { %struct.ctl_table_header*, i32, %struct.prot_inuse* }
%struct.prot_inuse = type opaque
%struct.netns_mib = type { [1 x %struct.tcp_mib*], [1 x %struct.ipstats_mib*], [1 x %struct.linux_mib*], [1 x %struct.udp_mib*], [1 x %struct.udp_mib*], [1 x %struct.icmp_mib*], %struct.icmpmsg_mib*, %struct.proc_dir_entry*, [1 x %struct.udp_mib*], [1 x %struct.udp_mib*], [1 x %struct.ipstats_mib*], [1 x %struct.icmpv6_mib*], %struct.icmpv6msg_mib* }
%struct.tcp_mib = type { [16 x i64] }
%struct.linux_mib = type { [95 x i64] }
%struct.icmp_mib = type { [28 x i64] }
%struct.icmpmsg_mib = type { [512 x %struct.atomic64_t] }
%struct.udp_mib = type { [8 x i64] }
%struct.ipstats_mib = type { [32 x i64], %struct.u64_stats_sync }
%struct.u64_stats_sync = type {}
%struct.icmpv6_mib = type { [6 x i64] }
%struct.icmpv6msg_mib = type { [512 x %struct.atomic64_t] }
%struct.netns_packet = type { %struct.mutex, %struct.hlist_head }
%struct.netns_unix = type { i32, %struct.ctl_table_header* }
%struct.netns_ipv4 = type { %struct.ctl_table_header*, %struct.ctl_table_header*, %struct.ctl_table_header*, %struct.ctl_table_header*, %struct.ctl_table_header*, %struct.ipv4_devconf*, %struct.ipv4_devconf*, %struct.fib_rules_ops*, i8, %struct.fib_table*, %struct.fib_table*, %struct.fib_table*, %struct.hlist_head*, %struct.sock*, %struct.sock**, %struct.inet_peer_base*, %struct.tcpm_hash_bucket*, i32, [52 x i8], %struct.netns_frags, %struct.xt_table*, %struct.xt_table*, %struct.xt_table*, %struct.xt_table*, %struct.xt_table*, %struct.xt_table*, i32, i32, i32, i32, i32, i32, i32, [2 x i32], [3 x i64], %struct.atomic_t, %struct.mr_table* }
%struct.ipv4_devconf = type opaque
%struct.fib_rules_ops = type opaque
%struct.fib_table = type opaque
%struct.inet_peer_base = type opaque
%struct.tcpm_hash_bucket = type opaque
%struct.netns_frags = type { i32, %struct.list_head, %struct.spinlock, [38 x i8], %struct.percpu_counter, i32, i32, i32, [12 x i8] }
%struct.xt_table = type opaque
%struct.mr_table = type opaque
%struct.netns_ipv6 = type { %struct.netns_sysctl_ipv6, %struct.ipv6_devconf*, %struct.ipv6_devconf*, %struct.inet_peer_base*, [24 x i8], %struct.netns_frags, %struct.xt_table*, %struct.xt_table*, %struct.xt_table*, %struct.xt_table*, %struct.xt_table*, %struct.rt6_info*, %struct.rt6_statistics*, %struct.timer_list, %struct.hlist_head*, %struct.fib6_table*, [40 x i8], %struct.dst_ops, i32, i64, %struct.sock**, %struct.sock*, %struct.sock*, %struct.sock*, %struct.atomic_t, [12 x i8] }
%struct.netns_sysctl_ipv6 = type { %struct.ctl_table_header*, %struct.ctl_table_header*, %struct.ctl_table_header*, %struct.ctl_table_header*, %struct.ctl_table_header*, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32 }
%struct.ipv6_devconf = type opaque
%struct.rt6_info = type opaque
%struct.rt6_statistics = type opaque
%struct.fib6_table = type opaque
%struct.dst_ops = type { i16, i16, i32, i32 (%struct.dst_ops*)*, %struct.dst_entry* (%struct.dst_entry*, i32)*, i32 (%struct.dst_entry*)*, i32 (%struct.dst_entry*)*, i32* (%struct.dst_entry*, i64)*, void (%struct.dst_entry*)*, void (%struct.dst_entry*, %struct.net_device*, i32)*, %struct.dst_entry* (%struct.dst_entry*)*, void (%struct.sk_buff*)*, void (%struct.dst_entry*, %struct.sock*, %struct.sk_buff*, i32)*, void (%struct.dst_entry*, %struct.sock*, %struct.sk_buff*)*, i32 (%struct.sk_buff*)*, %struct.neighbour* (%struct.dst_entry*, %struct.sk_buff*, i8*)*, %struct.kmem_cache*, [8 x i8], %struct.percpu_counter, [24 x i8] }
%struct.dst_entry = type opaque
%struct.kmem_cache = type { %struct.kmem_cache_cpu*, i64, i64, i32, i32, i32, i32, %struct.kmem_cache_order_objects, %struct.kmem_cache_order_objects, %struct.kmem_cache_order_objects, i32, i32, void (i8*)*, i32, i32, i32, i8*, %struct.list_head, %struct.kobject, i32, [64 x %struct.kmem_cache_node*] }
%struct.kmem_cache_cpu = type { i8**, i64, %struct.page*, %struct.page* }
%struct.kmem_cache_order_objects = type { i64 }
%struct.kmem_cache_node = type opaque
%struct.netns_nf = type { %struct.proc_dir_entry*, [13 x %struct.nf_logger*], %struct.ctl_table_header* }
%struct.nf_logger = type opaque
%struct.netns_xt = type { [13 x %struct.list_head], i8 }
%struct.netns_ct = type { %struct.atomic_t, i32, i32, %struct.kmem_cache*, %struct.hlist_nulls_head*, %struct.hlist_head*, %struct.hlist_nulls_head, %struct.hlist_nulls_head, %struct.hlist_nulls_head, %struct.ip_conntrack_stat*, %struct.nf_ct_event_notifier*, %struct.nf_exp_event_notifier*, i32, i32, i32, i32, i32, i32, i32, i8, %struct.nf_ip_net, %struct.hlist_head*, i32, %struct.ctl_table_header*, %struct.ctl_table_header*, %struct.ctl_table_header*, %struct.ctl_table_header*, %struct.ctl_table_header*, i8* }
%struct.hlist_nulls_head = type { %struct.hlist_nulls_node* }
%struct.hlist_nulls_node = type { %struct.hlist_nulls_node*, %struct.hlist_nulls_node** }
%struct.ip_conntrack_stat = type opaque
%struct.nf_ct_event_notifier = type opaque
%struct.nf_exp_event_notifier = type opaque
%struct.nf_ip_net = type { %struct.nf_generic_net, %struct.nf_tcp_net, %struct.nf_udp_net, %struct.nf_icmp_net, %struct.nf_icmp_net, %struct.ctl_table_header*, %struct.ctl_table* }
%struct.nf_generic_net = type { %struct.nf_proto_net, i32 }
%struct.nf_proto_net = type { %struct.ctl_table_header*, %struct.ctl_table*, %struct.ctl_table_header*, %struct.ctl_table*, i32 }
%struct.nf_tcp_net = type { %struct.nf_proto_net, [14 x i32], i32, i32, i32 }
%struct.nf_udp_net = type { %struct.nf_proto_net, [2 x i32] }
%struct.nf_icmp_net = type { %struct.nf_proto_net, i32 }
%struct.netns_nf_frag = type { %struct.netns_sysctl_ipv6, [48 x i8], %struct.netns_frags }
%struct.net_generic = type opaque
%struct.netns_xfrm = type { %struct.list_head, %struct.hlist_head*, %struct.hlist_head*, %struct.hlist_head*, i32, i32, %struct.work_struct, %struct.hlist_head, %struct.work_struct, %struct.__wait_queue_head, %struct.list_head, %struct.hlist_head*, i32, [6 x %struct.hlist_head], [6 x %struct.xfrm_policy_hash], [6 x i32], %struct.work_struct, %struct.sock*, %struct.sock*, i32, i32, i32, i32, %struct.ctl_table_header*, [32 x i8], %struct.dst_ops, %struct.dst_ops }
%struct.xfrm_policy_hash = type { %struct.hlist_head*, i32 }
%struct.netns_ipvs = type opaque
%struct.signal_struct = type { %struct.atomic_t, %struct.atomic_t, i32, %struct.__wait_queue_head, %struct.task_struct*, %struct.sigpending, i32, i32, %struct.task_struct*, i32, i32, i8, i32, %struct.list_head, %struct.hrtimer, %struct.pid*, %union.ktime, [2 x %struct.cpu_itimer], %struct.thread_group_cputimer, %struct.task_cputime, [3 x %struct.list_head], %struct.pid*, i32, %struct.tty_struct*, i64, i64, i64, i64, i64, i64, %struct.cputime, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, %struct.task_io_accounting, i64, [16 x %struct.rlimit], %struct.pacct_struct, %struct.taskstats*, i32, i32, %struct.tty_audit_buf*, %struct.rw_semaphore, i32, i16, i16, %struct.mutex }
%struct.hrtimer = type { %struct.timerqueue_node, %union.ktime, i32 (%struct.hrtimer*)*, %struct.hrtimer_clock_base*, i64, i32, i8*, [16 x i8] }
%struct.timerqueue_node = type { %struct.rb_node, %union.ktime }
%struct.hrtimer_clock_base = type { %struct.hrtimer_cpu_base*, i32, i32, %struct.timerqueue_head, %union.ktime, i64 ()*, %union.ktime, %union.ktime }
%struct.hrtimer_cpu_base = type { %struct.raw_spinlock, i32, i32, %union.ktime, i32, i32, i64, i64, i64, %union.ktime, [4 x %struct.hrtimer_clock_base] }
%struct.timerqueue_head = type { %struct.rb_root, %struct.timerqueue_node* }
%struct.cpu_itimer = type { i64, i64, i32, i32 }
%struct.thread_group_cputimer = type { %struct.task_cputime, i32, %struct.raw_spinlock }
%struct.tty_struct = type opaque
%struct.rlimit = type { i64, i64 }
%struct.pacct_struct = type { i32, i64, i64, i64, i64, i64, i64 }
%struct.taskstats = type { i16, i32, i8, i8, i64, i64, i64, i64, i64, i64, i64, i64, [32 x i8], i8, [3 x i8], [4 x i8], i32, i32, i32, i32, i32, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64 }
%struct.tty_audit_buf = type opaque
%struct.sighand_struct = type { %struct.atomic_t, [64 x %struct.k_sigaction], %struct.spinlock, %struct.__wait_queue_head }
%struct.k_sigaction = type { %struct.sigaction }
%struct.sigaction = type { void (i32)*, i64, void ()*, %struct.sigset_t }
%struct.sigset_t = type { [1 x i64] }
%struct.sigpending = type { %struct.list_head, %struct.sigset_t }
%struct.audit_context = type opaque
%struct.seccomp = type { i32, %struct.seccomp_filter* }
%struct.seccomp_filter = type opaque
%struct.plist_head = type { %struct.list_head }
%struct.rt_mutex_waiter = type opaque
%struct.bio_list = type opaque
%struct.blk_plug = type opaque
%struct.reclaim_state = type opaque
%struct.backing_dev_info = type opaque
%struct.io_context = type opaque
%struct.siginfo = type { i32, i32, i32, %union.anon.32 }
%union.anon.32 = type { %struct.anon.36, [80 x i8] }
%struct.anon.36 = type { i32, i32, i32, i64, i64 }
%struct.task_io_accounting = type { i64, i64, i64, i64, i64, i64, i64 }
%struct.nodemask_t = type { [1 x i64] }
%struct.seqcount = type { i32 }
%struct.css_set = type { %struct.atomic_t, %struct.hlist_node, %struct.list_head, %struct.list_head, [4 x %struct.cgroup_subsys_state*], %struct.callback_head }
%struct.cgroup_subsys_state = type { %struct.cgroup*, %struct.atomic_t, i64, %struct.css_id*, %struct.work_struct }
%struct.cgroup = type { i64, %struct.atomic_t, i32, %struct.list_head, %struct.list_head, %struct.list_head, %struct.cgroup*, %struct.dentry*, %struct.cgroup_name*, [4 x %struct.cgroup_subsys_state*], %struct.cgroupfs_root*, %struct.list_head, %struct.list_head, %struct.list_head, %struct.list_head, %struct.list_head, %struct.mutex, %struct.callback_head, %struct.work_struct, %struct.list_head, %struct.spinlock, %struct.simple_xattrs }
%struct.cgroup_name = type { %struct.callback_head, [0 x i8] }
%struct.cgroupfs_root = type { %struct.super_block*, i64, i32, i64, %struct.list_head, %struct.cgroup, i32, %struct.list_head, %struct.list_head, i64, %struct.ida, [4096 x i8], [64 x i8] }
%struct.ida = type { %struct.idr, %struct.ida_bitmap* }
%struct.idr = type { %struct.idr_layer*, %struct.idr_layer*, %struct.idr_layer*, i32, i32, i32, %struct.spinlock }
%struct.idr_layer = type { i32, [4 x i64], [256 x %struct.idr_layer*], i32, i32, %struct.callback_head }
%struct.ida_bitmap = type { i64, [15 x i64] }
%struct.simple_xattrs = type { %struct.list_head, %struct.spinlock }
%struct.css_id = type opaque
%struct.robust_list_head = type opaque
%struct.compat_robust_list_head = type { %struct.compat_robust_list, i32, i32 }
%struct.compat_robust_list = type { i32 }
%struct.futex_pi_state = type opaque
%struct.perf_event_context = type opaque
%struct.mempolicy = type opaque
%struct.callback_head = type { %struct.callback_head*, void (%struct.callback_head*)* }
%struct.pipe_inode_info = type opaque
%struct.page_frag = type { %struct.page*, i32, i32 }
%struct.task_delay_info = type { %struct.spinlock, i32, %struct.timespec, %struct.timespec, i64, i64, i32, i32, %struct.timespec, %struct.timespec, i64, i32 }
%struct.pernet_operations = type { %struct.list_head, i32 (%struct.net*)*, void (%struct.net*)*, void (%struct.list_head*)*, i32*, i64 }
%struct.smp_ops = type { void ()*, void (i32)*, void (i32)*, void (i32)*, void (i32)*, i32 (i32, %struct.task_struct*)*, i32 ()*, void (i32)*, void ()*, void (%struct.cpumask*)*, void (i32)* }
%struct.cfg80211_registered_device = type { %struct.cfg80211_ops*, %struct.list_head, %struct.mutex, %struct.rfkill_ops, %struct.rfkill*, %struct.work_struct, [2 x i8], i32, i32, %struct.mutex, %struct.list_head, i32, i32, i32, %struct.__wait_queue_head, %struct.list_head, %struct.spinlock, i32, i32, %struct.spinlock, %struct.list_head, %struct.rb_root, i32, %struct.cfg80211_scan_request*, %struct.cfg80211_sched_scan_request*, i64, %struct.work_struct, %struct.work_struct, %struct.mutex, %struct.work_struct, %struct.work_struct, %struct.cfg80211_wowlan*, %struct.delayed_work, i32, %struct.wiphy }
%struct.cfg80211_ops = type { i32 (%struct.wiphy*, %struct.cfg80211_wowlan*)*, i32 (%struct.wiphy*)*, void (%struct.wiphy*, i1)*, %struct.wireless_dev* (%struct.wiphy*, i8*, i32, i32*, %struct.vif_params*)*, i32 (%struct.wiphy*, %struct.wireless_dev*)*, i32 (%struct.wiphy*, %struct.net_device*, i32, i32*, %struct.vif_params*)*, i32 (%struct.wiphy*, %struct.net_device*, i8, i1, i8*, %struct.key_params*)*, i32 (%struct.wiphy*, %struct.net_device*, i8, i1, i8*, i8*, void (i8*, %struct.key_params*)*)*, i32 (%struct.wiphy*, %struct.net_device*, i8, i1, i8*)*, i32 (%struct.wiphy*, %struct.net_device*, i8, i1, i1)*, i32 (%struct.wiphy*, %struct.net_device*, i8)*, i32 (%struct.wiphy*, %struct.net_device*, %struct.cfg80211_ap_settings*)*, i32 (%struct.wiphy*, %struct.net_device*, %struct.cfg80211_beacon_data*)*, i32 (%struct.wiphy*, %struct.net_device*)*, i32 (%struct.wiphy*, %struct.net_device*, i8*, %struct.station_parameters*)*, i32 (%struct.wiphy*, %struct.net_device*, i8*)*, i32 (%struct.wiphy*, %struct.net_device*, i8*, %struct.station_parameters*)*, i32 (%struct.wiphy*, %struct.net_device*, i8*, %struct.station_info*)*, i32 (%struct.wiphy*, %struct.net_device*, i32, i8*, %struct.station_info*)*, i32 (%struct.wiphy*, %struct.net_device*, i8*, i8*)*, i32 (%struct.wiphy*, %struct.net_device*, i8*)*, i32 (%struct.wiphy*, %struct.net_device*, i8*, i8*)*, i32 (%struct.wiphy*, %struct.net_device*, i8*, i8*, %struct.mpath_info*)*, i32 (%struct.wiphy*, %struct.net_device*, i32, i8*, i8*, %struct.mpath_info*)*, i32 (%struct.wiphy*, %struct.net_device*, %struct.mesh_config*)*, i32 (%struct.wiphy*, %struct.net_device*, i32, %struct.mesh_config*)*, i32 (%struct.wiphy*, %struct.net_device*, %struct.mesh_config*, %struct.mesh_setup*)*, i32 (%struct.wiphy*, %struct.net_device*)*, i32 (%struct.wiphy*, %struct.net_device*, %struct.bss_parameters*)*, i32 (%struct.wiphy*, %struct.net_device*, %struct.ieee80211_txq_params*)*, i32 (%struct.wiphy*, %struct.net_device*, %struct.ieee80211_channel*)*, i32 (%struct.wiphy*, %struct.cfg80211_chan_def*)*, i32 (%struct.wiphy*, %struct.cfg80211_scan_request*)*, i32 (%struct.wiphy*, %struct.net_device*, %struct.cfg80211_auth_request*)*, i32 (%struct.wiphy*, %struct.net_device*, %struct.cfg80211_assoc_request*)*, i32 (%struct.wiphy*, %struct.net_device*, %struct.cfg80211_deauth_request*)*, i32 (%struct.wiphy*, %struct.net_device*, %struct.cfg80211_disassoc_request*)*, i32 (%struct.wiphy*, %struct.net_device*, %struct.cfg80211_connect_params*)*, i32 (%struct.wiphy*, %struct.net_device*, i16)*, i32 (%struct.wiphy*, %struct.net_device*, %struct.cfg80211_ibss_params*)*, i32 (%struct.wiphy*, %struct.net_device*)*, i32 (%struct.wiphy*, %struct.net_device*, i32*)*, i32 (%struct.wiphy*, i32)*, i32 (%struct.wiphy*, %struct.wireless_dev*, i32, i32)*, i32 (%struct.wiphy*, %struct.wireless_dev*, i32*)*, i32 (%struct.wiphy*, %struct.net_device*, i8*)*, void (%struct.wiphy*)*, i32 (%struct.wiphy*, %struct.net_device*, i8*, %struct.cfg80211_bitrate_mask*)*, i32 (%struct.wiphy*, %struct.net_device*, i32, %struct.survey_info*)*, i32 (%struct.wiphy*, %struct.net_device*, %struct.cfg80211_pmksa*)*, i32 (%struct.wiphy*, %struct.net_device*, %struct.cfg80211_pmksa*)*, i32 (%struct.wiphy*, %struct.net_device*)*, i32 (%struct.wiphy*, %struct.wireless_dev*, %struct.ieee80211_channel*, i32, i64*)*, i32 (%struct.wiphy*, %struct.wireless_dev*, i64)*, i32 (%struct.wiphy*, %struct.wireless_dev*, %struct.ieee80211_channel*, i1, i32, i8*, i64, i1, i1, i64*)*, i32 (%struct.wiphy*, %struct.wireless_dev*, i64)*, i32 (%struct.wiphy*, %struct.net_device*, i1, i32)*, i32 (%struct.wiphy*, %struct.net_device*, i32, i32)*, i32 (%struct.wiphy*, %struct.net_device*, i32, i32, i32)*, void (%struct.wiphy*, %struct.wireless_dev*, i16, i1)*, i32 (%struct.wiphy*, i32, i32)*, i32 (%struct.wiphy*, i32*, i32*)*, i32 (%struct.wiphy*, i32, i32)*, void (%struct.wiphy*, i32*, i32*, i32*, i32*)*, i32 (%struct.wiphy*, %struct.net_device*, %struct.cfg80211_sched_scan_request*)*, i32 (%struct.wiphy*, %struct.net_device*)*, i32 (%struct.wiphy*, %struct.net_device*, %struct.cfg80211_gtk_rekey_data*)*, i32 (%struct.wiphy*, %struct.net_device*, i8*, i8, i8, i16, i8*, i64)*, i32 (%struct.wiphy*, %struct.net_device*, i8*, i32)*, i32 (%struct.wiphy*, %struct.net_device*, i8*, i64*)*, i32 (%struct.wiphy*, %struct.net_device*, i16)*, i32 (%struct.wiphy*, %struct.net_device*, i32)*, void (%struct.wiphy*, %struct.net_device*, %struct.ethtool_stats*, i64*)*, void (%struct.wiphy*, %struct.net_device*, i32, i8*)*, i32 (%struct.wiphy*, %struct.wireless_dev*, %struct.cfg80211_chan_def*)*, i32 (%struct.wiphy*, %struct.wireless_dev*)*, void (%struct.wiphy*, %struct.wireless_dev*)*, i32 (%struct.wiphy*, %struct.net_device*, %struct.cfg80211_acl_data*)*, i32 (%struct.wiphy*, %struct.net_device*, %struct.cfg80211_chan_def*)*, i32 (%struct.wiphy*, %struct.net_device*, %struct.cfg80211_update_ft_ies_params*)*, i32 (%struct.wiphy*, %struct.wireless_dev*, i32, i16)*, void (%struct.wiphy*, %struct.wireless_dev*)* }
%struct.vif_params = type { i32, [6 x i8] }
%struct.cfg80211_ap_settings = type { %struct.cfg80211_chan_def, %struct.cfg80211_beacon_data, i32, i32, i8*, i64, i32, %struct.cfg80211_crypto_settings, i8, i32, i32, i8, i8, %struct.cfg80211_acl_data*, i8 }
%struct.cfg80211_beacon_data = type { i8*, i8*, i8*, i8*, i8*, i8*, i64, i64, i64, i64, i64, i64 }
%struct.cfg80211_crypto_settings = type { i32, i32, i32, [5 x i32], i32, [2 x i32], i8, i16, i8 }
%struct.cfg80211_acl_data = type { i32, i32, [0 x %struct.mac_address] }
%struct.station_parameters = type { i8*, %struct.net_device*, i32, i32, i32, i32, i16, i8, i8, i8, %struct.ieee80211_ht_cap*, %struct.ieee80211_vht_cap*, i8, i8, i32, i16, i8*, i8 }
%struct.station_info = type { i32, i32, i32, i64, i64, i16, i16, i8, i8, i8, %struct.rate_info, %struct.rate_info, i32, i32, i32, i32, i32, %struct.sta_bss_parameters, %struct.nl80211_sta_flag_update, i32, i8*, i64, i32, i64, i32, i32, i32 }
%struct.rate_info = type { i8, i8, i16, i8 }
%struct.sta_bss_parameters = type { i8, i8, i16 }
%struct.nl80211_sta_flag_update = type { i32, i32 }
%struct.mpath_info = type { i32, i32, i32, i32, i32, i32, i8, i8, i32 }
%struct.mesh_config = type { i16, i16, i16, i16, i8, i8, i8, i8, i32, i8, i32, i16, i32, i16, i16, i16, i8, i16, i8, i8, i32, i16, i32, i16, i16, i32, i16 }
%struct.mesh_setup = type { %struct.cfg80211_chan_def, i8*, i8, i8, i8, i8, i8*, i8, i8, i8, i8, i8, i16, [3 x i32] }
%struct.bss_parameters = type { i32, i32, i32, i8*, i8, i32, i32, i8, i8 }
%struct.ieee80211_txq_params = type { i32, i16, i16, i16, i8 }
%struct.cfg80211_auth_request = type { %struct.cfg80211_bss*, i8*, i64, i32, i8*, i8, i8, i8*, i64 }
%struct.cfg80211_assoc_request = type { %struct.cfg80211_bss*, i8*, i8*, i64, %struct.cfg80211_crypto_settings, i8, i32, %struct.ieee80211_ht_cap, %struct.ieee80211_ht_cap, %struct.ieee80211_vht_cap, %struct.ieee80211_vht_cap }
%struct.cfg80211_deauth_request = type { i8*, i8*, i64, i16, i8 }
%struct.cfg80211_disassoc_request = type { %struct.cfg80211_bss*, i8*, i64, i16, i8 }
%struct.cfg80211_connect_params = type { %struct.ieee80211_channel*, i8*, i8*, i64, i32, i8*, i64, i8, i32, %struct.cfg80211_crypto_settings, i8*, i8, i8, i32, i32, %struct.ieee80211_ht_cap, %struct.ieee80211_ht_cap, %struct.ieee80211_vht_cap, %struct.ieee80211_vht_cap }
%struct.cfg80211_ibss_params = type { i8*, i8*, %struct.cfg80211_chan_def, i8*, i8, i8, i16, i32, i8, i8, i8, [3 x i32] }
%struct.cfg80211_bitrate_mask = type { [3 x %struct.anon.53] }
%struct.anon.53 = type { i32, [10 x i8] }
%struct.survey_info = type { %struct.ieee80211_channel*, i64, i64, i64, i64, i64, i32, i8 }
%struct.cfg80211_pmksa = type { i8*, i8* }
%struct.cfg80211_gtk_rekey_data = type { [16 x i8], [16 x i8], [8 x i8] }
%struct.cfg80211_update_ft_ies_params = type { i16, i8*, i64 }
%struct.rfkill_ops = type { void (%struct.rfkill*, i8*)*, void (%struct.rfkill*, i8*)*, i32 (i8*, i1)* }
%struct.rfkill = type opaque
%struct.cfg80211_scan_request = type { %struct.cfg80211_ssid*, i32, i32, i8*, i64, i32, [3 x i32], %struct.wireless_dev*, %struct.wiphy*, i64, i8, i8, [0 x %struct.ieee80211_channel*] }
%struct.cfg80211_ssid = type { [32 x i8], i8 }
%struct.cfg80211_sched_scan_request = type { %struct.cfg80211_ssid*, i32, i32, i32, i8*, i64, i32, %struct.cfg80211_match_set*, i32, i32, %struct.wiphy*, %struct.net_device*, i64, [0 x %struct.ieee80211_channel*] }
%struct.cfg80211_match_set = type { %struct.cfg80211_ssid }
%struct.cfg80211_wowlan = type { i8, i8, i8, i8, i8, i8, i8, %struct.cfg80211_wowlan_trig_pkt_pattern*, %struct.cfg80211_wowlan_tcp*, i32 }
%struct.cfg80211_wowlan_trig_pkt_pattern = type { i8*, i8*, i32, i32 }
%struct.cfg80211_wowlan_tcp = type { %struct.socket*, i32, i32, i16, i16, [6 x i8], i32, i8*, %struct.nl80211_wowlan_tcp_data_seq, i32, i32, i8*, i8*, i32, %struct.nl80211_wowlan_tcp_data_token }
%struct.socket = type { i32, i16, i64, %struct.socket_wq*, %struct.file*, %struct.sock*, %struct.proto_ops* }
%struct.socket_wq = type { %struct.__wait_queue_head, %struct.fasync_struct*, %struct.callback_head, [16 x i8] }
%struct.proto_ops = type { i32, %struct.module*, i32 (%struct.socket*)*, i32 (%struct.socket*, %struct.sockaddr*, i32)*, i32 (%struct.socket*, %struct.sockaddr*, i32, i32)*, i32 (%struct.socket*, %struct.socket*)*, i32 (%struct.socket*, %struct.socket*, i32)*, i32 (%struct.socket*, %struct.sockaddr*, i32*, i32)*, i32 (%struct.file*, %struct.socket*, %struct.poll_table_struct*)*, i32 (%struct.socket*, i32, i64)*, i32 (%struct.socket*, i32, i64)*, i32 (%struct.socket*, i32)*, i32 (%struct.socket*, i32)*, i32 (%struct.socket*, i32, i32, i8*, i32)*, i32 (%struct.socket*, i32, i32, i8*, i32*)*, i32 (%struct.socket*, i32, i32, i8*, i32)*, i32 (%struct.socket*, i32, i32, i8*, i32*)*, i32 (%struct.kiocb*, %struct.socket*, %struct.msghdr*, i64)*, i32 (%struct.kiocb*, %struct.socket*, %struct.msghdr*, i64, i32)*, i32 (%struct.file*, %struct.socket*, %struct.vm_area_struct*)*, i64 (%struct.socket*, %struct.page*, i32, i64, i32)*, i64 (%struct.socket*, i64*, %struct.pipe_inode_info*, i64, i32)*, void (%struct.sock*, i32)* }
%struct.sockaddr = type { i16, [14 x i8] }
%struct.msghdr = type { i8*, i32, %struct.iovec*, i64, i8*, i64, i32 }
%struct.nl80211_wowlan_tcp_data_seq = type { i32, i32, i32 }
%struct.nl80211_wowlan_tcp_data_token = type { i32, i32, [0 x i8] }
%struct.__wait_queue = type { i32, i8*, i32 (%struct.__wait_queue*, i32, i32, i8*)*, %struct.list_head }
%struct.cfg80211_beacon_registration = type { %struct.list_head, i32 }

@cfg80211_rdev_list = global %struct.list_head { %struct.list_head* @cfg80211_rdev_list, %struct.list_head* @cfg80211_rdev_list }, align 8
@cfg80211_mutex = global %struct.mutex { %struct.atomic_t { i32 1 }, %struct.spinlock zeroinitializer, %struct.list_head { %struct.list_head* bitcast (i8* getelementptr (i8, i8* bitcast (%struct.mutex* @cfg80211_mutex to i8*), i64 8) to %struct.list_head*), %struct.list_head* bitcast (i8* getelementptr (i8, i8* bitcast (%struct.mutex* @cfg80211_mutex to i8*), i64 8) to %struct.list_head*) }, %struct.task_struct* null, i8* null }, align 8
@__param_str_cfg80211_disable_40mhz_24ghz = internal constant [38 x i8] c"cfg80211.cfg80211_disable_40mhz_24ghz\00", align 16
@param_ops_bool = external global %struct.kernel_param_ops, align 8
@cfg80211_disable_40mhz_24ghz = internal global i8 0, align 1
@__param_cfg80211_disable_40mhz_24ghz = internal constant %struct.kernel_param { i8* getelementptr inbounds ([38 x i8], [38 x i8]* @__param_str_cfg80211_disable_40mhz_24ghz, i32 0, i32 0), %struct.kernel_param_ops* @param_ops_bool, i16 420, i16 -1, %union.anon.5 { i8* @cfg80211_disable_40mhz_24ghz } }, section "__param", align 8
@.str = private unnamed_addr constant [8 x i8] c"phy%d%n\00", align 1
@.str.1 = private unnamed_addr constant [49 x i8] c"\013cfg80211: failed to rename debugfs dir to %s!\0A\00", align 1
@.str.2 = private unnamed_addr constant [7 x i8] c"wlan%d\00", align 1
@.str.3 = private unnamed_addr constant [20 x i8] c"net/wireless/core.c\00", align 1
@wiphy_new.wiphy_counter = internal global i32 0, align 4
@.str.4 = private unnamed_addr constant [6 x i8] c"phy%d\00", align 1
@wiphy_new.__key = internal global %struct.lock_class_key zeroinitializer, align 1
@.str.5 = private unnamed_addr constant [11 x i8] c"&rdev->mtx\00", align 1
@wiphy_new.__key.6 = internal global %struct.lock_class_key zeroinitializer, align 1
@.str.7 = private unnamed_addr constant [19 x i8] c"&rdev->devlist_mtx\00", align 1
@wiphy_new.__key.8 = internal global %struct.lock_class_key zeroinitializer, align 1
@.str.9 = private unnamed_addr constant [22 x i8] c"&rdev->sched_scan_mtx\00", align 1
@ieee80211_class = external global %struct.class, align 8
@init_net = external global %struct.net, align 64
@wiphy_new.__key.10 = internal global %struct.lock_class_key zeroinitializer, align 1
@.str.11 = private unnamed_addr constant [16 x i8] c"&rdev->dev_wait\00", align 1
@__kstrtab_wiphy_new = internal constant [10 x i8] c"wiphy_new\00", section "__ksymtab_strings", align 1
@__ksymtab_wiphy_new = internal constant %struct.kernel_symbol { i64 ptrtoint (%struct.wiphy* (%struct.cfg80211_ops*, i32)* @wiphy_new to i64), i8* getelementptr inbounds ([10 x i8], [10 x i8]* @__kstrtab_wiphy_new, i32 0, i32 0) }, section "___ksymtab+wiphy_new", align 8
@cfg80211_rdev_list_generation = common global i32 0, align 4
@ieee80211_debugfs_dir = internal global %struct.dentry* null, align 8
@__kstrtab_wiphy_register = internal constant [15 x i8] c"wiphy_register\00", section "__ksymtab_strings", align 1
@__ksymtab_wiphy_register = internal constant %struct.kernel_symbol { i64 ptrtoint (i32 (%struct.wiphy*)* @wiphy_register to i64), i8* getelementptr inbounds ([15 x i8], [15 x i8]* @__kstrtab_wiphy_register, i32 0, i32 0) }, section "___ksymtab+wiphy_register", align 8
@__kstrtab_wiphy_rfkill_start_polling = internal constant [27 x i8] c"wiphy_rfkill_start_polling\00", section "__ksymtab_strings", align 1
@__ksymtab_wiphy_rfkill_start_polling = internal constant %struct.kernel_symbol { i64 ptrtoint (void (%struct.wiphy*)* @wiphy_rfkill_start_polling to i64), i8* getelementptr inbounds ([27 x i8], [27 x i8]* @__kstrtab_wiphy_rfkill_start_polling, i32 0, i32 0) }, section "___ksymtab+wiphy_rfkill_start_polling", align 8
@__kstrtab_wiphy_rfkill_stop_polling = internal constant [26 x i8] c"wiphy_rfkill_stop_polling\00", section "__ksymtab_strings", align 1
@__ksymtab_wiphy_rfkill_stop_polling = internal constant %struct.kernel_symbol { i64 ptrtoint (void (%struct.wiphy*)* @wiphy_rfkill_stop_polling to i64), i8* getelementptr inbounds ([26 x i8], [26 x i8]* @__kstrtab_wiphy_rfkill_stop_polling, i32 0, i32 0) }, section "___ksymtab+wiphy_rfkill_stop_polling", align 8
@__kstrtab_wiphy_unregister = internal constant [17 x i8] c"wiphy_unregister\00", section "__ksymtab_strings", align 1
@__ksymtab_wiphy_unregister = internal constant %struct.kernel_symbol { i64 ptrtoint (void (%struct.wiphy*)* @wiphy_unregister to i64), i8* getelementptr inbounds ([17 x i8], [17 x i8]* @__kstrtab_wiphy_unregister, i32 0, i32 0) }, section "___ksymtab+wiphy_unregister", align 8
@__kstrtab_wiphy_free = internal constant [11 x i8] c"wiphy_free\00", section "__ksymtab_strings", align 1
@__ksymtab_wiphy_free = internal constant %struct.kernel_symbol { i64 ptrtoint (void (%struct.wiphy*)* @wiphy_free to i64), i8* getelementptr inbounds ([11 x i8], [11 x i8]* @__kstrtab_wiphy_free, i32 0, i32 0) }, section "___ksymtab+wiphy_free", align 8
@__kstrtab_wiphy_rfkill_set_hw_state = internal constant [26 x i8] c"wiphy_rfkill_set_hw_state\00", section "__ksymtab_strings", align 1
@__ksymtab_wiphy_rfkill_set_hw_state = internal constant %struct.kernel_symbol { i64 ptrtoint (void (%struct.wiphy*, i1)* @wiphy_rfkill_set_hw_state to i64), i8* getelementptr inbounds ([26 x i8], [26 x i8]* @__kstrtab_wiphy_rfkill_set_hw_state, i32 0, i32 0) }, section "___ksymtab+wiphy_rfkill_set_hw_state", align 8
@.str.12 = private unnamed_addr constant [37 x i8] c"\013RTNL: assertion failed at %s (%d)\0A\00", align 1
@cfg80211_unregister_wdev.__warned = internal global i8 0, section ".data.unlikely", align 1
@__kstrtab_cfg80211_unregister_wdev = internal constant [25 x i8] c"cfg80211_unregister_wdev\00", section "__ksymtab_strings", align 1
@__ksymtab_cfg80211_unregister_wdev = internal constant %struct.kernel_symbol { i64 ptrtoint (void (%struct.wireless_dev*)* @cfg80211_unregister_wdev to i64), i8* getelementptr inbounds ([25 x i8], [25 x i8]* @__kstrtab_cfg80211_unregister_wdev, i32 0, i32 0) }, section "___ksymtab+cfg80211_unregister_wdev", align 8
@__initcall_cfg80211_init4 = internal global i32 ()* @cfg80211_init, section ".initcall4.init", align 8
@cfg80211_netdev_notifier = internal global %struct.notifier_block { i32 (%struct.notifier_block*, i64, i8*)* @cfg80211_netdev_notifier_call, %struct.notifier_block* null, i32 0 }, align 8
@cfg80211_pernet_ops = internal global %struct.pernet_operations { %struct.list_head zeroinitializer, i32 (%struct.net*)* null, void (%struct.net*)* @cfg80211_pernet_exit, void (%struct.list_head*)* null, i32* null, i64 0 }, align 8
@cfg80211_wq = common global %struct.workqueue_struct* null, align 8
@__exitcall_cfg80211_exit = internal global void ()* @cfg80211_exit, section ".exitcall.exit", align 8
@smp_ops = external global %struct.smp_ops, align 8
@.str.13 = private unnamed_addr constant [20 x i8] c"net/wireless/core.h\00", align 1
@__tracepoint_rdev_stop_p2p_device = external global %struct.tracepoint, align 8
@__tracepoint_rdev_return_void = external global %struct.tracepoint, align 8
@__tracepoint_rdev_rfkill_poll = external global %struct.tracepoint, align 8
@current_task = external global %struct.task_struct*, align 8
@__tracepoint_rdev_set_wakeup = external global %struct.tracepoint, align 8
@system_wq = external global %struct.workqueue_struct*, align 8
@.str.14 = private unnamed_addr constant [10 x i8] c"ieee80211\00", align 1
@.str.15 = private unnamed_addr constant [9 x i8] c"cfg80211\00", align 1
@wiphy_type = internal global %struct.device_type { i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.19, i32 0, i32 0), %struct.attribute_group** null, i32 (%struct.device*, %struct.kobj_uevent_env*)* null, i8* (%struct.device*, i16*, i32*, i32*)* null, void (%struct.device*)* null, %struct.dev_pm_ops* null }, align 8
@cfg80211_netdev_notifier_call.__key = internal global %struct.lock_class_key zeroinitializer, align 1
@.str.16 = private unnamed_addr constant [11 x i8] c"&wdev->mtx\00", align 1
@.str.17 = private unnamed_addr constant [9 x i8] c"phy80211\00", align 1
@.str.18 = private unnamed_addr constant [55 x i8] c"\013cfg80211: failed to add phy80211 symlink to netdev!\0A\00", align 1
@cfg80211_ethtool_ops = external constant %struct.ethtool_ops, align 8
@.str.19 = private unnamed_addr constant [5 x i8] c"wlan\00", align 1
@__tracepoint_rdev_set_power_mgmt = external global %struct.tracepoint, align 8
@__tracepoint_rdev_return_int = external global %struct.tracepoint, align 8
@llvm.used = appending global [12 x i8*] [i8* bitcast (%struct.kernel_param* @__param_cfg80211_disable_40mhz_24ghz to i8*), i8* bitcast (%struct.kernel_symbol* @__ksymtab_wiphy_new to i8*), i8* bitcast (%struct.kernel_symbol* @__ksymtab_wiphy_register to i8*), i8* bitcast (%struct.kernel_symbol* @__ksymtab_wiphy_rfkill_start_polling to i8*), i8* bitcast (%struct.kernel_symbol* @__ksymtab_wiphy_rfkill_stop_polling to i8*), i8* bitcast (%struct.kernel_symbol* @__ksymtab_wiphy_unregister to i8*), i8* bitcast (%struct.kernel_symbol* @__ksymtab_wiphy_free to i8*), i8* bitcast (%struct.kernel_symbol* @__ksymtab_wiphy_rfkill_set_hw_state to i8*), i8* bitcast (%struct.kernel_symbol* @__ksymtab_cfg80211_unregister_wdev to i8*), i8* bitcast (i32 ()** @__initcall_cfg80211_init4 to i8*), i8* bitcast (void ()* @cfg80211_exit to i8*), i8* bitcast (void ()** @__exitcall_cfg80211_exit to i8*)], section "llvm.metadata"

; Function Attrs: noinline nounwind optnone uwtable
define internal void @smp_send_stop() #0 {
entry:
  %0 = load void (i32)*, void (i32)** getelementptr inbounds (%struct.smp_ops, %struct.smp_ops* @smp_ops, i32 0, i32 3), align 8
  call void %0(i32 0)
  ret void
}

; Function Attrs: noinline nounwind optnone uwtable
define internal void @smp_send_reschedule(i32 %cpu) #0 {
entry:
  %cpu.addr = alloca i32, align 4
  store i32 %cpu, i32* %cpu.addr, align 4
  %0 = load void (i32)*, void (i32)** getelementptr inbounds (%struct.smp_ops, %struct.smp_ops* @smp_ops, i32 0, i32 4), align 8
  %1 = load i32, i32* %cpu.addr, align 4
  call void %0(i32 %1)
  ret void
}

; Function Attrs: noinline nounwind optnone uwtable
define internal void @smp_prepare_cpus(i32 %max_cpus) #0 {
entry:
  %max_cpus.addr = alloca i32, align 4
  store i32 %max_cpus, i32* %max_cpus.addr, align 4
  %0 = load void (i32)*, void (i32)** getelementptr inbounds (%struct.smp_ops, %struct.smp_ops* @smp_ops, i32 0, i32 1), align 8
  %1 = load i32, i32* %max_cpus.addr, align 4
  call void %0(i32 %1)
  ret void
}

; Function Attrs: noinline nounwind optnone uwtable
define internal i32 @__cpu_up(i32 %cpu, %struct.task_struct* %tidle) #0 {
entry:
  %cpu.addr = alloca i32, align 4
  %tidle.addr = alloca %struct.task_struct*, align 8
  store i32 %cpu, i32* %cpu.addr, align 4
  store %struct.task_struct* %tidle, %struct.task_struct** %tidle.addr, align 8
  %0 = load i32 (i32, %struct.task_struct*)*, i32 (i32, %struct.task_struct*)** getelementptr inbounds (%struct.smp_ops, %struct.smp_ops* @smp_ops, i32 0, i32 5), align 8
  %1 = load i32, i32* %cpu.addr, align 4
  %2 = load %struct.task_struct*, %struct.task_struct** %tidle.addr, align 8
  %call = call i32 %0(i32 %1, %struct.task_struct* %2)
  ret i32 %call
}

; Function Attrs: noinline nounwind optnone uwtable
define internal void @smp_cpus_done(i32 %max_cpus) #0 {
entry:
  %max_cpus.addr = alloca i32, align 4
  store i32 %max_cpus, i32* %max_cpus.addr, align 4
  %0 = load void (i32)*, void (i32)** getelementptr inbounds (%struct.smp_ops, %struct.smp_ops* @smp_ops, i32 0, i32 2), align 8
  %1 = load i32, i32* %max_cpus.addr, align 4
  call void %0(i32 %1)
  ret void
}

; Function Attrs: noinline nounwind optnone uwtable
define internal void @smp_prepare_boot_cpu() #0 {
entry:
  %0 = load void ()*, void ()** getelementptr inbounds (%struct.smp_ops, %struct.smp_ops* @smp_ops, i32 0, i32 0), align 8
  call void %0()
  ret void
}

; Function Attrs: noinline nounwind optnone uwtable
define %struct.cfg80211_registered_device* @cfg80211_rdev_by_wiphy_idx(i32 %wiphy_idx) #0 {
entry:
  %wiphy_idx.addr = alloca i32, align 4
  %result = alloca %struct.cfg80211_registered_device*, align 8
  %rdev = alloca %struct.cfg80211_registered_device*, align 8
  %__mptr = alloca %struct.list_head*, align 8
  %tmp = alloca %struct.cfg80211_registered_device*, align 8
  %__mptr3 = alloca %struct.list_head*, align 8
  %tmp5 = alloca %struct.cfg80211_registered_device*, align 8
  store i32 %wiphy_idx, i32* %wiphy_idx.addr, align 4
  store %struct.cfg80211_registered_device* null, %struct.cfg80211_registered_device** %result, align 8
  call void @assert_cfg80211_lock()
  %0 = load %struct.list_head*, %struct.list_head** getelementptr inbounds (%struct.list_head, %struct.list_head* @cfg80211_rdev_list, i32 0, i32 0), align 8
  store %struct.list_head* %0, %struct.list_head** %__mptr, align 8
  %1 = load %struct.list_head*, %struct.list_head** %__mptr, align 8
  %2 = bitcast %struct.list_head* %1 to i8*
  %add.ptr = getelementptr inbounds i8, i8* %2, i64 -8
  %3 = bitcast i8* %add.ptr to %struct.cfg80211_registered_device*
  store %struct.cfg80211_registered_device* %3, %struct.cfg80211_registered_device** %tmp, align 8
  %4 = load %struct.cfg80211_registered_device*, %struct.cfg80211_registered_device** %tmp, align 8
  store %struct.cfg80211_registered_device* %4, %struct.cfg80211_registered_device** %rdev, align 8
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %5 = load %struct.cfg80211_registered_device*, %struct.cfg80211_registered_device** %rdev, align 8
  %list = getelementptr inbounds %struct.cfg80211_registered_device, %struct.cfg80211_registered_device* %5, i32 0, i32 1
  %cmp = icmp ne %struct.list_head* %list, @cfg80211_rdev_list
  br i1 %cmp, label %for.body, label %for.end.loopexit

for.body:                                         ; preds = %for.cond
  %6 = load %struct.cfg80211_registered_device*, %struct.cfg80211_registered_device** %rdev, align 8
  %wiphy_idx1 = getelementptr inbounds %struct.cfg80211_registered_device, %struct.cfg80211_registered_device* %6, i32 0, i32 8
  %7 = load i32, i32* %wiphy_idx1, align 8
  %8 = load i32, i32* %wiphy_idx.addr, align 4
  %cmp2 = icmp eq i32 %7, %8
  br i1 %cmp2, label %if.then, label %if.end

if.then:                                          ; preds = %for.body
  %9 = load %struct.cfg80211_registered_device*, %struct.cfg80211_registered_device** %rdev, align 8
  store %struct.cfg80211_registered_device* %9, %struct.cfg80211_registered_device** %result, align 8
  br label %for.end

if.end:                                           ; preds = %for.body
  br label %for.inc

for.inc:                                          ; preds = %if.end
  %10 = load %struct.cfg80211_registered_device*, %struct.cfg80211_registered_device** %rdev, align 8
  %list4 = getelementptr inbounds %struct.cfg80211_registered_device, %struct.cfg80211_registered_device* %10, i32 0, i32 1
  %next = getelementptr inbounds %struct.list_head, %struct.list_head* %list4, i32 0, i32 0
  %11 = load %struct.list_head*, %struct.list_head** %next, align 8
  store %struct.list_head* %11, %struct.list_head** %__mptr3, align 8
  %12 = load %struct.list_head*, %struct.list_head** %__mptr3, align 8
  %13 = bitcast %struct.list_head* %12 to i8*
  %add.ptr6 = getelementptr inbounds i8, i8* %13, i64 -8
  %14 = bitcast i8* %add.ptr6 to %struct.cfg80211_registered_device*
  store %struct.cfg80211_registered_device* %14, %struct.cfg80211_registered_device** %tmp5, align 8
  %15 = load %struct.cfg80211_registered_device*, %struct.cfg80211_registered_device** %tmp5, align 8
  store %struct.cfg80211_registered_device* %15, %struct.cfg80211_registered_device** %rdev, align 8
  br label %for.cond

for.end.loopexit:                                 ; preds = %for.cond
  br label %for.end

for.end:                                          ; preds = %for.end.loopexit, %if.then
  %16 = load %struct.cfg80211_registered_device*, %struct.cfg80211_registered_device** %result, align 8
  ret %struct.cfg80211_registered_device* %16
}

; Function Attrs: noinline nounwind optnone uwtable
define internal void @assert_cfg80211_lock() #0 {
entry:
  br label %do.body

do.body:                                          ; preds = %entry
  br label %do.end

do.end:                                           ; preds = %do.body
  ret void
}

; Function Attrs: noinline nounwind optnone uwtable
define i32 @get_wiphy_idx(%struct.wiphy* %wiphy) #0 {
entry:
  %wiphy.addr = alloca %struct.wiphy*, align 8
  %rdev = alloca %struct.cfg80211_registered_device*, align 8
  store %struct.wiphy* %wiphy, %struct.wiphy** %wiphy.addr, align 8
  %0 = load %struct.wiphy*, %struct.wiphy** %wiphy.addr, align 8
  %call = call %struct.cfg80211_registered_device* @wiphy_to_dev(%struct.wiphy* %0)
  store %struct.cfg80211_registered_device* %call, %struct.cfg80211_registered_device** %rdev, align 8
  %1 = load %struct.cfg80211_registered_device*, %struct.cfg80211_registered_device** %rdev, align 8
  %wiphy_idx = getelementptr inbounds %struct.cfg80211_registered_device, %struct.cfg80211_registered_device* %1, i32 0, i32 8
  %2 = load i32, i32* %wiphy_idx, align 8
  ret i32 %2
}

; Function Attrs: noinline nounwind optnone uwtable
define internal %struct.cfg80211_registered_device* @wiphy_to_dev(%struct.wiphy* %wiphy) #0 {
entry:
  %wiphy.addr = alloca %struct.wiphy*, align 8
  %__mptr = alloca %struct.wiphy*, align 8
  %tmp = alloca %struct.cfg80211_registered_device*, align 8
  store %struct.wiphy* %wiphy, %struct.wiphy** %wiphy.addr, align 8
  br label %do.body

do.body:                                          ; preds = %entry
  %0 = load %struct.wiphy*, %struct.wiphy** %wiphy.addr, align 8
  %tobool = icmp ne %struct.wiphy* %0, null
  %lnot = xor i1 %tobool, true
  %lnot1 = xor i1 %lnot, true
  %lnot2 = xor i1 %lnot1, true
  %lnot.ext = zext i1 %lnot2 to i32
  %conv = sext i32 %lnot.ext to i64
  %tobool3 = icmp ne i64 %conv, 0
  br i1 %tobool3, label %if.then, label %if.end

if.then:                                          ; preds = %do.body
  br label %do.body4

do.body4:                                         ; preds = %if.then
  call void asm sideeffect "1:\09ud2\0A.pushsection __bug_table,\22a\22\0A2:\09.long 1b - 2b, ${0:c} - 2b\0A\09.word ${1:c}, 0\0A\09.org 2b+${2:c}\0A.popsection", "i,i,i,~{dirflag},~{fpsr},~{flags}"(i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.13, i32 0, i32 0), i32 102, i64 12) #3, !srcloc !2
  br label %do.body5

do.body5:                                         ; preds = %do.cond, %do.body4
  br label %do.cond

do.cond:                                          ; preds = %do.body5
  br i1 true, label %do.body5, label %do.end

do.end:                                           ; preds = %do.cond
  br label %do.end7

do.end7:                                          ; preds = %do.end
  br label %if.end

if.end:                                           ; preds = %do.end7, %do.body
  br label %do.end9

do.end9:                                          ; preds = %if.end
  %1 = load %struct.wiphy*, %struct.wiphy** %wiphy.addr, align 8
  store %struct.wiphy* %1, %struct.wiphy** %__mptr, align 8
  %2 = load %struct.wiphy*, %struct.wiphy** %__mptr, align 8
  %3 = bitcast %struct.wiphy* %2 to i8*
  %add.ptr = getelementptr inbounds i8, i8* %3, i64 -640
  %4 = bitcast i8* %add.ptr to %struct.cfg80211_registered_device*
  store %struct.cfg80211_registered_device* %4, %struct.cfg80211_registered_device** %tmp, align 8
  %5 = load %struct.cfg80211_registered_device*, %struct.cfg80211_registered_device** %tmp, align 8
  ret %struct.cfg80211_registered_device* %5
}

; Function Attrs: noinline nounwind optnone uwtable
define %struct.wiphy* @wiphy_idx_to_wiphy(i32 %wiphy_idx) #0 {
entry:
  %retval = alloca %struct.wiphy*, align 8
  %wiphy_idx.addr = alloca i32, align 4
  %rdev = alloca %struct.cfg80211_registered_device*, align 8
  store i32 %wiphy_idx, i32* %wiphy_idx.addr, align 4
  call void @assert_cfg80211_lock()
  %0 = load i32, i32* %wiphy_idx.addr, align 4
  %call = call %struct.cfg80211_registered_device* @cfg80211_rdev_by_wiphy_idx(i32 %0)
  store %struct.cfg80211_registered_device* %call, %struct.cfg80211_registered_device** %rdev, align 8
  %1 = load %struct.cfg80211_registered_device*, %struct.cfg80211_registered_device** %rdev, align 8
  %tobool = icmp ne %struct.cfg80211_registered_device* %1, null
  br i1 %tobool, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  store %struct.wiphy* null, %struct.wiphy** %retval, align 8
  br label %return

if.end:                                           ; preds = %entry
  %2 = load %struct.cfg80211_registered_device*, %struct.cfg80211_registered_device** %rdev, align 8
  %wiphy = getelementptr inbounds %struct.cfg80211_registered_device, %struct.cfg80211_registered_device* %2, i32 0, i32 34
  store %struct.wiphy* %wiphy, %struct.wiphy** %retval, align 8
  br label %return

return:                                           ; preds = %if.end, %if.then
  %3 = load %struct.wiphy*, %struct.wiphy** %retval, align 8
  ret %struct.wiphy* %3
}

; Function Attrs: noinline nounwind optnone uwtable
define %struct.cfg80211_registered_device* @cfg80211_get_dev_from_ifindex(%struct.net* %net, i32 %ifindex) #0 {
entry:
  %net.addr = alloca %struct.net*, align 8
  %ifindex.addr = alloca i32, align 4
  %rdev = alloca %struct.cfg80211_registered_device*, align 8
  %dev = alloca %struct.net_device*, align 8
  store %struct.net* %net, %struct.net** %net.addr, align 8
  store i32 %ifindex, i32* %ifindex.addr, align 4
  %call = call i8* @ERR_PTR(i64 -19)
  %0 = bitcast i8* %call to %struct.cfg80211_registered_device*
  store %struct.cfg80211_registered_device* %0, %struct.cfg80211_registered_device** %rdev, align 8
  call void @mutex_lock(%struct.mutex* @cfg80211_mutex)
  %1 = load %struct.net*, %struct.net** %net.addr, align 8
  %2 = load i32, i32* %ifindex.addr, align 4
  %call1 = call %struct.net_device* @dev_get_by_index(%struct.net* %1, i32 %2)
  store %struct.net_device* %call1, %struct.net_device** %dev, align 8
  %3 = load %struct.net_device*, %struct.net_device** %dev, align 8
  %tobool = icmp ne %struct.net_device* %3, null
  br i1 %tobool, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  br label %out

if.end:                                           ; preds = %entry
  %4 = load %struct.net_device*, %struct.net_device** %dev, align 8
  %ieee80211_ptr = getelementptr inbounds %struct.net_device, %struct.net_device* %4, i32 0, i32 55
  %5 = load %struct.wireless_dev*, %struct.wireless_dev** %ieee80211_ptr, align 8
  %tobool2 = icmp ne %struct.wireless_dev* %5, null
  br i1 %tobool2, label %if.then3, label %if.else

if.then3:                                         ; preds = %if.end
  %6 = load %struct.net_device*, %struct.net_device** %dev, align 8
  %ieee80211_ptr4 = getelementptr inbounds %struct.net_device, %struct.net_device* %6, i32 0, i32 55
  %7 = load %struct.wireless_dev*, %struct.wireless_dev** %ieee80211_ptr4, align 8
  %wiphy = getelementptr inbounds %struct.wireless_dev, %struct.wireless_dev* %7, i32 0, i32 0
  %8 = load %struct.wiphy*, %struct.wiphy** %wiphy, align 8
  %call5 = call %struct.cfg80211_registered_device* @wiphy_to_dev(%struct.wiphy* %8)
  store %struct.cfg80211_registered_device* %call5, %struct.cfg80211_registered_device** %rdev, align 8
  %9 = load %struct.cfg80211_registered_device*, %struct.cfg80211_registered_device** %rdev, align 8
  %mtx = getelementptr inbounds %struct.cfg80211_registered_device, %struct.cfg80211_registered_device* %9, i32 0, i32 2
  call void @mutex_lock(%struct.mutex* %mtx)
  br label %if.end7

if.else:                                          ; preds = %if.end
  %call6 = call i8* @ERR_PTR(i64 -19)
  %10 = bitcast i8* %call6 to %struct.cfg80211_registered_device*
  store %struct.cfg80211_registered_device* %10, %struct.cfg80211_registered_device** %rdev, align 8
  br label %if.end7

if.end7:                                          ; preds = %if.else, %if.then3
  %11 = load %struct.net_device*, %struct.net_device** %dev, align 8
  call void @dev_put(%struct.net_device* %11)
  br label %out

out:                                              ; preds = %if.end7, %if.then
  call void @mutex_unlock(%struct.mutex* @cfg80211_mutex)
  %12 = load %struct.cfg80211_registered_device*, %struct.cfg80211_registered_device** %rdev, align 8
  ret %struct.cfg80211_registered_device* %12
}

; Function Attrs: noinline nounwind optnone uwtable
define internal i8* @ERR_PTR(i64 %error) #0 {
entry:
  %error.addr = alloca i64, align 8
  store i64 %error, i64* %error.addr, align 8
  %0 = load i64, i64* %error.addr, align 8
  %1 = inttoptr i64 %0 to i8*
  ret i8* %1
}

declare void @mutex_lock(%struct.mutex*) #1

declare %struct.net_device* @dev_get_by_index(%struct.net*, i32) #1

; Function Attrs: noinline nounwind optnone uwtable
define internal void @dev_put(%struct.net_device* %dev) #0 {
entry:
  %dev.addr = alloca %struct.net_device*, align 8
  %__vpp_verify = alloca i8*, align 8
  %pao_ID__ = alloca i32, align 4
  store %struct.net_device* %dev, %struct.net_device** %dev.addr, align 8
  br label %do.body

do.body:                                          ; preds = %entry
  br label %do.body1

do.body1:                                         ; preds = %do.body
  store i8* null, i8** %__vpp_verify, align 8
  %0 = load i8*, i8** %__vpp_verify, align 8
  br label %do.end

do.end:                                           ; preds = %do.body1
  br label %do.body2

do.body2:                                         ; preds = %do.end
  store i32 -1, i32* %pao_ID__, align 4
  %1 = load %struct.net_device*, %struct.net_device** %dev.addr, align 8
  %pcpu_refcnt = getelementptr inbounds %struct.net_device, %struct.net_device* %1, i32 0, i32 77
  %2 = load i32*, i32** %pcpu_refcnt, align 8
  call void asm "decl %gs:${0:P}", "=*m,*m,~{dirflag},~{fpsr},~{flags}"(i32* %2, i32* %2) #3, !srcloc !3
  br label %do.end3

do.end3:                                          ; preds = %do.body2
  br label %do.end4

do.end4:                                          ; preds = %do.end3
  ret void
}

declare void @mutex_unlock(%struct.mutex*) #1

; Function Attrs: noinline nounwind optnone uwtable
define i32 @cfg80211_dev_rename(%struct.cfg80211_registered_device* %rdev, i8* %newname) #0 {
entry:
  %retval = alloca i32, align 4
  %rdev.addr = alloca %struct.cfg80211_registered_device*, align 8
  %newname.addr = alloca i8*, align 8
  %rdev2 = alloca %struct.cfg80211_registered_device*, align 8
  %wiphy_idx = alloca i32, align 4
  %taken = alloca i32, align 4
  %result = alloca i32, align 4
  %digits = alloca i32, align 4
  %__mptr = alloca %struct.list_head*, align 8
  %tmp = alloca %struct.cfg80211_registered_device*, align 8
  %__mptr28 = alloca %struct.list_head*, align 8
  %tmp30 = alloca %struct.cfg80211_registered_device*, align 8
  store %struct.cfg80211_registered_device* %rdev, %struct.cfg80211_registered_device** %rdev.addr, align 8
  store i8* %newname, i8** %newname.addr, align 8
  store i32 -1, i32* %taken, align 4
  call void @assert_cfg80211_lock()
  %0 = load i8*, i8** %newname.addr, align 8
  %call = call i32 (i8*, i8*, ...) @sscanf(i8* %0, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str, i32 0, i32 0), i32* %wiphy_idx, i32* %taken)
  %1 = load i32, i32* %taken, align 4
  %conv = sext i32 %1 to i64
  %2 = load i8*, i8** %newname.addr, align 8
  %call1 = call i64 @strlen(i8* %2)
  %cmp = icmp eq i64 %conv, %call1
  br i1 %cmp, label %land.lhs.true, label %if.end11

land.lhs.true:                                    ; preds = %entry
  %3 = load i32, i32* %wiphy_idx, align 4
  %4 = load %struct.cfg80211_registered_device*, %struct.cfg80211_registered_device** %rdev.addr, align 8
  %wiphy_idx3 = getelementptr inbounds %struct.cfg80211_registered_device, %struct.cfg80211_registered_device* %4, i32 0, i32 8
  %5 = load i32, i32* %wiphy_idx3, align 8
  %cmp4 = icmp ne i32 %3, %5
  br i1 %cmp4, label %if.then, label %if.end11

if.then:                                          ; preds = %land.lhs.true
  store i32 1, i32* %digits, align 4
  br label %while.cond

while.cond:                                       ; preds = %while.body, %if.then
  %6 = load i32, i32* %wiphy_idx, align 4
  %div = sdiv i32 %6, 10
  store i32 %div, i32* %wiphy_idx, align 4
  %tobool = icmp ne i32 %div, 0
  br i1 %tobool, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %7 = load i32, i32* %digits, align 4
  %inc = add nsw i32 %7, 1
  store i32 %inc, i32* %digits, align 4
  br label %while.cond

while.end:                                        ; preds = %while.cond
  %8 = load i32, i32* %taken, align 4
  %conv6 = sext i32 %8 to i64
  %9 = load i32, i32* %digits, align 4
  %conv7 = sext i32 %9 to i64
  %add = add i64 3, %conv7
  %cmp8 = icmp eq i64 %conv6, %add
  br i1 %cmp8, label %if.then10, label %if.end

if.then10:                                        ; preds = %while.end
  store i32 -22, i32* %retval, align 4
  br label %return

if.end:                                           ; preds = %while.end
  br label %if.end11

if.end11:                                         ; preds = %if.end, %land.lhs.true, %entry
  %10 = load i8*, i8** %newname.addr, align 8
  %11 = load %struct.cfg80211_registered_device*, %struct.cfg80211_registered_device** %rdev.addr, align 8
  %wiphy = getelementptr inbounds %struct.cfg80211_registered_device, %struct.cfg80211_registered_device* %11, i32 0, i32 34
  %dev = getelementptr inbounds %struct.wiphy, %struct.wiphy* %wiphy, i32 0, i32 42
  %call12 = call i8* @dev_name(%struct.device* %dev)
  %call13 = call i32 @strcmp(i8* %10, i8* %call12)
  %cmp14 = icmp eq i32 %call13, 0
  br i1 %cmp14, label %if.then16, label %if.end17

if.then16:                                        ; preds = %if.end11
  store i32 0, i32* %retval, align 4
  br label %return

if.end17:                                         ; preds = %if.end11
  %12 = load %struct.list_head*, %struct.list_head** getelementptr inbounds (%struct.list_head, %struct.list_head* @cfg80211_rdev_list, i32 0, i32 0), align 8
  store %struct.list_head* %12, %struct.list_head** %__mptr, align 8
  %13 = load %struct.list_head*, %struct.list_head** %__mptr, align 8
  %14 = bitcast %struct.list_head* %13 to i8*
  %add.ptr = getelementptr inbounds i8, i8* %14, i64 -8
  %15 = bitcast i8* %add.ptr to %struct.cfg80211_registered_device*
  store %struct.cfg80211_registered_device* %15, %struct.cfg80211_registered_device** %tmp, align 8
  %16 = load %struct.cfg80211_registered_device*, %struct.cfg80211_registered_device** %tmp, align 8
  store %struct.cfg80211_registered_device* %16, %struct.cfg80211_registered_device** %rdev2, align 8
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %if.end17
  %17 = load %struct.cfg80211_registered_device*, %struct.cfg80211_registered_device** %rdev2, align 8
  %list = getelementptr inbounds %struct.cfg80211_registered_device, %struct.cfg80211_registered_device* %17, i32 0, i32 1
  %cmp18 = icmp ne %struct.list_head* %list, @cfg80211_rdev_list
  br i1 %cmp18, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %18 = load i8*, i8** %newname.addr, align 8
  %19 = load %struct.cfg80211_registered_device*, %struct.cfg80211_registered_device** %rdev2, align 8
  %wiphy20 = getelementptr inbounds %struct.cfg80211_registered_device, %struct.cfg80211_registered_device* %19, i32 0, i32 34
  %dev21 = getelementptr inbounds %struct.wiphy, %struct.wiphy* %wiphy20, i32 0, i32 42
  %call22 = call i8* @dev_name(%struct.device* %dev21)
  %call23 = call i32 @strcmp(i8* %18, i8* %call22)
  %cmp24 = icmp eq i32 %call23, 0
  br i1 %cmp24, label %if.then26, label %if.end27

if.then26:                                        ; preds = %for.body
  store i32 -22, i32* %retval, align 4
  br label %return

if.end27:                                         ; preds = %for.body
  br label %for.inc

for.inc:                                          ; preds = %if.end27
  %20 = load %struct.cfg80211_registered_device*, %struct.cfg80211_registered_device** %rdev2, align 8
  %list29 = getelementptr inbounds %struct.cfg80211_registered_device, %struct.cfg80211_registered_device* %20, i32 0, i32 1
  %next = getelementptr inbounds %struct.list_head, %struct.list_head* %list29, i32 0, i32 0
  %21 = load %struct.list_head*, %struct.list_head** %next, align 8
  store %struct.list_head* %21, %struct.list_head** %__mptr28, align 8
  %22 = load %struct.list_head*, %struct.list_head** %__mptr28, align 8
  %23 = bitcast %struct.list_head* %22 to i8*
  %add.ptr31 = getelementptr inbounds i8, i8* %23, i64 -8
  %24 = bitcast i8* %add.ptr31 to %struct.cfg80211_registered_device*
  store %struct.cfg80211_registered_device* %24, %struct.cfg80211_registered_device** %tmp30, align 8
  %25 = load %struct.cfg80211_registered_device*, %struct.cfg80211_registered_device** %tmp30, align 8
  store %struct.cfg80211_registered_device* %25, %struct.cfg80211_registered_device** %rdev2, align 8
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %26 = load %struct.cfg80211_registered_device*, %struct.cfg80211_registered_device** %rdev.addr, align 8
  %wiphy32 = getelementptr inbounds %struct.cfg80211_registered_device, %struct.cfg80211_registered_device* %26, i32 0, i32 34
  %dev33 = getelementptr inbounds %struct.wiphy, %struct.wiphy* %wiphy32, i32 0, i32 42
  %27 = load i8*, i8** %newname.addr, align 8
  %call34 = call i32 @device_rename(%struct.device* %dev33, i8* %27)
  store i32 %call34, i32* %result, align 4
  %28 = load i32, i32* %result, align 4
  %tobool35 = icmp ne i32 %28, 0
  br i1 %tobool35, label %if.then36, label %if.end37

if.then36:                                        ; preds = %for.end
  %29 = load i32, i32* %result, align 4
  store i32 %29, i32* %retval, align 4
  br label %return

if.end37:                                         ; preds = %for.end
  %30 = load %struct.cfg80211_registered_device*, %struct.cfg80211_registered_device** %rdev.addr, align 8
  %wiphy38 = getelementptr inbounds %struct.cfg80211_registered_device, %struct.cfg80211_registered_device* %30, i32 0, i32 34
  %debugfsdir = getelementptr inbounds %struct.wiphy, %struct.wiphy* %wiphy38, i32 0, i32 44
  %31 = load %struct.dentry*, %struct.dentry** %debugfsdir, align 16
  %tobool39 = icmp ne %struct.dentry* %31, null
  br i1 %tobool39, label %land.lhs.true40, label %if.end52

land.lhs.true40:                                  ; preds = %if.end37
  %32 = load %struct.cfg80211_registered_device*, %struct.cfg80211_registered_device** %rdev.addr, align 8
  %wiphy41 = getelementptr inbounds %struct.cfg80211_registered_device, %struct.cfg80211_registered_device* %32, i32 0, i32 34
  %debugfsdir42 = getelementptr inbounds %struct.wiphy, %struct.wiphy* %wiphy41, i32 0, i32 44
  %33 = load %struct.dentry*, %struct.dentry** %debugfsdir42, align 16
  %d_parent = getelementptr inbounds %struct.dentry, %struct.dentry* %33, i32 0, i32 3
  %34 = load %struct.dentry*, %struct.dentry** %d_parent, align 8
  %35 = load %struct.cfg80211_registered_device*, %struct.cfg80211_registered_device** %rdev.addr, align 8
  %wiphy43 = getelementptr inbounds %struct.cfg80211_registered_device, %struct.cfg80211_registered_device* %35, i32 0, i32 34
  %debugfsdir44 = getelementptr inbounds %struct.wiphy, %struct.wiphy* %wiphy43, i32 0, i32 44
  %36 = load %struct.dentry*, %struct.dentry** %debugfsdir44, align 16
  %37 = load %struct.cfg80211_registered_device*, %struct.cfg80211_registered_device** %rdev.addr, align 8
  %wiphy45 = getelementptr inbounds %struct.cfg80211_registered_device, %struct.cfg80211_registered_device* %37, i32 0, i32 34
  %debugfsdir46 = getelementptr inbounds %struct.wiphy, %struct.wiphy* %wiphy45, i32 0, i32 44
  %38 = load %struct.dentry*, %struct.dentry** %debugfsdir46, align 16
  %d_parent47 = getelementptr inbounds %struct.dentry, %struct.dentry* %38, i32 0, i32 3
  %39 = load %struct.dentry*, %struct.dentry** %d_parent47, align 8
  %40 = load i8*, i8** %newname.addr, align 8
  %call48 = call %struct.dentry* @debugfs_rename(%struct.dentry* %34, %struct.dentry* %36, %struct.dentry* %39, i8* %40)
  %tobool49 = icmp ne %struct.dentry* %call48, null
  br i1 %tobool49, label %if.end52, label %if.then50

if.then50:                                        ; preds = %land.lhs.true40
  %41 = load i8*, i8** %newname.addr, align 8
  %call51 = call i32 (i8*, ...) @printk(i8* getelementptr inbounds ([49 x i8], [49 x i8]* @.str.1, i32 0, i32 0), i8* %41)
  br label %if.end52

if.end52:                                         ; preds = %if.then50, %land.lhs.true40, %if.end37
  %42 = load %struct.cfg80211_registered_device*, %struct.cfg80211_registered_device** %rdev.addr, align 8
  call void @nl80211_notify_dev_rename(%struct.cfg80211_registered_device* %42)
  store i32 0, i32* %retval, align 4
  br label %return

return:                                           ; preds = %if.end52, %if.then36, %if.then26, %if.then16, %if.then10
  %43 = load i32, i32* %retval, align 4
  ret i32 %43
}

declare i32 @sscanf(i8*, i8*, ...) #1

declare i64 @strlen(i8*) #1

declare i32 @strcmp(i8*, i8*) #1

; Function Attrs: noinline nounwind optnone uwtable
define internal i8* @dev_name(%struct.device* %dev) #0 {
entry:
  %retval = alloca i8*, align 8
  %dev.addr = alloca %struct.device*, align 8
  store %struct.device* %dev, %struct.device** %dev.addr, align 8
  %0 = load %struct.device*, %struct.device** %dev.addr, align 8
  %init_name = getelementptr inbounds %struct.device, %struct.device* %0, i32 0, i32 3
  %1 = load i8*, i8** %init_name, align 8
  %tobool = icmp ne i8* %1, null
  br i1 %tobool, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %2 = load %struct.device*, %struct.device** %dev.addr, align 8
  %init_name1 = getelementptr inbounds %struct.device, %struct.device* %2, i32 0, i32 3
  %3 = load i8*, i8** %init_name1, align 8
  store i8* %3, i8** %retval, align 8
  br label %return

if.end:                                           ; preds = %entry
  %4 = load %struct.device*, %struct.device** %dev.addr, align 8
  %kobj = getelementptr inbounds %struct.device, %struct.device* %4, i32 0, i32 2
  %call = call i8* @kobject_name(%struct.kobject* %kobj)
  store i8* %call, i8** %retval, align 8
  br label %return

return:                                           ; preds = %if.end, %if.then
  %5 = load i8*, i8** %retval, align 8
  ret i8* %5
}

declare i32 @device_rename(%struct.device*, i8*) #1

declare %struct.dentry* @debugfs_rename(%struct.dentry*, %struct.dentry*, %struct.dentry*, i8*) #1

declare i32 @printk(i8*, ...) #1

declare void @nl80211_notify_dev_rename(%struct.cfg80211_registered_device*) #1

; Function Attrs: noinline nounwind optnone uwtable
define i32 @cfg80211_switch_netns(%struct.cfg80211_registered_device* %rdev, %struct.net* %net) #0 {
entry:
  %retval = alloca i32, align 4
  %rdev.addr = alloca %struct.cfg80211_registered_device*, align 8
  %net.addr = alloca %struct.net*, align 8
  %wdev = alloca %struct.wireless_dev*, align 8
  %err = alloca i32, align 4
  %__mptr = alloca %struct.list_head*, align 8
  %tmp = alloca %struct.wireless_dev*, align 8
  %__mptr13 = alloca %struct.list_head*, align 8
  %tmp16 = alloca %struct.wireless_dev*, align 8
  %__mptr22 = alloca %struct.list_head*, align 8
  %tmp24 = alloca %struct.wireless_dev*, align 8
  %__ret_warn_on = alloca i32, align 4
  %tmp50 = alloca i64, align 8
  %__mptr61 = alloca %struct.list_head*, align 8
  %tmp64 = alloca %struct.wireless_dev*, align 8
  %__ret_warn_on74 = alloca i32, align 4
  %tmp89 = alloca i64, align 8
  store %struct.cfg80211_registered_device* %rdev, %struct.cfg80211_registered_device** %rdev.addr, align 8
  store %struct.net* %net, %struct.net** %net.addr, align 8
  store i32 0, i32* %err, align 4
  %0 = load %struct.cfg80211_registered_device*, %struct.cfg80211_registered_device** %rdev.addr, align 8
  %wiphy = getelementptr inbounds %struct.cfg80211_registered_device, %struct.cfg80211_registered_device* %0, i32 0, i32 34
  %flags = getelementptr inbounds %struct.wiphy, %struct.wiphy* %wiphy, i32 0, i32 10
  %1 = load i32, i32* %flags, align 4
  %and = and i32 %1, 8
  %tobool = icmp ne i32 %and, 0
  br i1 %tobool, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  store i32 -95, i32* %retval, align 4
  br label %return

if.end:                                           ; preds = %entry
  %2 = load %struct.cfg80211_registered_device*, %struct.cfg80211_registered_device** %rdev.addr, align 8
  %wdev_list = getelementptr inbounds %struct.cfg80211_registered_device, %struct.cfg80211_registered_device* %2, i32 0, i32 10
  %next = getelementptr inbounds %struct.list_head, %struct.list_head* %wdev_list, i32 0, i32 0
  %3 = load %struct.list_head*, %struct.list_head** %next, align 8
  store %struct.list_head* %3, %struct.list_head** %__mptr, align 8
  %4 = load %struct.list_head*, %struct.list_head** %__mptr, align 8
  %5 = bitcast %struct.list_head* %4 to i8*
  %add.ptr = getelementptr inbounds i8, i8* %5, i64 -16
  %6 = bitcast i8* %add.ptr to %struct.wireless_dev*
  store %struct.wireless_dev* %6, %struct.wireless_dev** %tmp, align 8
  %7 = load %struct.wireless_dev*, %struct.wireless_dev** %tmp, align 8
  store %struct.wireless_dev* %7, %struct.wireless_dev** %wdev, align 8
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %if.end
  %8 = load %struct.wireless_dev*, %struct.wireless_dev** %wdev, align 8
  %list = getelementptr inbounds %struct.wireless_dev, %struct.wireless_dev* %8, i32 0, i32 2
  %9 = load %struct.cfg80211_registered_device*, %struct.cfg80211_registered_device** %rdev.addr, align 8
  %wdev_list1 = getelementptr inbounds %struct.cfg80211_registered_device, %struct.cfg80211_registered_device* %9, i32 0, i32 10
  %cmp = icmp ne %struct.list_head* %list, %wdev_list1
  br i1 %cmp, label %for.body, label %for.end.loopexit

for.body:                                         ; preds = %for.cond
  %10 = load %struct.wireless_dev*, %struct.wireless_dev** %wdev, align 8
  %netdev = getelementptr inbounds %struct.wireless_dev, %struct.wireless_dev* %10, i32 0, i32 3
  %11 = load %struct.net_device*, %struct.net_device** %netdev, align 8
  %tobool2 = icmp ne %struct.net_device* %11, null
  br i1 %tobool2, label %if.end4, label %if.then3

if.then3:                                         ; preds = %for.body
  br label %for.inc

if.end4:                                          ; preds = %for.body
  %12 = load %struct.wireless_dev*, %struct.wireless_dev** %wdev, align 8
  %netdev5 = getelementptr inbounds %struct.wireless_dev, %struct.wireless_dev* %12, i32 0, i32 3
  %13 = load %struct.net_device*, %struct.net_device** %netdev5, align 8
  %features = getelementptr inbounds %struct.net_device, %struct.net_device* %13, i32 0, i32 12
  %14 = load i64, i64* %features, align 16
  %and6 = and i64 %14, -8193
  store i64 %and6, i64* %features, align 16
  %15 = load %struct.wireless_dev*, %struct.wireless_dev** %wdev, align 8
  %netdev7 = getelementptr inbounds %struct.wireless_dev, %struct.wireless_dev* %15, i32 0, i32 3
  %16 = load %struct.net_device*, %struct.net_device** %netdev7, align 8
  %17 = load %struct.net*, %struct.net** %net.addr, align 8
  %call = call i32 @dev_change_net_namespace(%struct.net_device* %16, %struct.net* %17, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.2, i32 0, i32 0))
  store i32 %call, i32* %err, align 4
  %18 = load i32, i32* %err, align 4
  %tobool8 = icmp ne i32 %18, 0
  br i1 %tobool8, label %if.then9, label %if.end10

if.then9:                                         ; preds = %if.end4
  br label %for.end

if.end10:                                         ; preds = %if.end4
  %19 = load %struct.wireless_dev*, %struct.wireless_dev** %wdev, align 8
  %netdev11 = getelementptr inbounds %struct.wireless_dev, %struct.wireless_dev* %19, i32 0, i32 3
  %20 = load %struct.net_device*, %struct.net_device** %netdev11, align 8
  %features12 = getelementptr inbounds %struct.net_device, %struct.net_device* %20, i32 0, i32 12
  %21 = load i64, i64* %features12, align 16
  %or = or i64 %21, 8192
  store i64 %or, i64* %features12, align 16
  br label %for.inc

for.inc:                                          ; preds = %if.end10, %if.then3
  %22 = load %struct.wireless_dev*, %struct.wireless_dev** %wdev, align 8
  %list14 = getelementptr inbounds %struct.wireless_dev, %struct.wireless_dev* %22, i32 0, i32 2
  %next15 = getelementptr inbounds %struct.list_head, %struct.list_head* %list14, i32 0, i32 0
  %23 = load %struct.list_head*, %struct.list_head** %next15, align 8
  store %struct.list_head* %23, %struct.list_head** %__mptr13, align 8
  %24 = load %struct.list_head*, %struct.list_head** %__mptr13, align 8
  %25 = bitcast %struct.list_head* %24 to i8*
  %add.ptr17 = getelementptr inbounds i8, i8* %25, i64 -16
  %26 = bitcast i8* %add.ptr17 to %struct.wireless_dev*
  store %struct.wireless_dev* %26, %struct.wireless_dev** %tmp16, align 8
  %27 = load %struct.wireless_dev*, %struct.wireless_dev** %tmp16, align 8
  store %struct.wireless_dev* %27, %struct.wireless_dev** %wdev, align 8
  br label %for.cond

for.end.loopexit:                                 ; preds = %for.cond
  br label %for.end

for.end:                                          ; preds = %for.end.loopexit, %if.then9
  %28 = load i32, i32* %err, align 4
  %tobool18 = icmp ne i32 %28, 0
  br i1 %tobool18, label %if.then19, label %if.end67

if.then19:                                        ; preds = %for.end
  %29 = load %struct.cfg80211_registered_device*, %struct.cfg80211_registered_device** %rdev.addr, align 8
  %wiphy20 = getelementptr inbounds %struct.cfg80211_registered_device, %struct.cfg80211_registered_device* %29, i32 0, i32 34
  %call21 = call %struct.net* @wiphy_net(%struct.wiphy* %wiphy20)
  store %struct.net* %call21, %struct.net** %net.addr, align 8
  %30 = load %struct.wireless_dev*, %struct.wireless_dev** %wdev, align 8
  %list23 = getelementptr inbounds %struct.wireless_dev, %struct.wireless_dev* %30, i32 0, i32 2
  %prev = getelementptr inbounds %struct.list_head, %struct.list_head* %list23, i32 0, i32 1
  %31 = load %struct.list_head*, %struct.list_head** %prev, align 8
  store %struct.list_head* %31, %struct.list_head** %__mptr22, align 8
  %32 = load %struct.list_head*, %struct.list_head** %__mptr22, align 8
  %33 = bitcast %struct.list_head* %32 to i8*
  %add.ptr25 = getelementptr inbounds i8, i8* %33, i64 -16
  %34 = bitcast i8* %add.ptr25 to %struct.wireless_dev*
  store %struct.wireless_dev* %34, %struct.wireless_dev** %tmp24, align 8
  %35 = load %struct.wireless_dev*, %struct.wireless_dev** %tmp24, align 8
  store %struct.wireless_dev* %35, %struct.wireless_dev** %wdev, align 8
  br label %for.cond26

for.cond26:                                       ; preds = %for.inc60, %if.then19
  %36 = load %struct.wireless_dev*, %struct.wireless_dev** %wdev, align 8
  %list27 = getelementptr inbounds %struct.wireless_dev, %struct.wireless_dev* %36, i32 0, i32 2
  %37 = load %struct.cfg80211_registered_device*, %struct.cfg80211_registered_device** %rdev.addr, align 8
  %wdev_list28 = getelementptr inbounds %struct.cfg80211_registered_device, %struct.cfg80211_registered_device* %37, i32 0, i32 10
  %cmp29 = icmp ne %struct.list_head* %list27, %wdev_list28
  br i1 %cmp29, label %for.body30, label %for.end66

for.body30:                                       ; preds = %for.cond26
  %38 = load %struct.wireless_dev*, %struct.wireless_dev** %wdev, align 8
  %netdev31 = getelementptr inbounds %struct.wireless_dev, %struct.wireless_dev* %38, i32 0, i32 3
  %39 = load %struct.net_device*, %struct.net_device** %netdev31, align 8
  %tobool32 = icmp ne %struct.net_device* %39, null
  br i1 %tobool32, label %if.end34, label %if.then33

if.then33:                                        ; preds = %for.body30
  br label %for.inc60

if.end34:                                         ; preds = %for.body30
  %40 = load %struct.wireless_dev*, %struct.wireless_dev** %wdev, align 8
  %netdev35 = getelementptr inbounds %struct.wireless_dev, %struct.wireless_dev* %40, i32 0, i32 3
  %41 = load %struct.net_device*, %struct.net_device** %netdev35, align 8
  %features36 = getelementptr inbounds %struct.net_device, %struct.net_device* %41, i32 0, i32 12
  %42 = load i64, i64* %features36, align 16
  %and37 = and i64 %42, -8193
  store i64 %and37, i64* %features36, align 16
  %43 = load %struct.wireless_dev*, %struct.wireless_dev** %wdev, align 8
  %netdev38 = getelementptr inbounds %struct.wireless_dev, %struct.wireless_dev* %43, i32 0, i32 3
  %44 = load %struct.net_device*, %struct.net_device** %netdev38, align 8
  %45 = load %struct.net*, %struct.net** %net.addr, align 8
  %call39 = call i32 @dev_change_net_namespace(%struct.net_device* %44, %struct.net* %45, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.2, i32 0, i32 0))
  store i32 %call39, i32* %err, align 4
  %46 = load i32, i32* %err, align 4
  %tobool40 = icmp ne i32 %46, 0
  %lnot = xor i1 %tobool40, true
  %lnot41 = xor i1 %lnot, true
  %lnot.ext = zext i1 %lnot41 to i32
  store i32 %lnot.ext, i32* %__ret_warn_on, align 4
  %47 = load i32, i32* %__ret_warn_on, align 4
  %tobool42 = icmp ne i32 %47, 0
  %lnot43 = xor i1 %tobool42, true
  %lnot45 = xor i1 %lnot43, true
  %lnot.ext46 = zext i1 %lnot45 to i32
  %conv = sext i32 %lnot.ext46 to i64
  %tobool47 = icmp ne i64 %conv, 0
  br i1 %tobool47, label %if.then48, label %if.end49

if.then48:                                        ; preds = %if.end34
  call void @warn_slowpath_null(i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.3, i32 0, i32 0), i32 193)
  br label %if.end49

if.end49:                                         ; preds = %if.then48, %if.end34
  %48 = load i32, i32* %__ret_warn_on, align 4
  %tobool51 = icmp ne i32 %48, 0
  %lnot52 = xor i1 %tobool51, true
  %lnot54 = xor i1 %lnot52, true
  %lnot.ext55 = zext i1 %lnot54 to i32
  %conv56 = sext i32 %lnot.ext55 to i64
  store i64 %conv56, i64* %tmp50, align 8
  %49 = load i64, i64* %tmp50, align 8
  %50 = load %struct.wireless_dev*, %struct.wireless_dev** %wdev, align 8
  %netdev57 = getelementptr inbounds %struct.wireless_dev, %struct.wireless_dev* %50, i32 0, i32 3
  %51 = load %struct.net_device*, %struct.net_device** %netdev57, align 8
  %features58 = getelementptr inbounds %struct.net_device, %struct.net_device* %51, i32 0, i32 12
  %52 = load i64, i64* %features58, align 16
  %or59 = or i64 %52, 8192
  store i64 %or59, i64* %features58, align 16
  br label %for.inc60

for.inc60:                                        ; preds = %if.end49, %if.then33
  %53 = load %struct.wireless_dev*, %struct.wireless_dev** %wdev, align 8
  %list62 = getelementptr inbounds %struct.wireless_dev, %struct.wireless_dev* %53, i32 0, i32 2
  %prev63 = getelementptr inbounds %struct.list_head, %struct.list_head* %list62, i32 0, i32 1
  %54 = load %struct.list_head*, %struct.list_head** %prev63, align 8
  store %struct.list_head* %54, %struct.list_head** %__mptr61, align 8
  %55 = load %struct.list_head*, %struct.list_head** %__mptr61, align 8
  %56 = bitcast %struct.list_head* %55 to i8*
  %add.ptr65 = getelementptr inbounds i8, i8* %56, i64 -16
  %57 = bitcast i8* %add.ptr65 to %struct.wireless_dev*
  store %struct.wireless_dev* %57, %struct.wireless_dev** %tmp64, align 8
  %58 = load %struct.wireless_dev*, %struct.wireless_dev** %tmp64, align 8
  store %struct.wireless_dev* %58, %struct.wireless_dev** %wdev, align 8
  br label %for.cond26

for.end66:                                        ; preds = %for.cond26
  %59 = load i32, i32* %err, align 4
  store i32 %59, i32* %retval, align 4
  br label %return

if.end67:                                         ; preds = %for.end
  %60 = load %struct.cfg80211_registered_device*, %struct.cfg80211_registered_device** %rdev.addr, align 8
  %wiphy68 = getelementptr inbounds %struct.cfg80211_registered_device, %struct.cfg80211_registered_device* %60, i32 0, i32 34
  %61 = load %struct.net*, %struct.net** %net.addr, align 8
  call void @wiphy_net_set(%struct.wiphy* %wiphy68, %struct.net* %61)
  %62 = load %struct.cfg80211_registered_device*, %struct.cfg80211_registered_device** %rdev.addr, align 8
  %wiphy69 = getelementptr inbounds %struct.cfg80211_registered_device, %struct.cfg80211_registered_device* %62, i32 0, i32 34
  %dev = getelementptr inbounds %struct.wiphy, %struct.wiphy* %wiphy69, i32 0, i32 42
  %63 = load %struct.cfg80211_registered_device*, %struct.cfg80211_registered_device** %rdev.addr, align 8
  %wiphy70 = getelementptr inbounds %struct.cfg80211_registered_device, %struct.cfg80211_registered_device* %63, i32 0, i32 34
  %dev71 = getelementptr inbounds %struct.wiphy, %struct.wiphy* %wiphy70, i32 0, i32 42
  %call72 = call i8* @dev_name(%struct.device* %dev71)
  %call73 = call i32 @device_rename(%struct.device* %dev, i8* %call72)
  store i32 %call73, i32* %err, align 4
  %64 = load i32, i32* %err, align 4
  %tobool75 = icmp ne i32 %64, 0
  %lnot76 = xor i1 %tobool75, true
  %lnot78 = xor i1 %lnot76, true
  %lnot.ext79 = zext i1 %lnot78 to i32
  store i32 %lnot.ext79, i32* %__ret_warn_on74, align 4
  %65 = load i32, i32* %__ret_warn_on74, align 4
  %tobool80 = icmp ne i32 %65, 0
  %lnot81 = xor i1 %tobool80, true
  %lnot83 = xor i1 %lnot81, true
  %lnot.ext84 = zext i1 %lnot83 to i32
  %conv85 = sext i32 %lnot.ext84 to i64
  %tobool86 = icmp ne i64 %conv85, 0
  br i1 %tobool86, label %if.then87, label %if.end88

if.then87:                                        ; preds = %if.end67
  call void @warn_slowpath_null(i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.3, i32 0, i32 0), i32 203)
  br label %if.end88

if.end88:                                         ; preds = %if.then87, %if.end67
  %66 = load i32, i32* %__ret_warn_on74, align 4
  %tobool90 = icmp ne i32 %66, 0
  %lnot91 = xor i1 %tobool90, true
  %lnot93 = xor i1 %lnot91, true
  %lnot.ext94 = zext i1 %lnot93 to i32
  %conv95 = sext i32 %lnot.ext94 to i64
  store i64 %conv95, i64* %tmp89, align 8
  %67 = load i64, i64* %tmp89, align 8
  store i32 0, i32* %retval, align 4
  br label %return

return:                                           ; preds = %if.end88, %for.end66, %if.then
  %68 = load i32, i32* %retval, align 4
  ret i32 %68
}

declare i32 @dev_change_net_namespace(%struct.net_device*, %struct.net*, i8*) #1

; Function Attrs: noinline nounwind optnone uwtable
define internal %struct.net* @wiphy_net(%struct.wiphy* %wiphy) #0 {
entry:
  %wiphy.addr = alloca %struct.wiphy*, align 8
  store %struct.wiphy* %wiphy, %struct.wiphy** %wiphy.addr, align 8
  %0 = load %struct.wiphy*, %struct.wiphy** %wiphy.addr, align 8
  %_net = getelementptr inbounds %struct.wiphy, %struct.wiphy* %0, i32 0, i32 47
  %call = call %struct.net* @read_pnet(%struct.net** %_net)
  ret %struct.net* %call
}

declare void @warn_slowpath_null(i8*, i32) #1

; Function Attrs: noinline nounwind optnone uwtable
define internal void @wiphy_net_set(%struct.wiphy* %wiphy, %struct.net* %net) #0 {
entry:
  %wiphy.addr = alloca %struct.wiphy*, align 8
  %net.addr = alloca %struct.net*, align 8
  store %struct.wiphy* %wiphy, %struct.wiphy** %wiphy.addr, align 8
  store %struct.net* %net, %struct.net** %net.addr, align 8
  %0 = load %struct.wiphy*, %struct.wiphy** %wiphy.addr, align 8
  %_net = getelementptr inbounds %struct.wiphy, %struct.wiphy* %0, i32 0, i32 47
  %1 = load %struct.net*, %struct.net** %net.addr, align 8
  call void @write_pnet(%struct.net** %_net, %struct.net* %1)
  ret void
}

; Function Attrs: noinline nounwind optnone uwtable
define void @cfg80211_stop_p2p_device(%struct.cfg80211_registered_device* %rdev, %struct.wireless_dev* %wdev) #0 {
entry:
  %rdev.addr = alloca %struct.cfg80211_registered_device*, align 8
  %wdev.addr = alloca %struct.wireless_dev*, align 8
  %__ret_warn_on = alloca i32, align 4
  %tmp = alloca i64, align 8
  %busy = alloca i8, align 1
  %__ret_warn_on29 = alloca i32, align 4
  %tmp46 = alloca i64, align 8
  store %struct.cfg80211_registered_device* %rdev, %struct.cfg80211_registered_device** %rdev.addr, align 8
  store %struct.wireless_dev* %wdev, %struct.wireless_dev** %wdev.addr, align 8
  br label %do.body

do.body:                                          ; preds = %entry
  %0 = load %struct.cfg80211_registered_device*, %struct.cfg80211_registered_device** %rdev.addr, align 8
  %devlist_mtx = getelementptr inbounds %struct.cfg80211_registered_device, %struct.cfg80211_registered_device* %0, i32 0, i32 9
  br label %do.end

do.end:                                           ; preds = %do.body
  br label %do.body1

do.body1:                                         ; preds = %do.end
  %1 = load %struct.cfg80211_registered_device*, %struct.cfg80211_registered_device** %rdev.addr, align 8
  %sched_scan_mtx = getelementptr inbounds %struct.cfg80211_registered_device, %struct.cfg80211_registered_device* %1, i32 0, i32 28
  br label %do.end2

do.end2:                                          ; preds = %do.body1
  %2 = load %struct.wireless_dev*, %struct.wireless_dev** %wdev.addr, align 8
  %iftype = getelementptr inbounds %struct.wireless_dev, %struct.wireless_dev* %2, i32 0, i32 1
  %3 = load i32, i32* %iftype, align 8
  %cmp = icmp ne i32 %3, 10
  %lnot = xor i1 %cmp, true
  %lnot3 = xor i1 %lnot, true
  %lnot.ext = zext i1 %lnot3 to i32
  store i32 %lnot.ext, i32* %__ret_warn_on, align 4
  %4 = load i32, i32* %__ret_warn_on, align 4
  %tobool = icmp ne i32 %4, 0
  %lnot4 = xor i1 %tobool, true
  %lnot6 = xor i1 %lnot4, true
  %lnot.ext7 = zext i1 %lnot6 to i32
  %conv = sext i32 %lnot.ext7 to i64
  %tobool8 = icmp ne i64 %conv, 0
  br i1 %tobool8, label %if.then, label %if.end

if.then:                                          ; preds = %do.end2
  call void @warn_slowpath_null(i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.3, i32 0, i32 0), i32 221)
  br label %if.end

if.end:                                           ; preds = %if.then, %do.end2
  %5 = load i32, i32* %__ret_warn_on, align 4
  %tobool9 = icmp ne i32 %5, 0
  %lnot10 = xor i1 %tobool9, true
  %lnot12 = xor i1 %lnot10, true
  %lnot.ext13 = zext i1 %lnot12 to i32
  %conv14 = sext i32 %lnot.ext13 to i64
  store i64 %conv14, i64* %tmp, align 8
  %6 = load i64, i64* %tmp, align 8
  %tobool15 = icmp ne i64 %6, 0
  br i1 %tobool15, label %if.then16, label %if.end17

if.then16:                                        ; preds = %if.end
  br label %if.end57

if.end17:                                         ; preds = %if.end
  %7 = load %struct.wireless_dev*, %struct.wireless_dev** %wdev.addr, align 8
  %p2p_started = getelementptr inbounds %struct.wireless_dev, %struct.wireless_dev* %7, i32 0, i32 10
  %8 = load i8, i8* %p2p_started, align 1
  %tobool18 = trunc i8 %8 to i1
  br i1 %tobool18, label %if.end20, label %if.then19

if.then19:                                        ; preds = %if.end17
  br label %if.end57

if.end20:                                         ; preds = %if.end17
  %9 = load %struct.cfg80211_registered_device*, %struct.cfg80211_registered_device** %rdev.addr, align 8
  %10 = load %struct.wireless_dev*, %struct.wireless_dev** %wdev.addr, align 8
  call void @rdev_stop_p2p_device(%struct.cfg80211_registered_device* %9, %struct.wireless_dev* %10)
  %11 = load %struct.wireless_dev*, %struct.wireless_dev** %wdev.addr, align 8
  %p2p_started21 = getelementptr inbounds %struct.wireless_dev, %struct.wireless_dev* %11, i32 0, i32 10
  store i8 0, i8* %p2p_started21, align 1
  %12 = load %struct.cfg80211_registered_device*, %struct.cfg80211_registered_device** %rdev.addr, align 8
  %opencount = getelementptr inbounds %struct.cfg80211_registered_device, %struct.cfg80211_registered_device* %12, i32 0, i32 13
  %13 = load i32, i32* %opencount, align 16
  %dec = add nsw i32 %13, -1
  store i32 %dec, i32* %opencount, align 16
  %14 = load %struct.cfg80211_registered_device*, %struct.cfg80211_registered_device** %rdev.addr, align 8
  %scan_req = getelementptr inbounds %struct.cfg80211_registered_device, %struct.cfg80211_registered_device* %14, i32 0, i32 23
  %15 = load %struct.cfg80211_scan_request*, %struct.cfg80211_scan_request** %scan_req, align 16
  %tobool22 = icmp ne %struct.cfg80211_scan_request* %15, null
  br i1 %tobool22, label %land.lhs.true, label %if.end57

land.lhs.true:                                    ; preds = %if.end20
  %16 = load %struct.cfg80211_registered_device*, %struct.cfg80211_registered_device** %rdev.addr, align 8
  %scan_req23 = getelementptr inbounds %struct.cfg80211_registered_device, %struct.cfg80211_registered_device* %16, i32 0, i32 23
  %17 = load %struct.cfg80211_scan_request*, %struct.cfg80211_scan_request** %scan_req23, align 16
  %wdev24 = getelementptr inbounds %struct.cfg80211_scan_request, %struct.cfg80211_scan_request* %17, i32 0, i32 7
  %18 = load %struct.wireless_dev*, %struct.wireless_dev** %wdev24, align 8
  %19 = load %struct.wireless_dev*, %struct.wireless_dev** %wdev.addr, align 8
  %cmp25 = icmp eq %struct.wireless_dev* %18, %19
  br i1 %cmp25, label %if.then27, label %if.end57

if.then27:                                        ; preds = %land.lhs.true
  %20 = load %struct.cfg80211_registered_device*, %struct.cfg80211_registered_device** %rdev.addr, align 8
  %scan_done_wk = getelementptr inbounds %struct.cfg80211_registered_device, %struct.cfg80211_registered_device* %20, i32 0, i32 26
  %call = call i32 @work_busy(%struct.work_struct* %scan_done_wk)
  %tobool28 = icmp ne i32 %call, 0
  %frombool = zext i1 %tobool28 to i8
  store i8 %frombool, i8* %busy, align 1
  %21 = load i8, i8* %busy, align 1
  %tobool30 = trunc i8 %21 to i1
  %lnot31 = xor i1 %tobool30, true
  %lnot33 = xor i1 %lnot31, true
  %lnot35 = xor i1 %lnot33, true
  %lnot.ext36 = zext i1 %lnot35 to i32
  store i32 %lnot.ext36, i32* %__ret_warn_on29, align 4
  %22 = load i32, i32* %__ret_warn_on29, align 4
  %tobool37 = icmp ne i32 %22, 0
  %lnot38 = xor i1 %tobool37, true
  %lnot40 = xor i1 %lnot38, true
  %lnot.ext41 = zext i1 %lnot40 to i32
  %conv42 = sext i32 %lnot.ext41 to i64
  %tobool43 = icmp ne i64 %conv42, 0
  br i1 %tobool43, label %if.then44, label %if.end45

if.then44:                                        ; preds = %if.then27
  call void @warn_slowpath_null(i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.3, i32 0, i32 0), i32 241)
  br label %if.end45

if.end45:                                         ; preds = %if.then44, %if.then27
  %23 = load i32, i32* %__ret_warn_on29, align 4
  %tobool47 = icmp ne i32 %23, 0
  %lnot48 = xor i1 %tobool47, true
  %lnot50 = xor i1 %lnot48, true
  %lnot.ext51 = zext i1 %lnot50 to i32
  %conv52 = sext i32 %lnot.ext51 to i64
  store i64 %conv52, i64* %tmp46, align 8
  %24 = load i64, i64* %tmp46, align 8
  %25 = load %struct.cfg80211_registered_device*, %struct.cfg80211_registered_device** %rdev.addr, align 8
  %scan_req53 = getelementptr inbounds %struct.cfg80211_registered_device, %struct.cfg80211_registered_device* %25, i32 0, i32 23
  %26 = load %struct.cfg80211_scan_request*, %struct.cfg80211_scan_request** %scan_req53, align 16
  %aborted = getelementptr inbounds %struct.cfg80211_scan_request, %struct.cfg80211_scan_request* %26, i32 0, i32 10
  store i8 1, i8* %aborted, align 8
  %27 = load %struct.cfg80211_registered_device*, %struct.cfg80211_registered_device** %rdev.addr, align 8
  %28 = load i8, i8* %busy, align 1
  %tobool54 = trunc i8 %28 to i1
  %lnot55 = xor i1 %tobool54, true
  call void @___cfg80211_scan_done(%struct.cfg80211_registered_device* %27, i1 zeroext %lnot55)
  br label %if.end57

if.end57:                                         ; preds = %if.end45, %land.lhs.true, %if.end20, %if.then19, %if.then16
  ret void
}

; Function Attrs: noinline nounwind optnone uwtable
define internal void @rdev_stop_p2p_device(%struct.cfg80211_registered_device* %rdev, %struct.wireless_dev* %wdev) #0 {
entry:
  %rdev.addr = alloca %struct.cfg80211_registered_device*, align 8
  %wdev.addr = alloca %struct.wireless_dev*, align 8
  store %struct.cfg80211_registered_device* %rdev, %struct.cfg80211_registered_device** %rdev.addr, align 8
  store %struct.wireless_dev* %wdev, %struct.wireless_dev** %wdev.addr, align 8
  %0 = load %struct.cfg80211_registered_device*, %struct.cfg80211_registered_device** %rdev.addr, align 8
  %wiphy = getelementptr inbounds %struct.cfg80211_registered_device, %struct.cfg80211_registered_device* %0, i32 0, i32 34
  %1 = load %struct.wireless_dev*, %struct.wireless_dev** %wdev.addr, align 8
  call void @trace_rdev_stop_p2p_device(%struct.wiphy* %wiphy, %struct.wireless_dev* %1)
  %2 = load %struct.cfg80211_registered_device*, %struct.cfg80211_registered_device** %rdev.addr, align 8
  %ops = getelementptr inbounds %struct.cfg80211_registered_device, %struct.cfg80211_registered_device* %2, i32 0, i32 0
  %3 = load %struct.cfg80211_ops*, %struct.cfg80211_ops** %ops, align 32
  %stop_p2p_device = getelementptr inbounds %struct.cfg80211_ops, %struct.cfg80211_ops* %3, i32 0, i32 76
  %4 = load void (%struct.wiphy*, %struct.wireless_dev*)*, void (%struct.wiphy*, %struct.wireless_dev*)** %stop_p2p_device, align 8
  %5 = load %struct.cfg80211_registered_device*, %struct.cfg80211_registered_device** %rdev.addr, align 8
  %wiphy1 = getelementptr inbounds %struct.cfg80211_registered_device, %struct.cfg80211_registered_device* %5, i32 0, i32 34
  %6 = load %struct.wireless_dev*, %struct.wireless_dev** %wdev.addr, align 8
  call void %4(%struct.wiphy* %wiphy1, %struct.wireless_dev* %6)
  %7 = load %struct.cfg80211_registered_device*, %struct.cfg80211_registered_device** %rdev.addr, align 8
  %wiphy2 = getelementptr inbounds %struct.cfg80211_registered_device, %struct.cfg80211_registered_device* %7, i32 0, i32 34
  call void @trace_rdev_return_void(%struct.wiphy* %wiphy2)
  ret void
}

declare i32 @work_busy(%struct.work_struct*) #1

declare void @___cfg80211_scan_done(%struct.cfg80211_registered_device*, i1 zeroext) #1

; Function Attrs: noinline nounwind optnone uwtable
define %struct.wiphy* @wiphy_new(%struct.cfg80211_ops* %ops, i32 %sizeof_priv) #0 {
entry:
  %retval = alloca %struct.wiphy*, align 8
  %ops.addr = alloca %struct.cfg80211_ops*, align 8
  %sizeof_priv.addr = alloca i32, align 4
  %rdev = alloca %struct.cfg80211_registered_device*, align 8
  %alloc_size = alloca i32, align 4
  %__ret_warn_on = alloca i32, align 4
  %tmp = alloca i64, align 8
  %__ret_warn_on17 = alloca i32, align 4
  %tmp41 = alloca i64, align 8
  %__ret_warn_on48 = alloca i32, align 4
  %tmp68 = alloca i64, align 8
  %__ret_warn_on75 = alloca i32, align 4
  %tmp95 = alloca i64, align 8
  %__ret_warn_on102 = alloca i32, align 4
  %tmp122 = alloca i64, align 8
  %__ret_warn_on129 = alloca i32, align 4
  %tmp149 = alloca i64, align 8
  %__ret_warn_on156 = alloca i32, align 4
  %tmp176 = alloca i64, align 8
  %__ret_warn_on183 = alloca i32, align 4
  %tmp203 = alloca i64, align 8
  %.compoundliteral = alloca %struct.raw_spinlock, align 2
  %.compoundliteral244 = alloca %struct.raw_spinlock, align 2
  %.compoundliteral252 = alloca %struct.atomic64_t, align 8
  %.compoundliteral264 = alloca %struct.atomic64_t, align 8
  %.compoundliteral280 = alloca %struct.atomic64_t, align 8
  %.compoundliteral325 = alloca %struct.atomic64_t, align 8
  %.compoundliteral339 = alloca %struct.atomic64_t, align 8
  %.compoundliteral353 = alloca %struct.atomic64_t, align 8
  store %struct.cfg80211_ops* %ops, %struct.cfg80211_ops** %ops.addr, align 8
  store i32 %sizeof_priv, i32* %sizeof_priv.addr, align 4
  %0 = load %struct.cfg80211_ops*, %struct.cfg80211_ops** %ops.addr, align 8
  %add_key = getelementptr inbounds %struct.cfg80211_ops, %struct.cfg80211_ops* %0, i32 0, i32 6
  %1 = load i32 (%struct.wiphy*, %struct.net_device*, i8, i1, i8*, %struct.key_params*)*, i32 (%struct.wiphy*, %struct.net_device*, i8, i1, i8*, %struct.key_params*)** %add_key, align 8
  %tobool = icmp ne i32 (%struct.wiphy*, %struct.net_device*, i8, i1, i8*, %struct.key_params*)* %1, null
  br i1 %tobool, label %land.rhs, label %land.end

land.rhs:                                         ; preds = %entry
  %2 = load %struct.cfg80211_ops*, %struct.cfg80211_ops** %ops.addr, align 8
  %del_key = getelementptr inbounds %struct.cfg80211_ops, %struct.cfg80211_ops* %2, i32 0, i32 8
  %3 = load i32 (%struct.wiphy*, %struct.net_device*, i8, i1, i8*)*, i32 (%struct.wiphy*, %struct.net_device*, i8, i1, i8*)** %del_key, align 8
  %tobool1 = icmp ne i32 (%struct.wiphy*, %struct.net_device*, i8, i1, i8*)* %3, null
  br i1 %tobool1, label %lor.rhs, label %lor.end

lor.rhs:                                          ; preds = %land.rhs
  %4 = load %struct.cfg80211_ops*, %struct.cfg80211_ops** %ops.addr, align 8
  %set_default_key = getelementptr inbounds %struct.cfg80211_ops, %struct.cfg80211_ops* %4, i32 0, i32 9
  %5 = load i32 (%struct.wiphy*, %struct.net_device*, i8, i1, i1)*, i32 (%struct.wiphy*, %struct.net_device*, i8, i1, i1)** %set_default_key, align 8
  %tobool2 = icmp ne i32 (%struct.wiphy*, %struct.net_device*, i8, i1, i1)* %5, null
  %lnot = xor i1 %tobool2, true
  br label %lor.end

lor.end:                                          ; preds = %lor.rhs, %land.rhs
  %6 = phi i1 [ true, %land.rhs ], [ %lnot, %lor.rhs ]
  br label %land.end

land.end:                                         ; preds = %lor.end, %entry
  %7 = phi i1 [ false, %entry ], [ %6, %lor.end ]
  %lnot3 = xor i1 %7, true
  %lnot4 = xor i1 %lnot3, true
  %lnot.ext = zext i1 %lnot4 to i32
  store i32 %lnot.ext, i32* %__ret_warn_on, align 4
  %8 = load i32, i32* %__ret_warn_on, align 4
  %tobool5 = icmp ne i32 %8, 0
  %lnot6 = xor i1 %tobool5, true
  %lnot8 = xor i1 %lnot6, true
  %lnot.ext9 = zext i1 %lnot8 to i32
  %conv = sext i32 %lnot.ext9 to i64
  %tobool10 = icmp ne i64 %conv, 0
  br i1 %tobool10, label %if.then, label %if.end

if.then:                                          ; preds = %land.end
  call void @warn_slowpath_null(i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.3, i32 0, i32 0), i32 317)
  br label %if.end

if.end:                                           ; preds = %if.then, %land.end
  %9 = load i32, i32* %__ret_warn_on, align 4
  %tobool11 = icmp ne i32 %9, 0
  %lnot12 = xor i1 %tobool11, true
  %lnot14 = xor i1 %lnot12, true
  %lnot.ext15 = zext i1 %lnot14 to i32
  %conv16 = sext i32 %lnot.ext15 to i64
  store i64 %conv16, i64* %tmp, align 8
  %10 = load i64, i64* %tmp, align 8
  %11 = load %struct.cfg80211_ops*, %struct.cfg80211_ops** %ops.addr, align 8
  %auth = getelementptr inbounds %struct.cfg80211_ops, %struct.cfg80211_ops* %11, i32 0, i32 33
  %12 = load i32 (%struct.wiphy*, %struct.net_device*, %struct.cfg80211_auth_request*)*, i32 (%struct.wiphy*, %struct.net_device*, %struct.cfg80211_auth_request*)** %auth, align 8
  %tobool18 = icmp ne i32 (%struct.wiphy*, %struct.net_device*, %struct.cfg80211_auth_request*)* %12, null
  br i1 %tobool18, label %land.rhs19, label %land.end27

land.rhs19:                                       ; preds = %if.end
  %13 = load %struct.cfg80211_ops*, %struct.cfg80211_ops** %ops.addr, align 8
  %assoc = getelementptr inbounds %struct.cfg80211_ops, %struct.cfg80211_ops* %13, i32 0, i32 34
  %14 = load i32 (%struct.wiphy*, %struct.net_device*, %struct.cfg80211_assoc_request*)*, i32 (%struct.wiphy*, %struct.net_device*, %struct.cfg80211_assoc_request*)** %assoc, align 8
  %tobool20 = icmp ne i32 (%struct.wiphy*, %struct.net_device*, %struct.cfg80211_assoc_request*)* %14, null
  br i1 %tobool20, label %lor.lhs.false, label %lor.end26

lor.lhs.false:                                    ; preds = %land.rhs19
  %15 = load %struct.cfg80211_ops*, %struct.cfg80211_ops** %ops.addr, align 8
  %deauth = getelementptr inbounds %struct.cfg80211_ops, %struct.cfg80211_ops* %15, i32 0, i32 35
  %16 = load i32 (%struct.wiphy*, %struct.net_device*, %struct.cfg80211_deauth_request*)*, i32 (%struct.wiphy*, %struct.net_device*, %struct.cfg80211_deauth_request*)** %deauth, align 8
  %tobool21 = icmp ne i32 (%struct.wiphy*, %struct.net_device*, %struct.cfg80211_deauth_request*)* %16, null
  br i1 %tobool21, label %lor.rhs22, label %lor.end26

lor.rhs22:                                        ; preds = %lor.lhs.false
  %17 = load %struct.cfg80211_ops*, %struct.cfg80211_ops** %ops.addr, align 8
  %disassoc = getelementptr inbounds %struct.cfg80211_ops, %struct.cfg80211_ops* %17, i32 0, i32 36
  %18 = load i32 (%struct.wiphy*, %struct.net_device*, %struct.cfg80211_disassoc_request*)*, i32 (%struct.wiphy*, %struct.net_device*, %struct.cfg80211_disassoc_request*)** %disassoc, align 8
  %tobool23 = icmp ne i32 (%struct.wiphy*, %struct.net_device*, %struct.cfg80211_disassoc_request*)* %18, null
  %lnot24 = xor i1 %tobool23, true
  br label %lor.end26

lor.end26:                                        ; preds = %lor.rhs22, %lor.lhs.false, %land.rhs19
  %19 = phi i1 [ true, %lor.lhs.false ], [ true, %land.rhs19 ], [ %lnot24, %lor.rhs22 ]
  br label %land.end27

land.end27:                                       ; preds = %lor.end26, %if.end
  %20 = phi i1 [ false, %if.end ], [ %19, %lor.end26 ]
  %lnot28 = xor i1 %20, true
  %lnot30 = xor i1 %lnot28, true
  %lnot.ext31 = zext i1 %lnot30 to i32
  store i32 %lnot.ext31, i32* %__ret_warn_on17, align 4
  %21 = load i32, i32* %__ret_warn_on17, align 4
  %tobool32 = icmp ne i32 %21, 0
  %lnot33 = xor i1 %tobool32, true
  %lnot35 = xor i1 %lnot33, true
  %lnot.ext36 = zext i1 %lnot35 to i32
  %conv37 = sext i32 %lnot.ext36 to i64
  %tobool38 = icmp ne i64 %conv37, 0
  br i1 %tobool38, label %if.then39, label %if.end40

if.then39:                                        ; preds = %land.end27
  call void @warn_slowpath_null(i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.3, i32 0, i32 0), i32 318)
  br label %if.end40

if.end40:                                         ; preds = %if.then39, %land.end27
  %22 = load i32, i32* %__ret_warn_on17, align 4
  %tobool42 = icmp ne i32 %22, 0
  %lnot43 = xor i1 %tobool42, true
  %lnot45 = xor i1 %lnot43, true
  %lnot.ext46 = zext i1 %lnot45 to i32
  %conv47 = sext i32 %lnot.ext46 to i64
  store i64 %conv47, i64* %tmp41, align 8
  %23 = load i64, i64* %tmp41, align 8
  %24 = load %struct.cfg80211_ops*, %struct.cfg80211_ops** %ops.addr, align 8
  %connect = getelementptr inbounds %struct.cfg80211_ops, %struct.cfg80211_ops* %24, i32 0, i32 37
  %25 = load i32 (%struct.wiphy*, %struct.net_device*, %struct.cfg80211_connect_params*)*, i32 (%struct.wiphy*, %struct.net_device*, %struct.cfg80211_connect_params*)** %connect, align 8
  %tobool49 = icmp ne i32 (%struct.wiphy*, %struct.net_device*, %struct.cfg80211_connect_params*)* %25, null
  br i1 %tobool49, label %land.rhs50, label %land.end54

land.rhs50:                                       ; preds = %if.end40
  %26 = load %struct.cfg80211_ops*, %struct.cfg80211_ops** %ops.addr, align 8
  %disconnect = getelementptr inbounds %struct.cfg80211_ops, %struct.cfg80211_ops* %26, i32 0, i32 38
  %27 = load i32 (%struct.wiphy*, %struct.net_device*, i16)*, i32 (%struct.wiphy*, %struct.net_device*, i16)** %disconnect, align 8
  %tobool51 = icmp ne i32 (%struct.wiphy*, %struct.net_device*, i16)* %27, null
  %lnot52 = xor i1 %tobool51, true
  br label %land.end54

land.end54:                                       ; preds = %land.rhs50, %if.end40
  %28 = phi i1 [ false, %if.end40 ], [ %lnot52, %land.rhs50 ]
  %lnot55 = xor i1 %28, true
  %lnot57 = xor i1 %lnot55, true
  %lnot.ext58 = zext i1 %lnot57 to i32
  store i32 %lnot.ext58, i32* %__ret_warn_on48, align 4
  %29 = load i32, i32* %__ret_warn_on48, align 4
  %tobool59 = icmp ne i32 %29, 0
  %lnot60 = xor i1 %tobool59, true
  %lnot62 = xor i1 %lnot60, true
  %lnot.ext63 = zext i1 %lnot62 to i32
  %conv64 = sext i32 %lnot.ext63 to i64
  %tobool65 = icmp ne i64 %conv64, 0
  br i1 %tobool65, label %if.then66, label %if.end67

if.then66:                                        ; preds = %land.end54
  call void @warn_slowpath_null(i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.3, i32 0, i32 0), i32 319)
  br label %if.end67

if.end67:                                         ; preds = %if.then66, %land.end54
  %30 = load i32, i32* %__ret_warn_on48, align 4
  %tobool69 = icmp ne i32 %30, 0
  %lnot70 = xor i1 %tobool69, true
  %lnot72 = xor i1 %lnot70, true
  %lnot.ext73 = zext i1 %lnot72 to i32
  %conv74 = sext i32 %lnot.ext73 to i64
  store i64 %conv74, i64* %tmp68, align 8
  %31 = load i64, i64* %tmp68, align 8
  %32 = load %struct.cfg80211_ops*, %struct.cfg80211_ops** %ops.addr, align 8
  %join_ibss = getelementptr inbounds %struct.cfg80211_ops, %struct.cfg80211_ops* %32, i32 0, i32 39
  %33 = load i32 (%struct.wiphy*, %struct.net_device*, %struct.cfg80211_ibss_params*)*, i32 (%struct.wiphy*, %struct.net_device*, %struct.cfg80211_ibss_params*)** %join_ibss, align 8
  %tobool76 = icmp ne i32 (%struct.wiphy*, %struct.net_device*, %struct.cfg80211_ibss_params*)* %33, null
  br i1 %tobool76, label %land.rhs77, label %land.end81

land.rhs77:                                       ; preds = %if.end67
  %34 = load %struct.cfg80211_ops*, %struct.cfg80211_ops** %ops.addr, align 8
  %leave_ibss = getelementptr inbounds %struct.cfg80211_ops, %struct.cfg80211_ops* %34, i32 0, i32 40
  %35 = load i32 (%struct.wiphy*, %struct.net_device*)*, i32 (%struct.wiphy*, %struct.net_device*)** %leave_ibss, align 8
  %tobool78 = icmp ne i32 (%struct.wiphy*, %struct.net_device*)* %35, null
  %lnot79 = xor i1 %tobool78, true
  br label %land.end81

land.end81:                                       ; preds = %land.rhs77, %if.end67
  %36 = phi i1 [ false, %if.end67 ], [ %lnot79, %land.rhs77 ]
  %lnot82 = xor i1 %36, true
  %lnot84 = xor i1 %lnot82, true
  %lnot.ext85 = zext i1 %lnot84 to i32
  store i32 %lnot.ext85, i32* %__ret_warn_on75, align 4
  %37 = load i32, i32* %__ret_warn_on75, align 4
  %tobool86 = icmp ne i32 %37, 0
  %lnot87 = xor i1 %tobool86, true
  %lnot89 = xor i1 %lnot87, true
  %lnot.ext90 = zext i1 %lnot89 to i32
  %conv91 = sext i32 %lnot.ext90 to i64
  %tobool92 = icmp ne i64 %conv91, 0
  br i1 %tobool92, label %if.then93, label %if.end94

if.then93:                                        ; preds = %land.end81
  call void @warn_slowpath_null(i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.3, i32 0, i32 0), i32 320)
  br label %if.end94

if.end94:                                         ; preds = %if.then93, %land.end81
  %38 = load i32, i32* %__ret_warn_on75, align 4
  %tobool96 = icmp ne i32 %38, 0
  %lnot97 = xor i1 %tobool96, true
  %lnot99 = xor i1 %lnot97, true
  %lnot.ext100 = zext i1 %lnot99 to i32
  %conv101 = sext i32 %lnot.ext100 to i64
  store i64 %conv101, i64* %tmp95, align 8
  %39 = load i64, i64* %tmp95, align 8
  %40 = load %struct.cfg80211_ops*, %struct.cfg80211_ops** %ops.addr, align 8
  %add_virtual_intf = getelementptr inbounds %struct.cfg80211_ops, %struct.cfg80211_ops* %40, i32 0, i32 3
  %41 = load %struct.wireless_dev* (%struct.wiphy*, i8*, i32, i32*, %struct.vif_params*)*, %struct.wireless_dev* (%struct.wiphy*, i8*, i32, i32*, %struct.vif_params*)** %add_virtual_intf, align 8
  %tobool103 = icmp ne %struct.wireless_dev* (%struct.wiphy*, i8*, i32, i32*, %struct.vif_params*)* %41, null
  br i1 %tobool103, label %land.rhs104, label %land.end108

land.rhs104:                                      ; preds = %if.end94
  %42 = load %struct.cfg80211_ops*, %struct.cfg80211_ops** %ops.addr, align 8
  %del_virtual_intf = getelementptr inbounds %struct.cfg80211_ops, %struct.cfg80211_ops* %42, i32 0, i32 4
  %43 = load i32 (%struct.wiphy*, %struct.wireless_dev*)*, i32 (%struct.wiphy*, %struct.wireless_dev*)** %del_virtual_intf, align 8
  %tobool105 = icmp ne i32 (%struct.wiphy*, %struct.wireless_dev*)* %43, null
  %lnot106 = xor i1 %tobool105, true
  br label %land.end108

land.end108:                                      ; preds = %land.rhs104, %if.end94
  %44 = phi i1 [ false, %if.end94 ], [ %lnot106, %land.rhs104 ]
  %lnot109 = xor i1 %44, true
  %lnot111 = xor i1 %lnot109, true
  %lnot.ext112 = zext i1 %lnot111 to i32
  store i32 %lnot.ext112, i32* %__ret_warn_on102, align 4
  %45 = load i32, i32* %__ret_warn_on102, align 4
  %tobool113 = icmp ne i32 %45, 0
  %lnot114 = xor i1 %tobool113, true
  %lnot116 = xor i1 %lnot114, true
  %lnot.ext117 = zext i1 %lnot116 to i32
  %conv118 = sext i32 %lnot.ext117 to i64
  %tobool119 = icmp ne i64 %conv118, 0
  br i1 %tobool119, label %if.then120, label %if.end121

if.then120:                                       ; preds = %land.end108
  call void @warn_slowpath_null(i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.3, i32 0, i32 0), i32 321)
  br label %if.end121

if.end121:                                        ; preds = %if.then120, %land.end108
  %46 = load i32, i32* %__ret_warn_on102, align 4
  %tobool123 = icmp ne i32 %46, 0
  %lnot124 = xor i1 %tobool123, true
  %lnot126 = xor i1 %lnot124, true
  %lnot.ext127 = zext i1 %lnot126 to i32
  %conv128 = sext i32 %lnot.ext127 to i64
  store i64 %conv128, i64* %tmp122, align 8
  %47 = load i64, i64* %tmp122, align 8
  %48 = load %struct.cfg80211_ops*, %struct.cfg80211_ops** %ops.addr, align 8
  %add_station = getelementptr inbounds %struct.cfg80211_ops, %struct.cfg80211_ops* %48, i32 0, i32 14
  %49 = load i32 (%struct.wiphy*, %struct.net_device*, i8*, %struct.station_parameters*)*, i32 (%struct.wiphy*, %struct.net_device*, i8*, %struct.station_parameters*)** %add_station, align 8
  %tobool130 = icmp ne i32 (%struct.wiphy*, %struct.net_device*, i8*, %struct.station_parameters*)* %49, null
  br i1 %tobool130, label %land.rhs131, label %land.end135

land.rhs131:                                      ; preds = %if.end121
  %50 = load %struct.cfg80211_ops*, %struct.cfg80211_ops** %ops.addr, align 8
  %del_station = getelementptr inbounds %struct.cfg80211_ops, %struct.cfg80211_ops* %50, i32 0, i32 15
  %51 = load i32 (%struct.wiphy*, %struct.net_device*, i8*)*, i32 (%struct.wiphy*, %struct.net_device*, i8*)** %del_station, align 8
  %tobool132 = icmp ne i32 (%struct.wiphy*, %struct.net_device*, i8*)* %51, null
  %lnot133 = xor i1 %tobool132, true
  br label %land.end135

land.end135:                                      ; preds = %land.rhs131, %if.end121
  %52 = phi i1 [ false, %if.end121 ], [ %lnot133, %land.rhs131 ]
  %lnot136 = xor i1 %52, true
  %lnot138 = xor i1 %lnot136, true
  %lnot.ext139 = zext i1 %lnot138 to i32
  store i32 %lnot.ext139, i32* %__ret_warn_on129, align 4
  %53 = load i32, i32* %__ret_warn_on129, align 4
  %tobool140 = icmp ne i32 %53, 0
  %lnot141 = xor i1 %tobool140, true
  %lnot143 = xor i1 %lnot141, true
  %lnot.ext144 = zext i1 %lnot143 to i32
  %conv145 = sext i32 %lnot.ext144 to i64
  %tobool146 = icmp ne i64 %conv145, 0
  br i1 %tobool146, label %if.then147, label %if.end148

if.then147:                                       ; preds = %land.end135
  call void @warn_slowpath_null(i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.3, i32 0, i32 0), i32 322)
  br label %if.end148

if.end148:                                        ; preds = %if.then147, %land.end135
  %54 = load i32, i32* %__ret_warn_on129, align 4
  %tobool150 = icmp ne i32 %54, 0
  %lnot151 = xor i1 %tobool150, true
  %lnot153 = xor i1 %lnot151, true
  %lnot.ext154 = zext i1 %lnot153 to i32
  %conv155 = sext i32 %lnot.ext154 to i64
  store i64 %conv155, i64* %tmp149, align 8
  %55 = load i64, i64* %tmp149, align 8
  %56 = load %struct.cfg80211_ops*, %struct.cfg80211_ops** %ops.addr, align 8
  %add_mpath = getelementptr inbounds %struct.cfg80211_ops, %struct.cfg80211_ops* %56, i32 0, i32 19
  %57 = load i32 (%struct.wiphy*, %struct.net_device*, i8*, i8*)*, i32 (%struct.wiphy*, %struct.net_device*, i8*, i8*)** %add_mpath, align 8
  %tobool157 = icmp ne i32 (%struct.wiphy*, %struct.net_device*, i8*, i8*)* %57, null
  br i1 %tobool157, label %land.rhs158, label %land.end162

land.rhs158:                                      ; preds = %if.end148
  %58 = load %struct.cfg80211_ops*, %struct.cfg80211_ops** %ops.addr, align 8
  %del_mpath = getelementptr inbounds %struct.cfg80211_ops, %struct.cfg80211_ops* %58, i32 0, i32 20
  %59 = load i32 (%struct.wiphy*, %struct.net_device*, i8*)*, i32 (%struct.wiphy*, %struct.net_device*, i8*)** %del_mpath, align 8
  %tobool159 = icmp ne i32 (%struct.wiphy*, %struct.net_device*, i8*)* %59, null
  %lnot160 = xor i1 %tobool159, true
  br label %land.end162

land.end162:                                      ; preds = %land.rhs158, %if.end148
  %60 = phi i1 [ false, %if.end148 ], [ %lnot160, %land.rhs158 ]
  %lnot163 = xor i1 %60, true
  %lnot165 = xor i1 %lnot163, true
  %lnot.ext166 = zext i1 %lnot165 to i32
  store i32 %lnot.ext166, i32* %__ret_warn_on156, align 4
  %61 = load i32, i32* %__ret_warn_on156, align 4
  %tobool167 = icmp ne i32 %61, 0
  %lnot168 = xor i1 %tobool167, true
  %lnot170 = xor i1 %lnot168, true
  %lnot.ext171 = zext i1 %lnot170 to i32
  %conv172 = sext i32 %lnot.ext171 to i64
  %tobool173 = icmp ne i64 %conv172, 0
  br i1 %tobool173, label %if.then174, label %if.end175

if.then174:                                       ; preds = %land.end162
  call void @warn_slowpath_null(i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.3, i32 0, i32 0), i32 323)
  br label %if.end175

if.end175:                                        ; preds = %if.then174, %land.end162
  %62 = load i32, i32* %__ret_warn_on156, align 4
  %tobool177 = icmp ne i32 %62, 0
  %lnot178 = xor i1 %tobool177, true
  %lnot180 = xor i1 %lnot178, true
  %lnot.ext181 = zext i1 %lnot180 to i32
  %conv182 = sext i32 %lnot.ext181 to i64
  store i64 %conv182, i64* %tmp176, align 8
  %63 = load i64, i64* %tmp176, align 8
  %64 = load %struct.cfg80211_ops*, %struct.cfg80211_ops** %ops.addr, align 8
  %join_mesh = getelementptr inbounds %struct.cfg80211_ops, %struct.cfg80211_ops* %64, i32 0, i32 26
  %65 = load i32 (%struct.wiphy*, %struct.net_device*, %struct.mesh_config*, %struct.mesh_setup*)*, i32 (%struct.wiphy*, %struct.net_device*, %struct.mesh_config*, %struct.mesh_setup*)** %join_mesh, align 8
  %tobool184 = icmp ne i32 (%struct.wiphy*, %struct.net_device*, %struct.mesh_config*, %struct.mesh_setup*)* %65, null
  br i1 %tobool184, label %land.rhs185, label %land.end189

land.rhs185:                                      ; preds = %if.end175
  %66 = load %struct.cfg80211_ops*, %struct.cfg80211_ops** %ops.addr, align 8
  %leave_mesh = getelementptr inbounds %struct.cfg80211_ops, %struct.cfg80211_ops* %66, i32 0, i32 27
  %67 = load i32 (%struct.wiphy*, %struct.net_device*)*, i32 (%struct.wiphy*, %struct.net_device*)** %leave_mesh, align 8
  %tobool186 = icmp ne i32 (%struct.wiphy*, %struct.net_device*)* %67, null
  %lnot187 = xor i1 %tobool186, true
  br label %land.end189

land.end189:                                      ; preds = %land.rhs185, %if.end175
  %68 = phi i1 [ false, %if.end175 ], [ %lnot187, %land.rhs185 ]
  %lnot190 = xor i1 %68, true
  %lnot192 = xor i1 %lnot190, true
  %lnot.ext193 = zext i1 %lnot192 to i32
  store i32 %lnot.ext193, i32* %__ret_warn_on183, align 4
  %69 = load i32, i32* %__ret_warn_on183, align 4
  %tobool194 = icmp ne i32 %69, 0
  %lnot195 = xor i1 %tobool194, true
  %lnot197 = xor i1 %lnot195, true
  %lnot.ext198 = zext i1 %lnot197 to i32
  %conv199 = sext i32 %lnot.ext198 to i64
  %tobool200 = icmp ne i64 %conv199, 0
  br i1 %tobool200, label %if.then201, label %if.end202

if.then201:                                       ; preds = %land.end189
  call void @warn_slowpath_null(i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.3, i32 0, i32 0), i32 324)
  br label %if.end202

if.end202:                                        ; preds = %if.then201, %land.end189
  %70 = load i32, i32* %__ret_warn_on183, align 4
  %tobool204 = icmp ne i32 %70, 0
  %lnot205 = xor i1 %tobool204, true
  %lnot207 = xor i1 %lnot205, true
  %lnot.ext208 = zext i1 %lnot207 to i32
  %conv209 = sext i32 %lnot.ext208 to i64
  store i64 %conv209, i64* %tmp203, align 8
  %71 = load i64, i64* %tmp203, align 8
  %72 = load i32, i32* %sizeof_priv.addr, align 4
  %conv210 = sext i32 %72 to i64
  %add = add i64 1408, %conv210
  %conv211 = trunc i64 %add to i32
  store i32 %conv211, i32* %alloc_size, align 4
  %73 = load i32, i32* %alloc_size, align 4
  %conv212 = sext i32 %73 to i64
  %call = call i8* @kzalloc(i64 %conv212, i32 208)
  %74 = bitcast i8* %call to %struct.cfg80211_registered_device*
  store %struct.cfg80211_registered_device* %74, %struct.cfg80211_registered_device** %rdev, align 8
  %75 = load %struct.cfg80211_registered_device*, %struct.cfg80211_registered_device** %rdev, align 8
  %tobool213 = icmp ne %struct.cfg80211_registered_device* %75, null
  br i1 %tobool213, label %if.end215, label %if.then214

if.then214:                                       ; preds = %if.end202
  store %struct.wiphy* null, %struct.wiphy** %retval, align 8
  br label %return

if.end215:                                        ; preds = %if.end202
  %76 = load %struct.cfg80211_ops*, %struct.cfg80211_ops** %ops.addr, align 8
  %77 = load %struct.cfg80211_registered_device*, %struct.cfg80211_registered_device** %rdev, align 8
  %ops216 = getelementptr inbounds %struct.cfg80211_registered_device, %struct.cfg80211_registered_device* %77, i32 0, i32 0
  store %struct.cfg80211_ops* %76, %struct.cfg80211_ops** %ops216, align 32
  call void @mutex_lock(%struct.mutex* @cfg80211_mutex)
  %78 = load i32, i32* @wiphy_new.wiphy_counter, align 4
  %inc = add nsw i32 %78, 1
  store i32 %inc, i32* @wiphy_new.wiphy_counter, align 4
  %79 = load %struct.cfg80211_registered_device*, %struct.cfg80211_registered_device** %rdev, align 8
  %wiphy_idx = getelementptr inbounds %struct.cfg80211_registered_device, %struct.cfg80211_registered_device* %79, i32 0, i32 8
  store i32 %78, i32* %wiphy_idx, align 8
  %80 = load %struct.cfg80211_registered_device*, %struct.cfg80211_registered_device** %rdev, align 8
  %wiphy_idx217 = getelementptr inbounds %struct.cfg80211_registered_device, %struct.cfg80211_registered_device* %80, i32 0, i32 8
  %81 = load i32, i32* %wiphy_idx217, align 8
  %cmp = icmp slt i32 %81, 0
  %lnot219 = xor i1 %cmp, true
  %lnot221 = xor i1 %lnot219, true
  %lnot.ext222 = zext i1 %lnot221 to i32
  %conv223 = sext i32 %lnot.ext222 to i64
  %tobool224 = icmp ne i64 %conv223, 0
  br i1 %tobool224, label %if.then225, label %if.end226

if.then225:                                       ; preds = %if.end215
  %82 = load i32, i32* @wiphy_new.wiphy_counter, align 4
  %dec = add nsw i32 %82, -1
  store i32 %dec, i32* @wiphy_new.wiphy_counter, align 4
  call void @mutex_unlock(%struct.mutex* @cfg80211_mutex)
  %83 = load %struct.cfg80211_registered_device*, %struct.cfg80211_registered_device** %rdev, align 8
  %84 = bitcast %struct.cfg80211_registered_device* %83 to i8*
  call void @kfree(i8* %84)
  store %struct.wiphy* null, %struct.wiphy** %retval, align 8
  br label %return

if.end226:                                        ; preds = %if.end215
  call void @mutex_unlock(%struct.mutex* @cfg80211_mutex)
  %85 = load %struct.cfg80211_registered_device*, %struct.cfg80211_registered_device** %rdev, align 8
  %wiphy = getelementptr inbounds %struct.cfg80211_registered_device, %struct.cfg80211_registered_device* %85, i32 0, i32 34
  %dev = getelementptr inbounds %struct.wiphy, %struct.wiphy* %wiphy, i32 0, i32 42
  %86 = load %struct.cfg80211_registered_device*, %struct.cfg80211_registered_device** %rdev, align 8
  %wiphy_idx227 = getelementptr inbounds %struct.cfg80211_registered_device, %struct.cfg80211_registered_device* %86, i32 0, i32 8
  %87 = load i32, i32* %wiphy_idx227, align 8
  %call228 = call i32 (%struct.device*, i8*, ...) @dev_set_name(%struct.device* %dev, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.4, i32 0, i32 0), i32 %87)
  br label %do.body

do.body:                                          ; preds = %if.end226
  %88 = load %struct.cfg80211_registered_device*, %struct.cfg80211_registered_device** %rdev, align 8
  %mtx = getelementptr inbounds %struct.cfg80211_registered_device, %struct.cfg80211_registered_device* %88, i32 0, i32 2
  call void @__mutex_init(%struct.mutex* %mtx, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.5, i32 0, i32 0), %struct.lock_class_key* @wiphy_new.__key)
  br label %do.end

do.end:                                           ; preds = %do.body
  br label %do.body229

do.body229:                                       ; preds = %do.end
  %89 = load %struct.cfg80211_registered_device*, %struct.cfg80211_registered_device** %rdev, align 8
  %devlist_mtx = getelementptr inbounds %struct.cfg80211_registered_device, %struct.cfg80211_registered_device* %89, i32 0, i32 9
  call void @__mutex_init(%struct.mutex* %devlist_mtx, i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.7, i32 0, i32 0), %struct.lock_class_key* @wiphy_new.__key.6)
  br label %do.end230

do.end230:                                        ; preds = %do.body229
  br label %do.body231

do.body231:                                       ; preds = %do.end230
  %90 = load %struct.cfg80211_registered_device*, %struct.cfg80211_registered_device** %rdev, align 8
  %sched_scan_mtx = getelementptr inbounds %struct.cfg80211_registered_device, %struct.cfg80211_registered_device* %90, i32 0, i32 28
  call void @__mutex_init(%struct.mutex* %sched_scan_mtx, i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.9, i32 0, i32 0), %struct.lock_class_key* @wiphy_new.__key.8)
  br label %do.end232

do.end232:                                        ; preds = %do.body231
  %91 = load %struct.cfg80211_registered_device*, %struct.cfg80211_registered_device** %rdev, align 8
  %wdev_list = getelementptr inbounds %struct.cfg80211_registered_device, %struct.cfg80211_registered_device* %91, i32 0, i32 10
  call void @INIT_LIST_HEAD(%struct.list_head* %wdev_list)
  %92 = load %struct.cfg80211_registered_device*, %struct.cfg80211_registered_device** %rdev, align 8
  %beacon_registrations = getelementptr inbounds %struct.cfg80211_registered_device, %struct.cfg80211_registered_device* %92, i32 0, i32 15
  call void @INIT_LIST_HEAD(%struct.list_head* %beacon_registrations)
  br label %do.body233

do.body233:                                       ; preds = %do.end232
  %93 = load %struct.cfg80211_registered_device*, %struct.cfg80211_registered_device** %rdev, align 8
  %beacon_registrations_lock = getelementptr inbounds %struct.cfg80211_registered_device, %struct.cfg80211_registered_device* %93, i32 0, i32 16
  %call234 = call %struct.raw_spinlock* @spinlock_check(%struct.spinlock* %beacon_registrations_lock)
  br label %do.body235

do.body235:                                       ; preds = %do.body233
  %94 = load %struct.cfg80211_registered_device*, %struct.cfg80211_registered_device** %rdev, align 8
  %beacon_registrations_lock236 = getelementptr inbounds %struct.cfg80211_registered_device, %struct.cfg80211_registered_device* %94, i32 0, i32 16
  %95 = getelementptr inbounds %struct.spinlock, %struct.spinlock* %beacon_registrations_lock236, i32 0, i32 0
  %rlock = bitcast %union.anon.0* %95 to %struct.raw_spinlock*
  %raw_lock = getelementptr inbounds %struct.raw_spinlock, %struct.raw_spinlock* %.compoundliteral, i32 0, i32 0
  %96 = getelementptr inbounds %struct.arch_spinlock, %struct.arch_spinlock* %raw_lock, i32 0, i32 0
  %head_tail = bitcast %union.anon.1* %96 to i16*
  store i16 0, i16* %head_tail, align 2
  %97 = bitcast %struct.raw_spinlock* %rlock to i8*
  %98 = bitcast %struct.raw_spinlock* %.compoundliteral to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %97, i8* %98, i64 2, i32 2, i1 false)
  br label %do.end237

do.end237:                                        ; preds = %do.body235
  br label %do.end238

do.end238:                                        ; preds = %do.end237
  br label %do.body239

do.body239:                                       ; preds = %do.end238
  %99 = load %struct.cfg80211_registered_device*, %struct.cfg80211_registered_device** %rdev, align 8
  %bss_lock = getelementptr inbounds %struct.cfg80211_registered_device, %struct.cfg80211_registered_device* %99, i32 0, i32 19
  %call240 = call %struct.raw_spinlock* @spinlock_check(%struct.spinlock* %bss_lock)
  br label %do.body241

do.body241:                                       ; preds = %do.body239
  %100 = load %struct.cfg80211_registered_device*, %struct.cfg80211_registered_device** %rdev, align 8
  %bss_lock242 = getelementptr inbounds %struct.cfg80211_registered_device, %struct.cfg80211_registered_device* %100, i32 0, i32 19
  %101 = getelementptr inbounds %struct.spinlock, %struct.spinlock* %bss_lock242, i32 0, i32 0
  %rlock243 = bitcast %union.anon.0* %101 to %struct.raw_spinlock*
  %raw_lock245 = getelementptr inbounds %struct.raw_spinlock, %struct.raw_spinlock* %.compoundliteral244, i32 0, i32 0
  %102 = getelementptr inbounds %struct.arch_spinlock, %struct.arch_spinlock* %raw_lock245, i32 0, i32 0
  %head_tail246 = bitcast %union.anon.1* %102 to i16*
  store i16 0, i16* %head_tail246, align 2
  %103 = bitcast %struct.raw_spinlock* %rlock243 to i8*
  %104 = bitcast %struct.raw_spinlock* %.compoundliteral244 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %103, i8* %104, i64 2, i32 2, i1 false)
  br label %do.end247

do.end247:                                        ; preds = %do.body241
  br label %do.end248

do.end248:                                        ; preds = %do.end247
  %105 = load %struct.cfg80211_registered_device*, %struct.cfg80211_registered_device** %rdev, align 8
  %bss_list = getelementptr inbounds %struct.cfg80211_registered_device, %struct.cfg80211_registered_device* %105, i32 0, i32 20
  call void @INIT_LIST_HEAD(%struct.list_head* %bss_list)
  br label %do.body249

do.body249:                                       ; preds = %do.end248
  br label %do.body250

do.body250:                                       ; preds = %do.body249
  %106 = load %struct.cfg80211_registered_device*, %struct.cfg80211_registered_device** %rdev, align 8
  %scan_done_wk = getelementptr inbounds %struct.cfg80211_registered_device, %struct.cfg80211_registered_device* %106, i32 0, i32 26
  call void @__init_work(%struct.work_struct* %scan_done_wk, i32 0)
  %107 = load %struct.cfg80211_registered_device*, %struct.cfg80211_registered_device** %rdev, align 8
  %scan_done_wk251 = getelementptr inbounds %struct.cfg80211_registered_device, %struct.cfg80211_registered_device* %107, i32 0, i32 26
  %data = getelementptr inbounds %struct.work_struct, %struct.work_struct* %scan_done_wk251, i32 0, i32 0
  %counter = getelementptr inbounds %struct.atomic64_t, %struct.atomic64_t* %.compoundliteral252, i32 0, i32 0
  store i64 68719476704, i64* %counter, align 8
  %108 = bitcast %struct.atomic64_t* %data to i8*
  %109 = bitcast %struct.atomic64_t* %.compoundliteral252 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %108, i8* %109, i64 8, i32 8, i1 false)
  %110 = load %struct.cfg80211_registered_device*, %struct.cfg80211_registered_device** %rdev, align 8
  %scan_done_wk253 = getelementptr inbounds %struct.cfg80211_registered_device, %struct.cfg80211_registered_device* %110, i32 0, i32 26
  %entry254 = getelementptr inbounds %struct.work_struct, %struct.work_struct* %scan_done_wk253, i32 0, i32 1
  call void @INIT_LIST_HEAD(%struct.list_head* %entry254)
  br label %do.body255

do.body255:                                       ; preds = %do.body250
  %111 = load %struct.cfg80211_registered_device*, %struct.cfg80211_registered_device** %rdev, align 8
  %scan_done_wk256 = getelementptr inbounds %struct.cfg80211_registered_device, %struct.cfg80211_registered_device* %111, i32 0, i32 26
  %func = getelementptr inbounds %struct.work_struct, %struct.work_struct* %scan_done_wk256, i32 0, i32 2
  store void (%struct.work_struct*)* @__cfg80211_scan_done, void (%struct.work_struct*)** %func, align 8
  br label %do.end257

do.end257:                                        ; preds = %do.body255
  br label %do.end258

do.end258:                                        ; preds = %do.end257
  br label %do.end259

do.end259:                                        ; preds = %do.end258
  br label %do.body260

do.body260:                                       ; preds = %do.end259
  br label %do.body261

do.body261:                                       ; preds = %do.body260
  %112 = load %struct.cfg80211_registered_device*, %struct.cfg80211_registered_device** %rdev, align 8
  %sched_scan_results_wk = getelementptr inbounds %struct.cfg80211_registered_device, %struct.cfg80211_registered_device* %112, i32 0, i32 27
  call void @__init_work(%struct.work_struct* %sched_scan_results_wk, i32 0)
  %113 = load %struct.cfg80211_registered_device*, %struct.cfg80211_registered_device** %rdev, align 8
  %sched_scan_results_wk262 = getelementptr inbounds %struct.cfg80211_registered_device, %struct.cfg80211_registered_device* %113, i32 0, i32 27
  %data263 = getelementptr inbounds %struct.work_struct, %struct.work_struct* %sched_scan_results_wk262, i32 0, i32 0
  %counter265 = getelementptr inbounds %struct.atomic64_t, %struct.atomic64_t* %.compoundliteral264, i32 0, i32 0
  store i64 68719476704, i64* %counter265, align 8
  %114 = bitcast %struct.atomic64_t* %data263 to i8*
  %115 = bitcast %struct.atomic64_t* %.compoundliteral264 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %114, i8* %115, i64 8, i32 8, i1 false)
  %116 = load %struct.cfg80211_registered_device*, %struct.cfg80211_registered_device** %rdev, align 8
  %sched_scan_results_wk266 = getelementptr inbounds %struct.cfg80211_registered_device, %struct.cfg80211_registered_device* %116, i32 0, i32 27
  %entry267 = getelementptr inbounds %struct.work_struct, %struct.work_struct* %sched_scan_results_wk266, i32 0, i32 1
  call void @INIT_LIST_HEAD(%struct.list_head* %entry267)
  br label %do.body268

do.body268:                                       ; preds = %do.body261
  %117 = load %struct.cfg80211_registered_device*, %struct.cfg80211_registered_device** %rdev, align 8
  %sched_scan_results_wk269 = getelementptr inbounds %struct.cfg80211_registered_device, %struct.cfg80211_registered_device* %117, i32 0, i32 27
  %func270 = getelementptr inbounds %struct.work_struct, %struct.work_struct* %sched_scan_results_wk269, i32 0, i32 2
  store void (%struct.work_struct*)* @__cfg80211_sched_scan_results, void (%struct.work_struct*)** %func270, align 8
  br label %do.end271

do.end271:                                        ; preds = %do.body268
  br label %do.end272

do.end272:                                        ; preds = %do.end271
  br label %do.end273

do.end273:                                        ; preds = %do.end272
  br label %do.body274

do.body274:                                       ; preds = %do.end273
  br label %do.body275

do.body275:                                       ; preds = %do.body274
  br label %do.body276

do.body276:                                       ; preds = %do.body275
  %118 = load %struct.cfg80211_registered_device*, %struct.cfg80211_registered_device** %rdev, align 8
  %dfs_update_channels_wk = getelementptr inbounds %struct.cfg80211_registered_device, %struct.cfg80211_registered_device* %118, i32 0, i32 32
  %work = getelementptr inbounds %struct.delayed_work, %struct.delayed_work* %dfs_update_channels_wk, i32 0, i32 0
  call void @__init_work(%struct.work_struct* %work, i32 0)
  %119 = load %struct.cfg80211_registered_device*, %struct.cfg80211_registered_device** %rdev, align 8
  %dfs_update_channels_wk277 = getelementptr inbounds %struct.cfg80211_registered_device, %struct.cfg80211_registered_device* %119, i32 0, i32 32
  %work278 = getelementptr inbounds %struct.delayed_work, %struct.delayed_work* %dfs_update_channels_wk277, i32 0, i32 0
  %data279 = getelementptr inbounds %struct.work_struct, %struct.work_struct* %work278, i32 0, i32 0
  %counter281 = getelementptr inbounds %struct.atomic64_t, %struct.atomic64_t* %.compoundliteral280, i32 0, i32 0
  store i64 68719476704, i64* %counter281, align 8
  %120 = bitcast %struct.atomic64_t* %data279 to i8*
  %121 = bitcast %struct.atomic64_t* %.compoundliteral280 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %120, i8* %121, i64 8, i32 8, i1 false)
  %122 = load %struct.cfg80211_registered_device*, %struct.cfg80211_registered_device** %rdev, align 8
  %dfs_update_channels_wk282 = getelementptr inbounds %struct.cfg80211_registered_device, %struct.cfg80211_registered_device* %122, i32 0, i32 32
  %work283 = getelementptr inbounds %struct.delayed_work, %struct.delayed_work* %dfs_update_channels_wk282, i32 0, i32 0
  %entry284 = getelementptr inbounds %struct.work_struct, %struct.work_struct* %work283, i32 0, i32 1
  call void @INIT_LIST_HEAD(%struct.list_head* %entry284)
  br label %do.body285

do.body285:                                       ; preds = %do.body276
  %123 = load %struct.cfg80211_registered_device*, %struct.cfg80211_registered_device** %rdev, align 8
  %dfs_update_channels_wk286 = getelementptr inbounds %struct.cfg80211_registered_device, %struct.cfg80211_registered_device* %123, i32 0, i32 32
  %work287 = getelementptr inbounds %struct.delayed_work, %struct.delayed_work* %dfs_update_channels_wk286, i32 0, i32 0
  %func288 = getelementptr inbounds %struct.work_struct, %struct.work_struct* %work287, i32 0, i32 2
  store void (%struct.work_struct*)* @cfg80211_dfs_channels_update_work, void (%struct.work_struct*)** %func288, align 8
  br label %do.end289

do.end289:                                        ; preds = %do.body285
  br label %do.end290

do.end290:                                        ; preds = %do.end289
  br label %do.end291

do.end291:                                        ; preds = %do.end290
  br label %do.body292

do.body292:                                       ; preds = %do.end291
  %124 = load %struct.cfg80211_registered_device*, %struct.cfg80211_registered_device** %rdev, align 8
  %dfs_update_channels_wk293 = getelementptr inbounds %struct.cfg80211_registered_device, %struct.cfg80211_registered_device* %124, i32 0, i32 32
  %timer = getelementptr inbounds %struct.delayed_work, %struct.delayed_work* %dfs_update_channels_wk293, i32 0, i32 1
  call void @init_timer_key(%struct.timer_list* %timer, i32 2, i8* null, %struct.lock_class_key* null)
  %125 = load %struct.cfg80211_registered_device*, %struct.cfg80211_registered_device** %rdev, align 8
  %dfs_update_channels_wk294 = getelementptr inbounds %struct.cfg80211_registered_device, %struct.cfg80211_registered_device* %125, i32 0, i32 32
  %timer295 = getelementptr inbounds %struct.delayed_work, %struct.delayed_work* %dfs_update_channels_wk294, i32 0, i32 1
  %function = getelementptr inbounds %struct.timer_list, %struct.timer_list* %timer295, i32 0, i32 3
  store void (i64)* @delayed_work_timer_fn, void (i64)** %function, align 8
  %126 = load %struct.cfg80211_registered_device*, %struct.cfg80211_registered_device** %rdev, align 8
  %dfs_update_channels_wk296 = getelementptr inbounds %struct.cfg80211_registered_device, %struct.cfg80211_registered_device* %126, i32 0, i32 32
  %127 = ptrtoint %struct.delayed_work* %dfs_update_channels_wk296 to i64
  %128 = load %struct.cfg80211_registered_device*, %struct.cfg80211_registered_device** %rdev, align 8
  %dfs_update_channels_wk297 = getelementptr inbounds %struct.cfg80211_registered_device, %struct.cfg80211_registered_device* %128, i32 0, i32 32
  %timer298 = getelementptr inbounds %struct.delayed_work, %struct.delayed_work* %dfs_update_channels_wk297, i32 0, i32 1
  %data299 = getelementptr inbounds %struct.timer_list, %struct.timer_list* %timer298, i32 0, i32 4
  store i64 %127, i64* %data299, align 8
  br label %do.end300

do.end300:                                        ; preds = %do.body292
  br label %do.end301

do.end301:                                        ; preds = %do.end300
  %129 = load %struct.cfg80211_registered_device*, %struct.cfg80211_registered_device** %rdev, align 8
  %wiphy302 = getelementptr inbounds %struct.cfg80211_registered_device, %struct.cfg80211_registered_device* %129, i32 0, i32 34
  %dev303 = getelementptr inbounds %struct.wiphy, %struct.wiphy* %wiphy302, i32 0, i32 42
  call void @device_initialize(%struct.device* %dev303)
  %130 = load %struct.cfg80211_registered_device*, %struct.cfg80211_registered_device** %rdev, align 8
  %wiphy304 = getelementptr inbounds %struct.cfg80211_registered_device, %struct.cfg80211_registered_device* %130, i32 0, i32 34
  %dev305 = getelementptr inbounds %struct.wiphy, %struct.wiphy* %wiphy304, i32 0, i32 42
  %class = getelementptr inbounds %struct.device, %struct.device* %dev305, i32 0, i32 25
  store %struct.class* @ieee80211_class, %struct.class** %class, align 8
  %131 = load %struct.cfg80211_registered_device*, %struct.cfg80211_registered_device** %rdev, align 8
  %132 = bitcast %struct.cfg80211_registered_device* %131 to i8*
  %133 = load %struct.cfg80211_registered_device*, %struct.cfg80211_registered_device** %rdev, align 8
  %wiphy306 = getelementptr inbounds %struct.cfg80211_registered_device, %struct.cfg80211_registered_device* %133, i32 0, i32 34
  %dev307 = getelementptr inbounds %struct.wiphy, %struct.wiphy* %wiphy306, i32 0, i32 42
  %platform_data = getelementptr inbounds %struct.device, %struct.device* %dev307, i32 0, i32 8
  store i8* %132, i8** %platform_data, align 8
  %134 = load %struct.cfg80211_registered_device*, %struct.cfg80211_registered_device** %rdev, align 8
  %wiphy308 = getelementptr inbounds %struct.cfg80211_registered_device, %struct.cfg80211_registered_device* %134, i32 0, i32 34
  %flags = getelementptr inbounds %struct.wiphy, %struct.wiphy* %wiphy308, i32 0, i32 10
  %135 = load i32, i32* %flags, align 4
  %or = or i32 %135, 16
  store i32 %or, i32* %flags, align 4
  %136 = load %struct.cfg80211_registered_device*, %struct.cfg80211_registered_device** %rdev, align 8
  %wiphy309 = getelementptr inbounds %struct.cfg80211_registered_device, %struct.cfg80211_registered_device* %136, i32 0, i32 34
  call void @wiphy_net_set(%struct.wiphy* %wiphy309, %struct.net* @init_net)
  %137 = load %struct.cfg80211_registered_device*, %struct.cfg80211_registered_device** %rdev, align 8
  %rfkill_ops = getelementptr inbounds %struct.cfg80211_registered_device, %struct.cfg80211_registered_device* %137, i32 0, i32 3
  %set_block = getelementptr inbounds %struct.rfkill_ops, %struct.rfkill_ops* %rfkill_ops, i32 0, i32 2
  store i32 (i8*, i1)* @cfg80211_rfkill_set_block, i32 (i8*, i1)** %set_block, align 16
  %138 = load %struct.cfg80211_registered_device*, %struct.cfg80211_registered_device** %rdev, align 8
  %wiphy310 = getelementptr inbounds %struct.cfg80211_registered_device, %struct.cfg80211_registered_device* %138, i32 0, i32 34
  %dev311 = getelementptr inbounds %struct.wiphy, %struct.wiphy* %wiphy310, i32 0, i32 42
  %call312 = call i8* @dev_name(%struct.device* %dev311)
  %139 = load %struct.cfg80211_registered_device*, %struct.cfg80211_registered_device** %rdev, align 8
  %wiphy313 = getelementptr inbounds %struct.cfg80211_registered_device, %struct.cfg80211_registered_device* %139, i32 0, i32 34
  %dev314 = getelementptr inbounds %struct.wiphy, %struct.wiphy* %wiphy313, i32 0, i32 42
  %140 = load %struct.cfg80211_registered_device*, %struct.cfg80211_registered_device** %rdev, align 8
  %rfkill_ops315 = getelementptr inbounds %struct.cfg80211_registered_device, %struct.cfg80211_registered_device* %140, i32 0, i32 3
  %141 = load %struct.cfg80211_registered_device*, %struct.cfg80211_registered_device** %rdev, align 8
  %142 = bitcast %struct.cfg80211_registered_device* %141 to i8*
  %call316 = call %struct.rfkill* @rfkill_alloc(i8* %call312, %struct.device* %dev314, i32 1, %struct.rfkill_ops* %rfkill_ops315, i8* %142)
  %143 = load %struct.cfg80211_registered_device*, %struct.cfg80211_registered_device** %rdev, align 8
  %rfkill = getelementptr inbounds %struct.cfg80211_registered_device, %struct.cfg80211_registered_device* %143, i32 0, i32 4
  store %struct.rfkill* %call316, %struct.rfkill** %rfkill, align 8
  %144 = load %struct.cfg80211_registered_device*, %struct.cfg80211_registered_device** %rdev, align 8
  %rfkill317 = getelementptr inbounds %struct.cfg80211_registered_device, %struct.cfg80211_registered_device* %144, i32 0, i32 4
  %145 = load %struct.rfkill*, %struct.rfkill** %rfkill317, align 8
  %tobool318 = icmp ne %struct.rfkill* %145, null
  br i1 %tobool318, label %if.end320, label %if.then319

if.then319:                                       ; preds = %do.end301
  %146 = load %struct.cfg80211_registered_device*, %struct.cfg80211_registered_device** %rdev, align 8
  %147 = bitcast %struct.cfg80211_registered_device* %146 to i8*
  call void @kfree(i8* %147)
  store %struct.wiphy* null, %struct.wiphy** %retval, align 8
  br label %return

if.end320:                                        ; preds = %do.end301
  br label %do.body321

do.body321:                                       ; preds = %if.end320
  br label %do.body322

do.body322:                                       ; preds = %do.body321
  %148 = load %struct.cfg80211_registered_device*, %struct.cfg80211_registered_device** %rdev, align 8
  %rfkill_sync = getelementptr inbounds %struct.cfg80211_registered_device, %struct.cfg80211_registered_device* %148, i32 0, i32 5
  call void @__init_work(%struct.work_struct* %rfkill_sync, i32 0)
  %149 = load %struct.cfg80211_registered_device*, %struct.cfg80211_registered_device** %rdev, align 8
  %rfkill_sync323 = getelementptr inbounds %struct.cfg80211_registered_device, %struct.cfg80211_registered_device* %149, i32 0, i32 5
  %data324 = getelementptr inbounds %struct.work_struct, %struct.work_struct* %rfkill_sync323, i32 0, i32 0
  %counter326 = getelementptr inbounds %struct.atomic64_t, %struct.atomic64_t* %.compoundliteral325, i32 0, i32 0
  store i64 68719476704, i64* %counter326, align 8
  %150 = bitcast %struct.atomic64_t* %data324 to i8*
  %151 = bitcast %struct.atomic64_t* %.compoundliteral325 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %150, i8* %151, i64 8, i32 8, i1 false)
  %152 = load %struct.cfg80211_registered_device*, %struct.cfg80211_registered_device** %rdev, align 8
  %rfkill_sync327 = getelementptr inbounds %struct.cfg80211_registered_device, %struct.cfg80211_registered_device* %152, i32 0, i32 5
  %entry328 = getelementptr inbounds %struct.work_struct, %struct.work_struct* %rfkill_sync327, i32 0, i32 1
  call void @INIT_LIST_HEAD(%struct.list_head* %entry328)
  br label %do.body329

do.body329:                                       ; preds = %do.body322
  %153 = load %struct.cfg80211_registered_device*, %struct.cfg80211_registered_device** %rdev, align 8
  %rfkill_sync330 = getelementptr inbounds %struct.cfg80211_registered_device, %struct.cfg80211_registered_device* %153, i32 0, i32 5
  %func331 = getelementptr inbounds %struct.work_struct, %struct.work_struct* %rfkill_sync330, i32 0, i32 2
  store void (%struct.work_struct*)* @cfg80211_rfkill_sync_work, void (%struct.work_struct*)** %func331, align 8
  br label %do.end332

do.end332:                                        ; preds = %do.body329
  br label %do.end333

do.end333:                                        ; preds = %do.end332
  br label %do.end334

do.end334:                                        ; preds = %do.end333
  br label %do.body335

do.body335:                                       ; preds = %do.end334
  br label %do.body336

do.body336:                                       ; preds = %do.body335
  %154 = load %struct.cfg80211_registered_device*, %struct.cfg80211_registered_device** %rdev, align 8
  %conn_work = getelementptr inbounds %struct.cfg80211_registered_device, %struct.cfg80211_registered_device* %154, i32 0, i32 29
  call void @__init_work(%struct.work_struct* %conn_work, i32 0)
  %155 = load %struct.cfg80211_registered_device*, %struct.cfg80211_registered_device** %rdev, align 8
  %conn_work337 = getelementptr inbounds %struct.cfg80211_registered_device, %struct.cfg80211_registered_device* %155, i32 0, i32 29
  %data338 = getelementptr inbounds %struct.work_struct, %struct.work_struct* %conn_work337, i32 0, i32 0
  %counter340 = getelementptr inbounds %struct.atomic64_t, %struct.atomic64_t* %.compoundliteral339, i32 0, i32 0
  store i64 68719476704, i64* %counter340, align 8
  %156 = bitcast %struct.atomic64_t* %data338 to i8*
  %157 = bitcast %struct.atomic64_t* %.compoundliteral339 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %156, i8* %157, i64 8, i32 8, i1 false)
  %158 = load %struct.cfg80211_registered_device*, %struct.cfg80211_registered_device** %rdev, align 8
  %conn_work341 = getelementptr inbounds %struct.cfg80211_registered_device, %struct.cfg80211_registered_device* %158, i32 0, i32 29
  %entry342 = getelementptr inbounds %struct.work_struct, %struct.work_struct* %conn_work341, i32 0, i32 1
  call void @INIT_LIST_HEAD(%struct.list_head* %entry342)
  br label %do.body343

do.body343:                                       ; preds = %do.body336
  %159 = load %struct.cfg80211_registered_device*, %struct.cfg80211_registered_device** %rdev, align 8
  %conn_work344 = getelementptr inbounds %struct.cfg80211_registered_device, %struct.cfg80211_registered_device* %159, i32 0, i32 29
  %func345 = getelementptr inbounds %struct.work_struct, %struct.work_struct* %conn_work344, i32 0, i32 2
  store void (%struct.work_struct*)* @cfg80211_conn_work, void (%struct.work_struct*)** %func345, align 8
  br label %do.end346

do.end346:                                        ; preds = %do.body343
  br label %do.end347

do.end347:                                        ; preds = %do.end346
  br label %do.end348

do.end348:                                        ; preds = %do.end347
  br label %do.body349

do.body349:                                       ; preds = %do.end348
  br label %do.body350

do.body350:                                       ; preds = %do.body349
  %160 = load %struct.cfg80211_registered_device*, %struct.cfg80211_registered_device** %rdev, align 8
  %event_work = getelementptr inbounds %struct.cfg80211_registered_device, %struct.cfg80211_registered_device* %160, i32 0, i32 30
  call void @__init_work(%struct.work_struct* %event_work, i32 0)
  %161 = load %struct.cfg80211_registered_device*, %struct.cfg80211_registered_device** %rdev, align 8
  %event_work351 = getelementptr inbounds %struct.cfg80211_registered_device, %struct.cfg80211_registered_device* %161, i32 0, i32 30
  %data352 = getelementptr inbounds %struct.work_struct, %struct.work_struct* %event_work351, i32 0, i32 0
  %counter354 = getelementptr inbounds %struct.atomic64_t, %struct.atomic64_t* %.compoundliteral353, i32 0, i32 0
  store i64 68719476704, i64* %counter354, align 8
  %162 = bitcast %struct.atomic64_t* %data352 to i8*
  %163 = bitcast %struct.atomic64_t* %.compoundliteral353 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %162, i8* %163, i64 8, i32 8, i1 false)
  %164 = load %struct.cfg80211_registered_device*, %struct.cfg80211_registered_device** %rdev, align 8
  %event_work355 = getelementptr inbounds %struct.cfg80211_registered_device, %struct.cfg80211_registered_device* %164, i32 0, i32 30
  %entry356 = getelementptr inbounds %struct.work_struct, %struct.work_struct* %event_work355, i32 0, i32 1
  call void @INIT_LIST_HEAD(%struct.list_head* %entry356)
  br label %do.body357

do.body357:                                       ; preds = %do.body350
  %165 = load %struct.cfg80211_registered_device*, %struct.cfg80211_registered_device** %rdev, align 8
  %event_work358 = getelementptr inbounds %struct.cfg80211_registered_device, %struct.cfg80211_registered_device* %165, i32 0, i32 30
  %func359 = getelementptr inbounds %struct.work_struct, %struct.work_struct* %event_work358, i32 0, i32 2
  store void (%struct.work_struct*)* @cfg80211_event_work, void (%struct.work_struct*)** %func359, align 8
  br label %do.end360

do.end360:                                        ; preds = %do.body357
  br label %do.end361

do.end361:                                        ; preds = %do.end360
  br label %do.end362

do.end362:                                        ; preds = %do.end361
  br label %do.body363

do.body363:                                       ; preds = %do.end362
  %166 = load %struct.cfg80211_registered_device*, %struct.cfg80211_registered_device** %rdev, align 8
  %dev_wait = getelementptr inbounds %struct.cfg80211_registered_device, %struct.cfg80211_registered_device* %166, i32 0, i32 14
  call void @__init_waitqueue_head(%struct.__wait_queue_head* %dev_wait, i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.11, i32 0, i32 0), %struct.lock_class_key* @wiphy_new.__key.10)
  br label %do.end364

do.end364:                                        ; preds = %do.body363
  %167 = load %struct.cfg80211_registered_device*, %struct.cfg80211_registered_device** %rdev, align 8
  %wiphy365 = getelementptr inbounds %struct.cfg80211_registered_device, %struct.cfg80211_registered_device* %167, i32 0, i32 34
  %retry_short = getelementptr inbounds %struct.wiphy, %struct.wiphy* %wiphy365, i32 0, i32 22
  store i8 7, i8* %retry_short, align 32
  %168 = load %struct.cfg80211_registered_device*, %struct.cfg80211_registered_device** %rdev, align 8
  %wiphy366 = getelementptr inbounds %struct.cfg80211_registered_device, %struct.cfg80211_registered_device* %168, i32 0, i32 34
  %retry_long = getelementptr inbounds %struct.wiphy, %struct.wiphy* %wiphy366, i32 0, i32 23
  store i8 4, i8* %retry_long, align 1
  %169 = load %struct.cfg80211_registered_device*, %struct.cfg80211_registered_device** %rdev, align 8
  %wiphy367 = getelementptr inbounds %struct.cfg80211_registered_device, %struct.cfg80211_registered_device* %169, i32 0, i32 34
  %frag_threshold = getelementptr inbounds %struct.wiphy, %struct.wiphy* %wiphy367, i32 0, i32 24
  store i32 -1, i32* %frag_threshold, align 4
  %170 = load %struct.cfg80211_registered_device*, %struct.cfg80211_registered_device** %rdev, align 8
  %wiphy368 = getelementptr inbounds %struct.cfg80211_registered_device, %struct.cfg80211_registered_device* %170, i32 0, i32 34
  %rts_threshold = getelementptr inbounds %struct.wiphy, %struct.wiphy* %wiphy368, i32 0, i32 25
  store i32 -1, i32* %rts_threshold, align 8
  %171 = load %struct.cfg80211_registered_device*, %struct.cfg80211_registered_device** %rdev, align 8
  %wiphy369 = getelementptr inbounds %struct.cfg80211_registered_device, %struct.cfg80211_registered_device* %171, i32 0, i32 34
  %coverage_class = getelementptr inbounds %struct.wiphy, %struct.wiphy* %wiphy369, i32 0, i32 26
  store i8 0, i8* %coverage_class, align 4
  %172 = load %struct.cfg80211_registered_device*, %struct.cfg80211_registered_device** %rdev, align 8
  %wiphy370 = getelementptr inbounds %struct.cfg80211_registered_device, %struct.cfg80211_registered_device* %172, i32 0, i32 34
  %features = getelementptr inbounds %struct.wiphy, %struct.wiphy* %wiphy370, i32 0, i32 11
  store i32 128, i32* %features, align 8
  %173 = load %struct.cfg80211_registered_device*, %struct.cfg80211_registered_device** %rdev, align 8
  %wiphy371 = getelementptr inbounds %struct.cfg80211_registered_device, %struct.cfg80211_registered_device* %173, i32 0, i32 34
  store %struct.wiphy* %wiphy371, %struct.wiphy** %retval, align 8
  br label %return

return:                                           ; preds = %do.end364, %if.then319, %if.then225, %if.then214
  %174 = load %struct.wiphy*, %struct.wiphy** %retval, align 8
  ret %struct.wiphy* %174
}

; Function Attrs: noinline nounwind optnone uwtable
define internal i8* @kzalloc(i64 %size, i32 %flags) #0 {
entry:
  %size.addr.i = alloca i64, align 8
  %flags.addr.i = alloca i32, align 4
  %size.addr = alloca i64, align 8
  %flags.addr = alloca i32, align 4
  store i64 %size, i64* %size.addr, align 8
  store i32 %flags, i32* %flags.addr, align 4
  %0 = load i64, i64* %size.addr, align 8
  %1 = load i32, i32* %flags.addr, align 4
  %or = or i32 %1, 32768
  store i64 %0, i64* %size.addr.i, align 8
  store i32 %or, i32* %flags.addr.i, align 4
  %2 = load i64, i64* %size.addr.i, align 8
  %3 = load i32, i32* %flags.addr.i, align 4
  %call.i = call i8* @__kmalloc(i64 %2, i32 %3) #3
  ret i8* %call.i
}

declare void @kfree(i8*) #1

declare i32 @dev_set_name(%struct.device*, i8*, ...) #1

declare void @__mutex_init(%struct.mutex*, i8*, %struct.lock_class_key*) #1

; Function Attrs: noinline nounwind optnone uwtable
define internal void @INIT_LIST_HEAD(%struct.list_head* %list) #0 {
entry:
  %list.addr = alloca %struct.list_head*, align 8
  store %struct.list_head* %list, %struct.list_head** %list.addr, align 8
  %0 = load %struct.list_head*, %struct.list_head** %list.addr, align 8
  %1 = load %struct.list_head*, %struct.list_head** %list.addr, align 8
  %next = getelementptr inbounds %struct.list_head, %struct.list_head* %1, i32 0, i32 0
  store %struct.list_head* %0, %struct.list_head** %next, align 8
  %2 = load %struct.list_head*, %struct.list_head** %list.addr, align 8
  %3 = load %struct.list_head*, %struct.list_head** %list.addr, align 8
  %prev = getelementptr inbounds %struct.list_head, %struct.list_head* %3, i32 0, i32 1
  store %struct.list_head* %2, %struct.list_head** %prev, align 8
  ret void
}

; Function Attrs: noinline nounwind optnone uwtable
define internal %struct.raw_spinlock* @spinlock_check(%struct.spinlock* %lock) #0 {
entry:
  %lock.addr = alloca %struct.spinlock*, align 8
  store %struct.spinlock* %lock, %struct.spinlock** %lock.addr, align 8
  %0 = load %struct.spinlock*, %struct.spinlock** %lock.addr, align 8
  %1 = getelementptr inbounds %struct.spinlock, %struct.spinlock* %0, i32 0, i32 0
  %rlock = bitcast %union.anon.0* %1 to %struct.raw_spinlock*
  ret %struct.raw_spinlock* %rlock
}

; Function Attrs: argmemonly nounwind
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* nocapture writeonly, i8* nocapture readonly, i64, i32, i1) #2

; Function Attrs: noinline nounwind optnone uwtable
define internal void @__init_work(%struct.work_struct* %work, i32 %onstack) #0 {
entry:
  %work.addr = alloca %struct.work_struct*, align 8
  %onstack.addr = alloca i32, align 4
  store %struct.work_struct* %work, %struct.work_struct** %work.addr, align 8
  store i32 %onstack, i32* %onstack.addr, align 4
  ret void
}

declare void @__cfg80211_scan_done(%struct.work_struct*) #1

declare void @__cfg80211_sched_scan_results(%struct.work_struct*) #1

declare void @cfg80211_dfs_channels_update_work(%struct.work_struct*) #1

declare void @init_timer_key(%struct.timer_list*, i32, i8*, %struct.lock_class_key*) #1

declare void @delayed_work_timer_fn(i64) #1

declare void @device_initialize(%struct.device*) #1

; Function Attrs: noinline nounwind optnone uwtable
define internal i32 @cfg80211_rfkill_set_block(i8* %data, i1 zeroext %blocked) #0 {
entry:
  %retval = alloca i32, align 4
  %data.addr = alloca i8*, align 8
  %blocked.addr = alloca i8, align 1
  %rdev = alloca %struct.cfg80211_registered_device*, align 8
  %wdev = alloca %struct.wireless_dev*, align 8
  %__mptr = alloca %struct.list_head*, align 8
  %tmp = alloca %struct.wireless_dev*, align 8
  %__mptr8 = alloca %struct.list_head*, align 8
  %tmp11 = alloca %struct.wireless_dev*, align 8
  store i8* %data, i8** %data.addr, align 8
  %frombool = zext i1 %blocked to i8
  store i8 %frombool, i8* %blocked.addr, align 1
  %0 = load i8*, i8** %data.addr, align 8
  %1 = bitcast i8* %0 to %struct.cfg80211_registered_device*
  store %struct.cfg80211_registered_device* %1, %struct.cfg80211_registered_device** %rdev, align 8
  %2 = load i8, i8* %blocked.addr, align 1
  %tobool = trunc i8 %2 to i1
  br i1 %tobool, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  store i32 0, i32* %retval, align 4
  br label %return

if.end:                                           ; preds = %entry
  call void @rtnl_lock()
  %3 = load %struct.cfg80211_registered_device*, %struct.cfg80211_registered_device** %rdev, align 8
  %wdev_list = getelementptr inbounds %struct.cfg80211_registered_device, %struct.cfg80211_registered_device* %3, i32 0, i32 10
  %next = getelementptr inbounds %struct.list_head, %struct.list_head* %wdev_list, i32 0, i32 0
  %4 = load %struct.list_head*, %struct.list_head** %next, align 8
  store %struct.list_head* %4, %struct.list_head** %__mptr, align 8
  %5 = load %struct.list_head*, %struct.list_head** %__mptr, align 8
  %6 = bitcast %struct.list_head* %5 to i8*
  %add.ptr = getelementptr inbounds i8, i8* %6, i64 -16
  %7 = bitcast i8* %add.ptr to %struct.wireless_dev*
  store %struct.wireless_dev* %7, %struct.wireless_dev** %tmp, align 8
  %8 = load %struct.wireless_dev*, %struct.wireless_dev** %tmp, align 8
  store %struct.wireless_dev* %8, %struct.wireless_dev** %wdev, align 8
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %if.end
  %9 = load %struct.wireless_dev*, %struct.wireless_dev** %wdev, align 8
  %list = getelementptr inbounds %struct.wireless_dev, %struct.wireless_dev* %9, i32 0, i32 2
  %10 = load %struct.cfg80211_registered_device*, %struct.cfg80211_registered_device** %rdev, align 8
  %wdev_list1 = getelementptr inbounds %struct.cfg80211_registered_device, %struct.cfg80211_registered_device* %10, i32 0, i32 10
  %cmp = icmp ne %struct.list_head* %list, %wdev_list1
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %11 = load %struct.wireless_dev*, %struct.wireless_dev** %wdev, align 8
  %netdev = getelementptr inbounds %struct.wireless_dev, %struct.wireless_dev* %11, i32 0, i32 3
  %12 = load %struct.net_device*, %struct.net_device** %netdev, align 8
  %tobool2 = icmp ne %struct.net_device* %12, null
  br i1 %tobool2, label %if.then3, label %if.end5

if.then3:                                         ; preds = %for.body
  %13 = load %struct.wireless_dev*, %struct.wireless_dev** %wdev, align 8
  %netdev4 = getelementptr inbounds %struct.wireless_dev, %struct.wireless_dev* %13, i32 0, i32 3
  %14 = load %struct.net_device*, %struct.net_device** %netdev4, align 8
  %call = call i32 @dev_close(%struct.net_device* %14)
  br label %for.inc

if.end5:                                          ; preds = %for.body
  %15 = load %struct.wireless_dev*, %struct.wireless_dev** %wdev, align 8
  %iftype = getelementptr inbounds %struct.wireless_dev, %struct.wireless_dev* %15, i32 0, i32 1
  %16 = load i32, i32* %iftype, align 8
  br label %LeafBlock

LeafBlock:                                        ; preds = %if.end5
  %SwitchLeaf = icmp eq i32 %16, 10
  br i1 %SwitchLeaf, label %sw.bb, label %NewDefault

sw.bb:                                            ; preds = %LeafBlock
  %17 = load %struct.cfg80211_registered_device*, %struct.cfg80211_registered_device** %rdev, align 8
  %devlist_mtx = getelementptr inbounds %struct.cfg80211_registered_device, %struct.cfg80211_registered_device* %17, i32 0, i32 9
  call void @mutex_lock(%struct.mutex* %devlist_mtx)
  %18 = load %struct.cfg80211_registered_device*, %struct.cfg80211_registered_device** %rdev, align 8
  %sched_scan_mtx = getelementptr inbounds %struct.cfg80211_registered_device, %struct.cfg80211_registered_device* %18, i32 0, i32 28
  call void @mutex_lock(%struct.mutex* %sched_scan_mtx)
  %19 = load %struct.cfg80211_registered_device*, %struct.cfg80211_registered_device** %rdev, align 8
  %20 = load %struct.wireless_dev*, %struct.wireless_dev** %wdev, align 8
  call void @cfg80211_stop_p2p_device(%struct.cfg80211_registered_device* %19, %struct.wireless_dev* %20)
  %21 = load %struct.cfg80211_registered_device*, %struct.cfg80211_registered_device** %rdev, align 8
  %sched_scan_mtx6 = getelementptr inbounds %struct.cfg80211_registered_device, %struct.cfg80211_registered_device* %21, i32 0, i32 28
  call void @mutex_unlock(%struct.mutex* %sched_scan_mtx6)
  %22 = load %struct.cfg80211_registered_device*, %struct.cfg80211_registered_device** %rdev, align 8
  %devlist_mtx7 = getelementptr inbounds %struct.cfg80211_registered_device, %struct.cfg80211_registered_device* %22, i32 0, i32 9
  call void @mutex_unlock(%struct.mutex* %devlist_mtx7)
  br label %sw.epilog

NewDefault:                                       ; preds = %LeafBlock
  br label %sw.default

sw.default:                                       ; preds = %NewDefault
  br label %sw.epilog

sw.epilog:                                        ; preds = %sw.default, %sw.bb
  br label %for.inc

for.inc:                                          ; preds = %sw.epilog, %if.then3
  %23 = load %struct.wireless_dev*, %struct.wireless_dev** %wdev, align 8
  %list9 = getelementptr inbounds %struct.wireless_dev, %struct.wireless_dev* %23, i32 0, i32 2
  %next10 = getelementptr inbounds %struct.list_head, %struct.list_head* %list9, i32 0, i32 0
  %24 = load %struct.list_head*, %struct.list_head** %next10, align 8
  store %struct.list_head* %24, %struct.list_head** %__mptr8, align 8
  %25 = load %struct.list_head*, %struct.list_head** %__mptr8, align 8
  %26 = bitcast %struct.list_head* %25 to i8*
  %add.ptr12 = getelementptr inbounds i8, i8* %26, i64 -16
  %27 = bitcast i8* %add.ptr12 to %struct.wireless_dev*
  store %struct.wireless_dev* %27, %struct.wireless_dev** %tmp11, align 8
  %28 = load %struct.wireless_dev*, %struct.wireless_dev** %tmp11, align 8
  store %struct.wireless_dev* %28, %struct.wireless_dev** %wdev, align 8
  br label %for.cond

for.end:                                          ; preds = %for.cond
  call void @rtnl_unlock()
  store i32 0, i32* %retval, align 4
  br label %return

return:                                           ; preds = %for.end, %if.then
  %29 = load i32, i32* %retval, align 4
  ret i32 %29
}

declare %struct.rfkill* @rfkill_alloc(i8*, %struct.device*, i32, %struct.rfkill_ops*, i8*) #1

; Function Attrs: noinline nounwind optnone uwtable
define internal void @cfg80211_rfkill_sync_work(%struct.work_struct* %work) #0 {
entry:
  %work.addr = alloca %struct.work_struct*, align 8
  %rdev = alloca %struct.cfg80211_registered_device*, align 8
  %__mptr = alloca %struct.work_struct*, align 8
  %tmp = alloca %struct.cfg80211_registered_device*, align 8
  store %struct.work_struct* %work, %struct.work_struct** %work.addr, align 8
  %0 = load %struct.work_struct*, %struct.work_struct** %work.addr, align 8
  store %struct.work_struct* %0, %struct.work_struct** %__mptr, align 8
  %1 = load %struct.work_struct*, %struct.work_struct** %__mptr, align 8
  %2 = bitcast %struct.work_struct* %1 to i8*
  %add.ptr = getelementptr inbounds i8, i8* %2, i64 -96
  %3 = bitcast i8* %add.ptr to %struct.cfg80211_registered_device*
  store %struct.cfg80211_registered_device* %3, %struct.cfg80211_registered_device** %tmp, align 8
  %4 = load %struct.cfg80211_registered_device*, %struct.cfg80211_registered_device** %tmp, align 8
  store %struct.cfg80211_registered_device* %4, %struct.cfg80211_registered_device** %rdev, align 8
  %5 = load %struct.cfg80211_registered_device*, %struct.cfg80211_registered_device** %rdev, align 8
  %6 = bitcast %struct.cfg80211_registered_device* %5 to i8*
  %7 = load %struct.cfg80211_registered_device*, %struct.cfg80211_registered_device** %rdev, align 8
  %rfkill = getelementptr inbounds %struct.cfg80211_registered_device, %struct.cfg80211_registered_device* %7, i32 0, i32 4
  %8 = load %struct.rfkill*, %struct.rfkill** %rfkill, align 8
  %call = call zeroext i1 @rfkill_blocked(%struct.rfkill* %8)
  %call1 = call i32 @cfg80211_rfkill_set_block(i8* %6, i1 zeroext %call)
  ret void
}

declare void @cfg80211_conn_work(%struct.work_struct*) #1

; Function Attrs: noinline nounwind optnone uwtable
define internal void @cfg80211_event_work(%struct.work_struct* %work) #0 {
entry:
  %work.addr = alloca %struct.work_struct*, align 8
  %rdev = alloca %struct.cfg80211_registered_device*, align 8
  %__mptr = alloca %struct.work_struct*, align 8
  %tmp = alloca %struct.cfg80211_registered_device*, align 8
  store %struct.work_struct* %work, %struct.work_struct** %work.addr, align 8
  %0 = load %struct.work_struct*, %struct.work_struct** %work.addr, align 8
  store %struct.work_struct* %0, %struct.work_struct** %__mptr, align 8
  %1 = load %struct.work_struct*, %struct.work_struct** %__mptr, align 8
  %2 = bitcast %struct.work_struct* %1 to i8*
  %add.ptr = getelementptr inbounds i8, i8* %2, i64 -464
  %3 = bitcast i8* %add.ptr to %struct.cfg80211_registered_device*
  store %struct.cfg80211_registered_device* %3, %struct.cfg80211_registered_device** %tmp, align 8
  %4 = load %struct.cfg80211_registered_device*, %struct.cfg80211_registered_device** %tmp, align 8
  store %struct.cfg80211_registered_device* %4, %struct.cfg80211_registered_device** %rdev, align 8
  call void @rtnl_lock()
  %5 = load %struct.cfg80211_registered_device*, %struct.cfg80211_registered_device** %rdev, align 8
  call void @cfg80211_lock_rdev(%struct.cfg80211_registered_device* %5)
  %6 = load %struct.cfg80211_registered_device*, %struct.cfg80211_registered_device** %rdev, align 8
  call void @cfg80211_process_rdev_events(%struct.cfg80211_registered_device* %6)
  %7 = load %struct.cfg80211_registered_device*, %struct.cfg80211_registered_device** %rdev, align 8
  call void @cfg80211_unlock_rdev(%struct.cfg80211_registered_device* %7)
  call void @rtnl_unlock()
  ret void
}

declare void @__init_waitqueue_head(%struct.__wait_queue_head*, i8*, %struct.lock_class_key*) #1

; Function Attrs: noinline nounwind optnone uwtable
define i32 @wiphy_register(%struct.wiphy* %wiphy) #0 {
entry:
  %retval = alloca i32, align 4
  %wiphy.addr = alloca %struct.wiphy*, align 8
  %rdev = alloca %struct.cfg80211_registered_device*, align 8
  %res = alloca i32, align 4
  %band = alloca i32, align 4
  %sband = alloca %struct.ieee80211_supported_band*, align 8
  %have_band = alloca i8, align 1
  %i = alloca i32, align 4
  %ifmodes = alloca i16, align 2
  %__ret_warn_on = alloca i32, align 4
  %tmp = alloca i64, align 8
  %__ret_warn_on22 = alloca i32, align 4
  %tmp44 = alloca i64, align 8
  %__ret_warn_on54 = alloca i32, align 4
  %tmp74 = alloca i64, align 8
  %__ret_warn_on84 = alloca i32, align 4
  %tmp109 = alloca i64, align 8
  %__ret_warn_on119 = alloca i32, align 4
  %tmp143 = alloca i64, align 8
  %__len = alloca i64, align 8
  %__ret = alloca i8*, align 8
  %tmp172 = alloca i8*, align 8
  %__ret_warn_on174 = alloca i32, align 4
  %tmp191 = alloca i64, align 8
  %__ret_warn_on201 = alloca i32, align 4
  %tmp220 = alloca i64, align 8
  %__ret_warn_on242 = alloca i32, align 4
  %tmp259 = alloca i64, align 8
  %__ret_warn_on269 = alloca i32, align 4
  %tmp290 = alloca i64, align 8
  %__ret_warn_on319 = alloca i32, align 4
  %tmp336 = alloca i64, align 8
  %__ret_warn_on375 = alloca i32, align 4
  %tmp385 = alloca i64, align 8
  %__ret_warn_on397 = alloca i32, align 4
  %tmp423 = alloca i64, align 8
  %request = alloca %struct.regulatory_request, align 8
  store %struct.wiphy* %wiphy, %struct.wiphy** %wiphy.addr, align 8
  %0 = load %struct.wiphy*, %struct.wiphy** %wiphy.addr, align 8
  %call = call %struct.cfg80211_registered_device* @wiphy_to_dev(%struct.wiphy* %0)
  store %struct.cfg80211_registered_device* %call, %struct.cfg80211_registered_device** %rdev, align 8
  store i8 0, i8* %have_band, align 1
  %1 = load %struct.wiphy*, %struct.wiphy** %wiphy.addr, align 8
  %interface_modes = getelementptr inbounds %struct.wiphy, %struct.wiphy* %1, i32 0, i32 8
  %2 = load i16, i16* %interface_modes, align 16
  store i16 %2, i16* %ifmodes, align 2
  %3 = load %struct.wiphy*, %struct.wiphy** %wiphy.addr, align 8
  %wowlan = getelementptr inbounds %struct.wiphy, %struct.wiphy* %3, i32 0, i32 29
  %flags = getelementptr inbounds %struct.wiphy_wowlan_support, %struct.wiphy_wowlan_support* %wowlan, i32 0, i32 0
  %4 = load i32, i32* %flags, align 8
  %and = and i32 %4, 16
  %tobool = icmp ne i32 %and, 0
  br i1 %tobool, label %land.rhs, label %land.end

land.rhs:                                         ; preds = %entry
  %5 = load %struct.wiphy*, %struct.wiphy** %wiphy.addr, align 8
  %wowlan1 = getelementptr inbounds %struct.wiphy, %struct.wiphy* %5, i32 0, i32 29
  %flags2 = getelementptr inbounds %struct.wiphy_wowlan_support, %struct.wiphy_wowlan_support* %wowlan1, i32 0, i32 0
  %6 = load i32, i32* %flags2, align 8
  %and3 = and i32 %6, 8
  %tobool4 = icmp ne i32 %and3, 0
  %lnot = xor i1 %tobool4, true
  br label %land.end

land.end:                                         ; preds = %land.rhs, %entry
  %7 = phi i1 [ false, %entry ], [ %lnot, %land.rhs ]
  %lnot5 = xor i1 %7, true
  %lnot6 = xor i1 %lnot5, true
  %lnot.ext = zext i1 %lnot6 to i32
  store i32 %lnot.ext, i32* %__ret_warn_on, align 4
  %8 = load i32, i32* %__ret_warn_on, align 4
  %tobool7 = icmp ne i32 %8, 0
  %lnot8 = xor i1 %tobool7, true
  %lnot10 = xor i1 %lnot8, true
  %lnot.ext11 = zext i1 %lnot10 to i32
  %conv = sext i32 %lnot.ext11 to i64
  %tobool12 = icmp ne i64 %conv, 0
  br i1 %tobool12, label %if.then, label %if.end

if.then:                                          ; preds = %land.end
  call void @warn_slowpath_null(i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.3, i32 0, i32 0), i32 500)
  br label %if.end

if.end:                                           ; preds = %if.then, %land.end
  %9 = load i32, i32* %__ret_warn_on, align 4
  %tobool13 = icmp ne i32 %9, 0
  %lnot14 = xor i1 %tobool13, true
  %lnot16 = xor i1 %lnot14, true
  %lnot.ext17 = zext i1 %lnot16 to i32
  %conv18 = sext i32 %lnot.ext17 to i64
  store i64 %conv18, i64* %tmp, align 8
  %10 = load i64, i64* %tmp, align 8
  %tobool19 = icmp ne i64 %10, 0
  br i1 %tobool19, label %if.then20, label %if.end21

if.then20:                                        ; preds = %if.end
  store i32 -22, i32* %retval, align 4
  br label %return

if.end21:                                         ; preds = %if.end
  %11 = load %struct.wiphy*, %struct.wiphy** %wiphy.addr, align 8
  %ap_sme_capa = getelementptr inbounds %struct.wiphy, %struct.wiphy* %11, i32 0, i32 12
  %12 = load i32, i32* %ap_sme_capa, align 4
  %tobool23 = icmp ne i32 %12, 0
  br i1 %tobool23, label %land.rhs24, label %land.end30

land.rhs24:                                       ; preds = %if.end21
  %13 = load %struct.wiphy*, %struct.wiphy** %wiphy.addr, align 8
  %flags25 = getelementptr inbounds %struct.wiphy, %struct.wiphy* %13, i32 0, i32 10
  %14 = load i32, i32* %flags25, align 4
  %and26 = and i32 %14, 131072
  %tobool27 = icmp ne i32 %and26, 0
  %lnot28 = xor i1 %tobool27, true
  br label %land.end30

land.end30:                                       ; preds = %land.rhs24, %if.end21
  %15 = phi i1 [ false, %if.end21 ], [ %lnot28, %land.rhs24 ]
  %lnot31 = xor i1 %15, true
  %lnot33 = xor i1 %lnot31, true
  %lnot.ext34 = zext i1 %lnot33 to i32
  store i32 %lnot.ext34, i32* %__ret_warn_on22, align 4
  %16 = load i32, i32* %__ret_warn_on22, align 4
  %tobool35 = icmp ne i32 %16, 0
  %lnot36 = xor i1 %tobool35, true
  %lnot38 = xor i1 %lnot36, true
  %lnot.ext39 = zext i1 %lnot38 to i32
  %conv40 = sext i32 %lnot.ext39 to i64
  %tobool41 = icmp ne i64 %conv40, 0
  br i1 %tobool41, label %if.then42, label %if.end43

if.then42:                                        ; preds = %land.end30
  call void @warn_slowpath_null(i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.3, i32 0, i32 0), i32 505)
  br label %if.end43

if.end43:                                         ; preds = %if.then42, %land.end30
  %17 = load i32, i32* %__ret_warn_on22, align 4
  %tobool45 = icmp ne i32 %17, 0
  %lnot46 = xor i1 %tobool45, true
  %lnot48 = xor i1 %lnot46, true
  %lnot.ext49 = zext i1 %lnot48 to i32
  %conv50 = sext i32 %lnot.ext49 to i64
  store i64 %conv50, i64* %tmp44, align 8
  %18 = load i64, i64* %tmp44, align 8
  %tobool51 = icmp ne i64 %18, 0
  br i1 %tobool51, label %if.then52, label %if.end53

if.then52:                                        ; preds = %if.end43
  store i32 -22, i32* %retval, align 4
  br label %return

if.end53:                                         ; preds = %if.end43
  %19 = load %struct.wiphy*, %struct.wiphy** %wiphy.addr, align 8
  %addresses = getelementptr inbounds %struct.wiphy, %struct.wiphy* %19, i32 0, i32 2
  %20 = load %struct.mac_address*, %struct.mac_address** %addresses, align 16
  %tobool55 = icmp ne %struct.mac_address* %20, null
  br i1 %tobool55, label %land.rhs56, label %land.end60

land.rhs56:                                       ; preds = %if.end53
  %21 = load %struct.wiphy*, %struct.wiphy** %wiphy.addr, align 8
  %n_addresses = getelementptr inbounds %struct.wiphy, %struct.wiphy* %21, i32 0, i32 7
  %22 = load i16, i16* %n_addresses, align 2
  %tobool57 = icmp ne i16 %22, 0
  %lnot58 = xor i1 %tobool57, true
  br label %land.end60

land.end60:                                       ; preds = %land.rhs56, %if.end53
  %23 = phi i1 [ false, %if.end53 ], [ %lnot58, %land.rhs56 ]
  %lnot61 = xor i1 %23, true
  %lnot63 = xor i1 %lnot61, true
  %lnot.ext64 = zext i1 %lnot63 to i32
  store i32 %lnot.ext64, i32* %__ret_warn_on54, align 4
  %24 = load i32, i32* %__ret_warn_on54, align 4
  %tobool65 = icmp ne i32 %24, 0
  %lnot66 = xor i1 %tobool65, true
  %lnot68 = xor i1 %lnot66, true
  %lnot.ext69 = zext i1 %lnot68 to i32
  %conv70 = sext i32 %lnot.ext69 to i64
  %tobool71 = icmp ne i64 %conv70, 0
  br i1 %tobool71, label %if.then72, label %if.end73

if.then72:                                        ; preds = %land.end60
  call void @warn_slowpath_null(i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.3, i32 0, i32 0), i32 508)
  br label %if.end73

if.end73:                                         ; preds = %if.then72, %land.end60
  %25 = load i32, i32* %__ret_warn_on54, align 4
  %tobool75 = icmp ne i32 %25, 0
  %lnot76 = xor i1 %tobool75, true
  %lnot78 = xor i1 %lnot76, true
  %lnot.ext79 = zext i1 %lnot78 to i32
  %conv80 = sext i32 %lnot.ext79 to i64
  store i64 %conv80, i64* %tmp74, align 8
  %26 = load i64, i64* %tmp74, align 8
  %tobool81 = icmp ne i64 %26, 0
  br i1 %tobool81, label %if.then82, label %if.end83

if.then82:                                        ; preds = %if.end73
  store i32 -22, i32* %retval, align 4
  br label %return

if.end83:                                         ; preds = %if.end73
  %27 = load %struct.wiphy*, %struct.wiphy** %wiphy.addr, align 8
  %addresses85 = getelementptr inbounds %struct.wiphy, %struct.wiphy* %27, i32 0, i32 2
  %28 = load %struct.mac_address*, %struct.mac_address** %addresses85, align 16
  %tobool86 = icmp ne %struct.mac_address* %28, null
  br i1 %tobool86, label %land.lhs.true, label %land.end95

land.lhs.true:                                    ; preds = %if.end83
  %29 = load %struct.wiphy*, %struct.wiphy** %wiphy.addr, align 8
  %perm_addr = getelementptr inbounds %struct.wiphy, %struct.wiphy* %29, i32 0, i32 0
  %arraydecay = getelementptr inbounds [6 x i8], [6 x i8]* %perm_addr, i32 0, i32 0
  %call87 = call zeroext i1 @is_zero_ether_addr(i8* %arraydecay)
  br i1 %call87, label %land.end95, label %land.rhs88

land.rhs88:                                       ; preds = %land.lhs.true
  %30 = load %struct.wiphy*, %struct.wiphy** %wiphy.addr, align 8
  %perm_addr89 = getelementptr inbounds %struct.wiphy, %struct.wiphy* %30, i32 0, i32 0
  %arraydecay90 = getelementptr inbounds [6 x i8], [6 x i8]* %perm_addr89, i32 0, i32 0
  %31 = load %struct.wiphy*, %struct.wiphy** %wiphy.addr, align 8
  %addresses91 = getelementptr inbounds %struct.wiphy, %struct.wiphy* %31, i32 0, i32 2
  %32 = load %struct.mac_address*, %struct.mac_address** %addresses91, align 16
  %arrayidx = getelementptr inbounds %struct.mac_address, %struct.mac_address* %32, i64 0
  %addr = getelementptr inbounds %struct.mac_address, %struct.mac_address* %arrayidx, i32 0, i32 0
  %arraydecay92 = getelementptr inbounds [6 x i8], [6 x i8]* %addr, i32 0, i32 0
  %call93 = call i32 @memcmp(i8* %arraydecay90, i8* %arraydecay92, i64 6)
  %tobool94 = icmp ne i32 %call93, 0
  br label %land.end95

land.end95:                                       ; preds = %land.rhs88, %land.lhs.true, %if.end83
  %33 = phi i1 [ false, %land.lhs.true ], [ false, %if.end83 ], [ %tobool94, %land.rhs88 ]
  %lnot96 = xor i1 %33, true
  %lnot98 = xor i1 %lnot96, true
  %lnot.ext99 = zext i1 %lnot98 to i32
  store i32 %lnot.ext99, i32* %__ret_warn_on84, align 4
  %34 = load i32, i32* %__ret_warn_on84, align 4
  %tobool100 = icmp ne i32 %34, 0
  %lnot101 = xor i1 %tobool100, true
  %lnot103 = xor i1 %lnot101, true
  %lnot.ext104 = zext i1 %lnot103 to i32
  %conv105 = sext i32 %lnot.ext104 to i64
  %tobool106 = icmp ne i64 %conv105, 0
  br i1 %tobool106, label %if.then107, label %if.end108

if.then107:                                       ; preds = %land.end95
  call void @warn_slowpath_null(i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.3, i32 0, i32 0), i32 514)
  br label %if.end108

if.end108:                                        ; preds = %if.then107, %land.end95
  %35 = load i32, i32* %__ret_warn_on84, align 4
  %tobool110 = icmp ne i32 %35, 0
  %lnot111 = xor i1 %tobool110, true
  %lnot113 = xor i1 %lnot111, true
  %lnot.ext114 = zext i1 %lnot113 to i32
  %conv115 = sext i32 %lnot.ext114 to i64
  store i64 %conv115, i64* %tmp109, align 8
  %36 = load i64, i64* %tmp109, align 8
  %tobool116 = icmp ne i64 %36, 0
  br i1 %tobool116, label %if.then117, label %if.end118

if.then117:                                       ; preds = %if.end108
  store i32 -22, i32* %retval, align 4
  br label %return

if.end118:                                        ; preds = %if.end108
  %37 = load %struct.wiphy*, %struct.wiphy** %wiphy.addr, align 8
  %max_acl_mac_addrs = getelementptr inbounds %struct.wiphy, %struct.wiphy* %37, i32 0, i32 9
  %38 = load i16, i16* %max_acl_mac_addrs, align 2
  %conv120 = zext i16 %38 to i32
  %tobool121 = icmp ne i32 %conv120, 0
  br i1 %tobool121, label %land.rhs122, label %land.end129

land.rhs122:                                      ; preds = %if.end118
  %39 = load %struct.wiphy*, %struct.wiphy** %wiphy.addr, align 8
  %flags123 = getelementptr inbounds %struct.wiphy, %struct.wiphy* %39, i32 0, i32 10
  %40 = load i32, i32* %flags123, align 4
  %and124 = and i32 %40, 131072
  %tobool125 = icmp ne i32 %and124, 0
  br i1 %tobool125, label %lor.rhs, label %lor.end

lor.rhs:                                          ; preds = %land.rhs122
  %41 = load %struct.cfg80211_registered_device*, %struct.cfg80211_registered_device** %rdev, align 8
  %ops = getelementptr inbounds %struct.cfg80211_registered_device, %struct.cfg80211_registered_device* %41, i32 0, i32 0
  %42 = load %struct.cfg80211_ops*, %struct.cfg80211_ops** %ops, align 32
  %set_mac_acl = getelementptr inbounds %struct.cfg80211_ops, %struct.cfg80211_ops* %42, i32 0, i32 77
  %43 = load i32 (%struct.wiphy*, %struct.net_device*, %struct.cfg80211_acl_data*)*, i32 (%struct.wiphy*, %struct.net_device*, %struct.cfg80211_acl_data*)** %set_mac_acl, align 8
  %tobool126 = icmp ne i32 (%struct.wiphy*, %struct.net_device*, %struct.cfg80211_acl_data*)* %43, null
  %lnot127 = xor i1 %tobool126, true
  br label %lor.end

lor.end:                                          ; preds = %lor.rhs, %land.rhs122
  %44 = phi i1 [ true, %land.rhs122 ], [ %lnot127, %lor.rhs ]
  br label %land.end129

land.end129:                                      ; preds = %lor.end, %if.end118
  %45 = phi i1 [ false, %if.end118 ], [ %44, %lor.end ]
  %lnot130 = xor i1 %45, true
  %lnot132 = xor i1 %lnot130, true
  %lnot.ext133 = zext i1 %lnot132 to i32
  store i32 %lnot.ext133, i32* %__ret_warn_on119, align 4
  %46 = load i32, i32* %__ret_warn_on119, align 4
  %tobool134 = icmp ne i32 %46, 0
  %lnot135 = xor i1 %tobool134, true
  %lnot137 = xor i1 %lnot135, true
  %lnot.ext138 = zext i1 %lnot137 to i32
  %conv139 = sext i32 %lnot.ext138 to i64
  %tobool140 = icmp ne i64 %conv139, 0
  br i1 %tobool140, label %if.then141, label %if.end142

if.then141:                                       ; preds = %land.end129
  call void @warn_slowpath_null(i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.3, i32 0, i32 0), i32 519)
  br label %if.end142

if.end142:                                        ; preds = %if.then141, %land.end129
  %47 = load i32, i32* %__ret_warn_on119, align 4
  %tobool144 = icmp ne i32 %47, 0
  %lnot145 = xor i1 %tobool144, true
  %lnot147 = xor i1 %lnot145, true
  %lnot.ext148 = zext i1 %lnot147 to i32
  %conv149 = sext i32 %lnot.ext148 to i64
  store i64 %conv149, i64* %tmp143, align 8
  %48 = load i64, i64* %tmp143, align 8
  %tobool150 = icmp ne i64 %48, 0
  br i1 %tobool150, label %if.then151, label %if.end152

if.then151:                                       ; preds = %if.end142
  store i32 -22, i32* %retval, align 4
  br label %return

if.end152:                                        ; preds = %if.end142
  %49 = load %struct.wiphy*, %struct.wiphy** %wiphy.addr, align 8
  %addresses153 = getelementptr inbounds %struct.wiphy, %struct.wiphy* %49, i32 0, i32 2
  %50 = load %struct.mac_address*, %struct.mac_address** %addresses153, align 16
  %tobool154 = icmp ne %struct.mac_address* %50, null
  br i1 %tobool154, label %if.then155, label %if.end173

if.then155:                                       ; preds = %if.end152
  store i64 6, i64* %__len, align 8
  %51 = load i64, i64* %__len, align 8
  %cmp = icmp uge i64 %51, 64
  br i1 %cmp, label %if.then157, label %if.else

if.then157:                                       ; preds = %if.then155
  %52 = load %struct.wiphy*, %struct.wiphy** %wiphy.addr, align 8
  %perm_addr158 = getelementptr inbounds %struct.wiphy, %struct.wiphy* %52, i32 0, i32 0
  %arraydecay159 = getelementptr inbounds [6 x i8], [6 x i8]* %perm_addr158, i32 0, i32 0
  %53 = load %struct.wiphy*, %struct.wiphy** %wiphy.addr, align 8
  %addresses160 = getelementptr inbounds %struct.wiphy, %struct.wiphy* %53, i32 0, i32 2
  %54 = load %struct.mac_address*, %struct.mac_address** %addresses160, align 16
  %arrayidx161 = getelementptr inbounds %struct.mac_address, %struct.mac_address* %54, i64 0
  %addr162 = getelementptr inbounds %struct.mac_address, %struct.mac_address* %arrayidx161, i32 0, i32 0
  %arraydecay163 = getelementptr inbounds [6 x i8], [6 x i8]* %addr162, i32 0, i32 0
  %55 = load i64, i64* %__len, align 8
  %call164 = call i8* @__memcpy(i8* %arraydecay159, i8* %arraydecay163, i64 %55)
  store i8* %call164, i8** %__ret, align 8
  br label %if.end171

if.else:                                          ; preds = %if.then155
  %56 = load %struct.wiphy*, %struct.wiphy** %wiphy.addr, align 8
  %perm_addr165 = getelementptr inbounds %struct.wiphy, %struct.wiphy* %56, i32 0, i32 0
  %arraydecay166 = getelementptr inbounds [6 x i8], [6 x i8]* %perm_addr165, i32 0, i32 0
  %57 = load %struct.wiphy*, %struct.wiphy** %wiphy.addr, align 8
  %addresses167 = getelementptr inbounds %struct.wiphy, %struct.wiphy* %57, i32 0, i32 2
  %58 = load %struct.mac_address*, %struct.mac_address** %addresses167, align 16
  %arrayidx168 = getelementptr inbounds %struct.mac_address, %struct.mac_address* %58, i64 0
  %addr169 = getelementptr inbounds %struct.mac_address, %struct.mac_address* %arrayidx168, i32 0, i32 0
  %arraydecay170 = getelementptr inbounds [6 x i8], [6 x i8]* %addr169, i32 0, i32 0
  %59 = load i64, i64* %__len, align 8
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %arraydecay166, i8* %arraydecay170, i64 %59, i32 1, i1 false)
  store i8* %arraydecay166, i8** %__ret, align 8
  br label %if.end171

if.end171:                                        ; preds = %if.else, %if.then157
  %60 = load i8*, i8** %__ret, align 8
  store i8* %60, i8** %tmp172, align 8
  %61 = load i8*, i8** %tmp172, align 8
  br label %if.end173

if.end173:                                        ; preds = %if.end171, %if.end152
  %62 = load i16, i16* %ifmodes, align 2
  %tobool175 = icmp ne i16 %62, 0
  %lnot176 = xor i1 %tobool175, true
  %lnot178 = xor i1 %lnot176, true
  %lnot180 = xor i1 %lnot178, true
  %lnot.ext181 = zext i1 %lnot180 to i32
  store i32 %lnot.ext181, i32* %__ret_warn_on174, align 4
  %63 = load i32, i32* %__ret_warn_on174, align 4
  %tobool182 = icmp ne i32 %63, 0
  %lnot183 = xor i1 %tobool182, true
  %lnot185 = xor i1 %lnot183, true
  %lnot.ext186 = zext i1 %lnot185 to i32
  %conv187 = sext i32 %lnot.ext186 to i64
  %tobool188 = icmp ne i64 %conv187, 0
  br i1 %tobool188, label %if.then189, label %if.end190

if.then189:                                       ; preds = %if.end173
  call void @warn_slowpath_null(i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.3, i32 0, i32 0), i32 526)
  br label %if.end190

if.end190:                                        ; preds = %if.then189, %if.end173
  %64 = load i32, i32* %__ret_warn_on174, align 4
  %tobool192 = icmp ne i32 %64, 0
  %lnot193 = xor i1 %tobool192, true
  %lnot195 = xor i1 %lnot193, true
  %lnot.ext196 = zext i1 %lnot195 to i32
  %conv197 = sext i32 %lnot.ext196 to i64
  store i64 %conv197, i64* %tmp191, align 8
  %65 = load i64, i64* %tmp191, align 8
  %66 = load i16, i16* %ifmodes, align 2
  %conv198 = zext i16 %66 to i32
  %and199 = and i32 %conv198, 2046
  %conv200 = trunc i32 %and199 to i16
  store i16 %conv200, i16* %ifmodes, align 2
  %67 = load i16, i16* %ifmodes, align 2
  %conv202 = zext i16 %67 to i32
  %68 = load %struct.wiphy*, %struct.wiphy** %wiphy.addr, align 8
  %interface_modes203 = getelementptr inbounds %struct.wiphy, %struct.wiphy* %68, i32 0, i32 8
  %69 = load i16, i16* %interface_modes203, align 16
  %conv204 = zext i16 %69 to i32
  %cmp205 = icmp ne i32 %conv202, %conv204
  %lnot207 = xor i1 %cmp205, true
  %lnot209 = xor i1 %lnot207, true
  %lnot.ext210 = zext i1 %lnot209 to i32
  store i32 %lnot.ext210, i32* %__ret_warn_on201, align 4
  %70 = load i32, i32* %__ret_warn_on201, align 4
  %tobool211 = icmp ne i32 %70, 0
  %lnot212 = xor i1 %tobool211, true
  %lnot214 = xor i1 %lnot212, true
  %lnot.ext215 = zext i1 %lnot214 to i32
  %conv216 = sext i32 %lnot.ext215 to i64
  %tobool217 = icmp ne i64 %conv216, 0
  br i1 %tobool217, label %if.then218, label %if.end219

if.then218:                                       ; preds = %if.end190
  call void @warn_slowpath_null(i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.3, i32 0, i32 0), i32 528)
  br label %if.end219

if.end219:                                        ; preds = %if.then218, %if.end190
  %71 = load i32, i32* %__ret_warn_on201, align 4
  %tobool221 = icmp ne i32 %71, 0
  %lnot222 = xor i1 %tobool221, true
  %lnot224 = xor i1 %lnot222, true
  %lnot.ext225 = zext i1 %lnot224 to i32
  %conv226 = sext i32 %lnot.ext225 to i64
  store i64 %conv226, i64* %tmp220, align 8
  %72 = load i64, i64* %tmp220, align 8
  %tobool227 = icmp ne i64 %72, 0
  br i1 %tobool227, label %if.then228, label %if.end230

if.then228:                                       ; preds = %if.end219
  %73 = load i16, i16* %ifmodes, align 2
  %74 = load %struct.wiphy*, %struct.wiphy** %wiphy.addr, align 8
  %interface_modes229 = getelementptr inbounds %struct.wiphy, %struct.wiphy* %74, i32 0, i32 8
  store i16 %73, i16* %interface_modes229, align 16
  br label %if.end230

if.end230:                                        ; preds = %if.then228, %if.end219
  %75 = load %struct.wiphy*, %struct.wiphy** %wiphy.addr, align 8
  %call231 = call i32 @wiphy_verify_combinations(%struct.wiphy* %75)
  store i32 %call231, i32* %res, align 4
  %76 = load i32, i32* %res, align 4
  %tobool232 = icmp ne i32 %76, 0
  br i1 %tobool232, label %if.then233, label %if.end234

if.then233:                                       ; preds = %if.end230
  %77 = load i32, i32* %res, align 4
  store i32 %77, i32* %retval, align 4
  br label %return

if.end234:                                        ; preds = %if.end230
  store i32 0, i32* %band, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc370, %if.end234
  %78 = load i32, i32* %band, align 4
  %cmp235 = icmp ult i32 %78, 3
  br i1 %cmp235, label %for.body, label %for.end372

for.body:                                         ; preds = %for.cond
  %79 = load %struct.wiphy*, %struct.wiphy** %wiphy.addr, align 8
  %bands = getelementptr inbounds %struct.wiphy, %struct.wiphy* %79, i32 0, i32 39
  %80 = load i32, i32* %band, align 4
  %idxprom = zext i32 %80 to i64
  %arrayidx237 = getelementptr inbounds [3 x %struct.ieee80211_supported_band*], [3 x %struct.ieee80211_supported_band*]* %bands, i64 0, i64 %idxprom
  %81 = load %struct.ieee80211_supported_band*, %struct.ieee80211_supported_band** %arrayidx237, align 8
  store %struct.ieee80211_supported_band* %81, %struct.ieee80211_supported_band** %sband, align 8
  %82 = load %struct.ieee80211_supported_band*, %struct.ieee80211_supported_band** %sband, align 8
  %tobool238 = icmp ne %struct.ieee80211_supported_band* %82, null
  br i1 %tobool238, label %if.end240, label %if.then239

if.then239:                                       ; preds = %for.body
  br label %for.inc370

if.end240:                                        ; preds = %for.body
  %83 = load i32, i32* %band, align 4
  %84 = load %struct.ieee80211_supported_band*, %struct.ieee80211_supported_band** %sband, align 8
  %band241 = getelementptr inbounds %struct.ieee80211_supported_band, %struct.ieee80211_supported_band* %84, i32 0, i32 2
  store i32 %83, i32* %band241, align 8
  %85 = load %struct.ieee80211_supported_band*, %struct.ieee80211_supported_band** %sband, align 8
  %n_channels = getelementptr inbounds %struct.ieee80211_supported_band, %struct.ieee80211_supported_band* %85, i32 0, i32 3
  %86 = load i32, i32* %n_channels, align 4
  %tobool243 = icmp ne i32 %86, 0
  %lnot244 = xor i1 %tobool243, true
  %lnot246 = xor i1 %lnot244, true
  %lnot248 = xor i1 %lnot246, true
  %lnot.ext249 = zext i1 %lnot248 to i32
  store i32 %lnot.ext249, i32* %__ret_warn_on242, align 4
  %87 = load i32, i32* %__ret_warn_on242, align 4
  %tobool250 = icmp ne i32 %87, 0
  %lnot251 = xor i1 %tobool250, true
  %lnot253 = xor i1 %lnot251, true
  %lnot.ext254 = zext i1 %lnot253 to i32
  %conv255 = sext i32 %lnot.ext254 to i64
  %tobool256 = icmp ne i64 %conv255, 0
  br i1 %tobool256, label %if.then257, label %if.end258

if.then257:                                       ; preds = %if.end240
  call void @warn_slowpath_null(i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.3, i32 0, i32 0), i32 542)
  br label %if.end258

if.end258:                                        ; preds = %if.then257, %if.end240
  %88 = load i32, i32* %__ret_warn_on242, align 4
  %tobool260 = icmp ne i32 %88, 0
  %lnot261 = xor i1 %tobool260, true
  %lnot263 = xor i1 %lnot261, true
  %lnot.ext264 = zext i1 %lnot263 to i32
  %conv265 = sext i32 %lnot.ext264 to i64
  store i64 %conv265, i64* %tmp259, align 8
  %89 = load i64, i64* %tmp259, align 8
  %tobool266 = icmp ne i64 %89, 0
  br i1 %tobool266, label %if.then267, label %if.end268

if.then267:                                       ; preds = %if.end258
  store i32 -22, i32* %retval, align 4
  br label %return

if.end268:                                        ; preds = %if.end258
  %90 = load i32, i32* %band, align 4
  %cmp270 = icmp ne i32 %90, 2
  br i1 %cmp270, label %land.rhs272, label %land.end276

land.rhs272:                                      ; preds = %if.end268
  %91 = load %struct.ieee80211_supported_band*, %struct.ieee80211_supported_band** %sband, align 8
  %n_bitrates = getelementptr inbounds %struct.ieee80211_supported_band, %struct.ieee80211_supported_band* %91, i32 0, i32 4
  %92 = load i32, i32* %n_bitrates, align 8
  %tobool273 = icmp ne i32 %92, 0
  %lnot274 = xor i1 %tobool273, true
  br label %land.end276

land.end276:                                      ; preds = %land.rhs272, %if.end268
  %93 = phi i1 [ false, %if.end268 ], [ %lnot274, %land.rhs272 ]
  %lnot277 = xor i1 %93, true
  %lnot279 = xor i1 %lnot277, true
  %lnot.ext280 = zext i1 %lnot279 to i32
  store i32 %lnot.ext280, i32* %__ret_warn_on269, align 4
  %94 = load i32, i32* %__ret_warn_on269, align 4
  %tobool281 = icmp ne i32 %94, 0
  %lnot282 = xor i1 %tobool281, true
  %lnot284 = xor i1 %lnot282, true
  %lnot.ext285 = zext i1 %lnot284 to i32
  %conv286 = sext i32 %lnot.ext285 to i64
  %tobool287 = icmp ne i64 %conv286, 0
  br i1 %tobool287, label %if.then288, label %if.end289

if.then288:                                       ; preds = %land.end276
  call void @warn_slowpath_null(i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.3, i32 0, i32 0), i32 549)
  br label %if.end289

if.end289:                                        ; preds = %if.then288, %land.end276
  %95 = load i32, i32* %__ret_warn_on269, align 4
  %tobool291 = icmp ne i32 %95, 0
  %lnot292 = xor i1 %tobool291, true
  %lnot294 = xor i1 %lnot292, true
  %lnot.ext295 = zext i1 %lnot294 to i32
  %conv296 = sext i32 %lnot.ext295 to i64
  store i64 %conv296, i64* %tmp290, align 8
  %96 = load i64, i64* %tmp290, align 8
  %tobool297 = icmp ne i64 %96, 0
  br i1 %tobool297, label %if.then298, label %if.end299

if.then298:                                       ; preds = %if.end289
  store i32 -22, i32* %retval, align 4
  br label %return

if.end299:                                        ; preds = %if.end289
  %97 = load i8, i8* @cfg80211_disable_40mhz_24ghz, align 1
  %tobool300 = trunc i8 %97 to i1
  br i1 %tobool300, label %land.lhs.true302, label %if.end318

land.lhs.true302:                                 ; preds = %if.end299
  %98 = load i32, i32* %band, align 4
  %cmp303 = icmp eq i32 %98, 0
  br i1 %cmp303, label %land.lhs.true305, label %if.end318

land.lhs.true305:                                 ; preds = %land.lhs.true302
  %99 = load %struct.ieee80211_supported_band*, %struct.ieee80211_supported_band** %sband, align 8
  %ht_cap = getelementptr inbounds %struct.ieee80211_supported_band, %struct.ieee80211_supported_band* %99, i32 0, i32 5
  %ht_supported = getelementptr inbounds %struct.ieee80211_sta_ht_cap, %struct.ieee80211_sta_ht_cap* %ht_cap, i32 0, i32 1
  %100 = load i8, i8* %ht_supported, align 2
  %tobool306 = trunc i8 %100 to i1
  br i1 %tobool306, label %if.then308, label %if.end318

if.then308:                                       ; preds = %land.lhs.true305
  %101 = load %struct.ieee80211_supported_band*, %struct.ieee80211_supported_band** %sband, align 8
  %ht_cap309 = getelementptr inbounds %struct.ieee80211_supported_band, %struct.ieee80211_supported_band* %101, i32 0, i32 5
  %cap = getelementptr inbounds %struct.ieee80211_sta_ht_cap, %struct.ieee80211_sta_ht_cap* %ht_cap309, i32 0, i32 0
  %102 = load i16, i16* %cap, align 4
  %conv310 = zext i16 %102 to i32
  %and311 = and i32 %conv310, -3
  %conv312 = trunc i32 %and311 to i16
  store i16 %conv312, i16* %cap, align 4
  %103 = load %struct.ieee80211_supported_band*, %struct.ieee80211_supported_band** %sband, align 8
  %ht_cap313 = getelementptr inbounds %struct.ieee80211_supported_band, %struct.ieee80211_supported_band* %103, i32 0, i32 5
  %cap314 = getelementptr inbounds %struct.ieee80211_sta_ht_cap, %struct.ieee80211_sta_ht_cap* %ht_cap313, i32 0, i32 0
  %104 = load i16, i16* %cap314, align 4
  %conv315 = zext i16 %104 to i32
  %and316 = and i32 %conv315, -65
  %conv317 = trunc i32 %and316 to i16
  store i16 %conv317, i16* %cap314, align 4
  br label %if.end318

if.end318:                                        ; preds = %if.then308, %land.lhs.true305, %land.lhs.true302, %if.end299
  %105 = load %struct.ieee80211_supported_band*, %struct.ieee80211_supported_band** %sband, align 8
  %n_bitrates320 = getelementptr inbounds %struct.ieee80211_supported_band, %struct.ieee80211_supported_band* %105, i32 0, i32 4
  %106 = load i32, i32* %n_bitrates320, align 8
  %cmp321 = icmp sgt i32 %106, 32
  %lnot323 = xor i1 %cmp321, true
  %lnot325 = xor i1 %lnot323, true
  %lnot.ext326 = zext i1 %lnot325 to i32
  store i32 %lnot.ext326, i32* %__ret_warn_on319, align 4
  %107 = load i32, i32* %__ret_warn_on319, align 4
  %tobool327 = icmp ne i32 %107, 0
  %lnot328 = xor i1 %tobool327, true
  %lnot330 = xor i1 %lnot328, true
  %lnot.ext331 = zext i1 %lnot330 to i32
  %conv332 = sext i32 %lnot.ext331 to i64
  %tobool333 = icmp ne i64 %conv332, 0
  br i1 %tobool333, label %if.then334, label %if.end335

if.then334:                                       ; preds = %if.end318
  call void @warn_slowpath_null(i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.3, i32 0, i32 0), i32 569)
  br label %if.end335

if.end335:                                        ; preds = %if.then334, %if.end318
  %108 = load i32, i32* %__ret_warn_on319, align 4
  %tobool337 = icmp ne i32 %108, 0
  %lnot338 = xor i1 %tobool337, true
  %lnot340 = xor i1 %lnot338, true
  %lnot.ext341 = zext i1 %lnot340 to i32
  %conv342 = sext i32 %lnot.ext341 to i64
  store i64 %conv342, i64* %tmp336, align 8
  %109 = load i64, i64* %tmp336, align 8
  %tobool343 = icmp ne i64 %109, 0
  br i1 %tobool343, label %if.then344, label %if.end345

if.then344:                                       ; preds = %if.end335
  store i32 -22, i32* %retval, align 4
  br label %return

if.end345:                                        ; preds = %if.end335
  store i32 0, i32* %i, align 4
  br label %for.cond346

for.cond346:                                      ; preds = %for.inc, %if.end345
  %110 = load i32, i32* %i, align 4
  %111 = load %struct.ieee80211_supported_band*, %struct.ieee80211_supported_band** %sband, align 8
  %n_channels347 = getelementptr inbounds %struct.ieee80211_supported_band, %struct.ieee80211_supported_band* %111, i32 0, i32 3
  %112 = load i32, i32* %n_channels347, align 4
  %cmp348 = icmp slt i32 %110, %112
  br i1 %cmp348, label %for.body350, label %for.end

for.body350:                                      ; preds = %for.cond346
  %113 = load %struct.ieee80211_supported_band*, %struct.ieee80211_supported_band** %sband, align 8
  %channels = getelementptr inbounds %struct.ieee80211_supported_band, %struct.ieee80211_supported_band* %113, i32 0, i32 0
  %114 = load %struct.ieee80211_channel*, %struct.ieee80211_channel** %channels, align 8
  %115 = load i32, i32* %i, align 4
  %idxprom351 = sext i32 %115 to i64
  %arrayidx352 = getelementptr inbounds %struct.ieee80211_channel, %struct.ieee80211_channel* %114, i64 %idxprom351
  %flags353 = getelementptr inbounds %struct.ieee80211_channel, %struct.ieee80211_channel* %arrayidx352, i32 0, i32 3
  %116 = load i32, i32* %flags353, align 8
  %117 = load %struct.ieee80211_supported_band*, %struct.ieee80211_supported_band** %sband, align 8
  %channels354 = getelementptr inbounds %struct.ieee80211_supported_band, %struct.ieee80211_supported_band* %117, i32 0, i32 0
  %118 = load %struct.ieee80211_channel*, %struct.ieee80211_channel** %channels354, align 8
  %119 = load i32, i32* %i, align 4
  %idxprom355 = sext i32 %119 to i64
  %arrayidx356 = getelementptr inbounds %struct.ieee80211_channel, %struct.ieee80211_channel* %118, i64 %idxprom355
  %orig_flags = getelementptr inbounds %struct.ieee80211_channel, %struct.ieee80211_channel* %arrayidx356, i32 0, i32 8
  store i32 %116, i32* %orig_flags, align 4
  %120 = load %struct.ieee80211_supported_band*, %struct.ieee80211_supported_band** %sband, align 8
  %channels357 = getelementptr inbounds %struct.ieee80211_supported_band, %struct.ieee80211_supported_band* %120, i32 0, i32 0
  %121 = load %struct.ieee80211_channel*, %struct.ieee80211_channel** %channels357, align 8
  %122 = load i32, i32* %i, align 4
  %idxprom358 = sext i32 %122 to i64
  %arrayidx359 = getelementptr inbounds %struct.ieee80211_channel, %struct.ieee80211_channel* %121, i64 %idxprom358
  %orig_mag = getelementptr inbounds %struct.ieee80211_channel, %struct.ieee80211_channel* %arrayidx359, i32 0, i32 9
  store i32 2147483647, i32* %orig_mag, align 8
  %123 = load %struct.ieee80211_supported_band*, %struct.ieee80211_supported_band** %sband, align 8
  %channels360 = getelementptr inbounds %struct.ieee80211_supported_band, %struct.ieee80211_supported_band* %123, i32 0, i32 0
  %124 = load %struct.ieee80211_channel*, %struct.ieee80211_channel** %channels360, align 8
  %125 = load i32, i32* %i, align 4
  %idxprom361 = sext i32 %125 to i64
  %arrayidx362 = getelementptr inbounds %struct.ieee80211_channel, %struct.ieee80211_channel* %124, i64 %idxprom361
  %max_power = getelementptr inbounds %struct.ieee80211_channel, %struct.ieee80211_channel* %arrayidx362, i32 0, i32 5
  %126 = load i32, i32* %max_power, align 8
  %127 = load %struct.ieee80211_supported_band*, %struct.ieee80211_supported_band** %sband, align 8
  %channels363 = getelementptr inbounds %struct.ieee80211_supported_band, %struct.ieee80211_supported_band* %127, i32 0, i32 0
  %128 = load %struct.ieee80211_channel*, %struct.ieee80211_channel** %channels363, align 8
  %129 = load i32, i32* %i, align 4
  %idxprom364 = sext i32 %129 to i64
  %arrayidx365 = getelementptr inbounds %struct.ieee80211_channel, %struct.ieee80211_channel* %128, i64 %idxprom364
  %orig_mpwr = getelementptr inbounds %struct.ieee80211_channel, %struct.ieee80211_channel* %arrayidx365, i32 0, i32 10
  store i32 %126, i32* %orig_mpwr, align 4
  %130 = load i32, i32* %band, align 4
  %131 = load %struct.ieee80211_supported_band*, %struct.ieee80211_supported_band** %sband, align 8
  %channels366 = getelementptr inbounds %struct.ieee80211_supported_band, %struct.ieee80211_supported_band* %131, i32 0, i32 0
  %132 = load %struct.ieee80211_channel*, %struct.ieee80211_channel** %channels366, align 8
  %133 = load i32, i32* %i, align 4
  %idxprom367 = sext i32 %133 to i64
  %arrayidx368 = getelementptr inbounds %struct.ieee80211_channel, %struct.ieee80211_channel* %132, i64 %idxprom367
  %band369 = getelementptr inbounds %struct.ieee80211_channel, %struct.ieee80211_channel* %arrayidx368, i32 0, i32 0
  store i32 %130, i32* %band369, align 8
  br label %for.inc

for.inc:                                          ; preds = %for.body350
  %134 = load i32, i32* %i, align 4
  %inc = add nsw i32 %134, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond346

for.end:                                          ; preds = %for.cond346
  store i8 1, i8* %have_band, align 1
  br label %for.inc370

for.inc370:                                       ; preds = %for.end, %if.then239
  %135 = load i32, i32* %band, align 4
  %inc371 = add i32 %135, 1
  store i32 %inc371, i32* %band, align 4
  br label %for.cond

for.end372:                                       ; preds = %for.cond
  %136 = load i8, i8* %have_band, align 1
  %tobool373 = trunc i8 %136 to i1
  br i1 %tobool373, label %if.end392, label %if.then374

if.then374:                                       ; preds = %for.end372
  store i32 1, i32* %__ret_warn_on375, align 4
  %137 = load i32, i32* %__ret_warn_on375, align 4
  %tobool376 = icmp ne i32 %137, 0
  %lnot377 = xor i1 %tobool376, true
  %lnot379 = xor i1 %lnot377, true
  %lnot.ext380 = zext i1 %lnot379 to i32
  %conv381 = sext i32 %lnot.ext380 to i64
  %tobool382 = icmp ne i64 %conv381, 0
  br i1 %tobool382, label %if.then383, label %if.end384

if.then383:                                       ; preds = %if.then374
  call void @warn_slowpath_null(i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.3, i32 0, i32 0), i32 585)
  br label %if.end384

if.end384:                                        ; preds = %if.then383, %if.then374
  %138 = load i32, i32* %__ret_warn_on375, align 4
  %tobool386 = icmp ne i32 %138, 0
  %lnot387 = xor i1 %tobool386, true
  %lnot389 = xor i1 %lnot387, true
  %lnot.ext390 = zext i1 %lnot389 to i32
  %conv391 = sext i32 %lnot.ext390 to i64
  store i64 %conv391, i64* %tmp385, align 8
  %139 = load i64, i64* %tmp385, align 8
  store i32 -22, i32* %retval, align 4
  br label %return

if.end392:                                        ; preds = %for.end372
  %140 = load %struct.cfg80211_registered_device*, %struct.cfg80211_registered_device** %rdev, align 8
  %wiphy393 = getelementptr inbounds %struct.cfg80211_registered_device, %struct.cfg80211_registered_device* %140, i32 0, i32 34
  %wowlan394 = getelementptr inbounds %struct.wiphy, %struct.wiphy* %wiphy393, i32 0, i32 29
  %n_patterns = getelementptr inbounds %struct.wiphy_wowlan_support, %struct.wiphy_wowlan_support* %wowlan394, i32 0, i32 1
  %141 = load i32, i32* %n_patterns, align 4
  %tobool395 = icmp ne i32 %141, 0
  br i1 %tobool395, label %if.then396, label %if.end433

if.then396:                                       ; preds = %if.end392
  %142 = load %struct.cfg80211_registered_device*, %struct.cfg80211_registered_device** %rdev, align 8
  %wiphy398 = getelementptr inbounds %struct.cfg80211_registered_device, %struct.cfg80211_registered_device* %142, i32 0, i32 34
  %wowlan399 = getelementptr inbounds %struct.wiphy, %struct.wiphy* %wiphy398, i32 0, i32 29
  %pattern_min_len = getelementptr inbounds %struct.wiphy_wowlan_support, %struct.wiphy_wowlan_support* %wowlan399, i32 0, i32 3
  %143 = load i32, i32* %pattern_min_len, align 4
  %tobool400 = icmp ne i32 %143, 0
  br i1 %tobool400, label %lor.rhs401, label %lor.end409

lor.rhs401:                                       ; preds = %if.then396
  %144 = load %struct.cfg80211_registered_device*, %struct.cfg80211_registered_device** %rdev, align 8
  %wiphy402 = getelementptr inbounds %struct.cfg80211_registered_device, %struct.cfg80211_registered_device* %144, i32 0, i32 34
  %wowlan403 = getelementptr inbounds %struct.wiphy, %struct.wiphy* %wiphy402, i32 0, i32 29
  %pattern_min_len404 = getelementptr inbounds %struct.wiphy_wowlan_support, %struct.wiphy_wowlan_support* %wowlan403, i32 0, i32 3
  %145 = load i32, i32* %pattern_min_len404, align 4
  %146 = load %struct.cfg80211_registered_device*, %struct.cfg80211_registered_device** %rdev, align 8
  %wiphy405 = getelementptr inbounds %struct.cfg80211_registered_device, %struct.cfg80211_registered_device* %146, i32 0, i32 34
  %wowlan406 = getelementptr inbounds %struct.wiphy, %struct.wiphy* %wiphy405, i32 0, i32 29
  %pattern_max_len = getelementptr inbounds %struct.wiphy_wowlan_support, %struct.wiphy_wowlan_support* %wowlan406, i32 0, i32 2
  %147 = load i32, i32* %pattern_max_len, align 8
  %cmp407 = icmp sgt i32 %145, %147
  br label %lor.end409

lor.end409:                                       ; preds = %lor.rhs401, %if.then396
  %148 = phi i1 [ true, %if.then396 ], [ %cmp407, %lor.rhs401 ]
  %lnot410 = xor i1 %148, true
  %lnot412 = xor i1 %lnot410, true
  %lnot.ext413 = zext i1 %lnot412 to i32
  store i32 %lnot.ext413, i32* %__ret_warn_on397, align 4
  %149 = load i32, i32* %__ret_warn_on397, align 4
  %tobool414 = icmp ne i32 %149, 0
  %lnot415 = xor i1 %tobool414, true
  %lnot417 = xor i1 %lnot415, true
  %lnot.ext418 = zext i1 %lnot417 to i32
  %conv419 = sext i32 %lnot.ext418 to i64
  %tobool420 = icmp ne i64 %conv419, 0
  br i1 %tobool420, label %if.then421, label %if.end422

if.then421:                                       ; preds = %lor.end409
  call void @warn_slowpath_null(i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.3, i32 0, i32 0), i32 593)
  br label %if.end422

if.end422:                                        ; preds = %if.then421, %lor.end409
  %150 = load i32, i32* %__ret_warn_on397, align 4
  %tobool424 = icmp ne i32 %150, 0
  %lnot425 = xor i1 %tobool424, true
  %lnot427 = xor i1 %lnot425, true
  %lnot.ext428 = zext i1 %lnot427 to i32
  %conv429 = sext i32 %lnot.ext428 to i64
  store i64 %conv429, i64* %tmp423, align 8
  %151 = load i64, i64* %tmp423, align 8
  %tobool430 = icmp ne i64 %151, 0
  br i1 %tobool430, label %if.then431, label %if.end432

if.then431:                                       ; preds = %if.end422
  store i32 -22, i32* %retval, align 4
  br label %return

if.end432:                                        ; preds = %if.end422
  br label %if.end433

if.end433:                                        ; preds = %if.end432, %if.end392
  %152 = load %struct.wiphy*, %struct.wiphy** %wiphy.addr, align 8
  call void @ieee80211_set_bitrate_flags(%struct.wiphy* %152)
  call void @mutex_lock(%struct.mutex* @cfg80211_mutex)
  %153 = load %struct.cfg80211_registered_device*, %struct.cfg80211_registered_device** %rdev, align 8
  %wiphy434 = getelementptr inbounds %struct.cfg80211_registered_device, %struct.cfg80211_registered_device* %153, i32 0, i32 34
  %dev = getelementptr inbounds %struct.wiphy, %struct.wiphy* %wiphy434, i32 0, i32 42
  %call435 = call i32 @device_add(%struct.device* %dev)
  store i32 %call435, i32* %res, align 4
  %154 = load i32, i32* %res, align 4
  %tobool436 = icmp ne i32 %154, 0
  br i1 %tobool436, label %if.then437, label %if.end438

if.then437:                                       ; preds = %if.end433
  call void @mutex_unlock(%struct.mutex* @cfg80211_mutex)
  %155 = load i32, i32* %res, align 4
  store i32 %155, i32* %retval, align 4
  br label %return

if.end438:                                        ; preds = %if.end433
  %156 = load %struct.wiphy*, %struct.wiphy** %wiphy.addr, align 8
  call void @wiphy_regulatory_register(%struct.wiphy* %156)
  %157 = load %struct.cfg80211_registered_device*, %struct.cfg80211_registered_device** %rdev, align 8
  %list = getelementptr inbounds %struct.cfg80211_registered_device, %struct.cfg80211_registered_device* %157, i32 0, i32 1
  call void @list_add_rcu(%struct.list_head* %list, %struct.list_head* @cfg80211_rdev_list)
  %158 = load i32, i32* @cfg80211_rdev_list_generation, align 4
  %inc439 = add nsw i32 %158, 1
  store i32 %inc439, i32* @cfg80211_rdev_list_generation, align 4
  %159 = load %struct.cfg80211_registered_device*, %struct.cfg80211_registered_device** %rdev, align 8
  %wiphy440 = getelementptr inbounds %struct.cfg80211_registered_device, %struct.cfg80211_registered_device* %159, i32 0, i32 34
  %call441 = call i8* @wiphy_name(%struct.wiphy* %wiphy440)
  %160 = load %struct.dentry*, %struct.dentry** @ieee80211_debugfs_dir, align 8
  %call442 = call %struct.dentry* @debugfs_create_dir(i8* %call441, %struct.dentry* %160)
  %161 = load %struct.cfg80211_registered_device*, %struct.cfg80211_registered_device** %rdev, align 8
  %wiphy443 = getelementptr inbounds %struct.cfg80211_registered_device, %struct.cfg80211_registered_device* %161, i32 0, i32 34
  %debugfsdir = getelementptr inbounds %struct.wiphy, %struct.wiphy* %wiphy443, i32 0, i32 44
  store %struct.dentry* %call442, %struct.dentry** %debugfsdir, align 16
  %162 = load %struct.cfg80211_registered_device*, %struct.cfg80211_registered_device** %rdev, align 8
  %wiphy444 = getelementptr inbounds %struct.cfg80211_registered_device, %struct.cfg80211_registered_device* %162, i32 0, i32 34
  %debugfsdir445 = getelementptr inbounds %struct.wiphy, %struct.wiphy* %wiphy444, i32 0, i32 44
  %163 = load %struct.dentry*, %struct.dentry** %debugfsdir445, align 16
  %164 = bitcast %struct.dentry* %163 to i8*
  %call446 = call i64 @IS_ERR(i8* %164)
  %tobool447 = icmp ne i64 %call446, 0
  br i1 %tobool447, label %if.then448, label %if.end451

if.then448:                                       ; preds = %if.end438
  %165 = load %struct.cfg80211_registered_device*, %struct.cfg80211_registered_device** %rdev, align 8
  %wiphy449 = getelementptr inbounds %struct.cfg80211_registered_device, %struct.cfg80211_registered_device* %165, i32 0, i32 34
  %debugfsdir450 = getelementptr inbounds %struct.wiphy, %struct.wiphy* %wiphy449, i32 0, i32 44
  store %struct.dentry* null, %struct.dentry** %debugfsdir450, align 16
  br label %if.end451

if.end451:                                        ; preds = %if.then448, %if.end438
  %166 = load %struct.wiphy*, %struct.wiphy** %wiphy.addr, align 8
  %flags452 = getelementptr inbounds %struct.wiphy, %struct.wiphy* %166, i32 0, i32 10
  %167 = load i32, i32* %flags452, align 4
  %and453 = and i32 %167, 1
  %tobool454 = icmp ne i32 %and453, 0
  br i1 %tobool454, label %if.then455, label %if.end460

if.then455:                                       ; preds = %if.end451
  %168 = load %struct.wiphy*, %struct.wiphy** %wiphy.addr, align 8
  %call456 = call i32 @get_wiphy_idx(%struct.wiphy* %168)
  %wiphy_idx = getelementptr inbounds %struct.regulatory_request, %struct.regulatory_request* %request, i32 0, i32 1
  store i32 %call456, i32* %wiphy_idx, align 8
  %initiator = getelementptr inbounds %struct.regulatory_request, %struct.regulatory_request* %request, i32 0, i32 2
  store i32 2, i32* %initiator, align 4
  %alpha2 = getelementptr inbounds %struct.regulatory_request, %struct.regulatory_request* %request, i32 0, i32 4
  %arrayidx457 = getelementptr inbounds [2 x i8], [2 x i8]* %alpha2, i64 0, i64 0
  store i8 57, i8* %arrayidx457, align 4
  %alpha2458 = getelementptr inbounds %struct.regulatory_request, %struct.regulatory_request* %request, i32 0, i32 4
  %arrayidx459 = getelementptr inbounds [2 x i8], [2 x i8]* %alpha2458, i64 0, i64 1
  store i8 57, i8* %arrayidx459, align 1
  call void @nl80211_send_reg_change_event(%struct.regulatory_request* %request)
  br label %if.end460

if.end460:                                        ; preds = %if.then455, %if.end451
  %169 = load %struct.cfg80211_registered_device*, %struct.cfg80211_registered_device** %rdev, align 8
  call void @cfg80211_debugfs_rdev_add(%struct.cfg80211_registered_device* %169)
  call void @mutex_unlock(%struct.mutex* @cfg80211_mutex)
  %170 = load %struct.cfg80211_registered_device*, %struct.cfg80211_registered_device** %rdev, align 8
  %rfkill = getelementptr inbounds %struct.cfg80211_registered_device, %struct.cfg80211_registered_device* %170, i32 0, i32 4
  %171 = load %struct.rfkill*, %struct.rfkill** %rfkill, align 8
  %call461 = call i32 @rfkill_register(%struct.rfkill* %171)
  store i32 %call461, i32* %res, align 4
  %172 = load i32, i32* %res, align 4
  %tobool462 = icmp ne i32 %172, 0
  br i1 %tobool462, label %if.then463, label %if.end469

if.then463:                                       ; preds = %if.end460
  %173 = load %struct.cfg80211_registered_device*, %struct.cfg80211_registered_device** %rdev, align 8
  %wiphy464 = getelementptr inbounds %struct.cfg80211_registered_device, %struct.cfg80211_registered_device* %173, i32 0, i32 34
  %dev465 = getelementptr inbounds %struct.wiphy, %struct.wiphy* %wiphy464, i32 0, i32 42
  call void @device_del(%struct.device* %dev465)
  call void @mutex_lock(%struct.mutex* @cfg80211_mutex)
  %174 = load %struct.cfg80211_registered_device*, %struct.cfg80211_registered_device** %rdev, align 8
  %wiphy466 = getelementptr inbounds %struct.cfg80211_registered_device, %struct.cfg80211_registered_device* %174, i32 0, i32 34
  %debugfsdir467 = getelementptr inbounds %struct.wiphy, %struct.wiphy* %wiphy466, i32 0, i32 44
  %175 = load %struct.dentry*, %struct.dentry** %debugfsdir467, align 16
  call void @debugfs_remove_recursive(%struct.dentry* %175)
  %176 = load %struct.cfg80211_registered_device*, %struct.cfg80211_registered_device** %rdev, align 8
  %list468 = getelementptr inbounds %struct.cfg80211_registered_device, %struct.cfg80211_registered_device* %176, i32 0, i32 1
  call void @list_del_rcu(%struct.list_head* %list468)
  %177 = load %struct.wiphy*, %struct.wiphy** %wiphy.addr, align 8
  call void @wiphy_regulatory_deregister(%struct.wiphy* %177)
  call void @mutex_unlock(%struct.mutex* @cfg80211_mutex)
  %178 = load i32, i32* %res, align 4
  store i32 %178, i32* %retval, align 4
  br label %return

if.end469:                                        ; preds = %if.end460
  call void @rtnl_lock()
  %179 = load %struct.cfg80211_registered_device*, %struct.cfg80211_registered_device** %rdev, align 8
  %wiphy470 = getelementptr inbounds %struct.cfg80211_registered_device, %struct.cfg80211_registered_device* %179, i32 0, i32 34
  %registered = getelementptr inbounds %struct.wiphy, %struct.wiphy* %wiphy470, i32 0, i32 43
  store i8 1, i8* %registered, align 8
  call void @rtnl_unlock()
  store i32 0, i32* %retval, align 4
  br label %return

return:                                           ; preds = %if.end469, %if.then463, %if.then437, %if.then431, %if.end384, %if.then344, %if.then298, %if.then267, %if.then233, %if.then151, %if.then117, %if.then82, %if.then52, %if.then20
  %180 = load i32, i32* %retval, align 4
  ret i32 %180
}

; Function Attrs: noinline nounwind optnone uwtable
define internal zeroext i1 @is_zero_ether_addr(i8* %addr) #0 {
entry:
  %addr.addr = alloca i8*, align 8
  store i8* %addr, i8** %addr.addr, align 8
  %0 = load i8*, i8** %addr.addr, align 8
  %arrayidx = getelementptr inbounds i8, i8* %0, i64 0
  %1 = load i8, i8* %arrayidx, align 1
  %conv = zext i8 %1 to i32
  %2 = load i8*, i8** %addr.addr, align 8
  %arrayidx1 = getelementptr inbounds i8, i8* %2, i64 1
  %3 = load i8, i8* %arrayidx1, align 1
  %conv2 = zext i8 %3 to i32
  %or = or i32 %conv, %conv2
  %4 = load i8*, i8** %addr.addr, align 8
  %arrayidx3 = getelementptr inbounds i8, i8* %4, i64 2
  %5 = load i8, i8* %arrayidx3, align 1
  %conv4 = zext i8 %5 to i32
  %or5 = or i32 %or, %conv4
  %6 = load i8*, i8** %addr.addr, align 8
  %arrayidx6 = getelementptr inbounds i8, i8* %6, i64 3
  %7 = load i8, i8* %arrayidx6, align 1
  %conv7 = zext i8 %7 to i32
  %or8 = or i32 %or5, %conv7
  %8 = load i8*, i8** %addr.addr, align 8
  %arrayidx9 = getelementptr inbounds i8, i8* %8, i64 4
  %9 = load i8, i8* %arrayidx9, align 1
  %conv10 = zext i8 %9 to i32
  %or11 = or i32 %or8, %conv10
  %10 = load i8*, i8** %addr.addr, align 8
  %arrayidx12 = getelementptr inbounds i8, i8* %10, i64 5
  %11 = load i8, i8* %arrayidx12, align 1
  %conv13 = zext i8 %11 to i32
  %or14 = or i32 %or11, %conv13
  %tobool = icmp ne i32 %or14, 0
  %lnot = xor i1 %tobool, true
  ret i1 %lnot
}

declare i32 @memcmp(i8*, i8*, i64) #1

declare i8* @__memcpy(i8*, i8*, i64) #1

; Function Attrs: noinline nounwind optnone uwtable
define internal i32 @wiphy_verify_combinations(%struct.wiphy* %wiphy) #0 {
entry:
  %retval = alloca i32, align 4
  %wiphy.addr = alloca %struct.wiphy*, align 8
  %c = alloca %struct.ieee80211_iface_combination*, align 8
  %i = alloca i32, align 4
  %j = alloca i32, align 4
  %cnt = alloca i32, align 4
  %all_iftypes = alloca i16, align 2
  %__ret_warn_on = alloca i32, align 4
  %tmp = alloca i64, align 8
  %__ret_warn_on21 = alloca i32, align 4
  %tmp38 = alloca i64, align 8
  %__ret_warn_on48 = alloca i32, align 4
  %tmp65 = alloca i64, align 8
  %__ret_warn_on75 = alloca i32, align 4
  %tmp97 = alloca i64, align 8
  %__ret_warn_on107 = alloca i32, align 4
  %tmp124 = alloca i64, align 8
  %types = alloca i16, align 2
  %__ret_warn_on143 = alloca i32, align 4
  %tmp160 = alloca i64, align 8
  %__ret_warn_on173 = alloca i32, align 4
  %tmp193 = alloca i64, align 8
  %__ret_warn_on203 = alloca i32, align 4
  %tmp221 = alloca i64, align 8
  %__ret_warn_on231 = alloca i32, align 4
  %tmp257 = alloca i64, align 8
  %__ret_warn_on272 = alloca i32, align 4
  %tmp292 = alloca i64, align 8
  %__ret_warn_on302 = alloca i32, align 4
  %tmp320 = alloca i64, align 8
  store %struct.wiphy* %wiphy, %struct.wiphy** %wiphy.addr, align 8
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc330, %entry
  %0 = load i32, i32* %i, align 4
  %1 = load %struct.wiphy*, %struct.wiphy** %wiphy.addr, align 8
  %n_iface_combinations = getelementptr inbounds %struct.wiphy, %struct.wiphy* %1, i32 0, i32 5
  %2 = load i32, i32* %n_iface_combinations, align 8
  %cmp = icmp slt i32 %0, %2
  br i1 %cmp, label %for.body, label %for.end332

for.body:                                         ; preds = %for.cond
  store i32 0, i32* %cnt, align 4
  store i16 0, i16* %all_iftypes, align 2
  %3 = load %struct.wiphy*, %struct.wiphy** %wiphy.addr, align 8
  %iface_combinations = getelementptr inbounds %struct.wiphy, %struct.wiphy* %3, i32 0, i32 4
  %4 = load %struct.ieee80211_iface_combination*, %struct.ieee80211_iface_combination** %iface_combinations, align 32
  %5 = load i32, i32* %i, align 4
  %idxprom = sext i32 %5 to i64
  %arrayidx = getelementptr inbounds %struct.ieee80211_iface_combination, %struct.ieee80211_iface_combination* %4, i64 %idxprom
  store %struct.ieee80211_iface_combination* %arrayidx, %struct.ieee80211_iface_combination** %c, align 8
  %6 = load %struct.ieee80211_iface_combination*, %struct.ieee80211_iface_combination** %c, align 8
  %max_interfaces = getelementptr inbounds %struct.ieee80211_iface_combination, %struct.ieee80211_iface_combination* %6, i32 0, i32 2
  %7 = load i16, i16* %max_interfaces, align 4
  %conv = zext i16 %7 to i32
  %cmp1 = icmp slt i32 %conv, 2
  br i1 %cmp1, label %land.rhs, label %land.end

land.rhs:                                         ; preds = %for.body
  %8 = load %struct.ieee80211_iface_combination*, %struct.ieee80211_iface_combination** %c, align 8
  %radar_detect_widths = getelementptr inbounds %struct.ieee80211_iface_combination, %struct.ieee80211_iface_combination* %8, i32 0, i32 5
  %9 = load i8, i8* %radar_detect_widths, align 8
  %tobool = icmp ne i8 %9, 0
  %lnot = xor i1 %tobool, true
  br label %land.end

land.end:                                         ; preds = %land.rhs, %for.body
  %10 = phi i1 [ false, %for.body ], [ %lnot, %land.rhs ]
  %lnot3 = xor i1 %10, true
  %lnot4 = xor i1 %lnot3, true
  %lnot.ext = zext i1 %lnot4 to i32
  store i32 %lnot.ext, i32* %__ret_warn_on, align 4
  %11 = load i32, i32* %__ret_warn_on, align 4
  %tobool5 = icmp ne i32 %11, 0
  %lnot6 = xor i1 %tobool5, true
  %lnot8 = xor i1 %lnot6, true
  %lnot.ext9 = zext i1 %lnot8 to i32
  %conv10 = sext i32 %lnot.ext9 to i64
  %tobool11 = icmp ne i64 %conv10, 0
  br i1 %tobool11, label %if.then, label %if.end

if.then:                                          ; preds = %land.end
  call void @warn_slowpath_null(i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.3, i32 0, i32 0), i32 425)
  br label %if.end

if.end:                                           ; preds = %if.then, %land.end
  %12 = load i32, i32* %__ret_warn_on, align 4
  %tobool12 = icmp ne i32 %12, 0
  %lnot13 = xor i1 %tobool12, true
  %lnot15 = xor i1 %lnot13, true
  %lnot.ext16 = zext i1 %lnot15 to i32
  %conv17 = sext i32 %lnot.ext16 to i64
  store i64 %conv17, i64* %tmp, align 8
  %13 = load i64, i64* %tmp, align 8
  %tobool18 = icmp ne i64 %13, 0
  br i1 %tobool18, label %if.then19, label %if.end20

if.then19:                                        ; preds = %if.end
  store i32 -22, i32* %retval, align 4
  br label %return

if.end20:                                         ; preds = %if.end
  %14 = load %struct.ieee80211_iface_combination*, %struct.ieee80211_iface_combination** %c, align 8
  %num_different_channels = getelementptr inbounds %struct.ieee80211_iface_combination, %struct.ieee80211_iface_combination* %14, i32 0, i32 1
  %15 = load i32, i32* %num_different_channels, align 8
  %tobool22 = icmp ne i32 %15, 0
  %lnot23 = xor i1 %tobool22, true
  %lnot25 = xor i1 %lnot23, true
  %lnot27 = xor i1 %lnot25, true
  %lnot.ext28 = zext i1 %lnot27 to i32
  store i32 %lnot.ext28, i32* %__ret_warn_on21, align 4
  %16 = load i32, i32* %__ret_warn_on21, align 4
  %tobool29 = icmp ne i32 %16, 0
  %lnot30 = xor i1 %tobool29, true
  %lnot32 = xor i1 %lnot30, true
  %lnot.ext33 = zext i1 %lnot32 to i32
  %conv34 = sext i32 %lnot.ext33 to i64
  %tobool35 = icmp ne i64 %conv34, 0
  br i1 %tobool35, label %if.then36, label %if.end37

if.then36:                                        ; preds = %if.end20
  call void @warn_slowpath_null(i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.3, i32 0, i32 0), i32 429)
  br label %if.end37

if.end37:                                         ; preds = %if.then36, %if.end20
  %17 = load i32, i32* %__ret_warn_on21, align 4
  %tobool39 = icmp ne i32 %17, 0
  %lnot40 = xor i1 %tobool39, true
  %lnot42 = xor i1 %lnot40, true
  %lnot.ext43 = zext i1 %lnot42 to i32
  %conv44 = sext i32 %lnot.ext43 to i64
  store i64 %conv44, i64* %tmp38, align 8
  %18 = load i64, i64* %tmp38, align 8
  %tobool45 = icmp ne i64 %18, 0
  br i1 %tobool45, label %if.then46, label %if.end47

if.then46:                                        ; preds = %if.end37
  store i32 -22, i32* %retval, align 4
  br label %return

if.end47:                                         ; preds = %if.end37
  %19 = load %struct.ieee80211_iface_combination*, %struct.ieee80211_iface_combination** %c, align 8
  %num_different_channels49 = getelementptr inbounds %struct.ieee80211_iface_combination, %struct.ieee80211_iface_combination* %19, i32 0, i32 1
  %20 = load i32, i32* %num_different_channels49, align 8
  %cmp50 = icmp ugt i32 %20, 10
  %lnot52 = xor i1 %cmp50, true
  %lnot54 = xor i1 %lnot52, true
  %lnot.ext55 = zext i1 %lnot54 to i32
  store i32 %lnot.ext55, i32* %__ret_warn_on48, align 4
  %21 = load i32, i32* %__ret_warn_on48, align 4
  %tobool56 = icmp ne i32 %21, 0
  %lnot57 = xor i1 %tobool56, true
  %lnot59 = xor i1 %lnot57, true
  %lnot.ext60 = zext i1 %lnot59 to i32
  %conv61 = sext i32 %lnot.ext60 to i64
  %tobool62 = icmp ne i64 %conv61, 0
  br i1 %tobool62, label %if.then63, label %if.end64

if.then63:                                        ; preds = %if.end47
  call void @warn_slowpath_null(i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.3, i32 0, i32 0), i32 437)
  br label %if.end64

if.end64:                                         ; preds = %if.then63, %if.end47
  %22 = load i32, i32* %__ret_warn_on48, align 4
  %tobool66 = icmp ne i32 %22, 0
  %lnot67 = xor i1 %tobool66, true
  %lnot69 = xor i1 %lnot67, true
  %lnot.ext70 = zext i1 %lnot69 to i32
  %conv71 = sext i32 %lnot.ext70 to i64
  store i64 %conv71, i64* %tmp65, align 8
  %23 = load i64, i64* %tmp65, align 8
  %tobool72 = icmp ne i64 %23, 0
  br i1 %tobool72, label %if.then73, label %if.end74

if.then73:                                        ; preds = %if.end64
  store i32 -22, i32* %retval, align 4
  br label %return

if.end74:                                         ; preds = %if.end64
  %24 = load %struct.ieee80211_iface_combination*, %struct.ieee80211_iface_combination** %c, align 8
  %radar_detect_widths76 = getelementptr inbounds %struct.ieee80211_iface_combination, %struct.ieee80211_iface_combination* %24, i32 0, i32 5
  %25 = load i8, i8* %radar_detect_widths76, align 8
  %conv77 = zext i8 %25 to i32
  %tobool78 = icmp ne i32 %conv77, 0
  br i1 %tobool78, label %land.rhs79, label %land.end83

land.rhs79:                                       ; preds = %if.end74
  %26 = load %struct.ieee80211_iface_combination*, %struct.ieee80211_iface_combination** %c, align 8
  %num_different_channels80 = getelementptr inbounds %struct.ieee80211_iface_combination, %struct.ieee80211_iface_combination* %26, i32 0, i32 1
  %27 = load i32, i32* %num_different_channels80, align 8
  %cmp81 = icmp ugt i32 %27, 1
  br label %land.end83

land.end83:                                       ; preds = %land.rhs79, %if.end74
  %28 = phi i1 [ false, %if.end74 ], [ %cmp81, %land.rhs79 ]
  %lnot84 = xor i1 %28, true
  %lnot86 = xor i1 %lnot84, true
  %lnot.ext87 = zext i1 %lnot86 to i32
  store i32 %lnot.ext87, i32* %__ret_warn_on75, align 4
  %29 = load i32, i32* %__ret_warn_on75, align 4
  %tobool88 = icmp ne i32 %29, 0
  %lnot89 = xor i1 %tobool88, true
  %lnot91 = xor i1 %lnot89, true
  %lnot.ext92 = zext i1 %lnot91 to i32
  %conv93 = sext i32 %lnot.ext92 to i64
  %tobool94 = icmp ne i64 %conv93, 0
  br i1 %tobool94, label %if.then95, label %if.end96

if.then95:                                        ; preds = %land.end83
  call void @warn_slowpath_null(i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.3, i32 0, i32 0), i32 442)
  br label %if.end96

if.end96:                                         ; preds = %if.then95, %land.end83
  %30 = load i32, i32* %__ret_warn_on75, align 4
  %tobool98 = icmp ne i32 %30, 0
  %lnot99 = xor i1 %tobool98, true
  %lnot101 = xor i1 %lnot99, true
  %lnot.ext102 = zext i1 %lnot101 to i32
  %conv103 = sext i32 %lnot.ext102 to i64
  store i64 %conv103, i64* %tmp97, align 8
  %31 = load i64, i64* %tmp97, align 8
  %tobool104 = icmp ne i64 %31, 0
  br i1 %tobool104, label %if.then105, label %if.end106

if.then105:                                       ; preds = %if.end96
  store i32 -22, i32* %retval, align 4
  br label %return

if.end106:                                        ; preds = %if.end96
  %32 = load %struct.ieee80211_iface_combination*, %struct.ieee80211_iface_combination** %c, align 8
  %n_limits = getelementptr inbounds %struct.ieee80211_iface_combination, %struct.ieee80211_iface_combination* %32, i32 0, i32 3
  %33 = load i8, i8* %n_limits, align 2
  %tobool108 = icmp ne i8 %33, 0
  %lnot109 = xor i1 %tobool108, true
  %lnot111 = xor i1 %lnot109, true
  %lnot113 = xor i1 %lnot111, true
  %lnot.ext114 = zext i1 %lnot113 to i32
  store i32 %lnot.ext114, i32* %__ret_warn_on107, align 4
  %34 = load i32, i32* %__ret_warn_on107, align 4
  %tobool115 = icmp ne i32 %34, 0
  %lnot116 = xor i1 %tobool115, true
  %lnot118 = xor i1 %lnot116, true
  %lnot.ext119 = zext i1 %lnot118 to i32
  %conv120 = sext i32 %lnot.ext119 to i64
  %tobool121 = icmp ne i64 %conv120, 0
  br i1 %tobool121, label %if.then122, label %if.end123

if.then122:                                       ; preds = %if.end106
  call void @warn_slowpath_null(i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.3, i32 0, i32 0), i32 445)
  br label %if.end123

if.end123:                                        ; preds = %if.then122, %if.end106
  %35 = load i32, i32* %__ret_warn_on107, align 4
  %tobool125 = icmp ne i32 %35, 0
  %lnot126 = xor i1 %tobool125, true
  %lnot128 = xor i1 %lnot126, true
  %lnot.ext129 = zext i1 %lnot128 to i32
  %conv130 = sext i32 %lnot.ext129 to i64
  store i64 %conv130, i64* %tmp124, align 8
  %36 = load i64, i64* %tmp124, align 8
  %tobool131 = icmp ne i64 %36, 0
  br i1 %tobool131, label %if.then132, label %if.end133

if.then132:                                       ; preds = %if.end123
  store i32 -22, i32* %retval, align 4
  br label %return

if.end133:                                        ; preds = %if.end123
  store i32 0, i32* %j, align 4
  br label %for.cond134

for.cond134:                                      ; preds = %for.inc, %if.end133
  %37 = load i32, i32* %j, align 4
  %38 = load %struct.ieee80211_iface_combination*, %struct.ieee80211_iface_combination** %c, align 8
  %n_limits135 = getelementptr inbounds %struct.ieee80211_iface_combination, %struct.ieee80211_iface_combination* %38, i32 0, i32 3
  %39 = load i8, i8* %n_limits135, align 2
  %conv136 = zext i8 %39 to i32
  %cmp137 = icmp slt i32 %37, %conv136
  br i1 %cmp137, label %for.body139, label %for.end

for.body139:                                      ; preds = %for.cond134
  %40 = load %struct.ieee80211_iface_combination*, %struct.ieee80211_iface_combination** %c, align 8
  %limits = getelementptr inbounds %struct.ieee80211_iface_combination, %struct.ieee80211_iface_combination* %40, i32 0, i32 0
  %41 = load %struct.ieee80211_iface_limit*, %struct.ieee80211_iface_limit** %limits, align 8
  %42 = load i32, i32* %j, align 4
  %idxprom140 = sext i32 %42 to i64
  %arrayidx141 = getelementptr inbounds %struct.ieee80211_iface_limit, %struct.ieee80211_iface_limit* %41, i64 %idxprom140
  %types142 = getelementptr inbounds %struct.ieee80211_iface_limit, %struct.ieee80211_iface_limit* %arrayidx141, i32 0, i32 1
  %43 = load i16, i16* %types142, align 2
  store i16 %43, i16* %types, align 2
  %44 = load i16, i16* %types, align 2
  %conv144 = zext i16 %44 to i32
  %45 = load i16, i16* %all_iftypes, align 2
  %conv145 = zext i16 %45 to i32
  %and = and i32 %conv144, %conv145
  %tobool146 = icmp ne i32 %and, 0
  %lnot147 = xor i1 %tobool146, true
  %lnot149 = xor i1 %lnot147, true
  %lnot.ext150 = zext i1 %lnot149 to i32
  store i32 %lnot.ext150, i32* %__ret_warn_on143, align 4
  %46 = load i32, i32* %__ret_warn_on143, align 4
  %tobool151 = icmp ne i32 %46, 0
  %lnot152 = xor i1 %tobool151, true
  %lnot154 = xor i1 %lnot152, true
  %lnot.ext155 = zext i1 %lnot154 to i32
  %conv156 = sext i32 %lnot.ext155 to i64
  %tobool157 = icmp ne i64 %conv156, 0
  br i1 %tobool157, label %if.then158, label %if.end159

if.then158:                                       ; preds = %for.body139
  call void @warn_slowpath_null(i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.3, i32 0, i32 0), i32 455)
  br label %if.end159

if.end159:                                        ; preds = %if.then158, %for.body139
  %47 = load i32, i32* %__ret_warn_on143, align 4
  %tobool161 = icmp ne i32 %47, 0
  %lnot162 = xor i1 %tobool161, true
  %lnot164 = xor i1 %lnot162, true
  %lnot.ext165 = zext i1 %lnot164 to i32
  %conv166 = sext i32 %lnot.ext165 to i64
  store i64 %conv166, i64* %tmp160, align 8
  %48 = load i64, i64* %tmp160, align 8
  %tobool167 = icmp ne i64 %48, 0
  br i1 %tobool167, label %if.then168, label %if.end169

if.then168:                                       ; preds = %if.end159
  store i32 -22, i32* %retval, align 4
  br label %return

if.end169:                                        ; preds = %if.end159
  %49 = load i16, i16* %types, align 2
  %conv170 = zext i16 %49 to i32
  %50 = load i16, i16* %all_iftypes, align 2
  %conv171 = zext i16 %50 to i32
  %or = or i32 %conv171, %conv170
  %conv172 = trunc i32 %or to i16
  store i16 %conv172, i16* %all_iftypes, align 2
  %51 = load %struct.ieee80211_iface_combination*, %struct.ieee80211_iface_combination** %c, align 8
  %limits174 = getelementptr inbounds %struct.ieee80211_iface_combination, %struct.ieee80211_iface_combination* %51, i32 0, i32 0
  %52 = load %struct.ieee80211_iface_limit*, %struct.ieee80211_iface_limit** %limits174, align 8
  %53 = load i32, i32* %j, align 4
  %idxprom175 = sext i32 %53 to i64
  %arrayidx176 = getelementptr inbounds %struct.ieee80211_iface_limit, %struct.ieee80211_iface_limit* %52, i64 %idxprom175
  %max = getelementptr inbounds %struct.ieee80211_iface_limit, %struct.ieee80211_iface_limit* %arrayidx176, i32 0, i32 0
  %54 = load i16, i16* %max, align 2
  %tobool177 = icmp ne i16 %54, 0
  %lnot178 = xor i1 %tobool177, true
  %lnot180 = xor i1 %lnot178, true
  %lnot182 = xor i1 %lnot180, true
  %lnot.ext183 = zext i1 %lnot182 to i32
  store i32 %lnot.ext183, i32* %__ret_warn_on173, align 4
  %55 = load i32, i32* %__ret_warn_on173, align 4
  %tobool184 = icmp ne i32 %55, 0
  %lnot185 = xor i1 %tobool184, true
  %lnot187 = xor i1 %lnot185, true
  %lnot.ext188 = zext i1 %lnot187 to i32
  %conv189 = sext i32 %lnot.ext188 to i64
  %tobool190 = icmp ne i64 %conv189, 0
  br i1 %tobool190, label %if.then191, label %if.end192

if.then191:                                       ; preds = %if.end169
  call void @warn_slowpath_null(i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.3, i32 0, i32 0), i32 459)
  br label %if.end192

if.end192:                                        ; preds = %if.then191, %if.end169
  %56 = load i32, i32* %__ret_warn_on173, align 4
  %tobool194 = icmp ne i32 %56, 0
  %lnot195 = xor i1 %tobool194, true
  %lnot197 = xor i1 %lnot195, true
  %lnot.ext198 = zext i1 %lnot197 to i32
  %conv199 = sext i32 %lnot.ext198 to i64
  store i64 %conv199, i64* %tmp193, align 8
  %57 = load i64, i64* %tmp193, align 8
  %tobool200 = icmp ne i64 %57, 0
  br i1 %tobool200, label %if.then201, label %if.end202

if.then201:                                       ; preds = %if.end192
  store i32 -22, i32* %retval, align 4
  br label %return

if.end202:                                        ; preds = %if.end192
  %58 = load %struct.wiphy*, %struct.wiphy** %wiphy.addr, align 8
  %software_iftypes = getelementptr inbounds %struct.wiphy, %struct.wiphy* %58, i32 0, i32 6
  %59 = load i16, i16* %software_iftypes, align 4
  %conv204 = zext i16 %59 to i32
  %60 = load i16, i16* %types, align 2
  %conv205 = zext i16 %60 to i32
  %and206 = and i32 %conv204, %conv205
  %tobool207 = icmp ne i32 %and206, 0
  %lnot208 = xor i1 %tobool207, true
  %lnot210 = xor i1 %lnot208, true
  %lnot.ext211 = zext i1 %lnot210 to i32
  store i32 %lnot.ext211, i32* %__ret_warn_on203, align 4
  %61 = load i32, i32* %__ret_warn_on203, align 4
  %tobool212 = icmp ne i32 %61, 0
  %lnot213 = xor i1 %tobool212, true
  %lnot215 = xor i1 %lnot213, true
  %lnot.ext216 = zext i1 %lnot215 to i32
  %conv217 = sext i32 %lnot.ext216 to i64
  %tobool218 = icmp ne i64 %conv217, 0
  br i1 %tobool218, label %if.then219, label %if.end220

if.then219:                                       ; preds = %if.end202
  call void @warn_slowpath_null(i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.3, i32 0, i32 0), i32 463)
  br label %if.end220

if.end220:                                        ; preds = %if.then219, %if.end202
  %62 = load i32, i32* %__ret_warn_on203, align 4
  %tobool222 = icmp ne i32 %62, 0
  %lnot223 = xor i1 %tobool222, true
  %lnot225 = xor i1 %lnot223, true
  %lnot.ext226 = zext i1 %lnot225 to i32
  %conv227 = sext i32 %lnot.ext226 to i64
  store i64 %conv227, i64* %tmp221, align 8
  %63 = load i64, i64* %tmp221, align 8
  %tobool228 = icmp ne i64 %63, 0
  br i1 %tobool228, label %if.then229, label %if.end230

if.then229:                                       ; preds = %if.end220
  store i32 -22, i32* %retval, align 4
  br label %return

if.end230:                                        ; preds = %if.end220
  %64 = load i16, i16* %types, align 2
  %conv232 = zext i16 %64 to i64
  %and233 = and i64 %conv232, 1024
  %tobool234 = icmp ne i64 %and233, 0
  br i1 %tobool234, label %land.rhs235, label %land.end243

land.rhs235:                                      ; preds = %if.end230
  %65 = load %struct.ieee80211_iface_combination*, %struct.ieee80211_iface_combination** %c, align 8
  %limits236 = getelementptr inbounds %struct.ieee80211_iface_combination, %struct.ieee80211_iface_combination* %65, i32 0, i32 0
  %66 = load %struct.ieee80211_iface_limit*, %struct.ieee80211_iface_limit** %limits236, align 8
  %67 = load i32, i32* %j, align 4
  %idxprom237 = sext i32 %67 to i64
  %arrayidx238 = getelementptr inbounds %struct.ieee80211_iface_limit, %struct.ieee80211_iface_limit* %66, i64 %idxprom237
  %max239 = getelementptr inbounds %struct.ieee80211_iface_limit, %struct.ieee80211_iface_limit* %arrayidx238, i32 0, i32 0
  %68 = load i16, i16* %max239, align 2
  %conv240 = zext i16 %68 to i32
  %cmp241 = icmp sgt i32 %conv240, 1
  br label %land.end243

land.end243:                                      ; preds = %land.rhs235, %if.end230
  %69 = phi i1 [ false, %if.end230 ], [ %cmp241, %land.rhs235 ]
  %lnot244 = xor i1 %69, true
  %lnot246 = xor i1 %lnot244, true
  %lnot.ext247 = zext i1 %lnot246 to i32
  store i32 %lnot.ext247, i32* %__ret_warn_on231, align 4
  %70 = load i32, i32* %__ret_warn_on231, align 4
  %tobool248 = icmp ne i32 %70, 0
  %lnot249 = xor i1 %tobool248, true
  %lnot251 = xor i1 %lnot249, true
  %lnot.ext252 = zext i1 %lnot251 to i32
  %conv253 = sext i32 %lnot.ext252 to i64
  %tobool254 = icmp ne i64 %conv253, 0
  br i1 %tobool254, label %if.then255, label %if.end256

if.then255:                                       ; preds = %land.end243
  call void @warn_slowpath_null(i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.3, i32 0, i32 0), i32 468)
  br label %if.end256

if.end256:                                        ; preds = %if.then255, %land.end243
  %71 = load i32, i32* %__ret_warn_on231, align 4
  %tobool258 = icmp ne i32 %71, 0
  %lnot259 = xor i1 %tobool258, true
  %lnot261 = xor i1 %lnot259, true
  %lnot.ext262 = zext i1 %lnot261 to i32
  %conv263 = sext i32 %lnot.ext262 to i64
  store i64 %conv263, i64* %tmp257, align 8
  %72 = load i64, i64* %tmp257, align 8
  %tobool264 = icmp ne i64 %72, 0
  br i1 %tobool264, label %if.then265, label %if.end266

if.then265:                                       ; preds = %if.end256
  store i32 -22, i32* %retval, align 4
  br label %return

if.end266:                                        ; preds = %if.end256
  %73 = load %struct.ieee80211_iface_combination*, %struct.ieee80211_iface_combination** %c, align 8
  %limits267 = getelementptr inbounds %struct.ieee80211_iface_combination, %struct.ieee80211_iface_combination* %73, i32 0, i32 0
  %74 = load %struct.ieee80211_iface_limit*, %struct.ieee80211_iface_limit** %limits267, align 8
  %75 = load i32, i32* %j, align 4
  %idxprom268 = sext i32 %75 to i64
  %arrayidx269 = getelementptr inbounds %struct.ieee80211_iface_limit, %struct.ieee80211_iface_limit* %74, i64 %idxprom268
  %max270 = getelementptr inbounds %struct.ieee80211_iface_limit, %struct.ieee80211_iface_limit* %arrayidx269, i32 0, i32 0
  %76 = load i16, i16* %max270, align 2
  %conv271 = zext i16 %76 to i32
  %77 = load i32, i32* %cnt, align 4
  %add = add i32 %77, %conv271
  store i32 %add, i32* %cnt, align 4
  %78 = load %struct.wiphy*, %struct.wiphy** %wiphy.addr, align 8
  %interface_modes = getelementptr inbounds %struct.wiphy, %struct.wiphy* %78, i32 0, i32 8
  %79 = load i16, i16* %interface_modes, align 16
  %conv273 = zext i16 %79 to i32
  %80 = load i16, i16* %types, align 2
  %conv274 = zext i16 %80 to i32
  %and275 = and i32 %conv273, %conv274
  %81 = load i16, i16* %types, align 2
  %conv276 = zext i16 %81 to i32
  %cmp277 = icmp ne i32 %and275, %conv276
  %lnot279 = xor i1 %cmp277, true
  %lnot281 = xor i1 %lnot279, true
  %lnot.ext282 = zext i1 %lnot281 to i32
  store i32 %lnot.ext282, i32* %__ret_warn_on272, align 4
  %82 = load i32, i32* %__ret_warn_on272, align 4
  %tobool283 = icmp ne i32 %82, 0
  %lnot284 = xor i1 %tobool283, true
  %lnot286 = xor i1 %lnot284, true
  %lnot.ext287 = zext i1 %lnot286 to i32
  %conv288 = sext i32 %lnot.ext287 to i64
  %tobool289 = icmp ne i64 %conv288, 0
  br i1 %tobool289, label %if.then290, label %if.end291

if.then290:                                       ; preds = %if.end266
  call void @warn_slowpath_null(i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.3, i32 0, i32 0), i32 476)
  br label %if.end291

if.end291:                                        ; preds = %if.then290, %if.end266
  %83 = load i32, i32* %__ret_warn_on272, align 4
  %tobool293 = icmp ne i32 %83, 0
  %lnot294 = xor i1 %tobool293, true
  %lnot296 = xor i1 %lnot294, true
  %lnot.ext297 = zext i1 %lnot296 to i32
  %conv298 = sext i32 %lnot.ext297 to i64
  store i64 %conv298, i64* %tmp292, align 8
  %84 = load i64, i64* %tmp292, align 8
  %tobool299 = icmp ne i64 %84, 0
  br i1 %tobool299, label %if.then300, label %if.end301

if.then300:                                       ; preds = %if.end291
  store i32 -22, i32* %retval, align 4
  br label %return

if.end301:                                        ; preds = %if.end291
  br label %for.inc

for.inc:                                          ; preds = %if.end301
  %85 = load i32, i32* %j, align 4
  %inc = add nsw i32 %85, 1
  store i32 %inc, i32* %j, align 4
  br label %for.cond134

for.end:                                          ; preds = %for.cond134
  %86 = load i32, i32* %cnt, align 4
  %87 = load %struct.ieee80211_iface_combination*, %struct.ieee80211_iface_combination** %c, align 8
  %max_interfaces303 = getelementptr inbounds %struct.ieee80211_iface_combination, %struct.ieee80211_iface_combination* %87, i32 0, i32 2
  %88 = load i16, i16* %max_interfaces303, align 4
  %conv304 = zext i16 %88 to i32
  %cmp305 = icmp ult i32 %86, %conv304
  %lnot307 = xor i1 %cmp305, true
  %lnot309 = xor i1 %lnot307, true
  %lnot.ext310 = zext i1 %lnot309 to i32
  store i32 %lnot.ext310, i32* %__ret_warn_on302, align 4
  %89 = load i32, i32* %__ret_warn_on302, align 4
  %tobool311 = icmp ne i32 %89, 0
  %lnot312 = xor i1 %tobool311, true
  %lnot314 = xor i1 %lnot312, true
  %lnot.ext315 = zext i1 %lnot314 to i32
  %conv316 = sext i32 %lnot.ext315 to i64
  %tobool317 = icmp ne i64 %conv316, 0
  br i1 %tobool317, label %if.then318, label %if.end319

if.then318:                                       ; preds = %for.end
  call void @warn_slowpath_null(i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.3, i32 0, i32 0), i32 481)
  br label %if.end319

if.end319:                                        ; preds = %if.then318, %for.end
  %90 = load i32, i32* %__ret_warn_on302, align 4
  %tobool321 = icmp ne i32 %90, 0
  %lnot322 = xor i1 %tobool321, true
  %lnot324 = xor i1 %lnot322, true
  %lnot.ext325 = zext i1 %lnot324 to i32
  %conv326 = sext i32 %lnot.ext325 to i64
  store i64 %conv326, i64* %tmp320, align 8
  %91 = load i64, i64* %tmp320, align 8
  %tobool327 = icmp ne i64 %91, 0
  br i1 %tobool327, label %if.then328, label %if.end329

if.then328:                                       ; preds = %if.end319
  store i32 -22, i32* %retval, align 4
  br label %return

if.end329:                                        ; preds = %if.end319
  br label %for.inc330

for.inc330:                                       ; preds = %if.end329
  %92 = load i32, i32* %i, align 4
  %inc331 = add nsw i32 %92, 1
  store i32 %inc331, i32* %i, align 4
  br label %for.cond

for.end332:                                       ; preds = %for.cond
  store i32 0, i32* %retval, align 4
  br label %return

return:                                           ; preds = %for.end332, %if.then328, %if.then300, %if.then265, %if.then229, %if.then201, %if.then168, %if.then132, %if.then105, %if.then73, %if.then46, %if.then19
  %93 = load i32, i32* %retval, align 4
  ret i32 %93
}

declare void @ieee80211_set_bitrate_flags(%struct.wiphy*) #1

declare i32 @device_add(%struct.device*) #1

declare void @wiphy_regulatory_register(%struct.wiphy*) #1

; Function Attrs: noinline nounwind optnone uwtable
define internal void @list_add_rcu(%struct.list_head* %new, %struct.list_head* %head) #0 {
entry:
  %new.addr = alloca %struct.list_head*, align 8
  %head.addr = alloca %struct.list_head*, align 8
  store %struct.list_head* %new, %struct.list_head** %new.addr, align 8
  store %struct.list_head* %head, %struct.list_head** %head.addr, align 8
  %0 = load %struct.list_head*, %struct.list_head** %new.addr, align 8
  %1 = load %struct.list_head*, %struct.list_head** %head.addr, align 8
  %2 = load %struct.list_head*, %struct.list_head** %head.addr, align 8
  %next = getelementptr inbounds %struct.list_head, %struct.list_head* %2, i32 0, i32 0
  %3 = load %struct.list_head*, %struct.list_head** %next, align 8
  call void @__list_add_rcu(%struct.list_head* %0, %struct.list_head* %1, %struct.list_head* %3)
  ret void
}

declare %struct.dentry* @debugfs_create_dir(i8*, %struct.dentry*) #1

; Function Attrs: noinline nounwind optnone uwtable
define internal i8* @wiphy_name(%struct.wiphy* %wiphy) #0 {
entry:
  %wiphy.addr = alloca %struct.wiphy*, align 8
  store %struct.wiphy* %wiphy, %struct.wiphy** %wiphy.addr, align 8
  %0 = load %struct.wiphy*, %struct.wiphy** %wiphy.addr, align 8
  %dev = getelementptr inbounds %struct.wiphy, %struct.wiphy* %0, i32 0, i32 42
  %call = call i8* @dev_name(%struct.device* %dev)
  ret i8* %call
}

; Function Attrs: noinline nounwind optnone uwtable
define internal i64 @IS_ERR(i8* %ptr) #0 {
entry:
  %ptr.addr = alloca i8*, align 8
  store i8* %ptr, i8** %ptr.addr, align 8
  %0 = load i8*, i8** %ptr.addr, align 8
  %1 = ptrtoint i8* %0 to i64
  %cmp = icmp uge i64 %1, -4095
  %lnot = xor i1 %cmp, true
  %lnot1 = xor i1 %lnot, true
  %lnot.ext = zext i1 %lnot1 to i32
  %conv = sext i32 %lnot.ext to i64
  ret i64 %conv
}

declare void @nl80211_send_reg_change_event(%struct.regulatory_request*) #1

; Function Attrs: noinline nounwind optnone uwtable
define internal void @cfg80211_debugfs_rdev_add(%struct.cfg80211_registered_device* %rdev) #0 {
entry:
  %rdev.addr = alloca %struct.cfg80211_registered_device*, align 8
  store %struct.cfg80211_registered_device* %rdev, %struct.cfg80211_registered_device** %rdev.addr, align 8
  ret void
}

declare i32 @rfkill_register(%struct.rfkill*) #1

declare void @device_del(%struct.device*) #1

declare void @debugfs_remove_recursive(%struct.dentry*) #1

; Function Attrs: noinline nounwind optnone uwtable
define internal void @list_del_rcu(%struct.list_head* %entry1) #0 {
entry:
  %entry.addr = alloca %struct.list_head*, align 8
  store %struct.list_head* %entry1, %struct.list_head** %entry.addr, align 8
  %0 = load %struct.list_head*, %struct.list_head** %entry.addr, align 8
  call void @__list_del_entry(%struct.list_head* %0)
  %1 = load %struct.list_head*, %struct.list_head** %entry.addr, align 8
  %prev = getelementptr inbounds %struct.list_head, %struct.list_head* %1, i32 0, i32 1
  store %struct.list_head* bitcast (i8* getelementptr (i8, i8* inttoptr (i64 2097664 to i8*), i64 -2401263026318606336) to %struct.list_head*), %struct.list_head** %prev, align 8
  ret void
}

declare void @wiphy_regulatory_deregister(%struct.wiphy*) #1

declare void @rtnl_lock() #1

declare void @rtnl_unlock() #1

; Function Attrs: noinline nounwind optnone uwtable
define void @wiphy_rfkill_start_polling(%struct.wiphy* %wiphy) #0 {
entry:
  %wiphy.addr = alloca %struct.wiphy*, align 8
  %rdev = alloca %struct.cfg80211_registered_device*, align 8
  store %struct.wiphy* %wiphy, %struct.wiphy** %wiphy.addr, align 8
  %0 = load %struct.wiphy*, %struct.wiphy** %wiphy.addr, align 8
  %call = call %struct.cfg80211_registered_device* @wiphy_to_dev(%struct.wiphy* %0)
  store %struct.cfg80211_registered_device* %call, %struct.cfg80211_registered_device** %rdev, align 8
  %1 = load %struct.cfg80211_registered_device*, %struct.cfg80211_registered_device** %rdev, align 8
  %ops = getelementptr inbounds %struct.cfg80211_registered_device, %struct.cfg80211_registered_device* %1, i32 0, i32 0
  %2 = load %struct.cfg80211_ops*, %struct.cfg80211_ops** %ops, align 32
  %rfkill_poll = getelementptr inbounds %struct.cfg80211_ops, %struct.cfg80211_ops* %2, i32 0, i32 46
  %3 = load void (%struct.wiphy*)*, void (%struct.wiphy*)** %rfkill_poll, align 8
  %tobool = icmp ne void (%struct.wiphy*)* %3, null
  br i1 %tobool, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  br label %return

if.end:                                           ; preds = %entry
  %4 = load %struct.cfg80211_registered_device*, %struct.cfg80211_registered_device** %rdev, align 8
  %rfkill_ops = getelementptr inbounds %struct.cfg80211_registered_device, %struct.cfg80211_registered_device* %4, i32 0, i32 3
  %poll = getelementptr inbounds %struct.rfkill_ops, %struct.rfkill_ops* %rfkill_ops, i32 0, i32 0
  store void (%struct.rfkill*, i8*)* @cfg80211_rfkill_poll, void (%struct.rfkill*, i8*)** %poll, align 32
  %5 = load %struct.cfg80211_registered_device*, %struct.cfg80211_registered_device** %rdev, align 8
  %rfkill = getelementptr inbounds %struct.cfg80211_registered_device, %struct.cfg80211_registered_device* %5, i32 0, i32 4
  %6 = load %struct.rfkill*, %struct.rfkill** %rfkill, align 8
  call void @rfkill_resume_polling(%struct.rfkill* %6)
  br label %return

return:                                           ; preds = %if.end, %if.then
  ret void
}

; Function Attrs: noinline nounwind optnone uwtable
define internal void @cfg80211_rfkill_poll(%struct.rfkill* %rfkill, i8* %data) #0 {
entry:
  %rfkill.addr = alloca %struct.rfkill*, align 8
  %data.addr = alloca i8*, align 8
  %rdev = alloca %struct.cfg80211_registered_device*, align 8
  store %struct.rfkill* %rfkill, %struct.rfkill** %rfkill.addr, align 8
  store i8* %data, i8** %data.addr, align 8
  %0 = load i8*, i8** %data.addr, align 8
  %1 = bitcast i8* %0 to %struct.cfg80211_registered_device*
  store %struct.cfg80211_registered_device* %1, %struct.cfg80211_registered_device** %rdev, align 8
  %2 = load %struct.cfg80211_registered_device*, %struct.cfg80211_registered_device** %rdev, align 8
  call void @rdev_rfkill_poll(%struct.cfg80211_registered_device* %2)
  ret void
}

declare void @rfkill_resume_polling(%struct.rfkill*) #1

; Function Attrs: noinline nounwind optnone uwtable
define void @wiphy_rfkill_stop_polling(%struct.wiphy* %wiphy) #0 {
entry:
  %wiphy.addr = alloca %struct.wiphy*, align 8
  %rdev = alloca %struct.cfg80211_registered_device*, align 8
  store %struct.wiphy* %wiphy, %struct.wiphy** %wiphy.addr, align 8
  %0 = load %struct.wiphy*, %struct.wiphy** %wiphy.addr, align 8
  %call = call %struct.cfg80211_registered_device* @wiphy_to_dev(%struct.wiphy* %0)
  store %struct.cfg80211_registered_device* %call, %struct.cfg80211_registered_device** %rdev, align 8
  %1 = load %struct.cfg80211_registered_device*, %struct.cfg80211_registered_device** %rdev, align 8
  %rfkill = getelementptr inbounds %struct.cfg80211_registered_device, %struct.cfg80211_registered_device* %1, i32 0, i32 4
  %2 = load %struct.rfkill*, %struct.rfkill** %rfkill, align 8
  call void @rfkill_pause_polling(%struct.rfkill* %2)
  ret void
}

declare void @rfkill_pause_polling(%struct.rfkill*) #1

; Function Attrs: noinline nounwind optnone uwtable
define void @wiphy_unregister(%struct.wiphy* %wiphy) #0 {
entry:
  %pfo_ret__.i = alloca %struct.task_struct*, align 8
  %tmp.i = alloca %struct.task_struct*, align 8
  %wiphy.addr = alloca %struct.wiphy*, align 8
  %rdev = alloca %struct.cfg80211_registered_device*, align 8
  %__count = alloca i32, align 4
  %tmp = alloca i32, align 4
  %__wait = alloca %struct.__wait_queue, align 8
  %__count7 = alloca i32, align 4
  %tmp11 = alloca i32, align 4
  store %struct.wiphy* %wiphy, %struct.wiphy** %wiphy.addr, align 8
  %0 = load %struct.wiphy*, %struct.wiphy** %wiphy.addr, align 8
  %call = call %struct.cfg80211_registered_device* @wiphy_to_dev(%struct.wiphy* %0)
  store %struct.cfg80211_registered_device* %call, %struct.cfg80211_registered_device** %rdev, align 8
  call void @rtnl_lock()
  %1 = load %struct.cfg80211_registered_device*, %struct.cfg80211_registered_device** %rdev, align 8
  %wiphy1 = getelementptr inbounds %struct.cfg80211_registered_device, %struct.cfg80211_registered_device* %1, i32 0, i32 34
  %registered = getelementptr inbounds %struct.wiphy, %struct.wiphy* %wiphy1, i32 0, i32 43
  store i8 0, i8* %registered, align 8
  call void @rtnl_unlock()
  %2 = load %struct.cfg80211_registered_device*, %struct.cfg80211_registered_device** %rdev, align 8
  %rfkill = getelementptr inbounds %struct.cfg80211_registered_device, %struct.cfg80211_registered_device* %2, i32 0, i32 4
  %3 = load %struct.rfkill*, %struct.rfkill** %rfkill, align 8
  call void @rfkill_unregister(%struct.rfkill* %3)
  call void @mutex_lock(%struct.mutex* @cfg80211_mutex)
  br label %do.body

do.body:                                          ; preds = %entry
  %4 = load %struct.cfg80211_registered_device*, %struct.cfg80211_registered_device** %rdev, align 8
  %devlist_mtx = getelementptr inbounds %struct.cfg80211_registered_device, %struct.cfg80211_registered_device* %4, i32 0, i32 9
  call void @mutex_lock(%struct.mutex* %devlist_mtx)
  %5 = load %struct.cfg80211_registered_device*, %struct.cfg80211_registered_device** %rdev, align 8
  %opencount = getelementptr inbounds %struct.cfg80211_registered_device, %struct.cfg80211_registered_device* %5, i32 0, i32 13
  %6 = load i32, i32* %opencount, align 16
  store i32 %6, i32* %__count, align 4
  %7 = load %struct.cfg80211_registered_device*, %struct.cfg80211_registered_device** %rdev, align 8
  %devlist_mtx2 = getelementptr inbounds %struct.cfg80211_registered_device, %struct.cfg80211_registered_device* %7, i32 0, i32 9
  call void @mutex_unlock(%struct.mutex* %devlist_mtx2)
  %8 = load i32, i32* %__count, align 4
  %cmp = icmp eq i32 %8, 0
  %conv = zext i1 %cmp to i32
  store i32 %conv, i32* %tmp, align 4
  %9 = load i32, i32* %tmp, align 4
  %tobool = icmp ne i32 %9, 0
  br i1 %tobool, label %if.then, label %if.end

if.then:                                          ; preds = %do.body
  br label %do.end18

if.end:                                           ; preds = %do.body
  br label %do.body3

do.body3:                                         ; preds = %if.end
  %flags = getelementptr inbounds %struct.__wait_queue, %struct.__wait_queue* %__wait, i32 0, i32 0
  store i32 0, i32* %flags, align 8
  %private = getelementptr inbounds %struct.__wait_queue, %struct.__wait_queue* %__wait, i32 0, i32 1
  %10 = call %struct.task_struct* asm "movq %gs:${1:P},$0", "=r,im,~{dirflag},~{fpsr},~{flags}"(%struct.task_struct** @current_task) #4, !srcloc !4
  store %struct.task_struct* %10, %struct.task_struct** %pfo_ret__.i, align 8
  %11 = load %struct.task_struct*, %struct.task_struct** %pfo_ret__.i, align 8
  store %struct.task_struct* %11, %struct.task_struct** %tmp.i, align 8
  %12 = load %struct.task_struct*, %struct.task_struct** %tmp.i, align 8
  %13 = bitcast %struct.task_struct* %12 to i8*
  store i8* %13, i8** %private, align 8
  %func = getelementptr inbounds %struct.__wait_queue, %struct.__wait_queue* %__wait, i32 0, i32 2
  store i32 (%struct.__wait_queue*, i32, i32, i8*)* @autoremove_wake_function, i32 (%struct.__wait_queue*, i32, i32, i8*)** %func, align 8
  %task_list = getelementptr inbounds %struct.__wait_queue, %struct.__wait_queue* %__wait, i32 0, i32 3
  %next = getelementptr inbounds %struct.list_head, %struct.list_head* %task_list, i32 0, i32 0
  %task_list5 = getelementptr inbounds %struct.__wait_queue, %struct.__wait_queue* %__wait, i32 0, i32 3
  store %struct.list_head* %task_list5, %struct.list_head** %next, align 8
  %prev = getelementptr inbounds %struct.list_head, %struct.list_head* %task_list, i32 0, i32 1
  %task_list6 = getelementptr inbounds %struct.__wait_queue, %struct.__wait_queue* %__wait, i32 0, i32 3
  store %struct.list_head* %task_list6, %struct.list_head** %prev, align 8
  br label %for.cond

for.cond:                                         ; preds = %if.end16, %do.body3
  %14 = load %struct.cfg80211_registered_device*, %struct.cfg80211_registered_device** %rdev, align 8
  %dev_wait = getelementptr inbounds %struct.cfg80211_registered_device, %struct.cfg80211_registered_device* %14, i32 0, i32 14
  call void @prepare_to_wait(%struct.__wait_queue_head* %dev_wait, %struct.__wait_queue* %__wait, i32 2)
  %15 = load %struct.cfg80211_registered_device*, %struct.cfg80211_registered_device** %rdev, align 8
  %devlist_mtx8 = getelementptr inbounds %struct.cfg80211_registered_device, %struct.cfg80211_registered_device* %15, i32 0, i32 9
  call void @mutex_lock(%struct.mutex* %devlist_mtx8)
  %16 = load %struct.cfg80211_registered_device*, %struct.cfg80211_registered_device** %rdev, align 8
  %opencount9 = getelementptr inbounds %struct.cfg80211_registered_device, %struct.cfg80211_registered_device* %16, i32 0, i32 13
  %17 = load i32, i32* %opencount9, align 16
  store i32 %17, i32* %__count7, align 4
  %18 = load %struct.cfg80211_registered_device*, %struct.cfg80211_registered_device** %rdev, align 8
  %devlist_mtx10 = getelementptr inbounds %struct.cfg80211_registered_device, %struct.cfg80211_registered_device* %18, i32 0, i32 9
  call void @mutex_unlock(%struct.mutex* %devlist_mtx10)
  %19 = load i32, i32* %__count7, align 4
  %cmp12 = icmp eq i32 %19, 0
  %conv13 = zext i1 %cmp12 to i32
  store i32 %conv13, i32* %tmp11, align 4
  %20 = load i32, i32* %tmp11, align 4
  %tobool14 = icmp ne i32 %20, 0
  br i1 %tobool14, label %if.then15, label %if.end16

if.then15:                                        ; preds = %for.cond
  br label %for.end

if.end16:                                         ; preds = %for.cond
  call void @schedule()
  br label %for.cond

for.end:                                          ; preds = %if.then15
  %21 = load %struct.cfg80211_registered_device*, %struct.cfg80211_registered_device** %rdev, align 8
  %dev_wait17 = getelementptr inbounds %struct.cfg80211_registered_device, %struct.cfg80211_registered_device* %21, i32 0, i32 14
  call void @finish_wait(%struct.__wait_queue_head* %dev_wait17, %struct.__wait_queue* %__wait)
  br label %do.end

do.end:                                           ; preds = %for.end
  br label %do.end18

do.end18:                                         ; preds = %do.end, %if.then
  %22 = load %struct.cfg80211_registered_device*, %struct.cfg80211_registered_device** %rdev, align 8
  %devlist_mtx19 = getelementptr inbounds %struct.cfg80211_registered_device, %struct.cfg80211_registered_device* %22, i32 0, i32 9
  call void @mutex_lock(%struct.mutex* %devlist_mtx19)
  br label %do.body20

do.body20:                                        ; preds = %do.end18
  %23 = load %struct.cfg80211_registered_device*, %struct.cfg80211_registered_device** %rdev, align 8
  %wdev_list = getelementptr inbounds %struct.cfg80211_registered_device, %struct.cfg80211_registered_device* %23, i32 0, i32 10
  %call21 = call i32 @list_empty(%struct.list_head* %wdev_list)
  %tobool22 = icmp ne i32 %call21, 0
  %lnot = xor i1 %tobool22, true
  %lnot23 = xor i1 %lnot, true
  %lnot24 = xor i1 %lnot23, true
  %lnot.ext = zext i1 %lnot24 to i32
  %conv25 = sext i32 %lnot.ext to i64
  %tobool26 = icmp ne i64 %conv25, 0
  br i1 %tobool26, label %if.then27, label %if.end33

if.then27:                                        ; preds = %do.body20
  br label %do.body28

do.body28:                                        ; preds = %if.then27
  call void asm sideeffect "1:\09ud2\0A.pushsection __bug_table,\22a\22\0A2:\09.long 1b - 2b, ${0:c} - 2b\0A\09.word ${1:c}, 0\0A\09.org 2b+${2:c}\0A.popsection", "i,i,i,~{dirflag},~{fpsr},~{flags}"(i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.3, i32 0, i32 0), i32 699, i64 12) #3, !srcloc !5
  br label %do.body29

do.body29:                                        ; preds = %do.cond, %do.body28
  br label %do.cond

do.cond:                                          ; preds = %do.body29
  br i1 true, label %do.body29, label %do.end30

do.end30:                                         ; preds = %do.cond
  br label %do.end32

do.end32:                                         ; preds = %do.end30
  br label %if.end33

if.end33:                                         ; preds = %do.end32, %do.body20
  br label %do.end35

do.end35:                                         ; preds = %if.end33
  %24 = load %struct.cfg80211_registered_device*, %struct.cfg80211_registered_device** %rdev, align 8
  %devlist_mtx36 = getelementptr inbounds %struct.cfg80211_registered_device, %struct.cfg80211_registered_device* %24, i32 0, i32 9
  call void @mutex_unlock(%struct.mutex* %devlist_mtx36)
  %25 = load %struct.cfg80211_registered_device*, %struct.cfg80211_registered_device** %rdev, align 8
  %wiphy37 = getelementptr inbounds %struct.cfg80211_registered_device, %struct.cfg80211_registered_device* %25, i32 0, i32 34
  %debugfsdir = getelementptr inbounds %struct.wiphy, %struct.wiphy* %wiphy37, i32 0, i32 44
  %26 = load %struct.dentry*, %struct.dentry** %debugfsdir, align 16
  call void @debugfs_remove_recursive(%struct.dentry* %26)
  %27 = load %struct.cfg80211_registered_device*, %struct.cfg80211_registered_device** %rdev, align 8
  %list = getelementptr inbounds %struct.cfg80211_registered_device, %struct.cfg80211_registered_device* %27, i32 0, i32 1
  call void @list_del_rcu(%struct.list_head* %list)
  call void @synchronize_rcu()
  %28 = load %struct.cfg80211_registered_device*, %struct.cfg80211_registered_device** %rdev, align 8
  call void @cfg80211_lock_rdev(%struct.cfg80211_registered_device* %28)
  %29 = load %struct.cfg80211_registered_device*, %struct.cfg80211_registered_device** %rdev, align 8
  call void @cfg80211_unlock_rdev(%struct.cfg80211_registered_device* %29)
  %30 = load %struct.wiphy*, %struct.wiphy** %wiphy.addr, align 8
  call void @wiphy_regulatory_deregister(%struct.wiphy* %30)
  %31 = load i32, i32* @cfg80211_rdev_list_generation, align 4
  %inc = add nsw i32 %31, 1
  store i32 %inc, i32* @cfg80211_rdev_list_generation, align 4
  %32 = load %struct.cfg80211_registered_device*, %struct.cfg80211_registered_device** %rdev, align 8
  %wiphy38 = getelementptr inbounds %struct.cfg80211_registered_device, %struct.cfg80211_registered_device* %32, i32 0, i32 34
  %dev = getelementptr inbounds %struct.wiphy, %struct.wiphy* %wiphy38, i32 0, i32 42
  call void @device_del(%struct.device* %dev)
  call void @mutex_unlock(%struct.mutex* @cfg80211_mutex)
  %33 = load %struct.cfg80211_registered_device*, %struct.cfg80211_registered_device** %rdev, align 8
  %scan_done_wk = getelementptr inbounds %struct.cfg80211_registered_device, %struct.cfg80211_registered_device* %33, i32 0, i32 26
  %call39 = call zeroext i1 @flush_work(%struct.work_struct* %scan_done_wk)
  %34 = load %struct.cfg80211_registered_device*, %struct.cfg80211_registered_device** %rdev, align 8
  %conn_work = getelementptr inbounds %struct.cfg80211_registered_device, %struct.cfg80211_registered_device* %34, i32 0, i32 29
  %call40 = call zeroext i1 @cancel_work_sync(%struct.work_struct* %conn_work)
  %35 = load %struct.cfg80211_registered_device*, %struct.cfg80211_registered_device** %rdev, align 8
  %event_work = getelementptr inbounds %struct.cfg80211_registered_device, %struct.cfg80211_registered_device* %35, i32 0, i32 30
  %call41 = call zeroext i1 @flush_work(%struct.work_struct* %event_work)
  %36 = load %struct.cfg80211_registered_device*, %struct.cfg80211_registered_device** %rdev, align 8
  %dfs_update_channels_wk = getelementptr inbounds %struct.cfg80211_registered_device, %struct.cfg80211_registered_device* %36, i32 0, i32 32
  %call42 = call zeroext i1 @cancel_delayed_work_sync(%struct.delayed_work* %dfs_update_channels_wk)
  %37 = load %struct.cfg80211_registered_device*, %struct.cfg80211_registered_device** %rdev, align 8
  %wowlan = getelementptr inbounds %struct.cfg80211_registered_device, %struct.cfg80211_registered_device* %37, i32 0, i32 31
  %38 = load %struct.cfg80211_wowlan*, %struct.cfg80211_wowlan** %wowlan, align 16
  %tobool43 = icmp ne %struct.cfg80211_wowlan* %38, null
  br i1 %tobool43, label %land.lhs.true, label %if.end46

land.lhs.true:                                    ; preds = %do.end35
  %39 = load %struct.cfg80211_registered_device*, %struct.cfg80211_registered_device** %rdev, align 8
  %ops = getelementptr inbounds %struct.cfg80211_registered_device, %struct.cfg80211_registered_device* %39, i32 0, i32 0
  %40 = load %struct.cfg80211_ops*, %struct.cfg80211_ops** %ops, align 32
  %set_wakeup = getelementptr inbounds %struct.cfg80211_ops, %struct.cfg80211_ops* %40, i32 0, i32 2
  %41 = load void (%struct.wiphy*, i1)*, void (%struct.wiphy*, i1)** %set_wakeup, align 8
  %tobool44 = icmp ne void (%struct.wiphy*, i1)* %41, null
  br i1 %tobool44, label %if.then45, label %if.end46

if.then45:                                        ; preds = %land.lhs.true
  %42 = load %struct.cfg80211_registered_device*, %struct.cfg80211_registered_device** %rdev, align 8
  call void @rdev_set_wakeup(%struct.cfg80211_registered_device* %42, i1 zeroext false)
  br label %if.end46

if.end46:                                         ; preds = %if.then45, %land.lhs.true, %do.end35
  %43 = load %struct.cfg80211_registered_device*, %struct.cfg80211_registered_device** %rdev, align 8
  call void @cfg80211_rdev_free_wowlan(%struct.cfg80211_registered_device* %43)
  ret void
}

declare void @rfkill_unregister(%struct.rfkill*) #1

declare i32 @autoremove_wake_function(%struct.__wait_queue*, i32, i32, i8*) #1

declare void @prepare_to_wait(%struct.__wait_queue_head*, %struct.__wait_queue*, i32) #1

declare void @schedule() #1

declare void @finish_wait(%struct.__wait_queue_head*, %struct.__wait_queue*) #1

; Function Attrs: noinline nounwind optnone uwtable
define internal i32 @list_empty(%struct.list_head* %head) #0 {
entry:
  %head.addr = alloca %struct.list_head*, align 8
  store %struct.list_head* %head, %struct.list_head** %head.addr, align 8
  %0 = load %struct.list_head*, %struct.list_head** %head.addr, align 8
  %next = getelementptr inbounds %struct.list_head, %struct.list_head* %0, i32 0, i32 0
  %1 = load %struct.list_head*, %struct.list_head** %next, align 8
  %2 = load %struct.list_head*, %struct.list_head** %head.addr, align 8
  %cmp = icmp eq %struct.list_head* %1, %2
  %conv = zext i1 %cmp to i32
  ret i32 %conv
}

; Function Attrs: noinline nounwind optnone uwtable
define internal void @synchronize_rcu() #0 {
entry:
  call void @synchronize_sched()
  ret void
}

; Function Attrs: noinline nounwind optnone uwtable
define internal void @cfg80211_lock_rdev(%struct.cfg80211_registered_device* %rdev) #0 {
entry:
  %rdev.addr = alloca %struct.cfg80211_registered_device*, align 8
  store %struct.cfg80211_registered_device* %rdev, %struct.cfg80211_registered_device** %rdev.addr, align 8
  %0 = load %struct.cfg80211_registered_device*, %struct.cfg80211_registered_device** %rdev.addr, align 8
  %mtx = getelementptr inbounds %struct.cfg80211_registered_device, %struct.cfg80211_registered_device* %0, i32 0, i32 2
  call void @mutex_lock(%struct.mutex* %mtx)
  ret void
}

; Function Attrs: noinline nounwind optnone uwtable
define internal void @cfg80211_unlock_rdev(%struct.cfg80211_registered_device* %rdev) #0 {
entry:
  %rdev.addr = alloca %struct.cfg80211_registered_device*, align 8
  store %struct.cfg80211_registered_device* %rdev, %struct.cfg80211_registered_device** %rdev.addr, align 8
  br label %do.body

do.body:                                          ; preds = %entry
  %0 = load %struct.cfg80211_registered_device*, %struct.cfg80211_registered_device** %rdev.addr, align 8
  %1 = bitcast %struct.cfg80211_registered_device* %0 to i8*
  %call = call i64 @IS_ERR(i8* %1)
  %tobool = icmp ne i64 %call, 0
  br i1 %tobool, label %lor.end, label %lor.rhs

lor.rhs:                                          ; preds = %do.body
  %2 = load %struct.cfg80211_registered_device*, %struct.cfg80211_registered_device** %rdev.addr, align 8
  %tobool1 = icmp ne %struct.cfg80211_registered_device* %2, null
  %lnot = xor i1 %tobool1, true
  br label %lor.end

lor.end:                                          ; preds = %lor.rhs, %do.body
  %3 = phi i1 [ true, %do.body ], [ %lnot, %lor.rhs ]
  %lnot2 = xor i1 %3, true
  %lnot3 = xor i1 %lnot2, true
  %lnot.ext = zext i1 %lnot3 to i32
  %conv = sext i32 %lnot.ext to i64
  %tobool4 = icmp ne i64 %conv, 0
  br i1 %tobool4, label %if.then, label %if.end

if.then:                                          ; preds = %lor.end
  br label %do.body5

do.body5:                                         ; preds = %if.then
  call void asm sideeffect "1:\09ud2\0A.pushsection __bug_table,\22a\22\0A2:\09.long 1b - 2b, ${0:c} - 2b\0A\09.word ${1:c}, 0\0A\09.org 2b+${2:c}\0A.popsection", "i,i,i,~{dirflag},~{fpsr},~{flags}"(i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.13, i32 0, i32 0), i32 181, i64 12) #3, !srcloc !6
  br label %do.body6

do.body6:                                         ; preds = %do.cond, %do.body5
  br label %do.cond

do.cond:                                          ; preds = %do.body6
  br i1 true, label %do.body6, label %do.end

do.end:                                           ; preds = %do.cond
  br label %do.end8

do.end8:                                          ; preds = %do.end
  br label %if.end

if.end:                                           ; preds = %do.end8, %lor.end
  br label %do.end10

do.end10:                                         ; preds = %if.end
  %4 = load %struct.cfg80211_registered_device*, %struct.cfg80211_registered_device** %rdev.addr, align 8
  %mtx = getelementptr inbounds %struct.cfg80211_registered_device, %struct.cfg80211_registered_device* %4, i32 0, i32 2
  call void @mutex_unlock(%struct.mutex* %mtx)
  ret void
}

declare zeroext i1 @flush_work(%struct.work_struct*) #1

declare zeroext i1 @cancel_work_sync(%struct.work_struct*) #1

declare zeroext i1 @cancel_delayed_work_sync(%struct.delayed_work*) #1

; Function Attrs: noinline nounwind optnone uwtable
define internal void @rdev_set_wakeup(%struct.cfg80211_registered_device* %rdev, i1 zeroext %enabled) #0 {
entry:
  %rdev.addr = alloca %struct.cfg80211_registered_device*, align 8
  %enabled.addr = alloca i8, align 1
  store %struct.cfg80211_registered_device* %rdev, %struct.cfg80211_registered_device** %rdev.addr, align 8
  %frombool = zext i1 %enabled to i8
  store i8 %frombool, i8* %enabled.addr, align 1
  %0 = load %struct.cfg80211_registered_device*, %struct.cfg80211_registered_device** %rdev.addr, align 8
  %wiphy = getelementptr inbounds %struct.cfg80211_registered_device, %struct.cfg80211_registered_device* %0, i32 0, i32 34
  %1 = load i8, i8* %enabled.addr, align 1
  %tobool = trunc i8 %1 to i1
  call void @trace_rdev_set_wakeup(%struct.wiphy* %wiphy, i1 zeroext %tobool)
  %2 = load %struct.cfg80211_registered_device*, %struct.cfg80211_registered_device** %rdev.addr, align 8
  %ops = getelementptr inbounds %struct.cfg80211_registered_device, %struct.cfg80211_registered_device* %2, i32 0, i32 0
  %3 = load %struct.cfg80211_ops*, %struct.cfg80211_ops** %ops, align 32
  %set_wakeup = getelementptr inbounds %struct.cfg80211_ops, %struct.cfg80211_ops* %3, i32 0, i32 2
  %4 = load void (%struct.wiphy*, i1)*, void (%struct.wiphy*, i1)** %set_wakeup, align 8
  %5 = load %struct.cfg80211_registered_device*, %struct.cfg80211_registered_device** %rdev.addr, align 8
  %wiphy1 = getelementptr inbounds %struct.cfg80211_registered_device, %struct.cfg80211_registered_device* %5, i32 0, i32 34
  %6 = load i8, i8* %enabled.addr, align 1
  %tobool2 = trunc i8 %6 to i1
  call void %4(%struct.wiphy* %wiphy1, i1 zeroext %tobool2)
  %7 = load %struct.cfg80211_registered_device*, %struct.cfg80211_registered_device** %rdev.addr, align 8
  %wiphy3 = getelementptr inbounds %struct.cfg80211_registered_device, %struct.cfg80211_registered_device* %7, i32 0, i32 34
  call void @trace_rdev_return_void(%struct.wiphy* %wiphy3)
  ret void
}

; Function Attrs: noinline nounwind optnone uwtable
define internal void @cfg80211_rdev_free_wowlan(%struct.cfg80211_registered_device* %rdev) #0 {
entry:
  %rdev.addr = alloca %struct.cfg80211_registered_device*, align 8
  %i = alloca i32, align 4
  store %struct.cfg80211_registered_device* %rdev, %struct.cfg80211_registered_device** %rdev.addr, align 8
  %0 = load %struct.cfg80211_registered_device*, %struct.cfg80211_registered_device** %rdev.addr, align 8
  %wowlan = getelementptr inbounds %struct.cfg80211_registered_device, %struct.cfg80211_registered_device* %0, i32 0, i32 31
  %1 = load %struct.cfg80211_wowlan*, %struct.cfg80211_wowlan** %wowlan, align 16
  %tobool = icmp ne %struct.cfg80211_wowlan* %1, null
  br i1 %tobool, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  br label %return

if.end:                                           ; preds = %entry
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %if.end
  %2 = load i32, i32* %i, align 4
  %3 = load %struct.cfg80211_registered_device*, %struct.cfg80211_registered_device** %rdev.addr, align 8
  %wowlan1 = getelementptr inbounds %struct.cfg80211_registered_device, %struct.cfg80211_registered_device* %3, i32 0, i32 31
  %4 = load %struct.cfg80211_wowlan*, %struct.cfg80211_wowlan** %wowlan1, align 16
  %n_patterns = getelementptr inbounds %struct.cfg80211_wowlan, %struct.cfg80211_wowlan* %4, i32 0, i32 9
  %5 = load i32, i32* %n_patterns, align 8
  %cmp = icmp slt i32 %2, %5
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %6 = load %struct.cfg80211_registered_device*, %struct.cfg80211_registered_device** %rdev.addr, align 8
  %wowlan2 = getelementptr inbounds %struct.cfg80211_registered_device, %struct.cfg80211_registered_device* %6, i32 0, i32 31
  %7 = load %struct.cfg80211_wowlan*, %struct.cfg80211_wowlan** %wowlan2, align 16
  %patterns = getelementptr inbounds %struct.cfg80211_wowlan, %struct.cfg80211_wowlan* %7, i32 0, i32 7
  %8 = load %struct.cfg80211_wowlan_trig_pkt_pattern*, %struct.cfg80211_wowlan_trig_pkt_pattern** %patterns, align 8
  %9 = load i32, i32* %i, align 4
  %idxprom = sext i32 %9 to i64
  %arrayidx = getelementptr inbounds %struct.cfg80211_wowlan_trig_pkt_pattern, %struct.cfg80211_wowlan_trig_pkt_pattern* %8, i64 %idxprom
  %mask = getelementptr inbounds %struct.cfg80211_wowlan_trig_pkt_pattern, %struct.cfg80211_wowlan_trig_pkt_pattern* %arrayidx, i32 0, i32 0
  %10 = load i8*, i8** %mask, align 8
  call void @kfree(i8* %10)
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %11 = load i32, i32* %i, align 4
  %inc = add nsw i32 %11, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %12 = load %struct.cfg80211_registered_device*, %struct.cfg80211_registered_device** %rdev.addr, align 8
  %wowlan3 = getelementptr inbounds %struct.cfg80211_registered_device, %struct.cfg80211_registered_device* %12, i32 0, i32 31
  %13 = load %struct.cfg80211_wowlan*, %struct.cfg80211_wowlan** %wowlan3, align 16
  %patterns4 = getelementptr inbounds %struct.cfg80211_wowlan, %struct.cfg80211_wowlan* %13, i32 0, i32 7
  %14 = load %struct.cfg80211_wowlan_trig_pkt_pattern*, %struct.cfg80211_wowlan_trig_pkt_pattern** %patterns4, align 8
  %15 = bitcast %struct.cfg80211_wowlan_trig_pkt_pattern* %14 to i8*
  call void @kfree(i8* %15)
  %16 = load %struct.cfg80211_registered_device*, %struct.cfg80211_registered_device** %rdev.addr, align 8
  %wowlan5 = getelementptr inbounds %struct.cfg80211_registered_device, %struct.cfg80211_registered_device* %16, i32 0, i32 31
  %17 = load %struct.cfg80211_wowlan*, %struct.cfg80211_wowlan** %wowlan5, align 16
  %tcp = getelementptr inbounds %struct.cfg80211_wowlan, %struct.cfg80211_wowlan* %17, i32 0, i32 8
  %18 = load %struct.cfg80211_wowlan_tcp*, %struct.cfg80211_wowlan_tcp** %tcp, align 8
  %tobool6 = icmp ne %struct.cfg80211_wowlan_tcp* %18, null
  br i1 %tobool6, label %land.lhs.true, label %if.end14

land.lhs.true:                                    ; preds = %for.end
  %19 = load %struct.cfg80211_registered_device*, %struct.cfg80211_registered_device** %rdev.addr, align 8
  %wowlan7 = getelementptr inbounds %struct.cfg80211_registered_device, %struct.cfg80211_registered_device* %19, i32 0, i32 31
  %20 = load %struct.cfg80211_wowlan*, %struct.cfg80211_wowlan** %wowlan7, align 16
  %tcp8 = getelementptr inbounds %struct.cfg80211_wowlan, %struct.cfg80211_wowlan* %20, i32 0, i32 8
  %21 = load %struct.cfg80211_wowlan_tcp*, %struct.cfg80211_wowlan_tcp** %tcp8, align 8
  %sock = getelementptr inbounds %struct.cfg80211_wowlan_tcp, %struct.cfg80211_wowlan_tcp* %21, i32 0, i32 0
  %22 = load %struct.socket*, %struct.socket** %sock, align 8
  %tobool9 = icmp ne %struct.socket* %22, null
  br i1 %tobool9, label %if.then10, label %if.end14

if.then10:                                        ; preds = %land.lhs.true
  %23 = load %struct.cfg80211_registered_device*, %struct.cfg80211_registered_device** %rdev.addr, align 8
  %wowlan11 = getelementptr inbounds %struct.cfg80211_registered_device, %struct.cfg80211_registered_device* %23, i32 0, i32 31
  %24 = load %struct.cfg80211_wowlan*, %struct.cfg80211_wowlan** %wowlan11, align 16
  %tcp12 = getelementptr inbounds %struct.cfg80211_wowlan, %struct.cfg80211_wowlan* %24, i32 0, i32 8
  %25 = load %struct.cfg80211_wowlan_tcp*, %struct.cfg80211_wowlan_tcp** %tcp12, align 8
  %sock13 = getelementptr inbounds %struct.cfg80211_wowlan_tcp, %struct.cfg80211_wowlan_tcp* %25, i32 0, i32 0
  %26 = load %struct.socket*, %struct.socket** %sock13, align 8
  call void @sock_release(%struct.socket* %26)
  br label %if.end14

if.end14:                                         ; preds = %if.then10, %land.lhs.true, %for.end
  %27 = load %struct.cfg80211_registered_device*, %struct.cfg80211_registered_device** %rdev.addr, align 8
  %wowlan15 = getelementptr inbounds %struct.cfg80211_registered_device, %struct.cfg80211_registered_device* %27, i32 0, i32 31
  %28 = load %struct.cfg80211_wowlan*, %struct.cfg80211_wowlan** %wowlan15, align 16
  %tcp16 = getelementptr inbounds %struct.cfg80211_wowlan, %struct.cfg80211_wowlan* %28, i32 0, i32 8
  %29 = load %struct.cfg80211_wowlan_tcp*, %struct.cfg80211_wowlan_tcp** %tcp16, align 8
  %30 = bitcast %struct.cfg80211_wowlan_tcp* %29 to i8*
  call void @kfree(i8* %30)
  %31 = load %struct.cfg80211_registered_device*, %struct.cfg80211_registered_device** %rdev.addr, align 8
  %wowlan17 = getelementptr inbounds %struct.cfg80211_registered_device, %struct.cfg80211_registered_device* %31, i32 0, i32 31
  %32 = load %struct.cfg80211_wowlan*, %struct.cfg80211_wowlan** %wowlan17, align 16
  %33 = bitcast %struct.cfg80211_wowlan* %32 to i8*
  call void @kfree(i8* %33)
  br label %return

return:                                           ; preds = %if.end14, %if.then
  ret void
}

; Function Attrs: noinline nounwind optnone uwtable
define void @cfg80211_dev_free(%struct.cfg80211_registered_device* %rdev) #0 {
entry:
  %rdev.addr = alloca %struct.cfg80211_registered_device*, align 8
  %scan = alloca %struct.cfg80211_internal_bss*, align 8
  %tmp = alloca %struct.cfg80211_internal_bss*, align 8
  %reg = alloca %struct.cfg80211_beacon_registration*, align 8
  %treg = alloca %struct.cfg80211_beacon_registration*, align 8
  %__mptr = alloca %struct.list_head*, align 8
  %tmp1 = alloca %struct.cfg80211_beacon_registration*, align 8
  %__mptr2 = alloca %struct.list_head*, align 8
  %tmp4 = alloca %struct.cfg80211_beacon_registration*, align 8
  %__mptr9 = alloca %struct.list_head*, align 8
  %tmp12 = alloca %struct.cfg80211_beacon_registration*, align 8
  %__mptr14 = alloca %struct.list_head*, align 8
  %tmp16 = alloca %struct.cfg80211_internal_bss*, align 8
  %__mptr18 = alloca %struct.list_head*, align 8
  %tmp21 = alloca %struct.cfg80211_internal_bss*, align 8
  %__mptr29 = alloca %struct.list_head*, align 8
  %tmp32 = alloca %struct.cfg80211_internal_bss*, align 8
  store %struct.cfg80211_registered_device* %rdev, %struct.cfg80211_registered_device** %rdev.addr, align 8
  %0 = load %struct.cfg80211_registered_device*, %struct.cfg80211_registered_device** %rdev.addr, align 8
  %rfkill = getelementptr inbounds %struct.cfg80211_registered_device, %struct.cfg80211_registered_device* %0, i32 0, i32 4
  %1 = load %struct.rfkill*, %struct.rfkill** %rfkill, align 8
  call void @rfkill_destroy(%struct.rfkill* %1)
  %2 = load %struct.cfg80211_registered_device*, %struct.cfg80211_registered_device** %rdev.addr, align 8
  %mtx = getelementptr inbounds %struct.cfg80211_registered_device, %struct.cfg80211_registered_device* %2, i32 0, i32 2
  call void @mutex_destroy(%struct.mutex* %mtx)
  %3 = load %struct.cfg80211_registered_device*, %struct.cfg80211_registered_device** %rdev.addr, align 8
  %devlist_mtx = getelementptr inbounds %struct.cfg80211_registered_device, %struct.cfg80211_registered_device* %3, i32 0, i32 9
  call void @mutex_destroy(%struct.mutex* %devlist_mtx)
  %4 = load %struct.cfg80211_registered_device*, %struct.cfg80211_registered_device** %rdev.addr, align 8
  %sched_scan_mtx = getelementptr inbounds %struct.cfg80211_registered_device, %struct.cfg80211_registered_device* %4, i32 0, i32 28
  call void @mutex_destroy(%struct.mutex* %sched_scan_mtx)
  %5 = load %struct.cfg80211_registered_device*, %struct.cfg80211_registered_device** %rdev.addr, align 8
  %beacon_registrations = getelementptr inbounds %struct.cfg80211_registered_device, %struct.cfg80211_registered_device* %5, i32 0, i32 15
  %next = getelementptr inbounds %struct.list_head, %struct.list_head* %beacon_registrations, i32 0, i32 0
  %6 = load %struct.list_head*, %struct.list_head** %next, align 16
  store %struct.list_head* %6, %struct.list_head** %__mptr, align 8
  %7 = load %struct.list_head*, %struct.list_head** %__mptr, align 8
  %8 = bitcast %struct.list_head* %7 to i8*
  %add.ptr = getelementptr inbounds i8, i8* %8, i64 0
  %9 = bitcast i8* %add.ptr to %struct.cfg80211_beacon_registration*
  store %struct.cfg80211_beacon_registration* %9, %struct.cfg80211_beacon_registration** %tmp1, align 8
  %10 = load %struct.cfg80211_beacon_registration*, %struct.cfg80211_beacon_registration** %tmp1, align 8
  store %struct.cfg80211_beacon_registration* %10, %struct.cfg80211_beacon_registration** %reg, align 8
  %11 = load %struct.cfg80211_beacon_registration*, %struct.cfg80211_beacon_registration** %reg, align 8
  %list = getelementptr inbounds %struct.cfg80211_beacon_registration, %struct.cfg80211_beacon_registration* %11, i32 0, i32 0
  %next3 = getelementptr inbounds %struct.list_head, %struct.list_head* %list, i32 0, i32 0
  %12 = load %struct.list_head*, %struct.list_head** %next3, align 8
  store %struct.list_head* %12, %struct.list_head** %__mptr2, align 8
  %13 = load %struct.list_head*, %struct.list_head** %__mptr2, align 8
  %14 = bitcast %struct.list_head* %13 to i8*
  %add.ptr5 = getelementptr inbounds i8, i8* %14, i64 0
  %15 = bitcast i8* %add.ptr5 to %struct.cfg80211_beacon_registration*
  store %struct.cfg80211_beacon_registration* %15, %struct.cfg80211_beacon_registration** %tmp4, align 8
  %16 = load %struct.cfg80211_beacon_registration*, %struct.cfg80211_beacon_registration** %tmp4, align 8
  store %struct.cfg80211_beacon_registration* %16, %struct.cfg80211_beacon_registration** %treg, align 8
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %17 = load %struct.cfg80211_beacon_registration*, %struct.cfg80211_beacon_registration** %reg, align 8
  %list6 = getelementptr inbounds %struct.cfg80211_beacon_registration, %struct.cfg80211_beacon_registration* %17, i32 0, i32 0
  %18 = load %struct.cfg80211_registered_device*, %struct.cfg80211_registered_device** %rdev.addr, align 8
  %beacon_registrations7 = getelementptr inbounds %struct.cfg80211_registered_device, %struct.cfg80211_registered_device* %18, i32 0, i32 15
  %cmp = icmp ne %struct.list_head* %list6, %beacon_registrations7
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %19 = load %struct.cfg80211_beacon_registration*, %struct.cfg80211_beacon_registration** %reg, align 8
  %list8 = getelementptr inbounds %struct.cfg80211_beacon_registration, %struct.cfg80211_beacon_registration* %19, i32 0, i32 0
  call void @list_del(%struct.list_head* %list8)
  %20 = load %struct.cfg80211_beacon_registration*, %struct.cfg80211_beacon_registration** %reg, align 8
  %21 = bitcast %struct.cfg80211_beacon_registration* %20 to i8*
  call void @kfree(i8* %21)
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %22 = load %struct.cfg80211_beacon_registration*, %struct.cfg80211_beacon_registration** %treg, align 8
  store %struct.cfg80211_beacon_registration* %22, %struct.cfg80211_beacon_registration** %reg, align 8
  %23 = load %struct.cfg80211_beacon_registration*, %struct.cfg80211_beacon_registration** %treg, align 8
  %list10 = getelementptr inbounds %struct.cfg80211_beacon_registration, %struct.cfg80211_beacon_registration* %23, i32 0, i32 0
  %next11 = getelementptr inbounds %struct.list_head, %struct.list_head* %list10, i32 0, i32 0
  %24 = load %struct.list_head*, %struct.list_head** %next11, align 8
  store %struct.list_head* %24, %struct.list_head** %__mptr9, align 8
  %25 = load %struct.list_head*, %struct.list_head** %__mptr9, align 8
  %26 = bitcast %struct.list_head* %25 to i8*
  %add.ptr13 = getelementptr inbounds i8, i8* %26, i64 0
  %27 = bitcast i8* %add.ptr13 to %struct.cfg80211_beacon_registration*
  store %struct.cfg80211_beacon_registration* %27, %struct.cfg80211_beacon_registration** %tmp12, align 8
  %28 = load %struct.cfg80211_beacon_registration*, %struct.cfg80211_beacon_registration** %tmp12, align 8
  store %struct.cfg80211_beacon_registration* %28, %struct.cfg80211_beacon_registration** %treg, align 8
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %29 = load %struct.cfg80211_registered_device*, %struct.cfg80211_registered_device** %rdev.addr, align 8
  %bss_list = getelementptr inbounds %struct.cfg80211_registered_device, %struct.cfg80211_registered_device* %29, i32 0, i32 20
  %next15 = getelementptr inbounds %struct.list_head, %struct.list_head* %bss_list, i32 0, i32 0
  %30 = load %struct.list_head*, %struct.list_head** %next15, align 16
  store %struct.list_head* %30, %struct.list_head** %__mptr14, align 8
  %31 = load %struct.list_head*, %struct.list_head** %__mptr14, align 8
  %32 = bitcast %struct.list_head* %31 to i8*
  %add.ptr17 = getelementptr inbounds i8, i8* %32, i64 0
  %33 = bitcast i8* %add.ptr17 to %struct.cfg80211_internal_bss*
  store %struct.cfg80211_internal_bss* %33, %struct.cfg80211_internal_bss** %tmp16, align 8
  %34 = load %struct.cfg80211_internal_bss*, %struct.cfg80211_internal_bss** %tmp16, align 8
  store %struct.cfg80211_internal_bss* %34, %struct.cfg80211_internal_bss** %scan, align 8
  %35 = load %struct.cfg80211_internal_bss*, %struct.cfg80211_internal_bss** %scan, align 8
  %list19 = getelementptr inbounds %struct.cfg80211_internal_bss, %struct.cfg80211_internal_bss* %35, i32 0, i32 0
  %next20 = getelementptr inbounds %struct.list_head, %struct.list_head* %list19, i32 0, i32 0
  %36 = load %struct.list_head*, %struct.list_head** %next20, align 8
  store %struct.list_head* %36, %struct.list_head** %__mptr18, align 8
  %37 = load %struct.list_head*, %struct.list_head** %__mptr18, align 8
  %38 = bitcast %struct.list_head* %37 to i8*
  %add.ptr22 = getelementptr inbounds i8, i8* %38, i64 0
  %39 = bitcast i8* %add.ptr22 to %struct.cfg80211_internal_bss*
  store %struct.cfg80211_internal_bss* %39, %struct.cfg80211_internal_bss** %tmp21, align 8
  %40 = load %struct.cfg80211_internal_bss*, %struct.cfg80211_internal_bss** %tmp21, align 8
  store %struct.cfg80211_internal_bss* %40, %struct.cfg80211_internal_bss** %tmp, align 8
  br label %for.cond23

for.cond23:                                       ; preds = %for.inc28, %for.end
  %41 = load %struct.cfg80211_internal_bss*, %struct.cfg80211_internal_bss** %scan, align 8
  %list24 = getelementptr inbounds %struct.cfg80211_internal_bss, %struct.cfg80211_internal_bss* %41, i32 0, i32 0
  %42 = load %struct.cfg80211_registered_device*, %struct.cfg80211_registered_device** %rdev.addr, align 8
  %bss_list25 = getelementptr inbounds %struct.cfg80211_registered_device, %struct.cfg80211_registered_device* %42, i32 0, i32 20
  %cmp26 = icmp ne %struct.list_head* %list24, %bss_list25
  br i1 %cmp26, label %for.body27, label %for.end34

for.body27:                                       ; preds = %for.cond23
  %43 = load %struct.cfg80211_registered_device*, %struct.cfg80211_registered_device** %rdev.addr, align 8
  %wiphy = getelementptr inbounds %struct.cfg80211_registered_device, %struct.cfg80211_registered_device* %43, i32 0, i32 34
  %44 = load %struct.cfg80211_internal_bss*, %struct.cfg80211_internal_bss** %scan, align 8
  %pub = getelementptr inbounds %struct.cfg80211_internal_bss, %struct.cfg80211_internal_bss* %44, i32 0, i32 6
  call void @cfg80211_put_bss(%struct.wiphy* %wiphy, %struct.cfg80211_bss* %pub)
  br label %for.inc28

for.inc28:                                        ; preds = %for.body27
  %45 = load %struct.cfg80211_internal_bss*, %struct.cfg80211_internal_bss** %tmp, align 8
  store %struct.cfg80211_internal_bss* %45, %struct.cfg80211_internal_bss** %scan, align 8
  %46 = load %struct.cfg80211_internal_bss*, %struct.cfg80211_internal_bss** %tmp, align 8
  %list30 = getelementptr inbounds %struct.cfg80211_internal_bss, %struct.cfg80211_internal_bss* %46, i32 0, i32 0
  %next31 = getelementptr inbounds %struct.list_head, %struct.list_head* %list30, i32 0, i32 0
  %47 = load %struct.list_head*, %struct.list_head** %next31, align 8
  store %struct.list_head* %47, %struct.list_head** %__mptr29, align 8
  %48 = load %struct.list_head*, %struct.list_head** %__mptr29, align 8
  %49 = bitcast %struct.list_head* %48 to i8*
  %add.ptr33 = getelementptr inbounds i8, i8* %49, i64 0
  %50 = bitcast i8* %add.ptr33 to %struct.cfg80211_internal_bss*
  store %struct.cfg80211_internal_bss* %50, %struct.cfg80211_internal_bss** %tmp32, align 8
  %51 = load %struct.cfg80211_internal_bss*, %struct.cfg80211_internal_bss** %tmp32, align 8
  store %struct.cfg80211_internal_bss* %51, %struct.cfg80211_internal_bss** %tmp, align 8
  br label %for.cond23

for.end34:                                        ; preds = %for.cond23
  %52 = load %struct.cfg80211_registered_device*, %struct.cfg80211_registered_device** %rdev.addr, align 8
  %53 = bitcast %struct.cfg80211_registered_device* %52 to i8*
  call void @kfree(i8* %53)
  ret void
}

declare void @rfkill_destroy(%struct.rfkill*) #1

; Function Attrs: noinline nounwind optnone uwtable
define internal void @mutex_destroy(%struct.mutex* %lock) #0 {
entry:
  %lock.addr = alloca %struct.mutex*, align 8
  store %struct.mutex* %lock, %struct.mutex** %lock.addr, align 8
  ret void
}

; Function Attrs: noinline nounwind optnone uwtable
define internal void @list_del(%struct.list_head* %entry1) #0 {
entry:
  %entry.addr = alloca %struct.list_head*, align 8
  store %struct.list_head* %entry1, %struct.list_head** %entry.addr, align 8
  %0 = load %struct.list_head*, %struct.list_head** %entry.addr, align 8
  %prev = getelementptr inbounds %struct.list_head, %struct.list_head* %0, i32 0, i32 1
  %1 = load %struct.list_head*, %struct.list_head** %prev, align 8
  %2 = load %struct.list_head*, %struct.list_head** %entry.addr, align 8
  %next = getelementptr inbounds %struct.list_head, %struct.list_head* %2, i32 0, i32 0
  %3 = load %struct.list_head*, %struct.list_head** %next, align 8
  call void @__list_del(%struct.list_head* %1, %struct.list_head* %3)
  %4 = load %struct.list_head*, %struct.list_head** %entry.addr, align 8
  %next2 = getelementptr inbounds %struct.list_head, %struct.list_head* %4, i32 0, i32 0
  store %struct.list_head* bitcast (i8* getelementptr (i8, i8* inttoptr (i64 1048832 to i8*), i64 -2401263026318606336) to %struct.list_head*), %struct.list_head** %next2, align 8
  %5 = load %struct.list_head*, %struct.list_head** %entry.addr, align 8
  %prev3 = getelementptr inbounds %struct.list_head, %struct.list_head* %5, i32 0, i32 1
  store %struct.list_head* bitcast (i8* getelementptr (i8, i8* inttoptr (i64 2097664 to i8*), i64 -2401263026318606336) to %struct.list_head*), %struct.list_head** %prev3, align 8
  ret void
}

declare void @cfg80211_put_bss(%struct.wiphy*, %struct.cfg80211_bss*) #1

; Function Attrs: noinline nounwind optnone uwtable
define void @wiphy_free(%struct.wiphy* %wiphy) #0 {
entry:
  %wiphy.addr = alloca %struct.wiphy*, align 8
  store %struct.wiphy* %wiphy, %struct.wiphy** %wiphy.addr, align 8
  %0 = load %struct.wiphy*, %struct.wiphy** %wiphy.addr, align 8
  %dev = getelementptr inbounds %struct.wiphy, %struct.wiphy* %0, i32 0, i32 42
  call void @put_device(%struct.device* %dev)
  ret void
}

declare void @put_device(%struct.device*) #1

; Function Attrs: noinline nounwind optnone uwtable
define void @wiphy_rfkill_set_hw_state(%struct.wiphy* %wiphy, i1 zeroext %blocked) #0 {
entry:
  %wiphy.addr = alloca %struct.wiphy*, align 8
  %blocked.addr = alloca i8, align 1
  %rdev = alloca %struct.cfg80211_registered_device*, align 8
  store %struct.wiphy* %wiphy, %struct.wiphy** %wiphy.addr, align 8
  %frombool = zext i1 %blocked to i8
  store i8 %frombool, i8* %blocked.addr, align 1
  %0 = load %struct.wiphy*, %struct.wiphy** %wiphy.addr, align 8
  %call = call %struct.cfg80211_registered_device* @wiphy_to_dev(%struct.wiphy* %0)
  store %struct.cfg80211_registered_device* %call, %struct.cfg80211_registered_device** %rdev, align 8
  %1 = load %struct.cfg80211_registered_device*, %struct.cfg80211_registered_device** %rdev, align 8
  %rfkill = getelementptr inbounds %struct.cfg80211_registered_device, %struct.cfg80211_registered_device* %1, i32 0, i32 4
  %2 = load %struct.rfkill*, %struct.rfkill** %rfkill, align 8
  %3 = load i8, i8* %blocked.addr, align 1
  %tobool = trunc i8 %3 to i1
  %call1 = call zeroext i1 @rfkill_set_hw_state(%struct.rfkill* %2, i1 zeroext %tobool)
  br i1 %call1, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %4 = load %struct.cfg80211_registered_device*, %struct.cfg80211_registered_device** %rdev, align 8
  %rfkill_sync = getelementptr inbounds %struct.cfg80211_registered_device, %struct.cfg80211_registered_device* %4, i32 0, i32 5
  %call2 = call zeroext i1 @schedule_work(%struct.work_struct* %rfkill_sync)
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  ret void
}

declare zeroext i1 @rfkill_set_hw_state(%struct.rfkill*, i1 zeroext) #1

; Function Attrs: noinline nounwind optnone uwtable
define internal zeroext i1 @schedule_work(%struct.work_struct* %work) #0 {
entry:
  %work.addr = alloca %struct.work_struct*, align 8
  store %struct.work_struct* %work, %struct.work_struct** %work.addr, align 8
  %0 = load %struct.workqueue_struct*, %struct.workqueue_struct** @system_wq, align 8
  %1 = load %struct.work_struct*, %struct.work_struct** %work.addr, align 8
  %call = call zeroext i1 @queue_work(%struct.workqueue_struct* %0, %struct.work_struct* %1)
  ret i1 %call
}

; Function Attrs: noinline nounwind optnone uwtable
define void @cfg80211_unregister_wdev(%struct.wireless_dev* %wdev) #0 {
entry:
  %wdev.addr = alloca %struct.wireless_dev*, align 8
  %rdev = alloca %struct.cfg80211_registered_device*, align 8
  %__ret_warn_on = alloca i32, align 4
  %tmp = alloca i64, align 8
  %__ret_warn_once = alloca i32, align 4
  %__ret_warn_on37 = alloca i32, align 4
  %tmp54 = alloca i64, align 8
  %tmp65 = alloca i64, align 8
  store %struct.wireless_dev* %wdev, %struct.wireless_dev** %wdev.addr, align 8
  %0 = load %struct.wireless_dev*, %struct.wireless_dev** %wdev.addr, align 8
  %wiphy = getelementptr inbounds %struct.wireless_dev, %struct.wireless_dev* %0, i32 0, i32 0
  %1 = load %struct.wiphy*, %struct.wiphy** %wiphy, align 8
  %call = call %struct.cfg80211_registered_device* @wiphy_to_dev(%struct.wiphy* %1)
  store %struct.cfg80211_registered_device* %call, %struct.cfg80211_registered_device** %rdev, align 8
  br label %do.body

do.body:                                          ; preds = %entry
  %call1 = call i32 @rtnl_is_locked()
  %tobool = icmp ne i32 %call1, 0
  %lnot = xor i1 %tobool, true
  %lnot2 = xor i1 %lnot, true
  %lnot3 = xor i1 %lnot2, true
  %lnot.ext = zext i1 %lnot3 to i32
  %conv = sext i32 %lnot.ext to i64
  %tobool4 = icmp ne i64 %conv, 0
  br i1 %tobool4, label %if.then, label %if.end

if.then:                                          ; preds = %do.body
  %call5 = call i32 (i8*, ...) @printk(i8* getelementptr inbounds ([37 x i8], [37 x i8]* @.str.12, i32 0, i32 0), i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.3, i32 0, i32 0), i32 812)
  call void @dump_stack()
  br label %if.end

if.end:                                           ; preds = %if.then, %do.body
  br label %do.end

do.end:                                           ; preds = %if.end
  %2 = load %struct.wireless_dev*, %struct.wireless_dev** %wdev.addr, align 8
  %netdev = getelementptr inbounds %struct.wireless_dev, %struct.wireless_dev* %2, i32 0, i32 3
  %3 = load %struct.net_device*, %struct.net_device** %netdev, align 8
  %tobool6 = icmp ne %struct.net_device* %3, null
  %lnot7 = xor i1 %tobool6, true
  %lnot9 = xor i1 %lnot7, true
  %lnot.ext10 = zext i1 %lnot9 to i32
  store i32 %lnot.ext10, i32* %__ret_warn_on, align 4
  %4 = load i32, i32* %__ret_warn_on, align 4
  %tobool11 = icmp ne i32 %4, 0
  %lnot12 = xor i1 %tobool11, true
  %lnot14 = xor i1 %lnot12, true
  %lnot.ext15 = zext i1 %lnot14 to i32
  %conv16 = sext i32 %lnot.ext15 to i64
  %tobool17 = icmp ne i64 %conv16, 0
  br i1 %tobool17, label %if.then18, label %if.end19

if.then18:                                        ; preds = %do.end
  call void @warn_slowpath_null(i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.3, i32 0, i32 0), i32 814)
  br label %if.end19

if.end19:                                         ; preds = %if.then18, %do.end
  %5 = load i32, i32* %__ret_warn_on, align 4
  %tobool20 = icmp ne i32 %5, 0
  %lnot21 = xor i1 %tobool20, true
  %lnot23 = xor i1 %lnot21, true
  %lnot.ext24 = zext i1 %lnot23 to i32
  %conv25 = sext i32 %lnot.ext24 to i64
  store i64 %conv25, i64* %tmp, align 8
  %6 = load i64, i64* %tmp, align 8
  %tobool26 = icmp ne i64 %6, 0
  br i1 %tobool26, label %if.then27, label %if.end28

if.then27:                                        ; preds = %if.end19
  br label %return

if.end28:                                         ; preds = %if.end19
  %7 = load %struct.cfg80211_registered_device*, %struct.cfg80211_registered_device** %rdev, align 8
  %devlist_mtx = getelementptr inbounds %struct.cfg80211_registered_device, %struct.cfg80211_registered_device* %7, i32 0, i32 9
  call void @mutex_lock(%struct.mutex* %devlist_mtx)
  %8 = load %struct.cfg80211_registered_device*, %struct.cfg80211_registered_device** %rdev, align 8
  %sched_scan_mtx = getelementptr inbounds %struct.cfg80211_registered_device, %struct.cfg80211_registered_device* %8, i32 0, i32 28
  call void @mutex_lock(%struct.mutex* %sched_scan_mtx)
  %9 = load %struct.wireless_dev*, %struct.wireless_dev** %wdev.addr, align 8
  %list = getelementptr inbounds %struct.wireless_dev, %struct.wireless_dev* %9, i32 0, i32 2
  call void @list_del_rcu(%struct.list_head* %list)
  %10 = load %struct.cfg80211_registered_device*, %struct.cfg80211_registered_device** %rdev, align 8
  %devlist_generation = getelementptr inbounds %struct.cfg80211_registered_device, %struct.cfg80211_registered_device* %10, i32 0, i32 11
  %11 = load i32, i32* %devlist_generation, align 8
  %inc = add nsw i32 %11, 1
  store i32 %inc, i32* %devlist_generation, align 8
  %12 = load %struct.wireless_dev*, %struct.wireless_dev** %wdev.addr, align 8
  %iftype = getelementptr inbounds %struct.wireless_dev, %struct.wireless_dev* %12, i32 0, i32 1
  %13 = load i32, i32* %iftype, align 8
  br label %LeafBlock

LeafBlock:                                        ; preds = %if.end28
  %SwitchLeaf = icmp eq i32 %13, 10
  br i1 %SwitchLeaf, label %sw.bb, label %NewDefault

sw.bb:                                            ; preds = %LeafBlock
  %14 = load %struct.cfg80211_registered_device*, %struct.cfg80211_registered_device** %rdev, align 8
  %15 = load %struct.wireless_dev*, %struct.wireless_dev** %wdev.addr, align 8
  call void @cfg80211_stop_p2p_device(%struct.cfg80211_registered_device* %14, %struct.wireless_dev* %15)
  br label %sw.epilog

NewDefault:                                       ; preds = %LeafBlock
  br label %sw.default

sw.default:                                       ; preds = %NewDefault
  store i32 1, i32* %__ret_warn_once, align 4
  %16 = load i32, i32* %__ret_warn_once, align 4
  %tobool29 = icmp ne i32 %16, 0
  %lnot30 = xor i1 %tobool29, true
  %lnot32 = xor i1 %lnot30, true
  %lnot.ext33 = zext i1 %lnot32 to i32
  %conv34 = sext i32 %lnot.ext33 to i64
  %tobool35 = icmp ne i64 %conv34, 0
  br i1 %tobool35, label %if.then36, label %if.end64

if.then36:                                        ; preds = %sw.default
  %17 = load i8, i8* @cfg80211_unregister_wdev.__warned, align 1
  %tobool38 = trunc i8 %17 to i1
  %lnot39 = xor i1 %tobool38, true
  %lnot41 = xor i1 %lnot39, true
  %lnot43 = xor i1 %lnot41, true
  %lnot.ext44 = zext i1 %lnot43 to i32
  store i32 %lnot.ext44, i32* %__ret_warn_on37, align 4
  %18 = load i32, i32* %__ret_warn_on37, align 4
  %tobool45 = icmp ne i32 %18, 0
  %lnot46 = xor i1 %tobool45, true
  %lnot48 = xor i1 %lnot46, true
  %lnot.ext49 = zext i1 %lnot48 to i32
  %conv50 = sext i32 %lnot.ext49 to i64
  %tobool51 = icmp ne i64 %conv50, 0
  br i1 %tobool51, label %if.then52, label %if.end53

if.then52:                                        ; preds = %if.then36
  call void @warn_slowpath_null(i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.3, i32 0, i32 0), i32 827)
  br label %if.end53

if.end53:                                         ; preds = %if.then52, %if.then36
  %19 = load i32, i32* %__ret_warn_on37, align 4
  %tobool55 = icmp ne i32 %19, 0
  %lnot56 = xor i1 %tobool55, true
  %lnot58 = xor i1 %lnot56, true
  %lnot.ext59 = zext i1 %lnot58 to i32
  %conv60 = sext i32 %lnot.ext59 to i64
  store i64 %conv60, i64* %tmp54, align 8
  %20 = load i64, i64* %tmp54, align 8
  %tobool61 = icmp ne i64 %20, 0
  br i1 %tobool61, label %if.then62, label %if.end63

if.then62:                                        ; preds = %if.end53
  store i8 1, i8* @cfg80211_unregister_wdev.__warned, align 1
  br label %if.end63

if.end63:                                         ; preds = %if.then62, %if.end53
  br label %if.end64

if.end64:                                         ; preds = %if.end63, %sw.default
  %21 = load i32, i32* %__ret_warn_once, align 4
  %tobool66 = icmp ne i32 %21, 0
  %lnot67 = xor i1 %tobool66, true
  %lnot69 = xor i1 %lnot67, true
  %lnot.ext70 = zext i1 %lnot69 to i32
  %conv71 = sext i32 %lnot.ext70 to i64
  store i64 %conv71, i64* %tmp65, align 8
  %22 = load i64, i64* %tmp65, align 8
  br label %sw.epilog

sw.epilog:                                        ; preds = %if.end64, %sw.bb
  %23 = load %struct.cfg80211_registered_device*, %struct.cfg80211_registered_device** %rdev, align 8
  %sched_scan_mtx72 = getelementptr inbounds %struct.cfg80211_registered_device, %struct.cfg80211_registered_device* %23, i32 0, i32 28
  call void @mutex_unlock(%struct.mutex* %sched_scan_mtx72)
  %24 = load %struct.cfg80211_registered_device*, %struct.cfg80211_registered_device** %rdev, align 8
  %devlist_mtx73 = getelementptr inbounds %struct.cfg80211_registered_device, %struct.cfg80211_registered_device* %24, i32 0, i32 9
  call void @mutex_unlock(%struct.mutex* %devlist_mtx73)
  br label %return

return:                                           ; preds = %sw.epilog, %if.then27
  ret void
}

declare i32 @rtnl_is_locked() #1

declare void @dump_stack() #1

; Function Attrs: noinline nounwind optnone uwtable
define void @cfg80211_update_iface_num(%struct.cfg80211_registered_device* %rdev, i32 %iftype, i32 %num) #0 {
entry:
  %rdev.addr = alloca %struct.cfg80211_registered_device*, align 8
  %iftype.addr = alloca i32, align 4
  %num.addr = alloca i32, align 4
  store %struct.cfg80211_registered_device* %rdev, %struct.cfg80211_registered_device** %rdev.addr, align 8
  store i32 %iftype, i32* %iftype.addr, align 4
  store i32 %num, i32* %num.addr, align 4
  br label %do.body

do.body:                                          ; preds = %entry
  %call = call i32 @rtnl_is_locked()
  %tobool = icmp ne i32 %call, 0
  %lnot = xor i1 %tobool, true
  %lnot1 = xor i1 %lnot, true
  %lnot2 = xor i1 %lnot1, true
  %lnot.ext = zext i1 %lnot2 to i32
  %conv = sext i32 %lnot.ext to i64
  %tobool3 = icmp ne i64 %conv, 0
  br i1 %tobool3, label %if.then, label %if.end

if.then:                                          ; preds = %do.body
  %call4 = call i32 (i8*, ...) @printk(i8* getelementptr inbounds ([37 x i8], [37 x i8]* @.str.12, i32 0, i32 0), i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.3, i32 0, i32 0), i32 842)
  call void @dump_stack()
  br label %if.end

if.end:                                           ; preds = %if.then, %do.body
  br label %do.end

do.end:                                           ; preds = %if.end
  %0 = load i32, i32* %num.addr, align 4
  %1 = load %struct.cfg80211_registered_device*, %struct.cfg80211_registered_device** %rdev.addr, align 8
  %num_running_ifaces = getelementptr inbounds %struct.cfg80211_registered_device, %struct.cfg80211_registered_device* %1, i32 0, i32 17
  %2 = load i32, i32* %num_running_ifaces, align 4
  %add = add nsw i32 %2, %0
  store i32 %add, i32* %num_running_ifaces, align 4
  %3 = load i32, i32* %iftype.addr, align 4
  %cmp = icmp eq i32 %3, 6
  br i1 %cmp, label %if.then6, label %if.end8

if.then6:                                         ; preds = %do.end
  %4 = load i32, i32* %num.addr, align 4
  %5 = load %struct.cfg80211_registered_device*, %struct.cfg80211_registered_device** %rdev.addr, align 8
  %num_running_monitor_ifaces = getelementptr inbounds %struct.cfg80211_registered_device, %struct.cfg80211_registered_device* %5, i32 0, i32 18
  %6 = load i32, i32* %num_running_monitor_ifaces, align 8
  %add7 = add nsw i32 %6, %4
  store i32 %add7, i32* %num_running_monitor_ifaces, align 8
  br label %if.end8

if.end8:                                          ; preds = %if.then6, %do.end
  ret void
}

; Function Attrs: noinline nounwind optnone uwtable
define void @cfg80211_leave(%struct.cfg80211_registered_device* %rdev, %struct.wireless_dev* %wdev) #0 {
entry:
  %rdev.addr = alloca %struct.cfg80211_registered_device*, align 8
  %wdev.addr = alloca %struct.wireless_dev*, align 8
  %dev = alloca %struct.net_device*, align 8
  store %struct.cfg80211_registered_device* %rdev, %struct.cfg80211_registered_device** %rdev.addr, align 8
  store %struct.wireless_dev* %wdev, %struct.wireless_dev** %wdev.addr, align 8
  %0 = load %struct.wireless_dev*, %struct.wireless_dev** %wdev.addr, align 8
  %netdev = getelementptr inbounds %struct.wireless_dev, %struct.wireless_dev* %0, i32 0, i32 3
  %1 = load %struct.net_device*, %struct.net_device** %netdev, align 8
  store %struct.net_device* %1, %struct.net_device** %dev, align 8
  %2 = load %struct.wireless_dev*, %struct.wireless_dev** %wdev.addr, align 8
  %iftype = getelementptr inbounds %struct.wireless_dev, %struct.wireless_dev* %2, i32 0, i32 1
  %3 = load i32, i32* %iftype, align 8
  br label %NodeBlock9

NodeBlock9:                                       ; preds = %entry
  %Pivot10 = icmp slt i32 %3, 3
  br i1 %Pivot10, label %NodeBlock, label %NodeBlock7

NodeBlock7:                                       ; preds = %NodeBlock9
  %Pivot8 = icmp slt i32 %3, 7
  br i1 %Pivot8, label %LeafBlock1, label %NodeBlock5

NodeBlock5:                                       ; preds = %NodeBlock7
  %Pivot6 = icmp slt i32 %3, 8
  br i1 %Pivot6, label %sw.bb5, label %LeafBlock3

LeafBlock3:                                       ; preds = %NodeBlock5
  %SwitchLeaf4 = icmp eq i32 %3, 8
  br i1 %SwitchLeaf4, label %sw.bb1, label %NewDefault

LeafBlock1:                                       ; preds = %NodeBlock7
  %SwitchLeaf2 = icmp eq i32 %3, 3
  br i1 %SwitchLeaf2, label %sw.bb7, label %NewDefault

NodeBlock:                                        ; preds = %NodeBlock9
  %Pivot = icmp slt i32 %3, 2
  br i1 %Pivot, label %LeafBlock, label %sw.bb1

LeafBlock:                                        ; preds = %NodeBlock
  %SwitchLeaf = icmp eq i32 %3, 1
  br i1 %SwitchLeaf, label %sw.bb, label %NewDefault

sw.bb:                                            ; preds = %LeafBlock
  %4 = load %struct.cfg80211_registered_device*, %struct.cfg80211_registered_device** %rdev.addr, align 8
  %5 = load %struct.net_device*, %struct.net_device** %dev, align 8
  %call = call i32 @cfg80211_leave_ibss(%struct.cfg80211_registered_device* %4, %struct.net_device* %5, i1 zeroext true)
  br label %sw.epilog

sw.bb1:                                           ; preds = %LeafBlock3, %NodeBlock
  %6 = load %struct.cfg80211_registered_device*, %struct.cfg80211_registered_device** %rdev.addr, align 8
  %sched_scan_mtx = getelementptr inbounds %struct.cfg80211_registered_device, %struct.cfg80211_registered_device* %6, i32 0, i32 28
  call void @mutex_lock(%struct.mutex* %sched_scan_mtx)
  %7 = load %struct.cfg80211_registered_device*, %struct.cfg80211_registered_device** %rdev.addr, align 8
  %call2 = call i32 @__cfg80211_stop_sched_scan(%struct.cfg80211_registered_device* %7, i1 zeroext false)
  %8 = load %struct.cfg80211_registered_device*, %struct.cfg80211_registered_device** %rdev.addr, align 8
  %sched_scan_mtx3 = getelementptr inbounds %struct.cfg80211_registered_device, %struct.cfg80211_registered_device* %8, i32 0, i32 28
  call void @mutex_unlock(%struct.mutex* %sched_scan_mtx3)
  %9 = load %struct.wireless_dev*, %struct.wireless_dev** %wdev.addr, align 8
  call void @wdev_lock(%struct.wireless_dev* %9)
  %10 = load %struct.cfg80211_registered_device*, %struct.cfg80211_registered_device** %rdev.addr, align 8
  %11 = load %struct.net_device*, %struct.net_device** %dev, align 8
  %call4 = call i32 @__cfg80211_disconnect(%struct.cfg80211_registered_device* %10, %struct.net_device* %11, i16 zeroext 3, i1 zeroext true)
  %12 = load %struct.wireless_dev*, %struct.wireless_dev** %wdev.addr, align 8
  call void @wdev_unlock(%struct.wireless_dev* %12)
  br label %sw.epilog

sw.bb5:                                           ; preds = %NodeBlock5
  %13 = load %struct.cfg80211_registered_device*, %struct.cfg80211_registered_device** %rdev.addr, align 8
  %14 = load %struct.net_device*, %struct.net_device** %dev, align 8
  %call6 = call i32 @cfg80211_leave_mesh(%struct.cfg80211_registered_device* %13, %struct.net_device* %14)
  br label %sw.epilog

sw.bb7:                                           ; preds = %LeafBlock1
  %15 = load %struct.cfg80211_registered_device*, %struct.cfg80211_registered_device** %rdev.addr, align 8
  %16 = load %struct.net_device*, %struct.net_device** %dev, align 8
  %call8 = call i32 @cfg80211_stop_ap(%struct.cfg80211_registered_device* %15, %struct.net_device* %16)
  br label %sw.epilog

NewDefault:                                       ; preds = %LeafBlock3, %LeafBlock1, %LeafBlock
  br label %sw.default

sw.default:                                       ; preds = %NewDefault
  br label %sw.epilog

sw.epilog:                                        ; preds = %sw.default, %sw.bb7, %sw.bb5, %sw.bb1, %sw.bb
  %17 = load %struct.wireless_dev*, %struct.wireless_dev** %wdev.addr, align 8
  %beacon_interval = getelementptr inbounds %struct.wireless_dev, %struct.wireless_dev* %17, i32 0, i32 27
  store i32 0, i32* %beacon_interval, align 8
  ret void
}

declare i32 @cfg80211_leave_ibss(%struct.cfg80211_registered_device*, %struct.net_device*, i1 zeroext) #1

declare i32 @__cfg80211_stop_sched_scan(%struct.cfg80211_registered_device*, i1 zeroext) #1

; Function Attrs: noinline nounwind optnone uwtable
define internal void @wdev_lock(%struct.wireless_dev* %wdev) #0 {
entry:
  %wdev.addr = alloca %struct.wireless_dev*, align 8
  store %struct.wireless_dev* %wdev, %struct.wireless_dev** %wdev.addr, align 8
  %0 = load %struct.wireless_dev*, %struct.wireless_dev** %wdev.addr, align 8
  %mtx = getelementptr inbounds %struct.wireless_dev, %struct.wireless_dev* %0, i32 0, i32 7
  call void @mutex_lock(%struct.mutex* %mtx)
  ret void
}

declare i32 @__cfg80211_disconnect(%struct.cfg80211_registered_device*, %struct.net_device*, i16 zeroext, i1 zeroext) #1

; Function Attrs: noinline nounwind optnone uwtable
define internal void @wdev_unlock(%struct.wireless_dev* %wdev) #0 {
entry:
  %wdev.addr = alloca %struct.wireless_dev*, align 8
  store %struct.wireless_dev* %wdev, %struct.wireless_dev** %wdev.addr, align 8
  %0 = load %struct.wireless_dev*, %struct.wireless_dev** %wdev.addr, align 8
  %mtx = getelementptr inbounds %struct.wireless_dev, %struct.wireless_dev* %0, i32 0, i32 7
  call void @mutex_unlock(%struct.mutex* %mtx)
  ret void
}

declare i32 @cfg80211_leave_mesh(%struct.cfg80211_registered_device*, %struct.net_device*) #1

declare i32 @cfg80211_stop_ap(%struct.cfg80211_registered_device*, %struct.net_device*) #1

; Function Attrs: noinline nounwind optnone uwtable
define internal i32 @cfg80211_init() #0 section ".init.text" {
entry:
  %retval = alloca i32, align 4
  %err = alloca i32, align 4
  %call = call i32 @register_pernet_device(%struct.pernet_operations* @cfg80211_pernet_ops)
  store i32 %call, i32* %err, align 4
  %0 = load i32, i32* %err, align 4
  %tobool = icmp ne i32 %0, 0
  br i1 %tobool, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  br label %out_fail_pernet

if.end:                                           ; preds = %entry
  %call1 = call i32 @wiphy_sysfs_init()
  store i32 %call1, i32* %err, align 4
  %1 = load i32, i32* %err, align 4
  %tobool2 = icmp ne i32 %1, 0
  br i1 %tobool2, label %if.then3, label %if.end4

if.then3:                                         ; preds = %if.end
  br label %out_fail_sysfs

if.end4:                                          ; preds = %if.end
  %call5 = call i32 @register_netdevice_notifier(%struct.notifier_block* @cfg80211_netdev_notifier)
  store i32 %call5, i32* %err, align 4
  %2 = load i32, i32* %err, align 4
  %tobool6 = icmp ne i32 %2, 0
  br i1 %tobool6, label %if.then7, label %if.end8

if.then7:                                         ; preds = %if.end4
  br label %out_fail_notifier

if.end8:                                          ; preds = %if.end4
  %call9 = call i32 @nl80211_init()
  store i32 %call9, i32* %err, align 4
  %3 = load i32, i32* %err, align 4
  %tobool10 = icmp ne i32 %3, 0
  br i1 %tobool10, label %if.then11, label %if.end12

if.then11:                                        ; preds = %if.end8
  br label %out_fail_nl80211

if.end12:                                         ; preds = %if.end8
  %call13 = call %struct.dentry* @debugfs_create_dir(i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.14, i32 0, i32 0), %struct.dentry* null)
  store %struct.dentry* %call13, %struct.dentry** @ieee80211_debugfs_dir, align 8
  %call14 = call i32 @regulatory_init()
  store i32 %call14, i32* %err, align 4
  %4 = load i32, i32* %err, align 4
  %tobool15 = icmp ne i32 %4, 0
  br i1 %tobool15, label %if.then16, label %if.end17

if.then16:                                        ; preds = %if.end12
  br label %out_fail_reg

if.end17:                                         ; preds = %if.end12
  %call18 = call %struct.workqueue_struct* (i8*, i32, i32, %struct.lock_class_key*, i8*, ...) @__alloc_workqueue_key(i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.15, i32 0, i32 0), i32 10, i32 1, %struct.lock_class_key* null, i8* null)
  store %struct.workqueue_struct* %call18, %struct.workqueue_struct** @cfg80211_wq, align 8
  %5 = load %struct.workqueue_struct*, %struct.workqueue_struct** @cfg80211_wq, align 8
  %tobool19 = icmp ne %struct.workqueue_struct* %5, null
  br i1 %tobool19, label %if.end21, label %if.then20

if.then20:                                        ; preds = %if.end17
  store i32 -12, i32* %err, align 4
  br label %out_fail_wq

if.end21:                                         ; preds = %if.end17
  store i32 0, i32* %retval, align 4
  br label %return

out_fail_wq:                                      ; preds = %if.then20
  call void @regulatory_exit()
  br label %out_fail_reg

out_fail_reg:                                     ; preds = %out_fail_wq, %if.then16
  %6 = load %struct.dentry*, %struct.dentry** @ieee80211_debugfs_dir, align 8
  call void @debugfs_remove(%struct.dentry* %6)
  br label %out_fail_nl80211

out_fail_nl80211:                                 ; preds = %out_fail_reg, %if.then11
  %call22 = call i32 @unregister_netdevice_notifier(%struct.notifier_block* @cfg80211_netdev_notifier)
  br label %out_fail_notifier

out_fail_notifier:                                ; preds = %out_fail_nl80211, %if.then7
  call void @wiphy_sysfs_exit()
  br label %out_fail_sysfs

out_fail_sysfs:                                   ; preds = %out_fail_notifier, %if.then3
  call void @unregister_pernet_device(%struct.pernet_operations* @cfg80211_pernet_ops)
  br label %out_fail_pernet

out_fail_pernet:                                  ; preds = %out_fail_sysfs, %if.then
  %7 = load i32, i32* %err, align 4
  store i32 %7, i32* %retval, align 4
  br label %return

return:                                           ; preds = %out_fail_pernet, %if.end21
  %8 = load i32, i32* %retval, align 4
  ret i32 %8
}

; Function Attrs: noinline nounwind optnone uwtable
define internal void @cfg80211_exit() #0 section ".exit.text" {
entry:
  %0 = load %struct.dentry*, %struct.dentry** @ieee80211_debugfs_dir, align 8
  call void @debugfs_remove(%struct.dentry* %0)
  call void @nl80211_exit()
  %call = call i32 @unregister_netdevice_notifier(%struct.notifier_block* @cfg80211_netdev_notifier)
  call void @wiphy_sysfs_exit()
  call void @regulatory_exit()
  call void @unregister_pernet_device(%struct.pernet_operations* @cfg80211_pernet_ops)
  %1 = load %struct.workqueue_struct*, %struct.workqueue_struct** @cfg80211_wq, align 8
  call void @destroy_workqueue(%struct.workqueue_struct* %1)
  ret void
}

declare void @debugfs_remove(%struct.dentry*) #1

declare void @nl80211_exit() #1

declare i32 @unregister_netdevice_notifier(%struct.notifier_block*) #1

declare void @wiphy_sysfs_exit() #1

declare void @regulatory_exit() #1

declare void @unregister_pernet_device(%struct.pernet_operations*) #1

declare void @destroy_workqueue(%struct.workqueue_struct*) #1

; Function Attrs: noinline nounwind optnone uwtable
define internal i8* @kobject_name(%struct.kobject* %kobj) #0 {
entry:
  %kobj.addr = alloca %struct.kobject*, align 8
  store %struct.kobject* %kobj, %struct.kobject** %kobj.addr, align 8
  %0 = load %struct.kobject*, %struct.kobject** %kobj.addr, align 8
  %name = getelementptr inbounds %struct.kobject, %struct.kobject* %0, i32 0, i32 0
  %1 = load i8*, i8** %name, align 8
  ret i8* %1
}

; Function Attrs: noinline nounwind optnone uwtable
define internal %struct.net* @read_pnet(%struct.net** %pnet) #0 {
entry:
  %pnet.addr = alloca %struct.net**, align 8
  store %struct.net** %pnet, %struct.net*** %pnet.addr, align 8
  %0 = load %struct.net**, %struct.net*** %pnet.addr, align 8
  %1 = load %struct.net*, %struct.net** %0, align 8
  ret %struct.net* %1
}

; Function Attrs: noinline nounwind optnone uwtable
define internal void @write_pnet(%struct.net** %pnet, %struct.net* %net) #0 {
entry:
  %pnet.addr = alloca %struct.net**, align 8
  %net.addr = alloca %struct.net*, align 8
  store %struct.net** %pnet, %struct.net*** %pnet.addr, align 8
  store %struct.net* %net, %struct.net** %net.addr, align 8
  %0 = load %struct.net*, %struct.net** %net.addr, align 8
  %1 = load %struct.net**, %struct.net*** %pnet.addr, align 8
  store %struct.net* %0, %struct.net** %1, align 8
  ret void
}

; Function Attrs: noinline nounwind optnone uwtable
define internal void @trace_rdev_stop_p2p_device(%struct.wiphy* %wiphy, %struct.wireless_dev* %wdev) #0 {
entry:
  %retval.i = alloca i1, align 1
  %key.addr.i = alloca %struct.static_key*, align 8
  %wiphy.addr = alloca %struct.wiphy*, align 8
  %wdev.addr = alloca %struct.wireless_dev*, align 8
  %it_func_ptr = alloca %struct.tracepoint_func*, align 8
  %it_func = alloca i8*, align 8
  %__data = alloca i8*, align 8
  %_________p1 = alloca %struct.tracepoint_func*, align 8
  %tmp = alloca %struct.tracepoint_func*, align 8
  store %struct.wiphy* %wiphy, %struct.wiphy** %wiphy.addr, align 8
  store %struct.wireless_dev* %wdev, %struct.wireless_dev** %wdev.addr, align 8
  store %struct.static_key* getelementptr inbounds (%struct.tracepoint, %struct.tracepoint* @__tracepoint_rdev_stop_p2p_device, i32 0, i32 1), %struct.static_key** %key.addr.i, align 8
  %0 = load %struct.static_key*, %struct.static_key** %key.addr.i, align 8
  %enabled.i = getelementptr inbounds %struct.static_key, %struct.static_key* %0, i32 0, i32 0
  %call.i = call i32 @atomic_read(%struct.atomic_t* %enabled.i) #3
  %tobool.i = icmp ne i32 %call.i, 0
  %lnot.i = xor i1 %tobool.i, true
  %lnot.ext.i = zext i1 %tobool.i to i32
  %conv.i = sext i32 %lnot.ext.i to i64
  br i1 %tobool.i, label %if.then.i, label %if.end.i

if.then.i:                                        ; preds = %entry
  store i1 true, i1* %retval.i, align 1
  br label %static_key_false.exit

if.end.i:                                         ; preds = %entry
  store i1 false, i1* %retval.i, align 1
  br label %static_key_false.exit

static_key_false.exit:                            ; preds = %if.end.i, %if.then.i
  %1 = load i1, i1* %retval.i, align 1
  br i1 %1, label %if.then, label %if.end11

if.then:                                          ; preds = %static_key_false.exit
  br label %do.body

do.body:                                          ; preds = %if.then
  call void @rcu_read_lock_sched_notrace()
  %2 = load volatile %struct.tracepoint_func*, %struct.tracepoint_func** getelementptr inbounds (%struct.tracepoint, %struct.tracepoint* @__tracepoint_rdev_stop_p2p_device, i32 0, i32 4), align 8
  store %struct.tracepoint_func* %2, %struct.tracepoint_func** %_________p1, align 8
  br label %do.body1

do.body1:                                         ; preds = %do.body
  br label %do.end

do.end:                                           ; preds = %do.body1
  br label %do.body2

do.body2:                                         ; preds = %do.end
  br label %do.end3

do.end3:                                          ; preds = %do.body2
  %3 = load %struct.tracepoint_func*, %struct.tracepoint_func** %_________p1, align 8
  store %struct.tracepoint_func* %3, %struct.tracepoint_func** %tmp, align 8
  %4 = load %struct.tracepoint_func*, %struct.tracepoint_func** %tmp, align 8
  store %struct.tracepoint_func* %4, %struct.tracepoint_func** %it_func_ptr, align 8
  %5 = load %struct.tracepoint_func*, %struct.tracepoint_func** %it_func_ptr, align 8
  %tobool = icmp ne %struct.tracepoint_func* %5, null
  br i1 %tobool, label %if.then4, label %if.end

if.then4:                                         ; preds = %do.end3
  br label %do.body5

do.body5:                                         ; preds = %do.cond, %if.then4
  %6 = load %struct.tracepoint_func*, %struct.tracepoint_func** %it_func_ptr, align 8
  %func = getelementptr inbounds %struct.tracepoint_func, %struct.tracepoint_func* %6, i32 0, i32 0
  %7 = load i8*, i8** %func, align 8
  store i8* %7, i8** %it_func, align 8
  %8 = load %struct.tracepoint_func*, %struct.tracepoint_func** %it_func_ptr, align 8
  %data = getelementptr inbounds %struct.tracepoint_func, %struct.tracepoint_func* %8, i32 0, i32 1
  %9 = load i8*, i8** %data, align 8
  store i8* %9, i8** %__data, align 8
  %10 = load i8*, i8** %it_func, align 8
  %11 = bitcast i8* %10 to void (i8*, %struct.wiphy*, %struct.wireless_dev*)*
  %12 = load i8*, i8** %__data, align 8
  %13 = load %struct.wiphy*, %struct.wiphy** %wiphy.addr, align 8
  %14 = load %struct.wireless_dev*, %struct.wireless_dev** %wdev.addr, align 8
  call void %11(i8* %12, %struct.wiphy* %13, %struct.wireless_dev* %14)
  br label %do.cond

do.cond:                                          ; preds = %do.body5
  %15 = load %struct.tracepoint_func*, %struct.tracepoint_func** %it_func_ptr, align 8
  %incdec.ptr = getelementptr inbounds %struct.tracepoint_func, %struct.tracepoint_func* %15, i32 1
  store %struct.tracepoint_func* %incdec.ptr, %struct.tracepoint_func** %it_func_ptr, align 8
  %func6 = getelementptr inbounds %struct.tracepoint_func, %struct.tracepoint_func* %incdec.ptr, i32 0, i32 0
  %16 = load i8*, i8** %func6, align 8
  %tobool7 = icmp ne i8* %16, null
  br i1 %tobool7, label %do.body5, label %do.end8

do.end8:                                          ; preds = %do.cond
  br label %if.end

if.end:                                           ; preds = %do.end8, %do.end3
  call void @rcu_read_unlock_sched_notrace()
  br label %do.end10

do.end10:                                         ; preds = %if.end
  br label %if.end11

if.end11:                                         ; preds = %do.end10, %static_key_false.exit
  ret void
}

; Function Attrs: noinline nounwind optnone uwtable
define internal void @trace_rdev_return_void(%struct.wiphy* %wiphy) #0 {
entry:
  %retval.i = alloca i1, align 1
  %key.addr.i = alloca %struct.static_key*, align 8
  %wiphy.addr = alloca %struct.wiphy*, align 8
  %it_func_ptr = alloca %struct.tracepoint_func*, align 8
  %it_func = alloca i8*, align 8
  %__data = alloca i8*, align 8
  %_________p1 = alloca %struct.tracepoint_func*, align 8
  %tmp = alloca %struct.tracepoint_func*, align 8
  store %struct.wiphy* %wiphy, %struct.wiphy** %wiphy.addr, align 8
  store %struct.static_key* getelementptr inbounds (%struct.tracepoint, %struct.tracepoint* @__tracepoint_rdev_return_void, i32 0, i32 1), %struct.static_key** %key.addr.i, align 8
  %0 = load %struct.static_key*, %struct.static_key** %key.addr.i, align 8
  %enabled.i = getelementptr inbounds %struct.static_key, %struct.static_key* %0, i32 0, i32 0
  %call.i = call i32 @atomic_read(%struct.atomic_t* %enabled.i) #3
  %tobool.i = icmp ne i32 %call.i, 0
  %lnot.i = xor i1 %tobool.i, true
  %lnot.ext.i = zext i1 %tobool.i to i32
  %conv.i = sext i32 %lnot.ext.i to i64
  br i1 %tobool.i, label %if.then.i, label %if.end.i

if.then.i:                                        ; preds = %entry
  store i1 true, i1* %retval.i, align 1
  br label %static_key_false.exit

if.end.i:                                         ; preds = %entry
  store i1 false, i1* %retval.i, align 1
  br label %static_key_false.exit

static_key_false.exit:                            ; preds = %if.end.i, %if.then.i
  %1 = load i1, i1* %retval.i, align 1
  br i1 %1, label %if.then, label %if.end11

if.then:                                          ; preds = %static_key_false.exit
  br label %do.body

do.body:                                          ; preds = %if.then
  call void @rcu_read_lock_sched_notrace()
  %2 = load volatile %struct.tracepoint_func*, %struct.tracepoint_func** getelementptr inbounds (%struct.tracepoint, %struct.tracepoint* @__tracepoint_rdev_return_void, i32 0, i32 4), align 8
  store %struct.tracepoint_func* %2, %struct.tracepoint_func** %_________p1, align 8
  br label %do.body1

do.body1:                                         ; preds = %do.body
  br label %do.end

do.end:                                           ; preds = %do.body1
  br label %do.body2

do.body2:                                         ; preds = %do.end
  br label %do.end3

do.end3:                                          ; preds = %do.body2
  %3 = load %struct.tracepoint_func*, %struct.tracepoint_func** %_________p1, align 8
  store %struct.tracepoint_func* %3, %struct.tracepoint_func** %tmp, align 8
  %4 = load %struct.tracepoint_func*, %struct.tracepoint_func** %tmp, align 8
  store %struct.tracepoint_func* %4, %struct.tracepoint_func** %it_func_ptr, align 8
  %5 = load %struct.tracepoint_func*, %struct.tracepoint_func** %it_func_ptr, align 8
  %tobool = icmp ne %struct.tracepoint_func* %5, null
  br i1 %tobool, label %if.then4, label %if.end

if.then4:                                         ; preds = %do.end3
  br label %do.body5

do.body5:                                         ; preds = %do.cond, %if.then4
  %6 = load %struct.tracepoint_func*, %struct.tracepoint_func** %it_func_ptr, align 8
  %func = getelementptr inbounds %struct.tracepoint_func, %struct.tracepoint_func* %6, i32 0, i32 0
  %7 = load i8*, i8** %func, align 8
  store i8* %7, i8** %it_func, align 8
  %8 = load %struct.tracepoint_func*, %struct.tracepoint_func** %it_func_ptr, align 8
  %data = getelementptr inbounds %struct.tracepoint_func, %struct.tracepoint_func* %8, i32 0, i32 1
  %9 = load i8*, i8** %data, align 8
  store i8* %9, i8** %__data, align 8
  %10 = load i8*, i8** %it_func, align 8
  %11 = bitcast i8* %10 to void (i8*, %struct.wiphy*)*
  %12 = load i8*, i8** %__data, align 8
  %13 = load %struct.wiphy*, %struct.wiphy** %wiphy.addr, align 8
  call void %11(i8* %12, %struct.wiphy* %13)
  br label %do.cond

do.cond:                                          ; preds = %do.body5
  %14 = load %struct.tracepoint_func*, %struct.tracepoint_func** %it_func_ptr, align 8
  %incdec.ptr = getelementptr inbounds %struct.tracepoint_func, %struct.tracepoint_func* %14, i32 1
  store %struct.tracepoint_func* %incdec.ptr, %struct.tracepoint_func** %it_func_ptr, align 8
  %func6 = getelementptr inbounds %struct.tracepoint_func, %struct.tracepoint_func* %incdec.ptr, i32 0, i32 0
  %15 = load i8*, i8** %func6, align 8
  %tobool7 = icmp ne i8* %15, null
  br i1 %tobool7, label %do.body5, label %do.end8

do.end8:                                          ; preds = %do.cond
  br label %if.end

if.end:                                           ; preds = %do.end8, %do.end3
  call void @rcu_read_unlock_sched_notrace()
  br label %do.end10

do.end10:                                         ; preds = %if.end
  br label %if.end11

if.end11:                                         ; preds = %do.end10, %static_key_false.exit
  ret void
}

; Function Attrs: noinline nounwind optnone uwtable
define internal void @rcu_read_lock_sched_notrace() #0 {
entry:
  call void asm sideeffect "", "~{memory},~{dirflag},~{fpsr},~{flags}"() #3, !srcloc !7
  ret void
}

; Function Attrs: noinline nounwind optnone uwtable
define internal void @rcu_read_unlock_sched_notrace() #0 {
entry:
  call void asm sideeffect "", "~{memory},~{dirflag},~{fpsr},~{flags}"() #3, !srcloc !8
  ret void
}

; Function Attrs: noinline nounwind optnone uwtable
define internal i32 @atomic_read(%struct.atomic_t* %v) #0 {
entry:
  %v.addr = alloca %struct.atomic_t*, align 8
  store %struct.atomic_t* %v, %struct.atomic_t** %v.addr, align 8
  %0 = load %struct.atomic_t*, %struct.atomic_t** %v.addr, align 8
  %counter = getelementptr inbounds %struct.atomic_t, %struct.atomic_t* %0, i32 0, i32 0
  %1 = load volatile i32, i32* %counter, align 4
  ret i32 %1
}

declare i8* @__kmalloc(i64, i32) #1

declare i32 @dev_close(%struct.net_device*) #1

declare zeroext i1 @rfkill_blocked(%struct.rfkill*) #1

declare void @cfg80211_process_rdev_events(%struct.cfg80211_registered_device*) #1

; Function Attrs: noinline nounwind optnone uwtable
define internal void @__list_add_rcu(%struct.list_head* %new, %struct.list_head* %prev, %struct.list_head* %next) #0 {
entry:
  %new.addr = alloca %struct.list_head*, align 8
  %prev.addr = alloca %struct.list_head*, align 8
  %next.addr = alloca %struct.list_head*, align 8
  store %struct.list_head* %new, %struct.list_head** %new.addr, align 8
  store %struct.list_head* %prev, %struct.list_head** %prev.addr, align 8
  store %struct.list_head* %next, %struct.list_head** %next.addr, align 8
  %0 = load %struct.list_head*, %struct.list_head** %next.addr, align 8
  %1 = load %struct.list_head*, %struct.list_head** %new.addr, align 8
  %next1 = getelementptr inbounds %struct.list_head, %struct.list_head* %1, i32 0, i32 0
  store %struct.list_head* %0, %struct.list_head** %next1, align 8
  %2 = load %struct.list_head*, %struct.list_head** %prev.addr, align 8
  %3 = load %struct.list_head*, %struct.list_head** %new.addr, align 8
  %prev2 = getelementptr inbounds %struct.list_head, %struct.list_head* %3, i32 0, i32 1
  store %struct.list_head* %2, %struct.list_head** %prev2, align 8
  br label %do.body

do.body:                                          ; preds = %entry
  call void asm sideeffect "", "~{memory},~{dirflag},~{fpsr},~{flags}"() #3, !srcloc !9
  %4 = load %struct.list_head*, %struct.list_head** %new.addr, align 8
  %5 = load %struct.list_head*, %struct.list_head** %prev.addr, align 8
  %next3 = getelementptr inbounds %struct.list_head, %struct.list_head* %5, i32 0, i32 0
  store %struct.list_head* %4, %struct.list_head** %next3, align 8
  br label %do.end

do.end:                                           ; preds = %do.body
  %6 = load %struct.list_head*, %struct.list_head** %new.addr, align 8
  %7 = load %struct.list_head*, %struct.list_head** %next.addr, align 8
  %prev4 = getelementptr inbounds %struct.list_head, %struct.list_head* %7, i32 0, i32 1
  store %struct.list_head* %6, %struct.list_head** %prev4, align 8
  ret void
}

; Function Attrs: noinline nounwind optnone uwtable
define internal void @__list_del_entry(%struct.list_head* %entry1) #0 {
entry:
  %entry.addr = alloca %struct.list_head*, align 8
  store %struct.list_head* %entry1, %struct.list_head** %entry.addr, align 8
  %0 = load %struct.list_head*, %struct.list_head** %entry.addr, align 8
  %prev = getelementptr inbounds %struct.list_head, %struct.list_head* %0, i32 0, i32 1
  %1 = load %struct.list_head*, %struct.list_head** %prev, align 8
  %2 = load %struct.list_head*, %struct.list_head** %entry.addr, align 8
  %next = getelementptr inbounds %struct.list_head, %struct.list_head* %2, i32 0, i32 0
  %3 = load %struct.list_head*, %struct.list_head** %next, align 8
  call void @__list_del(%struct.list_head* %1, %struct.list_head* %3)
  ret void
}

; Function Attrs: noinline nounwind optnone uwtable
define internal void @__list_del(%struct.list_head* %prev, %struct.list_head* %next) #0 {
entry:
  %prev.addr = alloca %struct.list_head*, align 8
  %next.addr = alloca %struct.list_head*, align 8
  store %struct.list_head* %prev, %struct.list_head** %prev.addr, align 8
  store %struct.list_head* %next, %struct.list_head** %next.addr, align 8
  %0 = load %struct.list_head*, %struct.list_head** %prev.addr, align 8
  %1 = load %struct.list_head*, %struct.list_head** %next.addr, align 8
  %prev1 = getelementptr inbounds %struct.list_head, %struct.list_head* %1, i32 0, i32 1
  store %struct.list_head* %0, %struct.list_head** %prev1, align 8
  %2 = load %struct.list_head*, %struct.list_head** %next.addr, align 8
  %3 = load %struct.list_head*, %struct.list_head** %prev.addr, align 8
  %next2 = getelementptr inbounds %struct.list_head, %struct.list_head* %3, i32 0, i32 0
  store %struct.list_head* %2, %struct.list_head** %next2, align 8
  ret void
}

; Function Attrs: noinline nounwind optnone uwtable
define internal void @rdev_rfkill_poll(%struct.cfg80211_registered_device* %rdev) #0 {
entry:
  %rdev.addr = alloca %struct.cfg80211_registered_device*, align 8
  store %struct.cfg80211_registered_device* %rdev, %struct.cfg80211_registered_device** %rdev.addr, align 8
  %0 = load %struct.cfg80211_registered_device*, %struct.cfg80211_registered_device** %rdev.addr, align 8
  %wiphy = getelementptr inbounds %struct.cfg80211_registered_device, %struct.cfg80211_registered_device* %0, i32 0, i32 34
  call void @trace_rdev_rfkill_poll(%struct.wiphy* %wiphy)
  %1 = load %struct.cfg80211_registered_device*, %struct.cfg80211_registered_device** %rdev.addr, align 8
  %ops = getelementptr inbounds %struct.cfg80211_registered_device, %struct.cfg80211_registered_device* %1, i32 0, i32 0
  %2 = load %struct.cfg80211_ops*, %struct.cfg80211_ops** %ops, align 32
  %rfkill_poll = getelementptr inbounds %struct.cfg80211_ops, %struct.cfg80211_ops* %2, i32 0, i32 46
  %3 = load void (%struct.wiphy*)*, void (%struct.wiphy*)** %rfkill_poll, align 8
  %4 = load %struct.cfg80211_registered_device*, %struct.cfg80211_registered_device** %rdev.addr, align 8
  %wiphy1 = getelementptr inbounds %struct.cfg80211_registered_device, %struct.cfg80211_registered_device* %4, i32 0, i32 34
  call void %3(%struct.wiphy* %wiphy1)
  %5 = load %struct.cfg80211_registered_device*, %struct.cfg80211_registered_device** %rdev.addr, align 8
  %wiphy2 = getelementptr inbounds %struct.cfg80211_registered_device, %struct.cfg80211_registered_device* %5, i32 0, i32 34
  call void @trace_rdev_return_void(%struct.wiphy* %wiphy2)
  ret void
}

; Function Attrs: noinline nounwind optnone uwtable
define internal void @trace_rdev_rfkill_poll(%struct.wiphy* %wiphy) #0 {
entry:
  %retval.i = alloca i1, align 1
  %key.addr.i = alloca %struct.static_key*, align 8
  %wiphy.addr = alloca %struct.wiphy*, align 8
  %it_func_ptr = alloca %struct.tracepoint_func*, align 8
  %it_func = alloca i8*, align 8
  %__data = alloca i8*, align 8
  %_________p1 = alloca %struct.tracepoint_func*, align 8
  %tmp = alloca %struct.tracepoint_func*, align 8
  store %struct.wiphy* %wiphy, %struct.wiphy** %wiphy.addr, align 8
  store %struct.static_key* getelementptr inbounds (%struct.tracepoint, %struct.tracepoint* @__tracepoint_rdev_rfkill_poll, i32 0, i32 1), %struct.static_key** %key.addr.i, align 8
  %0 = load %struct.static_key*, %struct.static_key** %key.addr.i, align 8
  %enabled.i = getelementptr inbounds %struct.static_key, %struct.static_key* %0, i32 0, i32 0
  %call.i = call i32 @atomic_read(%struct.atomic_t* %enabled.i) #3
  %tobool.i = icmp ne i32 %call.i, 0
  %lnot.i = xor i1 %tobool.i, true
  %lnot.ext.i = zext i1 %tobool.i to i32
  %conv.i = sext i32 %lnot.ext.i to i64
  br i1 %tobool.i, label %if.then.i, label %if.end.i

if.then.i:                                        ; preds = %entry
  store i1 true, i1* %retval.i, align 1
  br label %static_key_false.exit

if.end.i:                                         ; preds = %entry
  store i1 false, i1* %retval.i, align 1
  br label %static_key_false.exit

static_key_false.exit:                            ; preds = %if.end.i, %if.then.i
  %1 = load i1, i1* %retval.i, align 1
  br i1 %1, label %if.then, label %if.end11

if.then:                                          ; preds = %static_key_false.exit
  br label %do.body

do.body:                                          ; preds = %if.then
  call void @rcu_read_lock_sched_notrace()
  %2 = load volatile %struct.tracepoint_func*, %struct.tracepoint_func** getelementptr inbounds (%struct.tracepoint, %struct.tracepoint* @__tracepoint_rdev_rfkill_poll, i32 0, i32 4), align 8
  store %struct.tracepoint_func* %2, %struct.tracepoint_func** %_________p1, align 8
  br label %do.body1

do.body1:                                         ; preds = %do.body
  br label %do.end

do.end:                                           ; preds = %do.body1
  br label %do.body2

do.body2:                                         ; preds = %do.end
  br label %do.end3

do.end3:                                          ; preds = %do.body2
  %3 = load %struct.tracepoint_func*, %struct.tracepoint_func** %_________p1, align 8
  store %struct.tracepoint_func* %3, %struct.tracepoint_func** %tmp, align 8
  %4 = load %struct.tracepoint_func*, %struct.tracepoint_func** %tmp, align 8
  store %struct.tracepoint_func* %4, %struct.tracepoint_func** %it_func_ptr, align 8
  %5 = load %struct.tracepoint_func*, %struct.tracepoint_func** %it_func_ptr, align 8
  %tobool = icmp ne %struct.tracepoint_func* %5, null
  br i1 %tobool, label %if.then4, label %if.end

if.then4:                                         ; preds = %do.end3
  br label %do.body5

do.body5:                                         ; preds = %do.cond, %if.then4
  %6 = load %struct.tracepoint_func*, %struct.tracepoint_func** %it_func_ptr, align 8
  %func = getelementptr inbounds %struct.tracepoint_func, %struct.tracepoint_func* %6, i32 0, i32 0
  %7 = load i8*, i8** %func, align 8
  store i8* %7, i8** %it_func, align 8
  %8 = load %struct.tracepoint_func*, %struct.tracepoint_func** %it_func_ptr, align 8
  %data = getelementptr inbounds %struct.tracepoint_func, %struct.tracepoint_func* %8, i32 0, i32 1
  %9 = load i8*, i8** %data, align 8
  store i8* %9, i8** %__data, align 8
  %10 = load i8*, i8** %it_func, align 8
  %11 = bitcast i8* %10 to void (i8*, %struct.wiphy*)*
  %12 = load i8*, i8** %__data, align 8
  %13 = load %struct.wiphy*, %struct.wiphy** %wiphy.addr, align 8
  call void %11(i8* %12, %struct.wiphy* %13)
  br label %do.cond

do.cond:                                          ; preds = %do.body5
  %14 = load %struct.tracepoint_func*, %struct.tracepoint_func** %it_func_ptr, align 8
  %incdec.ptr = getelementptr inbounds %struct.tracepoint_func, %struct.tracepoint_func* %14, i32 1
  store %struct.tracepoint_func* %incdec.ptr, %struct.tracepoint_func** %it_func_ptr, align 8
  %func6 = getelementptr inbounds %struct.tracepoint_func, %struct.tracepoint_func* %incdec.ptr, i32 0, i32 0
  %15 = load i8*, i8** %func6, align 8
  %tobool7 = icmp ne i8* %15, null
  br i1 %tobool7, label %do.body5, label %do.end8

do.end8:                                          ; preds = %do.cond
  br label %if.end

if.end:                                           ; preds = %do.end8, %do.end3
  call void @rcu_read_unlock_sched_notrace()
  br label %do.end10

do.end10:                                         ; preds = %if.end
  br label %if.end11

if.end11:                                         ; preds = %do.end10, %static_key_false.exit
  ret void
}

declare void @synchronize_sched() #1

; Function Attrs: noinline nounwind optnone uwtable
define internal void @trace_rdev_set_wakeup(%struct.wiphy* %wiphy, i1 zeroext %enabled) #0 {
entry:
  %retval.i = alloca i1, align 1
  %key.addr.i = alloca %struct.static_key*, align 8
  %wiphy.addr = alloca %struct.wiphy*, align 8
  %enabled.addr = alloca i8, align 1
  %it_func_ptr = alloca %struct.tracepoint_func*, align 8
  %it_func = alloca i8*, align 8
  %__data = alloca i8*, align 8
  %_________p1 = alloca %struct.tracepoint_func*, align 8
  %tmp = alloca %struct.tracepoint_func*, align 8
  store %struct.wiphy* %wiphy, %struct.wiphy** %wiphy.addr, align 8
  %frombool = zext i1 %enabled to i8
  store i8 %frombool, i8* %enabled.addr, align 1
  store %struct.static_key* getelementptr inbounds (%struct.tracepoint, %struct.tracepoint* @__tracepoint_rdev_set_wakeup, i32 0, i32 1), %struct.static_key** %key.addr.i, align 8
  %0 = load %struct.static_key*, %struct.static_key** %key.addr.i, align 8
  %enabled.i = getelementptr inbounds %struct.static_key, %struct.static_key* %0, i32 0, i32 0
  %call.i = call i32 @atomic_read(%struct.atomic_t* %enabled.i) #3
  %tobool.i = icmp ne i32 %call.i, 0
  %lnot.i = xor i1 %tobool.i, true
  %lnot.ext.i = zext i1 %tobool.i to i32
  %conv.i = sext i32 %lnot.ext.i to i64
  br i1 %tobool.i, label %if.then.i, label %if.end.i

if.then.i:                                        ; preds = %entry
  store i1 true, i1* %retval.i, align 1
  br label %static_key_false.exit

if.end.i:                                         ; preds = %entry
  store i1 false, i1* %retval.i, align 1
  br label %static_key_false.exit

static_key_false.exit:                            ; preds = %if.end.i, %if.then.i
  %1 = load i1, i1* %retval.i, align 1
  br i1 %1, label %if.then, label %if.end12

if.then:                                          ; preds = %static_key_false.exit
  br label %do.body

do.body:                                          ; preds = %if.then
  call void @rcu_read_lock_sched_notrace()
  %2 = load volatile %struct.tracepoint_func*, %struct.tracepoint_func** getelementptr inbounds (%struct.tracepoint, %struct.tracepoint* @__tracepoint_rdev_set_wakeup, i32 0, i32 4), align 8
  store %struct.tracepoint_func* %2, %struct.tracepoint_func** %_________p1, align 8
  br label %do.body1

do.body1:                                         ; preds = %do.body
  br label %do.end

do.end:                                           ; preds = %do.body1
  br label %do.body2

do.body2:                                         ; preds = %do.end
  br label %do.end3

do.end3:                                          ; preds = %do.body2
  %3 = load %struct.tracepoint_func*, %struct.tracepoint_func** %_________p1, align 8
  store %struct.tracepoint_func* %3, %struct.tracepoint_func** %tmp, align 8
  %4 = load %struct.tracepoint_func*, %struct.tracepoint_func** %tmp, align 8
  store %struct.tracepoint_func* %4, %struct.tracepoint_func** %it_func_ptr, align 8
  %5 = load %struct.tracepoint_func*, %struct.tracepoint_func** %it_func_ptr, align 8
  %tobool = icmp ne %struct.tracepoint_func* %5, null
  br i1 %tobool, label %if.then4, label %if.end

if.then4:                                         ; preds = %do.end3
  br label %do.body5

do.body5:                                         ; preds = %do.cond, %if.then4
  %6 = load %struct.tracepoint_func*, %struct.tracepoint_func** %it_func_ptr, align 8
  %func = getelementptr inbounds %struct.tracepoint_func, %struct.tracepoint_func* %6, i32 0, i32 0
  %7 = load i8*, i8** %func, align 8
  store i8* %7, i8** %it_func, align 8
  %8 = load %struct.tracepoint_func*, %struct.tracepoint_func** %it_func_ptr, align 8
  %data = getelementptr inbounds %struct.tracepoint_func, %struct.tracepoint_func* %8, i32 0, i32 1
  %9 = load i8*, i8** %data, align 8
  store i8* %9, i8** %__data, align 8
  %10 = load i8*, i8** %it_func, align 8
  %11 = bitcast i8* %10 to void (i8*, %struct.wiphy*, i1)*
  %12 = load i8*, i8** %__data, align 8
  %13 = load %struct.wiphy*, %struct.wiphy** %wiphy.addr, align 8
  %14 = load i8, i8* %enabled.addr, align 1
  %tobool6 = trunc i8 %14 to i1
  call void %11(i8* %12, %struct.wiphy* %13, i1 zeroext %tobool6)
  br label %do.cond

do.cond:                                          ; preds = %do.body5
  %15 = load %struct.tracepoint_func*, %struct.tracepoint_func** %it_func_ptr, align 8
  %incdec.ptr = getelementptr inbounds %struct.tracepoint_func, %struct.tracepoint_func* %15, i32 1
  store %struct.tracepoint_func* %incdec.ptr, %struct.tracepoint_func** %it_func_ptr, align 8
  %func7 = getelementptr inbounds %struct.tracepoint_func, %struct.tracepoint_func* %incdec.ptr, i32 0, i32 0
  %16 = load i8*, i8** %func7, align 8
  %tobool8 = icmp ne i8* %16, null
  br i1 %tobool8, label %do.body5, label %do.end9

do.end9:                                          ; preds = %do.cond
  br label %if.end

if.end:                                           ; preds = %do.end9, %do.end3
  call void @rcu_read_unlock_sched_notrace()
  br label %do.end11

do.end11:                                         ; preds = %if.end
  br label %if.end12

if.end12:                                         ; preds = %do.end11, %static_key_false.exit
  ret void
}

declare void @sock_release(%struct.socket*) #1

; Function Attrs: noinline nounwind optnone uwtable
define internal zeroext i1 @queue_work(%struct.workqueue_struct* %wq, %struct.work_struct* %work) #0 {
entry:
  %wq.addr = alloca %struct.workqueue_struct*, align 8
  %work.addr = alloca %struct.work_struct*, align 8
  store %struct.workqueue_struct* %wq, %struct.workqueue_struct** %wq.addr, align 8
  store %struct.work_struct* %work, %struct.work_struct** %work.addr, align 8
  %0 = load %struct.workqueue_struct*, %struct.workqueue_struct** %wq.addr, align 8
  %1 = load %struct.work_struct*, %struct.work_struct** %work.addr, align 8
  %call = call zeroext i1 @queue_work_on(i32 64, %struct.workqueue_struct* %0, %struct.work_struct* %1)
  ret i1 %call
}

declare zeroext i1 @queue_work_on(i32, %struct.workqueue_struct*, %struct.work_struct*) #1

declare i32 @register_pernet_device(%struct.pernet_operations*) #1

declare i32 @wiphy_sysfs_init() #1

declare i32 @register_netdevice_notifier(%struct.notifier_block*) #1

declare i32 @nl80211_init() #1

declare i32 @regulatory_init() #1 section ".init.text"

declare %struct.workqueue_struct* @__alloc_workqueue_key(i8*, i32, i32, %struct.lock_class_key*, i8*, ...) #1

; Function Attrs: noinline nounwind optnone uwtable
define internal i32 @cfg80211_netdev_notifier_call(%struct.notifier_block* %nb, i64 %state, i8* %ndev) #0 {
entry:
  %retval = alloca i32, align 4
  %nb.addr = alloca %struct.notifier_block*, align 8
  %state.addr = alloca i64, align 8
  %ndev.addr = alloca i8*, align 8
  %dev = alloca %struct.net_device*, align 8
  %wdev = alloca %struct.wireless_dev*, align 8
  %rdev = alloca %struct.cfg80211_registered_device*, align 8
  %ret = alloca i32, align 4
  %__ret_warn_on = alloca i32, align 4
  %tmp = alloca i64, align 8
  %.compoundliteral = alloca %struct.atomic64_t, align 8
  %.compoundliteral32 = alloca %struct.raw_spinlock, align 2
  %.compoundliteral40 = alloca %struct.raw_spinlock, align 2
  store %struct.notifier_block* %nb, %struct.notifier_block** %nb.addr, align 8
  store i64 %state, i64* %state.addr, align 8
  store i8* %ndev, i8** %ndev.addr, align 8
  %0 = load i8*, i8** %ndev.addr, align 8
  %1 = bitcast i8* %0 to %struct.net_device*
  store %struct.net_device* %1, %struct.net_device** %dev, align 8
  %2 = load %struct.net_device*, %struct.net_device** %dev, align 8
  %ieee80211_ptr = getelementptr inbounds %struct.net_device, %struct.net_device* %2, i32 0, i32 55
  %3 = load %struct.wireless_dev*, %struct.wireless_dev** %ieee80211_ptr, align 8
  store %struct.wireless_dev* %3, %struct.wireless_dev** %wdev, align 8
  %4 = load %struct.wireless_dev*, %struct.wireless_dev** %wdev, align 8
  %tobool = icmp ne %struct.wireless_dev* %4, null
  br i1 %tobool, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  store i32 0, i32* %retval, align 4
  br label %return

if.end:                                           ; preds = %entry
  %5 = load %struct.wireless_dev*, %struct.wireless_dev** %wdev, align 8
  %wiphy = getelementptr inbounds %struct.wireless_dev, %struct.wireless_dev* %5, i32 0, i32 0
  %6 = load %struct.wiphy*, %struct.wiphy** %wiphy, align 8
  %call = call %struct.cfg80211_registered_device* @wiphy_to_dev(%struct.wiphy* %6)
  store %struct.cfg80211_registered_device* %call, %struct.cfg80211_registered_device** %rdev, align 8
  %7 = load %struct.wireless_dev*, %struct.wireless_dev** %wdev, align 8
  %iftype = getelementptr inbounds %struct.wireless_dev, %struct.wireless_dev* %7, i32 0, i32 1
  %8 = load i32, i32* %iftype, align 8
  %cmp = icmp eq i32 %8, 0
  %lnot = xor i1 %cmp, true
  %lnot1 = xor i1 %lnot, true
  %lnot.ext = zext i1 %lnot1 to i32
  store i32 %lnot.ext, i32* %__ret_warn_on, align 4
  %9 = load i32, i32* %__ret_warn_on, align 4
  %tobool2 = icmp ne i32 %9, 0
  %lnot3 = xor i1 %tobool2, true
  %lnot5 = xor i1 %lnot3, true
  %lnot.ext6 = zext i1 %lnot5 to i32
  %conv = sext i32 %lnot.ext6 to i64
  %tobool7 = icmp ne i64 %conv, 0
  br i1 %tobool7, label %if.then8, label %if.end9

if.then8:                                         ; preds = %if.end
  call void @warn_slowpath_null(i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.3, i32 0, i32 0), i32 902)
  br label %if.end9

if.end9:                                          ; preds = %if.then8, %if.end
  %10 = load i32, i32* %__ret_warn_on, align 4
  %tobool10 = icmp ne i32 %10, 0
  %lnot11 = xor i1 %tobool10, true
  %lnot13 = xor i1 %lnot11, true
  %lnot.ext14 = zext i1 %lnot13 to i32
  %conv15 = sext i32 %lnot.ext14 to i64
  store i64 %conv15, i64* %tmp, align 8
  %11 = load i64, i64* %tmp, align 8
  %12 = load i64, i64* %state.addr, align 8
  br label %NodeBlock19

NodeBlock19:                                      ; preds = %if.end9
  %Pivot20 = icmp slt i64 %12, 6
  br i1 %Pivot20, label %NodeBlock3, label %NodeBlock17

NodeBlock17:                                      ; preds = %NodeBlock19
  %Pivot18 = icmp slt i64 %12, 13
  br i1 %Pivot18, label %NodeBlock9, label %NodeBlock15

NodeBlock15:                                      ; preds = %NodeBlock17
  %Pivot16 = icmp slt i64 %12, 16
  br i1 %Pivot16, label %LeafBlock11, label %LeafBlock13

LeafBlock13:                                      ; preds = %NodeBlock15
  %SwitchLeaf14 = icmp eq i64 %12, 16
  br i1 %SwitchLeaf14, label %sw.bb, label %NewDefault

LeafBlock11:                                      ; preds = %NodeBlock15
  %SwitchLeaf12 = icmp eq i64 %12, 13
  br i1 %SwitchLeaf12, label %sw.bb127, label %NewDefault

NodeBlock9:                                       ; preds = %NodeBlock17
  %Pivot10 = icmp slt i64 %12, 9
  br i1 %Pivot10, label %LeafBlock5, label %LeafBlock7

LeafBlock7:                                       ; preds = %NodeBlock9
  %SwitchLeaf8 = icmp eq i64 %12, 9
  br i1 %SwitchLeaf8, label %sw.bb75, label %NewDefault

LeafBlock5:                                       ; preds = %NodeBlock9
  %SwitchLeaf6 = icmp eq i64 %12, 6
  br i1 %SwitchLeaf6, label %sw.bb113, label %NewDefault

NodeBlock3:                                       ; preds = %NodeBlock19
  %Pivot4 = icmp slt i64 %12, 2
  br i1 %Pivot4, label %LeafBlock, label %NodeBlock

NodeBlock:                                        ; preds = %NodeBlock3
  %Pivot = icmp slt i64 %12, 5
  br i1 %Pivot, label %LeafBlock1, label %sw.bb17

LeafBlock1:                                       ; preds = %NodeBlock
  %SwitchLeaf2 = icmp eq i64 %12, 2
  br i1 %SwitchLeaf2, label %sw.bb76, label %NewDefault

LeafBlock:                                        ; preds = %NodeBlock3
  %SwitchLeaf = icmp eq i64 %12, 1
  br i1 %SwitchLeaf, label %sw.bb80, label %NewDefault

sw.bb:                                            ; preds = %LeafBlock13
  %13 = load %struct.net_device*, %struct.net_device** %dev, align 8
  %dev16 = getelementptr inbounds %struct.net_device, %struct.net_device* %13, i32 0, i32 90
  %type = getelementptr inbounds %struct.device, %struct.device* %dev16, i32 0, i32 4
  store %struct.device_type* @wiphy_type, %struct.device_type** %type, align 8
  br label %sw.epilog148

sw.bb17:                                          ; preds = %NodeBlock
  br label %do.body

do.body:                                          ; preds = %sw.bb17
  %14 = load %struct.wireless_dev*, %struct.wireless_dev** %wdev, align 8
  %mtx = getelementptr inbounds %struct.wireless_dev, %struct.wireless_dev* %14, i32 0, i32 7
  call void @__mutex_init(%struct.mutex* %mtx, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.16, i32 0, i32 0), %struct.lock_class_key* @cfg80211_netdev_notifier_call.__key)
  br label %do.end

do.end:                                           ; preds = %do.body
  br label %do.body18

do.body18:                                        ; preds = %do.end
  br label %do.body19

do.body19:                                        ; preds = %do.body18
  %15 = load %struct.wireless_dev*, %struct.wireless_dev** %wdev, align 8
  %cleanup_work = getelementptr inbounds %struct.wireless_dev, %struct.wireless_dev* %15, i32 0, i32 8
  call void @__init_work(%struct.work_struct* %cleanup_work, i32 0)
  %16 = load %struct.wireless_dev*, %struct.wireless_dev** %wdev, align 8
  %cleanup_work20 = getelementptr inbounds %struct.wireless_dev, %struct.wireless_dev* %16, i32 0, i32 8
  %data = getelementptr inbounds %struct.work_struct, %struct.work_struct* %cleanup_work20, i32 0, i32 0
  %counter = getelementptr inbounds %struct.atomic64_t, %struct.atomic64_t* %.compoundliteral, i32 0, i32 0
  store i64 68719476704, i64* %counter, align 8
  %17 = bitcast %struct.atomic64_t* %data to i8*
  %18 = bitcast %struct.atomic64_t* %.compoundliteral to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %17, i8* %18, i64 8, i32 8, i1 false)
  %19 = load %struct.wireless_dev*, %struct.wireless_dev** %wdev, align 8
  %cleanup_work21 = getelementptr inbounds %struct.wireless_dev, %struct.wireless_dev* %19, i32 0, i32 8
  %entry22 = getelementptr inbounds %struct.work_struct, %struct.work_struct* %cleanup_work21, i32 0, i32 1
  call void @INIT_LIST_HEAD(%struct.list_head* %entry22)
  br label %do.body23

do.body23:                                        ; preds = %do.body19
  %20 = load %struct.wireless_dev*, %struct.wireless_dev** %wdev, align 8
  %cleanup_work24 = getelementptr inbounds %struct.wireless_dev, %struct.wireless_dev* %20, i32 0, i32 8
  %func = getelementptr inbounds %struct.work_struct, %struct.work_struct* %cleanup_work24, i32 0, i32 2
  store void (%struct.work_struct*)* @wdev_cleanup_work, void (%struct.work_struct*)** %func, align 8
  br label %do.end25

do.end25:                                         ; preds = %do.body23
  br label %do.end26

do.end26:                                         ; preds = %do.end25
  br label %do.end27

do.end27:                                         ; preds = %do.end26
  %21 = load %struct.wireless_dev*, %struct.wireless_dev** %wdev, align 8
  %event_list = getelementptr inbounds %struct.wireless_dev, %struct.wireless_dev* %21, i32 0, i32 19
  call void @INIT_LIST_HEAD(%struct.list_head* %event_list)
  br label %do.body28

do.body28:                                        ; preds = %do.end27
  %22 = load %struct.wireless_dev*, %struct.wireless_dev** %wdev, align 8
  %event_lock = getelementptr inbounds %struct.wireless_dev, %struct.wireless_dev* %22, i32 0, i32 20
  %call29 = call %struct.raw_spinlock* @spinlock_check(%struct.spinlock* %event_lock)
  br label %do.body30

do.body30:                                        ; preds = %do.body28
  %23 = load %struct.wireless_dev*, %struct.wireless_dev** %wdev, align 8
  %event_lock31 = getelementptr inbounds %struct.wireless_dev, %struct.wireless_dev* %23, i32 0, i32 20
  %24 = getelementptr inbounds %struct.spinlock, %struct.spinlock* %event_lock31, i32 0, i32 0
  %rlock = bitcast %union.anon.0* %24 to %struct.raw_spinlock*
  %raw_lock = getelementptr inbounds %struct.raw_spinlock, %struct.raw_spinlock* %.compoundliteral32, i32 0, i32 0
  %25 = getelementptr inbounds %struct.arch_spinlock, %struct.arch_spinlock* %raw_lock, i32 0, i32 0
  %head_tail = bitcast %union.anon.1* %25 to i16*
  store i16 0, i16* %head_tail, align 2
  %26 = bitcast %struct.raw_spinlock* %rlock to i8*
  %27 = bitcast %struct.raw_spinlock* %.compoundliteral32 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %26, i8* %27, i64 2, i32 2, i1 false)
  br label %do.end33

do.end33:                                         ; preds = %do.body30
  br label %do.end34

do.end34:                                         ; preds = %do.end33
  %28 = load %struct.wireless_dev*, %struct.wireless_dev** %wdev, align 8
  %mgmt_registrations = getelementptr inbounds %struct.wireless_dev, %struct.wireless_dev* %28, i32 0, i32 5
  call void @INIT_LIST_HEAD(%struct.list_head* %mgmt_registrations)
  br label %do.body35

do.body35:                                        ; preds = %do.end34
  %29 = load %struct.wireless_dev*, %struct.wireless_dev** %wdev, align 8
  %mgmt_registrations_lock = getelementptr inbounds %struct.wireless_dev, %struct.wireless_dev* %29, i32 0, i32 6
  %call36 = call %struct.raw_spinlock* @spinlock_check(%struct.spinlock* %mgmt_registrations_lock)
  br label %do.body37

do.body37:                                        ; preds = %do.body35
  %30 = load %struct.wireless_dev*, %struct.wireless_dev** %wdev, align 8
  %mgmt_registrations_lock38 = getelementptr inbounds %struct.wireless_dev, %struct.wireless_dev* %30, i32 0, i32 6
  %31 = getelementptr inbounds %struct.spinlock, %struct.spinlock* %mgmt_registrations_lock38, i32 0, i32 0
  %rlock39 = bitcast %union.anon.0* %31 to %struct.raw_spinlock*
  %raw_lock41 = getelementptr inbounds %struct.raw_spinlock, %struct.raw_spinlock* %.compoundliteral40, i32 0, i32 0
  %32 = getelementptr inbounds %struct.arch_spinlock, %struct.arch_spinlock* %raw_lock41, i32 0, i32 0
  %head_tail42 = bitcast %union.anon.1* %32 to i16*
  store i16 0, i16* %head_tail42, align 2
  %33 = bitcast %struct.raw_spinlock* %rlock39 to i8*
  %34 = bitcast %struct.raw_spinlock* %.compoundliteral40 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %33, i8* %34, i64 2, i32 2, i1 false)
  br label %do.end43

do.end43:                                         ; preds = %do.body37
  br label %do.end44

do.end44:                                         ; preds = %do.end43
  %35 = load %struct.cfg80211_registered_device*, %struct.cfg80211_registered_device** %rdev, align 8
  %devlist_mtx = getelementptr inbounds %struct.cfg80211_registered_device, %struct.cfg80211_registered_device* %35, i32 0, i32 9
  call void @mutex_lock(%struct.mutex* %devlist_mtx)
  %36 = load %struct.cfg80211_registered_device*, %struct.cfg80211_registered_device** %rdev, align 8
  %wdev_id = getelementptr inbounds %struct.cfg80211_registered_device, %struct.cfg80211_registered_device* %36, i32 0, i32 12
  %37 = load i32, i32* %wdev_id, align 4
  %inc = add nsw i32 %37, 1
  store i32 %inc, i32* %wdev_id, align 4
  %38 = load %struct.wireless_dev*, %struct.wireless_dev** %wdev, align 8
  %identifier = getelementptr inbounds %struct.wireless_dev, %struct.wireless_dev* %38, i32 0, i32 4
  store i32 %inc, i32* %identifier, align 8
  %39 = load %struct.wireless_dev*, %struct.wireless_dev** %wdev, align 8
  %list = getelementptr inbounds %struct.wireless_dev, %struct.wireless_dev* %39, i32 0, i32 2
  %40 = load %struct.cfg80211_registered_device*, %struct.cfg80211_registered_device** %rdev, align 8
  %wdev_list = getelementptr inbounds %struct.cfg80211_registered_device, %struct.cfg80211_registered_device* %40, i32 0, i32 10
  call void @list_add_rcu(%struct.list_head* %list, %struct.list_head* %wdev_list)
  %41 = load %struct.cfg80211_registered_device*, %struct.cfg80211_registered_device** %rdev, align 8
  %devlist_generation = getelementptr inbounds %struct.cfg80211_registered_device, %struct.cfg80211_registered_device* %41, i32 0, i32 11
  %42 = load i32, i32* %devlist_generation, align 8
  %inc45 = add nsw i32 %42, 1
  store i32 %inc45, i32* %devlist_generation, align 8
  %43 = load %struct.net_device*, %struct.net_device** %dev, align 8
  %features = getelementptr inbounds %struct.net_device, %struct.net_device* %43, i32 0, i32 12
  %44 = load i64, i64* %features, align 16
  %or = or i64 %44, 8192
  store i64 %or, i64* %features, align 16
  %45 = load %struct.net_device*, %struct.net_device** %dev, align 8
  %dev46 = getelementptr inbounds %struct.net_device, %struct.net_device* %45, i32 0, i32 90
  %kobj = getelementptr inbounds %struct.device, %struct.device* %dev46, i32 0, i32 2
  %46 = load %struct.cfg80211_registered_device*, %struct.cfg80211_registered_device** %rdev, align 8
  %wiphy47 = getelementptr inbounds %struct.cfg80211_registered_device, %struct.cfg80211_registered_device* %46, i32 0, i32 34
  %dev48 = getelementptr inbounds %struct.wiphy, %struct.wiphy* %wiphy47, i32 0, i32 42
  %kobj49 = getelementptr inbounds %struct.device, %struct.device* %dev48, i32 0, i32 2
  %call50 = call i32 @sysfs_create_link(%struct.kobject* %kobj, %struct.kobject* %kobj49, i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.17, i32 0, i32 0))
  %tobool51 = icmp ne i32 %call50, 0
  br i1 %tobool51, label %if.then52, label %if.end54

if.then52:                                        ; preds = %do.end44
  %call53 = call i32 (i8*, ...) @printk(i8* getelementptr inbounds ([55 x i8], [55 x i8]* @.str.18, i32 0, i32 0))
  br label %if.end54

if.end54:                                         ; preds = %if.then52, %do.end44
  %47 = load %struct.net_device*, %struct.net_device** %dev, align 8
  %48 = load %struct.wireless_dev*, %struct.wireless_dev** %wdev, align 8
  %netdev = getelementptr inbounds %struct.wireless_dev, %struct.wireless_dev* %48, i32 0, i32 3
  store %struct.net_device* %47, %struct.net_device** %netdev, align 8
  %49 = load %struct.wireless_dev*, %struct.wireless_dev** %wdev, align 8
  %sme_state = getelementptr inbounds %struct.wireless_dev, %struct.wireless_dev* %49, i32 0, i32 16
  store i32 0, i32* %sme_state, align 4
  %50 = load %struct.cfg80211_registered_device*, %struct.cfg80211_registered_device** %rdev, align 8
  %devlist_mtx55 = getelementptr inbounds %struct.cfg80211_registered_device, %struct.cfg80211_registered_device* %50, i32 0, i32 9
  call void @mutex_unlock(%struct.mutex* %devlist_mtx55)
  %51 = load %struct.wireless_dev*, %struct.wireless_dev** %wdev, align 8
  %wiphy56 = getelementptr inbounds %struct.wireless_dev, %struct.wireless_dev* %51, i32 0, i32 0
  %52 = load %struct.wiphy*, %struct.wiphy** %wiphy56, align 8
  %flags = getelementptr inbounds %struct.wiphy, %struct.wiphy* %52, i32 0, i32 10
  %53 = load i32, i32* %flags, align 4
  %and = and i32 %53, 16
  %tobool57 = icmp ne i32 %and, 0
  br i1 %tobool57, label %if.then58, label %if.else

if.then58:                                        ; preds = %if.end54
  %54 = load %struct.wireless_dev*, %struct.wireless_dev** %wdev, align 8
  %ps = getelementptr inbounds %struct.wireless_dev, %struct.wireless_dev* %54, i32 0, i32 25
  store i8 1, i8* %ps, align 1
  br label %if.end60

if.else:                                          ; preds = %if.end54
  %55 = load %struct.wireless_dev*, %struct.wireless_dev** %wdev, align 8
  %ps59 = getelementptr inbounds %struct.wireless_dev, %struct.wireless_dev* %55, i32 0, i32 25
  store i8 0, i8* %ps59, align 1
  br label %if.end60

if.end60:                                         ; preds = %if.else, %if.then58
  %56 = load %struct.wireless_dev*, %struct.wireless_dev** %wdev, align 8
  %ps_timeout = getelementptr inbounds %struct.wireless_dev, %struct.wireless_dev* %56, i32 0, i32 26
  store i32 -1, i32* %ps_timeout, align 4
  %57 = load %struct.net_device*, %struct.net_device** %dev, align 8
  call void @netdev_set_default_ethtool_ops(%struct.net_device* %57, %struct.ethtool_ops* @cfg80211_ethtool_ops)
  %58 = load %struct.wireless_dev*, %struct.wireless_dev** %wdev, align 8
  %iftype61 = getelementptr inbounds %struct.wireless_dev, %struct.wireless_dev* %58, i32 0, i32 1
  %59 = load i32, i32* %iftype61, align 8
  %cmp62 = icmp eq i32 %59, 2
  br i1 %cmp62, label %land.lhs.true, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %if.end60
  %60 = load %struct.wireless_dev*, %struct.wireless_dev** %wdev, align 8
  %iftype64 = getelementptr inbounds %struct.wireless_dev, %struct.wireless_dev* %60, i32 0, i32 1
  %61 = load i32, i32* %iftype64, align 8
  %cmp65 = icmp eq i32 %61, 8
  br i1 %cmp65, label %land.lhs.true, label %lor.lhs.false67

lor.lhs.false67:                                  ; preds = %lor.lhs.false
  %62 = load %struct.wireless_dev*, %struct.wireless_dev** %wdev, align 8
  %iftype68 = getelementptr inbounds %struct.wireless_dev, %struct.wireless_dev* %62, i32 0, i32 1
  %63 = load i32, i32* %iftype68, align 8
  %cmp69 = icmp eq i32 %63, 1
  br i1 %cmp69, label %land.lhs.true, label %if.end74

land.lhs.true:                                    ; preds = %lor.lhs.false67, %lor.lhs.false, %if.end60
  %64 = load %struct.wireless_dev*, %struct.wireless_dev** %wdev, align 8
  %use_4addr = getelementptr inbounds %struct.wireless_dev, %struct.wireless_dev* %64, i32 0, i32 9
  %65 = load i8, i8* %use_4addr, align 8
  %tobool71 = trunc i8 %65 to i1
  br i1 %tobool71, label %if.end74, label %if.then72

if.then72:                                        ; preds = %land.lhs.true
  %66 = load %struct.net_device*, %struct.net_device** %dev, align 8
  %priv_flags = getelementptr inbounds %struct.net_device, %struct.net_device* %66, i32 0, i32 25
  %67 = load i32, i32* %priv_flags, align 4
  %or73 = or i32 %67, 2048
  store i32 %or73, i32* %priv_flags, align 4
  br label %if.end74

if.end74:                                         ; preds = %if.then72, %land.lhs.true, %lor.lhs.false67
  br label %sw.epilog148

sw.bb75:                                          ; preds = %LeafBlock7
  %68 = load %struct.cfg80211_registered_device*, %struct.cfg80211_registered_device** %rdev, align 8
  %69 = load %struct.wireless_dev*, %struct.wireless_dev** %wdev, align 8
  call void @cfg80211_leave(%struct.cfg80211_registered_device* %68, %struct.wireless_dev* %69)
  br label %sw.epilog148

sw.bb76:                                          ; preds = %LeafBlock1
  %70 = load %struct.cfg80211_registered_device*, %struct.cfg80211_registered_device** %rdev, align 8
  %71 = load %struct.wireless_dev*, %struct.wireless_dev** %wdev, align 8
  %iftype77 = getelementptr inbounds %struct.wireless_dev, %struct.wireless_dev* %71, i32 0, i32 1
  %72 = load i32, i32* %iftype77, align 8
  call void @cfg80211_update_iface_num(%struct.cfg80211_registered_device* %70, i32 %72, i32 -1)
  %73 = load %struct.net_device*, %struct.net_device** %dev, align 8
  call void @dev_hold(%struct.net_device* %73)
  %74 = load %struct.workqueue_struct*, %struct.workqueue_struct** @cfg80211_wq, align 8
  %75 = load %struct.wireless_dev*, %struct.wireless_dev** %wdev, align 8
  %cleanup_work78 = getelementptr inbounds %struct.wireless_dev, %struct.wireless_dev* %75, i32 0, i32 8
  %call79 = call zeroext i1 @queue_work(%struct.workqueue_struct* %74, %struct.work_struct* %cleanup_work78)
  br label %sw.epilog148

sw.bb80:                                          ; preds = %LeafBlock
  %76 = load %struct.wireless_dev*, %struct.wireless_dev** %wdev, align 8
  %cleanup_work81 = getelementptr inbounds %struct.wireless_dev, %struct.wireless_dev* %76, i32 0, i32 8
  %call82 = call zeroext i1 @cancel_work_sync(%struct.work_struct* %cleanup_work81)
  br i1 %call82, label %if.then83, label %if.end86

if.then83:                                        ; preds = %sw.bb80
  %77 = load %struct.cfg80211_registered_device*, %struct.cfg80211_registered_device** %rdev, align 8
  %devlist_mtx84 = getelementptr inbounds %struct.cfg80211_registered_device, %struct.cfg80211_registered_device* %77, i32 0, i32 9
  call void @mutex_lock(%struct.mutex* %devlist_mtx84)
  %78 = load %struct.cfg80211_registered_device*, %struct.cfg80211_registered_device** %rdev, align 8
  %opencount = getelementptr inbounds %struct.cfg80211_registered_device, %struct.cfg80211_registered_device* %78, i32 0, i32 13
  %79 = load i32, i32* %opencount, align 16
  %dec = add nsw i32 %79, -1
  store i32 %dec, i32* %opencount, align 16
  %80 = load %struct.cfg80211_registered_device*, %struct.cfg80211_registered_device** %rdev, align 8
  %devlist_mtx85 = getelementptr inbounds %struct.cfg80211_registered_device, %struct.cfg80211_registered_device* %80, i32 0, i32 9
  call void @mutex_unlock(%struct.mutex* %devlist_mtx85)
  %81 = load %struct.net_device*, %struct.net_device** %dev, align 8
  call void @dev_put(%struct.net_device* %81)
  br label %if.end86

if.end86:                                         ; preds = %if.then83, %sw.bb80
  %82 = load %struct.cfg80211_registered_device*, %struct.cfg80211_registered_device** %rdev, align 8
  %83 = load %struct.wireless_dev*, %struct.wireless_dev** %wdev, align 8
  %iftype87 = getelementptr inbounds %struct.wireless_dev, %struct.wireless_dev* %83, i32 0, i32 1
  %84 = load i32, i32* %iftype87, align 8
  call void @cfg80211_update_iface_num(%struct.cfg80211_registered_device* %82, i32 %84, i32 1)
  %85 = load %struct.cfg80211_registered_device*, %struct.cfg80211_registered_device** %rdev, align 8
  call void @cfg80211_lock_rdev(%struct.cfg80211_registered_device* %85)
  %86 = load %struct.cfg80211_registered_device*, %struct.cfg80211_registered_device** %rdev, align 8
  %devlist_mtx88 = getelementptr inbounds %struct.cfg80211_registered_device, %struct.cfg80211_registered_device* %86, i32 0, i32 9
  call void @mutex_lock(%struct.mutex* %devlist_mtx88)
  %87 = load %struct.cfg80211_registered_device*, %struct.cfg80211_registered_device** %rdev, align 8
  %sched_scan_mtx = getelementptr inbounds %struct.cfg80211_registered_device, %struct.cfg80211_registered_device* %87, i32 0, i32 28
  call void @mutex_lock(%struct.mutex* %sched_scan_mtx)
  %88 = load %struct.wireless_dev*, %struct.wireless_dev** %wdev, align 8
  call void @wdev_lock(%struct.wireless_dev* %88)
  %89 = load %struct.wireless_dev*, %struct.wireless_dev** %wdev, align 8
  %iftype89 = getelementptr inbounds %struct.wireless_dev, %struct.wireless_dev* %89, i32 0, i32 1
  %90 = load i32, i32* %iftype89, align 8
  br label %sw.default

sw.default:                                       ; preds = %if.end86
  br label %sw.epilog

sw.epilog:                                        ; preds = %sw.default
  %91 = load %struct.wireless_dev*, %struct.wireless_dev** %wdev, align 8
  call void @wdev_unlock(%struct.wireless_dev* %91)
  %92 = load %struct.cfg80211_registered_device*, %struct.cfg80211_registered_device** %rdev, align 8
  %sched_scan_mtx90 = getelementptr inbounds %struct.cfg80211_registered_device, %struct.cfg80211_registered_device* %92, i32 0, i32 28
  call void @mutex_unlock(%struct.mutex* %sched_scan_mtx90)
  %93 = load %struct.cfg80211_registered_device*, %struct.cfg80211_registered_device** %rdev, align 8
  %opencount91 = getelementptr inbounds %struct.cfg80211_registered_device, %struct.cfg80211_registered_device* %93, i32 0, i32 13
  %94 = load i32, i32* %opencount91, align 16
  %inc92 = add nsw i32 %94, 1
  store i32 %inc92, i32* %opencount91, align 16
  %95 = load %struct.cfg80211_registered_device*, %struct.cfg80211_registered_device** %rdev, align 8
  %devlist_mtx93 = getelementptr inbounds %struct.cfg80211_registered_device, %struct.cfg80211_registered_device* %95, i32 0, i32 9
  call void @mutex_unlock(%struct.mutex* %devlist_mtx93)
  %96 = load %struct.cfg80211_registered_device*, %struct.cfg80211_registered_device** %rdev, align 8
  call void @cfg80211_unlock_rdev(%struct.cfg80211_registered_device* %96)
  %97 = load %struct.wireless_dev*, %struct.wireless_dev** %wdev, align 8
  %iftype94 = getelementptr inbounds %struct.wireless_dev, %struct.wireless_dev* %97, i32 0, i32 1
  %98 = load i32, i32* %iftype94, align 8
  %cmp95 = icmp eq i32 %98, 2
  br i1 %cmp95, label %land.lhs.true101, label %lor.lhs.false97

lor.lhs.false97:                                  ; preds = %sw.epilog
  %99 = load %struct.wireless_dev*, %struct.wireless_dev** %wdev, align 8
  %iftype98 = getelementptr inbounds %struct.wireless_dev, %struct.wireless_dev* %99, i32 0, i32 1
  %100 = load i32, i32* %iftype98, align 8
  %cmp99 = icmp eq i32 %100, 8
  br i1 %cmp99, label %land.lhs.true101, label %if.end112

land.lhs.true101:                                 ; preds = %lor.lhs.false97, %sw.epilog
  %101 = load %struct.cfg80211_registered_device*, %struct.cfg80211_registered_device** %rdev, align 8
  %ops = getelementptr inbounds %struct.cfg80211_registered_device, %struct.cfg80211_registered_device* %101, i32 0, i32 0
  %102 = load %struct.cfg80211_ops*, %struct.cfg80211_ops** %ops, align 32
  %set_power_mgmt = getelementptr inbounds %struct.cfg80211_ops, %struct.cfg80211_ops* %102, i32 0, i32 56
  %103 = load i32 (%struct.wiphy*, %struct.net_device*, i1, i32)*, i32 (%struct.wiphy*, %struct.net_device*, i1, i32)** %set_power_mgmt, align 8
  %tobool102 = icmp ne i32 (%struct.wiphy*, %struct.net_device*, i1, i32)* %103, null
  br i1 %tobool102, label %if.then103, label %if.end112

if.then103:                                       ; preds = %land.lhs.true101
  %104 = load %struct.cfg80211_registered_device*, %struct.cfg80211_registered_device** %rdev, align 8
  %105 = load %struct.net_device*, %struct.net_device** %dev, align 8
  %106 = load %struct.wireless_dev*, %struct.wireless_dev** %wdev, align 8
  %ps104 = getelementptr inbounds %struct.wireless_dev, %struct.wireless_dev* %106, i32 0, i32 25
  %107 = load i8, i8* %ps104, align 1
  %tobool105 = trunc i8 %107 to i1
  %108 = load %struct.wireless_dev*, %struct.wireless_dev** %wdev, align 8
  %ps_timeout106 = getelementptr inbounds %struct.wireless_dev, %struct.wireless_dev* %108, i32 0, i32 26
  %109 = load i32, i32* %ps_timeout106, align 4
  %call107 = call i32 @rdev_set_power_mgmt(%struct.cfg80211_registered_device* %104, %struct.net_device* %105, i1 zeroext %tobool105, i32 %109)
  %tobool108 = icmp ne i32 %call107, 0
  br i1 %tobool108, label %if.then109, label %if.end111

if.then109:                                       ; preds = %if.then103
  %110 = load %struct.wireless_dev*, %struct.wireless_dev** %wdev, align 8
  %ps110 = getelementptr inbounds %struct.wireless_dev, %struct.wireless_dev* %110, i32 0, i32 25
  store i8 0, i8* %ps110, align 1
  br label %if.end111

if.end111:                                        ; preds = %if.then109, %if.then103
  br label %if.end112

if.end112:                                        ; preds = %if.end111, %land.lhs.true101, %lor.lhs.false97
  br label %sw.epilog148

sw.bb113:                                         ; preds = %LeafBlock5
  %111 = load %struct.cfg80211_registered_device*, %struct.cfg80211_registered_device** %rdev, align 8
  %devlist_mtx114 = getelementptr inbounds %struct.cfg80211_registered_device, %struct.cfg80211_registered_device* %111, i32 0, i32 9
  call void @mutex_lock(%struct.mutex* %devlist_mtx114)
  %112 = load %struct.wireless_dev*, %struct.wireless_dev** %wdev, align 8
  %list115 = getelementptr inbounds %struct.wireless_dev, %struct.wireless_dev* %112, i32 0, i32 2
  %call116 = call i32 @list_empty(%struct.list_head* %list115)
  %tobool117 = icmp ne i32 %call116, 0
  br i1 %tobool117, label %if.end124, label %if.then118

if.then118:                                       ; preds = %sw.bb113
  %113 = load %struct.net_device*, %struct.net_device** %dev, align 8
  %dev119 = getelementptr inbounds %struct.net_device, %struct.net_device* %113, i32 0, i32 90
  %kobj120 = getelementptr inbounds %struct.device, %struct.device* %dev119, i32 0, i32 2
  call void @sysfs_remove_link(%struct.kobject* %kobj120, i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.17, i32 0, i32 0))
  %114 = load %struct.wireless_dev*, %struct.wireless_dev** %wdev, align 8
  %list121 = getelementptr inbounds %struct.wireless_dev, %struct.wireless_dev* %114, i32 0, i32 2
  call void @list_del_rcu(%struct.list_head* %list121)
  %115 = load %struct.cfg80211_registered_device*, %struct.cfg80211_registered_device** %rdev, align 8
  %devlist_generation122 = getelementptr inbounds %struct.cfg80211_registered_device, %struct.cfg80211_registered_device* %115, i32 0, i32 11
  %116 = load i32, i32* %devlist_generation122, align 8
  %inc123 = add nsw i32 %116, 1
  store i32 %inc123, i32* %devlist_generation122, align 8
  %117 = load %struct.wireless_dev*, %struct.wireless_dev** %wdev, align 8
  call void @cfg80211_mlme_purge_registrations(%struct.wireless_dev* %117)
  br label %if.end124

if.end124:                                        ; preds = %if.then118, %sw.bb113
  %118 = load %struct.cfg80211_registered_device*, %struct.cfg80211_registered_device** %rdev, align 8
  %devlist_mtx125 = getelementptr inbounds %struct.cfg80211_registered_device, %struct.cfg80211_registered_device* %118, i32 0, i32 9
  call void @mutex_unlock(%struct.mutex* %devlist_mtx125)
  call void @synchronize_rcu()
  %119 = load %struct.wireless_dev*, %struct.wireless_dev** %wdev, align 8
  %list126 = getelementptr inbounds %struct.wireless_dev, %struct.wireless_dev* %119, i32 0, i32 2
  call void @INIT_LIST_HEAD(%struct.list_head* %list126)
  %120 = load %struct.wireless_dev*, %struct.wireless_dev** %wdev, align 8
  call void @cfg80211_process_wdev_events(%struct.wireless_dev* %120)
  br label %sw.epilog148

sw.bb127:                                         ; preds = %LeafBlock11
  %121 = load %struct.wireless_dev*, %struct.wireless_dev** %wdev, align 8
  %wiphy128 = getelementptr inbounds %struct.wireless_dev, %struct.wireless_dev* %121, i32 0, i32 0
  %122 = load %struct.wiphy*, %struct.wiphy** %wiphy128, align 8
  %interface_modes = getelementptr inbounds %struct.wiphy, %struct.wiphy* %122, i32 0, i32 8
  %123 = load i16, i16* %interface_modes, align 16
  %conv129 = zext i16 %123 to i64
  %124 = load %struct.wireless_dev*, %struct.wireless_dev** %wdev, align 8
  %iftype130 = getelementptr inbounds %struct.wireless_dev, %struct.wireless_dev* %124, i32 0, i32 1
  %125 = load i32, i32* %iftype130, align 8
  %sh_prom = zext i32 %125 to i64
  %shl = shl i64 1, %sh_prom
  %and131 = and i64 %conv129, %shl
  %tobool132 = icmp ne i64 %and131, 0
  br i1 %tobool132, label %if.end135, label %if.then133

if.then133:                                       ; preds = %sw.bb127
  %call134 = call i32 @notifier_from_errno(i32 -95)
  store i32 %call134, i32* %retval, align 4
  br label %return

if.end135:                                        ; preds = %sw.bb127
  %126 = load %struct.cfg80211_registered_device*, %struct.cfg80211_registered_device** %rdev, align 8
  %rfkill = getelementptr inbounds %struct.cfg80211_registered_device, %struct.cfg80211_registered_device* %126, i32 0, i32 4
  %127 = load %struct.rfkill*, %struct.rfkill** %rfkill, align 8
  %call136 = call zeroext i1 @rfkill_blocked(%struct.rfkill* %127)
  br i1 %call136, label %if.then137, label %if.end139

if.then137:                                       ; preds = %if.end135
  %call138 = call i32 @notifier_from_errno(i32 -132)
  store i32 %call138, i32* %retval, align 4
  br label %return

if.end139:                                        ; preds = %if.end135
  %128 = load %struct.cfg80211_registered_device*, %struct.cfg80211_registered_device** %rdev, align 8
  %devlist_mtx140 = getelementptr inbounds %struct.cfg80211_registered_device, %struct.cfg80211_registered_device* %128, i32 0, i32 9
  call void @mutex_lock(%struct.mutex* %devlist_mtx140)
  %129 = load %struct.cfg80211_registered_device*, %struct.cfg80211_registered_device** %rdev, align 8
  %130 = load %struct.wireless_dev*, %struct.wireless_dev** %wdev, align 8
  %iftype141 = getelementptr inbounds %struct.wireless_dev, %struct.wireless_dev* %130, i32 0, i32 1
  %131 = load i32, i32* %iftype141, align 8
  %call142 = call i32 @cfg80211_can_add_interface(%struct.cfg80211_registered_device* %129, i32 %131)
  store i32 %call142, i32* %ret, align 4
  %132 = load %struct.cfg80211_registered_device*, %struct.cfg80211_registered_device** %rdev, align 8
  %devlist_mtx143 = getelementptr inbounds %struct.cfg80211_registered_device, %struct.cfg80211_registered_device* %132, i32 0, i32 9
  call void @mutex_unlock(%struct.mutex* %devlist_mtx143)
  %133 = load i32, i32* %ret, align 4
  %tobool144 = icmp ne i32 %133, 0
  br i1 %tobool144, label %if.then145, label %if.end147

if.then145:                                       ; preds = %if.end139
  %134 = load i32, i32* %ret, align 4
  %call146 = call i32 @notifier_from_errno(i32 %134)
  store i32 %call146, i32* %retval, align 4
  br label %return

if.end147:                                        ; preds = %if.end139
  br label %sw.epilog148

NewDefault:                                       ; preds = %LeafBlock13, %LeafBlock11, %LeafBlock7, %LeafBlock5, %LeafBlock1, %LeafBlock
  br label %sw.epilog148

sw.epilog148:                                     ; preds = %NewDefault, %if.end147, %if.end124, %if.end112, %sw.bb76, %sw.bb75, %if.end74, %sw.bb
  store i32 0, i32* %retval, align 4
  br label %return

return:                                           ; preds = %sw.epilog148, %if.then145, %if.then137, %if.then133, %if.then
  %135 = load i32, i32* %retval, align 4
  ret i32 %135
}

; Function Attrs: noinline nounwind optnone uwtable
define internal void @wdev_cleanup_work(%struct.work_struct* %work) #0 {
entry:
  %work.addr = alloca %struct.work_struct*, align 8
  %wdev = alloca %struct.wireless_dev*, align 8
  %rdev = alloca %struct.cfg80211_registered_device*, align 8
  %__mptr = alloca %struct.work_struct*, align 8
  %tmp = alloca %struct.wireless_dev*, align 8
  %__ret_warn_on = alloca i32, align 4
  %tmp10 = alloca i64, align 8
  %__ret_warn_on21 = alloca i32, align 4
  %tmp41 = alloca i64, align 8
  store %struct.work_struct* %work, %struct.work_struct** %work.addr, align 8
  %0 = load %struct.work_struct*, %struct.work_struct** %work.addr, align 8
  store %struct.work_struct* %0, %struct.work_struct** %__mptr, align 8
  %1 = load %struct.work_struct*, %struct.work_struct** %__mptr, align 8
  %2 = bitcast %struct.work_struct* %1 to i8*
  %add.ptr = getelementptr inbounds i8, i8* %2, i64 -112
  %3 = bitcast i8* %add.ptr to %struct.wireless_dev*
  store %struct.wireless_dev* %3, %struct.wireless_dev** %tmp, align 8
  %4 = load %struct.wireless_dev*, %struct.wireless_dev** %tmp, align 8
  store %struct.wireless_dev* %4, %struct.wireless_dev** %wdev, align 8
  %5 = load %struct.wireless_dev*, %struct.wireless_dev** %wdev, align 8
  %wiphy = getelementptr inbounds %struct.wireless_dev, %struct.wireless_dev* %5, i32 0, i32 0
  %6 = load %struct.wiphy*, %struct.wiphy** %wiphy, align 8
  %call = call %struct.cfg80211_registered_device* @wiphy_to_dev(%struct.wiphy* %6)
  store %struct.cfg80211_registered_device* %call, %struct.cfg80211_registered_device** %rdev, align 8
  %7 = load %struct.cfg80211_registered_device*, %struct.cfg80211_registered_device** %rdev, align 8
  %sched_scan_mtx = getelementptr inbounds %struct.cfg80211_registered_device, %struct.cfg80211_registered_device* %7, i32 0, i32 28
  call void @mutex_lock(%struct.mutex* %sched_scan_mtx)
  %8 = load %struct.cfg80211_registered_device*, %struct.cfg80211_registered_device** %rdev, align 8
  %scan_req = getelementptr inbounds %struct.cfg80211_registered_device, %struct.cfg80211_registered_device* %8, i32 0, i32 23
  %9 = load %struct.cfg80211_scan_request*, %struct.cfg80211_scan_request** %scan_req, align 16
  %tobool = icmp ne %struct.cfg80211_scan_request* %9, null
  br i1 %tobool, label %land.rhs, label %land.end

land.rhs:                                         ; preds = %entry
  %10 = load %struct.cfg80211_registered_device*, %struct.cfg80211_registered_device** %rdev, align 8
  %scan_req1 = getelementptr inbounds %struct.cfg80211_registered_device, %struct.cfg80211_registered_device* %10, i32 0, i32 23
  %11 = load %struct.cfg80211_scan_request*, %struct.cfg80211_scan_request** %scan_req1, align 16
  %wdev2 = getelementptr inbounds %struct.cfg80211_scan_request, %struct.cfg80211_scan_request* %11, i32 0, i32 7
  %12 = load %struct.wireless_dev*, %struct.wireless_dev** %wdev2, align 8
  %13 = load %struct.wireless_dev*, %struct.wireless_dev** %wdev, align 8
  %cmp = icmp eq %struct.wireless_dev* %12, %13
  br label %land.end

land.end:                                         ; preds = %land.rhs, %entry
  %14 = phi i1 [ false, %entry ], [ %cmp, %land.rhs ]
  %lnot = xor i1 %14, true
  %lnot3 = xor i1 %lnot, true
  %lnot.ext = zext i1 %lnot3 to i32
  store i32 %lnot.ext, i32* %__ret_warn_on, align 4
  %15 = load i32, i32* %__ret_warn_on, align 4
  %tobool4 = icmp ne i32 %15, 0
  %lnot5 = xor i1 %tobool4, true
  %lnot7 = xor i1 %lnot5, true
  %lnot.ext8 = zext i1 %lnot7 to i32
  %conv = sext i32 %lnot.ext8 to i64
  %tobool9 = icmp ne i64 %conv, 0
  br i1 %tobool9, label %if.then, label %if.end

if.then:                                          ; preds = %land.end
  call void @warn_slowpath_null(i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.3, i32 0, i32 0), i32 788)
  br label %if.end

if.end:                                           ; preds = %if.then, %land.end
  %16 = load i32, i32* %__ret_warn_on, align 4
  %tobool11 = icmp ne i32 %16, 0
  %lnot12 = xor i1 %tobool11, true
  %lnot14 = xor i1 %lnot12, true
  %lnot.ext15 = zext i1 %lnot14 to i32
  %conv16 = sext i32 %lnot.ext15 to i64
  store i64 %conv16, i64* %tmp10, align 8
  %17 = load i64, i64* %tmp10, align 8
  %tobool17 = icmp ne i64 %17, 0
  br i1 %tobool17, label %if.then18, label %if.end20

if.then18:                                        ; preds = %if.end
  %18 = load %struct.cfg80211_registered_device*, %struct.cfg80211_registered_device** %rdev, align 8
  %scan_req19 = getelementptr inbounds %struct.cfg80211_registered_device, %struct.cfg80211_registered_device* %18, i32 0, i32 23
  %19 = load %struct.cfg80211_scan_request*, %struct.cfg80211_scan_request** %scan_req19, align 16
  %aborted = getelementptr inbounds %struct.cfg80211_scan_request, %struct.cfg80211_scan_request* %19, i32 0, i32 10
  store i8 1, i8* %aborted, align 8
  %20 = load %struct.cfg80211_registered_device*, %struct.cfg80211_registered_device** %rdev, align 8
  call void @___cfg80211_scan_done(%struct.cfg80211_registered_device* %20, i1 zeroext true)
  br label %if.end20

if.end20:                                         ; preds = %if.then18, %if.end
  %21 = load %struct.cfg80211_registered_device*, %struct.cfg80211_registered_device** %rdev, align 8
  %sched_scan_req = getelementptr inbounds %struct.cfg80211_registered_device, %struct.cfg80211_registered_device* %21, i32 0, i32 24
  %22 = load %struct.cfg80211_sched_scan_request*, %struct.cfg80211_sched_scan_request** %sched_scan_req, align 8
  %tobool22 = icmp ne %struct.cfg80211_sched_scan_request* %22, null
  br i1 %tobool22, label %land.rhs23, label %land.end27

land.rhs23:                                       ; preds = %if.end20
  %23 = load %struct.cfg80211_registered_device*, %struct.cfg80211_registered_device** %rdev, align 8
  %sched_scan_req24 = getelementptr inbounds %struct.cfg80211_registered_device, %struct.cfg80211_registered_device* %23, i32 0, i32 24
  %24 = load %struct.cfg80211_sched_scan_request*, %struct.cfg80211_sched_scan_request** %sched_scan_req24, align 8
  %dev = getelementptr inbounds %struct.cfg80211_sched_scan_request, %struct.cfg80211_sched_scan_request* %24, i32 0, i32 11
  %25 = load %struct.net_device*, %struct.net_device** %dev, align 8
  %26 = load %struct.wireless_dev*, %struct.wireless_dev** %wdev, align 8
  %netdev = getelementptr inbounds %struct.wireless_dev, %struct.wireless_dev* %26, i32 0, i32 3
  %27 = load %struct.net_device*, %struct.net_device** %netdev, align 8
  %cmp25 = icmp eq %struct.net_device* %25, %27
  br label %land.end27

land.end27:                                       ; preds = %land.rhs23, %if.end20
  %28 = phi i1 [ false, %if.end20 ], [ %cmp25, %land.rhs23 ]
  %lnot28 = xor i1 %28, true
  %lnot30 = xor i1 %lnot28, true
  %lnot.ext31 = zext i1 %lnot30 to i32
  store i32 %lnot.ext31, i32* %__ret_warn_on21, align 4
  %29 = load i32, i32* %__ret_warn_on21, align 4
  %tobool32 = icmp ne i32 %29, 0
  %lnot33 = xor i1 %tobool32, true
  %lnot35 = xor i1 %lnot33, true
  %lnot.ext36 = zext i1 %lnot35 to i32
  %conv37 = sext i32 %lnot.ext36 to i64
  %tobool38 = icmp ne i64 %conv37, 0
  br i1 %tobool38, label %if.then39, label %if.end40

if.then39:                                        ; preds = %land.end27
  call void @warn_slowpath_null(i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.3, i32 0, i32 0), i32 794)
  br label %if.end40

if.end40:                                         ; preds = %if.then39, %land.end27
  %30 = load i32, i32* %__ret_warn_on21, align 4
  %tobool42 = icmp ne i32 %30, 0
  %lnot43 = xor i1 %tobool42, true
  %lnot45 = xor i1 %lnot43, true
  %lnot.ext46 = zext i1 %lnot45 to i32
  %conv47 = sext i32 %lnot.ext46 to i64
  store i64 %conv47, i64* %tmp41, align 8
  %31 = load i64, i64* %tmp41, align 8
  %tobool48 = icmp ne i64 %31, 0
  br i1 %tobool48, label %if.then49, label %if.end51

if.then49:                                        ; preds = %if.end40
  %32 = load %struct.cfg80211_registered_device*, %struct.cfg80211_registered_device** %rdev, align 8
  %call50 = call i32 @__cfg80211_stop_sched_scan(%struct.cfg80211_registered_device* %32, i1 zeroext false)
  br label %if.end51

if.end51:                                         ; preds = %if.then49, %if.end40
  %33 = load %struct.cfg80211_registered_device*, %struct.cfg80211_registered_device** %rdev, align 8
  %sched_scan_mtx52 = getelementptr inbounds %struct.cfg80211_registered_device, %struct.cfg80211_registered_device* %33, i32 0, i32 28
  call void @mutex_unlock(%struct.mutex* %sched_scan_mtx52)
  %34 = load %struct.cfg80211_registered_device*, %struct.cfg80211_registered_device** %rdev, align 8
  %devlist_mtx = getelementptr inbounds %struct.cfg80211_registered_device, %struct.cfg80211_registered_device* %34, i32 0, i32 9
  call void @mutex_lock(%struct.mutex* %devlist_mtx)
  %35 = load %struct.cfg80211_registered_device*, %struct.cfg80211_registered_device** %rdev, align 8
  %opencount = getelementptr inbounds %struct.cfg80211_registered_device, %struct.cfg80211_registered_device* %35, i32 0, i32 13
  %36 = load i32, i32* %opencount, align 16
  %dec = add nsw i32 %36, -1
  store i32 %dec, i32* %opencount, align 16
  %37 = load %struct.cfg80211_registered_device*, %struct.cfg80211_registered_device** %rdev, align 8
  %devlist_mtx53 = getelementptr inbounds %struct.cfg80211_registered_device, %struct.cfg80211_registered_device* %37, i32 0, i32 9
  call void @mutex_unlock(%struct.mutex* %devlist_mtx53)
  %38 = load %struct.cfg80211_registered_device*, %struct.cfg80211_registered_device** %rdev, align 8
  %dev_wait = getelementptr inbounds %struct.cfg80211_registered_device, %struct.cfg80211_registered_device* %38, i32 0, i32 14
  call void @__wake_up(%struct.__wait_queue_head* %dev_wait, i32 3, i32 1, i8* null)
  %39 = load %struct.wireless_dev*, %struct.wireless_dev** %wdev, align 8
  %netdev54 = getelementptr inbounds %struct.wireless_dev, %struct.wireless_dev* %39, i32 0, i32 3
  %40 = load %struct.net_device*, %struct.net_device** %netdev54, align 8
  call void @dev_put(%struct.net_device* %40)
  ret void
}

declare i32 @sysfs_create_link(%struct.kobject*, %struct.kobject*, i8*) #1

declare void @netdev_set_default_ethtool_ops(%struct.net_device*, %struct.ethtool_ops*) #1

; Function Attrs: noinline nounwind optnone uwtable
define internal void @dev_hold(%struct.net_device* %dev) #0 {
entry:
  %dev.addr = alloca %struct.net_device*, align 8
  %__vpp_verify = alloca i8*, align 8
  %pao_ID__ = alloca i32, align 4
  store %struct.net_device* %dev, %struct.net_device** %dev.addr, align 8
  br label %do.body

do.body:                                          ; preds = %entry
  br label %do.body1

do.body1:                                         ; preds = %do.body
  store i8* null, i8** %__vpp_verify, align 8
  %0 = load i8*, i8** %__vpp_verify, align 8
  br label %do.end

do.end:                                           ; preds = %do.body1
  br label %do.body2

do.body2:                                         ; preds = %do.end
  store i32 1, i32* %pao_ID__, align 4
  %1 = load %struct.net_device*, %struct.net_device** %dev.addr, align 8
  %pcpu_refcnt = getelementptr inbounds %struct.net_device, %struct.net_device* %1, i32 0, i32 77
  %2 = load i32*, i32** %pcpu_refcnt, align 8
  call void asm "incl %gs:${0:P}", "=*m,*m,~{dirflag},~{fpsr},~{flags}"(i32* %2, i32* %2) #3, !srcloc !10
  br label %do.end3

do.end3:                                          ; preds = %do.body2
  br label %do.end4

do.end4:                                          ; preds = %do.end3
  ret void
}

; Function Attrs: noinline nounwind optnone uwtable
define internal i32 @rdev_set_power_mgmt(%struct.cfg80211_registered_device* %rdev, %struct.net_device* %dev, i1 zeroext %enabled, i32 %timeout) #0 {
entry:
  %rdev.addr = alloca %struct.cfg80211_registered_device*, align 8
  %dev.addr = alloca %struct.net_device*, align 8
  %enabled.addr = alloca i8, align 1
  %timeout.addr = alloca i32, align 4
  %ret = alloca i32, align 4
  store %struct.cfg80211_registered_device* %rdev, %struct.cfg80211_registered_device** %rdev.addr, align 8
  store %struct.net_device* %dev, %struct.net_device** %dev.addr, align 8
  %frombool = zext i1 %enabled to i8
  store i8 %frombool, i8* %enabled.addr, align 1
  store i32 %timeout, i32* %timeout.addr, align 4
  %0 = load %struct.cfg80211_registered_device*, %struct.cfg80211_registered_device** %rdev.addr, align 8
  %wiphy = getelementptr inbounds %struct.cfg80211_registered_device, %struct.cfg80211_registered_device* %0, i32 0, i32 34
  %1 = load %struct.net_device*, %struct.net_device** %dev.addr, align 8
  %2 = load i8, i8* %enabled.addr, align 1
  %tobool = trunc i8 %2 to i1
  %3 = load i32, i32* %timeout.addr, align 4
  call void @trace_rdev_set_power_mgmt(%struct.wiphy* %wiphy, %struct.net_device* %1, i1 zeroext %tobool, i32 %3)
  %4 = load %struct.cfg80211_registered_device*, %struct.cfg80211_registered_device** %rdev.addr, align 8
  %ops = getelementptr inbounds %struct.cfg80211_registered_device, %struct.cfg80211_registered_device* %4, i32 0, i32 0
  %5 = load %struct.cfg80211_ops*, %struct.cfg80211_ops** %ops, align 32
  %set_power_mgmt = getelementptr inbounds %struct.cfg80211_ops, %struct.cfg80211_ops* %5, i32 0, i32 56
  %6 = load i32 (%struct.wiphy*, %struct.net_device*, i1, i32)*, i32 (%struct.wiphy*, %struct.net_device*, i1, i32)** %set_power_mgmt, align 8
  %7 = load %struct.cfg80211_registered_device*, %struct.cfg80211_registered_device** %rdev.addr, align 8
  %wiphy1 = getelementptr inbounds %struct.cfg80211_registered_device, %struct.cfg80211_registered_device* %7, i32 0, i32 34
  %8 = load %struct.net_device*, %struct.net_device** %dev.addr, align 8
  %9 = load i8, i8* %enabled.addr, align 1
  %tobool2 = trunc i8 %9 to i1
  %10 = load i32, i32* %timeout.addr, align 4
  %call = call i32 %6(%struct.wiphy* %wiphy1, %struct.net_device* %8, i1 zeroext %tobool2, i32 %10)
  store i32 %call, i32* %ret, align 4
  %11 = load %struct.cfg80211_registered_device*, %struct.cfg80211_registered_device** %rdev.addr, align 8
  %wiphy3 = getelementptr inbounds %struct.cfg80211_registered_device, %struct.cfg80211_registered_device* %11, i32 0, i32 34
  %12 = load i32, i32* %ret, align 4
  call void @trace_rdev_return_int(%struct.wiphy* %wiphy3, i32 %12)
  %13 = load i32, i32* %ret, align 4
  ret i32 %13
}

declare void @sysfs_remove_link(%struct.kobject*, i8*) #1

declare void @cfg80211_mlme_purge_registrations(%struct.wireless_dev*) #1

declare void @cfg80211_process_wdev_events(%struct.wireless_dev*) #1

; Function Attrs: noinline nounwind optnone uwtable
define internal i32 @notifier_from_errno(i32 %err) #0 {
entry:
  %retval = alloca i32, align 4
  %err.addr = alloca i32, align 4
  store i32 %err, i32* %err.addr, align 4
  %0 = load i32, i32* %err.addr, align 4
  %tobool = icmp ne i32 %0, 0
  br i1 %tobool, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %1 = load i32, i32* %err.addr, align 4
  %sub = sub nsw i32 1, %1
  %or = or i32 32768, %sub
  store i32 %or, i32* %retval, align 4
  br label %return

if.end:                                           ; preds = %entry
  store i32 1, i32* %retval, align 4
  br label %return

return:                                           ; preds = %if.end, %if.then
  %2 = load i32, i32* %retval, align 4
  ret i32 %2
}

; Function Attrs: noinline nounwind optnone uwtable
define internal i32 @cfg80211_can_add_interface(%struct.cfg80211_registered_device* %rdev, i32 %iftype) #0 {
entry:
  %rdev.addr = alloca %struct.cfg80211_registered_device*, align 8
  %iftype.addr = alloca i32, align 4
  store %struct.cfg80211_registered_device* %rdev, %struct.cfg80211_registered_device** %rdev.addr, align 8
  store i32 %iftype, i32* %iftype.addr, align 4
  %0 = load %struct.cfg80211_registered_device*, %struct.cfg80211_registered_device** %rdev.addr, align 8
  %1 = load i32, i32* %iftype.addr, align 4
  %call = call i32 @cfg80211_can_change_interface(%struct.cfg80211_registered_device* %0, %struct.wireless_dev* null, i32 %1)
  ret i32 %call
}

declare void @__wake_up(%struct.__wait_queue_head*, i32, i32, i8*) #1

; Function Attrs: noinline nounwind optnone uwtable
define internal void @trace_rdev_set_power_mgmt(%struct.wiphy* %wiphy, %struct.net_device* %netdev, i1 zeroext %enabled, i32 %timeout) #0 {
entry:
  %retval.i = alloca i1, align 1
  %key.addr.i = alloca %struct.static_key*, align 8
  %wiphy.addr = alloca %struct.wiphy*, align 8
  %netdev.addr = alloca %struct.net_device*, align 8
  %enabled.addr = alloca i8, align 1
  %timeout.addr = alloca i32, align 4
  %it_func_ptr = alloca %struct.tracepoint_func*, align 8
  %it_func = alloca i8*, align 8
  %__data = alloca i8*, align 8
  %_________p1 = alloca %struct.tracepoint_func*, align 8
  %tmp = alloca %struct.tracepoint_func*, align 8
  store %struct.wiphy* %wiphy, %struct.wiphy** %wiphy.addr, align 8
  store %struct.net_device* %netdev, %struct.net_device** %netdev.addr, align 8
  %frombool = zext i1 %enabled to i8
  store i8 %frombool, i8* %enabled.addr, align 1
  store i32 %timeout, i32* %timeout.addr, align 4
  store %struct.static_key* getelementptr inbounds (%struct.tracepoint, %struct.tracepoint* @__tracepoint_rdev_set_power_mgmt, i32 0, i32 1), %struct.static_key** %key.addr.i, align 8
  %0 = load %struct.static_key*, %struct.static_key** %key.addr.i, align 8
  %enabled.i = getelementptr inbounds %struct.static_key, %struct.static_key* %0, i32 0, i32 0
  %call.i = call i32 @atomic_read(%struct.atomic_t* %enabled.i) #3
  %tobool.i = icmp ne i32 %call.i, 0
  %lnot.i = xor i1 %tobool.i, true
  %lnot.ext.i = zext i1 %tobool.i to i32
  %conv.i = sext i32 %lnot.ext.i to i64
  br i1 %tobool.i, label %if.then.i, label %if.end.i

if.then.i:                                        ; preds = %entry
  store i1 true, i1* %retval.i, align 1
  br label %static_key_false.exit

if.end.i:                                         ; preds = %entry
  store i1 false, i1* %retval.i, align 1
  br label %static_key_false.exit

static_key_false.exit:                            ; preds = %if.end.i, %if.then.i
  %1 = load i1, i1* %retval.i, align 1
  br i1 %1, label %if.then, label %if.end12

if.then:                                          ; preds = %static_key_false.exit
  br label %do.body

do.body:                                          ; preds = %if.then
  call void @rcu_read_lock_sched_notrace()
  %2 = load volatile %struct.tracepoint_func*, %struct.tracepoint_func** getelementptr inbounds (%struct.tracepoint, %struct.tracepoint* @__tracepoint_rdev_set_power_mgmt, i32 0, i32 4), align 8
  store %struct.tracepoint_func* %2, %struct.tracepoint_func** %_________p1, align 8
  br label %do.body1

do.body1:                                         ; preds = %do.body
  br label %do.end

do.end:                                           ; preds = %do.body1
  br label %do.body2

do.body2:                                         ; preds = %do.end
  br label %do.end3

do.end3:                                          ; preds = %do.body2
  %3 = load %struct.tracepoint_func*, %struct.tracepoint_func** %_________p1, align 8
  store %struct.tracepoint_func* %3, %struct.tracepoint_func** %tmp, align 8
  %4 = load %struct.tracepoint_func*, %struct.tracepoint_func** %tmp, align 8
  store %struct.tracepoint_func* %4, %struct.tracepoint_func** %it_func_ptr, align 8
  %5 = load %struct.tracepoint_func*, %struct.tracepoint_func** %it_func_ptr, align 8
  %tobool = icmp ne %struct.tracepoint_func* %5, null
  br i1 %tobool, label %if.then4, label %if.end

if.then4:                                         ; preds = %do.end3
  br label %do.body5

do.body5:                                         ; preds = %do.cond, %if.then4
  %6 = load %struct.tracepoint_func*, %struct.tracepoint_func** %it_func_ptr, align 8
  %func = getelementptr inbounds %struct.tracepoint_func, %struct.tracepoint_func* %6, i32 0, i32 0
  %7 = load i8*, i8** %func, align 8
  store i8* %7, i8** %it_func, align 8
  %8 = load %struct.tracepoint_func*, %struct.tracepoint_func** %it_func_ptr, align 8
  %data = getelementptr inbounds %struct.tracepoint_func, %struct.tracepoint_func* %8, i32 0, i32 1
  %9 = load i8*, i8** %data, align 8
  store i8* %9, i8** %__data, align 8
  %10 = load i8*, i8** %it_func, align 8
  %11 = bitcast i8* %10 to void (i8*, %struct.wiphy*, %struct.net_device*, i1, i32)*
  %12 = load i8*, i8** %__data, align 8
  %13 = load %struct.wiphy*, %struct.wiphy** %wiphy.addr, align 8
  %14 = load %struct.net_device*, %struct.net_device** %netdev.addr, align 8
  %15 = load i8, i8* %enabled.addr, align 1
  %tobool6 = trunc i8 %15 to i1
  %16 = load i32, i32* %timeout.addr, align 4
  call void %11(i8* %12, %struct.wiphy* %13, %struct.net_device* %14, i1 zeroext %tobool6, i32 %16)
  br label %do.cond

do.cond:                                          ; preds = %do.body5
  %17 = load %struct.tracepoint_func*, %struct.tracepoint_func** %it_func_ptr, align 8
  %incdec.ptr = getelementptr inbounds %struct.tracepoint_func, %struct.tracepoint_func* %17, i32 1
  store %struct.tracepoint_func* %incdec.ptr, %struct.tracepoint_func** %it_func_ptr, align 8
  %func7 = getelementptr inbounds %struct.tracepoint_func, %struct.tracepoint_func* %incdec.ptr, i32 0, i32 0
  %18 = load i8*, i8** %func7, align 8
  %tobool8 = icmp ne i8* %18, null
  br i1 %tobool8, label %do.body5, label %do.end9

do.end9:                                          ; preds = %do.cond
  br label %if.end

if.end:                                           ; preds = %do.end9, %do.end3
  call void @rcu_read_unlock_sched_notrace()
  br label %do.end11

do.end11:                                         ; preds = %if.end
  br label %if.end12

if.end12:                                         ; preds = %do.end11, %static_key_false.exit
  ret void
}

; Function Attrs: noinline nounwind optnone uwtable
define internal void @trace_rdev_return_int(%struct.wiphy* %wiphy, i32 %ret) #0 {
entry:
  %retval.i = alloca i1, align 1
  %key.addr.i = alloca %struct.static_key*, align 8
  %wiphy.addr = alloca %struct.wiphy*, align 8
  %ret.addr = alloca i32, align 4
  %it_func_ptr = alloca %struct.tracepoint_func*, align 8
  %it_func = alloca i8*, align 8
  %__data = alloca i8*, align 8
  %_________p1 = alloca %struct.tracepoint_func*, align 8
  %tmp = alloca %struct.tracepoint_func*, align 8
  store %struct.wiphy* %wiphy, %struct.wiphy** %wiphy.addr, align 8
  store i32 %ret, i32* %ret.addr, align 4
  store %struct.static_key* getelementptr inbounds (%struct.tracepoint, %struct.tracepoint* @__tracepoint_rdev_return_int, i32 0, i32 1), %struct.static_key** %key.addr.i, align 8
  %0 = load %struct.static_key*, %struct.static_key** %key.addr.i, align 8
  %enabled.i = getelementptr inbounds %struct.static_key, %struct.static_key* %0, i32 0, i32 0
  %call.i = call i32 @atomic_read(%struct.atomic_t* %enabled.i) #3
  %tobool.i = icmp ne i32 %call.i, 0
  %lnot.i = xor i1 %tobool.i, true
  %lnot.ext.i = zext i1 %tobool.i to i32
  %conv.i = sext i32 %lnot.ext.i to i64
  br i1 %tobool.i, label %if.then.i, label %if.end.i

if.then.i:                                        ; preds = %entry
  store i1 true, i1* %retval.i, align 1
  br label %static_key_false.exit

if.end.i:                                         ; preds = %entry
  store i1 false, i1* %retval.i, align 1
  br label %static_key_false.exit

static_key_false.exit:                            ; preds = %if.end.i, %if.then.i
  %1 = load i1, i1* %retval.i, align 1
  br i1 %1, label %if.then, label %if.end11

if.then:                                          ; preds = %static_key_false.exit
  br label %do.body

do.body:                                          ; preds = %if.then
  call void @rcu_read_lock_sched_notrace()
  %2 = load volatile %struct.tracepoint_func*, %struct.tracepoint_func** getelementptr inbounds (%struct.tracepoint, %struct.tracepoint* @__tracepoint_rdev_return_int, i32 0, i32 4), align 8
  store %struct.tracepoint_func* %2, %struct.tracepoint_func** %_________p1, align 8
  br label %do.body1

do.body1:                                         ; preds = %do.body
  br label %do.end

do.end:                                           ; preds = %do.body1
  br label %do.body2

do.body2:                                         ; preds = %do.end
  br label %do.end3

do.end3:                                          ; preds = %do.body2
  %3 = load %struct.tracepoint_func*, %struct.tracepoint_func** %_________p1, align 8
  store %struct.tracepoint_func* %3, %struct.tracepoint_func** %tmp, align 8
  %4 = load %struct.tracepoint_func*, %struct.tracepoint_func** %tmp, align 8
  store %struct.tracepoint_func* %4, %struct.tracepoint_func** %it_func_ptr, align 8
  %5 = load %struct.tracepoint_func*, %struct.tracepoint_func** %it_func_ptr, align 8
  %tobool = icmp ne %struct.tracepoint_func* %5, null
  br i1 %tobool, label %if.then4, label %if.end

if.then4:                                         ; preds = %do.end3
  br label %do.body5

do.body5:                                         ; preds = %do.cond, %if.then4
  %6 = load %struct.tracepoint_func*, %struct.tracepoint_func** %it_func_ptr, align 8
  %func = getelementptr inbounds %struct.tracepoint_func, %struct.tracepoint_func* %6, i32 0, i32 0
  %7 = load i8*, i8** %func, align 8
  store i8* %7, i8** %it_func, align 8
  %8 = load %struct.tracepoint_func*, %struct.tracepoint_func** %it_func_ptr, align 8
  %data = getelementptr inbounds %struct.tracepoint_func, %struct.tracepoint_func* %8, i32 0, i32 1
  %9 = load i8*, i8** %data, align 8
  store i8* %9, i8** %__data, align 8
  %10 = load i8*, i8** %it_func, align 8
  %11 = bitcast i8* %10 to void (i8*, %struct.wiphy*, i32)*
  %12 = load i8*, i8** %__data, align 8
  %13 = load %struct.wiphy*, %struct.wiphy** %wiphy.addr, align 8
  %14 = load i32, i32* %ret.addr, align 4
  call void %11(i8* %12, %struct.wiphy* %13, i32 %14)
  br label %do.cond

do.cond:                                          ; preds = %do.body5
  %15 = load %struct.tracepoint_func*, %struct.tracepoint_func** %it_func_ptr, align 8
  %incdec.ptr = getelementptr inbounds %struct.tracepoint_func, %struct.tracepoint_func* %15, i32 1
  store %struct.tracepoint_func* %incdec.ptr, %struct.tracepoint_func** %it_func_ptr, align 8
  %func6 = getelementptr inbounds %struct.tracepoint_func, %struct.tracepoint_func* %incdec.ptr, i32 0, i32 0
  %16 = load i8*, i8** %func6, align 8
  %tobool7 = icmp ne i8* %16, null
  br i1 %tobool7, label %do.body5, label %do.end8

do.end8:                                          ; preds = %do.cond
  br label %if.end

if.end:                                           ; preds = %do.end8, %do.end3
  call void @rcu_read_unlock_sched_notrace()
  br label %do.end10

do.end10:                                         ; preds = %if.end
  br label %if.end11

if.end11:                                         ; preds = %do.end10, %static_key_false.exit
  ret void
}

; Function Attrs: noinline nounwind optnone uwtable
define internal i32 @cfg80211_can_change_interface(%struct.cfg80211_registered_device* %rdev, %struct.wireless_dev* %wdev, i32 %iftype) #0 {
entry:
  %rdev.addr = alloca %struct.cfg80211_registered_device*, align 8
  %wdev.addr = alloca %struct.wireless_dev*, align 8
  %iftype.addr = alloca i32, align 4
  store %struct.cfg80211_registered_device* %rdev, %struct.cfg80211_registered_device** %rdev.addr, align 8
  store %struct.wireless_dev* %wdev, %struct.wireless_dev** %wdev.addr, align 8
  store i32 %iftype, i32* %iftype.addr, align 4
  %0 = load %struct.cfg80211_registered_device*, %struct.cfg80211_registered_device** %rdev.addr, align 8
  %1 = load %struct.wireless_dev*, %struct.wireless_dev** %wdev.addr, align 8
  %2 = load i32, i32* %iftype.addr, align 4
  %call = call i32 @cfg80211_can_use_iftype_chan(%struct.cfg80211_registered_device* %0, %struct.wireless_dev* %1, i32 %2, %struct.ieee80211_channel* null, i32 0, i8 zeroext 0)
  ret i32 %call
}

declare i32 @cfg80211_can_use_iftype_chan(%struct.cfg80211_registered_device*, %struct.wireless_dev*, i32, %struct.ieee80211_channel*, i32, i8 zeroext) #1

; Function Attrs: noinline nounwind optnone uwtable
define internal void @cfg80211_pernet_exit(%struct.net* %net) #0 {
entry:
  %net.addr = alloca %struct.net*, align 8
  %rdev = alloca %struct.cfg80211_registered_device*, align 8
  %__mptr = alloca %struct.list_head*, align 8
  %tmp = alloca %struct.cfg80211_registered_device*, align 8
  %__ret_warn_on = alloca i32, align 4
  %tmp12 = alloca i64, align 8
  %__mptr20 = alloca %struct.list_head*, align 8
  %tmp22 = alloca %struct.cfg80211_registered_device*, align 8
  store %struct.net* %net, %struct.net** %net.addr, align 8
  call void @rtnl_lock()
  call void @mutex_lock(%struct.mutex* @cfg80211_mutex)
  %0 = load %struct.list_head*, %struct.list_head** getelementptr inbounds (%struct.list_head, %struct.list_head* @cfg80211_rdev_list, i32 0, i32 0), align 8
  store %struct.list_head* %0, %struct.list_head** %__mptr, align 8
  %1 = load %struct.list_head*, %struct.list_head** %__mptr, align 8
  %2 = bitcast %struct.list_head* %1 to i8*
  %add.ptr = getelementptr inbounds i8, i8* %2, i64 -8
  %3 = bitcast i8* %add.ptr to %struct.cfg80211_registered_device*
  store %struct.cfg80211_registered_device* %3, %struct.cfg80211_registered_device** %tmp, align 8
  %4 = load %struct.cfg80211_registered_device*, %struct.cfg80211_registered_device** %tmp, align 8
  store %struct.cfg80211_registered_device* %4, %struct.cfg80211_registered_device** %rdev, align 8
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %5 = load %struct.cfg80211_registered_device*, %struct.cfg80211_registered_device** %rdev, align 8
  %list = getelementptr inbounds %struct.cfg80211_registered_device, %struct.cfg80211_registered_device* %5, i32 0, i32 1
  %cmp = icmp ne %struct.list_head* %list, @cfg80211_rdev_list
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %6 = load %struct.cfg80211_registered_device*, %struct.cfg80211_registered_device** %rdev, align 8
  %wiphy = getelementptr inbounds %struct.cfg80211_registered_device, %struct.cfg80211_registered_device* %6, i32 0, i32 34
  %call = call %struct.net* @wiphy_net(%struct.wiphy* %wiphy)
  %7 = load %struct.net*, %struct.net** %net.addr, align 8
  %call1 = call i32 @net_eq(%struct.net* %call, %struct.net* %7)
  %tobool = icmp ne i32 %call1, 0
  br i1 %tobool, label %if.then, label %if.end19

if.then:                                          ; preds = %for.body
  %8 = load %struct.cfg80211_registered_device*, %struct.cfg80211_registered_device** %rdev, align 8
  %call2 = call i32 @cfg80211_switch_netns(%struct.cfg80211_registered_device* %8, %struct.net* @init_net)
  %tobool3 = icmp ne i32 %call2, 0
  %lnot = xor i1 %tobool3, true
  %lnot4 = xor i1 %lnot, true
  %lnot.ext = zext i1 %lnot4 to i32
  store i32 %lnot.ext, i32* %__ret_warn_on, align 4
  %9 = load i32, i32* %__ret_warn_on, align 4
  %tobool5 = icmp ne i32 %9, 0
  %lnot6 = xor i1 %tobool5, true
  %lnot8 = xor i1 %lnot6, true
  %lnot.ext9 = zext i1 %lnot8 to i32
  %conv = sext i32 %lnot.ext9 to i64
  %tobool10 = icmp ne i64 %conv, 0
  br i1 %tobool10, label %if.then11, label %if.end

if.then11:                                        ; preds = %if.then
  call void @warn_slowpath_null(i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.3, i32 0, i32 0), i32 1095)
  br label %if.end

if.end:                                           ; preds = %if.then11, %if.then
  %10 = load i32, i32* %__ret_warn_on, align 4
  %tobool13 = icmp ne i32 %10, 0
  %lnot14 = xor i1 %tobool13, true
  %lnot16 = xor i1 %lnot14, true
  %lnot.ext17 = zext i1 %lnot16 to i32
  %conv18 = sext i32 %lnot.ext17 to i64
  store i64 %conv18, i64* %tmp12, align 8
  %11 = load i64, i64* %tmp12, align 8
  br label %if.end19

if.end19:                                         ; preds = %if.end, %for.body
  br label %for.inc

for.inc:                                          ; preds = %if.end19
  %12 = load %struct.cfg80211_registered_device*, %struct.cfg80211_registered_device** %rdev, align 8
  %list21 = getelementptr inbounds %struct.cfg80211_registered_device, %struct.cfg80211_registered_device* %12, i32 0, i32 1
  %next = getelementptr inbounds %struct.list_head, %struct.list_head* %list21, i32 0, i32 0
  %13 = load %struct.list_head*, %struct.list_head** %next, align 8
  store %struct.list_head* %13, %struct.list_head** %__mptr20, align 8
  %14 = load %struct.list_head*, %struct.list_head** %__mptr20, align 8
  %15 = bitcast %struct.list_head* %14 to i8*
  %add.ptr23 = getelementptr inbounds i8, i8* %15, i64 -8
  %16 = bitcast i8* %add.ptr23 to %struct.cfg80211_registered_device*
  store %struct.cfg80211_registered_device* %16, %struct.cfg80211_registered_device** %tmp22, align 8
  %17 = load %struct.cfg80211_registered_device*, %struct.cfg80211_registered_device** %tmp22, align 8
  store %struct.cfg80211_registered_device* %17, %struct.cfg80211_registered_device** %rdev, align 8
  br label %for.cond

for.end:                                          ; preds = %for.cond
  call void @mutex_unlock(%struct.mutex* @cfg80211_mutex)
  call void @rtnl_unlock()
  ret void
}

; Function Attrs: noinline nounwind optnone uwtable
define internal i32 @net_eq(%struct.net* %net1, %struct.net* %net2) #0 {
entry:
  %net1.addr = alloca %struct.net*, align 8
  %net2.addr = alloca %struct.net*, align 8
  store %struct.net* %net1, %struct.net** %net1.addr, align 8
  store %struct.net* %net2, %struct.net** %net2.addr, align 8
  %0 = load %struct.net*, %struct.net** %net1.addr, align 8
  %1 = load %struct.net*, %struct.net** %net2.addr, align 8
  %cmp = icmp eq %struct.net* %0, %1
  %conv = zext i1 %cmp to i32
  ret i32 %conv
}

attributes #0 = { noinline nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { argmemonly nounwind }
attributes #3 = { nounwind }
attributes #4 = { nounwind readnone }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 5.0.1 (tags/RELEASE_500/final)"}
!2 = !{i32 -2143185604, i32 -2143185579, i32 -2143185309, i32 -2143185512, i32 -2143185481, i32 -2143185451}
!3 = !{i32 -2143608326}
!4 = !{i32 -2146913023}
!5 = !{i32 -2141895959, i32 -2141895934, i32 -2141895664, i32 -2141895867, i32 -2141895836, i32 -2141895806}
!6 = !{i32 -2143183604, i32 -2143183579, i32 -2143183309, i32 -2143183512, i32 -2143183481, i32 -2143183451}
!7 = !{i32 -2146351439}
!8 = !{i32 -2146351133}
!9 = !{i32 -2145519401}
!10 = !{i32 -2143594360}
