; ModuleID = 'net/wireless/core.bc'
source_filename = "net/wireless/core.c"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%struct.list_head = type { %struct.list_head*, %struct.list_head* }
%struct.mutex = type { %struct.atomic_t, %struct.spinlock, %struct.list_head, %struct.task_struct*, i8* }
%struct.atomic_t = type { i32 }
%struct.spinlock = type { %union.anon.0 }
%union.anon.0 = type { %struct.raw_spinlock }
%struct.raw_spinlock = type { %struct.arch_spinlock }
%struct.arch_spinlock = type { %union.anon.1 }
%union.anon.1 = type { i16 }
%struct.task_struct = type { i64, i8*, %struct.atomic_t, i32, i32, %struct.llist_node, i32, i32, i32, i32, i32, i32, %struct.sched_class*, %struct.sched_entity, %struct.sched_rt_entity, %struct.task_group*, i8, i32, i32, i32, %struct.cpumask, %struct.sched_info, %struct.list_head, %struct.plist_node, %struct.mm_struct*, %struct.mm_struct*, %struct.task_rss_stat, i32, i32, i32, i32, i32, i32, i8, i32, i32, %struct.task_struct*, %struct.task_struct*, %struct.list_head, %struct.list_head, %struct.task_struct*, %struct.list_head, %struct.list_head, [3 x %struct.pid_link], %struct.list_head, %struct.completion*, i32*, i32*, i64, i64, i64, i64, i64, %struct.cputime, i64, i64, %struct.timespec, %struct.timespec, i64, i64, %struct.task_cputime, [3 x %struct.list_head], %struct.cred*, %struct.cred*, [16 x i8], i32, i32, %struct.sysv_sem, %struct.thread_struct, %struct.fs_struct*, %struct.files_struct*, %struct.nsproxy*, %struct.signal_struct*, %struct.sighand_struct*, %struct.sigset_t, %struct.sigset_t, %struct.sigset_t, %struct.sigpending, i64, i64, i32 (i8*)*, i8*, %struct.sigset_t*, %struct.callback_head*, %struct.audit_context*, i32, i32, %struct.seccomp, i32, i32, %struct.spinlock, %struct.raw_spinlock, %struct.plist_head, %struct.rt_mutex_waiter*, i8*, %struct.bio_list*, %struct.blk_plug*, %struct.reclaim_state*, %struct.backing_dev_info*, %struct.io_context*, i64, %struct.siginfo*, %struct.task_io_accounting, i64, i64, i64, %struct.nodemask_t, %struct.seqcount, i32, i32, %struct.css_set*, %struct.list_head, %struct.robust_list_head*, %struct.compat_robust_list_head*, %struct.list_head, %struct.futex_pi_state*, [2 x %struct.perf_event_context*], %struct.mutex, %struct.list_head, %struct.mempolicy*, i16, i16, %struct.callback_head, %struct.pipe_inode_info*, %struct.page_frag, %struct.task_delay_info*, i32, i32, i64, i64, i64, i64, i64, %struct.atomic_t }
%struct.llist_node = type { %struct.llist_node* }
%struct.sched_class = type opaque
%struct.sched_entity = type { %struct.load_weight, %struct.rb_node, %struct.list_head, i32, i64, i64, i64, i64, i64, %struct.sched_statistics, %struct.sched_entity*, %struct.cfs_rq*, %struct.cfs_rq*, %struct.sched_avg }
%struct.load_weight = type { i64, i64 }
%struct.rb_node = type { i64, %struct.rb_node*, %struct.rb_node* }
%struct.sched_statistics = type { i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64 }
%struct.cfs_rq = type opaque
%struct.sched_avg = type { i32, i32, i64, i64, i64 }
%struct.sched_rt_entity = type { %struct.list_head, i64, i64, i32, %struct.sched_rt_entity* }
%struct.task_group = type opaque
%struct.cpumask = type { [1 x i64] }
%struct.sched_info = type { i64, i64, i64, i64 }
%struct.plist_node = type { i32, %struct.list_head, %struct.list_head }
%struct.mm_struct = type { %struct.vm_area_struct*, %struct.rb_root, %struct.vm_area_struct*, i64 (%struct.file*, i64, i64, i64, i64)*, void (%struct.mm_struct*, i64)*, i64, i64, i64, i64, i64, %struct.pgd_t*, %struct.atomic_t, %struct.atomic_t, i32, %struct.spinlock, %struct.rw_semaphore, %struct.list_head, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, [44 x i64], %struct.mm_rss_stat, %struct.linux_binfmt*, [1 x %struct.cpumask], %struct.mm_context_t, i64, %struct.core_state*, %struct.spinlock, %struct.hlist_head, %struct.file*, %struct.uprobes_state }
%struct.rb_root = type { %struct.rb_node* }
%struct.vm_area_struct = type { i64, i64, %struct.vm_area_struct*, %struct.vm_area_struct*, %struct.rb_node, i64, %struct.mm_struct*, %struct.pgprot, i64, %union.anon, %struct.list_head, %struct.anon_vma*, %struct.vm_operations_struct*, i64, %struct.file*, i8*, %struct.mempolicy* }
%struct.pgprot = type { i64 }
%union.anon = type { %struct.anon }
%struct.anon = type { %struct.rb_node, i64 }
%struct.anon_vma = type opaque
%struct.vm_operations_struct = type { void (%struct.vm_area_struct*)*, void (%struct.vm_area_struct*)*, i32 (%struct.vm_area_struct*, %struct.vm_fault*)*, i32 (%struct.vm_area_struct*, %struct.vm_fault*)*, i32 (%struct.vm_area_struct*, i64, i8*, i32, i32)*, i32 (%struct.vm_area_struct*, %struct.mempolicy*)*, %struct.mempolicy* (%struct.vm_area_struct*, i64)*, i32 (%struct.vm_area_struct*, %struct.nodemask_t*, %struct.nodemask_t*, i64)*, i32 (%struct.vm_area_struct*, i64, i64, i64)* }
%struct.vm_fault = type { i32, i64, i8*, %struct.page* }
%struct.page = type { i64, %struct.address_space*, %struct.anon.15, %union.anon.21, %union.anon.23, [8 x i8] }
%struct.address_space = type { %struct.inode*, %struct.radix_tree_root, %struct.spinlock, i32, %struct.rb_root, %struct.list_head, %struct.mutex, i64, i64, %struct.address_space_operations*, i64, %struct.backing_dev_info*, %struct.spinlock, %struct.list_head, i8* }
%struct.inode = type { i16, i16, i32, i32, i32, %struct.posix_acl*, %struct.posix_acl*, %struct.inode_operations*, %struct.super_block*, %struct.address_space*, i8*, i64, %union.anon.40, i32, i64, %struct.timespec, %struct.timespec, %struct.timespec, %struct.spinlock, i16, i32, i64, i64, %struct.mutex, i64, %struct.hlist_node, %struct.list_head, %struct.list_head, %struct.list_head, %union.anon.41, i64, %struct.atomic_t, %struct.atomic_t, %struct.atomic_t, %struct.file_operations*, %struct.file_lock*, %struct.address_space, [2 x %struct.dquot*], %struct.list_head, %union.anon.42, i32, i32, %struct.hlist_head, i8* }
%struct.posix_acl = type opaque
%struct.inode_operations = type { %struct.dentry* (%struct.inode*, %struct.dentry*, i32)*, i8* (%struct.dentry*, %struct.nameidata*)*, i32 (%struct.inode*, i32)*, %struct.posix_acl* (%struct.inode*, i32)*, i32 (%struct.dentry*, i8*, i32)*, void (%struct.dentry*, %struct.nameidata*, i8*)*, i32 (%struct.inode*, %struct.dentry*, i16, i1)*, i32 (%struct.dentry*, %struct.inode*, %struct.dentry*)*, i32 (%struct.inode*, %struct.dentry*)*, i32 (%struct.inode*, %struct.dentry*, i8*)*, i32 (%struct.inode*, %struct.dentry*, i16)*, i32 (%struct.inode*, %struct.dentry*)*, i32 (%struct.inode*, %struct.dentry*, i16, i32)*, i32 (%struct.inode*, %struct.dentry*, %struct.inode*, %struct.dentry*)*, i32 (%struct.dentry*, %struct.iattr*)*, i32 (%struct.vfsmount*, %struct.dentry*, %struct.kstat*)*, i32 (%struct.dentry*, i8*, i8*, i64, i32)*, i64 (%struct.dentry*, i8*, i8*, i64)*, i64 (%struct.dentry*, i8*, i64)*, i32 (%struct.dentry*, i8*)*, i32 (%struct.inode*, %struct.fiemap_extent_info*, i64, i64)*, i32 (%struct.inode*, %struct.timespec*, i32)*, i32 (%struct.inode*, %struct.dentry*, %struct.file*, i32, i16, i32*)*, [8 x i8] }
%struct.dentry = type { i32, %struct.seqcount, %struct.hlist_bl_node, %struct.dentry*, %struct.qstr, %struct.inode*, [32 x i8], i32, %struct.spinlock, %struct.dentry_operations*, %struct.super_block*, i64, i8*, %struct.list_head, %union.anon.7, %struct.list_head, %struct.hlist_node }
%struct.hlist_bl_node = type { %struct.hlist_bl_node*, %struct.hlist_bl_node** }
%struct.qstr = type { %union.anon.3, i8* }
%union.anon.3 = type { i64 }
%struct.dentry_operations = type { i32 (%struct.dentry*, i32)*, i32 (%struct.dentry*, i32)*, i32 (%struct.dentry*, %struct.inode*, %struct.qstr*)*, i32 (%struct.dentry*, %struct.inode*, %struct.dentry*, %struct.inode*, i32, i8*, %struct.qstr*)*, i32 (%struct.dentry*)*, void (%struct.dentry*)*, void (%struct.dentry*)*, void (%struct.dentry*, %struct.inode*)*, i8* (%struct.dentry*, i8*, i32)*, %struct.vfsmount* (%struct.path*)*, i32 (%struct.dentry*, i1)*, [40 x i8] }
%struct.vfsmount = type opaque
%struct.path = type { %struct.vfsmount*, %struct.dentry* }
%union.anon.7 = type { %struct.list_head }
%struct.nameidata = type opaque
%struct.iattr = type { i32, i16, i32, i32, i64, %struct.timespec, %struct.timespec, %struct.timespec, %struct.file* }
%struct.kstat = type { i64, i32, i16, i32, i32, i32, i32, i64, %struct.timespec, %struct.timespec, %struct.timespec, i64, i64 }
%struct.fiemap_extent_info = type { i32, i32, i32, %struct.fiemap_extent* }
%struct.fiemap_extent = type { i64, i64, i64, [2 x i64], i32, [3 x i32] }
%struct.super_block = type { %struct.list_head, i32, i8, i64, i64, %struct.file_system_type*, %struct.super_operations*, %struct.dquot_operations*, %struct.quotactl_ops*, %struct.export_operations*, i64, i64, %struct.dentry*, %struct.rw_semaphore, i32, %struct.atomic_t, i8*, %struct.xattr_handler**, %struct.list_head, %struct.hlist_bl_head, %struct.list_head*, %struct.list_head, %struct.list_head, i32, [28 x i8], %struct.spinlock, %struct.list_head, i32, %struct.block_device*, %struct.backing_dev_info*, %struct.mtd_info*, %struct.hlist_node, %struct.quota_info, %struct.sb_writers, [32 x i8], [16 x i8], i8*, i32, i32, i32, %struct.mutex, i8*, i8*, %struct.dentry_operations*, i32, %struct.shrinker, %struct.atomic64_t, i32, [20 x i8] }
%struct.file_system_type = type { i8*, i32, %struct.dentry* (%struct.file_system_type*, i32, i8*, i8*)*, void (%struct.super_block*)*, %struct.module*, %struct.file_system_type*, %struct.hlist_head, %struct.lock_class_key, %struct.lock_class_key, %struct.lock_class_key, [3 x %struct.lock_class_key], %struct.lock_class_key, %struct.lock_class_key, %struct.lock_class_key }
%struct.module = type { i32, %struct.list_head, [56 x i8], %struct.module_kobject, %struct.module_attribute*, i8*, i8*, %struct.kobject*, %struct.kernel_symbol*, i64*, i32, %struct.kernel_param*, i32, i32, %struct.kernel_symbol*, i64*, %struct.kernel_symbol*, i64*, i32, i32, %struct.exception_table_entry*, i32 ()*, i8*, i8*, i32, i32, i32, i32, i32, i32, %struct.mod_arch_specific, i32, i32, %struct.list_head, %struct.bug_entry*, %struct.elf64_sym*, %struct.elf64_sym*, i32, i32, i8*, i8*, %struct.module_sect_attrs*, %struct.module_notes_attrs*, i8*, i8*, i32, i32, %struct.tracepoint**, i32, i8**, %struct.ftrace_event_call**, i32, %struct.list_head, %struct.list_head, %struct.task_struct*, void ()*, %struct.module_ref* }
%struct.module_kobject = type { %struct.kobject, %struct.module*, %struct.kobject*, %struct.module_param_attrs* }
%struct.kobject = type { i8*, %struct.list_head, %struct.kobject*, %struct.kset*, %struct.kobj_type*, %struct.sysfs_dirent*, %struct.kref, i8 }
%struct.kset = type { %struct.list_head, %struct.spinlock, %struct.kobject, %struct.kset_uevent_ops* }
%struct.kset_uevent_ops = type { i32 (%struct.kset*, %struct.kobject*)*, i8* (%struct.kset*, %struct.kobject*)*, i32 (%struct.kset*, %struct.kobject*, %struct.kobj_uevent_env*)* }
%struct.kobj_uevent_env = type { [32 x i8*], i32, [2048 x i8], i32 }
%struct.kobj_type = type { void (%struct.kobject*)*, %struct.sysfs_ops*, %struct.attribute**, %struct.kobj_ns_type_operations* (%struct.kobject*)*, i8* (%struct.kobject*)* }
%struct.sysfs_ops = type { i64 (%struct.kobject*, %struct.attribute*, i8*)*, i64 (%struct.kobject*, %struct.attribute*, i8*, i64)*, i8* (%struct.kobject*, %struct.attribute*)* }
%struct.attribute = type { i8*, i16 }
%struct.kobj_ns_type_operations = type { i32, i8* ()*, i8* (%struct.sock*)*, i8* ()*, void (i8*)* }
%struct.sock = type opaque
%struct.sysfs_dirent = type opaque
%struct.kref = type { %struct.atomic_t }
%struct.module_param_attrs = type opaque
%struct.module_attribute = type { %struct.attribute, i64 (%struct.module_attribute*, %struct.module_kobject*, i8*)*, i64 (%struct.module_attribute*, %struct.module_kobject*, i8*, i64)*, void (%struct.module*, i8*)*, i32 (%struct.module*)*, void (%struct.module*)* }
%struct.kernel_param = type { i8*, %struct.kernel_param_ops*, i16, i16, %union.anon.5 }
%struct.kernel_param_ops = type { i32 (i8*, %struct.kernel_param*)*, i32 (i8*, %struct.kernel_param*)*, void (i8*)* }
%union.anon.5 = type { i8* }
%struct.kernel_symbol = type { i64, i8* }
%struct.exception_table_entry = type { i32, i32 }
%struct.mod_arch_specific = type {}
%struct.bug_entry = type { i32, i32, i16, i16 }
%struct.elf64_sym = type { i32, i8, i8, i16, i64, i64 }
%struct.module_sect_attrs = type opaque
%struct.module_notes_attrs = type opaque
%struct.tracepoint = type { i8*, %struct.static_key, void ()*, void ()*, %struct.tracepoint_func* }
%struct.static_key = type { %struct.atomic_t }
%struct.tracepoint_func = type { i8*, i8* }
%struct.ftrace_event_call = type opaque
%struct.module_ref = type { i64, i64 }
%struct.lock_class_key = type {}
%struct.super_operations = type { %struct.inode* (%struct.super_block*)*, void (%struct.inode*)*, void (%struct.inode*, i32)*, i32 (%struct.inode*, %struct.writeback_control*)*, i32 (%struct.inode*)*, void (%struct.inode*)*, void (%struct.super_block*)*, i32 (%struct.super_block*, i32)*, i32 (%struct.super_block*)*, i32 (%struct.super_block*)*, i32 (%struct.dentry*, %struct.kstatfs*)*, i32 (%struct.super_block*, i32*, i8*)*, void (%struct.super_block*)*, i32 (%struct.seq_file*, %struct.dentry*)*, i32 (%struct.seq_file*, %struct.dentry*)*, i32 (%struct.seq_file*, %struct.dentry*)*, i32 (%struct.seq_file*, %struct.dentry*)*, i64 (%struct.super_block*, i32, i8*, i64, i64)*, i64 (%struct.super_block*, i32, i8*, i64, i64)*, i32 (%struct.super_block*, %struct.page*, i32)*, i32 (%struct.super_block*)*, void (%struct.super_block*, i32)* }
%struct.writeback_control = type opaque
%struct.kstatfs = type opaque
%struct.seq_file = type { i8*, i64, i64, i64, i64, i64, i64, %struct.mutex, %struct.seq_operations*, i32, i8* }
%struct.seq_operations = type { i8* (%struct.seq_file*, i64*)*, void (%struct.seq_file*, i8*)*, i8* (%struct.seq_file*, i8*, i64*)*, i32 (%struct.seq_file*, i8*)* }
%struct.dquot_operations = type { i32 (%struct.dquot*)*, %struct.dquot* (%struct.super_block*, i32)*, void (%struct.dquot*)*, i32 (%struct.dquot*)*, i32 (%struct.dquot*)*, i32 (%struct.dquot*)*, i32 (%struct.super_block*, i32)*, i64* (%struct.inode*)* }
%struct.dquot = type { %struct.hlist_node, %struct.list_head, %struct.list_head, %struct.list_head, %struct.mutex, %struct.atomic_t, %struct.__wait_queue_head, %struct.super_block*, %struct.kqid, i64, i64, %struct.mem_dqblk }
%struct.__wait_queue_head = type { %struct.spinlock, %struct.list_head }
%struct.kqid = type { %union.anon.6, i32 }
%union.anon.6 = type { i32 }
%struct.mem_dqblk = type { i64, i64, i64, i64, i64, i64, i64, i64, i64 }
%struct.quotactl_ops = type { i32 (%struct.super_block*, i32, i32, %struct.path*)*, i32 (%struct.super_block*, i32, i32)*, i32 (%struct.super_block*, i32)*, i32 (%struct.super_block*, i32)*, i32 (%struct.super_block*, i32, %struct.if_dqinfo*)*, i32 (%struct.super_block*, i32, %struct.if_dqinfo*)*, i32 (%struct.super_block*, i64, %struct.fs_disk_quota*)*, i32 (%struct.super_block*, i64, %struct.fs_disk_quota*)*, i32 (%struct.super_block*, %struct.fs_quota_stat*)*, i32 (%struct.super_block*, i32, i32)* }
%struct.if_dqinfo = type { i64, i64, i32, i32 }
%struct.fs_disk_quota = type { i8, i8, i16, i32, i64, i64, i64, i64, i64, i64, i32, i32, i16, i16, i32, i64, i64, i64, i32, i16, i16, [8 x i8] }
%struct.fs_quota_stat = type { i8, i16, i8, %struct.fs_qfilestat, %struct.fs_qfilestat, i32, i32, i32, i32, i16, i16 }
%struct.fs_qfilestat = type { i64, i64, i32 }
%struct.export_operations = type opaque
%struct.xattr_handler = type { i8*, i32, i64 (%struct.dentry*, i8*, i64, i8*, i64, i32)*, i32 (%struct.dentry*, i8*, i8*, i64, i32)*, i32 (%struct.dentry*, i8*, i8*, i64, i32, i32)* }
%struct.hlist_bl_head = type { %struct.hlist_bl_node* }
%struct.block_device = type { i32, i32, %struct.inode*, %struct.super_block*, %struct.mutex, %struct.list_head, i8*, i8*, i32, i8, %struct.list_head, %struct.block_device*, i32, %struct.hd_struct*, i32, i32, %struct.gendisk*, %struct.request_queue*, %struct.list_head, i64, i32, %struct.mutex }
%struct.hd_struct = type opaque
%struct.gendisk = type opaque
%struct.request_queue = type opaque
%struct.mtd_info = type opaque
%struct.quota_info = type { i32, %struct.mutex, %struct.mutex, %struct.rw_semaphore, [2 x %struct.inode*], [2 x %struct.mem_dqinfo], [2 x %struct.quota_format_ops*] }
%struct.mem_dqinfo = type { %struct.quota_format_type*, i32, %struct.list_head, i64, i32, i32, i64, i64, i8* }
%struct.quota_format_type = type { i32, %struct.quota_format_ops*, %struct.module*, %struct.quota_format_type* }
%struct.quota_format_ops = type { i32 (%struct.super_block*, i32)*, i32 (%struct.super_block*, i32)*, i32 (%struct.super_block*, i32)*, i32 (%struct.super_block*, i32)*, i32 (%struct.dquot*)*, i32 (%struct.dquot*)*, i32 (%struct.dquot*)* }
%struct.sb_writers = type { [3 x %struct.percpu_counter], %struct.__wait_queue_head, i32, %struct.__wait_queue_head }
%struct.percpu_counter = type { %struct.raw_spinlock, i64, %struct.list_head, i32* }
%struct.shrinker = type { i32 (%struct.shrinker*, %struct.shrink_control*)*, i32, i64, %struct.list_head, %struct.atomic64_t }
%struct.shrink_control = type { i32, i64 }
%struct.atomic64_t = type { i64 }
%union.anon.40 = type { i32 }
%struct.hlist_node = type { %struct.hlist_node*, %struct.hlist_node** }
%union.anon.41 = type { %struct.callback_head }
%struct.file_operations = type { %struct.module*, i64 (%struct.file*, i64, i32)*, i64 (%struct.file*, i8*, i64, i64*)*, i64 (%struct.file*, i8*, i64, i64*)*, i64 (%struct.kiocb*, %struct.iovec*, i64, i64)*, i64 (%struct.kiocb*, %struct.iovec*, i64, i64)*, i32 (%struct.file*, i8*, i32 (i8*, i8*, i32, i64, i64, i32)*)*, i32 (%struct.file*, %struct.poll_table_struct*)*, i64 (%struct.file*, i32, i64)*, i64 (%struct.file*, i32, i64)*, i32 (%struct.file*, %struct.vm_area_struct*)*, i32 (%struct.inode*, %struct.file*)*, i32 (%struct.file*, %struct.files_struct*)*, i32 (%struct.inode*, %struct.file*)*, i32 (%struct.file*, i64, i64, i32)*, i32 (%struct.kiocb*, i32)*, i32 (i32, %struct.file*, i32)*, i32 (%struct.file*, i32, %struct.file_lock*)*, i64 (%struct.file*, %struct.page*, i32, i64, i64*, i32)*, i64 (%struct.file*, i64, i64, i64, i64)*, i32 (i32)*, i32 (%struct.file*, i32, %struct.file_lock*)*, i64 (%struct.pipe_inode_info*, %struct.file*, i64*, i64, i32)*, i64 (%struct.file*, i64*, %struct.pipe_inode_info*, i64, i32)*, i32 (%struct.file*, i64, %struct.file_lock**)*, i64 (%struct.file*, i32, i64, i64)*, i32 (%struct.seq_file*, %struct.file*)* }
%struct.kiocb = type opaque
%struct.iovec = type { i8*, i64 }
%struct.poll_table_struct = type opaque
%struct.file_lock = type { %struct.file_lock*, %struct.list_head, %struct.list_head, %struct.files_struct*, i32, i8, i32, %struct.pid*, %struct.__wait_queue_head, %struct.file*, i64, i64, %struct.fasync_struct*, i64, i64, %struct.file_lock_operations*, %struct.lock_manager_operations*, %union.anon.8 }
%struct.pid = type { %struct.atomic_t, i32, [3 x %struct.hlist_head], %struct.callback_head, [1 x %struct.upid] }
%struct.upid = type { i32, %struct.pid_namespace*, %struct.hlist_node }
%struct.pid_namespace = type opaque
%struct.fasync_struct = type { %struct.spinlock, i32, i32, %struct.fasync_struct*, %struct.file*, %struct.callback_head }
%struct.file_lock_operations = type { void (%struct.file_lock*, %struct.file_lock*)*, void (%struct.file_lock*)* }
%struct.lock_manager_operations = type { i32 (%struct.file_lock*, %struct.file_lock*)*, void (%struct.file_lock*)*, i32 (%struct.file_lock*, %struct.file_lock*, i32)*, void (%struct.file_lock*)*, i32 (%struct.file_lock**, i32)* }
%union.anon.8 = type { %struct.nfs_lock_info }
%struct.nfs_lock_info = type { i32, %struct.nlm_lockowner*, %struct.list_head }
%struct.nlm_lockowner = type opaque
%union.anon.42 = type { %struct.pipe_inode_info* }
%struct.radix_tree_root = type { i32, i32, %struct.radix_tree_node* }
%struct.radix_tree_node = type opaque
%struct.address_space_operations = type { i32 (%struct.page*, %struct.writeback_control*)*, i32 (%struct.file*, %struct.page*)*, i32 (%struct.address_space*, %struct.writeback_control*)*, i32 (%struct.page*)*, i32 (%struct.file*, %struct.address_space*, %struct.list_head*, i32)*, i32 (%struct.file*, %struct.address_space*, i64, i32, i32, %struct.page**, i8**)*, i32 (%struct.file*, %struct.address_space*, i64, i32, i32, %struct.page*, i8*)*, i64 (%struct.address_space*, i64)*, void (%struct.page*, i64)*, i32 (%struct.page*, i32)*, void (%struct.page*)*, i64 (i32, %struct.kiocb*, %struct.iovec*, i64, i64)*, i32 (%struct.address_space*, i64, i32, i8**, i64*)*, i32 (%struct.address_space*, %struct.page*, %struct.page*, i32)*, i32 (%struct.page*)*, i32 (%struct.page*, %struct.read_descriptor_t*, i64)*, i32 (%struct.address_space*, %struct.page*)*, i32 (%struct.swap_info_struct*, %struct.file*, i64*)*, void (%struct.file*)* }
%struct.read_descriptor_t = type { i64, i64, %union.anon.14, i32 }
%union.anon.14 = type { i8* }
%struct.swap_info_struct = type opaque
%struct.anon.15 = type { %union.anon.16, %union.anon.17 }
%union.anon.16 = type { i64 }
%union.anon.17 = type { i64 }
%union.anon.21 = type { %struct.list_head }
%union.anon.23 = type { i64 }
%struct.pgd_t = type { i64 }
%struct.rw_semaphore = type { i64, %struct.raw_spinlock, %struct.list_head }
%struct.mm_rss_stat = type { [3 x %struct.atomic64_t] }
%struct.linux_binfmt = type opaque
%struct.mm_context_t = type { i8*, i32, i16, %struct.mutex, i8* }
%struct.core_state = type { %struct.atomic_t, %struct.core_thread, %struct.completion }
%struct.core_thread = type { %struct.task_struct*, %struct.core_thread* }
%struct.completion = type { i32, %struct.__wait_queue_head }
%struct.hlist_head = type { %struct.hlist_node* }
%struct.file = type { %union.anon.2, %struct.path, %struct.inode*, %struct.file_operations*, %struct.spinlock, i32, %struct.atomic64_t, i32, i32, i64, %struct.fown_struct, %struct.cred*, %struct.file_ra_state, i64, i8*, i8*, %struct.list_head, %struct.list_head, %struct.address_space* }
%union.anon.2 = type { %struct.list_head }
%struct.fown_struct = type { %struct.rwlock_t, %struct.pid*, i32, i32, i32, i32 }
%struct.rwlock_t = type { %union.arch_rwlock_t }
%union.arch_rwlock_t = type { i32 }
%struct.file_ra_state = type { i64, i32, i32, i32, i32, i64 }
%struct.uprobes_state = type {}
%struct.task_rss_stat = type { i32, [3 x i32] }
%struct.pid_link = type { %struct.hlist_node, %struct.pid* }
%struct.cputime = type { i64, i64 }
%struct.timespec = type { i64, i64 }
%struct.task_cputime = type { i64, i64, i64 }
%struct.cred = type { %struct.atomic_t, i32, i32, i32, i32, i32, i32, i32, i32, i32, %struct.kernel_cap_struct, %struct.kernel_cap_struct, %struct.kernel_cap_struct, %struct.kernel_cap_struct, i8, %struct.key*, %struct.key*, %struct.key*, %struct.key*, i8*, %struct.user_struct*, %struct.user_namespace*, %struct.group_info*, %struct.callback_head }
%struct.kernel_cap_struct = type { [2 x i32] }
%struct.key = type { %struct.atomic_t, i32, %union.anon.10, %struct.key_type*, %struct.rw_semaphore, %struct.key_user*, i8*, %union.anon.11, i64, i32, i32, i32, i16, i16, i64, i8*, %union.anon.12, %union.anon.13 }
%union.anon.10 = type { %struct.rb_node }
%struct.key_type = type opaque
%struct.key_user = type opaque
%union.anon.11 = type { i64 }
%union.anon.12 = type { %struct.list_head }
%union.anon.13 = type { i64 }
%struct.user_struct = type { %struct.atomic_t, %struct.atomic_t, %struct.atomic_t, %struct.atomic_t, %struct.atomic_t, %struct.atomic_t, %struct.atomic64_t, i64, i64, %struct.key*, %struct.key*, %struct.hlist_node, i32, %struct.atomic64_t }
%struct.user_namespace = type opaque
%struct.group_info = type { %struct.atomic_t, i32, i32, [32 x i32], [0 x i32*] }
%struct.sysv_sem = type { %struct.sem_undo_list* }
%struct.sem_undo_list = type opaque
%struct.thread_struct = type { [3 x %struct.desc_struct], i64, i64, i64, i16, i16, i16, i16, i64, i64, [4 x %struct.perf_event*], i64, i64, i64, i64, i64, %struct.fpu, i64*, i64, i32 }
%struct.desc_struct = type { %union.anon.24 }
%union.anon.24 = type { %struct.anon.25 }
%struct.anon.25 = type { i32, i32 }
%struct.perf_event = type opaque
%struct.fpu = type { i32, i32, %union.thread_xstate* }
%union.thread_xstate = type { %struct.xsave_struct }
%struct.xsave_struct = type { %struct.i387_fxsave_struct, %struct.xsave_hdr_struct, %struct.ymmh_struct }
%struct.i387_fxsave_struct = type { i16, i16, i16, i16, %union.anon.27, i32, i32, [32 x i32], [64 x i32], [12 x i32], %union.anon.30 }
%union.anon.27 = type { %struct.anon.28 }
%struct.anon.28 = type { i64, i64 }
%union.anon.30 = type { [12 x i32] }
%struct.xsave_hdr_struct = type { i64, [2 x i64], [5 x i64] }
%struct.ymmh_struct = type { [64 x i32] }
%struct.fs_struct = type opaque
%struct.files_struct = type opaque
%struct.nsproxy = type { %struct.atomic_t, %struct.uts_namespace*, %struct.ipc_namespace*, %struct.mnt_namespace*, %struct.pid_namespace*, %struct.net* }
%struct.uts_namespace = type opaque
%struct.ipc_namespace = type opaque
%struct.mnt_namespace = type opaque
%struct.net = type { %struct.atomic_t, %struct.atomic_t, %struct.spinlock, %struct.list_head, %struct.list_head, %struct.list_head, %struct.user_namespace*, i32, %struct.proc_dir_entry*, %struct.proc_dir_entry*, %struct.ctl_table_set, %struct.sock*, %struct.sock*, %struct.list_head, %struct.hlist_head*, %struct.hlist_head*, i32, i32, %struct.list_head, %struct.net_device*, %struct.netns_core, %struct.netns_mib, %struct.netns_packet, %struct.netns_unix, [56 x i8], %struct.netns_ipv4, %struct.netns_ipv6, %struct.netns_nf, %struct.netns_xt, %struct.netns_ct, [56 x i8], %struct.netns_nf_frag, %struct.sock*, %struct.sock*, %struct.net_generic*, [40 x i8], %struct.netns_xfrm, %struct.netns_ipvs*, %struct.sock*, %struct.atomic_t, [44 x i8] }
%struct.proc_dir_entry = type opaque
%struct.ctl_table_set = type { i32 (%struct.ctl_table_set*)*, %struct.ctl_dir }
%struct.ctl_dir = type { %struct.ctl_table_header, %struct.rb_root }
%struct.ctl_table_header = type { %union.anon.43, %struct.completion*, %struct.ctl_table*, %struct.ctl_table_root*, %struct.ctl_table_set*, %struct.ctl_dir*, %struct.ctl_node* }
%union.anon.43 = type { %struct.anon.44 }
%struct.anon.44 = type { %struct.ctl_table*, i32, i32, i32 }
%struct.ctl_table = type { i8*, i8*, i32, i16, %struct.ctl_table*, i32 (%struct.ctl_table*, i32, i8*, i64*, i64*)*, %struct.ctl_table_poll*, i8*, i8* }
%struct.ctl_table_poll = type { %struct.atomic_t, %struct.__wait_queue_head }
%struct.ctl_table_root = type { %struct.ctl_table_set, %struct.ctl_table_set* (%struct.ctl_table_root*, %struct.nsproxy*)*, i32 (%struct.ctl_table_header*, %struct.ctl_table*)* }
%struct.ctl_node = type { %struct.rb_node, %struct.ctl_table_header* }
%struct.net_device = type { [16 x i8], %struct.hlist_node, i8*, i64, i64, i64, i32, i64, %struct.list_head, %struct.list_head, %struct.list_head, %struct.list_head, i64, i64, i64, i64, i64, i32, i32, %struct.net_device_stats, %struct.atomic64_t, %struct.net_device_ops*, %struct.ethtool_ops*, %struct.header_ops*, i32, i32, i16, i16, i8, i8, i8, i8, i32, i16, i16, i16, i16, [32 x i8], i8, i8, i8, i16, %struct.spinlock, %struct.netdev_hw_addr_list, %struct.netdev_hw_addr_list, %struct.netdev_hw_addr_list, %struct.kset*, i8, i32, i32, i8*, %struct.in_device*, %struct.dn_dev*, %struct.inet6_dev*, i8*, %struct.wireless_dev*, i64, i8*, %struct.netdev_rx_queue*, i32, i32, i32 (%struct.sk_buff**)*, i8*, %struct.netdev_queue*, [32 x i8], [56 x i8], %struct.netdev_queue*, i32, i32, %struct.Qdisc*, i64, %struct.spinlock, %struct.xps_dev_maps*, %struct.cpu_rmap*, i64, i32, %struct.timer_list, i32*, %struct.list_head, %struct.hlist_node, %struct.list_head, i8, i8, i16, void (%struct.net_device*)*, %struct.netpoll_info*, %struct.net*, %union.anon.51, %struct.garp_port*, %struct.mrp_port*, %struct.device, [4 x %struct.attribute_group*], %struct.rtnl_link_ops*, i32, i16, i8, [16 x %struct.netdev_tc_txq], [16 x i8], %struct.phy_device*, %struct.lock_class_key*, i32, %struct.pm_qos_request, [56 x i8] }
%struct.net_device_stats = type { i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64 }
%struct.net_device_ops = type { i32 (%struct.net_device*)*, void (%struct.net_device*)*, i32 (%struct.net_device*)*, i32 (%struct.net_device*)*, i32 (%struct.sk_buff*, %struct.net_device*)*, i16 (%struct.net_device*, %struct.sk_buff*)*, void (%struct.net_device*, i32)*, void (%struct.net_device*)*, i32 (%struct.net_device*, i8*)*, i32 (%struct.net_device*)*, i32 (%struct.net_device*, %struct.ifreq*, i32)*, i32 (%struct.net_device*, %struct.ifmap*)*, i32 (%struct.net_device*, i32)*, i32 (%struct.net_device*, %struct.neigh_parms*)*, void (%struct.net_device*)*, %struct.rtnl_link_stats64* (%struct.net_device*, %struct.rtnl_link_stats64*)*, %struct.net_device_stats* (%struct.net_device*)*, i32 (%struct.net_device*, i16, i16)*, i32 (%struct.net_device*, i16, i16)*, void (%struct.net_device*)*, i32 (%struct.net_device*, %struct.netpoll_info*, i32)*, void (%struct.net_device*)*, i32 (%struct.net_device*, i32, i8*)*, i32 (%struct.net_device*, i32, i16, i8)*, i32 (%struct.net_device*, i32, i32)*, i32 (%struct.net_device*, i32, i1)*, i32 (%struct.net_device*, i32, %struct.ifla_vf_info*)*, i32 (%struct.net_device*, i32, %struct.nlattr**)*, i32 (%struct.net_device*, i32, %struct.sk_buff*)*, i32 (%struct.net_device*, i8)*, i32 (%struct.net_device*, %struct.sk_buff*, i16, i32)*, i32 (%struct.net_device*, %struct.net_device*)*, i32 (%struct.net_device*, %struct.net_device*)*, i64 (%struct.net_device*, i64)*, i32 (%struct.net_device*, i64)*, i32 (%struct.neighbour*)*, void (%struct.neighbour*)*, i32 (%struct.ndmsg*, %struct.nlattr**, %struct.net_device*, i8*, i16)*, i32 (%struct.ndmsg*, %struct.nlattr**, %struct.net_device*, i8*)*, i32 (%struct.sk_buff*, %struct.netlink_callback*, %struct.net_device*, i32)*, i32 (%struct.net_device*, %struct.nlmsghdr*)*, i32 (%struct.sk_buff*, i32, i32, %struct.net_device*, i32)*, i32 (%struct.net_device*, %struct.nlmsghdr*)*, i32 (%struct.net_device*, i1)* }
%struct.sk_buff = type { %struct.sk_buff*, %struct.sk_buff*, %union.ktime, %struct.sock*, %struct.net_device*, [48 x i8], i64, %struct.sec_path*, i32, i32, i16, i16, %union.anon.45, i32, i16, i16, {}*, %struct.nf_conntrack*, %struct.sk_buff*, i32, i32, i16, i16, i16, i16, i16, i16, i32, %union.anon.47, i32, i32, i32, i32, i32, i32, i32, i32, i8*, i8*, i32, %struct.atomic_t }
%union.ktime = type { i64 }
%struct.sec_path = type opaque
%union.anon.45 = type { i32 }
%struct.nf_conntrack = type { %struct.atomic_t }
%union.anon.47 = type { i32 }
%struct.ifreq = type { %union.anon.48, %union.anon.49 }
%union.anon.48 = type { [16 x i8] }
%union.anon.49 = type { %struct.ifmap }
%struct.ifmap = type { i64, i64, i16, i8, i8, i8 }
%struct.neigh_parms = type opaque
%struct.rtnl_link_stats64 = type { i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64 }
%struct.ifla_vf_info = type { i32, [32 x i8], i32, i32, i32, i32 }
%struct.nlattr = type { i16, i16 }
%struct.neighbour = type opaque
%struct.ndmsg = type { i8, i8, i16, i32, i16, i8, i8 }
%struct.netlink_callback = type { %struct.sk_buff*, %struct.nlmsghdr*, i32 (%struct.sk_buff*, %struct.netlink_callback*)*, i32 (%struct.netlink_callback*)*, i8*, %struct.module*, i16, i16, i32, i32, [6 x i64] }
%struct.nlmsghdr = type { i32, i16, i16, i32, i32 }
%struct.ethtool_ops = type { i32 (%struct.net_device*, %struct.ethtool_cmd*)*, i32 (%struct.net_device*, %struct.ethtool_cmd*)*, void (%struct.net_device*, %struct.ethtool_drvinfo*)*, i32 (%struct.net_device*)*, void (%struct.net_device*, %struct.ethtool_regs*, i8*)*, void (%struct.net_device*, %struct.ethtool_wolinfo*)*, i32 (%struct.net_device*, %struct.ethtool_wolinfo*)*, i32 (%struct.net_device*)*, void (%struct.net_device*, i32)*, i32 (%struct.net_device*)*, i32 (%struct.net_device*)*, i32 (%struct.net_device*)*, i32 (%struct.net_device*, %struct.ethtool_eeprom*, i8*)*, i32 (%struct.net_device*, %struct.ethtool_eeprom*, i8*)*, i32 (%struct.net_device*, %struct.ethtool_coalesce*)*, i32 (%struct.net_device*, %struct.ethtool_coalesce*)*, void (%struct.net_device*, %struct.ethtool_ringparam*)*, i32 (%struct.net_device*, %struct.ethtool_ringparam*)*, void (%struct.net_device*, %struct.ethtool_pauseparam*)*, i32 (%struct.net_device*, %struct.ethtool_pauseparam*)*, void (%struct.net_device*, %struct.ethtool_test*, i64*)*, void (%struct.net_device*, i32, i8*)*, i32 (%struct.net_device*, i32)*, void (%struct.net_device*, %struct.ethtool_stats*, i64*)*, i32 (%struct.net_device*)*, void (%struct.net_device*)*, i32 (%struct.net_device*)*, i32 (%struct.net_device*, i32)*, i32 (%struct.net_device*, i32)*, i32 (%struct.net_device*, %struct.ethtool_rxnfc*, i32*)*, i32 (%struct.net_device*, %struct.ethtool_rxnfc*)*, i32 (%struct.net_device*, %struct.ethtool_flash*)*, i32 (%struct.net_device*, i32*)*, i32 (%struct.net_device*)*, i32 (%struct.net_device*, i32*)*, i32 (%struct.net_device*, i32*)*, void (%struct.net_device*, %struct.ethtool_channels*)*, i32 (%struct.net_device*, %struct.ethtool_channels*)*, i32 (%struct.net_device*, %struct.ethtool_dump*)*, i32 (%struct.net_device*, %struct.ethtool_dump*, i8*)*, i32 (%struct.net_device*, %struct.ethtool_dump*)*, i32 (%struct.net_device*, %struct.ethtool_ts_info*)*, i32 (%struct.net_device*, %struct.ethtool_modinfo*)*, i32 (%struct.net_device*, %struct.ethtool_eeprom*, i8*)*, i32 (%struct.net_device*, %struct.ethtool_eee*)*, i32 (%struct.net_device*, %struct.ethtool_eee*)* }
%struct.ethtool_cmd = type { i32, i32, i32, i16, i8, i8, i8, i8, i8, i8, i32, i32, i16, i8, i8, i32, [2 x i32] }
%struct.ethtool_drvinfo = type { i32, [32 x i8], [32 x i8], [32 x i8], [32 x i8], [32 x i8], [12 x i8], i32, i32, i32, i32, i32 }
%struct.ethtool_regs = type { i32, i32, i32, [0 x i8] }
%struct.ethtool_wolinfo = type { i32, i32, i32, [6 x i8] }
%struct.ethtool_coalesce = type { i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32 }
%struct.ethtool_ringparam = type { i32, i32, i32, i32, i32, i32, i32, i32, i32 }
%struct.ethtool_pauseparam = type { i32, i32, i32, i32 }
%struct.ethtool_test = type { i32, i32, i32, i32, [0 x i64] }
%struct.ethtool_stats = type { i32, i32, [0 x i64] }
%struct.ethtool_rxnfc = type { i32, i32, i64, %struct.ethtool_rx_flow_spec, i32, [0 x i32] }
%struct.ethtool_rx_flow_spec = type { i32, %union.ethtool_flow_union, %struct.ethtool_flow_ext, %union.ethtool_flow_union, %struct.ethtool_flow_ext, i64, i32 }
%union.ethtool_flow_union = type { %struct.ethtool_tcpip4_spec, [36 x i8] }
%struct.ethtool_tcpip4_spec = type { i32, i32, i16, i16, i8 }
%struct.ethtool_flow_ext = type { [2 x i8], [6 x i8], i16, i16, [2 x i32] }
%struct.ethtool_flash = type { i32, i32, [128 x i8] }
%struct.ethtool_channels = type { i32, i32, i32, i32, i32, i32, i32, i32, i32 }
%struct.ethtool_dump = type { i32, i32, i32, i32, [0 x i8] }
%struct.ethtool_ts_info = type { i32, i32, i32, i32, [3 x i32], i32, [3 x i32] }
%struct.ethtool_modinfo = type { i32, i32, i32, [8 x i32] }
%struct.ethtool_eeprom = type { i32, i32, i32, i32, [0 x i8] }
%struct.ethtool_eee = type { i32, i32, i32, i32, i32, i32, i32, i32, [2 x i32] }
%struct.header_ops = type { i32 (%struct.sk_buff*, %struct.net_device*, i16, i8*, i8*, i32)*, i32 (%struct.sk_buff*, i8*)*, i32 (%struct.sk_buff*)*, i32 (%struct.neighbour*, %struct.hh_cache*, i16)*, void (%struct.hh_cache*, %struct.net_device*, i8*)* }
%struct.hh_cache = type { i16, i16, %struct.seqlock_t, [12 x i64] }
%struct.seqlock_t = type { %struct.seqcount, %struct.spinlock }
%struct.netdev_hw_addr_list = type { %struct.list_head, i32 }
%struct.in_device = type opaque
%struct.dn_dev = type opaque
%struct.inet6_dev = type opaque
%struct.wireless_dev = type { %struct.wiphy*, i32, %struct.list_head, %struct.net_device*, i32, %struct.list_head, %struct.spinlock, %struct.mutex, %struct.work_struct, i8, i8, [6 x i8], [32 x i8], i8, i8, i8, i32, %struct.cfg80211_conn*, %struct.cfg80211_cached_keys*, %struct.list_head, %struct.spinlock, %struct.cfg80211_internal_bss*, %struct.cfg80211_chan_def, %struct.ieee80211_channel*, i8, i8, i32, i32, i32, i8, i64 }
%struct.wiphy = type { [6 x i8], [6 x i8], %struct.mac_address*, %struct.ieee80211_txrx_stypes*, %struct.ieee80211_iface_combination*, i32, i16, i16, i16, i16, i32, i32, i32, i32, i32, i8, i8, i8, i16, i16, i32, i32*, i8, i8, i32, i32, i8, [32 x i8], i32, %struct.wiphy_wowlan_support, i16, i8, i32, i32, i32, i8*, i8*, i8, i8*, [3 x %struct.ieee80211_supported_band*], void (%struct.wiphy*, %struct.regulatory_request*)*, %struct.ieee80211_regdomain*, %struct.device, i8, %struct.dentry*, %struct.ieee80211_ht_cap*, %struct.ieee80211_vht_cap*, %struct.net*, [16 x i8], [0 x i8] }
%struct.mac_address = type { [6 x i8] }
%struct.ieee80211_txrx_stypes = type { i16, i16 }
%struct.ieee80211_iface_combination = type { %struct.ieee80211_iface_limit*, i32, i16, i8, i8, i8 }
%struct.ieee80211_iface_limit = type { i16, i16 }
%struct.wiphy_wowlan_support = type { i32, i32, i32, i32, i32, %struct.wiphy_wowlan_tcp_support* }
%struct.wiphy_wowlan_tcp_support = type { %struct.nl80211_wowlan_tcp_data_token_feature*, i32, i32, i32, i8 }
%struct.nl80211_wowlan_tcp_data_token_feature = type { i32, i32, i32 }
%struct.ieee80211_supported_band = type { %struct.ieee80211_channel*, %struct.ieee80211_rate*, i32, i32, i32, %struct.ieee80211_sta_ht_cap, %struct.ieee80211_sta_vht_cap }
%struct.ieee80211_rate = type { i32, i16, i16, i16 }
%struct.ieee80211_sta_ht_cap = type <{ i16, i8, i8, i8, %struct.ieee80211_mcs_info, i8 }>
%struct.ieee80211_mcs_info = type { [10 x i8], i16, i8, [3 x i8] }
%struct.ieee80211_sta_vht_cap = type { i8, i32, %struct.ieee80211_vht_mcs_info }
%struct.ieee80211_vht_mcs_info = type { i16, i16, i16, i16 }
%struct.regulatory_request = type { %struct.callback_head, i32, i32, i32, [2 x i8], i8, i8, i8, i32, %struct.list_head }
%struct.ieee80211_regdomain = type { %struct.callback_head, i32, [2 x i8], i8, [0 x %struct.ieee80211_reg_rule] }
%struct.ieee80211_reg_rule = type { %struct.ieee80211_freq_range, %struct.ieee80211_power_rule, i32 }
%struct.ieee80211_freq_range = type { i32, i32, i32 }
%struct.ieee80211_power_rule = type { i32, i32 }
%struct.ieee80211_ht_cap = type <{ i16, i8, %struct.ieee80211_mcs_info, i16, i32, i8 }>
%struct.ieee80211_vht_cap = type { i32, %struct.ieee80211_vht_mcs_info }
%struct.work_struct = type { %struct.atomic64_t, %struct.list_head, void (%struct.work_struct*)* }
%struct.cfg80211_conn = type opaque
%struct.cfg80211_cached_keys = type { [6 x %struct.key_params], [6 x [32 x i8]], i32, i32 }
%struct.key_params = type { i8*, i8*, i32, i32, i32 }
%struct.cfg80211_internal_bss = type { %struct.list_head, %struct.list_head, %struct.rb_node, i64, i64, %struct.atomic_t, %struct.cfg80211_bss }
%struct.cfg80211_bss = type { %struct.ieee80211_channel*, %struct.cfg80211_bss_ies*, %struct.cfg80211_bss_ies*, %struct.cfg80211_bss_ies*, %struct.cfg80211_bss*, i32, i16, i16, [6 x i8], [2 x i8], [0 x i8] }
%struct.cfg80211_bss_ies = type { i64, %struct.callback_head, i32, [0 x i8] }
%struct.cfg80211_chan_def = type { %struct.ieee80211_channel*, i32, i32, i32 }
%struct.ieee80211_channel = type { i32, i16, i16, i32, i32, i32, i32, i8, i32, i32, i32, i32, i64 }
%struct.netdev_rx_queue = type { %struct.rps_map*, %struct.rps_dev_flow_table*, %struct.kobject, %struct.net_device*, [40 x i8] }
%struct.rps_map = type { i32, %struct.callback_head, [0 x i16] }
%struct.rps_dev_flow_table = type { i32, %struct.callback_head, [0 x %struct.rps_dev_flow] }
%struct.rps_dev_flow = type { i16, i16, i32 }
%struct.netdev_queue = type { %struct.net_device*, %struct.Qdisc*, %struct.Qdisc*, %struct.kobject, i32, [36 x i8], %struct.spinlock, i32, i64, i64, i64, [32 x i8], %struct.dql }
%struct.dql = type { i32, i32, i32, [52 x i8], i32, i32, i32, i32, i32, i32, i64, i32, i32, i32, [20 x i8] }
%struct.Qdisc = type opaque
%struct.xps_dev_maps = type { %struct.callback_head, [0 x %struct.xps_map*] }
%struct.xps_map = type { i32, i32, %struct.callback_head, [0 x i16] }
%struct.cpu_rmap = type opaque
%struct.timer_list = type { %struct.list_head, i64, %struct.tvec_base*, void (i64)*, i64, i32, i32, i8*, [16 x i8] }
%struct.tvec_base = type opaque
%struct.netpoll_info = type opaque
%union.anon.51 = type { i8* }
%struct.garp_port = type opaque
%struct.mrp_port = type opaque
%struct.device = type { %struct.device*, %struct.device_private*, %struct.kobject, i8*, %struct.device_type*, %struct.mutex, %struct.bus_type*, %struct.device_driver*, i8*, %struct.dev_pm_info, %struct.dev_pm_domain*, i32, i64*, i64, %struct.device_dma_parameters*, %struct.list_head, %struct.dma_coherent_mem*, %struct.dev_archdata, %struct.device_node*, %struct.acpi_dev_node, i32, i32, %struct.spinlock, %struct.list_head, %struct.klist_node, %struct.class*, %struct.attribute_group**, void (%struct.device*)*, %struct.iommu_group* }
%struct.device_private = type opaque
%struct.device_type = type { i8*, %struct.attribute_group**, i32 (%struct.device*, %struct.kobj_uevent_env*)*, i8* (%struct.device*, i16*, i32*, i32*)*, void (%struct.device*)*, %struct.dev_pm_ops* }
%struct.dev_pm_ops = type { i32 (%struct.device*)*, void (%struct.device*)*, i32 (%struct.device*)*, i32 (%struct.device*)*, i32 (%struct.device*)*, i32 (%struct.device*)*, i32 (%struct.device*)*, i32 (%struct.device*)*, i32 (%struct.device*)*, i32 (%struct.device*)*, i32 (%struct.device*)*, i32 (%struct.device*)*, i32 (%struct.device*)*, i32 (%struct.device*)*, i32 (%struct.device*)*, i32 (%struct.device*)*, i32 (%struct.device*)*, i32 (%struct.device*)*, i32 (%struct.device*)*, i32 (%struct.device*)*, i32 (%struct.device*)*, i32 (%struct.device*)*, i32 (%struct.device*)* }
%struct.bus_type = type { i8*, i8*, %struct.device*, %struct.bus_attribute*, %struct.device_attribute*, %struct.driver_attribute*, i32 (%struct.device*, %struct.device_driver*)*, i32 (%struct.device*, %struct.kobj_uevent_env*)*, i32 (%struct.device*)*, i32 (%struct.device*)*, void (%struct.device*)*, i32 (%struct.device*, i32)*, i32 (%struct.device*)*, %struct.dev_pm_ops*, %struct.iommu_ops*, %struct.subsys_private*, %struct.lock_class_key }
%struct.bus_attribute = type { %struct.attribute, i64 (%struct.bus_type*, i8*)*, i64 (%struct.bus_type*, i8*, i64)* }
%struct.device_attribute = type { %struct.attribute, i64 (%struct.device*, %struct.device_attribute*, i8*)*, i64 (%struct.device*, %struct.device_attribute*, i8*, i64)* }
%struct.driver_attribute = type { %struct.attribute, i64 (%struct.device_driver*, i8*)*, i64 (%struct.device_driver*, i8*, i64)* }
%struct.iommu_ops = type opaque
%struct.subsys_private = type opaque
%struct.device_driver = type { i8*, %struct.bus_type*, %struct.module*, i8*, i8, %struct.of_device_id*, %struct.acpi_device_id*, i32 (%struct.device*)*, i32 (%struct.device*)*, void (%struct.device*)*, i32 (%struct.device*, i32)*, i32 (%struct.device*)*, %struct.attribute_group**, %struct.dev_pm_ops*, %struct.driver_private* }
%struct.of_device_id = type opaque
%struct.acpi_device_id = type opaque
%struct.driver_private = type opaque
%struct.dev_pm_info = type { %struct.pm_message, i8, %struct.spinlock, %struct.list_head, %struct.completion, %struct.wakeup_source*, i8, %struct.pm_subsys_data*, %struct.dev_pm_qos* }
%struct.pm_message = type { i32 }
%struct.wakeup_source = type { i8*, %struct.list_head, %struct.spinlock, %struct.timer_list, i64, %union.ktime, %union.ktime, %union.ktime, %union.ktime, %union.ktime, i64, i64, i64, i64, i64, i8 }
%struct.pm_subsys_data = type { %struct.spinlock, i32 }
%struct.dev_pm_qos = type { %struct.pm_qos_constraints, %struct.pm_qos_flags, %struct.dev_pm_qos_request*, %struct.dev_pm_qos_request* }
%struct.pm_qos_constraints = type { %struct.plist_head, i32, i32, i32, %struct.blocking_notifier_head* }
%struct.blocking_notifier_head = type { %struct.rw_semaphore, %struct.notifier_block* }
%struct.notifier_block = type { i32 (%struct.notifier_block*, i64, i8*)*, %struct.notifier_block*, i32 }
%struct.pm_qos_flags = type { %struct.list_head, i32 }
%struct.dev_pm_qos_request = type { i32, %union.anon.52, %struct.device* }
%union.anon.52 = type { %struct.plist_node }
%struct.dev_pm_domain = type { %struct.dev_pm_ops }
%struct.device_dma_parameters = type { i32, i64 }
%struct.dma_coherent_mem = type opaque
%struct.dev_archdata = type { %struct.dma_map_ops*, i8* }
%struct.dma_map_ops = type { i8* (%struct.device*, i64, i64*, i32, %struct.dma_attrs*)*, void (%struct.device*, i64, i8*, i64, %struct.dma_attrs*)*, i32 (%struct.device*, %struct.vm_area_struct*, i8*, i64, i64, %struct.dma_attrs*)*, i32 (%struct.device*, %struct.sg_table*, i8*, i64, i64, %struct.dma_attrs*)*, i64 (%struct.device*, %struct.page*, i64, i64, i32, %struct.dma_attrs*)*, void (%struct.device*, i64, i64, i32, %struct.dma_attrs*)*, i32 (%struct.device*, %struct.scatterlist*, i32, i32, %struct.dma_attrs*)*, void (%struct.device*, %struct.scatterlist*, i32, i32, %struct.dma_attrs*)*, void (%struct.device*, i64, i64, i32)*, void (%struct.device*, i64, i64, i32)*, void (%struct.device*, %struct.scatterlist*, i32, i32)*, void (%struct.device*, %struct.scatterlist*, i32, i32)*, i32 (%struct.device*, i64)*, i32 (%struct.device*, i64)*, i32 (%struct.device*, i64)*, i32 }
%struct.dma_attrs = type { [1 x i64] }
%struct.sg_table = type { %struct.scatterlist*, i32, i32 }
%struct.scatterlist = type { i64, i32, i32, i64, i32 }
%struct.device_node = type opaque
%struct.acpi_dev_node = type { i8* }
%struct.klist_node = type { i8*, %struct.list_head, %struct.kref }
%struct.class = type { i8*, %struct.module*, %struct.class_attribute*, %struct.device_attribute*, %struct.bin_attribute*, %struct.kobject*, i32 (%struct.device*, %struct.kobj_uevent_env*)*, i8* (%struct.device*, i16*)*, void (%struct.class*)*, void (%struct.device*)*, i32 (%struct.device*, i32)*, i32 (%struct.device*)*, %struct.kobj_ns_type_operations*, i8* (%struct.device*)*, %struct.dev_pm_ops*, %struct.subsys_private* }
%struct.class_attribute = type { %struct.attribute, i64 (%struct.class*, %struct.class_attribute*, i8*)*, i64 (%struct.class*, %struct.class_attribute*, i8*, i64)*, i8* (%struct.class*, %struct.class_attribute*)* }
%struct.bin_attribute = type { %struct.attribute, i64, i8*, i64 (%struct.file*, %struct.kobject*, %struct.bin_attribute*, i8*, i64, i64)*, i64 (%struct.file*, %struct.kobject*, %struct.bin_attribute*, i8*, i64, i64)*, i32 (%struct.file*, %struct.kobject*, %struct.bin_attribute*, %struct.vm_area_struct*)* }
%struct.attribute_group = type { i8*, i16 (%struct.kobject*, %struct.attribute*, i32)*, %struct.attribute** }
%struct.iommu_group = type opaque
%struct.rtnl_link_ops = type opaque
%struct.netdev_tc_txq = type { i16, i16 }
%struct.phy_device = type opaque
%struct.pm_qos_request = type { %struct.plist_node, i32, %struct.delayed_work }
%struct.delayed_work = type { %struct.work_struct, %struct.timer_list, %struct.workqueue_struct*, i32 }
%struct.workqueue_struct = type opaque
%struct.netns_core = type { %struct.ctl_table_header*, i32, %struct.prot_inuse* }
%struct.prot_inuse = type opaque
%struct.netns_mib = type { [1 x %struct.tcp_mib*], [1 x %struct.ipstats_mib*], [1 x %struct.linux_mib*], [1 x %struct.udp_mib*], [1 x %struct.udp_mib*], [1 x %struct.icmp_mib*], %struct.icmpmsg_mib*, %struct.proc_dir_entry*, [1 x %struct.udp_mib*], [1 x %struct.udp_mib*], [1 x %struct.ipstats_mib*], [1 x %struct.icmpv6_mib*], %struct.icmpv6msg_mib* }
%struct.tcp_mib = type { [16 x i64] }
%struct.linux_mib = type { [95 x i64] }
%struct.icmp_mib = type { [28 x i64] }
%struct.icmpmsg_mib = type { [512 x %struct.atomic64_t] }
%struct.udp_mib = type { [8 x i64] }
%struct.ipstats_mib = type { [32 x i64], %struct.u64_stats_sync }
%struct.u64_stats_sync = type {}
%struct.icmpv6_mib = type { [6 x i64] }
%struct.icmpv6msg_mib = type { [512 x %struct.atomic64_t] }
%struct.netns_packet = type { %struct.mutex, %struct.hlist_head }
%struct.netns_unix = type { i32, %struct.ctl_table_header* }
%struct.netns_ipv4 = type { %struct.ctl_table_header*, %struct.ctl_table_header*, %struct.ctl_table_header*, %struct.ctl_table_header*, %struct.ctl_table_header*, %struct.ipv4_devconf*, %struct.ipv4_devconf*, %struct.fib_rules_ops*, i8, %struct.fib_table*, %struct.fib_table*, %struct.fib_table*, %struct.hlist_head*, %struct.sock*, %struct.sock**, %struct.inet_peer_base*, %struct.tcpm_hash_bucket*, i32, [52 x i8], %struct.netns_frags, %struct.xt_table*, %struct.xt_table*, %struct.xt_table*, %struct.xt_table*, %struct.xt_table*, %struct.xt_table*, i32, i32, i32, i32, i32, i32, i32, [2 x i32], [3 x i64], %struct.atomic_t, %struct.mr_table* }
%struct.ipv4_devconf = type opaque
%struct.fib_rules_ops = type opaque
%struct.fib_table = type opaque
%struct.inet_peer_base = type opaque
%struct.tcpm_hash_bucket = type opaque
%struct.netns_frags = type { i32, %struct.list_head, %struct.spinlock, [38 x i8], %struct.percpu_counter, i32, i32, i32, [12 x i8] }
%struct.xt_table = type opaque
%struct.mr_table = type opaque
%struct.netns_ipv6 = type { %struct.netns_sysctl_ipv6, %struct.ipv6_devconf*, %struct.ipv6_devconf*, %struct.inet_peer_base*, [24 x i8], %struct.netns_frags, %struct.xt_table*, %struct.xt_table*, %struct.xt_table*, %struct.xt_table*, %struct.xt_table*, %struct.rt6_info*, %struct.rt6_statistics*, %struct.timer_list, %struct.hlist_head*, %struct.fib6_table*, [40 x i8], %struct.dst_ops, i32, i64, %struct.sock**, %struct.sock*, %struct.sock*, %struct.sock*, %struct.atomic_t, [12 x i8] }
%struct.netns_sysctl_ipv6 = type { %struct.ctl_table_header*, %struct.ctl_table_header*, %struct.ctl_table_header*, %struct.ctl_table_header*, %struct.ctl_table_header*, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32 }
%struct.ipv6_devconf = type opaque
%struct.rt6_info = type opaque
%struct.rt6_statistics = type opaque
%struct.fib6_table = type opaque
%struct.dst_ops = type { i16, i16, i32, i32 (%struct.dst_ops*)*, %struct.dst_entry* (%struct.dst_entry*, i32)*, i32 (%struct.dst_entry*)*, i32 (%struct.dst_entry*)*, i32* (%struct.dst_entry*, i64)*, void (%struct.dst_entry*)*, void (%struct.dst_entry*, %struct.net_device*, i32)*, %struct.dst_entry* (%struct.dst_entry*)*, void (%struct.sk_buff*)*, void (%struct.dst_entry*, %struct.sock*, %struct.sk_buff*, i32)*, void (%struct.dst_entry*, %struct.sock*, %struct.sk_buff*)*, i32 (%struct.sk_buff*)*, %struct.neighbour* (%struct.dst_entry*, %struct.sk_buff*, i8*)*, %struct.kmem_cache*, [8 x i8], %struct.percpu_counter, [24 x i8] }
%struct.dst_entry = type opaque
%struct.kmem_cache = type { %struct.kmem_cache_cpu*, i64, i64, i32, i32, i32, i32, %struct.kmem_cache_order_objects, %struct.kmem_cache_order_objects, %struct.kmem_cache_order_objects, i32, i32, void (i8*)*, i32, i32, i32, i8*, %struct.list_head, %struct.kobject, i32, [64 x %struct.kmem_cache_node*] }
%struct.kmem_cache_cpu = type { i8**, i64, %struct.page*, %struct.page* }
%struct.kmem_cache_order_objects = type { i64 }
%struct.kmem_cache_node = type opaque
%struct.netns_nf = type { %struct.proc_dir_entry*, [13 x %struct.nf_logger*], %struct.ctl_table_header* }
%struct.nf_logger = type opaque
%struct.netns_xt = type { [13 x %struct.list_head], i8 }
%struct.netns_ct = type { %struct.atomic_t, i32, i32, %struct.kmem_cache*, %struct.hlist_nulls_head*, %struct.hlist_head*, %struct.hlist_nulls_head, %struct.hlist_nulls_head, %struct.hlist_nulls_head, %struct.ip_conntrack_stat*, %struct.nf_ct_event_notifier*, %struct.nf_exp_event_notifier*, i32, i32, i32, i32, i32, i32, i32, i8, %struct.nf_ip_net, %struct.hlist_head*, i32, %struct.ctl_table_header*, %struct.ctl_table_header*, %struct.ctl_table_header*, %struct.ctl_table_header*, %struct.ctl_table_header*, i8* }
%struct.hlist_nulls_head = type { %struct.hlist_nulls_node* }
%struct.hlist_nulls_node = type { %struct.hlist_nulls_node*, %struct.hlist_nulls_node** }
%struct.ip_conntrack_stat = type opaque
%struct.nf_ct_event_notifier = type opaque
%struct.nf_exp_event_notifier = type opaque
%struct.nf_ip_net = type { %struct.nf_generic_net, %struct.nf_tcp_net, %struct.nf_udp_net, %struct.nf_icmp_net, %struct.nf_icmp_net, %struct.ctl_table_header*, %struct.ctl_table* }
%struct.nf_generic_net = type { %struct.nf_proto_net, i32 }
%struct.nf_proto_net = type { %struct.ctl_table_header*, %struct.ctl_table*, %struct.ctl_table_header*, %struct.ctl_table*, i32 }
%struct.nf_tcp_net = type { %struct.nf_proto_net, [14 x i32], i32, i32, i32 }
%struct.nf_udp_net = type { %struct.nf_proto_net, [2 x i32] }
%struct.nf_icmp_net = type { %struct.nf_proto_net, i32 }
%struct.netns_nf_frag = type { %struct.netns_sysctl_ipv6, [48 x i8], %struct.netns_frags }
%struct.net_generic = type opaque
%struct.netns_xfrm = type { %struct.list_head, %struct.hlist_head*, %struct.hlist_head*, %struct.hlist_head*, i32, i32, %struct.work_struct, %struct.hlist_head, %struct.work_struct, %struct.__wait_queue_head, %struct.list_head, %struct.hlist_head*, i32, [6 x %struct.hlist_head], [6 x %struct.xfrm_policy_hash], [6 x i32], %struct.work_struct, %struct.sock*, %struct.sock*, i32, i32, i32, i32, %struct.ctl_table_header*, [32 x i8], %struct.dst_ops, %struct.dst_ops }
%struct.xfrm_policy_hash = type { %struct.hlist_head*, i32 }
%struct.netns_ipvs = type opaque
%struct.signal_struct = type { %struct.atomic_t, %struct.atomic_t, i32, %struct.__wait_queue_head, %struct.task_struct*, %struct.sigpending, i32, i32, %struct.task_struct*, i32, i32, i8, i32, %struct.list_head, %struct.hrtimer, %struct.pid*, %union.ktime, [2 x %struct.cpu_itimer], %struct.thread_group_cputimer, %struct.task_cputime, [3 x %struct.list_head], %struct.pid*, i32, %struct.tty_struct*, i64, i64, i64, i64, i64, i64, %struct.cputime, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, %struct.task_io_accounting, i64, [16 x %struct.rlimit], %struct.pacct_struct, %struct.taskstats*, i32, i32, %struct.tty_audit_buf*, %struct.rw_semaphore, i32, i16, i16, %struct.mutex }
%struct.hrtimer = type { %struct.timerqueue_node, %union.ktime, i32 (%struct.hrtimer*)*, %struct.hrtimer_clock_base*, i64, i32, i8*, [16 x i8] }
%struct.timerqueue_node = type { %struct.rb_node, %union.ktime }
%struct.hrtimer_clock_base = type { %struct.hrtimer_cpu_base*, i32, i32, %struct.timerqueue_head, %union.ktime, i64 ()*, %union.ktime, %union.ktime }
%struct.hrtimer_cpu_base = type { %struct.raw_spinlock, i32, i32, %union.ktime, i32, i32, i64, i64, i64, %union.ktime, [4 x %struct.hrtimer_clock_base] }
%struct.timerqueue_head = type { %struct.rb_root, %struct.timerqueue_node* }
%struct.cpu_itimer = type { i64, i64, i32, i32 }
%struct.thread_group_cputimer = type { %struct.task_cputime, i32, %struct.raw_spinlock }
%struct.tty_struct = type opaque
%struct.rlimit = type { i64, i64 }
%struct.pacct_struct = type { i32, i64, i64, i64, i64, i64, i64 }
%struct.taskstats = type { i16, i32, i8, i8, i64, i64, i64, i64, i64, i64, i64, i64, [32 x i8], i8, [3 x i8], [4 x i8], i32, i32, i32, i32, i32, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64 }
%struct.tty_audit_buf = type opaque
%struct.sighand_struct = type { %struct.atomic_t, [64 x %struct.k_sigaction], %struct.spinlock, %struct.__wait_queue_head }
%struct.k_sigaction = type { %struct.sigaction }
%struct.sigaction = type { void (i32)*, i64, void ()*, %struct.sigset_t }
%struct.sigset_t = type { [1 x i64] }
%struct.sigpending = type { %struct.list_head, %struct.sigset_t }
%struct.audit_context = type opaque
%struct.seccomp = type { i32, %struct.seccomp_filter* }
%struct.seccomp_filter = type opaque
%struct.plist_head = type { %struct.list_head }
%struct.rt_mutex_waiter = type opaque
%struct.bio_list = type opaque
%struct.blk_plug = type opaque
%struct.reclaim_state = type opaque
%struct.backing_dev_info = type opaque
%struct.io_context = type opaque
%struct.siginfo = type { i32, i32, i32, %union.anon.32 }
%union.anon.32 = type { %struct.anon.36, [80 x i8] }
%struct.anon.36 = type { i32, i32, i32, i64, i64 }
%struct.task_io_accounting = type { i64, i64, i64, i64, i64, i64, i64 }
%struct.nodemask_t = type { [1 x i64] }
%struct.seqcount = type { i32 }
%struct.css_set = type { %struct.atomic_t, %struct.hlist_node, %struct.list_head, %struct.list_head, [4 x %struct.cgroup_subsys_state*], %struct.callback_head }
%struct.cgroup_subsys_state = type { %struct.cgroup*, %struct.atomic_t, i64, %struct.css_id*, %struct.work_struct }
%struct.cgroup = type { i64, %struct.atomic_t, i32, %struct.list_head, %struct.list_head, %struct.list_head, %struct.cgroup*, %struct.dentry*, %struct.cgroup_name*, [4 x %struct.cgroup_subsys_state*], %struct.cgroupfs_root*, %struct.list_head, %struct.list_head, %struct.list_head, %struct.list_head, %struct.list_head, %struct.mutex, %struct.callback_head, %struct.work_struct, %struct.list_head, %struct.spinlock, %struct.simple_xattrs }
%struct.cgroup_name = type { %struct.callback_head, [0 x i8] }
%struct.cgroupfs_root = type { %struct.super_block*, i64, i32, i64, %struct.list_head, %struct.cgroup, i32, %struct.list_head, %struct.list_head, i64, %struct.ida, [4096 x i8], [64 x i8] }
%struct.ida = type { %struct.idr, %struct.ida_bitmap* }
%struct.idr = type { %struct.idr_layer*, %struct.idr_layer*, %struct.idr_layer*, i32, i32, i32, %struct.spinlock }
%struct.idr_layer = type { i32, [4 x i64], [256 x %struct.idr_layer*], i32, i32, %struct.callback_head }
%struct.ida_bitmap = type { i64, [15 x i64] }
%struct.simple_xattrs = type { %struct.list_head, %struct.spinlock }
%struct.css_id = type opaque
%struct.robust_list_head = type opaque
%struct.compat_robust_list_head = type { %struct.compat_robust_list, i32, i32 }
%struct.compat_robust_list = type { i32 }
%struct.futex_pi_state = type opaque
%struct.perf_event_context = type opaque
%struct.mempolicy = type opaque
%struct.callback_head = type { %struct.callback_head*, void (%struct.callback_head*)* }
%struct.pipe_inode_info = type opaque
%struct.page_frag = type { %struct.page*, i32, i32 }
%struct.task_delay_info = type { %struct.spinlock, i32, %struct.timespec, %struct.timespec, i64, i64, i32, i32, %struct.timespec, %struct.timespec, i64, i32 }
%struct.pernet_operations = type { %struct.list_head, i32 (%struct.net*)*, void (%struct.net*)*, void (%struct.list_head*)*, i32*, i64 }
%struct.smp_ops = type { void ()*, void (i32)*, void (i32)*, void (i32)*, void (i32)*, i32 (i32, %struct.task_struct*)*, i32 ()*, void (i32)*, void ()*, void (%struct.cpumask*)*, void (i32)* }
%struct.cfg80211_registered_device = type { %struct.cfg80211_ops*, %struct.list_head, %struct.mutex, %struct.rfkill_ops, %struct.rfkill*, %struct.work_struct, [2 x i8], i32, i32, %struct.mutex, %struct.list_head, i32, i32, i32, %struct.__wait_queue_head, %struct.list_head, %struct.spinlock, i32, i32, %struct.spinlock, %struct.list_head, %struct.rb_root, i32, %struct.cfg80211_scan_request*, %struct.cfg80211_sched_scan_request*, i64, %struct.work_struct, %struct.work_struct, %struct.mutex, %struct.work_struct, %struct.work_struct, %struct.cfg80211_wowlan*, %struct.delayed_work, i32, %struct.wiphy }
%struct.cfg80211_ops = type { i32 (%struct.wiphy*, %struct.cfg80211_wowlan*)*, i32 (%struct.wiphy*)*, void (%struct.wiphy*, i1)*, %struct.wireless_dev* (%struct.wiphy*, i8*, i32, i32*, %struct.vif_params*)*, i32 (%struct.wiphy*, %struct.wireless_dev*)*, i32 (%struct.wiphy*, %struct.net_device*, i32, i32*, %struct.vif_params*)*, i32 (%struct.wiphy*, %struct.net_device*, i8, i1, i8*, %struct.key_params*)*, i32 (%struct.wiphy*, %struct.net_device*, i8, i1, i8*, i8*, void (i8*, %struct.key_params*)*)*, i32 (%struct.wiphy*, %struct.net_device*, i8, i1, i8*)*, i32 (%struct.wiphy*, %struct.net_device*, i8, i1, i1)*, i32 (%struct.wiphy*, %struct.net_device*, i8)*, i32 (%struct.wiphy*, %struct.net_device*, %struct.cfg80211_ap_settings*)*, i32 (%struct.wiphy*, %struct.net_device*, %struct.cfg80211_beacon_data*)*, i32 (%struct.wiphy*, %struct.net_device*)*, i32 (%struct.wiphy*, %struct.net_device*, i8*, %struct.station_parameters*)*, i32 (%struct.wiphy*, %struct.net_device*, i8*)*, i32 (%struct.wiphy*, %struct.net_device*, i8*, %struct.station_parameters*)*, i32 (%struct.wiphy*, %struct.net_device*, i8*, %struct.station_info*)*, i32 (%struct.wiphy*, %struct.net_device*, i32, i8*, %struct.station_info*)*, i32 (%struct.wiphy*, %struct.net_device*, i8*, i8*)*, i32 (%struct.wiphy*, %struct.net_device*, i8*)*, i32 (%struct.wiphy*, %struct.net_device*, i8*, i8*)*, i32 (%struct.wiphy*, %struct.net_device*, i8*, i8*, %struct.mpath_info*)*, i32 (%struct.wiphy*, %struct.net_device*, i32, i8*, i8*, %struct.mpath_info*)*, i32 (%struct.wiphy*, %struct.net_device*, %struct.mesh_config*)*, i32 (%struct.wiphy*, %struct.net_device*, i32, %struct.mesh_config*)*, i32 (%struct.wiphy*, %struct.net_device*, %struct.mesh_config*, %struct.mesh_setup*)*, i32 (%struct.wiphy*, %struct.net_device*)*, i32 (%struct.wiphy*, %struct.net_device*, %struct.bss_parameters*)*, i32 (%struct.wiphy*, %struct.net_device*, %struct.ieee80211_txq_params*)*, i32 (%struct.wiphy*, %struct.net_device*, %struct.ieee80211_channel*)*, i32 (%struct.wiphy*, %struct.cfg80211_chan_def*)*, i32 (%struct.wiphy*, %struct.cfg80211_scan_request*)*, i32 (%struct.wiphy*, %struct.net_device*, %struct.cfg80211_auth_request*)*, i32 (%struct.wiphy*, %struct.net_device*, %struct.cfg80211_assoc_request*)*, i32 (%struct.wiphy*, %struct.net_device*, %struct.cfg80211_deauth_request*)*, i32 (%struct.wiphy*, %struct.net_device*, %struct.cfg80211_disassoc_request*)*, i32 (%struct.wiphy*, %struct.net_device*, %struct.cfg80211_connect_params*)*, i32 (%struct.wiphy*, %struct.net_device*, i16)*, i32 (%struct.wiphy*, %struct.net_device*, %struct.cfg80211_ibss_params*)*, i32 (%struct.wiphy*, %struct.net_device*)*, i32 (%struct.wiphy*, %struct.net_device*, i32*)*, i32 (%struct.wiphy*, i32)*, i32 (%struct.wiphy*, %struct.wireless_dev*, i32, i32)*, i32 (%struct.wiphy*, %struct.wireless_dev*, i32*)*, i32 (%struct.wiphy*, %struct.net_device*, i8*)*, void (%struct.wiphy*)*, i32 (%struct.wiphy*, %struct.net_device*, i8*, %struct.cfg80211_bitrate_mask*)*, i32 (%struct.wiphy*, %struct.net_device*, i32, %struct.survey_info*)*, i32 (%struct.wiphy*, %struct.net_device*, %struct.cfg80211_pmksa*)*, i32 (%struct.wiphy*, %struct.net_device*, %struct.cfg80211_pmksa*)*, i32 (%struct.wiphy*, %struct.net_device*)*, i32 (%struct.wiphy*, %struct.wireless_dev*, %struct.ieee80211_channel*, i32, i64*)*, i32 (%struct.wiphy*, %struct.wireless_dev*, i64)*, i32 (%struct.wiphy*, %struct.wireless_dev*, %struct.ieee80211_channel*, i1, i32, i8*, i64, i1, i1, i64*)*, i32 (%struct.wiphy*, %struct.wireless_dev*, i64)*, i32 (%struct.wiphy*, %struct.net_device*, i1, i32)*, i32 (%struct.wiphy*, %struct.net_device*, i32, i32)*, i32 (%struct.wiphy*, %struct.net_device*, i32, i32, i32)*, void (%struct.wiphy*, %struct.wireless_dev*, i16, i1)*, i32 (%struct.wiphy*, i32, i32)*, i32 (%struct.wiphy*, i32*, i32*)*, i32 (%struct.wiphy*, i32, i32)*, void (%struct.wiphy*, i32*, i32*, i32*, i32*)*, i32 (%struct.wiphy*, %struct.net_device*, %struct.cfg80211_sched_scan_request*)*, i32 (%struct.wiphy*, %struct.net_device*)*, i32 (%struct.wiphy*, %struct.net_device*, %struct.cfg80211_gtk_rekey_data*)*, i32 (%struct.wiphy*, %struct.net_device*, i8*, i8, i8, i16, i8*, i64)*, i32 (%struct.wiphy*, %struct.net_device*, i8*, i32)*, i32 (%struct.wiphy*, %struct.net_device*, i8*, i64*)*, i32 (%struct.wiphy*, %struct.net_device*, i16)*, i32 (%struct.wiphy*, %struct.net_device*, i32)*, void (%struct.wiphy*, %struct.net_device*, %struct.ethtool_stats*, i64*)*, void (%struct.wiphy*, %struct.net_device*, i32, i8*)*, i32 (%struct.wiphy*, %struct.wireless_dev*, %struct.cfg80211_chan_def*)*, i32 (%struct.wiphy*, %struct.wireless_dev*)*, void (%struct.wiphy*, %struct.wireless_dev*)*, i32 (%struct.wiphy*, %struct.net_device*, %struct.cfg80211_acl_data*)*, i32 (%struct.wiphy*, %struct.net_device*, %struct.cfg80211_chan_def*)*, i32 (%struct.wiphy*, %struct.net_device*, %struct.cfg80211_update_ft_ies_params*)*, i32 (%struct.wiphy*, %struct.wireless_dev*, i32, i16)*, void (%struct.wiphy*, %struct.wireless_dev*)* }
%struct.vif_params = type { i32, [6 x i8] }
%struct.cfg80211_ap_settings = type { %struct.cfg80211_chan_def, %struct.cfg80211_beacon_data, i32, i32, i8*, i64, i32, %struct.cfg80211_crypto_settings, i8, i32, i32, i8, i8, %struct.cfg80211_acl_data*, i8 }
%struct.cfg80211_beacon_data = type { i8*, i8*, i8*, i8*, i8*, i8*, i64, i64, i64, i64, i64, i64 }
%struct.cfg80211_crypto_settings = type { i32, i32, i32, [5 x i32], i32, [2 x i32], i8, i16, i8 }
%struct.cfg80211_acl_data = type { i32, i32, [0 x %struct.mac_address] }
%struct.station_parameters = type { i8*, %struct.net_device*, i32, i32, i32, i32, i16, i8, i8, i8, %struct.ieee80211_ht_cap*, %struct.ieee80211_vht_cap*, i8, i8, i32, i16, i8*, i8 }
%struct.station_info = type { i32, i32, i32, i64, i64, i16, i16, i8, i8, i8, %struct.rate_info, %struct.rate_info, i32, i32, i32, i32, i32, %struct.sta_bss_parameters, %struct.nl80211_sta_flag_update, i32, i8*, i64, i32, i64, i32, i32, i32 }
%struct.rate_info = type { i8, i8, i16, i8 }
%struct.sta_bss_parameters = type { i8, i8, i16 }
%struct.nl80211_sta_flag_update = type { i32, i32 }
%struct.mpath_info = type { i32, i32, i32, i32, i32, i32, i8, i8, i32 }
%struct.mesh_config = type { i16, i16, i16, i16, i8, i8, i8, i8, i32, i8, i32, i16, i32, i16, i16, i16, i8, i16, i8, i8, i32, i16, i32, i16, i16, i32, i16 }
%struct.mesh_setup = type { %struct.cfg80211_chan_def, i8*, i8, i8, i8, i8, i8*, i8, i8, i8, i8, i8, i16, [3 x i32] }
%struct.bss_parameters = type { i32, i32, i32, i8*, i8, i32, i32, i8, i8 }
%struct.ieee80211_txq_params = type { i32, i16, i16, i16, i8 }
%struct.cfg80211_auth_request = type { %struct.cfg80211_bss*, i8*, i64, i32, i8*, i8, i8, i8*, i64 }
%struct.cfg80211_assoc_request = type { %struct.cfg80211_bss*, i8*, i8*, i64, %struct.cfg80211_crypto_settings, i8, i32, %struct.ieee80211_ht_cap, %struct.ieee80211_ht_cap, %struct.ieee80211_vht_cap, %struct.ieee80211_vht_cap }
%struct.cfg80211_deauth_request = type { i8*, i8*, i64, i16, i8 }
%struct.cfg80211_disassoc_request = type { %struct.cfg80211_bss*, i8*, i64, i16, i8 }
%struct.cfg80211_connect_params = type { %struct.ieee80211_channel*, i8*, i8*, i64, i32, i8*, i64, i8, i32, %struct.cfg80211_crypto_settings, i8*, i8, i8, i32, i32, %struct.ieee80211_ht_cap, %struct.ieee80211_ht_cap, %struct.ieee80211_vht_cap, %struct.ieee80211_vht_cap }
%struct.cfg80211_ibss_params = type { i8*, i8*, %struct.cfg80211_chan_def, i8*, i8, i8, i16, i32, i8, i8, i8, [3 x i32] }
%struct.cfg80211_bitrate_mask = type { [3 x %struct.anon.53] }
%struct.anon.53 = type { i32, [10 x i8] }
%struct.survey_info = type { %struct.ieee80211_channel*, i64, i64, i64, i64, i64, i32, i8 }
%struct.cfg80211_pmksa = type { i8*, i8* }
%struct.cfg80211_gtk_rekey_data = type { [16 x i8], [16 x i8], [8 x i8] }
%struct.cfg80211_update_ft_ies_params = type { i16, i8*, i64 }
%struct.rfkill_ops = type { void (%struct.rfkill*, i8*)*, void (%struct.rfkill*, i8*)*, i32 (i8*, i1)* }
%struct.rfkill = type opaque
%struct.cfg80211_scan_request = type { %struct.cfg80211_ssid*, i32, i32, i8*, i64, i32, [3 x i32], %struct.wireless_dev*, %struct.wiphy*, i64, i8, i8, [0 x %struct.ieee80211_channel*] }
%struct.cfg80211_ssid = type { [32 x i8], i8 }
%struct.cfg80211_sched_scan_request = type { %struct.cfg80211_ssid*, i32, i32, i32, i8*, i64, i32, %struct.cfg80211_match_set*, i32, i32, %struct.wiphy*, %struct.net_device*, i64, [0 x %struct.ieee80211_channel*] }
%struct.cfg80211_match_set = type { %struct.cfg80211_ssid }
%struct.cfg80211_wowlan = type { i8, i8, i8, i8, i8, i8, i8, %struct.cfg80211_wowlan_trig_pkt_pattern*, %struct.cfg80211_wowlan_tcp*, i32 }
%struct.cfg80211_wowlan_trig_pkt_pattern = type { i8*, i8*, i32, i32 }
%struct.cfg80211_wowlan_tcp = type { %struct.socket*, i32, i32, i16, i16, [6 x i8], i32, i8*, %struct.nl80211_wowlan_tcp_data_seq, i32, i32, i8*, i8*, i32, %struct.nl80211_wowlan_tcp_data_token }
%struct.socket = type { i32, i16, i64, %struct.socket_wq*, %struct.file*, %struct.sock*, %struct.proto_ops* }
%struct.socket_wq = type { %struct.__wait_queue_head, %struct.fasync_struct*, %struct.callback_head, [16 x i8] }
%struct.proto_ops = type { i32, %struct.module*, i32 (%struct.socket*)*, i32 (%struct.socket*, %struct.sockaddr*, i32)*, i32 (%struct.socket*, %struct.sockaddr*, i32, i32)*, i32 (%struct.socket*, %struct.socket*)*, i32 (%struct.socket*, %struct.socket*, i32)*, i32 (%struct.socket*, %struct.sockaddr*, i32*, i32)*, i32 (%struct.file*, %struct.socket*, %struct.poll_table_struct*)*, i32 (%struct.socket*, i32, i64)*, i32 (%struct.socket*, i32, i64)*, i32 (%struct.socket*, i32)*, i32 (%struct.socket*, i32)*, i32 (%struct.socket*, i32, i32, i8*, i32)*, i32 (%struct.socket*, i32, i32, i8*, i32*)*, i32 (%struct.socket*, i32, i32, i8*, i32)*, i32 (%struct.socket*, i32, i32, i8*, i32*)*, i32 (%struct.kiocb*, %struct.socket*, %struct.msghdr*, i64)*, i32 (%struct.kiocb*, %struct.socket*, %struct.msghdr*, i64, i32)*, i32 (%struct.file*, %struct.socket*, %struct.vm_area_struct*)*, i64 (%struct.socket*, %struct.page*, i32, i64, i32)*, i64 (%struct.socket*, i64*, %struct.pipe_inode_info*, i64, i32)*, void (%struct.sock*, i32)* }
%struct.sockaddr = type { i16, [14 x i8] }
%struct.msghdr = type { i8*, i32, %struct.iovec*, i64, i8*, i64, i32 }
%struct.nl80211_wowlan_tcp_data_seq = type { i32, i32, i32 }
%struct.nl80211_wowlan_tcp_data_token = type { i32, i32, [0 x i8] }
%struct.__wait_queue = type { i32, i8*, i32 (%struct.__wait_queue*, i32, i32, i8*)*, %struct.list_head }
%struct.cfg80211_beacon_registration = type { %struct.list_head, i32 }

@cfg80211_rdev_list = global %struct.list_head { %struct.list_head* @cfg80211_rdev_list, %struct.list_head* @cfg80211_rdev_list }, align 8
@cfg80211_mutex = global %struct.mutex { %struct.atomic_t { i32 1 }, %struct.spinlock zeroinitializer, %struct.list_head { %struct.list_head* bitcast (i8* getelementptr (i8, i8* bitcast (%struct.mutex* @cfg80211_mutex to i8*), i64 8) to %struct.list_head*), %struct.list_head* bitcast (i8* getelementptr (i8, i8* bitcast (%struct.mutex* @cfg80211_mutex to i8*), i64 8) to %struct.list_head*) }, %struct.task_struct* null, i8* null }, align 8
@__param_str_cfg80211_disable_40mhz_24ghz = internal constant [38 x i8] c"cfg80211.cfg80211_disable_40mhz_24ghz\00", align 16
@param_ops_bool = external global %struct.kernel_param_ops, align 8
@cfg80211_disable_40mhz_24ghz = internal global i8 0, align 1
@__param_cfg80211_disable_40mhz_24ghz = internal constant %struct.kernel_param { i8* getelementptr inbounds ([38 x i8], [38 x i8]* @__param_str_cfg80211_disable_40mhz_24ghz, i32 0, i32 0), %struct.kernel_param_ops* @param_ops_bool, i16 420, i16 -1, %union.anon.5 { i8* @cfg80211_disable_40mhz_24ghz } }, section "__param", align 8
@.str = private unnamed_addr constant [8 x i8] c"phy%d%n\00", align 1
@.str.1 = private unnamed_addr constant [49 x i8] c"\013cfg80211: failed to rename debugfs dir to %s!\0A\00", align 1
@.str.2 = private unnamed_addr constant [7 x i8] c"wlan%d\00", align 1
@.str.3 = private unnamed_addr constant [20 x i8] c"net/wireless/core.c\00", align 1
@wiphy_new.wiphy_counter = internal global i32 0, align 4
@.str.4 = private unnamed_addr constant [6 x i8] c"phy%d\00", align 1
@wiphy_new.__key = internal global %struct.lock_class_key zeroinitializer, align 1
@.str.5 = private unnamed_addr constant [11 x i8] c"&rdev->mtx\00", align 1
@wiphy_new.__key.6 = internal global %struct.lock_class_key zeroinitializer, align 1
@.str.7 = private unnamed_addr constant [19 x i8] c"&rdev->devlist_mtx\00", align 1
@wiphy_new.__key.8 = internal global %struct.lock_class_key zeroinitializer, align 1
@.str.9 = private unnamed_addr constant [22 x i8] c"&rdev->sched_scan_mtx\00", align 1
@ieee80211_class = external global %struct.class, align 8
@init_net = external global %struct.net, align 64
@wiphy_new.__key.10 = internal global %struct.lock_class_key zeroinitializer, align 1
@.str.11 = private unnamed_addr constant [16 x i8] c"&rdev->dev_wait\00", align 1
@__kstrtab_wiphy_new = internal constant [10 x i8] c"wiphy_new\00", section "__ksymtab_strings", align 1
@__ksymtab_wiphy_new = internal constant %struct.kernel_symbol { i64 ptrtoint (%struct.wiphy* (%struct.cfg80211_ops*, i32)* @wiphy_new to i64), i8* getelementptr inbounds ([10 x i8], [10 x i8]* @__kstrtab_wiphy_new, i32 0, i32 0) }, section "___ksymtab+wiphy_new", align 8
@cfg80211_rdev_list_generation = common global i32 0, align 4
@ieee80211_debugfs_dir = internal global %struct.dentry* null, align 8
@__kstrtab_wiphy_register = internal constant [15 x i8] c"wiphy_register\00", section "__ksymtab_strings", align 1
@__ksymtab_wiphy_register = internal constant %struct.kernel_symbol { i64 ptrtoint (i32 (%struct.wiphy*)* @wiphy_register to i64), i8* getelementptr inbounds ([15 x i8], [15 x i8]* @__kstrtab_wiphy_register, i32 0, i32 0) }, section "___ksymtab+wiphy_register", align 8
@__kstrtab_wiphy_rfkill_start_polling = internal constant [27 x i8] c"wiphy_rfkill_start_polling\00", section "__ksymtab_strings", align 1
@__ksymtab_wiphy_rfkill_start_polling = internal constant %struct.kernel_symbol { i64 ptrtoint (void (%struct.wiphy*)* @wiphy_rfkill_start_polling to i64), i8* getelementptr inbounds ([27 x i8], [27 x i8]* @__kstrtab_wiphy_rfkill_start_polling, i32 0, i32 0) }, section "___ksymtab+wiphy_rfkill_start_polling", align 8
@__kstrtab_wiphy_rfkill_stop_polling = internal constant [26 x i8] c"wiphy_rfkill_stop_polling\00", section "__ksymtab_strings", align 1
@__ksymtab_wiphy_rfkill_stop_polling = internal constant %struct.kernel_symbol { i64 ptrtoint (void (%struct.wiphy*)* @wiphy_rfkill_stop_polling to i64), i8* getelementptr inbounds ([26 x i8], [26 x i8]* @__kstrtab_wiphy_rfkill_stop_polling, i32 0, i32 0) }, section "___ksymtab+wiphy_rfkill_stop_polling", align 8
@__kstrtab_wiphy_unregister = internal constant [17 x i8] c"wiphy_unregister\00", section "__ksymtab_strings", align 1
@__ksymtab_wiphy_unregister = internal constant %struct.kernel_symbol { i64 ptrtoint (void (%struct.wiphy*)* @wiphy_unregister to i64), i8* getelementptr inbounds ([17 x i8], [17 x i8]* @__kstrtab_wiphy_unregister, i32 0, i32 0) }, section "___ksymtab+wiphy_unregister", align 8
@__kstrtab_wiphy_free = internal constant [11 x i8] c"wiphy_free\00", section "__ksymtab_strings", align 1
@__ksymtab_wiphy_free = internal constant %struct.kernel_symbol { i64 ptrtoint (void (%struct.wiphy*)* @wiphy_free to i64), i8* getelementptr inbounds ([11 x i8], [11 x i8]* @__kstrtab_wiphy_free, i32 0, i32 0) }, section "___ksymtab+wiphy_free", align 8
@__kstrtab_wiphy_rfkill_set_hw_state = internal constant [26 x i8] c"wiphy_rfkill_set_hw_state\00", section "__ksymtab_strings", align 1
@__ksymtab_wiphy_rfkill_set_hw_state = internal constant %struct.kernel_symbol { i64 ptrtoint (void (%struct.wiphy*, i1)* @wiphy_rfkill_set_hw_state to i64), i8* getelementptr inbounds ([26 x i8], [26 x i8]* @__kstrtab_wiphy_rfkill_set_hw_state, i32 0, i32 0) }, section "___ksymtab+wiphy_rfkill_set_hw_state", align 8
@.str.12 = private unnamed_addr constant [37 x i8] c"\013RTNL: assertion failed at %s (%d)\0A\00", align 1
@cfg80211_unregister_wdev.__warned = internal global i8 0, section ".data.unlikely", align 1
@__kstrtab_cfg80211_unregister_wdev = internal constant [25 x i8] c"cfg80211_unregister_wdev\00", section "__ksymtab_strings", align 1
@__ksymtab_cfg80211_unregister_wdev = internal constant %struct.kernel_symbol { i64 ptrtoint (void (%struct.wireless_dev*)* @cfg80211_unregister_wdev to i64), i8* getelementptr inbounds ([25 x i8], [25 x i8]* @__kstrtab_cfg80211_unregister_wdev, i32 0, i32 0) }, section "___ksymtab+cfg80211_unregister_wdev", align 8
@__initcall_cfg80211_init4 = internal global i32 ()* @cfg80211_init, section ".initcall4.init", align 8
@cfg80211_netdev_notifier = internal global %struct.notifier_block { i32 (%struct.notifier_block*, i64, i8*)* @cfg80211_netdev_notifier_call, %struct.notifier_block* null, i32 0 }, align 8
@cfg80211_pernet_ops = internal global %struct.pernet_operations { %struct.list_head zeroinitializer, i32 (%struct.net*)* null, void (%struct.net*)* @cfg80211_pernet_exit, void (%struct.list_head*)* null, i32* null, i64 0 }, align 8
@cfg80211_wq = common global %struct.workqueue_struct* null, align 8
@__exitcall_cfg80211_exit = internal global void ()* @cfg80211_exit, section ".exitcall.exit", align 8
@smp_ops = external global %struct.smp_ops, align 8
@.str.13 = private unnamed_addr constant [20 x i8] c"net/wireless/core.h\00", align 1
@__tracepoint_rdev_stop_p2p_device = external global %struct.tracepoint, align 8
@__tracepoint_rdev_return_void = external global %struct.tracepoint, align 8
@__tracepoint_rdev_rfkill_poll = external global %struct.tracepoint, align 8
@current_task = external global %struct.task_struct*, align 8
@__tracepoint_rdev_set_wakeup = external global %struct.tracepoint, align 8
@system_wq = external global %struct.workqueue_struct*, align 8
@.str.14 = private unnamed_addr constant [10 x i8] c"ieee80211\00", align 1
@.str.15 = private unnamed_addr constant [9 x i8] c"cfg80211\00", align 1
@wiphy_type = internal global %struct.device_type { i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.19, i32 0, i32 0), %struct.attribute_group** null, i32 (%struct.device*, %struct.kobj_uevent_env*)* null, i8* (%struct.device*, i16*, i32*, i32*)* null, void (%struct.device*)* null, %struct.dev_pm_ops* null }, align 8
@cfg80211_netdev_notifier_call.__key = internal global %struct.lock_class_key zeroinitializer, align 1
@.str.16 = private unnamed_addr constant [11 x i8] c"&wdev->mtx\00", align 1
@.str.17 = private unnamed_addr constant [9 x i8] c"phy80211\00", align 1
@.str.18 = private unnamed_addr constant [55 x i8] c"\013cfg80211: failed to add phy80211 symlink to netdev!\0A\00", align 1
@cfg80211_ethtool_ops = external constant %struct.ethtool_ops, align 8
@.str.19 = private unnamed_addr constant [5 x i8] c"wlan\00", align 1
@__tracepoint_rdev_set_power_mgmt = external global %struct.tracepoint, align 8
@__tracepoint_rdev_return_int = external global %struct.tracepoint, align 8
@llvm.used = appending global [12 x i8*] [i8* bitcast (%struct.kernel_param* @__param_cfg80211_disable_40mhz_24ghz to i8*), i8* bitcast (%struct.kernel_symbol* @__ksymtab_wiphy_new to i8*), i8* bitcast (%struct.kernel_symbol* @__ksymtab_wiphy_register to i8*), i8* bitcast (%struct.kernel_symbol* @__ksymtab_wiphy_rfkill_start_polling to i8*), i8* bitcast (%struct.kernel_symbol* @__ksymtab_wiphy_rfkill_stop_polling to i8*), i8* bitcast (%struct.kernel_symbol* @__ksymtab_wiphy_unregister to i8*), i8* bitcast (%struct.kernel_symbol* @__ksymtab_wiphy_free to i8*), i8* bitcast (%struct.kernel_symbol* @__ksymtab_wiphy_rfkill_set_hw_state to i8*), i8* bitcast (%struct.kernel_symbol* @__ksymtab_cfg80211_unregister_wdev to i8*), i8* bitcast (i32 ()** @__initcall_cfg80211_init4 to i8*), i8* bitcast (void ()* @cfg80211_exit to i8*), i8* bitcast (void ()** @__exitcall_cfg80211_exit to i8*)], section "llvm.metadata"

; Function Attrs: inlinehint nounwind uwtable
define internal void @smp_send_stop() #0 {
entry:
  %0 = load void (i32)*, void (i32)** getelementptr inbounds (%struct.smp_ops, %struct.smp_ops* @smp_ops, i32 0, i32 3), align 8, !tbaa !2
  call void %0(i32 0)
  ret void
}

; Function Attrs: inlinehint nounwind uwtable
define internal void @smp_send_reschedule(i32 %cpu) #0 {
entry:
  %0 = load void (i32)*, void (i32)** getelementptr inbounds (%struct.smp_ops, %struct.smp_ops* @smp_ops, i32 0, i32 4), align 8, !tbaa !7
  call void %0(i32 %cpu)
  ret void
}

; Function Attrs: inlinehint nounwind uwtable
define internal void @smp_prepare_cpus(i32 %max_cpus) #0 {
entry:
  %0 = load void (i32)*, void (i32)** getelementptr inbounds (%struct.smp_ops, %struct.smp_ops* @smp_ops, i32 0, i32 1), align 8, !tbaa !8
  call void %0(i32 %max_cpus)
  ret void
}

; Function Attrs: inlinehint nounwind uwtable
define internal i32 @__cpu_up(i32 %cpu, %struct.task_struct* %tidle) #0 {
entry:
  %0 = load i32 (i32, %struct.task_struct*)*, i32 (i32, %struct.task_struct*)** getelementptr inbounds (%struct.smp_ops, %struct.smp_ops* @smp_ops, i32 0, i32 5), align 8, !tbaa !9
  %call = call i32 %0(i32 %cpu, %struct.task_struct* %tidle)
  ret i32 %call
}

; Function Attrs: inlinehint nounwind uwtable
define internal void @smp_cpus_done(i32 %max_cpus) #0 {
entry:
  %0 = load void (i32)*, void (i32)** getelementptr inbounds (%struct.smp_ops, %struct.smp_ops* @smp_ops, i32 0, i32 2), align 8, !tbaa !10
  call void %0(i32 %max_cpus)
  ret void
}

; Function Attrs: inlinehint nounwind uwtable
define internal void @smp_prepare_boot_cpu() #0 {
entry:
  %0 = load void ()*, void ()** getelementptr inbounds (%struct.smp_ops, %struct.smp_ops* @smp_ops, i32 0, i32 0), align 8, !tbaa !11
  call void %0()
  ret void
}

; Function Attrs: nounwind uwtable
define %struct.cfg80211_registered_device* @cfg80211_rdev_by_wiphy_idx(i32 %wiphy_idx) #1 {
entry:
  call void @assert_cfg80211_lock()
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %next.sink = phi %struct.list_head** [ %next, %for.inc ], [ getelementptr inbounds (%struct.list_head, %struct.list_head* @cfg80211_rdev_list, i32 0, i32 0), %entry ]
  %0 = load %struct.list_head*, %struct.list_head** %next.sink, align 8, !tbaa !12
  %1 = bitcast %struct.list_head* %0 to i8*
  %add.ptr6 = getelementptr inbounds i8, i8* %1, i64 -8
  %2 = bitcast i8* %add.ptr6 to %struct.cfg80211_registered_device*
  %list = getelementptr inbounds %struct.cfg80211_registered_device, %struct.cfg80211_registered_device* %2, i32 0, i32 1
  %cmp = icmp ne %struct.list_head* %list, @cfg80211_rdev_list
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %wiphy_idx1 = getelementptr inbounds %struct.cfg80211_registered_device, %struct.cfg80211_registered_device* %2, i32 0, i32 8
  %3 = load i32, i32* %wiphy_idx1, align 8, !tbaa !13
  %cmp2 = icmp eq i32 %3, %wiphy_idx
  br i1 %cmp2, label %for.end, label %for.inc

for.inc:                                          ; preds = %for.body
  %list4 = getelementptr inbounds %struct.cfg80211_registered_device, %struct.cfg80211_registered_device* %2, i32 0, i32 1
  %next = getelementptr inbounds %struct.list_head, %struct.list_head* %list4, i32 0, i32 0
  br label %for.cond

for.end:                                          ; preds = %for.cond, %for.body
  %result.0 = phi %struct.cfg80211_registered_device* [ %2, %for.body ], [ null, %for.cond ]
  ret %struct.cfg80211_registered_device* %result.0
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64, i8* nocapture) #2

; Function Attrs: inlinehint nounwind uwtable
define internal void @assert_cfg80211_lock() #0 {
entry:
  ret void
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64, i8* nocapture) #2

; Function Attrs: nounwind uwtable
define i32 @get_wiphy_idx(%struct.wiphy* %wiphy) #1 {
entry:
  %call = call %struct.cfg80211_registered_device* @wiphy_to_dev(%struct.wiphy* %wiphy)
  %wiphy_idx = getelementptr inbounds %struct.cfg80211_registered_device, %struct.cfg80211_registered_device* %call, i32 0, i32 8
  %0 = load i32, i32* %wiphy_idx, align 8, !tbaa !13
  ret i32 %0
}

; Function Attrs: inlinehint nounwind uwtable
define internal %struct.cfg80211_registered_device* @wiphy_to_dev(%struct.wiphy* %wiphy) #0 {
entry:
  %tobool = icmp ne %struct.wiphy* %wiphy, null
  %lnot = xor i1 %tobool, true
  %lnot1 = xor i1 %lnot, true
  %lnot2 = xor i1 %lnot1, true
  %lnot.ext = zext i1 %lnot2 to i32
  %conv = sext i32 %lnot.ext to i64
  %expval = call i64 @llvm.expect.i64(i64 %conv, i64 0)
  %tobool3 = icmp ne i64 %expval, 0
  br i1 %tobool3, label %do.body4, label %do.end9

do.body4:                                         ; preds = %entry
  call void asm sideeffect "1:\09ud2\0A.pushsection __bug_table,\22a\22\0A2:\09.long 1b - 2b, ${0:c} - 2b\0A\09.word ${1:c}, 0\0A\09.org 2b+${2:c}\0A.popsection", "i,i,i,~{dirflag},~{fpsr},~{flags}"(i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.13, i32 0, i32 0), i32 102, i64 12) #6, !srcloc !42
  br label %do.body5

do.body5:                                         ; preds = %do.body5, %do.body4
  br label %do.body5

do.end9:                                          ; preds = %entry
  %0 = bitcast %struct.wiphy* %wiphy to i8*
  %add.ptr = getelementptr inbounds i8, i8* %0, i64 -640
  %1 = bitcast i8* %add.ptr to %struct.cfg80211_registered_device*
  ret %struct.cfg80211_registered_device* %1
}

; Function Attrs: nounwind uwtable
define %struct.wiphy* @wiphy_idx_to_wiphy(i32 %wiphy_idx) #1 {
entry:
  call void @assert_cfg80211_lock()
  %call = call %struct.cfg80211_registered_device* @cfg80211_rdev_by_wiphy_idx(i32 %wiphy_idx)
  %tobool = icmp ne %struct.cfg80211_registered_device* %call, null
  %wiphy = getelementptr inbounds %struct.cfg80211_registered_device, %struct.cfg80211_registered_device* %call, i32 0, i32 34
  %retval.0 = select i1 %tobool, %struct.wiphy* %wiphy, %struct.wiphy* null
  ret %struct.wiphy* %retval.0
}

; Function Attrs: nounwind uwtable
define %struct.cfg80211_registered_device* @cfg80211_get_dev_from_ifindex(%struct.net* %net, i32 %ifindex) #1 {
entry:
  %call = call i8* @ERR_PTR(i64 -19)
  %0 = bitcast i8* %call to %struct.cfg80211_registered_device*
  call void @mutex_lock(%struct.mutex* @cfg80211_mutex)
  %call1 = call %struct.net_device* @dev_get_by_index(%struct.net* %net, i32 %ifindex)
  %tobool = icmp ne %struct.net_device* %call1, null
  br i1 %tobool, label %if.end, label %out

if.end:                                           ; preds = %entry
  %ieee80211_ptr = getelementptr inbounds %struct.net_device, %struct.net_device* %call1, i32 0, i32 55
  %1 = load %struct.wireless_dev*, %struct.wireless_dev** %ieee80211_ptr, align 8, !tbaa !43
  %tobool2 = icmp ne %struct.wireless_dev* %1, null
  br i1 %tobool2, label %if.then3, label %if.else

if.then3:                                         ; preds = %if.end
  %ieee80211_ptr4 = getelementptr inbounds %struct.net_device, %struct.net_device* %call1, i32 0, i32 55
  %2 = load %struct.wireless_dev*, %struct.wireless_dev** %ieee80211_ptr4, align 8, !tbaa !43
  %wiphy = getelementptr inbounds %struct.wireless_dev, %struct.wireless_dev* %2, i32 0, i32 0
  %3 = load %struct.wiphy*, %struct.wiphy** %wiphy, align 8, !tbaa !50
  %call5 = call %struct.cfg80211_registered_device* @wiphy_to_dev(%struct.wiphy* %3)
  %mtx = getelementptr inbounds %struct.cfg80211_registered_device, %struct.cfg80211_registered_device* %call5, i32 0, i32 2
  call void @mutex_lock(%struct.mutex* %mtx)
  br label %if.end7

if.else:                                          ; preds = %if.end
  %call6 = call i8* @ERR_PTR(i64 -19)
  %4 = bitcast i8* %call6 to %struct.cfg80211_registered_device*
  br label %if.end7

if.end7:                                          ; preds = %if.else, %if.then3
  %rdev.0 = phi %struct.cfg80211_registered_device* [ %call5, %if.then3 ], [ %4, %if.else ]
  call void @dev_put(%struct.net_device* %call1)
  br label %out

out:                                              ; preds = %entry, %if.end7
  %rdev.1 = phi %struct.cfg80211_registered_device* [ %rdev.0, %if.end7 ], [ %0, %entry ]
  call void @mutex_unlock(%struct.mutex* @cfg80211_mutex)
  ret %struct.cfg80211_registered_device* %rdev.1
}

; Function Attrs: inlinehint nounwind uwtable
define internal i8* @ERR_PTR(i64 %error) #0 {
entry:
  %0 = inttoptr i64 %error to i8*
  ret i8* %0
}

declare void @mutex_lock(%struct.mutex*) #3

declare %struct.net_device* @dev_get_by_index(%struct.net*, i32) #3

; Function Attrs: inlinehint nounwind uwtable
define internal void @dev_put(%struct.net_device* %dev) #0 {
entry:
  %pcpu_refcnt = getelementptr inbounds %struct.net_device, %struct.net_device* %dev, i32 0, i32 77
  %0 = load i32*, i32** %pcpu_refcnt, align 8, !tbaa !53
  call void asm "decl %gs:${0:P}", "=*m,*m,~{dirflag},~{fpsr},~{flags}"(i32* %0, i32* %0) #6, !srcloc !54
  ret void
}

declare void @mutex_unlock(%struct.mutex*) #3

; Function Attrs: nounwind uwtable
define i32 @cfg80211_dev_rename(%struct.cfg80211_registered_device* %rdev, i8* %newname) #1 {
entry:
  %wiphy_idx = alloca i32, align 4
  %taken = alloca i32, align 4
  %0 = bitcast i32* %wiphy_idx to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* %0) #6
  %1 = bitcast i32* %taken to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* %1) #6
  store i32 -1, i32* %taken, align 4, !tbaa !55
  call void @assert_cfg80211_lock()
  %call = call i32 (i8*, i8*, ...) @sscanf(i8* %newname, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str, i32 0, i32 0), i32* %wiphy_idx, i32* %taken)
  %2 = load i32, i32* %taken, align 4, !tbaa !55
  %conv = sext i32 %2 to i64
  %call1 = call i64 @strlen(i8* %newname)
  %cmp = icmp eq i64 %conv, %call1
  br i1 %cmp, label %land.lhs.true, label %if.end11

land.lhs.true:                                    ; preds = %entry
  %3 = load i32, i32* %wiphy_idx, align 4, !tbaa !55
  %wiphy_idx3 = getelementptr inbounds %struct.cfg80211_registered_device, %struct.cfg80211_registered_device* %rdev, i32 0, i32 8
  %4 = load i32, i32* %wiphy_idx3, align 8, !tbaa !13
  %cmp4 = icmp ne i32 %3, %4
  br i1 %cmp4, label %if.then, label %if.end11

if.then:                                          ; preds = %land.lhs.true
  br label %while.cond

while.cond:                                       ; preds = %while.body, %if.then
  %digits.0 = phi i32 [ 1, %if.then ], [ %inc, %while.body ]
  %5 = load i32, i32* %wiphy_idx, align 4, !tbaa !55
  %div = sdiv i32 %5, 10
  store i32 %div, i32* %wiphy_idx, align 4, !tbaa !55
  %tobool = icmp ne i32 %div, 0
  br i1 %tobool, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %inc = add nsw i32 %digits.0, 1
  br label %while.cond

while.end:                                        ; preds = %while.cond
  %6 = load i32, i32* %taken, align 4, !tbaa !55
  %conv6 = sext i32 %6 to i64
  %conv7 = sext i32 %digits.0 to i64
  %add = add i64 3, %conv7
  %cmp8 = icmp eq i64 %conv6, %add
  br i1 %cmp8, label %cleanup, label %if.end11

if.end11:                                         ; preds = %while.end, %land.lhs.true, %entry
  %wiphy = getelementptr inbounds %struct.cfg80211_registered_device, %struct.cfg80211_registered_device* %rdev, i32 0, i32 34
  %dev = getelementptr inbounds %struct.wiphy, %struct.wiphy* %wiphy, i32 0, i32 42
  %call12 = call i8* @dev_name(%struct.device* %dev)
  %call13 = call i32 @strcmp(i8* %newname, i8* %call12)
  %cmp14 = icmp eq i32 %call13, 0
  br i1 %cmp14, label %cleanup, label %if.end17

if.end17:                                         ; preds = %if.end11
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %if.end17
  %next.sink = phi %struct.list_head** [ %next, %for.inc ], [ getelementptr inbounds (%struct.list_head, %struct.list_head* @cfg80211_rdev_list, i32 0, i32 0), %if.end17 ]
  %7 = load %struct.list_head*, %struct.list_head** %next.sink, align 8, !tbaa !12
  %8 = bitcast %struct.list_head* %7 to i8*
  %add.ptr31 = getelementptr inbounds i8, i8* %8, i64 -8
  %9 = bitcast i8* %add.ptr31 to %struct.cfg80211_registered_device*
  %list = getelementptr inbounds %struct.cfg80211_registered_device, %struct.cfg80211_registered_device* %9, i32 0, i32 1
  %cmp18 = icmp ne %struct.list_head* %list, @cfg80211_rdev_list
  br i1 %cmp18, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %wiphy20 = getelementptr inbounds %struct.cfg80211_registered_device, %struct.cfg80211_registered_device* %9, i32 0, i32 34
  %dev21 = getelementptr inbounds %struct.wiphy, %struct.wiphy* %wiphy20, i32 0, i32 42
  %call22 = call i8* @dev_name(%struct.device* %dev21)
  %call23 = call i32 @strcmp(i8* %newname, i8* %call22)
  %cmp24 = icmp eq i32 %call23, 0
  br i1 %cmp24, label %cleanup, label %for.inc

for.inc:                                          ; preds = %for.body
  %list29 = getelementptr inbounds %struct.cfg80211_registered_device, %struct.cfg80211_registered_device* %9, i32 0, i32 1
  %next = getelementptr inbounds %struct.list_head, %struct.list_head* %list29, i32 0, i32 0
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %wiphy32 = getelementptr inbounds %struct.cfg80211_registered_device, %struct.cfg80211_registered_device* %rdev, i32 0, i32 34
  %dev33 = getelementptr inbounds %struct.wiphy, %struct.wiphy* %wiphy32, i32 0, i32 42
  %call34 = call i32 @device_rename(%struct.device* %dev33, i8* %newname)
  %tobool35 = icmp ne i32 %call34, 0
  br i1 %tobool35, label %cleanup, label %if.end37

if.end37:                                         ; preds = %for.end
  %wiphy38 = getelementptr inbounds %struct.cfg80211_registered_device, %struct.cfg80211_registered_device* %rdev, i32 0, i32 34
  %debugfsdir = getelementptr inbounds %struct.wiphy, %struct.wiphy* %wiphy38, i32 0, i32 44
  %10 = load %struct.dentry*, %struct.dentry** %debugfsdir, align 16, !tbaa !56
  %tobool39 = icmp ne %struct.dentry* %10, null
  br i1 %tobool39, label %land.lhs.true40, label %if.end52

land.lhs.true40:                                  ; preds = %if.end37
  %wiphy41 = getelementptr inbounds %struct.cfg80211_registered_device, %struct.cfg80211_registered_device* %rdev, i32 0, i32 34
  %debugfsdir42 = getelementptr inbounds %struct.wiphy, %struct.wiphy* %wiphy41, i32 0, i32 44
  %11 = load %struct.dentry*, %struct.dentry** %debugfsdir42, align 16, !tbaa !56
  %d_parent = getelementptr inbounds %struct.dentry, %struct.dentry* %11, i32 0, i32 3
  %12 = load %struct.dentry*, %struct.dentry** %d_parent, align 8, !tbaa !57
  %wiphy43 = getelementptr inbounds %struct.cfg80211_registered_device, %struct.cfg80211_registered_device* %rdev, i32 0, i32 34
  %debugfsdir44 = getelementptr inbounds %struct.wiphy, %struct.wiphy* %wiphy43, i32 0, i32 44
  %13 = load %struct.dentry*, %struct.dentry** %debugfsdir44, align 16, !tbaa !56
  %wiphy45 = getelementptr inbounds %struct.cfg80211_registered_device, %struct.cfg80211_registered_device* %rdev, i32 0, i32 34
  %debugfsdir46 = getelementptr inbounds %struct.wiphy, %struct.wiphy* %wiphy45, i32 0, i32 44
  %14 = load %struct.dentry*, %struct.dentry** %debugfsdir46, align 16, !tbaa !56
  %d_parent47 = getelementptr inbounds %struct.dentry, %struct.dentry* %14, i32 0, i32 3
  %15 = load %struct.dentry*, %struct.dentry** %d_parent47, align 8, !tbaa !57
  %call48 = call %struct.dentry* @debugfs_rename(%struct.dentry* %12, %struct.dentry* %13, %struct.dentry* %15, i8* %newname)
  %tobool49 = icmp ne %struct.dentry* %call48, null
  br i1 %tobool49, label %if.end52, label %if.then50

if.then50:                                        ; preds = %land.lhs.true40
  %call51 = call i32 (i8*, ...) @printk(i8* getelementptr inbounds ([49 x i8], [49 x i8]* @.str.1, i32 0, i32 0), i8* %newname)
  br label %if.end52

if.end52:                                         ; preds = %if.then50, %land.lhs.true40, %if.end37
  call void @nl80211_notify_dev_rename(%struct.cfg80211_registered_device* %rdev)
  br label %cleanup

cleanup:                                          ; preds = %for.end, %for.body, %if.end11, %while.end, %if.end52
  %retval.0 = phi i32 [ 0, %if.end52 ], [ -22, %while.end ], [ 0, %if.end11 ], [ -22, %for.body ], [ %call34, %for.end ]
  %16 = bitcast i32* %taken to i8*
  call void @llvm.lifetime.end.p0i8(i64 4, i8* %16) #6
  %17 = bitcast i32* %wiphy_idx to i8*
  call void @llvm.lifetime.end.p0i8(i64 4, i8* %17) #6
  ret i32 %retval.0
}

declare i32 @sscanf(i8*, i8*, ...) #3

declare i64 @strlen(i8*) #3

declare i32 @strcmp(i8*, i8*) #3

; Function Attrs: inlinehint nounwind uwtable
define internal i8* @dev_name(%struct.device* %dev) #0 {
entry:
  %init_name = getelementptr inbounds %struct.device, %struct.device* %dev, i32 0, i32 3
  %0 = load i8*, i8** %init_name, align 8, !tbaa !62
  %tobool = icmp ne i8* %0, null
  br i1 %tobool, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %init_name1 = getelementptr inbounds %struct.device, %struct.device* %dev, i32 0, i32 3
  %1 = load i8*, i8** %init_name1, align 8, !tbaa !62
  br label %return

if.end:                                           ; preds = %entry
  %kobj = getelementptr inbounds %struct.device, %struct.device* %dev, i32 0, i32 2
  %call = call i8* @kobject_name(%struct.kobject* %kobj)
  br label %return

return:                                           ; preds = %if.end, %if.then
  %retval.0 = phi i8* [ %1, %if.then ], [ %call, %if.end ]
  ret i8* %retval.0
}

declare i32 @device_rename(%struct.device*, i8*) #3

declare %struct.dentry* @debugfs_rename(%struct.dentry*, %struct.dentry*, %struct.dentry*, i8*) #3

declare i32 @printk(i8*, ...) #3

declare void @nl80211_notify_dev_rename(%struct.cfg80211_registered_device*) #3

; Function Attrs: nounwind uwtable
define i32 @cfg80211_switch_netns(%struct.cfg80211_registered_device* %rdev, %struct.net* %net) #1 {
entry:
  %wiphy = getelementptr inbounds %struct.cfg80211_registered_device, %struct.cfg80211_registered_device* %rdev, i32 0, i32 34
  %flags = getelementptr inbounds %struct.wiphy, %struct.wiphy* %wiphy, i32 0, i32 10
  %0 = load i32, i32* %flags, align 4, !tbaa !63
  %and = and i32 %0, 8
  %tobool = icmp ne i32 %and, 0
  br i1 %tobool, label %if.end, label %cleanup

if.end:                                           ; preds = %entry
  %wdev_list = getelementptr inbounds %struct.cfg80211_registered_device, %struct.cfg80211_registered_device* %rdev, i32 0, i32 10
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %if.end
  %list14.sink = phi %struct.list_head* [ %list14, %for.inc ], [ %wdev_list, %if.end ]
  %err.0 = phi i32 [ 0, %if.end ], [ %err.1, %for.inc ]
  %next15 = getelementptr inbounds %struct.list_head, %struct.list_head* %list14.sink, i32 0, i32 0
  %1 = load %struct.list_head*, %struct.list_head** %next15, align 8, !tbaa !12
  %2 = bitcast %struct.list_head* %1 to i8*
  %add.ptr17 = getelementptr inbounds i8, i8* %2, i64 -16
  %3 = bitcast i8* %add.ptr17 to %struct.wireless_dev*
  %list = getelementptr inbounds %struct.wireless_dev, %struct.wireless_dev* %3, i32 0, i32 2
  %wdev_list1 = getelementptr inbounds %struct.cfg80211_registered_device, %struct.cfg80211_registered_device* %rdev, i32 0, i32 10
  %cmp = icmp ne %struct.list_head* %list, %wdev_list1
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %netdev = getelementptr inbounds %struct.wireless_dev, %struct.wireless_dev* %3, i32 0, i32 3
  %4 = load %struct.net_device*, %struct.net_device** %netdev, align 8, !tbaa !64
  %tobool2 = icmp ne %struct.net_device* %4, null
  br i1 %tobool2, label %if.end4, label %for.inc

if.end4:                                          ; preds = %for.body
  %netdev5 = getelementptr inbounds %struct.wireless_dev, %struct.wireless_dev* %3, i32 0, i32 3
  %5 = load %struct.net_device*, %struct.net_device** %netdev5, align 8, !tbaa !64
  %features = getelementptr inbounds %struct.net_device, %struct.net_device* %5, i32 0, i32 12
  %6 = load i64, i64* %features, align 16, !tbaa !65
  %and6 = and i64 %6, -8193
  store i64 %and6, i64* %features, align 16, !tbaa !65
  %netdev7 = getelementptr inbounds %struct.wireless_dev, %struct.wireless_dev* %3, i32 0, i32 3
  %7 = load %struct.net_device*, %struct.net_device** %netdev7, align 8, !tbaa !64
  %call = call i32 @dev_change_net_namespace(%struct.net_device* %7, %struct.net* %net, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.2, i32 0, i32 0))
  %tobool8 = icmp ne i32 %call, 0
  br i1 %tobool8, label %for.end, label %if.end10

if.end10:                                         ; preds = %if.end4
  %netdev11 = getelementptr inbounds %struct.wireless_dev, %struct.wireless_dev* %3, i32 0, i32 3
  %8 = load %struct.net_device*, %struct.net_device** %netdev11, align 8, !tbaa !64
  %features12 = getelementptr inbounds %struct.net_device, %struct.net_device* %8, i32 0, i32 12
  %9 = load i64, i64* %features12, align 16, !tbaa !65
  %or = or i64 %9, 8192
  store i64 %or, i64* %features12, align 16, !tbaa !65
  br label %for.inc

for.inc:                                          ; preds = %for.body, %if.end10
  %err.1 = phi i32 [ %call, %if.end10 ], [ %err.0, %for.body ]
  %list14 = getelementptr inbounds %struct.wireless_dev, %struct.wireless_dev* %3, i32 0, i32 2
  br label %for.cond

for.end:                                          ; preds = %for.cond, %if.end4
  %err.2 = phi i32 [ %call, %if.end4 ], [ %err.0, %for.cond ]
  %tobool18 = icmp ne i32 %err.2, 0
  %wiphy20 = getelementptr inbounds %struct.cfg80211_registered_device, %struct.cfg80211_registered_device* %rdev, i32 0, i32 34
  br i1 %tobool18, label %if.then19, label %if.end68

if.then19:                                        ; preds = %for.end
  %call21 = call %struct.net* @wiphy_net(%struct.wiphy* %wiphy20)
  br label %for.cond26

for.cond26:                                       ; preds = %for.inc61, %if.then19
  %.sink = phi %struct.wireless_dev* [ %12, %for.inc61 ], [ %3, %if.then19 ]
  %err.3 = phi i32 [ %err.2, %if.then19 ], [ %err.4, %for.inc61 ]
  %list63 = getelementptr inbounds %struct.wireless_dev, %struct.wireless_dev* %.sink, i32 0, i32 2
  %prev64 = getelementptr inbounds %struct.list_head, %struct.list_head* %list63, i32 0, i32 1
  %10 = load %struct.list_head*, %struct.list_head** %prev64, align 8, !tbaa !66
  %11 = bitcast %struct.list_head* %10 to i8*
  %add.ptr66 = getelementptr inbounds i8, i8* %11, i64 -16
  %12 = bitcast i8* %add.ptr66 to %struct.wireless_dev*
  %list27 = getelementptr inbounds %struct.wireless_dev, %struct.wireless_dev* %12, i32 0, i32 2
  %wdev_list28 = getelementptr inbounds %struct.cfg80211_registered_device, %struct.cfg80211_registered_device* %rdev, i32 0, i32 10
  %cmp29 = icmp ne %struct.list_head* %list27, %wdev_list28
  br i1 %cmp29, label %for.body30, label %cleanup

for.body30:                                       ; preds = %for.cond26
  %netdev31 = getelementptr inbounds %struct.wireless_dev, %struct.wireless_dev* %12, i32 0, i32 3
  %13 = load %struct.net_device*, %struct.net_device** %netdev31, align 8, !tbaa !64
  %tobool32 = icmp ne %struct.net_device* %13, null
  br i1 %tobool32, label %if.end34, label %for.inc61

if.end34:                                         ; preds = %for.body30
  %netdev35 = getelementptr inbounds %struct.wireless_dev, %struct.wireless_dev* %12, i32 0, i32 3
  %14 = load %struct.net_device*, %struct.net_device** %netdev35, align 8, !tbaa !64
  %features36 = getelementptr inbounds %struct.net_device, %struct.net_device* %14, i32 0, i32 12
  %15 = load i64, i64* %features36, align 16, !tbaa !65
  %and37 = and i64 %15, -8193
  store i64 %and37, i64* %features36, align 16, !tbaa !65
  %netdev38 = getelementptr inbounds %struct.wireless_dev, %struct.wireless_dev* %12, i32 0, i32 3
  %16 = load %struct.net_device*, %struct.net_device** %netdev38, align 8, !tbaa !64
  %call39 = call i32 @dev_change_net_namespace(%struct.net_device* %16, %struct.net* %call21, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.2, i32 0, i32 0))
  %tobool40 = icmp ne i32 %call39, 0
  %lnot = xor i1 %tobool40, true
  %lnot41 = xor i1 %lnot, true
  %lnot.ext = zext i1 %lnot41 to i32
  %tobool42 = icmp ne i32 %lnot.ext, 0
  %lnot43 = xor i1 %tobool42, true
  %lnot45 = xor i1 %lnot43, true
  %lnot.ext46 = zext i1 %lnot45 to i32
  %conv = sext i32 %lnot.ext46 to i64
  %expval = call i64 @llvm.expect.i64(i64 %conv, i64 0)
  %tobool47 = icmp ne i64 %expval, 0
  br i1 %tobool47, label %if.then48, label %if.end49

if.then48:                                        ; preds = %if.end34
  call void @warn_slowpath_null(i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.3, i32 0, i32 0), i32 193)
  br label %if.end49

if.end49:                                         ; preds = %if.then48, %if.end34
  %tobool51 = icmp ne i32 %lnot.ext, 0
  %lnot52 = xor i1 %tobool51, true
  %lnot54 = xor i1 %lnot52, true
  %lnot.ext55 = zext i1 %lnot54 to i32
  %conv56 = sext i32 %lnot.ext55 to i64
  %expval57 = call i64 @llvm.expect.i64(i64 %conv56, i64 0)
  %netdev58 = getelementptr inbounds %struct.wireless_dev, %struct.wireless_dev* %12, i32 0, i32 3
  %17 = load %struct.net_device*, %struct.net_device** %netdev58, align 8, !tbaa !64
  %features59 = getelementptr inbounds %struct.net_device, %struct.net_device* %17, i32 0, i32 12
  %18 = load i64, i64* %features59, align 16, !tbaa !65
  %or60 = or i64 %18, 8192
  store i64 %or60, i64* %features59, align 16, !tbaa !65
  br label %for.inc61

for.inc61:                                        ; preds = %for.body30, %if.end49
  %err.4 = phi i32 [ %call39, %if.end49 ], [ %err.3, %for.body30 ]
  br label %for.cond26

if.end68:                                         ; preds = %for.end
  call void @wiphy_net_set(%struct.wiphy* %wiphy20, %struct.net* %net)
  %wiphy70 = getelementptr inbounds %struct.cfg80211_registered_device, %struct.cfg80211_registered_device* %rdev, i32 0, i32 34
  %dev = getelementptr inbounds %struct.wiphy, %struct.wiphy* %wiphy70, i32 0, i32 42
  %wiphy71 = getelementptr inbounds %struct.cfg80211_registered_device, %struct.cfg80211_registered_device* %rdev, i32 0, i32 34
  %dev72 = getelementptr inbounds %struct.wiphy, %struct.wiphy* %wiphy71, i32 0, i32 42
  %call73 = call i8* @dev_name(%struct.device* %dev72)
  %call74 = call i32 @device_rename(%struct.device* %dev, i8* %call73)
  %tobool76 = icmp ne i32 %call74, 0
  %lnot77 = xor i1 %tobool76, true
  %lnot79 = xor i1 %lnot77, true
  %lnot.ext80 = zext i1 %lnot79 to i32
  %tobool81 = icmp ne i32 %lnot.ext80, 0
  %lnot82 = xor i1 %tobool81, true
  %lnot84 = xor i1 %lnot82, true
  %lnot.ext85 = zext i1 %lnot84 to i32
  %conv86 = sext i32 %lnot.ext85 to i64
  %expval87 = call i64 @llvm.expect.i64(i64 %conv86, i64 0)
  %tobool88 = icmp ne i64 %expval87, 0
  br i1 %tobool88, label %if.then89, label %if.end90

if.then89:                                        ; preds = %if.end68
  call void @warn_slowpath_null(i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.3, i32 0, i32 0), i32 203)
  br label %if.end90

if.end90:                                         ; preds = %if.then89, %if.end68
  %tobool92 = icmp ne i32 %lnot.ext80, 0
  %lnot93 = xor i1 %tobool92, true
  %lnot95 = xor i1 %lnot93, true
  %lnot.ext96 = zext i1 %lnot95 to i32
  %conv97 = sext i32 %lnot.ext96 to i64
  %expval98 = call i64 @llvm.expect.i64(i64 %conv97, i64 0)
  br label %cleanup

cleanup:                                          ; preds = %for.cond26, %entry, %if.end90
  %retval.0 = phi i32 [ 0, %if.end90 ], [ -95, %entry ], [ %err.3, %for.cond26 ]
  ret i32 %retval.0
}

declare i32 @dev_change_net_namespace(%struct.net_device*, %struct.net*, i8*) #3

; Function Attrs: inlinehint nounwind uwtable
define internal %struct.net* @wiphy_net(%struct.wiphy* %wiphy) #0 {
entry:
  %_net = getelementptr inbounds %struct.wiphy, %struct.wiphy* %wiphy, i32 0, i32 47
  %call = call %struct.net* @read_pnet(%struct.net** %_net)
  ret %struct.net* %call
}

; Function Attrs: nounwind readnone
declare i64 @llvm.expect.i64(i64, i64) #4

declare void @warn_slowpath_null(i8*, i32) #3

; Function Attrs: inlinehint nounwind uwtable
define internal void @wiphy_net_set(%struct.wiphy* %wiphy, %struct.net* %net) #0 {
entry:
  %_net = getelementptr inbounds %struct.wiphy, %struct.wiphy* %wiphy, i32 0, i32 47
  call void @write_pnet(%struct.net** %_net, %struct.net* %net)
  ret void
}

; Function Attrs: nounwind uwtable
define void @cfg80211_stop_p2p_device(%struct.cfg80211_registered_device* %rdev, %struct.wireless_dev* %wdev) #1 {
entry:
  %devlist_mtx = getelementptr inbounds %struct.cfg80211_registered_device, %struct.cfg80211_registered_device* %rdev, i32 0, i32 9
  %sched_scan_mtx = getelementptr inbounds %struct.cfg80211_registered_device, %struct.cfg80211_registered_device* %rdev, i32 0, i32 28
  %iftype = getelementptr inbounds %struct.wireless_dev, %struct.wireless_dev* %wdev, i32 0, i32 1
  %0 = load i32, i32* %iftype, align 8, !tbaa !67
  %cmp = icmp ne i32 %0, 10
  %lnot = xor i1 %cmp, true
  %lnot3 = xor i1 %lnot, true
  %lnot.ext = zext i1 %lnot3 to i32
  %tobool = icmp ne i32 %lnot.ext, 0
  %lnot4 = xor i1 %tobool, true
  %lnot6 = xor i1 %lnot4, true
  %lnot.ext7 = zext i1 %lnot6 to i32
  %conv = sext i32 %lnot.ext7 to i64
  %expval = call i64 @llvm.expect.i64(i64 %conv, i64 0)
  %tobool8 = icmp ne i64 %expval, 0
  br i1 %tobool8, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  call void @warn_slowpath_null(i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.3, i32 0, i32 0), i32 221)
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  %tobool9 = icmp ne i32 %lnot.ext, 0
  %lnot10 = xor i1 %tobool9, true
  %lnot12 = xor i1 %lnot10, true
  %lnot.ext13 = zext i1 %lnot12 to i32
  %conv14 = sext i32 %lnot.ext13 to i64
  %expval15 = call i64 @llvm.expect.i64(i64 %conv14, i64 0)
  %tobool16 = icmp ne i64 %expval15, 0
  br i1 %tobool16, label %if.end60, label %if.end18

if.end18:                                         ; preds = %if.end
  %p2p_started = getelementptr inbounds %struct.wireless_dev, %struct.wireless_dev* %wdev, i32 0, i32 10
  %1 = load i8, i8* %p2p_started, align 1, !tbaa !68, !range !69
  %tobool19 = trunc i8 %1 to i1
  br i1 %tobool19, label %if.end21, label %if.end60

if.end21:                                         ; preds = %if.end18
  call void @rdev_stop_p2p_device(%struct.cfg80211_registered_device* %rdev, %struct.wireless_dev* %wdev)
  %p2p_started22 = getelementptr inbounds %struct.wireless_dev, %struct.wireless_dev* %wdev, i32 0, i32 10
  store i8 0, i8* %p2p_started22, align 1, !tbaa !68
  %opencount = getelementptr inbounds %struct.cfg80211_registered_device, %struct.cfg80211_registered_device* %rdev, i32 0, i32 13
  %2 = load i32, i32* %opencount, align 16, !tbaa !70
  %dec = add nsw i32 %2, -1
  store i32 %dec, i32* %opencount, align 16, !tbaa !70
  %scan_req = getelementptr inbounds %struct.cfg80211_registered_device, %struct.cfg80211_registered_device* %rdev, i32 0, i32 23
  %3 = load %struct.cfg80211_scan_request*, %struct.cfg80211_scan_request** %scan_req, align 16, !tbaa !71
  %tobool23 = icmp ne %struct.cfg80211_scan_request* %3, null
  br i1 %tobool23, label %land.lhs.true, label %if.end60

land.lhs.true:                                    ; preds = %if.end21
  %scan_req24 = getelementptr inbounds %struct.cfg80211_registered_device, %struct.cfg80211_registered_device* %rdev, i32 0, i32 23
  %4 = load %struct.cfg80211_scan_request*, %struct.cfg80211_scan_request** %scan_req24, align 16, !tbaa !71
  %wdev25 = getelementptr inbounds %struct.cfg80211_scan_request, %struct.cfg80211_scan_request* %4, i32 0, i32 7
  %5 = load %struct.wireless_dev*, %struct.wireless_dev** %wdev25, align 8, !tbaa !72
  %cmp26 = icmp eq %struct.wireless_dev* %5, %wdev
  br i1 %cmp26, label %if.then28, label %if.end60

if.then28:                                        ; preds = %land.lhs.true
  %scan_done_wk = getelementptr inbounds %struct.cfg80211_registered_device, %struct.cfg80211_registered_device* %rdev, i32 0, i32 26
  %call = call i32 @work_busy(%struct.work_struct* %scan_done_wk)
  %tobool29 = icmp ne i32 %call, 0
  %frombool = zext i1 %tobool29 to i8
  %tobool31 = trunc i8 %frombool to i1
  %lnot32 = xor i1 %tobool31, true
  %lnot34 = xor i1 %lnot32, true
  %lnot36 = xor i1 %lnot34, true
  %lnot.ext37 = zext i1 %lnot36 to i32
  %tobool38 = icmp ne i32 %lnot.ext37, 0
  %lnot39 = xor i1 %tobool38, true
  %lnot41 = xor i1 %lnot39, true
  %lnot.ext42 = zext i1 %lnot41 to i32
  %conv43 = sext i32 %lnot.ext42 to i64
  %expval44 = call i64 @llvm.expect.i64(i64 %conv43, i64 0)
  %tobool45 = icmp ne i64 %expval44, 0
  br i1 %tobool45, label %if.then46, label %if.end47

if.then46:                                        ; preds = %if.then28
  call void @warn_slowpath_null(i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.3, i32 0, i32 0), i32 241)
  br label %if.end47

if.end47:                                         ; preds = %if.then46, %if.then28
  %tobool49 = icmp ne i32 %lnot.ext37, 0
  %lnot50 = xor i1 %tobool49, true
  %lnot52 = xor i1 %lnot50, true
  %lnot.ext53 = zext i1 %lnot52 to i32
  %conv54 = sext i32 %lnot.ext53 to i64
  %expval55 = call i64 @llvm.expect.i64(i64 %conv54, i64 0)
  %scan_req56 = getelementptr inbounds %struct.cfg80211_registered_device, %struct.cfg80211_registered_device* %rdev, i32 0, i32 23
  %6 = load %struct.cfg80211_scan_request*, %struct.cfg80211_scan_request** %scan_req56, align 16, !tbaa !71
  %aborted = getelementptr inbounds %struct.cfg80211_scan_request, %struct.cfg80211_scan_request* %6, i32 0, i32 10
  store i8 1, i8* %aborted, align 8, !tbaa !74
  %tobool57 = trunc i8 %frombool to i1
  %lnot58 = xor i1 %tobool57, true
  call void @___cfg80211_scan_done(%struct.cfg80211_registered_device* %rdev, i1 zeroext %lnot58)
  br label %if.end60

if.end60:                                         ; preds = %if.end18, %if.end, %if.end47, %land.lhs.true, %if.end21
  ret void
}

; Function Attrs: inlinehint nounwind uwtable
define internal void @rdev_stop_p2p_device(%struct.cfg80211_registered_device* %rdev, %struct.wireless_dev* %wdev) #0 {
entry:
  %wiphy = getelementptr inbounds %struct.cfg80211_registered_device, %struct.cfg80211_registered_device* %rdev, i32 0, i32 34
  call void @trace_rdev_stop_p2p_device(%struct.wiphy* %wiphy, %struct.wireless_dev* %wdev)
  %ops = getelementptr inbounds %struct.cfg80211_registered_device, %struct.cfg80211_registered_device* %rdev, i32 0, i32 0
  %0 = load %struct.cfg80211_ops*, %struct.cfg80211_ops** %ops, align 32, !tbaa !75
  %stop_p2p_device = getelementptr inbounds %struct.cfg80211_ops, %struct.cfg80211_ops* %0, i32 0, i32 76
  %1 = load void (%struct.wiphy*, %struct.wireless_dev*)*, void (%struct.wiphy*, %struct.wireless_dev*)** %stop_p2p_device, align 8, !tbaa !76
  %wiphy1 = getelementptr inbounds %struct.cfg80211_registered_device, %struct.cfg80211_registered_device* %rdev, i32 0, i32 34
  call void %1(%struct.wiphy* %wiphy1, %struct.wireless_dev* %wdev)
  %wiphy2 = getelementptr inbounds %struct.cfg80211_registered_device, %struct.cfg80211_registered_device* %rdev, i32 0, i32 34
  call void @trace_rdev_return_void(%struct.wiphy* %wiphy2)
  ret void
}

declare i32 @work_busy(%struct.work_struct*) #3

declare void @___cfg80211_scan_done(%struct.cfg80211_registered_device*, i1 zeroext) #3

; Function Attrs: nounwind uwtable
define %struct.wiphy* @wiphy_new(%struct.cfg80211_ops* %ops, i32 %sizeof_priv) #1 {
entry:
  %.compoundliteral = alloca %struct.raw_spinlock, align 2
  %.compoundliteral264 = alloca %struct.raw_spinlock, align 2
  %.compoundliteral274 = alloca %struct.atomic64_t, align 8
  %.compoundliteral289 = alloca %struct.atomic64_t, align 8
  %.compoundliteral308 = alloca %struct.atomic64_t, align 8
  %.compoundliteral358 = alloca %struct.atomic64_t, align 8
  %.compoundliteral375 = alloca %struct.atomic64_t, align 8
  %.compoundliteral392 = alloca %struct.atomic64_t, align 8
  %add_key = getelementptr inbounds %struct.cfg80211_ops, %struct.cfg80211_ops* %ops, i32 0, i32 6
  %0 = load i32 (%struct.wiphy*, %struct.net_device*, i8, i1, i8*, %struct.key_params*)*, i32 (%struct.wiphy*, %struct.net_device*, i8, i1, i8*, %struct.key_params*)** %add_key, align 8, !tbaa !78
  %tobool = icmp ne i32 (%struct.wiphy*, %struct.net_device*, i8, i1, i8*, %struct.key_params*)* %0, null
  br i1 %tobool, label %land.rhs, label %land.end

land.rhs:                                         ; preds = %entry
  %del_key = getelementptr inbounds %struct.cfg80211_ops, %struct.cfg80211_ops* %ops, i32 0, i32 8
  %1 = load i32 (%struct.wiphy*, %struct.net_device*, i8, i1, i8*)*, i32 (%struct.wiphy*, %struct.net_device*, i8, i1, i8*)** %del_key, align 8, !tbaa !79
  %tobool1 = icmp ne i32 (%struct.wiphy*, %struct.net_device*, i8, i1, i8*)* %1, null
  br i1 %tobool1, label %lor.rhs, label %land.end

lor.rhs:                                          ; preds = %land.rhs
  %set_default_key = getelementptr inbounds %struct.cfg80211_ops, %struct.cfg80211_ops* %ops, i32 0, i32 9
  %2 = load i32 (%struct.wiphy*, %struct.net_device*, i8, i1, i1)*, i32 (%struct.wiphy*, %struct.net_device*, i8, i1, i1)** %set_default_key, align 8, !tbaa !80
  %tobool2 = icmp ne i32 (%struct.wiphy*, %struct.net_device*, i8, i1, i1)* %2, null
  %lnot = xor i1 %tobool2, true
  br label %land.end

land.end:                                         ; preds = %land.rhs, %lor.rhs, %entry
  %3 = phi i1 [ false, %entry ], [ true, %land.rhs ], [ %lnot, %lor.rhs ]
  %lnot3 = xor i1 %3, true
  %lnot4 = xor i1 %lnot3, true
  %lnot.ext = zext i1 %lnot4 to i32
  %tobool5 = icmp ne i32 %lnot.ext, 0
  %lnot6 = xor i1 %tobool5, true
  %lnot8 = xor i1 %lnot6, true
  %lnot.ext9 = zext i1 %lnot8 to i32
  %conv = sext i32 %lnot.ext9 to i64
  %expval = call i64 @llvm.expect.i64(i64 %conv, i64 0)
  %tobool10 = icmp ne i64 %expval, 0
  br i1 %tobool10, label %if.then, label %if.end

if.then:                                          ; preds = %land.end
  call void @warn_slowpath_null(i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.3, i32 0, i32 0), i32 317)
  br label %if.end

if.end:                                           ; preds = %if.then, %land.end
  %tobool11 = icmp ne i32 %lnot.ext, 0
  %lnot12 = xor i1 %tobool11, true
  %lnot14 = xor i1 %lnot12, true
  %lnot.ext15 = zext i1 %lnot14 to i32
  %conv16 = sext i32 %lnot.ext15 to i64
  %expval17 = call i64 @llvm.expect.i64(i64 %conv16, i64 0)
  %auth = getelementptr inbounds %struct.cfg80211_ops, %struct.cfg80211_ops* %ops, i32 0, i32 33
  %4 = load i32 (%struct.wiphy*, %struct.net_device*, %struct.cfg80211_auth_request*)*, i32 (%struct.wiphy*, %struct.net_device*, %struct.cfg80211_auth_request*)** %auth, align 8, !tbaa !81
  %tobool19 = icmp ne i32 (%struct.wiphy*, %struct.net_device*, %struct.cfg80211_auth_request*)* %4, null
  br i1 %tobool19, label %land.rhs20, label %land.end28

land.rhs20:                                       ; preds = %if.end
  %assoc = getelementptr inbounds %struct.cfg80211_ops, %struct.cfg80211_ops* %ops, i32 0, i32 34
  %5 = load i32 (%struct.wiphy*, %struct.net_device*, %struct.cfg80211_assoc_request*)*, i32 (%struct.wiphy*, %struct.net_device*, %struct.cfg80211_assoc_request*)** %assoc, align 8, !tbaa !82
  %tobool21 = icmp ne i32 (%struct.wiphy*, %struct.net_device*, %struct.cfg80211_assoc_request*)* %5, null
  br i1 %tobool21, label %lor.lhs.false, label %land.end28

lor.lhs.false:                                    ; preds = %land.rhs20
  %deauth = getelementptr inbounds %struct.cfg80211_ops, %struct.cfg80211_ops* %ops, i32 0, i32 35
  %6 = load i32 (%struct.wiphy*, %struct.net_device*, %struct.cfg80211_deauth_request*)*, i32 (%struct.wiphy*, %struct.net_device*, %struct.cfg80211_deauth_request*)** %deauth, align 8, !tbaa !83
  %tobool22 = icmp ne i32 (%struct.wiphy*, %struct.net_device*, %struct.cfg80211_deauth_request*)* %6, null
  br i1 %tobool22, label %lor.rhs23, label %land.end28

lor.rhs23:                                        ; preds = %lor.lhs.false
  %disassoc = getelementptr inbounds %struct.cfg80211_ops, %struct.cfg80211_ops* %ops, i32 0, i32 36
  %7 = load i32 (%struct.wiphy*, %struct.net_device*, %struct.cfg80211_disassoc_request*)*, i32 (%struct.wiphy*, %struct.net_device*, %struct.cfg80211_disassoc_request*)** %disassoc, align 8, !tbaa !84
  %tobool24 = icmp ne i32 (%struct.wiphy*, %struct.net_device*, %struct.cfg80211_disassoc_request*)* %7, null
  %lnot25 = xor i1 %tobool24, true
  br label %land.end28

land.end28:                                       ; preds = %land.rhs20, %lor.lhs.false, %lor.rhs23, %if.end
  %8 = phi i1 [ false, %if.end ], [ true, %lor.lhs.false ], [ true, %land.rhs20 ], [ %lnot25, %lor.rhs23 ]
  %lnot29 = xor i1 %8, true
  %lnot31 = xor i1 %lnot29, true
  %lnot.ext32 = zext i1 %lnot31 to i32
  %tobool33 = icmp ne i32 %lnot.ext32, 0
  %lnot34 = xor i1 %tobool33, true
  %lnot36 = xor i1 %lnot34, true
  %lnot.ext37 = zext i1 %lnot36 to i32
  %conv38 = sext i32 %lnot.ext37 to i64
  %expval39 = call i64 @llvm.expect.i64(i64 %conv38, i64 0)
  %tobool40 = icmp ne i64 %expval39, 0
  br i1 %tobool40, label %if.then41, label %if.end42

if.then41:                                        ; preds = %land.end28
  call void @warn_slowpath_null(i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.3, i32 0, i32 0), i32 318)
  br label %if.end42

if.end42:                                         ; preds = %if.then41, %land.end28
  %tobool44 = icmp ne i32 %lnot.ext32, 0
  %lnot45 = xor i1 %tobool44, true
  %lnot47 = xor i1 %lnot45, true
  %lnot.ext48 = zext i1 %lnot47 to i32
  %conv49 = sext i32 %lnot.ext48 to i64
  %expval50 = call i64 @llvm.expect.i64(i64 %conv49, i64 0)
  %connect = getelementptr inbounds %struct.cfg80211_ops, %struct.cfg80211_ops* %ops, i32 0, i32 37
  %9 = load i32 (%struct.wiphy*, %struct.net_device*, %struct.cfg80211_connect_params*)*, i32 (%struct.wiphy*, %struct.net_device*, %struct.cfg80211_connect_params*)** %connect, align 8, !tbaa !85
  %tobool52 = icmp ne i32 (%struct.wiphy*, %struct.net_device*, %struct.cfg80211_connect_params*)* %9, null
  br i1 %tobool52, label %land.rhs53, label %land.end57

land.rhs53:                                       ; preds = %if.end42
  %disconnect = getelementptr inbounds %struct.cfg80211_ops, %struct.cfg80211_ops* %ops, i32 0, i32 38
  %10 = load i32 (%struct.wiphy*, %struct.net_device*, i16)*, i32 (%struct.wiphy*, %struct.net_device*, i16)** %disconnect, align 8, !tbaa !86
  %tobool54 = icmp ne i32 (%struct.wiphy*, %struct.net_device*, i16)* %10, null
  %lnot55 = xor i1 %tobool54, true
  br label %land.end57

land.end57:                                       ; preds = %land.rhs53, %if.end42
  %11 = phi i1 [ false, %if.end42 ], [ %lnot55, %land.rhs53 ]
  %lnot58 = xor i1 %11, true
  %lnot60 = xor i1 %lnot58, true
  %lnot.ext61 = zext i1 %lnot60 to i32
  %tobool62 = icmp ne i32 %lnot.ext61, 0
  %lnot63 = xor i1 %tobool62, true
  %lnot65 = xor i1 %lnot63, true
  %lnot.ext66 = zext i1 %lnot65 to i32
  %conv67 = sext i32 %lnot.ext66 to i64
  %expval68 = call i64 @llvm.expect.i64(i64 %conv67, i64 0)
  %tobool69 = icmp ne i64 %expval68, 0
  br i1 %tobool69, label %if.then70, label %if.end71

if.then70:                                        ; preds = %land.end57
  call void @warn_slowpath_null(i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.3, i32 0, i32 0), i32 319)
  br label %if.end71

if.end71:                                         ; preds = %if.then70, %land.end57
  %tobool73 = icmp ne i32 %lnot.ext61, 0
  %lnot74 = xor i1 %tobool73, true
  %lnot76 = xor i1 %lnot74, true
  %lnot.ext77 = zext i1 %lnot76 to i32
  %conv78 = sext i32 %lnot.ext77 to i64
  %expval79 = call i64 @llvm.expect.i64(i64 %conv78, i64 0)
  %join_ibss = getelementptr inbounds %struct.cfg80211_ops, %struct.cfg80211_ops* %ops, i32 0, i32 39
  %12 = load i32 (%struct.wiphy*, %struct.net_device*, %struct.cfg80211_ibss_params*)*, i32 (%struct.wiphy*, %struct.net_device*, %struct.cfg80211_ibss_params*)** %join_ibss, align 8, !tbaa !87
  %tobool81 = icmp ne i32 (%struct.wiphy*, %struct.net_device*, %struct.cfg80211_ibss_params*)* %12, null
  br i1 %tobool81, label %land.rhs82, label %land.end86

land.rhs82:                                       ; preds = %if.end71
  %leave_ibss = getelementptr inbounds %struct.cfg80211_ops, %struct.cfg80211_ops* %ops, i32 0, i32 40
  %13 = load i32 (%struct.wiphy*, %struct.net_device*)*, i32 (%struct.wiphy*, %struct.net_device*)** %leave_ibss, align 8, !tbaa !88
  %tobool83 = icmp ne i32 (%struct.wiphy*, %struct.net_device*)* %13, null
  %lnot84 = xor i1 %tobool83, true
  br label %land.end86

land.end86:                                       ; preds = %land.rhs82, %if.end71
  %14 = phi i1 [ false, %if.end71 ], [ %lnot84, %land.rhs82 ]
  %lnot87 = xor i1 %14, true
  %lnot89 = xor i1 %lnot87, true
  %lnot.ext90 = zext i1 %lnot89 to i32
  %tobool91 = icmp ne i32 %lnot.ext90, 0
  %lnot92 = xor i1 %tobool91, true
  %lnot94 = xor i1 %lnot92, true
  %lnot.ext95 = zext i1 %lnot94 to i32
  %conv96 = sext i32 %lnot.ext95 to i64
  %expval97 = call i64 @llvm.expect.i64(i64 %conv96, i64 0)
  %tobool98 = icmp ne i64 %expval97, 0
  br i1 %tobool98, label %if.then99, label %if.end100

if.then99:                                        ; preds = %land.end86
  call void @warn_slowpath_null(i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.3, i32 0, i32 0), i32 320)
  br label %if.end100

if.end100:                                        ; preds = %if.then99, %land.end86
  %tobool102 = icmp ne i32 %lnot.ext90, 0
  %lnot103 = xor i1 %tobool102, true
  %lnot105 = xor i1 %lnot103, true
  %lnot.ext106 = zext i1 %lnot105 to i32
  %conv107 = sext i32 %lnot.ext106 to i64
  %expval108 = call i64 @llvm.expect.i64(i64 %conv107, i64 0)
  %add_virtual_intf = getelementptr inbounds %struct.cfg80211_ops, %struct.cfg80211_ops* %ops, i32 0, i32 3
  %15 = load %struct.wireless_dev* (%struct.wiphy*, i8*, i32, i32*, %struct.vif_params*)*, %struct.wireless_dev* (%struct.wiphy*, i8*, i32, i32*, %struct.vif_params*)** %add_virtual_intf, align 8, !tbaa !89
  %tobool110 = icmp ne %struct.wireless_dev* (%struct.wiphy*, i8*, i32, i32*, %struct.vif_params*)* %15, null
  br i1 %tobool110, label %land.rhs111, label %land.end115

land.rhs111:                                      ; preds = %if.end100
  %del_virtual_intf = getelementptr inbounds %struct.cfg80211_ops, %struct.cfg80211_ops* %ops, i32 0, i32 4
  %16 = load i32 (%struct.wiphy*, %struct.wireless_dev*)*, i32 (%struct.wiphy*, %struct.wireless_dev*)** %del_virtual_intf, align 8, !tbaa !90
  %tobool112 = icmp ne i32 (%struct.wiphy*, %struct.wireless_dev*)* %16, null
  %lnot113 = xor i1 %tobool112, true
  br label %land.end115

land.end115:                                      ; preds = %land.rhs111, %if.end100
  %17 = phi i1 [ false, %if.end100 ], [ %lnot113, %land.rhs111 ]
  %lnot116 = xor i1 %17, true
  %lnot118 = xor i1 %lnot116, true
  %lnot.ext119 = zext i1 %lnot118 to i32
  %tobool120 = icmp ne i32 %lnot.ext119, 0
  %lnot121 = xor i1 %tobool120, true
  %lnot123 = xor i1 %lnot121, true
  %lnot.ext124 = zext i1 %lnot123 to i32
  %conv125 = sext i32 %lnot.ext124 to i64
  %expval126 = call i64 @llvm.expect.i64(i64 %conv125, i64 0)
  %tobool127 = icmp ne i64 %expval126, 0
  br i1 %tobool127, label %if.then128, label %if.end129

if.then128:                                       ; preds = %land.end115
  call void @warn_slowpath_null(i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.3, i32 0, i32 0), i32 321)
  br label %if.end129

if.end129:                                        ; preds = %if.then128, %land.end115
  %tobool131 = icmp ne i32 %lnot.ext119, 0
  %lnot132 = xor i1 %tobool131, true
  %lnot134 = xor i1 %lnot132, true
  %lnot.ext135 = zext i1 %lnot134 to i32
  %conv136 = sext i32 %lnot.ext135 to i64
  %expval137 = call i64 @llvm.expect.i64(i64 %conv136, i64 0)
  %add_station = getelementptr inbounds %struct.cfg80211_ops, %struct.cfg80211_ops* %ops, i32 0, i32 14
  %18 = load i32 (%struct.wiphy*, %struct.net_device*, i8*, %struct.station_parameters*)*, i32 (%struct.wiphy*, %struct.net_device*, i8*, %struct.station_parameters*)** %add_station, align 8, !tbaa !91
  %tobool139 = icmp ne i32 (%struct.wiphy*, %struct.net_device*, i8*, %struct.station_parameters*)* %18, null
  br i1 %tobool139, label %land.rhs140, label %land.end144

land.rhs140:                                      ; preds = %if.end129
  %del_station = getelementptr inbounds %struct.cfg80211_ops, %struct.cfg80211_ops* %ops, i32 0, i32 15
  %19 = load i32 (%struct.wiphy*, %struct.net_device*, i8*)*, i32 (%struct.wiphy*, %struct.net_device*, i8*)** %del_station, align 8, !tbaa !92
  %tobool141 = icmp ne i32 (%struct.wiphy*, %struct.net_device*, i8*)* %19, null
  %lnot142 = xor i1 %tobool141, true
  br label %land.end144

land.end144:                                      ; preds = %land.rhs140, %if.end129
  %20 = phi i1 [ false, %if.end129 ], [ %lnot142, %land.rhs140 ]
  %lnot145 = xor i1 %20, true
  %lnot147 = xor i1 %lnot145, true
  %lnot.ext148 = zext i1 %lnot147 to i32
  %tobool149 = icmp ne i32 %lnot.ext148, 0
  %lnot150 = xor i1 %tobool149, true
  %lnot152 = xor i1 %lnot150, true
  %lnot.ext153 = zext i1 %lnot152 to i32
  %conv154 = sext i32 %lnot.ext153 to i64
  %expval155 = call i64 @llvm.expect.i64(i64 %conv154, i64 0)
  %tobool156 = icmp ne i64 %expval155, 0
  br i1 %tobool156, label %if.then157, label %if.end158

if.then157:                                       ; preds = %land.end144
  call void @warn_slowpath_null(i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.3, i32 0, i32 0), i32 322)
  br label %if.end158

if.end158:                                        ; preds = %if.then157, %land.end144
  %tobool160 = icmp ne i32 %lnot.ext148, 0
  %lnot161 = xor i1 %tobool160, true
  %lnot163 = xor i1 %lnot161, true
  %lnot.ext164 = zext i1 %lnot163 to i32
  %conv165 = sext i32 %lnot.ext164 to i64
  %expval166 = call i64 @llvm.expect.i64(i64 %conv165, i64 0)
  %add_mpath = getelementptr inbounds %struct.cfg80211_ops, %struct.cfg80211_ops* %ops, i32 0, i32 19
  %21 = load i32 (%struct.wiphy*, %struct.net_device*, i8*, i8*)*, i32 (%struct.wiphy*, %struct.net_device*, i8*, i8*)** %add_mpath, align 8, !tbaa !93
  %tobool168 = icmp ne i32 (%struct.wiphy*, %struct.net_device*, i8*, i8*)* %21, null
  br i1 %tobool168, label %land.rhs169, label %land.end173

land.rhs169:                                      ; preds = %if.end158
  %del_mpath = getelementptr inbounds %struct.cfg80211_ops, %struct.cfg80211_ops* %ops, i32 0, i32 20
  %22 = load i32 (%struct.wiphy*, %struct.net_device*, i8*)*, i32 (%struct.wiphy*, %struct.net_device*, i8*)** %del_mpath, align 8, !tbaa !94
  %tobool170 = icmp ne i32 (%struct.wiphy*, %struct.net_device*, i8*)* %22, null
  %lnot171 = xor i1 %tobool170, true
  br label %land.end173

land.end173:                                      ; preds = %land.rhs169, %if.end158
  %23 = phi i1 [ false, %if.end158 ], [ %lnot171, %land.rhs169 ]
  %lnot174 = xor i1 %23, true
  %lnot176 = xor i1 %lnot174, true
  %lnot.ext177 = zext i1 %lnot176 to i32
  %tobool178 = icmp ne i32 %lnot.ext177, 0
  %lnot179 = xor i1 %tobool178, true
  %lnot181 = xor i1 %lnot179, true
  %lnot.ext182 = zext i1 %lnot181 to i32
  %conv183 = sext i32 %lnot.ext182 to i64
  %expval184 = call i64 @llvm.expect.i64(i64 %conv183, i64 0)
  %tobool185 = icmp ne i64 %expval184, 0
  br i1 %tobool185, label %if.then186, label %if.end187

if.then186:                                       ; preds = %land.end173
  call void @warn_slowpath_null(i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.3, i32 0, i32 0), i32 323)
  br label %if.end187

if.end187:                                        ; preds = %if.then186, %land.end173
  %tobool189 = icmp ne i32 %lnot.ext177, 0
  %lnot190 = xor i1 %tobool189, true
  %lnot192 = xor i1 %lnot190, true
  %lnot.ext193 = zext i1 %lnot192 to i32
  %conv194 = sext i32 %lnot.ext193 to i64
  %expval195 = call i64 @llvm.expect.i64(i64 %conv194, i64 0)
  %join_mesh = getelementptr inbounds %struct.cfg80211_ops, %struct.cfg80211_ops* %ops, i32 0, i32 26
  %24 = load i32 (%struct.wiphy*, %struct.net_device*, %struct.mesh_config*, %struct.mesh_setup*)*, i32 (%struct.wiphy*, %struct.net_device*, %struct.mesh_config*, %struct.mesh_setup*)** %join_mesh, align 8, !tbaa !95
  %tobool197 = icmp ne i32 (%struct.wiphy*, %struct.net_device*, %struct.mesh_config*, %struct.mesh_setup*)* %24, null
  br i1 %tobool197, label %land.rhs198, label %land.end202

land.rhs198:                                      ; preds = %if.end187
  %leave_mesh = getelementptr inbounds %struct.cfg80211_ops, %struct.cfg80211_ops* %ops, i32 0, i32 27
  %25 = load i32 (%struct.wiphy*, %struct.net_device*)*, i32 (%struct.wiphy*, %struct.net_device*)** %leave_mesh, align 8, !tbaa !96
  %tobool199 = icmp ne i32 (%struct.wiphy*, %struct.net_device*)* %25, null
  %lnot200 = xor i1 %tobool199, true
  br label %land.end202

land.end202:                                      ; preds = %land.rhs198, %if.end187
  %26 = phi i1 [ false, %if.end187 ], [ %lnot200, %land.rhs198 ]
  %lnot203 = xor i1 %26, true
  %lnot205 = xor i1 %lnot203, true
  %lnot.ext206 = zext i1 %lnot205 to i32
  %tobool207 = icmp ne i32 %lnot.ext206, 0
  %lnot208 = xor i1 %tobool207, true
  %lnot210 = xor i1 %lnot208, true
  %lnot.ext211 = zext i1 %lnot210 to i32
  %conv212 = sext i32 %lnot.ext211 to i64
  %expval213 = call i64 @llvm.expect.i64(i64 %conv212, i64 0)
  %tobool214 = icmp ne i64 %expval213, 0
  br i1 %tobool214, label %if.then215, label %if.end216

if.then215:                                       ; preds = %land.end202
  call void @warn_slowpath_null(i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.3, i32 0, i32 0), i32 324)
  br label %if.end216

if.end216:                                        ; preds = %if.then215, %land.end202
  %tobool218 = icmp ne i32 %lnot.ext206, 0
  %lnot219 = xor i1 %tobool218, true
  %lnot221 = xor i1 %lnot219, true
  %lnot.ext222 = zext i1 %lnot221 to i32
  %conv223 = sext i32 %lnot.ext222 to i64
  %expval224 = call i64 @llvm.expect.i64(i64 %conv223, i64 0)
  %conv225 = sext i32 %sizeof_priv to i64
  %add = add i64 1408, %conv225
  %conv226 = trunc i64 %add to i32
  %conv227 = sext i32 %conv226 to i64
  %call = call i8* @kzalloc(i64 %conv227, i32 208)
  %27 = bitcast i8* %call to %struct.cfg80211_registered_device*
  %tobool228 = icmp ne %struct.cfg80211_registered_device* %27, null
  br i1 %tobool228, label %if.end230, label %cleanup

if.end230:                                        ; preds = %if.end216
  %ops231 = getelementptr inbounds %struct.cfg80211_registered_device, %struct.cfg80211_registered_device* %27, i32 0, i32 0
  store %struct.cfg80211_ops* %ops, %struct.cfg80211_ops** %ops231, align 32, !tbaa !75
  call void @mutex_lock(%struct.mutex* @cfg80211_mutex)
  %28 = load i32, i32* @wiphy_new.wiphy_counter, align 4, !tbaa !55
  %inc = add nsw i32 %28, 1
  store i32 %inc, i32* @wiphy_new.wiphy_counter, align 4, !tbaa !55
  %wiphy_idx = getelementptr inbounds %struct.cfg80211_registered_device, %struct.cfg80211_registered_device* %27, i32 0, i32 8
  store i32 %28, i32* %wiphy_idx, align 8, !tbaa !13
  %wiphy_idx232 = getelementptr inbounds %struct.cfg80211_registered_device, %struct.cfg80211_registered_device* %27, i32 0, i32 8
  %29 = load i32, i32* %wiphy_idx232, align 8, !tbaa !13
  %cmp = icmp slt i32 %29, 0
  %lnot234 = xor i1 %cmp, true
  %lnot236 = xor i1 %lnot234, true
  %lnot.ext237 = zext i1 %lnot236 to i32
  %conv238 = sext i32 %lnot.ext237 to i64
  %expval239 = call i64 @llvm.expect.i64(i64 %conv238, i64 0)
  %tobool240 = icmp ne i64 %expval239, 0
  br i1 %tobool240, label %if.then241, label %if.end242

if.then241:                                       ; preds = %if.end230
  %30 = load i32, i32* @wiphy_new.wiphy_counter, align 4, !tbaa !55
  %dec = add nsw i32 %30, -1
  store i32 %dec, i32* @wiphy_new.wiphy_counter, align 4, !tbaa !55
  call void @mutex_unlock(%struct.mutex* @cfg80211_mutex)
  %31 = bitcast %struct.cfg80211_registered_device* %27 to i8*
  call void @kfree(i8* %31)
  br label %cleanup

if.end242:                                        ; preds = %if.end230
  call void @mutex_unlock(%struct.mutex* @cfg80211_mutex)
  %wiphy = getelementptr inbounds %struct.cfg80211_registered_device, %struct.cfg80211_registered_device* %27, i32 0, i32 34
  %dev = getelementptr inbounds %struct.wiphy, %struct.wiphy* %wiphy, i32 0, i32 42
  %wiphy_idx243 = getelementptr inbounds %struct.cfg80211_registered_device, %struct.cfg80211_registered_device* %27, i32 0, i32 8
  %32 = load i32, i32* %wiphy_idx243, align 8, !tbaa !13
  %call244 = call i32 (%struct.device*, i8*, ...) @dev_set_name(%struct.device* %dev, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.4, i32 0, i32 0), i32 %32)
  %mtx = getelementptr inbounds %struct.cfg80211_registered_device, %struct.cfg80211_registered_device* %27, i32 0, i32 2
  call void @__mutex_init(%struct.mutex* %mtx, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.5, i32 0, i32 0), %struct.lock_class_key* @wiphy_new.__key)
  %devlist_mtx = getelementptr inbounds %struct.cfg80211_registered_device, %struct.cfg80211_registered_device* %27, i32 0, i32 9
  call void @__mutex_init(%struct.mutex* %devlist_mtx, i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.7, i32 0, i32 0), %struct.lock_class_key* @wiphy_new.__key.6)
  %sched_scan_mtx = getelementptr inbounds %struct.cfg80211_registered_device, %struct.cfg80211_registered_device* %27, i32 0, i32 28
  call void @__mutex_init(%struct.mutex* %sched_scan_mtx, i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.9, i32 0, i32 0), %struct.lock_class_key* @wiphy_new.__key.8)
  %wdev_list = getelementptr inbounds %struct.cfg80211_registered_device, %struct.cfg80211_registered_device* %27, i32 0, i32 10
  call void @INIT_LIST_HEAD(%struct.list_head* %wdev_list)
  %beacon_registrations = getelementptr inbounds %struct.cfg80211_registered_device, %struct.cfg80211_registered_device* %27, i32 0, i32 15
  call void @INIT_LIST_HEAD(%struct.list_head* %beacon_registrations)
  %beacon_registrations_lock = getelementptr inbounds %struct.cfg80211_registered_device, %struct.cfg80211_registered_device* %27, i32 0, i32 16
  %call252 = call %struct.raw_spinlock* @spinlock_check(%struct.spinlock* %beacon_registrations_lock)
  %beacon_registrations_lock254 = getelementptr inbounds %struct.cfg80211_registered_device, %struct.cfg80211_registered_device* %27, i32 0, i32 16
  %33 = getelementptr inbounds %struct.spinlock, %struct.spinlock* %beacon_registrations_lock254, i32 0, i32 0
  %rlock = bitcast %union.anon.0* %33 to %struct.raw_spinlock*
  %raw_lock = getelementptr inbounds %struct.raw_spinlock, %struct.raw_spinlock* %.compoundliteral, i32 0, i32 0
  %34 = getelementptr inbounds %struct.arch_spinlock, %struct.arch_spinlock* %raw_lock, i32 0, i32 0
  %head_tail = bitcast %union.anon.1* %34 to i16*
  store i16 0, i16* %head_tail, align 2, !tbaa !97
  %35 = bitcast %struct.raw_spinlock* %rlock to i8*
  %36 = bitcast %struct.raw_spinlock* %.compoundliteral to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %35, i8* %36, i64 2, i32 2, i1 false), !tbaa.struct !98
  %bss_lock = getelementptr inbounds %struct.cfg80211_registered_device, %struct.cfg80211_registered_device* %27, i32 0, i32 19
  %call260 = call %struct.raw_spinlock* @spinlock_check(%struct.spinlock* %bss_lock)
  %bss_lock262 = getelementptr inbounds %struct.cfg80211_registered_device, %struct.cfg80211_registered_device* %27, i32 0, i32 19
  %37 = getelementptr inbounds %struct.spinlock, %struct.spinlock* %bss_lock262, i32 0, i32 0
  %rlock263 = bitcast %union.anon.0* %37 to %struct.raw_spinlock*
  %raw_lock265 = getelementptr inbounds %struct.raw_spinlock, %struct.raw_spinlock* %.compoundliteral264, i32 0, i32 0
  %38 = getelementptr inbounds %struct.arch_spinlock, %struct.arch_spinlock* %raw_lock265, i32 0, i32 0
  %head_tail266 = bitcast %union.anon.1* %38 to i16*
  store i16 0, i16* %head_tail266, align 2, !tbaa !97
  %39 = bitcast %struct.raw_spinlock* %rlock263 to i8*
  %40 = bitcast %struct.raw_spinlock* %.compoundliteral264 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %39, i8* %40, i64 2, i32 2, i1 false), !tbaa.struct !98
  %bss_list = getelementptr inbounds %struct.cfg80211_registered_device, %struct.cfg80211_registered_device* %27, i32 0, i32 20
  call void @INIT_LIST_HEAD(%struct.list_head* %bss_list)
  %scan_done_wk = getelementptr inbounds %struct.cfg80211_registered_device, %struct.cfg80211_registered_device* %27, i32 0, i32 26
  call void @__init_work(%struct.work_struct* %scan_done_wk, i32 0)
  %scan_done_wk273 = getelementptr inbounds %struct.cfg80211_registered_device, %struct.cfg80211_registered_device* %27, i32 0, i32 26
  %data = getelementptr inbounds %struct.work_struct, %struct.work_struct* %scan_done_wk273, i32 0, i32 0
  %counter = getelementptr inbounds %struct.atomic64_t, %struct.atomic64_t* %.compoundliteral274, i32 0, i32 0
  store i64 68719476704, i64* %counter, align 8, !tbaa !100
  %41 = bitcast %struct.atomic64_t* %data to i8*
  %42 = bitcast %struct.atomic64_t* %.compoundliteral274 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %41, i8* %42, i64 8, i32 8, i1 false), !tbaa.struct !101
  %scan_done_wk275 = getelementptr inbounds %struct.cfg80211_registered_device, %struct.cfg80211_registered_device* %27, i32 0, i32 26
  %entry276 = getelementptr inbounds %struct.work_struct, %struct.work_struct* %scan_done_wk275, i32 0, i32 1
  call void @INIT_LIST_HEAD(%struct.list_head* %entry276)
  %scan_done_wk278 = getelementptr inbounds %struct.cfg80211_registered_device, %struct.cfg80211_registered_device* %27, i32 0, i32 26
  %func = getelementptr inbounds %struct.work_struct, %struct.work_struct* %scan_done_wk278, i32 0, i32 2
  store void (%struct.work_struct*)* @__cfg80211_scan_done, void (%struct.work_struct*)** %func, align 8, !tbaa !103
  %sched_scan_results_wk = getelementptr inbounds %struct.cfg80211_registered_device, %struct.cfg80211_registered_device* %27, i32 0, i32 27
  call void @__init_work(%struct.work_struct* %sched_scan_results_wk, i32 0)
  %sched_scan_results_wk287 = getelementptr inbounds %struct.cfg80211_registered_device, %struct.cfg80211_registered_device* %27, i32 0, i32 27
  %data288 = getelementptr inbounds %struct.work_struct, %struct.work_struct* %sched_scan_results_wk287, i32 0, i32 0
  %counter290 = getelementptr inbounds %struct.atomic64_t, %struct.atomic64_t* %.compoundliteral289, i32 0, i32 0
  store i64 68719476704, i64* %counter290, align 8, !tbaa !100
  %43 = bitcast %struct.atomic64_t* %data288 to i8*
  %44 = bitcast %struct.atomic64_t* %.compoundliteral289 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %43, i8* %44, i64 8, i32 8, i1 false), !tbaa.struct !101
  %sched_scan_results_wk291 = getelementptr inbounds %struct.cfg80211_registered_device, %struct.cfg80211_registered_device* %27, i32 0, i32 27
  %entry292 = getelementptr inbounds %struct.work_struct, %struct.work_struct* %sched_scan_results_wk291, i32 0, i32 1
  call void @INIT_LIST_HEAD(%struct.list_head* %entry292)
  %sched_scan_results_wk294 = getelementptr inbounds %struct.cfg80211_registered_device, %struct.cfg80211_registered_device* %27, i32 0, i32 27
  %func295 = getelementptr inbounds %struct.work_struct, %struct.work_struct* %sched_scan_results_wk294, i32 0, i32 2
  store void (%struct.work_struct*)* @__cfg80211_sched_scan_results, void (%struct.work_struct*)** %func295, align 8, !tbaa !103
  %dfs_update_channels_wk = getelementptr inbounds %struct.cfg80211_registered_device, %struct.cfg80211_registered_device* %27, i32 0, i32 32
  %work = getelementptr inbounds %struct.delayed_work, %struct.delayed_work* %dfs_update_channels_wk, i32 0, i32 0
  call void @__init_work(%struct.work_struct* %work, i32 0)
  %dfs_update_channels_wk305 = getelementptr inbounds %struct.cfg80211_registered_device, %struct.cfg80211_registered_device* %27, i32 0, i32 32
  %work306 = getelementptr inbounds %struct.delayed_work, %struct.delayed_work* %dfs_update_channels_wk305, i32 0, i32 0
  %data307 = getelementptr inbounds %struct.work_struct, %struct.work_struct* %work306, i32 0, i32 0
  %counter309 = getelementptr inbounds %struct.atomic64_t, %struct.atomic64_t* %.compoundliteral308, i32 0, i32 0
  store i64 68719476704, i64* %counter309, align 8, !tbaa !100
  %45 = bitcast %struct.atomic64_t* %data307 to i8*
  %46 = bitcast %struct.atomic64_t* %.compoundliteral308 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %45, i8* %46, i64 8, i32 8, i1 false), !tbaa.struct !101
  %dfs_update_channels_wk310 = getelementptr inbounds %struct.cfg80211_registered_device, %struct.cfg80211_registered_device* %27, i32 0, i32 32
  %work311 = getelementptr inbounds %struct.delayed_work, %struct.delayed_work* %dfs_update_channels_wk310, i32 0, i32 0
  %entry312 = getelementptr inbounds %struct.work_struct, %struct.work_struct* %work311, i32 0, i32 1
  call void @INIT_LIST_HEAD(%struct.list_head* %entry312)
  %dfs_update_channels_wk314 = getelementptr inbounds %struct.cfg80211_registered_device, %struct.cfg80211_registered_device* %27, i32 0, i32 32
  %work315 = getelementptr inbounds %struct.delayed_work, %struct.delayed_work* %dfs_update_channels_wk314, i32 0, i32 0
  %func316 = getelementptr inbounds %struct.work_struct, %struct.work_struct* %work315, i32 0, i32 2
  store void (%struct.work_struct*)* @cfg80211_dfs_channels_update_work, void (%struct.work_struct*)** %func316, align 8, !tbaa !103
  %dfs_update_channels_wk324 = getelementptr inbounds %struct.cfg80211_registered_device, %struct.cfg80211_registered_device* %27, i32 0, i32 32
  %timer = getelementptr inbounds %struct.delayed_work, %struct.delayed_work* %dfs_update_channels_wk324, i32 0, i32 1
  call void @init_timer_key(%struct.timer_list* %timer, i32 2, i8* null, %struct.lock_class_key* null)
  %dfs_update_channels_wk325 = getelementptr inbounds %struct.cfg80211_registered_device, %struct.cfg80211_registered_device* %27, i32 0, i32 32
  %timer326 = getelementptr inbounds %struct.delayed_work, %struct.delayed_work* %dfs_update_channels_wk325, i32 0, i32 1
  %function = getelementptr inbounds %struct.timer_list, %struct.timer_list* %timer326, i32 0, i32 3
  store void (i64)* @delayed_work_timer_fn, void (i64)** %function, align 8, !tbaa !104
  %dfs_update_channels_wk327 = getelementptr inbounds %struct.cfg80211_registered_device, %struct.cfg80211_registered_device* %27, i32 0, i32 32
  %47 = ptrtoint %struct.delayed_work* %dfs_update_channels_wk327 to i64
  %dfs_update_channels_wk328 = getelementptr inbounds %struct.cfg80211_registered_device, %struct.cfg80211_registered_device* %27, i32 0, i32 32
  %timer329 = getelementptr inbounds %struct.delayed_work, %struct.delayed_work* %dfs_update_channels_wk328, i32 0, i32 1
  %data330 = getelementptr inbounds %struct.timer_list, %struct.timer_list* %timer329, i32 0, i32 4
  store i64 %47, i64* %data330, align 8, !tbaa !105
  %wiphy335 = getelementptr inbounds %struct.cfg80211_registered_device, %struct.cfg80211_registered_device* %27, i32 0, i32 34
  %dev336 = getelementptr inbounds %struct.wiphy, %struct.wiphy* %wiphy335, i32 0, i32 42
  call void @device_initialize(%struct.device* %dev336)
  %wiphy337 = getelementptr inbounds %struct.cfg80211_registered_device, %struct.cfg80211_registered_device* %27, i32 0, i32 34
  %dev338 = getelementptr inbounds %struct.wiphy, %struct.wiphy* %wiphy337, i32 0, i32 42
  %class = getelementptr inbounds %struct.device, %struct.device* %dev338, i32 0, i32 25
  store %struct.class* @ieee80211_class, %struct.class** %class, align 8, !tbaa !106
  %48 = bitcast %struct.cfg80211_registered_device* %27 to i8*
  %wiphy339 = getelementptr inbounds %struct.cfg80211_registered_device, %struct.cfg80211_registered_device* %27, i32 0, i32 34
  %dev340 = getelementptr inbounds %struct.wiphy, %struct.wiphy* %wiphy339, i32 0, i32 42
  %platform_data = getelementptr inbounds %struct.device, %struct.device* %dev340, i32 0, i32 8
  store i8* %48, i8** %platform_data, align 8, !tbaa !107
  %wiphy341 = getelementptr inbounds %struct.cfg80211_registered_device, %struct.cfg80211_registered_device* %27, i32 0, i32 34
  %flags = getelementptr inbounds %struct.wiphy, %struct.wiphy* %wiphy341, i32 0, i32 10
  %49 = load i32, i32* %flags, align 4, !tbaa !63
  %or = or i32 %49, 16
  store i32 %or, i32* %flags, align 4, !tbaa !63
  %wiphy342 = getelementptr inbounds %struct.cfg80211_registered_device, %struct.cfg80211_registered_device* %27, i32 0, i32 34
  call void @wiphy_net_set(%struct.wiphy* %wiphy342, %struct.net* @init_net)
  %rfkill_ops = getelementptr inbounds %struct.cfg80211_registered_device, %struct.cfg80211_registered_device* %27, i32 0, i32 3
  %set_block = getelementptr inbounds %struct.rfkill_ops, %struct.rfkill_ops* %rfkill_ops, i32 0, i32 2
  store i32 (i8*, i1)* @cfg80211_rfkill_set_block, i32 (i8*, i1)** %set_block, align 16, !tbaa !108
  %wiphy343 = getelementptr inbounds %struct.cfg80211_registered_device, %struct.cfg80211_registered_device* %27, i32 0, i32 34
  %dev344 = getelementptr inbounds %struct.wiphy, %struct.wiphy* %wiphy343, i32 0, i32 42
  %call345 = call i8* @dev_name(%struct.device* %dev344)
  %wiphy346 = getelementptr inbounds %struct.cfg80211_registered_device, %struct.cfg80211_registered_device* %27, i32 0, i32 34
  %dev347 = getelementptr inbounds %struct.wiphy, %struct.wiphy* %wiphy346, i32 0, i32 42
  %rfkill_ops348 = getelementptr inbounds %struct.cfg80211_registered_device, %struct.cfg80211_registered_device* %27, i32 0, i32 3
  %50 = bitcast %struct.cfg80211_registered_device* %27 to i8*
  %call349 = call %struct.rfkill* @rfkill_alloc(i8* %call345, %struct.device* %dev347, i32 1, %struct.rfkill_ops* %rfkill_ops348, i8* %50)
  %rfkill = getelementptr inbounds %struct.cfg80211_registered_device, %struct.cfg80211_registered_device* %27, i32 0, i32 4
  store %struct.rfkill* %call349, %struct.rfkill** %rfkill, align 8, !tbaa !109
  %rfkill350 = getelementptr inbounds %struct.cfg80211_registered_device, %struct.cfg80211_registered_device* %27, i32 0, i32 4
  %51 = load %struct.rfkill*, %struct.rfkill** %rfkill350, align 8, !tbaa !109
  %tobool351 = icmp ne %struct.rfkill* %51, null
  br i1 %tobool351, label %do.body355, label %if.then352

if.then352:                                       ; preds = %if.end242
  %52 = bitcast %struct.cfg80211_registered_device* %27 to i8*
  call void @kfree(i8* %52)
  br label %cleanup

do.body355:                                       ; preds = %if.end242
  %rfkill_sync = getelementptr inbounds %struct.cfg80211_registered_device, %struct.cfg80211_registered_device* %27, i32 0, i32 5
  call void @__init_work(%struct.work_struct* %rfkill_sync, i32 0)
  %rfkill_sync356 = getelementptr inbounds %struct.cfg80211_registered_device, %struct.cfg80211_registered_device* %27, i32 0, i32 5
  %data357 = getelementptr inbounds %struct.work_struct, %struct.work_struct* %rfkill_sync356, i32 0, i32 0
  %counter359 = getelementptr inbounds %struct.atomic64_t, %struct.atomic64_t* %.compoundliteral358, i32 0, i32 0
  store i64 68719476704, i64* %counter359, align 8, !tbaa !100
  %53 = bitcast %struct.atomic64_t* %data357 to i8*
  %54 = bitcast %struct.atomic64_t* %.compoundliteral358 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %53, i8* %54, i64 8, i32 8, i1 false), !tbaa.struct !101
  %rfkill_sync360 = getelementptr inbounds %struct.cfg80211_registered_device, %struct.cfg80211_registered_device* %27, i32 0, i32 5
  %entry361 = getelementptr inbounds %struct.work_struct, %struct.work_struct* %rfkill_sync360, i32 0, i32 1
  call void @INIT_LIST_HEAD(%struct.list_head* %entry361)
  %rfkill_sync363 = getelementptr inbounds %struct.cfg80211_registered_device, %struct.cfg80211_registered_device* %27, i32 0, i32 5
  %func364 = getelementptr inbounds %struct.work_struct, %struct.work_struct* %rfkill_sync363, i32 0, i32 2
  store void (%struct.work_struct*)* @cfg80211_rfkill_sync_work, void (%struct.work_struct*)** %func364, align 8, !tbaa !103
  %conn_work = getelementptr inbounds %struct.cfg80211_registered_device, %struct.cfg80211_registered_device* %27, i32 0, i32 29
  call void @__init_work(%struct.work_struct* %conn_work, i32 0)
  %conn_work373 = getelementptr inbounds %struct.cfg80211_registered_device, %struct.cfg80211_registered_device* %27, i32 0, i32 29
  %data374 = getelementptr inbounds %struct.work_struct, %struct.work_struct* %conn_work373, i32 0, i32 0
  %counter376 = getelementptr inbounds %struct.atomic64_t, %struct.atomic64_t* %.compoundliteral375, i32 0, i32 0
  store i64 68719476704, i64* %counter376, align 8, !tbaa !100
  %55 = bitcast %struct.atomic64_t* %data374 to i8*
  %56 = bitcast %struct.atomic64_t* %.compoundliteral375 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %55, i8* %56, i64 8, i32 8, i1 false), !tbaa.struct !101
  %conn_work377 = getelementptr inbounds %struct.cfg80211_registered_device, %struct.cfg80211_registered_device* %27, i32 0, i32 29
  %entry378 = getelementptr inbounds %struct.work_struct, %struct.work_struct* %conn_work377, i32 0, i32 1
  call void @INIT_LIST_HEAD(%struct.list_head* %entry378)
  %conn_work380 = getelementptr inbounds %struct.cfg80211_registered_device, %struct.cfg80211_registered_device* %27, i32 0, i32 29
  %func381 = getelementptr inbounds %struct.work_struct, %struct.work_struct* %conn_work380, i32 0, i32 2
  store void (%struct.work_struct*)* @cfg80211_conn_work, void (%struct.work_struct*)** %func381, align 8, !tbaa !103
  %event_work = getelementptr inbounds %struct.cfg80211_registered_device, %struct.cfg80211_registered_device* %27, i32 0, i32 30
  call void @__init_work(%struct.work_struct* %event_work, i32 0)
  %event_work390 = getelementptr inbounds %struct.cfg80211_registered_device, %struct.cfg80211_registered_device* %27, i32 0, i32 30
  %data391 = getelementptr inbounds %struct.work_struct, %struct.work_struct* %event_work390, i32 0, i32 0
  %counter393 = getelementptr inbounds %struct.atomic64_t, %struct.atomic64_t* %.compoundliteral392, i32 0, i32 0
  store i64 68719476704, i64* %counter393, align 8, !tbaa !100
  %57 = bitcast %struct.atomic64_t* %data391 to i8*
  %58 = bitcast %struct.atomic64_t* %.compoundliteral392 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %57, i8* %58, i64 8, i32 8, i1 false), !tbaa.struct !101
  %event_work394 = getelementptr inbounds %struct.cfg80211_registered_device, %struct.cfg80211_registered_device* %27, i32 0, i32 30
  %entry395 = getelementptr inbounds %struct.work_struct, %struct.work_struct* %event_work394, i32 0, i32 1
  call void @INIT_LIST_HEAD(%struct.list_head* %entry395)
  %event_work397 = getelementptr inbounds %struct.cfg80211_registered_device, %struct.cfg80211_registered_device* %27, i32 0, i32 30
  %func398 = getelementptr inbounds %struct.work_struct, %struct.work_struct* %event_work397, i32 0, i32 2
  store void (%struct.work_struct*)* @cfg80211_event_work, void (%struct.work_struct*)** %func398, align 8, !tbaa !103
  %dev_wait = getelementptr inbounds %struct.cfg80211_registered_device, %struct.cfg80211_registered_device* %27, i32 0, i32 14
  call void @__init_waitqueue_head(%struct.__wait_queue_head* %dev_wait, i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.11, i32 0, i32 0), %struct.lock_class_key* @wiphy_new.__key.10)
  %wiphy408 = getelementptr inbounds %struct.cfg80211_registered_device, %struct.cfg80211_registered_device* %27, i32 0, i32 34
  %retry_short = getelementptr inbounds %struct.wiphy, %struct.wiphy* %wiphy408, i32 0, i32 22
  store i8 7, i8* %retry_short, align 32, !tbaa !110
  %wiphy409 = getelementptr inbounds %struct.cfg80211_registered_device, %struct.cfg80211_registered_device* %27, i32 0, i32 34
  %retry_long = getelementptr inbounds %struct.wiphy, %struct.wiphy* %wiphy409, i32 0, i32 23
  store i8 4, i8* %retry_long, align 1, !tbaa !111
  %wiphy410 = getelementptr inbounds %struct.cfg80211_registered_device, %struct.cfg80211_registered_device* %27, i32 0, i32 34
  %frag_threshold = getelementptr inbounds %struct.wiphy, %struct.wiphy* %wiphy410, i32 0, i32 24
  store i32 -1, i32* %frag_threshold, align 4, !tbaa !112
  %wiphy411 = getelementptr inbounds %struct.cfg80211_registered_device, %struct.cfg80211_registered_device* %27, i32 0, i32 34
  %rts_threshold = getelementptr inbounds %struct.wiphy, %struct.wiphy* %wiphy411, i32 0, i32 25
  store i32 -1, i32* %rts_threshold, align 8, !tbaa !113
  %wiphy412 = getelementptr inbounds %struct.cfg80211_registered_device, %struct.cfg80211_registered_device* %27, i32 0, i32 34
  %coverage_class = getelementptr inbounds %struct.wiphy, %struct.wiphy* %wiphy412, i32 0, i32 26
  store i8 0, i8* %coverage_class, align 4, !tbaa !114
  %wiphy413 = getelementptr inbounds %struct.cfg80211_registered_device, %struct.cfg80211_registered_device* %27, i32 0, i32 34
  %features = getelementptr inbounds %struct.wiphy, %struct.wiphy* %wiphy413, i32 0, i32 11
  store i32 128, i32* %features, align 8, !tbaa !115
  %wiphy414 = getelementptr inbounds %struct.cfg80211_registered_device, %struct.cfg80211_registered_device* %27, i32 0, i32 34
  br label %cleanup

cleanup:                                          ; preds = %if.end216, %do.body355, %if.then352, %if.then241
  %retval.0 = phi %struct.wiphy* [ null, %if.then241 ], [ %wiphy414, %do.body355 ], [ null, %if.then352 ], [ null, %if.end216 ]
  ret %struct.wiphy* %retval.0
}

; Function Attrs: inlinehint nounwind uwtable
define internal i8* @kzalloc(i64 %size, i32 %flags) #0 {
entry:
  %or = or i32 %flags, 32768
  %call = call i8* @kmalloc(i64 %size, i32 %or)
  ret i8* %call
}

declare void @kfree(i8*) #3

declare i32 @dev_set_name(%struct.device*, i8*, ...) #3

declare void @__mutex_init(%struct.mutex*, i8*, %struct.lock_class_key*) #3

; Function Attrs: inlinehint nounwind uwtable
define internal void @INIT_LIST_HEAD(%struct.list_head* %list) #0 {
entry:
  %next = getelementptr inbounds %struct.list_head, %struct.list_head* %list, i32 0, i32 0
  store %struct.list_head* %list, %struct.list_head** %next, align 8, !tbaa !116
  %prev = getelementptr inbounds %struct.list_head, %struct.list_head* %list, i32 0, i32 1
  store %struct.list_head* %list, %struct.list_head** %prev, align 8, !tbaa !117
  ret void
}

; Function Attrs: inlinehint nounwind uwtable
define internal %struct.raw_spinlock* @spinlock_check(%struct.spinlock* %lock) #0 {
entry:
  %0 = getelementptr inbounds %struct.spinlock, %struct.spinlock* %lock, i32 0, i32 0
  %rlock = bitcast %union.anon.0* %0 to %struct.raw_spinlock*
  ret %struct.raw_spinlock* %rlock
}

; Function Attrs: argmemonly nounwind
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* nocapture writeonly, i8* nocapture readonly, i64, i32, i1) #2

; Function Attrs: inlinehint nounwind uwtable
define internal void @__init_work(%struct.work_struct* %work, i32 %onstack) #0 {
entry:
  ret void
}

declare void @__cfg80211_scan_done(%struct.work_struct*) #3

declare void @__cfg80211_sched_scan_results(%struct.work_struct*) #3

declare void @cfg80211_dfs_channels_update_work(%struct.work_struct*) #3

declare void @init_timer_key(%struct.timer_list*, i32, i8*, %struct.lock_class_key*) #3

declare void @delayed_work_timer_fn(i64) #3

declare void @device_initialize(%struct.device*) #3

; Function Attrs: nounwind uwtable
define internal i32 @cfg80211_rfkill_set_block(i8* %data, i1 zeroext %blocked) #1 {
entry:
  %frombool = zext i1 %blocked to i8
  %0 = bitcast i8* %data to %struct.cfg80211_registered_device*
  %tobool = trunc i8 %frombool to i1
  br i1 %tobool, label %if.end, label %cleanup

if.end:                                           ; preds = %entry
  call void @rtnl_lock()
  %wdev_list = getelementptr inbounds %struct.cfg80211_registered_device, %struct.cfg80211_registered_device* %0, i32 0, i32 10
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %if.end
  %list9.sink = phi %struct.list_head* [ %list9, %for.inc ], [ %wdev_list, %if.end ]
  %next10 = getelementptr inbounds %struct.list_head, %struct.list_head* %list9.sink, i32 0, i32 0
  %1 = load %struct.list_head*, %struct.list_head** %next10, align 8, !tbaa !12
  %2 = bitcast %struct.list_head* %1 to i8*
  %add.ptr12 = getelementptr inbounds i8, i8* %2, i64 -16
  %3 = bitcast i8* %add.ptr12 to %struct.wireless_dev*
  %list = getelementptr inbounds %struct.wireless_dev, %struct.wireless_dev* %3, i32 0, i32 2
  %wdev_list1 = getelementptr inbounds %struct.cfg80211_registered_device, %struct.cfg80211_registered_device* %0, i32 0, i32 10
  %cmp = icmp ne %struct.list_head* %list, %wdev_list1
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %netdev = getelementptr inbounds %struct.wireless_dev, %struct.wireless_dev* %3, i32 0, i32 3
  %4 = load %struct.net_device*, %struct.net_device** %netdev, align 8, !tbaa !64
  %tobool2 = icmp ne %struct.net_device* %4, null
  br i1 %tobool2, label %if.then3, label %if.end5

if.then3:                                         ; preds = %for.body
  %netdev4 = getelementptr inbounds %struct.wireless_dev, %struct.wireless_dev* %3, i32 0, i32 3
  %5 = load %struct.net_device*, %struct.net_device** %netdev4, align 8, !tbaa !64
  %call = call i32 @dev_close(%struct.net_device* %5)
  br label %for.inc

if.end5:                                          ; preds = %for.body
  %iftype = getelementptr inbounds %struct.wireless_dev, %struct.wireless_dev* %3, i32 0, i32 1
  %6 = load i32, i32* %iftype, align 8, !tbaa !67
  %cond = icmp eq i32 %6, 10
  br i1 %cond, label %sw.bb, label %for.inc

sw.bb:                                            ; preds = %if.end5
  %devlist_mtx = getelementptr inbounds %struct.cfg80211_registered_device, %struct.cfg80211_registered_device* %0, i32 0, i32 9
  call void @mutex_lock(%struct.mutex* %devlist_mtx)
  %sched_scan_mtx = getelementptr inbounds %struct.cfg80211_registered_device, %struct.cfg80211_registered_device* %0, i32 0, i32 28
  call void @mutex_lock(%struct.mutex* %sched_scan_mtx)
  call void @cfg80211_stop_p2p_device(%struct.cfg80211_registered_device* %0, %struct.wireless_dev* %3)
  %sched_scan_mtx6 = getelementptr inbounds %struct.cfg80211_registered_device, %struct.cfg80211_registered_device* %0, i32 0, i32 28
  call void @mutex_unlock(%struct.mutex* %sched_scan_mtx6)
  %devlist_mtx7 = getelementptr inbounds %struct.cfg80211_registered_device, %struct.cfg80211_registered_device* %0, i32 0, i32 9
  call void @mutex_unlock(%struct.mutex* %devlist_mtx7)
  br label %for.inc

for.inc:                                          ; preds = %sw.bb, %if.end5, %if.then3
  %list9 = getelementptr inbounds %struct.wireless_dev, %struct.wireless_dev* %3, i32 0, i32 2
  br label %for.cond

for.end:                                          ; preds = %for.cond
  call void @rtnl_unlock()
  br label %cleanup

cleanup:                                          ; preds = %entry, %for.end
  ret i32 0
}

declare %struct.rfkill* @rfkill_alloc(i8*, %struct.device*, i32, %struct.rfkill_ops*, i8*) #3

; Function Attrs: nounwind uwtable
define internal void @cfg80211_rfkill_sync_work(%struct.work_struct* %work) #1 {
entry:
  %0 = bitcast %struct.work_struct* %work to i8*
  %add.ptr = getelementptr inbounds i8, i8* %0, i64 -96
  %1 = bitcast i8* %add.ptr to %struct.cfg80211_registered_device*
  %2 = bitcast %struct.cfg80211_registered_device* %1 to i8*
  %rfkill = getelementptr inbounds %struct.cfg80211_registered_device, %struct.cfg80211_registered_device* %1, i32 0, i32 4
  %3 = load %struct.rfkill*, %struct.rfkill** %rfkill, align 8, !tbaa !109
  %call = call zeroext i1 @rfkill_blocked(%struct.rfkill* %3)
  %call1 = call i32 @cfg80211_rfkill_set_block(i8* %2, i1 zeroext %call)
  ret void
}

declare void @cfg80211_conn_work(%struct.work_struct*) #3

; Function Attrs: nounwind uwtable
define internal void @cfg80211_event_work(%struct.work_struct* %work) #1 {
entry:
  %0 = bitcast %struct.work_struct* %work to i8*
  %add.ptr = getelementptr inbounds i8, i8* %0, i64 -464
  %1 = bitcast i8* %add.ptr to %struct.cfg80211_registered_device*
  call void @rtnl_lock()
  call void @cfg80211_lock_rdev(%struct.cfg80211_registered_device* %1)
  call void @cfg80211_process_rdev_events(%struct.cfg80211_registered_device* %1)
  call void @cfg80211_unlock_rdev(%struct.cfg80211_registered_device* %1)
  call void @rtnl_unlock()
  ret void
}

declare void @__init_waitqueue_head(%struct.__wait_queue_head*, i8*, %struct.lock_class_key*) #3

; Function Attrs: nounwind uwtable
define i32 @wiphy_register(%struct.wiphy* %wiphy) #1 {
entry:
  %request = alloca %struct.regulatory_request, align 8
  %call = call %struct.cfg80211_registered_device* @wiphy_to_dev(%struct.wiphy* %wiphy)
  %interface_modes = getelementptr inbounds %struct.wiphy, %struct.wiphy* %wiphy, i32 0, i32 8
  %0 = load i16, i16* %interface_modes, align 16, !tbaa !118
  %wowlan = getelementptr inbounds %struct.wiphy, %struct.wiphy* %wiphy, i32 0, i32 29
  %flags = getelementptr inbounds %struct.wiphy_wowlan_support, %struct.wiphy_wowlan_support* %wowlan, i32 0, i32 0
  %1 = load i32, i32* %flags, align 8, !tbaa !119
  %and = and i32 %1, 16
  %tobool = icmp ne i32 %and, 0
  br i1 %tobool, label %land.rhs, label %land.end

land.rhs:                                         ; preds = %entry
  %wowlan1 = getelementptr inbounds %struct.wiphy, %struct.wiphy* %wiphy, i32 0, i32 29
  %flags2 = getelementptr inbounds %struct.wiphy_wowlan_support, %struct.wiphy_wowlan_support* %wowlan1, i32 0, i32 0
  %2 = load i32, i32* %flags2, align 8, !tbaa !119
  %and3 = and i32 %2, 8
  %tobool4 = icmp ne i32 %and3, 0
  %lnot = xor i1 %tobool4, true
  br label %land.end

land.end:                                         ; preds = %land.rhs, %entry
  %3 = phi i1 [ false, %entry ], [ %lnot, %land.rhs ]
  %lnot5 = xor i1 %3, true
  %lnot6 = xor i1 %lnot5, true
  %lnot.ext = zext i1 %lnot6 to i32
  %tobool7 = icmp ne i32 %lnot.ext, 0
  %lnot8 = xor i1 %tobool7, true
  %lnot10 = xor i1 %lnot8, true
  %lnot.ext11 = zext i1 %lnot10 to i32
  %conv = sext i32 %lnot.ext11 to i64
  %expval = call i64 @llvm.expect.i64(i64 %conv, i64 0)
  %tobool12 = icmp ne i64 %expval, 0
  br i1 %tobool12, label %if.then, label %if.end

if.then:                                          ; preds = %land.end
  call void @warn_slowpath_null(i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.3, i32 0, i32 0), i32 500)
  br label %if.end

if.end:                                           ; preds = %if.then, %land.end
  %tobool13 = icmp ne i32 %lnot.ext, 0
  %lnot14 = xor i1 %tobool13, true
  %lnot16 = xor i1 %lnot14, true
  %lnot.ext17 = zext i1 %lnot16 to i32
  %conv18 = sext i32 %lnot.ext17 to i64
  %expval19 = call i64 @llvm.expect.i64(i64 %conv18, i64 0)
  %tobool20 = icmp ne i64 %expval19, 0
  br i1 %tobool20, label %cleanup, label %if.end22

if.end22:                                         ; preds = %if.end
  %ap_sme_capa = getelementptr inbounds %struct.wiphy, %struct.wiphy* %wiphy, i32 0, i32 12
  %4 = load i32, i32* %ap_sme_capa, align 4, !tbaa !120
  %tobool24 = icmp ne i32 %4, 0
  br i1 %tobool24, label %land.rhs25, label %land.end31

land.rhs25:                                       ; preds = %if.end22
  %flags26 = getelementptr inbounds %struct.wiphy, %struct.wiphy* %wiphy, i32 0, i32 10
  %5 = load i32, i32* %flags26, align 4, !tbaa !121
  %and27 = and i32 %5, 131072
  %tobool28 = icmp ne i32 %and27, 0
  %lnot29 = xor i1 %tobool28, true
  br label %land.end31

land.end31:                                       ; preds = %land.rhs25, %if.end22
  %6 = phi i1 [ false, %if.end22 ], [ %lnot29, %land.rhs25 ]
  %lnot32 = xor i1 %6, true
  %lnot34 = xor i1 %lnot32, true
  %lnot.ext35 = zext i1 %lnot34 to i32
  %tobool36 = icmp ne i32 %lnot.ext35, 0
  %lnot37 = xor i1 %tobool36, true
  %lnot39 = xor i1 %lnot37, true
  %lnot.ext40 = zext i1 %lnot39 to i32
  %conv41 = sext i32 %lnot.ext40 to i64
  %expval42 = call i64 @llvm.expect.i64(i64 %conv41, i64 0)
  %tobool43 = icmp ne i64 %expval42, 0
  br i1 %tobool43, label %if.then44, label %if.end45

if.then44:                                        ; preds = %land.end31
  call void @warn_slowpath_null(i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.3, i32 0, i32 0), i32 505)
  br label %if.end45

if.end45:                                         ; preds = %if.then44, %land.end31
  %tobool47 = icmp ne i32 %lnot.ext35, 0
  %lnot48 = xor i1 %tobool47, true
  %lnot50 = xor i1 %lnot48, true
  %lnot.ext51 = zext i1 %lnot50 to i32
  %conv52 = sext i32 %lnot.ext51 to i64
  %expval53 = call i64 @llvm.expect.i64(i64 %conv52, i64 0)
  %tobool54 = icmp ne i64 %expval53, 0
  br i1 %tobool54, label %cleanup, label %if.end56

if.end56:                                         ; preds = %if.end45
  %addresses = getelementptr inbounds %struct.wiphy, %struct.wiphy* %wiphy, i32 0, i32 2
  %7 = load %struct.mac_address*, %struct.mac_address** %addresses, align 16, !tbaa !122
  %tobool58 = icmp ne %struct.mac_address* %7, null
  br i1 %tobool58, label %land.rhs59, label %land.end63

land.rhs59:                                       ; preds = %if.end56
  %n_addresses = getelementptr inbounds %struct.wiphy, %struct.wiphy* %wiphy, i32 0, i32 7
  %8 = load i16, i16* %n_addresses, align 2, !tbaa !123
  %tobool60 = icmp ne i16 %8, 0
  %lnot61 = xor i1 %tobool60, true
  br label %land.end63

land.end63:                                       ; preds = %land.rhs59, %if.end56
  %9 = phi i1 [ false, %if.end56 ], [ %lnot61, %land.rhs59 ]
  %lnot64 = xor i1 %9, true
  %lnot66 = xor i1 %lnot64, true
  %lnot.ext67 = zext i1 %lnot66 to i32
  %tobool68 = icmp ne i32 %lnot.ext67, 0
  %lnot69 = xor i1 %tobool68, true
  %lnot71 = xor i1 %lnot69, true
  %lnot.ext72 = zext i1 %lnot71 to i32
  %conv73 = sext i32 %lnot.ext72 to i64
  %expval74 = call i64 @llvm.expect.i64(i64 %conv73, i64 0)
  %tobool75 = icmp ne i64 %expval74, 0
  br i1 %tobool75, label %if.then76, label %if.end77

if.then76:                                        ; preds = %land.end63
  call void @warn_slowpath_null(i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.3, i32 0, i32 0), i32 508)
  br label %if.end77

if.end77:                                         ; preds = %if.then76, %land.end63
  %tobool79 = icmp ne i32 %lnot.ext67, 0
  %lnot80 = xor i1 %tobool79, true
  %lnot82 = xor i1 %lnot80, true
  %lnot.ext83 = zext i1 %lnot82 to i32
  %conv84 = sext i32 %lnot.ext83 to i64
  %expval85 = call i64 @llvm.expect.i64(i64 %conv84, i64 0)
  %tobool86 = icmp ne i64 %expval85, 0
  br i1 %tobool86, label %cleanup, label %if.end88

if.end88:                                         ; preds = %if.end77
  %addresses90 = getelementptr inbounds %struct.wiphy, %struct.wiphy* %wiphy, i32 0, i32 2
  %10 = load %struct.mac_address*, %struct.mac_address** %addresses90, align 16, !tbaa !122
  %tobool91 = icmp ne %struct.mac_address* %10, null
  br i1 %tobool91, label %land.lhs.true, label %land.end100

land.lhs.true:                                    ; preds = %if.end88
  %perm_addr = getelementptr inbounds %struct.wiphy, %struct.wiphy* %wiphy, i32 0, i32 0
  %arraydecay = getelementptr inbounds [6 x i8], [6 x i8]* %perm_addr, i32 0, i32 0
  %call92 = call zeroext i1 @is_zero_ether_addr(i8* %arraydecay)
  br i1 %call92, label %land.end100, label %land.rhs93

land.rhs93:                                       ; preds = %land.lhs.true
  %perm_addr94 = getelementptr inbounds %struct.wiphy, %struct.wiphy* %wiphy, i32 0, i32 0
  %arraydecay95 = getelementptr inbounds [6 x i8], [6 x i8]* %perm_addr94, i32 0, i32 0
  %addresses96 = getelementptr inbounds %struct.wiphy, %struct.wiphy* %wiphy, i32 0, i32 2
  %11 = load %struct.mac_address*, %struct.mac_address** %addresses96, align 16, !tbaa !122
  %arrayidx = getelementptr inbounds %struct.mac_address, %struct.mac_address* %11, i64 0
  %addr = getelementptr inbounds %struct.mac_address, %struct.mac_address* %arrayidx, i32 0, i32 0
  %arraydecay97 = getelementptr inbounds [6 x i8], [6 x i8]* %addr, i32 0, i32 0
  %call98 = call i32 @memcmp(i8* %arraydecay95, i8* %arraydecay97, i64 6)
  %tobool99 = icmp ne i32 %call98, 0
  br label %land.end100

land.end100:                                      ; preds = %land.rhs93, %land.lhs.true, %if.end88
  %12 = phi i1 [ false, %land.lhs.true ], [ false, %if.end88 ], [ %tobool99, %land.rhs93 ]
  %lnot101 = xor i1 %12, true
  %lnot103 = xor i1 %lnot101, true
  %lnot.ext104 = zext i1 %lnot103 to i32
  %tobool105 = icmp ne i32 %lnot.ext104, 0
  %lnot106 = xor i1 %tobool105, true
  %lnot108 = xor i1 %lnot106, true
  %lnot.ext109 = zext i1 %lnot108 to i32
  %conv110 = sext i32 %lnot.ext109 to i64
  %expval111 = call i64 @llvm.expect.i64(i64 %conv110, i64 0)
  %tobool112 = icmp ne i64 %expval111, 0
  br i1 %tobool112, label %if.then113, label %if.end114

if.then113:                                       ; preds = %land.end100
  call void @warn_slowpath_null(i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.3, i32 0, i32 0), i32 514)
  br label %if.end114

if.end114:                                        ; preds = %if.then113, %land.end100
  %tobool116 = icmp ne i32 %lnot.ext104, 0
  %lnot117 = xor i1 %tobool116, true
  %lnot119 = xor i1 %lnot117, true
  %lnot.ext120 = zext i1 %lnot119 to i32
  %conv121 = sext i32 %lnot.ext120 to i64
  %expval122 = call i64 @llvm.expect.i64(i64 %conv121, i64 0)
  %tobool123 = icmp ne i64 %expval122, 0
  br i1 %tobool123, label %cleanup, label %if.end125

if.end125:                                        ; preds = %if.end114
  %max_acl_mac_addrs = getelementptr inbounds %struct.wiphy, %struct.wiphy* %wiphy, i32 0, i32 9
  %13 = load i16, i16* %max_acl_mac_addrs, align 2, !tbaa !124
  %conv127 = zext i16 %13 to i32
  %tobool128 = icmp ne i32 %conv127, 0
  br i1 %tobool128, label %land.rhs129, label %land.end136

land.rhs129:                                      ; preds = %if.end125
  %flags130 = getelementptr inbounds %struct.wiphy, %struct.wiphy* %wiphy, i32 0, i32 10
  %14 = load i32, i32* %flags130, align 4, !tbaa !121
  %and131 = and i32 %14, 131072
  %tobool132 = icmp ne i32 %and131, 0
  br i1 %tobool132, label %lor.rhs, label %land.end136

lor.rhs:                                          ; preds = %land.rhs129
  %ops = getelementptr inbounds %struct.cfg80211_registered_device, %struct.cfg80211_registered_device* %call, i32 0, i32 0
  %15 = load %struct.cfg80211_ops*, %struct.cfg80211_ops** %ops, align 32, !tbaa !75
  %set_mac_acl = getelementptr inbounds %struct.cfg80211_ops, %struct.cfg80211_ops* %15, i32 0, i32 77
  %16 = load i32 (%struct.wiphy*, %struct.net_device*, %struct.cfg80211_acl_data*)*, i32 (%struct.wiphy*, %struct.net_device*, %struct.cfg80211_acl_data*)** %set_mac_acl, align 8, !tbaa !125
  %tobool133 = icmp ne i32 (%struct.wiphy*, %struct.net_device*, %struct.cfg80211_acl_data*)* %16, null
  %lnot134 = xor i1 %tobool133, true
  br label %land.end136

land.end136:                                      ; preds = %land.rhs129, %lor.rhs, %if.end125
  %17 = phi i1 [ false, %if.end125 ], [ true, %land.rhs129 ], [ %lnot134, %lor.rhs ]
  %lnot137 = xor i1 %17, true
  %lnot139 = xor i1 %lnot137, true
  %lnot.ext140 = zext i1 %lnot139 to i32
  %tobool141 = icmp ne i32 %lnot.ext140, 0
  %lnot142 = xor i1 %tobool141, true
  %lnot144 = xor i1 %lnot142, true
  %lnot.ext145 = zext i1 %lnot144 to i32
  %conv146 = sext i32 %lnot.ext145 to i64
  %expval147 = call i64 @llvm.expect.i64(i64 %conv146, i64 0)
  %tobool148 = icmp ne i64 %expval147, 0
  br i1 %tobool148, label %if.then149, label %if.end150

if.then149:                                       ; preds = %land.end136
  call void @warn_slowpath_null(i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.3, i32 0, i32 0), i32 519)
  br label %if.end150

if.end150:                                        ; preds = %if.then149, %land.end136
  %tobool152 = icmp ne i32 %lnot.ext140, 0
  %lnot153 = xor i1 %tobool152, true
  %lnot155 = xor i1 %lnot153, true
  %lnot.ext156 = zext i1 %lnot155 to i32
  %conv157 = sext i32 %lnot.ext156 to i64
  %expval158 = call i64 @llvm.expect.i64(i64 %conv157, i64 0)
  %tobool159 = icmp ne i64 %expval158, 0
  br i1 %tobool159, label %cleanup, label %if.end161

if.end161:                                        ; preds = %if.end150
  %addresses162 = getelementptr inbounds %struct.wiphy, %struct.wiphy* %wiphy, i32 0, i32 2
  %18 = load %struct.mac_address*, %struct.mac_address** %addresses162, align 16, !tbaa !122
  %tobool163 = icmp ne %struct.mac_address* %18, null
  br i1 %tobool163, label %if.then164, label %if.end182

if.then164:                                       ; preds = %if.end161
  %cmp = icmp uge i64 6, 64
  %perm_addr167 = getelementptr inbounds %struct.wiphy, %struct.wiphy* %wiphy, i32 0, i32 0
  %arraydecay168 = getelementptr inbounds [6 x i8], [6 x i8]* %perm_addr167, i32 0, i32 0
  %addresses169 = getelementptr inbounds %struct.wiphy, %struct.wiphy* %wiphy, i32 0, i32 2
  %19 = load %struct.mac_address*, %struct.mac_address** %addresses169, align 16, !tbaa !122
  %arrayidx170 = getelementptr inbounds %struct.mac_address, %struct.mac_address* %19, i64 0
  %addr171 = getelementptr inbounds %struct.mac_address, %struct.mac_address* %arrayidx170, i32 0, i32 0
  %arraydecay172 = getelementptr inbounds [6 x i8], [6 x i8]* %addr171, i32 0, i32 0
  br i1 %cmp, label %if.then166, label %if.else

if.then166:                                       ; preds = %if.then164
  %call173 = call i8* @__memcpy(i8* %arraydecay168, i8* %arraydecay172, i64 6)
  br label %if.end182

if.else:                                          ; preds = %if.then164
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %arraydecay168, i8* %arraydecay172, i64 6, i32 1, i1 false)
  br label %if.end182

if.end182:                                        ; preds = %if.then166, %if.else, %if.end161
  %tobool184 = icmp ne i16 %0, 0
  %lnot185 = xor i1 %tobool184, true
  %lnot187 = xor i1 %lnot185, true
  %lnot189 = xor i1 %lnot187, true
  %lnot.ext190 = zext i1 %lnot189 to i32
  %tobool191 = icmp ne i32 %lnot.ext190, 0
  %lnot192 = xor i1 %tobool191, true
  %lnot194 = xor i1 %lnot192, true
  %lnot.ext195 = zext i1 %lnot194 to i32
  %conv196 = sext i32 %lnot.ext195 to i64
  %expval197 = call i64 @llvm.expect.i64(i64 %conv196, i64 0)
  %tobool198 = icmp ne i64 %expval197, 0
  br i1 %tobool198, label %if.then199, label %if.end200

if.then199:                                       ; preds = %if.end182
  call void @warn_slowpath_null(i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.3, i32 0, i32 0), i32 526)
  br label %if.end200

if.end200:                                        ; preds = %if.then199, %if.end182
  %tobool202 = icmp ne i32 %lnot.ext190, 0
  %lnot203 = xor i1 %tobool202, true
  %lnot205 = xor i1 %lnot203, true
  %lnot.ext206 = zext i1 %lnot205 to i32
  %conv207 = sext i32 %lnot.ext206 to i64
  %expval208 = call i64 @llvm.expect.i64(i64 %conv207, i64 0)
  %conv209 = zext i16 %0 to i32
  %and210 = and i32 %conv209, 2046
  %conv211 = trunc i32 %and210 to i16
  %conv213 = zext i16 %conv211 to i32
  %interface_modes214 = getelementptr inbounds %struct.wiphy, %struct.wiphy* %wiphy, i32 0, i32 8
  %20 = load i16, i16* %interface_modes214, align 16, !tbaa !118
  %conv215 = zext i16 %20 to i32
  %cmp216 = icmp ne i32 %conv213, %conv215
  %lnot218 = xor i1 %cmp216, true
  %lnot220 = xor i1 %lnot218, true
  %lnot.ext221 = zext i1 %lnot220 to i32
  %tobool222 = icmp ne i32 %lnot.ext221, 0
  %lnot223 = xor i1 %tobool222, true
  %lnot225 = xor i1 %lnot223, true
  %lnot.ext226 = zext i1 %lnot225 to i32
  %conv227 = sext i32 %lnot.ext226 to i64
  %expval228 = call i64 @llvm.expect.i64(i64 %conv227, i64 0)
  %tobool229 = icmp ne i64 %expval228, 0
  br i1 %tobool229, label %if.then230, label %if.end231

if.then230:                                       ; preds = %if.end200
  call void @warn_slowpath_null(i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.3, i32 0, i32 0), i32 528)
  br label %if.end231

if.end231:                                        ; preds = %if.then230, %if.end200
  %tobool233 = icmp ne i32 %lnot.ext221, 0
  %lnot234 = xor i1 %tobool233, true
  %lnot236 = xor i1 %lnot234, true
  %lnot.ext237 = zext i1 %lnot236 to i32
  %conv238 = sext i32 %lnot.ext237 to i64
  %expval239 = call i64 @llvm.expect.i64(i64 %conv238, i64 0)
  %tobool240 = icmp ne i64 %expval239, 0
  br i1 %tobool240, label %if.then241, label %if.end243

if.then241:                                       ; preds = %if.end231
  %interface_modes242 = getelementptr inbounds %struct.wiphy, %struct.wiphy* %wiphy, i32 0, i32 8
  store i16 %conv211, i16* %interface_modes242, align 16, !tbaa !118
  br label %if.end243

if.end243:                                        ; preds = %if.then241, %if.end231
  %call244 = call i32 @wiphy_verify_combinations(%struct.wiphy* %wiphy)
  %tobool245 = icmp ne i32 %call244, 0
  br i1 %tobool245, label %cleanup, label %if.end247

if.end247:                                        ; preds = %if.end243
  br label %for.cond

for.cond:                                         ; preds = %for.inc389, %if.end247
  %have_band.0 = phi i8 [ 0, %if.end247 ], [ %have_band.1, %for.inc389 ]
  %band.0 = phi i32 [ 0, %if.end247 ], [ %inc390, %for.inc389 ]
  %cmp248 = icmp ult i32 %band.0, 3
  br i1 %cmp248, label %for.body, label %for.end391

for.body:                                         ; preds = %for.cond
  %bands = getelementptr inbounds %struct.wiphy, %struct.wiphy* %wiphy, i32 0, i32 39
  %idxprom = zext i32 %band.0 to i64
  %arrayidx250 = getelementptr inbounds [3 x %struct.ieee80211_supported_band*], [3 x %struct.ieee80211_supported_band*]* %bands, i64 0, i64 %idxprom
  %21 = load %struct.ieee80211_supported_band*, %struct.ieee80211_supported_band** %arrayidx250, align 8, !tbaa !12
  %tobool251 = icmp ne %struct.ieee80211_supported_band* %21, null
  br i1 %tobool251, label %if.end253, label %for.inc389

if.end253:                                        ; preds = %for.body
  %band254 = getelementptr inbounds %struct.ieee80211_supported_band, %struct.ieee80211_supported_band* %21, i32 0, i32 2
  store i32 %band.0, i32* %band254, align 8, !tbaa !126
  %n_channels = getelementptr inbounds %struct.ieee80211_supported_band, %struct.ieee80211_supported_band* %21, i32 0, i32 3
  %22 = load i32, i32* %n_channels, align 4, !tbaa !132
  %tobool256 = icmp ne i32 %22, 0
  %lnot257 = xor i1 %tobool256, true
  %lnot259 = xor i1 %lnot257, true
  %lnot261 = xor i1 %lnot259, true
  %lnot.ext262 = zext i1 %lnot261 to i32
  %tobool263 = icmp ne i32 %lnot.ext262, 0
  %lnot264 = xor i1 %tobool263, true
  %lnot266 = xor i1 %lnot264, true
  %lnot.ext267 = zext i1 %lnot266 to i32
  %conv268 = sext i32 %lnot.ext267 to i64
  %expval269 = call i64 @llvm.expect.i64(i64 %conv268, i64 0)
  %tobool270 = icmp ne i64 %expval269, 0
  br i1 %tobool270, label %if.then271, label %if.end272

if.then271:                                       ; preds = %if.end253
  call void @warn_slowpath_null(i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.3, i32 0, i32 0), i32 542)
  br label %if.end272

if.end272:                                        ; preds = %if.then271, %if.end253
  %tobool274 = icmp ne i32 %lnot.ext262, 0
  %lnot275 = xor i1 %tobool274, true
  %lnot277 = xor i1 %lnot275, true
  %lnot.ext278 = zext i1 %lnot277 to i32
  %conv279 = sext i32 %lnot.ext278 to i64
  %expval280 = call i64 @llvm.expect.i64(i64 %conv279, i64 0)
  %tobool281 = icmp ne i64 %expval280, 0
  br i1 %tobool281, label %cleanup, label %if.end283

if.end283:                                        ; preds = %if.end272
  %cmp285 = icmp ne i32 %band.0, 2
  br i1 %cmp285, label %land.rhs287, label %land.end291

land.rhs287:                                      ; preds = %if.end283
  %n_bitrates = getelementptr inbounds %struct.ieee80211_supported_band, %struct.ieee80211_supported_band* %21, i32 0, i32 4
  %23 = load i32, i32* %n_bitrates, align 8, !tbaa !133
  %tobool288 = icmp ne i32 %23, 0
  %lnot289 = xor i1 %tobool288, true
  br label %land.end291

land.end291:                                      ; preds = %land.rhs287, %if.end283
  %24 = phi i1 [ false, %if.end283 ], [ %lnot289, %land.rhs287 ]
  %lnot292 = xor i1 %24, true
  %lnot294 = xor i1 %lnot292, true
  %lnot.ext295 = zext i1 %lnot294 to i32
  %tobool296 = icmp ne i32 %lnot.ext295, 0
  %lnot297 = xor i1 %tobool296, true
  %lnot299 = xor i1 %lnot297, true
  %lnot.ext300 = zext i1 %lnot299 to i32
  %conv301 = sext i32 %lnot.ext300 to i64
  %expval302 = call i64 @llvm.expect.i64(i64 %conv301, i64 0)
  %tobool303 = icmp ne i64 %expval302, 0
  br i1 %tobool303, label %if.then304, label %if.end305

if.then304:                                       ; preds = %land.end291
  call void @warn_slowpath_null(i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.3, i32 0, i32 0), i32 549)
  br label %if.end305

if.end305:                                        ; preds = %if.then304, %land.end291
  %tobool307 = icmp ne i32 %lnot.ext295, 0
  %lnot308 = xor i1 %tobool307, true
  %lnot310 = xor i1 %lnot308, true
  %lnot.ext311 = zext i1 %lnot310 to i32
  %conv312 = sext i32 %lnot.ext311 to i64
  %expval313 = call i64 @llvm.expect.i64(i64 %conv312, i64 0)
  %tobool314 = icmp ne i64 %expval313, 0
  br i1 %tobool314, label %cleanup, label %if.end316

if.end316:                                        ; preds = %if.end305
  %25 = load i8, i8* @cfg80211_disable_40mhz_24ghz, align 1, !tbaa !134, !range !69
  %tobool317 = trunc i8 %25 to i1
  %cmp320 = icmp eq i32 %band.0, 0
  %or.cond = and i1 %tobool317, %cmp320
  br i1 %or.cond, label %land.lhs.true322, label %if.end335

land.lhs.true322:                                 ; preds = %if.end316
  %ht_cap = getelementptr inbounds %struct.ieee80211_supported_band, %struct.ieee80211_supported_band* %21, i32 0, i32 5
  %ht_supported = getelementptr inbounds %struct.ieee80211_sta_ht_cap, %struct.ieee80211_sta_ht_cap* %ht_cap, i32 0, i32 1
  %26 = load i8, i8* %ht_supported, align 2, !tbaa !135, !range !69
  %tobool323 = trunc i8 %26 to i1
  br i1 %tobool323, label %if.then325, label %if.end335

if.then325:                                       ; preds = %land.lhs.true322
  %ht_cap326 = getelementptr inbounds %struct.ieee80211_supported_band, %struct.ieee80211_supported_band* %21, i32 0, i32 5
  %cap = getelementptr inbounds %struct.ieee80211_sta_ht_cap, %struct.ieee80211_sta_ht_cap* %ht_cap326, i32 0, i32 0
  %27 = load i16, i16* %cap, align 4, !tbaa !136
  %conv327 = zext i16 %27 to i32
  %and328 = and i32 %conv327, -3
  %conv329 = trunc i32 %and328 to i16
  store i16 %conv329, i16* %cap, align 4, !tbaa !136
  %ht_cap330 = getelementptr inbounds %struct.ieee80211_supported_band, %struct.ieee80211_supported_band* %21, i32 0, i32 5
  %cap331 = getelementptr inbounds %struct.ieee80211_sta_ht_cap, %struct.ieee80211_sta_ht_cap* %ht_cap330, i32 0, i32 0
  %28 = load i16, i16* %cap331, align 4, !tbaa !136
  %conv332 = zext i16 %28 to i32
  %and333 = and i32 %conv332, -65
  %conv334 = trunc i32 %and333 to i16
  store i16 %conv334, i16* %cap331, align 4, !tbaa !136
  br label %if.end335

if.end335:                                        ; preds = %if.then325, %land.lhs.true322, %if.end316
  %n_bitrates337 = getelementptr inbounds %struct.ieee80211_supported_band, %struct.ieee80211_supported_band* %21, i32 0, i32 4
  %29 = load i32, i32* %n_bitrates337, align 8, !tbaa !133
  %cmp338 = icmp sgt i32 %29, 32
  %lnot340 = xor i1 %cmp338, true
  %lnot342 = xor i1 %lnot340, true
  %lnot.ext343 = zext i1 %lnot342 to i32
  %tobool344 = icmp ne i32 %lnot.ext343, 0
  %lnot345 = xor i1 %tobool344, true
  %lnot347 = xor i1 %lnot345, true
  %lnot.ext348 = zext i1 %lnot347 to i32
  %conv349 = sext i32 %lnot.ext348 to i64
  %expval350 = call i64 @llvm.expect.i64(i64 %conv349, i64 0)
  %tobool351 = icmp ne i64 %expval350, 0
  br i1 %tobool351, label %if.then352, label %if.end353

if.then352:                                       ; preds = %if.end335
  call void @warn_slowpath_null(i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.3, i32 0, i32 0), i32 569)
  br label %if.end353

if.end353:                                        ; preds = %if.then352, %if.end335
  %tobool355 = icmp ne i32 %lnot.ext343, 0
  %lnot356 = xor i1 %tobool355, true
  %lnot358 = xor i1 %lnot356, true
  %lnot.ext359 = zext i1 %lnot358 to i32
  %conv360 = sext i32 %lnot.ext359 to i64
  %expval361 = call i64 @llvm.expect.i64(i64 %conv360, i64 0)
  %tobool362 = icmp ne i64 %expval361, 0
  br i1 %tobool362, label %cleanup, label %if.end364

if.end364:                                        ; preds = %if.end353
  br label %for.cond365

for.cond365:                                      ; preds = %for.body369, %if.end364
  %i.0 = phi i32 [ 0, %if.end364 ], [ %inc, %for.body369 ]
  %n_channels366 = getelementptr inbounds %struct.ieee80211_supported_band, %struct.ieee80211_supported_band* %21, i32 0, i32 3
  %30 = load i32, i32* %n_channels366, align 4, !tbaa !132
  %cmp367 = icmp slt i32 %i.0, %30
  br i1 %cmp367, label %for.body369, label %for.inc389

for.body369:                                      ; preds = %for.cond365
  %channels = getelementptr inbounds %struct.ieee80211_supported_band, %struct.ieee80211_supported_band* %21, i32 0, i32 0
  %31 = load %struct.ieee80211_channel*, %struct.ieee80211_channel** %channels, align 8, !tbaa !137
  %idxprom370 = sext i32 %i.0 to i64
  %arrayidx371 = getelementptr inbounds %struct.ieee80211_channel, %struct.ieee80211_channel* %31, i64 %idxprom370
  %flags372 = getelementptr inbounds %struct.ieee80211_channel, %struct.ieee80211_channel* %arrayidx371, i32 0, i32 3
  %32 = load i32, i32* %flags372, align 8, !tbaa !138
  %channels373 = getelementptr inbounds %struct.ieee80211_supported_band, %struct.ieee80211_supported_band* %21, i32 0, i32 0
  %33 = load %struct.ieee80211_channel*, %struct.ieee80211_channel** %channels373, align 8, !tbaa !137
  %idxprom374 = sext i32 %i.0 to i64
  %arrayidx375 = getelementptr inbounds %struct.ieee80211_channel, %struct.ieee80211_channel* %33, i64 %idxprom374
  %orig_flags = getelementptr inbounds %struct.ieee80211_channel, %struct.ieee80211_channel* %arrayidx375, i32 0, i32 8
  store i32 %32, i32* %orig_flags, align 4, !tbaa !140
  %channels376 = getelementptr inbounds %struct.ieee80211_supported_band, %struct.ieee80211_supported_band* %21, i32 0, i32 0
  %34 = load %struct.ieee80211_channel*, %struct.ieee80211_channel** %channels376, align 8, !tbaa !137
  %idxprom377 = sext i32 %i.0 to i64
  %arrayidx378 = getelementptr inbounds %struct.ieee80211_channel, %struct.ieee80211_channel* %34, i64 %idxprom377
  %orig_mag = getelementptr inbounds %struct.ieee80211_channel, %struct.ieee80211_channel* %arrayidx378, i32 0, i32 9
  store i32 2147483647, i32* %orig_mag, align 8, !tbaa !141
  %channels379 = getelementptr inbounds %struct.ieee80211_supported_band, %struct.ieee80211_supported_band* %21, i32 0, i32 0
  %35 = load %struct.ieee80211_channel*, %struct.ieee80211_channel** %channels379, align 8, !tbaa !137
  %idxprom380 = sext i32 %i.0 to i64
  %arrayidx381 = getelementptr inbounds %struct.ieee80211_channel, %struct.ieee80211_channel* %35, i64 %idxprom380
  %max_power = getelementptr inbounds %struct.ieee80211_channel, %struct.ieee80211_channel* %arrayidx381, i32 0, i32 5
  %36 = load i32, i32* %max_power, align 8, !tbaa !142
  %channels382 = getelementptr inbounds %struct.ieee80211_supported_band, %struct.ieee80211_supported_band* %21, i32 0, i32 0
  %37 = load %struct.ieee80211_channel*, %struct.ieee80211_channel** %channels382, align 8, !tbaa !137
  %idxprom383 = sext i32 %i.0 to i64
  %arrayidx384 = getelementptr inbounds %struct.ieee80211_channel, %struct.ieee80211_channel* %37, i64 %idxprom383
  %orig_mpwr = getelementptr inbounds %struct.ieee80211_channel, %struct.ieee80211_channel* %arrayidx384, i32 0, i32 10
  store i32 %36, i32* %orig_mpwr, align 4, !tbaa !143
  %channels385 = getelementptr inbounds %struct.ieee80211_supported_band, %struct.ieee80211_supported_band* %21, i32 0, i32 0
  %38 = load %struct.ieee80211_channel*, %struct.ieee80211_channel** %channels385, align 8, !tbaa !137
  %idxprom386 = sext i32 %i.0 to i64
  %arrayidx387 = getelementptr inbounds %struct.ieee80211_channel, %struct.ieee80211_channel* %38, i64 %idxprom386
  %band388 = getelementptr inbounds %struct.ieee80211_channel, %struct.ieee80211_channel* %arrayidx387, i32 0, i32 0
  store i32 %band.0, i32* %band388, align 8, !tbaa !144
  %inc = add nsw i32 %i.0, 1
  br label %for.cond365

for.inc389:                                       ; preds = %for.cond365, %for.body
  %have_band.1 = phi i8 [ %have_band.0, %for.body ], [ 1, %for.cond365 ]
  %inc390 = add i32 %band.0, 1
  br label %for.cond

for.end391:                                       ; preds = %for.cond
  %tobool392 = trunc i8 %have_band.0 to i1
  br i1 %tobool392, label %if.end413, label %if.then393

if.then393:                                       ; preds = %for.end391
  %tobool395 = icmp ne i32 1, 0
  %lnot396 = xor i1 %tobool395, true
  %lnot398 = xor i1 %lnot396, true
  %lnot.ext399 = zext i1 %lnot398 to i32
  %conv400 = sext i32 %lnot.ext399 to i64
  %expval401 = call i64 @llvm.expect.i64(i64 %conv400, i64 0)
  %tobool402 = icmp ne i64 %expval401, 0
  br i1 %tobool402, label %if.then403, label %if.end404

if.then403:                                       ; preds = %if.then393
  call void @warn_slowpath_null(i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.3, i32 0, i32 0), i32 585)
  br label %if.end404

if.end404:                                        ; preds = %if.then403, %if.then393
  %tobool406 = icmp ne i32 1, 0
  %lnot407 = xor i1 %tobool406, true
  %lnot409 = xor i1 %lnot407, true
  %lnot.ext410 = zext i1 %lnot409 to i32
  %conv411 = sext i32 %lnot.ext410 to i64
  %expval412 = call i64 @llvm.expect.i64(i64 %conv411, i64 0)
  br label %cleanup

if.end413:                                        ; preds = %for.end391
  %wiphy414 = getelementptr inbounds %struct.cfg80211_registered_device, %struct.cfg80211_registered_device* %call, i32 0, i32 34
  %wowlan415 = getelementptr inbounds %struct.wiphy, %struct.wiphy* %wiphy414, i32 0, i32 29
  %n_patterns = getelementptr inbounds %struct.wiphy_wowlan_support, %struct.wiphy_wowlan_support* %wowlan415, i32 0, i32 1
  %39 = load i32, i32* %n_patterns, align 4, !tbaa !145
  %tobool416 = icmp ne i32 %39, 0
  br i1 %tobool416, label %if.then417, label %if.end456

if.then417:                                       ; preds = %if.end413
  %wiphy419 = getelementptr inbounds %struct.cfg80211_registered_device, %struct.cfg80211_registered_device* %call, i32 0, i32 34
  %wowlan420 = getelementptr inbounds %struct.wiphy, %struct.wiphy* %wiphy419, i32 0, i32 29
  %pattern_min_len = getelementptr inbounds %struct.wiphy_wowlan_support, %struct.wiphy_wowlan_support* %wowlan420, i32 0, i32 3
  %40 = load i32, i32* %pattern_min_len, align 4, !tbaa !146
  %tobool421 = icmp ne i32 %40, 0
  br i1 %tobool421, label %lor.rhs422, label %lor.end430

lor.rhs422:                                       ; preds = %if.then417
  %wiphy423 = getelementptr inbounds %struct.cfg80211_registered_device, %struct.cfg80211_registered_device* %call, i32 0, i32 34
  %wowlan424 = getelementptr inbounds %struct.wiphy, %struct.wiphy* %wiphy423, i32 0, i32 29
  %pattern_min_len425 = getelementptr inbounds %struct.wiphy_wowlan_support, %struct.wiphy_wowlan_support* %wowlan424, i32 0, i32 3
  %41 = load i32, i32* %pattern_min_len425, align 4, !tbaa !146
  %wiphy426 = getelementptr inbounds %struct.cfg80211_registered_device, %struct.cfg80211_registered_device* %call, i32 0, i32 34
  %wowlan427 = getelementptr inbounds %struct.wiphy, %struct.wiphy* %wiphy426, i32 0, i32 29
  %pattern_max_len = getelementptr inbounds %struct.wiphy_wowlan_support, %struct.wiphy_wowlan_support* %wowlan427, i32 0, i32 2
  %42 = load i32, i32* %pattern_max_len, align 8, !tbaa !147
  %cmp428 = icmp sgt i32 %41, %42
  br label %lor.end430

lor.end430:                                       ; preds = %lor.rhs422, %if.then417
  %43 = phi i1 [ true, %if.then417 ], [ %cmp428, %lor.rhs422 ]
  %lnot431 = xor i1 %43, true
  %lnot433 = xor i1 %lnot431, true
  %lnot.ext434 = zext i1 %lnot433 to i32
  %tobool435 = icmp ne i32 %lnot.ext434, 0
  %lnot436 = xor i1 %tobool435, true
  %lnot438 = xor i1 %lnot436, true
  %lnot.ext439 = zext i1 %lnot438 to i32
  %conv440 = sext i32 %lnot.ext439 to i64
  %expval441 = call i64 @llvm.expect.i64(i64 %conv440, i64 0)
  %tobool442 = icmp ne i64 %expval441, 0
  br i1 %tobool442, label %if.then443, label %if.end444

if.then443:                                       ; preds = %lor.end430
  call void @warn_slowpath_null(i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.3, i32 0, i32 0), i32 593)
  br label %if.end444

if.end444:                                        ; preds = %if.then443, %lor.end430
  %tobool446 = icmp ne i32 %lnot.ext434, 0
  %lnot447 = xor i1 %tobool446, true
  %lnot449 = xor i1 %lnot447, true
  %lnot.ext450 = zext i1 %lnot449 to i32
  %conv451 = sext i32 %lnot.ext450 to i64
  %expval452 = call i64 @llvm.expect.i64(i64 %conv451, i64 0)
  %tobool453 = icmp ne i64 %expval452, 0
  br i1 %tobool453, label %cleanup, label %if.end456

if.end456:                                        ; preds = %if.end444, %if.end413
  call void @ieee80211_set_bitrate_flags(%struct.wiphy* %wiphy)
  call void @mutex_lock(%struct.mutex* @cfg80211_mutex)
  %wiphy457 = getelementptr inbounds %struct.cfg80211_registered_device, %struct.cfg80211_registered_device* %call, i32 0, i32 34
  %dev = getelementptr inbounds %struct.wiphy, %struct.wiphy* %wiphy457, i32 0, i32 42
  %call458 = call i32 @device_add(%struct.device* %dev)
  %tobool459 = icmp ne i32 %call458, 0
  br i1 %tobool459, label %if.then460, label %if.end461

if.then460:                                       ; preds = %if.end456
  call void @mutex_unlock(%struct.mutex* @cfg80211_mutex)
  br label %cleanup

if.end461:                                        ; preds = %if.end456
  call void @wiphy_regulatory_register(%struct.wiphy* %wiphy)
  %list = getelementptr inbounds %struct.cfg80211_registered_device, %struct.cfg80211_registered_device* %call, i32 0, i32 1
  call void @list_add_rcu(%struct.list_head* %list, %struct.list_head* @cfg80211_rdev_list)
  %44 = load i32, i32* @cfg80211_rdev_list_generation, align 4, !tbaa !55
  %inc462 = add nsw i32 %44, 1
  store i32 %inc462, i32* @cfg80211_rdev_list_generation, align 4, !tbaa !55
  %wiphy463 = getelementptr inbounds %struct.cfg80211_registered_device, %struct.cfg80211_registered_device* %call, i32 0, i32 34
  %call464 = call i8* @wiphy_name(%struct.wiphy* %wiphy463)
  %45 = load %struct.dentry*, %struct.dentry** @ieee80211_debugfs_dir, align 8, !tbaa !12
  %call465 = call %struct.dentry* @debugfs_create_dir(i8* %call464, %struct.dentry* %45)
  %wiphy466 = getelementptr inbounds %struct.cfg80211_registered_device, %struct.cfg80211_registered_device* %call, i32 0, i32 34
  %debugfsdir = getelementptr inbounds %struct.wiphy, %struct.wiphy* %wiphy466, i32 0, i32 44
  store %struct.dentry* %call465, %struct.dentry** %debugfsdir, align 16, !tbaa !56
  %wiphy467 = getelementptr inbounds %struct.cfg80211_registered_device, %struct.cfg80211_registered_device* %call, i32 0, i32 34
  %debugfsdir468 = getelementptr inbounds %struct.wiphy, %struct.wiphy* %wiphy467, i32 0, i32 44
  %46 = load %struct.dentry*, %struct.dentry** %debugfsdir468, align 16, !tbaa !56
  %47 = bitcast %struct.dentry* %46 to i8*
  %call469 = call i64 @IS_ERR(i8* %47)
  %tobool470 = icmp ne i64 %call469, 0
  br i1 %tobool470, label %if.then471, label %if.end474

if.then471:                                       ; preds = %if.end461
  %wiphy472 = getelementptr inbounds %struct.cfg80211_registered_device, %struct.cfg80211_registered_device* %call, i32 0, i32 34
  %debugfsdir473 = getelementptr inbounds %struct.wiphy, %struct.wiphy* %wiphy472, i32 0, i32 44
  store %struct.dentry* null, %struct.dentry** %debugfsdir473, align 16, !tbaa !56
  br label %if.end474

if.end474:                                        ; preds = %if.then471, %if.end461
  %flags475 = getelementptr inbounds %struct.wiphy, %struct.wiphy* %wiphy, i32 0, i32 10
  %48 = load i32, i32* %flags475, align 4, !tbaa !121
  %and476 = and i32 %48, 1
  %tobool477 = icmp ne i32 %and476, 0
  br i1 %tobool477, label %if.then478, label %if.end483

if.then478:                                       ; preds = %if.end474
  %49 = bitcast %struct.regulatory_request* %request to i8*
  call void @llvm.lifetime.start.p0i8(i64 56, i8* %49) #6
  %call479 = call i32 @get_wiphy_idx(%struct.wiphy* %wiphy)
  %wiphy_idx = getelementptr inbounds %struct.regulatory_request, %struct.regulatory_request* %request, i32 0, i32 1
  store i32 %call479, i32* %wiphy_idx, align 8, !tbaa !148
  %initiator = getelementptr inbounds %struct.regulatory_request, %struct.regulatory_request* %request, i32 0, i32 2
  store i32 2, i32* %initiator, align 4, !tbaa !151
  %alpha2 = getelementptr inbounds %struct.regulatory_request, %struct.regulatory_request* %request, i32 0, i32 4
  %arrayidx480 = getelementptr inbounds [2 x i8], [2 x i8]* %alpha2, i64 0, i64 0
  store i8 57, i8* %arrayidx480, align 4, !tbaa !97
  %alpha2481 = getelementptr inbounds %struct.regulatory_request, %struct.regulatory_request* %request, i32 0, i32 4
  %arrayidx482 = getelementptr inbounds [2 x i8], [2 x i8]* %alpha2481, i64 0, i64 1
  store i8 57, i8* %arrayidx482, align 1, !tbaa !97
  call void @nl80211_send_reg_change_event(%struct.regulatory_request* %request)
  %50 = bitcast %struct.regulatory_request* %request to i8*
  call void @llvm.lifetime.end.p0i8(i64 56, i8* %50) #6
  br label %if.end483

if.end483:                                        ; preds = %if.then478, %if.end474
  call void @cfg80211_debugfs_rdev_add(%struct.cfg80211_registered_device* %call)
  call void @mutex_unlock(%struct.mutex* @cfg80211_mutex)
  %rfkill = getelementptr inbounds %struct.cfg80211_registered_device, %struct.cfg80211_registered_device* %call, i32 0, i32 4
  %51 = load %struct.rfkill*, %struct.rfkill** %rfkill, align 8, !tbaa !109
  %call484 = call i32 @rfkill_register(%struct.rfkill* %51)
  %tobool485 = icmp ne i32 %call484, 0
  br i1 %tobool485, label %if.then486, label %if.end492

if.then486:                                       ; preds = %if.end483
  %wiphy487 = getelementptr inbounds %struct.cfg80211_registered_device, %struct.cfg80211_registered_device* %call, i32 0, i32 34
  %dev488 = getelementptr inbounds %struct.wiphy, %struct.wiphy* %wiphy487, i32 0, i32 42
  call void @device_del(%struct.device* %dev488)
  call void @mutex_lock(%struct.mutex* @cfg80211_mutex)
  %wiphy489 = getelementptr inbounds %struct.cfg80211_registered_device, %struct.cfg80211_registered_device* %call, i32 0, i32 34
  %debugfsdir490 = getelementptr inbounds %struct.wiphy, %struct.wiphy* %wiphy489, i32 0, i32 44
  %52 = load %struct.dentry*, %struct.dentry** %debugfsdir490, align 16, !tbaa !56
  call void @debugfs_remove_recursive(%struct.dentry* %52)
  %list491 = getelementptr inbounds %struct.cfg80211_registered_device, %struct.cfg80211_registered_device* %call, i32 0, i32 1
  call void @list_del_rcu(%struct.list_head* %list491)
  call void @wiphy_regulatory_deregister(%struct.wiphy* %wiphy)
  call void @mutex_unlock(%struct.mutex* @cfg80211_mutex)
  br label %cleanup

if.end492:                                        ; preds = %if.end483
  call void @rtnl_lock()
  %wiphy493 = getelementptr inbounds %struct.cfg80211_registered_device, %struct.cfg80211_registered_device* %call, i32 0, i32 34
  %registered = getelementptr inbounds %struct.wiphy, %struct.wiphy* %wiphy493, i32 0, i32 43
  store i8 1, i8* %registered, align 8, !tbaa !152
  call void @rtnl_unlock()
  br label %cleanup

cleanup:                                          ; preds = %if.end444, %if.end353, %if.end305, %if.end272, %if.end243, %if.end150, %if.end114, %if.end77, %if.end45, %if.end, %if.end492, %if.then486, %if.then460, %if.end404
  %retval.0 = phi i32 [ %call458, %if.then460 ], [ %call484, %if.then486 ], [ 0, %if.end492 ], [ -22, %if.end404 ], [ -22, %if.end ], [ -22, %if.end45 ], [ -22, %if.end77 ], [ -22, %if.end114 ], [ -22, %if.end150 ], [ %call244, %if.end243 ], [ -22, %if.end272 ], [ -22, %if.end305 ], [ -22, %if.end353 ], [ -22, %if.end444 ]
  ret i32 %retval.0
}

; Function Attrs: inlinehint nounwind uwtable
define internal zeroext i1 @is_zero_ether_addr(i8* %addr) #0 {
entry:
  %arrayidx = getelementptr inbounds i8, i8* %addr, i64 0
  %0 = load i8, i8* %arrayidx, align 1, !tbaa !97
  %conv = zext i8 %0 to i32
  %arrayidx1 = getelementptr inbounds i8, i8* %addr, i64 1
  %1 = load i8, i8* %arrayidx1, align 1, !tbaa !97
  %conv2 = zext i8 %1 to i32
  %or = or i32 %conv, %conv2
  %arrayidx3 = getelementptr inbounds i8, i8* %addr, i64 2
  %2 = load i8, i8* %arrayidx3, align 1, !tbaa !97
  %conv4 = zext i8 %2 to i32
  %or5 = or i32 %or, %conv4
  %arrayidx6 = getelementptr inbounds i8, i8* %addr, i64 3
  %3 = load i8, i8* %arrayidx6, align 1, !tbaa !97
  %conv7 = zext i8 %3 to i32
  %or8 = or i32 %or5, %conv7
  %arrayidx9 = getelementptr inbounds i8, i8* %addr, i64 4
  %4 = load i8, i8* %arrayidx9, align 1, !tbaa !97
  %conv10 = zext i8 %4 to i32
  %or11 = or i32 %or8, %conv10
  %arrayidx12 = getelementptr inbounds i8, i8* %addr, i64 5
  %5 = load i8, i8* %arrayidx12, align 1, !tbaa !97
  %conv13 = zext i8 %5 to i32
  %or14 = or i32 %or11, %conv13
  %tobool = icmp ne i32 %or14, 0
  %lnot = xor i1 %tobool, true
  ret i1 %lnot
}

declare i32 @memcmp(i8*, i8*, i64) #3

declare i8* @__memcpy(i8*, i8*, i64) #3

; Function Attrs: nounwind uwtable
define internal i32 @wiphy_verify_combinations(%struct.wiphy* %wiphy) #1 {
entry:
  br label %for.cond

for.cond:                                         ; preds = %for.inc355, %entry
  %i.0 = phi i32 [ 0, %entry ], [ %inc356, %for.inc355 ]
  %retval.0 = phi i32 [ undef, %entry ], [ %retval.3, %for.inc355 ]
  %n_iface_combinations = getelementptr inbounds %struct.wiphy, %struct.wiphy* %wiphy, i32 0, i32 5
  %0 = load i32, i32* %n_iface_combinations, align 8, !tbaa !153
  %cmp = icmp slt i32 %i.0, %0
  br i1 %cmp, label %for.body, label %cleanup358

for.body:                                         ; preds = %for.cond
  %iface_combinations = getelementptr inbounds %struct.wiphy, %struct.wiphy* %wiphy, i32 0, i32 4
  %1 = load %struct.ieee80211_iface_combination*, %struct.ieee80211_iface_combination** %iface_combinations, align 32, !tbaa !154
  %idxprom = sext i32 %i.0 to i64
  %arrayidx = getelementptr inbounds %struct.ieee80211_iface_combination, %struct.ieee80211_iface_combination* %1, i64 %idxprom
  %max_interfaces = getelementptr inbounds %struct.ieee80211_iface_combination, %struct.ieee80211_iface_combination* %arrayidx, i32 0, i32 2
  %2 = load i16, i16* %max_interfaces, align 4, !tbaa !155
  %conv = zext i16 %2 to i32
  %cmp1 = icmp slt i32 %conv, 2
  br i1 %cmp1, label %land.rhs, label %land.end

land.rhs:                                         ; preds = %for.body
  %radar_detect_widths = getelementptr inbounds %struct.ieee80211_iface_combination, %struct.ieee80211_iface_combination* %arrayidx, i32 0, i32 5
  %3 = load i8, i8* %radar_detect_widths, align 8, !tbaa !157
  %tobool = icmp ne i8 %3, 0
  %lnot = xor i1 %tobool, true
  br label %land.end

land.end:                                         ; preds = %land.rhs, %for.body
  %4 = phi i1 [ false, %for.body ], [ %lnot, %land.rhs ]
  %lnot3 = xor i1 %4, true
  %lnot4 = xor i1 %lnot3, true
  %lnot.ext = zext i1 %lnot4 to i32
  %tobool5 = icmp ne i32 %lnot.ext, 0
  %lnot6 = xor i1 %tobool5, true
  %lnot8 = xor i1 %lnot6, true
  %lnot.ext9 = zext i1 %lnot8 to i32
  %conv10 = sext i32 %lnot.ext9 to i64
  %expval = call i64 @llvm.expect.i64(i64 %conv10, i64 0)
  %tobool11 = icmp ne i64 %expval, 0
  br i1 %tobool11, label %if.then, label %if.end

if.then:                                          ; preds = %land.end
  call void @warn_slowpath_null(i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.3, i32 0, i32 0), i32 425)
  br label %if.end

if.end:                                           ; preds = %if.then, %land.end
  %tobool12 = icmp ne i32 %lnot.ext, 0
  %lnot13 = xor i1 %tobool12, true
  %lnot15 = xor i1 %lnot13, true
  %lnot.ext16 = zext i1 %lnot15 to i32
  %conv17 = sext i32 %lnot.ext16 to i64
  %expval18 = call i64 @llvm.expect.i64(i64 %conv17, i64 0)
  %tobool19 = icmp ne i64 %expval18, 0
  br i1 %tobool19, label %cleanup351, label %if.end21

if.end21:                                         ; preds = %if.end
  %num_different_channels = getelementptr inbounds %struct.ieee80211_iface_combination, %struct.ieee80211_iface_combination* %arrayidx, i32 0, i32 1
  %5 = load i32, i32* %num_different_channels, align 8, !tbaa !158
  %tobool23 = icmp ne i32 %5, 0
  %lnot24 = xor i1 %tobool23, true
  %lnot26 = xor i1 %lnot24, true
  %lnot28 = xor i1 %lnot26, true
  %lnot.ext29 = zext i1 %lnot28 to i32
  %tobool30 = icmp ne i32 %lnot.ext29, 0
  %lnot31 = xor i1 %tobool30, true
  %lnot33 = xor i1 %lnot31, true
  %lnot.ext34 = zext i1 %lnot33 to i32
  %conv35 = sext i32 %lnot.ext34 to i64
  %expval36 = call i64 @llvm.expect.i64(i64 %conv35, i64 0)
  %tobool37 = icmp ne i64 %expval36, 0
  br i1 %tobool37, label %if.then38, label %if.end39

if.then38:                                        ; preds = %if.end21
  call void @warn_slowpath_null(i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.3, i32 0, i32 0), i32 429)
  br label %if.end39

if.end39:                                         ; preds = %if.then38, %if.end21
  %tobool41 = icmp ne i32 %lnot.ext29, 0
  %lnot42 = xor i1 %tobool41, true
  %lnot44 = xor i1 %lnot42, true
  %lnot.ext45 = zext i1 %lnot44 to i32
  %conv46 = sext i32 %lnot.ext45 to i64
  %expval47 = call i64 @llvm.expect.i64(i64 %conv46, i64 0)
  %tobool48 = icmp ne i64 %expval47, 0
  br i1 %tobool48, label %cleanup351, label %if.end50

if.end50:                                         ; preds = %if.end39
  %num_different_channels52 = getelementptr inbounds %struct.ieee80211_iface_combination, %struct.ieee80211_iface_combination* %arrayidx, i32 0, i32 1
  %6 = load i32, i32* %num_different_channels52, align 8, !tbaa !158
  %cmp53 = icmp ugt i32 %6, 10
  %lnot55 = xor i1 %cmp53, true
  %lnot57 = xor i1 %lnot55, true
  %lnot.ext58 = zext i1 %lnot57 to i32
  %tobool59 = icmp ne i32 %lnot.ext58, 0
  %lnot60 = xor i1 %tobool59, true
  %lnot62 = xor i1 %lnot60, true
  %lnot.ext63 = zext i1 %lnot62 to i32
  %conv64 = sext i32 %lnot.ext63 to i64
  %expval65 = call i64 @llvm.expect.i64(i64 %conv64, i64 0)
  %tobool66 = icmp ne i64 %expval65, 0
  br i1 %tobool66, label %if.then67, label %if.end68

if.then67:                                        ; preds = %if.end50
  call void @warn_slowpath_null(i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.3, i32 0, i32 0), i32 437)
  br label %if.end68

if.end68:                                         ; preds = %if.then67, %if.end50
  %tobool70 = icmp ne i32 %lnot.ext58, 0
  %lnot71 = xor i1 %tobool70, true
  %lnot73 = xor i1 %lnot71, true
  %lnot.ext74 = zext i1 %lnot73 to i32
  %conv75 = sext i32 %lnot.ext74 to i64
  %expval76 = call i64 @llvm.expect.i64(i64 %conv75, i64 0)
  %tobool77 = icmp ne i64 %expval76, 0
  br i1 %tobool77, label %cleanup351, label %if.end79

if.end79:                                         ; preds = %if.end68
  %radar_detect_widths81 = getelementptr inbounds %struct.ieee80211_iface_combination, %struct.ieee80211_iface_combination* %arrayidx, i32 0, i32 5
  %7 = load i8, i8* %radar_detect_widths81, align 8, !tbaa !157
  %conv82 = zext i8 %7 to i32
  %tobool83 = icmp ne i32 %conv82, 0
  br i1 %tobool83, label %land.rhs84, label %land.end88

land.rhs84:                                       ; preds = %if.end79
  %num_different_channels85 = getelementptr inbounds %struct.ieee80211_iface_combination, %struct.ieee80211_iface_combination* %arrayidx, i32 0, i32 1
  %8 = load i32, i32* %num_different_channels85, align 8, !tbaa !158
  %cmp86 = icmp ugt i32 %8, 1
  br label %land.end88

land.end88:                                       ; preds = %land.rhs84, %if.end79
  %9 = phi i1 [ false, %if.end79 ], [ %cmp86, %land.rhs84 ]
  %lnot89 = xor i1 %9, true
  %lnot91 = xor i1 %lnot89, true
  %lnot.ext92 = zext i1 %lnot91 to i32
  %tobool93 = icmp ne i32 %lnot.ext92, 0
  %lnot94 = xor i1 %tobool93, true
  %lnot96 = xor i1 %lnot94, true
  %lnot.ext97 = zext i1 %lnot96 to i32
  %conv98 = sext i32 %lnot.ext97 to i64
  %expval99 = call i64 @llvm.expect.i64(i64 %conv98, i64 0)
  %tobool100 = icmp ne i64 %expval99, 0
  br i1 %tobool100, label %if.then101, label %if.end102

if.then101:                                       ; preds = %land.end88
  call void @warn_slowpath_null(i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.3, i32 0, i32 0), i32 442)
  br label %if.end102

if.end102:                                        ; preds = %if.then101, %land.end88
  %tobool104 = icmp ne i32 %lnot.ext92, 0
  %lnot105 = xor i1 %tobool104, true
  %lnot107 = xor i1 %lnot105, true
  %lnot.ext108 = zext i1 %lnot107 to i32
  %conv109 = sext i32 %lnot.ext108 to i64
  %expval110 = call i64 @llvm.expect.i64(i64 %conv109, i64 0)
  %tobool111 = icmp ne i64 %expval110, 0
  br i1 %tobool111, label %cleanup351, label %if.end113

if.end113:                                        ; preds = %if.end102
  %n_limits = getelementptr inbounds %struct.ieee80211_iface_combination, %struct.ieee80211_iface_combination* %arrayidx, i32 0, i32 3
  %10 = load i8, i8* %n_limits, align 2, !tbaa !159
  %tobool115 = icmp ne i8 %10, 0
  %lnot116 = xor i1 %tobool115, true
  %lnot118 = xor i1 %lnot116, true
  %lnot120 = xor i1 %lnot118, true
  %lnot.ext121 = zext i1 %lnot120 to i32
  %tobool122 = icmp ne i32 %lnot.ext121, 0
  %lnot123 = xor i1 %tobool122, true
  %lnot125 = xor i1 %lnot123, true
  %lnot.ext126 = zext i1 %lnot125 to i32
  %conv127 = sext i32 %lnot.ext126 to i64
  %expval128 = call i64 @llvm.expect.i64(i64 %conv127, i64 0)
  %tobool129 = icmp ne i64 %expval128, 0
  br i1 %tobool129, label %if.then130, label %if.end131

if.then130:                                       ; preds = %if.end113
  call void @warn_slowpath_null(i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.3, i32 0, i32 0), i32 445)
  br label %if.end131

if.end131:                                        ; preds = %if.then130, %if.end113
  %tobool133 = icmp ne i32 %lnot.ext121, 0
  %lnot134 = xor i1 %tobool133, true
  %lnot136 = xor i1 %lnot134, true
  %lnot.ext137 = zext i1 %lnot136 to i32
  %conv138 = sext i32 %lnot.ext137 to i64
  %expval139 = call i64 @llvm.expect.i64(i64 %conv138, i64 0)
  %tobool140 = icmp ne i64 %expval139, 0
  br i1 %tobool140, label %cleanup351, label %if.end142

if.end142:                                        ; preds = %if.end131
  br label %for.cond143

for.cond143:                                      ; preds = %for.inc, %if.end142
  %cnt.0 = phi i32 [ 0, %if.end142 ], [ %cnt.1, %for.inc ]
  %j.0 = phi i32 [ 0, %if.end142 ], [ %inc, %for.inc ]
  %all_iftypes.0 = phi i16 [ 0, %if.end142 ], [ %all_iftypes.1, %for.inc ]
  %retval.1 = phi i32 [ %retval.0, %if.end142 ], [ %retval.2, %for.inc ]
  %n_limits144 = getelementptr inbounds %struct.ieee80211_iface_combination, %struct.ieee80211_iface_combination* %arrayidx, i32 0, i32 3
  %11 = load i8, i8* %n_limits144, align 2, !tbaa !159
  %conv145 = zext i8 %11 to i32
  %cmp146 = icmp slt i32 %j.0, %conv145
  br i1 %cmp146, label %for.body148, label %for.end

for.body148:                                      ; preds = %for.cond143
  %limits = getelementptr inbounds %struct.ieee80211_iface_combination, %struct.ieee80211_iface_combination* %arrayidx, i32 0, i32 0
  %12 = load %struct.ieee80211_iface_limit*, %struct.ieee80211_iface_limit** %limits, align 8, !tbaa !160
  %idxprom149 = sext i32 %j.0 to i64
  %arrayidx150 = getelementptr inbounds %struct.ieee80211_iface_limit, %struct.ieee80211_iface_limit* %12, i64 %idxprom149
  %types151 = getelementptr inbounds %struct.ieee80211_iface_limit, %struct.ieee80211_iface_limit* %arrayidx150, i32 0, i32 1
  %13 = load i16, i16* %types151, align 2, !tbaa !161
  %conv153 = zext i16 %13 to i32
  %conv154 = zext i16 %all_iftypes.0 to i32
  %and = and i32 %conv153, %conv154
  %tobool155 = icmp ne i32 %and, 0
  %lnot156 = xor i1 %tobool155, true
  %lnot158 = xor i1 %lnot156, true
  %lnot.ext159 = zext i1 %lnot158 to i32
  %tobool160 = icmp ne i32 %lnot.ext159, 0
  %lnot161 = xor i1 %tobool160, true
  %lnot163 = xor i1 %lnot161, true
  %lnot.ext164 = zext i1 %lnot163 to i32
  %conv165 = sext i32 %lnot.ext164 to i64
  %expval166 = call i64 @llvm.expect.i64(i64 %conv165, i64 0)
  %tobool167 = icmp ne i64 %expval166, 0
  br i1 %tobool167, label %if.then168, label %if.end169

if.then168:                                       ; preds = %for.body148
  call void @warn_slowpath_null(i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.3, i32 0, i32 0), i32 455)
  br label %if.end169

if.end169:                                        ; preds = %if.then168, %for.body148
  %tobool171 = icmp ne i32 %lnot.ext159, 0
  %lnot172 = xor i1 %tobool171, true
  %lnot174 = xor i1 %lnot172, true
  %lnot.ext175 = zext i1 %lnot174 to i32
  %conv176 = sext i32 %lnot.ext175 to i64
  %expval177 = call i64 @llvm.expect.i64(i64 %conv176, i64 0)
  %tobool178 = icmp ne i64 %expval177, 0
  br i1 %tobool178, label %cleanup, label %if.end180

if.end180:                                        ; preds = %if.end169
  %conv181 = zext i16 %13 to i32
  %conv182 = zext i16 %all_iftypes.0 to i32
  %or = or i32 %conv182, %conv181
  %conv183 = trunc i32 %or to i16
  %limits185 = getelementptr inbounds %struct.ieee80211_iface_combination, %struct.ieee80211_iface_combination* %arrayidx, i32 0, i32 0
  %14 = load %struct.ieee80211_iface_limit*, %struct.ieee80211_iface_limit** %limits185, align 8, !tbaa !160
  %idxprom186 = sext i32 %j.0 to i64
  %arrayidx187 = getelementptr inbounds %struct.ieee80211_iface_limit, %struct.ieee80211_iface_limit* %14, i64 %idxprom186
  %max = getelementptr inbounds %struct.ieee80211_iface_limit, %struct.ieee80211_iface_limit* %arrayidx187, i32 0, i32 0
  %15 = load i16, i16* %max, align 2, !tbaa !163
  %tobool188 = icmp ne i16 %15, 0
  %lnot189 = xor i1 %tobool188, true
  %lnot191 = xor i1 %lnot189, true
  %lnot193 = xor i1 %lnot191, true
  %lnot.ext194 = zext i1 %lnot193 to i32
  %tobool195 = icmp ne i32 %lnot.ext194, 0
  %lnot196 = xor i1 %tobool195, true
  %lnot198 = xor i1 %lnot196, true
  %lnot.ext199 = zext i1 %lnot198 to i32
  %conv200 = sext i32 %lnot.ext199 to i64
  %expval201 = call i64 @llvm.expect.i64(i64 %conv200, i64 0)
  %tobool202 = icmp ne i64 %expval201, 0
  br i1 %tobool202, label %if.then203, label %if.end204

if.then203:                                       ; preds = %if.end180
  call void @warn_slowpath_null(i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.3, i32 0, i32 0), i32 459)
  br label %if.end204

if.end204:                                        ; preds = %if.then203, %if.end180
  %tobool206 = icmp ne i32 %lnot.ext194, 0
  %lnot207 = xor i1 %tobool206, true
  %lnot209 = xor i1 %lnot207, true
  %lnot.ext210 = zext i1 %lnot209 to i32
  %conv211 = sext i32 %lnot.ext210 to i64
  %expval212 = call i64 @llvm.expect.i64(i64 %conv211, i64 0)
  %tobool213 = icmp ne i64 %expval212, 0
  br i1 %tobool213, label %cleanup, label %if.end215

if.end215:                                        ; preds = %if.end204
  %software_iftypes = getelementptr inbounds %struct.wiphy, %struct.wiphy* %wiphy, i32 0, i32 6
  %16 = load i16, i16* %software_iftypes, align 4, !tbaa !164
  %conv217 = zext i16 %16 to i32
  %conv218 = zext i16 %13 to i32
  %and219 = and i32 %conv217, %conv218
  %tobool220 = icmp ne i32 %and219, 0
  %lnot221 = xor i1 %tobool220, true
  %lnot223 = xor i1 %lnot221, true
  %lnot.ext224 = zext i1 %lnot223 to i32
  %tobool225 = icmp ne i32 %lnot.ext224, 0
  %lnot226 = xor i1 %tobool225, true
  %lnot228 = xor i1 %lnot226, true
  %lnot.ext229 = zext i1 %lnot228 to i32
  %conv230 = sext i32 %lnot.ext229 to i64
  %expval231 = call i64 @llvm.expect.i64(i64 %conv230, i64 0)
  %tobool232 = icmp ne i64 %expval231, 0
  br i1 %tobool232, label %if.then233, label %if.end234

if.then233:                                       ; preds = %if.end215
  call void @warn_slowpath_null(i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.3, i32 0, i32 0), i32 463)
  br label %if.end234

if.end234:                                        ; preds = %if.then233, %if.end215
  %tobool236 = icmp ne i32 %lnot.ext224, 0
  %lnot237 = xor i1 %tobool236, true
  %lnot239 = xor i1 %lnot237, true
  %lnot.ext240 = zext i1 %lnot239 to i32
  %conv241 = sext i32 %lnot.ext240 to i64
  %expval242 = call i64 @llvm.expect.i64(i64 %conv241, i64 0)
  %tobool243 = icmp ne i64 %expval242, 0
  br i1 %tobool243, label %cleanup, label %if.end245

if.end245:                                        ; preds = %if.end234
  %conv247 = zext i16 %13 to i64
  %and248 = and i64 %conv247, 1024
  %tobool249 = icmp ne i64 %and248, 0
  br i1 %tobool249, label %land.rhs250, label %land.end258

land.rhs250:                                      ; preds = %if.end245
  %limits251 = getelementptr inbounds %struct.ieee80211_iface_combination, %struct.ieee80211_iface_combination* %arrayidx, i32 0, i32 0
  %17 = load %struct.ieee80211_iface_limit*, %struct.ieee80211_iface_limit** %limits251, align 8, !tbaa !160
  %idxprom252 = sext i32 %j.0 to i64
  %arrayidx253 = getelementptr inbounds %struct.ieee80211_iface_limit, %struct.ieee80211_iface_limit* %17, i64 %idxprom252
  %max254 = getelementptr inbounds %struct.ieee80211_iface_limit, %struct.ieee80211_iface_limit* %arrayidx253, i32 0, i32 0
  %18 = load i16, i16* %max254, align 2, !tbaa !163
  %conv255 = zext i16 %18 to i32
  %cmp256 = icmp sgt i32 %conv255, 1
  br label %land.end258

land.end258:                                      ; preds = %land.rhs250, %if.end245
  %19 = phi i1 [ false, %if.end245 ], [ %cmp256, %land.rhs250 ]
  %lnot259 = xor i1 %19, true
  %lnot261 = xor i1 %lnot259, true
  %lnot.ext262 = zext i1 %lnot261 to i32
  %tobool263 = icmp ne i32 %lnot.ext262, 0
  %lnot264 = xor i1 %tobool263, true
  %lnot266 = xor i1 %lnot264, true
  %lnot.ext267 = zext i1 %lnot266 to i32
  %conv268 = sext i32 %lnot.ext267 to i64
  %expval269 = call i64 @llvm.expect.i64(i64 %conv268, i64 0)
  %tobool270 = icmp ne i64 %expval269, 0
  br i1 %tobool270, label %if.then271, label %if.end272

if.then271:                                       ; preds = %land.end258
  call void @warn_slowpath_null(i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.3, i32 0, i32 0), i32 468)
  br label %if.end272

if.end272:                                        ; preds = %if.then271, %land.end258
  %tobool274 = icmp ne i32 %lnot.ext262, 0
  %lnot275 = xor i1 %tobool274, true
  %lnot277 = xor i1 %lnot275, true
  %lnot.ext278 = zext i1 %lnot277 to i32
  %conv279 = sext i32 %lnot.ext278 to i64
  %expval280 = call i64 @llvm.expect.i64(i64 %conv279, i64 0)
  %tobool281 = icmp ne i64 %expval280, 0
  br i1 %tobool281, label %cleanup, label %if.end283

if.end283:                                        ; preds = %if.end272
  %limits284 = getelementptr inbounds %struct.ieee80211_iface_combination, %struct.ieee80211_iface_combination* %arrayidx, i32 0, i32 0
  %20 = load %struct.ieee80211_iface_limit*, %struct.ieee80211_iface_limit** %limits284, align 8, !tbaa !160
  %idxprom285 = sext i32 %j.0 to i64
  %arrayidx286 = getelementptr inbounds %struct.ieee80211_iface_limit, %struct.ieee80211_iface_limit* %20, i64 %idxprom285
  %max287 = getelementptr inbounds %struct.ieee80211_iface_limit, %struct.ieee80211_iface_limit* %arrayidx286, i32 0, i32 0
  %21 = load i16, i16* %max287, align 2, !tbaa !163
  %conv288 = zext i16 %21 to i32
  %add = add i32 %cnt.0, %conv288
  %interface_modes = getelementptr inbounds %struct.wiphy, %struct.wiphy* %wiphy, i32 0, i32 8
  %22 = load i16, i16* %interface_modes, align 16, !tbaa !118
  %conv290 = zext i16 %22 to i32
  %conv291 = zext i16 %13 to i32
  %and292 = and i32 %conv290, %conv291
  %conv293 = zext i16 %13 to i32
  %cmp294 = icmp ne i32 %and292, %conv293
  %lnot296 = xor i1 %cmp294, true
  %lnot298 = xor i1 %lnot296, true
  %lnot.ext299 = zext i1 %lnot298 to i32
  %tobool300 = icmp ne i32 %lnot.ext299, 0
  %lnot301 = xor i1 %tobool300, true
  %lnot303 = xor i1 %lnot301, true
  %lnot.ext304 = zext i1 %lnot303 to i32
  %conv305 = sext i32 %lnot.ext304 to i64
  %expval306 = call i64 @llvm.expect.i64(i64 %conv305, i64 0)
  %tobool307 = icmp ne i64 %expval306, 0
  br i1 %tobool307, label %if.then308, label %if.end309

if.then308:                                       ; preds = %if.end283
  call void @warn_slowpath_null(i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.3, i32 0, i32 0), i32 476)
  br label %if.end309

if.end309:                                        ; preds = %if.then308, %if.end283
  %tobool311 = icmp ne i32 %lnot.ext299, 0
  %lnot312 = xor i1 %tobool311, true
  %lnot314 = xor i1 %lnot312, true
  %lnot.ext315 = zext i1 %lnot314 to i32
  %conv316 = sext i32 %lnot.ext315 to i64
  %expval317 = call i64 @llvm.expect.i64(i64 %conv316, i64 0)
  %tobool318 = icmp ne i64 %expval317, 0
  %. = select i1 %tobool318, i32 1, i32 0
  %.retval.1 = select i1 %tobool318, i32 -22, i32 %retval.1
  br label %cleanup

cleanup:                                          ; preds = %if.end309, %if.end272, %if.end234, %if.end204, %if.end169
  %cnt.1 = phi i32 [ %cnt.0, %if.end169 ], [ %cnt.0, %if.end204 ], [ %cnt.0, %if.end234 ], [ %cnt.0, %if.end272 ], [ %add, %if.end309 ]
  %all_iftypes.1 = phi i16 [ %all_iftypes.0, %if.end169 ], [ %conv183, %if.end204 ], [ %conv183, %if.end234 ], [ %conv183, %if.end272 ], [ %conv183, %if.end309 ]
  %cleanup.dest.slot.0 = phi i32 [ 1, %if.end169 ], [ 1, %if.end204 ], [ 1, %if.end234 ], [ 1, %if.end272 ], [ %., %if.end309 ]
  %retval.2 = phi i32 [ -22, %if.end169 ], [ -22, %if.end204 ], [ -22, %if.end234 ], [ -22, %if.end272 ], [ %.retval.1, %if.end309 ]
  %cond1 = icmp eq i32 %cleanup.dest.slot.0, 0
  br i1 %cond1, label %for.inc, label %cleanup351

for.inc:                                          ; preds = %cleanup
  %inc = add nsw i32 %j.0, 1
  br label %for.cond143

for.end:                                          ; preds = %for.cond143
  %max_interfaces322 = getelementptr inbounds %struct.ieee80211_iface_combination, %struct.ieee80211_iface_combination* %arrayidx, i32 0, i32 2
  %23 = load i16, i16* %max_interfaces322, align 4, !tbaa !155
  %conv323 = zext i16 %23 to i32
  %cmp324 = icmp ult i32 %cnt.0, %conv323
  %lnot326 = xor i1 %cmp324, true
  %lnot328 = xor i1 %lnot326, true
  %lnot.ext329 = zext i1 %lnot328 to i32
  %tobool330 = icmp ne i32 %lnot.ext329, 0
  %lnot331 = xor i1 %tobool330, true
  %lnot333 = xor i1 %lnot331, true
  %lnot.ext334 = zext i1 %lnot333 to i32
  %conv335 = sext i32 %lnot.ext334 to i64
  %expval336 = call i64 @llvm.expect.i64(i64 %conv335, i64 0)
  %tobool337 = icmp ne i64 %expval336, 0
  br i1 %tobool337, label %if.then338, label %if.end339

if.then338:                                       ; preds = %for.end
  call void @warn_slowpath_null(i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.3, i32 0, i32 0), i32 481)
  br label %if.end339

if.end339:                                        ; preds = %if.then338, %for.end
  %tobool341 = icmp ne i32 %lnot.ext329, 0
  %lnot342 = xor i1 %tobool341, true
  %lnot344 = xor i1 %lnot342, true
  %lnot.ext345 = zext i1 %lnot344 to i32
  %conv346 = sext i32 %lnot.ext345 to i64
  %expval347 = call i64 @llvm.expect.i64(i64 %conv346, i64 0)
  %tobool348 = icmp ne i64 %expval347, 0
  %.2 = select i1 %tobool348, i32 1, i32 0
  %.retval.13 = select i1 %tobool348, i32 -22, i32 %retval.1
  br label %cleanup351

cleanup351:                                       ; preds = %cleanup, %if.end339, %if.end131, %if.end102, %if.end68, %if.end39, %if.end
  %cleanup.dest.slot.1 = phi i32 [ 1, %if.end ], [ 1, %if.end39 ], [ 1, %if.end68 ], [ 1, %if.end102 ], [ 1, %if.end131 ], [ %.2, %if.end339 ], [ %cleanup.dest.slot.0, %cleanup ]
  %retval.3 = phi i32 [ -22, %if.end ], [ -22, %if.end39 ], [ -22, %if.end68 ], [ -22, %if.end102 ], [ -22, %if.end131 ], [ %.retval.13, %if.end339 ], [ %retval.2, %cleanup ]
  %cond = icmp eq i32 %cleanup.dest.slot.1, 0
  br i1 %cond, label %for.inc355, label %cleanup358

for.inc355:                                       ; preds = %cleanup351
  %inc356 = add nsw i32 %i.0, 1
  br label %for.cond

cleanup358:                                       ; preds = %cleanup351, %for.cond
  %retval.4 = phi i32 [ 0, %for.cond ], [ %retval.3, %cleanup351 ]
  ret i32 %retval.4
}

declare void @ieee80211_set_bitrate_flags(%struct.wiphy*) #3

declare i32 @device_add(%struct.device*) #3

declare void @wiphy_regulatory_register(%struct.wiphy*) #3

; Function Attrs: inlinehint nounwind uwtable
define internal void @list_add_rcu(%struct.list_head* %new, %struct.list_head* %head) #0 {
entry:
  %next = getelementptr inbounds %struct.list_head, %struct.list_head* %head, i32 0, i32 0
  %0 = load %struct.list_head*, %struct.list_head** %next, align 8, !tbaa !116
  call void @__list_add_rcu(%struct.list_head* %new, %struct.list_head* %head, %struct.list_head* %0)
  ret void
}

declare %struct.dentry* @debugfs_create_dir(i8*, %struct.dentry*) #3

; Function Attrs: inlinehint nounwind uwtable
define internal i8* @wiphy_name(%struct.wiphy* %wiphy) #0 {
entry:
  %dev = getelementptr inbounds %struct.wiphy, %struct.wiphy* %wiphy, i32 0, i32 42
  %call = call i8* @dev_name(%struct.device* %dev)
  ret i8* %call
}

; Function Attrs: inlinehint nounwind uwtable
define internal i64 @IS_ERR(i8* %ptr) #0 {
entry:
  %0 = ptrtoint i8* %ptr to i64
  %cmp = icmp uge i64 %0, -4095
  %lnot = xor i1 %cmp, true
  %lnot1 = xor i1 %lnot, true
  %lnot.ext = zext i1 %lnot1 to i32
  %conv = sext i32 %lnot.ext to i64
  %expval = call i64 @llvm.expect.i64(i64 %conv, i64 0)
  ret i64 %expval
}

declare void @nl80211_send_reg_change_event(%struct.regulatory_request*) #3

; Function Attrs: inlinehint nounwind uwtable
define internal void @cfg80211_debugfs_rdev_add(%struct.cfg80211_registered_device* %rdev) #0 {
entry:
  ret void
}

declare i32 @rfkill_register(%struct.rfkill*) #3

declare void @device_del(%struct.device*) #3

declare void @debugfs_remove_recursive(%struct.dentry*) #3

; Function Attrs: inlinehint nounwind uwtable
define internal void @list_del_rcu(%struct.list_head* %entry1) #0 {
entry:
  call void @__list_del_entry(%struct.list_head* %entry1)
  %prev = getelementptr inbounds %struct.list_head, %struct.list_head* %entry1, i32 0, i32 1
  store %struct.list_head* bitcast (i8* getelementptr (i8, i8* inttoptr (i64 2097664 to i8*), i64 -2401263026318606336) to %struct.list_head*), %struct.list_head** %prev, align 8, !tbaa !117
  ret void
}

declare void @wiphy_regulatory_deregister(%struct.wiphy*) #3

declare void @rtnl_lock() #3

declare void @rtnl_unlock() #3

; Function Attrs: nounwind uwtable
define void @wiphy_rfkill_start_polling(%struct.wiphy* %wiphy) #1 {
entry:
  %call = call %struct.cfg80211_registered_device* @wiphy_to_dev(%struct.wiphy* %wiphy)
  %ops = getelementptr inbounds %struct.cfg80211_registered_device, %struct.cfg80211_registered_device* %call, i32 0, i32 0
  %0 = load %struct.cfg80211_ops*, %struct.cfg80211_ops** %ops, align 32, !tbaa !75
  %rfkill_poll = getelementptr inbounds %struct.cfg80211_ops, %struct.cfg80211_ops* %0, i32 0, i32 46
  %1 = load void (%struct.wiphy*)*, void (%struct.wiphy*)** %rfkill_poll, align 8, !tbaa !165
  %tobool = icmp ne void (%struct.wiphy*)* %1, null
  br i1 %tobool, label %if.end, label %cleanup.cont

if.end:                                           ; preds = %entry
  %rfkill_ops = getelementptr inbounds %struct.cfg80211_registered_device, %struct.cfg80211_registered_device* %call, i32 0, i32 3
  %poll = getelementptr inbounds %struct.rfkill_ops, %struct.rfkill_ops* %rfkill_ops, i32 0, i32 0
  store void (%struct.rfkill*, i8*)* @cfg80211_rfkill_poll, void (%struct.rfkill*, i8*)** %poll, align 32, !tbaa !166
  %rfkill = getelementptr inbounds %struct.cfg80211_registered_device, %struct.cfg80211_registered_device* %call, i32 0, i32 4
  %2 = load %struct.rfkill*, %struct.rfkill** %rfkill, align 8, !tbaa !109
  call void @rfkill_resume_polling(%struct.rfkill* %2)
  br label %cleanup.cont

cleanup.cont:                                     ; preds = %if.end, %entry
  ret void
}

; Function Attrs: nounwind uwtable
define internal void @cfg80211_rfkill_poll(%struct.rfkill* %rfkill, i8* %data) #1 {
entry:
  %0 = bitcast i8* %data to %struct.cfg80211_registered_device*
  call void @rdev_rfkill_poll(%struct.cfg80211_registered_device* %0)
  ret void
}

declare void @rfkill_resume_polling(%struct.rfkill*) #3

; Function Attrs: nounwind uwtable
define void @wiphy_rfkill_stop_polling(%struct.wiphy* %wiphy) #1 {
entry:
  %call = call %struct.cfg80211_registered_device* @wiphy_to_dev(%struct.wiphy* %wiphy)
  %rfkill = getelementptr inbounds %struct.cfg80211_registered_device, %struct.cfg80211_registered_device* %call, i32 0, i32 4
  %0 = load %struct.rfkill*, %struct.rfkill** %rfkill, align 8, !tbaa !109
  call void @rfkill_pause_polling(%struct.rfkill* %0)
  ret void
}

declare void @rfkill_pause_polling(%struct.rfkill*) #3

; Function Attrs: nounwind uwtable
define void @wiphy_unregister(%struct.wiphy* %wiphy) #1 {
entry:
  %__wait = alloca %struct.__wait_queue, align 8
  %call = call %struct.cfg80211_registered_device* @wiphy_to_dev(%struct.wiphy* %wiphy)
  call void @rtnl_lock()
  %wiphy1 = getelementptr inbounds %struct.cfg80211_registered_device, %struct.cfg80211_registered_device* %call, i32 0, i32 34
  %registered = getelementptr inbounds %struct.wiphy, %struct.wiphy* %wiphy1, i32 0, i32 43
  store i8 0, i8* %registered, align 8, !tbaa !152
  call void @rtnl_unlock()
  %rfkill = getelementptr inbounds %struct.cfg80211_registered_device, %struct.cfg80211_registered_device* %call, i32 0, i32 4
  %0 = load %struct.rfkill*, %struct.rfkill** %rfkill, align 8, !tbaa !109
  call void @rfkill_unregister(%struct.rfkill* %0)
  call void @mutex_lock(%struct.mutex* @cfg80211_mutex)
  %devlist_mtx = getelementptr inbounds %struct.cfg80211_registered_device, %struct.cfg80211_registered_device* %call, i32 0, i32 9
  call void @mutex_lock(%struct.mutex* %devlist_mtx)
  %opencount = getelementptr inbounds %struct.cfg80211_registered_device, %struct.cfg80211_registered_device* %call, i32 0, i32 13
  %1 = load i32, i32* %opencount, align 16, !tbaa !70
  %devlist_mtx2 = getelementptr inbounds %struct.cfg80211_registered_device, %struct.cfg80211_registered_device* %call, i32 0, i32 9
  call void @mutex_unlock(%struct.mutex* %devlist_mtx2)
  %cmp = icmp eq i32 %1, 0
  %conv = zext i1 %cmp to i32
  %tobool = icmp ne i32 %conv, 0
  br i1 %tobool, label %do.end19, label %do.body3

do.body3:                                         ; preds = %entry
  %2 = bitcast %struct.__wait_queue* %__wait to i8*
  call void @llvm.lifetime.start.p0i8(i64 40, i8* %2) #6
  %flags = getelementptr inbounds %struct.__wait_queue, %struct.__wait_queue* %__wait, i32 0, i32 0
  store i32 0, i32* %flags, align 8, !tbaa !167
  %private = getelementptr inbounds %struct.__wait_queue, %struct.__wait_queue* %__wait, i32 0, i32 1
  %call4 = call %struct.task_struct* @get_current()
  %3 = bitcast %struct.task_struct* %call4 to i8*
  store i8* %3, i8** %private, align 8, !tbaa !169
  %func = getelementptr inbounds %struct.__wait_queue, %struct.__wait_queue* %__wait, i32 0, i32 2
  store i32 (%struct.__wait_queue*, i32, i32, i8*)* @autoremove_wake_function, i32 (%struct.__wait_queue*, i32, i32, i8*)** %func, align 8, !tbaa !170
  %task_list = getelementptr inbounds %struct.__wait_queue, %struct.__wait_queue* %__wait, i32 0, i32 3
  %next = getelementptr inbounds %struct.list_head, %struct.list_head* %task_list, i32 0, i32 0
  %task_list5 = getelementptr inbounds %struct.__wait_queue, %struct.__wait_queue* %__wait, i32 0, i32 3
  store %struct.list_head* %task_list5, %struct.list_head** %next, align 8, !tbaa !116
  %prev = getelementptr inbounds %struct.list_head, %struct.list_head* %task_list, i32 0, i32 1
  %task_list6 = getelementptr inbounds %struct.__wait_queue, %struct.__wait_queue* %__wait, i32 0, i32 3
  store %struct.list_head* %task_list6, %struct.list_head** %prev, align 8, !tbaa !117
  br label %for.cond

for.cond:                                         ; preds = %if.end16, %do.body3
  %dev_wait = getelementptr inbounds %struct.cfg80211_registered_device, %struct.cfg80211_registered_device* %call, i32 0, i32 14
  call void @prepare_to_wait(%struct.__wait_queue_head* %dev_wait, %struct.__wait_queue* %__wait, i32 2)
  %devlist_mtx8 = getelementptr inbounds %struct.cfg80211_registered_device, %struct.cfg80211_registered_device* %call, i32 0, i32 9
  call void @mutex_lock(%struct.mutex* %devlist_mtx8)
  %opencount9 = getelementptr inbounds %struct.cfg80211_registered_device, %struct.cfg80211_registered_device* %call, i32 0, i32 13
  %4 = load i32, i32* %opencount9, align 16, !tbaa !70
  %devlist_mtx10 = getelementptr inbounds %struct.cfg80211_registered_device, %struct.cfg80211_registered_device* %call, i32 0, i32 9
  call void @mutex_unlock(%struct.mutex* %devlist_mtx10)
  %cmp12 = icmp eq i32 %4, 0
  %conv13 = zext i1 %cmp12 to i32
  %tobool14 = icmp ne i32 %conv13, 0
  br i1 %tobool14, label %for.end, label %if.end16

if.end16:                                         ; preds = %for.cond
  call void @schedule()
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %dev_wait17 = getelementptr inbounds %struct.cfg80211_registered_device, %struct.cfg80211_registered_device* %call, i32 0, i32 14
  call void @finish_wait(%struct.__wait_queue_head* %dev_wait17, %struct.__wait_queue* %__wait)
  %5 = bitcast %struct.__wait_queue* %__wait to i8*
  call void @llvm.lifetime.end.p0i8(i64 40, i8* %5) #6
  br label %do.end19

do.end19:                                         ; preds = %entry, %for.end
  %devlist_mtx20 = getelementptr inbounds %struct.cfg80211_registered_device, %struct.cfg80211_registered_device* %call, i32 0, i32 9
  call void @mutex_lock(%struct.mutex* %devlist_mtx20)
  %wdev_list = getelementptr inbounds %struct.cfg80211_registered_device, %struct.cfg80211_registered_device* %call, i32 0, i32 10
  %call22 = call i32 @list_empty(%struct.list_head* %wdev_list)
  %tobool23 = icmp ne i32 %call22, 0
  %lnot = xor i1 %tobool23, true
  %lnot24 = xor i1 %lnot, true
  %lnot25 = xor i1 %lnot24, true
  %lnot.ext = zext i1 %lnot25 to i32
  %conv26 = sext i32 %lnot.ext to i64
  %expval = call i64 @llvm.expect.i64(i64 %conv26, i64 0)
  %tobool27 = icmp ne i64 %expval, 0
  br i1 %tobool27, label %do.body29, label %do.end37

do.body29:                                        ; preds = %do.end19
  call void asm sideeffect "1:\09ud2\0A.pushsection __bug_table,\22a\22\0A2:\09.long 1b - 2b, ${0:c} - 2b\0A\09.word ${1:c}, 0\0A\09.org 2b+${2:c}\0A.popsection", "i,i,i,~{dirflag},~{fpsr},~{flags}"(i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.3, i32 0, i32 0), i32 699, i64 12) #6, !srcloc !171
  br label %do.body30

do.body30:                                        ; preds = %do.body30, %do.body29
  br label %do.body30

do.end37:                                         ; preds = %do.end19
  %devlist_mtx38 = getelementptr inbounds %struct.cfg80211_registered_device, %struct.cfg80211_registered_device* %call, i32 0, i32 9
  call void @mutex_unlock(%struct.mutex* %devlist_mtx38)
  %wiphy39 = getelementptr inbounds %struct.cfg80211_registered_device, %struct.cfg80211_registered_device* %call, i32 0, i32 34
  %debugfsdir = getelementptr inbounds %struct.wiphy, %struct.wiphy* %wiphy39, i32 0, i32 44
  %6 = load %struct.dentry*, %struct.dentry** %debugfsdir, align 16, !tbaa !56
  call void @debugfs_remove_recursive(%struct.dentry* %6)
  %list = getelementptr inbounds %struct.cfg80211_registered_device, %struct.cfg80211_registered_device* %call, i32 0, i32 1
  call void @list_del_rcu(%struct.list_head* %list)
  call void @synchronize_rcu()
  call void @cfg80211_lock_rdev(%struct.cfg80211_registered_device* %call)
  call void @cfg80211_unlock_rdev(%struct.cfg80211_registered_device* %call)
  call void @wiphy_regulatory_deregister(%struct.wiphy* %wiphy)
  %7 = load i32, i32* @cfg80211_rdev_list_generation, align 4, !tbaa !55
  %inc = add nsw i32 %7, 1
  store i32 %inc, i32* @cfg80211_rdev_list_generation, align 4, !tbaa !55
  %wiphy40 = getelementptr inbounds %struct.cfg80211_registered_device, %struct.cfg80211_registered_device* %call, i32 0, i32 34
  %dev = getelementptr inbounds %struct.wiphy, %struct.wiphy* %wiphy40, i32 0, i32 42
  call void @device_del(%struct.device* %dev)
  call void @mutex_unlock(%struct.mutex* @cfg80211_mutex)
  %scan_done_wk = getelementptr inbounds %struct.cfg80211_registered_device, %struct.cfg80211_registered_device* %call, i32 0, i32 26
  %call41 = call zeroext i1 @flush_work(%struct.work_struct* %scan_done_wk)
  %conn_work = getelementptr inbounds %struct.cfg80211_registered_device, %struct.cfg80211_registered_device* %call, i32 0, i32 29
  %call42 = call zeroext i1 @cancel_work_sync(%struct.work_struct* %conn_work)
  %event_work = getelementptr inbounds %struct.cfg80211_registered_device, %struct.cfg80211_registered_device* %call, i32 0, i32 30
  %call43 = call zeroext i1 @flush_work(%struct.work_struct* %event_work)
  %dfs_update_channels_wk = getelementptr inbounds %struct.cfg80211_registered_device, %struct.cfg80211_registered_device* %call, i32 0, i32 32
  %call44 = call zeroext i1 @cancel_delayed_work_sync(%struct.delayed_work* %dfs_update_channels_wk)
  %wowlan = getelementptr inbounds %struct.cfg80211_registered_device, %struct.cfg80211_registered_device* %call, i32 0, i32 31
  %8 = load %struct.cfg80211_wowlan*, %struct.cfg80211_wowlan** %wowlan, align 16, !tbaa !172
  %tobool45 = icmp ne %struct.cfg80211_wowlan* %8, null
  br i1 %tobool45, label %land.lhs.true, label %if.end48

land.lhs.true:                                    ; preds = %do.end37
  %ops = getelementptr inbounds %struct.cfg80211_registered_device, %struct.cfg80211_registered_device* %call, i32 0, i32 0
  %9 = load %struct.cfg80211_ops*, %struct.cfg80211_ops** %ops, align 32, !tbaa !75
  %set_wakeup = getelementptr inbounds %struct.cfg80211_ops, %struct.cfg80211_ops* %9, i32 0, i32 2
  %10 = load void (%struct.wiphy*, i1)*, void (%struct.wiphy*, i1)** %set_wakeup, align 8, !tbaa !173
  %tobool46 = icmp ne void (%struct.wiphy*, i1)* %10, null
  br i1 %tobool46, label %if.then47, label %if.end48

if.then47:                                        ; preds = %land.lhs.true
  call void @rdev_set_wakeup(%struct.cfg80211_registered_device* %call, i1 zeroext false)
  br label %if.end48

if.end48:                                         ; preds = %if.then47, %land.lhs.true, %do.end37
  call void @cfg80211_rdev_free_wowlan(%struct.cfg80211_registered_device* %call)
  ret void
}

declare void @rfkill_unregister(%struct.rfkill*) #3

; Function Attrs: alwaysinline nounwind uwtable
define internal %struct.task_struct* @get_current() #5 {
entry:
  %0 = call %struct.task_struct* asm "movq %gs:${1:P},$0", "=r,im,~{dirflag},~{fpsr},~{flags}"(%struct.task_struct** @current_task) #4, !srcloc !174
  ret %struct.task_struct* %0
}

declare i32 @autoremove_wake_function(%struct.__wait_queue*, i32, i32, i8*) #3

declare void @prepare_to_wait(%struct.__wait_queue_head*, %struct.__wait_queue*, i32) #3

declare void @schedule() #3

declare void @finish_wait(%struct.__wait_queue_head*, %struct.__wait_queue*) #3

; Function Attrs: inlinehint nounwind uwtable
define internal i32 @list_empty(%struct.list_head* %head) #0 {
entry:
  %next = getelementptr inbounds %struct.list_head, %struct.list_head* %head, i32 0, i32 0
  %0 = load %struct.list_head*, %struct.list_head** %next, align 8, !tbaa !116
  %cmp = icmp eq %struct.list_head* %0, %head
  %conv = zext i1 %cmp to i32
  ret i32 %conv
}

; Function Attrs: inlinehint nounwind uwtable
define internal void @synchronize_rcu() #0 {
entry:
  call void @synchronize_sched()
  ret void
}

; Function Attrs: inlinehint nounwind uwtable
define internal void @cfg80211_lock_rdev(%struct.cfg80211_registered_device* %rdev) #0 {
entry:
  %mtx = getelementptr inbounds %struct.cfg80211_registered_device, %struct.cfg80211_registered_device* %rdev, i32 0, i32 2
  call void @mutex_lock(%struct.mutex* %mtx)
  ret void
}

; Function Attrs: inlinehint nounwind uwtable
define internal void @cfg80211_unlock_rdev(%struct.cfg80211_registered_device* %rdev) #0 {
entry:
  %0 = bitcast %struct.cfg80211_registered_device* %rdev to i8*
  %call = call i64 @IS_ERR(i8* %0)
  %tobool = icmp ne i64 %call, 0
  br i1 %tobool, label %lor.end, label %lor.rhs

lor.rhs:                                          ; preds = %entry
  %tobool1 = icmp ne %struct.cfg80211_registered_device* %rdev, null
  %lnot = xor i1 %tobool1, true
  br label %lor.end

lor.end:                                          ; preds = %lor.rhs, %entry
  %1 = phi i1 [ true, %entry ], [ %lnot, %lor.rhs ]
  %lnot2 = xor i1 %1, true
  %lnot3 = xor i1 %lnot2, true
  %lnot.ext = zext i1 %lnot3 to i32
  %conv = sext i32 %lnot.ext to i64
  %expval = call i64 @llvm.expect.i64(i64 %conv, i64 0)
  %tobool4 = icmp ne i64 %expval, 0
  br i1 %tobool4, label %do.body5, label %do.end10

do.body5:                                         ; preds = %lor.end
  call void asm sideeffect "1:\09ud2\0A.pushsection __bug_table,\22a\22\0A2:\09.long 1b - 2b, ${0:c} - 2b\0A\09.word ${1:c}, 0\0A\09.org 2b+${2:c}\0A.popsection", "i,i,i,~{dirflag},~{fpsr},~{flags}"(i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.13, i32 0, i32 0), i32 181, i64 12) #6, !srcloc !175
  br label %do.body6

do.body6:                                         ; preds = %do.body6, %do.body5
  br label %do.body6

do.end10:                                         ; preds = %lor.end
  %mtx = getelementptr inbounds %struct.cfg80211_registered_device, %struct.cfg80211_registered_device* %rdev, i32 0, i32 2
  call void @mutex_unlock(%struct.mutex* %mtx)
  ret void
}

declare zeroext i1 @flush_work(%struct.work_struct*) #3

declare zeroext i1 @cancel_work_sync(%struct.work_struct*) #3

declare zeroext i1 @cancel_delayed_work_sync(%struct.delayed_work*) #3

; Function Attrs: inlinehint nounwind uwtable
define internal void @rdev_set_wakeup(%struct.cfg80211_registered_device* %rdev, i1 zeroext %enabled) #0 {
entry:
  %frombool = zext i1 %enabled to i8
  %wiphy = getelementptr inbounds %struct.cfg80211_registered_device, %struct.cfg80211_registered_device* %rdev, i32 0, i32 34
  %tobool = trunc i8 %frombool to i1
  call void @trace_rdev_set_wakeup(%struct.wiphy* %wiphy, i1 zeroext %tobool)
  %ops = getelementptr inbounds %struct.cfg80211_registered_device, %struct.cfg80211_registered_device* %rdev, i32 0, i32 0
  %0 = load %struct.cfg80211_ops*, %struct.cfg80211_ops** %ops, align 32, !tbaa !75
  %set_wakeup = getelementptr inbounds %struct.cfg80211_ops, %struct.cfg80211_ops* %0, i32 0, i32 2
  %1 = load void (%struct.wiphy*, i1)*, void (%struct.wiphy*, i1)** %set_wakeup, align 8, !tbaa !173
  %wiphy1 = getelementptr inbounds %struct.cfg80211_registered_device, %struct.cfg80211_registered_device* %rdev, i32 0, i32 34
  %tobool2 = trunc i8 %frombool to i1
  call void %1(%struct.wiphy* %wiphy1, i1 zeroext %tobool2)
  %wiphy3 = getelementptr inbounds %struct.cfg80211_registered_device, %struct.cfg80211_registered_device* %rdev, i32 0, i32 34
  call void @trace_rdev_return_void(%struct.wiphy* %wiphy3)
  ret void
}

; Function Attrs: inlinehint nounwind uwtable
define internal void @cfg80211_rdev_free_wowlan(%struct.cfg80211_registered_device* %rdev) #0 {
entry:
  %wowlan = getelementptr inbounds %struct.cfg80211_registered_device, %struct.cfg80211_registered_device* %rdev, i32 0, i32 31
  %0 = load %struct.cfg80211_wowlan*, %struct.cfg80211_wowlan** %wowlan, align 16, !tbaa !172
  %tobool = icmp ne %struct.cfg80211_wowlan* %0, null
  br i1 %tobool, label %if.end, label %cleanup.cont

if.end:                                           ; preds = %entry
  br label %for.cond

for.cond:                                         ; preds = %for.body, %if.end
  %i.0 = phi i32 [ 0, %if.end ], [ %inc, %for.body ]
  %wowlan1 = getelementptr inbounds %struct.cfg80211_registered_device, %struct.cfg80211_registered_device* %rdev, i32 0, i32 31
  %1 = load %struct.cfg80211_wowlan*, %struct.cfg80211_wowlan** %wowlan1, align 16, !tbaa !172
  %n_patterns = getelementptr inbounds %struct.cfg80211_wowlan, %struct.cfg80211_wowlan* %1, i32 0, i32 9
  %2 = load i32, i32* %n_patterns, align 8, !tbaa !176
  %cmp = icmp slt i32 %i.0, %2
  %wowlan2 = getelementptr inbounds %struct.cfg80211_registered_device, %struct.cfg80211_registered_device* %rdev, i32 0, i32 31
  %3 = load %struct.cfg80211_wowlan*, %struct.cfg80211_wowlan** %wowlan2, align 16, !tbaa !172
  %patterns = getelementptr inbounds %struct.cfg80211_wowlan, %struct.cfg80211_wowlan* %3, i32 0, i32 7
  %4 = load %struct.cfg80211_wowlan_trig_pkt_pattern*, %struct.cfg80211_wowlan_trig_pkt_pattern** %patterns, align 8, !tbaa !178
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %idxprom = sext i32 %i.0 to i64
  %arrayidx = getelementptr inbounds %struct.cfg80211_wowlan_trig_pkt_pattern, %struct.cfg80211_wowlan_trig_pkt_pattern* %4, i64 %idxprom
  %mask = getelementptr inbounds %struct.cfg80211_wowlan_trig_pkt_pattern, %struct.cfg80211_wowlan_trig_pkt_pattern* %arrayidx, i32 0, i32 0
  %5 = load i8*, i8** %mask, align 8, !tbaa !179
  call void @kfree(i8* %5)
  %inc = add nsw i32 %i.0, 1
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %6 = bitcast %struct.cfg80211_wowlan_trig_pkt_pattern* %4 to i8*
  call void @kfree(i8* %6)
  %wowlan5 = getelementptr inbounds %struct.cfg80211_registered_device, %struct.cfg80211_registered_device* %rdev, i32 0, i32 31
  %7 = load %struct.cfg80211_wowlan*, %struct.cfg80211_wowlan** %wowlan5, align 16, !tbaa !172
  %tcp = getelementptr inbounds %struct.cfg80211_wowlan, %struct.cfg80211_wowlan* %7, i32 0, i32 8
  %8 = load %struct.cfg80211_wowlan_tcp*, %struct.cfg80211_wowlan_tcp** %tcp, align 8, !tbaa !181
  %tobool6 = icmp ne %struct.cfg80211_wowlan_tcp* %8, null
  br i1 %tobool6, label %land.lhs.true, label %if.end14

land.lhs.true:                                    ; preds = %for.end
  %wowlan7 = getelementptr inbounds %struct.cfg80211_registered_device, %struct.cfg80211_registered_device* %rdev, i32 0, i32 31
  %9 = load %struct.cfg80211_wowlan*, %struct.cfg80211_wowlan** %wowlan7, align 16, !tbaa !172
  %tcp8 = getelementptr inbounds %struct.cfg80211_wowlan, %struct.cfg80211_wowlan* %9, i32 0, i32 8
  %10 = load %struct.cfg80211_wowlan_tcp*, %struct.cfg80211_wowlan_tcp** %tcp8, align 8, !tbaa !181
  %sock = getelementptr inbounds %struct.cfg80211_wowlan_tcp, %struct.cfg80211_wowlan_tcp* %10, i32 0, i32 0
  %11 = load %struct.socket*, %struct.socket** %sock, align 8, !tbaa !12
  %tobool9 = icmp ne %struct.socket* %11, null
  br i1 %tobool9, label %if.then10, label %if.end14

if.then10:                                        ; preds = %land.lhs.true
  %wowlan11 = getelementptr inbounds %struct.cfg80211_registered_device, %struct.cfg80211_registered_device* %rdev, i32 0, i32 31
  %12 = load %struct.cfg80211_wowlan*, %struct.cfg80211_wowlan** %wowlan11, align 16, !tbaa !172
  %tcp12 = getelementptr inbounds %struct.cfg80211_wowlan, %struct.cfg80211_wowlan* %12, i32 0, i32 8
  %13 = load %struct.cfg80211_wowlan_tcp*, %struct.cfg80211_wowlan_tcp** %tcp12, align 8, !tbaa !181
  %sock13 = getelementptr inbounds %struct.cfg80211_wowlan_tcp, %struct.cfg80211_wowlan_tcp* %13, i32 0, i32 0
  %14 = load %struct.socket*, %struct.socket** %sock13, align 8, !tbaa !12
  call void @sock_release(%struct.socket* %14)
  br label %if.end14

if.end14:                                         ; preds = %if.then10, %land.lhs.true, %for.end
  %wowlan15 = getelementptr inbounds %struct.cfg80211_registered_device, %struct.cfg80211_registered_device* %rdev, i32 0, i32 31
  %15 = load %struct.cfg80211_wowlan*, %struct.cfg80211_wowlan** %wowlan15, align 16, !tbaa !172
  %tcp16 = getelementptr inbounds %struct.cfg80211_wowlan, %struct.cfg80211_wowlan* %15, i32 0, i32 8
  %16 = load %struct.cfg80211_wowlan_tcp*, %struct.cfg80211_wowlan_tcp** %tcp16, align 8, !tbaa !181
  %17 = bitcast %struct.cfg80211_wowlan_tcp* %16 to i8*
  call void @kfree(i8* %17)
  %wowlan17 = getelementptr inbounds %struct.cfg80211_registered_device, %struct.cfg80211_registered_device* %rdev, i32 0, i32 31
  %18 = load %struct.cfg80211_wowlan*, %struct.cfg80211_wowlan** %wowlan17, align 16, !tbaa !172
  %19 = bitcast %struct.cfg80211_wowlan* %18 to i8*
  call void @kfree(i8* %19)
  br label %cleanup.cont

cleanup.cont:                                     ; preds = %if.end14, %entry
  ret void
}

; Function Attrs: nounwind uwtable
define void @cfg80211_dev_free(%struct.cfg80211_registered_device* %rdev) #1 {
entry:
  %rfkill = getelementptr inbounds %struct.cfg80211_registered_device, %struct.cfg80211_registered_device* %rdev, i32 0, i32 4
  %0 = load %struct.rfkill*, %struct.rfkill** %rfkill, align 8, !tbaa !109
  call void @rfkill_destroy(%struct.rfkill* %0)
  %mtx = getelementptr inbounds %struct.cfg80211_registered_device, %struct.cfg80211_registered_device* %rdev, i32 0, i32 2
  call void @mutex_destroy(%struct.mutex* %mtx)
  %devlist_mtx = getelementptr inbounds %struct.cfg80211_registered_device, %struct.cfg80211_registered_device* %rdev, i32 0, i32 9
  call void @mutex_destroy(%struct.mutex* %devlist_mtx)
  %sched_scan_mtx = getelementptr inbounds %struct.cfg80211_registered_device, %struct.cfg80211_registered_device* %rdev, i32 0, i32 28
  call void @mutex_destroy(%struct.mutex* %sched_scan_mtx)
  %beacon_registrations = getelementptr inbounds %struct.cfg80211_registered_device, %struct.cfg80211_registered_device* %rdev, i32 0, i32 15
  %next = getelementptr inbounds %struct.list_head, %struct.list_head* %beacon_registrations, i32 0, i32 0
  %1 = load %struct.list_head*, %struct.list_head** %next, align 16, !tbaa !116
  %2 = bitcast %struct.list_head* %1 to i8*
  %add.ptr = getelementptr inbounds i8, i8* %2, i64 0
  %3 = bitcast i8* %add.ptr to %struct.cfg80211_beacon_registration*
  br label %for.cond

for.cond:                                         ; preds = %for.body, %entry
  %.sink = phi %struct.cfg80211_beacon_registration* [ %6, %for.body ], [ %3, %entry ]
  %reg.0 = phi %struct.cfg80211_beacon_registration* [ %3, %entry ], [ %6, %for.body ]
  %list10 = getelementptr inbounds %struct.cfg80211_beacon_registration, %struct.cfg80211_beacon_registration* %.sink, i32 0, i32 0
  %next11 = getelementptr inbounds %struct.list_head, %struct.list_head* %list10, i32 0, i32 0
  %4 = load %struct.list_head*, %struct.list_head** %next11, align 8, !tbaa !182
  %5 = bitcast %struct.list_head* %4 to i8*
  %add.ptr13 = getelementptr inbounds i8, i8* %5, i64 0
  %6 = bitcast i8* %add.ptr13 to %struct.cfg80211_beacon_registration*
  %list6 = getelementptr inbounds %struct.cfg80211_beacon_registration, %struct.cfg80211_beacon_registration* %reg.0, i32 0, i32 0
  %beacon_registrations7 = getelementptr inbounds %struct.cfg80211_registered_device, %struct.cfg80211_registered_device* %rdev, i32 0, i32 15
  %cmp = icmp ne %struct.list_head* %list6, %beacon_registrations7
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %list8 = getelementptr inbounds %struct.cfg80211_beacon_registration, %struct.cfg80211_beacon_registration* %reg.0, i32 0, i32 0
  call void @list_del(%struct.list_head* %list8)
  %7 = bitcast %struct.cfg80211_beacon_registration* %reg.0 to i8*
  call void @kfree(i8* %7)
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %bss_list = getelementptr inbounds %struct.cfg80211_registered_device, %struct.cfg80211_registered_device* %rdev, i32 0, i32 20
  %next15 = getelementptr inbounds %struct.list_head, %struct.list_head* %bss_list, i32 0, i32 0
  %8 = load %struct.list_head*, %struct.list_head** %next15, align 16, !tbaa !116
  %9 = bitcast %struct.list_head* %8 to i8*
  %add.ptr17 = getelementptr inbounds i8, i8* %9, i64 0
  %10 = bitcast i8* %add.ptr17 to %struct.cfg80211_internal_bss*
  br label %for.cond23

for.cond23:                                       ; preds = %for.body27, %for.end
  %.sink4 = phi %struct.cfg80211_internal_bss* [ %13, %for.body27 ], [ %10, %for.end ]
  %scan.0 = phi %struct.cfg80211_internal_bss* [ %10, %for.end ], [ %13, %for.body27 ]
  %list30 = getelementptr inbounds %struct.cfg80211_internal_bss, %struct.cfg80211_internal_bss* %.sink4, i32 0, i32 0
  %next31 = getelementptr inbounds %struct.list_head, %struct.list_head* %list30, i32 0, i32 0
  %11 = load %struct.list_head*, %struct.list_head** %next31, align 8, !tbaa !184
  %12 = bitcast %struct.list_head* %11 to i8*
  %add.ptr33 = getelementptr inbounds i8, i8* %12, i64 0
  %13 = bitcast i8* %add.ptr33 to %struct.cfg80211_internal_bss*
  %list24 = getelementptr inbounds %struct.cfg80211_internal_bss, %struct.cfg80211_internal_bss* %scan.0, i32 0, i32 0
  %bss_list25 = getelementptr inbounds %struct.cfg80211_registered_device, %struct.cfg80211_registered_device* %rdev, i32 0, i32 20
  %cmp26 = icmp ne %struct.list_head* %list24, %bss_list25
  br i1 %cmp26, label %for.body27, label %for.end34

for.body27:                                       ; preds = %for.cond23
  %wiphy = getelementptr inbounds %struct.cfg80211_registered_device, %struct.cfg80211_registered_device* %rdev, i32 0, i32 34
  %pub = getelementptr inbounds %struct.cfg80211_internal_bss, %struct.cfg80211_internal_bss* %scan.0, i32 0, i32 6
  call void @cfg80211_put_bss(%struct.wiphy* %wiphy, %struct.cfg80211_bss* %pub)
  br label %for.cond23

for.end34:                                        ; preds = %for.cond23
  %14 = bitcast %struct.cfg80211_registered_device* %rdev to i8*
  call void @kfree(i8* %14)
  ret void
}

declare void @rfkill_destroy(%struct.rfkill*) #3

; Function Attrs: inlinehint nounwind uwtable
define internal void @mutex_destroy(%struct.mutex* %lock) #0 {
entry:
  ret void
}

; Function Attrs: inlinehint nounwind uwtable
define internal void @list_del(%struct.list_head* %entry1) #0 {
entry:
  %prev = getelementptr inbounds %struct.list_head, %struct.list_head* %entry1, i32 0, i32 1
  %0 = load %struct.list_head*, %struct.list_head** %prev, align 8, !tbaa !117
  %next = getelementptr inbounds %struct.list_head, %struct.list_head* %entry1, i32 0, i32 0
  %1 = load %struct.list_head*, %struct.list_head** %next, align 8, !tbaa !116
  call void @__list_del(%struct.list_head* %0, %struct.list_head* %1)
  %next2 = getelementptr inbounds %struct.list_head, %struct.list_head* %entry1, i32 0, i32 0
  store %struct.list_head* bitcast (i8* getelementptr (i8, i8* inttoptr (i64 1048832 to i8*), i64 -2401263026318606336) to %struct.list_head*), %struct.list_head** %next2, align 8, !tbaa !116
  %prev3 = getelementptr inbounds %struct.list_head, %struct.list_head* %entry1, i32 0, i32 1
  store %struct.list_head* bitcast (i8* getelementptr (i8, i8* inttoptr (i64 2097664 to i8*), i64 -2401263026318606336) to %struct.list_head*), %struct.list_head** %prev3, align 8, !tbaa !117
  ret void
}

declare void @cfg80211_put_bss(%struct.wiphy*, %struct.cfg80211_bss*) #3

; Function Attrs: nounwind uwtable
define void @wiphy_free(%struct.wiphy* %wiphy) #1 {
entry:
  %dev = getelementptr inbounds %struct.wiphy, %struct.wiphy* %wiphy, i32 0, i32 42
  call void @put_device(%struct.device* %dev)
  ret void
}

declare void @put_device(%struct.device*) #3

; Function Attrs: nounwind uwtable
define void @wiphy_rfkill_set_hw_state(%struct.wiphy* %wiphy, i1 zeroext %blocked) #1 {
entry:
  %frombool = zext i1 %blocked to i8
  %call = call %struct.cfg80211_registered_device* @wiphy_to_dev(%struct.wiphy* %wiphy)
  %rfkill = getelementptr inbounds %struct.cfg80211_registered_device, %struct.cfg80211_registered_device* %call, i32 0, i32 4
  %0 = load %struct.rfkill*, %struct.rfkill** %rfkill, align 8, !tbaa !109
  %tobool = trunc i8 %frombool to i1
  %call1 = call zeroext i1 @rfkill_set_hw_state(%struct.rfkill* %0, i1 zeroext %tobool)
  br i1 %call1, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %rfkill_sync = getelementptr inbounds %struct.cfg80211_registered_device, %struct.cfg80211_registered_device* %call, i32 0, i32 5
  %call2 = call zeroext i1 @schedule_work(%struct.work_struct* %rfkill_sync)
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  ret void
}

declare zeroext i1 @rfkill_set_hw_state(%struct.rfkill*, i1 zeroext) #3

; Function Attrs: inlinehint nounwind uwtable
define internal zeroext i1 @schedule_work(%struct.work_struct* %work) #0 {
entry:
  %0 = load %struct.workqueue_struct*, %struct.workqueue_struct** @system_wq, align 8, !tbaa !12
  %call = call zeroext i1 @queue_work(%struct.workqueue_struct* %0, %struct.work_struct* %work)
  ret i1 %call
}

; Function Attrs: nounwind uwtable
define void @cfg80211_unregister_wdev(%struct.wireless_dev* %wdev) #1 {
entry:
  %wiphy = getelementptr inbounds %struct.wireless_dev, %struct.wireless_dev* %wdev, i32 0, i32 0
  %0 = load %struct.wiphy*, %struct.wiphy** %wiphy, align 8, !tbaa !50
  %call = call %struct.cfg80211_registered_device* @wiphy_to_dev(%struct.wiphy* %0)
  %call1 = call i32 @rtnl_is_locked()
  %tobool = icmp ne i32 %call1, 0
  %lnot = xor i1 %tobool, true
  %lnot2 = xor i1 %lnot, true
  %lnot3 = xor i1 %lnot2, true
  %lnot.ext = zext i1 %lnot3 to i32
  %conv = sext i32 %lnot.ext to i64
  %expval = call i64 @llvm.expect.i64(i64 %conv, i64 0)
  %tobool4 = icmp ne i64 %expval, 0
  br i1 %tobool4, label %if.then, label %do.end

if.then:                                          ; preds = %entry
  %call5 = call i32 (i8*, ...) @printk(i8* getelementptr inbounds ([37 x i8], [37 x i8]* @.str.12, i32 0, i32 0), i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.3, i32 0, i32 0), i32 812)
  call void @dump_stack()
  br label %do.end

do.end:                                           ; preds = %if.then, %entry
  %netdev = getelementptr inbounds %struct.wireless_dev, %struct.wireless_dev* %wdev, i32 0, i32 3
  %1 = load %struct.net_device*, %struct.net_device** %netdev, align 8, !tbaa !64
  %tobool6 = icmp ne %struct.net_device* %1, null
  %lnot7 = xor i1 %tobool6, true
  %lnot9 = xor i1 %lnot7, true
  %lnot.ext10 = zext i1 %lnot9 to i32
  %tobool11 = icmp ne i32 %lnot.ext10, 0
  %lnot12 = xor i1 %tobool11, true
  %lnot14 = xor i1 %lnot12, true
  %lnot.ext15 = zext i1 %lnot14 to i32
  %conv16 = sext i32 %lnot.ext15 to i64
  %expval17 = call i64 @llvm.expect.i64(i64 %conv16, i64 0)
  %tobool18 = icmp ne i64 %expval17, 0
  br i1 %tobool18, label %if.then19, label %if.end20

if.then19:                                        ; preds = %do.end
  call void @warn_slowpath_null(i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.3, i32 0, i32 0), i32 814)
  br label %if.end20

if.end20:                                         ; preds = %if.then19, %do.end
  %tobool21 = icmp ne i32 %lnot.ext10, 0
  %lnot22 = xor i1 %tobool21, true
  %lnot24 = xor i1 %lnot22, true
  %lnot.ext25 = zext i1 %lnot24 to i32
  %conv26 = sext i32 %lnot.ext25 to i64
  %expval27 = call i64 @llvm.expect.i64(i64 %conv26, i64 0)
  %tobool28 = icmp ne i64 %expval27, 0
  br i1 %tobool28, label %cleanup.cont, label %if.end30

if.end30:                                         ; preds = %if.end20
  %devlist_mtx = getelementptr inbounds %struct.cfg80211_registered_device, %struct.cfg80211_registered_device* %call, i32 0, i32 9
  call void @mutex_lock(%struct.mutex* %devlist_mtx)
  %sched_scan_mtx = getelementptr inbounds %struct.cfg80211_registered_device, %struct.cfg80211_registered_device* %call, i32 0, i32 28
  call void @mutex_lock(%struct.mutex* %sched_scan_mtx)
  %list = getelementptr inbounds %struct.wireless_dev, %struct.wireless_dev* %wdev, i32 0, i32 2
  call void @list_del_rcu(%struct.list_head* %list)
  %devlist_generation = getelementptr inbounds %struct.cfg80211_registered_device, %struct.cfg80211_registered_device* %call, i32 0, i32 11
  %2 = load i32, i32* %devlist_generation, align 8, !tbaa !188
  %inc = add nsw i32 %2, 1
  store i32 %inc, i32* %devlist_generation, align 8, !tbaa !188
  %iftype = getelementptr inbounds %struct.wireless_dev, %struct.wireless_dev* %wdev, i32 0, i32 1
  %3 = load i32, i32* %iftype, align 8, !tbaa !67
  %cond = icmp eq i32 %3, 10
  br i1 %cond, label %sw.bb, label %sw.default

sw.bb:                                            ; preds = %if.end30
  call void @cfg80211_stop_p2p_device(%struct.cfg80211_registered_device* %call, %struct.wireless_dev* %wdev)
  br label %sw.epilog

sw.default:                                       ; preds = %if.end30
  %tobool31 = icmp ne i32 1, 0
  %lnot32 = xor i1 %tobool31, true
  %lnot34 = xor i1 %lnot32, true
  %lnot.ext35 = zext i1 %lnot34 to i32
  %conv36 = sext i32 %lnot.ext35 to i64
  %expval37 = call i64 @llvm.expect.i64(i64 %conv36, i64 0)
  %tobool38 = icmp ne i64 %expval37, 0
  br i1 %tobool38, label %if.then39, label %if.end69

if.then39:                                        ; preds = %sw.default
  %4 = load i8, i8* @cfg80211_unregister_wdev.__warned, align 1, !tbaa !134, !range !69
  %tobool41 = trunc i8 %4 to i1
  %lnot42 = xor i1 %tobool41, true
  %lnot44 = xor i1 %lnot42, true
  %lnot46 = xor i1 %lnot44, true
  %lnot.ext47 = zext i1 %lnot46 to i32
  %tobool48 = icmp ne i32 %lnot.ext47, 0
  %lnot49 = xor i1 %tobool48, true
  %lnot51 = xor i1 %lnot49, true
  %lnot.ext52 = zext i1 %lnot51 to i32
  %conv53 = sext i32 %lnot.ext52 to i64
  %expval54 = call i64 @llvm.expect.i64(i64 %conv53, i64 0)
  %tobool55 = icmp ne i64 %expval54, 0
  br i1 %tobool55, label %if.then56, label %if.end57

if.then56:                                        ; preds = %if.then39
  call void @warn_slowpath_null(i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.3, i32 0, i32 0), i32 827)
  br label %if.end57

if.end57:                                         ; preds = %if.then56, %if.then39
  %tobool59 = icmp ne i32 %lnot.ext47, 0
  %lnot60 = xor i1 %tobool59, true
  %lnot62 = xor i1 %lnot60, true
  %lnot.ext63 = zext i1 %lnot62 to i32
  %conv64 = sext i32 %lnot.ext63 to i64
  %expval65 = call i64 @llvm.expect.i64(i64 %conv64, i64 0)
  %tobool66 = icmp ne i64 %expval65, 0
  br i1 %tobool66, label %if.then67, label %if.end69

if.then67:                                        ; preds = %if.end57
  store i8 1, i8* @cfg80211_unregister_wdev.__warned, align 1, !tbaa !134
  br label %if.end69

if.end69:                                         ; preds = %if.end57, %if.then67, %sw.default
  %tobool71 = icmp ne i32 1, 0
  %lnot72 = xor i1 %tobool71, true
  %lnot74 = xor i1 %lnot72, true
  %lnot.ext75 = zext i1 %lnot74 to i32
  %conv76 = sext i32 %lnot.ext75 to i64
  %expval77 = call i64 @llvm.expect.i64(i64 %conv76, i64 0)
  br label %sw.epilog

sw.epilog:                                        ; preds = %if.end69, %sw.bb
  %sched_scan_mtx78 = getelementptr inbounds %struct.cfg80211_registered_device, %struct.cfg80211_registered_device* %call, i32 0, i32 28
  call void @mutex_unlock(%struct.mutex* %sched_scan_mtx78)
  %devlist_mtx79 = getelementptr inbounds %struct.cfg80211_registered_device, %struct.cfg80211_registered_device* %call, i32 0, i32 9
  call void @mutex_unlock(%struct.mutex* %devlist_mtx79)
  br label %cleanup.cont

cleanup.cont:                                     ; preds = %sw.epilog, %if.end20
  ret void
}

declare i32 @rtnl_is_locked() #3

declare void @dump_stack() #3

; Function Attrs: nounwind uwtable
define void @cfg80211_update_iface_num(%struct.cfg80211_registered_device* %rdev, i32 %iftype, i32 %num) #1 {
entry:
  %call = call i32 @rtnl_is_locked()
  %tobool = icmp ne i32 %call, 0
  %lnot = xor i1 %tobool, true
  %lnot1 = xor i1 %lnot, true
  %lnot2 = xor i1 %lnot1, true
  %lnot.ext = zext i1 %lnot2 to i32
  %conv = sext i32 %lnot.ext to i64
  %expval = call i64 @llvm.expect.i64(i64 %conv, i64 0)
  %tobool3 = icmp ne i64 %expval, 0
  br i1 %tobool3, label %if.then, label %do.end

if.then:                                          ; preds = %entry
  %call4 = call i32 (i8*, ...) @printk(i8* getelementptr inbounds ([37 x i8], [37 x i8]* @.str.12, i32 0, i32 0), i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.3, i32 0, i32 0), i32 842)
  call void @dump_stack()
  br label %do.end

do.end:                                           ; preds = %entry, %if.then
  %num_running_ifaces = getelementptr inbounds %struct.cfg80211_registered_device, %struct.cfg80211_registered_device* %rdev, i32 0, i32 17
  %0 = load i32, i32* %num_running_ifaces, align 4, !tbaa !189
  %add = add nsw i32 %0, %num
  store i32 %add, i32* %num_running_ifaces, align 4, !tbaa !189
  %cmp = icmp eq i32 %iftype, 6
  br i1 %cmp, label %if.then6, label %if.end8

if.then6:                                         ; preds = %do.end
  %num_running_monitor_ifaces = getelementptr inbounds %struct.cfg80211_registered_device, %struct.cfg80211_registered_device* %rdev, i32 0, i32 18
  %1 = load i32, i32* %num_running_monitor_ifaces, align 8, !tbaa !190
  %add7 = add nsw i32 %1, %num
  store i32 %add7, i32* %num_running_monitor_ifaces, align 8, !tbaa !190
  br label %if.end8

if.end8:                                          ; preds = %if.then6, %do.end
  ret void
}

; Function Attrs: nounwind uwtable
define void @cfg80211_leave(%struct.cfg80211_registered_device* %rdev, %struct.wireless_dev* %wdev) #1 {
entry:
  %netdev = getelementptr inbounds %struct.wireless_dev, %struct.wireless_dev* %wdev, i32 0, i32 3
  %0 = load %struct.net_device*, %struct.net_device** %netdev, align 8, !tbaa !64
  %iftype = getelementptr inbounds %struct.wireless_dev, %struct.wireless_dev* %wdev, i32 0, i32 1
  %1 = load i32, i32* %iftype, align 8, !tbaa !67
  br label %NodeBlock9

NodeBlock9:                                       ; preds = %entry
  %Pivot10 = icmp slt i32 %1, 3
  br i1 %Pivot10, label %NodeBlock, label %NodeBlock7

NodeBlock7:                                       ; preds = %NodeBlock9
  %Pivot8 = icmp slt i32 %1, 7
  br i1 %Pivot8, label %LeafBlock1, label %NodeBlock5

NodeBlock5:                                       ; preds = %NodeBlock7
  %Pivot6 = icmp slt i32 %1, 8
  br i1 %Pivot6, label %sw.bb5, label %LeafBlock3

LeafBlock3:                                       ; preds = %NodeBlock5
  %SwitchLeaf4 = icmp eq i32 %1, 8
  br i1 %SwitchLeaf4, label %sw.bb1, label %NewDefault

LeafBlock1:                                       ; preds = %NodeBlock7
  %SwitchLeaf2 = icmp eq i32 %1, 3
  br i1 %SwitchLeaf2, label %sw.bb7, label %NewDefault

NodeBlock:                                        ; preds = %NodeBlock9
  %Pivot = icmp slt i32 %1, 2
  br i1 %Pivot, label %LeafBlock, label %sw.bb1

LeafBlock:                                        ; preds = %NodeBlock
  %SwitchLeaf = icmp eq i32 %1, 1
  br i1 %SwitchLeaf, label %sw.bb, label %NewDefault

sw.bb:                                            ; preds = %LeafBlock
  %call = call i32 @cfg80211_leave_ibss(%struct.cfg80211_registered_device* %rdev, %struct.net_device* %0, i1 zeroext true)
  br label %sw.epilog

sw.bb1:                                           ; preds = %LeafBlock3, %NodeBlock
  %sched_scan_mtx = getelementptr inbounds %struct.cfg80211_registered_device, %struct.cfg80211_registered_device* %rdev, i32 0, i32 28
  call void @mutex_lock(%struct.mutex* %sched_scan_mtx)
  %call2 = call i32 @__cfg80211_stop_sched_scan(%struct.cfg80211_registered_device* %rdev, i1 zeroext false)
  %sched_scan_mtx3 = getelementptr inbounds %struct.cfg80211_registered_device, %struct.cfg80211_registered_device* %rdev, i32 0, i32 28
  call void @mutex_unlock(%struct.mutex* %sched_scan_mtx3)
  call void @wdev_lock(%struct.wireless_dev* %wdev)
  %call4 = call i32 @__cfg80211_disconnect(%struct.cfg80211_registered_device* %rdev, %struct.net_device* %0, i16 zeroext 3, i1 zeroext true)
  call void @wdev_unlock(%struct.wireless_dev* %wdev)
  br label %sw.epilog

sw.bb5:                                           ; preds = %NodeBlock5
  %call6 = call i32 @cfg80211_leave_mesh(%struct.cfg80211_registered_device* %rdev, %struct.net_device* %0)
  br label %sw.epilog

sw.bb7:                                           ; preds = %LeafBlock1
  %call8 = call i32 @cfg80211_stop_ap(%struct.cfg80211_registered_device* %rdev, %struct.net_device* %0)
  br label %sw.epilog

NewDefault:                                       ; preds = %LeafBlock3, %LeafBlock1, %LeafBlock
  br label %sw.epilog

sw.epilog:                                        ; preds = %NewDefault, %sw.bb7, %sw.bb5, %sw.bb1, %sw.bb
  %beacon_interval = getelementptr inbounds %struct.wireless_dev, %struct.wireless_dev* %wdev, i32 0, i32 27
  store i32 0, i32* %beacon_interval, align 8, !tbaa !191
  ret void
}

declare i32 @cfg80211_leave_ibss(%struct.cfg80211_registered_device*, %struct.net_device*, i1 zeroext) #3

declare i32 @__cfg80211_stop_sched_scan(%struct.cfg80211_registered_device*, i1 zeroext) #3

; Function Attrs: inlinehint nounwind uwtable
define internal void @wdev_lock(%struct.wireless_dev* %wdev) #0 {
entry:
  %mtx = getelementptr inbounds %struct.wireless_dev, %struct.wireless_dev* %wdev, i32 0, i32 7
  call void @mutex_lock(%struct.mutex* %mtx)
  ret void
}

declare i32 @__cfg80211_disconnect(%struct.cfg80211_registered_device*, %struct.net_device*, i16 zeroext, i1 zeroext) #3

; Function Attrs: inlinehint nounwind uwtable
define internal void @wdev_unlock(%struct.wireless_dev* %wdev) #0 {
entry:
  %mtx = getelementptr inbounds %struct.wireless_dev, %struct.wireless_dev* %wdev, i32 0, i32 7
  call void @mutex_unlock(%struct.mutex* %mtx)
  ret void
}

declare i32 @cfg80211_leave_mesh(%struct.cfg80211_registered_device*, %struct.net_device*) #3

declare i32 @cfg80211_stop_ap(%struct.cfg80211_registered_device*, %struct.net_device*) #3

; Function Attrs: nounwind uwtable
define internal i32 @cfg80211_init() #1 section ".init.text" {
entry:
  %call = call i32 @register_pernet_device(%struct.pernet_operations* @cfg80211_pernet_ops)
  %tobool = icmp ne i32 %call, 0
  br i1 %tobool, label %cleanup, label %if.end

if.end:                                           ; preds = %entry
  %call1 = call i32 @wiphy_sysfs_init()
  %tobool2 = icmp ne i32 %call1, 0
  br i1 %tobool2, label %out_fail_sysfs, label %if.end4

if.end4:                                          ; preds = %if.end
  %call5 = call i32 @register_netdevice_notifier(%struct.notifier_block* @cfg80211_netdev_notifier)
  %tobool6 = icmp ne i32 %call5, 0
  br i1 %tobool6, label %out_fail_notifier, label %if.end8

if.end8:                                          ; preds = %if.end4
  %call9 = call i32 @nl80211_init()
  %tobool10 = icmp ne i32 %call9, 0
  br i1 %tobool10, label %out_fail_nl80211, label %if.end12

if.end12:                                         ; preds = %if.end8
  %call13 = call %struct.dentry* @debugfs_create_dir(i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.14, i32 0, i32 0), %struct.dentry* null)
  store %struct.dentry* %call13, %struct.dentry** @ieee80211_debugfs_dir, align 8, !tbaa !12
  %call14 = call i32 @regulatory_init()
  %tobool15 = icmp ne i32 %call14, 0
  br i1 %tobool15, label %out_fail_reg, label %if.end17

if.end17:                                         ; preds = %if.end12
  %call18 = call %struct.workqueue_struct* (i8*, i32, i32, %struct.lock_class_key*, i8*, ...) @__alloc_workqueue_key(i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.15, i32 0, i32 0), i32 10, i32 1, %struct.lock_class_key* null, i8* null)
  store %struct.workqueue_struct* %call18, %struct.workqueue_struct** @cfg80211_wq, align 8, !tbaa !12
  %0 = load %struct.workqueue_struct*, %struct.workqueue_struct** @cfg80211_wq, align 8, !tbaa !12
  %tobool19 = icmp ne %struct.workqueue_struct* %0, null
  br i1 %tobool19, label %cleanup, label %out_fail_wq

out_fail_wq:                                      ; preds = %if.end17
  call void @regulatory_exit()
  br label %out_fail_reg

out_fail_reg:                                     ; preds = %if.end12, %out_fail_wq
  %err.0 = phi i32 [ -12, %out_fail_wq ], [ %call14, %if.end12 ]
  %1 = load %struct.dentry*, %struct.dentry** @ieee80211_debugfs_dir, align 8, !tbaa !12
  call void @debugfs_remove(%struct.dentry* %1)
  br label %out_fail_nl80211

out_fail_nl80211:                                 ; preds = %if.end8, %out_fail_reg
  %err.1 = phi i32 [ %err.0, %out_fail_reg ], [ %call9, %if.end8 ]
  %call22 = call i32 @unregister_netdevice_notifier(%struct.notifier_block* @cfg80211_netdev_notifier)
  br label %out_fail_notifier

out_fail_notifier:                                ; preds = %if.end4, %out_fail_nl80211
  %err.2 = phi i32 [ %err.1, %out_fail_nl80211 ], [ %call5, %if.end4 ]
  call void @wiphy_sysfs_exit()
  br label %out_fail_sysfs

out_fail_sysfs:                                   ; preds = %if.end, %out_fail_notifier
  %err.3 = phi i32 [ %err.2, %out_fail_notifier ], [ %call1, %if.end ]
  call void @unregister_pernet_device(%struct.pernet_operations* @cfg80211_pernet_ops)
  br label %cleanup

cleanup:                                          ; preds = %out_fail_sysfs, %entry, %if.end17
  %retval.0 = phi i32 [ 0, %if.end17 ], [ %err.3, %out_fail_sysfs ], [ %call, %entry ]
  ret i32 %retval.0
}

; Function Attrs: nounwind uwtable
define internal void @cfg80211_exit() #1 section ".exit.text" {
entry:
  %0 = load %struct.dentry*, %struct.dentry** @ieee80211_debugfs_dir, align 8, !tbaa !12
  call void @debugfs_remove(%struct.dentry* %0)
  call void @nl80211_exit()
  %call = call i32 @unregister_netdevice_notifier(%struct.notifier_block* @cfg80211_netdev_notifier)
  call void @wiphy_sysfs_exit()
  call void @regulatory_exit()
  call void @unregister_pernet_device(%struct.pernet_operations* @cfg80211_pernet_ops)
  %1 = load %struct.workqueue_struct*, %struct.workqueue_struct** @cfg80211_wq, align 8, !tbaa !12
  call void @destroy_workqueue(%struct.workqueue_struct* %1)
  ret void
}

declare void @debugfs_remove(%struct.dentry*) #3

declare void @nl80211_exit() #3

declare i32 @unregister_netdevice_notifier(%struct.notifier_block*) #3

declare void @wiphy_sysfs_exit() #3

declare void @regulatory_exit() #3

declare void @unregister_pernet_device(%struct.pernet_operations*) #3

declare void @destroy_workqueue(%struct.workqueue_struct*) #3

; Function Attrs: inlinehint nounwind uwtable
define internal i8* @kobject_name(%struct.kobject* %kobj) #0 {
entry:
  %name = getelementptr inbounds %struct.kobject, %struct.kobject* %kobj, i32 0, i32 0
  %0 = load i8*, i8** %name, align 8, !tbaa !192
  ret i8* %0
}

; Function Attrs: inlinehint nounwind uwtable
define internal %struct.net* @read_pnet(%struct.net** %pnet) #0 {
entry:
  %0 = load %struct.net*, %struct.net** %pnet, align 8, !tbaa !12
  ret %struct.net* %0
}

; Function Attrs: inlinehint nounwind uwtable
define internal void @write_pnet(%struct.net** %pnet, %struct.net* %net) #0 {
entry:
  store %struct.net* %net, %struct.net** %pnet, align 8, !tbaa !12
  ret void
}

; Function Attrs: inlinehint nounwind uwtable
define internal void @trace_rdev_stop_p2p_device(%struct.wiphy* %wiphy, %struct.wireless_dev* %wdev) #0 {
entry:
  %call = call zeroext i1 @static_key_false(%struct.static_key* getelementptr inbounds (%struct.tracepoint, %struct.tracepoint* @__tracepoint_rdev_stop_p2p_device, i32 0, i32 1))
  br i1 %call, label %do.body, label %if.end13

do.body:                                          ; preds = %entry
  call void @rcu_read_lock_sched_notrace()
  %0 = load volatile %struct.tracepoint_func*, %struct.tracepoint_func** getelementptr inbounds (%struct.tracepoint, %struct.tracepoint* @__tracepoint_rdev_stop_p2p_device, i32 0, i32 4), align 8, !tbaa !12
  %tobool = icmp ne %struct.tracepoint_func* %0, null
  br i1 %tobool, label %if.then5, label %if.end

if.then5:                                         ; preds = %do.body
  br label %do.body6

do.body6:                                         ; preds = %do.body6, %if.then5
  %it_func_ptr.0 = phi %struct.tracepoint_func* [ %0, %if.then5 ], [ %incdec.ptr, %do.body6 ]
  %func = getelementptr inbounds %struct.tracepoint_func, %struct.tracepoint_func* %it_func_ptr.0, i32 0, i32 0
  %1 = load i8*, i8** %func, align 8, !tbaa !193
  %data = getelementptr inbounds %struct.tracepoint_func, %struct.tracepoint_func* %it_func_ptr.0, i32 0, i32 1
  %2 = load i8*, i8** %data, align 8, !tbaa !195
  %3 = bitcast i8* %1 to void (i8*, %struct.wiphy*, %struct.wireless_dev*)*
  call void %3(i8* %2, %struct.wiphy* %wiphy, %struct.wireless_dev* %wdev)
  %incdec.ptr = getelementptr inbounds %struct.tracepoint_func, %struct.tracepoint_func* %it_func_ptr.0, i32 1
  %func8 = getelementptr inbounds %struct.tracepoint_func, %struct.tracepoint_func* %incdec.ptr, i32 0, i32 0
  %4 = load i8*, i8** %func8, align 8, !tbaa !193
  %tobool9 = icmp ne i8* %4, null
  br i1 %tobool9, label %do.body6, label %if.end

if.end:                                           ; preds = %do.body6, %do.body
  call void @rcu_read_unlock_sched_notrace()
  br label %if.end13

if.end13:                                         ; preds = %if.end, %entry
  ret void
}

; Function Attrs: inlinehint nounwind uwtable
define internal void @trace_rdev_return_void(%struct.wiphy* %wiphy) #0 {
entry:
  %call = call zeroext i1 @static_key_false(%struct.static_key* getelementptr inbounds (%struct.tracepoint, %struct.tracepoint* @__tracepoint_rdev_return_void, i32 0, i32 1))
  br i1 %call, label %do.body, label %if.end13

do.body:                                          ; preds = %entry
  call void @rcu_read_lock_sched_notrace()
  %0 = load volatile %struct.tracepoint_func*, %struct.tracepoint_func** getelementptr inbounds (%struct.tracepoint, %struct.tracepoint* @__tracepoint_rdev_return_void, i32 0, i32 4), align 8, !tbaa !12
  %tobool = icmp ne %struct.tracepoint_func* %0, null
  br i1 %tobool, label %if.then5, label %if.end

if.then5:                                         ; preds = %do.body
  br label %do.body6

do.body6:                                         ; preds = %do.body6, %if.then5
  %it_func_ptr.0 = phi %struct.tracepoint_func* [ %0, %if.then5 ], [ %incdec.ptr, %do.body6 ]
  %func = getelementptr inbounds %struct.tracepoint_func, %struct.tracepoint_func* %it_func_ptr.0, i32 0, i32 0
  %1 = load i8*, i8** %func, align 8, !tbaa !193
  %data = getelementptr inbounds %struct.tracepoint_func, %struct.tracepoint_func* %it_func_ptr.0, i32 0, i32 1
  %2 = load i8*, i8** %data, align 8, !tbaa !195
  %3 = bitcast i8* %1 to void (i8*, %struct.wiphy*)*
  call void %3(i8* %2, %struct.wiphy* %wiphy)
  %incdec.ptr = getelementptr inbounds %struct.tracepoint_func, %struct.tracepoint_func* %it_func_ptr.0, i32 1
  %func8 = getelementptr inbounds %struct.tracepoint_func, %struct.tracepoint_func* %incdec.ptr, i32 0, i32 0
  %4 = load i8*, i8** %func8, align 8, !tbaa !193
  %tobool9 = icmp ne i8* %4, null
  br i1 %tobool9, label %do.body6, label %if.end

if.end:                                           ; preds = %do.body6, %do.body
  call void @rcu_read_unlock_sched_notrace()
  br label %if.end13

if.end13:                                         ; preds = %if.end, %entry
  ret void
}

; Function Attrs: alwaysinline nounwind uwtable
define internal zeroext i1 @static_key_false(%struct.static_key* %key) #5 {
entry:
  %enabled = getelementptr inbounds %struct.static_key, %struct.static_key* %key, i32 0, i32 0
  %call = call i32 @atomic_read(%struct.atomic_t* %enabled)
  %tobool = icmp ne i32 %call, 0
  %lnot = xor i1 %tobool, true
  %lnot1 = xor i1 %lnot, true
  %lnot.ext = zext i1 %lnot1 to i32
  %conv = sext i32 %lnot.ext to i64
  %expval = call i64 @llvm.expect.i64(i64 %conv, i64 0)
  %cmp = icmp sgt i64 %expval, 0
  %. = select i1 %cmp, i1 true, i1 false
  ret i1 %.
}

; Function Attrs: inlinehint nounwind uwtable
define internal void @rcu_read_lock_sched_notrace() #0 {
entry:
  call void asm sideeffect "", "~{memory},~{dirflag},~{fpsr},~{flags}"() #6, !srcloc !196
  ret void
}

; Function Attrs: inlinehint nounwind uwtable
define internal void @rcu_read_unlock_sched_notrace() #0 {
entry:
  call void asm sideeffect "", "~{memory},~{dirflag},~{fpsr},~{flags}"() #6, !srcloc !197
  ret void
}

; Function Attrs: inlinehint nounwind uwtable
define internal i32 @atomic_read(%struct.atomic_t* %v) #0 {
entry:
  %counter = getelementptr inbounds %struct.atomic_t, %struct.atomic_t* %v, i32 0, i32 0
  %0 = load volatile i32, i32* %counter, align 4, !tbaa !55
  ret i32 %0
}

; Function Attrs: alwaysinline nounwind uwtable
define internal i8* @kmalloc(i64 %size, i32 %flags) #5 {
entry:
  %call = call i8* @__kmalloc(i64 %size, i32 %flags)
  ret i8* %call
}

declare i8* @__kmalloc(i64, i32) #3

declare i32 @dev_close(%struct.net_device*) #3

declare zeroext i1 @rfkill_blocked(%struct.rfkill*) #3

declare void @cfg80211_process_rdev_events(%struct.cfg80211_registered_device*) #3

; Function Attrs: inlinehint nounwind uwtable
define internal void @__list_add_rcu(%struct.list_head* %new, %struct.list_head* %prev, %struct.list_head* %next) #0 {
entry:
  %next1 = getelementptr inbounds %struct.list_head, %struct.list_head* %new, i32 0, i32 0
  store %struct.list_head* %next, %struct.list_head** %next1, align 8, !tbaa !116
  %prev2 = getelementptr inbounds %struct.list_head, %struct.list_head* %new, i32 0, i32 1
  store %struct.list_head* %prev, %struct.list_head** %prev2, align 8, !tbaa !117
  call void asm sideeffect "", "~{memory},~{dirflag},~{fpsr},~{flags}"() #6, !srcloc !198
  %next3 = getelementptr inbounds %struct.list_head, %struct.list_head* %prev, i32 0, i32 0
  store %struct.list_head* %new, %struct.list_head** %next3, align 8, !tbaa !12
  %prev4 = getelementptr inbounds %struct.list_head, %struct.list_head* %next, i32 0, i32 1
  store %struct.list_head* %new, %struct.list_head** %prev4, align 8, !tbaa !117
  ret void
}

; Function Attrs: inlinehint nounwind uwtable
define internal void @__list_del_entry(%struct.list_head* %entry1) #0 {
entry:
  %prev = getelementptr inbounds %struct.list_head, %struct.list_head* %entry1, i32 0, i32 1
  %0 = load %struct.list_head*, %struct.list_head** %prev, align 8, !tbaa !117
  %next = getelementptr inbounds %struct.list_head, %struct.list_head* %entry1, i32 0, i32 0
  %1 = load %struct.list_head*, %struct.list_head** %next, align 8, !tbaa !116
  call void @__list_del(%struct.list_head* %0, %struct.list_head* %1)
  ret void
}

; Function Attrs: inlinehint nounwind uwtable
define internal void @__list_del(%struct.list_head* %prev, %struct.list_head* %next) #0 {
entry:
  %prev1 = getelementptr inbounds %struct.list_head, %struct.list_head* %next, i32 0, i32 1
  store %struct.list_head* %prev, %struct.list_head** %prev1, align 8, !tbaa !117
  %next2 = getelementptr inbounds %struct.list_head, %struct.list_head* %prev, i32 0, i32 0
  store %struct.list_head* %next, %struct.list_head** %next2, align 8, !tbaa !116
  ret void
}

; Function Attrs: inlinehint nounwind uwtable
define internal void @rdev_rfkill_poll(%struct.cfg80211_registered_device* %rdev) #0 {
entry:
  %wiphy = getelementptr inbounds %struct.cfg80211_registered_device, %struct.cfg80211_registered_device* %rdev, i32 0, i32 34
  call void @trace_rdev_rfkill_poll(%struct.wiphy* %wiphy)
  %ops = getelementptr inbounds %struct.cfg80211_registered_device, %struct.cfg80211_registered_device* %rdev, i32 0, i32 0
  %0 = load %struct.cfg80211_ops*, %struct.cfg80211_ops** %ops, align 32, !tbaa !75
  %rfkill_poll = getelementptr inbounds %struct.cfg80211_ops, %struct.cfg80211_ops* %0, i32 0, i32 46
  %1 = load void (%struct.wiphy*)*, void (%struct.wiphy*)** %rfkill_poll, align 8, !tbaa !165
  %wiphy1 = getelementptr inbounds %struct.cfg80211_registered_device, %struct.cfg80211_registered_device* %rdev, i32 0, i32 34
  call void %1(%struct.wiphy* %wiphy1)
  %wiphy2 = getelementptr inbounds %struct.cfg80211_registered_device, %struct.cfg80211_registered_device* %rdev, i32 0, i32 34
  call void @trace_rdev_return_void(%struct.wiphy* %wiphy2)
  ret void
}

; Function Attrs: inlinehint nounwind uwtable
define internal void @trace_rdev_rfkill_poll(%struct.wiphy* %wiphy) #0 {
entry:
  %call = call zeroext i1 @static_key_false(%struct.static_key* getelementptr inbounds (%struct.tracepoint, %struct.tracepoint* @__tracepoint_rdev_rfkill_poll, i32 0, i32 1))
  br i1 %call, label %do.body, label %if.end13

do.body:                                          ; preds = %entry
  call void @rcu_read_lock_sched_notrace()
  %0 = load volatile %struct.tracepoint_func*, %struct.tracepoint_func** getelementptr inbounds (%struct.tracepoint, %struct.tracepoint* @__tracepoint_rdev_rfkill_poll, i32 0, i32 4), align 8, !tbaa !12
  %tobool = icmp ne %struct.tracepoint_func* %0, null
  br i1 %tobool, label %if.then5, label %if.end

if.then5:                                         ; preds = %do.body
  br label %do.body6

do.body6:                                         ; preds = %do.body6, %if.then5
  %it_func_ptr.0 = phi %struct.tracepoint_func* [ %0, %if.then5 ], [ %incdec.ptr, %do.body6 ]
  %func = getelementptr inbounds %struct.tracepoint_func, %struct.tracepoint_func* %it_func_ptr.0, i32 0, i32 0
  %1 = load i8*, i8** %func, align 8, !tbaa !193
  %data = getelementptr inbounds %struct.tracepoint_func, %struct.tracepoint_func* %it_func_ptr.0, i32 0, i32 1
  %2 = load i8*, i8** %data, align 8, !tbaa !195
  %3 = bitcast i8* %1 to void (i8*, %struct.wiphy*)*
  call void %3(i8* %2, %struct.wiphy* %wiphy)
  %incdec.ptr = getelementptr inbounds %struct.tracepoint_func, %struct.tracepoint_func* %it_func_ptr.0, i32 1
  %func8 = getelementptr inbounds %struct.tracepoint_func, %struct.tracepoint_func* %incdec.ptr, i32 0, i32 0
  %4 = load i8*, i8** %func8, align 8, !tbaa !193
  %tobool9 = icmp ne i8* %4, null
  br i1 %tobool9, label %do.body6, label %if.end

if.end:                                           ; preds = %do.body6, %do.body
  call void @rcu_read_unlock_sched_notrace()
  br label %if.end13

if.end13:                                         ; preds = %if.end, %entry
  ret void
}

declare void @synchronize_sched() #3

; Function Attrs: inlinehint nounwind uwtable
define internal void @trace_rdev_set_wakeup(%struct.wiphy* %wiphy, i1 zeroext %enabled) #0 {
entry:
  %frombool = zext i1 %enabled to i8
  %call = call zeroext i1 @static_key_false(%struct.static_key* getelementptr inbounds (%struct.tracepoint, %struct.tracepoint* @__tracepoint_rdev_set_wakeup, i32 0, i32 1))
  br i1 %call, label %do.body, label %if.end14

do.body:                                          ; preds = %entry
  call void @rcu_read_lock_sched_notrace()
  %0 = load volatile %struct.tracepoint_func*, %struct.tracepoint_func** getelementptr inbounds (%struct.tracepoint, %struct.tracepoint* @__tracepoint_rdev_set_wakeup, i32 0, i32 4), align 8, !tbaa !12
  %tobool = icmp ne %struct.tracepoint_func* %0, null
  br i1 %tobool, label %if.then5, label %if.end

if.then5:                                         ; preds = %do.body
  br label %do.body6

do.body6:                                         ; preds = %do.body6, %if.then5
  %it_func_ptr.0 = phi %struct.tracepoint_func* [ %0, %if.then5 ], [ %incdec.ptr, %do.body6 ]
  %func = getelementptr inbounds %struct.tracepoint_func, %struct.tracepoint_func* %it_func_ptr.0, i32 0, i32 0
  %1 = load i8*, i8** %func, align 8, !tbaa !193
  %data = getelementptr inbounds %struct.tracepoint_func, %struct.tracepoint_func* %it_func_ptr.0, i32 0, i32 1
  %2 = load i8*, i8** %data, align 8, !tbaa !195
  %3 = bitcast i8* %1 to void (i8*, %struct.wiphy*, i1)*
  %tobool7 = trunc i8 %frombool to i1
  call void %3(i8* %2, %struct.wiphy* %wiphy, i1 zeroext %tobool7)
  %incdec.ptr = getelementptr inbounds %struct.tracepoint_func, %struct.tracepoint_func* %it_func_ptr.0, i32 1
  %func9 = getelementptr inbounds %struct.tracepoint_func, %struct.tracepoint_func* %incdec.ptr, i32 0, i32 0
  %4 = load i8*, i8** %func9, align 8, !tbaa !193
  %tobool10 = icmp ne i8* %4, null
  br i1 %tobool10, label %do.body6, label %if.end

if.end:                                           ; preds = %do.body6, %do.body
  call void @rcu_read_unlock_sched_notrace()
  br label %if.end14

if.end14:                                         ; preds = %if.end, %entry
  ret void
}

declare void @sock_release(%struct.socket*) #3

; Function Attrs: inlinehint nounwind uwtable
define internal zeroext i1 @queue_work(%struct.workqueue_struct* %wq, %struct.work_struct* %work) #0 {
entry:
  %call = call zeroext i1 @queue_work_on(i32 64, %struct.workqueue_struct* %wq, %struct.work_struct* %work)
  ret i1 %call
}

declare zeroext i1 @queue_work_on(i32, %struct.workqueue_struct*, %struct.work_struct*) #3

declare i32 @register_pernet_device(%struct.pernet_operations*) #3

declare i32 @wiphy_sysfs_init() #3

declare i32 @register_netdevice_notifier(%struct.notifier_block*) #3

declare i32 @nl80211_init() #3

declare i32 @regulatory_init() #3 section ".init.text"

declare %struct.workqueue_struct* @__alloc_workqueue_key(i8*, i32, i32, %struct.lock_class_key*, i8*, ...) #3

; Function Attrs: nounwind uwtable
define internal i32 @cfg80211_netdev_notifier_call(%struct.notifier_block* %nb, i64 %state, i8* %ndev) #1 {
entry:
  %.compoundliteral = alloca %struct.atomic64_t, align 8
  %.compoundliteral36 = alloca %struct.raw_spinlock, align 2
  %.compoundliteral46 = alloca %struct.raw_spinlock, align 2
  %0 = bitcast i8* %ndev to %struct.net_device*
  %ieee80211_ptr = getelementptr inbounds %struct.net_device, %struct.net_device* %0, i32 0, i32 55
  %1 = load %struct.wireless_dev*, %struct.wireless_dev** %ieee80211_ptr, align 8, !tbaa !43
  %tobool = icmp ne %struct.wireless_dev* %1, null
  br i1 %tobool, label %if.end, label %cleanup

if.end:                                           ; preds = %entry
  %wiphy = getelementptr inbounds %struct.wireless_dev, %struct.wireless_dev* %1, i32 0, i32 0
  %2 = load %struct.wiphy*, %struct.wiphy** %wiphy, align 8, !tbaa !50
  %call = call %struct.cfg80211_registered_device* @wiphy_to_dev(%struct.wiphy* %2)
  %iftype = getelementptr inbounds %struct.wireless_dev, %struct.wireless_dev* %1, i32 0, i32 1
  %3 = load i32, i32* %iftype, align 8, !tbaa !67
  %cmp = icmp eq i32 %3, 0
  %lnot = xor i1 %cmp, true
  %lnot1 = xor i1 %lnot, true
  %lnot.ext = zext i1 %lnot1 to i32
  %tobool2 = icmp ne i32 %lnot.ext, 0
  %lnot3 = xor i1 %tobool2, true
  %lnot5 = xor i1 %lnot3, true
  %lnot.ext6 = zext i1 %lnot5 to i32
  %conv = sext i32 %lnot.ext6 to i64
  %expval = call i64 @llvm.expect.i64(i64 %conv, i64 0)
  %tobool7 = icmp ne i64 %expval, 0
  br i1 %tobool7, label %if.then8, label %if.end9

if.then8:                                         ; preds = %if.end
  call void @warn_slowpath_null(i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.3, i32 0, i32 0), i32 902)
  br label %if.end9

if.end9:                                          ; preds = %if.then8, %if.end
  %tobool10 = icmp ne i32 %lnot.ext, 0
  %lnot11 = xor i1 %tobool10, true
  %lnot13 = xor i1 %lnot11, true
  %lnot.ext14 = zext i1 %lnot13 to i32
  %conv15 = sext i32 %lnot.ext14 to i64
  %expval16 = call i64 @llvm.expect.i64(i64 %conv15, i64 0)
  br label %NodeBlock19

NodeBlock19:                                      ; preds = %if.end9
  %Pivot20 = icmp slt i64 %state, 6
  br i1 %Pivot20, label %NodeBlock3, label %NodeBlock17

NodeBlock17:                                      ; preds = %NodeBlock19
  %Pivot18 = icmp slt i64 %state, 13
  br i1 %Pivot18, label %NodeBlock9, label %NodeBlock15

NodeBlock15:                                      ; preds = %NodeBlock17
  %Pivot16 = icmp slt i64 %state, 16
  br i1 %Pivot16, label %LeafBlock11, label %LeafBlock13

LeafBlock13:                                      ; preds = %NodeBlock15
  %SwitchLeaf14 = icmp eq i64 %state, 16
  br i1 %SwitchLeaf14, label %sw.bb, label %NewDefault

LeafBlock11:                                      ; preds = %NodeBlock15
  %SwitchLeaf12 = icmp eq i64 %state, 13
  br i1 %SwitchLeaf12, label %sw.bb135, label %NewDefault

NodeBlock9:                                       ; preds = %NodeBlock17
  %Pivot10 = icmp slt i64 %state, 9
  br i1 %Pivot10, label %LeafBlock5, label %LeafBlock7

LeafBlock7:                                       ; preds = %NodeBlock9
  %SwitchLeaf8 = icmp eq i64 %state, 9
  br i1 %SwitchLeaf8, label %sw.bb83, label %NewDefault

LeafBlock5:                                       ; preds = %NodeBlock9
  %SwitchLeaf6 = icmp eq i64 %state, 6
  br i1 %SwitchLeaf6, label %sw.bb121, label %NewDefault

NodeBlock3:                                       ; preds = %NodeBlock19
  %Pivot4 = icmp slt i64 %state, 2
  br i1 %Pivot4, label %LeafBlock, label %NodeBlock

NodeBlock:                                        ; preds = %NodeBlock3
  %Pivot = icmp slt i64 %state, 5
  br i1 %Pivot, label %LeafBlock1, label %do.body

LeafBlock1:                                       ; preds = %NodeBlock
  %SwitchLeaf2 = icmp eq i64 %state, 2
  br i1 %SwitchLeaf2, label %sw.bb84, label %NewDefault

LeafBlock:                                        ; preds = %NodeBlock3
  %SwitchLeaf = icmp eq i64 %state, 1
  br i1 %SwitchLeaf, label %sw.bb88, label %NewDefault

sw.bb:                                            ; preds = %LeafBlock13
  %dev17 = getelementptr inbounds %struct.net_device, %struct.net_device* %0, i32 0, i32 90
  %type = getelementptr inbounds %struct.device, %struct.device* %dev17, i32 0, i32 4
  store %struct.device_type* @wiphy_type, %struct.device_type** %type, align 8, !tbaa !199
  br label %cleanup

do.body:                                          ; preds = %NodeBlock
  %mtx = getelementptr inbounds %struct.wireless_dev, %struct.wireless_dev* %1, i32 0, i32 7
  call void @__mutex_init(%struct.mutex* %mtx, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.16, i32 0, i32 0), %struct.lock_class_key* @cfg80211_netdev_notifier_call.__key)
  %cleanup_work = getelementptr inbounds %struct.wireless_dev, %struct.wireless_dev* %1, i32 0, i32 8
  call void @__init_work(%struct.work_struct* %cleanup_work, i32 0)
  %cleanup_work21 = getelementptr inbounds %struct.wireless_dev, %struct.wireless_dev* %1, i32 0, i32 8
  %data = getelementptr inbounds %struct.work_struct, %struct.work_struct* %cleanup_work21, i32 0, i32 0
  %counter = getelementptr inbounds %struct.atomic64_t, %struct.atomic64_t* %.compoundliteral, i32 0, i32 0
  store i64 68719476704, i64* %counter, align 8, !tbaa !100
  %4 = bitcast %struct.atomic64_t* %data to i8*
  %5 = bitcast %struct.atomic64_t* %.compoundliteral to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %4, i8* %5, i64 8, i32 8, i1 false), !tbaa.struct !101
  %cleanup_work22 = getelementptr inbounds %struct.wireless_dev, %struct.wireless_dev* %1, i32 0, i32 8
  %entry23 = getelementptr inbounds %struct.work_struct, %struct.work_struct* %cleanup_work22, i32 0, i32 1
  call void @INIT_LIST_HEAD(%struct.list_head* %entry23)
  %cleanup_work25 = getelementptr inbounds %struct.wireless_dev, %struct.wireless_dev* %1, i32 0, i32 8
  %func = getelementptr inbounds %struct.work_struct, %struct.work_struct* %cleanup_work25, i32 0, i32 2
  store void (%struct.work_struct*)* @wdev_cleanup_work, void (%struct.work_struct*)** %func, align 8, !tbaa !103
  %event_list = getelementptr inbounds %struct.wireless_dev, %struct.wireless_dev* %1, i32 0, i32 19
  call void @INIT_LIST_HEAD(%struct.list_head* %event_list)
  %event_lock = getelementptr inbounds %struct.wireless_dev, %struct.wireless_dev* %1, i32 0, i32 20
  %call33 = call %struct.raw_spinlock* @spinlock_check(%struct.spinlock* %event_lock)
  %event_lock35 = getelementptr inbounds %struct.wireless_dev, %struct.wireless_dev* %1, i32 0, i32 20
  %6 = getelementptr inbounds %struct.spinlock, %struct.spinlock* %event_lock35, i32 0, i32 0
  %rlock = bitcast %union.anon.0* %6 to %struct.raw_spinlock*
  %raw_lock = getelementptr inbounds %struct.raw_spinlock, %struct.raw_spinlock* %.compoundliteral36, i32 0, i32 0
  %7 = getelementptr inbounds %struct.arch_spinlock, %struct.arch_spinlock* %raw_lock, i32 0, i32 0
  %head_tail = bitcast %union.anon.1* %7 to i16*
  store i16 0, i16* %head_tail, align 2, !tbaa !97
  %8 = bitcast %struct.raw_spinlock* %rlock to i8*
  %9 = bitcast %struct.raw_spinlock* %.compoundliteral36 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %8, i8* %9, i64 2, i32 2, i1 false), !tbaa.struct !98
  %mgmt_registrations = getelementptr inbounds %struct.wireless_dev, %struct.wireless_dev* %1, i32 0, i32 5
  call void @INIT_LIST_HEAD(%struct.list_head* %mgmt_registrations)
  %mgmt_registrations_lock = getelementptr inbounds %struct.wireless_dev, %struct.wireless_dev* %1, i32 0, i32 6
  %call42 = call %struct.raw_spinlock* @spinlock_check(%struct.spinlock* %mgmt_registrations_lock)
  %mgmt_registrations_lock44 = getelementptr inbounds %struct.wireless_dev, %struct.wireless_dev* %1, i32 0, i32 6
  %10 = getelementptr inbounds %struct.spinlock, %struct.spinlock* %mgmt_registrations_lock44, i32 0, i32 0
  %rlock45 = bitcast %union.anon.0* %10 to %struct.raw_spinlock*
  %raw_lock47 = getelementptr inbounds %struct.raw_spinlock, %struct.raw_spinlock* %.compoundliteral46, i32 0, i32 0
  %11 = getelementptr inbounds %struct.arch_spinlock, %struct.arch_spinlock* %raw_lock47, i32 0, i32 0
  %head_tail48 = bitcast %union.anon.1* %11 to i16*
  store i16 0, i16* %head_tail48, align 2, !tbaa !97
  %12 = bitcast %struct.raw_spinlock* %rlock45 to i8*
  %13 = bitcast %struct.raw_spinlock* %.compoundliteral46 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %12, i8* %13, i64 2, i32 2, i1 false), !tbaa.struct !98
  %devlist_mtx = getelementptr inbounds %struct.cfg80211_registered_device, %struct.cfg80211_registered_device* %call, i32 0, i32 9
  call void @mutex_lock(%struct.mutex* %devlist_mtx)
  %wdev_id = getelementptr inbounds %struct.cfg80211_registered_device, %struct.cfg80211_registered_device* %call, i32 0, i32 12
  %14 = load i32, i32* %wdev_id, align 4, !tbaa !200
  %inc = add nsw i32 %14, 1
  store i32 %inc, i32* %wdev_id, align 4, !tbaa !200
  %identifier = getelementptr inbounds %struct.wireless_dev, %struct.wireless_dev* %1, i32 0, i32 4
  store i32 %inc, i32* %identifier, align 8, !tbaa !201
  %list = getelementptr inbounds %struct.wireless_dev, %struct.wireless_dev* %1, i32 0, i32 2
  %wdev_list = getelementptr inbounds %struct.cfg80211_registered_device, %struct.cfg80211_registered_device* %call, i32 0, i32 10
  call void @list_add_rcu(%struct.list_head* %list, %struct.list_head* %wdev_list)
  %devlist_generation = getelementptr inbounds %struct.cfg80211_registered_device, %struct.cfg80211_registered_device* %call, i32 0, i32 11
  %15 = load i32, i32* %devlist_generation, align 8, !tbaa !188
  %inc53 = add nsw i32 %15, 1
  store i32 %inc53, i32* %devlist_generation, align 8, !tbaa !188
  %features = getelementptr inbounds %struct.net_device, %struct.net_device* %0, i32 0, i32 12
  %16 = load i64, i64* %features, align 16, !tbaa !65
  %or = or i64 %16, 8192
  store i64 %or, i64* %features, align 16, !tbaa !65
  %dev54 = getelementptr inbounds %struct.net_device, %struct.net_device* %0, i32 0, i32 90
  %kobj = getelementptr inbounds %struct.device, %struct.device* %dev54, i32 0, i32 2
  %wiphy55 = getelementptr inbounds %struct.cfg80211_registered_device, %struct.cfg80211_registered_device* %call, i32 0, i32 34
  %dev56 = getelementptr inbounds %struct.wiphy, %struct.wiphy* %wiphy55, i32 0, i32 42
  %kobj57 = getelementptr inbounds %struct.device, %struct.device* %dev56, i32 0, i32 2
  %call58 = call i32 @sysfs_create_link(%struct.kobject* %kobj, %struct.kobject* %kobj57, i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.17, i32 0, i32 0))
  %tobool59 = icmp ne i32 %call58, 0
  br i1 %tobool59, label %if.then60, label %if.end62

if.then60:                                        ; preds = %do.body
  %call61 = call i32 (i8*, ...) @printk(i8* getelementptr inbounds ([55 x i8], [55 x i8]* @.str.18, i32 0, i32 0))
  br label %if.end62

if.end62:                                         ; preds = %if.then60, %do.body
  %netdev = getelementptr inbounds %struct.wireless_dev, %struct.wireless_dev* %1, i32 0, i32 3
  store %struct.net_device* %0, %struct.net_device** %netdev, align 8, !tbaa !64
  %sme_state = getelementptr inbounds %struct.wireless_dev, %struct.wireless_dev* %1, i32 0, i32 16
  store i32 0, i32* %sme_state, align 4, !tbaa !202
  %devlist_mtx63 = getelementptr inbounds %struct.cfg80211_registered_device, %struct.cfg80211_registered_device* %call, i32 0, i32 9
  call void @mutex_unlock(%struct.mutex* %devlist_mtx63)
  %wiphy64 = getelementptr inbounds %struct.wireless_dev, %struct.wireless_dev* %1, i32 0, i32 0
  %17 = load %struct.wiphy*, %struct.wiphy** %wiphy64, align 8, !tbaa !50
  %flags = getelementptr inbounds %struct.wiphy, %struct.wiphy* %17, i32 0, i32 10
  %18 = load i32, i32* %flags, align 4, !tbaa !121
  %and = and i32 %18, 16
  %tobool65 = icmp ne i32 %and, 0
  %ps = getelementptr inbounds %struct.wireless_dev, %struct.wireless_dev* %1, i32 0, i32 25
  %.sink = select i1 %tobool65, i8 1, i8 0
  store i8 %.sink, i8* %ps, align 1, !tbaa !203
  %ps_timeout = getelementptr inbounds %struct.wireless_dev, %struct.wireless_dev* %1, i32 0, i32 26
  store i32 -1, i32* %ps_timeout, align 4, !tbaa !204
  call void @netdev_set_default_ethtool_ops(%struct.net_device* %0, %struct.ethtool_ops* @cfg80211_ethtool_ops)
  %iftype69 = getelementptr inbounds %struct.wireless_dev, %struct.wireless_dev* %1, i32 0, i32 1
  %19 = load i32, i32* %iftype69, align 8, !tbaa !67
  %cmp70 = icmp eq i32 %19, 2
  br i1 %cmp70, label %land.lhs.true, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %if.end62
  %iftype72 = getelementptr inbounds %struct.wireless_dev, %struct.wireless_dev* %1, i32 0, i32 1
  %20 = load i32, i32* %iftype72, align 8, !tbaa !67
  %cmp73 = icmp eq i32 %20, 8
  br i1 %cmp73, label %land.lhs.true, label %lor.lhs.false75

lor.lhs.false75:                                  ; preds = %lor.lhs.false
  %iftype76 = getelementptr inbounds %struct.wireless_dev, %struct.wireless_dev* %1, i32 0, i32 1
  %21 = load i32, i32* %iftype76, align 8, !tbaa !67
  %cmp77 = icmp eq i32 %21, 1
  br i1 %cmp77, label %land.lhs.true, label %cleanup

land.lhs.true:                                    ; preds = %lor.lhs.false75, %lor.lhs.false, %if.end62
  %use_4addr = getelementptr inbounds %struct.wireless_dev, %struct.wireless_dev* %1, i32 0, i32 9
  %22 = load i8, i8* %use_4addr, align 8, !tbaa !205, !range !69
  %tobool79 = trunc i8 %22 to i1
  br i1 %tobool79, label %cleanup, label %if.then80

if.then80:                                        ; preds = %land.lhs.true
  %priv_flags = getelementptr inbounds %struct.net_device, %struct.net_device* %0, i32 0, i32 25
  %23 = load i32, i32* %priv_flags, align 4, !tbaa !206
  %or81 = or i32 %23, 2048
  store i32 %or81, i32* %priv_flags, align 4, !tbaa !206
  br label %cleanup

sw.bb83:                                          ; preds = %LeafBlock7
  call void @cfg80211_leave(%struct.cfg80211_registered_device* %call, %struct.wireless_dev* %1)
  br label %cleanup

sw.bb84:                                          ; preds = %LeafBlock1
  %iftype85 = getelementptr inbounds %struct.wireless_dev, %struct.wireless_dev* %1, i32 0, i32 1
  %24 = load i32, i32* %iftype85, align 8, !tbaa !67
  call void @cfg80211_update_iface_num(%struct.cfg80211_registered_device* %call, i32 %24, i32 -1)
  call void @dev_hold(%struct.net_device* %0)
  %25 = load %struct.workqueue_struct*, %struct.workqueue_struct** @cfg80211_wq, align 8, !tbaa !12
  %cleanup_work86 = getelementptr inbounds %struct.wireless_dev, %struct.wireless_dev* %1, i32 0, i32 8
  %call87 = call zeroext i1 @queue_work(%struct.workqueue_struct* %25, %struct.work_struct* %cleanup_work86)
  br label %cleanup

sw.bb88:                                          ; preds = %LeafBlock
  %cleanup_work89 = getelementptr inbounds %struct.wireless_dev, %struct.wireless_dev* %1, i32 0, i32 8
  %call90 = call zeroext i1 @cancel_work_sync(%struct.work_struct* %cleanup_work89)
  br i1 %call90, label %if.then91, label %if.end94

if.then91:                                        ; preds = %sw.bb88
  %devlist_mtx92 = getelementptr inbounds %struct.cfg80211_registered_device, %struct.cfg80211_registered_device* %call, i32 0, i32 9
  call void @mutex_lock(%struct.mutex* %devlist_mtx92)
  %opencount = getelementptr inbounds %struct.cfg80211_registered_device, %struct.cfg80211_registered_device* %call, i32 0, i32 13
  %26 = load i32, i32* %opencount, align 16, !tbaa !70
  %dec = add nsw i32 %26, -1
  store i32 %dec, i32* %opencount, align 16, !tbaa !70
  %devlist_mtx93 = getelementptr inbounds %struct.cfg80211_registered_device, %struct.cfg80211_registered_device* %call, i32 0, i32 9
  call void @mutex_unlock(%struct.mutex* %devlist_mtx93)
  call void @dev_put(%struct.net_device* %0)
  br label %if.end94

if.end94:                                         ; preds = %if.then91, %sw.bb88
  %iftype95 = getelementptr inbounds %struct.wireless_dev, %struct.wireless_dev* %1, i32 0, i32 1
  %27 = load i32, i32* %iftype95, align 8, !tbaa !67
  call void @cfg80211_update_iface_num(%struct.cfg80211_registered_device* %call, i32 %27, i32 1)
  call void @cfg80211_lock_rdev(%struct.cfg80211_registered_device* %call)
  %devlist_mtx96 = getelementptr inbounds %struct.cfg80211_registered_device, %struct.cfg80211_registered_device* %call, i32 0, i32 9
  call void @mutex_lock(%struct.mutex* %devlist_mtx96)
  %sched_scan_mtx = getelementptr inbounds %struct.cfg80211_registered_device, %struct.cfg80211_registered_device* %call, i32 0, i32 28
  call void @mutex_lock(%struct.mutex* %sched_scan_mtx)
  call void @wdev_lock(%struct.wireless_dev* %1)
  call void @wdev_unlock(%struct.wireless_dev* %1)
  %sched_scan_mtx98 = getelementptr inbounds %struct.cfg80211_registered_device, %struct.cfg80211_registered_device* %call, i32 0, i32 28
  call void @mutex_unlock(%struct.mutex* %sched_scan_mtx98)
  %opencount99 = getelementptr inbounds %struct.cfg80211_registered_device, %struct.cfg80211_registered_device* %call, i32 0, i32 13
  %28 = load i32, i32* %opencount99, align 16, !tbaa !70
  %inc100 = add nsw i32 %28, 1
  store i32 %inc100, i32* %opencount99, align 16, !tbaa !70
  %devlist_mtx101 = getelementptr inbounds %struct.cfg80211_registered_device, %struct.cfg80211_registered_device* %call, i32 0, i32 9
  call void @mutex_unlock(%struct.mutex* %devlist_mtx101)
  call void @cfg80211_unlock_rdev(%struct.cfg80211_registered_device* %call)
  %iftype102 = getelementptr inbounds %struct.wireless_dev, %struct.wireless_dev* %1, i32 0, i32 1
  %29 = load i32, i32* %iftype102, align 8, !tbaa !67
  %cmp103 = icmp eq i32 %29, 2
  br i1 %cmp103, label %land.lhs.true109, label %lor.lhs.false105

lor.lhs.false105:                                 ; preds = %if.end94
  %iftype106 = getelementptr inbounds %struct.wireless_dev, %struct.wireless_dev* %1, i32 0, i32 1
  %30 = load i32, i32* %iftype106, align 8, !tbaa !67
  %cmp107 = icmp eq i32 %30, 8
  br i1 %cmp107, label %land.lhs.true109, label %cleanup

land.lhs.true109:                                 ; preds = %lor.lhs.false105, %if.end94
  %ops = getelementptr inbounds %struct.cfg80211_registered_device, %struct.cfg80211_registered_device* %call, i32 0, i32 0
  %31 = load %struct.cfg80211_ops*, %struct.cfg80211_ops** %ops, align 32, !tbaa !75
  %set_power_mgmt = getelementptr inbounds %struct.cfg80211_ops, %struct.cfg80211_ops* %31, i32 0, i32 56
  %32 = load i32 (%struct.wiphy*, %struct.net_device*, i1, i32)*, i32 (%struct.wiphy*, %struct.net_device*, i1, i32)** %set_power_mgmt, align 8, !tbaa !207
  %tobool110 = icmp ne i32 (%struct.wiphy*, %struct.net_device*, i1, i32)* %32, null
  br i1 %tobool110, label %if.then111, label %cleanup

if.then111:                                       ; preds = %land.lhs.true109
  %ps112 = getelementptr inbounds %struct.wireless_dev, %struct.wireless_dev* %1, i32 0, i32 25
  %33 = load i8, i8* %ps112, align 1, !tbaa !203, !range !69
  %tobool113 = trunc i8 %33 to i1
  %ps_timeout114 = getelementptr inbounds %struct.wireless_dev, %struct.wireless_dev* %1, i32 0, i32 26
  %34 = load i32, i32* %ps_timeout114, align 4, !tbaa !204
  %call115 = call i32 @rdev_set_power_mgmt(%struct.cfg80211_registered_device* %call, %struct.net_device* %0, i1 zeroext %tobool113, i32 %34)
  %tobool116 = icmp ne i32 %call115, 0
  br i1 %tobool116, label %if.then117, label %cleanup

if.then117:                                       ; preds = %if.then111
  %ps118 = getelementptr inbounds %struct.wireless_dev, %struct.wireless_dev* %1, i32 0, i32 25
  store i8 0, i8* %ps118, align 1, !tbaa !203
  br label %cleanup

sw.bb121:                                         ; preds = %LeafBlock5
  %devlist_mtx122 = getelementptr inbounds %struct.cfg80211_registered_device, %struct.cfg80211_registered_device* %call, i32 0, i32 9
  call void @mutex_lock(%struct.mutex* %devlist_mtx122)
  %list123 = getelementptr inbounds %struct.wireless_dev, %struct.wireless_dev* %1, i32 0, i32 2
  %call124 = call i32 @list_empty(%struct.list_head* %list123)
  %tobool125 = icmp ne i32 %call124, 0
  br i1 %tobool125, label %if.end132, label %if.then126

if.then126:                                       ; preds = %sw.bb121
  %dev127 = getelementptr inbounds %struct.net_device, %struct.net_device* %0, i32 0, i32 90
  %kobj128 = getelementptr inbounds %struct.device, %struct.device* %dev127, i32 0, i32 2
  call void @sysfs_remove_link(%struct.kobject* %kobj128, i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.17, i32 0, i32 0))
  %list129 = getelementptr inbounds %struct.wireless_dev, %struct.wireless_dev* %1, i32 0, i32 2
  call void @list_del_rcu(%struct.list_head* %list129)
  %devlist_generation130 = getelementptr inbounds %struct.cfg80211_registered_device, %struct.cfg80211_registered_device* %call, i32 0, i32 11
  %35 = load i32, i32* %devlist_generation130, align 8, !tbaa !188
  %inc131 = add nsw i32 %35, 1
  store i32 %inc131, i32* %devlist_generation130, align 8, !tbaa !188
  call void @cfg80211_mlme_purge_registrations(%struct.wireless_dev* %1)
  br label %if.end132

if.end132:                                        ; preds = %if.then126, %sw.bb121
  %devlist_mtx133 = getelementptr inbounds %struct.cfg80211_registered_device, %struct.cfg80211_registered_device* %call, i32 0, i32 9
  call void @mutex_unlock(%struct.mutex* %devlist_mtx133)
  call void @synchronize_rcu()
  %list134 = getelementptr inbounds %struct.wireless_dev, %struct.wireless_dev* %1, i32 0, i32 2
  call void @INIT_LIST_HEAD(%struct.list_head* %list134)
  call void @cfg80211_process_wdev_events(%struct.wireless_dev* %1)
  br label %cleanup

sw.bb135:                                         ; preds = %LeafBlock11
  %wiphy136 = getelementptr inbounds %struct.wireless_dev, %struct.wireless_dev* %1, i32 0, i32 0
  %36 = load %struct.wiphy*, %struct.wiphy** %wiphy136, align 8, !tbaa !50
  %interface_modes = getelementptr inbounds %struct.wiphy, %struct.wiphy* %36, i32 0, i32 8
  %37 = load i16, i16* %interface_modes, align 16, !tbaa !118
  %conv137 = zext i16 %37 to i64
  %iftype138 = getelementptr inbounds %struct.wireless_dev, %struct.wireless_dev* %1, i32 0, i32 1
  %38 = load i32, i32* %iftype138, align 8, !tbaa !67
  %sh_prom = zext i32 %38 to i64
  %shl = shl i64 1, %sh_prom
  %and139 = and i64 %conv137, %shl
  %tobool140 = icmp ne i64 %and139, 0
  br i1 %tobool140, label %if.end143, label %if.then141

if.then141:                                       ; preds = %sw.bb135
  %call142 = call i32 @notifier_from_errno(i32 -95)
  br label %cleanup

if.end143:                                        ; preds = %sw.bb135
  %rfkill = getelementptr inbounds %struct.cfg80211_registered_device, %struct.cfg80211_registered_device* %call, i32 0, i32 4
  %39 = load %struct.rfkill*, %struct.rfkill** %rfkill, align 8, !tbaa !109
  %call144 = call zeroext i1 @rfkill_blocked(%struct.rfkill* %39)
  br i1 %call144, label %if.then145, label %if.end147

if.then145:                                       ; preds = %if.end143
  %call146 = call i32 @notifier_from_errno(i32 -132)
  br label %cleanup

if.end147:                                        ; preds = %if.end143
  %devlist_mtx148 = getelementptr inbounds %struct.cfg80211_registered_device, %struct.cfg80211_registered_device* %call, i32 0, i32 9
  call void @mutex_lock(%struct.mutex* %devlist_mtx148)
  %iftype149 = getelementptr inbounds %struct.wireless_dev, %struct.wireless_dev* %1, i32 0, i32 1
  %40 = load i32, i32* %iftype149, align 8, !tbaa !67
  %call150 = call i32 @cfg80211_can_add_interface(%struct.cfg80211_registered_device* %call, i32 %40)
  %devlist_mtx151 = getelementptr inbounds %struct.cfg80211_registered_device, %struct.cfg80211_registered_device* %call, i32 0, i32 9
  call void @mutex_unlock(%struct.mutex* %devlist_mtx151)
  %tobool152 = icmp ne i32 %call150, 0
  br i1 %tobool152, label %if.then153, label %cleanup

if.then153:                                       ; preds = %if.end147
  %call154 = call i32 @notifier_from_errno(i32 %call150)
  br label %cleanup

NewDefault:                                       ; preds = %LeafBlock13, %LeafBlock11, %LeafBlock7, %LeafBlock5, %LeafBlock1, %LeafBlock
  br label %cleanup

cleanup:                                          ; preds = %NewDefault, %sw.bb, %sw.bb83, %sw.bb84, %if.end132, %if.then80, %land.lhs.true, %lor.lhs.false75, %if.then111, %if.then117, %land.lhs.true109, %lor.lhs.false105, %if.end147, %entry, %if.then153, %if.then145, %if.then141
  %retval.0 = phi i32 [ %call146, %if.then145 ], [ %call154, %if.then153 ], [ %call142, %if.then141 ], [ 0, %entry ], [ 0, %if.end147 ], [ 0, %lor.lhs.false105 ], [ 0, %land.lhs.true109 ], [ 0, %if.then117 ], [ 0, %if.then111 ], [ 0, %lor.lhs.false75 ], [ 0, %land.lhs.true ], [ 0, %if.then80 ], [ 0, %if.end132 ], [ 0, %sw.bb84 ], [ 0, %sw.bb83 ], [ 0, %sw.bb ], [ 0, %NewDefault ]
  ret i32 %retval.0
}

; Function Attrs: nounwind uwtable
define internal void @wdev_cleanup_work(%struct.work_struct* %work) #1 {
entry:
  %0 = bitcast %struct.work_struct* %work to i8*
  %add.ptr = getelementptr inbounds i8, i8* %0, i64 -112
  %1 = bitcast i8* %add.ptr to %struct.wireless_dev*
  %wiphy = getelementptr inbounds %struct.wireless_dev, %struct.wireless_dev* %1, i32 0, i32 0
  %2 = load %struct.wiphy*, %struct.wiphy** %wiphy, align 8, !tbaa !50
  %call = call %struct.cfg80211_registered_device* @wiphy_to_dev(%struct.wiphy* %2)
  %sched_scan_mtx = getelementptr inbounds %struct.cfg80211_registered_device, %struct.cfg80211_registered_device* %call, i32 0, i32 28
  call void @mutex_lock(%struct.mutex* %sched_scan_mtx)
  %scan_req = getelementptr inbounds %struct.cfg80211_registered_device, %struct.cfg80211_registered_device* %call, i32 0, i32 23
  %3 = load %struct.cfg80211_scan_request*, %struct.cfg80211_scan_request** %scan_req, align 16, !tbaa !71
  %tobool = icmp ne %struct.cfg80211_scan_request* %3, null
  br i1 %tobool, label %land.rhs, label %land.end

land.rhs:                                         ; preds = %entry
  %scan_req1 = getelementptr inbounds %struct.cfg80211_registered_device, %struct.cfg80211_registered_device* %call, i32 0, i32 23
  %4 = load %struct.cfg80211_scan_request*, %struct.cfg80211_scan_request** %scan_req1, align 16, !tbaa !71
  %wdev2 = getelementptr inbounds %struct.cfg80211_scan_request, %struct.cfg80211_scan_request* %4, i32 0, i32 7
  %5 = load %struct.wireless_dev*, %struct.wireless_dev** %wdev2, align 8, !tbaa !72
  %cmp = icmp eq %struct.wireless_dev* %5, %1
  br label %land.end

land.end:                                         ; preds = %land.rhs, %entry
  %6 = phi i1 [ false, %entry ], [ %cmp, %land.rhs ]
  %lnot = xor i1 %6, true
  %lnot3 = xor i1 %lnot, true
  %lnot.ext = zext i1 %lnot3 to i32
  %tobool4 = icmp ne i32 %lnot.ext, 0
  %lnot5 = xor i1 %tobool4, true
  %lnot7 = xor i1 %lnot5, true
  %lnot.ext8 = zext i1 %lnot7 to i32
  %conv = sext i32 %lnot.ext8 to i64
  %expval = call i64 @llvm.expect.i64(i64 %conv, i64 0)
  %tobool9 = icmp ne i64 %expval, 0
  br i1 %tobool9, label %if.then, label %if.end

if.then:                                          ; preds = %land.end
  call void @warn_slowpath_null(i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.3, i32 0, i32 0), i32 788)
  br label %if.end

if.end:                                           ; preds = %if.then, %land.end
  %tobool11 = icmp ne i32 %lnot.ext, 0
  %lnot12 = xor i1 %tobool11, true
  %lnot14 = xor i1 %lnot12, true
  %lnot.ext15 = zext i1 %lnot14 to i32
  %conv16 = sext i32 %lnot.ext15 to i64
  %expval17 = call i64 @llvm.expect.i64(i64 %conv16, i64 0)
  %tobool18 = icmp ne i64 %expval17, 0
  br i1 %tobool18, label %if.then19, label %if.end21

if.then19:                                        ; preds = %if.end
  %scan_req20 = getelementptr inbounds %struct.cfg80211_registered_device, %struct.cfg80211_registered_device* %call, i32 0, i32 23
  %7 = load %struct.cfg80211_scan_request*, %struct.cfg80211_scan_request** %scan_req20, align 16, !tbaa !71
  %aborted = getelementptr inbounds %struct.cfg80211_scan_request, %struct.cfg80211_scan_request* %7, i32 0, i32 10
  store i8 1, i8* %aborted, align 8, !tbaa !74
  call void @___cfg80211_scan_done(%struct.cfg80211_registered_device* %call, i1 zeroext true)
  br label %if.end21

if.end21:                                         ; preds = %if.then19, %if.end
  %sched_scan_req = getelementptr inbounds %struct.cfg80211_registered_device, %struct.cfg80211_registered_device* %call, i32 0, i32 24
  %8 = load %struct.cfg80211_sched_scan_request*, %struct.cfg80211_sched_scan_request** %sched_scan_req, align 8, !tbaa !208
  %tobool23 = icmp ne %struct.cfg80211_sched_scan_request* %8, null
  br i1 %tobool23, label %land.rhs24, label %land.end28

land.rhs24:                                       ; preds = %if.end21
  %sched_scan_req25 = getelementptr inbounds %struct.cfg80211_registered_device, %struct.cfg80211_registered_device* %call, i32 0, i32 24
  %9 = load %struct.cfg80211_sched_scan_request*, %struct.cfg80211_sched_scan_request** %sched_scan_req25, align 8, !tbaa !208
  %dev = getelementptr inbounds %struct.cfg80211_sched_scan_request, %struct.cfg80211_sched_scan_request* %9, i32 0, i32 11
  %10 = load %struct.net_device*, %struct.net_device** %dev, align 8, !tbaa !209
  %netdev = getelementptr inbounds %struct.wireless_dev, %struct.wireless_dev* %1, i32 0, i32 3
  %11 = load %struct.net_device*, %struct.net_device** %netdev, align 8, !tbaa !64
  %cmp26 = icmp eq %struct.net_device* %10, %11
  br label %land.end28

land.end28:                                       ; preds = %land.rhs24, %if.end21
  %12 = phi i1 [ false, %if.end21 ], [ %cmp26, %land.rhs24 ]
  %lnot29 = xor i1 %12, true
  %lnot31 = xor i1 %lnot29, true
  %lnot.ext32 = zext i1 %lnot31 to i32
  %tobool33 = icmp ne i32 %lnot.ext32, 0
  %lnot34 = xor i1 %tobool33, true
  %lnot36 = xor i1 %lnot34, true
  %lnot.ext37 = zext i1 %lnot36 to i32
  %conv38 = sext i32 %lnot.ext37 to i64
  %expval39 = call i64 @llvm.expect.i64(i64 %conv38, i64 0)
  %tobool40 = icmp ne i64 %expval39, 0
  br i1 %tobool40, label %if.then41, label %if.end42

if.then41:                                        ; preds = %land.end28
  call void @warn_slowpath_null(i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.3, i32 0, i32 0), i32 794)
  br label %if.end42

if.end42:                                         ; preds = %if.then41, %land.end28
  %tobool44 = icmp ne i32 %lnot.ext32, 0
  %lnot45 = xor i1 %tobool44, true
  %lnot47 = xor i1 %lnot45, true
  %lnot.ext48 = zext i1 %lnot47 to i32
  %conv49 = sext i32 %lnot.ext48 to i64
  %expval50 = call i64 @llvm.expect.i64(i64 %conv49, i64 0)
  %tobool51 = icmp ne i64 %expval50, 0
  br i1 %tobool51, label %if.then52, label %if.end54

if.then52:                                        ; preds = %if.end42
  %call53 = call i32 @__cfg80211_stop_sched_scan(%struct.cfg80211_registered_device* %call, i1 zeroext false)
  br label %if.end54

if.end54:                                         ; preds = %if.then52, %if.end42
  %sched_scan_mtx55 = getelementptr inbounds %struct.cfg80211_registered_device, %struct.cfg80211_registered_device* %call, i32 0, i32 28
  call void @mutex_unlock(%struct.mutex* %sched_scan_mtx55)
  %devlist_mtx = getelementptr inbounds %struct.cfg80211_registered_device, %struct.cfg80211_registered_device* %call, i32 0, i32 9
  call void @mutex_lock(%struct.mutex* %devlist_mtx)
  %opencount = getelementptr inbounds %struct.cfg80211_registered_device, %struct.cfg80211_registered_device* %call, i32 0, i32 13
  %13 = load i32, i32* %opencount, align 16, !tbaa !70
  %dec = add nsw i32 %13, -1
  store i32 %dec, i32* %opencount, align 16, !tbaa !70
  %devlist_mtx56 = getelementptr inbounds %struct.cfg80211_registered_device, %struct.cfg80211_registered_device* %call, i32 0, i32 9
  call void @mutex_unlock(%struct.mutex* %devlist_mtx56)
  %dev_wait = getelementptr inbounds %struct.cfg80211_registered_device, %struct.cfg80211_registered_device* %call, i32 0, i32 14
  call void @__wake_up(%struct.__wait_queue_head* %dev_wait, i32 3, i32 1, i8* null)
  %netdev57 = getelementptr inbounds %struct.wireless_dev, %struct.wireless_dev* %1, i32 0, i32 3
  %14 = load %struct.net_device*, %struct.net_device** %netdev57, align 8, !tbaa !64
  call void @dev_put(%struct.net_device* %14)
  ret void
}

declare i32 @sysfs_create_link(%struct.kobject*, %struct.kobject*, i8*) #3

declare void @netdev_set_default_ethtool_ops(%struct.net_device*, %struct.ethtool_ops*) #3

; Function Attrs: inlinehint nounwind uwtable
define internal void @dev_hold(%struct.net_device* %dev) #0 {
entry:
  %pcpu_refcnt = getelementptr inbounds %struct.net_device, %struct.net_device* %dev, i32 0, i32 77
  %0 = load i32*, i32** %pcpu_refcnt, align 8, !tbaa !53
  call void asm "incl %gs:${0:P}", "=*m,*m,~{dirflag},~{fpsr},~{flags}"(i32* %0, i32* %0) #6, !srcloc !211
  ret void
}

; Function Attrs: inlinehint nounwind uwtable
define internal i32 @rdev_set_power_mgmt(%struct.cfg80211_registered_device* %rdev, %struct.net_device* %dev, i1 zeroext %enabled, i32 %timeout) #0 {
entry:
  %frombool = zext i1 %enabled to i8
  %wiphy = getelementptr inbounds %struct.cfg80211_registered_device, %struct.cfg80211_registered_device* %rdev, i32 0, i32 34
  %tobool = trunc i8 %frombool to i1
  call void @trace_rdev_set_power_mgmt(%struct.wiphy* %wiphy, %struct.net_device* %dev, i1 zeroext %tobool, i32 %timeout)
  %ops = getelementptr inbounds %struct.cfg80211_registered_device, %struct.cfg80211_registered_device* %rdev, i32 0, i32 0
  %0 = load %struct.cfg80211_ops*, %struct.cfg80211_ops** %ops, align 32, !tbaa !75
  %set_power_mgmt = getelementptr inbounds %struct.cfg80211_ops, %struct.cfg80211_ops* %0, i32 0, i32 56
  %1 = load i32 (%struct.wiphy*, %struct.net_device*, i1, i32)*, i32 (%struct.wiphy*, %struct.net_device*, i1, i32)** %set_power_mgmt, align 8, !tbaa !207
  %wiphy1 = getelementptr inbounds %struct.cfg80211_registered_device, %struct.cfg80211_registered_device* %rdev, i32 0, i32 34
  %tobool2 = trunc i8 %frombool to i1
  %call = call i32 %1(%struct.wiphy* %wiphy1, %struct.net_device* %dev, i1 zeroext %tobool2, i32 %timeout)
  %wiphy3 = getelementptr inbounds %struct.cfg80211_registered_device, %struct.cfg80211_registered_device* %rdev, i32 0, i32 34
  call void @trace_rdev_return_int(%struct.wiphy* %wiphy3, i32 %call)
  ret i32 %call
}

declare void @sysfs_remove_link(%struct.kobject*, i8*) #3

declare void @cfg80211_mlme_purge_registrations(%struct.wireless_dev*) #3

declare void @cfg80211_process_wdev_events(%struct.wireless_dev*) #3

; Function Attrs: inlinehint nounwind uwtable
define internal i32 @notifier_from_errno(i32 %err) #0 {
entry:
  %tobool = icmp ne i32 %err, 0
  %sub = sub nsw i32 1, %err
  %or = or i32 32768, %sub
  %retval.0 = select i1 %tobool, i32 %or, i32 1
  ret i32 %retval.0
}

; Function Attrs: inlinehint nounwind uwtable
define internal i32 @cfg80211_can_add_interface(%struct.cfg80211_registered_device* %rdev, i32 %iftype) #0 {
entry:
  %call = call i32 @cfg80211_can_change_interface(%struct.cfg80211_registered_device* %rdev, %struct.wireless_dev* null, i32 %iftype)
  ret i32 %call
}

declare void @__wake_up(%struct.__wait_queue_head*, i32, i32, i8*) #3

; Function Attrs: inlinehint nounwind uwtable
define internal void @trace_rdev_set_power_mgmt(%struct.wiphy* %wiphy, %struct.net_device* %netdev, i1 zeroext %enabled, i32 %timeout) #0 {
entry:
  %frombool = zext i1 %enabled to i8
  %call = call zeroext i1 @static_key_false(%struct.static_key* getelementptr inbounds (%struct.tracepoint, %struct.tracepoint* @__tracepoint_rdev_set_power_mgmt, i32 0, i32 1))
  br i1 %call, label %do.body, label %if.end14

do.body:                                          ; preds = %entry
  call void @rcu_read_lock_sched_notrace()
  %0 = load volatile %struct.tracepoint_func*, %struct.tracepoint_func** getelementptr inbounds (%struct.tracepoint, %struct.tracepoint* @__tracepoint_rdev_set_power_mgmt, i32 0, i32 4), align 8, !tbaa !12
  %tobool = icmp ne %struct.tracepoint_func* %0, null
  br i1 %tobool, label %if.then5, label %if.end

if.then5:                                         ; preds = %do.body
  br label %do.body6

do.body6:                                         ; preds = %do.body6, %if.then5
  %it_func_ptr.0 = phi %struct.tracepoint_func* [ %0, %if.then5 ], [ %incdec.ptr, %do.body6 ]
  %func = getelementptr inbounds %struct.tracepoint_func, %struct.tracepoint_func* %it_func_ptr.0, i32 0, i32 0
  %1 = load i8*, i8** %func, align 8, !tbaa !193
  %data = getelementptr inbounds %struct.tracepoint_func, %struct.tracepoint_func* %it_func_ptr.0, i32 0, i32 1
  %2 = load i8*, i8** %data, align 8, !tbaa !195
  %3 = bitcast i8* %1 to void (i8*, %struct.wiphy*, %struct.net_device*, i1, i32)*
  %tobool7 = trunc i8 %frombool to i1
  call void %3(i8* %2, %struct.wiphy* %wiphy, %struct.net_device* %netdev, i1 zeroext %tobool7, i32 %timeout)
  %incdec.ptr = getelementptr inbounds %struct.tracepoint_func, %struct.tracepoint_func* %it_func_ptr.0, i32 1
  %func9 = getelementptr inbounds %struct.tracepoint_func, %struct.tracepoint_func* %incdec.ptr, i32 0, i32 0
  %4 = load i8*, i8** %func9, align 8, !tbaa !193
  %tobool10 = icmp ne i8* %4, null
  br i1 %tobool10, label %do.body6, label %if.end

if.end:                                           ; preds = %do.body6, %do.body
  call void @rcu_read_unlock_sched_notrace()
  br label %if.end14

if.end14:                                         ; preds = %if.end, %entry
  ret void
}

; Function Attrs: inlinehint nounwind uwtable
define internal void @trace_rdev_return_int(%struct.wiphy* %wiphy, i32 %ret) #0 {
entry:
  %call = call zeroext i1 @static_key_false(%struct.static_key* getelementptr inbounds (%struct.tracepoint, %struct.tracepoint* @__tracepoint_rdev_return_int, i32 0, i32 1))
  br i1 %call, label %do.body, label %if.end13

do.body:                                          ; preds = %entry
  call void @rcu_read_lock_sched_notrace()
  %0 = load volatile %struct.tracepoint_func*, %struct.tracepoint_func** getelementptr inbounds (%struct.tracepoint, %struct.tracepoint* @__tracepoint_rdev_return_int, i32 0, i32 4), align 8, !tbaa !12
  %tobool = icmp ne %struct.tracepoint_func* %0, null
  br i1 %tobool, label %if.then5, label %if.end

if.then5:                                         ; preds = %do.body
  br label %do.body6

do.body6:                                         ; preds = %do.body6, %if.then5
  %it_func_ptr.0 = phi %struct.tracepoint_func* [ %0, %if.then5 ], [ %incdec.ptr, %do.body6 ]
  %func = getelementptr inbounds %struct.tracepoint_func, %struct.tracepoint_func* %it_func_ptr.0, i32 0, i32 0
  %1 = load i8*, i8** %func, align 8, !tbaa !193
  %data = getelementptr inbounds %struct.tracepoint_func, %struct.tracepoint_func* %it_func_ptr.0, i32 0, i32 1
  %2 = load i8*, i8** %data, align 8, !tbaa !195
  %3 = bitcast i8* %1 to void (i8*, %struct.wiphy*, i32)*
  call void %3(i8* %2, %struct.wiphy* %wiphy, i32 %ret)
  %incdec.ptr = getelementptr inbounds %struct.tracepoint_func, %struct.tracepoint_func* %it_func_ptr.0, i32 1
  %func8 = getelementptr inbounds %struct.tracepoint_func, %struct.tracepoint_func* %incdec.ptr, i32 0, i32 0
  %4 = load i8*, i8** %func8, align 8, !tbaa !193
  %tobool9 = icmp ne i8* %4, null
  br i1 %tobool9, label %do.body6, label %if.end

if.end:                                           ; preds = %do.body6, %do.body
  call void @rcu_read_unlock_sched_notrace()
  br label %if.end13

if.end13:                                         ; preds = %if.end, %entry
  ret void
}

; Function Attrs: inlinehint nounwind uwtable
define internal i32 @cfg80211_can_change_interface(%struct.cfg80211_registered_device* %rdev, %struct.wireless_dev* %wdev, i32 %iftype) #0 {
entry:
  %call = call i32 @cfg80211_can_use_iftype_chan(%struct.cfg80211_registered_device* %rdev, %struct.wireless_dev* %wdev, i32 %iftype, %struct.ieee80211_channel* null, i32 0, i8 zeroext 0)
  ret i32 %call
}

declare i32 @cfg80211_can_use_iftype_chan(%struct.cfg80211_registered_device*, %struct.wireless_dev*, i32, %struct.ieee80211_channel*, i32, i8 zeroext) #3

; Function Attrs: nounwind uwtable
define internal void @cfg80211_pernet_exit(%struct.net* %net) #1 {
entry:
  call void @rtnl_lock()
  call void @mutex_lock(%struct.mutex* @cfg80211_mutex)
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %next.sink = phi %struct.list_head** [ %next, %for.inc ], [ getelementptr inbounds (%struct.list_head, %struct.list_head* @cfg80211_rdev_list, i32 0, i32 0), %entry ]
  %0 = load %struct.list_head*, %struct.list_head** %next.sink, align 8, !tbaa !12
  %1 = bitcast %struct.list_head* %0 to i8*
  %add.ptr24 = getelementptr inbounds i8, i8* %1, i64 -8
  %2 = bitcast i8* %add.ptr24 to %struct.cfg80211_registered_device*
  %list = getelementptr inbounds %struct.cfg80211_registered_device, %struct.cfg80211_registered_device* %2, i32 0, i32 1
  %cmp = icmp ne %struct.list_head* %list, @cfg80211_rdev_list
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %wiphy = getelementptr inbounds %struct.cfg80211_registered_device, %struct.cfg80211_registered_device* %2, i32 0, i32 34
  %call = call %struct.net* @wiphy_net(%struct.wiphy* %wiphy)
  %call1 = call i32 @net_eq(%struct.net* %call, %struct.net* %net)
  %tobool = icmp ne i32 %call1, 0
  br i1 %tobool, label %if.then, label %for.inc

if.then:                                          ; preds = %for.body
  %call2 = call i32 @cfg80211_switch_netns(%struct.cfg80211_registered_device* %2, %struct.net* @init_net)
  %tobool3 = icmp ne i32 %call2, 0
  %lnot = xor i1 %tobool3, true
  %lnot4 = xor i1 %lnot, true
  %lnot.ext = zext i1 %lnot4 to i32
  %tobool5 = icmp ne i32 %lnot.ext, 0
  %lnot6 = xor i1 %tobool5, true
  %lnot8 = xor i1 %lnot6, true
  %lnot.ext9 = zext i1 %lnot8 to i32
  %conv = sext i32 %lnot.ext9 to i64
  %expval = call i64 @llvm.expect.i64(i64 %conv, i64 0)
  %tobool10 = icmp ne i64 %expval, 0
  br i1 %tobool10, label %if.then11, label %if.end

if.then11:                                        ; preds = %if.then
  call void @warn_slowpath_null(i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.3, i32 0, i32 0), i32 1095)
  br label %if.end

if.end:                                           ; preds = %if.then11, %if.then
  %tobool13 = icmp ne i32 %lnot.ext, 0
  %lnot14 = xor i1 %tobool13, true
  %lnot16 = xor i1 %lnot14, true
  %lnot.ext17 = zext i1 %lnot16 to i32
  %conv18 = sext i32 %lnot.ext17 to i64
  %expval19 = call i64 @llvm.expect.i64(i64 %conv18, i64 0)
  br label %for.inc

for.inc:                                          ; preds = %for.body, %if.end
  %list22 = getelementptr inbounds %struct.cfg80211_registered_device, %struct.cfg80211_registered_device* %2, i32 0, i32 1
  %next = getelementptr inbounds %struct.list_head, %struct.list_head* %list22, i32 0, i32 0
  br label %for.cond

for.end:                                          ; preds = %for.cond
  call void @mutex_unlock(%struct.mutex* @cfg80211_mutex)
  call void @rtnl_unlock()
  ret void
}

; Function Attrs: inlinehint nounwind uwtable
define internal i32 @net_eq(%struct.net* %net1, %struct.net* %net2) #0 {
entry:
  %cmp = icmp eq %struct.net* %net1, %net2
  %conv = zext i1 %cmp to i32
  ret i32 %conv
}

attributes #0 = { inlinehint nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { argmemonly nounwind }
attributes #3 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nounwind readnone }
attributes #5 = { alwaysinline nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #6 = { nounwind }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 5.0.1 (tags/RELEASE_500/final)"}
!2 = !{!3, !4, i64 24}
!3 = !{!"smp_ops", !4, i64 0, !4, i64 8, !4, i64 16, !4, i64 24, !4, i64 32, !4, i64 40, !4, i64 48, !4, i64 56, !4, i64 64, !4, i64 72, !4, i64 80}
!4 = !{!"any pointer", !5, i64 0}
!5 = !{!"omnipotent char", !6, i64 0}
!6 = !{!"Simple C/C++ TBAA"}
!7 = !{!3, !4, i64 32}
!8 = !{!3, !4, i64 8}
!9 = !{!3, !4, i64 40}
!10 = !{!3, !4, i64 16}
!11 = !{!3, !4, i64 0}
!12 = !{!4, !4, i64 0}
!13 = !{!14, !18, i64 136}
!14 = !{!"cfg80211_registered_device", !4, i64 0, !15, i64 8, !16, i64 24, !20, i64 64, !4, i64 88, !21, i64 96, !5, i64 128, !5, i64 132, !18, i64 136, !16, i64 144, !15, i64 184, !18, i64 200, !18, i64 204, !18, i64 208, !24, i64 216, !15, i64 240, !19, i64 256, !18, i64 260, !18, i64 264, !19, i64 268, !15, i64 272, !25, i64 288, !18, i64 296, !4, i64 304, !4, i64 312, !23, i64 320, !21, i64 328, !21, i64 360, !16, i64 392, !21, i64 432, !21, i64 464, !4, i64 496, !26, i64 504, !18, i64 632, !28, i64 640}
!15 = !{!"list_head", !4, i64 0, !4, i64 8}
!16 = !{!"mutex", !17, i64 0, !19, i64 4, !15, i64 8, !4, i64 24, !4, i64 32}
!17 = !{!"", !18, i64 0}
!18 = !{!"int", !5, i64 0}
!19 = !{!"spinlock", !5, i64 0}
!20 = !{!"rfkill_ops", !4, i64 0, !4, i64 8, !4, i64 16}
!21 = !{!"work_struct", !22, i64 0, !15, i64 8, !4, i64 24}
!22 = !{!"", !23, i64 0}
!23 = !{!"long", !5, i64 0}
!24 = !{!"__wait_queue_head", !19, i64 0, !15, i64 8}
!25 = !{!"rb_root", !4, i64 0}
!26 = !{!"delayed_work", !21, i64 0, !27, i64 32, !4, i64 112, !18, i64 120}
!27 = !{!"timer_list", !15, i64 0, !23, i64 16, !4, i64 24, !4, i64 32, !23, i64 40, !18, i64 48, !18, i64 52, !4, i64 56, !5, i64 64}
!28 = !{!"wiphy", !5, i64 0, !5, i64 6, !4, i64 16, !4, i64 24, !4, i64 32, !18, i64 40, !29, i64 44, !29, i64 46, !29, i64 48, !29, i64 50, !18, i64 52, !18, i64 56, !18, i64 60, !5, i64 64, !18, i64 68, !5, i64 72, !5, i64 73, !5, i64 74, !29, i64 76, !29, i64 78, !18, i64 80, !4, i64 88, !5, i64 96, !5, i64 97, !18, i64 100, !18, i64 104, !5, i64 108, !5, i64 109, !18, i64 144, !30, i64 152, !29, i64 184, !5, i64 186, !18, i64 188, !18, i64 192, !18, i64 196, !4, i64 200, !4, i64 208, !5, i64 216, !4, i64 224, !5, i64 232, !4, i64 256, !4, i64 264, !31, i64 272, !36, i64 712, !4, i64 720, !4, i64 728, !4, i64 736, !4, i64 744, !5, i64 768}
!29 = !{!"short", !5, i64 0}
!30 = !{!"wiphy_wowlan_support", !18, i64 0, !18, i64 4, !18, i64 8, !18, i64 12, !18, i64 16, !4, i64 24}
!31 = !{!"device", !4, i64 0, !4, i64 8, !32, i64 16, !4, i64 80, !4, i64 88, !16, i64 96, !4, i64 136, !4, i64 144, !4, i64 152, !34, i64 160, !4, i64 248, !18, i64 256, !4, i64 264, !38, i64 272, !4, i64 280, !15, i64 288, !4, i64 304, !39, i64 312, !4, i64 328, !40, i64 336, !18, i64 344, !18, i64 348, !19, i64 352, !15, i64 360, !41, i64 376, !4, i64 408, !4, i64 416, !4, i64 424, !4, i64 432}
!32 = !{!"kobject", !4, i64 0, !15, i64 8, !4, i64 24, !4, i64 32, !4, i64 40, !4, i64 48, !33, i64 56, !18, i64 60, !18, i64 60, !18, i64 60, !18, i64 60, !18, i64 60}
!33 = !{!"kref", !17, i64 0}
!34 = !{!"dev_pm_info", !35, i64 0, !18, i64 4, !18, i64 4, !36, i64 4, !36, i64 4, !36, i64 4, !36, i64 4, !19, i64 6, !15, i64 8, !37, i64 24, !4, i64 56, !36, i64 64, !36, i64 64, !4, i64 72, !4, i64 80}
!35 = !{!"pm_message", !18, i64 0}
!36 = !{!"_Bool", !5, i64 0}
!37 = !{!"completion", !18, i64 0, !24, i64 8}
!38 = !{!"long long", !5, i64 0}
!39 = !{!"dev_archdata", !4, i64 0, !4, i64 8}
!40 = !{!"acpi_dev_node", !4, i64 0}
!41 = !{!"klist_node", !4, i64 0, !15, i64 8, !33, i64 24}
!42 = !{i32 -2143173244, i32 -2143173219, i32 -2143172949, i32 -2143173152, i32 -2143173121, i32 -2143173091}
!43 = !{!44, !4, i64 616}
!44 = !{!"net_device", !5, i64 0, !45, i64 16, !4, i64 32, !23, i64 40, !23, i64 48, !23, i64 56, !18, i64 64, !23, i64 72, !15, i64 80, !15, i64 96, !15, i64 112, !15, i64 128, !38, i64 144, !38, i64 152, !38, i64 160, !38, i64 168, !38, i64 176, !18, i64 184, !18, i64 188, !46, i64 192, !22, i64 376, !4, i64 384, !4, i64 392, !4, i64 400, !18, i64 408, !18, i64 412, !29, i64 416, !29, i64 418, !5, i64 420, !5, i64 421, !5, i64 422, !5, i64 423, !18, i64 424, !29, i64 428, !29, i64 430, !29, i64 432, !29, i64 434, !5, i64 436, !5, i64 468, !5, i64 469, !5, i64 470, !29, i64 472, !19, i64 474, !47, i64 480, !47, i64 504, !47, i64 528, !4, i64 552, !36, i64 560, !18, i64 564, !18, i64 568, !4, i64 576, !4, i64 584, !4, i64 592, !4, i64 600, !4, i64 608, !4, i64 616, !23, i64 624, !4, i64 632, !4, i64 640, !18, i64 648, !18, i64 652, !4, i64 656, !4, i64 664, !4, i64 672, !5, i64 680, !4, i64 768, !18, i64 776, !18, i64 780, !4, i64 784, !23, i64 792, !19, i64 800, !4, i64 808, !4, i64 816, !23, i64 824, !18, i64 832, !27, i64 840, !4, i64 920, !15, i64 928, !45, i64 944, !15, i64 960, !5, i64 976, !36, i64 977, !5, i64 978, !4, i64 984, !4, i64 992, !4, i64 1000, !5, i64 1008, !4, i64 1016, !4, i64 1024, !31, i64 1032, !5, i64 1472, !4, i64 1504, !18, i64 1512, !29, i64 1516, !5, i64 1518, !5, i64 1520, !5, i64 1584, !4, i64 1600, !4, i64 1608, !18, i64 1616, !48, i64 1624}
!45 = !{!"hlist_node", !4, i64 0, !4, i64 8}
!46 = !{!"net_device_stats", !23, i64 0, !23, i64 8, !23, i64 16, !23, i64 24, !23, i64 32, !23, i64 40, !23, i64 48, !23, i64 56, !23, i64 64, !23, i64 72, !23, i64 80, !23, i64 88, !23, i64 96, !23, i64 104, !23, i64 112, !23, i64 120, !23, i64 128, !23, i64 136, !23, i64 144, !23, i64 152, !23, i64 160, !23, i64 168, !23, i64 176}
!47 = !{!"netdev_hw_addr_list", !15, i64 0, !18, i64 16}
!48 = !{!"pm_qos_request", !49, i64 0, !18, i64 40, !26, i64 48}
!49 = !{!"plist_node", !18, i64 0, !15, i64 8, !15, i64 24}
!50 = !{!51, !4, i64 0}
!51 = !{!"wireless_dev", !4, i64 0, !5, i64 8, !15, i64 16, !4, i64 32, !18, i64 40, !15, i64 48, !19, i64 64, !16, i64 72, !21, i64 112, !36, i64 144, !36, i64 145, !5, i64 146, !5, i64 152, !5, i64 184, !5, i64 185, !5, i64 186, !5, i64 188, !4, i64 192, !4, i64 200, !15, i64 208, !19, i64 224, !4, i64 232, !52, i64 240, !4, i64 264, !36, i64 272, !36, i64 273, !18, i64 276, !18, i64 280, !18, i64 284, !36, i64 288, !23, i64 296}
!52 = !{!"cfg80211_chan_def", !4, i64 0, !5, i64 8, !18, i64 12, !18, i64 16}
!53 = !{!44, !4, i64 920}
!54 = !{i32 -2143604904}
!55 = !{!18, !18, i64 0}
!56 = !{!14, !4, i64 1360}
!57 = !{!58, !4, i64 24}
!58 = !{!"dentry", !18, i64 0, !59, i64 4, !60, i64 8, !4, i64 24, !61, i64 32, !4, i64 48, !5, i64 56, !18, i64 88, !19, i64 92, !4, i64 96, !4, i64 104, !23, i64 112, !4, i64 120, !15, i64 128, !5, i64 144, !15, i64 160, !45, i64 176}
!59 = !{!"seqcount", !18, i64 0}
!60 = !{!"hlist_bl_node", !4, i64 0, !4, i64 8}
!61 = !{!"qstr", !5, i64 0, !4, i64 8}
!62 = !{!31, !4, i64 80}
!63 = !{!14, !18, i64 692}
!64 = !{!51, !4, i64 32}
!65 = !{!44, !38, i64 144}
!66 = !{!51, !4, i64 24}
!67 = !{!51, !5, i64 8}
!68 = !{!51, !36, i64 145}
!69 = !{i8 0, i8 2}
!70 = !{!14, !18, i64 208}
!71 = !{!14, !4, i64 304}
!72 = !{!73, !4, i64 48}
!73 = !{!"cfg80211_scan_request", !4, i64 0, !18, i64 8, !18, i64 12, !4, i64 16, !23, i64 24, !18, i64 32, !5, i64 36, !4, i64 48, !4, i64 56, !23, i64 64, !36, i64 72, !36, i64 73, !5, i64 80}
!74 = !{!73, !36, i64 72}
!75 = !{!14, !4, i64 0}
!76 = !{!77, !4, i64 608}
!77 = !{!"cfg80211_ops", !4, i64 0, !4, i64 8, !4, i64 16, !4, i64 24, !4, i64 32, !4, i64 40, !4, i64 48, !4, i64 56, !4, i64 64, !4, i64 72, !4, i64 80, !4, i64 88, !4, i64 96, !4, i64 104, !4, i64 112, !4, i64 120, !4, i64 128, !4, i64 136, !4, i64 144, !4, i64 152, !4, i64 160, !4, i64 168, !4, i64 176, !4, i64 184, !4, i64 192, !4, i64 200, !4, i64 208, !4, i64 216, !4, i64 224, !4, i64 232, !4, i64 240, !4, i64 248, !4, i64 256, !4, i64 264, !4, i64 272, !4, i64 280, !4, i64 288, !4, i64 296, !4, i64 304, !4, i64 312, !4, i64 320, !4, i64 328, !4, i64 336, !4, i64 344, !4, i64 352, !4, i64 360, !4, i64 368, !4, i64 376, !4, i64 384, !4, i64 392, !4, i64 400, !4, i64 408, !4, i64 416, !4, i64 424, !4, i64 432, !4, i64 440, !4, i64 448, !4, i64 456, !4, i64 464, !4, i64 472, !4, i64 480, !4, i64 488, !4, i64 496, !4, i64 504, !4, i64 512, !4, i64 520, !4, i64 528, !4, i64 536, !4, i64 544, !4, i64 552, !4, i64 560, !4, i64 568, !4, i64 576, !4, i64 584, !4, i64 592, !4, i64 600, !4, i64 608, !4, i64 616, !4, i64 624, !4, i64 632, !4, i64 640, !4, i64 648}
!78 = !{!77, !4, i64 48}
!79 = !{!77, !4, i64 64}
!80 = !{!77, !4, i64 72}
!81 = !{!77, !4, i64 264}
!82 = !{!77, !4, i64 272}
!83 = !{!77, !4, i64 280}
!84 = !{!77, !4, i64 288}
!85 = !{!77, !4, i64 296}
!86 = !{!77, !4, i64 304}
!87 = !{!77, !4, i64 312}
!88 = !{!77, !4, i64 320}
!89 = !{!77, !4, i64 24}
!90 = !{!77, !4, i64 32}
!91 = !{!77, !4, i64 112}
!92 = !{!77, !4, i64 120}
!93 = !{!77, !4, i64 152}
!94 = !{!77, !4, i64 160}
!95 = !{!77, !4, i64 208}
!96 = !{!77, !4, i64 216}
!97 = !{!5, !5, i64 0}
!98 = !{i64 0, i64 2, !99, i64 0, i64 1, !97, i64 1, i64 1, !97}
!99 = !{!29, !29, i64 0}
!100 = !{!22, !23, i64 0}
!101 = !{i64 0, i64 8, !102}
!102 = !{!23, !23, i64 0}
!103 = !{!21, !4, i64 24}
!104 = !{!27, !4, i64 32}
!105 = !{!27, !23, i64 40}
!106 = !{!14, !4, i64 1320}
!107 = !{!14, !4, i64 1064}
!108 = !{!14, !4, i64 80}
!109 = !{!14, !4, i64 88}
!110 = !{!14, !5, i64 736}
!111 = !{!14, !5, i64 737}
!112 = !{!14, !18, i64 740}
!113 = !{!14, !18, i64 744}
!114 = !{!14, !5, i64 748}
!115 = !{!14, !18, i64 696}
!116 = !{!15, !4, i64 0}
!117 = !{!15, !4, i64 8}
!118 = !{!28, !29, i64 48}
!119 = !{!28, !18, i64 152}
!120 = !{!28, !18, i64 60}
!121 = !{!28, !18, i64 52}
!122 = !{!28, !4, i64 16}
!123 = !{!28, !29, i64 46}
!124 = !{!28, !29, i64 50}
!125 = !{!77, !4, i64 616}
!126 = !{!127, !5, i64 16}
!127 = !{!"ieee80211_supported_band", !4, i64 0, !4, i64 8, !5, i64 16, !18, i64 20, !18, i64 24, !128, i64 28, !130, i64 52}
!128 = !{!"ieee80211_sta_ht_cap", !29, i64 0, !36, i64 2, !5, i64 3, !5, i64 4, !129, i64 5}
!129 = !{!"ieee80211_mcs_info", !5, i64 0, !29, i64 10, !5, i64 12, !5, i64 13}
!130 = !{!"ieee80211_sta_vht_cap", !36, i64 0, !18, i64 4, !131, i64 8}
!131 = !{!"ieee80211_vht_mcs_info", !29, i64 0, !29, i64 2, !29, i64 4, !29, i64 6}
!132 = !{!127, !18, i64 20}
!133 = !{!127, !18, i64 24}
!134 = !{!36, !36, i64 0}
!135 = !{!127, !36, i64 30}
!136 = !{!127, !29, i64 28}
!137 = !{!127, !4, i64 0}
!138 = !{!139, !18, i64 8}
!139 = !{!"ieee80211_channel", !5, i64 0, !29, i64 4, !29, i64 6, !18, i64 8, !18, i64 12, !18, i64 16, !18, i64 20, !36, i64 24, !18, i64 28, !18, i64 32, !18, i64 36, !5, i64 40, !23, i64 48}
!140 = !{!139, !18, i64 28}
!141 = !{!139, !18, i64 32}
!142 = !{!139, !18, i64 16}
!143 = !{!139, !18, i64 36}
!144 = !{!139, !5, i64 0}
!145 = !{!14, !18, i64 796}
!146 = !{!14, !18, i64 804}
!147 = !{!14, !18, i64 800}
!148 = !{!149, !18, i64 16}
!149 = !{!"regulatory_request", !150, i64 0, !18, i64 16, !5, i64 20, !5, i64 24, !5, i64 28, !5, i64 30, !36, i64 31, !36, i64 32, !5, i64 36, !15, i64 40}
!150 = !{!"callback_head", !4, i64 0, !4, i64 8}
!151 = !{!149, !5, i64 20}
!152 = !{!14, !36, i64 1352}
!153 = !{!28, !18, i64 40}
!154 = !{!28, !4, i64 32}
!155 = !{!156, !29, i64 12}
!156 = !{!"ieee80211_iface_combination", !4, i64 0, !18, i64 8, !29, i64 12, !5, i64 14, !36, i64 15, !5, i64 16}
!157 = !{!156, !5, i64 16}
!158 = !{!156, !18, i64 8}
!159 = !{!156, !5, i64 14}
!160 = !{!156, !4, i64 0}
!161 = !{!162, !29, i64 2}
!162 = !{!"ieee80211_iface_limit", !29, i64 0, !29, i64 2}
!163 = !{!162, !29, i64 0}
!164 = !{!28, !29, i64 44}
!165 = !{!77, !4, i64 368}
!166 = !{!14, !4, i64 64}
!167 = !{!168, !18, i64 0}
!168 = !{!"__wait_queue", !18, i64 0, !4, i64 8, !4, i64 16, !15, i64 24}
!169 = !{!168, !4, i64 8}
!170 = !{!168, !4, i64 16}
!171 = !{i32 -2141883599, i32 -2141883574, i32 -2141883304, i32 -2141883507, i32 -2141883476, i32 -2141883446}
!172 = !{!14, !4, i64 496}
!173 = !{!77, !4, i64 16}
!174 = !{i32 -2146913024}
!175 = !{i32 -2143171244, i32 -2143171219, i32 -2143170949, i32 -2143171152, i32 -2143171121, i32 -2143171091}
!176 = !{!177, !18, i64 24}
!177 = !{!"cfg80211_wowlan", !36, i64 0, !36, i64 1, !36, i64 2, !36, i64 3, !36, i64 4, !36, i64 5, !36, i64 6, !4, i64 8, !4, i64 16, !18, i64 24}
!178 = !{!177, !4, i64 8}
!179 = !{!180, !4, i64 0}
!180 = !{!"cfg80211_wowlan_trig_pkt_pattern", !4, i64 0, !4, i64 8, !18, i64 16, !18, i64 20}
!181 = !{!177, !4, i64 16}
!182 = !{!183, !4, i64 0}
!183 = !{!"cfg80211_beacon_registration", !15, i64 0, !18, i64 16}
!184 = !{!185, !4, i64 0}
!185 = !{!"cfg80211_internal_bss", !15, i64 0, !15, i64 16, !186, i64 32, !23, i64 56, !23, i64 64, !17, i64 72, !187, i64 80}
!186 = !{!"rb_node", !23, i64 0, !4, i64 8, !4, i64 16}
!187 = !{!"cfg80211_bss", !4, i64 0, !4, i64 8, !4, i64 16, !4, i64 24, !4, i64 32, !18, i64 40, !29, i64 44, !29, i64 46, !5, i64 48, !5, i64 56}
!188 = !{!14, !18, i64 200}
!189 = !{!14, !18, i64 260}
!190 = !{!14, !18, i64 264}
!191 = !{!51, !18, i64 280}
!192 = !{!32, !4, i64 0}
!193 = !{!194, !4, i64 0}
!194 = !{!"tracepoint_func", !4, i64 0, !4, i64 8}
!195 = !{!194, !4, i64 8}
!196 = !{i32 -2146351440}
!197 = !{i32 -2146351134}
!198 = !{i32 -2145519402}
!199 = !{!44, !4, i64 1120}
!200 = !{!14, !18, i64 204}
!201 = !{!51, !18, i64 40}
!202 = !{!51, !5, i64 188}
!203 = !{!51, !36, i64 273}
!204 = !{!51, !18, i64 276}
!205 = !{!51, !36, i64 144}
!206 = !{!44, !18, i64 412}
!207 = !{!77, !4, i64 448}
!208 = !{!14, !4, i64 312}
!209 = !{!210, !4, i64 72}
!210 = !{!"cfg80211_sched_scan_request", !4, i64 0, !18, i64 8, !18, i64 12, !18, i64 16, !4, i64 24, !23, i64 32, !18, i64 40, !4, i64 48, !18, i64 56, !18, i64 60, !4, i64 64, !4, i64 72, !23, i64 80, !5, i64 88}
!211 = !{i32 -2143590938}
