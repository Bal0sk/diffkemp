; ModuleID = 'net/wireless/core.bc'
source_filename = "net/wireless/core.c"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%struct.list_head = type { %struct.list_head*, %struct.list_head* }
%struct.kernel_param_ops = type { i32, i32 (i8*, %struct.kernel_param*)*, i32 (i8*, %struct.kernel_param*)*, void (i8*)* }
%struct.kernel_param = type { i8*, %struct.module*, %struct.kernel_param_ops*, i16, i8, i8, %union.anon.62 }
%struct.module = type { i32, %struct.list_head, [56 x i8], %struct.module_kobject, %struct.module_attribute*, i8*, i8*, %struct.kobject*, %struct.kernel_symbol*, i32*, i32, %struct.mutex, %struct.kernel_param*, i32, i32, %struct.kernel_symbol*, i32*, i8, %struct.kernel_symbol*, i32*, i32, i32, %struct.exception_table_entry*, i32 ()*, [40 x i8], %struct.module_layout, %struct.module_layout, %struct.mod_arch_specific, i64, i32, %struct.list_head, %struct.bug_entry*, %struct.mod_kallsyms*, %struct.mod_kallsyms, %struct.module_sect_attrs*, %struct.module_notes_attrs*, i8*, i8*, i32, i32, %struct.tracepoint**, i32, i8**, %struct.trace_event_call**, i32, %struct.trace_enum_map**, i32, %struct.list_head, %struct.list_head, void ()*, %struct.atomic_t, [12 x i8] }
%struct.module_kobject = type { %struct.kobject, %struct.module*, %struct.kobject*, %struct.module_param_attrs*, %struct.completion* }
%struct.kobject = type { i8*, %struct.list_head, %struct.kobject*, %struct.kset*, %struct.kobj_type*, %struct.kernfs_node*, %struct.kref, i8 }
%struct.kset = type { %struct.list_head, %struct.spinlock, %struct.kobject, %struct.kset_uevent_ops* }
%struct.spinlock = type { %union.anon.1 }
%union.anon.1 = type { %struct.raw_spinlock }
%struct.raw_spinlock = type { %struct.qspinlock }
%struct.qspinlock = type { %struct.atomic_t }
%struct.kset_uevent_ops = type { i32 (%struct.kset*, %struct.kobject*)*, i8* (%struct.kset*, %struct.kobject*)*, i32 (%struct.kset*, %struct.kobject*, %struct.kobj_uevent_env*)* }
%struct.kobj_uevent_env = type { [3 x i8*], [32 x i8*], i32, [2048 x i8], i32 }
%struct.kobj_type = type { void (%struct.kobject*)*, %struct.sysfs_ops*, %struct.attribute**, %struct.kobj_ns_type_operations* (%struct.kobject*)*, i8* (%struct.kobject*)* }
%struct.sysfs_ops = type { i64 (%struct.kobject*, %struct.attribute*, i8*)*, i64 (%struct.kobject*, %struct.attribute*, i8*, i64)* }
%struct.attribute = type { i8*, i16 }
%struct.kobj_ns_type_operations = type { i32, i1 ()*, i8* ()*, i8* (%struct.sock*)*, i8* ()*, void (i8*)* }
%struct.sock = type opaque
%struct.kernfs_node = type { %struct.atomic_t, %struct.atomic_t, %struct.kernfs_node*, i8*, %struct.rb_node, i8*, i32, %union.anon, i8*, i16, i16, i32, %struct.kernfs_iattrs* }
%struct.rb_node = type { i64, %struct.rb_node*, %struct.rb_node* }
%union.anon = type { %struct.kernfs_elem_attr }
%struct.kernfs_elem_attr = type { %struct.kernfs_ops*, %struct.kernfs_open_node*, i64, %struct.kernfs_node* }
%struct.kernfs_ops = type { i32 (%struct.kernfs_open_file*)*, void (%struct.kernfs_open_file*)*, i32 (%struct.seq_file*, i8*)*, i8* (%struct.seq_file*, i64*)*, i8* (%struct.seq_file*, i8*, i64*)*, void (%struct.seq_file*, i8*)*, i64 (%struct.kernfs_open_file*, i8*, i64, i64)*, i64, i8, i64 (%struct.kernfs_open_file*, i8*, i64, i64)*, i32 (%struct.kernfs_open_file*, %struct.vm_area_struct*)* }
%struct.kernfs_open_file = type { %struct.kernfs_node*, %struct.file*, %struct.seq_file*, i8*, %struct.mutex, %struct.mutex, i32, %struct.list_head, i8*, i64, i8, %struct.vm_operations_struct* }
%struct.file = type { %union.anon.2, %struct.path, %struct.inode*, %struct.file_operations*, %struct.spinlock, %struct.atomic64_t, i32, i32, %struct.mutex, i64, %struct.fown_struct, %struct.cred*, %struct.file_ra_state, i64, i8*, i8*, %struct.list_head, %struct.list_head, %struct.address_space* }
%union.anon.2 = type { %struct.callback_head }
%struct.callback_head = type { %struct.callback_head*, void (%struct.callback_head*)* }
%struct.path = type { %struct.vfsmount*, %struct.dentry* }
%struct.vfsmount = type opaque
%struct.dentry = type { i32, %struct.seqcount, %struct.hlist_bl_node, %struct.dentry*, %struct.qstr, %struct.inode*, [32 x i8], %struct.lockref, %struct.dentry_operations*, %struct.super_block*, i64, i8*, %union.anon.60, %struct.list_head, %struct.list_head, %union.anon.61 }
%struct.seqcount = type { i32 }
%struct.hlist_bl_node = type { %struct.hlist_bl_node*, %struct.hlist_bl_node** }
%struct.qstr = type { %union.anon.3, i8* }
%union.anon.3 = type { i64 }
%struct.lockref = type { %union.anon.58 }
%union.anon.58 = type { i64 }
%struct.dentry_operations = type { i32 (%struct.dentry*, i32)*, i32 (%struct.dentry*, i32)*, i32 (%struct.dentry*, %struct.qstr*)*, i32 (%struct.dentry*, i32, i8*, %struct.qstr*)*, i32 (%struct.dentry*)*, i32 (%struct.dentry*)*, void (%struct.dentry*)*, void (%struct.dentry*)*, void (%struct.dentry*, %struct.inode*)*, i8* (%struct.dentry*, i8*, i32)*, %struct.vfsmount* (%struct.path*)*, i32 (%struct.path*, i1)*, %struct.dentry* (%struct.dentry*, %struct.inode*, i32)*, [24 x i8] }
%struct.super_block = type { %struct.list_head, i32, i8, i64, i64, %struct.file_system_type*, %struct.super_operations*, %struct.dquot_operations*, %struct.quotactl_ops*, %struct.export_operations*, i64, i64, i64, %struct.dentry*, %struct.rw_semaphore, i32, %struct.atomic_t, i8*, %struct.xattr_handler**, %struct.fscrypt_operations*, %struct.hlist_bl_head, %struct.list_head, %struct.block_device*, %struct.backing_dev_info*, %struct.mtd_info*, %struct.hlist_node, i32, %struct.quota_info, %struct.sb_writers, [32 x i8], [16 x i8], i8*, i32, i32, i32, %struct.mutex, i8*, i8*, %struct.dentry_operations*, i32, %struct.shrinker, %struct.atomic64_t, i32, %struct.workqueue_struct*, %struct.hlist_head, %struct.user_namespace*, %struct.list_lru, [56 x i8], %struct.list_lru, %struct.callback_head, %struct.work_struct, %struct.mutex, i32, [36 x i8], %struct.spinlock, %struct.list_head, %struct.spinlock, %struct.list_head, [16 x i8] }
%struct.file_system_type = type { i8*, i32, %struct.dentry* (%struct.file_system_type*, i32, i8*, i8*)*, void (%struct.super_block*)*, %struct.module*, %struct.file_system_type*, %struct.hlist_head, %struct.lock_class_key, %struct.lock_class_key, %struct.lock_class_key, [3 x %struct.lock_class_key], %struct.lock_class_key, %struct.lock_class_key, %struct.lock_class_key }
%struct.lock_class_key = type {}
%struct.super_operations = type { %struct.inode* (%struct.super_block*)*, void (%struct.inode*)*, void (%struct.inode*, i32)*, i32 (%struct.inode*, %struct.writeback_control*)*, i32 (%struct.inode*)*, void (%struct.inode*)*, void (%struct.super_block*)*, i32 (%struct.super_block*, i32)*, i32 (%struct.super_block*)*, i32 (%struct.super_block*)*, i32 (%struct.super_block*)*, i32 (%struct.super_block*)*, i32 (%struct.dentry*, %struct.kstatfs*)*, i32 (%struct.super_block*, i32*, i8*)*, void (%struct.super_block*)*, i32 (%struct.seq_file*, %struct.dentry*)*, i32 (%struct.seq_file*, %struct.dentry*)*, i32 (%struct.seq_file*, %struct.dentry*)*, i32 (%struct.seq_file*, %struct.dentry*)*, i64 (%struct.super_block*, i32, i8*, i64, i64)*, i64 (%struct.super_block*, i32, i8*, i64, i64)*, %struct.dquot** (%struct.inode*)*, i32 (%struct.super_block*, %struct.page*, i32)*, i64 (%struct.super_block*, %struct.shrink_control*)*, i64 (%struct.super_block*, %struct.shrink_control*)* }
%struct.writeback_control = type opaque
%struct.kstatfs = type opaque
%struct.dquot = type { %struct.hlist_node, %struct.list_head, %struct.list_head, %struct.list_head, %struct.mutex, %struct.atomic_t, %struct.__wait_queue_head, %struct.super_block*, %struct.kqid, i64, i64, %struct.mem_dqblk }
%struct.__wait_queue_head = type { %struct.spinlock, %struct.list_head }
%struct.kqid = type { %union.anon.4, i32 }
%union.anon.4 = type { %struct.kuid_t }
%struct.kuid_t = type { i32 }
%struct.mem_dqblk = type { i64, i64, i64, i64, i64, i64, i64, i64, i64 }
%struct.page = type { i64, %union.anon.5, %union.anon.44, %union.anon.45, %union.anon.49, %union.anon.52, [8 x i8] }
%union.anon.5 = type { %struct.address_space* }
%union.anon.44 = type { i64 }
%union.anon.45 = type { i64 }
%union.anon.49 = type { %struct.list_head }
%union.anon.52 = type { i64 }
%struct.shrink_control = type { i32, i64, i32, %struct.mem_cgroup* }
%struct.mem_cgroup = type opaque
%struct.dquot_operations = type { i32 (%struct.dquot*)*, %struct.dquot* (%struct.super_block*, i32)*, void (%struct.dquot*)*, i32 (%struct.dquot*)*, i32 (%struct.dquot*)*, i32 (%struct.dquot*)*, i32 (%struct.super_block*, i32)*, i64* (%struct.inode*)*, i32 (%struct.inode*, %struct.kprojid_t*)*, i32 (%struct.super_block*, %struct.kqid*)* }
%struct.kprojid_t = type { i32 }
%struct.quotactl_ops = type { i32 (%struct.super_block*, i32, i32, %struct.path*)*, i32 (%struct.super_block*, i32)*, i32 (%struct.super_block*, i32)*, i32 (%struct.super_block*, i32)*, i32 (%struct.super_block*, i32)*, i32 (%struct.super_block*, i32, %struct.qc_info*)*, i32 (%struct.super_block*, i64, %struct.qc_dqblk*)*, i32 (%struct.super_block*, %struct.kqid*, %struct.qc_dqblk*)*, i32 (%struct.super_block*, i64, %struct.qc_dqblk*)*, i32 (%struct.super_block*, %struct.qc_state*)*, i32 (%struct.super_block*, i32)* }
%struct.qc_info = type { i32, i32, i32, i32, i32, i32, i32, i32 }
%struct.qc_dqblk = type { i32, i64, i64, i64, i64, i64, i64, i64, i64, i32, i32, i64, i64, i64, i64, i32 }
%struct.qc_state = type { i32, [3 x %struct.qc_type_state] }
%struct.qc_type_state = type { i32, i32, i32, i32, i32, i32, i32, i64, i64, i64 }
%struct.export_operations = type opaque
%struct.rw_semaphore = type { %struct.atomic64_t, %struct.list_head, %struct.raw_spinlock, %struct.optimistic_spin_queue, %struct.task_struct* }
%struct.optimistic_spin_queue = type { %struct.atomic_t }
%struct.task_struct = type { %struct.thread_info, i64, i8*, %struct.atomic_t, i32, i32, %struct.llist_node, i32, i32, i32, i64, %struct.task_struct*, i32, i32, i32, i32, i32, i32, %struct.sched_class*, [16 x i8], %struct.sched_entity, %struct.sched_rt_entity, %struct.task_group*, %struct.sched_dl_entity, i32, i32, i32, %struct.cpumask, %struct.sched_info, %struct.list_head, %struct.plist_node, %struct.rb_node, %struct.mm_struct*, %struct.mm_struct*, %struct.vmacache, %struct.task_rss_stat, i32, i32, i32, i32, i64, i32, i8, [3 x i8], i8, i64, %struct.restart_block, i32, i32, %struct.task_struct*, %struct.task_struct*, %struct.list_head, %struct.list_head, %struct.task_struct*, %struct.list_head, %struct.list_head, [3 x %struct.pid_link], %struct.list_head, %struct.list_head, %struct.completion*, i32*, i32*, i64, i64, i64, %struct.prev_cputime, i64, i64, i64, i64, i64, i64, %struct.task_cputime, [3 x %struct.list_head], %struct.cred*, %struct.cred*, %struct.cred*, [16 x i8], %struct.nameidata*, %struct.sysv_sem, %struct.sysv_shm, %struct.fs_struct*, %struct.files_struct*, %struct.nsproxy*, %struct.signal_struct*, %struct.sighand_struct*, %struct.sigset_t, %struct.sigset_t, %struct.sigset_t, %struct.sigpending, i64, i64, i32, %struct.callback_head*, %struct.audit_context*, %struct.kuid_t, i32, %struct.seccomp, i32, i32, %struct.spinlock, %struct.raw_spinlock, %struct.wake_q_node, %struct.rb_root, %struct.rb_node*, %struct.rt_mutex_waiter*, i8*, %struct.bio_list*, %struct.blk_plug*, %struct.reclaim_state*, %struct.backing_dev_info*, %struct.io_context*, i64, %struct.siginfo*, %struct.task_io_accounting, i64, i64, i64, %struct.nodemask_t, %struct.seqcount, i32, i32, %struct.css_set*, %struct.list_head, %struct.robust_list_head*, %struct.compat_robust_list_head*, %struct.list_head, %struct.futex_pi_state*, [2 x %struct.perf_event_context*], %struct.mutex, %struct.list_head, %struct.mempolicy*, i16, i16, %struct.tlbflush_unmap_batch, %struct.callback_head, %struct.pipe_inode_info*, %struct.page_frag, %struct.task_delay_info*, i32, i32, i64, i64, i64, i64, i64, i32, %struct.task_struct*, %struct.vm_struct*, %struct.atomic_t, [28 x i8], %struct.thread_struct }
%struct.thread_info = type { i64 }
%struct.llist_node = type { %struct.llist_node* }
%struct.sched_class = type opaque
%struct.sched_entity = type { %struct.load_weight, %struct.rb_node, %struct.list_head, i32, i64, i64, i64, i64, i64, %struct.sched_statistics, i32, %struct.sched_entity*, %struct.cfs_rq*, %struct.cfs_rq*, [32 x i8], %struct.sched_avg, [24 x i8] }
%struct.load_weight = type { i64, i32 }
%struct.sched_statistics = type { i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64 }
%struct.cfs_rq = type opaque
%struct.sched_avg = type { i64, i64, i32, i32, i64, i64 }
%struct.sched_rt_entity = type { %struct.list_head, i64, i64, i32, i16, i16, %struct.sched_rt_entity* }
%struct.task_group = type opaque
%struct.sched_dl_entity = type { %struct.rb_node, i64, i64, i64, i64, i64, i64, i32, i32, i32, i32, %struct.hrtimer }
%struct.hrtimer = type { %struct.timerqueue_node, i64, i32 (%struct.hrtimer*)*, %struct.hrtimer_clock_base*, i8, i8 }
%struct.timerqueue_node = type { %struct.rb_node, i64 }
%struct.hrtimer_clock_base = type { %struct.hrtimer_cpu_base*, i32, i32, %struct.timerqueue_head, i64 ()*, i64, [16 x i8] }
%struct.hrtimer_cpu_base = type { %struct.raw_spinlock, %struct.seqcount, %struct.hrtimer*, i32, i32, i32, i8, i8, i8, i64, %struct.hrtimer*, i32, i32, i32, i32, [4 x %struct.hrtimer_clock_base] }
%struct.timerqueue_head = type { %struct.rb_root, %struct.timerqueue_node* }
%struct.cpumask = type { [1 x i64] }
%struct.sched_info = type { i64, i64, i64, i64 }
%struct.plist_node = type { i32, %struct.list_head, %struct.list_head }
%struct.mm_struct = type { %struct.vm_area_struct*, %struct.rb_root, i32, i64 (%struct.file*, i64, i64, i64, i64)*, i64, i64, i64, i64, %struct.pgd_t*, %struct.atomic_t, %struct.atomic_t, %struct.atomic64_t, %struct.atomic64_t, i32, %struct.spinlock, %struct.rw_semaphore, %struct.list_head, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, [46 x i64], %struct.mm_rss_stat, %struct.linux_binfmt*, [1 x %struct.cpumask], %struct.mm_context_t, i64, %struct.core_state*, %struct.spinlock, %struct.kioctx_table*, %struct.user_namespace*, %struct.file*, %struct.mmu_notifier_mm*, i8, %struct.uprobes_state, %struct.atomic64_t, %struct.work_struct }
%struct.vm_area_struct = type { i64, i64, %struct.vm_area_struct*, %struct.vm_area_struct*, %struct.rb_node, i64, %struct.mm_struct*, %struct.pgprot, i64, %struct.anon.6, %struct.list_head, %struct.anon_vma*, %struct.vm_operations_struct*, i64, %struct.file*, i8*, %struct.mempolicy*, %struct.vm_userfaultfd_ctx }
%struct.pgprot = type { i64 }
%struct.anon.6 = type { %struct.rb_node, i64 }
%struct.anon_vma = type opaque
%struct.vm_userfaultfd_ctx = type {}
%struct.pgd_t = type { i64 }
%struct.mm_rss_stat = type { [4 x %struct.atomic64_t] }
%struct.linux_binfmt = type opaque
%struct.mm_context_t = type { %struct.ldt_struct*, i16, %struct.mutex, i8*, %struct.vdso_image*, %struct.atomic_t, i16, i16 }
%struct.ldt_struct = type opaque
%struct.vdso_image = type { i8*, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64 }
%struct.core_state = type { %struct.atomic_t, %struct.core_thread, %struct.completion }
%struct.core_thread = type { %struct.task_struct*, %struct.core_thread* }
%struct.completion = type { i32, %struct.__wait_queue_head }
%struct.kioctx_table = type opaque
%struct.mmu_notifier_mm = type opaque
%struct.uprobes_state = type {}
%struct.vmacache = type { i32, [4 x %struct.vm_area_struct*] }
%struct.task_rss_stat = type { i32, [4 x i32] }
%struct.restart_block = type { i64 (%struct.restart_block*)*, %union.anon.7 }
%union.anon.7 = type { %struct.anon.8 }
%struct.anon.8 = type { i32*, i32, i32, i32, i64, i32* }
%struct.pid_link = type { %struct.hlist_node, %struct.pid* }
%struct.pid = type { %struct.atomic_t, i32, [3 x %struct.hlist_head], %struct.callback_head, [1 x %struct.upid] }
%struct.upid = type { i32, %struct.pid_namespace*, %struct.hlist_node }
%struct.pid_namespace = type opaque
%struct.prev_cputime = type { i64, i64, %struct.raw_spinlock }
%struct.task_cputime = type { i64, i64, i64 }
%struct.nameidata = type opaque
%struct.sysv_sem = type { %struct.sem_undo_list* }
%struct.sem_undo_list = type opaque
%struct.sysv_shm = type { %struct.list_head }
%struct.fs_struct = type opaque
%struct.files_struct = type opaque
%struct.nsproxy = type { %struct.atomic_t, %struct.uts_namespace*, %struct.ipc_namespace*, %struct.mnt_namespace*, %struct.pid_namespace*, %struct.net*, %struct.cgroup_namespace* }
%struct.uts_namespace = type opaque
%struct.ipc_namespace = type opaque
%struct.mnt_namespace = type opaque
%struct.net = type { %struct.atomic_t, %struct.atomic_t, %struct.spinlock, %struct.atomic64_t, %struct.list_head, %struct.list_head, %struct.list_head, %struct.user_namespace*, %struct.ucounts*, %struct.spinlock, %struct.idr, %struct.ns_common, %struct.proc_dir_entry*, %struct.proc_dir_entry*, %struct.ctl_table_set, %struct.sock*, %struct.sock*, %struct.list_head, %struct.hlist_head*, %struct.hlist_head*, i32, i32, i32, %struct.list_head, %struct.net_device*, %struct.netns_core, %struct.netns_mib, %struct.netns_packet, %struct.netns_unix, [40 x i8], %struct.netns_ipv4, %struct.netns_ipv6, %struct.netns_nf, %struct.netns_xt, %struct.netns_ct, [16 x i8], %struct.netns_nf_frag, %struct.sock*, %struct.sock*, %struct.net_generic*, [40 x i8], %struct.netns_xfrm, %struct.sock*, %struct.atomic_t, [52 x i8] }
%struct.ucounts = type { %struct.hlist_node, %struct.user_namespace*, %struct.kuid_t, i32, [9 x %struct.atomic_t] }
%struct.idr = type { %struct.radix_tree_root, i32 }
%struct.radix_tree_root = type { i32, %struct.radix_tree_node* }
%struct.radix_tree_node = type { i8, i8, i8, i8, %struct.radix_tree_node*, %struct.radix_tree_root*, %union.anon.0, [64 x i8*], [3 x [1 x i64]] }
%union.anon.0 = type { %struct.list_head }
%struct.ns_common = type { %struct.atomic64_t, %struct.proc_ns_operations*, i32 }
%struct.proc_ns_operations = type opaque
%struct.proc_dir_entry = type opaque
%struct.ctl_table_set = type { i32 (%struct.ctl_table_set*)*, %struct.ctl_dir }
%struct.ctl_dir = type { %struct.ctl_table_header, %struct.rb_root }
%struct.ctl_table_header = type { %union.anon.11, %struct.completion*, %struct.ctl_table*, %struct.ctl_table_root*, %struct.ctl_table_set*, %struct.ctl_dir*, %struct.ctl_node*, %struct.list_head }
%union.anon.11 = type { %struct.anon.12 }
%struct.anon.12 = type { %struct.ctl_table*, i32, i32, i32 }
%struct.ctl_table = type { i8*, i8*, i32, i16, %struct.ctl_table*, i32 (%struct.ctl_table*, i32, i8*, i64*, i64*)*, %struct.ctl_table_poll*, i8*, i8* }
%struct.ctl_table_poll = type { %struct.atomic_t, %struct.__wait_queue_head }
%struct.ctl_table_root = type { %struct.ctl_table_set, %struct.ctl_table_set* (%struct.ctl_table_root*)*, void (%struct.ctl_table_header*, %struct.ctl_table*, %struct.kuid_t*, %struct.kgid_t*)*, i32 (%struct.ctl_table_header*, %struct.ctl_table*)* }
%struct.kgid_t = type { i32 }
%struct.ctl_node = type { %struct.rb_node, %struct.ctl_table_header* }
%struct.net_device = type { [16 x i8], %struct.hlist_node, i8*, i64, i64, i64, i32, %struct.atomic_t, i64, %struct.list_head, %struct.list_head, %struct.list_head, %struct.list_head, %struct.list_head, %struct.list_head, %struct.anon.63, i64, i64, i64, i64, i64, i64, i64, i32, i32, %struct.net_device_stats, %struct.atomic64_t, %struct.atomic64_t, %struct.atomic64_t, %struct.net_device_ops*, %struct.ethtool_ops*, %struct.ndisc_ops*, %struct.header_ops*, i32, i32, i16, i16, i8, i8, i8, i8, i32, i32, i32, i16, i16, i16, i16, i16, [32 x i8], i8, i8, i16, i16, i16, %struct.spinlock, i8, i8, %struct.netdev_hw_addr_list, %struct.netdev_hw_addr_list, %struct.netdev_hw_addr_list, %struct.kset*, i32, i32, i8*, %struct.in_device*, %struct.dn_dev*, %struct.inet6_dev*, i8*, %struct.wireless_dev*, %struct.wpan_dev*, i8*, %struct.netdev_rx_queue*, i32, i32, i64, i32 (%struct.sk_buff**)*, i8*, %struct.tcf_proto*, %struct.netdev_queue*, %struct.nf_hook_entry*, [32 x i8], %struct.cpu_rmap*, %struct.hlist_node, [24 x i8], %struct.netdev_queue*, i32, i32, %struct.Qdisc*, [16 x %struct.hlist_head], i64, %struct.spinlock, i32, %struct.xps_dev_maps*, %struct.tcf_proto*, %struct.timer_list, i32*, %struct.list_head, %struct.list_head, i8, i8, i16, void (%struct.net_device*)*, %struct.netpoll_info*, %struct.possible_net_t, %union.anon.71, %struct.device, [4 x %struct.attribute_group*], %struct.attribute_group*, %struct.rtnl_link_ops*, i32, i16, i8, [16 x %struct.netdev_tc_txq], [16 x i8], %struct.phy_device*, %struct.lock_class_key*, %struct.lock_class_key*, i8, [15 x i8] }
%struct.anon.63 = type { %struct.list_head, %struct.list_head }
%struct.net_device_stats = type { i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64 }
%struct.net_device_ops = type { i32 (%struct.net_device*)*, void (%struct.net_device*)*, i32 (%struct.net_device*)*, i32 (%struct.net_device*)*, i32 (%struct.sk_buff*, %struct.net_device*)*, i64 (%struct.sk_buff*, %struct.net_device*, i64)*, i16 (%struct.net_device*, %struct.sk_buff*, i8*, i16 (%struct.net_device*, %struct.sk_buff*)*)*, void (%struct.net_device*, i32)*, void (%struct.net_device*)*, i32 (%struct.net_device*, i8*)*, i32 (%struct.net_device*)*, i32 (%struct.net_device*, %struct.ifreq*, i32)*, i32 (%struct.net_device*, %struct.ifmap*)*, i32 (%struct.net_device*, i32)*, i32 (%struct.net_device*, %struct.neigh_parms*)*, void (%struct.net_device*)*, void (%struct.net_device*, %struct.rtnl_link_stats64*)*, i1 (%struct.net_device*, i32)*, i32 (i32, %struct.net_device*, i8*)*, %struct.net_device_stats* (%struct.net_device*)*, i32 (%struct.net_device*, i16, i16)*, i32 (%struct.net_device*, i16, i16)*, void (%struct.net_device*)*, i32 (%struct.net_device*, %struct.netpoll_info*)*, void (%struct.net_device*)*, i32 (%struct.net_device*, i32, i8*)*, i32 (%struct.net_device*, i32, i16, i8, i16)*, i32 (%struct.net_device*, i32, i32, i32)*, i32 (%struct.net_device*, i32, i1)*, i32 (%struct.net_device*, i32, i1)*, i32 (%struct.net_device*, i32, %struct.ifla_vf_info*)*, i32 (%struct.net_device*, i32, i32)*, i32 (%struct.net_device*, i32, %struct.ifla_vf_stats*)*, i32 (%struct.net_device*, i32, %struct.nlattr**)*, i32 (%struct.net_device*, i32, %struct.sk_buff*)*, i32 (%struct.net_device*, i32, i64, i32)*, i32 (%struct.net_device*, i32, i1)*, i32 (%struct.net_device*, i32, i16, %struct.tc_to_netdev*)*, i32 (%struct.net_device*, %struct.sk_buff*, i16, i32)*, i32 (%struct.net_device*, %struct.net_device*)*, i32 (%struct.net_device*, %struct.net_device*)*, i64 (%struct.net_device*, i64)*, i32 (%struct.net_device*, i64)*, i32 (%struct.net_device*, %struct.neighbour*)*, void (%struct.net_device*, %struct.neighbour*)*, i32 (%struct.ndmsg*, %struct.nlattr**, %struct.net_device*, i8*, i16, i16)*, i32 (%struct.ndmsg*, %struct.nlattr**, %struct.net_device*, i8*, i16)*, i32 (%struct.sk_buff*, %struct.netlink_callback*, %struct.net_device*, %struct.net_device*, i32*)*, i32 (%struct.net_device*, %struct.nlmsghdr*, i16)*, i32 (%struct.sk_buff*, i32, i32, %struct.net_device*, i32, i32)*, i32 (%struct.net_device*, %struct.nlmsghdr*, i16)*, i32 (%struct.net_device*, i1)*, i32 (%struct.net_device*, %struct.netdev_phys_item_id*)*, i32 (%struct.net_device*, i8*, i64)*, void (%struct.net_device*, %struct.udp_tunnel_info*)*, void (%struct.net_device*, %struct.udp_tunnel_info*)*, i8* (%struct.net_device*, %struct.net_device*)*, void (%struct.net_device*, i8*)*, i32 (%struct.sk_buff*, %struct.net_device*, i8*)*, i32 (%struct.net_device*)*, i32 (%struct.net_device*, i32, i32)*, i32 (%struct.net_device*)*, i32 (%struct.net_device*, i1)*, i32 (%struct.net_device*, %struct.sk_buff*)*, void (%struct.net_device*, i32)*, i32 (%struct.net_device*, %struct.netdev_xdp*)* }
%struct.sk_buff = type { %union.anon.13, %struct.sock*, %union.anon.18, [48 x i8], i64, {}*, %struct.sec_path*, i64, i32, i32, i16, i16, i16, [0 x i8], i8, [0 x i32], [0 x i8], i32, i16, %union.anon.19, i32, i32, i32, i16, i16, %union.anon.21, i32, %union.anon.22, %union.anon.23, i16, i16, i16, i16, i16, i16, i16, [0 x i32], i32, i32, i8*, i8*, i32, %struct.atomic_t }
%union.anon.13 = type { %struct.anon.14 }
%struct.anon.14 = type { %struct.sk_buff*, %struct.sk_buff*, %union.anon.15 }
%union.anon.15 = type { i64 }
%union.anon.18 = type { %struct.net_device* }
%struct.sec_path = type opaque
%union.anon.19 = type { i32 }
%union.anon.21 = type { i32 }
%union.anon.22 = type { i32 }
%union.anon.23 = type { i16 }
%struct.ifreq = type { %union.anon.64, %union.anon.65 }
%union.anon.64 = type { [16 x i8] }
%union.anon.65 = type { %struct.ifmap }
%struct.ifmap = type { i64, i64, i16, i8, i8, i8 }
%struct.neigh_parms = type opaque
%struct.rtnl_link_stats64 = type { i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64 }
%struct.ifla_vf_info = type { i32, [32 x i8], i32, i32, i32, i32, i32, i32, i32, i32, i16 }
%struct.ifla_vf_stats = type { i64, i64, i64, i64, i64, i64 }
%struct.nlattr = type { i16, i16 }
%struct.tc_to_netdev = type { i32, %union.anon.67, i8 }
%union.anon.67 = type { %struct.tc_cls_u32_offload* }
%struct.tc_cls_u32_offload = type opaque
%struct.neighbour = type opaque
%struct.ndmsg = type { i8, i8, i16, i32, i16, i8, i8 }
%struct.netlink_callback = type { %struct.sk_buff*, %struct.nlmsghdr*, i32 (%struct.netlink_callback*)*, i32 (%struct.sk_buff*, %struct.netlink_callback*)*, i32 (%struct.netlink_callback*)*, i8*, %struct.module*, i16, i16, i32, i32, [6 x i64] }
%struct.nlmsghdr = type { i32, i16, i16, i32, i32 }
%struct.netdev_phys_item_id = type { [32 x i8], i8 }
%struct.udp_tunnel_info = type opaque
%struct.netdev_xdp = type { i32, %union.anon.68 }
%union.anon.68 = type { %struct.bpf_prog* }
%struct.bpf_prog = type opaque
%struct.ethtool_ops = type { i32 (%struct.net_device*, %struct.ethtool_cmd*)*, i32 (%struct.net_device*, %struct.ethtool_cmd*)*, void (%struct.net_device*, %struct.ethtool_drvinfo*)*, i32 (%struct.net_device*)*, void (%struct.net_device*, %struct.ethtool_regs*, i8*)*, void (%struct.net_device*, %struct.ethtool_wolinfo*)*, i32 (%struct.net_device*, %struct.ethtool_wolinfo*)*, i32 (%struct.net_device*)*, void (%struct.net_device*, i32)*, i32 (%struct.net_device*)*, i32 (%struct.net_device*)*, i32 (%struct.net_device*)*, i32 (%struct.net_device*, %struct.ethtool_eeprom*, i8*)*, i32 (%struct.net_device*, %struct.ethtool_eeprom*, i8*)*, i32 (%struct.net_device*, %struct.ethtool_coalesce*)*, i32 (%struct.net_device*, %struct.ethtool_coalesce*)*, void (%struct.net_device*, %struct.ethtool_ringparam*)*, i32 (%struct.net_device*, %struct.ethtool_ringparam*)*, void (%struct.net_device*, %struct.ethtool_pauseparam*)*, i32 (%struct.net_device*, %struct.ethtool_pauseparam*)*, void (%struct.net_device*, %struct.ethtool_test*, i64*)*, void (%struct.net_device*, i32, i8*)*, i32 (%struct.net_device*, i32)*, void (%struct.net_device*, %struct.ethtool_stats*, i64*)*, i32 (%struct.net_device*)*, void (%struct.net_device*)*, i32 (%struct.net_device*)*, i32 (%struct.net_device*, i32)*, i32 (%struct.net_device*, i32)*, i32 (%struct.net_device*, %struct.ethtool_rxnfc*, i32*)*, i32 (%struct.net_device*, %struct.ethtool_rxnfc*)*, i32 (%struct.net_device*, %struct.ethtool_flash*)*, i32 (%struct.net_device*, i32*)*, i32 (%struct.net_device*)*, i32 (%struct.net_device*)*, i32 (%struct.net_device*, i32*, i8*, i8*)*, i32 (%struct.net_device*, i32*, i8*, i8)*, void (%struct.net_device*, %struct.ethtool_channels*)*, i32 (%struct.net_device*, %struct.ethtool_channels*)*, i32 (%struct.net_device*, %struct.ethtool_dump*)*, i32 (%struct.net_device*, %struct.ethtool_dump*, i8*)*, i32 (%struct.net_device*, %struct.ethtool_dump*)*, i32 (%struct.net_device*, %struct.ethtool_ts_info*)*, i32 (%struct.net_device*, %struct.ethtool_modinfo*)*, i32 (%struct.net_device*, %struct.ethtool_eeprom*, i8*)*, i32 (%struct.net_device*, %struct.ethtool_eee*)*, i32 (%struct.net_device*, %struct.ethtool_eee*)*, i32 (%struct.net_device*, %struct.ethtool_tunable*, i8*)*, i32 (%struct.net_device*, %struct.ethtool_tunable*, i8*)*, i32 (%struct.net_device*, i32, %struct.ethtool_coalesce*)*, i32 (%struct.net_device*, i32, %struct.ethtool_coalesce*)*, i32 (%struct.net_device*, %struct.ethtool_link_ksettings*)*, i32 (%struct.net_device*, %struct.ethtool_link_ksettings*)* }
%struct.ethtool_cmd = type { i32, i32, i32, i16, i8, i8, i8, i8, i8, i8, i32, i32, i16, i8, i8, i32, [2 x i32] }
%struct.ethtool_drvinfo = type { i32, [32 x i8], [32 x i8], [32 x i8], [32 x i8], [32 x i8], [12 x i8], i32, i32, i32, i32, i32 }
%struct.ethtool_regs = type { i32, i32, i32, [0 x i8] }
%struct.ethtool_wolinfo = type { i32, i32, i32, [6 x i8] }
%struct.ethtool_coalesce = type { i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32 }
%struct.ethtool_ringparam = type { i32, i32, i32, i32, i32, i32, i32, i32, i32 }
%struct.ethtool_pauseparam = type { i32, i32, i32, i32 }
%struct.ethtool_test = type { i32, i32, i32, i32, [0 x i64] }
%struct.ethtool_stats = type { i32, i32, [0 x i64] }
%struct.ethtool_rxnfc = type { i32, i32, i64, %struct.ethtool_rx_flow_spec, i32, [0 x i32] }
%struct.ethtool_rx_flow_spec = type { i32, %union.ethtool_flow_union, %struct.ethtool_flow_ext, %union.ethtool_flow_union, %struct.ethtool_flow_ext, i64, i32 }
%union.ethtool_flow_union = type { %struct.ethtool_tcpip6_spec, [12 x i8] }
%struct.ethtool_tcpip6_spec = type { [4 x i32], [4 x i32], i16, i16, i8 }
%struct.ethtool_flow_ext = type { [2 x i8], [6 x i8], i16, i16, [2 x i32] }
%struct.ethtool_flash = type { i32, i32, [128 x i8] }
%struct.ethtool_channels = type { i32, i32, i32, i32, i32, i32, i32, i32, i32 }
%struct.ethtool_dump = type { i32, i32, i32, i32, [0 x i8] }
%struct.ethtool_ts_info = type { i32, i32, i32, i32, [3 x i32], i32, [3 x i32] }
%struct.ethtool_modinfo = type { i32, i32, i32, [8 x i32] }
%struct.ethtool_eeprom = type { i32, i32, i32, i32, [0 x i8] }
%struct.ethtool_eee = type { i32, i32, i32, i32, i32, i32, i32, i32, [2 x i32] }
%struct.ethtool_tunable = type { i32, i32, i32, i32, [0 x i8*] }
%struct.ethtool_link_ksettings = type { %struct.ethtool_link_settings, %struct.anon.69 }
%struct.ethtool_link_settings = type { i32, i32, i8, i8, i8, i8, i8, i8, i8, i8, [8 x i32], [0 x i32] }
%struct.anon.69 = type { [1 x i64], [1 x i64], [1 x i64] }
%struct.ndisc_ops = type opaque
%struct.header_ops = type { i32 (%struct.sk_buff*, %struct.net_device*, i16, i8*, i8*, i32)*, i32 (%struct.sk_buff*, i8*)*, i32 (%struct.neighbour*, %struct.hh_cache*, i16)*, void (%struct.hh_cache*, %struct.net_device*, i8*)*, i1 (i8*, i32)* }
%struct.hh_cache = type { i16, i16, %struct.seqlock_t, [12 x i64] }
%struct.seqlock_t = type { %struct.seqcount, %struct.spinlock }
%struct.netdev_hw_addr_list = type { %struct.list_head, i32 }
%struct.in_device = type opaque
%struct.dn_dev = type opaque
%struct.inet6_dev = type opaque
%struct.wireless_dev = type { %struct.wiphy*, i32, %struct.list_head, %struct.net_device*, i32, %struct.list_head, %struct.spinlock, %struct.mutex, i8, i8, [6 x i8], [32 x i8], i8, i8, i8, %struct.cfg80211_conn*, %struct.cfg80211_cached_keys*, i32, i32, %struct.work_struct, [6 x i8], %struct.list_head, %struct.spinlock, %struct.cfg80211_internal_bss*, %struct.cfg80211_chan_def, %struct.cfg80211_chan_def, i8, i8, i8, i32, i32, i32, i8, i64, i32, i32 }
%struct.wiphy = type { [6 x i8], [6 x i8], %struct.mac_address*, %struct.ieee80211_txrx_stypes*, %struct.ieee80211_iface_combination*, i32, i16, i16, i16, i16, i32, i32, i32, [2 x i8], i32, i32, i32, i8, i8, i8, i16, i16, i32, i32, i32, i32, i32*, i8, i8, i32, i32, i8, [32 x i8], i32, %struct.wiphy_wowlan_support*, %struct.cfg80211_wowlan*, i16, i8, i32, i32, i32, i8*, i8*, i8, %struct.wiphy_iftype_ext_capab*, i32, i8*, [3 x %struct.ieee80211_supported_band*], void (%struct.wiphy*, %struct.regulatory_request*)*, %struct.ieee80211_regdomain*, %struct.device, i8, %struct.dentry*, %struct.ieee80211_ht_cap*, %struct.ieee80211_vht_cap*, %struct.list_head, %struct.possible_net_t, %struct.wiphy_coalesce_support*, %struct.wiphy_vendor_command*, %struct.nl80211_vendor_cmd_info*, i32, i32, i16, i8, i8, i32, i64, i8, [31 x i8], [0 x i8] }
%struct.mac_address = type { [6 x i8] }
%struct.ieee80211_txrx_stypes = type { i16, i16 }
%struct.ieee80211_iface_combination = type { %struct.ieee80211_iface_limit*, i32, i16, i8, i8, i8, i8, i32 }
%struct.ieee80211_iface_limit = type { i16, i16 }
%struct.wiphy_wowlan_support = type { i32, i32, i32, i32, i32, i32, %struct.wiphy_wowlan_tcp_support* }
%struct.wiphy_wowlan_tcp_support = type { %struct.nl80211_wowlan_tcp_data_token_feature*, i32, i32, i32, i8 }
%struct.nl80211_wowlan_tcp_data_token_feature = type { i32, i32, i32 }
%struct.cfg80211_wowlan = type { i8, i8, i8, i8, i8, i8, i8, %struct.cfg80211_pkt_pattern*, %struct.cfg80211_wowlan_tcp*, i32, %struct.cfg80211_sched_scan_request* }
%struct.cfg80211_pkt_pattern = type { i8*, i8*, i32, i32 }
%struct.cfg80211_wowlan_tcp = type { %struct.socket*, i32, i32, i16, i16, [6 x i8], i32, i8*, %struct.nl80211_wowlan_tcp_data_seq, i32, i32, i8*, i8*, i32, %struct.nl80211_wowlan_tcp_data_token }
%struct.socket = type { i32, i16, i64, %struct.socket_wq*, %struct.file*, %struct.sock*, %struct.proto_ops* }
%struct.socket_wq = type { %struct.__wait_queue_head, %struct.fasync_struct*, i64, %struct.callback_head, [8 x i8] }
%struct.fasync_struct = type { %struct.spinlock, i32, i32, %struct.fasync_struct*, %struct.file*, %struct.callback_head }
%struct.proto_ops = type { i32, %struct.module*, i32 (%struct.socket*)*, i32 (%struct.socket*, %struct.sockaddr*, i32)*, i32 (%struct.socket*, %struct.sockaddr*, i32, i32)*, i32 (%struct.socket*, %struct.socket*)*, i32 (%struct.socket*, %struct.socket*, i32, i1)*, i32 (%struct.socket*, %struct.sockaddr*, i32*, i32)*, i32 (%struct.file*, %struct.socket*, %struct.poll_table_struct*)*, i32 (%struct.socket*, i32, i64)*, i32 (%struct.socket*, i32, i64)*, i32 (%struct.socket*, i32)*, i32 (%struct.socket*, i32)*, i32 (%struct.socket*, i32, i32, i8*, i32)*, i32 (%struct.socket*, i32, i32, i8*, i32*)*, i32 (%struct.socket*, i32, i32, i8*, i32)*, i32 (%struct.socket*, i32, i32, i8*, i32*)*, i32 (%struct.socket*, %struct.msghdr*, i64)*, i32 (%struct.socket*, %struct.msghdr*, i64, i32)*, i32 (%struct.file*, %struct.socket*, %struct.vm_area_struct*)*, i64 (%struct.socket*, %struct.page*, i32, i64, i32)*, i64 (%struct.socket*, i64*, %struct.pipe_inode_info*, i64, i32)*, i32 (%struct.sock*, i32)*, i32 (%struct.socket*)*, i32 (%struct.sock*, %struct.read_descriptor_t*, i32 (%struct.read_descriptor_t*, %struct.sk_buff*, i32, i64)*)* }
%struct.sockaddr = type { i16, [14 x i8] }
%struct.poll_table_struct = type opaque
%struct.msghdr = type { i8*, i32, %struct.iov_iter, i8*, i64, i32, %struct.kiocb* }
%struct.iov_iter = type { i32, i64, i64, %union.anon.41, %union.anon.42 }
%union.anon.41 = type { %struct.iovec* }
%struct.iovec = type { i8*, i64 }
%union.anon.42 = type { i64 }
%struct.kiocb = type { %struct.file*, i64, void (%struct.kiocb*, i64, i64)*, i8*, i32 }
%struct.read_descriptor_t = type { i64, i64, %union.anon.70, i32 }
%union.anon.70 = type { i8* }
%struct.nl80211_wowlan_tcp_data_seq = type { i32, i32, i32 }
%struct.nl80211_wowlan_tcp_data_token = type { i32, i32, [0 x i8] }
%struct.cfg80211_sched_scan_request = type { %struct.cfg80211_ssid*, i32, i32, i32, i8*, i64, i32, %struct.cfg80211_match_set*, i32, i32, i32, %struct.cfg80211_sched_scan_plan*, i32, [6 x i8], [6 x i8], i8, i8, %struct.cfg80211_bss_select_adjust, %struct.wiphy*, %struct.net_device*, i64, %struct.callback_head, i32, [0 x %struct.ieee80211_channel*] }
%struct.cfg80211_ssid = type { [32 x i8], i8 }
%struct.cfg80211_match_set = type { %struct.cfg80211_ssid, i32 }
%struct.cfg80211_sched_scan_plan = type { i32, i32 }
%struct.cfg80211_bss_select_adjust = type { i32, i8 }
%struct.ieee80211_channel = type { i32, i16, i16, i32, i32, i32, i32, i8, i32, i32, i32, i32, i64, i32 }
%struct.wiphy_iftype_ext_capab = type { i32, i8*, i8*, i8 }
%struct.ieee80211_supported_band = type { %struct.ieee80211_channel*, %struct.ieee80211_rate*, i32, i32, i32, %struct.ieee80211_sta_ht_cap, %struct.ieee80211_sta_vht_cap }
%struct.ieee80211_rate = type { i32, i16, i16, i16 }
%struct.ieee80211_sta_ht_cap = type <{ i16, i8, i8, i8, %struct.ieee80211_mcs_info, i8 }>
%struct.ieee80211_mcs_info = type { [10 x i8], i16, i8, [3 x i8] }
%struct.ieee80211_sta_vht_cap = type { i8, i32, %struct.ieee80211_vht_mcs_info }
%struct.ieee80211_vht_mcs_info = type { i16, i16, i16, i16 }
%struct.regulatory_request = type { %struct.callback_head, i32, i32, i32, [2 x i8], i32, i8, i8, i32, %struct.list_head }
%struct.ieee80211_regdomain = type { %struct.callback_head, i32, [3 x i8], i32, [0 x %struct.ieee80211_reg_rule] }
%struct.ieee80211_reg_rule = type { %struct.ieee80211_freq_range, %struct.ieee80211_power_rule, i32, i32 }
%struct.ieee80211_freq_range = type { i32, i32, i32 }
%struct.ieee80211_power_rule = type { i32, i32 }
%struct.ieee80211_ht_cap = type <{ i16, i8, %struct.ieee80211_mcs_info, i16, i32, i8 }>
%struct.ieee80211_vht_cap = type { i32, %struct.ieee80211_vht_mcs_info }
%struct.wiphy_coalesce_support = type { i32, i32, i32, i32, i32, i32 }
%struct.wiphy_vendor_command = type { %struct.nl80211_vendor_cmd_info, i32, i32 (%struct.wiphy*, %struct.wireless_dev*, i8*, i32)*, i32 (%struct.wiphy*, %struct.wireless_dev*, %struct.sk_buff*, i8*, i32, i64*)* }
%struct.nl80211_vendor_cmd_info = type { i32, i32 }
%struct.cfg80211_conn = type opaque
%struct.cfg80211_cached_keys = type { [4 x %struct.key_params], [4 x [13 x i8]], i32 }
%struct.key_params = type { i8*, i8*, i32, i32, i32 }
%struct.cfg80211_internal_bss = type { %struct.list_head, %struct.list_head, %struct.rb_node, i64, i64, i64, %struct.atomic_t, i64, [6 x i8], %struct.cfg80211_bss }
%struct.cfg80211_bss = type { %struct.ieee80211_channel*, i32, %struct.cfg80211_bss_ies*, %struct.cfg80211_bss_ies*, %struct.cfg80211_bss_ies*, %struct.cfg80211_bss*, i32, i16, i16, [6 x i8], [2 x i8], [0 x i8] }
%struct.cfg80211_bss_ies = type { i64, %struct.callback_head, i32, i8, [0 x i8] }
%struct.cfg80211_chan_def = type { %struct.ieee80211_channel*, i32, i32, i32 }
%struct.wpan_dev = type opaque
%struct.netdev_rx_queue = type { %struct.rps_map*, %struct.rps_dev_flow_table*, %struct.kobject, %struct.net_device*, [40 x i8] }
%struct.rps_map = type { i32, %struct.callback_head, [0 x i16] }
%struct.rps_dev_flow_table = type { i32, %struct.callback_head, [0 x %struct.rps_dev_flow] }
%struct.rps_dev_flow = type { i16, i16, i32 }
%struct.nf_hook_entry = type opaque
%struct.cpu_rmap = type opaque
%struct.netdev_queue = type { %struct.net_device*, %struct.Qdisc*, %struct.Qdisc*, %struct.kobject, i32, i64, i64, [16 x i8], %struct.spinlock, i32, i64, i64, [40 x i8], %struct.dql }
%struct.dql = type { i32, i32, i32, [52 x i8], i32, i32, i32, i32, i32, i32, i64, i32, i32, i32, [20 x i8] }
%struct.Qdisc = type opaque
%struct.xps_dev_maps = type { %struct.callback_head, [0 x %struct.xps_map*] }
%struct.xps_map = type { i32, i32, %struct.callback_head, [0 x i16] }
%struct.tcf_proto = type opaque
%struct.timer_list = type { %struct.hlist_node, i64, void (i64)*, i64, i32 }
%struct.netpoll_info = type opaque
%struct.possible_net_t = type { %struct.net* }
%union.anon.71 = type { i8* }
%struct.device = type { %struct.device*, %struct.device_private*, %struct.kobject, i8*, %struct.device_type*, %struct.mutex, %struct.bus_type*, %struct.device_driver*, i8*, i8*, %struct.dev_links_info, %struct.dev_pm_info, %struct.dev_pm_domain*, %struct.irq_domain*, %struct.list_head, i32, %struct.dma_map_ops*, i64*, i64, i64, %struct.device_dma_parameters*, %struct.list_head, %struct.dma_coherent_mem*, %struct.dev_archdata, %struct.device_node*, %struct.fwnode_handle*, i32, i32, %struct.spinlock, %struct.list_head, %struct.klist_node, %struct.class*, %struct.attribute_group**, void (%struct.device*)*, %struct.iommu_group*, %struct.iommu_fwspec*, i8 }
%struct.device_private = type opaque
%struct.device_type = type { i8*, %struct.attribute_group**, i32 (%struct.device*, %struct.kobj_uevent_env*)*, i8* (%struct.device*, i16*, %struct.kuid_t*, %struct.kgid_t*)*, void (%struct.device*)*, %struct.dev_pm_ops* }
%struct.dev_pm_ops = type { i32 (%struct.device*)*, void (%struct.device*)*, i32 (%struct.device*)*, i32 (%struct.device*)*, i32 (%struct.device*)*, i32 (%struct.device*)*, i32 (%struct.device*)*, i32 (%struct.device*)*, i32 (%struct.device*)*, i32 (%struct.device*)*, i32 (%struct.device*)*, i32 (%struct.device*)*, i32 (%struct.device*)*, i32 (%struct.device*)*, i32 (%struct.device*)*, i32 (%struct.device*)*, i32 (%struct.device*)*, i32 (%struct.device*)*, i32 (%struct.device*)*, i32 (%struct.device*)*, i32 (%struct.device*)*, i32 (%struct.device*)*, i32 (%struct.device*)* }
%struct.bus_type = type { i8*, i8*, %struct.device*, %struct.device_attribute*, %struct.attribute_group**, %struct.attribute_group**, %struct.attribute_group**, i32 (%struct.device*, %struct.device_driver*)*, i32 (%struct.device*, %struct.kobj_uevent_env*)*, i32 (%struct.device*)*, i32 (%struct.device*)*, void (%struct.device*)*, i32 (%struct.device*)*, i32 (%struct.device*)*, i32 (%struct.device*, i32)*, i32 (%struct.device*)*, i32 (%struct.device*)*, %struct.dev_pm_ops*, %struct.iommu_ops*, %struct.subsys_private*, %struct.lock_class_key }
%struct.device_attribute = type { %struct.attribute, i64 (%struct.device*, %struct.device_attribute*, i8*)*, i64 (%struct.device*, %struct.device_attribute*, i8*, i64)* }
%struct.iommu_ops = type opaque
%struct.subsys_private = type opaque
%struct.device_driver = type { i8*, %struct.bus_type*, %struct.module*, i8*, i8, i32, %struct.of_device_id*, %struct.acpi_device_id*, i32 (%struct.device*)*, i32 (%struct.device*)*, void (%struct.device*)*, i32 (%struct.device*, i32)*, i32 (%struct.device*)*, %struct.attribute_group**, %struct.dev_pm_ops*, %struct.driver_private* }
%struct.of_device_id = type { [32 x i8], [32 x i8], [128 x i8], i8* }
%struct.acpi_device_id = type { [9 x i8], i64, i32, i32 }
%struct.driver_private = type opaque
%struct.dev_links_info = type { %struct.list_head, %struct.list_head, i32 }
%struct.dev_pm_info = type { %struct.pm_message, i16, %struct.spinlock, %struct.list_head, %struct.completion, %struct.wakeup_source*, i8, %struct.timer_list, i64, %struct.work_struct, %struct.__wait_queue_head, %struct.wake_irq*, %struct.atomic_t, %struct.atomic_t, i16, i32, i32, i32, i32, i32, i64, i64, i64, i64, %struct.pm_subsys_data*, void (%struct.device*, i32)*, %struct.dev_pm_qos* }
%struct.pm_message = type { i32 }
%struct.wakeup_source = type { i8*, %struct.list_head, %struct.spinlock, %struct.wake_irq*, %struct.timer_list, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i8 }
%struct.wake_irq = type opaque
%struct.pm_subsys_data = type { %struct.spinlock, i32, %struct.list_head }
%struct.dev_pm_qos = type opaque
%struct.dev_pm_domain = type { %struct.dev_pm_ops, void (%struct.device*, i1)*, i32 (%struct.device*)*, void (%struct.device*)*, void (%struct.device*)* }
%struct.irq_domain = type opaque
%struct.dma_map_ops = type { i8* (%struct.device*, i64, i64*, i32, i64)*, void (%struct.device*, i64, i8*, i64, i64)*, i32 (%struct.device*, %struct.vm_area_struct*, i8*, i64, i64, i64)*, i32 (%struct.device*, %struct.sg_table*, i8*, i64, i64, i64)*, i64 (%struct.device*, %struct.page*, i64, i64, i32, i64)*, void (%struct.device*, i64, i64, i32, i64)*, i32 (%struct.device*, %struct.scatterlist*, i32, i32, i64)*, void (%struct.device*, %struct.scatterlist*, i32, i32, i64)*, i64 (%struct.device*, i64, i64, i32, i64)*, void (%struct.device*, i64, i64, i32, i64)*, void (%struct.device*, i64, i64, i32)*, void (%struct.device*, i64, i64, i32)*, void (%struct.device*, %struct.scatterlist*, i32, i32)*, void (%struct.device*, %struct.scatterlist*, i32, i32)*, i32 (%struct.device*, i64)*, i32 (%struct.device*, i64)*, i32 (%struct.device*, i64)*, i32 }
%struct.sg_table = type { %struct.scatterlist*, i32, i32 }
%struct.scatterlist = type { i64, i32, i32, i64, i32 }
%struct.device_dma_parameters = type { i32, i64 }
%struct.dma_coherent_mem = type opaque
%struct.dev_archdata = type { i8* }
%struct.device_node = type { i8*, i8*, i32, i8*, %struct.fwnode_handle, %struct.property*, %struct.property*, %struct.device_node*, %struct.device_node*, %struct.device_node*, %struct.kobject, i64, i8* }
%struct.fwnode_handle = type { i32, %struct.fwnode_handle* }
%struct.property = type { i8*, i32, i8*, %struct.property*, i64, i32, %struct.bin_attribute }
%struct.bin_attribute = type { %struct.attribute, i64, i8*, i64 (%struct.file*, %struct.kobject*, %struct.bin_attribute*, i8*, i64, i64)*, i64 (%struct.file*, %struct.kobject*, %struct.bin_attribute*, i8*, i64, i64)*, i32 (%struct.file*, %struct.kobject*, %struct.bin_attribute*, %struct.vm_area_struct*)* }
%struct.klist_node = type { i8*, %struct.list_head, %struct.kref }
%struct.class = type { i8*, %struct.module*, %struct.class_attribute*, %struct.attribute_group**, %struct.attribute_group**, %struct.kobject*, i32 (%struct.device*, %struct.kobj_uevent_env*)*, i8* (%struct.device*, i16*)*, void (%struct.class*)*, void (%struct.device*)*, i32 (%struct.device*, i32)*, i32 (%struct.device*)*, %struct.kobj_ns_type_operations*, i8* (%struct.device*)*, %struct.dev_pm_ops*, %struct.subsys_private* }
%struct.class_attribute = type { %struct.attribute, i64 (%struct.class*, %struct.class_attribute*, i8*)*, i64 (%struct.class*, %struct.class_attribute*, i8*, i64)* }
%struct.iommu_group = type opaque
%struct.iommu_fwspec = type opaque
%struct.attribute_group = type { i8*, i16 (%struct.kobject*, %struct.attribute*, i32)*, i16 (%struct.kobject*, %struct.bin_attribute*, i32)*, %struct.attribute**, %struct.bin_attribute** }
%struct.rtnl_link_ops = type opaque
%struct.netdev_tc_txq = type { i16, i16 }
%struct.phy_device = type opaque
%struct.netns_core = type { %struct.ctl_table_header*, i32, %struct.prot_inuse* }
%struct.prot_inuse = type opaque
%struct.netns_mib = type { %struct.tcp_mib*, %struct.ipstats_mib*, %struct.linux_mib*, %struct.udp_mib*, %struct.udp_mib*, %struct.icmp_mib*, %struct.icmpmsg_mib*, %struct.proc_dir_entry*, %struct.udp_mib*, %struct.udp_mib*, %struct.ipstats_mib*, %struct.icmpv6_mib*, %struct.icmpv6msg_mib* }
%struct.tcp_mib = type { [16 x i64] }
%struct.linux_mib = type { [119 x i64] }
%struct.icmp_mib = type { [28 x i64] }
%struct.icmpmsg_mib = type { [512 x %struct.atomic64_t] }
%struct.udp_mib = type { [9 x i64] }
%struct.ipstats_mib = type { [36 x i64], %struct.u64_stats_sync }
%struct.u64_stats_sync = type {}
%struct.icmpv6_mib = type { [6 x i64] }
%struct.icmpv6msg_mib = type { [512 x %struct.atomic64_t] }
%struct.netns_packet = type { %struct.mutex, %struct.hlist_head }
%struct.netns_unix = type { i32, %struct.ctl_table_header* }
%struct.netns_ipv4 = type { %struct.ctl_table_header*, %struct.ctl_table_header*, %struct.ctl_table_header*, %struct.ctl_table_header*, %struct.ctl_table_header*, %struct.ipv4_devconf*, %struct.ipv4_devconf*, %struct.fib_rules_ops*, i8, %struct.fib_table*, %struct.fib_table*, %struct.hlist_head*, i8, %struct.sock*, %struct.sock**, %struct.sock*, %struct.inet_peer_base*, %struct.sock**, [48 x i8], %struct.netns_frags, %struct.xt_table*, %struct.xt_table*, %struct.xt_table*, %struct.xt_table*, %struct.xt_table*, %struct.xt_table*, i32, i32, i32, i32, i32, i32, %struct.local_ports, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, [56 x i8], %struct.inet_timewait_death_row, i32, i32, i32, i32, i32, %struct.ping_group_range, %struct.atomic_t, i64*, i32, %struct.mr_table*, i32, i32, %struct.atomic_t, [52 x i8] }
%struct.ipv4_devconf = type opaque
%struct.fib_rules_ops = type opaque
%struct.fib_table = type opaque
%struct.inet_peer_base = type opaque
%struct.netns_frags = type { %struct.percpu_counter, i32, i32, i32, i32, [8 x i8] }
%struct.percpu_counter = type { %struct.raw_spinlock, i64, %struct.list_head, i32* }
%struct.xt_table = type opaque
%struct.local_ports = type { %struct.seqlock_t, [2 x i32], i8 }
%struct.inet_timewait_death_row = type { %struct.atomic_t, [60 x i8], %struct.inet_hashinfo*, i32, i32, [48 x i8] }
%struct.inet_hashinfo = type opaque
%struct.ping_group_range = type { %struct.seqlock_t, [2 x %struct.kgid_t] }
%struct.mr_table = type opaque
%struct.netns_ipv6 = type { %struct.netns_sysctl_ipv6, %struct.ipv6_devconf*, %struct.ipv6_devconf*, %struct.inet_peer_base*, [56 x i8], %struct.netns_frags, %struct.xt_table*, %struct.xt_table*, %struct.xt_table*, %struct.xt_table*, %struct.xt_table*, %struct.rt6_info*, %struct.rt6_statistics*, %struct.timer_list, %struct.hlist_head*, %struct.fib6_table*, %struct.list_head, [56 x i8], %struct.dst_ops, %struct.rwlock_t, %struct.spinlock, i32, i64, %struct.sock**, %struct.sock*, %struct.sock*, %struct.sock*, %struct.sock*, %struct.atomic_t, %struct.atomic_t, %struct.seg6_pernet_data*, [48 x i8] }
%struct.netns_sysctl_ipv6 = type { %struct.ctl_table_header*, %struct.ctl_table_header*, %struct.ctl_table_header*, %struct.ctl_table_header*, %struct.ctl_table_header*, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32 }
%struct.ipv6_devconf = type opaque
%struct.rt6_info = type opaque
%struct.rt6_statistics = type opaque
%struct.fib6_table = type opaque
%struct.dst_ops = type { i16, i32, i32 (%struct.dst_ops*)*, %struct.dst_entry* (%struct.dst_entry*, i32)*, i32 (%struct.dst_entry*)*, i32 (%struct.dst_entry*)*, i32* (%struct.dst_entry*, i64)*, void (%struct.dst_entry*)*, void (%struct.dst_entry*, %struct.net_device*, i32)*, %struct.dst_entry* (%struct.dst_entry*)*, void (%struct.sk_buff*)*, void (%struct.dst_entry*, %struct.sock*, %struct.sk_buff*, i32)*, void (%struct.dst_entry*, %struct.sock*, %struct.sk_buff*)*, i32 (%struct.net*, %struct.sock*, %struct.sk_buff*)*, %struct.neighbour* (%struct.dst_entry*, %struct.sk_buff*, i8*)*, void (%struct.dst_entry*, i8*)*, %struct.kmem_cache*, %struct.percpu_counter, [24 x i8] }
%struct.dst_entry = type opaque
%struct.kmem_cache = type opaque
%struct.rwlock_t = type { %struct.qrwlock }
%struct.qrwlock = type { %struct.atomic_t, %struct.qspinlock }
%struct.seg6_pernet_data = type opaque
%struct.netns_nf = type { %struct.proc_dir_entry*, %struct.nf_queue_handler*, [13 x %struct.nf_logger*], %struct.ctl_table_header*, [13 x [8 x %struct.nf_hook_entry*]], i8, i8 }
%struct.nf_queue_handler = type opaque
%struct.nf_logger = type opaque
%struct.netns_xt = type { [13 x %struct.list_head], i8, i8 }
%struct.netns_ct = type { %struct.atomic_t, i32, %struct.ctl_table_header*, %struct.ctl_table_header*, %struct.ctl_table_header*, %struct.ctl_table_header*, %struct.ctl_table_header*, i32, i32, i32, i32, i8, i32, i32, %struct.ct_pcpu*, %struct.ip_conntrack_stat*, %struct.nf_ct_event_notifier*, %struct.nf_exp_event_notifier*, %struct.nf_ip_net }
%struct.ct_pcpu = type { %struct.spinlock, %struct.hlist_nulls_head, %struct.hlist_nulls_head }
%struct.hlist_nulls_head = type { %struct.hlist_nulls_node* }
%struct.hlist_nulls_node = type { %struct.hlist_nulls_node*, %struct.hlist_nulls_node** }
%struct.ip_conntrack_stat = type opaque
%struct.nf_ct_event_notifier = type opaque
%struct.nf_exp_event_notifier = type opaque
%struct.nf_ip_net = type { %struct.nf_generic_net, %struct.nf_tcp_net, %struct.nf_udp_net, %struct.nf_icmp_net, %struct.nf_icmp_net }
%struct.nf_generic_net = type { %struct.nf_proto_net, i32 }
%struct.nf_proto_net = type { %struct.ctl_table_header*, %struct.ctl_table*, i32 }
%struct.nf_tcp_net = type { %struct.nf_proto_net, [14 x i32], i32, i32, i32 }
%struct.nf_udp_net = type { %struct.nf_proto_net, [2 x i32] }
%struct.nf_icmp_net = type { %struct.nf_proto_net, i32 }
%struct.netns_nf_frag = type { %struct.netns_sysctl_ipv6, [16 x i8], %struct.netns_frags }
%struct.net_generic = type opaque
%struct.netns_xfrm = type { %struct.list_head, %struct.hlist_head*, %struct.hlist_head*, %struct.hlist_head*, i32, i32, %struct.work_struct, %struct.list_head, %struct.hlist_head*, i32, [3 x %struct.hlist_head], [3 x %struct.xfrm_policy_hash], [6 x i32], %struct.work_struct, %struct.xfrm_policy_hthresh, %struct.sock*, %struct.sock*, i32, i32, i32, i32, %struct.ctl_table_header*, [56 x i8], %struct.dst_ops, %struct.dst_ops, %struct.spinlock, %struct.spinlock, %struct.mutex, %struct.flow_cache, %struct.atomic_t, %struct.list_head, %struct.atomic_t, %struct.spinlock, %struct.work_struct, %struct.work_struct, %struct.mutex }
%struct.xfrm_policy_hash = type { %struct.hlist_head*, i32, i8, i8, i8, i8 }
%struct.xfrm_policy_hthresh = type { %struct.work_struct, %struct.seqlock_t, i8, i8, i8, i8 }
%struct.flow_cache = type { i32, %struct.flow_cache_percpu*, %struct.hlist_node, i32, i32, %struct.timer_list }
%struct.flow_cache_percpu = type { %struct.hlist_head*, i32, i32, i32, %struct.tasklet_struct }
%struct.tasklet_struct = type { %struct.tasklet_struct*, i64, %struct.atomic_t, void (i64)*, i64 }
%struct.cgroup_namespace = type { %struct.atomic_t, %struct.ns_common, %struct.user_namespace*, %struct.ucounts*, %struct.css_set* }
%struct.signal_struct = type opaque
%struct.sighand_struct = type opaque
%struct.sigset_t = type { [1 x i64] }
%struct.sigpending = type { %struct.list_head, %struct.sigset_t }
%struct.audit_context = type opaque
%struct.seccomp = type { i32, %struct.seccomp_filter* }
%struct.seccomp_filter = type opaque
%struct.wake_q_node = type { %struct.wake_q_node* }
%struct.rb_root = type { %struct.rb_node* }
%struct.rt_mutex_waiter = type opaque
%struct.bio_list = type opaque
%struct.blk_plug = type opaque
%struct.reclaim_state = type opaque
%struct.io_context = type opaque
%struct.siginfo = type { i32, i32, i32, %union.anon.24 }
%union.anon.24 = type { %struct.anon.28, [80 x i8] }
%struct.anon.28 = type { i32, i32, i32, i64, i64 }
%struct.task_io_accounting = type { i64, i64, i64, i64, i64, i64, i64 }
%struct.nodemask_t = type { [1 x i64] }
%struct.css_set = type { [4 x %struct.cgroup_subsys_state*], %struct.atomic_t, %struct.cgroup*, %struct.list_head, %struct.list_head, %struct.list_head, [4 x %struct.list_head], %struct.hlist_node, %struct.list_head, %struct.list_head, %struct.list_head, %struct.cgroup*, %struct.cgroup*, %struct.css_set*, i8, %struct.callback_head }
%struct.cgroup_subsys_state = type { %struct.cgroup*, %struct.cgroup_subsys*, %struct.percpu_ref, %struct.cgroup_subsys_state*, %struct.list_head, %struct.list_head, i32, i32, i64, %struct.atomic_t, %struct.callback_head, %struct.work_struct }
%struct.cgroup_subsys = type { %struct.cgroup_subsys_state* (%struct.cgroup_subsys_state*)*, i32 (%struct.cgroup_subsys_state*)*, void (%struct.cgroup_subsys_state*)*, void (%struct.cgroup_subsys_state*)*, void (%struct.cgroup_subsys_state*)*, void (%struct.cgroup_subsys_state*)*, i32 (%struct.cgroup_taskset*)*, void (%struct.cgroup_taskset*)*, void (%struct.cgroup_taskset*)*, void ()*, i32 (%struct.task_struct*)*, void (%struct.task_struct*)*, void (%struct.task_struct*)*, void (%struct.task_struct*)*, void (%struct.task_struct*)*, void (%struct.cgroup_subsys_state*)*, i8, i32, i8*, i8*, %struct.cgroup_root*, %struct.idr, %struct.list_head, %struct.cftype*, %struct.cftype*, i32 }
%struct.cgroup_taskset = type opaque
%struct.cgroup_root = type { %struct.kernfs_root*, i32, i32, %struct.cgroup, i32, %struct.atomic_t, %struct.list_head, i32, %struct.idr, [4096 x i8], [64 x i8] }
%struct.kernfs_root = type { %struct.kernfs_node*, i32, %struct.ida, %struct.kernfs_syscall_ops*, %struct.list_head, %struct.__wait_queue_head }
%struct.ida = type { %struct.radix_tree_root }
%struct.kernfs_syscall_ops = type { i32 (%struct.kernfs_root*, i32*, i8*)*, i32 (%struct.seq_file*, %struct.kernfs_root*)*, i32 (%struct.kernfs_node*, i8*, i16)*, i32 (%struct.kernfs_node*)*, i32 (%struct.kernfs_node*, %struct.kernfs_node*, i8*)*, i32 (%struct.seq_file*, %struct.kernfs_node*, %struct.kernfs_root*)* }
%struct.cgroup = type { %struct.cgroup_subsys_state, i64, i32, i32, i32, %struct.kernfs_node*, %struct.cgroup_file, %struct.cgroup_file, i16, i16, i16, i16, [4 x %struct.cgroup_subsys_state*], %struct.cgroup_root*, %struct.list_head, [4 x %struct.list_head], %struct.list_head, %struct.mutex, %struct.__wait_queue_head, %struct.work_struct, %struct.cgroup_bpf, [0 x i32] }
%struct.cgroup_file = type { %struct.kernfs_node* }
%struct.cgroup_bpf = type {}
%struct.cftype = type { [64 x i8], i64, i64, i32, i32, %struct.cgroup_subsys*, %struct.list_head, %struct.kernfs_ops*, i32 (%struct.kernfs_open_file*)*, void (%struct.kernfs_open_file*)*, i64 (%struct.cgroup_subsys_state*, %struct.cftype*)*, i64 (%struct.cgroup_subsys_state*, %struct.cftype*)*, i32 (%struct.seq_file*, i8*)*, i8* (%struct.seq_file*, i64*)*, i8* (%struct.seq_file*, i8*, i64*)*, void (%struct.seq_file*, i8*)*, i32 (%struct.cgroup_subsys_state*, %struct.cftype*, i64)*, i32 (%struct.cgroup_subsys_state*, %struct.cftype*, i64)*, i64 (%struct.kernfs_open_file*, i8*, i64, i64)* }
%struct.percpu_ref = type { %struct.atomic64_t, i64, void (%struct.percpu_ref*)*, void (%struct.percpu_ref*)*, i8, %struct.callback_head }
%struct.robust_list_head = type opaque
%struct.compat_robust_list_head = type { %struct.compat_robust_list, i32, i32 }
%struct.compat_robust_list = type { i32 }
%struct.futex_pi_state = type opaque
%struct.perf_event_context = type opaque
%struct.mempolicy = type opaque
%struct.tlbflush_unmap_batch = type { %struct.cpumask, i8, i8 }
%struct.pipe_inode_info = type { %struct.mutex, %struct.__wait_queue_head, i32, i32, i32, i32, i32, i32, i32, i32, i32, %struct.page*, %struct.fasync_struct*, %struct.fasync_struct*, %struct.pipe_buffer*, %struct.user_struct* }
%struct.pipe_buffer = type { %struct.page*, i32, i32, %struct.pipe_buf_operations*, i32, i64 }
%struct.pipe_buf_operations = type { i32, i32 (%struct.pipe_inode_info*, %struct.pipe_buffer*)*, void (%struct.pipe_inode_info*, %struct.pipe_buffer*)*, i32 (%struct.pipe_inode_info*, %struct.pipe_buffer*)*, void (%struct.pipe_inode_info*, %struct.pipe_buffer*)* }
%struct.user_struct = type { %struct.atomic_t, %struct.atomic_t, %struct.atomic_t, %struct.atomic64_t, i64, i64, i64, %struct.atomic64_t, %struct.key*, %struct.key*, %struct.hlist_node, %struct.kuid_t, %struct.atomic64_t }
%struct.key = type { %struct.atomic_t, i32, %union.anon.72, %struct.rw_semaphore, %struct.key_user*, i8*, %union.anon.73, i64, %struct.kuid_t, %struct.kgid_t, i32, i16, i16, i64, %union.anon.74, %union.anon.76, i32 (%struct.key*, %struct.key_type*, %union.key_payload*)* }
%union.anon.72 = type { %struct.rb_node }
%struct.key_user = type opaque
%union.anon.73 = type { i64 }
%union.anon.74 = type { %struct.keyring_index_key }
%struct.keyring_index_key = type { %struct.key_type*, i8*, i64 }
%struct.key_type = type opaque
%union.anon.76 = type { %union.key_payload }
%union.key_payload = type { [4 x i8*] }
%struct.page_frag = type { %struct.page*, i32, i32 }
%struct.task_delay_info = type opaque
%struct.vm_struct = type opaque
%struct.thread_struct = type { [3 x %struct.desc_struct], i64, i64, i16, i16, i16, i16, i32, i64, i64, [4 x %struct.perf_event*], i64, i64, i64, i64, i64, i64*, i64, i32, %struct.mm_segment_t, i8, [15 x i8], %struct.fpu }
%struct.desc_struct = type { %union.anon.34 }
%union.anon.34 = type { %struct.anon.35 }
%struct.anon.35 = type { i32, i32 }
%struct.perf_event = type opaque
%struct.mm_segment_t = type { i64 }
%struct.fpu = type { i32, i8, i8, [58 x i8], %union.fpregs_state }
%union.fpregs_state = type { %struct.xregs_state, [3520 x i8] }
%struct.xregs_state = type { %struct.fxregs_state, %struct.xstate_header, [0 x i8] }
%struct.fxregs_state = type { i16, i16, i16, i16, %union.anon.37, i32, i32, [32 x i32], [64 x i32], [12 x i32], %union.anon.40 }
%union.anon.37 = type { %struct.anon.38 }
%struct.anon.38 = type { i64, i64 }
%union.anon.40 = type { [12 x i32] }
%struct.xstate_header = type { i64, i64, [6 x i64] }
%struct.xattr_handler = type opaque
%struct.fscrypt_operations = type opaque
%struct.hlist_bl_head = type { %struct.hlist_bl_node* }
%struct.block_device = type { i32, i32, %struct.inode*, %struct.super_block*, %struct.mutex, i8*, i8*, i32, i8, %struct.list_head, %struct.block_device*, i32, %struct.hd_struct*, i32, i32, %struct.gendisk*, %struct.request_queue*, %struct.backing_dev_info*, %struct.list_head, i64, i32, %struct.mutex }
%struct.hd_struct = type opaque
%struct.gendisk = type opaque
%struct.request_queue = type opaque
%struct.backing_dev_info = type opaque
%struct.mtd_info = type opaque
%struct.hlist_node = type { %struct.hlist_node*, %struct.hlist_node** }
%struct.quota_info = type { i32, %struct.mutex, [3 x %struct.inode*], [3 x %struct.mem_dqinfo], [3 x %struct.quota_format_ops*] }
%struct.mem_dqinfo = type { %struct.quota_format_type*, i32, %struct.list_head, i64, i32, i32, i64, i64, i8* }
%struct.quota_format_type = type { i32, %struct.quota_format_ops*, %struct.module*, %struct.quota_format_type* }
%struct.quota_format_ops = type { i32 (%struct.super_block*, i32)*, i32 (%struct.super_block*, i32)*, i32 (%struct.super_block*, i32)*, i32 (%struct.super_block*, i32)*, i32 (%struct.dquot*)*, i32 (%struct.dquot*)*, i32 (%struct.dquot*)*, i32 (%struct.super_block*, %struct.kqid*)* }
%struct.sb_writers = type { i32, %struct.__wait_queue_head, [3 x %struct.percpu_rw_semaphore] }
%struct.percpu_rw_semaphore = type { %struct.rcu_sync, i32*, %struct.rw_semaphore, %struct.rcuwait, i32 }
%struct.rcu_sync = type { i32, i32, %struct.__wait_queue_head, i32, %struct.callback_head, i32 }
%struct.rcuwait = type { %struct.task_struct* }
%struct.shrinker = type { i64 (%struct.shrinker*, %struct.shrink_control*)*, i64 (%struct.shrinker*, %struct.shrink_control*)*, i32, i64, i64, %struct.list_head, %struct.atomic64_t* }
%struct.workqueue_struct = type opaque
%struct.hlist_head = type { %struct.hlist_node* }
%struct.user_namespace = type { %struct.uid_gid_map, %struct.uid_gid_map, %struct.uid_gid_map, %struct.atomic_t, %struct.user_namespace*, i32, %struct.kuid_t, %struct.kgid_t, %struct.ns_common, i64, %struct.work_struct, %struct.ctl_table_set, %struct.ctl_table_header*, %struct.ucounts*, [9 x i32] }
%struct.uid_gid_map = type { i32, [5 x %struct.uid_gid_extent] }
%struct.uid_gid_extent = type { i32, i32, i32 }
%struct.list_lru = type { %struct.list_lru_node* }
%struct.list_lru_node = type { %struct.spinlock, %struct.list_lru_one, [32 x i8] }
%struct.list_lru_one = type { %struct.list_head, i64 }
%struct.work_struct = type { %struct.atomic64_t, %struct.list_head, void (%struct.work_struct*)* }
%union.anon.60 = type { %struct.list_head }
%union.anon.61 = type { %struct.hlist_node }
%struct.inode = type { i16, i16, %struct.kuid_t, %struct.kgid_t, i32, %struct.posix_acl*, %struct.posix_acl*, %struct.inode_operations*, %struct.super_block*, %struct.address_space*, i8*, i64, %union.anon.53, i32, i64, %struct.timespec, %struct.timespec, %struct.timespec, %struct.spinlock, i16, i32, i64, i64, %struct.rw_semaphore, i64, i64, %struct.hlist_node, %struct.list_head, %struct.list_head, %struct.list_head, %struct.list_head, %union.anon.54, i64, %struct.atomic_t, %struct.atomic_t, %struct.atomic_t, %struct.file_operations*, %struct.file_lock_context*, %struct.address_space, %struct.list_head, %union.anon.57, i32, i32, %struct.hlist_head, i8* }
%struct.posix_acl = type opaque
%struct.inode_operations = type { %struct.dentry* (%struct.inode*, %struct.dentry*, i32)*, i8* (%struct.dentry*, %struct.inode*, %struct.delayed_call*)*, i32 (%struct.inode*, i32)*, %struct.posix_acl* (%struct.inode*, i32)*, i32 (%struct.dentry*, i8*, i32)*, i32 (%struct.inode*, %struct.dentry*, i16, i1)*, i32 (%struct.dentry*, %struct.inode*, %struct.dentry*)*, i32 (%struct.inode*, %struct.dentry*)*, i32 (%struct.inode*, %struct.dentry*, i8*)*, i32 (%struct.inode*, %struct.dentry*, i16)*, i32 (%struct.inode*, %struct.dentry*)*, i32 (%struct.inode*, %struct.dentry*, i16, i32)*, i32 (%struct.inode*, %struct.dentry*, %struct.inode*, %struct.dentry*, i32)*, i32 (%struct.dentry*, %struct.iattr*)*, i32 (%struct.path*, %struct.kstat*, i32, i32)*, i64 (%struct.dentry*, i8*, i64)*, i32 (%struct.inode*, %struct.fiemap_extent_info*, i64, i64)*, i32 (%struct.inode*, %struct.timespec*, i32)*, i32 (%struct.inode*, %struct.dentry*, %struct.file*, i32, i16, i32*)*, i32 (%struct.inode*, %struct.dentry*, i16)*, i32 (%struct.inode*, %struct.posix_acl*, i32)*, [24 x i8] }
%struct.delayed_call = type { void (i8*)*, i8* }
%struct.iattr = type { i32, i16, %struct.kuid_t, %struct.kgid_t, i64, %struct.timespec, %struct.timespec, %struct.timespec, %struct.file* }
%struct.kstat = type { i32, i16, i32, i32, i64, i64, i64, i32, i32, %struct.kuid_t, %struct.kgid_t, i64, %struct.timespec, %struct.timespec, %struct.timespec, %struct.timespec, i64 }
%struct.fiemap_extent_info = type { i32, i32, i32, %struct.fiemap_extent* }
%struct.fiemap_extent = type { i64, i64, i64, [2 x i64], i32, [3 x i32] }
%union.anon.53 = type { i32 }
%struct.timespec = type { i64, i64 }
%union.anon.54 = type { %struct.callback_head }
%struct.file_lock_context = type { %struct.spinlock, %struct.list_head, %struct.list_head, %struct.list_head }
%struct.address_space = type { %struct.inode*, %struct.radix_tree_root, %struct.spinlock, %struct.atomic_t, %struct.rb_root, %struct.rw_semaphore, i64, i64, i64, %struct.address_space_operations*, i64, %struct.spinlock, i32, %struct.list_head, i8* }
%struct.address_space_operations = type { i32 (%struct.page*, %struct.writeback_control*)*, i32 (%struct.file*, %struct.page*)*, i32 (%struct.address_space*, %struct.writeback_control*)*, i32 (%struct.page*)*, i32 (%struct.file*, %struct.address_space*, %struct.list_head*, i32)*, i32 (%struct.file*, %struct.address_space*, i64, i32, i32, %struct.page**, i8**)*, i32 (%struct.file*, %struct.address_space*, i64, i32, i32, %struct.page*, i8*)*, i64 (%struct.address_space*, i64)*, void (%struct.page*, i32, i32)*, i32 (%struct.page*, i32)*, void (%struct.page*)*, i64 (%struct.kiocb*, %struct.iov_iter*)*, i32 (%struct.address_space*, %struct.page*, %struct.page*, i32)*, i1 (%struct.page*, i32)*, void (%struct.page*)*, i32 (%struct.page*)*, i32 (%struct.page*, i64, i64)*, void (%struct.page*, i8*, i8*)*, i32 (%struct.address_space*, %struct.page*)*, i32 (%struct.swap_info_struct*, %struct.file*, i64*)*, void (%struct.file*)* }
%struct.swap_info_struct = type opaque
%union.anon.57 = type { %struct.pipe_inode_info* }
%struct.file_operations = type { %struct.module*, i64 (%struct.file*, i64, i32)*, i64 (%struct.file*, i8*, i64, i64*)*, i64 (%struct.file*, i8*, i64, i64*)*, i64 (%struct.kiocb*, %struct.iov_iter*)*, i64 (%struct.kiocb*, %struct.iov_iter*)*, i32 (%struct.file*, %struct.dir_context*)*, i32 (%struct.file*, %struct.dir_context*)*, i32 (%struct.file*, %struct.poll_table_struct*)*, i64 (%struct.file*, i32, i64)*, i64 (%struct.file*, i32, i64)*, i32 (%struct.file*, %struct.vm_area_struct*)*, i32 (%struct.inode*, %struct.file*)*, i32 (%struct.file*, i8*)*, i32 (%struct.inode*, %struct.file*)*, i32 (%struct.file*, i64, i64, i32)*, i32 (i32, %struct.file*, i32)*, i32 (%struct.file*, i32, %struct.file_lock*)*, i64 (%struct.file*, %struct.page*, i32, i64, i64*, i32)*, i64 (%struct.file*, i64, i64, i64, i64)*, i32 (i32)*, i32 (%struct.file*, i32, %struct.file_lock*)*, i64 (%struct.pipe_inode_info*, %struct.file*, i64*, i64, i32)*, i64 (%struct.file*, i64*, %struct.pipe_inode_info*, i64, i32)*, i32 (%struct.file*, i64, %struct.file_lock**, i8**)*, i64 (%struct.file*, i32, i64, i64)*, void (%struct.seq_file*, %struct.file*)*, i64 (%struct.file*, i64, %struct.file*, i64, i64, i32)*, i32 (%struct.file*, i64, %struct.file*, i64, i64)*, i64 (%struct.file*, i64, i64, %struct.file*, i64)* }
%struct.dir_context = type { i32 (%struct.dir_context*, i8*, i32, i64, i64, i32)*, i64 }
%struct.file_lock = type { %struct.file_lock*, %struct.list_head, %struct.hlist_node, %struct.list_head, i8*, i32, i8, i32, i32, %struct.pid*, %struct.__wait_queue_head, %struct.file*, i64, i64, %struct.fasync_struct*, i64, i64, %struct.file_lock_operations*, %struct.lock_manager_operations*, %union.anon.55 }
%struct.file_lock_operations = type { void (%struct.file_lock*, %struct.file_lock*)*, void (%struct.file_lock*)* }
%struct.lock_manager_operations = type { i32 (%struct.file_lock*, %struct.file_lock*)*, i64 (%struct.file_lock*)*, i8* (i8*)*, void (i8*)*, void (%struct.file_lock*)*, i32 (%struct.file_lock*, i32)*, i1 (%struct.file_lock*)*, i32 (%struct.file_lock*, i32, %struct.list_head*)*, void (%struct.file_lock*, i8**)* }
%union.anon.55 = type { %struct.nfs_lock_info }
%struct.nfs_lock_info = type { i32, %struct.nlm_lockowner*, %struct.list_head }
%struct.nlm_lockowner = type opaque
%struct.atomic64_t = type { i64 }
%struct.fown_struct = type { %struct.rwlock_t, %struct.pid*, i32, %struct.kuid_t, %struct.kuid_t, i32 }
%struct.cred = type { %struct.atomic_t, %struct.kuid_t, %struct.kgid_t, %struct.kuid_t, %struct.kgid_t, %struct.kuid_t, %struct.kgid_t, %struct.kuid_t, %struct.kgid_t, i32, %struct.kernel_cap_struct, %struct.kernel_cap_struct, %struct.kernel_cap_struct, %struct.kernel_cap_struct, %struct.kernel_cap_struct, i8, %struct.key*, %struct.key*, %struct.key*, %struct.key*, i8*, %struct.user_struct*, %struct.user_namespace*, %struct.group_info*, %struct.callback_head }
%struct.kernel_cap_struct = type { [2 x i32] }
%struct.group_info = type { %struct.atomic_t, i32, [0 x %struct.kgid_t] }
%struct.file_ra_state = type { i64, i32, i32, i32, i32, i64 }
%struct.seq_file = type { i8*, i64, i64, i64, i64, i64, i64, i64, %struct.mutex, %struct.seq_operations*, i32, %struct.file*, i8* }
%struct.seq_operations = type { i8* (%struct.seq_file*, i64*)*, void (%struct.seq_file*, i8*)*, i8* (%struct.seq_file*, i8*, i64*)*, i32 (%struct.seq_file*, i8*)* }
%struct.vm_operations_struct = type { void (%struct.vm_area_struct*)*, void (%struct.vm_area_struct*)*, i32 (%struct.vm_area_struct*)*, i32 (%struct.vm_fault*)*, i32 (%struct.vm_fault*, i32)*, void (%struct.vm_fault*, i64, i64)*, i32 (%struct.vm_fault*)*, i32 (%struct.vm_fault*)*, i32 (%struct.vm_area_struct*, i64, i8*, i32, i32)*, i8* (%struct.vm_area_struct*)*, i32 (%struct.vm_area_struct*, %struct.mempolicy*)*, %struct.mempolicy* (%struct.vm_area_struct*, i64)*, %struct.page* (%struct.vm_area_struct*, i64)* }
%struct.vm_fault = type { %struct.vm_area_struct*, i32, i32, i64, i64, %struct.pmd_t*, %struct.pud_t*, %struct.pte_t, %struct.page*, %struct.mem_cgroup*, %struct.page*, %struct.pte_t*, %struct.spinlock*, %struct.page* }
%struct.pmd_t = type { i64 }
%struct.pud_t = type { i64 }
%struct.pte_t = type { i64 }
%struct.kernfs_open_node = type opaque
%struct.kernfs_iattrs = type opaque
%struct.kref = type { %struct.refcount_struct }
%struct.refcount_struct = type { %struct.atomic_t }
%struct.module_param_attrs = type opaque
%struct.module_attribute = type { %struct.attribute, i64 (%struct.module_attribute*, %struct.module_kobject*, i8*)*, i64 (%struct.module_attribute*, %struct.module_kobject*, i8*, i64)*, void (%struct.module*, i8*)*, i32 (%struct.module*)*, void (%struct.module*)* }
%struct.mutex = type { %struct.atomic64_t, %struct.spinlock, %struct.optimistic_spin_queue, %struct.list_head }
%struct.kernel_symbol = type { i64, i8* }
%struct.exception_table_entry = type { i32, i32, i32 }
%struct.module_layout = type { i8*, i32, i32, i32, i32, %struct.mod_tree_node }
%struct.mod_tree_node = type { %struct.module*, %struct.latch_tree_node }
%struct.latch_tree_node = type { [2 x %struct.rb_node] }
%struct.mod_arch_specific = type {}
%struct.bug_entry = type { i32, i32, i16, i16 }
%struct.mod_kallsyms = type { %struct.elf64_sym*, i32, i8* }
%struct.elf64_sym = type { i32, i8, i8, i16, i64, i64 }
%struct.module_sect_attrs = type opaque
%struct.module_notes_attrs = type opaque
%struct.tracepoint = type { i8*, %struct.static_key, i32 ()*, void ()*, %struct.tracepoint_func* }
%struct.static_key = type { %struct.atomic_t }
%struct.tracepoint_func = type { i8*, i8*, i32 }
%struct.trace_event_call = type opaque
%struct.trace_enum_map = type { i8*, i8*, i64 }
%struct.atomic_t = type { i32 }
%union.anon.62 = type { i8* }
%struct.notifier_block = type { i32 (%struct.notifier_block*, i64, i8*)*, %struct.notifier_block*, i32 }
%struct.pernet_operations = type { %struct.list_head, i32 (%struct.net*)*, void (%struct.net*)*, void (%struct.list_head*)*, i32*, i64 }
%struct.cfg80211_registered_device = type { %struct.cfg80211_ops*, %struct.list_head, %struct.rfkill_ops, %struct.rfkill*, %struct.work_struct, [2 x i8], %struct.ieee80211_regdomain*, i32, i32, i32, i32, i32, %struct.__wait_queue_head, %struct.list_head, %struct.spinlock, %struct.list_head, %struct.spinlock, %struct.work_struct, i32, i32, %struct.spinlock, %struct.list_head, %struct.rb_root, i32, i32, %struct.cfg80211_scan_request*, %struct.sk_buff*, %struct.cfg80211_sched_scan_request*, i64, %struct.work_struct, %struct.work_struct, %struct.genl_info*, %struct.work_struct, %struct.work_struct, %struct.delayed_work, i32, %struct.cfg80211_coalesce*, %struct.spinlock, %struct.list_head, %struct.work_struct, %struct.work_struct, [24 x i8], %struct.wiphy }
%struct.cfg80211_ops = type { i32 (%struct.wiphy*, %struct.cfg80211_wowlan*)*, i32 (%struct.wiphy*)*, void (%struct.wiphy*, i1)*, %struct.wireless_dev* (%struct.wiphy*, i8*, i8, i32, i32*, %struct.vif_params*)*, i32 (%struct.wiphy*, %struct.wireless_dev*)*, i32 (%struct.wiphy*, %struct.net_device*, i32, i32*, %struct.vif_params*)*, i32 (%struct.wiphy*, %struct.net_device*, i8, i1, i8*, %struct.key_params*)*, i32 (%struct.wiphy*, %struct.net_device*, i8, i1, i8*, i8*, void (i8*, %struct.key_params*)*)*, i32 (%struct.wiphy*, %struct.net_device*, i8, i1, i8*)*, i32 (%struct.wiphy*, %struct.net_device*, i8, i1, i1)*, i32 (%struct.wiphy*, %struct.net_device*, i8)*, i32 (%struct.wiphy*, %struct.net_device*, %struct.cfg80211_ap_settings*)*, i32 (%struct.wiphy*, %struct.net_device*, %struct.cfg80211_beacon_data*)*, i32 (%struct.wiphy*, %struct.net_device*)*, i32 (%struct.wiphy*, %struct.net_device*, i8*, %struct.station_parameters*)*, i32 (%struct.wiphy*, %struct.net_device*, %struct.station_del_parameters*)*, i32 (%struct.wiphy*, %struct.net_device*, i8*, %struct.station_parameters*)*, i32 (%struct.wiphy*, %struct.net_device*, i8*, %struct.station_info*)*, i32 (%struct.wiphy*, %struct.net_device*, i32, i8*, %struct.station_info*)*, i32 (%struct.wiphy*, %struct.net_device*, i8*, i8*)*, i32 (%struct.wiphy*, %struct.net_device*, i8*)*, i32 (%struct.wiphy*, %struct.net_device*, i8*, i8*)*, i32 (%struct.wiphy*, %struct.net_device*, i8*, i8*, %struct.mpath_info*)*, i32 (%struct.wiphy*, %struct.net_device*, i32, i8*, i8*, %struct.mpath_info*)*, i32 (%struct.wiphy*, %struct.net_device*, i8*, i8*, %struct.mpath_info*)*, i32 (%struct.wiphy*, %struct.net_device*, i32, i8*, i8*, %struct.mpath_info*)*, i32 (%struct.wiphy*, %struct.net_device*, %struct.mesh_config*)*, i32 (%struct.wiphy*, %struct.net_device*, i32, %struct.mesh_config*)*, i32 (%struct.wiphy*, %struct.net_device*, %struct.mesh_config*, %struct.mesh_setup*)*, i32 (%struct.wiphy*, %struct.net_device*)*, i32 (%struct.wiphy*, %struct.net_device*, %struct.ocb_setup*)*, i32 (%struct.wiphy*, %struct.net_device*)*, i32 (%struct.wiphy*, %struct.net_device*, %struct.bss_parameters*)*, i32 (%struct.wiphy*, %struct.net_device*, %struct.ieee80211_txq_params*)*, i32 (%struct.wiphy*, %struct.net_device*, %struct.ieee80211_channel*)*, i32 (%struct.wiphy*, %struct.cfg80211_chan_def*)*, i32 (%struct.wiphy*, %struct.cfg80211_scan_request*)*, void (%struct.wiphy*, %struct.wireless_dev*)*, i32 (%struct.wiphy*, %struct.net_device*, %struct.cfg80211_auth_request*)*, i32 (%struct.wiphy*, %struct.net_device*, %struct.cfg80211_assoc_request*)*, i32 (%struct.wiphy*, %struct.net_device*, %struct.cfg80211_deauth_request*)*, i32 (%struct.wiphy*, %struct.net_device*, %struct.cfg80211_disassoc_request*)*, i32 (%struct.wiphy*, %struct.net_device*, %struct.cfg80211_connect_params*)*, i32 (%struct.wiphy*, %struct.net_device*, %struct.cfg80211_connect_params*, i32)*, i32 (%struct.wiphy*, %struct.net_device*, i16)*, i32 (%struct.wiphy*, %struct.net_device*, %struct.cfg80211_ibss_params*)*, i32 (%struct.wiphy*, %struct.net_device*)*, i32 (%struct.wiphy*, %struct.net_device*, i32*)*, i32 (%struct.wiphy*, i32)*, i32 (%struct.wiphy*, %struct.wireless_dev*, i32, i32)*, i32 (%struct.wiphy*, %struct.wireless_dev*, i32*)*, i32 (%struct.wiphy*, %struct.net_device*, i8*)*, void (%struct.wiphy*)*, i32 (%struct.wiphy*, %struct.net_device*, i8*, %struct.cfg80211_bitrate_mask*)*, i32 (%struct.wiphy*, %struct.net_device*, i32, %struct.survey_info*)*, i32 (%struct.wiphy*, %struct.net_device*, %struct.cfg80211_pmksa*)*, i32 (%struct.wiphy*, %struct.net_device*, %struct.cfg80211_pmksa*)*, i32 (%struct.wiphy*, %struct.net_device*)*, i32 (%struct.wiphy*, %struct.wireless_dev*, %struct.ieee80211_channel*, i32, i64*)*, i32 (%struct.wiphy*, %struct.wireless_dev*, i64)*, i32 (%struct.wiphy*, %struct.wireless_dev*, %struct.cfg80211_mgmt_tx_params*, i64*)*, i32 (%struct.wiphy*, %struct.wireless_dev*, i64)*, i32 (%struct.wiphy*, %struct.net_device*, i1, i32)*, i32 (%struct.wiphy*, %struct.net_device*, i32, i32)*, i32 (%struct.wiphy*, %struct.net_device*, i32, i32, i32)*, void (%struct.wiphy*, %struct.wireless_dev*, i16, i1)*, i32 (%struct.wiphy*, i32, i32)*, i32 (%struct.wiphy*, i32*, i32*)*, i32 (%struct.wiphy*, %struct.net_device*, %struct.cfg80211_sched_scan_request*)*, i32 (%struct.wiphy*, %struct.net_device*)*, i32 (%struct.wiphy*, %struct.net_device*, %struct.cfg80211_gtk_rekey_data*)*, i32 (%struct.wiphy*, %struct.net_device*, i8*, i8, i8, i16, i32, i1, i8*, i64)*, i32 (%struct.wiphy*, %struct.net_device*, i8*, i32)*, i32 (%struct.wiphy*, %struct.net_device*, i8*, i64*)*, i32 (%struct.wiphy*, %struct.net_device*, i16)*, i32 (%struct.wiphy*, %struct.wireless_dev*, %struct.cfg80211_chan_def*)*, i32 (%struct.wiphy*, %struct.wireless_dev*)*, void (%struct.wiphy*, %struct.wireless_dev*)*, i32 (%struct.wiphy*, %struct.net_device*, %struct.cfg80211_acl_data*)*, i32 (%struct.wiphy*, %struct.net_device*, %struct.cfg80211_chan_def*, i32)*, i32 (%struct.wiphy*, %struct.net_device*, %struct.cfg80211_update_ft_ies_params*)*, i32 (%struct.wiphy*, %struct.wireless_dev*, i32, i16)*, void (%struct.wiphy*, %struct.wireless_dev*)*, i32 (%struct.wiphy*, %struct.cfg80211_coalesce*)*, i32 (%struct.wiphy*, %struct.net_device*, %struct.cfg80211_csa_settings*)*, i32 (%struct.wiphy*, %struct.net_device*, %struct.cfg80211_qos_map*)*, i32 (%struct.wiphy*, %struct.net_device*, %struct.cfg80211_chan_def*)*, i32 (%struct.wiphy*, %struct.net_device*, i8, i8*, i8, i16)*, i32 (%struct.wiphy*, %struct.net_device*, i8, i8*)*, i32 (%struct.wiphy*, %struct.net_device*, i8*, i8, %struct.cfg80211_chan_def*)*, void (%struct.wiphy*, %struct.net_device*, i8*)*, i32 (%struct.wiphy*, %struct.wireless_dev*, %struct.cfg80211_nan_conf*)*, void (%struct.wiphy*, %struct.wireless_dev*)*, i32 (%struct.wiphy*, %struct.wireless_dev*, %struct.cfg80211_nan_func*)*, void (%struct.wiphy*, %struct.wireless_dev*, i64)*, i32 (%struct.wiphy*, %struct.wireless_dev*, %struct.cfg80211_nan_conf*, i32)*, i32 (%struct.wiphy*, %struct.net_device*, i1)* }
%struct.vif_params = type { i32, [6 x i8], [24 x i8] }
%struct.cfg80211_ap_settings = type { %struct.cfg80211_chan_def, %struct.cfg80211_beacon_data, i32, i32, i8*, i64, i32, %struct.cfg80211_crypto_settings, i8, i32, i32, i32, i8, i8, %struct.cfg80211_acl_data*, i8, %struct.cfg80211_bitrate_mask, %struct.ieee80211_ht_cap*, %struct.ieee80211_vht_cap*, i8, i8 }
%struct.cfg80211_beacon_data = type { i8*, i8*, i8*, i8*, i8*, i8*, i64, i64, i64, i64, i64, i64 }
%struct.cfg80211_crypto_settings = type { i32, i32, i32, [5 x i32], i32, [2 x i32], i8, i16, i8, %struct.key_params*, i32 }
%struct.cfg80211_acl_data = type { i32, i32, [0 x %struct.mac_address] }
%struct.cfg80211_bitrate_mask = type { [3 x %struct.anon.78] }
%struct.anon.78 = type { i32, [10 x i8], [8 x i16], i32 }
%struct.station_del_parameters = type { i8*, i8, i16 }
%struct.station_parameters = type { i8*, %struct.net_device*, i32, i32, i32, i32, i16, i16, i8, i8, i8, %struct.ieee80211_ht_cap*, %struct.ieee80211_vht_cap*, i8, i8, i32, i16, i8*, i8, i8*, i8, i8*, i8, i8, i8, i32 }
%struct.station_info = type { i64, i32, i32, i64, i64, i16, i16, i8, i8, i8, i8, [4 x i8], [4 x i8], %struct.rate_info, %struct.rate_info, i32, i32, i32, i32, i32, %struct.sta_bss_parameters, %struct.nl80211_sta_flag_update, i32, i8*, i64, i32, i64, i32, i32, i32, i32, i64, i64, i8, [17 x %struct.cfg80211_tid_stats] }
%struct.rate_info = type { i8, i8, i16, i8, i8 }
%struct.sta_bss_parameters = type { i8, i8, i16 }
%struct.nl80211_sta_flag_update = type { i32, i32 }
%struct.cfg80211_tid_stats = type { i32, i64, i64, i64, i64 }
%struct.mpath_info = type { i32, i32, i32, i32, i32, i32, i8, i8, i32 }
%struct.mesh_config = type { i16, i16, i16, i16, i8, i8, i8, i8, i32, i8, i32, i16, i32, i16, i16, i16, i8, i16, i8, i8, i32, i16, i32, i16, i16, i32, i16, i32 }
%struct.mesh_setup = type { %struct.cfg80211_chan_def, i8*, i8, i8, i8, i8, i8, i8*, i8, i8, i8, i8, i8, i16, [3 x i32], i32, %struct.cfg80211_bitrate_mask }
%struct.ocb_setup = type { %struct.cfg80211_chan_def }
%struct.bss_parameters = type { i32, i32, i32, i8*, i8, i32, i32, i8, i8 }
%struct.ieee80211_txq_params = type { i32, i16, i16, i16, i8 }
%struct.cfg80211_auth_request = type { %struct.cfg80211_bss*, i8*, i64, i32, i8*, i8, i8, i8*, i64 }
%struct.cfg80211_assoc_request = type { %struct.cfg80211_bss*, i8*, i8*, i64, %struct.cfg80211_crypto_settings, i8, i32, %struct.ieee80211_ht_cap, %struct.ieee80211_ht_cap, %struct.ieee80211_vht_cap, %struct.ieee80211_vht_cap, i8*, i64, i8* }
%struct.cfg80211_deauth_request = type { i8*, i8*, i64, i16, i8 }
%struct.cfg80211_disassoc_request = type { %struct.cfg80211_bss*, i8*, i64, i16, i8 }
%struct.cfg80211_connect_params = type { %struct.ieee80211_channel*, %struct.ieee80211_channel*, i8*, i8*, i8*, i64, i32, i8*, i64, i8, i32, %struct.cfg80211_crypto_settings, i8*, i8, i8, i32, i32, %struct.ieee80211_ht_cap, %struct.ieee80211_ht_cap, %struct.ieee80211_vht_cap, %struct.ieee80211_vht_cap, i8, %struct.cfg80211_bss_selection, i8* }
%struct.cfg80211_bss_selection = type { i32, %union.anon.79 }
%union.anon.79 = type { %struct.cfg80211_bss_select_adjust }
%struct.cfg80211_ibss_params = type { i8*, i8*, %struct.cfg80211_chan_def, i8*, i8, i8, i16, i32, i8, i8, i8, i8, [3 x i32], %struct.ieee80211_ht_cap, %struct.ieee80211_ht_cap }
%struct.survey_info = type { %struct.ieee80211_channel*, i64, i64, i64, i64, i64, i64, i32, i8 }
%struct.cfg80211_pmksa = type { i8*, i8* }
%struct.cfg80211_mgmt_tx_params = type { %struct.ieee80211_channel*, i8, i32, i8*, i64, i8, i8, i32, i16* }
%struct.cfg80211_gtk_rekey_data = type { i8*, i8*, i8* }
%struct.cfg80211_update_ft_ies_params = type { i16, i8*, i64 }
%struct.cfg80211_csa_settings = type { %struct.cfg80211_chan_def, %struct.cfg80211_beacon_data, i16*, i16*, i32, i32, %struct.cfg80211_beacon_data, i8, i8, i8 }
%struct.cfg80211_qos_map = type { i8, [21 x %struct.cfg80211_dscp_exception], [8 x %struct.cfg80211_dscp_range] }
%struct.cfg80211_dscp_exception = type { i8, i8 }
%struct.cfg80211_dscp_range = type { i8, i8 }
%struct.cfg80211_nan_conf = type { i8, i8 }
%struct.cfg80211_nan_func = type { i32, [6 x i8], i8, i8, i8, i8, i8, i8, %struct.mac_address, i32, i8*, i8, i8, i8*, i8, i8, %struct.mac_address*, i32, %struct.cfg80211_nan_func_filter*, %struct.cfg80211_nan_func_filter*, i8, i8, i8, i64 }
%struct.cfg80211_nan_func_filter = type { i8*, i8 }
%struct.rfkill_ops = type { void (%struct.rfkill*, i8*)*, void (%struct.rfkill*, i8*)*, i32 (i8*, i1)* }
%struct.rfkill = type opaque
%struct.cfg80211_scan_request = type { %struct.cfg80211_ssid*, i32, i32, i32, i8*, i64, i16, i8, i32, [3 x i32], %struct.wireless_dev*, [6 x i8], [6 x i8], [6 x i8], %struct.wiphy*, i64, %struct.cfg80211_scan_info, i8, i8, [0 x %struct.ieee80211_channel*] }
%struct.cfg80211_scan_info = type { i64, [6 x i8], i8 }
%struct.genl_info = type { i32, i32, %struct.nlmsghdr*, %struct.genlmsghdr*, i8*, %struct.nlattr**, %struct.possible_net_t, [2 x i8*] }
%struct.genlmsghdr = type { i8, i8, i16 }
%struct.delayed_work = type { %struct.work_struct, %struct.timer_list, %struct.workqueue_struct*, i32 }
%struct.cfg80211_coalesce = type { %struct.cfg80211_coalesce_rules*, i32 }
%struct.cfg80211_coalesce_rules = type { i32, i32, %struct.cfg80211_pkt_pattern*, i32 }
%union.anon.80 = type { %struct.list_head* }
%struct.cfg80211_iface_destroy = type { %struct.list_head, i32 }
%union.anon.94 = type { %struct.list_head* }
%struct.__wait_queue = type { i32, i8*, i32 (%struct.__wait_queue*, i32, i32, i8*)*, %struct.list_head }
%union.anon.97 = type { %struct.list_head* }
%struct.cfg80211_beacon_registration = type { %struct.list_head, i32 }
%struct.cfg80211_event = type { %struct.list_head, i32, %union.anon.81 }
%union.anon.81 = type { %struct.anon.82 }
%struct.anon.82 = type { [6 x i8], i8*, i8*, i64, i64, %struct.cfg80211_bss*, i32, i32 }
%union.anon.99 = type { %struct.tracepoint_func* }
%union.anon.86 = type { %struct.tracepoint_func* }
%union.anon.88 = type { %struct.tracepoint_func* }
%union.anon.87 = type { i32 }
%union.anon.89 = type { %struct.tracepoint_func* }
%union.anon.90 = type { %struct.list_head* }
%union.anon.91 = type { i8 }
%union.anon.92 = type { %struct.tracepoint_func* }
%union.anon.93 = type { %struct.tracepoint_func* }
%union.anon.95 = type { %struct.list_head* }
%union.anon.96 = type { %struct.tracepoint_func* }
%union.anon.98 = type { %struct.tracepoint_func* }
%union.anon.100 = type { %struct.list_head* }
%struct.netdev_notifier_info = type { %struct.net_device* }
%union.anon.101 = type { %struct.tracepoint_func* }

@cfg80211_rdev_list = global %struct.list_head { %struct.list_head* @cfg80211_rdev_list, %struct.list_head* @cfg80211_rdev_list }, align 8
@__param_str_cfg80211_disable_40mhz_24ghz = internal constant [38 x i8] c"cfg80211.cfg80211_disable_40mhz_24ghz\00", align 16
@param_ops_bool = external constant %struct.kernel_param_ops, align 8
@cfg80211_disable_40mhz_24ghz = internal global i8 0, align 1
@__param_cfg80211_disable_40mhz_24ghz = internal constant %struct.kernel_param { i8* getelementptr inbounds ([38 x i8], [38 x i8]* @__param_str_cfg80211_disable_40mhz_24ghz, i32 0, i32 0), %struct.module* null, %struct.kernel_param_ops* @param_ops_bool, i16 420, i8 -1, i8 0, %union.anon.62 { i8* @cfg80211_disable_40mhz_24ghz } }, section "__param", align 8
@.str = private unnamed_addr constant [37 x i8] c"\013RTNL: assertion failed at %s (%d)\0A\00", align 1
@.str.1 = private unnamed_addr constant [20 x i8] c"net/wireless/core.c\00", align 1
@.str.2 = private unnamed_addr constant [49 x i8] c"\013cfg80211: failed to rename debugfs dir to %s!\0A\00", align 1
@.str.3 = private unnamed_addr constant [7 x i8] c"wlan%d\00", align 1
@__kstrtab_cfg80211_shutdown_all_interfaces = internal constant [33 x i8] c"cfg80211_shutdown_all_interfaces\00", section "__ksymtab_strings", align 1
@__ksymtab_cfg80211_shutdown_all_interfaces = internal constant %struct.kernel_symbol { i64 ptrtoint (void (%struct.wiphy*)* @cfg80211_shutdown_all_interfaces to i64), i8* getelementptr inbounds ([33 x i8], [33 x i8]* @__kstrtab_cfg80211_shutdown_all_interfaces, i32 0, i32 0) }, section "___ksymtab_gpl+cfg80211_shutdown_all_interfaces", align 8
@wiphy_new_nm.wiphy_counter = internal global %struct.atomic_t zeroinitializer, align 4
@.str.4 = private unnamed_addr constant [3 x i8] c"%s\00", align 1
@.str.5 = private unnamed_addr constant [6 x i8] c"phy%d\00", align 1
@ieee80211_class = external global %struct.class, align 8
@init_net = external global %struct.net, align 64
@wiphy_new_nm.__key = internal global %struct.lock_class_key zeroinitializer, align 1
@.str.6 = private unnamed_addr constant [16 x i8] c"&rdev->dev_wait\00", align 1
@__kstrtab_wiphy_new_nm = internal constant [13 x i8] c"wiphy_new_nm\00", section "__ksymtab_strings", align 1
@__ksymtab_wiphy_new_nm = internal constant %struct.kernel_symbol { i64 ptrtoint (%struct.wiphy* (%struct.cfg80211_ops*, i32, i8*)* @wiphy_new_nm to i64), i8* getelementptr inbounds ([13 x i8], [13 x i8]* @__kstrtab_wiphy_new_nm, i32 0, i32 0) }, section "___ksymtab+wiphy_new_nm", align 8
@cfg80211_rdev_list_generation = common global i32 0, align 4
@ieee80211_debugfs_dir = internal global %struct.dentry* null, align 8
@__kstrtab_wiphy_register = internal constant [15 x i8] c"wiphy_register\00", section "__ksymtab_strings", align 1
@__ksymtab_wiphy_register = internal constant %struct.kernel_symbol { i64 ptrtoint (i32 (%struct.wiphy*)* @wiphy_register to i64), i8* getelementptr inbounds ([15 x i8], [15 x i8]* @__kstrtab_wiphy_register, i32 0, i32 0) }, section "___ksymtab+wiphy_register", align 8
@__kstrtab_wiphy_rfkill_start_polling = internal constant [27 x i8] c"wiphy_rfkill_start_polling\00", section "__ksymtab_strings", align 1
@__ksymtab_wiphy_rfkill_start_polling = internal constant %struct.kernel_symbol { i64 ptrtoint (void (%struct.wiphy*)* @wiphy_rfkill_start_polling to i64), i8* getelementptr inbounds ([27 x i8], [27 x i8]* @__kstrtab_wiphy_rfkill_start_polling, i32 0, i32 0) }, section "___ksymtab+wiphy_rfkill_start_polling", align 8
@__kstrtab_wiphy_rfkill_stop_polling = internal constant [26 x i8] c"wiphy_rfkill_stop_polling\00", section "__ksymtab_strings", align 1
@__ksymtab_wiphy_rfkill_stop_polling = internal constant %struct.kernel_symbol { i64 ptrtoint (void (%struct.wiphy*)* @wiphy_rfkill_stop_polling to i64), i8* getelementptr inbounds ([26 x i8], [26 x i8]* @__kstrtab_wiphy_rfkill_stop_polling, i32 0, i32 0) }, section "___ksymtab+wiphy_rfkill_stop_polling", align 8
@__kstrtab_wiphy_unregister = internal constant [17 x i8] c"wiphy_unregister\00", section "__ksymtab_strings", align 1
@__ksymtab_wiphy_unregister = internal constant %struct.kernel_symbol { i64 ptrtoint (void (%struct.wiphy*)* @wiphy_unregister to i64), i8* getelementptr inbounds ([17 x i8], [17 x i8]* @__kstrtab_wiphy_unregister, i32 0, i32 0) }, section "___ksymtab+wiphy_unregister", align 8
@__kstrtab_wiphy_free = internal constant [11 x i8] c"wiphy_free\00", section "__ksymtab_strings", align 1
@__ksymtab_wiphy_free = internal constant %struct.kernel_symbol { i64 ptrtoint (void (%struct.wiphy*)* @wiphy_free to i64), i8* getelementptr inbounds ([11 x i8], [11 x i8]* @__kstrtab_wiphy_free, i32 0, i32 0) }, section "___ksymtab+wiphy_free", align 8
@__kstrtab_wiphy_rfkill_set_hw_state = internal constant [26 x i8] c"wiphy_rfkill_set_hw_state\00", section "__ksymtab_strings", align 1
@__ksymtab_wiphy_rfkill_set_hw_state = internal constant %struct.kernel_symbol { i64 ptrtoint (void (%struct.wiphy*, i1)* @wiphy_rfkill_set_hw_state to i64), i8* getelementptr inbounds ([26 x i8], [26 x i8]* @__kstrtab_wiphy_rfkill_set_hw_state, i32 0, i32 0) }, section "___ksymtab+wiphy_rfkill_set_hw_state", align 8
@cfg80211_unregister_wdev.__warned = internal global i8 0, section ".data.unlikely", align 1
@__kstrtab_cfg80211_unregister_wdev = internal constant [25 x i8] c"cfg80211_unregister_wdev\00", section "__ksymtab_strings", align 1
@__ksymtab_cfg80211_unregister_wdev = internal constant %struct.kernel_symbol { i64 ptrtoint (void (%struct.wireless_dev*)* @cfg80211_unregister_wdev to i64), i8* getelementptr inbounds ([25 x i8], [25 x i8]* @__kstrtab_cfg80211_unregister_wdev, i32 0, i32 0) }, section "___ksymtab+cfg80211_unregister_wdev", align 8
@cfg80211_wq = common global %struct.workqueue_struct* null, align 8
@__kstrtab_cfg80211_stop_iface = internal constant [20 x i8] c"cfg80211_stop_iface\00", section "__ksymtab_strings", align 1
@__ksymtab_cfg80211_stop_iface = internal constant %struct.kernel_symbol { i64 ptrtoint (void (%struct.wiphy*, %struct.wireless_dev*, i32)* @cfg80211_stop_iface to i64), i8* getelementptr inbounds ([20 x i8], [20 x i8]* @__kstrtab_cfg80211_stop_iface, i32 0, i32 0) }, section "___ksymtab+cfg80211_stop_iface", align 8
@__initcall_cfg80211_init4 = internal global i32 ()* @cfg80211_init, section ".initcall4.init", align 8
@cfg80211_netdev_notifier = internal global %struct.notifier_block { i32 (%struct.notifier_block*, i64, i8*)* @cfg80211_netdev_notifier_call, %struct.notifier_block* null, i32 0 }, align 8
@cfg80211_pernet_ops = internal global %struct.pernet_operations { %struct.list_head zeroinitializer, i32 (%struct.net*)* null, void (%struct.net*)* @cfg80211_pernet_exit, void (%struct.list_head*)* null, i32* null, i64 0 }, align 8
@__exitcall_cfg80211_exit = internal global void ()* @cfg80211_exit, section ".exitcall.exit", align 8
@.str.7 = private unnamed_addr constant [20 x i8] c"net/wireless/core.h\00", align 1
@.str.8 = private unnamed_addr constant [8 x i8] c"phy%d%n\00", align 1
@__tracepoint_rdev_stop_p2p_device = external global %struct.tracepoint, align 8
@cpu_number = external global i32, align 4
@__cpu_online_mask = external global %struct.cpumask, align 8
@__tracepoint_rdev_return_void = external global %struct.tracepoint, align 8
@__tracepoint_rdev_stop_nan = external global %struct.tracepoint, align 8
@__tracepoint_rdev_del_virtual_intf = external global %struct.tracepoint, align 8
@__tracepoint_rdev_return_int = external global %struct.tracepoint, align 8
@__tracepoint_rdev_rfkill_poll = external global %struct.tracepoint, align 8
@__tracepoint_rdev_set_wakeup = external global %struct.tracepoint, align 8
@system_wq = external global %struct.workqueue_struct*, align 8
@__tracepoint_cfg80211_stop_iface = external global %struct.tracepoint, align 8
@.str.9 = private unnamed_addr constant [10 x i8] c"ieee80211\00", align 1
@.str.10 = private unnamed_addr constant [9 x i8] c"cfg80211\00", align 1
@wiphy_type = internal constant %struct.device_type { i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.14, i32 0, i32 0), %struct.attribute_group** null, i32 (%struct.device*, %struct.kobj_uevent_env*)* null, i8* (%struct.device*, i16*, %struct.kuid_t*, %struct.kgid_t*)* null, void (%struct.device*)* null, %struct.dev_pm_ops* null }, align 8
@cfg80211_netdev_notifier_call.__key = internal global %struct.lock_class_key zeroinitializer, align 1
@.str.11 = private unnamed_addr constant [11 x i8] c"&wdev->mtx\00", align 1
@.str.12 = private unnamed_addr constant [9 x i8] c"phy80211\00", align 1
@.str.13 = private unnamed_addr constant [55 x i8] c"\013cfg80211: failed to add phy80211 symlink to netdev!\0A\00", align 1
@.str.14 = private unnamed_addr constant [5 x i8] c"wlan\00", align 1
@__tracepoint_rdev_set_power_mgmt = external global %struct.tracepoint, align 8
@llvm.used = appending global [14 x i8*] [i8* bitcast (%struct.kernel_param* @__param_cfg80211_disable_40mhz_24ghz to i8*), i8* bitcast (%struct.kernel_symbol* @__ksymtab_cfg80211_shutdown_all_interfaces to i8*), i8* bitcast (%struct.kernel_symbol* @__ksymtab_wiphy_new_nm to i8*), i8* bitcast (%struct.kernel_symbol* @__ksymtab_wiphy_register to i8*), i8* bitcast (%struct.kernel_symbol* @__ksymtab_wiphy_rfkill_start_polling to i8*), i8* bitcast (%struct.kernel_symbol* @__ksymtab_wiphy_rfkill_stop_polling to i8*), i8* bitcast (%struct.kernel_symbol* @__ksymtab_wiphy_unregister to i8*), i8* bitcast (%struct.kernel_symbol* @__ksymtab_wiphy_free to i8*), i8* bitcast (%struct.kernel_symbol* @__ksymtab_wiphy_rfkill_set_hw_state to i8*), i8* bitcast (%struct.kernel_symbol* @__ksymtab_cfg80211_unregister_wdev to i8*), i8* bitcast (%struct.kernel_symbol* @__ksymtab_cfg80211_stop_iface to i8*), i8* bitcast (i32 ()** @__initcall_cfg80211_init4 to i8*), i8* bitcast (void ()* @cfg80211_exit to i8*), i8* bitcast (void ()** @__exitcall_cfg80211_exit to i8*)], section "llvm.metadata"

; Function Attrs: nounwind uwtable
define %struct.cfg80211_registered_device* @cfg80211_rdev_by_wiphy_idx(i32 %wiphy_idx) #0 {
entry:
  %call = call i32 @rtnl_is_locked()
  %tobool = icmp ne i32 %call, 0
  %lnot = xor i1 %tobool, true
  %lnot1 = xor i1 %lnot, true
  %lnot2 = xor i1 %lnot1, true
  %lnot.ext = zext i1 %lnot2 to i32
  %conv = sext i32 %lnot.ext to i64
  %expval = call i64 @llvm.expect.i64(i64 %conv, i64 0)
  %tobool3 = icmp ne i64 %expval, 0
  br i1 %tobool3, label %if.then, label %do.end

if.then:                                          ; preds = %entry
  %call4 = call i32 (i8*, ...) @printk(i8* getelementptr inbounds ([37 x i8], [37 x i8]* @.str, i32 0, i32 0), i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.1, i32 0, i32 0), i32 59)
  call void @dump_stack()
  br label %do.end

do.end:                                           ; preds = %if.then, %entry
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %do.end
  %next.sink = phi %struct.list_head** [ %next, %for.inc ], [ getelementptr inbounds (%struct.list_head, %struct.list_head* @cfg80211_rdev_list, i32 0, i32 0), %do.end ]
  %0 = load %struct.list_head*, %struct.list_head** %next.sink, align 8, !tbaa !2
  %1 = bitcast %struct.list_head* %0 to i8*
  %add.ptr14 = getelementptr inbounds i8, i8* %1, i64 -8
  %2 = bitcast i8* %add.ptr14 to %struct.cfg80211_registered_device*
  %list = getelementptr inbounds %struct.cfg80211_registered_device, %struct.cfg80211_registered_device* %2, i32 0, i32 1
  %cmp = icmp ne %struct.list_head* %list, @cfg80211_rdev_list
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %wiphy_idx6 = getelementptr inbounds %struct.cfg80211_registered_device, %struct.cfg80211_registered_device* %2, i32 0, i32 8
  %3 = load i32, i32* %wiphy_idx6, align 4, !tbaa !6
  %cmp7 = icmp eq i32 %3, %wiphy_idx
  br i1 %cmp7, label %for.end, label %for.inc

for.inc:                                          ; preds = %for.body
  %list12 = getelementptr inbounds %struct.cfg80211_registered_device, %struct.cfg80211_registered_device* %2, i32 0, i32 1
  %next = getelementptr inbounds %struct.list_head, %struct.list_head* %list12, i32 0, i32 0
  br label %for.cond

for.end:                                          ; preds = %for.cond, %for.body
  %result.0 = phi %struct.cfg80211_registered_device* [ %2, %for.body ], [ null, %for.cond ]
  ret %struct.cfg80211_registered_device* %result.0
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64, i8* nocapture) #1

declare i32 @rtnl_is_locked() #2

; Function Attrs: nounwind readnone
declare i64 @llvm.expect.i64(i64, i64) #3

declare i32 @printk(i8*, ...) #2

declare void @dump_stack() #2

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64, i8* nocapture) #1

; Function Attrs: nounwind uwtable
define i32 @get_wiphy_idx(%struct.wiphy* %wiphy) #0 {
entry:
  %call = call %struct.cfg80211_registered_device* @wiphy_to_rdev(%struct.wiphy* %wiphy)
  %wiphy_idx = getelementptr inbounds %struct.cfg80211_registered_device, %struct.cfg80211_registered_device* %call, i32 0, i32 8
  %0 = load i32, i32* %wiphy_idx, align 4, !tbaa !6
  ret i32 %0
}

; Function Attrs: inlinehint nounwind uwtable
define internal %struct.cfg80211_registered_device* @wiphy_to_rdev(%struct.wiphy* %wiphy) #4 {
entry:
  %tobool = icmp ne %struct.wiphy* %wiphy, null
  %lnot = xor i1 %tobool, true
  %lnot1 = xor i1 %lnot, true
  %lnot2 = xor i1 %lnot1, true
  %lnot.ext = zext i1 %lnot2 to i32
  %conv = sext i32 %lnot.ext to i64
  %expval = call i64 @llvm.expect.i64(i64 %conv, i64 0)
  %tobool3 = icmp ne i64 %expval, 0
  br i1 %tobool3, label %do.body4, label %do.end9

do.body4:                                         ; preds = %entry
  call void asm sideeffect "1:\09ud2\0A.pushsection __bug_table,\22a\22\0A2:\09.long 1b - 2b, ${0:c} - 2b\0A\09.word ${1:c}, 0\0A\09.org 2b+${2:c}\0A.popsection", "i,i,i,~{dirflag},~{fpsr},~{flags}"(i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.7, i32 0, i32 0), i32 108, i64 12) #6, !srcloc !38
  br label %do.body5

do.body5:                                         ; preds = %do.body5, %do.body4
  br label %do.body5

do.end9:                                          ; preds = %entry
  %0 = bitcast %struct.wiphy* %wiphy to i8*
  %add.ptr = getelementptr inbounds i8, i8* %0, i64 -672
  %1 = bitcast i8* %add.ptr to %struct.cfg80211_registered_device*
  ret %struct.cfg80211_registered_device* %1
}

; Function Attrs: nounwind uwtable
define %struct.wiphy* @wiphy_idx_to_wiphy(i32 %wiphy_idx) #0 {
entry:
  %call = call i32 @rtnl_is_locked()
  %tobool = icmp ne i32 %call, 0
  %lnot = xor i1 %tobool, true
  %lnot1 = xor i1 %lnot, true
  %lnot2 = xor i1 %lnot1, true
  %lnot.ext = zext i1 %lnot2 to i32
  %conv = sext i32 %lnot.ext to i64
  %expval = call i64 @llvm.expect.i64(i64 %conv, i64 0)
  %tobool3 = icmp ne i64 %expval, 0
  br i1 %tobool3, label %if.then, label %do.end

if.then:                                          ; preds = %entry
  %call4 = call i32 (i8*, ...) @printk(i8* getelementptr inbounds ([37 x i8], [37 x i8]* @.str, i32 0, i32 0), i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.1, i32 0, i32 0), i32 82)
  call void @dump_stack()
  br label %do.end

do.end:                                           ; preds = %if.then, %entry
  %call5 = call %struct.cfg80211_registered_device* @cfg80211_rdev_by_wiphy_idx(i32 %wiphy_idx)
  %tobool6 = icmp ne %struct.cfg80211_registered_device* %call5, null
  %wiphy = getelementptr inbounds %struct.cfg80211_registered_device, %struct.cfg80211_registered_device* %call5, i32 0, i32 42
  %retval.0 = select i1 %tobool6, %struct.wiphy* %wiphy, %struct.wiphy* null
  ret %struct.wiphy* %retval.0
}

; Function Attrs: nounwind uwtable
define i32 @cfg80211_dev_rename(%struct.cfg80211_registered_device* %rdev, i8* %newname) #0 {
entry:
  %call = call i32 @rtnl_is_locked()
  %tobool = icmp ne i32 %call, 0
  %lnot = xor i1 %tobool, true
  %lnot1 = xor i1 %lnot, true
  %lnot2 = xor i1 %lnot1, true
  %lnot.ext = zext i1 %lnot2 to i32
  %conv = sext i32 %lnot.ext to i64
  %expval = call i64 @llvm.expect.i64(i64 %conv, i64 0)
  %tobool3 = icmp ne i64 %expval, 0
  br i1 %tobool3, label %if.then, label %do.end

if.then:                                          ; preds = %entry
  %call4 = call i32 (i8*, ...) @printk(i8* getelementptr inbounds ([37 x i8], [37 x i8]* @.str, i32 0, i32 0), i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.1, i32 0, i32 0), i32 126)
  call void @dump_stack()
  br label %do.end

do.end:                                           ; preds = %if.then, %entry
  %wiphy = getelementptr inbounds %struct.cfg80211_registered_device, %struct.cfg80211_registered_device* %rdev, i32 0, i32 42
  %call5 = call i8* @wiphy_name(%struct.wiphy* %wiphy)
  %call6 = call i32 @strcmp(i8* %newname, i8* %call5)
  %cmp = icmp eq i32 %call6, 0
  br i1 %cmp, label %cleanup, label %if.end9

if.end9:                                          ; preds = %do.end
  %call10 = call i32 @cfg80211_dev_check_name(%struct.cfg80211_registered_device* %rdev, i8* %newname)
  %cmp11 = icmp slt i32 %call10, 0
  br i1 %cmp11, label %cleanup, label %if.end14

if.end14:                                         ; preds = %if.end9
  %wiphy15 = getelementptr inbounds %struct.cfg80211_registered_device, %struct.cfg80211_registered_device* %rdev, i32 0, i32 42
  %dev = getelementptr inbounds %struct.wiphy, %struct.wiphy* %wiphy15, i32 0, i32 50
  %call16 = call i32 @device_rename(%struct.device* %dev, i8* %newname)
  %tobool17 = icmp ne i32 %call16, 0
  br i1 %tobool17, label %cleanup, label %if.end19

if.end19:                                         ; preds = %if.end14
  %wiphy20 = getelementptr inbounds %struct.cfg80211_registered_device, %struct.cfg80211_registered_device* %rdev, i32 0, i32 42
  %debugfsdir = getelementptr inbounds %struct.wiphy, %struct.wiphy* %wiphy20, i32 0, i32 52
  %0 = load %struct.dentry*, %struct.dentry** %debugfsdir, align 32, !tbaa !39
  %tobool21 = icmp ne %struct.dentry* %0, null
  br i1 %tobool21, label %land.lhs.true, label %if.end33

land.lhs.true:                                    ; preds = %if.end19
  %wiphy22 = getelementptr inbounds %struct.cfg80211_registered_device, %struct.cfg80211_registered_device* %rdev, i32 0, i32 42
  %debugfsdir23 = getelementptr inbounds %struct.wiphy, %struct.wiphy* %wiphy22, i32 0, i32 52
  %1 = load %struct.dentry*, %struct.dentry** %debugfsdir23, align 32, !tbaa !39
  %d_parent = getelementptr inbounds %struct.dentry, %struct.dentry* %1, i32 0, i32 3
  %2 = load %struct.dentry*, %struct.dentry** %d_parent, align 8, !tbaa !40
  %wiphy24 = getelementptr inbounds %struct.cfg80211_registered_device, %struct.cfg80211_registered_device* %rdev, i32 0, i32 42
  %debugfsdir25 = getelementptr inbounds %struct.wiphy, %struct.wiphy* %wiphy24, i32 0, i32 52
  %3 = load %struct.dentry*, %struct.dentry** %debugfsdir25, align 32, !tbaa !39
  %wiphy26 = getelementptr inbounds %struct.cfg80211_registered_device, %struct.cfg80211_registered_device* %rdev, i32 0, i32 42
  %debugfsdir27 = getelementptr inbounds %struct.wiphy, %struct.wiphy* %wiphy26, i32 0, i32 52
  %4 = load %struct.dentry*, %struct.dentry** %debugfsdir27, align 32, !tbaa !39
  %d_parent28 = getelementptr inbounds %struct.dentry, %struct.dentry* %4, i32 0, i32 3
  %5 = load %struct.dentry*, %struct.dentry** %d_parent28, align 8, !tbaa !40
  %call29 = call %struct.dentry* @debugfs_rename(%struct.dentry* %2, %struct.dentry* %3, %struct.dentry* %5, i8* %newname)
  %tobool30 = icmp ne %struct.dentry* %call29, null
  br i1 %tobool30, label %if.end33, label %if.then31

if.then31:                                        ; preds = %land.lhs.true
  %call32 = call i32 (i8*, ...) @printk(i8* getelementptr inbounds ([49 x i8], [49 x i8]* @.str.2, i32 0, i32 0), i8* %newname)
  br label %if.end33

if.end33:                                         ; preds = %if.then31, %land.lhs.true, %if.end19
  call void @nl80211_notify_wiphy(%struct.cfg80211_registered_device* %rdev, i32 3)
  br label %cleanup

cleanup:                                          ; preds = %if.end14, %if.end9, %do.end, %if.end33
  %retval.0 = phi i32 [ 0, %if.end33 ], [ 0, %do.end ], [ %call10, %if.end9 ], [ %call16, %if.end14 ]
  ret i32 %retval.0
}

declare i32 @strcmp(i8*, i8*) #2

; Function Attrs: inlinehint nounwind uwtable
define internal i8* @wiphy_name(%struct.wiphy* %wiphy) #4 {
entry:
  %dev = getelementptr inbounds %struct.wiphy, %struct.wiphy* %wiphy, i32 0, i32 50
  %call = call i8* @dev_name(%struct.device* %dev)
  ret i8* %call
}

; Function Attrs: nounwind uwtable
define internal i32 @cfg80211_dev_check_name(%struct.cfg80211_registered_device* %rdev, i8* %newname) #0 {
entry:
  %wiphy_idx = alloca i32, align 4
  %taken = alloca i32, align 4
  %0 = bitcast i32* %wiphy_idx to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* %0) #6
  %1 = bitcast i32* %taken to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* %1) #6
  store i32 -1, i32* %taken, align 4, !tbaa !46
  %call = call i32 @rtnl_is_locked()
  %tobool = icmp ne i32 %call, 0
  %lnot = xor i1 %tobool, true
  %lnot1 = xor i1 %lnot, true
  %lnot2 = xor i1 %lnot1, true
  %lnot.ext = zext i1 %lnot2 to i32
  %conv = sext i32 %lnot.ext to i64
  %expval = call i64 @llvm.expect.i64(i64 %conv, i64 0)
  %tobool3 = icmp ne i64 %expval, 0
  br i1 %tobool3, label %if.then, label %do.end

if.then:                                          ; preds = %entry
  %call4 = call i32 (i8*, ...) @printk(i8* getelementptr inbounds ([37 x i8], [37 x i8]* @.str, i32 0, i32 0), i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.1, i32 0, i32 0), i32 96)
  call void @dump_stack()
  br label %do.end

do.end:                                           ; preds = %if.then, %entry
  %call5 = call i32 (i8*, i8*, ...) @sscanf(i8* %newname, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.8, i32 0, i32 0), i32* %wiphy_idx, i32* %taken)
  %2 = load i32, i32* %taken, align 4, !tbaa !46
  %conv6 = sext i32 %2 to i64
  %call7 = call i64 @strlen(i8* %newname)
  %cmp = icmp eq i64 %conv6, %call7
  br i1 %cmp, label %land.lhs.true, label %if.end20

land.lhs.true:                                    ; preds = %do.end
  %3 = load i32, i32* %wiphy_idx, align 4, !tbaa !46
  %wiphy_idx9 = getelementptr inbounds %struct.cfg80211_registered_device, %struct.cfg80211_registered_device* %rdev, i32 0, i32 8
  %4 = load i32, i32* %wiphy_idx9, align 4, !tbaa !6
  %cmp10 = icmp ne i32 %3, %4
  br i1 %cmp10, label %if.then12, label %if.end20

if.then12:                                        ; preds = %land.lhs.true
  br label %while.cond

while.cond:                                       ; preds = %while.body, %if.then12
  %digits.0 = phi i32 [ 1, %if.then12 ], [ %inc, %while.body ]
  %5 = load i32, i32* %wiphy_idx, align 4, !tbaa !46
  %div = sdiv i32 %5, 10
  store i32 %div, i32* %wiphy_idx, align 4, !tbaa !46
  %tobool13 = icmp ne i32 %div, 0
  br i1 %tobool13, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %inc = add nsw i32 %digits.0, 1
  br label %while.cond

while.end:                                        ; preds = %while.cond
  %6 = load i32, i32* %taken, align 4, !tbaa !46
  %conv14 = sext i32 %6 to i64
  %conv15 = sext i32 %digits.0 to i64
  %add = add i64 3, %conv15
  %cmp16 = icmp eq i64 %conv14, %add
  br i1 %cmp16, label %cleanup, label %if.end20

if.end20:                                         ; preds = %while.end, %land.lhs.true, %do.end
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %if.end20
  %next.sink = phi %struct.list_head** [ %next, %for.inc ], [ getelementptr inbounds (%struct.list_head, %struct.list_head* @cfg80211_rdev_list, i32 0, i32 0), %if.end20 ]
  %7 = load %struct.list_head*, %struct.list_head** %next.sink, align 8, !tbaa !2
  %8 = bitcast %struct.list_head* %7 to i8*
  %add.ptr32 = getelementptr inbounds i8, i8* %8, i64 -8
  %9 = bitcast i8* %add.ptr32 to %struct.cfg80211_registered_device*
  %list = getelementptr inbounds %struct.cfg80211_registered_device, %struct.cfg80211_registered_device* %9, i32 0, i32 1
  %cmp21 = icmp ne %struct.list_head* %list, @cfg80211_rdev_list
  br i1 %cmp21, label %for.body, label %cleanup

for.body:                                         ; preds = %for.cond
  %wiphy = getelementptr inbounds %struct.cfg80211_registered_device, %struct.cfg80211_registered_device* %9, i32 0, i32 42
  %call23 = call i8* @wiphy_name(%struct.wiphy* %wiphy)
  %call24 = call i32 @strcmp(i8* %newname, i8* %call23)
  %cmp25 = icmp eq i32 %call24, 0
  br i1 %cmp25, label %cleanup, label %for.inc

for.inc:                                          ; preds = %for.body
  %list30 = getelementptr inbounds %struct.cfg80211_registered_device, %struct.cfg80211_registered_device* %9, i32 0, i32 1
  %next = getelementptr inbounds %struct.list_head, %struct.list_head* %list30, i32 0, i32 0
  br label %for.cond

cleanup:                                          ; preds = %for.cond, %for.body, %while.end
  %retval.0 = phi i32 [ -22, %while.end ], [ -22, %for.body ], [ 0, %for.cond ]
  %10 = bitcast i32* %taken to i8*
  call void @llvm.lifetime.end.p0i8(i64 4, i8* %10) #6
  %11 = bitcast i32* %wiphy_idx to i8*
  call void @llvm.lifetime.end.p0i8(i64 4, i8* %11) #6
  ret i32 %retval.0
}

declare i32 @device_rename(%struct.device*, i8*) #2

declare %struct.dentry* @debugfs_rename(%struct.dentry*, %struct.dentry*, %struct.dentry*, i8*) #2

declare void @nl80211_notify_wiphy(%struct.cfg80211_registered_device*, i32) #2

; Function Attrs: nounwind uwtable
define i32 @cfg80211_switch_netns(%struct.cfg80211_registered_device* %rdev, %struct.net* %net) #0 {
entry:
  %wiphy = getelementptr inbounds %struct.cfg80211_registered_device, %struct.cfg80211_registered_device* %rdev, i32 0, i32 42
  %flags = getelementptr inbounds %struct.wiphy, %struct.wiphy* %wiphy, i32 0, i32 10
  %0 = load i32, i32* %flags, align 4, !tbaa !47
  %and = and i32 %0, 8
  %tobool = icmp ne i32 %and, 0
  br i1 %tobool, label %if.end, label %cleanup

if.end:                                           ; preds = %entry
  %wiphy1 = getelementptr inbounds %struct.cfg80211_registered_device, %struct.cfg80211_registered_device* %rdev, i32 0, i32 42
  %wdev_list = getelementptr inbounds %struct.wiphy, %struct.wiphy* %wiphy1, i32 0, i32 55
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %if.end
  %list16.sink = phi %struct.list_head* [ %list16, %for.inc ], [ %wdev_list, %if.end ]
  %err.0 = phi i32 [ 0, %if.end ], [ %err.1, %for.inc ]
  %next17 = getelementptr inbounds %struct.list_head, %struct.list_head* %list16.sink, i32 0, i32 0
  %1 = load %struct.list_head*, %struct.list_head** %next17, align 8, !tbaa !2
  %2 = bitcast %struct.list_head* %1 to i8*
  %add.ptr19 = getelementptr inbounds i8, i8* %2, i64 -16
  %3 = bitcast i8* %add.ptr19 to %struct.wireless_dev*
  %list = getelementptr inbounds %struct.wireless_dev, %struct.wireless_dev* %3, i32 0, i32 2
  %wiphy2 = getelementptr inbounds %struct.cfg80211_registered_device, %struct.cfg80211_registered_device* %rdev, i32 0, i32 42
  %wdev_list3 = getelementptr inbounds %struct.wiphy, %struct.wiphy* %wiphy2, i32 0, i32 55
  %cmp = icmp ne %struct.list_head* %list, %wdev_list3
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %netdev = getelementptr inbounds %struct.wireless_dev, %struct.wireless_dev* %3, i32 0, i32 3
  %4 = load %struct.net_device*, %struct.net_device** %netdev, align 8, !tbaa !48
  %tobool4 = icmp ne %struct.net_device* %4, null
  br i1 %tobool4, label %if.end6, label %for.inc

if.end6:                                          ; preds = %for.body
  %netdev7 = getelementptr inbounds %struct.wireless_dev, %struct.wireless_dev* %3, i32 0, i32 3
  %5 = load %struct.net_device*, %struct.net_device** %netdev7, align 8, !tbaa !48
  %features = getelementptr inbounds %struct.net_device, %struct.net_device* %5, i32 0, i32 16
  %6 = load i64, i64* %features, align 16, !tbaa !51
  %and8 = and i64 %6, -8193
  store i64 %and8, i64* %features, align 16, !tbaa !51
  %netdev9 = getelementptr inbounds %struct.wireless_dev, %struct.wireless_dev* %3, i32 0, i32 3
  %7 = load %struct.net_device*, %struct.net_device** %netdev9, align 8, !tbaa !48
  %call = call i32 @dev_change_net_namespace(%struct.net_device* %7, %struct.net* %net, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.3, i32 0, i32 0))
  %tobool10 = icmp ne i32 %call, 0
  br i1 %tobool10, label %for.end, label %if.end12

if.end12:                                         ; preds = %if.end6
  %netdev13 = getelementptr inbounds %struct.wireless_dev, %struct.wireless_dev* %3, i32 0, i32 3
  %8 = load %struct.net_device*, %struct.net_device** %netdev13, align 8, !tbaa !48
  %features14 = getelementptr inbounds %struct.net_device, %struct.net_device* %8, i32 0, i32 16
  %9 = load i64, i64* %features14, align 16, !tbaa !51
  %or = or i64 %9, 8192
  store i64 %or, i64* %features14, align 16, !tbaa !51
  br label %for.inc

for.inc:                                          ; preds = %for.body, %if.end12
  %err.1 = phi i32 [ %call, %if.end12 ], [ %err.0, %for.body ]
  %list16 = getelementptr inbounds %struct.wireless_dev, %struct.wireless_dev* %3, i32 0, i32 2
  br label %for.cond

for.end:                                          ; preds = %for.cond, %if.end6
  %err.2 = phi i32 [ %call, %if.end6 ], [ %err.0, %for.cond ]
  %tobool20 = icmp ne i32 %err.2, 0
  %wiphy22 = getelementptr inbounds %struct.cfg80211_registered_device, %struct.cfg80211_registered_device* %rdev, i32 0, i32 42
  br i1 %tobool20, label %if.then21, label %if.end71

if.then21:                                        ; preds = %for.end
  %call23 = call %struct.net* @wiphy_net(%struct.wiphy* %wiphy22)
  br label %for.cond28

for.cond28:                                       ; preds = %for.inc64, %if.then21
  %.sink = phi %struct.wireless_dev* [ %12, %for.inc64 ], [ %3, %if.then21 ]
  %err.3 = phi i32 [ %err.2, %if.then21 ], [ %err.4, %for.inc64 ]
  %list66 = getelementptr inbounds %struct.wireless_dev, %struct.wireless_dev* %.sink, i32 0, i32 2
  %prev67 = getelementptr inbounds %struct.list_head, %struct.list_head* %list66, i32 0, i32 1
  %10 = load %struct.list_head*, %struct.list_head** %prev67, align 8, !tbaa !56
  %11 = bitcast %struct.list_head* %10 to i8*
  %add.ptr69 = getelementptr inbounds i8, i8* %11, i64 -16
  %12 = bitcast i8* %add.ptr69 to %struct.wireless_dev*
  %list29 = getelementptr inbounds %struct.wireless_dev, %struct.wireless_dev* %12, i32 0, i32 2
  %wiphy30 = getelementptr inbounds %struct.cfg80211_registered_device, %struct.cfg80211_registered_device* %rdev, i32 0, i32 42
  %wdev_list31 = getelementptr inbounds %struct.wiphy, %struct.wiphy* %wiphy30, i32 0, i32 55
  %cmp32 = icmp ne %struct.list_head* %list29, %wdev_list31
  br i1 %cmp32, label %for.body33, label %cleanup

for.body33:                                       ; preds = %for.cond28
  %netdev34 = getelementptr inbounds %struct.wireless_dev, %struct.wireless_dev* %12, i32 0, i32 3
  %13 = load %struct.net_device*, %struct.net_device** %netdev34, align 8, !tbaa !48
  %tobool35 = icmp ne %struct.net_device* %13, null
  br i1 %tobool35, label %if.end37, label %for.inc64

if.end37:                                         ; preds = %for.body33
  %netdev38 = getelementptr inbounds %struct.wireless_dev, %struct.wireless_dev* %12, i32 0, i32 3
  %14 = load %struct.net_device*, %struct.net_device** %netdev38, align 8, !tbaa !48
  %features39 = getelementptr inbounds %struct.net_device, %struct.net_device* %14, i32 0, i32 16
  %15 = load i64, i64* %features39, align 16, !tbaa !51
  %and40 = and i64 %15, -8193
  store i64 %and40, i64* %features39, align 16, !tbaa !51
  %netdev41 = getelementptr inbounds %struct.wireless_dev, %struct.wireless_dev* %12, i32 0, i32 3
  %16 = load %struct.net_device*, %struct.net_device** %netdev41, align 8, !tbaa !48
  %call42 = call i32 @dev_change_net_namespace(%struct.net_device* %16, %struct.net* %call23, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.3, i32 0, i32 0))
  %tobool43 = icmp ne i32 %call42, 0
  %lnot = xor i1 %tobool43, true
  %lnot44 = xor i1 %lnot, true
  %lnot.ext = zext i1 %lnot44 to i32
  %tobool45 = icmp ne i32 %lnot.ext, 0
  %lnot46 = xor i1 %tobool45, true
  %lnot48 = xor i1 %lnot46, true
  %lnot.ext49 = zext i1 %lnot48 to i32
  %conv = sext i32 %lnot.ext49 to i64
  %expval = call i64 @llvm.expect.i64(i64 %conv, i64 0)
  %tobool50 = icmp ne i64 %expval, 0
  br i1 %tobool50, label %if.then51, label %if.end52

if.then51:                                        ; preds = %if.end37
  call void @warn_slowpath_null(i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.1, i32 0, i32 0), i32 183)
  br label %if.end52

if.end52:                                         ; preds = %if.then51, %if.end37
  %tobool54 = icmp ne i32 %lnot.ext, 0
  %lnot55 = xor i1 %tobool54, true
  %lnot57 = xor i1 %lnot55, true
  %lnot.ext58 = zext i1 %lnot57 to i32
  %conv59 = sext i32 %lnot.ext58 to i64
  %expval60 = call i64 @llvm.expect.i64(i64 %conv59, i64 0)
  %netdev61 = getelementptr inbounds %struct.wireless_dev, %struct.wireless_dev* %12, i32 0, i32 3
  %17 = load %struct.net_device*, %struct.net_device** %netdev61, align 8, !tbaa !48
  %features62 = getelementptr inbounds %struct.net_device, %struct.net_device* %17, i32 0, i32 16
  %18 = load i64, i64* %features62, align 16, !tbaa !51
  %or63 = or i64 %18, 8192
  store i64 %or63, i64* %features62, align 16, !tbaa !51
  br label %for.inc64

for.inc64:                                        ; preds = %for.body33, %if.end52
  %err.4 = phi i32 [ %call42, %if.end52 ], [ %err.3, %for.body33 ]
  br label %for.cond28

if.end71:                                         ; preds = %for.end
  call void @wiphy_net_set(%struct.wiphy* %wiphy22, %struct.net* %net)
  %wiphy73 = getelementptr inbounds %struct.cfg80211_registered_device, %struct.cfg80211_registered_device* %rdev, i32 0, i32 42
  %dev = getelementptr inbounds %struct.wiphy, %struct.wiphy* %wiphy73, i32 0, i32 50
  %wiphy74 = getelementptr inbounds %struct.cfg80211_registered_device, %struct.cfg80211_registered_device* %rdev, i32 0, i32 42
  %dev75 = getelementptr inbounds %struct.wiphy, %struct.wiphy* %wiphy74, i32 0, i32 50
  %call76 = call i8* @dev_name(%struct.device* %dev75)
  %call77 = call i32 @device_rename(%struct.device* %dev, i8* %call76)
  %tobool79 = icmp ne i32 %call77, 0
  %lnot80 = xor i1 %tobool79, true
  %lnot82 = xor i1 %lnot80, true
  %lnot.ext83 = zext i1 %lnot82 to i32
  %tobool84 = icmp ne i32 %lnot.ext83, 0
  %lnot85 = xor i1 %tobool84, true
  %lnot87 = xor i1 %lnot85, true
  %lnot.ext88 = zext i1 %lnot87 to i32
  %conv89 = sext i32 %lnot.ext88 to i64
  %expval90 = call i64 @llvm.expect.i64(i64 %conv89, i64 0)
  %tobool91 = icmp ne i64 %expval90, 0
  br i1 %tobool91, label %if.then92, label %if.end93

if.then92:                                        ; preds = %if.end71
  call void @warn_slowpath_null(i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.1, i32 0, i32 0), i32 193)
  br label %if.end93

if.end93:                                         ; preds = %if.then92, %if.end71
  %tobool95 = icmp ne i32 %lnot.ext83, 0
  %lnot96 = xor i1 %tobool95, true
  %lnot98 = xor i1 %lnot96, true
  %lnot.ext99 = zext i1 %lnot98 to i32
  %conv100 = sext i32 %lnot.ext99 to i64
  %expval101 = call i64 @llvm.expect.i64(i64 %conv100, i64 0)
  br label %cleanup

cleanup:                                          ; preds = %for.cond28, %entry, %if.end93
  %retval.0 = phi i32 [ 0, %if.end93 ], [ -95, %entry ], [ %err.3, %for.cond28 ]
  ret i32 %retval.0
}

declare i32 @dev_change_net_namespace(%struct.net_device*, %struct.net*, i8*) #2

; Function Attrs: inlinehint nounwind uwtable
define internal %struct.net* @wiphy_net(%struct.wiphy* %wiphy) #4 {
entry:
  %_net = getelementptr inbounds %struct.wiphy, %struct.wiphy* %wiphy, i32 0, i32 56
  %call = call %struct.net* @read_pnet(%struct.possible_net_t* %_net)
  ret %struct.net* %call
}

declare void @warn_slowpath_null(i8*, i32) #2

; Function Attrs: inlinehint nounwind uwtable
define internal void @wiphy_net_set(%struct.wiphy* %wiphy, %struct.net* %net) #4 {
entry:
  %_net = getelementptr inbounds %struct.wiphy, %struct.wiphy* %wiphy, i32 0, i32 56
  call void @write_pnet(%struct.possible_net_t* %_net, %struct.net* %net)
  ret void
}

; Function Attrs: inlinehint nounwind uwtable
define internal i8* @dev_name(%struct.device* %dev) #4 {
entry:
  %init_name = getelementptr inbounds %struct.device, %struct.device* %dev, i32 0, i32 3
  %0 = load i8*, i8** %init_name, align 8, !tbaa !57
  %tobool = icmp ne i8* %0, null
  br i1 %tobool, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %init_name1 = getelementptr inbounds %struct.device, %struct.device* %dev, i32 0, i32 3
  %1 = load i8*, i8** %init_name1, align 8, !tbaa !57
  br label %return

if.end:                                           ; preds = %entry
  %kobj = getelementptr inbounds %struct.device, %struct.device* %dev, i32 0, i32 2
  %call = call i8* @kobject_name(%struct.kobject* %kobj)
  br label %return

return:                                           ; preds = %if.end, %if.then
  %retval.0 = phi i8* [ %1, %if.then ], [ %call, %if.end ]
  ret i8* %retval.0
}

; Function Attrs: nounwind uwtable
define void @cfg80211_stop_p2p_device(%struct.cfg80211_registered_device* %rdev, %struct.wireless_dev* %wdev) #0 {
entry:
  %call = call i32 @rtnl_is_locked()
  %tobool = icmp ne i32 %call, 0
  %lnot = xor i1 %tobool, true
  %lnot1 = xor i1 %lnot, true
  %lnot2 = xor i1 %lnot1, true
  %lnot.ext = zext i1 %lnot2 to i32
  %conv = sext i32 %lnot.ext to i64
  %expval = call i64 @llvm.expect.i64(i64 %conv, i64 0)
  %tobool3 = icmp ne i64 %expval, 0
  br i1 %tobool3, label %if.then, label %do.end

if.then:                                          ; preds = %entry
  %call4 = call i32 (i8*, ...) @printk(i8* getelementptr inbounds ([37 x i8], [37 x i8]* @.str, i32 0, i32 0), i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.1, i32 0, i32 0), i32 208)
  call void @dump_stack()
  br label %do.end

do.end:                                           ; preds = %entry, %if.then
  %iftype = getelementptr inbounds %struct.wireless_dev, %struct.wireless_dev* %wdev, i32 0, i32 1
  %0 = load i32, i32* %iftype, align 8, !tbaa !58
  %cmp = icmp ne i32 %0, 10
  %lnot6 = xor i1 %cmp, true
  %lnot8 = xor i1 %lnot6, true
  %lnot.ext9 = zext i1 %lnot8 to i32
  %tobool10 = icmp ne i32 %lnot.ext9, 0
  %lnot11 = xor i1 %tobool10, true
  %lnot13 = xor i1 %lnot11, true
  %lnot.ext14 = zext i1 %lnot13 to i32
  %conv15 = sext i32 %lnot.ext14 to i64
  %expval16 = call i64 @llvm.expect.i64(i64 %conv15, i64 0)
  %tobool17 = icmp ne i64 %expval16, 0
  br i1 %tobool17, label %if.then18, label %if.end19

if.then18:                                        ; preds = %do.end
  call void @warn_slowpath_null(i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.1, i32 0, i32 0), i32 210)
  br label %if.end19

if.end19:                                         ; preds = %if.then18, %do.end
  %tobool20 = icmp ne i32 %lnot.ext9, 0
  %lnot21 = xor i1 %tobool20, true
  %lnot23 = xor i1 %lnot21, true
  %lnot.ext24 = zext i1 %lnot23 to i32
  %conv25 = sext i32 %lnot.ext24 to i64
  %expval26 = call i64 @llvm.expect.i64(i64 %conv25, i64 0)
  %tobool27 = icmp ne i64 %expval26, 0
  br i1 %tobool27, label %if.end70, label %if.end29

if.end29:                                         ; preds = %if.end19
  %call30 = call zeroext i1 @wdev_running(%struct.wireless_dev* %wdev)
  br i1 %call30, label %if.end32, label %if.end70

if.end32:                                         ; preds = %if.end29
  call void @rdev_stop_p2p_device(%struct.cfg80211_registered_device* %rdev, %struct.wireless_dev* %wdev)
  %is_running = getelementptr inbounds %struct.wireless_dev, %struct.wireless_dev* %wdev, i32 0, i32 9
  store i8 0, i8* %is_running, align 1, !tbaa !59
  %opencount = getelementptr inbounds %struct.cfg80211_registered_device, %struct.cfg80211_registered_device* %rdev, i32 0, i32 11
  %1 = load i32, i32* %opencount, align 8, !tbaa !60
  %dec = add nsw i32 %1, -1
  store i32 %dec, i32* %opencount, align 8, !tbaa !60
  %scan_req = getelementptr inbounds %struct.cfg80211_registered_device, %struct.cfg80211_registered_device* %rdev, i32 0, i32 25
  %2 = load %struct.cfg80211_scan_request*, %struct.cfg80211_scan_request** %scan_req, align 8, !tbaa !61
  %tobool33 = icmp ne %struct.cfg80211_scan_request* %2, null
  br i1 %tobool33, label %land.lhs.true, label %if.end70

land.lhs.true:                                    ; preds = %if.end32
  %scan_req34 = getelementptr inbounds %struct.cfg80211_registered_device, %struct.cfg80211_registered_device* %rdev, i32 0, i32 25
  %3 = load %struct.cfg80211_scan_request*, %struct.cfg80211_scan_request** %scan_req34, align 8, !tbaa !61
  %wdev35 = getelementptr inbounds %struct.cfg80211_scan_request, %struct.cfg80211_scan_request* %3, i32 0, i32 10
  %4 = load %struct.wireless_dev*, %struct.wireless_dev** %wdev35, align 8, !tbaa !62
  %cmp36 = icmp eq %struct.wireless_dev* %4, %wdev
  br i1 %cmp36, label %if.then38, label %if.end70

if.then38:                                        ; preds = %land.lhs.true
  %scan_req40 = getelementptr inbounds %struct.cfg80211_registered_device, %struct.cfg80211_registered_device* %rdev, i32 0, i32 25
  %5 = load %struct.cfg80211_scan_request*, %struct.cfg80211_scan_request** %scan_req40, align 8, !tbaa !61
  %notified = getelementptr inbounds %struct.cfg80211_scan_request, %struct.cfg80211_scan_request* %5, i32 0, i32 17
  %6 = load i8, i8* %notified, align 8, !tbaa !65, !range !66
  %tobool41 = trunc i8 %6 to i1
  %lnot42 = xor i1 %tobool41, true
  %lnot44 = xor i1 %lnot42, true
  %lnot46 = xor i1 %lnot44, true
  %lnot.ext47 = zext i1 %lnot46 to i32
  %tobool48 = icmp ne i32 %lnot.ext47, 0
  %lnot49 = xor i1 %tobool48, true
  %lnot51 = xor i1 %lnot49, true
  %lnot.ext52 = zext i1 %lnot51 to i32
  %conv53 = sext i32 %lnot.ext52 to i64
  %expval54 = call i64 @llvm.expect.i64(i64 %conv53, i64 0)
  %tobool55 = icmp ne i64 %expval54, 0
  br i1 %tobool55, label %if.then56, label %if.end57

if.then56:                                        ; preds = %if.then38
  call void @warn_slowpath_null(i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.1, i32 0, i32 0), i32 222)
  br label %if.end57

if.end57:                                         ; preds = %if.then56, %if.then38
  %tobool59 = icmp ne i32 %lnot.ext47, 0
  %lnot60 = xor i1 %tobool59, true
  %lnot62 = xor i1 %lnot60, true
  %lnot.ext63 = zext i1 %lnot62 to i32
  %conv64 = sext i32 %lnot.ext63 to i64
  %expval65 = call i64 @llvm.expect.i64(i64 %conv64, i64 0)
  %tobool66 = icmp ne i64 %expval65, 0
  br i1 %tobool66, label %if.then67, label %if.end69

if.then67:                                        ; preds = %if.end57
  %scan_req68 = getelementptr inbounds %struct.cfg80211_registered_device, %struct.cfg80211_registered_device* %rdev, i32 0, i32 25
  %7 = load %struct.cfg80211_scan_request*, %struct.cfg80211_scan_request** %scan_req68, align 8, !tbaa !61
  %info = getelementptr inbounds %struct.cfg80211_scan_request, %struct.cfg80211_scan_request* %7, i32 0, i32 16
  %aborted = getelementptr inbounds %struct.cfg80211_scan_info, %struct.cfg80211_scan_info* %info, i32 0, i32 2
  store i8 1, i8* %aborted, align 2, !tbaa !67
  br label %if.end69

if.end69:                                         ; preds = %if.then67, %if.end57
  call void @___cfg80211_scan_done(%struct.cfg80211_registered_device* %rdev, i1 zeroext false)
  br label %if.end70

if.end70:                                         ; preds = %if.end29, %if.end19, %if.end69, %land.lhs.true, %if.end32
  ret void
}

; Function Attrs: inlinehint nounwind uwtable
define internal zeroext i1 @wdev_running(%struct.wireless_dev* %wdev) #4 {
entry:
  %netdev = getelementptr inbounds %struct.wireless_dev, %struct.wireless_dev* %wdev, i32 0, i32 3
  %0 = load %struct.net_device*, %struct.net_device** %netdev, align 8, !tbaa !48
  %tobool = icmp ne %struct.net_device* %0, null
  br i1 %tobool, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %netdev1 = getelementptr inbounds %struct.wireless_dev, %struct.wireless_dev* %wdev, i32 0, i32 3
  %1 = load %struct.net_device*, %struct.net_device** %netdev1, align 8, !tbaa !48
  %call = call zeroext i1 @netif_running(%struct.net_device* %1)
  br label %return

if.end:                                           ; preds = %entry
  %is_running = getelementptr inbounds %struct.wireless_dev, %struct.wireless_dev* %wdev, i32 0, i32 9
  %2 = load i8, i8* %is_running, align 1, !tbaa !59, !range !66
  %tobool2 = trunc i8 %2 to i1
  br label %return

return:                                           ; preds = %if.end, %if.then
  %retval.0 = phi i1 [ %call, %if.then ], [ %tobool2, %if.end ]
  ret i1 %retval.0
}

; Function Attrs: inlinehint nounwind uwtable
define internal void @rdev_stop_p2p_device(%struct.cfg80211_registered_device* %rdev, %struct.wireless_dev* %wdev) #4 {
entry:
  %wiphy = getelementptr inbounds %struct.cfg80211_registered_device, %struct.cfg80211_registered_device* %rdev, i32 0, i32 42
  call void @trace_rdev_stop_p2p_device(%struct.wiphy* %wiphy, %struct.wireless_dev* %wdev)
  %ops = getelementptr inbounds %struct.cfg80211_registered_device, %struct.cfg80211_registered_device* %rdev, i32 0, i32 0
  %0 = load %struct.cfg80211_ops*, %struct.cfg80211_ops** %ops, align 32, !tbaa !68
  %stop_p2p_device = getelementptr inbounds %struct.cfg80211_ops, %struct.cfg80211_ops* %0, i32 0, i32 77
  %1 = load void (%struct.wiphy*, %struct.wireless_dev*)*, void (%struct.wiphy*, %struct.wireless_dev*)** %stop_p2p_device, align 8, !tbaa !69
  %wiphy1 = getelementptr inbounds %struct.cfg80211_registered_device, %struct.cfg80211_registered_device* %rdev, i32 0, i32 42
  call void %1(%struct.wiphy* %wiphy1, %struct.wireless_dev* %wdev)
  %wiphy2 = getelementptr inbounds %struct.cfg80211_registered_device, %struct.cfg80211_registered_device* %rdev, i32 0, i32 42
  call void @trace_rdev_return_void(%struct.wiphy* %wiphy2)
  ret void
}

declare void @___cfg80211_scan_done(%struct.cfg80211_registered_device*, i1 zeroext) #2

; Function Attrs: nounwind uwtable
define void @cfg80211_stop_nan(%struct.cfg80211_registered_device* %rdev, %struct.wireless_dev* %wdev) #0 {
entry:
  %call = call i32 @rtnl_is_locked()
  %tobool = icmp ne i32 %call, 0
  %lnot = xor i1 %tobool, true
  %lnot1 = xor i1 %lnot, true
  %lnot2 = xor i1 %lnot1, true
  %lnot.ext = zext i1 %lnot2 to i32
  %conv = sext i32 %lnot.ext to i64
  %expval = call i64 @llvm.expect.i64(i64 %conv, i64 0)
  %tobool3 = icmp ne i64 %expval, 0
  br i1 %tobool3, label %if.then, label %do.end

if.then:                                          ; preds = %entry
  %call4 = call i32 (i8*, ...) @printk(i8* getelementptr inbounds ([37 x i8], [37 x i8]* @.str, i32 0, i32 0), i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.1, i32 0, i32 0), i32 231)
  call void @dump_stack()
  br label %do.end

do.end:                                           ; preds = %entry, %if.then
  %iftype = getelementptr inbounds %struct.wireless_dev, %struct.wireless_dev* %wdev, i32 0, i32 1
  %0 = load i32, i32* %iftype, align 8, !tbaa !58
  %cmp = icmp ne i32 %0, 12
  %lnot6 = xor i1 %cmp, true
  %lnot8 = xor i1 %lnot6, true
  %lnot.ext9 = zext i1 %lnot8 to i32
  %tobool10 = icmp ne i32 %lnot.ext9, 0
  %lnot11 = xor i1 %tobool10, true
  %lnot13 = xor i1 %lnot11, true
  %lnot.ext14 = zext i1 %lnot13 to i32
  %conv15 = sext i32 %lnot.ext14 to i64
  %expval16 = call i64 @llvm.expect.i64(i64 %conv15, i64 0)
  %tobool17 = icmp ne i64 %expval16, 0
  br i1 %tobool17, label %if.then18, label %if.end19

if.then18:                                        ; preds = %do.end
  call void @warn_slowpath_null(i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.1, i32 0, i32 0), i32 233)
  br label %if.end19

if.end19:                                         ; preds = %if.then18, %do.end
  %tobool20 = icmp ne i32 %lnot.ext9, 0
  %lnot21 = xor i1 %tobool20, true
  %lnot23 = xor i1 %lnot21, true
  %lnot.ext24 = zext i1 %lnot23 to i32
  %conv25 = sext i32 %lnot.ext24 to i64
  %expval26 = call i64 @llvm.expect.i64(i64 %conv25, i64 0)
  %tobool27 = icmp ne i64 %expval26, 0
  br i1 %tobool27, label %return, label %if.end29

if.end29:                                         ; preds = %if.end19
  %call30 = call zeroext i1 @wdev_running(%struct.wireless_dev* %wdev)
  br i1 %call30, label %if.end32, label %return

if.end32:                                         ; preds = %if.end29
  call void @rdev_stop_nan(%struct.cfg80211_registered_device* %rdev, %struct.wireless_dev* %wdev)
  %is_running = getelementptr inbounds %struct.wireless_dev, %struct.wireless_dev* %wdev, i32 0, i32 9
  store i8 0, i8* %is_running, align 1, !tbaa !59
  %opencount = getelementptr inbounds %struct.cfg80211_registered_device, %struct.cfg80211_registered_device* %rdev, i32 0, i32 11
  %1 = load i32, i32* %opencount, align 8, !tbaa !60
  %dec = add nsw i32 %1, -1
  store i32 %dec, i32* %opencount, align 8, !tbaa !60
  br label %return

return:                                           ; preds = %if.end29, %if.end19, %if.end32
  ret void
}

; Function Attrs: inlinehint nounwind uwtable
define internal void @rdev_stop_nan(%struct.cfg80211_registered_device* %rdev, %struct.wireless_dev* %wdev) #4 {
entry:
  %wiphy = getelementptr inbounds %struct.cfg80211_registered_device, %struct.cfg80211_registered_device* %rdev, i32 0, i32 42
  call void @trace_rdev_stop_nan(%struct.wiphy* %wiphy, %struct.wireless_dev* %wdev)
  %ops = getelementptr inbounds %struct.cfg80211_registered_device, %struct.cfg80211_registered_device* %rdev, i32 0, i32 0
  %0 = load %struct.cfg80211_ops*, %struct.cfg80211_ops** %ops, align 32, !tbaa !68
  %stop_nan = getelementptr inbounds %struct.cfg80211_ops, %struct.cfg80211_ops* %0, i32 0, i32 92
  %1 = load void (%struct.wiphy*, %struct.wireless_dev*)*, void (%struct.wiphy*, %struct.wireless_dev*)** %stop_nan, align 8, !tbaa !71
  %wiphy1 = getelementptr inbounds %struct.cfg80211_registered_device, %struct.cfg80211_registered_device* %rdev, i32 0, i32 42
  call void %1(%struct.wiphy* %wiphy1, %struct.wireless_dev* %wdev)
  %wiphy2 = getelementptr inbounds %struct.cfg80211_registered_device, %struct.cfg80211_registered_device* %rdev, i32 0, i32 42
  call void @trace_rdev_return_void(%struct.wiphy* %wiphy2)
  ret void
}

; Function Attrs: nounwind uwtable
define void @cfg80211_shutdown_all_interfaces(%struct.wiphy* %wiphy) #0 {
entry:
  %call = call %struct.cfg80211_registered_device* @wiphy_to_rdev(%struct.wiphy* %wiphy)
  %call1 = call i32 @rtnl_is_locked()
  %tobool = icmp ne i32 %call1, 0
  %lnot = xor i1 %tobool, true
  %lnot2 = xor i1 %lnot, true
  %lnot3 = xor i1 %lnot2, true
  %lnot.ext = zext i1 %lnot3 to i32
  %conv = sext i32 %lnot.ext to i64
  %expval = call i64 @llvm.expect.i64(i64 %conv, i64 0)
  %tobool4 = icmp ne i64 %expval, 0
  br i1 %tobool4, label %if.then, label %do.end

if.then:                                          ; preds = %entry
  %call5 = call i32 (i8*, ...) @printk(i8* getelementptr inbounds ([37 x i8], [37 x i8]* @.str, i32 0, i32 0), i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.1, i32 0, i32 0), i32 250)
  call void @dump_stack()
  br label %do.end

do.end:                                           ; preds = %if.then, %entry
  %wiphy6 = getelementptr inbounds %struct.cfg80211_registered_device, %struct.cfg80211_registered_device* %call, i32 0, i32 42
  %wdev_list = getelementptr inbounds %struct.wiphy, %struct.wiphy* %wiphy6, i32 0, i32 55
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %do.end
  %list17.sink = phi %struct.list_head* [ %list17, %for.inc ], [ %wdev_list, %do.end ]
  %next18 = getelementptr inbounds %struct.list_head, %struct.list_head* %list17.sink, i32 0, i32 0
  %0 = load %struct.list_head*, %struct.list_head** %next18, align 8, !tbaa !2
  %1 = bitcast %struct.list_head* %0 to i8*
  %add.ptr20 = getelementptr inbounds i8, i8* %1, i64 -16
  %2 = bitcast i8* %add.ptr20 to %struct.wireless_dev*
  %list = getelementptr inbounds %struct.wireless_dev, %struct.wireless_dev* %2, i32 0, i32 2
  %wiphy7 = getelementptr inbounds %struct.cfg80211_registered_device, %struct.cfg80211_registered_device* %call, i32 0, i32 42
  %wdev_list8 = getelementptr inbounds %struct.wiphy, %struct.wiphy* %wiphy7, i32 0, i32 55
  %cmp = icmp ne %struct.list_head* %list, %wdev_list8
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %netdev = getelementptr inbounds %struct.wireless_dev, %struct.wireless_dev* %2, i32 0, i32 3
  %3 = load %struct.net_device*, %struct.net_device** %netdev, align 8, !tbaa !48
  %tobool10 = icmp ne %struct.net_device* %3, null
  br i1 %tobool10, label %if.then11, label %if.end14

if.then11:                                        ; preds = %for.body
  %netdev12 = getelementptr inbounds %struct.wireless_dev, %struct.wireless_dev* %2, i32 0, i32 3
  %4 = load %struct.net_device*, %struct.net_device** %netdev12, align 8, !tbaa !48
  %call13 = call i32 @dev_close(%struct.net_device* %4)
  br label %for.inc

if.end14:                                         ; preds = %for.body
  %iftype = getelementptr inbounds %struct.wireless_dev, %struct.wireless_dev* %2, i32 0, i32 1
  %5 = load i32, i32* %iftype, align 8, !tbaa !58
  br label %NodeBlock

NodeBlock:                                        ; preds = %if.end14
  %Pivot = icmp slt i32 %5, 12
  br i1 %Pivot, label %LeafBlock, label %LeafBlock2

LeafBlock2:                                       ; preds = %NodeBlock
  %SwitchLeaf3 = icmp eq i32 %5, 12
  br i1 %SwitchLeaf3, label %sw.bb15, label %NewDefault

LeafBlock:                                        ; preds = %NodeBlock
  %SwitchLeaf = icmp eq i32 %5, 10
  br i1 %SwitchLeaf, label %sw.bb, label %NewDefault

sw.bb:                                            ; preds = %LeafBlock
  call void @cfg80211_stop_p2p_device(%struct.cfg80211_registered_device* %call, %struct.wireless_dev* %2)
  br label %for.inc

sw.bb15:                                          ; preds = %LeafBlock2
  call void @cfg80211_stop_nan(%struct.cfg80211_registered_device* %call, %struct.wireless_dev* %2)
  br label %for.inc

NewDefault:                                       ; preds = %LeafBlock2, %LeafBlock
  br label %for.inc

for.inc:                                          ; preds = %NewDefault, %sw.bb, %sw.bb15, %if.then11
  %list17 = getelementptr inbounds %struct.wireless_dev, %struct.wireless_dev* %2, i32 0, i32 2
  br label %for.cond

for.end:                                          ; preds = %for.cond
  ret void
}

declare i32 @dev_close(%struct.net_device*) #2

; Function Attrs: nounwind uwtable
define void @cfg80211_destroy_ifaces(%struct.cfg80211_registered_device* %rdev) #0 {
entry:
  %__u = alloca %union.anon.80, align 8
  %call = call i32 @rtnl_is_locked()
  %tobool = icmp ne i32 %call, 0
  %lnot = xor i1 %tobool, true
  %lnot1 = xor i1 %lnot, true
  %lnot2 = xor i1 %lnot1, true
  %lnot.ext = zext i1 %lnot2 to i32
  %conv = sext i32 %lnot.ext to i64
  %expval = call i64 @llvm.expect.i64(i64 %conv, i64 0)
  %tobool3 = icmp ne i64 %expval, 0
  br i1 %tobool3, label %if.then, label %do.end

if.then:                                          ; preds = %entry
  %call4 = call i32 (i8*, ...) @printk(i8* getelementptr inbounds ([37 x i8], [37 x i8]* @.str, i32 0, i32 0), i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.1, i32 0, i32 0), i32 310)
  call void @dump_stack()
  br label %do.end

do.end:                                           ; preds = %if.then, %entry
  %destroy_list_lock = getelementptr inbounds %struct.cfg80211_registered_device, %struct.cfg80211_registered_device* %rdev, i32 0, i32 37
  call void @spin_lock_irq(%struct.spinlock* %destroy_list_lock)
  br label %while.cond

while.cond:                                       ; preds = %for.end, %do.end
  %destroy_list = getelementptr inbounds %struct.cfg80211_registered_device, %struct.cfg80211_registered_device* %rdev, i32 0, i32 38
  %0 = bitcast %union.anon.80* %__u to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %0) #6
  %next = getelementptr inbounds %struct.list_head, %struct.list_head* %destroy_list, i32 0, i32 0
  %1 = bitcast %struct.list_head** %next to i8*
  %__c = bitcast %union.anon.80* %__u to [1 x i8]*
  %arraydecay = getelementptr inbounds [1 x i8], [1 x i8]* %__c, i32 0, i32 0
  call void @__read_once_size(i8* %1, i8* %arraydecay, i32 8)
  %__val = bitcast %union.anon.80* %__u to %struct.list_head**
  %2 = load %struct.list_head*, %struct.list_head** %__val, align 8, !tbaa !72
  %3 = bitcast %union.anon.80* %__u to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %3) #6
  %cmp = icmp ne %struct.list_head* %2, %destroy_list
  %4 = bitcast %struct.list_head* %2 to i8*
  %add.ptr = getelementptr inbounds i8, i8* %4, i64 0
  %5 = bitcast i8* %add.ptr to %struct.cfg80211_iface_destroy*
  %cond = select i1 %cmp, %struct.cfg80211_iface_destroy* %5, %struct.cfg80211_iface_destroy* null
  %tobool8 = icmp ne %struct.cfg80211_iface_destroy* %cond, null
  br i1 %tobool8, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %nlportid10 = getelementptr inbounds %struct.cfg80211_iface_destroy, %struct.cfg80211_iface_destroy* %cond, i32 0, i32 1
  %6 = load i32, i32* %nlportid10, align 8, !tbaa !73
  %list = getelementptr inbounds %struct.cfg80211_iface_destroy, %struct.cfg80211_iface_destroy* %cond, i32 0, i32 0
  call void @list_del(%struct.list_head* %list)
  %7 = bitcast %struct.cfg80211_iface_destroy* %cond to i8*
  call void @kfree(i8* %7)
  %destroy_list_lock11 = getelementptr inbounds %struct.cfg80211_registered_device, %struct.cfg80211_registered_device* %rdev, i32 0, i32 37
  call void @spin_unlock_irq(%struct.spinlock* %destroy_list_lock11)
  %wiphy = getelementptr inbounds %struct.cfg80211_registered_device, %struct.cfg80211_registered_device* %rdev, i32 0, i32 42
  %wdev_list = getelementptr inbounds %struct.wiphy, %struct.wiphy* %wiphy, i32 0, i32 55
  %next13 = getelementptr inbounds %struct.list_head, %struct.list_head* %wdev_list, i32 0, i32 0
  %8 = load %struct.list_head*, %struct.list_head** %next13, align 8, !tbaa !75
  %9 = bitcast %struct.list_head* %8 to i8*
  %add.ptr15 = getelementptr inbounds i8, i8* %9, i64 -16
  %10 = bitcast i8* %add.ptr15 to %struct.wireless_dev*
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %while.body
  %.sink = phi %struct.wireless_dev* [ %13, %for.inc ], [ %10, %while.body ]
  %wdev.0 = phi %struct.wireless_dev* [ %10, %while.body ], [ %13, %for.inc ]
  %list32 = getelementptr inbounds %struct.wireless_dev, %struct.wireless_dev* %.sink, i32 0, i32 2
  %next33 = getelementptr inbounds %struct.list_head, %struct.list_head* %list32, i32 0, i32 0
  %11 = load %struct.list_head*, %struct.list_head** %next33, align 8, !tbaa !76
  %12 = bitcast %struct.list_head* %11 to i8*
  %add.ptr35 = getelementptr inbounds i8, i8* %12, i64 -16
  %13 = bitcast i8* %add.ptr35 to %struct.wireless_dev*
  %list21 = getelementptr inbounds %struct.wireless_dev, %struct.wireless_dev* %wdev.0, i32 0, i32 2
  %wiphy22 = getelementptr inbounds %struct.cfg80211_registered_device, %struct.cfg80211_registered_device* %rdev, i32 0, i32 42
  %wdev_list23 = getelementptr inbounds %struct.wiphy, %struct.wiphy* %wiphy22, i32 0, i32 55
  %cmp24 = icmp ne %struct.list_head* %list21, %wdev_list23
  br i1 %cmp24, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %owner_nlportid = getelementptr inbounds %struct.wireless_dev, %struct.wireless_dev* %wdev.0, i32 0, i32 35
  %14 = load i32, i32* %owner_nlportid, align 4, !tbaa !77
  %cmp26 = icmp eq i32 %6, %14
  br i1 %cmp26, label %if.then28, label %for.inc

if.then28:                                        ; preds = %for.body
  %call29 = call i32 @rdev_del_virtual_intf(%struct.cfg80211_registered_device* %rdev, %struct.wireless_dev* %wdev.0)
  br label %for.inc

for.inc:                                          ; preds = %for.body, %if.then28
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %destroy_list_lock36 = getelementptr inbounds %struct.cfg80211_registered_device, %struct.cfg80211_registered_device* %rdev, i32 0, i32 37
  call void @spin_lock_irq(%struct.spinlock* %destroy_list_lock36)
  br label %while.cond

while.end:                                        ; preds = %while.cond
  %destroy_list_lock37 = getelementptr inbounds %struct.cfg80211_registered_device, %struct.cfg80211_registered_device* %rdev, i32 0, i32 37
  call void @spin_unlock_irq(%struct.spinlock* %destroy_list_lock37)
  ret void
}

; Function Attrs: alwaysinline nounwind uwtable
define internal void @spin_lock_irq(%struct.spinlock* %lock) #5 {
entry:
  %0 = getelementptr inbounds %struct.spinlock, %struct.spinlock* %lock, i32 0, i32 0
  %rlock = bitcast %union.anon.1* %0 to %struct.raw_spinlock*
  call void @_raw_spin_lock_irq(%struct.raw_spinlock* %rlock)
  ret void
}

; Function Attrs: alwaysinline nounwind uwtable
define internal void @__read_once_size(i8* %p, i8* %res, i32 %size) #5 {
entry:
  br label %NodeBlock9

NodeBlock9:                                       ; preds = %entry
  %Pivot10 = icmp slt i32 %size, 4
  br i1 %Pivot10, label %NodeBlock, label %NodeBlock7

NodeBlock7:                                       ; preds = %NodeBlock9
  %Pivot8 = icmp slt i32 %size, 8
  br i1 %Pivot8, label %LeafBlock3, label %LeafBlock5

LeafBlock5:                                       ; preds = %NodeBlock7
  %SwitchLeaf6 = icmp eq i32 %size, 8
  br i1 %SwitchLeaf6, label %sw.bb3, label %NewDefault

LeafBlock3:                                       ; preds = %NodeBlock7
  %SwitchLeaf4 = icmp eq i32 %size, 4
  br i1 %SwitchLeaf4, label %sw.bb2, label %NewDefault

NodeBlock:                                        ; preds = %NodeBlock9
  %Pivot = icmp slt i32 %size, 2
  br i1 %Pivot, label %LeafBlock, label %LeafBlock1

LeafBlock1:                                       ; preds = %NodeBlock
  %SwitchLeaf2 = icmp eq i32 %size, 2
  br i1 %SwitchLeaf2, label %sw.bb1, label %NewDefault

LeafBlock:                                        ; preds = %NodeBlock
  %SwitchLeaf = icmp eq i32 %size, 1
  br i1 %SwitchLeaf, label %sw.bb, label %NewDefault

sw.bb:                                            ; preds = %LeafBlock
  %0 = load volatile i8, i8* %p, align 1, !tbaa !72
  store i8 %0, i8* %res, align 1, !tbaa !72
  br label %sw.epilog

sw.bb1:                                           ; preds = %LeafBlock1
  %1 = bitcast i8* %p to i16*
  %2 = load volatile i16, i16* %1, align 2, !tbaa !78
  %3 = bitcast i8* %res to i16*
  store i16 %2, i16* %3, align 2, !tbaa !78
  br label %sw.epilog

sw.bb2:                                           ; preds = %LeafBlock3
  %4 = bitcast i8* %p to i32*
  %5 = load volatile i32, i32* %4, align 4, !tbaa !46
  %6 = bitcast i8* %res to i32*
  store i32 %5, i32* %6, align 4, !tbaa !46
  br label %sw.epilog

sw.bb3:                                           ; preds = %LeafBlock5
  %7 = bitcast i8* %p to i64*
  %8 = load volatile i64, i64* %7, align 8, !tbaa !79
  %9 = bitcast i8* %res to i64*
  store i64 %8, i64* %9, align 8, !tbaa !79
  br label %sw.epilog

NewDefault:                                       ; preds = %LeafBlock5, %LeafBlock3, %LeafBlock1, %LeafBlock
  br label %sw.default

sw.default:                                       ; preds = %NewDefault
  call void asm sideeffect "", "~{memory},~{dirflag},~{fpsr},~{flags}"() #6, !srcloc !80
  %conv = sext i32 %size to i64
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %res, i8* %p, i64 %conv, i32 1, i1 false)
  call void asm sideeffect "", "~{memory},~{dirflag},~{fpsr},~{flags}"() #6, !srcloc !81
  br label %sw.epilog

sw.epilog:                                        ; preds = %sw.default, %sw.bb3, %sw.bb2, %sw.bb1, %sw.bb
  ret void
}

; Function Attrs: inlinehint nounwind uwtable
define internal void @list_del(%struct.list_head* %entry1) #4 {
entry:
  call void @__list_del_entry(%struct.list_head* %entry1)
  %next = getelementptr inbounds %struct.list_head, %struct.list_head* %entry1, i32 0, i32 0
  store %struct.list_head* bitcast (i8* getelementptr (i8, i8* inttoptr (i64 256 to i8*), i64 -2401263026318606336) to %struct.list_head*), %struct.list_head** %next, align 8, !tbaa !75
  %prev = getelementptr inbounds %struct.list_head, %struct.list_head* %entry1, i32 0, i32 1
  store %struct.list_head* bitcast (i8* getelementptr (i8, i8* inttoptr (i64 512 to i8*), i64 -2401263026318606336) to %struct.list_head*), %struct.list_head** %prev, align 8, !tbaa !82
  ret void
}

declare void @kfree(i8*) #2

; Function Attrs: alwaysinline nounwind uwtable
define internal void @spin_unlock_irq(%struct.spinlock* %lock) #5 {
entry:
  %0 = getelementptr inbounds %struct.spinlock, %struct.spinlock* %lock, i32 0, i32 0
  %rlock = bitcast %union.anon.1* %0 to %struct.raw_spinlock*
  call void @__raw_spin_unlock_irq(%struct.raw_spinlock* %rlock)
  ret void
}

; Function Attrs: inlinehint nounwind uwtable
define internal i32 @rdev_del_virtual_intf(%struct.cfg80211_registered_device* %rdev, %struct.wireless_dev* %wdev) #4 {
entry:
  %wiphy = getelementptr inbounds %struct.cfg80211_registered_device, %struct.cfg80211_registered_device* %rdev, i32 0, i32 42
  call void @trace_rdev_del_virtual_intf(%struct.wiphy* %wiphy, %struct.wireless_dev* %wdev)
  %ops = getelementptr inbounds %struct.cfg80211_registered_device, %struct.cfg80211_registered_device* %rdev, i32 0, i32 0
  %0 = load %struct.cfg80211_ops*, %struct.cfg80211_ops** %ops, align 32, !tbaa !68
  %del_virtual_intf = getelementptr inbounds %struct.cfg80211_ops, %struct.cfg80211_ops* %0, i32 0, i32 4
  %1 = load i32 (%struct.wiphy*, %struct.wireless_dev*)*, i32 (%struct.wiphy*, %struct.wireless_dev*)** %del_virtual_intf, align 8, !tbaa !83
  %wiphy1 = getelementptr inbounds %struct.cfg80211_registered_device, %struct.cfg80211_registered_device* %rdev, i32 0, i32 42
  %call = call i32 %1(%struct.wiphy* %wiphy1, %struct.wireless_dev* %wdev)
  %wiphy2 = getelementptr inbounds %struct.cfg80211_registered_device, %struct.cfg80211_registered_device* %rdev, i32 0, i32 42
  call void @trace_rdev_return_int(%struct.wiphy* %wiphy2, i32 %call)
  ret i32 %call
}

; Function Attrs: nounwind uwtable
define %struct.wiphy* @wiphy_new_nm(%struct.cfg80211_ops* %ops, i32 %sizeof_priv, i8* %requested_name) #0 {
entry:
  %.compoundliteral = alloca %struct.raw_spinlock, align 4
  %.compoundliteral506 = alloca %struct.raw_spinlock, align 4
  %.compoundliteral516 = alloca %struct.atomic64_t, align 8
  %.compoundliteral526 = alloca %struct.atomic64_t, align 8
  %.compoundliteral539 = alloca %struct.raw_spinlock, align 4
  %.compoundliteral550 = alloca %struct.atomic64_t, align 8
  %.compoundliteral563 = alloca %struct.atomic64_t, align 8
  %.compoundliteral598 = alloca %struct.raw_spinlock, align 4
  %.compoundliteral609 = alloca %struct.atomic64_t, align 8
  %.compoundliteral620 = alloca %struct.atomic64_t, align 8
  %.compoundliteral644 = alloca %struct.atomic64_t, align 8
  %.compoundliteral655 = alloca %struct.atomic64_t, align 8
  %.compoundliteral666 = alloca %struct.atomic64_t, align 8
  %add_key = getelementptr inbounds %struct.cfg80211_ops, %struct.cfg80211_ops* %ops, i32 0, i32 6
  %0 = load i32 (%struct.wiphy*, %struct.net_device*, i8, i1, i8*, %struct.key_params*)*, i32 (%struct.wiphy*, %struct.net_device*, i8, i1, i8*, %struct.key_params*)** %add_key, align 8, !tbaa !84
  %tobool = icmp ne i32 (%struct.wiphy*, %struct.net_device*, i8, i1, i8*, %struct.key_params*)* %0, null
  br i1 %tobool, label %land.rhs, label %land.end

land.rhs:                                         ; preds = %entry
  %del_key = getelementptr inbounds %struct.cfg80211_ops, %struct.cfg80211_ops* %ops, i32 0, i32 8
  %1 = load i32 (%struct.wiphy*, %struct.net_device*, i8, i1, i8*)*, i32 (%struct.wiphy*, %struct.net_device*, i8, i1, i8*)** %del_key, align 8, !tbaa !85
  %tobool1 = icmp ne i32 (%struct.wiphy*, %struct.net_device*, i8, i1, i8*)* %1, null
  br i1 %tobool1, label %lor.rhs, label %land.end

lor.rhs:                                          ; preds = %land.rhs
  %set_default_key = getelementptr inbounds %struct.cfg80211_ops, %struct.cfg80211_ops* %ops, i32 0, i32 9
  %2 = load i32 (%struct.wiphy*, %struct.net_device*, i8, i1, i1)*, i32 (%struct.wiphy*, %struct.net_device*, i8, i1, i1)** %set_default_key, align 8, !tbaa !86
  %tobool2 = icmp ne i32 (%struct.wiphy*, %struct.net_device*, i8, i1, i1)* %2, null
  %lnot = xor i1 %tobool2, true
  br label %land.end

land.end:                                         ; preds = %land.rhs, %lor.rhs, %entry
  %3 = phi i1 [ false, %entry ], [ true, %land.rhs ], [ %lnot, %lor.rhs ]
  %lnot3 = xor i1 %3, true
  %lnot4 = xor i1 %lnot3, true
  %lnot.ext = zext i1 %lnot4 to i32
  %tobool5 = icmp ne i32 %lnot.ext, 0
  %lnot6 = xor i1 %tobool5, true
  %lnot8 = xor i1 %lnot6, true
  %lnot.ext9 = zext i1 %lnot8 to i32
  %conv = sext i32 %lnot.ext9 to i64
  %expval = call i64 @llvm.expect.i64(i64 %conv, i64 0)
  %tobool10 = icmp ne i64 %expval, 0
  br i1 %tobool10, label %if.then, label %if.end

if.then:                                          ; preds = %land.end
  call void @warn_slowpath_null(i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.1, i32 0, i32 0), i32 370)
  br label %if.end

if.end:                                           ; preds = %if.then, %land.end
  %tobool11 = icmp ne i32 %lnot.ext, 0
  %lnot12 = xor i1 %tobool11, true
  %lnot14 = xor i1 %lnot12, true
  %lnot.ext15 = zext i1 %lnot14 to i32
  %conv16 = sext i32 %lnot.ext15 to i64
  %expval17 = call i64 @llvm.expect.i64(i64 %conv16, i64 0)
  %auth = getelementptr inbounds %struct.cfg80211_ops, %struct.cfg80211_ops* %ops, i32 0, i32 38
  %4 = load i32 (%struct.wiphy*, %struct.net_device*, %struct.cfg80211_auth_request*)*, i32 (%struct.wiphy*, %struct.net_device*, %struct.cfg80211_auth_request*)** %auth, align 8, !tbaa !87
  %tobool19 = icmp ne i32 (%struct.wiphy*, %struct.net_device*, %struct.cfg80211_auth_request*)* %4, null
  br i1 %tobool19, label %land.rhs20, label %land.end28

land.rhs20:                                       ; preds = %if.end
  %assoc = getelementptr inbounds %struct.cfg80211_ops, %struct.cfg80211_ops* %ops, i32 0, i32 39
  %5 = load i32 (%struct.wiphy*, %struct.net_device*, %struct.cfg80211_assoc_request*)*, i32 (%struct.wiphy*, %struct.net_device*, %struct.cfg80211_assoc_request*)** %assoc, align 8, !tbaa !88
  %tobool21 = icmp ne i32 (%struct.wiphy*, %struct.net_device*, %struct.cfg80211_assoc_request*)* %5, null
  br i1 %tobool21, label %lor.lhs.false, label %land.end28

lor.lhs.false:                                    ; preds = %land.rhs20
  %deauth = getelementptr inbounds %struct.cfg80211_ops, %struct.cfg80211_ops* %ops, i32 0, i32 40
  %6 = load i32 (%struct.wiphy*, %struct.net_device*, %struct.cfg80211_deauth_request*)*, i32 (%struct.wiphy*, %struct.net_device*, %struct.cfg80211_deauth_request*)** %deauth, align 8, !tbaa !89
  %tobool22 = icmp ne i32 (%struct.wiphy*, %struct.net_device*, %struct.cfg80211_deauth_request*)* %6, null
  br i1 %tobool22, label %lor.rhs23, label %land.end28

lor.rhs23:                                        ; preds = %lor.lhs.false
  %disassoc = getelementptr inbounds %struct.cfg80211_ops, %struct.cfg80211_ops* %ops, i32 0, i32 41
  %7 = load i32 (%struct.wiphy*, %struct.net_device*, %struct.cfg80211_disassoc_request*)*, i32 (%struct.wiphy*, %struct.net_device*, %struct.cfg80211_disassoc_request*)** %disassoc, align 8, !tbaa !90
  %tobool24 = icmp ne i32 (%struct.wiphy*, %struct.net_device*, %struct.cfg80211_disassoc_request*)* %7, null
  %lnot25 = xor i1 %tobool24, true
  br label %land.end28

land.end28:                                       ; preds = %land.rhs20, %lor.lhs.false, %lor.rhs23, %if.end
  %8 = phi i1 [ false, %if.end ], [ true, %lor.lhs.false ], [ true, %land.rhs20 ], [ %lnot25, %lor.rhs23 ]
  %lnot29 = xor i1 %8, true
  %lnot31 = xor i1 %lnot29, true
  %lnot.ext32 = zext i1 %lnot31 to i32
  %tobool33 = icmp ne i32 %lnot.ext32, 0
  %lnot34 = xor i1 %tobool33, true
  %lnot36 = xor i1 %lnot34, true
  %lnot.ext37 = zext i1 %lnot36 to i32
  %conv38 = sext i32 %lnot.ext37 to i64
  %expval39 = call i64 @llvm.expect.i64(i64 %conv38, i64 0)
  %tobool40 = icmp ne i64 %expval39, 0
  br i1 %tobool40, label %if.then41, label %if.end42

if.then41:                                        ; preds = %land.end28
  call void @warn_slowpath_null(i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.1, i32 0, i32 0), i32 371)
  br label %if.end42

if.end42:                                         ; preds = %if.then41, %land.end28
  %tobool44 = icmp ne i32 %lnot.ext32, 0
  %lnot45 = xor i1 %tobool44, true
  %lnot47 = xor i1 %lnot45, true
  %lnot.ext48 = zext i1 %lnot47 to i32
  %conv49 = sext i32 %lnot.ext48 to i64
  %expval50 = call i64 @llvm.expect.i64(i64 %conv49, i64 0)
  %connect = getelementptr inbounds %struct.cfg80211_ops, %struct.cfg80211_ops* %ops, i32 0, i32 42
  %9 = load i32 (%struct.wiphy*, %struct.net_device*, %struct.cfg80211_connect_params*)*, i32 (%struct.wiphy*, %struct.net_device*, %struct.cfg80211_connect_params*)** %connect, align 8, !tbaa !91
  %tobool52 = icmp ne i32 (%struct.wiphy*, %struct.net_device*, %struct.cfg80211_connect_params*)* %9, null
  br i1 %tobool52, label %land.rhs53, label %land.end57

land.rhs53:                                       ; preds = %if.end42
  %disconnect = getelementptr inbounds %struct.cfg80211_ops, %struct.cfg80211_ops* %ops, i32 0, i32 44
  %10 = load i32 (%struct.wiphy*, %struct.net_device*, i16)*, i32 (%struct.wiphy*, %struct.net_device*, i16)** %disconnect, align 8, !tbaa !92
  %tobool54 = icmp ne i32 (%struct.wiphy*, %struct.net_device*, i16)* %10, null
  %lnot55 = xor i1 %tobool54, true
  br label %land.end57

land.end57:                                       ; preds = %land.rhs53, %if.end42
  %11 = phi i1 [ false, %if.end42 ], [ %lnot55, %land.rhs53 ]
  %lnot58 = xor i1 %11, true
  %lnot60 = xor i1 %lnot58, true
  %lnot.ext61 = zext i1 %lnot60 to i32
  %tobool62 = icmp ne i32 %lnot.ext61, 0
  %lnot63 = xor i1 %tobool62, true
  %lnot65 = xor i1 %lnot63, true
  %lnot.ext66 = zext i1 %lnot65 to i32
  %conv67 = sext i32 %lnot.ext66 to i64
  %expval68 = call i64 @llvm.expect.i64(i64 %conv67, i64 0)
  %tobool69 = icmp ne i64 %expval68, 0
  br i1 %tobool69, label %if.then70, label %if.end71

if.then70:                                        ; preds = %land.end57
  call void @warn_slowpath_null(i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.1, i32 0, i32 0), i32 372)
  br label %if.end71

if.end71:                                         ; preds = %if.then70, %land.end57
  %tobool73 = icmp ne i32 %lnot.ext61, 0
  %lnot74 = xor i1 %tobool73, true
  %lnot76 = xor i1 %lnot74, true
  %lnot.ext77 = zext i1 %lnot76 to i32
  %conv78 = sext i32 %lnot.ext77 to i64
  %expval79 = call i64 @llvm.expect.i64(i64 %conv78, i64 0)
  %join_ibss = getelementptr inbounds %struct.cfg80211_ops, %struct.cfg80211_ops* %ops, i32 0, i32 45
  %12 = load i32 (%struct.wiphy*, %struct.net_device*, %struct.cfg80211_ibss_params*)*, i32 (%struct.wiphy*, %struct.net_device*, %struct.cfg80211_ibss_params*)** %join_ibss, align 8, !tbaa !93
  %tobool81 = icmp ne i32 (%struct.wiphy*, %struct.net_device*, %struct.cfg80211_ibss_params*)* %12, null
  br i1 %tobool81, label %land.rhs82, label %land.end86

land.rhs82:                                       ; preds = %if.end71
  %leave_ibss = getelementptr inbounds %struct.cfg80211_ops, %struct.cfg80211_ops* %ops, i32 0, i32 46
  %13 = load i32 (%struct.wiphy*, %struct.net_device*)*, i32 (%struct.wiphy*, %struct.net_device*)** %leave_ibss, align 8, !tbaa !94
  %tobool83 = icmp ne i32 (%struct.wiphy*, %struct.net_device*)* %13, null
  %lnot84 = xor i1 %tobool83, true
  br label %land.end86

land.end86:                                       ; preds = %land.rhs82, %if.end71
  %14 = phi i1 [ false, %if.end71 ], [ %lnot84, %land.rhs82 ]
  %lnot87 = xor i1 %14, true
  %lnot89 = xor i1 %lnot87, true
  %lnot.ext90 = zext i1 %lnot89 to i32
  %tobool91 = icmp ne i32 %lnot.ext90, 0
  %lnot92 = xor i1 %tobool91, true
  %lnot94 = xor i1 %lnot92, true
  %lnot.ext95 = zext i1 %lnot94 to i32
  %conv96 = sext i32 %lnot.ext95 to i64
  %expval97 = call i64 @llvm.expect.i64(i64 %conv96, i64 0)
  %tobool98 = icmp ne i64 %expval97, 0
  br i1 %tobool98, label %if.then99, label %if.end100

if.then99:                                        ; preds = %land.end86
  call void @warn_slowpath_null(i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.1, i32 0, i32 0), i32 373)
  br label %if.end100

if.end100:                                        ; preds = %if.then99, %land.end86
  %tobool102 = icmp ne i32 %lnot.ext90, 0
  %lnot103 = xor i1 %tobool102, true
  %lnot105 = xor i1 %lnot103, true
  %lnot.ext106 = zext i1 %lnot105 to i32
  %conv107 = sext i32 %lnot.ext106 to i64
  %expval108 = call i64 @llvm.expect.i64(i64 %conv107, i64 0)
  %add_virtual_intf = getelementptr inbounds %struct.cfg80211_ops, %struct.cfg80211_ops* %ops, i32 0, i32 3
  %15 = load %struct.wireless_dev* (%struct.wiphy*, i8*, i8, i32, i32*, %struct.vif_params*)*, %struct.wireless_dev* (%struct.wiphy*, i8*, i8, i32, i32*, %struct.vif_params*)** %add_virtual_intf, align 8, !tbaa !95
  %tobool110 = icmp ne %struct.wireless_dev* (%struct.wiphy*, i8*, i8, i32, i32*, %struct.vif_params*)* %15, null
  br i1 %tobool110, label %land.rhs111, label %land.end115

land.rhs111:                                      ; preds = %if.end100
  %del_virtual_intf = getelementptr inbounds %struct.cfg80211_ops, %struct.cfg80211_ops* %ops, i32 0, i32 4
  %16 = load i32 (%struct.wiphy*, %struct.wireless_dev*)*, i32 (%struct.wiphy*, %struct.wireless_dev*)** %del_virtual_intf, align 8, !tbaa !83
  %tobool112 = icmp ne i32 (%struct.wiphy*, %struct.wireless_dev*)* %16, null
  %lnot113 = xor i1 %tobool112, true
  br label %land.end115

land.end115:                                      ; preds = %land.rhs111, %if.end100
  %17 = phi i1 [ false, %if.end100 ], [ %lnot113, %land.rhs111 ]
  %lnot116 = xor i1 %17, true
  %lnot118 = xor i1 %lnot116, true
  %lnot.ext119 = zext i1 %lnot118 to i32
  %tobool120 = icmp ne i32 %lnot.ext119, 0
  %lnot121 = xor i1 %tobool120, true
  %lnot123 = xor i1 %lnot121, true
  %lnot.ext124 = zext i1 %lnot123 to i32
  %conv125 = sext i32 %lnot.ext124 to i64
  %expval126 = call i64 @llvm.expect.i64(i64 %conv125, i64 0)
  %tobool127 = icmp ne i64 %expval126, 0
  br i1 %tobool127, label %if.then128, label %if.end129

if.then128:                                       ; preds = %land.end115
  call void @warn_slowpath_null(i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.1, i32 0, i32 0), i32 374)
  br label %if.end129

if.end129:                                        ; preds = %if.then128, %land.end115
  %tobool131 = icmp ne i32 %lnot.ext119, 0
  %lnot132 = xor i1 %tobool131, true
  %lnot134 = xor i1 %lnot132, true
  %lnot.ext135 = zext i1 %lnot134 to i32
  %conv136 = sext i32 %lnot.ext135 to i64
  %expval137 = call i64 @llvm.expect.i64(i64 %conv136, i64 0)
  %add_station = getelementptr inbounds %struct.cfg80211_ops, %struct.cfg80211_ops* %ops, i32 0, i32 14
  %18 = load i32 (%struct.wiphy*, %struct.net_device*, i8*, %struct.station_parameters*)*, i32 (%struct.wiphy*, %struct.net_device*, i8*, %struct.station_parameters*)** %add_station, align 8, !tbaa !96
  %tobool139 = icmp ne i32 (%struct.wiphy*, %struct.net_device*, i8*, %struct.station_parameters*)* %18, null
  br i1 %tobool139, label %land.rhs140, label %land.end144

land.rhs140:                                      ; preds = %if.end129
  %del_station = getelementptr inbounds %struct.cfg80211_ops, %struct.cfg80211_ops* %ops, i32 0, i32 15
  %19 = load i32 (%struct.wiphy*, %struct.net_device*, %struct.station_del_parameters*)*, i32 (%struct.wiphy*, %struct.net_device*, %struct.station_del_parameters*)** %del_station, align 8, !tbaa !97
  %tobool141 = icmp ne i32 (%struct.wiphy*, %struct.net_device*, %struct.station_del_parameters*)* %19, null
  %lnot142 = xor i1 %tobool141, true
  br label %land.end144

land.end144:                                      ; preds = %land.rhs140, %if.end129
  %20 = phi i1 [ false, %if.end129 ], [ %lnot142, %land.rhs140 ]
  %lnot145 = xor i1 %20, true
  %lnot147 = xor i1 %lnot145, true
  %lnot.ext148 = zext i1 %lnot147 to i32
  %tobool149 = icmp ne i32 %lnot.ext148, 0
  %lnot150 = xor i1 %tobool149, true
  %lnot152 = xor i1 %lnot150, true
  %lnot.ext153 = zext i1 %lnot152 to i32
  %conv154 = sext i32 %lnot.ext153 to i64
  %expval155 = call i64 @llvm.expect.i64(i64 %conv154, i64 0)
  %tobool156 = icmp ne i64 %expval155, 0
  br i1 %tobool156, label %if.then157, label %if.end158

if.then157:                                       ; preds = %land.end144
  call void @warn_slowpath_null(i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.1, i32 0, i32 0), i32 375)
  br label %if.end158

if.end158:                                        ; preds = %if.then157, %land.end144
  %tobool160 = icmp ne i32 %lnot.ext148, 0
  %lnot161 = xor i1 %tobool160, true
  %lnot163 = xor i1 %lnot161, true
  %lnot.ext164 = zext i1 %lnot163 to i32
  %conv165 = sext i32 %lnot.ext164 to i64
  %expval166 = call i64 @llvm.expect.i64(i64 %conv165, i64 0)
  %add_mpath = getelementptr inbounds %struct.cfg80211_ops, %struct.cfg80211_ops* %ops, i32 0, i32 19
  %21 = load i32 (%struct.wiphy*, %struct.net_device*, i8*, i8*)*, i32 (%struct.wiphy*, %struct.net_device*, i8*, i8*)** %add_mpath, align 8, !tbaa !98
  %tobool168 = icmp ne i32 (%struct.wiphy*, %struct.net_device*, i8*, i8*)* %21, null
  br i1 %tobool168, label %land.rhs169, label %land.end173

land.rhs169:                                      ; preds = %if.end158
  %del_mpath = getelementptr inbounds %struct.cfg80211_ops, %struct.cfg80211_ops* %ops, i32 0, i32 20
  %22 = load i32 (%struct.wiphy*, %struct.net_device*, i8*)*, i32 (%struct.wiphy*, %struct.net_device*, i8*)** %del_mpath, align 8, !tbaa !99
  %tobool170 = icmp ne i32 (%struct.wiphy*, %struct.net_device*, i8*)* %22, null
  %lnot171 = xor i1 %tobool170, true
  br label %land.end173

land.end173:                                      ; preds = %land.rhs169, %if.end158
  %23 = phi i1 [ false, %if.end158 ], [ %lnot171, %land.rhs169 ]
  %lnot174 = xor i1 %23, true
  %lnot176 = xor i1 %lnot174, true
  %lnot.ext177 = zext i1 %lnot176 to i32
  %tobool178 = icmp ne i32 %lnot.ext177, 0
  %lnot179 = xor i1 %tobool178, true
  %lnot181 = xor i1 %lnot179, true
  %lnot.ext182 = zext i1 %lnot181 to i32
  %conv183 = sext i32 %lnot.ext182 to i64
  %expval184 = call i64 @llvm.expect.i64(i64 %conv183, i64 0)
  %tobool185 = icmp ne i64 %expval184, 0
  br i1 %tobool185, label %if.then186, label %if.end187

if.then186:                                       ; preds = %land.end173
  call void @warn_slowpath_null(i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.1, i32 0, i32 0), i32 376)
  br label %if.end187

if.end187:                                        ; preds = %if.then186, %land.end173
  %tobool189 = icmp ne i32 %lnot.ext177, 0
  %lnot190 = xor i1 %tobool189, true
  %lnot192 = xor i1 %lnot190, true
  %lnot.ext193 = zext i1 %lnot192 to i32
  %conv194 = sext i32 %lnot.ext193 to i64
  %expval195 = call i64 @llvm.expect.i64(i64 %conv194, i64 0)
  %join_mesh = getelementptr inbounds %struct.cfg80211_ops, %struct.cfg80211_ops* %ops, i32 0, i32 28
  %24 = load i32 (%struct.wiphy*, %struct.net_device*, %struct.mesh_config*, %struct.mesh_setup*)*, i32 (%struct.wiphy*, %struct.net_device*, %struct.mesh_config*, %struct.mesh_setup*)** %join_mesh, align 8, !tbaa !100
  %tobool197 = icmp ne i32 (%struct.wiphy*, %struct.net_device*, %struct.mesh_config*, %struct.mesh_setup*)* %24, null
  br i1 %tobool197, label %land.rhs198, label %land.end202

land.rhs198:                                      ; preds = %if.end187
  %leave_mesh = getelementptr inbounds %struct.cfg80211_ops, %struct.cfg80211_ops* %ops, i32 0, i32 29
  %25 = load i32 (%struct.wiphy*, %struct.net_device*)*, i32 (%struct.wiphy*, %struct.net_device*)** %leave_mesh, align 8, !tbaa !101
  %tobool199 = icmp ne i32 (%struct.wiphy*, %struct.net_device*)* %25, null
  %lnot200 = xor i1 %tobool199, true
  br label %land.end202

land.end202:                                      ; preds = %land.rhs198, %if.end187
  %26 = phi i1 [ false, %if.end187 ], [ %lnot200, %land.rhs198 ]
  %lnot203 = xor i1 %26, true
  %lnot205 = xor i1 %lnot203, true
  %lnot.ext206 = zext i1 %lnot205 to i32
  %tobool207 = icmp ne i32 %lnot.ext206, 0
  %lnot208 = xor i1 %tobool207, true
  %lnot210 = xor i1 %lnot208, true
  %lnot.ext211 = zext i1 %lnot210 to i32
  %conv212 = sext i32 %lnot.ext211 to i64
  %expval213 = call i64 @llvm.expect.i64(i64 %conv212, i64 0)
  %tobool214 = icmp ne i64 %expval213, 0
  br i1 %tobool214, label %if.then215, label %if.end216

if.then215:                                       ; preds = %land.end202
  call void @warn_slowpath_null(i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.1, i32 0, i32 0), i32 377)
  br label %if.end216

if.end216:                                        ; preds = %if.then215, %land.end202
  %tobool218 = icmp ne i32 %lnot.ext206, 0
  %lnot219 = xor i1 %tobool218, true
  %lnot221 = xor i1 %lnot219, true
  %lnot.ext222 = zext i1 %lnot221 to i32
  %conv223 = sext i32 %lnot.ext222 to i64
  %expval224 = call i64 @llvm.expect.i64(i64 %conv223, i64 0)
  %start_p2p_device = getelementptr inbounds %struct.cfg80211_ops, %struct.cfg80211_ops* %ops, i32 0, i32 76
  %27 = load i32 (%struct.wiphy*, %struct.wireless_dev*)*, i32 (%struct.wiphy*, %struct.wireless_dev*)** %start_p2p_device, align 8, !tbaa !102
  %tobool226 = icmp ne i32 (%struct.wiphy*, %struct.wireless_dev*)* %27, null
  br i1 %tobool226, label %land.rhs227, label %land.end231

land.rhs227:                                      ; preds = %if.end216
  %stop_p2p_device = getelementptr inbounds %struct.cfg80211_ops, %struct.cfg80211_ops* %ops, i32 0, i32 77
  %28 = load void (%struct.wiphy*, %struct.wireless_dev*)*, void (%struct.wiphy*, %struct.wireless_dev*)** %stop_p2p_device, align 8, !tbaa !69
  %tobool228 = icmp ne void (%struct.wiphy*, %struct.wireless_dev*)* %28, null
  %lnot229 = xor i1 %tobool228, true
  br label %land.end231

land.end231:                                      ; preds = %land.rhs227, %if.end216
  %29 = phi i1 [ false, %if.end216 ], [ %lnot229, %land.rhs227 ]
  %lnot232 = xor i1 %29, true
  %lnot234 = xor i1 %lnot232, true
  %lnot.ext235 = zext i1 %lnot234 to i32
  %tobool236 = icmp ne i32 %lnot.ext235, 0
  %lnot237 = xor i1 %tobool236, true
  %lnot239 = xor i1 %lnot237, true
  %lnot.ext240 = zext i1 %lnot239 to i32
  %conv241 = sext i32 %lnot.ext240 to i64
  %expval242 = call i64 @llvm.expect.i64(i64 %conv241, i64 0)
  %tobool243 = icmp ne i64 %expval242, 0
  br i1 %tobool243, label %if.then244, label %if.end245

if.then244:                                       ; preds = %land.end231
  call void @warn_slowpath_null(i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.1, i32 0, i32 0), i32 378)
  br label %if.end245

if.end245:                                        ; preds = %if.then244, %land.end231
  %tobool247 = icmp ne i32 %lnot.ext235, 0
  %lnot248 = xor i1 %tobool247, true
  %lnot250 = xor i1 %lnot248, true
  %lnot.ext251 = zext i1 %lnot250 to i32
  %conv252 = sext i32 %lnot.ext251 to i64
  %expval253 = call i64 @llvm.expect.i64(i64 %conv252, i64 0)
  %start_ap = getelementptr inbounds %struct.cfg80211_ops, %struct.cfg80211_ops* %ops, i32 0, i32 11
  %30 = load i32 (%struct.wiphy*, %struct.net_device*, %struct.cfg80211_ap_settings*)*, i32 (%struct.wiphy*, %struct.net_device*, %struct.cfg80211_ap_settings*)** %start_ap, align 8, !tbaa !103
  %tobool255 = icmp ne i32 (%struct.wiphy*, %struct.net_device*, %struct.cfg80211_ap_settings*)* %30, null
  br i1 %tobool255, label %land.rhs256, label %land.end260

land.rhs256:                                      ; preds = %if.end245
  %stop_ap = getelementptr inbounds %struct.cfg80211_ops, %struct.cfg80211_ops* %ops, i32 0, i32 13
  %31 = load i32 (%struct.wiphy*, %struct.net_device*)*, i32 (%struct.wiphy*, %struct.net_device*)** %stop_ap, align 8, !tbaa !104
  %tobool257 = icmp ne i32 (%struct.wiphy*, %struct.net_device*)* %31, null
  %lnot258 = xor i1 %tobool257, true
  br label %land.end260

land.end260:                                      ; preds = %land.rhs256, %if.end245
  %32 = phi i1 [ false, %if.end245 ], [ %lnot258, %land.rhs256 ]
  %lnot261 = xor i1 %32, true
  %lnot263 = xor i1 %lnot261, true
  %lnot.ext264 = zext i1 %lnot263 to i32
  %tobool265 = icmp ne i32 %lnot.ext264, 0
  %lnot266 = xor i1 %tobool265, true
  %lnot268 = xor i1 %lnot266, true
  %lnot.ext269 = zext i1 %lnot268 to i32
  %conv270 = sext i32 %lnot.ext269 to i64
  %expval271 = call i64 @llvm.expect.i64(i64 %conv270, i64 0)
  %tobool272 = icmp ne i64 %expval271, 0
  br i1 %tobool272, label %if.then273, label %if.end274

if.then273:                                       ; preds = %land.end260
  call void @warn_slowpath_null(i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.1, i32 0, i32 0), i32 379)
  br label %if.end274

if.end274:                                        ; preds = %if.then273, %land.end260
  %tobool276 = icmp ne i32 %lnot.ext264, 0
  %lnot277 = xor i1 %tobool276, true
  %lnot279 = xor i1 %lnot277, true
  %lnot.ext280 = zext i1 %lnot279 to i32
  %conv281 = sext i32 %lnot.ext280 to i64
  %expval282 = call i64 @llvm.expect.i64(i64 %conv281, i64 0)
  %join_ocb = getelementptr inbounds %struct.cfg80211_ops, %struct.cfg80211_ops* %ops, i32 0, i32 30
  %33 = load i32 (%struct.wiphy*, %struct.net_device*, %struct.ocb_setup*)*, i32 (%struct.wiphy*, %struct.net_device*, %struct.ocb_setup*)** %join_ocb, align 8, !tbaa !105
  %tobool284 = icmp ne i32 (%struct.wiphy*, %struct.net_device*, %struct.ocb_setup*)* %33, null
  br i1 %tobool284, label %land.rhs285, label %land.end289

land.rhs285:                                      ; preds = %if.end274
  %leave_ocb = getelementptr inbounds %struct.cfg80211_ops, %struct.cfg80211_ops* %ops, i32 0, i32 31
  %34 = load i32 (%struct.wiphy*, %struct.net_device*)*, i32 (%struct.wiphy*, %struct.net_device*)** %leave_ocb, align 8, !tbaa !106
  %tobool286 = icmp ne i32 (%struct.wiphy*, %struct.net_device*)* %34, null
  %lnot287 = xor i1 %tobool286, true
  br label %land.end289

land.end289:                                      ; preds = %land.rhs285, %if.end274
  %35 = phi i1 [ false, %if.end274 ], [ %lnot287, %land.rhs285 ]
  %lnot290 = xor i1 %35, true
  %lnot292 = xor i1 %lnot290, true
  %lnot.ext293 = zext i1 %lnot292 to i32
  %tobool294 = icmp ne i32 %lnot.ext293, 0
  %lnot295 = xor i1 %tobool294, true
  %lnot297 = xor i1 %lnot295, true
  %lnot.ext298 = zext i1 %lnot297 to i32
  %conv299 = sext i32 %lnot.ext298 to i64
  %expval300 = call i64 @llvm.expect.i64(i64 %conv299, i64 0)
  %tobool301 = icmp ne i64 %expval300, 0
  br i1 %tobool301, label %if.then302, label %if.end303

if.then302:                                       ; preds = %land.end289
  call void @warn_slowpath_null(i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.1, i32 0, i32 0), i32 380)
  br label %if.end303

if.end303:                                        ; preds = %if.then302, %land.end289
  %tobool305 = icmp ne i32 %lnot.ext293, 0
  %lnot306 = xor i1 %tobool305, true
  %lnot308 = xor i1 %lnot306, true
  %lnot.ext309 = zext i1 %lnot308 to i32
  %conv310 = sext i32 %lnot.ext309 to i64
  %expval311 = call i64 @llvm.expect.i64(i64 %conv310, i64 0)
  %suspend = getelementptr inbounds %struct.cfg80211_ops, %struct.cfg80211_ops* %ops, i32 0, i32 0
  %36 = load i32 (%struct.wiphy*, %struct.cfg80211_wowlan*)*, i32 (%struct.wiphy*, %struct.cfg80211_wowlan*)** %suspend, align 8, !tbaa !107
  %tobool313 = icmp ne i32 (%struct.wiphy*, %struct.cfg80211_wowlan*)* %36, null
  br i1 %tobool313, label %land.rhs314, label %land.end318

land.rhs314:                                      ; preds = %if.end303
  %resume = getelementptr inbounds %struct.cfg80211_ops, %struct.cfg80211_ops* %ops, i32 0, i32 1
  %37 = load i32 (%struct.wiphy*)*, i32 (%struct.wiphy*)** %resume, align 8, !tbaa !108
  %tobool315 = icmp ne i32 (%struct.wiphy*)* %37, null
  %lnot316 = xor i1 %tobool315, true
  br label %land.end318

land.end318:                                      ; preds = %land.rhs314, %if.end303
  %38 = phi i1 [ false, %if.end303 ], [ %lnot316, %land.rhs314 ]
  %lnot319 = xor i1 %38, true
  %lnot321 = xor i1 %lnot319, true
  %lnot.ext322 = zext i1 %lnot321 to i32
  %tobool323 = icmp ne i32 %lnot.ext322, 0
  %lnot324 = xor i1 %tobool323, true
  %lnot326 = xor i1 %lnot324, true
  %lnot.ext327 = zext i1 %lnot326 to i32
  %conv328 = sext i32 %lnot.ext327 to i64
  %expval329 = call i64 @llvm.expect.i64(i64 %conv328, i64 0)
  %tobool330 = icmp ne i64 %expval329, 0
  br i1 %tobool330, label %if.then331, label %if.end332

if.then331:                                       ; preds = %land.end318
  call void @warn_slowpath_null(i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.1, i32 0, i32 0), i32 381)
  br label %if.end332

if.end332:                                        ; preds = %if.then331, %land.end318
  %tobool334 = icmp ne i32 %lnot.ext322, 0
  %lnot335 = xor i1 %tobool334, true
  %lnot337 = xor i1 %lnot335, true
  %lnot.ext338 = zext i1 %lnot337 to i32
  %conv339 = sext i32 %lnot.ext338 to i64
  %expval340 = call i64 @llvm.expect.i64(i64 %conv339, i64 0)
  %sched_scan_start = getelementptr inbounds %struct.cfg80211_ops, %struct.cfg80211_ops* %ops, i32 0, i32 68
  %39 = load i32 (%struct.wiphy*, %struct.net_device*, %struct.cfg80211_sched_scan_request*)*, i32 (%struct.wiphy*, %struct.net_device*, %struct.cfg80211_sched_scan_request*)** %sched_scan_start, align 8, !tbaa !109
  %tobool342 = icmp ne i32 (%struct.wiphy*, %struct.net_device*, %struct.cfg80211_sched_scan_request*)* %39, null
  br i1 %tobool342, label %land.rhs343, label %land.end347

land.rhs343:                                      ; preds = %if.end332
  %sched_scan_stop = getelementptr inbounds %struct.cfg80211_ops, %struct.cfg80211_ops* %ops, i32 0, i32 69
  %40 = load i32 (%struct.wiphy*, %struct.net_device*)*, i32 (%struct.wiphy*, %struct.net_device*)** %sched_scan_stop, align 8, !tbaa !110
  %tobool344 = icmp ne i32 (%struct.wiphy*, %struct.net_device*)* %40, null
  %lnot345 = xor i1 %tobool344, true
  br label %land.end347

land.end347:                                      ; preds = %land.rhs343, %if.end332
  %41 = phi i1 [ false, %if.end332 ], [ %lnot345, %land.rhs343 ]
  %lnot348 = xor i1 %41, true
  %lnot350 = xor i1 %lnot348, true
  %lnot.ext351 = zext i1 %lnot350 to i32
  %tobool352 = icmp ne i32 %lnot.ext351, 0
  %lnot353 = xor i1 %tobool352, true
  %lnot355 = xor i1 %lnot353, true
  %lnot.ext356 = zext i1 %lnot355 to i32
  %conv357 = sext i32 %lnot.ext356 to i64
  %expval358 = call i64 @llvm.expect.i64(i64 %conv357, i64 0)
  %tobool359 = icmp ne i64 %expval358, 0
  br i1 %tobool359, label %if.then360, label %if.end361

if.then360:                                       ; preds = %land.end347
  call void @warn_slowpath_null(i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.1, i32 0, i32 0), i32 382)
  br label %if.end361

if.end361:                                        ; preds = %if.then360, %land.end347
  %tobool363 = icmp ne i32 %lnot.ext351, 0
  %lnot364 = xor i1 %tobool363, true
  %lnot366 = xor i1 %lnot364, true
  %lnot.ext367 = zext i1 %lnot366 to i32
  %conv368 = sext i32 %lnot.ext367 to i64
  %expval369 = call i64 @llvm.expect.i64(i64 %conv368, i64 0)
  %remain_on_channel = getelementptr inbounds %struct.cfg80211_ops, %struct.cfg80211_ops* %ops, i32 0, i32 58
  %42 = load i32 (%struct.wiphy*, %struct.wireless_dev*, %struct.ieee80211_channel*, i32, i64*)*, i32 (%struct.wiphy*, %struct.wireless_dev*, %struct.ieee80211_channel*, i32, i64*)** %remain_on_channel, align 8, !tbaa !111
  %tobool371 = icmp ne i32 (%struct.wiphy*, %struct.wireless_dev*, %struct.ieee80211_channel*, i32, i64*)* %42, null
  br i1 %tobool371, label %land.rhs372, label %land.end376

land.rhs372:                                      ; preds = %if.end361
  %cancel_remain_on_channel = getelementptr inbounds %struct.cfg80211_ops, %struct.cfg80211_ops* %ops, i32 0, i32 59
  %43 = load i32 (%struct.wiphy*, %struct.wireless_dev*, i64)*, i32 (%struct.wiphy*, %struct.wireless_dev*, i64)** %cancel_remain_on_channel, align 8, !tbaa !112
  %tobool373 = icmp ne i32 (%struct.wiphy*, %struct.wireless_dev*, i64)* %43, null
  %lnot374 = xor i1 %tobool373, true
  br label %land.end376

land.end376:                                      ; preds = %land.rhs372, %if.end361
  %44 = phi i1 [ false, %if.end361 ], [ %lnot374, %land.rhs372 ]
  %lnot377 = xor i1 %44, true
  %lnot379 = xor i1 %lnot377, true
  %lnot.ext380 = zext i1 %lnot379 to i32
  %tobool381 = icmp ne i32 %lnot.ext380, 0
  %lnot382 = xor i1 %tobool381, true
  %lnot384 = xor i1 %lnot382, true
  %lnot.ext385 = zext i1 %lnot384 to i32
  %conv386 = sext i32 %lnot.ext385 to i64
  %expval387 = call i64 @llvm.expect.i64(i64 %conv386, i64 0)
  %tobool388 = icmp ne i64 %expval387, 0
  br i1 %tobool388, label %if.then389, label %if.end390

if.then389:                                       ; preds = %land.end376
  call void @warn_slowpath_null(i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.1, i32 0, i32 0), i32 383)
  br label %if.end390

if.end390:                                        ; preds = %if.then389, %land.end376
  %tobool392 = icmp ne i32 %lnot.ext380, 0
  %lnot393 = xor i1 %tobool392, true
  %lnot395 = xor i1 %lnot393, true
  %lnot.ext396 = zext i1 %lnot395 to i32
  %conv397 = sext i32 %lnot.ext396 to i64
  %expval398 = call i64 @llvm.expect.i64(i64 %conv397, i64 0)
  %tdls_channel_switch = getelementptr inbounds %struct.cfg80211_ops, %struct.cfg80211_ops* %ops, i32 0, i32 89
  %45 = load i32 (%struct.wiphy*, %struct.net_device*, i8*, i8, %struct.cfg80211_chan_def*)*, i32 (%struct.wiphy*, %struct.net_device*, i8*, i8, %struct.cfg80211_chan_def*)** %tdls_channel_switch, align 8, !tbaa !113
  %tobool400 = icmp ne i32 (%struct.wiphy*, %struct.net_device*, i8*, i8, %struct.cfg80211_chan_def*)* %45, null
  br i1 %tobool400, label %land.rhs401, label %land.end405

land.rhs401:                                      ; preds = %if.end390
  %tdls_cancel_channel_switch = getelementptr inbounds %struct.cfg80211_ops, %struct.cfg80211_ops* %ops, i32 0, i32 90
  %46 = load void (%struct.wiphy*, %struct.net_device*, i8*)*, void (%struct.wiphy*, %struct.net_device*, i8*)** %tdls_cancel_channel_switch, align 8, !tbaa !114
  %tobool402 = icmp ne void (%struct.wiphy*, %struct.net_device*, i8*)* %46, null
  %lnot403 = xor i1 %tobool402, true
  br label %land.end405

land.end405:                                      ; preds = %land.rhs401, %if.end390
  %47 = phi i1 [ false, %if.end390 ], [ %lnot403, %land.rhs401 ]
  %lnot406 = xor i1 %47, true
  %lnot408 = xor i1 %lnot406, true
  %lnot.ext409 = zext i1 %lnot408 to i32
  %tobool410 = icmp ne i32 %lnot.ext409, 0
  %lnot411 = xor i1 %tobool410, true
  %lnot413 = xor i1 %lnot411, true
  %lnot.ext414 = zext i1 %lnot413 to i32
  %conv415 = sext i32 %lnot.ext414 to i64
  %expval416 = call i64 @llvm.expect.i64(i64 %conv415, i64 0)
  %tobool417 = icmp ne i64 %expval416, 0
  br i1 %tobool417, label %if.then418, label %if.end419

if.then418:                                       ; preds = %land.end405
  call void @warn_slowpath_null(i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.1, i32 0, i32 0), i32 384)
  br label %if.end419

if.end419:                                        ; preds = %if.then418, %land.end405
  %tobool421 = icmp ne i32 %lnot.ext409, 0
  %lnot422 = xor i1 %tobool421, true
  %lnot424 = xor i1 %lnot422, true
  %lnot.ext425 = zext i1 %lnot424 to i32
  %conv426 = sext i32 %lnot.ext425 to i64
  %expval427 = call i64 @llvm.expect.i64(i64 %conv426, i64 0)
  %add_tx_ts = getelementptr inbounds %struct.cfg80211_ops, %struct.cfg80211_ops* %ops, i32 0, i32 87
  %48 = load i32 (%struct.wiphy*, %struct.net_device*, i8, i8*, i8, i16)*, i32 (%struct.wiphy*, %struct.net_device*, i8, i8*, i8, i16)** %add_tx_ts, align 8, !tbaa !115
  %tobool429 = icmp ne i32 (%struct.wiphy*, %struct.net_device*, i8, i8*, i8, i16)* %48, null
  br i1 %tobool429, label %land.rhs430, label %land.end434

land.rhs430:                                      ; preds = %if.end419
  %del_tx_ts = getelementptr inbounds %struct.cfg80211_ops, %struct.cfg80211_ops* %ops, i32 0, i32 88
  %49 = load i32 (%struct.wiphy*, %struct.net_device*, i8, i8*)*, i32 (%struct.wiphy*, %struct.net_device*, i8, i8*)** %del_tx_ts, align 8, !tbaa !116
  %tobool431 = icmp ne i32 (%struct.wiphy*, %struct.net_device*, i8, i8*)* %49, null
  %lnot432 = xor i1 %tobool431, true
  br label %land.end434

land.end434:                                      ; preds = %land.rhs430, %if.end419
  %50 = phi i1 [ false, %if.end419 ], [ %lnot432, %land.rhs430 ]
  %lnot435 = xor i1 %50, true
  %lnot437 = xor i1 %lnot435, true
  %lnot.ext438 = zext i1 %lnot437 to i32
  %tobool439 = icmp ne i32 %lnot.ext438, 0
  %lnot440 = xor i1 %tobool439, true
  %lnot442 = xor i1 %lnot440, true
  %lnot.ext443 = zext i1 %lnot442 to i32
  %conv444 = sext i32 %lnot.ext443 to i64
  %expval445 = call i64 @llvm.expect.i64(i64 %conv444, i64 0)
  %tobool446 = icmp ne i64 %expval445, 0
  br i1 %tobool446, label %if.then447, label %if.end448

if.then447:                                       ; preds = %land.end434
  call void @warn_slowpath_null(i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.1, i32 0, i32 0), i32 385)
  br label %if.end448

if.end448:                                        ; preds = %if.then447, %land.end434
  %tobool450 = icmp ne i32 %lnot.ext438, 0
  %lnot451 = xor i1 %tobool450, true
  %lnot453 = xor i1 %lnot451, true
  %lnot.ext454 = zext i1 %lnot453 to i32
  %conv455 = sext i32 %lnot.ext454 to i64
  %expval456 = call i64 @llvm.expect.i64(i64 %conv455, i64 0)
  %conv457 = sext i32 %sizeof_priv to i64
  %add = add i64 1824, %conv457
  %conv458 = trunc i64 %add to i32
  %conv459 = sext i32 %conv458 to i64
  %call = call i8* @kzalloc(i64 %conv459, i32 20971712)
  %51 = bitcast i8* %call to %struct.cfg80211_registered_device*
  %tobool460 = icmp ne %struct.cfg80211_registered_device* %51, null
  br i1 %tobool460, label %if.end462, label %cleanup686

if.end462:                                        ; preds = %if.end448
  %ops463 = getelementptr inbounds %struct.cfg80211_registered_device, %struct.cfg80211_registered_device* %51, i32 0, i32 0
  store %struct.cfg80211_ops* %ops, %struct.cfg80211_ops** %ops463, align 32, !tbaa !68
  %call464 = call i32 @atomic_add_return(i32 1, %struct.atomic_t* @wiphy_new_nm.wiphy_counter)
  %wiphy_idx = getelementptr inbounds %struct.cfg80211_registered_device, %struct.cfg80211_registered_device* %51, i32 0, i32 8
  store i32 %call464, i32* %wiphy_idx, align 4, !tbaa !6
  %wiphy_idx465 = getelementptr inbounds %struct.cfg80211_registered_device, %struct.cfg80211_registered_device* %51, i32 0, i32 8
  %52 = load i32, i32* %wiphy_idx465, align 4, !tbaa !6
  %cmp = icmp slt i32 %52, 0
  %lnot467 = xor i1 %cmp, true
  %lnot469 = xor i1 %lnot467, true
  %lnot.ext470 = zext i1 %lnot469 to i32
  %conv471 = sext i32 %lnot.ext470 to i64
  %expval472 = call i64 @llvm.expect.i64(i64 %conv471, i64 0)
  %tobool473 = icmp ne i64 %expval472, 0
  br i1 %tobool473, label %if.then474, label %if.end475

if.then474:                                       ; preds = %if.end462
  call void @atomic_dec(%struct.atomic_t* @wiphy_new_nm.wiphy_counter)
  %53 = bitcast %struct.cfg80211_registered_device* %51 to i8*
  call void @kfree(i8* %53)
  br label %cleanup686

if.end475:                                        ; preds = %if.end462
  %wiphy_idx476 = getelementptr inbounds %struct.cfg80211_registered_device, %struct.cfg80211_registered_device* %51, i32 0, i32 8
  %54 = load i32, i32* %wiphy_idx476, align 4, !tbaa !6
  %dec = add nsw i32 %54, -1
  store i32 %dec, i32* %wiphy_idx476, align 4, !tbaa !6
  %tobool477 = icmp ne i8* %requested_name, null
  br i1 %tobool477, label %land.lhs.true, label %use_default_name

land.lhs.true:                                    ; preds = %if.end475
  %arrayidx = getelementptr inbounds i8, i8* %requested_name, i64 0
  %55 = load i8, i8* %arrayidx, align 1, !tbaa !72
  %conv478 = sext i8 %55 to i32
  %tobool479 = icmp ne i32 %conv478, 0
  br i1 %tobool479, label %if.then480, label %use_default_name

if.then480:                                       ; preds = %land.lhs.true
  call void @rtnl_lock()
  %call481 = call i32 @cfg80211_dev_check_name(%struct.cfg80211_registered_device* %51, i8* %requested_name)
  %cmp482 = icmp slt i32 %call481, 0
  br i1 %cmp482, label %if.then484, label %if.end485

if.then484:                                       ; preds = %if.then480
  call void @rtnl_unlock()
  br label %cleanup

if.end485:                                        ; preds = %if.then480
  %wiphy = getelementptr inbounds %struct.cfg80211_registered_device, %struct.cfg80211_registered_device* %51, i32 0, i32 42
  %dev = getelementptr inbounds %struct.wiphy, %struct.wiphy* %wiphy, i32 0, i32 50
  %call486 = call i32 (%struct.device*, i8*, ...) @dev_set_name(%struct.device* %dev, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.4, i32 0, i32 0), i8* %requested_name)
  call void @rtnl_unlock()
  %tobool487 = icmp ne i32 %call486, 0
  %. = select i1 %tobool487, i32 2, i32 0
  br label %cleanup

cleanup:                                          ; preds = %if.end485, %if.then484
  %cleanup.dest.slot.0 = phi i32 [ 2, %if.then484 ], [ %., %if.end485 ]
  %switch = icmp ult i32 %cleanup.dest.slot.0, 1
  br i1 %switch, label %if.end494, label %use_default_name

use_default_name:                                 ; preds = %if.end475, %land.lhs.true, %cleanup
  %wiphy490 = getelementptr inbounds %struct.cfg80211_registered_device, %struct.cfg80211_registered_device* %51, i32 0, i32 42
  %dev491 = getelementptr inbounds %struct.wiphy, %struct.wiphy* %wiphy490, i32 0, i32 50
  %wiphy_idx492 = getelementptr inbounds %struct.cfg80211_registered_device, %struct.cfg80211_registered_device* %51, i32 0, i32 8
  %56 = load i32, i32* %wiphy_idx492, align 4, !tbaa !6
  %call493 = call i32 (%struct.device*, i8*, ...) @dev_set_name(%struct.device* %dev491, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.5, i32 0, i32 0), i32 %56)
  br label %if.end494

if.end494:                                        ; preds = %cleanup, %use_default_name
  %wiphy495 = getelementptr inbounds %struct.cfg80211_registered_device, %struct.cfg80211_registered_device* %51, i32 0, i32 42
  %wdev_list = getelementptr inbounds %struct.wiphy, %struct.wiphy* %wiphy495, i32 0, i32 55
  call void @INIT_LIST_HEAD(%struct.list_head* %wdev_list)
  %beacon_registrations = getelementptr inbounds %struct.cfg80211_registered_device, %struct.cfg80211_registered_device* %51, i32 0, i32 13
  call void @INIT_LIST_HEAD(%struct.list_head* %beacon_registrations)
  %beacon_registrations_lock = getelementptr inbounds %struct.cfg80211_registered_device, %struct.cfg80211_registered_device* %51, i32 0, i32 14
  %call496 = call %struct.raw_spinlock* @spinlock_check(%struct.spinlock* %beacon_registrations_lock)
  %beacon_registrations_lock498 = getelementptr inbounds %struct.cfg80211_registered_device, %struct.cfg80211_registered_device* %51, i32 0, i32 14
  %57 = getelementptr inbounds %struct.spinlock, %struct.spinlock* %beacon_registrations_lock498, i32 0, i32 0
  %rlock = bitcast %union.anon.1* %57 to %struct.raw_spinlock*
  %raw_lock = getelementptr inbounds %struct.raw_spinlock, %struct.raw_spinlock* %.compoundliteral, i32 0, i32 0
  %val = getelementptr inbounds %struct.qspinlock, %struct.qspinlock* %raw_lock, i32 0, i32 0
  %counter = getelementptr inbounds %struct.atomic_t, %struct.atomic_t* %val, i32 0, i32 0
  store i32 0, i32* %counter, align 4, !tbaa !117
  %58 = bitcast %struct.raw_spinlock* %rlock to i8*
  %59 = bitcast %struct.raw_spinlock* %.compoundliteral to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %58, i8* %59, i64 4, i32 4, i1 false), !tbaa.struct !118
  %bss_lock = getelementptr inbounds %struct.cfg80211_registered_device, %struct.cfg80211_registered_device* %51, i32 0, i32 20
  %call502 = call %struct.raw_spinlock* @spinlock_check(%struct.spinlock* %bss_lock)
  %bss_lock504 = getelementptr inbounds %struct.cfg80211_registered_device, %struct.cfg80211_registered_device* %51, i32 0, i32 20
  %60 = getelementptr inbounds %struct.spinlock, %struct.spinlock* %bss_lock504, i32 0, i32 0
  %rlock505 = bitcast %union.anon.1* %60 to %struct.raw_spinlock*
  %raw_lock507 = getelementptr inbounds %struct.raw_spinlock, %struct.raw_spinlock* %.compoundliteral506, i32 0, i32 0
  %val508 = getelementptr inbounds %struct.qspinlock, %struct.qspinlock* %raw_lock507, i32 0, i32 0
  %counter509 = getelementptr inbounds %struct.atomic_t, %struct.atomic_t* %val508, i32 0, i32 0
  store i32 0, i32* %counter509, align 4, !tbaa !117
  %61 = bitcast %struct.raw_spinlock* %rlock505 to i8*
  %62 = bitcast %struct.raw_spinlock* %.compoundliteral506 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %61, i8* %62, i64 4, i32 4, i1 false), !tbaa.struct !118
  %bss_list = getelementptr inbounds %struct.cfg80211_registered_device, %struct.cfg80211_registered_device* %51, i32 0, i32 21
  call void @INIT_LIST_HEAD(%struct.list_head* %bss_list)
  %scan_done_wk = getelementptr inbounds %struct.cfg80211_registered_device, %struct.cfg80211_registered_device* %51, i32 0, i32 29
  call void @__init_work(%struct.work_struct* %scan_done_wk, i32 0)
  %scan_done_wk515 = getelementptr inbounds %struct.cfg80211_registered_device, %struct.cfg80211_registered_device* %51, i32 0, i32 29
  %data = getelementptr inbounds %struct.work_struct, %struct.work_struct* %scan_done_wk515, i32 0, i32 0
  %counter517 = getelementptr inbounds %struct.atomic64_t, %struct.atomic64_t* %.compoundliteral516, i32 0, i32 0
  store i64 68719476704, i64* %counter517, align 8, !tbaa !119
  %63 = bitcast %struct.atomic64_t* %data to i8*
  %64 = bitcast %struct.atomic64_t* %.compoundliteral516 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %63, i8* %64, i64 8, i32 8, i1 false), !tbaa.struct !120
  %scan_done_wk518 = getelementptr inbounds %struct.cfg80211_registered_device, %struct.cfg80211_registered_device* %51, i32 0, i32 29
  %entry519 = getelementptr inbounds %struct.work_struct, %struct.work_struct* %scan_done_wk518, i32 0, i32 1
  call void @INIT_LIST_HEAD(%struct.list_head* %entry519)
  %scan_done_wk520 = getelementptr inbounds %struct.cfg80211_registered_device, %struct.cfg80211_registered_device* %51, i32 0, i32 29
  %func = getelementptr inbounds %struct.work_struct, %struct.work_struct* %scan_done_wk520, i32 0, i32 2
  store void (%struct.work_struct*)* @__cfg80211_scan_done, void (%struct.work_struct*)** %func, align 8, !tbaa !122
  %sched_scan_results_wk = getelementptr inbounds %struct.cfg80211_registered_device, %struct.cfg80211_registered_device* %51, i32 0, i32 30
  call void @__init_work(%struct.work_struct* %sched_scan_results_wk, i32 0)
  %sched_scan_results_wk524 = getelementptr inbounds %struct.cfg80211_registered_device, %struct.cfg80211_registered_device* %51, i32 0, i32 30
  %data525 = getelementptr inbounds %struct.work_struct, %struct.work_struct* %sched_scan_results_wk524, i32 0, i32 0
  %counter527 = getelementptr inbounds %struct.atomic64_t, %struct.atomic64_t* %.compoundliteral526, i32 0, i32 0
  store i64 68719476704, i64* %counter527, align 8, !tbaa !119
  %65 = bitcast %struct.atomic64_t* %data525 to i8*
  %66 = bitcast %struct.atomic64_t* %.compoundliteral526 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %65, i8* %66, i64 8, i32 8, i1 false), !tbaa.struct !120
  %sched_scan_results_wk528 = getelementptr inbounds %struct.cfg80211_registered_device, %struct.cfg80211_registered_device* %51, i32 0, i32 30
  %entry529 = getelementptr inbounds %struct.work_struct, %struct.work_struct* %sched_scan_results_wk528, i32 0, i32 1
  call void @INIT_LIST_HEAD(%struct.list_head* %entry529)
  %sched_scan_results_wk530 = getelementptr inbounds %struct.cfg80211_registered_device, %struct.cfg80211_registered_device* %51, i32 0, i32 30
  %func531 = getelementptr inbounds %struct.work_struct, %struct.work_struct* %sched_scan_results_wk530, i32 0, i32 2
  store void (%struct.work_struct*)* @__cfg80211_sched_scan_results, void (%struct.work_struct*)** %func531, align 8, !tbaa !122
  %mlme_unreg = getelementptr inbounds %struct.cfg80211_registered_device, %struct.cfg80211_registered_device* %51, i32 0, i32 15
  call void @INIT_LIST_HEAD(%struct.list_head* %mlme_unreg)
  %mlme_unreg_lock = getelementptr inbounds %struct.cfg80211_registered_device, %struct.cfg80211_registered_device* %51, i32 0, i32 16
  %call535 = call %struct.raw_spinlock* @spinlock_check(%struct.spinlock* %mlme_unreg_lock)
  %mlme_unreg_lock537 = getelementptr inbounds %struct.cfg80211_registered_device, %struct.cfg80211_registered_device* %51, i32 0, i32 16
  %67 = getelementptr inbounds %struct.spinlock, %struct.spinlock* %mlme_unreg_lock537, i32 0, i32 0
  %rlock538 = bitcast %union.anon.1* %67 to %struct.raw_spinlock*
  %raw_lock540 = getelementptr inbounds %struct.raw_spinlock, %struct.raw_spinlock* %.compoundliteral539, i32 0, i32 0
  %val541 = getelementptr inbounds %struct.qspinlock, %struct.qspinlock* %raw_lock540, i32 0, i32 0
  %counter542 = getelementptr inbounds %struct.atomic_t, %struct.atomic_t* %val541, i32 0, i32 0
  store i32 0, i32* %counter542, align 4, !tbaa !117
  %68 = bitcast %struct.raw_spinlock* %rlock538 to i8*
  %69 = bitcast %struct.raw_spinlock* %.compoundliteral539 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %68, i8* %69, i64 4, i32 4, i1 false), !tbaa.struct !118
  %mlme_unreg_wk = getelementptr inbounds %struct.cfg80211_registered_device, %struct.cfg80211_registered_device* %51, i32 0, i32 17
  call void @__init_work(%struct.work_struct* %mlme_unreg_wk, i32 0)
  %mlme_unreg_wk548 = getelementptr inbounds %struct.cfg80211_registered_device, %struct.cfg80211_registered_device* %51, i32 0, i32 17
  %data549 = getelementptr inbounds %struct.work_struct, %struct.work_struct* %mlme_unreg_wk548, i32 0, i32 0
  %counter551 = getelementptr inbounds %struct.atomic64_t, %struct.atomic64_t* %.compoundliteral550, i32 0, i32 0
  store i64 68719476704, i64* %counter551, align 8, !tbaa !119
  %70 = bitcast %struct.atomic64_t* %data549 to i8*
  %71 = bitcast %struct.atomic64_t* %.compoundliteral550 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %70, i8* %71, i64 8, i32 8, i1 false), !tbaa.struct !120
  %mlme_unreg_wk552 = getelementptr inbounds %struct.cfg80211_registered_device, %struct.cfg80211_registered_device* %51, i32 0, i32 17
  %entry553 = getelementptr inbounds %struct.work_struct, %struct.work_struct* %mlme_unreg_wk552, i32 0, i32 1
  call void @INIT_LIST_HEAD(%struct.list_head* %entry553)
  %mlme_unreg_wk554 = getelementptr inbounds %struct.cfg80211_registered_device, %struct.cfg80211_registered_device* %51, i32 0, i32 17
  %func555 = getelementptr inbounds %struct.work_struct, %struct.work_struct* %mlme_unreg_wk554, i32 0, i32 2
  store void (%struct.work_struct*)* @cfg80211_mlme_unreg_wk, void (%struct.work_struct*)** %func555, align 8, !tbaa !122
  %dfs_update_channels_wk = getelementptr inbounds %struct.cfg80211_registered_device, %struct.cfg80211_registered_device* %51, i32 0, i32 34
  %work = getelementptr inbounds %struct.delayed_work, %struct.delayed_work* %dfs_update_channels_wk, i32 0, i32 0
  call void @__init_work(%struct.work_struct* %work, i32 0)
  %dfs_update_channels_wk560 = getelementptr inbounds %struct.cfg80211_registered_device, %struct.cfg80211_registered_device* %51, i32 0, i32 34
  %work561 = getelementptr inbounds %struct.delayed_work, %struct.delayed_work* %dfs_update_channels_wk560, i32 0, i32 0
  %data562 = getelementptr inbounds %struct.work_struct, %struct.work_struct* %work561, i32 0, i32 0
  %counter564 = getelementptr inbounds %struct.atomic64_t, %struct.atomic64_t* %.compoundliteral563, i32 0, i32 0
  store i64 68719476704, i64* %counter564, align 8, !tbaa !119
  %72 = bitcast %struct.atomic64_t* %data562 to i8*
  %73 = bitcast %struct.atomic64_t* %.compoundliteral563 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %72, i8* %73, i64 8, i32 8, i1 false), !tbaa.struct !120
  %dfs_update_channels_wk565 = getelementptr inbounds %struct.cfg80211_registered_device, %struct.cfg80211_registered_device* %51, i32 0, i32 34
  %work566 = getelementptr inbounds %struct.delayed_work, %struct.delayed_work* %dfs_update_channels_wk565, i32 0, i32 0
  %entry567 = getelementptr inbounds %struct.work_struct, %struct.work_struct* %work566, i32 0, i32 1
  call void @INIT_LIST_HEAD(%struct.list_head* %entry567)
  %dfs_update_channels_wk568 = getelementptr inbounds %struct.cfg80211_registered_device, %struct.cfg80211_registered_device* %51, i32 0, i32 34
  %work569 = getelementptr inbounds %struct.delayed_work, %struct.delayed_work* %dfs_update_channels_wk568, i32 0, i32 0
  %func570 = getelementptr inbounds %struct.work_struct, %struct.work_struct* %work569, i32 0, i32 2
  store void (%struct.work_struct*)* @cfg80211_dfs_channels_update_work, void (%struct.work_struct*)** %func570, align 8, !tbaa !122
  %dfs_update_channels_wk574 = getelementptr inbounds %struct.cfg80211_registered_device, %struct.cfg80211_registered_device* %51, i32 0, i32 34
  %timer = getelementptr inbounds %struct.delayed_work, %struct.delayed_work* %dfs_update_channels_wk574, i32 0, i32 1
  call void @init_timer_key(%struct.timer_list* %timer, i32 2097152, i8* null, %struct.lock_class_key* null)
  %dfs_update_channels_wk575 = getelementptr inbounds %struct.cfg80211_registered_device, %struct.cfg80211_registered_device* %51, i32 0, i32 34
  %timer576 = getelementptr inbounds %struct.delayed_work, %struct.delayed_work* %dfs_update_channels_wk575, i32 0, i32 1
  %function = getelementptr inbounds %struct.timer_list, %struct.timer_list* %timer576, i32 0, i32 2
  store void (i64)* @delayed_work_timer_fn, void (i64)** %function, align 8, !tbaa !123
  %dfs_update_channels_wk577 = getelementptr inbounds %struct.cfg80211_registered_device, %struct.cfg80211_registered_device* %51, i32 0, i32 34
  %74 = ptrtoint %struct.delayed_work* %dfs_update_channels_wk577 to i64
  %dfs_update_channels_wk578 = getelementptr inbounds %struct.cfg80211_registered_device, %struct.cfg80211_registered_device* %51, i32 0, i32 34
  %timer579 = getelementptr inbounds %struct.delayed_work, %struct.delayed_work* %dfs_update_channels_wk578, i32 0, i32 1
  %data580 = getelementptr inbounds %struct.timer_list, %struct.timer_list* %timer579, i32 0, i32 3
  store i64 %74, i64* %data580, align 32, !tbaa !124
  %wiphy585 = getelementptr inbounds %struct.cfg80211_registered_device, %struct.cfg80211_registered_device* %51, i32 0, i32 42
  %dev586 = getelementptr inbounds %struct.wiphy, %struct.wiphy* %wiphy585, i32 0, i32 50
  call void @device_initialize(%struct.device* %dev586)
  %wiphy587 = getelementptr inbounds %struct.cfg80211_registered_device, %struct.cfg80211_registered_device* %51, i32 0, i32 42
  %dev588 = getelementptr inbounds %struct.wiphy, %struct.wiphy* %wiphy587, i32 0, i32 50
  %class = getelementptr inbounds %struct.device, %struct.device* %dev588, i32 0, i32 31
  store %struct.class* @ieee80211_class, %struct.class** %class, align 8, !tbaa !125
  %75 = bitcast %struct.cfg80211_registered_device* %51 to i8*
  %wiphy589 = getelementptr inbounds %struct.cfg80211_registered_device, %struct.cfg80211_registered_device* %51, i32 0, i32 42
  %dev590 = getelementptr inbounds %struct.wiphy, %struct.wiphy* %wiphy589, i32 0, i32 50
  %platform_data = getelementptr inbounds %struct.device, %struct.device* %dev590, i32 0, i32 8
  store i8* %75, i8** %platform_data, align 16, !tbaa !126
  %wiphy591 = getelementptr inbounds %struct.cfg80211_registered_device, %struct.cfg80211_registered_device* %51, i32 0, i32 42
  %dev592 = getelementptr inbounds %struct.wiphy, %struct.wiphy* %wiphy591, i32 0, i32 50
  call void @device_enable_async_suspend(%struct.device* %dev592)
  %destroy_list = getelementptr inbounds %struct.cfg80211_registered_device, %struct.cfg80211_registered_device* %51, i32 0, i32 38
  call void @INIT_LIST_HEAD(%struct.list_head* %destroy_list)
  %destroy_list_lock = getelementptr inbounds %struct.cfg80211_registered_device, %struct.cfg80211_registered_device* %51, i32 0, i32 37
  %call594 = call %struct.raw_spinlock* @spinlock_check(%struct.spinlock* %destroy_list_lock)
  %destroy_list_lock596 = getelementptr inbounds %struct.cfg80211_registered_device, %struct.cfg80211_registered_device* %51, i32 0, i32 37
  %76 = getelementptr inbounds %struct.spinlock, %struct.spinlock* %destroy_list_lock596, i32 0, i32 0
  %rlock597 = bitcast %union.anon.1* %76 to %struct.raw_spinlock*
  %raw_lock599 = getelementptr inbounds %struct.raw_spinlock, %struct.raw_spinlock* %.compoundliteral598, i32 0, i32 0
  %val600 = getelementptr inbounds %struct.qspinlock, %struct.qspinlock* %raw_lock599, i32 0, i32 0
  %counter601 = getelementptr inbounds %struct.atomic_t, %struct.atomic_t* %val600, i32 0, i32 0
  store i32 0, i32* %counter601, align 4, !tbaa !117
  %77 = bitcast %struct.raw_spinlock* %rlock597 to i8*
  %78 = bitcast %struct.raw_spinlock* %.compoundliteral598 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %77, i8* %78, i64 4, i32 4, i1 false), !tbaa.struct !118
  %destroy_work = getelementptr inbounds %struct.cfg80211_registered_device, %struct.cfg80211_registered_device* %51, i32 0, i32 39
  call void @__init_work(%struct.work_struct* %destroy_work, i32 0)
  %destroy_work607 = getelementptr inbounds %struct.cfg80211_registered_device, %struct.cfg80211_registered_device* %51, i32 0, i32 39
  %data608 = getelementptr inbounds %struct.work_struct, %struct.work_struct* %destroy_work607, i32 0, i32 0
  %counter610 = getelementptr inbounds %struct.atomic64_t, %struct.atomic64_t* %.compoundliteral609, i32 0, i32 0
  store i64 68719476704, i64* %counter610, align 8, !tbaa !119
  %79 = bitcast %struct.atomic64_t* %data608 to i8*
  %80 = bitcast %struct.atomic64_t* %.compoundliteral609 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %79, i8* %80, i64 8, i32 8, i1 false), !tbaa.struct !120
  %destroy_work611 = getelementptr inbounds %struct.cfg80211_registered_device, %struct.cfg80211_registered_device* %51, i32 0, i32 39
  %entry612 = getelementptr inbounds %struct.work_struct, %struct.work_struct* %destroy_work611, i32 0, i32 1
  call void @INIT_LIST_HEAD(%struct.list_head* %entry612)
  %destroy_work613 = getelementptr inbounds %struct.cfg80211_registered_device, %struct.cfg80211_registered_device* %51, i32 0, i32 39
  %func614 = getelementptr inbounds %struct.work_struct, %struct.work_struct* %destroy_work613, i32 0, i32 2
  store void (%struct.work_struct*)* @cfg80211_destroy_iface_wk, void (%struct.work_struct*)** %func614, align 8, !tbaa !122
  %sched_scan_stop_wk = getelementptr inbounds %struct.cfg80211_registered_device, %struct.cfg80211_registered_device* %51, i32 0, i32 40
  call void @__init_work(%struct.work_struct* %sched_scan_stop_wk, i32 0)
  %sched_scan_stop_wk618 = getelementptr inbounds %struct.cfg80211_registered_device, %struct.cfg80211_registered_device* %51, i32 0, i32 40
  %data619 = getelementptr inbounds %struct.work_struct, %struct.work_struct* %sched_scan_stop_wk618, i32 0, i32 0
  %counter621 = getelementptr inbounds %struct.atomic64_t, %struct.atomic64_t* %.compoundliteral620, i32 0, i32 0
  store i64 68719476704, i64* %counter621, align 8, !tbaa !119
  %81 = bitcast %struct.atomic64_t* %data619 to i8*
  %82 = bitcast %struct.atomic64_t* %.compoundliteral620 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %81, i8* %82, i64 8, i32 8, i1 false), !tbaa.struct !120
  %sched_scan_stop_wk622 = getelementptr inbounds %struct.cfg80211_registered_device, %struct.cfg80211_registered_device* %51, i32 0, i32 40
  %entry623 = getelementptr inbounds %struct.work_struct, %struct.work_struct* %sched_scan_stop_wk622, i32 0, i32 1
  call void @INIT_LIST_HEAD(%struct.list_head* %entry623)
  %sched_scan_stop_wk624 = getelementptr inbounds %struct.cfg80211_registered_device, %struct.cfg80211_registered_device* %51, i32 0, i32 40
  %func625 = getelementptr inbounds %struct.work_struct, %struct.work_struct* %sched_scan_stop_wk624, i32 0, i32 2
  store void (%struct.work_struct*)* @cfg80211_sched_scan_stop_wk, void (%struct.work_struct*)** %func625, align 8, !tbaa !122
  %wiphy628 = getelementptr inbounds %struct.cfg80211_registered_device, %struct.cfg80211_registered_device* %51, i32 0, i32 42
  %flags = getelementptr inbounds %struct.wiphy, %struct.wiphy* %wiphy628, i32 0, i32 10
  %83 = load i32, i32* %flags, align 4, !tbaa !47
  %or = or i32 %83, 16
  store i32 %or, i32* %flags, align 4, !tbaa !47
  %wiphy629 = getelementptr inbounds %struct.cfg80211_registered_device, %struct.cfg80211_registered_device* %51, i32 0, i32 42
  call void @wiphy_net_set(%struct.wiphy* %wiphy629, %struct.net* @init_net)
  %rfkill_ops = getelementptr inbounds %struct.cfg80211_registered_device, %struct.cfg80211_registered_device* %51, i32 0, i32 2
  %set_block = getelementptr inbounds %struct.rfkill_ops, %struct.rfkill_ops* %rfkill_ops, i32 0, i32 2
  store i32 (i8*, i1)* @cfg80211_rfkill_set_block, i32 (i8*, i1)** %set_block, align 8, !tbaa !127
  %wiphy630 = getelementptr inbounds %struct.cfg80211_registered_device, %struct.cfg80211_registered_device* %51, i32 0, i32 42
  %dev631 = getelementptr inbounds %struct.wiphy, %struct.wiphy* %wiphy630, i32 0, i32 50
  %call632 = call i8* @dev_name(%struct.device* %dev631)
  %wiphy633 = getelementptr inbounds %struct.cfg80211_registered_device, %struct.cfg80211_registered_device* %51, i32 0, i32 42
  %dev634 = getelementptr inbounds %struct.wiphy, %struct.wiphy* %wiphy633, i32 0, i32 50
  %rfkill_ops635 = getelementptr inbounds %struct.cfg80211_registered_device, %struct.cfg80211_registered_device* %51, i32 0, i32 2
  %84 = bitcast %struct.cfg80211_registered_device* %51 to i8*
  %call636 = call %struct.rfkill* @rfkill_alloc(i8* %call632, %struct.device* %dev634, i32 1, %struct.rfkill_ops* %rfkill_ops635, i8* %84)
  %rfkill = getelementptr inbounds %struct.cfg80211_registered_device, %struct.cfg80211_registered_device* %51, i32 0, i32 3
  store %struct.rfkill* %call636, %struct.rfkill** %rfkill, align 16, !tbaa !128
  %rfkill637 = getelementptr inbounds %struct.cfg80211_registered_device, %struct.cfg80211_registered_device* %51, i32 0, i32 3
  %85 = load %struct.rfkill*, %struct.rfkill** %rfkill637, align 16, !tbaa !128
  %tobool638 = icmp ne %struct.rfkill* %85, null
  br i1 %tobool638, label %do.body641, label %if.then639

if.then639:                                       ; preds = %if.end494
  %86 = bitcast %struct.cfg80211_registered_device* %51 to i8*
  call void @kfree(i8* %86)
  br label %cleanup686

do.body641:                                       ; preds = %if.end494
  %rfkill_sync = getelementptr inbounds %struct.cfg80211_registered_device, %struct.cfg80211_registered_device* %51, i32 0, i32 4
  call void @__init_work(%struct.work_struct* %rfkill_sync, i32 0)
  %rfkill_sync642 = getelementptr inbounds %struct.cfg80211_registered_device, %struct.cfg80211_registered_device* %51, i32 0, i32 4
  %data643 = getelementptr inbounds %struct.work_struct, %struct.work_struct* %rfkill_sync642, i32 0, i32 0
  %counter645 = getelementptr inbounds %struct.atomic64_t, %struct.atomic64_t* %.compoundliteral644, i32 0, i32 0
  store i64 68719476704, i64* %counter645, align 8, !tbaa !119
  %87 = bitcast %struct.atomic64_t* %data643 to i8*
  %88 = bitcast %struct.atomic64_t* %.compoundliteral644 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %87, i8* %88, i64 8, i32 8, i1 false), !tbaa.struct !120
  %rfkill_sync646 = getelementptr inbounds %struct.cfg80211_registered_device, %struct.cfg80211_registered_device* %51, i32 0, i32 4
  %entry647 = getelementptr inbounds %struct.work_struct, %struct.work_struct* %rfkill_sync646, i32 0, i32 1
  call void @INIT_LIST_HEAD(%struct.list_head* %entry647)
  %rfkill_sync648 = getelementptr inbounds %struct.cfg80211_registered_device, %struct.cfg80211_registered_device* %51, i32 0, i32 4
  %func649 = getelementptr inbounds %struct.work_struct, %struct.work_struct* %rfkill_sync648, i32 0, i32 2
  store void (%struct.work_struct*)* @cfg80211_rfkill_sync_work, void (%struct.work_struct*)** %func649, align 8, !tbaa !122
  %conn_work = getelementptr inbounds %struct.cfg80211_registered_device, %struct.cfg80211_registered_device* %51, i32 0, i32 32
  call void @__init_work(%struct.work_struct* %conn_work, i32 0)
  %conn_work653 = getelementptr inbounds %struct.cfg80211_registered_device, %struct.cfg80211_registered_device* %51, i32 0, i32 32
  %data654 = getelementptr inbounds %struct.work_struct, %struct.work_struct* %conn_work653, i32 0, i32 0
  %counter656 = getelementptr inbounds %struct.atomic64_t, %struct.atomic64_t* %.compoundliteral655, i32 0, i32 0
  store i64 68719476704, i64* %counter656, align 8, !tbaa !119
  %89 = bitcast %struct.atomic64_t* %data654 to i8*
  %90 = bitcast %struct.atomic64_t* %.compoundliteral655 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %89, i8* %90, i64 8, i32 8, i1 false), !tbaa.struct !120
  %conn_work657 = getelementptr inbounds %struct.cfg80211_registered_device, %struct.cfg80211_registered_device* %51, i32 0, i32 32
  %entry658 = getelementptr inbounds %struct.work_struct, %struct.work_struct* %conn_work657, i32 0, i32 1
  call void @INIT_LIST_HEAD(%struct.list_head* %entry658)
  %conn_work659 = getelementptr inbounds %struct.cfg80211_registered_device, %struct.cfg80211_registered_device* %51, i32 0, i32 32
  %func660 = getelementptr inbounds %struct.work_struct, %struct.work_struct* %conn_work659, i32 0, i32 2
  store void (%struct.work_struct*)* @cfg80211_conn_work, void (%struct.work_struct*)** %func660, align 8, !tbaa !122
  %event_work = getelementptr inbounds %struct.cfg80211_registered_device, %struct.cfg80211_registered_device* %51, i32 0, i32 33
  call void @__init_work(%struct.work_struct* %event_work, i32 0)
  %event_work664 = getelementptr inbounds %struct.cfg80211_registered_device, %struct.cfg80211_registered_device* %51, i32 0, i32 33
  %data665 = getelementptr inbounds %struct.work_struct, %struct.work_struct* %event_work664, i32 0, i32 0
  %counter667 = getelementptr inbounds %struct.atomic64_t, %struct.atomic64_t* %.compoundliteral666, i32 0, i32 0
  store i64 68719476704, i64* %counter667, align 8, !tbaa !119
  %91 = bitcast %struct.atomic64_t* %data665 to i8*
  %92 = bitcast %struct.atomic64_t* %.compoundliteral666 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %91, i8* %92, i64 8, i32 8, i1 false), !tbaa.struct !120
  %event_work668 = getelementptr inbounds %struct.cfg80211_registered_device, %struct.cfg80211_registered_device* %51, i32 0, i32 33
  %entry669 = getelementptr inbounds %struct.work_struct, %struct.work_struct* %event_work668, i32 0, i32 1
  call void @INIT_LIST_HEAD(%struct.list_head* %entry669)
  %event_work670 = getelementptr inbounds %struct.cfg80211_registered_device, %struct.cfg80211_registered_device* %51, i32 0, i32 33
  %func671 = getelementptr inbounds %struct.work_struct, %struct.work_struct* %event_work670, i32 0, i32 2
  store void (%struct.work_struct*)* @cfg80211_event_work, void (%struct.work_struct*)** %func671, align 8, !tbaa !122
  %dev_wait = getelementptr inbounds %struct.cfg80211_registered_device, %struct.cfg80211_registered_device* %51, i32 0, i32 12
  call void @__init_waitqueue_head(%struct.__wait_queue_head* %dev_wait, i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.6, i32 0, i32 0), %struct.lock_class_key* @wiphy_new_nm.__key)
  %wiphy677 = getelementptr inbounds %struct.cfg80211_registered_device, %struct.cfg80211_registered_device* %51, i32 0, i32 42
  %retry_short = getelementptr inbounds %struct.wiphy, %struct.wiphy* %wiphy677, i32 0, i32 27
  store i8 7, i8* %retry_short, align 16, !tbaa !129
  %wiphy678 = getelementptr inbounds %struct.cfg80211_registered_device, %struct.cfg80211_registered_device* %51, i32 0, i32 42
  %retry_long = getelementptr inbounds %struct.wiphy, %struct.wiphy* %wiphy678, i32 0, i32 28
  store i8 4, i8* %retry_long, align 1, !tbaa !130
  %wiphy679 = getelementptr inbounds %struct.cfg80211_registered_device, %struct.cfg80211_registered_device* %51, i32 0, i32 42
  %frag_threshold = getelementptr inbounds %struct.wiphy, %struct.wiphy* %wiphy679, i32 0, i32 29
  store i32 -1, i32* %frag_threshold, align 4, !tbaa !131
  %wiphy680 = getelementptr inbounds %struct.cfg80211_registered_device, %struct.cfg80211_registered_device* %51, i32 0, i32 42
  %rts_threshold = getelementptr inbounds %struct.wiphy, %struct.wiphy* %wiphy680, i32 0, i32 30
  store i32 -1, i32* %rts_threshold, align 8, !tbaa !132
  %wiphy681 = getelementptr inbounds %struct.cfg80211_registered_device, %struct.cfg80211_registered_device* %51, i32 0, i32 42
  %coverage_class = getelementptr inbounds %struct.wiphy, %struct.wiphy* %wiphy681, i32 0, i32 31
  store i8 0, i8* %coverage_class, align 4, !tbaa !133
  %wiphy682 = getelementptr inbounds %struct.cfg80211_registered_device, %struct.cfg80211_registered_device* %51, i32 0, i32 42
  %max_num_csa_counters = getelementptr inbounds %struct.wiphy, %struct.wiphy* %wiphy682, i32 0, i32 63
  store i8 1, i8* %max_num_csa_counters, align 2, !tbaa !134
  %wiphy683 = getelementptr inbounds %struct.cfg80211_registered_device, %struct.cfg80211_registered_device* %51, i32 0, i32 42
  %max_sched_scan_plans = getelementptr inbounds %struct.wiphy, %struct.wiphy* %wiphy683, i32 0, i32 22
  store i32 1, i32* %max_sched_scan_plans, align 8, !tbaa !135
  %wiphy684 = getelementptr inbounds %struct.cfg80211_registered_device, %struct.cfg80211_registered_device* %51, i32 0, i32 42
  %max_sched_scan_plan_interval = getelementptr inbounds %struct.wiphy, %struct.wiphy* %wiphy684, i32 0, i32 23
  store i32 -1, i32* %max_sched_scan_plan_interval, align 4, !tbaa !136
  %wiphy685 = getelementptr inbounds %struct.cfg80211_registered_device, %struct.cfg80211_registered_device* %51, i32 0, i32 42
  br label %cleanup686

cleanup686:                                       ; preds = %if.end448, %do.body641, %if.then639, %if.then474
  %retval.0 = phi %struct.wiphy* [ null, %if.then474 ], [ %wiphy685, %do.body641 ], [ null, %if.then639 ], [ null, %if.end448 ]
  ret %struct.wiphy* %retval.0
}

; Function Attrs: inlinehint nounwind uwtable
define internal i8* @kzalloc(i64 %size, i32 %flags) #4 {
entry:
  %or = or i32 %flags, 32768
  %call = call i8* @kmalloc(i64 %size, i32 %or)
  ret i8* %call
}

; Function Attrs: alwaysinline nounwind uwtable
define internal i32 @atomic_add_return(i32 %i, %struct.atomic_t* %v) #5 {
entry:
  %counter = getelementptr inbounds %struct.atomic_t, %struct.atomic_t* %v, i32 0, i32 0
  %0 = call i32 asm sideeffect ".pushsection .smp_locks,\22a\22\0A.balign 4\0A.long 671f - .\0A.popsection\0A671:\0A\09lock; xaddl $0, $1\0A", "=r,=*m,0,*m,~{memory},~{cc},~{dirflag},~{fpsr},~{flags}"(i32* %counter, i32 %i, i32* %counter) #6, !srcloc !137
  %add = add nsw i32 %i, %0
  ret i32 %add
}

; Function Attrs: alwaysinline nounwind uwtable
define internal void @atomic_dec(%struct.atomic_t* %v) #5 {
entry:
  %counter = getelementptr inbounds %struct.atomic_t, %struct.atomic_t* %v, i32 0, i32 0
  call void asm sideeffect ".pushsection .smp_locks,\22a\22\0A.balign 4\0A.long 671f - .\0A.popsection\0A671:\0A\09lock; decl $0", "=*m,*m,~{dirflag},~{fpsr},~{flags}"(i32* %counter, i32* %counter) #6, !srcloc !138
  ret void
}

declare void @rtnl_lock() #2

declare void @rtnl_unlock() #2

declare i32 @dev_set_name(%struct.device*, i8*, ...) #2

; Function Attrs: inlinehint nounwind uwtable
define internal void @INIT_LIST_HEAD(%struct.list_head* %list) #4 {
entry:
  %__u = alloca %union.anon.94, align 8
  %0 = bitcast %union.anon.94* %__u to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %0) #6
  %__val = bitcast %union.anon.94* %__u to %struct.list_head**
  store %struct.list_head* %list, %struct.list_head** %__val, align 8, !tbaa !72
  %next = getelementptr inbounds %struct.list_head, %struct.list_head* %list, i32 0, i32 0
  %1 = bitcast %struct.list_head** %next to i8*
  %__c = bitcast %union.anon.94* %__u to [1 x i8]*
  %arraydecay = getelementptr inbounds [1 x i8], [1 x i8]* %__c, i32 0, i32 0
  call void @__write_once_size(i8* %1, i8* %arraydecay, i32 8)
  %__val1 = bitcast %union.anon.94* %__u to %struct.list_head**
  %2 = load %struct.list_head*, %struct.list_head** %__val1, align 8, !tbaa !72
  %3 = bitcast %union.anon.94* %__u to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %3) #6
  %prev = getelementptr inbounds %struct.list_head, %struct.list_head* %list, i32 0, i32 1
  store %struct.list_head* %list, %struct.list_head** %prev, align 8, !tbaa !82
  ret void
}

; Function Attrs: alwaysinline nounwind uwtable
define internal %struct.raw_spinlock* @spinlock_check(%struct.spinlock* %lock) #5 {
entry:
  %0 = getelementptr inbounds %struct.spinlock, %struct.spinlock* %lock, i32 0, i32 0
  %rlock = bitcast %union.anon.1* %0 to %struct.raw_spinlock*
  ret %struct.raw_spinlock* %rlock
}

; Function Attrs: argmemonly nounwind
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* nocapture writeonly, i8* nocapture readonly, i64, i32, i1) #1

; Function Attrs: inlinehint nounwind uwtable
define internal void @__init_work(%struct.work_struct* %work, i32 %onstack) #4 {
entry:
  ret void
}

declare void @__cfg80211_scan_done(%struct.work_struct*) #2

declare void @__cfg80211_sched_scan_results(%struct.work_struct*) #2

declare void @cfg80211_mlme_unreg_wk(%struct.work_struct*) #2

declare void @cfg80211_dfs_channels_update_work(%struct.work_struct*) #2

declare void @init_timer_key(%struct.timer_list*, i32, i8*, %struct.lock_class_key*) #2

declare void @delayed_work_timer_fn(i64) #2

declare void @device_initialize(%struct.device*) #2

; Function Attrs: inlinehint nounwind uwtable
define internal void @device_enable_async_suspend(%struct.device* %dev) #4 {
entry:
  %power = getelementptr inbounds %struct.device, %struct.device* %dev, i32 0, i32 11
  %is_prepared = getelementptr inbounds %struct.dev_pm_info, %struct.dev_pm_info* %power, i32 0, i32 1
  %bf.load = load i16, i16* %is_prepared, align 4
  %bf.lshr = lshr i16 %bf.load, 3
  %bf.clear = and i16 %bf.lshr, 1
  %bf.cast = trunc i16 %bf.clear to i1
  br i1 %bf.cast, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  %power1 = getelementptr inbounds %struct.device, %struct.device* %dev, i32 0, i32 11
  %async_suspend = getelementptr inbounds %struct.dev_pm_info, %struct.dev_pm_info* %power1, i32 0, i32 1
  %bf.load2 = load i16, i16* %async_suspend, align 4
  %bf.clear3 = and i16 %bf.load2, -3
  %bf.set = or i16 %bf.clear3, 2
  store i16 %bf.set, i16* %async_suspend, align 4
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  ret void
}

; Function Attrs: nounwind uwtable
define internal void @cfg80211_destroy_iface_wk(%struct.work_struct* %work) #0 {
entry:
  %0 = bitcast %struct.work_struct* %work to i8*
  %add.ptr = getelementptr inbounds i8, i8* %0, i64 -584
  %1 = bitcast i8* %add.ptr to %struct.cfg80211_registered_device*
  call void @rtnl_lock()
  call void @cfg80211_destroy_ifaces(%struct.cfg80211_registered_device* %1)
  call void @rtnl_unlock()
  ret void
}

; Function Attrs: nounwind uwtable
define internal void @cfg80211_sched_scan_stop_wk(%struct.work_struct* %work) #0 {
entry:
  %0 = bitcast %struct.work_struct* %work to i8*
  %add.ptr = getelementptr inbounds i8, i8* %0, i64 -616
  %1 = bitcast i8* %add.ptr to %struct.cfg80211_registered_device*
  call void @rtnl_lock()
  %call = call i32 @__cfg80211_stop_sched_scan(%struct.cfg80211_registered_device* %1, i1 zeroext false)
  call void @rtnl_unlock()
  ret void
}

; Function Attrs: nounwind uwtable
define internal i32 @cfg80211_rfkill_set_block(i8* %data, i1 zeroext %blocked) #0 {
entry:
  %frombool = zext i1 %blocked to i8
  %0 = bitcast i8* %data to %struct.cfg80211_registered_device*
  %tobool = trunc i8 %frombool to i1
  br i1 %tobool, label %if.end, label %cleanup

if.end:                                           ; preds = %entry
  call void @rtnl_lock()
  %wiphy = getelementptr inbounds %struct.cfg80211_registered_device, %struct.cfg80211_registered_device* %0, i32 0, i32 42
  call void @cfg80211_shutdown_all_interfaces(%struct.wiphy* %wiphy)
  call void @rtnl_unlock()
  br label %cleanup

cleanup:                                          ; preds = %entry, %if.end
  ret i32 0
}

declare %struct.rfkill* @rfkill_alloc(i8*, %struct.device*, i32, %struct.rfkill_ops*, i8*) #2

; Function Attrs: nounwind uwtable
define internal void @cfg80211_rfkill_sync_work(%struct.work_struct* %work) #0 {
entry:
  %0 = bitcast %struct.work_struct* %work to i8*
  %add.ptr = getelementptr inbounds i8, i8* %0, i64 -56
  %1 = bitcast i8* %add.ptr to %struct.cfg80211_registered_device*
  %2 = bitcast %struct.cfg80211_registered_device* %1 to i8*
  %rfkill = getelementptr inbounds %struct.cfg80211_registered_device, %struct.cfg80211_registered_device* %1, i32 0, i32 3
  %3 = load %struct.rfkill*, %struct.rfkill** %rfkill, align 16, !tbaa !128
  %call = call zeroext i1 @rfkill_blocked(%struct.rfkill* %3)
  %call1 = call i32 @cfg80211_rfkill_set_block(i8* %2, i1 zeroext %call)
  ret void
}

declare void @cfg80211_conn_work(%struct.work_struct*) #2

; Function Attrs: nounwind uwtable
define internal void @cfg80211_event_work(%struct.work_struct* %work) #0 {
entry:
  %0 = bitcast %struct.work_struct* %work to i8*
  %add.ptr = getelementptr inbounds i8, i8* %0, i64 -416
  %1 = bitcast i8* %add.ptr to %struct.cfg80211_registered_device*
  call void @rtnl_lock()
  call void @cfg80211_process_rdev_events(%struct.cfg80211_registered_device* %1)
  call void @rtnl_unlock()
  ret void
}

declare void @__init_waitqueue_head(%struct.__wait_queue_head*, i8*, %struct.lock_class_key*) #2

; Function Attrs: nounwind uwtable
define i32 @wiphy_register(%struct.wiphy* %wiphy) #0 {
entry:
  %request = alloca %struct.regulatory_request, align 8
  %call = call %struct.cfg80211_registered_device* @wiphy_to_rdev(%struct.wiphy* %wiphy)
  %interface_modes = getelementptr inbounds %struct.wiphy, %struct.wiphy* %wiphy, i32 0, i32 8
  %0 = load i16, i16* %interface_modes, align 16, !tbaa !139
  %wowlan = getelementptr inbounds %struct.wiphy, %struct.wiphy* %wiphy, i32 0, i32 34
  %1 = load %struct.wiphy_wowlan_support*, %struct.wiphy_wowlan_support** %wowlan, align 8, !tbaa !140
  %tobool = icmp ne %struct.wiphy_wowlan_support* %1, null
  br i1 %tobool, label %land.lhs.true, label %land.end

land.lhs.true:                                    ; preds = %entry
  %wowlan1 = getelementptr inbounds %struct.wiphy, %struct.wiphy* %wiphy, i32 0, i32 34
  %2 = load %struct.wiphy_wowlan_support*, %struct.wiphy_wowlan_support** %wowlan1, align 8, !tbaa !140
  %flags = getelementptr inbounds %struct.wiphy_wowlan_support, %struct.wiphy_wowlan_support* %2, i32 0, i32 0
  %3 = load i32, i32* %flags, align 8, !tbaa !141
  %and = and i32 %3, 16
  %tobool2 = icmp ne i32 %and, 0
  br i1 %tobool2, label %land.rhs, label %land.end

land.rhs:                                         ; preds = %land.lhs.true
  %wowlan3 = getelementptr inbounds %struct.wiphy, %struct.wiphy* %wiphy, i32 0, i32 34
  %4 = load %struct.wiphy_wowlan_support*, %struct.wiphy_wowlan_support** %wowlan3, align 8, !tbaa !140
  %flags4 = getelementptr inbounds %struct.wiphy_wowlan_support, %struct.wiphy_wowlan_support* %4, i32 0, i32 0
  %5 = load i32, i32* %flags4, align 8, !tbaa !141
  %and5 = and i32 %5, 8
  %tobool6 = icmp ne i32 %and5, 0
  %lnot = xor i1 %tobool6, true
  br label %land.end

land.end:                                         ; preds = %land.rhs, %land.lhs.true, %entry
  %6 = phi i1 [ false, %land.lhs.true ], [ false, %entry ], [ %lnot, %land.rhs ]
  %lnot7 = xor i1 %6, true
  %lnot8 = xor i1 %lnot7, true
  %lnot.ext = zext i1 %lnot8 to i32
  %tobool9 = icmp ne i32 %lnot.ext, 0
  %lnot10 = xor i1 %tobool9, true
  %lnot12 = xor i1 %lnot10, true
  %lnot.ext13 = zext i1 %lnot12 to i32
  %conv = sext i32 %lnot.ext13 to i64
  %expval = call i64 @llvm.expect.i64(i64 %conv, i64 0)
  %tobool14 = icmp ne i64 %expval, 0
  br i1 %tobool14, label %if.then, label %if.end

if.then:                                          ; preds = %land.end
  call void @warn_slowpath_null(i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.1, i32 0, i32 0), i32 615)
  br label %if.end

if.end:                                           ; preds = %if.then, %land.end
  %tobool15 = icmp ne i32 %lnot.ext, 0
  %lnot16 = xor i1 %tobool15, true
  %lnot18 = xor i1 %lnot16, true
  %lnot.ext19 = zext i1 %lnot18 to i32
  %conv20 = sext i32 %lnot.ext19 to i64
  %expval21 = call i64 @llvm.expect.i64(i64 %conv20, i64 0)
  %tobool22 = icmp ne i64 %expval21, 0
  br i1 %tobool22, label %cleanup, label %if.end24

if.end24:                                         ; preds = %if.end
  %wowlan26 = getelementptr inbounds %struct.wiphy, %struct.wiphy* %wiphy, i32 0, i32 34
  %7 = load %struct.wiphy_wowlan_support*, %struct.wiphy_wowlan_support** %wowlan26, align 8, !tbaa !140
  %tobool27 = icmp ne %struct.wiphy_wowlan_support* %7, null
  br i1 %tobool27, label %land.lhs.true28, label %land.end40

land.lhs.true28:                                  ; preds = %if.end24
  %wowlan29 = getelementptr inbounds %struct.wiphy, %struct.wiphy* %wiphy, i32 0, i32 34
  %8 = load %struct.wiphy_wowlan_support*, %struct.wiphy_wowlan_support** %wowlan29, align 8, !tbaa !140
  %flags30 = getelementptr inbounds %struct.wiphy_wowlan_support, %struct.wiphy_wowlan_support* %8, i32 0, i32 0
  %9 = load i32, i32* %flags30, align 8, !tbaa !141
  %tobool31 = icmp ne i32 %9, 0
  br i1 %tobool31, label %land.end40, label %land.lhs.true32

land.lhs.true32:                                  ; preds = %land.lhs.true28
  %wowlan33 = getelementptr inbounds %struct.wiphy, %struct.wiphy* %wiphy, i32 0, i32 34
  %10 = load %struct.wiphy_wowlan_support*, %struct.wiphy_wowlan_support** %wowlan33, align 8, !tbaa !140
  %n_patterns = getelementptr inbounds %struct.wiphy_wowlan_support, %struct.wiphy_wowlan_support* %10, i32 0, i32 1
  %11 = load i32, i32* %n_patterns, align 4, !tbaa !143
  %tobool34 = icmp ne i32 %11, 0
  br i1 %tobool34, label %land.end40, label %land.rhs35

land.rhs35:                                       ; preds = %land.lhs.true32
  %wowlan36 = getelementptr inbounds %struct.wiphy, %struct.wiphy* %wiphy, i32 0, i32 34
  %12 = load %struct.wiphy_wowlan_support*, %struct.wiphy_wowlan_support** %wowlan36, align 8, !tbaa !140
  %tcp = getelementptr inbounds %struct.wiphy_wowlan_support, %struct.wiphy_wowlan_support* %12, i32 0, i32 6
  %13 = load %struct.wiphy_wowlan_tcp_support*, %struct.wiphy_wowlan_tcp_support** %tcp, align 8, !tbaa !144
  %tobool37 = icmp ne %struct.wiphy_wowlan_tcp_support* %13, null
  %lnot38 = xor i1 %tobool37, true
  br label %land.end40

land.end40:                                       ; preds = %land.rhs35, %land.lhs.true32, %land.lhs.true28, %if.end24
  %14 = phi i1 [ false, %land.lhs.true32 ], [ false, %land.lhs.true28 ], [ false, %if.end24 ], [ %lnot38, %land.rhs35 ]
  %lnot41 = xor i1 %14, true
  %lnot43 = xor i1 %lnot41, true
  %lnot.ext44 = zext i1 %lnot43 to i32
  %tobool45 = icmp ne i32 %lnot.ext44, 0
  %lnot46 = xor i1 %tobool45, true
  %lnot48 = xor i1 %lnot46, true
  %lnot.ext49 = zext i1 %lnot48 to i32
  %conv50 = sext i32 %lnot.ext49 to i64
  %expval51 = call i64 @llvm.expect.i64(i64 %conv50, i64 0)
  %tobool52 = icmp ne i64 %expval51, 0
  br i1 %tobool52, label %if.then53, label %if.end54

if.then53:                                        ; preds = %land.end40
  call void @warn_slowpath_null(i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.1, i32 0, i32 0), i32 619)
  br label %if.end54

if.end54:                                         ; preds = %if.then53, %land.end40
  %tobool56 = icmp ne i32 %lnot.ext44, 0
  %lnot57 = xor i1 %tobool56, true
  %lnot59 = xor i1 %lnot57, true
  %lnot.ext60 = zext i1 %lnot59 to i32
  %conv61 = sext i32 %lnot.ext60 to i64
  %expval62 = call i64 @llvm.expect.i64(i64 %conv61, i64 0)
  %tobool63 = icmp ne i64 %expval62, 0
  br i1 %tobool63, label %cleanup, label %if.end65

if.end65:                                         ; preds = %if.end54
  %features = getelementptr inbounds %struct.wiphy, %struct.wiphy* %wiphy, i32 0, i32 12
  %15 = load i32, i32* %features, align 4, !tbaa !145
  %and67 = and i32 %15, 268435456
  %tobool68 = icmp ne i32 %and67, 0
  br i1 %tobool68, label %land.rhs69, label %land.end75

land.rhs69:                                       ; preds = %if.end65
  %ops = getelementptr inbounds %struct.cfg80211_registered_device, %struct.cfg80211_registered_device* %call, i32 0, i32 0
  %16 = load %struct.cfg80211_ops*, %struct.cfg80211_ops** %ops, align 32, !tbaa !68
  %tdls_channel_switch = getelementptr inbounds %struct.cfg80211_ops, %struct.cfg80211_ops* %16, i32 0, i32 89
  %17 = load i32 (%struct.wiphy*, %struct.net_device*, i8*, i8, %struct.cfg80211_chan_def*)*, i32 (%struct.wiphy*, %struct.net_device*, i8*, i8, %struct.cfg80211_chan_def*)** %tdls_channel_switch, align 8, !tbaa !113
  %tobool70 = icmp ne i32 (%struct.wiphy*, %struct.net_device*, i8*, i8, %struct.cfg80211_chan_def*)* %17, null
  br i1 %tobool70, label %lor.rhs, label %land.end75

lor.rhs:                                          ; preds = %land.rhs69
  %ops71 = getelementptr inbounds %struct.cfg80211_registered_device, %struct.cfg80211_registered_device* %call, i32 0, i32 0
  %18 = load %struct.cfg80211_ops*, %struct.cfg80211_ops** %ops71, align 32, !tbaa !68
  %tdls_cancel_channel_switch = getelementptr inbounds %struct.cfg80211_ops, %struct.cfg80211_ops* %18, i32 0, i32 90
  %19 = load void (%struct.wiphy*, %struct.net_device*, i8*)*, void (%struct.wiphy*, %struct.net_device*, i8*)** %tdls_cancel_channel_switch, align 8, !tbaa !114
  %tobool72 = icmp ne void (%struct.wiphy*, %struct.net_device*, i8*)* %19, null
  %lnot73 = xor i1 %tobool72, true
  br label %land.end75

land.end75:                                       ; preds = %land.rhs69, %lor.rhs, %if.end65
  %20 = phi i1 [ false, %if.end65 ], [ true, %land.rhs69 ], [ %lnot73, %lor.rhs ]
  %lnot76 = xor i1 %20, true
  %lnot78 = xor i1 %lnot76, true
  %lnot.ext79 = zext i1 %lnot78 to i32
  %tobool80 = icmp ne i32 %lnot.ext79, 0
  %lnot81 = xor i1 %tobool80, true
  %lnot83 = xor i1 %lnot81, true
  %lnot.ext84 = zext i1 %lnot83 to i32
  %conv85 = sext i32 %lnot.ext84 to i64
  %expval86 = call i64 @llvm.expect.i64(i64 %conv85, i64 0)
  %tobool87 = icmp ne i64 %expval86, 0
  br i1 %tobool87, label %if.then88, label %if.end89

if.then88:                                        ; preds = %land.end75
  call void @warn_slowpath_null(i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.1, i32 0, i32 0), i32 624)
  br label %if.end89

if.end89:                                         ; preds = %if.then88, %land.end75
  %tobool91 = icmp ne i32 %lnot.ext79, 0
  %lnot92 = xor i1 %tobool91, true
  %lnot94 = xor i1 %lnot92, true
  %lnot.ext95 = zext i1 %lnot94 to i32
  %conv96 = sext i32 %lnot.ext95 to i64
  %expval97 = call i64 @llvm.expect.i64(i64 %conv96, i64 0)
  %tobool98 = icmp ne i64 %expval97, 0
  br i1 %tobool98, label %cleanup, label %if.end100

if.end100:                                        ; preds = %if.end89
  %interface_modes102 = getelementptr inbounds %struct.wiphy, %struct.wiphy* %wiphy, i32 0, i32 8
  %21 = load i16, i16* %interface_modes102, align 16, !tbaa !139
  %conv103 = zext i16 %21 to i64
  %and104 = and i64 %conv103, 4096
  %tobool105 = icmp ne i64 %and104, 0
  br i1 %tobool105, label %land.rhs106, label %land.end124

land.rhs106:                                      ; preds = %if.end100
  %ops107 = getelementptr inbounds %struct.cfg80211_registered_device, %struct.cfg80211_registered_device* %call, i32 0, i32 0
  %22 = load %struct.cfg80211_ops*, %struct.cfg80211_ops** %ops107, align 32, !tbaa !68
  %start_nan = getelementptr inbounds %struct.cfg80211_ops, %struct.cfg80211_ops* %22, i32 0, i32 91
  %23 = load i32 (%struct.wiphy*, %struct.wireless_dev*, %struct.cfg80211_nan_conf*)*, i32 (%struct.wiphy*, %struct.wireless_dev*, %struct.cfg80211_nan_conf*)** %start_nan, align 8, !tbaa !146
  %tobool108 = icmp ne i32 (%struct.wiphy*, %struct.wireless_dev*, %struct.cfg80211_nan_conf*)* %23, null
  br i1 %tobool108, label %lor.lhs.false, label %land.end124

lor.lhs.false:                                    ; preds = %land.rhs106
  %ops109 = getelementptr inbounds %struct.cfg80211_registered_device, %struct.cfg80211_registered_device* %call, i32 0, i32 0
  %24 = load %struct.cfg80211_ops*, %struct.cfg80211_ops** %ops109, align 32, !tbaa !68
  %stop_nan = getelementptr inbounds %struct.cfg80211_ops, %struct.cfg80211_ops* %24, i32 0, i32 92
  %25 = load void (%struct.wiphy*, %struct.wireless_dev*)*, void (%struct.wiphy*, %struct.wireless_dev*)** %stop_nan, align 8, !tbaa !71
  %tobool110 = icmp ne void (%struct.wiphy*, %struct.wireless_dev*)* %25, null
  br i1 %tobool110, label %lor.lhs.false111, label %land.end124

lor.lhs.false111:                                 ; preds = %lor.lhs.false
  %ops112 = getelementptr inbounds %struct.cfg80211_registered_device, %struct.cfg80211_registered_device* %call, i32 0, i32 0
  %26 = load %struct.cfg80211_ops*, %struct.cfg80211_ops** %ops112, align 32, !tbaa !68
  %add_nan_func = getelementptr inbounds %struct.cfg80211_ops, %struct.cfg80211_ops* %26, i32 0, i32 93
  %27 = load i32 (%struct.wiphy*, %struct.wireless_dev*, %struct.cfg80211_nan_func*)*, i32 (%struct.wiphy*, %struct.wireless_dev*, %struct.cfg80211_nan_func*)** %add_nan_func, align 8, !tbaa !147
  %tobool113 = icmp ne i32 (%struct.wiphy*, %struct.wireless_dev*, %struct.cfg80211_nan_func*)* %27, null
  br i1 %tobool113, label %lor.lhs.false114, label %land.end124

lor.lhs.false114:                                 ; preds = %lor.lhs.false111
  %ops115 = getelementptr inbounds %struct.cfg80211_registered_device, %struct.cfg80211_registered_device* %call, i32 0, i32 0
  %28 = load %struct.cfg80211_ops*, %struct.cfg80211_ops** %ops115, align 32, !tbaa !68
  %del_nan_func = getelementptr inbounds %struct.cfg80211_ops, %struct.cfg80211_ops* %28, i32 0, i32 94
  %29 = load void (%struct.wiphy*, %struct.wireless_dev*, i64)*, void (%struct.wiphy*, %struct.wireless_dev*, i64)** %del_nan_func, align 8, !tbaa !148
  %tobool116 = icmp ne void (%struct.wiphy*, %struct.wireless_dev*, i64)* %29, null
  br i1 %tobool116, label %lor.rhs117, label %land.end124

lor.rhs117:                                       ; preds = %lor.lhs.false114
  %nan_supported_bands = getelementptr inbounds %struct.wiphy, %struct.wiphy* %wiphy, i32 0, i32 67
  %30 = load i8, i8* %nan_supported_bands, align 32, !tbaa !149
  %conv118 = zext i8 %30 to i64
  %and119 = and i64 %conv118, 1
  %tobool120 = icmp ne i64 %and119, 0
  %lnot121 = xor i1 %tobool120, true
  br label %land.end124

land.end124:                                      ; preds = %land.rhs106, %lor.lhs.false, %lor.lhs.false111, %lor.lhs.false114, %lor.rhs117, %if.end100
  %31 = phi i1 [ false, %if.end100 ], [ true, %lor.lhs.false114 ], [ true, %lor.lhs.false111 ], [ true, %lor.lhs.false ], [ true, %land.rhs106 ], [ %lnot121, %lor.rhs117 ]
  %lnot125 = xor i1 %31, true
  %lnot127 = xor i1 %lnot125, true
  %lnot.ext128 = zext i1 %lnot127 to i32
  %tobool129 = icmp ne i32 %lnot.ext128, 0
  %lnot130 = xor i1 %tobool129, true
  %lnot132 = xor i1 %lnot130, true
  %lnot.ext133 = zext i1 %lnot132 to i32
  %conv134 = sext i32 %lnot.ext133 to i64
  %expval135 = call i64 @llvm.expect.i64(i64 %conv134, i64 0)
  %tobool136 = icmp ne i64 %expval135, 0
  br i1 %tobool136, label %if.then137, label %if.end138

if.then137:                                       ; preds = %land.end124
  call void @warn_slowpath_null(i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.1, i32 0, i32 0), i32 630)
  br label %if.end138

if.end138:                                        ; preds = %if.then137, %land.end124
  %tobool140 = icmp ne i32 %lnot.ext128, 0
  %lnot141 = xor i1 %tobool140, true
  %lnot143 = xor i1 %lnot141, true
  %lnot.ext144 = zext i1 %lnot143 to i32
  %conv145 = sext i32 %lnot.ext144 to i64
  %expval146 = call i64 @llvm.expect.i64(i64 %conv145, i64 0)
  %tobool147 = icmp ne i64 %expval146, 0
  br i1 %tobool147, label %cleanup, label %if.end149

if.end149:                                        ; preds = %if.end138
  %interface_modes151 = getelementptr inbounds %struct.wiphy, %struct.wiphy* %wiphy, i32 0, i32 8
  %32 = load i16, i16* %interface_modes151, align 16, !tbaa !139
  %conv152 = zext i16 %32 to i64
  %and153 = and i64 %conv152, 32
  %tobool154 = icmp ne i64 %and153, 0
  %lnot155 = xor i1 %tobool154, true
  %lnot157 = xor i1 %lnot155, true
  %lnot.ext158 = zext i1 %lnot157 to i32
  %tobool159 = icmp ne i32 %lnot.ext158, 0
  %lnot160 = xor i1 %tobool159, true
  %lnot162 = xor i1 %lnot160, true
  %lnot.ext163 = zext i1 %lnot162 to i32
  %conv164 = sext i32 %lnot.ext163 to i64
  %expval165 = call i64 @llvm.expect.i64(i64 %conv164, i64 0)
  %tobool166 = icmp ne i64 %expval165, 0
  br i1 %tobool166, label %if.then167, label %if.end168

if.then167:                                       ; preds = %if.end149
  call void @warn_slowpath_null(i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.1, i32 0, i32 0), i32 634)
  br label %if.end168

if.end168:                                        ; preds = %if.then167, %if.end149
  %tobool170 = icmp ne i32 %lnot.ext158, 0
  %lnot171 = xor i1 %tobool170, true
  %lnot173 = xor i1 %lnot171, true
  %lnot.ext174 = zext i1 %lnot173 to i32
  %conv175 = sext i32 %lnot.ext174 to i64
  %expval176 = call i64 @llvm.expect.i64(i64 %conv175, i64 0)
  %tobool177 = icmp ne i64 %expval176, 0
  br i1 %tobool177, label %cleanup, label %if.end179

if.end179:                                        ; preds = %if.end168
  %interface_modes180 = getelementptr inbounds %struct.wiphy, %struct.wiphy* %wiphy, i32 0, i32 8
  %33 = load i16, i16* %interface_modes180, align 16, !tbaa !139
  %conv181 = zext i16 %33 to i64
  %and182 = and i64 %conv181, -5983
  %tobool183 = icmp ne i64 %and182, 0
  br i1 %tobool183, label %if.then184, label %if.end185

if.then184:                                       ; preds = %if.end179
  %regulatory_flags = getelementptr inbounds %struct.wiphy, %struct.wiphy* %wiphy, i32 0, i32 11
  %34 = load i32, i32* %regulatory_flags, align 8, !tbaa !150
  %or = or i32 %34, 64
  store i32 %or, i32* %regulatory_flags, align 8, !tbaa !150
  br label %if.end185

if.end185:                                        ; preds = %if.then184, %if.end179
  %regulatory_flags187 = getelementptr inbounds %struct.wiphy, %struct.wiphy* %wiphy, i32 0, i32 11
  %35 = load i32, i32* %regulatory_flags187, align 8, !tbaa !150
  %and188 = and i32 %35, 128
  %tobool189 = icmp ne i32 %and188, 0
  br i1 %tobool189, label %land.rhs190, label %land.end194

land.rhs190:                                      ; preds = %if.end185
  %regulatory_flags191 = getelementptr inbounds %struct.wiphy, %struct.wiphy* %wiphy, i32 0, i32 11
  %36 = load i32, i32* %regulatory_flags191, align 8, !tbaa !150
  %and192 = and i32 %36, 27
  %tobool193 = icmp ne i32 %and192, 0
  br label %land.end194

land.end194:                                      ; preds = %land.rhs190, %if.end185
  %37 = phi i1 [ false, %if.end185 ], [ %tobool193, %land.rhs190 ]
  %lnot195 = xor i1 %37, true
  %lnot197 = xor i1 %lnot195, true
  %lnot.ext198 = zext i1 %lnot197 to i32
  %tobool199 = icmp ne i32 %lnot.ext198, 0
  %lnot200 = xor i1 %tobool199, true
  %lnot202 = xor i1 %lnot200, true
  %lnot.ext203 = zext i1 %lnot202 to i32
  %conv204 = sext i32 %lnot.ext203 to i64
  %expval205 = call i64 @llvm.expect.i64(i64 %conv204, i64 0)
  %tobool206 = icmp ne i64 %expval205, 0
  br i1 %tobool206, label %if.then207, label %if.end208

if.then207:                                       ; preds = %land.end194
  call void @warn_slowpath_null(i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.1, i32 0, i32 0), i32 658)
  br label %if.end208

if.end208:                                        ; preds = %if.then207, %land.end194
  %tobool210 = icmp ne i32 %lnot.ext198, 0
  %lnot211 = xor i1 %tobool210, true
  %lnot213 = xor i1 %lnot211, true
  %lnot.ext214 = zext i1 %lnot213 to i32
  %conv215 = sext i32 %lnot.ext214 to i64
  %expval216 = call i64 @llvm.expect.i64(i64 %conv215, i64 0)
  %tobool217 = icmp ne i64 %expval216, 0
  br i1 %tobool217, label %cleanup, label %if.end219

if.end219:                                        ; preds = %if.end208
  %coalesce = getelementptr inbounds %struct.wiphy, %struct.wiphy* %wiphy, i32 0, i32 57
  %38 = load %struct.wiphy_coalesce_support*, %struct.wiphy_coalesce_support** %coalesce, align 16, !tbaa !151
  %tobool221 = icmp ne %struct.wiphy_coalesce_support* %38, null
  br i1 %tobool221, label %land.lhs.true222, label %land.end238

land.lhs.true222:                                 ; preds = %if.end219
  %coalesce223 = getelementptr inbounds %struct.wiphy, %struct.wiphy* %wiphy, i32 0, i32 57
  %39 = load %struct.wiphy_coalesce_support*, %struct.wiphy_coalesce_support** %coalesce223, align 16, !tbaa !151
  %n_rules = getelementptr inbounds %struct.wiphy_coalesce_support, %struct.wiphy_coalesce_support* %39, i32 0, i32 0
  %40 = load i32, i32* %n_rules, align 4, !tbaa !152
  %tobool224 = icmp ne i32 %40, 0
  br i1 %tobool224, label %lor.lhs.false225, label %land.rhs229

lor.lhs.false225:                                 ; preds = %land.lhs.true222
  %coalesce226 = getelementptr inbounds %struct.wiphy, %struct.wiphy* %wiphy, i32 0, i32 57
  %41 = load %struct.wiphy_coalesce_support*, %struct.wiphy_coalesce_support** %coalesce226, align 16, !tbaa !151
  %n_patterns227 = getelementptr inbounds %struct.wiphy_coalesce_support, %struct.wiphy_coalesce_support* %41, i32 0, i32 2
  %42 = load i32, i32* %n_patterns227, align 4, !tbaa !154
  %tobool228 = icmp ne i32 %42, 0
  br i1 %tobool228, label %land.end238, label %land.rhs229

land.rhs229:                                      ; preds = %lor.lhs.false225, %land.lhs.true222
  %coalesce230 = getelementptr inbounds %struct.wiphy, %struct.wiphy* %wiphy, i32 0, i32 57
  %43 = load %struct.wiphy_coalesce_support*, %struct.wiphy_coalesce_support** %coalesce230, align 16, !tbaa !151
  %pattern_min_len = getelementptr inbounds %struct.wiphy_coalesce_support, %struct.wiphy_coalesce_support* %43, i32 0, i32 4
  %44 = load i32, i32* %pattern_min_len, align 4, !tbaa !155
  %tobool231 = icmp ne i32 %44, 0
  br i1 %tobool231, label %lor.rhs232, label %land.end238

lor.rhs232:                                       ; preds = %land.rhs229
  %coalesce233 = getelementptr inbounds %struct.wiphy, %struct.wiphy* %wiphy, i32 0, i32 57
  %45 = load %struct.wiphy_coalesce_support*, %struct.wiphy_coalesce_support** %coalesce233, align 16, !tbaa !151
  %pattern_min_len234 = getelementptr inbounds %struct.wiphy_coalesce_support, %struct.wiphy_coalesce_support* %45, i32 0, i32 4
  %46 = load i32, i32* %pattern_min_len234, align 4, !tbaa !155
  %coalesce235 = getelementptr inbounds %struct.wiphy, %struct.wiphy* %wiphy, i32 0, i32 57
  %47 = load %struct.wiphy_coalesce_support*, %struct.wiphy_coalesce_support** %coalesce235, align 16, !tbaa !151
  %pattern_max_len = getelementptr inbounds %struct.wiphy_coalesce_support, %struct.wiphy_coalesce_support* %47, i32 0, i32 3
  %48 = load i32, i32* %pattern_max_len, align 4, !tbaa !156
  %cmp = icmp sgt i32 %46, %48
  br label %land.end238

land.end238:                                      ; preds = %land.rhs229, %lor.rhs232, %lor.lhs.false225, %if.end219
  %49 = phi i1 [ false, %lor.lhs.false225 ], [ false, %if.end219 ], [ true, %land.rhs229 ], [ %cmp, %lor.rhs232 ]
  %lnot239 = xor i1 %49, true
  %lnot241 = xor i1 %lnot239, true
  %lnot.ext242 = zext i1 %lnot241 to i32
  %tobool243 = icmp ne i32 %lnot.ext242, 0
  %lnot244 = xor i1 %tobool243, true
  %lnot246 = xor i1 %lnot244, true
  %lnot.ext247 = zext i1 %lnot246 to i32
  %conv248 = sext i32 %lnot.ext247 to i64
  %expval249 = call i64 @llvm.expect.i64(i64 %conv248, i64 0)
  %tobool250 = icmp ne i64 %expval249, 0
  br i1 %tobool250, label %if.then251, label %if.end252

if.then251:                                       ; preds = %land.end238
  call void @warn_slowpath_null(i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.1, i32 0, i32 0), i32 666)
  br label %if.end252

if.end252:                                        ; preds = %if.then251, %land.end238
  %tobool254 = icmp ne i32 %lnot.ext242, 0
  %lnot255 = xor i1 %tobool254, true
  %lnot257 = xor i1 %lnot255, true
  %lnot.ext258 = zext i1 %lnot257 to i32
  %conv259 = sext i32 %lnot.ext258 to i64
  %expval260 = call i64 @llvm.expect.i64(i64 %conv259, i64 0)
  %tobool261 = icmp ne i64 %expval260, 0
  br i1 %tobool261, label %cleanup, label %if.end263

if.end263:                                        ; preds = %if.end252
  %ap_sme_capa = getelementptr inbounds %struct.wiphy, %struct.wiphy* %wiphy, i32 0, i32 14
  %50 = load i32, i32* %ap_sme_capa, align 4, !tbaa !157
  %tobool265 = icmp ne i32 %50, 0
  br i1 %tobool265, label %land.rhs266, label %land.end272

land.rhs266:                                      ; preds = %if.end263
  %flags267 = getelementptr inbounds %struct.wiphy, %struct.wiphy* %wiphy, i32 0, i32 10
  %51 = load i32, i32* %flags267, align 4, !tbaa !158
  %and268 = and i32 %51, 131072
  %tobool269 = icmp ne i32 %and268, 0
  %lnot270 = xor i1 %tobool269, true
  br label %land.end272

land.end272:                                      ; preds = %land.rhs266, %if.end263
  %52 = phi i1 [ false, %if.end263 ], [ %lnot270, %land.rhs266 ]
  %lnot273 = xor i1 %52, true
  %lnot275 = xor i1 %lnot273, true
  %lnot.ext276 = zext i1 %lnot275 to i32
  %tobool277 = icmp ne i32 %lnot.ext276, 0
  %lnot278 = xor i1 %tobool277, true
  %lnot280 = xor i1 %lnot278, true
  %lnot.ext281 = zext i1 %lnot280 to i32
  %conv282 = sext i32 %lnot.ext281 to i64
  %expval283 = call i64 @llvm.expect.i64(i64 %conv282, i64 0)
  %tobool284 = icmp ne i64 %expval283, 0
  br i1 %tobool284, label %if.then285, label %if.end286

if.then285:                                       ; preds = %land.end272
  call void @warn_slowpath_null(i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.1, i32 0, i32 0), i32 670)
  br label %if.end286

if.end286:                                        ; preds = %if.then285, %land.end272
  %tobool288 = icmp ne i32 %lnot.ext276, 0
  %lnot289 = xor i1 %tobool288, true
  %lnot291 = xor i1 %lnot289, true
  %lnot.ext292 = zext i1 %lnot291 to i32
  %conv293 = sext i32 %lnot.ext292 to i64
  %expval294 = call i64 @llvm.expect.i64(i64 %conv293, i64 0)
  %tobool295 = icmp ne i64 %expval294, 0
  br i1 %tobool295, label %cleanup, label %if.end297

if.end297:                                        ; preds = %if.end286
  %addresses = getelementptr inbounds %struct.wiphy, %struct.wiphy* %wiphy, i32 0, i32 2
  %53 = load %struct.mac_address*, %struct.mac_address** %addresses, align 16, !tbaa !159
  %tobool299 = icmp ne %struct.mac_address* %53, null
  br i1 %tobool299, label %land.rhs300, label %land.end304

land.rhs300:                                      ; preds = %if.end297
  %n_addresses = getelementptr inbounds %struct.wiphy, %struct.wiphy* %wiphy, i32 0, i32 7
  %54 = load i16, i16* %n_addresses, align 2, !tbaa !160
  %tobool301 = icmp ne i16 %54, 0
  %lnot302 = xor i1 %tobool301, true
  br label %land.end304

land.end304:                                      ; preds = %land.rhs300, %if.end297
  %55 = phi i1 [ false, %if.end297 ], [ %lnot302, %land.rhs300 ]
  %lnot305 = xor i1 %55, true
  %lnot307 = xor i1 %lnot305, true
  %lnot.ext308 = zext i1 %lnot307 to i32
  %tobool309 = icmp ne i32 %lnot.ext308, 0
  %lnot310 = xor i1 %tobool309, true
  %lnot312 = xor i1 %lnot310, true
  %lnot.ext313 = zext i1 %lnot312 to i32
  %conv314 = sext i32 %lnot.ext313 to i64
  %expval315 = call i64 @llvm.expect.i64(i64 %conv314, i64 0)
  %tobool316 = icmp ne i64 %expval315, 0
  br i1 %tobool316, label %if.then317, label %if.end318

if.then317:                                       ; preds = %land.end304
  call void @warn_slowpath_null(i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.1, i32 0, i32 0), i32 673)
  br label %if.end318

if.end318:                                        ; preds = %if.then317, %land.end304
  %tobool320 = icmp ne i32 %lnot.ext308, 0
  %lnot321 = xor i1 %tobool320, true
  %lnot323 = xor i1 %lnot321, true
  %lnot.ext324 = zext i1 %lnot323 to i32
  %conv325 = sext i32 %lnot.ext324 to i64
  %expval326 = call i64 @llvm.expect.i64(i64 %conv325, i64 0)
  %tobool327 = icmp ne i64 %expval326, 0
  br i1 %tobool327, label %cleanup, label %if.end329

if.end329:                                        ; preds = %if.end318
  %addresses331 = getelementptr inbounds %struct.wiphy, %struct.wiphy* %wiphy, i32 0, i32 2
  %56 = load %struct.mac_address*, %struct.mac_address** %addresses331, align 16, !tbaa !159
  %tobool332 = icmp ne %struct.mac_address* %56, null
  br i1 %tobool332, label %land.lhs.true333, label %land.end342

land.lhs.true333:                                 ; preds = %if.end329
  %perm_addr = getelementptr inbounds %struct.wiphy, %struct.wiphy* %wiphy, i32 0, i32 0
  %arraydecay = getelementptr inbounds [6 x i8], [6 x i8]* %perm_addr, i32 0, i32 0
  %call334 = call zeroext i1 @is_zero_ether_addr(i8* %arraydecay)
  br i1 %call334, label %land.end342, label %land.rhs335

land.rhs335:                                      ; preds = %land.lhs.true333
  %perm_addr336 = getelementptr inbounds %struct.wiphy, %struct.wiphy* %wiphy, i32 0, i32 0
  %arraydecay337 = getelementptr inbounds [6 x i8], [6 x i8]* %perm_addr336, i32 0, i32 0
  %addresses338 = getelementptr inbounds %struct.wiphy, %struct.wiphy* %wiphy, i32 0, i32 2
  %57 = load %struct.mac_address*, %struct.mac_address** %addresses338, align 16, !tbaa !159
  %arrayidx = getelementptr inbounds %struct.mac_address, %struct.mac_address* %57, i64 0
  %addr = getelementptr inbounds %struct.mac_address, %struct.mac_address* %arrayidx, i32 0, i32 0
  %arraydecay339 = getelementptr inbounds [6 x i8], [6 x i8]* %addr, i32 0, i32 0
  %call340 = call i32 @memcmp(i8* %arraydecay337, i8* %arraydecay339, i64 6)
  %tobool341 = icmp ne i32 %call340, 0
  br label %land.end342

land.end342:                                      ; preds = %land.rhs335, %land.lhs.true333, %if.end329
  %58 = phi i1 [ false, %land.lhs.true333 ], [ false, %if.end329 ], [ %tobool341, %land.rhs335 ]
  %lnot343 = xor i1 %58, true
  %lnot345 = xor i1 %lnot343, true
  %lnot.ext346 = zext i1 %lnot345 to i32
  %tobool347 = icmp ne i32 %lnot.ext346, 0
  %lnot348 = xor i1 %tobool347, true
  %lnot350 = xor i1 %lnot348, true
  %lnot.ext351 = zext i1 %lnot350 to i32
  %conv352 = sext i32 %lnot.ext351 to i64
  %expval353 = call i64 @llvm.expect.i64(i64 %conv352, i64 0)
  %tobool354 = icmp ne i64 %expval353, 0
  br i1 %tobool354, label %if.then355, label %if.end356

if.then355:                                       ; preds = %land.end342
  call void @warn_slowpath_null(i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.1, i32 0, i32 0), i32 679)
  br label %if.end356

if.end356:                                        ; preds = %if.then355, %land.end342
  %tobool358 = icmp ne i32 %lnot.ext346, 0
  %lnot359 = xor i1 %tobool358, true
  %lnot361 = xor i1 %lnot359, true
  %lnot.ext362 = zext i1 %lnot361 to i32
  %conv363 = sext i32 %lnot.ext362 to i64
  %expval364 = call i64 @llvm.expect.i64(i64 %conv363, i64 0)
  %tobool365 = icmp ne i64 %expval364, 0
  br i1 %tobool365, label %cleanup, label %if.end367

if.end367:                                        ; preds = %if.end356
  %max_acl_mac_addrs = getelementptr inbounds %struct.wiphy, %struct.wiphy* %wiphy, i32 0, i32 9
  %59 = load i16, i16* %max_acl_mac_addrs, align 2, !tbaa !161
  %conv369 = zext i16 %59 to i32
  %tobool370 = icmp ne i32 %conv369, 0
  br i1 %tobool370, label %land.rhs371, label %land.end381

land.rhs371:                                      ; preds = %if.end367
  %flags372 = getelementptr inbounds %struct.wiphy, %struct.wiphy* %wiphy, i32 0, i32 10
  %60 = load i32, i32* %flags372, align 4, !tbaa !158
  %and373 = and i32 %60, 131072
  %tobool374 = icmp ne i32 %and373, 0
  br i1 %tobool374, label %lor.rhs375, label %land.end381

lor.rhs375:                                       ; preds = %land.rhs371
  %ops376 = getelementptr inbounds %struct.cfg80211_registered_device, %struct.cfg80211_registered_device* %call, i32 0, i32 0
  %61 = load %struct.cfg80211_ops*, %struct.cfg80211_ops** %ops376, align 32, !tbaa !68
  %set_mac_acl = getelementptr inbounds %struct.cfg80211_ops, %struct.cfg80211_ops* %61, i32 0, i32 78
  %62 = load i32 (%struct.wiphy*, %struct.net_device*, %struct.cfg80211_acl_data*)*, i32 (%struct.wiphy*, %struct.net_device*, %struct.cfg80211_acl_data*)** %set_mac_acl, align 8, !tbaa !162
  %tobool377 = icmp ne i32 (%struct.wiphy*, %struct.net_device*, %struct.cfg80211_acl_data*)* %62, null
  %lnot378 = xor i1 %tobool377, true
  br label %land.end381

land.end381:                                      ; preds = %land.rhs371, %lor.rhs375, %if.end367
  %63 = phi i1 [ false, %if.end367 ], [ true, %land.rhs371 ], [ %lnot378, %lor.rhs375 ]
  %lnot382 = xor i1 %63, true
  %lnot384 = xor i1 %lnot382, true
  %lnot.ext385 = zext i1 %lnot384 to i32
  %tobool386 = icmp ne i32 %lnot.ext385, 0
  %lnot387 = xor i1 %tobool386, true
  %lnot389 = xor i1 %lnot387, true
  %lnot.ext390 = zext i1 %lnot389 to i32
  %conv391 = sext i32 %lnot.ext390 to i64
  %expval392 = call i64 @llvm.expect.i64(i64 %conv391, i64 0)
  %tobool393 = icmp ne i64 %expval392, 0
  br i1 %tobool393, label %if.then394, label %if.end395

if.then394:                                       ; preds = %land.end381
  call void @warn_slowpath_null(i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.1, i32 0, i32 0), i32 684)
  br label %if.end395

if.end395:                                        ; preds = %if.then394, %land.end381
  %tobool397 = icmp ne i32 %lnot.ext385, 0
  %lnot398 = xor i1 %tobool397, true
  %lnot400 = xor i1 %lnot398, true
  %lnot.ext401 = zext i1 %lnot400 to i32
  %conv402 = sext i32 %lnot.ext401 to i64
  %expval403 = call i64 @llvm.expect.i64(i64 %conv402, i64 0)
  %tobool404 = icmp ne i64 %expval403, 0
  br i1 %tobool404, label %cleanup, label %if.end406

if.end406:                                        ; preds = %if.end395
  %bss_select_support = getelementptr inbounds %struct.wiphy, %struct.wiphy* %wiphy, i32 0, i32 65
  %64 = load i32, i32* %bss_select_support, align 4, !tbaa !163
  %tobool408 = icmp ne i32 %64, 0
  br i1 %tobool408, label %land.rhs409, label %land.end414

land.rhs409:                                      ; preds = %if.end406
  %bss_select_support410 = getelementptr inbounds %struct.wiphy, %struct.wiphy* %wiphy, i32 0, i32 65
  %65 = load i32, i32* %bss_select_support410, align 4, !tbaa !163
  %conv411 = zext i32 %65 to i64
  %and412 = and i64 %conv411, -15
  %tobool413 = icmp ne i64 %and412, 0
  br label %land.end414

land.end414:                                      ; preds = %land.rhs409, %if.end406
  %66 = phi i1 [ false, %if.end406 ], [ %tobool413, %land.rhs409 ]
  %lnot415 = xor i1 %66, true
  %lnot417 = xor i1 %lnot415, true
  %lnot.ext418 = zext i1 %lnot417 to i32
  %tobool419 = icmp ne i32 %lnot.ext418, 0
  %lnot420 = xor i1 %tobool419, true
  %lnot422 = xor i1 %lnot420, true
  %lnot.ext423 = zext i1 %lnot422 to i32
  %conv424 = sext i32 %lnot.ext423 to i64
  %expval425 = call i64 @llvm.expect.i64(i64 %conv424, i64 0)
  %tobool426 = icmp ne i64 %expval425, 0
  br i1 %tobool426, label %if.then427, label %if.end428

if.then427:                                       ; preds = %land.end414
  call void @warn_slowpath_null(i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.1, i32 0, i32 0), i32 691)
  br label %if.end428

if.end428:                                        ; preds = %if.then427, %land.end414
  %tobool430 = icmp ne i32 %lnot.ext418, 0
  %lnot431 = xor i1 %tobool430, true
  %lnot433 = xor i1 %lnot431, true
  %lnot.ext434 = zext i1 %lnot433 to i32
  %conv435 = sext i32 %lnot.ext434 to i64
  %expval436 = call i64 @llvm.expect.i64(i64 %conv435, i64 0)
  %tobool437 = icmp ne i64 %expval436, 0
  br i1 %tobool437, label %cleanup, label %if.end439

if.end439:                                        ; preds = %if.end428
  %addresses440 = getelementptr inbounds %struct.wiphy, %struct.wiphy* %wiphy, i32 0, i32 2
  %67 = load %struct.mac_address*, %struct.mac_address** %addresses440, align 16, !tbaa !159
  %tobool441 = icmp ne %struct.mac_address* %67, null
  br i1 %tobool441, label %if.then442, label %if.end461

if.then442:                                       ; preds = %if.end439
  %cmp443 = icmp uge i64 6, 64
  %perm_addr446 = getelementptr inbounds %struct.wiphy, %struct.wiphy* %wiphy, i32 0, i32 0
  %arraydecay447 = getelementptr inbounds [6 x i8], [6 x i8]* %perm_addr446, i32 0, i32 0
  %addresses448 = getelementptr inbounds %struct.wiphy, %struct.wiphy* %wiphy, i32 0, i32 2
  %68 = load %struct.mac_address*, %struct.mac_address** %addresses448, align 16, !tbaa !159
  %arrayidx449 = getelementptr inbounds %struct.mac_address, %struct.mac_address* %68, i64 0
  %addr450 = getelementptr inbounds %struct.mac_address, %struct.mac_address* %arrayidx449, i32 0, i32 0
  %arraydecay451 = getelementptr inbounds [6 x i8], [6 x i8]* %addr450, i32 0, i32 0
  br i1 %cmp443, label %if.then445, label %if.else

if.then445:                                       ; preds = %if.then442
  %call452 = call i8* @__memcpy(i8* %arraydecay447, i8* %arraydecay451, i64 6)
  br label %if.end461

if.else:                                          ; preds = %if.then442
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %arraydecay447, i8* %arraydecay451, i64 6, i32 1, i1 false)
  br label %if.end461

if.end461:                                        ; preds = %if.then445, %if.else, %if.end439
  %tobool463 = icmp ne i16 %0, 0
  %lnot464 = xor i1 %tobool463, true
  %lnot466 = xor i1 %lnot464, true
  %lnot468 = xor i1 %lnot466, true
  %lnot.ext469 = zext i1 %lnot468 to i32
  %tobool470 = icmp ne i32 %lnot.ext469, 0
  %lnot471 = xor i1 %tobool470, true
  %lnot473 = xor i1 %lnot471, true
  %lnot.ext474 = zext i1 %lnot473 to i32
  %conv475 = sext i32 %lnot.ext474 to i64
  %expval476 = call i64 @llvm.expect.i64(i64 %conv475, i64 0)
  %tobool477 = icmp ne i64 %expval476, 0
  br i1 %tobool477, label %if.then478, label %if.end479

if.then478:                                       ; preds = %if.end461
  call void @warn_slowpath_null(i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.1, i32 0, i32 0), i32 698)
  br label %if.end479

if.end479:                                        ; preds = %if.then478, %if.end461
  %tobool481 = icmp ne i32 %lnot.ext469, 0
  %lnot482 = xor i1 %tobool481, true
  %lnot484 = xor i1 %lnot482, true
  %lnot.ext485 = zext i1 %lnot484 to i32
  %conv486 = sext i32 %lnot.ext485 to i64
  %expval487 = call i64 @llvm.expect.i64(i64 %conv486, i64 0)
  %conv488 = zext i16 %0 to i32
  %and489 = and i32 %conv488, 8190
  %conv490 = trunc i32 %and489 to i16
  %conv492 = zext i16 %conv490 to i32
  %interface_modes493 = getelementptr inbounds %struct.wiphy, %struct.wiphy* %wiphy, i32 0, i32 8
  %69 = load i16, i16* %interface_modes493, align 16, !tbaa !139
  %conv494 = zext i16 %69 to i32
  %cmp495 = icmp ne i32 %conv492, %conv494
  %lnot497 = xor i1 %cmp495, true
  %lnot499 = xor i1 %lnot497, true
  %lnot.ext500 = zext i1 %lnot499 to i32
  %tobool501 = icmp ne i32 %lnot.ext500, 0
  %lnot502 = xor i1 %tobool501, true
  %lnot504 = xor i1 %lnot502, true
  %lnot.ext505 = zext i1 %lnot504 to i32
  %conv506 = sext i32 %lnot.ext505 to i64
  %expval507 = call i64 @llvm.expect.i64(i64 %conv506, i64 0)
  %tobool508 = icmp ne i64 %expval507, 0
  br i1 %tobool508, label %if.then509, label %if.end510

if.then509:                                       ; preds = %if.end479
  call void @warn_slowpath_null(i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.1, i32 0, i32 0), i32 700)
  br label %if.end510

if.end510:                                        ; preds = %if.then509, %if.end479
  %tobool512 = icmp ne i32 %lnot.ext500, 0
  %lnot513 = xor i1 %tobool512, true
  %lnot515 = xor i1 %lnot513, true
  %lnot.ext516 = zext i1 %lnot515 to i32
  %conv517 = sext i32 %lnot.ext516 to i64
  %expval518 = call i64 @llvm.expect.i64(i64 %conv517, i64 0)
  %tobool519 = icmp ne i64 %expval518, 0
  br i1 %tobool519, label %if.then520, label %if.end522

if.then520:                                       ; preds = %if.end510
  %interface_modes521 = getelementptr inbounds %struct.wiphy, %struct.wiphy* %wiphy, i32 0, i32 8
  store i16 %conv490, i16* %interface_modes521, align 16, !tbaa !139
  br label %if.end522

if.end522:                                        ; preds = %if.then520, %if.end510
  %call523 = call i32 @wiphy_verify_combinations(%struct.wiphy* %wiphy)
  %tobool524 = icmp ne i32 %call523, 0
  br i1 %tobool524, label %cleanup, label %if.end526

if.end526:                                        ; preds = %if.end522
  br label %for.cond

for.cond:                                         ; preds = %for.inc668, %if.end526
  %have_band.0 = phi i8 [ 0, %if.end526 ], [ %have_band.1, %for.inc668 ]
  %band.0 = phi i32 [ 0, %if.end526 ], [ %inc669, %for.inc668 ]
  %cmp527 = icmp ult i32 %band.0, 3
  br i1 %cmp527, label %for.body, label %for.end670

for.body:                                         ; preds = %for.cond
  %bands = getelementptr inbounds %struct.wiphy, %struct.wiphy* %wiphy, i32 0, i32 47
  %idxprom = zext i32 %band.0 to i64
  %arrayidx529 = getelementptr inbounds [3 x %struct.ieee80211_supported_band*], [3 x %struct.ieee80211_supported_band*]* %bands, i64 0, i64 %idxprom
  %70 = load %struct.ieee80211_supported_band*, %struct.ieee80211_supported_band** %arrayidx529, align 8, !tbaa !2
  %tobool530 = icmp ne %struct.ieee80211_supported_band* %70, null
  br i1 %tobool530, label %if.end532, label %for.inc668

if.end532:                                        ; preds = %for.body
  %band533 = getelementptr inbounds %struct.ieee80211_supported_band, %struct.ieee80211_supported_band* %70, i32 0, i32 2
  store i32 %band.0, i32* %band533, align 8, !tbaa !164
  %n_channels = getelementptr inbounds %struct.ieee80211_supported_band, %struct.ieee80211_supported_band* %70, i32 0, i32 3
  %71 = load i32, i32* %n_channels, align 4, !tbaa !170
  %tobool535 = icmp ne i32 %71, 0
  %lnot536 = xor i1 %tobool535, true
  %lnot538 = xor i1 %lnot536, true
  %lnot540 = xor i1 %lnot538, true
  %lnot.ext541 = zext i1 %lnot540 to i32
  %tobool542 = icmp ne i32 %lnot.ext541, 0
  %lnot543 = xor i1 %tobool542, true
  %lnot545 = xor i1 %lnot543, true
  %lnot.ext546 = zext i1 %lnot545 to i32
  %conv547 = sext i32 %lnot.ext546 to i64
  %expval548 = call i64 @llvm.expect.i64(i64 %conv547, i64 0)
  %tobool549 = icmp ne i64 %expval548, 0
  br i1 %tobool549, label %if.then550, label %if.end551

if.then550:                                       ; preds = %if.end532
  call void @warn_slowpath_null(i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.1, i32 0, i32 0), i32 714)
  br label %if.end551

if.end551:                                        ; preds = %if.then550, %if.end532
  %tobool553 = icmp ne i32 %lnot.ext541, 0
  %lnot554 = xor i1 %tobool553, true
  %lnot556 = xor i1 %lnot554, true
  %lnot.ext557 = zext i1 %lnot556 to i32
  %conv558 = sext i32 %lnot.ext557 to i64
  %expval559 = call i64 @llvm.expect.i64(i64 %conv558, i64 0)
  %tobool560 = icmp ne i64 %expval559, 0
  br i1 %tobool560, label %cleanup, label %if.end562

if.end562:                                        ; preds = %if.end551
  %cmp564 = icmp ne i32 %band.0, 2
  br i1 %cmp564, label %land.rhs566, label %land.end570

land.rhs566:                                      ; preds = %if.end562
  %n_bitrates = getelementptr inbounds %struct.ieee80211_supported_band, %struct.ieee80211_supported_band* %70, i32 0, i32 4
  %72 = load i32, i32* %n_bitrates, align 8, !tbaa !171
  %tobool567 = icmp ne i32 %72, 0
  %lnot568 = xor i1 %tobool567, true
  br label %land.end570

land.end570:                                      ; preds = %land.rhs566, %if.end562
  %73 = phi i1 [ false, %if.end562 ], [ %lnot568, %land.rhs566 ]
  %lnot571 = xor i1 %73, true
  %lnot573 = xor i1 %lnot571, true
  %lnot.ext574 = zext i1 %lnot573 to i32
  %tobool575 = icmp ne i32 %lnot.ext574, 0
  %lnot576 = xor i1 %tobool575, true
  %lnot578 = xor i1 %lnot576, true
  %lnot.ext579 = zext i1 %lnot578 to i32
  %conv580 = sext i32 %lnot.ext579 to i64
  %expval581 = call i64 @llvm.expect.i64(i64 %conv580, i64 0)
  %tobool582 = icmp ne i64 %expval581, 0
  br i1 %tobool582, label %if.then583, label %if.end584

if.then583:                                       ; preds = %land.end570
  call void @warn_slowpath_null(i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.1, i32 0, i32 0), i32 721)
  br label %if.end584

if.end584:                                        ; preds = %if.then583, %land.end570
  %tobool586 = icmp ne i32 %lnot.ext574, 0
  %lnot587 = xor i1 %tobool586, true
  %lnot589 = xor i1 %lnot587, true
  %lnot.ext590 = zext i1 %lnot589 to i32
  %conv591 = sext i32 %lnot.ext590 to i64
  %expval592 = call i64 @llvm.expect.i64(i64 %conv591, i64 0)
  %tobool593 = icmp ne i64 %expval592, 0
  br i1 %tobool593, label %cleanup, label %if.end595

if.end595:                                        ; preds = %if.end584
  %74 = load i8, i8* @cfg80211_disable_40mhz_24ghz, align 1, !tbaa !172, !range !66
  %tobool596 = trunc i8 %74 to i1
  %cmp599 = icmp eq i32 %band.0, 0
  %or.cond = and i1 %tobool596, %cmp599
  br i1 %or.cond, label %land.lhs.true601, label %if.end614

land.lhs.true601:                                 ; preds = %if.end595
  %ht_cap = getelementptr inbounds %struct.ieee80211_supported_band, %struct.ieee80211_supported_band* %70, i32 0, i32 5
  %ht_supported = getelementptr inbounds %struct.ieee80211_sta_ht_cap, %struct.ieee80211_sta_ht_cap* %ht_cap, i32 0, i32 1
  %75 = load i8, i8* %ht_supported, align 2, !tbaa !173, !range !66
  %tobool602 = trunc i8 %75 to i1
  br i1 %tobool602, label %if.then604, label %if.end614

if.then604:                                       ; preds = %land.lhs.true601
  %ht_cap605 = getelementptr inbounds %struct.ieee80211_supported_band, %struct.ieee80211_supported_band* %70, i32 0, i32 5
  %cap = getelementptr inbounds %struct.ieee80211_sta_ht_cap, %struct.ieee80211_sta_ht_cap* %ht_cap605, i32 0, i32 0
  %76 = load i16, i16* %cap, align 4, !tbaa !174
  %conv606 = zext i16 %76 to i32
  %and607 = and i32 %conv606, -3
  %conv608 = trunc i32 %and607 to i16
  store i16 %conv608, i16* %cap, align 4, !tbaa !174
  %ht_cap609 = getelementptr inbounds %struct.ieee80211_supported_band, %struct.ieee80211_supported_band* %70, i32 0, i32 5
  %cap610 = getelementptr inbounds %struct.ieee80211_sta_ht_cap, %struct.ieee80211_sta_ht_cap* %ht_cap609, i32 0, i32 0
  %77 = load i16, i16* %cap610, align 4, !tbaa !174
  %conv611 = zext i16 %77 to i32
  %and612 = and i32 %conv611, -65
  %conv613 = trunc i32 %and612 to i16
  store i16 %conv613, i16* %cap610, align 4, !tbaa !174
  br label %if.end614

if.end614:                                        ; preds = %if.then604, %land.lhs.true601, %if.end595
  %n_bitrates616 = getelementptr inbounds %struct.ieee80211_supported_band, %struct.ieee80211_supported_band* %70, i32 0, i32 4
  %78 = load i32, i32* %n_bitrates616, align 8, !tbaa !171
  %cmp617 = icmp sgt i32 %78, 32
  %lnot619 = xor i1 %cmp617, true
  %lnot621 = xor i1 %lnot619, true
  %lnot.ext622 = zext i1 %lnot621 to i32
  %tobool623 = icmp ne i32 %lnot.ext622, 0
  %lnot624 = xor i1 %tobool623, true
  %lnot626 = xor i1 %lnot624, true
  %lnot.ext627 = zext i1 %lnot626 to i32
  %conv628 = sext i32 %lnot.ext627 to i64
  %expval629 = call i64 @llvm.expect.i64(i64 %conv628, i64 0)
  %tobool630 = icmp ne i64 %expval629, 0
  br i1 %tobool630, label %if.then631, label %if.end632

if.then631:                                       ; preds = %if.end614
  call void @warn_slowpath_null(i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.1, i32 0, i32 0), i32 741)
  br label %if.end632

if.end632:                                        ; preds = %if.then631, %if.end614
  %tobool634 = icmp ne i32 %lnot.ext622, 0
  %lnot635 = xor i1 %tobool634, true
  %lnot637 = xor i1 %lnot635, true
  %lnot.ext638 = zext i1 %lnot637 to i32
  %conv639 = sext i32 %lnot.ext638 to i64
  %expval640 = call i64 @llvm.expect.i64(i64 %conv639, i64 0)
  %tobool641 = icmp ne i64 %expval640, 0
  br i1 %tobool641, label %cleanup, label %if.end643

if.end643:                                        ; preds = %if.end632
  br label %for.cond644

for.cond644:                                      ; preds = %for.body648, %if.end643
  %i.0 = phi i32 [ 0, %if.end643 ], [ %inc, %for.body648 ]
  %n_channels645 = getelementptr inbounds %struct.ieee80211_supported_band, %struct.ieee80211_supported_band* %70, i32 0, i32 3
  %79 = load i32, i32* %n_channels645, align 4, !tbaa !170
  %cmp646 = icmp slt i32 %i.0, %79
  br i1 %cmp646, label %for.body648, label %for.inc668

for.body648:                                      ; preds = %for.cond644
  %channels = getelementptr inbounds %struct.ieee80211_supported_band, %struct.ieee80211_supported_band* %70, i32 0, i32 0
  %80 = load %struct.ieee80211_channel*, %struct.ieee80211_channel** %channels, align 8, !tbaa !175
  %idxprom649 = sext i32 %i.0 to i64
  %arrayidx650 = getelementptr inbounds %struct.ieee80211_channel, %struct.ieee80211_channel* %80, i64 %idxprom649
  %flags651 = getelementptr inbounds %struct.ieee80211_channel, %struct.ieee80211_channel* %arrayidx650, i32 0, i32 3
  %81 = load i32, i32* %flags651, align 8, !tbaa !176
  %channels652 = getelementptr inbounds %struct.ieee80211_supported_band, %struct.ieee80211_supported_band* %70, i32 0, i32 0
  %82 = load %struct.ieee80211_channel*, %struct.ieee80211_channel** %channels652, align 8, !tbaa !175
  %idxprom653 = sext i32 %i.0 to i64
  %arrayidx654 = getelementptr inbounds %struct.ieee80211_channel, %struct.ieee80211_channel* %82, i64 %idxprom653
  %orig_flags = getelementptr inbounds %struct.ieee80211_channel, %struct.ieee80211_channel* %arrayidx654, i32 0, i32 8
  store i32 %81, i32* %orig_flags, align 4, !tbaa !178
  %channels655 = getelementptr inbounds %struct.ieee80211_supported_band, %struct.ieee80211_supported_band* %70, i32 0, i32 0
  %83 = load %struct.ieee80211_channel*, %struct.ieee80211_channel** %channels655, align 8, !tbaa !175
  %idxprom656 = sext i32 %i.0 to i64
  %arrayidx657 = getelementptr inbounds %struct.ieee80211_channel, %struct.ieee80211_channel* %83, i64 %idxprom656
  %orig_mag = getelementptr inbounds %struct.ieee80211_channel, %struct.ieee80211_channel* %arrayidx657, i32 0, i32 9
  store i32 2147483647, i32* %orig_mag, align 8, !tbaa !179
  %channels658 = getelementptr inbounds %struct.ieee80211_supported_band, %struct.ieee80211_supported_band* %70, i32 0, i32 0
  %84 = load %struct.ieee80211_channel*, %struct.ieee80211_channel** %channels658, align 8, !tbaa !175
  %idxprom659 = sext i32 %i.0 to i64
  %arrayidx660 = getelementptr inbounds %struct.ieee80211_channel, %struct.ieee80211_channel* %84, i64 %idxprom659
  %max_power = getelementptr inbounds %struct.ieee80211_channel, %struct.ieee80211_channel* %arrayidx660, i32 0, i32 5
  %85 = load i32, i32* %max_power, align 8, !tbaa !180
  %channels661 = getelementptr inbounds %struct.ieee80211_supported_band, %struct.ieee80211_supported_band* %70, i32 0, i32 0
  %86 = load %struct.ieee80211_channel*, %struct.ieee80211_channel** %channels661, align 8, !tbaa !175
  %idxprom662 = sext i32 %i.0 to i64
  %arrayidx663 = getelementptr inbounds %struct.ieee80211_channel, %struct.ieee80211_channel* %86, i64 %idxprom662
  %orig_mpwr = getelementptr inbounds %struct.ieee80211_channel, %struct.ieee80211_channel* %arrayidx663, i32 0, i32 10
  store i32 %85, i32* %orig_mpwr, align 4, !tbaa !181
  %channels664 = getelementptr inbounds %struct.ieee80211_supported_band, %struct.ieee80211_supported_band* %70, i32 0, i32 0
  %87 = load %struct.ieee80211_channel*, %struct.ieee80211_channel** %channels664, align 8, !tbaa !175
  %idxprom665 = sext i32 %i.0 to i64
  %arrayidx666 = getelementptr inbounds %struct.ieee80211_channel, %struct.ieee80211_channel* %87, i64 %idxprom665
  %band667 = getelementptr inbounds %struct.ieee80211_channel, %struct.ieee80211_channel* %arrayidx666, i32 0, i32 0
  store i32 %band.0, i32* %band667, align 8, !tbaa !182
  %inc = add nsw i32 %i.0, 1
  br label %for.cond644

for.inc668:                                       ; preds = %for.cond644, %for.body
  %have_band.1 = phi i8 [ %have_band.0, %for.body ], [ 1, %for.cond644 ]
  %inc669 = add i32 %band.0, 1
  br label %for.cond

for.end670:                                       ; preds = %for.cond
  %tobool671 = trunc i8 %have_band.0 to i1
  br i1 %tobool671, label %if.end692, label %if.then672

if.then672:                                       ; preds = %for.end670
  %tobool674 = icmp ne i32 1, 0
  %lnot675 = xor i1 %tobool674, true
  %lnot677 = xor i1 %lnot675, true
  %lnot.ext678 = zext i1 %lnot677 to i32
  %conv679 = sext i32 %lnot.ext678 to i64
  %expval680 = call i64 @llvm.expect.i64(i64 %conv679, i64 0)
  %tobool681 = icmp ne i64 %expval680, 0
  br i1 %tobool681, label %if.then682, label %if.end683

if.then682:                                       ; preds = %if.then672
  call void @warn_slowpath_null(i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.1, i32 0, i32 0), i32 757)
  br label %if.end683

if.end683:                                        ; preds = %if.then682, %if.then672
  %tobool685 = icmp ne i32 1, 0
  %lnot686 = xor i1 %tobool685, true
  %lnot688 = xor i1 %lnot686, true
  %lnot.ext689 = zext i1 %lnot688 to i32
  %conv690 = sext i32 %lnot.ext689 to i64
  %expval691 = call i64 @llvm.expect.i64(i64 %conv690, i64 0)
  br label %cleanup

if.end692:                                        ; preds = %for.end670
  %wiphy694 = getelementptr inbounds %struct.cfg80211_registered_device, %struct.cfg80211_registered_device* %call, i32 0, i32 42
  %wowlan695 = getelementptr inbounds %struct.wiphy, %struct.wiphy* %wiphy694, i32 0, i32 34
  %88 = load %struct.wiphy_wowlan_support*, %struct.wiphy_wowlan_support** %wowlan695, align 8, !tbaa !183
  %tobool696 = icmp ne %struct.wiphy_wowlan_support* %88, null
  br i1 %tobool696, label %land.lhs.true697, label %land.end717

land.lhs.true697:                                 ; preds = %if.end692
  %wiphy698 = getelementptr inbounds %struct.cfg80211_registered_device, %struct.cfg80211_registered_device* %call, i32 0, i32 42
  %wowlan699 = getelementptr inbounds %struct.wiphy, %struct.wiphy* %wiphy698, i32 0, i32 34
  %89 = load %struct.wiphy_wowlan_support*, %struct.wiphy_wowlan_support** %wowlan699, align 8, !tbaa !183
  %n_patterns700 = getelementptr inbounds %struct.wiphy_wowlan_support, %struct.wiphy_wowlan_support* %89, i32 0, i32 1
  %90 = load i32, i32* %n_patterns700, align 4, !tbaa !143
  %tobool701 = icmp ne i32 %90, 0
  br i1 %tobool701, label %land.rhs702, label %land.end717

land.rhs702:                                      ; preds = %land.lhs.true697
  %wiphy703 = getelementptr inbounds %struct.cfg80211_registered_device, %struct.cfg80211_registered_device* %call, i32 0, i32 42
  %wowlan704 = getelementptr inbounds %struct.wiphy, %struct.wiphy* %wiphy703, i32 0, i32 34
  %91 = load %struct.wiphy_wowlan_support*, %struct.wiphy_wowlan_support** %wowlan704, align 8, !tbaa !183
  %pattern_min_len705 = getelementptr inbounds %struct.wiphy_wowlan_support, %struct.wiphy_wowlan_support* %91, i32 0, i32 3
  %92 = load i32, i32* %pattern_min_len705, align 4, !tbaa !184
  %tobool706 = icmp ne i32 %92, 0
  br i1 %tobool706, label %lor.rhs707, label %land.end717

lor.rhs707:                                       ; preds = %land.rhs702
  %wiphy708 = getelementptr inbounds %struct.cfg80211_registered_device, %struct.cfg80211_registered_device* %call, i32 0, i32 42
  %wowlan709 = getelementptr inbounds %struct.wiphy, %struct.wiphy* %wiphy708, i32 0, i32 34
  %93 = load %struct.wiphy_wowlan_support*, %struct.wiphy_wowlan_support** %wowlan709, align 8, !tbaa !183
  %pattern_min_len710 = getelementptr inbounds %struct.wiphy_wowlan_support, %struct.wiphy_wowlan_support* %93, i32 0, i32 3
  %94 = load i32, i32* %pattern_min_len710, align 4, !tbaa !184
  %wiphy711 = getelementptr inbounds %struct.cfg80211_registered_device, %struct.cfg80211_registered_device* %call, i32 0, i32 42
  %wowlan712 = getelementptr inbounds %struct.wiphy, %struct.wiphy* %wiphy711, i32 0, i32 34
  %95 = load %struct.wiphy_wowlan_support*, %struct.wiphy_wowlan_support** %wowlan712, align 8, !tbaa !183
  %pattern_max_len713 = getelementptr inbounds %struct.wiphy_wowlan_support, %struct.wiphy_wowlan_support* %95, i32 0, i32 2
  %96 = load i32, i32* %pattern_max_len713, align 8, !tbaa !185
  %cmp714 = icmp sgt i32 %94, %96
  br label %land.end717

land.end717:                                      ; preds = %land.rhs702, %lor.rhs707, %land.lhs.true697, %if.end692
  %97 = phi i1 [ false, %land.lhs.true697 ], [ false, %if.end692 ], [ true, %land.rhs702 ], [ %cmp714, %lor.rhs707 ]
  %lnot718 = xor i1 %97, true
  %lnot720 = xor i1 %lnot718, true
  %lnot.ext721 = zext i1 %lnot720 to i32
  %tobool722 = icmp ne i32 %lnot.ext721, 0
  %lnot723 = xor i1 %tobool722, true
  %lnot725 = xor i1 %lnot723, true
  %lnot.ext726 = zext i1 %lnot725 to i32
  %conv727 = sext i32 %lnot.ext726 to i64
  %expval728 = call i64 @llvm.expect.i64(i64 %conv727, i64 0)
  %tobool729 = icmp ne i64 %expval728, 0
  br i1 %tobool729, label %if.then730, label %if.end731

if.then730:                                       ; preds = %land.end717
  call void @warn_slowpath_null(i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.1, i32 0, i32 0), i32 765)
  br label %if.end731

if.end731:                                        ; preds = %if.then730, %land.end717
  %tobool733 = icmp ne i32 %lnot.ext721, 0
  %lnot734 = xor i1 %tobool733, true
  %lnot736 = xor i1 %lnot734, true
  %lnot.ext737 = zext i1 %lnot736 to i32
  %conv738 = sext i32 %lnot.ext737 to i64
  %expval739 = call i64 @llvm.expect.i64(i64 %conv738, i64 0)
  %tobool740 = icmp ne i64 %expval739, 0
  br i1 %tobool740, label %cleanup, label %if.end742

if.end742:                                        ; preds = %if.end731
  call void @ieee80211_set_bitrate_flags(%struct.wiphy* %wiphy)
  %wiphy743 = getelementptr inbounds %struct.cfg80211_registered_device, %struct.cfg80211_registered_device* %call, i32 0, i32 42
  %features744 = getelementptr inbounds %struct.wiphy, %struct.wiphy* %wiphy743, i32 0, i32 12
  %98 = load i32, i32* %features744, align 4, !tbaa !186
  %or745 = or i32 %98, 128
  store i32 %or745, i32* %features744, align 4, !tbaa !186
  call void @rtnl_lock()
  %wiphy746 = getelementptr inbounds %struct.cfg80211_registered_device, %struct.cfg80211_registered_device* %call, i32 0, i32 42
  %dev = getelementptr inbounds %struct.wiphy, %struct.wiphy* %wiphy746, i32 0, i32 50
  %call747 = call i32 @device_add(%struct.device* %dev)
  %tobool748 = icmp ne i32 %call747, 0
  br i1 %tobool748, label %if.then749, label %if.end750

if.then749:                                       ; preds = %if.end742
  call void @rtnl_unlock()
  br label %cleanup

if.end750:                                        ; preds = %if.end742
  call void @wiphy_regulatory_register(%struct.wiphy* %wiphy)
  %list = getelementptr inbounds %struct.cfg80211_registered_device, %struct.cfg80211_registered_device* %call, i32 0, i32 1
  call void @list_add_rcu(%struct.list_head* %list, %struct.list_head* @cfg80211_rdev_list)
  %99 = load i32, i32* @cfg80211_rdev_list_generation, align 4, !tbaa !46
  %inc751 = add nsw i32 %99, 1
  store i32 %inc751, i32* @cfg80211_rdev_list_generation, align 4, !tbaa !46
  %wiphy752 = getelementptr inbounds %struct.cfg80211_registered_device, %struct.cfg80211_registered_device* %call, i32 0, i32 42
  %call753 = call i8* @wiphy_name(%struct.wiphy* %wiphy752)
  %100 = load %struct.dentry*, %struct.dentry** @ieee80211_debugfs_dir, align 8, !tbaa !2
  %call754 = call %struct.dentry* @debugfs_create_dir(i8* %call753, %struct.dentry* %100)
  %wiphy755 = getelementptr inbounds %struct.cfg80211_registered_device, %struct.cfg80211_registered_device* %call, i32 0, i32 42
  %debugfsdir = getelementptr inbounds %struct.wiphy, %struct.wiphy* %wiphy755, i32 0, i32 52
  store %struct.dentry* %call754, %struct.dentry** %debugfsdir, align 32, !tbaa !39
  %wiphy756 = getelementptr inbounds %struct.cfg80211_registered_device, %struct.cfg80211_registered_device* %call, i32 0, i32 42
  %debugfsdir757 = getelementptr inbounds %struct.wiphy, %struct.wiphy* %wiphy756, i32 0, i32 52
  %101 = load %struct.dentry*, %struct.dentry** %debugfsdir757, align 32, !tbaa !39
  %102 = bitcast %struct.dentry* %101 to i8*
  %call758 = call zeroext i1 @IS_ERR(i8* %102)
  br i1 %call758, label %if.then759, label %if.end762

if.then759:                                       ; preds = %if.end750
  %wiphy760 = getelementptr inbounds %struct.cfg80211_registered_device, %struct.cfg80211_registered_device* %call, i32 0, i32 42
  %debugfsdir761 = getelementptr inbounds %struct.wiphy, %struct.wiphy* %wiphy760, i32 0, i32 52
  store %struct.dentry* null, %struct.dentry** %debugfsdir761, align 32, !tbaa !39
  br label %if.end762

if.end762:                                        ; preds = %if.then759, %if.end750
  call void @cfg80211_debugfs_rdev_add(%struct.cfg80211_registered_device* %call)
  call void @nl80211_notify_wiphy(%struct.cfg80211_registered_device* %call, i32 3)
  %regulatory_flags763 = getelementptr inbounds %struct.wiphy, %struct.wiphy* %wiphy, i32 0, i32 11
  %103 = load i32, i32* %regulatory_flags763, align 8, !tbaa !150
  %and764 = and i32 %103, 1
  %tobool765 = icmp ne i32 %and764, 0
  br i1 %tobool765, label %if.then766, label %if.end771

if.then766:                                       ; preds = %if.end762
  %104 = bitcast %struct.regulatory_request* %request to i8*
  call void @llvm.lifetime.start.p0i8(i64 64, i8* %104) #6
  %call767 = call i32 @get_wiphy_idx(%struct.wiphy* %wiphy)
  %wiphy_idx = getelementptr inbounds %struct.regulatory_request, %struct.regulatory_request* %request, i32 0, i32 1
  store i32 %call767, i32* %wiphy_idx, align 8, !tbaa !187
  %initiator = getelementptr inbounds %struct.regulatory_request, %struct.regulatory_request* %request, i32 0, i32 2
  store i32 2, i32* %initiator, align 4, !tbaa !190
  %alpha2 = getelementptr inbounds %struct.regulatory_request, %struct.regulatory_request* %request, i32 0, i32 4
  %arrayidx768 = getelementptr inbounds [2 x i8], [2 x i8]* %alpha2, i64 0, i64 0
  store i8 57, i8* %arrayidx768, align 4, !tbaa !72
  %alpha2769 = getelementptr inbounds %struct.regulatory_request, %struct.regulatory_request* %request, i32 0, i32 4
  %arrayidx770 = getelementptr inbounds [2 x i8], [2 x i8]* %alpha2769, i64 0, i64 1
  store i8 57, i8* %arrayidx770, align 1, !tbaa !72
  call void @nl80211_send_reg_change_event(%struct.regulatory_request* %request)
  %105 = bitcast %struct.regulatory_request* %request to i8*
  call void @llvm.lifetime.end.p0i8(i64 64, i8* %105) #6
  br label %if.end771

if.end771:                                        ; preds = %if.then766, %if.end762
  %extended_capabilities_len = getelementptr inbounds %struct.wiphy, %struct.wiphy* %wiphy, i32 0, i32 43
  %106 = load i8, i8* %extended_capabilities_len, align 8, !tbaa !191
  %conv772 = zext i8 %106 to i32
  %tobool773 = icmp ne i32 %conv772, 0
  br i1 %tobool773, label %land.lhs.true774, label %if.end861

land.lhs.true774:                                 ; preds = %if.end771
  %num_iftype_ext_capab = getelementptr inbounds %struct.wiphy, %struct.wiphy* %wiphy, i32 0, i32 45
  %107 = load i32, i32* %num_iftype_ext_capab, align 8, !tbaa !192
  %tobool775 = icmp ne i32 %107, 0
  br i1 %tobool775, label %land.lhs.true776, label %if.end861

land.lhs.true776:                                 ; preds = %land.lhs.true774
  %iftype_ext_capab = getelementptr inbounds %struct.wiphy, %struct.wiphy* %wiphy, i32 0, i32 44
  %108 = load %struct.wiphy_iftype_ext_capab*, %struct.wiphy_iftype_ext_capab** %iftype_ext_capab, align 32, !tbaa !193
  %tobool777 = icmp ne %struct.wiphy_iftype_ext_capab* %108, null
  br i1 %tobool777, label %if.then778, label %if.end861

if.then778:                                       ; preds = %land.lhs.true776
  %iftype_ext_capab779 = getelementptr inbounds %struct.wiphy, %struct.wiphy* %wiphy, i32 0, i32 44
  %109 = load %struct.wiphy_iftype_ext_capab*, %struct.wiphy_iftype_ext_capab** %iftype_ext_capab779, align 32, !tbaa !193
  br label %for.cond780

for.cond780:                                      ; preds = %for.inc858, %if.then778
  %j.0 = phi i8 [ 0, %if.then778 ], [ %inc859, %for.inc858 ]
  %conv781 = zext i8 %j.0 to i32
  %extended_capabilities_len782 = getelementptr inbounds %struct.wiphy, %struct.wiphy* %wiphy, i32 0, i32 43
  %110 = load i8, i8* %extended_capabilities_len782, align 8, !tbaa !191
  %conv783 = zext i8 %110 to i32
  %cmp784 = icmp slt i32 %conv781, %conv783
  br i1 %cmp784, label %for.body786, label %if.end861

for.body786:                                      ; preds = %for.cond780
  %arrayidx787 = getelementptr inbounds %struct.wiphy_iftype_ext_capab, %struct.wiphy_iftype_ext_capab* %109, i64 0
  %extended_capabilities_len788 = getelementptr inbounds %struct.wiphy_iftype_ext_capab, %struct.wiphy_iftype_ext_capab* %arrayidx787, i32 0, i32 3
  %111 = load i8, i8* %extended_capabilities_len788, align 8, !tbaa !194
  %conv789 = zext i8 %111 to i32
  %conv790 = zext i8 %j.0 to i32
  %cmp791 = icmp sgt i32 %conv789, %conv790
  br i1 %cmp791, label %if.then793, label %if.end798

if.then793:                                       ; preds = %for.body786
  %arrayidx794 = getelementptr inbounds %struct.wiphy_iftype_ext_capab, %struct.wiphy_iftype_ext_capab* %109, i64 0
  %extended_capabilities = getelementptr inbounds %struct.wiphy_iftype_ext_capab, %struct.wiphy_iftype_ext_capab* %arrayidx794, i32 0, i32 1
  %112 = load i8*, i8** %extended_capabilities, align 8, !tbaa !196
  %idxprom795 = zext i8 %j.0 to i64
  %arrayidx796 = getelementptr inbounds i8, i8* %112, i64 %idxprom795
  %113 = load i8, i8* %arrayidx796, align 1, !tbaa !72
  br label %if.end798

if.end798:                                        ; preds = %for.body786, %if.then793
  %supported_on_all.0 = phi i8 [ %113, %if.then793 ], [ 0, %for.body786 ]
  br label %for.cond799

for.cond799:                                      ; preds = %if.end812, %if.end798
  %i.1 = phi i32 [ 1, %if.end798 ], [ %inc823, %if.end812 ]
  %supported_on_all.1 = phi i8 [ %supported_on_all.0, %if.end798 ], [ %conv821, %if.end812 ]
  %num_iftype_ext_capab800 = getelementptr inbounds %struct.wiphy, %struct.wiphy* %wiphy, i32 0, i32 45
  %114 = load i32, i32* %num_iftype_ext_capab800, align 8, !tbaa !192
  %cmp801 = icmp ult i32 %i.1, %114
  br i1 %cmp801, label %for.body803, label %for.end824

for.body803:                                      ; preds = %for.cond799
  %conv804 = zext i8 %j.0 to i32
  %idxprom805 = sext i32 %i.1 to i64
  %arrayidx806 = getelementptr inbounds %struct.wiphy_iftype_ext_capab, %struct.wiphy_iftype_ext_capab* %109, i64 %idxprom805
  %extended_capabilities_len807 = getelementptr inbounds %struct.wiphy_iftype_ext_capab, %struct.wiphy_iftype_ext_capab* %arrayidx806, i32 0, i32 3
  %115 = load i8, i8* %extended_capabilities_len807, align 8, !tbaa !194
  %conv808 = zext i8 %115 to i32
  %cmp809 = icmp sge i32 %conv804, %conv808
  br i1 %cmp809, label %for.end824, label %if.end812

if.end812:                                        ; preds = %for.body803
  %idxprom813 = sext i32 %i.1 to i64
  %arrayidx814 = getelementptr inbounds %struct.wiphy_iftype_ext_capab, %struct.wiphy_iftype_ext_capab* %109, i64 %idxprom813
  %extended_capabilities815 = getelementptr inbounds %struct.wiphy_iftype_ext_capab, %struct.wiphy_iftype_ext_capab* %arrayidx814, i32 0, i32 1
  %116 = load i8*, i8** %extended_capabilities815, align 8, !tbaa !196
  %idxprom816 = zext i8 %j.0 to i64
  %arrayidx817 = getelementptr inbounds i8, i8* %116, i64 %idxprom816
  %117 = load i8, i8* %arrayidx817, align 1, !tbaa !72
  %conv818 = zext i8 %117 to i32
  %conv819 = zext i8 %supported_on_all.1 to i32
  %and820 = and i32 %conv819, %conv818
  %conv821 = trunc i32 %and820 to i8
  %inc823 = add nsw i32 %i.1, 1
  br label %for.cond799

for.end824:                                       ; preds = %for.cond799, %for.body803
  %supported_on_all.2 = phi i8 [ 0, %for.body803 ], [ %supported_on_all.1, %for.cond799 ]
  %extended_capabilities826 = getelementptr inbounds %struct.wiphy, %struct.wiphy* %wiphy, i32 0, i32 41
  %118 = load i8*, i8** %extended_capabilities826, align 8, !tbaa !197
  %idxprom827 = zext i8 %j.0 to i64
  %arrayidx828 = getelementptr inbounds i8, i8* %118, i64 %idxprom827
  %119 = load i8, i8* %arrayidx828, align 1, !tbaa !72
  %conv829 = zext i8 %119 to i32
  %conv830 = zext i8 %supported_on_all.2 to i32
  %neg = xor i32 %conv830, -1
  %and831 = and i32 %conv829, %neg
  %tobool832 = icmp ne i32 %and831, 0
  %lnot833 = xor i1 %tobool832, true
  %lnot835 = xor i1 %lnot833, true
  %lnot.ext836 = zext i1 %lnot835 to i32
  %tobool837 = icmp ne i32 %lnot.ext836, 0
  %lnot838 = xor i1 %tobool837, true
  %lnot840 = xor i1 %lnot838, true
  %lnot.ext841 = zext i1 %lnot840 to i32
  %conv842 = sext i32 %lnot.ext841 to i64
  %expval843 = call i64 @llvm.expect.i64(i64 %conv842, i64 0)
  %tobool844 = icmp ne i64 %expval843, 0
  br i1 %tobool844, label %if.then845, label %if.end846

if.then845:                                       ; preds = %for.end824
  call void @warn_slowpath_null(i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.1, i32 0, i32 0), i32 833)
  br label %if.end846

if.end846:                                        ; preds = %if.then845, %for.end824
  %tobool848 = icmp ne i32 %lnot.ext836, 0
  %lnot849 = xor i1 %tobool848, true
  %lnot851 = xor i1 %lnot849, true
  %lnot.ext852 = zext i1 %lnot851 to i32
  %conv853 = sext i32 %lnot.ext852 to i64
  %expval854 = call i64 @llvm.expect.i64(i64 %conv853, i64 0)
  %tobool855 = icmp ne i64 %expval854, 0
  br i1 %tobool855, label %if.end861, label %for.inc858

for.inc858:                                       ; preds = %if.end846
  %inc859 = add i8 %j.0, 1
  br label %for.cond780

if.end861:                                        ; preds = %if.end846, %for.cond780, %land.lhs.true776, %land.lhs.true774, %if.end771
  %wiphy862 = getelementptr inbounds %struct.cfg80211_registered_device, %struct.cfg80211_registered_device* %call, i32 0, i32 42
  %registered = getelementptr inbounds %struct.wiphy, %struct.wiphy* %wiphy862, i32 0, i32 51
  store i8 1, i8* %registered, align 8, !tbaa !198
  call void @rtnl_unlock()
  %rfkill = getelementptr inbounds %struct.cfg80211_registered_device, %struct.cfg80211_registered_device* %call, i32 0, i32 3
  %120 = load %struct.rfkill*, %struct.rfkill** %rfkill, align 16, !tbaa !128
  %call863 = call i32 @rfkill_register(%struct.rfkill* %120)
  %tobool864 = icmp ne i32 %call863, 0
  br i1 %tobool864, label %if.then865, label %cleanup

if.then865:                                       ; preds = %if.end861
  %rfkill866 = getelementptr inbounds %struct.cfg80211_registered_device, %struct.cfg80211_registered_device* %call, i32 0, i32 3
  %121 = load %struct.rfkill*, %struct.rfkill** %rfkill866, align 16, !tbaa !128
  call void @rfkill_destroy(%struct.rfkill* %121)
  %rfkill867 = getelementptr inbounds %struct.cfg80211_registered_device, %struct.cfg80211_registered_device* %call, i32 0, i32 3
  store %struct.rfkill* null, %struct.rfkill** %rfkill867, align 16, !tbaa !128
  %wiphy868 = getelementptr inbounds %struct.cfg80211_registered_device, %struct.cfg80211_registered_device* %call, i32 0, i32 42
  call void @wiphy_unregister(%struct.wiphy* %wiphy868)
  br label %cleanup

cleanup:                                          ; preds = %if.end861, %if.end731, %if.end632, %if.end584, %if.end551, %if.end522, %if.end428, %if.end395, %if.end356, %if.end318, %if.end286, %if.end252, %if.end208, %if.end168, %if.end138, %if.end89, %if.end54, %if.end, %if.then865, %if.then749, %if.end683
  %retval.0 = phi i32 [ %call747, %if.then749 ], [ %call863, %if.then865 ], [ -22, %if.end683 ], [ -22, %if.end ], [ -22, %if.end54 ], [ -22, %if.end89 ], [ -22, %if.end138 ], [ -22, %if.end168 ], [ -22, %if.end208 ], [ -22, %if.end252 ], [ -22, %if.end286 ], [ -22, %if.end318 ], [ -22, %if.end356 ], [ -22, %if.end395 ], [ -22, %if.end428 ], [ %call523, %if.end522 ], [ -22, %if.end551 ], [ -22, %if.end584 ], [ -22, %if.end632 ], [ -22, %if.end731 ], [ 0, %if.end861 ]
  ret i32 %retval.0
}

; Function Attrs: inlinehint nounwind uwtable
define internal zeroext i1 @is_zero_ether_addr(i8* %addr) #4 {
entry:
  %0 = bitcast i8* %addr to i32*
  %1 = load i32, i32* %0, align 4, !tbaa !46
  %add.ptr = getelementptr inbounds i8, i8* %addr, i64 4
  %2 = bitcast i8* %add.ptr to i16*
  %3 = load i16, i16* %2, align 2, !tbaa !78
  %conv = zext i16 %3 to i32
  %or = or i32 %1, %conv
  %cmp = icmp eq i32 %or, 0
  ret i1 %cmp
}

declare i32 @memcmp(i8*, i8*, i64) #2

declare i8* @__memcpy(i8*, i8*, i64) #2

; Function Attrs: nounwind uwtable
define internal i32 @wiphy_verify_combinations(%struct.wiphy* %wiphy) #0 {
entry:
  br label %for.cond

for.cond:                                         ; preds = %for.inc454, %entry
  %i.0 = phi i32 [ 0, %entry ], [ %inc455, %for.inc454 ]
  %retval.0 = phi i32 [ undef, %entry ], [ %retval.3, %for.inc454 ]
  %n_iface_combinations = getelementptr inbounds %struct.wiphy, %struct.wiphy* %wiphy, i32 0, i32 5
  %0 = load i32, i32* %n_iface_combinations, align 8, !tbaa !199
  %cmp = icmp slt i32 %i.0, %0
  br i1 %cmp, label %for.body, label %cleanup457

for.body:                                         ; preds = %for.cond
  %iface_combinations = getelementptr inbounds %struct.wiphy, %struct.wiphy* %wiphy, i32 0, i32 4
  %1 = load %struct.ieee80211_iface_combination*, %struct.ieee80211_iface_combination** %iface_combinations, align 32, !tbaa !200
  %idxprom = sext i32 %i.0 to i64
  %arrayidx = getelementptr inbounds %struct.ieee80211_iface_combination, %struct.ieee80211_iface_combination* %1, i64 %idxprom
  %max_interfaces = getelementptr inbounds %struct.ieee80211_iface_combination, %struct.ieee80211_iface_combination* %arrayidx, i32 0, i32 2
  %2 = load i16, i16* %max_interfaces, align 4, !tbaa !201
  %conv = zext i16 %2 to i32
  %cmp1 = icmp slt i32 %conv, 2
  br i1 %cmp1, label %land.rhs, label %land.end

land.rhs:                                         ; preds = %for.body
  %radar_detect_widths = getelementptr inbounds %struct.ieee80211_iface_combination, %struct.ieee80211_iface_combination* %arrayidx, i32 0, i32 5
  %3 = load i8, i8* %radar_detect_widths, align 8, !tbaa !203
  %tobool = icmp ne i8 %3, 0
  %lnot = xor i1 %tobool, true
  br label %land.end

land.end:                                         ; preds = %land.rhs, %for.body
  %4 = phi i1 [ false, %for.body ], [ %lnot, %land.rhs ]
  %lnot3 = xor i1 %4, true
  %lnot4 = xor i1 %lnot3, true
  %lnot.ext = zext i1 %lnot4 to i32
  %tobool5 = icmp ne i32 %lnot.ext, 0
  %lnot6 = xor i1 %tobool5, true
  %lnot8 = xor i1 %lnot6, true
  %lnot.ext9 = zext i1 %lnot8 to i32
  %conv10 = sext i32 %lnot.ext9 to i64
  %expval = call i64 @llvm.expect.i64(i64 %conv10, i64 0)
  %tobool11 = icmp ne i64 %expval, 0
  br i1 %tobool11, label %if.then, label %if.end

if.then:                                          ; preds = %land.end
  call void @warn_slowpath_null(i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.1, i32 0, i32 0), i32 517)
  br label %if.end

if.end:                                           ; preds = %if.then, %land.end
  %tobool12 = icmp ne i32 %lnot.ext, 0
  %lnot13 = xor i1 %tobool12, true
  %lnot15 = xor i1 %lnot13, true
  %lnot.ext16 = zext i1 %lnot15 to i32
  %conv17 = sext i32 %lnot.ext16 to i64
  %expval18 = call i64 @llvm.expect.i64(i64 %conv17, i64 0)
  %tobool19 = icmp ne i64 %expval18, 0
  br i1 %tobool19, label %cleanup450, label %if.end21

if.end21:                                         ; preds = %if.end
  %num_different_channels = getelementptr inbounds %struct.ieee80211_iface_combination, %struct.ieee80211_iface_combination* %arrayidx, i32 0, i32 1
  %5 = load i32, i32* %num_different_channels, align 8, !tbaa !204
  %tobool23 = icmp ne i32 %5, 0
  %lnot24 = xor i1 %tobool23, true
  %lnot26 = xor i1 %lnot24, true
  %lnot28 = xor i1 %lnot26, true
  %lnot.ext29 = zext i1 %lnot28 to i32
  %tobool30 = icmp ne i32 %lnot.ext29, 0
  %lnot31 = xor i1 %tobool30, true
  %lnot33 = xor i1 %lnot31, true
  %lnot.ext34 = zext i1 %lnot33 to i32
  %conv35 = sext i32 %lnot.ext34 to i64
  %expval36 = call i64 @llvm.expect.i64(i64 %conv35, i64 0)
  %tobool37 = icmp ne i64 %expval36, 0
  br i1 %tobool37, label %if.then38, label %if.end39

if.then38:                                        ; preds = %if.end21
  call void @warn_slowpath_null(i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.1, i32 0, i32 0), i32 521)
  br label %if.end39

if.end39:                                         ; preds = %if.then38, %if.end21
  %tobool41 = icmp ne i32 %lnot.ext29, 0
  %lnot42 = xor i1 %tobool41, true
  %lnot44 = xor i1 %lnot42, true
  %lnot.ext45 = zext i1 %lnot44 to i32
  %conv46 = sext i32 %lnot.ext45 to i64
  %expval47 = call i64 @llvm.expect.i64(i64 %conv46, i64 0)
  %tobool48 = icmp ne i64 %expval47, 0
  br i1 %tobool48, label %cleanup450, label %if.end50

if.end50:                                         ; preds = %if.end39
  %num_different_channels52 = getelementptr inbounds %struct.ieee80211_iface_combination, %struct.ieee80211_iface_combination* %arrayidx, i32 0, i32 1
  %6 = load i32, i32* %num_different_channels52, align 8, !tbaa !204
  %cmp53 = icmp ugt i32 %6, 10
  %lnot55 = xor i1 %cmp53, true
  %lnot57 = xor i1 %lnot55, true
  %lnot.ext58 = zext i1 %lnot57 to i32
  %tobool59 = icmp ne i32 %lnot.ext58, 0
  %lnot60 = xor i1 %tobool59, true
  %lnot62 = xor i1 %lnot60, true
  %lnot.ext63 = zext i1 %lnot62 to i32
  %conv64 = sext i32 %lnot.ext63 to i64
  %expval65 = call i64 @llvm.expect.i64(i64 %conv64, i64 0)
  %tobool66 = icmp ne i64 %expval65, 0
  br i1 %tobool66, label %if.then67, label %if.end68

if.then67:                                        ; preds = %if.end50
  call void @warn_slowpath_null(i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.1, i32 0, i32 0), i32 529)
  br label %if.end68

if.end68:                                         ; preds = %if.then67, %if.end50
  %tobool70 = icmp ne i32 %lnot.ext58, 0
  %lnot71 = xor i1 %tobool70, true
  %lnot73 = xor i1 %lnot71, true
  %lnot.ext74 = zext i1 %lnot73 to i32
  %conv75 = sext i32 %lnot.ext74 to i64
  %expval76 = call i64 @llvm.expect.i64(i64 %conv75, i64 0)
  %tobool77 = icmp ne i64 %expval76, 0
  br i1 %tobool77, label %cleanup450, label %if.end79

if.end79:                                         ; preds = %if.end68
  %radar_detect_widths81 = getelementptr inbounds %struct.ieee80211_iface_combination, %struct.ieee80211_iface_combination* %arrayidx, i32 0, i32 5
  %7 = load i8, i8* %radar_detect_widths81, align 8, !tbaa !203
  %conv82 = zext i8 %7 to i32
  %tobool83 = icmp ne i32 %conv82, 0
  br i1 %tobool83, label %land.rhs84, label %land.end88

land.rhs84:                                       ; preds = %if.end79
  %num_different_channels85 = getelementptr inbounds %struct.ieee80211_iface_combination, %struct.ieee80211_iface_combination* %arrayidx, i32 0, i32 1
  %8 = load i32, i32* %num_different_channels85, align 8, !tbaa !204
  %cmp86 = icmp ugt i32 %8, 1
  br label %land.end88

land.end88:                                       ; preds = %land.rhs84, %if.end79
  %9 = phi i1 [ false, %if.end79 ], [ %cmp86, %land.rhs84 ]
  %lnot89 = xor i1 %9, true
  %lnot91 = xor i1 %lnot89, true
  %lnot.ext92 = zext i1 %lnot91 to i32
  %tobool93 = icmp ne i32 %lnot.ext92, 0
  %lnot94 = xor i1 %tobool93, true
  %lnot96 = xor i1 %lnot94, true
  %lnot.ext97 = zext i1 %lnot96 to i32
  %conv98 = sext i32 %lnot.ext97 to i64
  %expval99 = call i64 @llvm.expect.i64(i64 %conv98, i64 0)
  %tobool100 = icmp ne i64 %expval99, 0
  br i1 %tobool100, label %if.then101, label %if.end102

if.then101:                                       ; preds = %land.end88
  call void @warn_slowpath_null(i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.1, i32 0, i32 0), i32 534)
  br label %if.end102

if.end102:                                        ; preds = %if.then101, %land.end88
  %tobool104 = icmp ne i32 %lnot.ext92, 0
  %lnot105 = xor i1 %tobool104, true
  %lnot107 = xor i1 %lnot105, true
  %lnot.ext108 = zext i1 %lnot107 to i32
  %conv109 = sext i32 %lnot.ext108 to i64
  %expval110 = call i64 @llvm.expect.i64(i64 %conv109, i64 0)
  %tobool111 = icmp ne i64 %expval110, 0
  br i1 %tobool111, label %cleanup450, label %if.end113

if.end113:                                        ; preds = %if.end102
  %n_limits = getelementptr inbounds %struct.ieee80211_iface_combination, %struct.ieee80211_iface_combination* %arrayidx, i32 0, i32 3
  %10 = load i8, i8* %n_limits, align 2, !tbaa !205
  %tobool115 = icmp ne i8 %10, 0
  %lnot116 = xor i1 %tobool115, true
  %lnot118 = xor i1 %lnot116, true
  %lnot120 = xor i1 %lnot118, true
  %lnot.ext121 = zext i1 %lnot120 to i32
  %tobool122 = icmp ne i32 %lnot.ext121, 0
  %lnot123 = xor i1 %tobool122, true
  %lnot125 = xor i1 %lnot123, true
  %lnot.ext126 = zext i1 %lnot125 to i32
  %conv127 = sext i32 %lnot.ext126 to i64
  %expval128 = call i64 @llvm.expect.i64(i64 %conv127, i64 0)
  %tobool129 = icmp ne i64 %expval128, 0
  br i1 %tobool129, label %if.then130, label %if.end131

if.then130:                                       ; preds = %if.end113
  call void @warn_slowpath_null(i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.1, i32 0, i32 0), i32 537)
  br label %if.end131

if.end131:                                        ; preds = %if.then130, %if.end113
  %tobool133 = icmp ne i32 %lnot.ext121, 0
  %lnot134 = xor i1 %tobool133, true
  %lnot136 = xor i1 %lnot134, true
  %lnot.ext137 = zext i1 %lnot136 to i32
  %conv138 = sext i32 %lnot.ext137 to i64
  %expval139 = call i64 @llvm.expect.i64(i64 %conv138, i64 0)
  %tobool140 = icmp ne i64 %expval139, 0
  br i1 %tobool140, label %cleanup450, label %if.end142

if.end142:                                        ; preds = %if.end131
  br label %for.cond143

for.cond143:                                      ; preds = %for.inc, %if.end142
  %cnt.0 = phi i32 [ 0, %if.end142 ], [ %cnt.1, %for.inc ]
  %j.0 = phi i32 [ 0, %if.end142 ], [ %inc, %for.inc ]
  %all_iftypes.0 = phi i16 [ 0, %if.end142 ], [ %all_iftypes.1, %for.inc ]
  %retval.1 = phi i32 [ %retval.0, %if.end142 ], [ %retval.2, %for.inc ]
  %n_limits144 = getelementptr inbounds %struct.ieee80211_iface_combination, %struct.ieee80211_iface_combination* %arrayidx, i32 0, i32 3
  %11 = load i8, i8* %n_limits144, align 2, !tbaa !205
  %conv145 = zext i8 %11 to i32
  %cmp146 = icmp slt i32 %j.0, %conv145
  br i1 %cmp146, label %for.body148, label %for.end

for.body148:                                      ; preds = %for.cond143
  %limits = getelementptr inbounds %struct.ieee80211_iface_combination, %struct.ieee80211_iface_combination* %arrayidx, i32 0, i32 0
  %12 = load %struct.ieee80211_iface_limit*, %struct.ieee80211_iface_limit** %limits, align 8, !tbaa !206
  %idxprom149 = sext i32 %j.0 to i64
  %arrayidx150 = getelementptr inbounds %struct.ieee80211_iface_limit, %struct.ieee80211_iface_limit* %12, i64 %idxprom149
  %types151 = getelementptr inbounds %struct.ieee80211_iface_limit, %struct.ieee80211_iface_limit* %arrayidx150, i32 0, i32 1
  %13 = load i16, i16* %types151, align 2, !tbaa !207
  %conv153 = zext i16 %13 to i32
  %conv154 = zext i16 %all_iftypes.0 to i32
  %and = and i32 %conv153, %conv154
  %tobool155 = icmp ne i32 %and, 0
  %lnot156 = xor i1 %tobool155, true
  %lnot158 = xor i1 %lnot156, true
  %lnot.ext159 = zext i1 %lnot158 to i32
  %tobool160 = icmp ne i32 %lnot.ext159, 0
  %lnot161 = xor i1 %tobool160, true
  %lnot163 = xor i1 %lnot161, true
  %lnot.ext164 = zext i1 %lnot163 to i32
  %conv165 = sext i32 %lnot.ext164 to i64
  %expval166 = call i64 @llvm.expect.i64(i64 %conv165, i64 0)
  %tobool167 = icmp ne i64 %expval166, 0
  br i1 %tobool167, label %if.then168, label %if.end169

if.then168:                                       ; preds = %for.body148
  call void @warn_slowpath_null(i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.1, i32 0, i32 0), i32 544)
  br label %if.end169

if.end169:                                        ; preds = %if.then168, %for.body148
  %tobool171 = icmp ne i32 %lnot.ext159, 0
  %lnot172 = xor i1 %tobool171, true
  %lnot174 = xor i1 %lnot172, true
  %lnot.ext175 = zext i1 %lnot174 to i32
  %conv176 = sext i32 %lnot.ext175 to i64
  %expval177 = call i64 @llvm.expect.i64(i64 %conv176, i64 0)
  %tobool178 = icmp ne i64 %expval177, 0
  br i1 %tobool178, label %cleanup, label %if.end180

if.end180:                                        ; preds = %if.end169
  %conv181 = zext i16 %13 to i32
  %conv182 = zext i16 %all_iftypes.0 to i32
  %or = or i32 %conv182, %conv181
  %conv183 = trunc i32 %or to i16
  %limits185 = getelementptr inbounds %struct.ieee80211_iface_combination, %struct.ieee80211_iface_combination* %arrayidx, i32 0, i32 0
  %14 = load %struct.ieee80211_iface_limit*, %struct.ieee80211_iface_limit** %limits185, align 8, !tbaa !206
  %idxprom186 = sext i32 %j.0 to i64
  %arrayidx187 = getelementptr inbounds %struct.ieee80211_iface_limit, %struct.ieee80211_iface_limit* %14, i64 %idxprom186
  %max = getelementptr inbounds %struct.ieee80211_iface_limit, %struct.ieee80211_iface_limit* %arrayidx187, i32 0, i32 0
  %15 = load i16, i16* %max, align 2, !tbaa !209
  %tobool188 = icmp ne i16 %15, 0
  %lnot189 = xor i1 %tobool188, true
  %lnot191 = xor i1 %lnot189, true
  %lnot193 = xor i1 %lnot191, true
  %lnot.ext194 = zext i1 %lnot193 to i32
  %tobool195 = icmp ne i32 %lnot.ext194, 0
  %lnot196 = xor i1 %tobool195, true
  %lnot198 = xor i1 %lnot196, true
  %lnot.ext199 = zext i1 %lnot198 to i32
  %conv200 = sext i32 %lnot.ext199 to i64
  %expval201 = call i64 @llvm.expect.i64(i64 %conv200, i64 0)
  %tobool202 = icmp ne i64 %expval201, 0
  br i1 %tobool202, label %if.then203, label %if.end204

if.then203:                                       ; preds = %if.end180
  call void @warn_slowpath_null(i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.1, i32 0, i32 0), i32 548)
  br label %if.end204

if.end204:                                        ; preds = %if.then203, %if.end180
  %tobool206 = icmp ne i32 %lnot.ext194, 0
  %lnot207 = xor i1 %tobool206, true
  %lnot209 = xor i1 %lnot207, true
  %lnot.ext210 = zext i1 %lnot209 to i32
  %conv211 = sext i32 %lnot.ext210 to i64
  %expval212 = call i64 @llvm.expect.i64(i64 %conv211, i64 0)
  %tobool213 = icmp ne i64 %expval212, 0
  br i1 %tobool213, label %cleanup, label %if.end215

if.end215:                                        ; preds = %if.end204
  %software_iftypes = getelementptr inbounds %struct.wiphy, %struct.wiphy* %wiphy, i32 0, i32 6
  %16 = load i16, i16* %software_iftypes, align 4, !tbaa !210
  %conv217 = zext i16 %16 to i32
  %conv218 = zext i16 %13 to i32
  %and219 = and i32 %conv217, %conv218
  %tobool220 = icmp ne i32 %and219, 0
  %lnot221 = xor i1 %tobool220, true
  %lnot223 = xor i1 %lnot221, true
  %lnot.ext224 = zext i1 %lnot223 to i32
  %tobool225 = icmp ne i32 %lnot.ext224, 0
  %lnot226 = xor i1 %tobool225, true
  %lnot228 = xor i1 %lnot226, true
  %lnot.ext229 = zext i1 %lnot228 to i32
  %conv230 = sext i32 %lnot.ext229 to i64
  %expval231 = call i64 @llvm.expect.i64(i64 %conv230, i64 0)
  %tobool232 = icmp ne i64 %expval231, 0
  br i1 %tobool232, label %if.then233, label %if.end234

if.then233:                                       ; preds = %if.end215
  call void @warn_slowpath_null(i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.1, i32 0, i32 0), i32 552)
  br label %if.end234

if.end234:                                        ; preds = %if.then233, %if.end215
  %tobool236 = icmp ne i32 %lnot.ext224, 0
  %lnot237 = xor i1 %tobool236, true
  %lnot239 = xor i1 %lnot237, true
  %lnot.ext240 = zext i1 %lnot239 to i32
  %conv241 = sext i32 %lnot.ext240 to i64
  %expval242 = call i64 @llvm.expect.i64(i64 %conv241, i64 0)
  %tobool243 = icmp ne i64 %expval242, 0
  br i1 %tobool243, label %cleanup, label %if.end245

if.end245:                                        ; preds = %if.end234
  %conv247 = zext i16 %13 to i64
  %and248 = and i64 %conv247, 1024
  %tobool249 = icmp ne i64 %and248, 0
  br i1 %tobool249, label %land.rhs250, label %land.end258

land.rhs250:                                      ; preds = %if.end245
  %limits251 = getelementptr inbounds %struct.ieee80211_iface_combination, %struct.ieee80211_iface_combination* %arrayidx, i32 0, i32 0
  %17 = load %struct.ieee80211_iface_limit*, %struct.ieee80211_iface_limit** %limits251, align 8, !tbaa !206
  %idxprom252 = sext i32 %j.0 to i64
  %arrayidx253 = getelementptr inbounds %struct.ieee80211_iface_limit, %struct.ieee80211_iface_limit* %17, i64 %idxprom252
  %max254 = getelementptr inbounds %struct.ieee80211_iface_limit, %struct.ieee80211_iface_limit* %arrayidx253, i32 0, i32 0
  %18 = load i16, i16* %max254, align 2, !tbaa !209
  %conv255 = zext i16 %18 to i32
  %cmp256 = icmp sgt i32 %conv255, 1
  br label %land.end258

land.end258:                                      ; preds = %land.rhs250, %if.end245
  %19 = phi i1 [ false, %if.end245 ], [ %cmp256, %land.rhs250 ]
  %lnot259 = xor i1 %19, true
  %lnot261 = xor i1 %lnot259, true
  %lnot.ext262 = zext i1 %lnot261 to i32
  %tobool263 = icmp ne i32 %lnot.ext262, 0
  %lnot264 = xor i1 %tobool263, true
  %lnot266 = xor i1 %lnot264, true
  %lnot.ext267 = zext i1 %lnot266 to i32
  %conv268 = sext i32 %lnot.ext267 to i64
  %expval269 = call i64 @llvm.expect.i64(i64 %conv268, i64 0)
  %tobool270 = icmp ne i64 %expval269, 0
  br i1 %tobool270, label %if.then271, label %if.end272

if.then271:                                       ; preds = %land.end258
  call void @warn_slowpath_null(i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.1, i32 0, i32 0), i32 557)
  br label %if.end272

if.end272:                                        ; preds = %if.then271, %land.end258
  %tobool274 = icmp ne i32 %lnot.ext262, 0
  %lnot275 = xor i1 %tobool274, true
  %lnot277 = xor i1 %lnot275, true
  %lnot.ext278 = zext i1 %lnot277 to i32
  %conv279 = sext i32 %lnot.ext278 to i64
  %expval280 = call i64 @llvm.expect.i64(i64 %conv279, i64 0)
  %tobool281 = icmp ne i64 %expval280, 0
  br i1 %tobool281, label %cleanup, label %if.end283

if.end283:                                        ; preds = %if.end272
  %conv285 = zext i16 %13 to i64
  %and286 = and i64 %conv285, 4096
  %tobool287 = icmp ne i64 %and286, 0
  br i1 %tobool287, label %land.rhs288, label %land.end296

land.rhs288:                                      ; preds = %if.end283
  %limits289 = getelementptr inbounds %struct.ieee80211_iface_combination, %struct.ieee80211_iface_combination* %arrayidx, i32 0, i32 0
  %20 = load %struct.ieee80211_iface_limit*, %struct.ieee80211_iface_limit** %limits289, align 8, !tbaa !206
  %idxprom290 = sext i32 %j.0 to i64
  %arrayidx291 = getelementptr inbounds %struct.ieee80211_iface_limit, %struct.ieee80211_iface_limit* %20, i64 %idxprom290
  %max292 = getelementptr inbounds %struct.ieee80211_iface_limit, %struct.ieee80211_iface_limit* %arrayidx291, i32 0, i32 0
  %21 = load i16, i16* %max292, align 2, !tbaa !209
  %conv293 = zext i16 %21 to i32
  %cmp294 = icmp sgt i32 %conv293, 1
  br label %land.end296

land.end296:                                      ; preds = %land.rhs288, %if.end283
  %22 = phi i1 [ false, %if.end283 ], [ %cmp294, %land.rhs288 ]
  %lnot297 = xor i1 %22, true
  %lnot299 = xor i1 %lnot297, true
  %lnot.ext300 = zext i1 %lnot299 to i32
  %tobool301 = icmp ne i32 %lnot.ext300, 0
  %lnot302 = xor i1 %tobool301, true
  %lnot304 = xor i1 %lnot302, true
  %lnot.ext305 = zext i1 %lnot304 to i32
  %conv306 = sext i32 %lnot.ext305 to i64
  %expval307 = call i64 @llvm.expect.i64(i64 %conv306, i64 0)
  %tobool308 = icmp ne i64 %expval307, 0
  br i1 %tobool308, label %if.then309, label %if.end310

if.then309:                                       ; preds = %land.end296
  call void @warn_slowpath_null(i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.1, i32 0, i32 0), i32 562)
  br label %if.end310

if.end310:                                        ; preds = %if.then309, %land.end296
  %tobool312 = icmp ne i32 %lnot.ext300, 0
  %lnot313 = xor i1 %tobool312, true
  %lnot315 = xor i1 %lnot313, true
  %lnot.ext316 = zext i1 %lnot315 to i32
  %conv317 = sext i32 %lnot.ext316 to i64
  %expval318 = call i64 @llvm.expect.i64(i64 %conv317, i64 0)
  %tobool319 = icmp ne i64 %expval318, 0
  br i1 %tobool319, label %cleanup, label %if.end321

if.end321:                                        ; preds = %if.end310
  %conv323 = zext i16 %13 to i64
  %and324 = and i64 %conv323, 2
  %tobool325 = icmp ne i64 %and324, 0
  br i1 %tobool325, label %land.rhs326, label %land.end328

land.rhs326:                                      ; preds = %if.end321
  %beacon_int_min_gcd = getelementptr inbounds %struct.ieee80211_iface_combination, %struct.ieee80211_iface_combination* %arrayidx, i32 0, i32 7
  %23 = load i32, i32* %beacon_int_min_gcd, align 4, !tbaa !211
  %tobool327 = icmp ne i32 %23, 0
  br label %land.end328

land.end328:                                      ; preds = %land.rhs326, %if.end321
  %24 = phi i1 [ false, %if.end321 ], [ %tobool327, %land.rhs326 ]
  %lnot329 = xor i1 %24, true
  %lnot331 = xor i1 %lnot329, true
  %lnot.ext332 = zext i1 %lnot331 to i32
  %tobool333 = icmp ne i32 %lnot.ext332, 0
  %lnot334 = xor i1 %tobool333, true
  %lnot336 = xor i1 %lnot334, true
  %lnot.ext337 = zext i1 %lnot336 to i32
  %conv338 = sext i32 %lnot.ext337 to i64
  %expval339 = call i64 @llvm.expect.i64(i64 %conv338, i64 0)
  %tobool340 = icmp ne i64 %expval339, 0
  br i1 %tobool340, label %if.then341, label %if.end342

if.then341:                                       ; preds = %land.end328
  call void @warn_slowpath_null(i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.1, i32 0, i32 0), i32 576)
  br label %if.end342

if.end342:                                        ; preds = %if.then341, %land.end328
  %tobool344 = icmp ne i32 %lnot.ext332, 0
  %lnot345 = xor i1 %tobool344, true
  %lnot347 = xor i1 %lnot345, true
  %lnot.ext348 = zext i1 %lnot347 to i32
  %conv349 = sext i32 %lnot.ext348 to i64
  %expval350 = call i64 @llvm.expect.i64(i64 %conv349, i64 0)
  %tobool351 = icmp ne i64 %expval350, 0
  br i1 %tobool351, label %cleanup, label %if.end353

if.end353:                                        ; preds = %if.end342
  %limits354 = getelementptr inbounds %struct.ieee80211_iface_combination, %struct.ieee80211_iface_combination* %arrayidx, i32 0, i32 0
  %25 = load %struct.ieee80211_iface_limit*, %struct.ieee80211_iface_limit** %limits354, align 8, !tbaa !206
  %idxprom355 = sext i32 %j.0 to i64
  %arrayidx356 = getelementptr inbounds %struct.ieee80211_iface_limit, %struct.ieee80211_iface_limit* %25, i64 %idxprom355
  %max357 = getelementptr inbounds %struct.ieee80211_iface_limit, %struct.ieee80211_iface_limit* %arrayidx356, i32 0, i32 0
  %26 = load i16, i16* %max357, align 2, !tbaa !209
  %conv358 = zext i16 %26 to i32
  %add = add i32 %cnt.0, %conv358
  %interface_modes = getelementptr inbounds %struct.wiphy, %struct.wiphy* %wiphy, i32 0, i32 8
  %27 = load i16, i16* %interface_modes, align 16, !tbaa !139
  %conv360 = zext i16 %27 to i32
  %conv361 = zext i16 %13 to i32
  %and362 = and i32 %conv360, %conv361
  %conv363 = zext i16 %13 to i32
  %cmp364 = icmp ne i32 %and362, %conv363
  %lnot366 = xor i1 %cmp364, true
  %lnot368 = xor i1 %lnot366, true
  %lnot.ext369 = zext i1 %lnot368 to i32
  %tobool370 = icmp ne i32 %lnot.ext369, 0
  %lnot371 = xor i1 %tobool370, true
  %lnot373 = xor i1 %lnot371, true
  %lnot.ext374 = zext i1 %lnot373 to i32
  %conv375 = sext i32 %lnot.ext374 to i64
  %expval376 = call i64 @llvm.expect.i64(i64 %conv375, i64 0)
  %tobool377 = icmp ne i64 %expval376, 0
  br i1 %tobool377, label %if.then378, label %if.end379

if.then378:                                       ; preds = %if.end353
  call void @warn_slowpath_null(i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.1, i32 0, i32 0), i32 585)
  br label %if.end379

if.end379:                                        ; preds = %if.then378, %if.end353
  %tobool381 = icmp ne i32 %lnot.ext369, 0
  %lnot382 = xor i1 %tobool381, true
  %lnot384 = xor i1 %lnot382, true
  %lnot.ext385 = zext i1 %lnot384 to i32
  %conv386 = sext i32 %lnot.ext385 to i64
  %expval387 = call i64 @llvm.expect.i64(i64 %conv386, i64 0)
  %tobool388 = icmp ne i64 %expval387, 0
  %. = select i1 %tobool388, i32 1, i32 0
  %.retval.1 = select i1 %tobool388, i32 -22, i32 %retval.1
  br label %cleanup

cleanup:                                          ; preds = %if.end379, %if.end342, %if.end310, %if.end272, %if.end234, %if.end204, %if.end169
  %cnt.1 = phi i32 [ %cnt.0, %if.end169 ], [ %cnt.0, %if.end204 ], [ %cnt.0, %if.end234 ], [ %cnt.0, %if.end272 ], [ %cnt.0, %if.end310 ], [ %cnt.0, %if.end342 ], [ %add, %if.end379 ]
  %all_iftypes.1 = phi i16 [ %all_iftypes.0, %if.end169 ], [ %conv183, %if.end204 ], [ %conv183, %if.end234 ], [ %conv183, %if.end272 ], [ %conv183, %if.end310 ], [ %conv183, %if.end342 ], [ %conv183, %if.end379 ]
  %cleanup.dest.slot.0 = phi i32 [ 1, %if.end169 ], [ 1, %if.end204 ], [ 1, %if.end234 ], [ 1, %if.end272 ], [ 1, %if.end310 ], [ 1, %if.end342 ], [ %., %if.end379 ]
  %retval.2 = phi i32 [ -22, %if.end169 ], [ -22, %if.end204 ], [ -22, %if.end234 ], [ -22, %if.end272 ], [ -22, %if.end310 ], [ -22, %if.end342 ], [ %.retval.1, %if.end379 ]
  %cond1 = icmp eq i32 %cleanup.dest.slot.0, 0
  br i1 %cond1, label %for.inc, label %cleanup450

for.inc:                                          ; preds = %cleanup
  %inc = add nsw i32 %j.0, 1
  br label %for.cond143

for.end:                                          ; preds = %for.cond143
  %conv392 = zext i16 %all_iftypes.0 to i64
  %and393 = and i64 %conv392, 32
  %tobool394 = icmp ne i64 %and393, 0
  %lnot395 = xor i1 %tobool394, true
  %lnot397 = xor i1 %lnot395, true
  %lnot.ext398 = zext i1 %lnot397 to i32
  %tobool399 = icmp ne i32 %lnot.ext398, 0
  %lnot400 = xor i1 %tobool399, true
  %lnot402 = xor i1 %lnot400, true
  %lnot.ext403 = zext i1 %lnot402 to i32
  %conv404 = sext i32 %lnot.ext403 to i64
  %expval405 = call i64 @llvm.expect.i64(i64 %conv404, i64 0)
  %tobool406 = icmp ne i64 %expval405, 0
  br i1 %tobool406, label %if.then407, label %if.end408

if.then407:                                       ; preds = %for.end
  call void @warn_slowpath_null(i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.1, i32 0, i32 0), i32 590)
  br label %if.end408

if.end408:                                        ; preds = %if.then407, %for.end
  %tobool410 = icmp ne i32 %lnot.ext398, 0
  %lnot411 = xor i1 %tobool410, true
  %lnot413 = xor i1 %lnot411, true
  %lnot.ext414 = zext i1 %lnot413 to i32
  %conv415 = sext i32 %lnot.ext414 to i64
  %expval416 = call i64 @llvm.expect.i64(i64 %conv415, i64 0)
  %tobool417 = icmp ne i64 %expval416, 0
  br i1 %tobool417, label %cleanup450, label %if.end419

if.end419:                                        ; preds = %if.end408
  %max_interfaces421 = getelementptr inbounds %struct.ieee80211_iface_combination, %struct.ieee80211_iface_combination* %arrayidx, i32 0, i32 2
  %28 = load i16, i16* %max_interfaces421, align 4, !tbaa !201
  %conv422 = zext i16 %28 to i32
  %cmp423 = icmp ult i32 %cnt.0, %conv422
  %lnot425 = xor i1 %cmp423, true
  %lnot427 = xor i1 %lnot425, true
  %lnot.ext428 = zext i1 %lnot427 to i32
  %tobool429 = icmp ne i32 %lnot.ext428, 0
  %lnot430 = xor i1 %tobool429, true
  %lnot432 = xor i1 %lnot430, true
  %lnot.ext433 = zext i1 %lnot432 to i32
  %conv434 = sext i32 %lnot.ext433 to i64
  %expval435 = call i64 @llvm.expect.i64(i64 %conv434, i64 0)
  %tobool436 = icmp ne i64 %expval435, 0
  br i1 %tobool436, label %if.then437, label %if.end438

if.then437:                                       ; preds = %if.end419
  call void @warn_slowpath_null(i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.1, i32 0, i32 0), i32 595)
  br label %if.end438

if.end438:                                        ; preds = %if.then437, %if.end419
  %tobool440 = icmp ne i32 %lnot.ext428, 0
  %lnot441 = xor i1 %tobool440, true
  %lnot443 = xor i1 %lnot441, true
  %lnot.ext444 = zext i1 %lnot443 to i32
  %conv445 = sext i32 %lnot.ext444 to i64
  %expval446 = call i64 @llvm.expect.i64(i64 %conv445, i64 0)
  %tobool447 = icmp ne i64 %expval446, 0
  %.2 = select i1 %tobool447, i32 1, i32 0
  %.retval.13 = select i1 %tobool447, i32 -22, i32 %retval.1
  br label %cleanup450

cleanup450:                                       ; preds = %cleanup, %if.end438, %if.end408, %if.end131, %if.end102, %if.end68, %if.end39, %if.end
  %cleanup.dest.slot.1 = phi i32 [ 1, %if.end ], [ 1, %if.end39 ], [ 1, %if.end68 ], [ 1, %if.end102 ], [ 1, %if.end131 ], [ 1, %if.end408 ], [ %.2, %if.end438 ], [ %cleanup.dest.slot.0, %cleanup ]
  %retval.3 = phi i32 [ -22, %if.end ], [ -22, %if.end39 ], [ -22, %if.end68 ], [ -22, %if.end102 ], [ -22, %if.end131 ], [ -22, %if.end408 ], [ %.retval.13, %if.end438 ], [ %retval.2, %cleanup ]
  %cond = icmp eq i32 %cleanup.dest.slot.1, 0
  br i1 %cond, label %for.inc454, label %cleanup457

for.inc454:                                       ; preds = %cleanup450
  %inc455 = add nsw i32 %i.0, 1
  br label %for.cond

cleanup457:                                       ; preds = %cleanup450, %for.cond
  %retval.4 = phi i32 [ 0, %for.cond ], [ %retval.3, %cleanup450 ]
  ret i32 %retval.4
}

declare void @ieee80211_set_bitrate_flags(%struct.wiphy*) #2

declare i32 @device_add(%struct.device*) #2

declare void @wiphy_regulatory_register(%struct.wiphy*) #2

; Function Attrs: inlinehint nounwind uwtable
define internal void @list_add_rcu(%struct.list_head* %new, %struct.list_head* %head) #4 {
entry:
  %next = getelementptr inbounds %struct.list_head, %struct.list_head* %head, i32 0, i32 0
  %0 = load %struct.list_head*, %struct.list_head** %next, align 8, !tbaa !75
  call void @__list_add_rcu(%struct.list_head* %new, %struct.list_head* %head, %struct.list_head* %0)
  ret void
}

declare %struct.dentry* @debugfs_create_dir(i8*, %struct.dentry*) #2

; Function Attrs: inlinehint nounwind uwtable
define internal zeroext i1 @IS_ERR(i8* %ptr) #4 {
entry:
  %0 = ptrtoint i8* %ptr to i64
  %1 = inttoptr i64 %0 to i8*
  %2 = ptrtoint i8* %1 to i64
  %cmp = icmp uge i64 %2, -4095
  %lnot = xor i1 %cmp, true
  %lnot1 = xor i1 %lnot, true
  %lnot.ext = zext i1 %lnot1 to i32
  %conv = sext i32 %lnot.ext to i64
  %expval = call i64 @llvm.expect.i64(i64 %conv, i64 0)
  %tobool = icmp ne i64 %expval, 0
  ret i1 %tobool
}

; Function Attrs: inlinehint nounwind uwtable
define internal void @cfg80211_debugfs_rdev_add(%struct.cfg80211_registered_device* %rdev) #4 {
entry:
  ret void
}

; Function Attrs: inlinehint nounwind uwtable
define internal void @nl80211_send_reg_change_event(%struct.regulatory_request* %request) #4 {
entry:
  call void @nl80211_common_reg_change_event(i32 36, %struct.regulatory_request* %request)
  ret void
}

declare i32 @rfkill_register(%struct.rfkill*) #2

declare void @rfkill_destroy(%struct.rfkill*) #2

; Function Attrs: nounwind uwtable
define void @wiphy_unregister(%struct.wiphy* %wiphy) #0 {
entry:
  %__wait = alloca %struct.__wait_queue, align 8
  %call = call %struct.cfg80211_registered_device* @wiphy_to_rdev(%struct.wiphy* %wiphy)
  %call2 = call i32 @_cond_resched()
  call void @rtnl_lock()
  %opencount = getelementptr inbounds %struct.cfg80211_registered_device, %struct.cfg80211_registered_device* %call, i32 0, i32 11
  %0 = load i32, i32* %opencount, align 8, !tbaa !60
  call void @rtnl_unlock()
  %cmp = icmp eq i32 %0, 0
  %conv = zext i1 %cmp to i32
  %tobool = icmp ne i32 %conv, 0
  br i1 %tobool, label %do.end15, label %if.end

if.end:                                           ; preds = %entry
  %1 = bitcast %struct.__wait_queue* %__wait to i8*
  call void @llvm.lifetime.start.p0i8(i64 40, i8* %1) #6
  call void @init_wait_entry(%struct.__wait_queue* %__wait, i32 0)
  br label %for.cond

for.cond:                                         ; preds = %cleanup.cont, %if.end
  %dev_wait = getelementptr inbounds %struct.cfg80211_registered_device, %struct.cfg80211_registered_device* %call, i32 0, i32 12
  %call3 = call i64 @prepare_to_wait_event(%struct.__wait_queue_head* %dev_wait, %struct.__wait_queue* %__wait, i32 2)
  call void @rtnl_lock()
  %opencount5 = getelementptr inbounds %struct.cfg80211_registered_device, %struct.cfg80211_registered_device* %call, i32 0, i32 11
  %2 = load i32, i32* %opencount5, align 8, !tbaa !60
  call void @rtnl_unlock()
  %cmp7 = icmp eq i32 %2, 0
  %conv8 = zext i1 %cmp7 to i32
  %tobool9 = icmp ne i32 %conv8, 0
  br i1 %tobool9, label %cleanup, label %if.end11

if.end11:                                         ; preds = %for.cond
  call void @schedule()
  br label %cleanup

cleanup:                                          ; preds = %for.cond, %if.end11
  %cleanup.dest.slot.0 = phi i32 [ 0, %if.end11 ], [ 6, %for.cond ]
  %switch = icmp ult i32 %cleanup.dest.slot.0, 1
  br i1 %switch, label %cleanup.cont, label %for.end

cleanup.cont:                                     ; preds = %cleanup
  br label %for.cond

for.end:                                          ; preds = %cleanup
  %dev_wait12 = getelementptr inbounds %struct.cfg80211_registered_device, %struct.cfg80211_registered_device* %call, i32 0, i32 12
  call void @finish_wait(%struct.__wait_queue_head* %dev_wait12, %struct.__wait_queue* %__wait)
  %3 = bitcast %struct.__wait_queue* %__wait to i8*
  call void @llvm.lifetime.end.p0i8(i64 40, i8* %3) #6
  br label %do.end15

do.end15:                                         ; preds = %entry, %for.end
  %rfkill = getelementptr inbounds %struct.cfg80211_registered_device, %struct.cfg80211_registered_device* %call, i32 0, i32 3
  %4 = load %struct.rfkill*, %struct.rfkill** %rfkill, align 16, !tbaa !128
  %tobool16 = icmp ne %struct.rfkill* %4, null
  br i1 %tobool16, label %if.then17, label %if.end19

if.then17:                                        ; preds = %do.end15
  %rfkill18 = getelementptr inbounds %struct.cfg80211_registered_device, %struct.cfg80211_registered_device* %call, i32 0, i32 3
  %5 = load %struct.rfkill*, %struct.rfkill** %rfkill18, align 16, !tbaa !128
  call void @rfkill_unregister(%struct.rfkill* %5)
  br label %if.end19

if.end19:                                         ; preds = %if.then17, %do.end15
  call void @rtnl_lock()
  call void @nl80211_notify_wiphy(%struct.cfg80211_registered_device* %call, i32 4)
  %wiphy20 = getelementptr inbounds %struct.cfg80211_registered_device, %struct.cfg80211_registered_device* %call, i32 0, i32 42
  %registered = getelementptr inbounds %struct.wiphy, %struct.wiphy* %wiphy20, i32 0, i32 51
  store i8 0, i8* %registered, align 8, !tbaa !198
  %wiphy21 = getelementptr inbounds %struct.cfg80211_registered_device, %struct.cfg80211_registered_device* %call, i32 0, i32 42
  %wdev_list = getelementptr inbounds %struct.wiphy, %struct.wiphy* %wiphy21, i32 0, i32 55
  %call22 = call i32 @list_empty(%struct.list_head* %wdev_list)
  %tobool23 = icmp ne i32 %call22, 0
  %lnot = xor i1 %tobool23, true
  %lnot24 = xor i1 %lnot, true
  %lnot25 = xor i1 %lnot24, true
  %lnot.ext = zext i1 %lnot25 to i32
  %tobool26 = icmp ne i32 %lnot.ext, 0
  %lnot27 = xor i1 %tobool26, true
  %lnot29 = xor i1 %lnot27, true
  %lnot.ext30 = zext i1 %lnot29 to i32
  %conv31 = sext i32 %lnot.ext30 to i64
  %expval = call i64 @llvm.expect.i64(i64 %conv31, i64 0)
  %tobool32 = icmp ne i64 %expval, 0
  br i1 %tobool32, label %if.then33, label %if.end34

if.then33:                                        ; preds = %if.end19
  call void @warn_slowpath_null(i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.1, i32 0, i32 0), i32 890)
  br label %if.end34

if.end34:                                         ; preds = %if.then33, %if.end19
  %tobool36 = icmp ne i32 %lnot.ext, 0
  %lnot37 = xor i1 %tobool36, true
  %lnot39 = xor i1 %lnot37, true
  %lnot.ext40 = zext i1 %lnot39 to i32
  %conv41 = sext i32 %lnot.ext40 to i64
  %expval42 = call i64 @llvm.expect.i64(i64 %conv41, i64 0)
  %wiphy43 = getelementptr inbounds %struct.cfg80211_registered_device, %struct.cfg80211_registered_device* %call, i32 0, i32 42
  %debugfsdir = getelementptr inbounds %struct.wiphy, %struct.wiphy* %wiphy43, i32 0, i32 52
  %6 = load %struct.dentry*, %struct.dentry** %debugfsdir, align 32, !tbaa !39
  call void @debugfs_remove_recursive(%struct.dentry* %6)
  %list = getelementptr inbounds %struct.cfg80211_registered_device, %struct.cfg80211_registered_device* %call, i32 0, i32 1
  call void @list_del_rcu(%struct.list_head* %list)
  call void @synchronize_rcu()
  call void @wiphy_regulatory_deregister(%struct.wiphy* %wiphy)
  %7 = load i32, i32* @cfg80211_rdev_list_generation, align 4, !tbaa !46
  %inc = add nsw i32 %7, 1
  store i32 %inc, i32* @cfg80211_rdev_list_generation, align 4, !tbaa !46
  %wiphy44 = getelementptr inbounds %struct.cfg80211_registered_device, %struct.cfg80211_registered_device* %call, i32 0, i32 42
  %dev = getelementptr inbounds %struct.wiphy, %struct.wiphy* %wiphy44, i32 0, i32 50
  call void @device_del(%struct.device* %dev)
  call void @rtnl_unlock()
  %scan_done_wk = getelementptr inbounds %struct.cfg80211_registered_device, %struct.cfg80211_registered_device* %call, i32 0, i32 29
  %call45 = call zeroext i1 @flush_work(%struct.work_struct* %scan_done_wk)
  %conn_work = getelementptr inbounds %struct.cfg80211_registered_device, %struct.cfg80211_registered_device* %call, i32 0, i32 32
  %call46 = call zeroext i1 @cancel_work_sync(%struct.work_struct* %conn_work)
  %event_work = getelementptr inbounds %struct.cfg80211_registered_device, %struct.cfg80211_registered_device* %call, i32 0, i32 33
  %call47 = call zeroext i1 @flush_work(%struct.work_struct* %event_work)
  %dfs_update_channels_wk = getelementptr inbounds %struct.cfg80211_registered_device, %struct.cfg80211_registered_device* %call, i32 0, i32 34
  %call48 = call zeroext i1 @cancel_delayed_work_sync(%struct.delayed_work* %dfs_update_channels_wk)
  %destroy_work = getelementptr inbounds %struct.cfg80211_registered_device, %struct.cfg80211_registered_device* %call, i32 0, i32 39
  %call49 = call zeroext i1 @flush_work(%struct.work_struct* %destroy_work)
  %sched_scan_stop_wk = getelementptr inbounds %struct.cfg80211_registered_device, %struct.cfg80211_registered_device* %call, i32 0, i32 40
  %call50 = call zeroext i1 @flush_work(%struct.work_struct* %sched_scan_stop_wk)
  %mlme_unreg_wk = getelementptr inbounds %struct.cfg80211_registered_device, %struct.cfg80211_registered_device* %call, i32 0, i32 17
  %call51 = call zeroext i1 @flush_work(%struct.work_struct* %mlme_unreg_wk)
  %wiphy52 = getelementptr inbounds %struct.cfg80211_registered_device, %struct.cfg80211_registered_device* %call, i32 0, i32 42
  %wowlan_config = getelementptr inbounds %struct.wiphy, %struct.wiphy* %wiphy52, i32 0, i32 35
  %8 = load %struct.cfg80211_wowlan*, %struct.cfg80211_wowlan** %wowlan_config, align 16, !tbaa !212
  %tobool53 = icmp ne %struct.cfg80211_wowlan* %8, null
  br i1 %tobool53, label %land.lhs.true, label %if.end56

land.lhs.true:                                    ; preds = %if.end34
  %ops = getelementptr inbounds %struct.cfg80211_registered_device, %struct.cfg80211_registered_device* %call, i32 0, i32 0
  %9 = load %struct.cfg80211_ops*, %struct.cfg80211_ops** %ops, align 32, !tbaa !68
  %set_wakeup = getelementptr inbounds %struct.cfg80211_ops, %struct.cfg80211_ops* %9, i32 0, i32 2
  %10 = load void (%struct.wiphy*, i1)*, void (%struct.wiphy*, i1)** %set_wakeup, align 8, !tbaa !213
  %tobool54 = icmp ne void (%struct.wiphy*, i1)* %10, null
  br i1 %tobool54, label %if.then55, label %if.end56

if.then55:                                        ; preds = %land.lhs.true
  call void @rdev_set_wakeup(%struct.cfg80211_registered_device* %call, i1 zeroext false)
  br label %if.end56

if.end56:                                         ; preds = %if.then55, %land.lhs.true, %if.end34
  call void @cfg80211_rdev_free_wowlan(%struct.cfg80211_registered_device* %call)
  call void @cfg80211_rdev_free_coalesce(%struct.cfg80211_registered_device* %call)
  ret void
}

; Function Attrs: nounwind uwtable
define void @wiphy_rfkill_start_polling(%struct.wiphy* %wiphy) #0 {
entry:
  %call = call %struct.cfg80211_registered_device* @wiphy_to_rdev(%struct.wiphy* %wiphy)
  %ops = getelementptr inbounds %struct.cfg80211_registered_device, %struct.cfg80211_registered_device* %call, i32 0, i32 0
  %0 = load %struct.cfg80211_ops*, %struct.cfg80211_ops** %ops, align 32, !tbaa !68
  %rfkill_poll = getelementptr inbounds %struct.cfg80211_ops, %struct.cfg80211_ops* %0, i32 0, i32 52
  %1 = load void (%struct.wiphy*)*, void (%struct.wiphy*)** %rfkill_poll, align 8, !tbaa !214
  %tobool = icmp ne void (%struct.wiphy*)* %1, null
  br i1 %tobool, label %if.end, label %cleanup.cont

if.end:                                           ; preds = %entry
  %rfkill_ops = getelementptr inbounds %struct.cfg80211_registered_device, %struct.cfg80211_registered_device* %call, i32 0, i32 2
  %poll = getelementptr inbounds %struct.rfkill_ops, %struct.rfkill_ops* %rfkill_ops, i32 0, i32 0
  store void (%struct.rfkill*, i8*)* @cfg80211_rfkill_poll, void (%struct.rfkill*, i8*)** %poll, align 8, !tbaa !215
  %rfkill = getelementptr inbounds %struct.cfg80211_registered_device, %struct.cfg80211_registered_device* %call, i32 0, i32 3
  %2 = load %struct.rfkill*, %struct.rfkill** %rfkill, align 16, !tbaa !128
  call void @rfkill_resume_polling(%struct.rfkill* %2)
  br label %cleanup.cont

cleanup.cont:                                     ; preds = %if.end, %entry
  ret void
}

; Function Attrs: nounwind uwtable
define internal void @cfg80211_rfkill_poll(%struct.rfkill* %rfkill, i8* %data) #0 {
entry:
  %0 = bitcast i8* %data to %struct.cfg80211_registered_device*
  call void @rdev_rfkill_poll(%struct.cfg80211_registered_device* %0)
  ret void
}

declare void @rfkill_resume_polling(%struct.rfkill*) #2

; Function Attrs: nounwind uwtable
define void @wiphy_rfkill_stop_polling(%struct.wiphy* %wiphy) #0 {
entry:
  %call = call %struct.cfg80211_registered_device* @wiphy_to_rdev(%struct.wiphy* %wiphy)
  %rfkill = getelementptr inbounds %struct.cfg80211_registered_device, %struct.cfg80211_registered_device* %call, i32 0, i32 3
  %0 = load %struct.rfkill*, %struct.rfkill** %rfkill, align 16, !tbaa !128
  call void @rfkill_pause_polling(%struct.rfkill* %0)
  ret void
}

declare void @rfkill_pause_polling(%struct.rfkill*) #2

declare i32 @_cond_resched() #2

declare void @init_wait_entry(%struct.__wait_queue*, i32) #2

declare i64 @prepare_to_wait_event(%struct.__wait_queue_head*, %struct.__wait_queue*, i32) #2

declare void @schedule() #2

declare void @finish_wait(%struct.__wait_queue_head*, %struct.__wait_queue*) #2

declare void @rfkill_unregister(%struct.rfkill*) #2

; Function Attrs: inlinehint nounwind uwtable
define internal i32 @list_empty(%struct.list_head* %head) #4 {
entry:
  %__u = alloca %union.anon.97, align 8
  %0 = bitcast %union.anon.97* %__u to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %0) #6
  %next = getelementptr inbounds %struct.list_head, %struct.list_head* %head, i32 0, i32 0
  %1 = bitcast %struct.list_head** %next to i8*
  %__c = bitcast %union.anon.97* %__u to [1 x i8]*
  %arraydecay = getelementptr inbounds [1 x i8], [1 x i8]* %__c, i32 0, i32 0
  call void @__read_once_size(i8* %1, i8* %arraydecay, i32 8)
  %__val = bitcast %union.anon.97* %__u to %struct.list_head**
  %2 = load %struct.list_head*, %struct.list_head** %__val, align 8, !tbaa !72
  %3 = bitcast %union.anon.97* %__u to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %3) #6
  %cmp = icmp eq %struct.list_head* %2, %head
  %conv = zext i1 %cmp to i32
  ret i32 %conv
}

declare void @debugfs_remove_recursive(%struct.dentry*) #2

; Function Attrs: inlinehint nounwind uwtable
define internal void @list_del_rcu(%struct.list_head* %entry1) #4 {
entry:
  call void @__list_del_entry(%struct.list_head* %entry1)
  %prev = getelementptr inbounds %struct.list_head, %struct.list_head* %entry1, i32 0, i32 1
  store %struct.list_head* bitcast (i8* getelementptr (i8, i8* inttoptr (i64 512 to i8*), i64 -2401263026318606336) to %struct.list_head*), %struct.list_head** %prev, align 8, !tbaa !82
  ret void
}

; Function Attrs: inlinehint nounwind uwtable
define internal void @synchronize_rcu() #4 {
entry:
  call void @synchronize_sched()
  ret void
}

declare void @wiphy_regulatory_deregister(%struct.wiphy*) #2

declare void @device_del(%struct.device*) #2

declare zeroext i1 @flush_work(%struct.work_struct*) #2

declare zeroext i1 @cancel_work_sync(%struct.work_struct*) #2

declare zeroext i1 @cancel_delayed_work_sync(%struct.delayed_work*) #2

; Function Attrs: inlinehint nounwind uwtable
define internal void @rdev_set_wakeup(%struct.cfg80211_registered_device* %rdev, i1 zeroext %enabled) #4 {
entry:
  %frombool = zext i1 %enabled to i8
  %wiphy = getelementptr inbounds %struct.cfg80211_registered_device, %struct.cfg80211_registered_device* %rdev, i32 0, i32 42
  %tobool = trunc i8 %frombool to i1
  call void @trace_rdev_set_wakeup(%struct.wiphy* %wiphy, i1 zeroext %tobool)
  %ops = getelementptr inbounds %struct.cfg80211_registered_device, %struct.cfg80211_registered_device* %rdev, i32 0, i32 0
  %0 = load %struct.cfg80211_ops*, %struct.cfg80211_ops** %ops, align 32, !tbaa !68
  %set_wakeup = getelementptr inbounds %struct.cfg80211_ops, %struct.cfg80211_ops* %0, i32 0, i32 2
  %1 = load void (%struct.wiphy*, i1)*, void (%struct.wiphy*, i1)** %set_wakeup, align 8, !tbaa !213
  %wiphy1 = getelementptr inbounds %struct.cfg80211_registered_device, %struct.cfg80211_registered_device* %rdev, i32 0, i32 42
  %tobool2 = trunc i8 %frombool to i1
  call void %1(%struct.wiphy* %wiphy1, i1 zeroext %tobool2)
  %wiphy3 = getelementptr inbounds %struct.cfg80211_registered_device, %struct.cfg80211_registered_device* %rdev, i32 0, i32 42
  call void @trace_rdev_return_void(%struct.wiphy* %wiphy3)
  ret void
}

; Function Attrs: inlinehint nounwind uwtable
define internal void @cfg80211_rdev_free_wowlan(%struct.cfg80211_registered_device* %rdev) #4 {
entry:
  %wiphy = getelementptr inbounds %struct.cfg80211_registered_device, %struct.cfg80211_registered_device* %rdev, i32 0, i32 42
  %wowlan_config = getelementptr inbounds %struct.wiphy, %struct.wiphy* %wiphy, i32 0, i32 35
  %0 = load %struct.cfg80211_wowlan*, %struct.cfg80211_wowlan** %wowlan_config, align 16, !tbaa !212
  %tobool = icmp ne %struct.cfg80211_wowlan* %0, null
  br i1 %tobool, label %if.end, label %cleanup.cont

if.end:                                           ; preds = %entry
  br label %for.cond

for.cond:                                         ; preds = %for.body, %if.end
  %i.0 = phi i32 [ 0, %if.end ], [ %inc, %for.body ]
  %wiphy1 = getelementptr inbounds %struct.cfg80211_registered_device, %struct.cfg80211_registered_device* %rdev, i32 0, i32 42
  %wowlan_config2 = getelementptr inbounds %struct.wiphy, %struct.wiphy* %wiphy1, i32 0, i32 35
  %1 = load %struct.cfg80211_wowlan*, %struct.cfg80211_wowlan** %wowlan_config2, align 16, !tbaa !212
  %n_patterns = getelementptr inbounds %struct.cfg80211_wowlan, %struct.cfg80211_wowlan* %1, i32 0, i32 9
  %2 = load i32, i32* %n_patterns, align 8, !tbaa !216
  %cmp = icmp slt i32 %i.0, %2
  %wiphy3 = getelementptr inbounds %struct.cfg80211_registered_device, %struct.cfg80211_registered_device* %rdev, i32 0, i32 42
  %wowlan_config4 = getelementptr inbounds %struct.wiphy, %struct.wiphy* %wiphy3, i32 0, i32 35
  %3 = load %struct.cfg80211_wowlan*, %struct.cfg80211_wowlan** %wowlan_config4, align 16, !tbaa !212
  %patterns = getelementptr inbounds %struct.cfg80211_wowlan, %struct.cfg80211_wowlan* %3, i32 0, i32 7
  %4 = load %struct.cfg80211_pkt_pattern*, %struct.cfg80211_pkt_pattern** %patterns, align 8, !tbaa !218
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %idxprom = sext i32 %i.0 to i64
  %arrayidx = getelementptr inbounds %struct.cfg80211_pkt_pattern, %struct.cfg80211_pkt_pattern* %4, i64 %idxprom
  %mask = getelementptr inbounds %struct.cfg80211_pkt_pattern, %struct.cfg80211_pkt_pattern* %arrayidx, i32 0, i32 0
  %5 = load i8*, i8** %mask, align 8, !tbaa !219
  call void @kfree(i8* %5)
  %inc = add nsw i32 %i.0, 1
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %6 = bitcast %struct.cfg80211_pkt_pattern* %4 to i8*
  call void @kfree(i8* %6)
  %wiphy8 = getelementptr inbounds %struct.cfg80211_registered_device, %struct.cfg80211_registered_device* %rdev, i32 0, i32 42
  %wowlan_config9 = getelementptr inbounds %struct.wiphy, %struct.wiphy* %wiphy8, i32 0, i32 35
  %7 = load %struct.cfg80211_wowlan*, %struct.cfg80211_wowlan** %wowlan_config9, align 16, !tbaa !212
  %tcp = getelementptr inbounds %struct.cfg80211_wowlan, %struct.cfg80211_wowlan* %7, i32 0, i32 8
  %8 = load %struct.cfg80211_wowlan_tcp*, %struct.cfg80211_wowlan_tcp** %tcp, align 8, !tbaa !221
  %tobool10 = icmp ne %struct.cfg80211_wowlan_tcp* %8, null
  br i1 %tobool10, label %land.lhs.true, label %if.end20

land.lhs.true:                                    ; preds = %for.end
  %wiphy11 = getelementptr inbounds %struct.cfg80211_registered_device, %struct.cfg80211_registered_device* %rdev, i32 0, i32 42
  %wowlan_config12 = getelementptr inbounds %struct.wiphy, %struct.wiphy* %wiphy11, i32 0, i32 35
  %9 = load %struct.cfg80211_wowlan*, %struct.cfg80211_wowlan** %wowlan_config12, align 16, !tbaa !212
  %tcp13 = getelementptr inbounds %struct.cfg80211_wowlan, %struct.cfg80211_wowlan* %9, i32 0, i32 8
  %10 = load %struct.cfg80211_wowlan_tcp*, %struct.cfg80211_wowlan_tcp** %tcp13, align 8, !tbaa !221
  %sock = getelementptr inbounds %struct.cfg80211_wowlan_tcp, %struct.cfg80211_wowlan_tcp* %10, i32 0, i32 0
  %11 = load %struct.socket*, %struct.socket** %sock, align 8, !tbaa !2
  %tobool14 = icmp ne %struct.socket* %11, null
  br i1 %tobool14, label %if.then15, label %if.end20

if.then15:                                        ; preds = %land.lhs.true
  %wiphy16 = getelementptr inbounds %struct.cfg80211_registered_device, %struct.cfg80211_registered_device* %rdev, i32 0, i32 42
  %wowlan_config17 = getelementptr inbounds %struct.wiphy, %struct.wiphy* %wiphy16, i32 0, i32 35
  %12 = load %struct.cfg80211_wowlan*, %struct.cfg80211_wowlan** %wowlan_config17, align 16, !tbaa !212
  %tcp18 = getelementptr inbounds %struct.cfg80211_wowlan, %struct.cfg80211_wowlan* %12, i32 0, i32 8
  %13 = load %struct.cfg80211_wowlan_tcp*, %struct.cfg80211_wowlan_tcp** %tcp18, align 8, !tbaa !221
  %sock19 = getelementptr inbounds %struct.cfg80211_wowlan_tcp, %struct.cfg80211_wowlan_tcp* %13, i32 0, i32 0
  %14 = load %struct.socket*, %struct.socket** %sock19, align 8, !tbaa !2
  call void @sock_release(%struct.socket* %14)
  br label %if.end20

if.end20:                                         ; preds = %if.then15, %land.lhs.true, %for.end
  %wiphy21 = getelementptr inbounds %struct.cfg80211_registered_device, %struct.cfg80211_registered_device* %rdev, i32 0, i32 42
  %wowlan_config22 = getelementptr inbounds %struct.wiphy, %struct.wiphy* %wiphy21, i32 0, i32 35
  %15 = load %struct.cfg80211_wowlan*, %struct.cfg80211_wowlan** %wowlan_config22, align 16, !tbaa !212
  %tcp23 = getelementptr inbounds %struct.cfg80211_wowlan, %struct.cfg80211_wowlan* %15, i32 0, i32 8
  %16 = load %struct.cfg80211_wowlan_tcp*, %struct.cfg80211_wowlan_tcp** %tcp23, align 8, !tbaa !221
  %17 = bitcast %struct.cfg80211_wowlan_tcp* %16 to i8*
  call void @kfree(i8* %17)
  %wiphy24 = getelementptr inbounds %struct.cfg80211_registered_device, %struct.cfg80211_registered_device* %rdev, i32 0, i32 42
  %wowlan_config25 = getelementptr inbounds %struct.wiphy, %struct.wiphy* %wiphy24, i32 0, i32 35
  %18 = load %struct.cfg80211_wowlan*, %struct.cfg80211_wowlan** %wowlan_config25, align 16, !tbaa !212
  %nd_config = getelementptr inbounds %struct.cfg80211_wowlan, %struct.cfg80211_wowlan* %18, i32 0, i32 10
  %19 = load %struct.cfg80211_sched_scan_request*, %struct.cfg80211_sched_scan_request** %nd_config, align 8, !tbaa !222
  %20 = bitcast %struct.cfg80211_sched_scan_request* %19 to i8*
  call void @kfree(i8* %20)
  %wiphy26 = getelementptr inbounds %struct.cfg80211_registered_device, %struct.cfg80211_registered_device* %rdev, i32 0, i32 42
  %wowlan_config27 = getelementptr inbounds %struct.wiphy, %struct.wiphy* %wiphy26, i32 0, i32 35
  %21 = load %struct.cfg80211_wowlan*, %struct.cfg80211_wowlan** %wowlan_config27, align 16, !tbaa !212
  %22 = bitcast %struct.cfg80211_wowlan* %21 to i8*
  call void @kfree(i8* %22)
  br label %cleanup.cont

cleanup.cont:                                     ; preds = %if.end20, %entry
  ret void
}

declare void @cfg80211_rdev_free_coalesce(%struct.cfg80211_registered_device*) #2

; Function Attrs: nounwind uwtable
define void @cfg80211_dev_free(%struct.cfg80211_registered_device* %rdev) #0 {
entry:
  %rfkill = getelementptr inbounds %struct.cfg80211_registered_device, %struct.cfg80211_registered_device* %rdev, i32 0, i32 3
  %0 = load %struct.rfkill*, %struct.rfkill** %rfkill, align 16, !tbaa !128
  call void @rfkill_destroy(%struct.rfkill* %0)
  %beacon_registrations = getelementptr inbounds %struct.cfg80211_registered_device, %struct.cfg80211_registered_device* %rdev, i32 0, i32 13
  %next = getelementptr inbounds %struct.list_head, %struct.list_head* %beacon_registrations, i32 0, i32 0
  %1 = load %struct.list_head*, %struct.list_head** %next, align 8, !tbaa !75
  %2 = bitcast %struct.list_head* %1 to i8*
  %add.ptr = getelementptr inbounds i8, i8* %2, i64 0
  %3 = bitcast i8* %add.ptr to %struct.cfg80211_beacon_registration*
  br label %for.cond

for.cond:                                         ; preds = %for.body, %entry
  %.sink = phi %struct.cfg80211_beacon_registration* [ %6, %for.body ], [ %3, %entry ]
  %reg.0 = phi %struct.cfg80211_beacon_registration* [ %3, %entry ], [ %6, %for.body ]
  %list10 = getelementptr inbounds %struct.cfg80211_beacon_registration, %struct.cfg80211_beacon_registration* %.sink, i32 0, i32 0
  %next11 = getelementptr inbounds %struct.list_head, %struct.list_head* %list10, i32 0, i32 0
  %4 = load %struct.list_head*, %struct.list_head** %next11, align 8, !tbaa !223
  %5 = bitcast %struct.list_head* %4 to i8*
  %add.ptr13 = getelementptr inbounds i8, i8* %5, i64 0
  %6 = bitcast i8* %add.ptr13 to %struct.cfg80211_beacon_registration*
  %list6 = getelementptr inbounds %struct.cfg80211_beacon_registration, %struct.cfg80211_beacon_registration* %reg.0, i32 0, i32 0
  %beacon_registrations7 = getelementptr inbounds %struct.cfg80211_registered_device, %struct.cfg80211_registered_device* %rdev, i32 0, i32 13
  %cmp = icmp ne %struct.list_head* %list6, %beacon_registrations7
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %list8 = getelementptr inbounds %struct.cfg80211_beacon_registration, %struct.cfg80211_beacon_registration* %reg.0, i32 0, i32 0
  call void @list_del(%struct.list_head* %list8)
  %7 = bitcast %struct.cfg80211_beacon_registration* %reg.0 to i8*
  call void @kfree(i8* %7)
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %bss_list = getelementptr inbounds %struct.cfg80211_registered_device, %struct.cfg80211_registered_device* %rdev, i32 0, i32 21
  %next15 = getelementptr inbounds %struct.list_head, %struct.list_head* %bss_list, i32 0, i32 0
  %8 = load %struct.list_head*, %struct.list_head** %next15, align 8, !tbaa !75
  %9 = bitcast %struct.list_head* %8 to i8*
  %add.ptr17 = getelementptr inbounds i8, i8* %9, i64 0
  %10 = bitcast i8* %add.ptr17 to %struct.cfg80211_internal_bss*
  br label %for.cond23

for.cond23:                                       ; preds = %for.body27, %for.end
  %.sink4 = phi %struct.cfg80211_internal_bss* [ %13, %for.body27 ], [ %10, %for.end ]
  %scan.0 = phi %struct.cfg80211_internal_bss* [ %10, %for.end ], [ %13, %for.body27 ]
  %list30 = getelementptr inbounds %struct.cfg80211_internal_bss, %struct.cfg80211_internal_bss* %.sink4, i32 0, i32 0
  %next31 = getelementptr inbounds %struct.list_head, %struct.list_head* %list30, i32 0, i32 0
  %11 = load %struct.list_head*, %struct.list_head** %next31, align 8, !tbaa !225
  %12 = bitcast %struct.list_head* %11 to i8*
  %add.ptr33 = getelementptr inbounds i8, i8* %12, i64 0
  %13 = bitcast i8* %add.ptr33 to %struct.cfg80211_internal_bss*
  %list24 = getelementptr inbounds %struct.cfg80211_internal_bss, %struct.cfg80211_internal_bss* %scan.0, i32 0, i32 0
  %bss_list25 = getelementptr inbounds %struct.cfg80211_registered_device, %struct.cfg80211_registered_device* %rdev, i32 0, i32 21
  %cmp26 = icmp ne %struct.list_head* %list24, %bss_list25
  br i1 %cmp26, label %for.body27, label %for.end34

for.body27:                                       ; preds = %for.cond23
  %wiphy = getelementptr inbounds %struct.cfg80211_registered_device, %struct.cfg80211_registered_device* %rdev, i32 0, i32 42
  %pub = getelementptr inbounds %struct.cfg80211_internal_bss, %struct.cfg80211_internal_bss* %scan.0, i32 0, i32 9
  call void @cfg80211_put_bss(%struct.wiphy* %wiphy, %struct.cfg80211_bss* %pub)
  br label %for.cond23

for.end34:                                        ; preds = %for.cond23
  %14 = bitcast %struct.cfg80211_registered_device* %rdev to i8*
  call void @kfree(i8* %14)
  ret void
}

declare void @cfg80211_put_bss(%struct.wiphy*, %struct.cfg80211_bss*) #2

; Function Attrs: nounwind uwtable
define void @wiphy_free(%struct.wiphy* %wiphy) #0 {
entry:
  %dev = getelementptr inbounds %struct.wiphy, %struct.wiphy* %wiphy, i32 0, i32 50
  call void @put_device(%struct.device* %dev)
  ret void
}

declare void @put_device(%struct.device*) #2

; Function Attrs: nounwind uwtable
define void @wiphy_rfkill_set_hw_state(%struct.wiphy* %wiphy, i1 zeroext %blocked) #0 {
entry:
  %frombool = zext i1 %blocked to i8
  %call = call %struct.cfg80211_registered_device* @wiphy_to_rdev(%struct.wiphy* %wiphy)
  %rfkill = getelementptr inbounds %struct.cfg80211_registered_device, %struct.cfg80211_registered_device* %call, i32 0, i32 3
  %0 = load %struct.rfkill*, %struct.rfkill** %rfkill, align 16, !tbaa !128
  %tobool = trunc i8 %frombool to i1
  %call1 = call zeroext i1 @rfkill_set_hw_state(%struct.rfkill* %0, i1 zeroext %tobool)
  br i1 %call1, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %rfkill_sync = getelementptr inbounds %struct.cfg80211_registered_device, %struct.cfg80211_registered_device* %call, i32 0, i32 4
  %call2 = call zeroext i1 @schedule_work(%struct.work_struct* %rfkill_sync)
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  ret void
}

declare zeroext i1 @rfkill_set_hw_state(%struct.rfkill*, i1 zeroext) #2

; Function Attrs: inlinehint nounwind uwtable
define internal zeroext i1 @schedule_work(%struct.work_struct* %work) #4 {
entry:
  %0 = load %struct.workqueue_struct*, %struct.workqueue_struct** @system_wq, align 8, !tbaa !2
  %call = call zeroext i1 @queue_work(%struct.workqueue_struct* %0, %struct.work_struct* %work)
  ret i1 %call
}

; Function Attrs: nounwind uwtable
define void @cfg80211_unregister_wdev(%struct.wireless_dev* %wdev) #0 {
entry:
  %wiphy = getelementptr inbounds %struct.wireless_dev, %struct.wireless_dev* %wdev, i32 0, i32 0
  %0 = load %struct.wiphy*, %struct.wiphy** %wiphy, align 8, !tbaa !229
  %call = call %struct.cfg80211_registered_device* @wiphy_to_rdev(%struct.wiphy* %0)
  %call1 = call i32 @rtnl_is_locked()
  %tobool = icmp ne i32 %call1, 0
  %lnot = xor i1 %tobool, true
  %lnot2 = xor i1 %lnot, true
  %lnot3 = xor i1 %lnot2, true
  %lnot.ext = zext i1 %lnot3 to i32
  %conv = sext i32 %lnot.ext to i64
  %expval = call i64 @llvm.expect.i64(i64 %conv, i64 0)
  %tobool4 = icmp ne i64 %expval, 0
  br i1 %tobool4, label %if.then, label %do.end

if.then:                                          ; preds = %entry
  %call5 = call i32 (i8*, ...) @printk(i8* getelementptr inbounds ([37 x i8], [37 x i8]* @.str, i32 0, i32 0), i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.1, i32 0, i32 0), i32 961)
  call void @dump_stack()
  br label %do.end

do.end:                                           ; preds = %if.then, %entry
  %netdev = getelementptr inbounds %struct.wireless_dev, %struct.wireless_dev* %wdev, i32 0, i32 3
  %1 = load %struct.net_device*, %struct.net_device** %netdev, align 8, !tbaa !48
  %tobool6 = icmp ne %struct.net_device* %1, null
  %lnot7 = xor i1 %tobool6, true
  %lnot9 = xor i1 %lnot7, true
  %lnot.ext10 = zext i1 %lnot9 to i32
  %tobool11 = icmp ne i32 %lnot.ext10, 0
  %lnot12 = xor i1 %tobool11, true
  %lnot14 = xor i1 %lnot12, true
  %lnot.ext15 = zext i1 %lnot14 to i32
  %conv16 = sext i32 %lnot.ext15 to i64
  %expval17 = call i64 @llvm.expect.i64(i64 %conv16, i64 0)
  %tobool18 = icmp ne i64 %expval17, 0
  br i1 %tobool18, label %if.then19, label %if.end20

if.then19:                                        ; preds = %do.end
  call void @warn_slowpath_null(i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.1, i32 0, i32 0), i32 963)
  br label %if.end20

if.end20:                                         ; preds = %if.then19, %do.end
  %tobool21 = icmp ne i32 %lnot.ext10, 0
  %lnot22 = xor i1 %tobool21, true
  %lnot24 = xor i1 %lnot22, true
  %lnot.ext25 = zext i1 %lnot24 to i32
  %conv26 = sext i32 %lnot.ext25 to i64
  %expval27 = call i64 @llvm.expect.i64(i64 %conv26, i64 0)
  %tobool28 = icmp ne i64 %expval27, 0
  br i1 %tobool28, label %cleanup.cont, label %if.end30

if.end30:                                         ; preds = %if.end20
  call void @nl80211_notify_iface(%struct.cfg80211_registered_device* %call, %struct.wireless_dev* %wdev, i32 8)
  %list = getelementptr inbounds %struct.wireless_dev, %struct.wireless_dev* %wdev, i32 0, i32 2
  call void @list_del_rcu(%struct.list_head* %list)
  %devlist_generation = getelementptr inbounds %struct.cfg80211_registered_device, %struct.cfg80211_registered_device* %call, i32 0, i32 9
  %2 = load i32, i32* %devlist_generation, align 16, !tbaa !230
  %inc = add nsw i32 %2, 1
  store i32 %inc, i32* %devlist_generation, align 16, !tbaa !230
  %iftype = getelementptr inbounds %struct.wireless_dev, %struct.wireless_dev* %wdev, i32 0, i32 1
  %3 = load i32, i32* %iftype, align 8, !tbaa !58
  br label %NodeBlock

NodeBlock:                                        ; preds = %if.end30
  %Pivot = icmp slt i32 %3, 12
  br i1 %Pivot, label %LeafBlock, label %LeafBlock1

LeafBlock1:                                       ; preds = %NodeBlock
  %SwitchLeaf2 = icmp eq i32 %3, 12
  br i1 %SwitchLeaf2, label %sw.bb31, label %NewDefault

LeafBlock:                                        ; preds = %NodeBlock
  %SwitchLeaf = icmp eq i32 %3, 10
  br i1 %SwitchLeaf, label %sw.bb, label %NewDefault

sw.bb:                                            ; preds = %LeafBlock
  call void @cfg80211_mlme_purge_registrations(%struct.wireless_dev* %wdev)
  call void @cfg80211_stop_p2p_device(%struct.cfg80211_registered_device* %call, %struct.wireless_dev* %wdev)
  br label %cleanup.cont

sw.bb31:                                          ; preds = %LeafBlock1
  call void @cfg80211_stop_nan(%struct.cfg80211_registered_device* %call, %struct.wireless_dev* %wdev)
  br label %cleanup.cont

NewDefault:                                       ; preds = %LeafBlock1, %LeafBlock
  br label %sw.default

sw.default:                                       ; preds = %NewDefault
  %tobool32 = icmp ne i32 1, 0
  br i1 %tobool32, label %land.rhs, label %land.end

land.rhs:                                         ; preds = %sw.default
  %4 = load i8, i8* @cfg80211_unregister_wdev.__warned, align 1, !tbaa !172, !range !66
  %tobool33 = trunc i8 %4 to i1
  %lnot34 = xor i1 %tobool33, true
  br label %land.end

land.end:                                         ; preds = %land.rhs, %sw.default
  %5 = phi i1 [ false, %sw.default ], [ %lnot34, %land.rhs ]
  %lnot36 = xor i1 %5, true
  %lnot38 = xor i1 %lnot36, true
  %lnot.ext39 = zext i1 %lnot38 to i32
  %conv40 = sext i32 %lnot.ext39 to i64
  %expval41 = call i64 @llvm.expect.i64(i64 %conv40, i64 0)
  %tobool42 = icmp ne i64 %expval41, 0
  br i1 %tobool42, label %if.then43, label %if.end63

if.then43:                                        ; preds = %land.end
  store i8 1, i8* @cfg80211_unregister_wdev.__warned, align 1, !tbaa !172
  %tobool45 = icmp ne i32 1, 0
  %lnot46 = xor i1 %tobool45, true
  %lnot48 = xor i1 %lnot46, true
  %lnot.ext49 = zext i1 %lnot48 to i32
  %conv50 = sext i32 %lnot.ext49 to i64
  %expval51 = call i64 @llvm.expect.i64(i64 %conv50, i64 0)
  %tobool52 = icmp ne i64 %expval51, 0
  br i1 %tobool52, label %if.then53, label %if.end54

if.then53:                                        ; preds = %if.then43
  call void @warn_slowpath_null(i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.1, i32 0, i32 0), i32 980)
  br label %if.end54

if.end54:                                         ; preds = %if.then53, %if.then43
  %tobool56 = icmp ne i32 1, 0
  %lnot57 = xor i1 %tobool56, true
  %lnot59 = xor i1 %lnot57, true
  %lnot.ext60 = zext i1 %lnot59 to i32
  %conv61 = sext i32 %lnot.ext60 to i64
  %expval62 = call i64 @llvm.expect.i64(i64 %conv61, i64 0)
  br label %if.end63

if.end63:                                         ; preds = %if.end54, %land.end
  %tobool65 = icmp ne i32 1, 0
  %lnot66 = xor i1 %tobool65, true
  %lnot68 = xor i1 %lnot66, true
  %lnot.ext69 = zext i1 %lnot68 to i32
  %conv70 = sext i32 %lnot.ext69 to i64
  %expval71 = call i64 @llvm.expect.i64(i64 %conv70, i64 0)
  br label %cleanup.cont

cleanup.cont:                                     ; preds = %if.end20, %if.end63, %sw.bb31, %sw.bb
  ret void
}

declare void @nl80211_notify_iface(%struct.cfg80211_registered_device*, %struct.wireless_dev*, i32) #2

declare void @cfg80211_mlme_purge_registrations(%struct.wireless_dev*) #2

; Function Attrs: nounwind uwtable
define void @cfg80211_update_iface_num(%struct.cfg80211_registered_device* %rdev, i32 %iftype, i32 %num) #0 {
entry:
  %call = call i32 @rtnl_is_locked()
  %tobool = icmp ne i32 %call, 0
  %lnot = xor i1 %tobool, true
  %lnot1 = xor i1 %lnot, true
  %lnot2 = xor i1 %lnot1, true
  %lnot.ext = zext i1 %lnot2 to i32
  %conv = sext i32 %lnot.ext to i64
  %expval = call i64 @llvm.expect.i64(i64 %conv, i64 0)
  %tobool3 = icmp ne i64 %expval, 0
  br i1 %tobool3, label %if.then, label %do.end

if.then:                                          ; preds = %entry
  %call4 = call i32 (i8*, ...) @printk(i8* getelementptr inbounds ([37 x i8], [37 x i8]* @.str, i32 0, i32 0), i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.1, i32 0, i32 0), i32 993)
  call void @dump_stack()
  br label %do.end

do.end:                                           ; preds = %entry, %if.then
  %num_running_ifaces = getelementptr inbounds %struct.cfg80211_registered_device, %struct.cfg80211_registered_device* %rdev, i32 0, i32 18
  %0 = load i32, i32* %num_running_ifaces, align 8, !tbaa !231
  %add = add nsw i32 %0, %num
  store i32 %add, i32* %num_running_ifaces, align 8, !tbaa !231
  %cmp = icmp eq i32 %iftype, 6
  br i1 %cmp, label %if.then6, label %if.end8

if.then6:                                         ; preds = %do.end
  %num_running_monitor_ifaces = getelementptr inbounds %struct.cfg80211_registered_device, %struct.cfg80211_registered_device* %rdev, i32 0, i32 19
  %1 = load i32, i32* %num_running_monitor_ifaces, align 4, !tbaa !232
  %add7 = add nsw i32 %1, %num
  store i32 %add7, i32* %num_running_monitor_ifaces, align 4, !tbaa !232
  br label %if.end8

if.end8:                                          ; preds = %if.then6, %do.end
  ret void
}

; Function Attrs: nounwind uwtable
define void @__cfg80211_leave(%struct.cfg80211_registered_device* %rdev, %struct.wireless_dev* %wdev) #0 {
entry:
  %netdev = getelementptr inbounds %struct.wireless_dev, %struct.wireless_dev* %wdev, i32 0, i32 3
  %0 = load %struct.net_device*, %struct.net_device** %netdev, align 8, !tbaa !48
  %call = call i32 @rtnl_is_locked()
  %tobool = icmp ne i32 %call, 0
  %lnot = xor i1 %tobool, true
  %lnot1 = xor i1 %lnot, true
  %lnot2 = xor i1 %lnot1, true
  %lnot.ext = zext i1 %lnot2 to i32
  %conv = sext i32 %lnot.ext to i64
  %expval = call i64 @llvm.expect.i64(i64 %conv, i64 0)
  %tobool3 = icmp ne i64 %expval, 0
  br i1 %tobool3, label %if.then, label %do.body5

if.then:                                          ; preds = %entry
  %call4 = call i32 (i8*, ...) @printk(i8* getelementptr inbounds ([37 x i8], [37 x i8]* @.str, i32 0, i32 0), i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.1, i32 0, i32 0), i32 1006)
  call void @dump_stack()
  br label %do.body5

do.body5:                                         ; preds = %entry, %if.then
  %mtx = getelementptr inbounds %struct.wireless_dev, %struct.wireless_dev* %wdev, i32 0, i32 7
  %iftype = getelementptr inbounds %struct.wireless_dev, %struct.wireless_dev* %wdev, i32 0, i32 1
  %1 = load i32, i32* %iftype, align 8, !tbaa !58
  br label %NodeBlock15

NodeBlock15:                                      ; preds = %do.body5
  %Pivot16 = icmp slt i32 %1, 7
  br i1 %Pivot16, label %NodeBlock3, label %NodeBlock13

NodeBlock13:                                      ; preds = %NodeBlock15
  %Pivot14 = icmp slt i32 %1, 9
  br i1 %Pivot14, label %NodeBlock5, label %NodeBlock11

NodeBlock11:                                      ; preds = %NodeBlock13
  %Pivot12 = icmp slt i32 %1, 11
  br i1 %Pivot12, label %LeafBlock7, label %LeafBlock9

LeafBlock9:                                       ; preds = %NodeBlock11
  %SwitchLeaf10 = icmp eq i32 %1, 11
  br i1 %SwitchLeaf10, label %sw.bb25, label %NewDefault

LeafBlock7:                                       ; preds = %NodeBlock11
  %SwitchLeaf8 = icmp eq i32 %1, 9
  br i1 %SwitchLeaf8, label %sw.bb23, label %NewDefault

NodeBlock5:                                       ; preds = %NodeBlock13
  %Pivot6 = icmp slt i32 %1, 8
  br i1 %Pivot6, label %sw.bb21, label %do.end12

NodeBlock3:                                       ; preds = %NodeBlock15
  %Pivot4 = icmp slt i32 %1, 2
  br i1 %Pivot4, label %LeafBlock, label %NodeBlock

NodeBlock:                                        ; preds = %NodeBlock3
  %Pivot = icmp slt i32 %1, 3
  br i1 %Pivot, label %do.end12, label %LeafBlock1

LeafBlock1:                                       ; preds = %NodeBlock
  %SwitchLeaf2 = icmp eq i32 %1, 3
  br i1 %SwitchLeaf2, label %sw.bb23, label %NewDefault

LeafBlock:                                        ; preds = %NodeBlock3
  %SwitchLeaf = icmp eq i32 %1, 1
  br i1 %SwitchLeaf, label %sw.bb, label %NewDefault

sw.bb:                                            ; preds = %LeafBlock
  %call8 = call i32 @__cfg80211_leave_ibss(%struct.cfg80211_registered_device* %rdev, %struct.net_device* %0, i1 zeroext true)
  br label %sw.epilog

do.end12:                                         ; preds = %NodeBlock5, %NodeBlock
  %sched_scan_req13 = getelementptr inbounds %struct.cfg80211_registered_device, %struct.cfg80211_registered_device* %rdev, i32 0, i32 27
  %2 = load %struct.cfg80211_sched_scan_request*, %struct.cfg80211_sched_scan_request** %sched_scan_req13, align 8, !tbaa !233
  %tobool14 = icmp ne %struct.cfg80211_sched_scan_request* %2, null
  br i1 %tobool14, label %land.lhs.true, label %if.end19

land.lhs.true:                                    ; preds = %do.end12
  %dev15 = getelementptr inbounds %struct.cfg80211_sched_scan_request, %struct.cfg80211_sched_scan_request* %2, i32 0, i32 19
  %3 = load %struct.net_device*, %struct.net_device** %dev15, align 8, !tbaa !234
  %cmp = icmp eq %struct.net_device* %0, %3
  br i1 %cmp, label %if.then17, label %if.end19

if.then17:                                        ; preds = %land.lhs.true
  %call18 = call i32 @__cfg80211_stop_sched_scan(%struct.cfg80211_registered_device* %rdev, i1 zeroext false)
  br label %if.end19

if.end19:                                         ; preds = %if.then17, %land.lhs.true, %do.end12
  %call20 = call i32 @cfg80211_disconnect(%struct.cfg80211_registered_device* %rdev, %struct.net_device* %0, i16 zeroext 3, i1 zeroext true)
  br label %sw.epilog

sw.bb21:                                          ; preds = %NodeBlock5
  %call22 = call i32 @__cfg80211_leave_mesh(%struct.cfg80211_registered_device* %rdev, %struct.net_device* %0)
  br label %sw.epilog

sw.bb23:                                          ; preds = %LeafBlock7, %LeafBlock1
  %call24 = call i32 @__cfg80211_stop_ap(%struct.cfg80211_registered_device* %rdev, %struct.net_device* %0, i1 zeroext true)
  br label %sw.epilog

sw.bb25:                                          ; preds = %LeafBlock9
  %call26 = call i32 @__cfg80211_leave_ocb(%struct.cfg80211_registered_device* %rdev, %struct.net_device* %0)
  br label %sw.epilog

NewDefault:                                       ; preds = %LeafBlock9, %LeafBlock7, %LeafBlock1, %LeafBlock
  br label %sw.epilog

sw.epilog:                                        ; preds = %NewDefault, %sw.bb25, %sw.bb23, %sw.bb21, %if.end19, %sw.bb
  ret void
}

declare i32 @__cfg80211_leave_ibss(%struct.cfg80211_registered_device*, %struct.net_device*, i1 zeroext) #2

declare i32 @__cfg80211_stop_sched_scan(%struct.cfg80211_registered_device*, i1 zeroext) #2

declare i32 @cfg80211_disconnect(%struct.cfg80211_registered_device*, %struct.net_device*, i16 zeroext, i1 zeroext) #2

declare i32 @__cfg80211_leave_mesh(%struct.cfg80211_registered_device*, %struct.net_device*) #2

declare i32 @__cfg80211_stop_ap(%struct.cfg80211_registered_device*, %struct.net_device*, i1 zeroext) #2

declare i32 @__cfg80211_leave_ocb(%struct.cfg80211_registered_device*, %struct.net_device*) #2

; Function Attrs: nounwind uwtable
define void @cfg80211_leave(%struct.cfg80211_registered_device* %rdev, %struct.wireless_dev* %wdev) #0 {
entry:
  call void @wdev_lock(%struct.wireless_dev* %wdev)
  call void @__cfg80211_leave(%struct.cfg80211_registered_device* %rdev, %struct.wireless_dev* %wdev)
  call void @wdev_unlock(%struct.wireless_dev* %wdev)
  ret void
}

; Function Attrs: inlinehint nounwind uwtable
define internal void @wdev_lock(%struct.wireless_dev* %wdev) #4 {
entry:
  %mtx = getelementptr inbounds %struct.wireless_dev, %struct.wireless_dev* %wdev, i32 0, i32 7
  call void @mutex_lock(%struct.mutex* %mtx)
  ret void
}

; Function Attrs: inlinehint nounwind uwtable
define internal void @wdev_unlock(%struct.wireless_dev* %wdev) #4 {
entry:
  %mtx = getelementptr inbounds %struct.wireless_dev, %struct.wireless_dev* %wdev, i32 0, i32 7
  call void @mutex_unlock(%struct.mutex* %mtx)
  ret void
}

; Function Attrs: nounwind uwtable
define void @cfg80211_stop_iface(%struct.wiphy* %wiphy, %struct.wireless_dev* %wdev, i32 %gfp) #0 {
entry:
  %__dummy = alloca i64, align 8
  %__dummy2 = alloca i64, align 8
  %call = call %struct.cfg80211_registered_device* @wiphy_to_rdev(%struct.wiphy* %wiphy)
  call void @trace_cfg80211_stop_iface(%struct.wiphy* %wiphy, %struct.wireless_dev* %wdev)
  %call1 = call i8* @kzalloc(i64 80, i32 %gfp)
  %0 = bitcast i8* %call1 to %struct.cfg80211_event*
  %tobool = icmp ne %struct.cfg80211_event* %0, null
  br i1 %tobool, label %if.end, label %cleanup.cont

if.end:                                           ; preds = %entry
  %type = getelementptr inbounds %struct.cfg80211_event, %struct.cfg80211_event* %0, i32 0, i32 1
  store i32 4, i32* %type, align 8, !tbaa !237
  %1 = bitcast i64* %__dummy to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %1) #6
  %2 = bitcast i64* %__dummy2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %2) #6
  %cmp = icmp eq i64* %__dummy, %__dummy2
  %conv = zext i1 %cmp to i32
  %3 = bitcast i64* %__dummy2 to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %3) #6
  %4 = bitcast i64* %__dummy to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %4) #6
  %event_lock = getelementptr inbounds %struct.wireless_dev, %struct.wireless_dev* %wdev, i32 0, i32 22
  %call3 = call %struct.raw_spinlock* @spinlock_check(%struct.spinlock* %event_lock)
  %call4 = call i64 @_raw_spin_lock_irqsave(%struct.raw_spinlock* %call3)
  %list = getelementptr inbounds %struct.cfg80211_event, %struct.cfg80211_event* %0, i32 0, i32 0
  %event_list = getelementptr inbounds %struct.wireless_dev, %struct.wireless_dev* %wdev, i32 0, i32 21
  call void @list_add_tail(%struct.list_head* %list, %struct.list_head* %event_list)
  %event_lock7 = getelementptr inbounds %struct.wireless_dev, %struct.wireless_dev* %wdev, i32 0, i32 22
  call void @spin_unlock_irqrestore(%struct.spinlock* %event_lock7, i64 %call4)
  %5 = load %struct.workqueue_struct*, %struct.workqueue_struct** @cfg80211_wq, align 8, !tbaa !2
  %event_work = getelementptr inbounds %struct.cfg80211_registered_device, %struct.cfg80211_registered_device* %call, i32 0, i32 33
  %call8 = call zeroext i1 @queue_work(%struct.workqueue_struct* %5, %struct.work_struct* %event_work)
  br label %cleanup.cont

cleanup.cont:                                     ; preds = %if.end, %entry
  ret void
}

; Function Attrs: inlinehint nounwind uwtable
define internal void @trace_cfg80211_stop_iface(%struct.wiphy* %wiphy, %struct.wireless_dev* %wdev) #4 {
entry:
  %__u = alloca %union.anon.99, align 8
  %call = call zeroext i1 @static_key_false(%struct.static_key* getelementptr inbounds (%struct.tracepoint, %struct.tracepoint* @__tracepoint_cfg80211_stop_iface, i32 0, i32 1))
  br i1 %call, label %do.end, label %if.end26

do.end:                                           ; preds = %entry
  %0 = call i32 asm "movl %gs:$1,$0", "=r,*m,~{dirflag},~{fpsr},~{flags}"(i32* @cpu_number) #7, !srcloc !239
  %call3 = call i32 @cpumask_test_cpu(i32 %0, %struct.cpumask* @__cpu_online_mask)
  %tobool = icmp ne i32 %call3, 0
  br i1 %tobool, label %if.end, label %cleanup

if.end:                                           ; preds = %do.end
  call void @rcu_read_lock_sched_notrace()
  %1 = bitcast %union.anon.99* %__u to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %1) #6
  %__c = bitcast %union.anon.99* %__u to [1 x i8]*
  %arraydecay = getelementptr inbounds [1 x i8], [1 x i8]* %__c, i32 0, i32 0
  call void @__read_once_size(i8* bitcast (%struct.tracepoint_func** getelementptr inbounds (%struct.tracepoint, %struct.tracepoint* @__tracepoint_cfg80211_stop_iface, i32 0, i32 4) to i8*), i8* %arraydecay, i32 8)
  %__val = bitcast %union.anon.99* %__u to %struct.tracepoint_func**
  %2 = load %struct.tracepoint_func*, %struct.tracepoint_func** %__val, align 8, !tbaa !72
  %3 = bitcast %union.anon.99* %__u to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %3) #6
  %tobool14 = icmp ne %struct.tracepoint_func* %2, null
  br i1 %tobool14, label %if.then15, label %if.end21

if.then15:                                        ; preds = %if.end
  br label %do.body16

do.body16:                                        ; preds = %do.body16, %if.then15
  %it_func_ptr.0 = phi %struct.tracepoint_func* [ %2, %if.then15 ], [ %incdec.ptr, %do.body16 ]
  %func = getelementptr inbounds %struct.tracepoint_func, %struct.tracepoint_func* %it_func_ptr.0, i32 0, i32 0
  %4 = load i8*, i8** %func, align 8, !tbaa !240
  %data = getelementptr inbounds %struct.tracepoint_func, %struct.tracepoint_func* %it_func_ptr.0, i32 0, i32 1
  %5 = load i8*, i8** %data, align 8, !tbaa !242
  %6 = bitcast i8* %4 to void (i8*, %struct.wiphy*, %struct.wireless_dev*)*
  call void %6(i8* %5, %struct.wiphy* %wiphy, %struct.wireless_dev* %wdev)
  %incdec.ptr = getelementptr inbounds %struct.tracepoint_func, %struct.tracepoint_func* %it_func_ptr.0, i32 1
  %func18 = getelementptr inbounds %struct.tracepoint_func, %struct.tracepoint_func* %incdec.ptr, i32 0, i32 0
  %7 = load i8*, i8** %func18, align 8, !tbaa !240
  %tobool19 = icmp ne i8* %7, null
  br i1 %tobool19, label %do.body16, label %if.end21

if.end21:                                         ; preds = %do.body16, %if.end
  call void @rcu_read_unlock_sched_notrace()
  br label %cleanup

cleanup:                                          ; preds = %do.end, %if.end21
  ret void

if.end26:                                         ; preds = %entry
  ret void
}

declare i64 @_raw_spin_lock_irqsave(%struct.raw_spinlock*) #2 section ".spinlock.text"

; Function Attrs: inlinehint nounwind uwtable
define internal void @list_add_tail(%struct.list_head* %new, %struct.list_head* %head) #4 {
entry:
  %prev = getelementptr inbounds %struct.list_head, %struct.list_head* %head, i32 0, i32 1
  %0 = load %struct.list_head*, %struct.list_head** %prev, align 8, !tbaa !82
  call void @__list_add(%struct.list_head* %new, %struct.list_head* %0, %struct.list_head* %head)
  ret void
}

; Function Attrs: alwaysinline nounwind uwtable
define internal void @spin_unlock_irqrestore(%struct.spinlock* %lock, i64 %flags) #5 {
entry:
  %__dummy = alloca i64, align 8
  %__dummy2 = alloca i64, align 8
  %0 = bitcast i64* %__dummy to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %0) #6
  %1 = bitcast i64* %__dummy2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %1) #6
  %cmp = icmp eq i64* %__dummy, %__dummy2
  %conv = zext i1 %cmp to i32
  %2 = bitcast i64* %__dummy2 to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %2) #6
  %3 = bitcast i64* %__dummy to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %3) #6
  %4 = getelementptr inbounds %struct.spinlock, %struct.spinlock* %lock, i32 0, i32 0
  %rlock = bitcast %union.anon.1* %4 to %struct.raw_spinlock*
  call void @_raw_spin_unlock_irqrestore(%struct.raw_spinlock* %rlock, i64 %flags)
  ret void
}

; Function Attrs: inlinehint nounwind uwtable
define internal zeroext i1 @queue_work(%struct.workqueue_struct* %wq, %struct.work_struct* %work) #4 {
entry:
  %call = call zeroext i1 @queue_work_on(i32 64, %struct.workqueue_struct* %wq, %struct.work_struct* %work)
  ret i1 %call
}

; Function Attrs: nounwind uwtable
define internal i32 @cfg80211_init() #0 section ".init.text" {
entry:
  %call = call i32 @register_pernet_device(%struct.pernet_operations* @cfg80211_pernet_ops)
  %tobool = icmp ne i32 %call, 0
  br i1 %tobool, label %cleanup, label %if.end

if.end:                                           ; preds = %entry
  %call1 = call i32 @wiphy_sysfs_init()
  %tobool2 = icmp ne i32 %call1, 0
  br i1 %tobool2, label %out_fail_sysfs, label %if.end4

if.end4:                                          ; preds = %if.end
  %call5 = call i32 @register_netdevice_notifier(%struct.notifier_block* @cfg80211_netdev_notifier)
  %tobool6 = icmp ne i32 %call5, 0
  br i1 %tobool6, label %out_fail_notifier, label %if.end8

if.end8:                                          ; preds = %if.end4
  %call9 = call i32 @nl80211_init()
  %tobool10 = icmp ne i32 %call9, 0
  br i1 %tobool10, label %out_fail_nl80211, label %if.end12

if.end12:                                         ; preds = %if.end8
  %call13 = call %struct.dentry* @debugfs_create_dir(i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.9, i32 0, i32 0), %struct.dentry* null)
  store %struct.dentry* %call13, %struct.dentry** @ieee80211_debugfs_dir, align 8, !tbaa !2
  %call14 = call i32 @regulatory_init()
  %tobool15 = icmp ne i32 %call14, 0
  br i1 %tobool15, label %out_fail_reg, label %if.end17

if.end17:                                         ; preds = %if.end12
  %call18 = call %struct.workqueue_struct* (i8*, i32, i32, %struct.lock_class_key*, i8*, ...) @__alloc_workqueue_key(i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.10, i32 0, i32 0), i32 131082, i32 1, %struct.lock_class_key* null, i8* null)
  store %struct.workqueue_struct* %call18, %struct.workqueue_struct** @cfg80211_wq, align 8, !tbaa !2
  %0 = load %struct.workqueue_struct*, %struct.workqueue_struct** @cfg80211_wq, align 8, !tbaa !2
  %tobool19 = icmp ne %struct.workqueue_struct* %0, null
  br i1 %tobool19, label %cleanup, label %out_fail_wq

out_fail_wq:                                      ; preds = %if.end17
  call void @regulatory_exit()
  br label %out_fail_reg

out_fail_reg:                                     ; preds = %if.end12, %out_fail_wq
  %err.0 = phi i32 [ -12, %out_fail_wq ], [ %call14, %if.end12 ]
  %1 = load %struct.dentry*, %struct.dentry** @ieee80211_debugfs_dir, align 8, !tbaa !2
  call void @debugfs_remove(%struct.dentry* %1)
  call void @nl80211_exit()
  br label %out_fail_nl80211

out_fail_nl80211:                                 ; preds = %if.end8, %out_fail_reg
  %err.1 = phi i32 [ %err.0, %out_fail_reg ], [ %call9, %if.end8 ]
  %call22 = call i32 @unregister_netdevice_notifier(%struct.notifier_block* @cfg80211_netdev_notifier)
  br label %out_fail_notifier

out_fail_notifier:                                ; preds = %if.end4, %out_fail_nl80211
  %err.2 = phi i32 [ %err.1, %out_fail_nl80211 ], [ %call5, %if.end4 ]
  call void @wiphy_sysfs_exit()
  br label %out_fail_sysfs

out_fail_sysfs:                                   ; preds = %if.end, %out_fail_notifier
  %err.3 = phi i32 [ %err.2, %out_fail_notifier ], [ %call1, %if.end ]
  call void @unregister_pernet_device(%struct.pernet_operations* @cfg80211_pernet_ops)
  br label %cleanup

cleanup:                                          ; preds = %out_fail_sysfs, %entry, %if.end17
  %retval.0 = phi i32 [ 0, %if.end17 ], [ %err.3, %out_fail_sysfs ], [ %call, %entry ]
  ret i32 %retval.0
}

; Function Attrs: nounwind uwtable
define internal void @cfg80211_exit() #0 section ".exit.text" {
entry:
  %0 = load %struct.dentry*, %struct.dentry** @ieee80211_debugfs_dir, align 8, !tbaa !2
  call void @debugfs_remove(%struct.dentry* %0)
  call void @nl80211_exit()
  %call = call i32 @unregister_netdevice_notifier(%struct.notifier_block* @cfg80211_netdev_notifier)
  call void @wiphy_sysfs_exit()
  call void @regulatory_exit()
  call void @unregister_pernet_device(%struct.pernet_operations* @cfg80211_pernet_ops)
  %1 = load %struct.workqueue_struct*, %struct.workqueue_struct** @cfg80211_wq, align 8, !tbaa !2
  call void @destroy_workqueue(%struct.workqueue_struct* %1)
  ret void
}

declare void @debugfs_remove(%struct.dentry*) #2

declare void @nl80211_exit() #2

declare i32 @unregister_netdevice_notifier(%struct.notifier_block*) #2

declare void @wiphy_sysfs_exit() #2

declare void @regulatory_exit() #2

declare void @unregister_pernet_device(%struct.pernet_operations*) #2

declare void @destroy_workqueue(%struct.workqueue_struct*) #2

declare i32 @sscanf(i8*, i8*, ...) #2

declare i64 @strlen(i8*) #2

; Function Attrs: inlinehint nounwind uwtable
define internal %struct.net* @read_pnet(%struct.possible_net_t* %pnet) #4 {
entry:
  %net = getelementptr inbounds %struct.possible_net_t, %struct.possible_net_t* %pnet, i32 0, i32 0
  %0 = load %struct.net*, %struct.net** %net, align 8, !tbaa !243
  ret %struct.net* %0
}

; Function Attrs: inlinehint nounwind uwtable
define internal void @write_pnet(%struct.possible_net_t* %pnet, %struct.net* %net) #4 {
entry:
  %net1 = getelementptr inbounds %struct.possible_net_t, %struct.possible_net_t* %pnet, i32 0, i32 0
  store %struct.net* %net, %struct.net** %net1, align 8, !tbaa !243
  ret void
}

; Function Attrs: inlinehint nounwind uwtable
define internal i8* @kobject_name(%struct.kobject* %kobj) #4 {
entry:
  %name = getelementptr inbounds %struct.kobject, %struct.kobject* %kobj, i32 0, i32 0
  %0 = load i8*, i8** %name, align 8, !tbaa !244
  ret i8* %0
}

; Function Attrs: inlinehint nounwind uwtable
define internal zeroext i1 @netif_running(%struct.net_device* %dev) #4 {
entry:
  %state = getelementptr inbounds %struct.net_device, %struct.net_device* %dev, i32 0, i32 8
  %call = call zeroext i1 @constant_test_bit(i64 0, i64* %state)
  ret i1 %call
}

; Function Attrs: alwaysinline nounwind uwtable
define internal zeroext i1 @constant_test_bit(i64 %nr, i64* %addr) #5 {
entry:
  %and = and i64 %nr, 63
  %shl = shl i64 1, %and
  %shr = ashr i64 %nr, 6
  %arrayidx = getelementptr inbounds i64, i64* %addr, i64 %shr
  %0 = load volatile i64, i64* %arrayidx, align 8, !tbaa !121
  %and1 = and i64 %shl, %0
  %cmp = icmp ne i64 %and1, 0
  ret i1 %cmp
}

; Function Attrs: inlinehint nounwind uwtable
define internal void @trace_rdev_stop_p2p_device(%struct.wiphy* %wiphy, %struct.wireless_dev* %wdev) #4 {
entry:
  %__u = alloca %union.anon.86, align 8
  %call = call zeroext i1 @static_key_false(%struct.static_key* getelementptr inbounds (%struct.tracepoint, %struct.tracepoint* @__tracepoint_rdev_stop_p2p_device, i32 0, i32 1))
  br i1 %call, label %do.end, label %if.end26

do.end:                                           ; preds = %entry
  %0 = call i32 asm "movl %gs:$1,$0", "=r,*m,~{dirflag},~{fpsr},~{flags}"(i32* @cpu_number) #7, !srcloc !245
  %call3 = call i32 @cpumask_test_cpu(i32 %0, %struct.cpumask* @__cpu_online_mask)
  %tobool = icmp ne i32 %call3, 0
  br i1 %tobool, label %if.end, label %cleanup

if.end:                                           ; preds = %do.end
  call void @rcu_read_lock_sched_notrace()
  %1 = bitcast %union.anon.86* %__u to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %1) #6
  %__c = bitcast %union.anon.86* %__u to [1 x i8]*
  %arraydecay = getelementptr inbounds [1 x i8], [1 x i8]* %__c, i32 0, i32 0
  call void @__read_once_size(i8* bitcast (%struct.tracepoint_func** getelementptr inbounds (%struct.tracepoint, %struct.tracepoint* @__tracepoint_rdev_stop_p2p_device, i32 0, i32 4) to i8*), i8* %arraydecay, i32 8)
  %__val = bitcast %union.anon.86* %__u to %struct.tracepoint_func**
  %2 = load %struct.tracepoint_func*, %struct.tracepoint_func** %__val, align 8, !tbaa !72
  %3 = bitcast %union.anon.86* %__u to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %3) #6
  %tobool14 = icmp ne %struct.tracepoint_func* %2, null
  br i1 %tobool14, label %if.then15, label %if.end21

if.then15:                                        ; preds = %if.end
  br label %do.body16

do.body16:                                        ; preds = %do.body16, %if.then15
  %it_func_ptr.0 = phi %struct.tracepoint_func* [ %2, %if.then15 ], [ %incdec.ptr, %do.body16 ]
  %func = getelementptr inbounds %struct.tracepoint_func, %struct.tracepoint_func* %it_func_ptr.0, i32 0, i32 0
  %4 = load i8*, i8** %func, align 8, !tbaa !240
  %data = getelementptr inbounds %struct.tracepoint_func, %struct.tracepoint_func* %it_func_ptr.0, i32 0, i32 1
  %5 = load i8*, i8** %data, align 8, !tbaa !242
  %6 = bitcast i8* %4 to void (i8*, %struct.wiphy*, %struct.wireless_dev*)*
  call void %6(i8* %5, %struct.wiphy* %wiphy, %struct.wireless_dev* %wdev)
  %incdec.ptr = getelementptr inbounds %struct.tracepoint_func, %struct.tracepoint_func* %it_func_ptr.0, i32 1
  %func18 = getelementptr inbounds %struct.tracepoint_func, %struct.tracepoint_func* %incdec.ptr, i32 0, i32 0
  %7 = load i8*, i8** %func18, align 8, !tbaa !240
  %tobool19 = icmp ne i8* %7, null
  br i1 %tobool19, label %do.body16, label %if.end21

if.end21:                                         ; preds = %do.body16, %if.end
  call void @rcu_read_unlock_sched_notrace()
  br label %cleanup

cleanup:                                          ; preds = %do.end, %if.end21
  ret void

if.end26:                                         ; preds = %entry
  ret void
}

; Function Attrs: inlinehint nounwind uwtable
define internal void @trace_rdev_return_void(%struct.wiphy* %wiphy) #4 {
entry:
  %__u = alloca %union.anon.88, align 8
  %call = call zeroext i1 @static_key_false(%struct.static_key* getelementptr inbounds (%struct.tracepoint, %struct.tracepoint* @__tracepoint_rdev_return_void, i32 0, i32 1))
  br i1 %call, label %do.end, label %if.end26

do.end:                                           ; preds = %entry
  %0 = call i32 asm "movl %gs:$1,$0", "=r,*m,~{dirflag},~{fpsr},~{flags}"(i32* @cpu_number) #7, !srcloc !246
  %call3 = call i32 @cpumask_test_cpu(i32 %0, %struct.cpumask* @__cpu_online_mask)
  %tobool = icmp ne i32 %call3, 0
  br i1 %tobool, label %if.end, label %cleanup

if.end:                                           ; preds = %do.end
  call void @rcu_read_lock_sched_notrace()
  %1 = bitcast %union.anon.88* %__u to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %1) #6
  %__c = bitcast %union.anon.88* %__u to [1 x i8]*
  %arraydecay = getelementptr inbounds [1 x i8], [1 x i8]* %__c, i32 0, i32 0
  call void @__read_once_size(i8* bitcast (%struct.tracepoint_func** getelementptr inbounds (%struct.tracepoint, %struct.tracepoint* @__tracepoint_rdev_return_void, i32 0, i32 4) to i8*), i8* %arraydecay, i32 8)
  %__val = bitcast %union.anon.88* %__u to %struct.tracepoint_func**
  %2 = load %struct.tracepoint_func*, %struct.tracepoint_func** %__val, align 8, !tbaa !72
  %3 = bitcast %union.anon.88* %__u to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %3) #6
  %tobool14 = icmp ne %struct.tracepoint_func* %2, null
  br i1 %tobool14, label %if.then15, label %if.end21

if.then15:                                        ; preds = %if.end
  br label %do.body16

do.body16:                                        ; preds = %do.body16, %if.then15
  %it_func_ptr.0 = phi %struct.tracepoint_func* [ %2, %if.then15 ], [ %incdec.ptr, %do.body16 ]
  %func = getelementptr inbounds %struct.tracepoint_func, %struct.tracepoint_func* %it_func_ptr.0, i32 0, i32 0
  %4 = load i8*, i8** %func, align 8, !tbaa !240
  %data = getelementptr inbounds %struct.tracepoint_func, %struct.tracepoint_func* %it_func_ptr.0, i32 0, i32 1
  %5 = load i8*, i8** %data, align 8, !tbaa !242
  %6 = bitcast i8* %4 to void (i8*, %struct.wiphy*)*
  call void %6(i8* %5, %struct.wiphy* %wiphy)
  %incdec.ptr = getelementptr inbounds %struct.tracepoint_func, %struct.tracepoint_func* %it_func_ptr.0, i32 1
  %func18 = getelementptr inbounds %struct.tracepoint_func, %struct.tracepoint_func* %incdec.ptr, i32 0, i32 0
  %7 = load i8*, i8** %func18, align 8, !tbaa !240
  %tobool19 = icmp ne i8* %7, null
  br i1 %tobool19, label %do.body16, label %if.end21

if.end21:                                         ; preds = %do.body16, %if.end
  call void @rcu_read_unlock_sched_notrace()
  br label %cleanup

cleanup:                                          ; preds = %do.end, %if.end21
  ret void

if.end26:                                         ; preds = %entry
  ret void
}

; Function Attrs: alwaysinline nounwind uwtable
define internal zeroext i1 @static_key_false(%struct.static_key* %key) #5 {
entry:
  %call = call i32 @static_key_count(%struct.static_key* %key)
  %cmp = icmp sgt i32 %call, 0
  %lnot = xor i1 %cmp, true
  %lnot1 = xor i1 %lnot, true
  %lnot.ext = zext i1 %lnot1 to i32
  %conv = sext i32 %lnot.ext to i64
  %expval = call i64 @llvm.expect.i64(i64 %conv, i64 0)
  %tobool = icmp ne i64 %expval, 0
  %. = select i1 %tobool, i1 true, i1 false
  ret i1 %.
}

; Function Attrs: inlinehint nounwind uwtable
define internal i32 @cpumask_test_cpu(i32 %cpu, %struct.cpumask* %cpumask) #4 {
entry:
  %call = call i32 @cpumask_check(i32 %cpu)
  %conv = zext i32 %call to i64
  %bits = getelementptr inbounds %struct.cpumask, %struct.cpumask* %cpumask, i32 0, i32 0
  %arraydecay = getelementptr inbounds [1 x i64], [1 x i64]* %bits, i32 0, i32 0
  %call1 = call zeroext i1 @variable_test_bit(i64 %conv, i64* %arraydecay)
  %conv2 = zext i1 %call1 to i32
  ret i32 %conv2
}

; Function Attrs: inlinehint nounwind uwtable
define internal void @rcu_read_lock_sched_notrace() #4 {
entry:
  call void asm sideeffect "", "~{memory},~{dirflag},~{fpsr},~{flags}"() #6, !srcloc !247
  ret void
}

; Function Attrs: inlinehint nounwind uwtable
define internal void @rcu_read_unlock_sched_notrace() #4 {
entry:
  call void asm sideeffect "", "~{memory},~{dirflag},~{fpsr},~{flags}"() #6, !srcloc !248
  ret void
}

; Function Attrs: inlinehint nounwind uwtable
define internal i32 @static_key_count(%struct.static_key* %key) #4 {
entry:
  %enabled = getelementptr inbounds %struct.static_key, %struct.static_key* %key, i32 0, i32 0
  %call = call i32 @atomic_read(%struct.atomic_t* %enabled)
  ret i32 %call
}

; Function Attrs: alwaysinline nounwind uwtable
define internal i32 @atomic_read(%struct.atomic_t* %v) #5 {
entry:
  %__u = alloca %union.anon.87, align 4
  %0 = bitcast %union.anon.87* %__u to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* %0) #6
  %counter = getelementptr inbounds %struct.atomic_t, %struct.atomic_t* %v, i32 0, i32 0
  %1 = bitcast i32* %counter to i8*
  %__c = bitcast %union.anon.87* %__u to [1 x i8]*
  %arraydecay = getelementptr inbounds [1 x i8], [1 x i8]* %__c, i32 0, i32 0
  call void @__read_once_size(i8* %1, i8* %arraydecay, i32 4)
  %__val = bitcast %union.anon.87* %__u to i32*
  %2 = load i32, i32* %__val, align 4, !tbaa !72
  %3 = bitcast %union.anon.87* %__u to i8*
  call void @llvm.lifetime.end.p0i8(i64 4, i8* %3) #6
  ret i32 %2
}

; Function Attrs: alwaysinline nounwind uwtable
define internal zeroext i1 @variable_test_bit(i64 %nr, i64* %addr) #5 {
entry:
  %oldbit = alloca i8, align 1
  call void @llvm.lifetime.start.p0i8(i64 1, i8* %oldbit) #6
  call void asm sideeffect "bt $2,$1\0A\09\0A\09setc $0\0A", "=*qm,*m,Ir,~{dirflag},~{fpsr},~{flags}"(i8* %oldbit, i64* %addr, i64 %nr) #6, !srcloc !249
  %0 = load i8, i8* %oldbit, align 1, !tbaa !172, !range !66
  %tobool = trunc i8 %0 to i1
  call void @llvm.lifetime.end.p0i8(i64 1, i8* %oldbit) #6
  ret i1 %tobool
}

; Function Attrs: inlinehint nounwind uwtable
define internal i32 @cpumask_check(i32 %cpu) #4 {
entry:
  ret i32 %cpu
}

; Function Attrs: inlinehint nounwind uwtable
define internal void @trace_rdev_stop_nan(%struct.wiphy* %wiphy, %struct.wireless_dev* %wdev) #4 {
entry:
  %__u = alloca %union.anon.89, align 8
  %call = call zeroext i1 @static_key_false(%struct.static_key* getelementptr inbounds (%struct.tracepoint, %struct.tracepoint* @__tracepoint_rdev_stop_nan, i32 0, i32 1))
  br i1 %call, label %do.end, label %if.end26

do.end:                                           ; preds = %entry
  %0 = call i32 asm "movl %gs:$1,$0", "=r,*m,~{dirflag},~{fpsr},~{flags}"(i32* @cpu_number) #7, !srcloc !250
  %call3 = call i32 @cpumask_test_cpu(i32 %0, %struct.cpumask* @__cpu_online_mask)
  %tobool = icmp ne i32 %call3, 0
  br i1 %tobool, label %if.end, label %cleanup

if.end:                                           ; preds = %do.end
  call void @rcu_read_lock_sched_notrace()
  %1 = bitcast %union.anon.89* %__u to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %1) #6
  %__c = bitcast %union.anon.89* %__u to [1 x i8]*
  %arraydecay = getelementptr inbounds [1 x i8], [1 x i8]* %__c, i32 0, i32 0
  call void @__read_once_size(i8* bitcast (%struct.tracepoint_func** getelementptr inbounds (%struct.tracepoint, %struct.tracepoint* @__tracepoint_rdev_stop_nan, i32 0, i32 4) to i8*), i8* %arraydecay, i32 8)
  %__val = bitcast %union.anon.89* %__u to %struct.tracepoint_func**
  %2 = load %struct.tracepoint_func*, %struct.tracepoint_func** %__val, align 8, !tbaa !72
  %3 = bitcast %union.anon.89* %__u to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %3) #6
  %tobool14 = icmp ne %struct.tracepoint_func* %2, null
  br i1 %tobool14, label %if.then15, label %if.end21

if.then15:                                        ; preds = %if.end
  br label %do.body16

do.body16:                                        ; preds = %do.body16, %if.then15
  %it_func_ptr.0 = phi %struct.tracepoint_func* [ %2, %if.then15 ], [ %incdec.ptr, %do.body16 ]
  %func = getelementptr inbounds %struct.tracepoint_func, %struct.tracepoint_func* %it_func_ptr.0, i32 0, i32 0
  %4 = load i8*, i8** %func, align 8, !tbaa !240
  %data = getelementptr inbounds %struct.tracepoint_func, %struct.tracepoint_func* %it_func_ptr.0, i32 0, i32 1
  %5 = load i8*, i8** %data, align 8, !tbaa !242
  %6 = bitcast i8* %4 to void (i8*, %struct.wiphy*, %struct.wireless_dev*)*
  call void %6(i8* %5, %struct.wiphy* %wiphy, %struct.wireless_dev* %wdev)
  %incdec.ptr = getelementptr inbounds %struct.tracepoint_func, %struct.tracepoint_func* %it_func_ptr.0, i32 1
  %func18 = getelementptr inbounds %struct.tracepoint_func, %struct.tracepoint_func* %incdec.ptr, i32 0, i32 0
  %7 = load i8*, i8** %func18, align 8, !tbaa !240
  %tobool19 = icmp ne i8* %7, null
  br i1 %tobool19, label %do.body16, label %if.end21

if.end21:                                         ; preds = %do.body16, %if.end
  call void @rcu_read_unlock_sched_notrace()
  br label %cleanup

cleanup:                                          ; preds = %do.end, %if.end21
  ret void

if.end26:                                         ; preds = %entry
  ret void
}

declare void @_raw_spin_lock_irq(%struct.raw_spinlock*) #2 section ".spinlock.text"

; Function Attrs: inlinehint nounwind uwtable
define internal void @__list_del_entry(%struct.list_head* %entry1) #4 {
entry:
  %call = call zeroext i1 @__list_del_entry_valid(%struct.list_head* %entry1)
  br i1 %call, label %if.end, label %return

if.end:                                           ; preds = %entry
  %prev = getelementptr inbounds %struct.list_head, %struct.list_head* %entry1, i32 0, i32 1
  %0 = load %struct.list_head*, %struct.list_head** %prev, align 8, !tbaa !82
  %next = getelementptr inbounds %struct.list_head, %struct.list_head* %entry1, i32 0, i32 0
  %1 = load %struct.list_head*, %struct.list_head** %next, align 8, !tbaa !75
  call void @__list_del(%struct.list_head* %0, %struct.list_head* %1)
  br label %return

return:                                           ; preds = %entry, %if.end
  ret void
}

; Function Attrs: inlinehint nounwind uwtable
define internal zeroext i1 @__list_del_entry_valid(%struct.list_head* %entry1) #4 {
entry:
  ret i1 true
}

; Function Attrs: inlinehint nounwind uwtable
define internal void @__list_del(%struct.list_head* %prev, %struct.list_head* %next) #4 {
entry:
  %__u = alloca %union.anon.90, align 8
  %prev1 = getelementptr inbounds %struct.list_head, %struct.list_head* %next, i32 0, i32 1
  store %struct.list_head* %prev, %struct.list_head** %prev1, align 8, !tbaa !82
  %0 = bitcast %union.anon.90* %__u to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %0) #6
  %__val = bitcast %union.anon.90* %__u to %struct.list_head**
  store %struct.list_head* %next, %struct.list_head** %__val, align 8, !tbaa !72
  %next2 = getelementptr inbounds %struct.list_head, %struct.list_head* %prev, i32 0, i32 0
  %1 = bitcast %struct.list_head** %next2 to i8*
  %__c = bitcast %union.anon.90* %__u to [1 x i8]*
  %arraydecay = getelementptr inbounds [1 x i8], [1 x i8]* %__c, i32 0, i32 0
  call void @__write_once_size(i8* %1, i8* %arraydecay, i32 8)
  %__val3 = bitcast %union.anon.90* %__u to %struct.list_head**
  %2 = load %struct.list_head*, %struct.list_head** %__val3, align 8, !tbaa !72
  %3 = bitcast %union.anon.90* %__u to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %3) #6
  ret void
}

; Function Attrs: alwaysinline nounwind uwtable
define internal void @__write_once_size(i8* %p, i8* %res, i32 %size) #5 {
entry:
  br label %NodeBlock9

NodeBlock9:                                       ; preds = %entry
  %Pivot10 = icmp slt i32 %size, 4
  br i1 %Pivot10, label %NodeBlock, label %NodeBlock7

NodeBlock7:                                       ; preds = %NodeBlock9
  %Pivot8 = icmp slt i32 %size, 8
  br i1 %Pivot8, label %LeafBlock3, label %LeafBlock5

LeafBlock5:                                       ; preds = %NodeBlock7
  %SwitchLeaf6 = icmp eq i32 %size, 8
  br i1 %SwitchLeaf6, label %sw.bb3, label %NewDefault

LeafBlock3:                                       ; preds = %NodeBlock7
  %SwitchLeaf4 = icmp eq i32 %size, 4
  br i1 %SwitchLeaf4, label %sw.bb2, label %NewDefault

NodeBlock:                                        ; preds = %NodeBlock9
  %Pivot = icmp slt i32 %size, 2
  br i1 %Pivot, label %LeafBlock, label %LeafBlock1

LeafBlock1:                                       ; preds = %NodeBlock
  %SwitchLeaf2 = icmp eq i32 %size, 2
  br i1 %SwitchLeaf2, label %sw.bb1, label %NewDefault

LeafBlock:                                        ; preds = %NodeBlock
  %SwitchLeaf = icmp eq i32 %size, 1
  br i1 %SwitchLeaf, label %sw.bb, label %NewDefault

sw.bb:                                            ; preds = %LeafBlock
  %0 = load i8, i8* %res, align 1, !tbaa !72
  store volatile i8 %0, i8* %p, align 1, !tbaa !72
  br label %sw.epilog

sw.bb1:                                           ; preds = %LeafBlock1
  %1 = bitcast i8* %res to i16*
  %2 = load i16, i16* %1, align 2, !tbaa !78
  %3 = bitcast i8* %p to i16*
  store volatile i16 %2, i16* %3, align 2, !tbaa !78
  br label %sw.epilog

sw.bb2:                                           ; preds = %LeafBlock3
  %4 = bitcast i8* %res to i32*
  %5 = load i32, i32* %4, align 4, !tbaa !46
  %6 = bitcast i8* %p to i32*
  store volatile i32 %5, i32* %6, align 4, !tbaa !46
  br label %sw.epilog

sw.bb3:                                           ; preds = %LeafBlock5
  %7 = bitcast i8* %res to i64*
  %8 = load i64, i64* %7, align 8, !tbaa !79
  %9 = bitcast i8* %p to i64*
  store volatile i64 %8, i64* %9, align 8, !tbaa !79
  br label %sw.epilog

NewDefault:                                       ; preds = %LeafBlock5, %LeafBlock3, %LeafBlock1, %LeafBlock
  br label %sw.default

sw.default:                                       ; preds = %NewDefault
  call void asm sideeffect "", "~{memory},~{dirflag},~{fpsr},~{flags}"() #6, !srcloc !251
  %conv = sext i32 %size to i64
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %p, i8* %res, i64 %conv, i32 1, i1 false)
  call void asm sideeffect "", "~{memory},~{dirflag},~{fpsr},~{flags}"() #6, !srcloc !252
  br label %sw.epilog

sw.epilog:                                        ; preds = %sw.default, %sw.bb3, %sw.bb2, %sw.bb1, %sw.bb
  ret void
}

; Function Attrs: inlinehint nounwind uwtable
define internal void @__raw_spin_unlock_irq(%struct.raw_spinlock* %lock) #4 {
entry:
  call void @do_raw_spin_unlock(%struct.raw_spinlock* %lock)
  call void @arch_local_irq_enable()
  call void asm sideeffect "", "~{memory},~{dirflag},~{fpsr},~{flags}"() #6, !srcloc !253
  ret void
}

; Function Attrs: inlinehint nounwind uwtable
define internal void @do_raw_spin_unlock(%struct.raw_spinlock* %lock) #4 {
entry:
  %raw_lock = getelementptr inbounds %struct.raw_spinlock, %struct.raw_spinlock* %lock, i32 0, i32 0
  call void @queued_spin_unlock(%struct.qspinlock* %raw_lock)
  ret void
}

; Function Attrs: inlinehint nounwind uwtable
define internal void @arch_local_irq_enable() #4 {
entry:
  call void @native_irq_enable()
  ret void
}

; Function Attrs: inlinehint nounwind uwtable
define internal void @queued_spin_unlock(%struct.qspinlock* %lock) #4 {
entry:
  call void @native_queued_spin_unlock(%struct.qspinlock* %lock)
  ret void
}

; Function Attrs: inlinehint nounwind uwtable
define internal void @native_queued_spin_unlock(%struct.qspinlock* %lock) #4 {
entry:
  %__u = alloca %union.anon.91, align 1
  %tobool = trunc i8 0 to i1
  br i1 %tobool, label %if.then, label %do.body2

if.then:                                          ; preds = %entry
  call void @__compiletime_assert_17()
  br label %do.body2

do.body2:                                         ; preds = %entry, %if.then
  %tobool3 = trunc i8 0 to i1
  %conv = zext i1 %tobool3 to i32
  %mul = mul nsw i32 2, %conv
  %sub = sub nsw i32 1, %mul
  %0 = zext i32 %sub to i64
  call void asm sideeffect "", "~{memory},~{dirflag},~{fpsr},~{flags}"() #6, !srcloc !254
  %1 = bitcast %union.anon.91* %__u to i8*
  call void @llvm.lifetime.start.p0i8(i64 1, i8* %1) #6
  %2 = bitcast %union.anon.91* %__u to i8*
  call void @llvm.memset.p0i8.i64(i8* %2, i8 0, i64 1, i32 1, i1 false)
  %3 = bitcast %struct.qspinlock* %lock to i8*
  %__c = bitcast %union.anon.91* %__u to [1 x i8]*
  %arraydecay = getelementptr inbounds [1 x i8], [1 x i8]* %__c, i32 0, i32 0
  call void @__write_once_size(i8* %3, i8* %arraydecay, i32 1)
  %__val = bitcast %union.anon.91* %__u to i8*
  %4 = load i8, i8* %__val, align 1, !tbaa !72
  %5 = bitcast %union.anon.91* %__u to i8*
  call void @llvm.lifetime.end.p0i8(i64 1, i8* %5) #6
  ret void
}

declare void @__compiletime_assert_17() #2

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i32, i1) #1

; Function Attrs: inlinehint nounwind uwtable
define internal void @native_irq_enable() #4 {
entry:
  call void asm sideeffect "sti", "~{memory},~{dirflag},~{fpsr},~{flags}"() #6, !srcloc !255
  ret void
}

; Function Attrs: inlinehint nounwind uwtable
define internal void @trace_rdev_del_virtual_intf(%struct.wiphy* %wiphy, %struct.wireless_dev* %wdev) #4 {
entry:
  %__u = alloca %union.anon.92, align 8
  %call = call zeroext i1 @static_key_false(%struct.static_key* getelementptr inbounds (%struct.tracepoint, %struct.tracepoint* @__tracepoint_rdev_del_virtual_intf, i32 0, i32 1))
  br i1 %call, label %do.end, label %if.end26

do.end:                                           ; preds = %entry
  %0 = call i32 asm "movl %gs:$1,$0", "=r,*m,~{dirflag},~{fpsr},~{flags}"(i32* @cpu_number) #7, !srcloc !256
  %call3 = call i32 @cpumask_test_cpu(i32 %0, %struct.cpumask* @__cpu_online_mask)
  %tobool = icmp ne i32 %call3, 0
  br i1 %tobool, label %if.end, label %cleanup

if.end:                                           ; preds = %do.end
  call void @rcu_read_lock_sched_notrace()
  %1 = bitcast %union.anon.92* %__u to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %1) #6
  %__c = bitcast %union.anon.92* %__u to [1 x i8]*
  %arraydecay = getelementptr inbounds [1 x i8], [1 x i8]* %__c, i32 0, i32 0
  call void @__read_once_size(i8* bitcast (%struct.tracepoint_func** getelementptr inbounds (%struct.tracepoint, %struct.tracepoint* @__tracepoint_rdev_del_virtual_intf, i32 0, i32 4) to i8*), i8* %arraydecay, i32 8)
  %__val = bitcast %union.anon.92* %__u to %struct.tracepoint_func**
  %2 = load %struct.tracepoint_func*, %struct.tracepoint_func** %__val, align 8, !tbaa !72
  %3 = bitcast %union.anon.92* %__u to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %3) #6
  %tobool14 = icmp ne %struct.tracepoint_func* %2, null
  br i1 %tobool14, label %if.then15, label %if.end21

if.then15:                                        ; preds = %if.end
  br label %do.body16

do.body16:                                        ; preds = %do.body16, %if.then15
  %it_func_ptr.0 = phi %struct.tracepoint_func* [ %2, %if.then15 ], [ %incdec.ptr, %do.body16 ]
  %func = getelementptr inbounds %struct.tracepoint_func, %struct.tracepoint_func* %it_func_ptr.0, i32 0, i32 0
  %4 = load i8*, i8** %func, align 8, !tbaa !240
  %data = getelementptr inbounds %struct.tracepoint_func, %struct.tracepoint_func* %it_func_ptr.0, i32 0, i32 1
  %5 = load i8*, i8** %data, align 8, !tbaa !242
  %6 = bitcast i8* %4 to void (i8*, %struct.wiphy*, %struct.wireless_dev*)*
  call void %6(i8* %5, %struct.wiphy* %wiphy, %struct.wireless_dev* %wdev)
  %incdec.ptr = getelementptr inbounds %struct.tracepoint_func, %struct.tracepoint_func* %it_func_ptr.0, i32 1
  %func18 = getelementptr inbounds %struct.tracepoint_func, %struct.tracepoint_func* %incdec.ptr, i32 0, i32 0
  %7 = load i8*, i8** %func18, align 8, !tbaa !240
  %tobool19 = icmp ne i8* %7, null
  br i1 %tobool19, label %do.body16, label %if.end21

if.end21:                                         ; preds = %do.body16, %if.end
  call void @rcu_read_unlock_sched_notrace()
  br label %cleanup

cleanup:                                          ; preds = %do.end, %if.end21
  ret void

if.end26:                                         ; preds = %entry
  ret void
}

; Function Attrs: inlinehint nounwind uwtable
define internal void @trace_rdev_return_int(%struct.wiphy* %wiphy, i32 %ret) #4 {
entry:
  %__u = alloca %union.anon.93, align 8
  %call = call zeroext i1 @static_key_false(%struct.static_key* getelementptr inbounds (%struct.tracepoint, %struct.tracepoint* @__tracepoint_rdev_return_int, i32 0, i32 1))
  br i1 %call, label %do.end, label %if.end26

do.end:                                           ; preds = %entry
  %0 = call i32 asm "movl %gs:$1,$0", "=r,*m,~{dirflag},~{fpsr},~{flags}"(i32* @cpu_number) #7, !srcloc !257
  %call3 = call i32 @cpumask_test_cpu(i32 %0, %struct.cpumask* @__cpu_online_mask)
  %tobool = icmp ne i32 %call3, 0
  br i1 %tobool, label %if.end, label %cleanup

if.end:                                           ; preds = %do.end
  call void @rcu_read_lock_sched_notrace()
  %1 = bitcast %union.anon.93* %__u to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %1) #6
  %__c = bitcast %union.anon.93* %__u to [1 x i8]*
  %arraydecay = getelementptr inbounds [1 x i8], [1 x i8]* %__c, i32 0, i32 0
  call void @__read_once_size(i8* bitcast (%struct.tracepoint_func** getelementptr inbounds (%struct.tracepoint, %struct.tracepoint* @__tracepoint_rdev_return_int, i32 0, i32 4) to i8*), i8* %arraydecay, i32 8)
  %__val = bitcast %union.anon.93* %__u to %struct.tracepoint_func**
  %2 = load %struct.tracepoint_func*, %struct.tracepoint_func** %__val, align 8, !tbaa !72
  %3 = bitcast %union.anon.93* %__u to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %3) #6
  %tobool14 = icmp ne %struct.tracepoint_func* %2, null
  br i1 %tobool14, label %if.then15, label %if.end21

if.then15:                                        ; preds = %if.end
  br label %do.body16

do.body16:                                        ; preds = %do.body16, %if.then15
  %it_func_ptr.0 = phi %struct.tracepoint_func* [ %2, %if.then15 ], [ %incdec.ptr, %do.body16 ]
  %func = getelementptr inbounds %struct.tracepoint_func, %struct.tracepoint_func* %it_func_ptr.0, i32 0, i32 0
  %4 = load i8*, i8** %func, align 8, !tbaa !240
  %data = getelementptr inbounds %struct.tracepoint_func, %struct.tracepoint_func* %it_func_ptr.0, i32 0, i32 1
  %5 = load i8*, i8** %data, align 8, !tbaa !242
  %6 = bitcast i8* %4 to void (i8*, %struct.wiphy*, i32)*
  call void %6(i8* %5, %struct.wiphy* %wiphy, i32 %ret)
  %incdec.ptr = getelementptr inbounds %struct.tracepoint_func, %struct.tracepoint_func* %it_func_ptr.0, i32 1
  %func18 = getelementptr inbounds %struct.tracepoint_func, %struct.tracepoint_func* %incdec.ptr, i32 0, i32 0
  %7 = load i8*, i8** %func18, align 8, !tbaa !240
  %tobool19 = icmp ne i8* %7, null
  br i1 %tobool19, label %do.body16, label %if.end21

if.end21:                                         ; preds = %do.body16, %if.end
  call void @rcu_read_unlock_sched_notrace()
  br label %cleanup

cleanup:                                          ; preds = %do.end, %if.end21
  ret void

if.end26:                                         ; preds = %entry
  ret void
}

; Function Attrs: alwaysinline nounwind uwtable
define internal i8* @kmalloc(i64 %size, i32 %flags) #5 {
entry:
  %call = call noalias i8* @__kmalloc(i64 %size, i32 %flags)
  ret i8* %call
}

declare noalias i8* @__kmalloc(i64, i32) #2

declare zeroext i1 @rfkill_blocked(%struct.rfkill*) #2

declare void @cfg80211_process_rdev_events(%struct.cfg80211_registered_device*) #2

; Function Attrs: inlinehint nounwind uwtable
define internal void @__list_add_rcu(%struct.list_head* %new, %struct.list_head* %prev, %struct.list_head* %next) #4 {
entry:
  %__u = alloca %union.anon.95, align 8
  %call = call zeroext i1 @__list_add_valid(%struct.list_head* %new, %struct.list_head* %prev, %struct.list_head* %next)
  br i1 %call, label %if.end, label %return

if.end:                                           ; preds = %entry
  %next1 = getelementptr inbounds %struct.list_head, %struct.list_head* %new, i32 0, i32 0
  store %struct.list_head* %next, %struct.list_head** %next1, align 8, !tbaa !75
  %prev2 = getelementptr inbounds %struct.list_head, %struct.list_head* %new, i32 0, i32 1
  store %struct.list_head* %prev, %struct.list_head** %prev2, align 8, !tbaa !82
  %0 = ptrtoint %struct.list_head* %new to i64
  %tobool = trunc i8 0 to i1
  br i1 %tobool, label %if.then4, label %do.body6

if.then4:                                         ; preds = %if.end
  call void @__compiletime_assert_56()
  br label %do.body6

do.body6:                                         ; preds = %if.end, %if.then4
  %tobool7 = trunc i8 0 to i1
  %conv = zext i1 %tobool7 to i32
  %mul = mul nsw i32 2, %conv
  %sub = sub nsw i32 1, %mul
  %1 = zext i32 %sub to i64
  call void asm sideeffect "", "~{memory},~{dirflag},~{fpsr},~{flags}"() #6, !srcloc !258
  %2 = bitcast %union.anon.95* %__u to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %2) #6
  %__val = bitcast %union.anon.95* %__u to %struct.list_head**
  %3 = inttoptr i64 %0 to %struct.list_head*
  store %struct.list_head* %3, %struct.list_head** %__val, align 8, !tbaa !72
  %next10 = getelementptr inbounds %struct.list_head, %struct.list_head* %prev, i32 0, i32 0
  %4 = bitcast %struct.list_head** %next10 to i8*
  %__c = bitcast %union.anon.95* %__u to [1 x i8]*
  %arraydecay = getelementptr inbounds [1 x i8], [1 x i8]* %__c, i32 0, i32 0
  call void @__write_once_size(i8* %4, i8* %arraydecay, i32 8)
  %__val11 = bitcast %union.anon.95* %__u to %struct.list_head**
  %5 = load %struct.list_head*, %struct.list_head** %__val11, align 8, !tbaa !72
  %6 = bitcast %union.anon.95* %__u to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %6) #6
  %prev15 = getelementptr inbounds %struct.list_head, %struct.list_head* %next, i32 0, i32 1
  store %struct.list_head* %new, %struct.list_head** %prev15, align 8, !tbaa !82
  br label %return

return:                                           ; preds = %entry, %do.body6
  ret void
}

; Function Attrs: inlinehint nounwind uwtable
define internal zeroext i1 @__list_add_valid(%struct.list_head* %new, %struct.list_head* %prev, %struct.list_head* %next) #4 {
entry:
  ret i1 true
}

declare void @__compiletime_assert_56() #2

declare void @nl80211_common_reg_change_event(i32, %struct.regulatory_request*) #2

; Function Attrs: inlinehint nounwind uwtable
define internal void @rdev_rfkill_poll(%struct.cfg80211_registered_device* %rdev) #4 {
entry:
  %wiphy = getelementptr inbounds %struct.cfg80211_registered_device, %struct.cfg80211_registered_device* %rdev, i32 0, i32 42
  call void @trace_rdev_rfkill_poll(%struct.wiphy* %wiphy)
  %ops = getelementptr inbounds %struct.cfg80211_registered_device, %struct.cfg80211_registered_device* %rdev, i32 0, i32 0
  %0 = load %struct.cfg80211_ops*, %struct.cfg80211_ops** %ops, align 32, !tbaa !68
  %rfkill_poll = getelementptr inbounds %struct.cfg80211_ops, %struct.cfg80211_ops* %0, i32 0, i32 52
  %1 = load void (%struct.wiphy*)*, void (%struct.wiphy*)** %rfkill_poll, align 8, !tbaa !214
  %wiphy1 = getelementptr inbounds %struct.cfg80211_registered_device, %struct.cfg80211_registered_device* %rdev, i32 0, i32 42
  call void %1(%struct.wiphy* %wiphy1)
  %wiphy2 = getelementptr inbounds %struct.cfg80211_registered_device, %struct.cfg80211_registered_device* %rdev, i32 0, i32 42
  call void @trace_rdev_return_void(%struct.wiphy* %wiphy2)
  ret void
}

; Function Attrs: inlinehint nounwind uwtable
define internal void @trace_rdev_rfkill_poll(%struct.wiphy* %wiphy) #4 {
entry:
  %__u = alloca %union.anon.96, align 8
  %call = call zeroext i1 @static_key_false(%struct.static_key* getelementptr inbounds (%struct.tracepoint, %struct.tracepoint* @__tracepoint_rdev_rfkill_poll, i32 0, i32 1))
  br i1 %call, label %do.end, label %if.end26

do.end:                                           ; preds = %entry
  %0 = call i32 asm "movl %gs:$1,$0", "=r,*m,~{dirflag},~{fpsr},~{flags}"(i32* @cpu_number) #7, !srcloc !259
  %call3 = call i32 @cpumask_test_cpu(i32 %0, %struct.cpumask* @__cpu_online_mask)
  %tobool = icmp ne i32 %call3, 0
  br i1 %tobool, label %if.end, label %cleanup

if.end:                                           ; preds = %do.end
  call void @rcu_read_lock_sched_notrace()
  %1 = bitcast %union.anon.96* %__u to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %1) #6
  %__c = bitcast %union.anon.96* %__u to [1 x i8]*
  %arraydecay = getelementptr inbounds [1 x i8], [1 x i8]* %__c, i32 0, i32 0
  call void @__read_once_size(i8* bitcast (%struct.tracepoint_func** getelementptr inbounds (%struct.tracepoint, %struct.tracepoint* @__tracepoint_rdev_rfkill_poll, i32 0, i32 4) to i8*), i8* %arraydecay, i32 8)
  %__val = bitcast %union.anon.96* %__u to %struct.tracepoint_func**
  %2 = load %struct.tracepoint_func*, %struct.tracepoint_func** %__val, align 8, !tbaa !72
  %3 = bitcast %union.anon.96* %__u to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %3) #6
  %tobool14 = icmp ne %struct.tracepoint_func* %2, null
  br i1 %tobool14, label %if.then15, label %if.end21

if.then15:                                        ; preds = %if.end
  br label %do.body16

do.body16:                                        ; preds = %do.body16, %if.then15
  %it_func_ptr.0 = phi %struct.tracepoint_func* [ %2, %if.then15 ], [ %incdec.ptr, %do.body16 ]
  %func = getelementptr inbounds %struct.tracepoint_func, %struct.tracepoint_func* %it_func_ptr.0, i32 0, i32 0
  %4 = load i8*, i8** %func, align 8, !tbaa !240
  %data = getelementptr inbounds %struct.tracepoint_func, %struct.tracepoint_func* %it_func_ptr.0, i32 0, i32 1
  %5 = load i8*, i8** %data, align 8, !tbaa !242
  %6 = bitcast i8* %4 to void (i8*, %struct.wiphy*)*
  call void %6(i8* %5, %struct.wiphy* %wiphy)
  %incdec.ptr = getelementptr inbounds %struct.tracepoint_func, %struct.tracepoint_func* %it_func_ptr.0, i32 1
  %func18 = getelementptr inbounds %struct.tracepoint_func, %struct.tracepoint_func* %incdec.ptr, i32 0, i32 0
  %7 = load i8*, i8** %func18, align 8, !tbaa !240
  %tobool19 = icmp ne i8* %7, null
  br i1 %tobool19, label %do.body16, label %if.end21

if.end21:                                         ; preds = %do.body16, %if.end
  call void @rcu_read_unlock_sched_notrace()
  br label %cleanup

cleanup:                                          ; preds = %do.end, %if.end21
  ret void

if.end26:                                         ; preds = %entry
  ret void
}

declare void @synchronize_sched() #2

; Function Attrs: inlinehint nounwind uwtable
define internal void @trace_rdev_set_wakeup(%struct.wiphy* %wiphy, i1 zeroext %enabled) #4 {
entry:
  %__u = alloca %union.anon.98, align 8
  %frombool = zext i1 %enabled to i8
  %call = call zeroext i1 @static_key_false(%struct.static_key* getelementptr inbounds (%struct.tracepoint, %struct.tracepoint* @__tracepoint_rdev_set_wakeup, i32 0, i32 1))
  br i1 %call, label %do.end, label %if.end27

do.end:                                           ; preds = %entry
  %0 = call i32 asm "movl %gs:$1,$0", "=r,*m,~{dirflag},~{fpsr},~{flags}"(i32* @cpu_number) #7, !srcloc !260
  %call3 = call i32 @cpumask_test_cpu(i32 %0, %struct.cpumask* @__cpu_online_mask)
  %tobool = icmp ne i32 %call3, 0
  br i1 %tobool, label %if.end, label %cleanup

if.end:                                           ; preds = %do.end
  call void @rcu_read_lock_sched_notrace()
  %1 = bitcast %union.anon.98* %__u to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %1) #6
  %__c = bitcast %union.anon.98* %__u to [1 x i8]*
  %arraydecay = getelementptr inbounds [1 x i8], [1 x i8]* %__c, i32 0, i32 0
  call void @__read_once_size(i8* bitcast (%struct.tracepoint_func** getelementptr inbounds (%struct.tracepoint, %struct.tracepoint* @__tracepoint_rdev_set_wakeup, i32 0, i32 4) to i8*), i8* %arraydecay, i32 8)
  %__val = bitcast %union.anon.98* %__u to %struct.tracepoint_func**
  %2 = load %struct.tracepoint_func*, %struct.tracepoint_func** %__val, align 8, !tbaa !72
  %3 = bitcast %union.anon.98* %__u to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %3) #6
  %tobool14 = icmp ne %struct.tracepoint_func* %2, null
  br i1 %tobool14, label %if.then15, label %if.end22

if.then15:                                        ; preds = %if.end
  br label %do.body16

do.body16:                                        ; preds = %do.body16, %if.then15
  %it_func_ptr.0 = phi %struct.tracepoint_func* [ %2, %if.then15 ], [ %incdec.ptr, %do.body16 ]
  %func = getelementptr inbounds %struct.tracepoint_func, %struct.tracepoint_func* %it_func_ptr.0, i32 0, i32 0
  %4 = load i8*, i8** %func, align 8, !tbaa !240
  %data = getelementptr inbounds %struct.tracepoint_func, %struct.tracepoint_func* %it_func_ptr.0, i32 0, i32 1
  %5 = load i8*, i8** %data, align 8, !tbaa !242
  %6 = bitcast i8* %4 to void (i8*, %struct.wiphy*, i1)*
  %tobool17 = trunc i8 %frombool to i1
  call void %6(i8* %5, %struct.wiphy* %wiphy, i1 zeroext %tobool17)
  %incdec.ptr = getelementptr inbounds %struct.tracepoint_func, %struct.tracepoint_func* %it_func_ptr.0, i32 1
  %func19 = getelementptr inbounds %struct.tracepoint_func, %struct.tracepoint_func* %incdec.ptr, i32 0, i32 0
  %7 = load i8*, i8** %func19, align 8, !tbaa !240
  %tobool20 = icmp ne i8* %7, null
  br i1 %tobool20, label %do.body16, label %if.end22

if.end22:                                         ; preds = %do.body16, %if.end
  call void @rcu_read_unlock_sched_notrace()
  br label %cleanup

cleanup:                                          ; preds = %do.end, %if.end22
  ret void

if.end27:                                         ; preds = %entry
  ret void
}

declare void @sock_release(%struct.socket*) #2

declare void @mutex_lock(%struct.mutex*) #2

declare void @mutex_unlock(%struct.mutex*) #2

; Function Attrs: inlinehint nounwind uwtable
define internal void @__list_add(%struct.list_head* %new, %struct.list_head* %prev, %struct.list_head* %next) #4 {
entry:
  %__u = alloca %union.anon.100, align 8
  %call = call zeroext i1 @__list_add_valid(%struct.list_head* %new, %struct.list_head* %prev, %struct.list_head* %next)
  br i1 %call, label %if.end, label %return

if.end:                                           ; preds = %entry
  %prev1 = getelementptr inbounds %struct.list_head, %struct.list_head* %next, i32 0, i32 1
  store %struct.list_head* %new, %struct.list_head** %prev1, align 8, !tbaa !82
  %next2 = getelementptr inbounds %struct.list_head, %struct.list_head* %new, i32 0, i32 0
  store %struct.list_head* %next, %struct.list_head** %next2, align 8, !tbaa !75
  %prev3 = getelementptr inbounds %struct.list_head, %struct.list_head* %new, i32 0, i32 1
  store %struct.list_head* %prev, %struct.list_head** %prev3, align 8, !tbaa !82
  %0 = bitcast %union.anon.100* %__u to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %0) #6
  %__val = bitcast %union.anon.100* %__u to %struct.list_head**
  store %struct.list_head* %new, %struct.list_head** %__val, align 8, !tbaa !72
  %next4 = getelementptr inbounds %struct.list_head, %struct.list_head* %prev, i32 0, i32 0
  %1 = bitcast %struct.list_head** %next4 to i8*
  %__c = bitcast %union.anon.100* %__u to [1 x i8]*
  %arraydecay = getelementptr inbounds [1 x i8], [1 x i8]* %__c, i32 0, i32 0
  call void @__write_once_size(i8* %1, i8* %arraydecay, i32 8)
  %__val5 = bitcast %union.anon.100* %__u to %struct.list_head**
  %2 = load %struct.list_head*, %struct.list_head** %__val5, align 8, !tbaa !72
  %3 = bitcast %union.anon.100* %__u to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %3) #6
  br label %return

return:                                           ; preds = %entry, %if.end
  ret void
}

declare void @_raw_spin_unlock_irqrestore(%struct.raw_spinlock*, i64) #2 section ".spinlock.text"

declare zeroext i1 @queue_work_on(i32, %struct.workqueue_struct*, %struct.work_struct*) #2

declare i32 @register_pernet_device(%struct.pernet_operations*) #2

declare i32 @wiphy_sysfs_init() #2

declare i32 @register_netdevice_notifier(%struct.notifier_block*) #2

declare i32 @nl80211_init() #2

declare i32 @regulatory_init() #2 section ".init.text"

declare %struct.workqueue_struct* @__alloc_workqueue_key(i8*, i32, i32, %struct.lock_class_key*, i8*, ...) #2

; Function Attrs: nounwind uwtable
define internal i32 @cfg80211_netdev_notifier_call(%struct.notifier_block* %nb, i64 %state, i8* %ptr) #0 {
entry:
  %.compoundliteral = alloca %struct.raw_spinlock, align 4
  %.compoundliteral33 = alloca %struct.raw_spinlock, align 4
  %.compoundliteral73 = alloca %struct.atomic64_t, align 8
  %0 = bitcast i8* %ptr to %struct.netdev_notifier_info*
  %call = call %struct.net_device* @netdev_notifier_info_to_dev(%struct.netdev_notifier_info* %0)
  %ieee80211_ptr = getelementptr inbounds %struct.net_device, %struct.net_device* %call, i32 0, i32 69
  %1 = load %struct.wireless_dev*, %struct.wireless_dev** %ieee80211_ptr, align 8, !tbaa !261
  %tobool = icmp ne %struct.wireless_dev* %1, null
  br i1 %tobool, label %if.end, label %cleanup

if.end:                                           ; preds = %entry
  %wiphy = getelementptr inbounds %struct.wireless_dev, %struct.wireless_dev* %1, i32 0, i32 0
  %2 = load %struct.wiphy*, %struct.wiphy** %wiphy, align 8, !tbaa !229
  %call1 = call %struct.cfg80211_registered_device* @wiphy_to_rdev(%struct.wiphy* %2)
  %iftype = getelementptr inbounds %struct.wireless_dev, %struct.wireless_dev* %1, i32 0, i32 1
  %3 = load i32, i32* %iftype, align 8, !tbaa !58
  %cmp = icmp eq i32 %3, 0
  %lnot = xor i1 %cmp, true
  %lnot2 = xor i1 %lnot, true
  %lnot.ext = zext i1 %lnot2 to i32
  %tobool3 = icmp ne i32 %lnot.ext, 0
  %lnot4 = xor i1 %tobool3, true
  %lnot6 = xor i1 %lnot4, true
  %lnot.ext7 = zext i1 %lnot6 to i32
  %conv = sext i32 %lnot.ext7 to i64
  %expval = call i64 @llvm.expect.i64(i64 %conv, i64 0)
  %tobool8 = icmp ne i64 %expval, 0
  br i1 %tobool8, label %if.then9, label %if.end10

if.then9:                                         ; preds = %if.end
  call void @warn_slowpath_null(i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.1, i32 0, i32 0), i32 1099)
  br label %if.end10

if.end10:                                         ; preds = %if.then9, %if.end
  %tobool11 = icmp ne i32 %lnot.ext, 0
  %lnot12 = xor i1 %tobool11, true
  %lnot14 = xor i1 %lnot12, true
  %lnot.ext15 = zext i1 %lnot14 to i32
  %conv16 = sext i32 %lnot.ext15 to i64
  %expval17 = call i64 @llvm.expect.i64(i64 %conv16, i64 0)
  br label %NodeBlock19

NodeBlock19:                                      ; preds = %if.end10
  %Pivot20 = icmp slt i64 %state, 6
  br i1 %Pivot20, label %NodeBlock3, label %NodeBlock17

NodeBlock17:                                      ; preds = %NodeBlock19
  %Pivot18 = icmp slt i64 %state, 13
  br i1 %Pivot18, label %NodeBlock9, label %NodeBlock15

NodeBlock15:                                      ; preds = %NodeBlock17
  %Pivot16 = icmp slt i64 %state, 16
  br i1 %Pivot16, label %LeafBlock11, label %LeafBlock13

LeafBlock13:                                      ; preds = %NodeBlock15
  %SwitchLeaf14 = icmp eq i64 %state, 16
  br i1 %SwitchLeaf14, label %sw.bb, label %NewDefault

LeafBlock11:                                      ; preds = %NodeBlock15
  %SwitchLeaf12 = icmp eq i64 %state, 13
  br i1 %SwitchLeaf12, label %sw.bb228, label %NewDefault

NodeBlock9:                                       ; preds = %NodeBlock17
  %Pivot10 = icmp slt i64 %state, 9
  br i1 %Pivot10, label %LeafBlock5, label %LeafBlock7

LeafBlock7:                                       ; preds = %NodeBlock9
  %SwitchLeaf8 = icmp eq i64 %state, 9
  br i1 %SwitchLeaf8, label %sw.bb80, label %NewDefault

LeafBlock5:                                       ; preds = %NodeBlock9
  %SwitchLeaf6 = icmp eq i64 %state, 6
  br i1 %SwitchLeaf6, label %sw.bb183, label %NewDefault

NodeBlock3:                                       ; preds = %NodeBlock19
  %Pivot4 = icmp slt i64 %state, 2
  br i1 %Pivot4, label %LeafBlock, label %NodeBlock

NodeBlock:                                        ; preds = %NodeBlock3
  %Pivot = icmp slt i64 %state, 5
  br i1 %Pivot, label %LeafBlock1, label %do.body

LeafBlock1:                                       ; preds = %NodeBlock
  %SwitchLeaf2 = icmp eq i64 %state, 2
  br i1 %SwitchLeaf2, label %sw.bb81, label %NewDefault

LeafBlock:                                        ; preds = %NodeBlock3
  %SwitchLeaf = icmp eq i64 %state, 1
  br i1 %SwitchLeaf, label %sw.bb159, label %NewDefault

sw.bb:                                            ; preds = %LeafBlock13
  %dev18 = getelementptr inbounds %struct.net_device, %struct.net_device* %call, i32 0, i32 106
  %type = getelementptr inbounds %struct.device, %struct.device* %dev18, i32 0, i32 4
  store %struct.device_type* @wiphy_type, %struct.device_type** %type, align 8, !tbaa !262
  br label %sw.epilog242

do.body:                                          ; preds = %NodeBlock
  %mtx = getelementptr inbounds %struct.wireless_dev, %struct.wireless_dev* %1, i32 0, i32 7
  call void @__mutex_init(%struct.mutex* %mtx, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.11, i32 0, i32 0), %struct.lock_class_key* @cfg80211_netdev_notifier_call.__key)
  %event_list = getelementptr inbounds %struct.wireless_dev, %struct.wireless_dev* %1, i32 0, i32 21
  call void @INIT_LIST_HEAD(%struct.list_head* %event_list)
  %event_lock = getelementptr inbounds %struct.wireless_dev, %struct.wireless_dev* %1, i32 0, i32 22
  %call21 = call %struct.raw_spinlock* @spinlock_check(%struct.spinlock* %event_lock)
  %event_lock23 = getelementptr inbounds %struct.wireless_dev, %struct.wireless_dev* %1, i32 0, i32 22
  %4 = getelementptr inbounds %struct.spinlock, %struct.spinlock* %event_lock23, i32 0, i32 0
  %rlock = bitcast %union.anon.1* %4 to %struct.raw_spinlock*
  %raw_lock = getelementptr inbounds %struct.raw_spinlock, %struct.raw_spinlock* %.compoundliteral, i32 0, i32 0
  %val = getelementptr inbounds %struct.qspinlock, %struct.qspinlock* %raw_lock, i32 0, i32 0
  %counter = getelementptr inbounds %struct.atomic_t, %struct.atomic_t* %val, i32 0, i32 0
  store i32 0, i32* %counter, align 4, !tbaa !117
  %5 = bitcast %struct.raw_spinlock* %rlock to i8*
  %6 = bitcast %struct.raw_spinlock* %.compoundliteral to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %5, i8* %6, i64 4, i32 4, i1 false), !tbaa.struct !118
  %mgmt_registrations = getelementptr inbounds %struct.wireless_dev, %struct.wireless_dev* %1, i32 0, i32 5
  call void @INIT_LIST_HEAD(%struct.list_head* %mgmt_registrations)
  %mgmt_registrations_lock = getelementptr inbounds %struct.wireless_dev, %struct.wireless_dev* %1, i32 0, i32 6
  %call29 = call %struct.raw_spinlock* @spinlock_check(%struct.spinlock* %mgmt_registrations_lock)
  %mgmt_registrations_lock31 = getelementptr inbounds %struct.wireless_dev, %struct.wireless_dev* %1, i32 0, i32 6
  %7 = getelementptr inbounds %struct.spinlock, %struct.spinlock* %mgmt_registrations_lock31, i32 0, i32 0
  %rlock32 = bitcast %union.anon.1* %7 to %struct.raw_spinlock*
  %raw_lock34 = getelementptr inbounds %struct.raw_spinlock, %struct.raw_spinlock* %.compoundliteral33, i32 0, i32 0
  %val35 = getelementptr inbounds %struct.qspinlock, %struct.qspinlock* %raw_lock34, i32 0, i32 0
  %counter36 = getelementptr inbounds %struct.atomic_t, %struct.atomic_t* %val35, i32 0, i32 0
  store i32 0, i32* %counter36, align 4, !tbaa !117
  %8 = bitcast %struct.raw_spinlock* %rlock32 to i8*
  %9 = bitcast %struct.raw_spinlock* %.compoundliteral33 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %8, i8* %9, i64 4, i32 4, i1 false), !tbaa.struct !118
  %wdev_id = getelementptr inbounds %struct.cfg80211_registered_device, %struct.cfg80211_registered_device* %call1, i32 0, i32 10
  %10 = load i32, i32* %wdev_id, align 4, !tbaa !263
  %inc = add nsw i32 %10, 1
  store i32 %inc, i32* %wdev_id, align 4, !tbaa !263
  %identifier = getelementptr inbounds %struct.wireless_dev, %struct.wireless_dev* %1, i32 0, i32 4
  store i32 %inc, i32* %identifier, align 8, !tbaa !264
  %list = getelementptr inbounds %struct.wireless_dev, %struct.wireless_dev* %1, i32 0, i32 2
  %wiphy41 = getelementptr inbounds %struct.cfg80211_registered_device, %struct.cfg80211_registered_device* %call1, i32 0, i32 42
  %wdev_list = getelementptr inbounds %struct.wiphy, %struct.wiphy* %wiphy41, i32 0, i32 55
  call void @list_add_rcu(%struct.list_head* %list, %struct.list_head* %wdev_list)
  %devlist_generation = getelementptr inbounds %struct.cfg80211_registered_device, %struct.cfg80211_registered_device* %call1, i32 0, i32 9
  %11 = load i32, i32* %devlist_generation, align 16, !tbaa !230
  %inc42 = add nsw i32 %11, 1
  store i32 %inc42, i32* %devlist_generation, align 16, !tbaa !230
  %features = getelementptr inbounds %struct.net_device, %struct.net_device* %call, i32 0, i32 16
  %12 = load i64, i64* %features, align 16, !tbaa !51
  %or = or i64 %12, 8192
  store i64 %or, i64* %features, align 16, !tbaa !51
  %dev43 = getelementptr inbounds %struct.net_device, %struct.net_device* %call, i32 0, i32 106
  %kobj = getelementptr inbounds %struct.device, %struct.device* %dev43, i32 0, i32 2
  %wiphy44 = getelementptr inbounds %struct.cfg80211_registered_device, %struct.cfg80211_registered_device* %call1, i32 0, i32 42
  %dev45 = getelementptr inbounds %struct.wiphy, %struct.wiphy* %wiphy44, i32 0, i32 50
  %kobj46 = getelementptr inbounds %struct.device, %struct.device* %dev45, i32 0, i32 2
  %call47 = call i32 @sysfs_create_link(%struct.kobject* %kobj, %struct.kobject* %kobj46, i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.12, i32 0, i32 0))
  %tobool48 = icmp ne i32 %call47, 0
  br i1 %tobool48, label %if.then49, label %if.end51

if.then49:                                        ; preds = %do.body
  %call50 = call i32 (i8*, ...) @printk(i8* getelementptr inbounds ([55 x i8], [55 x i8]* @.str.13, i32 0, i32 0))
  br label %if.end51

if.end51:                                         ; preds = %if.then49, %do.body
  %netdev = getelementptr inbounds %struct.wireless_dev, %struct.wireless_dev* %1, i32 0, i32 3
  store %struct.net_device* %call, %struct.net_device** %netdev, align 8, !tbaa !48
  %wiphy52 = getelementptr inbounds %struct.wireless_dev, %struct.wireless_dev* %1, i32 0, i32 0
  %13 = load %struct.wiphy*, %struct.wiphy** %wiphy52, align 8, !tbaa !229
  %flags = getelementptr inbounds %struct.wiphy, %struct.wiphy* %13, i32 0, i32 10
  %14 = load i32, i32* %flags, align 4, !tbaa !158
  %and = and i32 %14, 16
  %tobool53 = icmp ne i32 %and, 0
  %ps = getelementptr inbounds %struct.wireless_dev, %struct.wireless_dev* %1, i32 0, i32 28
  %.sink = select i1 %tobool53, i8 1, i8 0
  store i8 %.sink, i8* %ps, align 2, !tbaa !265
  %ps_timeout = getelementptr inbounds %struct.wireless_dev, %struct.wireless_dev* %1, i32 0, i32 29
  store i32 -1, i32* %ps_timeout, align 4, !tbaa !266
  %iftype57 = getelementptr inbounds %struct.wireless_dev, %struct.wireless_dev* %1, i32 0, i32 1
  %15 = load i32, i32* %iftype57, align 8, !tbaa !58
  %cmp58 = icmp eq i32 %15, 2
  br i1 %cmp58, label %land.lhs.true, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %if.end51
  %iftype60 = getelementptr inbounds %struct.wireless_dev, %struct.wireless_dev* %1, i32 0, i32 1
  %16 = load i32, i32* %iftype60, align 8, !tbaa !58
  %cmp61 = icmp eq i32 %16, 8
  br i1 %cmp61, label %land.lhs.true, label %lor.lhs.false63

lor.lhs.false63:                                  ; preds = %lor.lhs.false
  %iftype64 = getelementptr inbounds %struct.wireless_dev, %struct.wireless_dev* %1, i32 0, i32 1
  %17 = load i32, i32* %iftype64, align 8, !tbaa !58
  %cmp65 = icmp eq i32 %17, 1
  br i1 %cmp65, label %land.lhs.true, label %do.body71

land.lhs.true:                                    ; preds = %lor.lhs.false63, %lor.lhs.false, %if.end51
  %use_4addr = getelementptr inbounds %struct.wireless_dev, %struct.wireless_dev* %1, i32 0, i32 8
  %18 = load i8, i8* %use_4addr, align 8, !tbaa !267, !range !66
  %tobool67 = trunc i8 %18 to i1
  br i1 %tobool67, label %do.body71, label %if.then68

if.then68:                                        ; preds = %land.lhs.true
  %priv_flags = getelementptr inbounds %struct.net_device, %struct.net_device* %call, i32 0, i32 34
  %19 = load i32, i32* %priv_flags, align 4, !tbaa !268
  %or69 = or i32 %19, 64
  store i32 %or69, i32* %priv_flags, align 4, !tbaa !268
  br label %do.body71

do.body71:                                        ; preds = %lor.lhs.false63, %land.lhs.true, %if.then68
  %disconnect_wk = getelementptr inbounds %struct.wireless_dev, %struct.wireless_dev* %1, i32 0, i32 19
  call void @__init_work(%struct.work_struct* %disconnect_wk, i32 0)
  %disconnect_wk72 = getelementptr inbounds %struct.wireless_dev, %struct.wireless_dev* %1, i32 0, i32 19
  %data = getelementptr inbounds %struct.work_struct, %struct.work_struct* %disconnect_wk72, i32 0, i32 0
  %counter74 = getelementptr inbounds %struct.atomic64_t, %struct.atomic64_t* %.compoundliteral73, i32 0, i32 0
  store i64 68719476704, i64* %counter74, align 8, !tbaa !119
  %20 = bitcast %struct.atomic64_t* %data to i8*
  %21 = bitcast %struct.atomic64_t* %.compoundliteral73 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %20, i8* %21, i64 8, i32 8, i1 false), !tbaa.struct !120
  %disconnect_wk75 = getelementptr inbounds %struct.wireless_dev, %struct.wireless_dev* %1, i32 0, i32 19
  %entry76 = getelementptr inbounds %struct.work_struct, %struct.work_struct* %disconnect_wk75, i32 0, i32 1
  call void @INIT_LIST_HEAD(%struct.list_head* %entry76)
  %disconnect_wk77 = getelementptr inbounds %struct.wireless_dev, %struct.wireless_dev* %1, i32 0, i32 19
  %func = getelementptr inbounds %struct.work_struct, %struct.work_struct* %disconnect_wk77, i32 0, i32 2
  store void (%struct.work_struct*)* @cfg80211_autodisconnect_wk, void (%struct.work_struct*)** %func, align 8, !tbaa !122
  call void @nl80211_notify_iface(%struct.cfg80211_registered_device* %call1, %struct.wireless_dev* %1, i32 7)
  br label %sw.epilog242

sw.bb80:                                          ; preds = %LeafBlock7
  call void @cfg80211_leave(%struct.cfg80211_registered_device* %call1, %struct.wireless_dev* %1)
  br label %sw.epilog242

sw.bb81:                                          ; preds = %LeafBlock1
  %iftype82 = getelementptr inbounds %struct.wireless_dev, %struct.wireless_dev* %1, i32 0, i32 1
  %22 = load i32, i32* %iftype82, align 8, !tbaa !58
  call void @cfg80211_update_iface_num(%struct.cfg80211_registered_device* %call1, i32 %22, i32 -1)
  %scan_req = getelementptr inbounds %struct.cfg80211_registered_device, %struct.cfg80211_registered_device* %call1, i32 0, i32 25
  %23 = load %struct.cfg80211_scan_request*, %struct.cfg80211_scan_request** %scan_req, align 8, !tbaa !61
  %tobool83 = icmp ne %struct.cfg80211_scan_request* %23, null
  br i1 %tobool83, label %land.lhs.true84, label %do.end124

land.lhs.true84:                                  ; preds = %sw.bb81
  %scan_req85 = getelementptr inbounds %struct.cfg80211_registered_device, %struct.cfg80211_registered_device* %call1, i32 0, i32 25
  %24 = load %struct.cfg80211_scan_request*, %struct.cfg80211_scan_request** %scan_req85, align 8, !tbaa !61
  %wdev86 = getelementptr inbounds %struct.cfg80211_scan_request, %struct.cfg80211_scan_request* %24, i32 0, i32 10
  %25 = load %struct.wireless_dev*, %struct.wireless_dev** %wdev86, align 8, !tbaa !62
  %cmp87 = icmp eq %struct.wireless_dev* %25, %1
  br i1 %cmp87, label %if.then89, label %do.end124

if.then89:                                        ; preds = %land.lhs.true84
  %scan_req91 = getelementptr inbounds %struct.cfg80211_registered_device, %struct.cfg80211_registered_device* %call1, i32 0, i32 25
  %26 = load %struct.cfg80211_scan_request*, %struct.cfg80211_scan_request** %scan_req91, align 8, !tbaa !61
  %notified = getelementptr inbounds %struct.cfg80211_scan_request, %struct.cfg80211_scan_request* %26, i32 0, i32 17
  %27 = load i8, i8* %notified, align 8, !tbaa !65, !range !66
  %tobool92 = trunc i8 %27 to i1
  %lnot93 = xor i1 %tobool92, true
  %lnot95 = xor i1 %lnot93, true
  %lnot97 = xor i1 %lnot95, true
  %lnot.ext98 = zext i1 %lnot97 to i32
  %tobool99 = icmp ne i32 %lnot.ext98, 0
  %lnot100 = xor i1 %tobool99, true
  %lnot102 = xor i1 %lnot100, true
  %lnot.ext103 = zext i1 %lnot102 to i32
  %conv104 = sext i32 %lnot.ext103 to i64
  %expval105 = call i64 @llvm.expect.i64(i64 %conv104, i64 0)
  %tobool106 = icmp ne i64 %expval105, 0
  br i1 %tobool106, label %if.then107, label %if.end108

if.then107:                                       ; preds = %if.then89
  call void @warn_slowpath_null(i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.1, i32 0, i32 0), i32 1156)
  br label %if.end108

if.end108:                                        ; preds = %if.then107, %if.then89
  %tobool110 = icmp ne i32 %lnot.ext98, 0
  %lnot111 = xor i1 %tobool110, true
  %lnot113 = xor i1 %lnot111, true
  %lnot.ext114 = zext i1 %lnot113 to i32
  %conv115 = sext i32 %lnot.ext114 to i64
  %expval116 = call i64 @llvm.expect.i64(i64 %conv115, i64 0)
  %tobool117 = icmp ne i64 %expval116, 0
  br i1 %tobool117, label %if.then118, label %if.end120

if.then118:                                       ; preds = %if.end108
  %scan_req119 = getelementptr inbounds %struct.cfg80211_registered_device, %struct.cfg80211_registered_device* %call1, i32 0, i32 25
  %28 = load %struct.cfg80211_scan_request*, %struct.cfg80211_scan_request** %scan_req119, align 8, !tbaa !61
  %info = getelementptr inbounds %struct.cfg80211_scan_request, %struct.cfg80211_scan_request* %28, i32 0, i32 16
  %aborted = getelementptr inbounds %struct.cfg80211_scan_info, %struct.cfg80211_scan_info* %info, i32 0, i32 2
  store i8 1, i8* %aborted, align 2, !tbaa !67
  br label %if.end120

if.end120:                                        ; preds = %if.then118, %if.end108
  call void @___cfg80211_scan_done(%struct.cfg80211_registered_device* %call1, i1 zeroext false)
  br label %do.end124

do.end124:                                        ; preds = %sw.bb81, %land.lhs.true84, %if.end120
  %sched_scan_req126 = getelementptr inbounds %struct.cfg80211_registered_device, %struct.cfg80211_registered_device* %call1, i32 0, i32 27
  %29 = load %struct.cfg80211_sched_scan_request*, %struct.cfg80211_sched_scan_request** %sched_scan_req126, align 8, !tbaa !233
  %tobool128 = icmp ne %struct.cfg80211_sched_scan_request* %29, null
  br i1 %tobool128, label %land.rhs, label %land.end

land.rhs:                                         ; preds = %do.end124
  %dev129 = getelementptr inbounds %struct.cfg80211_sched_scan_request, %struct.cfg80211_sched_scan_request* %29, i32 0, i32 19
  %30 = load %struct.net_device*, %struct.net_device** %dev129, align 8, !tbaa !234
  %netdev130 = getelementptr inbounds %struct.wireless_dev, %struct.wireless_dev* %1, i32 0, i32 3
  %31 = load %struct.net_device*, %struct.net_device** %netdev130, align 8, !tbaa !48
  %cmp131 = icmp eq %struct.net_device* %30, %31
  br label %land.end

land.end:                                         ; preds = %land.rhs, %do.end124
  %32 = phi i1 [ false, %do.end124 ], [ %cmp131, %land.rhs ]
  %lnot133 = xor i1 %32, true
  %lnot135 = xor i1 %lnot133, true
  %lnot.ext136 = zext i1 %lnot135 to i32
  %tobool137 = icmp ne i32 %lnot.ext136, 0
  %lnot138 = xor i1 %tobool137, true
  %lnot140 = xor i1 %lnot138, true
  %lnot.ext141 = zext i1 %lnot140 to i32
  %conv142 = sext i32 %lnot.ext141 to i64
  %expval143 = call i64 @llvm.expect.i64(i64 %conv142, i64 0)
  %tobool144 = icmp ne i64 %expval143, 0
  br i1 %tobool144, label %if.then145, label %if.end146

if.then145:                                       ; preds = %land.end
  call void @warn_slowpath_null(i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.1, i32 0, i32 0), i32 1163)
  br label %if.end146

if.end146:                                        ; preds = %if.then145, %land.end
  %tobool148 = icmp ne i32 %lnot.ext136, 0
  %lnot149 = xor i1 %tobool148, true
  %lnot151 = xor i1 %lnot149, true
  %lnot.ext152 = zext i1 %lnot151 to i32
  %conv153 = sext i32 %lnot.ext152 to i64
  %expval154 = call i64 @llvm.expect.i64(i64 %conv153, i64 0)
  %tobool155 = icmp ne i64 %expval154, 0
  br i1 %tobool155, label %if.then156, label %if.end158

if.then156:                                       ; preds = %if.end146
  %call157 = call i32 @__cfg80211_stop_sched_scan(%struct.cfg80211_registered_device* %call1, i1 zeroext false)
  br label %if.end158

if.end158:                                        ; preds = %if.then156, %if.end146
  %opencount = getelementptr inbounds %struct.cfg80211_registered_device, %struct.cfg80211_registered_device* %call1, i32 0, i32 11
  %33 = load i32, i32* %opencount, align 8, !tbaa !60
  %dec = add nsw i32 %33, -1
  store i32 %dec, i32* %opencount, align 8, !tbaa !60
  %dev_wait = getelementptr inbounds %struct.cfg80211_registered_device, %struct.cfg80211_registered_device* %call1, i32 0, i32 12
  call void @__wake_up(%struct.__wait_queue_head* %dev_wait, i32 3, i32 1, i8* null)
  br label %sw.epilog242

sw.bb159:                                         ; preds = %LeafBlock
  %iftype160 = getelementptr inbounds %struct.wireless_dev, %struct.wireless_dev* %1, i32 0, i32 1
  %34 = load i32, i32* %iftype160, align 8, !tbaa !58
  call void @cfg80211_update_iface_num(%struct.cfg80211_registered_device* %call1, i32 %34, i32 1)
  call void @wdev_lock(%struct.wireless_dev* %1)
  call void @wdev_unlock(%struct.wireless_dev* %1)
  %opencount162 = getelementptr inbounds %struct.cfg80211_registered_device, %struct.cfg80211_registered_device* %call1, i32 0, i32 11
  %35 = load i32, i32* %opencount162, align 8, !tbaa !60
  %inc163 = add nsw i32 %35, 1
  store i32 %inc163, i32* %opencount162, align 8, !tbaa !60
  %iftype164 = getelementptr inbounds %struct.wireless_dev, %struct.wireless_dev* %1, i32 0, i32 1
  %36 = load i32, i32* %iftype164, align 8, !tbaa !58
  %cmp165 = icmp eq i32 %36, 2
  br i1 %cmp165, label %land.lhs.true171, label %lor.lhs.false167

lor.lhs.false167:                                 ; preds = %sw.bb159
  %iftype168 = getelementptr inbounds %struct.wireless_dev, %struct.wireless_dev* %1, i32 0, i32 1
  %37 = load i32, i32* %iftype168, align 8, !tbaa !58
  %cmp169 = icmp eq i32 %37, 8
  br i1 %cmp169, label %land.lhs.true171, label %sw.epilog242

land.lhs.true171:                                 ; preds = %lor.lhs.false167, %sw.bb159
  %ops = getelementptr inbounds %struct.cfg80211_registered_device, %struct.cfg80211_registered_device* %call1, i32 0, i32 0
  %38 = load %struct.cfg80211_ops*, %struct.cfg80211_ops** %ops, align 32, !tbaa !68
  %set_power_mgmt = getelementptr inbounds %struct.cfg80211_ops, %struct.cfg80211_ops* %38, i32 0, i32 62
  %39 = load i32 (%struct.wiphy*, %struct.net_device*, i1, i32)*, i32 (%struct.wiphy*, %struct.net_device*, i1, i32)** %set_power_mgmt, align 8, !tbaa !269
  %tobool172 = icmp ne i32 (%struct.wiphy*, %struct.net_device*, i1, i32)* %39, null
  br i1 %tobool172, label %if.then173, label %sw.epilog242

if.then173:                                       ; preds = %land.lhs.true171
  %ps174 = getelementptr inbounds %struct.wireless_dev, %struct.wireless_dev* %1, i32 0, i32 28
  %40 = load i8, i8* %ps174, align 2, !tbaa !265, !range !66
  %tobool175 = trunc i8 %40 to i1
  %ps_timeout176 = getelementptr inbounds %struct.wireless_dev, %struct.wireless_dev* %1, i32 0, i32 29
  %41 = load i32, i32* %ps_timeout176, align 4, !tbaa !266
  %call177 = call i32 @rdev_set_power_mgmt(%struct.cfg80211_registered_device* %call1, %struct.net_device* %call, i1 zeroext %tobool175, i32 %41)
  %tobool178 = icmp ne i32 %call177, 0
  br i1 %tobool178, label %if.then179, label %sw.epilog242

if.then179:                                       ; preds = %if.then173
  %ps180 = getelementptr inbounds %struct.wireless_dev, %struct.wireless_dev* %1, i32 0, i32 28
  store i8 0, i8* %ps180, align 2, !tbaa !265
  br label %sw.epilog242

sw.bb183:                                         ; preds = %LeafBlock5
  %list184 = getelementptr inbounds %struct.wireless_dev, %struct.wireless_dev* %1, i32 0, i32 2
  %call185 = call i32 @list_empty(%struct.list_head* %list184)
  %tobool186 = icmp ne i32 %call185, 0
  br i1 %tobool186, label %if.end195, label %if.then187

if.then187:                                       ; preds = %sw.bb183
  call void @nl80211_notify_iface(%struct.cfg80211_registered_device* %call1, %struct.wireless_dev* %1, i32 8)
  %dev188 = getelementptr inbounds %struct.net_device, %struct.net_device* %call, i32 0, i32 106
  %kobj189 = getelementptr inbounds %struct.device, %struct.device* %dev188, i32 0, i32 2
  call void @sysfs_remove_link(%struct.kobject* %kobj189, i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.12, i32 0, i32 0))
  %list190 = getelementptr inbounds %struct.wireless_dev, %struct.wireless_dev* %1, i32 0, i32 2
  call void @list_del_rcu(%struct.list_head* %list190)
  %devlist_generation191 = getelementptr inbounds %struct.cfg80211_registered_device, %struct.cfg80211_registered_device* %call1, i32 0, i32 9
  %42 = load i32, i32* %devlist_generation191, align 16, !tbaa !230
  %inc192 = add nsw i32 %42, 1
  store i32 %inc192, i32* %devlist_generation191, align 16, !tbaa !230
  call void @cfg80211_mlme_purge_registrations(%struct.wireless_dev* %1)
  %disconnect_wk193 = getelementptr inbounds %struct.wireless_dev, %struct.wireless_dev* %1, i32 0, i32 19
  %call194 = call zeroext i1 @flush_work(%struct.work_struct* %disconnect_wk193)
  br label %if.end195

if.end195:                                        ; preds = %if.then187, %sw.bb183
  call void @synchronize_rcu()
  %list196 = getelementptr inbounds %struct.wireless_dev, %struct.wireless_dev* %1, i32 0, i32 2
  call void @INIT_LIST_HEAD(%struct.list_head* %list196)
  call void @cfg80211_process_wdev_events(%struct.wireless_dev* %1)
  %current_bss = getelementptr inbounds %struct.wireless_dev, %struct.wireless_dev* %1, i32 0, i32 23
  %43 = load %struct.cfg80211_internal_bss*, %struct.cfg80211_internal_bss** %current_bss, align 8, !tbaa !270
  %tobool198 = icmp ne %struct.cfg80211_internal_bss* %43, null
  %lnot199 = xor i1 %tobool198, true
  %lnot201 = xor i1 %lnot199, true
  %lnot.ext202 = zext i1 %lnot201 to i32
  %tobool203 = icmp ne i32 %lnot.ext202, 0
  %lnot204 = xor i1 %tobool203, true
  %lnot206 = xor i1 %lnot204, true
  %lnot.ext207 = zext i1 %lnot206 to i32
  %conv208 = sext i32 %lnot.ext207 to i64
  %expval209 = call i64 @llvm.expect.i64(i64 %conv208, i64 0)
  %tobool210 = icmp ne i64 %expval209, 0
  br i1 %tobool210, label %if.then211, label %if.end212

if.then211:                                       ; preds = %if.end195
  call void @warn_slowpath_null(i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.1, i32 0, i32 0), i32 1252)
  br label %if.end212

if.end212:                                        ; preds = %if.then211, %if.end195
  %tobool214 = icmp ne i32 %lnot.ext202, 0
  %lnot215 = xor i1 %tobool214, true
  %lnot217 = xor i1 %lnot215, true
  %lnot.ext218 = zext i1 %lnot217 to i32
  %conv219 = sext i32 %lnot.ext218 to i64
  %expval220 = call i64 @llvm.expect.i64(i64 %conv219, i64 0)
  %tobool221 = icmp ne i64 %expval220, 0
  br i1 %tobool221, label %if.then222, label %sw.epilog242

if.then222:                                       ; preds = %if.end212
  %current_bss223 = getelementptr inbounds %struct.wireless_dev, %struct.wireless_dev* %1, i32 0, i32 23
  %44 = load %struct.cfg80211_internal_bss*, %struct.cfg80211_internal_bss** %current_bss223, align 8, !tbaa !270
  call void @cfg80211_unhold_bss(%struct.cfg80211_internal_bss* %44)
  %wiphy224 = getelementptr inbounds %struct.wireless_dev, %struct.wireless_dev* %1, i32 0, i32 0
  %45 = load %struct.wiphy*, %struct.wiphy** %wiphy224, align 8, !tbaa !229
  %current_bss225 = getelementptr inbounds %struct.wireless_dev, %struct.wireless_dev* %1, i32 0, i32 23
  %46 = load %struct.cfg80211_internal_bss*, %struct.cfg80211_internal_bss** %current_bss225, align 8, !tbaa !270
  %pub = getelementptr inbounds %struct.cfg80211_internal_bss, %struct.cfg80211_internal_bss* %46, i32 0, i32 9
  call void @cfg80211_put_bss(%struct.wiphy* %45, %struct.cfg80211_bss* %pub)
  %current_bss226 = getelementptr inbounds %struct.wireless_dev, %struct.wireless_dev* %1, i32 0, i32 23
  store %struct.cfg80211_internal_bss* null, %struct.cfg80211_internal_bss** %current_bss226, align 8, !tbaa !270
  br label %sw.epilog242

sw.bb228:                                         ; preds = %LeafBlock11
  %wiphy229 = getelementptr inbounds %struct.wireless_dev, %struct.wireless_dev* %1, i32 0, i32 0
  %47 = load %struct.wiphy*, %struct.wiphy** %wiphy229, align 8, !tbaa !229
  %interface_modes = getelementptr inbounds %struct.wiphy, %struct.wiphy* %47, i32 0, i32 8
  %48 = load i16, i16* %interface_modes, align 16, !tbaa !139
  %conv230 = zext i16 %48 to i64
  %iftype231 = getelementptr inbounds %struct.wireless_dev, %struct.wireless_dev* %1, i32 0, i32 1
  %49 = load i32, i32* %iftype231, align 8, !tbaa !58
  %sh_prom = zext i32 %49 to i64
  %shl = shl i64 1, %sh_prom
  %and232 = and i64 %conv230, %shl
  %tobool233 = icmp ne i64 %and232, 0
  br i1 %tobool233, label %if.end236, label %if.then234

if.then234:                                       ; preds = %sw.bb228
  %call235 = call i32 @notifier_from_errno(i32 -95)
  br label %cleanup

if.end236:                                        ; preds = %sw.bb228
  %rfkill = getelementptr inbounds %struct.cfg80211_registered_device, %struct.cfg80211_registered_device* %call1, i32 0, i32 3
  %50 = load %struct.rfkill*, %struct.rfkill** %rfkill, align 16, !tbaa !128
  %call237 = call zeroext i1 @rfkill_blocked(%struct.rfkill* %50)
  br i1 %call237, label %if.then238, label %sw.epilog242

if.then238:                                       ; preds = %if.end236
  %call239 = call i32 @notifier_from_errno(i32 -132)
  br label %cleanup

sw.epilog242:                                     ; preds = %if.end236, %if.end212, %if.then222, %lor.lhs.false167, %land.lhs.true171, %if.then179, %if.then173, %if.end158, %sw.bb80, %do.body71, %sw.bb
  call void @wireless_nlevent_flush()
  br label %cleanup

NewDefault:                                       ; preds = %LeafBlock13, %LeafBlock11, %LeafBlock7, %LeafBlock5, %LeafBlock1, %LeafBlock
  br label %cleanup

cleanup:                                          ; preds = %NewDefault, %entry, %sw.epilog242, %if.then238, %if.then234
  %retval.0 = phi i32 [ %call239, %if.then238 ], [ 1, %sw.epilog242 ], [ %call235, %if.then234 ], [ 0, %entry ], [ 0, %NewDefault ]
  ret i32 %retval.0
}

; Function Attrs: inlinehint nounwind uwtable
define internal %struct.net_device* @netdev_notifier_info_to_dev(%struct.netdev_notifier_info* %info) #4 {
entry:
  %dev = getelementptr inbounds %struct.netdev_notifier_info, %struct.netdev_notifier_info* %info, i32 0, i32 0
  %0 = load %struct.net_device*, %struct.net_device** %dev, align 8, !tbaa !271
  ret %struct.net_device* %0
}

declare void @__mutex_init(%struct.mutex*, i8*, %struct.lock_class_key*) #2

declare i32 @sysfs_create_link(%struct.kobject*, %struct.kobject*, i8*) #2

declare void @cfg80211_autodisconnect_wk(%struct.work_struct*) #2

declare void @__wake_up(%struct.__wait_queue_head*, i32, i32, i8*) #2

; Function Attrs: inlinehint nounwind uwtable
define internal i32 @rdev_set_power_mgmt(%struct.cfg80211_registered_device* %rdev, %struct.net_device* %dev, i1 zeroext %enabled, i32 %timeout) #4 {
entry:
  %frombool = zext i1 %enabled to i8
  %wiphy = getelementptr inbounds %struct.cfg80211_registered_device, %struct.cfg80211_registered_device* %rdev, i32 0, i32 42
  %tobool = trunc i8 %frombool to i1
  call void @trace_rdev_set_power_mgmt(%struct.wiphy* %wiphy, %struct.net_device* %dev, i1 zeroext %tobool, i32 %timeout)
  %ops = getelementptr inbounds %struct.cfg80211_registered_device, %struct.cfg80211_registered_device* %rdev, i32 0, i32 0
  %0 = load %struct.cfg80211_ops*, %struct.cfg80211_ops** %ops, align 32, !tbaa !68
  %set_power_mgmt = getelementptr inbounds %struct.cfg80211_ops, %struct.cfg80211_ops* %0, i32 0, i32 62
  %1 = load i32 (%struct.wiphy*, %struct.net_device*, i1, i32)*, i32 (%struct.wiphy*, %struct.net_device*, i1, i32)** %set_power_mgmt, align 8, !tbaa !269
  %wiphy1 = getelementptr inbounds %struct.cfg80211_registered_device, %struct.cfg80211_registered_device* %rdev, i32 0, i32 42
  %tobool2 = trunc i8 %frombool to i1
  %call = call i32 %1(%struct.wiphy* %wiphy1, %struct.net_device* %dev, i1 zeroext %tobool2, i32 %timeout)
  %wiphy3 = getelementptr inbounds %struct.cfg80211_registered_device, %struct.cfg80211_registered_device* %rdev, i32 0, i32 42
  call void @trace_rdev_return_int(%struct.wiphy* %wiphy3, i32 %call)
  ret i32 %call
}

declare void @sysfs_remove_link(%struct.kobject*, i8*) #2

declare void @cfg80211_process_wdev_events(%struct.wireless_dev*) #2

; Function Attrs: inlinehint nounwind uwtable
define internal void @cfg80211_unhold_bss(%struct.cfg80211_internal_bss* %bss) #4 {
entry:
  %hold = getelementptr inbounds %struct.cfg80211_internal_bss, %struct.cfg80211_internal_bss* %bss, i32 0, i32 6
  %call = call i32 @atomic_sub_return(i32 1, %struct.atomic_t* %hold)
  %cmp = icmp slt i32 %call, 0
  %lnot = xor i1 %cmp, true
  %lnot1 = xor i1 %lnot, true
  %lnot.ext = zext i1 %lnot1 to i32
  %tobool = icmp ne i32 %lnot.ext, 0
  %lnot2 = xor i1 %tobool, true
  %lnot4 = xor i1 %lnot2, true
  %lnot.ext5 = zext i1 %lnot4 to i32
  %conv = sext i32 %lnot.ext5 to i64
  %expval = call i64 @llvm.expect.i64(i64 %conv, i64 0)
  %tobool6 = icmp ne i64 %expval, 0
  br i1 %tobool6, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  call void @warn_slowpath_null(i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.7, i32 0, i32 0), i32 174)
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  %tobool7 = icmp ne i32 %lnot.ext, 0
  %lnot8 = xor i1 %tobool7, true
  %lnot10 = xor i1 %lnot8, true
  %lnot.ext11 = zext i1 %lnot10 to i32
  %conv12 = sext i32 %lnot.ext11 to i64
  %expval13 = call i64 @llvm.expect.i64(i64 %conv12, i64 0)
  ret void
}

; Function Attrs: inlinehint nounwind uwtable
define internal i32 @notifier_from_errno(i32 %err) #4 {
entry:
  %tobool = icmp ne i32 %err, 0
  %sub = sub nsw i32 1, %err
  %or = or i32 32768, %sub
  %retval.0 = select i1 %tobool, i32 %or, i32 1
  ret i32 %retval.0
}

; Function Attrs: inlinehint nounwind uwtable
define internal void @wireless_nlevent_flush() #4 {
entry:
  ret void
}

; Function Attrs: inlinehint nounwind uwtable
define internal void @trace_rdev_set_power_mgmt(%struct.wiphy* %wiphy, %struct.net_device* %netdev, i1 zeroext %enabled, i32 %timeout) #4 {
entry:
  %__u = alloca %union.anon.101, align 8
  %frombool = zext i1 %enabled to i8
  %call = call zeroext i1 @static_key_false(%struct.static_key* getelementptr inbounds (%struct.tracepoint, %struct.tracepoint* @__tracepoint_rdev_set_power_mgmt, i32 0, i32 1))
  br i1 %call, label %do.end, label %if.end27

do.end:                                           ; preds = %entry
  %0 = call i32 asm "movl %gs:$1,$0", "=r,*m,~{dirflag},~{fpsr},~{flags}"(i32* @cpu_number) #7, !srcloc !273
  %call3 = call i32 @cpumask_test_cpu(i32 %0, %struct.cpumask* @__cpu_online_mask)
  %tobool = icmp ne i32 %call3, 0
  br i1 %tobool, label %if.end, label %cleanup

if.end:                                           ; preds = %do.end
  call void @rcu_read_lock_sched_notrace()
  %1 = bitcast %union.anon.101* %__u to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %1) #6
  %__c = bitcast %union.anon.101* %__u to [1 x i8]*
  %arraydecay = getelementptr inbounds [1 x i8], [1 x i8]* %__c, i32 0, i32 0
  call void @__read_once_size(i8* bitcast (%struct.tracepoint_func** getelementptr inbounds (%struct.tracepoint, %struct.tracepoint* @__tracepoint_rdev_set_power_mgmt, i32 0, i32 4) to i8*), i8* %arraydecay, i32 8)
  %__val = bitcast %union.anon.101* %__u to %struct.tracepoint_func**
  %2 = load %struct.tracepoint_func*, %struct.tracepoint_func** %__val, align 8, !tbaa !72
  %3 = bitcast %union.anon.101* %__u to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %3) #6
  %tobool14 = icmp ne %struct.tracepoint_func* %2, null
  br i1 %tobool14, label %if.then15, label %if.end22

if.then15:                                        ; preds = %if.end
  br label %do.body16

do.body16:                                        ; preds = %do.body16, %if.then15
  %it_func_ptr.0 = phi %struct.tracepoint_func* [ %2, %if.then15 ], [ %incdec.ptr, %do.body16 ]
  %func = getelementptr inbounds %struct.tracepoint_func, %struct.tracepoint_func* %it_func_ptr.0, i32 0, i32 0
  %4 = load i8*, i8** %func, align 8, !tbaa !240
  %data = getelementptr inbounds %struct.tracepoint_func, %struct.tracepoint_func* %it_func_ptr.0, i32 0, i32 1
  %5 = load i8*, i8** %data, align 8, !tbaa !242
  %6 = bitcast i8* %4 to void (i8*, %struct.wiphy*, %struct.net_device*, i1, i32)*
  %tobool17 = trunc i8 %frombool to i1
  call void %6(i8* %5, %struct.wiphy* %wiphy, %struct.net_device* %netdev, i1 zeroext %tobool17, i32 %timeout)
  %incdec.ptr = getelementptr inbounds %struct.tracepoint_func, %struct.tracepoint_func* %it_func_ptr.0, i32 1
  %func19 = getelementptr inbounds %struct.tracepoint_func, %struct.tracepoint_func* %incdec.ptr, i32 0, i32 0
  %7 = load i8*, i8** %func19, align 8, !tbaa !240
  %tobool20 = icmp ne i8* %7, null
  br i1 %tobool20, label %do.body16, label %if.end22

if.end22:                                         ; preds = %do.body16, %if.end
  call void @rcu_read_unlock_sched_notrace()
  br label %cleanup

cleanup:                                          ; preds = %do.end, %if.end22
  ret void

if.end27:                                         ; preds = %entry
  ret void
}

; Function Attrs: alwaysinline nounwind uwtable
define internal i32 @atomic_sub_return(i32 %i, %struct.atomic_t* %v) #5 {
entry:
  %sub = sub nsw i32 0, %i
  %call = call i32 @atomic_add_return(i32 %sub, %struct.atomic_t* %v)
  ret i32 %call
}

; Function Attrs: nounwind uwtable
define internal void @cfg80211_pernet_exit(%struct.net* %net) #0 {
entry:
  call void @rtnl_lock()
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %next.sink = phi %struct.list_head** [ %next, %for.inc ], [ getelementptr inbounds (%struct.list_head, %struct.list_head* @cfg80211_rdev_list, i32 0, i32 0), %entry ]
  %0 = load %struct.list_head*, %struct.list_head** %next.sink, align 8, !tbaa !2
  %1 = bitcast %struct.list_head* %0 to i8*
  %add.ptr24 = getelementptr inbounds i8, i8* %1, i64 -8
  %2 = bitcast i8* %add.ptr24 to %struct.cfg80211_registered_device*
  %list = getelementptr inbounds %struct.cfg80211_registered_device, %struct.cfg80211_registered_device* %2, i32 0, i32 1
  %cmp = icmp ne %struct.list_head* %list, @cfg80211_rdev_list
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %wiphy = getelementptr inbounds %struct.cfg80211_registered_device, %struct.cfg80211_registered_device* %2, i32 0, i32 42
  %call = call %struct.net* @wiphy_net(%struct.wiphy* %wiphy)
  %call1 = call i32 @net_eq(%struct.net* %call, %struct.net* %net)
  %tobool = icmp ne i32 %call1, 0
  br i1 %tobool, label %if.then, label %for.inc

if.then:                                          ; preds = %for.body
  %call2 = call i32 @cfg80211_switch_netns(%struct.cfg80211_registered_device* %2, %struct.net* @init_net)
  %tobool3 = icmp ne i32 %call2, 0
  %lnot = xor i1 %tobool3, true
  %lnot4 = xor i1 %lnot, true
  %lnot.ext = zext i1 %lnot4 to i32
  %tobool5 = icmp ne i32 %lnot.ext, 0
  %lnot6 = xor i1 %tobool5, true
  %lnot8 = xor i1 %lnot6, true
  %lnot.ext9 = zext i1 %lnot8 to i32
  %conv = sext i32 %lnot.ext9 to i64
  %expval = call i64 @llvm.expect.i64(i64 %conv, i64 0)
  %tobool10 = icmp ne i64 %expval, 0
  br i1 %tobool10, label %if.then11, label %if.end

if.then11:                                        ; preds = %if.then
  call void @warn_slowpath_null(i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.1, i32 0, i32 0), i32 1284)
  br label %if.end

if.end:                                           ; preds = %if.then11, %if.then
  %tobool13 = icmp ne i32 %lnot.ext, 0
  %lnot14 = xor i1 %tobool13, true
  %lnot16 = xor i1 %lnot14, true
  %lnot.ext17 = zext i1 %lnot16 to i32
  %conv18 = sext i32 %lnot.ext17 to i64
  %expval19 = call i64 @llvm.expect.i64(i64 %conv18, i64 0)
  br label %for.inc

for.inc:                                          ; preds = %for.body, %if.end
  %list22 = getelementptr inbounds %struct.cfg80211_registered_device, %struct.cfg80211_registered_device* %2, i32 0, i32 1
  %next = getelementptr inbounds %struct.list_head, %struct.list_head* %list22, i32 0, i32 0
  br label %for.cond

for.end:                                          ; preds = %for.cond
  call void @rtnl_unlock()
  ret void
}

; Function Attrs: inlinehint nounwind uwtable
define internal i32 @net_eq(%struct.net* %net1, %struct.net* %net2) #4 {
entry:
  %cmp = icmp eq %struct.net* %net1, %net2
  %conv = zext i1 %cmp to i32
  ret i32 %conv
}

attributes #0 = { nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind }
attributes #2 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { nounwind readnone }
attributes #4 = { inlinehint nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { alwaysinline nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #6 = { nounwind }
attributes #7 = { nounwind readonly }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 5.0.1 (tags/RELEASE_500/final)"}
!2 = !{!3, !3, i64 0}
!3 = !{!"any pointer", !4, i64 0}
!4 = !{!"omnipotent char", !5, i64 0}
!5 = !{!"Simple C/C++ TBAA"}
!6 = !{!7, !13, i64 108}
!7 = !{!"cfg80211_registered_device", !3, i64 0, !8, i64 8, !9, i64 24, !3, i64 48, !10, i64 56, !4, i64 88, !3, i64 96, !4, i64 104, !13, i64 108, !13, i64 112, !13, i64 116, !13, i64 120, !14, i64 128, !8, i64 152, !15, i64 168, !8, i64 176, !15, i64 192, !10, i64 200, !13, i64 232, !13, i64 236, !15, i64 240, !8, i64 248, !16, i64 264, !13, i64 272, !13, i64 276, !3, i64 280, !3, i64 288, !3, i64 296, !12, i64 304, !10, i64 312, !10, i64 344, !3, i64 376, !10, i64 384, !10, i64 416, !17, i64 448, !13, i64 544, !3, i64 552, !15, i64 560, !8, i64 568, !10, i64 584, !10, i64 616, !20, i64 672}
!8 = !{!"list_head", !3, i64 0, !3, i64 8}
!9 = !{!"rfkill_ops", !3, i64 0, !3, i64 8, !3, i64 16}
!10 = !{!"work_struct", !11, i64 0, !8, i64 8, !3, i64 24}
!11 = !{!"", !12, i64 0}
!12 = !{!"long", !4, i64 0}
!13 = !{!"int", !4, i64 0}
!14 = !{!"__wait_queue_head", !15, i64 0, !8, i64 8}
!15 = !{!"spinlock", !4, i64 0}
!16 = !{!"rb_root", !3, i64 0}
!17 = !{!"delayed_work", !10, i64 0, !18, i64 32, !3, i64 80, !13, i64 88}
!18 = !{!"timer_list", !19, i64 0, !12, i64 16, !3, i64 24, !12, i64 32, !13, i64 40}
!19 = !{!"hlist_node", !3, i64 0, !3, i64 8}
!20 = !{!"wiphy", !4, i64 0, !4, i64 6, !3, i64 16, !3, i64 24, !3, i64 32, !13, i64 40, !21, i64 44, !21, i64 46, !21, i64 48, !21, i64 50, !13, i64 52, !13, i64 56, !13, i64 60, !4, i64 64, !13, i64 68, !4, i64 72, !13, i64 76, !4, i64 80, !4, i64 81, !4, i64 82, !21, i64 84, !21, i64 86, !13, i64 88, !13, i64 92, !13, i64 96, !13, i64 100, !3, i64 104, !4, i64 112, !4, i64 113, !13, i64 116, !13, i64 120, !4, i64 124, !4, i64 125, !13, i64 160, !3, i64 168, !3, i64 176, !21, i64 184, !4, i64 186, !13, i64 188, !13, i64 192, !13, i64 196, !3, i64 200, !3, i64 208, !4, i64 216, !3, i64 224, !13, i64 232, !3, i64 240, !4, i64 248, !3, i64 272, !3, i64 280, !22, i64 288, !32, i64 1016, !3, i64 1024, !3, i64 1032, !3, i64 1040, !8, i64 1048, !37, i64 1064, !3, i64 1072, !3, i64 1080, !3, i64 1088, !13, i64 1096, !13, i64 1100, !21, i64 1104, !4, i64 1106, !4, i64 1107, !13, i64 1108, !34, i64 1112, !4, i64 1120, !4, i64 1152}
!21 = !{!"short", !4, i64 0}
!22 = !{!"device", !3, i64 0, !3, i64 8, !23, i64 16, !3, i64 80, !3, i64 88, !27, i64 96, !3, i64 128, !3, i64 136, !3, i64 144, !3, i64 152, !29, i64 160, !30, i64 200, !3, i64 488, !3, i64 496, !8, i64 504, !13, i64 520, !3, i64 528, !3, i64 536, !34, i64 544, !12, i64 552, !3, i64 560, !8, i64 568, !3, i64 584, !35, i64 592, !3, i64 600, !3, i64 608, !13, i64 616, !13, i64 620, !15, i64 624, !8, i64 632, !36, i64 648, !3, i64 680, !3, i64 688, !3, i64 696, !3, i64 704, !3, i64 712, !32, i64 720, !32, i64 720}
!23 = !{!"kobject", !3, i64 0, !8, i64 8, !3, i64 24, !3, i64 32, !3, i64 40, !3, i64 48, !24, i64 56, !13, i64 60, !13, i64 60, !13, i64 60, !13, i64 60, !13, i64 60}
!24 = !{!"kref", !25, i64 0}
!25 = !{!"refcount_struct", !26, i64 0}
!26 = !{!"", !13, i64 0}
!27 = !{!"mutex", !11, i64 0, !15, i64 8, !28, i64 12, !8, i64 16}
!28 = !{!"optimistic_spin_queue", !26, i64 0}
!29 = !{!"dev_links_info", !8, i64 0, !8, i64 16, !4, i64 32}
!30 = !{!"dev_pm_info", !31, i64 0, !13, i64 4, !13, i64 4, !32, i64 4, !32, i64 4, !32, i64 4, !32, i64 4, !32, i64 4, !32, i64 4, !32, i64 5, !15, i64 8, !8, i64 16, !33, i64 32, !3, i64 64, !32, i64 72, !32, i64 72, !32, i64 72, !18, i64 80, !12, i64 128, !10, i64 136, !14, i64 168, !3, i64 192, !26, i64 200, !26, i64 204, !13, i64 208, !13, i64 208, !13, i64 208, !13, i64 208, !13, i64 208, !13, i64 208, !32, i64 209, !13, i64 209, !13, i64 209, !13, i64 209, !13, i64 209, !13, i64 209, !13, i64 212, !4, i64 216, !4, i64 220, !13, i64 224, !13, i64 228, !12, i64 232, !12, i64 240, !12, i64 248, !12, i64 256, !3, i64 264, !3, i64 272, !3, i64 280}
!31 = !{!"pm_message", !13, i64 0}
!32 = !{!"_Bool", !4, i64 0}
!33 = !{!"completion", !13, i64 0, !14, i64 8}
!34 = !{!"long long", !4, i64 0}
!35 = !{!"dev_archdata", !3, i64 0}
!36 = !{!"klist_node", !3, i64 0, !8, i64 8, !24, i64 24}
!37 = !{!"", !3, i64 0}
!38 = !{i32 -2141855927, i32 -2141855902, i32 -2141855632, i32 -2141855835, i32 -2141855804, i32 -2141855774}
!39 = !{!7, !3, i64 1696}
!40 = !{!41, !3, i64 24}
!41 = !{!"dentry", !13, i64 0, !42, i64 4, !43, i64 8, !3, i64 24, !44, i64 32, !3, i64 48, !4, i64 56, !45, i64 88, !3, i64 96, !3, i64 104, !12, i64 112, !3, i64 120, !4, i64 128, !8, i64 144, !8, i64 160, !4, i64 176}
!42 = !{!"seqcount", !13, i64 0}
!43 = !{!"hlist_bl_node", !3, i64 0, !3, i64 8}
!44 = !{!"qstr", !4, i64 0, !3, i64 8}
!45 = !{!"lockref", !4, i64 0}
!46 = !{!13, !13, i64 0}
!47 = !{!7, !13, i64 724}
!48 = !{!49, !3, i64 32}
!49 = !{!"wireless_dev", !3, i64 0, !4, i64 8, !8, i64 16, !3, i64 32, !13, i64 40, !8, i64 48, !15, i64 64, !27, i64 72, !32, i64 104, !32, i64 105, !4, i64 106, !4, i64 112, !4, i64 144, !4, i64 145, !4, i64 146, !3, i64 152, !3, i64 160, !4, i64 168, !13, i64 172, !10, i64 176, !4, i64 208, !8, i64 216, !15, i64 232, !3, i64 240, !50, i64 248, !50, i64 272, !32, i64 296, !32, i64 297, !32, i64 298, !13, i64 300, !13, i64 304, !13, i64 308, !32, i64 312, !12, i64 320, !13, i64 328, !13, i64 332}
!50 = !{!"cfg80211_chan_def", !3, i64 0, !4, i64 8, !13, i64 12, !13, i64 16}
!51 = !{!52, !34, i64 208}
!52 = !{!"net_device", !4, i64 0, !19, i64 16, !3, i64 32, !12, i64 40, !12, i64 48, !12, i64 56, !13, i64 64, !26, i64 68, !12, i64 72, !8, i64 80, !8, i64 96, !8, i64 112, !8, i64 128, !8, i64 144, !8, i64 160, !53, i64 176, !34, i64 208, !34, i64 216, !34, i64 224, !34, i64 232, !34, i64 240, !34, i64 248, !34, i64 256, !13, i64 264, !13, i64 268, !54, i64 272, !11, i64 456, !11, i64 464, !11, i64 472, !3, i64 480, !3, i64 488, !3, i64 496, !3, i64 504, !13, i64 512, !13, i64 516, !21, i64 520, !21, i64 522, !4, i64 524, !4, i64 525, !4, i64 526, !4, i64 527, !13, i64 528, !13, i64 532, !13, i64 536, !21, i64 540, !21, i64 542, !21, i64 544, !21, i64 546, !21, i64 548, !4, i64 550, !4, i64 582, !4, i64 583, !21, i64 584, !21, i64 586, !21, i64 588, !15, i64 592, !4, i64 596, !32, i64 597, !55, i64 600, !55, i64 624, !55, i64 648, !3, i64 672, !13, i64 680, !13, i64 684, !3, i64 688, !3, i64 696, !3, i64 704, !3, i64 712, !3, i64 720, !3, i64 728, !3, i64 736, !3, i64 744, !3, i64 752, !13, i64 760, !13, i64 764, !12, i64 768, !3, i64 776, !3, i64 784, !3, i64 792, !3, i64 800, !3, i64 808, !4, i64 816, !3, i64 848, !19, i64 856, !3, i64 896, !13, i64 904, !13, i64 908, !3, i64 912, !4, i64 920, !12, i64 1048, !15, i64 1056, !13, i64 1060, !3, i64 1064, !3, i64 1072, !18, i64 1080, !3, i64 1128, !8, i64 1136, !8, i64 1152, !4, i64 1168, !32, i64 1169, !4, i64 1170, !3, i64 1176, !3, i64 1184, !37, i64 1192, !4, i64 1200, !22, i64 1208, !4, i64 1936, !3, i64 1968, !3, i64 1976, !13, i64 1984, !21, i64 1988, !4, i64 1990, !4, i64 1992, !4, i64 2056, !3, i64 2072, !3, i64 2080, !3, i64 2088, !32, i64 2096}
!53 = !{!"", !8, i64 0, !8, i64 16}
!54 = !{!"net_device_stats", !12, i64 0, !12, i64 8, !12, i64 16, !12, i64 24, !12, i64 32, !12, i64 40, !12, i64 48, !12, i64 56, !12, i64 64, !12, i64 72, !12, i64 80, !12, i64 88, !12, i64 96, !12, i64 104, !12, i64 112, !12, i64 120, !12, i64 128, !12, i64 136, !12, i64 144, !12, i64 152, !12, i64 160, !12, i64 168, !12, i64 176}
!55 = !{!"netdev_hw_addr_list", !8, i64 0, !13, i64 16}
!56 = !{!49, !3, i64 24}
!57 = !{!22, !3, i64 80}
!58 = !{!49, !4, i64 8}
!59 = !{!49, !32, i64 105}
!60 = !{!7, !13, i64 120}
!61 = !{!7, !3, i64 280}
!62 = !{!63, !3, i64 64}
!63 = !{!"cfg80211_scan_request", !3, i64 0, !13, i64 8, !13, i64 12, !4, i64 16, !3, i64 24, !12, i64 32, !21, i64 40, !32, i64 42, !13, i64 44, !4, i64 48, !3, i64 64, !4, i64 72, !4, i64 78, !4, i64 84, !3, i64 96, !12, i64 104, !64, i64 112, !32, i64 128, !32, i64 129, !4, i64 136}
!64 = !{!"cfg80211_scan_info", !34, i64 0, !4, i64 8, !32, i64 14}
!65 = !{!63, !32, i64 128}
!66 = !{i8 0, i8 2}
!67 = !{!63, !32, i64 126}
!68 = !{!7, !3, i64 0}
!69 = !{!70, !3, i64 616}
!70 = !{!"cfg80211_ops", !3, i64 0, !3, i64 8, !3, i64 16, !3, i64 24, !3, i64 32, !3, i64 40, !3, i64 48, !3, i64 56, !3, i64 64, !3, i64 72, !3, i64 80, !3, i64 88, !3, i64 96, !3, i64 104, !3, i64 112, !3, i64 120, !3, i64 128, !3, i64 136, !3, i64 144, !3, i64 152, !3, i64 160, !3, i64 168, !3, i64 176, !3, i64 184, !3, i64 192, !3, i64 200, !3, i64 208, !3, i64 216, !3, i64 224, !3, i64 232, !3, i64 240, !3, i64 248, !3, i64 256, !3, i64 264, !3, i64 272, !3, i64 280, !3, i64 288, !3, i64 296, !3, i64 304, !3, i64 312, !3, i64 320, !3, i64 328, !3, i64 336, !3, i64 344, !3, i64 352, !3, i64 360, !3, i64 368, !3, i64 376, !3, i64 384, !3, i64 392, !3, i64 400, !3, i64 408, !3, i64 416, !3, i64 424, !3, i64 432, !3, i64 440, !3, i64 448, !3, i64 456, !3, i64 464, !3, i64 472, !3, i64 480, !3, i64 488, !3, i64 496, !3, i64 504, !3, i64 512, !3, i64 520, !3, i64 528, !3, i64 536, !3, i64 544, !3, i64 552, !3, i64 560, !3, i64 568, !3, i64 576, !3, i64 584, !3, i64 592, !3, i64 600, !3, i64 608, !3, i64 616, !3, i64 624, !3, i64 632, !3, i64 640, !3, i64 648, !3, i64 656, !3, i64 664, !3, i64 672, !3, i64 680, !3, i64 688, !3, i64 696, !3, i64 704, !3, i64 712, !3, i64 720, !3, i64 728, !3, i64 736, !3, i64 744, !3, i64 752, !3, i64 760, !3, i64 768}
!71 = !{!70, !3, i64 736}
!72 = !{!4, !4, i64 0}
!73 = !{!74, !13, i64 16}
!74 = !{!"cfg80211_iface_destroy", !8, i64 0, !13, i64 16}
!75 = !{!8, !3, i64 0}
!76 = !{!49, !3, i64 16}
!77 = !{!49, !13, i64 332}
!78 = !{!21, !21, i64 0}
!79 = !{!34, !34, i64 0}
!80 = !{i32 -2147330618}
!81 = !{i32 -2147330580}
!82 = !{!8, !3, i64 8}
!83 = !{!70, !3, i64 32}
!84 = !{!70, !3, i64 48}
!85 = !{!70, !3, i64 64}
!86 = !{!70, !3, i64 72}
!87 = !{!70, !3, i64 304}
!88 = !{!70, !3, i64 312}
!89 = !{!70, !3, i64 320}
!90 = !{!70, !3, i64 328}
!91 = !{!70, !3, i64 336}
!92 = !{!70, !3, i64 352}
!93 = !{!70, !3, i64 360}
!94 = !{!70, !3, i64 368}
!95 = !{!70, !3, i64 24}
!96 = !{!70, !3, i64 112}
!97 = !{!70, !3, i64 120}
!98 = !{!70, !3, i64 152}
!99 = !{!70, !3, i64 160}
!100 = !{!70, !3, i64 224}
!101 = !{!70, !3, i64 232}
!102 = !{!70, !3, i64 608}
!103 = !{!70, !3, i64 88}
!104 = !{!70, !3, i64 104}
!105 = !{!70, !3, i64 240}
!106 = !{!70, !3, i64 248}
!107 = !{!70, !3, i64 0}
!108 = !{!70, !3, i64 8}
!109 = !{!70, !3, i64 544}
!110 = !{!70, !3, i64 552}
!111 = !{!70, !3, i64 464}
!112 = !{!70, !3, i64 472}
!113 = !{!70, !3, i64 712}
!114 = !{!70, !3, i64 720}
!115 = !{!70, !3, i64 696}
!116 = !{!70, !3, i64 704}
!117 = !{!26, !13, i64 0}
!118 = !{i64 0, i64 4, !46}
!119 = !{!11, !12, i64 0}
!120 = !{i64 0, i64 8, !121}
!121 = !{!12, !12, i64 0}
!122 = !{!10, !3, i64 24}
!123 = !{!18, !3, i64 24}
!124 = !{!18, !12, i64 32}
!125 = !{!7, !3, i64 1640}
!126 = !{!7, !3, i64 1104}
!127 = !{!7, !3, i64 40}
!128 = !{!7, !3, i64 48}
!129 = !{!7, !4, i64 784}
!130 = !{!7, !4, i64 785}
!131 = !{!7, !13, i64 788}
!132 = !{!7, !13, i64 792}
!133 = !{!7, !4, i64 796}
!134 = !{!7, !4, i64 1778}
!135 = !{!7, !13, i64 760}
!136 = !{!7, !13, i64 764}
!137 = !{i32 -2146618859, i32 -2146618820, i32 -2146618799, i32 -2146618762, i32 -2146618739, i32 -2146618730}
!138 = !{i32 -2146623296, i32 -2146623257, i32 -2146623236, i32 -2146623199, i32 -2146623176, i32 -2146623306}
!139 = !{!20, !21, i64 48}
!140 = !{!20, !3, i64 168}
!141 = !{!142, !13, i64 0}
!142 = !{!"wiphy_wowlan_support", !13, i64 0, !13, i64 4, !13, i64 8, !13, i64 12, !13, i64 16, !13, i64 20, !3, i64 24}
!143 = !{!142, !13, i64 4}
!144 = !{!142, !3, i64 24}
!145 = !{!20, !13, i64 60}
!146 = !{!70, !3, i64 728}
!147 = !{!70, !3, i64 744}
!148 = !{!70, !3, i64 752}
!149 = !{!20, !4, i64 1120}
!150 = !{!20, !13, i64 56}
!151 = !{!20, !3, i64 1072}
!152 = !{!153, !13, i64 0}
!153 = !{!"wiphy_coalesce_support", !13, i64 0, !13, i64 4, !13, i64 8, !13, i64 12, !13, i64 16, !13, i64 20}
!154 = !{!153, !13, i64 8}
!155 = !{!153, !13, i64 16}
!156 = !{!153, !13, i64 12}
!157 = !{!20, !13, i64 68}
!158 = !{!20, !13, i64 52}
!159 = !{!20, !3, i64 16}
!160 = !{!20, !21, i64 46}
!161 = !{!20, !21, i64 50}
!162 = !{!70, !3, i64 624}
!163 = !{!20, !13, i64 1108}
!164 = !{!165, !4, i64 16}
!165 = !{!"ieee80211_supported_band", !3, i64 0, !3, i64 8, !4, i64 16, !13, i64 20, !13, i64 24, !166, i64 28, !168, i64 52}
!166 = !{!"ieee80211_sta_ht_cap", !21, i64 0, !32, i64 2, !4, i64 3, !4, i64 4, !167, i64 5}
!167 = !{!"ieee80211_mcs_info", !4, i64 0, !21, i64 10, !4, i64 12, !4, i64 13}
!168 = !{!"ieee80211_sta_vht_cap", !32, i64 0, !13, i64 4, !169, i64 8}
!169 = !{!"ieee80211_vht_mcs_info", !21, i64 0, !21, i64 2, !21, i64 4, !21, i64 6}
!170 = !{!165, !13, i64 20}
!171 = !{!165, !13, i64 24}
!172 = !{!32, !32, i64 0}
!173 = !{!165, !32, i64 30}
!174 = !{!165, !21, i64 28}
!175 = !{!165, !3, i64 0}
!176 = !{!177, !13, i64 8}
!177 = !{!"ieee80211_channel", !4, i64 0, !21, i64 4, !21, i64 6, !13, i64 8, !13, i64 12, !13, i64 16, !13, i64 20, !32, i64 24, !13, i64 28, !13, i64 32, !13, i64 36, !4, i64 40, !12, i64 48, !13, i64 56}
!178 = !{!177, !13, i64 28}
!179 = !{!177, !13, i64 32}
!180 = !{!177, !13, i64 16}
!181 = !{!177, !13, i64 36}
!182 = !{!177, !4, i64 0}
!183 = !{!7, !3, i64 840}
!184 = !{!142, !13, i64 12}
!185 = !{!142, !13, i64 8}
!186 = !{!7, !13, i64 732}
!187 = !{!188, !13, i64 16}
!188 = !{!"regulatory_request", !189, i64 0, !13, i64 16, !4, i64 20, !4, i64 24, !4, i64 28, !4, i64 32, !32, i64 36, !32, i64 37, !4, i64 40, !8, i64 48}
!189 = !{!"callback_head", !3, i64 0, !3, i64 8}
!190 = !{!188, !4, i64 20}
!191 = !{!20, !4, i64 216}
!192 = !{!20, !13, i64 232}
!193 = !{!20, !3, i64 224}
!194 = !{!195, !4, i64 24}
!195 = !{!"wiphy_iftype_ext_capab", !4, i64 0, !3, i64 8, !3, i64 16, !4, i64 24}
!196 = !{!195, !3, i64 8}
!197 = !{!20, !3, i64 200}
!198 = !{!7, !32, i64 1688}
!199 = !{!20, !13, i64 40}
!200 = !{!20, !3, i64 32}
!201 = !{!202, !21, i64 12}
!202 = !{!"ieee80211_iface_combination", !3, i64 0, !13, i64 8, !21, i64 12, !4, i64 14, !32, i64 15, !4, i64 16, !4, i64 17, !13, i64 20}
!203 = !{!202, !4, i64 16}
!204 = !{!202, !13, i64 8}
!205 = !{!202, !4, i64 14}
!206 = !{!202, !3, i64 0}
!207 = !{!208, !21, i64 2}
!208 = !{!"ieee80211_iface_limit", !21, i64 0, !21, i64 2}
!209 = !{!208, !21, i64 0}
!210 = !{!20, !21, i64 44}
!211 = !{!202, !13, i64 20}
!212 = !{!7, !3, i64 848}
!213 = !{!70, !3, i64 16}
!214 = !{!70, !3, i64 416}
!215 = !{!7, !3, i64 24}
!216 = !{!217, !13, i64 24}
!217 = !{!"cfg80211_wowlan", !32, i64 0, !32, i64 1, !32, i64 2, !32, i64 3, !32, i64 4, !32, i64 5, !32, i64 6, !3, i64 8, !3, i64 16, !13, i64 24, !3, i64 32}
!218 = !{!217, !3, i64 8}
!219 = !{!220, !3, i64 0}
!220 = !{!"cfg80211_pkt_pattern", !3, i64 0, !3, i64 8, !13, i64 16, !13, i64 20}
!221 = !{!217, !3, i64 16}
!222 = !{!217, !3, i64 32}
!223 = !{!224, !3, i64 0}
!224 = !{!"cfg80211_beacon_registration", !8, i64 0, !13, i64 16}
!225 = !{!226, !3, i64 0}
!226 = !{!"cfg80211_internal_bss", !8, i64 0, !8, i64 16, !227, i64 32, !34, i64 56, !12, i64 64, !12, i64 72, !26, i64 80, !34, i64 88, !4, i64 96, !228, i64 104}
!227 = !{!"rb_node", !12, i64 0, !3, i64 8, !3, i64 16}
!228 = !{!"cfg80211_bss", !3, i64 0, !4, i64 8, !3, i64 16, !3, i64 24, !3, i64 32, !3, i64 40, !13, i64 48, !21, i64 52, !21, i64 54, !4, i64 56, !4, i64 64}
!229 = !{!49, !3, i64 0}
!230 = !{!7, !13, i64 112}
!231 = !{!7, !13, i64 232}
!232 = !{!7, !13, i64 236}
!233 = !{!7, !3, i64 296}
!234 = !{!235, !3, i64 120}
!235 = !{!"cfg80211_sched_scan_request", !3, i64 0, !13, i64 8, !13, i64 12, !4, i64 16, !3, i64 24, !12, i64 32, !13, i64 40, !3, i64 48, !13, i64 56, !13, i64 60, !13, i64 64, !3, i64 72, !13, i64 80, !4, i64 84, !4, i64 90, !32, i64 96, !4, i64 97, !236, i64 100, !3, i64 112, !3, i64 120, !12, i64 128, !189, i64 136, !13, i64 152, !4, i64 160}
!236 = !{!"cfg80211_bss_select_adjust", !4, i64 0, !4, i64 4}
!237 = !{!238, !4, i64 16}
!238 = !{!"cfg80211_event", !8, i64 0, !4, i64 16, !4, i64 24}
!239 = !{i32 -2133795260}
!240 = !{!241, !3, i64 0}
!241 = !{!"tracepoint_func", !3, i64 0, !3, i64 8, !13, i64 16}
!242 = !{!241, !3, i64 8}
!243 = !{!37, !3, i64 0}
!244 = !{!23, !3, i64 0}
!245 = !{i32 -2136973086}
!246 = !{i32 -2141411115}
!247 = !{i32 -2145954313}
!248 = !{i32 -2145954007}
!249 = !{i32 240222, i32 240233, i32 -2147202924}
!250 = !{i32 -2136811557}
!251 = !{i32 -2147329881}
!252 = !{i32 -2147329843}
!253 = !{i32 -2146342251}
!254 = !{i32 -2146371053}
!255 = !{i32 1024224}
!256 = !{i32 -2141098493}
!257 = !{i32 -2141567906}
!258 = !{i32 -2144973631}
!259 = !{i32 -2141309317}
!260 = !{i32 -2141254078}
!261 = !{!52, !3, i64 728}
!262 = !{!52, !3, i64 1296}
!263 = !{!7, !13, i64 116}
!264 = !{!49, !13, i64 40}
!265 = !{!49, !32, i64 298}
!266 = !{!49, !13, i64 300}
!267 = !{!49, !32, i64 104}
!268 = !{!52, !13, i64 516}
!269 = !{!70, !3, i64 496}
!270 = !{!49, !3, i64 240}
!271 = !{!272, !3, i64 0}
!272 = !{!"netdev_notifier_info", !3, i64 0}
!273 = !{i32 -2138743598}
