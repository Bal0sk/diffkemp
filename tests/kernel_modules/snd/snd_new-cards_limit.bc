; ModuleID = 'sound/core/sound.bc'
source_filename = "sound/core/sound.c"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%struct.kernel_symbol = type { i64, i8* }
%struct.kernel_param_ops = type { i32, i32 (i8*, %struct.kernel_param*)*, i32 (i8*, %struct.kernel_param*)*, void (i8*)* }
%struct.kernel_param = type { i8*, %struct.module*, %struct.kernel_param_ops*, i16, i8, i8, %union.anon.46 }
%struct.module = type { i32, %struct.list_head, [56 x i8], %struct.module_kobject, %struct.module_attribute*, i8*, i8*, %struct.kobject*, %struct.kernel_symbol*, i32*, i32, %struct.mutex, %struct.kernel_param*, i32, i32, %struct.kernel_symbol*, i32*, i8, %struct.kernel_symbol*, i32*, i32, i32, %struct.exception_table_entry*, i32 ()*, [40 x i8], %struct.module_layout, %struct.module_layout, %struct.mod_arch_specific, i64, i32, %struct.list_head, %struct.bug_entry*, %struct.mod_kallsyms*, %struct.mod_kallsyms, %struct.module_sect_attrs*, %struct.module_notes_attrs*, i8*, i8*, i32, i32, %struct.tracepoint**, i32, i8**, %struct.trace_event_call**, i32, %struct.trace_enum_map**, i32, %struct.list_head, %struct.list_head, void ()*, %struct.atomic_t, [12 x i8] }
%struct.module_kobject = type { %struct.kobject, %struct.module*, %struct.kobject*, %struct.module_param_attrs*, %struct.completion* }
%struct.kobject = type { i8*, %struct.list_head, %struct.kobject*, %struct.kset*, %struct.kobj_type*, %struct.kernfs_node*, %struct.kref, i8 }
%struct.kset = type { %struct.list_head, %struct.spinlock, %struct.kobject, %struct.kset_uevent_ops* }
%struct.spinlock = type { %union.anon.1 }
%union.anon.1 = type { %struct.raw_spinlock }
%struct.raw_spinlock = type { %struct.qspinlock }
%struct.qspinlock = type { %struct.atomic_t }
%struct.kset_uevent_ops = type { i32 (%struct.kset*, %struct.kobject*)*, i8* (%struct.kset*, %struct.kobject*)*, i32 (%struct.kset*, %struct.kobject*, %struct.kobj_uevent_env*)* }
%struct.kobj_uevent_env = type { [3 x i8*], [32 x i8*], i32, [2048 x i8], i32 }
%struct.kobj_type = type { void (%struct.kobject*)*, %struct.sysfs_ops*, %struct.attribute**, %struct.kobj_ns_type_operations* (%struct.kobject*)*, i8* (%struct.kobject*)* }
%struct.sysfs_ops = type { i64 (%struct.kobject*, %struct.attribute*, i8*)*, i64 (%struct.kobject*, %struct.attribute*, i8*, i64)* }
%struct.attribute = type { i8*, i16 }
%struct.kobj_ns_type_operations = type { i32, i1 ()*, i8* ()*, i8* (%struct.sock*)*, i8* ()*, void (i8*)* }
%struct.sock = type opaque
%struct.kernfs_node = type { %struct.atomic_t, %struct.atomic_t, %struct.kernfs_node*, i8*, %struct.rb_node, i8*, i32, %union.anon, i8*, i16, i16, i32, %struct.kernfs_iattrs* }
%struct.rb_node = type { i64, %struct.rb_node*, %struct.rb_node* }
%union.anon = type { %struct.kernfs_elem_attr }
%struct.kernfs_elem_attr = type { %struct.kernfs_ops*, %struct.kernfs_open_node*, i64, %struct.kernfs_node* }
%struct.kernfs_ops = type { i32 (%struct.kernfs_open_file*)*, void (%struct.kernfs_open_file*)*, i32 (%struct.seq_file*, i8*)*, i8* (%struct.seq_file*, i64*)*, i8* (%struct.seq_file*, i8*, i64*)*, void (%struct.seq_file*, i8*)*, i64 (%struct.kernfs_open_file*, i8*, i64, i64)*, i64, i8, i64 (%struct.kernfs_open_file*, i8*, i64, i64)*, i32 (%struct.kernfs_open_file*, %struct.vm_area_struct*)* }
%struct.kernfs_open_file = type { %struct.kernfs_node*, %struct.file*, %struct.seq_file*, i8*, %struct.mutex, %struct.mutex, i32, %struct.list_head, i8*, i64, i8, %struct.vm_operations_struct* }
%struct.file = type { %union.anon.2, %struct.path, %struct.inode*, %struct.file_operations*, %struct.spinlock, %struct.atomic64_t, i32, i32, %struct.mutex, i64, %struct.fown_struct, %struct.cred*, %struct.file_ra_state, i64, i8*, i8*, %struct.list_head, %struct.list_head, %struct.address_space* }
%union.anon.2 = type { %struct.callback_head }
%struct.callback_head = type { %struct.callback_head*, void (%struct.callback_head*)* }
%struct.path = type { %struct.vfsmount*, %struct.dentry* }
%struct.vfsmount = type opaque
%struct.dentry = type { i32, %struct.seqcount, %struct.hlist_bl_node, %struct.dentry*, %struct.qstr, %struct.inode*, [32 x i8], %struct.lockref, %struct.dentry_operations*, %struct.super_block*, i64, i8*, %union.anon.44, %struct.list_head, %struct.list_head, %union.anon.45 }
%struct.seqcount = type { i32 }
%struct.hlist_bl_node = type { %struct.hlist_bl_node*, %struct.hlist_bl_node** }
%struct.qstr = type { %union.anon.3, i8* }
%union.anon.3 = type { i64 }
%struct.lockref = type { %union.anon.42 }
%union.anon.42 = type { i64 }
%struct.dentry_operations = type { i32 (%struct.dentry*, i32)*, i32 (%struct.dentry*, i32)*, i32 (%struct.dentry*, %struct.qstr*)*, i32 (%struct.dentry*, i32, i8*, %struct.qstr*)*, i32 (%struct.dentry*)*, i32 (%struct.dentry*)*, void (%struct.dentry*)*, void (%struct.dentry*)*, void (%struct.dentry*, %struct.inode*)*, i8* (%struct.dentry*, i8*, i32)*, %struct.vfsmount* (%struct.path*)*, i32 (%struct.path*, i1)*, %struct.dentry* (%struct.dentry*, %struct.inode*, i32)*, [24 x i8] }
%struct.super_block = type { %struct.list_head, i32, i8, i64, i64, %struct.file_system_type*, %struct.super_operations*, %struct.dquot_operations*, %struct.quotactl_ops*, %struct.export_operations*, i64, i64, i64, %struct.dentry*, %struct.rw_semaphore, i32, %struct.atomic_t, i8*, %struct.xattr_handler**, %struct.fscrypt_operations*, %struct.hlist_bl_head, %struct.list_head, %struct.block_device*, %struct.backing_dev_info*, %struct.mtd_info*, %struct.hlist_node, i32, %struct.quota_info, %struct.sb_writers, [32 x i8], [16 x i8], i8*, i32, i32, i32, %struct.mutex, i8*, i8*, %struct.dentry_operations*, i32, %struct.shrinker, %struct.atomic64_t, i32, %struct.workqueue_struct*, %struct.hlist_head, %struct.user_namespace*, %struct.list_lru, [56 x i8], %struct.list_lru, %struct.callback_head, %struct.work_struct, %struct.mutex, i32, [36 x i8], %struct.spinlock, %struct.list_head, %struct.spinlock, %struct.list_head, [16 x i8] }
%struct.file_system_type = type { i8*, i32, %struct.dentry* (%struct.file_system_type*, i32, i8*, i8*)*, void (%struct.super_block*)*, %struct.module*, %struct.file_system_type*, %struct.hlist_head, %struct.lock_class_key, %struct.lock_class_key, %struct.lock_class_key, [3 x %struct.lock_class_key], %struct.lock_class_key, %struct.lock_class_key, %struct.lock_class_key }
%struct.lock_class_key = type {}
%struct.super_operations = type { %struct.inode* (%struct.super_block*)*, void (%struct.inode*)*, void (%struct.inode*, i32)*, i32 (%struct.inode*, %struct.writeback_control*)*, i32 (%struct.inode*)*, void (%struct.inode*)*, void (%struct.super_block*)*, i32 (%struct.super_block*, i32)*, i32 (%struct.super_block*)*, i32 (%struct.super_block*)*, i32 (%struct.super_block*)*, i32 (%struct.super_block*)*, i32 (%struct.dentry*, %struct.kstatfs*)*, i32 (%struct.super_block*, i32*, i8*)*, void (%struct.super_block*)*, i32 (%struct.seq_file*, %struct.dentry*)*, i32 (%struct.seq_file*, %struct.dentry*)*, i32 (%struct.seq_file*, %struct.dentry*)*, i32 (%struct.seq_file*, %struct.dentry*)*, i64 (%struct.super_block*, i32, i8*, i64, i64)*, i64 (%struct.super_block*, i32, i8*, i64, i64)*, %struct.dquot** (%struct.inode*)*, i32 (%struct.super_block*, %struct.page*, i32)*, i64 (%struct.super_block*, %struct.shrink_control*)*, i64 (%struct.super_block*, %struct.shrink_control*)* }
%struct.writeback_control = type opaque
%struct.kstatfs = type opaque
%struct.dquot = type { %struct.hlist_node, %struct.list_head, %struct.list_head, %struct.list_head, %struct.mutex, %struct.atomic_t, %struct.__wait_queue_head, %struct.super_block*, %struct.kqid, i64, i64, %struct.mem_dqblk }
%struct.__wait_queue_head = type { %struct.spinlock, %struct.list_head }
%struct.kqid = type { %union.anon.4, i32 }
%union.anon.4 = type { %struct.kuid_t }
%struct.kuid_t = type { i32 }
%struct.mem_dqblk = type { i64, i64, i64, i64, i64, i64, i64, i64, i64 }
%struct.page = type { i64, %union.anon.5, %union.anon.28, %union.anon.29, %union.anon.33, %union.anon.36, [8 x i8] }
%union.anon.5 = type { %struct.address_space* }
%union.anon.28 = type { i64 }
%union.anon.29 = type { i64 }
%union.anon.33 = type { %struct.list_head }
%union.anon.36 = type { i64 }
%struct.shrink_control = type { i32, i64, i32, %struct.mem_cgroup* }
%struct.mem_cgroup = type opaque
%struct.dquot_operations = type { i32 (%struct.dquot*)*, %struct.dquot* (%struct.super_block*, i32)*, void (%struct.dquot*)*, i32 (%struct.dquot*)*, i32 (%struct.dquot*)*, i32 (%struct.dquot*)*, i32 (%struct.super_block*, i32)*, i64* (%struct.inode*)*, i32 (%struct.inode*, %struct.kprojid_t*)*, i32 (%struct.super_block*, %struct.kqid*)* }
%struct.kprojid_t = type { i32 }
%struct.quotactl_ops = type { i32 (%struct.super_block*, i32, i32, %struct.path*)*, i32 (%struct.super_block*, i32)*, i32 (%struct.super_block*, i32)*, i32 (%struct.super_block*, i32)*, i32 (%struct.super_block*, i32)*, i32 (%struct.super_block*, i32, %struct.qc_info*)*, i32 (%struct.super_block*, i64, %struct.qc_dqblk*)*, i32 (%struct.super_block*, %struct.kqid*, %struct.qc_dqblk*)*, i32 (%struct.super_block*, i64, %struct.qc_dqblk*)*, i32 (%struct.super_block*, %struct.qc_state*)*, i32 (%struct.super_block*, i32)* }
%struct.qc_info = type { i32, i32, i32, i32, i32, i32, i32, i32 }
%struct.qc_dqblk = type { i32, i64, i64, i64, i64, i64, i64, i64, i64, i32, i32, i64, i64, i64, i64, i32 }
%struct.qc_state = type { i32, [3 x %struct.qc_type_state] }
%struct.qc_type_state = type { i32, i32, i32, i32, i32, i32, i32, i64, i64, i64 }
%struct.export_operations = type opaque
%struct.rw_semaphore = type { %struct.atomic64_t, %struct.list_head, %struct.raw_spinlock, %struct.optimistic_spin_queue, %struct.task_struct* }
%struct.optimistic_spin_queue = type { %struct.atomic_t }
%struct.task_struct = type { %struct.thread_info, i64, i8*, %struct.atomic_t, i32, i32, %struct.llist_node, i32, i32, i32, i64, %struct.task_struct*, i32, i32, i32, i32, i32, i32, %struct.sched_class*, [16 x i8], %struct.sched_entity, %struct.sched_rt_entity, %struct.task_group*, %struct.sched_dl_entity, i32, i32, i32, %struct.cpumask, %struct.sched_info, %struct.list_head, %struct.plist_node, %struct.rb_node, %struct.mm_struct*, %struct.mm_struct*, %struct.vmacache, %struct.task_rss_stat, i32, i32, i32, i32, i64, i32, i8, [3 x i8], i8, i64, %struct.restart_block, i32, i32, %struct.task_struct*, %struct.task_struct*, %struct.list_head, %struct.list_head, %struct.task_struct*, %struct.list_head, %struct.list_head, [3 x %struct.pid_link], %struct.list_head, %struct.list_head, %struct.completion*, i32*, i32*, i64, i64, i64, %struct.prev_cputime, i64, i64, i64, i64, i64, i64, %struct.task_cputime, [3 x %struct.list_head], %struct.cred*, %struct.cred*, %struct.cred*, [16 x i8], %struct.nameidata*, %struct.sysv_sem, %struct.sysv_shm, %struct.fs_struct*, %struct.files_struct*, %struct.nsproxy*, %struct.signal_struct*, %struct.sighand_struct*, %struct.sigset_t, %struct.sigset_t, %struct.sigset_t, %struct.sigpending, i64, i64, i32, %struct.callback_head*, %struct.audit_context*, %struct.kuid_t, i32, %struct.seccomp, i32, i32, %struct.spinlock, %struct.raw_spinlock, %struct.wake_q_node, %struct.rb_root, %struct.rb_node*, %struct.rt_mutex_waiter*, i8*, %struct.bio_list*, %struct.blk_plug*, %struct.reclaim_state*, %struct.backing_dev_info*, %struct.io_context*, i64, %struct.siginfo*, %struct.task_io_accounting, i64, i64, i64, %struct.nodemask_t, %struct.seqcount, i32, i32, %struct.css_set*, %struct.list_head, %struct.robust_list_head*, %struct.compat_robust_list_head*, %struct.list_head, %struct.futex_pi_state*, [2 x %struct.perf_event_context*], %struct.mutex, %struct.list_head, %struct.mempolicy*, i16, i16, %struct.tlbflush_unmap_batch, %struct.callback_head, %struct.pipe_inode_info*, %struct.page_frag, %struct.task_delay_info*, i32, i32, i64, i64, i64, i64, i64, i32, %struct.task_struct*, %struct.vm_struct*, %struct.atomic_t, [28 x i8], %struct.thread_struct }
%struct.thread_info = type { i64 }
%struct.llist_node = type { %struct.llist_node* }
%struct.sched_class = type opaque
%struct.sched_entity = type { %struct.load_weight, %struct.rb_node, %struct.list_head, i32, i64, i64, i64, i64, i64, %struct.sched_statistics, i32, %struct.sched_entity*, %struct.cfs_rq*, %struct.cfs_rq*, [32 x i8], %struct.sched_avg, [24 x i8] }
%struct.load_weight = type { i64, i32 }
%struct.sched_statistics = type { i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64 }
%struct.cfs_rq = type opaque
%struct.sched_avg = type { i64, i64, i32, i32, i64, i64 }
%struct.sched_rt_entity = type { %struct.list_head, i64, i64, i32, i16, i16, %struct.sched_rt_entity* }
%struct.task_group = type opaque
%struct.sched_dl_entity = type { %struct.rb_node, i64, i64, i64, i64, i64, i64, i32, i32, i32, i32, %struct.hrtimer }
%struct.hrtimer = type { %struct.timerqueue_node, i64, i32 (%struct.hrtimer*)*, %struct.hrtimer_clock_base*, i8, i8 }
%struct.timerqueue_node = type { %struct.rb_node, i64 }
%struct.hrtimer_clock_base = type { %struct.hrtimer_cpu_base*, i32, i32, %struct.timerqueue_head, i64 ()*, i64, [16 x i8] }
%struct.hrtimer_cpu_base = type { %struct.raw_spinlock, %struct.seqcount, %struct.hrtimer*, i32, i32, i32, i8, i8, i8, i64, %struct.hrtimer*, i32, i32, i32, i32, [4 x %struct.hrtimer_clock_base] }
%struct.timerqueue_head = type { %struct.rb_root, %struct.timerqueue_node* }
%struct.cpumask = type { [1 x i64] }
%struct.sched_info = type { i64, i64, i64, i64 }
%struct.plist_node = type { i32, %struct.list_head, %struct.list_head }
%struct.mm_struct = type { %struct.vm_area_struct*, %struct.rb_root, i32, i64 (%struct.file*, i64, i64, i64, i64)*, i64, i64, i64, i64, %struct.pgd_t*, %struct.atomic_t, %struct.atomic_t, %struct.atomic64_t, %struct.atomic64_t, i32, %struct.spinlock, %struct.rw_semaphore, %struct.list_head, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, [46 x i64], %struct.mm_rss_stat, %struct.linux_binfmt*, [1 x %struct.cpumask], %struct.mm_context_t, i64, %struct.core_state*, %struct.spinlock, %struct.kioctx_table*, %struct.user_namespace*, %struct.file*, %struct.mmu_notifier_mm*, i8, %struct.uprobes_state, %struct.atomic64_t, %struct.work_struct }
%struct.vm_area_struct = type { i64, i64, %struct.vm_area_struct*, %struct.vm_area_struct*, %struct.rb_node, i64, %struct.mm_struct*, %struct.pgprot, i64, %struct.anon.6, %struct.list_head, %struct.anon_vma*, %struct.vm_operations_struct*, i64, %struct.file*, i8*, %struct.mempolicy*, %struct.vm_userfaultfd_ctx }
%struct.pgprot = type { i64 }
%struct.anon.6 = type { %struct.rb_node, i64 }
%struct.anon_vma = type opaque
%struct.vm_userfaultfd_ctx = type {}
%struct.pgd_t = type { i64 }
%struct.mm_rss_stat = type { [4 x %struct.atomic64_t] }
%struct.linux_binfmt = type opaque
%struct.mm_context_t = type { %struct.ldt_struct*, i16, %struct.mutex, i8*, %struct.vdso_image*, %struct.atomic_t, i16, i16 }
%struct.ldt_struct = type opaque
%struct.vdso_image = type { i8*, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64 }
%struct.core_state = type { %struct.atomic_t, %struct.core_thread, %struct.completion }
%struct.core_thread = type { %struct.task_struct*, %struct.core_thread* }
%struct.completion = type { i32, %struct.__wait_queue_head }
%struct.kioctx_table = type opaque
%struct.mmu_notifier_mm = type opaque
%struct.uprobes_state = type {}
%struct.vmacache = type { i32, [4 x %struct.vm_area_struct*] }
%struct.task_rss_stat = type { i32, [4 x i32] }
%struct.restart_block = type { i64 (%struct.restart_block*)*, %union.anon.7 }
%union.anon.7 = type { %struct.anon.8 }
%struct.anon.8 = type { i32*, i32, i32, i32, i64, i32* }
%struct.pid_link = type { %struct.hlist_node, %struct.pid* }
%struct.pid = type { %struct.atomic_t, i32, [3 x %struct.hlist_head], %struct.callback_head, [1 x %struct.upid] }
%struct.upid = type { i32, %struct.pid_namespace*, %struct.hlist_node }
%struct.pid_namespace = type opaque
%struct.prev_cputime = type { i64, i64, %struct.raw_spinlock }
%struct.task_cputime = type { i64, i64, i64 }
%struct.nameidata = type opaque
%struct.sysv_sem = type { %struct.sem_undo_list* }
%struct.sem_undo_list = type opaque
%struct.sysv_shm = type { %struct.list_head }
%struct.fs_struct = type opaque
%struct.files_struct = type opaque
%struct.nsproxy = type opaque
%struct.signal_struct = type opaque
%struct.sighand_struct = type opaque
%struct.sigset_t = type { [1 x i64] }
%struct.sigpending = type { %struct.list_head, %struct.sigset_t }
%struct.audit_context = type opaque
%struct.seccomp = type { i32, %struct.seccomp_filter* }
%struct.seccomp_filter = type opaque
%struct.wake_q_node = type { %struct.wake_q_node* }
%struct.rb_root = type { %struct.rb_node* }
%struct.rt_mutex_waiter = type opaque
%struct.bio_list = type opaque
%struct.blk_plug = type opaque
%struct.reclaim_state = type opaque
%struct.io_context = type opaque
%struct.siginfo = type { i32, i32, i32, %union.anon.11 }
%union.anon.11 = type { %struct.anon.15, [80 x i8] }
%struct.anon.15 = type { i32, i32, i32, i64, i64 }
%struct.task_io_accounting = type { i64, i64, i64, i64, i64, i64, i64 }
%struct.nodemask_t = type { [1 x i64] }
%struct.css_set = type opaque
%struct.robust_list_head = type opaque
%struct.compat_robust_list_head = type opaque
%struct.futex_pi_state = type opaque
%struct.perf_event_context = type opaque
%struct.mempolicy = type opaque
%struct.tlbflush_unmap_batch = type { %struct.cpumask, i8, i8 }
%struct.pipe_inode_info = type opaque
%struct.page_frag = type { %struct.page*, i32, i32 }
%struct.task_delay_info = type opaque
%struct.vm_struct = type opaque
%struct.thread_struct = type { [3 x %struct.desc_struct], i64, i64, i16, i16, i16, i16, i32, i64, i64, [4 x %struct.perf_event*], i64, i64, i64, i64, i64, i64*, i64, i32, %struct.mm_segment_t, i8, [15 x i8], %struct.fpu }
%struct.desc_struct = type { %union.anon.21 }
%union.anon.21 = type { %struct.anon.22 }
%struct.anon.22 = type { i32, i32 }
%struct.perf_event = type opaque
%struct.mm_segment_t = type { i64 }
%struct.fpu = type { i32, i8, i8, [58 x i8], %union.fpregs_state }
%union.fpregs_state = type { %struct.xregs_state, [3520 x i8] }
%struct.xregs_state = type { %struct.fxregs_state, %struct.xstate_header, [0 x i8] }
%struct.fxregs_state = type { i16, i16, i16, i16, %union.anon.24, i32, i32, [32 x i32], [64 x i32], [12 x i32], %union.anon.27 }
%union.anon.24 = type { %struct.anon.25 }
%struct.anon.25 = type { i64, i64 }
%union.anon.27 = type { [12 x i32] }
%struct.xstate_header = type { i64, i64, [6 x i64] }
%struct.xattr_handler = type opaque
%struct.fscrypt_operations = type opaque
%struct.hlist_bl_head = type { %struct.hlist_bl_node* }
%struct.block_device = type { i32, i32, %struct.inode*, %struct.super_block*, %struct.mutex, i8*, i8*, i32, i8, %struct.list_head, %struct.block_device*, i32, %struct.hd_struct*, i32, i32, %struct.gendisk*, %struct.request_queue*, %struct.backing_dev_info*, %struct.list_head, i64, i32, %struct.mutex }
%struct.hd_struct = type opaque
%struct.gendisk = type opaque
%struct.request_queue = type opaque
%struct.backing_dev_info = type opaque
%struct.mtd_info = type opaque
%struct.hlist_node = type { %struct.hlist_node*, %struct.hlist_node** }
%struct.quota_info = type { i32, %struct.mutex, [3 x %struct.inode*], [3 x %struct.mem_dqinfo], [3 x %struct.quota_format_ops*] }
%struct.mem_dqinfo = type { %struct.quota_format_type*, i32, %struct.list_head, i64, i32, i32, i64, i64, i8* }
%struct.quota_format_type = type { i32, %struct.quota_format_ops*, %struct.module*, %struct.quota_format_type* }
%struct.quota_format_ops = type { i32 (%struct.super_block*, i32)*, i32 (%struct.super_block*, i32)*, i32 (%struct.super_block*, i32)*, i32 (%struct.super_block*, i32)*, i32 (%struct.dquot*)*, i32 (%struct.dquot*)*, i32 (%struct.dquot*)*, i32 (%struct.super_block*, %struct.kqid*)* }
%struct.sb_writers = type { i32, %struct.__wait_queue_head, [3 x %struct.percpu_rw_semaphore] }
%struct.percpu_rw_semaphore = type { %struct.rcu_sync, i32*, %struct.rw_semaphore, %struct.rcuwait, i32 }
%struct.rcu_sync = type { i32, i32, %struct.__wait_queue_head, i32, %struct.callback_head, i32 }
%struct.rcuwait = type { %struct.task_struct* }
%struct.shrinker = type { i64 (%struct.shrinker*, %struct.shrink_control*)*, i64 (%struct.shrinker*, %struct.shrink_control*)*, i32, i64, i64, %struct.list_head, %struct.atomic64_t* }
%struct.workqueue_struct = type opaque
%struct.hlist_head = type { %struct.hlist_node* }
%struct.user_namespace = type opaque
%struct.list_lru = type { %struct.list_lru_node* }
%struct.list_lru_node = type { %struct.spinlock, %struct.list_lru_one, [32 x i8] }
%struct.list_lru_one = type { %struct.list_head, i64 }
%struct.work_struct = type { %struct.atomic64_t, %struct.list_head, void (%struct.work_struct*)* }
%union.anon.44 = type { %struct.list_head }
%union.anon.45 = type { %struct.hlist_node }
%struct.inode = type { i16, i16, %struct.kuid_t, %struct.kgid_t, i32, %struct.posix_acl*, %struct.posix_acl*, %struct.inode_operations*, %struct.super_block*, %struct.address_space*, i8*, i64, %union.anon.37, i32, i64, %struct.timespec, %struct.timespec, %struct.timespec, %struct.spinlock, i16, i32, i64, i64, %struct.rw_semaphore, i64, i64, %struct.hlist_node, %struct.list_head, %struct.list_head, %struct.list_head, %struct.list_head, %union.anon.38, i64, %struct.atomic_t, %struct.atomic_t, %struct.atomic_t, %struct.file_operations*, %struct.file_lock_context*, %struct.address_space, %struct.list_head, %union.anon.41, i32, i32, %struct.hlist_head, i8* }
%struct.kgid_t = type { i32 }
%struct.posix_acl = type opaque
%struct.inode_operations = type { %struct.dentry* (%struct.inode*, %struct.dentry*, i32)*, i8* (%struct.dentry*, %struct.inode*, %struct.delayed_call*)*, i32 (%struct.inode*, i32)*, %struct.posix_acl* (%struct.inode*, i32)*, i32 (%struct.dentry*, i8*, i32)*, i32 (%struct.inode*, %struct.dentry*, i16, i1)*, i32 (%struct.dentry*, %struct.inode*, %struct.dentry*)*, i32 (%struct.inode*, %struct.dentry*)*, i32 (%struct.inode*, %struct.dentry*, i8*)*, i32 (%struct.inode*, %struct.dentry*, i16)*, i32 (%struct.inode*, %struct.dentry*)*, i32 (%struct.inode*, %struct.dentry*, i16, i32)*, i32 (%struct.inode*, %struct.dentry*, %struct.inode*, %struct.dentry*, i32)*, i32 (%struct.dentry*, %struct.iattr*)*, i32 (%struct.path*, %struct.kstat*, i32, i32)*, i64 (%struct.dentry*, i8*, i64)*, i32 (%struct.inode*, %struct.fiemap_extent_info*, i64, i64)*, i32 (%struct.inode*, %struct.timespec*, i32)*, i32 (%struct.inode*, %struct.dentry*, %struct.file*, i32, i16, i32*)*, i32 (%struct.inode*, %struct.dentry*, i16)*, i32 (%struct.inode*, %struct.posix_acl*, i32)*, [24 x i8] }
%struct.delayed_call = type { void (i8*)*, i8* }
%struct.iattr = type { i32, i16, %struct.kuid_t, %struct.kgid_t, i64, %struct.timespec, %struct.timespec, %struct.timespec, %struct.file* }
%struct.kstat = type { i32, i16, i32, i32, i64, i64, i64, i32, i32, %struct.kuid_t, %struct.kgid_t, i64, %struct.timespec, %struct.timespec, %struct.timespec, %struct.timespec, i64 }
%struct.fiemap_extent_info = type { i32, i32, i32, %struct.fiemap_extent* }
%struct.fiemap_extent = type { i64, i64, i64, [2 x i64], i32, [3 x i32] }
%union.anon.37 = type { i32 }
%struct.timespec = type { i64, i64 }
%union.anon.38 = type { %struct.callback_head }
%struct.file_lock_context = type { %struct.spinlock, %struct.list_head, %struct.list_head, %struct.list_head }
%struct.address_space = type { %struct.inode*, %struct.radix_tree_root, %struct.spinlock, %struct.atomic_t, %struct.rb_root, %struct.rw_semaphore, i64, i64, i64, %struct.address_space_operations*, i64, %struct.spinlock, i32, %struct.list_head, i8* }
%struct.radix_tree_root = type { i32, %struct.radix_tree_node* }
%struct.radix_tree_node = type { i8, i8, i8, i8, %struct.radix_tree_node*, %struct.radix_tree_root*, %union.anon.0, [64 x i8*], [3 x [1 x i64]] }
%union.anon.0 = type { %struct.list_head }
%struct.address_space_operations = type { i32 (%struct.page*, %struct.writeback_control*)*, i32 (%struct.file*, %struct.page*)*, i32 (%struct.address_space*, %struct.writeback_control*)*, i32 (%struct.page*)*, i32 (%struct.file*, %struct.address_space*, %struct.list_head*, i32)*, i32 (%struct.file*, %struct.address_space*, i64, i32, i32, %struct.page**, i8**)*, i32 (%struct.file*, %struct.address_space*, i64, i32, i32, %struct.page*, i8*)*, i64 (%struct.address_space*, i64)*, void (%struct.page*, i32, i32)*, i32 (%struct.page*, i32)*, void (%struct.page*)*, i64 (%struct.kiocb*, %struct.iov_iter*)*, i32 (%struct.address_space*, %struct.page*, %struct.page*, i32)*, i1 (%struct.page*, i32)*, void (%struct.page*)*, i32 (%struct.page*)*, i32 (%struct.page*, i64, i64)*, void (%struct.page*, i8*, i8*)*, i32 (%struct.address_space*, %struct.page*)*, i32 (%struct.swap_info_struct*, %struct.file*, i64*)*, void (%struct.file*)* }
%struct.kiocb = type { %struct.file*, i64, void (%struct.kiocb*, i64, i64)*, i8*, i32 }
%struct.iov_iter = type opaque
%struct.swap_info_struct = type opaque
%union.anon.41 = type { %struct.pipe_inode_info* }
%struct.file_operations = type { %struct.module*, i64 (%struct.file*, i64, i32)*, i64 (%struct.file*, i8*, i64, i64*)*, i64 (%struct.file*, i8*, i64, i64*)*, i64 (%struct.kiocb*, %struct.iov_iter*)*, i64 (%struct.kiocb*, %struct.iov_iter*)*, i32 (%struct.file*, %struct.dir_context*)*, i32 (%struct.file*, %struct.dir_context*)*, i32 (%struct.file*, %struct.poll_table_struct*)*, i64 (%struct.file*, i32, i64)*, i64 (%struct.file*, i32, i64)*, i32 (%struct.file*, %struct.vm_area_struct*)*, i32 (%struct.inode*, %struct.file*)*, i32 (%struct.file*, i8*)*, i32 (%struct.inode*, %struct.file*)*, i32 (%struct.file*, i64, i64, i32)*, i32 (i32, %struct.file*, i32)*, i32 (%struct.file*, i32, %struct.file_lock*)*, i64 (%struct.file*, %struct.page*, i32, i64, i64*, i32)*, i64 (%struct.file*, i64, i64, i64, i64)*, i32 (i32)*, i32 (%struct.file*, i32, %struct.file_lock*)*, i64 (%struct.pipe_inode_info*, %struct.file*, i64*, i64, i32)*, i64 (%struct.file*, i64*, %struct.pipe_inode_info*, i64, i32)*, i32 (%struct.file*, i64, %struct.file_lock**, i8**)*, i64 (%struct.file*, i32, i64, i64)*, void (%struct.seq_file*, %struct.file*)*, i64 (%struct.file*, i64, %struct.file*, i64, i64, i32)*, i32 (%struct.file*, i64, %struct.file*, i64, i64)*, i64 (%struct.file*, i64, i64, %struct.file*, i64)* }
%struct.dir_context = type { i32 (%struct.dir_context*, i8*, i32, i64, i64, i32)*, i64 }
%struct.poll_table_struct = type { void (%struct.file*, %struct.__wait_queue_head*, %struct.poll_table_struct*)*, i64 }
%struct.file_lock = type { %struct.file_lock*, %struct.list_head, %struct.hlist_node, %struct.list_head, i8*, i32, i8, i32, i32, %struct.pid*, %struct.__wait_queue_head, %struct.file*, i64, i64, %struct.fasync_struct*, i64, i64, %struct.file_lock_operations*, %struct.lock_manager_operations*, %union.anon.39 }
%struct.fasync_struct = type { %struct.spinlock, i32, i32, %struct.fasync_struct*, %struct.file*, %struct.callback_head }
%struct.file_lock_operations = type { void (%struct.file_lock*, %struct.file_lock*)*, void (%struct.file_lock*)* }
%struct.lock_manager_operations = type { i32 (%struct.file_lock*, %struct.file_lock*)*, i64 (%struct.file_lock*)*, i8* (i8*)*, void (i8*)*, void (%struct.file_lock*)*, i32 (%struct.file_lock*, i32)*, i1 (%struct.file_lock*)*, i32 (%struct.file_lock*, i32, %struct.list_head*)*, void (%struct.file_lock*, i8**)* }
%union.anon.39 = type { %struct.nfs_lock_info }
%struct.nfs_lock_info = type { i32, %struct.nlm_lockowner*, %struct.list_head }
%struct.nlm_lockowner = type opaque
%struct.atomic64_t = type { i64 }
%struct.fown_struct = type { %struct.rwlock_t, %struct.pid*, i32, %struct.kuid_t, %struct.kuid_t, i32 }
%struct.rwlock_t = type { %struct.qrwlock }
%struct.qrwlock = type { %struct.atomic_t, %struct.qspinlock }
%struct.cred = type { %struct.atomic_t, %struct.kuid_t, %struct.kgid_t, %struct.kuid_t, %struct.kgid_t, %struct.kuid_t, %struct.kgid_t, %struct.kuid_t, %struct.kgid_t, i32, %struct.kernel_cap_struct, %struct.kernel_cap_struct, %struct.kernel_cap_struct, %struct.kernel_cap_struct, %struct.kernel_cap_struct, i8, %struct.key*, %struct.key*, %struct.key*, %struct.key*, i8*, %struct.user_struct*, %struct.user_namespace*, %struct.group_info*, %struct.callback_head }
%struct.kernel_cap_struct = type { [2 x i32] }
%struct.key = type { %struct.atomic_t, i32, %union.anon.47, %struct.rw_semaphore, %struct.key_user*, i8*, %union.anon.48, i64, %struct.kuid_t, %struct.kgid_t, i32, i16, i16, i64, %union.anon.49, %union.anon.51, i32 (%struct.key*, %struct.key_type*, %union.key_payload*)* }
%union.anon.47 = type { %struct.rb_node }
%struct.key_user = type opaque
%union.anon.48 = type { i64 }
%union.anon.49 = type { %struct.keyring_index_key }
%struct.keyring_index_key = type { %struct.key_type*, i8*, i64 }
%struct.key_type = type opaque
%union.anon.51 = type { %union.key_payload }
%union.key_payload = type { [4 x i8*] }
%struct.user_struct = type { %struct.atomic_t, %struct.atomic_t, %struct.atomic_t, %struct.atomic64_t, i64, i64, i64, %struct.atomic64_t, %struct.key*, %struct.key*, %struct.hlist_node, %struct.kuid_t, %struct.atomic64_t }
%struct.group_info = type { %struct.atomic_t, i32, [0 x %struct.kgid_t] }
%struct.file_ra_state = type { i64, i32, i32, i32, i32, i64 }
%struct.seq_file = type { i8*, i64, i64, i64, i64, i64, i64, i64, %struct.mutex, %struct.seq_operations*, i32, %struct.file*, i8* }
%struct.seq_operations = type { i8* (%struct.seq_file*, i64*)*, void (%struct.seq_file*, i8*)*, i8* (%struct.seq_file*, i8*, i64*)*, i32 (%struct.seq_file*, i8*)* }
%struct.vm_operations_struct = type opaque
%struct.kernfs_open_node = type opaque
%struct.kernfs_iattrs = type opaque
%struct.kref = type { %struct.refcount_struct }
%struct.refcount_struct = type { %struct.atomic_t }
%struct.module_param_attrs = type opaque
%struct.module_attribute = type { %struct.attribute, i64 (%struct.module_attribute*, %struct.module_kobject*, i8*)*, i64 (%struct.module_attribute*, %struct.module_kobject*, i8*, i64)*, void (%struct.module*, i8*)*, i32 (%struct.module*)*, void (%struct.module*)* }
%struct.mutex = type { %struct.atomic64_t, %struct.spinlock, %struct.optimistic_spin_queue, %struct.list_head }
%struct.exception_table_entry = type { i32, i32, i32 }
%struct.module_layout = type { i8*, i32, i32, i32, i32, %struct.mod_tree_node }
%struct.mod_tree_node = type { %struct.module*, %struct.latch_tree_node }
%struct.latch_tree_node = type { [2 x %struct.rb_node] }
%struct.mod_arch_specific = type {}
%struct.bug_entry = type { i32, i32, i16, i16 }
%struct.mod_kallsyms = type { %struct.elf64_sym*, i32, i8* }
%struct.elf64_sym = type { i32, i8, i8, i16, i64, i64 }
%struct.module_sect_attrs = type opaque
%struct.module_notes_attrs = type opaque
%struct.tracepoint = type { i8*, %struct.static_key, i32 ()*, void ()*, %struct.tracepoint_func* }
%struct.static_key = type { %struct.atomic_t }
%struct.tracepoint_func = type { i8*, i8*, i32 }
%struct.trace_event_call = type opaque
%struct.trace_enum_map = type opaque
%struct.list_head = type { %struct.list_head*, %struct.list_head* }
%struct.atomic_t = type { i32 }
%union.anon.46 = type { i8* }
%struct.snd_minor = type { i32, i32, i32, %struct.file_operations*, i8*, %struct.device*, %struct.snd_card* }
%struct.device = type { %struct.device*, %struct.device_private*, %struct.kobject, i8*, %struct.device_type*, %struct.mutex, %struct.bus_type*, %struct.device_driver*, i8*, i8*, %struct.dev_links_info, %struct.dev_pm_info, %struct.dev_pm_domain*, %struct.irq_domain*, %struct.list_head, i32, %struct.dma_map_ops*, i64*, i64, i64, %struct.device_dma_parameters*, %struct.list_head, %struct.dma_coherent_mem*, %struct.dev_archdata, %struct.device_node*, %struct.fwnode_handle*, i32, i32, %struct.spinlock, %struct.list_head, %struct.klist_node, %struct.class*, %struct.attribute_group**, void (%struct.device*)*, %struct.iommu_group*, %struct.iommu_fwspec*, i8 }
%struct.device_private = type opaque
%struct.device_type = type { i8*, %struct.attribute_group**, i32 (%struct.device*, %struct.kobj_uevent_env*)*, i8* (%struct.device*, i16*, %struct.kuid_t*, %struct.kgid_t*)*, void (%struct.device*)*, %struct.dev_pm_ops* }
%struct.dev_pm_ops = type { i32 (%struct.device*)*, void (%struct.device*)*, i32 (%struct.device*)*, i32 (%struct.device*)*, i32 (%struct.device*)*, i32 (%struct.device*)*, i32 (%struct.device*)*, i32 (%struct.device*)*, i32 (%struct.device*)*, i32 (%struct.device*)*, i32 (%struct.device*)*, i32 (%struct.device*)*, i32 (%struct.device*)*, i32 (%struct.device*)*, i32 (%struct.device*)*, i32 (%struct.device*)*, i32 (%struct.device*)*, i32 (%struct.device*)*, i32 (%struct.device*)*, i32 (%struct.device*)*, i32 (%struct.device*)*, i32 (%struct.device*)*, i32 (%struct.device*)* }
%struct.bus_type = type { i8*, i8*, %struct.device*, %struct.device_attribute*, %struct.attribute_group**, %struct.attribute_group**, %struct.attribute_group**, i32 (%struct.device*, %struct.device_driver*)*, i32 (%struct.device*, %struct.kobj_uevent_env*)*, i32 (%struct.device*)*, i32 (%struct.device*)*, void (%struct.device*)*, i32 (%struct.device*)*, i32 (%struct.device*)*, i32 (%struct.device*, i32)*, i32 (%struct.device*)*, i32 (%struct.device*)*, %struct.dev_pm_ops*, %struct.iommu_ops*, %struct.subsys_private*, %struct.lock_class_key }
%struct.device_attribute = type { %struct.attribute, i64 (%struct.device*, %struct.device_attribute*, i8*)*, i64 (%struct.device*, %struct.device_attribute*, i8*, i64)* }
%struct.iommu_ops = type opaque
%struct.subsys_private = type opaque
%struct.device_driver = type { i8*, %struct.bus_type*, %struct.module*, i8*, i8, i32, %struct.of_device_id*, %struct.acpi_device_id*, i32 (%struct.device*)*, i32 (%struct.device*)*, void (%struct.device*)*, i32 (%struct.device*, i32)*, i32 (%struct.device*)*, %struct.attribute_group**, %struct.dev_pm_ops*, %struct.driver_private* }
%struct.of_device_id = type opaque
%struct.acpi_device_id = type opaque
%struct.driver_private = type opaque
%struct.dev_links_info = type { %struct.list_head, %struct.list_head, i32 }
%struct.dev_pm_info = type { %struct.pm_message, i16, %struct.spinlock, %struct.list_head, %struct.completion, %struct.wakeup_source*, i8, %struct.timer_list, i64, %struct.work_struct, %struct.__wait_queue_head, %struct.wake_irq*, %struct.atomic_t, %struct.atomic_t, i16, i32, i32, i32, i32, i32, i64, i64, i64, i64, %struct.pm_subsys_data*, void (%struct.device*, i32)*, %struct.dev_pm_qos* }
%struct.pm_message = type { i32 }
%struct.wakeup_source = type { i8*, %struct.list_head, %struct.spinlock, %struct.wake_irq*, %struct.timer_list, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i8 }
%struct.timer_list = type { %struct.hlist_node, i64, void (i64)*, i64, i32 }
%struct.wake_irq = type opaque
%struct.pm_subsys_data = type { %struct.spinlock, i32, %struct.list_head }
%struct.dev_pm_qos = type opaque
%struct.dev_pm_domain = type { %struct.dev_pm_ops, void (%struct.device*, i1)*, i32 (%struct.device*)*, void (%struct.device*)*, void (%struct.device*)* }
%struct.irq_domain = type opaque
%struct.dma_map_ops = type opaque
%struct.device_dma_parameters = type { i32, i64 }
%struct.dma_coherent_mem = type opaque
%struct.dev_archdata = type { i8* }
%struct.device_node = type opaque
%struct.fwnode_handle = type opaque
%struct.klist_node = type { i8*, %struct.list_head, %struct.kref }
%struct.class = type { i8*, %struct.module*, %struct.class_attribute*, %struct.attribute_group**, %struct.attribute_group**, %struct.kobject*, i32 (%struct.device*, %struct.kobj_uevent_env*)*, i8* (%struct.device*, i16*)*, void (%struct.class*)*, void (%struct.device*)*, i32 (%struct.device*, i32)*, i32 (%struct.device*)*, %struct.kobj_ns_type_operations*, i8* (%struct.device*)*, %struct.dev_pm_ops*, %struct.subsys_private* }
%struct.class_attribute = type { %struct.attribute, i64 (%struct.class*, %struct.class_attribute*, i8*)*, i64 (%struct.class*, %struct.class_attribute*, i8*, i64)* }
%struct.attribute_group = type { i8*, i16 (%struct.kobject*, %struct.attribute*, i32)*, i16 (%struct.kobject*, %struct.bin_attribute*, i32)*, %struct.attribute**, %struct.bin_attribute** }
%struct.bin_attribute = type { %struct.attribute, i64, i8*, i64 (%struct.file*, %struct.kobject*, %struct.bin_attribute*, i8*, i64, i64)*, i64 (%struct.file*, %struct.kobject*, %struct.bin_attribute*, i8*, i64, i64)*, i32 (%struct.file*, %struct.kobject*, %struct.bin_attribute*, %struct.vm_area_struct*)* }
%struct.iommu_group = type opaque
%struct.iommu_fwspec = type opaque
%struct.snd_card = type { i32, [16 x i8], [16 x i8], [32 x i8], [80 x i8], [32 x i8], [80 x i8], [128 x i8], %struct.module*, i8*, void (%struct.snd_card*)*, %struct.list_head, %struct.device, i32, %struct.rw_semaphore, %struct.rwlock_t, i32, i32, %struct.list_head, %struct.list_head, %struct.mutex, %struct.snd_info_entry*, %struct.snd_info_entry*, %struct.proc_dir_entry*, %struct.list_head, %struct.snd_shutdown_f_ops*, %struct.spinlock, i32, %struct.completion*, %struct.device*, %struct.device, [4 x %struct.attribute_group*], i8, i32, %struct.mutex, %struct.__wait_queue_head, %struct.snd_mixer_oss*, i32 }
%struct.snd_info_entry = type { i8*, i16, i64, i16, %union.anon.53, %struct.snd_info_entry*, %struct.snd_card*, %struct.module*, i8*, void (%struct.snd_info_entry*)*, %struct.proc_dir_entry*, %struct.mutex, %struct.list_head, %struct.list_head }
%union.anon.53 = type { %struct.snd_info_entry_text }
%struct.snd_info_entry_text = type { void (%struct.snd_info_entry*, %struct.snd_info_buffer*)*, void (%struct.snd_info_entry*, %struct.snd_info_buffer*)* }
%struct.snd_info_buffer = type { i8*, i32, i32, i32, i32, i32 }
%struct.proc_dir_entry = type opaque
%struct.snd_shutdown_f_ops = type opaque
%struct.snd_mixer_oss = type opaque

@snd_major = common global i32 0, align 4
@__kstrtab_snd_major = internal constant [10 x i8] c"snd_major\00", section "__ksymtab_strings", align 1
@__ksymtab_snd_major = internal constant %struct.kernel_symbol { i64 ptrtoint (i32* @snd_major to i64), i8* getelementptr inbounds ([10 x i8], [10 x i8]* @__kstrtab_snd_major, i32 0, i32 0) }, section "___ksymtab+snd_major", align 8
@__param_str_major = internal constant [10 x i8] c"snd.major\00", align 1
@param_ops_int = external constant %struct.kernel_param_ops, align 8
@major = internal global i32 116, align 4
@__param_major = internal constant %struct.kernel_param { i8* getelementptr inbounds ([10 x i8], [10 x i8]* @__param_str_major, i32 0, i32 0), %struct.module* null, %struct.kernel_param_ops* @param_ops_int, i16 292, i8 -1, i8 0, %union.anon.46 { i8* bitcast (i32* @major to i8*) } }, section "__param", align 8
@__param_str_cards_limit = internal constant [16 x i8] c"snd.cards_limit\00", align 16
@cards_limit = internal global i32 1, align 4
@__param_cards_limit = internal constant %struct.kernel_param { i8* getelementptr inbounds ([16 x i8], [16 x i8]* @__param_str_cards_limit, i32 0, i32 0), %struct.module* null, %struct.kernel_param_ops* @param_ops_int, i16 292, i8 -1, i8 0, %union.anon.46 { i8* bitcast (i32* @cards_limit to i8*) } }, section "__param", align 8
@snd_ecards_limit = common global i32 0, align 4
@__kstrtab_snd_ecards_limit = internal constant [17 x i8] c"snd_ecards_limit\00", section "__ksymtab_strings", align 1
@__ksymtab_snd_ecards_limit = internal constant %struct.kernel_symbol { i64 ptrtoint (i32* @snd_ecards_limit to i64), i8* getelementptr inbounds ([17 x i8], [17 x i8]* @__kstrtab_snd_ecards_limit, i32 0, i32 0) }, section "___ksymtab+snd_ecards_limit", align 8
@.str = private unnamed_addr constant [12 x i8] c"snd-card-%i\00", align 1
@__kstrtab_snd_request_card = internal constant [17 x i8] c"snd_request_card\00", section "__ksymtab_strings", align 1
@__ksymtab_snd_request_card = internal constant %struct.kernel_symbol { i64 ptrtoint (void (i32)* @snd_request_card to i64), i8* getelementptr inbounds ([17 x i8], [17 x i8]* @__kstrtab_snd_request_card, i32 0, i32 0) }, section "___ksymtab+snd_request_card", align 8
@sound_mutex = internal global %struct.mutex { %struct.atomic64_t zeroinitializer, %struct.spinlock zeroinitializer, %struct.optimistic_spin_queue zeroinitializer, %struct.list_head { %struct.list_head* bitcast (i8* getelementptr (i8, i8* bitcast (%struct.mutex* @sound_mutex to i8*), i64 16) to %struct.list_head*), %struct.list_head* bitcast (i8* getelementptr (i8, i8* bitcast (%struct.mutex* @sound_mutex to i8*), i64 16) to %struct.list_head*) } }, align 8
@snd_minors = internal global [256 x %struct.snd_minor*] zeroinitializer, align 16
@__kstrtab_snd_lookup_minor_data = internal constant [22 x i8] c"snd_lookup_minor_data\00", section "__ksymtab_strings", align 1
@__ksymtab_snd_lookup_minor_data = internal constant %struct.kernel_symbol { i64 ptrtoint (i8* (i32, i32)* @snd_lookup_minor_data to i64), i8* getelementptr inbounds ([22 x i8], [22 x i8]* @__kstrtab_snd_lookup_minor_data, i32 0, i32 0) }, section "___ksymtab+snd_lookup_minor_data", align 8
@__kstrtab_snd_register_device = internal constant [20 x i8] c"snd_register_device\00", section "__ksymtab_strings", align 1
@__ksymtab_snd_register_device = internal constant %struct.kernel_symbol { i64 ptrtoint (i32 (i32, %struct.snd_card*, i32, %struct.file_operations*, i8*, %struct.device*)* @snd_register_device to i64), i8* getelementptr inbounds ([20 x i8], [20 x i8]* @__kstrtab_snd_register_device, i32 0, i32 0) }, section "___ksymtab+snd_register_device", align 8
@__kstrtab_snd_unregister_device = internal constant [22 x i8] c"snd_unregister_device\00", section "__ksymtab_strings", align 1
@__ksymtab_snd_unregister_device = internal constant %struct.kernel_symbol { i64 ptrtoint (i32 (%struct.device*)* @snd_unregister_device to i64), i8* getelementptr inbounds ([22 x i8], [22 x i8]* @__kstrtab_snd_unregister_device, i32 0, i32 0) }, section "___ksymtab+snd_unregister_device", align 8
@.str.1 = private unnamed_addr constant [8 x i8] c"devices\00", align 1
@.str.2 = private unnamed_addr constant [5 x i8] c"alsa\00", align 1
@__initcall_alsa_sound_init4 = internal global i32 ()* @alsa_sound_init, section ".initcall4.init", align 8
@__exitcall_alsa_sound_exit = internal global void ()* @alsa_sound_exit, section ".exitcall.exit", align 8
@.str.3 = private unnamed_addr constant [20 x i8] c"%3i: [%2i-%2i]: %s\0A\00", align 1
@.str.4 = private unnamed_addr constant [19 x i8] c"%3i: [%2i]   : %s\0A\00", align 1
@.str.5 = private unnamed_addr constant [18 x i8] c"%3i:        : %s\0A\00", align 1
@.str.6 = private unnamed_addr constant [8 x i8] c"control\00", align 1
@.str.7 = private unnamed_addr constant [19 x i8] c"hardware dependent\00", align 1
@.str.8 = private unnamed_addr constant [9 x i8] c"raw midi\00", align 1
@.str.9 = private unnamed_addr constant [23 x i8] c"digital audio playback\00", align 1
@.str.10 = private unnamed_addr constant [22 x i8] c"digital audio capture\00", align 1
@.str.11 = private unnamed_addr constant [10 x i8] c"sequencer\00", align 1
@.str.12 = private unnamed_addr constant [6 x i8] c"timer\00", align 1
@.str.13 = private unnamed_addr constant [2 x i8] c"?\00", align 1
@snd_fops = internal constant %struct.file_operations { %struct.module* null, i64 (%struct.file*, i64, i32)* @noop_llseek, i64 (%struct.file*, i8*, i64, i64*)* null, i64 (%struct.file*, i8*, i64, i64*)* null, i64 (%struct.kiocb*, %struct.iov_iter*)* null, i64 (%struct.kiocb*, %struct.iov_iter*)* null, i32 (%struct.file*, %struct.dir_context*)* null, i32 (%struct.file*, %struct.dir_context*)* null, i32 (%struct.file*, %struct.poll_table_struct*)* null, i64 (%struct.file*, i32, i64)* null, i64 (%struct.file*, i32, i64)* null, i32 (%struct.file*, %struct.vm_area_struct*)* null, i32 (%struct.inode*, %struct.file*)* @snd_open, i32 (%struct.file*, i8*)* null, i32 (%struct.inode*, %struct.file*)* null, i32 (%struct.file*, i64, i64, i32)* null, i32 (i32, %struct.file*, i32)* null, i32 (%struct.file*, i32, %struct.file_lock*)* null, i64 (%struct.file*, %struct.page*, i32, i64, i64*, i32)* null, i64 (%struct.file*, i64, i64, i64, i64)* null, i32 (i32)* null, i32 (%struct.file*, i32, %struct.file_lock*)* null, i64 (%struct.pipe_inode_info*, %struct.file*, i64*, i64, i32)* null, i64 (%struct.file*, i64*, %struct.pipe_inode_info*, i64, i32)* null, i32 (%struct.file*, i64, %struct.file_lock**, i8**)* null, i64 (%struct.file*, i32, i64, i64)* null, void (%struct.seq_file*, %struct.file*)* null, i64 (%struct.file*, i64, %struct.file*, i64, i64, i32)* null, i32 (%struct.file*, i64, %struct.file*, i64, i64)* null, i64 (%struct.file*, i64, i64, %struct.file*, i64)* null }, align 8
@.str.14 = private unnamed_addr constant [63 x i8] c"\013ALSA core: unable to register native major device number %d\0A\00", align 1
@.str.15 = private unnamed_addr constant [57 x i8] c"\016Advanced Linux Sound Architecture Driver Initialized.\0A\00", align 1
@.str.16 = private unnamed_addr constant [19 x i8] c"sound/core/sound.c\00", align 1
@snd_cards = external global [8 x %struct.snd_card*], align 16
@.str.17 = private unnamed_addr constant [8 x i8] c"snd-seq\00", align 1
@.str.18 = private unnamed_addr constant [10 x i8] c"snd-timer\00", align 1
@llvm.used = appending global [11 x i8*] [i8* bitcast (%struct.kernel_symbol* @__ksymtab_snd_major to i8*), i8* bitcast (%struct.kernel_param* @__param_major to i8*), i8* bitcast (%struct.kernel_param* @__param_cards_limit to i8*), i8* bitcast (%struct.kernel_symbol* @__ksymtab_snd_ecards_limit to i8*), i8* bitcast (%struct.kernel_symbol* @__ksymtab_snd_request_card to i8*), i8* bitcast (%struct.kernel_symbol* @__ksymtab_snd_lookup_minor_data to i8*), i8* bitcast (%struct.kernel_symbol* @__ksymtab_snd_register_device to i8*), i8* bitcast (%struct.kernel_symbol* @__ksymtab_snd_unregister_device to i8*), i8* bitcast (void ()* @alsa_sound_exit to i8*), i8* bitcast (i32 ()** @__initcall_alsa_sound_init4 to i8*), i8* bitcast (void ()** @__exitcall_alsa_sound_exit to i8*)], section "llvm.metadata"

; Function Attrs: nounwind uwtable
define void @snd_request_card(i32 %card) #0 {
entry:
  %call = call i32 @snd_card_locked(i32 %card)
  %tobool = icmp ne i32 %call, 0
  br i1 %tobool, label %return, label %if.end

if.end:                                           ; preds = %entry
  %cmp = icmp slt i32 %card, 0
  %0 = load i32, i32* @cards_limit, align 4
  %cmp1 = icmp sge i32 %card, %0
  %or.cond = or i1 %cmp, %cmp1
  br i1 %or.cond, label %return, label %if.end3

if.end3:                                          ; preds = %if.end
  %call4 = call i32 (i1, i8*, ...) @__request_module(i1 zeroext true, i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str, i32 0, i32 0), i32 %card)
  br label %return

return:                                           ; preds = %if.end, %entry, %if.end3
  ret void
}

declare i32 @snd_card_locked(i32) #1

declare i32 @__request_module(i1 zeroext, i8*, ...) #1

; Function Attrs: nounwind uwtable
define i8* @snd_lookup_minor_data(i32 %minor, i32 %type) #0 {
entry:
  %conv = zext i32 %minor to i64
  %cmp = icmp uge i64 %conv, 256
  br i1 %cmp, label %cleanup, label %if.end

if.end:                                           ; preds = %entry
  call void @mutex_lock(%struct.mutex* @sound_mutex)
  %idxprom = zext i32 %minor to i64
  %arrayidx = getelementptr inbounds [256 x %struct.snd_minor*], [256 x %struct.snd_minor*]* @snd_minors, i64 0, i64 %idxprom
  %0 = load %struct.snd_minor*, %struct.snd_minor** %arrayidx, align 8, !tbaa !2
  %tobool = icmp ne %struct.snd_minor* %0, null
  br i1 %tobool, label %land.lhs.true, label %if.end13

land.lhs.true:                                    ; preds = %if.end
  %type2 = getelementptr inbounds %struct.snd_minor, %struct.snd_minor* %0, i32 0, i32 0
  %1 = load i32, i32* %type2, align 8, !tbaa !6
  %cmp3 = icmp eq i32 %1, %type
  br i1 %cmp3, label %if.then5, label %if.end13

if.then5:                                         ; preds = %land.lhs.true
  %private_data6 = getelementptr inbounds %struct.snd_minor, %struct.snd_minor* %0, i32 0, i32 4
  %2 = load i8*, i8** %private_data6, align 8, !tbaa !9
  %tobool7 = icmp ne i8* %2, null
  br i1 %tobool7, label %land.lhs.true8, label %if.end13

land.lhs.true8:                                   ; preds = %if.then5
  %card_ptr = getelementptr inbounds %struct.snd_minor, %struct.snd_minor* %0, i32 0, i32 6
  %3 = load %struct.snd_card*, %struct.snd_card** %card_ptr, align 8, !tbaa !10
  %tobool9 = icmp ne %struct.snd_card* %3, null
  br i1 %tobool9, label %if.then10, label %if.end13

if.then10:                                        ; preds = %land.lhs.true8
  %card_ptr11 = getelementptr inbounds %struct.snd_minor, %struct.snd_minor* %0, i32 0, i32 6
  %4 = load %struct.snd_card*, %struct.snd_card** %card_ptr11, align 8, !tbaa !10
  %card_dev = getelementptr inbounds %struct.snd_card, %struct.snd_card* %4, i32 0, i32 30
  %call = call %struct.device* @get_device(%struct.device* %card_dev)
  br label %if.end13

if.end13:                                         ; preds = %if.end, %land.lhs.true, %if.then5, %land.lhs.true8, %if.then10
  %private_data.0 = phi i8* [ %2, %if.then10 ], [ %2, %land.lhs.true8 ], [ %2, %if.then5 ], [ null, %land.lhs.true ], [ null, %if.end ]
  call void @mutex_unlock(%struct.mutex* @sound_mutex)
  br label %cleanup

cleanup:                                          ; preds = %entry, %if.end13
  %retval.0 = phi i8* [ %private_data.0, %if.end13 ], [ null, %entry ]
  ret i8* %retval.0
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64, i8* nocapture) #2

declare void @mutex_lock(%struct.mutex*) #1

declare %struct.device* @get_device(%struct.device*) #1

declare void @mutex_unlock(%struct.mutex*) #1

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64, i8* nocapture) #2

; Function Attrs: nounwind uwtable
define i32 @snd_register_device(i32 %type, %struct.snd_card* %card, i32 %dev, %struct.file_operations* %f_ops, i8* %private_data, %struct.device* %device) #0 {
entry:
  %tobool = icmp ne %struct.device* %device, null
  %lnot = xor i1 %tobool, true
  %lnot1 = xor i1 %lnot, true
  %lnot2 = xor i1 %lnot1, true
  %lnot.ext = zext i1 %lnot2 to i32
  %tobool3 = icmp ne i32 %lnot.ext, 0
  %lnot4 = xor i1 %tobool3, true
  %lnot6 = xor i1 %lnot4, true
  %lnot.ext7 = zext i1 %lnot6 to i32
  %conv = sext i32 %lnot.ext7 to i64
  %expval = call i64 @llvm.expect.i64(i64 %conv, i64 0)
  %tobool8 = icmp ne i64 %expval, 0
  br i1 %tobool8, label %cleanup, label %if.end

if.end:                                           ; preds = %entry
  %call = call i8* @kmalloc(i64 48, i32 20971712)
  %0 = bitcast i8* %call to %struct.snd_minor*
  %cmp = icmp eq %struct.snd_minor* %0, null
  br i1 %cmp, label %cleanup, label %if.end11

if.end11:                                         ; preds = %if.end
  %type12 = getelementptr inbounds %struct.snd_minor, %struct.snd_minor* %0, i32 0, i32 0
  store i32 %type, i32* %type12, align 8, !tbaa !6
  %tobool13 = icmp ne %struct.snd_card* %card, null
  br i1 %tobool13, label %cond.true, label %cond.end

cond.true:                                        ; preds = %if.end11
  %number = getelementptr inbounds %struct.snd_card, %struct.snd_card* %card, i32 0, i32 0
  %1 = load i32, i32* %number, align 8, !tbaa !11
  br label %cond.end

cond.end:                                         ; preds = %if.end11, %cond.true
  %cond = phi i32 [ %1, %cond.true ], [ -1, %if.end11 ]
  %card14 = getelementptr inbounds %struct.snd_minor, %struct.snd_minor* %0, i32 0, i32 1
  store i32 %cond, i32* %card14, align 4, !tbaa !41
  %device15 = getelementptr inbounds %struct.snd_minor, %struct.snd_minor* %0, i32 0, i32 2
  store i32 %dev, i32* %device15, align 8, !tbaa !42
  %f_ops16 = getelementptr inbounds %struct.snd_minor, %struct.snd_minor* %0, i32 0, i32 3
  store %struct.file_operations* %f_ops, %struct.file_operations** %f_ops16, align 8, !tbaa !43
  %private_data17 = getelementptr inbounds %struct.snd_minor, %struct.snd_minor* %0, i32 0, i32 4
  store i8* %private_data, i8** %private_data17, align 8, !tbaa !9
  %card_ptr = getelementptr inbounds %struct.snd_minor, %struct.snd_minor* %0, i32 0, i32 6
  store %struct.snd_card* %card, %struct.snd_card** %card_ptr, align 8, !tbaa !10
  call void @mutex_lock(%struct.mutex* @sound_mutex)
  %call18 = call i32 @snd_find_free_minor(i32 %type, %struct.snd_card* %card, i32 %dev)
  %cmp19 = icmp slt i32 %call18, 0
  br i1 %cmp19, label %error, label %if.end22

if.end22:                                         ; preds = %cond.end
  %dev23 = getelementptr inbounds %struct.snd_minor, %struct.snd_minor* %0, i32 0, i32 5
  store %struct.device* %device, %struct.device** %dev23, align 8, !tbaa !44
  %2 = load i32, i32* @major, align 4, !tbaa !45
  %shl = shl i32 %2, 20
  %or = or i32 %shl, %call18
  %devt = getelementptr inbounds %struct.device, %struct.device* %device, i32 0, i32 26
  store i32 %or, i32* %devt, align 8, !tbaa !46
  %call24 = call i32 @device_add(%struct.device* %device)
  %cmp25 = icmp slt i32 %call24, 0
  br i1 %cmp25, label %error, label %if.end28

if.end28:                                         ; preds = %if.end22
  %idxprom = sext i32 %call18 to i64
  %arrayidx = getelementptr inbounds [256 x %struct.snd_minor*], [256 x %struct.snd_minor*]* @snd_minors, i64 0, i64 %idxprom
  store %struct.snd_minor* %0, %struct.snd_minor** %arrayidx, align 8, !tbaa !2
  br label %error

error:                                            ; preds = %if.end22, %cond.end, %if.end28
  %err.0 = phi i32 [ %call24, %if.end28 ], [ %call18, %cond.end ], [ %call24, %if.end22 ]
  call void @mutex_unlock(%struct.mutex* @sound_mutex)
  %cmp29 = icmp slt i32 %err.0, 0
  br i1 %cmp29, label %if.then31, label %cleanup

if.then31:                                        ; preds = %error
  %3 = bitcast %struct.snd_minor* %0 to i8*
  call void @kfree(i8* %3)
  br label %cleanup

cleanup:                                          ; preds = %error, %if.then31, %if.end, %entry
  %retval.0 = phi i32 [ -22, %entry ], [ -12, %if.end ], [ %err.0, %if.then31 ], [ %err.0, %error ]
  ret i32 %retval.0
}

; Function Attrs: nounwind readnone
declare i64 @llvm.expect.i64(i64, i64) #3

; Function Attrs: alwaysinline nounwind uwtable
define internal i8* @kmalloc(i64 %size, i32 %flags) #4 {
entry:
  %call = call noalias i8* @__kmalloc(i64 %size, i32 %flags)
  ret i8* %call
}

; Function Attrs: nounwind uwtable
define internal i32 @snd_find_free_minor(i32 %type, %struct.snd_card* %card, i32 %dev) #0 {
entry:
  br label %NodeBlock23

NodeBlock23:                                      ; preds = %entry
  %Pivot24 = icmp slt i32 %type, 8
  br i1 %Pivot24, label %NodeBlock7, label %NodeBlock21

NodeBlock21:                                      ; preds = %NodeBlock23
  %Pivot22 = icmp slt i32 %type, 24
  br i1 %Pivot22, label %NodeBlock13, label %NodeBlock19

NodeBlock19:                                      ; preds = %NodeBlock21
  %Pivot20 = icmp slt i32 %type, 33
  br i1 %Pivot20, label %LeafBlock15, label %LeafBlock17

LeafBlock17:                                      ; preds = %NodeBlock19
  %SwitchLeaf18 = icmp eq i32 %type, 33
  br i1 %SwitchLeaf18, label %sw.epilog, label %NewDefault

LeafBlock15:                                      ; preds = %NodeBlock19
  %SwitchLeaf16 = icmp eq i32 %type, 24
  br i1 %SwitchLeaf16, label %sw.bb10, label %NewDefault

NodeBlock13:                                      ; preds = %NodeBlock21
  %Pivot14 = icmp slt i32 %type, 16
  br i1 %Pivot14, label %LeafBlock9, label %LeafBlock11

LeafBlock11:                                      ; preds = %NodeBlock13
  %SwitchLeaf12 = icmp eq i32 %type, 16
  br i1 %SwitchLeaf12, label %sw.bb10, label %NewDefault

LeafBlock9:                                       ; preds = %NodeBlock13
  %SwitchLeaf10 = icmp eq i32 %type, 8
  br i1 %SwitchLeaf10, label %sw.bb10, label %NewDefault

NodeBlock7:                                       ; preds = %NodeBlock23
  %Pivot8 = icmp slt i32 %type, 2
  br i1 %Pivot8, label %NodeBlock, label %NodeBlock5

NodeBlock5:                                       ; preds = %NodeBlock7
  %Pivot6 = icmp slt i32 %type, 4
  br i1 %Pivot6, label %LeafBlock1, label %LeafBlock3

LeafBlock3:                                       ; preds = %NodeBlock5
  %SwitchLeaf4 = icmp eq i32 %type, 4
  br i1 %SwitchLeaf4, label %sw.bb10, label %NewDefault

LeafBlock1:                                       ; preds = %NodeBlock5
  %SwitchLeaf2 = icmp eq i32 %type, 2
  br i1 %SwitchLeaf2, label %sw.bb10, label %NewDefault

NodeBlock:                                        ; preds = %NodeBlock7
  %Pivot = icmp slt i32 %type, 1
  br i1 %Pivot, label %LeafBlock, label %sw.epilog

LeafBlock:                                        ; preds = %NodeBlock
  %SwitchLeaf = icmp eq i32 %type, 0
  br i1 %SwitchLeaf, label %sw.bb1, label %NewDefault

sw.bb1:                                           ; preds = %LeafBlock
  %tobool = icmp ne %struct.snd_card* %card, null
  %lnot = xor i1 %tobool, true
  %lnot2 = xor i1 %lnot, true
  %lnot3 = xor i1 %lnot2, true
  %lnot.ext = zext i1 %lnot3 to i32
  %tobool4 = icmp ne i32 %lnot.ext, 0
  %lnot5 = xor i1 %tobool4, true
  %lnot7 = xor i1 %lnot5, true
  %lnot.ext8 = zext i1 %lnot7 to i32
  %conv = sext i32 %lnot.ext8 to i64
  %expval = call i64 @llvm.expect.i64(i64 %conv, i64 0)
  %tobool9 = icmp ne i64 %expval, 0
  br i1 %tobool9, label %cleanup, label %if.end

if.end:                                           ; preds = %sw.bb1
  %number = getelementptr inbounds %struct.snd_card, %struct.snd_card* %card, i32 0, i32 0
  %0 = load i32, i32* %number, align 8, !tbaa !11
  %shl = shl i32 %0, 5
  %or = or i32 %shl, %type
  br label %sw.epilog

sw.bb10:                                          ; preds = %LeafBlock15, %LeafBlock11, %LeafBlock9, %LeafBlock3, %LeafBlock1
  %tobool12 = icmp ne %struct.snd_card* %card, null
  %lnot13 = xor i1 %tobool12, true
  %lnot15 = xor i1 %lnot13, true
  %lnot17 = xor i1 %lnot15, true
  %lnot.ext18 = zext i1 %lnot17 to i32
  %tobool20 = icmp ne i32 %lnot.ext18, 0
  %lnot21 = xor i1 %tobool20, true
  %lnot23 = xor i1 %lnot21, true
  %lnot.ext24 = zext i1 %lnot23 to i32
  %conv25 = sext i32 %lnot.ext24 to i64
  %expval26 = call i64 @llvm.expect.i64(i64 %conv25, i64 0)
  %tobool27 = icmp ne i64 %expval26, 0
  br i1 %tobool27, label %cleanup, label %if.end29

if.end29:                                         ; preds = %sw.bb10
  %number30 = getelementptr inbounds %struct.snd_card, %struct.snd_card* %card, i32 0, i32 0
  %1 = load i32, i32* %number30, align 8, !tbaa !11
  %shl31 = shl i32 %1, 5
  %add = add nsw i32 %type, %dev
  %or32 = or i32 %shl31, %add
  br label %sw.epilog

sw.epilog:                                        ; preds = %LeafBlock17, %NodeBlock, %if.end29, %if.end
  %minor.0 = phi i32 [ %or32, %if.end29 ], [ %or, %if.end ], [ %type, %NodeBlock ], [ %type, %LeafBlock17 ]
  %cmp = icmp slt i32 %minor.0, 0
  %cmp35 = icmp sge i32 %minor.0, 256
  %.cmp35 = select i1 %cmp, i1 true, i1 %cmp35
  %lnot37 = xor i1 %.cmp35, true
  %lnot39 = xor i1 %lnot37, true
  %lnot.ext40 = zext i1 %lnot39 to i32
  %tobool42 = icmp ne i32 %lnot.ext40, 0
  %lnot43 = xor i1 %tobool42, true
  %lnot45 = xor i1 %lnot43, true
  %lnot.ext46 = zext i1 %lnot45 to i32
  %conv47 = sext i32 %lnot.ext46 to i64
  %expval48 = call i64 @llvm.expect.i64(i64 %conv47, i64 0)
  %tobool49 = icmp ne i64 %expval48, 0
  br i1 %tobool49, label %cleanup, label %if.end51

if.end51:                                         ; preds = %sw.epilog
  %idxprom = sext i32 %minor.0 to i64
  %arrayidx = getelementptr inbounds [256 x %struct.snd_minor*], [256 x %struct.snd_minor*]* @snd_minors, i64 0, i64 %idxprom
  %2 = load %struct.snd_minor*, %struct.snd_minor** %arrayidx, align 8, !tbaa !2
  %tobool52 = icmp ne %struct.snd_minor* %2, null
  %.minor.0 = select i1 %tobool52, i32 -16, i32 %minor.0
  br label %cleanup

NewDefault:                                       ; preds = %LeafBlock17, %LeafBlock15, %LeafBlock11, %LeafBlock9, %LeafBlock3, %LeafBlock1, %LeafBlock
  br label %cleanup

cleanup:                                          ; preds = %NewDefault, %if.end51, %sw.epilog, %sw.bb10, %sw.bb1
  %retval.0 = phi i32 [ -22, %sw.bb1 ], [ -22, %sw.bb10 ], [ -22, %NewDefault ], [ -22, %sw.epilog ], [ %.minor.0, %if.end51 ]
  ret i32 %retval.0
}

declare i32 @device_add(%struct.device*) #1

declare void @kfree(i8*) #1

; Function Attrs: nounwind uwtable
define i32 @snd_unregister_device(%struct.device* %dev) #0 {
entry:
  call void @mutex_lock(%struct.mutex* @sound_mutex)
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %minor.0 = phi i32 [ 0, %entry ], [ %inc, %for.inc ]
  %conv = sext i32 %minor.0 to i64
  %cmp = icmp ult i64 %conv, 256
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %idxprom = sext i32 %minor.0 to i64
  %arrayidx = getelementptr inbounds [256 x %struct.snd_minor*], [256 x %struct.snd_minor*]* @snd_minors, i64 0, i64 %idxprom
  %0 = load %struct.snd_minor*, %struct.snd_minor** %arrayidx, align 8, !tbaa !2
  %tobool = icmp ne %struct.snd_minor* %0, null
  br i1 %tobool, label %land.lhs.true, label %for.inc

land.lhs.true:                                    ; preds = %for.body
  %dev2 = getelementptr inbounds %struct.snd_minor, %struct.snd_minor* %0, i32 0, i32 5
  %1 = load %struct.device*, %struct.device** %dev2, align 8, !tbaa !44
  %cmp3 = icmp eq %struct.device* %1, %dev
  br i1 %cmp3, label %if.then, label %for.inc

if.then:                                          ; preds = %land.lhs.true
  %idxprom5 = sext i32 %minor.0 to i64
  %arrayidx6 = getelementptr inbounds [256 x %struct.snd_minor*], [256 x %struct.snd_minor*]* @snd_minors, i64 0, i64 %idxprom5
  store %struct.snd_minor* null, %struct.snd_minor** %arrayidx6, align 8, !tbaa !2
  call void @device_del(%struct.device* %dev)
  %2 = bitcast %struct.snd_minor* %0 to i8*
  call void @kfree(i8* %2)
  br label %for.end

for.inc:                                          ; preds = %for.body, %land.lhs.true
  %inc = add nsw i32 %minor.0, 1
  br label %for.cond

for.end:                                          ; preds = %for.cond, %if.then
  call void @mutex_unlock(%struct.mutex* @sound_mutex)
  %conv7 = sext i32 %minor.0 to i64
  %cmp8 = icmp uge i64 %conv7, 256
  %. = select i1 %cmp8, i32 -2, i32 0
  ret i32 %.
}

declare void @device_del(%struct.device*) #1

; Function Attrs: nounwind uwtable
define i32 @snd_minor_info_init() #0 section ".init.text" {
entry:
  %call = call %struct.snd_info_entry* @snd_info_create_module_entry(%struct.module* null, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.1, i32 0, i32 0), %struct.snd_info_entry* null)
  %tobool = icmp ne %struct.snd_info_entry* %call, null
  br i1 %tobool, label %if.end, label %cleanup

if.end:                                           ; preds = %entry
  %c = getelementptr inbounds %struct.snd_info_entry, %struct.snd_info_entry* %call, i32 0, i32 4
  %text = bitcast %union.anon.53* %c to %struct.snd_info_entry_text*
  %read = getelementptr inbounds %struct.snd_info_entry_text, %struct.snd_info_entry_text* %text, i32 0, i32 0
  store void (%struct.snd_info_entry*, %struct.snd_info_buffer*)* @snd_minor_info_read, void (%struct.snd_info_entry*, %struct.snd_info_buffer*)** %read, align 8, !tbaa !47
  %call2 = call i32 @snd_info_register(%struct.snd_info_entry* %call)
  br label %cleanup

cleanup:                                          ; preds = %entry, %if.end
  %retval.0 = phi i32 [ %call2, %if.end ], [ -12, %entry ]
  ret i32 %retval.0
}

declare %struct.snd_info_entry* @snd_info_create_module_entry(%struct.module*, i8*, %struct.snd_info_entry*) #1

; Function Attrs: nounwind uwtable
define internal void @snd_minor_info_read(%struct.snd_info_entry* %entry1, %struct.snd_info_buffer* %buffer) #0 {
entry:
  call void @mutex_lock(%struct.mutex* @sound_mutex)
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %minor.0 = phi i32 [ 0, %entry ], [ %inc, %for.inc ]
  %cmp = icmp slt i32 %minor.0, 256
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %idxprom = sext i32 %minor.0 to i64
  %arrayidx = getelementptr inbounds [256 x %struct.snd_minor*], [256 x %struct.snd_minor*]* @snd_minors, i64 0, i64 %idxprom
  %0 = load %struct.snd_minor*, %struct.snd_minor** %arrayidx, align 8, !tbaa !2
  %tobool = icmp ne %struct.snd_minor* %0, null
  br i1 %tobool, label %if.end, label %for.inc

if.end:                                           ; preds = %for.body
  %card = getelementptr inbounds %struct.snd_minor, %struct.snd_minor* %0, i32 0, i32 1
  %1 = load i32, i32* %card, align 4, !tbaa !41
  %cmp2 = icmp sge i32 %1, 0
  br i1 %cmp2, label %if.then3, label %if.else14

if.then3:                                         ; preds = %if.end
  %device = getelementptr inbounds %struct.snd_minor, %struct.snd_minor* %0, i32 0, i32 2
  %2 = load i32, i32* %device, align 8, !tbaa !42
  %cmp4 = icmp sge i32 %2, 0
  %buffer6 = getelementptr inbounds %struct.snd_info_buffer, %struct.snd_info_buffer* %buffer, i32 0, i32 0
  %3 = load i8*, i8** %buffer6, align 8, !tbaa !48
  %4 = bitcast i8* %3 to %struct.seq_file*
  %card7 = getelementptr inbounds %struct.snd_minor, %struct.snd_minor* %0, i32 0, i32 1
  %5 = load i32, i32* %card7, align 4, !tbaa !41
  br i1 %cmp4, label %if.then5, label %if.else

if.then5:                                         ; preds = %if.then3
  %device8 = getelementptr inbounds %struct.snd_minor, %struct.snd_minor* %0, i32 0, i32 2
  %6 = load i32, i32* %device8, align 8, !tbaa !42
  %type = getelementptr inbounds %struct.snd_minor, %struct.snd_minor* %0, i32 0, i32 0
  %7 = load i32, i32* %type, align 8, !tbaa !6
  %call = call i8* @snd_device_type_name(i32 %7)
  call void (%struct.seq_file*, i8*, ...) @seq_printf(%struct.seq_file* %4, i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.3, i32 0, i32 0), i32 %minor.0, i32 %5, i32 %6, i8* %call)
  br label %for.inc

if.else:                                          ; preds = %if.then3
  %type11 = getelementptr inbounds %struct.snd_minor, %struct.snd_minor* %0, i32 0, i32 0
  %8 = load i32, i32* %type11, align 8, !tbaa !6
  %call12 = call i8* @snd_device_type_name(i32 %8)
  call void (%struct.seq_file*, i8*, ...) @seq_printf(%struct.seq_file* %4, i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.4, i32 0, i32 0), i32 %minor.0, i32 %5, i8* %call12)
  br label %for.inc

if.else14:                                        ; preds = %if.end
  %buffer15 = getelementptr inbounds %struct.snd_info_buffer, %struct.snd_info_buffer* %buffer, i32 0, i32 0
  %9 = load i8*, i8** %buffer15, align 8, !tbaa !48
  %10 = bitcast i8* %9 to %struct.seq_file*
  %type16 = getelementptr inbounds %struct.snd_minor, %struct.snd_minor* %0, i32 0, i32 0
  %11 = load i32, i32* %type16, align 8, !tbaa !6
  %call17 = call i8* @snd_device_type_name(i32 %11)
  call void (%struct.seq_file*, i8*, ...) @seq_printf(%struct.seq_file* %10, i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.5, i32 0, i32 0), i32 %minor.0, i8* %call17)
  br label %for.inc

for.inc:                                          ; preds = %if.else14, %if.else, %if.then5, %for.body
  %inc = add nsw i32 %minor.0, 1
  br label %for.cond

for.end:                                          ; preds = %for.cond
  call void @mutex_unlock(%struct.mutex* @sound_mutex)
  ret void
}

declare i32 @snd_info_register(%struct.snd_info_entry*) #1

; Function Attrs: nounwind uwtable
define internal void @alsa_sound_exit() #0 section ".exit.text" {
entry:
  %call = call i32 @snd_info_done()
  %0 = load i32, i32* @major, align 4, !tbaa !45
  call void @unregister_chrdev(i32 %0, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.2, i32 0, i32 0))
  ret void
}

declare i32 @snd_info_done() #1

; Function Attrs: inlinehint nounwind uwtable
define internal void @unregister_chrdev(i32 %major, i8* %name) #5 {
entry:
  call void @__unregister_chrdev(i32 %major, i32 0, i32 256, i8* %name)
  ret void
}

; Function Attrs: nounwind uwtable
define internal i32 @alsa_sound_init() #0 section ".init.text" {
entry:
  %0 = load i32, i32* @major, align 4, !tbaa !45
  store i32 %0, i32* @snd_major, align 4, !tbaa !45
  %1 = load i32, i32* @cards_limit, align 4, !tbaa !45
  store i32 %1, i32* @snd_ecards_limit, align 4, !tbaa !45
  %2 = load i32, i32* @major, align 4, !tbaa !45
  %call = call i32 @register_chrdev(i32 %2, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.2, i32 0, i32 0), %struct.file_operations* @snd_fops)
  %tobool = icmp ne i32 %call, 0
  br i1 %tobool, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %3 = load i32, i32* @major, align 4, !tbaa !45
  %call1 = call i32 (i8*, ...) @printk(i8* getelementptr inbounds ([63 x i8], [63 x i8]* @.str.14, i32 0, i32 0), i32 %3)
  br label %return

if.end:                                           ; preds = %entry
  %call2 = call i32 @snd_info_init()
  %cmp = icmp slt i32 %call2, 0
  br i1 %cmp, label %if.then3, label %if.end4

if.then3:                                         ; preds = %if.end
  %4 = load i32, i32* @major, align 4, !tbaa !45
  call void @unregister_chrdev(i32 %4, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.2, i32 0, i32 0))
  br label %return

if.end4:                                          ; preds = %if.end
  %call5 = call i32 (i8*, ...) @printk(i8* getelementptr inbounds ([57 x i8], [57 x i8]* @.str.15, i32 0, i32 0))
  br label %return

return:                                           ; preds = %if.end4, %if.then3, %if.then
  %retval.0 = phi i32 [ -5, %if.then ], [ -12, %if.then3 ], [ 0, %if.end4 ]
  ret i32 %retval.0
}

declare noalias i8* @__kmalloc(i64, i32) #1

declare void @seq_printf(%struct.seq_file*, i8*, ...) #1

; Function Attrs: nounwind uwtable
define internal i8* @snd_device_type_name(i32 %type) #0 {
entry:
  br label %NodeBlock21

NodeBlock21:                                      ; preds = %entry
  %Pivot22 = icmp slt i32 %type, 8
  br i1 %Pivot22, label %NodeBlock5, label %NodeBlock19

NodeBlock19:                                      ; preds = %NodeBlock21
  %Pivot20 = icmp slt i32 %type, 24
  br i1 %Pivot20, label %NodeBlock11, label %NodeBlock17

NodeBlock17:                                      ; preds = %NodeBlock19
  %Pivot18 = icmp slt i32 %type, 33
  br i1 %Pivot18, label %LeafBlock13, label %LeafBlock15

LeafBlock15:                                      ; preds = %NodeBlock17
  %SwitchLeaf16 = icmp eq i32 %type, 33
  br i1 %SwitchLeaf16, label %sw.bb6, label %NewDefault

LeafBlock13:                                      ; preds = %NodeBlock17
  %SwitchLeaf14 = icmp eq i32 %type, 24
  br i1 %SwitchLeaf14, label %sw.bb4, label %NewDefault

NodeBlock11:                                      ; preds = %NodeBlock19
  %Pivot12 = icmp slt i32 %type, 16
  br i1 %Pivot12, label %LeafBlock7, label %LeafBlock9

LeafBlock9:                                       ; preds = %NodeBlock11
  %SwitchLeaf10 = icmp eq i32 %type, 16
  br i1 %SwitchLeaf10, label %sw.bb3, label %NewDefault

LeafBlock7:                                       ; preds = %NodeBlock11
  %SwitchLeaf8 = icmp eq i32 %type, 8
  br i1 %SwitchLeaf8, label %sw.bb2, label %NewDefault

NodeBlock5:                                       ; preds = %NodeBlock21
  %Pivot6 = icmp slt i32 %type, 1
  br i1 %Pivot6, label %LeafBlock, label %NodeBlock

NodeBlock:                                        ; preds = %NodeBlock5
  %Pivot = icmp slt i32 %type, 4
  br i1 %Pivot, label %LeafBlock1, label %LeafBlock3

LeafBlock3:                                       ; preds = %NodeBlock
  %SwitchLeaf4 = icmp eq i32 %type, 4
  br i1 %SwitchLeaf4, label %sw.bb1, label %NewDefault

LeafBlock1:                                       ; preds = %NodeBlock
  %SwitchLeaf2 = icmp eq i32 %type, 1
  br i1 %SwitchLeaf2, label %sw.bb5, label %NewDefault

LeafBlock:                                        ; preds = %NodeBlock5
  %SwitchLeaf = icmp eq i32 %type, 0
  br i1 %SwitchLeaf, label %return, label %NewDefault

sw.bb1:                                           ; preds = %LeafBlock3
  br label %return

sw.bb2:                                           ; preds = %LeafBlock7
  br label %return

sw.bb3:                                           ; preds = %LeafBlock9
  br label %return

sw.bb4:                                           ; preds = %LeafBlock13
  br label %return

sw.bb5:                                           ; preds = %LeafBlock1
  br label %return

sw.bb6:                                           ; preds = %LeafBlock15
  br label %return

NewDefault:                                       ; preds = %LeafBlock15, %LeafBlock13, %LeafBlock9, %LeafBlock7, %LeafBlock3, %LeafBlock1, %LeafBlock
  br label %sw.default

sw.default:                                       ; preds = %NewDefault
  br label %return

return:                                           ; preds = %LeafBlock, %sw.default, %sw.bb6, %sw.bb5, %sw.bb4, %sw.bb3, %sw.bb2, %sw.bb1
  %retval.0 = phi i8* [ getelementptr inbounds ([2 x i8], [2 x i8]* @.str.13, i32 0, i32 0), %sw.default ], [ getelementptr inbounds ([6 x i8], [6 x i8]* @.str.12, i32 0, i32 0), %sw.bb6 ], [ getelementptr inbounds ([10 x i8], [10 x i8]* @.str.11, i32 0, i32 0), %sw.bb5 ], [ getelementptr inbounds ([22 x i8], [22 x i8]* @.str.10, i32 0, i32 0), %sw.bb4 ], [ getelementptr inbounds ([23 x i8], [23 x i8]* @.str.9, i32 0, i32 0), %sw.bb3 ], [ getelementptr inbounds ([9 x i8], [9 x i8]* @.str.8, i32 0, i32 0), %sw.bb2 ], [ getelementptr inbounds ([19 x i8], [19 x i8]* @.str.7, i32 0, i32 0), %sw.bb1 ], [ getelementptr inbounds ([8 x i8], [8 x i8]* @.str.6, i32 0, i32 0), %LeafBlock ]
  ret i8* %retval.0
}

declare void @__unregister_chrdev(i32, i32, i32, i8*) #1

; Function Attrs: inlinehint nounwind uwtable
define internal i32 @register_chrdev(i32 %major, i8* %name, %struct.file_operations* %fops) #5 {
entry:
  %call = call i32 @__register_chrdev(i32 %major, i32 0, i32 256, i8* %name, %struct.file_operations* %fops)
  ret i32 %call
}

declare i32 @printk(i8*, ...) #1

declare i32 @snd_info_init() #1

declare i32 @__register_chrdev(i32, i32, i32, i8*, %struct.file_operations*) #1

declare i64 @noop_llseek(%struct.file*, i64, i32) #1

; Function Attrs: nounwind uwtable
define internal i32 @snd_open(%struct.inode* %inode, %struct.file* %file) #0 {
entry:
  %call = call i32 @iminor(%struct.inode* %inode)
  %conv = zext i32 %call to i64
  %cmp = icmp uge i64 %conv, 256
  br i1 %cmp, label %cleanup, label %if.end

if.end:                                           ; preds = %entry
  call void @mutex_lock(%struct.mutex* @sound_mutex)
  %idxprom = zext i32 %call to i64
  %arrayidx = getelementptr inbounds [256 x %struct.snd_minor*], [256 x %struct.snd_minor*]* @snd_minors, i64 0, i64 %idxprom
  %0 = load %struct.snd_minor*, %struct.snd_minor** %arrayidx, align 8, !tbaa !2
  %cmp2 = icmp eq %struct.snd_minor* %0, null
  br i1 %cmp2, label %if.then4, label %if.end8

if.then4:                                         ; preds = %if.end
  %call5 = call %struct.snd_minor* @autoload_device(i32 %call)
  %tobool = icmp ne %struct.snd_minor* %call5, null
  br i1 %tobool, label %if.end8, label %if.then6

if.then6:                                         ; preds = %if.then4
  call void @mutex_unlock(%struct.mutex* @sound_mutex)
  br label %cleanup

if.end8:                                          ; preds = %if.then4, %if.end
  %mptr.0 = phi %struct.snd_minor* [ %0, %if.end ], [ %call5, %if.then4 ]
  %f_ops = getelementptr inbounds %struct.snd_minor, %struct.snd_minor* %mptr.0, i32 0, i32 3
  %1 = load %struct.file_operations*, %struct.file_operations** %f_ops, align 8, !tbaa !43
  %tobool9 = icmp ne %struct.file_operations* %1, null
  br i1 %tobool9, label %land.lhs.true, label %cond.end

land.lhs.true:                                    ; preds = %if.end8
  %f_ops10 = getelementptr inbounds %struct.snd_minor, %struct.snd_minor* %mptr.0, i32 0, i32 3
  %2 = load %struct.file_operations*, %struct.file_operations** %f_ops10, align 8, !tbaa !43
  %owner = getelementptr inbounds %struct.file_operations, %struct.file_operations* %2, i32 0, i32 0
  %3 = load %struct.module*, %struct.module** %owner, align 8, !tbaa !50
  %call11 = call zeroext i1 @try_module_get(%struct.module* %3)
  br i1 %call11, label %cond.true, label %cond.end

cond.true:                                        ; preds = %land.lhs.true
  %f_ops13 = getelementptr inbounds %struct.snd_minor, %struct.snd_minor* %mptr.0, i32 0, i32 3
  %4 = load %struct.file_operations*, %struct.file_operations** %f_ops13, align 8, !tbaa !43
  br label %cond.end

cond.end:                                         ; preds = %if.end8, %land.lhs.true, %cond.true
  %cond = phi %struct.file_operations* [ %4, %cond.true ], [ null, %land.lhs.true ], [ null, %if.end8 ]
  call void @mutex_unlock(%struct.mutex* @sound_mutex)
  %tobool14 = icmp ne %struct.file_operations* %cond, null
  br i1 %tobool14, label %do.body17, label %cleanup

do.body17:                                        ; preds = %cond.end
  %f_op = getelementptr inbounds %struct.file, %struct.file* %file, i32 0, i32 3
  %5 = load %struct.file_operations*, %struct.file_operations** %f_op, align 8, !tbaa !52
  %tobool18 = icmp ne %struct.file_operations* %5, null
  br i1 %tobool18, label %if.then19, label %do.body23

if.then19:                                        ; preds = %do.body17
  %f_op20 = getelementptr inbounds %struct.file, %struct.file* %file, i32 0, i32 3
  %6 = load %struct.file_operations*, %struct.file_operations** %f_op20, align 8, !tbaa !52
  %owner21 = getelementptr inbounds %struct.file_operations, %struct.file_operations* %6, i32 0, i32 0
  %7 = load %struct.module*, %struct.module** %owner21, align 8, !tbaa !50
  call void @module_put(%struct.module* %7)
  br label %do.body23

do.body23:                                        ; preds = %do.body17, %if.then19
  %f_op24 = getelementptr inbounds %struct.file, %struct.file* %file, i32 0, i32 3
  store %struct.file_operations* %cond, %struct.file_operations** %f_op24, align 8, !tbaa !52
  %tobool25 = icmp ne %struct.file_operations* %cond, null
  %lnot = xor i1 %tobool25, true
  %lnot26 = xor i1 %lnot, true
  %lnot27 = xor i1 %lnot26, true
  %lnot.ext = zext i1 %lnot27 to i32
  %conv28 = sext i32 %lnot.ext to i64
  %expval = call i64 @llvm.expect.i64(i64 %conv28, i64 0)
  %tobool29 = icmp ne i64 %expval, 0
  br i1 %tobool29, label %do.body31, label %do.end41

do.body31:                                        ; preds = %do.body23
  call void asm sideeffect "1:\09ud2\0A.pushsection __bug_table,\22a\22\0A2:\09.long 1b - 2b, ${0:c} - 2b\0A\09.word ${1:c}, 0\0A\09.org 2b+${2:c}\0A.popsection", "i,i,i,~{dirflag},~{fpsr},~{flags}"(i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.16, i32 0, i32 0), i32 174, i64 12) #6, !srcloc !57
  br label %do.body32

do.body32:                                        ; preds = %do.body32, %do.body31
  br label %do.body32

do.end41:                                         ; preds = %do.body23
  %f_op42 = getelementptr inbounds %struct.file, %struct.file* %file, i32 0, i32 3
  %8 = load %struct.file_operations*, %struct.file_operations** %f_op42, align 8, !tbaa !52
  %open = getelementptr inbounds %struct.file_operations, %struct.file_operations* %8, i32 0, i32 12
  %9 = load i32 (%struct.inode*, %struct.file*)*, i32 (%struct.inode*, %struct.file*)** %open, align 8, !tbaa !58
  %tobool43 = icmp ne i32 (%struct.inode*, %struct.file*)* %9, null
  br i1 %tobool43, label %if.then44, label %cleanup

if.then44:                                        ; preds = %do.end41
  %f_op45 = getelementptr inbounds %struct.file, %struct.file* %file, i32 0, i32 3
  %10 = load %struct.file_operations*, %struct.file_operations** %f_op45, align 8, !tbaa !52
  %open46 = getelementptr inbounds %struct.file_operations, %struct.file_operations* %10, i32 0, i32 12
  %11 = load i32 (%struct.inode*, %struct.file*)*, i32 (%struct.inode*, %struct.file*)** %open46, align 8, !tbaa !58
  %call47 = call i32 %11(%struct.inode* %inode, %struct.file* %file)
  br label %cleanup

cleanup:                                          ; preds = %do.end41, %if.then44, %cond.end, %entry, %if.then6
  %retval.0 = phi i32 [ -19, %if.then6 ], [ -19, %entry ], [ -19, %cond.end ], [ %call47, %if.then44 ], [ 0, %do.end41 ]
  ret i32 %retval.0
}

; Function Attrs: inlinehint nounwind uwtable
define internal i32 @iminor(%struct.inode* %inode) #5 {
entry:
  %i_rdev = getelementptr inbounds %struct.inode, %struct.inode* %inode, i32 0, i32 13
  %0 = load i32, i32* %i_rdev, align 4, !tbaa !59
  %and = and i32 %0, 1048575
  ret i32 %and
}

; Function Attrs: nounwind uwtable
define internal %struct.snd_minor* @autoload_device(i32 %minor) #0 {
entry:
  call void @mutex_unlock(%struct.mutex* @sound_mutex)
  %and = and i32 %minor, 31
  br label %NodeBlock

NodeBlock:                                        ; preds = %entry
  %Pivot = icmp slt i32 %and, 1
  br i1 %Pivot, label %LeafBlock, label %LeafBlock1

LeafBlock1:                                       ; preds = %NodeBlock
  %SwitchLeaf2 = icmp eq i32 %and, 1
  br i1 %SwitchLeaf2, label %if.then4, label %NewDefault

LeafBlock:                                        ; preds = %NodeBlock
  %SwitchLeaf = icmp eq i32 %and, 0
  br i1 %SwitchLeaf, label %if.then, label %NewDefault

if.then:                                          ; preds = %LeafBlock
  %shr = lshr i32 %minor, 5
  %idxprom = sext i32 %shr to i64
  %arrayidx = getelementptr inbounds [8 x %struct.snd_card*], [8 x %struct.snd_card*]* @snd_cards, i64 0, i64 %idxprom
  %0 = load %struct.snd_card*, %struct.snd_card** %arrayidx, align 8, !tbaa !2
  %cmp1 = icmp eq %struct.snd_card* %0, null
  br i1 %cmp1, label %if.then2, label %if.end6

if.then2:                                         ; preds = %if.then
  call void @snd_request_card(i32 %shr)
  br label %if.end6

if.then4:                                         ; preds = %LeafBlock1
  call void @snd_request_other(i32 %minor)
  br label %if.end6

NewDefault:                                       ; preds = %LeafBlock1, %LeafBlock
  br label %if.end6

if.end6:                                          ; preds = %NewDefault, %if.then4, %if.then, %if.then2
  call void @mutex_lock(%struct.mutex* @sound_mutex)
  %idxprom7 = zext i32 %minor to i64
  %arrayidx8 = getelementptr inbounds [256 x %struct.snd_minor*], [256 x %struct.snd_minor*]* @snd_minors, i64 0, i64 %idxprom7
  %1 = load %struct.snd_minor*, %struct.snd_minor** %arrayidx8, align 8, !tbaa !2
  ret %struct.snd_minor* %1
}

declare zeroext i1 @try_module_get(%struct.module*) #1

declare void @module_put(%struct.module*) #1

; Function Attrs: nounwind uwtable
define internal void @snd_request_other(i32 %minor) #0 {
entry:
  br label %NodeBlock

NodeBlock:                                        ; preds = %entry
  %Pivot = icmp slt i32 %minor, 33
  br i1 %Pivot, label %LeafBlock, label %LeafBlock1

LeafBlock1:                                       ; preds = %NodeBlock
  %SwitchLeaf2 = icmp eq i32 %minor, 33
  br i1 %SwitchLeaf2, label %sw.bb1, label %NewDefault

LeafBlock:                                        ; preds = %NodeBlock
  %SwitchLeaf = icmp eq i32 %minor, 1
  br i1 %SwitchLeaf, label %sw.epilog, label %NewDefault

sw.bb1:                                           ; preds = %LeafBlock1
  br label %sw.epilog

sw.epilog:                                        ; preds = %LeafBlock, %sw.bb1
  %str.0 = phi i8* [ getelementptr inbounds ([10 x i8], [10 x i8]* @.str.18, i32 0, i32 0), %sw.bb1 ], [ getelementptr inbounds ([8 x i8], [8 x i8]* @.str.17, i32 0, i32 0), %LeafBlock ]
  %call = call i32 (i1, i8*, ...) @__request_module(i1 zeroext true, i8* %str.0)
  br label %cleanup.cont

NewDefault:                                       ; preds = %LeafBlock1, %LeafBlock
  br label %cleanup.cont

cleanup.cont:                                     ; preds = %NewDefault, %sw.epilog
  ret void
}

attributes #0 = { nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { argmemonly nounwind }
attributes #3 = { nounwind readnone }
attributes #4 = { alwaysinline nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { inlinehint nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #6 = { nounwind }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 5.0.1 (tags/RELEASE_500/final)"}
!2 = !{!3, !3, i64 0}
!3 = !{!"any pointer", !4, i64 0}
!4 = !{!"omnipotent char", !5, i64 0}
!5 = !{!"Simple C/C++ TBAA"}
!6 = !{!7, !8, i64 0}
!7 = !{!"snd_minor", !8, i64 0, !8, i64 4, !8, i64 8, !3, i64 16, !3, i64 24, !3, i64 32, !3, i64 40}
!8 = !{!"int", !4, i64 0}
!9 = !{!7, !3, i64 24}
!10 = !{!7, !3, i64 40}
!11 = !{!12, !8, i64 0}
!12 = !{!"snd_card", !8, i64 0, !4, i64 4, !4, i64 20, !4, i64 36, !4, i64 68, !4, i64 148, !4, i64 180, !4, i64 260, !3, i64 392, !3, i64 400, !3, i64 408, !13, i64 416, !14, i64 432, !8, i64 1160, !36, i64 1168, !39, i64 1208, !8, i64 1216, !8, i64 1220, !13, i64 1224, !13, i64 1240, !19, i64 1256, !3, i64 1288, !3, i64 1296, !3, i64 1304, !13, i64 1312, !3, i64 1328, !22, i64 1336, !8, i64 1340, !3, i64 1344, !3, i64 1352, !14, i64 1360, !4, i64 2088, !27, i64 2120, !8, i64 2124, !19, i64 2128, !29, i64 2160, !3, i64 2184, !8, i64 2192}
!13 = !{!"list_head", !3, i64 0, !3, i64 8}
!14 = !{!"device", !3, i64 0, !3, i64 8, !15, i64 16, !3, i64 80, !3, i64 88, !19, i64 96, !3, i64 128, !3, i64 136, !3, i64 144, !3, i64 152, !24, i64 160, !25, i64 200, !3, i64 488, !3, i64 496, !13, i64 504, !8, i64 520, !3, i64 528, !3, i64 536, !33, i64 544, !21, i64 552, !3, i64 560, !13, i64 568, !3, i64 584, !34, i64 592, !3, i64 600, !3, i64 608, !8, i64 616, !8, i64 620, !22, i64 624, !13, i64 632, !35, i64 648, !3, i64 680, !3, i64 688, !3, i64 696, !3, i64 704, !3, i64 712, !27, i64 720, !27, i64 720}
!15 = !{!"kobject", !3, i64 0, !13, i64 8, !3, i64 24, !3, i64 32, !3, i64 40, !3, i64 48, !16, i64 56, !8, i64 60, !8, i64 60, !8, i64 60, !8, i64 60, !8, i64 60}
!16 = !{!"kref", !17, i64 0}
!17 = !{!"refcount_struct", !18, i64 0}
!18 = !{!"", !8, i64 0}
!19 = !{!"mutex", !20, i64 0, !22, i64 8, !23, i64 12, !13, i64 16}
!20 = !{!"", !21, i64 0}
!21 = !{!"long", !4, i64 0}
!22 = !{!"spinlock", !4, i64 0}
!23 = !{!"optimistic_spin_queue", !18, i64 0}
!24 = !{!"dev_links_info", !13, i64 0, !13, i64 16, !4, i64 32}
!25 = !{!"dev_pm_info", !26, i64 0, !8, i64 4, !8, i64 4, !27, i64 4, !27, i64 4, !27, i64 4, !27, i64 4, !27, i64 4, !27, i64 4, !27, i64 5, !22, i64 8, !13, i64 16, !28, i64 32, !3, i64 64, !27, i64 72, !27, i64 72, !27, i64 72, !30, i64 80, !21, i64 128, !32, i64 136, !29, i64 168, !3, i64 192, !18, i64 200, !18, i64 204, !8, i64 208, !8, i64 208, !8, i64 208, !8, i64 208, !8, i64 208, !8, i64 208, !27, i64 209, !8, i64 209, !8, i64 209, !8, i64 209, !8, i64 209, !8, i64 209, !8, i64 212, !4, i64 216, !4, i64 220, !8, i64 224, !8, i64 228, !21, i64 232, !21, i64 240, !21, i64 248, !21, i64 256, !3, i64 264, !3, i64 272, !3, i64 280}
!26 = !{!"pm_message", !8, i64 0}
!27 = !{!"_Bool", !4, i64 0}
!28 = !{!"completion", !8, i64 0, !29, i64 8}
!29 = !{!"__wait_queue_head", !22, i64 0, !13, i64 8}
!30 = !{!"timer_list", !31, i64 0, !21, i64 16, !3, i64 24, !21, i64 32, !8, i64 40}
!31 = !{!"hlist_node", !3, i64 0, !3, i64 8}
!32 = !{!"work_struct", !20, i64 0, !13, i64 8, !3, i64 24}
!33 = !{!"long long", !4, i64 0}
!34 = !{!"dev_archdata", !3, i64 0}
!35 = !{!"klist_node", !3, i64 0, !13, i64 8, !16, i64 24}
!36 = !{!"rw_semaphore", !20, i64 0, !13, i64 8, !37, i64 24, !23, i64 28, !3, i64 32}
!37 = !{!"raw_spinlock", !38, i64 0}
!38 = !{!"qspinlock", !18, i64 0}
!39 = !{!"", !40, i64 0}
!40 = !{!"qrwlock", !18, i64 0, !38, i64 4}
!41 = !{!7, !8, i64 4}
!42 = !{!7, !8, i64 8}
!43 = !{!7, !3, i64 16}
!44 = !{!7, !3, i64 32}
!45 = !{!8, !8, i64 0}
!46 = !{!14, !8, i64 616}
!47 = !{!4, !4, i64 0}
!48 = !{!49, !3, i64 0}
!49 = !{!"snd_info_buffer", !3, i64 0, !8, i64 8, !8, i64 12, !8, i64 16, !8, i64 20, !8, i64 24}
!50 = !{!51, !3, i64 0}
!51 = !{!"file_operations", !3, i64 0, !3, i64 8, !3, i64 16, !3, i64 24, !3, i64 32, !3, i64 40, !3, i64 48, !3, i64 56, !3, i64 64, !3, i64 72, !3, i64 80, !3, i64 88, !3, i64 96, !3, i64 104, !3, i64 112, !3, i64 120, !3, i64 128, !3, i64 136, !3, i64 144, !3, i64 152, !3, i64 160, !3, i64 168, !3, i64 176, !3, i64 184, !3, i64 192, !3, i64 200, !3, i64 208, !3, i64 216, !3, i64 224, !3, i64 232}
!52 = !{!53, !3, i64 40}
!53 = !{!"file", !4, i64 0, !54, i64 16, !3, i64 32, !3, i64 40, !22, i64 48, !20, i64 56, !8, i64 64, !8, i64 68, !19, i64 72, !33, i64 104, !55, i64 112, !3, i64 144, !56, i64 152, !33, i64 184, !3, i64 192, !3, i64 200, !13, i64 208, !13, i64 224, !3, i64 240}
!54 = !{!"path", !3, i64 0, !3, i64 8}
!55 = !{!"fown_struct", !39, i64 0, !3, i64 8, !4, i64 16, !18, i64 20, !18, i64 24, !8, i64 28}
!56 = !{!"file_ra_state", !21, i64 0, !8, i64 8, !8, i64 12, !8, i64 16, !8, i64 20, !33, i64 24}
!57 = !{i32 -2144534148, i32 -2144534123, i32 -2144533853, i32 -2144534056, i32 -2144534025, i32 -2144533995}
!58 = !{!51, !3, i64 96}
!59 = !{!60, !8, i64 76}
!60 = !{!"inode", !61, i64 0, !61, i64 2, !18, i64 4, !18, i64 8, !8, i64 12, !3, i64 16, !3, i64 24, !3, i64 32, !3, i64 40, !3, i64 48, !3, i64 56, !21, i64 64, !4, i64 72, !8, i64 76, !33, i64 80, !62, i64 88, !62, i64 104, !62, i64 120, !22, i64 136, !61, i64 140, !8, i64 144, !21, i64 152, !21, i64 160, !36, i64 168, !21, i64 208, !21, i64 216, !31, i64 224, !13, i64 240, !13, i64 256, !13, i64 272, !13, i64 288, !4, i64 304, !33, i64 320, !18, i64 328, !18, i64 332, !18, i64 336, !3, i64 344, !3, i64 352, !63, i64 360, !13, i64 512, !4, i64 528, !8, i64 536, !8, i64 540, !66, i64 544, !3, i64 552}
!61 = !{!"short", !4, i64 0}
!62 = !{!"timespec", !21, i64 0, !21, i64 8}
!63 = !{!"address_space", !3, i64 0, !64, i64 8, !22, i64 24, !18, i64 28, !65, i64 32, !36, i64 40, !21, i64 80, !21, i64 88, !21, i64 96, !3, i64 104, !21, i64 112, !22, i64 120, !8, i64 124, !13, i64 128, !3, i64 144}
!64 = !{!"radix_tree_root", !8, i64 0, !3, i64 8}
!65 = !{!"rb_root", !3, i64 0}
!66 = !{!"hlist_head", !3, i64 0}
