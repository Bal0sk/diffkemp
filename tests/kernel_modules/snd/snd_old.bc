; ModuleID = 'sound/core/sound.bc'
source_filename = "sound/core/sound.c"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%struct.kernel_symbol = type { i64, i8* }
%struct.kernel_param_ops = type { i32 (i8*, %struct.kernel_param*)*, i32 (i8*, %struct.kernel_param*)*, void (i8*)* }
%struct.kernel_param = type { i8*, %struct.kernel_param_ops*, i16, i16, %union.anon.42 }
%union.anon.42 = type { i8* }
%struct.mutex = type { %struct.atomic_t, %struct.spinlock, %struct.list_head, %struct.task_struct*, i8* }
%struct.atomic_t = type { i32 }
%struct.spinlock = type { %union.anon.0 }
%union.anon.0 = type { %struct.raw_spinlock }
%struct.raw_spinlock = type { %struct.arch_spinlock }
%struct.arch_spinlock = type { %union.anon.1 }
%union.anon.1 = type { i16 }
%struct.list_head = type { %struct.list_head*, %struct.list_head* }
%struct.task_struct = type { i64, i8*, %struct.atomic_t, i32, i32, %struct.llist_node, i32, i32, i32, i32, i32, i32, %struct.sched_class*, %struct.sched_entity, %struct.sched_rt_entity, %struct.task_group*, i8, i32, i32, i32, %struct.cpumask, %struct.sched_info, %struct.list_head, %struct.plist_node, %struct.mm_struct*, %struct.mm_struct*, %struct.task_rss_stat, i32, i32, i32, i32, i32, i32, i8, i32, i32, %struct.task_struct*, %struct.task_struct*, %struct.list_head, %struct.list_head, %struct.task_struct*, %struct.list_head, %struct.list_head, [3 x %struct.pid_link], %struct.list_head, %struct.completion*, i32*, i32*, i64, i64, i64, i64, i64, %struct.cputime, i64, i64, %struct.timespec, %struct.timespec, i64, i64, %struct.task_cputime, [3 x %struct.list_head], %struct.cred*, %struct.cred*, [16 x i8], i32, i32, %struct.sysv_sem, %struct.thread_struct, %struct.fs_struct*, %struct.files_struct*, %struct.nsproxy*, %struct.signal_struct*, %struct.sighand_struct*, %struct.sigset_t, %struct.sigset_t, %struct.sigset_t, %struct.sigpending, i64, i64, i32 (i8*)*, i8*, %struct.sigset_t*, %struct.callback_head*, %struct.audit_context*, i32, i32, %struct.seccomp, i32, i32, %struct.spinlock, %struct.raw_spinlock, %struct.plist_head, %struct.rt_mutex_waiter*, i8*, %struct.bio_list*, %struct.blk_plug*, %struct.reclaim_state*, %struct.backing_dev_info*, %struct.io_context*, i64, %struct.siginfo*, %struct.task_io_accounting, i64, i64, i64, %struct.nodemask_t, %struct.seqcount, i32, i32, %struct.css_set*, %struct.list_head, %struct.robust_list_head*, %struct.compat_robust_list_head*, %struct.list_head, %struct.futex_pi_state*, [2 x %struct.perf_event_context*], %struct.mutex, %struct.list_head, %struct.mempolicy*, i16, i16, %struct.callback_head, %struct.pipe_inode_info*, %struct.page_frag, %struct.task_delay_info*, i32, i32, i64, i64, i64, i64, i64, %struct.atomic_t }
%struct.llist_node = type { %struct.llist_node* }
%struct.sched_class = type opaque
%struct.sched_entity = type { %struct.load_weight, %struct.rb_node, %struct.list_head, i32, i64, i64, i64, i64, i64, %struct.sched_statistics, %struct.sched_entity*, %struct.cfs_rq*, %struct.cfs_rq*, %struct.sched_avg }
%struct.load_weight = type { i64, i64 }
%struct.rb_node = type { i64, %struct.rb_node*, %struct.rb_node* }
%struct.sched_statistics = type { i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64 }
%struct.cfs_rq = type opaque
%struct.sched_avg = type { i32, i32, i64, i64, i64 }
%struct.sched_rt_entity = type { %struct.list_head, i64, i64, i32, %struct.sched_rt_entity* }
%struct.task_group = type opaque
%struct.cpumask = type { [1 x i64] }
%struct.sched_info = type { i64, i64, i64, i64 }
%struct.plist_node = type { i32, %struct.list_head, %struct.list_head }
%struct.mm_struct = type { %struct.vm_area_struct*, %struct.rb_root, %struct.vm_area_struct*, i64 (%struct.file*, i64, i64, i64, i64)*, void (%struct.mm_struct*, i64)*, i64, i64, i64, i64, i64, %struct.pgd_t*, %struct.atomic_t, %struct.atomic_t, i32, %struct.spinlock, %struct.rw_semaphore, %struct.list_head, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, [44 x i64], %struct.mm_rss_stat, %struct.linux_binfmt*, [1 x %struct.cpumask], %struct.mm_context_t, i64, %struct.core_state*, %struct.spinlock, %struct.hlist_head, %struct.file*, %struct.uprobes_state }
%struct.rb_root = type { %struct.rb_node* }
%struct.vm_area_struct = type { i64, i64, %struct.vm_area_struct*, %struct.vm_area_struct*, %struct.rb_node, i64, %struct.mm_struct*, %struct.pgprot, i64, %union.anon, %struct.list_head, %struct.anon_vma*, %struct.vm_operations_struct*, i64, %struct.file*, i8*, %struct.mempolicy* }
%struct.pgprot = type { i64 }
%union.anon = type { %struct.anon }
%struct.anon = type { %struct.rb_node, i64 }
%struct.anon_vma = type opaque
%struct.vm_operations_struct = type opaque
%struct.pgd_t = type { i64 }
%struct.rw_semaphore = type { i64, %struct.raw_spinlock, %struct.list_head }
%struct.mm_rss_stat = type { [3 x %struct.atomic64_t] }
%struct.atomic64_t = type { i64 }
%struct.linux_binfmt = type opaque
%struct.mm_context_t = type { i8*, i32, i16, %struct.mutex, i8* }
%struct.core_state = type { %struct.atomic_t, %struct.core_thread, %struct.completion }
%struct.core_thread = type { %struct.task_struct*, %struct.core_thread* }
%struct.completion = type { i32, %struct.__wait_queue_head }
%struct.__wait_queue_head = type { %struct.spinlock, %struct.list_head }
%struct.hlist_head = type { %struct.hlist_node* }
%struct.hlist_node = type { %struct.hlist_node*, %struct.hlist_node** }
%struct.file = type { %union.anon.36, %struct.path, %struct.inode*, %struct.file_operations*, %struct.spinlock, i32, %struct.atomic64_t, i32, i32, i64, %struct.fown_struct, %struct.cred*, %struct.file_ra_state, i64, i8*, i8*, %struct.list_head, %struct.list_head, %struct.address_space* }
%union.anon.36 = type { %struct.list_head }
%struct.path = type { %struct.vfsmount*, %struct.dentry* }
%struct.vfsmount = type opaque
%struct.dentry = type { i32, %struct.seqcount, %struct.hlist_bl_node, %struct.dentry*, %struct.qstr, %struct.inode*, [32 x i8], i32, %struct.spinlock, %struct.dentry_operations*, %struct.super_block*, i64, i8*, %struct.list_head, %union.anon.39, %struct.list_head, %struct.hlist_node }
%struct.hlist_bl_node = type { %struct.hlist_bl_node*, %struct.hlist_bl_node** }
%struct.qstr = type { %union.anon.37, i8* }
%union.anon.37 = type { i64 }
%struct.dentry_operations = type { i32 (%struct.dentry*, i32)*, i32 (%struct.dentry*, i32)*, i32 (%struct.dentry*, %struct.inode*, %struct.qstr*)*, i32 (%struct.dentry*, %struct.inode*, %struct.dentry*, %struct.inode*, i32, i8*, %struct.qstr*)*, i32 (%struct.dentry*)*, void (%struct.dentry*)*, void (%struct.dentry*)*, void (%struct.dentry*, %struct.inode*)*, i8* (%struct.dentry*, i8*, i32)*, %struct.vfsmount* (%struct.path*)*, i32 (%struct.dentry*, i1)*, [40 x i8] }
%struct.super_block = type { %struct.list_head, i32, i8, i64, i64, %struct.file_system_type*, %struct.super_operations*, %struct.dquot_operations*, %struct.quotactl_ops*, %struct.export_operations*, i64, i64, %struct.dentry*, %struct.rw_semaphore, i32, %struct.atomic_t, i8*, %struct.xattr_handler**, %struct.list_head, %struct.hlist_bl_head, %struct.list_head*, %struct.list_head, %struct.list_head, i32, [28 x i8], %struct.spinlock, %struct.list_head, i32, %struct.block_device*, %struct.backing_dev_info*, %struct.mtd_info*, %struct.hlist_node, %struct.quota_info, %struct.sb_writers, [32 x i8], [16 x i8], i8*, i32, i32, i32, %struct.mutex, i8*, i8*, %struct.dentry_operations*, i32, %struct.shrinker, %struct.atomic64_t, i32, [20 x i8] }
%struct.file_system_type = type { i8*, i32, %struct.dentry* (%struct.file_system_type*, i32, i8*, i8*)*, void (%struct.super_block*)*, %struct.module*, %struct.file_system_type*, %struct.hlist_head, %struct.lock_class_key, %struct.lock_class_key, %struct.lock_class_key, [3 x %struct.lock_class_key], %struct.lock_class_key, %struct.lock_class_key, %struct.lock_class_key }
%struct.module = type { i32, %struct.list_head, [56 x i8], %struct.module_kobject, %struct.module_attribute*, i8*, i8*, %struct.kobject*, %struct.kernel_symbol*, i64*, i32, %struct.kernel_param*, i32, i32, %struct.kernel_symbol*, i64*, %struct.kernel_symbol*, i64*, i32, i32, %struct.exception_table_entry*, i32 ()*, i8*, i8*, i32, i32, i32, i32, i32, i32, %struct.mod_arch_specific, i32, i32, %struct.list_head, %struct.bug_entry*, %struct.elf64_sym*, %struct.elf64_sym*, i32, i32, i8*, i8*, %struct.module_sect_attrs*, %struct.module_notes_attrs*, i8*, i8*, i32, i32, %struct.tracepoint**, i32, i8**, %struct.ftrace_event_call**, i32, %struct.list_head, %struct.list_head, %struct.task_struct*, void ()*, %struct.module_ref* }
%struct.module_kobject = type { %struct.kobject, %struct.module*, %struct.kobject*, %struct.module_param_attrs* }
%struct.kobject = type { i8*, %struct.list_head, %struct.kobject*, %struct.kset*, %struct.kobj_type*, %struct.sysfs_dirent*, %struct.kref, i8 }
%struct.kset = type { %struct.list_head, %struct.spinlock, %struct.kobject, %struct.kset_uevent_ops* }
%struct.kset_uevent_ops = type { i32 (%struct.kset*, %struct.kobject*)*, i8* (%struct.kset*, %struct.kobject*)*, i32 (%struct.kset*, %struct.kobject*, %struct.kobj_uevent_env*)* }
%struct.kobj_uevent_env = type { [32 x i8*], i32, [2048 x i8], i32 }
%struct.kobj_type = type { void (%struct.kobject*)*, %struct.sysfs_ops*, %struct.attribute**, %struct.kobj_ns_type_operations* (%struct.kobject*)*, i8* (%struct.kobject*)* }
%struct.sysfs_ops = type { i64 (%struct.kobject*, %struct.attribute*, i8*)*, i64 (%struct.kobject*, %struct.attribute*, i8*, i64)*, i8* (%struct.kobject*, %struct.attribute*)* }
%struct.attribute = type { i8*, i16 }
%struct.kobj_ns_type_operations = type { i32, i8* ()*, i8* (%struct.sock*)*, i8* ()*, void (i8*)* }
%struct.sock = type opaque
%struct.sysfs_dirent = type opaque
%struct.kref = type { %struct.atomic_t }
%struct.module_param_attrs = type opaque
%struct.module_attribute = type { %struct.attribute, i64 (%struct.module_attribute*, %struct.module_kobject*, i8*)*, i64 (%struct.module_attribute*, %struct.module_kobject*, i8*, i64)*, void (%struct.module*, i8*)*, i32 (%struct.module*)*, void (%struct.module*)* }
%struct.exception_table_entry = type { i32, i32 }
%struct.mod_arch_specific = type {}
%struct.bug_entry = type { i32, i32, i16, i16 }
%struct.elf64_sym = type { i32, i8, i8, i16, i64, i64 }
%struct.module_sect_attrs = type opaque
%struct.module_notes_attrs = type opaque
%struct.tracepoint = type { i8*, %struct.static_key, void ()*, void ()*, %struct.tracepoint_func* }
%struct.static_key = type { %struct.atomic_t }
%struct.tracepoint_func = type { i8*, i8* }
%struct.ftrace_event_call = type opaque
%struct.module_ref = type { i64, i64 }
%struct.lock_class_key = type {}
%struct.super_operations = type { %struct.inode* (%struct.super_block*)*, void (%struct.inode*)*, void (%struct.inode*, i32)*, i32 (%struct.inode*, %struct.writeback_control*)*, i32 (%struct.inode*)*, void (%struct.inode*)*, void (%struct.super_block*)*, i32 (%struct.super_block*, i32)*, i32 (%struct.super_block*)*, i32 (%struct.super_block*)*, i32 (%struct.dentry*, %struct.kstatfs*)*, i32 (%struct.super_block*, i32*, i8*)*, void (%struct.super_block*)*, i32 (%struct.seq_file*, %struct.dentry*)*, i32 (%struct.seq_file*, %struct.dentry*)*, i32 (%struct.seq_file*, %struct.dentry*)*, i32 (%struct.seq_file*, %struct.dentry*)*, i64 (%struct.super_block*, i32, i8*, i64, i64)*, i64 (%struct.super_block*, i32, i8*, i64, i64)*, i32 (%struct.super_block*, %struct.page*, i32)*, i32 (%struct.super_block*)*, void (%struct.super_block*, i32)* }
%struct.writeback_control = type opaque
%struct.kstatfs = type opaque
%struct.seq_file = type opaque
%struct.page = type { i64, %struct.address_space*, %struct.anon.22, %union.anon.28, %union.anon.30, [8 x i8] }
%struct.anon.22 = type { %union.anon.23, %union.anon.24 }
%union.anon.23 = type { i64 }
%union.anon.24 = type { i64 }
%union.anon.28 = type { %struct.list_head }
%union.anon.30 = type { i64 }
%struct.dquot_operations = type { i32 (%struct.dquot*)*, %struct.dquot* (%struct.super_block*, i32)*, void (%struct.dquot*)*, i32 (%struct.dquot*)*, i32 (%struct.dquot*)*, i32 (%struct.dquot*)*, i32 (%struct.super_block*, i32)*, i64* (%struct.inode*)* }
%struct.dquot = type { %struct.hlist_node, %struct.list_head, %struct.list_head, %struct.list_head, %struct.mutex, %struct.atomic_t, %struct.__wait_queue_head, %struct.super_block*, %struct.kqid, i64, i64, %struct.mem_dqblk }
%struct.kqid = type { %union.anon.34, i32 }
%union.anon.34 = type { i32 }
%struct.mem_dqblk = type { i64, i64, i64, i64, i64, i64, i64, i64, i64 }
%struct.quotactl_ops = type { i32 (%struct.super_block*, i32, i32, %struct.path*)*, i32 (%struct.super_block*, i32, i32)*, i32 (%struct.super_block*, i32)*, i32 (%struct.super_block*, i32)*, i32 (%struct.super_block*, i32, %struct.if_dqinfo*)*, i32 (%struct.super_block*, i32, %struct.if_dqinfo*)*, i32 (%struct.super_block*, i64, %struct.fs_disk_quota*)*, i32 (%struct.super_block*, i64, %struct.fs_disk_quota*)*, i32 (%struct.super_block*, %struct.fs_quota_stat*)*, i32 (%struct.super_block*, i32, i32)* }
%struct.if_dqinfo = type { i64, i64, i32, i32 }
%struct.fs_disk_quota = type { i8, i8, i16, i32, i64, i64, i64, i64, i64, i64, i32, i32, i16, i16, i32, i64, i64, i64, i32, i16, i16, [8 x i8] }
%struct.fs_quota_stat = type { i8, i16, i8, %struct.fs_qfilestat, %struct.fs_qfilestat, i32, i32, i32, i32, i16, i16 }
%struct.fs_qfilestat = type { i64, i64, i32 }
%struct.export_operations = type opaque
%struct.xattr_handler = type opaque
%struct.hlist_bl_head = type { %struct.hlist_bl_node* }
%struct.block_device = type { i32, i32, %struct.inode*, %struct.super_block*, %struct.mutex, %struct.list_head, i8*, i8*, i32, i8, %struct.list_head, %struct.block_device*, i32, %struct.hd_struct*, i32, i32, %struct.gendisk*, %struct.request_queue*, %struct.list_head, i64, i32, %struct.mutex }
%struct.hd_struct = type opaque
%struct.gendisk = type opaque
%struct.request_queue = type opaque
%struct.mtd_info = type opaque
%struct.quota_info = type { i32, %struct.mutex, %struct.mutex, %struct.rw_semaphore, [2 x %struct.inode*], [2 x %struct.mem_dqinfo], [2 x %struct.quota_format_ops*] }
%struct.mem_dqinfo = type { %struct.quota_format_type*, i32, %struct.list_head, i64, i32, i32, i64, i64, i8* }
%struct.quota_format_type = type { i32, %struct.quota_format_ops*, %struct.module*, %struct.quota_format_type* }
%struct.quota_format_ops = type { i32 (%struct.super_block*, i32)*, i32 (%struct.super_block*, i32)*, i32 (%struct.super_block*, i32)*, i32 (%struct.super_block*, i32)*, i32 (%struct.dquot*)*, i32 (%struct.dquot*)*, i32 (%struct.dquot*)* }
%struct.sb_writers = type { [3 x %struct.percpu_counter], %struct.__wait_queue_head, i32, %struct.__wait_queue_head }
%struct.percpu_counter = type { %struct.raw_spinlock, i64, %struct.list_head, i32* }
%struct.shrinker = type { i32 (%struct.shrinker*, %struct.shrink_control*)*, i32, i64, %struct.list_head, %struct.atomic64_t }
%struct.shrink_control = type { i32, i64 }
%union.anon.39 = type { %struct.list_head }
%struct.inode = type { i16, i16, i32, i32, i32, %struct.posix_acl*, %struct.posix_acl*, %struct.inode_operations*, %struct.super_block*, %struct.address_space*, i8*, i64, %union.anon.32, i32, i64, %struct.timespec, %struct.timespec, %struct.timespec, %struct.spinlock, i16, i32, i64, i64, %struct.mutex, i64, %struct.hlist_node, %struct.list_head, %struct.list_head, %struct.list_head, %union.anon.33, i64, %struct.atomic_t, %struct.atomic_t, %struct.atomic_t, %struct.file_operations*, %struct.file_lock*, %struct.address_space, [2 x %struct.dquot*], %struct.list_head, %union.anon.35, i32, i32, %struct.hlist_head, i8* }
%struct.posix_acl = type opaque
%struct.inode_operations = type { %struct.dentry* (%struct.inode*, %struct.dentry*, i32)*, i8* (%struct.dentry*, %struct.nameidata*)*, i32 (%struct.inode*, i32)*, %struct.posix_acl* (%struct.inode*, i32)*, i32 (%struct.dentry*, i8*, i32)*, void (%struct.dentry*, %struct.nameidata*, i8*)*, i32 (%struct.inode*, %struct.dentry*, i16, i1)*, i32 (%struct.dentry*, %struct.inode*, %struct.dentry*)*, i32 (%struct.inode*, %struct.dentry*)*, i32 (%struct.inode*, %struct.dentry*, i8*)*, i32 (%struct.inode*, %struct.dentry*, i16)*, i32 (%struct.inode*, %struct.dentry*)*, i32 (%struct.inode*, %struct.dentry*, i16, i32)*, i32 (%struct.inode*, %struct.dentry*, %struct.inode*, %struct.dentry*)*, i32 (%struct.dentry*, %struct.iattr*)*, i32 (%struct.vfsmount*, %struct.dentry*, %struct.kstat*)*, i32 (%struct.dentry*, i8*, i8*, i64, i32)*, i64 (%struct.dentry*, i8*, i8*, i64)*, i64 (%struct.dentry*, i8*, i64)*, i32 (%struct.dentry*, i8*)*, i32 (%struct.inode*, %struct.fiemap_extent_info*, i64, i64)*, i32 (%struct.inode*, %struct.timespec*, i32)*, i32 (%struct.inode*, %struct.dentry*, %struct.file*, i32, i16, i32*)*, [8 x i8] }
%struct.nameidata = type opaque
%struct.iattr = type { i32, i16, i32, i32, i64, %struct.timespec, %struct.timespec, %struct.timespec, %struct.file* }
%struct.kstat = type { i64, i32, i16, i32, i32, i32, i32, i64, %struct.timespec, %struct.timespec, %struct.timespec, i64, i64 }
%struct.fiemap_extent_info = type { i32, i32, i32, %struct.fiemap_extent* }
%struct.fiemap_extent = type { i64, i64, i64, [2 x i64], i32, [3 x i32] }
%union.anon.32 = type { i32 }
%union.anon.33 = type { %struct.callback_head }
%struct.file_lock = type { %struct.file_lock*, %struct.list_head, %struct.list_head, %struct.files_struct*, i32, i8, i32, %struct.pid*, %struct.__wait_queue_head, %struct.file*, i64, i64, %struct.fasync_struct*, i64, i64, %struct.file_lock_operations*, %struct.lock_manager_operations*, %union.anon.40 }
%struct.pid = type { %struct.atomic_t, i32, [3 x %struct.hlist_head], %struct.callback_head, [1 x %struct.upid] }
%struct.upid = type { i32, %struct.pid_namespace*, %struct.hlist_node }
%struct.pid_namespace = type opaque
%struct.fasync_struct = type { %struct.spinlock, i32, i32, %struct.fasync_struct*, %struct.file*, %struct.callback_head }
%struct.file_lock_operations = type { void (%struct.file_lock*, %struct.file_lock*)*, void (%struct.file_lock*)* }
%struct.lock_manager_operations = type { i32 (%struct.file_lock*, %struct.file_lock*)*, void (%struct.file_lock*)*, i32 (%struct.file_lock*, %struct.file_lock*, i32)*, void (%struct.file_lock*)*, i32 (%struct.file_lock**, i32)* }
%union.anon.40 = type { %struct.nfs_lock_info }
%struct.nfs_lock_info = type { i32, %struct.nlm_lockowner*, %struct.list_head }
%struct.nlm_lockowner = type opaque
%struct.address_space = type { %struct.inode*, %struct.radix_tree_root, %struct.spinlock, i32, %struct.rb_root, %struct.list_head, %struct.mutex, i64, i64, %struct.address_space_operations*, i64, %struct.backing_dev_info*, %struct.spinlock, %struct.list_head, i8* }
%struct.radix_tree_root = type { i32, i32, %struct.radix_tree_node* }
%struct.radix_tree_node = type opaque
%struct.address_space_operations = type { i32 (%struct.page*, %struct.writeback_control*)*, i32 (%struct.file*, %struct.page*)*, i32 (%struct.address_space*, %struct.writeback_control*)*, i32 (%struct.page*)*, i32 (%struct.file*, %struct.address_space*, %struct.list_head*, i32)*, i32 (%struct.file*, %struct.address_space*, i64, i32, i32, %struct.page**, i8**)*, i32 (%struct.file*, %struct.address_space*, i64, i32, i32, %struct.page*, i8*)*, i64 (%struct.address_space*, i64)*, void (%struct.page*, i64)*, i32 (%struct.page*, i32)*, void (%struct.page*)*, i64 (i32, %struct.kiocb*, %struct.iovec*, i64, i64)*, i32 (%struct.address_space*, i64, i32, i8**, i64*)*, i32 (%struct.address_space*, %struct.page*, %struct.page*, i32)*, i32 (%struct.page*)*, i32 (%struct.page*, %struct.read_descriptor_t*, i64)*, i32 (%struct.address_space*, %struct.page*)*, i32 (%struct.swap_info_struct*, %struct.file*, i64*)*, void (%struct.file*)* }
%struct.kiocb = type opaque
%struct.iovec = type opaque
%struct.read_descriptor_t = type { i64, i64, %union.anon.31, i32 }
%union.anon.31 = type { i8* }
%struct.swap_info_struct = type opaque
%union.anon.35 = type { %struct.pipe_inode_info* }
%struct.file_operations = type { %struct.module*, i64 (%struct.file*, i64, i32)*, i64 (%struct.file*, i8*, i64, i64*)*, i64 (%struct.file*, i8*, i64, i64*)*, i64 (%struct.kiocb*, %struct.iovec*, i64, i64)*, i64 (%struct.kiocb*, %struct.iovec*, i64, i64)*, i32 (%struct.file*, i8*, i32 (i8*, i8*, i32, i64, i64, i32)*)*, i32 (%struct.file*, %struct.poll_table_struct*)*, i64 (%struct.file*, i32, i64)*, i64 (%struct.file*, i32, i64)*, i32 (%struct.file*, %struct.vm_area_struct*)*, i32 (%struct.inode*, %struct.file*)*, i32 (%struct.file*, %struct.files_struct*)*, i32 (%struct.inode*, %struct.file*)*, i32 (%struct.file*, i64, i64, i32)*, i32 (%struct.kiocb*, i32)*, i32 (i32, %struct.file*, i32)*, i32 (%struct.file*, i32, %struct.file_lock*)*, i64 (%struct.file*, %struct.page*, i32, i64, i64*, i32)*, i64 (%struct.file*, i64, i64, i64, i64)*, i32 (i32)*, i32 (%struct.file*, i32, %struct.file_lock*)*, i64 (%struct.pipe_inode_info*, %struct.file*, i64*, i64, i32)*, i64 (%struct.file*, i64*, %struct.pipe_inode_info*, i64, i32)*, i32 (%struct.file*, i64, %struct.file_lock**)*, i64 (%struct.file*, i32, i64, i64)*, i32 (%struct.seq_file*, %struct.file*)* }
%struct.poll_table_struct = type { void (%struct.file*, %struct.__wait_queue_head*, %struct.poll_table_struct*)*, i64 }
%struct.fown_struct = type { %struct.rwlock_t, %struct.pid*, i32, i32, i32, i32 }
%struct.rwlock_t = type { %union.arch_rwlock_t }
%union.arch_rwlock_t = type { i32 }
%struct.file_ra_state = type { i64, i32, i32, i32, i32, i64 }
%struct.uprobes_state = type {}
%struct.task_rss_stat = type { i32, [3 x i32] }
%struct.pid_link = type { %struct.hlist_node, %struct.pid* }
%struct.cputime = type { i64, i64 }
%struct.timespec = type { i64, i64 }
%struct.task_cputime = type { i64, i64, i64 }
%struct.cred = type { %struct.atomic_t, i32, i32, i32, i32, i32, i32, i32, i32, i32, %struct.kernel_cap_struct, %struct.kernel_cap_struct, %struct.kernel_cap_struct, %struct.kernel_cap_struct, i8, %struct.key*, %struct.key*, %struct.key*, %struct.key*, i8*, %struct.user_struct*, %struct.user_namespace*, %struct.group_info*, %struct.callback_head }
%struct.kernel_cap_struct = type { [2 x i32] }
%struct.key = type { %struct.atomic_t, i32, %union.anon.2, %struct.key_type*, %struct.rw_semaphore, %struct.key_user*, i8*, %union.anon.3, i64, i32, i32, i32, i16, i16, i64, i8*, %union.anon.4, %union.anon.5 }
%union.anon.2 = type { %struct.rb_node }
%struct.key_type = type opaque
%struct.key_user = type opaque
%union.anon.3 = type { i64 }
%union.anon.4 = type { %struct.list_head }
%union.anon.5 = type { i64 }
%struct.user_struct = type { %struct.atomic_t, %struct.atomic_t, %struct.atomic_t, %struct.atomic_t, %struct.atomic_t, %struct.atomic_t, %struct.atomic64_t, i64, i64, %struct.key*, %struct.key*, %struct.hlist_node, i32, %struct.atomic64_t }
%struct.user_namespace = type opaque
%struct.group_info = type { %struct.atomic_t, i32, i32, [32 x i32], [0 x i32*] }
%struct.sysv_sem = type { %struct.sem_undo_list* }
%struct.sem_undo_list = type opaque
%struct.thread_struct = type { [3 x %struct.desc_struct], i64, i64, i64, i16, i16, i16, i16, i64, i64, [4 x %struct.perf_event*], i64, i64, i64, i64, i64, %struct.fpu, i64*, i64, i32 }
%struct.desc_struct = type { %union.anon.6 }
%union.anon.6 = type { %struct.anon.7 }
%struct.anon.7 = type { i32, i32 }
%struct.perf_event = type opaque
%struct.fpu = type { i32, i32, %union.thread_xstate* }
%union.thread_xstate = type { %struct.xsave_struct }
%struct.xsave_struct = type { %struct.i387_fxsave_struct, %struct.xsave_hdr_struct, %struct.ymmh_struct }
%struct.i387_fxsave_struct = type { i16, i16, i16, i16, %union.anon.9, i32, i32, [32 x i32], [64 x i32], [12 x i32], %union.anon.12 }
%union.anon.9 = type { %struct.anon.10 }
%struct.anon.10 = type { i64, i64 }
%union.anon.12 = type { [12 x i32] }
%struct.xsave_hdr_struct = type { i64, [2 x i64], [5 x i64] }
%struct.ymmh_struct = type { [64 x i32] }
%struct.fs_struct = type opaque
%struct.files_struct = type opaque
%struct.nsproxy = type opaque
%struct.signal_struct = type { %struct.atomic_t, %struct.atomic_t, i32, %struct.__wait_queue_head, %struct.task_struct*, %struct.sigpending, i32, i32, %struct.task_struct*, i32, i32, i8, i32, %struct.list_head, %struct.hrtimer, %struct.pid*, %union.ktime, [2 x %struct.cpu_itimer], %struct.thread_group_cputimer, %struct.task_cputime, [3 x %struct.list_head], %struct.pid*, i32, %struct.tty_struct*, i64, i64, i64, i64, i64, i64, %struct.cputime, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, %struct.task_io_accounting, i64, [16 x %struct.rlimit], %struct.pacct_struct, %struct.taskstats*, i32, i32, %struct.tty_audit_buf*, %struct.rw_semaphore, i32, i16, i16, %struct.mutex }
%struct.hrtimer = type { %struct.timerqueue_node, %union.ktime, i32 (%struct.hrtimer*)*, %struct.hrtimer_clock_base*, i64, i32, i8*, [16 x i8] }
%struct.timerqueue_node = type { %struct.rb_node, %union.ktime }
%struct.hrtimer_clock_base = type { %struct.hrtimer_cpu_base*, i32, i32, %struct.timerqueue_head, %union.ktime, i64 ()*, %union.ktime, %union.ktime }
%struct.hrtimer_cpu_base = type { %struct.raw_spinlock, i32, i32, %union.ktime, i32, i32, i64, i64, i64, %union.ktime, [4 x %struct.hrtimer_clock_base] }
%struct.timerqueue_head = type { %struct.rb_root, %struct.timerqueue_node* }
%union.ktime = type { i64 }
%struct.cpu_itimer = type { i64, i64, i32, i32 }
%struct.thread_group_cputimer = type { %struct.task_cputime, i32, %struct.raw_spinlock }
%struct.tty_struct = type opaque
%struct.rlimit = type { i64, i64 }
%struct.pacct_struct = type { i32, i64, i64, i64, i64, i64, i64 }
%struct.taskstats = type opaque
%struct.tty_audit_buf = type opaque
%struct.sighand_struct = type { %struct.atomic_t, [64 x %struct.k_sigaction], %struct.spinlock, %struct.__wait_queue_head }
%struct.k_sigaction = type { %struct.sigaction }
%struct.sigaction = type { void (i32)*, i64, void ()*, %struct.sigset_t }
%struct.sigset_t = type { [1 x i64] }
%struct.sigpending = type { %struct.list_head, %struct.sigset_t }
%struct.audit_context = type opaque
%struct.seccomp = type { i32, %struct.seccomp_filter* }
%struct.seccomp_filter = type opaque
%struct.plist_head = type { %struct.list_head }
%struct.rt_mutex_waiter = type opaque
%struct.bio_list = type opaque
%struct.blk_plug = type opaque
%struct.reclaim_state = type opaque
%struct.backing_dev_info = type opaque
%struct.io_context = type opaque
%struct.siginfo = type { i32, i32, i32, %union.anon.14 }
%union.anon.14 = type { %struct.anon.18, [80 x i8] }
%struct.anon.18 = type { i32, i32, i32, i64, i64 }
%struct.task_io_accounting = type { i64, i64, i64, i64, i64, i64, i64 }
%struct.nodemask_t = type { [1 x i64] }
%struct.seqcount = type { i32 }
%struct.css_set = type opaque
%struct.robust_list_head = type opaque
%struct.compat_robust_list_head = type opaque
%struct.futex_pi_state = type opaque
%struct.perf_event_context = type opaque
%struct.mempolicy = type opaque
%struct.callback_head = type { %struct.callback_head*, void (%struct.callback_head*)* }
%struct.pipe_inode_info = type opaque
%struct.page_frag = type { %struct.page*, i32, i32 }
%struct.task_delay_info = type { %struct.spinlock, i32, %struct.timespec, %struct.timespec, i64, i64, i32, i32, %struct.timespec, %struct.timespec, i64, i32 }
%struct.snd_minor = type { i32, i32, i32, %struct.file_operations*, i8*, %struct.device*, %struct.snd_card* }
%struct.device = type { %struct.device*, %struct.device_private*, %struct.kobject, i8*, %struct.device_type*, %struct.mutex, %struct.bus_type*, %struct.device_driver*, i8*, %struct.dev_pm_info, %struct.dev_pm_domain*, i32, i64*, i64, %struct.device_dma_parameters*, %struct.list_head, %struct.dma_coherent_mem*, %struct.dev_archdata, %struct.device_node*, %struct.acpi_dev_node, i32, i32, %struct.spinlock, %struct.list_head, %struct.klist_node, %struct.class*, %struct.attribute_group**, void (%struct.device*)*, %struct.iommu_group* }
%struct.device_private = type opaque
%struct.device_type = type { i8*, %struct.attribute_group**, i32 (%struct.device*, %struct.kobj_uevent_env*)*, i8* (%struct.device*, i16*, i32*, i32*)*, void (%struct.device*)*, %struct.dev_pm_ops* }
%struct.dev_pm_ops = type { i32 (%struct.device*)*, void (%struct.device*)*, i32 (%struct.device*)*, i32 (%struct.device*)*, i32 (%struct.device*)*, i32 (%struct.device*)*, i32 (%struct.device*)*, i32 (%struct.device*)*, i32 (%struct.device*)*, i32 (%struct.device*)*, i32 (%struct.device*)*, i32 (%struct.device*)*, i32 (%struct.device*)*, i32 (%struct.device*)*, i32 (%struct.device*)*, i32 (%struct.device*)*, i32 (%struct.device*)*, i32 (%struct.device*)*, i32 (%struct.device*)*, i32 (%struct.device*)*, i32 (%struct.device*)*, i32 (%struct.device*)*, i32 (%struct.device*)* }
%struct.bus_type = type { i8*, i8*, %struct.device*, %struct.bus_attribute*, %struct.device_attribute*, %struct.driver_attribute*, i32 (%struct.device*, %struct.device_driver*)*, i32 (%struct.device*, %struct.kobj_uevent_env*)*, i32 (%struct.device*)*, i32 (%struct.device*)*, void (%struct.device*)*, i32 (%struct.device*, i32)*, i32 (%struct.device*)*, %struct.dev_pm_ops*, %struct.iommu_ops*, %struct.subsys_private*, %struct.lock_class_key }
%struct.bus_attribute = type { %struct.attribute, i64 (%struct.bus_type*, i8*)*, i64 (%struct.bus_type*, i8*, i64)* }
%struct.device_attribute = type { %struct.attribute, i64 (%struct.device*, %struct.device_attribute*, i8*)*, i64 (%struct.device*, %struct.device_attribute*, i8*, i64)* }
%struct.driver_attribute = type { %struct.attribute, i64 (%struct.device_driver*, i8*)*, i64 (%struct.device_driver*, i8*, i64)* }
%struct.iommu_ops = type opaque
%struct.subsys_private = type opaque
%struct.device_driver = type { i8*, %struct.bus_type*, %struct.module*, i8*, i8, %struct.of_device_id*, %struct.acpi_device_id*, i32 (%struct.device*)*, i32 (%struct.device*)*, void (%struct.device*)*, i32 (%struct.device*, i32)*, i32 (%struct.device*)*, %struct.attribute_group**, %struct.dev_pm_ops*, %struct.driver_private* }
%struct.of_device_id = type opaque
%struct.acpi_device_id = type opaque
%struct.driver_private = type opaque
%struct.dev_pm_info = type { %struct.pm_message, i8, %struct.spinlock, %struct.list_head, %struct.completion, %struct.wakeup_source*, i8, %struct.pm_subsys_data*, %struct.dev_pm_qos* }
%struct.pm_message = type { i32 }
%struct.wakeup_source = type { i8*, %struct.list_head, %struct.spinlock, %struct.timer_list, i64, %union.ktime, %union.ktime, %union.ktime, %union.ktime, %union.ktime, i64, i64, i64, i64, i64, i8 }
%struct.timer_list = type { %struct.list_head, i64, %struct.tvec_base*, void (i64)*, i64, i32, i32, i8*, [16 x i8] }
%struct.tvec_base = type opaque
%struct.pm_subsys_data = type { %struct.spinlock, i32 }
%struct.dev_pm_qos = type opaque
%struct.dev_pm_domain = type { %struct.dev_pm_ops }
%struct.device_dma_parameters = type { i32, i64 }
%struct.dma_coherent_mem = type opaque
%struct.dev_archdata = type { %struct.dma_map_ops*, i8* }
%struct.dma_map_ops = type opaque
%struct.device_node = type opaque
%struct.acpi_dev_node = type { i8* }
%struct.klist_node = type { i8*, %struct.list_head, %struct.kref }
%struct.class = type { i8*, %struct.module*, %struct.class_attribute*, %struct.device_attribute*, %struct.bin_attribute*, %struct.kobject*, i32 (%struct.device*, %struct.kobj_uevent_env*)*, i8* (%struct.device*, i16*)*, void (%struct.class*)*, void (%struct.device*)*, i32 (%struct.device*, i32)*, i32 (%struct.device*)*, %struct.kobj_ns_type_operations*, i8* (%struct.device*)*, %struct.dev_pm_ops*, %struct.subsys_private* }
%struct.class_attribute = type { %struct.attribute, i64 (%struct.class*, %struct.class_attribute*, i8*)*, i64 (%struct.class*, %struct.class_attribute*, i8*, i64)*, i8* (%struct.class*, %struct.class_attribute*)* }
%struct.bin_attribute = type { %struct.attribute, i64, i8*, i64 (%struct.file*, %struct.kobject*, %struct.bin_attribute*, i8*, i64, i64)*, i64 (%struct.file*, %struct.kobject*, %struct.bin_attribute*, i8*, i64, i64)*, i32 (%struct.file*, %struct.kobject*, %struct.bin_attribute*, %struct.vm_area_struct*)* }
%struct.attribute_group = type { i8*, i16 (%struct.kobject*, %struct.attribute*, i32)*, %struct.attribute** }
%struct.iommu_group = type opaque
%struct.snd_card = type { i32, [16 x i8], [16 x i8], [32 x i8], [80 x i8], [80 x i8], [128 x i8], %struct.module*, i8*, void (%struct.snd_card*)*, %struct.list_head, i32, %struct.rw_semaphore, %struct.rwlock_t, i32, i32, %struct.list_head, %struct.list_head, %struct.snd_info_entry*, %struct.snd_info_entry*, %struct.proc_dir_entry*, %struct.list_head, %struct.snd_shutdown_f_ops*, %struct.spinlock, i32, i32, %struct.__wait_queue_head, %struct.atomic_t, %struct.device*, %struct.device*, i32, %struct.mutex, %struct.__wait_queue_head, %struct.snd_mixer_oss*, i32 }
%struct.snd_info_entry = type { i8*, i16, i64, i16, %union.anon.43, %struct.snd_info_entry*, %struct.snd_card*, %struct.module*, i8*, void (%struct.snd_info_entry*)*, %struct.proc_dir_entry*, %struct.mutex, %struct.list_head, %struct.list_head }
%union.anon.43 = type { %struct.snd_info_entry_text }
%struct.snd_info_entry_text = type { void (%struct.snd_info_entry*, %struct.snd_info_buffer*)*, void (%struct.snd_info_entry*, %struct.snd_info_buffer*)* }
%struct.snd_info_buffer = type { i8*, i32, i32, i32, i32, i32 }
%struct.proc_dir_entry = type opaque
%struct.snd_shutdown_f_ops = type opaque
%struct.snd_mixer_oss = type opaque
%struct.smp_ops = type { void ()*, void (i32)*, void (i32)*, void (i32)*, void (i32)*, i32 (i32, %struct.task_struct*)*, i32 ()*, void (i32)*, void ()*, void (%struct.cpumask*)*, void (i32)* }

@snd_major = common global i32 0, align 4
@__kstrtab_snd_major = internal constant [10 x i8] c"snd_major\00", section "__ksymtab_strings", align 1
@__ksymtab_snd_major = internal constant %struct.kernel_symbol { i64 ptrtoint (i32* @snd_major to i64), i8* getelementptr inbounds ([10 x i8], [10 x i8]* @__kstrtab_snd_major, i32 0, i32 0) }, section "___ksymtab+snd_major", align 8
@__param_str_major = internal constant [10 x i8] c"snd.major\00", align 1
@param_ops_int = external global %struct.kernel_param_ops, align 8
@major = internal global i32 116, align 4
@__param_major = internal constant %struct.kernel_param { i8* getelementptr inbounds ([10 x i8], [10 x i8]* @__param_str_major, i32 0, i32 0), %struct.kernel_param_ops* @param_ops_int, i16 292, i16 -1, %union.anon.42 { i8* bitcast (i32* @major to i8*) } }, section "__param", align 8
@__param_str_cards_limit = internal constant [16 x i8] c"snd.cards_limit\00", align 16
@cards_limit = internal global i32 1, align 4
@__param_cards_limit = internal constant %struct.kernel_param { i8* getelementptr inbounds ([16 x i8], [16 x i8]* @__param_str_cards_limit, i32 0, i32 0), %struct.kernel_param_ops* @param_ops_int, i16 292, i16 -1, %union.anon.42 { i8* bitcast (i32* @cards_limit to i8*) } }, section "__param", align 8
@snd_ecards_limit = common global i32 0, align 4
@__kstrtab_snd_ecards_limit = internal constant [17 x i8] c"snd_ecards_limit\00", section "__ksymtab_strings", align 1
@__ksymtab_snd_ecards_limit = internal constant %struct.kernel_symbol { i64 ptrtoint (i32* @snd_ecards_limit to i64), i8* getelementptr inbounds ([17 x i8], [17 x i8]* @__kstrtab_snd_ecards_limit, i32 0, i32 0) }, section "___ksymtab+snd_ecards_limit", align 8
@.str = private unnamed_addr constant [12 x i8] c"snd-card-%i\00", align 1
@__kstrtab_snd_request_card = internal constant [17 x i8] c"snd_request_card\00", section "__ksymtab_strings", align 1
@__ksymtab_snd_request_card = internal constant %struct.kernel_symbol { i64 ptrtoint (void (i32)* @snd_request_card to i64), i8* getelementptr inbounds ([17 x i8], [17 x i8]* @__kstrtab_snd_request_card, i32 0, i32 0) }, section "___ksymtab+snd_request_card", align 8
@sound_mutex = internal global %struct.mutex { %struct.atomic_t { i32 1 }, %struct.spinlock zeroinitializer, %struct.list_head { %struct.list_head* bitcast (i8* getelementptr (i8, i8* bitcast (%struct.mutex* @sound_mutex to i8*), i64 8) to %struct.list_head*), %struct.list_head* bitcast (i8* getelementptr (i8, i8* bitcast (%struct.mutex* @sound_mutex to i8*), i64 8) to %struct.list_head*) }, %struct.task_struct* null, i8* null }, align 8
@snd_minors = internal global [256 x %struct.snd_minor*] zeroinitializer, align 16
@__kstrtab_snd_lookup_minor_data = internal constant [22 x i8] c"snd_lookup_minor_data\00", section "__ksymtab_strings", align 1
@__ksymtab_snd_lookup_minor_data = internal constant %struct.kernel_symbol { i64 ptrtoint (i8* (i32, i32)* @snd_lookup_minor_data to i64), i8* getelementptr inbounds ([22 x i8], [22 x i8]* @__kstrtab_snd_lookup_minor_data, i32 0, i32 0) }, section "___ksymtab+snd_lookup_minor_data", align 8
@sound_class = external global %struct.class*, align 8
@.str.1 = private unnamed_addr constant [3 x i8] c"%s\00", align 1
@__kstrtab_snd_register_device_for_dev = internal constant [28 x i8] c"snd_register_device_for_dev\00", section "__ksymtab_strings", align 1
@__ksymtab_snd_register_device_for_dev = internal constant %struct.kernel_symbol { i64 ptrtoint (i32 (i32, %struct.snd_card*, i32, %struct.file_operations*, i8*, i8*, %struct.device*)* @snd_register_device_for_dev to i64), i8* getelementptr inbounds ([28 x i8], [28 x i8]* @__kstrtab_snd_register_device_for_dev, i32 0, i32 0) }, section "___ksymtab+snd_register_device_for_dev", align 8
@__kstrtab_snd_unregister_device = internal constant [22 x i8] c"snd_unregister_device\00", section "__ksymtab_strings", align 1
@__ksymtab_snd_unregister_device = internal constant %struct.kernel_symbol { i64 ptrtoint (i32 (i32, %struct.snd_card*, i32)* @snd_unregister_device to i64), i8* getelementptr inbounds ([22 x i8], [22 x i8]* @__kstrtab_snd_unregister_device, i32 0, i32 0) }, section "___ksymtab+snd_unregister_device", align 8
@__kstrtab_snd_add_device_sysfs_file = internal constant [26 x i8] c"snd_add_device_sysfs_file\00", section "__ksymtab_strings", align 1
@__ksymtab_snd_add_device_sysfs_file = internal constant %struct.kernel_symbol { i64 ptrtoint (i32 (i32, %struct.snd_card*, i32, %struct.device_attribute*)* @snd_add_device_sysfs_file to i64), i8* getelementptr inbounds ([26 x i8], [26 x i8]* @__kstrtab_snd_add_device_sysfs_file, i32 0, i32 0) }, section "___ksymtab+snd_add_device_sysfs_file", align 8
@.str.2 = private unnamed_addr constant [8 x i8] c"devices\00", align 1
@snd_minor_info_entry = internal global %struct.snd_info_entry* null, align 8
@.str.3 = private unnamed_addr constant [5 x i8] c"alsa\00", align 1
@__initcall_alsa_sound_init4 = internal global i32 ()* @alsa_sound_init, section ".initcall4.init", align 8
@__exitcall_alsa_sound_exit = internal global void ()* @alsa_sound_exit, section ".exitcall.exit", align 8
@smp_ops = external global %struct.smp_ops, align 8
@.str.4 = private unnamed_addr constant [20 x i8] c"%3i: [%2i-%2i]: %s\0A\00", align 1
@.str.5 = private unnamed_addr constant [19 x i8] c"%3i: [%2i]   : %s\0A\00", align 1
@.str.6 = private unnamed_addr constant [18 x i8] c"%3i:        : %s\0A\00", align 1
@.str.7 = private unnamed_addr constant [8 x i8] c"control\00", align 1
@.str.8 = private unnamed_addr constant [19 x i8] c"hardware dependent\00", align 1
@.str.9 = private unnamed_addr constant [9 x i8] c"raw midi\00", align 1
@.str.10 = private unnamed_addr constant [23 x i8] c"digital audio playback\00", align 1
@.str.11 = private unnamed_addr constant [22 x i8] c"digital audio capture\00", align 1
@.str.12 = private unnamed_addr constant [10 x i8] c"sequencer\00", align 1
@.str.13 = private unnamed_addr constant [6 x i8] c"timer\00", align 1
@.str.14 = private unnamed_addr constant [2 x i8] c"?\00", align 1
@snd_fops = internal constant %struct.file_operations { %struct.module* null, i64 (%struct.file*, i64, i32)* @noop_llseek, i64 (%struct.file*, i8*, i64, i64*)* null, i64 (%struct.file*, i8*, i64, i64*)* null, i64 (%struct.kiocb*, %struct.iovec*, i64, i64)* null, i64 (%struct.kiocb*, %struct.iovec*, i64, i64)* null, i32 (%struct.file*, i8*, i32 (i8*, i8*, i32, i64, i64, i32)*)* null, i32 (%struct.file*, %struct.poll_table_struct*)* null, i64 (%struct.file*, i32, i64)* null, i64 (%struct.file*, i32, i64)* null, i32 (%struct.file*, %struct.vm_area_struct*)* null, i32 (%struct.inode*, %struct.file*)* @snd_open, i32 (%struct.file*, %struct.files_struct*)* null, i32 (%struct.inode*, %struct.file*)* null, i32 (%struct.file*, i64, i64, i32)* null, i32 (%struct.kiocb*, i32)* null, i32 (i32, %struct.file*, i32)* null, i32 (%struct.file*, i32, %struct.file_lock*)* null, i64 (%struct.file*, %struct.page*, i32, i64, i64*, i32)* null, i64 (%struct.file*, i64, i64, i64, i64)* null, i32 (i32)* null, i32 (%struct.file*, i32, %struct.file_lock*)* null, i64 (%struct.pipe_inode_info*, %struct.file*, i64*, i64, i32)* null, i64 (%struct.file*, i64*, %struct.pipe_inode_info*, i64, i32)* null, i32 (%struct.file*, i64, %struct.file_lock**)* null, i64 (%struct.file*, i32, i64, i64)* null, i32 (%struct.seq_file*, %struct.file*)* null }, align 8
@.str.15 = private unnamed_addr constant [52 x i8] c"\013unable to register native major device number %d\0A\00", align 1
@.str.16 = private unnamed_addr constant [57 x i8] c"\016Advanced Linux Sound Architecture Driver Initialized.\0A\00", align 1
@snd_cards = external global [32 x %struct.snd_card*], align 16
@.str.17 = private unnamed_addr constant [8 x i8] c"snd-seq\00", align 1
@.str.18 = private unnamed_addr constant [10 x i8] c"snd-timer\00", align 1
@llvm.used = appending global [13 x i8*] [i8* bitcast (%struct.kernel_symbol* @__ksymtab_snd_major to i8*), i8* bitcast (%struct.kernel_param* @__param_major to i8*), i8* bitcast (%struct.kernel_param* @__param_cards_limit to i8*), i8* bitcast (%struct.kernel_symbol* @__ksymtab_snd_ecards_limit to i8*), i8* bitcast (%struct.kernel_symbol* @__ksymtab_snd_request_card to i8*), i8* bitcast (%struct.kernel_symbol* @__ksymtab_snd_lookup_minor_data to i8*), i8* bitcast (%struct.kernel_symbol* @__ksymtab_snd_register_device_for_dev to i8*), i8* bitcast (%struct.kernel_symbol* @__ksymtab_snd_unregister_device to i8*), i8* bitcast (%struct.kernel_symbol* @__ksymtab_snd_add_device_sysfs_file to i8*), i8* bitcast (i32 ()* @snd_minor_info_done to i8*), i8* bitcast (void ()* @alsa_sound_exit to i8*), i8* bitcast (i32 ()** @__initcall_alsa_sound_init4 to i8*), i8* bitcast (void ()** @__exitcall_alsa_sound_exit to i8*)], section "llvm.metadata"

; Function Attrs: noinline nounwind optnone uwtable
define internal void @smp_send_stop() #0 {
entry:
  %0 = load void (i32)*, void (i32)** getelementptr inbounds (%struct.smp_ops, %struct.smp_ops* @smp_ops, i32 0, i32 3), align 8
  call void %0(i32 0)
  ret void
}

; Function Attrs: noinline nounwind optnone uwtable
define internal void @smp_send_reschedule(i32 %cpu) #0 {
entry:
  %cpu.addr = alloca i32, align 4
  store i32 %cpu, i32* %cpu.addr, align 4
  %0 = load void (i32)*, void (i32)** getelementptr inbounds (%struct.smp_ops, %struct.smp_ops* @smp_ops, i32 0, i32 4), align 8
  %1 = load i32, i32* %cpu.addr, align 4
  call void %0(i32 %1)
  ret void
}

; Function Attrs: noinline nounwind optnone uwtable
define internal void @smp_prepare_cpus(i32 %max_cpus) #0 {
entry:
  %max_cpus.addr = alloca i32, align 4
  store i32 %max_cpus, i32* %max_cpus.addr, align 4
  %0 = load void (i32)*, void (i32)** getelementptr inbounds (%struct.smp_ops, %struct.smp_ops* @smp_ops, i32 0, i32 1), align 8
  %1 = load i32, i32* %max_cpus.addr, align 4
  call void %0(i32 %1)
  ret void
}

; Function Attrs: noinline nounwind optnone uwtable
define internal i32 @__cpu_up(i32 %cpu, %struct.task_struct* %tidle) #0 {
entry:
  %cpu.addr = alloca i32, align 4
  %tidle.addr = alloca %struct.task_struct*, align 8
  store i32 %cpu, i32* %cpu.addr, align 4
  store %struct.task_struct* %tidle, %struct.task_struct** %tidle.addr, align 8
  %0 = load i32 (i32, %struct.task_struct*)*, i32 (i32, %struct.task_struct*)** getelementptr inbounds (%struct.smp_ops, %struct.smp_ops* @smp_ops, i32 0, i32 5), align 8
  %1 = load i32, i32* %cpu.addr, align 4
  %2 = load %struct.task_struct*, %struct.task_struct** %tidle.addr, align 8
  %call = call i32 %0(i32 %1, %struct.task_struct* %2)
  ret i32 %call
}

; Function Attrs: noinline nounwind optnone uwtable
define internal void @smp_cpus_done(i32 %max_cpus) #0 {
entry:
  %max_cpus.addr = alloca i32, align 4
  store i32 %max_cpus, i32* %max_cpus.addr, align 4
  %0 = load void (i32)*, void (i32)** getelementptr inbounds (%struct.smp_ops, %struct.smp_ops* @smp_ops, i32 0, i32 2), align 8
  %1 = load i32, i32* %max_cpus.addr, align 4
  call void %0(i32 %1)
  ret void
}

; Function Attrs: noinline nounwind optnone uwtable
define internal void @smp_prepare_boot_cpu() #0 {
entry:
  %0 = load void ()*, void ()** getelementptr inbounds (%struct.smp_ops, %struct.smp_ops* @smp_ops, i32 0, i32 0), align 8
  call void %0()
  ret void
}

; Function Attrs: noinline nounwind optnone uwtable
define void @snd_request_card(i32 %card) #0 {
entry:
  %card.addr = alloca i32, align 4
  store i32 %card, i32* %card.addr, align 4
  %0 = load i32, i32* %card.addr, align 4
  %call = call i32 @snd_card_locked(i32 %0)
  %tobool = icmp ne i32 %call, 0
  br i1 %tobool, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  br label %return

if.end:                                           ; preds = %entry
  %1 = load i32, i32* %card.addr, align 4
  %cmp = icmp slt i32 %1, 0
  br i1 %cmp, label %if.then2, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %if.end
  %2 = load i32, i32* %card.addr, align 4
  %3 = load i32, i32* @cards_limit, align 4
  %cmp1 = icmp sge i32 %2, %3
  br i1 %cmp1, label %if.then2, label %if.end3

if.then2:                                         ; preds = %lor.lhs.false, %if.end
  br label %return

if.end3:                                          ; preds = %lor.lhs.false
  %4 = load i32, i32* %card.addr, align 4
  %call4 = call i32 (i1, i8*, ...) @__request_module(i1 zeroext true, i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str, i32 0, i32 0), i32 %4)
  br label %return

return:                                           ; preds = %if.end3, %if.then2, %if.then
  ret void
}

declare i32 @snd_card_locked(i32) #1

declare i32 @__request_module(i1 zeroext, i8*, ...) #1

; Function Attrs: noinline nounwind optnone uwtable
define i8* @snd_lookup_minor_data(i32 %minor, i32 %type) #0 {
entry:
  %retval = alloca i8*, align 8
  %minor.addr = alloca i32, align 4
  %type.addr = alloca i32, align 4
  %mreg = alloca %struct.snd_minor*, align 8
  %private_data = alloca i8*, align 8
  store i32 %minor, i32* %minor.addr, align 4
  store i32 %type, i32* %type.addr, align 4
  %0 = load i32, i32* %minor.addr, align 4
  %conv = zext i32 %0 to i64
  %cmp = icmp uge i64 %conv, 256
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  store i8* null, i8** %retval, align 8
  br label %return

if.end:                                           ; preds = %entry
  call void @mutex_lock(%struct.mutex* @sound_mutex)
  %1 = load i32, i32* %minor.addr, align 4
  %idxprom = zext i32 %1 to i64
  %arrayidx = getelementptr inbounds [256 x %struct.snd_minor*], [256 x %struct.snd_minor*]* @snd_minors, i64 0, i64 %idxprom
  %2 = load %struct.snd_minor*, %struct.snd_minor** %arrayidx, align 8
  store %struct.snd_minor* %2, %struct.snd_minor** %mreg, align 8
  %3 = load %struct.snd_minor*, %struct.snd_minor** %mreg, align 8
  %tobool = icmp ne %struct.snd_minor* %3, null
  br i1 %tobool, label %land.lhs.true, label %if.else

land.lhs.true:                                    ; preds = %if.end
  %4 = load %struct.snd_minor*, %struct.snd_minor** %mreg, align 8
  %type2 = getelementptr inbounds %struct.snd_minor, %struct.snd_minor* %4, i32 0, i32 0
  %5 = load i32, i32* %type2, align 8
  %6 = load i32, i32* %type.addr, align 4
  %cmp3 = icmp eq i32 %5, %6
  br i1 %cmp3, label %if.then5, label %if.else

if.then5:                                         ; preds = %land.lhs.true
  %7 = load %struct.snd_minor*, %struct.snd_minor** %mreg, align 8
  %private_data6 = getelementptr inbounds %struct.snd_minor, %struct.snd_minor* %7, i32 0, i32 4
  %8 = load i8*, i8** %private_data6, align 8
  store i8* %8, i8** %private_data, align 8
  %9 = load i8*, i8** %private_data, align 8
  %tobool7 = icmp ne i8* %9, null
  br i1 %tobool7, label %land.lhs.true8, label %if.end12

land.lhs.true8:                                   ; preds = %if.then5
  %10 = load %struct.snd_minor*, %struct.snd_minor** %mreg, align 8
  %card_ptr = getelementptr inbounds %struct.snd_minor, %struct.snd_minor* %10, i32 0, i32 6
  %11 = load %struct.snd_card*, %struct.snd_card** %card_ptr, align 8
  %tobool9 = icmp ne %struct.snd_card* %11, null
  br i1 %tobool9, label %if.then10, label %if.end12

if.then10:                                        ; preds = %land.lhs.true8
  %12 = load %struct.snd_minor*, %struct.snd_minor** %mreg, align 8
  %card_ptr11 = getelementptr inbounds %struct.snd_minor, %struct.snd_minor* %12, i32 0, i32 6
  %13 = load %struct.snd_card*, %struct.snd_card** %card_ptr11, align 8
  %refcount = getelementptr inbounds %struct.snd_card, %struct.snd_card* %13, i32 0, i32 27
  call void @atomic_inc(%struct.atomic_t* %refcount)
  br label %if.end12

if.end12:                                         ; preds = %if.then10, %land.lhs.true8, %if.then5
  br label %if.end13

if.else:                                          ; preds = %land.lhs.true, %if.end
  store i8* null, i8** %private_data, align 8
  br label %if.end13

if.end13:                                         ; preds = %if.else, %if.end12
  call void @mutex_unlock(%struct.mutex* @sound_mutex)
  %14 = load i8*, i8** %private_data, align 8
  store i8* %14, i8** %retval, align 8
  br label %return

return:                                           ; preds = %if.end13, %if.then
  %15 = load i8*, i8** %retval, align 8
  ret i8* %15
}

declare void @mutex_lock(%struct.mutex*) #1

; Function Attrs: noinline nounwind optnone uwtable
define internal void @atomic_inc(%struct.atomic_t* %v) #0 {
entry:
  %v.addr = alloca %struct.atomic_t*, align 8
  store %struct.atomic_t* %v, %struct.atomic_t** %v.addr, align 8
  %0 = load %struct.atomic_t*, %struct.atomic_t** %v.addr, align 8
  %counter = getelementptr inbounds %struct.atomic_t, %struct.atomic_t* %0, i32 0, i32 0
  call void asm sideeffect ".pushsection .smp_locks,\22a\22\0A.balign 4\0A.long 671f - .\0A.popsection\0A671:\0A\09lock; incl $0", "=*m,*m,~{dirflag},~{fpsr},~{flags}"(i32* %counter, i32* %counter) #2, !srcloc !2
  ret void
}

declare void @mutex_unlock(%struct.mutex*) #1

; Function Attrs: noinline nounwind optnone uwtable
define i32 @snd_register_device_for_dev(i32 %type, %struct.snd_card* %card, i32 %dev, %struct.file_operations* %f_ops, i8* %private_data, i8* %name, %struct.device* %device) #0 {
entry:
  %size.addr.i = alloca i64, align 8
  %flags.addr.i = alloca i32, align 4
  %retval = alloca i32, align 4
  %type.addr = alloca i32, align 4
  %card.addr = alloca %struct.snd_card*, align 8
  %dev.addr = alloca i32, align 4
  %f_ops.addr = alloca %struct.file_operations*, align 8
  %private_data.addr = alloca i8*, align 8
  %name.addr = alloca i8*, align 8
  %device.addr = alloca %struct.device*, align 8
  %minor = alloca i32, align 4
  %preg = alloca %struct.snd_minor*, align 8
  %__ret_warn_on = alloca i32, align 4
  %tmp = alloca i64, align 8
  store i32 %type, i32* %type.addr, align 4
  store %struct.snd_card* %card, %struct.snd_card** %card.addr, align 8
  store i32 %dev, i32* %dev.addr, align 4
  store %struct.file_operations* %f_ops, %struct.file_operations** %f_ops.addr, align 8
  store i8* %private_data, i8** %private_data.addr, align 8
  store i8* %name, i8** %name.addr, align 8
  store %struct.device* %device, %struct.device** %device.addr, align 8
  %0 = load i8*, i8** %name.addr, align 8
  %tobool = icmp ne i8* %0, null
  %lnot = xor i1 %tobool, true
  %lnot1 = xor i1 %lnot, true
  %lnot2 = xor i1 %lnot1, true
  %lnot.ext = zext i1 %lnot2 to i32
  store i32 %lnot.ext, i32* %__ret_warn_on, align 4
  %1 = load i32, i32* %__ret_warn_on, align 4
  %tobool3 = icmp ne i32 %1, 0
  %lnot4 = xor i1 %tobool3, true
  %lnot6 = xor i1 %lnot4, true
  %lnot.ext7 = zext i1 %lnot6 to i32
  %conv = sext i32 %lnot.ext7 to i64
  store i64 %conv, i64* %tmp, align 8
  %2 = load i64, i64* %tmp, align 8
  %tobool8 = icmp ne i64 %2, 0
  br i1 %tobool8, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  store i32 -22, i32* %retval, align 4
  br label %return

if.end:                                           ; preds = %entry
  store i64 48, i64* %size.addr.i, align 8
  store i32 208, i32* %flags.addr.i, align 4
  %3 = load i64, i64* %size.addr.i, align 8
  %4 = load i32, i32* %flags.addr.i, align 4
  %call.i = call i8* @__kmalloc(i64 %3, i32 %4) #2
  %5 = bitcast i8* %call.i to %struct.snd_minor*
  store %struct.snd_minor* %5, %struct.snd_minor** %preg, align 8
  %6 = load %struct.snd_minor*, %struct.snd_minor** %preg, align 8
  %cmp = icmp eq %struct.snd_minor* %6, null
  br i1 %cmp, label %if.then10, label %if.end11

if.then10:                                        ; preds = %if.end
  store i32 -12, i32* %retval, align 4
  br label %return

if.end11:                                         ; preds = %if.end
  %7 = load i32, i32* %type.addr, align 4
  %8 = load %struct.snd_minor*, %struct.snd_minor** %preg, align 8
  %type12 = getelementptr inbounds %struct.snd_minor, %struct.snd_minor* %8, i32 0, i32 0
  store i32 %7, i32* %type12, align 8
  %9 = load %struct.snd_card*, %struct.snd_card** %card.addr, align 8
  %tobool13 = icmp ne %struct.snd_card* %9, null
  br i1 %tobool13, label %cond.true, label %cond.false

cond.true:                                        ; preds = %if.end11
  %10 = load %struct.snd_card*, %struct.snd_card** %card.addr, align 8
  %number = getelementptr inbounds %struct.snd_card, %struct.snd_card* %10, i32 0, i32 0
  %11 = load i32, i32* %number, align 8
  br label %cond.end

cond.false:                                       ; preds = %if.end11
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ %11, %cond.true ], [ -1, %cond.false ]
  %12 = load %struct.snd_minor*, %struct.snd_minor** %preg, align 8
  %card14 = getelementptr inbounds %struct.snd_minor, %struct.snd_minor* %12, i32 0, i32 1
  store i32 %cond, i32* %card14, align 4
  %13 = load i32, i32* %dev.addr, align 4
  %14 = load %struct.snd_minor*, %struct.snd_minor** %preg, align 8
  %device15 = getelementptr inbounds %struct.snd_minor, %struct.snd_minor* %14, i32 0, i32 2
  store i32 %13, i32* %device15, align 8
  %15 = load %struct.file_operations*, %struct.file_operations** %f_ops.addr, align 8
  %16 = load %struct.snd_minor*, %struct.snd_minor** %preg, align 8
  %f_ops16 = getelementptr inbounds %struct.snd_minor, %struct.snd_minor* %16, i32 0, i32 3
  store %struct.file_operations* %15, %struct.file_operations** %f_ops16, align 8
  %17 = load i8*, i8** %private_data.addr, align 8
  %18 = load %struct.snd_minor*, %struct.snd_minor** %preg, align 8
  %private_data17 = getelementptr inbounds %struct.snd_minor, %struct.snd_minor* %18, i32 0, i32 4
  store i8* %17, i8** %private_data17, align 8
  %19 = load %struct.snd_card*, %struct.snd_card** %card.addr, align 8
  %20 = load %struct.snd_minor*, %struct.snd_minor** %preg, align 8
  %card_ptr = getelementptr inbounds %struct.snd_minor, %struct.snd_minor* %20, i32 0, i32 6
  store %struct.snd_card* %19, %struct.snd_card** %card_ptr, align 8
  call void @mutex_lock(%struct.mutex* @sound_mutex)
  %21 = load i32, i32* %type.addr, align 4
  %call18 = call i32 @snd_find_free_minor(i32 %21)
  store i32 %call18, i32* %minor, align 4
  %22 = load i32, i32* %minor, align 4
  %cmp19 = icmp slt i32 %22, 0
  br i1 %cmp19, label %if.then21, label %if.end22

if.then21:                                        ; preds = %cond.end
  call void @mutex_unlock(%struct.mutex* @sound_mutex)
  %23 = load %struct.snd_minor*, %struct.snd_minor** %preg, align 8
  %24 = bitcast %struct.snd_minor* %23 to i8*
  call void @kfree(i8* %24)
  %25 = load i32, i32* %minor, align 4
  store i32 %25, i32* %retval, align 4
  br label %return

if.end22:                                         ; preds = %cond.end
  %26 = load %struct.snd_minor*, %struct.snd_minor** %preg, align 8
  %27 = load i32, i32* %minor, align 4
  %idxprom = sext i32 %27 to i64
  %arrayidx = getelementptr inbounds [256 x %struct.snd_minor*], [256 x %struct.snd_minor*]* @snd_minors, i64 0, i64 %idxprom
  store %struct.snd_minor* %26, %struct.snd_minor** %arrayidx, align 8
  %28 = load %struct.class*, %struct.class** @sound_class, align 8
  %29 = load %struct.device*, %struct.device** %device.addr, align 8
  %30 = load i32, i32* @major, align 4
  %shl = shl i32 %30, 20
  %31 = load i32, i32* %minor, align 4
  %or = or i32 %shl, %31
  %32 = load i8*, i8** %private_data.addr, align 8
  %33 = load i8*, i8** %name.addr, align 8
  %call23 = call %struct.device* (%struct.class*, %struct.device*, i32, i8*, i8*, ...) @device_create(%struct.class* %28, %struct.device* %29, i32 %or, i8* %32, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.1, i32 0, i32 0), i8* %33)
  %34 = load %struct.snd_minor*, %struct.snd_minor** %preg, align 8
  %dev24 = getelementptr inbounds %struct.snd_minor, %struct.snd_minor* %34, i32 0, i32 5
  store %struct.device* %call23, %struct.device** %dev24, align 8
  %35 = load %struct.snd_minor*, %struct.snd_minor** %preg, align 8
  %dev25 = getelementptr inbounds %struct.snd_minor, %struct.snd_minor* %35, i32 0, i32 5
  %36 = load %struct.device*, %struct.device** %dev25, align 8
  %37 = bitcast %struct.device* %36 to i8*
  %call26 = call i64 @IS_ERR(i8* %37)
  %tobool27 = icmp ne i64 %call26, 0
  br i1 %tobool27, label %if.then28, label %if.end34

if.then28:                                        ; preds = %if.end22
  %38 = load i32, i32* %minor, align 4
  %idxprom29 = sext i32 %38 to i64
  %arrayidx30 = getelementptr inbounds [256 x %struct.snd_minor*], [256 x %struct.snd_minor*]* @snd_minors, i64 0, i64 %idxprom29
  store %struct.snd_minor* null, %struct.snd_minor** %arrayidx30, align 8
  call void @mutex_unlock(%struct.mutex* @sound_mutex)
  %39 = load %struct.snd_minor*, %struct.snd_minor** %preg, align 8
  %dev31 = getelementptr inbounds %struct.snd_minor, %struct.snd_minor* %39, i32 0, i32 5
  %40 = load %struct.device*, %struct.device** %dev31, align 8
  %41 = bitcast %struct.device* %40 to i8*
  %call32 = call i64 @PTR_ERR(i8* %41)
  %conv33 = trunc i64 %call32 to i32
  store i32 %conv33, i32* %minor, align 4
  %42 = load %struct.snd_minor*, %struct.snd_minor** %preg, align 8
  %43 = bitcast %struct.snd_minor* %42 to i8*
  call void @kfree(i8* %43)
  %44 = load i32, i32* %minor, align 4
  store i32 %44, i32* %retval, align 4
  br label %return

if.end34:                                         ; preds = %if.end22
  call void @mutex_unlock(%struct.mutex* @sound_mutex)
  store i32 0, i32* %retval, align 4
  br label %return

return:                                           ; preds = %if.end34, %if.then28, %if.then21, %if.then10, %if.then
  %45 = load i32, i32* %retval, align 4
  ret i32 %45
}

; Function Attrs: noinline nounwind optnone uwtable
define internal i32 @snd_find_free_minor(i32 %type) #0 {
entry:
  %retval = alloca i32, align 4
  %type.addr = alloca i32, align 4
  %minor = alloca i32, align 4
  store i32 %type, i32* %type.addr, align 4
  %0 = load i32, i32* %type.addr, align 4
  %cmp = icmp eq i32 %0, 1
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  store i32 1, i32* %retval, align 4
  br label %return

if.end:                                           ; preds = %entry
  %1 = load i32, i32* %type.addr, align 4
  %cmp1 = icmp eq i32 %1, 2
  br i1 %cmp1, label %if.then2, label %if.end3

if.then2:                                         ; preds = %if.end
  store i32 33, i32* %retval, align 4
  br label %return

if.end3:                                          ; preds = %if.end
  store i32 0, i32* %minor, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %if.end3
  %2 = load i32, i32* %minor, align 4
  %conv = sext i32 %2 to i64
  %cmp4 = icmp ult i64 %conv, 256
  br i1 %cmp4, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %3 = load i32, i32* %minor, align 4
  %and = and i32 %3, 31
  %cmp6 = icmp eq i32 %and, 0
  br i1 %cmp6, label %if.then8, label %if.end9

if.then8:                                         ; preds = %for.body
  br label %for.inc

if.end9:                                          ; preds = %for.body
  %4 = load i32, i32* %minor, align 4
  %cmp10 = icmp eq i32 %4, 1
  br i1 %cmp10, label %if.then14, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %if.end9
  %5 = load i32, i32* %minor, align 4
  %cmp12 = icmp eq i32 %5, 33
  br i1 %cmp12, label %if.then14, label %if.end15

if.then14:                                        ; preds = %lor.lhs.false, %if.end9
  br label %for.inc

if.end15:                                         ; preds = %lor.lhs.false
  %6 = load i32, i32* %minor, align 4
  %idxprom = sext i32 %6 to i64
  %arrayidx = getelementptr inbounds [256 x %struct.snd_minor*], [256 x %struct.snd_minor*]* @snd_minors, i64 0, i64 %idxprom
  %7 = load %struct.snd_minor*, %struct.snd_minor** %arrayidx, align 8
  %tobool = icmp ne %struct.snd_minor* %7, null
  br i1 %tobool, label %if.end17, label %if.then16

if.then16:                                        ; preds = %if.end15
  %8 = load i32, i32* %minor, align 4
  store i32 %8, i32* %retval, align 4
  br label %return

if.end17:                                         ; preds = %if.end15
  br label %for.inc

for.inc:                                          ; preds = %if.end17, %if.then14, %if.then8
  %9 = load i32, i32* %minor, align 4
  %inc = add nsw i32 %9, 1
  store i32 %inc, i32* %minor, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  store i32 -16, i32* %retval, align 4
  br label %return

return:                                           ; preds = %for.end, %if.then16, %if.then2, %if.then
  %10 = load i32, i32* %retval, align 4
  ret i32 %10
}

declare void @kfree(i8*) #1

declare %struct.device* @device_create(%struct.class*, %struct.device*, i32, i8*, i8*, ...) #1

; Function Attrs: noinline nounwind optnone uwtable
define internal i64 @IS_ERR(i8* %ptr) #0 {
entry:
  %ptr.addr = alloca i8*, align 8
  store i8* %ptr, i8** %ptr.addr, align 8
  %0 = load i8*, i8** %ptr.addr, align 8
  %1 = ptrtoint i8* %0 to i64
  %cmp = icmp uge i64 %1, -4095
  %lnot = xor i1 %cmp, true
  %lnot1 = xor i1 %lnot, true
  %lnot.ext = zext i1 %lnot1 to i32
  %conv = sext i32 %lnot.ext to i64
  ret i64 %conv
}

; Function Attrs: noinline nounwind optnone uwtable
define internal i64 @PTR_ERR(i8* %ptr) #0 {
entry:
  %ptr.addr = alloca i8*, align 8
  store i8* %ptr, i8** %ptr.addr, align 8
  %0 = load i8*, i8** %ptr.addr, align 8
  %1 = ptrtoint i8* %0 to i64
  ret i64 %1
}

; Function Attrs: noinline nounwind optnone uwtable
define i32 @snd_unregister_device(i32 %type, %struct.snd_card* %card, i32 %dev) #0 {
entry:
  %retval = alloca i32, align 4
  %type.addr = alloca i32, align 4
  %card.addr = alloca %struct.snd_card*, align 8
  %dev.addr = alloca i32, align 4
  %minor = alloca i32, align 4
  store i32 %type, i32* %type.addr, align 4
  store %struct.snd_card* %card, %struct.snd_card** %card.addr, align 8
  store i32 %dev, i32* %dev.addr, align 4
  call void @mutex_lock(%struct.mutex* @sound_mutex)
  %0 = load i32, i32* %type.addr, align 4
  %1 = load %struct.snd_card*, %struct.snd_card** %card.addr, align 8
  %2 = load i32, i32* %dev.addr, align 4
  %call = call i32 @find_snd_minor(i32 %0, %struct.snd_card* %1, i32 %2)
  store i32 %call, i32* %minor, align 4
  %3 = load i32, i32* %minor, align 4
  %cmp = icmp slt i32 %3, 0
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  call void @mutex_unlock(%struct.mutex* @sound_mutex)
  store i32 -22, i32* %retval, align 4
  br label %return

if.end:                                           ; preds = %entry
  %4 = load %struct.class*, %struct.class** @sound_class, align 8
  %5 = load i32, i32* @major, align 4
  %shl = shl i32 %5, 20
  %6 = load i32, i32* %minor, align 4
  %or = or i32 %shl, %6
  call void @device_destroy(%struct.class* %4, i32 %or)
  %7 = load i32, i32* %minor, align 4
  %idxprom = sext i32 %7 to i64
  %arrayidx = getelementptr inbounds [256 x %struct.snd_minor*], [256 x %struct.snd_minor*]* @snd_minors, i64 0, i64 %idxprom
  %8 = load %struct.snd_minor*, %struct.snd_minor** %arrayidx, align 8
  %9 = bitcast %struct.snd_minor* %8 to i8*
  call void @kfree(i8* %9)
  %10 = load i32, i32* %minor, align 4
  %idxprom1 = sext i32 %10 to i64
  %arrayidx2 = getelementptr inbounds [256 x %struct.snd_minor*], [256 x %struct.snd_minor*]* @snd_minors, i64 0, i64 %idxprom1
  store %struct.snd_minor* null, %struct.snd_minor** %arrayidx2, align 8
  call void @mutex_unlock(%struct.mutex* @sound_mutex)
  store i32 0, i32* %retval, align 4
  br label %return

return:                                           ; preds = %if.end, %if.then
  %11 = load i32, i32* %retval, align 4
  ret i32 %11
}

; Function Attrs: noinline nounwind optnone uwtable
define internal i32 @find_snd_minor(i32 %type, %struct.snd_card* %card, i32 %dev) #0 {
entry:
  %retval = alloca i32, align 4
  %type.addr = alloca i32, align 4
  %card.addr = alloca %struct.snd_card*, align 8
  %dev.addr = alloca i32, align 4
  %cardnum = alloca i32, align 4
  %minor = alloca i32, align 4
  %mptr = alloca %struct.snd_minor*, align 8
  store i32 %type, i32* %type.addr, align 4
  store %struct.snd_card* %card, %struct.snd_card** %card.addr, align 8
  store i32 %dev, i32* %dev.addr, align 4
  %0 = load %struct.snd_card*, %struct.snd_card** %card.addr, align 8
  %tobool = icmp ne %struct.snd_card* %0, null
  br i1 %tobool, label %cond.true, label %cond.false

cond.true:                                        ; preds = %entry
  %1 = load %struct.snd_card*, %struct.snd_card** %card.addr, align 8
  %number = getelementptr inbounds %struct.snd_card, %struct.snd_card* %1, i32 0, i32 0
  %2 = load i32, i32* %number, align 8
  br label %cond.end

cond.false:                                       ; preds = %entry
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ %2, %cond.true ], [ -1, %cond.false ]
  store i32 %cond, i32* %cardnum, align 4
  store i32 0, i32* %minor, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %cond.end
  %3 = load i32, i32* %minor, align 4
  %conv = sext i32 %3 to i64
  %cmp = icmp ult i64 %conv, 256
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %4 = load i32, i32* %minor, align 4
  %idxprom = sext i32 %4 to i64
  %arrayidx = getelementptr inbounds [256 x %struct.snd_minor*], [256 x %struct.snd_minor*]* @snd_minors, i64 0, i64 %idxprom
  %5 = load %struct.snd_minor*, %struct.snd_minor** %arrayidx, align 8
  store %struct.snd_minor* %5, %struct.snd_minor** %mptr, align 8
  %cmp2 = icmp ne %struct.snd_minor* %5, null
  br i1 %cmp2, label %land.lhs.true, label %if.end

land.lhs.true:                                    ; preds = %for.body
  %6 = load %struct.snd_minor*, %struct.snd_minor** %mptr, align 8
  %type4 = getelementptr inbounds %struct.snd_minor, %struct.snd_minor* %6, i32 0, i32 0
  %7 = load i32, i32* %type4, align 8
  %8 = load i32, i32* %type.addr, align 4
  %cmp5 = icmp eq i32 %7, %8
  br i1 %cmp5, label %land.lhs.true7, label %if.end

land.lhs.true7:                                   ; preds = %land.lhs.true
  %9 = load %struct.snd_minor*, %struct.snd_minor** %mptr, align 8
  %card8 = getelementptr inbounds %struct.snd_minor, %struct.snd_minor* %9, i32 0, i32 1
  %10 = load i32, i32* %card8, align 4
  %11 = load i32, i32* %cardnum, align 4
  %cmp9 = icmp eq i32 %10, %11
  br i1 %cmp9, label %land.lhs.true11, label %if.end

land.lhs.true11:                                  ; preds = %land.lhs.true7
  %12 = load %struct.snd_minor*, %struct.snd_minor** %mptr, align 8
  %device = getelementptr inbounds %struct.snd_minor, %struct.snd_minor* %12, i32 0, i32 2
  %13 = load i32, i32* %device, align 8
  %14 = load i32, i32* %dev.addr, align 4
  %cmp12 = icmp eq i32 %13, %14
  br i1 %cmp12, label %if.then, label %if.end

if.then:                                          ; preds = %land.lhs.true11
  %15 = load i32, i32* %minor, align 4
  store i32 %15, i32* %retval, align 4
  br label %return

if.end:                                           ; preds = %land.lhs.true11, %land.lhs.true7, %land.lhs.true, %for.body
  br label %for.inc

for.inc:                                          ; preds = %if.end
  %16 = load i32, i32* %minor, align 4
  %inc = add nsw i32 %16, 1
  store i32 %inc, i32* %minor, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  store i32 -1, i32* %retval, align 4
  br label %return

return:                                           ; preds = %for.end, %if.then
  %17 = load i32, i32* %retval, align 4
  ret i32 %17
}

declare void @device_destroy(%struct.class*, i32) #1

; Function Attrs: noinline nounwind optnone uwtable
define i32 @snd_add_device_sysfs_file(i32 %type, %struct.snd_card* %card, i32 %dev, %struct.device_attribute* %attr) #0 {
entry:
  %type.addr = alloca i32, align 4
  %card.addr = alloca %struct.snd_card*, align 8
  %dev.addr = alloca i32, align 4
  %attr.addr = alloca %struct.device_attribute*, align 8
  %minor = alloca i32, align 4
  %ret = alloca i32, align 4
  %d = alloca %struct.device*, align 8
  store i32 %type, i32* %type.addr, align 4
  store %struct.snd_card* %card, %struct.snd_card** %card.addr, align 8
  store i32 %dev, i32* %dev.addr, align 4
  store %struct.device_attribute* %attr, %struct.device_attribute** %attr.addr, align 8
  store i32 -22, i32* %ret, align 4
  call void @mutex_lock(%struct.mutex* @sound_mutex)
  %0 = load i32, i32* %type.addr, align 4
  %1 = load %struct.snd_card*, %struct.snd_card** %card.addr, align 8
  %2 = load i32, i32* %dev.addr, align 4
  %call = call i32 @find_snd_minor(i32 %0, %struct.snd_card* %1, i32 %2)
  store i32 %call, i32* %minor, align 4
  %3 = load i32, i32* %minor, align 4
  %cmp = icmp sge i32 %3, 0
  br i1 %cmp, label %land.lhs.true, label %if.end

land.lhs.true:                                    ; preds = %entry
  %4 = load i32, i32* %minor, align 4
  %idxprom = sext i32 %4 to i64
  %arrayidx = getelementptr inbounds [256 x %struct.snd_minor*], [256 x %struct.snd_minor*]* @snd_minors, i64 0, i64 %idxprom
  %5 = load %struct.snd_minor*, %struct.snd_minor** %arrayidx, align 8
  %dev1 = getelementptr inbounds %struct.snd_minor, %struct.snd_minor* %5, i32 0, i32 5
  %6 = load %struct.device*, %struct.device** %dev1, align 8
  store %struct.device* %6, %struct.device** %d, align 8
  %cmp2 = icmp ne %struct.device* %6, null
  br i1 %cmp2, label %if.then, label %if.end

if.then:                                          ; preds = %land.lhs.true
  %7 = load %struct.device*, %struct.device** %d, align 8
  %8 = load %struct.device_attribute*, %struct.device_attribute** %attr.addr, align 8
  %call3 = call i32 @device_create_file(%struct.device* %7, %struct.device_attribute* %8)
  store i32 %call3, i32* %ret, align 4
  br label %if.end

if.end:                                           ; preds = %if.then, %land.lhs.true, %entry
  call void @mutex_unlock(%struct.mutex* @sound_mutex)
  %9 = load i32, i32* %ret, align 4
  ret i32 %9
}

declare i32 @device_create_file(%struct.device*, %struct.device_attribute*) #1

; Function Attrs: noinline nounwind optnone uwtable
define i32 @snd_minor_info_init() #0 section ".init.text" {
entry:
  %entry1 = alloca %struct.snd_info_entry*, align 8
  %call = call %struct.snd_info_entry* @snd_info_create_module_entry(%struct.module* null, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.2, i32 0, i32 0), %struct.snd_info_entry* null)
  store %struct.snd_info_entry* %call, %struct.snd_info_entry** %entry1, align 8
  %0 = load %struct.snd_info_entry*, %struct.snd_info_entry** %entry1, align 8
  %tobool = icmp ne %struct.snd_info_entry* %0, null
  br i1 %tobool, label %if.then, label %if.end4

if.then:                                          ; preds = %entry
  %1 = load %struct.snd_info_entry*, %struct.snd_info_entry** %entry1, align 8
  %c = getelementptr inbounds %struct.snd_info_entry, %struct.snd_info_entry* %1, i32 0, i32 4
  %text = bitcast %union.anon.43* %c to %struct.snd_info_entry_text*
  %read = getelementptr inbounds %struct.snd_info_entry_text, %struct.snd_info_entry_text* %text, i32 0, i32 0
  store void (%struct.snd_info_entry*, %struct.snd_info_buffer*)* @snd_minor_info_read, void (%struct.snd_info_entry*, %struct.snd_info_buffer*)** %read, align 8
  %2 = load %struct.snd_info_entry*, %struct.snd_info_entry** %entry1, align 8
  %call2 = call i32 @snd_info_register(%struct.snd_info_entry* %2)
  %cmp = icmp slt i32 %call2, 0
  br i1 %cmp, label %if.then3, label %if.end

if.then3:                                         ; preds = %if.then
  %3 = load %struct.snd_info_entry*, %struct.snd_info_entry** %entry1, align 8
  call void @snd_info_free_entry(%struct.snd_info_entry* %3)
  store %struct.snd_info_entry* null, %struct.snd_info_entry** %entry1, align 8
  br label %if.end

if.end:                                           ; preds = %if.then3, %if.then
  br label %if.end4

if.end4:                                          ; preds = %if.end, %entry
  %4 = load %struct.snd_info_entry*, %struct.snd_info_entry** %entry1, align 8
  store %struct.snd_info_entry* %4, %struct.snd_info_entry** @snd_minor_info_entry, align 8
  ret i32 0
}

declare %struct.snd_info_entry* @snd_info_create_module_entry(%struct.module*, i8*, %struct.snd_info_entry*) #1

; Function Attrs: noinline nounwind optnone uwtable
define internal void @snd_minor_info_read(%struct.snd_info_entry* %entry1, %struct.snd_info_buffer* %buffer) #0 {
entry:
  %entry.addr = alloca %struct.snd_info_entry*, align 8
  %buffer.addr = alloca %struct.snd_info_buffer*, align 8
  %minor = alloca i32, align 4
  %mptr = alloca %struct.snd_minor*, align 8
  store %struct.snd_info_entry* %entry1, %struct.snd_info_entry** %entry.addr, align 8
  store %struct.snd_info_buffer* %buffer, %struct.snd_info_buffer** %buffer.addr, align 8
  call void @mutex_lock(%struct.mutex* @sound_mutex)
  store i32 0, i32* %minor, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %0 = load i32, i32* %minor, align 4
  %cmp = icmp slt i32 %0, 256
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %1 = load i32, i32* %minor, align 4
  %idxprom = sext i32 %1 to i64
  %arrayidx = getelementptr inbounds [256 x %struct.snd_minor*], [256 x %struct.snd_minor*]* @snd_minors, i64 0, i64 %idxprom
  %2 = load %struct.snd_minor*, %struct.snd_minor** %arrayidx, align 8
  store %struct.snd_minor* %2, %struct.snd_minor** %mptr, align 8
  %tobool = icmp ne %struct.snd_minor* %2, null
  br i1 %tobool, label %if.end, label %if.then

if.then:                                          ; preds = %for.body
  br label %for.inc

if.end:                                           ; preds = %for.body
  %3 = load %struct.snd_minor*, %struct.snd_minor** %mptr, align 8
  %card = getelementptr inbounds %struct.snd_minor, %struct.snd_minor* %3, i32 0, i32 1
  %4 = load i32, i32* %card, align 4
  %cmp2 = icmp sge i32 %4, 0
  br i1 %cmp2, label %if.then3, label %if.else14

if.then3:                                         ; preds = %if.end
  %5 = load %struct.snd_minor*, %struct.snd_minor** %mptr, align 8
  %device = getelementptr inbounds %struct.snd_minor, %struct.snd_minor* %5, i32 0, i32 2
  %6 = load i32, i32* %device, align 8
  %cmp4 = icmp sge i32 %6, 0
  br i1 %cmp4, label %if.then5, label %if.else

if.then5:                                         ; preds = %if.then3
  %7 = load %struct.snd_info_buffer*, %struct.snd_info_buffer** %buffer.addr, align 8
  %8 = load i32, i32* %minor, align 4
  %9 = load %struct.snd_minor*, %struct.snd_minor** %mptr, align 8
  %card6 = getelementptr inbounds %struct.snd_minor, %struct.snd_minor* %9, i32 0, i32 1
  %10 = load i32, i32* %card6, align 4
  %11 = load %struct.snd_minor*, %struct.snd_minor** %mptr, align 8
  %device7 = getelementptr inbounds %struct.snd_minor, %struct.snd_minor* %11, i32 0, i32 2
  %12 = load i32, i32* %device7, align 8
  %13 = load %struct.snd_minor*, %struct.snd_minor** %mptr, align 8
  %type = getelementptr inbounds %struct.snd_minor, %struct.snd_minor* %13, i32 0, i32 0
  %14 = load i32, i32* %type, align 8
  %call = call i8* @snd_device_type_name(i32 %14)
  %call8 = call i32 (%struct.snd_info_buffer*, i8*, ...) @snd_iprintf(%struct.snd_info_buffer* %7, i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.4, i32 0, i32 0), i32 %8, i32 %10, i32 %12, i8* %call)
  br label %if.end13

if.else:                                          ; preds = %if.then3
  %15 = load %struct.snd_info_buffer*, %struct.snd_info_buffer** %buffer.addr, align 8
  %16 = load i32, i32* %minor, align 4
  %17 = load %struct.snd_minor*, %struct.snd_minor** %mptr, align 8
  %card9 = getelementptr inbounds %struct.snd_minor, %struct.snd_minor* %17, i32 0, i32 1
  %18 = load i32, i32* %card9, align 4
  %19 = load %struct.snd_minor*, %struct.snd_minor** %mptr, align 8
  %type10 = getelementptr inbounds %struct.snd_minor, %struct.snd_minor* %19, i32 0, i32 0
  %20 = load i32, i32* %type10, align 8
  %call11 = call i8* @snd_device_type_name(i32 %20)
  %call12 = call i32 (%struct.snd_info_buffer*, i8*, ...) @snd_iprintf(%struct.snd_info_buffer* %15, i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.5, i32 0, i32 0), i32 %16, i32 %18, i8* %call11)
  br label %if.end13

if.end13:                                         ; preds = %if.else, %if.then5
  br label %if.end18

if.else14:                                        ; preds = %if.end
  %21 = load %struct.snd_info_buffer*, %struct.snd_info_buffer** %buffer.addr, align 8
  %22 = load i32, i32* %minor, align 4
  %23 = load %struct.snd_minor*, %struct.snd_minor** %mptr, align 8
  %type15 = getelementptr inbounds %struct.snd_minor, %struct.snd_minor* %23, i32 0, i32 0
  %24 = load i32, i32* %type15, align 8
  %call16 = call i8* @snd_device_type_name(i32 %24)
  %call17 = call i32 (%struct.snd_info_buffer*, i8*, ...) @snd_iprintf(%struct.snd_info_buffer* %21, i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.6, i32 0, i32 0), i32 %22, i8* %call16)
  br label %if.end18

if.end18:                                         ; preds = %if.else14, %if.end13
  br label %for.inc

for.inc:                                          ; preds = %if.end18, %if.then
  %25 = load i32, i32* %minor, align 4
  %inc = add nsw i32 %25, 1
  store i32 %inc, i32* %minor, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  call void @mutex_unlock(%struct.mutex* @sound_mutex)
  ret void
}

declare i32 @snd_info_register(%struct.snd_info_entry*) #1

declare void @snd_info_free_entry(%struct.snd_info_entry*) #1

; Function Attrs: noinline nounwind optnone uwtable
define i32 @snd_minor_info_done() #0 section ".exit.text" {
entry:
  %0 = load %struct.snd_info_entry*, %struct.snd_info_entry** @snd_minor_info_entry, align 8
  call void @snd_info_free_entry(%struct.snd_info_entry* %0)
  ret i32 0
}

; Function Attrs: noinline nounwind optnone uwtable
define internal void @alsa_sound_exit() #0 section ".exit.text" {
entry:
  %call = call i32 @snd_info_minor_unregister()
  %call1 = call i32 @snd_info_done()
  %0 = load i32, i32* @major, align 4
  call void @unregister_chrdev(i32 %0, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.3, i32 0, i32 0))
  ret void
}

declare i32 @snd_info_minor_unregister() #1

declare i32 @snd_info_done() #1

; Function Attrs: noinline nounwind optnone uwtable
define internal void @unregister_chrdev(i32 %major, i8* %name) #0 {
entry:
  %major.addr = alloca i32, align 4
  %name.addr = alloca i8*, align 8
  store i32 %major, i32* %major.addr, align 4
  store i8* %name, i8** %name.addr, align 8
  %0 = load i32, i32* %major.addr, align 4
  %1 = load i8*, i8** %name.addr, align 8
  call void @__unregister_chrdev(i32 %0, i32 0, i32 256, i8* %1)
  ret void
}

; Function Attrs: noinline nounwind optnone uwtable
define internal i32 @alsa_sound_init() #0 section ".init.text" {
entry:
  %retval = alloca i32, align 4
  %0 = load i32, i32* @major, align 4
  store i32 %0, i32* @snd_major, align 4
  %1 = load i32, i32* @cards_limit, align 4
  store i32 %1, i32* @snd_ecards_limit, align 4
  %2 = load i32, i32* @major, align 4
  %call = call i32 @register_chrdev(i32 %2, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.3, i32 0, i32 0), %struct.file_operations* @snd_fops)
  %tobool = icmp ne i32 %call, 0
  br i1 %tobool, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %3 = load i32, i32* @major, align 4
  %call1 = call i32 (i8*, ...) @printk(i8* getelementptr inbounds ([52 x i8], [52 x i8]* @.str.15, i32 0, i32 0), i32 %3)
  store i32 -5, i32* %retval, align 4
  br label %return

if.end:                                           ; preds = %entry
  %call2 = call i32 @snd_info_init()
  %cmp = icmp slt i32 %call2, 0
  br i1 %cmp, label %if.then3, label %if.end4

if.then3:                                         ; preds = %if.end
  %4 = load i32, i32* @major, align 4
  call void @unregister_chrdev(i32 %4, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.3, i32 0, i32 0))
  store i32 -12, i32* %retval, align 4
  br label %return

if.end4:                                          ; preds = %if.end
  %call5 = call i32 @snd_info_minor_register()
  %call6 = call i32 (i8*, ...) @printk(i8* getelementptr inbounds ([57 x i8], [57 x i8]* @.str.16, i32 0, i32 0))
  store i32 0, i32* %retval, align 4
  br label %return

return:                                           ; preds = %if.end4, %if.then3, %if.then
  %5 = load i32, i32* %retval, align 4
  ret i32 %5
}

declare i8* @__kmalloc(i64, i32) #1

declare i32 @snd_iprintf(%struct.snd_info_buffer*, i8*, ...) #1

; Function Attrs: noinline nounwind optnone uwtable
define internal i8* @snd_device_type_name(i32 %type) #0 {
entry:
  %retval = alloca i8*, align 8
  %type.addr = alloca i32, align 4
  store i32 %type, i32* %type.addr, align 4
  %0 = load i32, i32* %type.addr, align 4
  br label %NodeBlock11

NodeBlock11:                                      ; preds = %entry
  %Pivot12 = icmp slt i32 %0, 3
  br i1 %Pivot12, label %NodeBlock1, label %NodeBlock9

NodeBlock9:                                       ; preds = %NodeBlock11
  %Pivot10 = icmp slt i32 %0, 5
  br i1 %Pivot10, label %NodeBlock3, label %NodeBlock7

NodeBlock7:                                       ; preds = %NodeBlock9
  %Pivot8 = icmp slt i32 %0, 6
  br i1 %Pivot8, label %sw.bb3, label %LeafBlock5

LeafBlock5:                                       ; preds = %NodeBlock7
  %SwitchLeaf6 = icmp eq i32 %0, 6
  br i1 %SwitchLeaf6, label %sw.bb4, label %NewDefault

NodeBlock3:                                       ; preds = %NodeBlock9
  %Pivot4 = icmp slt i32 %0, 4
  br i1 %Pivot4, label %sw.bb1, label %sw.bb2

NodeBlock1:                                       ; preds = %NodeBlock11
  %Pivot2 = icmp slt i32 %0, 1
  br i1 %Pivot2, label %LeafBlock, label %NodeBlock

NodeBlock:                                        ; preds = %NodeBlock1
  %Pivot = icmp slt i32 %0, 2
  br i1 %Pivot, label %sw.bb5, label %sw.bb6

LeafBlock:                                        ; preds = %NodeBlock1
  %SwitchLeaf = icmp eq i32 %0, 0
  br i1 %SwitchLeaf, label %sw.bb, label %NewDefault

sw.bb:                                            ; preds = %LeafBlock
  store i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.7, i32 0, i32 0), i8** %retval, align 8
  br label %return

sw.bb1:                                           ; preds = %NodeBlock3
  store i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.8, i32 0, i32 0), i8** %retval, align 8
  br label %return

sw.bb2:                                           ; preds = %NodeBlock3
  store i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.9, i32 0, i32 0), i8** %retval, align 8
  br label %return

sw.bb3:                                           ; preds = %NodeBlock7
  store i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.10, i32 0, i32 0), i8** %retval, align 8
  br label %return

sw.bb4:                                           ; preds = %LeafBlock5
  store i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.11, i32 0, i32 0), i8** %retval, align 8
  br label %return

sw.bb5:                                           ; preds = %NodeBlock
  store i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.12, i32 0, i32 0), i8** %retval, align 8
  br label %return

sw.bb6:                                           ; preds = %NodeBlock
  store i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.13, i32 0, i32 0), i8** %retval, align 8
  br label %return

NewDefault:                                       ; preds = %LeafBlock5, %LeafBlock
  br label %sw.default

sw.default:                                       ; preds = %NewDefault
  store i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.14, i32 0, i32 0), i8** %retval, align 8
  br label %return

return:                                           ; preds = %sw.default, %sw.bb6, %sw.bb5, %sw.bb4, %sw.bb3, %sw.bb2, %sw.bb1, %sw.bb
  %1 = load i8*, i8** %retval, align 8
  ret i8* %1
}

declare void @__unregister_chrdev(i32, i32, i32, i8*) #1

; Function Attrs: noinline nounwind optnone uwtable
define internal i32 @register_chrdev(i32 %major, i8* %name, %struct.file_operations* %fops) #0 {
entry:
  %major.addr = alloca i32, align 4
  %name.addr = alloca i8*, align 8
  %fops.addr = alloca %struct.file_operations*, align 8
  store i32 %major, i32* %major.addr, align 4
  store i8* %name, i8** %name.addr, align 8
  store %struct.file_operations* %fops, %struct.file_operations** %fops.addr, align 8
  %0 = load i32, i32* %major.addr, align 4
  %1 = load i8*, i8** %name.addr, align 8
  %2 = load %struct.file_operations*, %struct.file_operations** %fops.addr, align 8
  %call = call i32 @__register_chrdev(i32 %0, i32 0, i32 256, i8* %1, %struct.file_operations* %2)
  ret i32 %call
}

declare i32 @printk(i8*, ...) #1

declare i32 @snd_info_init() #1

declare i32 @snd_info_minor_register() #1

declare i32 @__register_chrdev(i32, i32, i32, i8*, %struct.file_operations*) #1

declare i64 @noop_llseek(%struct.file*, i64, i32) #1

; Function Attrs: noinline nounwind optnone uwtable
define internal i32 @snd_open(%struct.inode* %inode, %struct.file* %file) #0 {
entry:
  %retval = alloca i32, align 4
  %inode.addr = alloca %struct.inode*, align 8
  %file.addr = alloca %struct.file*, align 8
  %minor = alloca i32, align 4
  %mptr = alloca %struct.snd_minor*, align 8
  %old_fops = alloca %struct.file_operations*, align 8
  %err = alloca i32, align 4
  store %struct.inode* %inode, %struct.inode** %inode.addr, align 8
  store %struct.file* %file, %struct.file** %file.addr, align 8
  %0 = load %struct.inode*, %struct.inode** %inode.addr, align 8
  %call = call i32 @iminor(%struct.inode* %0)
  store i32 %call, i32* %minor, align 4
  store %struct.snd_minor* null, %struct.snd_minor** %mptr, align 8
  store i32 0, i32* %err, align 4
  %1 = load i32, i32* %minor, align 4
  %conv = zext i32 %1 to i64
  %cmp = icmp uge i64 %conv, 256
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  store i32 -19, i32* %retval, align 4
  br label %return

if.end:                                           ; preds = %entry
  call void @mutex_lock(%struct.mutex* @sound_mutex)
  %2 = load i32, i32* %minor, align 4
  %idxprom = zext i32 %2 to i64
  %arrayidx = getelementptr inbounds [256 x %struct.snd_minor*], [256 x %struct.snd_minor*]* @snd_minors, i64 0, i64 %idxprom
  %3 = load %struct.snd_minor*, %struct.snd_minor** %arrayidx, align 8
  store %struct.snd_minor* %3, %struct.snd_minor** %mptr, align 8
  %4 = load %struct.snd_minor*, %struct.snd_minor** %mptr, align 8
  %cmp2 = icmp eq %struct.snd_minor* %4, null
  br i1 %cmp2, label %if.then4, label %if.end8

if.then4:                                         ; preds = %if.end
  %5 = load i32, i32* %minor, align 4
  %call5 = call %struct.snd_minor* @autoload_device(i32 %5)
  store %struct.snd_minor* %call5, %struct.snd_minor** %mptr, align 8
  %6 = load %struct.snd_minor*, %struct.snd_minor** %mptr, align 8
  %tobool = icmp ne %struct.snd_minor* %6, null
  br i1 %tobool, label %if.end7, label %if.then6

if.then6:                                         ; preds = %if.then4
  call void @mutex_unlock(%struct.mutex* @sound_mutex)
  store i32 -19, i32* %retval, align 4
  br label %return

if.end7:                                          ; preds = %if.then4
  br label %if.end8

if.end8:                                          ; preds = %if.end7, %if.end
  %7 = load %struct.file*, %struct.file** %file.addr, align 8
  %f_op = getelementptr inbounds %struct.file, %struct.file* %7, i32 0, i32 3
  %8 = load %struct.file_operations*, %struct.file_operations** %f_op, align 8
  store %struct.file_operations* %8, %struct.file_operations** %old_fops, align 8
  %9 = load %struct.snd_minor*, %struct.snd_minor** %mptr, align 8
  %f_ops = getelementptr inbounds %struct.snd_minor, %struct.snd_minor* %9, i32 0, i32 3
  %10 = load %struct.file_operations*, %struct.file_operations** %f_ops, align 8
  %tobool9 = icmp ne %struct.file_operations* %10, null
  br i1 %tobool9, label %land.lhs.true, label %cond.false

land.lhs.true:                                    ; preds = %if.end8
  %11 = load %struct.snd_minor*, %struct.snd_minor** %mptr, align 8
  %f_ops10 = getelementptr inbounds %struct.snd_minor, %struct.snd_minor* %11, i32 0, i32 3
  %12 = load %struct.file_operations*, %struct.file_operations** %f_ops10, align 8
  %owner = getelementptr inbounds %struct.file_operations, %struct.file_operations* %12, i32 0, i32 0
  %13 = load %struct.module*, %struct.module** %owner, align 8
  %call11 = call zeroext i1 @try_module_get(%struct.module* %13)
  br i1 %call11, label %cond.true, label %cond.false

cond.true:                                        ; preds = %land.lhs.true
  %14 = load %struct.snd_minor*, %struct.snd_minor** %mptr, align 8
  %f_ops13 = getelementptr inbounds %struct.snd_minor, %struct.snd_minor* %14, i32 0, i32 3
  %15 = load %struct.file_operations*, %struct.file_operations** %f_ops13, align 8
  br label %cond.end

cond.false:                                       ; preds = %land.lhs.true, %if.end8
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.file_operations* [ %15, %cond.true ], [ null, %cond.false ]
  %16 = load %struct.file*, %struct.file** %file.addr, align 8
  %f_op14 = getelementptr inbounds %struct.file, %struct.file* %16, i32 0, i32 3
  store %struct.file_operations* %cond, %struct.file_operations** %f_op14, align 8
  %17 = load %struct.file*, %struct.file** %file.addr, align 8
  %f_op15 = getelementptr inbounds %struct.file, %struct.file* %17, i32 0, i32 3
  %18 = load %struct.file_operations*, %struct.file_operations** %f_op15, align 8
  %cmp16 = icmp eq %struct.file_operations* %18, null
  br i1 %cmp16, label %if.then18, label %if.end20

if.then18:                                        ; preds = %cond.end
  %19 = load %struct.file_operations*, %struct.file_operations** %old_fops, align 8
  %20 = load %struct.file*, %struct.file** %file.addr, align 8
  %f_op19 = getelementptr inbounds %struct.file, %struct.file* %20, i32 0, i32 3
  store %struct.file_operations* %19, %struct.file_operations** %f_op19, align 8
  store i32 -19, i32* %err, align 4
  br label %if.end20

if.end20:                                         ; preds = %if.then18, %cond.end
  call void @mutex_unlock(%struct.mutex* @sound_mutex)
  %21 = load i32, i32* %err, align 4
  %cmp21 = icmp slt i32 %21, 0
  br i1 %cmp21, label %if.then23, label %if.end24

if.then23:                                        ; preds = %if.end20
  %22 = load i32, i32* %err, align 4
  store i32 %22, i32* %retval, align 4
  br label %return

if.end24:                                         ; preds = %if.end20
  %23 = load %struct.file*, %struct.file** %file.addr, align 8
  %f_op25 = getelementptr inbounds %struct.file, %struct.file* %23, i32 0, i32 3
  %24 = load %struct.file_operations*, %struct.file_operations** %f_op25, align 8
  %open = getelementptr inbounds %struct.file_operations, %struct.file_operations* %24, i32 0, i32 11
  %25 = load i32 (%struct.inode*, %struct.file*)*, i32 (%struct.inode*, %struct.file*)** %open, align 8
  %tobool26 = icmp ne i32 (%struct.inode*, %struct.file*)* %25, null
  br i1 %tobool26, label %if.then27, label %if.end50

if.then27:                                        ; preds = %if.end24
  %26 = load %struct.file*, %struct.file** %file.addr, align 8
  %f_op28 = getelementptr inbounds %struct.file, %struct.file* %26, i32 0, i32 3
  %27 = load %struct.file_operations*, %struct.file_operations** %f_op28, align 8
  %open29 = getelementptr inbounds %struct.file_operations, %struct.file_operations* %27, i32 0, i32 11
  %28 = load i32 (%struct.inode*, %struct.file*)*, i32 (%struct.inode*, %struct.file*)** %open29, align 8
  %29 = load %struct.inode*, %struct.inode** %inode.addr, align 8
  %30 = load %struct.file*, %struct.file** %file.addr, align 8
  %call30 = call i32 %28(%struct.inode* %29, %struct.file* %30)
  store i32 %call30, i32* %err, align 4
  %31 = load i32, i32* %err, align 4
  %tobool31 = icmp ne i32 %31, 0
  br i1 %tobool31, label %if.then32, label %if.end49

if.then32:                                        ; preds = %if.then27
  br label %do.body

do.body:                                          ; preds = %if.then32
  %32 = load %struct.file*, %struct.file** %file.addr, align 8
  %f_op33 = getelementptr inbounds %struct.file, %struct.file* %32, i32 0, i32 3
  %33 = load %struct.file_operations*, %struct.file_operations** %f_op33, align 8
  %tobool34 = icmp ne %struct.file_operations* %33, null
  br i1 %tobool34, label %if.then35, label %if.end38

if.then35:                                        ; preds = %do.body
  %34 = load %struct.file*, %struct.file** %file.addr, align 8
  %f_op36 = getelementptr inbounds %struct.file, %struct.file* %34, i32 0, i32 3
  %35 = load %struct.file_operations*, %struct.file_operations** %f_op36, align 8
  %owner37 = getelementptr inbounds %struct.file_operations, %struct.file_operations* %35, i32 0, i32 0
  %36 = load %struct.module*, %struct.module** %owner37, align 8
  call void @module_put(%struct.module* %36)
  br label %if.end38

if.end38:                                         ; preds = %if.then35, %do.body
  br label %do.end

do.end:                                           ; preds = %if.end38
  %37 = load %struct.file_operations*, %struct.file_operations** %old_fops, align 8
  %tobool39 = icmp ne %struct.file_operations* %37, null
  br i1 %tobool39, label %land.lhs.true40, label %cond.false45

land.lhs.true40:                                  ; preds = %do.end
  %38 = load %struct.file_operations*, %struct.file_operations** %old_fops, align 8
  %owner41 = getelementptr inbounds %struct.file_operations, %struct.file_operations* %38, i32 0, i32 0
  %39 = load %struct.module*, %struct.module** %owner41, align 8
  %call42 = call zeroext i1 @try_module_get(%struct.module* %39)
  br i1 %call42, label %cond.true44, label %cond.false45

cond.true44:                                      ; preds = %land.lhs.true40
  %40 = load %struct.file_operations*, %struct.file_operations** %old_fops, align 8
  br label %cond.end46

cond.false45:                                     ; preds = %land.lhs.true40, %do.end
  br label %cond.end46

cond.end46:                                       ; preds = %cond.false45, %cond.true44
  %cond47 = phi %struct.file_operations* [ %40, %cond.true44 ], [ null, %cond.false45 ]
  %41 = load %struct.file*, %struct.file** %file.addr, align 8
  %f_op48 = getelementptr inbounds %struct.file, %struct.file* %41, i32 0, i32 3
  store %struct.file_operations* %cond47, %struct.file_operations** %f_op48, align 8
  br label %if.end49

if.end49:                                         ; preds = %cond.end46, %if.then27
  br label %if.end50

if.end50:                                         ; preds = %if.end49, %if.end24
  br label %do.body51

do.body51:                                        ; preds = %if.end50
  %42 = load %struct.file_operations*, %struct.file_operations** %old_fops, align 8
  %tobool52 = icmp ne %struct.file_operations* %42, null
  br i1 %tobool52, label %if.then53, label %if.end55

if.then53:                                        ; preds = %do.body51
  %43 = load %struct.file_operations*, %struct.file_operations** %old_fops, align 8
  %owner54 = getelementptr inbounds %struct.file_operations, %struct.file_operations* %43, i32 0, i32 0
  %44 = load %struct.module*, %struct.module** %owner54, align 8
  call void @module_put(%struct.module* %44)
  br label %if.end55

if.end55:                                         ; preds = %if.then53, %do.body51
  br label %do.end56

do.end56:                                         ; preds = %if.end55
  %45 = load i32, i32* %err, align 4
  store i32 %45, i32* %retval, align 4
  br label %return

return:                                           ; preds = %do.end56, %if.then23, %if.then6, %if.then
  %46 = load i32, i32* %retval, align 4
  ret i32 %46
}

; Function Attrs: noinline nounwind optnone uwtable
define internal i32 @iminor(%struct.inode* %inode) #0 {
entry:
  %inode.addr = alloca %struct.inode*, align 8
  store %struct.inode* %inode, %struct.inode** %inode.addr, align 8
  %0 = load %struct.inode*, %struct.inode** %inode.addr, align 8
  %i_rdev = getelementptr inbounds %struct.inode, %struct.inode* %0, i32 0, i32 13
  %1 = load i32, i32* %i_rdev, align 4
  %and = and i32 %1, 1048575
  ret i32 %and
}

; Function Attrs: noinline nounwind optnone uwtable
define internal %struct.snd_minor* @autoload_device(i32 %minor) #0 {
entry:
  %minor.addr = alloca i32, align 4
  %dev = alloca i32, align 4
  %card = alloca i32, align 4
  store i32 %minor, i32* %minor.addr, align 4
  call void @mutex_unlock(%struct.mutex* @sound_mutex)
  %0 = load i32, i32* %minor.addr, align 4
  %and = and i32 %0, 31
  store i32 %and, i32* %dev, align 4
  %1 = load i32, i32* %dev, align 4
  %cmp = icmp eq i32 %1, 0
  br i1 %cmp, label %if.then, label %if.else

if.then:                                          ; preds = %entry
  %2 = load i32, i32* %minor.addr, align 4
  %shr = lshr i32 %2, 5
  store i32 %shr, i32* %card, align 4
  %3 = load i32, i32* %card, align 4
  %idxprom = sext i32 %3 to i64
  %arrayidx = getelementptr inbounds [32 x %struct.snd_card*], [32 x %struct.snd_card*]* @snd_cards, i64 0, i64 %idxprom
  %4 = load %struct.snd_card*, %struct.snd_card** %arrayidx, align 8
  %cmp1 = icmp eq %struct.snd_card* %4, null
  br i1 %cmp1, label %if.then2, label %if.end

if.then2:                                         ; preds = %if.then
  %5 = load i32, i32* %card, align 4
  call void @snd_request_card(i32 %5)
  br label %if.end

if.end:                                           ; preds = %if.then2, %if.then
  br label %if.end6

if.else:                                          ; preds = %entry
  %6 = load i32, i32* %dev, align 4
  %cmp3 = icmp eq i32 %6, 1
  br i1 %cmp3, label %if.then4, label %if.end5

if.then4:                                         ; preds = %if.else
  %7 = load i32, i32* %minor.addr, align 4
  call void @snd_request_other(i32 %7)
  br label %if.end5

if.end5:                                          ; preds = %if.then4, %if.else
  br label %if.end6

if.end6:                                          ; preds = %if.end5, %if.end
  call void @mutex_lock(%struct.mutex* @sound_mutex)
  %8 = load i32, i32* %minor.addr, align 4
  %idxprom7 = zext i32 %8 to i64
  %arrayidx8 = getelementptr inbounds [256 x %struct.snd_minor*], [256 x %struct.snd_minor*]* @snd_minors, i64 0, i64 %idxprom7
  %9 = load %struct.snd_minor*, %struct.snd_minor** %arrayidx8, align 8
  ret %struct.snd_minor* %9
}

declare zeroext i1 @try_module_get(%struct.module*) #1

declare void @module_put(%struct.module*) #1

; Function Attrs: noinline nounwind optnone uwtable
define internal void @snd_request_other(i32 %minor) #0 {
entry:
  %minor.addr = alloca i32, align 4
  %str = alloca i8*, align 8
  store i32 %minor, i32* %minor.addr, align 4
  %0 = load i32, i32* %minor.addr, align 4
  br label %NodeBlock

NodeBlock:                                        ; preds = %entry
  %Pivot = icmp slt i32 %0, 33
  br i1 %Pivot, label %LeafBlock, label %LeafBlock1

LeafBlock1:                                       ; preds = %NodeBlock
  %SwitchLeaf2 = icmp eq i32 %0, 33
  br i1 %SwitchLeaf2, label %sw.bb1, label %NewDefault

LeafBlock:                                        ; preds = %NodeBlock
  %SwitchLeaf = icmp eq i32 %0, 1
  br i1 %SwitchLeaf, label %sw.bb, label %NewDefault

sw.bb:                                            ; preds = %LeafBlock
  store i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.17, i32 0, i32 0), i8** %str, align 8
  br label %sw.epilog

sw.bb1:                                           ; preds = %LeafBlock1
  store i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.18, i32 0, i32 0), i8** %str, align 8
  br label %sw.epilog

NewDefault:                                       ; preds = %LeafBlock1, %LeafBlock
  br label %sw.default

sw.default:                                       ; preds = %NewDefault
  br label %return

sw.epilog:                                        ; preds = %sw.bb1, %sw.bb
  %1 = load i8*, i8** %str, align 8
  %call = call i32 (i1, i8*, ...) @__request_module(i1 zeroext true, i8* %1)
  br label %return

return:                                           ; preds = %sw.epilog, %sw.default
  ret void
}

attributes #0 = { noinline nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { nounwind }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 5.0.1 (tags/RELEASE_500/final)"}
!2 = !{i32 -2146795356, i32 -2146795317, i32 -2146795296, i32 -2146795259, i32 -2146795236, i32 -2146795366}
