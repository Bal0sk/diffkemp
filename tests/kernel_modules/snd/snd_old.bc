; ModuleID = 'sound/core/sound.bc'
source_filename = "sound/core/sound.c"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%struct.kernel_symbol = type { i64, i8* }
%struct.kernel_param_ops = type { i32 (i8*, %struct.kernel_param*)*, i32 (i8*, %struct.kernel_param*)*, void (i8*)* }
%struct.kernel_param = type { i8*, %struct.kernel_param_ops*, i16, i16, %union.anon.42 }
%union.anon.42 = type { i8* }
%struct.mutex = type { %struct.atomic_t, %struct.spinlock, %struct.list_head, %struct.task_struct*, i8* }
%struct.atomic_t = type { i32 }
%struct.spinlock = type { %union.anon.0 }
%union.anon.0 = type { %struct.raw_spinlock }
%struct.raw_spinlock = type { %struct.arch_spinlock }
%struct.arch_spinlock = type { %union.anon.1 }
%union.anon.1 = type { i16 }
%struct.list_head = type { %struct.list_head*, %struct.list_head* }
%struct.task_struct = type { i64, i8*, %struct.atomic_t, i32, i32, %struct.llist_node, i32, i32, i32, i32, i32, i32, %struct.sched_class*, %struct.sched_entity, %struct.sched_rt_entity, %struct.task_group*, i8, i32, i32, i32, %struct.cpumask, %struct.sched_info, %struct.list_head, %struct.plist_node, %struct.mm_struct*, %struct.mm_struct*, %struct.task_rss_stat, i32, i32, i32, i32, i32, i32, i8, i32, i32, %struct.task_struct*, %struct.task_struct*, %struct.list_head, %struct.list_head, %struct.task_struct*, %struct.list_head, %struct.list_head, [3 x %struct.pid_link], %struct.list_head, %struct.completion*, i32*, i32*, i64, i64, i64, i64, i64, %struct.cputime, i64, i64, %struct.timespec, %struct.timespec, i64, i64, %struct.task_cputime, [3 x %struct.list_head], %struct.cred*, %struct.cred*, [16 x i8], i32, i32, %struct.sysv_sem, %struct.thread_struct, %struct.fs_struct*, %struct.files_struct*, %struct.nsproxy*, %struct.signal_struct*, %struct.sighand_struct*, %struct.sigset_t, %struct.sigset_t, %struct.sigset_t, %struct.sigpending, i64, i64, i32 (i8*)*, i8*, %struct.sigset_t*, %struct.callback_head*, %struct.audit_context*, i32, i32, %struct.seccomp, i32, i32, %struct.spinlock, %struct.raw_spinlock, %struct.plist_head, %struct.rt_mutex_waiter*, i8*, %struct.bio_list*, %struct.blk_plug*, %struct.reclaim_state*, %struct.backing_dev_info*, %struct.io_context*, i64, %struct.siginfo*, %struct.task_io_accounting, i64, i64, i64, %struct.nodemask_t, %struct.seqcount, i32, i32, %struct.css_set*, %struct.list_head, %struct.robust_list_head*, %struct.compat_robust_list_head*, %struct.list_head, %struct.futex_pi_state*, [2 x %struct.perf_event_context*], %struct.mutex, %struct.list_head, %struct.mempolicy*, i16, i16, %struct.callback_head, %struct.pipe_inode_info*, %struct.page_frag, %struct.task_delay_info*, i32, i32, i64, i64, i64, i64, i64, %struct.atomic_t }
%struct.llist_node = type { %struct.llist_node* }
%struct.sched_class = type opaque
%struct.sched_entity = type { %struct.load_weight, %struct.rb_node, %struct.list_head, i32, i64, i64, i64, i64, i64, %struct.sched_statistics, %struct.sched_entity*, %struct.cfs_rq*, %struct.cfs_rq*, %struct.sched_avg }
%struct.load_weight = type { i64, i64 }
%struct.rb_node = type { i64, %struct.rb_node*, %struct.rb_node* }
%struct.sched_statistics = type { i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64 }
%struct.cfs_rq = type opaque
%struct.sched_avg = type { i32, i32, i64, i64, i64 }
%struct.sched_rt_entity = type { %struct.list_head, i64, i64, i32, %struct.sched_rt_entity* }
%struct.task_group = type opaque
%struct.cpumask = type { [1 x i64] }
%struct.sched_info = type { i64, i64, i64, i64 }
%struct.plist_node = type { i32, %struct.list_head, %struct.list_head }
%struct.mm_struct = type { %struct.vm_area_struct*, %struct.rb_root, %struct.vm_area_struct*, i64 (%struct.file*, i64, i64, i64, i64)*, void (%struct.mm_struct*, i64)*, i64, i64, i64, i64, i64, %struct.pgd_t*, %struct.atomic_t, %struct.atomic_t, i32, %struct.spinlock, %struct.rw_semaphore, %struct.list_head, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, [44 x i64], %struct.mm_rss_stat, %struct.linux_binfmt*, [1 x %struct.cpumask], %struct.mm_context_t, i64, %struct.core_state*, %struct.spinlock, %struct.hlist_head, %struct.file*, %struct.uprobes_state }
%struct.rb_root = type { %struct.rb_node* }
%struct.vm_area_struct = type { i64, i64, %struct.vm_area_struct*, %struct.vm_area_struct*, %struct.rb_node, i64, %struct.mm_struct*, %struct.pgprot, i64, %union.anon, %struct.list_head, %struct.anon_vma*, %struct.vm_operations_struct*, i64, %struct.file*, i8*, %struct.mempolicy* }
%struct.pgprot = type { i64 }
%union.anon = type { %struct.anon }
%struct.anon = type { %struct.rb_node, i64 }
%struct.anon_vma = type opaque
%struct.vm_operations_struct = type opaque
%struct.pgd_t = type { i64 }
%struct.rw_semaphore = type { i64, %struct.raw_spinlock, %struct.list_head }
%struct.mm_rss_stat = type { [3 x %struct.atomic64_t] }
%struct.atomic64_t = type { i64 }
%struct.linux_binfmt = type opaque
%struct.mm_context_t = type { i8*, i32, i16, %struct.mutex, i8* }
%struct.core_state = type { %struct.atomic_t, %struct.core_thread, %struct.completion }
%struct.core_thread = type { %struct.task_struct*, %struct.core_thread* }
%struct.completion = type { i32, %struct.__wait_queue_head }
%struct.__wait_queue_head = type { %struct.spinlock, %struct.list_head }
%struct.hlist_head = type { %struct.hlist_node* }
%struct.hlist_node = type { %struct.hlist_node*, %struct.hlist_node** }
%struct.file = type { %union.anon.36, %struct.path, %struct.inode*, %struct.file_operations*, %struct.spinlock, i32, %struct.atomic64_t, i32, i32, i64, %struct.fown_struct, %struct.cred*, %struct.file_ra_state, i64, i8*, i8*, %struct.list_head, %struct.list_head, %struct.address_space* }
%union.anon.36 = type { %struct.list_head }
%struct.path = type { %struct.vfsmount*, %struct.dentry* }
%struct.vfsmount = type opaque
%struct.dentry = type { i32, %struct.seqcount, %struct.hlist_bl_node, %struct.dentry*, %struct.qstr, %struct.inode*, [32 x i8], i32, %struct.spinlock, %struct.dentry_operations*, %struct.super_block*, i64, i8*, %struct.list_head, %union.anon.39, %struct.list_head, %struct.hlist_node }
%struct.hlist_bl_node = type { %struct.hlist_bl_node*, %struct.hlist_bl_node** }
%struct.qstr = type { %union.anon.37, i8* }
%union.anon.37 = type { i64 }
%struct.dentry_operations = type { i32 (%struct.dentry*, i32)*, i32 (%struct.dentry*, i32)*, i32 (%struct.dentry*, %struct.inode*, %struct.qstr*)*, i32 (%struct.dentry*, %struct.inode*, %struct.dentry*, %struct.inode*, i32, i8*, %struct.qstr*)*, i32 (%struct.dentry*)*, void (%struct.dentry*)*, void (%struct.dentry*)*, void (%struct.dentry*, %struct.inode*)*, i8* (%struct.dentry*, i8*, i32)*, %struct.vfsmount* (%struct.path*)*, i32 (%struct.dentry*, i1)*, [40 x i8] }
%struct.super_block = type { %struct.list_head, i32, i8, i64, i64, %struct.file_system_type*, %struct.super_operations*, %struct.dquot_operations*, %struct.quotactl_ops*, %struct.export_operations*, i64, i64, %struct.dentry*, %struct.rw_semaphore, i32, %struct.atomic_t, i8*, %struct.xattr_handler**, %struct.list_head, %struct.hlist_bl_head, %struct.list_head*, %struct.list_head, %struct.list_head, i32, [28 x i8], %struct.spinlock, %struct.list_head, i32, %struct.block_device*, %struct.backing_dev_info*, %struct.mtd_info*, %struct.hlist_node, %struct.quota_info, %struct.sb_writers, [32 x i8], [16 x i8], i8*, i32, i32, i32, %struct.mutex, i8*, i8*, %struct.dentry_operations*, i32, %struct.shrinker, %struct.atomic64_t, i32, [20 x i8] }
%struct.file_system_type = type { i8*, i32, %struct.dentry* (%struct.file_system_type*, i32, i8*, i8*)*, void (%struct.super_block*)*, %struct.module*, %struct.file_system_type*, %struct.hlist_head, %struct.lock_class_key, %struct.lock_class_key, %struct.lock_class_key, [3 x %struct.lock_class_key], %struct.lock_class_key, %struct.lock_class_key, %struct.lock_class_key }
%struct.module = type { i32, %struct.list_head, [56 x i8], %struct.module_kobject, %struct.module_attribute*, i8*, i8*, %struct.kobject*, %struct.kernel_symbol*, i64*, i32, %struct.kernel_param*, i32, i32, %struct.kernel_symbol*, i64*, %struct.kernel_symbol*, i64*, i32, i32, %struct.exception_table_entry*, i32 ()*, i8*, i8*, i32, i32, i32, i32, i32, i32, %struct.mod_arch_specific, i32, i32, %struct.list_head, %struct.bug_entry*, %struct.elf64_sym*, %struct.elf64_sym*, i32, i32, i8*, i8*, %struct.module_sect_attrs*, %struct.module_notes_attrs*, i8*, i8*, i32, i32, %struct.tracepoint**, i32, i8**, %struct.ftrace_event_call**, i32, %struct.list_head, %struct.list_head, %struct.task_struct*, void ()*, %struct.module_ref* }
%struct.module_kobject = type { %struct.kobject, %struct.module*, %struct.kobject*, %struct.module_param_attrs* }
%struct.kobject = type { i8*, %struct.list_head, %struct.kobject*, %struct.kset*, %struct.kobj_type*, %struct.sysfs_dirent*, %struct.kref, i8 }
%struct.kset = type { %struct.list_head, %struct.spinlock, %struct.kobject, %struct.kset_uevent_ops* }
%struct.kset_uevent_ops = type { i32 (%struct.kset*, %struct.kobject*)*, i8* (%struct.kset*, %struct.kobject*)*, i32 (%struct.kset*, %struct.kobject*, %struct.kobj_uevent_env*)* }
%struct.kobj_uevent_env = type { [32 x i8*], i32, [2048 x i8], i32 }
%struct.kobj_type = type { void (%struct.kobject*)*, %struct.sysfs_ops*, %struct.attribute**, %struct.kobj_ns_type_operations* (%struct.kobject*)*, i8* (%struct.kobject*)* }
%struct.sysfs_ops = type { i64 (%struct.kobject*, %struct.attribute*, i8*)*, i64 (%struct.kobject*, %struct.attribute*, i8*, i64)*, i8* (%struct.kobject*, %struct.attribute*)* }
%struct.attribute = type { i8*, i16 }
%struct.kobj_ns_type_operations = type { i32, i8* ()*, i8* (%struct.sock*)*, i8* ()*, void (i8*)* }
%struct.sock = type opaque
%struct.sysfs_dirent = type opaque
%struct.kref = type { %struct.atomic_t }
%struct.module_param_attrs = type opaque
%struct.module_attribute = type { %struct.attribute, i64 (%struct.module_attribute*, %struct.module_kobject*, i8*)*, i64 (%struct.module_attribute*, %struct.module_kobject*, i8*, i64)*, void (%struct.module*, i8*)*, i32 (%struct.module*)*, void (%struct.module*)* }
%struct.exception_table_entry = type { i32, i32 }
%struct.mod_arch_specific = type {}
%struct.bug_entry = type { i32, i32, i16, i16 }
%struct.elf64_sym = type { i32, i8, i8, i16, i64, i64 }
%struct.module_sect_attrs = type opaque
%struct.module_notes_attrs = type opaque
%struct.tracepoint = type { i8*, %struct.static_key, void ()*, void ()*, %struct.tracepoint_func* }
%struct.static_key = type { %struct.atomic_t }
%struct.tracepoint_func = type { i8*, i8* }
%struct.ftrace_event_call = type opaque
%struct.module_ref = type { i64, i64 }
%struct.lock_class_key = type {}
%struct.super_operations = type { %struct.inode* (%struct.super_block*)*, void (%struct.inode*)*, void (%struct.inode*, i32)*, i32 (%struct.inode*, %struct.writeback_control*)*, i32 (%struct.inode*)*, void (%struct.inode*)*, void (%struct.super_block*)*, i32 (%struct.super_block*, i32)*, i32 (%struct.super_block*)*, i32 (%struct.super_block*)*, i32 (%struct.dentry*, %struct.kstatfs*)*, i32 (%struct.super_block*, i32*, i8*)*, void (%struct.super_block*)*, i32 (%struct.seq_file*, %struct.dentry*)*, i32 (%struct.seq_file*, %struct.dentry*)*, i32 (%struct.seq_file*, %struct.dentry*)*, i32 (%struct.seq_file*, %struct.dentry*)*, i64 (%struct.super_block*, i32, i8*, i64, i64)*, i64 (%struct.super_block*, i32, i8*, i64, i64)*, i32 (%struct.super_block*, %struct.page*, i32)*, i32 (%struct.super_block*)*, void (%struct.super_block*, i32)* }
%struct.writeback_control = type opaque
%struct.kstatfs = type opaque
%struct.seq_file = type opaque
%struct.page = type { i64, %struct.address_space*, %struct.anon.22, %union.anon.28, %union.anon.30, [8 x i8] }
%struct.anon.22 = type { %union.anon.23, %union.anon.24 }
%union.anon.23 = type { i64 }
%union.anon.24 = type { i64 }
%union.anon.28 = type { %struct.list_head }
%union.anon.30 = type { i64 }
%struct.dquot_operations = type { i32 (%struct.dquot*)*, %struct.dquot* (%struct.super_block*, i32)*, void (%struct.dquot*)*, i32 (%struct.dquot*)*, i32 (%struct.dquot*)*, i32 (%struct.dquot*)*, i32 (%struct.super_block*, i32)*, i64* (%struct.inode*)* }
%struct.dquot = type { %struct.hlist_node, %struct.list_head, %struct.list_head, %struct.list_head, %struct.mutex, %struct.atomic_t, %struct.__wait_queue_head, %struct.super_block*, %struct.kqid, i64, i64, %struct.mem_dqblk }
%struct.kqid = type { %union.anon.34, i32 }
%union.anon.34 = type { i32 }
%struct.mem_dqblk = type { i64, i64, i64, i64, i64, i64, i64, i64, i64 }
%struct.quotactl_ops = type { i32 (%struct.super_block*, i32, i32, %struct.path*)*, i32 (%struct.super_block*, i32, i32)*, i32 (%struct.super_block*, i32)*, i32 (%struct.super_block*, i32)*, i32 (%struct.super_block*, i32, %struct.if_dqinfo*)*, i32 (%struct.super_block*, i32, %struct.if_dqinfo*)*, i32 (%struct.super_block*, i64, %struct.fs_disk_quota*)*, i32 (%struct.super_block*, i64, %struct.fs_disk_quota*)*, i32 (%struct.super_block*, %struct.fs_quota_stat*)*, i32 (%struct.super_block*, i32, i32)* }
%struct.if_dqinfo = type { i64, i64, i32, i32 }
%struct.fs_disk_quota = type { i8, i8, i16, i32, i64, i64, i64, i64, i64, i64, i32, i32, i16, i16, i32, i64, i64, i64, i32, i16, i16, [8 x i8] }
%struct.fs_quota_stat = type { i8, i16, i8, %struct.fs_qfilestat, %struct.fs_qfilestat, i32, i32, i32, i32, i16, i16 }
%struct.fs_qfilestat = type { i64, i64, i32 }
%struct.export_operations = type opaque
%struct.xattr_handler = type opaque
%struct.hlist_bl_head = type { %struct.hlist_bl_node* }
%struct.block_device = type { i32, i32, %struct.inode*, %struct.super_block*, %struct.mutex, %struct.list_head, i8*, i8*, i32, i8, %struct.list_head, %struct.block_device*, i32, %struct.hd_struct*, i32, i32, %struct.gendisk*, %struct.request_queue*, %struct.list_head, i64, i32, %struct.mutex }
%struct.hd_struct = type opaque
%struct.gendisk = type opaque
%struct.request_queue = type opaque
%struct.mtd_info = type opaque
%struct.quota_info = type { i32, %struct.mutex, %struct.mutex, %struct.rw_semaphore, [2 x %struct.inode*], [2 x %struct.mem_dqinfo], [2 x %struct.quota_format_ops*] }
%struct.mem_dqinfo = type { %struct.quota_format_type*, i32, %struct.list_head, i64, i32, i32, i64, i64, i8* }
%struct.quota_format_type = type { i32, %struct.quota_format_ops*, %struct.module*, %struct.quota_format_type* }
%struct.quota_format_ops = type { i32 (%struct.super_block*, i32)*, i32 (%struct.super_block*, i32)*, i32 (%struct.super_block*, i32)*, i32 (%struct.super_block*, i32)*, i32 (%struct.dquot*)*, i32 (%struct.dquot*)*, i32 (%struct.dquot*)* }
%struct.sb_writers = type { [3 x %struct.percpu_counter], %struct.__wait_queue_head, i32, %struct.__wait_queue_head }
%struct.percpu_counter = type { %struct.raw_spinlock, i64, %struct.list_head, i32* }
%struct.shrinker = type { i32 (%struct.shrinker*, %struct.shrink_control*)*, i32, i64, %struct.list_head, %struct.atomic64_t }
%struct.shrink_control = type { i32, i64 }
%union.anon.39 = type { %struct.list_head }
%struct.inode = type { i16, i16, i32, i32, i32, %struct.posix_acl*, %struct.posix_acl*, %struct.inode_operations*, %struct.super_block*, %struct.address_space*, i8*, i64, %union.anon.32, i32, i64, %struct.timespec, %struct.timespec, %struct.timespec, %struct.spinlock, i16, i32, i64, i64, %struct.mutex, i64, %struct.hlist_node, %struct.list_head, %struct.list_head, %struct.list_head, %union.anon.33, i64, %struct.atomic_t, %struct.atomic_t, %struct.atomic_t, %struct.file_operations*, %struct.file_lock*, %struct.address_space, [2 x %struct.dquot*], %struct.list_head, %union.anon.35, i32, i32, %struct.hlist_head, i8* }
%struct.posix_acl = type opaque
%struct.inode_operations = type { %struct.dentry* (%struct.inode*, %struct.dentry*, i32)*, i8* (%struct.dentry*, %struct.nameidata*)*, i32 (%struct.inode*, i32)*, %struct.posix_acl* (%struct.inode*, i32)*, i32 (%struct.dentry*, i8*, i32)*, void (%struct.dentry*, %struct.nameidata*, i8*)*, i32 (%struct.inode*, %struct.dentry*, i16, i1)*, i32 (%struct.dentry*, %struct.inode*, %struct.dentry*)*, i32 (%struct.inode*, %struct.dentry*)*, i32 (%struct.inode*, %struct.dentry*, i8*)*, i32 (%struct.inode*, %struct.dentry*, i16)*, i32 (%struct.inode*, %struct.dentry*)*, i32 (%struct.inode*, %struct.dentry*, i16, i32)*, i32 (%struct.inode*, %struct.dentry*, %struct.inode*, %struct.dentry*)*, i32 (%struct.dentry*, %struct.iattr*)*, i32 (%struct.vfsmount*, %struct.dentry*, %struct.kstat*)*, i32 (%struct.dentry*, i8*, i8*, i64, i32)*, i64 (%struct.dentry*, i8*, i8*, i64)*, i64 (%struct.dentry*, i8*, i64)*, i32 (%struct.dentry*, i8*)*, i32 (%struct.inode*, %struct.fiemap_extent_info*, i64, i64)*, i32 (%struct.inode*, %struct.timespec*, i32)*, i32 (%struct.inode*, %struct.dentry*, %struct.file*, i32, i16, i32*)*, [8 x i8] }
%struct.nameidata = type opaque
%struct.iattr = type { i32, i16, i32, i32, i64, %struct.timespec, %struct.timespec, %struct.timespec, %struct.file* }
%struct.kstat = type { i64, i32, i16, i32, i32, i32, i32, i64, %struct.timespec, %struct.timespec, %struct.timespec, i64, i64 }
%struct.fiemap_extent_info = type { i32, i32, i32, %struct.fiemap_extent* }
%struct.fiemap_extent = type { i64, i64, i64, [2 x i64], i32, [3 x i32] }
%union.anon.32 = type { i32 }
%union.anon.33 = type { %struct.callback_head }
%struct.file_lock = type { %struct.file_lock*, %struct.list_head, %struct.list_head, %struct.files_struct*, i32, i8, i32, %struct.pid*, %struct.__wait_queue_head, %struct.file*, i64, i64, %struct.fasync_struct*, i64, i64, %struct.file_lock_operations*, %struct.lock_manager_operations*, %union.anon.40 }
%struct.pid = type { %struct.atomic_t, i32, [3 x %struct.hlist_head], %struct.callback_head, [1 x %struct.upid] }
%struct.upid = type { i32, %struct.pid_namespace*, %struct.hlist_node }
%struct.pid_namespace = type opaque
%struct.fasync_struct = type { %struct.spinlock, i32, i32, %struct.fasync_struct*, %struct.file*, %struct.callback_head }
%struct.file_lock_operations = type { void (%struct.file_lock*, %struct.file_lock*)*, void (%struct.file_lock*)* }
%struct.lock_manager_operations = type { i32 (%struct.file_lock*, %struct.file_lock*)*, void (%struct.file_lock*)*, i32 (%struct.file_lock*, %struct.file_lock*, i32)*, void (%struct.file_lock*)*, i32 (%struct.file_lock**, i32)* }
%union.anon.40 = type { %struct.nfs_lock_info }
%struct.nfs_lock_info = type { i32, %struct.nlm_lockowner*, %struct.list_head }
%struct.nlm_lockowner = type opaque
%struct.address_space = type { %struct.inode*, %struct.radix_tree_root, %struct.spinlock, i32, %struct.rb_root, %struct.list_head, %struct.mutex, i64, i64, %struct.address_space_operations*, i64, %struct.backing_dev_info*, %struct.spinlock, %struct.list_head, i8* }
%struct.radix_tree_root = type { i32, i32, %struct.radix_tree_node* }
%struct.radix_tree_node = type opaque
%struct.address_space_operations = type { i32 (%struct.page*, %struct.writeback_control*)*, i32 (%struct.file*, %struct.page*)*, i32 (%struct.address_space*, %struct.writeback_control*)*, i32 (%struct.page*)*, i32 (%struct.file*, %struct.address_space*, %struct.list_head*, i32)*, i32 (%struct.file*, %struct.address_space*, i64, i32, i32, %struct.page**, i8**)*, i32 (%struct.file*, %struct.address_space*, i64, i32, i32, %struct.page*, i8*)*, i64 (%struct.address_space*, i64)*, void (%struct.page*, i64)*, i32 (%struct.page*, i32)*, void (%struct.page*)*, i64 (i32, %struct.kiocb*, %struct.iovec*, i64, i64)*, i32 (%struct.address_space*, i64, i32, i8**, i64*)*, i32 (%struct.address_space*, %struct.page*, %struct.page*, i32)*, i32 (%struct.page*)*, i32 (%struct.page*, %struct.read_descriptor_t*, i64)*, i32 (%struct.address_space*, %struct.page*)*, i32 (%struct.swap_info_struct*, %struct.file*, i64*)*, void (%struct.file*)* }
%struct.kiocb = type opaque
%struct.iovec = type opaque
%struct.read_descriptor_t = type { i64, i64, %union.anon.31, i32 }
%union.anon.31 = type { i8* }
%struct.swap_info_struct = type opaque
%union.anon.35 = type { %struct.pipe_inode_info* }
%struct.file_operations = type { %struct.module*, i64 (%struct.file*, i64, i32)*, i64 (%struct.file*, i8*, i64, i64*)*, i64 (%struct.file*, i8*, i64, i64*)*, i64 (%struct.kiocb*, %struct.iovec*, i64, i64)*, i64 (%struct.kiocb*, %struct.iovec*, i64, i64)*, i32 (%struct.file*, i8*, i32 (i8*, i8*, i32, i64, i64, i32)*)*, i32 (%struct.file*, %struct.poll_table_struct*)*, i64 (%struct.file*, i32, i64)*, i64 (%struct.file*, i32, i64)*, i32 (%struct.file*, %struct.vm_area_struct*)*, i32 (%struct.inode*, %struct.file*)*, i32 (%struct.file*, %struct.files_struct*)*, i32 (%struct.inode*, %struct.file*)*, i32 (%struct.file*, i64, i64, i32)*, i32 (%struct.kiocb*, i32)*, i32 (i32, %struct.file*, i32)*, i32 (%struct.file*, i32, %struct.file_lock*)*, i64 (%struct.file*, %struct.page*, i32, i64, i64*, i32)*, i64 (%struct.file*, i64, i64, i64, i64)*, i32 (i32)*, i32 (%struct.file*, i32, %struct.file_lock*)*, i64 (%struct.pipe_inode_info*, %struct.file*, i64*, i64, i32)*, i64 (%struct.file*, i64*, %struct.pipe_inode_info*, i64, i32)*, i32 (%struct.file*, i64, %struct.file_lock**)*, i64 (%struct.file*, i32, i64, i64)*, i32 (%struct.seq_file*, %struct.file*)* }
%struct.poll_table_struct = type { void (%struct.file*, %struct.__wait_queue_head*, %struct.poll_table_struct*)*, i64 }
%struct.fown_struct = type { %struct.rwlock_t, %struct.pid*, i32, i32, i32, i32 }
%struct.rwlock_t = type { %union.arch_rwlock_t }
%union.arch_rwlock_t = type { i32 }
%struct.file_ra_state = type { i64, i32, i32, i32, i32, i64 }
%struct.uprobes_state = type {}
%struct.task_rss_stat = type { i32, [3 x i32] }
%struct.pid_link = type { %struct.hlist_node, %struct.pid* }
%struct.cputime = type { i64, i64 }
%struct.timespec = type { i64, i64 }
%struct.task_cputime = type { i64, i64, i64 }
%struct.cred = type { %struct.atomic_t, i32, i32, i32, i32, i32, i32, i32, i32, i32, %struct.kernel_cap_struct, %struct.kernel_cap_struct, %struct.kernel_cap_struct, %struct.kernel_cap_struct, i8, %struct.key*, %struct.key*, %struct.key*, %struct.key*, i8*, %struct.user_struct*, %struct.user_namespace*, %struct.group_info*, %struct.callback_head }
%struct.kernel_cap_struct = type { [2 x i32] }
%struct.key = type { %struct.atomic_t, i32, %union.anon.2, %struct.key_type*, %struct.rw_semaphore, %struct.key_user*, i8*, %union.anon.3, i64, i32, i32, i32, i16, i16, i64, i8*, %union.anon.4, %union.anon.5 }
%union.anon.2 = type { %struct.rb_node }
%struct.key_type = type opaque
%struct.key_user = type opaque
%union.anon.3 = type { i64 }
%union.anon.4 = type { %struct.list_head }
%union.anon.5 = type { i64 }
%struct.user_struct = type { %struct.atomic_t, %struct.atomic_t, %struct.atomic_t, %struct.atomic_t, %struct.atomic_t, %struct.atomic_t, %struct.atomic64_t, i64, i64, %struct.key*, %struct.key*, %struct.hlist_node, i32, %struct.atomic64_t }
%struct.user_namespace = type opaque
%struct.group_info = type { %struct.atomic_t, i32, i32, [32 x i32], [0 x i32*] }
%struct.sysv_sem = type { %struct.sem_undo_list* }
%struct.sem_undo_list = type opaque
%struct.thread_struct = type { [3 x %struct.desc_struct], i64, i64, i64, i16, i16, i16, i16, i64, i64, [4 x %struct.perf_event*], i64, i64, i64, i64, i64, %struct.fpu, i64*, i64, i32 }
%struct.desc_struct = type { %union.anon.6 }
%union.anon.6 = type { %struct.anon.7 }
%struct.anon.7 = type { i32, i32 }
%struct.perf_event = type opaque
%struct.fpu = type { i32, i32, %union.thread_xstate* }
%union.thread_xstate = type { %struct.xsave_struct }
%struct.xsave_struct = type { %struct.i387_fxsave_struct, %struct.xsave_hdr_struct, %struct.ymmh_struct }
%struct.i387_fxsave_struct = type { i16, i16, i16, i16, %union.anon.9, i32, i32, [32 x i32], [64 x i32], [12 x i32], %union.anon.12 }
%union.anon.9 = type { %struct.anon.10 }
%struct.anon.10 = type { i64, i64 }
%union.anon.12 = type { [12 x i32] }
%struct.xsave_hdr_struct = type { i64, [2 x i64], [5 x i64] }
%struct.ymmh_struct = type { [64 x i32] }
%struct.fs_struct = type opaque
%struct.files_struct = type opaque
%struct.nsproxy = type opaque
%struct.signal_struct = type { %struct.atomic_t, %struct.atomic_t, i32, %struct.__wait_queue_head, %struct.task_struct*, %struct.sigpending, i32, i32, %struct.task_struct*, i32, i32, i8, i32, %struct.list_head, %struct.hrtimer, %struct.pid*, %union.ktime, [2 x %struct.cpu_itimer], %struct.thread_group_cputimer, %struct.task_cputime, [3 x %struct.list_head], %struct.pid*, i32, %struct.tty_struct*, i64, i64, i64, i64, i64, i64, %struct.cputime, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, %struct.task_io_accounting, i64, [16 x %struct.rlimit], %struct.pacct_struct, %struct.taskstats*, i32, i32, %struct.tty_audit_buf*, %struct.rw_semaphore, i32, i16, i16, %struct.mutex }
%struct.hrtimer = type { %struct.timerqueue_node, %union.ktime, i32 (%struct.hrtimer*)*, %struct.hrtimer_clock_base*, i64, i32, i8*, [16 x i8] }
%struct.timerqueue_node = type { %struct.rb_node, %union.ktime }
%struct.hrtimer_clock_base = type { %struct.hrtimer_cpu_base*, i32, i32, %struct.timerqueue_head, %union.ktime, i64 ()*, %union.ktime, %union.ktime }
%struct.hrtimer_cpu_base = type { %struct.raw_spinlock, i32, i32, %union.ktime, i32, i32, i64, i64, i64, %union.ktime, [4 x %struct.hrtimer_clock_base] }
%struct.timerqueue_head = type { %struct.rb_root, %struct.timerqueue_node* }
%union.ktime = type { i64 }
%struct.cpu_itimer = type { i64, i64, i32, i32 }
%struct.thread_group_cputimer = type { %struct.task_cputime, i32, %struct.raw_spinlock }
%struct.tty_struct = type opaque
%struct.rlimit = type { i64, i64 }
%struct.pacct_struct = type { i32, i64, i64, i64, i64, i64, i64 }
%struct.taskstats = type opaque
%struct.tty_audit_buf = type opaque
%struct.sighand_struct = type { %struct.atomic_t, [64 x %struct.k_sigaction], %struct.spinlock, %struct.__wait_queue_head }
%struct.k_sigaction = type { %struct.sigaction }
%struct.sigaction = type { void (i32)*, i64, void ()*, %struct.sigset_t }
%struct.sigset_t = type { [1 x i64] }
%struct.sigpending = type { %struct.list_head, %struct.sigset_t }
%struct.audit_context = type opaque
%struct.seccomp = type { i32, %struct.seccomp_filter* }
%struct.seccomp_filter = type opaque
%struct.plist_head = type { %struct.list_head }
%struct.rt_mutex_waiter = type opaque
%struct.bio_list = type opaque
%struct.blk_plug = type opaque
%struct.reclaim_state = type opaque
%struct.backing_dev_info = type opaque
%struct.io_context = type opaque
%struct.siginfo = type { i32, i32, i32, %union.anon.14 }
%union.anon.14 = type { %struct.anon.18, [80 x i8] }
%struct.anon.18 = type { i32, i32, i32, i64, i64 }
%struct.task_io_accounting = type { i64, i64, i64, i64, i64, i64, i64 }
%struct.nodemask_t = type { [1 x i64] }
%struct.seqcount = type { i32 }
%struct.css_set = type opaque
%struct.robust_list_head = type opaque
%struct.compat_robust_list_head = type opaque
%struct.futex_pi_state = type opaque
%struct.perf_event_context = type opaque
%struct.mempolicy = type opaque
%struct.callback_head = type { %struct.callback_head*, void (%struct.callback_head*)* }
%struct.pipe_inode_info = type opaque
%struct.page_frag = type { %struct.page*, i32, i32 }
%struct.task_delay_info = type { %struct.spinlock, i32, %struct.timespec, %struct.timespec, i64, i64, i32, i32, %struct.timespec, %struct.timespec, i64, i32 }
%struct.snd_minor = type { i32, i32, i32, %struct.file_operations*, i8*, %struct.device*, %struct.snd_card* }
%struct.device = type { %struct.device*, %struct.device_private*, %struct.kobject, i8*, %struct.device_type*, %struct.mutex, %struct.bus_type*, %struct.device_driver*, i8*, %struct.dev_pm_info, %struct.dev_pm_domain*, i32, i64*, i64, %struct.device_dma_parameters*, %struct.list_head, %struct.dma_coherent_mem*, %struct.dev_archdata, %struct.device_node*, %struct.acpi_dev_node, i32, i32, %struct.spinlock, %struct.list_head, %struct.klist_node, %struct.class*, %struct.attribute_group**, void (%struct.device*)*, %struct.iommu_group* }
%struct.device_private = type opaque
%struct.device_type = type { i8*, %struct.attribute_group**, i32 (%struct.device*, %struct.kobj_uevent_env*)*, i8* (%struct.device*, i16*, i32*, i32*)*, void (%struct.device*)*, %struct.dev_pm_ops* }
%struct.dev_pm_ops = type { i32 (%struct.device*)*, void (%struct.device*)*, i32 (%struct.device*)*, i32 (%struct.device*)*, i32 (%struct.device*)*, i32 (%struct.device*)*, i32 (%struct.device*)*, i32 (%struct.device*)*, i32 (%struct.device*)*, i32 (%struct.device*)*, i32 (%struct.device*)*, i32 (%struct.device*)*, i32 (%struct.device*)*, i32 (%struct.device*)*, i32 (%struct.device*)*, i32 (%struct.device*)*, i32 (%struct.device*)*, i32 (%struct.device*)*, i32 (%struct.device*)*, i32 (%struct.device*)*, i32 (%struct.device*)*, i32 (%struct.device*)*, i32 (%struct.device*)* }
%struct.bus_type = type { i8*, i8*, %struct.device*, %struct.bus_attribute*, %struct.device_attribute*, %struct.driver_attribute*, i32 (%struct.device*, %struct.device_driver*)*, i32 (%struct.device*, %struct.kobj_uevent_env*)*, i32 (%struct.device*)*, i32 (%struct.device*)*, void (%struct.device*)*, i32 (%struct.device*, i32)*, i32 (%struct.device*)*, %struct.dev_pm_ops*, %struct.iommu_ops*, %struct.subsys_private*, %struct.lock_class_key }
%struct.bus_attribute = type { %struct.attribute, i64 (%struct.bus_type*, i8*)*, i64 (%struct.bus_type*, i8*, i64)* }
%struct.device_attribute = type { %struct.attribute, i64 (%struct.device*, %struct.device_attribute*, i8*)*, i64 (%struct.device*, %struct.device_attribute*, i8*, i64)* }
%struct.driver_attribute = type { %struct.attribute, i64 (%struct.device_driver*, i8*)*, i64 (%struct.device_driver*, i8*, i64)* }
%struct.iommu_ops = type opaque
%struct.subsys_private = type opaque
%struct.device_driver = type { i8*, %struct.bus_type*, %struct.module*, i8*, i8, %struct.of_device_id*, %struct.acpi_device_id*, i32 (%struct.device*)*, i32 (%struct.device*)*, void (%struct.device*)*, i32 (%struct.device*, i32)*, i32 (%struct.device*)*, %struct.attribute_group**, %struct.dev_pm_ops*, %struct.driver_private* }
%struct.of_device_id = type opaque
%struct.acpi_device_id = type opaque
%struct.driver_private = type opaque
%struct.dev_pm_info = type { %struct.pm_message, i8, %struct.spinlock, %struct.list_head, %struct.completion, %struct.wakeup_source*, i8, %struct.pm_subsys_data*, %struct.dev_pm_qos* }
%struct.pm_message = type { i32 }
%struct.wakeup_source = type { i8*, %struct.list_head, %struct.spinlock, %struct.timer_list, i64, %union.ktime, %union.ktime, %union.ktime, %union.ktime, %union.ktime, i64, i64, i64, i64, i64, i8 }
%struct.timer_list = type { %struct.list_head, i64, %struct.tvec_base*, void (i64)*, i64, i32, i32, i8*, [16 x i8] }
%struct.tvec_base = type opaque
%struct.pm_subsys_data = type { %struct.spinlock, i32 }
%struct.dev_pm_qos = type opaque
%struct.dev_pm_domain = type { %struct.dev_pm_ops }
%struct.device_dma_parameters = type { i32, i64 }
%struct.dma_coherent_mem = type opaque
%struct.dev_archdata = type { %struct.dma_map_ops*, i8* }
%struct.dma_map_ops = type opaque
%struct.device_node = type opaque
%struct.acpi_dev_node = type { i8* }
%struct.klist_node = type { i8*, %struct.list_head, %struct.kref }
%struct.class = type { i8*, %struct.module*, %struct.class_attribute*, %struct.device_attribute*, %struct.bin_attribute*, %struct.kobject*, i32 (%struct.device*, %struct.kobj_uevent_env*)*, i8* (%struct.device*, i16*)*, void (%struct.class*)*, void (%struct.device*)*, i32 (%struct.device*, i32)*, i32 (%struct.device*)*, %struct.kobj_ns_type_operations*, i8* (%struct.device*)*, %struct.dev_pm_ops*, %struct.subsys_private* }
%struct.class_attribute = type { %struct.attribute, i64 (%struct.class*, %struct.class_attribute*, i8*)*, i64 (%struct.class*, %struct.class_attribute*, i8*, i64)*, i8* (%struct.class*, %struct.class_attribute*)* }
%struct.bin_attribute = type { %struct.attribute, i64, i8*, i64 (%struct.file*, %struct.kobject*, %struct.bin_attribute*, i8*, i64, i64)*, i64 (%struct.file*, %struct.kobject*, %struct.bin_attribute*, i8*, i64, i64)*, i32 (%struct.file*, %struct.kobject*, %struct.bin_attribute*, %struct.vm_area_struct*)* }
%struct.attribute_group = type { i8*, i16 (%struct.kobject*, %struct.attribute*, i32)*, %struct.attribute** }
%struct.iommu_group = type opaque
%struct.snd_card = type { i32, [16 x i8], [16 x i8], [32 x i8], [80 x i8], [80 x i8], [128 x i8], %struct.module*, i8*, void (%struct.snd_card*)*, %struct.list_head, i32, %struct.rw_semaphore, %struct.rwlock_t, i32, i32, %struct.list_head, %struct.list_head, %struct.snd_info_entry*, %struct.snd_info_entry*, %struct.proc_dir_entry*, %struct.list_head, %struct.snd_shutdown_f_ops*, %struct.spinlock, i32, i32, %struct.__wait_queue_head, %struct.atomic_t, %struct.device*, %struct.device*, i32, %struct.mutex, %struct.__wait_queue_head, %struct.snd_mixer_oss*, i32 }
%struct.snd_info_entry = type { i8*, i16, i64, i16, %union.anon.43, %struct.snd_info_entry*, %struct.snd_card*, %struct.module*, i8*, void (%struct.snd_info_entry*)*, %struct.proc_dir_entry*, %struct.mutex, %struct.list_head, %struct.list_head }
%union.anon.43 = type { %struct.snd_info_entry_text }
%struct.snd_info_entry_text = type { void (%struct.snd_info_entry*, %struct.snd_info_buffer*)*, void (%struct.snd_info_entry*, %struct.snd_info_buffer*)* }
%struct.snd_info_buffer = type { i8*, i32, i32, i32, i32, i32 }
%struct.proc_dir_entry = type opaque
%struct.snd_shutdown_f_ops = type opaque
%struct.snd_mixer_oss = type opaque
%struct.smp_ops = type { void ()*, void (i32)*, void (i32)*, void (i32)*, void (i32)*, i32 (i32, %struct.task_struct*)*, i32 ()*, void (i32)*, void ()*, void (%struct.cpumask*)*, void (i32)* }

@snd_major = common global i32 0, align 4
@__kstrtab_snd_major = internal constant [10 x i8] c"snd_major\00", section "__ksymtab_strings", align 1
@__ksymtab_snd_major = internal constant %struct.kernel_symbol { i64 ptrtoint (i32* @snd_major to i64), i8* getelementptr inbounds ([10 x i8], [10 x i8]* @__kstrtab_snd_major, i32 0, i32 0) }, section "___ksymtab+snd_major", align 8
@__param_str_major = internal constant [10 x i8] c"snd.major\00", align 1
@param_ops_int = external global %struct.kernel_param_ops, align 8
@major = internal global i32 116, align 4
@__param_major = internal constant %struct.kernel_param { i8* getelementptr inbounds ([10 x i8], [10 x i8]* @__param_str_major, i32 0, i32 0), %struct.kernel_param_ops* @param_ops_int, i16 292, i16 -1, %union.anon.42 { i8* bitcast (i32* @major to i8*) } }, section "__param", align 8
@__param_str_cards_limit = internal constant [16 x i8] c"snd.cards_limit\00", align 16
@cards_limit = internal global i32 1, align 4
@__param_cards_limit = internal constant %struct.kernel_param { i8* getelementptr inbounds ([16 x i8], [16 x i8]* @__param_str_cards_limit, i32 0, i32 0), %struct.kernel_param_ops* @param_ops_int, i16 292, i16 -1, %union.anon.42 { i8* bitcast (i32* @cards_limit to i8*) } }, section "__param", align 8
@snd_ecards_limit = common global i32 0, align 4
@__kstrtab_snd_ecards_limit = internal constant [17 x i8] c"snd_ecards_limit\00", section "__ksymtab_strings", align 1
@__ksymtab_snd_ecards_limit = internal constant %struct.kernel_symbol { i64 ptrtoint (i32* @snd_ecards_limit to i64), i8* getelementptr inbounds ([17 x i8], [17 x i8]* @__kstrtab_snd_ecards_limit, i32 0, i32 0) }, section "___ksymtab+snd_ecards_limit", align 8
@.str = private unnamed_addr constant [12 x i8] c"snd-card-%i\00", align 1
@__kstrtab_snd_request_card = internal constant [17 x i8] c"snd_request_card\00", section "__ksymtab_strings", align 1
@__ksymtab_snd_request_card = internal constant %struct.kernel_symbol { i64 ptrtoint (void (i32)* @snd_request_card to i64), i8* getelementptr inbounds ([17 x i8], [17 x i8]* @__kstrtab_snd_request_card, i32 0, i32 0) }, section "___ksymtab+snd_request_card", align 8
@sound_mutex = internal global %struct.mutex { %struct.atomic_t { i32 1 }, %struct.spinlock zeroinitializer, %struct.list_head { %struct.list_head* bitcast (i8* getelementptr (i8, i8* bitcast (%struct.mutex* @sound_mutex to i8*), i64 8) to %struct.list_head*), %struct.list_head* bitcast (i8* getelementptr (i8, i8* bitcast (%struct.mutex* @sound_mutex to i8*), i64 8) to %struct.list_head*) }, %struct.task_struct* null, i8* null }, align 8
@snd_minors = internal global [256 x %struct.snd_minor*] zeroinitializer, align 16
@__kstrtab_snd_lookup_minor_data = internal constant [22 x i8] c"snd_lookup_minor_data\00", section "__ksymtab_strings", align 1
@__ksymtab_snd_lookup_minor_data = internal constant %struct.kernel_symbol { i64 ptrtoint (i8* (i32, i32)* @snd_lookup_minor_data to i64), i8* getelementptr inbounds ([22 x i8], [22 x i8]* @__kstrtab_snd_lookup_minor_data, i32 0, i32 0) }, section "___ksymtab+snd_lookup_minor_data", align 8
@sound_class = external global %struct.class*, align 8
@.str.1 = private unnamed_addr constant [3 x i8] c"%s\00", align 1
@__kstrtab_snd_register_device_for_dev = internal constant [28 x i8] c"snd_register_device_for_dev\00", section "__ksymtab_strings", align 1
@__ksymtab_snd_register_device_for_dev = internal constant %struct.kernel_symbol { i64 ptrtoint (i32 (i32, %struct.snd_card*, i32, %struct.file_operations*, i8*, i8*, %struct.device*)* @snd_register_device_for_dev to i64), i8* getelementptr inbounds ([28 x i8], [28 x i8]* @__kstrtab_snd_register_device_for_dev, i32 0, i32 0) }, section "___ksymtab+snd_register_device_for_dev", align 8
@__kstrtab_snd_unregister_device = internal constant [22 x i8] c"snd_unregister_device\00", section "__ksymtab_strings", align 1
@__ksymtab_snd_unregister_device = internal constant %struct.kernel_symbol { i64 ptrtoint (i32 (i32, %struct.snd_card*, i32)* @snd_unregister_device to i64), i8* getelementptr inbounds ([22 x i8], [22 x i8]* @__kstrtab_snd_unregister_device, i32 0, i32 0) }, section "___ksymtab+snd_unregister_device", align 8
@__kstrtab_snd_add_device_sysfs_file = internal constant [26 x i8] c"snd_add_device_sysfs_file\00", section "__ksymtab_strings", align 1
@__ksymtab_snd_add_device_sysfs_file = internal constant %struct.kernel_symbol { i64 ptrtoint (i32 (i32, %struct.snd_card*, i32, %struct.device_attribute*)* @snd_add_device_sysfs_file to i64), i8* getelementptr inbounds ([26 x i8], [26 x i8]* @__kstrtab_snd_add_device_sysfs_file, i32 0, i32 0) }, section "___ksymtab+snd_add_device_sysfs_file", align 8
@.str.2 = private unnamed_addr constant [8 x i8] c"devices\00", align 1
@snd_minor_info_entry = internal global %struct.snd_info_entry* null, align 8
@.str.3 = private unnamed_addr constant [5 x i8] c"alsa\00", align 1
@__initcall_alsa_sound_init4 = internal global i32 ()* @alsa_sound_init, section ".initcall4.init", align 8
@__exitcall_alsa_sound_exit = internal global void ()* @alsa_sound_exit, section ".exitcall.exit", align 8
@smp_ops = external global %struct.smp_ops, align 8
@.str.4 = private unnamed_addr constant [20 x i8] c"%3i: [%2i-%2i]: %s\0A\00", align 1
@.str.5 = private unnamed_addr constant [19 x i8] c"%3i: [%2i]   : %s\0A\00", align 1
@.str.6 = private unnamed_addr constant [18 x i8] c"%3i:        : %s\0A\00", align 1
@.str.7 = private unnamed_addr constant [8 x i8] c"control\00", align 1
@.str.8 = private unnamed_addr constant [19 x i8] c"hardware dependent\00", align 1
@.str.9 = private unnamed_addr constant [9 x i8] c"raw midi\00", align 1
@.str.10 = private unnamed_addr constant [23 x i8] c"digital audio playback\00", align 1
@.str.11 = private unnamed_addr constant [22 x i8] c"digital audio capture\00", align 1
@.str.12 = private unnamed_addr constant [10 x i8] c"sequencer\00", align 1
@.str.13 = private unnamed_addr constant [6 x i8] c"timer\00", align 1
@.str.14 = private unnamed_addr constant [2 x i8] c"?\00", align 1
@snd_fops = internal constant %struct.file_operations { %struct.module* null, i64 (%struct.file*, i64, i32)* @noop_llseek, i64 (%struct.file*, i8*, i64, i64*)* null, i64 (%struct.file*, i8*, i64, i64*)* null, i64 (%struct.kiocb*, %struct.iovec*, i64, i64)* null, i64 (%struct.kiocb*, %struct.iovec*, i64, i64)* null, i32 (%struct.file*, i8*, i32 (i8*, i8*, i32, i64, i64, i32)*)* null, i32 (%struct.file*, %struct.poll_table_struct*)* null, i64 (%struct.file*, i32, i64)* null, i64 (%struct.file*, i32, i64)* null, i32 (%struct.file*, %struct.vm_area_struct*)* null, i32 (%struct.inode*, %struct.file*)* @snd_open, i32 (%struct.file*, %struct.files_struct*)* null, i32 (%struct.inode*, %struct.file*)* null, i32 (%struct.file*, i64, i64, i32)* null, i32 (%struct.kiocb*, i32)* null, i32 (i32, %struct.file*, i32)* null, i32 (%struct.file*, i32, %struct.file_lock*)* null, i64 (%struct.file*, %struct.page*, i32, i64, i64*, i32)* null, i64 (%struct.file*, i64, i64, i64, i64)* null, i32 (i32)* null, i32 (%struct.file*, i32, %struct.file_lock*)* null, i64 (%struct.pipe_inode_info*, %struct.file*, i64*, i64, i32)* null, i64 (%struct.file*, i64*, %struct.pipe_inode_info*, i64, i32)* null, i32 (%struct.file*, i64, %struct.file_lock**)* null, i64 (%struct.file*, i32, i64, i64)* null, i32 (%struct.seq_file*, %struct.file*)* null }, align 8
@.str.15 = private unnamed_addr constant [52 x i8] c"\013unable to register native major device number %d\0A\00", align 1
@.str.16 = private unnamed_addr constant [57 x i8] c"\016Advanced Linux Sound Architecture Driver Initialized.\0A\00", align 1
@snd_cards = external global [32 x %struct.snd_card*], align 16
@.str.17 = private unnamed_addr constant [8 x i8] c"snd-seq\00", align 1
@.str.18 = private unnamed_addr constant [10 x i8] c"snd-timer\00", align 1
@llvm.used = appending global [13 x i8*] [i8* bitcast (%struct.kernel_symbol* @__ksymtab_snd_major to i8*), i8* bitcast (%struct.kernel_param* @__param_major to i8*), i8* bitcast (%struct.kernel_param* @__param_cards_limit to i8*), i8* bitcast (%struct.kernel_symbol* @__ksymtab_snd_ecards_limit to i8*), i8* bitcast (%struct.kernel_symbol* @__ksymtab_snd_request_card to i8*), i8* bitcast (%struct.kernel_symbol* @__ksymtab_snd_lookup_minor_data to i8*), i8* bitcast (%struct.kernel_symbol* @__ksymtab_snd_register_device_for_dev to i8*), i8* bitcast (%struct.kernel_symbol* @__ksymtab_snd_unregister_device to i8*), i8* bitcast (%struct.kernel_symbol* @__ksymtab_snd_add_device_sysfs_file to i8*), i8* bitcast (i32 ()* @snd_minor_info_done to i8*), i8* bitcast (void ()* @alsa_sound_exit to i8*), i8* bitcast (i32 ()** @__initcall_alsa_sound_init4 to i8*), i8* bitcast (void ()** @__exitcall_alsa_sound_exit to i8*)], section "llvm.metadata"
@switch.table = private unnamed_addr constant [7 x i8*] [i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.7, i32 0, i32 0), i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.12, i32 0, i32 0), i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.13, i32 0, i32 0), i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.8, i32 0, i32 0), i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.9, i32 0, i32 0), i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.10, i32 0, i32 0), i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.11, i32 0, i32 0)]

; Function Attrs: noinline nounwind uwtable
define internal void @smp_send_stop() #0 {
  %1 = load void (i32)*, void (i32)** getelementptr inbounds (%struct.smp_ops, %struct.smp_ops* @smp_ops, i32 0, i32 3), align 8
  call void %1(i32 0)
  ret void
}

; Function Attrs: noinline nounwind uwtable
define internal void @smp_send_reschedule(i32) #0 {
  %2 = load void (i32)*, void (i32)** getelementptr inbounds (%struct.smp_ops, %struct.smp_ops* @smp_ops, i32 0, i32 4), align 8
  call void %2(i32 %0)
  ret void
}

; Function Attrs: noinline nounwind uwtable
define internal void @smp_prepare_cpus(i32) #0 {
  %2 = load void (i32)*, void (i32)** getelementptr inbounds (%struct.smp_ops, %struct.smp_ops* @smp_ops, i32 0, i32 1), align 8
  call void %2(i32 %0)
  ret void
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @__cpu_up(i32, %struct.task_struct*) #0 {
  %3 = load i32 (i32, %struct.task_struct*)*, i32 (i32, %struct.task_struct*)** getelementptr inbounds (%struct.smp_ops, %struct.smp_ops* @smp_ops, i32 0, i32 5), align 8
  %4 = call i32 %3(i32 %0, %struct.task_struct* %1)
  ret i32 %4
}

; Function Attrs: noinline nounwind uwtable
define internal void @smp_cpus_done(i32) #0 {
  %2 = load void (i32)*, void (i32)** getelementptr inbounds (%struct.smp_ops, %struct.smp_ops* @smp_ops, i32 0, i32 2), align 8
  call void %2(i32 %0)
  ret void
}

; Function Attrs: noinline nounwind uwtable
define internal void @smp_prepare_boot_cpu() #0 {
  %1 = load void ()*, void ()** getelementptr inbounds (%struct.smp_ops, %struct.smp_ops* @smp_ops, i32 0, i32 0), align 8
  call void %1()
  ret void
}

; Function Attrs: noinline nounwind uwtable
define void @snd_request_card(i32) #0 {
  %2 = call i32 @snd_card_locked(i32 %0)
  %3 = icmp ne i32 %2, 0
  br i1 %3, label %10, label %4

; <label>:4:                                      ; preds = %1
  %5 = icmp slt i32 %0, 0
  %6 = load i32, i32* @cards_limit, align 4
  %7 = icmp sge i32 %0, %6
  %or.cond = or i1 %5, %7
  br i1 %or.cond, label %10, label %8

; <label>:8:                                      ; preds = %4
  %9 = call i32 (i1, i8*, ...) @__request_module(i1 zeroext true, i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str, i32 0, i32 0), i32 %0)
  br label %10

; <label>:10:                                     ; preds = %4, %1, %8
  ret void
}

declare i32 @snd_card_locked(i32) #1

declare i32 @__request_module(i1 zeroext, i8*, ...) #1

; Function Attrs: noinline nounwind uwtable
define i8* @snd_lookup_minor_data(i32, i32) #0 {
  %3 = zext i32 %0 to i64
  %4 = icmp uge i64 %3, 256
  br i1 %4, label %27, label %5

; <label>:5:                                      ; preds = %2
  call void @mutex_lock(%struct.mutex* @sound_mutex)
  %6 = zext i32 %0 to i64
  %7 = getelementptr inbounds [256 x %struct.snd_minor*], [256 x %struct.snd_minor*]* @snd_minors, i64 0, i64 %6
  %8 = load %struct.snd_minor*, %struct.snd_minor** %7, align 8
  %9 = icmp ne %struct.snd_minor* %8, null
  br i1 %9, label %10, label %26

; <label>:10:                                     ; preds = %5
  %11 = getelementptr inbounds %struct.snd_minor, %struct.snd_minor* %8, i32 0, i32 0
  %12 = load i32, i32* %11, align 8
  %13 = icmp eq i32 %12, %1
  br i1 %13, label %14, label %26

; <label>:14:                                     ; preds = %10
  %15 = getelementptr inbounds %struct.snd_minor, %struct.snd_minor* %8, i32 0, i32 4
  %16 = load i8*, i8** %15, align 8
  %17 = icmp ne i8* %16, null
  br i1 %17, label %18, label %26

; <label>:18:                                     ; preds = %14
  %19 = getelementptr inbounds %struct.snd_minor, %struct.snd_minor* %8, i32 0, i32 6
  %20 = load %struct.snd_card*, %struct.snd_card** %19, align 8
  %21 = icmp ne %struct.snd_card* %20, null
  br i1 %21, label %22, label %26

; <label>:22:                                     ; preds = %18
  %23 = getelementptr inbounds %struct.snd_minor, %struct.snd_minor* %8, i32 0, i32 6
  %24 = load %struct.snd_card*, %struct.snd_card** %23, align 8
  %25 = getelementptr inbounds %struct.snd_card, %struct.snd_card* %24, i32 0, i32 27
  call void @atomic_inc(%struct.atomic_t* %25)
  br label %26

; <label>:26:                                     ; preds = %5, %10, %14, %18, %22
  %.01 = phi i8* [ %16, %22 ], [ %16, %18 ], [ %16, %14 ], [ null, %10 ], [ null, %5 ]
  call void @mutex_unlock(%struct.mutex* @sound_mutex)
  br label %27

; <label>:27:                                     ; preds = %2, %26
  %.0 = phi i8* [ %.01, %26 ], [ null, %2 ]
  ret i8* %.0
}

declare void @mutex_lock(%struct.mutex*) #1

; Function Attrs: noinline nounwind uwtable
define internal void @atomic_inc(%struct.atomic_t*) #0 {
  %2 = getelementptr inbounds %struct.atomic_t, %struct.atomic_t* %0, i32 0, i32 0
  call void asm sideeffect ".pushsection .smp_locks,\22a\22\0A.balign 4\0A.long 671f - .\0A.popsection\0A671:\0A\09lock; incl $0", "=*m,*m,~{dirflag},~{fpsr},~{flags}"(i32* %2, i32* %2) #2, !srcloc !1
  ret void
}

declare void @mutex_unlock(%struct.mutex*) #1

; Function Attrs: noinline nounwind uwtable
define i32 @snd_register_device_for_dev(i32, %struct.snd_card*, i32, %struct.file_operations*, i8*, i8*, %struct.device*) #0 {
  %8 = icmp ne i8* %5, null
  %9 = xor i1 %8, true
  %10 = xor i1 %9, true
  %11 = xor i1 %10, true
  %12 = zext i1 %11 to i32
  %13 = icmp ne i32 %12, 0
  %14 = xor i1 %13, true
  %15 = xor i1 %14, true
  %16 = zext i1 %15 to i32
  %17 = sext i32 %16 to i64
  %18 = icmp ne i64 %17, 0
  br i1 %18, label %64, label %19

; <label>:19:                                     ; preds = %7
  %20 = call i8* @__kmalloc(i64 48, i32 208) #2
  %21 = bitcast i8* %20 to %struct.snd_minor*
  %22 = icmp eq %struct.snd_minor* %21, null
  br i1 %22, label %64, label %23

; <label>:23:                                     ; preds = %19
  %24 = getelementptr inbounds %struct.snd_minor, %struct.snd_minor* %21, i32 0, i32 0
  store i32 %0, i32* %24, align 8
  %25 = icmp ne %struct.snd_card* %1, null
  br i1 %25, label %26, label %29

; <label>:26:                                     ; preds = %23
  %27 = getelementptr inbounds %struct.snd_card, %struct.snd_card* %1, i32 0, i32 0
  %28 = load i32, i32* %27, align 8
  br label %29

; <label>:29:                                     ; preds = %23, %26
  %30 = phi i32 [ %28, %26 ], [ -1, %23 ]
  %31 = getelementptr inbounds %struct.snd_minor, %struct.snd_minor* %21, i32 0, i32 1
  store i32 %30, i32* %31, align 4
  %32 = getelementptr inbounds %struct.snd_minor, %struct.snd_minor* %21, i32 0, i32 2
  store i32 %2, i32* %32, align 8
  %33 = getelementptr inbounds %struct.snd_minor, %struct.snd_minor* %21, i32 0, i32 3
  store %struct.file_operations* %3, %struct.file_operations** %33, align 8
  %34 = getelementptr inbounds %struct.snd_minor, %struct.snd_minor* %21, i32 0, i32 4
  store i8* %4, i8** %34, align 8
  %35 = getelementptr inbounds %struct.snd_minor, %struct.snd_minor* %21, i32 0, i32 6
  store %struct.snd_card* %1, %struct.snd_card** %35, align 8
  call void @mutex_lock(%struct.mutex* @sound_mutex)
  %36 = call i32 @snd_find_free_minor(i32 %0)
  %37 = icmp slt i32 %36, 0
  br i1 %37, label %38, label %40

; <label>:38:                                     ; preds = %29
  call void @mutex_unlock(%struct.mutex* @sound_mutex)
  %39 = bitcast %struct.snd_minor* %21 to i8*
  call void @kfree(i8* %39)
  br label %64

; <label>:40:                                     ; preds = %29
  %41 = sext i32 %36 to i64
  %42 = getelementptr inbounds [256 x %struct.snd_minor*], [256 x %struct.snd_minor*]* @snd_minors, i64 0, i64 %41
  store %struct.snd_minor* %21, %struct.snd_minor** %42, align 8
  %43 = load %struct.class*, %struct.class** @sound_class, align 8
  %44 = load i32, i32* @major, align 4
  %45 = shl i32 %44, 20
  %46 = or i32 %45, %36
  %47 = call %struct.device* (%struct.class*, %struct.device*, i32, i8*, i8*, ...) @device_create(%struct.class* %43, %struct.device* %6, i32 %46, i8* %4, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.1, i32 0, i32 0), i8* %5)
  %48 = getelementptr inbounds %struct.snd_minor, %struct.snd_minor* %21, i32 0, i32 5
  store %struct.device* %47, %struct.device** %48, align 8
  %49 = getelementptr inbounds %struct.snd_minor, %struct.snd_minor* %21, i32 0, i32 5
  %50 = load %struct.device*, %struct.device** %49, align 8
  %51 = bitcast %struct.device* %50 to i8*
  %52 = call i64 @IS_ERR(i8* %51)
  %53 = icmp ne i64 %52, 0
  br i1 %53, label %54, label %63

; <label>:54:                                     ; preds = %40
  %55 = sext i32 %36 to i64
  %56 = getelementptr inbounds [256 x %struct.snd_minor*], [256 x %struct.snd_minor*]* @snd_minors, i64 0, i64 %55
  store %struct.snd_minor* null, %struct.snd_minor** %56, align 8
  call void @mutex_unlock(%struct.mutex* @sound_mutex)
  %57 = getelementptr inbounds %struct.snd_minor, %struct.snd_minor* %21, i32 0, i32 5
  %58 = load %struct.device*, %struct.device** %57, align 8
  %59 = bitcast %struct.device* %58 to i8*
  %60 = call i64 @PTR_ERR(i8* %59)
  %61 = trunc i64 %60 to i32
  %62 = bitcast %struct.snd_minor* %21 to i8*
  call void @kfree(i8* %62)
  br label %64

; <label>:63:                                     ; preds = %40
  call void @mutex_unlock(%struct.mutex* @sound_mutex)
  br label %64

; <label>:64:                                     ; preds = %19, %7, %63, %54, %38
  %.0 = phi i32 [ %36, %38 ], [ %61, %54 ], [ 0, %63 ], [ -22, %7 ], [ -12, %19 ]
  ret i32 %.0
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @snd_find_free_minor(i32) #0 {
  switch i32 %0, label %3 [
    i32 1, label %17
    i32 2, label %2
  ]

; <label>:2:                                      ; preds = %1
  br label %17

; <label>:3:                                      ; preds = %1, %15
  %.01 = phi i32 [ %16, %15 ], [ 0, %1 ]
  %4 = sext i32 %.01 to i64
  %5 = icmp ult i64 %4, 256
  br i1 %5, label %6, label %17

; <label>:6:                                      ; preds = %3
  %7 = and i32 %.01, 31
  %8 = icmp eq i32 %7, 0
  br i1 %8, label %15, label %9

; <label>:9:                                      ; preds = %6
  switch i32 %.01, label %10 [
    i32 1, label %15
    i32 33, label %15
  ]

; <label>:10:                                     ; preds = %9
  %11 = sext i32 %.01 to i64
  %12 = getelementptr inbounds [256 x %struct.snd_minor*], [256 x %struct.snd_minor*]* @snd_minors, i64 0, i64 %11
  %13 = load %struct.snd_minor*, %struct.snd_minor** %12, align 8
  %14 = icmp ne %struct.snd_minor* %13, null
  br i1 %14, label %15, label %17

; <label>:15:                                     ; preds = %10, %9, %9, %6
  %16 = add nsw i32 %.01, 1
  br label %3

; <label>:17:                                     ; preds = %3, %10, %1, %2
  %.0 = phi i32 [ 33, %2 ], [ 1, %1 ], [ %.01, %10 ], [ -16, %3 ]
  ret i32 %.0
}

declare void @kfree(i8*) #1

declare %struct.device* @device_create(%struct.class*, %struct.device*, i32, i8*, i8*, ...) #1

; Function Attrs: noinline nounwind uwtable
define internal i64 @IS_ERR(i8*) #0 {
  %2 = ptrtoint i8* %0 to i64
  %3 = icmp uge i64 %2, -4095
  %4 = xor i1 %3, true
  %5 = xor i1 %4, true
  %6 = zext i1 %5 to i32
  %7 = sext i32 %6 to i64
  ret i64 %7
}

; Function Attrs: noinline nounwind uwtable
define internal i64 @PTR_ERR(i8*) #0 {
  %2 = ptrtoint i8* %0 to i64
  ret i64 %2
}

; Function Attrs: noinline nounwind uwtable
define i32 @snd_unregister_device(i32, %struct.snd_card*, i32) #0 {
  call void @mutex_lock(%struct.mutex* @sound_mutex)
  %4 = call i32 @find_snd_minor(i32 %0, %struct.snd_card* %1, i32 %2)
  %5 = icmp slt i32 %4, 0
  br i1 %5, label %6, label %7

; <label>:6:                                      ; preds = %3
  call void @mutex_unlock(%struct.mutex* @sound_mutex)
  br label %18

; <label>:7:                                      ; preds = %3
  %8 = load %struct.class*, %struct.class** @sound_class, align 8
  %9 = load i32, i32* @major, align 4
  %10 = shl i32 %9, 20
  %11 = or i32 %10, %4
  call void @device_destroy(%struct.class* %8, i32 %11)
  %12 = sext i32 %4 to i64
  %13 = getelementptr inbounds [256 x %struct.snd_minor*], [256 x %struct.snd_minor*]* @snd_minors, i64 0, i64 %12
  %14 = load %struct.snd_minor*, %struct.snd_minor** %13, align 8
  %15 = bitcast %struct.snd_minor* %14 to i8*
  call void @kfree(i8* %15)
  %16 = sext i32 %4 to i64
  %17 = getelementptr inbounds [256 x %struct.snd_minor*], [256 x %struct.snd_minor*]* @snd_minors, i64 0, i64 %16
  store %struct.snd_minor* null, %struct.snd_minor** %17, align 8
  call void @mutex_unlock(%struct.mutex* @sound_mutex)
  br label %18

; <label>:18:                                     ; preds = %7, %6
  %.0 = phi i32 [ -22, %6 ], [ 0, %7 ]
  ret i32 %.0
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @find_snd_minor(i32, %struct.snd_card*, i32) #0 {
  %4 = icmp ne %struct.snd_card* %1, null
  br i1 %4, label %5, label %8

; <label>:5:                                      ; preds = %3
  %6 = getelementptr inbounds %struct.snd_card, %struct.snd_card* %1, i32 0, i32 0
  %7 = load i32, i32* %6, align 8
  br label %8

; <label>:8:                                      ; preds = %3, %5
  %9 = phi i32 [ %7, %5 ], [ -1, %3 ]
  br label %10

; <label>:10:                                     ; preds = %30, %8
  %.01 = phi i32 [ 0, %8 ], [ %31, %30 ]
  %11 = sext i32 %.01 to i64
  %12 = icmp ult i64 %11, 256
  br i1 %12, label %13, label %32

; <label>:13:                                     ; preds = %10
  %14 = sext i32 %.01 to i64
  %15 = getelementptr inbounds [256 x %struct.snd_minor*], [256 x %struct.snd_minor*]* @snd_minors, i64 0, i64 %14
  %16 = load %struct.snd_minor*, %struct.snd_minor** %15, align 8
  %17 = icmp ne %struct.snd_minor* %16, null
  br i1 %17, label %18, label %30

; <label>:18:                                     ; preds = %13
  %19 = getelementptr inbounds %struct.snd_minor, %struct.snd_minor* %16, i32 0, i32 0
  %20 = load i32, i32* %19, align 8
  %21 = icmp eq i32 %20, %0
  br i1 %21, label %22, label %30

; <label>:22:                                     ; preds = %18
  %23 = getelementptr inbounds %struct.snd_minor, %struct.snd_minor* %16, i32 0, i32 1
  %24 = load i32, i32* %23, align 4
  %25 = icmp eq i32 %24, %9
  br i1 %25, label %26, label %30

; <label>:26:                                     ; preds = %22
  %27 = getelementptr inbounds %struct.snd_minor, %struct.snd_minor* %16, i32 0, i32 2
  %28 = load i32, i32* %27, align 8
  %29 = icmp eq i32 %28, %2
  br i1 %29, label %32, label %30

; <label>:30:                                     ; preds = %13, %18, %22, %26
  %31 = add nsw i32 %.01, 1
  br label %10

; <label>:32:                                     ; preds = %10, %26
  %.0 = phi i32 [ %.01, %26 ], [ -1, %10 ]
  ret i32 %.0
}

declare void @device_destroy(%struct.class*, i32) #1

; Function Attrs: noinline nounwind uwtable
define i32 @snd_add_device_sysfs_file(i32, %struct.snd_card*, i32, %struct.device_attribute*) #0 {
  call void @mutex_lock(%struct.mutex* @sound_mutex)
  %5 = call i32 @find_snd_minor(i32 %0, %struct.snd_card* %1, i32 %2)
  %6 = icmp sge i32 %5, 0
  br i1 %6, label %7, label %16

; <label>:7:                                      ; preds = %4
  %8 = sext i32 %5 to i64
  %9 = getelementptr inbounds [256 x %struct.snd_minor*], [256 x %struct.snd_minor*]* @snd_minors, i64 0, i64 %8
  %10 = load %struct.snd_minor*, %struct.snd_minor** %9, align 8
  %11 = getelementptr inbounds %struct.snd_minor, %struct.snd_minor* %10, i32 0, i32 5
  %12 = load %struct.device*, %struct.device** %11, align 8
  %13 = icmp ne %struct.device* %12, null
  br i1 %13, label %14, label %16

; <label>:14:                                     ; preds = %7
  %15 = call i32 @device_create_file(%struct.device* %12, %struct.device_attribute* %3)
  br label %16

; <label>:16:                                     ; preds = %14, %7, %4
  %.0 = phi i32 [ %15, %14 ], [ -22, %7 ], [ -22, %4 ]
  call void @mutex_unlock(%struct.mutex* @sound_mutex)
  ret i32 %.0
}

declare i32 @device_create_file(%struct.device*, %struct.device_attribute*) #1

; Function Attrs: noinline nounwind uwtable
define i32 @snd_minor_info_init() #0 section ".init.text" {
  %1 = call %struct.snd_info_entry* @snd_info_create_module_entry(%struct.module* null, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.2, i32 0, i32 0), %struct.snd_info_entry* null)
  %2 = icmp ne %struct.snd_info_entry* %1, null
  br i1 %2, label %3, label %10

; <label>:3:                                      ; preds = %0
  %4 = getelementptr inbounds %struct.snd_info_entry, %struct.snd_info_entry* %1, i32 0, i32 4
  %5 = bitcast %union.anon.43* %4 to %struct.snd_info_entry_text*
  %6 = getelementptr inbounds %struct.snd_info_entry_text, %struct.snd_info_entry_text* %5, i32 0, i32 0
  store void (%struct.snd_info_entry*, %struct.snd_info_buffer*)* @snd_minor_info_read, void (%struct.snd_info_entry*, %struct.snd_info_buffer*)** %6, align 8
  %7 = call i32 @snd_info_register(%struct.snd_info_entry* %1)
  %8 = icmp slt i32 %7, 0
  br i1 %8, label %9, label %10

; <label>:9:                                      ; preds = %3
  call void @snd_info_free_entry(%struct.snd_info_entry* %1)
  br label %10

; <label>:10:                                     ; preds = %3, %9, %0
  %.1 = phi %struct.snd_info_entry* [ %1, %0 ], [ null, %9 ], [ %1, %3 ]
  store %struct.snd_info_entry* %.1, %struct.snd_info_entry** @snd_minor_info_entry, align 8
  ret i32 0
}

declare %struct.snd_info_entry* @snd_info_create_module_entry(%struct.module*, i8*, %struct.snd_info_entry*) #1

; Function Attrs: noinline nounwind uwtable
define internal void @snd_minor_info_read(%struct.snd_info_entry*, %struct.snd_info_buffer*) #0 {
  call void @mutex_lock(%struct.mutex* @sound_mutex)
  br label %3

; <label>:3:                                      ; preds = %37, %2
  %.0 = phi i32 [ 0, %2 ], [ %38, %37 ]
  %4 = icmp slt i32 %.0, 256
  br i1 %4, label %5, label %39

; <label>:5:                                      ; preds = %3
  %6 = sext i32 %.0 to i64
  %7 = getelementptr inbounds [256 x %struct.snd_minor*], [256 x %struct.snd_minor*]* @snd_minors, i64 0, i64 %6
  %8 = load %struct.snd_minor*, %struct.snd_minor** %7, align 8
  %9 = icmp ne %struct.snd_minor* %8, null
  br i1 %9, label %10, label %37

; <label>:10:                                     ; preds = %5
  %11 = getelementptr inbounds %struct.snd_minor, %struct.snd_minor* %8, i32 0, i32 1
  %12 = load i32, i32* %11, align 4
  %13 = icmp sge i32 %12, 0
  br i1 %13, label %14, label %32

; <label>:14:                                     ; preds = %10
  %15 = getelementptr inbounds %struct.snd_minor, %struct.snd_minor* %8, i32 0, i32 2
  %16 = load i32, i32* %15, align 8
  %17 = icmp sge i32 %16, 0
  %18 = getelementptr inbounds %struct.snd_minor, %struct.snd_minor* %8, i32 0, i32 1
  %19 = load i32, i32* %18, align 4
  br i1 %17, label %20, label %27

; <label>:20:                                     ; preds = %14
  %21 = getelementptr inbounds %struct.snd_minor, %struct.snd_minor* %8, i32 0, i32 2
  %22 = load i32, i32* %21, align 8
  %23 = getelementptr inbounds %struct.snd_minor, %struct.snd_minor* %8, i32 0, i32 0
  %24 = load i32, i32* %23, align 8
  %25 = call i8* @snd_device_type_name(i32 %24)
  %26 = call i32 (%struct.snd_info_buffer*, i8*, ...) @snd_iprintf(%struct.snd_info_buffer* %1, i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.4, i32 0, i32 0), i32 %.0, i32 %19, i32 %22, i8* %25)
  br label %37

; <label>:27:                                     ; preds = %14
  %28 = getelementptr inbounds %struct.snd_minor, %struct.snd_minor* %8, i32 0, i32 0
  %29 = load i32, i32* %28, align 8
  %30 = call i8* @snd_device_type_name(i32 %29)
  %31 = call i32 (%struct.snd_info_buffer*, i8*, ...) @snd_iprintf(%struct.snd_info_buffer* %1, i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.5, i32 0, i32 0), i32 %.0, i32 %19, i8* %30)
  br label %37

; <label>:32:                                     ; preds = %10
  %33 = getelementptr inbounds %struct.snd_minor, %struct.snd_minor* %8, i32 0, i32 0
  %34 = load i32, i32* %33, align 8
  %35 = call i8* @snd_device_type_name(i32 %34)
  %36 = call i32 (%struct.snd_info_buffer*, i8*, ...) @snd_iprintf(%struct.snd_info_buffer* %1, i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.6, i32 0, i32 0), i32 %.0, i8* %35)
  br label %37

; <label>:37:                                     ; preds = %32, %27, %20, %5
  %38 = add nsw i32 %.0, 1
  br label %3

; <label>:39:                                     ; preds = %3
  call void @mutex_unlock(%struct.mutex* @sound_mutex)
  ret void
}

declare i32 @snd_info_register(%struct.snd_info_entry*) #1

declare void @snd_info_free_entry(%struct.snd_info_entry*) #1

; Function Attrs: noinline nounwind uwtable
define i32 @snd_minor_info_done() #0 section ".exit.text" {
  %1 = load %struct.snd_info_entry*, %struct.snd_info_entry** @snd_minor_info_entry, align 8
  call void @snd_info_free_entry(%struct.snd_info_entry* %1)
  ret i32 0
}

; Function Attrs: noinline nounwind uwtable
define internal void @alsa_sound_exit() #0 section ".exit.text" {
  %1 = call i32 @snd_info_minor_unregister()
  %2 = call i32 @snd_info_done()
  %3 = load i32, i32* @major, align 4
  call void @unregister_chrdev(i32 %3, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.3, i32 0, i32 0))
  ret void
}

declare i32 @snd_info_minor_unregister() #1

declare i32 @snd_info_done() #1

; Function Attrs: noinline nounwind uwtable
define internal void @unregister_chrdev(i32, i8*) #0 {
  call void @__unregister_chrdev(i32 %0, i32 0, i32 256, i8* %1)
  ret void
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @alsa_sound_init() #0 section ".init.text" {
  %1 = load i32, i32* @major, align 4
  store i32 %1, i32* @snd_major, align 4
  %2 = load i32, i32* @cards_limit, align 4
  store i32 %2, i32* @snd_ecards_limit, align 4
  %3 = load i32, i32* @major, align 4
  %4 = call i32 @register_chrdev(i32 %3, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.3, i32 0, i32 0), %struct.file_operations* @snd_fops)
  %5 = icmp ne i32 %4, 0
  br i1 %5, label %6, label %9

; <label>:6:                                      ; preds = %0
  %7 = load i32, i32* @major, align 4
  %8 = call i32 (i8*, ...) @printk(i8* getelementptr inbounds ([52 x i8], [52 x i8]* @.str.15, i32 0, i32 0), i32 %7)
  br label %17

; <label>:9:                                      ; preds = %0
  %10 = call i32 @snd_info_init()
  %11 = icmp slt i32 %10, 0
  br i1 %11, label %12, label %14

; <label>:12:                                     ; preds = %9
  %13 = load i32, i32* @major, align 4
  call void @unregister_chrdev(i32 %13, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.3, i32 0, i32 0))
  br label %17

; <label>:14:                                     ; preds = %9
  %15 = call i32 @snd_info_minor_register()
  %16 = call i32 (i8*, ...) @printk(i8* getelementptr inbounds ([57 x i8], [57 x i8]* @.str.16, i32 0, i32 0))
  br label %17

; <label>:17:                                     ; preds = %14, %12, %6
  %.0 = phi i32 [ -5, %6 ], [ -12, %12 ], [ 0, %14 ]
  ret i32 %.0
}

declare i8* @__kmalloc(i64, i32) #1

declare i32 @snd_iprintf(%struct.snd_info_buffer*, i8*, ...) #1

; Function Attrs: noinline nounwind uwtable
define internal i8* @snd_device_type_name(i32) #0 {
  %switch.tableidx = sub i32 %0, 0
  %2 = icmp ult i32 %switch.tableidx, 7
  br i1 %2, label %switch.lookup, label %3

switch.lookup:                                    ; preds = %1
  %switch.gep = getelementptr inbounds [7 x i8*], [7 x i8*]* @switch.table, i32 0, i32 %switch.tableidx
  %switch.load = load i8*, i8** %switch.gep
  ret i8* %switch.load

; <label>:3:                                      ; preds = %1
  ret i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.14, i32 0, i32 0)
}

declare void @__unregister_chrdev(i32, i32, i32, i8*) #1

; Function Attrs: noinline nounwind uwtable
define internal i32 @register_chrdev(i32, i8*, %struct.file_operations*) #0 {
  %4 = call i32 @__register_chrdev(i32 %0, i32 0, i32 256, i8* %1, %struct.file_operations* %2)
  ret i32 %4
}

declare i32 @printk(i8*, ...) #1

declare i32 @snd_info_init() #1

declare i32 @snd_info_minor_register() #1

declare i32 @__register_chrdev(i32, i32, i32, i8*, %struct.file_operations*) #1

declare i64 @noop_llseek(%struct.file*, i64, i32) #1

; Function Attrs: noinline nounwind uwtable
define internal i32 @snd_open(%struct.inode*, %struct.file*) #0 {
  %3 = call i32 @iminor(%struct.inode* %0)
  %4 = zext i32 %3 to i64
  %5 = icmp uge i64 %4, 256
  br i1 %5, label %77, label %6

; <label>:6:                                      ; preds = %2
  call void @mutex_lock(%struct.mutex* @sound_mutex)
  %7 = zext i32 %3 to i64
  %8 = getelementptr inbounds [256 x %struct.snd_minor*], [256 x %struct.snd_minor*]* @snd_minors, i64 0, i64 %7
  %9 = load %struct.snd_minor*, %struct.snd_minor** %8, align 8
  %10 = icmp eq %struct.snd_minor* %9, null
  br i1 %10, label %11, label %15

; <label>:11:                                     ; preds = %6
  %12 = call %struct.snd_minor* @autoload_device(i32 %3)
  %13 = icmp ne %struct.snd_minor* %12, null
  br i1 %13, label %15, label %14

; <label>:14:                                     ; preds = %11
  call void @mutex_unlock(%struct.mutex* @sound_mutex)
  br label %77

; <label>:15:                                     ; preds = %11, %6
  %.02 = phi %struct.snd_minor* [ %9, %6 ], [ %12, %11 ]
  %16 = getelementptr inbounds %struct.file, %struct.file* %1, i32 0, i32 3
  %17 = load %struct.file_operations*, %struct.file_operations** %16, align 8
  %18 = getelementptr inbounds %struct.snd_minor, %struct.snd_minor* %.02, i32 0, i32 3
  %19 = load %struct.file_operations*, %struct.file_operations** %18, align 8
  %20 = icmp ne %struct.file_operations* %19, null
  br i1 %20, label %21, label %30

; <label>:21:                                     ; preds = %15
  %22 = getelementptr inbounds %struct.snd_minor, %struct.snd_minor* %.02, i32 0, i32 3
  %23 = load %struct.file_operations*, %struct.file_operations** %22, align 8
  %24 = getelementptr inbounds %struct.file_operations, %struct.file_operations* %23, i32 0, i32 0
  %25 = load %struct.module*, %struct.module** %24, align 8
  %26 = call zeroext i1 @try_module_get(%struct.module* %25)
  br i1 %26, label %27, label %30

; <label>:27:                                     ; preds = %21
  %28 = getelementptr inbounds %struct.snd_minor, %struct.snd_minor* %.02, i32 0, i32 3
  %29 = load %struct.file_operations*, %struct.file_operations** %28, align 8
  br label %30

; <label>:30:                                     ; preds = %15, %21, %27
  %31 = phi %struct.file_operations* [ %29, %27 ], [ null, %21 ], [ null, %15 ]
  %32 = getelementptr inbounds %struct.file, %struct.file* %1, i32 0, i32 3
  store %struct.file_operations* %31, %struct.file_operations** %32, align 8
  %33 = getelementptr inbounds %struct.file, %struct.file* %1, i32 0, i32 3
  %34 = load %struct.file_operations*, %struct.file_operations** %33, align 8
  %35 = icmp eq %struct.file_operations* %34, null
  br i1 %35, label %36, label %38

; <label>:36:                                     ; preds = %30
  %37 = getelementptr inbounds %struct.file, %struct.file* %1, i32 0, i32 3
  store %struct.file_operations* %17, %struct.file_operations** %37, align 8
  br label %38

; <label>:38:                                     ; preds = %36, %30
  %.01 = phi i32 [ -19, %36 ], [ 0, %30 ]
  call void @mutex_unlock(%struct.mutex* @sound_mutex)
  %39 = icmp slt i32 %.01, 0
  br i1 %39, label %77, label %40

; <label>:40:                                     ; preds = %38
  %41 = getelementptr inbounds %struct.file, %struct.file* %1, i32 0, i32 3
  %42 = load %struct.file_operations*, %struct.file_operations** %41, align 8
  %43 = getelementptr inbounds %struct.file_operations, %struct.file_operations* %42, i32 0, i32 11
  %44 = load i32 (%struct.inode*, %struct.file*)*, i32 (%struct.inode*, %struct.file*)** %43, align 8
  %45 = icmp ne i32 (%struct.inode*, %struct.file*)* %44, null
  br i1 %45, label %46, label %72

; <label>:46:                                     ; preds = %40
  %47 = getelementptr inbounds %struct.file, %struct.file* %1, i32 0, i32 3
  %48 = load %struct.file_operations*, %struct.file_operations** %47, align 8
  %49 = getelementptr inbounds %struct.file_operations, %struct.file_operations* %48, i32 0, i32 11
  %50 = load i32 (%struct.inode*, %struct.file*)*, i32 (%struct.inode*, %struct.file*)** %49, align 8
  %51 = call i32 %50(%struct.inode* %0, %struct.file* %1)
  %52 = icmp ne i32 %51, 0
  br i1 %52, label %53, label %72

; <label>:53:                                     ; preds = %46
  %54 = getelementptr inbounds %struct.file, %struct.file* %1, i32 0, i32 3
  %55 = load %struct.file_operations*, %struct.file_operations** %54, align 8
  %56 = icmp ne %struct.file_operations* %55, null
  br i1 %56, label %57, label %62

; <label>:57:                                     ; preds = %53
  %58 = getelementptr inbounds %struct.file, %struct.file* %1, i32 0, i32 3
  %59 = load %struct.file_operations*, %struct.file_operations** %58, align 8
  %60 = getelementptr inbounds %struct.file_operations, %struct.file_operations* %59, i32 0, i32 0
  %61 = load %struct.module*, %struct.module** %60, align 8
  call void @module_put(%struct.module* %61)
  br label %62

; <label>:62:                                     ; preds = %53, %57
  %63 = icmp ne %struct.file_operations* %17, null
  br i1 %63, label %64, label %68

; <label>:64:                                     ; preds = %62
  %65 = getelementptr inbounds %struct.file_operations, %struct.file_operations* %17, i32 0, i32 0
  %66 = load %struct.module*, %struct.module** %65, align 8
  %67 = call zeroext i1 @try_module_get(%struct.module* %66)
  br i1 %67, label %69, label %68

; <label>:68:                                     ; preds = %64, %62
  br label %69

; <label>:69:                                     ; preds = %64, %68
  %70 = phi %struct.file_operations* [ null, %68 ], [ %17, %64 ]
  %71 = getelementptr inbounds %struct.file, %struct.file* %1, i32 0, i32 3
  store %struct.file_operations* %70, %struct.file_operations** %71, align 8
  br label %72

; <label>:72:                                     ; preds = %40, %69, %46
  %.1 = phi i32 [ %.01, %40 ], [ %51, %69 ], [ %51, %46 ]
  %73 = icmp ne %struct.file_operations* %17, null
  br i1 %73, label %74, label %77

; <label>:74:                                     ; preds = %72
  %75 = getelementptr inbounds %struct.file_operations, %struct.file_operations* %17, i32 0, i32 0
  %76 = load %struct.module*, %struct.module** %75, align 8
  call void @module_put(%struct.module* %76)
  br label %77

; <label>:77:                                     ; preds = %74, %72, %38, %2, %14
  %.0 = phi i32 [ -19, %14 ], [ -19, %2 ], [ %.01, %38 ], [ %.1, %72 ], [ %.1, %74 ]
  ret i32 %.0
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @iminor(%struct.inode*) #0 {
  %2 = getelementptr inbounds %struct.inode, %struct.inode* %0, i32 0, i32 13
  %3 = load i32, i32* %2, align 4
  %4 = and i32 %3, 1048575
  ret i32 %4
}

; Function Attrs: noinline nounwind uwtable
define internal %struct.snd_minor* @autoload_device(i32) #0 {
  call void @mutex_unlock(%struct.mutex* @sound_mutex)
  %2 = and i32 %0, 31
  switch i32 %2, label %11 [
    i32 0, label %3
    i32 1, label %10
  ]

; <label>:3:                                      ; preds = %1
  %4 = lshr i32 %0, 5
  %5 = sext i32 %4 to i64
  %6 = getelementptr inbounds [32 x %struct.snd_card*], [32 x %struct.snd_card*]* @snd_cards, i64 0, i64 %5
  %7 = load %struct.snd_card*, %struct.snd_card** %6, align 8
  %8 = icmp eq %struct.snd_card* %7, null
  br i1 %8, label %9, label %11

; <label>:9:                                      ; preds = %3
  call void @snd_request_card(i32 %4)
  br label %11

; <label>:10:                                     ; preds = %1
  call void @snd_request_other(i32 %0)
  br label %11

; <label>:11:                                     ; preds = %10, %1, %3, %9
  call void @mutex_lock(%struct.mutex* @sound_mutex)
  %12 = zext i32 %0 to i64
  %13 = getelementptr inbounds [256 x %struct.snd_minor*], [256 x %struct.snd_minor*]* @snd_minors, i64 0, i64 %12
  %14 = load %struct.snd_minor*, %struct.snd_minor** %13, align 8
  ret %struct.snd_minor* %14
}

declare zeroext i1 @try_module_get(%struct.module*) #1

declare void @module_put(%struct.module*) #1

; Function Attrs: noinline nounwind uwtable
define internal void @snd_request_other(i32) #0 {
  switch i32 %0, label %5 [
    i32 1, label %3
    i32 33, label %2
  ]

; <label>:2:                                      ; preds = %1
  br label %3

; <label>:3:                                      ; preds = %1, %2
  %.0 = phi i8* [ getelementptr inbounds ([10 x i8], [10 x i8]* @.str.18, i32 0, i32 0), %2 ], [ getelementptr inbounds ([8 x i8], [8 x i8]* @.str.17, i32 0, i32 0), %1 ]
  %4 = call i32 (i1, i8*, ...) @__request_module(i1 zeroext true, i8* %.0)
  br label %5

; <label>:5:                                      ; preds = %1, %3
  ret void
}

attributes #0 = { noinline nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { nounwind }

!llvm.ident = !{!0}

!0 = !{!"clang version 4.0.1 (tags/RELEASE_401/final)"}
!1 = !{i32 -2146797796, i32 -2146797757, i32 -2146797736, i32 -2146797699, i32 -2146797676, i32 -2146797806}
