; ModuleID = 'sound/core/sound.bc'
source_filename = "sound/core/sound.c"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%struct.kernel_symbol = type { i64, i8* }
%struct.kernel_param_ops = type { i32, i32 (i8*, %struct.kernel_param*)*, i32 (i8*, %struct.kernel_param*)*, void (i8*)* }
%struct.kernel_param = type { i8*, %struct.module*, %struct.kernel_param_ops*, i16, i8, i8, %union.anon.46 }
%struct.module = type { i32, %struct.list_head, [56 x i8], %struct.module_kobject, %struct.module_attribute*, i8*, i8*, %struct.kobject*, %struct.kernel_symbol*, i32*, i32, %struct.mutex, %struct.kernel_param*, i32, i32, %struct.kernel_symbol*, i32*, i8, %struct.kernel_symbol*, i32*, i32, i32, %struct.exception_table_entry*, i32 ()*, [40 x i8], %struct.module_layout, %struct.module_layout, %struct.mod_arch_specific, i64, i32, %struct.list_head, %struct.bug_entry*, %struct.mod_kallsyms*, %struct.mod_kallsyms, %struct.module_sect_attrs*, %struct.module_notes_attrs*, i8*, i8*, i32, i32, %struct.tracepoint**, i32, i8**, %struct.trace_event_call**, i32, %struct.trace_enum_map**, i32, %struct.list_head, %struct.list_head, void ()*, %struct.atomic_t, [12 x i8] }
%struct.module_kobject = type { %struct.kobject, %struct.module*, %struct.kobject*, %struct.module_param_attrs*, %struct.completion* }
%struct.kobject = type { i8*, %struct.list_head, %struct.kobject*, %struct.kset*, %struct.kobj_type*, %struct.kernfs_node*, %struct.kref, i8 }
%struct.kset = type { %struct.list_head, %struct.spinlock, %struct.kobject, %struct.kset_uevent_ops* }
%struct.spinlock = type { %union.anon.1 }
%union.anon.1 = type { %struct.raw_spinlock }
%struct.raw_spinlock = type { %struct.qspinlock }
%struct.qspinlock = type { %struct.atomic_t }
%struct.kset_uevent_ops = type { i32 (%struct.kset*, %struct.kobject*)*, i8* (%struct.kset*, %struct.kobject*)*, i32 (%struct.kset*, %struct.kobject*, %struct.kobj_uevent_env*)* }
%struct.kobj_uevent_env = type { [3 x i8*], [32 x i8*], i32, [2048 x i8], i32 }
%struct.kobj_type = type { void (%struct.kobject*)*, %struct.sysfs_ops*, %struct.attribute**, %struct.kobj_ns_type_operations* (%struct.kobject*)*, i8* (%struct.kobject*)* }
%struct.sysfs_ops = type { i64 (%struct.kobject*, %struct.attribute*, i8*)*, i64 (%struct.kobject*, %struct.attribute*, i8*, i64)* }
%struct.attribute = type { i8*, i16 }
%struct.kobj_ns_type_operations = type { i32, i1 ()*, i8* ()*, i8* (%struct.sock*)*, i8* ()*, void (i8*)* }
%struct.sock = type opaque
%struct.kernfs_node = type { %struct.atomic_t, %struct.atomic_t, %struct.kernfs_node*, i8*, %struct.rb_node, i8*, i32, %union.anon, i8*, i16, i16, i32, %struct.kernfs_iattrs* }
%struct.rb_node = type { i64, %struct.rb_node*, %struct.rb_node* }
%union.anon = type { %struct.kernfs_elem_attr }
%struct.kernfs_elem_attr = type { %struct.kernfs_ops*, %struct.kernfs_open_node*, i64, %struct.kernfs_node* }
%struct.kernfs_ops = type { i32 (%struct.kernfs_open_file*)*, void (%struct.kernfs_open_file*)*, i32 (%struct.seq_file*, i8*)*, i8* (%struct.seq_file*, i64*)*, i8* (%struct.seq_file*, i8*, i64*)*, void (%struct.seq_file*, i8*)*, i64 (%struct.kernfs_open_file*, i8*, i64, i64)*, i64, i8, i64 (%struct.kernfs_open_file*, i8*, i64, i64)*, i32 (%struct.kernfs_open_file*, %struct.vm_area_struct*)* }
%struct.kernfs_open_file = type { %struct.kernfs_node*, %struct.file*, %struct.seq_file*, i8*, %struct.mutex, %struct.mutex, i32, %struct.list_head, i8*, i64, i8, %struct.vm_operations_struct* }
%struct.file = type { %union.anon.2, %struct.path, %struct.inode*, %struct.file_operations*, %struct.spinlock, %struct.atomic64_t, i32, i32, %struct.mutex, i64, %struct.fown_struct, %struct.cred*, %struct.file_ra_state, i64, i8*, i8*, %struct.list_head, %struct.list_head, %struct.address_space* }
%union.anon.2 = type { %struct.callback_head }
%struct.callback_head = type { %struct.callback_head*, void (%struct.callback_head*)* }
%struct.path = type { %struct.vfsmount*, %struct.dentry* }
%struct.vfsmount = type opaque
%struct.dentry = type { i32, %struct.seqcount, %struct.hlist_bl_node, %struct.dentry*, %struct.qstr, %struct.inode*, [32 x i8], %struct.lockref, %struct.dentry_operations*, %struct.super_block*, i64, i8*, %union.anon.44, %struct.list_head, %struct.list_head, %union.anon.45 }
%struct.seqcount = type { i32 }
%struct.hlist_bl_node = type { %struct.hlist_bl_node*, %struct.hlist_bl_node** }
%struct.qstr = type { %union.anon.3, i8* }
%union.anon.3 = type { i64 }
%struct.lockref = type { %union.anon.42 }
%union.anon.42 = type { i64 }
%struct.dentry_operations = type { i32 (%struct.dentry*, i32)*, i32 (%struct.dentry*, i32)*, i32 (%struct.dentry*, %struct.qstr*)*, i32 (%struct.dentry*, i32, i8*, %struct.qstr*)*, i32 (%struct.dentry*)*, i32 (%struct.dentry*)*, void (%struct.dentry*)*, void (%struct.dentry*)*, void (%struct.dentry*, %struct.inode*)*, i8* (%struct.dentry*, i8*, i32)*, %struct.vfsmount* (%struct.path*)*, i32 (%struct.path*, i1)*, %struct.dentry* (%struct.dentry*, %struct.inode*, i32)*, [24 x i8] }
%struct.super_block = type { %struct.list_head, i32, i8, i64, i64, %struct.file_system_type*, %struct.super_operations*, %struct.dquot_operations*, %struct.quotactl_ops*, %struct.export_operations*, i64, i64, i64, %struct.dentry*, %struct.rw_semaphore, i32, %struct.atomic_t, i8*, %struct.xattr_handler**, %struct.fscrypt_operations*, %struct.hlist_bl_head, %struct.list_head, %struct.block_device*, %struct.backing_dev_info*, %struct.mtd_info*, %struct.hlist_node, i32, %struct.quota_info, %struct.sb_writers, [32 x i8], [16 x i8], i8*, i32, i32, i32, %struct.mutex, i8*, i8*, %struct.dentry_operations*, i32, %struct.shrinker, %struct.atomic64_t, i32, %struct.workqueue_struct*, %struct.hlist_head, %struct.user_namespace*, %struct.list_lru, [56 x i8], %struct.list_lru, %struct.callback_head, %struct.work_struct, %struct.mutex, i32, [36 x i8], %struct.spinlock, %struct.list_head, %struct.spinlock, %struct.list_head, [16 x i8] }
%struct.file_system_type = type { i8*, i32, %struct.dentry* (%struct.file_system_type*, i32, i8*, i8*)*, void (%struct.super_block*)*, %struct.module*, %struct.file_system_type*, %struct.hlist_head, %struct.lock_class_key, %struct.lock_class_key, %struct.lock_class_key, [3 x %struct.lock_class_key], %struct.lock_class_key, %struct.lock_class_key, %struct.lock_class_key }
%struct.lock_class_key = type {}
%struct.super_operations = type { %struct.inode* (%struct.super_block*)*, void (%struct.inode*)*, void (%struct.inode*, i32)*, i32 (%struct.inode*, %struct.writeback_control*)*, i32 (%struct.inode*)*, void (%struct.inode*)*, void (%struct.super_block*)*, i32 (%struct.super_block*, i32)*, i32 (%struct.super_block*)*, i32 (%struct.super_block*)*, i32 (%struct.super_block*)*, i32 (%struct.super_block*)*, i32 (%struct.dentry*, %struct.kstatfs*)*, i32 (%struct.super_block*, i32*, i8*)*, void (%struct.super_block*)*, i32 (%struct.seq_file*, %struct.dentry*)*, i32 (%struct.seq_file*, %struct.dentry*)*, i32 (%struct.seq_file*, %struct.dentry*)*, i32 (%struct.seq_file*, %struct.dentry*)*, i64 (%struct.super_block*, i32, i8*, i64, i64)*, i64 (%struct.super_block*, i32, i8*, i64, i64)*, %struct.dquot** (%struct.inode*)*, i32 (%struct.super_block*, %struct.page*, i32)*, i64 (%struct.super_block*, %struct.shrink_control*)*, i64 (%struct.super_block*, %struct.shrink_control*)* }
%struct.writeback_control = type opaque
%struct.kstatfs = type opaque
%struct.dquot = type { %struct.hlist_node, %struct.list_head, %struct.list_head, %struct.list_head, %struct.mutex, %struct.atomic_t, %struct.__wait_queue_head, %struct.super_block*, %struct.kqid, i64, i64, %struct.mem_dqblk }
%struct.__wait_queue_head = type { %struct.spinlock, %struct.list_head }
%struct.kqid = type { %union.anon.4, i32 }
%union.anon.4 = type { %struct.kuid_t }
%struct.kuid_t = type { i32 }
%struct.mem_dqblk = type { i64, i64, i64, i64, i64, i64, i64, i64, i64 }
%struct.page = type { i64, %union.anon.5, %union.anon.28, %union.anon.29, %union.anon.33, %union.anon.36, [8 x i8] }
%union.anon.5 = type { %struct.address_space* }
%union.anon.28 = type { i64 }
%union.anon.29 = type { i64 }
%union.anon.33 = type { %struct.list_head }
%union.anon.36 = type { i64 }
%struct.shrink_control = type { i32, i64, i32, %struct.mem_cgroup* }
%struct.mem_cgroup = type opaque
%struct.dquot_operations = type { i32 (%struct.dquot*)*, %struct.dquot* (%struct.super_block*, i32)*, void (%struct.dquot*)*, i32 (%struct.dquot*)*, i32 (%struct.dquot*)*, i32 (%struct.dquot*)*, i32 (%struct.super_block*, i32)*, i64* (%struct.inode*)*, i32 (%struct.inode*, %struct.kprojid_t*)*, i32 (%struct.super_block*, %struct.kqid*)* }
%struct.kprojid_t = type { i32 }
%struct.quotactl_ops = type { i32 (%struct.super_block*, i32, i32, %struct.path*)*, i32 (%struct.super_block*, i32)*, i32 (%struct.super_block*, i32)*, i32 (%struct.super_block*, i32)*, i32 (%struct.super_block*, i32)*, i32 (%struct.super_block*, i32, %struct.qc_info*)*, i32 (%struct.super_block*, i64, %struct.qc_dqblk*)*, i32 (%struct.super_block*, %struct.kqid*, %struct.qc_dqblk*)*, i32 (%struct.super_block*, i64, %struct.qc_dqblk*)*, i32 (%struct.super_block*, %struct.qc_state*)*, i32 (%struct.super_block*, i32)* }
%struct.qc_info = type { i32, i32, i32, i32, i32, i32, i32, i32 }
%struct.qc_dqblk = type { i32, i64, i64, i64, i64, i64, i64, i64, i64, i32, i32, i64, i64, i64, i64, i32 }
%struct.qc_state = type { i32, [3 x %struct.qc_type_state] }
%struct.qc_type_state = type { i32, i32, i32, i32, i32, i32, i32, i64, i64, i64 }
%struct.export_operations = type opaque
%struct.rw_semaphore = type { %struct.atomic64_t, %struct.list_head, %struct.raw_spinlock, %struct.optimistic_spin_queue, %struct.task_struct* }
%struct.optimistic_spin_queue = type { %struct.atomic_t }
%struct.task_struct = type { %struct.thread_info, i64, i8*, %struct.atomic_t, i32, i32, %struct.llist_node, i32, i32, i32, i64, %struct.task_struct*, i32, i32, i32, i32, i32, i32, %struct.sched_class*, [16 x i8], %struct.sched_entity, %struct.sched_rt_entity, %struct.task_group*, %struct.sched_dl_entity, i32, i32, i32, %struct.cpumask, %struct.sched_info, %struct.list_head, %struct.plist_node, %struct.rb_node, %struct.mm_struct*, %struct.mm_struct*, %struct.vmacache, %struct.task_rss_stat, i32, i32, i32, i32, i64, i32, i8, [3 x i8], i8, i64, %struct.restart_block, i32, i32, %struct.task_struct*, %struct.task_struct*, %struct.list_head, %struct.list_head, %struct.task_struct*, %struct.list_head, %struct.list_head, [3 x %struct.pid_link], %struct.list_head, %struct.list_head, %struct.completion*, i32*, i32*, i64, i64, i64, %struct.prev_cputime, i64, i64, i64, i64, i64, i64, %struct.task_cputime, [3 x %struct.list_head], %struct.cred*, %struct.cred*, %struct.cred*, [16 x i8], %struct.nameidata*, %struct.sysv_sem, %struct.sysv_shm, %struct.fs_struct*, %struct.files_struct*, %struct.nsproxy*, %struct.signal_struct*, %struct.sighand_struct*, %struct.sigset_t, %struct.sigset_t, %struct.sigset_t, %struct.sigpending, i64, i64, i32, %struct.callback_head*, %struct.audit_context*, %struct.kuid_t, i32, %struct.seccomp, i32, i32, %struct.spinlock, %struct.raw_spinlock, %struct.wake_q_node, %struct.rb_root, %struct.rb_node*, %struct.rt_mutex_waiter*, i8*, %struct.bio_list*, %struct.blk_plug*, %struct.reclaim_state*, %struct.backing_dev_info*, %struct.io_context*, i64, %struct.siginfo*, %struct.task_io_accounting, i64, i64, i64, %struct.nodemask_t, %struct.seqcount, i32, i32, %struct.css_set*, %struct.list_head, %struct.robust_list_head*, %struct.compat_robust_list_head*, %struct.list_head, %struct.futex_pi_state*, [2 x %struct.perf_event_context*], %struct.mutex, %struct.list_head, %struct.mempolicy*, i16, i16, %struct.tlbflush_unmap_batch, %struct.callback_head, %struct.pipe_inode_info*, %struct.page_frag, %struct.task_delay_info*, i32, i32, i64, i64, i64, i64, i64, i32, %struct.task_struct*, %struct.vm_struct*, %struct.atomic_t, [28 x i8], %struct.thread_struct }
%struct.thread_info = type { i64 }
%struct.llist_node = type { %struct.llist_node* }
%struct.sched_class = type opaque
%struct.sched_entity = type { %struct.load_weight, %struct.rb_node, %struct.list_head, i32, i64, i64, i64, i64, i64, %struct.sched_statistics, i32, %struct.sched_entity*, %struct.cfs_rq*, %struct.cfs_rq*, [32 x i8], %struct.sched_avg, [24 x i8] }
%struct.load_weight = type { i64, i32 }
%struct.sched_statistics = type { i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64 }
%struct.cfs_rq = type opaque
%struct.sched_avg = type { i64, i64, i32, i32, i64, i64 }
%struct.sched_rt_entity = type { %struct.list_head, i64, i64, i32, i16, i16, %struct.sched_rt_entity* }
%struct.task_group = type opaque
%struct.sched_dl_entity = type { %struct.rb_node, i64, i64, i64, i64, i64, i64, i32, i32, i32, i32, %struct.hrtimer }
%struct.hrtimer = type { %struct.timerqueue_node, i64, i32 (%struct.hrtimer*)*, %struct.hrtimer_clock_base*, i8, i8 }
%struct.timerqueue_node = type { %struct.rb_node, i64 }
%struct.hrtimer_clock_base = type { %struct.hrtimer_cpu_base*, i32, i32, %struct.timerqueue_head, i64 ()*, i64, [16 x i8] }
%struct.hrtimer_cpu_base = type { %struct.raw_spinlock, %struct.seqcount, %struct.hrtimer*, i32, i32, i32, i8, i8, i8, i64, %struct.hrtimer*, i32, i32, i32, i32, [4 x %struct.hrtimer_clock_base] }
%struct.timerqueue_head = type { %struct.rb_root, %struct.timerqueue_node* }
%struct.cpumask = type { [1 x i64] }
%struct.sched_info = type { i64, i64, i64, i64 }
%struct.plist_node = type { i32, %struct.list_head, %struct.list_head }
%struct.mm_struct = type { %struct.vm_area_struct*, %struct.rb_root, i32, i64 (%struct.file*, i64, i64, i64, i64)*, i64, i64, i64, i64, %struct.pgd_t*, %struct.atomic_t, %struct.atomic_t, %struct.atomic64_t, %struct.atomic64_t, i32, %struct.spinlock, %struct.rw_semaphore, %struct.list_head, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, [46 x i64], %struct.mm_rss_stat, %struct.linux_binfmt*, [1 x %struct.cpumask], %struct.mm_context_t, i64, %struct.core_state*, %struct.spinlock, %struct.kioctx_table*, %struct.user_namespace*, %struct.file*, %struct.mmu_notifier_mm*, i8, %struct.uprobes_state, %struct.atomic64_t, %struct.work_struct }
%struct.vm_area_struct = type { i64, i64, %struct.vm_area_struct*, %struct.vm_area_struct*, %struct.rb_node, i64, %struct.mm_struct*, %struct.pgprot, i64, %struct.anon.6, %struct.list_head, %struct.anon_vma*, %struct.vm_operations_struct*, i64, %struct.file*, i8*, %struct.mempolicy*, %struct.vm_userfaultfd_ctx }
%struct.pgprot = type { i64 }
%struct.anon.6 = type { %struct.rb_node, i64 }
%struct.anon_vma = type opaque
%struct.vm_userfaultfd_ctx = type {}
%struct.pgd_t = type { i64 }
%struct.mm_rss_stat = type { [4 x %struct.atomic64_t] }
%struct.linux_binfmt = type opaque
%struct.mm_context_t = type { %struct.ldt_struct*, i16, %struct.mutex, i8*, %struct.vdso_image*, %struct.atomic_t, i16, i16 }
%struct.ldt_struct = type opaque
%struct.vdso_image = type { i8*, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64 }
%struct.core_state = type { %struct.atomic_t, %struct.core_thread, %struct.completion }
%struct.core_thread = type { %struct.task_struct*, %struct.core_thread* }
%struct.completion = type { i32, %struct.__wait_queue_head }
%struct.kioctx_table = type opaque
%struct.mmu_notifier_mm = type opaque
%struct.uprobes_state = type {}
%struct.vmacache = type { i32, [4 x %struct.vm_area_struct*] }
%struct.task_rss_stat = type { i32, [4 x i32] }
%struct.restart_block = type { i64 (%struct.restart_block*)*, %union.anon.7 }
%union.anon.7 = type { %struct.anon.8 }
%struct.anon.8 = type { i32*, i32, i32, i32, i64, i32* }
%struct.pid_link = type { %struct.hlist_node, %struct.pid* }
%struct.pid = type { %struct.atomic_t, i32, [3 x %struct.hlist_head], %struct.callback_head, [1 x %struct.upid] }
%struct.upid = type { i32, %struct.pid_namespace*, %struct.hlist_node }
%struct.pid_namespace = type opaque
%struct.prev_cputime = type { i64, i64, %struct.raw_spinlock }
%struct.task_cputime = type { i64, i64, i64 }
%struct.nameidata = type opaque
%struct.sysv_sem = type { %struct.sem_undo_list* }
%struct.sem_undo_list = type opaque
%struct.sysv_shm = type { %struct.list_head }
%struct.fs_struct = type opaque
%struct.files_struct = type opaque
%struct.nsproxy = type opaque
%struct.signal_struct = type opaque
%struct.sighand_struct = type opaque
%struct.sigset_t = type { [1 x i64] }
%struct.sigpending = type { %struct.list_head, %struct.sigset_t }
%struct.audit_context = type opaque
%struct.seccomp = type { i32, %struct.seccomp_filter* }
%struct.seccomp_filter = type opaque
%struct.wake_q_node = type { %struct.wake_q_node* }
%struct.rb_root = type { %struct.rb_node* }
%struct.rt_mutex_waiter = type opaque
%struct.bio_list = type opaque
%struct.blk_plug = type opaque
%struct.reclaim_state = type opaque
%struct.io_context = type opaque
%struct.siginfo = type { i32, i32, i32, %union.anon.11 }
%union.anon.11 = type { %struct.anon.15, [80 x i8] }
%struct.anon.15 = type { i32, i32, i32, i64, i64 }
%struct.task_io_accounting = type { i64, i64, i64, i64, i64, i64, i64 }
%struct.nodemask_t = type { [1 x i64] }
%struct.css_set = type opaque
%struct.robust_list_head = type opaque
%struct.compat_robust_list_head = type opaque
%struct.futex_pi_state = type opaque
%struct.perf_event_context = type opaque
%struct.mempolicy = type opaque
%struct.tlbflush_unmap_batch = type { %struct.cpumask, i8, i8 }
%struct.pipe_inode_info = type opaque
%struct.page_frag = type { %struct.page*, i32, i32 }
%struct.task_delay_info = type opaque
%struct.vm_struct = type opaque
%struct.thread_struct = type { [3 x %struct.desc_struct], i64, i64, i16, i16, i16, i16, i32, i64, i64, [4 x %struct.perf_event*], i64, i64, i64, i64, i64, i64*, i64, i32, %struct.mm_segment_t, i8, [15 x i8], %struct.fpu }
%struct.desc_struct = type { %union.anon.21 }
%union.anon.21 = type { %struct.anon.22 }
%struct.anon.22 = type { i32, i32 }
%struct.perf_event = type opaque
%struct.mm_segment_t = type { i64 }
%struct.fpu = type { i32, i8, i8, [58 x i8], %union.fpregs_state }
%union.fpregs_state = type { %struct.xregs_state, [3520 x i8] }
%struct.xregs_state = type { %struct.fxregs_state, %struct.xstate_header, [0 x i8] }
%struct.fxregs_state = type { i16, i16, i16, i16, %union.anon.24, i32, i32, [32 x i32], [64 x i32], [12 x i32], %union.anon.27 }
%union.anon.24 = type { %struct.anon.25 }
%struct.anon.25 = type { i64, i64 }
%union.anon.27 = type { [12 x i32] }
%struct.xstate_header = type { i64, i64, [6 x i64] }
%struct.xattr_handler = type opaque
%struct.fscrypt_operations = type opaque
%struct.hlist_bl_head = type { %struct.hlist_bl_node* }
%struct.block_device = type { i32, i32, %struct.inode*, %struct.super_block*, %struct.mutex, i8*, i8*, i32, i8, %struct.list_head, %struct.block_device*, i32, %struct.hd_struct*, i32, i32, %struct.gendisk*, %struct.request_queue*, %struct.backing_dev_info*, %struct.list_head, i64, i32, %struct.mutex }
%struct.hd_struct = type opaque
%struct.gendisk = type opaque
%struct.request_queue = type opaque
%struct.backing_dev_info = type opaque
%struct.mtd_info = type opaque
%struct.hlist_node = type { %struct.hlist_node*, %struct.hlist_node** }
%struct.quota_info = type { i32, %struct.mutex, [3 x %struct.inode*], [3 x %struct.mem_dqinfo], [3 x %struct.quota_format_ops*] }
%struct.mem_dqinfo = type { %struct.quota_format_type*, i32, %struct.list_head, i64, i32, i32, i64, i64, i8* }
%struct.quota_format_type = type { i32, %struct.quota_format_ops*, %struct.module*, %struct.quota_format_type* }
%struct.quota_format_ops = type { i32 (%struct.super_block*, i32)*, i32 (%struct.super_block*, i32)*, i32 (%struct.super_block*, i32)*, i32 (%struct.super_block*, i32)*, i32 (%struct.dquot*)*, i32 (%struct.dquot*)*, i32 (%struct.dquot*)*, i32 (%struct.super_block*, %struct.kqid*)* }
%struct.sb_writers = type { i32, %struct.__wait_queue_head, [3 x %struct.percpu_rw_semaphore] }
%struct.percpu_rw_semaphore = type { %struct.rcu_sync, i32*, %struct.rw_semaphore, %struct.rcuwait, i32 }
%struct.rcu_sync = type { i32, i32, %struct.__wait_queue_head, i32, %struct.callback_head, i32 }
%struct.rcuwait = type { %struct.task_struct* }
%struct.shrinker = type { i64 (%struct.shrinker*, %struct.shrink_control*)*, i64 (%struct.shrinker*, %struct.shrink_control*)*, i32, i64, i64, %struct.list_head, %struct.atomic64_t* }
%struct.workqueue_struct = type opaque
%struct.hlist_head = type { %struct.hlist_node* }
%struct.user_namespace = type opaque
%struct.list_lru = type { %struct.list_lru_node* }
%struct.list_lru_node = type { %struct.spinlock, %struct.list_lru_one, [32 x i8] }
%struct.list_lru_one = type { %struct.list_head, i64 }
%struct.work_struct = type { %struct.atomic64_t, %struct.list_head, void (%struct.work_struct*)* }
%union.anon.44 = type { %struct.list_head }
%union.anon.45 = type { %struct.hlist_node }
%struct.inode = type { i16, i16, %struct.kuid_t, %struct.kgid_t, i32, %struct.posix_acl*, %struct.posix_acl*, %struct.inode_operations*, %struct.super_block*, %struct.address_space*, i8*, i64, %union.anon.37, i32, i64, %struct.timespec, %struct.timespec, %struct.timespec, %struct.spinlock, i16, i32, i64, i64, %struct.rw_semaphore, i64, i64, %struct.hlist_node, %struct.list_head, %struct.list_head, %struct.list_head, %struct.list_head, %union.anon.38, i64, %struct.atomic_t, %struct.atomic_t, %struct.atomic_t, %struct.file_operations*, %struct.file_lock_context*, %struct.address_space, %struct.list_head, %union.anon.41, i32, i32, %struct.hlist_head, i8* }
%struct.kgid_t = type { i32 }
%struct.posix_acl = type opaque
%struct.inode_operations = type { %struct.dentry* (%struct.inode*, %struct.dentry*, i32)*, i8* (%struct.dentry*, %struct.inode*, %struct.delayed_call*)*, i32 (%struct.inode*, i32)*, %struct.posix_acl* (%struct.inode*, i32)*, i32 (%struct.dentry*, i8*, i32)*, i32 (%struct.inode*, %struct.dentry*, i16, i1)*, i32 (%struct.dentry*, %struct.inode*, %struct.dentry*)*, i32 (%struct.inode*, %struct.dentry*)*, i32 (%struct.inode*, %struct.dentry*, i8*)*, i32 (%struct.inode*, %struct.dentry*, i16)*, i32 (%struct.inode*, %struct.dentry*)*, i32 (%struct.inode*, %struct.dentry*, i16, i32)*, i32 (%struct.inode*, %struct.dentry*, %struct.inode*, %struct.dentry*, i32)*, i32 (%struct.dentry*, %struct.iattr*)*, i32 (%struct.path*, %struct.kstat*, i32, i32)*, i64 (%struct.dentry*, i8*, i64)*, i32 (%struct.inode*, %struct.fiemap_extent_info*, i64, i64)*, i32 (%struct.inode*, %struct.timespec*, i32)*, i32 (%struct.inode*, %struct.dentry*, %struct.file*, i32, i16, i32*)*, i32 (%struct.inode*, %struct.dentry*, i16)*, i32 (%struct.inode*, %struct.posix_acl*, i32)*, [24 x i8] }
%struct.delayed_call = type { void (i8*)*, i8* }
%struct.iattr = type { i32, i16, %struct.kuid_t, %struct.kgid_t, i64, %struct.timespec, %struct.timespec, %struct.timespec, %struct.file* }
%struct.kstat = type { i32, i16, i32, i32, i64, i64, i64, i32, i32, %struct.kuid_t, %struct.kgid_t, i64, %struct.timespec, %struct.timespec, %struct.timespec, %struct.timespec, i64 }
%struct.fiemap_extent_info = type { i32, i32, i32, %struct.fiemap_extent* }
%struct.fiemap_extent = type { i64, i64, i64, [2 x i64], i32, [3 x i32] }
%union.anon.37 = type { i32 }
%struct.timespec = type { i64, i64 }
%union.anon.38 = type { %struct.callback_head }
%struct.file_lock_context = type { %struct.spinlock, %struct.list_head, %struct.list_head, %struct.list_head }
%struct.address_space = type { %struct.inode*, %struct.radix_tree_root, %struct.spinlock, %struct.atomic_t, %struct.rb_root, %struct.rw_semaphore, i64, i64, i64, %struct.address_space_operations*, i64, %struct.spinlock, i32, %struct.list_head, i8* }
%struct.radix_tree_root = type { i32, %struct.radix_tree_node* }
%struct.radix_tree_node = type { i8, i8, i8, i8, %struct.radix_tree_node*, %struct.radix_tree_root*, %union.anon.0, [64 x i8*], [3 x [1 x i64]] }
%union.anon.0 = type { %struct.list_head }
%struct.address_space_operations = type { i32 (%struct.page*, %struct.writeback_control*)*, i32 (%struct.file*, %struct.page*)*, i32 (%struct.address_space*, %struct.writeback_control*)*, i32 (%struct.page*)*, i32 (%struct.file*, %struct.address_space*, %struct.list_head*, i32)*, i32 (%struct.file*, %struct.address_space*, i64, i32, i32, %struct.page**, i8**)*, i32 (%struct.file*, %struct.address_space*, i64, i32, i32, %struct.page*, i8*)*, i64 (%struct.address_space*, i64)*, void (%struct.page*, i32, i32)*, i32 (%struct.page*, i32)*, void (%struct.page*)*, i64 (%struct.kiocb*, %struct.iov_iter*)*, i32 (%struct.address_space*, %struct.page*, %struct.page*, i32)*, i1 (%struct.page*, i32)*, void (%struct.page*)*, i32 (%struct.page*)*, i32 (%struct.page*, i64, i64)*, void (%struct.page*, i8*, i8*)*, i32 (%struct.address_space*, %struct.page*)*, i32 (%struct.swap_info_struct*, %struct.file*, i64*)*, void (%struct.file*)* }
%struct.kiocb = type { %struct.file*, i64, void (%struct.kiocb*, i64, i64)*, i8*, i32 }
%struct.iov_iter = type opaque
%struct.swap_info_struct = type opaque
%union.anon.41 = type { %struct.pipe_inode_info* }
%struct.file_operations = type { %struct.module*, i64 (%struct.file*, i64, i32)*, i64 (%struct.file*, i8*, i64, i64*)*, i64 (%struct.file*, i8*, i64, i64*)*, i64 (%struct.kiocb*, %struct.iov_iter*)*, i64 (%struct.kiocb*, %struct.iov_iter*)*, i32 (%struct.file*, %struct.dir_context*)*, i32 (%struct.file*, %struct.dir_context*)*, i32 (%struct.file*, %struct.poll_table_struct*)*, i64 (%struct.file*, i32, i64)*, i64 (%struct.file*, i32, i64)*, i32 (%struct.file*, %struct.vm_area_struct*)*, i32 (%struct.inode*, %struct.file*)*, i32 (%struct.file*, i8*)*, i32 (%struct.inode*, %struct.file*)*, i32 (%struct.file*, i64, i64, i32)*, i32 (i32, %struct.file*, i32)*, i32 (%struct.file*, i32, %struct.file_lock*)*, i64 (%struct.file*, %struct.page*, i32, i64, i64*, i32)*, i64 (%struct.file*, i64, i64, i64, i64)*, i32 (i32)*, i32 (%struct.file*, i32, %struct.file_lock*)*, i64 (%struct.pipe_inode_info*, %struct.file*, i64*, i64, i32)*, i64 (%struct.file*, i64*, %struct.pipe_inode_info*, i64, i32)*, i32 (%struct.file*, i64, %struct.file_lock**, i8**)*, i64 (%struct.file*, i32, i64, i64)*, void (%struct.seq_file*, %struct.file*)*, i64 (%struct.file*, i64, %struct.file*, i64, i64, i32)*, i32 (%struct.file*, i64, %struct.file*, i64, i64)*, i64 (%struct.file*, i64, i64, %struct.file*, i64)* }
%struct.dir_context = type { i32 (%struct.dir_context*, i8*, i32, i64, i64, i32)*, i64 }
%struct.poll_table_struct = type { void (%struct.file*, %struct.__wait_queue_head*, %struct.poll_table_struct*)*, i64 }
%struct.file_lock = type { %struct.file_lock*, %struct.list_head, %struct.hlist_node, %struct.list_head, i8*, i32, i8, i32, i32, %struct.pid*, %struct.__wait_queue_head, %struct.file*, i64, i64, %struct.fasync_struct*, i64, i64, %struct.file_lock_operations*, %struct.lock_manager_operations*, %union.anon.39 }
%struct.fasync_struct = type { %struct.spinlock, i32, i32, %struct.fasync_struct*, %struct.file*, %struct.callback_head }
%struct.file_lock_operations = type { void (%struct.file_lock*, %struct.file_lock*)*, void (%struct.file_lock*)* }
%struct.lock_manager_operations = type { i32 (%struct.file_lock*, %struct.file_lock*)*, i64 (%struct.file_lock*)*, i8* (i8*)*, void (i8*)*, void (%struct.file_lock*)*, i32 (%struct.file_lock*, i32)*, i1 (%struct.file_lock*)*, i32 (%struct.file_lock*, i32, %struct.list_head*)*, void (%struct.file_lock*, i8**)* }
%union.anon.39 = type { %struct.nfs_lock_info }
%struct.nfs_lock_info = type { i32, %struct.nlm_lockowner*, %struct.list_head }
%struct.nlm_lockowner = type opaque
%struct.atomic64_t = type { i64 }
%struct.fown_struct = type { %struct.rwlock_t, %struct.pid*, i32, %struct.kuid_t, %struct.kuid_t, i32 }
%struct.rwlock_t = type { %struct.qrwlock }
%struct.qrwlock = type { %struct.atomic_t, %struct.qspinlock }
%struct.cred = type { %struct.atomic_t, %struct.kuid_t, %struct.kgid_t, %struct.kuid_t, %struct.kgid_t, %struct.kuid_t, %struct.kgid_t, %struct.kuid_t, %struct.kgid_t, i32, %struct.kernel_cap_struct, %struct.kernel_cap_struct, %struct.kernel_cap_struct, %struct.kernel_cap_struct, %struct.kernel_cap_struct, i8, %struct.key*, %struct.key*, %struct.key*, %struct.key*, i8*, %struct.user_struct*, %struct.user_namespace*, %struct.group_info*, %struct.callback_head }
%struct.kernel_cap_struct = type { [2 x i32] }
%struct.key = type { %struct.atomic_t, i32, %union.anon.47, %struct.rw_semaphore, %struct.key_user*, i8*, %union.anon.48, i64, %struct.kuid_t, %struct.kgid_t, i32, i16, i16, i64, %union.anon.49, %union.anon.51, i32 (%struct.key*, %struct.key_type*, %union.key_payload*)* }
%union.anon.47 = type { %struct.rb_node }
%struct.key_user = type opaque
%union.anon.48 = type { i64 }
%union.anon.49 = type { %struct.keyring_index_key }
%struct.keyring_index_key = type { %struct.key_type*, i8*, i64 }
%struct.key_type = type opaque
%union.anon.51 = type { %union.key_payload }
%union.key_payload = type { [4 x i8*] }
%struct.user_struct = type { %struct.atomic_t, %struct.atomic_t, %struct.atomic_t, %struct.atomic64_t, i64, i64, i64, %struct.atomic64_t, %struct.key*, %struct.key*, %struct.hlist_node, %struct.kuid_t, %struct.atomic64_t }
%struct.group_info = type { %struct.atomic_t, i32, [0 x %struct.kgid_t] }
%struct.file_ra_state = type { i64, i32, i32, i32, i32, i64 }
%struct.seq_file = type { i8*, i64, i64, i64, i64, i64, i64, i64, %struct.mutex, %struct.seq_operations*, i32, %struct.file*, i8* }
%struct.seq_operations = type { i8* (%struct.seq_file*, i64*)*, void (%struct.seq_file*, i8*)*, i8* (%struct.seq_file*, i8*, i64*)*, i32 (%struct.seq_file*, i8*)* }
%struct.vm_operations_struct = type opaque
%struct.kernfs_open_node = type opaque
%struct.kernfs_iattrs = type opaque
%struct.kref = type { %struct.refcount_struct }
%struct.refcount_struct = type { %struct.atomic_t }
%struct.module_param_attrs = type opaque
%struct.module_attribute = type { %struct.attribute, i64 (%struct.module_attribute*, %struct.module_kobject*, i8*)*, i64 (%struct.module_attribute*, %struct.module_kobject*, i8*, i64)*, void (%struct.module*, i8*)*, i32 (%struct.module*)*, void (%struct.module*)* }
%struct.mutex = type { %struct.atomic64_t, %struct.spinlock, %struct.optimistic_spin_queue, %struct.list_head }
%struct.exception_table_entry = type { i32, i32, i32 }
%struct.module_layout = type { i8*, i32, i32, i32, i32, %struct.mod_tree_node }
%struct.mod_tree_node = type { %struct.module*, %struct.latch_tree_node }
%struct.latch_tree_node = type { [2 x %struct.rb_node] }
%struct.mod_arch_specific = type {}
%struct.bug_entry = type { i32, i32, i16, i16 }
%struct.mod_kallsyms = type { %struct.elf64_sym*, i32, i8* }
%struct.elf64_sym = type { i32, i8, i8, i16, i64, i64 }
%struct.module_sect_attrs = type opaque
%struct.module_notes_attrs = type opaque
%struct.tracepoint = type { i8*, %struct.static_key, i32 ()*, void ()*, %struct.tracepoint_func* }
%struct.static_key = type { %struct.atomic_t }
%struct.tracepoint_func = type { i8*, i8*, i32 }
%struct.trace_event_call = type opaque
%struct.trace_enum_map = type opaque
%struct.list_head = type { %struct.list_head*, %struct.list_head* }
%struct.atomic_t = type { i32 }
%union.anon.46 = type { i8* }
%struct.snd_minor = type { i32, i32, i32, %struct.file_operations*, i8*, %struct.device*, %struct.snd_card* }
%struct.device = type { %struct.device*, %struct.device_private*, %struct.kobject, i8*, %struct.device_type*, %struct.mutex, %struct.bus_type*, %struct.device_driver*, i8*, i8*, %struct.dev_links_info, %struct.dev_pm_info, %struct.dev_pm_domain*, %struct.irq_domain*, %struct.list_head, i32, %struct.dma_map_ops*, i64*, i64, i64, %struct.device_dma_parameters*, %struct.list_head, %struct.dma_coherent_mem*, %struct.dev_archdata, %struct.device_node*, %struct.fwnode_handle*, i32, i32, %struct.spinlock, %struct.list_head, %struct.klist_node, %struct.class*, %struct.attribute_group**, void (%struct.device*)*, %struct.iommu_group*, %struct.iommu_fwspec*, i8 }
%struct.device_private = type opaque
%struct.device_type = type { i8*, %struct.attribute_group**, i32 (%struct.device*, %struct.kobj_uevent_env*)*, i8* (%struct.device*, i16*, %struct.kuid_t*, %struct.kgid_t*)*, void (%struct.device*)*, %struct.dev_pm_ops* }
%struct.dev_pm_ops = type { i32 (%struct.device*)*, void (%struct.device*)*, i32 (%struct.device*)*, i32 (%struct.device*)*, i32 (%struct.device*)*, i32 (%struct.device*)*, i32 (%struct.device*)*, i32 (%struct.device*)*, i32 (%struct.device*)*, i32 (%struct.device*)*, i32 (%struct.device*)*, i32 (%struct.device*)*, i32 (%struct.device*)*, i32 (%struct.device*)*, i32 (%struct.device*)*, i32 (%struct.device*)*, i32 (%struct.device*)*, i32 (%struct.device*)*, i32 (%struct.device*)*, i32 (%struct.device*)*, i32 (%struct.device*)*, i32 (%struct.device*)*, i32 (%struct.device*)* }
%struct.bus_type = type { i8*, i8*, %struct.device*, %struct.device_attribute*, %struct.attribute_group**, %struct.attribute_group**, %struct.attribute_group**, i32 (%struct.device*, %struct.device_driver*)*, i32 (%struct.device*, %struct.kobj_uevent_env*)*, i32 (%struct.device*)*, i32 (%struct.device*)*, void (%struct.device*)*, i32 (%struct.device*)*, i32 (%struct.device*)*, i32 (%struct.device*, i32)*, i32 (%struct.device*)*, i32 (%struct.device*)*, %struct.dev_pm_ops*, %struct.iommu_ops*, %struct.subsys_private*, %struct.lock_class_key }
%struct.device_attribute = type { %struct.attribute, i64 (%struct.device*, %struct.device_attribute*, i8*)*, i64 (%struct.device*, %struct.device_attribute*, i8*, i64)* }
%struct.iommu_ops = type opaque
%struct.subsys_private = type opaque
%struct.device_driver = type { i8*, %struct.bus_type*, %struct.module*, i8*, i8, i32, %struct.of_device_id*, %struct.acpi_device_id*, i32 (%struct.device*)*, i32 (%struct.device*)*, void (%struct.device*)*, i32 (%struct.device*, i32)*, i32 (%struct.device*)*, %struct.attribute_group**, %struct.dev_pm_ops*, %struct.driver_private* }
%struct.of_device_id = type opaque
%struct.acpi_device_id = type opaque
%struct.driver_private = type opaque
%struct.dev_links_info = type { %struct.list_head, %struct.list_head, i32 }
%struct.dev_pm_info = type { %struct.pm_message, i16, %struct.spinlock, %struct.list_head, %struct.completion, %struct.wakeup_source*, i8, %struct.timer_list, i64, %struct.work_struct, %struct.__wait_queue_head, %struct.wake_irq*, %struct.atomic_t, %struct.atomic_t, i16, i32, i32, i32, i32, i32, i64, i64, i64, i64, %struct.pm_subsys_data*, void (%struct.device*, i32)*, %struct.dev_pm_qos* }
%struct.pm_message = type { i32 }
%struct.wakeup_source = type { i8*, %struct.list_head, %struct.spinlock, %struct.wake_irq*, %struct.timer_list, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i8 }
%struct.timer_list = type { %struct.hlist_node, i64, void (i64)*, i64, i32 }
%struct.wake_irq = type opaque
%struct.pm_subsys_data = type { %struct.spinlock, i32, %struct.list_head }
%struct.dev_pm_qos = type opaque
%struct.dev_pm_domain = type { %struct.dev_pm_ops, void (%struct.device*, i1)*, i32 (%struct.device*)*, void (%struct.device*)*, void (%struct.device*)* }
%struct.irq_domain = type opaque
%struct.dma_map_ops = type opaque
%struct.device_dma_parameters = type { i32, i64 }
%struct.dma_coherent_mem = type opaque
%struct.dev_archdata = type { i8* }
%struct.device_node = type opaque
%struct.fwnode_handle = type opaque
%struct.klist_node = type { i8*, %struct.list_head, %struct.kref }
%struct.class = type { i8*, %struct.module*, %struct.class_attribute*, %struct.attribute_group**, %struct.attribute_group**, %struct.kobject*, i32 (%struct.device*, %struct.kobj_uevent_env*)*, i8* (%struct.device*, i16*)*, void (%struct.class*)*, void (%struct.device*)*, i32 (%struct.device*, i32)*, i32 (%struct.device*)*, %struct.kobj_ns_type_operations*, i8* (%struct.device*)*, %struct.dev_pm_ops*, %struct.subsys_private* }
%struct.class_attribute = type { %struct.attribute, i64 (%struct.class*, %struct.class_attribute*, i8*)*, i64 (%struct.class*, %struct.class_attribute*, i8*, i64)* }
%struct.attribute_group = type { i8*, i16 (%struct.kobject*, %struct.attribute*, i32)*, i16 (%struct.kobject*, %struct.bin_attribute*, i32)*, %struct.attribute**, %struct.bin_attribute** }
%struct.bin_attribute = type { %struct.attribute, i64, i8*, i64 (%struct.file*, %struct.kobject*, %struct.bin_attribute*, i8*, i64, i64)*, i64 (%struct.file*, %struct.kobject*, %struct.bin_attribute*, i8*, i64, i64)*, i32 (%struct.file*, %struct.kobject*, %struct.bin_attribute*, %struct.vm_area_struct*)* }
%struct.iommu_group = type opaque
%struct.iommu_fwspec = type opaque
%struct.snd_card = type { i32, [16 x i8], [16 x i8], [32 x i8], [80 x i8], [32 x i8], [80 x i8], [128 x i8], %struct.module*, i8*, void (%struct.snd_card*)*, %struct.list_head, %struct.device, i32, %struct.rw_semaphore, %struct.rwlock_t, i32, i32, %struct.list_head, %struct.list_head, %struct.mutex, %struct.snd_info_entry*, %struct.snd_info_entry*, %struct.proc_dir_entry*, %struct.list_head, %struct.snd_shutdown_f_ops*, %struct.spinlock, i32, %struct.completion*, %struct.device*, %struct.device, [4 x %struct.attribute_group*], i8, i32, %struct.mutex, %struct.__wait_queue_head, %struct.snd_mixer_oss*, i32 }
%struct.snd_info_entry = type { i8*, i16, i64, i16, %union.anon.53, %struct.snd_info_entry*, %struct.snd_card*, %struct.module*, i8*, void (%struct.snd_info_entry*)*, %struct.proc_dir_entry*, %struct.mutex, %struct.list_head, %struct.list_head }
%union.anon.53 = type { %struct.snd_info_entry_text }
%struct.snd_info_entry_text = type { void (%struct.snd_info_entry*, %struct.snd_info_buffer*)*, void (%struct.snd_info_entry*, %struct.snd_info_buffer*)* }
%struct.snd_info_buffer = type { i8*, i32, i32, i32, i32, i32 }
%struct.proc_dir_entry = type opaque
%struct.snd_shutdown_f_ops = type opaque
%struct.snd_mixer_oss = type opaque

@snd_major = common global i32 0, align 4
@__kstrtab_snd_major = internal constant [10 x i8] c"snd_major\00", section "__ksymtab_strings", align 1
@__ksymtab_snd_major = internal constant %struct.kernel_symbol { i64 ptrtoint (i32* @snd_major to i64), i8* getelementptr inbounds ([10 x i8], [10 x i8]* @__kstrtab_snd_major, i32 0, i32 0) }, section "___ksymtab+snd_major", align 8
@__param_str_major = internal constant [10 x i8] c"snd.major\00", align 1
@param_ops_int = external constant %struct.kernel_param_ops, align 8
@major = internal global i32 116, align 4
@__param_major = internal constant %struct.kernel_param { i8* getelementptr inbounds ([10 x i8], [10 x i8]* @__param_str_major, i32 0, i32 0), %struct.module* null, %struct.kernel_param_ops* @param_ops_int, i16 292, i8 -1, i8 0, %union.anon.46 { i8* bitcast (i32* @major to i8*) } }, section "__param", align 8
@__param_str_cards_limit = internal constant [16 x i8] c"snd.cards_limit\00", align 16
@cards_limit = internal global i32 1, align 4
@__param_cards_limit = internal constant %struct.kernel_param { i8* getelementptr inbounds ([16 x i8], [16 x i8]* @__param_str_cards_limit, i32 0, i32 0), %struct.module* null, %struct.kernel_param_ops* @param_ops_int, i16 292, i8 -1, i8 0, %union.anon.46 { i8* bitcast (i32* @cards_limit to i8*) } }, section "__param", align 8
@snd_ecards_limit = common global i32 0, align 4
@__kstrtab_snd_ecards_limit = internal constant [17 x i8] c"snd_ecards_limit\00", section "__ksymtab_strings", align 1
@__ksymtab_snd_ecards_limit = internal constant %struct.kernel_symbol { i64 ptrtoint (i32* @snd_ecards_limit to i64), i8* getelementptr inbounds ([17 x i8], [17 x i8]* @__kstrtab_snd_ecards_limit, i32 0, i32 0) }, section "___ksymtab+snd_ecards_limit", align 8
@.str = private unnamed_addr constant [12 x i8] c"snd-card-%i\00", align 1
@__kstrtab_snd_request_card = internal constant [17 x i8] c"snd_request_card\00", section "__ksymtab_strings", align 1
@__ksymtab_snd_request_card = internal constant %struct.kernel_symbol { i64 ptrtoint (void (i32)* @snd_request_card to i64), i8* getelementptr inbounds ([17 x i8], [17 x i8]* @__kstrtab_snd_request_card, i32 0, i32 0) }, section "___ksymtab+snd_request_card", align 8
@sound_mutex = internal global %struct.mutex { %struct.atomic64_t zeroinitializer, %struct.spinlock zeroinitializer, %struct.optimistic_spin_queue zeroinitializer, %struct.list_head { %struct.list_head* bitcast (i8* getelementptr (i8, i8* bitcast (%struct.mutex* @sound_mutex to i8*), i64 16) to %struct.list_head*), %struct.list_head* bitcast (i8* getelementptr (i8, i8* bitcast (%struct.mutex* @sound_mutex to i8*), i64 16) to %struct.list_head*) } }, align 8
@snd_minors = internal global [256 x %struct.snd_minor*] zeroinitializer, align 16
@__kstrtab_snd_lookup_minor_data = internal constant [22 x i8] c"snd_lookup_minor_data\00", section "__ksymtab_strings", align 1
@__ksymtab_snd_lookup_minor_data = internal constant %struct.kernel_symbol { i64 ptrtoint (i8* (i32, i32)* @snd_lookup_minor_data to i64), i8* getelementptr inbounds ([22 x i8], [22 x i8]* @__kstrtab_snd_lookup_minor_data, i32 0, i32 0) }, section "___ksymtab+snd_lookup_minor_data", align 8
@__kstrtab_snd_register_device = internal constant [20 x i8] c"snd_register_device\00", section "__ksymtab_strings", align 1
@__ksymtab_snd_register_device = internal constant %struct.kernel_symbol { i64 ptrtoint (i32 (i32, %struct.snd_card*, i32, %struct.file_operations*, i8*, %struct.device*)* @snd_register_device to i64), i8* getelementptr inbounds ([20 x i8], [20 x i8]* @__kstrtab_snd_register_device, i32 0, i32 0) }, section "___ksymtab+snd_register_device", align 8
@__kstrtab_snd_unregister_device = internal constant [22 x i8] c"snd_unregister_device\00", section "__ksymtab_strings", align 1
@__ksymtab_snd_unregister_device = internal constant %struct.kernel_symbol { i64 ptrtoint (i32 (%struct.device*)* @snd_unregister_device to i64), i8* getelementptr inbounds ([22 x i8], [22 x i8]* @__kstrtab_snd_unregister_device, i32 0, i32 0) }, section "___ksymtab+snd_unregister_device", align 8
@.str.1 = private unnamed_addr constant [8 x i8] c"devices\00", align 1
@.str.2 = private unnamed_addr constant [5 x i8] c"alsa\00", align 1
@__initcall_alsa_sound_init4 = internal global i32 ()* @alsa_sound_init, section ".initcall4.init", align 8
@__exitcall_alsa_sound_exit = internal global void ()* @alsa_sound_exit, section ".exitcall.exit", align 8
@.str.3 = private unnamed_addr constant [20 x i8] c"%3i: [%2i-%2i]: %s\0A\00", align 1
@.str.4 = private unnamed_addr constant [19 x i8] c"%3i: [%2i]   : %s\0A\00", align 1
@.str.5 = private unnamed_addr constant [18 x i8] c"%3i:        : %s\0A\00", align 1
@.str.6 = private unnamed_addr constant [8 x i8] c"control\00", align 1
@.str.7 = private unnamed_addr constant [19 x i8] c"hardware dependent\00", align 1
@.str.8 = private unnamed_addr constant [9 x i8] c"raw midi\00", align 1
@.str.9 = private unnamed_addr constant [23 x i8] c"digital audio playback\00", align 1
@.str.10 = private unnamed_addr constant [22 x i8] c"digital audio capture\00", align 1
@.str.11 = private unnamed_addr constant [10 x i8] c"sequencer\00", align 1
@.str.12 = private unnamed_addr constant [6 x i8] c"timer\00", align 1
@.str.13 = private unnamed_addr constant [2 x i8] c"?\00", align 1
@snd_fops = internal constant %struct.file_operations { %struct.module* null, i64 (%struct.file*, i64, i32)* @noop_llseek, i64 (%struct.file*, i8*, i64, i64*)* null, i64 (%struct.file*, i8*, i64, i64*)* null, i64 (%struct.kiocb*, %struct.iov_iter*)* null, i64 (%struct.kiocb*, %struct.iov_iter*)* null, i32 (%struct.file*, %struct.dir_context*)* null, i32 (%struct.file*, %struct.dir_context*)* null, i32 (%struct.file*, %struct.poll_table_struct*)* null, i64 (%struct.file*, i32, i64)* null, i64 (%struct.file*, i32, i64)* null, i32 (%struct.file*, %struct.vm_area_struct*)* null, i32 (%struct.inode*, %struct.file*)* @snd_open, i32 (%struct.file*, i8*)* null, i32 (%struct.inode*, %struct.file*)* null, i32 (%struct.file*, i64, i64, i32)* null, i32 (i32, %struct.file*, i32)* null, i32 (%struct.file*, i32, %struct.file_lock*)* null, i64 (%struct.file*, %struct.page*, i32, i64, i64*, i32)* null, i64 (%struct.file*, i64, i64, i64, i64)* null, i32 (i32)* null, i32 (%struct.file*, i32, %struct.file_lock*)* null, i64 (%struct.pipe_inode_info*, %struct.file*, i64*, i64, i32)* null, i64 (%struct.file*, i64*, %struct.pipe_inode_info*, i64, i32)* null, i32 (%struct.file*, i64, %struct.file_lock**, i8**)* null, i64 (%struct.file*, i32, i64, i64)* null, void (%struct.seq_file*, %struct.file*)* null, i64 (%struct.file*, i64, %struct.file*, i64, i64, i32)* null, i32 (%struct.file*, i64, %struct.file*, i64, i64)* null, i64 (%struct.file*, i64, i64, %struct.file*, i64)* null }, align 8
@.str.14 = private unnamed_addr constant [63 x i8] c"\013ALSA core: unable to register native major device number %d\0A\00", align 1
@.str.15 = private unnamed_addr constant [57 x i8] c"\016Advanced Linux Sound Architecture Driver Initialized.\0A\00", align 1
@.str.16 = private unnamed_addr constant [19 x i8] c"sound/core/sound.c\00", align 1
@snd_cards = external global [8 x %struct.snd_card*], align 16
@.str.17 = private unnamed_addr constant [8 x i8] c"snd-seq\00", align 1
@.str.18 = private unnamed_addr constant [10 x i8] c"snd-timer\00", align 1
@llvm.used = appending global [11 x i8*] [i8* bitcast (%struct.kernel_symbol* @__ksymtab_snd_major to i8*), i8* bitcast (%struct.kernel_param* @__param_major to i8*), i8* bitcast (%struct.kernel_param* @__param_cards_limit to i8*), i8* bitcast (%struct.kernel_symbol* @__ksymtab_snd_ecards_limit to i8*), i8* bitcast (%struct.kernel_symbol* @__ksymtab_snd_request_card to i8*), i8* bitcast (%struct.kernel_symbol* @__ksymtab_snd_lookup_minor_data to i8*), i8* bitcast (%struct.kernel_symbol* @__ksymtab_snd_register_device to i8*), i8* bitcast (%struct.kernel_symbol* @__ksymtab_snd_unregister_device to i8*), i8* bitcast (void ()* @alsa_sound_exit to i8*), i8* bitcast (i32 ()** @__initcall_alsa_sound_init4 to i8*), i8* bitcast (void ()** @__exitcall_alsa_sound_exit to i8*)], section "llvm.metadata"

; Function Attrs: noinline nounwind uwtable
define void @snd_request_card(i32) #0 {
  %2 = call i32 @snd_card_locked(i32 %0)
  %3 = icmp ne i32 %2, 0
  br i1 %3, label %10, label %4

; <label>:4:                                      ; preds = %1
  %5 = icmp slt i32 %0, 0
  %6 = load i32, i32* @cards_limit, align 4
  %7 = icmp sge i32 %0, %6
  %or.cond = or i1 %5, %7
  br i1 %or.cond, label %10, label %8

; <label>:8:                                      ; preds = %4
  %9 = call i32 (i1, i8*, ...) @__request_module(i1 zeroext true, i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str, i32 0, i32 0), i32 %0)
  br label %10

; <label>:10:                                     ; preds = %4, %1, %8
  ret void
}

declare i32 @snd_card_locked(i32) #1

declare i32 @__request_module(i1 zeroext, i8*, ...) #1

; Function Attrs: noinline nounwind uwtable
define i8* @snd_lookup_minor_data(i32, i32) #0 {
  %3 = zext i32 %0 to i64
  %4 = icmp uge i64 %3, 256
  br i1 %4, label %28, label %5

; <label>:5:                                      ; preds = %2
  call void @mutex_lock(%struct.mutex* @sound_mutex)
  %6 = zext i32 %0 to i64
  %7 = getelementptr inbounds [256 x %struct.snd_minor*], [256 x %struct.snd_minor*]* @snd_minors, i64 0, i64 %6
  %8 = load %struct.snd_minor*, %struct.snd_minor** %7, align 8
  %9 = icmp ne %struct.snd_minor* %8, null
  br i1 %9, label %10, label %27

; <label>:10:                                     ; preds = %5
  %11 = getelementptr inbounds %struct.snd_minor, %struct.snd_minor* %8, i32 0, i32 0
  %12 = load i32, i32* %11, align 8
  %13 = icmp eq i32 %12, %1
  br i1 %13, label %14, label %27

; <label>:14:                                     ; preds = %10
  %15 = getelementptr inbounds %struct.snd_minor, %struct.snd_minor* %8, i32 0, i32 4
  %16 = load i8*, i8** %15, align 8
  %17 = icmp ne i8* %16, null
  br i1 %17, label %18, label %27

; <label>:18:                                     ; preds = %14
  %19 = getelementptr inbounds %struct.snd_minor, %struct.snd_minor* %8, i32 0, i32 6
  %20 = load %struct.snd_card*, %struct.snd_card** %19, align 8
  %21 = icmp ne %struct.snd_card* %20, null
  br i1 %21, label %22, label %27

; <label>:22:                                     ; preds = %18
  %23 = getelementptr inbounds %struct.snd_minor, %struct.snd_minor* %8, i32 0, i32 6
  %24 = load %struct.snd_card*, %struct.snd_card** %23, align 8
  %25 = getelementptr inbounds %struct.snd_card, %struct.snd_card* %24, i32 0, i32 30
  %26 = call %struct.device* @get_device(%struct.device* %25)
  br label %27

; <label>:27:                                     ; preds = %5, %10, %14, %18, %22
  %.01 = phi i8* [ %16, %22 ], [ %16, %18 ], [ %16, %14 ], [ null, %10 ], [ null, %5 ]
  call void @mutex_unlock(%struct.mutex* @sound_mutex)
  br label %28

; <label>:28:                                     ; preds = %2, %27
  %.0 = phi i8* [ %.01, %27 ], [ null, %2 ]
  ret i8* %.0
}

declare void @mutex_lock(%struct.mutex*) #1

declare %struct.device* @get_device(%struct.device*) #1

declare void @mutex_unlock(%struct.mutex*) #1

; Function Attrs: noinline nounwind uwtable
define i32 @snd_register_device(i32, %struct.snd_card*, i32, %struct.file_operations*, i8*, %struct.device*) #0 {
  %7 = icmp ne %struct.device* %5, null
  %8 = xor i1 %7, true
  %9 = xor i1 %8, true
  %10 = xor i1 %9, true
  %11 = zext i1 %10 to i32
  %12 = icmp ne i32 %11, 0
  %13 = xor i1 %12, true
  %14 = xor i1 %13, true
  %15 = zext i1 %14 to i32
  %16 = sext i32 %15 to i64
  %17 = icmp ne i64 %16, 0
  br i1 %17, label %52, label %18

; <label>:18:                                     ; preds = %6
  %19 = call noalias i8* @__kmalloc(i64 48, i32 20971712) #2
  %20 = bitcast i8* %19 to %struct.snd_minor*
  %21 = icmp eq %struct.snd_minor* %20, null
  br i1 %21, label %52, label %22

; <label>:22:                                     ; preds = %18
  %23 = getelementptr inbounds %struct.snd_minor, %struct.snd_minor* %20, i32 0, i32 0
  store i32 %0, i32* %23, align 8
  %24 = icmp ne %struct.snd_card* %1, null
  br i1 %24, label %25, label %28

; <label>:25:                                     ; preds = %22
  %26 = getelementptr inbounds %struct.snd_card, %struct.snd_card* %1, i32 0, i32 0
  %27 = load i32, i32* %26, align 8
  br label %28

; <label>:28:                                     ; preds = %22, %25
  %29 = phi i32 [ %27, %25 ], [ -1, %22 ]
  %30 = getelementptr inbounds %struct.snd_minor, %struct.snd_minor* %20, i32 0, i32 1
  store i32 %29, i32* %30, align 4
  %31 = getelementptr inbounds %struct.snd_minor, %struct.snd_minor* %20, i32 0, i32 2
  store i32 %2, i32* %31, align 8
  %32 = getelementptr inbounds %struct.snd_minor, %struct.snd_minor* %20, i32 0, i32 3
  store %struct.file_operations* %3, %struct.file_operations** %32, align 8
  %33 = getelementptr inbounds %struct.snd_minor, %struct.snd_minor* %20, i32 0, i32 4
  store i8* %4, i8** %33, align 8
  %34 = getelementptr inbounds %struct.snd_minor, %struct.snd_minor* %20, i32 0, i32 6
  store %struct.snd_card* %1, %struct.snd_card** %34, align 8
  call void @mutex_lock(%struct.mutex* @sound_mutex)
  %35 = call i32 @snd_find_free_minor(i32 %0, %struct.snd_card* %1, i32 %2)
  %36 = icmp slt i32 %35, 0
  br i1 %36, label %48, label %37

; <label>:37:                                     ; preds = %28
  %38 = getelementptr inbounds %struct.snd_minor, %struct.snd_minor* %20, i32 0, i32 5
  store %struct.device* %5, %struct.device** %38, align 8
  %39 = load i32, i32* @major, align 4
  %40 = shl i32 %39, 20
  %41 = or i32 %40, %35
  %42 = getelementptr inbounds %struct.device, %struct.device* %5, i32 0, i32 26
  store i32 %41, i32* %42, align 8
  %43 = call i32 @device_add(%struct.device* %5)
  %44 = icmp slt i32 %43, 0
  br i1 %44, label %48, label %45

; <label>:45:                                     ; preds = %37
  %46 = sext i32 %35 to i64
  %47 = getelementptr inbounds [256 x %struct.snd_minor*], [256 x %struct.snd_minor*]* @snd_minors, i64 0, i64 %46
  store %struct.snd_minor* %20, %struct.snd_minor** %47, align 8
  br label %48

; <label>:48:                                     ; preds = %37, %28, %45
  %.0 = phi i32 [ %43, %45 ], [ %35, %28 ], [ %43, %37 ]
  call void @mutex_unlock(%struct.mutex* @sound_mutex)
  %49 = icmp slt i32 %.0, 0
  br i1 %49, label %50, label %52

; <label>:50:                                     ; preds = %48
  %51 = bitcast %struct.snd_minor* %20 to i8*
  call void @kfree(i8* %51)
  br label %52

; <label>:52:                                     ; preds = %48, %50, %18, %6
  %.01 = phi i32 [ -22, %6 ], [ -12, %18 ], [ %.0, %50 ], [ %.0, %48 ]
  ret i32 %.01
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @snd_find_free_minor(i32, %struct.snd_card*, i32) #0 {
  switch i32 %0, label %56 [
    i32 1, label %39
    i32 33, label %39
    i32 0, label %4
    i32 4, label %21
    i32 8, label %21
    i32 16, label %21
    i32 24, label %21
    i32 2, label %21
  ]

; <label>:4:                                      ; preds = %3
  %5 = icmp ne %struct.snd_card* %1, null
  %6 = xor i1 %5, true
  %7 = xor i1 %6, true
  %8 = xor i1 %7, true
  %9 = zext i1 %8 to i32
  %10 = icmp ne i32 %9, 0
  %11 = xor i1 %10, true
  %12 = xor i1 %11, true
  %13 = zext i1 %12 to i32
  %14 = sext i32 %13 to i64
  %15 = icmp ne i64 %14, 0
  br i1 %15, label %56, label %16

; <label>:16:                                     ; preds = %4
  %17 = getelementptr inbounds %struct.snd_card, %struct.snd_card* %1, i32 0, i32 0
  %18 = load i32, i32* %17, align 8
  %19 = shl i32 %18, 5
  %20 = or i32 %19, %0
  br label %39

; <label>:21:                                     ; preds = %3, %3, %3, %3, %3
  %22 = icmp ne %struct.snd_card* %1, null
  %23 = xor i1 %22, true
  %24 = xor i1 %23, true
  %25 = xor i1 %24, true
  %26 = zext i1 %25 to i32
  %27 = icmp ne i32 %26, 0
  %28 = xor i1 %27, true
  %29 = xor i1 %28, true
  %30 = zext i1 %29 to i32
  %31 = sext i32 %30 to i64
  %32 = icmp ne i64 %31, 0
  br i1 %32, label %56, label %33

; <label>:33:                                     ; preds = %21
  %34 = getelementptr inbounds %struct.snd_card, %struct.snd_card* %1, i32 0, i32 0
  %35 = load i32, i32* %34, align 8
  %36 = shl i32 %35, 5
  %37 = add nsw i32 %0, %2
  %38 = or i32 %36, %37
  br label %39

; <label>:39:                                     ; preds = %3, %3, %33, %16
  %.01 = phi i32 [ %38, %33 ], [ %20, %16 ], [ %0, %3 ], [ %0, %3 ]
  %40 = icmp slt i32 %.01, 0
  %41 = icmp sge i32 %.01, 256
  %. = select i1 %40, i1 true, i1 %41
  %42 = xor i1 %., true
  %43 = xor i1 %42, true
  %44 = zext i1 %43 to i32
  %45 = icmp ne i32 %44, 0
  %46 = xor i1 %45, true
  %47 = xor i1 %46, true
  %48 = zext i1 %47 to i32
  %49 = sext i32 %48 to i64
  %50 = icmp ne i64 %49, 0
  br i1 %50, label %56, label %51

; <label>:51:                                     ; preds = %39
  %52 = sext i32 %.01 to i64
  %53 = getelementptr inbounds [256 x %struct.snd_minor*], [256 x %struct.snd_minor*]* @snd_minors, i64 0, i64 %52
  %54 = load %struct.snd_minor*, %struct.snd_minor** %53, align 8
  %55 = icmp ne %struct.snd_minor* %54, null
  %..01 = select i1 %55, i32 -16, i32 %.01
  br label %56

; <label>:56:                                     ; preds = %51, %39, %3, %21, %4
  %.0 = phi i32 [ -22, %4 ], [ -22, %21 ], [ -22, %3 ], [ -22, %39 ], [ %..01, %51 ]
  ret i32 %.0
}

declare i32 @device_add(%struct.device*) #1

declare void @kfree(i8*) #1

; Function Attrs: noinline nounwind uwtable
define i32 @snd_unregister_device(%struct.device*) #0 {
  call void @mutex_lock(%struct.mutex* @sound_mutex)
  br label %2

; <label>:2:                                      ; preds = %18, %1
  %.01 = phi i32 [ 0, %1 ], [ %19, %18 ]
  %3 = sext i32 %.01 to i64
  %4 = icmp ult i64 %3, 256
  br i1 %4, label %5, label %.loopexit

; <label>:5:                                      ; preds = %2
  %6 = sext i32 %.01 to i64
  %7 = getelementptr inbounds [256 x %struct.snd_minor*], [256 x %struct.snd_minor*]* @snd_minors, i64 0, i64 %6
  %8 = load %struct.snd_minor*, %struct.snd_minor** %7, align 8
  %9 = icmp ne %struct.snd_minor* %8, null
  br i1 %9, label %10, label %18

; <label>:10:                                     ; preds = %5
  %11 = getelementptr inbounds %struct.snd_minor, %struct.snd_minor* %8, i32 0, i32 5
  %12 = load %struct.device*, %struct.device** %11, align 8
  %13 = icmp eq %struct.device* %12, %0
  br i1 %13, label %14, label %18

; <label>:14:                                     ; preds = %10
  %15 = sext i32 %.01 to i64
  %16 = getelementptr inbounds [256 x %struct.snd_minor*], [256 x %struct.snd_minor*]* @snd_minors, i64 0, i64 %15
  store %struct.snd_minor* null, %struct.snd_minor** %16, align 8
  call void @device_del(%struct.device* %0)
  %17 = bitcast %struct.snd_minor* %8 to i8*
  call void @kfree(i8* %17)
  br label %.loopexit

; <label>:18:                                     ; preds = %5, %10
  %19 = add nsw i32 %.01, 1
  br label %2

.loopexit:                                        ; preds = %2, %14
  call void @mutex_unlock(%struct.mutex* @sound_mutex)
  %20 = sext i32 %.01 to i64
  %21 = icmp uge i64 %20, 256
  %. = select i1 %21, i32 -2, i32 0
  ret i32 %.
}

declare void @device_del(%struct.device*) #1

; Function Attrs: noinline nounwind uwtable
define i32 @snd_minor_info_init() #0 section ".init.text" {
  %1 = call %struct.snd_info_entry* @snd_info_create_module_entry(%struct.module* null, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.1, i32 0, i32 0), %struct.snd_info_entry* null)
  %2 = icmp ne %struct.snd_info_entry* %1, null
  br i1 %2, label %3, label %8

; <label>:3:                                      ; preds = %0
  %4 = getelementptr inbounds %struct.snd_info_entry, %struct.snd_info_entry* %1, i32 0, i32 4
  %5 = bitcast %union.anon.53* %4 to %struct.snd_info_entry_text*
  %6 = getelementptr inbounds %struct.snd_info_entry_text, %struct.snd_info_entry_text* %5, i32 0, i32 0
  store void (%struct.snd_info_entry*, %struct.snd_info_buffer*)* @snd_minor_info_read, void (%struct.snd_info_entry*, %struct.snd_info_buffer*)** %6, align 8
  %7 = call i32 @snd_info_register(%struct.snd_info_entry* %1)
  br label %8

; <label>:8:                                      ; preds = %0, %3
  %.0 = phi i32 [ %7, %3 ], [ -12, %0 ]
  ret i32 %.0
}

declare %struct.snd_info_entry* @snd_info_create_module_entry(%struct.module*, i8*, %struct.snd_info_entry*) #1

; Function Attrs: noinline nounwind uwtable
define internal void @snd_minor_info_read(%struct.snd_info_entry*, %struct.snd_info_buffer*) #0 {
  call void @mutex_lock(%struct.mutex* @sound_mutex)
  br label %3

; <label>:3:                                      ; preds = %40, %2
  %.0 = phi i32 [ 0, %2 ], [ %41, %40 ]
  %4 = icmp slt i32 %.0, 256
  br i1 %4, label %5, label %42

; <label>:5:                                      ; preds = %3
  %6 = sext i32 %.0 to i64
  %7 = getelementptr inbounds [256 x %struct.snd_minor*], [256 x %struct.snd_minor*]* @snd_minors, i64 0, i64 %6
  %8 = load %struct.snd_minor*, %struct.snd_minor** %7, align 8
  %9 = icmp ne %struct.snd_minor* %8, null
  br i1 %9, label %10, label %40

; <label>:10:                                     ; preds = %5
  %11 = getelementptr inbounds %struct.snd_minor, %struct.snd_minor* %8, i32 0, i32 1
  %12 = load i32, i32* %11, align 4
  %13 = icmp sge i32 %12, 0
  br i1 %13, label %14, label %33

; <label>:14:                                     ; preds = %10
  %15 = getelementptr inbounds %struct.snd_minor, %struct.snd_minor* %8, i32 0, i32 2
  %16 = load i32, i32* %15, align 8
  %17 = icmp sge i32 %16, 0
  %18 = getelementptr inbounds %struct.snd_info_buffer, %struct.snd_info_buffer* %1, i32 0, i32 0
  %19 = load i8*, i8** %18, align 8
  %20 = bitcast i8* %19 to %struct.seq_file*
  %21 = getelementptr inbounds %struct.snd_minor, %struct.snd_minor* %8, i32 0, i32 1
  %22 = load i32, i32* %21, align 4
  br i1 %17, label %23, label %29

; <label>:23:                                     ; preds = %14
  %24 = getelementptr inbounds %struct.snd_minor, %struct.snd_minor* %8, i32 0, i32 2
  %25 = load i32, i32* %24, align 8
  %26 = getelementptr inbounds %struct.snd_minor, %struct.snd_minor* %8, i32 0, i32 0
  %27 = load i32, i32* %26, align 8
  %28 = call i8* @snd_device_type_name(i32 %27)
  call void (%struct.seq_file*, i8*, ...) @seq_printf(%struct.seq_file* %20, i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.3, i32 0, i32 0), i32 %.0, i32 %22, i32 %25, i8* %28)
  br label %40

; <label>:29:                                     ; preds = %14
  %30 = getelementptr inbounds %struct.snd_minor, %struct.snd_minor* %8, i32 0, i32 0
  %31 = load i32, i32* %30, align 8
  %32 = call i8* @snd_device_type_name(i32 %31)
  call void (%struct.seq_file*, i8*, ...) @seq_printf(%struct.seq_file* %20, i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.4, i32 0, i32 0), i32 %.0, i32 %22, i8* %32)
  br label %40

; <label>:33:                                     ; preds = %10
  %34 = getelementptr inbounds %struct.snd_info_buffer, %struct.snd_info_buffer* %1, i32 0, i32 0
  %35 = load i8*, i8** %34, align 8
  %36 = bitcast i8* %35 to %struct.seq_file*
  %37 = getelementptr inbounds %struct.snd_minor, %struct.snd_minor* %8, i32 0, i32 0
  %38 = load i32, i32* %37, align 8
  %39 = call i8* @snd_device_type_name(i32 %38)
  call void (%struct.seq_file*, i8*, ...) @seq_printf(%struct.seq_file* %36, i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.5, i32 0, i32 0), i32 %.0, i8* %39)
  br label %40

; <label>:40:                                     ; preds = %33, %29, %23, %5
  %41 = add nsw i32 %.0, 1
  br label %3

; <label>:42:                                     ; preds = %3
  call void @mutex_unlock(%struct.mutex* @sound_mutex)
  ret void
}

declare i32 @snd_info_register(%struct.snd_info_entry*) #1

; Function Attrs: noinline nounwind uwtable
define internal void @alsa_sound_exit() #0 section ".exit.text" {
  %1 = call i32 @snd_info_done()
  %2 = load i32, i32* @major, align 4
  call void @unregister_chrdev(i32 %2, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.2, i32 0, i32 0))
  ret void
}

declare i32 @snd_info_done() #1

; Function Attrs: noinline nounwind uwtable
define internal void @unregister_chrdev(i32, i8*) #0 {
  call void @__unregister_chrdev(i32 %0, i32 0, i32 256, i8* %1)
  ret void
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @alsa_sound_init() #0 section ".init.text" {
  %1 = load i32, i32* @major, align 4
  store i32 %1, i32* @snd_major, align 4
  %2 = load i32, i32* @cards_limit, align 4
  store i32 %2, i32* @snd_ecards_limit, align 4
  %3 = load i32, i32* @major, align 4
  %4 = call i32 @register_chrdev(i32 %3, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.2, i32 0, i32 0), %struct.file_operations* @snd_fops)
  %5 = icmp ne i32 %4, 0
  br i1 %5, label %6, label %9

; <label>:6:                                      ; preds = %0
  %7 = load i32, i32* @major, align 4
  %8 = call i32 (i8*, ...) @printk(i8* getelementptr inbounds ([63 x i8], [63 x i8]* @.str.14, i32 0, i32 0), i32 %7)
  br label %16

; <label>:9:                                      ; preds = %0
  %10 = call i32 @snd_info_init()
  %11 = icmp slt i32 %10, 0
  br i1 %11, label %12, label %14

; <label>:12:                                     ; preds = %9
  %13 = load i32, i32* @major, align 4
  call void @unregister_chrdev(i32 %13, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.2, i32 0, i32 0))
  br label %16

; <label>:14:                                     ; preds = %9
  %15 = call i32 (i8*, ...) @printk(i8* getelementptr inbounds ([57 x i8], [57 x i8]* @.str.15, i32 0, i32 0))
  br label %16

; <label>:16:                                     ; preds = %14, %12, %6
  %.0 = phi i32 [ -5, %6 ], [ -12, %12 ], [ 0, %14 ]
  ret i32 %.0
}

declare noalias i8* @__kmalloc(i64, i32) #1

declare void @seq_printf(%struct.seq_file*, i8*, ...) #1

; Function Attrs: noinline nounwind uwtable
define internal i8* @snd_device_type_name(i32) #0 {
  switch i32 %0, label %8 [
    i32 0, label %9
    i32 4, label %2
    i32 8, label %3
    i32 16, label %4
    i32 24, label %5
    i32 1, label %6
    i32 33, label %7
  ]

; <label>:2:                                      ; preds = %1
  br label %9

; <label>:3:                                      ; preds = %1
  br label %9

; <label>:4:                                      ; preds = %1
  br label %9

; <label>:5:                                      ; preds = %1
  br label %9

; <label>:6:                                      ; preds = %1
  br label %9

; <label>:7:                                      ; preds = %1
  br label %9

; <label>:8:                                      ; preds = %1
  br label %9

; <label>:9:                                      ; preds = %1, %8, %7, %6, %5, %4, %3, %2
  %.0 = phi i8* [ getelementptr inbounds ([2 x i8], [2 x i8]* @.str.13, i32 0, i32 0), %8 ], [ getelementptr inbounds ([6 x i8], [6 x i8]* @.str.12, i32 0, i32 0), %7 ], [ getelementptr inbounds ([10 x i8], [10 x i8]* @.str.11, i32 0, i32 0), %6 ], [ getelementptr inbounds ([22 x i8], [22 x i8]* @.str.10, i32 0, i32 0), %5 ], [ getelementptr inbounds ([23 x i8], [23 x i8]* @.str.9, i32 0, i32 0), %4 ], [ getelementptr inbounds ([9 x i8], [9 x i8]* @.str.8, i32 0, i32 0), %3 ], [ getelementptr inbounds ([19 x i8], [19 x i8]* @.str.7, i32 0, i32 0), %2 ], [ getelementptr inbounds ([8 x i8], [8 x i8]* @.str.6, i32 0, i32 0), %1 ]
  ret i8* %.0
}

declare void @__unregister_chrdev(i32, i32, i32, i8*) #1

; Function Attrs: noinline nounwind uwtable
define internal i32 @register_chrdev(i32, i8*, %struct.file_operations*) #0 {
  %4 = call i32 @__register_chrdev(i32 %0, i32 0, i32 256, i8* %1, %struct.file_operations* %2)
  ret i32 %4
}

declare i32 @printk(i8*, ...) #1

declare i32 @snd_info_init() #1

declare i32 @__register_chrdev(i32, i32, i32, i8*, %struct.file_operations*) #1

declare i64 @noop_llseek(%struct.file*, i64, i32) #1

; Function Attrs: noinline nounwind uwtable
define internal i32 @snd_open(%struct.inode*, %struct.file*) #0 {
  %3 = call i32 @iminor(%struct.inode* %0)
  %4 = zext i32 %3 to i64
  %5 = icmp uge i64 %4, 256
  br i1 %5, label %63, label %6

; <label>:6:                                      ; preds = %2
  call void @mutex_lock(%struct.mutex* @sound_mutex)
  %7 = zext i32 %3 to i64
  %8 = getelementptr inbounds [256 x %struct.snd_minor*], [256 x %struct.snd_minor*]* @snd_minors, i64 0, i64 %7
  %9 = load %struct.snd_minor*, %struct.snd_minor** %8, align 8
  %10 = icmp eq %struct.snd_minor* %9, null
  br i1 %10, label %11, label %15

; <label>:11:                                     ; preds = %6
  %12 = call %struct.snd_minor* @autoload_device(i32 %3)
  %13 = icmp ne %struct.snd_minor* %12, null
  br i1 %13, label %15, label %14

; <label>:14:                                     ; preds = %11
  call void @mutex_unlock(%struct.mutex* @sound_mutex)
  br label %63

; <label>:15:                                     ; preds = %11, %6
  %.02 = phi %struct.snd_minor* [ %9, %6 ], [ %12, %11 ]
  %16 = getelementptr inbounds %struct.snd_minor, %struct.snd_minor* %.02, i32 0, i32 3
  %17 = load %struct.file_operations*, %struct.file_operations** %16, align 8
  %18 = icmp ne %struct.file_operations* %17, null
  br i1 %18, label %19, label %28

; <label>:19:                                     ; preds = %15
  %20 = getelementptr inbounds %struct.snd_minor, %struct.snd_minor* %.02, i32 0, i32 3
  %21 = load %struct.file_operations*, %struct.file_operations** %20, align 8
  %22 = getelementptr inbounds %struct.file_operations, %struct.file_operations* %21, i32 0, i32 0
  %23 = load %struct.module*, %struct.module** %22, align 8
  %24 = call zeroext i1 @try_module_get(%struct.module* %23)
  br i1 %24, label %25, label %28

; <label>:25:                                     ; preds = %19
  %26 = getelementptr inbounds %struct.snd_minor, %struct.snd_minor* %.02, i32 0, i32 3
  %27 = load %struct.file_operations*, %struct.file_operations** %26, align 8
  br label %28

; <label>:28:                                     ; preds = %15, %19, %25
  %29 = phi %struct.file_operations* [ %27, %25 ], [ null, %19 ], [ null, %15 ]
  call void @mutex_unlock(%struct.mutex* @sound_mutex)
  %30 = icmp ne %struct.file_operations* %29, null
  br i1 %30, label %31, label %63

; <label>:31:                                     ; preds = %28
  %32 = getelementptr inbounds %struct.file, %struct.file* %1, i32 0, i32 3
  %33 = load %struct.file_operations*, %struct.file_operations** %32, align 8
  %34 = icmp ne %struct.file_operations* %33, null
  br i1 %34, label %35, label %40

; <label>:35:                                     ; preds = %31
  %36 = getelementptr inbounds %struct.file, %struct.file* %1, i32 0, i32 3
  %37 = load %struct.file_operations*, %struct.file_operations** %36, align 8
  %38 = getelementptr inbounds %struct.file_operations, %struct.file_operations* %37, i32 0, i32 0
  %39 = load %struct.module*, %struct.module** %38, align 8
  call void @module_put(%struct.module* %39)
  br label %40

; <label>:40:                                     ; preds = %35, %31
  %41 = getelementptr inbounds %struct.file, %struct.file* %1, i32 0, i32 3
  store %struct.file_operations* %29, %struct.file_operations** %41, align 8
  %42 = icmp ne %struct.file_operations* %29, null
  %43 = xor i1 %42, true
  %44 = xor i1 %43, true
  %45 = xor i1 %44, true
  %46 = zext i1 %45 to i32
  %47 = sext i32 %46 to i64
  %48 = icmp ne i64 %47, 0
  br i1 %48, label %49, label %51

; <label>:49:                                     ; preds = %40
  call void asm sideeffect "1:\09ud2\0A.pushsection __bug_table,\22a\22\0A2:\09.long 1b - 2b, ${0:c} - 2b\0A\09.word ${1:c}, 0\0A\09.org 2b+${2:c}\0A.popsection", "i,i,i,~{dirflag},~{fpsr},~{flags}"(i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.16, i32 0, i32 0), i32 174, i64 12) #2, !srcloc !1
  br label %50

; <label>:50:                                     ; preds = %50, %49
  br label %50

; <label>:51:                                     ; preds = %40
  %52 = getelementptr inbounds %struct.file, %struct.file* %1, i32 0, i32 3
  %53 = load %struct.file_operations*, %struct.file_operations** %52, align 8
  %54 = getelementptr inbounds %struct.file_operations, %struct.file_operations* %53, i32 0, i32 12
  %55 = load i32 (%struct.inode*, %struct.file*)*, i32 (%struct.inode*, %struct.file*)** %54, align 8
  %56 = icmp ne i32 (%struct.inode*, %struct.file*)* %55, null
  br i1 %56, label %57, label %63

; <label>:57:                                     ; preds = %51
  %58 = getelementptr inbounds %struct.file, %struct.file* %1, i32 0, i32 3
  %59 = load %struct.file_operations*, %struct.file_operations** %58, align 8
  %60 = getelementptr inbounds %struct.file_operations, %struct.file_operations* %59, i32 0, i32 12
  %61 = load i32 (%struct.inode*, %struct.file*)*, i32 (%struct.inode*, %struct.file*)** %60, align 8
  %62 = call i32 %61(%struct.inode* %0, %struct.file* %1)
  br label %63

; <label>:63:                                     ; preds = %51, %57, %28, %2, %14
  %.0 = phi i32 [ -19, %14 ], [ -19, %2 ], [ -19, %28 ], [ %62, %57 ], [ 0, %51 ]
  ret i32 %.0
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @iminor(%struct.inode*) #0 {
  %2 = getelementptr inbounds %struct.inode, %struct.inode* %0, i32 0, i32 13
  %3 = load i32, i32* %2, align 4
  %4 = and i32 %3, 1048575
  ret i32 %4
}

; Function Attrs: noinline nounwind uwtable
define internal %struct.snd_minor* @autoload_device(i32) #0 {
  call void @mutex_unlock(%struct.mutex* @sound_mutex)
  %2 = and i32 %0, 31
  switch i32 %2, label %11 [
    i32 0, label %3
    i32 1, label %10
  ]

; <label>:3:                                      ; preds = %1
  %4 = lshr i32 %0, 5
  %5 = sext i32 %4 to i64
  %6 = getelementptr inbounds [8 x %struct.snd_card*], [8 x %struct.snd_card*]* @snd_cards, i64 0, i64 %5
  %7 = load %struct.snd_card*, %struct.snd_card** %6, align 8
  %8 = icmp eq %struct.snd_card* %7, null
  br i1 %8, label %9, label %11

; <label>:9:                                      ; preds = %3
  call void @snd_request_card(i32 %4)
  br label %11

; <label>:10:                                     ; preds = %1
  call void @snd_request_other(i32 %0)
  br label %11

; <label>:11:                                     ; preds = %10, %1, %3, %9
  call void @mutex_lock(%struct.mutex* @sound_mutex)
  %12 = zext i32 %0 to i64
  %13 = getelementptr inbounds [256 x %struct.snd_minor*], [256 x %struct.snd_minor*]* @snd_minors, i64 0, i64 %12
  %14 = load %struct.snd_minor*, %struct.snd_minor** %13, align 8
  ret %struct.snd_minor* %14
}

declare zeroext i1 @try_module_get(%struct.module*) #1

declare void @module_put(%struct.module*) #1

; Function Attrs: noinline nounwind uwtable
define internal void @snd_request_other(i32) #0 {
  switch i32 %0, label %5 [
    i32 1, label %3
    i32 33, label %2
  ]

; <label>:2:                                      ; preds = %1
  br label %3

; <label>:3:                                      ; preds = %1, %2
  %.0 = phi i8* [ getelementptr inbounds ([10 x i8], [10 x i8]* @.str.18, i32 0, i32 0), %2 ], [ getelementptr inbounds ([8 x i8], [8 x i8]* @.str.17, i32 0, i32 0), %1 ]
  %4 = call i32 (i1, i8*, ...) @__request_module(i1 zeroext true, i8* %.0)
  br label %5

; <label>:5:                                      ; preds = %1, %3
  ret void
}

attributes #0 = { noinline nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { nounwind }

!llvm.ident = !{!0}

!0 = !{!"clang version 4.0.1 (tags/RELEASE_401/final)"}
!1 = !{i32 -2144542087, i32 -2144542062, i32 -2144541792, i32 -2144541995, i32 -2144541964, i32 -2144541934}
