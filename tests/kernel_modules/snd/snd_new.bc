; ModuleID = 'sound/core/sound.bc'
source_filename = "sound/core/sound.c"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%struct.kernel_symbol = type { i64, i8* }
%struct.kernel_param_ops = type { i32, i32 (i8*, %struct.kernel_param*)*, i32 (i8*, %struct.kernel_param*)*, void (i8*)* }
%struct.kernel_param = type { i8*, %struct.module*, %struct.kernel_param_ops*, i16, i8, i8, %union.anon.46 }
%struct.module = type { i32, %struct.list_head, [56 x i8], %struct.module_kobject, %struct.module_attribute*, i8*, i8*, %struct.kobject*, %struct.kernel_symbol*, i32*, i32, %struct.mutex, %struct.kernel_param*, i32, i32, %struct.kernel_symbol*, i32*, i8, %struct.kernel_symbol*, i32*, i32, i32, %struct.exception_table_entry*, i32 ()*, [40 x i8], %struct.module_layout, %struct.module_layout, %struct.mod_arch_specific, i64, i32, %struct.list_head, %struct.bug_entry*, %struct.mod_kallsyms*, %struct.mod_kallsyms, %struct.module_sect_attrs*, %struct.module_notes_attrs*, i8*, i8*, i32, i32, %struct.tracepoint**, i32, i8**, %struct.trace_event_call**, i32, %struct.trace_enum_map**, i32, %struct.list_head, %struct.list_head, void ()*, %struct.atomic_t, [12 x i8] }
%struct.module_kobject = type { %struct.kobject, %struct.module*, %struct.kobject*, %struct.module_param_attrs*, %struct.completion* }
%struct.kobject = type { i8*, %struct.list_head, %struct.kobject*, %struct.kset*, %struct.kobj_type*, %struct.kernfs_node*, %struct.kref, i8 }
%struct.kset = type { %struct.list_head, %struct.spinlock, %struct.kobject, %struct.kset_uevent_ops* }
%struct.spinlock = type { %union.anon.1 }
%union.anon.1 = type { %struct.raw_spinlock }
%struct.raw_spinlock = type { %struct.qspinlock }
%struct.qspinlock = type { %struct.atomic_t }
%struct.kset_uevent_ops = type { i32 (%struct.kset*, %struct.kobject*)*, i8* (%struct.kset*, %struct.kobject*)*, i32 (%struct.kset*, %struct.kobject*, %struct.kobj_uevent_env*)* }
%struct.kobj_uevent_env = type { [3 x i8*], [32 x i8*], i32, [2048 x i8], i32 }
%struct.kobj_type = type { void (%struct.kobject*)*, %struct.sysfs_ops*, %struct.attribute**, %struct.kobj_ns_type_operations* (%struct.kobject*)*, i8* (%struct.kobject*)* }
%struct.sysfs_ops = type { i64 (%struct.kobject*, %struct.attribute*, i8*)*, i64 (%struct.kobject*, %struct.attribute*, i8*, i64)* }
%struct.attribute = type { i8*, i16 }
%struct.kobj_ns_type_operations = type { i32, i1 ()*, i8* ()*, i8* (%struct.sock*)*, i8* ()*, void (i8*)* }
%struct.sock = type opaque
%struct.kernfs_node = type { %struct.atomic_t, %struct.atomic_t, %struct.kernfs_node*, i8*, %struct.rb_node, i8*, i32, %union.anon, i8*, i16, i16, i32, %struct.kernfs_iattrs* }
%struct.rb_node = type { i64, %struct.rb_node*, %struct.rb_node* }
%union.anon = type { %struct.kernfs_elem_attr }
%struct.kernfs_elem_attr = type { %struct.kernfs_ops*, %struct.kernfs_open_node*, i64, %struct.kernfs_node* }
%struct.kernfs_ops = type { i32 (%struct.kernfs_open_file*)*, void (%struct.kernfs_open_file*)*, i32 (%struct.seq_file*, i8*)*, i8* (%struct.seq_file*, i64*)*, i8* (%struct.seq_file*, i8*, i64*)*, void (%struct.seq_file*, i8*)*, i64 (%struct.kernfs_open_file*, i8*, i64, i64)*, i64, i8, i64 (%struct.kernfs_open_file*, i8*, i64, i64)*, i32 (%struct.kernfs_open_file*, %struct.vm_area_struct*)* }
%struct.kernfs_open_file = type { %struct.kernfs_node*, %struct.file*, %struct.seq_file*, i8*, %struct.mutex, %struct.mutex, i32, %struct.list_head, i8*, i64, i8, %struct.vm_operations_struct* }
%struct.file = type { %union.anon.2, %struct.path, %struct.inode*, %struct.file_operations*, %struct.spinlock, %struct.atomic64_t, i32, i32, %struct.mutex, i64, %struct.fown_struct, %struct.cred*, %struct.file_ra_state, i64, i8*, i8*, %struct.list_head, %struct.list_head, %struct.address_space* }
%union.anon.2 = type { %struct.callback_head }
%struct.callback_head = type { %struct.callback_head*, void (%struct.callback_head*)* }
%struct.path = type { %struct.vfsmount*, %struct.dentry* }
%struct.vfsmount = type opaque
%struct.dentry = type { i32, %struct.seqcount, %struct.hlist_bl_node, %struct.dentry*, %struct.qstr, %struct.inode*, [32 x i8], %struct.lockref, %struct.dentry_operations*, %struct.super_block*, i64, i8*, %union.anon.44, %struct.list_head, %struct.list_head, %union.anon.45 }
%struct.seqcount = type { i32 }
%struct.hlist_bl_node = type { %struct.hlist_bl_node*, %struct.hlist_bl_node** }
%struct.qstr = type { %union.anon.3, i8* }
%union.anon.3 = type { i64 }
%struct.lockref = type { %union.anon.42 }
%union.anon.42 = type { i64 }
%struct.dentry_operations = type { i32 (%struct.dentry*, i32)*, i32 (%struct.dentry*, i32)*, i32 (%struct.dentry*, %struct.qstr*)*, i32 (%struct.dentry*, i32, i8*, %struct.qstr*)*, i32 (%struct.dentry*)*, i32 (%struct.dentry*)*, void (%struct.dentry*)*, void (%struct.dentry*)*, void (%struct.dentry*, %struct.inode*)*, i8* (%struct.dentry*, i8*, i32)*, %struct.vfsmount* (%struct.path*)*, i32 (%struct.path*, i1)*, %struct.dentry* (%struct.dentry*, %struct.inode*, i32)*, [24 x i8] }
%struct.super_block = type { %struct.list_head, i32, i8, i64, i64, %struct.file_system_type*, %struct.super_operations*, %struct.dquot_operations*, %struct.quotactl_ops*, %struct.export_operations*, i64, i64, i64, %struct.dentry*, %struct.rw_semaphore, i32, %struct.atomic_t, i8*, %struct.xattr_handler**, %struct.fscrypt_operations*, %struct.hlist_bl_head, %struct.list_head, %struct.block_device*, %struct.backing_dev_info*, %struct.mtd_info*, %struct.hlist_node, i32, %struct.quota_info, %struct.sb_writers, [32 x i8], [16 x i8], i8*, i32, i32, i32, %struct.mutex, i8*, i8*, %struct.dentry_operations*, i32, %struct.shrinker, %struct.atomic64_t, i32, %struct.workqueue_struct*, %struct.hlist_head, %struct.user_namespace*, %struct.list_lru, [56 x i8], %struct.list_lru, %struct.callback_head, %struct.work_struct, %struct.mutex, i32, [36 x i8], %struct.spinlock, %struct.list_head, %struct.spinlock, %struct.list_head, [16 x i8] }
%struct.file_system_type = type { i8*, i32, %struct.dentry* (%struct.file_system_type*, i32, i8*, i8*)*, void (%struct.super_block*)*, %struct.module*, %struct.file_system_type*, %struct.hlist_head, %struct.lock_class_key, %struct.lock_class_key, %struct.lock_class_key, [3 x %struct.lock_class_key], %struct.lock_class_key, %struct.lock_class_key, %struct.lock_class_key }
%struct.lock_class_key = type {}
%struct.super_operations = type { %struct.inode* (%struct.super_block*)*, void (%struct.inode*)*, void (%struct.inode*, i32)*, i32 (%struct.inode*, %struct.writeback_control*)*, i32 (%struct.inode*)*, void (%struct.inode*)*, void (%struct.super_block*)*, i32 (%struct.super_block*, i32)*, i32 (%struct.super_block*)*, i32 (%struct.super_block*)*, i32 (%struct.super_block*)*, i32 (%struct.super_block*)*, i32 (%struct.dentry*, %struct.kstatfs*)*, i32 (%struct.super_block*, i32*, i8*)*, void (%struct.super_block*)*, i32 (%struct.seq_file*, %struct.dentry*)*, i32 (%struct.seq_file*, %struct.dentry*)*, i32 (%struct.seq_file*, %struct.dentry*)*, i32 (%struct.seq_file*, %struct.dentry*)*, i64 (%struct.super_block*, i32, i8*, i64, i64)*, i64 (%struct.super_block*, i32, i8*, i64, i64)*, %struct.dquot** (%struct.inode*)*, i32 (%struct.super_block*, %struct.page*, i32)*, i64 (%struct.super_block*, %struct.shrink_control*)*, i64 (%struct.super_block*, %struct.shrink_control*)* }
%struct.writeback_control = type opaque
%struct.kstatfs = type opaque
%struct.dquot = type { %struct.hlist_node, %struct.list_head, %struct.list_head, %struct.list_head, %struct.mutex, %struct.atomic_t, %struct.__wait_queue_head, %struct.super_block*, %struct.kqid, i64, i64, %struct.mem_dqblk }
%struct.__wait_queue_head = type { %struct.spinlock, %struct.list_head }
%struct.kqid = type { %union.anon.4, i32 }
%union.anon.4 = type { %struct.kuid_t }
%struct.kuid_t = type { i32 }
%struct.mem_dqblk = type { i64, i64, i64, i64, i64, i64, i64, i64, i64 }
%struct.page = type { i64, %union.anon.5, %union.anon.28, %union.anon.29, %union.anon.33, %union.anon.36, [8 x i8] }
%union.anon.5 = type { %struct.address_space* }
%union.anon.28 = type { i64 }
%union.anon.29 = type { i64 }
%union.anon.33 = type { %struct.list_head }
%union.anon.36 = type { i64 }
%struct.shrink_control = type { i32, i64, i32, %struct.mem_cgroup* }
%struct.mem_cgroup = type opaque
%struct.dquot_operations = type { i32 (%struct.dquot*)*, %struct.dquot* (%struct.super_block*, i32)*, void (%struct.dquot*)*, i32 (%struct.dquot*)*, i32 (%struct.dquot*)*, i32 (%struct.dquot*)*, i32 (%struct.super_block*, i32)*, i64* (%struct.inode*)*, i32 (%struct.inode*, %struct.kprojid_t*)*, i32 (%struct.super_block*, %struct.kqid*)* }
%struct.kprojid_t = type { i32 }
%struct.quotactl_ops = type { i32 (%struct.super_block*, i32, i32, %struct.path*)*, i32 (%struct.super_block*, i32)*, i32 (%struct.super_block*, i32)*, i32 (%struct.super_block*, i32)*, i32 (%struct.super_block*, i32)*, i32 (%struct.super_block*, i32, %struct.qc_info*)*, i32 (%struct.super_block*, i64, %struct.qc_dqblk*)*, i32 (%struct.super_block*, %struct.kqid*, %struct.qc_dqblk*)*, i32 (%struct.super_block*, i64, %struct.qc_dqblk*)*, i32 (%struct.super_block*, %struct.qc_state*)*, i32 (%struct.super_block*, i32)* }
%struct.qc_info = type { i32, i32, i32, i32, i32, i32, i32, i32 }
%struct.qc_dqblk = type { i32, i64, i64, i64, i64, i64, i64, i64, i64, i32, i32, i64, i64, i64, i64, i32 }
%struct.qc_state = type { i32, [3 x %struct.qc_type_state] }
%struct.qc_type_state = type { i32, i32, i32, i32, i32, i32, i32, i64, i64, i64 }
%struct.export_operations = type opaque
%struct.rw_semaphore = type { %struct.atomic64_t, %struct.list_head, %struct.raw_spinlock, %struct.optimistic_spin_queue, %struct.task_struct* }
%struct.optimistic_spin_queue = type { %struct.atomic_t }
%struct.task_struct = type { %struct.thread_info, i64, i8*, %struct.atomic_t, i32, i32, %struct.llist_node, i32, i32, i32, i64, %struct.task_struct*, i32, i32, i32, i32, i32, i32, %struct.sched_class*, [16 x i8], %struct.sched_entity, %struct.sched_rt_entity, %struct.task_group*, %struct.sched_dl_entity, i32, i32, i32, %struct.cpumask, %struct.sched_info, %struct.list_head, %struct.plist_node, %struct.rb_node, %struct.mm_struct*, %struct.mm_struct*, %struct.vmacache, %struct.task_rss_stat, i32, i32, i32, i32, i64, i32, i8, [3 x i8], i8, i64, %struct.restart_block, i32, i32, %struct.task_struct*, %struct.task_struct*, %struct.list_head, %struct.list_head, %struct.task_struct*, %struct.list_head, %struct.list_head, [3 x %struct.pid_link], %struct.list_head, %struct.list_head, %struct.completion*, i32*, i32*, i64, i64, i64, %struct.prev_cputime, i64, i64, i64, i64, i64, i64, %struct.task_cputime, [3 x %struct.list_head], %struct.cred*, %struct.cred*, %struct.cred*, [16 x i8], %struct.nameidata*, %struct.sysv_sem, %struct.sysv_shm, %struct.fs_struct*, %struct.files_struct*, %struct.nsproxy*, %struct.signal_struct*, %struct.sighand_struct*, %struct.sigset_t, %struct.sigset_t, %struct.sigset_t, %struct.sigpending, i64, i64, i32, %struct.callback_head*, %struct.audit_context*, %struct.kuid_t, i32, %struct.seccomp, i32, i32, %struct.spinlock, %struct.raw_spinlock, %struct.wake_q_node, %struct.rb_root, %struct.rb_node*, %struct.rt_mutex_waiter*, i8*, %struct.bio_list*, %struct.blk_plug*, %struct.reclaim_state*, %struct.backing_dev_info*, %struct.io_context*, i64, %struct.siginfo*, %struct.task_io_accounting, i64, i64, i64, %struct.nodemask_t, %struct.seqcount, i32, i32, %struct.css_set*, %struct.list_head, %struct.robust_list_head*, %struct.compat_robust_list_head*, %struct.list_head, %struct.futex_pi_state*, [2 x %struct.perf_event_context*], %struct.mutex, %struct.list_head, %struct.mempolicy*, i16, i16, %struct.tlbflush_unmap_batch, %struct.callback_head, %struct.pipe_inode_info*, %struct.page_frag, %struct.task_delay_info*, i32, i32, i64, i64, i64, i64, i64, i32, %struct.task_struct*, %struct.vm_struct*, %struct.atomic_t, [28 x i8], %struct.thread_struct }
%struct.thread_info = type { i64 }
%struct.llist_node = type { %struct.llist_node* }
%struct.sched_class = type opaque
%struct.sched_entity = type { %struct.load_weight, %struct.rb_node, %struct.list_head, i32, i64, i64, i64, i64, i64, %struct.sched_statistics, i32, %struct.sched_entity*, %struct.cfs_rq*, %struct.cfs_rq*, [32 x i8], %struct.sched_avg, [24 x i8] }
%struct.load_weight = type { i64, i32 }
%struct.sched_statistics = type { i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64 }
%struct.cfs_rq = type opaque
%struct.sched_avg = type { i64, i64, i32, i32, i64, i64 }
%struct.sched_rt_entity = type { %struct.list_head, i64, i64, i32, i16, i16, %struct.sched_rt_entity* }
%struct.task_group = type opaque
%struct.sched_dl_entity = type { %struct.rb_node, i64, i64, i64, i64, i64, i64, i32, i32, i32, i32, %struct.hrtimer }
%struct.hrtimer = type { %struct.timerqueue_node, i64, i32 (%struct.hrtimer*)*, %struct.hrtimer_clock_base*, i8, i8 }
%struct.timerqueue_node = type { %struct.rb_node, i64 }
%struct.hrtimer_clock_base = type { %struct.hrtimer_cpu_base*, i32, i32, %struct.timerqueue_head, i64 ()*, i64, [16 x i8] }
%struct.hrtimer_cpu_base = type { %struct.raw_spinlock, %struct.seqcount, %struct.hrtimer*, i32, i32, i32, i8, i8, i8, i64, %struct.hrtimer*, i32, i32, i32, i32, [4 x %struct.hrtimer_clock_base] }
%struct.timerqueue_head = type { %struct.rb_root, %struct.timerqueue_node* }
%struct.cpumask = type { [1 x i64] }
%struct.sched_info = type { i64, i64, i64, i64 }
%struct.plist_node = type { i32, %struct.list_head, %struct.list_head }
%struct.mm_struct = type { %struct.vm_area_struct*, %struct.rb_root, i32, i64 (%struct.file*, i64, i64, i64, i64)*, i64, i64, i64, i64, %struct.pgd_t*, %struct.atomic_t, %struct.atomic_t, %struct.atomic64_t, %struct.atomic64_t, i32, %struct.spinlock, %struct.rw_semaphore, %struct.list_head, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, [46 x i64], %struct.mm_rss_stat, %struct.linux_binfmt*, [1 x %struct.cpumask], %struct.mm_context_t, i64, %struct.core_state*, %struct.spinlock, %struct.kioctx_table*, %struct.user_namespace*, %struct.file*, %struct.mmu_notifier_mm*, i8, %struct.uprobes_state, %struct.atomic64_t, %struct.work_struct }
%struct.vm_area_struct = type { i64, i64, %struct.vm_area_struct*, %struct.vm_area_struct*, %struct.rb_node, i64, %struct.mm_struct*, %struct.pgprot, i64, %struct.anon.6, %struct.list_head, %struct.anon_vma*, %struct.vm_operations_struct*, i64, %struct.file*, i8*, %struct.mempolicy*, %struct.vm_userfaultfd_ctx }
%struct.pgprot = type { i64 }
%struct.anon.6 = type { %struct.rb_node, i64 }
%struct.anon_vma = type opaque
%struct.vm_userfaultfd_ctx = type {}
%struct.pgd_t = type { i64 }
%struct.mm_rss_stat = type { [4 x %struct.atomic64_t] }
%struct.linux_binfmt = type opaque
%struct.mm_context_t = type { %struct.ldt_struct*, i16, %struct.mutex, i8*, %struct.vdso_image*, %struct.atomic_t, i16, i16 }
%struct.ldt_struct = type opaque
%struct.vdso_image = type { i8*, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64 }
%struct.core_state = type { %struct.atomic_t, %struct.core_thread, %struct.completion }
%struct.core_thread = type { %struct.task_struct*, %struct.core_thread* }
%struct.completion = type { i32, %struct.__wait_queue_head }
%struct.kioctx_table = type opaque
%struct.mmu_notifier_mm = type opaque
%struct.uprobes_state = type {}
%struct.vmacache = type { i32, [4 x %struct.vm_area_struct*] }
%struct.task_rss_stat = type { i32, [4 x i32] }
%struct.restart_block = type { i64 (%struct.restart_block*)*, %union.anon.7 }
%union.anon.7 = type { %struct.anon.8 }
%struct.anon.8 = type { i32*, i32, i32, i32, i64, i32* }
%struct.pid_link = type { %struct.hlist_node, %struct.pid* }
%struct.pid = type { %struct.atomic_t, i32, [3 x %struct.hlist_head], %struct.callback_head, [1 x %struct.upid] }
%struct.upid = type { i32, %struct.pid_namespace*, %struct.hlist_node }
%struct.pid_namespace = type opaque
%struct.prev_cputime = type { i64, i64, %struct.raw_spinlock }
%struct.task_cputime = type { i64, i64, i64 }
%struct.nameidata = type opaque
%struct.sysv_sem = type { %struct.sem_undo_list* }
%struct.sem_undo_list = type opaque
%struct.sysv_shm = type { %struct.list_head }
%struct.fs_struct = type opaque
%struct.files_struct = type opaque
%struct.nsproxy = type opaque
%struct.signal_struct = type opaque
%struct.sighand_struct = type opaque
%struct.sigset_t = type { [1 x i64] }
%struct.sigpending = type { %struct.list_head, %struct.sigset_t }
%struct.audit_context = type opaque
%struct.seccomp = type { i32, %struct.seccomp_filter* }
%struct.seccomp_filter = type opaque
%struct.wake_q_node = type { %struct.wake_q_node* }
%struct.rb_root = type { %struct.rb_node* }
%struct.rt_mutex_waiter = type opaque
%struct.bio_list = type opaque
%struct.blk_plug = type opaque
%struct.reclaim_state = type opaque
%struct.io_context = type opaque
%struct.siginfo = type { i32, i32, i32, %union.anon.11 }
%union.anon.11 = type { %struct.anon.15, [80 x i8] }
%struct.anon.15 = type { i32, i32, i32, i64, i64 }
%struct.task_io_accounting = type { i64, i64, i64, i64, i64, i64, i64 }
%struct.nodemask_t = type { [1 x i64] }
%struct.css_set = type opaque
%struct.robust_list_head = type opaque
%struct.compat_robust_list_head = type opaque
%struct.futex_pi_state = type opaque
%struct.perf_event_context = type opaque
%struct.mempolicy = type opaque
%struct.tlbflush_unmap_batch = type { %struct.cpumask, i8, i8 }
%struct.pipe_inode_info = type opaque
%struct.page_frag = type { %struct.page*, i32, i32 }
%struct.task_delay_info = type opaque
%struct.vm_struct = type opaque
%struct.thread_struct = type { [3 x %struct.desc_struct], i64, i64, i16, i16, i16, i16, i32, i64, i64, [4 x %struct.perf_event*], i64, i64, i64, i64, i64, i64*, i64, i32, %struct.mm_segment_t, i8, [15 x i8], %struct.fpu }
%struct.desc_struct = type { %union.anon.21 }
%union.anon.21 = type { %struct.anon.22 }
%struct.anon.22 = type { i32, i32 }
%struct.perf_event = type opaque
%struct.mm_segment_t = type { i64 }
%struct.fpu = type { i32, i8, i8, [58 x i8], %union.fpregs_state }
%union.fpregs_state = type { %struct.xregs_state, [3520 x i8] }
%struct.xregs_state = type { %struct.fxregs_state, %struct.xstate_header, [0 x i8] }
%struct.fxregs_state = type { i16, i16, i16, i16, %union.anon.24, i32, i32, [32 x i32], [64 x i32], [12 x i32], %union.anon.27 }
%union.anon.24 = type { %struct.anon.25 }
%struct.anon.25 = type { i64, i64 }
%union.anon.27 = type { [12 x i32] }
%struct.xstate_header = type { i64, i64, [6 x i64] }
%struct.xattr_handler = type opaque
%struct.fscrypt_operations = type opaque
%struct.hlist_bl_head = type { %struct.hlist_bl_node* }
%struct.block_device = type { i32, i32, %struct.inode*, %struct.super_block*, %struct.mutex, i8*, i8*, i32, i8, %struct.list_head, %struct.block_device*, i32, %struct.hd_struct*, i32, i32, %struct.gendisk*, %struct.request_queue*, %struct.backing_dev_info*, %struct.list_head, i64, i32, %struct.mutex }
%struct.hd_struct = type opaque
%struct.gendisk = type opaque
%struct.request_queue = type opaque
%struct.backing_dev_info = type opaque
%struct.mtd_info = type opaque
%struct.hlist_node = type { %struct.hlist_node*, %struct.hlist_node** }
%struct.quota_info = type { i32, %struct.mutex, [3 x %struct.inode*], [3 x %struct.mem_dqinfo], [3 x %struct.quota_format_ops*] }
%struct.mem_dqinfo = type { %struct.quota_format_type*, i32, %struct.list_head, i64, i32, i32, i64, i64, i8* }
%struct.quota_format_type = type { i32, %struct.quota_format_ops*, %struct.module*, %struct.quota_format_type* }
%struct.quota_format_ops = type { i32 (%struct.super_block*, i32)*, i32 (%struct.super_block*, i32)*, i32 (%struct.super_block*, i32)*, i32 (%struct.super_block*, i32)*, i32 (%struct.dquot*)*, i32 (%struct.dquot*)*, i32 (%struct.dquot*)*, i32 (%struct.super_block*, %struct.kqid*)* }
%struct.sb_writers = type { i32, %struct.__wait_queue_head, [3 x %struct.percpu_rw_semaphore] }
%struct.percpu_rw_semaphore = type { %struct.rcu_sync, i32*, %struct.rw_semaphore, %struct.rcuwait, i32 }
%struct.rcu_sync = type { i32, i32, %struct.__wait_queue_head, i32, %struct.callback_head, i32 }
%struct.rcuwait = type { %struct.task_struct* }
%struct.shrinker = type { i64 (%struct.shrinker*, %struct.shrink_control*)*, i64 (%struct.shrinker*, %struct.shrink_control*)*, i32, i64, i64, %struct.list_head, %struct.atomic64_t* }
%struct.workqueue_struct = type opaque
%struct.hlist_head = type { %struct.hlist_node* }
%struct.user_namespace = type opaque
%struct.list_lru = type { %struct.list_lru_node* }
%struct.list_lru_node = type { %struct.spinlock, %struct.list_lru_one, [32 x i8] }
%struct.list_lru_one = type { %struct.list_head, i64 }
%struct.work_struct = type { %struct.atomic64_t, %struct.list_head, void (%struct.work_struct*)* }
%union.anon.44 = type { %struct.list_head }
%union.anon.45 = type { %struct.hlist_node }
%struct.inode = type { i16, i16, %struct.kuid_t, %struct.kgid_t, i32, %struct.posix_acl*, %struct.posix_acl*, %struct.inode_operations*, %struct.super_block*, %struct.address_space*, i8*, i64, %union.anon.37, i32, i64, %struct.timespec, %struct.timespec, %struct.timespec, %struct.spinlock, i16, i32, i64, i64, %struct.rw_semaphore, i64, i64, %struct.hlist_node, %struct.list_head, %struct.list_head, %struct.list_head, %struct.list_head, %union.anon.38, i64, %struct.atomic_t, %struct.atomic_t, %struct.atomic_t, %struct.file_operations*, %struct.file_lock_context*, %struct.address_space, %struct.list_head, %union.anon.41, i32, i32, %struct.hlist_head, i8* }
%struct.kgid_t = type { i32 }
%struct.posix_acl = type opaque
%struct.inode_operations = type { %struct.dentry* (%struct.inode*, %struct.dentry*, i32)*, i8* (%struct.dentry*, %struct.inode*, %struct.delayed_call*)*, i32 (%struct.inode*, i32)*, %struct.posix_acl* (%struct.inode*, i32)*, i32 (%struct.dentry*, i8*, i32)*, i32 (%struct.inode*, %struct.dentry*, i16, i1)*, i32 (%struct.dentry*, %struct.inode*, %struct.dentry*)*, i32 (%struct.inode*, %struct.dentry*)*, i32 (%struct.inode*, %struct.dentry*, i8*)*, i32 (%struct.inode*, %struct.dentry*, i16)*, i32 (%struct.inode*, %struct.dentry*)*, i32 (%struct.inode*, %struct.dentry*, i16, i32)*, i32 (%struct.inode*, %struct.dentry*, %struct.inode*, %struct.dentry*, i32)*, i32 (%struct.dentry*, %struct.iattr*)*, i32 (%struct.path*, %struct.kstat*, i32, i32)*, i64 (%struct.dentry*, i8*, i64)*, i32 (%struct.inode*, %struct.fiemap_extent_info*, i64, i64)*, i32 (%struct.inode*, %struct.timespec*, i32)*, i32 (%struct.inode*, %struct.dentry*, %struct.file*, i32, i16, i32*)*, i32 (%struct.inode*, %struct.dentry*, i16)*, i32 (%struct.inode*, %struct.posix_acl*, i32)*, [24 x i8] }
%struct.delayed_call = type { void (i8*)*, i8* }
%struct.iattr = type { i32, i16, %struct.kuid_t, %struct.kgid_t, i64, %struct.timespec, %struct.timespec, %struct.timespec, %struct.file* }
%struct.kstat = type { i32, i16, i32, i32, i64, i64, i64, i32, i32, %struct.kuid_t, %struct.kgid_t, i64, %struct.timespec, %struct.timespec, %struct.timespec, %struct.timespec, i64 }
%struct.fiemap_extent_info = type { i32, i32, i32, %struct.fiemap_extent* }
%struct.fiemap_extent = type { i64, i64, i64, [2 x i64], i32, [3 x i32] }
%union.anon.37 = type { i32 }
%struct.timespec = type { i64, i64 }
%union.anon.38 = type { %struct.callback_head }
%struct.file_lock_context = type { %struct.spinlock, %struct.list_head, %struct.list_head, %struct.list_head }
%struct.address_space = type { %struct.inode*, %struct.radix_tree_root, %struct.spinlock, %struct.atomic_t, %struct.rb_root, %struct.rw_semaphore, i64, i64, i64, %struct.address_space_operations*, i64, %struct.spinlock, i32, %struct.list_head, i8* }
%struct.radix_tree_root = type { i32, %struct.radix_tree_node* }
%struct.radix_tree_node = type { i8, i8, i8, i8, %struct.radix_tree_node*, %struct.radix_tree_root*, %union.anon.0, [64 x i8*], [3 x [1 x i64]] }
%union.anon.0 = type { %struct.list_head }
%struct.address_space_operations = type { i32 (%struct.page*, %struct.writeback_control*)*, i32 (%struct.file*, %struct.page*)*, i32 (%struct.address_space*, %struct.writeback_control*)*, i32 (%struct.page*)*, i32 (%struct.file*, %struct.address_space*, %struct.list_head*, i32)*, i32 (%struct.file*, %struct.address_space*, i64, i32, i32, %struct.page**, i8**)*, i32 (%struct.file*, %struct.address_space*, i64, i32, i32, %struct.page*, i8*)*, i64 (%struct.address_space*, i64)*, void (%struct.page*, i32, i32)*, i32 (%struct.page*, i32)*, void (%struct.page*)*, i64 (%struct.kiocb*, %struct.iov_iter*)*, i32 (%struct.address_space*, %struct.page*, %struct.page*, i32)*, i1 (%struct.page*, i32)*, void (%struct.page*)*, i32 (%struct.page*)*, i32 (%struct.page*, i64, i64)*, void (%struct.page*, i8*, i8*)*, i32 (%struct.address_space*, %struct.page*)*, i32 (%struct.swap_info_struct*, %struct.file*, i64*)*, void (%struct.file*)* }
%struct.kiocb = type { %struct.file*, i64, void (%struct.kiocb*, i64, i64)*, i8*, i32 }
%struct.iov_iter = type opaque
%struct.swap_info_struct = type opaque
%union.anon.41 = type { %struct.pipe_inode_info* }
%struct.file_operations = type { %struct.module*, i64 (%struct.file*, i64, i32)*, i64 (%struct.file*, i8*, i64, i64*)*, i64 (%struct.file*, i8*, i64, i64*)*, i64 (%struct.kiocb*, %struct.iov_iter*)*, i64 (%struct.kiocb*, %struct.iov_iter*)*, i32 (%struct.file*, %struct.dir_context*)*, i32 (%struct.file*, %struct.dir_context*)*, i32 (%struct.file*, %struct.poll_table_struct*)*, i64 (%struct.file*, i32, i64)*, i64 (%struct.file*, i32, i64)*, i32 (%struct.file*, %struct.vm_area_struct*)*, i32 (%struct.inode*, %struct.file*)*, i32 (%struct.file*, i8*)*, i32 (%struct.inode*, %struct.file*)*, i32 (%struct.file*, i64, i64, i32)*, i32 (i32, %struct.file*, i32)*, i32 (%struct.file*, i32, %struct.file_lock*)*, i64 (%struct.file*, %struct.page*, i32, i64, i64*, i32)*, i64 (%struct.file*, i64, i64, i64, i64)*, i32 (i32)*, i32 (%struct.file*, i32, %struct.file_lock*)*, i64 (%struct.pipe_inode_info*, %struct.file*, i64*, i64, i32)*, i64 (%struct.file*, i64*, %struct.pipe_inode_info*, i64, i32)*, i32 (%struct.file*, i64, %struct.file_lock**, i8**)*, i64 (%struct.file*, i32, i64, i64)*, void (%struct.seq_file*, %struct.file*)*, i64 (%struct.file*, i64, %struct.file*, i64, i64, i32)*, i32 (%struct.file*, i64, %struct.file*, i64, i64)*, i64 (%struct.file*, i64, i64, %struct.file*, i64)* }
%struct.dir_context = type { i32 (%struct.dir_context*, i8*, i32, i64, i64, i32)*, i64 }
%struct.poll_table_struct = type { void (%struct.file*, %struct.__wait_queue_head*, %struct.poll_table_struct*)*, i64 }
%struct.file_lock = type { %struct.file_lock*, %struct.list_head, %struct.hlist_node, %struct.list_head, i8*, i32, i8, i32, i32, %struct.pid*, %struct.__wait_queue_head, %struct.file*, i64, i64, %struct.fasync_struct*, i64, i64, %struct.file_lock_operations*, %struct.lock_manager_operations*, %union.anon.39 }
%struct.fasync_struct = type { %struct.spinlock, i32, i32, %struct.fasync_struct*, %struct.file*, %struct.callback_head }
%struct.file_lock_operations = type { void (%struct.file_lock*, %struct.file_lock*)*, void (%struct.file_lock*)* }
%struct.lock_manager_operations = type { i32 (%struct.file_lock*, %struct.file_lock*)*, i64 (%struct.file_lock*)*, i8* (i8*)*, void (i8*)*, void (%struct.file_lock*)*, i32 (%struct.file_lock*, i32)*, i1 (%struct.file_lock*)*, i32 (%struct.file_lock*, i32, %struct.list_head*)*, void (%struct.file_lock*, i8**)* }
%union.anon.39 = type { %struct.nfs_lock_info }
%struct.nfs_lock_info = type { i32, %struct.nlm_lockowner*, %struct.list_head }
%struct.nlm_lockowner = type opaque
%struct.atomic64_t = type { i64 }
%struct.fown_struct = type { %struct.rwlock_t, %struct.pid*, i32, %struct.kuid_t, %struct.kuid_t, i32 }
%struct.rwlock_t = type { %struct.qrwlock }
%struct.qrwlock = type { %struct.atomic_t, %struct.qspinlock }
%struct.cred = type { %struct.atomic_t, %struct.kuid_t, %struct.kgid_t, %struct.kuid_t, %struct.kgid_t, %struct.kuid_t, %struct.kgid_t, %struct.kuid_t, %struct.kgid_t, i32, %struct.kernel_cap_struct, %struct.kernel_cap_struct, %struct.kernel_cap_struct, %struct.kernel_cap_struct, %struct.kernel_cap_struct, i8, %struct.key*, %struct.key*, %struct.key*, %struct.key*, i8*, %struct.user_struct*, %struct.user_namespace*, %struct.group_info*, %struct.callback_head }
%struct.kernel_cap_struct = type { [2 x i32] }
%struct.key = type { %struct.atomic_t, i32, %union.anon.47, %struct.rw_semaphore, %struct.key_user*, i8*, %union.anon.48, i64, %struct.kuid_t, %struct.kgid_t, i32, i16, i16, i64, %union.anon.49, %union.anon.51, i32 (%struct.key*, %struct.key_type*, %union.key_payload*)* }
%union.anon.47 = type { %struct.rb_node }
%struct.key_user = type opaque
%union.anon.48 = type { i64 }
%union.anon.49 = type { %struct.keyring_index_key }
%struct.keyring_index_key = type { %struct.key_type*, i8*, i64 }
%struct.key_type = type opaque
%union.anon.51 = type { %union.key_payload }
%union.key_payload = type { [4 x i8*] }
%struct.user_struct = type { %struct.atomic_t, %struct.atomic_t, %struct.atomic_t, %struct.atomic64_t, i64, i64, i64, %struct.atomic64_t, %struct.key*, %struct.key*, %struct.hlist_node, %struct.kuid_t, %struct.atomic64_t }
%struct.group_info = type { %struct.atomic_t, i32, [0 x %struct.kgid_t] }
%struct.file_ra_state = type { i64, i32, i32, i32, i32, i64 }
%struct.seq_file = type { i8*, i64, i64, i64, i64, i64, i64, i64, %struct.mutex, %struct.seq_operations*, i32, %struct.file*, i8* }
%struct.seq_operations = type { i8* (%struct.seq_file*, i64*)*, void (%struct.seq_file*, i8*)*, i8* (%struct.seq_file*, i8*, i64*)*, i32 (%struct.seq_file*, i8*)* }
%struct.vm_operations_struct = type opaque
%struct.kernfs_open_node = type opaque
%struct.kernfs_iattrs = type opaque
%struct.kref = type { %struct.refcount_struct }
%struct.refcount_struct = type { %struct.atomic_t }
%struct.module_param_attrs = type opaque
%struct.module_attribute = type { %struct.attribute, i64 (%struct.module_attribute*, %struct.module_kobject*, i8*)*, i64 (%struct.module_attribute*, %struct.module_kobject*, i8*, i64)*, void (%struct.module*, i8*)*, i32 (%struct.module*)*, void (%struct.module*)* }
%struct.mutex = type { %struct.atomic64_t, %struct.spinlock, %struct.optimistic_spin_queue, %struct.list_head }
%struct.exception_table_entry = type { i32, i32, i32 }
%struct.module_layout = type { i8*, i32, i32, i32, i32, %struct.mod_tree_node }
%struct.mod_tree_node = type { %struct.module*, %struct.latch_tree_node }
%struct.latch_tree_node = type { [2 x %struct.rb_node] }
%struct.mod_arch_specific = type {}
%struct.bug_entry = type { i32, i32, i16, i16 }
%struct.mod_kallsyms = type { %struct.elf64_sym*, i32, i8* }
%struct.elf64_sym = type { i32, i8, i8, i16, i64, i64 }
%struct.module_sect_attrs = type opaque
%struct.module_notes_attrs = type opaque
%struct.tracepoint = type { i8*, %struct.static_key, i32 ()*, void ()*, %struct.tracepoint_func* }
%struct.static_key = type { %struct.atomic_t }
%struct.tracepoint_func = type { i8*, i8*, i32 }
%struct.trace_event_call = type opaque
%struct.trace_enum_map = type opaque
%struct.list_head = type { %struct.list_head*, %struct.list_head* }
%struct.atomic_t = type { i32 }
%union.anon.46 = type { i8* }
%struct.snd_minor = type { i32, i32, i32, %struct.file_operations*, i8*, %struct.device*, %struct.snd_card* }
%struct.device = type { %struct.device*, %struct.device_private*, %struct.kobject, i8*, %struct.device_type*, %struct.mutex, %struct.bus_type*, %struct.device_driver*, i8*, i8*, %struct.dev_links_info, %struct.dev_pm_info, %struct.dev_pm_domain*, %struct.irq_domain*, %struct.list_head, i32, %struct.dma_map_ops*, i64*, i64, i64, %struct.device_dma_parameters*, %struct.list_head, %struct.dma_coherent_mem*, %struct.dev_archdata, %struct.device_node*, %struct.fwnode_handle*, i32, i32, %struct.spinlock, %struct.list_head, %struct.klist_node, %struct.class*, %struct.attribute_group**, void (%struct.device*)*, %struct.iommu_group*, %struct.iommu_fwspec*, i8 }
%struct.device_private = type opaque
%struct.device_type = type { i8*, %struct.attribute_group**, i32 (%struct.device*, %struct.kobj_uevent_env*)*, i8* (%struct.device*, i16*, %struct.kuid_t*, %struct.kgid_t*)*, void (%struct.device*)*, %struct.dev_pm_ops* }
%struct.dev_pm_ops = type { i32 (%struct.device*)*, void (%struct.device*)*, i32 (%struct.device*)*, i32 (%struct.device*)*, i32 (%struct.device*)*, i32 (%struct.device*)*, i32 (%struct.device*)*, i32 (%struct.device*)*, i32 (%struct.device*)*, i32 (%struct.device*)*, i32 (%struct.device*)*, i32 (%struct.device*)*, i32 (%struct.device*)*, i32 (%struct.device*)*, i32 (%struct.device*)*, i32 (%struct.device*)*, i32 (%struct.device*)*, i32 (%struct.device*)*, i32 (%struct.device*)*, i32 (%struct.device*)*, i32 (%struct.device*)*, i32 (%struct.device*)*, i32 (%struct.device*)* }
%struct.bus_type = type { i8*, i8*, %struct.device*, %struct.device_attribute*, %struct.attribute_group**, %struct.attribute_group**, %struct.attribute_group**, i32 (%struct.device*, %struct.device_driver*)*, i32 (%struct.device*, %struct.kobj_uevent_env*)*, i32 (%struct.device*)*, i32 (%struct.device*)*, void (%struct.device*)*, i32 (%struct.device*)*, i32 (%struct.device*)*, i32 (%struct.device*, i32)*, i32 (%struct.device*)*, i32 (%struct.device*)*, %struct.dev_pm_ops*, %struct.iommu_ops*, %struct.subsys_private*, %struct.lock_class_key }
%struct.device_attribute = type { %struct.attribute, i64 (%struct.device*, %struct.device_attribute*, i8*)*, i64 (%struct.device*, %struct.device_attribute*, i8*, i64)* }
%struct.iommu_ops = type opaque
%struct.subsys_private = type opaque
%struct.device_driver = type { i8*, %struct.bus_type*, %struct.module*, i8*, i8, i32, %struct.of_device_id*, %struct.acpi_device_id*, i32 (%struct.device*)*, i32 (%struct.device*)*, void (%struct.device*)*, i32 (%struct.device*, i32)*, i32 (%struct.device*)*, %struct.attribute_group**, %struct.dev_pm_ops*, %struct.driver_private* }
%struct.of_device_id = type opaque
%struct.acpi_device_id = type opaque
%struct.driver_private = type opaque
%struct.dev_links_info = type { %struct.list_head, %struct.list_head, i32 }
%struct.dev_pm_info = type { %struct.pm_message, i16, %struct.spinlock, %struct.list_head, %struct.completion, %struct.wakeup_source*, i8, %struct.timer_list, i64, %struct.work_struct, %struct.__wait_queue_head, %struct.wake_irq*, %struct.atomic_t, %struct.atomic_t, i16, i32, i32, i32, i32, i32, i64, i64, i64, i64, %struct.pm_subsys_data*, void (%struct.device*, i32)*, %struct.dev_pm_qos* }
%struct.pm_message = type { i32 }
%struct.wakeup_source = type { i8*, %struct.list_head, %struct.spinlock, %struct.wake_irq*, %struct.timer_list, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i8 }
%struct.timer_list = type { %struct.hlist_node, i64, void (i64)*, i64, i32 }
%struct.wake_irq = type opaque
%struct.pm_subsys_data = type { %struct.spinlock, i32, %struct.list_head }
%struct.dev_pm_qos = type opaque
%struct.dev_pm_domain = type { %struct.dev_pm_ops, void (%struct.device*, i1)*, i32 (%struct.device*)*, void (%struct.device*)*, void (%struct.device*)* }
%struct.irq_domain = type opaque
%struct.dma_map_ops = type opaque
%struct.device_dma_parameters = type { i32, i64 }
%struct.dma_coherent_mem = type opaque
%struct.dev_archdata = type { i8* }
%struct.device_node = type opaque
%struct.fwnode_handle = type opaque
%struct.klist_node = type { i8*, %struct.list_head, %struct.kref }
%struct.class = type { i8*, %struct.module*, %struct.class_attribute*, %struct.attribute_group**, %struct.attribute_group**, %struct.kobject*, i32 (%struct.device*, %struct.kobj_uevent_env*)*, i8* (%struct.device*, i16*)*, void (%struct.class*)*, void (%struct.device*)*, i32 (%struct.device*, i32)*, i32 (%struct.device*)*, %struct.kobj_ns_type_operations*, i8* (%struct.device*)*, %struct.dev_pm_ops*, %struct.subsys_private* }
%struct.class_attribute = type { %struct.attribute, i64 (%struct.class*, %struct.class_attribute*, i8*)*, i64 (%struct.class*, %struct.class_attribute*, i8*, i64)* }
%struct.attribute_group = type { i8*, i16 (%struct.kobject*, %struct.attribute*, i32)*, i16 (%struct.kobject*, %struct.bin_attribute*, i32)*, %struct.attribute**, %struct.bin_attribute** }
%struct.bin_attribute = type { %struct.attribute, i64, i8*, i64 (%struct.file*, %struct.kobject*, %struct.bin_attribute*, i8*, i64, i64)*, i64 (%struct.file*, %struct.kobject*, %struct.bin_attribute*, i8*, i64, i64)*, i32 (%struct.file*, %struct.kobject*, %struct.bin_attribute*, %struct.vm_area_struct*)* }
%struct.iommu_group = type opaque
%struct.iommu_fwspec = type opaque
%struct.snd_card = type { i32, [16 x i8], [16 x i8], [32 x i8], [80 x i8], [32 x i8], [80 x i8], [128 x i8], %struct.module*, i8*, void (%struct.snd_card*)*, %struct.list_head, %struct.device, i32, %struct.rw_semaphore, %struct.rwlock_t, i32, i32, %struct.list_head, %struct.list_head, %struct.mutex, %struct.snd_info_entry*, %struct.snd_info_entry*, %struct.proc_dir_entry*, %struct.list_head, %struct.snd_shutdown_f_ops*, %struct.spinlock, i32, %struct.completion*, %struct.device*, %struct.device, [4 x %struct.attribute_group*], i8, i32, %struct.mutex, %struct.__wait_queue_head, %struct.snd_mixer_oss*, i32 }
%struct.snd_info_entry = type { i8*, i16, i64, i16, %union.anon.53, %struct.snd_info_entry*, %struct.snd_card*, %struct.module*, i8*, void (%struct.snd_info_entry*)*, %struct.proc_dir_entry*, %struct.mutex, %struct.list_head, %struct.list_head }
%union.anon.53 = type { %struct.snd_info_entry_text }
%struct.snd_info_entry_text = type { void (%struct.snd_info_entry*, %struct.snd_info_buffer*)*, void (%struct.snd_info_entry*, %struct.snd_info_buffer*)* }
%struct.snd_info_buffer = type { i8*, i32, i32, i32, i32, i32 }
%struct.proc_dir_entry = type opaque
%struct.snd_shutdown_f_ops = type opaque
%struct.snd_mixer_oss = type opaque

@snd_major = common global i32 0, align 4
@__kstrtab_snd_major = internal constant [10 x i8] c"snd_major\00", section "__ksymtab_strings", align 1
@__ksymtab_snd_major = internal constant %struct.kernel_symbol { i64 ptrtoint (i32* @snd_major to i64), i8* getelementptr inbounds ([10 x i8], [10 x i8]* @__kstrtab_snd_major, i32 0, i32 0) }, section "___ksymtab+snd_major", align 8
@__param_str_major = internal constant [10 x i8] c"snd.major\00", align 1
@param_ops_int = external constant %struct.kernel_param_ops, align 8
@major = internal global i32 116, align 4
@__param_major = internal constant %struct.kernel_param { i8* getelementptr inbounds ([10 x i8], [10 x i8]* @__param_str_major, i32 0, i32 0), %struct.module* null, %struct.kernel_param_ops* @param_ops_int, i16 292, i8 -1, i8 0, %union.anon.46 { i8* bitcast (i32* @major to i8*) } }, section "__param", align 8
@__param_str_cards_limit = internal constant [16 x i8] c"snd.cards_limit\00", align 16
@cards_limit = internal global i32 1, align 4
@__param_cards_limit = internal constant %struct.kernel_param { i8* getelementptr inbounds ([16 x i8], [16 x i8]* @__param_str_cards_limit, i32 0, i32 0), %struct.module* null, %struct.kernel_param_ops* @param_ops_int, i16 292, i8 -1, i8 0, %union.anon.46 { i8* bitcast (i32* @cards_limit to i8*) } }, section "__param", align 8
@snd_ecards_limit = common global i32 0, align 4
@__kstrtab_snd_ecards_limit = internal constant [17 x i8] c"snd_ecards_limit\00", section "__ksymtab_strings", align 1
@__ksymtab_snd_ecards_limit = internal constant %struct.kernel_symbol { i64 ptrtoint (i32* @snd_ecards_limit to i64), i8* getelementptr inbounds ([17 x i8], [17 x i8]* @__kstrtab_snd_ecards_limit, i32 0, i32 0) }, section "___ksymtab+snd_ecards_limit", align 8
@.str = private unnamed_addr constant [12 x i8] c"snd-card-%i\00", align 1
@__kstrtab_snd_request_card = internal constant [17 x i8] c"snd_request_card\00", section "__ksymtab_strings", align 1
@__ksymtab_snd_request_card = internal constant %struct.kernel_symbol { i64 ptrtoint (void (i32)* @snd_request_card to i64), i8* getelementptr inbounds ([17 x i8], [17 x i8]* @__kstrtab_snd_request_card, i32 0, i32 0) }, section "___ksymtab+snd_request_card", align 8
@sound_mutex = internal global %struct.mutex { %struct.atomic64_t zeroinitializer, %struct.spinlock zeroinitializer, %struct.optimistic_spin_queue zeroinitializer, %struct.list_head { %struct.list_head* bitcast (i8* getelementptr (i8, i8* bitcast (%struct.mutex* @sound_mutex to i8*), i64 16) to %struct.list_head*), %struct.list_head* bitcast (i8* getelementptr (i8, i8* bitcast (%struct.mutex* @sound_mutex to i8*), i64 16) to %struct.list_head*) } }, align 8
@snd_minors = internal global [256 x %struct.snd_minor*] zeroinitializer, align 16
@__kstrtab_snd_lookup_minor_data = internal constant [22 x i8] c"snd_lookup_minor_data\00", section "__ksymtab_strings", align 1
@__ksymtab_snd_lookup_minor_data = internal constant %struct.kernel_symbol { i64 ptrtoint (i8* (i32, i32)* @snd_lookup_minor_data to i64), i8* getelementptr inbounds ([22 x i8], [22 x i8]* @__kstrtab_snd_lookup_minor_data, i32 0, i32 0) }, section "___ksymtab+snd_lookup_minor_data", align 8
@__kstrtab_snd_register_device = internal constant [20 x i8] c"snd_register_device\00", section "__ksymtab_strings", align 1
@__ksymtab_snd_register_device = internal constant %struct.kernel_symbol { i64 ptrtoint (i32 (i32, %struct.snd_card*, i32, %struct.file_operations*, i8*, %struct.device*)* @snd_register_device to i64), i8* getelementptr inbounds ([20 x i8], [20 x i8]* @__kstrtab_snd_register_device, i32 0, i32 0) }, section "___ksymtab+snd_register_device", align 8
@__kstrtab_snd_unregister_device = internal constant [22 x i8] c"snd_unregister_device\00", section "__ksymtab_strings", align 1
@__ksymtab_snd_unregister_device = internal constant %struct.kernel_symbol { i64 ptrtoint (i32 (%struct.device*)* @snd_unregister_device to i64), i8* getelementptr inbounds ([22 x i8], [22 x i8]* @__kstrtab_snd_unregister_device, i32 0, i32 0) }, section "___ksymtab+snd_unregister_device", align 8
@.str.1 = private unnamed_addr constant [8 x i8] c"devices\00", align 1
@.str.2 = private unnamed_addr constant [5 x i8] c"alsa\00", align 1
@__initcall_alsa_sound_init4 = internal global i32 ()* @alsa_sound_init, section ".initcall4.init", align 8
@__exitcall_alsa_sound_exit = internal global void ()* @alsa_sound_exit, section ".exitcall.exit", align 8
@.str.3 = private unnamed_addr constant [20 x i8] c"%3i: [%2i-%2i]: %s\0A\00", align 1
@.str.4 = private unnamed_addr constant [19 x i8] c"%3i: [%2i]   : %s\0A\00", align 1
@.str.5 = private unnamed_addr constant [18 x i8] c"%3i:        : %s\0A\00", align 1
@.str.6 = private unnamed_addr constant [8 x i8] c"control\00", align 1
@.str.7 = private unnamed_addr constant [19 x i8] c"hardware dependent\00", align 1
@.str.8 = private unnamed_addr constant [9 x i8] c"raw midi\00", align 1
@.str.9 = private unnamed_addr constant [23 x i8] c"digital audio playback\00", align 1
@.str.10 = private unnamed_addr constant [22 x i8] c"digital audio capture\00", align 1
@.str.11 = private unnamed_addr constant [10 x i8] c"sequencer\00", align 1
@.str.12 = private unnamed_addr constant [6 x i8] c"timer\00", align 1
@.str.13 = private unnamed_addr constant [2 x i8] c"?\00", align 1
@snd_fops = internal constant %struct.file_operations { %struct.module* null, i64 (%struct.file*, i64, i32)* @noop_llseek, i64 (%struct.file*, i8*, i64, i64*)* null, i64 (%struct.file*, i8*, i64, i64*)* null, i64 (%struct.kiocb*, %struct.iov_iter*)* null, i64 (%struct.kiocb*, %struct.iov_iter*)* null, i32 (%struct.file*, %struct.dir_context*)* null, i32 (%struct.file*, %struct.dir_context*)* null, i32 (%struct.file*, %struct.poll_table_struct*)* null, i64 (%struct.file*, i32, i64)* null, i64 (%struct.file*, i32, i64)* null, i32 (%struct.file*, %struct.vm_area_struct*)* null, i32 (%struct.inode*, %struct.file*)* @snd_open, i32 (%struct.file*, i8*)* null, i32 (%struct.inode*, %struct.file*)* null, i32 (%struct.file*, i64, i64, i32)* null, i32 (i32, %struct.file*, i32)* null, i32 (%struct.file*, i32, %struct.file_lock*)* null, i64 (%struct.file*, %struct.page*, i32, i64, i64*, i32)* null, i64 (%struct.file*, i64, i64, i64, i64)* null, i32 (i32)* null, i32 (%struct.file*, i32, %struct.file_lock*)* null, i64 (%struct.pipe_inode_info*, %struct.file*, i64*, i64, i32)* null, i64 (%struct.file*, i64*, %struct.pipe_inode_info*, i64, i32)* null, i32 (%struct.file*, i64, %struct.file_lock**, i8**)* null, i64 (%struct.file*, i32, i64, i64)* null, void (%struct.seq_file*, %struct.file*)* null, i64 (%struct.file*, i64, %struct.file*, i64, i64, i32)* null, i32 (%struct.file*, i64, %struct.file*, i64, i64)* null, i64 (%struct.file*, i64, i64, %struct.file*, i64)* null }, align 8
@.str.14 = private unnamed_addr constant [63 x i8] c"\013ALSA core: unable to register native major device number %d\0A\00", align 1
@.str.15 = private unnamed_addr constant [57 x i8] c"\016Advanced Linux Sound Architecture Driver Initialized.\0A\00", align 1
@.str.16 = private unnamed_addr constant [19 x i8] c"sound/core/sound.c\00", align 1
@snd_cards = external global [8 x %struct.snd_card*], align 16
@.str.17 = private unnamed_addr constant [8 x i8] c"snd-seq\00", align 1
@.str.18 = private unnamed_addr constant [10 x i8] c"snd-timer\00", align 1
@llvm.used = appending global [11 x i8*] [i8* bitcast (%struct.kernel_symbol* @__ksymtab_snd_major to i8*), i8* bitcast (%struct.kernel_param* @__param_major to i8*), i8* bitcast (%struct.kernel_param* @__param_cards_limit to i8*), i8* bitcast (%struct.kernel_symbol* @__ksymtab_snd_ecards_limit to i8*), i8* bitcast (%struct.kernel_symbol* @__ksymtab_snd_request_card to i8*), i8* bitcast (%struct.kernel_symbol* @__ksymtab_snd_lookup_minor_data to i8*), i8* bitcast (%struct.kernel_symbol* @__ksymtab_snd_register_device to i8*), i8* bitcast (%struct.kernel_symbol* @__ksymtab_snd_unregister_device to i8*), i8* bitcast (void ()* @alsa_sound_exit to i8*), i8* bitcast (i32 ()** @__initcall_alsa_sound_init4 to i8*), i8* bitcast (void ()** @__exitcall_alsa_sound_exit to i8*)], section "llvm.metadata"

; Function Attrs: noinline nounwind optnone uwtable
define void @snd_request_card(i32 %card) #0 {
entry:
  %card.addr = alloca i32, align 4
  store i32 %card, i32* %card.addr, align 4
  %0 = load i32, i32* %card.addr, align 4
  %call = call i32 @snd_card_locked(i32 %0)
  %tobool = icmp ne i32 %call, 0
  br i1 %tobool, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  br label %return

if.end:                                           ; preds = %entry
  %1 = load i32, i32* %card.addr, align 4
  %cmp = icmp slt i32 %1, 0
  br i1 %cmp, label %if.then2, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %if.end
  %2 = load i32, i32* %card.addr, align 4
  %3 = load i32, i32* @cards_limit, align 4
  %cmp1 = icmp sge i32 %2, %3
  br i1 %cmp1, label %if.then2, label %if.end3

if.then2:                                         ; preds = %lor.lhs.false, %if.end
  br label %return

if.end3:                                          ; preds = %lor.lhs.false
  %4 = load i32, i32* %card.addr, align 4
  %call4 = call i32 (i1, i8*, ...) @__request_module(i1 zeroext true, i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str, i32 0, i32 0), i32 %4)
  br label %return

return:                                           ; preds = %if.end3, %if.then2, %if.then
  ret void
}

declare i32 @snd_card_locked(i32) #1

declare i32 @__request_module(i1 zeroext, i8*, ...) #1

; Function Attrs: noinline nounwind optnone uwtable
define i8* @snd_lookup_minor_data(i32 %minor, i32 %type) #0 {
entry:
  %retval = alloca i8*, align 8
  %minor.addr = alloca i32, align 4
  %type.addr = alloca i32, align 4
  %mreg = alloca %struct.snd_minor*, align 8
  %private_data = alloca i8*, align 8
  store i32 %minor, i32* %minor.addr, align 4
  store i32 %type, i32* %type.addr, align 4
  %0 = load i32, i32* %minor.addr, align 4
  %conv = zext i32 %0 to i64
  %cmp = icmp uge i64 %conv, 256
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  store i8* null, i8** %retval, align 8
  br label %return

if.end:                                           ; preds = %entry
  call void @mutex_lock(%struct.mutex* @sound_mutex)
  %1 = load i32, i32* %minor.addr, align 4
  %idxprom = zext i32 %1 to i64
  %arrayidx = getelementptr inbounds [256 x %struct.snd_minor*], [256 x %struct.snd_minor*]* @snd_minors, i64 0, i64 %idxprom
  %2 = load %struct.snd_minor*, %struct.snd_minor** %arrayidx, align 8
  store %struct.snd_minor* %2, %struct.snd_minor** %mreg, align 8
  %3 = load %struct.snd_minor*, %struct.snd_minor** %mreg, align 8
  %tobool = icmp ne %struct.snd_minor* %3, null
  br i1 %tobool, label %land.lhs.true, label %if.else

land.lhs.true:                                    ; preds = %if.end
  %4 = load %struct.snd_minor*, %struct.snd_minor** %mreg, align 8
  %type2 = getelementptr inbounds %struct.snd_minor, %struct.snd_minor* %4, i32 0, i32 0
  %5 = load i32, i32* %type2, align 8
  %6 = load i32, i32* %type.addr, align 4
  %cmp3 = icmp eq i32 %5, %6
  br i1 %cmp3, label %if.then5, label %if.else

if.then5:                                         ; preds = %land.lhs.true
  %7 = load %struct.snd_minor*, %struct.snd_minor** %mreg, align 8
  %private_data6 = getelementptr inbounds %struct.snd_minor, %struct.snd_minor* %7, i32 0, i32 4
  %8 = load i8*, i8** %private_data6, align 8
  store i8* %8, i8** %private_data, align 8
  %9 = load i8*, i8** %private_data, align 8
  %tobool7 = icmp ne i8* %9, null
  br i1 %tobool7, label %land.lhs.true8, label %if.end12

land.lhs.true8:                                   ; preds = %if.then5
  %10 = load %struct.snd_minor*, %struct.snd_minor** %mreg, align 8
  %card_ptr = getelementptr inbounds %struct.snd_minor, %struct.snd_minor* %10, i32 0, i32 6
  %11 = load %struct.snd_card*, %struct.snd_card** %card_ptr, align 8
  %tobool9 = icmp ne %struct.snd_card* %11, null
  br i1 %tobool9, label %if.then10, label %if.end12

if.then10:                                        ; preds = %land.lhs.true8
  %12 = load %struct.snd_minor*, %struct.snd_minor** %mreg, align 8
  %card_ptr11 = getelementptr inbounds %struct.snd_minor, %struct.snd_minor* %12, i32 0, i32 6
  %13 = load %struct.snd_card*, %struct.snd_card** %card_ptr11, align 8
  %card_dev = getelementptr inbounds %struct.snd_card, %struct.snd_card* %13, i32 0, i32 30
  %call = call %struct.device* @get_device(%struct.device* %card_dev)
  br label %if.end12

if.end12:                                         ; preds = %if.then10, %land.lhs.true8, %if.then5
  br label %if.end13

if.else:                                          ; preds = %land.lhs.true, %if.end
  store i8* null, i8** %private_data, align 8
  br label %if.end13

if.end13:                                         ; preds = %if.else, %if.end12
  call void @mutex_unlock(%struct.mutex* @sound_mutex)
  %14 = load i8*, i8** %private_data, align 8
  store i8* %14, i8** %retval, align 8
  br label %return

return:                                           ; preds = %if.end13, %if.then
  %15 = load i8*, i8** %retval, align 8
  ret i8* %15
}

declare void @mutex_lock(%struct.mutex*) #1

declare %struct.device* @get_device(%struct.device*) #1

declare void @mutex_unlock(%struct.mutex*) #1

; Function Attrs: noinline nounwind optnone uwtable
define i32 @snd_register_device(i32 %type, %struct.snd_card* %card, i32 %dev, %struct.file_operations* %f_ops, i8* %private_data, %struct.device* %device) #0 {
entry:
  %size.addr.i = alloca i64, align 8
  %flags.addr.i = alloca i32, align 4
  %retval = alloca i32, align 4
  %type.addr = alloca i32, align 4
  %card.addr = alloca %struct.snd_card*, align 8
  %dev.addr = alloca i32, align 4
  %f_ops.addr = alloca %struct.file_operations*, align 8
  %private_data.addr = alloca i8*, align 8
  %device.addr = alloca %struct.device*, align 8
  %minor = alloca i32, align 4
  %err = alloca i32, align 4
  %preg = alloca %struct.snd_minor*, align 8
  %__ret_warn_on = alloca i32, align 4
  %tmp = alloca i64, align 8
  store i32 %type, i32* %type.addr, align 4
  store %struct.snd_card* %card, %struct.snd_card** %card.addr, align 8
  store i32 %dev, i32* %dev.addr, align 4
  store %struct.file_operations* %f_ops, %struct.file_operations** %f_ops.addr, align 8
  store i8* %private_data, i8** %private_data.addr, align 8
  store %struct.device* %device, %struct.device** %device.addr, align 8
  store i32 0, i32* %err, align 4
  %0 = load %struct.device*, %struct.device** %device.addr, align 8
  %tobool = icmp ne %struct.device* %0, null
  %lnot = xor i1 %tobool, true
  %lnot1 = xor i1 %lnot, true
  %lnot2 = xor i1 %lnot1, true
  %lnot.ext = zext i1 %lnot2 to i32
  store i32 %lnot.ext, i32* %__ret_warn_on, align 4
  %1 = load i32, i32* %__ret_warn_on, align 4
  %tobool3 = icmp ne i32 %1, 0
  %lnot4 = xor i1 %tobool3, true
  %lnot6 = xor i1 %lnot4, true
  %lnot.ext7 = zext i1 %lnot6 to i32
  %conv = sext i32 %lnot.ext7 to i64
  store i64 %conv, i64* %tmp, align 8
  %2 = load i64, i64* %tmp, align 8
  %tobool8 = icmp ne i64 %2, 0
  br i1 %tobool8, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  store i32 -22, i32* %retval, align 4
  br label %return

if.end:                                           ; preds = %entry
  store i64 48, i64* %size.addr.i, align 8
  store i32 20971712, i32* %flags.addr.i, align 4
  %3 = load i64, i64* %size.addr.i, align 8
  %4 = load i32, i32* %flags.addr.i, align 4
  %call.i = call noalias i8* @__kmalloc(i64 %3, i32 %4) #2
  %5 = bitcast i8* %call.i to %struct.snd_minor*
  store %struct.snd_minor* %5, %struct.snd_minor** %preg, align 8
  %6 = load %struct.snd_minor*, %struct.snd_minor** %preg, align 8
  %cmp = icmp eq %struct.snd_minor* %6, null
  br i1 %cmp, label %if.then10, label %if.end11

if.then10:                                        ; preds = %if.end
  store i32 -12, i32* %retval, align 4
  br label %return

if.end11:                                         ; preds = %if.end
  %7 = load i32, i32* %type.addr, align 4
  %8 = load %struct.snd_minor*, %struct.snd_minor** %preg, align 8
  %type12 = getelementptr inbounds %struct.snd_minor, %struct.snd_minor* %8, i32 0, i32 0
  store i32 %7, i32* %type12, align 8
  %9 = load %struct.snd_card*, %struct.snd_card** %card.addr, align 8
  %tobool13 = icmp ne %struct.snd_card* %9, null
  br i1 %tobool13, label %cond.true, label %cond.false

cond.true:                                        ; preds = %if.end11
  %10 = load %struct.snd_card*, %struct.snd_card** %card.addr, align 8
  %number = getelementptr inbounds %struct.snd_card, %struct.snd_card* %10, i32 0, i32 0
  %11 = load i32, i32* %number, align 8
  br label %cond.end

cond.false:                                       ; preds = %if.end11
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ %11, %cond.true ], [ -1, %cond.false ]
  %12 = load %struct.snd_minor*, %struct.snd_minor** %preg, align 8
  %card14 = getelementptr inbounds %struct.snd_minor, %struct.snd_minor* %12, i32 0, i32 1
  store i32 %cond, i32* %card14, align 4
  %13 = load i32, i32* %dev.addr, align 4
  %14 = load %struct.snd_minor*, %struct.snd_minor** %preg, align 8
  %device15 = getelementptr inbounds %struct.snd_minor, %struct.snd_minor* %14, i32 0, i32 2
  store i32 %13, i32* %device15, align 8
  %15 = load %struct.file_operations*, %struct.file_operations** %f_ops.addr, align 8
  %16 = load %struct.snd_minor*, %struct.snd_minor** %preg, align 8
  %f_ops16 = getelementptr inbounds %struct.snd_minor, %struct.snd_minor* %16, i32 0, i32 3
  store %struct.file_operations* %15, %struct.file_operations** %f_ops16, align 8
  %17 = load i8*, i8** %private_data.addr, align 8
  %18 = load %struct.snd_minor*, %struct.snd_minor** %preg, align 8
  %private_data17 = getelementptr inbounds %struct.snd_minor, %struct.snd_minor* %18, i32 0, i32 4
  store i8* %17, i8** %private_data17, align 8
  %19 = load %struct.snd_card*, %struct.snd_card** %card.addr, align 8
  %20 = load %struct.snd_minor*, %struct.snd_minor** %preg, align 8
  %card_ptr = getelementptr inbounds %struct.snd_minor, %struct.snd_minor* %20, i32 0, i32 6
  store %struct.snd_card* %19, %struct.snd_card** %card_ptr, align 8
  call void @mutex_lock(%struct.mutex* @sound_mutex)
  %21 = load i32, i32* %type.addr, align 4
  %22 = load %struct.snd_card*, %struct.snd_card** %card.addr, align 8
  %23 = load i32, i32* %dev.addr, align 4
  %call18 = call i32 @snd_find_free_minor(i32 %21, %struct.snd_card* %22, i32 %23)
  store i32 %call18, i32* %minor, align 4
  %24 = load i32, i32* %minor, align 4
  %cmp19 = icmp slt i32 %24, 0
  br i1 %cmp19, label %if.then21, label %if.end22

if.then21:                                        ; preds = %cond.end
  %25 = load i32, i32* %minor, align 4
  store i32 %25, i32* %err, align 4
  br label %error

if.end22:                                         ; preds = %cond.end
  %26 = load %struct.device*, %struct.device** %device.addr, align 8
  %27 = load %struct.snd_minor*, %struct.snd_minor** %preg, align 8
  %dev23 = getelementptr inbounds %struct.snd_minor, %struct.snd_minor* %27, i32 0, i32 5
  store %struct.device* %26, %struct.device** %dev23, align 8
  %28 = load i32, i32* @major, align 4
  %shl = shl i32 %28, 20
  %29 = load i32, i32* %minor, align 4
  %or = or i32 %shl, %29
  %30 = load %struct.device*, %struct.device** %device.addr, align 8
  %devt = getelementptr inbounds %struct.device, %struct.device* %30, i32 0, i32 26
  store i32 %or, i32* %devt, align 8
  %31 = load %struct.device*, %struct.device** %device.addr, align 8
  %call24 = call i32 @device_add(%struct.device* %31)
  store i32 %call24, i32* %err, align 4
  %32 = load i32, i32* %err, align 4
  %cmp25 = icmp slt i32 %32, 0
  br i1 %cmp25, label %if.then27, label %if.end28

if.then27:                                        ; preds = %if.end22
  br label %error

if.end28:                                         ; preds = %if.end22
  %33 = load %struct.snd_minor*, %struct.snd_minor** %preg, align 8
  %34 = load i32, i32* %minor, align 4
  %idxprom = sext i32 %34 to i64
  %arrayidx = getelementptr inbounds [256 x %struct.snd_minor*], [256 x %struct.snd_minor*]* @snd_minors, i64 0, i64 %idxprom
  store %struct.snd_minor* %33, %struct.snd_minor** %arrayidx, align 8
  br label %error

error:                                            ; preds = %if.end28, %if.then27, %if.then21
  call void @mutex_unlock(%struct.mutex* @sound_mutex)
  %35 = load i32, i32* %err, align 4
  %cmp29 = icmp slt i32 %35, 0
  br i1 %cmp29, label %if.then31, label %if.end32

if.then31:                                        ; preds = %error
  %36 = load %struct.snd_minor*, %struct.snd_minor** %preg, align 8
  %37 = bitcast %struct.snd_minor* %36 to i8*
  call void @kfree(i8* %37)
  br label %if.end32

if.end32:                                         ; preds = %if.then31, %error
  %38 = load i32, i32* %err, align 4
  store i32 %38, i32* %retval, align 4
  br label %return

return:                                           ; preds = %if.end32, %if.then10, %if.then
  %39 = load i32, i32* %retval, align 4
  ret i32 %39
}

; Function Attrs: noinline nounwind optnone uwtable
define internal i32 @snd_find_free_minor(i32 %type, %struct.snd_card* %card, i32 %dev) #0 {
entry:
  %retval = alloca i32, align 4
  %type.addr = alloca i32, align 4
  %card.addr = alloca %struct.snd_card*, align 8
  %dev.addr = alloca i32, align 4
  %minor = alloca i32, align 4
  %__ret_warn_on = alloca i32, align 4
  %tmp = alloca i64, align 8
  %__ret_warn_on11 = alloca i32, align 4
  %tmp19 = alloca i64, align 8
  %__ret_warn_on32 = alloca i32, align 4
  %tmp40 = alloca i64, align 8
  store i32 %type, i32* %type.addr, align 4
  store %struct.snd_card* %card, %struct.snd_card** %card.addr, align 8
  store i32 %dev, i32* %dev.addr, align 4
  %0 = load i32, i32* %type.addr, align 4
  br label %NodeBlock23

NodeBlock23:                                      ; preds = %entry
  %Pivot24 = icmp slt i32 %0, 8
  br i1 %Pivot24, label %NodeBlock7, label %NodeBlock21

NodeBlock21:                                      ; preds = %NodeBlock23
  %Pivot22 = icmp slt i32 %0, 24
  br i1 %Pivot22, label %NodeBlock13, label %NodeBlock19

NodeBlock19:                                      ; preds = %NodeBlock21
  %Pivot20 = icmp slt i32 %0, 33
  br i1 %Pivot20, label %LeafBlock15, label %LeafBlock17

LeafBlock17:                                      ; preds = %NodeBlock19
  %SwitchLeaf18 = icmp eq i32 %0, 33
  br i1 %SwitchLeaf18, label %sw.bb, label %NewDefault

LeafBlock15:                                      ; preds = %NodeBlock19
  %SwitchLeaf16 = icmp eq i32 %0, 24
  br i1 %SwitchLeaf16, label %sw.bb10, label %NewDefault

NodeBlock13:                                      ; preds = %NodeBlock21
  %Pivot14 = icmp slt i32 %0, 16
  br i1 %Pivot14, label %LeafBlock9, label %LeafBlock11

LeafBlock11:                                      ; preds = %NodeBlock13
  %SwitchLeaf12 = icmp eq i32 %0, 16
  br i1 %SwitchLeaf12, label %sw.bb10, label %NewDefault

LeafBlock9:                                       ; preds = %NodeBlock13
  %SwitchLeaf10 = icmp eq i32 %0, 8
  br i1 %SwitchLeaf10, label %sw.bb10, label %NewDefault

NodeBlock7:                                       ; preds = %NodeBlock23
  %Pivot8 = icmp slt i32 %0, 2
  br i1 %Pivot8, label %NodeBlock, label %NodeBlock5

NodeBlock5:                                       ; preds = %NodeBlock7
  %Pivot6 = icmp slt i32 %0, 4
  br i1 %Pivot6, label %LeafBlock1, label %LeafBlock3

LeafBlock3:                                       ; preds = %NodeBlock5
  %SwitchLeaf4 = icmp eq i32 %0, 4
  br i1 %SwitchLeaf4, label %sw.bb10, label %NewDefault

LeafBlock1:                                       ; preds = %NodeBlock5
  %SwitchLeaf2 = icmp eq i32 %0, 2
  br i1 %SwitchLeaf2, label %sw.bb10, label %NewDefault

NodeBlock:                                        ; preds = %NodeBlock7
  %Pivot = icmp slt i32 %0, 1
  br i1 %Pivot, label %LeafBlock, label %sw.bb

LeafBlock:                                        ; preds = %NodeBlock
  %SwitchLeaf = icmp eq i32 %0, 0
  br i1 %SwitchLeaf, label %sw.bb1, label %NewDefault

sw.bb:                                            ; preds = %LeafBlock17, %NodeBlock
  %1 = load i32, i32* %type.addr, align 4
  store i32 %1, i32* %minor, align 4
  br label %sw.epilog

sw.bb1:                                           ; preds = %LeafBlock
  %2 = load %struct.snd_card*, %struct.snd_card** %card.addr, align 8
  %tobool = icmp ne %struct.snd_card* %2, null
  %lnot = xor i1 %tobool, true
  %lnot2 = xor i1 %lnot, true
  %lnot3 = xor i1 %lnot2, true
  %lnot.ext = zext i1 %lnot3 to i32
  store i32 %lnot.ext, i32* %__ret_warn_on, align 4
  %3 = load i32, i32* %__ret_warn_on, align 4
  %tobool4 = icmp ne i32 %3, 0
  %lnot5 = xor i1 %tobool4, true
  %lnot7 = xor i1 %lnot5, true
  %lnot.ext8 = zext i1 %lnot7 to i32
  %conv = sext i32 %lnot.ext8 to i64
  store i64 %conv, i64* %tmp, align 8
  %4 = load i64, i64* %tmp, align 8
  %tobool9 = icmp ne i64 %4, 0
  br i1 %tobool9, label %if.then, label %if.end

if.then:                                          ; preds = %sw.bb1
  store i32 -22, i32* %retval, align 4
  br label %return

if.end:                                           ; preds = %sw.bb1
  %5 = load %struct.snd_card*, %struct.snd_card** %card.addr, align 8
  %number = getelementptr inbounds %struct.snd_card, %struct.snd_card* %5, i32 0, i32 0
  %6 = load i32, i32* %number, align 8
  %shl = shl i32 %6, 5
  %7 = load i32, i32* %type.addr, align 4
  %or = or i32 %shl, %7
  store i32 %or, i32* %minor, align 4
  br label %sw.epilog

sw.bb10:                                          ; preds = %LeafBlock15, %LeafBlock11, %LeafBlock9, %LeafBlock3, %LeafBlock1
  %8 = load %struct.snd_card*, %struct.snd_card** %card.addr, align 8
  %tobool12 = icmp ne %struct.snd_card* %8, null
  %lnot13 = xor i1 %tobool12, true
  %lnot15 = xor i1 %lnot13, true
  %lnot17 = xor i1 %lnot15, true
  %lnot.ext18 = zext i1 %lnot17 to i32
  store i32 %lnot.ext18, i32* %__ret_warn_on11, align 4
  %9 = load i32, i32* %__ret_warn_on11, align 4
  %tobool20 = icmp ne i32 %9, 0
  %lnot21 = xor i1 %tobool20, true
  %lnot23 = xor i1 %lnot21, true
  %lnot.ext24 = zext i1 %lnot23 to i32
  %conv25 = sext i32 %lnot.ext24 to i64
  store i64 %conv25, i64* %tmp19, align 8
  %10 = load i64, i64* %tmp19, align 8
  %tobool26 = icmp ne i64 %10, 0
  br i1 %tobool26, label %if.then27, label %if.end28

if.then27:                                        ; preds = %sw.bb10
  store i32 -22, i32* %retval, align 4
  br label %return

if.end28:                                         ; preds = %sw.bb10
  %11 = load %struct.snd_card*, %struct.snd_card** %card.addr, align 8
  %number29 = getelementptr inbounds %struct.snd_card, %struct.snd_card* %11, i32 0, i32 0
  %12 = load i32, i32* %number29, align 8
  %shl30 = shl i32 %12, 5
  %13 = load i32, i32* %type.addr, align 4
  %14 = load i32, i32* %dev.addr, align 4
  %add = add nsw i32 %13, %14
  %or31 = or i32 %shl30, %add
  store i32 %or31, i32* %minor, align 4
  br label %sw.epilog

NewDefault:                                       ; preds = %LeafBlock17, %LeafBlock15, %LeafBlock11, %LeafBlock9, %LeafBlock3, %LeafBlock1, %LeafBlock
  br label %sw.default

sw.default:                                       ; preds = %NewDefault
  store i32 -22, i32* %retval, align 4
  br label %return

sw.epilog:                                        ; preds = %if.end28, %if.end, %sw.bb
  %15 = load i32, i32* %minor, align 4
  %cmp = icmp slt i32 %15, 0
  br i1 %cmp, label %lor.end, label %lor.rhs

lor.rhs:                                          ; preds = %sw.epilog
  %16 = load i32, i32* %minor, align 4
  %cmp34 = icmp sge i32 %16, 256
  br label %lor.end

lor.end:                                          ; preds = %lor.rhs, %sw.epilog
  %17 = phi i1 [ true, %sw.epilog ], [ %cmp34, %lor.rhs ]
  %lnot36 = xor i1 %17, true
  %lnot38 = xor i1 %lnot36, true
  %lnot.ext39 = zext i1 %lnot38 to i32
  store i32 %lnot.ext39, i32* %__ret_warn_on32, align 4
  %18 = load i32, i32* %__ret_warn_on32, align 4
  %tobool41 = icmp ne i32 %18, 0
  %lnot42 = xor i1 %tobool41, true
  %lnot44 = xor i1 %lnot42, true
  %lnot.ext45 = zext i1 %lnot44 to i32
  %conv46 = sext i32 %lnot.ext45 to i64
  store i64 %conv46, i64* %tmp40, align 8
  %19 = load i64, i64* %tmp40, align 8
  %tobool47 = icmp ne i64 %19, 0
  br i1 %tobool47, label %if.then48, label %if.end49

if.then48:                                        ; preds = %lor.end
  store i32 -22, i32* %retval, align 4
  br label %return

if.end49:                                         ; preds = %lor.end
  %20 = load i32, i32* %minor, align 4
  %idxprom = sext i32 %20 to i64
  %arrayidx = getelementptr inbounds [256 x %struct.snd_minor*], [256 x %struct.snd_minor*]* @snd_minors, i64 0, i64 %idxprom
  %21 = load %struct.snd_minor*, %struct.snd_minor** %arrayidx, align 8
  %tobool50 = icmp ne %struct.snd_minor* %21, null
  br i1 %tobool50, label %if.then51, label %if.end52

if.then51:                                        ; preds = %if.end49
  store i32 -16, i32* %retval, align 4
  br label %return

if.end52:                                         ; preds = %if.end49
  %22 = load i32, i32* %minor, align 4
  store i32 %22, i32* %retval, align 4
  br label %return

return:                                           ; preds = %if.end52, %if.then51, %if.then48, %sw.default, %if.then27, %if.then
  %23 = load i32, i32* %retval, align 4
  ret i32 %23
}

declare i32 @device_add(%struct.device*) #1

declare void @kfree(i8*) #1

; Function Attrs: noinline nounwind optnone uwtable
define i32 @snd_unregister_device(%struct.device* %dev) #0 {
entry:
  %retval = alloca i32, align 4
  %dev.addr = alloca %struct.device*, align 8
  %minor = alloca i32, align 4
  %preg = alloca %struct.snd_minor*, align 8
  store %struct.device* %dev, %struct.device** %dev.addr, align 8
  call void @mutex_lock(%struct.mutex* @sound_mutex)
  store i32 0, i32* %minor, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %0 = load i32, i32* %minor, align 4
  %conv = sext i32 %0 to i64
  %cmp = icmp ult i64 %conv, 256
  br i1 %cmp, label %for.body, label %for.end.loopexit

for.body:                                         ; preds = %for.cond
  %1 = load i32, i32* %minor, align 4
  %idxprom = sext i32 %1 to i64
  %arrayidx = getelementptr inbounds [256 x %struct.snd_minor*], [256 x %struct.snd_minor*]* @snd_minors, i64 0, i64 %idxprom
  %2 = load %struct.snd_minor*, %struct.snd_minor** %arrayidx, align 8
  store %struct.snd_minor* %2, %struct.snd_minor** %preg, align 8
  %3 = load %struct.snd_minor*, %struct.snd_minor** %preg, align 8
  %tobool = icmp ne %struct.snd_minor* %3, null
  br i1 %tobool, label %land.lhs.true, label %if.end

land.lhs.true:                                    ; preds = %for.body
  %4 = load %struct.snd_minor*, %struct.snd_minor** %preg, align 8
  %dev2 = getelementptr inbounds %struct.snd_minor, %struct.snd_minor* %4, i32 0, i32 5
  %5 = load %struct.device*, %struct.device** %dev2, align 8
  %6 = load %struct.device*, %struct.device** %dev.addr, align 8
  %cmp3 = icmp eq %struct.device* %5, %6
  br i1 %cmp3, label %if.then, label %if.end

if.then:                                          ; preds = %land.lhs.true
  %7 = load i32, i32* %minor, align 4
  %idxprom5 = sext i32 %7 to i64
  %arrayidx6 = getelementptr inbounds [256 x %struct.snd_minor*], [256 x %struct.snd_minor*]* @snd_minors, i64 0, i64 %idxprom5
  store %struct.snd_minor* null, %struct.snd_minor** %arrayidx6, align 8
  %8 = load %struct.device*, %struct.device** %dev.addr, align 8
  call void @device_del(%struct.device* %8)
  %9 = load %struct.snd_minor*, %struct.snd_minor** %preg, align 8
  %10 = bitcast %struct.snd_minor* %9 to i8*
  call void @kfree(i8* %10)
  br label %for.end

if.end:                                           ; preds = %land.lhs.true, %for.body
  br label %for.inc

for.inc:                                          ; preds = %if.end
  %11 = load i32, i32* %minor, align 4
  %inc = add nsw i32 %11, 1
  store i32 %inc, i32* %minor, align 4
  br label %for.cond

for.end.loopexit:                                 ; preds = %for.cond
  br label %for.end

for.end:                                          ; preds = %for.end.loopexit, %if.then
  call void @mutex_unlock(%struct.mutex* @sound_mutex)
  %12 = load i32, i32* %minor, align 4
  %conv7 = sext i32 %12 to i64
  %cmp8 = icmp uge i64 %conv7, 256
  br i1 %cmp8, label %if.then10, label %if.end11

if.then10:                                        ; preds = %for.end
  store i32 -2, i32* %retval, align 4
  br label %return

if.end11:                                         ; preds = %for.end
  store i32 0, i32* %retval, align 4
  br label %return

return:                                           ; preds = %if.end11, %if.then10
  %13 = load i32, i32* %retval, align 4
  ret i32 %13
}

declare void @device_del(%struct.device*) #1

; Function Attrs: noinline nounwind optnone uwtable
define i32 @snd_minor_info_init() #0 section ".init.text" {
entry:
  %retval = alloca i32, align 4
  %entry1 = alloca %struct.snd_info_entry*, align 8
  %call = call %struct.snd_info_entry* @snd_info_create_module_entry(%struct.module* null, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.1, i32 0, i32 0), %struct.snd_info_entry* null)
  store %struct.snd_info_entry* %call, %struct.snd_info_entry** %entry1, align 8
  %0 = load %struct.snd_info_entry*, %struct.snd_info_entry** %entry1, align 8
  %tobool = icmp ne %struct.snd_info_entry* %0, null
  br i1 %tobool, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  store i32 -12, i32* %retval, align 4
  br label %return

if.end:                                           ; preds = %entry
  %1 = load %struct.snd_info_entry*, %struct.snd_info_entry** %entry1, align 8
  %c = getelementptr inbounds %struct.snd_info_entry, %struct.snd_info_entry* %1, i32 0, i32 4
  %text = bitcast %union.anon.53* %c to %struct.snd_info_entry_text*
  %read = getelementptr inbounds %struct.snd_info_entry_text, %struct.snd_info_entry_text* %text, i32 0, i32 0
  store void (%struct.snd_info_entry*, %struct.snd_info_buffer*)* @snd_minor_info_read, void (%struct.snd_info_entry*, %struct.snd_info_buffer*)** %read, align 8
  %2 = load %struct.snd_info_entry*, %struct.snd_info_entry** %entry1, align 8
  %call2 = call i32 @snd_info_register(%struct.snd_info_entry* %2)
  store i32 %call2, i32* %retval, align 4
  br label %return

return:                                           ; preds = %if.end, %if.then
  %3 = load i32, i32* %retval, align 4
  ret i32 %3
}

declare %struct.snd_info_entry* @snd_info_create_module_entry(%struct.module*, i8*, %struct.snd_info_entry*) #1

; Function Attrs: noinline nounwind optnone uwtable
define internal void @snd_minor_info_read(%struct.snd_info_entry* %entry1, %struct.snd_info_buffer* %buffer) #0 {
entry:
  %entry.addr = alloca %struct.snd_info_entry*, align 8
  %buffer.addr = alloca %struct.snd_info_buffer*, align 8
  %minor = alloca i32, align 4
  %mptr = alloca %struct.snd_minor*, align 8
  store %struct.snd_info_entry* %entry1, %struct.snd_info_entry** %entry.addr, align 8
  store %struct.snd_info_buffer* %buffer, %struct.snd_info_buffer** %buffer.addr, align 8
  call void @mutex_lock(%struct.mutex* @sound_mutex)
  store i32 0, i32* %minor, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %0 = load i32, i32* %minor, align 4
  %cmp = icmp slt i32 %0, 256
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %1 = load i32, i32* %minor, align 4
  %idxprom = sext i32 %1 to i64
  %arrayidx = getelementptr inbounds [256 x %struct.snd_minor*], [256 x %struct.snd_minor*]* @snd_minors, i64 0, i64 %idxprom
  %2 = load %struct.snd_minor*, %struct.snd_minor** %arrayidx, align 8
  store %struct.snd_minor* %2, %struct.snd_minor** %mptr, align 8
  %tobool = icmp ne %struct.snd_minor* %2, null
  br i1 %tobool, label %if.end, label %if.then

if.then:                                          ; preds = %for.body
  br label %for.inc

if.end:                                           ; preds = %for.body
  %3 = load %struct.snd_minor*, %struct.snd_minor** %mptr, align 8
  %card = getelementptr inbounds %struct.snd_minor, %struct.snd_minor* %3, i32 0, i32 1
  %4 = load i32, i32* %card, align 4
  %cmp2 = icmp sge i32 %4, 0
  br i1 %cmp2, label %if.then3, label %if.else14

if.then3:                                         ; preds = %if.end
  %5 = load %struct.snd_minor*, %struct.snd_minor** %mptr, align 8
  %device = getelementptr inbounds %struct.snd_minor, %struct.snd_minor* %5, i32 0, i32 2
  %6 = load i32, i32* %device, align 8
  %cmp4 = icmp sge i32 %6, 0
  br i1 %cmp4, label %if.then5, label %if.else

if.then5:                                         ; preds = %if.then3
  %7 = load %struct.snd_info_buffer*, %struct.snd_info_buffer** %buffer.addr, align 8
  %buffer6 = getelementptr inbounds %struct.snd_info_buffer, %struct.snd_info_buffer* %7, i32 0, i32 0
  %8 = load i8*, i8** %buffer6, align 8
  %9 = bitcast i8* %8 to %struct.seq_file*
  %10 = load i32, i32* %minor, align 4
  %11 = load %struct.snd_minor*, %struct.snd_minor** %mptr, align 8
  %card7 = getelementptr inbounds %struct.snd_minor, %struct.snd_minor* %11, i32 0, i32 1
  %12 = load i32, i32* %card7, align 4
  %13 = load %struct.snd_minor*, %struct.snd_minor** %mptr, align 8
  %device8 = getelementptr inbounds %struct.snd_minor, %struct.snd_minor* %13, i32 0, i32 2
  %14 = load i32, i32* %device8, align 8
  %15 = load %struct.snd_minor*, %struct.snd_minor** %mptr, align 8
  %type = getelementptr inbounds %struct.snd_minor, %struct.snd_minor* %15, i32 0, i32 0
  %16 = load i32, i32* %type, align 8
  %call = call i8* @snd_device_type_name(i32 %16)
  call void (%struct.seq_file*, i8*, ...) @seq_printf(%struct.seq_file* %9, i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.3, i32 0, i32 0), i32 %10, i32 %12, i32 %14, i8* %call)
  br label %if.end13

if.else:                                          ; preds = %if.then3
  %17 = load %struct.snd_info_buffer*, %struct.snd_info_buffer** %buffer.addr, align 8
  %buffer9 = getelementptr inbounds %struct.snd_info_buffer, %struct.snd_info_buffer* %17, i32 0, i32 0
  %18 = load i8*, i8** %buffer9, align 8
  %19 = bitcast i8* %18 to %struct.seq_file*
  %20 = load i32, i32* %minor, align 4
  %21 = load %struct.snd_minor*, %struct.snd_minor** %mptr, align 8
  %card10 = getelementptr inbounds %struct.snd_minor, %struct.snd_minor* %21, i32 0, i32 1
  %22 = load i32, i32* %card10, align 4
  %23 = load %struct.snd_minor*, %struct.snd_minor** %mptr, align 8
  %type11 = getelementptr inbounds %struct.snd_minor, %struct.snd_minor* %23, i32 0, i32 0
  %24 = load i32, i32* %type11, align 8
  %call12 = call i8* @snd_device_type_name(i32 %24)
  call void (%struct.seq_file*, i8*, ...) @seq_printf(%struct.seq_file* %19, i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.4, i32 0, i32 0), i32 %20, i32 %22, i8* %call12)
  br label %if.end13

if.end13:                                         ; preds = %if.else, %if.then5
  br label %if.end18

if.else14:                                        ; preds = %if.end
  %25 = load %struct.snd_info_buffer*, %struct.snd_info_buffer** %buffer.addr, align 8
  %buffer15 = getelementptr inbounds %struct.snd_info_buffer, %struct.snd_info_buffer* %25, i32 0, i32 0
  %26 = load i8*, i8** %buffer15, align 8
  %27 = bitcast i8* %26 to %struct.seq_file*
  %28 = load i32, i32* %minor, align 4
  %29 = load %struct.snd_minor*, %struct.snd_minor** %mptr, align 8
  %type16 = getelementptr inbounds %struct.snd_minor, %struct.snd_minor* %29, i32 0, i32 0
  %30 = load i32, i32* %type16, align 8
  %call17 = call i8* @snd_device_type_name(i32 %30)
  call void (%struct.seq_file*, i8*, ...) @seq_printf(%struct.seq_file* %27, i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.5, i32 0, i32 0), i32 %28, i8* %call17)
  br label %if.end18

if.end18:                                         ; preds = %if.else14, %if.end13
  br label %for.inc

for.inc:                                          ; preds = %if.end18, %if.then
  %31 = load i32, i32* %minor, align 4
  %inc = add nsw i32 %31, 1
  store i32 %inc, i32* %minor, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  call void @mutex_unlock(%struct.mutex* @sound_mutex)
  ret void
}

declare i32 @snd_info_register(%struct.snd_info_entry*) #1

; Function Attrs: noinline nounwind optnone uwtable
define internal void @alsa_sound_exit() #0 section ".exit.text" {
entry:
  %call = call i32 @snd_info_done()
  %0 = load i32, i32* @major, align 4
  call void @unregister_chrdev(i32 %0, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.2, i32 0, i32 0))
  ret void
}

declare i32 @snd_info_done() #1

; Function Attrs: noinline nounwind optnone uwtable
define internal void @unregister_chrdev(i32 %major, i8* %name) #0 {
entry:
  %major.addr = alloca i32, align 4
  %name.addr = alloca i8*, align 8
  store i32 %major, i32* %major.addr, align 4
  store i8* %name, i8** %name.addr, align 8
  %0 = load i32, i32* %major.addr, align 4
  %1 = load i8*, i8** %name.addr, align 8
  call void @__unregister_chrdev(i32 %0, i32 0, i32 256, i8* %1)
  ret void
}

; Function Attrs: noinline nounwind optnone uwtable
define internal i32 @alsa_sound_init() #0 section ".init.text" {
entry:
  %retval = alloca i32, align 4
  %0 = load i32, i32* @major, align 4
  store i32 %0, i32* @snd_major, align 4
  %1 = load i32, i32* @cards_limit, align 4
  store i32 %1, i32* @snd_ecards_limit, align 4
  %2 = load i32, i32* @major, align 4
  %call = call i32 @register_chrdev(i32 %2, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.2, i32 0, i32 0), %struct.file_operations* @snd_fops)
  %tobool = icmp ne i32 %call, 0
  br i1 %tobool, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %3 = load i32, i32* @major, align 4
  %call1 = call i32 (i8*, ...) @printk(i8* getelementptr inbounds ([63 x i8], [63 x i8]* @.str.14, i32 0, i32 0), i32 %3)
  store i32 -5, i32* %retval, align 4
  br label %return

if.end:                                           ; preds = %entry
  %call2 = call i32 @snd_info_init()
  %cmp = icmp slt i32 %call2, 0
  br i1 %cmp, label %if.then3, label %if.end4

if.then3:                                         ; preds = %if.end
  %4 = load i32, i32* @major, align 4
  call void @unregister_chrdev(i32 %4, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.2, i32 0, i32 0))
  store i32 -12, i32* %retval, align 4
  br label %return

if.end4:                                          ; preds = %if.end
  %call5 = call i32 (i8*, ...) @printk(i8* getelementptr inbounds ([57 x i8], [57 x i8]* @.str.15, i32 0, i32 0))
  store i32 0, i32* %retval, align 4
  br label %return

return:                                           ; preds = %if.end4, %if.then3, %if.then
  %5 = load i32, i32* %retval, align 4
  ret i32 %5
}

declare noalias i8* @__kmalloc(i64, i32) #1

declare void @seq_printf(%struct.seq_file*, i8*, ...) #1

; Function Attrs: noinline nounwind optnone uwtable
define internal i8* @snd_device_type_name(i32 %type) #0 {
entry:
  %retval = alloca i8*, align 8
  %type.addr = alloca i32, align 4
  store i32 %type, i32* %type.addr, align 4
  %0 = load i32, i32* %type.addr, align 4
  br label %NodeBlock21

NodeBlock21:                                      ; preds = %entry
  %Pivot22 = icmp slt i32 %0, 8
  br i1 %Pivot22, label %NodeBlock5, label %NodeBlock19

NodeBlock19:                                      ; preds = %NodeBlock21
  %Pivot20 = icmp slt i32 %0, 24
  br i1 %Pivot20, label %NodeBlock11, label %NodeBlock17

NodeBlock17:                                      ; preds = %NodeBlock19
  %Pivot18 = icmp slt i32 %0, 33
  br i1 %Pivot18, label %LeafBlock13, label %LeafBlock15

LeafBlock15:                                      ; preds = %NodeBlock17
  %SwitchLeaf16 = icmp eq i32 %0, 33
  br i1 %SwitchLeaf16, label %sw.bb6, label %NewDefault

LeafBlock13:                                      ; preds = %NodeBlock17
  %SwitchLeaf14 = icmp eq i32 %0, 24
  br i1 %SwitchLeaf14, label %sw.bb4, label %NewDefault

NodeBlock11:                                      ; preds = %NodeBlock19
  %Pivot12 = icmp slt i32 %0, 16
  br i1 %Pivot12, label %LeafBlock7, label %LeafBlock9

LeafBlock9:                                       ; preds = %NodeBlock11
  %SwitchLeaf10 = icmp eq i32 %0, 16
  br i1 %SwitchLeaf10, label %sw.bb3, label %NewDefault

LeafBlock7:                                       ; preds = %NodeBlock11
  %SwitchLeaf8 = icmp eq i32 %0, 8
  br i1 %SwitchLeaf8, label %sw.bb2, label %NewDefault

NodeBlock5:                                       ; preds = %NodeBlock21
  %Pivot6 = icmp slt i32 %0, 1
  br i1 %Pivot6, label %LeafBlock, label %NodeBlock

NodeBlock:                                        ; preds = %NodeBlock5
  %Pivot = icmp slt i32 %0, 4
  br i1 %Pivot, label %LeafBlock1, label %LeafBlock3

LeafBlock3:                                       ; preds = %NodeBlock
  %SwitchLeaf4 = icmp eq i32 %0, 4
  br i1 %SwitchLeaf4, label %sw.bb1, label %NewDefault

LeafBlock1:                                       ; preds = %NodeBlock
  %SwitchLeaf2 = icmp eq i32 %0, 1
  br i1 %SwitchLeaf2, label %sw.bb5, label %NewDefault

LeafBlock:                                        ; preds = %NodeBlock5
  %SwitchLeaf = icmp eq i32 %0, 0
  br i1 %SwitchLeaf, label %sw.bb, label %NewDefault

sw.bb:                                            ; preds = %LeafBlock
  store i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.6, i32 0, i32 0), i8** %retval, align 8
  br label %return

sw.bb1:                                           ; preds = %LeafBlock3
  store i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.7, i32 0, i32 0), i8** %retval, align 8
  br label %return

sw.bb2:                                           ; preds = %LeafBlock7
  store i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.8, i32 0, i32 0), i8** %retval, align 8
  br label %return

sw.bb3:                                           ; preds = %LeafBlock9
  store i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.9, i32 0, i32 0), i8** %retval, align 8
  br label %return

sw.bb4:                                           ; preds = %LeafBlock13
  store i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.10, i32 0, i32 0), i8** %retval, align 8
  br label %return

sw.bb5:                                           ; preds = %LeafBlock1
  store i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.11, i32 0, i32 0), i8** %retval, align 8
  br label %return

sw.bb6:                                           ; preds = %LeafBlock15
  store i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.12, i32 0, i32 0), i8** %retval, align 8
  br label %return

NewDefault:                                       ; preds = %LeafBlock15, %LeafBlock13, %LeafBlock9, %LeafBlock7, %LeafBlock3, %LeafBlock1, %LeafBlock
  br label %sw.default

sw.default:                                       ; preds = %NewDefault
  store i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.13, i32 0, i32 0), i8** %retval, align 8
  br label %return

return:                                           ; preds = %sw.default, %sw.bb6, %sw.bb5, %sw.bb4, %sw.bb3, %sw.bb2, %sw.bb1, %sw.bb
  %1 = load i8*, i8** %retval, align 8
  ret i8* %1
}

declare void @__unregister_chrdev(i32, i32, i32, i8*) #1

; Function Attrs: noinline nounwind optnone uwtable
define internal i32 @register_chrdev(i32 %major, i8* %name, %struct.file_operations* %fops) #0 {
entry:
  %major.addr = alloca i32, align 4
  %name.addr = alloca i8*, align 8
  %fops.addr = alloca %struct.file_operations*, align 8
  store i32 %major, i32* %major.addr, align 4
  store i8* %name, i8** %name.addr, align 8
  store %struct.file_operations* %fops, %struct.file_operations** %fops.addr, align 8
  %0 = load i32, i32* %major.addr, align 4
  %1 = load i8*, i8** %name.addr, align 8
  %2 = load %struct.file_operations*, %struct.file_operations** %fops.addr, align 8
  %call = call i32 @__register_chrdev(i32 %0, i32 0, i32 256, i8* %1, %struct.file_operations* %2)
  ret i32 %call
}

declare i32 @printk(i8*, ...) #1

declare i32 @snd_info_init() #1

declare i32 @__register_chrdev(i32, i32, i32, i8*, %struct.file_operations*) #1

declare i64 @noop_llseek(%struct.file*, i64, i32) #1

; Function Attrs: noinline nounwind optnone uwtable
define internal i32 @snd_open(%struct.inode* %inode, %struct.file* %file) #0 {
entry:
  %retval = alloca i32, align 4
  %inode.addr = alloca %struct.inode*, align 8
  %file.addr = alloca %struct.file*, align 8
  %minor = alloca i32, align 4
  %mptr = alloca %struct.snd_minor*, align 8
  %new_fops = alloca %struct.file_operations*, align 8
  %err = alloca i32, align 4
  %__file = alloca %struct.file*, align 8
  store %struct.inode* %inode, %struct.inode** %inode.addr, align 8
  store %struct.file* %file, %struct.file** %file.addr, align 8
  %0 = load %struct.inode*, %struct.inode** %inode.addr, align 8
  %call = call i32 @iminor(%struct.inode* %0)
  store i32 %call, i32* %minor, align 4
  store %struct.snd_minor* null, %struct.snd_minor** %mptr, align 8
  store i32 0, i32* %err, align 4
  %1 = load i32, i32* %minor, align 4
  %conv = zext i32 %1 to i64
  %cmp = icmp uge i64 %conv, 256
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  store i32 -19, i32* %retval, align 4
  br label %return

if.end:                                           ; preds = %entry
  call void @mutex_lock(%struct.mutex* @sound_mutex)
  %2 = load i32, i32* %minor, align 4
  %idxprom = zext i32 %2 to i64
  %arrayidx = getelementptr inbounds [256 x %struct.snd_minor*], [256 x %struct.snd_minor*]* @snd_minors, i64 0, i64 %idxprom
  %3 = load %struct.snd_minor*, %struct.snd_minor** %arrayidx, align 8
  store %struct.snd_minor* %3, %struct.snd_minor** %mptr, align 8
  %4 = load %struct.snd_minor*, %struct.snd_minor** %mptr, align 8
  %cmp2 = icmp eq %struct.snd_minor* %4, null
  br i1 %cmp2, label %if.then4, label %if.end8

if.then4:                                         ; preds = %if.end
  %5 = load i32, i32* %minor, align 4
  %call5 = call %struct.snd_minor* @autoload_device(i32 %5)
  store %struct.snd_minor* %call5, %struct.snd_minor** %mptr, align 8
  %6 = load %struct.snd_minor*, %struct.snd_minor** %mptr, align 8
  %tobool = icmp ne %struct.snd_minor* %6, null
  br i1 %tobool, label %if.end7, label %if.then6

if.then6:                                         ; preds = %if.then4
  call void @mutex_unlock(%struct.mutex* @sound_mutex)
  store i32 -19, i32* %retval, align 4
  br label %return

if.end7:                                          ; preds = %if.then4
  br label %if.end8

if.end8:                                          ; preds = %if.end7, %if.end
  %7 = load %struct.snd_minor*, %struct.snd_minor** %mptr, align 8
  %f_ops = getelementptr inbounds %struct.snd_minor, %struct.snd_minor* %7, i32 0, i32 3
  %8 = load %struct.file_operations*, %struct.file_operations** %f_ops, align 8
  %tobool9 = icmp ne %struct.file_operations* %8, null
  br i1 %tobool9, label %land.lhs.true, label %cond.false

land.lhs.true:                                    ; preds = %if.end8
  %9 = load %struct.snd_minor*, %struct.snd_minor** %mptr, align 8
  %f_ops10 = getelementptr inbounds %struct.snd_minor, %struct.snd_minor* %9, i32 0, i32 3
  %10 = load %struct.file_operations*, %struct.file_operations** %f_ops10, align 8
  %owner = getelementptr inbounds %struct.file_operations, %struct.file_operations* %10, i32 0, i32 0
  %11 = load %struct.module*, %struct.module** %owner, align 8
  %call11 = call zeroext i1 @try_module_get(%struct.module* %11)
  br i1 %call11, label %cond.true, label %cond.false

cond.true:                                        ; preds = %land.lhs.true
  %12 = load %struct.snd_minor*, %struct.snd_minor** %mptr, align 8
  %f_ops13 = getelementptr inbounds %struct.snd_minor, %struct.snd_minor* %12, i32 0, i32 3
  %13 = load %struct.file_operations*, %struct.file_operations** %f_ops13, align 8
  br label %cond.end

cond.false:                                       ; preds = %land.lhs.true, %if.end8
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.file_operations* [ %13, %cond.true ], [ null, %cond.false ]
  store %struct.file_operations* %cond, %struct.file_operations** %new_fops, align 8
  call void @mutex_unlock(%struct.mutex* @sound_mutex)
  %14 = load %struct.file_operations*, %struct.file_operations** %new_fops, align 8
  %tobool14 = icmp ne %struct.file_operations* %14, null
  br i1 %tobool14, label %if.end16, label %if.then15

if.then15:                                        ; preds = %cond.end
  store i32 -19, i32* %retval, align 4
  br label %return

if.end16:                                         ; preds = %cond.end
  br label %do.body

do.body:                                          ; preds = %if.end16
  %15 = load %struct.file*, %struct.file** %file.addr, align 8
  store %struct.file* %15, %struct.file** %__file, align 8
  br label %do.body17

do.body17:                                        ; preds = %do.body
  %16 = load %struct.file*, %struct.file** %__file, align 8
  %f_op = getelementptr inbounds %struct.file, %struct.file* %16, i32 0, i32 3
  %17 = load %struct.file_operations*, %struct.file_operations** %f_op, align 8
  %tobool18 = icmp ne %struct.file_operations* %17, null
  br i1 %tobool18, label %if.then19, label %if.end22

if.then19:                                        ; preds = %do.body17
  %18 = load %struct.file*, %struct.file** %__file, align 8
  %f_op20 = getelementptr inbounds %struct.file, %struct.file* %18, i32 0, i32 3
  %19 = load %struct.file_operations*, %struct.file_operations** %f_op20, align 8
  %owner21 = getelementptr inbounds %struct.file_operations, %struct.file_operations* %19, i32 0, i32 0
  %20 = load %struct.module*, %struct.module** %owner21, align 8
  call void @module_put(%struct.module* %20)
  br label %if.end22

if.end22:                                         ; preds = %if.then19, %do.body17
  br label %do.end

do.end:                                           ; preds = %if.end22
  br label %do.body23

do.body23:                                        ; preds = %do.end
  %21 = load %struct.file_operations*, %struct.file_operations** %new_fops, align 8
  %22 = load %struct.file*, %struct.file** %__file, align 8
  %f_op24 = getelementptr inbounds %struct.file, %struct.file* %22, i32 0, i32 3
  store %struct.file_operations* %21, %struct.file_operations** %f_op24, align 8
  %tobool25 = icmp ne %struct.file_operations* %21, null
  %lnot = xor i1 %tobool25, true
  %lnot26 = xor i1 %lnot, true
  %lnot27 = xor i1 %lnot26, true
  %lnot.ext = zext i1 %lnot27 to i32
  %conv28 = sext i32 %lnot.ext to i64
  %tobool29 = icmp ne i64 %conv28, 0
  br i1 %tobool29, label %if.then30, label %if.end36

if.then30:                                        ; preds = %do.body23
  br label %do.body31

do.body31:                                        ; preds = %if.then30
  call void asm sideeffect "1:\09ud2\0A.pushsection __bug_table,\22a\22\0A2:\09.long 1b - 2b, ${0:c} - 2b\0A\09.word ${1:c}, 0\0A\09.org 2b+${2:c}\0A.popsection", "i,i,i,~{dirflag},~{fpsr},~{flags}"(i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.16, i32 0, i32 0), i32 174, i64 12) #2, !srcloc !2
  br label %do.body32

do.body32:                                        ; preds = %do.cond, %do.body31
  br label %do.cond

do.cond:                                          ; preds = %do.body32
  br i1 true, label %do.body32, label %do.end33

do.end33:                                         ; preds = %do.cond
  br label %do.end35

do.end35:                                         ; preds = %do.end33
  br label %if.end36

if.end36:                                         ; preds = %do.end35, %do.body23
  br label %do.end38

do.end38:                                         ; preds = %if.end36
  br label %do.end40

do.end40:                                         ; preds = %do.end38
  %23 = load %struct.file*, %struct.file** %file.addr, align 8
  %f_op41 = getelementptr inbounds %struct.file, %struct.file* %23, i32 0, i32 3
  %24 = load %struct.file_operations*, %struct.file_operations** %f_op41, align 8
  %open = getelementptr inbounds %struct.file_operations, %struct.file_operations* %24, i32 0, i32 12
  %25 = load i32 (%struct.inode*, %struct.file*)*, i32 (%struct.inode*, %struct.file*)** %open, align 8
  %tobool42 = icmp ne i32 (%struct.inode*, %struct.file*)* %25, null
  br i1 %tobool42, label %if.then43, label %if.end47

if.then43:                                        ; preds = %do.end40
  %26 = load %struct.file*, %struct.file** %file.addr, align 8
  %f_op44 = getelementptr inbounds %struct.file, %struct.file* %26, i32 0, i32 3
  %27 = load %struct.file_operations*, %struct.file_operations** %f_op44, align 8
  %open45 = getelementptr inbounds %struct.file_operations, %struct.file_operations* %27, i32 0, i32 12
  %28 = load i32 (%struct.inode*, %struct.file*)*, i32 (%struct.inode*, %struct.file*)** %open45, align 8
  %29 = load %struct.inode*, %struct.inode** %inode.addr, align 8
  %30 = load %struct.file*, %struct.file** %file.addr, align 8
  %call46 = call i32 %28(%struct.inode* %29, %struct.file* %30)
  store i32 %call46, i32* %err, align 4
  br label %if.end47

if.end47:                                         ; preds = %if.then43, %do.end40
  %31 = load i32, i32* %err, align 4
  store i32 %31, i32* %retval, align 4
  br label %return

return:                                           ; preds = %if.end47, %if.then15, %if.then6, %if.then
  %32 = load i32, i32* %retval, align 4
  ret i32 %32
}

; Function Attrs: noinline nounwind optnone uwtable
define internal i32 @iminor(%struct.inode* %inode) #0 {
entry:
  %inode.addr = alloca %struct.inode*, align 8
  store %struct.inode* %inode, %struct.inode** %inode.addr, align 8
  %0 = load %struct.inode*, %struct.inode** %inode.addr, align 8
  %i_rdev = getelementptr inbounds %struct.inode, %struct.inode* %0, i32 0, i32 13
  %1 = load i32, i32* %i_rdev, align 4
  %and = and i32 %1, 1048575
  ret i32 %and
}

; Function Attrs: noinline nounwind optnone uwtable
define internal %struct.snd_minor* @autoload_device(i32 %minor) #0 {
entry:
  %minor.addr = alloca i32, align 4
  %dev = alloca i32, align 4
  %card = alloca i32, align 4
  store i32 %minor, i32* %minor.addr, align 4
  call void @mutex_unlock(%struct.mutex* @sound_mutex)
  %0 = load i32, i32* %minor.addr, align 4
  %and = and i32 %0, 31
  store i32 %and, i32* %dev, align 4
  %1 = load i32, i32* %dev, align 4
  %cmp = icmp eq i32 %1, 0
  br i1 %cmp, label %if.then, label %if.else

if.then:                                          ; preds = %entry
  %2 = load i32, i32* %minor.addr, align 4
  %shr = lshr i32 %2, 5
  store i32 %shr, i32* %card, align 4
  %3 = load i32, i32* %card, align 4
  %idxprom = sext i32 %3 to i64
  %arrayidx = getelementptr inbounds [8 x %struct.snd_card*], [8 x %struct.snd_card*]* @snd_cards, i64 0, i64 %idxprom
  %4 = load %struct.snd_card*, %struct.snd_card** %arrayidx, align 8
  %cmp1 = icmp eq %struct.snd_card* %4, null
  br i1 %cmp1, label %if.then2, label %if.end

if.then2:                                         ; preds = %if.then
  %5 = load i32, i32* %card, align 4
  call void @snd_request_card(i32 %5)
  br label %if.end

if.end:                                           ; preds = %if.then2, %if.then
  br label %if.end6

if.else:                                          ; preds = %entry
  %6 = load i32, i32* %dev, align 4
  %cmp3 = icmp eq i32 %6, 1
  br i1 %cmp3, label %if.then4, label %if.end5

if.then4:                                         ; preds = %if.else
  %7 = load i32, i32* %minor.addr, align 4
  call void @snd_request_other(i32 %7)
  br label %if.end5

if.end5:                                          ; preds = %if.then4, %if.else
  br label %if.end6

if.end6:                                          ; preds = %if.end5, %if.end
  call void @mutex_lock(%struct.mutex* @sound_mutex)
  %8 = load i32, i32* %minor.addr, align 4
  %idxprom7 = zext i32 %8 to i64
  %arrayidx8 = getelementptr inbounds [256 x %struct.snd_minor*], [256 x %struct.snd_minor*]* @snd_minors, i64 0, i64 %idxprom7
  %9 = load %struct.snd_minor*, %struct.snd_minor** %arrayidx8, align 8
  ret %struct.snd_minor* %9
}

declare zeroext i1 @try_module_get(%struct.module*) #1

declare void @module_put(%struct.module*) #1

; Function Attrs: noinline nounwind optnone uwtable
define internal void @snd_request_other(i32 %minor) #0 {
entry:
  %minor.addr = alloca i32, align 4
  %str = alloca i8*, align 8
  store i32 %minor, i32* %minor.addr, align 4
  %0 = load i32, i32* %minor.addr, align 4
  br label %NodeBlock

NodeBlock:                                        ; preds = %entry
  %Pivot = icmp slt i32 %0, 33
  br i1 %Pivot, label %LeafBlock, label %LeafBlock1

LeafBlock1:                                       ; preds = %NodeBlock
  %SwitchLeaf2 = icmp eq i32 %0, 33
  br i1 %SwitchLeaf2, label %sw.bb1, label %NewDefault

LeafBlock:                                        ; preds = %NodeBlock
  %SwitchLeaf = icmp eq i32 %0, 1
  br i1 %SwitchLeaf, label %sw.bb, label %NewDefault

sw.bb:                                            ; preds = %LeafBlock
  store i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.17, i32 0, i32 0), i8** %str, align 8
  br label %sw.epilog

sw.bb1:                                           ; preds = %LeafBlock1
  store i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.18, i32 0, i32 0), i8** %str, align 8
  br label %sw.epilog

NewDefault:                                       ; preds = %LeafBlock1, %LeafBlock
  br label %sw.default

sw.default:                                       ; preds = %NewDefault
  br label %return

sw.epilog:                                        ; preds = %sw.bb1, %sw.bb
  %1 = load i8*, i8** %str, align 8
  %call = call i32 (i1, i8*, ...) @__request_module(i1 zeroext true, i8* %1)
  br label %return

return:                                           ; preds = %sw.epilog, %sw.default
  ret void
}

attributes #0 = { noinline nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { nounwind }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 5.0.1 (tags/RELEASE_500/final)"}
!2 = !{i32 -2144539633, i32 -2144539608, i32 -2144539338, i32 -2144539541, i32 -2144539510, i32 -2144539480}
