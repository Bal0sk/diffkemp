; ModuleID = '/diffkemp/kernel/linux-4.11/sound/core/sound.bc'
source_filename = "llvm-link"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%struct.kernel_symbol = type { i64, i8* }
%struct.kernel_param = type { i8*, %struct.module*, %struct.kernel_param_ops*, i16, i8, i8, %union.anon.46 }
%struct.module = type { i32, %struct.list_head, [56 x i8], %struct.module_kobject, %struct.module_attribute*, i8*, i8*, %struct.kobject*, %struct.kernel_symbol*, i32*, i32, %struct.mutex, %struct.kernel_param*, i32, i32, %struct.kernel_symbol*, i32*, i8, %struct.kernel_symbol*, i32*, i32, i32, %struct.exception_table_entry*, i32 ()*, [40 x i8], %struct.module_layout, %struct.module_layout, %struct.lock_class_key, i64, i32, %struct.list_head, %struct.bug_entry*, %struct.mod_kallsyms*, %struct.mod_kallsyms, %struct.module_sect_attrs*, %struct.module_notes_attrs*, i8*, i8*, i32, i32, %struct.tracepoint**, i32, i8**, %struct.trace_event_call**, i32, %struct.trace_enum_map**, i32, %struct.list_head, %struct.list_head, void ()*, %struct.atomic_t, [12 x i8] }
%struct.module_kobject = type { %struct.kobject, %struct.module*, %struct.kobject*, %struct.module_param_attrs*, %struct.completion* }
%struct.kobject = type { i8*, %struct.list_head, %struct.kobject*, %struct.kset*, %struct.kobj_type*, %struct.kernfs_node*, %struct.raw_spinlock, i8 }
%struct.kset = type { %struct.list_head, %struct.spinlock, %struct.kobject, %struct.kset_uevent_ops* }
%struct.spinlock = type { %union.anon.1 }
%union.anon.1 = type { %struct.raw_spinlock }
%struct.kset_uevent_ops = type { i32 (%struct.kset*, %struct.kobject*)*, i8* (%struct.kset*, %struct.kobject*)*, i32 (%struct.kset*, %struct.kobject*, %struct.kobj_uevent_env*)* }
%struct.kobj_uevent_env = type { [3 x i8*], [32 x i8*], i32, [2048 x i8], i32 }
%struct.kobj_type = type { void (%struct.kobject*)*, %struct.sysfs_ops*, %struct.attribute**, %struct.kobj_ns_type_operations* (%struct.kobject*)*, i8* (%struct.kobject*)* }
%struct.sysfs_ops = type { i64 (%struct.kobject*, %struct.attribute*, i8*)*, i64 (%struct.kobject*, %struct.attribute*, i8*, i64)* }
%struct.attribute = type { i8*, i16 }
%struct.kobj_ns_type_operations = type { i32, i1 ()*, i8* ()*, i8* (%struct.sock*)*, i8* ()*, void (i8*)* }
%struct.sock = type opaque
%struct.kernfs_node = type { %struct.atomic_t, %struct.atomic_t, %struct.kernfs_node*, i8*, %struct.rb_node, i8*, i32, %union.anon, i8*, i16, i16, i32, %struct.kernfs_iattrs* }
%struct.rb_node = type { i64, %struct.rb_node*, %struct.rb_node* }
%union.anon = type { %struct.kernfs_elem_attr }
%struct.kernfs_elem_attr = type { %struct.kernfs_ops*, %struct.kernfs_open_node*, i64, %struct.kernfs_node* }
%struct.kernfs_ops = type { i32 (%struct.kernfs_open_file*)*, void (%struct.kernfs_open_file*)*, i32 (%struct.seq_file*, i8*)*, i8* (%struct.seq_file*, i64*)*, i8* (%struct.seq_file*, i8*, i64*)*, void (%struct.seq_file*, i8*)*, i64 (%struct.kernfs_open_file*, i8*, i64, i64)*, i64, i8, i64 (%struct.kernfs_open_file*, i8*, i64, i64)*, i32 (%struct.kernfs_open_file*, %struct.vm_area_struct*)* }
%struct.kernfs_open_file = type { %struct.kernfs_node*, %struct.file*, %struct.seq_file*, i8*, %struct.mutex, %struct.mutex, i32, %struct.list_head, i8*, i64, i8, %struct.vm_operations_struct* }
%struct.file = type { %union.anon.2, %struct.path, %struct.inode*, %struct.file_operations*, %struct.spinlock, %union.anon.3, i32, i32, %struct.mutex, i64, %struct.fown_struct, %struct.cred*, %struct.file_ra_state, i64, i8*, i8*, %struct.list_head, %struct.list_head, %struct.address_space* }
%union.anon.2 = type { %struct.callback_head }
%struct.callback_head = type { %struct.callback_head*, void (%struct.callback_head*)* }
%struct.path = type { %struct.vfsmount*, %struct.dentry* }
%struct.vfsmount = type opaque
%struct.dentry = type { i32, %struct.atomic_t, %struct.hlist_bl_node, %struct.dentry*, %struct.qstr, %struct.inode*, [32 x i8], %struct.lockref, %struct.dentry_operations*, %struct.super_block*, i64, i8*, %union.anon.0, %struct.list_head, %struct.list_head, %union.anon.45 }
%struct.hlist_bl_node = type { %struct.hlist_bl_node*, %struct.hlist_bl_node** }
%struct.qstr = type { %union.anon.3, i8* }
%struct.lockref = type { %union.anon.3 }
%struct.dentry_operations = type { i32 (%struct.dentry*, i32)*, i32 (%struct.dentry*, i32)*, i32 (%struct.dentry*, %struct.qstr*)*, i32 (%struct.dentry*, i32, i8*, %struct.qstr*)*, i32 (%struct.dentry*)*, i32 (%struct.dentry*)*, void (%struct.dentry*)*, void (%struct.dentry*)*, void (%struct.dentry*, %struct.inode*)*, i8* (%struct.dentry*, i8*, i32)*, %struct.vfsmount* (%struct.path*)*, i32 (%struct.path*, i1)*, %struct.dentry* (%struct.dentry*, %struct.inode*, i32)*, [24 x i8] }
%struct.super_block = type { %struct.list_head, i32, i8, i64, i64, %struct.file_system_type*, %struct.super_operations*, %struct.dquot_operations*, %struct.quotactl_ops*, %struct.export_operations*, i64, i64, i64, %struct.dentry*, %struct.rw_semaphore, i32, %struct.atomic_t, i8*, %struct.xattr_handler**, %struct.fscrypt_operations*, %struct.hlist_bl_head, %struct.list_head, %struct.block_device*, %struct.backing_dev_info*, %struct.mtd_info*, %struct.hlist_node, i32, %struct.quota_info, %struct.sb_writers, [32 x i8], [16 x i8], i8*, i32, i32, i32, %struct.mutex, i8*, i8*, %struct.dentry_operations*, i32, %struct.shrinker, %union.anon.3, i32, %struct.workqueue_struct*, %struct.hlist_head, %struct.user_namespace*, %struct.list_lru, [56 x i8], %struct.list_lru, %struct.callback_head, %struct.work_struct, %struct.mutex, i32, [36 x i8], %struct.spinlock, %struct.list_head, %struct.spinlock, %struct.list_head, [16 x i8] }
%struct.file_system_type = type { i8*, i32, %struct.dentry* (%struct.file_system_type*, i32, i8*, i8*)*, void (%struct.super_block*)*, %struct.module*, %struct.file_system_type*, %struct.hlist_head, %struct.lock_class_key, %struct.lock_class_key, %struct.lock_class_key, [3 x %struct.lock_class_key], %struct.lock_class_key, %struct.lock_class_key, %struct.lock_class_key }
%struct.super_operations = type { %struct.inode* (%struct.super_block*)*, void (%struct.inode*)*, void (%struct.inode*, i32)*, i32 (%struct.inode*, %struct.writeback_control*)*, i32 (%struct.inode*)*, void (%struct.inode*)*, void (%struct.super_block*)*, i32 (%struct.super_block*, i32)*, i32 (%struct.super_block*)*, i32 (%struct.super_block*)*, i32 (%struct.super_block*)*, i32 (%struct.super_block*)*, i32 (%struct.dentry*, %struct.kstatfs*)*, i32 (%struct.super_block*, i32*, i8*)*, void (%struct.super_block*)*, i32 (%struct.seq_file*, %struct.dentry*)*, i32 (%struct.seq_file*, %struct.dentry*)*, i32 (%struct.seq_file*, %struct.dentry*)*, i32 (%struct.seq_file*, %struct.dentry*)*, i64 (%struct.super_block*, i32, i8*, i64, i64)*, i64 (%struct.super_block*, i32, i8*, i64, i64)*, %struct.dquot** (%struct.inode*)*, i32 (%struct.super_block*, %struct.page*, i32)*, i64 (%struct.super_block*, %struct.shrink_control*)*, i64 (%struct.super_block*, %struct.shrink_control*)* }
%struct.writeback_control = type opaque
%struct.kstatfs = type opaque
%struct.dquot = type { %struct.hlist_node, %struct.list_head, %struct.list_head, %struct.list_head, %struct.mutex, %struct.atomic_t, %struct.__wait_queue_head, %struct.super_block*, %struct.kqid, i64, i64, %struct.mem_dqblk }
%struct.__wait_queue_head = type { %struct.spinlock, %struct.list_head }
%struct.kqid = type { %struct.qspinlock, i32 }
%struct.qspinlock = type { %struct.atomic_t }
%struct.mem_dqblk = type { i64, i64, i64, i64, i64, i64, i64, i64, i64 }
%struct.page = type { i64, %union.anon.5, %union.anon.3, %union.anon.3, %union.anon.0, %union.anon.3, [8 x i8] }
%union.anon.5 = type { %struct.address_space* }
%struct.shrink_control = type { i32, i64, i32, %struct.mem_cgroup* }
%struct.mem_cgroup = type opaque
%struct.dquot_operations = type { i32 (%struct.dquot*)*, %struct.dquot* (%struct.super_block*, i32)*, void (%struct.dquot*)*, i32 (%struct.dquot*)*, i32 (%struct.dquot*)*, i32 (%struct.dquot*)*, i32 (%struct.super_block*, i32)*, i64* (%struct.inode*)*, i32 (%struct.inode*, %struct.atomic_t*)*, i32 (%struct.super_block*, %struct.kqid*)* }
%struct.quotactl_ops = type { i32 (%struct.super_block*, i32, i32, %struct.path*)*, i32 (%struct.super_block*, i32)*, i32 (%struct.super_block*, i32)*, i32 (%struct.super_block*, i32)*, i32 (%struct.super_block*, i32)*, i32 (%struct.super_block*, i32, %struct.qc_info*)*, i32 (%struct.super_block*, i64, %struct.qc_dqblk*)*, i32 (%struct.super_block*, %struct.kqid*, %struct.qc_dqblk*)*, i32 (%struct.super_block*, i64, %struct.qc_dqblk*)*, i32 (%struct.super_block*, %struct.qc_state*)*, i32 (%struct.super_block*, i32)* }
%struct.qc_info = type { i32, i32, i32, i32, i32, i32, i32, i32 }
%struct.qc_dqblk = type { i32, i64, i64, i64, i64, i64, i64, i64, i64, i32, i32, i64, i64, i64, i64, i32 }
%struct.qc_state = type { i32, [3 x %struct.qc_type_state] }
%struct.qc_type_state = type { i32, i32, i32, i32, i32, i32, i32, i64, i64, i64 }
%struct.export_operations = type opaque
%struct.rw_semaphore = type { %union.anon.3, %struct.list_head, %struct.raw_spinlock, %struct.qspinlock, %struct.task_struct* }
%struct.task_struct = type { %union.anon.3, i64, i8*, %struct.atomic_t, i32, i32, %struct.llist_node, i32, i32, i32, i64, %struct.task_struct*, i32, i32, i32, i32, i32, i32, %struct.sched_class*, [16 x i8], %struct.sched_entity, %struct.sched_rt_entity, %struct.task_group*, %struct.sched_dl_entity, i32, i32, i32, %struct.cpumask, %struct.sched_info, %struct.list_head, %struct.plist_node, %struct.rb_node, %struct.mm_struct*, %struct.mm_struct*, %struct.vmacache, %struct.task_rss_stat, i32, i32, i32, i32, i64, i32, i8, [3 x i8], i8, i64, %struct.restart_block, i32, i32, %struct.task_struct*, %struct.task_struct*, %struct.list_head, %struct.list_head, %struct.task_struct*, %struct.list_head, %struct.list_head, [3 x %struct.pid_link], %struct.list_head, %struct.list_head, %struct.completion*, i32*, i32*, i64, i64, i64, %struct.prev_cputime, i64, i64, i64, i64, i64, i64, %struct.task_cputime, [3 x %struct.list_head], %struct.cred*, %struct.cred*, %struct.cred*, [16 x i8], %struct.nameidata*, %struct.sysv_sem, %union.anon.0, %struct.fs_struct*, %struct.files_struct*, %struct.nsproxy*, %struct.signal_struct*, %struct.sighand_struct*, %struct.cpumask, %struct.cpumask, %struct.cpumask, %struct.sigpending, i64, i64, i32, %struct.callback_head*, %struct.audit_context*, %struct.atomic_t, i32, %struct.seccomp, i32, i32, %struct.spinlock, %struct.raw_spinlock, %struct.wake_q_node, %struct.rb_root, %struct.rb_node*, %struct.rt_mutex_waiter*, i8*, %struct.bio_list*, %struct.blk_plug*, %struct.reclaim_state*, %struct.backing_dev_info*, %struct.io_context*, i64, %struct.siginfo*, %struct.task_io_accounting, i64, i64, i64, %struct.cpumask, %struct.atomic_t, i32, i32, %struct.css_set*, %struct.list_head, %struct.robust_list_head*, %struct.compat_robust_list_head*, %struct.list_head, %struct.futex_pi_state*, [2 x %struct.perf_event_context*], %struct.mutex, %struct.list_head, %struct.mempolicy*, i16, i16, %struct.tlbflush_unmap_batch, %struct.callback_head, %struct.pipe_inode_info*, %struct.page_frag, %struct.task_delay_info*, i32, i32, i64, i64, i64, i64, i64, i32, %struct.task_struct*, %struct.vm_struct*, %struct.atomic_t, [28 x i8], %struct.thread_struct }
%struct.llist_node = type { %struct.llist_node* }
%struct.sched_class = type opaque
%struct.sched_entity = type { %struct.load_weight, %struct.rb_node, %struct.list_head, i32, i64, i64, i64, i64, i64, %struct.sched_statistics, i32, %struct.sched_entity*, %struct.cfs_rq*, %struct.cfs_rq*, [32 x i8], %struct.sched_avg, [24 x i8] }
%struct.load_weight = type { i64, i32 }
%struct.sched_statistics = type { i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64 }
%struct.cfs_rq = type opaque
%struct.sched_avg = type { i64, i64, i32, i32, i64, i64 }
%struct.sched_rt_entity = type { %struct.list_head, i64, i64, i32, i16, i16, %struct.sched_rt_entity* }
%struct.task_group = type opaque
%struct.sched_dl_entity = type { %struct.rb_node, i64, i64, i64, i64, i64, i64, i32, i32, i32, i32, %struct.hrtimer }
%struct.hrtimer = type { %struct.timerqueue_node, i64, i32 (%struct.hrtimer*)*, %struct.hrtimer_clock_base*, i8, i8 }
%struct.timerqueue_node = type { %struct.rb_node, i64 }
%struct.hrtimer_clock_base = type { %struct.hrtimer_cpu_base*, i32, i32, %struct.timerqueue_head, i64 ()*, i64, [16 x i8] }
%struct.hrtimer_cpu_base = type { %struct.raw_spinlock, %struct.atomic_t, %struct.hrtimer*, i32, i32, i32, i8, i8, i8, i64, %struct.hrtimer*, i32, i32, i32, i32, [4 x %struct.hrtimer_clock_base] }
%struct.timerqueue_head = type { %struct.rb_root, %struct.timerqueue_node* }
%struct.sched_info = type { i64, i64, i64, i64 }
%struct.plist_node = type { i32, %struct.list_head, %struct.list_head }
%struct.mm_struct = type { %struct.vm_area_struct*, %struct.rb_root, i32, i64 (%struct.file*, i64, i64, i64, i64)*, i64, i64, i64, i64, %union.anon.3*, %struct.atomic_t, %struct.atomic_t, %union.anon.3, %union.anon.3, i32, %struct.spinlock, %struct.rw_semaphore, %struct.list_head, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, [46 x i64], %struct.mm_rss_stat, %struct.linux_binfmt*, [1 x %struct.cpumask], %struct.mm_context_t, i64, %struct.core_state*, %struct.spinlock, %struct.kioctx_table*, %struct.user_namespace*, %struct.file*, %struct.mmu_notifier_mm*, i8, %struct.lock_class_key, %union.anon.3, %struct.work_struct }
%struct.vm_area_struct = type { i64, i64, %struct.vm_area_struct*, %struct.vm_area_struct*, %struct.rb_node, i64, %struct.mm_struct*, %union.anon.3, i64, %struct.timerqueue_node, %struct.list_head, %struct.anon_vma*, %struct.vm_operations_struct*, i64, %struct.file*, i8*, %struct.mempolicy*, %struct.lock_class_key }
%struct.anon_vma = type opaque
%struct.mm_rss_stat = type { [4 x %union.anon.3] }
%struct.linux_binfmt = type opaque
%struct.mm_context_t = type { %struct.ldt_struct*, i16, %struct.mutex, i8*, %struct.vdso_image*, %struct.atomic_t, i16, i16 }
%struct.ldt_struct = type opaque
%struct.vdso_image = type { i8*, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64 }
%struct.core_state = type { %struct.atomic_t, %struct.core_thread, %struct.completion }
%struct.core_thread = type { %struct.task_struct*, %struct.core_thread* }
%struct.completion = type { i32, %struct.__wait_queue_head }
%struct.kioctx_table = type opaque
%struct.mmu_notifier_mm = type opaque
%struct.vmacache = type { i32, [4 x %struct.vm_area_struct*] }
%struct.task_rss_stat = type { i32, [4 x i32] }
%struct.restart_block = type { i64 (%struct.restart_block*)*, %union.anon.7 }
%union.anon.7 = type { %struct.anon.8 }
%struct.anon.8 = type { i32*, i32, i32, i32, i64, i32* }
%struct.pid_link = type { %struct.hlist_node, %struct.pid* }
%struct.pid = type { %struct.atomic_t, i32, [3 x %struct.hlist_head], %struct.callback_head, [1 x %struct.upid] }
%struct.upid = type { i32, %struct.pid_namespace*, %struct.hlist_node }
%struct.pid_namespace = type opaque
%struct.prev_cputime = type { i64, i64, %struct.raw_spinlock }
%struct.task_cputime = type { i64, i64, i64 }
%struct.nameidata = type opaque
%struct.sysv_sem = type { %struct.sem_undo_list* }
%struct.sem_undo_list = type opaque
%struct.fs_struct = type opaque
%struct.files_struct = type opaque
%struct.nsproxy = type { %struct.atomic_t, %struct.uts_namespace*, %struct.ipc_namespace*, %struct.mnt_namespace*, %struct.pid_namespace*, %struct.net*, %struct.cgroup_namespace* }
%struct.uts_namespace = type { %struct.raw_spinlock, %struct.new_utsname, %struct.user_namespace*, %struct.ucounts*, %struct.ns_common }
%struct.new_utsname = type { [65 x i8], [65 x i8], [65 x i8], [65 x i8], [65 x i8], [65 x i8] }
%struct.ucounts = type opaque
%struct.ns_common = type { %union.anon.3, %struct.proc_ns_operations*, i32 }
%struct.proc_ns_operations = type opaque
%struct.ipc_namespace = type opaque
%struct.mnt_namespace = type opaque
%struct.net = type opaque
%struct.cgroup_namespace = type opaque
%struct.signal_struct = type opaque
%struct.sighand_struct = type opaque
%struct.sigpending = type { %struct.list_head, %struct.cpumask }
%struct.audit_context = type opaque
%struct.seccomp = type { i32, %struct.seccomp_filter* }
%struct.seccomp_filter = type opaque
%struct.wake_q_node = type { %struct.wake_q_node* }
%struct.rb_root = type { %struct.rb_node* }
%struct.rt_mutex_waiter = type opaque
%struct.bio_list = type opaque
%struct.blk_plug = type opaque
%struct.reclaim_state = type opaque
%struct.io_context = type opaque
%struct.siginfo = type { i32, i32, i32, %union.anon.11 }
%union.anon.11 = type { %struct.anon.15, [80 x i8] }
%struct.anon.15 = type { i32, i32, i32, i64, i64 }
%struct.task_io_accounting = type { i64, i64, i64, i64, i64, i64, i64 }
%struct.cpumask = type { [1 x i64] }
%struct.css_set = type opaque
%struct.robust_list_head = type opaque
%struct.compat_robust_list_head = type opaque
%struct.futex_pi_state = type opaque
%struct.perf_event_context = type opaque
%struct.mempolicy = type opaque
%struct.tlbflush_unmap_batch = type { %struct.cpumask, i8, i8 }
%struct.pipe_inode_info = type opaque
%struct.page_frag = type { %struct.page*, i32, i32 }
%struct.task_delay_info = type opaque
%struct.vm_struct = type opaque
%struct.thread_struct = type { [3 x %struct.desc_struct], i64, i64, i16, i16, i16, i16, i32, i64, i64, [4 x %struct.perf_event*], i64, i64, i64, i64, i64, i64*, i64, i32, %union.anon.3, i8, [15 x i8], %struct.fpu }
%struct.desc_struct = type { %union.anon.21 }
%union.anon.21 = type { %struct.anon.22 }
%struct.anon.22 = type { i32, i32 }
%struct.perf_event = type opaque
%struct.fpu = type { i32, i8, i8, [58 x i8], %union.fpregs_state }
%union.fpregs_state = type { %struct.xregs_state, [3520 x i8] }
%struct.xregs_state = type { %struct.fxregs_state, %struct.xstate_header, [0 x i8] }
%struct.fxregs_state = type { i16, i16, i16, i16, %union.anon.24, i32, i32, [32 x i32], [64 x i32], [12 x i32], %union.anon.27 }
%union.anon.24 = type { %struct.timespec }
%struct.timespec = type { i64, i64 }
%union.anon.27 = type { [12 x i32] }
%struct.xstate_header = type { i64, i64, [6 x i64] }
%struct.xattr_handler = type opaque
%struct.fscrypt_operations = type opaque
%struct.hlist_bl_head = type { %struct.hlist_bl_node* }
%struct.block_device = type { i32, i32, %struct.inode*, %struct.super_block*, %struct.mutex, i8*, i8*, i32, i8, %struct.list_head, %struct.block_device*, i32, %struct.hd_struct*, i32, i32, %struct.gendisk*, %struct.request_queue*, %struct.backing_dev_info*, %struct.list_head, i64, i32, %struct.mutex }
%struct.hd_struct = type opaque
%struct.gendisk = type opaque
%struct.request_queue = type opaque
%struct.backing_dev_info = type opaque
%struct.mtd_info = type opaque
%struct.hlist_node = type { %struct.hlist_node*, %struct.hlist_node** }
%struct.quota_info = type { i32, %struct.mutex, [3 x %struct.inode*], [3 x %struct.mem_dqinfo], [3 x %struct.quota_format_ops*] }
%struct.mem_dqinfo = type { %struct.quota_format_type*, i32, %struct.list_head, i64, i32, i32, i64, i64, i8* }
%struct.quota_format_type = type { i32, %struct.quota_format_ops*, %struct.module*, %struct.quota_format_type* }
%struct.quota_format_ops = type { i32 (%struct.super_block*, i32)*, i32 (%struct.super_block*, i32)*, i32 (%struct.super_block*, i32)*, i32 (%struct.super_block*, i32)*, i32 (%struct.dquot*)*, i32 (%struct.dquot*)*, i32 (%struct.dquot*)*, i32 (%struct.super_block*, %struct.kqid*)* }
%struct.sb_writers = type { i32, %struct.__wait_queue_head, [3 x %struct.percpu_rw_semaphore] }
%struct.percpu_rw_semaphore = type { %struct.rcu_sync, i32*, %struct.rw_semaphore, %struct.rcuwait, i32 }
%struct.rcu_sync = type { i32, i32, %struct.__wait_queue_head, i32, %struct.callback_head, i32 }
%struct.rcuwait = type { %struct.task_struct* }
%struct.shrinker = type { i64 (%struct.shrinker*, %struct.shrink_control*)*, i64 (%struct.shrinker*, %struct.shrink_control*)*, i32, i64, i64, %struct.list_head, %union.anon.3* }
%struct.workqueue_struct = type opaque
%struct.hlist_head = type { %struct.hlist_node* }
%struct.user_namespace = type opaque
%struct.list_lru = type { %struct.list_lru_node* }
%struct.list_lru_node = type { %struct.spinlock, %struct.list_lru_one, [32 x i8] }
%struct.list_lru_one = type { %struct.list_head, i64 }
%struct.work_struct = type { %union.anon.3, %struct.list_head, void (%struct.work_struct*)* }
%union.anon.0 = type { %struct.list_head }
%union.anon.45 = type { %struct.hlist_node }
%struct.inode = type { i16, i16, %struct.atomic_t, %struct.atomic_t, i32, %struct.posix_acl*, %struct.posix_acl*, %struct.inode_operations*, %struct.super_block*, %struct.address_space*, i8*, i64, %struct.atomic_t, i32, i64, %struct.timespec, %struct.timespec, %struct.timespec, %struct.spinlock, i16, i32, i64, i64, %struct.rw_semaphore, i64, i64, %struct.hlist_node, %struct.list_head, %struct.list_head, %struct.list_head, %struct.list_head, %union.anon.2, i64, %struct.atomic_t, %struct.atomic_t, %struct.atomic_t, %struct.file_operations*, %struct.file_lock_context*, %struct.address_space, %struct.list_head, %union.anon.41, i32, i32, %struct.hlist_head, i8* }
%struct.posix_acl = type opaque
%struct.inode_operations = type { %struct.dentry* (%struct.inode*, %struct.dentry*, i32)*, i8* (%struct.dentry*, %struct.inode*, %struct.delayed_call*)*, i32 (%struct.inode*, i32)*, %struct.posix_acl* (%struct.inode*, i32)*, i32 (%struct.dentry*, i8*, i32)*, i32 (%struct.inode*, %struct.dentry*, i16, i1)*, i32 (%struct.dentry*, %struct.inode*, %struct.dentry*)*, i32 (%struct.inode*, %struct.dentry*)*, i32 (%struct.inode*, %struct.dentry*, i8*)*, i32 (%struct.inode*, %struct.dentry*, i16)*, i32 (%struct.inode*, %struct.dentry*)*, i32 (%struct.inode*, %struct.dentry*, i16, i32)*, i32 (%struct.inode*, %struct.dentry*, %struct.inode*, %struct.dentry*, i32)*, i32 (%struct.dentry*, %struct.iattr*)*, i32 (%struct.path*, %struct.kstat*, i32, i32)*, i64 (%struct.dentry*, i8*, i64)*, i32 (%struct.inode*, %struct.fiemap_extent_info*, i64, i64)*, i32 (%struct.inode*, %struct.timespec*, i32)*, i32 (%struct.inode*, %struct.dentry*, %struct.file*, i32, i16, i32*)*, i32 (%struct.inode*, %struct.dentry*, i16)*, i32 (%struct.inode*, %struct.posix_acl*, i32)*, [24 x i8] }
%struct.delayed_call = type { void (i8*)*, i8* }
%struct.iattr = type { i32, i16, %struct.atomic_t, %struct.atomic_t, i64, %struct.timespec, %struct.timespec, %struct.timespec, %struct.file* }
%struct.kstat = type { i32, i16, i32, i32, i64, i64, i64, i32, i32, %struct.atomic_t, %struct.atomic_t, i64, %struct.timespec, %struct.timespec, %struct.timespec, %struct.timespec, i64 }
%struct.fiemap_extent_info = type { i32, i32, i32, %struct.fiemap_extent* }
%struct.fiemap_extent = type { i64, i64, i64, [2 x i64], i32, [3 x i32] }
%struct.file_lock_context = type { %struct.spinlock, %struct.list_head, %struct.list_head, %struct.list_head }
%struct.address_space = type { %struct.inode*, %struct.radix_tree_root, %struct.spinlock, %struct.atomic_t, %struct.rb_root, %struct.rw_semaphore, i64, i64, i64, %struct.address_space_operations*, i64, %struct.spinlock, i32, %struct.list_head, i8* }
%struct.radix_tree_root = type { i32, %struct.radix_tree_node* }
%struct.radix_tree_node = type { i8, i8, i8, i8, %struct.radix_tree_node*, %struct.radix_tree_root*, %union.anon.0, [64 x i8*], [3 x [1 x i64]] }
%struct.address_space_operations = type { i32 (%struct.page*, %struct.writeback_control*)*, i32 (%struct.file*, %struct.page*)*, i32 (%struct.address_space*, %struct.writeback_control*)*, i32 (%struct.page*)*, i32 (%struct.file*, %struct.address_space*, %struct.list_head*, i32)*, i32 (%struct.file*, %struct.address_space*, i64, i32, i32, %struct.page**, i8**)*, i32 (%struct.file*, %struct.address_space*, i64, i32, i32, %struct.page*, i8*)*, i64 (%struct.address_space*, i64)*, void (%struct.page*, i32, i32)*, i32 (%struct.page*, i32)*, void (%struct.page*)*, i64 (%struct.kiocb*, %struct.iov_iter*)*, i32 (%struct.address_space*, %struct.page*, %struct.page*, i32)*, i1 (%struct.page*, i32)*, void (%struct.page*)*, i32 (%struct.page*)*, i32 (%struct.page*, i64, i64)*, void (%struct.page*, i8*, i8*)*, i32 (%struct.address_space*, %struct.page*)*, i32 (%struct.swap_info_struct*, %struct.file*, i64*)*, void (%struct.file*)* }
%struct.kiocb = type { %struct.file*, i64, void (%struct.kiocb*, i64, i64)*, i8*, i32 }
%struct.iov_iter = type opaque
%struct.swap_info_struct = type opaque
%union.anon.41 = type { %struct.pipe_inode_info* }
%struct.file_operations = type { %struct.module*, i64 (%struct.file*, i64, i32)*, i64 (%struct.file*, i8*, i64, i64*)*, i64 (%struct.file*, i8*, i64, i64*)*, i64 (%struct.kiocb*, %struct.iov_iter*)*, i64 (%struct.kiocb*, %struct.iov_iter*)*, i32 (%struct.file*, %struct.dir_context*)*, i32 (%struct.file*, %struct.dir_context*)*, i32 (%struct.file*, %struct.poll_table_struct*)*, i64 (%struct.file*, i32, i64)*, i64 (%struct.file*, i32, i64)*, i32 (%struct.file*, %struct.vm_area_struct*)*, i32 (%struct.inode*, %struct.file*)*, i32 (%struct.file*, i8*)*, i32 (%struct.inode*, %struct.file*)*, i32 (%struct.file*, i64, i64, i32)*, i32 (i32, %struct.file*, i32)*, i32 (%struct.file*, i32, %struct.file_lock*)*, i64 (%struct.file*, %struct.page*, i32, i64, i64*, i32)*, i64 (%struct.file*, i64, i64, i64, i64)*, i32 (i32)*, i32 (%struct.file*, i32, %struct.file_lock*)*, i64 (%struct.pipe_inode_info*, %struct.file*, i64*, i64, i32)*, i64 (%struct.file*, i64*, %struct.pipe_inode_info*, i64, i32)*, i32 (%struct.file*, i64, %struct.file_lock**, i8**)*, i64 (%struct.file*, i32, i64, i64)*, void (%struct.seq_file*, %struct.file*)*, i64 (%struct.file*, i64, %struct.file*, i64, i64, i32)*, i32 (%struct.file*, i64, %struct.file*, i64, i64)*, i64 (%struct.file*, i64, i64, %struct.file*, i64)* }
%struct.dir_context = type { i32 (%struct.dir_context*, i8*, i32, i64, i64, i32)*, i64 }
%struct.poll_table_struct = type { void (%struct.file*, %struct.__wait_queue_head*, %struct.poll_table_struct*)*, i64 }
%struct.file_lock = type { %struct.file_lock*, %struct.list_head, %struct.hlist_node, %struct.list_head, i8*, i32, i8, i32, i32, %struct.pid*, %struct.__wait_queue_head, %struct.file*, i64, i64, %struct.fasync_struct*, i64, i64, %struct.file_lock_operations*, %struct.lock_manager_operations*, %union.anon.39 }
%struct.fasync_struct = type { %struct.spinlock, i32, i32, %struct.fasync_struct*, %struct.file*, %struct.callback_head }
%struct.file_lock_operations = type { void (%struct.file_lock*, %struct.file_lock*)*, void (%struct.file_lock*)* }
%struct.lock_manager_operations = type { i32 (%struct.file_lock*, %struct.file_lock*)*, i64 (%struct.file_lock*)*, i8* (i8*)*, void (i8*)*, void (%struct.file_lock*)*, i32 (%struct.file_lock*, i32)*, i1 (%struct.file_lock*)*, i32 (%struct.file_lock*, i32, %struct.list_head*)*, void (%struct.file_lock*, i8**)* }
%union.anon.39 = type { %struct.nfs_lock_info }
%struct.nfs_lock_info = type { i32, %struct.nlm_lockowner*, %struct.list_head }
%struct.nlm_lockowner = type opaque
%union.anon.3 = type { i64 }
%struct.fown_struct = type { %struct.rwlock_t, %struct.pid*, i32, %struct.atomic_t, %struct.atomic_t, i32 }
%struct.rwlock_t = type { %struct.qrwlock }
%struct.qrwlock = type { %struct.atomic_t, %struct.qspinlock }
%struct.cred = type { %struct.atomic_t, %struct.atomic_t, %struct.atomic_t, %struct.atomic_t, %struct.atomic_t, %struct.atomic_t, %struct.atomic_t, %struct.atomic_t, %struct.atomic_t, i32, %struct.kernel_cap_struct, %struct.kernel_cap_struct, %struct.kernel_cap_struct, %struct.kernel_cap_struct, %struct.kernel_cap_struct, i8, %struct.key*, %struct.key*, %struct.key*, %struct.key*, i8*, %struct.user_struct*, %struct.user_namespace*, %struct.group_info*, %struct.callback_head }
%struct.kernel_cap_struct = type { [2 x i32] }
%struct.key = type { %struct.atomic_t, i32, %union.anon.47, %struct.rw_semaphore, %struct.key_user*, i8*, %union.anon.3, i64, %struct.atomic_t, %struct.atomic_t, i32, i16, i16, i64, %union.anon.49, %union.anon.51, i32 (%struct.key*, %struct.key_type*, %union.key_payload*)* }
%union.anon.47 = type { %struct.rb_node }
%struct.key_user = type opaque
%union.anon.49 = type { %struct.keyring_index_key }
%struct.keyring_index_key = type { %struct.key_type*, i8*, i64 }
%struct.key_type = type opaque
%union.anon.51 = type { %union.key_payload }
%union.key_payload = type { [4 x i8*] }
%struct.user_struct = type { %struct.atomic_t, %struct.atomic_t, %struct.atomic_t, %union.anon.3, i64, i64, i64, %union.anon.3, %struct.key*, %struct.key*, %struct.hlist_node, %struct.atomic_t, %union.anon.3 }
%struct.group_info = type { %struct.atomic_t, i32, [0 x %struct.atomic_t] }
%struct.file_ra_state = type { i64, i32, i32, i32, i32, i64 }
%struct.seq_file = type { i8*, i64, i64, i64, i64, i64, i64, i64, %struct.mutex, %struct.seq_operations*, i32, %struct.file*, i8* }
%struct.seq_operations = type { i8* (%struct.seq_file*, i64*)*, void (%struct.seq_file*, i8*)*, i8* (%struct.seq_file*, i8*, i64*)*, i32 (%struct.seq_file*, i8*)* }
%struct.vm_operations_struct = type { void (%struct.vm_area_struct*)*, void (%struct.vm_area_struct*)*, i32 (%struct.vm_area_struct*)*, i32 (%struct.vm_fault*)*, i32 (%struct.vm_fault*, i32)*, void (%struct.vm_fault*, i64, i64)*, i32 (%struct.vm_fault*)*, i32 (%struct.vm_fault*)*, i32 (%struct.vm_area_struct*, i64, i8*, i32, i32)*, i8* (%struct.vm_area_struct*)*, i32 (%struct.vm_area_struct*, %struct.mempolicy*)*, %struct.mempolicy* (%struct.vm_area_struct*, i64)*, %struct.page* (%struct.vm_area_struct*, i64)* }
%struct.vm_fault = type { %struct.vm_area_struct*, i32, i32, i64, i64, %union.anon.3*, %union.anon.3*, %union.anon.3, %struct.page*, %struct.mem_cgroup*, %struct.page*, %union.anon.3*, %struct.spinlock*, %struct.page* }
%struct.kernfs_open_node = type opaque
%struct.kernfs_iattrs = type opaque
%struct.raw_spinlock = type { %struct.qspinlock }
%struct.module_param_attrs = type opaque
%struct.module_attribute = type { %struct.attribute, i64 (%struct.module_attribute*, %struct.module_kobject*, i8*)*, i64 (%struct.module_attribute*, %struct.module_kobject*, i8*, i64)*, void (%struct.module*, i8*)*, i32 (%struct.module*)*, void (%struct.module*)* }
%struct.mutex = type { %union.anon.3, %struct.spinlock, %struct.qspinlock, %struct.list_head }
%struct.exception_table_entry = type { i32, i32, i32 }
%struct.module_layout = type { i8*, i32, i32, i32, i32, %struct.mod_tree_node }
%struct.mod_tree_node = type { %struct.module*, %struct.latch_tree_node }
%struct.latch_tree_node = type { [2 x %struct.rb_node] }
%struct.lock_class_key = type {}
%struct.bug_entry = type { i32, i32, i16, i16 }
%struct.mod_kallsyms = type { %struct.elf64_sym*, i32, i8* }
%struct.elf64_sym = type { i32, i8, i8, i16, i64, i64 }
%struct.module_sect_attrs = type opaque
%struct.module_notes_attrs = type opaque
%struct.tracepoint = type { i8*, %struct.qspinlock, i32 ()*, void ()*, %struct.tracepoint_func* }
%struct.tracepoint_func = type { i8*, i8*, i32 }
%struct.trace_event_call = type opaque
%struct.trace_enum_map = type opaque
%struct.list_head = type { %struct.list_head*, %struct.list_head* }
%struct.atomic_t = type { i32 }
%struct.kernel_param_ops = type { i32, i32 (i8*, %struct.kernel_param*)*, i32 (i8*, %struct.kernel_param*)*, void (i8*)* }
%union.anon.46 = type { i8* }
%struct.snd_minor = type { i32, i32, i32, %struct.file_operations*, i8*, %struct.device*, %struct.snd_card* }
%struct.device = type { %struct.device*, %struct.device_private*, %struct.kobject, i8*, %struct.device_type*, %struct.mutex, %struct.bus_type*, %struct.device_driver*, i8*, i8*, %struct.dev_links_info, %struct.dev_pm_info, %struct.dev_pm_domain*, %struct.irq_domain*, %struct.list_head, i32, %struct.dma_map_ops*, i64*, i64, i64, %struct.device_dma_parameters*, %struct.list_head, %struct.dma_coherent_mem*, %union.anon.46, %struct.device_node*, %struct.fwnode_handle*, i32, i32, %struct.spinlock, %struct.list_head, %struct.klist_node, %struct.class*, %struct.attribute_group**, void (%struct.device*)*, %struct.iommu_group*, %struct.iommu_fwspec*, i8 }
%struct.device_private = type opaque
%struct.device_type = type { i8*, %struct.attribute_group**, i32 (%struct.device*, %struct.kobj_uevent_env*)*, i8* (%struct.device*, i16*, %struct.atomic_t*, %struct.atomic_t*)*, void (%struct.device*)*, %struct.dev_pm_ops* }
%struct.dev_pm_ops = type { i32 (%struct.device*)*, void (%struct.device*)*, i32 (%struct.device*)*, i32 (%struct.device*)*, i32 (%struct.device*)*, i32 (%struct.device*)*, i32 (%struct.device*)*, i32 (%struct.device*)*, i32 (%struct.device*)*, i32 (%struct.device*)*, i32 (%struct.device*)*, i32 (%struct.device*)*, i32 (%struct.device*)*, i32 (%struct.device*)*, i32 (%struct.device*)*, i32 (%struct.device*)*, i32 (%struct.device*)*, i32 (%struct.device*)*, i32 (%struct.device*)*, i32 (%struct.device*)*, i32 (%struct.device*)*, i32 (%struct.device*)*, i32 (%struct.device*)* }
%struct.bus_type = type { i8*, i8*, %struct.device*, %struct.device_attribute*, %struct.attribute_group**, %struct.attribute_group**, %struct.attribute_group**, i32 (%struct.device*, %struct.device_driver*)*, i32 (%struct.device*, %struct.kobj_uevent_env*)*, i32 (%struct.device*)*, i32 (%struct.device*)*, void (%struct.device*)*, i32 (%struct.device*)*, i32 (%struct.device*)*, i32 (%struct.device*, i32)*, i32 (%struct.device*)*, i32 (%struct.device*)*, %struct.dev_pm_ops*, %struct.iommu_ops*, %struct.subsys_private*, %struct.lock_class_key }
%struct.device_attribute = type { %struct.attribute, i64 (%struct.device*, %struct.device_attribute*, i8*)*, i64 (%struct.device*, %struct.device_attribute*, i8*, i64)* }
%struct.iommu_ops = type opaque
%struct.subsys_private = type opaque
%struct.device_driver = type { i8*, %struct.bus_type*, %struct.module*, i8*, i8, i32, %struct.of_device_id*, %struct.acpi_device_id*, i32 (%struct.device*)*, i32 (%struct.device*)*, void (%struct.device*)*, i32 (%struct.device*, i32)*, i32 (%struct.device*)*, %struct.attribute_group**, %struct.dev_pm_ops*, %struct.driver_private* }
%struct.of_device_id = type opaque
%struct.acpi_device_id = type opaque
%struct.driver_private = type opaque
%struct.dev_links_info = type { %struct.list_head, %struct.list_head, i32 }
%struct.dev_pm_info = type { %struct.atomic_t, i16, %struct.spinlock, %struct.list_head, %struct.completion, %struct.wakeup_source*, i8, %struct.timer_list, i64, %struct.work_struct, %struct.__wait_queue_head, %struct.wake_irq*, %struct.atomic_t, %struct.atomic_t, i16, i32, i32, i32, i32, i32, i64, i64, i64, i64, %struct.pm_subsys_data*, void (%struct.device*, i32)*, %struct.dev_pm_qos* }
%struct.wakeup_source = type { i8*, %struct.list_head, %struct.spinlock, %struct.wake_irq*, %struct.timer_list, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i8 }
%struct.timer_list = type { %struct.hlist_node, i64, void (i64)*, i64, i32 }
%struct.wake_irq = type opaque
%struct.pm_subsys_data = type { %struct.spinlock, i32, %struct.list_head }
%struct.dev_pm_qos = type opaque
%struct.dev_pm_domain = type { %struct.dev_pm_ops, void (%struct.device*, i1)*, i32 (%struct.device*)*, void (%struct.device*)*, void (%struct.device*)* }
%struct.irq_domain = type opaque
%struct.dma_map_ops = type opaque
%struct.device_dma_parameters = type { i32, i64 }
%struct.dma_coherent_mem = type opaque
%struct.device_node = type opaque
%struct.fwnode_handle = type opaque
%struct.klist_node = type { i8*, %struct.list_head, %struct.raw_spinlock }
%struct.class = type { i8*, %struct.module*, %struct.class_attribute*, %struct.attribute_group**, %struct.attribute_group**, %struct.kobject*, i32 (%struct.device*, %struct.kobj_uevent_env*)*, i8* (%struct.device*, i16*)*, void (%struct.class*)*, void (%struct.device*)*, i32 (%struct.device*, i32)*, i32 (%struct.device*)*, %struct.kobj_ns_type_operations*, i8* (%struct.device*)*, %struct.dev_pm_ops*, %struct.subsys_private* }
%struct.class_attribute = type { %struct.attribute, i64 (%struct.class*, %struct.class_attribute*, i8*)*, i64 (%struct.class*, %struct.class_attribute*, i8*, i64)* }
%struct.attribute_group = type { i8*, i16 (%struct.kobject*, %struct.attribute*, i32)*, i16 (%struct.kobject*, %struct.bin_attribute*, i32)*, %struct.attribute**, %struct.bin_attribute** }
%struct.bin_attribute = type { %struct.attribute, i64, i8*, i64 (%struct.file*, %struct.kobject*, %struct.bin_attribute*, i8*, i64, i64)*, i64 (%struct.file*, %struct.kobject*, %struct.bin_attribute*, i8*, i64, i64)*, i32 (%struct.file*, %struct.kobject*, %struct.bin_attribute*, %struct.vm_area_struct*)* }
%struct.iommu_group = type opaque
%struct.iommu_fwspec = type opaque
%struct.snd_card = type { i32, [16 x i8], [16 x i8], [32 x i8], [80 x i8], [32 x i8], [80 x i8], [128 x i8], %struct.module*, i8*, void (%struct.snd_card*)*, %struct.list_head, %struct.device, i32, %struct.rw_semaphore, %struct.rwlock_t, i32, i32, %struct.list_head, %struct.list_head, %struct.mutex, %struct.snd_info_entry*, %struct.snd_info_entry*, %struct.proc_dir_entry*, %struct.list_head, %struct.snd_shutdown_f_ops*, %struct.spinlock, i32, %struct.completion*, %struct.device*, %struct.device, [4 x %struct.attribute_group*], i8, i32, %struct.mutex, %struct.__wait_queue_head, %struct.snd_mixer_oss*, i32 }
%struct.snd_info_entry = type { i8*, i16, i64, i16, %union.anon.53, %struct.snd_info_entry*, %struct.snd_card*, %struct.module*, i8*, void (%struct.snd_info_entry*)*, %struct.proc_dir_entry*, %struct.mutex, %struct.list_head, %struct.list_head }
%union.anon.53 = type { %struct.snd_info_entry_text }
%struct.snd_info_entry_text = type { void (%struct.snd_info_entry*, %struct.snd_info_buffer*)*, void (%struct.snd_info_entry*, %struct.snd_info_buffer*)* }
%struct.snd_info_buffer = type { i8*, i32, i32, i32, i32, i32 }
%struct.proc_dir_entry = type opaque
%struct.snd_shutdown_f_ops = type opaque
%struct.snd_mixer_oss = type opaque
%struct.snd_info_private_data = type { %struct.snd_info_buffer*, %struct.snd_info_buffer*, %struct.snd_info_entry*, i8* }
%struct.snd_info_entry_ops = type { i32 (%struct.snd_info_entry*, i16, i8**)*, i32 (%struct.snd_info_entry*, i16, i8*)*, i64 (%struct.snd_info_entry*, i8*, %struct.file*, i8*, i64, i64)*, i64 (%struct.snd_info_entry*, i8*, %struct.file*, i8*, i64, i64)*, i64 (%struct.snd_info_entry*, i8*, %struct.file*, i64, i32)*, i32 (%struct.snd_info_entry*, i8*, %struct.file*, %struct.poll_table_struct*)*, i32 (%struct.snd_info_entry*, i8*, %struct.file*, i32, i64)*, i32 (%struct.snd_info_entry*, i8*, %struct.inode*, %struct.file*, %struct.vm_area_struct*)* }
%union.anon.56 = type { %struct.list_head* }

@snd_major = common global i32 0, align 4
@snd_ecards_limit = common global i32 0, align 4
@llvm.used = appending global [19 x i8*] [i8* bitcast (%struct.kernel_symbol* @__ksymtab_snd_major to i8*), i8* bitcast (%struct.kernel_param* @__param_major to i8*), i8* bitcast (%struct.kernel_param* @__param_cards_limit to i8*), i8* bitcast (%struct.kernel_symbol* @__ksymtab_snd_ecards_limit to i8*), i8* bitcast (%struct.kernel_symbol* @__ksymtab_snd_request_card to i8*), i8* bitcast (%struct.kernel_symbol* @__ksymtab_snd_lookup_minor_data to i8*), i8* bitcast (%struct.kernel_symbol* @__ksymtab_snd_register_device to i8*), i8* bitcast (%struct.kernel_symbol* @__ksymtab_snd_unregister_device to i8*), i8* bitcast (void ()* @alsa_sound_exit to i8*), i8* bitcast (i32 ()** @__initcall_alsa_sound_init4 to i8*), i8* bitcast (void ()** @__exitcall_alsa_sound_exit to i8*), i8* bitcast (%struct.kernel_symbol* @__ksymtab_snd_seq_root to i8*), i8* bitcast (i32 ()* @snd_info_done to i8*), i8* bitcast (%struct.kernel_symbol* @__ksymtab_snd_info_get_line to i8*), i8* bitcast (%struct.kernel_symbol* @__ksymtab_snd_info_get_str to i8*), i8* bitcast (%struct.kernel_symbol* @__ksymtab_snd_info_create_module_entry to i8*), i8* bitcast (%struct.kernel_symbol* @__ksymtab_snd_info_create_card_entry to i8*), i8* bitcast (%struct.kernel_symbol* @__ksymtab_snd_info_free_entry to i8*), i8* bitcast (%struct.kernel_symbol* @__ksymtab_snd_info_register to i8*)], section "llvm.metadata"
@__ksymtab_snd_major = internal constant %struct.kernel_symbol { i64 ptrtoint (i32* @snd_major to i64), i8* getelementptr inbounds ([10 x i8], [10 x i8]* @__kstrtab_snd_major, i32 0, i32 0) }, section "___ksymtab+snd_major", align 8
@__param_major = internal constant %struct.kernel_param { i8* getelementptr inbounds ([10 x i8], [10 x i8]* @__param_str_major, i32 0, i32 0), %struct.module* null, %struct.kernel_param_ops* @param_ops_int, i16 292, i8 -1, i8 0, %union.anon.46 { i8* bitcast (i32* @major to i8*) } }, section "__param", align 8
@__param_cards_limit = internal constant %struct.kernel_param { i8* getelementptr inbounds ([16 x i8], [16 x i8]* @__param_str_cards_limit, i32 0, i32 0), %struct.module* null, %struct.kernel_param_ops* @param_ops_int, i16 292, i8 -1, i8 0, %union.anon.46 { i8* bitcast (i32* @cards_limit to i8*) } }, section "__param", align 8
@__ksymtab_snd_ecards_limit = internal constant %struct.kernel_symbol { i64 ptrtoint (i32* @snd_ecards_limit to i64), i8* getelementptr inbounds ([17 x i8], [17 x i8]* @__kstrtab_snd_ecards_limit, i32 0, i32 0) }, section "___ksymtab+snd_ecards_limit", align 8
@__ksymtab_snd_request_card = internal constant %struct.kernel_symbol { i64 ptrtoint (void (i32)* @snd_request_card to i64), i8* getelementptr inbounds ([17 x i8], [17 x i8]* @__kstrtab_snd_request_card, i32 0, i32 0) }, section "___ksymtab+snd_request_card", align 8
@__ksymtab_snd_lookup_minor_data = internal constant %struct.kernel_symbol { i64 ptrtoint (i8* (i32, i32)* @snd_lookup_minor_data to i64), i8* getelementptr inbounds ([22 x i8], [22 x i8]* @__kstrtab_snd_lookup_minor_data, i32 0, i32 0) }, section "___ksymtab+snd_lookup_minor_data", align 8
@__ksymtab_snd_register_device = internal constant %struct.kernel_symbol { i64 ptrtoint (i32 (i32, %struct.snd_card*, i32, %struct.file_operations*, i8*, %struct.device*)* @snd_register_device to i64), i8* getelementptr inbounds ([20 x i8], [20 x i8]* @__kstrtab_snd_register_device, i32 0, i32 0) }, section "___ksymtab+snd_register_device", align 8
@__ksymtab_snd_unregister_device = internal constant %struct.kernel_symbol { i64 ptrtoint (i32 (%struct.device*)* @snd_unregister_device to i64), i8* getelementptr inbounds ([22 x i8], [22 x i8]* @__kstrtab_snd_unregister_device, i32 0, i32 0) }, section "___ksymtab+snd_unregister_device", align 8
@__initcall_alsa_sound_init4 = internal global i32 ()* @alsa_sound_init, section ".initcall4.init", align 8
@__exitcall_alsa_sound_exit = internal global void ()* @alsa_sound_exit, section ".exitcall.exit", align 8
@major = internal global i32 116, align 4
@cards_limit = internal global i32 1, align 4
@.str.2 = private unnamed_addr constant [5 x i8] c"alsa\00", align 1
@snd_fops = internal constant %struct.file_operations { %struct.module* null, i64 (%struct.file*, i64, i32)* @noop_llseek, i64 (%struct.file*, i8*, i64, i64*)* null, i64 (%struct.file*, i8*, i64, i64*)* null, i64 (%struct.kiocb*, %struct.iov_iter*)* null, i64 (%struct.kiocb*, %struct.iov_iter*)* null, i32 (%struct.file*, %struct.dir_context*)* null, i32 (%struct.file*, %struct.dir_context*)* null, i32 (%struct.file*, %struct.poll_table_struct*)* null, i64 (%struct.file*, i32, i64)* null, i64 (%struct.file*, i32, i64)* null, i32 (%struct.file*, %struct.vm_area_struct*)* null, i32 (%struct.inode*, %struct.file*)* @snd_open, i32 (%struct.file*, i8*)* null, i32 (%struct.inode*, %struct.file*)* null, i32 (%struct.file*, i64, i64, i32)* null, i32 (i32, %struct.file*, i32)* null, i32 (%struct.file*, i32, %struct.file_lock*)* null, i64 (%struct.file*, %struct.page*, i32, i64, i64*, i32)* null, i64 (%struct.file*, i64, i64, i64, i64)* null, i32 (i32)* null, i32 (%struct.file*, i32, %struct.file_lock*)* null, i64 (%struct.pipe_inode_info*, %struct.file*, i64*, i64, i32)* null, i64 (%struct.file*, i64*, %struct.pipe_inode_info*, i64, i32)* null, i32 (%struct.file*, i64, %struct.file_lock**, i8**)* null, i64 (%struct.file*, i32, i64, i64)* null, void (%struct.seq_file*, %struct.file*)* null, i64 (%struct.file*, i64, %struct.file*, i64, i64, i32)* null, i32 (%struct.file*, i64, %struct.file*, i64, i64)* null, i64 (%struct.file*, i64, i64, %struct.file*, i64)* null }, align 8
@.str.14 = private unnamed_addr constant [63 x i8] c"\013ALSA core: unable to register native major device number %d\0A\00", align 1
@.str.15 = private unnamed_addr constant [57 x i8] c"\016Advanced Linux Sound Architecture Driver Initialized.\0A\00", align 1
@sound_mutex = internal global %struct.mutex { %union.anon.3 zeroinitializer, %struct.spinlock zeroinitializer, %struct.qspinlock zeroinitializer, %struct.list_head { %struct.list_head* bitcast (i8* getelementptr (i8, i8* bitcast (%struct.mutex* @sound_mutex to i8*), i64 16) to %struct.list_head*), %struct.list_head* bitcast (i8* getelementptr (i8, i8* bitcast (%struct.mutex* @sound_mutex to i8*), i64 16) to %struct.list_head*) } }, align 8
@snd_minors = internal global [256 x %struct.snd_minor*] zeroinitializer, align 16
@.str.16 = private unnamed_addr constant [19 x i8] c"sound/core/sound.c\00", align 1
@snd_cards = external global [8 x %struct.snd_card*], align 16
@.str.18 = private unnamed_addr constant [10 x i8] c"snd-timer\00", align 1
@.str.17 = private unnamed_addr constant [8 x i8] c"snd-seq\00", align 1
@.str = private unnamed_addr constant [12 x i8] c"snd-card-%i\00", align 1
@__kstrtab_snd_unregister_device = internal constant [22 x i8] c"snd_unregister_device\00", section "__ksymtab_strings", align 1
@__kstrtab_snd_register_device = internal constant [20 x i8] c"snd_register_device\00", section "__ksymtab_strings", align 1
@__kstrtab_snd_lookup_minor_data = internal constant [22 x i8] c"snd_lookup_minor_data\00", section "__ksymtab_strings", align 1
@__kstrtab_snd_request_card = internal constant [17 x i8] c"snd_request_card\00", section "__ksymtab_strings", align 1
@__kstrtab_snd_ecards_limit = internal constant [17 x i8] c"snd_ecards_limit\00", section "__ksymtab_strings", align 1
@__param_str_cards_limit = internal constant [16 x i8] c"snd.cards_limit\00", align 16
@param_ops_int = external constant %struct.kernel_param_ops, align 8
@__param_str_major = internal constant [10 x i8] c"snd.major\00", align 1
@__kstrtab_snd_major = internal constant [10 x i8] c"snd_major\00", section "__ksymtab_strings", align 1
@.str.3 = private unnamed_addr constant [20 x i8] c"%3i: [%2i-%2i]: %s\0A\00", align 1
@.str.4 = private unnamed_addr constant [19 x i8] c"%3i: [%2i]   : %s\0A\00", align 1
@.str.5 = private unnamed_addr constant [18 x i8] c"%3i:        : %s\0A\00", align 1
@.str.13 = private unnamed_addr constant [2 x i8] c"?\00", align 1
@.str.12 = private unnamed_addr constant [6 x i8] c"timer\00", align 1
@.str.11 = private unnamed_addr constant [10 x i8] c"sequencer\00", align 1
@.str.10 = private unnamed_addr constant [22 x i8] c"digital audio capture\00", align 1
@.str.9 = private unnamed_addr constant [23 x i8] c"digital audio playback\00", align 1
@.str.8 = private unnamed_addr constant [9 x i8] c"raw midi\00", align 1
@.str.7 = private unnamed_addr constant [19 x i8] c"hardware dependent\00", align 1
@.str.6 = private unnamed_addr constant [8 x i8] c"control\00", align 1
@snd_seq_root = common global %struct.snd_info_entry* null, align 8
@snd_oss_root = common global %struct.snd_info_entry* null, align 8
@__ksymtab_snd_seq_root = internal constant %struct.kernel_symbol { i64 ptrtoint (%struct.snd_info_entry** @snd_seq_root to i64), i8* getelementptr inbounds ([13 x i8], [13 x i8]* @__kstrtab_snd_seq_root, i32 0, i32 0) }, section "___ksymtab+snd_seq_root", align 8
@__ksymtab_snd_info_get_line = internal constant %struct.kernel_symbol { i64 ptrtoint (i32 (%struct.snd_info_buffer*, i8*, i32)* @snd_info_get_line to i64), i8* getelementptr inbounds ([18 x i8], [18 x i8]* @__kstrtab_snd_info_get_line, i32 0, i32 0) }, section "___ksymtab+snd_info_get_line", align 8
@__ksymtab_snd_info_get_str = internal constant %struct.kernel_symbol { i64 ptrtoint (i8* (i8*, i8*, i32)* @snd_info_get_str to i64), i8* getelementptr inbounds ([17 x i8], [17 x i8]* @__kstrtab_snd_info_get_str, i32 0, i32 0) }, section "___ksymtab+snd_info_get_str", align 8
@__ksymtab_snd_info_create_module_entry = internal constant %struct.kernel_symbol { i64 ptrtoint (%struct.snd_info_entry* (%struct.module*, i8*, %struct.snd_info_entry*)* @snd_info_create_module_entry to i64), i8* getelementptr inbounds ([29 x i8], [29 x i8]* @__kstrtab_snd_info_create_module_entry, i32 0, i32 0) }, section "___ksymtab+snd_info_create_module_entry", align 8
@__ksymtab_snd_info_create_card_entry = internal constant %struct.kernel_symbol { i64 ptrtoint (%struct.snd_info_entry* (%struct.snd_card*, i8*, %struct.snd_info_entry*)* @snd_info_create_card_entry to i64), i8* getelementptr inbounds ([27 x i8], [27 x i8]* @__kstrtab_snd_info_create_card_entry, i32 0, i32 0) }, section "___ksymtab+snd_info_create_card_entry", align 8
@__ksymtab_snd_info_free_entry = internal constant %struct.kernel_symbol { i64 ptrtoint (void (%struct.snd_info_entry*)* @snd_info_free_entry to i64), i8* getelementptr inbounds ([20 x i8], [20 x i8]* @__kstrtab_snd_info_free_entry, i32 0, i32 0) }, section "___ksymtab+snd_info_free_entry", align 8
@__ksymtab_snd_info_register = internal constant %struct.kernel_symbol { i64 ptrtoint (i32 (%struct.snd_info_entry*)* @snd_info_register to i64), i8* getelementptr inbounds ([18 x i8], [18 x i8]* @__kstrtab_snd_info_register, i32 0, i32 0) }, section "___ksymtab+snd_info_register", align 8
@__kstrtab_snd_info_register = internal constant [18 x i8] c"snd_info_register\00", section "__ksymtab_strings", align 1
@snd_proc_root = internal global %struct.snd_info_entry* null, align 8
@info_mutex = internal global %struct.mutex { %union.anon.3 zeroinitializer, %struct.spinlock zeroinitializer, %struct.qspinlock zeroinitializer, %struct.list_head { %struct.list_head* bitcast (i8* getelementptr (i8, i8* bitcast (%struct.mutex* @info_mutex to i8*), i64 16) to %struct.list_head*), %struct.list_head* bitcast (i8* getelementptr (i8, i8* bitcast (%struct.mutex* @info_mutex to i8*), i64 16) to %struct.list_head*) } }, align 8
@snd_info_entry_operations = internal constant %struct.file_operations { %struct.module* null, i64 (%struct.file*, i64, i32)* @snd_info_entry_llseek, i64 (%struct.file*, i8*, i64, i64*)* @snd_info_entry_read, i64 (%struct.file*, i8*, i64, i64*)* @snd_info_entry_write, i64 (%struct.kiocb*, %struct.iov_iter*)* null, i64 (%struct.kiocb*, %struct.iov_iter*)* null, i32 (%struct.file*, %struct.dir_context*)* null, i32 (%struct.file*, %struct.dir_context*)* null, i32 (%struct.file*, %struct.poll_table_struct*)* @snd_info_entry_poll, i64 (%struct.file*, i32, i64)* @snd_info_entry_ioctl, i64 (%struct.file*, i32, i64)* null, i32 (%struct.file*, %struct.vm_area_struct*)* @snd_info_entry_mmap, i32 (%struct.inode*, %struct.file*)* @snd_info_entry_open, i32 (%struct.file*, i8*)* null, i32 (%struct.inode*, %struct.file*)* @snd_info_entry_release, i32 (%struct.file*, i64, i64, i32)* null, i32 (i32, %struct.file*, i32)* null, i32 (%struct.file*, i32, %struct.file_lock*)* null, i64 (%struct.file*, %struct.page*, i32, i64, i64*, i32)* null, i64 (%struct.file*, i64, i64, i64, i64)* null, i32 (i32)* null, i32 (%struct.file*, i32, %struct.file_lock*)* null, i64 (%struct.pipe_inode_info*, %struct.file*, i64*, i64, i32)* null, i64 (%struct.file*, i64*, %struct.pipe_inode_info*, i64, i32)* null, i32 (%struct.file*, i64, %struct.file_lock**, i8**)* null, i64 (%struct.file*, i32, i64, i64)* null, void (%struct.seq_file*, %struct.file*)* null, i64 (%struct.file*, i64, %struct.file*, i64, i64, i32)* null, i32 (%struct.file*, i64, %struct.file*, i64, i64)* null, i64 (%struct.file*, i64, i64, %struct.file*, i64)* null }, align 8
@snd_info_text_entry_ops = internal constant %struct.file_operations { %struct.module* null, i64 (%struct.file*, i64, i32)* @seq_lseek, i64 (%struct.file*, i8*, i64, i64*)* @seq_read, i64 (%struct.file*, i8*, i64, i64*)* @snd_info_text_entry_write, i64 (%struct.kiocb*, %struct.iov_iter*)* null, i64 (%struct.kiocb*, %struct.iov_iter*)* null, i32 (%struct.file*, %struct.dir_context*)* null, i32 (%struct.file*, %struct.dir_context*)* null, i32 (%struct.file*, %struct.poll_table_struct*)* null, i64 (%struct.file*, i32, i64)* null, i64 (%struct.file*, i32, i64)* null, i32 (%struct.file*, %struct.vm_area_struct*)* null, i32 (%struct.inode*, %struct.file*)* @snd_info_text_entry_open, i32 (%struct.file*, i8*)* null, i32 (%struct.inode*, %struct.file*)* @snd_info_text_entry_release, i32 (%struct.file*, i64, i64, i32)* null, i32 (i32, %struct.file*, i32)* null, i32 (%struct.file*, i32, %struct.file_lock*)* null, i64 (%struct.file*, %struct.page*, i32, i64, i64*, i32)* null, i64 (%struct.file*, i64, i64, i64, i64)* null, i32 (i32)* null, i32 (%struct.file*, i32, %struct.file_lock*)* null, i64 (%struct.pipe_inode_info*, %struct.file*, i64*, i64, i32)* null, i64 (%struct.file*, i64*, %struct.pipe_inode_info*, i64, i32)* null, i32 (%struct.file*, i64, %struct.file_lock**, i8**)* null, i64 (%struct.file*, i32, i64, i64)* null, void (%struct.seq_file*, %struct.file*)* null, i64 (%struct.file*, i64, %struct.file*, i64, i64, i32)* null, i32 (%struct.file*, i64, %struct.file*, i64, i64)* null, i64 (%struct.file*, i64, i64, %struct.file*, i64)* null }, align 8
@.str.15.7 = private unnamed_addr constant [33 x i8] c"./arch/x86/include/asm/uaccess.h\00", align 1
@.str.16.8 = private unnamed_addr constant [38 x i8] c"Buffer overflow detected (%d < %lu)!\0A\00", align 1
@__kstrtab_snd_info_free_entry = internal constant [20 x i8] c"snd_info_free_entry\00", section "__ksymtab_strings", align 1
@__kstrtab_snd_info_create_card_entry = internal constant [27 x i8] c"snd_info_create_card_entry\00", section "__ksymtab_strings", align 1
@.str.14.9 = private unnamed_addr constant [15 x i8] c"&entry->access\00", align 1
@snd_info_create_entry.__key = internal global %struct.lock_class_key zeroinitializer, align 1
@__kstrtab_snd_info_create_module_entry = internal constant [29 x i8] c"snd_info_create_module_entry\00", section "__ksymtab_strings", align 1
@__kstrtab_snd_info_get_str = internal constant [17 x i8] c"snd_info_get_str\00", section "__ksymtab_strings", align 1
@__kstrtab_snd_info_get_line = internal constant [18 x i8] c"snd_info_get_line\00", section "__ksymtab_strings", align 1
@__kstrtab_snd_seq_root = internal constant [13 x i8] c"snd_seq_root\00", section "__ksymtab_strings", align 1
@snd_info_check_reserved_words.reserved = internal global [12 x i8*] [i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.19, i32 0, i32 0), i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.1.20, i32 0, i32 0), i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.2.21, i32 0, i32 0), i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.3.22, i32 0, i32 0), i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.4.23, i32 0, i32 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.5.24, i32 0, i32 0), i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.6.25, i32 0, i32 0), i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.7.26, i32 0, i32 0), i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.8.27, i32 0, i32 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.9.28, i32 0, i32 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.10.29, i32 0, i32 0), i8* null], align 16
@.str.11.12 = private unnamed_addr constant [5 x i8] c"card\00", align 1
@.str.19 = private unnamed_addr constant [8 x i8] c"version\00", align 1
@.str.1.20 = private unnamed_addr constant [8 x i8] c"meminfo\00", align 1
@.str.2.21 = private unnamed_addr constant [9 x i8] c"memdebug\00", align 1
@.str.3.22 = private unnamed_addr constant [7 x i8] c"detect\00", align 1
@.str.4.23 = private unnamed_addr constant [8 x i8] c"devices\00", align 1
@.str.5.24 = private unnamed_addr constant [4 x i8] c"oss\00", align 1
@.str.6.25 = private unnamed_addr constant [6 x i8] c"cards\00", align 1
@.str.7.26 = private unnamed_addr constant [7 x i8] c"timers\00", align 1
@.str.8.27 = private unnamed_addr constant [6 x i8] c"synth\00", align 1
@.str.9.28 = private unnamed_addr constant [4 x i8] c"pcm\00", align 1
@.str.10.29 = private unnamed_addr constant [4 x i8] c"seq\00", align 1
@.str.12.32 = private unnamed_addr constant [7 x i8] c"asound\00", align 1
@.str.17.33 = private unnamed_addr constant [55 x i8] c"Advanced Linux Sound Architecture Driver Version k%s.\0A\00", align 1
@init_uts_ns = external global %struct.uts_namespace, align 8
@.str.13.34 = private unnamed_addr constant [7 x i8] c"card%i\00", align 1

; Function Attrs: nounwind uwtable
define internal void @alsa_sound_exit() #0 section ".exit.text" {
entry:
  %call = call i32 @snd_info_done()
  %0 = load i32, i32* @major, align 4, !tbaa !2
  call void @unregister_chrdev(i32 %0, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.2, i32 0, i32 0))
  ret void
}

; Function Attrs: nounwind uwtable
define internal i32 @alsa_sound_init() #0 section ".init.text" {
entry:
  %0 = load i32, i32* @major, align 4, !tbaa !2
  store i32 %0, i32* @snd_major, align 4, !tbaa !2
  %1 = load i32, i32* @cards_limit, align 4, !tbaa !2
  store i32 %1, i32* @snd_ecards_limit, align 4, !tbaa !2
  %2 = load i32, i32* @major, align 4, !tbaa !2
  %call = call i32 @register_chrdev(i32 %2, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.2, i32 0, i32 0), %struct.file_operations* @snd_fops)
  %tobool = icmp ne i32 %call, 0
  br i1 %tobool, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %3 = load i32, i32* @major, align 4, !tbaa !2
  %call1 = call i32 (i8*, ...) @printk(i8* getelementptr inbounds ([63 x i8], [63 x i8]* @.str.14, i32 0, i32 0), i32 %3)
  br label %return

if.end:                                           ; preds = %entry
  %call2 = call i32 @snd_info_init()
  %cmp = icmp slt i32 %call2, 0
  br i1 %cmp, label %if.then3, label %if.end4

if.then3:                                         ; preds = %if.end
  %4 = load i32, i32* @major, align 4, !tbaa !2
  call void @unregister_chrdev(i32 %4, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.2, i32 0, i32 0))
  br label %return

if.end4:                                          ; preds = %if.end
  %call5 = call i32 (i8*, ...) @printk(i8* getelementptr inbounds ([57 x i8], [57 x i8]* @.str.15, i32 0, i32 0))
  br label %return

return:                                           ; preds = %if.end4, %if.then3, %if.then
  %retval.0 = phi i32 [ -5, %if.then ], [ -12, %if.then3 ], [ 0, %if.end4 ]
  ret i32 %retval.0
}

; Function Attrs: inlinehint nounwind uwtable
define internal i32 @register_chrdev(i32 %major, i8* %name, %struct.file_operations* %fops) #1 {
entry:
  %call = call i32 @__register_chrdev(i32 %major, i32 0, i32 256, i8* %name, %struct.file_operations* %fops)
  ret i32 %call
}

declare i32 @printk(i8*, ...) #2

; Function Attrs: inlinehint nounwind uwtable
define internal void @unregister_chrdev(i32 %major, i8* %name) #1 {
entry:
  call void @__unregister_chrdev(i32 %major, i32 0, i32 256, i8* %name)
  ret void
}

declare void @__unregister_chrdev(i32, i32, i32, i8*) #2

declare i32 @__register_chrdev(i32, i32, i32, i8*, %struct.file_operations*) #2

declare i64 @noop_llseek(%struct.file*, i64, i32) #2

; Function Attrs: nounwind uwtable
define internal i32 @snd_open(%struct.inode* %inode, %struct.file* %file) #0 {
entry:
  %call = call i32 @iminor(%struct.inode* %inode)
  %conv = zext i32 %call to i64
  %cmp = icmp uge i64 %conv, 256
  br i1 %cmp, label %cleanup, label %if.end

if.end:                                           ; preds = %entry
  call void @mutex_lock(%struct.mutex* @sound_mutex)
  %idxprom = zext i32 %call to i64
  %arrayidx = getelementptr inbounds [256 x %struct.snd_minor*], [256 x %struct.snd_minor*]* @snd_minors, i64 0, i64 %idxprom
  %0 = load %struct.snd_minor*, %struct.snd_minor** %arrayidx, align 8, !tbaa !6
  %cmp2 = icmp eq %struct.snd_minor* %0, null
  br i1 %cmp2, label %if.then4, label %if.end8

if.then4:                                         ; preds = %if.end
  %call5 = call %struct.snd_minor* @autoload_device(i32 %call)
  %tobool = icmp ne %struct.snd_minor* %call5, null
  br i1 %tobool, label %if.end8, label %if.then6

if.then6:                                         ; preds = %if.then4
  call void @mutex_unlock(%struct.mutex* @sound_mutex)
  br label %cleanup

if.end8:                                          ; preds = %if.then4, %if.end
  %mptr.0 = phi %struct.snd_minor* [ %0, %if.end ], [ %call5, %if.then4 ]
  %f_ops = getelementptr inbounds %struct.snd_minor, %struct.snd_minor* %mptr.0, i32 0, i32 3
  %1 = load %struct.file_operations*, %struct.file_operations** %f_ops, align 8, !tbaa !8
  %tobool9 = icmp ne %struct.file_operations* %1, null
  br i1 %tobool9, label %land.lhs.true, label %cond.end

land.lhs.true:                                    ; preds = %if.end8
  %f_ops10 = getelementptr inbounds %struct.snd_minor, %struct.snd_minor* %mptr.0, i32 0, i32 3
  %2 = load %struct.file_operations*, %struct.file_operations** %f_ops10, align 8, !tbaa !8
  %owner = getelementptr inbounds %struct.file_operations, %struct.file_operations* %2, i32 0, i32 0
  %3 = load %struct.module*, %struct.module** %owner, align 8, !tbaa !10
  %call11 = call zeroext i1 @try_module_get(%struct.module* %3)
  br i1 %call11, label %cond.true, label %cond.end

cond.true:                                        ; preds = %land.lhs.true
  %f_ops13 = getelementptr inbounds %struct.snd_minor, %struct.snd_minor* %mptr.0, i32 0, i32 3
  %4 = load %struct.file_operations*, %struct.file_operations** %f_ops13, align 8, !tbaa !8
  br label %cond.end

cond.end:                                         ; preds = %cond.true, %land.lhs.true, %if.end8
  %cond = phi %struct.file_operations* [ %4, %cond.true ], [ null, %land.lhs.true ], [ null, %if.end8 ]
  call void @mutex_unlock(%struct.mutex* @sound_mutex)
  %tobool14 = icmp ne %struct.file_operations* %cond, null
  br i1 %tobool14, label %do.body17, label %cleanup

do.body17:                                        ; preds = %cond.end
  %f_op = getelementptr inbounds %struct.file, %struct.file* %file, i32 0, i32 3
  %5 = load %struct.file_operations*, %struct.file_operations** %f_op, align 8, !tbaa !12
  %tobool18 = icmp ne %struct.file_operations* %5, null
  br i1 %tobool18, label %if.then19, label %do.body23

if.then19:                                        ; preds = %do.body17
  %f_op20 = getelementptr inbounds %struct.file, %struct.file* %file, i32 0, i32 3
  %6 = load %struct.file_operations*, %struct.file_operations** %f_op20, align 8, !tbaa !12
  %owner21 = getelementptr inbounds %struct.file_operations, %struct.file_operations* %6, i32 0, i32 0
  %7 = load %struct.module*, %struct.module** %owner21, align 8, !tbaa !10
  call void @module_put(%struct.module* %7)
  br label %do.body23

do.body23:                                        ; preds = %if.then19, %do.body17
  %f_op24 = getelementptr inbounds %struct.file, %struct.file* %file, i32 0, i32 3
  store %struct.file_operations* %cond, %struct.file_operations** %f_op24, align 8, !tbaa !12
  %tobool25 = icmp ne %struct.file_operations* %cond, null
  %lnot = xor i1 %tobool25, true
  %lnot26 = xor i1 %lnot, true
  %lnot27 = xor i1 %lnot26, true
  %lnot.ext = zext i1 %lnot27 to i32
  %conv28 = sext i32 %lnot.ext to i64
  %expval = call i64 @llvm.expect.i64(i64 %conv28, i64 0)
  %tobool29 = icmp ne i64 %expval, 0
  br i1 %tobool29, label %do.body31, label %do.end41

do.body31:                                        ; preds = %do.body23
  call void asm sideeffect "1:\09ud2\0A.pushsection __bug_table,\22a\22\0A2:\09.long 1b - 2b, ${0:c} - 2b\0A\09.word ${1:c}, 0\0A\09.org 2b+${2:c}\0A.popsection", "i,i,i,~{dirflag},~{fpsr},~{flags}"(i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.16, i32 0, i32 0), i32 174, i64 12) #7, !srcloc !28
  br label %do.body32

do.body32:                                        ; preds = %do.body32, %do.body31
  br label %do.body32

do.end41:                                         ; preds = %do.body23
  %f_op42 = getelementptr inbounds %struct.file, %struct.file* %file, i32 0, i32 3
  %8 = load %struct.file_operations*, %struct.file_operations** %f_op42, align 8, !tbaa !12
  %open = getelementptr inbounds %struct.file_operations, %struct.file_operations* %8, i32 0, i32 12
  %9 = load i32 (%struct.inode*, %struct.file*)*, i32 (%struct.inode*, %struct.file*)** %open, align 8, !tbaa !29
  %tobool43 = icmp ne i32 (%struct.inode*, %struct.file*)* %9, null
  br i1 %tobool43, label %if.then44, label %cleanup

if.then44:                                        ; preds = %do.end41
  %f_op45 = getelementptr inbounds %struct.file, %struct.file* %file, i32 0, i32 3
  %10 = load %struct.file_operations*, %struct.file_operations** %f_op45, align 8, !tbaa !12
  %open46 = getelementptr inbounds %struct.file_operations, %struct.file_operations* %10, i32 0, i32 12
  %11 = load i32 (%struct.inode*, %struct.file*)*, i32 (%struct.inode*, %struct.file*)** %open46, align 8, !tbaa !29
  %call47 = call i32 %11(%struct.inode* %inode, %struct.file* %file)
  br label %cleanup

cleanup:                                          ; preds = %if.then44, %do.end41, %cond.end, %if.then6, %entry
  %retval.0 = phi i32 [ -19, %if.then6 ], [ -19, %entry ], [ -19, %cond.end ], [ %call47, %if.then44 ], [ 0, %do.end41 ]
  ret i32 %retval.0
}

; Function Attrs: inlinehint nounwind uwtable
define internal i32 @iminor(%struct.inode* %inode) #1 {
entry:
  %i_rdev = getelementptr inbounds %struct.inode, %struct.inode* %inode, i32 0, i32 13
  %0 = load i32, i32* %i_rdev, align 4, !tbaa !30
  %and = and i32 %0, 1048575
  ret i32 %and
}

declare void @mutex_lock(%struct.mutex*) #2

; Function Attrs: nounwind uwtable
define internal %struct.snd_minor* @autoload_device(i32 %minor) #0 {
entry:
  call void @mutex_unlock(%struct.mutex* @sound_mutex)
  %and = and i32 %minor, 31
  br label %NodeBlock

NodeBlock:                                        ; preds = %entry
  %Pivot = icmp slt i32 %and, 1
  br i1 %Pivot, label %LeafBlock, label %LeafBlock1

LeafBlock1:                                       ; preds = %NodeBlock
  %SwitchLeaf2 = icmp eq i32 %and, 1
  br i1 %SwitchLeaf2, label %if.then4, label %NewDefault

LeafBlock:                                        ; preds = %NodeBlock
  %SwitchLeaf = icmp eq i32 %and, 0
  br i1 %SwitchLeaf, label %if.then, label %NewDefault

if.then:                                          ; preds = %LeafBlock
  %shr = lshr i32 %minor, 5
  %idxprom = sext i32 %shr to i64
  %arrayidx = getelementptr inbounds [8 x %struct.snd_card*], [8 x %struct.snd_card*]* @snd_cards, i64 0, i64 %idxprom
  %0 = load %struct.snd_card*, %struct.snd_card** %arrayidx, align 8, !tbaa !6
  %cmp1 = icmp eq %struct.snd_card* %0, null
  br i1 %cmp1, label %if.then2, label %if.end6

if.then2:                                         ; preds = %if.then
  call void @snd_request_card(i32 %shr)
  br label %if.end6

if.then4:                                         ; preds = %LeafBlock1
  call void @snd_request_other(i32 %minor)
  br label %if.end6

NewDefault:                                       ; preds = %LeafBlock, %LeafBlock1
  br label %if.end6

if.end6:                                          ; preds = %NewDefault, %if.then4, %if.then2, %if.then
  call void @mutex_lock(%struct.mutex* @sound_mutex)
  %idxprom7 = zext i32 %minor to i64
  %arrayidx8 = getelementptr inbounds [256 x %struct.snd_minor*], [256 x %struct.snd_minor*]* @snd_minors, i64 0, i64 %idxprom7
  %1 = load %struct.snd_minor*, %struct.snd_minor** %arrayidx8, align 8, !tbaa !6
  ret %struct.snd_minor* %1
}

declare void @mutex_unlock(%struct.mutex*) #2

declare zeroext i1 @try_module_get(%struct.module*) #2

declare void @module_put(%struct.module*) #2

; Function Attrs: nounwind readnone
declare i64 @llvm.expect.i64(i64, i64) #3

; Function Attrs: nounwind uwtable
define void @snd_request_card(i32 %card) #0 {
entry:
  %call = call i32 @snd_card_locked(i32 %card)
  %tobool = icmp ne i32 %call, 0
  br i1 %tobool, label %return, label %if.end

if.end:                                           ; preds = %entry
  %cmp = icmp slt i32 %card, 0
  %0 = load i32, i32* @cards_limit, align 4
  %cmp1 = icmp sge i32 %card, %0
  %or.cond = or i1 %cmp, %cmp1
  br i1 %or.cond, label %return, label %if.end3

if.end3:                                          ; preds = %if.end
  %call4 = call i32 (i1, i8*, ...) @__request_module(i1 zeroext true, i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str, i32 0, i32 0), i32 %card)
  br label %return

return:                                           ; preds = %if.end3, %if.end, %entry
  ret void
}

; Function Attrs: nounwind uwtable
define internal void @snd_request_other(i32 %minor) #0 {
entry:
  br label %NodeBlock

NodeBlock:                                        ; preds = %entry
  %Pivot = icmp slt i32 %minor, 33
  br i1 %Pivot, label %LeafBlock, label %LeafBlock1

LeafBlock1:                                       ; preds = %NodeBlock
  %SwitchLeaf2 = icmp eq i32 %minor, 33
  br i1 %SwitchLeaf2, label %sw.bb1, label %NewDefault

LeafBlock:                                        ; preds = %NodeBlock
  %SwitchLeaf = icmp eq i32 %minor, 1
  br i1 %SwitchLeaf, label %sw.epilog, label %NewDefault

sw.bb1:                                           ; preds = %LeafBlock1
  br label %sw.epilog

sw.epilog:                                        ; preds = %sw.bb1, %LeafBlock
  %str.0 = phi i8* [ getelementptr inbounds ([10 x i8], [10 x i8]* @.str.18, i32 0, i32 0), %sw.bb1 ], [ getelementptr inbounds ([8 x i8], [8 x i8]* @.str.17, i32 0, i32 0), %LeafBlock ]
  %call = call i32 (i1, i8*, ...) @__request_module(i1 zeroext true, i8* %str.0)
  br label %cleanup.cont

NewDefault:                                       ; preds = %LeafBlock, %LeafBlock1
  br label %cleanup.cont

cleanup.cont:                                     ; preds = %NewDefault, %sw.epilog
  ret void
}

declare i32 @__request_module(i1 zeroext, i8*, ...) #2

declare i32 @snd_card_locked(i32) #2

; Function Attrs: nounwind uwtable
define i32 @snd_unregister_device(%struct.device* %dev) #0 {
entry:
  call void @mutex_lock(%struct.mutex* @sound_mutex)
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %minor.0 = phi i32 [ 0, %entry ], [ %inc, %for.inc ]
  %conv = sext i32 %minor.0 to i64
  %cmp = icmp ult i64 %conv, 256
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %idxprom = sext i32 %minor.0 to i64
  %arrayidx = getelementptr inbounds [256 x %struct.snd_minor*], [256 x %struct.snd_minor*]* @snd_minors, i64 0, i64 %idxprom
  %0 = load %struct.snd_minor*, %struct.snd_minor** %arrayidx, align 8, !tbaa !6
  %tobool = icmp ne %struct.snd_minor* %0, null
  br i1 %tobool, label %land.lhs.true, label %for.inc

land.lhs.true:                                    ; preds = %for.body
  %dev2 = getelementptr inbounds %struct.snd_minor, %struct.snd_minor* %0, i32 0, i32 5
  %1 = load %struct.device*, %struct.device** %dev2, align 8, !tbaa !41
  %cmp3 = icmp eq %struct.device* %1, %dev
  br i1 %cmp3, label %if.then, label %for.inc

if.then:                                          ; preds = %land.lhs.true
  %idxprom5 = sext i32 %minor.0 to i64
  %arrayidx6 = getelementptr inbounds [256 x %struct.snd_minor*], [256 x %struct.snd_minor*]* @snd_minors, i64 0, i64 %idxprom5
  store %struct.snd_minor* null, %struct.snd_minor** %arrayidx6, align 8, !tbaa !6
  call void @device_del(%struct.device* %dev)
  %2 = bitcast %struct.snd_minor* %0 to i8*
  call void @kfree(i8* %2)
  br label %for.end

for.inc:                                          ; preds = %land.lhs.true, %for.body
  %inc = add nsw i32 %minor.0, 1
  br label %for.cond

for.end:                                          ; preds = %if.then, %for.cond
  call void @mutex_unlock(%struct.mutex* @sound_mutex)
  %conv7 = sext i32 %minor.0 to i64
  %cmp8 = icmp uge i64 %conv7, 256
  %. = select i1 %cmp8, i32 -2, i32 0
  ret i32 %.
}

declare void @device_del(%struct.device*) #2

declare void @kfree(i8*) #2

; Function Attrs: nounwind uwtable
define i32 @snd_register_device(i32 %type, %struct.snd_card* %card, i32 %dev, %struct.file_operations* %f_ops, i8* %private_data, %struct.device* %device) #0 {
entry:
  %tobool = icmp ne %struct.device* %device, null
  %lnot = xor i1 %tobool, true
  %lnot1 = xor i1 %lnot, true
  %lnot2 = xor i1 %lnot1, true
  %lnot.ext = zext i1 %lnot2 to i32
  %tobool3 = icmp ne i32 %lnot.ext, 0
  %lnot4 = xor i1 %tobool3, true
  %lnot6 = xor i1 %lnot4, true
  %lnot.ext7 = zext i1 %lnot6 to i32
  %conv = sext i32 %lnot.ext7 to i64
  %expval = call i64 @llvm.expect.i64(i64 %conv, i64 0)
  %tobool8 = icmp ne i64 %expval, 0
  br i1 %tobool8, label %cleanup, label %if.end

if.end:                                           ; preds = %entry
  %call = call i8* @kmalloc(i64 48, i32 20971712)
  %0 = bitcast i8* %call to %struct.snd_minor*
  %cmp = icmp eq %struct.snd_minor* %0, null
  br i1 %cmp, label %cleanup, label %if.end11

if.end11:                                         ; preds = %if.end
  %type12 = getelementptr inbounds %struct.snd_minor, %struct.snd_minor* %0, i32 0, i32 0
  store i32 %type, i32* %type12, align 8, !tbaa !42
  %tobool13 = icmp ne %struct.snd_card* %card, null
  br i1 %tobool13, label %cond.true, label %cond.end

cond.true:                                        ; preds = %if.end11
  %number = getelementptr inbounds %struct.snd_card, %struct.snd_card* %card, i32 0, i32 0
  %1 = load i32, i32* %number, align 8, !tbaa !43
  br label %cond.end

cond.end:                                         ; preds = %cond.true, %if.end11
  %cond = phi i32 [ %1, %cond.true ], [ -1, %if.end11 ]
  %card14 = getelementptr inbounds %struct.snd_minor, %struct.snd_minor* %0, i32 0, i32 1
  store i32 %cond, i32* %card14, align 4, !tbaa !59
  %device15 = getelementptr inbounds %struct.snd_minor, %struct.snd_minor* %0, i32 0, i32 2
  store i32 %dev, i32* %device15, align 8, !tbaa !60
  %f_ops16 = getelementptr inbounds %struct.snd_minor, %struct.snd_minor* %0, i32 0, i32 3
  store %struct.file_operations* %f_ops, %struct.file_operations** %f_ops16, align 8, !tbaa !8
  %private_data17 = getelementptr inbounds %struct.snd_minor, %struct.snd_minor* %0, i32 0, i32 4
  store i8* %private_data, i8** %private_data17, align 8, !tbaa !61
  %card_ptr = getelementptr inbounds %struct.snd_minor, %struct.snd_minor* %0, i32 0, i32 6
  store %struct.snd_card* %card, %struct.snd_card** %card_ptr, align 8, !tbaa !62
  call void @mutex_lock(%struct.mutex* @sound_mutex)
  %call18 = call i32 @snd_find_free_minor(i32 %type, %struct.snd_card* %card, i32 %dev)
  %cmp19 = icmp slt i32 %call18, 0
  br i1 %cmp19, label %error, label %if.end22

if.end22:                                         ; preds = %cond.end
  %dev23 = getelementptr inbounds %struct.snd_minor, %struct.snd_minor* %0, i32 0, i32 5
  store %struct.device* %device, %struct.device** %dev23, align 8, !tbaa !41
  %2 = load i32, i32* @major, align 4, !tbaa !2
  %shl = shl i32 %2, 20
  %or = or i32 %shl, %call18
  %devt = getelementptr inbounds %struct.device, %struct.device* %device, i32 0, i32 26
  store i32 %or, i32* %devt, align 8, !tbaa !63
  %call24 = call i32 @device_add(%struct.device* %device)
  %cmp25 = icmp slt i32 %call24, 0
  br i1 %cmp25, label %error, label %if.end28

if.end28:                                         ; preds = %if.end22
  %idxprom = sext i32 %call18 to i64
  %arrayidx = getelementptr inbounds [256 x %struct.snd_minor*], [256 x %struct.snd_minor*]* @snd_minors, i64 0, i64 %idxprom
  store %struct.snd_minor* %0, %struct.snd_minor** %arrayidx, align 8, !tbaa !6
  br label %error

error:                                            ; preds = %if.end28, %if.end22, %cond.end
  %err.0 = phi i32 [ %call24, %if.end28 ], [ %call18, %cond.end ], [ %call24, %if.end22 ]
  call void @mutex_unlock(%struct.mutex* @sound_mutex)
  %cmp29 = icmp slt i32 %err.0, 0
  br i1 %cmp29, label %if.then31, label %cleanup

if.then31:                                        ; preds = %error
  %3 = bitcast %struct.snd_minor* %0 to i8*
  call void @kfree(i8* %3)
  br label %cleanup

cleanup:                                          ; preds = %if.then31, %error, %if.end, %entry
  %retval.0 = phi i32 [ -22, %entry ], [ -12, %if.end ], [ %err.0, %if.then31 ], [ %err.0, %error ]
  ret i32 %retval.0
}

; Function Attrs: alwaysinline nounwind uwtable
define internal i8* @kmalloc(i64 %size, i32 %flags) #4 {
entry:
  %call = call noalias i8* @__kmalloc(i64 %size, i32 %flags)
  ret i8* %call
}

; Function Attrs: nounwind uwtable
define internal i32 @snd_find_free_minor(i32 %type, %struct.snd_card* %card, i32 %dev) #0 {
entry:
  br label %NodeBlock23

NodeBlock23:                                      ; preds = %entry
  %Pivot24 = icmp slt i32 %type, 8
  br i1 %Pivot24, label %NodeBlock7, label %NodeBlock21

NodeBlock21:                                      ; preds = %NodeBlock23
  %Pivot22 = icmp slt i32 %type, 24
  br i1 %Pivot22, label %NodeBlock13, label %NodeBlock19

NodeBlock19:                                      ; preds = %NodeBlock21
  %Pivot20 = icmp slt i32 %type, 33
  br i1 %Pivot20, label %LeafBlock15, label %LeafBlock17

LeafBlock17:                                      ; preds = %NodeBlock19
  %SwitchLeaf18 = icmp eq i32 %type, 33
  br i1 %SwitchLeaf18, label %sw.epilog, label %NewDefault

LeafBlock15:                                      ; preds = %NodeBlock19
  %SwitchLeaf16 = icmp eq i32 %type, 24
  br i1 %SwitchLeaf16, label %sw.bb10, label %NewDefault

NodeBlock13:                                      ; preds = %NodeBlock21
  %Pivot14 = icmp slt i32 %type, 16
  br i1 %Pivot14, label %LeafBlock9, label %LeafBlock11

LeafBlock11:                                      ; preds = %NodeBlock13
  %SwitchLeaf12 = icmp eq i32 %type, 16
  br i1 %SwitchLeaf12, label %sw.bb10, label %NewDefault

LeafBlock9:                                       ; preds = %NodeBlock13
  %SwitchLeaf10 = icmp eq i32 %type, 8
  br i1 %SwitchLeaf10, label %sw.bb10, label %NewDefault

NodeBlock7:                                       ; preds = %NodeBlock23
  %Pivot8 = icmp slt i32 %type, 2
  br i1 %Pivot8, label %NodeBlock, label %NodeBlock5

NodeBlock5:                                       ; preds = %NodeBlock7
  %Pivot6 = icmp slt i32 %type, 4
  br i1 %Pivot6, label %LeafBlock1, label %LeafBlock3

LeafBlock3:                                       ; preds = %NodeBlock5
  %SwitchLeaf4 = icmp eq i32 %type, 4
  br i1 %SwitchLeaf4, label %sw.bb10, label %NewDefault

LeafBlock1:                                       ; preds = %NodeBlock5
  %SwitchLeaf2 = icmp eq i32 %type, 2
  br i1 %SwitchLeaf2, label %sw.bb10, label %NewDefault

NodeBlock:                                        ; preds = %NodeBlock7
  %Pivot = icmp slt i32 %type, 1
  br i1 %Pivot, label %LeafBlock, label %sw.epilog

LeafBlock:                                        ; preds = %NodeBlock
  %SwitchLeaf = icmp eq i32 %type, 0
  br i1 %SwitchLeaf, label %sw.bb1, label %NewDefault

sw.bb1:                                           ; preds = %LeafBlock
  %tobool = icmp ne %struct.snd_card* %card, null
  %lnot = xor i1 %tobool, true
  %lnot2 = xor i1 %lnot, true
  %lnot3 = xor i1 %lnot2, true
  %lnot.ext = zext i1 %lnot3 to i32
  %tobool4 = icmp ne i32 %lnot.ext, 0
  %lnot5 = xor i1 %tobool4, true
  %lnot7 = xor i1 %lnot5, true
  %lnot.ext8 = zext i1 %lnot7 to i32
  %conv = sext i32 %lnot.ext8 to i64
  %expval = call i64 @llvm.expect.i64(i64 %conv, i64 0)
  %tobool9 = icmp ne i64 %expval, 0
  br i1 %tobool9, label %cleanup, label %if.end

if.end:                                           ; preds = %sw.bb1
  %number = getelementptr inbounds %struct.snd_card, %struct.snd_card* %card, i32 0, i32 0
  %0 = load i32, i32* %number, align 8, !tbaa !43
  %shl = shl i32 %0, 5
  %or = or i32 %shl, %type
  br label %sw.epilog

sw.bb10:                                          ; preds = %LeafBlock1, %LeafBlock3, %LeafBlock9, %LeafBlock11, %LeafBlock15
  %tobool12 = icmp ne %struct.snd_card* %card, null
  %lnot13 = xor i1 %tobool12, true
  %lnot15 = xor i1 %lnot13, true
  %lnot17 = xor i1 %lnot15, true
  %lnot.ext18 = zext i1 %lnot17 to i32
  %tobool20 = icmp ne i32 %lnot.ext18, 0
  %lnot21 = xor i1 %tobool20, true
  %lnot23 = xor i1 %lnot21, true
  %lnot.ext24 = zext i1 %lnot23 to i32
  %conv25 = sext i32 %lnot.ext24 to i64
  %expval26 = call i64 @llvm.expect.i64(i64 %conv25, i64 0)
  %tobool27 = icmp ne i64 %expval26, 0
  br i1 %tobool27, label %cleanup, label %if.end29

if.end29:                                         ; preds = %sw.bb10
  %number30 = getelementptr inbounds %struct.snd_card, %struct.snd_card* %card, i32 0, i32 0
  %1 = load i32, i32* %number30, align 8, !tbaa !43
  %shl31 = shl i32 %1, 5
  %add = add nsw i32 %type, %dev
  %or32 = or i32 %shl31, %add
  br label %sw.epilog

sw.epilog:                                        ; preds = %if.end29, %if.end, %NodeBlock, %LeafBlock17
  %minor.0 = phi i32 [ %or32, %if.end29 ], [ %or, %if.end ], [ %type, %NodeBlock ], [ %type, %LeafBlock17 ]
  %cmp = icmp slt i32 %minor.0, 0
  %cmp35 = icmp sge i32 %minor.0, 256
  %.cmp35 = select i1 %cmp, i1 true, i1 %cmp35
  %lnot37 = xor i1 %.cmp35, true
  %lnot39 = xor i1 %lnot37, true
  %lnot.ext40 = zext i1 %lnot39 to i32
  %tobool42 = icmp ne i32 %lnot.ext40, 0
  %lnot43 = xor i1 %tobool42, true
  %lnot45 = xor i1 %lnot43, true
  %lnot.ext46 = zext i1 %lnot45 to i32
  %conv47 = sext i32 %lnot.ext46 to i64
  %expval48 = call i64 @llvm.expect.i64(i64 %conv47, i64 0)
  %tobool49 = icmp ne i64 %expval48, 0
  br i1 %tobool49, label %cleanup, label %if.end51

if.end51:                                         ; preds = %sw.epilog
  %idxprom = sext i32 %minor.0 to i64
  %arrayidx = getelementptr inbounds [256 x %struct.snd_minor*], [256 x %struct.snd_minor*]* @snd_minors, i64 0, i64 %idxprom
  %2 = load %struct.snd_minor*, %struct.snd_minor** %arrayidx, align 8, !tbaa !6
  %tobool52 = icmp ne %struct.snd_minor* %2, null
  %.minor.0 = select i1 %tobool52, i32 -16, i32 %minor.0
  br label %cleanup

NewDefault:                                       ; preds = %LeafBlock, %LeafBlock1, %LeafBlock3, %LeafBlock9, %LeafBlock11, %LeafBlock15, %LeafBlock17
  br label %cleanup

cleanup:                                          ; preds = %NewDefault, %if.end51, %sw.epilog, %sw.bb10, %sw.bb1
  %retval.0 = phi i32 [ -22, %sw.bb1 ], [ -22, %sw.bb10 ], [ -22, %NewDefault ], [ -22, %sw.epilog ], [ %.minor.0, %if.end51 ]
  ret i32 %retval.0
}

declare i32 @device_add(%struct.device*) #2

declare noalias i8* @__kmalloc(i64, i32) #2

; Function Attrs: nounwind uwtable
define i8* @snd_lookup_minor_data(i32 %minor, i32 %type) #0 {
entry:
  %conv = zext i32 %minor to i64
  %cmp = icmp uge i64 %conv, 256
  br i1 %cmp, label %cleanup, label %if.end

if.end:                                           ; preds = %entry
  call void @mutex_lock(%struct.mutex* @sound_mutex)
  %idxprom = zext i32 %minor to i64
  %arrayidx = getelementptr inbounds [256 x %struct.snd_minor*], [256 x %struct.snd_minor*]* @snd_minors, i64 0, i64 %idxprom
  %0 = load %struct.snd_minor*, %struct.snd_minor** %arrayidx, align 8, !tbaa !6
  %tobool = icmp ne %struct.snd_minor* %0, null
  br i1 %tobool, label %land.lhs.true, label %if.end13

land.lhs.true:                                    ; preds = %if.end
  %type2 = getelementptr inbounds %struct.snd_minor, %struct.snd_minor* %0, i32 0, i32 0
  %1 = load i32, i32* %type2, align 8, !tbaa !42
  %cmp3 = icmp eq i32 %1, %type
  br i1 %cmp3, label %if.then5, label %if.end13

if.then5:                                         ; preds = %land.lhs.true
  %private_data6 = getelementptr inbounds %struct.snd_minor, %struct.snd_minor* %0, i32 0, i32 4
  %2 = load i8*, i8** %private_data6, align 8, !tbaa !61
  %tobool7 = icmp ne i8* %2, null
  br i1 %tobool7, label %land.lhs.true8, label %if.end13

land.lhs.true8:                                   ; preds = %if.then5
  %card_ptr = getelementptr inbounds %struct.snd_minor, %struct.snd_minor* %0, i32 0, i32 6
  %3 = load %struct.snd_card*, %struct.snd_card** %card_ptr, align 8, !tbaa !62
  %tobool9 = icmp ne %struct.snd_card* %3, null
  br i1 %tobool9, label %if.then10, label %if.end13

if.then10:                                        ; preds = %land.lhs.true8
  %card_ptr11 = getelementptr inbounds %struct.snd_minor, %struct.snd_minor* %0, i32 0, i32 6
  %4 = load %struct.snd_card*, %struct.snd_card** %card_ptr11, align 8, !tbaa !62
  %card_dev = getelementptr inbounds %struct.snd_card, %struct.snd_card* %4, i32 0, i32 30
  %call = call %struct.device* @get_device(%struct.device* %card_dev)
  br label %if.end13

if.end13:                                         ; preds = %if.then10, %land.lhs.true8, %if.then5, %land.lhs.true, %if.end
  %private_data.0 = phi i8* [ %2, %if.then10 ], [ %2, %land.lhs.true8 ], [ %2, %if.then5 ], [ null, %land.lhs.true ], [ null, %if.end ]
  call void @mutex_unlock(%struct.mutex* @sound_mutex)
  br label %cleanup

cleanup:                                          ; preds = %if.end13, %entry
  %retval.0 = phi i8* [ %private_data.0, %if.end13 ], [ null, %entry ]
  ret i8* %retval.0
}

declare %struct.device* @get_device(%struct.device*) #2

; Function Attrs: nounwind uwtable
define i32 @snd_minor_info_init() #0 section ".init.text" {
entry:
  %call = call %struct.snd_info_entry* @snd_info_create_module_entry(%struct.module* null, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.4.23, i32 0, i32 0), %struct.snd_info_entry* null)
  %tobool = icmp ne %struct.snd_info_entry* %call, null
  br i1 %tobool, label %if.end, label %cleanup

if.end:                                           ; preds = %entry
  %c = getelementptr inbounds %struct.snd_info_entry, %struct.snd_info_entry* %call, i32 0, i32 4
  %text = bitcast %union.anon.53* %c to %struct.snd_info_entry_text*
  %read = getelementptr inbounds %struct.snd_info_entry_text, %struct.snd_info_entry_text* %text, i32 0, i32 0
  store void (%struct.snd_info_entry*, %struct.snd_info_buffer*)* @snd_minor_info_read, void (%struct.snd_info_entry*, %struct.snd_info_buffer*)** %read, align 8, !tbaa !64
  %call2 = call i32 @snd_info_register(%struct.snd_info_entry* %call)
  br label %cleanup

cleanup:                                          ; preds = %if.end, %entry
  %retval.0 = phi i32 [ %call2, %if.end ], [ -12, %entry ]
  ret i32 %retval.0
}

; Function Attrs: nounwind uwtable
define internal void @snd_minor_info_read(%struct.snd_info_entry* %entry1, %struct.snd_info_buffer* %buffer) #0 {
entry:
  call void @mutex_lock(%struct.mutex* @sound_mutex)
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %minor.0 = phi i32 [ 0, %entry ], [ %inc, %for.inc ]
  %cmp = icmp slt i32 %minor.0, 256
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %idxprom = sext i32 %minor.0 to i64
  %arrayidx = getelementptr inbounds [256 x %struct.snd_minor*], [256 x %struct.snd_minor*]* @snd_minors, i64 0, i64 %idxprom
  %0 = load %struct.snd_minor*, %struct.snd_minor** %arrayidx, align 8, !tbaa !6
  %tobool = icmp ne %struct.snd_minor* %0, null
  br i1 %tobool, label %if.end, label %for.inc

if.end:                                           ; preds = %for.body
  %card = getelementptr inbounds %struct.snd_minor, %struct.snd_minor* %0, i32 0, i32 1
  %1 = load i32, i32* %card, align 4, !tbaa !59
  %cmp2 = icmp sge i32 %1, 0
  br i1 %cmp2, label %if.then3, label %if.else14

if.then3:                                         ; preds = %if.end
  %device = getelementptr inbounds %struct.snd_minor, %struct.snd_minor* %0, i32 0, i32 2
  %2 = load i32, i32* %device, align 8, !tbaa !60
  %cmp4 = icmp sge i32 %2, 0
  %buffer6 = getelementptr inbounds %struct.snd_info_buffer, %struct.snd_info_buffer* %buffer, i32 0, i32 0
  %3 = load i8*, i8** %buffer6, align 8, !tbaa !65
  %4 = bitcast i8* %3 to %struct.seq_file*
  %card7 = getelementptr inbounds %struct.snd_minor, %struct.snd_minor* %0, i32 0, i32 1
  %5 = load i32, i32* %card7, align 4, !tbaa !59
  br i1 %cmp4, label %if.then5, label %if.else

if.then5:                                         ; preds = %if.then3
  %device8 = getelementptr inbounds %struct.snd_minor, %struct.snd_minor* %0, i32 0, i32 2
  %6 = load i32, i32* %device8, align 8, !tbaa !60
  %type = getelementptr inbounds %struct.snd_minor, %struct.snd_minor* %0, i32 0, i32 0
  %7 = load i32, i32* %type, align 8, !tbaa !42
  %call = call i8* @snd_device_type_name(i32 %7)
  call void (%struct.seq_file*, i8*, ...) @seq_printf(%struct.seq_file* %4, i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.3, i32 0, i32 0), i32 %minor.0, i32 %5, i32 %6, i8* %call)
  br label %for.inc

if.else:                                          ; preds = %if.then3
  %type11 = getelementptr inbounds %struct.snd_minor, %struct.snd_minor* %0, i32 0, i32 0
  %8 = load i32, i32* %type11, align 8, !tbaa !42
  %call12 = call i8* @snd_device_type_name(i32 %8)
  call void (%struct.seq_file*, i8*, ...) @seq_printf(%struct.seq_file* %4, i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.4, i32 0, i32 0), i32 %minor.0, i32 %5, i8* %call12)
  br label %for.inc

if.else14:                                        ; preds = %if.end
  %buffer15 = getelementptr inbounds %struct.snd_info_buffer, %struct.snd_info_buffer* %buffer, i32 0, i32 0
  %9 = load i8*, i8** %buffer15, align 8, !tbaa !65
  %10 = bitcast i8* %9 to %struct.seq_file*
  %type16 = getelementptr inbounds %struct.snd_minor, %struct.snd_minor* %0, i32 0, i32 0
  %11 = load i32, i32* %type16, align 8, !tbaa !42
  %call17 = call i8* @snd_device_type_name(i32 %11)
  call void (%struct.seq_file*, i8*, ...) @seq_printf(%struct.seq_file* %10, i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.5, i32 0, i32 0), i32 %minor.0, i8* %call17)
  br label %for.inc

for.inc:                                          ; preds = %if.else14, %if.else, %if.then5, %for.body
  %inc = add nsw i32 %minor.0, 1
  br label %for.cond

for.end:                                          ; preds = %for.cond
  call void @mutex_unlock(%struct.mutex* @sound_mutex)
  ret void
}

; Function Attrs: nounwind uwtable
define internal i8* @snd_device_type_name(i32 %type) #0 {
entry:
  br label %NodeBlock21

NodeBlock21:                                      ; preds = %entry
  %Pivot22 = icmp slt i32 %type, 8
  br i1 %Pivot22, label %NodeBlock5, label %NodeBlock19

NodeBlock19:                                      ; preds = %NodeBlock21
  %Pivot20 = icmp slt i32 %type, 24
  br i1 %Pivot20, label %NodeBlock11, label %NodeBlock17

NodeBlock17:                                      ; preds = %NodeBlock19
  %Pivot18 = icmp slt i32 %type, 33
  br i1 %Pivot18, label %LeafBlock13, label %LeafBlock15

LeafBlock15:                                      ; preds = %NodeBlock17
  %SwitchLeaf16 = icmp eq i32 %type, 33
  br i1 %SwitchLeaf16, label %sw.bb6, label %NewDefault

LeafBlock13:                                      ; preds = %NodeBlock17
  %SwitchLeaf14 = icmp eq i32 %type, 24
  br i1 %SwitchLeaf14, label %sw.bb4, label %NewDefault

NodeBlock11:                                      ; preds = %NodeBlock19
  %Pivot12 = icmp slt i32 %type, 16
  br i1 %Pivot12, label %LeafBlock7, label %LeafBlock9

LeafBlock9:                                       ; preds = %NodeBlock11
  %SwitchLeaf10 = icmp eq i32 %type, 16
  br i1 %SwitchLeaf10, label %sw.bb3, label %NewDefault

LeafBlock7:                                       ; preds = %NodeBlock11
  %SwitchLeaf8 = icmp eq i32 %type, 8
  br i1 %SwitchLeaf8, label %sw.bb2, label %NewDefault

NodeBlock5:                                       ; preds = %NodeBlock21
  %Pivot6 = icmp slt i32 %type, 1
  br i1 %Pivot6, label %LeafBlock, label %NodeBlock

NodeBlock:                                        ; preds = %NodeBlock5
  %Pivot = icmp slt i32 %type, 4
  br i1 %Pivot, label %LeafBlock1, label %LeafBlock3

LeafBlock3:                                       ; preds = %NodeBlock
  %SwitchLeaf4 = icmp eq i32 %type, 4
  br i1 %SwitchLeaf4, label %sw.bb1, label %NewDefault

LeafBlock1:                                       ; preds = %NodeBlock
  %SwitchLeaf2 = icmp eq i32 %type, 1
  br i1 %SwitchLeaf2, label %sw.bb5, label %NewDefault

LeafBlock:                                        ; preds = %NodeBlock5
  %SwitchLeaf = icmp eq i32 %type, 0
  br i1 %SwitchLeaf, label %return, label %NewDefault

sw.bb1:                                           ; preds = %LeafBlock3
  br label %return

sw.bb2:                                           ; preds = %LeafBlock7
  br label %return

sw.bb3:                                           ; preds = %LeafBlock9
  br label %return

sw.bb4:                                           ; preds = %LeafBlock13
  br label %return

sw.bb5:                                           ; preds = %LeafBlock1
  br label %return

sw.bb6:                                           ; preds = %LeafBlock15
  br label %return

NewDefault:                                       ; preds = %LeafBlock, %LeafBlock1, %LeafBlock3, %LeafBlock7, %LeafBlock9, %LeafBlock13, %LeafBlock15
  br label %sw.default

sw.default:                                       ; preds = %NewDefault
  br label %return

return:                                           ; preds = %sw.default, %sw.bb6, %sw.bb5, %sw.bb4, %sw.bb3, %sw.bb2, %sw.bb1, %LeafBlock
  %retval.0 = phi i8* [ getelementptr inbounds ([2 x i8], [2 x i8]* @.str.13, i32 0, i32 0), %sw.default ], [ getelementptr inbounds ([6 x i8], [6 x i8]* @.str.12, i32 0, i32 0), %sw.bb6 ], [ getelementptr inbounds ([10 x i8], [10 x i8]* @.str.11, i32 0, i32 0), %sw.bb5 ], [ getelementptr inbounds ([22 x i8], [22 x i8]* @.str.10, i32 0, i32 0), %sw.bb4 ], [ getelementptr inbounds ([23 x i8], [23 x i8]* @.str.9, i32 0, i32 0), %sw.bb3 ], [ getelementptr inbounds ([9 x i8], [9 x i8]* @.str.8, i32 0, i32 0), %sw.bb2 ], [ getelementptr inbounds ([19 x i8], [19 x i8]* @.str.7, i32 0, i32 0), %sw.bb1 ], [ getelementptr inbounds ([8 x i8], [8 x i8]* @.str.6, i32 0, i32 0), %LeafBlock ]
  ret i8* %retval.0
}

declare void @seq_printf(%struct.seq_file*, i8*, ...) #2

; Function Attrs: nounwind uwtable
define i32 @snd_info_done() #0 section ".exit.text" {
entry:
  %0 = load %struct.snd_info_entry*, %struct.snd_info_entry** @snd_proc_root, align 8, !tbaa !6
  call void @snd_info_free_entry(%struct.snd_info_entry* %0)
  ret i32 0
}

; Function Attrs: nounwind uwtable
define i32 @snd_info_register(%struct.snd_info_entry* %entry1) #0 {
entry:
  %tobool = icmp ne %struct.snd_info_entry* %entry1, null
  %lnot = xor i1 %tobool, true
  %lnot2 = xor i1 %lnot, true
  %lnot3 = xor i1 %lnot2, true
  %lnot.ext = zext i1 %lnot3 to i32
  %tobool4 = icmp ne i32 %lnot.ext, 0
  %lnot5 = xor i1 %tobool4, true
  %lnot7 = xor i1 %lnot5, true
  %lnot.ext8 = zext i1 %lnot7 to i32
  %conv = sext i32 %lnot.ext8 to i64
  %expval = call i64 @llvm.expect.i64(i64 %conv, i64 0)
  %tobool9 = icmp ne i64 %expval, 0
  br i1 %tobool9, label %cleanup36, label %if.end

if.end:                                           ; preds = %entry
  %parent = getelementptr inbounds %struct.snd_info_entry, %struct.snd_info_entry* %entry1, i32 0, i32 5
  %0 = load %struct.snd_info_entry*, %struct.snd_info_entry** %parent, align 8, !tbaa !67
  %cmp = icmp eq %struct.snd_info_entry* %0, null
  %parent12 = getelementptr inbounds %struct.snd_info_entry, %struct.snd_info_entry* %entry1, i32 0, i32 5
  %parent12.sink = select i1 %cmp, %struct.snd_info_entry** @snd_proc_root, %struct.snd_info_entry** %parent12
  %1 = load %struct.snd_info_entry*, %struct.snd_info_entry** %parent12.sink, align 8, !tbaa !6
  %p13 = getelementptr inbounds %struct.snd_info_entry, %struct.snd_info_entry* %1, i32 0, i32 10
  %2 = load %struct.proc_dir_entry*, %struct.proc_dir_entry** %p13, align 8, !tbaa !69
  call void @mutex_lock(%struct.mutex* @info_mutex)
  %mode = getelementptr inbounds %struct.snd_info_entry, %struct.snd_info_entry* %entry1, i32 0, i32 1
  %3 = load i16, i16* %mode, align 8, !tbaa !70
  %conv14 = zext i16 %3 to i32
  %and = and i32 %conv14, 61440
  %cmp15 = icmp eq i32 %and, 16384
  br i1 %cmp15, label %if.then17, label %if.else

if.then17:                                        ; preds = %if.end
  %name = getelementptr inbounds %struct.snd_info_entry, %struct.snd_info_entry* %entry1, i32 0, i32 0
  %4 = load i8*, i8** %name, align 8, !tbaa !71
  %mode18 = getelementptr inbounds %struct.snd_info_entry, %struct.snd_info_entry* %entry1, i32 0, i32 1
  %5 = load i16, i16* %mode18, align 8, !tbaa !70
  %call = call %struct.proc_dir_entry* @proc_mkdir_mode(i8* %4, i16 zeroext %5, %struct.proc_dir_entry* %2)
  %tobool19 = icmp ne %struct.proc_dir_entry* %call, null
  br i1 %tobool19, label %if.end34, label %if.then20

if.then20:                                        ; preds = %if.then17
  call void @mutex_unlock(%struct.mutex* @info_mutex)
  br label %cleanup36

if.else:                                          ; preds = %if.end
  %content = getelementptr inbounds %struct.snd_info_entry, %struct.snd_info_entry* %entry1, i32 0, i32 3
  %6 = load i16, i16* %content, align 8, !tbaa !72
  %conv22 = zext i16 %6 to i32
  %cmp23 = icmp eq i32 %conv22, 1
  %snd_info_entry_operations.snd_info_text_entry_ops = select i1 %cmp23, %struct.file_operations* @snd_info_entry_operations, %struct.file_operations* @snd_info_text_entry_ops
  %name28 = getelementptr inbounds %struct.snd_info_entry, %struct.snd_info_entry* %entry1, i32 0, i32 0
  %7 = load i8*, i8** %name28, align 8, !tbaa !71
  %mode29 = getelementptr inbounds %struct.snd_info_entry, %struct.snd_info_entry* %entry1, i32 0, i32 1
  %8 = load i16, i16* %mode29, align 8, !tbaa !70
  %9 = bitcast %struct.snd_info_entry* %entry1 to i8*
  %call30 = call %struct.proc_dir_entry* @proc_create_data(i8* %7, i16 zeroext %8, %struct.proc_dir_entry* %2, %struct.file_operations* %snd_info_entry_operations.snd_info_text_entry_ops, i8* %9)
  %tobool31 = icmp ne %struct.proc_dir_entry* %call30, null
  br i1 %tobool31, label %if.end33, label %if.then32

if.then32:                                        ; preds = %if.else
  call void @mutex_unlock(%struct.mutex* @info_mutex)
  br label %cleanup

if.end33:                                         ; preds = %if.else
  %size = getelementptr inbounds %struct.snd_info_entry, %struct.snd_info_entry* %entry1, i32 0, i32 2
  %10 = load i64, i64* %size, align 8, !tbaa !73
  call void @proc_set_size(%struct.proc_dir_entry* %call30, i64 %10)
  br label %cleanup

cleanup:                                          ; preds = %if.end33, %if.then32
  %cleanup.dest.slot.0 = phi i32 [ 0, %if.end33 ], [ 1, %if.then32 ]
  %cond1 = icmp eq i32 %cleanup.dest.slot.0, 0
  br i1 %cond1, label %if.end34, label %cleanup36

if.end34:                                         ; preds = %cleanup, %if.then17
  %p.0 = phi %struct.proc_dir_entry* [ %call, %if.then17 ], [ %call30, %cleanup ]
  %p35 = getelementptr inbounds %struct.snd_info_entry, %struct.snd_info_entry* %entry1, i32 0, i32 10
  store %struct.proc_dir_entry* %p.0, %struct.proc_dir_entry** %p35, align 8, !tbaa !69
  call void @mutex_unlock(%struct.mutex* @info_mutex)
  br label %cleanup36

cleanup36:                                        ; preds = %if.end34, %cleanup, %if.then20, %entry
  %retval.1 = phi i32 [ 0, %if.end34 ], [ -12, %if.then20 ], [ -12, %cleanup ], [ -6, %entry ]
  ret i32 %retval.1
}

declare %struct.proc_dir_entry* @proc_mkdir_mode(i8*, i16 zeroext, %struct.proc_dir_entry*) #2

declare %struct.proc_dir_entry* @proc_create_data(i8*, i16 zeroext, %struct.proc_dir_entry*, %struct.file_operations*, i8*) #2

declare void @proc_set_size(%struct.proc_dir_entry*, i64) #2

declare i64 @seq_lseek(%struct.file*, i64, i32) #2

declare i64 @seq_read(%struct.file*, i8*, i64, i64*) #2

; Function Attrs: nounwind uwtable
define internal i64 @snd_info_text_entry_write(%struct.file* %file, i8* %buffer, i64 %count, i64* %offset) #0 {
entry:
  %private_data = getelementptr inbounds %struct.file, %struct.file* %file, i32 0, i32 15
  %0 = load i8*, i8** %private_data, align 8, !tbaa !74
  %1 = bitcast i8* %0 to %struct.seq_file*
  %private = getelementptr inbounds %struct.seq_file, %struct.seq_file* %1, i32 0, i32 12
  %2 = load i8*, i8** %private, align 8, !tbaa !75
  %3 = bitcast i8* %2 to %struct.snd_info_private_data*
  %entry2 = getelementptr inbounds %struct.snd_info_private_data, %struct.snd_info_private_data* %3, i32 0, i32 2
  %4 = load %struct.snd_info_entry*, %struct.snd_info_entry** %entry2, align 8, !tbaa !77
  %c = getelementptr inbounds %struct.snd_info_entry, %struct.snd_info_entry* %4, i32 0, i32 4
  %text = bitcast %union.anon.53* %c to %struct.snd_info_entry_text*
  %write = getelementptr inbounds %struct.snd_info_entry_text, %struct.snd_info_entry_text* %text, i32 0, i32 1
  %5 = load void (%struct.snd_info_entry*, %struct.snd_info_buffer*)*, void (%struct.snd_info_entry*, %struct.snd_info_buffer*)** %write, align 8, !tbaa !64
  %tobool = icmp ne void (%struct.snd_info_entry*, %struct.snd_info_buffer*)* %5, null
  br i1 %tobool, label %if.end, label %cleanup42

if.end:                                           ; preds = %entry
  %6 = load i64, i64* %offset, align 8, !tbaa !79
  %call = call zeroext i1 @valid_pos(i64 %6, i64 %count)
  br i1 %call, label %if.end4, label %cleanup42

if.end4:                                          ; preds = %if.end
  %add = add i64 %6, %count
  %cmp = icmp ugt i64 %add, 16384
  br i1 %cmp, label %cleanup42, label %if.end6

if.end6:                                          ; preds = %if.end4
  %access = getelementptr inbounds %struct.snd_info_entry, %struct.snd_info_entry* %4, i32 0, i32 11
  call void @mutex_lock(%struct.mutex* %access)
  %wbuffer = getelementptr inbounds %struct.snd_info_private_data, %struct.snd_info_private_data* %3, i32 0, i32 1
  %7 = load %struct.snd_info_buffer*, %struct.snd_info_buffer** %wbuffer, align 8, !tbaa !80
  %tobool7 = icmp ne %struct.snd_info_buffer* %7, null
  br i1 %tobool7, label %if.end14, label %if.then8

if.then8:                                         ; preds = %if.end6
  %call9 = call i8* @kzalloc(i64 32, i32 20971712)
  %8 = bitcast i8* %call9 to %struct.snd_info_buffer*
  %wbuffer10 = getelementptr inbounds %struct.snd_info_private_data, %struct.snd_info_private_data* %3, i32 0, i32 1
  store %struct.snd_info_buffer* %8, %struct.snd_info_buffer** %wbuffer10, align 8, !tbaa !80
  %tobool11 = icmp ne %struct.snd_info_buffer* %8, null
  br i1 %tobool11, label %if.end14, label %error

if.end14:                                         ; preds = %if.then8, %if.end6
  %buf.0 = phi %struct.snd_info_buffer* [ %7, %if.end6 ], [ %8, %if.then8 ]
  %len = getelementptr inbounds %struct.snd_info_buffer, %struct.snd_info_buffer* %buf.0, i32 0, i32 3
  %9 = load i32, i32* %len, align 8, !tbaa !81
  %conv = zext i32 %9 to i64
  %cmp15 = icmp ugt i64 %add, %conv
  br i1 %cmp15, label %if.then17, label %if.end29

if.then17:                                        ; preds = %if.end14
  %buffer18 = getelementptr inbounds %struct.snd_info_buffer, %struct.snd_info_buffer* %buf.0, i32 0, i32 0
  %10 = load i8*, i8** %buffer18, align 8, !tbaa !65
  %add19 = add i64 %add, 4095
  %and = and i64 %add19, -4096
  %call20 = call i8* @krealloc(i8* %10, i64 %and, i32 21004480)
  %tobool21 = icmp ne i8* %call20, null
  br i1 %tobool21, label %if.end23, label %cleanup

if.end23:                                         ; preds = %if.then17
  %buffer24 = getelementptr inbounds %struct.snd_info_buffer, %struct.snd_info_buffer* %buf.0, i32 0, i32 0
  store i8* %call20, i8** %buffer24, align 8, !tbaa !65
  %add25 = add i64 %add, 4095
  %and26 = and i64 %add25, -4096
  %conv27 = trunc i64 %and26 to i32
  %len28 = getelementptr inbounds %struct.snd_info_buffer, %struct.snd_info_buffer* %buf.0, i32 0, i32 3
  store i32 %conv27, i32* %len28, align 8, !tbaa !81
  br label %cleanup

cleanup:                                          ; preds = %if.end23, %if.then17
  %err.0 = phi i32 [ 0, %if.end23 ], [ -12, %if.then17 ]
  %cleanup.dest.slot.0 = phi i32 [ 0, %if.end23 ], [ 2, %if.then17 ]
  %switch = icmp ult i32 %cleanup.dest.slot.0, 1
  br i1 %switch, label %if.end29, label %error

if.end29:                                         ; preds = %cleanup, %if.end14
  %err.1 = phi i32 [ 0, %if.end14 ], [ %err.0, %cleanup ]
  %buffer30 = getelementptr inbounds %struct.snd_info_buffer, %struct.snd_info_buffer* %buf.0, i32 0, i32 0
  %11 = load i8*, i8** %buffer30, align 8, !tbaa !65
  %add.ptr = getelementptr inbounds i8, i8* %11, i64 %6
  %call31 = call i64 @copy_from_user(i8* %add.ptr, i8* %buffer, i64 %count)
  %tobool32 = icmp ne i64 %call31, 0
  br i1 %tobool32, label %error, label %if.end34

if.end34:                                         ; preds = %if.end29
  %conv35 = trunc i64 %add to i32
  %size = getelementptr inbounds %struct.snd_info_buffer, %struct.snd_info_buffer* %buf.0, i32 0, i32 2
  store i32 %conv35, i32* %size, align 4, !tbaa !82
  br label %error

error:                                            ; preds = %if.end34, %if.end29, %cleanup, %if.then8
  %err.2 = phi i32 [ %err.0, %cleanup ], [ %err.1, %if.end34 ], [ -12, %if.then8 ], [ -14, %if.end29 ]
  %access36 = getelementptr inbounds %struct.snd_info_entry, %struct.snd_info_entry* %4, i32 0, i32 11
  call void @mutex_unlock(%struct.mutex* %access36)
  %cmp37 = icmp slt i32 %err.2, 0
  br i1 %cmp37, label %if.then39, label %if.end41

if.then39:                                        ; preds = %error
  %conv40 = sext i32 %err.2 to i64
  br label %cleanup42

if.end41:                                         ; preds = %error
  store i64 %add, i64* %offset, align 8, !tbaa !79
  br label %cleanup42

cleanup42:                                        ; preds = %if.end41, %if.then39, %if.end4, %if.end, %entry
  %retval.0 = phi i64 [ %conv40, %if.then39 ], [ %count, %if.end41 ], [ -5, %entry ], [ -5, %if.end ], [ -5, %if.end4 ]
  ret i64 %retval.0
}

; Function Attrs: nounwind uwtable
define internal i32 @snd_info_text_entry_open(%struct.inode* %inode, %struct.file* %file) #0 {
entry:
  %data = alloca %struct.snd_info_private_data*, align 8
  %call = call i8* @PDE_DATA(%struct.inode* %inode)
  %0 = bitcast i8* %call to %struct.snd_info_entry*
  %1 = bitcast %struct.snd_info_private_data** %data to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %1) #7
  call void @mutex_lock(%struct.mutex* @info_mutex)
  %call2 = call i32 @alloc_info_private(%struct.snd_info_entry* %0, %struct.snd_info_private_data** %data)
  %cmp = icmp slt i32 %call2, 0
  br i1 %cmp, label %unlock, label %if.end

if.end:                                           ; preds = %entry
  %call3 = call i8* @kzalloc(i64 32, i32 20971712)
  %2 = bitcast i8* %call3 to %struct.snd_info_buffer*
  %3 = load %struct.snd_info_private_data*, %struct.snd_info_private_data** %data, align 8, !tbaa !6
  %rbuffer = getelementptr inbounds %struct.snd_info_private_data, %struct.snd_info_private_data* %3, i32 0, i32 0
  store %struct.snd_info_buffer* %2, %struct.snd_info_buffer** %rbuffer, align 8, !tbaa !83
  %4 = load %struct.snd_info_private_data*, %struct.snd_info_private_data** %data, align 8, !tbaa !6
  %rbuffer4 = getelementptr inbounds %struct.snd_info_private_data, %struct.snd_info_private_data* %4, i32 0, i32 0
  %5 = load %struct.snd_info_buffer*, %struct.snd_info_buffer** %rbuffer4, align 8, !tbaa !83
  %tobool = icmp ne %struct.snd_info_buffer* %5, null
  br i1 %tobool, label %if.end6, label %error

if.end6:                                          ; preds = %if.end
  %size = getelementptr inbounds %struct.snd_info_entry, %struct.snd_info_entry* %0, i32 0, i32 2
  %6 = load i64, i64* %size, align 8, !tbaa !73
  %tobool7 = icmp ne i64 %6, 0
  %7 = load %struct.snd_info_private_data*, %struct.snd_info_private_data** %data, align 8, !tbaa !6
  %8 = bitcast %struct.snd_info_private_data* %7 to i8*
  br i1 %tobool7, label %if.then8, label %if.else

if.then8:                                         ; preds = %if.end6
  %size9 = getelementptr inbounds %struct.snd_info_entry, %struct.snd_info_entry* %0, i32 0, i32 2
  %9 = load i64, i64* %size9, align 8, !tbaa !73
  %call10 = call i32 @single_open_size(%struct.file* %file, i32 (%struct.seq_file*, i8*)* @snd_info_seq_show, i8* %8, i64 %9)
  br label %if.end12

if.else:                                          ; preds = %if.end6
  %call11 = call i32 @single_open(%struct.file* %file, i32 (%struct.seq_file*, i8*)* @snd_info_seq_show, i8* %8)
  br label %if.end12

if.end12:                                         ; preds = %if.else, %if.then8
  %err.0 = phi i32 [ %call10, %if.then8 ], [ %call11, %if.else ]
  %cmp13 = icmp slt i32 %err.0, 0
  br i1 %cmp13, label %error, label %if.end15

if.end15:                                         ; preds = %if.end12
  call void @mutex_unlock(%struct.mutex* @info_mutex)
  br label %cleanup

error:                                            ; preds = %if.end12, %if.end
  %err.1 = phi i32 [ -12, %if.end ], [ %err.0, %if.end12 ]
  %10 = load %struct.snd_info_private_data*, %struct.snd_info_private_data** %data, align 8, !tbaa !6
  %rbuffer16 = getelementptr inbounds %struct.snd_info_private_data, %struct.snd_info_private_data* %10, i32 0, i32 0
  %11 = load %struct.snd_info_buffer*, %struct.snd_info_buffer** %rbuffer16, align 8, !tbaa !83
  %12 = bitcast %struct.snd_info_buffer* %11 to i8*
  call void @kfree(i8* %12)
  %13 = load %struct.snd_info_private_data*, %struct.snd_info_private_data** %data, align 8, !tbaa !6
  %14 = bitcast %struct.snd_info_private_data* %13 to i8*
  call void @kfree(i8* %14)
  %module = getelementptr inbounds %struct.snd_info_entry, %struct.snd_info_entry* %0, i32 0, i32 7
  %15 = load %struct.module*, %struct.module** %module, align 8, !tbaa !84
  call void @module_put(%struct.module* %15)
  br label %unlock

unlock:                                           ; preds = %error, %entry
  %err.2 = phi i32 [ %err.1, %error ], [ %call2, %entry ]
  call void @mutex_unlock(%struct.mutex* @info_mutex)
  br label %cleanup

cleanup:                                          ; preds = %unlock, %if.end15
  %retval.0 = phi i32 [ %err.2, %unlock ], [ 0, %if.end15 ]
  %16 = bitcast %struct.snd_info_private_data** %data to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %16) #7
  ret i32 %retval.0
}

; Function Attrs: nounwind uwtable
define internal i32 @snd_info_text_entry_release(%struct.inode* %inode, %struct.file* %file) #0 {
entry:
  %private_data = getelementptr inbounds %struct.file, %struct.file* %file, i32 0, i32 15
  %0 = load i8*, i8** %private_data, align 8, !tbaa !74
  %1 = bitcast i8* %0 to %struct.seq_file*
  %private = getelementptr inbounds %struct.seq_file, %struct.seq_file* %1, i32 0, i32 12
  %2 = load i8*, i8** %private, align 8, !tbaa !75
  %3 = bitcast i8* %2 to %struct.snd_info_private_data*
  %entry2 = getelementptr inbounds %struct.snd_info_private_data, %struct.snd_info_private_data* %3, i32 0, i32 2
  %4 = load %struct.snd_info_entry*, %struct.snd_info_entry** %entry2, align 8, !tbaa !77
  %wbuffer = getelementptr inbounds %struct.snd_info_private_data, %struct.snd_info_private_data* %3, i32 0, i32 1
  %5 = load %struct.snd_info_buffer*, %struct.snd_info_buffer** %wbuffer, align 8, !tbaa !80
  %tobool = icmp ne %struct.snd_info_buffer* %5, null
  br i1 %tobool, label %land.lhs.true, label %if.end

land.lhs.true:                                    ; preds = %entry
  %c = getelementptr inbounds %struct.snd_info_entry, %struct.snd_info_entry* %4, i32 0, i32 4
  %text = bitcast %union.anon.53* %c to %struct.snd_info_entry_text*
  %write = getelementptr inbounds %struct.snd_info_entry_text, %struct.snd_info_entry_text* %text, i32 0, i32 1
  %6 = load void (%struct.snd_info_entry*, %struct.snd_info_buffer*)*, void (%struct.snd_info_entry*, %struct.snd_info_buffer*)** %write, align 8, !tbaa !64
  %tobool3 = icmp ne void (%struct.snd_info_entry*, %struct.snd_info_buffer*)* %6, null
  br i1 %tobool3, label %if.then, label %if.end

if.then:                                          ; preds = %land.lhs.true
  %c4 = getelementptr inbounds %struct.snd_info_entry, %struct.snd_info_entry* %4, i32 0, i32 4
  %text5 = bitcast %union.anon.53* %c4 to %struct.snd_info_entry_text*
  %write6 = getelementptr inbounds %struct.snd_info_entry_text, %struct.snd_info_entry_text* %text5, i32 0, i32 1
  %7 = load void (%struct.snd_info_entry*, %struct.snd_info_buffer*)*, void (%struct.snd_info_entry*, %struct.snd_info_buffer*)** %write6, align 8, !tbaa !64
  %wbuffer7 = getelementptr inbounds %struct.snd_info_private_data, %struct.snd_info_private_data* %3, i32 0, i32 1
  %8 = load %struct.snd_info_buffer*, %struct.snd_info_buffer** %wbuffer7, align 8, !tbaa !80
  call void %7(%struct.snd_info_entry* %4, %struct.snd_info_buffer* %8)
  br label %if.end

if.end:                                           ; preds = %if.then, %land.lhs.true, %entry
  %call = call i32 @single_release(%struct.inode* %inode, %struct.file* %file)
  %rbuffer = getelementptr inbounds %struct.snd_info_private_data, %struct.snd_info_private_data* %3, i32 0, i32 0
  %9 = load %struct.snd_info_buffer*, %struct.snd_info_buffer** %rbuffer, align 8, !tbaa !83
  %10 = bitcast %struct.snd_info_buffer* %9 to i8*
  call void @kfree(i8* %10)
  %wbuffer8 = getelementptr inbounds %struct.snd_info_private_data, %struct.snd_info_private_data* %3, i32 0, i32 1
  %11 = load %struct.snd_info_buffer*, %struct.snd_info_buffer** %wbuffer8, align 8, !tbaa !80
  %tobool9 = icmp ne %struct.snd_info_buffer* %11, null
  br i1 %tobool9, label %if.then10, label %if.end13

if.then10:                                        ; preds = %if.end
  %wbuffer11 = getelementptr inbounds %struct.snd_info_private_data, %struct.snd_info_private_data* %3, i32 0, i32 1
  %12 = load %struct.snd_info_buffer*, %struct.snd_info_buffer** %wbuffer11, align 8, !tbaa !80
  %buffer = getelementptr inbounds %struct.snd_info_buffer, %struct.snd_info_buffer* %12, i32 0, i32 0
  %13 = load i8*, i8** %buffer, align 8, !tbaa !65
  call void @kfree(i8* %13)
  %wbuffer12 = getelementptr inbounds %struct.snd_info_private_data, %struct.snd_info_private_data* %3, i32 0, i32 1
  %14 = load %struct.snd_info_buffer*, %struct.snd_info_buffer** %wbuffer12, align 8, !tbaa !80
  %15 = bitcast %struct.snd_info_buffer* %14 to i8*
  call void @kfree(i8* %15)
  br label %if.end13

if.end13:                                         ; preds = %if.then10, %if.end
  %module = getelementptr inbounds %struct.snd_info_entry, %struct.snd_info_entry* %4, i32 0, i32 7
  %16 = load %struct.module*, %struct.module** %module, align 8, !tbaa !84
  call void @module_put(%struct.module* %16)
  %17 = bitcast %struct.snd_info_private_data* %3 to i8*
  call void @kfree(i8* %17)
  ret i32 0
}

declare i32 @single_release(%struct.inode*, %struct.file*) #2

declare i8* @PDE_DATA(%struct.inode*) #2

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64, i8* nocapture) #5

; Function Attrs: nounwind uwtable
define internal i32 @alloc_info_private(%struct.snd_info_entry* %entry1, %struct.snd_info_private_data** %ret) #0 {
entry:
  %tobool = icmp ne %struct.snd_info_entry* %entry1, null
  br i1 %tobool, label %lor.lhs.false, label %cleanup

lor.lhs.false:                                    ; preds = %entry
  %p = getelementptr inbounds %struct.snd_info_entry, %struct.snd_info_entry* %entry1, i32 0, i32 10
  %0 = load %struct.proc_dir_entry*, %struct.proc_dir_entry** %p, align 8, !tbaa !69
  %tobool2 = icmp ne %struct.proc_dir_entry* %0, null
  br i1 %tobool2, label %if.end, label %cleanup

if.end:                                           ; preds = %lor.lhs.false
  %module = getelementptr inbounds %struct.snd_info_entry, %struct.snd_info_entry* %entry1, i32 0, i32 7
  %1 = load %struct.module*, %struct.module** %module, align 8, !tbaa !84
  %call = call zeroext i1 @try_module_get(%struct.module* %1)
  br i1 %call, label %if.end4, label %cleanup

if.end4:                                          ; preds = %if.end
  %call5 = call i8* @kzalloc(i64 32, i32 20971712)
  %2 = bitcast i8* %call5 to %struct.snd_info_private_data*
  %tobool6 = icmp ne %struct.snd_info_private_data* %2, null
  br i1 %tobool6, label %if.end9, label %if.then7

if.then7:                                         ; preds = %if.end4
  %module8 = getelementptr inbounds %struct.snd_info_entry, %struct.snd_info_entry* %entry1, i32 0, i32 7
  %3 = load %struct.module*, %struct.module** %module8, align 8, !tbaa !84
  call void @module_put(%struct.module* %3)
  br label %cleanup

if.end9:                                          ; preds = %if.end4
  %entry10 = getelementptr inbounds %struct.snd_info_private_data, %struct.snd_info_private_data* %2, i32 0, i32 2
  store %struct.snd_info_entry* %entry1, %struct.snd_info_entry** %entry10, align 8, !tbaa !77
  store %struct.snd_info_private_data* %2, %struct.snd_info_private_data** %ret, align 8, !tbaa !6
  br label %cleanup

cleanup:                                          ; preds = %if.end9, %if.then7, %if.end, %lor.lhs.false, %entry
  %retval.0 = phi i32 [ 0, %if.end9 ], [ -12, %if.then7 ], [ -19, %lor.lhs.false ], [ -19, %entry ], [ -14, %if.end ]
  ret i32 %retval.0
}

; Function Attrs: inlinehint nounwind uwtable
define internal i8* @kzalloc(i64 %size, i32 %flags) #1 {
entry:
  %or = or i32 %flags, 32768
  %call = call i8* @kmalloc.6(i64 %size, i32 %or)
  ret i8* %call
}

; Function Attrs: nounwind uwtable
define internal i32 @snd_info_seq_show(%struct.seq_file* %seq, i8* %p) #0 {
entry:
  %private = getelementptr inbounds %struct.seq_file, %struct.seq_file* %seq, i32 0, i32 12
  %0 = load i8*, i8** %private, align 8, !tbaa !75
  %1 = bitcast i8* %0 to %struct.snd_info_private_data*
  %entry2 = getelementptr inbounds %struct.snd_info_private_data, %struct.snd_info_private_data* %1, i32 0, i32 2
  %2 = load %struct.snd_info_entry*, %struct.snd_info_entry** %entry2, align 8, !tbaa !77
  %c = getelementptr inbounds %struct.snd_info_entry, %struct.snd_info_entry* %2, i32 0, i32 4
  %text = bitcast %union.anon.53* %c to %struct.snd_info_entry_text*
  %read = getelementptr inbounds %struct.snd_info_entry_text, %struct.snd_info_entry_text* %text, i32 0, i32 0
  %3 = load void (%struct.snd_info_entry*, %struct.snd_info_buffer*)*, void (%struct.snd_info_entry*, %struct.snd_info_buffer*)** %read, align 8, !tbaa !64
  %tobool = icmp ne void (%struct.snd_info_entry*, %struct.snd_info_buffer*)* %3, null
  br i1 %tobool, label %if.else, label %cleanup

if.else:                                          ; preds = %entry
  %4 = bitcast %struct.seq_file* %seq to i8*
  %rbuffer = getelementptr inbounds %struct.snd_info_private_data, %struct.snd_info_private_data* %1, i32 0, i32 0
  %5 = load %struct.snd_info_buffer*, %struct.snd_info_buffer** %rbuffer, align 8, !tbaa !83
  %buffer = getelementptr inbounds %struct.snd_info_buffer, %struct.snd_info_buffer* %5, i32 0, i32 0
  store i8* %4, i8** %buffer, align 8, !tbaa !65
  %c3 = getelementptr inbounds %struct.snd_info_entry, %struct.snd_info_entry* %2, i32 0, i32 4
  %text4 = bitcast %union.anon.53* %c3 to %struct.snd_info_entry_text*
  %read5 = getelementptr inbounds %struct.snd_info_entry_text, %struct.snd_info_entry_text* %text4, i32 0, i32 0
  %6 = load void (%struct.snd_info_entry*, %struct.snd_info_buffer*)*, void (%struct.snd_info_entry*, %struct.snd_info_buffer*)** %read5, align 8, !tbaa !64
  %rbuffer6 = getelementptr inbounds %struct.snd_info_private_data, %struct.snd_info_private_data* %1, i32 0, i32 0
  %7 = load %struct.snd_info_buffer*, %struct.snd_info_buffer** %rbuffer6, align 8, !tbaa !83
  call void %6(%struct.snd_info_entry* %2, %struct.snd_info_buffer* %7)
  br label %cleanup

cleanup:                                          ; preds = %if.else, %entry
  %retval.0 = phi i32 [ 0, %if.else ], [ -5, %entry ]
  ret i32 %retval.0
}

declare i32 @single_open_size(%struct.file*, i32 (%struct.seq_file*, i8*)*, i8*, i64) #2

declare i32 @single_open(%struct.file*, i32 (%struct.seq_file*, i8*)*, i8*) #2

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64, i8* nocapture) #5

; Function Attrs: alwaysinline nounwind uwtable
define internal i8* @kmalloc.6(i64 %size, i32 %flags) #4 {
entry:
  %call = call noalias i8* @__kmalloc(i64 %size, i32 %flags)
  ret i8* %call
}

; Function Attrs: nounwind uwtable
define internal zeroext i1 @valid_pos(i64 %pos, i64 %count) #0 {
entry:
  %cmp = icmp slt i64 %pos, 0
  %cmp1 = icmp ne i64 %pos, %pos
  %or.cond = or i1 %cmp, %cmp1
  %cmp3 = icmp slt i64 %count, 0
  %or.cond1 = or i1 %or.cond, %cmp3
  br i1 %or.cond1, label %return, label %if.end

if.end:                                           ; preds = %entry
  %add = add i64 %pos, %count
  %cmp4 = icmp ult i64 %add, %pos
  %. = select i1 %cmp4, i1 false, i1 true
  br label %return

return:                                           ; preds = %if.end, %entry
  %retval.0 = phi i1 [ false, %entry ], [ %., %if.end ]
  ret i1 %retval.0
}

declare i8* @krealloc(i8*, i64, i32) #2

; Function Attrs: alwaysinline nounwind uwtable
define internal i64 @copy_from_user(i8* %to, i8* %from, i64 %n) #4 {
entry:
  %0 = call i64 @llvm.objectsize.i64.p0i8(i8* %to, i1 false, i1 true)
  %conv = trunc i64 %0 to i32
  call void @might_fault()
  %conv1 = trunc i64 %n to i32
  call void @kasan_check_write(i8* %to, i32 %conv1)
  %cmp = icmp slt i32 %conv, 0
  %conv3 = sext i32 %conv to i64
  %cmp4 = icmp uge i64 %conv3, %n
  %1 = select i1 %cmp, i1 true, i1 %cmp4
  %lnot = xor i1 %1, true
  %lnot6 = xor i1 %lnot, true
  %lnot.ext = zext i1 %lnot6 to i32
  %conv7 = sext i32 %lnot.ext to i64
  %expval = call i64 @llvm.expect.i64(i64 %conv7, i64 1)
  %tobool = icmp ne i64 %expval, 0
  br i1 %tobool, label %if.then, label %if.else

if.then:                                          ; preds = %entry
  call void @check_object_size(i8* %to, i64 %n, i1 zeroext false)
  %conv8 = trunc i64 %n to i32
  %call = call i64 @_copy_from_user(i8* %to, i8* %from, i32 %conv8)
  br label %if.end

if.else:                                          ; preds = %entry
  call void @copy_user_overflow(i32 %conv, i64 %n)
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then
  %n.addr.0 = phi i64 [ %call, %if.then ], [ %n, %if.else ]
  ret i64 %n.addr.0
}

; Function Attrs: nounwind readnone speculatable
declare i64 @llvm.objectsize.i64.p0i8(i8*, i1, i1) #6

; Function Attrs: inlinehint nounwind uwtable
define internal void @might_fault() #1 {
entry:
  ret void
}

; Function Attrs: inlinehint nounwind uwtable
define internal void @kasan_check_write(i8* %p, i32 %size) #1 {
entry:
  ret void
}

; Function Attrs: inlinehint nounwind uwtable
define internal void @check_object_size(i8* %ptr, i64 %n, i1 zeroext %to_user) #1 {
entry:
  %frombool = zext i1 %to_user to i8
  ret void
}

declare i64 @_copy_from_user(i8*, i8*, i32) #2

; Function Attrs: inlinehint nounwind uwtable
define internal void @copy_user_overflow(i32 %size, i64 %count) #1 {
entry:
  %tobool = icmp ne i32 1, 0
  %lnot = xor i1 %tobool, true
  %lnot1 = xor i1 %lnot, true
  %lnot.ext = zext i1 %lnot1 to i32
  %conv = sext i32 %lnot.ext to i64
  %expval = call i64 @llvm.expect.i64(i64 %conv, i64 0)
  %tobool2 = icmp ne i64 %expval, 0
  br i1 %tobool2, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  call void (i8*, i32, i8*, ...) @warn_slowpath_fmt(i8* getelementptr inbounds ([33 x i8], [33 x i8]* @.str.15.7, i32 0, i32 0), i32 688, i8* getelementptr inbounds ([38 x i8], [38 x i8]* @.str.16.8, i32 0, i32 0), i32 %size, i64 %count)
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  %tobool3 = icmp ne i32 1, 0
  %lnot4 = xor i1 %tobool3, true
  %lnot6 = xor i1 %lnot4, true
  %lnot.ext7 = zext i1 %lnot6 to i32
  %conv8 = sext i32 %lnot.ext7 to i64
  %expval9 = call i64 @llvm.expect.i64(i64 %conv8, i64 0)
  ret void
}

declare void @warn_slowpath_fmt(i8*, i32, i8*, ...) #2

; Function Attrs: nounwind uwtable
define internal i64 @snd_info_entry_llseek(%struct.file* %file, i64 %offset, i32 %orig) #0 {
entry:
  %private_data = getelementptr inbounds %struct.file, %struct.file* %file, i32 0, i32 15
  %0 = load i8*, i8** %private_data, align 8, !tbaa !74
  %1 = bitcast i8* %0 to %struct.snd_info_private_data*
  %entry2 = getelementptr inbounds %struct.snd_info_private_data, %struct.snd_info_private_data* %1, i32 0, i32 2
  %2 = load %struct.snd_info_entry*, %struct.snd_info_entry** %entry2, align 8, !tbaa !77
  %access = getelementptr inbounds %struct.snd_info_entry, %struct.snd_info_entry* %2, i32 0, i32 11
  call void @mutex_lock(%struct.mutex* %access)
  %c = getelementptr inbounds %struct.snd_info_entry, %struct.snd_info_entry* %2, i32 0, i32 4
  %ops = bitcast %union.anon.53* %c to %struct.snd_info_entry_ops**
  %3 = load %struct.snd_info_entry_ops*, %struct.snd_info_entry_ops** %ops, align 8, !tbaa !64
  %llseek = getelementptr inbounds %struct.snd_info_entry_ops, %struct.snd_info_entry_ops* %3, i32 0, i32 4
  %4 = load i64 (%struct.snd_info_entry*, i8*, %struct.file*, i64, i32)*, i64 (%struct.snd_info_entry*, i8*, %struct.file*, i64, i32)** %llseek, align 8, !tbaa !85
  %tobool = icmp ne i64 (%struct.snd_info_entry*, i8*, %struct.file*, i64, i32)* %4, null
  br i1 %tobool, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %c3 = getelementptr inbounds %struct.snd_info_entry, %struct.snd_info_entry* %2, i32 0, i32 4
  %ops4 = bitcast %union.anon.53* %c3 to %struct.snd_info_entry_ops**
  %5 = load %struct.snd_info_entry_ops*, %struct.snd_info_entry_ops** %ops4, align 8, !tbaa !64
  %llseek5 = getelementptr inbounds %struct.snd_info_entry_ops, %struct.snd_info_entry_ops* %5, i32 0, i32 4
  %6 = load i64 (%struct.snd_info_entry*, i8*, %struct.file*, i64, i32)*, i64 (%struct.snd_info_entry*, i8*, %struct.file*, i64, i32)** %llseek5, align 8, !tbaa !85
  %file_private_data = getelementptr inbounds %struct.snd_info_private_data, %struct.snd_info_private_data* %1, i32 0, i32 3
  %7 = load i8*, i8** %file_private_data, align 8, !tbaa !87
  %call = call i64 %6(%struct.snd_info_entry* %2, i8* %7, %struct.file* %file, i64 %offset, i32 %orig)
  br label %out

if.end:                                           ; preds = %entry
  %size6 = getelementptr inbounds %struct.snd_info_entry, %struct.snd_info_entry* %2, i32 0, i32 2
  %8 = load i64, i64* %size6, align 8, !tbaa !73
  br label %NodeBlock3

NodeBlock3:                                       ; preds = %if.end
  %Pivot4 = icmp slt i32 %orig, 1
  br i1 %Pivot4, label %LeafBlock, label %NodeBlock

NodeBlock:                                        ; preds = %NodeBlock3
  %Pivot = icmp slt i32 %orig, 2
  br i1 %Pivot, label %sw.bb, label %LeafBlock1

LeafBlock1:                                       ; preds = %NodeBlock
  %SwitchLeaf2 = icmp eq i32 %orig, 2
  br i1 %SwitchLeaf2, label %sw.bb7, label %NewDefault

LeafBlock:                                        ; preds = %NodeBlock3
  %SwitchLeaf = icmp eq i32 %orig, 0
  br i1 %SwitchLeaf, label %sw.epilog, label %NewDefault

sw.bb:                                            ; preds = %NodeBlock
  %f_pos = getelementptr inbounds %struct.file, %struct.file* %file, i32 0, i32 9
  %9 = load i64, i64* %f_pos, align 8, !tbaa !88
  %add = add nsw i64 %offset, %9
  br label %sw.epilog

sw.bb7:                                           ; preds = %LeafBlock1
  %tobool8 = icmp ne i64 %8, 0
  br i1 %tobool8, label %if.end10, label %out

if.end10:                                         ; preds = %sw.bb7
  %add11 = add nsw i64 %offset, %8
  br label %sw.epilog

sw.epilog:                                        ; preds = %if.end10, %sw.bb, %LeafBlock
  %offset.addr.0 = phi i64 [ %add11, %if.end10 ], [ %add, %sw.bb ], [ %offset, %LeafBlock ]
  %cmp = icmp slt i64 %offset.addr.0, 0
  br i1 %cmp, label %out, label %if.end13

if.end13:                                         ; preds = %sw.epilog
  %tobool14 = icmp ne i64 %8, 0
  %cmp15 = icmp sgt i64 %offset.addr.0, %8
  %or.cond = and i1 %tobool14, %cmp15
  %offset.addr.1 = select i1 %or.cond, i64 %8, i64 %offset.addr.0
  %f_pos18 = getelementptr inbounds %struct.file, %struct.file* %file, i32 0, i32 9
  store i64 %offset.addr.1, i64* %f_pos18, align 8, !tbaa !88
  br label %out

NewDefault:                                       ; preds = %LeafBlock, %LeafBlock1
  br label %out

out:                                              ; preds = %NewDefault, %if.end13, %sw.epilog, %sw.bb7, %if.then
  %ret.0 = phi i64 [ -22, %if.then ], [ %offset.addr.1, %if.end13 ], [ -22, %sw.bb7 ], [ -22, %NewDefault ], [ -22, %sw.epilog ]
  %access19 = getelementptr inbounds %struct.snd_info_entry, %struct.snd_info_entry* %2, i32 0, i32 11
  call void @mutex_unlock(%struct.mutex* %access19)
  ret i64 %ret.0
}

; Function Attrs: nounwind uwtable
define internal i64 @snd_info_entry_read(%struct.file* %file, i8* %buffer, i64 %count, i64* %offset) #0 {
entry:
  %__UNIQUE_ID_min1_12 = alloca i64, align 8
  %__UNIQUE_ID_min2_13 = alloca i64, align 8
  %private_data = getelementptr inbounds %struct.file, %struct.file* %file, i32 0, i32 15
  %0 = load i8*, i8** %private_data, align 8, !tbaa !74
  %1 = bitcast i8* %0 to %struct.snd_info_private_data*
  %entry2 = getelementptr inbounds %struct.snd_info_private_data, %struct.snd_info_private_data* %1, i32 0, i32 2
  %2 = load %struct.snd_info_entry*, %struct.snd_info_entry** %entry2, align 8, !tbaa !77
  %3 = load i64, i64* %offset, align 8, !tbaa !79
  %call = call zeroext i1 @valid_pos(i64 %3, i64 %count)
  br i1 %call, label %if.end, label %cleanup

if.end:                                           ; preds = %entry
  %size3 = getelementptr inbounds %struct.snd_info_entry, %struct.snd_info_entry* %2, i32 0, i32 2
  %4 = load i64, i64* %size3, align 8, !tbaa !73
  %cmp = icmp sge i64 %3, %4
  br i1 %cmp, label %cleanup, label %if.end5

if.end5:                                          ; preds = %if.end
  %size6 = getelementptr inbounds %struct.snd_info_entry, %struct.snd_info_entry* %2, i32 0, i32 2
  %5 = load i64, i64* %size6, align 8, !tbaa !73
  %sub = sub nsw i64 %5, %3
  %6 = bitcast i64* %__UNIQUE_ID_min1_12 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %6) #7
  store i64 %count, i64* %__UNIQUE_ID_min1_12, align 8, !tbaa !89
  %7 = bitcast i64* %__UNIQUE_ID_min2_13 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %7) #7
  store i64 %sub, i64* %__UNIQUE_ID_min2_13, align 8, !tbaa !89
  %cmp7 = icmp eq i64* %__UNIQUE_ID_min1_12, %__UNIQUE_ID_min2_13
  %conv = zext i1 %cmp7 to i32
  %8 = load i64, i64* %__UNIQUE_ID_min1_12, align 8, !tbaa !89
  %9 = load i64, i64* %__UNIQUE_ID_min2_13, align 8, !tbaa !89
  %cmp8 = icmp ult i64 %8, %9
  %10 = load i64, i64* %__UNIQUE_ID_min1_12, align 8
  %11 = load i64, i64* %__UNIQUE_ID_min2_13, align 8
  %cond = select i1 %cmp8, i64 %10, i64 %11
  %12 = bitcast i64* %__UNIQUE_ID_min2_13 to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %12) #7
  %13 = bitcast i64* %__UNIQUE_ID_min1_12 to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %13) #7
  %c = getelementptr inbounds %struct.snd_info_entry, %struct.snd_info_entry* %2, i32 0, i32 4
  %ops = bitcast %union.anon.53* %c to %struct.snd_info_entry_ops**
  %14 = load %struct.snd_info_entry_ops*, %struct.snd_info_entry_ops** %ops, align 8, !tbaa !64
  %read = getelementptr inbounds %struct.snd_info_entry_ops, %struct.snd_info_entry_ops* %14, i32 0, i32 2
  %15 = load i64 (%struct.snd_info_entry*, i8*, %struct.file*, i8*, i64, i64)*, i64 (%struct.snd_info_entry*, i8*, %struct.file*, i8*, i64, i64)** %read, align 8, !tbaa !90
  %file_private_data = getelementptr inbounds %struct.snd_info_private_data, %struct.snd_info_private_data* %1, i32 0, i32 3
  %16 = load i8*, i8** %file_private_data, align 8, !tbaa !87
  %call10 = call i64 %15(%struct.snd_info_entry* %2, i8* %16, %struct.file* %file, i8* %buffer, i64 %cond, i64 %3)
  %cmp11 = icmp sgt i64 %call10, 0
  br i1 %cmp11, label %if.then13, label %cleanup

if.then13:                                        ; preds = %if.end5
  %add = add i64 %3, %call10
  store i64 %add, i64* %offset, align 8, !tbaa !79
  br label %cleanup

cleanup:                                          ; preds = %if.then13, %if.end5, %if.end, %entry
  %retval.0 = phi i64 [ -5, %entry ], [ 0, %if.end ], [ %call10, %if.then13 ], [ %call10, %if.end5 ]
  ret i64 %retval.0
}

; Function Attrs: nounwind uwtable
define internal i64 @snd_info_entry_write(%struct.file* %file, i8* %buffer, i64 %count, i64* %offset) #0 {
entry:
  %__UNIQUE_ID_min1_14 = alloca i64, align 8
  %__UNIQUE_ID_min2_15 = alloca i64, align 8
  %private_data = getelementptr inbounds %struct.file, %struct.file* %file, i32 0, i32 15
  %0 = load i8*, i8** %private_data, align 8, !tbaa !74
  %1 = bitcast i8* %0 to %struct.snd_info_private_data*
  %entry2 = getelementptr inbounds %struct.snd_info_private_data, %struct.snd_info_private_data* %1, i32 0, i32 2
  %2 = load %struct.snd_info_entry*, %struct.snd_info_entry** %entry2, align 8, !tbaa !77
  %3 = load i64, i64* %offset, align 8, !tbaa !79
  %call = call zeroext i1 @valid_pos(i64 %3, i64 %count)
  br i1 %call, label %if.end, label %cleanup

if.end:                                           ; preds = %entry
  %cmp = icmp ugt i64 %count, 0
  br i1 %cmp, label %if.then3, label %if.end9

if.then3:                                         ; preds = %if.end
  %size4 = getelementptr inbounds %struct.snd_info_entry, %struct.snd_info_entry* %2, i32 0, i32 2
  %4 = load i64, i64* %size4, align 8, !tbaa !73
  %sub = sub nsw i64 %4, %3
  %5 = bitcast i64* %__UNIQUE_ID_min1_14 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %5) #7
  store i64 %count, i64* %__UNIQUE_ID_min1_14, align 8, !tbaa !89
  %6 = bitcast i64* %__UNIQUE_ID_min2_15 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %6) #7
  store i64 %sub, i64* %__UNIQUE_ID_min2_15, align 8, !tbaa !89
  %cmp5 = icmp eq i64* %__UNIQUE_ID_min1_14, %__UNIQUE_ID_min2_15
  %conv = zext i1 %cmp5 to i32
  %7 = load i64, i64* %__UNIQUE_ID_min1_14, align 8, !tbaa !89
  %8 = load i64, i64* %__UNIQUE_ID_min2_15, align 8, !tbaa !89
  %cmp6 = icmp ult i64 %7, %8
  %9 = load i64, i64* %__UNIQUE_ID_min1_14, align 8
  %10 = load i64, i64* %__UNIQUE_ID_min2_15, align 8
  %cond = select i1 %cmp6, i64 %9, i64 %10
  %11 = bitcast i64* %__UNIQUE_ID_min2_15 to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %11) #7
  %12 = bitcast i64* %__UNIQUE_ID_min1_14 to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %12) #7
  %c = getelementptr inbounds %struct.snd_info_entry, %struct.snd_info_entry* %2, i32 0, i32 4
  %ops = bitcast %union.anon.53* %c to %struct.snd_info_entry_ops**
  %13 = load %struct.snd_info_entry_ops*, %struct.snd_info_entry_ops** %ops, align 8, !tbaa !64
  %write = getelementptr inbounds %struct.snd_info_entry_ops, %struct.snd_info_entry_ops* %13, i32 0, i32 3
  %14 = load i64 (%struct.snd_info_entry*, i8*, %struct.file*, i8*, i64, i64)*, i64 (%struct.snd_info_entry*, i8*, %struct.file*, i8*, i64, i64)** %write, align 8, !tbaa !91
  %file_private_data = getelementptr inbounds %struct.snd_info_private_data, %struct.snd_info_private_data* %1, i32 0, i32 3
  %15 = load i8*, i8** %file_private_data, align 8, !tbaa !87
  %call8 = call i64 %14(%struct.snd_info_entry* %2, i8* %15, %struct.file* %file, i8* %buffer, i64 %cond, i64 %3)
  br label %if.end9

if.end9:                                          ; preds = %if.then3, %if.end
  %size.0 = phi i64 [ %call8, %if.then3 ], [ 0, %if.end ]
  %cmp10 = icmp sgt i64 %size.0, 0
  br i1 %cmp10, label %if.then12, label %cleanup

if.then12:                                        ; preds = %if.end9
  %add = add nsw i64 %3, %size.0
  store i64 %add, i64* %offset, align 8, !tbaa !79
  br label %cleanup

cleanup:                                          ; preds = %if.then12, %if.end9, %entry
  %retval.0 = phi i64 [ -5, %entry ], [ %size.0, %if.then12 ], [ %size.0, %if.end9 ]
  ret i64 %retval.0
}

; Function Attrs: nounwind uwtable
define internal i32 @snd_info_entry_poll(%struct.file* %file, %struct.poll_table_struct* %wait) #0 {
entry:
  %private_data = getelementptr inbounds %struct.file, %struct.file* %file, i32 0, i32 15
  %0 = load i8*, i8** %private_data, align 8, !tbaa !74
  %1 = bitcast i8* %0 to %struct.snd_info_private_data*
  %entry2 = getelementptr inbounds %struct.snd_info_private_data, %struct.snd_info_private_data* %1, i32 0, i32 2
  %2 = load %struct.snd_info_entry*, %struct.snd_info_entry** %entry2, align 8, !tbaa !77
  %c = getelementptr inbounds %struct.snd_info_entry, %struct.snd_info_entry* %2, i32 0, i32 4
  %ops = bitcast %union.anon.53* %c to %struct.snd_info_entry_ops**
  %3 = load %struct.snd_info_entry_ops*, %struct.snd_info_entry_ops** %ops, align 8, !tbaa !64
  %poll = getelementptr inbounds %struct.snd_info_entry_ops, %struct.snd_info_entry_ops* %3, i32 0, i32 5
  %4 = load i32 (%struct.snd_info_entry*, i8*, %struct.file*, %struct.poll_table_struct*)*, i32 (%struct.snd_info_entry*, i8*, %struct.file*, %struct.poll_table_struct*)** %poll, align 8, !tbaa !92
  %tobool = icmp ne i32 (%struct.snd_info_entry*, i8*, %struct.file*, %struct.poll_table_struct*)* %4, null
  %c3 = getelementptr inbounds %struct.snd_info_entry, %struct.snd_info_entry* %2, i32 0, i32 4
  %ops4 = bitcast %union.anon.53* %c3 to %struct.snd_info_entry_ops**
  %5 = load %struct.snd_info_entry_ops*, %struct.snd_info_entry_ops** %ops4, align 8, !tbaa !64
  br i1 %tobool, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %poll5 = getelementptr inbounds %struct.snd_info_entry_ops, %struct.snd_info_entry_ops* %5, i32 0, i32 5
  %6 = load i32 (%struct.snd_info_entry*, i8*, %struct.file*, %struct.poll_table_struct*)*, i32 (%struct.snd_info_entry*, i8*, %struct.file*, %struct.poll_table_struct*)** %poll5, align 8, !tbaa !92
  %file_private_data = getelementptr inbounds %struct.snd_info_private_data, %struct.snd_info_private_data* %1, i32 0, i32 3
  %7 = load i8*, i8** %file_private_data, align 8, !tbaa !87
  %call = call i32 %6(%struct.snd_info_entry* %2, i8* %7, %struct.file* %file, %struct.poll_table_struct* %wait)
  br label %cleanup

if.end:                                           ; preds = %entry
  %read = getelementptr inbounds %struct.snd_info_entry_ops, %struct.snd_info_entry_ops* %5, i32 0, i32 2
  %8 = load i64 (%struct.snd_info_entry*, i8*, %struct.file*, i8*, i64, i64)*, i64 (%struct.snd_info_entry*, i8*, %struct.file*, i8*, i64, i64)** %read, align 8, !tbaa !90
  %tobool8 = icmp ne i64 (%struct.snd_info_entry*, i8*, %struct.file*, i8*, i64, i64)* %8, null
  %or = or i32 0, 65
  %or. = select i1 %tobool8, i32 %or, i32 0
  %c11 = getelementptr inbounds %struct.snd_info_entry, %struct.snd_info_entry* %2, i32 0, i32 4
  %ops12 = bitcast %union.anon.53* %c11 to %struct.snd_info_entry_ops**
  %9 = load %struct.snd_info_entry_ops*, %struct.snd_info_entry_ops** %ops12, align 8, !tbaa !64
  %write = getelementptr inbounds %struct.snd_info_entry_ops, %struct.snd_info_entry_ops* %9, i32 0, i32 3
  %10 = load i64 (%struct.snd_info_entry*, i8*, %struct.file*, i8*, i64, i64)*, i64 (%struct.snd_info_entry*, i8*, %struct.file*, i8*, i64, i64)** %write, align 8, !tbaa !91
  %tobool13 = icmp ne i64 (%struct.snd_info_entry*, i8*, %struct.file*, i8*, i64, i64)* %10, null
  %or15 = or i32 %or., 260
  %mask.1 = select i1 %tobool13, i32 %or15, i32 %or.
  br label %cleanup

cleanup:                                          ; preds = %if.end, %if.then
  %retval.0 = phi i32 [ %call, %if.then ], [ %mask.1, %if.end ]
  ret i32 %retval.0
}

; Function Attrs: nounwind uwtable
define internal i64 @snd_info_entry_ioctl(%struct.file* %file, i32 %cmd, i64 %arg) #0 {
entry:
  %private_data = getelementptr inbounds %struct.file, %struct.file* %file, i32 0, i32 15
  %0 = load i8*, i8** %private_data, align 8, !tbaa !74
  %1 = bitcast i8* %0 to %struct.snd_info_private_data*
  %entry2 = getelementptr inbounds %struct.snd_info_private_data, %struct.snd_info_private_data* %1, i32 0, i32 2
  %2 = load %struct.snd_info_entry*, %struct.snd_info_entry** %entry2, align 8, !tbaa !77
  %c = getelementptr inbounds %struct.snd_info_entry, %struct.snd_info_entry* %2, i32 0, i32 4
  %ops = bitcast %union.anon.53* %c to %struct.snd_info_entry_ops**
  %3 = load %struct.snd_info_entry_ops*, %struct.snd_info_entry_ops** %ops, align 8, !tbaa !64
  %ioctl = getelementptr inbounds %struct.snd_info_entry_ops, %struct.snd_info_entry_ops* %3, i32 0, i32 6
  %4 = load i32 (%struct.snd_info_entry*, i8*, %struct.file*, i32, i64)*, i32 (%struct.snd_info_entry*, i8*, %struct.file*, i32, i64)** %ioctl, align 8, !tbaa !93
  %tobool = icmp ne i32 (%struct.snd_info_entry*, i8*, %struct.file*, i32, i64)* %4, null
  br i1 %tobool, label %if.end, label %cleanup

if.end:                                           ; preds = %entry
  %c3 = getelementptr inbounds %struct.snd_info_entry, %struct.snd_info_entry* %2, i32 0, i32 4
  %ops4 = bitcast %union.anon.53* %c3 to %struct.snd_info_entry_ops**
  %5 = load %struct.snd_info_entry_ops*, %struct.snd_info_entry_ops** %ops4, align 8, !tbaa !64
  %ioctl5 = getelementptr inbounds %struct.snd_info_entry_ops, %struct.snd_info_entry_ops* %5, i32 0, i32 6
  %6 = load i32 (%struct.snd_info_entry*, i8*, %struct.file*, i32, i64)*, i32 (%struct.snd_info_entry*, i8*, %struct.file*, i32, i64)** %ioctl5, align 8, !tbaa !93
  %file_private_data = getelementptr inbounds %struct.snd_info_private_data, %struct.snd_info_private_data* %1, i32 0, i32 3
  %7 = load i8*, i8** %file_private_data, align 8, !tbaa !87
  %call = call i32 %6(%struct.snd_info_entry* %2, i8* %7, %struct.file* %file, i32 %cmd, i64 %arg)
  %conv = sext i32 %call to i64
  br label %cleanup

cleanup:                                          ; preds = %if.end, %entry
  %retval.0 = phi i64 [ %conv, %if.end ], [ -25, %entry ]
  ret i64 %retval.0
}

; Function Attrs: nounwind uwtable
define internal i32 @snd_info_entry_mmap(%struct.file* %file, %struct.vm_area_struct* %vma) #0 {
entry:
  %call = call %struct.inode* @file_inode(%struct.file* %file)
  %private_data = getelementptr inbounds %struct.file, %struct.file* %file, i32 0, i32 15
  %0 = load i8*, i8** %private_data, align 8, !tbaa !74
  %1 = bitcast i8* %0 to %struct.snd_info_private_data*
  %cmp = icmp eq %struct.snd_info_private_data* %1, null
  br i1 %cmp, label %cleanup, label %if.end

if.end:                                           ; preds = %entry
  %entry2 = getelementptr inbounds %struct.snd_info_private_data, %struct.snd_info_private_data* %1, i32 0, i32 2
  %2 = load %struct.snd_info_entry*, %struct.snd_info_entry** %entry2, align 8, !tbaa !77
  %c = getelementptr inbounds %struct.snd_info_entry, %struct.snd_info_entry* %2, i32 0, i32 4
  %ops = bitcast %union.anon.53* %c to %struct.snd_info_entry_ops**
  %3 = load %struct.snd_info_entry_ops*, %struct.snd_info_entry_ops** %ops, align 8, !tbaa !64
  %mmap = getelementptr inbounds %struct.snd_info_entry_ops, %struct.snd_info_entry_ops* %3, i32 0, i32 7
  %4 = load i32 (%struct.snd_info_entry*, i8*, %struct.inode*, %struct.file*, %struct.vm_area_struct*)*, i32 (%struct.snd_info_entry*, i8*, %struct.inode*, %struct.file*, %struct.vm_area_struct*)** %mmap, align 8, !tbaa !94
  %tobool = icmp ne i32 (%struct.snd_info_entry*, i8*, %struct.inode*, %struct.file*, %struct.vm_area_struct*)* %4, null
  br i1 %tobool, label %if.end4, label %cleanup

if.end4:                                          ; preds = %if.end
  %c5 = getelementptr inbounds %struct.snd_info_entry, %struct.snd_info_entry* %2, i32 0, i32 4
  %ops6 = bitcast %union.anon.53* %c5 to %struct.snd_info_entry_ops**
  %5 = load %struct.snd_info_entry_ops*, %struct.snd_info_entry_ops** %ops6, align 8, !tbaa !64
  %mmap7 = getelementptr inbounds %struct.snd_info_entry_ops, %struct.snd_info_entry_ops* %5, i32 0, i32 7
  %6 = load i32 (%struct.snd_info_entry*, i8*, %struct.inode*, %struct.file*, %struct.vm_area_struct*)*, i32 (%struct.snd_info_entry*, i8*, %struct.inode*, %struct.file*, %struct.vm_area_struct*)** %mmap7, align 8, !tbaa !94
  %file_private_data = getelementptr inbounds %struct.snd_info_private_data, %struct.snd_info_private_data* %1, i32 0, i32 3
  %7 = load i8*, i8** %file_private_data, align 8, !tbaa !87
  %call8 = call i32 %6(%struct.snd_info_entry* %2, i8* %7, %struct.inode* %call, %struct.file* %file, %struct.vm_area_struct* %vma)
  br label %cleanup

cleanup:                                          ; preds = %if.end4, %if.end, %entry
  %retval.0 = phi i32 [ %call8, %if.end4 ], [ 0, %entry ], [ -6, %if.end ]
  ret i32 %retval.0
}

; Function Attrs: nounwind uwtable
define internal i32 @snd_info_entry_open(%struct.inode* %inode, %struct.file* %file) #0 {
entry:
  %data = alloca %struct.snd_info_private_data*, align 8
  %call = call i8* @PDE_DATA(%struct.inode* %inode)
  %0 = bitcast i8* %call to %struct.snd_info_entry*
  %1 = bitcast %struct.snd_info_private_data** %data to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %1) #7
  call void @mutex_lock(%struct.mutex* @info_mutex)
  %call2 = call i32 @alloc_info_private(%struct.snd_info_entry* %0, %struct.snd_info_private_data** %data)
  %cmp = icmp slt i32 %call2, 0
  br i1 %cmp, label %unlock, label %if.end

if.end:                                           ; preds = %entry
  %f_flags = getelementptr inbounds %struct.file, %struct.file* %file, i32 0, i32 6
  %2 = load i32, i32* %f_flags, align 8, !tbaa !95
  %and = and i32 %2, 3
  br label %NodeBlock3

NodeBlock3:                                       ; preds = %if.end
  %Pivot4 = icmp slt i32 %and, 1
  br i1 %Pivot4, label %LeafBlock, label %NodeBlock

NodeBlock:                                        ; preds = %NodeBlock3
  %Pivot = icmp slt i32 %and, 2
  br i1 %Pivot, label %land.lhs.true9, label %LeafBlock1

LeafBlock1:                                       ; preds = %NodeBlock
  %SwitchLeaf2 = icmp eq i32 %and, 2
  br i1 %SwitchLeaf2, label %land.lhs.true, label %NewDefault

LeafBlock:                                        ; preds = %NodeBlock3
  %SwitchLeaf = icmp eq i32 %and, 0
  br i1 %SwitchLeaf, label %land.lhs.true, label %NewDefault

land.lhs.true:                                    ; preds = %LeafBlock, %LeafBlock1
  %c = getelementptr inbounds %struct.snd_info_entry, %struct.snd_info_entry* %0, i32 0, i32 4
  %ops = bitcast %union.anon.53* %c to %struct.snd_info_entry_ops**
  %3 = load %struct.snd_info_entry_ops*, %struct.snd_info_entry_ops** %ops, align 8, !tbaa !64
  %read = getelementptr inbounds %struct.snd_info_entry_ops, %struct.snd_info_entry_ops* %3, i32 0, i32 2
  %4 = load i64 (%struct.snd_info_entry*, i8*, %struct.file*, i8*, i64, i64)*, i64 (%struct.snd_info_entry*, i8*, %struct.file*, i8*, i64, i64)** %read, align 8, !tbaa !90
  %tobool = icmp ne i64 (%struct.snd_info_entry*, i8*, %struct.file*, i8*, i64, i64)* %4, null
  br i1 %tobool, label %lor.lhs.false5, label %error

lor.lhs.false5:                                   ; preds = %land.lhs.true
  %and.off = add i32 %and, -1
  %switch = icmp ult i32 %and.off, 2
  br i1 %switch, label %land.lhs.true9, label %if.end14

land.lhs.true9:                                   ; preds = %lor.lhs.false5, %NodeBlock
  %c10 = getelementptr inbounds %struct.snd_info_entry, %struct.snd_info_entry* %0, i32 0, i32 4
  %ops11 = bitcast %union.anon.53* %c10 to %struct.snd_info_entry_ops**
  %5 = load %struct.snd_info_entry_ops*, %struct.snd_info_entry_ops** %ops11, align 8, !tbaa !64
  %write = getelementptr inbounds %struct.snd_info_entry_ops, %struct.snd_info_entry_ops* %5, i32 0, i32 3
  %6 = load i64 (%struct.snd_info_entry*, i8*, %struct.file*, i8*, i64, i64)*, i64 (%struct.snd_info_entry*, i8*, %struct.file*, i8*, i64, i64)** %write, align 8, !tbaa !91
  %tobool12 = icmp ne i64 (%struct.snd_info_entry*, i8*, %struct.file*, i8*, i64, i64)* %6, null
  br i1 %tobool12, label %if.end14, label %error

NewDefault:                                       ; preds = %LeafBlock, %LeafBlock1
  br label %if.end14

if.end14:                                         ; preds = %NewDefault, %land.lhs.true9, %lor.lhs.false5
  %c15 = getelementptr inbounds %struct.snd_info_entry, %struct.snd_info_entry* %0, i32 0, i32 4
  %ops16 = bitcast %union.anon.53* %c15 to %struct.snd_info_entry_ops**
  %7 = load %struct.snd_info_entry_ops*, %struct.snd_info_entry_ops** %ops16, align 8, !tbaa !64
  %open = getelementptr inbounds %struct.snd_info_entry_ops, %struct.snd_info_entry_ops* %7, i32 0, i32 0
  %8 = load i32 (%struct.snd_info_entry*, i16, i8**)*, i32 (%struct.snd_info_entry*, i16, i8**)** %open, align 8, !tbaa !96
  %tobool17 = icmp ne i32 (%struct.snd_info_entry*, i16, i8**)* %8, null
  br i1 %tobool17, label %if.then18, label %if.end27

if.then18:                                        ; preds = %if.end14
  %c19 = getelementptr inbounds %struct.snd_info_entry, %struct.snd_info_entry* %0, i32 0, i32 4
  %ops20 = bitcast %union.anon.53* %c19 to %struct.snd_info_entry_ops**
  %9 = load %struct.snd_info_entry_ops*, %struct.snd_info_entry_ops** %ops20, align 8, !tbaa !64
  %open21 = getelementptr inbounds %struct.snd_info_entry_ops, %struct.snd_info_entry_ops* %9, i32 0, i32 0
  %10 = load i32 (%struct.snd_info_entry*, i16, i8**)*, i32 (%struct.snd_info_entry*, i16, i8**)** %open21, align 8, !tbaa !96
  %conv = trunc i32 %and to i16
  %11 = load %struct.snd_info_private_data*, %struct.snd_info_private_data** %data, align 8, !tbaa !6
  %file_private_data = getelementptr inbounds %struct.snd_info_private_data, %struct.snd_info_private_data* %11, i32 0, i32 3
  %call22 = call i32 %10(%struct.snd_info_entry* %0, i16 zeroext %conv, i8** %file_private_data)
  %cmp23 = icmp slt i32 %call22, 0
  br i1 %cmp23, label %error, label %if.end27

if.end27:                                         ; preds = %if.then18, %if.end14
  %12 = load %struct.snd_info_private_data*, %struct.snd_info_private_data** %data, align 8, !tbaa !6
  %13 = bitcast %struct.snd_info_private_data* %12 to i8*
  %private_data = getelementptr inbounds %struct.file, %struct.file* %file, i32 0, i32 15
  store i8* %13, i8** %private_data, align 8, !tbaa !74
  call void @mutex_unlock(%struct.mutex* @info_mutex)
  br label %cleanup

error:                                            ; preds = %if.then18, %land.lhs.true9, %land.lhs.true
  %err.0 = phi i32 [ -19, %land.lhs.true9 ], [ -19, %land.lhs.true ], [ %call22, %if.then18 ]
  %14 = load %struct.snd_info_private_data*, %struct.snd_info_private_data** %data, align 8, !tbaa !6
  %15 = bitcast %struct.snd_info_private_data* %14 to i8*
  call void @kfree(i8* %15)
  %module = getelementptr inbounds %struct.snd_info_entry, %struct.snd_info_entry* %0, i32 0, i32 7
  %16 = load %struct.module*, %struct.module** %module, align 8, !tbaa !84
  call void @module_put(%struct.module* %16)
  br label %unlock

unlock:                                           ; preds = %error, %entry
  %err.1 = phi i32 [ %err.0, %error ], [ %call2, %entry ]
  call void @mutex_unlock(%struct.mutex* @info_mutex)
  br label %cleanup

cleanup:                                          ; preds = %unlock, %if.end27
  %retval.0 = phi i32 [ %err.1, %unlock ], [ 0, %if.end27 ]
  %17 = bitcast %struct.snd_info_private_data** %data to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %17) #7
  ret i32 %retval.0
}

; Function Attrs: nounwind uwtable
define internal i32 @snd_info_entry_release(%struct.inode* %inode, %struct.file* %file) #0 {
entry:
  %private_data = getelementptr inbounds %struct.file, %struct.file* %file, i32 0, i32 15
  %0 = load i8*, i8** %private_data, align 8, !tbaa !74
  %1 = bitcast i8* %0 to %struct.snd_info_private_data*
  %entry2 = getelementptr inbounds %struct.snd_info_private_data, %struct.snd_info_private_data* %1, i32 0, i32 2
  %2 = load %struct.snd_info_entry*, %struct.snd_info_entry** %entry2, align 8, !tbaa !77
  %c = getelementptr inbounds %struct.snd_info_entry, %struct.snd_info_entry* %2, i32 0, i32 4
  %ops = bitcast %union.anon.53* %c to %struct.snd_info_entry_ops**
  %3 = load %struct.snd_info_entry_ops*, %struct.snd_info_entry_ops** %ops, align 8, !tbaa !64
  %release = getelementptr inbounds %struct.snd_info_entry_ops, %struct.snd_info_entry_ops* %3, i32 0, i32 1
  %4 = load i32 (%struct.snd_info_entry*, i16, i8*)*, i32 (%struct.snd_info_entry*, i16, i8*)** %release, align 8, !tbaa !97
  %tobool = icmp ne i32 (%struct.snd_info_entry*, i16, i8*)* %4, null
  br i1 %tobool, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %c3 = getelementptr inbounds %struct.snd_info_entry, %struct.snd_info_entry* %2, i32 0, i32 4
  %ops4 = bitcast %union.anon.53* %c3 to %struct.snd_info_entry_ops**
  %5 = load %struct.snd_info_entry_ops*, %struct.snd_info_entry_ops** %ops4, align 8, !tbaa !64
  %release5 = getelementptr inbounds %struct.snd_info_entry_ops, %struct.snd_info_entry_ops* %5, i32 0, i32 1
  %6 = load i32 (%struct.snd_info_entry*, i16, i8*)*, i32 (%struct.snd_info_entry*, i16, i8*)** %release5, align 8, !tbaa !97
  %f_flags = getelementptr inbounds %struct.file, %struct.file* %file, i32 0, i32 6
  %7 = load i32, i32* %f_flags, align 8, !tbaa !95
  %and = and i32 %7, 3
  %conv = trunc i32 %and to i16
  %file_private_data = getelementptr inbounds %struct.snd_info_private_data, %struct.snd_info_private_data* %1, i32 0, i32 3
  %8 = load i8*, i8** %file_private_data, align 8, !tbaa !87
  %call = call i32 %6(%struct.snd_info_entry* %2, i16 zeroext %conv, i8* %8)
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  %module = getelementptr inbounds %struct.snd_info_entry, %struct.snd_info_entry* %2, i32 0, i32 7
  %9 = load %struct.module*, %struct.module** %module, align 8, !tbaa !84
  call void @module_put(%struct.module* %9)
  %10 = bitcast %struct.snd_info_private_data* %1 to i8*
  call void @kfree(i8* %10)
  ret i32 0
}

; Function Attrs: inlinehint nounwind uwtable
define internal %struct.inode* @file_inode(%struct.file* %f) #1 {
entry:
  %f_inode = getelementptr inbounds %struct.file, %struct.file* %f, i32 0, i32 2
  %0 = load %struct.inode*, %struct.inode** %f_inode, align 8, !tbaa !98
  ret %struct.inode* %0
}

; Function Attrs: nounwind uwtable
define void @snd_info_free_entry(%struct.snd_info_entry* %entry1) #0 {
entry:
  %tobool = icmp ne %struct.snd_info_entry* %entry1, null
  br i1 %tobool, label %if.end, label %cleanup.cont

if.end:                                           ; preds = %entry
  %p2 = getelementptr inbounds %struct.snd_info_entry, %struct.snd_info_entry* %entry1, i32 0, i32 10
  %0 = load %struct.proc_dir_entry*, %struct.proc_dir_entry** %p2, align 8, !tbaa !69
  %tobool3 = icmp ne %struct.proc_dir_entry* %0, null
  br i1 %tobool3, label %if.then4, label %if.end5

if.then4:                                         ; preds = %if.end
  call void @mutex_lock(%struct.mutex* @info_mutex)
  call void @snd_info_disconnect(%struct.snd_info_entry* %entry1)
  call void @mutex_unlock(%struct.mutex* @info_mutex)
  br label %if.end5

if.end5:                                          ; preds = %if.then4, %if.end
  %children = getelementptr inbounds %struct.snd_info_entry, %struct.snd_info_entry* %entry1, i32 0, i32 12
  %next = getelementptr inbounds %struct.list_head, %struct.list_head* %children, i32 0, i32 0
  %1 = load %struct.list_head*, %struct.list_head** %next, align 8, !tbaa !99
  %2 = bitcast %struct.list_head* %1 to i8*
  %add.ptr = getelementptr inbounds i8, i8* %2, i64 -144
  %3 = bitcast i8* %add.ptr to %struct.snd_info_entry*
  br label %for.cond

for.cond:                                         ; preds = %for.body, %if.end5
  %.sink = phi %struct.snd_info_entry* [ %6, %for.body ], [ %3, %if.end5 ]
  %p.0 = phi %struct.snd_info_entry* [ %3, %if.end5 ], [ %6, %for.body ]
  %list13 = getelementptr inbounds %struct.snd_info_entry, %struct.snd_info_entry* %.sink, i32 0, i32 13
  %next14 = getelementptr inbounds %struct.list_head, %struct.list_head* %list13, i32 0, i32 0
  %4 = load %struct.list_head*, %struct.list_head** %next14, align 8, !tbaa !100
  %5 = bitcast %struct.list_head* %4 to i8*
  %add.ptr16 = getelementptr inbounds i8, i8* %5, i64 -144
  %6 = bitcast i8* %add.ptr16 to %struct.snd_info_entry*
  %list10 = getelementptr inbounds %struct.snd_info_entry, %struct.snd_info_entry* %p.0, i32 0, i32 13
  %children11 = getelementptr inbounds %struct.snd_info_entry, %struct.snd_info_entry* %entry1, i32 0, i32 12
  %cmp = icmp ne %struct.list_head* %list10, %children11
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  call void @snd_info_free_entry(%struct.snd_info_entry* %p.0)
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %list17 = getelementptr inbounds %struct.snd_info_entry, %struct.snd_info_entry* %entry1, i32 0, i32 13
  call void @list_del(%struct.list_head* %list17)
  %name = getelementptr inbounds %struct.snd_info_entry, %struct.snd_info_entry* %entry1, i32 0, i32 0
  %7 = load i8*, i8** %name, align 8, !tbaa !71
  call void @kfree(i8* %7)
  %private_free = getelementptr inbounds %struct.snd_info_entry, %struct.snd_info_entry* %entry1, i32 0, i32 9
  %8 = load void (%struct.snd_info_entry*)*, void (%struct.snd_info_entry*)** %private_free, align 8, !tbaa !101
  %tobool18 = icmp ne void (%struct.snd_info_entry*)* %8, null
  br i1 %tobool18, label %if.then19, label %if.end21

if.then19:                                        ; preds = %for.end
  %private_free20 = getelementptr inbounds %struct.snd_info_entry, %struct.snd_info_entry* %entry1, i32 0, i32 9
  %9 = load void (%struct.snd_info_entry*)*, void (%struct.snd_info_entry*)** %private_free20, align 8, !tbaa !101
  call void %9(%struct.snd_info_entry* %entry1)
  br label %if.end21

if.end21:                                         ; preds = %if.then19, %for.end
  %10 = bitcast %struct.snd_info_entry* %entry1 to i8*
  call void @kfree(i8* %10)
  br label %cleanup.cont

cleanup.cont:                                     ; preds = %if.end21, %entry
  ret void
}

; Function Attrs: nounwind uwtable
define internal void @snd_info_disconnect(%struct.snd_info_entry* %entry1) #0 {
entry:
  %p2 = getelementptr inbounds %struct.snd_info_entry, %struct.snd_info_entry* %entry1, i32 0, i32 10
  %0 = load %struct.proc_dir_entry*, %struct.proc_dir_entry** %p2, align 8, !tbaa !69
  %tobool = icmp ne %struct.proc_dir_entry* %0, null
  br i1 %tobool, label %if.end, label %cleanup.cont

if.end:                                           ; preds = %entry
  %children = getelementptr inbounds %struct.snd_info_entry, %struct.snd_info_entry* %entry1, i32 0, i32 12
  br label %for.cond

for.cond:                                         ; preds = %for.body, %if.end
  %list5.sink = phi %struct.list_head* [ %list5, %for.body ], [ %children, %if.end ]
  %next6 = getelementptr inbounds %struct.list_head, %struct.list_head* %list5.sink, i32 0, i32 0
  %1 = load %struct.list_head*, %struct.list_head** %next6, align 8, !tbaa !6
  %2 = bitcast %struct.list_head* %1 to i8*
  %add.ptr8 = getelementptr inbounds i8, i8* %2, i64 -144
  %3 = bitcast i8* %add.ptr8 to %struct.snd_info_entry*
  %list = getelementptr inbounds %struct.snd_info_entry, %struct.snd_info_entry* %3, i32 0, i32 13
  %children3 = getelementptr inbounds %struct.snd_info_entry, %struct.snd_info_entry* %entry1, i32 0, i32 12
  %cmp = icmp ne %struct.list_head* %list, %children3
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  call void @snd_info_disconnect(%struct.snd_info_entry* %3)
  %list5 = getelementptr inbounds %struct.snd_info_entry, %struct.snd_info_entry* %3, i32 0, i32 13
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %p9 = getelementptr inbounds %struct.snd_info_entry, %struct.snd_info_entry* %entry1, i32 0, i32 10
  %4 = load %struct.proc_dir_entry*, %struct.proc_dir_entry** %p9, align 8, !tbaa !69
  call void @proc_remove(%struct.proc_dir_entry* %4)
  %p10 = getelementptr inbounds %struct.snd_info_entry, %struct.snd_info_entry* %entry1, i32 0, i32 10
  store %struct.proc_dir_entry* null, %struct.proc_dir_entry** %p10, align 8, !tbaa !69
  br label %cleanup.cont

cleanup.cont:                                     ; preds = %for.end, %entry
  ret void
}

; Function Attrs: inlinehint nounwind uwtable
define internal void @list_del(%struct.list_head* %entry1) #1 {
entry:
  call void @__list_del_entry(%struct.list_head* %entry1)
  %next = getelementptr inbounds %struct.list_head, %struct.list_head* %entry1, i32 0, i32 0
  store %struct.list_head* bitcast (i8* getelementptr (i8, i8* inttoptr (i64 256 to i8*), i64 -2401263026318606336) to %struct.list_head*), %struct.list_head** %next, align 8, !tbaa !99
  %prev = getelementptr inbounds %struct.list_head, %struct.list_head* %entry1, i32 0, i32 1
  store %struct.list_head* bitcast (i8* getelementptr (i8, i8* inttoptr (i64 512 to i8*), i64 -2401263026318606336) to %struct.list_head*), %struct.list_head** %prev, align 8, !tbaa !102
  ret void
}

; Function Attrs: inlinehint nounwind uwtable
define internal void @__list_del_entry(%struct.list_head* %entry1) #1 {
entry:
  %call = call zeroext i1 @__list_del_entry_valid(%struct.list_head* %entry1)
  br i1 %call, label %if.end, label %return

if.end:                                           ; preds = %entry
  %prev = getelementptr inbounds %struct.list_head, %struct.list_head* %entry1, i32 0, i32 1
  %0 = load %struct.list_head*, %struct.list_head** %prev, align 8, !tbaa !102
  %next = getelementptr inbounds %struct.list_head, %struct.list_head* %entry1, i32 0, i32 0
  %1 = load %struct.list_head*, %struct.list_head** %next, align 8, !tbaa !99
  call void @__list_del(%struct.list_head* %0, %struct.list_head* %1)
  br label %return

return:                                           ; preds = %if.end, %entry
  ret void
}

; Function Attrs: inlinehint nounwind uwtable
define internal zeroext i1 @__list_del_entry_valid(%struct.list_head* %entry1) #1 {
entry:
  ret i1 true
}

; Function Attrs: inlinehint nounwind uwtable
define internal void @__list_del(%struct.list_head* %prev, %struct.list_head* %next) #1 {
entry:
  %__u = alloca %union.anon.56, align 8
  %prev1 = getelementptr inbounds %struct.list_head, %struct.list_head* %next, i32 0, i32 1
  store %struct.list_head* %prev, %struct.list_head** %prev1, align 8, !tbaa !102
  %0 = bitcast %union.anon.56* %__u to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %0) #7
  %__val = bitcast %union.anon.56* %__u to %struct.list_head**
  store %struct.list_head* %next, %struct.list_head** %__val, align 8, !tbaa !64
  %next2 = getelementptr inbounds %struct.list_head, %struct.list_head* %prev, i32 0, i32 0
  %1 = bitcast %struct.list_head** %next2 to i8*
  %__c = bitcast %union.anon.56* %__u to [1 x i8]*
  %arraydecay = getelementptr inbounds [1 x i8], [1 x i8]* %__c, i32 0, i32 0
  call void @__write_once_size(i8* %1, i8* %arraydecay, i32 8)
  %__val3 = bitcast %union.anon.56* %__u to %struct.list_head**
  %2 = load %struct.list_head*, %struct.list_head** %__val3, align 8, !tbaa !64
  %3 = bitcast %union.anon.56* %__u to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %3) #7
  ret void
}

; Function Attrs: alwaysinline nounwind uwtable
define internal void @__write_once_size(i8* %p, i8* %res, i32 %size) #4 {
entry:
  br label %NodeBlock9

NodeBlock9:                                       ; preds = %entry
  %Pivot10 = icmp slt i32 %size, 4
  br i1 %Pivot10, label %NodeBlock, label %NodeBlock7

NodeBlock7:                                       ; preds = %NodeBlock9
  %Pivot8 = icmp slt i32 %size, 8
  br i1 %Pivot8, label %LeafBlock3, label %LeafBlock5

LeafBlock5:                                       ; preds = %NodeBlock7
  %SwitchLeaf6 = icmp eq i32 %size, 8
  br i1 %SwitchLeaf6, label %sw.bb3, label %NewDefault

LeafBlock3:                                       ; preds = %NodeBlock7
  %SwitchLeaf4 = icmp eq i32 %size, 4
  br i1 %SwitchLeaf4, label %sw.bb2, label %NewDefault

NodeBlock:                                        ; preds = %NodeBlock9
  %Pivot = icmp slt i32 %size, 2
  br i1 %Pivot, label %LeafBlock, label %LeafBlock1

LeafBlock1:                                       ; preds = %NodeBlock
  %SwitchLeaf2 = icmp eq i32 %size, 2
  br i1 %SwitchLeaf2, label %sw.bb1, label %NewDefault

LeafBlock:                                        ; preds = %NodeBlock
  %SwitchLeaf = icmp eq i32 %size, 1
  br i1 %SwitchLeaf, label %sw.bb, label %NewDefault

sw.bb:                                            ; preds = %LeafBlock
  %0 = load i8, i8* %res, align 1, !tbaa !64
  store volatile i8 %0, i8* %p, align 1, !tbaa !64
  br label %sw.epilog

sw.bb1:                                           ; preds = %LeafBlock1
  %1 = bitcast i8* %res to i16*
  %2 = load i16, i16* %1, align 2, !tbaa !103
  %3 = bitcast i8* %p to i16*
  store volatile i16 %2, i16* %3, align 2, !tbaa !103
  br label %sw.epilog

sw.bb2:                                           ; preds = %LeafBlock3
  %4 = bitcast i8* %res to i32*
  %5 = load i32, i32* %4, align 4, !tbaa !2
  %6 = bitcast i8* %p to i32*
  store volatile i32 %5, i32* %6, align 4, !tbaa !2
  br label %sw.epilog

sw.bb3:                                           ; preds = %LeafBlock5
  %7 = bitcast i8* %res to i64*
  %8 = load i64, i64* %7, align 8, !tbaa !79
  %9 = bitcast i8* %p to i64*
  store volatile i64 %8, i64* %9, align 8, !tbaa !79
  br label %sw.epilog

NewDefault:                                       ; preds = %LeafBlock, %LeafBlock1, %LeafBlock3, %LeafBlock5
  br label %sw.default

sw.default:                                       ; preds = %NewDefault
  call void asm sideeffect "", "~{memory},~{dirflag},~{fpsr},~{flags}"() #7, !srcloc !104
  %conv = sext i32 %size to i64
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %p, i8* %res, i64 %conv, i32 1, i1 false)
  call void asm sideeffect "", "~{memory},~{dirflag},~{fpsr},~{flags}"() #7, !srcloc !105
  br label %sw.epilog

sw.epilog:                                        ; preds = %sw.default, %sw.bb3, %sw.bb2, %sw.bb1, %sw.bb
  ret void
}

; Function Attrs: argmemonly nounwind
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* nocapture writeonly, i8* nocapture readonly, i64, i32, i1) #5

declare void @proc_remove(%struct.proc_dir_entry*) #2

; Function Attrs: nounwind uwtable
define %struct.snd_info_entry* @snd_info_create_card_entry(%struct.snd_card* %card, i8* %name, %struct.snd_info_entry* %parent) #0 {
entry:
  %call = call %struct.snd_info_entry* @snd_info_create_entry(i8* %name, %struct.snd_info_entry* %parent)
  %tobool = icmp ne %struct.snd_info_entry* %call, null
  br i1 %tobool, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %module = getelementptr inbounds %struct.snd_card, %struct.snd_card* %card, i32 0, i32 8
  %0 = load %struct.module*, %struct.module** %module, align 8, !tbaa !106
  %module2 = getelementptr inbounds %struct.snd_info_entry, %struct.snd_info_entry* %call, i32 0, i32 7
  store %struct.module* %0, %struct.module** %module2, align 8, !tbaa !84
  %card3 = getelementptr inbounds %struct.snd_info_entry, %struct.snd_info_entry* %call, i32 0, i32 6
  store %struct.snd_card* %card, %struct.snd_card** %card3, align 8, !tbaa !107
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  ret %struct.snd_info_entry* %call
}

; Function Attrs: nounwind uwtable
define internal %struct.snd_info_entry* @snd_info_create_entry(i8* %name, %struct.snd_info_entry* %parent) #0 {
entry:
  %call = call i8* @kzalloc(i64 160, i32 20971712)
  %0 = bitcast i8* %call to %struct.snd_info_entry*
  %cmp = icmp eq %struct.snd_info_entry* %0, null
  br i1 %cmp, label %cleanup, label %if.end

if.end:                                           ; preds = %entry
  %call2 = call noalias i8* @kstrdup(i8* %name, i32 20971712)
  %name3 = getelementptr inbounds %struct.snd_info_entry, %struct.snd_info_entry* %0, i32 0, i32 0
  store i8* %call2, i8** %name3, align 8, !tbaa !71
  %name4 = getelementptr inbounds %struct.snd_info_entry, %struct.snd_info_entry* %0, i32 0, i32 0
  %1 = load i8*, i8** %name4, align 8, !tbaa !71
  %cmp5 = icmp eq i8* %1, null
  br i1 %cmp5, label %if.then6, label %if.end7

if.then6:                                         ; preds = %if.end
  %2 = bitcast %struct.snd_info_entry* %0 to i8*
  call void @kfree(i8* %2)
  br label %cleanup

if.end7:                                          ; preds = %if.end
  %mode = getelementptr inbounds %struct.snd_info_entry, %struct.snd_info_entry* %0, i32 0, i32 1
  store i16 -32476, i16* %mode, align 8, !tbaa !70
  %content = getelementptr inbounds %struct.snd_info_entry, %struct.snd_info_entry* %0, i32 0, i32 3
  store i16 0, i16* %content, align 8, !tbaa !72
  %access = getelementptr inbounds %struct.snd_info_entry, %struct.snd_info_entry* %0, i32 0, i32 11
  call void @__mutex_init(%struct.mutex* %access, i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.14.9, i32 0, i32 0), %struct.lock_class_key* @snd_info_create_entry.__key)
  %children = getelementptr inbounds %struct.snd_info_entry, %struct.snd_info_entry* %0, i32 0, i32 12
  call void @INIT_LIST_HEAD(%struct.list_head* %children)
  %list = getelementptr inbounds %struct.snd_info_entry, %struct.snd_info_entry* %0, i32 0, i32 13
  call void @INIT_LIST_HEAD(%struct.list_head* %list)
  %parent8 = getelementptr inbounds %struct.snd_info_entry, %struct.snd_info_entry* %0, i32 0, i32 5
  store %struct.snd_info_entry* %parent, %struct.snd_info_entry** %parent8, align 8, !tbaa !67
  %tobool = icmp ne %struct.snd_info_entry* %parent, null
  br i1 %tobool, label %if.then9, label %cleanup

if.then9:                                         ; preds = %if.end7
  %list10 = getelementptr inbounds %struct.snd_info_entry, %struct.snd_info_entry* %0, i32 0, i32 13
  %children11 = getelementptr inbounds %struct.snd_info_entry, %struct.snd_info_entry* %parent, i32 0, i32 12
  call void @list_add_tail(%struct.list_head* %list10, %struct.list_head* %children11)
  br label %cleanup

cleanup:                                          ; preds = %if.then9, %if.end7, %if.then6, %entry
  %retval.0 = phi %struct.snd_info_entry* [ null, %if.then6 ], [ null, %entry ], [ %0, %if.then9 ], [ %0, %if.end7 ]
  ret %struct.snd_info_entry* %retval.0
}

declare noalias i8* @kstrdup(i8*, i32) #2

declare void @__mutex_init(%struct.mutex*, i8*, %struct.lock_class_key*) #2

; Function Attrs: inlinehint nounwind uwtable
define internal void @INIT_LIST_HEAD(%struct.list_head* %list) #1 {
entry:
  %__u = alloca %union.anon.56, align 8
  %0 = bitcast %union.anon.56* %__u to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %0) #7
  %__val = bitcast %union.anon.56* %__u to %struct.list_head**
  store %struct.list_head* %list, %struct.list_head** %__val, align 8, !tbaa !64
  %next = getelementptr inbounds %struct.list_head, %struct.list_head* %list, i32 0, i32 0
  %1 = bitcast %struct.list_head** %next to i8*
  %__c = bitcast %union.anon.56* %__u to [1 x i8]*
  %arraydecay = getelementptr inbounds [1 x i8], [1 x i8]* %__c, i32 0, i32 0
  call void @__write_once_size(i8* %1, i8* %arraydecay, i32 8)
  %__val1 = bitcast %union.anon.56* %__u to %struct.list_head**
  %2 = load %struct.list_head*, %struct.list_head** %__val1, align 8, !tbaa !64
  %3 = bitcast %union.anon.56* %__u to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %3) #7
  %prev = getelementptr inbounds %struct.list_head, %struct.list_head* %list, i32 0, i32 1
  store %struct.list_head* %list, %struct.list_head** %prev, align 8, !tbaa !102
  ret void
}

; Function Attrs: inlinehint nounwind uwtable
define internal void @list_add_tail(%struct.list_head* %new, %struct.list_head* %head) #1 {
entry:
  %prev = getelementptr inbounds %struct.list_head, %struct.list_head* %head, i32 0, i32 1
  %0 = load %struct.list_head*, %struct.list_head** %prev, align 8, !tbaa !102
  call void @__list_add(%struct.list_head* %new, %struct.list_head* %0, %struct.list_head* %head)
  ret void
}

; Function Attrs: inlinehint nounwind uwtable
define internal void @__list_add(%struct.list_head* %new, %struct.list_head* %prev, %struct.list_head* %next) #1 {
entry:
  %__u = alloca %union.anon.56, align 8
  %call = call zeroext i1 @__list_add_valid(%struct.list_head* %new, %struct.list_head* %prev, %struct.list_head* %next)
  br i1 %call, label %if.end, label %return

if.end:                                           ; preds = %entry
  %prev1 = getelementptr inbounds %struct.list_head, %struct.list_head* %next, i32 0, i32 1
  store %struct.list_head* %new, %struct.list_head** %prev1, align 8, !tbaa !102
  %next2 = getelementptr inbounds %struct.list_head, %struct.list_head* %new, i32 0, i32 0
  store %struct.list_head* %next, %struct.list_head** %next2, align 8, !tbaa !99
  %prev3 = getelementptr inbounds %struct.list_head, %struct.list_head* %new, i32 0, i32 1
  store %struct.list_head* %prev, %struct.list_head** %prev3, align 8, !tbaa !102
  %0 = bitcast %union.anon.56* %__u to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %0) #7
  %__val = bitcast %union.anon.56* %__u to %struct.list_head**
  store %struct.list_head* %new, %struct.list_head** %__val, align 8, !tbaa !64
  %next4 = getelementptr inbounds %struct.list_head, %struct.list_head* %prev, i32 0, i32 0
  %1 = bitcast %struct.list_head** %next4 to i8*
  %__c = bitcast %union.anon.56* %__u to [1 x i8]*
  %arraydecay = getelementptr inbounds [1 x i8], [1 x i8]* %__c, i32 0, i32 0
  call void @__write_once_size(i8* %1, i8* %arraydecay, i32 8)
  %__val5 = bitcast %union.anon.56* %__u to %struct.list_head**
  %2 = load %struct.list_head*, %struct.list_head** %__val5, align 8, !tbaa !64
  %3 = bitcast %union.anon.56* %__u to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %3) #7
  br label %return

return:                                           ; preds = %if.end, %entry
  ret void
}

; Function Attrs: inlinehint nounwind uwtable
define internal zeroext i1 @__list_add_valid(%struct.list_head* %new, %struct.list_head* %prev, %struct.list_head* %next) #1 {
entry:
  ret i1 true
}

; Function Attrs: nounwind uwtable
define %struct.snd_info_entry* @snd_info_create_module_entry(%struct.module* %module, i8* %name, %struct.snd_info_entry* %parent) #0 {
entry:
  %call = call %struct.snd_info_entry* @snd_info_create_entry(i8* %name, %struct.snd_info_entry* %parent)
  %tobool = icmp ne %struct.snd_info_entry* %call, null
  br i1 %tobool, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %module2 = getelementptr inbounds %struct.snd_info_entry, %struct.snd_info_entry* %call, i32 0, i32 7
  store %struct.module* %module, %struct.module** %module2, align 8, !tbaa !84
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  ret %struct.snd_info_entry* %call
}

; Function Attrs: nounwind uwtable
define i8* @snd_info_get_str(i8* %dest, i8* %src, i32 %len) #0 {
entry:
  br label %while.cond

while.cond:                                       ; preds = %while.body, %entry
  %src.addr.0 = phi i8* [ %src, %entry ], [ %incdec.ptr, %while.body ]
  %0 = load i8, i8* %src.addr.0, align 1, !tbaa !64
  %conv = sext i8 %0 to i32
  %cmp = icmp eq i32 %conv, 32
  br i1 %cmp, label %while.body, label %lor.rhs

lor.rhs:                                          ; preds = %while.cond
  %1 = load i8, i8* %src.addr.0, align 1, !tbaa !64
  %conv2 = sext i8 %1 to i32
  %cmp3 = icmp eq i32 %conv2, 9
  br i1 %cmp3, label %while.body, label %while.end

while.body:                                       ; preds = %lor.rhs, %while.cond
  %incdec.ptr = getelementptr inbounds i8, i8* %src.addr.0, i32 1
  br label %while.cond

while.end:                                        ; preds = %lor.rhs
  %2 = load i8, i8* %src.addr.0, align 1, !tbaa !64
  %conv5 = sext i8 %2 to i32
  %cmp6 = icmp eq i32 %conv5, 34
  br i1 %cmp6, label %if.then, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %while.end
  %3 = load i8, i8* %src.addr.0, align 1, !tbaa !64
  %conv8 = sext i8 %3 to i32
  %cmp9 = icmp eq i32 %conv8, 39
  br i1 %cmp9, label %if.then, label %if.else

if.then:                                          ; preds = %lor.lhs.false, %while.end
  %incdec.ptr11 = getelementptr inbounds i8, i8* %src.addr.0, i32 1
  %4 = load i8, i8* %src.addr.0, align 1, !tbaa !64
  %conv12 = sext i8 %4 to i32
  br label %while.cond13

while.cond13:                                     ; preds = %while.body20, %if.then
  %len.addr.0 = phi i32 [ %len, %if.then ], [ %dec, %while.body20 ]
  %src.addr.1 = phi i8* [ %incdec.ptr11, %if.then ], [ %incdec.ptr21, %while.body20 ]
  %dest.addr.0 = phi i8* [ %dest, %if.then ], [ %incdec.ptr22, %while.body20 ]
  %dec = add nsw i32 %len.addr.0, -1
  %cmp14 = icmp sgt i32 %dec, 0
  br i1 %cmp14, label %land.lhs.true, label %while.end23

land.lhs.true:                                    ; preds = %while.cond13
  %5 = load i8, i8* %src.addr.1, align 1, !tbaa !64
  %conv16 = sext i8 %5 to i32
  %tobool = icmp ne i32 %conv16, 0
  br i1 %tobool, label %land.rhs, label %while.end23

land.rhs:                                         ; preds = %land.lhs.true
  %6 = load i8, i8* %src.addr.1, align 1, !tbaa !64
  %conv17 = sext i8 %6 to i32
  %cmp18 = icmp ne i32 %conv17, %conv12
  br i1 %cmp18, label %while.body20, label %while.end23

while.body20:                                     ; preds = %land.rhs
  %incdec.ptr21 = getelementptr inbounds i8, i8* %src.addr.1, i32 1
  %7 = load i8, i8* %src.addr.1, align 1, !tbaa !64
  %incdec.ptr22 = getelementptr inbounds i8, i8* %dest.addr.0, i32 1
  store i8 %7, i8* %dest.addr.0, align 1, !tbaa !64
  br label %while.cond13

while.end23:                                      ; preds = %land.rhs, %land.lhs.true, %while.cond13
  %8 = load i8, i8* %src.addr.1, align 1, !tbaa !64
  %conv24 = sext i8 %8 to i32
  %cmp25 = icmp eq i32 %conv24, %conv12
  %incdec.ptr28 = getelementptr inbounds i8, i8* %src.addr.1, i32 1
  %incdec.ptr28.src.addr.1 = select i1 %cmp25, i8* %incdec.ptr28, i8* %src.addr.1
  br label %if.end49

if.else:                                          ; preds = %lor.lhs.false
  br label %while.cond29

while.cond29:                                     ; preds = %while.body45, %if.else
  %len.addr.1 = phi i32 [ %len, %if.else ], [ %dec30, %while.body45 ]
  %src.addr.3 = phi i8* [ %src.addr.0, %if.else ], [ %incdec.ptr46, %while.body45 ]
  %dest.addr.1 = phi i8* [ %dest, %if.else ], [ %incdec.ptr47, %while.body45 ]
  %dec30 = add nsw i32 %len.addr.1, -1
  %cmp31 = icmp sgt i32 %dec30, 0
  br i1 %cmp31, label %land.lhs.true33, label %if.end49

land.lhs.true33:                                  ; preds = %while.cond29
  %9 = load i8, i8* %src.addr.3, align 1, !tbaa !64
  %conv34 = sext i8 %9 to i32
  %tobool35 = icmp ne i32 %conv34, 0
  br i1 %tobool35, label %land.lhs.true36, label %if.end49

land.lhs.true36:                                  ; preds = %land.lhs.true33
  %10 = load i8, i8* %src.addr.3, align 1, !tbaa !64
  %conv37 = sext i8 %10 to i32
  %cmp38 = icmp ne i32 %conv37, 32
  br i1 %cmp38, label %land.rhs40, label %if.end49

land.rhs40:                                       ; preds = %land.lhs.true36
  %11 = load i8, i8* %src.addr.3, align 1, !tbaa !64
  %conv41 = sext i8 %11 to i32
  %cmp42 = icmp ne i32 %conv41, 9
  br i1 %cmp42, label %while.body45, label %if.end49

while.body45:                                     ; preds = %land.rhs40
  %incdec.ptr46 = getelementptr inbounds i8, i8* %src.addr.3, i32 1
  %12 = load i8, i8* %src.addr.3, align 1, !tbaa !64
  %incdec.ptr47 = getelementptr inbounds i8, i8* %dest.addr.1, i32 1
  store i8 %12, i8* %dest.addr.1, align 1, !tbaa !64
  br label %while.cond29

if.end49:                                         ; preds = %land.rhs40, %land.lhs.true36, %land.lhs.true33, %while.cond29, %while.end23
  %src.addr.4 = phi i8* [ %incdec.ptr28.src.addr.1, %while.end23 ], [ %src.addr.3, %while.cond29 ], [ %src.addr.3, %land.lhs.true33 ], [ %src.addr.3, %land.lhs.true36 ], [ %src.addr.3, %land.rhs40 ]
  %dest.addr.2 = phi i8* [ %dest.addr.0, %while.end23 ], [ %dest.addr.1, %while.cond29 ], [ %dest.addr.1, %land.lhs.true33 ], [ %dest.addr.1, %land.lhs.true36 ], [ %dest.addr.1, %land.rhs40 ]
  store i8 0, i8* %dest.addr.2, align 1, !tbaa !64
  br label %while.cond50

while.cond50:                                     ; preds = %while.body59, %if.end49
  %src.addr.5 = phi i8* [ %src.addr.4, %if.end49 ], [ %incdec.ptr60, %while.body59 ]
  %13 = load i8, i8* %src.addr.5, align 1, !tbaa !64
  %conv51 = sext i8 %13 to i32
  %cmp52 = icmp eq i32 %conv51, 32
  br i1 %cmp52, label %while.body59, label %lor.rhs54

lor.rhs54:                                        ; preds = %while.cond50
  %14 = load i8, i8* %src.addr.5, align 1, !tbaa !64
  %conv55 = sext i8 %14 to i32
  %cmp56 = icmp eq i32 %conv55, 9
  br i1 %cmp56, label %while.body59, label %while.end61

while.body59:                                     ; preds = %lor.rhs54, %while.cond50
  %incdec.ptr60 = getelementptr inbounds i8, i8* %src.addr.5, i32 1
  br label %while.cond50

while.end61:                                      ; preds = %lor.rhs54
  ret i8* %src.addr.5
}

; Function Attrs: nounwind uwtable
define i32 @snd_info_get_line(%struct.snd_info_buffer* %buffer, i8* %line, i32 %len) #0 {
entry:
  %tobool = icmp ne %struct.snd_info_buffer* %buffer, null
  br i1 %tobool, label %lor.rhs, label %lor.end

lor.rhs:                                          ; preds = %entry
  %buffer1 = getelementptr inbounds %struct.snd_info_buffer, %struct.snd_info_buffer* %buffer, i32 0, i32 0
  %0 = load i8*, i8** %buffer1, align 8, !tbaa !65
  %tobool2 = icmp ne i8* %0, null
  %lnot = xor i1 %tobool2, true
  br label %lor.end

lor.end:                                          ; preds = %lor.rhs, %entry
  %1 = phi i1 [ true, %entry ], [ %lnot, %lor.rhs ]
  %lnot3 = xor i1 %1, true
  %lnot4 = xor i1 %lnot3, true
  %lnot.ext = zext i1 %lnot4 to i32
  %tobool5 = icmp ne i32 %lnot.ext, 0
  %lnot6 = xor i1 %tobool5, true
  %lnot8 = xor i1 %lnot6, true
  %lnot.ext9 = zext i1 %lnot8 to i32
  %conv = sext i32 %lnot.ext9 to i64
  %expval = call i64 @llvm.expect.i64(i64 %conv, i64 0)
  %tobool10 = icmp ne i64 %expval, 0
  %cmp = icmp sle i32 %len, 0
  %or.cond = or i1 %tobool10, %cmp
  br i1 %or.cond, label %cleanup, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %lor.end
  %stop = getelementptr inbounds %struct.snd_info_buffer, %struct.snd_info_buffer* %buffer, i32 0, i32 4
  %2 = load i32, i32* %stop, align 4, !tbaa !108
  %tobool12 = icmp ne i32 %2, 0
  br i1 %tobool12, label %cleanup, label %lor.lhs.false13

lor.lhs.false13:                                  ; preds = %lor.lhs.false
  %error = getelementptr inbounds %struct.snd_info_buffer, %struct.snd_info_buffer* %buffer, i32 0, i32 5
  %3 = load i32, i32* %error, align 8, !tbaa !109
  %tobool14 = icmp ne i32 %3, 0
  br i1 %tobool14, label %cleanup, label %if.end16

if.end16:                                         ; preds = %lor.lhs.false13
  br label %while.cond

while.cond:                                       ; preds = %if.end37, %if.end16
  %len.addr.0 = phi i32 [ %len, %if.end16 ], [ %len.addr.1, %if.end37 ]
  %line.addr.0 = phi i8* [ %line, %if.end16 ], [ %line.addr.1, %if.end37 ]
  %stop17 = getelementptr inbounds %struct.snd_info_buffer, %struct.snd_info_buffer* %buffer, i32 0, i32 4
  %4 = load i32, i32* %stop17, align 4, !tbaa !108
  %tobool18 = icmp ne i32 %4, 0
  %lnot19 = xor i1 %tobool18, true
  br i1 %lnot19, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %buffer21 = getelementptr inbounds %struct.snd_info_buffer, %struct.snd_info_buffer* %buffer, i32 0, i32 0
  %5 = load i8*, i8** %buffer21, align 8, !tbaa !65
  %curr = getelementptr inbounds %struct.snd_info_buffer, %struct.snd_info_buffer* %buffer, i32 0, i32 1
  %6 = load i32, i32* %curr, align 8, !tbaa !110
  %inc = add i32 %6, 1
  store i32 %inc, i32* %curr, align 8, !tbaa !110
  %idxprom = zext i32 %6 to i64
  %arrayidx = getelementptr inbounds i8, i8* %5, i64 %idxprom
  %7 = load i8, i8* %arrayidx, align 1, !tbaa !64
  %conv22 = sext i8 %7 to i32
  %curr23 = getelementptr inbounds %struct.snd_info_buffer, %struct.snd_info_buffer* %buffer, i32 0, i32 1
  %8 = load i32, i32* %curr23, align 8, !tbaa !110
  %size = getelementptr inbounds %struct.snd_info_buffer, %struct.snd_info_buffer* %buffer, i32 0, i32 2
  %9 = load i32, i32* %size, align 4, !tbaa !82
  %cmp24 = icmp uge i32 %8, %9
  br i1 %cmp24, label %if.then26, label %if.end28

if.then26:                                        ; preds = %while.body
  %stop27 = getelementptr inbounds %struct.snd_info_buffer, %struct.snd_info_buffer* %buffer, i32 0, i32 4
  store i32 1, i32* %stop27, align 4, !tbaa !108
  br label %if.end28

if.end28:                                         ; preds = %if.then26, %while.body
  %cmp29 = icmp eq i32 %conv22, 10
  br i1 %cmp29, label %while.end, label %if.end32

if.end32:                                         ; preds = %if.end28
  %cmp33 = icmp sgt i32 %len.addr.0, 1
  br i1 %cmp33, label %if.then35, label %if.end37

if.then35:                                        ; preds = %if.end32
  %dec = add nsw i32 %len.addr.0, -1
  %conv36 = trunc i32 %conv22 to i8
  %incdec.ptr = getelementptr inbounds i8, i8* %line.addr.0, i32 1
  store i8 %conv36, i8* %line.addr.0, align 1, !tbaa !64
  br label %if.end37

if.end37:                                         ; preds = %if.then35, %if.end32
  %len.addr.1 = phi i32 [ %dec, %if.then35 ], [ %len.addr.0, %if.end32 ]
  %line.addr.1 = phi i8* [ %incdec.ptr, %if.then35 ], [ %line.addr.0, %if.end32 ]
  br label %while.cond

while.end:                                        ; preds = %if.end28, %while.cond
  store i8 0, i8* %line.addr.0, align 1, !tbaa !64
  br label %cleanup

cleanup:                                          ; preds = %while.end, %lor.lhs.false13, %lor.lhs.false, %lor.end
  %retval.0 = phi i32 [ 0, %while.end ], [ 1, %lor.end ], [ 1, %lor.lhs.false13 ], [ 1, %lor.lhs.false ]
  ret i32 %retval.0
}

; Function Attrs: nounwind uwtable
define i32 @snd_info_check_reserved_words(i8* %str) #0 {
entry:
  br label %while.cond

while.cond:                                       ; preds = %if.end, %entry
  %xstr.0 = phi i8** [ getelementptr inbounds ([12 x i8*], [12 x i8*]* @snd_info_check_reserved_words.reserved, i32 0, i32 0), %entry ], [ %incdec.ptr, %if.end ]
  %0 = load i8*, i8** %xstr.0, align 8, !tbaa !6
  %tobool = icmp ne i8* %0, null
  br i1 %tobool, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %1 = load i8*, i8** %xstr.0, align 8, !tbaa !6
  %call = call i32 @strcmp(i8* %1, i8* %str)
  %tobool1 = icmp ne i32 %call, 0
  br i1 %tobool1, label %if.end, label %cleanup

if.end:                                           ; preds = %while.body
  %incdec.ptr = getelementptr inbounds i8*, i8** %xstr.0, i32 1
  br label %while.cond

while.end:                                        ; preds = %while.cond
  %call2 = call i32 @strncmp(i8* %str, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.11.12, i32 0, i32 0), i64 4)
  %tobool3 = icmp ne i32 %call2, 0
  %. = select i1 %tobool3, i32 1, i32 0
  br label %cleanup

cleanup:                                          ; preds = %while.end, %while.body
  %retval.0 = phi i32 [ 0, %while.body ], [ %., %while.end ]
  ret i32 %retval.0
}

declare i32 @strcmp(i8*, i8*) #2

declare i32 @strncmp(i8*, i8*, i64) #2

; Function Attrs: nounwind uwtable
define i32 @snd_info_init() #0 section ".init.text" {
entry:
  %call = call %struct.snd_info_entry* @snd_info_create_entry(i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.12.32, i32 0, i32 0), %struct.snd_info_entry* null)
  store %struct.snd_info_entry* %call, %struct.snd_info_entry** @snd_proc_root, align 8, !tbaa !6
  %0 = load %struct.snd_info_entry*, %struct.snd_info_entry** @snd_proc_root, align 8, !tbaa !6
  %tobool = icmp ne %struct.snd_info_entry* %0, null
  br i1 %tobool, label %if.end, label %return

if.end:                                           ; preds = %entry
  %1 = load %struct.snd_info_entry*, %struct.snd_info_entry** @snd_proc_root, align 8, !tbaa !6
  %mode = getelementptr inbounds %struct.snd_info_entry, %struct.snd_info_entry* %1, i32 0, i32 1
  store i16 16749, i16* %mode, align 8, !tbaa !70
  %call1 = call %struct.proc_dir_entry* @proc_mkdir(i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.12.32, i32 0, i32 0), %struct.proc_dir_entry* null)
  %2 = load %struct.snd_info_entry*, %struct.snd_info_entry** @snd_proc_root, align 8, !tbaa !6
  %p = getelementptr inbounds %struct.snd_info_entry, %struct.snd_info_entry* %2, i32 0, i32 10
  store %struct.proc_dir_entry* %call1, %struct.proc_dir_entry** %p, align 8, !tbaa !69
  %3 = load %struct.snd_info_entry*, %struct.snd_info_entry** @snd_proc_root, align 8, !tbaa !6
  %p2 = getelementptr inbounds %struct.snd_info_entry, %struct.snd_info_entry* %3, i32 0, i32 10
  %4 = load %struct.proc_dir_entry*, %struct.proc_dir_entry** %p2, align 8, !tbaa !69
  %tobool3 = icmp ne %struct.proc_dir_entry* %4, null
  br i1 %tobool3, label %if.end5, label %error

if.end5:                                          ; preds = %if.end
  %call6 = call %struct.snd_info_entry* @create_subdir(%struct.module* null, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.5.24, i32 0, i32 0))
  store %struct.snd_info_entry* %call6, %struct.snd_info_entry** @snd_oss_root, align 8, !tbaa !6
  %5 = load %struct.snd_info_entry*, %struct.snd_info_entry** @snd_oss_root, align 8, !tbaa !6
  %tobool7 = icmp ne %struct.snd_info_entry* %5, null
  br i1 %tobool7, label %if.end9, label %error

if.end9:                                          ; preds = %if.end5
  %call10 = call %struct.snd_info_entry* @create_subdir(%struct.module* null, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.10.29, i32 0, i32 0))
  store %struct.snd_info_entry* %call10, %struct.snd_info_entry** @snd_seq_root, align 8, !tbaa !6
  %6 = load %struct.snd_info_entry*, %struct.snd_info_entry** @snd_seq_root, align 8, !tbaa !6
  %tobool11 = icmp ne %struct.snd_info_entry* %6, null
  br i1 %tobool11, label %if.end13, label %error

if.end13:                                         ; preds = %if.end9
  %call14 = call i32 @snd_info_version_init()
  %cmp = icmp slt i32 %call14, 0
  br i1 %cmp, label %error, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %if.end13
  %call15 = call i32 @snd_minor_info_init()
  %cmp16 = icmp slt i32 %call15, 0
  br i1 %cmp16, label %error, label %lor.lhs.false17

lor.lhs.false17:                                  ; preds = %lor.lhs.false
  %call18 = call i32 @snd_minor_info_oss_init()
  %cmp19 = icmp slt i32 %call18, 0
  br i1 %cmp19, label %error, label %lor.lhs.false20

lor.lhs.false20:                                  ; preds = %lor.lhs.false17
  %call21 = call i32 @snd_card_info_init()
  %cmp22 = icmp slt i32 %call21, 0
  br i1 %cmp22, label %error, label %lor.lhs.false23

lor.lhs.false23:                                  ; preds = %lor.lhs.false20
  %call24 = call i32 @snd_info_minor_register()
  %cmp25 = icmp slt i32 %call24, 0
  br i1 %cmp25, label %error, label %return

error:                                            ; preds = %lor.lhs.false23, %lor.lhs.false20, %lor.lhs.false17, %lor.lhs.false, %if.end13, %if.end9, %if.end5, %if.end
  %7 = load %struct.snd_info_entry*, %struct.snd_info_entry** @snd_proc_root, align 8, !tbaa !6
  call void @snd_info_free_entry(%struct.snd_info_entry* %7)
  br label %return

return:                                           ; preds = %error, %lor.lhs.false23, %entry
  %retval.0 = phi i32 [ -12, %error ], [ -12, %entry ], [ 0, %lor.lhs.false23 ]
  ret i32 %retval.0
}

declare %struct.proc_dir_entry* @proc_mkdir(i8*, %struct.proc_dir_entry*) #2

; Function Attrs: nounwind uwtable
define internal %struct.snd_info_entry* @create_subdir(%struct.module* %mod, i8* %name) #0 {
entry:
  %call = call %struct.snd_info_entry* @snd_info_create_module_entry(%struct.module* %mod, i8* %name, %struct.snd_info_entry* null)
  %tobool = icmp ne %struct.snd_info_entry* %call, null
  br i1 %tobool, label %if.end, label %cleanup

if.end:                                           ; preds = %entry
  %mode = getelementptr inbounds %struct.snd_info_entry, %struct.snd_info_entry* %call, i32 0, i32 1
  store i16 16749, i16* %mode, align 8, !tbaa !70
  %call2 = call i32 @snd_info_register(%struct.snd_info_entry* %call)
  %cmp = icmp slt i32 %call2, 0
  br i1 %cmp, label %if.then3, label %cleanup

if.then3:                                         ; preds = %if.end
  call void @snd_info_free_entry(%struct.snd_info_entry* %call)
  br label %cleanup

cleanup:                                          ; preds = %if.then3, %if.end, %entry
  %retval.0 = phi %struct.snd_info_entry* [ null, %if.then3 ], [ null, %entry ], [ %call, %if.end ]
  ret %struct.snd_info_entry* %retval.0
}

; Function Attrs: nounwind uwtable
define internal i32 @snd_info_version_init() #0 section ".init.text" {
entry:
  %call = call %struct.snd_info_entry* @snd_info_create_module_entry(%struct.module* null, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.19, i32 0, i32 0), %struct.snd_info_entry* null)
  %cmp = icmp eq %struct.snd_info_entry* %call, null
  br i1 %cmp, label %cleanup, label %if.end

if.end:                                           ; preds = %entry
  %c = getelementptr inbounds %struct.snd_info_entry, %struct.snd_info_entry* %call, i32 0, i32 4
  %text = bitcast %union.anon.53* %c to %struct.snd_info_entry_text*
  %read = getelementptr inbounds %struct.snd_info_entry_text, %struct.snd_info_entry_text* %text, i32 0, i32 0
  store void (%struct.snd_info_entry*, %struct.snd_info_buffer*)* @snd_info_version_read, void (%struct.snd_info_entry*, %struct.snd_info_buffer*)** %read, align 8, !tbaa !64
  %call2 = call i32 @snd_info_register(%struct.snd_info_entry* %call)
  br label %cleanup

cleanup:                                          ; preds = %if.end, %entry
  %retval.0 = phi i32 [ %call2, %if.end ], [ -12, %entry ]
  ret i32 %retval.0
}

declare i32 @snd_minor_info_oss_init() #2

declare i32 @snd_card_info_init() #2

declare i32 @snd_info_minor_register() #2

; Function Attrs: nounwind uwtable
define internal void @snd_info_version_read(%struct.snd_info_entry* %entry1, %struct.snd_info_buffer* %buffer) #0 {
entry:
  %buffer2 = getelementptr inbounds %struct.snd_info_buffer, %struct.snd_info_buffer* %buffer, i32 0, i32 0
  %0 = load i8*, i8** %buffer2, align 8, !tbaa !65
  %1 = bitcast i8* %0 to %struct.seq_file*
  %call = call %struct.new_utsname* @init_utsname()
  %release = getelementptr inbounds %struct.new_utsname, %struct.new_utsname* %call, i32 0, i32 2
  %arraydecay = getelementptr inbounds [65 x i8], [65 x i8]* %release, i32 0, i32 0
  call void (%struct.seq_file*, i8*, ...) @seq_printf(%struct.seq_file* %1, i8* getelementptr inbounds ([55 x i8], [55 x i8]* @.str.17.33, i32 0, i32 0), i8* %arraydecay)
  ret void
}

; Function Attrs: inlinehint nounwind uwtable
define internal %struct.new_utsname* @init_utsname() #1 {
entry:
  ret %struct.new_utsname* getelementptr inbounds (%struct.uts_namespace, %struct.uts_namespace* @init_uts_ns, i32 0, i32 1)
}

; Function Attrs: nounwind uwtable
define i32 @snd_info_card_create(%struct.snd_card* %card) #0 {
entry:
  %str = alloca [8 x i8], align 1
  %0 = bitcast [8 x i8]* %str to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %0) #7
  %tobool = icmp ne %struct.snd_card* %card, null
  %lnot = xor i1 %tobool, true
  %lnot2 = xor i1 %lnot, true
  %lnot3 = xor i1 %lnot2, true
  %lnot.ext = zext i1 %lnot3 to i32
  %tobool4 = icmp ne i32 %lnot.ext, 0
  %lnot5 = xor i1 %tobool4, true
  %lnot7 = xor i1 %lnot5, true
  %lnot.ext8 = zext i1 %lnot7 to i32
  %conv = sext i32 %lnot.ext8 to i64
  %expval = call i64 @llvm.expect.i64(i64 %conv, i64 0)
  %tobool9 = icmp ne i64 %expval, 0
  br i1 %tobool9, label %cleanup, label %if.end

if.end:                                           ; preds = %entry
  %arraydecay = getelementptr inbounds [8 x i8], [8 x i8]* %str, i32 0, i32 0
  %number = getelementptr inbounds %struct.snd_card, %struct.snd_card* %card, i32 0, i32 0
  %1 = load i32, i32* %number, align 8, !tbaa !43
  %call = call i32 (i8*, i8*, ...) @sprintf(i8* %arraydecay, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.13.34, i32 0, i32 0), i32 %1)
  %module = getelementptr inbounds %struct.snd_card, %struct.snd_card* %card, i32 0, i32 8
  %2 = load %struct.module*, %struct.module** %module, align 8, !tbaa !106
  %arraydecay10 = getelementptr inbounds [8 x i8], [8 x i8]* %str, i32 0, i32 0
  %call11 = call %struct.snd_info_entry* @create_subdir(%struct.module* %2, i8* %arraydecay10)
  %tobool12 = icmp ne %struct.snd_info_entry* %call11, null
  br i1 %tobool12, label %if.end14, label %cleanup

if.end14:                                         ; preds = %if.end
  %proc_root = getelementptr inbounds %struct.snd_card, %struct.snd_card* %card, i32 0, i32 21
  store %struct.snd_info_entry* %call11, %struct.snd_info_entry** %proc_root, align 8, !tbaa !111
  br label %cleanup

cleanup:                                          ; preds = %if.end14, %if.end, %entry
  %retval.0 = phi i32 [ 0, %if.end14 ], [ -6, %entry ], [ -12, %if.end ]
  %3 = bitcast [8 x i8]* %str to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %3) #7
  ret i32 %retval.0
}

declare i32 @sprintf(i8*, i8*, ...) #2

; Function Attrs: nounwind uwtable
define i32 @snd_info_card_register(%struct.snd_card* %card) #0 {
entry:
  %tobool = icmp ne %struct.snd_card* %card, null
  %lnot = xor i1 %tobool, true
  %lnot1 = xor i1 %lnot, true
  %lnot2 = xor i1 %lnot1, true
  %lnot.ext = zext i1 %lnot2 to i32
  %tobool3 = icmp ne i32 %lnot.ext, 0
  %lnot4 = xor i1 %tobool3, true
  %lnot6 = xor i1 %lnot4, true
  %lnot.ext7 = zext i1 %lnot6 to i32
  %conv = sext i32 %lnot.ext7 to i64
  %expval = call i64 @llvm.expect.i64(i64 %conv, i64 0)
  %tobool8 = icmp ne i64 %expval, 0
  br i1 %tobool8, label %cleanup, label %if.end

if.end:                                           ; preds = %entry
  %proc_root = getelementptr inbounds %struct.snd_card, %struct.snd_card* %card, i32 0, i32 21
  %0 = load %struct.snd_info_entry*, %struct.snd_info_entry** %proc_root, align 8, !tbaa !111
  %call = call i32 @snd_info_register_recursive(%struct.snd_info_entry* %0)
  %cmp = icmp slt i32 %call, 0
  br i1 %cmp, label %cleanup, label %if.end11

if.end11:                                         ; preds = %if.end
  %id = getelementptr inbounds %struct.snd_card, %struct.snd_card* %card, i32 0, i32 1
  %arraydecay = getelementptr inbounds [16 x i8], [16 x i8]* %id, i32 0, i32 0
  %proc_root12 = getelementptr inbounds %struct.snd_card, %struct.snd_card* %card, i32 0, i32 21
  %1 = load %struct.snd_info_entry*, %struct.snd_info_entry** %proc_root12, align 8, !tbaa !111
  %name = getelementptr inbounds %struct.snd_info_entry, %struct.snd_info_entry* %1, i32 0, i32 0
  %2 = load i8*, i8** %name, align 8, !tbaa !71
  %call13 = call i32 @strcmp(i8* %arraydecay, i8* %2)
  %tobool14 = icmp ne i32 %call13, 0
  br i1 %tobool14, label %if.end16, label %cleanup

if.end16:                                         ; preds = %if.end11
  %proc_root_link = getelementptr inbounds %struct.snd_card, %struct.snd_card* %card, i32 0, i32 23
  %3 = load %struct.proc_dir_entry*, %struct.proc_dir_entry** %proc_root_link, align 8, !tbaa !112
  %tobool17 = icmp ne %struct.proc_dir_entry* %3, null
  br i1 %tobool17, label %cleanup, label %if.end19

if.end19:                                         ; preds = %if.end16
  %id20 = getelementptr inbounds %struct.snd_card, %struct.snd_card* %card, i32 0, i32 1
  %arraydecay21 = getelementptr inbounds [16 x i8], [16 x i8]* %id20, i32 0, i32 0
  %4 = load %struct.snd_info_entry*, %struct.snd_info_entry** @snd_proc_root, align 8, !tbaa !6
  %p22 = getelementptr inbounds %struct.snd_info_entry, %struct.snd_info_entry* %4, i32 0, i32 10
  %5 = load %struct.proc_dir_entry*, %struct.proc_dir_entry** %p22, align 8, !tbaa !69
  %proc_root23 = getelementptr inbounds %struct.snd_card, %struct.snd_card* %card, i32 0, i32 21
  %6 = load %struct.snd_info_entry*, %struct.snd_info_entry** %proc_root23, align 8, !tbaa !111
  %name24 = getelementptr inbounds %struct.snd_info_entry, %struct.snd_info_entry* %6, i32 0, i32 0
  %7 = load i8*, i8** %name24, align 8, !tbaa !71
  %call25 = call %struct.proc_dir_entry* @proc_symlink(i8* %arraydecay21, %struct.proc_dir_entry* %5, i8* %7)
  %tobool26 = icmp ne %struct.proc_dir_entry* %call25, null
  br i1 %tobool26, label %if.end28, label %cleanup

if.end28:                                         ; preds = %if.end19
  %proc_root_link29 = getelementptr inbounds %struct.snd_card, %struct.snd_card* %card, i32 0, i32 23
  store %struct.proc_dir_entry* %call25, %struct.proc_dir_entry** %proc_root_link29, align 8, !tbaa !112
  br label %cleanup

cleanup:                                          ; preds = %if.end28, %if.end19, %if.end16, %if.end11, %if.end, %entry
  %retval.0 = phi i32 [ 0, %if.end28 ], [ -6, %entry ], [ %call, %if.end ], [ 0, %if.end11 ], [ 0, %if.end16 ], [ -12, %if.end19 ]
  ret i32 %retval.0
}

; Function Attrs: nounwind uwtable
define internal i32 @snd_info_register_recursive(%struct.snd_info_entry* %entry1) #0 {
entry:
  %p2 = getelementptr inbounds %struct.snd_info_entry, %struct.snd_info_entry* %entry1, i32 0, i32 10
  %0 = load %struct.proc_dir_entry*, %struct.proc_dir_entry** %p2, align 8, !tbaa !69
  %tobool = icmp ne %struct.proc_dir_entry* %0, null
  br i1 %tobool, label %if.end4, label %if.then

if.then:                                          ; preds = %entry
  %call = call i32 @snd_info_register(%struct.snd_info_entry* %entry1)
  %cmp = icmp slt i32 %call, 0
  br i1 %cmp, label %cleanup, label %if.end4

if.end4:                                          ; preds = %if.then, %entry
  %children = getelementptr inbounds %struct.snd_info_entry, %struct.snd_info_entry* %entry1, i32 0, i32 12
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %if.end4
  %list12.sink = phi %struct.list_head* [ %list12, %for.inc ], [ %children, %if.end4 ]
  %next13 = getelementptr inbounds %struct.list_head, %struct.list_head* %list12.sink, i32 0, i32 0
  %1 = load %struct.list_head*, %struct.list_head** %next13, align 8, !tbaa !6
  %2 = bitcast %struct.list_head* %1 to i8*
  %add.ptr15 = getelementptr inbounds i8, i8* %2, i64 -144
  %3 = bitcast i8* %add.ptr15 to %struct.snd_info_entry*
  %list = getelementptr inbounds %struct.snd_info_entry, %struct.snd_info_entry* %3, i32 0, i32 13
  %children5 = getelementptr inbounds %struct.snd_info_entry, %struct.snd_info_entry* %entry1, i32 0, i32 12
  %cmp6 = icmp ne %struct.list_head* %list, %children5
  br i1 %cmp6, label %for.body, label %cleanup

for.body:                                         ; preds = %for.cond
  %call7 = call i32 @snd_info_register_recursive(%struct.snd_info_entry* %3)
  %cmp8 = icmp slt i32 %call7, 0
  br i1 %cmp8, label %cleanup, label %for.inc

for.inc:                                          ; preds = %for.body
  %list12 = getelementptr inbounds %struct.snd_info_entry, %struct.snd_info_entry* %3, i32 0, i32 13
  br label %for.cond

cleanup:                                          ; preds = %for.body, %for.cond, %if.then
  %retval.0 = phi i32 [ %call, %if.then ], [ %call7, %for.body ], [ 0, %for.cond ]
  ret i32 %retval.0
}

declare %struct.proc_dir_entry* @proc_symlink(i8*, %struct.proc_dir_entry*, i8*) #2

; Function Attrs: nounwind uwtable
define void @snd_info_card_id_change(%struct.snd_card* %card) #0 {
entry:
  call void @mutex_lock(%struct.mutex* @info_mutex)
  %proc_root_link = getelementptr inbounds %struct.snd_card, %struct.snd_card* %card, i32 0, i32 23
  %0 = load %struct.proc_dir_entry*, %struct.proc_dir_entry** %proc_root_link, align 8, !tbaa !112
  %tobool = icmp ne %struct.proc_dir_entry* %0, null
  br i1 %tobool, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %proc_root_link1 = getelementptr inbounds %struct.snd_card, %struct.snd_card* %card, i32 0, i32 23
  %1 = load %struct.proc_dir_entry*, %struct.proc_dir_entry** %proc_root_link1, align 8, !tbaa !112
  call void @proc_remove(%struct.proc_dir_entry* %1)
  %proc_root_link2 = getelementptr inbounds %struct.snd_card, %struct.snd_card* %card, i32 0, i32 23
  store %struct.proc_dir_entry* null, %struct.proc_dir_entry** %proc_root_link2, align 8, !tbaa !112
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  %id = getelementptr inbounds %struct.snd_card, %struct.snd_card* %card, i32 0, i32 1
  %arraydecay = getelementptr inbounds [16 x i8], [16 x i8]* %id, i32 0, i32 0
  %proc_root = getelementptr inbounds %struct.snd_card, %struct.snd_card* %card, i32 0, i32 21
  %2 = load %struct.snd_info_entry*, %struct.snd_info_entry** %proc_root, align 8, !tbaa !111
  %name = getelementptr inbounds %struct.snd_info_entry, %struct.snd_info_entry* %2, i32 0, i32 0
  %3 = load i8*, i8** %name, align 8, !tbaa !71
  %call = call i32 @strcmp(i8* %arraydecay, i8* %3)
  %tobool3 = icmp ne i32 %call, 0
  br i1 %tobool3, label %if.then4, label %if.end11

if.then4:                                         ; preds = %if.end
  %id5 = getelementptr inbounds %struct.snd_card, %struct.snd_card* %card, i32 0, i32 1
  %arraydecay6 = getelementptr inbounds [16 x i8], [16 x i8]* %id5, i32 0, i32 0
  %4 = load %struct.snd_info_entry*, %struct.snd_info_entry** @snd_proc_root, align 8, !tbaa !6
  %p = getelementptr inbounds %struct.snd_info_entry, %struct.snd_info_entry* %4, i32 0, i32 10
  %5 = load %struct.proc_dir_entry*, %struct.proc_dir_entry** %p, align 8, !tbaa !69
  %proc_root7 = getelementptr inbounds %struct.snd_card, %struct.snd_card* %card, i32 0, i32 21
  %6 = load %struct.snd_info_entry*, %struct.snd_info_entry** %proc_root7, align 8, !tbaa !111
  %name8 = getelementptr inbounds %struct.snd_info_entry, %struct.snd_info_entry* %6, i32 0, i32 0
  %7 = load i8*, i8** %name8, align 8, !tbaa !71
  %call9 = call %struct.proc_dir_entry* @proc_symlink(i8* %arraydecay6, %struct.proc_dir_entry* %5, i8* %7)
  %proc_root_link10 = getelementptr inbounds %struct.snd_card, %struct.snd_card* %card, i32 0, i32 23
  store %struct.proc_dir_entry* %call9, %struct.proc_dir_entry** %proc_root_link10, align 8, !tbaa !112
  br label %if.end11

if.end11:                                         ; preds = %if.then4, %if.end
  call void @mutex_unlock(%struct.mutex* @info_mutex)
  ret void
}

; Function Attrs: nounwind uwtable
define void @snd_info_card_disconnect(%struct.snd_card* %card) #0 {
entry:
  %tobool = icmp ne %struct.snd_card* %card, null
  br i1 %tobool, label %if.end, label %return

if.end:                                           ; preds = %entry
  call void @mutex_lock(%struct.mutex* @info_mutex)
  %proc_root_link = getelementptr inbounds %struct.snd_card, %struct.snd_card* %card, i32 0, i32 23
  %0 = load %struct.proc_dir_entry*, %struct.proc_dir_entry** %proc_root_link, align 8, !tbaa !112
  call void @proc_remove(%struct.proc_dir_entry* %0)
  %proc_root_link1 = getelementptr inbounds %struct.snd_card, %struct.snd_card* %card, i32 0, i32 23
  store %struct.proc_dir_entry* null, %struct.proc_dir_entry** %proc_root_link1, align 8, !tbaa !112
  %proc_root = getelementptr inbounds %struct.snd_card, %struct.snd_card* %card, i32 0, i32 21
  %1 = load %struct.snd_info_entry*, %struct.snd_info_entry** %proc_root, align 8, !tbaa !111
  %tobool2 = icmp ne %struct.snd_info_entry* %1, null
  br i1 %tobool2, label %if.then3, label %if.end5

if.then3:                                         ; preds = %if.end
  %proc_root4 = getelementptr inbounds %struct.snd_card, %struct.snd_card* %card, i32 0, i32 21
  %2 = load %struct.snd_info_entry*, %struct.snd_info_entry** %proc_root4, align 8, !tbaa !111
  call void @snd_info_disconnect(%struct.snd_info_entry* %2)
  br label %if.end5

if.end5:                                          ; preds = %if.then3, %if.end
  call void @mutex_unlock(%struct.mutex* @info_mutex)
  br label %return

return:                                           ; preds = %if.end5, %entry
  ret void
}

; Function Attrs: nounwind uwtable
define i32 @snd_info_card_free(%struct.snd_card* %card) #0 {
entry:
  %tobool = icmp ne %struct.snd_card* %card, null
  br i1 %tobool, label %if.end, label %return

if.end:                                           ; preds = %entry
  %proc_root = getelementptr inbounds %struct.snd_card, %struct.snd_card* %card, i32 0, i32 21
  %0 = load %struct.snd_info_entry*, %struct.snd_info_entry** %proc_root, align 8, !tbaa !111
  call void @snd_info_free_entry(%struct.snd_info_entry* %0)
  %proc_root1 = getelementptr inbounds %struct.snd_card, %struct.snd_card* %card, i32 0, i32 21
  store %struct.snd_info_entry* null, %struct.snd_info_entry** %proc_root1, align 8, !tbaa !111
  br label %return

return:                                           ; preds = %if.end, %entry
  ret i32 0
}

attributes #0 = { nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { inlinehint nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { nounwind readnone }
attributes #4 = { alwaysinline nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { argmemonly nounwind }
attributes #6 = { nounwind readnone speculatable }
attributes #7 = { nounwind }

!llvm.ident = !{!0, !0}
!llvm.module.flags = !{!1}

!0 = !{!"clang version 5.0.1 (tags/RELEASE_500/final)"}
!1 = !{i32 1, !"wchar_size", i32 4}
!2 = !{!3, !3, i64 0}
!3 = !{!"int", !4, i64 0}
!4 = !{!"omnipotent char", !5, i64 0}
!5 = !{!"Simple C/C++ TBAA"}
!6 = !{!7, !7, i64 0}
!7 = !{!"any pointer", !4, i64 0}
!8 = !{!9, !7, i64 16}
!9 = !{!"snd_minor", !3, i64 0, !3, i64 4, !3, i64 8, !7, i64 16, !7, i64 24, !7, i64 32, !7, i64 40}
!10 = !{!11, !7, i64 0}
!11 = !{!"file_operations", !7, i64 0, !7, i64 8, !7, i64 16, !7, i64 24, !7, i64 32, !7, i64 40, !7, i64 48, !7, i64 56, !7, i64 64, !7, i64 72, !7, i64 80, !7, i64 88, !7, i64 96, !7, i64 104, !7, i64 112, !7, i64 120, !7, i64 128, !7, i64 136, !7, i64 144, !7, i64 152, !7, i64 160, !7, i64 168, !7, i64 176, !7, i64 184, !7, i64 192, !7, i64 200, !7, i64 208, !7, i64 216, !7, i64 224, !7, i64 232}
!12 = !{!13, !7, i64 40}
!13 = !{!"file", !4, i64 0, !14, i64 16, !7, i64 32, !7, i64 40, !15, i64 48, !16, i64 56, !3, i64 64, !3, i64 68, !18, i64 72, !22, i64 104, !23, i64 112, !7, i64 144, !27, i64 152, !22, i64 184, !7, i64 192, !7, i64 200, !21, i64 208, !21, i64 224, !7, i64 240}
!14 = !{!"path", !7, i64 0, !7, i64 8}
!15 = !{!"spinlock", !4, i64 0}
!16 = !{!"", !17, i64 0}
!17 = !{!"long", !4, i64 0}
!18 = !{!"mutex", !16, i64 0, !15, i64 8, !19, i64 12, !21, i64 16}
!19 = !{!"optimistic_spin_queue", !20, i64 0}
!20 = !{!"", !3, i64 0}
!21 = !{!"list_head", !7, i64 0, !7, i64 8}
!22 = !{!"long long", !4, i64 0}
!23 = !{!"fown_struct", !24, i64 0, !7, i64 8, !4, i64 16, !20, i64 20, !20, i64 24, !3, i64 28}
!24 = !{!"", !25, i64 0}
!25 = !{!"qrwlock", !20, i64 0, !26, i64 4}
!26 = !{!"qspinlock", !20, i64 0}
!27 = !{!"file_ra_state", !17, i64 0, !3, i64 8, !3, i64 12, !3, i64 16, !3, i64 20, !22, i64 24}
!28 = !{i32 -2144534148, i32 -2144534123, i32 -2144533853, i32 -2144534056, i32 -2144534025, i32 -2144533995}
!29 = !{!11, !7, i64 96}
!30 = !{!31, !3, i64 76}
!31 = !{!"inode", !32, i64 0, !32, i64 2, !20, i64 4, !20, i64 8, !3, i64 12, !7, i64 16, !7, i64 24, !7, i64 32, !7, i64 40, !7, i64 48, !7, i64 56, !17, i64 64, !4, i64 72, !3, i64 76, !22, i64 80, !33, i64 88, !33, i64 104, !33, i64 120, !15, i64 136, !32, i64 140, !3, i64 144, !17, i64 152, !17, i64 160, !34, i64 168, !17, i64 208, !17, i64 216, !36, i64 224, !21, i64 240, !21, i64 256, !21, i64 272, !21, i64 288, !4, i64 304, !22, i64 320, !20, i64 328, !20, i64 332, !20, i64 336, !7, i64 344, !7, i64 352, !37, i64 360, !21, i64 512, !4, i64 528, !3, i64 536, !3, i64 540, !40, i64 544, !7, i64 552}
!32 = !{!"short", !4, i64 0}
!33 = !{!"timespec", !17, i64 0, !17, i64 8}
!34 = !{!"rw_semaphore", !16, i64 0, !21, i64 8, !35, i64 24, !19, i64 28, !7, i64 32}
!35 = !{!"raw_spinlock", !26, i64 0}
!36 = !{!"hlist_node", !7, i64 0, !7, i64 8}
!37 = !{!"address_space", !7, i64 0, !38, i64 8, !15, i64 24, !20, i64 28, !39, i64 32, !34, i64 40, !17, i64 80, !17, i64 88, !17, i64 96, !7, i64 104, !17, i64 112, !15, i64 120, !3, i64 124, !21, i64 128, !7, i64 144}
!38 = !{!"radix_tree_root", !3, i64 0, !7, i64 8}
!39 = !{!"rb_root", !7, i64 0}
!40 = !{!"hlist_head", !7, i64 0}
!41 = !{!9, !7, i64 32}
!42 = !{!9, !3, i64 0}
!43 = !{!44, !3, i64 0}
!44 = !{!"snd_card", !3, i64 0, !4, i64 4, !4, i64 20, !4, i64 36, !4, i64 68, !4, i64 148, !4, i64 180, !4, i64 260, !7, i64 392, !7, i64 400, !7, i64 408, !21, i64 416, !45, i64 432, !3, i64 1160, !34, i64 1168, !24, i64 1208, !3, i64 1216, !3, i64 1220, !21, i64 1224, !21, i64 1240, !18, i64 1256, !7, i64 1288, !7, i64 1296, !7, i64 1304, !21, i64 1312, !7, i64 1328, !15, i64 1336, !3, i64 1340, !7, i64 1344, !7, i64 1352, !45, i64 1360, !4, i64 2088, !52, i64 2120, !3, i64 2124, !18, i64 2128, !54, i64 2160, !7, i64 2184, !3, i64 2192}
!45 = !{!"device", !7, i64 0, !7, i64 8, !46, i64 16, !7, i64 80, !7, i64 88, !18, i64 96, !7, i64 128, !7, i64 136, !7, i64 144, !7, i64 152, !49, i64 160, !50, i64 200, !7, i64 488, !7, i64 496, !21, i64 504, !3, i64 520, !7, i64 528, !7, i64 536, !22, i64 544, !17, i64 552, !7, i64 560, !21, i64 568, !7, i64 584, !57, i64 592, !7, i64 600, !7, i64 608, !3, i64 616, !3, i64 620, !15, i64 624, !21, i64 632, !58, i64 648, !7, i64 680, !7, i64 688, !7, i64 696, !7, i64 704, !7, i64 712, !52, i64 720, !52, i64 720}
!46 = !{!"kobject", !7, i64 0, !21, i64 8, !7, i64 24, !7, i64 32, !7, i64 40, !7, i64 48, !47, i64 56, !3, i64 60, !3, i64 60, !3, i64 60, !3, i64 60, !3, i64 60}
!47 = !{!"kref", !48, i64 0}
!48 = !{!"refcount_struct", !20, i64 0}
!49 = !{!"dev_links_info", !21, i64 0, !21, i64 16, !4, i64 32}
!50 = !{!"dev_pm_info", !51, i64 0, !3, i64 4, !3, i64 4, !52, i64 4, !52, i64 4, !52, i64 4, !52, i64 4, !52, i64 4, !52, i64 4, !52, i64 5, !15, i64 8, !21, i64 16, !53, i64 32, !7, i64 64, !52, i64 72, !52, i64 72, !52, i64 72, !55, i64 80, !17, i64 128, !56, i64 136, !54, i64 168, !7, i64 192, !20, i64 200, !20, i64 204, !3, i64 208, !3, i64 208, !3, i64 208, !3, i64 208, !3, i64 208, !3, i64 208, !52, i64 209, !3, i64 209, !3, i64 209, !3, i64 209, !3, i64 209, !3, i64 209, !3, i64 212, !4, i64 216, !4, i64 220, !3, i64 224, !3, i64 228, !17, i64 232, !17, i64 240, !17, i64 248, !17, i64 256, !7, i64 264, !7, i64 272, !7, i64 280}
!51 = !{!"pm_message", !3, i64 0}
!52 = !{!"_Bool", !4, i64 0}
!53 = !{!"completion", !3, i64 0, !54, i64 8}
!54 = !{!"__wait_queue_head", !15, i64 0, !21, i64 8}
!55 = !{!"timer_list", !36, i64 0, !17, i64 16, !7, i64 24, !17, i64 32, !3, i64 40}
!56 = !{!"work_struct", !16, i64 0, !21, i64 8, !7, i64 24}
!57 = !{!"dev_archdata", !7, i64 0}
!58 = !{!"klist_node", !7, i64 0, !21, i64 8, !47, i64 24}
!59 = !{!9, !3, i64 4}
!60 = !{!9, !3, i64 8}
!61 = !{!9, !7, i64 24}
!62 = !{!9, !7, i64 40}
!63 = !{!45, !3, i64 616}
!64 = !{!4, !4, i64 0}
!65 = !{!66, !7, i64 0}
!66 = !{!"snd_info_buffer", !7, i64 0, !3, i64 8, !3, i64 12, !3, i64 16, !3, i64 20, !3, i64 24}
!67 = !{!68, !7, i64 48}
!68 = !{!"snd_info_entry", !7, i64 0, !32, i64 8, !17, i64 16, !32, i64 24, !4, i64 32, !7, i64 48, !7, i64 56, !7, i64 64, !7, i64 72, !7, i64 80, !7, i64 88, !18, i64 96, !21, i64 128, !21, i64 144}
!69 = !{!68, !7, i64 88}
!70 = !{!68, !32, i64 8}
!71 = !{!68, !7, i64 0}
!72 = !{!68, !32, i64 24}
!73 = !{!68, !17, i64 16}
!74 = !{!13, !7, i64 200}
!75 = !{!76, !7, i64 120}
!76 = !{!"seq_file", !7, i64 0, !17, i64 8, !17, i64 16, !17, i64 24, !17, i64 32, !22, i64 40, !22, i64 48, !22, i64 56, !18, i64 64, !7, i64 96, !3, i64 104, !7, i64 112, !7, i64 120}
!77 = !{!78, !7, i64 16}
!78 = !{!"snd_info_private_data", !7, i64 0, !7, i64 8, !7, i64 16, !7, i64 24}
!79 = !{!22, !22, i64 0}
!80 = !{!78, !7, i64 8}
!81 = !{!66, !3, i64 16}
!82 = !{!66, !3, i64 12}
!83 = !{!78, !7, i64 0}
!84 = !{!68, !7, i64 64}
!85 = !{!86, !7, i64 32}
!86 = !{!"snd_info_entry_ops", !7, i64 0, !7, i64 8, !7, i64 16, !7, i64 24, !7, i64 32, !7, i64 40, !7, i64 48, !7, i64 56}
!87 = !{!78, !7, i64 24}
!88 = !{!13, !22, i64 104}
!89 = !{!17, !17, i64 0}
!90 = !{!86, !7, i64 16}
!91 = !{!86, !7, i64 24}
!92 = !{!86, !7, i64 40}
!93 = !{!86, !7, i64 48}
!94 = !{!86, !7, i64 56}
!95 = !{!13, !3, i64 64}
!96 = !{!86, !7, i64 0}
!97 = !{!86, !7, i64 8}
!98 = !{!13, !7, i64 32}
!99 = !{!21, !7, i64 0}
!100 = !{!68, !7, i64 144}
!101 = !{!68, !7, i64 80}
!102 = !{!21, !7, i64 8}
!103 = !{!32, !32, i64 0}
!104 = !{i32 -2147340214}
!105 = !{i32 -2147340176}
!106 = !{!44, !7, i64 392}
!107 = !{!68, !7, i64 56}
!108 = !{!66, !3, i64 20}
!109 = !{!66, !3, i64 24}
!110 = !{!66, !3, i64 8}
!111 = !{!44, !7, i64 1288}
!112 = !{!44, !7, i64 1304}
